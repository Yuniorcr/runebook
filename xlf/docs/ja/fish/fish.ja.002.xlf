<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="dd47d3d9defb9d0e06bd3e10365751c8e663406f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt;, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; は、&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt;によって作成され、&lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;によって変更された、現在の&lt;a href=&quot;../index#directory-stack&quot;&gt;ディレクトリスタックを&lt;/a&gt;出力します。</target>
        </trans-unit>
        <trans-unit id="67052930f5ba11262dce6b9369319b549f57f918" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; and modified by &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; は、&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt;によって作成され、&lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;によって変更された現在のディレクトリスタックを出力します。</target>
        </trans-unit>
        <trans-unit id="fa06ced14a3385987b86c9e9788919b13ad4eba2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dirs&lt;/code&gt; prints the current directory stack, as created by the &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; は、&lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;コマンドで作成された現在のディレクトリスタックを出力します。</target>
        </trans-unit>
        <trans-unit id="960d1e17f7b9ecf2dc9f4146dd86d90f7a66c6a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt; from the job list without terminating them.</source>
          <target state="translated">&lt;code&gt;disown (jobs -p)&lt;/code&gt; は、すべての&lt;a href=&quot;jobs#cmd-jobs&quot;&gt;ジョブ&lt;/a&gt;を終了せずにジョブリストから削除します。</target>
        </trans-unit>
        <trans-unit id="68e9e94ab8f86bdeefa011d87a89eb714e2e975f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown (jobs -p)&lt;/code&gt; removes all jobs from the job list without terminating them.</source>
          <target state="translated">&lt;code&gt;disown (jobs -p)&lt;/code&gt; は、すべてのジョブを終了せずにジョブリストから削除します。</target>
        </trans-unit>
        <trans-unit id="96ed64c4a46b71c7f378a79bc509571c57d254f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; は、指定された&lt;a href=&quot;../index#syntax-job-control&quot;&gt;ジョブをジョブ&lt;/a&gt;のリストから削除します。仕事自体は存在し続けますが、魚はもはやそれを追跡しません。</target>
        </trans-unit>
        <trans-unit id="8a033e91a71f36b0fee3effb2f84125242340bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; removes the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; from the list of jobs. The job itself continues to exist, but fish does not keep track of it any longer.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; は、指定された&lt;a href=&quot;index#syntax-job-control&quot;&gt;ジョブをジョブ&lt;/a&gt;のリストから削除します。仕事自体は存在し続けますが、魚はもはやそれを追跡しません。</target>
        </trans-unit>
        <trans-unit id="9c723a54d18efe8d350eb3bbea07e3d214e66566" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disown&lt;/code&gt; returns 0 if all specified jobs were disowned successfully, and 1 if any problems were encountered.</source>
          <target state="translated">&lt;code&gt;disown&lt;/code&gt; は、指定されたすべてのジョブが正常に破棄された場合は0を返し、問題が発生した場合は1を返します。</target>
        </trans-unit>
        <trans-unit id="1ecb4eb0616062c503a5f344f1a05890c949fe35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;down-line&lt;/code&gt;, move down one line</source>
          <target state="translated">&lt;code&gt;down-line&lt;/code&gt; 、1行下に移動</target>
        </trans-unit>
        <trans-unit id="9b690e3c2f3c4d26267990ca1121e08803e26790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;downcase-word&lt;/code&gt;, make the current word lowercase</source>
          <target state="translated">&lt;code&gt;downcase-word&lt;/code&gt; 、現在の単語を小文字にする</target>
        </trans-unit>
        <trans-unit id="c8ce83fdd366a12c3214fbb25e2354db22918e72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; - Euler's number.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; -オイラー数。</target>
        </trans-unit>
        <trans-unit id="b60b17e75641cc38e1c4124096a48c500b5a0905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo $flounder &amp;gt;&amp;amp;2 | less&lt;/code&gt; is the first job, &lt;code&gt;and echo $catfish&lt;/code&gt; the second.</source>
          <target state="translated">&lt;code&gt;echo $flounder &amp;gt;&amp;amp;2 | less&lt;/code&gt; 最初の仕事はlessで、2番目の仕事は &lt;code&gt;and echo $catfish&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="db82cff03deb4d0edad47e48c508110149601fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echo&lt;/code&gt; displays a string of text.</source>
          <target state="translated">&lt;code&gt;echo&lt;/code&gt; はテキストの文字列を表示します。</target>
        </trans-unit>
        <trans-unit id="197832f8ace5133971e0d466b344b70886d4b7fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt;. The arguments are passed to the event handlers as function arguments.</source>
          <target state="translated">&lt;code&gt;emit&lt;/code&gt; は、イベントを放出または発生させます。イベントは、&lt;a href=&quot;../index#event&quot;&gt;イベントハンドラー&lt;/a&gt;と呼ばれる特別な関数に配信されるか、キャッチされます。引数は、関数の引数としてイベントハンドラーに渡されます。</target>
        </trans-unit>
        <trans-unit id="d4ab97d4f9361c5405fbd1cb8b1c830e462276d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emit&lt;/code&gt; emits, or fires, an event. Events are delivered to, or caught by, special functions called event handlers. The arguments are passed to the event handlers as function arguments.</source>
          <target state="translated">&lt;code&gt;emit&lt;/code&gt; 発し、または火災、イベント。イベントは、イベントハンドラーと呼ばれる特別な関数に配信またはキャッチされます。引数は、関数の引数としてイベントハンドラーに渡されます。</target>
        </trans-unit>
        <trans-unit id="4d522681c2d73791cceab1025800721dd4d39780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-buffer&lt;/code&gt;, moves to the end of the buffer, i.e. the end of the first line</source>
          <target state="translated">&lt;code&gt;end-of-buffer&lt;/code&gt; 、バッファの終わり、つまり最初の行の終わりに移動します</target>
        </trans-unit>
        <trans-unit id="b0b2f9cdb44af1315c1e9e593723762d03d3fe51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-history&lt;/code&gt;, move to the end of the history</source>
          <target state="translated">&lt;code&gt;end-of-history&lt;/code&gt; 、歴史の終わりに移動する</target>
        </trans-unit>
        <trans-unit id="7707e2618c27c9ed8346db38dfd79af1c381cb7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-of-line&lt;/code&gt;, move to the end of the line</source>
          <target state="translated">&lt;code&gt;end-of-line&lt;/code&gt; 、行末に移動</target>
        </trans-unit>
        <trans-unit id="af8e60a2a7ae6dc063d3b5432c2478d27ef3c004" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end-selection&lt;/code&gt;, end selecting text</source>
          <target state="translated">&lt;code&gt;end-selection&lt;/code&gt; 、テキストの選択を終了</target>
        </trans-unit>
        <trans-unit id="e80d6bfedde793f5f7c0f4d9d3d5e295a6d21cae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands started by one of the following commands:</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; は、次のいずれかのコマンドによって開始されたコマンドのブロックを終了します。</target>
        </trans-unit>
        <trans-unit id="262f87c81f23dff1f7f93a5b6044595d7948ad4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end&lt;/code&gt; ends a block of commands.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; は、コマンドのブロックを終了します。</target>
        </trans-unit>
        <trans-unit id="50137453d16688a498916282a2c1c45a4f3bcc6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval&lt;/code&gt; evaluates the specified parameters as a command. If more than one parameter is specified, all parameters will be joined using a space character as a separator.</source>
          <target state="translated">&lt;code&gt;eval&lt;/code&gt; は、指定されたパラメーターをコマンドとして評価します。複数のパラメーターを指定した場合、すべてのパラメーターは、区切り文字としてスペース文字を使用して結合されます。</target>
        </trans-unit>
        <trans-unit id="54915828756074f95f7a1e549b17591d5bbbc7f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec emacs&lt;/code&gt; starts up the emacs text editor, and exits &lt;code&gt;fish&lt;/code&gt;. When emacs exits, the session will terminate.</source>
          <target state="translated">&lt;code&gt;exec emacs&lt;/code&gt; はemacsテキストエディタを起動し、 &lt;code&gt;fish&lt;/code&gt; を終了します。emacsが終了すると、セッションは終了します。</target>
        </trans-unit>
        <trans-unit id="dc50b22031778292cfda48a3d988ca690c6c2412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exec&lt;/code&gt; replaces the currently running shell with a new command. On successful completion, &lt;code&gt;exec&lt;/code&gt; never returns. &lt;code&gt;exec&lt;/code&gt; cannot be used inside a pipeline.</source>
          <target state="translated">&lt;code&gt;exec&lt;/code&gt; は、現在実行中のシェルを新しいコマンドに置き換えます。正常に完了すると、 &lt;code&gt;exec&lt;/code&gt; は戻りません。 &lt;code&gt;exec&lt;/code&gt; はパイプライン内では使用できません。</target>
        </trans-unit>
        <trans-unit id="9f9d21c01c5295004a45a90f29ee49703808f517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt; run the current commandline</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 現在のコマンドラインを実行します</target>
        </trans-unit>
        <trans-unit id="9a098fbbbc0f4e241457fac3357173a899382b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;execute&lt;/code&gt;, run the current commandline</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 、現在のコマンドラインを実行します</target>
        </trans-unit>
        <trans-unit id="4b4c92277d3c3b535fdab93f22262c655be96df1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit code. Otherwise, the exit code will be that of the last command executed.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; は魚を退場させます。場合 &lt;code&gt;STATUS&lt;/code&gt; 供給され、それは整数に変換され、終了コードとして使用されます。それ以外の場合、終了コードは最後に実行されたコマンドの終了コードになります。</target>
        </trans-unit>
        <trans-unit id="d6ae4ec9fd08b1761aca796efb020b9925ac0927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; causes fish to exit. If &lt;code&gt;STATUS&lt;/code&gt; is supplied, it will be converted to an integer and used as the exit status. Otherwise, the exit status will be that of the last command executed.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; は魚を出口にします。 &lt;code&gt;STATUS&lt;/code&gt; が指定されている場合は、整数に変換され、終了ステータスとして使用されます。それ以外の場合、終了ステータスは最後に実行されたコマンドのステータスになります。</target>
        </trans-unit>
        <trans-unit id="4c6efbe4d59f1b07df60218af12c18782d648132" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt;, exit the shell</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; 、シェルを終了</target>
        </trans-unit>
        <trans-unit id="4e29309373a74a1b16ddfa0609041f77380dff25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exp&lt;/code&gt; - the base-e exponential function</source>
          <target state="translated">&lt;code&gt;exp&lt;/code&gt; -底がeの指数関数</target>
        </trans-unit>
        <trans-unit id="4d6b69f792298e243e4d6849a74e1f6939dd5c74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-abbr&lt;/code&gt; expands any abbreviation currently under the cursor</source>
          <target state="translated">&lt;code&gt;expand-abbr&lt;/code&gt; は、現在カーソルの下にある略語を展開します</target>
        </trans-unit>
        <trans-unit id="c4a0547f40f5e7cbc43f2d88ccf484a458a7b2e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;expand-abbr&lt;/code&gt;, expands any abbreviation currently under the cursor</source>
          <target state="translated">&lt;code&gt;expand-abbr&lt;/code&gt; 、現在カーソルの下にある略語を展開します</target>
        </trans-unit>
        <trans-unit id="b3ec88c5f26ffd60440d3112086d3f1c16e73ee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fac&lt;/code&gt; - factorial</source>
          <target state="translated">&lt;code&gt;fac&lt;/code&gt; -階乗</target>
        </trans-unit>
        <trans-unit id="7bd010b23a35ff01964bb2a67cb5239733c4271d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; sets the exit status to 1.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; は、終了ステータスを1に設定します。</target>
        </trans-unit>
        <trans-unit id="0ca1e464b704300c81bf4a662e655838605e064f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;features&lt;/code&gt; lists all available feature flags.</source>
          <target state="translated">&lt;code&gt;features&lt;/code&gt; は、使用可能なすべての機能フラグをリストします。</target>
        </trans-unit>
        <trans-unit id="616eeb15e25e0733aa1a4c65bae40d8e08b73a10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg %3&lt;/code&gt; will put job 3 into the foreground.</source>
          <target state="translated">&lt;code&gt;fg %3&lt;/code&gt; は、ジョブ3をフォアグラウンドに配置します。</target>
        </trans-unit>
        <trans-unit id="415ac7210f05f5e605584e4764ac5505f5a0a831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If &lt;code&gt;PID&lt;/code&gt; is specified, the job containing a process with the specified process ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; は、指定された&lt;a href=&quot;../index#syntax-job-control&quot;&gt;ジョブ&lt;/a&gt;をフォアグラウンドに移動し、停止した場合は再開します。フォアグラウンドジョブが実行されている間、魚は中断されます。ジョブが指定されていない場合、最後に使用されるジョブがフォアグラウンドに配置されます。 &lt;code&gt;PID&lt;/code&gt; が指定されている場合、指定されたプロセスIDを持つプロセスを含むジョブがフォアグラウンドに配置されます。</target>
        </trans-unit>
        <trans-unit id="dba254c3859c0271dd6d51a7fa26986d0843a3b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;../index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; は、指定された&lt;a href=&quot;../index#syntax-job-control&quot;&gt;ジョブ&lt;/a&gt;をフォアグラウンドに移動し、停止した場合は再開します。フォアグラウンドジョブが実行されている間、魚は中断されます。ジョブが指定されていない場合、最後に使用されるジョブがフォアグラウンドに配置されます。PIDが指定されている場合、指定されたグループIDのジョブがフォアグラウンドに配置されます。</target>
        </trans-unit>
        <trans-unit id="0a7a1110af9305bc1cfb185b18660b97a03ee068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; brings the specified &lt;a href=&quot;index#syntax-job-control&quot;&gt;job&lt;/a&gt; to the foreground, resuming it if it is stopped. While a foreground job is executed, fish is suspended. If no job is specified, the last job to be used is put in the foreground. If PID is specified, the job with the specified group ID is put in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; は指定された&lt;a href=&quot;index#syntax-job-control&quot;&gt;ジョブ&lt;/a&gt;をフォアグラウンドに移動し、停止されていた場合は再開します。フォアグラウンドジョブが実行されている間、魚は一時停止されます。ジョブが指定されていない場合、最後に使用されるジョブがフォアグラウンドに置かれます。PIDを指定すると、指定したグループIDのジョブがフォアグラウンドに配置されます。</target>
        </trans-unit>
        <trans-unit id="2aa0e0e8cf8a0bba6d31683fafcc730149fe3080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fg&lt;/code&gt; will put the last job in the foreground.</source>
          <target state="translated">&lt;code&gt;fg&lt;/code&gt; は最後のジョブをフォアグラウンドに置きます。</target>
        </trans-unit>
        <trans-unit id="f59d3cc746010fada2bbe7590bb1f716dca37ed5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; は、現在実行中のスクリプトのファイル名を出力します。また、 &lt;code&gt;current-filename&lt;/code&gt; 、 &lt;code&gt;-f&lt;/code&gt; または &lt;code&gt;--current-filename&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b055c8f73612d13a371ff0e797dc3bdb9dc4c0ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename&lt;/code&gt; prints the filename of the currently running script. Also &lt;code&gt;current-filename&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--current-filename&lt;/code&gt;. This depends on how the script was called - if it was called via a symlink, the symlink will be returned, and if the current script was received via &lt;code&gt;source&lt;/code&gt; it will be &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;filename&lt;/code&gt; は、現在実行中のスクリプトのファイル名を出力します。また、 &lt;code&gt;current-filename&lt;/code&gt; 、 &lt;code&gt;-f&lt;/code&gt; または &lt;code&gt;--current-filename&lt;/code&gt; 。これは、スクリプトがどのように呼び出されたかによって異なります-シンボリックリンクを介して呼び出された場合はシンボリックリンクが返され、現在のスクリプトが &lt;code&gt;source&lt;/code&gt; を介して受信された場合は &lt;code&gt;-&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="d6cb67ef43537c65789f446737251042e346c8bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; will start the Firefox web browser in the background and remove it from the job list, meaning it will not be closed when the fish process is closed.</source>
          <target state="translated">&lt;code&gt;firefox &amp;amp;; disown&lt;/code&gt; は、Firefox Webブラウザーをバックグラウンドで起動し、ジョブリストから削除します。つまり、fishプロセスが閉じられても閉じられません。</target>
        </trans-unit>
        <trans-unit id="b79f46ab70d3df2b244e8bc8b2fd59aefcebc9ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish-path&lt;/code&gt; prints the absolute path to the currently executing instance of fish.</source>
          <target state="translated">&lt;code&gt;fish-path&lt;/code&gt; は、現在実行中の魚のインスタンスへの絶対パスを出力します。</target>
        </trans-unit>
        <trans-unit id="d3c1add6b5f641c5abbdbd7961e2d0d5e497b5c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also has man pages for its commands. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、そのコマンドのmanページもあります。例えば、 &lt;code&gt;man set&lt;/code&gt; のドキュメントが表示されます &lt;code&gt;set&lt;/code&gt; のmanページなどを。</target>
        </trans-unit>
        <trans-unit id="055cf18d69e0e1c45eaf95982b74b7ac7158e0d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; also sends additional information to the user through the values of certain environment variables. The user cannot change the values of most of these variables.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、特定の環境変数の値を通じてユーザーに追加情報も送信します。ユーザーはこれらの変数のほとんどの値を変更できません。</target>
        </trans-unit>
        <trans-unit id="9c00223ef2e28efafb5de62e61373ec8694c8272" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates arrays from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、名前がPATHで終わるすべての環境変数から、それらをコロンで分割することにより、自動的に配列を作成します。他の変数は自動的に分割されません。</target>
        </trans-unit>
        <trans-unit id="0015b01676196bbfa856dc3993196f600126666f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; automatically creates lists from all environment variables whose name ends in PATH, by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、名前がPATHで終わるすべての環境変数から、それらをコロンで分割することによって自動的にリストを作成します。他の変数は自動的に分割されません。</target>
        </trans-unit>
        <trans-unit id="be9c60f74c31afa12603c403c8cb2df121109c00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can also complete many commands, like git branches:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、gitブランチなどの多くのコマンドを完了することもできます。</target>
        </trans-unit>
        <trans-unit id="793e1a6244dde2eb4f7f379dc7e8580b680ffd66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable. To access one element of a list, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、変数内に複数の文字列のリスト（または必要に応じて「配列」）を格納できます。リストの1つの要素にアクセスするには、次のように角括弧内の要素のインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="40e0afc27485f7f758e91f83d0782e508a6c6b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; can store a list of multiple strings inside of a variable. To access one element of an array, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、変数内に複数の文字列のリストを格納できます。配列の1つの要素にアクセスするには、次のように角かっこ内の要素のインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="e5066e9e10becfb9012a96c88f59108b874b77ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; comes with a rich set of tab completions, that work &quot;out of the box.&quot;</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、「箱から出して」機能する豊富なタブ補完のセットが付属しています。</target>
        </trans-unit>
        <trans-unit id="59bdeaf3ad58016c3bbb3a77baf3160d076a45b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as '&lt;code&gt;--color&lt;/code&gt;') and an old-style long switch (like '&lt;code&gt;-shuffle&lt;/code&gt;'), respectively. If the command 'myprog' has an option '-o' which can also be written as '&lt;code&gt;--output&lt;/code&gt;', and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、コマンドが受け入れるスイッチの指定をサポートする特別な構文があります。スイッチ &lt;code&gt;-s&lt;/code&gt; 、 &lt;code&gt;-l&lt;/code&gt; 、および &lt;code&gt;-o&lt;/code&gt; は、短いスイッチ（ &lt;code&gt;-l&lt;/code&gt; などの単一文字）、gnuスタイルの長いスイッチ（ ' &lt;code&gt;--color&lt;/code&gt; 'など）、および古いスタイルの長いスイッチ（ ' &lt;code&gt;-shuffle&lt;/code&gt; '）、それぞれ。コマンド 'myprog'にオプション '-o'があり、 ' &lt;code&gt;--output&lt;/code&gt; ' としても記述でき、 'yes'または 'no'の追加の値を取ることができる場合、これは次のように指定して指定できます。</target>
        </trans-unit>
        <trans-unit id="41f19a29132a5adfb147fa540bd9b6a1c6c80fb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has a special syntax to support specifying switches accepted by a command. The switches &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-o&lt;/code&gt; are used to specify a short switch (single character, such as &lt;code&gt;-l&lt;/code&gt;), a gnu style long switch (such as &lt;code&gt;--color&lt;/code&gt;) and an old-style long switch (like &lt;code&gt;-shuffle&lt;/code&gt;), respectively. If the command 'myprog' has an option '-o' which can also be written as &lt;code&gt;--output&lt;/code&gt;, and which can take an additional value of either 'yes' or 'no', this can be specified by writing:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、コマンドで受け入れられるスイッチの指定をサポートする特別な構文があります。スイッチ &lt;code&gt;-s&lt;/code&gt; 、 &lt;code&gt;-l&lt;/code&gt; と &lt;code&gt;-o&lt;/code&gt; は、（のような単一の文字、短いスイッチを指定するために使用されている &lt;code&gt;-l&lt;/code&gt; を）、GNUスタイルの長いスイッチ（など &lt;code&gt;--color&lt;/code&gt; ）など古いスタイルの長いスイッチ（ &lt;code&gt;-shuffle&lt;/code&gt; ）、それぞれ。コマンド「myprog」にオプション「-o」があり、これは &lt;code&gt;--output&lt;/code&gt; としても記述でき、「yes」または「no」のいずれかの追加値を取ることができる場合、これは次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="2883ae059c343a505686874682744dfcbd510e2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には広範なヘルプシステムがあります。特定のサブジェクトまたはコマンドに関するヘルプを取得するには、&lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt;コマンドを使用します。たとえば、 &lt;code&gt;help syntax&lt;/code&gt; すると、このドキュメントの&lt;a href=&quot;#syntax&quot;&gt;構文セクション&lt;/a&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="777f76e48b998a0f0dd3ad01a18ccbbc0bcab718" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has an extensive help system. Use the &lt;a href=&quot;commands#help&quot;&gt;&lt;code&gt;help&lt;/code&gt;&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には広範なヘルプシステムがあります。特定のサブジェクトまたはコマンドに関するヘルプを入手するには、&lt;a href=&quot;commands#help&quot;&gt; &lt;code&gt;help&lt;/code&gt; &lt;/a&gt;コマンドを使用します。たとえば、 &lt;code&gt;help syntax&lt;/code&gt; 記述すると、このドキュメントの&lt;a href=&quot;#syntax&quot;&gt;構文セクション&lt;/a&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="46c33eab942b519e7667b927731bb7a993f50301" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、優れたヘルプとmanページがあります。 &lt;code&gt;help&lt;/code&gt; を実行してヘルプをWebブラウザーで開き、 &lt;code&gt;man&lt;/code&gt; を実行してmanページで開きます。また、例えば、特定のコマンドを使用して助けを求めることができ &lt;code&gt;help set&lt;/code&gt; 、Webブラウザ、またはで開くように &lt;code&gt;man set&lt;/code&gt; ターミナルでそれを見るために。</target>
        </trans-unit>
        <trans-unit id="df0088c6d7eab9031f3479af26efcea62bffcb1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; interprets the command line as it is typed and uses syntax highlighting to provide feedback to the user. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、入力されたコマンドラインを解釈し、構文の強調表示を使用してユーザーにフィードバックを提供します。最も重要なフィードバックは、潜在的なエラーの検出です。デフォルトでは、エラーは赤でマークされます。</target>
        </trans-unit>
        <trans-unit id="da8c01eaaa46f89b4d5f309ef717ebd0dcf5f70a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. The full manual is available &lt;a href=&quot;index&quot;&gt;in HTML&lt;/a&gt; by using the &lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt; command from inside fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、主にインタラクティブな使用を念頭に置いて記述されたコマンドラインシェルです。完全なマニュアルは&lt;a href=&quot;index&quot;&gt;、&lt;/a&gt; fishの内部から&lt;a href=&quot;#help&quot;&gt;help&lt;/a&gt;コマンドを使用してHTMLで利用できます。</target>
        </trans-unit>
        <trans-unit id="44cd2530e9b46d3f729547fd73d82a1108033fd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a command-line shell written mainly with interactive use in mind. This page briefly describes the options for invoking fish. The &lt;a href=&quot;../index#intro&quot;&gt;full manual&lt;/a&gt; is available in HTML by using the &lt;a href=&quot;help#cmd-help&quot;&gt;help&lt;/a&gt; command from inside fish, and in the &lt;code&gt;fish-doc(1)&lt;/code&gt; man page. The &lt;a href=&quot;../tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt; is available as HTML via &lt;code&gt;help tutorial&lt;/code&gt; or in &lt;code&gt;fish-tutorial(1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、主にインタラクティブな使用を念頭に置いて作成されたコマンドラインシェルです。このページでは、魚を呼び出すためのオプションについて簡単に説明します。&lt;a href=&quot;../index#intro&quot;&gt;フルマニュアルには、&lt;/a&gt;使用してHTMLで提供され&lt;a href=&quot;help#cmd-help&quot;&gt;たヘルプ&lt;/a&gt;内の魚からのコマンドを、そして中に &lt;code&gt;fish-doc(1)&lt;/code&gt; のmanページを参照してください。この&lt;a href=&quot;../tutorial#tutorial&quot;&gt;チュートリアル&lt;/a&gt;は、 &lt;code&gt;help tutorial&lt;/code&gt; または &lt;code&gt;fish-tutorial(1)&lt;/code&gt; からHTMLとして入手できます。</target>
        </trans-unit>
        <trans-unit id="35fca2b4c4ec083073cb841e35a4f9e49e66357a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. &lt;code&gt;fish&lt;/code&gt; supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、スマートでユーザーフレンドリーな完全装備のコマンドラインシェル（bashやzshなど）です。 &lt;code&gt;fish&lt;/code&gt; は構文の強調表示、自動提案、タブ補完などの強力な機能をサポートします。これらは機能するだけで、学ぶことや構成することはありません。</target>
        </trans-unit>
        <trans-unit id="5b0b5a9ecbb138c52d5af59c69a665ea6bf3807c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; marks functions that have been created by &lt;code&gt;alias&lt;/code&gt; by including the command used to create them in the function description. You can list &lt;code&gt;alias&lt;/code&gt;-created functions by running &lt;code&gt;alias&lt;/code&gt; without arguments. They must be erased using &lt;code&gt;functions -e&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、関数の説明にそれらを作成するために使用されるコマンドを含めることにより、 &lt;code&gt;alias&lt;/code&gt; によって作成された関数をマークします。引数なしで &lt;code&gt;alias&lt;/code&gt; を実行することにより、 &lt;code&gt;alias&lt;/code&gt; 作成された関数を一覧表示できます。 &lt;code&gt;functions -e&lt;/code&gt; を使用して消去する必要があります。</target>
        </trans-unit>
        <trans-unit id="b322552368e11dea3fda5d3f95dfd4c97001414f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; provides a large number of program specific completions. Most of these completions are simple options like the &lt;code&gt;-l&lt;/code&gt; option for &lt;code&gt;ls&lt;/code&gt;, but some are more advanced. The latter include:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、プログラム固有の多数の完了を提供します。これらの補完のほとんどは、 &lt;code&gt;ls&lt;/code&gt; の &lt;code&gt;-l&lt;/code&gt; オプションのような単純なオプションですが、より高度なものもあります。後者には以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="092c5ff9b15fe33669b2dd44c28e0b29ef6d3de6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は他のシェルと同じようにコマンドを実行します。コマンドを入力し、その後に引数を入力します。スペースはセパレータです：</target>
        </trans-unit>
        <trans-unit id="53af98c8dc19ee66b69f397cd23abb202d994001" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a default version of this function that displays the function name and line number of the current execution context.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、現在の実行コンテキストの関数名と行番号を表示するこの関数のデフォルトバージョンが付属しています。</target>
        </trans-unit>
        <trans-unit id="ad47759ce8e74a9a1a71d60b65c5fa5bebbae7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a large number of builtin commands, shellscript functions and external commands. These are all described below.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、多数の組み込みコマンド、シェルスクリプト関数、および外部コマンドが付属しています。これらはすべて以下で説明されています。</target>
        </trans-unit>
        <trans-unit id="0a90fcc43cdc3c81feca88b4008c851ae0986302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with a number of example prompts that can be chosen with the &lt;code&gt;fish_config&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、 &lt;code&gt;fish_config&lt;/code&gt; コマンドで選択できる多数のプロンプト例が付属しています。</target>
        </trans-unit>
        <trans-unit id="cf5c6397e1462cac24e466bcb172b4245c8ec087" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string '&lt;code&gt;__fish_&lt;/code&gt;'. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、コマンド固有の補完を記述するときに非常に役立ついくつかの関数を備えています。これらの関数名のほとんどは、文字列「 &lt;code&gt;__fish_&lt;/code&gt; 」で始まります。そのような機能は &lt;code&gt;fish&lt;/code&gt; 内部にあり、それらの名前とインターフェースは将来の魚のバージョンで変更される可能性があります。それでも、補完の作成時に非常に役立つものもあります。これらの機能のいくつかをここで説明します。将来のバージョンの魚では削除または変更される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="91dadf4819fbfd8332e32282b1b319153f74d4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; ships with several functions that are very useful when writing command specific completions. Most of these functions name begins with the string &lt;code&gt;__fish_&lt;/code&gt;. Such functions are internal to &lt;code&gt;fish&lt;/code&gt; and their name and interface may change in future fish versions. Still, some of them may be very useful when writing completions. A few of these functions are described here. Be aware that they may be removed or changed in future versions of fish.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; には、コマンド固有の補完を書き込むときに非常に役立ついくつかの関数が付属しています。これらの関数名のほとんどは、文字列 &lt;code&gt;__fish_&lt;/code&gt; で始まります。このような機能は &lt;code&gt;fish&lt;/code&gt; の内部にあり、その名前とインターフェイスは将来のfishバージョンで変更される可能性があります。それでも、それらのいくつかは、補完を書くときに非常に役立つかもしれません。これらの関数のいくつかをここで説明します。将来のバージョンの魚では削除または変更される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e4667f5ebd401acef191ebf9acbeffe48080df4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; コマンドを実行することから始まります。存在しない場合は作成できます。</target>
        </trans-unit>
        <trans-unit id="a3f7baca4cc4c811bf03a172d5443fd82b130b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、入力時にコマンドを提案し、カーソルの右側に灰色で提案を表示します。例えば</target>
        </trans-unit>
        <trans-unit id="d041cb58f21e5038ba1dd64df8fd389a7bcc1973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; suggests commands as you type, and shows the suggestion to the right of the cursor, in gray. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、入力と同時にコマンドを提案し、カーソルの右側に灰色で提案を表示します。例えば：</target>
        </trans-unit>
        <trans-unit id="ca9e9797a19941a7503fe9bfd4d9f99d4b5506fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; はおなじみのワイルドカード &lt;code&gt;*&lt;/code&gt; をサポートしています。すべてのJPEGファイルをリストするには：</target>
        </trans-unit>
        <trans-unit id="c25f03f75074f13b43a3d6e3ec17960348bf4ec6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs style kill ring for copy and paste functionality. Use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; to cut from the current cursor position to the end of the line. The string that is cut (a.k.a. killed) is inserted into a linked list of kills, called the kill ring. To paste the latest value from the kill ring use &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt;. After pasting, use &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Y&lt;/b&gt; to rotate to the previous kill.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、Emacsスタイルのキルリングを使用して、コピーアンドペースト機能を実現しています。&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt;を使用して、現在のカーソル位置から行の終わりまで切り取ります。カットされた（別名killed）文字列は、killリングと呼ばれるリンクされたkillリストに挿入されます。キルリングの使用から最新値貼り付けるには、&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Yを&lt;/b&gt;。貼り付けた後、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Y&lt;/b&gt;を使用して前のキルに回転します。</target>
        </trans-unit>
        <trans-unit id="b96dcac69316f2c77694b9271a53c0a5debdac38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses an Emacs-style kill ring for copy and paste functionality. For example, use</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、コピーアンドペースト機能にEmacsスタイルのキルリングを使用します。たとえば、</target>
        </trans-unit>
        <trans-unit id="9f38463145211dc9331425ead2c2f55cef58e9aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; uses parentheses for subcommands. For example:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、サブコマンドに括弧を使用します。例えば：</target>
        </trans-unit>
        <trans-unit id="e39a660626f0dd1f456661f39a8be78d661fa1b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; と、fishは有効なファイルパスに下線を付けます</target>
        </trans-unit>
        <trans-unit id="a1bd535d149860f389ddcd2747d2dd0ba1abb31d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish&lt;/code&gt; will underline valid file paths as you type them:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; は、入力時に有効なファイルパスに下線を付けます。</target>
        </trans-unit>
        <trans-unit id="90884bdb446dcf5a31d48611b27f62aa1e8991c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_add_path&lt;/code&gt; is a simple way to add more components to fish's $PATH. It does this by adding the components either to $fish_user_paths or directly to $PATH (if the &lt;code&gt;--path&lt;/code&gt; switch is given).</source>
          <target state="translated">&lt;code&gt;fish_add_path&lt;/code&gt; は、fishの$ PATHにコンポーネントを追加する簡単な方法です。これは、コンポーネントを$ fish_user_pathsに追加するか$ PATHに直接追加することによって行われます（ &lt;code&gt;--path&lt;/code&gt; スイッチが指定されている場合）。</target>
        </trans-unit>
        <trans-unit id="d6bb18741f901028c968a22fdbfdd38f9d5a2449" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous East Asian characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; は、あいまいな東アジア文字の計算された幅を制御します。端末エミュレータがこれらの文字をシングル幅（通常）としてレンダリングする場合は1に設定し、ダブル幅の場合は2に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f78339b85758f15675a7444a6144fa421dbe6de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal emulator renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; は、あいまいな幅の文字の計算された幅を制御します。ターミナルエミュレータがこれらの文字をシングル幅（標準）としてレンダリングする場合は1に設定し、ダブル幅の場合は2に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b607e6a436caa90fd2ac6f9303607f5ef5f327e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_ambiguous_width&lt;/code&gt; controls the computed width of ambiguous-width characters. This should be set to 1 if your terminal renders these characters as single-width (typical), or 2 if double-width.</source>
          <target state="translated">&lt;code&gt;fish_ambiguous_width&lt;/code&gt; は、あいまいな幅の文字の計算された幅を制御します。端末がこれらの文字をシングル幅（標準）としてレンダリングする場合は1に設定し、ダブル幅の場合は2に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6427ffb69bb59b5e71303f4c042483c528d8c57d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; is the prompt function when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; は、&lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;ブレークポイント&lt;/a&gt;コマンドに応答して入力を求めるときのプロンプト関数です。</target>
        </trans-unit>
        <trans-unit id="1c58022e2a675960181a411a289466c6f46cff39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_cancel&lt;/code&gt;, which is emitted when a commandline is cleared (used for terminal-shell integration).</source>
          <target state="translated">&lt;code&gt;fish_cancel&lt;/code&gt; 。コマンドラインがクリアされたときに発行されます（ターミナルシェル統合に使用されます）。</target>
        </trans-unit>
        <trans-unit id="da4f27241087cb9a6d563e249660ba24a88243da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_autosuggestion&lt;/code&gt;, the color used for autosuggestions</source>
          <target state="translated">&lt;code&gt;fish_color_autosuggestion&lt;/code&gt; 、自動提案に使用される色</target>
        </trans-unit>
        <trans-unit id="6aab75facde4fc6df798358344a9433f5e66bc35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cancel&lt;/code&gt;, the color for the '^C' indicator on a canceled command</source>
          <target state="translated">&lt;code&gt;fish_color_cancel&lt;/code&gt; 、キャンセルされたコマンドの「^ C」インジケーターの色</target>
        </trans-unit>
        <trans-unit id="733b6c1f54d7b6d136bd7e04221c88502c82f59d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_command&lt;/code&gt;, the color for commands</source>
          <target state="translated">&lt;code&gt;fish_color_command&lt;/code&gt; 、コマンドの色</target>
        </trans-unit>
        <trans-unit id="01d519230d52778f1d20dccecc138d7caa67f264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_comment&lt;/code&gt;, the color used for code comments</source>
          <target state="translated">&lt;code&gt;fish_color_comment&lt;/code&gt; 、コードのコメントに使用される色</target>
        </trans-unit>
        <trans-unit id="dc90b5b2767b7d545e27c7e6096d114342de7bea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_cwd&lt;/code&gt;, the color used for the current working directory in the default prompt</source>
          <target state="translated">&lt;code&gt;fish_color_cwd&lt;/code&gt; 、デフォルトのプロンプトで現在の作業ディレクトリに使用される色</target>
        </trans-unit>
        <trans-unit id="eb987595157776e67d6a5797f3e433f9cc57d537" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_end&lt;/code&gt;, the color for process separators like ';' and '&amp;amp;'</source>
          <target state="translated">&lt;code&gt;fish_color_end&lt;/code&gt; 、「;」などのプロセスセパレータの色 と '＆'</target>
        </trans-unit>
        <trans-unit id="422b7f08d142d5b33c0430e85d9d7ec90209dee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_error&lt;/code&gt;, the color used to highlight potential errors</source>
          <target state="translated">&lt;code&gt;fish_color_error&lt;/code&gt; 、潜在的なエラーを強調するために使用される色</target>
        </trans-unit>
        <trans-unit id="4bb611c7ae46b00d5c7c4cac298882c1cef474d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_escape&lt;/code&gt;, the color used to highlight character escapes like '\n' and '\x70'</source>
          <target state="translated">&lt;code&gt;fish_color_escape&lt;/code&gt; 、「\ n」や「\ x70」などの文字エスケープを強調するために使用される色</target>
        </trans-unit>
        <trans-unit id="aa1b2c546ddbc908168ffebb47d0c6d45f0c4edd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host&lt;/code&gt;, the color used to print the current host system in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_host&lt;/code&gt; 、一部の魚のデフォルトプロンプトで現在のホストシステムを印刷するために使用される色</target>
        </trans-unit>
        <trans-unit id="7e3328634fc97f1a8a761faa67ea54c39d6ba5a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_host_remote&lt;/code&gt;, the color used to print the current host system in some of fish default prompts, if fish is running remotely (via ssh or similar)</source>
          <target state="translated">&lt;code&gt;fish_color_host_remote&lt;/code&gt; 、魚がリモートで実行されている場合（sshなどを介して）、一部の魚のデフォルトプロンプトで現在のホストシステムを印刷するために使用される色</target>
        </trans-unit>
        <trans-unit id="3c8da305ccb3f8313b18d70a489b64856bf5cfa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_match&lt;/code&gt;, the color used to highlight matching parenthesis</source>
          <target state="translated">&lt;code&gt;fish_color_match&lt;/code&gt; 、一致する括弧を強調表示するために使用される色</target>
        </trans-unit>
        <trans-unit id="33482fa503efab0519dba81d1dd5ad6b84e139c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_normal&lt;/code&gt;, the default color</source>
          <target state="translated">&lt;code&gt;fish_color_normal&lt;/code&gt; 、デフォルトの色</target>
        </trans-unit>
        <trans-unit id="899c29bf9a5dc62025dfd8ee621041575ce62bbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_operator&lt;/code&gt;, the color for parameter expansion operators like '*' and '~'</source>
          <target state="translated">&lt;code&gt;fish_color_operator&lt;/code&gt; 、「*」や「〜」などのパラメータ拡張演算子の色</target>
        </trans-unit>
        <trans-unit id="ef5f8193323e367ca260a5737dce24ecac03bf9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_param&lt;/code&gt;, the color for regular command parameters</source>
          <target state="translated">&lt;code&gt;fish_color_param&lt;/code&gt; 、通常のコマンドパラメータの色</target>
        </trans-unit>
        <trans-unit id="49c4274e0b503cf22abea61dd7205cd045ea1a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_quote&lt;/code&gt;, the color for quoted blocks of text</source>
          <target state="translated">&lt;code&gt;fish_color_quote&lt;/code&gt; 、引用されたテキストのブロックの色</target>
        </trans-unit>
        <trans-unit id="5b792112bcb5515788014934301442436baf4df6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_redirection&lt;/code&gt;, the color for IO redirections</source>
          <target state="translated">&lt;code&gt;fish_color_redirection&lt;/code&gt; 、IOリダイレクトの色</target>
        </trans-unit>
        <trans-unit id="c607feb13af13865862aa0d14304c945c83f6955" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_search_match&lt;/code&gt;, used to highlight history search matches and the selected pager item (must be a background)</source>
          <target state="translated">&lt;code&gt;fish_color_search_match&lt;/code&gt; 。履歴検索の一致と選択されたポケットベルアイテムを強調表示するために使用されます（背景である必要があります）</target>
        </trans-unit>
        <trans-unit id="e803fbe16df6b0f3458dfc67b45c89270b33c4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_selection&lt;/code&gt;, the color used when selecting text (in vi visual mode)</source>
          <target state="translated">&lt;code&gt;fish_color_selection&lt;/code&gt; 、テキストを選択するときに使用される色（viビジュアルモード）</target>
        </trans-unit>
        <trans-unit id="c1295a7fe31f87f51d695457ac2170aa53f10fff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_color_user&lt;/code&gt;, the color used to print the current username in some of fish default prompts</source>
          <target state="translated">&lt;code&gt;fish_color_user&lt;/code&gt; 、一部の魚のデフォルトプロンプトで現在のユーザー名を印刷するために使用される色</target>
        </trans-unit>
        <trans-unit id="04bb96ac3bb736d6ac808f4395018348bc676e82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_command_not_found&lt;/code&gt;, which is emitted whenever a command lookup failed.</source>
          <target state="translated">&lt;code&gt;fish_command_not_found&lt;/code&gt; 。コマンドの検索が失敗したときに出力されます。</target>
        </trans-unit>
        <trans-unit id="a4033f2f2afffa86c138e812a0b0602cdea0f3bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; opens a new web browser window and allows you to configure certain fish settings.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; は新しいWebブラウザーウィンドウを開き、特定の魚の設定を構成できます。</target>
        </trans-unit>
        <trans-unit id="51703c7e04cc8ef77397ffa5049c1e93750bc0ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; optionally accepts name of the initial configuration tab. For e.g. &lt;code&gt;fish_config history&lt;/code&gt; will start configuration interface with history tab.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; はオプションで、初期構成タブの名前を受け入れます。たとえば、 &lt;code&gt;fish_config history&lt;/code&gt; は、履歴タブを使用して構成インターフェースを開始します。</target>
        </trans-unit>
        <trans-unit id="fecc048a3ad3bcf34e0113164e5621e9895f65b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts a local web server and then opens a web browser window; when you have finished, close the browser window and then press the Enter key to terminate the configuration session.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; はローカルWebサーバーを起動してから、Webブラウザーウィンドウを開きます。完了したら、ブラウザウィンドウを閉じ、Enterキーを押して構成セッションを終了します。</target>
        </trans-unit>
        <trans-unit id="c38cd9193bd0838148316ebdf3e342f199d9c0d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_config&lt;/code&gt; starts the web-based configuration interface.</source>
          <target state="translated">&lt;code&gt;fish_config&lt;/code&gt; は、Webベースの構成インターフェースを開始します。</target>
        </trans-unit>
        <trans-unit id="0f8b7427dfa06c8387aec4fe9f06c58afa2139fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width changed in Unicode 9 and hence varies across terminal emulators. This should be set to 2 if your terminal emulator supports Unicode &amp;gt;= 9 and renders them double-width, and 1 otherwise. Set this only if you see graphical glitching when printing emoji, typically it will be automatically detected.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; は、特定の文字、特に絵文字の計算された幅を制御します。絵文字のレンダリング幅はUnicode 9で変更されたため、ターミナルエミュレーターによって異なります。ターミナルエミュレータがUnicode&amp;gt; = 9をサポートし、倍幅でレンダリングする場合は2に設定し、それ以外の場合は1に設定する必要があります。これは、絵文字の印刷時にグラフィックの不具合が発生した場合にのみ設定します。通常、自動的に検出されます。</target>
        </trans-unit>
        <trans-unit id="b93a2f3f04ef4585de8550e51c988b2551888eb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls the computed width of certain characters, in particular emoji, whose rendered width varies across terminal emulators. This should be set to 1 if your terminal emulator renders emoji single-width, or 2 if double-width. Set this only if you see graphical glitching when printing emoji.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; は、特定の文字、特に絵文字の計算された幅を制御します。その幅は、端末エミュレーターによって異なります。端末エミュレータが絵文字をシングル幅でレンダリングする場合は1に設定し、ダブル幅の場合は2に設定する必要があります。絵文字を印刷するときにグラフィックの不具合が発生する場合にのみ、これを設定してください。</target>
        </trans-unit>
        <trans-unit id="658d6acfbde2cce8a8dc5974c41c89458b9f6570" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_emoji_width&lt;/code&gt; controls whether fish assumes emoji render as 2 cells or 1 cell wide. This is necessary because the correct value changed from 1 to 2 in Unicode 9, and some terminals may not be aware. Set this if you see graphical glitching related to emoji (or other &quot;special&quot; characters). It should usually be auto-detected.</source>
          <target state="translated">&lt;code&gt;fish_emoji_width&lt;/code&gt; は、魚が絵文字のレンダリングを2セルまたは1セル幅と見なすかどうかを制御します。これが必要なのは、Unicode 9で正しい値が1から2に変更され、一部の端末が認識しない場合があるためです。絵文字（またはその他の「特殊」文字）に関連するグラフィカルなグリッチが表示される場合は、これを設定します。通常は自動検出されます。</target>
        </trans-unit>
        <trans-unit id="48e742affac41a44f02e9aa3052491a61e53ff7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 300ms (default key bindings) or 10ms (vi key bindings) after seeing an escape character before giving up on matching a key binding. See the documentation for the &lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; は、キーバインディングの一致をあきらめる前にエスケープ文字が表示された後、300ms（デフォルトのキーバインディング）または10ms（viキーバインディング）のデフォルトタイムアウトをオーバーライドします。&lt;a href=&quot;bind#special-case-escape&quot;&gt;bind&lt;/a&gt;組み込みコマンドのドキュメントを参照してください。この遅延により、エスケープをメタキーとして使用することが容易になります。</target>
        </trans-unit>
        <trans-unit id="6687ff316b55ebc50103870c10d95896af5a7bce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; overrides the default timeout of 30ms after seeing an escape character before giving up on matching a key binding. This is explained in the documentation for the &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;bind&lt;/a&gt; builtin command. This delay facilitates using escape as a meta key.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; は、エスケープ文字を見た後、キーバインディングの一致をあきらめる前に、デフォルトのタイムアウトである30msをオーバーライドします。これは、&lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;bind&lt;/a&gt;組み込みコマンドのドキュメントで説明されています。この遅延により、エスケープをメタキーとして使用しやすくなります。</target>
        </trans-unit>
        <trans-unit id="18d32b632e49ad91dd99c41c68242eeb273e1c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; sets how long fish waits for another key after seeing an escape, to distinguish pressing the escape key from the start of an escape sequence. The default is 30ms. Increasing it increases the latency but allows pressing escape instead of alt for alt+character bindings. For more information, see &lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;the chapter in the bind documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;fish_escape_delay_ms&lt;/code&gt; は、エスケープキーを押すこととエスケープシーケンスの開始を区別するために、エスケープを確認した後、魚が別のキーを待機する時間を設定します。デフォルトは30msです。これを増やすと待ち時間が長くなりますが、alt +文字バインディングの場合はaltの代わりにescapeを押すことができます。詳細について&lt;a href=&quot;cmds/bind#cmd-bind-escape&quot;&gt;は、バインドドキュメントの章を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9b2a1e44ef7bb47d05aa2cecfce06fa5f350598" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_exit&lt;/code&gt; is emitted right before fish exits.</source>
          <target state="translated">&lt;code&gt;fish_exit&lt;/code&gt; は、魚が出る直前に発行されます。</target>
        </trans-unit>
        <trans-unit id="2d94ec8ed4f5ca2e247001593671084bcb2b63cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; 、起動時に出力される挨拶メッセージ。</target>
        </trans-unit>
        <trans-unit id="fa2f7a53cca901d04e34c6a842e9dbc1bee3380f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_greeting&lt;/code&gt;, the greeting message printed on startup. This is printed by a function of the same name that can be overridden for more complicated changes (see &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; 、起動時に出力されるグリーティングメッセージ。これは、より複雑な変更のためにオーバーライドできる同じ名前の関数によって出力されます（関数を参照&lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7bf1452e5d429f1daf103ffd9546b372df2ab72b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_handle_reflow&lt;/code&gt;, determines whether fish should try to repaint the commandline when the terminal resizes. In terminals that reflow text this should be disabled. Set it to 1 to enable, anything else to disable.</source>
          <target state="translated">&lt;code&gt;fish_handle_reflow&lt;/code&gt; は、端末のサイズが変更されたときに、fishがコマンドラインの再描画を試行するかどうかを決定します。テキストをリフローする端末では、これを無効にする必要があります。1に設定すると有効になり、それ以外の場合は無効になります。</target>
        </trans-unit>
        <trans-unit id="b04aed8775880cd3b6a1f6c024e3c890b3d8d1ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_history&lt;/code&gt;, the current history session name. If set, all subsequent commands within an interactive fish session will be logged to a separate file identified by the value of the variable. If unset, or set to &lt;code&gt;default&lt;/code&gt;, the default session name &quot;fish&quot; is used. If set to an empty string, history is not saved to disk (but is still available within the interactive session).</source>
          <target state="translated">&lt;code&gt;fish_history&lt;/code&gt; 、現在の履歴セッション名。設定されている場合、インタラクティブなフィッシュセッション内の後続のすべてのコマンドは、変数の値によって識別される別のファイルに記録されます。設定されていない場合、または &lt;code&gt;default&lt;/code&gt; に設定されている場合、デフォルトのセッション名「fish」が使用されます。空の文字列に設定すると、履歴はディスクに保存されません（ただし、対話型セッション内では引き続き使用できます）。</target>
        </trans-unit>
        <trans-unit id="104755c189b715d5c9c42e2652c1cdf288c6ca28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input and outputs them to standard output or a specified file.</source>
          <target state="translated">&lt;code&gt;fish_indent&lt;/code&gt; は、魚コードのインデントに使用されます。 &lt;code&gt;fish_indent&lt;/code&gt; は、コマンドを標準入力から読み取り、標準出力または指定されたファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="a7bb256bcfc22368152a4ebc452df8b7662f2582" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_indent&lt;/code&gt; is used to indent a piece of fish code. &lt;code&gt;fish_indent&lt;/code&gt; reads commands from standard input or the given filenames and outputs them to standard output or a specified file (if &lt;code&gt;-w&lt;/code&gt; is given).</source>
          <target state="translated">&lt;code&gt;fish_indent&lt;/code&gt; は、魚のコードの一部をインデントするために使用されます。 &lt;code&gt;fish_indent&lt;/code&gt; は、標準入力または指定されたファイル名からコマンドを読み取り、それらを標準出力または指定されたファイル（ &lt;code&gt;-w&lt;/code&gt; が指定されている場合）に出力します。</target>
        </trans-unit>
        <trans-unit id="da73e2f1a512f02d7584672a40785204c598441f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_is_root_user&lt;/code&gt; will check if the current user is root. It can be useful for the prompt to display something different if the user is root, for example.</source>
          <target state="translated">&lt;code&gt;fish_is_root_user&lt;/code&gt; は、現在のユーザーがrootであるかどうかを確認します。たとえば、ユーザーがrootの場合、プロンプトに別の何かを表示すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="1f505af424d327895b4f62f9482da2a8a3e1b470" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; intentionally disables handling of many signals. To terminate &lt;code&gt;fish_key_reader&lt;/code&gt; in &lt;code&gt;--continuous&lt;/code&gt; mode do:</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; は、多くのシグナルの処理を意図的に無効にします。 &lt;code&gt;--continuous&lt;/code&gt; モードでfish_key_readerを終了 &lt;code&gt;fish_key_reader&lt;/code&gt; は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="9969f810562210b29ac153862ce8488fd46d7c72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_key_reader&lt;/code&gt; is used to study input received from the terminal and can help with key binds. The program is interactive and works on standard input. Individual characters themselves and their hexadecimal values are displayed.</source>
          <target state="translated">&lt;code&gt;fish_key_reader&lt;/code&gt; は、端末から受信した入力を調査するために使用され、キーバインドに役立ちます。プログラムは対話型で、標準入力で動作します。個々の文字とその16進値が表示されます。</target>
        </trans-unit>
        <trans-unit id="0422482679a5ecd7a3ca2c35dcd4c26c9e83bad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_kill_signal&lt;/code&gt;, the signal that terminated the last foreground job, or 0 if the job exited normally.</source>
          <target state="translated">&lt;code&gt;fish_kill_signal&lt;/code&gt; 、最後のフォアグラウンドジョブを終了したシグナル、またはジョブが正常に終了した場合は0。</target>
        </trans-unit>
        <trans-unit id="c622c6b5bee30a6726d542cdf2ab2250db87a11e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_mode_prompt&lt;/code&gt; will be executed when the vi mode changes. If it produces any output, it is displayed and used. If it does not, the other prompt functions (&lt;a href=&quot;fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; and &lt;a href=&quot;fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;) will be executed as well in case they contain a mode display.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; は、viモードが変更されたときに実行されます。出力が生成される場合は、表示されて使用されます。そうでない場合、モード表示が含まれている場合は、他のプロンプト関数（&lt;a href=&quot;fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt;および&lt;a href=&quot;fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;）も実行されます。</target>
        </trans-unit>
        <trans-unit id="1955a06dd635c9c957ee769ce1eb3ce76b0fc4c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_background&lt;/code&gt;, the background color of a line</source>
          <target state="translated">&lt;code&gt;fish_pager_color_background&lt;/code&gt; 、線の背景色</target>
        </trans-unit>
        <trans-unit id="f7c684f0faf6861363a50ef125b672ee5e7f8960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_completion&lt;/code&gt;, the color of the completion itself</source>
          <target state="translated">&lt;code&gt;fish_pager_color_completion&lt;/code&gt; 、補完の色</target>
        </trans-unit>
        <trans-unit id="02c2b5b4b67a9ed2516d817126320b97d559bb5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_description&lt;/code&gt;, the color of the completion description</source>
          <target state="translated">&lt;code&gt;fish_pager_color_description&lt;/code&gt; 、補完の説明の色</target>
        </trans-unit>
        <trans-unit id="dad9d641492b848dfa36404193130b01877d7c55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_prefix&lt;/code&gt;, the color of the prefix string, i.e. the string that is to be completed</source>
          <target state="translated">&lt;code&gt;fish_pager_color_prefix&lt;/code&gt; 、プレフィックス文字列の色、つまり補完される文字列</target>
        </trans-unit>
        <trans-unit id="72288186d5b0c5276c2df6d25ce7182ce13c409a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_progress&lt;/code&gt;, the color of the progress bar at the bottom left corner</source>
          <target state="translated">&lt;code&gt;fish_pager_color_progress&lt;/code&gt; 、左下隅のプログレスバーの色</target>
        </trans-unit>
        <trans-unit id="3e8830576bae489fb92cd5bed56314729ae1656f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary&lt;/code&gt;, the background color of the every second completion</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary&lt;/code&gt; 、1秒ごとの補完の背景色</target>
        </trans-unit>
        <trans-unit id="76b568ec21a4e8263642a51936672636ba928b0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_ prefix&lt;/code&gt;, &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_ prefix&lt;/code&gt; 、1秒ごとの選択されていない完了の &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="e55357f10cdf512a13586ee62429348b3cfb24b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_background&lt;/code&gt;, &lt;code&gt;fish_pager_color_background&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_background&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_background&lt;/code&gt; 、 &lt;code&gt;fish_pager_color_background&lt;/code&gt; の選択されていない1秒ごとの完了。デフォルトは &lt;code&gt;fish_pager_color_background&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9e90de1da46106fee8091bb2c2c23a8f188da196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_completion&lt;/code&gt;, &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_completion&lt;/code&gt; 、1秒ごとの選択されていない完了の &lt;code&gt;fish_pager_color_completion&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_pager_color_completion&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="5fe74e5ee8b566305db424020cbb8da10395dc96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_secondary_description&lt;/code&gt;, &lt;code&gt;fish_pager_color_description&lt;/code&gt; of every second unselected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_secondary_description&lt;/code&gt; 、1秒ごとの選択されていない完了の &lt;code&gt;fish_pager_color_description&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_pager_color_description&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="71624fb1af940a83195f3c310d4d969188349ff5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_background&lt;/code&gt;, &lt;code&gt;fish_pager_color_background&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_color_search_match&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_background&lt;/code&gt; 選択した補完のfish_pager_color_selected_background、 &lt;code&gt;fish_pager_color_background&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_color_search_match&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="6b13f87fd7fc9be4af86e634debc017be760470c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_completion&lt;/code&gt;, &lt;code&gt;fish_pager_color_completion&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_completion&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_completion&lt;/code&gt; 選択した補完のfish_pager_color_selected_completion、 &lt;code&gt;fish_pager_color_completion&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_pager_color_completion&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="971e4b956c3476c803e3fa66d23fad3bee6ffaf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_description&lt;/code&gt;, &lt;code&gt;fish_pager_color_description&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_description&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_description&lt;/code&gt; 選択した補完のfish_pager_color_selected_description、 &lt;code&gt;fish_pager_color_description&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_pager_color_description&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a65d30196128ffbb2928911e278d6c63930c436b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pager_color_selected_prefix&lt;/code&gt;, &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; of the selected completion. Defaults to &lt;code&gt;fish_pager_color_prefix&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fish_pager_color_selected_prefix&lt;/code&gt; 選択した補完のfish_pager_color_selected_prefix、 &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; 。デフォルトは &lt;code&gt;fish_pager_color_prefix&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="3eb5135deccd77d2904f64e51b0cbb65213cfaf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_pid&lt;/code&gt;, the process ID (PID) of the shell.</source>
          <target state="translated">&lt;code&gt;fish_pid&lt;/code&gt; 、シェルのプロセスID（PID）。</target>
        </trans-unit>
        <trans-unit id="24b7261dfd9477ae59353955d1fded2e7e867175" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_posterror&lt;/code&gt;, which is emitted right after executing a command with syntax errors. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_posterror&lt;/code&gt; は、構文エラーのあるコマンドを実行した直後に発行されます。コマンドラインは最初のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="39301e68719d8270e6ba63e0324f010136d1f361" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_postexec&lt;/code&gt; は、インタラクティブコマンドを実行した直後に出力されます。コマンドラインは最初のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="ac28456f56bd590fac994b5010e0b38ff99544eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_postexec&lt;/code&gt;, which is emitted right after executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.</source>
          <target state="translated">&lt;code&gt;fish_postexec&lt;/code&gt; 。これは、対話型コマンドを実行した直後に発行されます。コマンドラインは最初のパラメーターとして渡されます。コマンドが空の場合は発行されません。</target>
        </trans-unit>
        <trans-unit id="4e5e5b54faf281985c7c7df11e2b068f2d1b1dff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter.</source>
          <target state="translated">&lt;code&gt;fish_preexec&lt;/code&gt; 。インタラクティブコマンドを実行する直前に出力されます。コマンドラインは最初のパラメーターとして渡されます。</target>
        </trans-unit>
        <trans-unit id="d49c52bb6343f148a6e7cb6f488824707a022cff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_preexec&lt;/code&gt;, which is emitted right before executing an interactive command. The commandline is passed as the first parameter. Not emitted if command is empty.</source>
          <target state="translated">&lt;code&gt;fish_preexec&lt;/code&gt; 。これは、対話型コマンドを実行する直前に発行されます。コマンドラインは最初のパラメーターとして渡されます。コマンドが空の場合は発行されません。</target>
        </trans-unit>
        <trans-unit id="55d253511a520fed2df4efaa70d38a4aa9455ed3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_prompt&lt;/code&gt;, which is emitted whenever a new fish prompt is about to be displayed.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 。新しい魚のプロンプトが表示されようとするたびに出力されます。</target>
        </trans-unit>
        <trans-unit id="8e763b7a1c9e69d8e49402ca1bd27768dc523a3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_right_prompt&lt;/code&gt; is similar to &lt;code&gt;fish_prompt&lt;/code&gt;, except that it appears on the right side of the terminal window.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; は、端末ウィンドウの右側に表示されることを除いて、 &lt;code&gt;fish_prompt&lt;/code&gt; に似ています。</target>
        </trans-unit>
        <trans-unit id="c4a7d6ba8e4a0d2492df3ec01d90736e88080917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_status_to_signal&lt;/code&gt; converts exit codes to their corresponding human-friendly signals if one exists. This is likely to be useful for prompts in conjunction with the &lt;code&gt;$status&lt;/code&gt; and &lt;code&gt;$pipestatus&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;fish_status_to_signal&lt;/code&gt; は、終了コードが存在する場合は、対応する人に優しい信号に変換します。これは、 &lt;code&gt;$status&lt;/code&gt; 変数および &lt;code&gt;$pipestatus&lt;/code&gt; 変数と組み合わせたプロンプトに役立つ可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b9b15df475152cdd93c34d86fe528d79814755f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_trace&lt;/code&gt;, if set and not empty, will cause fish to print commands before they execute, similar to &lt;code&gt;set -x&lt;/code&gt; in bash. The trace is printed to the path given by the &lt;a href=&quot;cmds/fish#cmd-fish&quot;&gt;--debug-output&lt;/a&gt; option to fish (stderr by default).</source>
          <target state="translated">&lt;code&gt;fish_trace&lt;/code&gt; が設定されていて空でない場合、bashの &lt;code&gt;set -x&lt;/code&gt; と同様に、fishは実行前にコマンドを出力します。トレースは、fishの&lt;a href=&quot;cmds/fish#cmd-fish&quot;&gt;--debug-output&lt;/a&gt;オプションで指定されたパスに出力されます（デフォルトではstderr）。</target>
        </trans-unit>
        <trans-unit id="25375052dde19cad27653f4c1752d8ab6f280d0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_update_completions&lt;/code&gt; parses manual pages installed on the system, and attempts to create completion files in the &lt;code&gt;fish&lt;/code&gt; configuration directory.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; は、システムにインストールされているマニュアルページを解析し、 &lt;code&gt;fish&lt;/code&gt; 設定ディレクトリに完了ファイルを作成しようとします。</target>
        </trans-unit>
        <trans-unit id="200d59f939eaa8758fc4a1a196859ca8fd5fc9d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, a list of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="translated">&lt;code&gt;fish_user_paths&lt;/code&gt; 、 &lt;code&gt;PATH&lt;/code&gt; の前に付加されるディレクトリのリスト。これはユニバーサル変数にすることができます。</target>
        </trans-unit>
        <trans-unit id="1258f51252838f9ffb3287c339e857307bfe13f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_user_paths&lt;/code&gt;, an array of directories that are prepended to &lt;code&gt;PATH&lt;/code&gt;. This can be a universal variable.</source>
          <target state="translated">&lt;code&gt;fish_user_paths&lt;/code&gt; 、 &lt;code&gt;PATH&lt;/code&gt; の前に付加されるディレクトリの配列。これはユニバーサル変数にすることができます。</target>
        </trans-unit>
        <trans-unit id="2d20e70fb52c2b89d39d9ee9f9a3364cf899bbf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fish_vi_mode&lt;/code&gt; enters a vi-like command editing mode. To always start in vi mode, add &lt;code&gt;fish_vi_mode&lt;/code&gt; to your &lt;code&gt;config.fish&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;fish_vi_mode&lt;/code&gt; は、viのようなコマンド編集モードに入ります。常にviモードで開始するには、 &lt;code&gt;fish_vi_mode&lt;/code&gt; を &lt;code&gt;config.fish&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="a67771d1afbe49fb95a1eb353ddb3304ef83900c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; is a loop construct. It will perform the commands specified by &lt;code&gt;COMMANDS&lt;/code&gt; multiple times. On each iteration, the local variable specified by &lt;code&gt;VARNAME&lt;/code&gt; is assigned a new value from &lt;code&gt;VALUES&lt;/code&gt;. If &lt;code&gt;VALUES&lt;/code&gt; is empty, &lt;code&gt;COMMANDS&lt;/code&gt; will not be executed at all. The &lt;code&gt;VARNAME&lt;/code&gt; is visible when the loop terminates and will contain the last value assigned to it. If &lt;code&gt;VARNAME&lt;/code&gt; does not already exist it will be set in the local scope. For our purposes if the &lt;code&gt;for&lt;/code&gt; block is inside a function there must be a local variable with the same name. If the &lt;code&gt;for&lt;/code&gt; block is not nested inside a function then global and universal variables of the same name will be used if they exist.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; はループ構造です。 &lt;code&gt;COMMANDS&lt;/code&gt; で指定されたコマンドを複数回実行します。各反復で、 &lt;code&gt;VARNAME&lt;/code&gt; で指定されたローカル変数に &lt;code&gt;VALUES&lt;/code&gt; からの新しい値が割り当てられます。 &lt;code&gt;VALUES&lt;/code&gt; が空の場合、 &lt;code&gt;COMMANDS&lt;/code&gt; はまったく実行されません。 &lt;code&gt;VARNAME&lt;/code&gt; は、ループが終了し、それに割り当てられた最後の値が含まれます際に表示されます。 &lt;code&gt;VARNAME&lt;/code&gt; がまだ存在しない場合は、ローカルスコープに設定されます。ここで、 &lt;code&gt;for&lt;/code&gt; 場合、はブロックが関数内にある場合、同じ名前のローカル変数が必要です。もし &lt;code&gt;for&lt;/code&gt; ブロックが関数内にネストされていない場合、同じ名前のグローバル変数とユニバーサル変数が存在する場合はそれらが使用されます。</target>
        </trans-unit>
        <trans-unit id="30ea19b645de71a6c9405b507051c6bb2520a9ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops work like in other shells, which is more like python's for-loops than e.g. C's:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループは、他のシェルと同じように機能します。これは、たとえばCよりもPythonのforループに似ています。</target>
        </trans-unit>
        <trans-unit id="9273933eb345e0f31ce06627439b843043841d19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force-repaint&lt;/code&gt; reexecute the prompt functions without coalescing</source>
          <target state="translated">&lt;code&gt;force-repaint&lt;/code&gt; は、合体せずにプロンプ​​ト機能を再実行します</target>
        </trans-unit>
        <trans-unit id="7dba540ac348539070f2bf73fd7b4971a05d3926" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-bigword&lt;/code&gt;, move one whitespace-delimited word to the right</source>
          <target state="translated">&lt;code&gt;forward-bigword&lt;/code&gt; 、空白で区切られた1つの単語を右に移動</target>
        </trans-unit>
        <trans-unit id="96ac7c933e1aa7b4c77c93b351f34c644f3edfc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-char&lt;/code&gt;, move one character to the right</source>
          <target state="translated">&lt;code&gt;forward-char&lt;/code&gt; 、1文字右に移動</target>
        </trans-unit>
        <trans-unit id="69c7f329fabcefeb785a251cd64e7edfe1324e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-jump-till&lt;/code&gt; and &lt;code&gt;backward-jump-till&lt;/code&gt;, jump to right &lt;em&gt;before&lt;/em&gt; the next occurence</source>
          <target state="translated">&lt;code&gt;forward-jump-till&lt;/code&gt; と &lt;code&gt;backward-jump-till&lt;/code&gt; は、次の発生の&lt;em&gt;直前&lt;/em&gt;にジャンプします</target>
        </trans-unit>
        <trans-unit id="1830d65a1d0ae99be014807fe9ee4611ae5c7cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-jump&lt;/code&gt; and &lt;code&gt;backward-jump&lt;/code&gt;, read another character and jump to its next occurence after/before the cursor</source>
          <target state="translated">&lt;code&gt;forward-jump&lt;/code&gt; と &lt;code&gt;backward-jump&lt;/code&gt; 、別の文字を読み取り、カーソルの後/前の次の出現箇所にジャンプします</target>
        </trans-unit>
        <trans-unit id="9f7b1c0d2627b35f7922d0a527ca0016ff5c36b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-single-char&lt;/code&gt;, move one character to the right; if an autosuggestion is available, only take a single char from it</source>
          <target state="translated">&lt;code&gt;forward-single-char&lt;/code&gt; 、1文字を右に移動します。自動暗示が利用できる場合は、そこから1文字だけを取得します</target>
        </trans-unit>
        <trans-unit id="9b9dad2890372c362f50dea055adac7600258931" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward-word&lt;/code&gt;, move one word to the right</source>
          <target state="translated">&lt;code&gt;forward-word&lt;/code&gt; 、1単語右に移動</target>
        </trans-unit>
        <trans-unit id="e6e8eeb61d099e8de1c9e468dbd0faedeaeeb31c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funced&lt;/code&gt; provides an interface to edit the definition of the function &lt;code&gt;NAME&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;funced&lt;/code&gt; は、関数 &lt;code&gt;NAME&lt;/code&gt; の定義を編集するためのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="2753ba5c4bae0b9b373b407ccc8299866187e0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="translated">&lt;code&gt;funcsave&lt;/code&gt; は、fish構成ディレクトリ内のファイルに関数を保存します。この関数は、現在および将来のフィッシュセッションによって自動的にロードされます。これは、新しい関数をインタラクティブに作成し、後で使用するために保存したい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f3625cbdd272f6420b828620eec5563a06bbc58c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcsave&lt;/code&gt; saves the current definition of a function to a file in the fish configuration directory. This function will be automatically loaded by current and future fish sessions. This can be useful if you have interactively created a new function and wish to save it for later use.</source>
          <target state="translated">&lt;code&gt;funcsave&lt;/code&gt; は、関数の現在の定義をfish構成ディレクトリのファイルに保存します。この機能は、現在および将来の魚セッションによって自動的にロードされます。これは、新しい関数をインタラクティブに作成し、後で使用するために保存したい場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ecc3a042e9241b89ce0f3da16336d2bde1174bba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; creates a new function &lt;code&gt;NAME&lt;/code&gt; with the body &lt;code&gt;BODY&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; は、本体が &lt;code&gt;BODY&lt;/code&gt; の新しい関数 &lt;code&gt;NAME&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="3af7bb7223f77891e90adffabdb2080b3a0a2ae0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt; prints the name of the currently called function if able, when missing displays &quot;Not a function&quot; (or equivalent translated string). Also &lt;code&gt;current-function&lt;/code&gt;, &lt;code&gt;-u&lt;/code&gt; or &lt;code&gt;--current-function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; は、可能であれば、現在呼び出されている関数の名前を出力します。存在しない場合は、「Not a function」（または同等の翻訳された文字列）が表示されます。また、 &lt;code&gt;current-function&lt;/code&gt; 、 &lt;code&gt;-u&lt;/code&gt; または &lt;code&gt;--current-function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4643812feed737eb3baee29ce5d615a668b85b3a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;functions&lt;/code&gt; prints or erases functions.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; は、関数を印刷または消去します。</target>
        </trans-unit>
        <trans-unit id="896e9b70a76e025cb7a4fc6ddc0df0cb4a106204" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h-help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If the long flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen.</source>
          <target state="translated">&lt;code&gt;h-help&lt;/code&gt; &lt;code&gt;--help&lt;/code&gt; は--helpのみが有効であることを意味します。フラグはブール値であり、複数回使用できます。長いフラグが使用されている場合、 &lt;code&gt;_flag_h&lt;/code&gt; および &lt;code&gt;_flag_help&lt;/code&gt; は、長いフラグが表示された回数のカウントに設定されます。</target>
        </trans-unit>
        <trans-unit id="09288aed8a22be9a82fb278b641f44ba69a35f98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;h/help&lt;/code&gt; means that both &lt;code&gt;-h&lt;/code&gt; and &lt;code&gt;--help&lt;/code&gt; are valid. The flag is a boolean and can be used more than once. If either flag is used then &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times either flag was seen.</source>
          <target state="translated">&lt;code&gt;h/help&lt;/code&gt; は、 &lt;code&gt;-h&lt;/code&gt; と &lt;code&gt;--help&lt;/code&gt; の両方が有効であることを意味します。フラグはブール値であり、複数回使用できます。いずれかのフラグが使用されている場合、 &lt;code&gt;_flag_h&lt;/code&gt; および &lt;code&gt;_flag_help&lt;/code&gt; は、どちらかのフラグが表示された回数のカウントに設定されます。</target>
        </trans-unit>
        <trans-unit id="16feba045a44f5217f42fc2759259d9b95307ba7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin.</source>
          <target state="translated">&lt;code&gt;help fg&lt;/code&gt; のドキュメントを示し&lt;a href=&quot;fg#cmd-fg&quot;&gt;FGの&lt;/a&gt;組み込みを。</target>
        </trans-unit>
        <trans-unit id="746970369d18737059fb60a2ece7fe48509ad8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help fg&lt;/code&gt; shows the documentation for the &lt;code&gt;fg&lt;/code&gt; builtin.</source>
          <target state="translated">&lt;code&gt;help fg&lt;/code&gt; は、 &lt;code&gt;fg&lt;/code&gt; 組み込みのドキュメントを表示します。</target>
        </trans-unit>
        <trans-unit id="5797714920f9421847912fe9d670163d439ec8c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; displays the fish help documentation.</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; は、魚のヘルプドキュメントを表示します。</target>
        </trans-unit>
        <trans-unit id="370aef9fc7360bdd9af1206f300ec0481103e650" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;help&lt;/code&gt; means that only &lt;code&gt;--help&lt;/code&gt; is valid. The flag is a boolean and can be used more than once. If it is used then &lt;code&gt;_flag_help&lt;/code&gt; will be set to the count of how many times the long flag was seen. Also &lt;code&gt;h-help&lt;/code&gt; (with an arbitrary short letter) for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;help&lt;/code&gt; は、 &lt;code&gt;--help&lt;/code&gt; のみが有効であることを意味します。フラグはブール値であり、複数回使用できます。使用されている場合、 &lt;code&gt;_flag_help&lt;/code&gt; は、長いフラグが表示された回数のカウントに設定されます。また、下位互換性のための &lt;code&gt;h-help&lt;/code&gt; （任意の短い文字付き）。</target>
        </trans-unit>
        <trans-unit id="a867c4092fd3023f46dabcddec1b035654dccb7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-prefix-search-backward&lt;/code&gt;, search the history for the previous prefix match</source>
          <target state="translated">&lt;code&gt;history-prefix-search-backward&lt;/code&gt; 、前のプレフィックス一致の履歴を検索します</target>
        </trans-unit>
        <trans-unit id="4724121cac1f31f0e4ab7853049507f1ab9329b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-prefix-search-forward&lt;/code&gt;, search the history for the next prefix match</source>
          <target state="translated">&lt;code&gt;history-prefix-search-forward&lt;/code&gt; 、次のプレフィックス一致の履歴を検索します</target>
        </trans-unit>
        <trans-unit id="ce9a134be7d6c3fd7b46f7c9447ed9fd9db9b116" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-backward&lt;/code&gt;, search the history for the previous match</source>
          <target state="translated">&lt;code&gt;history-search-backward&lt;/code&gt; 、以前のマッチの履歴を検索します</target>
        </trans-unit>
        <trans-unit id="b12f1af53ca24866df742e9eba7ada28f4d9ae75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-search-forward&lt;/code&gt;, search the history for the next match</source>
          <target state="translated">&lt;code&gt;history-search-forward&lt;/code&gt; 、履歴を検索して次の一致を探します</target>
        </trans-unit>
        <trans-unit id="6632dfe436b7488d60a30d70d61df7ca03bbf956" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-token-search-backward&lt;/code&gt;, search the history for the previous matching argument</source>
          <target state="translated">&lt;code&gt;history-token-search-backward&lt;/code&gt; 、前の一致する引数の履歴を検索します</target>
        </trans-unit>
        <trans-unit id="a609239143f411c48386cad2e73aaf20c665ae92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history-token-search-forward&lt;/code&gt;, search the history for the next matching argument</source>
          <target state="translated">&lt;code&gt;history-token-search-forward&lt;/code&gt; 、次の一致する引数の履歴を検索します</target>
        </trans-unit>
        <trans-unit id="0eb02a60247ad0d09f6ecb95a60dc44a1e6fd4a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the &lt;a href=&quot;../index#history-search&quot;&gt;history of interactive commands&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; は&lt;a href=&quot;../index#history-search&quot;&gt;、インタラクティブコマンドの履歴&lt;/a&gt;を検索、削除、または操作するために使用されます。</target>
        </trans-unit>
        <trans-unit id="aa6bf6d133c84804bb8d0f2ee0748027119c8584" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; is used to search, delete, and otherwise manipulate the history of interactive commands.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; は、インタラクティブコマンドの履歴を検索、削除、または操作するために使用されます。</target>
        </trans-unit>
        <trans-unit id="953cae57649fdf5634381c21501202219d9f2172" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, a list containing the last commands that were entered.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; 、最後に入力されたコマンドを含むリスト。</target>
        </trans-unit>
        <trans-unit id="fe57c545655dee290e05e5b32cfb6ad7a4cf5bb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt;, an array containing the last commands that were entered.</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; 、最後に入力されたコマンドを含む配列。</target>
        </trans-unit>
        <trans-unit id="cd50886aee211e8ad669224737d342b173c7d958" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hostname&lt;/code&gt;, the machine's hostname.</source>
          <target state="translated">&lt;code&gt;hostname&lt;/code&gt; 、マシンのホスト名。</target>
        </trans-unit>
        <trans-unit id="c23d9464a94cb5382adac437601bfc6e6de40d55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If it is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; コマンド &lt;code&gt;CONDITION&lt;/code&gt; を実行します。条件の終了ステータスが0の場合、コマンド &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; が実行されます。0 &lt;code&gt;else&lt;/code&gt; は、 &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="a417c9d192be18b8f6d0caa81a906f977b250fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;a href=&quot;else#cmd-else&quot;&gt;else&lt;/a&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; コマンド &lt;code&gt;CONDITION&lt;/code&gt; を実行する場合。条件の終了ステータスが0の場合、コマンド &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; が実行されます。終了ステータスは0ではないとした場合&lt;a href=&quot;else#cmd-else&quot;&gt;、他の&lt;/a&gt;指定され、 &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="e1c81c3c5812c0d8ce75bdcf435cb169e91e2f99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; will execute the command &lt;code&gt;CONDITION&lt;/code&gt;. If the condition's exit status is 0, the commands &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; will execute. If the exit status is not 0 and &lt;code&gt;else&lt;/code&gt; is given, &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; will be executed.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; コマンド &lt;code&gt;CONDITION&lt;/code&gt; を実行します。条件の終了ステータスが0の場合、コマンド &lt;code&gt;COMMANDS_TRUE&lt;/code&gt; が実行されます。終了ステータスが0ではなく、 &lt;code&gt;else&lt;/code&gt; 場合、 &lt;code&gt;COMMANDS_FALSE&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="7092cd3e6a7baf145a554329a261b1c6df95980e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-line-over&lt;/code&gt;, add a new line over the current line</source>
          <target state="translated">&lt;code&gt;insert-line-over&lt;/code&gt; 、現在の行の上に新しい行を追加します</target>
        </trans-unit>
        <trans-unit id="af3931ae309cf7c6df83b400fd274bc85ae3af60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;insert-line-under&lt;/code&gt;, add a new line under the current line</source>
          <target state="translated">&lt;code&gt;insert-line-under&lt;/code&gt; 、現在の行の下に新しい行を追加します</target>
        </trans-unit>
        <trans-unit id="5a0719c8ef39d5ba9cdb52b9b6994b0a76cb2e60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-block&lt;/code&gt; returns 0 if fish is currently executing a block of code. Also &lt;code&gt;-b&lt;/code&gt; or &lt;code&gt;--is-block&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-block&lt;/code&gt; は、fishが現在コードのブロックを実行している場合、0を返します。また、 &lt;code&gt;-b&lt;/code&gt; または &lt;code&gt;--is-block&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="574f1b55820e05845c504b6752312ab9f0763f46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-breakpoint&lt;/code&gt; returns 0 if fish is currently showing a prompt in the context of a &lt;code&gt;breakpoint&lt;/code&gt; command. See also the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;is-breakpoint&lt;/code&gt; は、 &lt;code&gt;breakpoint&lt;/code&gt; コマンドのコンテキストでfishが現在プロンプトを表示している場合、0を返します。 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数も参照してください。</target>
        </trans-unit>
        <trans-unit id="8c8b553e625d0552ce09454c632813c4ee0f7a43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-sub&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-command-sub&lt;/code&gt; は、fishが現在コマンド置換を実行している場合は0を返します。また、 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--is-command-substitution&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2c76516a8daa42dfc18cf477ffe1c800183d9d60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-command-substitution&lt;/code&gt; returns 0 if fish is currently executing a command substitution. Also &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--is-command-substitution&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-command-substitution&lt;/code&gt; は、fishが現在コマンド置換を実行している場合、0を返します。また、 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--is-command-substitution&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44b12fafe48ecfbcc3d29be11195b0e55d3a15ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-full-job-control&lt;/code&gt; returns 0 if full job control is enabled. Also &lt;code&gt;--is-full-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-full-job-control&lt;/code&gt; は、完全なジョブ制御が有効になっている場合、0を返します。また &lt;code&gt;--is-full-job-control&lt;/code&gt; （短いフラグなし）。</target>
        </trans-unit>
        <trans-unit id="b8f912dce380e13a37aefd2b619ed5f570f5dd6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive-job-control&lt;/code&gt; returns 0 if interactive job control is enabled. Also, &lt;code&gt;--is-interactive-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-interactive-job-control&lt;/code&gt; は、対話型ジョブ制御が有効になっている場合、0を返します。また、 &lt;code&gt;--is-interactive-job-control&lt;/code&gt; （短いフラグなし）。</target>
        </trans-unit>
        <trans-unit id="29a242bbb960281ffd4abd84bdab87e608102fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-interactive&lt;/code&gt; returns 0 if fish is interactive - that is, connected to a keyboard. Also &lt;code&gt;-i&lt;/code&gt; or &lt;code&gt;--is-interactive&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-interactive&lt;/code&gt; は、魚がインタラクティブな場合、つまりキーボードに接続されている場合、0を返します。また、 &lt;code&gt;-i&lt;/code&gt; または &lt;code&gt;--is-interactive&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="290a3fec35084c58a9babdadcf87d2dba57950ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-login&lt;/code&gt; returns 0 if fish is a login shell - that is, if fish should perform login tasks such as setting up the PATH. Also &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--is-login&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;is-login&lt;/code&gt; は、fishがログインシェルの場合、つまり、fishがPATHの設定などのログインタスクを実行する必要がある場合、0を返します。また、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--is-login&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3247c5bb3c8c50669f128e0bae4bc2a69626afe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is-no-job-control&lt;/code&gt; returns 0 if no job control is enabled. Also &lt;code&gt;--is-no-job-control&lt;/code&gt; (no short flag).</source>
          <target state="translated">&lt;code&gt;is-no-job-control&lt;/code&gt; controlは、有効になっているジョブ制御がない場合、0を返します。また &lt;code&gt;--is-no-job-control&lt;/code&gt; （短いフラグなし）。</target>
        </trans-unit>
        <trans-unit id="60d313a6d40fe77110c134273ac3e2a7b8ae317a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a terminal (as opposed to a file). The name is derived from the system call of the same name, which for historical reasons refers to a teletypewriter (TTY).</source>
          <target state="translated">&lt;code&gt;isatty&lt;/code&gt; は、ファイル記述子が（ファイルではなく）端末であるかどうかをテストします。この名前は、同じ名前のシステムコールに由来します。これは、歴史的な理由から、テレタイプライター（TTY）を指します。</target>
        </trans-unit>
        <trans-unit id="796eccea3c2925946b9056d5cc879303408c0681" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isatty&lt;/code&gt; tests if a file descriptor is a tty.</source>
          <target state="translated">&lt;code&gt;isatty&lt;/code&gt; は、ファイル記述子がttyかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="c0df263f2b948bac739292c3ddc9acf8416ae56f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; or &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;job-control CONTROL-TYPE&lt;/code&gt; は、ジョブ制御タイプを設定します。ジョブ制御タイプは、 &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、または &lt;code&gt;interactive&lt;/code&gt; のいずれかです。また、 &lt;code&gt;-j CONTROL-TYPE&lt;/code&gt; または &lt;code&gt;--job-control=CONTROL-TYPE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cde8ad0981c8e48203c6c5e456a35911d99f8f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;job-control CONTROL_TYPE&lt;/code&gt; sets the job control type, which can be &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;interactive&lt;/code&gt;. Also &lt;code&gt;-j CONTROL_TYPE&lt;/code&gt; or &lt;code&gt;--job-control CONTROL_TYPE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;job-control CONTROL_TYPE&lt;/code&gt; は、ジョブ制御タイプを設定します。これは、 &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、または &lt;code&gt;interactive&lt;/code&gt; のいずれかになります。また、 &lt;code&gt;-j CONTROL_TYPE&lt;/code&gt; または &lt;code&gt;--job-control CONTROL_TYPE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00800eab0dd8c8e4c813ebe5f0223f5a88122834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs, such as two long-running tasks in this example:</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; は、この例の2つの長時間実行タスクなど、現在のジョブの要約を出力します。</target>
        </trans-unit>
        <trans-unit id="df3951c97a9117fe33e430b00bd1987c8981de1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; outputs a summary of the current jobs.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; は、現在のジョブの概要を出力します。</target>
        </trans-unit>
        <trans-unit id="7ac566c92429f7bac43b9a995fa6646aa67505b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;../index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; は、現在実行中の&lt;a href=&quot;../index#syntax-job-control&quot;&gt;ジョブ&lt;/a&gt;とそのステータスのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="6add538256d52216f5d1b768f00171f403ab1b47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jobs&lt;/code&gt; prints a list of the currently running &lt;a href=&quot;index#syntax-job-control&quot;&gt;jobs&lt;/a&gt; and their status.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; は、現在実行中の&lt;a href=&quot;index#syntax-job-control&quot;&gt;ジョブ&lt;/a&gt;とそのステータスのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="8351e11b5536a97176c78f4c39a337502e837f3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-bigword&lt;/code&gt;, move the next whitespace-delimited word to the killring</source>
          <target state="translated">&lt;code&gt;kill-bigword&lt;/code&gt; bigword、次の空白で区切られた単語をkillringに移動します</target>
        </trans-unit>
        <trans-unit id="72618006835f7c9941204bbb5b3a9305d43c8849" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-line&lt;/code&gt;, move everything from the cursor to the end of the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-line&lt;/code&gt; 、カーソルから行末までをすべてkillringに移動します</target>
        </trans-unit>
        <trans-unit id="f2a174739861bddd91263d6062b0ac3b9c38035c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-selection&lt;/code&gt;, move the selected text to the killring</source>
          <target state="translated">&lt;code&gt;kill-selection&lt;/code&gt; 、選択したテキストをkillringに移動します</target>
        </trans-unit>
        <trans-unit id="42a3bfd3618e3b8e8ffa8030316a091858f2dc8b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-whole-line&lt;/code&gt;, move the line to the killring</source>
          <target state="translated">&lt;code&gt;kill-whole-line&lt;/code&gt; 、行をkillringに移動します</target>
        </trans-unit>
        <trans-unit id="46c753278748bac6dfa1653ee040432fb7997faa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill-word&lt;/code&gt;, move the next word to the killring</source>
          <target state="translated">&lt;code&gt;kill-word&lt;/code&gt; 、次の単語をkillringに移動</target>
        </trans-unit>
        <trans-unit id="a1cd0e574da2f2e8f9dd802ac5736368dfe3f74a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;last_pid&lt;/code&gt;, the process ID (PID) of the last background process.</source>
          <target state="translated">&lt;code&gt;last_pid&lt;/code&gt; 、最後のバックグラウンドプロセスのプロセスID（PID）。</target>
        </trans-unit>
        <trans-unit id="eeb54e31a64cc891898da48f1a74d6a789921adb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;, list the contents of files</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; 、ファイルの内容を一覧表示</target>
        </trans-unit>
        <trans-unit id="bcd91589f24923a18eda34bea169fdaf9603e834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;less&lt;/code&gt;: Display the contents of files</source>
          <target state="translated">&lt;code&gt;less&lt;/code&gt; ：ファイルの内容を表示します</target>
        </trans-unit>
        <trans-unit id="f65ebe7417be893ffc0ac02b73f221d6578651ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line-number&lt;/code&gt; prints the line number of the currently running script. Also &lt;code&gt;current-line-number&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--current-line-number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;line-number&lt;/code&gt; は、現在実行中のスクリプトの行番号を出力します。また、 &lt;code&gt;current-line-number&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--current-line-number&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="625138e35c6aaa85c8f70ae1da66865bc83ab095" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ln&lt;/code&gt; - the base-e logarithm</source>
          <target state="translated">&lt;code&gt;ln&lt;/code&gt; -基eの対数</target>
        </trans-unit>
        <trans-unit id="81061764e65e9ab42280021deb6358105970c12d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; or &lt;code&gt;log10&lt;/code&gt; - the base-10 logarithm</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; または &lt;code&gt;log10&lt;/code&gt; -10を底とする対数</target>
        </trans-unit>
        <trans-unit id="a270a94b7f3cd45c0e4d9eb079912b43ced5cdfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;longonly=&lt;/code&gt; is a flag &lt;code&gt;--longonly&lt;/code&gt; that requires an option, there is no short flag or even short flag variable.</source>
          <target state="translated">&lt;code&gt;longonly=&lt;/code&gt; はフラグ &lt;code&gt;--longonly&lt;/code&gt; であり、オプションが必要です。短いフラグはなく、短いフラグ変数もありません。</target>
        </trans-unit>
        <trans-unit id="60e7cc4141c2d5dd36d802d642e50b97c6b1ca17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;, list files and directories</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; 、ファイルとディレクトリのリスト</target>
        </trans-unit>
        <trans-unit id="f6ec97c1f90ccc0acdd23329e5cb6f86daf22bf1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ls&lt;/code&gt;: List files and directories</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; ：ファイルとディレクトリを一覧表示します</target>
        </trans-unit>
        <trans-unit id="4830c6e74e8614fb12f3dce5192a1ccc76ff965d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt; is a command for displaying a manual page on a given topic. The man command takes the name of the manual page to display as an argument. There are manual pages for almost every command on most computers. There are also manual pages for many other things, such as system libraries and important files.</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; は、特定のトピックに関するマニュアルページを表示するためのコマンドです。manコマンドは、表示するマニュアルページの名前を引数として取ります。ほとんどのコンピューターには、ほぼすべてのコマンドのマニュアルページがあります。システムライブラリや重要なファイルなど、他の多くのマニュアルページもあります。</target>
        </trans-unit>
        <trans-unit id="73e693d589ad85a4f595f45bc7f491c73bb44d92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;, display a manual page on the screen</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; 、画面にマニュアルページを表示します</target>
        </trans-unit>
        <trans-unit id="126de4425a9fbfa3f5f5dfcf628ffcbaf0e84bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;man&lt;/code&gt;: Display a manual page</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; ：マニュアルページを表示する</target>
        </trans-unit>
        <trans-unit id="ad0603c78171a3df042e3459a2196946ed1def38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;bitand(0xFE, 0x2e)&quot;&lt;/code&gt; outputs 46.</source>
          <target state="translated">&lt;code&gt;math &quot;bitand(0xFE, 0x2e)&quot;&lt;/code&gt; 46を出力します。</target>
        </trans-unit>
        <trans-unit id="b537ae94331bd6ceb9a4fb22fc4f3ab749e1ba6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;bitor(9,2)&quot;&lt;/code&gt; outputs 11.</source>
          <target state="translated">&lt;code&gt;math &quot;bitor(9,2)&quot;&lt;/code&gt; 11を出力します。</target>
        </trans-unit>
        <trans-unit id="285ed3595a2a67bb3282ae1360db0e30794213ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; outputs &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math &quot;sin(pi)&quot;&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="eb050233a037dea5009df6afea79c6a67545439a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math $status - 128&lt;/code&gt; outputs the numerical exit status of the last command minus 128.</source>
          <target state="translated">&lt;code&gt;math $status - 128&lt;/code&gt; は、最後のコマンドの終了ステータスから128を引いた数値を出力します。</target>
        </trans-unit>
        <trans-unit id="63d0eef54b2a08f3abd9069e44380075ea7790a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math --base=hex 192&lt;/code&gt; prints &lt;code&gt;0xc0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math --base=hex 192&lt;/code&gt; 出力し &lt;code&gt;0xc0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62f5bddd60dd031bee23091b7071808993dd4f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; outputs &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; 出力 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee576ca1237b790b579b57a522ac77fdfe4dace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s3 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s3 10 / 6&lt;/code&gt; 出力 &lt;code&gt;1.666&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2afd4d22ab4aec5b0acabaa13fdb5dab928d4b72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 0xFF&lt;/code&gt; outputs 255, &lt;code&gt;math 0 x 3&lt;/code&gt; outputs 0 (because it computes 0 multiplied by 3).</source>
          <target state="translated">&lt;code&gt;math 0xFF&lt;/code&gt; は255を出力し、 &lt;code&gt;math 0 x 3&lt;/code&gt; は0を出力します（0に3を掛けて計算するため）。</target>
        </trans-unit>
        <trans-unit id="81cc154eafffdbcc1fc0bc775abc9037a8ee7f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 1+1&lt;/code&gt; outputs 2.</source>
          <target state="translated">&lt;code&gt;math 1+1&lt;/code&gt; 出力2。</target>
        </trans-unit>
        <trans-unit id="0b9bceb25a6bea3bf050d266eb2dabb87359d38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666667&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 10 / 6&lt;/code&gt; &lt;code&gt;1.666667&lt;/code&gt; 出力します。</target>
        </trans-unit>
        <trans-unit id="0506f0b9975fb7a5dac75392d203b4e4d03c48aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 5 \* 2&lt;/code&gt; or &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; or &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; all output &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 5 \* 2&lt;/code&gt; または &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; または &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; すべての出力 &lt;code&gt;10&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac2f6b46e44457ebc6c17a24cac39023b91980ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +    2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は引数間の空白を無視し、その入力を複数の引数（内部でスペースで結合）として受け取るため、 &lt;code&gt;math 2 +2&lt;/code&gt; と &lt;code&gt;math &quot;2 + 2&quot;&lt;/code&gt; は同じように機能します。 &lt;code&gt;math 2 2&lt;/code&gt; はエラーです。</target>
        </trans-unit>
        <trans-unit id="5cfe1d0b897a4b186b164463b5e374849fe22e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は引数間の空白を無視し、その入力を複数の引数（内部でスペースで結合）として受け取るため、 &lt;code&gt;math 2 +2&lt;/code&gt; と &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; +2 &quot;は同じように機能します。 &lt;code&gt;math 2 2&lt;/code&gt; はエラーです。</target>
        </trans-unit>
        <trans-unit id="9ba0660e6966691b91248fb2bd5f96aab0fbeb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;log2()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は、数学的な計算を実行するために使用されます。これは、加算、減算などの通常の操作をすべてサポートします。また、 &lt;code&gt;abs()&lt;/code&gt; 、 &lt;code&gt;sqrt()&lt;/code&gt; 、および &lt;code&gt;log2()&lt;/code&gt; などの関数もサポートします。</target>
        </trans-unit>
        <trans-unit id="f0c967cc75c19f494f0c88a7accc5d3cf4435577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows some operators, constants, functions and can (obviously) read numbers.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; はいくつかの演算子、定数、関数を知っており、（明らかに）数値を読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="be9c5baace2aafc6d8913dc0e713e617b094c022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following constants:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は次の定数を知っています。</target>
        </trans-unit>
        <trans-unit id="54b59170a6a2d63ae4126c98f35573504c3fe866" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following operators:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は次の演算子を知っています。</target>
        </trans-unit>
        <trans-unit id="734e34f77e8861566c9e5dae95fca705b2d393da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; performs mathematical calculations. It supports simple operations such as addition, subtraction, and so on, as well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;ln()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は数学計算を実行します。加算、減算などの単純な操作だけでなく、 &lt;code&gt;abs()&lt;/code&gt; 、 &lt;code&gt;sqrt()&lt;/code&gt; 、 &lt;code&gt;ln()&lt;/code&gt; などの関数もサポートしています。</target>
        </trans-unit>
        <trans-unit id="009be72b39b76a473ac24d04bf2afb4a541294d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; supports the following functions:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は次の関数をサポートしています。</target>
        </trans-unit>
        <trans-unit id="be1434f80555c9e72306465d0deaafae514e79ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; immediately incorporates history changes from other sessions. Ordinarily &lt;code&gt;fish&lt;/code&gt; ignores history changes from sessions started after the current one. This command applies those changes immediately.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; は、他のセッションからの履歴変更をすぐに組み込みます。通常、 &lt;code&gt;fish&lt;/code&gt; は現在のセッションの後に開始されたセッションからの履歴の変更を無視します。このコマンドは、それらの変更をすぐに適用します。</target>
        </trans-unit>
        <trans-unit id="774a283e059b420761769f3fd4e58b1c4617fff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;, move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; 、ファイルの移動（名前変更）</target>
        </trans-unit>
        <trans-unit id="70cb953c3ea6ee6baf32a061563438714f7b7872" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;: Move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; ：ファイルの移動（名前の変更）</target>
        </trans-unit>
        <trans-unit id="c5896fb9d9983a25b4acb8859bdc3aef24d4b75f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n#max&lt;/code&gt; は、正規表現「^-？\ d + $」に一致するフラグが有効であることを意味します。表示されると、それらは変数 &lt;code&gt;_flag_n&lt;/code&gt; および &lt;code&gt;_flag_max&lt;/code&gt; に割り当てられます。これにより、単一の「-」を前に付けることにより、有効な正または負の整数を指定できます。多くのコマンドがこのイディオムをサポートしています。たとえば、 &lt;code&gt;head -3 /a/file&lt;/code&gt; を使用して、/ a / fileの最初の3行のみを出力します。また、いずれかのフラグを使用して値を指定できます。 &lt;code&gt;-n NNN&lt;/code&gt; または &lt;code&gt;--max NNN&lt;/code&gt; この例では</target>
        </trans-unit>
        <trans-unit id="d5068ef44383529da8a297fad4521ff3def0b93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n#max&lt;/code&gt; は、正規表現「^-？d + $」に一致するフラグが有効であることを意味します。表示されると、それらは変数 &lt;code&gt;_flag_n&lt;/code&gt; および &lt;code&gt;_flag_max&lt;/code&gt; に割り当てられます。これにより、単一の「-」を前に付けることにより、有効な正または負の整数を指定できます。多くのコマンドがこのイディオムをサポートしています。たとえば、 &lt;code&gt;head -3 /a/file&lt;/code&gt; を使用して、/ a / fileの最初の3行のみを出力します。また、いずれかのフラグを使用して値を指定できます。 &lt;code&gt;-n NNN&lt;/code&gt; または &lt;code&gt;--max NNN&lt;/code&gt; この例では</target>
        </trans-unit>
        <trans-unit id="7023e674591c966dcf0f86a6fe75236339070f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n-name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence of the flag.</source>
          <target state="translated">&lt;code&gt;n-name=+&lt;/code&gt; は、 &lt;code&gt;--name&lt;/code&gt; のみが有効であることを意味します。値が必要で、複数回使用できます。フラグが表示されている場合、 &lt;code&gt;_flag_n&lt;/code&gt; と &lt;code&gt;_flag_name&lt;/code&gt; には、フラグが出現するたびに関連付けられている値が設定されます。</target>
        </trans-unit>
        <trans-unit id="10c98ccb9e926b5c88017fefb6f1a99d034b3aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It requires a value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the single mandatory value associated with the flag.</source>
          <target state="translated">&lt;code&gt;n/name=&lt;/code&gt; は、 &lt;code&gt;-n&lt;/code&gt; と &lt;code&gt;--name&lt;/code&gt; の両方が有効であることを意味します。値が必要であり、最大で1回使用できます。フラグが表示されている場合、 &lt;code&gt;_flag_n&lt;/code&gt; と &lt;code&gt;_flag_name&lt;/code&gt; には、フラグに関連付けられている単一の必須値が設定されます。</target>
        </trans-unit>
        <trans-unit id="11979a51fb38eb5d6b66a5b8c9d7f5b86329e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=?&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It accepts an optional value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the value associated with the flag if one was provided else it will be set with no values.</source>
          <target state="translated">&lt;code&gt;n/name=?&lt;/code&gt; &lt;code&gt;-n&lt;/code&gt; と &lt;code&gt;--name&lt;/code&gt; の両方が有効であることを意味します。オプションの値を受け入れ、最大で1回使用できます。フラグが表示されている場合、 &lt;code&gt;_flag_n&lt;/code&gt; と &lt;code&gt;_flag_name&lt;/code&gt; には、フラグに関連付けられた値が設定されます（値が指定されている場合）。値が設定されていません。</target>
        </trans-unit>
        <trans-unit id="6a3aaaa7ebe33bd42f7c7723f56bc9270c4a585f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n::max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n::max&lt;/code&gt; は、正規表現「^-？\ d + $」に一致するフラグが有効であることを意味します。表示されると、変数 &lt;code&gt;_flag_n&lt;/code&gt; および &lt;code&gt;_flag_max&lt;/code&gt; に割り当てられます。これにより、任意の有効な正または負の整数を、単一の「-」を前に付けることで指定できます。多くのコマンドがこのイディオムをサポートしています。たとえば、 &lt;code&gt;head -3 /a/file&lt;/code&gt; とすると、/ a / fileの最初の3行だけが出力されます。この例では、 &lt;code&gt;-n NNN&lt;/code&gt; または &lt;code&gt;--max NNN&lt;/code&gt; のいずれかのフラグを使用して値を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="1974cd27b936ab7a9712f59ff231a57829df2f50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence.</source>
          <target state="translated">&lt;code&gt;name=+&lt;/code&gt; は、 &lt;code&gt;--name&lt;/code&gt; のみが有効であることを意味します。値が必要で、複数回使用できます。フラグが &lt;code&gt;_flag_name&lt;/code&gt; されると、_flag_nameは各オカレンスに関連付けられた値で設定されます。</target>
        </trans-unit>
        <trans-unit id="23dde85ee198e14272ca271cfb23d628296344a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the &lt;a href=&quot;../index#directory-history&quot;&gt;history of visited directories&lt;/a&gt;; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; は&lt;a href=&quot;../index#directory-history&quot;&gt;、訪問したディレクトリの履歴で&lt;/a&gt; &lt;code&gt;POS&lt;/code&gt; の位置を前方に移動します。履歴の終わりに達した場合、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="18757061001b09cf2873d7ed5d548b11e41c7525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; は、訪問したディレクトリの履歴で &lt;code&gt;POS&lt;/code&gt; の位置を進めます。履歴の終わりに達した場合、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="cea306a2ee9cfb2d8fb7788331bf26c28447c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt; negates the exit status of another command. If the exit status is zero, &lt;code&gt;not&lt;/code&gt; returns 1. Otherwise, &lt;code&gt;not&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; 別のコマンドの終了ステータスを無効にしません。終了ステータスがゼロの場合、 &lt;code&gt;not&lt;/code&gt; は1を返します。それ以外の場合、 &lt;code&gt;not&lt;/code&gt; は0を返します。</target>
        </trans-unit>
        <trans-unit id="db48abf0126ad617f48775398922a0b4b30d0bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open *.txt&lt;/code&gt; opens all the text files in the current directory using your system's default text editor.</source>
          <target state="translated">&lt;code&gt;open *.txt&lt;/code&gt; は、システムのデフォルトのテキストエディターを使用して、現在のディレクトリにあるすべてのテキストファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="e94f06b97a3cfcb7ec8a4770650b1e748f69af17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional &lt;code&gt;xdg-open&lt;/code&gt; utility, from the &lt;code&gt;xdg-utils&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; は、オペレーティングシステムに適したツールを使用して、デフォルトのアプリケーションでファイルを開きます。GNU / Linuxでは、これには &lt;code&gt;xdg-utils&lt;/code&gt; パッケージからの一般的だがオプションの &lt;code&gt;xdg-open&lt;/code&gt; ユーティリティが必要です。</target>
        </trans-unit>
        <trans-unit id="23eeee895599e5eae80cda23801496141175086a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, open files with the default application associated with each filetype</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 、各ファイルタイプに関連付けられたデフォルトのアプリケーションでファイルを開く</target>
        </trans-unit>
        <trans-unit id="6f86ac0554f4a4cf4f28495788244852b2e6599f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、現在の終了ステータス自体は変更しませんが、実行するコマンドは変更する可能性があります。最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="dac5a9585518dd59c14ca7616fb90e727007732e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、現在の終了ステータス自体は変更しませんが、実行するコマンドはほとんど変更します。最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="011af2ca1a12c1a3f3a067f4ab735209202aafb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; is used to execute a command if the previous command was not successful (returned a status of something other than 0).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、前のコマンドが成功しなかった（0以外のステータスを返した）場合にコマンドを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="afa6b74bd124cb8b57c3d66b4c7a1084e37218d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; ステートメントは、&lt;a href=&quot;#if&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;ブロックまたは&lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;ブロックの条件の一部として使用できます。例については、&lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3c73d73d5ebdf318201e26c0530d1eeb58fc2ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; ステートメントは、&lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt;または&lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt;ブロックの条件の一部として使用できます。</target>
        </trans-unit>
        <trans-unit id="cf4d75478e5e579c27aec58655a02ee30fe78ac3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt;, only execute the next function if the previous succeeded (note: only some functions report success)</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、前の関数が成功した場合にのみ次の関数を実行します（注：一部の関数のみが成功を報告します）</target>
        </trans-unit>
        <trans-unit id="3f200b52a1765aa96f91d9512533bf90cd4d3e3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pager-toggle-search&lt;/code&gt;, toggles the search field if the completions pager is visible.</source>
          <target state="translated">&lt;code&gt;pager-toggle-search&lt;/code&gt; 、補完ページャーが表示されている場合に検索フィールドを切り替えます。</target>
        </trans-unit>
        <trans-unit id="94b3685be3c69fedec8ad15d840b332000b7cadb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - &amp;pi;. You know this one. Half of Tau.</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; -&amp;pi;。あなたはこれを知っています。タウの半分。</target>
        </trans-unit>
        <trans-unit id="93e6cd2cf57f32f0f1074687103ba4dd1420c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - You know that one. Half of Tau. (Tau is not implemented)</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; -あなたはそれを知っています。タウの半分。（Tauは実装されていません）</target>
        </trans-unit>
        <trans-unit id="0f446d5ed35eb5048e4c7f001b1f27dc9402116e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipestatus&lt;/code&gt;, a list of exit statuses of all processes that made up the last executed pipe.</source>
          <target state="translated">&lt;code&gt;pipestatus&lt;/code&gt; 、最後に実行されたパイプを構成するすべてのプロセスの終了ステータスのリスト。</target>
        </trans-unit>
        <trans-unit id="cfd4c5f41b27739101b5f4355562dc72dc6236d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt; and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; は、&lt;a href=&quot;../index#directory-stack&quot;&gt;ディレクトリスタック&lt;/a&gt;から最上位ディレクトリを削除し、作業ディレクトリを新しい最上位ディレクトリに変更します。&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt;を使用して、ディレクトリをスタックに追加します。</target>
        </trans-unit>
        <trans-unit id="91f28400f6533478b46d55c90e3c872cc0eaea4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; は、ディレクトリスタックからトップディレクトリを削除し、作業ディレクトリを新しいトップディレクトリに変更します。&lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;を使用して、スタックにディレクトリを追加します。</target>
        </trans-unit>
        <trans-unit id="67a047b7a48542b870bd5211e515649aee68917e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack or &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print it.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; は、ディレクトリスタックから最上位ディレクトリを削除し、作業ディレクトリを新しい最上位ディレクトリに変更します。&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt;を使用してディレクトリをスタックに追加するか、&lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt;を使用して印刷します。</target>
        </trans-unit>
        <trans-unit id="c23cde6c68fbe655e308c020e25d49d09dd62da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pow(x,y)&lt;/code&gt; returns x to the y (and can be written as &lt;code&gt;x ^ y&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;pow(x,y)&lt;/code&gt; はxをyに返します（ &lt;code&gt;x ^ y&lt;/code&gt; と書くこともできます）</target>
        </trans-unit>
        <trans-unit id="1ebf7e7d53234ae4fb48ce662e1d9ab1a7b3ca59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the &lt;a href=&quot;../index#directory-history&quot;&gt;history of visited directories&lt;/a&gt;; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; は&lt;a href=&quot;../index#directory-history&quot;&gt;、訪問したディレクトリの履歴&lt;/a&gt;内の &lt;code&gt;POS&lt;/code&gt; 位置を後方に移動します。履歴の先頭に到達すると、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="287de450b9e0483d85e25a5a84e5f182194a1456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; は、訪問したディレクトリの履歴内で &lt;code&gt;POS&lt;/code&gt; 位置を後方に移動します。履歴の先頭に達した場合、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="758894fa9ac3dcdc16edfc52096829dc60931b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prompt_pwd&lt;/code&gt; is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="translated">&lt;code&gt;prompt_pwd&lt;/code&gt; は、プロンプトに適した方法で現在の作業ディレクトリを出力する関数です。ホームディレクトリを「〜」に置き換え、すべてのパスコンポーネントを短縮しますが、最後のコンポーネントはデフォルトの1文字に短縮します。</target>
        </trans-unit>
        <trans-unit id="e5c43c64e240d0f4ae1a99ca5c42cd0423139bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd +NUMBER&lt;/code&gt; rotates the stack counter-clockwise i.e. from bottom to top</source>
          <target state="translated">&lt;code&gt;pushd +NUMBER&lt;/code&gt; は、スタックを反時計回りに、つまり下から上に回転します</target>
        </trans-unit>
        <trans-unit id="6ba679406b42673c5180f9bba2472c6204d8f0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd -NUMBER&lt;/code&gt; rotates clockwise i.e. top to bottom.</source>
          <target state="translated">&lt;code&gt;pushd -NUMBER&lt;/code&gt; は時計回り、つまり上から下に回転します。</target>
        </trans-unit>
        <trans-unit id="d9173c9010853802ba5c4a311f821ba14078009e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pwd&lt;/code&gt; outputs (prints) the current working directory.</source>
          <target state="translated">&lt;code&gt;pwd&lt;/code&gt; は現在の作業ディレクトリを出力（印刷）します。</target>
        </trans-unit>
        <trans-unit id="4222bac83e593bcc8b83125f0cac99a87ea7f79f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;random&lt;/code&gt; generates a pseudo-random integer from a uniform distribution. The range (inclusive) depends on the arguments. No arguments indicate a range of 0 to 32767 (inclusive).</source>
          <target state="translated">&lt;code&gt;random&lt;/code&gt; は、一様分布から疑似乱数整数を生成します。範囲（両端を含む）は引数によって異なります。0から32767（両端を含む）の範囲を示す引数はありません。</target>
        </trans-unit>
        <trans-unit id="72ec7167859aebdbfb7c4a4a7e1050eee5ed4896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, &lt;code&gt;read&lt;/code&gt; reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as &lt;code&gt;REPLY&lt;/code&gt;) for storing the result - instead, it is printed on standard output.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; は標準入力から読み取り、結果を標準出力に書き戻すか（コマンド置換で使用するため）、結果を1つ以上のシェル変数に格納します。デフォルトでは、 &lt;code&gt;read&lt;/code&gt; は1行を読み取り、それをスペースまたはタブ上の変数に分割します。または、ヌル文字または最大文字数を使用して入力を終了し、他の区切り文字を指定できます。他のシェルとは異なり、結果を保存するためのデフォルトの変数（ &lt;code&gt;REPLY&lt;/code&gt; など）はありません。代わりに、標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="581f42e718d0bcfbf0164027aaefb2e2e09daff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;realpath&lt;/code&gt; resolves a path to its absolute path.</source>
          <target state="translated">&lt;code&gt;realpath&lt;/code&gt; は、パスをその絶対パスに解決します。</target>
        </trans-unit>
        <trans-unit id="35bd00f382e8670d7d44d2b40cf3fca33494e874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt; reexecutes the fish_mode_prompt function and redraws the prompt. This is useful for vi-mode. If no fish_mode_prompt exists, it acts like a normal repaint.</source>
          <target state="translated">&lt;code&gt;repaint-mode&lt;/code&gt; は、fish_mode_prompt関数を再実行し、プロンプトを再描画します。これはviモードに役立ちます。fish_mode_promptが存在しない場合は、通常の再描画のように機能します。</target>
        </trans-unit>
        <trans-unit id="bb9598a01950bf1278cfe9bf8ae5167278ce094d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt;, reexecutes the &lt;a href=&quot;fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; and redraws the prompt. This is useful for vi-mode. If no &lt;code&gt;fish_mode_prompt&lt;/code&gt; exists or it prints nothing, it acts like a normal repaint.</source>
          <target state="translated">&lt;code&gt;repaint-mode&lt;/code&gt; は、&lt;a href=&quot;fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt;を再実行し、プロンプトを再描画します。これはviモードに役立ちます。何場合 &lt;code&gt;fish_mode_prompt&lt;/code&gt; が存在しないか、それは何も出力しない、それは通常の再描画のような役割を果たします。</target>
        </trans-unit>
        <trans-unit id="8af37077a702119f1289199205be5c8570e1f654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt; reexecutes the prompt functions and redraws the prompt. Multiple successive repaints are coalesced.</source>
          <target state="translated">&lt;code&gt;repaint&lt;/code&gt; はプロンプト機能を再実行し、プロンプトを再描画します。複数の連続した再描画が合体します。</target>
        </trans-unit>
        <trans-unit id="4ee747f75ea57d78f580575bca29b030acd1155b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt;, reexecutes the prompt functions and redraws the prompt (also &lt;code&gt;force-repaint&lt;/code&gt; for backwards-compatibility)</source>
          <target state="translated">&lt;code&gt;repaint&lt;/code&gt; 、プロンプト機能を再実行し、プロンプトを再描画します（下位互換性のために &lt;code&gt;force-repaint&lt;/code&gt; 描画します）</target>
        </trans-unit>
        <trans-unit id="ff49b83e64396ed910787499c3a6a700a00c3e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat-jump&lt;/code&gt; and &lt;code&gt;repeat-jump-reverse&lt;/code&gt;, redo the last jump in the same/opposite direction</source>
          <target state="translated">&lt;code&gt;repeat-jump&lt;/code&gt; と &lt;code&gt;repeat-jump-reverse&lt;/code&gt; 、最後のジャンプを同じ/反対方向にやり直します</target>
        </trans-unit>
        <trans-unit id="4b249dc97dd0ed2d7efc75e8750d13ccd586b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; halts a currently running function. The exit status is set to &lt;code&gt;STATUS&lt;/code&gt; if it is given.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; は、現在実行中の関数を停止します。終了ステータスは、指定されている場合は &lt;code&gt;STATUS&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="2dff648efb696543bf4783ef158dc6faac05096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; - rounds to the nearest integer, away from 0</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; -0から離れた最も近い整数に丸めます</target>
        </trans-unit>
        <trans-unit id="9ae815b29923bb2081652f0d74075b638b35e307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; は、すべての変更をすぐに履歴ファイルに書き込みます。シェルは自動的に履歴ファイルを保存します。このオプションは内部使用のために提供されており、通常はユーザーが使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="f9cbc63b923d6e80c08215a900beb75279f6f039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope-shadowing&lt;/code&gt; if the function shadows the vars in the calling function (the normal case if it wasn't defined with &lt;code&gt;--no-scope-shadowing&lt;/code&gt;), else &lt;code&gt;no-scope-shadowing&lt;/code&gt;, or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined,</source>
          <target state="translated">&lt;code&gt;scope-shadowing&lt;/code&gt; 関数が呼び出し元の関数の変数をシャドウする場合はscope-shadowing（ &lt;code&gt;--no-scope-shadowing&lt;/code&gt; &lt;code&gt;no-scope-shadowing&lt;/code&gt; で定義されていない場合は通常のケース）、それ以外はno-scope-shadowing、または関数がそうでない場合は &lt;code&gt;n/a&lt;/code&gt; 定義された、</target>
        </trans-unit>
        <trans-unit id="28ff499477de962fb27a4867869e04752ace3e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search&lt;/code&gt; returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say &lt;code&gt;history search&lt;/code&gt; if you wish to search for one of the subcommands. The &lt;code&gt;--contains&lt;/code&gt; search option will be used if you don't specify a different search option. Entries are ordered newest to oldest unless you use the &lt;code&gt;--reverse&lt;/code&gt; flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; は、検索文字列に一致する履歴アイテムを返します。検索文字列を指定しないと、すべての履歴アイテムが返されます。他の操作が指定されていない場合、これがデフォルトの操作です。サブコマンドの1つを検索する場合にのみ、 &lt;code&gt;history search&lt;/code&gt; を明示的に言う必要があります。 &lt;code&gt;--contains&lt;/code&gt; の別の検索オプションを指定しない場合は、検索オプションが使用されます。 &lt;code&gt;--reverse&lt;/code&gt; フラグを使用しない限り、エントリは新しいものから最も古いものの順に並べられます。stdoutがttyに接続されている場合、出力は履歴機能によってページャーにパイプされます。組み込みの履歴は、結果をstdoutに書き込むだけです。</target>
        </trans-unit>
        <trans-unit id="f3f96766ba4c2b74ccc38f1a311d22fc52bcedcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert-notfirst&lt;/code&gt;, inserts the matching sequence into the command line, unless the cursor is at the beginning</source>
          <target state="translated">&lt;code&gt;self-insert-notfirst&lt;/code&gt; は、カーソルが先頭にない限り、一致するシーケンスをコマンドラインに挿入します</target>
        </trans-unit>
        <trans-unit id="47994204741d29e8fba63c4defd897209f0ef532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert&lt;/code&gt;, inserts the matching sequence into the command line</source>
          <target state="translated">&lt;code&gt;self-insert&lt;/code&gt; 挿入、一致するシーケンスをコマンドラインに挿入します</target>
        </trans-unit>
        <trans-unit id="3c7412bb3c267d60c210b7f29f1dcceac204bd2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;seq(1)&lt;/code&gt; can be used as a replacement for &lt;code&gt;{1..10}&lt;/code&gt; range expansion. If your OS doesn't ship a &lt;code&gt;seq&lt;/code&gt; fish includes a replacement function.</source>
          <target state="translated">&lt;code&gt;seq(1)&lt;/code&gt; は、 &lt;code&gt;{1..10}&lt;/code&gt; 範囲拡張の代わりに使用できます。OSが出荷されない場合、 &lt;code&gt;seq&lt;/code&gt; fishには交換機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="c102ee1c01aee7c5234def07fe9f1921b397a6f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set -q&lt;/code&gt; can be used to determine if a variable exists or has a certain number of elements (&lt;code&gt;set -q foo[2]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;set -q&lt;/code&gt; を使用して、変数が存在するか、または特定の数の要素があるかどうかを判別できます（ &lt;code&gt;set -q foo[2]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7bc81f408553d427ee9413652a2f976a6b4c6dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;../index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は&lt;a href=&quot;../index#variables&quot;&gt;シェル変数を&lt;/a&gt;操作します。</target>
        </trans-unit>
        <trans-unit id="78965c3228dd7b50cac24fd22a4c3a8f0bdef2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は&lt;a href=&quot;index#variables&quot;&gt;シェル変数を&lt;/a&gt;操作します。</target>
        </trans-unit>
        <trans-unit id="4f185cc7bb3302f1e1eb498766b8e2bd113f381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; requires all options to come before any other arguments. For example, &lt;code&gt;set flags -l&lt;/code&gt; will have the effect of setting the value of the variable &lt;code&gt;flags&lt;/code&gt; to '-l', not making the variable local.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; では、すべてのオプションが他の引数の前に来る必要があります。たとえば、 &lt;code&gt;set flags -l&lt;/code&gt; は、変数をローカルにせずに、変数 &lt;code&gt;flags&lt;/code&gt; の値を「-l」に設定する効果があります。</target>
        </trans-unit>
        <trans-unit id="9948f6276410fe2f9dcf81419917c9bdeb9052d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; corresponds to a reserved color name such as &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits. The &lt;em&gt;br&lt;/em&gt;-, as in 'bright', forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray. A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、ターミナルのテキストの色とスタイルを制御するために使用されます。 &lt;code&gt;VALUE&lt;/code&gt; は、3桁または6桁の16進数で指定される&lt;em&gt;赤&lt;/em&gt;やRGBカラー値などの予約済みカラー名に対応します。&lt;em&gt;BR&lt;/em&gt; - 、「明るい」のように、フォームは、フル輝度が多くの端末に8標準輝度の色の変異体です。&lt;em&gt;brblackの&lt;/em&gt;輝度は&lt;em&gt;黒&lt;/em&gt;よりも高く、灰色に&lt;em&gt;近づき&lt;/em&gt;ます。特別なキーワード&lt;em&gt;normalは、&lt;/em&gt;テキストのフォーマットを端末のデフォルトにリセットします。</target>
        </trans-unit>
        <trans-unit id="9a61b97a3a96f79739663fe1e066e0c4c4c00523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; describes that styling. It's a reserved color name like &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits (&quot;F27&quot; or &quot;FF2277&quot;). A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、端末のテキストの色とスタイルを制御するために使用されます。 &lt;code&gt;VALUE&lt;/code&gt; はそのスタイリングを表します。これは、&lt;em&gt;赤の&lt;/em&gt;ような予約済みの色名、または3桁または6桁の16進数（「F27」または「FF2277」）で指定されたRGBカラー値です。特別なキーワード&lt;em&gt;normalは、&lt;/em&gt;テキストのフォーマットを端末のデフォルトにリセットします。</target>
        </trans-unit>
        <trans-unit id="ab26307dc8847048c91facf1a58ea82662da70fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit code of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、文字のシーケンスを&lt;em&gt;stdoutに出力&lt;/em&gt;することによって機能します。コマンド置換またはパイプで使用される場合、これらの文字もキャプチャされます。これは望ましい場合と望ましくない場合があります。 &lt;code&gt;set_color&lt;/code&gt; を使用 &lt;code&gt;isatty stdout&lt;/code&gt; 前にisatty stdoutの終了コードを確認することは、スクリプトで出力を色付けしないことを決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0edcbbfc0660173d1858fb94dc65feaa1949db9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、文字のシーケンスを&lt;em&gt;stdoutに出力&lt;/em&gt;することによって機能します。コマンド置換またはパイプで使用される場合、これらの文字もキャプチャされます。これは望ましい場合と望ましくない場合があります。 &lt;code&gt;set_color&lt;/code&gt; を使用 &lt;code&gt;isatty stdout&lt;/code&gt; 前にisattystdoutの終了ステータスを確認すると、スクリプトの出力に色を付けないことを決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5f8f7bb400593234e096f28a62980d44f3d7595d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; creates a new &lt;a href=&quot;../index#variables-scope&quot;&gt;local scope&lt;/a&gt;; &lt;code&gt;set --local&lt;/code&gt; within a sourced block will not affect variables in the enclosing scope.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は新しい&lt;a href=&quot;../index#variables-scope&quot;&gt;ローカルスコープを&lt;/a&gt;作成します; ソースブロック内の &lt;code&gt;set --local&lt;/code&gt; は、囲んでいるスコープ内の変数には影響しません。</target>
        </trans-unit>
        <trans-unit id="44bd12edd43e43a291874a613bddb397393e4363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は、現在のシェルで指定されたファイルのコマンドを新しいコードブロックとして評価します。これは、コマンドを実行するために新しいプロセスを開始することとは異なります（つまり、 &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ）。コマンドは現在のシェルによって評価されるため、シェル変数の変更は現在のシェルに影響します。ファイル名の後に追加の引数が指定されている場合、それらは &lt;code&gt;$argv&lt;/code&gt; 変数に挿入されます。 &lt;code&gt;$argv&lt;/code&gt; 変数は、ソース化ファイルの名前が含まれていません。</target>
        </trans-unit>
        <trans-unit id="92cf10690e111961211954c672900c642fb4e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は、現在のシェルで指定されたファイルのコマンドを評価します。コマンドは現在のシェルによって評価されるため、コマンドを実行するための新しいプロセスを開始する（つまり、 &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ）とは異なります。つまり、シェル変数の変更は現在のシェルに影響します。ファイル名の後に追加の引数を指定すると、それらは &lt;code&gt;$argv&lt;/code&gt; 変数に挿入されます。 &lt;code&gt;$argv&lt;/code&gt; 変数は、ソース化ファイルの名前が含まれていません。</target>
        </trans-unit>
        <trans-unit id="b682c0f9f4fd30b611d91123367bf03905b468de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split0&lt;/code&gt; has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as &lt;code&gt;find -print0&lt;/code&gt; or &lt;code&gt;sort -z&lt;/code&gt;. See split0 examples below.</source>
          <target state="translated">&lt;code&gt;split0&lt;/code&gt; には、コマンド置換で使用したときに出力がさらに分割されないという重要な特性があり、コマンド置換で改行を含む要素を生成できます。これは、 &lt;code&gt;find -print0&lt;/code&gt; や &lt;code&gt;sort -z&lt;/code&gt; など、0バイトを生成するUnixツールで使用する場合に最も役立ちます。以下のsplit0の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b18d9d888505a6c0fddbe8b5ab5788ebfaae04f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack-trace&lt;/code&gt; prints a stack trace of all function calls on the call stack. Also &lt;code&gt;print-stack-trace&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--print-stack-trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stack-trace&lt;/code&gt; は、呼び出しスタック上のすべての関数呼び出しのスタックトレースを出力します。また、 &lt;code&gt;print-stack-trace&lt;/code&gt; 、 &lt;code&gt;-t&lt;/code&gt; または &lt;code&gt;--print-stack-trace&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67df8697fda987cf4b0f9d793cb1a365c353272b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;, the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 、最後に終了するフォアグラウンドジョブの&lt;a href=&quot;#variables-status&quot;&gt;終了ステータス&lt;/a&gt;。ジョブがシグナルによって終了した場合、終了ステータスは128にシグナル番号を加えたものになります。</target>
        </trans-unit>
        <trans-unit id="c516a3058e8b540cff793a7d265b4f62a8c6e479" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status_generation&lt;/code&gt;, the &quot;generation&quot; count of &lt;code&gt;$status&lt;/code&gt;. This will be incremented only when the previous command produced an explicit status. (For example, background jobs will not increment this).</source>
          <target state="translated">&lt;code&gt;status_generation&lt;/code&gt; 、 &lt;code&gt;$status&lt;/code&gt; の「世代」カウント。これは、前のコマンドが明示的なステータスを生成した場合にのみインクリメントされます。（たとえば、バックグラウンドジョブはこれをインクリメントしません）。</target>
        </trans-unit>
        <trans-unit id="85f1259baf47f016edcc07c02ff8cac3eb36ec8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string collect&lt;/code&gt; collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non-empty, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string collect&lt;/code&gt; は、コマンド置換で使用されるときに出力を分割せずに、入力を単一の出力引数に収集します。これは、別のコマンドからの複数行の出力を変数に収集しようとするときに役立ちます。終了ステータス：出力引数が空でない場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="47aeedf462897d3635e7a17a92b7bf0d2db0992d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string escape&lt;/code&gt; escapes each STRING in one of three ways. The first is &lt;code&gt;--style=script&lt;/code&gt;. This is the default. It alters the string such that it can be passed back to &lt;code&gt;eval&lt;/code&gt; to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-quoted&lt;/code&gt; is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string escape&lt;/code&gt; は、3つの方法のいずれかで各STRINGをエスケープします。1つ目は &lt;code&gt;--style=script&lt;/code&gt; です。これがデフォルトです。文字列を変更して &lt;code&gt;eval&lt;/code&gt; に戻し、元の引数を再度生成できるようにします。デフォルトでは、すべての特殊文字はエスケープされ、可能な場合は出力を簡略化するために引用符が使用されます。場合は &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--no-quoted&lt;/code&gt; 与えられ、簡素化引用されたフォーマットが使用されていません。終了ステータス：少なくとも1つの文字列がエスケープされた場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="b4c7444a524aa0a5c6e14a9e5a8c764cdc56c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join0&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join0&lt;/code&gt; は、そのSTRING引数をゼロバイト（NUL）で区切られた単一の文字列に結合し、末尾にNULを追加します。これは、 &lt;code&gt;sort -z&lt;/code&gt; -zなどのNUL区切りの入力を受け入れるツールと組み合わせると最も便利です。終了ステータス：少なくとも1つの結合が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="d4c0633e8572c3f56e421d3e1415eb94bb2502dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; は、STRING引数をSEPで区切られた単一の文字列に結合します。これは空の文字列でもかまいません。終了ステータス：少なくとも1つの結合が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="4ac8783d6c5b8669120457e3abfbead54a865de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; は、STRING引数をゼロバイト（NUL）で区切られた単一の文字列に結合し、末尾にNULを追加します。これは、 &lt;code&gt;sort -z&lt;/code&gt; など、NUL区切りの入力を受け入れるツールと組み合わせて使用​​すると最も便利です。終了ステータス：少なくとも1つの結合が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="31f0710b84864509b27d49251c16e09dbb8cd30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string length&lt;/code&gt; reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string length&lt;/code&gt; は、各文字列引数の長さを文字数で報告します。終了ステータス：空でないSTRINGが少なくとも1つ指定された場合は0、そうでない場合は1。</target>
        </trans-unit>
        <trans-unit id="ca94e657994de04d0305dfa680bad3e53fc3ae46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string lower&lt;/code&gt; converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already lowercase.</source>
          <target state="translated">&lt;code&gt;string lower&lt;/code&gt; は、各文字列引数を小文字に変換します。終了ステータス：少なくとも1つの文字列が小文字に変換された場合は0、それ以外の場合は1。これは、 &lt;code&gt;-q&lt;/code&gt; フラグと組み合わせて、文字列がすでに小文字かどうかを簡単にテストできることを意味します。</target>
        </trans-unit>
        <trans-unit id="333a78e8a7e90eb78cb032128941a70a0f45d451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string match&lt;/code&gt; tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; is given, in which case all matches are reported.</source>
          <target state="translated">&lt;code&gt;string match&lt;/code&gt; は、各STRINGをPATTERNに対してテストし、一致する部分文字列を出力します。 &lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--all&lt;/code&gt; が指定されていない限り、各STRINGの最初の一致のみが報告されます。この場合、すべての一致が報告されます。</target>
        </trans-unit>
        <trans-unit id="a40e5293c1ed33089c8c9998d925a7c5a922a64b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string pad&lt;/code&gt; extends each STRING to the given width by adding CHAR to the left.</source>
          <target state="translated">&lt;code&gt;string pad&lt;/code&gt; は、左側にCHARを追加することにより、各STRINGを指定された幅に拡張します。</target>
        </trans-unit>
        <trans-unit id="91089de95c70b9064ef9a4fecf2979a43632d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string repeat&lt;/code&gt; repeats the STRING &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--count&lt;/code&gt; times. The &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with &lt;code&gt;--count&lt;/code&gt;. If both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--no-newline&lt;/code&gt; is given, the output won't contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string repeat&lt;/code&gt; は、STRING &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--count&lt;/code&gt; 回を繰り返します。 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; オプションは、（改行を除く）出力チャーの数を制限します。このオプションは、単独で、または &lt;code&gt;--count&lt;/code&gt; と組み合わせて使用​​できます。 &lt;code&gt;--count&lt;/code&gt; と &lt;code&gt;--max&lt;/code&gt; の両方が存在する場合、最後に繰り返される文字列のサイズがmax未満でない限り、max charが出力されます。その場合、文字列はcountに達するまで繰り返されます。 &lt;code&gt;--count&lt;/code&gt; と &lt;code&gt;--max&lt;/code&gt; はどちらもゼロ以上の数値を受け入れます。ゼロの場合、何も出力されません。 &lt;code&gt;-N&lt;/code&gt; または &lt;code&gt;--no-newline&lt;/code&gt; の場合が指定されている場合、出力の最後に改行文字は含まれません。終了ステータス：生成された文字列が空でない場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="cd631213eafa5a59cc02430161fa5c4930279381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string replace&lt;/code&gt; is similar to &lt;code&gt;string match&lt;/code&gt; but replaces non-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.</source>
          <target state="translated">&lt;code&gt;string replace&lt;/code&gt; は &lt;code&gt;string match&lt;/code&gt; 似ていますが、重複しない一致する部分文字列を置換文字列に置き換え、結果を出力します。デフォルトでは、PATTERNは一致するリテラル文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="b0a1126fe21f179855ec4e248020911f83cdef8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \\n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string split somedelimiter&lt;/code&gt; は、 &lt;code&gt;tr somedelimiter \\n&lt;/code&gt; 代わりになります。</target>
        </trans-unit>
        <trans-unit id="bb7a2e7f64d2c2e08b4a820caeac0aba91bed9eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string split somedelimiter&lt;/code&gt; は、 &lt;code&gt;tr somedelimiter \n&lt;/code&gt; 代わりになります。</target>
        </trans-unit>
        <trans-unit id="8aa496c6349d03b4676c999aab50e066cb8b5aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split0&lt;/code&gt; splits each STRING on the zero byte (NUL). Options are the same as &lt;code&gt;string split&lt;/code&gt; except that no separator is given.</source>
          <target state="translated">&lt;code&gt;string split0&lt;/code&gt; は、各STRINGをゼロバイト（NUL）で分割します。オプションは、区切り文字が指定 &lt;code&gt;string split&lt;/code&gt; ていないことを除いて、文字列分割と同じです。</target>
        </trans-unit>
        <trans-unit id="04bcff6b42bd8f1e79e01e4a6814e48e20fbe176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split&lt;/code&gt; splits each STRING on the separator SEP, which can be an empty string. If &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; is specified, at most MAX splits are done on each STRING. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, splitting is performed right-to-left. This is useful in combination with &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt;. With &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-empty&lt;/code&gt;, empty results are excluded from consideration (e.g. &lt;code&gt;hello\n\nworld&lt;/code&gt; would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string split&lt;/code&gt; は、区切り文字SEPで各STRINGを分割します。これは空の文字列でもかまいません。場合は &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; が指定されている、ほとんどのMAX分割で各文字列に対して行われます。場合は &lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--right&lt;/code&gt; が与えられ、分割は右から左に行われます。これは、 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; と組み合わせて使用​​すると便利です。 &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--no-empty&lt;/code&gt; 、空の結果は考慮から除外されている（例えば &lt;code&gt;hello\n\nworld&lt;/code&gt; 二つの文字列ではなく3に拡大します）。終了ステータス：少なくとも1つの分割が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="eb23e8e3b2836edf4562f76805e4e7dee2577723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start of the substring can be specified with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; は、各文字列引数の部分文字列を出力します。サブストリングの開始は、 &lt;code&gt;-s&lt;/code&gt; または &lt;code&gt;--start&lt;/code&gt; の後に1から始まるインデックス値を指定して指定できます。正のインデックス値は文字列の先頭を基準とし、負のインデックス値は文字列の末尾を基準とします。デフォルトの開始値は1です。部分文字列の長さは &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--length&lt;/code&gt; で指定できます。長さが指定されていない場合、サブストリングは各STRINGの終わりまで続きます。終了ステータス：少なくとも1つの部分文字列操作が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="779848ad4cb6502c1351bd5022020a27a2991193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start/end of the substring can be specified with &lt;code&gt;-s&lt;/code&gt;/&lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt;/&lt;code&gt;--end&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length or end is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise. &lt;code&gt;--length&lt;/code&gt; is mutually exclusive with &lt;code&gt;--end&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; は、各文字列引数の部分文字列を出力します。サブストリングの開始/終了を用いて指定することができる &lt;code&gt;-s&lt;/code&gt; / &lt;code&gt;-e&lt;/code&gt; 又は &lt;code&gt;--start&lt;/code&gt; / &lt;code&gt;--end&lt;/code&gt; 1ベースのインデックス値に続きます。正のインデックス値は文字列の先頭を基準にしており、負のインデックス値は文字列の末尾を基準にしています。デフォルトの開始値は1です。部分文字列の長さは &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--length&lt;/code&gt; で指定できます。長さまたは末尾が指定されていない場合、部分文字列は各STRINGの末尾まで続きます。終了ステータス：少なくとも1つの部分文字列操作が実行された場合は0、それ以外の場合は1。 &lt;code&gt;--length&lt;/code&gt; と相互に排他的です &lt;code&gt;--end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2334b2142123bfb3db8760998428b33ddb48c83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string trim&lt;/code&gt; removes leading and trailing whitespace from each STRING. If &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--left&lt;/code&gt; is given, only leading whitespace is removed. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, only trailing whitespace is trimmed. The &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--chars&lt;/code&gt; switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string trim&lt;/code&gt; は、各STRINGから先頭と末尾の空白を削除します。場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--left&lt;/code&gt; が与えられている、唯一の主要な空白は削除されます。場合は &lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--right&lt;/code&gt; が与えられている、唯一の末尾の空白はトリムされています。 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--chars&lt;/code&gt; スイッチの文字で文字が代わりに空白を除去させます。終了ステータス：少なくとも1つの文字がトリミングされた場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="4af7b90b6c15aa5377e3c5f869a9e47d5e7c1034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string unescape&lt;/code&gt; performs the inverse of the &lt;code&gt;string escape&lt;/code&gt; command. If the string to be unescaped is not properly formatted it is ignored. For example, doing &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; will return the original string. There is no support for unescaping &lt;code&gt;--style=regex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string unescape&lt;/code&gt; は、 &lt;code&gt;string escape&lt;/code&gt; コマンドの逆を実行します。エスケープ解除する文字列が適切にフォーマットされていない場合は無視されます。たとえば、 &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; すると、元の文字列が返されます。 &lt;code&gt;--style=regex&lt;/code&gt; のエスケープ解除はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="ec537040dfbcd46a1d8e30c2f47ec1a7a8765e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string upper&lt;/code&gt; converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already uppercase.</source>
          <target state="translated">&lt;code&gt;string upper&lt;/code&gt; は、各文字列引数を大文字に変換します。終了ステータス：少なくとも1つの文字列が大文字に変換された場合は0、それ以外の場合は1。これは、 &lt;code&gt;-q&lt;/code&gt; フラグと組み合わせて、文字列がすでに大文字かどうかを簡単にテストできることを意味します。</target>
        </trans-unit>
        <trans-unit id="661aff77ace918c530880cc3272bdbd7f29220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; performs operations on strings.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; は、文字列に対して操作を実行します。</target>
        </trans-unit>
        <trans-unit id="2a88199c092063e7efbe0b5f39b511b67eb20c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; 、現在の自動提案を削除します</target>
        </trans-unit>
        <trans-unit id="3b65f5f109409d7aa183d4b719928e15f341ce89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion. Returns true if there was a suggestion to remove.</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; 、現在の自動暗示を削除します。削除する提案があった場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="83fb6c3713a11a13683e8334160327a537f8074f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT. In order to prevent suspending a shell that doesn't have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the &lt;code&gt;--force&lt;/code&gt; option is given or the shell is not interactive.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; は、SIGTSTPシグナルを送信して現在のシェルの実行を一時停止し、制御プロセスに戻ります。SIGCONTを送信すると、後で再開できます。制御プロセスを持たないシェルの中断を防ぐために、ログインシェルの場合、シェルは中断されません。 &lt;code&gt;--force&lt;/code&gt; オプションが指定されている場合、またはシェルがインタラクティブでない場合、この要件は無視されます。</target>
        </trans-unit>
        <trans-unit id="626f00d07a2e5e46b2688607ebff9eb8a60c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swap-selection-start-stop&lt;/code&gt;, go to the other end of the highlighted text without changing the selection</source>
          <target state="translated">&lt;code&gt;swap-selection-start-stop&lt;/code&gt; 、選択を変更せずに強調表示されたテキストの反対側に移動</target>
        </trans-unit>
        <trans-unit id="9156298ff90a429e917bf58c7cc5f06073a40cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; executes one of several blocks of commands, depending on whether a specified value matches one of several values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; は、指定された値がいくつかの値の1つと一致するかどうかに応じて、コマンドのいくつかのブロックの1つを実行します。 &lt;code&gt;case&lt;/code&gt; は、実行するブロックを決定するために、 &lt;code&gt;switch&lt;/code&gt; ステートメントと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="51522e2a7f62a39e69b057a1b4e46231f1a7ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; は、指定された値がいくつかのワイルドカード値の1つと等しいかどうかに応じて、コマンドのいくつかのブロックの1つを実行します。 &lt;code&gt;case&lt;/code&gt; は、実行するブロックを決定するために、 &lt;code&gt;switch&lt;/code&gt; ステートメントと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="434769b221b1b48ce5d15511a2fa7c4591850c79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tau&lt;/code&gt;. Equivalent to 2&amp;pi;, or the number of radians in a circle.</source>
          <target state="translated">&lt;code&gt;tau&lt;/code&gt; 。2&amp;pi;、または円内のラジアンの数に相当します。</target>
        </trans-unit>
        <trans-unit id="83e86983927861a95c2a328128c72990861f2579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test-feature FEATURE&lt;/code&gt; returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.</source>
          <target state="translated">&lt;code&gt;test-feature FEATURE&lt;/code&gt; は、FEATUREが有効な場合は0、無効な場合は1、認識されない場合は2を返します。</target>
        </trans-unit>
        <trans-unit id="49dea13a8691319ba78e4d5ed5960d93da35d7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; は、&lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008（POSIX.1）標準の&lt;/a&gt;サブセットを実装します。次の例外が適用されます。</target>
        </trans-unit>
        <trans-unit id="2b8c506bfcfd28dcdc9217de6bf1cde91ed842ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; は、&lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008（POSIX.1）標準の&lt;/a&gt;サブセットを実装します。次の例外が適用されます。</target>
        </trans-unit>
        <trans-unit id="4a920b6047086d1231c7f5d7fa31e31bfaec3736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; により、魚はコマンドにかかる時間を測定し、その後結果を出力します。コマンドは、単純な魚のコマンドまたはブロックにすることができます。現在、結果をリダイレクトすることはできません。</target>
        </trans-unit>
        <trans-unit id="1560f147987dc48333613d49b888555f9bd4b99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-chars&lt;/code&gt;, transpose two characters to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-chars&lt;/code&gt; 、カーソルの左側の2文字を転置</target>
        </trans-unit>
        <trans-unit id="92b2de28003baeca135430a69cac3301df211dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-words&lt;/code&gt;, transpose two words to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-words&lt;/code&gt; 、カーソルの左側の2つの単語を転置</target>
        </trans-unit>
        <trans-unit id="373dbc4e9fdbf8eb3bea04bfb57dda742ec7cfea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;../index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; は、魚のイベント配信フレームワークのラッパーです。これは、POSIXシェルとの下位互換性のために存在します。その他の用途では、&lt;a href=&quot;../index#event&quot;&gt;イベントハンドラー&lt;/a&gt;を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f5ca8c4e095ac239e34f8594ebb4ab87d097fe66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; は、魚イベント配信フレームワークのラッパーです。POSIXシェルとの下位互換性のために存在しています。その他の用途では、&lt;a href=&quot;index#event&quot;&gt;イベントハンドラー&lt;/a&gt;を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0744337fd5341ea7b8967ff13d484eb039621a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; sets the exit status to 0.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; は、終了ステータスを0に設定します。</target>
        </trans-unit>
        <trans-unit id="2d6b937046bc04378a6f19f7580563228ae32462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit -Hs 64&lt;/code&gt; sets the hard stack size limit to 64 kB.</source>
          <target state="translated">&lt;code&gt;ulimit -Hs 64&lt;/code&gt; は、ハードスタックサイズの制限を64 kBに設定します。</target>
        </trans-unit>
        <trans-unit id="09823b46aa54108856d9cfe97a6e2d6654edeb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; also accepts the following switches that determine what type of limit to set:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; は、設定する制限のタイプを決定する以下のスイッチも受け入れます。</target>
        </trans-unit>
        <trans-unit id="27494793012a34dbc727255f14091cec8673cfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; ビルトインは、シェルとそれによって生成されたプロセスのリソース使用制限を設定または出力します。新しい制限値を省略すると、リソースの現在の制限値が出力されます。それ以外の場合、指定された制限は新しい値に設定されます。</target>
        </trans-unit>
        <trans-unit id="ba994fe9b705196c9308e7d1e704c2484c6530d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; は、シェルとそれによって生成されるプロセスのリソース使用制限を設定または出力します。新しい制限値を省略すると、リソースの制限の現在の値が出力されます。それ以外の場合は、指定された制限が新しい値に設定されます。</target>
        </trans-unit>
        <trans-unit id="914a332a706ed930f92dfa2f893c31d61f8829c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask 177&lt;/code&gt; or &lt;code&gt;umask u=rw&lt;/code&gt; sets the file creation mask to read and write for the owner and no permissions at all for any other users.</source>
          <target state="translated">&lt;code&gt;umask 177&lt;/code&gt; または &lt;code&gt;umask u=rw&lt;/code&gt; は、ファイル作成マスクを所有者に対して読み取りおよび書き込みに設定し、他のユーザーにはまったくアクセス権を設定しません。</target>
        </trans-unit>
        <trans-unit id="ea8bdfdd73550087a9e5f4d0d74f501ad65d8378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt; displays and manipulates the &quot;umask&quot;, or file creation mode mask, which is used to restrict the default access to files.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; は、「umask」、つまりファイルへのデフォルトのアクセスを制限するために使用されるファイル作成モードマスクを表示および操作します。</target>
        </trans-unit>
        <trans-unit id="d5b91d0960d8706ccf917682f946da0ed42fef50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt; function. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 、現在のファイル作成マスク。umask変数を変更するための推奨される方法は、&lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt;関数を使用することです。umaskを無効な値に設定しようとすると、常に失敗します。</target>
        </trans-unit>
        <trans-unit id="7b47f786d139724d5a34193ba1786452223e8ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;commands#umask&quot;&gt;umask function&lt;/a&gt;. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 現在のファイル作成マスクであるumask。umask変数を変更する好ましい方法は、&lt;a href=&quot;commands#umask&quot;&gt;umask関数を使用すること&lt;/a&gt;です。umaskを無効な値に設定しようとすると、常に失敗します。</target>
        </trans-unit>
        <trans-unit id="5a44b3a0a2ea21d060782d7de0252f821b01cdde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;undo&lt;/code&gt; and &lt;code&gt;redo&lt;/code&gt;, revert or redo the most recent edits on the command line</source>
          <target state="translated">&lt;code&gt;undo&lt;/code&gt; コマンドラインでの最新の編集を元に戻し、 &lt;code&gt;redo&lt;/code&gt; 、元に戻す、またはやり直します</target>
        </trans-unit>
        <trans-unit id="e11ddb9d62a747071c14ddc0257484f36e4d0db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up-line&lt;/code&gt;, move up one line</source>
          <target state="translated">&lt;code&gt;up-line&lt;/code&gt; 、1行上に移動</target>
        </trans-unit>
        <trans-unit id="67c1b87ec154fe2bec25c34f88af59a7fa3c8771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upcase-word&lt;/code&gt;, make the current word uppercase</source>
          <target state="translated">&lt;code&gt;upcase-word&lt;/code&gt; 、現在の単語を大文字にする</target>
        </trans-unit>
        <trans-unit id="57ccf04032406001bdc11a8189ad69fca2fb8bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH array</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; は、PATH配列の3番目の要素を編集します</target>
        </trans-unit>
        <trans-unit id="65486428e36108a03da6e3498a15ce370423fc29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH list</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; は、PATHリストの3番目の要素を編集します</target>
        </trans-unit>
        <trans-unit id="88c39c66df63979d68b40cdf38c535e8336f488a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual array elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; は、環境変数の値をインタラクティブに編集するために使用されます。配列変数は全体として &lt;code&gt;vared&lt;/code&gt; を使用して編集できませんが、個々の配列要素は編集できます。</target>
        </trans-unit>
        <trans-unit id="a2ed2d545022b6b47095d8582bee9cbd898c7fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual list elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; は、環境変数の値をインタラクティブに編集するために使用されます。配列変数全体は &lt;code&gt;vared&lt;/code&gt; を使用して編集できませんが、個々のリスト要素は編集できます。</target>
        </trans-unit>
        <trans-unit id="9862f5e93904059a6b32007b38450efce85a2073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the version of the currently running fish (also available as &lt;code&gt;FISH_VERSION&lt;/code&gt; for backward compatibility).</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; 、現在実行中の魚のバージョン（下位互換性のために &lt;code&gt;FISH_VERSION&lt;/code&gt; としても利用可能）。</target>
        </trans-unit>
        <trans-unit id="63fa20183bc82ef05dd53eaea0bdba2083b42311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; waits for child jobs to complete.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; 子ジョブが完了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="813fdc779468e7aa9ef0139c7dc0dcbe8dce7527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeatedly executes &lt;code&gt;CONDITION&lt;/code&gt;, and if the exit status is 0, then executes &lt;code&gt;COMMANDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; は &lt;code&gt;CONDITION&lt;/code&gt; を繰り返し実行し、終了ステータスが0の場合は &lt;code&gt;COMMANDS&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4b917ba7af9605ab4fb8f9df237fdcbdd49966d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; works like a repeated &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;場合&lt;/a&gt;、繰り返されるように機能します。</target>
        </trans-unit>
        <trans-unit id="3777774e876be438277e734434a6c0c8157ad52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x-&lt;/code&gt; is not valid since there is no long flag name and therefore the short flag, &lt;code&gt;-x&lt;/code&gt;, has to be usable.</source>
          <target state="translated">&lt;code&gt;x-&lt;/code&gt; 長いフラグ名がないため、x-は無効です。したがって、短いフラグ &lt;code&gt;-x&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5fd5ec35b0142154e7c9e8643d553640b56bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean can can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;-x&lt;/code&gt; のみが有効であることを意味します。ブール値で、複数回使用できます。表示されている場合、 &lt;code&gt;_flag_x&lt;/code&gt; は、フラグが表示された回数のカウントに設定されます。</target>
        </trans-unit>
        <trans-unit id="3ee9d686d28ba49895201840c47e53da39de4e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean that can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;-x&lt;/code&gt; のみが有効であることを意味します。複数回使用できるブール値です。表示された場合、 &lt;code&gt;_flag_x&lt;/code&gt; はフラグが表示された回数のカウントに設定されます。</target>
        </trans-unit>
        <trans-unit id="21ede97712b0a6930815ab06e47ca99f9faf164c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x=&lt;/code&gt;, &lt;code&gt;x=?&lt;/code&gt;, and &lt;code&gt;x=+&lt;/code&gt; are similar to the n/name examples above but there is no long flag alternative to the short flag &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x=&lt;/code&gt; 、 &lt;code&gt;x=?&lt;/code&gt; 、および &lt;code&gt;x=+&lt;/code&gt; は上記のn / nameの例に似ていますが、短いフラグ &lt;code&gt;-x&lt;/code&gt; の代わりに長いフラグはありません。</target>
        </trans-unit>
        <trans-unit id="f0527623453636ac5982213b0815cf8b199abd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank-pop&lt;/code&gt;, rotate to the previous entry of the killring</source>
          <target state="translated">&lt;code&gt;yank-pop&lt;/code&gt; 、killringの前のエントリに回転</target>
        </trans-unit>
        <trans-unit id="6b2c2003ee77d278bc6a300e349540b9f1fcec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt;, insert the latest entry of the killring into the buffer</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; 、killringの最新のエントリをバッファに挿入します</target>
        </trans-unit>
        <trans-unit id="d38e08cea2004c22d96c7648bde8064ec9710a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,m}&lt;/code&gt; at least n, no more than m.</source>
          <target state="translated">&lt;code&gt;{n,m}&lt;/code&gt; 少なくともn、m以下。</target>
        </trans-unit>
        <trans-unit id="6754034e24ab614bfd421eac3a73529e0acbdf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,}&lt;/code&gt; n or more</source>
          <target state="translated">&lt;code&gt;{n,}&lt;/code&gt; n以上</target>
        </trans-unit>
        <trans-unit id="a365c3492a087f6ec4c03c8376dcb30c6386fb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n}&lt;/code&gt; to exactly n (where n is a number)</source>
          <target state="translated">&lt;code&gt;{n}&lt;/code&gt; から正確にn（nは数値）</target>
        </trans-unit>
        <trans-unit id="707c3563364628d29b1994c70cf28e906025d3d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; is &quot;alternation&quot;, i.e. the &quot;or&quot;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; 「オルタネーション」、つまり「または」です。</target>
        </trans-unit>
        <trans-unit id="ceaacb2435257875de28974f5bc3261889295996" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.*&lt;/code&gt; matches all hidden files (also known as &quot;dotfiles&quot;) and directories in your home directory.</source>
          <target state="translated">&lt;code&gt;~/.*&lt;/code&gt; すべての隠しファイル（「ドットファイル」とも呼ばれます）とホームディレクトリ内のディレクトリに一致します。</target>
        </trans-unit>
        <trans-unit id="df0f52ee032449bf7212b4c3984d956c6fa44267" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;SOME_VAR=1 command&lt;/code&gt; produces an error: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;SOME_VAR=1 command&lt;/code&gt; はエラーを生成します： &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt; 。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0da3c08b202353af950bee5219ca327f11f72cd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; move the cursor one word left or right, or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) accepts the first word in the suggestion.</source>
          <target state="translated">&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;larr;&lt;/b&gt;と&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;コマンドラインが空である場合は、1つの単語は、ディレクトリ履歴に左または右、または前進/後方にカーソルを移動します。カーソルが行の終わりに既にあり、自己暗示は、利用可能である場合&lt;em&gt;アルト&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;（又は&lt;em&gt;アルト&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt;）提案の最初の単語を受け付けます。</target>
        </trans-unit>
        <trans-unit id="41668896a709e48d38407c24cdaae2f37bd2e2d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;と&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt;検索が開始される前に、前/カーソルの下にトークンを含む次のトークンのためのコマンド履歴を検索します。検索の開始時にコマンドラインがトークン上になかった場合、すべてのトークンが一致します。履歴検索の詳細については、&lt;a href=&quot;#history&quot;&gt;履歴&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd002a4a5d9f181df1139416f359b0c0b1982d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like.</source>
          <target state="translated">&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;最後に実行された行の最後の引数から始めて、個々の引数を思い出します。1回のプレスで「！$」が置き換えられ、その後のプレスで「!!：4」が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="31b5b5642ff4d16559c25c2eec15dc84d9c7c38a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;c&lt;/b&gt; capitalizes the current word.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;c&lt;/b&gt;は現在の単語を大文字にします。</target>
        </trans-unit>
        <trans-unit id="8c08d7cecc389da8fd667cb3de1b66142f66dbc0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;d&lt;/b&gt; moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;d&lt;/b&gt;は次の単語を&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ba939795dc763dc37424d264df584c3dc1414201" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt; edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt;外部エディターで現在のコマンドラインを編集します。エディターは、 &lt;code&gt;$VISUAL&lt;/code&gt; または &lt;code&gt;$EDITOR&lt;/code&gt; 変数の最初に使用可能な変数から選択されます。</target>
        </trans-unit>
        <trans-unit id="8d19663ab96f42c66ebcd8b4711cc5775c0115de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;h&lt;/b&gt; (or &lt;b&gt;F1&lt;/b&gt;) shows the manual page for the current command, if one exists.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;h&lt;/b&gt;（または&lt;b&gt;F1&lt;/b&gt;）は、現在のコマンド（存在する場合）のマニュアルページを表示します。</target>
        </trans-unit>
        <trans-unit id="6fe0d9f367a7b1fb62d59310e866cb7000917983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;l&lt;/b&gt; lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;l&lt;/b&gt;は、カーソルがディレクトリ引数の上にある場合を除き、現在のディレクトリの内容を一覧表示します。その場合、そのディレクトリの内容が一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="ac4ab1e3b2a18333f6469ab62c6774ab20358dd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;p&lt;/b&gt; adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;p&lt;/b&gt;は文字列 ' &lt;code&gt;| less;&lt;/code&gt; 追加します もっと少なく; 'カーソルの下のジョブの最後まで。その結果、コマンドの出力がページングされます。</target>
        </trans-unit>
        <trans-unit id="136abcdd3926f6f6917e785f3c9b3de852a583e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two words</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt;は最後の2つの単語を転置します</target>
        </trans-unit>
        <trans-unit id="6b4f3c9f30c412c35376eb5c0b053bbecc930222" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;u&lt;/b&gt; makes the current word uppercase.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;u&lt;/b&gt;は現在の単語を大文字にします。</target>
        </trans-unit>
        <trans-unit id="f055c4fc1257b63bfc385501bfbaf929ca352490" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;v&lt;/b&gt; Same as &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;v &lt;/b&gt;&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;eと&lt;/b&gt;同じ。</target>
        </trans-unit>
        <trans-unit id="5781eac00f106e823a16702f30c3a1c598e21b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; prints a short description of the command under the cursor.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;は、カーソルの下にコマンドの短い説明を出力します。</target>
        </trans-unit>
        <trans-unit id="17e2f8a79bdc960577f4eeaedc12d0c21a945731" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; cancels the entire line.</source>
          <target state="translated">&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Cは、&lt;/b&gt;行全体をキャンセルします。</target>
        </trans-unit>
        <trans-unit id="9333a2ffd2f21f466d57fc6d1e5b4d1a978b95a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; delete one character to the right of the cursor. If the command line is empty, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; will exit fish.</source>
          <target state="translated">&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Dは、&lt;/b&gt;カーソルの右にある1つの文字を削除します。コマンドラインが空の場合、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;は魚を終了します。</target>
        </trans-unit>
        <trans-unit id="bb14070b99b4a045f1889b39bfeae27b8794ec9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt;は、コンテンツをカーソルから行末まで&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="04ddb78416f34126599d6fdf7033f85b757d8ea0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;L&lt;/b&gt; clears and repaints the screen.</source>
          <target state="translated">&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Lの&lt;/b&gt;クリアと再描画画面。</target>
        </trans-unit>
        <trans-unit id="eec641fe659922171462b212fb4e12bfac800762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;U&lt;/b&gt; moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;U&lt;/b&gt;は、コンテンツを行の先頭からカーソル、&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="959eb883117dacfd136a241f1bf9b0d08b63da44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;W&lt;/b&gt; moves the previous path component (everything up to the previous &quot;/&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;W&lt;/b&gt;は、前のパスコンポーネント（前の「/」までのすべて）を&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4437b353083b50d06c142c5629d09aa0198b91c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; copies the current buffer to the system's clipboard, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; inserts the clipboard contents.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;は現在のバッファーをシステムのクリップボードにコピーし、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt;はクリップボードの内容を挿入します。</target>
        </trans-unit>
        <trans-unit id="5aed52702667fe63b8fc8764b7596443d6fa67f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two characters</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt;は最後の2文字を転置します</target>
        </trans-unit>
        <trans-unit id="2a3529141c90e88bccb3cffb04eaf5e452963437" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt;は行末で&lt;a href=&quot;#vi-mode-insert&quot;&gt;挿入モード&lt;/a&gt;に入ります。</target>
        </trans-unit>
        <trans-unit id="848bb77d0284135b4b11d0def92f1a7b33558c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;は、現在のカーソル位置の後ろのテキストを削除し、&lt;a href=&quot;#killring&quot;&gt;killringに&lt;/a&gt;移動します。</target>
        </trans-unit>
        <trans-unit id="0aa350769e38ad587d4204af5750f62efcffd698" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;black&lt;/em&gt;, &lt;em&gt;red&lt;/em&gt;, &lt;em&gt;green&lt;/em&gt;, &lt;em&gt;yellow&lt;/em&gt;, &lt;em&gt;blue&lt;/em&gt;, &lt;em&gt;magenta&lt;/em&gt;, &lt;em&gt;cyan&lt;/em&gt;, &lt;em&gt;white&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;黒&lt;/em&gt;、&lt;em&gt;赤&lt;/em&gt;、&lt;em&gt;緑&lt;/em&gt;、&lt;em&gt;黄&lt;/em&gt;、&lt;em&gt;青&lt;/em&gt;、&lt;em&gt;マゼンタ&lt;/em&gt;、&lt;em&gt;シアン&lt;/em&gt;、&lt;em&gt;白&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f06a4164895f4acf75e4fc05849a9f1080eb613" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;brblack&lt;/em&gt;, &lt;em&gt;brred&lt;/em&gt;, &lt;em&gt;brgreen&lt;/em&gt;, &lt;em&gt;bryellow&lt;/em&gt;, &lt;em&gt;brblue&lt;/em&gt;, &lt;em&gt;brmagenta&lt;/em&gt;, &lt;em&gt;brcyan&lt;/em&gt;, &lt;em&gt;brwhite&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;brblack&lt;/em&gt;、&lt;em&gt;brred&lt;/em&gt;、&lt;em&gt;brgreen&lt;/em&gt;、&lt;em&gt;bryellow&lt;/em&gt;、&lt;em&gt;brblue&lt;/em&gt;、&lt;em&gt;brmagenta&lt;/em&gt;、&lt;em&gt;brcyan&lt;/em&gt;、&lt;em&gt;brwhite&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0e34719714f70ac8df5dca2fb1e4e47f8250675d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;is&lt;/em&gt; newline (&lt;code&gt;n&lt;/code&gt;).</source>
          <target state="translated">&lt;em&gt;は&lt;/em&gt;改行（ &lt;code&gt;n&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="8a866bff90464a4a66a94586a7ec2c25faa202e9" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;is&lt;/em&gt; tab,</source>
          <target state="translated">&lt;em&gt;ある&lt;/em&gt;タブでは、</target>
        </trans-unit>
        <trans-unit id="5a2c76dd8c90b325c080eb4473c2d0c686420569" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Argument&lt;/strong&gt;: A parameter given to a command.</source>
          <target state="translated">&lt;strong&gt;引数&lt;/strong&gt;：コマンドに指定されたパラメーター。</target>
        </trans-unit>
        <trans-unit id="0a113d0ba1dd61b1680e975a9d0eeac43f4de2cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Builtin&lt;/strong&gt;: A command that is implemented by the shell. Builtins are so closely tied to the operation of the shell that it is impossible to implement them as external commands.</source>
          <target state="translated">&lt;strong&gt;組み込み&lt;/strong&gt;：シェルによって実装されるコマンド。ビルトインはシェルの操作と密接に関連しているため、外部コマンドとして実装することはできません。</target>
        </trans-unit>
        <trans-unit id="62ac51490e0f1b9926221a2d40ba9111daed635b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Command&lt;/strong&gt;: A program that the shell can run, or more specifically an external program that the shell runs in another process.</source>
          <target state="translated">&lt;strong&gt;コマンド&lt;/strong&gt;：シェルが実行できるプログラム、より具体的には、シェルが別のプロセスで実行する外部プログラム。</target>
        </trans-unit>
        <trans-unit id="883f71de63b1afbf7927d4eb85ae362d31832e7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: New &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="translated">&lt;strong&gt;簡単なスクリプト&lt;/strong&gt;：新しい&lt;a href=&quot;#functions&quot;&gt;機能&lt;/a&gt;をその場で追加できます。構文は習得と使用が簡単です。</target>
        </trans-unit>
        <trans-unit id="5aaf073a1b8f279587c77fcd145e5e12a28d0f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: new &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="translated">&lt;strong&gt;簡単なスクリプト&lt;/strong&gt;：新しい&lt;a href=&quot;#functions&quot;&gt;関数&lt;/a&gt;をその場で追加できます。構文は習得と使用が簡単です。</target>
        </trans-unit>
        <trans-unit id="99577a424c592bdc94d7b46a5517ada89ca7d5b3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;Syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="translated">&lt;strong&gt;広範なUI&lt;/strong&gt;：&lt;a href=&quot;#syntax-highlighting&quot;&gt;構文の強調表示&lt;/a&gt;、&lt;a href=&quot;#autosuggestions&quot;&gt;自動暗示&lt;/a&gt;、&lt;a href=&quot;#tab-completion&quot;&gt;タブ補完&lt;/a&gt;、およびナビゲートおよびフィルタリングできる選択リスト。</target>
        </trans-unit>
        <trans-unit id="4df60123802c7d8d13f9b6713ff515d5434a37f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="translated">&lt;strong&gt;広範なUI&lt;/strong&gt;：&lt;a href=&quot;#syntax-highlighting&quot;&gt;構文の強調表示&lt;/a&gt;、&lt;a href=&quot;#autosuggestions&quot;&gt;自動暗示&lt;/a&gt;、&lt;a href=&quot;#tab-completion&quot;&gt;タブ補完&lt;/a&gt;、およびナビゲートおよびフィルタリングできる選択リスト。</target>
        </trans-unit>
        <trans-unit id="0a439bd1261a1ef67f3816a2ff0acb25eab61784" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Function&lt;/strong&gt;: A block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple simple commands into one more advanced command.</source>
          <target state="translated">&lt;strong&gt;機能&lt;/strong&gt;：単一のコマンドであるかのように呼び出すことができるコマンドのブロック。関数を使用することにより、複数の単純なコマンドを1つのより高度なコマンドにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="6cafc45a94f4662a9df10981e932963cc6ad8531" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Job&lt;/strong&gt;: A running pipeline or command.</source>
          <target state="translated">&lt;strong&gt;ジョブ&lt;/strong&gt;：実行中のパイプラインまたはコマンド。</target>
        </trans-unit>
        <trans-unit id="a4735f2bc1b1f6cc44fc36a9270fa8d0bebad687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No configuration needed&lt;/strong&gt;: fish is designed to be ready to use immediately, without requiring extensive configuration.</source>
          <target state="translated">&lt;strong&gt;構成は必要ありません&lt;/strong&gt;：魚は、大規模な構成を必要とせずに、すぐに使用できるように設計されています。</target>
        </trans-unit>
        <trans-unit id="25f7db0c5b5b21f6ffe9301ae126e17d9aef2f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pipeline&lt;/strong&gt;: A set of commands strung together so that the output of one command is the input of the next command.</source>
          <target state="translated">&lt;strong&gt;パイプライン&lt;/strong&gt;：1つのコマンドの出力が次のコマンドの入力になるように、一連のコマンドをつなぎ合わせます。</target>
        </trans-unit>
        <trans-unit id="d4ece3509a17de7f5358483bc8c57d591c77a8d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Redirection&lt;/strong&gt;: An operation that changes one of the input or output streams associated with a job.</source>
          <target state="translated">&lt;strong&gt;リダイレクト&lt;/strong&gt;：ジョブに関連付けられた入力ストリームまたは出力ストリームの1つを変更する操作。</target>
        </trans-unit>
        <trans-unit id="c4e72de08626d94c9beab15c6c8ae1dae05b4cef" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Switch&lt;/strong&gt; or &lt;strong&gt;Option&lt;/strong&gt;: A special kind of argument that alters the behavior of a command. A switch almost always begins with one or two hyphens.</source>
          <target state="translated">&lt;strong&gt;スイッチ&lt;/strong&gt;または&lt;strong&gt;オプション&lt;/strong&gt;：コマンドの動作を変更する特別な種類の引数。ほとんどの場合、スイッチは1つまたは2つのハイフンで始まります。</target>
        </trans-unit>
        <trans-unit id="c1761f0b1ba5b43d7b93024d944cddd83977bbd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argument&lt;/strong&gt; a parameter given to a command</source>
          <target state="translated">&lt;strong&gt;引数&lt;/strong&gt;コマンドに与えられたパラメータ</target>
        </trans-unit>
        <trans-unit id="f9abc342512c31331a993f0014b546a67fa5db37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;builtin&lt;/strong&gt; a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シェルに実装されているコマンドが&lt;strong&gt;組み込ま&lt;/strong&gt;れています。ビルトインはシェルと密接に関連しているため、外部コマンドとして実装することはできません。</target>
        </trans-unit>
        <trans-unit id="f166fa76e55d41c05140d9c66e33482752388e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt; a program that the shell can run. In another sense also specifically an external command (i.e. neither a function or builtin).</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シェルが実行できるプログラムを&lt;strong&gt;コマンド&lt;/strong&gt;します。別の意味では、具体的には外部コマンド（つまり、関数でも組み込みコマンドでもない）です。</target>
        </trans-unit>
        <trans-unit id="b757809536a26ee5fe7cf05aa97874be3e9ec7f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt; a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;単一のコマンドであるかのように呼び出すことができるコマンドのブロックを&lt;strong&gt;機能さ&lt;/strong&gt;せます。関数を使用することにより、複数の小さなコマンドを1つのより高度なコマンドにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="60a92d1d7691db21d94fa52b5efe10f9c00a98a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;job&lt;/strong&gt; a running pipeline or command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;実行中のパイプラインまたはコマンドを&lt;strong&gt;ジョブ&lt;/strong&gt;します</target>
        </trans-unit>
        <trans-unit id="33e34e3f380b965910f59129f13ec1cc926b1a27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pipeline&lt;/strong&gt; a set of commands stringed together so that the output of one command is the input of the next command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;1つのコマンドの出力が次のコマンドの入力になるように、一連のコマンドを&lt;strong&gt;パイプライン処理&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="44d28d2c07c14f9f63ac8b103318575395a8d8f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;redirection&lt;/strong&gt; an operation that changes one of the input/output streams associated with a job</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ジョブに関連付けられた入力/出力ストリームの1つを変更する操作の&lt;strong&gt;リダイレクト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e94007d359708c28c1c1effb3bd68983f4f0862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch&lt;/strong&gt; a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コマンドの動作を変更するコマンドへの引数として送信される特別なフラグを&lt;strong&gt;切り替え&lt;/strong&gt;ます。ほとんどの場合、スイッチは1つまたは2つのハイフンで始まります。</target>
        </trans-unit>
        <trans-unit id="58ef9d5fc414a372d364bba5d463086a74cd1e79" translate="yes" xml:space="preserve">
          <source>=&amp;gt; /private/</source>
          <target state="translated">=&amp;gt; / private /</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="a6662c1906a30b4e8bf82f57ab26a17bb6d95ee1" translate="yes" xml:space="preserve">
          <source>A &quot;pager&quot; here is a program that takes output and &quot;paginates&quot; it. &lt;code&gt;less&lt;/code&gt; doesn't just do pages, it allows arbitrary scrolling (even back!).</source>
          <target state="translated">ここでの「ポケットベル」は、出力を受け取り、それを「ページング」するプログラムです。 &lt;code&gt;less&lt;/code&gt; はページを実行するだけでなく、任意のスクロールを可能にします（戻ることもできます）。</target>
        </trans-unit>
        <trans-unit id="fba3fd4e3fd6608dd7f90bc1b5ab21add9a24490" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command else &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a '#' to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;/&lt;/code&gt; ショートフラグは、他の誰かがあなたのコマンドを呼び出すことにより、使用できる場合 &lt;code&gt;-&lt;/code&gt; それは有効な短いフラグとして公開すべきではない場合。長いフラグ名がない場合、これらの文字は省略してください。また、「＃」を指定して、短いフラグ名と長いフラグ名を使用でき、値を暗黙のintとして指定できます。つまり、 &lt;code&gt;-NNN&lt;/code&gt; 形式のフラグ。</target>
        </trans-unit>
        <trans-unit id="7198b525f0714279660d3b850cc70c2393d6d32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fish&lt;/code&gt; function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;code&gt;function&lt;/code&gt; builtin:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 機能は、オプションの引数をとることができ、コマンドのリストです。他のシェルとは異なり、引数は &lt;code&gt;$1&lt;/code&gt; ような「番号付き変数」ではなく、単一のリスト &lt;code&gt;$argv&lt;/code&gt; 渡されます。関数を作成するには、組み込み関数を使用し &lt;code&gt;function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3acb795caddb65d05651f6b5aacfc87a8acfa50a" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If &lt;code&gt;PID&lt;/code&gt; is specified, the jobs containing the specified process IDs are put in the background.</source>
          <target state="translated">バックグラウンドジョブは魚と同時に実行され、キーボードにアクセスできません。ジョブが指定されていない場合、最後に使用されるジョブがバックグラウンドに配置されます。 &lt;code&gt;PID&lt;/code&gt; が指定されている場合、指定されたプロセスIDを含むジョブはバックグラウンドに置かれます。</target>
        </trans-unit>
        <trans-unit id="19bcfbaa8447e6df7d2da91db70a782c0bf63572" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.</source>
          <target state="translated">バックグラウンドジョブは、FISHと同時に実行され、キーボードにはアクセスできません。ジョブが指定されていない場合は、最後に使用されるジョブがバックグラウンドに置かれます。PIDが指定された場合は、指定されたプロセスグループIDのジョブがバックグラウンドに置かれます。</target>
        </trans-unit>
        <trans-unit id="b46aed84b0ed848ddd07f44ad7751712530b525e" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) is restricted to the rules for valid variable names.</source>
          <target state="translated">バインドモード名（例： &lt;code&gt;bind -m abc ...&lt;/code&gt; ）は、有効な変数名のルールに制限されています。</target>
        </trans-unit>
        <trans-unit id="c4f32c51c430035cac728bdf7bc9ad4c0f17d608" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) must be a valid variable name.</source>
          <target state="translated">バインドモード名（例： &lt;code&gt;bind -m abc ...&lt;/code&gt; ）は有効な変数名である必要があります。</target>
        </trans-unit>
        <trans-unit id="9b580f7fbca87c3708e0299e0e01e7d18f311f8d" translate="yes" xml:space="preserve">
          <source>A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like &lt;code&gt;and&lt;/code&gt;.</source>
          <target state="translated">ブロックは、新しい変数のスコープを導入し、グループとしてのコマンドのセットの入力または出力のリダイレクトなどの条件付きコマンドを使用する場合の優先順位を指定することができる &lt;code&gt;and&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="221743bb3156c75a9da83c1a7dacbf3cffddec98" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter.</source>
          <target state="translated">中括弧で囲まれたカンマ区切りの文字のリストは、リストの各要素が新しいパラメータになるように展開されます。</target>
        </trans-unit>
        <trans-unit id="b1251b9c7f3a0ecfe4cfcd8762e368b829d54d22" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="translated">中括弧で囲まれたカンマ区切りの文字のリストは、リストの各要素が新しいパラメータになるように展開されます。これは、入力の手間を省いたり、変数名を周囲のテキストから分離したりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="18819280931565e1e540c3948c1068287f296514" translate="yes" xml:space="preserve">
          <source>A command is executed by writing the name of the command followed by any arguments.</source>
          <target state="translated">コマンドは、コマンド名の後に任意の引数を記述することで実行されます。</target>
        </trans-unit>
        <trans-unit id="ef0596789e19cf7d157b82b21b7a04276de1271d" translate="yes" xml:space="preserve">
          <source>A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:</source>
          <target state="translated">コマンドが存在しない、または実行できないファイルを参照しているため、コマンドが無効になっている場合があります。コマンドが有効になると、そのコマンドは別の色で表示されます。</target>
        </trans-unit>
        <trans-unit id="7889a1f8efa9424d9ad0d196f8208854866a152e" translate="yes" xml:space="preserve">
          <source>A common comparison is with $status:</source>
          <target state="translated">よく比較されるのは、$statusとの比較です。</target>
        </trans-unit>
        <trans-unit id="0ab1d9ac994221a7fc24fe83fee3534ae7e7edc9" translate="yes" xml:space="preserve">
          <source>A common idiom is to capture the output of a command in a variable:</source>
          <target state="translated">コマンドの出力を変数に取り込むのが一般的な慣用句です。</target>
        </trans-unit>
        <trans-unit id="e5fc3140c2546b6e6a23e2f80c44a655ee78ea6c" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own completions, usually &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable);</source>
          <target state="translated">エンドユーザーが自分の補完を保持するためのディレクトリ、通常は &lt;code&gt;~/.config/fish/completions&lt;/code&gt; （ &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 環境変数によって制御されます）。</target>
        </trans-unit>
        <trans-unit id="65baeff5e625e88bc63f2d15091644216f3ec2bb" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own functions, usually &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable).</source>
          <target state="translated">エンドユーザーが独自の機能を保持するためのディレクトリ。通常は &lt;code&gt;~/.config/fish/functions&lt;/code&gt; （ &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 環境変数によって制御されます）。</target>
        </trans-unit>
        <trans-unit id="859d016958d7758044bcb3a91d192638e99bef83" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install completions for all users on the system, usually &lt;code&gt;/etc/fish/completions&lt;/code&gt;;</source>
          <target state="translated">システム管理者がシステム上のすべてのユーザーの補完をインストールするためのディレクトリ（通常は &lt;code&gt;/etc/fish/completions&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="108785695c3e86a9a6e52e8824798deb67cc4081" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt;).</source>
          <target state="translated">システム管理者がシステム上のすべてのユーザーの関数をインストールするためのディレクトリ。通常は &lt;code&gt;/etc/fish/functions&lt;/code&gt; （実際には &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="641e45d215c27568a98d7ad513ca06236cc4ce30" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt;.</source>
          <target state="translated">システム管理者がシステム上のすべてのユーザーに機能をインストールするためのディレクトリ（通常は &lt;code&gt;/etc/fish/functions&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="9f5e2984dcf6e5df1ad339573ada9e5723fb0b37" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own completions for their software, usually &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">サードパーティソフトウェアベンダーがソフトウェアの完成品を出荷するためのディレクトリ（通常は &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="5e8075c8426f4f6e374491e133779cfa809fd782" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own functions for their software, usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">サードパーティソフトウェアベンダーがソフトウェアの独自の機能を出荷するためのディレクトリ。通常は &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a44f52824482af64d09602d2bfcb5e4719f63ad2" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For an introduction to the concept of shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">ドル記号とそれに続く文字列は、同じ名前のシェル変数の値に展開されます。シェル変数の概念の概要については、&lt;a href=&quot;#variables&quot;&gt;シェル変数の&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ca6eed9ce238df03667fd3003cea2a936f38aa05" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">ドル記号とそれに続く文字列は、同じ名前のシェル変数の値に展開されます。シェル変数の詳細については、「&lt;a href=&quot;#variables&quot;&gt;シェル変数」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a99436ba2e5d329112af2b584fd421fbf3f42c7d" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">より高速な方法は、 &lt;code&gt;$PATH&lt;/code&gt; 自動的に追加される、 &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut-universal&quot;&gt;ユニバーサル変数&lt;/a&gt;を変更することです。たとえば、 &lt;code&gt;/usr/local/bin&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; に永続的に追加するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="d2d19574b46bfc9315dc6a4268de0f13c74f87d0" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut_universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">より速い方法は、 &lt;code&gt;$PATH&lt;/code&gt; 前に自動的に付加される$ &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut_universal&quot;&gt;ユニバーサル変数&lt;/a&gt;を変更することです。たとえば、 &lt;code&gt;/usr/local/bin&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; に永続的に追加するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="b85f90d83e9a1056a1b7da7455ba1c119e13b404" translate="yes" xml:space="preserve">
          <source>A faster way is to use the &lt;a href=&quot;cmds/fish_add_path#cmd-fish-add-path&quot;&gt;fish_add_path&lt;/a&gt; function, which adds given directories to the path if they aren't already included. It does this by modifying the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">より高速な方法は、&lt;a href=&quot;cmds/fish_add_path#cmd-fish-add-path&quot;&gt;fish_add_path&lt;/a&gt;関数を使用することです。この関数は、指定されたディレクトリがまだ含まれていない場合は、パスに追加します。これは、 &lt;code&gt;$PATH&lt;/code&gt; 前に自動的に追加される$ &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut-universal&quot;&gt;ユニバーサル変数を&lt;/a&gt;変更することによって行われます。たとえば、 &lt;code&gt;/usr/local/bin&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; に永続的に追加するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="ceec61da03fba72e62b6265e8da899ee3527c4d0" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file.</source>
          <target state="translated">ファイル名です。指定したファイルに出力が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="bac36bb2563051c8106b324a3b458e2a8ae8b7bc" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file. Often &lt;code&gt;&amp;gt;/dev/null&lt;/code&gt; to silence output by writing it to the special &quot;sinkhole&quot; file.</source>
          <target state="translated">ファイル名。出力は指定されたファイルに書き込まれます。多くの場合、 &lt;code&gt;&amp;gt;/dev/null&lt;/code&gt; は、特別な「陥没穴」ファイルに書き込むことによって出力を無音にします。</target>
        </trans-unit>
        <trans-unit id="b5a90ec79fdc93eb88a032045db8f08f69739be0" translate="yes" xml:space="preserve">
          <source>A fish function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin:</source>
          <target state="translated">fish関数はコマンドのリストであり、オプションで引数を取ることができます。他のシェルとは異なり、引数は &lt;code&gt;$1&lt;/code&gt; ような「番号付き変数」ではなく、単一のリスト &lt;code&gt;$argv&lt;/code&gt; 渡されます。関数を作成するには、組み込みの関数を使用し&lt;a href=&quot;cmds/function#cmd-function&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3d33de98068774700d9110cea5dcb53a094ba7e7" translate="yes" xml:space="preserve">
          <source>A function is a list of commands that will be executed when the name of the function is given as a command.</source>
          <target state="translated">関数とは、関数名をコマンドとして与えたときに実行されるコマンドのリストのことです。</target>
        </trans-unit>
        <trans-unit id="7601c1858c241e3bd16046e3e56c915853d6505a" translate="yes" xml:space="preserve">
          <source>A function name cannot be empty. It may not begin with a hyphen (&quot;-&quot;) and may not contain a slash (&quot;/&quot;). All other characters, including a space, are valid.</source>
          <target state="translated">関数名を空にすることはできません。ハイフン(&quot;-&quot;)で始まったり、スラッシュ(&quot;/&quot;)を含むことはできません。スペースを含む他のすべての文字が有効です。</target>
        </trans-unit>
        <trans-unit id="f2876072ebbf01c7648d2358047842fa63f47f6c" translate="yes" xml:space="preserve">
          <source>A global variable of the same name already exists.</source>
          <target state="translated">同名のグローバル変数が既に存在します。</target>
        </trans-unit>
        <trans-unit id="8b50d81adfb557d2a38d6b95df25f2d574c4f80c" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither -H nor -S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">ハードリミットは減少させることしかできません。ソフトリミットはハードリミットの値まで増加させることができます。Hも-Sも指定しない場合、新しいリミット値を割り当てる際にソフトリミットとハードリミットの両方が更新され、現在の値を報告する際にはソフトリミットが使用されます。</target>
        </trans-unit>
        <trans-unit id="b23a7c576473abf4f67fa752f0d58982d9b4994d" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither &lt;code&gt;-H&lt;/code&gt; nor &lt;code&gt;-S&lt;/code&gt; is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">ハード制限は下げることしかできません。一度設定すると、増やすことはできません。ソフト制限は、ハード制限の値まで増やすことができます。 &lt;code&gt;-H&lt;/code&gt; も &lt;code&gt;-S&lt;/code&gt; も指定されていない場合、新しい制限値を割り当てるときにソフト制限とハード制限の両方が更新され、現在の値を報告するときにソフト制限が使用されます。</target>
        </trans-unit>
        <trans-unit id="ec2f57dda8cd2b7d726afdc269175dec20de44df" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color.&lt;/code&gt; See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">接頭辞 &lt;code&gt;fish_color&lt;/code&gt; と &lt;code&gt;fish_pager_color.&lt;/code&gt; 始まる多数の変数。詳細について&lt;a href=&quot;#variables-color&quot;&gt;は、強調表示色を変更するための変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b6b5c0631c6ec4d7569772ecd93c5f2a9ad8e07" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">接頭辞 &lt;code&gt;fish_color&lt;/code&gt; および &lt;code&gt;fish_pager_color&lt;/code&gt; で始まる多数の変数。詳細について&lt;a href=&quot;#variables-color&quot;&gt;は、強調表示の色を変更するための変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5e5cf560f2e4f99636de6a450bd940ddafbd9847" translate="yes" xml:space="preserve">
          <source>A literal &quot;{}&quot; will not be used as a brace expansion:</source>
          <target state="translated">リテラルの&quot;{}&quot;は中括弧の展開には使用されません。</target>
        </trans-unit>
        <trans-unit id="3b73470b832856451e08f355e80a561c89bef4ab" translate="yes" xml:space="preserve">
          <source>A long flag name which is optional. If not present then only the short flag letter can be used.</source>
          <target state="translated">長いフラグ名。存在しない場合は、短いフラグ文字のみを使用することができます。</target>
        </trans-unit>
        <trans-unit id="17f47cd5794289ad514522518e0de593fc52cf83" translate="yes" xml:space="preserve">
          <source>A missing starting index in a range defaults to 1. This is allowed if the range is the first index expression of the sequence. Similarly, a missing ending index, defaulting to -1 is allowed for the last index range in the sequence.</source>
          <target state="translated">範囲内の開始インデックスが見つからない場合、デフォルトでは 1 になります。これは、その範囲がシーケンスの最初のインデックス式である場合に許可されます。同様に、終了インデックスの欠落は、デフォルトで-1となりますが、シーケンスの最後のインデックス範囲であれば許されます。</target>
        </trans-unit>
        <trans-unit id="df45d8597da7e771240bccd744a5834f0680a0b5" translate="yes" xml:space="preserve">
          <source>A more robust approach to argument handling is &lt;a href=&quot;cmds/argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt;, which checks the defined options and puts them into various variables, leaving only the positional arguments in $argv. Here's a simple example:</source>
          <target state="translated">引数処理へのより堅牢なアプローチは&lt;a href=&quot;cmds/argparse#cmd-argparse&quot;&gt;argparseです&lt;/a&gt;。これは、定義されたオプションをチェックし、それらをさまざまな変数に入れて、$ argvに位置引数のみを残します。簡単な例を次に示します。</target>
        </trans-unit>
        <trans-unit id="98778ce415c46f223a5f19597a261565905b28a5" translate="yes" xml:space="preserve">
          <source>A nice thing about lists is that they are passed to commands one element as one argument, so once you've set your list, you can just pass it:</source>
          <target state="translated">リストの良いところは、1つの要素を1つの引数としてコマンドに渡すので、一度リストを設定したら、そのまま渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f35ae38b3dc7e3d0d8e3c2e5485ce36d974931c5" translate="yes" xml:space="preserve">
          <source>A number between the &lt;code&gt;%&lt;/code&gt; and the format letter specifies the width. The result will be left-padded with spaces.</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; とフォーマット文字の間の数字は幅を指定します。結果はスペースで左に埋め込まれます。</target>
        </trans-unit>
        <trans-unit id="a5fb125f22d63e95feaa1b16b3d8c7381230797c" translate="yes" xml:space="preserve">
          <source>A number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">接頭辞 &lt;code&gt;fish_color&lt;/code&gt; および &lt;code&gt;fish_pager_color&lt;/code&gt; で始まるいくつかの変数。詳細について&lt;a href=&quot;#variables-color&quot;&gt;は、強調表示の色を変更するための変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c289b8e2f3ba875ebca3ca04379eb21ac58c6d06" translate="yes" xml:space="preserve">
          <source>A number of variables control the symbol (&quot;display&quot;) and color (&quot;color&quot;) for the different status indicators:</source>
          <target state="translated">多くの変数が、異なるステータスインジケータのシンボル(「表示」)と色(「色」)を制御します。</target>
        </trans-unit>
        <trans-unit id="d7eb886434c2d98d1f604c3752317380a9843e6c" translate="yes" xml:space="preserve">
          <source>A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt;.</source>
          <target state="translated">いくつかの変数は、インジケーターとして使用される文字と色を設定します。これらの多くは、情報ステータスを有効にして使用するか、 &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; 設定して使用すると、デフォルトが異なります。最初に通常のデフォルトが指定され、次に有益なデフォルトが指定されます（異なる場合）。色のデフォルトが指定されていない場合、デフォルトは &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b7b8ab4ed67c762ac2d0fa14336c7a66f5b2e303" translate="yes" xml:space="preserve">
          <source>A range of indices can be specified, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;#expand-index-range&quot;&gt;インデックスの範囲を&lt;/a&gt;指定できます。詳細については、インデックス範囲の拡張を参照してください。</target>
        </trans-unit>
        <trans-unit id="b9b9c424a1693d0e726bcbd3ebbcf95acc9865f6" translate="yes" xml:space="preserve">
          <source>A rich set of tab completions work &quot;out of the box&quot;.</source>
          <target state="translated">豊富なタブの補完機能が「箱から出して」動作します。</target>
        </trans-unit>
        <trans-unit id="8f78ea4e9ef795d6303b8e958efabed0828ac69c" translate="yes" xml:space="preserve">
          <source>A script written in &lt;code&gt;bash&lt;/code&gt; would need a first line like this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; で記述されたスクリプトには、次のような最初の行が必要です。</target>
        </trans-unit>
        <trans-unit id="5e298a31256356ac86c6d29914100defedf5fffe" translate="yes" xml:space="preserve">
          <source>A scripts written in &lt;code&gt;bash&lt;/code&gt; it would need a first line like this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; で記述されたスクリプトには、次のような最初の行が必要です。</target>
        </trans-unit>
        <trans-unit id="8c3a0a6b90c1f5bc360ed70d0dd93ffe55365da5" translate="yes" xml:space="preserve">
          <source>A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212 brblue&lt;/code&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">第２の色は、所望のフォールバック色として与えられ得る。たとえば、 &lt;code&gt;set_color 124212 brblue&lt;/code&gt; は、端末が目的のグレーの正確な色合いに対応できない場合に&lt;em&gt;brblue&lt;/em&gt;を使用するようにset_colorに指示します。これは、8色または16色の端末が色を使用しない場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="15a74286acaf35ddfed9ca54f393e47cdb77fcfa" translate="yes" xml:space="preserve">
          <source>A shell is a program that helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="translated">シェルとは、他のプログラムを起動してコンピュータを操作するためのプログラムのことで、fishは操作性と対話性を重視したコマンドラインインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="3fcf13b497d0506afff3d618c0c36dfe5e1a068c" translate="yes" xml:space="preserve">
          <source>A shell is a program which helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="translated">シェルとは、他のプログラムを起動してコンピュータを操作するためのプログラムのことです。</target>
        </trans-unit>
        <trans-unit id="fa2eb63a7d926840491eb53403e1e6e33347d750" translate="yes" xml:space="preserve">
          <source>A short flag letter (which is mandatory). It must be an alphanumeric or &quot;#&quot;. The &quot;#&quot; character is special and means that a flag of the form &lt;code&gt;-123&lt;/code&gt; is valid. The short flag &quot;#&quot; must be followed by &quot;-&quot; (since the short name isn't otherwise valid since &lt;code&gt;_flag_#&lt;/code&gt; is not a valid var name) and must be followed by a long flag name with no modifiers.</source>
          <target state="translated">短い旗の手紙（これは必須です）。英数字または「＃」でなければなりません。 「＃」文字は特殊であり、 &lt;code&gt;-123&lt;/code&gt; 形式のフラグが有効であることを意味します。短いフラグ &quot;＃&quot;の後には &quot;-&quot;を付けなければならず（ &lt;code&gt;_flag_#&lt;/code&gt; は有効なvar名ではないため、短い名前は有効ではありません）、修飾子のない長いフラグ名を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="translated">簡単な例です。</target>
        </trans-unit>
        <trans-unit id="ccb9db4c52835afcbee666aae50d387e24cb3af2" translate="yes" xml:space="preserve">
          <source>A simple greeting:</source>
          <target state="translated">シンプルな挨拶です。</target>
        </trans-unit>
        <trans-unit id="f03cb577b66142cb2e46d23d5c55c8cdf70b3657" translate="yes" xml:space="preserve">
          <source>A simple handler:</source>
          <target state="translated">シンプルなハンドラーです。</target>
        </trans-unit>
        <trans-unit id="e585b4919dc0904a5ac8ff639290a7da0168ce72" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays all known VCS info:</source>
          <target state="translated">すべての既知のVCS情報を表示するシンプルなプロンプト。</target>
        </trans-unit>
        <trans-unit id="c44605d7cf5f66a5d454bc7f8b72acac0713b1cf" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays git info:</source>
          <target state="translated">git 情報を表示するシンプルなプロンプトです。</target>
        </trans-unit>
        <trans-unit id="981d3d4dab4f4f8c0ceaf4c8bcfaaee7cef2a27b" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays hg info:</source>
          <target state="translated">hg情報を表示するシンプルなプロンプト。</target>
        </trans-unit>
        <trans-unit id="87603fcaef9b30ff09e50b24e5fda2ce2fcd654c" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays svn info:</source>
          <target state="translated">svn 情報を表示するシンプルなプロンプト。</target>
        </trans-unit>
        <trans-unit id="610fac60f39f41e55d40e59429099ac45fcaf3c8" translate="yes" xml:space="preserve">
          <source>A simple prompt that is a simplified version of the default debugging prompt:</source>
          <target state="translated">デフォルトのデバッグプロンプトを簡略化したシンプルなプロンプトです。</target>
        </trans-unit>
        <trans-unit id="631761c6042b0b4defe6087674d679a446f769a6" translate="yes" xml:space="preserve">
          <source>A simple prompt:</source>
          <target state="translated">簡単なプロンプトです。</target>
        </trans-unit>
        <trans-unit id="a457232f4c851ca48444c8b22ce5d86f9157d153" translate="yes" xml:space="preserve">
          <source>A simple right prompt:</source>
          <target state="translated">シンプルな右のプロンプト。</target>
        </trans-unit>
        <trans-unit id="1185aac09aa8fc678b91d059d32d2cfc59419da0" translate="yes" xml:space="preserve">
          <source>A simple title:</source>
          <target state="translated">シンプルなタイトルです。</target>
        </trans-unit>
        <trans-unit id="e87c54de638d95b5e6d226cc4b4479d88e8ad79d" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens '&lt;code&gt;-&lt;/code&gt;' and alter the way a command operates. For example, the '&lt;code&gt;ls&lt;/code&gt;' command usually lists all the files and directories in the current working directory, but by using the '&lt;code&gt;-l&lt;/code&gt;' switch, the behavior of '&lt;code&gt;ls&lt;/code&gt;' is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.</source>
          <target state="translated">スイッチは、非常に一般的な特殊なタイプの引数です。スイッチは、ほとんどの場合、1つ以上のハイフン「 &lt;code&gt;-&lt;/code&gt; 」で始まり、コマンドの動作方法を変更します。たとえば、「 &lt;code&gt;ls&lt;/code&gt; 」コマンドは通常、現在の作業ディレクトリ内のすべてのファイルとディレクトリを一覧表示しますが、「 &lt;code&gt;-l&lt;/code&gt; 」スイッチを使用すると、「 &lt;code&gt;ls&lt;/code&gt; 」の動作が変更され、ファイル名だけでなくサイズも表示されます、権限、所有者、各ファイルの変更時刻。</target>
        </trans-unit>
        <trans-unit id="5bdeb5e86a31772c1e5672fd704d86afc086f067" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens &lt;code&gt;-&lt;/code&gt; and alter the way a command operates. For example, the &lt;code&gt;ls&lt;/code&gt; command usually lists the names of all files and directories in the current working directory. By using the &lt;code&gt;-l&lt;/code&gt; switch, the behavior of &lt;code&gt;ls&lt;/code&gt; is changed to not only display the filename, but also the size, permissions, owner, and modification time of each file.</source>
          <target state="translated">スイッチは、非常に一般的な特殊なタイプの引数です。スイッチはほぼ必ず一つ以上のハイフンで始まる &lt;code&gt;-&lt;/code&gt; およびコマンドの動作方法を変更します。たとえば、 &lt;code&gt;ls&lt;/code&gt; コマンドは通常、現在の作業ディレクトリ内のすべてのファイルとディレクトリの名前を一覧表示します。 &lt;code&gt;-l&lt;/code&gt; スイッチを使用すると、 &lt;code&gt;ls&lt;/code&gt; の動作が変更され、ファイル名だけでなく、各ファイルのサイズ、アクセス許可、所有者、および変更時刻も表示されます。</target>
        </trans-unit>
        <trans-unit id="dfb06de1c7a12f5632480c8ec95581dfbbdcf321" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of &lt;code&gt;fish&lt;/code&gt;, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">ユニバーサル変数とは、再起動後も、現在および将来の &lt;code&gt;fish&lt;/code&gt; すべてのインスタンスで値が共有される変数です。 &lt;code&gt;set -U&lt;/code&gt; を使用して変数をユニバーサルにすることができます。</target>
        </trans-unit>
        <trans-unit id="a3b9e4c443fb1972ce4de5e58116d2a5d4a465de" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of fish, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">ユニバーサル変数は、再起動後でも、現在および将来のすべての魚のインスタンスで値が共有される変数です。 &lt;code&gt;set -U&lt;/code&gt; ：を使用して変数をユニバーサルにすることができます。</target>
        </trans-unit>
        <trans-unit id="7b8d375ccbff689a61358d91a3d87c3b4c7bb526" translate="yes" xml:space="preserve">
          <source>A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">変数名を空にすることはできません。文字、数字、アンダースコアのみを含むことができます。これらの文字のいずれかで始まり、終わることができます。</target>
        </trans-unit>
        <trans-unit id="a90aba13b6feb8ff1a5141d94cb1fc2fe96e9477" translate="yes" xml:space="preserve">
          <source>Abbreviations</source>
          <target state="translated">Abbreviations</target>
        </trans-unit>
        <trans-unit id="a39ab99e2ea47c8c0e9d74827d866ecbba2cbde0" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod(1)&lt;/code&gt; program.</source>
          <target state="translated">アクセス権については、 &lt;code&gt;chmod(1)&lt;/code&gt; プログラムのマニュアルページで説明しています。</target>
        </trans-unit>
        <trans-unit id="e139d85bd15795b0d3efa188c22e165c587928c5" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod&lt;/code&gt;(1) program.</source>
          <target state="translated">アクセス権については、 &lt;code&gt;chmod&lt;/code&gt; （1）プログラムのマニュアルページで説明されています。</target>
        </trans-unit>
        <trans-unit id="cf27f6010a1e75f4bb8d29911772c8214904203b" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;gco&lt;/code&gt; will be replaced with &lt;code&gt;git checkout&lt;/code&gt; global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; が &lt;code&gt;git checkout&lt;/code&gt; globalで置き換えられる新しい略語を現在のシェルに追加します。この省略形は、同じコマンドがそれらのシェルで実行されない限り（config.fishでコマンドを実行するときなど）、他のシェルには自動的に表示されません。</target>
        </trans-unit>
        <trans-unit id="6e3c8915a2556d62c5b7d149b19924656f4d28db" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;l&lt;/code&gt; will be replaced with &lt;code&gt;less&lt;/code&gt; universal so all shells. Note that you omit the &lt;code&gt;-U&lt;/code&gt; since it is the default.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; が汎用性の &lt;code&gt;less&lt;/code&gt; すべてのシェルに置き換えられる新しい略語を追加します。 &lt;code&gt;-U&lt;/code&gt; はデフォルトなので省略していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fb5d43a3f1c9755eef7928213dbee5eeaa42d36e" translate="yes" xml:space="preserve">
          <source>Add the fish shell &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">魚のシェル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を &lt;code&gt;/etc/shells&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="5653e8b2a5b4e506d45221882faa5a4ef5e578ef" translate="yes" xml:space="preserve">
          <source>Add the line &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;/usr/local/bin/fish&lt;/code&gt; という行を &lt;code&gt;/etc/shells&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="2218c2ad08a2c4abdfb2b24cb656a2bed5878772" translate="yes" xml:space="preserve">
          <source>Add the shell to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">次のコマンドを使用して、シェルを &lt;code&gt;/etc/shells&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="1f235c11a925e7b3330abed437c370548fb56ecc" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;blink&lt;/code&gt; can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.</source>
          <target state="translated">さらに、各カーソル形状パラメーターの後に &lt;code&gt;blink&lt;/code&gt; を追加して、指定した形状に点滅カーソルを設定できます。</target>
        </trans-unit>
        <trans-unit id="fc74aa2568dbca49c63c7dc4f2b48adf6334bb72" translate="yes" xml:space="preserve">
          <source>Additionally, the following variables are available to change the highlighting in the completion pager:</source>
          <target state="translated">さらに、補完ページャーのハイライト表示を変更するには、以下の変数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="3dcf0bfda5eb37d5ad6d848b3b854d252bf95ed5" translate="yes" xml:space="preserve">
          <source>After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">コマンドを入力した後、履歴リストの最後に挿入されます。重複した履歴項目は自動的に削除されます。上下キーを押すことで、履歴を前後に検索することができます。履歴検索開始時に現在のコマンドラインが空でない場合は、コマンドラインに入力された文字列を含むコマンドのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="1c0f395d3d36fe65276a4d5db63528962c286e62" translate="yes" xml:space="preserve">
          <source>After a command has been executed, it is remembered in the history list. Any duplicate history items are automatically removed. By pressing the up and down keys, you can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">コマンドが実行されると、そのコマンドは履歴リストに記憶されます。重複した履歴項目は自動的に削除されます。上下のキーを押すことで、履歴を前後に検索することができます。履歴検索の開始時に現在のコマンドラインが空でない場合は、コマンドラインに入力された文字列を含むコマンドのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="a350de02e9b5ffd85be164d43398c5ad2155568f" translate="yes" xml:space="preserve">
          <source>After a variable has been set, you can use the value of a variable in the shell through &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">変数が設定された後、変数&lt;a href=&quot;#expand-variable&quot;&gt;展開を&lt;/a&gt;介してシェルで変数の値を使用できます。</target>
        </trans-unit>
        <trans-unit id="93f9aedd05ed2f309f5e444d2d5404bfd9df4031" translate="yes" xml:space="preserve">
          <source>After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; に入り、を押した後</target>
        </trans-unit>
        <trans-unit id="6629fd2d9ea9eaa222685dbc3f35af94810deb35" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">引数を解析した後、 &lt;code&gt;argv&lt;/code&gt; varは、フラグの処理中にまだ消費されていない値にローカルスコープで設定されます。バインドされていない値がない場合、変数は設定されますが、 &lt;code&gt;count $argv&lt;/code&gt; はゼロになります。</target>
        </trans-unit>
        <trans-unit id="cadc853d6ecb84da57af597335f5dd5f920f4fad" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; variable is set with local scope to any values not already consumed during flag processing. If there are no unbound values the variable is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">引数を解析した後、 &lt;code&gt;argv&lt;/code&gt; 変数はローカルスコープでフラグ処理中にまだ消費されていない値に設定されます。バインドされていない値がない場合、変数は設定されますが、 &lt;code&gt;count $argv&lt;/code&gt; はゼロになります。</target>
        </trans-unit>
        <trans-unit id="c71ccb08a9461f3714b74f1bc1174cad1387e3e4" translate="yes" xml:space="preserve">
          <source>All arrays are one-dimensional and cannot contain other arrays, although it is possible to fake nested arrays using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">すべての配列は1次元であり、他の配列を含めることはできませんが、&lt;a href=&quot;#expand-variable&quot;&gt;変数展開の&lt;/a&gt;逆参照規則を使用してネストされた配列を偽造することは可能です。</target>
        </trans-unit>
        <trans-unit id="56e6acc061961e38bd117d2ddb2648c69dcb4126" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and can't contain other lists, although it is possible to fake nested lists using dereferencing - see &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">すべてのリストは1次元であり、他のリストを含めることはできませんが、逆参照を使用してネストされたリストを偽造することは可能です。&lt;a href=&quot;#expand-variable&quot;&gt;変数展開&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="95c98653dd35db2f0582bbcfb13f9d49a14d5a55" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and cannot contain other lists, although it is possible to fake nested lists using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">すべてのリストは1次元であり、他のリストを含めることはできませんが、&lt;a href=&quot;#expand-variable&quot;&gt;変数展開の&lt;/a&gt;間接参照規則を使用してネストされたリストを偽造することは可能です。</target>
        </trans-unit>
        <trans-unit id="66ffedcb95110c61b7f48b8dfe9b357e5be7aafb" translate="yes" xml:space="preserve">
          <source>All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.</source>
          <target state="translated">上記のすべての拡張を組み合わせることができます。いくつかの展開が複数のパラメータになる場合、すべての可能な組み合わせが作成されます。</target>
        </trans-unit>
        <trans-unit id="828afdd065730919c157af1148a37aa2e6215eb2" translate="yes" xml:space="preserve">
          <source>All of the trigonometric functions use radians.</source>
          <target state="translated">三角関数はすべてラジアンを使用します。</target>
        </trans-unit>
        <trans-unit id="26ebe75843a58a3dac290ff4f09ca89edc661094" translate="yes" xml:space="preserve">
          <source>All statements in initialization files that output to the terminal should be guarded with something like the following:</source>
          <target state="translated">ターミナルに出力する初期化ファイルのすべてのステートメントは、以下のようなものでガードされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="9eaf99fa509b066c368ae766f5fd326fe0a501f8" translate="yes" xml:space="preserve">
          <source>All variables are &quot;arrays&quot; (we use the term &quot;lists&quot;), and expanding a variable expands to all its elements, with each element as its own argument (like bash's &lt;code&gt;&quot;${var[@]}&quot;&lt;/code&gt;:</source>
          <target state="translated">すべての変数は「配列」（「リスト」という用語を使用）であり、変数を展開すると、各要素が独自の引数として（bashの &lt;code&gt;&quot;${var[@]}&quot;&lt;/code&gt; ように）、すべての要素に展開されます。</target>
        </trans-unit>
        <trans-unit id="59d286363a981fa0af60a5ca572e501d6a1474e5" translate="yes" xml:space="preserve">
          <source>Almost all fish commands respond to the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; options to display their relevant help, also accessible using the &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; commands, like so:</source>
          <target state="translated">ほとんどすべてのfishコマンドは、関連するヘルプを表示するために &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; オプションに応答します。また、次のように、 &lt;code&gt;help&lt;/code&gt; および &lt;code&gt;man&lt;/code&gt; コマンドを使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bda1d0385b54eba22fc83053a714334995ee2583" translate="yes" xml:space="preserve">
          <source>Also shortened as &quot;I/O&quot; or &quot;IO&quot;.</source>
          <target state="translated">また、「I/O」または「IO」とも短縮されます。</target>
        </trans-unit>
        <trans-unit id="d37eb49280470e438e7e699ff631a3f84af89ba2" translate="yes" xml:space="preserve">
          <source>Also,</source>
          <target state="translated">Also,</target>
        </trans-unit>
        <trans-unit id="e30eff925100b7c3e119ed678e39009e962455b0" translate="yes" xml:space="preserve">
          <source>Alt</source>
          <target state="translated">Alt</target>
        </trans-unit>
        <trans-unit id="517f3a2c8b9272ee95d59b7f36af89264fa4dbf8" translate="yes" xml:space="preserve">
          <source>Alt+&amp;darr;,Down</source>
          <target state="translated">Alt+&amp;darr;,Down</target>
        </trans-unit>
        <trans-unit id="5e9023ab706bd62faa0520004f30bc2ed999ef8c" translate="yes" xml:space="preserve">
          <source>Alt+&amp;larr;,Left</source>
          <target state="translated">Alt+&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="36866486669ffcdfbef93f70b2122585d0689c65" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;</source>
          <target state="translated">Alt+&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b89c31e566539bfe03d67119b891ccbd78608fd" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;,Right</source>
          <target state="translated">Alt+&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="9a9d40973db0c2622dc620880dd806a2a7b074af" translate="yes" xml:space="preserve">
          <source>Alt+&amp;uarr;,Up</source>
          <target state="translated">Alt+&amp;uarr;,Up</target>
        </trans-unit>
        <trans-unit id="bfc455c2b3ba6cee557bc6d5bddcaae8ab6cd71e" translate="yes" xml:space="preserve">
          <source>Alt+.</source>
          <target state="translated">Alt+.</target>
        </trans-unit>
        <trans-unit id="3f1d49e2c9f7278fd80b98a77041a0c748cbc877" translate="yes" xml:space="preserve">
          <source>Alt+Backspace</source>
          <target state="translated">Alt+Backspace</target>
        </trans-unit>
        <trans-unit id="e03e0d826ab2903a1d279112bf254a834058b27f" translate="yes" xml:space="preserve">
          <source>Alt+D</source>
          <target state="translated">Alt+D</target>
        </trans-unit>
        <trans-unit id="abed54704141f2d3e51473ad15ab778fff8ad229" translate="yes" xml:space="preserve">
          <source>Alt+Enter</source>
          <target state="translated">Alt+Enter</target>
        </trans-unit>
        <trans-unit id="f71a3b249f291f22237bbbed38b8c6c692ef50ea" translate="yes" xml:space="preserve">
          <source>Alt+F</source>
          <target state="translated">Alt+F</target>
        </trans-unit>
        <trans-unit id="ef42947ea26232a62f96bc3b77c5d9938c972a74" translate="yes" xml:space="preserve">
          <source>Alt+Y</source>
          <target state="translated">Alt+Y</target>
        </trans-unit>
        <trans-unit id="42067d9d74bbc067847a30164e23954aca55ff0a" translate="yes" xml:space="preserve">
          <source>Alt+c</source>
          <target state="translated">Alt+c</target>
        </trans-unit>
        <trans-unit id="d73eff91bc5add0567a63c189cfc6a840240cc3a" translate="yes" xml:space="preserve">
          <source>Alt+d</source>
          <target state="translated">Alt+d</target>
        </trans-unit>
        <trans-unit id="356f2928c7cc628dc148ace42aaa5347a9043a00" translate="yes" xml:space="preserve">
          <source>Alt+e</source>
          <target state="translated">Alt+e</target>
        </trans-unit>
        <trans-unit id="a2008eaab718a2cbdba9a5b56cc0388211241a00" translate="yes" xml:space="preserve">
          <source>Alt+h</source>
          <target state="translated">Alt+h</target>
        </trans-unit>
        <trans-unit id="63b063c0b910fdda5527dc17ae1126ec12f233f4" translate="yes" xml:space="preserve">
          <source>Alt+l</source>
          <target state="translated">Alt+l</target>
        </trans-unit>
        <trans-unit id="412b6a19e71a5431a4a033717193f98cc5ab36f2" translate="yes" xml:space="preserve">
          <source>Alt+p</source>
          <target state="translated">Alt+p</target>
        </trans-unit>
        <trans-unit id="3f12597f24de2438c063ec57e52f94359d4653a6" translate="yes" xml:space="preserve">
          <source>Alt+s</source>
          <target state="translated">Alt+s</target>
        </trans-unit>
        <trans-unit id="7c8aea22d76a0fc0d599dcc9667d21c686685110" translate="yes" xml:space="preserve">
          <source>Alt+t</source>
          <target state="translated">Alt+t</target>
        </trans-unit>
        <trans-unit id="8d028f59d024b2c7c1586395af72b9b1deb565e4" translate="yes" xml:space="preserve">
          <source>Alt+u</source>
          <target state="translated">Alt+u</target>
        </trans-unit>
        <trans-unit id="cb3eeeb8ea5fb25aecee7d1b619b3e3d542195e4" translate="yes" xml:space="preserve">
          <source>Alt+v</source>
          <target state="translated">Alt+v</target>
        </trans-unit>
        <trans-unit id="f7d4868bcba598a1dee143a75725317cae61d6b2" translate="yes" xml:space="preserve">
          <source>Alt+w</source>
          <target state="translated">Alt+w</target>
        </trans-unit>
        <trans-unit id="91cf5d208f71238a675c3bfa07523a3c0bae8a90" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt;, but remember that &lt;strong&gt;the variable must be double-quoted&lt;/strong&gt;. For example, &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt;. The &lt;code&gt;test&lt;/code&gt; command provides its own and (-a) and or (-o):</source>
          <target state="translated">または、 &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt; 使用しますが&lt;strong&gt;、変数は二重引用符で囲む必要があることに注意してください&lt;/strong&gt;。たとえば、 &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt; 。 &lt;code&gt;test&lt;/code&gt; コマンドは（-o）は、独自のと（-a）およびまたはを提供しています。</target>
        </trans-unit>
        <trans-unit id="bc3300770ceceb008dbc00aa7addb545afcdd538" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;a href=&quot;#variables-argv&quot;&gt;$argv&lt;/a&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">ラップされたコマンドのパラメーターのリストに&lt;a href=&quot;#variables-argv&quot;&gt;$ argv&lt;/a&gt;変数を追加するように常に注意してください。これにより、ユーザーが関数に追加のパラメーターを指定した場合、それらが基になるコマンドに確実に渡されます。</target>
        </trans-unit>
        <trans-unit id="b83f5e1029e1f8968df11b5b3d40ca89fed19fcf" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;code&gt;$argv&lt;/code&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">ラップされたコマンドのパラメーターのリストに &lt;code&gt;$argv&lt;/code&gt; 変数を追加するように常に注意してください。これにより、ユーザーが関数に追加のパラメーターを指定した場合、それらは基本となるコマンドに確実に渡されます。</target>
        </trans-unit>
        <trans-unit id="f9ad26606a8f0efef47019531f3d0c942aac7413" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color.</source>
          <target state="translated">A0FF33やf2fなどの3桁または6桁の16進数のRGB値を使用できます。 &lt;code&gt;fish&lt;/code&gt; はサポートされている最も近い色を選択します。 3桁の値は、各桁を2回指定することと同じです。たとえば、 &lt;code&gt;set_color 2BC&lt;/code&gt; はset_color22BBCCと同じ &lt;code&gt;set_color 22BBCC&lt;/code&gt; 。 16進数のRGB値は、小文字または大文字にすることができます。端末の機能（および &lt;code&gt;set_color&lt;/code&gt; がサポートしているレベル）によっては、実際の色が近くの一致する予約済みの色名で近似される場合や、 &lt;code&gt;set_color&lt;/code&gt; が色に影響を与えない場合があります。</target>
        </trans-unit>
        <trans-unit id="c6698f2ed87e85285db0bd4dfe6d91201b04dda0" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color. A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212&lt;/code&gt;&lt;em&gt;brblue&lt;/em&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">A0FF33やf2fなど、3桁または6桁の16進数のRGB値を使用できます。 &lt;code&gt;fish&lt;/code&gt; はサポートされている最も近い色を選択します。 3桁の値は、各桁を2回指定することと同じです。たとえば、 &lt;code&gt;set_color 2BC&lt;/code&gt; は &lt;code&gt;set_color 22BBCC&lt;/code&gt; と同じです。 16進数のRGB値は、小文字でも大文字でもかまいません。端末の機能（および &lt;code&gt;set_color&lt;/code&gt; のサポートレベル）に応じて、実際の色は近くに一致する予約済みの色の名前で近似されるか、 &lt;code&gt;set_color&lt;/code&gt; が色に影響しない場合があります。第２の色は、所望の代替色として与えられ得る。たとえば、 &lt;code&gt;set_color 124212&lt;/code&gt; &lt;em&gt;brblue&lt;/em&gt;は、set_colorにbrblueを使用するように指示します&lt;em&gt;。&lt;/em&gt;端末が希望するグレーの正確な色合いに対応していない場合。これは、8色または16色の端末が色を使用しない場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="f74c42c499aeba63a8ea3607dd7f2066d74d726b" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor like &lt;code&gt;&amp;amp;2&lt;/code&gt; for standard error. The output will be written to the destination descriptor.</source>
          <target state="translated">アンパサンド（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）の後に、標準エラーの &lt;code&gt;&amp;amp;2&lt;/code&gt; などの別のファイル記述子の番号が続きます。出力は宛先記述子に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="42927afb9c7caf7b6c8ddab65a5441b4f933c6dc" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor. The output will be written to that file descriptor instead.</source>
          <target state="translated">アンパーサンド（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）の後に別のファイル記述子の番号が続きます。代わりに、出力はそのファイル記述子に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f71943b897ee254dbdc1a97522da125ee417b99e" translate="yes" xml:space="preserve">
          <source>An ampersand followed by a minus sign (&lt;code&gt;&amp;amp;-&lt;/code&gt;). The file descriptor will be closed.</source>
          <target state="translated">アンパサンドとそれに続くマイナス記号（ &lt;code&gt;&amp;amp;-&lt;/code&gt; ）。ファイル記述子は閉じられます。</target>
        </trans-unit>
        <trans-unit id="71cc88334bb3e92319c03d6549b247d60c760b50" translate="yes" xml:space="preserve">
          <source>An autoloaded function becomes available automatically to all running shells.</source>
          <target state="translated">オートロードされた機能は、実行中のすべてのシェルで自動的に利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="feaaca65392fda02c163012d9378b2dddb326e82" translate="yes" xml:space="preserve">
          <source>An example of a file redirection is &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, which directs the output of the echo command to the file output.txt.</source>
          <target state="translated">ファイルリダイレクトの例は、 &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; 。これは、echoコマンドの出力をファイルoutput.txtに送信します。</target>
        </trans-unit>
        <trans-unit id="70622abf0d999c9b30ccee1d90ca01c58b366577" translate="yes" xml:space="preserve">
          <source>An important list is &lt;code&gt;$argv&lt;/code&gt;, which contains the arguments to a function or script. For example:</source>
          <target state="translated">重要なリストは &lt;code&gt;$argv&lt;/code&gt; 、これには関数またはスクリプトへの引数が含まれています。例えば：</target>
        </trans-unit>
        <trans-unit id="7c8ae932f676e1b49a92ae134701eb47d262917c" translate="yes" xml:space="preserve">
          <source>An option defined with &lt;code&gt;=?&lt;/code&gt; can take optional arguments. Optional arguments have to be &lt;em&gt;directly attached&lt;/em&gt; to the option they belong to.</source>
          <target state="translated">&lt;code&gt;=?&lt;/code&gt; で定義されたオプション オプションの引数を取ることができます。オプションの引数は、それらが属するオプションに&lt;em&gt;直接アタッチ&lt;/em&gt;する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ba78d35401b6a1c6c93697efea477dcd3252c20" translate="yes" xml:space="preserve">
          <source>An optional alphanumeric short flag letter, followed by a &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command or, for backwards compatibility, a &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag (in which case it will also not be exposed as a flag variable).</source>
          <target state="translated">オプションの英数字の短いフラグ文字の後に、コマンドを呼び出す人が短いフラグを使用できる場合は &lt;code&gt;/&lt;/code&gt; 、下位互換性のために &lt;code&gt;-&lt;/code&gt; 有効な短いフラグとして公開しない場合は-フラグ変数として公開されます）。</target>
        </trans-unit>
        <trans-unit id="ee6f6d9342a43e58638f4532c5f5bd8a68457e20" translate="yes" xml:space="preserve">
          <source>An optional long flag name. If not present then only the short flag letter can be used, and if that is not present either it's an error.</source>
          <target state="translated">オプションの長い旗の名前です。存在しない場合は、短いフラグ文字のみが使用でき、それも存在しない場合はエラーとなります。</target>
        </trans-unit>
        <trans-unit id="679ec7a7b8cdd5d99093574be9564bebec8796e1" translate="yes" xml:space="preserve">
          <source>And here is fish:</source>
          <target state="translated">そして、ここには魚がある。</target>
        </trans-unit>
        <trans-unit id="f69522f56e3535db80624669c313a99567b23650" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters</source>
          <target state="translated">歴史もね。一度コマンドを入力すると、数文字入力するだけで再召喚できます。</target>
        </trans-unit>
        <trans-unit id="8bcd9af34fdfabd4b79f9b66b86a1699d04abe42" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters:</source>
          <target state="translated">歴史もね。一度コマンドを入力すると、数文字入力するだけで再召喚できます。</target>
        </trans-unit>
        <trans-unit id="0b0fd5cdb40b4cfe992f552884b592eda469a0f9" translate="yes" xml:space="preserve">
          <source>And some other things:</source>
          <target state="translated">他にもいくつか。</target>
        </trans-unit>
        <trans-unit id="561f19ae7fb03ebfc67b782db126853cbbf6f6cb" translate="yes" xml:space="preserve">
          <source>And these will exit non-zero:</source>
          <target state="translated">そして、これらは非ゼロで終了します。</target>
        </trans-unit>
        <trans-unit id="b40c5f88db8dfb0b9bfe4851375485b84d5f21ba" translate="yes" xml:space="preserve">
          <source>And this will open a random picture from any of the subdirectories:</source>
          <target state="translated">そして、これはサブディレクトリのいずれかからランダムに画像を開きます。</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">別の例です。</target>
        </trans-unit>
        <trans-unit id="8412cc61dadd4c0591948f966c2cb2fcaae73906" translate="yes" xml:space="preserve">
          <source>Another set of commands, usually also available in other shells like bash, deal with the directory stack. Stack handling is not automatic and needs explicit calls of the following commands:</source>
          <target state="translated">もうひとつのコマンドは、通常、bashなどの他のシェルでも利用可能ですが、ディレクトリのスタックを処理します。スタックの処理は自動ではなく、以下のコマンドを明示的に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="4acd5f5d27392753de0db7aa6703caa605cc318d" translate="yes" xml:space="preserve">
          <source>Another way to redirect streams is a &lt;em&gt;pipe&lt;/em&gt;. A pipe connects streams with each other. Usually the standard output of one command is connected with the standard input of another. This is done by separating commands with the pipe character &lt;code&gt;|&lt;/code&gt;. For example:</source>
          <target state="translated">ストリームをリダイレクトする別の方法は&lt;em&gt;パイプ&lt;/em&gt;です。パイプはストリームを相互に接続します。通常、あるコマンドの標準出力は別のコマンドの標準入力に接続されます。これは、コマンドをパイプ文字 &lt;code&gt;|&lt;/code&gt; で区切ることによって行われます。。例えば：</target>
        </trans-unit>
        <trans-unit id="871f0eca83b698ab5e09430c495bdbf2531c9722" translate="yes" xml:space="preserve">
          <source>Any arbitrary file descriptor can used in a redirection by prefixing the redirection with the FD number.</source>
          <target state="translated">リダイレクションの前にFD番号を付けることで、任意のファイルディスクリプターをリダイレクションに使用することができます。</target>
        </trans-unit>
        <trans-unit id="362b56d716d77e953ca245a04fefe6fa04496b74" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a mechanism called a redirection.</source>
          <target state="translated">任意のファイルディスクリプタは、リダイレクションと呼ばれるメカニズムによって、デフォルトとは異なる出力に指示することができます。</target>
        </trans-unit>
        <trans-unit id="e8bcc5afa939d9420d0774b5e38828f941829c98" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a simple mechanism called a redirection.</source>
          <target state="translated">任意のファイルディスクリプタは、リダイレクションと呼ばれる単純なメカニズムによって、デフォルトとは異なる出力に向けることができます。</target>
        </trans-unit>
        <trans-unit id="c2f3a230563fd5c0b1186bad49a4d25468f2d9d1" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.</source>
          <target state="translated">リダイレクトの前にファイルディスクリプタを付けることで、任意のファイルディスクリプタを任意の方法でリダイレクトすることができます。</target>
        </trans-unit>
        <trans-unit id="cd5f97ddaa069aad021c1d2a9c338e699d7fb280" translate="yes" xml:space="preserve">
          <source>Any trailing newlines on the input are trimmed, just as with &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; substitution in sh. &lt;code&gt;--no-trim-newlines&lt;/code&gt; can be used to disable this behavior, which may be useful when running a command such as &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt;.</source>
          <target state="translated">shの &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; 置換と同様に、入力の末尾の改行はすべてトリミングされます。 &lt;code&gt;--no-trim-newlines&lt;/code&gt; を使用して、この動作を無効にすることができます。これは、 &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt; などのコマンドを実行するときに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="fdf5f1f8373d2b080130881f50fad45711fb3b29" translate="yes" xml:space="preserve">
          <source>Anything after a &lt;code&gt;#&lt;/code&gt; until the end of the line is a comment. That means it's purely for the reader's benefit, fish ignores it.</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; の後から行末まではコメントです。つまり、それは純粋に読者の利益のためであり、魚はそれを無視します。</target>
        </trans-unit>
        <trans-unit id="27dd47e0001555dbec5775dfb849b9ead7487cd5" translate="yes" xml:space="preserve">
          <source>Argument Handling</source>
          <target state="translated">引数の処理</target>
        </trans-unit>
        <trans-unit id="6ce2360486723d855cffc7d0ddbf62842f609b07" translate="yes" xml:space="preserve">
          <source>Arguments beginning with &lt;code&gt;-&lt;/code&gt; are normally interpreted as switches; &lt;code&gt;--&lt;/code&gt; causes the following arguments not to be treated as switches even if they begin with &lt;code&gt;-&lt;/code&gt;. Switches and required arguments are recognized only on the command line.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; で始まる引数は通常、スイッチとして解釈されます。 &lt;code&gt;--&lt;/code&gt; 次の引数が &lt;code&gt;-&lt;/code&gt; で始まっていても、スイッチとして扱われないようにします。スイッチと必要な引数は、コマンドラインでのみ認識されます。</target>
        </trans-unit>
        <trans-unit id="c271567e584d16588ed2e67dbff2bcfabb548be6" translate="yes" xml:space="preserve">
          <source>Arguments of the form &lt;code&gt;PID&lt;/code&gt; or &lt;code&gt;%JOBID&lt;/code&gt; restrict the output to jobs with the selected process identifiers or job numbers respectively.</source>
          <target state="translated">&lt;code&gt;PID&lt;/code&gt; または &lt;code&gt;%JOBID&lt;/code&gt; の形式の引数は、それぞれ選択されたプロセスIDまたはジョブ番号を持つジョブに出力を制限します。</target>
        </trans-unit>
        <trans-unit id="9fb75a7744b90e1d41f52f6bfdc6641917e4fac3" translate="yes" xml:space="preserve">
          <source>Arithmetic Expansion</source>
          <target state="translated">算術展開</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="043257e881ac5312780335efc43840ed60123921" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; may be used to redirect both stdout and stderr to the same process. (Note this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;).</source>
          <target state="translated">便宜上、パイプ &lt;code&gt;&amp;amp;|&lt;/code&gt; stdoutとstderrの両方を同じプロセスにリダイレクトするために使用できます。（これは &lt;code&gt;|&amp;amp;&lt;/code&gt; を使用するbashとは異なることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="26ae8c713f35540f776adc6fe2105492bc43a12d" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; redirects both stdout and stderr to the same process. Note that this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;.</source>
          <target state="translated">便宜上、パイプ &lt;code&gt;&amp;amp;|&lt;/code&gt; stdoutとstderrの両方を同じプロセスにリダイレクトします。これは、 &lt;code&gt;|&amp;amp;&lt;/code&gt; を使用するbashとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="adb74a4614fe1bdd5c15afb4396e8a04b015ea06" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same destination. For example, &lt;code&gt;echo hello &amp;amp;&amp;gt; all_output.txt&lt;/code&gt; redirects both stdout and stderr to the file &lt;code&gt;all_output.txt&lt;/code&gt;. This is equivalent to &lt;code&gt;echo hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;.</source>
          <target state="translated">便宜上、リダイレクト &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; を使用して、stdoutとstderrの両方を同じ宛先に転送できます。たとえば、 &lt;code&gt;echo hello &amp;amp;&amp;gt; all_output.txt&lt;/code&gt; 、stdoutとstderrの両方をファイル &lt;code&gt;all_output.txt&lt;/code&gt; にリダイレクトします。これは、 &lt;code&gt;echo hello &amp;gt; all_output.txt 2&amp;gt;&amp;amp;1&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="65d7ac6db0a68a35b045c043f69d790c7693b8ae" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same file.</source>
          <target state="translated">便宜上、リダイレクト &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; を使用して、stdoutとstderrの両方を同じファイルに転送できます。</target>
        </trans-unit>
        <trans-unit id="50e3ff1cb1d7c006c42b55ac24b776d0f7cba3be" translate="yes" xml:space="preserve">
          <source>As a convention, an uppercase name is usually used for exported variables, while lowercase variables are not exported. (&lt;code&gt;CMD_DURATION&lt;/code&gt; is an exception for historical reasons). This rule is not enforced by fish, but it is good coding practice to use casing to distinguish between exported and unexported variables.</source>
          <target state="translated">慣例として、エクスポートされる変数には通常大文字の名前が使用されますが、小文字の変数はエクスポートされません。（ &lt;code&gt;CMD_DURATION&lt;/code&gt; は、歴史的な理由から例外です）。このルールはfishによって強制されませんが、エクスポートされた変数とエクスポートされていない変数を区別するためにケーシングを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="df3e5f4a2209f9a0c0df95a3cff184e572efda6a" translate="yes" xml:space="preserve">
          <source>As a more comprehensive example, here's a commented excerpt of the completions for systemd's &lt;code&gt;timedatectl&lt;/code&gt;:</source>
          <target state="translated">より包括的な例として、systemdの &lt;code&gt;timedatectl&lt;/code&gt; の完了のコメント付き抜粋を次に示します。</target>
        </trans-unit>
        <trans-unit id="7e5f5d858c5cb06f89afc2d8f5a2724a03bbce58" translate="yes" xml:space="preserve">
          <source>As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="translated">命名規則として、エクスポートされた変数は大文字、エクスポートされていない変数は小文字になります。</target>
        </trans-unit>
        <trans-unit id="156a75280e065fb5a6b979a2a60062b81d648631" translate="yes" xml:space="preserve">
          <source>As a special case, &lt;code&gt;cd .&lt;/code&gt; is equivalent to &lt;code&gt;cd $PWD&lt;/code&gt;, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.</source>
          <target state="translated">特別な場合として、 &lt;code&gt;cd .&lt;/code&gt; &lt;code&gt;cd $PWD&lt;/code&gt; 相当します。これは、マウントポイントがリサイクルされた場合、またはディレクトリが削除されて再作成された場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8a76b3ccd2a02e439e9d0d634760228379ade658" translate="yes" xml:space="preserve">
          <source>As a special case, most of the time history substitution is used as &lt;code&gt;sudo !!&lt;/code&gt;. In that case just press</source>
          <target state="translated">特別な場合として、ほとんどの時間履歴置換は &lt;code&gt;sudo !!&lt;/code&gt; として使用されます!! 。その場合は押すだけ</target>
        </trans-unit>
        <trans-unit id="d6cca9051e4bad2090a097b384b44922e2c0a707" translate="yes" xml:space="preserve">
          <source>As a special case, when no scope is given and no variable has been defined the variable will belong to the scope of the currently executing &lt;em&gt;function&lt;/em&gt;. Note that this is different from the &lt;code&gt;--local&lt;/code&gt; flag, which would make the variable local to the current &lt;em&gt;block&lt;/em&gt;.</source>
          <target state="translated">特別な場合として、スコープが指定されておらず、変数が定義されていない場合、変数は現在実行中の&lt;em&gt;関数の&lt;/em&gt;スコープに属し&lt;em&gt;ます&lt;/em&gt;。これは、変数を現在の&lt;em&gt;ブロック&lt;/em&gt;に対してローカルにする &lt;code&gt;--local&lt;/code&gt; フラグとは異なることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="75218cdcc8abd1bc9e317919f08dbf1d9535b37e" translate="yes" xml:space="preserve">
          <source>As an example, here's a relatively simple bash prompt:</source>
          <target state="translated">例として、比較的シンプルなbashプロンプトを紹介します。</target>
        </trans-unit>
        <trans-unit id="473fe2640f48f2c3e356480b21727c05fe2a883f" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow,</source>
          <target state="translated">他の現代のシェルと同じように、上矢印。</target>
        </trans-unit>
        <trans-unit id="20487db156547ac9b0f8f6cda4758b76bf576cc9" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow, &lt;b&gt;&amp;uarr;&lt;/b&gt; recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">最新のシェルと同様に、上矢印、&lt;b&gt;&amp;uarr;&lt;/b&gt;は、最後に実行された行から、行全体を&lt;b&gt;呼び出し&lt;/b&gt;ます。1回のプレスで「!!」が置き換えられ、その後のプレスで「！-3」などが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="0aef70ec4e5a6bb50c1b6265dc481e6984473182" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut-semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">&lt;a href=&quot;#tut-semicolon&quot;&gt;セミコロンのセクションで&lt;/a&gt;述べたように、これは次のように複数行で記述することもできます。</target>
        </trans-unit>
        <trans-unit id="67ab2336a0f60cb48a293dcf13625cec05689fb2" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut_semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">&lt;a href=&quot;#tut_semicolon&quot;&gt;セミコロンのセクションで&lt;/a&gt;述べたように、これは次のように複数行で書くこともできます：</target>
        </trans-unit>
        <trans-unit id="4d0c80cc72f9bf8f12ec6bdcb82cf280e4cc33e4" translate="yes" xml:space="preserve">
          <source>As you see, you can use a range of indices, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">ご覧のとおり、インデックスの範囲を使用できます。詳細については、&lt;a href=&quot;#expand-index-range&quot;&gt;インデックス範囲の拡張&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="96f44aeed0b615ca47a0ff22e32c1de761aa65f7" translate="yes" xml:space="preserve">
          <source>As you type fish will suggest commands to the right of the cursor, in gray. For example:</source>
          <target state="translated">入力中、fishはカーソルの右側に灰色でコマンドを表示します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a52775e74dd1367202ccdfebc63ffe15c3fc2a94" translate="yes" xml:space="preserve">
          <source>Autoloading Functions</source>
          <target state="translated">オートロード機能</target>
        </trans-unit>
        <trans-unit id="4824104c7854d679befc6d384e2b164a387c5851" translate="yes" xml:space="preserve">
          <source>Autoloading also won't work for &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt;, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn't yet loaded the function. See the &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt; section for more information.</source>
          <target state="translated">また、関数がまだロードされていないときにイベントが発生すると、fishは関数が実行されることになっていることを認識できないため、&lt;a href=&quot;#event&quot;&gt;イベントハンドラー&lt;/a&gt;ではオートロードは機能しません。詳細については、&lt;a href=&quot;#event&quot;&gt;イベントハンドラーの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="95c7d742338312cc72973984211afee4d64d688a" translate="yes" xml:space="preserve">
          <source>Autoloading functions</source>
          <target state="translated">オートロード機能</target>
        </trans-unit>
        <trans-unit id="37ebd68a9ad79a75d4984b197d8be79759e981aa" translate="yes" xml:space="preserve">
          <source>Autoloading is not applicable to functions created by the &lt;code&gt;alias&lt;/code&gt; command. For functions simple enough that you prefer to use the &lt;code&gt;alias&lt;/code&gt; command to define them you'll need to put those commands in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; script or some other script run when the shell starts.</source>
          <target state="translated">自動ロードは、 &lt;code&gt;alias&lt;/code&gt; コマンドによって作成された関数には適用されません。 &lt;code&gt;alias&lt;/code&gt; コマンドを使用してそれらを定義することを好むほど単純な関数の場合、これらのコマンドを &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; スクリプトまたはシェルの起動時に実行されるその他のスクリプトに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="220cc2eeb742925687ae3d99a850d4e272eba270" translate="yes" xml:space="preserve">
          <source>Autoloading isn't applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.</source>
          <target state="translated">オートロードはエイリアスには適用されません。定義上、エイリアスコマンドの実行時に関数が作成されるため エイリアスをオートロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="7833f645e87e9d8459033a17299c17f343cc6bd7" translate="yes" xml:space="preserve">
          <source>Automatically loaded functions cannot be removed using &lt;code&gt;functions -e&lt;/code&gt;. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.</source>
          <target state="translated">自動ロードされた関数は、 &lt;code&gt;functions -e&lt;/code&gt; を使用して削除することはできません。定義ファイルを削除するか、$ fish_function_path変数を変更して、自動ロードされた関数を削除します。</target>
        </trans-unit>
        <trans-unit id="08b275b23c8db0abd0fd47a8278bb4a362d42dd2" translate="yes" xml:space="preserve">
          <source>Autosuggestions</source>
          <target state="translated">Autosuggestions</target>
        </trans-unit>
        <trans-unit id="a97c1fe699de2b5c57693a4ec6fbf5427cf3afca" translate="yes" xml:space="preserve">
          <source>Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.</source>
          <target state="translated">オートサジェスチョンは、最初の数文字を入力するだけで、頻繁に入力されるコマンドを素早く呼び出すことができる強力な方法です。また、ディレクトリの階層をナビゲートするための効率的なテクニックでもあります。</target>
        </trans-unit>
        <trans-unit id="b803480401e4c7ecbb2689fc9dd0c41c3a693dad" translate="yes" xml:space="preserve">
          <source>Available categories are listed by &lt;code&gt;fish --print-debug-categories&lt;/code&gt;. The &lt;code&gt;--debug&lt;/code&gt; option accepts a comma-separated list of categories, and supports glob syntax. The following command turns on debugging for &lt;em&gt;complete&lt;/em&gt;, &lt;em&gt;history&lt;/em&gt;, &lt;em&gt;history-file&lt;/em&gt;, and &lt;em&gt;profile-history&lt;/em&gt;, as well as the default categories:</source>
          <target state="translated">使用可能なカテゴリは、 &lt;code&gt;fish --print-debug-categories&lt;/code&gt; 一覧表示されます。 &lt;code&gt;--debug&lt;/code&gt; オプションは、カンマで区切られたカテゴリの一覧、およびサポートグロブ構文を受け付けます。次のコマンドは、&lt;em&gt;complete&lt;/em&gt;、&lt;em&gt;history&lt;/em&gt;、&lt;em&gt;history-file&lt;/em&gt;、&lt;em&gt;profile-history&lt;/em&gt;、およびデフォルトのカテゴリのデバッグをオンにします。</target>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="efb359fec2a662dc1a33a02af7733ec339aa7947" translate="yes" xml:space="preserve">
          <source>Back to &lt;a href=&quot;index#toc-commands&quot;&gt;command index&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;index#toc-commands&quot;&gt;コマンドインデックスに&lt;/a&gt;戻る。</target>
        </trans-unit>
        <trans-unit id="b6d421870c8ff86f5929b69f93de50dd0a6ad8a4" translate="yes" xml:space="preserve">
          <source>Background jobs</source>
          <target state="translated">バックグラウンドジョブ</target>
        </trans-unit>
        <trans-unit id="7eddf2e692bbe2944055253e903e03f92dc85c03" translate="yes" xml:space="preserve">
          <source>Backslash Escapes</source>
          <target state="translated">バックスラッシュのエスケープ</target>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="8fd78925dba59eef91afba0cdabe923520e5ee69" translate="yes" xml:space="preserve">
          <source>Backwards compatibility</source>
          <target state="translated">後方互換性</target>
        </trans-unit>
        <trans-unit id="898df0585456830b3e2596ce9c727b397a79ef3c" translate="yes" xml:space="preserve">
          <source>Bash and Zsh at least, though it is a POSIX extension</source>
          <target state="translated">POSIX拡張ではありますが、少なくともBashとZshは</target>
        </trans-unit>
        <trans-unit id="aef1ee8a9d6b03ca3f008e7820b03d1764d158f0" translate="yes" xml:space="preserve">
          <source>Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (&lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;).</source>
          <target state="translated">中括弧を使用して変数名とテキストを区切る場合は注意が必要です。上記の問題は、変数を中括弧ではなく二重引用符で囲むことで回避できます（ &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8135bc2e0facd903fae79ced79c0c26d6ddbce1f" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#path&quot;&gt;$PATH&lt;/a&gt; is a list, this expands to all the files in all the directories in it. And if there are no directories in $PATH, the right answer here is to expand to no files.</source>
          <target state="translated">&lt;a href=&quot;#path&quot;&gt;$ PATH&lt;/a&gt;はリストであるため、これはその中のすべてのディレクトリ内のすべてのファイルに展開されます。また、$ PATHにディレクトリがない場合、ここでの正しい答えは、ファイルなしに展開することです。</target>
        </trans-unit>
        <trans-unit id="7feaea8ff9fd56c39af0c7242d19cfc491332827" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Fish drops it in favor of perfecting the interactive history recall interface. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit. E.g. don't type &quot;sudo !!&quot; - first press Up, then Home, then type &quot;sudo &quot;.</source>
          <target state="translated">履歴の置換は対話的な行編集が可能になる前に発明された厄介なインターフェイスだからです。Fishは、対話的な履歴の呼び出しインターフェイスを完璧にするために、それを削除しました。切り替えにはちょっとした習慣の変更が必要です:古い行や単語を修正したい場合は、まずそれを呼び出してから編集してください。例えば、&quot;sudo !-最初にアップを押して、次にホームを押して、次にタイプ &quot;sudo &quot;.</target>
        </trans-unit>
        <trans-unit id="e48c07a2bec43ce33a721c00e3bf3a0e514f9626" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Instead of adding this pseudo-syntax, fish opts for nice history searching and recall features. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit.</source>
          <target state="translated">なぜなら、履歴の置換は、インタラクティブな行編集が可能になる前に発明された、不便なインターフェースだからです。fishでは、このような疑似構文を追加する代わりに、素敵な履歴検索と呼び出し機能を採用しています。切り替えには、ちょっとした習慣の変更が必要です。古い行や単語を修正したい場合は、まずそれを思い出し、それから編集します。</target>
        </trans-unit>
        <trans-unit id="918a6ddbaf25b0a2b366ca16189c773aaebd9954" translate="yes" xml:space="preserve">
          <source>Because shell scripts are written in many different languages, they need to carry information about which interpreter should be used to execute them. For this, they are expected to have a first line, the shebang line, which names the interpreter executable.</source>
          <target state="translated">シェルスクリプトはさまざまな言語で書かれているため、どのインタープリタを使って実行するかという情報を伝える必要があります。そのために、シェルスクリプトの最初の行には、実行可能なインタープリタの名前を記述するshebang行が必要です。</target>
        </trans-unit>
        <trans-unit id="6e2b48e7cf5a31dcb784896532986617c1886b80" translate="yes" xml:space="preserve">
          <source>Because this test is a shell builtin and not a standalone utility, using the -c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the &lt;code&gt;test&lt;/code&gt; utility in another shell.</source>
          <target state="translated">このテストは、シェル組み込みとしないスタンドアロンユーティリティであるため、呼び出すときに予想されるようにパイプ内から呼び出された場合、標準入力と出力のような特別なファイルディスクリプタに-cフラグを使用して同じ結果を返さないことが &lt;code&gt;test&lt;/code&gt; において有用性を別のシェル。</target>
        </trans-unit>
        <trans-unit id="9a3113248a139d6a914ae9cdb2ef995428b80e8e" translate="yes" xml:space="preserve">
          <source>Blocks and loops</source>
          <target state="translated">ブロックとループ</target>
        </trans-unit>
        <trans-unit id="2c0a4626f95b4339163a76408544aca1706ad80a" translate="yes" xml:space="preserve">
          <source>Both command substitution and shell variable expansion support accessing only specific items by providing a set of indices in square brackets. It's often needed to access a sequence of elements. To do this, use the range operator '&lt;code&gt;..&lt;/code&gt;' for this. A range '&lt;code&gt;a..b&lt;/code&gt;', where range limits 'a' and 'b' are integer numbers, is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. The negative range limits are calculated from the end of the array or command substitution. Note that invalid indexes for either end are silently clamped to one or the size of the array as appropriate.</source>
          <target state="translated">コマンド置換とシェル変数展開はどちらも、角かっこ内に一連のインデックスを提供することにより、特定のアイテムのみへのアクセスをサポートしています。多くの場合、一連の要素にアクセスする必要があります。これを行うには、範囲演算子 ' &lt;code&gt;..&lt;/code&gt; 'を使用します。範囲 ' &lt;code&gt;a..b&lt;/code&gt; '（範囲制限 'a'および 'b'は整数）は、一連のインデックス ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; 'または ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; 'は、「a」または「b」のどちらが高いかによって異なります。負の範囲の制限は、配列またはコマンド置換の最後から計算されます。どちらかの端の無効なインデックスは、適切に、1つまたは配列のサイズに暗黙的にクランプされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="75ffa6a25ecf8db0b72541843389d9eaf8b53a19" translate="yes" xml:space="preserve">
          <source>Both integers and floating point numbers are supported.</source>
          <target state="translated">整数と浮動小数点数の両方をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a427d5ed7ae29cac94543768854841dc58975513" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; subcommand support regular expressions when used with the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; option. The dialect is that of PCRE2.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--regex&lt;/code&gt; オプションとともに使用すると、 &lt;code&gt;match&lt;/code&gt; サブコマンドと &lt;code&gt;replace&lt;/code&gt; サブコマンドの両方が正規表現をサポートします。方言はPCRE2の方言です。</target>
        </trans-unit>
        <trans-unit id="511cb46636e15b326ac52fc0e55d4fdd22eb3466" translate="yes" xml:space="preserve">
          <source>Brace expansion</source>
          <target state="translated">ブレース拡張</target>
        </trans-unit>
        <trans-unit id="b2b396ea7eca30ae26382239ecff257585cae7ee" translate="yes" xml:space="preserve">
          <source>Bracket expansion</source>
          <target state="translated">ブラケット拡張</target>
        </trans-unit>
        <trans-unit id="b82bb93621eea3789efc2e789761d65a7d589377" translate="yes" xml:space="preserve">
          <source>Builtin commands</source>
          <target state="translated">組み込みコマンド</target>
        </trans-unit>
        <trans-unit id="b2f835b51cbf37c812c8d492c4e61154843f12f9" translate="yes" xml:space="preserve">
          <source>Builtins and other commands</source>
          <target state="translated">ビルトインとその他のコマンド</target>
        </trans-unit>
        <trans-unit id="e8f005fce61fdfc30668117115e325f0f651ccd7" translate="yes" xml:space="preserve">
          <source>Builtins for dealing with data, like &lt;a href=&quot;cmds/string#cmd-string&quot;&gt;string&lt;/a&gt; for strings and &lt;a href=&quot;cmds/math#cmd-math&quot;&gt;math&lt;/a&gt; for numbers, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; for counting lines or arguments</source>
          <target state="translated">&lt;a href=&quot;cmds/string#cmd-string&quot;&gt;文字列&lt;/a&gt;の文字列や&lt;a href=&quot;cmds/math#cmd-math&quot;&gt;数値の数学&lt;/a&gt;など、データを処理するための組み込み関数は、行や引数を&lt;a href=&quot;cmds/count#cmd-count&quot;&gt;数える&lt;/a&gt;ためにカウントします</target>
        </trans-unit>
        <trans-unit id="d6540e446642ea1f845cd9ba7c9976290616eef0" translate="yes" xml:space="preserve">
          <source>Builtins that manipulate the shell state - &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;cd&lt;/a&gt; changes directory, &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; sets variables</source>
          <target state="translated">シェルの状態を操作組み込みコマンド- &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;CDが&lt;/a&gt;ディレクトリを変更し、&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;セット&lt;/a&gt;組の変数</target>
        </trans-unit>
        <trans-unit id="298ae00ce8eb2f8d976a8abd3f5e489822080a54" translate="yes" xml:space="preserve">
          <source>But it also means that these commands can stop working at any moment once a matching file is encountered (because it has been created or the command is executed in a different working directory), and to deal with that bash needs workarounds like</source>
          <target state="translated">しかし、これは、一致するファイルが見つかると(ファイルが作成されたり、コマンドが異なる作業ディレクトリで実行されたりして)、これらのコマンドがいつでも動作しなくなる可能性があることを意味しており、これに対処するために、bashは次のような回避策を必要とします。</target>
        </trans-unit>
        <trans-unit id="3d71f7e1b353d405d0ac11988a391e51c106c8d8" translate="yes" xml:space="preserve">
          <source>But this is not:</source>
          <target state="translated">しかし、これは違います。</target>
        </trans-unit>
        <trans-unit id="cde26bb231339705624e1a2606178650cfe6ce34" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;$fish_function_path&lt;/code&gt; contains the following:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;$fish_function_path&lt;/code&gt; には次のものが含まれています。</target>
        </trans-unit>
        <trans-unit id="48c59a6753b3cfab58dea49a5311a9139ab88123" translate="yes" xml:space="preserve">
          <source>By default interactive commands are logged to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (typically &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、対話型コマンドは &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; （通常 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; ）に記録されます。</target>
        </trans-unit>
        <trans-unit id="32d73806ca1d3aebeb76dd86671a3241e81f5c68" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for completions, using the first available file that it finds:</source>
          <target state="translated">デフォルトでは、Fishは以下のように、最初に見つかった利用可能なファイルを使って補完を検索します。</target>
        </trans-unit>
        <trans-unit id="0d8a923544fbc788e85068131f51c4e6a9993b6b" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for functions, using the first available file that it finds:</source>
          <target state="translated">デフォルトでは、Fishは最初に見つけた利用可能なファイルを使用して、以下のように関数を検索します。</target>
        </trans-unit>
        <trans-unit id="061406f8d7e8bc7fa59a3f0158d04f4856dfa72b" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can be slow on a large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="translated">大規模なリポジトリでは &lt;code&gt;hg status&lt;/code&gt; が遅くなる可能性があるため、デフォルトでは現在のブランチのみが表示されます。変数 &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt; 設定することで、より有益なプロンプトを有効にできます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="59136d65df69881397a99de96dfa18d804e65129" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can take be slow on large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="translated">大規模なリポジトリでは &lt;code&gt;hg status&lt;/code&gt; が遅くなる可能性があるため、デフォルトでは現在のブランチのみが表示されます。変数 &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt; 設定することで、より有益なプロンプトを有効にできます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="394744edd93f9e7227797e7c6f44f8314ec9d0c5" translate="yes" xml:space="preserve">
          <source>By default, the output is a floating-point number with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">デフォルトでは、出力は末尾のゼロがトリミングされた浮動小数点数です。固定された表現を取得するために、 &lt;code&gt;--scale&lt;/code&gt; オプションには、使用することができる &lt;code&gt;--scale=0&lt;/code&gt; 整数出力用。</target>
        </trans-unit>
        <trans-unit id="315b1092a86cf296a40f2822b51753c337ac1521" translate="yes" xml:space="preserve">
          <source>By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">デフォルトでは、出力は後続ゼロが削除された浮動小数点数です。固定された表現を取得するために、 &lt;code&gt;--scale&lt;/code&gt; オプションには、使用することができる &lt;code&gt;--scale=0&lt;/code&gt; 整数出力用。</target>
        </trans-unit>
        <trans-unit id="72523c77472ad7835198f8fcd9e09a5badc11af9" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数を定義することにより、ユーザーは&lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;ブレークポイント&lt;/a&gt;コマンドに応答して入力を求めるときにカスタムプロンプトを選択できます。 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="db7a1b873a6bb02030899acd0c28b71468ea0843" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;code&gt;breakpoint&lt;/code&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数を定義することにより、ユーザーは &lt;code&gt;breakpoint&lt;/code&gt; コマンドに応答して入力を求めるときにカスタムプロンプトを選択できます。 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="be6b595ea352dde32c38a4fa33c350b05d798766" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_prompt&lt;/code&gt; function, the user can choose a custom prompt. The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 関数を定義することにより、ユーザーはカスタムプロンプトを選択できます。 &lt;code&gt;fish_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="630303d4e2fa4b039b2b6a8e3e8b5957dc1783d2" translate="yes" xml:space="preserve">
          <source>By ending a command with the &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) symbol, the user tells &lt;code&gt;fish&lt;/code&gt; to put the specified command into the background. A background process will be run simultaneous with &lt;code&gt;fish&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; will retain control of the terminal, so the program will not be able to read from the keyboard.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; （アンパサンド）記号でコマンドを終了することで、ユーザーは指定したコマンドをバックグラウンドに置くように &lt;code&gt;fish&lt;/code&gt; に指示します。バックグラウンドプロセスは、 &lt;code&gt;fish&lt;/code&gt; と同時に実行されます。 &lt;code&gt;fish&lt;/code&gt; は端末の制御を保持するため、プログラムはキーボードから読み取ることができません。</target>
        </trans-unit>
        <trans-unit id="3923f5578037b3542b2b19d15f49bde3629ec275" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the</source>
          <target state="translated">を押す前に円記号（ &lt;code&gt;\&lt;/code&gt; ）文字を挿入する</target>
        </trans-unit>
        <trans-unit id="02079690d5cebbe350c1aa5604a81e7a19265022" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the &lt;b&gt;Enter&lt;/b&gt; key, escaping the newline.</source>
          <target state="translated">&lt;b&gt;Enter&lt;/b&gt;キーを押す前にバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）文字を挿入して、改行をエスケープします。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c0242c0009de5a2873925ea6318eae2fc79708ca" translate="yes" xml:space="preserve">
          <source>By now it has become apparent that fish puts much more of a focus on its builtins and external commands rather than its syntax. So here are some helpful builtins and their rough equivalent in bash:</source>
          <target state="translated">これまでのところ、fishは構文よりもビルドインや外部コマンドに重点を置いていることが明らかになっています。そこで、いくつかの有用なビルトインと、それに大まかに対応するbashを紹介します。</target>
        </trans-unit>
        <trans-unit id="82a4b7b090d106c959549d48fe03da459c91c544" translate="yes" xml:space="preserve">
          <source>By pressing</source>
          <target state="translated">を押すことで</target>
        </trans-unit>
        <trans-unit id="5663475279a3c781c24c4811471a2f176e1db991" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt;, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.</source>
          <target state="translated">押して、&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;および&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt;、履歴検索も実行され、その代わりに、完全なコマンドラインを検索する、各コマンドラインは、それが実行前であろうと同じように別個の要素に分割され、履歴が要素マッチングを探索しますカーソルの下にある。</target>
        </trans-unit>
        <trans-unit id="894ba850efc456224525f2c8a25b95199c183915" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt;, the user stops a currently running foreground program and returns control to &lt;code&gt;fish&lt;/code&gt;. Some programs do not support this feature, or remap it to another key. GNU Emacs uses &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt;&lt;b&gt;z&lt;/b&gt; to stop running.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Zを&lt;/b&gt;押すと、ユーザーは現在実行中のフォアグラウンドプログラムを停止し、制御を &lt;code&gt;fish&lt;/code&gt; に戻します。一部のプログラムはこの機能をサポートしていないか、別のキーに再マッピングします。GNU Emacsは&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X &lt;/b&gt;&lt;b&gt;z&lt;/b&gt;を使用して実行を停止します。</target>
        </trans-unit>
        <trans-unit id="24eaf089af6a9daa271f7a6b0f06e6709ca1da8e" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">イベントハンドラースイッチの1つを使用して、特定のイベントで関数を自動的に実行することができます。ユーザーが使用して新しいイベントを生成する&lt;a href=&quot;#emit&quot;&gt;EMITの&lt;/a&gt;組み込みを。Fishは次の名前付きイベントを生成します：</target>
        </trans-unit>
        <trans-unit id="6a5c8721be6b4633186b4214510f8a5ef8c0f497" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">イベントハンドラスイッチの1つを使用することにより、特定のイベントで関数を自動的に実行することができます。ユーザーは、&lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt;ビルトインを使用して新しいイベントを生成できます。Fishは、次の名前付きイベントを生成します。</target>
        </trans-unit>
        <trans-unit id="702f8fce2752414a6a80cd6a6df6d1f2e4852509" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">&lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt;および&lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt;組み込みコマンドを使用することにより、ユーザーは現在実行中のジョブをフォアグラウンドまたはバックグラウンドに送信できます。</target>
        </trans-unit>
        <trans-unit id="8da67926c227ce4e24b10b06e71944960277e706" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;組み込みコマンドを使用すると、ユーザーは現在実行中のジョブをフォアグラウンドまたはバックグラウンドに送信できます。</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="329b39a4c29ca43f574809cc765406388620adc4" translate="yes" xml:space="preserve">
          <source>Calling this as &lt;code&gt;ll /tmp/&lt;/code&gt; will end up running &lt;code&gt;ls -l /tmp/&lt;/code&gt;, which will list the contents of /tmp.</source>
          <target state="translated">これを &lt;code&gt;ll /tmp/&lt;/code&gt; と呼ぶと、最終的に &lt;code&gt;ls -l /tmp/&lt;/code&gt; 実行され、/ tmpの内容が一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="1b6aff63c75bb0bffcdb7bfed5216e186365ff61" translate="yes" xml:space="preserve">
          <source>Cartesian Products</source>
          <target state="translated">直交製品</target>
        </trans-unit>
        <trans-unit id="fcb3f81706967bbcb598dd0c3292965cf75b975f" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when</source>
          <target state="translated">原因となる &lt;code&gt;fish&lt;/code&gt; 終了するときに</target>
        </trans-unit>
        <trans-unit id="da6418309e4149798278c2a545077667f8bdc404" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; is pressed.</source>
          <target state="translated">原因となる &lt;code&gt;fish&lt;/code&gt; するときに終了するには&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Dが&lt;/b&gt;押されました。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="c8b1d49fdfd53112a6dec6dbd017336ac207e99e" translate="yes" xml:space="preserve">
          <source>Change the value of the variable &lt;code&gt;fish_greeting&lt;/code&gt; or create a &lt;code&gt;fish_greeting&lt;/code&gt; function. For example, to remove the greeting use:</source>
          <target state="translated">変数 &lt;code&gt;fish_greeting&lt;/code&gt; の値を変更するか、 &lt;code&gt;fish_greeting&lt;/code&gt; 関数を作成します。たとえば、挨拶を削除するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f3de89fbff6985c921affb37ab3ad59fbe48b95c" translate="yes" xml:space="preserve">
          <source>Change your default shell to fish with:</source>
          <target state="translated">デフォルトのシェルを変更して釣りをします。</target>
        </trans-unit>
        <trans-unit id="5cf7dee78ee2192a9db50762b383926cd57dfe78" translate="yes" xml:space="preserve">
          <source>Change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;.</source>
          <target state="translated">デフォルトのシェルを &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt; 変更します。</target>
        </trans-unit>
        <trans-unit id="71ccc8e5afbb6617c107acbf3edf4c8bba5e695e" translate="yes" xml:space="preserve">
          <source>Change your default shell with:</source>
          <target state="translated">でデフォルトのシェルを変更します。</target>
        </trans-unit>
        <trans-unit id="122ab61fb2390b34bf8bb07c44168363d5d992db" translate="yes" xml:space="preserve">
          <source>Character classes, some of the more important:</source>
          <target state="translated">キャラクタークラス、いくつかの重要なものがあります。</target>
        </trans-unit>
        <trans-unit id="837815e7e725405b61d99f890160135ef054c4ec" translate="yes" xml:space="preserve">
          <source>Colors used with &lt;code&gt;showcolorhints&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;showcolorhints&lt;/code&gt; で使用される色：</target>
        </trans-unit>
        <trans-unit id="1aafc3262722e98fb6adb1e17c5cec1e303396d2" translate="yes" xml:space="preserve">
          <source>Combiners (And, Or, Not)</source>
          <target state="translated">コンバイナ(および、または、そうでないもの</target>
        </trans-unit>
        <trans-unit id="b6709a8adcdc85a8bf2a1db551231443bd8370ba" translate="yes" xml:space="preserve">
          <source>Combining different expansions</source>
          <target state="translated">異なる拡張を組み合わせる</target>
        </trans-unit>
        <trans-unit id="c3a7f8983f08bac31de202a0e80b371926256ff1" translate="yes" xml:space="preserve">
          <source>Combining lists (Cartesian Product)</source>
          <target state="translated">リストの結合(直交積</target>
        </trans-unit>
        <trans-unit id="9625ac94507491a715e0ffe2602f1661a6b23708" translate="yes" xml:space="preserve">
          <source>Command Substitutions</source>
          <target state="translated">コマンドの置換</target>
        </trans-unit>
        <trans-unit id="83637571c7cadd0f3ed544a2316197ea7b780571" translate="yes" xml:space="preserve">
          <source>Command line editor</source>
          <target state="translated">コマンドラインエディタ</target>
        </trans-unit>
        <trans-unit id="0bb0bf3bb5581e18abbaa7de52785c4cc0e3a748" translate="yes" xml:space="preserve">
          <source>Command mode</source>
          <target state="translated">コマンドモード</target>
        </trans-unit>
        <trans-unit id="a2bd119306b51a92961511ebb58609c5dd727601" translate="yes" xml:space="preserve">
          <source>Command mode is also known as normal mode.</source>
          <target state="translated">コマンドモードは通常モードとも呼ばれています。</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">コマンド参照</target>
        </trans-unit>
        <trans-unit id="2bbdbfd618344aa7db88dfcb6076ec5fa368eb17" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as '&lt;code&gt;-h&lt;/code&gt;', '&lt;code&gt;-help&lt;/code&gt;' or '&lt;code&gt;--help&lt;/code&gt;'. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; コマンド固有のタブ補完は、オプションと引数の概念に基づいています。オプションは、「として、ハイフンで始まるパラメータであり &lt;code&gt;-h&lt;/code&gt; 」、「 &lt;code&gt;-help&lt;/code&gt; 」または「 &lt;code&gt;--help&lt;/code&gt; 」。引数は、ハイフンで始まらないパラメーターです。 Fishは3つのスタイルのオプションを認識します。これは、getoptライブラリのGNUバージョンと同じスタイルです。これらのスタイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="305df9d243137d0ee7e5e7886662ca35cd3a1c64" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;-help&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt;. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU getopt library. These styles are:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; コマンド固有のタブ補完は、オプションと引数の概念に基づいています。オプションは、次のような、ハイフンで始まるパラメータです &lt;code&gt;-h&lt;/code&gt; 、 &lt;code&gt;-help&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; 。引数は、ハイフンで始まらないパラメーターです。Fishは、GNUgetoptライブラリと同じスタイルの3つのオプションスタイルを認識します。これらのスタイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="030d4685e9a5967e8a6f3c21ac5fdf12f5dd2ed5" translate="yes" xml:space="preserve">
          <source>Command substitution</source>
          <target state="translated">コマンドの置換</target>
        </trans-unit>
        <trans-unit id="530a1cffa7ec59af0b705c2ba3cd0b438869485e" translate="yes" xml:space="preserve">
          <source>Command substitutions</source>
          <target state="translated">コマンドの置換</target>
        </trans-unit>
        <trans-unit id="878863dedc3f406e3a65e48d9a354f6f067ef79a" translate="yes" xml:space="preserve">
          <source>Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:</source>
          <target state="translated">コマンドの置換は引用符の中では展開されません。その代わりに、引用符を一時的に閉じて、コマンド置換を追加して、それらを再び開くことができます。</target>
        </trans-unit>
        <trans-unit id="71c192adcb09f8e5eb78adbae51c316308911f17" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; are not expected to return a space-separated list of arguments. Instead they must return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; にあるコマンド置換は、スペースで区切られた引数のリストを返すとは想定されていません。代わりに、改行で区切られた引数のリストを返す必要があり、各引数にはオプションでタブ文字の後に引数の説明を続けることができます。この方法で提供される説明は、 &lt;code&gt;-d&lt;/code&gt; または &lt;code&gt;--description&lt;/code&gt; で指定された説明を上書きします。</target>
        </trans-unit>
        <trans-unit id="6f15bcd26685a9b5f35fff05d5697406b9d9926f" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; should return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Description given this way override a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; で見つかったコマンド置換は、引数の改行で区切られたリストを返す必要があります。各引数には、オプションでタブ文字とそれに続く引数の説明を含めることができます。この方法で指定された説明は、 &lt;code&gt;-d&lt;/code&gt; または &lt;code&gt;--description&lt;/code&gt; で指定された説明をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="874c75da73d00d89463a52a5b3bd6b12c296e9c3" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks ` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">コマンド置換では、あるコマンドの出力を別のコマンドの引数として使用します。他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; はコマンド置換にバックティックを使用しません。代わりに、括弧を使用します。</target>
        </trans-unit>
        <trans-unit id="a3571f5f1d40b027e13d061d92b54680b29bb7f2" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">コマンド置換は、あるコマンドの出力を別のコマンドへの引数として使用します。他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; はコマンド置換にバッククォートを使用しません。代わりに、括弧を使用します。</target>
        </trans-unit>
        <trans-unit id="6142617fc62ee1c8c0e5ce873248043d9ae29fc4" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, fish does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">コマンド置換とは、あるコマンドの出力を別のコマンドの引数として使用することです。他のシェルとは異なり,fishはコマンドの置換にバックスティックを使いません。代わりに括弧を使います.</target>
        </trans-unit>
        <trans-unit id="60fad1978dd0d2383a4d0467b58d1445598b7f62" translate="yes" xml:space="preserve">
          <source>Commandline tools often get various options and flags and positional arguments, and $argv would contain all of these.</source>
          <target state="translated">コマンドラインツールでは、さまざまなオプションやフラグ、位置引数を取得することが多いのですが、$argvにはこれらすべてが含まれます。</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="6e27986b922e889f25fa48d9ab585b90ad5fe736" translate="yes" xml:space="preserve">
          <source>Commands (builtins, functions and regular programs).</source>
          <target state="translated">コマンド(ビルトイン、関数、通常のプログラム)を使用します。</target>
        </trans-unit>
        <trans-unit id="18c716505f166951624f983b8be1c9941b96ea7b" translate="yes" xml:space="preserve">
          <source>Commands and arguments are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (by pressing the return key) or a semicolon &lt;code&gt;;&lt;/code&gt;. Multiple commands can be written on the same line by separating them with semicolons.</source>
          <target state="translated">コマンドと引数はスペース文字 &lt;code&gt;' '&lt;/code&gt; 区切られます。すべてのコマンドは、改行（リターンキーを押すことによる）またはセミコロンで終了し &lt;code&gt;;&lt;/code&gt; 。複数のコマンドは、セミコロンで区切ることにより、同じ行に書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="bf9c7a7be3e1f3bbb8b332baec1b3308eba8941c" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character ' '. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">コマンドとパラメーターは、スペース文字「」で区切ります。すべてのコマンドは、改行（つまり、Returnキーを押す）またはセミコロン 'で終了し &lt;code&gt;;&lt;/code&gt; '。セミコロンで区切ることにより、複数のコマンドを同じ行に記述できます。</target>
        </trans-unit>
        <trans-unit id="83546b9b7e63e4645609121c2d50d70ab2f8f27d" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">コマンドとパラメーターはスペース文字 &lt;code&gt;' '&lt;/code&gt; 区切られます。すべてのコマンドは、改行（つまり、リターンキーを押す）またはセミコロン 'で終了し &lt;code&gt;;&lt;/code&gt; '。複数のコマンドをセミコロンで区切ることにより、同じ行に書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="1c09ac3482bfc9b09262d71ce2a3754d63bdebcd" translate="yes" xml:space="preserve">
          <source>Commands can be chained with semicolons.</source>
          <target state="translated">コマンドはセミコロンで連結することができます。</target>
        </trans-unit>
        <trans-unit id="fce06e20e5f7f74aacccab40b59b75a56c8f7305" translate="yes" xml:space="preserve">
          <source>Comments</source>
          <target state="translated">Comments</target>
        </trans-unit>
        <trans-unit id="fb795ce7c94e011a1ecc0669bc2c232894415e28" translate="yes" xml:space="preserve">
          <source>Comments can also appear after a line like so:</source>
          <target state="translated">コメントは、以下のように行の後に表示することもできます。</target>
        </trans-unit>
        <trans-unit id="c7fc896ec27369aa3d8b46ed7bef7ce121078ca5" translate="yes" xml:space="preserve">
          <source>Comparison to other tools</source>
          <target state="translated">他のツールとの比較</target>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">互換性に関する注意事項</target>
        </trans-unit>
        <trans-unit id="af799f168326079cfa5fbcb1f17396cdcd478951" translate="yes" xml:space="preserve">
          <source>Completion of commands (builtins, functions and regular programs).</source>
          <target state="translated">コマンド(ビルドイン、関数、レギュラープログラム)の完成。</target>
        </trans-unit>
        <trans-unit id="e251e522a2899f0695ad97b7e9306c9baaf077df" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;' and '&lt;code&gt;**&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; 'や ' &lt;code&gt;**&lt;/code&gt; 'などのワイルドカードを含む文字列であっても、ファイル名の補完。</target>
        </trans-unit>
        <trans-unit id="3e42585f4a363d61f824319c2d4ccdcc434dd210" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;', '&lt;code&gt;**&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; '、 ' &lt;code&gt;**&lt;/code&gt; '、 ' &lt;code&gt;?&lt;/code&gt; などのワイルドカードを含む文字列であっても、ファイル名の補完 '。</target>
        </trans-unit>
        <trans-unit id="9c40677954f135a6a56c9a9c3b9199834c1a73af" translate="yes" xml:space="preserve">
          <source>Completion of shell variable names.</source>
          <target state="translated">シェル変数名の完成</target>
        </trans-unit>
        <trans-unit id="15f1e262b91eabd8e311927699155dff284efc75" translate="yes" xml:space="preserve">
          <source>Completion of usernames for tilde expansion.</source>
          <target state="translated">チルダ展開のためのユーザ名の完成</target>
        </trans-unit>
        <trans-unit id="8492522b516edbc0711ffad46d10e7abb03c888a" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manual, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">オペレーティングシステムのマニュアルから自動的に生成された補完。通常、 &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="5e2bb22e8c63c3bc4092f861769d982ce94a1df7" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manuals, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">オペレーティングシステムのマニュアルから自動的に生成された完了。通常は &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="77d31de015d4bc8d64c24ea654ff949d735a3c85" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">補完はコマンドラインまたは構成ファイルで定義できますが、自動的にロードすることもできます。Fishは、配列変数 &lt;code&gt;$fish_complete_path&lt;/code&gt; 内のすべてのディレクトリを自動的に検索し、定義された補完は、必要に応じて自動的にロードされます。補完ファイルには、補完するコマンドの名前とサフィックス「 &lt;code&gt;.fish&lt;/code&gt; 」からなるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="e197b8e42b1affde93333b42e719ef94bc91d71d" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">完了は、コマンドラインまたは構成ファイルで定義できますが、自動的にロードすることもできます。Fishは、リスト変数 &lt;code&gt;$fish_complete_path&lt;/code&gt; 内のディレクトリを自動的に検索し、定義された補完は必要に応じて自動的にロードされます。完了ファイルには、完了するコマンドの名前と接尾辞「 &lt;code&gt;.fish&lt;/code&gt; 」で構成されるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="a855e8bb312b045ab9c60f2a7d91c8ec5c6d57c7" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix &lt;code&gt;.fish&lt;/code&gt;.</source>
          <target state="translated">完了は、コマンドラインまたは構成ファイルで定義できますが、自動的にロードすることもできます。Fishは、リスト変数 &lt;code&gt;$fish_complete_path&lt;/code&gt; 内のディレクトリを自動的に検索し、定義された補完は必要に応じて自動的にロードされます。完了ファイルには、完了するコマンドの名前と接尾辞 &lt;code&gt;.fish&lt;/code&gt; で構成されるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="283dc81713d44871439c5c3d6ee0f195f29f3639" translate="yes" xml:space="preserve">
          <source>Components are added in the order they are given, and they are prepended to the path unless &lt;code&gt;--append&lt;/code&gt; is given (if $fish_user_paths is used, that means they are last in $fish_user_paths, which is itself prepended to $PATH, so they still stay ahead of the system paths).</source>
          <target state="translated">コンポーネントは指定された順序で追加され、 &lt;code&gt;--append&lt;/code&gt; が指定されていない限り、パスの前に追加されます（$ fish_user_pathsが使用されている場合、コンポーネントは$ fish_user_pathsの最後にあり、それ自体が$ PATHの前に追加されるため、引き続きシステムパスの先を行く）。</target>
        </trans-unit>
        <trans-unit id="e9decbb377f6c4dd4591226893998f380a233f4f" translate="yes" xml:space="preserve">
          <source>Components are normalized by &lt;a href=&quot;realpath#cmd-realpath&quot;&gt;realpath&lt;/a&gt;. This means that trailing slashes are ignored and relative paths are made absolute (but symlinks are not resolved). If a component already exists, it is not added again and stays in the same place unless the &lt;code&gt;--move&lt;/code&gt; switch is given.</source>
          <target state="translated">コンポーネントは&lt;a href=&quot;realpath#cmd-realpath&quot;&gt;realpath&lt;/a&gt;によって正規化されます。これは、末尾のスラッシュが無視され、相対パスが絶対パスになることを意味します（ただし、シンボリックリンクは解決されません）。コンポーネントがすでに存在する場合、 &lt;code&gt;--move&lt;/code&gt; スイッチが指定されていない限り、コンポーネントは再度追加されず、同じ場所にとどまります。</target>
        </trans-unit>
        <trans-unit id="7459a1dd314e140f10e2be4ec65979e72c902ac1" translate="yes" xml:space="preserve">
          <source>Conditional execution of code and flow control</source>
          <target state="translated">コードの条件付き実行とフロー制御</target>
        </trans-unit>
        <trans-unit id="0d5f4aeff7e3312bef6ba63f6a5b4ba1f78a94cb" translate="yes" xml:space="preserve">
          <source>Conditionals (If, Else, Switch)</source>
          <target state="translated">条件式 (If,Else,Switch)</target>
        </trans-unit>
        <trans-unit id="5506eb6161a07356d96e91770d25d5a0f22200ef" translate="yes" xml:space="preserve">
          <source>Conditions</source>
          <target state="translated">Conditions</target>
        </trans-unit>
        <trans-unit id="719fae22a2cd4fb971f775638bdd50f6e63161da" translate="yes" xml:space="preserve">
          <source>Configurable greeting</source>
          <target state="translated">設定可能な挨拶</target>
        </trans-unit>
        <trans-unit id="f0b58e3b2ee0b9289c02bd1984243913025c6fa6" translate="yes" xml:space="preserve">
          <source>Configuration files are evaluated in the following order:</source>
          <target state="translated">設定ファイルは以下の順序で評価されます。</target>
        </trans-unit>
        <trans-unit id="f4e0d62ab20b29e8432ac06936c92f52d1fc4b42" translate="yes" xml:space="preserve">
          <source>Configuration shipped with fish, which should not be edited, in &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (usually &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; （通常は &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt; ）内の、編集されるべきではないfishに付属する構成</target>
        </trans-unit>
        <trans-unit id="22ff08f353e570d20e5a6366fd00500ccc60eb5a" translate="yes" xml:space="preserve">
          <source>Configuration snippets in files ending in &lt;code&gt;.fish&lt;/code&gt;, in the directories:</source>
          <target state="translated">次のディレクトリにある、 &lt;code&gt;.fish&lt;/code&gt; で終わるファイルの構成スニペット：</target>
        </trans-unit>
        <trans-unit id="d916ac2852cd35aba927b6e5183496dfbb68f253" translate="yes" xml:space="preserve">
          <source>Consider, that &lt;code&gt;bash&lt;/code&gt; is also a command. With &lt;code&gt;man bash&lt;/code&gt; you can see that there are two ways to do this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; もコマンドであると考えてください。 &lt;code&gt;man bash&lt;/code&gt; あなたはこれを行うには、2つの方法があることを確認できます。</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="0cc02a08eefa55c45a56e32d67506c46e7a700b3" translate="yes" xml:space="preserve">
          <source>Control and shift don't work simultaneously</source>
          <target state="translated">コントロールとシフトは同時には機能しない</target>
        </trans-unit>
        <trans-unit id="ff899dcd6f7ebd6a861299e03974633bfd5ad6eb" translate="yes" xml:space="preserve">
          <source>Control+A</source>
          <target state="translated">Control+A</target>
        </trans-unit>
        <trans-unit id="c9e55fac4bb2f73b8827737eba3f6fedb7f63ad3" translate="yes" xml:space="preserve">
          <source>Control+B</source>
          <target state="translated">Control+B</target>
        </trans-unit>
        <trans-unit id="e1e40212e505bb255ad247fb75a7c69252c1147c" translate="yes" xml:space="preserve">
          <source>Control+C</source>
          <target state="translated">Control+C</target>
        </trans-unit>
        <trans-unit id="7fad1011a56dea667e4e890b0f054b35b096ceac" translate="yes" xml:space="preserve">
          <source>Control+D</source>
          <target state="translated">Control+D</target>
        </trans-unit>
        <trans-unit id="8a337ce2c51c129c9e8bc692ea6dd78eba4574de" translate="yes" xml:space="preserve">
          <source>Control+E</source>
          <target state="translated">Control+E</target>
        </trans-unit>
        <trans-unit id="19d71b4677f714637e6947b67f44a1239e3ad114" translate="yes" xml:space="preserve">
          <source>Control+F</source>
          <target state="translated">Control+F</target>
        </trans-unit>
        <trans-unit id="de4ae039698d198c307859fcbedac2883a1d1f6c" translate="yes" xml:space="preserve">
          <source>Control+K</source>
          <target state="translated">Control+K</target>
        </trans-unit>
        <trans-unit id="b263435b368ba4e5650bd91db945e54b75f37e4b" translate="yes" xml:space="preserve">
          <source>Control+L</source>
          <target state="translated">Control+L</target>
        </trans-unit>
        <trans-unit id="d930468655a2e8de99ecf073632706dc9fd790c0" translate="yes" xml:space="preserve">
          <source>Control+N</source>
          <target state="translated">Control+N</target>
        </trans-unit>
        <trans-unit id="6f5e6052e453bf4cbc730651ad83bd4c9bf16d04" translate="yes" xml:space="preserve">
          <source>Control+P</source>
          <target state="translated">Control+P</target>
        </trans-unit>
        <trans-unit id="5d54970f5eafb4a1a71ec49ea17c31b605d918b7" translate="yes" xml:space="preserve">
          <source>Control+U</source>
          <target state="translated">Control+U</target>
        </trans-unit>
        <trans-unit id="f5ce6985615ea22bf239b5f5712adbd6c7392c11" translate="yes" xml:space="preserve">
          <source>Control+V</source>
          <target state="translated">Control+V</target>
        </trans-unit>
        <trans-unit id="1c73dbe8cbdd8b0d4324b844077a83d8b67ad535" translate="yes" xml:space="preserve">
          <source>Control+W</source>
          <target state="translated">Control+W</target>
        </trans-unit>
        <trans-unit id="c312ad573f898197b4f8b8123f1e8f824522fab2" translate="yes" xml:space="preserve">
          <source>Control+X</source>
          <target state="translated">Control+X</target>
        </trans-unit>
        <trans-unit id="232d7346f91b802a342b5f2452c2d1f067dcf48a" translate="yes" xml:space="preserve">
          <source>Control+Y</source>
          <target state="translated">Control+Y</target>
        </trans-unit>
        <trans-unit id="723f6bbc308bdf50335b19533e6f0eef28ea6810" translate="yes" xml:space="preserve">
          <source>Control+Z</source>
          <target state="translated">Control+Z</target>
        </trans-unit>
        <trans-unit id="6e141812a128e9ade7d8324a0d80b50782c0a03d" translate="yes" xml:space="preserve">
          <source>Control+t</source>
          <target state="translated">Control+t</target>
        </trans-unit>
        <trans-unit id="a15e8d4f58e7f1095da1dbbfdaef24ce49ca88bd" translate="yes" xml:space="preserve">
          <source>Conversion can fail, e.g. &quot;102.234&quot; can't losslessly convert to an integer, causing printf to print an error. If you are okay with losing information, silence errors with &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt;.</source>
          <target state="translated">変換が失敗する可能性があります。たとえば、「102.234」はロスレスで整数に変換できず、printfがエラーを出力します。情報を失っても大丈夫な場合は、 &lt;code&gt;2&amp;gt;/dev/null&lt;/code&gt; でエラーを消音します。</target>
        </trans-unit>
        <trans-unit id="e3cc27f9da6f6edecf17e1636fab048c5c38faaf" translate="yes" xml:space="preserve">
          <source>Copy and paste (Kill Ring)</source>
          <target state="translated">コピー&amp;ペースト(キルリング</target>
        </trans-unit>
        <trans-unit id="af4e866be52de67a1c27087ff82b1fd31d26bf20" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the</source>
          <target state="translated">外部からのコピー&amp;ペーストもサポートされています。</target>
        </trans-unit>
        <trans-unit id="26f56d23fbcc33866ced8719ced9441dcfe31145" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; bindings and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;. When pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">外部からのコピーと貼り付けもサポートされています&lt;em&gt;。Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt;バインディングとターミナルの貼り付け機能の両方で、魚が「ブラケット貼り付けモード」を有効にします。単一引用符の内側に貼り付ける場合、貼り付けられた単一引用符とバックスラッシュは自動的にエスケープされるため、後に引用符を閉じるだけで結果を単一のトークンとして使用できます。</target>
        </trans-unit>
        <trans-unit id="5f7dd81f0f257215aaa86927e90c28289f61b85c" translate="yes" xml:space="preserve">
          <source>Copying a function using &lt;code&gt;-c&lt;/code&gt; copies only the body of the function, and does not attach any event notifications from the original function.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; を使用して関数をコピーすると、関数の本体のみがコピーされ、元の関数からのイベント通知は添付されません。</target>
        </trans-unit>
        <trans-unit id="8af724f142e3bcf63776dbe6537c41e40e58d534" translate="yes" xml:space="preserve">
          <source>Curly braces can be used to write comma-separated lists. They will be expanded with each element becoming a new parameter, with the surrounding string attached. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="translated">中括弧は、コンマで区切られたリストを書くのに使用できます。リストは展開され、各要素が新しいパラメータとなり、周囲の文字列が付加されます。これは、入力の手間を省いたり、変数名を周囲の文字列から分離したりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="bb539e2cde83f162d3671d028d8f300a026106c8" translate="yes" xml:space="preserve">
          <source>Custom bindings</source>
          <target state="translated">カスタムバインディング</target>
        </trans-unit>
        <trans-unit id="f31494e39f0bc5dcc83282298e8d3d31f1b25880" translate="yes" xml:space="preserve">
          <source>Customizing the name of the history file</source>
          <target state="translated">履歴ファイルの名前をカスタマイズする</target>
        </trans-unit>
        <trans-unit id="50c9e8d5fc98727b4bbc93cf5d64a68db647f04f" translate="yes" xml:space="preserve">
          <source>D</source>
          <target state="translated">D</target>
        </trans-unit>
        <trans-unit id="db41123e84c0902793147f63b13aabdfd4079b62" translate="yes" xml:space="preserve">
          <source>Debug messages output to stderr by default. Note that if &lt;code&gt;fish_trace&lt;/code&gt; is set, execution tracing also outputs to stderr by default. You can output to a file using the &lt;code&gt;--debug-output&lt;/code&gt; option:</source>
          <target state="translated">デフォルトでstderrに出力されるデバッグメッセージ。 &lt;code&gt;fish_trace&lt;/code&gt; が設定されている場合、実行トレースもデフォルトでstderrに出力されることに注意してください。 &lt;code&gt;--debug-output&lt;/code&gt; オプションを使用してファイルに出力できます。</target>
        </trans-unit>
        <trans-unit id="895b27c88016513d278a0ce3dc0663fae3829d58" translate="yes" xml:space="preserve">
          <source>Debugging</source>
          <target state="translated">Debugging</target>
        </trans-unit>
        <trans-unit id="362f967d51916d26cb3fb3386fd62a1f41da8b5f" translate="yes" xml:space="preserve">
          <source>Debugging fish scripts</source>
          <target state="translated">フィッシュスクリプトのデバッグ</target>
        </trans-unit>
        <trans-unit id="315274f3206d01a86dd78cefa7038f1b4d10af82" translate="yes" xml:space="preserve">
          <source>Default Shell</source>
          <target state="translated">デフォルトシェル</target>
        </trans-unit>
        <trans-unit id="0d9b8d3822abc3f61828cee574cfdd15ad494e6d" translate="yes" xml:space="preserve">
          <source>Define a single option spec for the boolean help flag:</source>
          <target state="translated">boolean helpフラグのための単一のオプション仕様を定義します。</target>
        </trans-unit>
        <trans-unit id="e80de1e5ae488060e2716016f7f8aabdda0492f6" translate="yes" xml:space="preserve">
          <source>Defining aliases</source>
          <target state="translated">エイリアスの定義</target>
        </trans-unit>
        <trans-unit id="a248cf76417fc663be9470cb1f177b04a90df2b1" translate="yes" xml:space="preserve">
          <source>Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you'll only want to use the global scope when defining abbreviations in a startup script like &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; like this:</source>
          <target state="translated">グローバルスコープでの省略形の定義は、ユニバーサルスコープ（デフォルト）よりもわずかに高速です。ただし、一般に、 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ような起動スクリプトで略語を定義する場合は、次のようにグローバルスコープのみを使用します。</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="866bd39fb03e1e2606544d3942b36910500aff65" translate="yes" xml:space="preserve">
          <source>Detect support for italics, dim, reverse and other modes.</source>
          <target state="translated">イタリック、ディム、リバースなどのモードのサポートを検出します。</target>
        </trans-unit>
        <trans-unit id="8d1bc9b98791a1beb71b16bbdb2e8e4cbe2fd1c7" translate="yes" xml:space="preserve">
          <source>Detected errors include:</source>
          <target state="translated">検出されたエラーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="482b5faaf6627c970511f89ada3a0b3e4024b41b" translate="yes" xml:space="preserve">
          <source>Different widths for multiple ambiguous width characters - there is no way for fish to know which width you assign to each character.</source>
          <target state="translated">曖昧な幅の複数のキャラクターに異なる幅を設定する-各キャラクターにどの幅を割り当てたかを魚が知る方法はありません。</target>
        </trans-unit>
        <trans-unit id="e74fb557e8c3a95044774ebcdfc7cc89899fe824" translate="yes" xml:space="preserve">
          <source>Directories for other software to put their own functions. These are in the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable, in a subdirectory called &lt;code&gt;fish/vendor_functions.d&lt;/code&gt;. The default is usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">他のソフトウェアが独自の機能を配置するためのディレクトリ。これらは、 &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; 環境変数のディレクトリ、 &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; というサブディレクトリにあります。デフォルトは通常 &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; および &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a6988a4d06cb28f2b88589d324d9330152ae8f40" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own completions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">サードパーティソフトウェアベンダーが自社のソフトウェアの完成品を出荷するためのディレクトリ。魚の検索でディレクトリ &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; のための環境変数 &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; ディレクトリ。この変数が定義されていない場合、デフォルトでは通常 &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; および &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt; が検索されます。</target>
        </trans-unit>
        <trans-unit id="aec9d653d04f24c3ef71638a5da336dde6f29983" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt;</source>
          <target state="translated">サードパーティソフトウェアベンダーが自社のソフトウェア用に独自の構成スニペットを出荷するためのディレクトリ。魚の検索でディレクトリ &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; のための環境変数 &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; ディレクトリ。この変数が定義されていない場合、デフォルトでは通常、/ &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; / &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt; / fish /vendor_conf.dおよび/usr/local/share/fish/vendor_conf.dが検索されます。</target>
        </trans-unit>
        <trans-unit id="d75fce19d8009441f1839be94513635b011e4443" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own functions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">サードパーティソフトウェアベンダーが自社のソフトウェア用に独自の機能を出荷するためのディレクトリ。魚の検索でディレクトリ &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; のための環境変数 &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; ディレクトリ。この変数が定義されていない場合、デフォルトでは通常、/ &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; / &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt; / fish /vendor_functions.dおよび/usr/local/share/fish/vendor_functions.dが検索されます。</target>
        </trans-unit>
        <trans-unit id="6d2a9982635d2409c02f5b95d11ee21f5379209a" translate="yes" xml:space="preserve">
          <source>Directory history</source>
          <target state="translated">ディレクトリの歴史</target>
        </trans-unit>
        <trans-unit id="48664135580ccdc839fc4a742e0c82de087aaf2d" translate="yes" xml:space="preserve">
          <source>Directory stack</source>
          <target state="translated">ディレクトリスタック</target>
        </trans-unit>
        <trans-unit id="1d9fcf2c0d627af5418ba7f9c21ee7f737ced69d" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">&lt;a href=&quot;#initialization&quot;&gt;config.fishの&lt;/a&gt;ユニバーサル変数に追加しないでください。これらの変数は、新しいシェルインスタンスごとに長くなります。代わりに、コマンドラインで一度設定するだけです。</target>
        </trans-unit>
        <trans-unit id="dee15571e38bfab40555f11f3b66434d50353195" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">&lt;a href=&quot;index#initialization&quot;&gt;config.fishの&lt;/a&gt;ユニバーサル変数に追加しないでください。これらの変数は、新しいシェルインスタンスごとに長くなるためです。代わりに、コマンドラインで一度設定するだけです。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="5fe4b6029ee0d921705a5109d21de883623ecfe4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;case&lt;/code&gt; command is given one or more parameters. The first &lt;code&gt;case&lt;/code&gt; command with a parameter that matches the string specified in the switch command will be evaluated. &lt;code&gt;case&lt;/code&gt; parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.</source>
          <target state="translated">各 &lt;code&gt;case&lt;/code&gt; コマンドには、1つ以上のパラメーターが与えられます。switchコマンドで指定された文字列と一致するパラメーターを持つ最初の &lt;code&gt;case&lt;/code&gt; コマンドが評価されます。 &lt;code&gt;case&lt;/code&gt; パラメータにはワイルドカードを含めることができます。これらは、ファイル名を使用した通常のワイルドカード展開を回避するために、エスケープまたは引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="2376e9b5e9f26d5da46eadee722d0d85257f2173" translate="yes" xml:space="preserve">
          <source>Each OPTION_SPEC can be written in the domain specific language &lt;a href=&quot;#argparse-option-specs&quot;&gt;described below&lt;/a&gt; or created using the companion &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">各&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#argparse-option-specs&quot;&gt;以下で説明する&lt;/a&gt;ドメイン固有の言語で作成するか、対応するfish_optコマンドを使用して作成できます。すべてのOPTION_SPECは、argparseフラグの後、解析する引数からそれらを分離する &lt;code&gt;--&lt;/code&gt; 前に置く必要があります。</target>
        </trans-unit>
        <trans-unit id="ff6eefef0d522918fc2f6f5c0e0cbad0e9617574" translate="yes" xml:space="preserve">
          <source>Each abbreviation is stored in its own global or universal variable. The name consists of the prefix &lt;code&gt;_fish_abbr_&lt;/code&gt; followed by the WORD after being transformed by &lt;code&gt;string escape style=var&lt;/code&gt;. The WORD cannot contain a space but all other characters are legal.</source>
          <target state="translated">各省略形は、独自のグローバル変数またはユニバーサル変数に格納されます。名前は、プレフィックス &lt;code&gt;_fish_abbr_&lt;/code&gt; と、 &lt;code&gt;string escape style=var&lt;/code&gt; によって変換された後のWORDで構成されます。 WORDにスペースを含めることはできませんが、他のすべての文字は有効です。</target>
        </trans-unit>
        <trans-unit id="d74989fad97472ddc89cce17da864871ef77470f" translate="yes" xml:space="preserve">
          <source>Each option specification (&lt;code&gt;OPTION_SPEC&lt;/code&gt;) is written in the &lt;a href=&quot;#option-specifications&quot;&gt;domain specific language&lt;/a&gt; described below. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">各オプション仕様（ &lt;code&gt;OPTION_SPEC&lt;/code&gt; ）は、以下で説明する&lt;a href=&quot;#option-specifications&quot;&gt;ドメイン固有言語で&lt;/a&gt;記述されています。すべてのOPTION_SPECは、argparseフラグの後、解析対象の引数からフラグを分離する &lt;code&gt;--&lt;/code&gt; 前に表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="b889c20fc68e023be13868891975e0e722a60b35" translate="yes" xml:space="preserve">
          <source>Each option specification consists of:</source>
          <target state="translated">各オプションの仕様は以下のように構成されています。</target>
        </trans-unit>
        <trans-unit id="0057637534d28604b43896d07253a1705495ce04" translate="yes" xml:space="preserve">
          <source>Each option specification is a string composed of</source>
          <target state="translated">各オプション指定は</target>
        </trans-unit>
        <trans-unit id="6f81b2ad5664bf03465a7658ea6e8325e7d4da48" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in a var name of the form &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can't be used. So there will always be &lt;code&gt;_flag_X&lt;/code&gt; var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., &lt;code&gt;_flag_help&lt;/code&gt;) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.</source>
          <target state="translated">ARGリストに表示される各オプションは、 &lt;code&gt;_flag_X&lt;/code&gt; という形式のvar名になります。ここで、 &lt;code&gt;X&lt;/code&gt; は短いフラグ文字と長いフラグ名です。OPTION_SPECは、使用できない場合でも、常に短いフラグが必要です。したがって、対応する短いフラグまたは長いフラグが表示される場合、短いフラグ文字を使用して &lt;code&gt;_flag_X&lt;/code&gt; var が常に設定されます。長いフラグ名var（例： &lt;code&gt;_flag_help&lt;/code&gt; ）は、OPTION_SPECに長いフラグ名が含まれている場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="e997907e65d29076dbe60a2d558dae9423186b1d" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in variables named &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name (if they are defined). For example a &lt;code&gt;--help&lt;/code&gt; option could cause argparse to define one variable called &lt;code&gt;_flag_h&lt;/code&gt; and another called &lt;code&gt;_flag_help&lt;/code&gt;.</source>
          <target state="translated">ARGリストに表示される各オプションは、 &lt;code&gt;_flag_X&lt;/code&gt; という名前の変数になります。ここで、 &lt;code&gt;X&lt;/code&gt; は短いフラグ文字と長いフラグ名（定義されている場合）です。例えば、 &lt;code&gt;--help&lt;/code&gt; オプションと呼ばれる一つの変数を定義するargparse引き起こす可能性があり &lt;code&gt;_flag_h&lt;/code&gt; と別のと呼ばれる &lt;code&gt;_flag_help&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4021549f9ebbee6b0f5cef8bdf2b7b2e3f048df2" translate="yes" xml:space="preserve">
          <source>Each stream has a number called the file descriptor (FD): 0 for stdin, 1 for stdout, and 2 for stderr.</source>
          <target state="translated">各ストリームには、ファイルディスクリプター(FD)と呼ばれる番号がついており、0がstdin、1がstdout、2がstderrとなっています。</target>
        </trans-unit>
        <trans-unit id="071ccbc08889857d3dcdf38731f768b6399d8db1" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">ファイル &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 編集し、存在しない場合は作成します（先頭のピリオドに注意してください）。</target>
        </trans-unit>
        <trans-unit id="8e616be3dc7c9321e6c185eefc4e5da9e20b8fc2" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">ファイル &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]を&lt;/a&gt;編集し、存在しない場合は作成します（先頭のピリオドに注意してください）。</target>
        </trans-unit>
        <trans-unit id="c2f792ffbea95a6ff2321be7a5cc814288648907" translate="yes" xml:space="preserve">
          <source>Emacs mode commands</source>
          <target state="translated">Emacs モードコマンド</target>
        </trans-unit>
        <trans-unit id="e37e0760e90e51eeb2c376daa6dc4d1540039d7b" translate="yes" xml:space="preserve">
          <source>Enable 24-bit (&quot;true-color&quot;) even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE-based terminals like Gnome Terminal, Konsole and iTerm2.</source>
          <target state="translated">24 ビット (「トゥルーカラー」)を有効にします。これには、Gnome Terminal、Konsole、iTerm2 のような最新の xterm、VTE ベースの端末が含まれます。</target>
        </trans-unit>
        <trans-unit id="f2e2f09ac368b8dd74db605df791dbefe19bfe80" translate="yes" xml:space="preserve">
          <source>Enable 256 colors if $TERM contains &quot;xterm&quot;, except for known exceptions (like MacOS 10.6 Terminal.app)</source>
          <target state="translated">既知の例外(MacOS 10.6 Terminal.appなど)を除き、$TERMに &quot;xterm &quot;が含まれている場合に256色を有効にします。</target>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="ec051ec1637eae870268ca59dd86fdb39e8d550c" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;exit&lt;/code&gt; to exit a fish shell:</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; を入力して魚の殻を終了します。</target>
        </trans-unit>
        <trans-unit id="7c9220e6e7b88faa6f56901c8353dec4b3544958" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;fish&lt;/code&gt; to start a fish shell:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; を入力して魚の殻を開始します。</target>
        </trans-unit>
        <trans-unit id="91cbf01f5e4c3a57e74bdd072bfdd05853b57d91" translate="yes" xml:space="preserve">
          <source>Environment variables such as &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;TZ&lt;/code&gt; can be set universally using &lt;code&gt;set -Ux&lt;/code&gt;. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The &lt;a href=&quot;index#variables-scope&quot;&gt;variable scopes&lt;/a&gt; are searched from the &quot;inside out&quot;, which means that local variables are checked first, followed by global variables, and finally universal variables.</source>
          <target state="translated">&lt;code&gt;EDITOR&lt;/code&gt; や &lt;code&gt;TZ&lt;/code&gt; などの環境変数は、 &lt;code&gt;set -Ux&lt;/code&gt; を使用して汎用的に設定できます。ただし、（ログインスクリプトやシステム管理者などによって）fishが起動する前にすでに設定されている環境変数がある場合は、グローバル変数としてfishにインポートされます。&lt;a href=&quot;index#variables-scope&quot;&gt;変数のスコープは&lt;/a&gt;グローバル変数、そして最終的に普遍的変数に続いて、ローカル変数が最初にチェックされていることを意味し、「裏返し」から検索されます。</target>
        </trans-unit>
        <trans-unit id="91fe509047635fbdbcb723577a02003cc2cfa678" translate="yes" xml:space="preserve">
          <source>Erase the &lt;code&gt;gco&lt;/code&gt; abbreviation.</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; の省略形を消去します。</target>
        </trans-unit>
        <trans-unit id="ff52c78ae7ffcce10c7f75782c08e760a3858c53" translate="yes" xml:space="preserve">
          <source>Errors and Return Status</source>
          <target state="translated">エラーとリターンステータス</target>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">脱出シーケンス</target>
        </trans-unit>
        <trans-unit id="5ac5583d5304bf1f408cc93a0ac0fc2d52da7d9c" translate="yes" xml:space="preserve">
          <source>Escaping Characters</source>
          <target state="translated">キャラクターの脱出</target>
        </trans-unit>
        <trans-unit id="99b19a8ca89a3f1d945ac43f31bfc30845d9b033" translate="yes" xml:space="preserve">
          <source>Escaping characters</source>
          <target state="translated">文字をエスケープする</target>
        </trans-unit>
        <trans-unit id="b5df4081fbed4b9e32929d5db8ab7dee3db26c47" translate="yes" xml:space="preserve">
          <source>Especially powerful is the recursive wildcard ** which searches directories recursively:</source>
          <target state="translated">特に強力なのは、ディレクトリを再帰的に検索する再帰的ワイルドカード**です。</target>
        </trans-unit>
        <trans-unit id="23467b26d86b98db62af718c7193952aae1cc1d7" translate="yes" xml:space="preserve">
          <source>Event blocks should not be confused with code blocks, which are created with &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">イベントブロックは、 &lt;code&gt;begin&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; で作成されたコードブロックと混同しないでください。</target>
        </trans-unit>
        <trans-unit id="1d0a0bc46dabda5a6dbcf0a2f18e3e9acbc27ae7" translate="yes" xml:space="preserve">
          <source>Event handlers</source>
          <target state="translated">イベントハンドラ</target>
        </trans-unit>
        <trans-unit id="f4b281b637c899622427e67191026015a7018908" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">コンピューター上のすべてのプログラムは、 &lt;code&gt;fish&lt;/code&gt; のコマンドとして使用できます。プログラムファイルが&lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;のディレクトリの1つにある場合は、プログラムの名前を使用するだけで使用できます。それ以外の場合は、ディレクトリ（ &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; や &lt;code&gt;../checkers&lt;/code&gt; など）を含むファイル名全体を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa9019553b784d6ddae2179d0e63e658c8aaa8e2" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#variables-special&quot;&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;, it is sufficient to type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">コンピュータ上のすべてのプログラムは、 &lt;code&gt;fish&lt;/code&gt; のコマンドとして使用できます。プログラムファイルが&lt;a href=&quot;#variables-special&quot;&gt; &lt;code&gt;PATH&lt;/code&gt; の&lt;/a&gt;いずれかのディレクトリにある場合は、使用するプログラムの名前を入力するだけで十分です。それ以外の場合は、ディレクトリを含むファイル名全体（ &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; または &lt;code&gt;../checkers&lt;/code&gt; など）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca694a88f2f320884bc7af703160d9d5522d343e" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in fish. If the program file is located in one of the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt; directories, you can just type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) is required.</source>
          <target state="translated">コンピューター上のすべてのプログラムは、fishのコマンドとして使用できます。プログラムファイルが&lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;ディレクトリの1つにある場合は、プログラムの名前を入力するだけで使用できます。それ以外の場合は、ディレクトリ（ &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; や &lt;code&gt;../checkers&lt;/code&gt; など）を含むファイル名全体が必要です。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="0a06b9ff910c3b825724cca9441830ef76df9a35" translate="yes" xml:space="preserve">
          <source>Example OPTION_SPECs</source>
          <target state="translated">OPTION_SPECs の例</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="39080033040f19165a1f736af78b4c8c529fc254" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) of the target program to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; は、ターゲットプログラムの標準エラー（ファイル記述子2）を &lt;code&gt;output.stderr&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="45afd0568e44bc9d77a4c3ab231be29073066140" translate="yes" xml:space="preserve">
          <source>Example: to make errors highlighted and red, use:</source>
          <target state="translated">例:エラーをハイライトして赤くするには</target>
        </trans-unit>
        <trans-unit id="8770639e419bc5c21b3a05bddb1461adbeb1b131" translate="yes" xml:space="preserve">
          <source>Example: to set the background of each pager row, use:</source>
          <target state="translated">例:各ページャーの行の背景を設定するには</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c8110d9d9732f81a1889221cf14a72d9940e55f1" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is</source>
          <target state="translated">例：デフォルトの &lt;code&gt;fish&lt;/code&gt; タイトルは</target>
        </trans-unit>
        <trans-unit id="c5e62bdf9f1ee420f1e3180e55a6897fe87ce1fa" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is:</source>
          <target state="translated">例：デフォルトの &lt;code&gt;fish&lt;/code&gt; タイトルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a0211625a1607d6cd68d7625617e001d28ef4c84" translate="yes" xml:space="preserve">
          <source>Examples: The default fish title is:</source>
          <target state="translated">例を挙げます。デフォルトの魚のタイトルは</target>
        </trans-unit>
        <trans-unit id="4bdd412ed55970d8c42f39658c01cd285bb57d07" translate="yes" xml:space="preserve">
          <source>Executing Bash</source>
          <target state="translated">バッシュの実行</target>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="translated">終了ステータス</target>
        </trans-unit>
        <trans-unit id="105ec316e78b2e21f4200658aebb690c6bfce1c8" translate="yes" xml:space="preserve">
          <source>Exit status</source>
          <target state="translated">終了ステータス</target>
        </trans-unit>
        <trans-unit id="1065b589e5e0ae74c7584c46d689bcbb003ff11c" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one match was found, or 1 otherwise.</source>
          <target state="translated">終了ステータス。少なくとも1つの一致が見つかった場合は0、そうでない場合は1。</target>
        </trans-unit>
        <trans-unit id="b2909c6aa462276dc2976f4590aa354f4c57270d" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one replacement was performed, or 1 otherwise.</source>
          <target state="translated">終了ステータス。少なくとも1回の交換が行われた場合は0、そうでない場合は1。</target>
        </trans-unit>
        <trans-unit id="f23237bf8e5fbb7b5a8d2f6f925a293f6614802a" translate="yes" xml:space="preserve">
          <source>Exit the shell when</source>
          <target state="translated">シェルを終了するのは</target>
        </trans-unit>
        <trans-unit id="f40c28bc81b3ac548eb788aebd329d84f2e392e8" translate="yes" xml:space="preserve">
          <source>Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.</source>
          <target state="translated">展開は右から左へ、入れ子になったブラケットの展開は内側と外側から行います。</target>
        </trans-unit>
        <trans-unit id="7c7f2508b14ff7696fb2b861af3336c89a128135" translate="yes" xml:space="preserve">
          <source>Exporting variables</source>
          <target state="translated">変数のエクスポート</target>
        </trans-unit>
        <trans-unit id="0801a7e9fc76ea024d7fa1606839a9a450923131" translate="yes" xml:space="preserve">
          <source>Exports (Shell Variables)</source>
          <target state="translated">エクスポート (シェル変数)</target>
        </trans-unit>
        <trans-unit id="38a8db4fbe3933a6a062a148af12ac9a1f3f9209" translate="yes" xml:space="preserve">
          <source>Expressions can be grouped using parentheses.</source>
          <target state="translated">括弧を使って式をグループ化することができます。</target>
        </trans-unit>
        <trans-unit id="50167d66b3a9cf84672e9543b5e003cb2f61fc18" translate="yes" xml:space="preserve">
          <source>Expressions can be inverted using the &lt;code&gt;!&lt;/code&gt; operator:</source>
          <target state="translated">式は &lt;code&gt;!&lt;/code&gt; オペレーター：</target>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="88bfad9cfffeafd299a44d4daf979d57419a2621" translate="yes" xml:space="preserve">
          <source>F1</source>
          <target state="translated">F1</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3c018849599639ed880ecf71dd0372a59354f058" translate="yes" xml:space="preserve">
          <source>Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt-in, in a few releases they become opt-out, and eventually the old behavior is removed.</source>
          <target state="translated">フィーチャーフラグは、スクリプトを壊す可能性のある変更を魚がどのように段階的に行うかを示すものです。ブレークの変更はオプトインとして導入され、いくつかのリリースではオプトアウトになり、最終的には古い動作が削除されます。</target>
        </trans-unit>
        <trans-unit id="91eda957829d54470152a860d403a0c2ec63f6ad" translate="yes" xml:space="preserve">
          <source>Features will only be set on startup, so this variable will only take effect if it is universal or exported.</source>
          <target state="translated">機能は起動時にのみ設定されるので、この変数はユニバーサルかエクスポートされた場合にのみ有効になります。</target>
        </trans-unit>
        <trans-unit id="6f3b1d58c2c3684624549238c3096df48948b49f" translate="yes" xml:space="preserve">
          <source>File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.</source>
          <target state="translated">ドットで始まるファイル名は、ドットがファイル名の最初の文字として特別に与えられていない限り、ワイルドカード化の際には考慮されません。</target>
        </trans-unit>
        <trans-unit id="63d32dc2be5e5b0e93902df6ada5b09685606563" translate="yes" xml:space="preserve">
          <source>Filenames, even on strings with wildcards such as &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; や &lt;code&gt;**&lt;/code&gt; などのワイルドカードを含む文字列でもファイル名。</target>
        </trans-unit>
        <trans-unit id="af0ad57826714745555d33e260f6c852d7a62f1f" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt;, which can be used to change the order the status symbols appear in. It defaults to &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt; は、ステータスシンボルが表示される順序を変更するために使用できます。デフォルトでは、 &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3030e8ec7633ec1a524bb246aee7dbda6fb3e4bc" translate="yes" xml:space="preserve">
          <source>Fish</source>
          <target state="translated">Fish</target>
        </trans-unit>
        <trans-unit id="5909556c20378f696dc6b5d2bbc3049c7584a774" translate="yes" xml:space="preserve">
          <source>Fish 1.x and 2.x releases relied on the &lt;code&gt;bc&lt;/code&gt; command for handling &lt;code&gt;math&lt;/code&gt; expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.</source>
          <target state="translated">Fish 1.xおよび2.xリリースは、 &lt;code&gt;math&lt;/code&gt; を処理するために &lt;code&gt;bc&lt;/code&gt; コマンドに依存していました。fish 3.0.0以降、fishはtinyexprライブラリを使用し、外部コマンドを使用せずに式を評価します。</target>
        </trans-unit>
        <trans-unit id="d4a3ceecfb0465a0d21d2606941b69ac151cca20" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the -a switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、-aスイッチを使用してすべての値を報告することを除いて、1つのコマンドで複数の制限を取得または設定することをサポートしていません</target>
        </trans-unit>
        <trans-unit id="e6c6518383d134aea4779743a6d5eae0eb949f57" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the &lt;code&gt;-a&lt;/code&gt; switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、 &lt;code&gt;-a&lt;/code&gt; スイッチを使用してすべての値を報告することを除いて、1つのコマンドで複数の制限を取得または設定することをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="e7c76c63bac2f3a3dce3482676369a7bd163b6c4" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support the &lt;code&gt;-p&lt;/code&gt; option for getting the pipe size. The bash implementation consists of a compile-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、パイプサイズを取得するための &lt;code&gt;-p&lt;/code&gt; オプションをサポートしていません。bashの実装は、パイプに書き込んでSIGPIPEを待機することにより、この数を経験的に推測するコンパイル時チェックで構成されています。パイプサイズを決定するこの方法は信頼できないため、Fishはこれを行いません。bashのバージョンによっては、bashに設定する追加の制限が魚には存在しない場合もあります。</target>
        </trans-unit>
        <trans-unit id="78c7f05d7bd695376d2e5d1faac7303134fd849d" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; supports GNU-style long options for all switches</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、すべてのスイッチでGNUスタイルの長いオプションをサポートします</target>
        </trans-unit>
        <trans-unit id="dd62e7bf2c72d7767d7af909be8af4efa9d56381" translate="yes" xml:space="preserve">
          <source>Fish also has man pages for its commands, and translates the help pages to man pages. For example, &lt;code&gt;man set&lt;/code&gt; will show the documentation for &lt;code&gt;set&lt;/code&gt; as a man page.</source>
          <target state="translated">Fishには、コマンド用のmanページもあり、ヘルプページをmanページに変換します。たとえば、 &lt;code&gt;man set&lt;/code&gt; は、 &lt;code&gt;set&lt;/code&gt; のドキュメントをmanページとして表示します。</target>
        </trans-unit>
        <trans-unit id="6e4f0935c1ca660f68579120131a23c1b6b545dd" translate="yes" xml:space="preserve">
          <source>Fish also provides additional information through the values of certain environment variables. Most of these variables are read-only and their value can't be changed with &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">Fishは、特定の環境変数の値を通じて追加情報も提供します。これらの変数のほとんどは読み取り専用であり、それらの値は &lt;code&gt;set&lt;/code&gt; で変更できません。</target>
        </trans-unit>
        <trans-unit id="fc7af48505888290815037487d5b7785010a5982" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">組み込みの周りの魚も船ラッパー関数を &lt;code&gt;cd&lt;/code&gt; 理解 &lt;code&gt;cd -&lt;/code&gt; 前のディレクトリに変更など。&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;も参照してください。このラッパー関数は、 &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; グローバル変数に最近アクセスした25個のディレクトリの履歴を保持します。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚インスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="12b0ee984ffaac831e52ed6b850d4b525b13beed" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">Fishは、 &lt;code&gt;cd&lt;/code&gt; を理解する組み込みCDのラッパー関数も出荷します &lt;code&gt;cd -&lt;/code&gt; 前のディレクトリに変更するものとして。&lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;も参照してください。このラッパー関数は、最近アクセスした25個のディレクトリの履歴を &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; グローバル変数に保持します。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚のインスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="d708ac7f75ef4aed9f294c38306635239b6e0016" translate="yes" xml:space="preserve">
          <source>Fish also uses some variables internally, their name usually starting with &lt;code&gt;__fish&lt;/code&gt;. These are internal and should not typically be modified directly.</source>
          <target state="translated">Fishは内部でもいくつかの変数を使用し、それらの名前は通常 &lt;code&gt;__fish&lt;/code&gt; で始まります。これらは内部的なものであり、通常は直接変更しないでください。</target>
        </trans-unit>
        <trans-unit id="fa1810b6253f7da17afb43c730d2dea89558ba5d" translate="yes" xml:space="preserve">
          <source>Fish automatically creates lists from all environment variables whose name ends in PATH (like $PATH, $CDPATH or $MANPATH), by splitting them on colons. Other variables are not automatically split.</source>
          <target state="translated">Fishは、名前がPATHで終わるすべての環境変数($PATH、$CDPATH、$MANPATHなど)から、コロンで分割してリストを自動的に作成します。その他の変数は自動的に分割されません。</target>
        </trans-unit>
        <trans-unit id="2158f1f30f53a03dcaff373de0fa264fdeee9983" translate="yes" xml:space="preserve">
          <source>Fish automatically keeps a trail of the recent visited directories with &lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;cd&lt;/a&gt; by storing this history in the &lt;code&gt;dirprev&lt;/code&gt; and &lt;code&gt;dirnext&lt;/code&gt; variables.</source>
          <target state="translated">魚は自動的で、最近訪問したディレクトリのトレイル続ける&lt;a href=&quot;cmds/cd#cmd-cd&quot;&gt;のCDを&lt;/a&gt;この歴史を保存することにより &lt;code&gt;dirprev&lt;/code&gt; と &lt;code&gt;dirnext&lt;/code&gt; 変数。</target>
        </trans-unit>
        <trans-unit id="8e7b1872333b58f5f95b5e7bec0c0e9e258507d3" translate="yes" xml:space="preserve">
          <source>Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_function_path&lt;/code&gt;, and any functions defined are automatically loaded when needed. A function definition file must have a filename consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Fishは、配列変数 &lt;code&gt;$fish_function_path&lt;/code&gt; 内のすべてのディレクトリを自動的に検索し、定義された関数は必要に応じて自動的にロードされます。関数定義ファイルには、関数の名前とサフィックス ' &lt;code&gt;.fish&lt;/code&gt; 'で構成されるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="14acc6521b8498718555129c48f9cc0520e674d9" translate="yes" xml:space="preserve">
          <source>Fish can store a list (or an &quot;array&quot; if you wish) of multiple strings inside of a variable:</source>
          <target state="translated">Fishは、複数の文字列のリスト(必要に応じて「配列」)を変数の中に格納することができます。</target>
        </trans-unit>
        <trans-unit id="3a11880aac72a771f284563ca821b5ab539ac0d0" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;$((i+1))&lt;/code&gt; arithmetic expansion, computation is handled by &lt;a href=&quot;cmds/math#cmd-math&quot;&gt;math&lt;/a&gt;:</source>
          <target state="translated">Fishには &lt;code&gt;$((i+1))&lt;/code&gt; の算術展開がなく、計算は&lt;a href=&quot;cmds/math#cmd-math&quot;&gt;数学&lt;/a&gt;によって処理されます。</target>
        </trans-unit>
        <trans-unit id="34eaa963aa4c594bb96d5142cd9391d2aff32e3f" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;$PS2&lt;/code&gt; for continuation lines, instead it leaves the lines indented to show that the commandline isn't complete yet.</source>
          <target state="translated">Fishには継続行用の &lt;code&gt;$PS2&lt;/code&gt; がありません。代わりに、コマンドラインがまだ完了していないことを示すために行をインデントしたままにします。</target>
        </trans-unit>
        <trans-unit id="af408a104a7bf773c3973df28295c5c6c6112974" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;${foo%bar}&lt;/code&gt;, &lt;code&gt;${foo#bar}&lt;/code&gt; and &lt;code&gt;${foo/bar/baz}&lt;/code&gt;. Instead string manipulation is done by the &lt;a href=&quot;cmds/string#cmd-string&quot;&gt;string&lt;/a&gt; builtin.</source>
          <target state="translated">Fishには &lt;code&gt;${foo%bar}&lt;/code&gt; 、 &lt;code&gt;${foo#bar}&lt;/code&gt; 、 &lt;code&gt;${foo/bar/baz}&lt;/code&gt; がありません。代わりに、文字列の操作は組み込みの&lt;a href=&quot;cmds/string#cmd-string&quot;&gt;文字列&lt;/a&gt;によって行われます。</target>
        </trans-unit>
        <trans-unit id="e3969d49f21ae83cda0789d6465ee8e0a7ad2fdf" translate="yes" xml:space="preserve">
          <source>Fish does not have &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; &quot;heredocs&quot;. Instead of:</source>
          <target state="translated">Fishには &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; &quot;heredocs&quot;がありません。の代わりに：</target>
        </trans-unit>
        <trans-unit id="5ec9ec1c8e1eb15698a215b050efbec2fa7deeaf" translate="yes" xml:space="preserve">
          <source>Fish does not have an &lt;code&gt;until&lt;/code&gt;. Use &lt;code&gt;while not&lt;/code&gt; or &lt;code&gt;while !&lt;/code&gt;.</source>
          <target state="translated">魚には &lt;code&gt;until&lt;/code&gt; ません。使用 &lt;code&gt;while not&lt;/code&gt; または使用するとき &lt;code&gt;while !&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a2d24bd87151694d0ca50963aa385dd8ca9d5aac" translate="yes" xml:space="preserve">
          <source>Fish does not perform word splitting. Once a variable has been set to a value, that value stays as it is, so double-quoting variable expansions isn't the necessity it is in bash. &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="translated">Fishは単語分割を実行しません。変数が値に設定されると、その値はそのままであるため、変数の展開を二重引用符で囲む必要はありません。&lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e371bf2587cc0aa603186467640ee09a27cfc578" translate="yes" xml:space="preserve">
          <source>Fish does not use the &lt;code&gt;$PS1&lt;/code&gt;, &lt;code&gt;$PS2&lt;/code&gt; and so on variables. Instead the prompt is the output of the &lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt; function, plus the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; function if vi-mode is enabled and the &lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt; function for the right prompt.</source>
          <target state="translated">Fishは、 &lt;code&gt;$PS1&lt;/code&gt; 、 &lt;code&gt;$PS2&lt;/code&gt; などの変数を使用しません。代わりに、プロンプトが出力され&lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt;機能、プラス&lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt; viのモードが有効になっている場合、機能と&lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;右プロンプトの機能。</target>
        </trans-unit>
        <trans-unit id="13bfab662c91b6d4613873ccccc4860ce50cab34" translate="yes" xml:space="preserve">
          <source>Fish for bash users</source>
          <target state="translated">bashユーザーのための魚</target>
        </trans-unit>
        <trans-unit id="2ac9f111aab6f00958aa0e5a149d28e81b9201eb" translate="yes" xml:space="preserve">
          <source>Fish has a POSIX-compatible &lt;code&gt;test&lt;/code&gt; or &lt;code&gt;[&lt;/code&gt; builtin. There is no &lt;code&gt;[[&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; does not accept &lt;code&gt;==&lt;/code&gt; as a synonym for &lt;code&gt;=&lt;/code&gt;. It can compare floating point numbers, however.</source>
          <target state="translated">FishにはPOSIX互換の &lt;code&gt;test&lt;/code&gt; または &lt;code&gt;[&lt;/code&gt; が組み込まれています。 &lt;code&gt;[[&lt;/code&gt; はなく、 &lt;code&gt;test&lt;/code&gt; は &lt;code&gt;==&lt;/code&gt; を &lt;code&gt;=&lt;/code&gt; の同義語として受け入れません。ただし、浮動小数点数は比較できます。</target>
        </trans-unit>
        <trans-unit id="fea3d198c56b137efabf4e3b3479e7ecb043e65b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 10 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">Fishのデフォルトの制限は、コマンド置換が出力できるデータ量に10 MiBです。制限を超えると、置換だけでなくコマンド全体が失敗し、 &lt;code&gt;$status&lt;/code&gt; は122に設定されます &lt;code&gt;fish_read_limit&lt;/code&gt; が実行を開始する前の環境を含め、いつでもfish_read_limit変数を設定することで制限を変更できます。ゼロに設定すると、制限は課されません。これは、コマンドが不当な量のデータを出力した場合にシェルがメモリを過剰に消費しないようにするための安全メカニズムです。この制限は、 &lt;code&gt;read&lt;/code&gt; コマンドが処理するデータ量にも影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="54736c0f7b81ae71b6647b4c6a7582c080363c9c" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it's often much lower. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">Fishには、コマンド置換で出力できるデータ量のデフォルトの制限が100MiBです。制限を超えると、置換だけでなくコマンド全体が失敗し、 &lt;code&gt;$status&lt;/code&gt; が122に設定されます &lt;code&gt;fish_read_limit&lt;/code&gt; 変数を設定することで、魚が走り始める前の環境を含め、いつでも制限を変更できます。ゼロに設定すると、制限は課されません。これは、コマンドが不当な量のデータを出力する場合にシェルがメモリを過剰に消費しないようにするための安全メカニズムです。通常、オペレーティングシステムにも制限があり、多くの場合、はるかに少なくなります。この制限は、 &lt;code&gt;read&lt;/code&gt; コマンドが処理するデータの量にも影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="96fcf2748c6c7ec3c56f884af7b7a4a880c76a0b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the data it will read in a command sustitution. If that limit is reached the command (all of it, not just the command substitution - the outer command won't be executed at all) fails and &lt;code&gt;$status&lt;/code&gt; is set to 122. This is so command substitutions can't cause the system to go out of memory, because typically your operating system has a much lower limit, so reading more than that would be useless and harmful. This limit can be adjusted with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable (&lt;code&gt;0&lt;/code&gt; meaning no limit). This limit also affects the &lt;a href=&quot;cmds/read#cmd-read&quot;&gt;read&lt;/a&gt; command.</source>
          <target state="translated">Fishには、コマンド置換で読み取るデータのデフォルトの制限が100MiBです。その制限に達すると、コマンド（コマンド置換だけでなく、すべて、外部コマンドはまったく実行されません）が失敗し、 &lt;code&gt;$status&lt;/code&gt; が122に設定されます。これにより、コマンド置換によってシステムが通常、オペレーティングシステムにははるかに低い制限があるため、メモリが不足します。そのため、それ以上の読み取りは役に立たず、有害です。この制限は、 &lt;code&gt;fish_read_limit&lt;/code&gt; 変数で調整できます（ &lt;code&gt;0&lt;/code&gt; は制限がないことを意味します）。この制限は、&lt;a href=&quot;cmds/read#cmd-read&quot;&gt;読み取り&lt;/a&gt;コマンドにも影響します。</target>
        </trans-unit>
        <trans-unit id="92465782e7d433b454835166d572d7b25eed9c05" translate="yes" xml:space="preserve">
          <source>Fish has an extensive help system. Use the &lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt; command to obtain help on a specific subject or command. For instance, writing &lt;code&gt;help syntax&lt;/code&gt; displays the &lt;a href=&quot;#syntax&quot;&gt;syntax section&lt;/a&gt; of this documentation.</source>
          <target state="translated">Fishには広範なヘルプシステムがあります。特定のサブジェクトまたはコマンドに関するヘルプを取得するには、&lt;a href=&quot;cmds/help#cmd-help&quot;&gt;help&lt;/a&gt;コマンドを使用します。たとえば、 &lt;code&gt;help syntax&lt;/code&gt; すると、このドキュメントの&lt;a href=&quot;#syntax&quot;&gt;構文セクション&lt;/a&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="480cd3ddb5d2b4cf914df3f7d9030b1d93daeba1" translate="yes" xml:space="preserve">
          <source>Fish has excellent help and man pages. Run &lt;code&gt;help&lt;/code&gt; to open help in a web browser, and &lt;code&gt;man&lt;/code&gt; to open it in a man page. You can also ask for help with a specific command, for example, &lt;code&gt;help set&lt;/code&gt; to open in a web browser, or &lt;code&gt;man set&lt;/code&gt; to see it in the terminal.</source>
          <target state="translated">Fishには優れたヘルプとmanページがあります。 &lt;code&gt;help&lt;/code&gt; を実行してWebブラウザーでヘルプを開き、 &lt;code&gt;man&lt;/code&gt; を実行してmanページでヘルプを開きます。また、特定のコマンドでヘルプを要求することもできます。たとえば、Webブラウザーで開く &lt;code&gt;help set&lt;/code&gt; れたヘルプや、ターミナルで表示するように &lt;code&gt;man set&lt;/code&gt; れたユーザーなどです。</target>
        </trans-unit>
        <trans-unit id="3498e43826faa1f1235c392cbeb3a373eae6c988" translate="yes" xml:space="preserve">
          <source>Fish has some builtins that let you execute commands only if a specific criterion is met: &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;and&lt;/a&gt; and &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;or&lt;/a&gt;, and also the familiar &lt;a href=&quot;tutorial#tut-combiners&quot;&gt;&amp;amp;&amp;amp;/||&lt;/a&gt; syntax.</source>
          <target state="translated">：魚を使用すると、特定の基準が満たされる場合にのみ、コマンドを実行させ、いくつかの組み込みコマンドがある&lt;a href=&quot;cmds/if#cmd-if&quot;&gt;場合は&lt;/a&gt;、&lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;スイッチ&lt;/a&gt;、&lt;a href=&quot;cmds/and#cmd-and&quot;&gt;および&lt;/a&gt;および&lt;a href=&quot;cmds/or#cmd-or&quot;&gt;または&lt;/a&gt;、ともおなじみ&lt;a href=&quot;tutorial#tut-combiners&quot;&gt;&amp;amp;&amp;amp; / ||を &lt;/a&gt;構文。</target>
        </trans-unit>
        <trans-unit id="d48afbfed372bf23a743b82ed8ed7dc65e521110" translate="yes" xml:space="preserve">
          <source>Fish has two quoting styles: &lt;code&gt;&quot;&quot;&lt;/code&gt; and &lt;code&gt;''&lt;/code&gt;. Variables are expanded in double-quotes, nothing is expanded in single-quotes.</source>
          <target state="translated">：魚は2つの引用のスタイルを持っている &lt;code&gt;&quot;&quot;&lt;/code&gt; と &lt;code&gt;''&lt;/code&gt; 。変数は二重引用符で展開され、一重引用符で展開されるものはありません。</target>
        </trans-unit>
        <trans-unit id="7e69e47a187b17aecb51ad4dc34104e0787069fe" translate="yes" xml:space="preserve">
          <source>Fish history recall is very simple yet effective:</source>
          <target state="translated">魚史のリコールは非常にシンプルでありながら効果的です。</target>
        </trans-unit>
        <trans-unit id="386c69dec203efd3304dc1ee54bc1e55a151b084" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;a href=&quot;cmds/printf#cmd-printf&quot;&gt;printf&lt;/a&gt; and &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;. As another example, you can run &lt;a href=&quot;cmds/status#cmd-status&quot;&gt;status print-stack-trace&lt;/a&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;a href=&quot;cmds/exit#cmd-exit&quot;&gt;exit&lt;/a&gt; or</source>
          <target state="translated">Fishにはデバッグ機能が組み込まれています。デバッガーを使用すると、任意の時点でスクリプトの実行を停止できます。これが発生すると、インタラクティブなプロンプトが表示されます。このプロンプトで、任意のfishコマンドを実行できます（デバッグコマンド自体はありません）。たとえば、&lt;a href=&quot;cmds/printf#cmd-printf&quot;&gt;printf&lt;/a&gt;と&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;を使用して、変数の値を確認または変更できます。別の例として、&lt;a href=&quot;cmds/status#cmd-status&quot;&gt;status print-stack-trace&lt;/a&gt;を実行して、このブレークポイントにどのように到達したかを確認できます。スクリプトの通常の実行を再開するには、&lt;a href=&quot;cmds/exit#cmd-exit&quot;&gt;exit&lt;/a&gt;または</target>
        </trans-unit>
        <trans-unit id="edcb6e0e99c1d29dcec8762593402a5b7fe687c4" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. As another example, you can run &lt;code&gt;status print-stack-trace&lt;/code&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;code&gt;exit&lt;/code&gt; or [ctrl-D].</source>
          <target state="translated">Fishには、組み込みのデバッグ機能が含まれています。デバッガーを使用すると、スクリプトの実行を任意の時点で停止できます。これが発生すると、インタラクティブなプロンプトが表示されます。このプロンプトでは、任意のfishコマンドを実行できます（そのようなdebugコマンドはありません）。たとえば、 &lt;code&gt;printf&lt;/code&gt; と &lt;code&gt;set&lt;/code&gt; を使用して、変数の値を確認または変更できます。別の例として、 &lt;code&gt;status print-stack-trace&lt;/code&gt; を実行して、このブレークポイントに到達した方法を確認できます。スクリプトの通常の実行を再開するには、単に &lt;code&gt;exit&lt;/code&gt; または[ctrl-D]と入力します。</target>
        </trans-unit>
        <trans-unit id="c79ad61efadd871e671682ebb2b3cfdcaa4e03d8" translate="yes" xml:space="preserve">
          <source>Fish includes a number of commands in the shell directly. We call these &quot;builtins&quot;. These include:</source>
          <target state="translated">Fishには、シェルに直接コマンドが多数含まれています。これらを「ビルトイン」と呼んでいます。これらには以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="3e21bd33e2135df6af48b4d34c944ac0b41c9111" translate="yes" xml:space="preserve">
          <source>Fish interprets the command line as it is typed and uses syntax highlighting to provide feedback. The most important feedback is the detection of potential errors. By default, errors are marked red.</source>
          <target state="translated">Fishは、入力されたコマンドラインを解釈し、シンタックスハイライトを使ってフィードバックを提供します。最も重要なフィードバックは、潜在的なエラーを検出することです。デフォルトでは、エラーは赤で表示されます。</target>
        </trans-unit>
        <trans-unit id="23dccb47038b031ed2f8ee7e5ab4c502f7e2ab8e" translate="yes" xml:space="preserve">
          <source>Fish is a fully-equipped command line shell (like bash or zsh) that is smart and user-friendly. Fish supports powerful features like syntax highlighting, autosuggestions, and tab completions that just work, with nothing to learn or configure.</source>
          <target state="translated">Fishは、bashやzshのようなコマンドラインシェルでありながら、スマートでユーザーフレンドリーな機能を備えています。Fishは、シンタックスハイライト、自動提案、タブ補完などの強力な機能をサポートしており、学習や設定の必要はありません。</target>
        </trans-unit>
        <trans-unit id="c9861432c24cc69aa9bbe8d00780f47c35cceca6" translate="yes" xml:space="preserve">
          <source>Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn't support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.</source>
          <target state="translated">Fishはお使いの端末のタイトルバーのメッセージを設定しようとしています。screen 自体はこの機能をサポートしていますが、あなたの端末はサポートしていません。残念なことに、基礎となる端末がタイトルバーの設定をサポートしていない場合、スクリーンは単にエスケープコードとテキストを無視する代わりに、基礎となる端末に渡してしまいます。この問題を fish の内部から検出して解決することは不可能です。今のところ、この問題を解決する唯一の方法は、上記のようにタイトルバーのメッセージの設定を解除することです。</target>
        </trans-unit>
        <trans-unit id="544b7dbf162f628eb35bbf3928f5320adff77942" translate="yes" xml:space="preserve">
          <source>Fish offers helper functions for adding things to the prompt, like &lt;a href=&quot;cmds/fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt; for adding a display for common version control systems (git, mercurial, svn) and &lt;a href=&quot;cmds/prompt_pwd#cmd-prompt-pwd&quot;&gt;prompt_pwd&lt;/a&gt; for showing a shortened $PWD (the user's home directory becomes &lt;code&gt;~&lt;/code&gt; and any path component is shortened).</source>
          <target state="translated">以下のように、プロンプトに物事を追加するための魚の申し出ヘルパー関数を&lt;a href=&quot;cmds/fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;共通のバージョン管理システム（gitの、水銀、SVN）との表示追加するための&lt;a href=&quot;cmds/prompt_pwd#cmd-prompt-pwd&quot;&gt;prompt_pwdを&lt;/a&gt;短縮$ PWDを示すために（ユーザのホームディレクトリになります &lt;code&gt;~&lt;/code&gt; と任意のパス要素が短縮されます）。</target>
        </trans-unit>
        <trans-unit id="84e6a12d999aea5233bf9d1a7a5e0a296e1d2b7f" translate="yes" xml:space="preserve">
          <source>Fish only supports the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; glob (and the deprecated &lt;code&gt;?&lt;/code&gt; glob). If a glob doesn't match it fails the command (like with bash's &lt;code&gt;failglob&lt;/code&gt;) unless the command is &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; or the glob is used with an environment override (&lt;code&gt;VAR=* command&lt;/code&gt;), in which case it expands to nothing (like with bash's &lt;code&gt;nullglob&lt;/code&gt; option).</source>
          <target state="translated">Fishは、 &lt;code&gt;*&lt;/code&gt; および &lt;code&gt;**&lt;/code&gt; グロブ（および非推奨の &lt;code&gt;?&lt;/code&gt; グロブ）のみをサポートします。globが一致しない場合、コマンドが &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;count&lt;/code&gt; であるか、globが環境オーバーライド（ &lt;code&gt;VAR=* command&lt;/code&gt; ）で使用されていない限り、コマンドは失敗します（bashの &lt;code&gt;failglob&lt;/code&gt; のように）。 bashの &lt;code&gt;nullglob&lt;/code&gt; オプションのように）。</target>
        </trans-unit>
        <trans-unit id="2cf1d8c7a431f94fa6e399e223914820c86f6dd7" translate="yes" xml:space="preserve">
          <source>Fish or your terminal might not know about the character or handle it wrong - in this case fish or your terminal needs to be fixed, or you need to update to a fixed version.</source>
          <target state="translated">フィッシュや端末がその文字を知らないか、間違って処理している可能性があります。この場合、フィッシュや端末を修正するか、修正されたバージョンにアップデートする必要があります。</target>
        </trans-unit>
        <trans-unit id="48abc65b03d1fc064fb747f8eca57f5ceb3027c8" translate="yes" xml:space="preserve">
          <source>Fish prides itself on being really nice to use interactively. That's down to a few features we'll explain in the next few sections.</source>
          <target state="translated">Fishは対話的に使えることを誇りにしています。それは次のセクションで説明するいくつかの機能によるものです。</target>
        </trans-unit>
        <trans-unit id="a848c7dac788ef4acd0d27d4c6b9e1143029b352" translate="yes" xml:space="preserve">
          <source>Fish provides &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; to color text. It can use the 16 named colors and also RGB sequences (so you could also use &lt;code&gt;set_color 5555FF&lt;/code&gt;)</source>
          <target state="translated">Fishは、テキストに色を&lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;付ける&lt;/a&gt;ためにset_colorを提供します。16の名前付きカラーとRGBシーケンスを使用できます（したがって、 &lt;code&gt;set_color 5555FF&lt;/code&gt; も使用できます）</target>
        </trans-unit>
        <trans-unit id="9a5a91794bf004e1dafb18322516a8e73fc2d28e" translate="yes" xml:space="preserve">
          <source>Fish provides some general purpose completions:</source>
          <target state="translated">フィッシュは、いくつかの汎用的な補完を提供します。</target>
        </trans-unit>
        <trans-unit id="3524f17824fc111784e6c17c1c783f4774ba70aa" translate="yes" xml:space="preserve">
          <source>Fish reserves the &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode private-use character range&lt;/a&gt; from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode &quot;replacement character&quot; U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).</source>
          <target state="translated">Fishは、内部使用のためにU + F600からU + F73Fまでの&lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicodeの私用文字範囲&lt;/a&gt;を予約しています。その範囲の文字を魚にフィードしようとすると、Unicodeの「置換文字」U + FFFDに置き換えられます。これには、インタラクティブな入力と、fishが読み取ったファイル（fishが実行するプログラムは除く）の両方が含まれます。</target>
        </trans-unit>
        <trans-unit id="3ccecc562dc02936776effee162f8bf7248708e3" translate="yes" xml:space="preserve">
          <source>Fish runs commands like other shells: you type a command, followed by its arguments. Spaces are separators:</source>
          <target state="translated">Fishは他のシェルと同じようにコマンドを実行します。コマンドを入力し、そのあとに引数を入力します。空白はセパレーターです。</target>
        </trans-unit>
        <trans-unit id="01f7375aec4a1c6d25c6ebf2e2810dfadfa3c68e" translate="yes" xml:space="preserve">
          <source>Fish sets and erases variables with &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; instead of &lt;code&gt;VAR=VAL&lt;/code&gt; and &lt;code&gt;declare&lt;/code&gt; and &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;. &lt;code&gt;set&lt;/code&gt; takes options to determine the scope and exportedness of a variable:</source>
          <target state="translated">Fishは、 &lt;code&gt;VAR=VAL&lt;/code&gt; の代わりに&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;setを&lt;/a&gt;使用して変数を設定および消去し、 &lt;code&gt;declare&lt;/code&gt; 、 &lt;code&gt;unset&lt;/code&gt; 、および &lt;code&gt;export&lt;/code&gt; ます。 &lt;code&gt;set&lt;/code&gt; は、変数のスコープとエクスポート性を決定するオプションを取ります。</target>
        </trans-unit>
        <trans-unit id="6bf8ef652bc4e1c42cf4f4f13b7882971ade7681" translate="yes" xml:space="preserve">
          <source>Fish ships multiple handlers for various operating systems and chooses from them when this function is loaded, or you can define your own.</source>
          <target state="translated">Fishには様々なOSに対応した複数のハンドラーが同梱されており、この関数がロードされたときにそれらの中から選択されますが、独自に定義することもできます。</target>
        </trans-unit>
        <trans-unit id="88f9fa16272ceb2f6496c15e10a64756c22612c9" translate="yes" xml:space="preserve">
          <source>Fish ships with a &lt;code&gt;_validate_int&lt;/code&gt; function that accepts a &lt;code&gt;--min&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; flag. Let's say your command accepts a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt;. The default if you just call &lt;code&gt;_validate_int&lt;/code&gt; without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.</source>
          <target state="translated">Fishには、 &lt;code&gt;--min&lt;/code&gt; および &lt;code&gt;--max&lt;/code&gt; フラグを受け入れる &lt;code&gt;_validate_int&lt;/code&gt; 関数が付属しています。コマンドが &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; フラグを受け入れ、最小許容値がゼロで最大値が5であるとしましょう。オプションは次のように定義します： &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt; 。これらのフラグなしで &lt;code&gt;_validate_int&lt;/code&gt; を呼び出す場合のデフォルトは、値が有効な整数であることを単にチェックすることです。許可されている最小値または最大値に制限はありません。</target>
        </trans-unit>
        <trans-unit id="4e44f3813fcf10547ba75c4619e5c3c9fc240a0b" translate="yes" xml:space="preserve">
          <source>Fish spells command substitutions as &lt;code&gt;(command)&lt;/code&gt; instead of &lt;code&gt;$(command)&lt;/code&gt; (or &lt;code&gt;`command`&lt;/code&gt;).</source>
          <target state="translated">Fishは、コマンド置換を &lt;code&gt;$(command)&lt;/code&gt; （または &lt;code&gt;`command`&lt;/code&gt; ）ではなく &lt;code&gt;(command)&lt;/code&gt; として綴ります。</target>
        </trans-unit>
        <trans-unit id="c158ed4288c5b9a225e67660cd944a1293223aaa" translate="yes" xml:space="preserve">
          <source>Fish starts by executing commands in &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;. You can create it if it does not exist.</source>
          <target state="translated">Fishは、 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; コマンドを実行することから始まります。存在しない場合は作成できます。</target>
        </trans-unit>
        <trans-unit id="da8d10a7f6f5ff6e0088c4b12f7c811ff075340b" translate="yes" xml:space="preserve">
          <source>Fish stores the exit status of the last process in the last job to exit in the &lt;code&gt;status&lt;/code&gt; variable.</source>
          <target state="translated">Fishは、最後のジョブの最後のプロセスの終了ステータスを &lt;code&gt;status&lt;/code&gt; 変数に格納します。</target>
        </trans-unit>
        <trans-unit id="8f95b058d09a46d96591ae1aaa42e6d354388a3f" translate="yes" xml:space="preserve">
          <source>Fish supports the familiar wildcard &lt;code&gt;*&lt;/code&gt;. To list all JPEG files:</source>
          <target state="translated">Fishはおなじみのワイルドカード &lt;code&gt;*&lt;/code&gt; をサポートしています。すべてのJPEGファイルを一覧表示するには：</target>
        </trans-unit>
        <trans-unit id="5414d1f83db8858d6238609a5ff3c4b99998e031" translate="yes" xml:space="preserve">
          <source>Fish takes care to set &lt;code&gt;$PATH&lt;/code&gt; to a default, but typically it is just inherited from fish's parent process and is set to a value that makes sense for the system - see &lt;a href=&quot;#tut-exports&quot;&gt;Exports&lt;/a&gt;.</source>
          <target state="translated">Fishは &lt;code&gt;$PATH&lt;/code&gt; をデフォルトに設定するように注意しますが、通常はfishの親プロセスから継承され、システムにとって意味のある値に設定されます。「&lt;a href=&quot;#tut-exports&quot;&gt;エクスポート&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c7cac64314e5cd1f9679e120b4ee08809136ee30" translate="yes" xml:space="preserve">
          <source>Fish uses a heuristic to decide if a terminal supports the 256-color palette as opposed to the more limited 16 color palette of older terminals. Support can be forced on by setting &lt;code&gt;fish_term256&lt;/code&gt; to &lt;em&gt;1&lt;/em&gt;. If &lt;code&gt;$TERM&lt;/code&gt; contains &quot;256color&quot; (e.g., &lt;em&gt;xterm-256color&lt;/em&gt;), 256-color support is enabled. If &lt;code&gt;$TERM&lt;/code&gt; contains &lt;em&gt;xterm&lt;/em&gt;, 256 color support is enabled (except for MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; and &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; are used to detect Terminal.app from MacOS 10.6; support is disabled here it because it is known that it reports &lt;code&gt;xterm&lt;/code&gt; and only supports 16 colors.</source>
          <target state="translated">Fishはヒューリスティックを使用して、端末が古い端末の制限された16色パレットとは対照的に256色パレットをサポートするかどうかを決定します。 &lt;code&gt;fish_term256&lt;/code&gt; を&lt;em&gt;1に&lt;/em&gt;設定すると、サポートを強制できます。 &lt;code&gt;$TERM&lt;/code&gt; に「256color」が含まれている場合（例：&lt;em&gt;xterm-256color&lt;/em&gt;）、256色のサポートが有効になります。 &lt;code&gt;$TERM&lt;/code&gt; に&lt;em&gt;xterm&lt;/em&gt;が含まれている場合、256色のサポートが有効になります（MacOSを除く： &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; および &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; はMacOS 10.6からのTerminal.appの検出に使用されます &lt;code&gt;xterm&lt;/code&gt; を報告し、16色のみをサポートすることがわかっているため、ここではサポートが無効になっています。 。</target>
        </trans-unit>
        <trans-unit id="ad58efd756a349f3d5ec4b128631d278954160c8" translate="yes" xml:space="preserve">
          <source>Fish uses an Emacs-style kill ring for copy and paste functionality. For example, use</source>
          <target state="translated">Fishでは、コピー&amp;ペースト機能にEmacsスタイルのキルリングを採用しています。例えば、次のように使います。</target>
        </trans-unit>
        <trans-unit id="c4a7c4e0f6011c5a6723f630fd3d21a3dda63de9" translate="yes" xml:space="preserve">
          <source>Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won't understand.</source>
          <target state="translated">Fish は、端末が理解できないシーケンスの送信を避けるために、端末がどの色をサポートしているかを判断するためにいくつかのヒューリスティックスを使用しています。</target>
        </trans-unit>
        <trans-unit id="4a8a4a4f82444a104a993e27513d536247c816d1" translate="yes" xml:space="preserve">
          <source>Fish versions prior to 3.0 supported the syntax &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt;, which worked like &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt;. This syntax was not widely used, and was ambiguous and inconsistent.</source>
          <target state="translated">3.0より前のバージョンのFishでは、構文 &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt; サポートされていました。これは、 &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt; 。この構文は広く使用されておらず、あいまいで一貫性がありませんでした。</target>
        </trans-unit>
        <trans-unit id="cb678b9dd371f15bc7e0c8da8984dbcf75ca0c04" translate="yes" xml:space="preserve">
          <source>Fish's blocking constructs look a little different. They all start with a word, end in &lt;code&gt;end&lt;/code&gt; and don't have a second starting word:</source>
          <target state="translated">魚のブロッキング構造は少し異なって見えます。それらはすべて単語で始まり、最後に &lt;code&gt;end&lt;/code&gt; 、2番目の開始単語はありません。</target>
        </trans-unit>
        <trans-unit id="b3aac7574777ac1ebe5c853e91269d48b4c8d770" translate="yes" xml:space="preserve">
          <source>Fish's prompt is also defined in a function, called &lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt;. It is run when the prompt is about to be displayed and its output forms the prompt:</source>
          <target state="translated">Fishのプロンプトは、&lt;a href=&quot;cmds/fish_prompt#cmd-fish-prompt&quot;&gt;fish_prompt&lt;/a&gt;という関数でも定義されています。プロンプトが表示されようとしているときに実行され、その出力がプロンプトを形成します。</target>
        </trans-unit>
        <trans-unit id="0d57bd5497ca26a92593094bf3e21c5097192fa3" translate="yes" xml:space="preserve">
          <source>Fisher</source>
          <target state="translated">Fisher</target>
        </trans-unit>
        <trans-unit id="cc39950b13a6699fa5b10206f558fe0ba567276b" translate="yes" xml:space="preserve">
          <source>Fisherman</source>
          <target state="translated">Fisherman</target>
        </trans-unit>
        <trans-unit id="cde1c030202177b2bb85ac304db8a66513736e41" translate="yes" xml:space="preserve">
          <source>Flag Value Validation</source>
          <target state="translated">フラグ値検証</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="536cf03606fa94ae7d859eed9d77e1d3116f6703" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;#toc-commands&quot;&gt;table of contents&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">fishに付属するすべての組み込み関数、関数、およびコマンドのリストについては、&lt;a href=&quot;#toc-commands&quot;&gt;目次を&lt;/a&gt;参照してください。ドキュメントは、コマンドの &lt;code&gt;--help&lt;/code&gt; スイッチを使用して入手することもできます。</target>
        </trans-unit>
        <trans-unit id="c63866684d9fe05a145e078581ff82103fa3b1f9" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;commands#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch.</source>
          <target state="translated">fishに付属しているすべての組み込み関数、関数、およびコマンドの&lt;a href=&quot;commands#commands&quot;&gt;リスト&lt;/a&gt;については、コマンドのリストを参照してください。ドキュメントは、 &lt;code&gt;--help&lt;/code&gt; スイッチを使用して入手することもできます。</target>
        </trans-unit>
        <trans-unit id="9a673697effebecadd2ef2ada0c2ba216bf82e8c" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">fishに付属しているすべての組み込み関数、関数、およびコマンドの&lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;リスト&lt;/a&gt;については、コマンドのリストを参照してください。このドキュメントは、コマンドの &lt;code&gt;--help&lt;/code&gt; スイッチを使用して入手することもできます。</target>
        </trans-unit>
        <trans-unit id="fc5d720df058950fb2b501ff363c8a58b90811ca" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, use &lt;code&gt;builtin -n&lt;/code&gt;.</source>
          <target state="translated">すべてのビルトインのリストについては、 &lt;code&gt;builtin -n&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="a243468998c4b3855b0c9284af3f0bfedea9592e" translate="yes" xml:space="preserve">
          <source>For a script written in another language, just replace &lt;code&gt;/bin/bash&lt;/code&gt; with the interpreter for that language (for example: &lt;code&gt;/usr/bin/python&lt;/code&gt; for a python script, or &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; for a fish script).</source>
          <target state="translated">別の言語で記述されたスクリプトの場合は、 &lt;code&gt;/bin/bash&lt;/code&gt; をその言語のインタープリターに置き換えるだけです（たとえば、Pythonスクリプトの場合は &lt;code&gt;/usr/bin/python&lt;/code&gt; 、fishスクリプトの場合は &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9801e7760d7e9e8e7b2ff4da2f4e2bbcb3cd8d9c" translate="yes" xml:space="preserve">
          <source>For a script, written in another language, just replace the interpreter &lt;code&gt;/bin/bash&lt;/code&gt; with the language interpreter of that other language (for example &lt;code&gt;/bin/python&lt;/code&gt; for a &lt;code&gt;python&lt;/code&gt; script)</source>
          <target state="translated">別の言語で記述されたスクリプトの場合、インタープリター &lt;code&gt;/bin/bash&lt;/code&gt; をその別の言語の言語インタープリターに置き換えるだけです（たとえば、 &lt;code&gt;python&lt;/code&gt; スクリプトの場合は &lt;code&gt;/bin/python&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="0e9cfc7c030fc52d944ae76e3a90d11f9ae7a834" translate="yes" xml:space="preserve">
          <source>For an alternative, try &lt;a href=&quot;#abbreviations&quot;&gt;abbreviations&lt;/a&gt;. These are words that are expanded while you type, instead of being actual functions inside the shell.</source>
          <target state="translated">別の方法として、&lt;a href=&quot;#abbreviations&quot;&gt;略語を&lt;/a&gt;試してください。これらは、シェル内の実際の関数ではなく、入力中に展開される単語です。</target>
        </trans-unit>
        <trans-unit id="3e1ee97cd1a141aa861292be516e6d2fafba3b56" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;../index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">補完の指定の概要については、魚のマニュアルで&lt;a href=&quot;../index#completion-own&quot;&gt;独自の補完&lt;/a&gt;を作成するを参照してください。</target>
        </trans-unit>
        <trans-unit id="aac657fdcd353fd4213af492e11d8fa1236e727e" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">補完の指定の概要については、魚のマニュアルの&lt;a href=&quot;index#completion-own&quot;&gt;独自の補完の記述を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3c8170d85d1c1d6151789bb01cb1ad1b3028cc35" translate="yes" xml:space="preserve">
          <source>For an introduction to writing your own completions, see &lt;a href=&quot;../completions#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">独自の補完を書くの概要については、&lt;a href=&quot;../completions#completion-own&quot;&gt;独自の補完を書く&lt;/a&gt;魚のマニュアルで。</target>
        </trans-unit>
        <trans-unit id="97f70256424cd43141b91b58c2edd81b6e14a061" translate="yes" xml:space="preserve">
          <source>For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than &lt;code&gt;status is-login&lt;/code&gt; you can type &lt;code&gt;status --is-login&lt;/code&gt;. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).</source>
          <target state="translated">下位互換性のために、各サブコマンドを長いオプションまたは短いオプションとして指定することもできます。たとえば、のではなく &lt;code&gt;status is-login&lt;/code&gt; 次のように入力することができ &lt;code&gt;status --is-login&lt;/code&gt; 。フラグフォームは非推奨であり、将来のリリースで削除される可能性があります（ただし、fish 3.0以前では削除されません）。</target>
        </trans-unit>
        <trans-unit id="71cbfbc301ab062537c3b9d9149d9aa54102b0b9" translate="yes" xml:space="preserve">
          <source>For basic compatibility with POSIX &lt;code&gt;command&lt;/code&gt;, the &lt;code&gt;-v&lt;/code&gt; flag is recognized as an alias for &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="translated">POSIX &lt;code&gt;command&lt;/code&gt; との基本的な互換性のために、 &lt;code&gt;-v&lt;/code&gt; フラグは &lt;code&gt;-s&lt;/code&gt; のエイリアスとして認識されます。</target>
        </trans-unit>
        <trans-unit id="b73ea6d75946436551604661ce1b9a165a45dd07" translate="yes" xml:space="preserve">
          <source>For checking timing after a command has completed, check &lt;a href=&quot;../index#variables-special&quot;&gt;$CMD_DURATION&lt;/a&gt;.</source>
          <target state="translated">コマンド完了後のタイミングを確認するには、&lt;a href=&quot;../index#variables-special&quot;&gt;$ CMD_DURATIONを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="e40b055eb7098645342eba3f6a6c092eb71628f1" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells and external commands, $PATH is a &lt;a href=&quot;index#variables-path&quot;&gt;path variable&lt;/a&gt;, and so will be joined with colons (not spaces) when you quote it:</source>
          <target state="translated">他のシェルや外部コマンドとの互換性のために、$ PATHは&lt;a href=&quot;index#variables-path&quot;&gt;パス変数&lt;/a&gt;であるため、引用符で囲むとコロン（スペースではなく）で結合されます。</target>
        </trans-unit>
        <trans-unit id="1c3dc5a73a1b6e033a2111e39aaa9007c3480fd4" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells, job expansion syntax is supported for &lt;code&gt;bg&lt;/code&gt;. A PID of the format &lt;code&gt;%1&lt;/code&gt; will be interpreted as the PID of job 1. Job numbers can be seen in the output of &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt;.</source>
          <target state="translated">他のシェルとの互換性のために、 &lt;code&gt;bg&lt;/code&gt; ではジョブ拡張構文がサポートされています。形式 &lt;code&gt;%1&lt;/code&gt; のPIDは、ジョブ1のPIDとして解釈されます。ジョブ番号は、&lt;a href=&quot;jobs#cmd-jobs&quot;&gt;ジョブ&lt;/a&gt;の出力に表示されます。</target>
        </trans-unit>
        <trans-unit id="3079979f2c8bb4a076f55ed59e3bc9962976c8b3" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells, job expansion syntax is supported for &lt;code&gt;fg&lt;/code&gt;. A &lt;code&gt;PID&lt;/code&gt; of the format &lt;code&gt;%1&lt;/code&gt; will foreground job 1. Job numbers can be seen in the output of &lt;a href=&quot;jobs#cmd-jobs&quot;&gt;jobs&lt;/a&gt;.</source>
          <target state="translated">他のシェルとの互換性のために、ジョブ拡張構文が &lt;code&gt;fg&lt;/code&gt; でサポートされています。A &lt;code&gt;PID&lt;/code&gt; フォーマットの &lt;code&gt;%1&lt;/code&gt; 人の意志フォアグラウンド仕事1.ジョブ番号は出力で見ることができる&lt;a href=&quot;jobs#cmd-jobs&quot;&gt;仕事&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9d46702cca75cc827bf0e644a96033460077001e" translate="yes" xml:space="preserve">
          <source>For detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="translated">詳細な手順については&lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;、魚への切り替えを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9e13e8fad991f0105b6652520dfd2beeef44ad94" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;begin&lt;/a&gt; and &lt;a href=&quot;cmds/end#cmd-end&quot;&gt;end&lt;/a&gt; to group parts of them.</source>
          <target state="translated">さらに複雑な条件の場合は、&lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;begin&lt;/a&gt;と&lt;a href=&quot;cmds/end#cmd-end&quot;&gt;end&lt;/a&gt;を使用して、それらの一部をグループ化します。</target>
        </trans-unit>
        <trans-unit id="fa3cc4b28c62019a96ce74d02cd7c54d07452b42" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to group parts of them.</source>
          <target state="translated">さらに複雑な条件の場合は、 &lt;code&gt;begin&lt;/code&gt; および &lt;code&gt;end&lt;/code&gt; を使用してそれらの一部をグループ化します。</target>
        </trans-unit>
        <trans-unit id="2ffbc75d40d5f17483c5a32a91dae37e401b6f2b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, does not have an associated value) the values are the short and long flags seen. If the option is not a boolean flag the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">たとえば、 &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; が &lt;code&gt;_flag_help&lt;/code&gt; 場合の &lt;code&gt;_flag_h&lt;/code&gt; および_flag_help。 varはローカルスコープで設定されます（つまり、スクリプトが &lt;code&gt;set -l _flag_X&lt;/code&gt; を実行したかのように）。フラグがブール値の場合（つまり、値が関連付けられていない場合）、値は表示される短いフラグと長いフラグです。オプションがブールフラグでない場合、値は、ARGリストの処理時に収集された値に対応するゼロ以上の値になります。フラグが表示されなかった場合、フラグvarは設定されません。</target>
        </trans-unit>
        <trans-unit id="88a5cf27ff84d1f00030e64d1e499179b84cb53e" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">たとえば、 &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; が &lt;code&gt;_flag_help&lt;/code&gt; 場合は、 &lt;code&gt;_flag_h&lt;/code&gt; および_flag_help。varはローカルスコープで設定されます（つまり、スクリプトが &lt;code&gt;set -l _flag_X&lt;/code&gt; を実行したかのように）。フラグがブール値である場合（つまり、渡されるかどうか、値がない場合）、値は表示される短いフラグと長いフラグです。オプションがブール値でない場合、値は、ARGリストの処理時に収集された値に対応する0個以上の値になります。フラグが表示されなかった場合、フラグ変数は設定されません。</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="b0fa66a3b27e0366609127209cba01f178b1e3f9" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;echo hello 2&amp;gt; output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;echo hello 2&amp;gt; output.stderr&lt;/code&gt; は、標準エラー（ファイル記述子2）を &lt;code&gt;output.stderr&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="160d44921b4e5cc1e46472871323748ab262c51c" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="translated">たとえば、 &lt;code&gt;git checkout&lt;/code&gt; のような頻繁に実行されるコマンドは、 &lt;code&gt;gco&lt;/code&gt; と省略できます。 &lt;code&gt;gco&lt;/code&gt; に入り、を押した後</target>
        </trans-unit>
        <trans-unit id="38df69a183da9016b2103a1c9a7def1959322bfa" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing &lt;b&gt;Space&lt;/b&gt; or &lt;b&gt;Enter&lt;/b&gt;, the full text &lt;code&gt;git checkout&lt;/code&gt; will appear in the command line.</source>
          <target state="translated">たとえば、 &lt;code&gt;git checkout&lt;/code&gt; のような頻繁に実行されるコマンドは、 &lt;code&gt;gco&lt;/code&gt; に短縮できます。入力後 &lt;code&gt;gco&lt;/code&gt; 、プレス&lt;b&gt;スペース&lt;/b&gt;または&lt;b&gt;入力し&lt;/b&gt;、フルテキスト &lt;code&gt;git checkout&lt;/code&gt; コマンドラインに表示されます。</target>
        </trans-unit>
        <trans-unit id="3748b656b4d49fc21ce880c084187a5150ce4ea9" translate="yes" xml:space="preserve">
          <source>For example, here's a simple function to list directories:</source>
          <target state="translated">例えば、ディレクトリをリストアップする簡単な関数を紹介します。</target>
        </trans-unit>
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">たとえば、関数 &lt;code&gt;ll&lt;/code&gt; が必要な場合は、テキストファイル &lt;code&gt;ll.fish&lt;/code&gt; を &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">たとえば、次の関数定義は、引数 ' &lt;code&gt;-l&lt;/code&gt; 'を指定してコマンド &lt;code&gt;ls&lt;/code&gt; を呼び出し、現在のディレクトリの内容の詳細なリストを出力します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">独自の複雑な補完を作成する方法の例については、 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; で補完を調べてください。（正確なパスは、選択したインストールプレフィックスによって異なり、多少異なる場合があります）</target>
        </trans-unit>
        <trans-unit id="29752c666ae89d90fd5950e78bb8db877998c7de" translate="yes" xml:space="preserve">
          <source>For for detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="translated">詳細な手順については&lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;、魚への切り替えを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="103fc968431a4b50b3ca123cef46a14d1fc51393" translate="yes" xml:space="preserve">
          <source>For instance, here's bash</source>
          <target state="translated">例えば、bashです。</target>
        </trans-unit>
        <trans-unit id="97f56ee2c62f9812ead36bdfeb6ba25bf621c0f9" translate="yes" xml:space="preserve">
          <source>For instance, the control key modifies a character by setting the top three bits to 0. This means:</source>
          <target state="translated">例えば、コントロールキーは、上位3ビットを0にすることで文字を修飾します。</target>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">Forループは、リストの反復処理に使用することができます。例えば、ファイルのリストなどです。</target>
        </trans-unit>
        <trans-unit id="fb55b2efd75666ff0e0f22ca6189e759ca99212d" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;../index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">詳細については、 &lt;code&gt;fish&lt;/code&gt; マニュアルの&lt;a href=&quot;../index#debugging&quot;&gt;fishスクリプトのデバッグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">詳細については、 &lt;code&gt;fish&lt;/code&gt; マニュアルの「&lt;a href=&quot;index#debugging&quot;&gt;debug fishスクリプト&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="fbf3695085a563c32cadec00042c527ca7e1f7bc" translate="yes" xml:space="preserve">
          <source>For more information on functions, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">関数の詳細については、組み込み&lt;a href=&quot;cmds/function#cmd-function&quot;&gt;関数&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="20842f282aec1c4b50e206a47ffcf066ea5ca7ed" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">新しいイベントハンドラーを定義する方法の詳細については、&lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt;コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">新しいイベントハンドラーの定義方法の詳細については、&lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt;コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; などのブロック構造のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="964a42e4fd350b97fcf46d3e0c75ca51851aa82c" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for each of the functions above.</source>
          <target state="translated">詳細については、上記の各機能のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cdcf4ba8c872fe3f9f1941442b568f4cbb24effc" translate="yes" xml:space="preserve">
          <source>For more, see &lt;a href=&quot;funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;funcsave#cmd-funcsave&quot;&gt;funcsaveを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6f5f6b77a3db0cc9e9b6b6808dc5c105059f2d18" translate="yes" xml:space="preserve">
          <source>For more, see the documentation for the builtins or the &lt;a href=&quot;tutorial#tut-conditionals&quot;&gt;Conditionals&lt;/a&gt; section of the tutorial.</source>
          <target state="translated">詳細については、組み込みのドキュメントまたはチュートリアルの「&lt;a href=&quot;tutorial#tut-conditionals&quot;&gt;条件」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="27424edc0e90c3adb0df5bb5c53e73754fc6371d" translate="yes" xml:space="preserve">
          <source>For most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is like what bash does with &lt;code&gt;shopt -s failglob&lt;/code&gt;. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs will instead expand to zero arguments (so the command won't see them at all), like with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">ほとんどのコマンドでは、ワイルドカードの展開に失敗した場合、コマンドは実行されず、&lt;a href=&quot;#variables-status&quot;&gt;$ status&lt;/a&gt;がゼロ以外に設定され、警告が出力されます。この動作は、bashが &lt;code&gt;shopt -s failglob&lt;/code&gt; 行う動作と似ています。正確に4つの例外があります。つまり、&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;、&lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;、&lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt;、および&lt;a href=&quot;cmds/for#cmd-for&quot;&gt;forの&lt;/a&gt;変数のオーバーライドです。それらのグロブは、bashの &lt;code&gt;shopt -s nullglob&lt;/code&gt; のように、代わりにゼロ引数に展開されます（したがって、コマンドはそれらをまったく認識しません）。</target>
        </trans-unit>
        <trans-unit id="106e9122c8b5a8bbb7b662818bf4ea1ef6ed2679" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) and hexadecimal (&lt;code&gt;0xFF&lt;/code&gt;) are also available.</source>
          <target state="translated">数字については、 &lt;code&gt;.&lt;/code&gt; -関係なく、常にロケールの基数文字である &lt;code&gt;2.5&lt;/code&gt; ではなく &lt;code&gt;2,5&lt;/code&gt; 。科学的記数法（ &lt;code&gt;10e5&lt;/code&gt; ）および16進数（ &lt;code&gt;0xFF&lt;/code&gt; ）も使用できます。</target>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">番号については、 &lt;code&gt;.&lt;/code&gt; ロケールに関係なく、常に基数文字です &lt;code&gt;2.5&lt;/code&gt; ではなく、 &lt;code&gt;2,5&lt;/code&gt; です。科学表記（ &lt;code&gt;10e5&lt;/code&gt; ）も使用できます。</target>
        </trans-unit>
        <trans-unit id="58daf2766341890bda462e187ee4716941297918" translate="yes" xml:space="preserve">
          <source>For these reasons, fish does not do this, and instead expects asterisks to be quoted or escaped if they aren't supposed to be expanded.</source>
          <target state="translated">このような理由から、fishではこのような処理は行わず、アスタリスクが展開されない場合は引用符で囲まれるかエスケープされることを想定しています。</target>
        </trans-unit>
        <trans-unit id="8e25112d09d08d00c25b607d90cd81a9a425781e" translate="yes" xml:space="preserve">
          <source>For uninstalling fish: see &lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ: Uninstalling fish&lt;/a&gt;.</source>
          <target state="translated">魚のアンインストールについては、&lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ：魚のアンインストールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9cd7f4b35527e8bd36dce665102b57e97e70e363" translate="yes" xml:space="preserve">
          <source>Format Specifiers</source>
          <target state="translated">フォーマット指定</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">対話型シェルからは、以下のコマンドは戻り値ゼロで終了します。</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">これからは、スペースを節約するために、プロンプトが単なる ' &lt;code&gt;&amp;gt;&lt;/code&gt; 'であると仮定します。</target>
        </trans-unit>
        <trans-unit id="30d17302061ced704b6b34a3749f31c19ef26d8f" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a &lt;code&gt;&amp;gt;&lt;/code&gt; to save space.</source>
          <target state="translated">これからは、スペースを節約するために、プロンプトが単なる &lt;code&gt;&amp;gt;&lt;/code&gt; であるかのように見せかけます。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">関数は魚の構文で書かれたプログラムです。1つ以上のコマンドとその引数を1つの名前でグループ化します。また、追加の引数で特定のコマンドを起動するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d38037291d36ba014bf585647c762ae13fe7c883" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together various commands and their arguments using a single name.</source>
          <target state="translated">関数は、fish構文で書かれたプログラムです。様々なコマンドとその引数を一つの名前でまとめます。</target>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">文字列 &lt;code&gt;__fish_print_&lt;/code&gt; で始まる関数は、改行で区切られた文字列のリストを出力します。たとえば、 &lt;code&gt;__fish_print_filesystems&lt;/code&gt; は、すべての既知のファイルシステムのリストを出力します。 &lt;code&gt;__fish_complete_&lt;/code&gt; で始まる関数は、説明と補完の改行区切りリストを出力します。説明はタブ文字で補完と区切られます。</target>
        </trans-unit>
        <trans-unit id="db0f72339f2340e5e8b351628b140fc4b4a5095c" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:</source>
          <target state="translated">関数はコマンドラインや設定ファイルで定義できますが、自動的にロードすることもできます。これにはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">関数はコマンドラインや設定ファイルで定義できますが、自動的にロードすることもできます。この方法にはいくつかの利点があります。オートロードされた関数は、すべての実行中のシェルで自動的に利用できるようになります。関数の定義が変更された場合、すべての実行中のシェルは自動的に変更後のバージョンをリロードします。起動時間やメモリ使用量などが改善されます。</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">さらなる支援と開発</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">将来の機能フラグ</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">' &lt;code&gt;--colors&lt;/code&gt; 'のようなGNUスタイルの長いオプション。GNUスタイルの長いオプションは、2文字以上にすることができ、2つのハイフンが前に付くため、一緒にグループ化することはできません。オプションの引数は、次のパラメーターで指定するか（ ' &lt;code&gt;--quoting-style shell&lt;/code&gt; '）、またはオプションに ' &lt;code&gt;=&lt;/code&gt; 'と値を追加します（ ' &lt;code&gt;--quoting-style=shell&lt;/code&gt; '）。GNUスタイルの長いオプションは、省略形が一意である限り省略できます（ ' &lt;code&gt;--h&lt;/code&gt; '）は、 'h'で始まる唯一の長いオプションである場合、 ' &lt;code&gt;--help&lt;/code&gt; ' と同等です）。</target>
        </trans-unit>
        <trans-unit id="6756fc7d063fb985ac7207a33ec481f9efb07765" translate="yes" xml:space="preserve">
          <source>GNU style long options, like &lt;code&gt;--colors&lt;/code&gt;. GNU style long options can be more than one character long, are preceded by two hyphens, and can't be grouped together. Option arguments may be specified in the following parameter (&lt;code&gt;--quoting-style shell&lt;/code&gt;) or after a &lt;code&gt;=&lt;/code&gt; (&lt;code&gt;--quoting-style=shell&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;--colors&lt;/code&gt; などのGNUスタイルの長いオプション。GNUスタイルの長いオプションは、複数の文字長にすることができ、前に2つのハイフンを付けることができ、グループ化することはできません。オプション引数は、次のパラメーター（ &lt;code&gt;--quoting-style shell&lt;/code&gt; ）またはa &lt;code&gt;=&lt;/code&gt; （- &lt;code&gt;--quoting-style=shell&lt;/code&gt; ）の後に指定できます。</target>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; を使用してリストの長さを取得します。</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="8eaa4a571cfa23b1046936adad07606e523f576d" translate="yes" xml:space="preserve">
          <source>Global variables are accessible to functions whether they are exported or not.</source>
          <target state="translated">グローバル変数は、エクスポートされているかどうかに関わらず、関数にアクセスできるようになっています。</target>
        </trans-unit>
        <trans-unit id="abb6bdf312d84d0e5db0e8ce8296e247a865a4cf" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, and will never be erased unless explicitly requested by using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="translated">グローバル変数は現在のフィッシュセッションに固有であり、 &lt;code&gt;set -e&lt;/code&gt; を使用して明示的に要求されない限り消去されることはありません。</target>
        </trans-unit>
        <trans-unit id="14e54a9b9a49fb183045e69571e35c245eada9b8" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="translated">グローバル変数は現在のfishセッションに固有ですが、特定のブロックスコープに関連付けられておらず、ユーザーが &lt;code&gt;set -e&lt;/code&gt; を使用して明示的に要求しない限り、消去されることはありません。</target>
        </trans-unit>
        <trans-unit id="75f01947c75f2d491048e400dc98a7697d09c297" translate="yes" xml:space="preserve">
          <source>Globbing doesn't happen on expanded variables, so:</source>
          <target state="translated">展開された変数ではグロブは起こらないので</target>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="8b4ff52ac09d0794b0b2790069c175e0e201849a" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">特定のビルトインに関するヘルプは、 &lt;code&gt;-h&lt;/code&gt; パラメーターを使用して取得することもできます。たとえば、&lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt;ビルトインのヘルプを取得するには、 &lt;code&gt;fg -h&lt;/code&gt; または &lt;code&gt;help fg&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">特定の組み込みに関するヘルプは、 &lt;code&gt;-h&lt;/code&gt; パラメーターを使用して取得することもできます。たとえば、組み込みの &lt;code&gt;fg&lt;/code&gt; に関するヘルプを表示するには、 &lt;code&gt;fg -h&lt;/code&gt; または &lt;code&gt;help fg&lt;/code&gt; と入力します。</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">ここでは、いくつかの便利なコマンドを紹介します。</target>
        </trans-unit>
        <trans-unit id="bed5ac3a7c90f81a97fb1af26263e4e9bc837a2c" translate="yes" xml:space="preserve">
          <source>Here we define some of the terms used on this page and throughout the rest of the fish documentation:</source>
          <target state="translated">ここでは、このページやその他のfishドキュメントで使用されているいくつかの用語を定義します。</target>
        </trans-unit>
        <trans-unit id="59a0fbf9a4b62e6e15f7e7d04099ec292404a8c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;make&lt;/code&gt; is only executed if &lt;code&gt;./configure&lt;/code&gt; succeeds (returns 0), and &lt;code&gt;sudo make install&lt;/code&gt; is only executed if both &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; succeed.</source>
          <target state="translated">ここで、 &lt;code&gt;make&lt;/code&gt; は &lt;code&gt;./configure&lt;/code&gt; が成功した場合（0を返す）にのみ実行され、 &lt;code&gt;sudo make install&lt;/code&gt; &lt;code&gt;./configure&lt;/code&gt; と &lt;code&gt;make&lt;/code&gt; の両方が成功した場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="a4068759fb02ece3b9b7f59cd6a0574aa4fe6fb1" translate="yes" xml:space="preserve">
          <source>Heredocs</source>
          <target state="translated">Heredocs</target>
        </trans-unit>
        <trans-unit id="3475b4cb946f794b7047a56966e51dd30d3be916" translate="yes" xml:space="preserve">
          <source>Hidden files (where the name begins with a dot) are not considered when wildcarding unless the wildcard string has a dot in that place.</source>
          <target state="translated">隠しファイル(名前がドットで始まるもの)は、ワイルドカード文字列がその場所にドットを持っていない限り、ワイルドカードの際に考慮されません。</target>
        </trans-unit>
        <trans-unit id="9bfaa88d4d6e9d2a3eb77e15fdf1e42b45ec633c" translate="yes" xml:space="preserve">
          <source>History searches are case-insensitive unless the search string contains an uppercase character, and they can be aborted by pressing the escape key.</source>
          <target state="translated">履歴検索は、検索文字列に大文字が含まれていない限り、大文字と小文字を区別せず、エスケープキーを押して中止することができます。</target>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">エスケープキーを押すことで履歴検索を中止することができます。</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">もう一度タブを押して、可能性を循環させます。</target>
        </trans-unit>
        <trans-unit id="8562520c74923aa47973021bf5a615a9d18fdbc2" translate="yes" xml:space="preserve">
          <source>Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an &quot;a&quot;.</source>
          <target state="translated">alt と他の何かをホールドすると、通常はエスケープが送信されます。例えば alt+a をホールドするとエスケープ文字が送信され、その後に &quot;a&quot; が送信されます。</target>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">ホームディレクトリの拡張</target>
        </trans-unit>
        <trans-unit id="c5e4aaa97cc3ad7f579464354a2507b9c63dac85" translate="yes" xml:space="preserve">
          <source>How can I use &lt;code&gt;-&lt;/code&gt; as a shortcut for &lt;code&gt;cd -&lt;/code&gt;?</source>
          <target state="translated">どうすれば &lt;code&gt;cd -&lt;/code&gt; ショートカットとして &lt;code&gt;-&lt;/code&gt; を使用できますか？</target>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">cd -` のショートカットとして `-` を使うにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">挨拶文を変更するには?</target>
        </trans-unit>
        <trans-unit id="54e6d1ecb8003f23585cb7559d5800b568cc815b" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is defined?</source>
          <target state="translated">変数が定義されているかどうかを確認するには?</target>
        </trans-unit>
        <trans-unit id="c4d87fc5a8041267fdcd98e9deafc888b91c5523" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is not empty?</source>
          <target state="translated">変数が空でないかどうかを確認するには?</target>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">シンタックスハイライトの色をカスタマイズするには?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">コマンドの終了ステータスを取得するには?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">魚をデフォルトのシェルにするには?</target>
        </trans-unit>
        <trans-unit id="402503e9f12a7c687d2a8e25d61d5d4c873e5c42" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc or .profile?</source>
          <target state="translated">ログインするたびにコマンドを実行するには?フィッシュの.bashrcや.profileに相当するものは何ですか?</target>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">ログインするたびにコマンドを実行するには?フィッシュの.bashrcと同等のものは何ですか?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">履歴からコマンドを実行するには?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">サブコマンドを実行するには?バックティックが効かない!?</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">1つのコマンドだけに環境変数を設定するには?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">プロンプトの設定方法は?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">環境変数を設定したりクリアしたりするには?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">マンページの補完を更新するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">ただし、ときどき、特に &lt;code&gt;pkg-config&lt;/code&gt; および関連ツールでは、スペースの分割が必要になります。</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">しかし、変数をインデックスとして使用することは現在のところサポートされていません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
