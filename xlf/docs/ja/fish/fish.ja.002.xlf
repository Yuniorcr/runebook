<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="eb050233a037dea5009df6afea79c6a67545439a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math $status - 128&lt;/code&gt; outputs the numerical exit status of the last command minus 128.</source>
          <target state="translated">&lt;code&gt;math $status - 128&lt;/code&gt; は、最後のコマンドの終了ステータスから128を引いた数値を出力します。</target>
        </trans-unit>
        <trans-unit id="62f5bddd60dd031bee23091b7071808993dd4f83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; outputs &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s0 10.0 / 6.0&lt;/code&gt; 出力 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee576ca1237b790b579b57a522ac77fdfe4dace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math -s3 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math -s3 10 / 6&lt;/code&gt; 出力 &lt;code&gt;1.666&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2afd4d22ab4aec5b0acabaa13fdb5dab928d4b72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 0xFF&lt;/code&gt; outputs 255, &lt;code&gt;math 0 x 3&lt;/code&gt; outputs 0 (because it computes 0 multiplied by 3).</source>
          <target state="translated">&lt;code&gt;math 0xFF&lt;/code&gt; は255を出力し、 &lt;code&gt;math 0 x 3&lt;/code&gt; は0を出力します（0に3を掛けて計算するため）。</target>
        </trans-unit>
        <trans-unit id="81cc154eafffdbcc1fc0bc775abc9037a8ee7f57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 1+1&lt;/code&gt; outputs 2.</source>
          <target state="translated">&lt;code&gt;math 1+1&lt;/code&gt; 出力2。</target>
        </trans-unit>
        <trans-unit id="0b9bceb25a6bea3bf050d266eb2dabb87359d38c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 10 / 6&lt;/code&gt; outputs &lt;code&gt;1.666667&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 10 / 6&lt;/code&gt; &lt;code&gt;1.666667&lt;/code&gt; 出力します。</target>
        </trans-unit>
        <trans-unit id="0506f0b9975fb7a5dac75392d203b4e4d03c48aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math 5 \* 2&lt;/code&gt; or &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; or &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; all output &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math 5 \* 2&lt;/code&gt; または &lt;code&gt;math &quot;5 * 2&quot;&lt;/code&gt; または &lt;code&gt;math 5 &quot;*&quot; 2&lt;/code&gt; すべての出力 &lt;code&gt;10&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac2f6b46e44457ebc6c17a24cac39023b91980ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +    2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は引数間の空白を無視し、その入力を複数の引数（内部でスペースで結合）として受け取るため、 &lt;code&gt;math 2 +2&lt;/code&gt; と &lt;code&gt;math &quot;2 + 2&quot;&lt;/code&gt; は同じように機能します。 &lt;code&gt;math 2 2&lt;/code&gt; はエラーです。</target>
        </trans-unit>
        <trans-unit id="5cfe1d0b897a4b186b164463b5e374849fe22e37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; ignores whitespace between arguments and takes its input as multiple arguments (internally joined with a space), so &lt;code&gt;math 2 +2&lt;/code&gt; and &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; work the same. &lt;code&gt;math 2 2&lt;/code&gt; is an error.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は引数間の空白を無視し、その入力を複数の引数（内部でスペースで結合）として受け取るため、 &lt;code&gt;math 2 +2&lt;/code&gt; と &lt;code&gt;math &quot;2 +&amp;nbsp;&amp;nbsp;&amp;nbsp; 2&quot;&lt;/code&gt; +2 &quot;は同じように機能します。 &lt;code&gt;math 2 2&lt;/code&gt; はエラーです。</target>
        </trans-unit>
        <trans-unit id="9ba0660e6966691b91248fb2bd5f96aab0fbeb26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; is used to perform mathematical calculations. It supports all the usual operations such as addition, subtraction, etc. As well as functions like &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt; and &lt;code&gt;log2()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は、数学的な計算を実行するために使用されます。これは、加算、減算などの通常の操作をすべてサポートします。また、 &lt;code&gt;abs()&lt;/code&gt; 、 &lt;code&gt;sqrt()&lt;/code&gt; 、および &lt;code&gt;log2()&lt;/code&gt; などの関数もサポートします。</target>
        </trans-unit>
        <trans-unit id="f0c967cc75c19f494f0c88a7accc5d3cf4435577" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows some operators, constants, functions and can (obviously) read numbers.</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; はいくつかの演算子、定数、関数を知っており、（明らかに）数値を読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="be9c5baace2aafc6d8913dc0e713e617b094c022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following constants:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は次の定数を知っています。</target>
        </trans-unit>
        <trans-unit id="54b59170a6a2d63ae4126c98f35573504c3fe866" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; knows the following operators:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は次の演算子を知っています。</target>
        </trans-unit>
        <trans-unit id="009be72b39b76a473ac24d04bf2afb4a541294d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;math&lt;/code&gt; supports the following functions:</source>
          <target state="translated">&lt;code&gt;math&lt;/code&gt; は次の関数をサポートしています。</target>
        </trans-unit>
        <trans-unit id="be1434f80555c9e72306465d0deaafae514e79ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge&lt;/code&gt; immediately incorporates history changes from other sessions. Ordinarily &lt;code&gt;fish&lt;/code&gt; ignores history changes from sessions started after the current one. This command applies those changes immediately.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; は、他のセッションからの履歴変更をすぐに組み込みます。通常、 &lt;code&gt;fish&lt;/code&gt; は現在のセッションの後に開始されたセッションからの履歴の変更を無視します。このコマンドは、それらの変更をすぐに適用します。</target>
        </trans-unit>
        <trans-unit id="774a283e059b420761769f3fd4e58b1c4617fff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mv&lt;/code&gt;, move (rename) files</source>
          <target state="translated">&lt;code&gt;mv&lt;/code&gt; 、ファイルの移動（名前変更）</target>
        </trans-unit>
        <trans-unit id="d5068ef44383529da8a297fad4521ff3def0b93d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n#max&lt;/code&gt; means that flags matching the regex &quot;^--?d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n#max&lt;/code&gt; は、正規表現「^-？d + $」に一致するフラグが有効であることを意味します。表示されると、それらは変数 &lt;code&gt;_flag_n&lt;/code&gt; および &lt;code&gt;_flag_max&lt;/code&gt; に割り当てられます。これにより、単一の「-」を前に付けることにより、有効な正または負の整数を指定できます。多くのコマンドがこのイディオムをサポートしています。たとえば、 &lt;code&gt;head -3 /a/file&lt;/code&gt; を使用して、/ a / fileの最初の3行のみを出力します。また、いずれかのフラグを使用して値を指定できます。 &lt;code&gt;-n NNN&lt;/code&gt; または &lt;code&gt;--max NNN&lt;/code&gt; この例では</target>
        </trans-unit>
        <trans-unit id="7023e674591c966dcf0f86a6fe75236339070f1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n-name=+&lt;/code&gt; means that only &lt;code&gt;--name&lt;/code&gt; is valid. It requires a value and can be used more than once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the values associated with each occurrence of the flag.</source>
          <target state="translated">&lt;code&gt;n-name=+&lt;/code&gt; は、 &lt;code&gt;--name&lt;/code&gt; のみが有効であることを意味します。値が必要で、複数回使用できます。フラグが表示されている場合、 &lt;code&gt;_flag_n&lt;/code&gt; と &lt;code&gt;_flag_name&lt;/code&gt; には、フラグが出現するたびに関連付けられている値が設定されます。</target>
        </trans-unit>
        <trans-unit id="10c98ccb9e926b5c88017fefb6f1a99d034b3aee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It requires a value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the single mandatory value associated with the flag.</source>
          <target state="translated">&lt;code&gt;n/name=&lt;/code&gt; は、 &lt;code&gt;-n&lt;/code&gt; と &lt;code&gt;--name&lt;/code&gt; の両方が有効であることを意味します。値が必要であり、最大で1回使用できます。フラグが表示されている場合、 &lt;code&gt;_flag_n&lt;/code&gt; と &lt;code&gt;_flag_name&lt;/code&gt; には、フラグに関連付けられている単一の必須値が設定されます。</target>
        </trans-unit>
        <trans-unit id="11979a51fb38eb5d6b66a5b8c9d7f5b86329e977" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n/name=?&lt;/code&gt; means that both &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt; are valid. It accepts an optional value and can be used at most once. If the flag is seen then &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_name&lt;/code&gt; will be set with the value associated with the flag if one was provided else it will be set with no values.</source>
          <target state="translated">&lt;code&gt;n/name=?&lt;/code&gt; &lt;code&gt;-n&lt;/code&gt; と &lt;code&gt;--name&lt;/code&gt; の両方が有効であることを意味します。オプションの値を受け入れ、最大で1回使用できます。フラグが表示されている場合、 &lt;code&gt;_flag_n&lt;/code&gt; と &lt;code&gt;_flag_name&lt;/code&gt; には、フラグに関連付けられた値が設定されます（値が指定されている場合）。値が設定されていません。</target>
        </trans-unit>
        <trans-unit id="6a3aaaa7ebe33bd42f7c7723f56bc9270c4a585f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n::max&lt;/code&gt; means that flags matching the regex &quot;^--?\d+$&quot; are valid. When seen they are assigned to the variables &lt;code&gt;_flag_n&lt;/code&gt; and &lt;code&gt;_flag_max&lt;/code&gt;. This allows any valid positive or negative integer to be specified by prefixing it with a single &quot;-&quot;. Many commands support this idiom. For example &lt;code&gt;head -3 /a/file&lt;/code&gt; to emit only the first three lines of /a/file. You can also specify the value using either flag: &lt;code&gt;-n NNN&lt;/code&gt; or &lt;code&gt;--max NNN&lt;/code&gt; in this example.</source>
          <target state="translated">&lt;code&gt;n::max&lt;/code&gt; は、正規表現「^-？\ d + $」に一致するフラグが有効であることを意味します。表示されると、変数 &lt;code&gt;_flag_n&lt;/code&gt; および &lt;code&gt;_flag_max&lt;/code&gt; に割り当てられます。これにより、任意の有効な正または負の整数を、単一の「-」を前に付けることで指定できます。多くのコマンドがこのイディオムをサポートしています。たとえば、 &lt;code&gt;head -3 /a/file&lt;/code&gt; とすると、/ a / fileの最初の3行だけが出力されます。この例では、 &lt;code&gt;-n NNN&lt;/code&gt; または &lt;code&gt;--max NNN&lt;/code&gt; のいずれかのフラグを使用して値を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="18757061001b09cf2873d7ed5d548b11e41c7525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nextd&lt;/code&gt; moves forwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the end of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;nextd&lt;/code&gt; は、訪問したディレクトリの履歴で &lt;code&gt;POS&lt;/code&gt; の位置を進めます。履歴の終わりに達した場合、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="cea306a2ee9cfb2d8fb7788331bf26c28447c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;not&lt;/code&gt; negates the exit status of another command. If the exit status is zero, &lt;code&gt;not&lt;/code&gt; returns 1. Otherwise, &lt;code&gt;not&lt;/code&gt; returns 0.</source>
          <target state="translated">&lt;code&gt;not&lt;/code&gt; 別のコマンドの終了ステータスを無効にしません。終了ステータスがゼロの場合、 &lt;code&gt;not&lt;/code&gt; は1を返します。それ以外の場合、 &lt;code&gt;not&lt;/code&gt; は0を返します。</target>
        </trans-unit>
        <trans-unit id="db48abf0126ad617f48775398922a0b4b30d0bc0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open *.txt&lt;/code&gt; opens all the text files in the current directory using your system's default text editor.</source>
          <target state="translated">&lt;code&gt;open *.txt&lt;/code&gt; は、システムのデフォルトのテキストエディターを使用して、現在のディレクトリにあるすべてのテキストファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="e94f06b97a3cfcb7ec8a4770650b1e748f69af17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt; opens a file in its default application, using the appropriate tool for the operating system. On GNU/Linux, this requires the common but optional &lt;code&gt;xdg-open&lt;/code&gt; utility, from the &lt;code&gt;xdg-utils&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; は、オペレーティングシステムに適したツールを使用して、デフォルトのアプリケーションでファイルを開きます。GNU / Linuxでは、これには &lt;code&gt;xdg-utils&lt;/code&gt; パッケージからの一般的だがオプションの &lt;code&gt;xdg-open&lt;/code&gt; ユーティリティが必要です。</target>
        </trans-unit>
        <trans-unit id="23eeee895599e5eae80cda23801496141175086a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;open&lt;/code&gt;, open files with the default application associated with each filetype</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 、各ファイルタイプに関連付けられたデフォルトのアプリケーションでファイルを開く</target>
        </trans-unit>
        <trans-unit id="6f86ac0554f4a4cf4f28495788244852b2e6599f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、現在の終了ステータス自体は変更しませんが、実行するコマンドは変更する可能性があります。最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="dac5a9585518dd59c14ca7616fb90e727007732e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; does not change the current exit status itself, but the command it runs most likely will. The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、現在の終了ステータス自体は変更しませんが、実行するコマンドはほとんど変更します。最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="011af2ca1a12c1a3f3a067f4ab735209202aafb7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; is used to execute a command if the previous command was not successful (returned a status of something other than 0).</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; 、前のコマンドが成功しなかった（0以外のステータスを返した）場合にコマンドを実行するために使用されます。</target>
        </trans-unit>
        <trans-unit id="afa6b74bd124cb8b57c3d66b4c7a1084e37218d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; block. See the documentation for &lt;a href=&quot;#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; for examples.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; ステートメントは、&lt;a href=&quot;#if&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;ブロックまたは&lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;ブロックの条件の一部として使用できます。例については、&lt;a href=&quot;#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="3c73d73d5ebdf318201e26c0530d1eeb58fc2ce6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;or&lt;/code&gt; statements may be used as part of the condition in an &lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt; or &lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt; block.</source>
          <target state="translated">&lt;code&gt;or&lt;/code&gt; ステートメントは、&lt;a href=&quot;if#cmd-if&quot;&gt;and&lt;/a&gt;または&lt;a href=&quot;while#cmd-while&quot;&gt;while&lt;/a&gt;ブロックの条件の一部として使用できます。</target>
        </trans-unit>
        <trans-unit id="3f200b52a1765aa96f91d9512533bf90cd4d3e3d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pager-toggle-search&lt;/code&gt;, toggles the search field if the completions pager is visible.</source>
          <target state="translated">&lt;code&gt;pager-toggle-search&lt;/code&gt; 、補完ページャーが表示されている場合に検索フィールドを切り替えます。</target>
        </trans-unit>
        <trans-unit id="93e6cd2cf57f32f0f1074687103ba4dd1420c892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pi&lt;/code&gt; - You know that one. Half of Tau. (Tau is not implemented)</source>
          <target state="translated">&lt;code&gt;pi&lt;/code&gt; -あなたはそれを知っています。タウの半分。（Tauは実装されていません）</target>
        </trans-unit>
        <trans-unit id="0f446d5ed35eb5048e4c7f001b1f27dc9402116e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pipestatus&lt;/code&gt;, a list of exit statuses of all processes that made up the last executed pipe.</source>
          <target state="translated">&lt;code&gt;pipestatus&lt;/code&gt; 、最後に実行されたパイプを構成するすべてのプロセスの終了ステータスのリスト。</target>
        </trans-unit>
        <trans-unit id="91f28400f6533478b46d55c90e3c872cc0eaea4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; to add directories to the stack.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; は、ディレクトリスタックからトップディレクトリを削除し、作業ディレクトリを新しいトップディレクトリに変更します。&lt;a href=&quot;#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;を使用して、スタックにディレクトリを追加します。</target>
        </trans-unit>
        <trans-unit id="67a047b7a48542b870bd5211e515649aee68917e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;popd&lt;/code&gt; removes the top directory from the directory stack and changes the working directory to the new top directory. Use &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; to add directories to the stack or &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print it.</source>
          <target state="translated">&lt;code&gt;popd&lt;/code&gt; は、ディレクトリスタックから最上位ディレクトリを削除し、作業ディレクトリを新しい最上位ディレクトリに変更します。&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt;を使用してディレクトリをスタックに追加するか、&lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt;を使用して印刷します。</target>
        </trans-unit>
        <trans-unit id="c23cde6c68fbe655e308c020e25d49d09dd62da1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pow(x,y)&lt;/code&gt; returns x to the y (and can be written as &lt;code&gt;x ^ y&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;pow(x,y)&lt;/code&gt; はxをyに返します（ &lt;code&gt;x ^ y&lt;/code&gt; と書くこともできます）</target>
        </trans-unit>
        <trans-unit id="287de450b9e0483d85e25a5a84e5f182194a1456" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prevd&lt;/code&gt; moves backwards &lt;code&gt;POS&lt;/code&gt; positions in the history of visited directories; if the beginning of the history has been hit, a warning is printed.</source>
          <target state="translated">&lt;code&gt;prevd&lt;/code&gt; は、訪問したディレクトリの履歴内で &lt;code&gt;POS&lt;/code&gt; 位置を後方に移動します。履歴の先頭に達した場合、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="758894fa9ac3dcdc16edfc52096829dc60931b04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prompt_pwd&lt;/code&gt; is a function to print the current working directory in a way suitable for prompts. It will replace the home directory with &quot;~&quot; and shorten every path component but the last to a default of one character.</source>
          <target state="translated">&lt;code&gt;prompt_pwd&lt;/code&gt; は、プロンプトに適した方法で現在の作業ディレクトリを出力する関数です。ホームディレクトリを「〜」に置き換え、すべてのパスコンポーネントを短縮しますが、最後のコンポーネントはデフォルトの1文字に短縮します。</target>
        </trans-unit>
        <trans-unit id="e5c43c64e240d0f4ae1a99ca5c42cd0423139bc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd +NUMBER&lt;/code&gt; rotates the stack counter-clockwise i.e. from bottom to top</source>
          <target state="translated">&lt;code&gt;pushd +NUMBER&lt;/code&gt; は、スタックを反時計回りに、つまり下から上に回転します</target>
        </trans-unit>
        <trans-unit id="6ba679406b42673c5180f9bba2472c6204d8f0cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pushd -NUMBER&lt;/code&gt; rotates clockwise i.e. top to bottom.</source>
          <target state="translated">&lt;code&gt;pushd -NUMBER&lt;/code&gt; は時計回り、つまり上から下に回転します。</target>
        </trans-unit>
        <trans-unit id="d9173c9010853802ba5c4a311f821ba14078009e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pwd&lt;/code&gt; outputs (prints) the current working directory.</source>
          <target state="translated">&lt;code&gt;pwd&lt;/code&gt; は現在の作業ディレクトリを出力（印刷）します。</target>
        </trans-unit>
        <trans-unit id="72ec7167859aebdbfb7c4a4a7e1050eee5ed4896" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt; reads from standard input and either writes the result back to standard output (for use in command substitution), or stores the result in one or more shell variables. By default, &lt;code&gt;read&lt;/code&gt; reads a single line and splits it into variables on spaces or tabs. Alternatively, a null character or a maximum number of characters can be used to terminate the input, and other delimiters can be given. Unlike other shells, there is no default variable (such as &lt;code&gt;REPLY&lt;/code&gt;) for storing the result - instead, it is printed on standard output.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; は標準入力から読み取り、結果を標準出力に書き戻すか（コマンド置換で使用するため）、結果を1つ以上のシェル変数に格納します。デフォルトでは、 &lt;code&gt;read&lt;/code&gt; は1行を読み取り、それをスペースまたはタブ上の変数に分割します。または、ヌル文字または最大文字数を使用して入力を終了し、他の区切り文字を指定できます。他のシェルとは異なり、結果を保存するためのデフォルトの変数（ &lt;code&gt;REPLY&lt;/code&gt; など）はありません。代わりに、標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="581f42e718d0bcfbf0164027aaefb2e2e09daff6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;realpath&lt;/code&gt; resolves a path to its absolute path.</source>
          <target state="translated">&lt;code&gt;realpath&lt;/code&gt; は、パスをその絶対パスに解決します。</target>
        </trans-unit>
        <trans-unit id="35bd00f382e8670d7d44d2b40cf3fca33494e874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint-mode&lt;/code&gt; reexecutes the fish_mode_prompt function and redraws the prompt. This is useful for vi-mode. If no fish_mode_prompt exists, it acts like a normal repaint.</source>
          <target state="translated">&lt;code&gt;repaint-mode&lt;/code&gt; は、fish_mode_prompt関数を再実行し、プロンプトを再描画します。これはviモードに役立ちます。fish_mode_promptが存在しない場合は、通常の再描画のように機能します。</target>
        </trans-unit>
        <trans-unit id="8af37077a702119f1289199205be5c8570e1f654" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repaint&lt;/code&gt; reexecutes the prompt functions and redraws the prompt. Multiple successive repaints are coalesced.</source>
          <target state="translated">&lt;code&gt;repaint&lt;/code&gt; はプロンプト機能を再実行し、プロンプトを再描画します。複数の連続した再描画が合体します。</target>
        </trans-unit>
        <trans-unit id="ff49b83e64396ed910787499c3a6a700a00c3e74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat-jump&lt;/code&gt; and &lt;code&gt;repeat-jump-reverse&lt;/code&gt;, redo the last jump in the same/opposite direction</source>
          <target state="translated">&lt;code&gt;repeat-jump&lt;/code&gt; と &lt;code&gt;repeat-jump-reverse&lt;/code&gt; 、最後のジャンプを同じ/反対方向にやり直します</target>
        </trans-unit>
        <trans-unit id="4b249dc97dd0ed2d7efc75e8750d13ccd586b86f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt; halts a currently running function. The exit status is set to &lt;code&gt;STATUS&lt;/code&gt; if it is given.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; は、現在実行中の関数を停止します。終了ステータスは、指定されている場合は &lt;code&gt;STATUS&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="2dff648efb696543bf4783ef158dc6faac05096b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; - rounds to the nearest integer, away from 0</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; -0から離れた最も近い整数に丸めます</target>
        </trans-unit>
        <trans-unit id="9ae815b29923bb2081652f0d74075b638b35e307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;save&lt;/code&gt; immediately writes all changes to the history file. The shell automatically saves the history file; this option is provided for internal use and should not normally need to be used by the user.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; は、すべての変更をすぐに履歴ファイルに書き込みます。シェルは自動的に履歴ファイルを保存します。このオプションは内部使用のために提供されており、通常はユーザーが使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="f9cbc63b923d6e80c08215a900beb75279f6f039" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scope-shadowing&lt;/code&gt; if the function shadows the vars in the calling function (the normal case if it wasn't defined with &lt;code&gt;--no-scope-shadowing&lt;/code&gt;), else &lt;code&gt;no-scope-shadowing&lt;/code&gt;, or &lt;code&gt;n/a&lt;/code&gt; if the function isn't defined,</source>
          <target state="translated">&lt;code&gt;scope-shadowing&lt;/code&gt; 関数が呼び出し元の関数の変数をシャドウする場合はscope-shadowing（ &lt;code&gt;--no-scope-shadowing&lt;/code&gt; &lt;code&gt;no-scope-shadowing&lt;/code&gt; で定義されていない場合は通常のケース）、それ以外はno-scope-shadowing、または関数がそうでない場合は &lt;code&gt;n/a&lt;/code&gt; 定義された、</target>
        </trans-unit>
        <trans-unit id="28ff499477de962fb27a4867869e04752ace3e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;search&lt;/code&gt; returns history items matching the search string. If no search string is provided it returns all history items. This is the default operation if no other operation is specified. You only have to explicitly say &lt;code&gt;history search&lt;/code&gt; if you wish to search for one of the subcommands. The &lt;code&gt;--contains&lt;/code&gt; search option will be used if you don't specify a different search option. Entries are ordered newest to oldest unless you use the &lt;code&gt;--reverse&lt;/code&gt; flag. If stdout is attached to a tty the output will be piped through your pager by the history function. The history builtin simply writes the results to stdout.</source>
          <target state="translated">&lt;code&gt;search&lt;/code&gt; は、検索文字列に一致する履歴アイテムを返します。検索文字列を指定しないと、すべての履歴アイテムが返されます。他の操作が指定されていない場合、これがデフォルトの操作です。サブコマンドの1つを検索する場合にのみ、 &lt;code&gt;history search&lt;/code&gt; を明示的に言う必要があります。 &lt;code&gt;--contains&lt;/code&gt; の別の検索オプションを指定しない場合は、検索オプションが使用されます。 &lt;code&gt;--reverse&lt;/code&gt; フラグを使用しない限り、エントリは新しいものから最も古いものの順に並べられます。stdoutがttyに接続されている場合、出力は履歴機能によってページャーにパイプされます。組み込みの履歴は、結果をstdoutに書き込むだけです。</target>
        </trans-unit>
        <trans-unit id="f3f96766ba4c2b74ccc38f1a311d22fc52bcedcc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert-notfirst&lt;/code&gt;, inserts the matching sequence into the command line, unless the cursor is at the beginning</source>
          <target state="translated">&lt;code&gt;self-insert-notfirst&lt;/code&gt; は、カーソルが先頭にない限り、一致するシーケンスをコマンドラインに挿入します</target>
        </trans-unit>
        <trans-unit id="47994204741d29e8fba63c4defd897209f0ef532" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;self-insert&lt;/code&gt;, inserts the matching sequence into the command line</source>
          <target state="translated">&lt;code&gt;self-insert&lt;/code&gt; 挿入、一致するシーケンスをコマンドラインに挿入します</target>
        </trans-unit>
        <trans-unit id="7bc81f408553d427ee9413652a2f976a6b4c6dd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;../index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は&lt;a href=&quot;../index#variables&quot;&gt;シェル変数を&lt;/a&gt;操作します。</target>
        </trans-unit>
        <trans-unit id="78965c3228dd7b50cac24fd22a4c3a8f0bdef2ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; manipulates &lt;a href=&quot;index#variables&quot;&gt;shell variables&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; は&lt;a href=&quot;index#variables&quot;&gt;シェル変数を&lt;/a&gt;操作します。</target>
        </trans-unit>
        <trans-unit id="4f185cc7bb3302f1e1eb498766b8e2bd113f381a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set&lt;/code&gt; requires all options to come before any other arguments. For example, &lt;code&gt;set flags -l&lt;/code&gt; will have the effect of setting the value of the variable &lt;code&gt;flags&lt;/code&gt; to '-l', not making the variable local.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; では、すべてのオプションが他の引数の前に来る必要があります。たとえば、 &lt;code&gt;set flags -l&lt;/code&gt; は、変数をローカルにせずに、変数 &lt;code&gt;flags&lt;/code&gt; の値を「-l」に設定する効果があります。</target>
        </trans-unit>
        <trans-unit id="9948f6276410fe2f9dcf81419917c9bdeb9052d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; corresponds to a reserved color name such as &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits. The &lt;em&gt;br&lt;/em&gt;-, as in 'bright', forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray. A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、ターミナルのテキストの色とスタイルを制御するために使用されます。 &lt;code&gt;VALUE&lt;/code&gt; は、3桁または6桁の16進数で指定される&lt;em&gt;赤&lt;/em&gt;やRGBカラー値などの予約済みカラー名に対応します。&lt;em&gt;BR&lt;/em&gt; - 、「明るい」のように、フォームは、フル輝度が多くの端末に8標準輝度の色の変異体です。&lt;em&gt;brblackの&lt;/em&gt;輝度は&lt;em&gt;黒&lt;/em&gt;よりも高く、灰色に&lt;em&gt;近づき&lt;/em&gt;ます。特別なキーワード&lt;em&gt;normalは、&lt;/em&gt;テキストのフォーマットを端末のデフォルトにリセットします。</target>
        </trans-unit>
        <trans-unit id="9a61b97a3a96f79739663fe1e066e0c4c4c00523" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; is used to control the color and styling of text in the terminal. &lt;code&gt;VALUE&lt;/code&gt; describes that styling. It's a reserved color name like &lt;em&gt;red&lt;/em&gt; or a RGB color value given as 3 or 6 hexadecimal digits (&quot;F27&quot; or &quot;FF2277&quot;). A special keyword &lt;em&gt;normal&lt;/em&gt; resets text formatting to terminal defaults.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、端末のテキストの色とスタイルを制御するために使用されます。 &lt;code&gt;VALUE&lt;/code&gt; はそのスタイリングを表します。これは、&lt;em&gt;赤の&lt;/em&gt;ような予約済みの色名、または3桁または6桁の16進数（「F27」または「FF2277」）で指定されたRGBカラー値です。特別なキーワード&lt;em&gt;normalは、&lt;/em&gt;テキストのフォーマットを端末のデフォルトにリセットします。</target>
        </trans-unit>
        <trans-unit id="ab26307dc8847048c91facf1a58ea82662da70fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit code of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、文字のシーケンスを&lt;em&gt;stdoutに出力&lt;/em&gt;することによって機能します。コマンド置換またはパイプで使用される場合、これらの文字もキャプチャされます。これは望ましい場合と望ましくない場合があります。 &lt;code&gt;set_color&lt;/code&gt; を使用 &lt;code&gt;isatty stdout&lt;/code&gt; 前にisatty stdoutの終了コードを確認することは、スクリプトで出力を色付けしないことを決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0edcbbfc0660173d1858fb94dc65feaa1949db9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_color&lt;/code&gt; works by printing sequences of characters to &lt;em&gt;stdout&lt;/em&gt;. If used in command substitution or a pipe, these characters will also be captured. This may or may not be desirable. Checking the exit status of &lt;code&gt;isatty stdout&lt;/code&gt; before using &lt;code&gt;set_color&lt;/code&gt; can be useful to decide not to colorize output in a script.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; は、文字のシーケンスを&lt;em&gt;stdoutに出力&lt;/em&gt;することによって機能します。コマンド置換またはパイプで使用される場合、これらの文字もキャプチャされます。これは望ましい場合と望ましくない場合があります。 &lt;code&gt;set_color&lt;/code&gt; を使用 &lt;code&gt;isatty stdout&lt;/code&gt; 前にisattystdoutの終了ステータスを確認すると、スクリプトの出力に色を付けないことを決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5f8f7bb400593234e096f28a62980d44f3d7595d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; creates a new &lt;a href=&quot;../index#variables-scope&quot;&gt;local scope&lt;/a&gt;; &lt;code&gt;set --local&lt;/code&gt; within a sourced block will not affect variables in the enclosing scope.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は新しい&lt;a href=&quot;../index#variables-scope&quot;&gt;ローカルスコープを&lt;/a&gt;作成します; ソースブロック内の &lt;code&gt;set --local&lt;/code&gt; は、囲んでいるスコープ内の変数には影響しません。</target>
        </trans-unit>
        <trans-unit id="44bd12edd43e43a291874a613bddb397393e4363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell as a new block of code. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は、現在のシェルで指定されたファイルのコマンドを新しいコードブロックとして評価します。これは、コマンドを実行するために新しいプロセスを開始することとは異なります（つまり、 &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ）。コマンドは現在のシェルによって評価されるため、シェル変数の変更は現在のシェルに影響します。ファイル名の後に追加の引数が指定されている場合、それらは &lt;code&gt;$argv&lt;/code&gt; 変数に挿入されます。 &lt;code&gt;$argv&lt;/code&gt; 変数は、ソース化ファイルの名前が含まれていません。</target>
        </trans-unit>
        <trans-unit id="92cf10690e111961211954c672900c642fb4e17e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;source&lt;/code&gt; evaluates the commands of the specified file in the current shell. This is different from starting a new process to perform the commands (i.e. &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt;) since the commands will be evaluated by the current shell, which means that changes in shell variables will affect the current shell. If additional arguments are specified after the file name, they will be inserted into the &lt;code&gt;$argv&lt;/code&gt; variable. The &lt;code&gt;$argv&lt;/code&gt; variable will not include the name of the sourced file.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; は、現在のシェルで指定されたファイルのコマンドを評価します。コマンドは現在のシェルによって評価されるため、コマンドを実行するための新しいプロセスを開始する（つまり、 &lt;code&gt;fish &amp;lt; FILENAME&lt;/code&gt; ）とは異なります。つまり、シェル変数の変更は現在のシェルに影響します。ファイル名の後に追加の引数を指定すると、それらは &lt;code&gt;$argv&lt;/code&gt; 変数に挿入されます。 &lt;code&gt;$argv&lt;/code&gt; 変数は、ソース化ファイルの名前が含まれていません。</target>
        </trans-unit>
        <trans-unit id="b682c0f9f4fd30b611d91123367bf03905b468de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;split0&lt;/code&gt; has the important property that its output is not further split when used in a command substitution, allowing for the command substitution to produce elements containing newlines. This is most useful when used with Unix tools that produce zero bytes, such as &lt;code&gt;find -print0&lt;/code&gt; or &lt;code&gt;sort -z&lt;/code&gt;. See split0 examples below.</source>
          <target state="translated">&lt;code&gt;split0&lt;/code&gt; には、コマンド置換で使用したときに出力がさらに分割されないという重要な特性があり、コマンド置換で改行を含む要素を生成できます。これは、 &lt;code&gt;find -print0&lt;/code&gt; や &lt;code&gt;sort -z&lt;/code&gt; など、0バイトを生成するUnixツールで使用する場合に最も役立ちます。以下のsplit0の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="b18d9d888505a6c0fddbe8b5ab5788ebfaae04f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stack-trace&lt;/code&gt; prints a stack trace of all function calls on the call stack. Also &lt;code&gt;print-stack-trace&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--print-stack-trace&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stack-trace&lt;/code&gt; は、呼び出しスタック上のすべての関数呼び出しのスタックトレースを出力します。また、 &lt;code&gt;print-stack-trace&lt;/code&gt; 、 &lt;code&gt;-t&lt;/code&gt; または &lt;code&gt;--print-stack-trace&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67df8697fda987cf4b0f9d793cb1a365c353272b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;, the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of the last foreground job to exit. If the job was terminated through a signal, the exit status will be 128 plus the signal number.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; 、最後に終了するフォアグラウンドジョブの&lt;a href=&quot;#variables-status&quot;&gt;終了ステータス&lt;/a&gt;。ジョブがシグナルによって終了した場合、終了ステータスは128にシグナル番号を加えたものになります。</target>
        </trans-unit>
        <trans-unit id="85f1259baf47f016edcc07c02ff8cac3eb36ec8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string collect&lt;/code&gt; collects its input into a single output argument, without splitting the output when used in a command substitution. This is useful when trying to collect multiline output from another command into a variable. Exit status: 0 if any output argument is non-empty, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string collect&lt;/code&gt; は、コマンド置換で使用されるときに出力を分割せずに、入力を単一の出力引数に収集します。これは、別のコマンドからの複数行の出力を変数に収集しようとするときに役立ちます。終了ステータス：出力引数が空でない場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="47aeedf462897d3635e7a17a92b7bf0d2db0992d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string escape&lt;/code&gt; escapes each STRING in one of three ways. The first is &lt;code&gt;--style=script&lt;/code&gt;. This is the default. It alters the string such that it can be passed back to &lt;code&gt;eval&lt;/code&gt; to produce the original argument again. By default, all special characters are escaped, and quotes are used to simplify the output when possible. If &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-quoted&lt;/code&gt; is given, the simplifying quoted format is not used. Exit status: 0 if at least one string was escaped, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string escape&lt;/code&gt; は、3つの方法のいずれかで各STRINGをエスケープします。1つ目は &lt;code&gt;--style=script&lt;/code&gt; です。これがデフォルトです。文字列を変更して &lt;code&gt;eval&lt;/code&gt; に戻し、元の引数を再度生成できるようにします。デフォルトでは、すべての特殊文字はエスケープされ、可能な場合は出力を簡略化するために引用符が使用されます。場合は &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--no-quoted&lt;/code&gt; 与えられ、簡素化引用されたフォーマットが使用されていません。終了ステータス：少なくとも1つの文字列がエスケープされた場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="b4c7444a524aa0a5c6e14a9e5a8c764cdc56c7f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join0&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join0&lt;/code&gt; は、そのSTRING引数をゼロバイト（NUL）で区切られた単一の文字列に結合し、末尾にNULを追加します。これは、 &lt;code&gt;sort -z&lt;/code&gt; -zなどのNUL区切りの入力を受け入れるツールと組み合わせると最も便利です。終了ステータス：少なくとも1つの結合が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="d4c0633e8572c3f56e421d3e1415eb94bb2502dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by SEP, which can be an empty string. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; は、STRING引数をSEPで区切られた単一の文字列に結合します。これは空の文字列でもかまいません。終了ステータス：少なくとも1つの結合が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="4ac8783d6c5b8669120457e3abfbead54a865de8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string join&lt;/code&gt; joins its STRING arguments into a single string separated by the zero byte (NUL), and adds a trailing NUL. This is most useful in conjunction with tools that accept NUL-delimited input, such as &lt;code&gt;sort -z&lt;/code&gt;. Exit status: 0 if at least one join was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string join&lt;/code&gt; は、STRING引数をゼロバイト（NUL）で区切られた単一の文字列に結合し、末尾にNULを追加します。これは、 &lt;code&gt;sort -z&lt;/code&gt; など、NUL区切りの入力を受け入れるツールと組み合わせて使用​​すると最も便利です。終了ステータス：少なくとも1つの結合が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="31f0710b84864509b27d49251c16e09dbb8cd30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string length&lt;/code&gt; reports the length of each string argument in characters. Exit status: 0 if at least one non-empty STRING was given, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string length&lt;/code&gt; は、各文字列引数の長さを文字数で報告します。終了ステータス：空でないSTRINGが少なくとも1つ指定された場合は0、そうでない場合は1。</target>
        </trans-unit>
        <trans-unit id="ca94e657994de04d0305dfa680bad3e53fc3ae46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string lower&lt;/code&gt; converts each string argument to lowercase. Exit status: 0 if at least one string was converted to lowercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already lowercase.</source>
          <target state="translated">&lt;code&gt;string lower&lt;/code&gt; は、各文字列引数を小文字に変換します。終了ステータス：少なくとも1つの文字列が小文字に変換された場合は0、それ以外の場合は1。これは、 &lt;code&gt;-q&lt;/code&gt; フラグと組み合わせて、文字列がすでに小文字かどうかを簡単にテストできることを意味します。</target>
        </trans-unit>
        <trans-unit id="333a78e8a7e90eb78cb032128941a70a0f45d451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string match&lt;/code&gt; tests each STRING against PATTERN and prints matching substrings. Only the first match for each STRING is reported unless &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt; is given, in which case all matches are reported.</source>
          <target state="translated">&lt;code&gt;string match&lt;/code&gt; は、各STRINGをPATTERNに対してテストし、一致する部分文字列を出力します。 &lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--all&lt;/code&gt; が指定されていない限り、各STRINGの最初の一致のみが報告されます。この場合、すべての一致が報告されます。</target>
        </trans-unit>
        <trans-unit id="91089de95c70b9064ef9a4fecf2979a43632d7c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string repeat&lt;/code&gt; repeats the STRING &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--count&lt;/code&gt; times. The &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; option will limit the number of outputted char (excluding the newline). This option can be used by itself or in conjunction with &lt;code&gt;--count&lt;/code&gt;. If both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; are present, max char will be outputed unless the final repeated string size is less than max, in that case, the string will repeat until count has been reached. Both &lt;code&gt;--count&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; will accept a number greater than or equal to zero, in the case of zero, nothing will be outputed. If &lt;code&gt;-N&lt;/code&gt; or &lt;code&gt;--no-newline&lt;/code&gt; is given, the output won't contain a newline character at the end. Exit status: 0 if yielded string is not empty, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string repeat&lt;/code&gt; は、STRING &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--count&lt;/code&gt; 回を繰り返します。 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; オプションは、（改行を除く）出力チャーの数を制限します。このオプションは、単独で、または &lt;code&gt;--count&lt;/code&gt; と組み合わせて使用​​できます。 &lt;code&gt;--count&lt;/code&gt; と &lt;code&gt;--max&lt;/code&gt; の両方が存在する場合、最後に繰り返される文字列のサイズがmax未満でない限り、max charが出力されます。その場合、文字列はcountに達するまで繰り返されます。 &lt;code&gt;--count&lt;/code&gt; と &lt;code&gt;--max&lt;/code&gt; はどちらもゼロ以上の数値を受け入れます。ゼロの場合、何も出力されません。 &lt;code&gt;-N&lt;/code&gt; または &lt;code&gt;--no-newline&lt;/code&gt; の場合が指定されている場合、出力の最後に改行文字は含まれません。終了ステータス：生成された文字列が空でない場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="cd631213eafa5a59cc02430161fa5c4930279381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string replace&lt;/code&gt; is similar to &lt;code&gt;string match&lt;/code&gt; but replaces non-overlapping matching substrings with a replacement string and prints the result. By default, PATTERN is treated as a literal substring to be matched.</source>
          <target state="translated">&lt;code&gt;string replace&lt;/code&gt; は &lt;code&gt;string match&lt;/code&gt; 似ていますが、重複しない一致する部分文字列を置換文字列に置き換え、結果を出力します。デフォルトでは、PATTERNは一致するリテラル文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="b0a1126fe21f179855ec4e248020911f83cdef8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split somedelimiter&lt;/code&gt; is a replacement for &lt;code&gt;tr somedelimiter \\n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string split somedelimiter&lt;/code&gt; は、 &lt;code&gt;tr somedelimiter \\n&lt;/code&gt; 代わりになります。</target>
        </trans-unit>
        <trans-unit id="8aa496c6349d03b4676c999aab50e066cb8b5aeb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split0&lt;/code&gt; splits each STRING on the zero byte (NUL). Options are the same as &lt;code&gt;string split&lt;/code&gt; except that no separator is given.</source>
          <target state="translated">&lt;code&gt;string split0&lt;/code&gt; は、各STRINGをゼロバイト（NUL）で分割します。オプションは、区切り文字が指定 &lt;code&gt;string split&lt;/code&gt; ていないことを除いて、文字列分割と同じです。</target>
        </trans-unit>
        <trans-unit id="04bcff6b42bd8f1e79e01e4a6814e48e20fbe176" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string split&lt;/code&gt; splits each STRING on the separator SEP, which can be an empty string. If &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; is specified, at most MAX splits are done on each STRING. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, splitting is performed right-to-left. This is useful in combination with &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt;. With &lt;code&gt;-n&lt;/code&gt; or &lt;code&gt;--no-empty&lt;/code&gt;, empty results are excluded from consideration (e.g. &lt;code&gt;hello\n\nworld&lt;/code&gt; would expand to two strings and not three). Exit status: 0 if at least one split was performed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string split&lt;/code&gt; は、区切り文字SEPで各STRINGを分割します。これは空の文字列でもかまいません。場合は &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; が指定されている、ほとんどのMAX分割で各文字列に対して行われます。場合は &lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--right&lt;/code&gt; が与えられ、分割は右から左に行われます。これは、 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; と組み合わせて使用​​すると便利です。 &lt;code&gt;-n&lt;/code&gt; または &lt;code&gt;--no-empty&lt;/code&gt; 、空の結果は考慮から除外されている（例えば &lt;code&gt;hello\n\nworld&lt;/code&gt; 二つの文字列ではなく3に拡大します）。終了ステータス：少なくとも1つの分割が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="eb23e8e3b2836edf4562f76805e4e7dee2577723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string sub&lt;/code&gt; prints a substring of each string argument. The start of the substring can be specified with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--start&lt;/code&gt; followed by a 1-based index value. Positive index values are relative to the start of the string and negative index values are relative to the end of the string. The default start value is 1. The length of the substring can be specified with &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--length&lt;/code&gt;. If the length is not specified, the substring continues to the end of each STRING. Exit status: 0 if at least one substring operation was performed, 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string sub&lt;/code&gt; は、各文字列引数の部分文字列を出力します。サブストリングの開始は、 &lt;code&gt;-s&lt;/code&gt; または &lt;code&gt;--start&lt;/code&gt; の後に1から始まるインデックス値を指定して指定できます。正のインデックス値は文字列の先頭を基準とし、負のインデックス値は文字列の末尾を基準とします。デフォルトの開始値は1です。部分文字列の長さは &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--length&lt;/code&gt; で指定できます。長さが指定されていない場合、サブストリングは各STRINGの終わりまで続きます。終了ステータス：少なくとも1つの部分文字列操作が実行された場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="2334b2142123bfb3db8760998428b33ddb48c83c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string trim&lt;/code&gt; removes leading and trailing whitespace from each STRING. If &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--left&lt;/code&gt; is given, only leading whitespace is removed. If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, only trailing whitespace is trimmed. The &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--chars&lt;/code&gt; switch causes the characters in CHARS to be removed instead of whitespace. Exit status: 0 if at least one character was trimmed, or 1 otherwise.</source>
          <target state="translated">&lt;code&gt;string trim&lt;/code&gt; は、各STRINGから先頭と末尾の空白を削除します。場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--left&lt;/code&gt; が与えられている、唯一の主要な空白は削除されます。場合は &lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--right&lt;/code&gt; が与えられている、唯一の末尾の空白はトリムされています。 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--chars&lt;/code&gt; スイッチの文字で文字が代わりに空白を除去させます。終了ステータス：少なくとも1つの文字がトリミングされた場合は0、それ以外の場合は1。</target>
        </trans-unit>
        <trans-unit id="4af7b90b6c15aa5377e3c5f869a9e47d5e7c1034" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string unescape&lt;/code&gt; performs the inverse of the &lt;code&gt;string escape&lt;/code&gt; command. If the string to be unescaped is not properly formatted it is ignored. For example, doing &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; will return the original string. There is no support for unescaping &lt;code&gt;--style=regex&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string unescape&lt;/code&gt; は、 &lt;code&gt;string escape&lt;/code&gt; コマンドの逆を実行します。エスケープ解除する文字列が適切にフォーマットされていない場合は無視されます。たとえば、 &lt;code&gt;string unescape --style=var (string escape --style=var $str)&lt;/code&gt; すると、元の文字列が返されます。 &lt;code&gt;--style=regex&lt;/code&gt; のエスケープ解除はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="ec537040dfbcd46a1d8e30c2f47ec1a7a8765e12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string upper&lt;/code&gt; converts each string argument to uppercase. Exit status: 0 if at least one string was converted to uppercase, else 1. This means that in conjunction with the &lt;code&gt;-q&lt;/code&gt; flag you can readily test whether a string is already uppercase.</source>
          <target state="translated">&lt;code&gt;string upper&lt;/code&gt; は、各文字列引数を大文字に変換します。終了ステータス：少なくとも1つの文字列が大文字に変換された場合は0、それ以外の場合は1。これは、 &lt;code&gt;-q&lt;/code&gt; フラグと組み合わせて、文字列がすでに大文字かどうかを簡単にテストできることを意味します。</target>
        </trans-unit>
        <trans-unit id="661aff77ace918c530880cc3272bdbd7f29220e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; performs operations on strings.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; は、文字列に対して操作を実行します。</target>
        </trans-unit>
        <trans-unit id="2a88199c092063e7efbe0b5f39b511b67eb20c78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suppress-autosuggestion&lt;/code&gt;, remove the current autosuggestion</source>
          <target state="translated">&lt;code&gt;suppress-autosuggestion&lt;/code&gt; 、現在の自動提案を削除します</target>
        </trans-unit>
        <trans-unit id="83fb6c3713a11a13683e8334160327a537f8074f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;suspend&lt;/code&gt; suspends execution of the current shell by sending it a SIGTSTP signal, returning to the controlling process. It can be resumed later by sending it a SIGCONT. In order to prevent suspending a shell that doesn't have a controlling process, it will not suspend the shell if it is a login shell. This requirement is bypassed if the &lt;code&gt;--force&lt;/code&gt; option is given or the shell is not interactive.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; は、SIGTSTPシグナルを送信して現在のシェルの実行を一時停止し、制御プロセスに戻ります。SIGCONTを送信すると、後で再開できます。制御プロセスを持たないシェルの中断を防ぐために、ログインシェルの場合、シェルは中断されません。 &lt;code&gt;--force&lt;/code&gt; オプションが指定されている場合、またはシェルがインタラクティブでない場合、この要件は無視されます。</target>
        </trans-unit>
        <trans-unit id="626f00d07a2e5e46b2688607ebff9eb8a60c9966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;swap-selection-start-stop&lt;/code&gt;, go to the other end of the highlighted text without changing the selection</source>
          <target state="translated">&lt;code&gt;swap-selection-start-stop&lt;/code&gt; 、選択を変更せずに強調表示されたテキストの反対側に移動</target>
        </trans-unit>
        <trans-unit id="9156298ff90a429e917bf58c7cc5f06073a40cd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; executes one of several blocks of commands, depending on whether a specified value matches one of several values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; は、指定された値がいくつかの値の1つと一致するかどうかに応じて、コマンドのいくつかのブロックの1つを実行します。 &lt;code&gt;case&lt;/code&gt; は、実行するブロックを決定するために、 &lt;code&gt;switch&lt;/code&gt; ステートメントと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="51522e2a7f62a39e69b057a1b4e46231f1a7ac4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;switch&lt;/code&gt; performs one of several blocks of commands, depending on whether a specified value equals one of several wildcarded values. &lt;code&gt;case&lt;/code&gt; is used together with the &lt;code&gt;switch&lt;/code&gt; statement in order to determine which block should be executed.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; は、指定された値がいくつかのワイルドカード値の1つと等しいかどうかに応じて、コマンドのいくつかのブロックの1つを実行します。 &lt;code&gt;case&lt;/code&gt; は、実行するブロックを決定するために、 &lt;code&gt;switch&lt;/code&gt; ステートメントと一緒に使用されます。</target>
        </trans-unit>
        <trans-unit id="83e86983927861a95c2a328128c72990861f2579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test-feature FEATURE&lt;/code&gt; returns 0 when FEATURE is enabled, 1 if it is disabled, and 2 if it is not recognized.</source>
          <target state="translated">&lt;code&gt;test-feature FEATURE&lt;/code&gt; は、FEATUREが有効な場合は0、無効な場合は1、認識されない場合は2を返します。</target>
        </trans-unit>
        <trans-unit id="49dea13a8691319ba78e4d5ed5960d93da35d7d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; は、&lt;a href=&quot;http://www.unix.com/man-page/POSIX/1/test/&quot;&gt;IEEE Std 1003.1-2008（POSIX.1）標準の&lt;/a&gt;サブセットを実装します。次の例外が適用されます。</target>
        </trans-unit>
        <trans-unit id="2b8c506bfcfd28dcdc9217de6bf1cde91ed842ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;test&lt;/code&gt; implements a subset of the &lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008 (POSIX.1) standard&lt;/a&gt;. The following exceptions apply:</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; は、&lt;a href=&quot;https://www.unix.com/man-page/posix/1p/test/&quot;&gt;IEEE Std 1003.1-2008（POSIX.1）標準の&lt;/a&gt;サブセットを実装します。次の例外が適用されます。</target>
        </trans-unit>
        <trans-unit id="4a920b6047086d1231c7f5d7fa31e31bfaec3736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; causes fish to measure how long a command takes and print the results afterwards. The command can be a simple fish command or a block. The results can not currently be redirected.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; により、魚はコマンドにかかる時間を測定し、その後結果を出力します。コマンドは、単純な魚のコマンドまたはブロックにすることができます。現在、結果をリダイレクトすることはできません。</target>
        </trans-unit>
        <trans-unit id="1560f147987dc48333613d49b888555f9bd4b99c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-chars&lt;/code&gt;, transpose two characters to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-chars&lt;/code&gt; 、カーソルの左側の2文字を転置</target>
        </trans-unit>
        <trans-unit id="92b2de28003baeca135430a69cac3301df211dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transpose-words&lt;/code&gt;, transpose two words to the left of the cursor</source>
          <target state="translated">&lt;code&gt;transpose-words&lt;/code&gt; 、カーソルの左側の2つの単語を転置</target>
        </trans-unit>
        <trans-unit id="373dbc4e9fdbf8eb3bea04bfb57dda742ec7cfea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;../index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; は、魚のイベント配信フレームワークのラッパーです。これは、POSIXシェルとの下位互換性のために存在します。その他の用途では、&lt;a href=&quot;../index#event&quot;&gt;イベントハンドラー&lt;/a&gt;を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f5ca8c4e095ac239e34f8594ebb4ab87d097fe66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trap&lt;/code&gt; is a wrapper around the fish event delivery framework. It exists for backwards compatibility with POSIX shells. For other uses, it is recommended to define an &lt;a href=&quot;index#event&quot;&gt;event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;trap&lt;/code&gt; は、魚イベント配信フレームワークのラッパーです。POSIXシェルとの下位互換性のために存在しています。その他の用途では、&lt;a href=&quot;index#event&quot;&gt;イベントハンドラー&lt;/a&gt;を定義することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0744337fd5341ea7b8967ff13d484eb039621a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; sets the exit status to 0.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; は、終了ステータスを0に設定します。</target>
        </trans-unit>
        <trans-unit id="2d6b937046bc04378a6f19f7580563228ae32462" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit -Hs 64&lt;/code&gt; sets the hard stack size limit to 64 kB.</source>
          <target state="translated">&lt;code&gt;ulimit -Hs 64&lt;/code&gt; は、ハードスタックサイズの制限を64 kBに設定します。</target>
        </trans-unit>
        <trans-unit id="09823b46aa54108856d9cfe97a6e2d6654edeb51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; also accepts the following switches that determine what type of limit to set:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; は、設定する制限のタイプを決定する以下のスイッチも受け入れます。</target>
        </trans-unit>
        <trans-unit id="27494793012a34dbc727255f14091cec8673cfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ulimit&lt;/code&gt; builtin sets or outputs the resource usage limits of the shell and any processes spawned by it. If a new limit value is omitted, the current value of the limit of the resource is printed; otherwise, the specified limit is set to the new value.</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; ビルトインは、シェルとそれによって生成されたプロセスのリソース使用制限を設定または出力します。新しい制限値を省略すると、リソースの現在の制限値が出力されます。それ以外の場合、指定された制限は新しい値に設定されます。</target>
        </trans-unit>
        <trans-unit id="914a332a706ed930f92dfa2f893c31d61f8829c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask 177&lt;/code&gt; or &lt;code&gt;umask u=rw&lt;/code&gt; sets the file creation mask to read and write for the owner and no permissions at all for any other users.</source>
          <target state="translated">&lt;code&gt;umask 177&lt;/code&gt; または &lt;code&gt;umask u=rw&lt;/code&gt; は、ファイル作成マスクを所有者に対して読み取りおよび書き込みに設定し、他のユーザーにはまったくアクセス権を設定しません。</target>
        </trans-unit>
        <trans-unit id="ea8bdfdd73550087a9e5f4d0d74f501ad65d8378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt; displays and manipulates the &quot;umask&quot;, or file creation mode mask, which is used to restrict the default access to files.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; は、「umask」、つまりファイルへのデフォルトのアクセスを制限するために使用されるファイル作成モードマスクを表示および操作します。</target>
        </trans-unit>
        <trans-unit id="d5b91d0960d8706ccf917682f946da0ed42fef50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt; function. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 、現在のファイル作成マスク。umask変数を変更するための推奨される方法は、&lt;a href=&quot;cmds/umask#cmd-umask&quot;&gt;umask&lt;/a&gt;関数を使用することです。umaskを無効な値に設定しようとすると、常に失敗します。</target>
        </trans-unit>
        <trans-unit id="7b47f786d139724d5a34193ba1786452223e8ac7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;umask&lt;/code&gt;, the current file creation mask. The preferred way to change the umask variable is through the &lt;a href=&quot;commands#umask&quot;&gt;umask function&lt;/a&gt;. An attempt to set umask to an invalid value will always fail.</source>
          <target state="translated">&lt;code&gt;umask&lt;/code&gt; 現在のファイル作成マスクであるumask。umask変数を変更する好ましい方法は、&lt;a href=&quot;commands#umask&quot;&gt;umask関数を使用すること&lt;/a&gt;です。umaskを無効な値に設定しようとすると、常に失敗します。</target>
        </trans-unit>
        <trans-unit id="e11ddb9d62a747071c14ddc0257484f36e4d0db7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up-line&lt;/code&gt;, move up one line</source>
          <target state="translated">&lt;code&gt;up-line&lt;/code&gt; 、1行上に移動</target>
        </trans-unit>
        <trans-unit id="67c1b87ec154fe2bec25c34f88af59a7fa3c8771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;upcase-word&lt;/code&gt;, make the current word uppercase</source>
          <target state="translated">&lt;code&gt;upcase-word&lt;/code&gt; 、現在の単語を大文字にする</target>
        </trans-unit>
        <trans-unit id="57ccf04032406001bdc11a8189ad69fca2fb8bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH array</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; は、PATH配列の3番目の要素を編集します</target>
        </trans-unit>
        <trans-unit id="65486428e36108a03da6e3498a15ce370423fc29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared PATH[3]&lt;/code&gt; edits the third element of the PATH list</source>
          <target state="translated">&lt;code&gt;vared PATH[3]&lt;/code&gt; は、PATHリストの3番目の要素を編集します</target>
        </trans-unit>
        <trans-unit id="88c39c66df63979d68b40cdf38c535e8336f488a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual array elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; は、環境変数の値をインタラクティブに編集するために使用されます。配列変数は全体として &lt;code&gt;vared&lt;/code&gt; を使用して編集できませんが、個々の配列要素は編集できます。</target>
        </trans-unit>
        <trans-unit id="a2ed2d545022b6b47095d8582bee9cbd898c7fb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vared&lt;/code&gt; is used to interactively edit the value of an environment variable. Array variables as a whole can not be edited using &lt;code&gt;vared&lt;/code&gt;, but individual list elements can.</source>
          <target state="translated">&lt;code&gt;vared&lt;/code&gt; は、環境変数の値をインタラクティブに編集するために使用されます。配列変数全体は &lt;code&gt;vared&lt;/code&gt; を使用して編集できませんが、個々のリスト要素は編集できます。</target>
        </trans-unit>
        <trans-unit id="9862f5e93904059a6b32007b38450efce85a2073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;, the version of the currently running fish (also available as &lt;code&gt;FISH_VERSION&lt;/code&gt; for backward compatibility).</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; 、現在実行中の魚のバージョン（下位互換性のために &lt;code&gt;FISH_VERSION&lt;/code&gt; としても利用可能）。</target>
        </trans-unit>
        <trans-unit id="63fa20183bc82ef05dd53eaea0bdba2083b42311" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wait&lt;/code&gt; waits for child jobs to complete.</source>
          <target state="translated">&lt;code&gt;wait&lt;/code&gt; 子ジョブが完了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="813fdc779468e7aa9ef0139c7dc0dcbe8dce7527" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; repeatedly executes &lt;code&gt;CONDITION&lt;/code&gt;, and if the exit status is 0, then executes &lt;code&gt;COMMANDS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; は &lt;code&gt;CONDITION&lt;/code&gt; を繰り返し実行し、終了ステータスが0の場合は &lt;code&gt;COMMANDS&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="3777774e876be438277e734434a6c0c8157ad52c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x-&lt;/code&gt; is not valid since there is no long flag name and therefore the short flag, &lt;code&gt;-x&lt;/code&gt;, has to be usable.</source>
          <target state="translated">&lt;code&gt;x-&lt;/code&gt; 長いフラグ名がないため、x-は無効です。したがって、短いフラグ &lt;code&gt;-x&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5fd5ec35b0142154e7c9e8643d553640b56bf3b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean can can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;-x&lt;/code&gt; のみが有効であることを意味します。ブール値で、複数回使用できます。表示されている場合、 &lt;code&gt;_flag_x&lt;/code&gt; は、フラグが表示された回数のカウントに設定されます。</target>
        </trans-unit>
        <trans-unit id="3ee9d686d28ba49895201840c47e53da39de4e40" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; means that only &lt;code&gt;-x&lt;/code&gt; is valid. It is a boolean that can be used more than once. If it is seen then &lt;code&gt;_flag_x&lt;/code&gt; will be set to the count of how many times the flag was seen.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は、 &lt;code&gt;-x&lt;/code&gt; のみが有効であることを意味します。複数回使用できるブール値です。表示された場合、 &lt;code&gt;_flag_x&lt;/code&gt; はフラグが表示された回数のカウントに設定されます。</target>
        </trans-unit>
        <trans-unit id="21ede97712b0a6930815ab06e47ca99f9faf164c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x=&lt;/code&gt;, &lt;code&gt;x=?&lt;/code&gt;, and &lt;code&gt;x=+&lt;/code&gt; are similar to the n/name examples above but there is no long flag alternative to the short flag &lt;code&gt;-x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x=&lt;/code&gt; 、 &lt;code&gt;x=?&lt;/code&gt; 、および &lt;code&gt;x=+&lt;/code&gt; は上記のn / nameの例に似ていますが、短いフラグ &lt;code&gt;-x&lt;/code&gt; の代わりに長いフラグはありません。</target>
        </trans-unit>
        <trans-unit id="f0527623453636ac5982213b0815cf8b199abd43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank-pop&lt;/code&gt;, rotate to the previous entry of the killring</source>
          <target state="translated">&lt;code&gt;yank-pop&lt;/code&gt; 、killringの前のエントリに回転</target>
        </trans-unit>
        <trans-unit id="6b2c2003ee77d278bc6a300e349540b9f1fcec50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;yank&lt;/code&gt;, insert the latest entry of the killring into the buffer</source>
          <target state="translated">&lt;code&gt;yank&lt;/code&gt; 、killringの最新のエントリをバッファに挿入します</target>
        </trans-unit>
        <trans-unit id="d38e08cea2004c22d96c7648bde8064ec9710a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,m}&lt;/code&gt; at least n, no more than m.</source>
          <target state="translated">&lt;code&gt;{n,m}&lt;/code&gt; 少なくともn、m以下。</target>
        </trans-unit>
        <trans-unit id="6754034e24ab614bfd421eac3a73529e0acbdf6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n,}&lt;/code&gt; n or more</source>
          <target state="translated">&lt;code&gt;{n,}&lt;/code&gt; n以上</target>
        </trans-unit>
        <trans-unit id="a365c3492a087f6ec4c03c8376dcb30c6386fb2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{n}&lt;/code&gt; to exactly n (where n is a number)</source>
          <target state="translated">&lt;code&gt;{n}&lt;/code&gt; から正確にn（nは数値）</target>
        </trans-unit>
        <trans-unit id="707c3563364628d29b1994c70cf28e906025d3d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;|&lt;/code&gt; is &quot;alternation&quot;, i.e. the &quot;or&quot;.</source>
          <target state="translated">&lt;code&gt;|&lt;/code&gt; 「オルタネーション」、つまり「または」です。</target>
        </trans-unit>
        <trans-unit id="df0f52ee032449bf7212b4c3984d956c6fa44267" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;code&gt;SOME_VAR=1 command&lt;/code&gt; produces an error: &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;SOME_VAR=1 command&lt;/code&gt; はエラーを生成します： &lt;code&gt;Unknown command &quot;SOME_VAR=1&quot;&lt;/code&gt; 。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0da3c08b202353af950bee5219ca327f11f72cd7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;larr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; move the cursor one word left or right, or moves forward/backward in the directory history if the command line is empty. If the cursor is already at the end of the line, and an autosuggestion is available, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;) accepts the first word in the suggestion.</source>
          <target state="translated">&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;larr;&lt;/b&gt;と&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;コマンドラインが空である場合は、1つの単語は、ディレクトリ履歴に左または右、または前進/後方にカーソルを移動します。カーソルが行の終わりに既にあり、自己暗示は、利用可能である場合&lt;em&gt;アルト&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;（又は&lt;em&gt;アルト&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt;）提案の最初の単語を受け付けます。</target>
        </trans-unit>
        <trans-unit id="41668896a709e48d38407c24cdaae2f37bd2e2d0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt; search the command history for the previous/next token containing the token under the cursor before the search was started. If the commandline was not on a token when the search started, all tokens match. See the &lt;a href=&quot;#history&quot;&gt;history&lt;/a&gt; section for more information on history searching.</source>
          <target state="translated">&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;と&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt;検索が開始される前に、前/カーソルの下にトークンを含む次のトークンのためのコマンド履歴を検索します。検索の開始時にコマンドラインがトークン上になかった場合、すべてのトークンが一致します。履歴検索の詳細については、&lt;a href=&quot;#history&quot;&gt;履歴&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd002a4a5d9f181df1139416f359b0c0b1982d4c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; recalls individual arguments, starting from the last argument in the last line executed. A single press replaces &quot;!$&quot;, later presses replace &quot;!!:4&quot; and the like.</source>
          <target state="translated">&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;最後に実行された行の最後の引数から始めて、個々の引数を思い出します。1回のプレスで「！$」が置き換えられ、その後のプレスで「!!：4」が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="31b5b5642ff4d16559c25c2eec15dc84d9c7c38a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;c&lt;/b&gt; capitalizes the current word.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;c&lt;/b&gt;は現在の単語を大文字にします。</target>
        </trans-unit>
        <trans-unit id="8c08d7cecc389da8fd667cb3de1b66142f66dbc0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;d&lt;/b&gt; moves the next word to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;d&lt;/b&gt;は次の単語を&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="ba939795dc763dc37424d264df584c3dc1414201" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt; edit the current command line in an external editor. The editor is chosen from the first available of the &lt;code&gt;$VISUAL&lt;/code&gt; or &lt;code&gt;$EDITOR&lt;/code&gt; variables.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;e&lt;/b&gt;外部エディターで現在のコマンドラインを編集します。エディターは、 &lt;code&gt;$VISUAL&lt;/code&gt; または &lt;code&gt;$EDITOR&lt;/code&gt; 変数の最初に使用可能な変数から選択されます。</target>
        </trans-unit>
        <trans-unit id="8d19663ab96f42c66ebcd8b4711cc5775c0115de" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;h&lt;/b&gt; (or &lt;b&gt;F1&lt;/b&gt;) shows the manual page for the current command, if one exists.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;h&lt;/b&gt;（または&lt;b&gt;F1&lt;/b&gt;）は、現在のコマンド（存在する場合）のマニュアルページを表示します。</target>
        </trans-unit>
        <trans-unit id="6fe0d9f367a7b1fb62d59310e866cb7000917983" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;l&lt;/b&gt; lists the contents of the current directory, unless the cursor is over a directory argument, in which case the contents of that directory will be listed.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;l&lt;/b&gt;は、カーソルがディレクトリ引数の上にある場合を除き、現在のディレクトリの内容を一覧表示します。その場合、そのディレクトリの内容が一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="ac4ab1e3b2a18333f6469ab62c6774ab20358dd6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;p&lt;/b&gt; adds the string '&lt;code&gt;| less;&lt;/code&gt;' to the end of the job under the cursor. The result is that the output of the command will be paged.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;p&lt;/b&gt;は文字列 ' &lt;code&gt;| less;&lt;/code&gt; 追加します もっと少なく; 'カーソルの下のジョブの最後まで。その結果、コマンドの出力がページングされます。</target>
        </trans-unit>
        <trans-unit id="136abcdd3926f6f6917e785f3c9b3de852a583e3" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two words</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt;は最後の2つの単語を転置します</target>
        </trans-unit>
        <trans-unit id="6b4f3c9f30c412c35376eb5c0b053bbecc930222" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;u&lt;/b&gt; makes the current word uppercase.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;u&lt;/b&gt;は現在の単語を大文字にします。</target>
        </trans-unit>
        <trans-unit id="f055c4fc1257b63bfc385501bfbaf929ca352490" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;v&lt;/b&gt; Same as &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;e&lt;/b&gt;.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;v &lt;/b&gt;&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;eと&lt;/b&gt;同じ。</target>
        </trans-unit>
        <trans-unit id="5781eac00f106e823a16702f30c3a1c598e21b65" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; prints a short description of the command under the cursor.</source>
          <target state="translated">&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;は、カーソルの下にコマンドの短い説明を出力します。</target>
        </trans-unit>
        <trans-unit id="17e2f8a79bdc960577f4eeaedc12d0c21a945731" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; cancels the entire line.</source>
          <target state="translated">&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Cは、&lt;/b&gt;行全体をキャンセルします。</target>
        </trans-unit>
        <trans-unit id="9333a2ffd2f21f466d57fc6d1e5b4d1a978b95a0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; delete one character to the right of the cursor. If the command line is empty, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; will exit fish.</source>
          <target state="translated">&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Dは、&lt;/b&gt;カーソルの右にある1つの文字を削除します。コマンドラインが空の場合、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;は魚を終了します。</target>
        </trans-unit>
        <trans-unit id="bb14070b99b4a045f1889b39bfeae27b8794ec9e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;K&lt;/b&gt; moves contents from the cursor to the end of line to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;K&lt;/b&gt;は、コンテンツをカーソルから行末まで&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="04ddb78416f34126599d6fdf7033f85b757d8ea0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;L&lt;/b&gt; clears and repaints the screen.</source>
          <target state="translated">&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Lの&lt;/b&gt;クリアと再描画画面。</target>
        </trans-unit>
        <trans-unit id="eec641fe659922171462b212fb4e12bfac800762" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;U&lt;/b&gt; moves contents from the beginning of line to the cursor to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;U&lt;/b&gt;は、コンテンツを行の先頭からカーソル、&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="959eb883117dacfd136a241f1bf9b0d08b63da44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;W&lt;/b&gt; moves the previous path component (everything up to the previous &quot;/&quot;) to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;W&lt;/b&gt;は、前のパスコンポーネント（前の「/」までのすべて）を&lt;a href=&quot;#killring&quot;&gt;killringに移動し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4437b353083b50d06c142c5629d09aa0198b91c6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; copies the current buffer to the system's clipboard, &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; inserts the clipboard contents.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;は現在のバッファーをシステムのクリップボードにコピーし、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt;はクリップボードの内容を挿入します。</target>
        </trans-unit>
        <trans-unit id="5aed52702667fe63b8fc8764b7596443d6fa67f8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;t&lt;/b&gt; transposes the last two characters</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;t&lt;/b&gt;は最後の2文字を転置します</target>
        </trans-unit>
        <trans-unit id="2a3529141c90e88bccb3cffb04eaf5e452963437" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;A&lt;/b&gt; enters &lt;a href=&quot;#vi-mode-insert&quot;&gt;insert mode&lt;/a&gt; at the end of the line.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;A&lt;/b&gt;は行末で&lt;a href=&quot;#vi-mode-insert&quot;&gt;挿入モード&lt;/a&gt;に入ります。</target>
        </trans-unit>
        <trans-unit id="848bb77d0284135b4b11d0def92f1a7b33558c29" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Shift&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; deletes text after the current cursor position and moves it to the &lt;a href=&quot;#killring&quot;&gt;killring&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;Shift&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;は、現在のカーソル位置の後ろのテキストを削除し、&lt;a href=&quot;#killring&quot;&gt;killringに&lt;/a&gt;移動します。</target>
        </trans-unit>
        <trans-unit id="0aa350769e38ad587d4204af5750f62efcffd698" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;black&lt;/em&gt;, &lt;em&gt;red&lt;/em&gt;, &lt;em&gt;green&lt;/em&gt;, &lt;em&gt;yellow&lt;/em&gt;, &lt;em&gt;blue&lt;/em&gt;, &lt;em&gt;magenta&lt;/em&gt;, &lt;em&gt;cyan&lt;/em&gt;, &lt;em&gt;white&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;黒&lt;/em&gt;、&lt;em&gt;赤&lt;/em&gt;、&lt;em&gt;緑&lt;/em&gt;、&lt;em&gt;黄&lt;/em&gt;、&lt;em&gt;青&lt;/em&gt;、&lt;em&gt;マゼンタ&lt;/em&gt;、&lt;em&gt;シアン&lt;/em&gt;、&lt;em&gt;白&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f06a4164895f4acf75e4fc05849a9f1080eb613" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;brblack&lt;/em&gt;, &lt;em&gt;brred&lt;/em&gt;, &lt;em&gt;brgreen&lt;/em&gt;, &lt;em&gt;bryellow&lt;/em&gt;, &lt;em&gt;brblue&lt;/em&gt;, &lt;em&gt;brmagenta&lt;/em&gt;, &lt;em&gt;brcyan&lt;/em&gt;, &lt;em&gt;brwhite&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;brblack&lt;/em&gt;、&lt;em&gt;brred&lt;/em&gt;、&lt;em&gt;brgreen&lt;/em&gt;、&lt;em&gt;bryellow&lt;/em&gt;、&lt;em&gt;brblue&lt;/em&gt;、&lt;em&gt;brmagenta&lt;/em&gt;、&lt;em&gt;brcyan&lt;/em&gt;、&lt;em&gt;brwhite&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5aaf073a1b8f279587c77fcd145e5e12a28d0f7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Easy scripting&lt;/strong&gt;: new &lt;a href=&quot;#functions&quot;&gt;functions&lt;/a&gt; can be added on the fly. The syntax is easy to learn and use.</source>
          <target state="translated">&lt;strong&gt;簡単なスクリプト&lt;/strong&gt;：新しい&lt;a href=&quot;#functions&quot;&gt;関数&lt;/a&gt;をその場で追加できます。構文は習得と使用が簡単です。</target>
        </trans-unit>
        <trans-unit id="4df60123802c7d8d13f9b6713ff515d5434a37f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensive UI&lt;/strong&gt;: &lt;a href=&quot;#syntax-highlighting&quot;&gt;syntax highlighting&lt;/a&gt;, &lt;a href=&quot;#autosuggestions&quot;&gt;autosuggestions&lt;/a&gt;, &lt;a href=&quot;#tab-completion&quot;&gt;tab completion&lt;/a&gt; and selection lists that can be navigated and filtered.</source>
          <target state="translated">&lt;strong&gt;広範なUI&lt;/strong&gt;：&lt;a href=&quot;#syntax-highlighting&quot;&gt;構文の強調表示&lt;/a&gt;、&lt;a href=&quot;#autosuggestions&quot;&gt;自動暗示&lt;/a&gt;、&lt;a href=&quot;#tab-completion&quot;&gt;タブ補完&lt;/a&gt;、およびナビゲートおよびフィルタリングできる選択リスト。</target>
        </trans-unit>
        <trans-unit id="a4735f2bc1b1f6cc44fc36a9270fa8d0bebad687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No configuration needed&lt;/strong&gt;: fish is designed to be ready to use immediately, without requiring extensive configuration.</source>
          <target state="translated">&lt;strong&gt;構成は必要ありません&lt;/strong&gt;：魚は、大規模な構成を必要とせずに、すぐに使用できるように設計されています。</target>
        </trans-unit>
        <trans-unit id="c1761f0b1ba5b43d7b93024d944cddd83977bbd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;argument&lt;/strong&gt; a parameter given to a command</source>
          <target state="translated">&lt;strong&gt;引数&lt;/strong&gt;コマンドに与えられたパラメータ</target>
        </trans-unit>
        <trans-unit id="f9abc342512c31331a993f0014b546a67fa5db37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;builtin&lt;/strong&gt; a command that is implemented in the shell. Builtins are commands that are so closely tied to the shell that it is impossible to implement them as external commands.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シェルに実装されているコマンドが&lt;strong&gt;組み込ま&lt;/strong&gt;れています。ビルトインはシェルと密接に関連しているため、外部コマンドとして実装することはできません。</target>
        </trans-unit>
        <trans-unit id="f166fa76e55d41c05140d9c66e33482752388e40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt; a program that the shell can run. In another sense also specifically an external command (i.e. neither a function or builtin).</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;シェルが実行できるプログラムを&lt;strong&gt;コマンド&lt;/strong&gt;します。別の意味では、具体的には外部コマンド（つまり、関数でも組み込みコマンドでもない）です。</target>
        </trans-unit>
        <trans-unit id="b757809536a26ee5fe7cf05aa97874be3e9ec7f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function&lt;/strong&gt; a block of commands that can be called as if they were a single command. By using functions, it is possible to string together multiple smaller commands into one more advanced command.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;単一のコマンドであるかのように呼び出すことができるコマンドのブロックを&lt;strong&gt;機能さ&lt;/strong&gt;せます。関数を使用することにより、複数の小さなコマンドを1つのより高度なコマンドにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="60a92d1d7691db21d94fa52b5efe10f9c00a98a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;job&lt;/strong&gt; a running pipeline or command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;実行中のパイプラインまたはコマンドを&lt;strong&gt;ジョブ&lt;/strong&gt;します</target>
        </trans-unit>
        <trans-unit id="33e34e3f380b965910f59129f13ec1cc926b1a27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pipeline&lt;/strong&gt; a set of commands stringed together so that the output of one command is the input of the next command</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;1つのコマンドの出力が次のコマンドの入力になるように、一連のコマンドを&lt;strong&gt;パイプライン処理&lt;/strong&gt;します。</target>
        </trans-unit>
        <trans-unit id="44d28d2c07c14f9f63ac8b103318575395a8d8f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;redirection&lt;/strong&gt; an operation that changes one of the input/output streams associated with a job</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;ジョブに関連付けられた入力/出力ストリームの1つを変更する操作の&lt;strong&gt;リダイレクト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4e94007d359708c28c1c1effb3bd68983f4f0862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch&lt;/strong&gt; a special flag sent as an argument to a command that will alter the behavior of the command. A switch almost always begins with one or two hyphens.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コマンドの動作を変更するコマンドへの引数として送信される特別なフラグを&lt;strong&gt;切り替え&lt;/strong&gt;ます。ほとんどの場合、スイッチは1つまたは2つのハイフンで始まります。</target>
        </trans-unit>
        <trans-unit id="58ef9d5fc414a372d364bba5d463086a74cd1e79" translate="yes" xml:space="preserve">
          <source>=&amp;gt; /private/</source>
          <target state="translated">=&amp;gt; / private /</target>
        </trans-unit>
        <trans-unit id="fba3fd4e3fd6608dd7f90bc1b5ab21add9a24490" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;/&lt;/code&gt; if the short flag can be used by someone invoking your command else &lt;code&gt;-&lt;/code&gt; if it should not be exposed as a valid short flag. If there is no long flag name these characters should be omitted. You can also specify a '#' to indicate the short and long flag names can be used and the value can be specified as an implicit int; i.e., a flag of the form &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;/&lt;/code&gt; ショートフラグは、他の誰かがあなたのコマンドを呼び出すことにより、使用できる場合 &lt;code&gt;-&lt;/code&gt; それは有効な短いフラグとして公開すべきではない場合。長いフラグ名がない場合、これらの文字は省略してください。また、「＃」を指定して、短いフラグ名と長いフラグ名を使用でき、値を暗黙のintとして指定できます。つまり、 &lt;code&gt;-NNN&lt;/code&gt; 形式のフラグ。</target>
        </trans-unit>
        <trans-unit id="7198b525f0714279660d3b850cc70c2393d6d32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;fish&lt;/code&gt; function is a list of commands, which may optionally take arguments. Unlike other shells, arguments are not passed in &quot;numbered variables&quot; like &lt;code&gt;$1&lt;/code&gt;, but instead in a single list &lt;code&gt;$argv&lt;/code&gt;. To create a function, use the &lt;code&gt;function&lt;/code&gt; builtin:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; 機能は、オプションの引数をとることができ、コマンドのリストです。他のシェルとは異なり、引数は &lt;code&gt;$1&lt;/code&gt; ような「番号付き変数」ではなく、単一のリスト &lt;code&gt;$argv&lt;/code&gt; 渡されます。関数を作成するには、組み込み関数を使用し &lt;code&gt;function&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19bcfbaa8447e6df7d2da91db70a782c0bf63572" translate="yes" xml:space="preserve">
          <source>A background job is executed simultaneously with fish, and does not have access to the keyboard. If no job is specified, the last job to be used is put in the background. If PID is specified, the jobs with the specified process group IDs are put in the background.</source>
          <target state="translated">バックグラウンドジョブは、FISHと同時に実行され、キーボードにはアクセスできません。ジョブが指定されていない場合は、最後に使用されるジョブがバックグラウンドに置かれます。PIDが指定された場合は、指定されたプロセスグループIDのジョブがバックグラウンドに置かれます。</target>
        </trans-unit>
        <trans-unit id="b46aed84b0ed848ddd07f44ad7751712530b525e" translate="yes" xml:space="preserve">
          <source>A bind mode name (e.g., &lt;code&gt;bind -m abc ...&lt;/code&gt;) is restricted to the rules for valid variable names.</source>
          <target state="translated">バインドモード名（例： &lt;code&gt;bind -m abc ...&lt;/code&gt; ）は、有効な変数名のルールに制限されています。</target>
        </trans-unit>
        <trans-unit id="9b580f7fbca87c3708e0299e0e01e7d18f311f8d" translate="yes" xml:space="preserve">
          <source>A block allows the introduction of a new variable scope, redirection of the input or output of a set of commands as a group, or to specify precedence when using the conditional commands like &lt;code&gt;and&lt;/code&gt;.</source>
          <target state="translated">ブロックは、新しい変数のスコープを導入し、グループとしてのコマンドのセットの入力または出力のリダイレクトなどの条件付きコマンドを使用する場合の優先順位を指定することができる &lt;code&gt;and&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="221743bb3156c75a9da83c1a7dacbf3cffddec98" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter.</source>
          <target state="translated">中括弧で囲まれたカンマ区切りの文字のリストは、リストの各要素が新しいパラメータになるように展開されます。</target>
        </trans-unit>
        <trans-unit id="b1251b9c7f3a0ecfe4cfcd8762e368b829d54d22" translate="yes" xml:space="preserve">
          <source>A comma separated list of characters enclosed in curly braces will be expanded so each element of the list becomes a new parameter. This is useful to save on typing, and to separate a variable name from surrounding text.</source>
          <target state="translated">中括弧で囲まれたカンマ区切りの文字のリストは、リストの各要素が新しいパラメータになるように展開されます。これは、入力の手間を省いたり、変数名を周囲のテキストから分離したりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="18819280931565e1e540c3948c1068287f296514" translate="yes" xml:space="preserve">
          <source>A command is executed by writing the name of the command followed by any arguments.</source>
          <target state="translated">コマンドは、コマンド名の後に任意の引数を記述することで実行されます。</target>
        </trans-unit>
        <trans-unit id="ef0596789e19cf7d157b82b21b7a04276de1271d" translate="yes" xml:space="preserve">
          <source>A command may be invalid because it does not exist, or refers to a file that you cannot execute. When the command becomes valid, it is shown in a different color:</source>
          <target state="translated">コマンドが存在しない、または実行できないファイルを参照しているため、コマンドが無効になっている場合があります。コマンドが有効になると、そのコマンドは別の色で表示されます。</target>
        </trans-unit>
        <trans-unit id="7889a1f8efa9424d9ad0d196f8208854866a152e" translate="yes" xml:space="preserve">
          <source>A common comparison is with $status:</source>
          <target state="translated">よく比較されるのは、$statusとの比較です。</target>
        </trans-unit>
        <trans-unit id="0ab1d9ac994221a7fc24fe83fee3534ae7e7edc9" translate="yes" xml:space="preserve">
          <source>A common idiom is to capture the output of a command in a variable:</source>
          <target state="translated">コマンドの出力を変数に取り込むのが一般的な慣用句です。</target>
        </trans-unit>
        <trans-unit id="e5fc3140c2546b6e6a23e2f80c44a655ee78ea6c" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own completions, usually &lt;code&gt;~/.config/fish/completions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable);</source>
          <target state="translated">エンドユーザーが自分の補完を保持するためのディレクトリ、通常は &lt;code&gt;~/.config/fish/completions&lt;/code&gt; （ &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 環境変数によって制御されます）。</target>
        </trans-unit>
        <trans-unit id="65baeff5e625e88bc63f2d15091644216f3ec2bb" translate="yes" xml:space="preserve">
          <source>A directory for end-users to keep their own functions, usually &lt;code&gt;~/.config/fish/functions&lt;/code&gt; (controlled by the &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; environment variable).</source>
          <target state="translated">エンドユーザーが独自の機能を保持するためのディレクトリ。通常は &lt;code&gt;~/.config/fish/functions&lt;/code&gt; （ &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; 環境変数によって制御されます）。</target>
        </trans-unit>
        <trans-unit id="859d016958d7758044bcb3a91d192638e99bef83" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install completions for all users on the system, usually &lt;code&gt;/etc/fish/completions&lt;/code&gt;;</source>
          <target state="translated">システム管理者がシステム上のすべてのユーザーの補完をインストールするためのディレクトリ（通常は &lt;code&gt;/etc/fish/completions&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="108785695c3e86a9a6e52e8824798deb67cc4081" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt;).</source>
          <target state="translated">システム管理者がシステム上のすべてのユーザーの関数をインストールするためのディレクトリ。通常は &lt;code&gt;/etc/fish/functions&lt;/code&gt; （実際には &lt;code&gt;$__fish_sysconfdir/functions&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="641e45d215c27568a98d7ad513ca06236cc4ce30" translate="yes" xml:space="preserve">
          <source>A directory for systems administrators to install functions for all users on the system, usually &lt;code&gt;/etc/fish/functions&lt;/code&gt;.</source>
          <target state="translated">システム管理者がシステム上のすべてのユーザーに機能をインストールするためのディレクトリ（通常は &lt;code&gt;/etc/fish/functions&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="9f5e2984dcf6e5df1ad339573ada9e5723fb0b37" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own completions for their software, usually &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">サードパーティソフトウェアベンダーがソフトウェアの完成品を出荷するためのディレクトリ（通常は &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="5e8075c8426f4f6e374491e133779cfa809fd782" translate="yes" xml:space="preserve">
          <source>A directory for third-party software vendors to ship their own functions for their software, usually &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">サードパーティソフトウェアベンダーがソフトウェアの独自の機能を出荷するためのディレクトリ。通常は &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a44f52824482af64d09602d2bfcb5e4719f63ad2" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For an introduction to the concept of shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">ドル記号とそれに続く文字列は、同じ名前のシェル変数の値に展開されます。シェル変数の概念の概要については、&lt;a href=&quot;#variables&quot;&gt;シェル変数の&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ca6eed9ce238df03667fd3003cea2a936f38aa05" translate="yes" xml:space="preserve">
          <source>A dollar sign followed by a string of characters is expanded into the value of the shell variable with the same name. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">ドル記号とそれに続く文字列は、同じ名前のシェル変数の値に展開されます。シェル変数の詳細については、「&lt;a href=&quot;#variables&quot;&gt;シェル変数」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a99436ba2e5d329112af2b584fd421fbf3f42c7d" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut-universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">より高速な方法は、 &lt;code&gt;$PATH&lt;/code&gt; 自動的に追加される、 &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut-universal&quot;&gt;ユニバーサル変数&lt;/a&gt;を変更することです。たとえば、 &lt;code&gt;/usr/local/bin&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; に永続的に追加するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="d2d19574b46bfc9315dc6a4268de0f13c74f87d0" translate="yes" xml:space="preserve">
          <source>A faster way is to modify the &lt;code&gt;$fish_user_paths&lt;/code&gt;&lt;a href=&quot;#tut_universal&quot;&gt;universal variable&lt;/a&gt;, which is automatically prepended to &lt;code&gt;$PATH&lt;/code&gt;. For example, to permanently add &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;$PATH&lt;/code&gt;, you could write:</source>
          <target state="translated">より速い方法は、 &lt;code&gt;$PATH&lt;/code&gt; 前に自動的に付加される$ &lt;code&gt;$fish_user_paths&lt;/code&gt; &lt;a href=&quot;#tut_universal&quot;&gt;ユニバーサル変数&lt;/a&gt;を変更することです。たとえば、 &lt;code&gt;/usr/local/bin&lt;/code&gt; を &lt;code&gt;$PATH&lt;/code&gt; に永続的に追加するには、次のように記述します。</target>
        </trans-unit>
        <trans-unit id="ceec61da03fba72e62b6265e8da899ee3527c4d0" translate="yes" xml:space="preserve">
          <source>A filename. The output will be written to the specified file.</source>
          <target state="translated">ファイル名です。指定したファイルに出力が書き込まれます。</target>
        </trans-unit>
        <trans-unit id="3d33de98068774700d9110cea5dcb53a094ba7e7" translate="yes" xml:space="preserve">
          <source>A function is a list of commands that will be executed when the name of the function is given as a command.</source>
          <target state="translated">関数とは、関数名をコマンドとして与えたときに実行されるコマンドのリストのことです。</target>
        </trans-unit>
        <trans-unit id="7601c1858c241e3bd16046e3e56c915853d6505a" translate="yes" xml:space="preserve">
          <source>A function name cannot be empty. It may not begin with a hyphen (&quot;-&quot;) and may not contain a slash (&quot;/&quot;). All other characters, including a space, are valid.</source>
          <target state="translated">関数名を空にすることはできません。ハイフン(&quot;-&quot;)で始まったり、スラッシュ(&quot;/&quot;)を含むことはできません。スペースを含む他のすべての文字が有効です。</target>
        </trans-unit>
        <trans-unit id="f2876072ebbf01c7648d2358047842fa63f47f6c" translate="yes" xml:space="preserve">
          <source>A global variable of the same name already exists.</source>
          <target state="translated">同名のグローバル変数が既に存在します。</target>
        </trans-unit>
        <trans-unit id="8b50d81adfb557d2a38d6b95df25f2d574c4f80c" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither -H nor -S is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">ハードリミットは減少させることしかできません。ソフトリミットはハードリミットの値まで増加させることができます。Hも-Sも指定しない場合、新しいリミット値を割り当てる際にソフトリミットとハードリミットの両方が更新され、現在の値を報告する際にはソフトリミットが使用されます。</target>
        </trans-unit>
        <trans-unit id="b23a7c576473abf4f67fa752f0d58982d9b4994d" translate="yes" xml:space="preserve">
          <source>A hard limit can only be decreased. Once it is set it cannot be increased; a soft limit may be increased up to the value of the hard limit. If neither &lt;code&gt;-H&lt;/code&gt; nor &lt;code&gt;-S&lt;/code&gt; is specified, both the soft and hard limits are updated when assigning a new limit value, and the soft limit is used when reporting the current value.</source>
          <target state="translated">ハード制限は下げることしかできません。一度設定すると、増やすことはできません。ソフト制限は、ハード制限の値まで増やすことができます。 &lt;code&gt;-H&lt;/code&gt; も &lt;code&gt;-S&lt;/code&gt; も指定されていない場合、新しい制限値を割り当てるときにソフト制限とハード制限の両方が更新され、現在の値を報告するときにソフト制限が使用されます。</target>
        </trans-unit>
        <trans-unit id="ec2f57dda8cd2b7d726afdc269175dec20de44df" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color.&lt;/code&gt; See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">接頭辞 &lt;code&gt;fish_color&lt;/code&gt; と &lt;code&gt;fish_pager_color.&lt;/code&gt; 始まる多数の変数。詳細について&lt;a href=&quot;#variables-color&quot;&gt;は、強調表示色を変更するための変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4b6b5c0631c6ec4d7569772ecd93c5f2a9ad8e07" translate="yes" xml:space="preserve">
          <source>A large number of variable starting with the prefixes &lt;code&gt;fish_color&lt;/code&gt; and &lt;code&gt;fish_pager_color&lt;/code&gt;. See &lt;a href=&quot;#variables-color&quot;&gt;Variables for changing highlighting colors&lt;/a&gt; for more information.</source>
          <target state="translated">接頭辞 &lt;code&gt;fish_color&lt;/code&gt; および &lt;code&gt;fish_pager_color&lt;/code&gt; で始まる多数の変数。詳細について&lt;a href=&quot;#variables-color&quot;&gt;は、強調表示の色を変更するための変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5e5cf560f2e4f99636de6a450bd940ddafbd9847" translate="yes" xml:space="preserve">
          <source>A literal &quot;{}&quot; will not be used as a brace expansion:</source>
          <target state="translated">リテラルの&quot;{}&quot;は中括弧の展開には使用されません。</target>
        </trans-unit>
        <trans-unit id="3b73470b832856451e08f355e80a561c89bef4ab" translate="yes" xml:space="preserve">
          <source>A long flag name which is optional. If not present then only the short flag letter can be used.</source>
          <target state="translated">長いフラグ名。存在しない場合は、短いフラグ文字のみを使用することができます。</target>
        </trans-unit>
        <trans-unit id="c289b8e2f3ba875ebca3ca04379eb21ac58c6d06" translate="yes" xml:space="preserve">
          <source>A number of variables control the symbol (&quot;display&quot;) and color (&quot;color&quot;) for the different status indicators:</source>
          <target state="translated">多くの変数が、異なるステータスインジケータのシンボル(「表示」)と色(「色」)を制御します。</target>
        </trans-unit>
        <trans-unit id="d7eb886434c2d98d1f604c3752317380a9843e6c" translate="yes" xml:space="preserve">
          <source>A number of variables set characters and color used as indicators. Many of these have a different default if used with informative status enabled, or &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; set. The usual default is given first, then the informative default (if it is different). If no default for the colors is given, they default to &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt;.</source>
          <target state="translated">いくつかの変数は、インジケーターとして使用される文字と色を設定します。これらの多くは、情報ステータスを有効にして使用するか、 &lt;code&gt;$__fish_git_prompt_use_informative_chars&lt;/code&gt; 設定して使用すると、デフォルトが異なります。最初に通常のデフォルトが指定され、次に有益なデフォルトが指定されます（異なる場合）。色のデフォルトが指定されていない場合、デフォルトは &lt;code&gt;$__fish_git_prompt_color&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b7b8ab4ed67c762ac2d0fa14336c7a66f5b2e303" translate="yes" xml:space="preserve">
          <source>A range of indices can be specified, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;#expand-index-range&quot;&gt;インデックスの範囲を&lt;/a&gt;指定できます。詳細については、インデックス範囲の拡張を参照してください。</target>
        </trans-unit>
        <trans-unit id="5e298a31256356ac86c6d29914100defedf5fffe" translate="yes" xml:space="preserve">
          <source>A scripts written in &lt;code&gt;bash&lt;/code&gt; it would need a first line like this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; で記述されたスクリプトには、次のような最初の行が必要です。</target>
        </trans-unit>
        <trans-unit id="8c3a0a6b90c1f5bc360ed70d0dd93ffe55365da5" translate="yes" xml:space="preserve">
          <source>A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212 brblue&lt;/code&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">第２の色は、所望のフォールバック色として与えられ得る。たとえば、 &lt;code&gt;set_color 124212 brblue&lt;/code&gt; は、端末が目的のグレーの正確な色合いに対応できない場合に&lt;em&gt;brblue&lt;/em&gt;を使用するようにset_colorに指示します。これは、8色または16色の端末が色を使用しない場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="3fcf13b497d0506afff3d618c0c36dfe5e1a068c" translate="yes" xml:space="preserve">
          <source>A shell is a program which helps you operate your computer by starting other programs. fish offers a command-line interface focused on usability and interactive use.</source>
          <target state="translated">シェルとは、他のプログラムを起動してコンピュータを操作するためのプログラムのことです。</target>
        </trans-unit>
        <trans-unit id="fa2eb63a7d926840491eb53403e1e6e33347d750" translate="yes" xml:space="preserve">
          <source>A short flag letter (which is mandatory). It must be an alphanumeric or &quot;#&quot;. The &quot;#&quot; character is special and means that a flag of the form &lt;code&gt;-123&lt;/code&gt; is valid. The short flag &quot;#&quot; must be followed by &quot;-&quot; (since the short name isn't otherwise valid since &lt;code&gt;_flag_#&lt;/code&gt; is not a valid var name) and must be followed by a long flag name with no modifiers.</source>
          <target state="translated">短い旗の手紙（これは必須です）。英数字または「＃」でなければなりません。 「＃」文字は特殊であり、 &lt;code&gt;-123&lt;/code&gt; 形式のフラグが有効であることを意味します。短いフラグ &quot;＃&quot;の後には &quot;-&quot;を付けなければならず（ &lt;code&gt;_flag_#&lt;/code&gt; は有効なvar名ではないため、短い名前は有効ではありません）、修飾子のない長いフラグ名を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="e585b4919dc0904a5ac8ff639290a7da0168ce72" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays all known VCS info:</source>
          <target state="translated">すべての既知のVCS情報を表示するシンプルなプロンプト。</target>
        </trans-unit>
        <trans-unit id="c44605d7cf5f66a5d454bc7f8b72acac0713b1cf" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays git info:</source>
          <target state="translated">git 情報を表示するシンプルなプロンプトです。</target>
        </trans-unit>
        <trans-unit id="981d3d4dab4f4f8c0ceaf4c8bcfaaee7cef2a27b" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays hg info:</source>
          <target state="translated">hg情報を表示するシンプルなプロンプト。</target>
        </trans-unit>
        <trans-unit id="87603fcaef9b30ff09e50b24e5fda2ce2fcd654c" translate="yes" xml:space="preserve">
          <source>A simple prompt that displays svn info:</source>
          <target state="translated">svn 情報を表示するシンプルなプロンプト。</target>
        </trans-unit>
        <trans-unit id="610fac60f39f41e55d40e59429099ac45fcaf3c8" translate="yes" xml:space="preserve">
          <source>A simple prompt that is a simplified version of the default debugging prompt:</source>
          <target state="translated">デフォルトのデバッグプロンプトを簡略化したシンプルなプロンプトです。</target>
        </trans-unit>
        <trans-unit id="631761c6042b0b4defe6087674d679a446f769a6" translate="yes" xml:space="preserve">
          <source>A simple prompt:</source>
          <target state="translated">簡単なプロンプトです。</target>
        </trans-unit>
        <trans-unit id="a457232f4c851ca48444c8b22ce5d86f9157d153" translate="yes" xml:space="preserve">
          <source>A simple right prompt:</source>
          <target state="translated">シンプルな右のプロンプト。</target>
        </trans-unit>
        <trans-unit id="e87c54de638d95b5e6d226cc4b4479d88e8ad79d" translate="yes" xml:space="preserve">
          <source>A switch is a very common special type of argument. Switches almost always start with one or more hyphens '&lt;code&gt;-&lt;/code&gt;' and alter the way a command operates. For example, the '&lt;code&gt;ls&lt;/code&gt;' command usually lists all the files and directories in the current working directory, but by using the '&lt;code&gt;-l&lt;/code&gt;' switch, the behavior of '&lt;code&gt;ls&lt;/code&gt;' is changed to not only display the filename, but also the size, permissions, owner and modification time of each file.</source>
          <target state="translated">スイッチは、非常に一般的な特殊なタイプの引数です。スイッチは、ほとんどの場合、1つ以上のハイフン「 &lt;code&gt;-&lt;/code&gt; 」で始まり、コマンドの動作方法を変更します。たとえば、「 &lt;code&gt;ls&lt;/code&gt; 」コマンドは通常、現在の作業ディレクトリ内のすべてのファイルとディレクトリを一覧表示しますが、「 &lt;code&gt;-l&lt;/code&gt; 」スイッチを使用すると、「 &lt;code&gt;ls&lt;/code&gt; 」の動作が変更され、ファイル名だけでなくサイズも表示されます、権限、所有者、各ファイルの変更時刻。</target>
        </trans-unit>
        <trans-unit id="dfb06de1c7a12f5632480c8ec95581dfbbdcf321" translate="yes" xml:space="preserve">
          <source>A universal variable is a variable whose value is shared across all instances of &lt;code&gt;fish&lt;/code&gt;, now and in the future &amp;ndash; even after a reboot. You can make a variable universal with &lt;code&gt;set -U&lt;/code&gt;:</source>
          <target state="translated">ユニバーサル変数とは、再起動後も、現在および将来の &lt;code&gt;fish&lt;/code&gt; すべてのインスタンスで値が共有される変数です。 &lt;code&gt;set -U&lt;/code&gt; を使用して変数をユニバーサルにすることができます。</target>
        </trans-unit>
        <trans-unit id="7b8d375ccbff689a61358d91a3d87c3b4c7bb526" translate="yes" xml:space="preserve">
          <source>A variable name cannot be empty. It can contain only letters, digits, and underscores. It may begin and end with any of those characters.</source>
          <target state="translated">変数名を空にすることはできません。文字、数字、アンダースコアのみを含むことができます。これらの文字のいずれかで始まり、終わることができます。</target>
        </trans-unit>
        <trans-unit id="a39ab99e2ea47c8c0e9d74827d866ecbba2cbde0" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod(1)&lt;/code&gt; program.</source>
          <target state="translated">アクセス権については、 &lt;code&gt;chmod(1)&lt;/code&gt; プログラムのマニュアルページで説明しています。</target>
        </trans-unit>
        <trans-unit id="e139d85bd15795b0d3efa188c22e165c587928c5" translate="yes" xml:space="preserve">
          <source>Access rights are explained in the manual page for the &lt;code&gt;chmod&lt;/code&gt;(1) program.</source>
          <target state="translated">アクセス権については、 &lt;code&gt;chmod&lt;/code&gt; （1）プログラムのマニュアルページで説明されています。</target>
        </trans-unit>
        <trans-unit id="cf27f6010a1e75f4bb8d29911772c8214904203b" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;gco&lt;/code&gt; will be replaced with &lt;code&gt;git checkout&lt;/code&gt; global to the current shell. This abbreviation will not be automatically visible to other shells unless the same command is run in those shells (such as when executing the commands in config.fish).</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; が &lt;code&gt;git checkout&lt;/code&gt; globalで置き換えられる新しい略語を現在のシェルに追加します。この省略形は、同じコマンドがそれらのシェルで実行されない限り（config.fishでコマンドを実行するときなど）、他のシェルには自動的に表示されません。</target>
        </trans-unit>
        <trans-unit id="6e3c8915a2556d62c5b7d149b19924656f4d28db" translate="yes" xml:space="preserve">
          <source>Add a new abbreviation where &lt;code&gt;l&lt;/code&gt; will be replaced with &lt;code&gt;less&lt;/code&gt; universal so all shells. Note that you omit the &lt;code&gt;-U&lt;/code&gt; since it is the default.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; が汎用性の &lt;code&gt;less&lt;/code&gt; すべてのシェルに置き換えられる新しい略語を追加します。 &lt;code&gt;-U&lt;/code&gt; はデフォルトなので省略していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fb5d43a3f1c9755eef7928213dbee5eeaa42d36e" translate="yes" xml:space="preserve">
          <source>Add the fish shell &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; with:</source>
          <target state="translated">魚のシェル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を &lt;code&gt;/etc/shells&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="1f235c11a925e7b3330abed437c370548fb56ecc" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;code&gt;blink&lt;/code&gt; can be added after each of the cursor shape parameters to set a blinking cursor in the specified shape.</source>
          <target state="translated">さらに、各カーソル形状パラメーターの後に &lt;code&gt;blink&lt;/code&gt; を追加して、指定した形状に点滅カーソルを設定できます。</target>
        </trans-unit>
        <trans-unit id="fc74aa2568dbca49c63c7dc4f2b48adf6334bb72" translate="yes" xml:space="preserve">
          <source>Additionally, the following variables are available to change the highlighting in the completion pager:</source>
          <target state="translated">さらに、補完ページャーのハイライト表示を変更するには、以下の変数を使用することができます。</target>
        </trans-unit>
        <trans-unit id="3dcf0bfda5eb37d5ad6d848b3b854d252bf95ed5" translate="yes" xml:space="preserve">
          <source>After a command has been entered, it is inserted at the end of a history list. Any duplicate history items are automatically removed. By pressing the up and down keys, the user can search forwards and backwards in the history. If the current command line is not empty when starting a history search, only the commands containing the string entered into the command line are shown.</source>
          <target state="translated">コマンドを入力した後、履歴リストの最後に挿入されます。重複した履歴項目は自動的に削除されます。上下キーを押すことで、履歴を前後に検索することができます。履歴検索開始時に現在のコマンドラインが空でない場合は、コマンドラインに入力された文字列を含むコマンドのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="a350de02e9b5ffd85be164d43398c5ad2155568f" translate="yes" xml:space="preserve">
          <source>After a variable has been set, you can use the value of a variable in the shell through &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">変数が設定された後、変数&lt;a href=&quot;#expand-variable&quot;&gt;展開を&lt;/a&gt;介してシェルで変数の値を使用できます。</target>
        </trans-unit>
        <trans-unit id="6629fd2d9ea9eaa222685dbc3f35af94810deb35" translate="yes" xml:space="preserve">
          <source>After parsing the arguments the &lt;code&gt;argv&lt;/code&gt; var is set with local scope to any values not already consumed during flag processing. If there are not unbound values the var is set but &lt;code&gt;count $argv&lt;/code&gt; will be zero.</source>
          <target state="translated">引数を解析した後、 &lt;code&gt;argv&lt;/code&gt; varは、フラグの処理中にまだ消費されていない値にローカルスコープで設定されます。バインドされていない値がない場合、変数は設定されますが、 &lt;code&gt;count $argv&lt;/code&gt; はゼロになります。</target>
        </trans-unit>
        <trans-unit id="c71ccb08a9461f3714b74f1bc1174cad1387e3e4" translate="yes" xml:space="preserve">
          <source>All arrays are one-dimensional and cannot contain other arrays, although it is possible to fake nested arrays using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">すべての配列は1次元であり、他の配列を含めることはできませんが、&lt;a href=&quot;#expand-variable&quot;&gt;変数展開の&lt;/a&gt;逆参照規則を使用してネストされた配列を偽造することは可能です。</target>
        </trans-unit>
        <trans-unit id="95c98653dd35db2f0582bbcfb13f9d49a14d5a55" translate="yes" xml:space="preserve">
          <source>All lists are one-dimensional and cannot contain other lists, although it is possible to fake nested lists using the dereferencing rules of &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;.</source>
          <target state="translated">すべてのリストは1次元であり、他のリストを含めることはできませんが、&lt;a href=&quot;#expand-variable&quot;&gt;変数展開の&lt;/a&gt;間接参照規則を使用してネストされたリストを偽造することは可能です。</target>
        </trans-unit>
        <trans-unit id="66ffedcb95110c61b7f48b8dfe9b357e5be7aafb" translate="yes" xml:space="preserve">
          <source>All of the above expansions can be combined. If several expansions result in more than one parameter, all possible combinations are created.</source>
          <target state="translated">上記のすべての拡張を組み合わせることができます。いくつかの展開が複数のパラメータになる場合、すべての可能な組み合わせが作成されます。</target>
        </trans-unit>
        <trans-unit id="828afdd065730919c157af1148a37aa2e6215eb2" translate="yes" xml:space="preserve">
          <source>All of the trigonometric functions use radians.</source>
          <target state="translated">三角関数はすべてラジアンを使用します。</target>
        </trans-unit>
        <trans-unit id="59d286363a981fa0af60a5ca572e501d6a1474e5" translate="yes" xml:space="preserve">
          <source>Almost all fish commands respond to the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; options to display their relevant help, also accessible using the &lt;code&gt;help&lt;/code&gt; and &lt;code&gt;man&lt;/code&gt; commands, like so:</source>
          <target state="translated">ほとんどすべてのfishコマンドは、関連するヘルプを表示するために &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; オプションに応答します。また、次のように、 &lt;code&gt;help&lt;/code&gt; および &lt;code&gt;man&lt;/code&gt; コマンドを使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bda1d0385b54eba22fc83053a714334995ee2583" translate="yes" xml:space="preserve">
          <source>Also shortened as &quot;I/O&quot; or &quot;IO&quot;.</source>
          <target state="translated">また、「I/O」または「IO」とも短縮されます。</target>
        </trans-unit>
        <trans-unit id="517f3a2c8b9272ee95d59b7f36af89264fa4dbf8" translate="yes" xml:space="preserve">
          <source>Alt+&amp;darr;,Down</source>
          <target state="translated">Alt+&amp;darr;,Down</target>
        </trans-unit>
        <trans-unit id="5e9023ab706bd62faa0520004f30bc2ed999ef8c" translate="yes" xml:space="preserve">
          <source>Alt+&amp;larr;,Left</source>
          <target state="translated">Alt+&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="36866486669ffcdfbef93f70b2122585d0689c65" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;</source>
          <target state="translated">Alt+&amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6b89c31e566539bfe03d67119b891ccbd78608fd" translate="yes" xml:space="preserve">
          <source>Alt+&amp;rarr;,Right</source>
          <target state="translated">Alt+&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="9a9d40973db0c2622dc620880dd806a2a7b074af" translate="yes" xml:space="preserve">
          <source>Alt+&amp;uarr;,Up</source>
          <target state="translated">Alt+&amp;uarr;,Up</target>
        </trans-unit>
        <trans-unit id="bfc455c2b3ba6cee557bc6d5bddcaae8ab6cd71e" translate="yes" xml:space="preserve">
          <source>Alt+.</source>
          <target state="translated">Alt+.</target>
        </trans-unit>
        <trans-unit id="3f1d49e2c9f7278fd80b98a77041a0c748cbc877" translate="yes" xml:space="preserve">
          <source>Alt+Backspace</source>
          <target state="translated">Alt+Backspace</target>
        </trans-unit>
        <trans-unit id="e03e0d826ab2903a1d279112bf254a834058b27f" translate="yes" xml:space="preserve">
          <source>Alt+D</source>
          <target state="translated">Alt+D</target>
        </trans-unit>
        <trans-unit id="abed54704141f2d3e51473ad15ab778fff8ad229" translate="yes" xml:space="preserve">
          <source>Alt+Enter</source>
          <target state="translated">Alt+Enter</target>
        </trans-unit>
        <trans-unit id="f71a3b249f291f22237bbbed38b8c6c692ef50ea" translate="yes" xml:space="preserve">
          <source>Alt+F</source>
          <target state="translated">Alt+F</target>
        </trans-unit>
        <trans-unit id="ef42947ea26232a62f96bc3b77c5d9938c972a74" translate="yes" xml:space="preserve">
          <source>Alt+Y</source>
          <target state="translated">Alt+Y</target>
        </trans-unit>
        <trans-unit id="42067d9d74bbc067847a30164e23954aca55ff0a" translate="yes" xml:space="preserve">
          <source>Alt+c</source>
          <target state="translated">Alt+c</target>
        </trans-unit>
        <trans-unit id="d73eff91bc5add0567a63c189cfc6a840240cc3a" translate="yes" xml:space="preserve">
          <source>Alt+d</source>
          <target state="translated">Alt+d</target>
        </trans-unit>
        <trans-unit id="356f2928c7cc628dc148ace42aaa5347a9043a00" translate="yes" xml:space="preserve">
          <source>Alt+e</source>
          <target state="translated">Alt+e</target>
        </trans-unit>
        <trans-unit id="a2008eaab718a2cbdba9a5b56cc0388211241a00" translate="yes" xml:space="preserve">
          <source>Alt+h</source>
          <target state="translated">Alt+h</target>
        </trans-unit>
        <trans-unit id="63b063c0b910fdda5527dc17ae1126ec12f233f4" translate="yes" xml:space="preserve">
          <source>Alt+l</source>
          <target state="translated">Alt+l</target>
        </trans-unit>
        <trans-unit id="412b6a19e71a5431a4a033717193f98cc5ab36f2" translate="yes" xml:space="preserve">
          <source>Alt+p</source>
          <target state="translated">Alt+p</target>
        </trans-unit>
        <trans-unit id="3f12597f24de2438c063ec57e52f94359d4653a6" translate="yes" xml:space="preserve">
          <source>Alt+s</source>
          <target state="translated">Alt+s</target>
        </trans-unit>
        <trans-unit id="7c8aea22d76a0fc0d599dcc9667d21c686685110" translate="yes" xml:space="preserve">
          <source>Alt+t</source>
          <target state="translated">Alt+t</target>
        </trans-unit>
        <trans-unit id="8d028f59d024b2c7c1586395af72b9b1deb565e4" translate="yes" xml:space="preserve">
          <source>Alt+u</source>
          <target state="translated">Alt+u</target>
        </trans-unit>
        <trans-unit id="cb3eeeb8ea5fb25aecee7d1b619b3e3d542195e4" translate="yes" xml:space="preserve">
          <source>Alt+v</source>
          <target state="translated">Alt+v</target>
        </trans-unit>
        <trans-unit id="f7d4868bcba598a1dee143a75725317cae61d6b2" translate="yes" xml:space="preserve">
          <source>Alt+w</source>
          <target state="translated">Alt+w</target>
        </trans-unit>
        <trans-unit id="91cf5d208f71238a675c3bfa07523a3c0bae8a90" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt;, but remember that &lt;strong&gt;the variable must be double-quoted&lt;/strong&gt;. For example, &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt;. The &lt;code&gt;test&lt;/code&gt; command provides its own and (-a) and or (-o):</source>
          <target state="translated">または、 &lt;code&gt;test -n &quot;$var&quot;&lt;/code&gt; 使用しますが&lt;strong&gt;、変数は二重引用符で囲む必要があることに注意してください&lt;/strong&gt;。たとえば、 &lt;code&gt;if test -n &quot;$var&quot;; echo not empty; end&lt;/code&gt; 。 &lt;code&gt;test&lt;/code&gt; コマンドは（-o）は、独自のと（-a）およびまたはを提供しています。</target>
        </trans-unit>
        <trans-unit id="b83f5e1029e1f8968df11b5b3d40ca89fed19fcf" translate="yes" xml:space="preserve">
          <source>Always take care to add the &lt;code&gt;$argv&lt;/code&gt; variable to the list of parameters to the wrapped command. This makes sure that if the user specifies any additional parameters to the function, they are passed on to the underlying command.</source>
          <target state="translated">ラップされたコマンドのパラメーターのリストに &lt;code&gt;$argv&lt;/code&gt; 変数を追加するように常に注意してください。これにより、ユーザーが関数に追加のパラメーターを指定した場合、それらは基本となるコマンドに確実に渡されます。</target>
        </trans-unit>
        <trans-unit id="f9ad26606a8f0efef47019531f3d0c942aac7413" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color.</source>
          <target state="translated">A0FF33やf2fなどの3桁または6桁の16進数のRGB値を使用できます。 &lt;code&gt;fish&lt;/code&gt; はサポートされている最も近い色を選択します。 3桁の値は、各桁を2回指定することと同じです。たとえば、 &lt;code&gt;set_color 2BC&lt;/code&gt; はset_color22BBCCと同じ &lt;code&gt;set_color 22BBCC&lt;/code&gt; 。 16進数のRGB値は、小文字または大文字にすることができます。端末の機能（および &lt;code&gt;set_color&lt;/code&gt; がサポートしているレベル）によっては、実際の色が近くの一致する予約済みの色名で近似される場合や、 &lt;code&gt;set_color&lt;/code&gt; が色に影響を与えない場合があります。</target>
        </trans-unit>
        <trans-unit id="c6698f2ed87e85285db0bd4dfe6d91201b04dda0" translate="yes" xml:space="preserve">
          <source>An RGB value with three or six hex digits, such as A0FF33 or f2f can be used. &lt;code&gt;fish&lt;/code&gt; will choose the closest supported color. A three digit value is equivalent to specifying each digit twice; e.g., &lt;code&gt;set_color 2BC&lt;/code&gt; is the same as &lt;code&gt;set_color 22BBCC&lt;/code&gt;. Hexadecimal RGB values can be in lower or uppercase. Depending on the capabilities of your terminal (and the level of support &lt;code&gt;set_color&lt;/code&gt; has for it) the actual color may be approximated by a nearby matching reserved color name or &lt;code&gt;set_color&lt;/code&gt; may not have an effect on color. A second color may be given as a desired fallback color. e.g. &lt;code&gt;set_color 124212&lt;/code&gt;&lt;em&gt;brblue&lt;/em&gt; will instruct set_color to use &lt;em&gt;brblue&lt;/em&gt; if a terminal is not capable of the exact shade of grey desired. This is very useful when an 8 or 16 color terminal might otherwise not use a color.</source>
          <target state="translated">A0FF33やf2fなど、3桁または6桁の16進数のRGB値を使用できます。 &lt;code&gt;fish&lt;/code&gt; はサポートされている最も近い色を選択します。 3桁の値は、各桁を2回指定することと同じです。たとえば、 &lt;code&gt;set_color 2BC&lt;/code&gt; は &lt;code&gt;set_color 22BBCC&lt;/code&gt; と同じです。 16進数のRGB値は、小文字でも大文字でもかまいません。端末の機能（および &lt;code&gt;set_color&lt;/code&gt; のサポートレベル）に応じて、実際の色は近くに一致する予約済みの色の名前で近似されるか、 &lt;code&gt;set_color&lt;/code&gt; が色に影響しない場合があります。第２の色は、所望の代替色として与えられ得る。たとえば、 &lt;code&gt;set_color 124212&lt;/code&gt; &lt;em&gt;brblue&lt;/em&gt;は、set_colorにbrblueを使用するように指示します&lt;em&gt;。&lt;/em&gt;端末が希望するグレーの正確な色合いに対応していない場合。これは、8色または16色の端末が色を使用しない場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="42927afb9c7caf7b6c8ddab65a5441b4f933c6dc" translate="yes" xml:space="preserve">
          <source>An ampersand (&lt;code&gt;&amp;amp;&lt;/code&gt;) followed by the number of another file descriptor. The output will be written to that file descriptor instead.</source>
          <target state="translated">アンパーサンド（ &lt;code&gt;&amp;amp;&lt;/code&gt; ）の後に別のファイル記述子の番号が続きます。代わりに、出力はそのファイル記述子に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f71943b897ee254dbdc1a97522da125ee417b99e" translate="yes" xml:space="preserve">
          <source>An ampersand followed by a minus sign (&lt;code&gt;&amp;amp;-&lt;/code&gt;). The file descriptor will be closed.</source>
          <target state="translated">アンパサンドとそれに続くマイナス記号（ &lt;code&gt;&amp;amp;-&lt;/code&gt; ）。ファイル記述子は閉じられます。</target>
        </trans-unit>
        <trans-unit id="71cc88334bb3e92319c03d6549b247d60c760b50" translate="yes" xml:space="preserve">
          <source>An autoloaded function becomes available automatically to all running shells.</source>
          <target state="translated">オートロードされた機能は、実行中のすべてのシェルで自動的に利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="feaaca65392fda02c163012d9378b2dddb326e82" translate="yes" xml:space="preserve">
          <source>An example of a file redirection is &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, which directs the output of the echo command to the file output.txt.</source>
          <target state="translated">ファイルリダイレクトの例は、 &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; 。これは、echoコマンドの出力をファイルoutput.txtに送信します。</target>
        </trans-unit>
        <trans-unit id="f69522f56e3535db80624669c313a99567b23650" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters</source>
          <target state="translated">歴史もね。一度コマンドを入力すると、数文字入力するだけで再召喚できます。</target>
        </trans-unit>
        <trans-unit id="8bcd9af34fdfabd4b79f9b66b86a1699d04abe42" translate="yes" xml:space="preserve">
          <source>And history too. Type a command once, and you can re-summon it by just typing a few letters:</source>
          <target state="translated">歴史もね。一度コマンドを入力すると、数文字入力するだけで再召喚できます。</target>
        </trans-unit>
        <trans-unit id="0b0fd5cdb40b4cfe992f552884b592eda469a0f9" translate="yes" xml:space="preserve">
          <source>And some other things:</source>
          <target state="translated">他にもいくつか。</target>
        </trans-unit>
        <trans-unit id="561f19ae7fb03ebfc67b782db126853cbbf6f6cb" translate="yes" xml:space="preserve">
          <source>And these will exit non-zero:</source>
          <target state="translated">そして、これらは非ゼロで終了します。</target>
        </trans-unit>
        <trans-unit id="b40c5f88db8dfb0b9bfe4851375485b84d5f21ba" translate="yes" xml:space="preserve">
          <source>And this will open a random picture from any of the subdirectories:</source>
          <target state="translated">そして、これはサブディレクトリのいずれかからランダムに画像を開きます。</target>
        </trans-unit>
        <trans-unit id="362b56d716d77e953ca245a04fefe6fa04496b74" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a mechanism called a redirection.</source>
          <target state="translated">任意のファイルディスクリプタは、リダイレクションと呼ばれるメカニズムによって、デフォルトとは異なる出力に指示することができます。</target>
        </trans-unit>
        <trans-unit id="e8bcc5afa939d9420d0774b5e38828f941829c98" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be directed to a different output than its default through a simple mechanism called a redirection.</source>
          <target state="translated">任意のファイルディスクリプタは、リダイレクションと呼ばれる単純なメカニズムによって、デフォルトとは異なる出力に向けることができます。</target>
        </trans-unit>
        <trans-unit id="c2f3a230563fd5c0b1186bad49a4d25468f2d9d1" translate="yes" xml:space="preserve">
          <source>Any file descriptor can be redirected in an arbitrary way by prefixing the redirection with the file descriptor.</source>
          <target state="translated">リダイレクトの前にファイルディスクリプタを付けることで、任意のファイルディスクリプタを任意の方法でリダイレクトすることができます。</target>
        </trans-unit>
        <trans-unit id="cd5f97ddaa069aad021c1d2a9c338e699d7fb280" translate="yes" xml:space="preserve">
          <source>Any trailing newlines on the input are trimmed, just as with &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; substitution in sh. &lt;code&gt;--no-trim-newlines&lt;/code&gt; can be used to disable this behavior, which may be useful when running a command such as &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt;.</source>
          <target state="translated">shの &lt;code&gt;&quot;$(cmd)&quot;&lt;/code&gt; 置換と同様に、入力の末尾の改行はすべてトリミングされます。 &lt;code&gt;--no-trim-newlines&lt;/code&gt; を使用して、この動作を無効にすることができます。これは、 &lt;code&gt;set contents (cat filename | string collect -N)&lt;/code&gt; などのコマンドを実行するときに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="6ce2360486723d855cffc7d0ddbf62842f609b07" translate="yes" xml:space="preserve">
          <source>Arguments beginning with &lt;code&gt;-&lt;/code&gt; are normally interpreted as switches; &lt;code&gt;--&lt;/code&gt; causes the following arguments not to be treated as switches even if they begin with &lt;code&gt;-&lt;/code&gt;. Switches and required arguments are recognized only on the command line.</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; で始まる引数は通常、スイッチとして解釈されます。 &lt;code&gt;--&lt;/code&gt; 次の引数が &lt;code&gt;-&lt;/code&gt; で始まっていても、スイッチとして扱われないようにします。スイッチと必要な引数は、コマンドラインでのみ認識されます。</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="043257e881ac5312780335efc43840ed60123921" translate="yes" xml:space="preserve">
          <source>As a convenience, the pipe &lt;code&gt;&amp;amp;|&lt;/code&gt; may be used to redirect both stdout and stderr to the same process. (Note this is different from bash, which uses &lt;code&gt;|&amp;amp;&lt;/code&gt;).</source>
          <target state="translated">便宜上、パイプ &lt;code&gt;&amp;amp;|&lt;/code&gt; stdoutとstderrの両方を同じプロセスにリダイレクトするために使用できます。（これは &lt;code&gt;|&amp;amp;&lt;/code&gt; を使用するbashとは異なることに注意してください）。</target>
        </trans-unit>
        <trans-unit id="65d7ac6db0a68a35b045c043f69d790c7693b8ae" translate="yes" xml:space="preserve">
          <source>As a convenience, the redirection &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; can be used to direct both stdout and stderr to the same file.</source>
          <target state="translated">便宜上、リダイレクト &lt;code&gt;&amp;amp;&amp;gt;&lt;/code&gt; を使用して、stdoutとstderrの両方を同じファイルに転送できます。</target>
        </trans-unit>
        <trans-unit id="df3e5f4a2209f9a0c0df95a3cff184e572efda6a" translate="yes" xml:space="preserve">
          <source>As a more comprehensive example, here's a commented excerpt of the completions for systemd's &lt;code&gt;timedatectl&lt;/code&gt;:</source>
          <target state="translated">より包括的な例として、systemdの &lt;code&gt;timedatectl&lt;/code&gt; の完了のコメント付き抜粋を次に示します。</target>
        </trans-unit>
        <trans-unit id="7e5f5d858c5cb06f89afc2d8f5a2724a03bbce58" translate="yes" xml:space="preserve">
          <source>As a naming convention, exported variables are in uppercase and unexported variables are in lowercase.</source>
          <target state="translated">命名規則として、エクスポートされた変数は大文字、エクスポートされていない変数は小文字になります。</target>
        </trans-unit>
        <trans-unit id="156a75280e065fb5a6b979a2a60062b81d648631" translate="yes" xml:space="preserve">
          <source>As a special case, &lt;code&gt;cd .&lt;/code&gt; is equivalent to &lt;code&gt;cd $PWD&lt;/code&gt;, which is useful in cases where a mountpoint has been recycled or a directory has been removed and recreated.</source>
          <target state="translated">特別な場合として、 &lt;code&gt;cd .&lt;/code&gt; &lt;code&gt;cd $PWD&lt;/code&gt; 相当します。これは、マウントポイントがリサイクルされた場合、またはディレクトリが削除されて再作成された場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="473fe2640f48f2c3e356480b21727c05fe2a883f" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow,</source>
          <target state="translated">他の現代のシェルと同じように、上矢印。</target>
        </trans-unit>
        <trans-unit id="20487db156547ac9b0f8f6cda4758b76bf576cc9" translate="yes" xml:space="preserve">
          <source>As in any modern shell, the Up arrow, &lt;b&gt;&amp;uarr;&lt;/b&gt; recalls whole lines, starting from the last line executed. A single press replaces &quot;!!&quot;, later presses replace &quot;!-3&quot; and the like.</source>
          <target state="translated">最新のシェルと同様に、上矢印、&lt;b&gt;&amp;uarr;&lt;/b&gt;は、最後に実行された行から、行全体を&lt;b&gt;呼び出し&lt;/b&gt;ます。1回のプレスで「!!」が置き換えられ、その後のプレスで「！-3」などが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="67ab2336a0f60cb48a293dcf13625cec05689fb2" translate="yes" xml:space="preserve">
          <source>As mentioned in &lt;a href=&quot;#tut_semicolon&quot;&gt;the section on the semicolon&lt;/a&gt;, this can also be written in multiple lines, like so:</source>
          <target state="translated">&lt;a href=&quot;#tut_semicolon&quot;&gt;セミコロンのセクションで&lt;/a&gt;述べたように、これは次のように複数行で書くこともできます：</target>
        </trans-unit>
        <trans-unit id="a52775e74dd1367202ccdfebc63ffe15c3fc2a94" translate="yes" xml:space="preserve">
          <source>Autoloading Functions</source>
          <target state="translated">オートロード機能</target>
        </trans-unit>
        <trans-unit id="4824104c7854d679befc6d384e2b164a387c5851" translate="yes" xml:space="preserve">
          <source>Autoloading also won't work for &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt;, since fish cannot know that a function is supposed to be executed when an event occurs when it hasn't yet loaded the function. See the &lt;a href=&quot;#event&quot;&gt;event handlers&lt;/a&gt; section for more information.</source>
          <target state="translated">また、関数がまだロードされていないときにイベントが発生すると、fishは関数が実行されることになっていることを認識できないため、&lt;a href=&quot;#event&quot;&gt;イベントハンドラー&lt;/a&gt;ではオートロードは機能しません。詳細については、&lt;a href=&quot;#event&quot;&gt;イベントハンドラーの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="95c7d742338312cc72973984211afee4d64d688a" translate="yes" xml:space="preserve">
          <source>Autoloading functions</source>
          <target state="translated">オートロード機能</target>
        </trans-unit>
        <trans-unit id="37ebd68a9ad79a75d4984b197d8be79759e981aa" translate="yes" xml:space="preserve">
          <source>Autoloading is not applicable to functions created by the &lt;code&gt;alias&lt;/code&gt; command. For functions simple enough that you prefer to use the &lt;code&gt;alias&lt;/code&gt; command to define them you'll need to put those commands in your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; script or some other script run when the shell starts.</source>
          <target state="translated">自動ロードは、 &lt;code&gt;alias&lt;/code&gt; コマンドによって作成された関数には適用されません。 &lt;code&gt;alias&lt;/code&gt; コマンドを使用してそれらを定義することを好むほど単純な関数の場合、これらのコマンドを &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; スクリプトまたはシェルの起動時に実行されるその他のスクリプトに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="220cc2eeb742925687ae3d99a850d4e272eba270" translate="yes" xml:space="preserve">
          <source>Autoloading isn't applicable to aliases. Since, by definition, the function is created at the time the alias command is executed. You cannot autoload aliases.</source>
          <target state="translated">オートロードはエイリアスには適用されません。定義上、エイリアスコマンドの実行時に関数が作成されるため エイリアスをオートロードすることはできません。</target>
        </trans-unit>
        <trans-unit id="7833f645e87e9d8459033a17299c17f343cc6bd7" translate="yes" xml:space="preserve">
          <source>Automatically loaded functions cannot be removed using &lt;code&gt;functions -e&lt;/code&gt;. Either remove the definition file or change the $fish_function_path variable to remove autoloaded functions.</source>
          <target state="translated">自動ロードされた関数は、 &lt;code&gt;functions -e&lt;/code&gt; を使用して削除することはできません。定義ファイルを削除するか、$ fish_function_path変数を変更して、自動ロードされた関数を削除します。</target>
        </trans-unit>
        <trans-unit id="08b275b23c8db0abd0fd47a8278bb4a362d42dd2" translate="yes" xml:space="preserve">
          <source>Autosuggestions</source>
          <target state="translated">Autosuggestions</target>
        </trans-unit>
        <trans-unit id="a97c1fe699de2b5c57693a4ec6fbf5427cf3afca" translate="yes" xml:space="preserve">
          <source>Autosuggestions are a powerful way to quickly summon frequently entered commands, by typing the first few characters. They are also an efficient technique for navigating through directory hierarchies.</source>
          <target state="translated">オートサジェスチョンは、最初の数文字を入力するだけで、頻繁に入力されるコマンドを素早く呼び出すことができる強力な方法です。また、ディレクトリの階層をナビゲートするための効率的なテクニックでもあります。</target>
        </trans-unit>
        <trans-unit id="efb359fec2a662dc1a33a02af7733ec339aa7947" translate="yes" xml:space="preserve">
          <source>Back to &lt;a href=&quot;index#toc-commands&quot;&gt;command index&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;index#toc-commands&quot;&gt;コマンドインデックスに&lt;/a&gt;戻る。</target>
        </trans-unit>
        <trans-unit id="b6d421870c8ff86f5929b69f93de50dd0a6ad8a4" translate="yes" xml:space="preserve">
          <source>Background jobs</source>
          <target state="translated">バックグラウンドジョブ</target>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="aef1ee8a9d6b03ca3f008e7820b03d1764d158f0" translate="yes" xml:space="preserve">
          <source>Be careful when you try to use braces to separate variable names from text. The problem shown above can be avoided by wrapping the variable in double quotes instead of braces (&lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;).</source>
          <target state="translated">中括弧を使用して変数名とテキストを区切る場合は注意が必要です。上記の問題は、変数を中括弧ではなく二重引用符で囲むことで回避できます（ &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="7feaea8ff9fd56c39af0c7242d19cfc491332827" translate="yes" xml:space="preserve">
          <source>Because history substitution is an awkward interface that was invented before interactive line editing was even possible. Fish drops it in favor of perfecting the interactive history recall interface. Switching requires a small change of habits: if you want to modify an old line/word, first recall it, then edit. E.g. don't type &quot;sudo !!&quot; - first press Up, then Home, then type &quot;sudo &quot;.</source>
          <target state="translated">履歴の置換は対話的な行編集が可能になる前に発明された厄介なインターフェイスだからです。Fishは、対話的な履歴の呼び出しインターフェイスを完璧にするために、それを削除しました。切り替えにはちょっとした習慣の変更が必要です:古い行や単語を修正したい場合は、まずそれを呼び出してから編集してください。例えば、&quot;sudo !-最初にアップを押して、次にホームを押して、次にタイプ &quot;sudo &quot;.</target>
        </trans-unit>
        <trans-unit id="6e2b48e7cf5a31dcb784896532986617c1886b80" translate="yes" xml:space="preserve">
          <source>Because this test is a shell builtin and not a standalone utility, using the -c flag on a special file descriptors like standard input and output may not return the same result when invoked from within a pipe as one would expect when invoking the &lt;code&gt;test&lt;/code&gt; utility in another shell.</source>
          <target state="translated">このテストは、シェル組み込みとしないスタンドアロンユーティリティであるため、呼び出すときに予想されるようにパイプ内から呼び出された場合、標準入力と出力のような特別なファイルディスクリプタに-cフラグを使用して同じ結果を返さないことが &lt;code&gt;test&lt;/code&gt; において有用性を別のシェル。</target>
        </trans-unit>
        <trans-unit id="2c0a4626f95b4339163a76408544aca1706ad80a" translate="yes" xml:space="preserve">
          <source>Both command substitution and shell variable expansion support accessing only specific items by providing a set of indices in square brackets. It's often needed to access a sequence of elements. To do this, use the range operator '&lt;code&gt;..&lt;/code&gt;' for this. A range '&lt;code&gt;a..b&lt;/code&gt;', where range limits 'a' and 'b' are integer numbers, is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. The negative range limits are calculated from the end of the array or command substitution. Note that invalid indexes for either end are silently clamped to one or the size of the array as appropriate.</source>
          <target state="translated">コマンド置換とシェル変数展開はどちらも、角かっこ内に一連のインデックスを提供することにより、特定のアイテムのみへのアクセスをサポートしています。多くの場合、一連の要素にアクセスする必要があります。これを行うには、範囲演算子 ' &lt;code&gt;..&lt;/code&gt; 'を使用します。範囲 ' &lt;code&gt;a..b&lt;/code&gt; '（範囲制限 'a'および 'b'は整数）は、一連のインデックス ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; 'または ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; 'は、「a」または「b」のどちらが高いかによって異なります。負の範囲の制限は、配列またはコマンド置換の最後から計算されます。どちらかの端の無効なインデックスは、適切に、1つまたは配列のサイズに暗黙的にクランプされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="75ffa6a25ecf8db0b72541843389d9eaf8b53a19" translate="yes" xml:space="preserve">
          <source>Both integers and floating point numbers are supported.</source>
          <target state="translated">整数と浮動小数点数の両方をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a427d5ed7ae29cac94543768854841dc58975513" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;match&lt;/code&gt; and &lt;code&gt;replace&lt;/code&gt; subcommand support regular expressions when used with the &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; option. The dialect is that of PCRE2.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--regex&lt;/code&gt; オプションとともに使用すると、 &lt;code&gt;match&lt;/code&gt; サブコマンドと &lt;code&gt;replace&lt;/code&gt; サブコマンドの両方が正規表現をサポートします。方言はPCRE2の方言です。</target>
        </trans-unit>
        <trans-unit id="511cb46636e15b326ac52fc0e55d4fdd22eb3466" translate="yes" xml:space="preserve">
          <source>Brace expansion</source>
          <target state="translated">ブレース拡張</target>
        </trans-unit>
        <trans-unit id="b2b396ea7eca30ae26382239ecff257585cae7ee" translate="yes" xml:space="preserve">
          <source>Bracket expansion</source>
          <target state="translated">ブラケット拡張</target>
        </trans-unit>
        <trans-unit id="b82bb93621eea3789efc2e789761d65a7d589377" translate="yes" xml:space="preserve">
          <source>Builtin commands</source>
          <target state="translated">組み込みコマンド</target>
        </trans-unit>
        <trans-unit id="3d71f7e1b353d405d0ac11988a391e51c106c8d8" translate="yes" xml:space="preserve">
          <source>But this is not:</source>
          <target state="translated">しかし、これは違います。</target>
        </trans-unit>
        <trans-unit id="cde26bb231339705624e1a2606178650cfe6ce34" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;$fish_function_path&lt;/code&gt; contains the following:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;$fish_function_path&lt;/code&gt; には次のものが含まれています。</target>
        </trans-unit>
        <trans-unit id="48c59a6753b3cfab58dea49a5311a9139ab88123" translate="yes" xml:space="preserve">
          <source>By default interactive commands are logged to &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; (typically &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt;).</source>
          <target state="translated">デフォルトでは、対話型コマンドは &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; （通常 &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; ）に記録されます。</target>
        </trans-unit>
        <trans-unit id="32d73806ca1d3aebeb76dd86671a3241e81f5c68" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for completions, using the first available file that it finds:</source>
          <target state="translated">デフォルトでは、Fishは以下のように、最初に見つかった利用可能なファイルを使って補完を検索します。</target>
        </trans-unit>
        <trans-unit id="0d8a923544fbc788e85068131f51c4e6a9993b6b" translate="yes" xml:space="preserve">
          <source>By default, Fish searches the following for functions, using the first available file that it finds:</source>
          <target state="translated">デフォルトでは、Fishは最初に見つけた利用可能なファイルを使用して、以下のように関数を検索します。</target>
        </trans-unit>
        <trans-unit id="59136d65df69881397a99de96dfa18d804e65129" translate="yes" xml:space="preserve">
          <source>By default, only the current branch is shown because &lt;code&gt;hg status&lt;/code&gt; can take be slow on large repository. You can enable a more informative prompt by setting the variable &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt;, for example:</source>
          <target state="translated">大規模なリポジトリでは &lt;code&gt;hg status&lt;/code&gt; が遅くなる可能性があるため、デフォルトでは現在のブランチのみが表示されます。変数 &lt;code&gt;$fish_prompt_hg_show_informative_status&lt;/code&gt; 設定することで、より有益なプロンプトを有効にできます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="315b1092a86cf296a40f2822b51753c337ac1521" translate="yes" xml:space="preserve">
          <source>By default, the output is as a float with trailing zeroes trimmed. To get a fixed representation, the &lt;code&gt;--scale&lt;/code&gt; option can be used, including &lt;code&gt;--scale=0&lt;/code&gt; for integer output.</source>
          <target state="translated">デフォルトでは、出力は後続ゼロが削除された浮動小数点数です。固定された表現を取得するために、 &lt;code&gt;--scale&lt;/code&gt; オプションには、使用することができる &lt;code&gt;--scale=0&lt;/code&gt; 整数出力用。</target>
        </trans-unit>
        <trans-unit id="72523c77472ad7835198f8fcd9e09a5badc11af9" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;breakpoint&lt;/a&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数を定義することにより、ユーザーは&lt;a href=&quot;breakpoint#cmd-breakpoint&quot;&gt;ブレークポイント&lt;/a&gt;コマンドに応答して入力を求めるときにカスタムプロンプトを選択できます。 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="db7a1b873a6bb02030899acd0c28b71468ea0843" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function, the user can choose a custom prompt when asking for input in response to a &lt;code&gt;breakpoint&lt;/code&gt; command. The &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数を定義することにより、ユーザーは &lt;code&gt;breakpoint&lt;/code&gt; コマンドに応答して入力を求めるときにカスタムプロンプトを選択できます。 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="be6b595ea352dde32c38a4fa33c350b05d798766" translate="yes" xml:space="preserve">
          <source>By defining the &lt;code&gt;fish_prompt&lt;/code&gt; function, the user can choose a custom prompt. The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 関数を定義することにより、ユーザーはカスタムプロンプトを選択できます。 &lt;code&gt;fish_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="630303d4e2fa4b039b2b6a8e3e8b5957dc1783d2" translate="yes" xml:space="preserve">
          <source>By ending a command with the &lt;code&gt;&amp;amp;&lt;/code&gt; (ampersand) symbol, the user tells &lt;code&gt;fish&lt;/code&gt; to put the specified command into the background. A background process will be run simultaneous with &lt;code&gt;fish&lt;/code&gt;. &lt;code&gt;fish&lt;/code&gt; will retain control of the terminal, so the program will not be able to read from the keyboard.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; （アンパサンド）記号でコマンドを終了することで、ユーザーは指定したコマンドをバックグラウンドに置くように &lt;code&gt;fish&lt;/code&gt; に指示します。バックグラウンドプロセスは、 &lt;code&gt;fish&lt;/code&gt; と同時に実行されます。 &lt;code&gt;fish&lt;/code&gt; は端末の制御を保持するため、プログラムはキーボードから読み取ることができません。</target>
        </trans-unit>
        <trans-unit id="3923f5578037b3542b2b19d15f49bde3629ec275" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the</source>
          <target state="translated">を押す前に円記号（ &lt;code&gt;\&lt;/code&gt; ）文字を挿入する</target>
        </trans-unit>
        <trans-unit id="02079690d5cebbe350c1aa5604a81e7a19265022" translate="yes" xml:space="preserve">
          <source>By inserting a backslash (&lt;code&gt;\&lt;/code&gt;) character before pressing the &lt;b&gt;Enter&lt;/b&gt; key, escaping the newline.</source>
          <target state="translated">&lt;b&gt;Enter&lt;/b&gt;キーを押す前にバックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）文字を挿入して、改行をエスケープします。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="82a4b7b090d106c959549d48fe03da459c91c544" translate="yes" xml:space="preserve">
          <source>By pressing</source>
          <target state="translated">を押すことで</target>
        </trans-unit>
        <trans-unit id="5663475279a3c781c24c4811471a2f176e1db991" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;darr;&lt;/b&gt;, a history search is also performed, but instead of searching for a complete commandline, each commandline is broken into separate elements just like it would be before execution, and the history is searched for an element matching that under the cursor.</source>
          <target state="translated">押して、&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;および&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;&amp;darr;&lt;/b&gt;、履歴検索も実行され、その代わりに、完全なコマンドラインを検索する、各コマンドラインは、それが実行前であろうと同じように別個の要素に分割され、履歴が要素マッチングを探索しますカーソルの下にある。</target>
        </trans-unit>
        <trans-unit id="894ba850efc456224525f2c8a25b95199c183915" translate="yes" xml:space="preserve">
          <source>By pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt;, the user stops a currently running foreground program and returns control to &lt;code&gt;fish&lt;/code&gt;. Some programs do not support this feature, or remap it to another key. GNU Emacs uses &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt;&lt;b&gt;z&lt;/b&gt; to stop running.</source>
          <target state="translated">&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Zを&lt;/b&gt;押すと、ユーザーは現在実行中のフォアグラウンドプログラムを停止し、制御を &lt;code&gt;fish&lt;/code&gt; に戻します。一部のプログラムはこの機能をサポートしていないか、別のキーに再マッピングします。GNU Emacsは&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X &lt;/b&gt;&lt;b&gt;z&lt;/b&gt;を使用して実行を停止します。</target>
        </trans-unit>
        <trans-unit id="24eaf089af6a9daa271f7a6b0f06e6709ca1da8e" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;#emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">イベントハンドラースイッチの1つを使用して、特定のイベントで関数を自動的に実行することができます。ユーザーが使用して新しいイベントを生成する&lt;a href=&quot;#emit&quot;&gt;EMITの&lt;/a&gt;組み込みを。Fishは次の名前付きイベントを生成します：</target>
        </trans-unit>
        <trans-unit id="6a5c8721be6b4633186b4214510f8a5ef8c0f497" translate="yes" xml:space="preserve">
          <source>By using one of the event handler switches, a function can be made to run automatically at specific events. The user may generate new events using the &lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt; builtin. Fish generates the following named events:</source>
          <target state="translated">イベントハンドラスイッチの1つを使用することにより、特定のイベントで関数を自動的に実行することができます。ユーザーは、&lt;a href=&quot;emit#cmd-emit&quot;&gt;emit&lt;/a&gt;ビルトインを使用して新しいイベントを生成できます。Fishは、次の名前付きイベントを生成します。</target>
        </trans-unit>
        <trans-unit id="702f8fce2752414a6a80cd6a6df6d1f2e4852509" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">&lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt;および&lt;a href=&quot;cmds/fg#cmd-fg&quot;&gt;fg&lt;/a&gt;組み込みコマンドを使用することにより、ユーザーは現在実行中のジョブをフォアグラウンドまたはバックグラウンドに送信できます。</target>
        </trans-unit>
        <trans-unit id="8da67926c227ce4e24b10b06e71944960277e706" translate="yes" xml:space="preserve">
          <source>By using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; builtin commands, the user can send any currently running job into the foreground or background.</source>
          <target state="translated">&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;組み込みコマンドを使用すると、ユーザーは現在実行中のジョブをフォアグラウンドまたはバックグラウンドに送信できます。</target>
        </trans-unit>
        <trans-unit id="1b6aff63c75bb0bffcdb7bfed5216e186365ff61" translate="yes" xml:space="preserve">
          <source>Cartesian Products</source>
          <target state="translated">直交製品</target>
        </trans-unit>
        <trans-unit id="fcb3f81706967bbcb598dd0c3292965cf75b975f" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when</source>
          <target state="translated">原因となる &lt;code&gt;fish&lt;/code&gt; 終了するときに</target>
        </trans-unit>
        <trans-unit id="da6418309e4149798278c2a545077667f8bdc404" translate="yes" xml:space="preserve">
          <source>Causes &lt;code&gt;fish&lt;/code&gt; to exit when &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; is pressed.</source>
          <target state="translated">原因となる &lt;code&gt;fish&lt;/code&gt; するときに終了するには&lt;em&gt;コントロール&lt;/em&gt; - &lt;b&gt;Dが&lt;/b&gt;押されました。</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="c8b1d49fdfd53112a6dec6dbd017336ac207e99e" translate="yes" xml:space="preserve">
          <source>Change the value of the variable &lt;code&gt;fish_greeting&lt;/code&gt; or create a &lt;code&gt;fish_greeting&lt;/code&gt; function. For example, to remove the greeting use:</source>
          <target state="translated">変数 &lt;code&gt;fish_greeting&lt;/code&gt; の値を変更するか、 &lt;code&gt;fish_greeting&lt;/code&gt; 関数を作成します。たとえば、挨拶を削除するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f3de89fbff6985c921affb37ab3ad59fbe48b95c" translate="yes" xml:space="preserve">
          <source>Change your default shell to fish with:</source>
          <target state="translated">デフォルトのシェルを変更して釣りをします。</target>
        </trans-unit>
        <trans-unit id="122ab61fb2390b34bf8bb07c44168363d5d992db" translate="yes" xml:space="preserve">
          <source>Character classes, some of the more important:</source>
          <target state="translated">キャラクタークラス、いくつかの重要なものがあります。</target>
        </trans-unit>
        <trans-unit id="837815e7e725405b61d99f890160135ef054c4ec" translate="yes" xml:space="preserve">
          <source>Colors used with &lt;code&gt;showcolorhints&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;showcolorhints&lt;/code&gt; で使用される色：</target>
        </trans-unit>
        <trans-unit id="1aafc3262722e98fb6adb1e17c5cec1e303396d2" translate="yes" xml:space="preserve">
          <source>Combiners (And, Or, Not)</source>
          <target state="translated">コンバイナ(および、または、そうでないもの</target>
        </trans-unit>
        <trans-unit id="b6709a8adcdc85a8bf2a1db551231443bd8370ba" translate="yes" xml:space="preserve">
          <source>Combining different expansions</source>
          <target state="translated">異なる拡張を組み合わせる</target>
        </trans-unit>
        <trans-unit id="9625ac94507491a715e0ffe2602f1661a6b23708" translate="yes" xml:space="preserve">
          <source>Command Substitutions</source>
          <target state="translated">コマンドの置換</target>
        </trans-unit>
        <trans-unit id="83637571c7cadd0f3ed544a2316197ea7b780571" translate="yes" xml:space="preserve">
          <source>Command line editor</source>
          <target state="translated">コマンドラインエディタ</target>
        </trans-unit>
        <trans-unit id="0bb0bf3bb5581e18abbaa7de52785c4cc0e3a748" translate="yes" xml:space="preserve">
          <source>Command mode</source>
          <target state="translated">コマンドモード</target>
        </trans-unit>
        <trans-unit id="a2bd119306b51a92961511ebb58609c5dd727601" translate="yes" xml:space="preserve">
          <source>Command mode is also known as normal mode.</source>
          <target state="translated">コマンドモードは通常モードとも呼ばれています。</target>
        </trans-unit>
        <trans-unit id="f0cab561b2d1b6a50046aaac51d5900407780ea5" translate="yes" xml:space="preserve">
          <source>Command reference</source>
          <target state="translated">コマンド参照</target>
        </trans-unit>
        <trans-unit id="2bbdbfd618344aa7db88dfcb6076ec5fa368eb17" translate="yes" xml:space="preserve">
          <source>Command specific tab-completions in &lt;code&gt;fish&lt;/code&gt; are based on the notion of options and arguments. An option is a parameter which begins with a hyphen, such as '&lt;code&gt;-h&lt;/code&gt;', '&lt;code&gt;-help&lt;/code&gt;' or '&lt;code&gt;--help&lt;/code&gt;'. Arguments are parameters that do not begin with a hyphen. Fish recognizes three styles of options, the same styles as the GNU version of the getopt library. These styles are:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; コマンド固有のタブ補完は、オプションと引数の概念に基づいています。オプションは、「として、ハイフンで始まるパラメータであり &lt;code&gt;-h&lt;/code&gt; 」、「 &lt;code&gt;-help&lt;/code&gt; 」または「 &lt;code&gt;--help&lt;/code&gt; 」。引数は、ハイフンで始まらないパラメーターです。 Fishは3つのスタイルのオプションを認識します。これは、getoptライブラリのGNUバージョンと同じスタイルです。これらのスタイルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="030d4685e9a5967e8a6f3c21ac5fdf12f5dd2ed5" translate="yes" xml:space="preserve">
          <source>Command substitution</source>
          <target state="translated">コマンドの置換</target>
        </trans-unit>
        <trans-unit id="530a1cffa7ec59af0b705c2ba3cd0b438869485e" translate="yes" xml:space="preserve">
          <source>Command substitutions</source>
          <target state="translated">コマンドの置換</target>
        </trans-unit>
        <trans-unit id="878863dedc3f406e3a65e48d9a354f6f067ef79a" translate="yes" xml:space="preserve">
          <source>Command substitutions are not expanded within quotes. Instead, you can temporarily close the quotes, add the command substitution, and reopen them, all in the same argument:</source>
          <target state="translated">コマンドの置換は引用符の中では展開されません。その代わりに、引用符を一時的に閉じて、コマンド置換を追加して、それらを再び開くことができます。</target>
        </trans-unit>
        <trans-unit id="71c192adcb09f8e5eb78adbae51c316308911f17" translate="yes" xml:space="preserve">
          <source>Command substitutions found in &lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; are not expected to return a space-separated list of arguments. Instead they must return a newline-separated list of arguments, and each argument may optionally have a tab character followed by the argument description. Any description provided in this way overrides a description given with &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--description&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OPTION_ARGUMENTS&lt;/code&gt; にあるコマンド置換は、スペースで区切られた引数のリストを返すとは想定されていません。代わりに、改行で区切られた引数のリストを返す必要があり、各引数にはオプションでタブ文字の後に引数の説明を続けることができます。この方法で提供される説明は、 &lt;code&gt;-d&lt;/code&gt; または &lt;code&gt;--description&lt;/code&gt; で指定された説明を上書きします。</target>
        </trans-unit>
        <trans-unit id="874c75da73d00d89463a52a5b3bd6b12c296e9c3" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks ` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">コマンド置換では、あるコマンドの出力を別のコマンドの引数として使用します。他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; はコマンド置換にバックティックを使用しません。代わりに、括弧を使用します。</target>
        </trans-unit>
        <trans-unit id="a3571f5f1d40b027e13d061d92b54680b29bb7f2" translate="yes" xml:space="preserve">
          <source>Command substitutions use the output of one command as an argument to another. Unlike other shells, &lt;code&gt;fish&lt;/code&gt; does not use backticks `` for command substitutions. Instead, it uses parentheses:</source>
          <target state="translated">コマンド置換は、あるコマンドの出力を別のコマンドへの引数として使用します。他のシェルとは異なり、 &lt;code&gt;fish&lt;/code&gt; はコマンド置換にバッククォートを使用しません。代わりに、括弧を使用します。</target>
        </trans-unit>
        <trans-unit id="45e5f3f72e961cb70134ba35f7a27a9620e515f7" translate="yes" xml:space="preserve">
          <source>Commands</source>
          <target state="translated">Commands</target>
        </trans-unit>
        <trans-unit id="bf9c7a7be3e1f3bbb8b332baec1b3308eba8941c" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character ' '. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">コマンドとパラメーターは、スペース文字「」で区切ります。すべてのコマンドは、改行（つまり、Returnキーを押す）またはセミコロン 'で終了し &lt;code&gt;;&lt;/code&gt; '。セミコロンで区切ることにより、複数のコマンドを同じ行に記述できます。</target>
        </trans-unit>
        <trans-unit id="83546b9b7e63e4645609121c2d50d70ab2f8f27d" translate="yes" xml:space="preserve">
          <source>Commands and parameters are separated by the space character &lt;code&gt;' '&lt;/code&gt;. Every command ends with either a newline (i.e. by pressing the return key) or a semicolon '&lt;code&gt;;&lt;/code&gt;'. More than one command can be written on the same line by separating them with semicolons.</source>
          <target state="translated">コマンドとパラメーターはスペース文字 &lt;code&gt;' '&lt;/code&gt; 区切られます。すべてのコマンドは、改行（つまり、リターンキーを押す）またはセミコロン 'で終了し &lt;code&gt;;&lt;/code&gt; '。複数のコマンドをセミコロンで区切ることにより、同じ行に書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="1c09ac3482bfc9b09262d71ce2a3754d63bdebcd" translate="yes" xml:space="preserve">
          <source>Commands can be chained with semicolons.</source>
          <target state="translated">コマンドはセミコロンで連結することができます。</target>
        </trans-unit>
        <trans-unit id="c7fc896ec27369aa3d8b46ed7bef7ce121078ca5" translate="yes" xml:space="preserve">
          <source>Comparison to other tools</source>
          <target state="translated">他のツールとの比較</target>
        </trans-unit>
        <trans-unit id="7d648a6dff363974f754bb78876c2b10dadd8183" translate="yes" xml:space="preserve">
          <source>Compatibility notes</source>
          <target state="translated">互換性に関する注意事項</target>
        </trans-unit>
        <trans-unit id="af799f168326079cfa5fbcb1f17396cdcd478951" translate="yes" xml:space="preserve">
          <source>Completion of commands (builtins, functions and regular programs).</source>
          <target state="translated">コマンド(ビルドイン、関数、レギュラープログラム)の完成。</target>
        </trans-unit>
        <trans-unit id="e251e522a2899f0695ad97b7e9306c9baaf077df" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;' and '&lt;code&gt;**&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; 'や ' &lt;code&gt;**&lt;/code&gt; 'などのワイルドカードを含む文字列であっても、ファイル名の補完。</target>
        </trans-unit>
        <trans-unit id="3e42585f4a363d61f824319c2d4ccdcc434dd210" translate="yes" xml:space="preserve">
          <source>Completion of filenames, even on strings with wildcards such as '&lt;code&gt;*&lt;/code&gt;', '&lt;code&gt;**&lt;/code&gt;' and '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">' &lt;code&gt;*&lt;/code&gt; '、 ' &lt;code&gt;**&lt;/code&gt; '、 ' &lt;code&gt;?&lt;/code&gt; などのワイルドカードを含む文字列であっても、ファイル名の補完 '。</target>
        </trans-unit>
        <trans-unit id="9c40677954f135a6a56c9a9c3b9199834c1a73af" translate="yes" xml:space="preserve">
          <source>Completion of shell variable names.</source>
          <target state="translated">シェル変数名の完成</target>
        </trans-unit>
        <trans-unit id="15f1e262b91eabd8e311927699155dff284efc75" translate="yes" xml:space="preserve">
          <source>Completion of usernames for tilde expansion.</source>
          <target state="translated">チルダ展開のためのユーザ名の完成</target>
        </trans-unit>
        <trans-unit id="8492522b516edbc0711ffad46d10e7abb03c888a" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manual, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">オペレーティングシステムのマニュアルから自動的に生成された補完。通常、 &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="5e2bb22e8c63c3bc4092f861769d982ce94a1df7" translate="yes" xml:space="preserve">
          <source>Completions automatically generated from the operating system's manuals, usually stored in &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt;.</source>
          <target state="translated">オペレーティングシステムのマニュアルから自動的に生成された完了。通常は &lt;code&gt;~/.local/share/fish/generated_completions&lt;/code&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="77d31de015d4bc8d64c24ea654ff949d735a3c85" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">補完はコマンドラインまたは構成ファイルで定義できますが、自動的にロードすることもできます。Fishは、配列変数 &lt;code&gt;$fish_complete_path&lt;/code&gt; 内のすべてのディレクトリを自動的に検索し、定義された補完は、必要に応じて自動的にロードされます。補完ファイルには、補完するコマンドの名前とサフィックス「 &lt;code&gt;.fish&lt;/code&gt; 」からなるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="e197b8e42b1affde93333b42e719ef94bc91d71d" translate="yes" xml:space="preserve">
          <source>Completions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. Fish automatically searches through any directories in the list variable &lt;code&gt;$fish_complete_path&lt;/code&gt;, and any completions defined are automatically loaded when needed. A completion file must have a filename consisting of the name of the command to complete and the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">完了は、コマンドラインまたは構成ファイルで定義できますが、自動的にロードすることもできます。Fishは、リスト変数 &lt;code&gt;$fish_complete_path&lt;/code&gt; 内のディレクトリを自動的に検索し、定義された補完は必要に応じて自動的にロードされます。完了ファイルには、完了するコマンドの名前と接尾辞「 &lt;code&gt;.fish&lt;/code&gt; 」で構成されるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="7459a1dd314e140f10e2be4ec65979e72c902ac1" translate="yes" xml:space="preserve">
          <source>Conditional execution of code and flow control</source>
          <target state="translated">コードの条件付き実行とフロー制御</target>
        </trans-unit>
        <trans-unit id="0d5f4aeff7e3312bef6ba63f6a5b4ba1f78a94cb" translate="yes" xml:space="preserve">
          <source>Conditionals (If, Else, Switch)</source>
          <target state="translated">条件式 (If,Else,Switch)</target>
        </trans-unit>
        <trans-unit id="719fae22a2cd4fb971f775638bdd50f6e63161da" translate="yes" xml:space="preserve">
          <source>Configurable greeting</source>
          <target state="translated">設定可能な挨拶</target>
        </trans-unit>
        <trans-unit id="f0b58e3b2ee0b9289c02bd1984243913025c6fa6" translate="yes" xml:space="preserve">
          <source>Configuration files are evaluated in the following order:</source>
          <target state="translated">設定ファイルは以下の順序で評価されます。</target>
        </trans-unit>
        <trans-unit id="f4e0d62ab20b29e8432ac06936c92f52d1fc4b42" translate="yes" xml:space="preserve">
          <source>Configuration shipped with fish, which should not be edited, in &lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; (usually &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;$__fish_data_dir/config.fish&lt;/code&gt; （通常は &lt;code&gt;/usr/share/fish/config.fish&lt;/code&gt; ）内の、編集されるべきではないfishに付属する構成</target>
        </trans-unit>
        <trans-unit id="22ff08f353e570d20e5a6366fd00500ccc60eb5a" translate="yes" xml:space="preserve">
          <source>Configuration snippets in files ending in &lt;code&gt;.fish&lt;/code&gt;, in the directories:</source>
          <target state="translated">次のディレクトリにある、 &lt;code&gt;.fish&lt;/code&gt; で終わるファイルの構成スニペット：</target>
        </trans-unit>
        <trans-unit id="d916ac2852cd35aba927b6e5183496dfbb68f253" translate="yes" xml:space="preserve">
          <source>Consider, that &lt;code&gt;bash&lt;/code&gt; is also a command. With &lt;code&gt;man bash&lt;/code&gt; you can see that there are two ways to do this:</source>
          <target state="translated">&lt;code&gt;bash&lt;/code&gt; もコマンドであると考えてください。 &lt;code&gt;man bash&lt;/code&gt; あなたはこれを行うには、2つの方法があることを確認できます。</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="ff899dcd6f7ebd6a861299e03974633bfd5ad6eb" translate="yes" xml:space="preserve">
          <source>Control+A</source>
          <target state="translated">Control+A</target>
        </trans-unit>
        <trans-unit id="c9e55fac4bb2f73b8827737eba3f6fedb7f63ad3" translate="yes" xml:space="preserve">
          <source>Control+B</source>
          <target state="translated">Control+B</target>
        </trans-unit>
        <trans-unit id="e1e40212e505bb255ad247fb75a7c69252c1147c" translate="yes" xml:space="preserve">
          <source>Control+C</source>
          <target state="translated">Control+C</target>
        </trans-unit>
        <trans-unit id="7fad1011a56dea667e4e890b0f054b35b096ceac" translate="yes" xml:space="preserve">
          <source>Control+D</source>
          <target state="translated">Control+D</target>
        </trans-unit>
        <trans-unit id="8a337ce2c51c129c9e8bc692ea6dd78eba4574de" translate="yes" xml:space="preserve">
          <source>Control+E</source>
          <target state="translated">Control+E</target>
        </trans-unit>
        <trans-unit id="19d71b4677f714637e6947b67f44a1239e3ad114" translate="yes" xml:space="preserve">
          <source>Control+F</source>
          <target state="translated">Control+F</target>
        </trans-unit>
        <trans-unit id="de4ae039698d198c307859fcbedac2883a1d1f6c" translate="yes" xml:space="preserve">
          <source>Control+K</source>
          <target state="translated">Control+K</target>
        </trans-unit>
        <trans-unit id="b263435b368ba4e5650bd91db945e54b75f37e4b" translate="yes" xml:space="preserve">
          <source>Control+L</source>
          <target state="translated">Control+L</target>
        </trans-unit>
        <trans-unit id="d930468655a2e8de99ecf073632706dc9fd790c0" translate="yes" xml:space="preserve">
          <source>Control+N</source>
          <target state="translated">Control+N</target>
        </trans-unit>
        <trans-unit id="6f5e6052e453bf4cbc730651ad83bd4c9bf16d04" translate="yes" xml:space="preserve">
          <source>Control+P</source>
          <target state="translated">Control+P</target>
        </trans-unit>
        <trans-unit id="5d54970f5eafb4a1a71ec49ea17c31b605d918b7" translate="yes" xml:space="preserve">
          <source>Control+U</source>
          <target state="translated">Control+U</target>
        </trans-unit>
        <trans-unit id="f5ce6985615ea22bf239b5f5712adbd6c7392c11" translate="yes" xml:space="preserve">
          <source>Control+V</source>
          <target state="translated">Control+V</target>
        </trans-unit>
        <trans-unit id="1c73dbe8cbdd8b0d4324b844077a83d8b67ad535" translate="yes" xml:space="preserve">
          <source>Control+W</source>
          <target state="translated">Control+W</target>
        </trans-unit>
        <trans-unit id="c312ad573f898197b4f8b8123f1e8f824522fab2" translate="yes" xml:space="preserve">
          <source>Control+X</source>
          <target state="translated">Control+X</target>
        </trans-unit>
        <trans-unit id="232d7346f91b802a342b5f2452c2d1f067dcf48a" translate="yes" xml:space="preserve">
          <source>Control+Y</source>
          <target state="translated">Control+Y</target>
        </trans-unit>
        <trans-unit id="723f6bbc308bdf50335b19533e6f0eef28ea6810" translate="yes" xml:space="preserve">
          <source>Control+Z</source>
          <target state="translated">Control+Z</target>
        </trans-unit>
        <trans-unit id="6e141812a128e9ade7d8324a0d80b50782c0a03d" translate="yes" xml:space="preserve">
          <source>Control+t</source>
          <target state="translated">Control+t</target>
        </trans-unit>
        <trans-unit id="e3cc27f9da6f6edecf17e1636fab048c5c38faaf" translate="yes" xml:space="preserve">
          <source>Copy and paste (Kill Ring)</source>
          <target state="translated">コピー&amp;ペースト(キルリング</target>
        </trans-unit>
        <trans-unit id="af4e866be52de67a1c27087ff82b1fd31d26bf20" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the</source>
          <target state="translated">外部からのコピー&amp;ペーストもサポートされています。</target>
        </trans-unit>
        <trans-unit id="26f56d23fbcc33866ced8719ced9441dcfe31145" translate="yes" xml:space="preserve">
          <source>Copy and paste from outside are also supported, both via the &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;V&lt;/b&gt; bindings and via the terminal's paste function, for which fish enables &quot;Bracketed Paste Mode&quot;. When pasting inside single quotes, pasted single quotes and backslashes are automatically escaped so that the result can be used as a single token simply by closing the quote after.</source>
          <target state="translated">外部からのコピーと貼り付けもサポートされています&lt;em&gt;。Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt; / &lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;V&lt;/b&gt;バインディングとターミナルの貼り付け機能の両方で、魚が「ブラケット貼り付けモード」を有効にします。単一引用符の内側に貼り付ける場合、貼り付けられた単一引用符とバックスラッシュは自動的にエスケープされるため、後に引用符を閉じるだけで結果を単一のトークンとして使用できます。</target>
        </trans-unit>
        <trans-unit id="5f7dd81f0f257215aaa86927e90c28289f61b85c" translate="yes" xml:space="preserve">
          <source>Copying a function using &lt;code&gt;-c&lt;/code&gt; copies only the body of the function, and does not attach any event notifications from the original function.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; を使用して関数をコピーすると、関数の本体のみがコピーされ、元の関数からのイベント通知は添付されません。</target>
        </trans-unit>
        <trans-unit id="f31494e39f0bc5dcc83282298e8d3d31f1b25880" translate="yes" xml:space="preserve">
          <source>Customizing the name of the history file</source>
          <target state="translated">履歴ファイルの名前をカスタマイズする</target>
        </trans-unit>
        <trans-unit id="362f967d51916d26cb3fb3386fd62a1f41da8b5f" translate="yes" xml:space="preserve">
          <source>Debugging fish scripts</source>
          <target state="translated">フィッシュスクリプトのデバッグ</target>
        </trans-unit>
        <trans-unit id="315274f3206d01a86dd78cefa7038f1b4d10af82" translate="yes" xml:space="preserve">
          <source>Default Shell</source>
          <target state="translated">デフォルトシェル</target>
        </trans-unit>
        <trans-unit id="0d9b8d3822abc3f61828cee574cfdd15ad494e6d" translate="yes" xml:space="preserve">
          <source>Define a single option spec for the boolean help flag:</source>
          <target state="translated">boolean helpフラグのための単一のオプション仕様を定義します。</target>
        </trans-unit>
        <trans-unit id="e80de1e5ae488060e2716016f7f8aabdda0492f6" translate="yes" xml:space="preserve">
          <source>Defining aliases</source>
          <target state="translated">エイリアスの定義</target>
        </trans-unit>
        <trans-unit id="a248cf76417fc663be9470cb1f177b04a90df2b1" translate="yes" xml:space="preserve">
          <source>Defining an abbreviation with global scope is slightly faster than universal scope (which is the default). But in general you'll only want to use the global scope when defining abbreviations in a startup script like &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; like this:</source>
          <target state="translated">グローバルスコープでの省略形の定義は、ユニバーサルスコープ（デフォルト）よりもわずかに高速です。ただし、一般に、 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ような起動スクリプトで略語を定義する場合は、次のようにグローバルスコープのみを使用します。</target>
        </trans-unit>
        <trans-unit id="f6fdbe48dc54dd86f63097a03bd24094dedd713a" translate="yes" xml:space="preserve">
          <source>Delete</source>
          <target state="translated">Delete</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="59b035367211a9382930b2a4c13637dbc33c4f32" translate="yes" xml:space="preserve">
          <source>Design</source>
          <target state="translated">Design</target>
        </trans-unit>
        <trans-unit id="866bd39fb03e1e2606544d3942b36910500aff65" translate="yes" xml:space="preserve">
          <source>Detect support for italics, dim, reverse and other modes.</source>
          <target state="translated">イタリック、ディム、リバースなどのモードのサポートを検出します。</target>
        </trans-unit>
        <trans-unit id="8d1bc9b98791a1beb71b16bbdb2e8e4cbe2fd1c7" translate="yes" xml:space="preserve">
          <source>Detected errors include:</source>
          <target state="translated">検出されたエラーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a6988a4d06cb28f2b88589d324d9330152ae8f40" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own completions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt;;</source>
          <target state="translated">サードパーティソフトウェアベンダーが自社のソフトウェアの完成品を出荷するためのディレクトリ。魚の検索でディレクトリ &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; のための環境変数 &lt;code&gt;fish/vendor_completions.d&lt;/code&gt; ディレクトリ。この変数が定義されていない場合、デフォルトでは通常 &lt;code&gt;/usr/share/fish/vendor_completions.d&lt;/code&gt; および &lt;code&gt;/usr/local/share/fish/vendor_completions.d&lt;/code&gt; が検索されます。</target>
        </trans-unit>
        <trans-unit id="aec9d653d04f24c3ef71638a5da336dde6f29983" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own configuration snippets for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt;</source>
          <target state="translated">サードパーティソフトウェアベンダーが自社のソフトウェア用に独自の構成スニペットを出荷するためのディレクトリ。魚の検索でディレクトリ &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; のための環境変数 &lt;code&gt;fish/vendor_conf.d&lt;/code&gt; ディレクトリ。この変数が定義されていない場合、デフォルトでは通常、/ &lt;code&gt;/usr/share/fish/vendor_conf.d&lt;/code&gt; / &lt;code&gt;/usr/local/share/fish/vendor_conf.d&lt;/code&gt; / fish /vendor_conf.dおよび/usr/local/share/fish/vendor_conf.dが検索されます。</target>
        </trans-unit>
        <trans-unit id="d75fce19d8009441f1839be94513635b011e4443" translate="yes" xml:space="preserve">
          <source>Directories for third-party software vendors to ship their own functions for their software. Fish searches the directories in the &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; environment variable for a &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; directory; if this variable is not defined, the default is usually to search &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; and &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt;.</source>
          <target state="translated">サードパーティソフトウェアベンダーが自社のソフトウェア用に独自の機能を出荷するためのディレクトリ。魚の検索でディレクトリ &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; のための環境変数 &lt;code&gt;fish/vendor_functions.d&lt;/code&gt; ディレクトリ。この変数が定義されていない場合、デフォルトでは通常、/ &lt;code&gt;/usr/share/fish/vendor_functions.d&lt;/code&gt; / &lt;code&gt;/usr/local/share/fish/vendor_functions.d&lt;/code&gt; / fish /vendor_functions.dおよび/usr/local/share/fish/vendor_functions.dが検索されます。</target>
        </trans-unit>
        <trans-unit id="1d9fcf2c0d627af5418ba7f9c21ee7f737ced69d" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">&lt;a href=&quot;#initialization&quot;&gt;config.fishの&lt;/a&gt;ユニバーサル変数に追加しないでください。これらの変数は、新しいシェルインスタンスごとに長くなります。代わりに、コマンドラインで一度設定するだけです。</target>
        </trans-unit>
        <trans-unit id="dee15571e38bfab40555f11f3b66434d50353195" translate="yes" xml:space="preserve">
          <source>Do not append to universal variables in &lt;a href=&quot;index#initialization&quot;&gt;config.fish&lt;/a&gt;, because these variables will then get longer with each new shell instance. Instead, simply set them once at the command line.</source>
          <target state="translated">&lt;a href=&quot;index#initialization&quot;&gt;config.fishの&lt;/a&gt;ユニバーサル変数に追加しないでください。これらの変数は、新しいシェルインスタンスごとに長くなるためです。代わりに、コマンドラインで一度設定するだけです。</target>
        </trans-unit>
        <trans-unit id="9e9cf3221a30246219863f1d2366e36cb580debc" translate="yes" xml:space="preserve">
          <source>Documentation</source>
          <target state="translated">Documentation</target>
        </trans-unit>
        <trans-unit id="fa4a7a170f7075560c98a976572cae386b13a240" translate="yes" xml:space="preserve">
          <source>E.g.</source>
          <target state="translated">E.g.</target>
        </trans-unit>
        <trans-unit id="5fe4b6029ee0d921705a5109d21de883623ecfe4" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;case&lt;/code&gt; command is given one or more parameters. The first &lt;code&gt;case&lt;/code&gt; command with a parameter that matches the string specified in the switch command will be evaluated. &lt;code&gt;case&lt;/code&gt; parameters may contain wildcards. These need to be escaped or quoted in order to avoid regular wildcard expansion using filenames.</source>
          <target state="translated">各 &lt;code&gt;case&lt;/code&gt; コマンドには、1つ以上のパラメーターが与えられます。switchコマンドで指定された文字列と一致するパラメーターを持つ最初の &lt;code&gt;case&lt;/code&gt; コマンドが評価されます。 &lt;code&gt;case&lt;/code&gt; パラメータにはワイルドカードを含めることができます。これらは、ファイル名を使用した通常のワイルドカード展開を回避するために、エスケープまたは引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="2376e9b5e9f26d5da46eadee722d0d85257f2173" translate="yes" xml:space="preserve">
          <source>Each OPTION_SPEC can be written in the domain specific language &lt;a href=&quot;#argparse-option-specs&quot;&gt;described below&lt;/a&gt; or created using the companion &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">各&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#argparse-option-specs&quot;&gt;以下で説明する&lt;/a&gt;ドメイン固有の言語で作成するか、対応するfish_optコマンドを使用して作成できます。すべてのOPTION_SPECは、argparseフラグの後、解析する引数からそれらを分離する &lt;code&gt;--&lt;/code&gt; 前に置く必要があります。</target>
        </trans-unit>
        <trans-unit id="ff6eefef0d522918fc2f6f5c0e0cbad0e9617574" translate="yes" xml:space="preserve">
          <source>Each abbreviation is stored in its own global or universal variable. The name consists of the prefix &lt;code&gt;_fish_abbr_&lt;/code&gt; followed by the WORD after being transformed by &lt;code&gt;string escape style=var&lt;/code&gt;. The WORD cannot contain a space but all other characters are legal.</source>
          <target state="translated">各省略形は、独自のグローバル変数またはユニバーサル変数に格納されます。名前は、プレフィックス &lt;code&gt;_fish_abbr_&lt;/code&gt; と、 &lt;code&gt;string escape style=var&lt;/code&gt; によって変換された後のWORDで構成されます。 WORDにスペースを含めることはできませんが、他のすべての文字は有効です。</target>
        </trans-unit>
        <trans-unit id="d74989fad97472ddc89cce17da864871ef77470f" translate="yes" xml:space="preserve">
          <source>Each option specification (&lt;code&gt;OPTION_SPEC&lt;/code&gt;) is written in the &lt;a href=&quot;#option-specifications&quot;&gt;domain specific language&lt;/a&gt; described below. All OPTION_SPECs must appear after any argparse flags and before the &lt;code&gt;--&lt;/code&gt; that separates them from the arguments to be parsed.</source>
          <target state="translated">各オプション仕様（ &lt;code&gt;OPTION_SPEC&lt;/code&gt; ）は、以下で説明する&lt;a href=&quot;#option-specifications&quot;&gt;ドメイン固有言語で&lt;/a&gt;記述されています。すべてのOPTION_SPECは、argparseフラグの後、解析対象の引数からフラグを分離する &lt;code&gt;--&lt;/code&gt; 前に表示する必要があります。</target>
        </trans-unit>
        <trans-unit id="0057637534d28604b43896d07253a1705495ce04" translate="yes" xml:space="preserve">
          <source>Each option specification is a string composed of</source>
          <target state="translated">各オプション指定は</target>
        </trans-unit>
        <trans-unit id="6f81b2ad5664bf03465a7658ea6e8325e7d4da48" translate="yes" xml:space="preserve">
          <source>Each option that is seen in the ARG list will result in a var name of the form &lt;code&gt;_flag_X&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is the short flag letter and the long flag name. The OPTION_SPEC always requires a short flag even if it can't be used. So there will always be &lt;code&gt;_flag_X&lt;/code&gt; var set using the short flag letter if the corresponding short or long flag is seen. The long flag name var (e.g., &lt;code&gt;_flag_help&lt;/code&gt;) will only be defined, obviously, if the OPTION_SPEC includes a long flag name.</source>
          <target state="translated">ARGリストに表示される各オプションは、 &lt;code&gt;_flag_X&lt;/code&gt; という形式のvar名になります。ここで、 &lt;code&gt;X&lt;/code&gt; は短いフラグ文字と長いフラグ名です。OPTION_SPECは、使用できない場合でも、常に短いフラグが必要です。したがって、対応する短いフラグまたは長いフラグが表示される場合、短いフラグ文字を使用して &lt;code&gt;_flag_X&lt;/code&gt; var が常に設定されます。長いフラグ名var（例： &lt;code&gt;_flag_help&lt;/code&gt; ）は、OPTION_SPECに長いフラグ名が含まれている場合にのみ定義されます。</target>
        </trans-unit>
        <trans-unit id="071ccbc08889857d3dcdf38731f768b6399d8db1" translate="yes" xml:space="preserve">
          <source>Edit the file &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;, creating it if it does not exist (Note the leading period).</source>
          <target state="translated">ファイル &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 編集し、存在しない場合は作成します（先頭のピリオドに注意してください）。</target>
        </trans-unit>
        <trans-unit id="c2f792ffbea95a6ff2321be7a5cc814288648907" translate="yes" xml:space="preserve">
          <source>Emacs mode commands</source>
          <target state="translated">Emacs モードコマンド</target>
        </trans-unit>
        <trans-unit id="e37e0760e90e51eeb2c376daa6dc4d1540039d7b" translate="yes" xml:space="preserve">
          <source>Enable 24-bit (&quot;true-color&quot;) even if the $TERM entry only reports 256 colors. This includes modern xterm, VTE-based terminals like Gnome Terminal, Konsole and iTerm2.</source>
          <target state="translated">24 ビット (「トゥルーカラー」)を有効にします。これには、Gnome Terminal、Konsole、iTerm2 のような最新の xterm、VTE ベースの端末が含まれます。</target>
        </trans-unit>
        <trans-unit id="f2e2f09ac368b8dd74db605df791dbefe19bfe80" translate="yes" xml:space="preserve">
          <source>Enable 256 colors if $TERM contains &quot;xterm&quot;, except for known exceptions (like MacOS 10.6 Terminal.app)</source>
          <target state="translated">既知の例外(MacOS 10.6 Terminal.appなど)を除き、$TERMに &quot;xterm &quot;が含まれている場合に256色を有効にします。</target>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="2b9eceb7a86a9f577ef80586c5c1d7fde9ff493d" translate="yes" xml:space="preserve">
          <source>Enter</source>
          <target state="translated">Enter</target>
        </trans-unit>
        <trans-unit id="ec051ec1637eae870268ca59dd86fdb39e8d550c" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;exit&lt;/code&gt; to exit a fish shell:</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; を入力して魚の殻を終了します。</target>
        </trans-unit>
        <trans-unit id="7c9220e6e7b88faa6f56901c8353dec4b3544958" translate="yes" xml:space="preserve">
          <source>Enter &lt;code&gt;fish&lt;/code&gt; to start a fish shell:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; を入力して魚の殻を開始します。</target>
        </trans-unit>
        <trans-unit id="91cbf01f5e4c3a57e74bdd072bfdd05853b57d91" translate="yes" xml:space="preserve">
          <source>Environment variables such as &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;TZ&lt;/code&gt; can be set universally using &lt;code&gt;set -Ux&lt;/code&gt;. However, if there is an environment variable already set before fish starts (such as by login scripts or system administrators), it is imported into fish as a global variable. The &lt;a href=&quot;index#variables-scope&quot;&gt;variable scopes&lt;/a&gt; are searched from the &quot;inside out&quot;, which means that local variables are checked first, followed by global variables, and finally universal variables.</source>
          <target state="translated">&lt;code&gt;EDITOR&lt;/code&gt; や &lt;code&gt;TZ&lt;/code&gt; などの環境変数は、 &lt;code&gt;set -Ux&lt;/code&gt; を使用して汎用的に設定できます。ただし、（ログインスクリプトやシステム管理者などによって）fishが起動する前にすでに設定されている環境変数がある場合は、グローバル変数としてfishにインポートされます。&lt;a href=&quot;index#variables-scope&quot;&gt;変数のスコープは&lt;/a&gt;グローバル変数、そして最終的に普遍的変数に続いて、ローカル変数が最初にチェックされていることを意味し、「裏返し」から検索されます。</target>
        </trans-unit>
        <trans-unit id="91fe509047635fbdbcb723577a02003cc2cfa678" translate="yes" xml:space="preserve">
          <source>Erase the &lt;code&gt;gco&lt;/code&gt; abbreviation.</source>
          <target state="translated">&lt;code&gt;gco&lt;/code&gt; の省略形を消去します。</target>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="3e13e2405c74a25265ee4e281ccf78feafc5234d" translate="yes" xml:space="preserve">
          <source>Escape Sequences</source>
          <target state="translated">脱出シーケンス</target>
        </trans-unit>
        <trans-unit id="99b19a8ca89a3f1d945ac43f31bfc30845d9b033" translate="yes" xml:space="preserve">
          <source>Escaping characters</source>
          <target state="translated">文字をエスケープする</target>
        </trans-unit>
        <trans-unit id="b5df4081fbed4b9e32929d5db8ab7dee3db26c47" translate="yes" xml:space="preserve">
          <source>Especially powerful is the recursive wildcard ** which searches directories recursively:</source>
          <target state="translated">特に強力なのは、ディレクトリを再帰的に検索する再帰的ワイルドカード**です。</target>
        </trans-unit>
        <trans-unit id="23467b26d86b98db62af718c7193952aae1cc1d7" translate="yes" xml:space="preserve">
          <source>Event blocks should not be confused with code blocks, which are created with &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;for&lt;/code&gt;</source>
          <target state="translated">イベントブロックは、 &lt;code&gt;begin&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; で作成されたコードブロックと混同しないでください。</target>
        </trans-unit>
        <trans-unit id="1d0a0bc46dabda5a6dbcf0a2f18e3e9acbc27ae7" translate="yes" xml:space="preserve">
          <source>Event handlers</source>
          <target state="translated">イベントハンドラ</target>
        </trans-unit>
        <trans-unit id="f4b281b637c899622427e67191026015a7018908" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;, you can just use the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">コンピューター上のすべてのプログラムは、 &lt;code&gt;fish&lt;/code&gt; のコマンドとして使用できます。プログラムファイルが&lt;a href=&quot;#path&quot;&gt;PATH&lt;/a&gt;のディレクトリの1つにある場合は、プログラムの名前を使用するだけで使用できます。それ以外の場合は、ディレクトリ（ &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; や &lt;code&gt;../checkers&lt;/code&gt; など）を含むファイル名全体を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa9019553b784d6ddae2179d0e63e658c8aaa8e2" translate="yes" xml:space="preserve">
          <source>Every program on your computer can be used as a command in &lt;code&gt;fish&lt;/code&gt;. If the program file is located in one of the directories in the &lt;a href=&quot;#variables-special&quot;&gt;&lt;code&gt;PATH&lt;/code&gt;&lt;/a&gt;, it is sufficient to type the name of the program to use it. Otherwise the whole filename, including the directory (like &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; or &lt;code&gt;../checkers&lt;/code&gt;) has to be used.</source>
          <target state="translated">コンピュータ上のすべてのプログラムは、 &lt;code&gt;fish&lt;/code&gt; のコマンドとして使用できます。プログラムファイルが&lt;a href=&quot;#variables-special&quot;&gt; &lt;code&gt;PATH&lt;/code&gt; の&lt;/a&gt;いずれかのディレクトリにある場合は、使用するプログラムの名前を入力するだけで十分です。それ以外の場合は、ディレクトリを含むファイル名全体（ &lt;code&gt;/home/me/code/checkers/checkers&lt;/code&gt; または &lt;code&gt;../checkers&lt;/code&gt; など）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="0a06b9ff910c3b825724cca9441830ef76df9a35" translate="yes" xml:space="preserve">
          <source>Example OPTION_SPECs</source>
          <target state="translated">OPTION_SPECs の例</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="39080033040f19165a1f736af78b4c8c529fc254" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; writes the standard error (file descriptor 2) of the target program to &lt;code&gt;output.stderr&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;echo Hello 2&amp;gt;output.stderr&lt;/code&gt; は、ターゲットプログラムの標準エラー（ファイル記述子2）を &lt;code&gt;output.stderr&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="c8110d9d9732f81a1889221cf14a72d9940e55f1" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is</source>
          <target state="translated">例：デフォルトの &lt;code&gt;fish&lt;/code&gt; タイトルは</target>
        </trans-unit>
        <trans-unit id="c5e62bdf9f1ee420f1e3180e55a6897fe87ce1fa" translate="yes" xml:space="preserve">
          <source>Examples: The default &lt;code&gt;fish&lt;/code&gt; title is:</source>
          <target state="translated">例：デフォルトの &lt;code&gt;fish&lt;/code&gt; タイトルは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4bdd412ed55970d8c42f39658c01cd285bb57d07" translate="yes" xml:space="preserve">
          <source>Executing Bash</source>
          <target state="translated">バッシュの実行</target>
        </trans-unit>
        <trans-unit id="6f147bbcdc2ea57f6c81bec669ec536b253dc54b" translate="yes" xml:space="preserve">
          <source>Exit Status</source>
          <target state="translated">終了ステータス</target>
        </trans-unit>
        <trans-unit id="1065b589e5e0ae74c7584c46d689bcbb003ff11c" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one match was found, or 1 otherwise.</source>
          <target state="translated">終了ステータス。少なくとも1つの一致が見つかった場合は0、そうでない場合は1。</target>
        </trans-unit>
        <trans-unit id="b2909c6aa462276dc2976f4590aa354f4c57270d" translate="yes" xml:space="preserve">
          <source>Exit status: 0 if at least one replacement was performed, or 1 otherwise.</source>
          <target state="translated">終了ステータス。少なくとも1回の交換が行われた場合は0、そうでない場合は1。</target>
        </trans-unit>
        <trans-unit id="f40c28bc81b3ac548eb788aebd329d84f2e392e8" translate="yes" xml:space="preserve">
          <source>Expansions are performed from right to left, nested bracket expansions are performed from the inside and out.</source>
          <target state="translated">展開は右から左へ、入れ子になったブラケットの展開は内側と外側から行います。</target>
        </trans-unit>
        <trans-unit id="7c7f2508b14ff7696fb2b861af3336c89a128135" translate="yes" xml:space="preserve">
          <source>Exporting variables</source>
          <target state="translated">変数のエクスポート</target>
        </trans-unit>
        <trans-unit id="0801a7e9fc76ea024d7fa1606839a9a450923131" translate="yes" xml:space="preserve">
          <source>Exports (Shell Variables)</source>
          <target state="translated">エクスポート (シェル変数)</target>
        </trans-unit>
        <trans-unit id="38a8db4fbe3933a6a062a148af12ac9a1f3f9209" translate="yes" xml:space="preserve">
          <source>Expressions can be grouped using parentheses.</source>
          <target state="translated">括弧を使って式をグループ化することができます。</target>
        </trans-unit>
        <trans-unit id="50167d66b3a9cf84672e9543b5e003cb2f61fc18" translate="yes" xml:space="preserve">
          <source>Expressions can be inverted using the &lt;code&gt;!&lt;/code&gt; operator:</source>
          <target state="translated">式は &lt;code&gt;!&lt;/code&gt; オペレーター：</target>
        </trans-unit>
        <trans-unit id="88bfad9cfffeafd299a44d4daf979d57419a2621" translate="yes" xml:space="preserve">
          <source>F1</source>
          <target state="translated">F1</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="3c018849599639ed880ecf71dd0372a59354f058" translate="yes" xml:space="preserve">
          <source>Feature flags are how fish stages changes that might break scripts. Breaking changes are introduced as opt-in, in a few releases they become opt-out, and eventually the old behavior is removed.</source>
          <target state="translated">フィーチャーフラグは、スクリプトを壊す可能性のある変更を魚がどのように段階的に行うかを示すものです。ブレークの変更はオプトインとして導入され、いくつかのリリースではオプトアウトになり、最終的には古い動作が削除されます。</target>
        </trans-unit>
        <trans-unit id="91eda957829d54470152a860d403a0c2ec63f6ad" translate="yes" xml:space="preserve">
          <source>Features will only be set on startup, so this variable will only take effect if it is universal or exported.</source>
          <target state="translated">機能は起動時にのみ設定されるので、この変数はユニバーサルかエクスポートされた場合にのみ有効になります。</target>
        </trans-unit>
        <trans-unit id="6f3b1d58c2c3684624549238c3096df48948b49f" translate="yes" xml:space="preserve">
          <source>File names beginning with a dot are not considered when wildcarding unless a dot is specifically given as the first character of the file name.</source>
          <target state="translated">ドットで始まるファイル名は、ドットがファイル名の最初の文字として特別に与えられていない限り、ワイルドカード化の際には考慮されません。</target>
        </trans-unit>
        <trans-unit id="af0ad57826714745555d33e260f6c852d7a62f1f" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt;, which can be used to change the order the status symbols appear in. It defaults to &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;$fish_prompt_hg_status_order&lt;/code&gt; は、ステータスシンボルが表示される順序を変更するために使用できます。デフォルトでは、 &lt;code&gt;added modified copied deleted untracked unmerged&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3030e8ec7633ec1a524bb246aee7dbda6fb3e4bc" translate="yes" xml:space="preserve">
          <source>Fish</source>
          <target state="translated">Fish</target>
        </trans-unit>
        <trans-unit id="5909556c20378f696dc6b5d2bbc3049c7584a774" translate="yes" xml:space="preserve">
          <source>Fish 1.x and 2.x releases relied on the &lt;code&gt;bc&lt;/code&gt; command for handling &lt;code&gt;math&lt;/code&gt; expressions. Starting with fish 3.0.0 fish uses the tinyexpr library and evaluates the expression without the involvement of any external commands.</source>
          <target state="translated">Fish 1.xおよび2.xリリースは、 &lt;code&gt;math&lt;/code&gt; を処理するために &lt;code&gt;bc&lt;/code&gt; コマンドに依存していました。fish 3.0.0以降、fishはtinyexprライブラリを使用し、外部コマンドを使用せずに式を評価します。</target>
        </trans-unit>
        <trans-unit id="d4a3ceecfb0465a0d21d2606941b69ac151cca20" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the -a switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、-aスイッチを使用してすべての値を報告することを除いて、1つのコマンドで複数の制限を取得または設定することをサポートしていません</target>
        </trans-unit>
        <trans-unit id="e6c6518383d134aea4779743a6d5eae0eb949f57" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support getting or setting multiple limits in one command, except reporting all values using the &lt;code&gt;-a&lt;/code&gt; switch</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、 &lt;code&gt;-a&lt;/code&gt; スイッチを使用してすべての値を報告することを除いて、1つのコマンドで複数の制限を取得または設定することをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="e7c76c63bac2f3a3dce3482676369a7bd163b6c4" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; does not support the &lt;code&gt;-p&lt;/code&gt; option for getting the pipe size. The bash implementation consists of a compile-time check that empirically guesses this number by writing to a pipe and waiting for SIGPIPE. Fish does not do this because it this method of determining pipe size is unreliable. Depending on bash version, there may also be further additional limits to set in bash that do not exist in fish.</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、パイプサイズを取得するための &lt;code&gt;-p&lt;/code&gt; オプションをサポートしていません。bashの実装は、パイプに書き込んでSIGPIPEを待機することにより、この数を経験的に推測するコンパイル時チェックで構成されています。パイプサイズを決定するこの方法は信頼できないため、Fishはこれを行いません。bashのバージョンによっては、bashに設定する追加の制限が魚には存在しない場合もあります。</target>
        </trans-unit>
        <trans-unit id="78c7f05d7bd695376d2e5d1faac7303134fd849d" translate="yes" xml:space="preserve">
          <source>Fish &lt;code&gt;ulimit&lt;/code&gt; supports GNU-style long options for all switches</source>
          <target state="translated">Fish &lt;code&gt;ulimit&lt;/code&gt; は、すべてのスイッチでGNUスタイルの長いオプションをサポートします</target>
        </trans-unit>
        <trans-unit id="fc7af48505888290815037487d5b7785010a5982" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">組み込みの周りの魚も船ラッパー関数を &lt;code&gt;cd&lt;/code&gt; 理解 &lt;code&gt;cd -&lt;/code&gt; 前のディレクトリに変更など。&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;も参照してください。このラッパー関数は、 &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; グローバル変数に最近アクセスした25個のディレクトリの履歴を保持します。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚インスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="12b0ee984ffaac831e52ed6b850d4b525b13beed" translate="yes" xml:space="preserve">
          <source>Fish also ships a wrapper function around the builtin &lt;code&gt;cd&lt;/code&gt; that understands &lt;code&gt;cd -&lt;/code&gt; as changing to the previous directory. See also &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;. This wrapper function maintains a history of the 25 most recently visited directories in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; global variables. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">Fishは、 &lt;code&gt;cd&lt;/code&gt; を理解する組み込みCDのラッパー関数も出荷します &lt;code&gt;cd -&lt;/code&gt; 前のディレクトリに変更するものとして。&lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;も参照してください。このラッパー関数は、最近アクセスした25個のディレクトリの履歴を &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; グローバル変数に保持します。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚のインスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="8e7b1872333b58f5f95b5e7bec0c0e9e258507d3" translate="yes" xml:space="preserve">
          <source>Fish automatically searches through any directories in the array variable &lt;code&gt;$fish_function_path&lt;/code&gt;, and any functions defined are automatically loaded when needed. A function definition file must have a filename consisting of the name of the function plus the suffix '&lt;code&gt;.fish&lt;/code&gt;'.</source>
          <target state="translated">Fishは、配列変数 &lt;code&gt;$fish_function_path&lt;/code&gt; 内のすべてのディレクトリを自動的に検索し、定義された関数は必要に応じて自動的にロードされます。関数定義ファイルには、関数の名前とサフィックス ' &lt;code&gt;.fish&lt;/code&gt; 'で構成されるファイル名が必要です。</target>
        </trans-unit>
        <trans-unit id="fea3d198c56b137efabf4e3b3479e7ecb043e65b" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 10 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">Fishのデフォルトの制限は、コマンド置換が出力できるデータ量に10 MiBです。制限を超えると、置換だけでなくコマンド全体が失敗し、 &lt;code&gt;$status&lt;/code&gt; は122に設定されます &lt;code&gt;fish_read_limit&lt;/code&gt; が実行を開始する前の環境を含め、いつでもfish_read_limit変数を設定することで制限を変更できます。ゼロに設定すると、制限は課されません。これは、コマンドが不当な量のデータを出力した場合にシェルがメモリを過剰に消費しないようにするための安全メカニズムです。この制限は、 &lt;code&gt;read&lt;/code&gt; コマンドが処理するデータ量にも影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="54736c0f7b81ae71b6647b4c6a7582c080363c9c" translate="yes" xml:space="preserve">
          <source>Fish has a default limit of 100 MiB on the amount of data a command substitution can output. If the limit is exceeded the entire command, not just the substitution, is failed and &lt;code&gt;$status&lt;/code&gt; is set to 122. You can modify the limit by setting the &lt;code&gt;fish_read_limit&lt;/code&gt; variable at any time including in the environment before fish starts running. If you set it to zero then no limit is imposed. This is a safety mechanism to keep the shell from consuming too much memory if a command outputs an unreasonable amount of data, typically your operating system also has a limit, and it's often much lower. Note that this limit also affects how much data the &lt;code&gt;read&lt;/code&gt; command will process.</source>
          <target state="translated">Fishには、コマンド置換で出力できるデータ量のデフォルトの制限が100MiBです。制限を超えると、置換だけでなくコマンド全体が失敗し、 &lt;code&gt;$status&lt;/code&gt; が122に設定されます &lt;code&gt;fish_read_limit&lt;/code&gt; 変数を設定することで、魚が走り始める前の環境を含め、いつでも制限を変更できます。ゼロに設定すると、制限は課されません。これは、コマンドが不当な量のデータを出力する場合にシェルがメモリを過剰に消費しないようにするための安全メカニズムです。通常、オペレーティングシステムにも制限があり、多くの場合、はるかに少なくなります。この制限は、 &lt;code&gt;read&lt;/code&gt; コマンドが処理するデータの量にも影響することに注意してください。</target>
        </trans-unit>
        <trans-unit id="7e69e47a187b17aecb51ad4dc34104e0787069fe" translate="yes" xml:space="preserve">
          <source>Fish history recall is very simple yet effective:</source>
          <target state="translated">魚史のリコールは非常にシンプルでありながら効果的です。</target>
        </trans-unit>
        <trans-unit id="edcb6e0e99c1d29dcec8762593402a5b7fe687c4" translate="yes" xml:space="preserve">
          <source>Fish includes a built in debugging facility. The debugger allows you to stop execution of a script at an arbitrary point. When this happens you are presented with an interactive prompt. At this prompt you can execute any fish command (there are no debug commands as such). For example, you can check or change the value of any variables using &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt;. As another example, you can run &lt;code&gt;status print-stack-trace&lt;/code&gt; to see how this breakpoint was reached. To resume normal execution of the script, simply type &lt;code&gt;exit&lt;/code&gt; or [ctrl-D].</source>
          <target state="translated">Fishには、組み込みのデバッグ機能が含まれています。デバッガーを使用すると、スクリプトの実行を任意の時点で停止できます。これが発生すると、インタラクティブなプロンプトが表示されます。このプロンプトでは、任意のfishコマンドを実行できます（そのようなdebugコマンドはありません）。たとえば、 &lt;code&gt;printf&lt;/code&gt; と &lt;code&gt;set&lt;/code&gt; を使用して、変数の値を確認または変更できます。別の例として、 &lt;code&gt;status print-stack-trace&lt;/code&gt; を実行して、このブレークポイントに到達した方法を確認できます。スクリプトの通常の実行を再開するには、単に &lt;code&gt;exit&lt;/code&gt; または[ctrl-D]と入力します。</target>
        </trans-unit>
        <trans-unit id="c9861432c24cc69aa9bbe8d00780f47c35cceca6" translate="yes" xml:space="preserve">
          <source>Fish is trying to set the titlebar message of your terminal. While screen itself supports this feature, your terminal does not. Unfortunately, when the underlying terminal doesn't support setting the titlebar, screen simply passes through the escape codes and text to the underlying terminal instead of ignoring them. It is impossible to detect and resolve this problem from inside fish since fish has no way of knowing what the underlying terminal type is. For now, the only way to fix this is to unset the titlebar message, as suggested above.</source>
          <target state="translated">Fishはお使いの端末のタイトルバーのメッセージを設定しようとしています。screen 自体はこの機能をサポートしていますが、あなたの端末はサポートしていません。残念なことに、基礎となる端末がタイトルバーの設定をサポートしていない場合、スクリーンは単にエスケープコードとテキストを無視する代わりに、基礎となる端末に渡してしまいます。この問題を fish の内部から検出して解決することは不可能です。今のところ、この問題を解決する唯一の方法は、上記のようにタイトルバーのメッセージの設定を解除することです。</target>
        </trans-unit>
        <trans-unit id="48abc65b03d1fc064fb747f8eca57f5ceb3027c8" translate="yes" xml:space="preserve">
          <source>Fish prides itself on being really nice to use interactively. That's down to a few features we'll explain in the next few sections.</source>
          <target state="translated">Fishは対話的に使えることを誇りにしています。それは次のセクションで説明するいくつかの機能によるものです。</target>
        </trans-unit>
        <trans-unit id="3524f17824fc111784e6c17c1c783f4774ba70aa" translate="yes" xml:space="preserve">
          <source>Fish reserves the &lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicode private-use character range&lt;/a&gt; from U+F600 thru U+F73F for internal use. Any attempt to feed characters in that range to fish will result in them being replaced by the Unicode &quot;replacement character&quot; U+FFFD. This includes both interactive input as well as any file read by fish (but not programs run by fish).</source>
          <target state="translated">Fishは、内部使用のためにU + F600からU + F73Fまでの&lt;a href=&quot;http://www.unicode.org/faq/private_use.html&quot;&gt;Unicodeの私用文字範囲&lt;/a&gt;を予約しています。その範囲の文字を魚にフィードしようとすると、Unicodeの「置換文字」U + FFFDに置き換えられます。これには、インタラクティブな入力と、fishが読み取ったファイル（fishが実行するプログラムは除く）の両方が含まれます。</target>
        </trans-unit>
        <trans-unit id="88f9fa16272ceb2f6496c15e10a64756c22612c9" translate="yes" xml:space="preserve">
          <source>Fish ships with a &lt;code&gt;_validate_int&lt;/code&gt; function that accepts a &lt;code&gt;--min&lt;/code&gt; and &lt;code&gt;--max&lt;/code&gt; flag. Let's say your command accepts a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;--max&lt;/code&gt; flag and the minimum allowable value is zero and the maximum is 5. You would define the option like this: &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt;. The default if you just call &lt;code&gt;_validate_int&lt;/code&gt; without those flags is to simply check that the value is a valid integer with no limits on the min or max value allowed.</source>
          <target state="translated">Fishには、 &lt;code&gt;--min&lt;/code&gt; および &lt;code&gt;--max&lt;/code&gt; フラグを受け入れる &lt;code&gt;_validate_int&lt;/code&gt; 関数が付属しています。コマンドが &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;--max&lt;/code&gt; フラグを受け入れ、最小許容値がゼロで最大値が5であるとしましょう。オプションは次のように定義します： &lt;code&gt;m/max=!_validate_int --min 0 --max 5&lt;/code&gt; 。これらのフラグなしで &lt;code&gt;_validate_int&lt;/code&gt; を呼び出す場合のデフォルトは、値が有効な整数であることを単にチェックすることです。許可されている最小値または最大値に制限はありません。</target>
        </trans-unit>
        <trans-unit id="da8d10a7f6f5ff6e0088c4b12f7c811ff075340b" translate="yes" xml:space="preserve">
          <source>Fish stores the exit status of the last process in the last job to exit in the &lt;code&gt;status&lt;/code&gt; variable.</source>
          <target state="translated">Fishは、最後のジョブの最後のプロセスの終了ステータスを &lt;code&gt;status&lt;/code&gt; 変数に格納します。</target>
        </trans-unit>
        <trans-unit id="c7cac64314e5cd1f9679e120b4ee08809136ee30" translate="yes" xml:space="preserve">
          <source>Fish uses a heuristic to decide if a terminal supports the 256-color palette as opposed to the more limited 16 color palette of older terminals. Support can be forced on by setting &lt;code&gt;fish_term256&lt;/code&gt; to &lt;em&gt;1&lt;/em&gt;. If &lt;code&gt;$TERM&lt;/code&gt; contains &quot;256color&quot; (e.g., &lt;em&gt;xterm-256color&lt;/em&gt;), 256-color support is enabled. If &lt;code&gt;$TERM&lt;/code&gt; contains &lt;em&gt;xterm&lt;/em&gt;, 256 color support is enabled (except for MacOS: &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; and &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; are used to detect Terminal.app from MacOS 10.6; support is disabled here it because it is known that it reports &lt;code&gt;xterm&lt;/code&gt; and only supports 16 colors.</source>
          <target state="translated">Fishはヒューリスティックを使用して、端末が古い端末の制限された16色パレットとは対照的に256色パレットをサポートするかどうかを決定します。 &lt;code&gt;fish_term256&lt;/code&gt; を&lt;em&gt;1に&lt;/em&gt;設定すると、サポートを強制できます。 &lt;code&gt;$TERM&lt;/code&gt; に「256color」が含まれている場合（例：&lt;em&gt;xterm-256color&lt;/em&gt;）、256色のサポートが有効になります。 &lt;code&gt;$TERM&lt;/code&gt; に&lt;em&gt;xterm&lt;/em&gt;が含まれている場合、256色のサポートが有効になります（MacOSを除く： &lt;code&gt;$TERM_PROGRAM&lt;/code&gt; および &lt;code&gt;$TERM_PROGRAM_VERSION&lt;/code&gt; はMacOS 10.6からのTerminal.appの検出に使用されます &lt;code&gt;xterm&lt;/code&gt; を報告し、16色のみをサポートすることがわかっているため、ここではサポートが無効になっています。 。</target>
        </trans-unit>
        <trans-unit id="c4a7c4e0f6011c5a6723f630fd3d21a3dda63de9" translate="yes" xml:space="preserve">
          <source>Fish uses some heuristics to determine what colors a terminal supports to avoid sending sequences that it won't understand.</source>
          <target state="translated">Fish は、端末が理解できないシーケンスの送信を避けるために、端末がどの色をサポートしているかを判断するためにいくつかのヒューリスティックスを使用しています。</target>
        </trans-unit>
        <trans-unit id="4a8a4a4f82444a104a993e27513d536247c816d1" translate="yes" xml:space="preserve">
          <source>Fish versions prior to 3.0 supported the syntax &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt;, which worked like &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt;. This syntax was not widely used, and was ambiguous and inconsistent.</source>
          <target state="translated">3.0より前のバージョンのFishでは、構文 &lt;code&gt;set PATH[1] PATH[4] /bin /sbin&lt;/code&gt; サポートされていました。これは、 &lt;code&gt;set PATH[1 4] /bin /sbin&lt;/code&gt; 。この構文は広く使用されておらず、あいまいで一貫性がありませんでした。</target>
        </trans-unit>
        <trans-unit id="0d57bd5497ca26a92593094bf3e21c5097192fa3" translate="yes" xml:space="preserve">
          <source>Fisher</source>
          <target state="translated">Fisher</target>
        </trans-unit>
        <trans-unit id="cc39950b13a6699fa5b10206f558fe0ba567276b" translate="yes" xml:space="preserve">
          <source>Fisherman</source>
          <target state="translated">Fisherman</target>
        </trans-unit>
        <trans-unit id="cde1c030202177b2bb85ac304db8a66513736e41" translate="yes" xml:space="preserve">
          <source>Flag Value Validation</source>
          <target state="translated">フラグ値検証</target>
        </trans-unit>
        <trans-unit id="536cf03606fa94ae7d859eed9d77e1d3116f6703" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;#toc-commands&quot;&gt;table of contents&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">fishに付属するすべての組み込み関数、関数、およびコマンドのリストについては、&lt;a href=&quot;#toc-commands&quot;&gt;目次を&lt;/a&gt;参照してください。ドキュメントは、コマンドの &lt;code&gt;--help&lt;/code&gt; スイッチを使用して入手することもできます。</target>
        </trans-unit>
        <trans-unit id="9a673697effebecadd2ef2ada0c2ba216bf82e8c" translate="yes" xml:space="preserve">
          <source>For a list of all builtins, functions and commands shipped with fish, see the &lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;list of commands&lt;/a&gt;. The documentation is also available by using the &lt;code&gt;--help&lt;/code&gt; switch of the command.</source>
          <target state="translated">fishに付属しているすべての組み込み関数、関数、およびコマンドの&lt;a href=&quot;https://fishshell.com/docs/3.1/commands.html#commands&quot;&gt;リスト&lt;/a&gt;については、コマンドのリストを参照してください。このドキュメントは、コマンドの &lt;code&gt;--help&lt;/code&gt; スイッチを使用して入手することもできます。</target>
        </trans-unit>
        <trans-unit id="9801e7760d7e9e8e7b2ff4da2f4e2bbcb3cd8d9c" translate="yes" xml:space="preserve">
          <source>For a script, written in another language, just replace the interpreter &lt;code&gt;/bin/bash&lt;/code&gt; with the language interpreter of that other language (for example &lt;code&gt;/bin/python&lt;/code&gt; for a &lt;code&gt;python&lt;/code&gt; script)</source>
          <target state="translated">別の言語で記述されたスクリプトの場合、インタープリター &lt;code&gt;/bin/bash&lt;/code&gt; をその別の言語の言語インタープリターに置き換えるだけです（たとえば、 &lt;code&gt;python&lt;/code&gt; スクリプトの場合は &lt;code&gt;/bin/python&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="3e1ee97cd1a141aa861292be516e6d2fafba3b56" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;../index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">補完の指定の概要については、魚のマニュアルで&lt;a href=&quot;../index#completion-own&quot;&gt;独自の補完&lt;/a&gt;を作成するを参照してください。</target>
        </trans-unit>
        <trans-unit id="aac657fdcd353fd4213af492e11d8fa1236e727e" translate="yes" xml:space="preserve">
          <source>For an introduction to specifying completions, see &lt;a href=&quot;index#completion-own&quot;&gt;Writing your own completions&lt;/a&gt; in the fish manual.</source>
          <target state="translated">補完の指定の概要については、魚のマニュアルの&lt;a href=&quot;index#completion-own&quot;&gt;独自の補完の記述を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="97f70256424cd43141b91b58c2edd81b6e14a061" translate="yes" xml:space="preserve">
          <source>For backwards compatibility each subcommand can also be specified as a long or short option. For example, rather than &lt;code&gt;status is-login&lt;/code&gt; you can type &lt;code&gt;status --is-login&lt;/code&gt;. The flag forms are deprecated and may be removed in a future release (but not before fish 3.0).</source>
          <target state="translated">下位互換性のために、各サブコマンドを長いオプションまたは短いオプションとして指定することもできます。たとえば、のではなく &lt;code&gt;status is-login&lt;/code&gt; 次のように入力することができ &lt;code&gt;status --is-login&lt;/code&gt; 。フラグフォームは非推奨であり、将来のリリースで削除される可能性があります（ただし、fish 3.0以前では削除されません）。</target>
        </trans-unit>
        <trans-unit id="71cbfbc301ab062537c3b9d9149d9aa54102b0b9" translate="yes" xml:space="preserve">
          <source>For basic compatibility with POSIX &lt;code&gt;command&lt;/code&gt;, the &lt;code&gt;-v&lt;/code&gt; flag is recognized as an alias for &lt;code&gt;-s&lt;/code&gt;.</source>
          <target state="translated">POSIX &lt;code&gt;command&lt;/code&gt; との基本的な互換性のために、 &lt;code&gt;-v&lt;/code&gt; フラグは &lt;code&gt;-s&lt;/code&gt; のエイリアスとして認識されます。</target>
        </trans-unit>
        <trans-unit id="b73ea6d75946436551604661ce1b9a165a45dd07" translate="yes" xml:space="preserve">
          <source>For checking timing after a command has completed, check &lt;a href=&quot;../index#variables-special&quot;&gt;$CMD_DURATION&lt;/a&gt;.</source>
          <target state="translated">コマンド完了後のタイミングを確認するには、&lt;a href=&quot;../index#variables-special&quot;&gt;$ CMD_DURATIONを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="e40b055eb7098645342eba3f6a6c092eb71628f1" translate="yes" xml:space="preserve">
          <source>For compatibility with other shells and external commands, $PATH is a &lt;a href=&quot;index#variables-path&quot;&gt;path variable&lt;/a&gt;, and so will be joined with colons (not spaces) when you quote it:</source>
          <target state="translated">他のシェルや外部コマンドとの互換性のために、$ PATHは&lt;a href=&quot;index#variables-path&quot;&gt;パス変数&lt;/a&gt;であるため、引用符で囲むとコロン（スペースではなく）で結合されます。</target>
        </trans-unit>
        <trans-unit id="fa3cc4b28c62019a96ce74d02cd7c54d07452b42" translate="yes" xml:space="preserve">
          <source>For even more complex conditions, use &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; to group parts of them.</source>
          <target state="translated">さらに複雑な条件の場合は、 &lt;code&gt;begin&lt;/code&gt; および &lt;code&gt;end&lt;/code&gt; を使用してそれらの一部をグループ化します。</target>
        </trans-unit>
        <trans-unit id="2ffbc75d40d5f17483c5a32a91dae37e401b6f2b" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, does not have an associated value) the values are the short and long flags seen. If the option is not a boolean flag the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">たとえば、 &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; が &lt;code&gt;_flag_help&lt;/code&gt; 場合の &lt;code&gt;_flag_h&lt;/code&gt; および_flag_help。 varはローカルスコープで設定されます（つまり、スクリプトが &lt;code&gt;set -l _flag_X&lt;/code&gt; を実行したかのように）。フラグがブール値の場合（つまり、値が関連付けられていない場合）、値は表示される短いフラグと長いフラグです。オプションがブールフラグでない場合、値は、ARGリストの処理時に収集された値に対応するゼロ以上の値になります。フラグが表示されなかった場合、フラグvarは設定されません。</target>
        </trans-unit>
        <trans-unit id="88a5cf27ff84d1f00030e64d1e499179b84cb53e" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;_flag_h&lt;/code&gt; and &lt;code&gt;_flag_help&lt;/code&gt; if &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; is seen. The var will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag var will not be set.</source>
          <target state="translated">たとえば、 &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; が &lt;code&gt;_flag_help&lt;/code&gt; 場合は、 &lt;code&gt;_flag_h&lt;/code&gt; および_flag_help。varはローカルスコープで設定されます（つまり、スクリプトが &lt;code&gt;set -l _flag_X&lt;/code&gt; を実行したかのように）。フラグがブール値である場合（つまり、渡されるかどうか、値がない場合）、値は表示される短いフラグと長いフラグです。オプションがブール値でない場合、値は、ARGリストの処理時に収集された値に対応する0個以上の値になります。フラグが表示されなかった場合、フラグ変数は設定されません。</target>
        </trans-unit>
        <trans-unit id="160d44921b4e5cc1e46472871323748ab262c51c" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing</source>
          <target state="translated">たとえば、 &lt;code&gt;git checkout&lt;/code&gt; のような頻繁に実行されるコマンドは、 &lt;code&gt;gco&lt;/code&gt; と省略できます。 &lt;code&gt;gco&lt;/code&gt; に入り、を押した後</target>
        </trans-unit>
        <trans-unit id="38df69a183da9016b2103a1c9a7def1959322bfa" translate="yes" xml:space="preserve">
          <source>For example, a frequently-run command like &lt;code&gt;git checkout&lt;/code&gt; can be abbreviated to &lt;code&gt;gco&lt;/code&gt;. After entering &lt;code&gt;gco&lt;/code&gt; and pressing &lt;b&gt;Space&lt;/b&gt; or &lt;b&gt;Enter&lt;/b&gt;, the full text &lt;code&gt;git checkout&lt;/code&gt; will appear in the command line.</source>
          <target state="translated">たとえば、 &lt;code&gt;git checkout&lt;/code&gt; のような頻繁に実行されるコマンドは、 &lt;code&gt;gco&lt;/code&gt; に短縮できます。入力後 &lt;code&gt;gco&lt;/code&gt; 、プレス&lt;b&gt;スペース&lt;/b&gt;または&lt;b&gt;入力し&lt;/b&gt;、フルテキスト &lt;code&gt;git checkout&lt;/code&gt; コマンドラインに表示されます。</target>
        </trans-unit>
        <trans-unit id="4f10862d2cb42eba3132cb49d2ba2a80e3864525" translate="yes" xml:space="preserve">
          <source>For example, if you wanted to have a function &lt;code&gt;ll&lt;/code&gt;, you would add a text file &lt;code&gt;ll.fish&lt;/code&gt; to &lt;code&gt;~/.config/fish/functions&lt;/code&gt;:</source>
          <target state="translated">たとえば、関数 &lt;code&gt;ll&lt;/code&gt; が必要な場合は、テキストファイル &lt;code&gt;ll.fish&lt;/code&gt; を &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="631584c9382e007cb93a95331a33fec25ea95d0e" translate="yes" xml:space="preserve">
          <source>For example, the following is a function definition that calls the command &lt;code&gt;ls&lt;/code&gt; with the argument '&lt;code&gt;-l&lt;/code&gt;' to print a detailed listing of the contents of the current directory:</source>
          <target state="translated">たとえば、次の関数定義は、引数 ' &lt;code&gt;-l&lt;/code&gt; 'を指定してコマンド &lt;code&gt;ls&lt;/code&gt; を呼び出し、現在のディレクトリの内容の詳細なリストを出力します。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="9b35e52823563d2df240637c363f5b52ee523904" translate="yes" xml:space="preserve">
          <source>For examples of how to write your own complex completions, study the completions in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;. (The exact path depends on your chosen installation prefix and may be slightly different)</source>
          <target state="translated">独自の複雑な補完を作成する方法の例については、 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; で補完を調べてください。（正確なパスは、選択したインストールプレフィックスによって異なり、多少異なる場合があります）</target>
        </trans-unit>
        <trans-unit id="29752c666ae89d90fd5950e78bb8db877998c7de" translate="yes" xml:space="preserve">
          <source>For for detailed instructions see &lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;Switching to fish&lt;/a&gt;.</source>
          <target state="translated">詳細な手順については&lt;a href=&quot;tutorial#switching-to-fish&quot;&gt;、魚への切り替えを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="bbba6181daff6006d824b40726c5e1dc21c20696" translate="yes" xml:space="preserve">
          <source>For loops can be used to iterate over a list. For example, a list of files:</source>
          <target state="translated">Forループは、リストの反復処理に使用することができます。例えば、ファイルのリストなどです。</target>
        </trans-unit>
        <trans-unit id="fb55b2efd75666ff0e0f22ca6189e759ca99212d" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;../index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">詳細については、 &lt;code&gt;fish&lt;/code&gt; マニュアルの&lt;a href=&quot;../index#debugging&quot;&gt;fishスクリプトのデバッグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0d3b4b55cdd235f8a297cfd58fd2b4aaeb478949" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;index#debugging&quot;&gt;Debugging fish scripts&lt;/a&gt; in the &lt;code&gt;fish&lt;/code&gt; manual.</source>
          <target state="translated">詳細については、 &lt;code&gt;fish&lt;/code&gt; マニュアルの「&lt;a href=&quot;index#debugging&quot;&gt;debug fishスクリプト&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="20842f282aec1c4b50e206a47ffcf066ea5ca7ed" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">新しいイベントハンドラーを定義する方法の詳細については、&lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt;コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="2fc141152e052520326e534bbd191caeb550504d" translate="yes" xml:space="preserve">
          <source>For more information on how to define new event handlers, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; command.</source>
          <target state="translated">新しいイベントハンドラーの定義方法の詳細については、&lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt;コマンドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="6895247d91fcffa104e9a4003d47294a8b67a455" translate="yes" xml:space="preserve">
          <source>For more information, read the documentation for the block constructs, such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; などのブロック構造のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="964a42e4fd350b97fcf46d3e0c75ca51851aa82c" translate="yes" xml:space="preserve">
          <source>For more information, see the documentation for each of the functions above.</source>
          <target state="translated">詳細については、上記の各機能のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8d92b5c7148803c36e855152c078c15224a9486" translate="yes" xml:space="preserve">
          <source>For numbers, &lt;code&gt;.&lt;/code&gt; is always the radix character regardless of locale - &lt;code&gt;2.5&lt;/code&gt;, not &lt;code&gt;2,5&lt;/code&gt;. Scientific notation (&lt;code&gt;10e5&lt;/code&gt;) is also available.</source>
          <target state="translated">番号については、 &lt;code&gt;.&lt;/code&gt; ロケールに関係なく、常に基数文字です &lt;code&gt;2.5&lt;/code&gt; ではなく、 &lt;code&gt;2,5&lt;/code&gt; です。科学表記（ &lt;code&gt;10e5&lt;/code&gt; ）も使用できます。</target>
        </trans-unit>
        <trans-unit id="8e25112d09d08d00c25b607d90cd81a9a425781e" translate="yes" xml:space="preserve">
          <source>For uninstalling fish: see &lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ: Uninstalling fish&lt;/a&gt;.</source>
          <target state="translated">魚のアンインストールについては、&lt;a href=&quot;faq#faq-uninstalling&quot;&gt;FAQ：魚のアンインストールを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="af90cef80988974dd76636b3adb5f472768f785d" translate="yes" xml:space="preserve">
          <source>Frequently asked questions</source>
          <target state="translated">よくある質問</target>
        </trans-unit>
        <trans-unit id="817a23516d79c9310b8cbcd3fbb553ae7f962425" translate="yes" xml:space="preserve">
          <source>From an interactive shell, the commands below exit with a return value of zero:</source>
          <target state="translated">対話型シェルからは、以下のコマンドは戻り値ゼロで終了します。</target>
        </trans-unit>
        <trans-unit id="68add3d9773584e2619f672ebe5f9d4745e5e9ea" translate="yes" xml:space="preserve">
          <source>From now on, we'll pretend your prompt is just a '&lt;code&gt;&amp;gt;&lt;/code&gt;' to save space.</source>
          <target state="translated">これからは、スペースを節約するために、プロンプトが単なる ' &lt;code&gt;&amp;gt;&lt;/code&gt; 'であると仮定します。</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="daf9c1f469f134e463969d3e8181e558bbde191a" translate="yes" xml:space="preserve">
          <source>Functions are programs written in the fish syntax. They group together one or more commands and their arguments using a single name. It can also be used to start a specific command with additional arguments.</source>
          <target state="translated">関数は魚の構文で書かれたプログラムです。1つ以上のコマンドとその引数を1つの名前でグループ化します。また、追加の引数で特定のコマンドを起動するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="89f90915711f79d63d40ae94fbe45e944677e599" translate="yes" xml:space="preserve">
          <source>Functions beginning with the string &lt;code&gt;__fish_print_&lt;/code&gt; print a newline separated list of strings. For example, &lt;code&gt;__fish_print_filesystems&lt;/code&gt; prints a list of all known file systems. Functions beginning with &lt;code&gt;__fish_complete_&lt;/code&gt; print out a newline separated list of completions with descriptions. The description is separated from the completion by a tab character.</source>
          <target state="translated">文字列 &lt;code&gt;__fish_print_&lt;/code&gt; で始まる関数は、改行で区切られた文字列のリストを出力します。たとえば、 &lt;code&gt;__fish_print_filesystems&lt;/code&gt; は、すべての既知のファイルシステムのリストを出力します。 &lt;code&gt;__fish_complete_&lt;/code&gt; で始まる関数は、説明と補完の改行区切りリストを出力します。説明はタブ文字で補完と区切られます。</target>
        </trans-unit>
        <trans-unit id="db0f72339f2340e5e8b351628b140fc4b4a5095c" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This has some advantages:</source>
          <target state="translated">関数はコマンドラインや設定ファイルで定義できますが、自動的にロードすることもできます。これにはいくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="bfd6b853607d78b9cac90686ca5ac5f2f2bd0492" translate="yes" xml:space="preserve">
          <source>Functions can be defined on the commandline or in a configuration file, but they can also be automatically loaded. This method of defining functions has several advantages. An autoloaded function becomes available automatically to all running shells. If the function definition is changed, all running shells will automatically reload the altered version. Startup time and memory usage is improved, etc.</source>
          <target state="translated">関数はコマンドラインや設定ファイルで定義できますが、自動的にロードすることもできます。この方法にはいくつかの利点があります。オートロードされた関数は、すべての実行中のシェルで自動的に利用できるようになります。関数の定義が変更された場合、すべての実行中のシェルは自動的に変更後のバージョンをリロードします。起動時間やメモリ使用量などが改善されます。</target>
        </trans-unit>
        <trans-unit id="45aaac446e8af8ab443ebb79de1921177d9fc9c4" translate="yes" xml:space="preserve">
          <source>Fundle</source>
          <target state="translated">Fundle</target>
        </trans-unit>
        <trans-unit id="1dbc937890de836b0044393faedad472b64f7496" translate="yes" xml:space="preserve">
          <source>Further help and development</source>
          <target state="translated">さらなる支援と開発</target>
        </trans-unit>
        <trans-unit id="bcbbc69b089ac1c6106198168f95bbc56b4fa684" translate="yes" xml:space="preserve">
          <source>Future feature flags</source>
          <target state="translated">将来の機能フラグ</target>
        </trans-unit>
        <trans-unit id="3dc04827b1d89f032f341434dadfd4fcc6c503c2" translate="yes" xml:space="preserve">
          <source>GNU style long options, like '&lt;code&gt;--colors&lt;/code&gt;'. GNU style long options can be more than one character long, are preceded by two hyphens, and may not be grouped together. Option arguments may be specified in the following parameter ('&lt;code&gt;--quoting-style shell&lt;/code&gt;') or by appending the option with a '&lt;code&gt;=&lt;/code&gt;' and the value ('&lt;code&gt;--quoting-style=shell&lt;/code&gt;'). GNU style long options may be abbreviated so long as the abbreviation is unique ('&lt;code&gt;--h&lt;/code&gt;') is equivalent to '&lt;code&gt;--help&lt;/code&gt;' if help is the only long option beginning with an 'h').</source>
          <target state="translated">' &lt;code&gt;--colors&lt;/code&gt; 'のようなGNUスタイルの長いオプション。GNUスタイルの長いオプションは、2文字以上にすることができ、2つのハイフンが前に付くため、一緒にグループ化することはできません。オプションの引数は、次のパラメーターで指定するか（ ' &lt;code&gt;--quoting-style shell&lt;/code&gt; '）、またはオプションに ' &lt;code&gt;=&lt;/code&gt; 'と値を追加します（ ' &lt;code&gt;--quoting-style=shell&lt;/code&gt; '）。GNUスタイルの長いオプションは、省略形が一意である限り省略できます（ ' &lt;code&gt;--h&lt;/code&gt; '）は、 'h'で始まる唯一の長いオプションである場合、 ' &lt;code&gt;--help&lt;/code&gt; ' と同等です）。</target>
        </trans-unit>
        <trans-unit id="d19c496fc9fc5f17e29b156659c99fdebbdf355e" translate="yes" xml:space="preserve">
          <source>Get the length of a list with &lt;code&gt;count&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; を使用してリストの長さを取得します。</target>
        </trans-unit>
        <trans-unit id="9a0f73ca6aa746ede1e77153dd3bf5bb16e841ab" translate="yes" xml:space="preserve">
          <source>Getting Help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">始めるには</target>
        </trans-unit>
        <trans-unit id="8eaa4a571cfa23b1046936adad07606e523f576d" translate="yes" xml:space="preserve">
          <source>Global variables are accessible to functions whether they are exported or not.</source>
          <target state="translated">グローバル変数は、エクスポートされているかどうかに関わらず、関数にアクセスできるようになっています。</target>
        </trans-unit>
        <trans-unit id="14e54a9b9a49fb183045e69571e35c245eada9b8" translate="yes" xml:space="preserve">
          <source>Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;.</source>
          <target state="translated">グローバル変数は現在のfishセッションに固有ですが、特定のブロックスコープに関連付けられておらず、ユーザーが &lt;code&gt;set -e&lt;/code&gt; を使用して明示的に要求しない限り、消去されることはありません。</target>
        </trans-unit>
        <trans-unit id="097b5d5320d0735796306d389e915b1392ea4a90" translate="yes" xml:space="preserve">
          <source>Groups:</source>
          <target state="translated">Groups:</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="0053f4880938c6ad45d9f6ae784ae7aa588de2e2" translate="yes" xml:space="preserve">
          <source>Help on a specific builtin can also be obtained with the &lt;code&gt;-h&lt;/code&gt; parameter. For instance, to obtain help on the &lt;code&gt;fg&lt;/code&gt; builtin, either type &lt;code&gt;fg -h&lt;/code&gt; or &lt;code&gt;help fg&lt;/code&gt;.</source>
          <target state="translated">特定の組み込みに関するヘルプは、 &lt;code&gt;-h&lt;/code&gt; パラメーターを使用して取得することもできます。たとえば、組み込みの &lt;code&gt;fg&lt;/code&gt; に関するヘルプを表示するには、 &lt;code&gt;fg -h&lt;/code&gt; または &lt;code&gt;help fg&lt;/code&gt; と入力します。</target>
        </trans-unit>
        <trans-unit id="4f5d69f1e4fa9190f3df409c8af9094f4963c8a1" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful commands:</source>
          <target state="translated">ここでは、いくつかの便利なコマンドを紹介します。</target>
        </trans-unit>
        <trans-unit id="59a0fbf9a4b62e6e15f7e7d04099ec292404a8c3" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;make&lt;/code&gt; is only executed if &lt;code&gt;./configure&lt;/code&gt; succeeds (returns 0), and &lt;code&gt;sudo make install&lt;/code&gt; is only executed if both &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; succeed.</source>
          <target state="translated">ここで、 &lt;code&gt;make&lt;/code&gt; は &lt;code&gt;./configure&lt;/code&gt; が成功した場合（0を返す）にのみ実行され、 &lt;code&gt;sudo make install&lt;/code&gt; &lt;code&gt;./configure&lt;/code&gt; と &lt;code&gt;make&lt;/code&gt; の両方が成功した場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="7a509c793438fa230f1278ed402f9c7e9018572d" translate="yes" xml:space="preserve">
          <source>History searches can be aborted by pressing the escape key.</source>
          <target state="translated">エスケープキーを押すことで履歴検索を中止することができます。</target>
        </trans-unit>
        <trans-unit id="67bc332b46b3f3dc1b8024a5e5cfdee70680168b" translate="yes" xml:space="preserve">
          <source>Hit tab again to cycle through the possibilities.</source>
          <target state="translated">もう一度タブを押して、可能性を循環させます。</target>
        </trans-unit>
        <trans-unit id="8562520c74923aa47973021bf5a615a9d18fdbc2" translate="yes" xml:space="preserve">
          <source>Holding alt and something else also typically sends escape, for example holding alt+a will send an escape character and then an &quot;a&quot;.</source>
          <target state="translated">alt と他の何かをホールドすると、通常はエスケープが送信されます。例えば alt+a をホールドするとエスケープ文字が送信され、その後に &quot;a&quot; が送信されます。</target>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="0fb159db1e28fce0aea599e71e51612c11b25f22" translate="yes" xml:space="preserve">
          <source>Home directory expansion</source>
          <target state="translated">ホームディレクトリの拡張</target>
        </trans-unit>
        <trans-unit id="c5e4aaa97cc3ad7f579464354a2507b9c63dac85" translate="yes" xml:space="preserve">
          <source>How can I use &lt;code&gt;-&lt;/code&gt; as a shortcut for &lt;code&gt;cd -&lt;/code&gt;?</source>
          <target state="translated">どうすれば &lt;code&gt;cd -&lt;/code&gt; ショートカットとして &lt;code&gt;-&lt;/code&gt; を使用できますか？</target>
        </trans-unit>
        <trans-unit id="d5208f2bd161f7ef9e4786ba2058053cc8cefa22" translate="yes" xml:space="preserve">
          <source>How can I use `-` as a shortcut for `cd -`?</source>
          <target state="translated">cd -` のショートカットとして `-` を使うにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="ba1155cc4fa464e6593f08ba2b8723aab74c8f1c" translate="yes" xml:space="preserve">
          <source>How do I change the greeting message?</source>
          <target state="translated">挨拶文を変更するには?</target>
        </trans-unit>
        <trans-unit id="54e6d1ecb8003f23585cb7559d5800b568cc815b" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is defined?</source>
          <target state="translated">変数が定義されているかどうかを確認するには?</target>
        </trans-unit>
        <trans-unit id="c4d87fc5a8041267fdcd98e9deafc888b91c5523" translate="yes" xml:space="preserve">
          <source>How do I check whether a variable is not empty?</source>
          <target state="translated">変数が空でないかどうかを確認するには?</target>
        </trans-unit>
        <trans-unit id="13c4a91c9a86c9c981e277c7f5e4a2ed6189509e" translate="yes" xml:space="preserve">
          <source>How do I customize my syntax highlighting colors?</source>
          <target state="translated">シンタックスハイライトの色をカスタマイズするには?</target>
        </trans-unit>
        <trans-unit id="a694102af5424918d28a1f9662a1aa3950673c08" translate="yes" xml:space="preserve">
          <source>How do I get the exit status of a command?</source>
          <target state="translated">コマンドの終了ステータスを取得するには?</target>
        </trans-unit>
        <trans-unit id="0e58d9d321d50cf0c49be8ad0ed48955a88a6bce" translate="yes" xml:space="preserve">
          <source>How do I make fish my default shell?</source>
          <target state="translated">魚をデフォルトのシェルにするには?</target>
        </trans-unit>
        <trans-unit id="402503e9f12a7c687d2a8e25d61d5d4c873e5c42" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc or .profile?</source>
          <target state="translated">ログインするたびにコマンドを実行するには?フィッシュの.bashrcや.profileに相当するものは何ですか?</target>
        </trans-unit>
        <trans-unit id="bc538e8432ebecf3f9f7a45d7ccb524d4da71c7d" translate="yes" xml:space="preserve">
          <source>How do I run a command every login? What's fish's equivalent to .bashrc?</source>
          <target state="translated">ログインするたびにコマンドを実行するには?フィッシュの.bashrcと同等のものは何ですか?</target>
        </trans-unit>
        <trans-unit id="9d52246c1acb2dd2ad95298d27dac048384b6b2b" translate="yes" xml:space="preserve">
          <source>How do I run a command from history?</source>
          <target state="translated">履歴からコマンドを実行するには?</target>
        </trans-unit>
        <trans-unit id="7c2282706e5d5da05460852fe614e0ea089754e8" translate="yes" xml:space="preserve">
          <source>How do I run a subcommand? The backtick doesn't work!</source>
          <target state="translated">サブコマンドを実行するには?バックティックが効かない!?</target>
        </trans-unit>
        <trans-unit id="240782fc9c5f0b5d6c4cc74b05803ec8fdfa4ffc" translate="yes" xml:space="preserve">
          <source>How do I set an environment variable for just one command?</source>
          <target state="translated">1つのコマンドだけに環境変数を設定するには?</target>
        </trans-unit>
        <trans-unit id="cf01f8cfda8ac7fdc0ad1cfce27146791559db05" translate="yes" xml:space="preserve">
          <source>How do I set my prompt?</source>
          <target state="translated">プロンプトの設定方法は?</target>
        </trans-unit>
        <trans-unit id="a7f2b2fb54e2d471e8f341688e112fc1e1ce9d80" translate="yes" xml:space="preserve">
          <source>How do I set or clear an environment variable?</source>
          <target state="translated">環境変数を設定したりクリアしたりするには?</target>
        </trans-unit>
        <trans-unit id="1bbce1c02cef5225c09fe183c39555282f316dab" translate="yes" xml:space="preserve">
          <source>How do I update man page completions?</source>
          <target state="translated">マンページの補完を更新するにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="8755f1ac4179b2490bfd8d3384a3c541bc0e9557" translate="yes" xml:space="preserve">
          <source>However sometimes, especially with &lt;code&gt;pkg-config&lt;/code&gt; and related tools, splitting on spaces is needed.</source>
          <target state="translated">ただし、ときどき、特に &lt;code&gt;pkg-config&lt;/code&gt; および関連ツールでは、スペースの分割が必要になります。</target>
        </trans-unit>
        <trans-unit id="54bce717b6b4bc0facb17b1202d46c84a308e996" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so</source>
          <target state="translated">しかし、変数をインデックスとして使用することは現在のところサポートされていません。</target>
        </trans-unit>
        <trans-unit id="9c47b741a075c31ca3e2cd472a89d590bf7358b1" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so:</source>
          <target state="translated">しかし、変数をインデックスとして使用することは現在のところサポートされていません。</target>
        </trans-unit>
        <trans-unit id="3ece1cae89b5ddaf2b419721f67d267e2d87fe0b" translate="yes" xml:space="preserve">
          <source>However, it is more common and efficient to use autoloading functions and universal variables.</source>
          <target state="translated">しかし、オートローディング関数やユニバーサル変数を使用する方が一般的で効率的です。</target>
        </trans-unit>
        <trans-unit id="332860b83cabf222387565b3cbb3a4ca2b6a60c7" translate="yes" xml:space="preserve">
          <source>I accidentally entered a directory path and fish changed directory. What happened?</source>
          <target state="translated">誤ってディレクトリパスを入力してしまい、魚がディレクトリを変更してしまいました。何が起こったのでしょうか?</target>
        </trans-unit>
        <trans-unit id="077b540fd621e89ad74c3aa41ae8c6bb0c4148b1" translate="yes" xml:space="preserve">
          <source>I'm seeing weird output before each prompt when using screen. What's wrong?</source>
          <target state="translated">screenを使っていると、各プロンプトの前に変な出力が出てきます。何か問題があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="7884771064847db56c0b28c42a19e5f67be016fb" translate="yes" xml:space="preserve">
          <source>If $animals is a list of animals, the following will test if it contains a cat:</source>
          <target state="translated">animalsが動物のリストの場合、以下は猫が含まれているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="6288311089317cecbe49c2b077270e72c24f0c74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$animal&lt;/code&gt; was set to &quot;banana&quot;, it would print &quot;I have no idea what a banana is&quot;.</source>
          <target state="translated">場合は &lt;code&gt;$animal&lt;/code&gt; 「バナナ」に設定し、それは「私はバナナが何であるか見当がつかない」印刷します。</target>
        </trans-unit>
        <trans-unit id="6529dd48f4bbe7af35d8ee17e053a860dce8bc42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables (more on this &lt;a href=&quot;argparse-local-variables&quot;&gt;below&lt;/a&gt;) are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">&lt;code&gt;$argv&lt;/code&gt; が空の場合、解析するものは何もなく、 &lt;code&gt;argparse&lt;/code&gt; は成功を示すためにゼロを返します。 &lt;code&gt;$argv&lt;/code&gt; が空でない場合、フラグ &lt;code&gt;-h&lt;/code&gt; 、-- &lt;code&gt;--help&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; 、および &lt;code&gt;--name&lt;/code&gt; がチェックされます。彼らが発見された場合、それらは、引数とローカル変数（この詳細から削除されている&lt;a href=&quot;argparse-local-variables&quot;&gt;以下の&lt;/a&gt;スクリプトが見られたどのオプションを判別できるように設定されています）。 &lt;code&gt;$argv&lt;/code&gt; オプションの必須値がないなどのエラーがないと仮定すると、 &lt;code&gt;argparse&lt;/code&gt; はステータス0で終了します。それ以外の場合は、適切なエラーメッセージをstderrに書き込み、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="c0fbfd35fc6ed08657df1862ed0095c68b3987ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">&lt;code&gt;$argv&lt;/code&gt; が空の場合、解析するものはなく、 &lt;code&gt;argparse&lt;/code&gt; は成功を示すためにゼロを返します。 &lt;code&gt;$argv&lt;/code&gt; が空でない場合は、フラグ &lt;code&gt;-h&lt;/code&gt; 、 &lt;code&gt;--help&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; 、および &lt;code&gt;--name&lt;/code&gt; がチェックされます。それらが見つかった場合、それらは引数から削除され、ローカル変数が設定されるため、スクリプトはどのオプションが表示されたかを判別できます。 &lt;code&gt;$argv&lt;/code&gt; オプションの必須値がないなどのエラーがないと仮定すると、 &lt;code&gt;argparse&lt;/code&gt; はステータスゼロで終了します。それ以外の場合は、適切なエラーメッセージをstderrに書き込み、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="18c0231ee0546ad7aeb3f50a1a68cbc1c85d1797" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; is given, each match is reported as a 1-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.</source>
          <target state="translated">&lt;code&gt;--index&lt;/code&gt; または &lt;code&gt;-n&lt;/code&gt; が指定されている場合、各一致は1から始まる開始位置と長さとして報告されます。デフォルトでは、PATTERNはSTRING引数全体と照合されるグロブパターンとして解釈されます。globパターンは、STRING全体と一致する場合にのみ有効な一致と見なされます。</target>
        </trans-unit>
        <trans-unit id="dbf8f89e324b9e1f656b472c919d4c7a437efce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--invert&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; is used the selected lines will be only those which do not match the given glob pattern or regular expression.</source>
          <target state="translated">場合 &lt;code&gt;--invert&lt;/code&gt; または &lt;code&gt;-v&lt;/code&gt; が使用されている選択した行のみが与えられたグロブパターンや正規表現に一致しないものになります。</target>
        </trans-unit>
        <trans-unit id="bca5e01e9673f9e6a815d4bc3b45775fa51fbbf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--regex&lt;/code&gt; or &lt;code&gt;-r&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless &lt;code&gt;--entire&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;--regex&lt;/code&gt; または &lt;code&gt;-r&lt;/code&gt; が指定されている場合、PATTERNはPerl互換の正規表現として解釈され、STRING全体と一致する必要はありません。キャプチャグループを含む正規表現の場合、一致ごとに1つ、一致全体とキャプチャグループごとに1つずつ、複数のアイテムが報告されます。これにより、 &lt;code&gt;--entire&lt;/code&gt; が指定されていない限り、STRINGの一致する部分のみが報告されます。</target>
        </trans-unit>
        <trans-unit id="fcb2b97b9b74110a92108364c83d3b0d2cdf428f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as a list in this variable.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--array&lt;/code&gt; が指定されている場合、1つの変数名のみが許可され、トークンはこの変数にリストとして格納されます。</target>
        </trans-unit>
        <trans-unit id="4e269b8b85f5f48b405e1f529c5cc1623456789e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as an array in this variable.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--array&lt;/code&gt; が指定されている場合、1つの変数名のみが許可され、トークンはこの変数に配列として格納されます。</target>
        </trans-unit>
        <trans-unit id="a6dcb1b88668c5c41c70fbdad2157ee6171f60f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-e&lt;/code&gt; is used, the following sequences are recognized:</source>
          <target state="translated">場合は &lt;code&gt;-e&lt;/code&gt; が使用され、以下の配列が認識されます。</target>
        </trans-unit>
        <trans-unit id="e5d5482f59147347f76e114d12618ff3d78fea80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can contain C-style escape sequences like &lt;code&gt;\t&lt;/code&gt; as well as references to capturing groups by number or name as &lt;code&gt;$n&lt;/code&gt; or &lt;code&gt;${n}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--regex&lt;/code&gt; が指定されている場合、PATTERNはPerl互換の正規表現として解釈され、REPLACEMENTには、 &lt;code&gt;\t&lt;/code&gt; などのCスタイルのエスケープシーケンスと、 &lt;code&gt;$n&lt;/code&gt; または &lt;code&gt;${n}&lt;/code&gt; としての番号または名前によるキャプチャグループへの参照を含めることができます。n}。</target>
        </trans-unit>
        <trans-unit id="227584b023d6d2c7837f693e7e9b190c0c0b3bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;REASON&lt;/code&gt; are both specified, &lt;code&gt;ARG&lt;/code&gt; is the command to be executed when the event specified by &lt;code&gt;REASON&lt;/code&gt; occurs (e.g., the signal is delivered).</source>
          <target state="translated">&lt;code&gt;ARG&lt;/code&gt; と &lt;code&gt;REASON&lt;/code&gt; の両方が指定されている場合、 &lt;code&gt;ARG&lt;/code&gt; は、 &lt;code&gt;REASON&lt;/code&gt; で指定されたイベントが発生した（たとえば、シグナルが配信された）ときに実行されるコマンドです。</target>
        </trans-unit>
        <trans-unit id="d6a059f39530ea46f03b1a88f280774a9e1b7e4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is absent (and there is a single REASON) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If &lt;code&gt;ARG&lt;/code&gt; is the null string the signal specified by each &lt;code&gt;REASON&lt;/code&gt; is ignored by the shell and by the commands it invokes.</source>
          <target state="translated">場合 &lt;code&gt;ARG&lt;/code&gt; が存在しない（および単一理由がある）又は- 、指定された各信号は、元の配置（これはシェルの入口上にあった値）にリセットされます。 &lt;code&gt;ARG&lt;/code&gt; がヌル文字列の場合、各 &lt;code&gt;REASON&lt;/code&gt; によって指定されたシグナルは、シェルとそれが呼び出すコマンドによって無視されます。</target>
        </trans-unit>
        <trans-unit id="0310897c6525d4c0a20301e5b59490367df8d786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is not present and &lt;code&gt;-p&lt;/code&gt; has been supplied, then the trap commands associated with each &lt;code&gt;REASON&lt;/code&gt; are displayed. If no arguments are supplied or if only &lt;code&gt;-p&lt;/code&gt; is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal.</source>
          <target state="translated">場合 &lt;code&gt;ARG&lt;/code&gt; が存在せず、 &lt;code&gt;-p&lt;/code&gt; は、供給された後、それぞれに関連するトラップコマンド &lt;code&gt;REASON&lt;/code&gt; 表示されています。引数が指定されていない場合、または &lt;code&gt;-p&lt;/code&gt; のみが指定されている場合、 &lt;code&gt;trap&lt;/code&gt; は各シグナルに関連付けられているコマンドのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="46f4e7706aaa7715626c2065fdf439e268266771" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; environment variable array will be tried as prefixes for the specified path.</source>
          <target state="translated">&lt;code&gt;DIRECTORY&lt;/code&gt; が相対パスの場合、 &lt;code&gt;CDPATH&lt;/code&gt; 環境変数配列にあるパスが、指定されたパスのプレフィックスとして試行されます。</target>
        </trans-unit>
        <trans-unit id="d8fdf9c081d12374165457176e730cf87d210ca2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; list will be tried as prefixes for the specified path, in addition to $PWD.</source>
          <target state="translated">&lt;code&gt;DIRECTORY&lt;/code&gt; が相対パスの場合、 &lt;code&gt;CDPATH&lt;/code&gt; リストで見つかったパスは、$ PWDに加えて、指定されたパスのプレフィックスとして試行されます。</target>
        </trans-unit>
        <trans-unit id="6d211b5295328f27c5f4dda2c5b64e33b2d339ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is supplied, it will become the new directory. If no parameter is given, the contents of the &lt;code&gt;HOME&lt;/code&gt; environment variable will be used.</source>
          <target state="translated">場合は &lt;code&gt;DIRECTORY&lt;/code&gt; 供給され、それは、新しいディレクトリになります。パラメータを指定しない場合、 &lt;code&gt;HOME&lt;/code&gt; 環境変数の内容が使用されます。</target>
        </trans-unit>
        <trans-unit id="ee49ba74d2c75163466a92ec95757c32496b3231" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandline&lt;/code&gt; is called during a call to complete a given string using &lt;code&gt;complete -C STRING&lt;/code&gt;, &lt;code&gt;commandline&lt;/code&gt; will consider the specified string to be the current contents of the command line.</source>
          <target state="translated">場合は &lt;code&gt;commandline&lt;/code&gt; 使用して、指定された文字列を完了するために、通話中に呼び出され &lt;code&gt;complete -C STRING&lt;/code&gt; 、 &lt;code&gt;commandline&lt;/code&gt; 指定した文字列は、コマンドラインの現在の内容であると考えます。</target>
        </trans-unit>
        <trans-unit id="1145ddb3bdeee96521a717d934a15cc64d95077c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fish&lt;/code&gt; encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">コマンドの実行中に &lt;code&gt;fish&lt;/code&gt; で問題が発生した場合、ステータス変数も特定の値に設定される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f09fbf7f2a9a04bff01d5330effffef51795cab0" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SECTION&lt;/code&gt; is specified, the help for that command is shown.</source>
          <target state="translated">場合 &lt;code&gt;SECTION&lt;/code&gt; が指定され、そのコマンドのヘルプが表示されます。</target>
        </trans-unit>
        <trans-unit id="8d59528d17aca71e945c01c4f608cc07968fec9a" translate="yes" xml:space="preserve">
          <source>If a VCS isn't installed, the respective function does nothing.</source>
          <target state="translated">VCS がインストールされていない場合、それぞれの機能は何もしません。</target>
        </trans-unit>
        <trans-unit id="8ebee8483e83b06811ff3ba9ccc429433dce33cd" translate="yes" xml:space="preserve">
          <source>If a function named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be printed.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; という名前の関数が存在する場合、インタラクティブモードに入るときに実行されます。それ以外の場合、 &lt;code&gt;fish_greeting&lt;/code&gt; という名前の環境変数が存在すると、それが出力されます。</target>
        </trans-unit>
        <trans-unit id="236d9b2bfa9ffd703bff82e438702935d8f276d3" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;code&gt;bg&lt;/code&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">ジョブが停止すると、実行を継続するシグナルが送信され、警告が出力されます。取り消されたジョブを続行するために組み込みの &lt;code&gt;bg&lt;/code&gt; を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="60e2a752180a8997dd97af87732b5ed3a03f8d8f" translate="yes" xml:space="preserve">
          <source>If a numeric mask is specified as a parameter, the current shell's umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.</source>
          <target state="translated">数値マスクがパラメータとして指定された場合、現在のシェルの umask はその値に設定され、そのマスクで指定された権利はデフォルトで新しいファイルやディレクトリから削除されます。</target>
        </trans-unit>
        <trans-unit id="2dde9e658888f495cea69c0ad8b260a62416e91a" translate="yes" xml:space="preserve">
          <source>If a pid is specified, the command waits for the job that the process with the pid belongs to.</source>
          <target state="translated">pid が指定された場合は、その pid を持つプロセスが属するジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="f851c83c3c3953c372c81382f02613c546f275f0" translate="yes" xml:space="preserve">
          <source>If a process exits through a signal, the exit status will be 128 plus the number of the signal.</source>
          <target state="translated">シグナルを経由してプロセスが終了する場合、終了ステータスは128にシグナルの番号を加えたものになります。</target>
        </trans-unit>
        <trans-unit id="47cb47829c9383def1fb8361853c4c7dd09368a8" translate="yes" xml:space="preserve">
          <source>If a process name is specified, the command waits for the jobs that the matched processes belong to.</source>
          <target state="translated">プロセス名を指定すると、一致したプロセスが属するジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="302f9ccffa6bb045e0895a185f5c9e50859c884f" translate="yes" xml:space="preserve">
          <source>If a script produces output, it should finish by calling &lt;code&gt;commandline -f repaint&lt;/code&gt; to tell fish that a repaint is in order.</source>
          <target state="translated">スクリプトが出力を生成する場合は、 &lt;code&gt;commandline -f repaint&lt;/code&gt; を呼び出して再描画が適切であることを魚に通知することで終了します。</target>
        </trans-unit>
        <trans-unit id="67026ba945428dc31827715c1565311d33b5af8d" translate="yes" xml:space="preserve">
          <source>If a star (&lt;code&gt;*&lt;/code&gt;) or a question mark (&lt;code&gt;?&lt;/code&gt;) is present in the parameter, &lt;code&gt;fish&lt;/code&gt; attempts to match the given parameter to any files in such a way that:</source>
          <target state="translated">スター（ &lt;code&gt;*&lt;/code&gt; ）または疑問符（ &lt;code&gt;?&lt;/code&gt; ）がパラメーターに含まれている場合、 &lt;code&gt;fish&lt;/code&gt; は指定されたパラメーターを次のような方法で任意のファイルに一致させようとします。</target>
        </trans-unit>
        <trans-unit id="18a6fd00e4b1ddec496d39ba9f288b25c849a5d6" translate="yes" xml:space="preserve">
          <source>If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:</source>
          <target state="translated">シンボリックマスクが指定されている場合は、その逆ではなく、所望の許可ビットを指定する必要があります。シンボリックマスクは、カンマで区切られた権利のリストである。各権利は 3 つの部分から構成される。</target>
        </trans-unit>
        <trans-unit id="c3bd46787a5c6b92e6f20cfe4fbc883c75045f2a" translate="yes" xml:space="preserve">
          <source>If a variable has global scope, it is accessible read-write to functions whether it is exported or not.</source>
          <target state="translated">変数がグローバルスコープを持つ場合、エクスポートされているかどうかに関わらず、関数への読み書きが可能です。</target>
        </trans-unit>
        <trans-unit id="741d44bccaaf674b1d069d14a1bdb399e238d593" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a &lt;em&gt;copy&lt;/em&gt; of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">変数にローカルスコープがあり、エクスポートされた場合、呼び出された関数はその&lt;em&gt;コピー&lt;/em&gt;を受け取ります。そのため、変数が変数に加えた変更は、関数が戻ると消えます。</target>
        </trans-unit>
        <trans-unit id="b71ed16ea5a59eda60ec534a14bf2d103ba20ae9" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a _copy_ of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">変数がローカルスコープを持ち、エクスポートされている場合、呼び出された関数はすべてそのコピーを受け取ります。</target>
        </trans-unit>
        <trans-unit id="96f0994fdaca0f9b1c269335d2df0f4e271c169d" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to a scope (universal, global or local), that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">変数が明示的にスコープ (ユニバーサル、グローバル、ローカル)に設定されている場合は、その設定が尊重されます。同じ名前の変数が別のスコープに存在する場合、その変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="2cbdc88f5e9bb2f3b40009d0379b55ab2352ae84" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either be exported or not exported, that setting will be honored.</source>
          <target state="translated">変数が明示的にエクスポートされるかどうかが設定されている場合は、その設定が優先されます。</target>
        </trans-unit>
        <trans-unit id="ce6484065868b4e9c43f6db14f55a84fe136a4bf" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">変数が明示的にユニバーサル、グローバル、ローカルのいずれかに設定されている場合は、その設定が尊重されます。同じ名前の変数が別のスコープに存在する場合、その変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="7fd2961197b45dfc25c896ad23c85e1abfcf8519" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope and has not been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">変数がスコープに明示的に設定されておらず、定義されていない場合、変数は現在実行中の関数に対してローカルになります。これは、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--local&lt;/code&gt; フラグを使用する場合とは異なることに注意してください。これらのフラグの1つが使用されている場合、変数は現在実行中の最も内側のブロックに対してローカルになりますが、これらがない場合、変数は関数に対してローカルになります。関数が実行されていない場合、変数はグローバルになります。</target>
        </trans-unit>
        <trans-unit id="6e687f439d700aaa30c67d0c1c2079a9950e1712" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">変数が明示的にスコープに設定されておらず、以前に定義されていた場合、変数のスコープは変更されません。</target>
        </trans-unit>
        <trans-unit id="326eb232490e8df93b49fd2c3a89fde63906ed77" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or not exported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">エクスポートするかしないかが明示的に設定されておらず、これまでに一度も定義されたことがない変数の場合、その変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="ef107fe0701094bebbf7a6322c1155614a1be3ba" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">変数が明示的にエクスポートまたはエクスポートされないように設定されておらず、一度も定義されたことがない場合、変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="bd6c17ea05cd6c81f352d96759e2622e4a16e84b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">変数が明示的にユニバーサル、グローバル、またはローカルに設定されておらず、かつて定義されたことがない場合、変数は現在実行中の関数に対してローカルになります。これは、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--local&lt;/code&gt; フラグの使用とは異なることに注意してください。これらのフラグの1つが使用される場合、変数は現在実行されている最も内側のブロックに対してローカルになりますが、これらがない場合、変数は関数に対してローカルになります。関数が実行されていない場合、変数はグローバルになります。</target>
        </trans-unit>
        <trans-unit id="8b2d1734ef9bdd7bd6d21bc623798a68378e6c8b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.</source>
          <target state="translated">変数がユニバーサル、グローバル、ローカルのいずれかに明示的に設定されておらず、以前に定義されていた場合は、以前の変数スコープが使用されます。</target>
        </trans-unit>
        <trans-unit id="ae5e31cb3d02690bd43a99dc6a823c8568d4b6e8" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">変数がユニバーサル、グローバル、ローカルのいずれかに明示的に設定されていなくても、以前に定義されていた場合、変数のスコープは変更されません。</target>
        </trans-unit>
        <trans-unit id="6ccd9990afce6a9aaaa05eb9827a340fd925feb1" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.</source>
          <target state="translated">変数が明示的にエクスポートされるかどうかが設定されておらず、以前に定義されていた場合、その変数の以前のエクスポートルールが保持されます。</target>
        </trans-unit>
        <trans-unit id="ae603cd6be44b99d51c1566501087ce7b225183b" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.</source>
          <target state="translated">変数に複数の値が設定されている場合は、指定された要素を持つリストになります。変数にゼロ要素が設定されている場合は、ゼロ要素を持つリストになります。</target>
        </trans-unit>
        <trans-unit id="72e2106717a7a37128914da8765dc2c6c6697b14" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.</source>
          <target state="translated">変数に複数の値が設定されている場合は、指定された要素を持つ配列になります。変数に0要素が設定されている場合は、指定された要素を持つ配列になります。</target>
        </trans-unit>
        <trans-unit id="a723f0fea3c45c67807883ef6059438866b12547" translate="yes" xml:space="preserve">
          <source>If after expansion there is nothing between the braces, the argument will be removed (see &lt;a href=&quot;#cartesian-product&quot;&gt;the cartesian product section&lt;/a&gt;):</source>
          <target state="translated">拡張後、中括弧の間に何もない場合、引数は削除されます（&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積のセクションを参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7f805483966bd1b92bb16fa0e48ac91c14f18567" translate="yes" xml:space="preserve">
          <source>If an error occurs during argparse processing it will exit with a non-zero status and print error messages to stderr.</source>
          <target state="translated">argparseの処理中にエラーが発生した場合は、0以外のステータスで終了し、エラーメッセージをstderrに表示します。</target>
        </trans-unit>
        <trans-unit id="f3bb201c1119b5848ebfda84c47d1e1698174af5" translate="yes" xml:space="preserve">
          <source>If any non-option parameters are given, the definition of the specified functions are printed.</source>
          <target state="translated">オプション以外のパラメータが与えられた場合、指定された関数の定義が出力されます。</target>
        </trans-unit>
        <trans-unit id="dcc764ad71040642c2ae2b7ce376987c8f357ee1" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;#source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">（組み込みの&lt;a href=&quot;#source&quot;&gt;ソース&lt;/a&gt;を使用して）ファイルのソース中にexitが呼び出されると、ファイルの残りの部分はスキップされますが、シェル自体は終了しません。</target>
        </trans-unit>
        <trans-unit id="2ad30bb6821fad0de41f3c375fba71f6a9c37c25" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">（組み込みの&lt;a href=&quot;source#cmd-source&quot;&gt;ソース&lt;/a&gt;を使用して）ファイルのソース中にexitが呼び出された場合、ファイルの残りの部分はスキップされますが、シェル自体は終了しません。</target>
        </trans-unit>
        <trans-unit id="3068ba7bd98e36689eab0ca26911e82ce1011087" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;' or '&lt;code&gt;~&lt;/code&gt;', fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">魚が特定の名前のコマンドを見つけることができず、「」で始まる場合 &lt;code&gt;.&lt;/code&gt; '、' &lt;code&gt;/&lt;/code&gt; 'または' &lt;code&gt;~&lt;/code&gt; '、fishはその名前のディレクトリが存在するかどうかをテストします。その場合、作業ディレクトリを変更することを暗黙的に想定しています。たとえば、ホームディレクトリに切り替える最も速い方法は、単に &lt;code&gt;~&lt;/code&gt; を押してEnter キーを押すことです。</target>
        </trans-unit>
        <trans-unit id="08db4ab1c440a3e304e3453045348ee442c8b3f8" translate="yes" xml:space="preserve">
          <source>If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:</source>
          <target state="translated">fishがデフォルトのシェルで、例えばbashなど別のシェル言語で書かれたコマンドをインターネットからコピーしたい場合は、以下のように進めます。</target>
        </trans-unit>
        <trans-unit id="779713b50e0b6db32e410c35dd906b7eab469c0a" translate="yes" xml:space="preserve">
          <source>If invoked with multiple arguments instead of input, &lt;code&gt;string collect&lt;/code&gt; preserves each argument separately, where the number of output arguments is equal to the number of arguments given to &lt;code&gt;string collect&lt;/code&gt;.</source>
          <target state="translated">代わりに、入力の複数の引数で呼び出された場合、 &lt;code&gt;string collect&lt;/code&gt; 個別の引数を保持し、ここで、出力引数の数は、与えられた引数の数に等しい &lt;code&gt;string collect&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd1e21aed552d458b2c10cb3ad02fe6a085212c8" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">制限が指定されている場合、それは指定されたリソースの新しい値です。オプションが指定されていない場合、 &lt;code&gt;-f&lt;/code&gt; が想定されます。値はキロバイト単位ですが、 &lt;code&gt;-t&lt;/code&gt; は秒単位であり、 &lt;code&gt;-n&lt;/code&gt; と &lt;code&gt;-u&lt;/code&gt; はスケーリングされていない値です。無効なオプションまたは引数が指定されていない限り、または新しい制限の設定中にエラーが発生しない限り、終了ステータスは0です。</target>
        </trans-unit>
        <trans-unit id="9365afaebdcba814bae204eaa9cb6846f923618b" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">制限が指定されている場合は、指定されたリソースの新しい値です。オプションを指定しない場合、 &lt;code&gt;-f&lt;/code&gt; が想定されます。値はキロバイト単位です。ただし、秒単位の &lt;code&gt;-t&lt;/code&gt; と、スケーリングされていない値である &lt;code&gt;-n&lt;/code&gt; および &lt;code&gt;-u&lt;/code&gt; を除きます。無効なオプションまたは引数が指定されない限り、または新しい制限の設定中にエラーが発生しない限り、戻りステータスは0です。</target>
        </trans-unit>
        <trans-unit id="ca3ffe9826b96a93254e7258c40cd2d913b9941e" translate="yes" xml:space="preserve">
          <source>If neither a pid nor a process name is specified, the command waits for all background jobs.</source>
          <target state="translated">pid やプロセス名が指定されていない場合、コマンドはすべてのバックグラウンドジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="6620b792aa7c50700f6a7c83a134de00e5936216" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the specified &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided without &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; が指定されていない場合、すべてのバインディング（または指定された &lt;code&gt;MODE&lt;/code&gt; のバインディングのみ）が出力されます。 &lt;code&gt;COMMAND&lt;/code&gt; なしで &lt;code&gt;SEQUENCE&lt;/code&gt; が提供されている場合、そのシーケンスに一致するバインディングのみが出力されます。</target>
        </trans-unit>
        <trans-unit id="319b10cf51c7aaf0a0ad28a0d4b4f6c772504c25" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name '&lt;code&gt;-&lt;/code&gt;' is used, stdin will be read.</source>
          <target state="translated">ファイルが指定されておらず、標準入力が端末でない場合、またはファイル名「 &lt;code&gt;-&lt;/code&gt; 」が使用されている場合、標準入力が読み取られます。</target>
        </trans-unit>
        <trans-unit id="193caf7005f5652feb5a621fdb872e8d40cb588f" translate="yes" xml:space="preserve">
          <source>If no option to determine how to split like &lt;code&gt;--delimiter&lt;/code&gt;, &lt;code&gt;--line&lt;/code&gt; or &lt;code&gt;--tokenize&lt;/code&gt; is given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">以下のように分割する方法を決定する場合はオプションなし &lt;code&gt;--delimiter&lt;/code&gt; 、 &lt;code&gt;--line&lt;/code&gt; または &lt;code&gt;--tokenize&lt;/code&gt; が与えられ、変数 &lt;code&gt;IFS&lt;/code&gt; は、上のスプリットへの文字のリストとして使用されています。 &lt;code&gt;IFS&lt;/code&gt; の使用に依存することは非推奨であり、この動作は将来のバージョンで削除される予定です。 &lt;code&gt;IFS&lt;/code&gt; のデフォルト値には、スペース、タブ、および改行文字が含まれます。特別な場合として、 &lt;code&gt;IFS&lt;/code&gt; が空の文字列に設定されている場合、入力の各文字は個別のトークンと見なされます。</target>
        </trans-unit>
        <trans-unit id="e05e6aafbb793ade9f477fd1403ff37aea85d34f" translate="yes" xml:space="preserve">
          <source>If no piping or other compound shell constructs are required, variable-expansion-as-command, as in &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt;, is also an option.</source>
          <target state="translated">配管やその他の複合シェル構造が必要ない場合は、 &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt; - laのようにコマンドとしてvariable-expansion- la; $ cmdもオプションです。</target>
        </trans-unit>
        <trans-unit id="dcfe8801c42ff77994dd55c54562f05ad1157dea" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt;). If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">プロセスが指定されていない場合、最後に使用されたジョブが削除されます（&lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt;や&lt;a href=&quot;fg#cmd-fg&quot;&gt;fgなど&lt;/a&gt;）。1つ以上のPIDが指定されている場合、指定されたプロセスIDを持つジョブはジョブリストから削除されます。無効なジョブは無視され、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="536986c9ac77b0a65c848619315ad13a2f046d5c" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;code&gt;bg&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;). If one or more &lt;code&gt;PID&lt;/code&gt;s are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">プロセスが指定されていない場合、最後に使用されたジョブが削除されます（ &lt;code&gt;bg&lt;/code&gt; や &lt;code&gt;fg&lt;/code&gt; など）。1つ以上の &lt;code&gt;PID&lt;/code&gt; が指定されている場合、指定されたプロセスIDのジョブはジョブリストから削除されます。無効なジョブは無視され、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="713bf8682430a51e2b7af1a6d836f8e75fd1bdaa" translate="yes" xml:space="preserve">
          <source>If no variable names are provided, &lt;code&gt;read&lt;/code&gt; enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:</source>
          <target state="translated">変数名が指定されていない場合、 &lt;code&gt;read&lt;/code&gt; は、標準入力から標準出力へのリダイレクトを提供する特別なケースに入り、コマンド置換に役立ちます。たとえば、以下のフィッシュシェルコマンドを使用すると、コマンド自体にハードコーディングするのではなく、コンソールからコマンドライン引数を介して提供する必要のあるデータを読み取ることができるため、コマンドをさまざまなコンテキストでさまざまなコンテキストでそのまま再利用できます。値を入力し、機密性の高いテキストがシェルの履歴に含まれないようにします。</target>
        </trans-unit>
        <trans-unit id="f6b617c0f8612fdf2ea16aba5ec62984acf5c44a" translate="yes" xml:space="preserve">
          <source>If only 123 and 789 exist, it will still background them and print an error about 456.</source>
          <target state="translated">123と789だけが存在する場合でも、それらをバックグラウンドにして456についてのエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="e5b23704e06de8e7cf41b466203c3d1a05734047" translate="yes" xml:space="preserve">
          <source>If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.</source>
          <target state="translated">set が引数なしで呼ばれた場合、すべてのシェル変数の名前と値がソートされた順に表示されます。スコープフラグやエクスポートフラグが指定されている場合は、 指定されたスコープにマッチする変数のみが表示されます。</target>
        </trans-unit>
        <trans-unit id="c9d5f4fcbf5a20e0012582eafdf56b977cf064da" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.</source>
          <target state="translated">ターミナルの256色サポートを terminfo が報告している場合、256色サポートは常に有効になります。</target>
        </trans-unit>
        <trans-unit id="302a7adb7b2bb424535b98eb0c4ef6539ea7cb20" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, support will always be enabled. To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">terminfoが端末の256色サポートを報告する場合、サポートは常に有効になります。カラーパレットの問題をデバッグするには、端末のterminfoで色の数を確認するために &lt;code&gt;tput colors&lt;/code&gt; が役立つ場合があります。 &lt;code&gt;fish -d2&lt;/code&gt; として起動されたFishには、使用中のカラーサポートモードを示す診断メッセージが含まれます。</target>
        </trans-unit>
        <trans-unit id="4d30c96739992df19433df0a6e1c59dfb95af762" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can</source>
          <target state="translated">ディレクトリの探索に時間がかかる場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="34986c35bab0e2df661c76619902534fb332f46c" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; out of it.</source>
          <target state="translated">そのディレクトリトラバーサルに長い時間がかかる場合は、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="ffef75da37c5f07daa061c4afec5f2616551ca39" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press</source>
          <target state="translated">場合は &lt;code&gt;$VISUAL&lt;/code&gt; 環境変数が設定され、それが編集にプログラムの機能として使用されます。場合は &lt;code&gt;$VISUAL&lt;/code&gt; 設定されていないが、 &lt;code&gt;$EDITOR&lt;/code&gt; セットされ、それが使用されます。それ以外の場合は、組み込みのエディターが使用されます。組み込みエディターを使用してリテラル改行を入力するには、を押す必要があることに注意してください</target>
        </trans-unit>
        <trans-unit id="e3d023db5ee6df47941a2ca566209f059001722c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt;. Pressing &lt;b&gt;Enter&lt;/b&gt; signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">場合は &lt;code&gt;$VISUAL&lt;/code&gt; 環境変数が設定され、それが編集にプログラムの機能として使用されます。場合は &lt;code&gt;$VISUAL&lt;/code&gt; 設定されていないが、 &lt;code&gt;$EDITOR&lt;/code&gt; セットされ、それが使用されます。それ以外の場合は、組み込みのエディターが使用されます。組み込みのエディタを使用してリテラルの改行を入力するには、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter &lt;/b&gt;&lt;em&gt;キー&lt;/em&gt;を押す必要があることに注意して&lt;b&gt;ください&lt;/b&gt;。&lt;b&gt;Enterキーを&lt;/b&gt;押すと、関数の編集が完了したことが通知されます。これは、emacsやvimなどの外部エディターには適用されません。</target>
        </trans-unit>
        <trans-unit id="e8fb943c750f92e3917384bc05f81b775bd8db88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--delimiter&lt;/code&gt; argument is not given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">&lt;code&gt;--delimiter&lt;/code&gt; 引数が指定されていない場合、変数 &lt;code&gt;IFS&lt;/code&gt; は分割する文字のリストとして使用されます。 &lt;code&gt;IFS&lt;/code&gt; の使用に依存することは非推奨であり、この動作は将来のバージョンで削除される予定です。 &lt;code&gt;IFS&lt;/code&gt; のデフォルト値には、スペース、タブ、および改行文字が含まれています。特殊なケースとして、 &lt;code&gt;IFS&lt;/code&gt; が空の文字列に設定されている場合、入力の各文字は個別のトークンと見なされます。</target>
        </trans-unit>
        <trans-unit id="b9a1bc2ff2f56d3990f495529faa7ba44ead0455" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of the key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys.) If used in conjunction with the &lt;code&gt;-s&lt;/code&gt; switch, &lt;code&gt;bind&lt;/code&gt; will silently ignore bindings to named keys that are not found in termcap for the current &lt;code&gt;$TERMINAL&lt;/code&gt;, otherwise a warning is emitted.</source>
          <target state="translated">&lt;code&gt;-k&lt;/code&gt; スイッチを使用する場合、シーケンスの代わりにキーの名前（「down」、「up」、「backspace」など）が使用されます。使用される名前は対応するcurses変数と同じですが、「key_」接頭辞がありません。（詳細については、 &lt;code&gt;terminfo(5)&lt;/code&gt; を参照してください。または、使用可能なすべての名前付きキーのリストについては、 &lt;code&gt;bind --key-names&lt;/code&gt; を使用してください。）- &lt;code&gt;-s&lt;/code&gt; スイッチと一緒に使用すると、 &lt;code&gt;bind&lt;/code&gt; は、見つからない名前付きキーへのバインディングを暗黙的に無視します現在の &lt;code&gt;$TERMINAL&lt;/code&gt; termcap では、それ以外の場合は警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="1d7b9b3be6cec368c8849bf11af8487da853a633" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current directory history is also displayed.</source>
          <target state="translated">場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--list&lt;/code&gt; フラグが指定され、現在のディレクトリ履歴も表示されます。</target>
        </trans-unit>
        <trans-unit id="4cfc35a3a98ed01dd389efdde71deb0bf3c6669a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current history is also displayed.</source>
          <target state="translated">場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--list&lt;/code&gt; フラグが指定され、現在の履歴も表示されます。</target>
        </trans-unit>
        <trans-unit id="492a67bd7712dda8e66c7c5fc44c0836f4b18f3a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.</source>
          <target state="translated">場合は &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; フラグはすぐに最初のジョブが完了するほど、コマンドのリターンを提供します。指定されていない場合は、すべてのジョブが完了した後に戻ります。</target>
        </trans-unit>
        <trans-unit id="63b9207ee5d979afeb85211115a3c6ffa7012a71" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/tmp&lt;/code&gt; directory exists, copy the &lt;code&gt;/etc/motd&lt;/code&gt; file to it:</source>
          <target state="translated">&lt;code&gt;/tmp&lt;/code&gt; ディレクトリが存在する場合は、 &lt;code&gt;/etc/motd&lt;/code&gt; ファイルをそこにコピーします。</target>
        </trans-unit>
        <trans-unit id="c3b856c7f49407f5bd18390ec22c0a975e0942a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BROWSER&lt;/code&gt; environment variable is set, it will be used as the name of the web browser to open instead of the system default.</source>
          <target state="translated">場合は &lt;code&gt;BROWSER&lt;/code&gt; 環境変数が設定され、システムのデフォルトの代わりに開くために、Webブラウザの名前として使用されます。</target>
        </trans-unit>
        <trans-unit id="3debf54dad8f4dc6d939e041eacf2dbfc04ad3d0" translate="yes" xml:space="preserve">
          <source>If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.</source>
          <target state="translated">環境変数browserが設定されている場合は、ドキュメントを表示するために使用されます。そうでない場合、fishは適切なブラウザを探します。</target>
        </trans-unit>
        <trans-unit id="aa6fc1ea4246a9f77c10ddff36e9849dd9022bcd" translate="yes" xml:space="preserve">
          <source>If the above code was run with &lt;code&gt;$animal&lt;/code&gt; set to &lt;code&gt;whale&lt;/code&gt;, the output would be &lt;code&gt;mammal&lt;/code&gt;.</source>
          <target state="translated">上記のコードが &lt;code&gt;$animal&lt;/code&gt; を &lt;code&gt;whale&lt;/code&gt; に設定して実行された場合、出力は &lt;code&gt;mammal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d75d0af6becad51e324987bba4dbf96c51e8300a" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, it is necessary to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; in order to tell fish that the function should not call itself, but rather a command with the same name. Failing to do so will cause infinite recursion bugs.</source>
          <target state="translated">エイリアスがエイリアスコマンドと同じ名前である場合、関数にそれ自体を呼び出すのではなく、同じ名前のコマンドを呼び出す必要があることを魚に伝えるために、プログラムの呼び出しの前に &lt;code&gt;command&lt;/code&gt; を付ける必要があります。そうしないと、無限の再帰バグが発生します。</target>
        </trans-unit>
        <trans-unit id="49ebc34132e7660866a77bb4bd002951a641b8a0" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, you need to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).</source>
          <target state="translated">エイリアスの名前がエイリアスコマンドと同じである場合は、プログラムの呼び出しの前に &lt;code&gt;command&lt;/code&gt; を付けて、関数がそれ自体を呼び出すのではなく、同じ名前のコマンドを呼び出す必要があることをfishに通知する必要があります。そうするのを忘れると、関数は時間の終わりまで自分自身を呼び出します。通常、魚はこれを理解するのに十分賢く、そうすることを控えます（これはあなたの利益になることを願っています）。</target>
        </trans-unit>
        <trans-unit id="e5185e556f9b263d1410cf1a894fc4a29463388d" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press</source>
          <target state="translated">欲しい議論が歴史の中でずっと前のものであれば(例えば、2行前のもの-それはたくさんの言葉です!)、それの任意の部分を入力してから</target>
        </trans-unit>
        <trans-unit id="ad3ed0aa46a2e24462a85265faa22a817cd5bf4f" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt;. This will show only arguments containing that part and you will get what you want much faster. Try it out, this is very convenient!</source>
          <target state="translated">あなたが欲しい引数がはるかに戻って歴史の中である場合（例えばバック2つのライン！ -言葉の多くはだ）、任意のその一部、その後、プレス型&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;。これにより、その部分を含む引数のみが表示され、必要なものがより速く取得されます。試してみてください、これはとても便利です！</target>
        </trans-unit>
        <trans-unit id="8b1303483eab8a0aafe5607e65c79febb8c3aca1" translate="yes" xml:space="preserve">
          <source>If the commandline contains</source>
          <target state="translated">コマンドラインに</target>
        </trans-unit>
        <trans-unit id="e3f1eb54148bd5719468d4632589d32c09c11b49" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press</source>
          <target state="translated">コマンドラインを読み込む場合は &lt;code&gt;cd m&lt;/code&gt; 、上にカーソルを置き &lt;code&gt;m&lt;/code&gt; 文字を押します</target>
        </trans-unit>
        <trans-unit id="4b1c190c6ad0436a0fd3fb383f1281a2e816bf89" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; to search for previously typed words containing 'm'.</source>
          <target state="translated">コマンドラインを読み込む場合は &lt;code&gt;cd m&lt;/code&gt; 、上にカーソルを置き &lt;code&gt;m&lt;/code&gt; 文字を押して&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;「M」を含む、以前に入力した単語を検索します。</target>
        </trans-unit>
        <trans-unit id="aec97b1cdbedc052d45f0ca8a3886ba07331192c" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output 'abar1 abar2 abar3 afoo1 afoo2 afoo3'.</source>
          <target state="translated">現在のディレクトリにファイル「foo」と「bar」が含まれている場合、コマンド &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; は「abar1 abar2 abar3 afoo1 afoo2 afoo3」を出力します。</target>
        </trans-unit>
        <trans-unit id="3b9446dcdf384793d9dbf8ed3d708bf58cbc9557" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt;.</source>
          <target state="translated">現在のディレクトリにファイル「foo」と「bar」が含まれている場合、コマンド &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; は &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="ea966f7daecf90f40c09560ec0ace32a38679be8" translate="yes" xml:space="preserve">
          <source>If the end is smaller than the start, or the start is larger than the end, range expansion will go in reverse. This is unless exactly one of the given indices is negative, so the direction doesn't change if the list has fewer elements than expected.</source>
          <target state="translated">末尾が開始よりも小さい場合、または開始が終了よりも大きい場合、範囲展開は逆になります。これは、与えられたインデックスの正確に1つが負の値でない限り、リストの要素数が予想よりも少ない場合には方向は変わりません。</target>
        </trans-unit>
        <trans-unit id="9ac01aa8bdf61c4705d1b573ca6b14e107487f86" translate="yes" xml:space="preserve">
          <source>If the expression is successfully evaluated and doesn't over/underflow or return NaN the return &lt;code&gt;status&lt;/code&gt; is zero (success) else one.</source>
          <target state="translated">式が正常に評価され、オーバーフロー/アンダーフローまたはNaNを返さない場合、戻り &lt;code&gt;status&lt;/code&gt; は0（成功）、それ以外は1です。</target>
        </trans-unit>
        <trans-unit id="5cfff00b5bb7a05a9b5b06be91a9cc46be32a1f7" translate="yes" xml:space="preserve">
          <source>If the first and second parts are skipped, they are assumed to be &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;, respectively. As an example, &lt;code&gt;r,u+w&lt;/code&gt; means all users should have read access and the file owner should also have write access.</source>
          <target state="translated">最初の部分と2番目の部分をスキップ &lt;code&gt;a&lt;/code&gt; と、それぞれaと &lt;code&gt;=&lt;/code&gt; と見なされます。例として、 &lt;code&gt;r,u+w&lt;/code&gt; は、すべてのユーザーが読み取りアクセス権を持ち、ファイルの所有者も書き込みアクセス権を持つ必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="51826fa22bf5b5c7586ce652a67a6e4318f4ac64" translate="yes" xml:space="preserve">
          <source>If the function definition is changed, all running shells will automatically reload the altered version.</source>
          <target state="translated">関数の定義が変更された場合、実行中のすべてのシェルは自動的に変更後のバージョンをリロードします。</target>
        </trans-unit>
        <trans-unit id="154cdf4f784ed79e1fcb74335c0c901b6cf4ac90" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will constrain the recall to lines that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">欲しい行が履歴の中でかなり後ろにある場合は、その行の任意の部分を入力してから、Upを1回以上押します。こうすることで、このテキストを含む行への呼び出しが制限され、目的の行への到達が格段に速くなります。これは、「!vi」や「!bar.c」などの代わりになります。</target>
        </trans-unit>
        <trans-unit id="70006a59c6935a4438f9d0040be162c8ee9ec5a8" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible.</source>
          <target state="translated">リストが表示されている場合、control-S（または &lt;code&gt;pager-toggle-search&lt;/code&gt; バインディング）を押すと、リストをフィルタリングできます。Shift-tab（または &lt;code&gt;complete-and-search&lt;/code&gt; バインディング）は、検索フィールドをすぐに表示して完了をトリガーします。</target>
        </trans-unit>
        <trans-unit id="d76a8116548a88ed416d142b0ea322f0ccb59543" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible. These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">リストが表示されている場合は、control-S（または &lt;code&gt;pager-toggle-search&lt;/code&gt; バインディング）を押すと、リストをフィルタリングできます。Shift-tab（または &lt;code&gt;complete-and-search&lt;/code&gt; バインディング）は、検索フィールドがすぐに表示された状態で完了をトリガーします。これらは、 &lt;code&gt;fish&lt;/code&gt; が提供する汎用タブ補完です。</target>
        </trans-unit>
        <trans-unit id="275b4b014bd30e8806c2588d2da955cb7daf020a" translate="yes" xml:space="preserve">
          <source>If the operation fails, an error will be reported.</source>
          <target state="translated">操作に失敗した場合は、エラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="29df263ac386a0b20ba5f9a3e6fe000d33b8c6f2" translate="yes" xml:space="preserve">
          <source>If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear and no additional splitting on newlines takes place.</source>
          <target state="translated">最後のステップとして出力が&lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;stringsplitまたはstringsplit0に&lt;/a&gt;パイプされる場合、それらの分割は表示されたとおりに使用され、改行で追加の分割は行われません。</target>
        </trans-unit>
        <trans-unit id="e4c01f00f1709a1d845be8af766e2896516906fa" translate="yes" xml:space="preserve">
          <source>If the path is invalid no translated path will be written to stdout and an error will be reported.</source>
          <target state="translated">パスが無効な場合、翻訳されたパスは標準出力に書き込まれず、エラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="e1e2f0cd5d9c3189924438eab165e537469221dd" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">指定されたファイル記述子が端末装置である場合、コマンドの終了ステータスはゼロである。それ以外の場合、終了ステータスはゼロではありません。標準エラーにはメッセージは出力されません。</target>
        </trans-unit>
        <trans-unit id="e907fd3510899683ab1ac3f96d2aac1979d9258b" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a tty, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">指定されたファイル記述子が tty の場合、コマンドの終了ステータスはゼロである。それ以外の場合、終了ステータスはゼロではありません。標準エラーにはメッセージは出力されません。</target>
        </trans-unit>
        <trans-unit id="fe06c7e257d873be32fd7989f5055c27083aeab6" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;../index#variables-lists&quot;&gt;variable list&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">ユーザーが関数の後に追加の引数を入力すると、それらは環境&lt;a href=&quot;../index#variables-lists&quot;&gt;変数リスト&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 挿入されます。場合 &lt;code&gt;--argument-names&lt;/code&gt; オプションが提供され、引数は、そのオプションで指定した名前に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="bd0e2ed527cbeaac8bf34e5481dc729ba00211c1" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;index#variables-arrays&quot;&gt;variable array&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">ユーザーが関数の後に追加の引数を入力すると、それらは環境&lt;a href=&quot;index#variables-arrays&quot;&gt;変数配列&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 挿入されます。場合 &lt;code&gt;--argument-names&lt;/code&gt; オプションが提供され、引数は、そのオプションで指定した名前に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="89093e95575f5c91e69c231cc514a5f888c355b9" translate="yes" xml:space="preserve">
          <source>If the variable $animal contains the name of an animal, the following code would attempt to classify it:</source>
          <target state="translated">変数 $animal に動物の名前が含まれている場合、以下のコードはそれを分類しようとします。</target>
        </trans-unit>
        <trans-unit id="081ef0f3bbeaf93e50b97aca197ba4dab7103ab9" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;MANPATH&lt;/code&gt; is defined and not empty, print the contents. (If &lt;code&gt;MANPATH&lt;/code&gt; is not defined, then it will expand to zero arguments, unless quoted.)</source>
          <target state="translated">変数 &lt;code&gt;MANPATH&lt;/code&gt; が定義されていて空でない場合は、内容を出力します。（ &lt;code&gt;MANPATH&lt;/code&gt; が定義されていない場合、引用されない限り、引数はゼロに展開されます。）</target>
        </trans-unit>
        <trans-unit id="b85b340b71b7dd9ea477da93a9f45e28372572db" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more array elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those array elements specified will be changed. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">変数名が &lt;code&gt;PATH[1 3 7]&lt;/code&gt; などの1つ以上の配列要素の場合、指定された配列要素のみが変更されます。配列変数を展開または割り当てるときに負のインデックスを指定すると、インデックスは配列の最後から計算されます。たとえば、インデックス-1は配列の最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="2711332599fb67538cfe4343e904027c558ff897" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more list elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="translated">変数名が &lt;code&gt;PATH[1 3 7]&lt;/code&gt; などの1つ以上のリスト要素である場合、指定されたリスト要素のみが変更されます。リスト変数を展開または割り当てるときに負のインデックスを指定すると、インデックスはリストの最後から計算されます。たとえば、インデックス-1は、リストの最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="788fcc2dc7b9ec9c743aa985b73d706a1c941ace" translate="yes" xml:space="preserve">
          <source>If there are multiple files with the same name in these directories, only the first will be executed. They are executed in order of their filename, sorted (like globs) in a natural order (i.e. &quot;01&quot; sorts before &quot;2&quot;).</source>
          <target state="translated">これらのディレクトリに同じ名前のファイルが複数ある場合、最初のファイルのみが実行されます。これらのファイルは、ファイル名の順に実行され、自然な順序でソートされます (グロブのように)(例:&quot;01&quot; は &quot;2&quot; の前にソートされます)。</target>
        </trans-unit>
        <trans-unit id="37b3f6c1d9e2443aab8662a7a439797d66881a18" translate="yes" xml:space="preserve">
          <source>If there is no function called &lt;code&gt;NAME&lt;/code&gt; a new function will be created with the specified name</source>
          <target state="translated">&lt;code&gt;NAME&lt;/code&gt; という関数がない場合は、指定した名前で新しい関数が作成されます</target>
        </trans-unit>
        <trans-unit id="6d5cfe09681412194f4ba98b5cd9ee3fb9a19be4" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element.</source>
          <target state="translated">中括弧とカンマまたは2つのカンマの間に何もない場合は、空の要素として解釈されます。</target>
        </trans-unit>
        <trans-unit id="bda5467f9834c7878e79dd21cd4d2f3d7dd7c4a6" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element:</source>
          <target state="translated">中括弧とカンマまたは2つのカンマの間に何もない場合は、空の要素として解釈されます。</target>
        </trans-unit>
        <trans-unit id="24adce4068128d584888031a1553f03853a858ae" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them</source>
          <target state="translated">複数の可能性がある場合は、それらをリストアップします。</target>
        </trans-unit>
        <trans-unit id="afe6214497e3e493ce7fed66861473c8f9d5c2d3" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them:</source>
          <target state="translated">複数の可能性がある場合は、それをリストアップします。</target>
        </trans-unit>
        <trans-unit id="463c7b41266bb02e7be790b635471da72331d8c9" translate="yes" xml:space="preserve">
          <source>If two braces do not contain a &quot;,&quot; or a variable expansion, they will not be expanded in this manner:</source>
          <target state="translated">2つの中括弧に「,」や変数展開が含まれていない場合は、このように展開されません。</target>
        </trans-unit>
        <trans-unit id="1b4ecf432926bdf9219384030390dce4a62ae339" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発していて、プログラムに補完を同梱する場合は、それらを「ベンダー」の補完ディレクトリにインストールします。このパスはシステムによって異なるため、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用して、 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; の出力でこのパスを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3b96ff834aa659d4dcfe109c2f08409908bba2c" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the pkgconfig framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">別のプログラムを開発していて、プログラムと一緒にコンプリーションを出荷したい場合は、それらを「ベンダー」コンプリーションディレクトリにインストールします。このパスはシステムごとに異なる可能性があるため、pkgconfigフレームワークを使用して、 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; 出力でこのパスを検出する必要があります。他のディストリビューターが簡単に変更する必要があるかもしれないので、インストールシステムはpkgconfigパスをオーバーライドするカスタムパスをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="a2e3bcc2c86a34d726c99da6041e118aebc6aab5" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish-specific configuration. However, if they are absolutely required, you may install them to the &quot;vendor&quot; configuration directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発している場合、魚シェルのすべてのユーザーに対して実行される構成をシステムにインストールすることができます。これはお勧めできません。注意深く書かれていないと、副作用が発生したり、シェルの起動が遅くなる可能性があります。さらに、他のシェルのユーザーは、Fish固有の構成から恩恵を受けません。ただし、それらが絶対に必要な場合は、「ベンダー」構成ディレクトリにインストールできます。このパスはシステムによって異なる可能性があるため、 &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt; の出力でこのパスを検出するには、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4916db32b6aa8cbf9c1ffbb01d73d5df4a8870cc" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発している場合は、魚の殻のすべてのユーザーが使用できる機能をシステムにインストールすることができます。これらは、「ベンダー」関数ディレクトリにインストールできます。このパスはシステムによって異なる可能性があるため、 &lt;code&gt;pkgconfig&lt;/code&gt; のフレームワークを使用して、 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; の出力でこのパスを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="24d577aff02c57ccc535834fabc2b9ff18d8c605" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">別のプログラムを開発している場合は、フィッシュシェルのすべてのユーザーが使用できる関数をシステムにインストールすることをお勧めします。それらは「ベンダー」機能ディレクトリにインストールできます。このパスはシステムごとに異なる可能性があるため、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用して、 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; 出力でこのパスを検出する必要があります。他のディストリビューターが簡単に変更する必要があるかもしれないので、インストールシステムはpkgconfigパスをオーバーライドするカスタムパスをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="423e276545b7dd53d72e587423056db3d40ae703" translate="yes" xml:space="preserve">
          <source>If you are familiar with these, it is useful to know how &lt;code&gt;string&lt;/code&gt; differs from them.</source>
          <target state="translated">これらに精通している場合は、 &lt;code&gt;string&lt;/code&gt; がそれらとどのように異なるかを知っておくと便利です。</target>
        </trans-unit>
        <trans-unit id="2c8709afb8c37b08fcb75856aca6d9778e8772cd" translate="yes" xml:space="preserve">
          <source>If you are just interested in success or failure, you can run the command directly as the if-condition:</source>
          <target state="translated">成功か失敗かだけに興味があるのであれば、if条件として直接実行しても良いでしょう。</target>
        </trans-unit>
        <trans-unit id="6b4679db7ed1ee15be09b7a815eb852cdada744e" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the array will be written as separate items. This means you can easily iterate over an array using this syntax:</source>
          <target state="translated">括弧を使用しない場合は、配列のすべての要素が別の項目として記述されます。つまり、この構文を使って簡単に配列を反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="80a3062c14429e2bf432a524df5b36623d385389" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the list will be written as separate items. This means you can easily iterate over a list using this syntax:</source>
          <target state="translated">括弧を使用しない場合、リストのすべての要素は別の項目として記述されます。つまり、この構文を使ってリストを簡単に反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="21121c72874a1f506d3167db9734fb72635e8aba" translate="yes" xml:space="preserve">
          <source>If you do this via a function it should be defined with the &lt;code&gt;--no-scope-shadowing&lt;/code&gt; flag. Otherwise it won't have access to those variables.</source>
          <target state="translated">関数を使用してこれを行う場合は、 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; フラグを使用して定義する必要があります。そうしないと、これらの変数にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="cf34bb52e96a3b222773c87c97bf5316f69250b8" translate="yes" xml:space="preserve">
          <source>If you enabled the informative status, there are numerous customization options, which can be controlled with fish variables.</source>
          <target state="translated">情報提供ステータスを有効にした場合、多数のカスタマイズオプションがあり、それは魚の変数で制御することができます。</target>
        </trans-unit>
        <trans-unit id="76fc284188c8102e752b1bddb9f0226a85c1fbff" translate="yes" xml:space="preserve">
          <source>If you have a question not answered by this documentation, there are several avenues for help:</source>
          <target state="translated">このドキュメントで回答が得られない質問がある場合は、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="d5d69fd8cf3faf8da11aa1c87838469a40522c72" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what &lt;code&gt;fish&lt;/code&gt; does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">あなたが他のシェルの強力な理解を持って、そして何を知りたい場合は &lt;code&gt;fish&lt;/code&gt; 異なりん、魔法のフレーズを検索&lt;em&gt;他のシェルとは異なり、&lt;/em&gt;重要な違いを呼び出す際に使用します。</target>
        </trans-unit>
        <trans-unit id="d94e356f3d06bfc0847471bd8ac63c7fdd35e968" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.</source>
          <target state="translated">魚のための改善点があれば、メーリングリストやGitHubページから投稿することができます。</target>
        </trans-unit>
        <trans-unit id="3c91aaa3641347d6b92a729c32a7d96c010b6da2" translate="yes" xml:space="preserve">
          <source>If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in &lt;a href=&quot;#more-help&quot;&gt;Further help and development&lt;/a&gt;.</source>
          <target state="translated">一般的なUnixコマンドの新しい補完を書いた場合は、「&lt;a href=&quot;#more-help&quot;&gt;さらなるヘルプと開発」の&lt;/a&gt;指示に従って提出して、作品を共有することを検討してください。</target>
        </trans-unit>
        <trans-unit id="801a4bfeff44c78289adc6da559907889b10b7ff" translate="yes" xml:space="preserve">
          <source>If you installed a prepackaged version of fish, the package manager should have already done this for you.</source>
          <target state="translated">魚のプレパッケージ版をインストールした場合は、パッケージマネージャがすでにこれを行っているはずです。</target>
        </trans-unit>
        <trans-unit id="bacc9cf3f5b8aece5e2cb795329bd9e98f414229" translate="yes" xml:space="preserve">
          <source>If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):</source>
          <target state="translated">手動で(パッケージマネージャを使わずにコンパイルするなどして)fishをインストールした場合は、まず以下のコマンドを実行して、シェルのリストにfishを追加する必要があります(/usr/localにfishをインストールしたと仮定して)。</target>
        </trans-unit>
        <trans-unit id="cec1a3f92a8c27f32a8f6e6cb86da5cd7afb4270" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command.</source>
          <target state="translated">代わりに、中断されたジョブをバックグラウンドに配置する場合は、&lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="24dbcaa65ea45136e4556660a86f87890a258184" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">一時停止したジョブをバックグラウンドに置きたい場合は、&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="7d15c732f3a561ab865f45eb2b69dbf51b681f71" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">魚のヘルプに別のブラウザ(上記以外)を使いたい場合は、 fish_help_browser変数を設定することができます。この変数はリストとして設定することができ、最初の要素はブラウザコマンドで、残りの要素はブラウザオプションです。</target>
        </trans-unit>
        <trans-unit id="76575622923fc6960275a0372650f7e641f7d23c" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as an array, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">魚のヘルプに別のブラウザ(上記以外)を使いたい場合は、 fish_help_browser 変数を設定することができます。この変数は配列として設定することができ、最初の要素はブラウザコマンドで、残りの要素はブラウザオプションです。</target>
        </trans-unit>
        <trans-unit id="e98db4a9618c4e99c4cfeeb47be4e315b3159f68" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="translated">リスト変数の展開時や代入時に負のインデックスを指定すると、リストの末尾からインデックスが計算されます。例えば、インデックス-1はリストの最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="6b10dc2d52b83a3f3bcbb9eafde410131a7638e1" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">配列変数の展開時や代入時に負のインデックスを指定すると、配列の末尾からインデックスが計算されます。例えば、インデックス -1 は配列の最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="bef2a5da408bc0ccc604bb6e7c2ada1e1e368d28" translate="yes" xml:space="preserve">
          <source>If you specify both &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--contains&lt;/code&gt; the last flag seen is used.</source>
          <target state="translated">&lt;code&gt;--prefix&lt;/code&gt; と &lt;code&gt;--contains&lt;/code&gt; の両方を指定した場合、最後に表示されたフラグが使用されます。</target>
        </trans-unit>
        <trans-unit id="cfeb5cfbb4d7330298cd9ae2e7db448aa2300961" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--entire&lt;/code&gt; then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to &lt;code&gt;grep&lt;/code&gt; without the &lt;code&gt;-o&lt;/code&gt; flag). You can, obviously, achieve the same result by prepending and appending &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; depending on whether or not you have specified the &lt;code&gt;--regex&lt;/code&gt; flag. The &lt;code&gt;--entire&lt;/code&gt; flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the &lt;code&gt;string match&lt;/code&gt; clearer. Without &lt;code&gt;--entire&lt;/code&gt; and &lt;code&gt;--regex&lt;/code&gt;, a PATTERN will need to match the entire STRING before it will be reported.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--entire&lt;/code&gt; を指定すると、パターンに一致しないプレフィックスまたはサフィックスを含む、一致する各文字列が出力されます（ &lt;code&gt;-o&lt;/code&gt; フラグなしの &lt;code&gt;grep&lt;/code&gt; と同等）。 &lt;code&gt;--regex&lt;/code&gt; フラグを指定したかどうかに応じて、 &lt;code&gt;*&lt;/code&gt; または &lt;code&gt;.*&lt;/code&gt; 先頭に追加して追加することで、同じ結果を達成できることは明らかです。 &lt;code&gt;--entire&lt;/code&gt; フラグは、単にそのやり方でパターンを複雑にしての意図作ることを避けるための方法である &lt;code&gt;string match&lt;/code&gt; 明確に。 &lt;code&gt;--entire&lt;/code&gt; と &lt;code&gt;--regex&lt;/code&gt; がない場合、PATTERNは報告される前にSTRING全体と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="22a9feadf64d822a318f10f2b4793d1a2316c159" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--filter&lt;/code&gt; flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt;. You can instead just write &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; または &lt;code&gt;--filter&lt;/code&gt; フラグを指定すると、置換が行われた場合にのみ、各入力文字列が出力されます。これは、このイディオムを使用する場合に便利です &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt; 。代わりに単に &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt; と書くことができます。string replace --filter pattern new_pattern。</target>
        </trans-unit>
        <trans-unit id="d8e54ae0a24762829d8f55a86df97428a46a48f0" translate="yes" xml:space="preserve">
          <source>If you want to add the directory &lt;code&gt;~/linux/bin&lt;/code&gt; to your PATH variable when using a login shell, add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:</source>
          <target state="translated">ログインシェルを使用するときにディレクトリ &lt;code&gt;~/linux/bin&lt;/code&gt; をPATH変数に追加する場合は、以下を &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="3226bbbfea92d52214a04066c17b75561d8b1dfd" translate="yes" xml:space="preserve">
          <source>If you want to find out more about the echo command used above, read the manual page for the echo command by writing: &lt;code&gt;man echo&lt;/code&gt;</source>
          <target state="translated">上記で使用したechoコマンドの詳細を知りたい場合は、次のように記述してechoコマンドのマニュアルページを読んでください &lt;code&gt;man echo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf2181e509bdee84b390ead8fe1261883f65f450" translate="yes" xml:space="preserve">
          <source>If you want to know if a variable has &lt;em&gt;no elements&lt;/em&gt;, use &lt;code&gt;set -q var[1]&lt;/code&gt;.</source>
          <target state="translated">変数に&lt;em&gt;要素&lt;/em&gt;が&lt;em&gt;ない&lt;/em&gt;かどうかを知りたい場合は、 &lt;code&gt;set -q var[1]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f6b8934a463057ab4cbebc293cbcc2bde13fda93" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index&quot;&gt;lots of detailed documentation&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, the IRC channel #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">魚についてもっと知りたいなら、&lt;a href=&quot;index&quot;&gt;たくさんの詳細なドキュメント&lt;/a&gt;、&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;公式のメーリングリスト&lt;/a&gt;、IRCチャンネル#fish on &lt;code&gt;irc.oftc.net&lt;/code&gt; 、そして&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;githubページがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa7777db3b385617c9905b1bb85dce8643e34e91" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index#intro&quot;&gt;lots of detailed documentation&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;official gitter channel&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">魚についてもっと知りたい場合は&lt;a href=&quot;index#intro&quot;&gt;、詳細なドキュメント&lt;/a&gt;、&lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;公式のgitterチャネル&lt;/a&gt;、&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;公式のメーリングリスト&lt;/a&gt;、および&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;githubページ&lt;/a&gt;がたくさんあります。</target>
        </trans-unit>
        <trans-unit id="19d1a8c24236cf7d05190b1115ef30aaad303cfb" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then &lt;code&gt;fish&lt;/code&gt; might be just what you're looking for!</source>
          <target state="translated">難解な構文と構成オプションを学ばなくても、コマンドラインをより生産的で、より便利で、より楽しいものにしたい場合、 &lt;code&gt;fish&lt;/code&gt; はまさにあなたが探しているものかもしれません！</target>
        </trans-unit>
        <trans-unit id="240e39aa619c5f139c2593362dec95cdca1dfa27" translate="yes" xml:space="preserve">
          <source>If you want to organize your configuration, fish also reads commands in .fish files in &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;. See &lt;a href=&quot;index#initialization&quot;&gt;initialization&lt;/a&gt; for the details.</source>
          <target state="translated">構成を整理する場合、fishは &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt; .fishファイル内のコマンドも読み取ります。詳細については、&lt;a href=&quot;index#initialization&quot;&gt;初期化&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="57bb991addeaec34e0d2e4ff1072fa3e66d59b28" translate="yes" xml:space="preserve">
          <source>If you want to override a variable for a single command, you can use &quot;var=val&quot; statements before the command:</source>
          <target state="translated">一つのコマンドに対して変数をオーバーライドしたい場合は、コマンドの前に &quot;var=val &quot;文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="b010bfc3d915896fa771aef1b796169616d992f5" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (</source>
          <target state="translated">同じ行から複数の引数を再利用したい場合(「!3:3*」など)は、行全体を呼び出して不要なものを削除することを検討してください(</target>
        </trans-unit>
        <trans-unit id="817bbc583c325d82f70d5e4e389c9fb588a7021e" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Backspace&lt;/b&gt; are your friends).</source>
          <target state="translated">同じ行の複数の引数（ &quot;!!：3 *&quot;など）を再利用する場合は、行全体を呼び出して、不要なものを削除することを検討してください（&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;と&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Backspace&lt;/b&gt;は友だちです）。</target>
        </trans-unit>
        <trans-unit id="17b2c50714eca6eb3a1c4f418309af6c45fec63f" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when &lt;code&gt;fish&lt;/code&gt; exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; が終了したときに一連のコマンドを実行する場合は、シェルの終了によってトリガーされる&lt;a href=&quot;#event&quot;&gt;イベントハンドラー&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="840dcfc4db83e11261bb160a1f0912d853943c4b" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places:</source>
          <target state="translated">fish（またはその他のシェル）をデフォルトのシェルとして使用する場合は、新しいシェルの実行可能ファイル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を2か所に入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="115e2c44e689956437e718e0ec0032e55b5f7fed" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">fish（または他のシェル）をデフォルトのシェルとして使用する場合は、新しいシェルの実行可能ファイル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を次の2つの場所に入力する必要があります。-- &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を &lt;code&gt;/etc/shells&lt;/code&gt; 追加します。/ shells - &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt; 使用してデフォルトのシェルを変更します</target>
        </trans-unit>
        <trans-unit id="3a88aaa448eb4ccc5d7c16b222b1aaafa2e3553e" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;code&gt;source&lt;/code&gt; instead.</source>
          <target state="translated">コマンドがstdinにアクセスする必要がない場合は、代わりに &lt;code&gt;source&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="a0edd7289f911011f3a35d834f1f941473e2b0a8" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt;).</source>
          <target state="translated">上記の例で、$ WORDが未定義または空のリストである場合、「s」は出力されません。ただし、$ WORDが空の文字列の場合（ &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt; 後など）に出力されます。</target>
        </trans-unit>
        <trans-unit id="20b7e02e5dced2f235b74397e5dd8fd6678ecaa1" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed, if $WORD is the empty string.</source>
          <target state="translated">上の例で、$WORDが未定義または空のリストの場合、&quot;s &quot;は出力されません。ただし、$WORDが空の文字列の場合は表示されます。</target>
        </trans-unit>
        <trans-unit id="cd4f982a2dfbfb7a494a0fcc11edc18044fd3ee7" translate="yes" xml:space="preserve">
          <source>Import the abbreviations defined on another_host over SSH.</source>
          <target state="translated">another_host で定義されている略語を SSH 経由でインポートします。</target>
        </trans-unit>
        <trans-unit id="99b7d1b47f67f33906cafe0ea45bb9a7ae9de792" translate="yes" xml:space="preserve">
          <source>In addition, when adding abbreviations:</source>
          <target state="translated">また、略語を追加する場合。</target>
        </trans-unit>
        <trans-unit id="8214b19376f922281d94350c39e691ba4c55ab07" translate="yes" xml:space="preserve">
          <source>In addition, when adding or renaming abbreviations:</source>
          <target state="translated">また、略語を追加したり、名前を変更したりする場合。</target>
        </trans-unit>
        <trans-unit id="b11dd25d3b50e779c52a3bed6755a9de86e7cc31" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. &lt;code&gt;if set output (command)&lt;/code&gt;. In query mode, the exit status is the number of variables that were not found. In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.</source>
          <target state="translated">割り当てモードでは、 &lt;code&gt;set&lt;/code&gt; は終了ステータスを変更しません。これにより、たとえば &lt;code&gt;if set output (command)&lt;/code&gt; 、サブコマンドの出力と終了ステータスを同時にキャプチャできます。照会モードでは、終了状況は検出されなかった変数の数です。消去モードでは、成功の場合はゼロの終了ステータスで終了を &lt;code&gt;set&lt;/code&gt; 、コマンドラインが無効な場合、変数が書き込み保護されている場合、または変数が存在しない場合は、非ゼロの終了ステータスで終了を設定します。</target>
        </trans-unit>
        <trans-unit id="997bbb76e726398decafa893aef44209d89a5923" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In &lt;code&gt;fish&lt;/code&gt;, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">bashでは、これにより2つのディレクトリ「Mister」と「Noodle」が作成されます。では &lt;code&gt;fish&lt;/code&gt; 、それは一つだけ作成しました：それはに渡された引数であるので、変数は、値「ミスターヌードル」を持ってい &lt;code&gt;mkdir&lt;/code&gt; 、スペースおよびすべて。他のシェルでは、リストではなく「配列」という用語を使用します。</target>
        </trans-unit>
        <trans-unit id="febdce18a02406c3f663a8114d7d2b52f9d2f956" translate="yes" xml:space="preserve">
          <source>In cases such as this, one can use &lt;code&gt;command&lt;/code&gt;&lt;code&gt;test&lt;/code&gt; to explicitly use the system's standalone &lt;code&gt;test&lt;/code&gt; rather than this &lt;code&gt;builtin&lt;/code&gt;&lt;code&gt;test&lt;/code&gt;.</source>
          <target state="translated">このような場合、 &lt;code&gt;command&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; を使用して、この &lt;code&gt;builtin&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; ではなく、システムのスタンドアロン &lt;code&gt;test&lt;/code&gt; を明示的に使用できます。</target>
        </trans-unit>
        <trans-unit id="c4f2d284a1e65e7867199a2469dd5dff1c9b6cd8" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt;s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; とは対照的に、 &lt;code&gt;string&lt;/code&gt; の &lt;code&gt;match&lt;/code&gt; デフォルトでglob-modeになり、 &lt;code&gt;replace&lt;/code&gt; のデフォルトはリテラル一致になります。regex-modeに設定すると、PCRE正規表現が使用されます。これは &lt;code&gt;grep&lt;/code&gt; s- &lt;code&gt;-P&lt;/code&gt; オプションに相当します。 &lt;code&gt;match&lt;/code&gt; のようなものですちょうど試合、印刷するデフォルト &lt;code&gt;grep&lt;/code&gt; で &lt;code&gt;-o&lt;/code&gt; を（使用は &lt;code&gt;--entire&lt;/code&gt; grepのような動作を可能にします）。</target>
        </trans-unit>
        <trans-unit id="50308010771463782c1b1049f298eeb910eb8cb2" translate="yes" xml:space="preserve">
          <source>In contrast to these classics, &lt;code&gt;string&lt;/code&gt; reads input either from stdin or as arguments. &lt;code&gt;string&lt;/code&gt; also does not deal with files, so it requires redirections to be used with them.</source>
          <target state="translated">これらの古典とは対照的に、 &lt;code&gt;string&lt;/code&gt; はstdinからまたは引数として入力を読み取ります。 &lt;code&gt;string&lt;/code&gt; もファイルを処理しないため、ファイルでリダイレクトを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8150d5ade4961a7346cfe9d6f7af40451a0e9eba" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased.</source>
          <target state="translated">消去モードでは、変数のインデックスを指定すると、配列変数の指定されたスライスのみが消去されます。</target>
        </trans-unit>
        <trans-unit id="ea9ced13df63c29343d5b0a4c89e208d759dd99a" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.</source>
          <target state="translated">消去モードでは、変数のインデックスが指定されている場合、リスト変数の指定されたスライスのみが消去されます。</target>
        </trans-unit>
        <trans-unit id="d285383bee7174093582f84311886d8e77b2597e" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0 the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">2.3.0より前のバージョンのfishでは、引数が存在しない場合、 &lt;code&gt;$argv&lt;/code&gt; 変数は単一の要素（ソースファイルの名前）になります。それ以外の場合は、ソースファイルの名前のない引数が含まれます。その動作は非常に混乱し、bashやzshなどの他のシェルとは異なりました。</target>
        </trans-unit>
        <trans-unit id="9b6a0ae9d083c309f889a5d39f65825be86a357a" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0, the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">2.3.0より前のfishバージョンでは、引数が存在しない場合、 &lt;code&gt;$argv&lt;/code&gt; 変数は単一の要素（ソースファイルの名前）を持ちます。それ以外の場合は、ソースファイルの名前のない引数が含まれます。その動作は非常に混乱し、bashやzshなどの他のシェルとは異なりました。</target>
        </trans-unit>
        <trans-unit id="b6167c9c2e21f8c5d664cda565772acda6aa5a44" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.5.0 it was possible to create a function named &lt;code&gt;-&lt;/code&gt; that would do &lt;code&gt;cd -&lt;/code&gt;. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:</source>
          <target state="translated">前2.5.0に魚のバージョンでは、という名前の関数を作成することが可能であった &lt;code&gt;-&lt;/code&gt; どうなる &lt;code&gt;cd -&lt;/code&gt; 。2.5.0リリースの変更には、ベアハイフンが有効な関数（または変数）名ではないというルールを適用するいくつかのバグ修正が含まれています。ただし、省略形を使用して同じ効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="c82580c4fc0344cd7e4b4c3bbc7ac9db12a80d91" translate="yes" xml:space="preserve">
          <source>In functions, &lt;code&gt;block&lt;/code&gt; can be useful while performing work that should not be interrupted by the shell.</source>
          <target state="translated">関数では、 &lt;code&gt;block&lt;/code&gt; はシェルによって中断されるべきではない作業を実行するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="89ff03b555073b2736f671e958968657fb6eb4ed" translate="yes" xml:space="preserve">
          <source>In general, special characters are special by default, so &lt;code&gt;a+&lt;/code&gt; matches one or more &quot;a&quot;s, while &lt;code&gt;a\+&lt;/code&gt; matches an &quot;a&quot; and then a &quot;+&quot;. &lt;code&gt;(a+)&lt;/code&gt; matches one or more &quot;a&quot;s in a capturing group (&lt;code&gt;(?:XXXX)&lt;/code&gt; denotes a non-capturing group). For the replacement parameter of &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt; refers to the n-th group of the match. In the match parameter, &lt;code&gt;\n&lt;/code&gt; (e.g. &lt;code&gt;\1&lt;/code&gt;) refers back to groups.</source>
          <target state="translated">一般に、特殊文字はデフォルトで特殊であるため &lt;code&gt;a+&lt;/code&gt; 1つ以上の「a」に一致し、 &lt;code&gt;a\+&lt;/code&gt; は「a」、次に「+」に一致します。 &lt;code&gt;(a+)&lt;/code&gt; は、キャプチャグループ内の1つ以上の &quot;a&quot;に一致し &lt;code&gt;(?:XXXX)&lt;/code&gt; （（？：XXXX）は非キャプチャグループを示します）。 &lt;code&gt;replace&lt;/code&gt; の置換パラメーターの場合、 &lt;code&gt;$n&lt;/code&gt; は一致のn番目のグループを指します。 matchパラメータでは、 &lt;code&gt;\n&lt;/code&gt; （例： &lt;code&gt;\1&lt;/code&gt; ）はグループを参照します。</target>
        </trans-unit>
        <trans-unit id="52f151afd8c58f05083781d29e38adf8acc285ad" translate="yes" xml:space="preserve">
          <source>In order to change your default shell, type:</source>
          <target state="translated">デフォルトのシェルを変更するには、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="7744f887d10f15ca76ae2472bb145fdd5fdbdb57" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 10 MiB (1048576 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">シェルが多くのシステムリソースを消費しないように保護するために、 &lt;code&gt;read&lt;/code&gt; は最大10 MiB（1048576バイト）しか消費しません。この制限の前にターミネータに到達しない場合、VARIABLEは空に設定され、終了ステータスは122に設定されます。この制限は、 &lt;code&gt;fish_read_limit&lt;/code&gt; 変数で変更できます。0（ゼロ）に設定すると、制限が削除されます。</target>
        </trans-unit>
        <trans-unit id="10c1bbb71199c4bba1fc0fbd3600f1a2a6187c25" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">シェルが多くのシステムリソースを消費するのを防ぐために、 &lt;code&gt;read&lt;/code&gt; は最大100 MiB（104857600バイト）しか消費しません。この制限の前にターミネータに到達しない場合、VARIABLEは空に設定され、終了ステータスは122に設定されます。この制限は &lt;code&gt;fish_read_limit&lt;/code&gt; 変数で変更できます。0（ゼロ）に設定すると、制限が削除されます。</target>
        </trans-unit>
        <trans-unit id="ccb466b6200e27a0e4799833112a3b42e6de23b3" translate="yes" xml:space="preserve">
          <source>In particular it will:</source>
          <target state="translated">特にそれはそうなります。</target>
        </trans-unit>
        <trans-unit id="cfb4b17946050d9f509c4bdb763f770ebb06687a" translate="yes" xml:space="preserve">
          <source>In query mode, the scope to be examined can be specified.</source>
          <target state="translated">クエリモードでは、検査対象のスコープを指定することができます。</target>
        </trans-unit>
        <trans-unit id="89d4f28841a1759ddcc1b8894ac4045a23593691" translate="yes" xml:space="preserve">
          <source>In the following code, all output is redirected to the file out.html.</source>
          <target state="translated">以下のコードでは、すべての出力がファイル out.html にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="67bf59485bd852b33bf0045b83854687c5fd2923" translate="yes" xml:space="preserve">
          <source>In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">以下の例では、引数を解析する際にフラグが見えない場合は、対応する _flag_X var(s)は設定されません。</target>
        </trans-unit>
        <trans-unit id="b18679bb485a969aa3729a892fbc342e477da1e5" translate="yes" xml:space="preserve">
          <source>In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.</source>
          <target state="translated">圧倒的に多いのがスペースでの分割は不要なので、これは改善の余地があります。</target>
        </trans-unit>
        <trans-unit id="40d4bef31048f07adb0a3c1f574c30c70992f0e5" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">これらの場合、次のように &lt;code&gt;string split &quot; &quot;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e86e38a4028df2e1d281758cf65343b3a55357c4" translate="yes" xml:space="preserve">
          <source>In these cases, the expansion eliminates the string, as a result of the implicit &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt;.</source>
          <target state="translated">これらの場合、暗黙の&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積の&lt;/a&gt;結果として、展開により文字列が削除されます。</target>
        </trans-unit>
        <trans-unit id="a96781a5a37dbe8375812a63f70f63e6201fe8ae" translate="yes" xml:space="preserve">
          <source>Incorrect use of output redirects</source>
          <target state="translated">出力リダイレクトの誤用</target>
        </trans-unit>
        <trans-unit id="00039aeb76d249d44e4bf3ba01d88ffc368e8bd4" translate="yes" xml:space="preserve">
          <source>Index range expansion</source>
          <target state="translated">インデックス範囲の拡大</target>
        </trans-unit>
        <trans-unit id="6fb7f6ce1f52c7d40f5bab615e431e3f8551d458" translate="yes" xml:space="preserve">
          <source>Initialization files</source>
          <target state="translated">初期化ファイル</target>
        </trans-unit>
        <trans-unit id="2a06266a915eac92808f8af015840d61f777058b" translate="yes" xml:space="preserve">
          <source>Input/Output (IO) redirection</source>
          <target state="translated">入出力リダイレクト</target>
        </trans-unit>
        <trans-unit id="d06fb6a26a0cdbfbe971938c779ba1d8847a636e" translate="yes" xml:space="preserve">
          <source>Input/Output Redirection</source>
          <target state="translated">入出力リダイレクション</target>
        </trans-unit>
        <trans-unit id="cc03501ba8e2728a6aa8f006cb5c7941d732153b" translate="yes" xml:space="preserve">
          <source>Insert mode</source>
          <target state="translated">挿入モード</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="56c7ddbfeb574a673d5b721d96a9d20284b9212a" translate="yes" xml:space="preserve">
          <source>Installation and Start</source>
          <target state="translated">インストールとスタート</target>
        </trans-unit>
        <trans-unit id="fb0ea93fbb85b738df0bd31fcf1bc9eb5468d22b" translate="yes" xml:space="preserve">
          <source>Interactive use</source>
          <target state="translated">インタラクティブな使用</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c62c2864f20a2be4aa0393bfb86357685145de0e" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;complete&lt;/code&gt; multiple times for the same command adds the new definitions on top of any existing completions defined for the command.</source>
          <target state="translated">同じコマンドに対して &lt;code&gt;complete&lt;/code&gt; 複数回呼び出すと、コマンドに定義されている既存の完了に加えて新しい定義が追加されます。</target>
        </trans-unit>
        <trans-unit id="60085e96c04073bb488214d0f08662dbfb4f6528" translate="yes" xml:space="preserve">
          <source>It calls out to VCS-specific functions. The currently supported systems are:</source>
          <target state="translated">VCS 固有の機能を呼び出します。現在サポートされているシステムは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="cd08cedcb39096700407dcb2ed27cc0a4d9655b5" translate="yes" xml:space="preserve">
          <source>It can also be unexported with &lt;code&gt;--unexport&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--unexport&lt;/code&gt; または &lt;code&gt;-u&lt;/code&gt; を使用してエクスポート解除することもできます。</target>
        </trans-unit>
        <trans-unit id="83c3b240dba13d15ae7f53c1a501f0c631e4c4fe" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like</source>
          <target state="translated">また、以下のようにしてすべての emacs-mode バインディングを vi-mode に追加することも可能です。</target>
        </trans-unit>
        <trans-unit id="ec8325ed194e0bd115e6eac2314eb9c5b93bc6c7" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like:</source>
          <target state="translated">また、以下のような方法ですべての emacs-mode バインディングを vi-mode に追加することも可能です。</target>
        </trans-unit>
        <trans-unit id="88b3a0222511e2204a83e1bd65b24a52023e46f7" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of a list:</source>
          <target state="translated">また、リストの個々の要素を設定したり、消去したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="8ab84d80263900ba9d5b235b1f2ea80519e28b73" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of an array:</source>
          <target state="translated">また、配列の個々の要素を設定したり、消去したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="5d526954a8bce879648c1f8388f9dcd5c2cf78df" translate="yes" xml:space="preserve">
          <source>It is common to want to validate the the value provided for an option satisfies some criteria. For example, that it is a valid integer within a specific range. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">オプションに指定された値がいくつかの基準を満たしていることを検証したい場合がよくあります。たとえば、特定の範囲内の有効な整数であること。 &lt;code&gt;argparse&lt;/code&gt; が戻った後はいつでもこれを行うことができますが、任意のfishスクリプトを実行して &lt;code&gt;argparse&lt;/code&gt; が検証を実行するように要求することもできます。これを行うには、単に &lt;code&gt;!&lt;/code&gt; （感嘆符）次に、fishスクリプトを実行します。このコードを実行すると、3つの変数が定義されます。</target>
        </trans-unit>
        <trans-unit id="a71bcd2264c669eb00c671521098fb03d224a747" translate="yes" xml:space="preserve">
          <source>It is possible to directly create functions and variables in &lt;code&gt;config.fish&lt;/code&gt; file, using the commands shown above. For example:</source>
          <target state="translated">上記のコマンドを使用して、 &lt;code&gt;config.fish&lt;/code&gt; ファイルに関数と変数を直接作成できます。例えば：</target>
        </trans-unit>
        <trans-unit id="83c56d7ebd2ae7a42fad58d3fe21565a95290624" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">これは通常、&lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt;ステートメントや&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;ステートメントなどの条件付きブロック内に追加され、実行中の関数を条件付きで停止して呼び出し元に戻りますが、関数の終了ステータスを指定するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="2f4a9521ff238cfd8c93799d8d5f98df72dc4a0c" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">通常、&lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt;ステートメントや&lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt;ステートメントなどの条件付きブロック内に追加され、実行中の関数を条件付きで停止して呼び出し元に戻りますが、関数の終了ステータスを指定するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="cefa92c853442bbe4dd3a6ef0bacadea8c59bfbd" translate="yes" xml:space="preserve">
          <source>It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.</source>
          <target state="translated">関数定義ファイルには、指定された関数の定義のみが含まれ、それ以外は何も含まれていないことが非常に重要です。そうしないと、関数ファイルをオートロードする際に、その関数が既にロードされている必要があり、循環的な依存関係が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ee7deea0a6c7d1bf1f12282d8e4f2d33d9fa574c" translate="yes" xml:space="preserve">
          <source>It knows about paths and options</source>
          <target state="translated">それはパスとオプションについて知っている</target>
        </trans-unit>
        <trans-unit id="13749347248c90340a66276ab0e48e071806f943" translate="yes" xml:space="preserve">
          <source>It knows about paths and options:</source>
          <target state="translated">それは、パスとオプションについて知っています。</target>
        </trans-unit>
        <trans-unit id="09881db18dec90e0ba8f4c151dbc729afee1f020" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;, because the &quot;a b c &quot; is used in one piece. But if you do</source>
          <target state="translated">それが印刷されます &lt;code&gt;xa b c x&lt;/code&gt; 「ABC」は一体で使用されているので、。しかし、あなたがそうするなら</target>
        </trans-unit>
        <trans-unit id="f51b747a62fc1665fa16726f0cc05a908bd9ced6" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;. But if you do</source>
          <target state="translated">それが印刷されます &lt;code&gt;xa b c x&lt;/code&gt; 。しかし、もし</target>
        </trans-unit>
        <trans-unit id="784cf5b2d3ebe2dbad48daf3fd3356b85327650b" translate="yes" xml:space="preserve">
          <source>Iterating over a list of numbers can be done with &lt;code&gt;seq&lt;/code&gt;:</source>
          <target state="translated">数値のリストを反復処理するには、 &lt;code&gt;seq&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1c2654e77c8a1d66520f0e811b49f2ee16ec66ef" translate="yes" xml:space="preserve">
          <source>Job control</source>
          <target state="translated">ジョブ制御</target>
        </trans-unit>
        <trans-unit id="090e4272d6cb5283367e3c64d3f84a1ce2fa8aee" translate="yes" xml:space="preserve">
          <source>Jobs in the list of jobs are sent a hang-up signal when fish terminates, which usually causes the job to terminate; &lt;code&gt;disown&lt;/code&gt; allows these processes to continue regardless.</source>
          <target state="translated">ジョブのリストにあるジョブには、魚が終了するとハングアップシグナルが送信されます。これにより、通常、ジョブが終了します。 &lt;code&gt;disown&lt;/code&gt; を指定すると、これらのプロセスを続行できます。</target>
        </trans-unit>
        <trans-unit id="544b65b506a2ffb69625eb6e4d7541dde083f7c6" translate="yes" xml:space="preserve">
          <source>Keep in mind that a defined variabled could also be empty, either by having no elements (if set like &lt;code&gt;set var&lt;/code&gt;) or only empty elements (if set like &lt;code&gt;set var &quot;&quot;&lt;/code&gt;). Read on for how to deal with those.</source>
          <target state="translated">要素がない（ &lt;code&gt;set var&lt;/code&gt; のように設定されている場合）か、空の要素のみ（ &lt;code&gt;set var &quot;&quot;&lt;/code&gt; のように設定されている場合）のいずれかによって、定義された変数が空になる可能性があることに注意してください。それらに対処する方法について読んでください。</target>
        </trans-unit>
        <trans-unit id="32881a56b33d045dddcff4e97bad3c9a0cec51b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (&lt;code&gt;()&lt;/code&gt;) and the asterisk (&lt;code&gt;*&lt;/code&gt;) glob character have to be escaped or quoted. &lt;code&gt;x&lt;/code&gt; can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.</source>
          <target state="translated">式が評価される前に、パラメーターの展開にかかることに注意してください。これは、シェル変数またはコマンド置換の出力を含む計算を実行するために非常に役立ちますが、括弧（ &lt;code&gt;()&lt;/code&gt; ）およびアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）グロブ文字をエスケープまたは引用符で囲む必要があることも意味します。 &lt;code&gt;x&lt;/code&gt; は乗算を表すためにも使用できますが、16進数と区別するために、その後に空白を続ける必要があります。</target>
        </trans-unit>
        <trans-unit id="946c99cee0972cba5b6dec7f34cb20b94d3a2715" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis and the asterisk glob character have to be escaped or quoted.</source>
          <target state="translated">パラメータ展開は式が評価される前に行われることに注意してください。これはシェル変数を含む計算やコマンド置換の出力を行う際に非常に便利ですが、括弧とアスタリスク・グロブ文字をエスケープするか引用符で囲む必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="573891be377321acc4815f0519173b9b072d48fa" translate="yes" xml:space="preserve">
          <source>Key bindings may use &quot;modes&quot;, which mimics Vi's modal input behavior. The default mode is &quot;default&quot;, and every bind applies to a single mode. The mode can be viewed/changed with the &lt;code&gt;$fish_bind_mode&lt;/code&gt; variable.</source>
          <target state="translated">キーバインディングは、Viのモーダル入力動作を模倣する「モード」を使用できます。デフォルトのモードは「デフォルト」であり、すべてのバインドは単一のモードに適用されます。モードは &lt;code&gt;$fish_bind_mode&lt;/code&gt; 変数で表示/変更できます。</target>
        </trans-unit>
        <trans-unit id="b562f1a6d0c5684ca96b09426bc1669506a7f803" translate="yes" xml:space="preserve">
          <source>Learning fish</source>
          <target state="translated">学習魚</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="b5cf98d60edf53bb04a75b49fe8d89b334867632" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License, version 2.</source>
          <target state="translated">GNU General Public License,バージョン2の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="c93725e0a0f010017ca3b484abe1192273219e4e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;s/&lt;/code&gt; command, &lt;code&gt;string replace&lt;/code&gt; still prints strings that don't match. &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;-n&lt;/code&gt; in combination with a &lt;code&gt;/p&lt;/code&gt; modifier or command is like &lt;code&gt;string replace -f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sed&lt;/code&gt; s &lt;code&gt;s/&lt;/code&gt; コマンドと同様に、 &lt;code&gt;string replace&lt;/code&gt; は、一致しない文字列を出力します。 &lt;code&gt;sed&lt;/code&gt; S &lt;code&gt;-n&lt;/code&gt; Aとの組み合わせで &lt;code&gt;/p&lt;/code&gt; 修飾子またはコマンドのようなものです &lt;code&gt;string replace -f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f063dbdbbc3586964fed3651ab53c12631bbacd5" translate="yes" xml:space="preserve">
          <source>Like other shells, a dollar sign performs variable substitution:</source>
          <target state="translated">他のシェルと同様に、ドル記号は変数の置換を行います。</target>
        </trans-unit>
        <trans-unit id="1c10e83fba90f8ed8fbb793d35b29d018d6a8897" translate="yes" xml:space="preserve">
          <source>Like other shells, fish allows multiple commands either on separate lines or the same line.</source>
          <target state="translated">他のシェルと同様に、魚は複数のコマンドを別々の行または同じ行で実行することができます。</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a51da1d245e2b299170419f02a7283c1cf86ec93" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as &lt;a href=&quot;index#cartesian-product&quot;&gt;cartesian products&lt;/a&gt; unless quoted (see &lt;a href=&quot;index#expand-variable&quot;&gt;Variable expansion&lt;/a&gt;):</source>
          <target state="translated">他のリストまたは文字列に隣接するリストは、引用符で囲まれていない限り、&lt;a href=&quot;index#cartesian-product&quot;&gt;デカルト積&lt;/a&gt;として展開されます（&lt;a href=&quot;index#expand-variable&quot;&gt;変数展開を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e550372c446deb80cb7097a6530c7895ce489c98" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as cartesian products:</source>
          <target state="translated">他のリストや文字列に隣接するリストは、直交積として展開されます。</target>
        </trans-unit>
        <trans-unit id="d036c0ec2ab378b452b8d2cead3a3ffcc191575a" translate="yes" xml:space="preserve">
          <source>Lists cannot contain other lists: there is no recursion. A variable is a list of strings, full stop.</source>
          <target state="translated">リストは他のリストを含むことはできません。変数は文字列のリストです。</target>
        </trans-unit>
        <trans-unit id="fd5bfe87f1fde5105869e708324f805855fff5fa" translate="yes" xml:space="preserve">
          <source>Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">ローカル変数は、現在のフィッシュセッションに固有であり、コマンドの特定のブロックに関連付けられており、特定のブロックがスコープ外になると自動的に消去されます。コマンドのブロックは、コマンドのいずれかで始まる一連のコマンドである &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;switch&lt;/code&gt; 、およびコマンドで終わる &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8172703ebdf7bfc5b44da606bf9f833637212ffc" translate="yes" xml:space="preserve">
          <source>Locale variables</source>
          <target state="translated">ロケール変数</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="f5f695dcfd95e469044fda4ad8dda41439800142" translate="yes" xml:space="preserve">
          <source>Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, &lt;code&gt;fish&lt;/code&gt; generally only implements builtins for actions which cannot be performed by a regular command.</source>
          <target state="translated">他の多くのシェルには、組み込みコマンドの大きなライブラリがあります。これらのコマンドのほとんどはスタンドアロンコマンドとしても使用できますが、いずれにしてもシェルに実装されています。コードの重複を避け、同じコマンドの微妙に異なるバージョンの混乱を避けるために、 &lt;code&gt;fish&lt;/code&gt; は通常、通常のコマンドでは実行できないアクションのビルトインのみを実装します。</target>
        </trans-unit>
        <trans-unit id="508666f7961e41b7a23a46d49b1c68da21e0ab6e" translate="yes" xml:space="preserve">
          <source>Many terminals support 24-bit (i.e., true-color) color escape sequences. This includes modern xterm, Gnome Terminal, Konsole, and iTerm2. Fish attempts to detect such terminals through various means in &lt;code&gt;config.fish&lt;/code&gt; You can explicitly force that support via &lt;code&gt;set fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">多くの端末は24ビット（つまり、トゥルーカラー）のカラーエスケープシーケンスをサポートしています。これには、最新のxterm、Gnome Terminal、Konsole、およびiTerm2が含まれます。Fishは、 &lt;code&gt;config.fish&lt;/code&gt; のさまざまな方法でそのような端末を検出しようとします &lt;code&gt;set fish_term24bit 1&lt;/code&gt; 介して、そのサポートを明示的に強制できます。</target>
        </trans-unit>
        <trans-unit id="ee9b4890d50f0c6b762d298b81c92845215e8616" translate="yes" xml:space="preserve">
          <source>Match Glob Examples</source>
          <target state="translated">グローブの例を一致させる</target>
        </trans-unit>
        <trans-unit id="5d635a6434318430e0640768784677cf44ef96c2" translate="yes" xml:space="preserve">
          <source>Match Regex Examples</source>
          <target state="translated">一致する正規表現の例</target>
        </trans-unit>
        <trans-unit id="282c4c424c8c8f802f09ed9069046a66c3e0e2df" translate="yes" xml:space="preserve">
          <source>Matching can be made case-insensitive with &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--ignore-case&lt;/code&gt; または &lt;code&gt;-i&lt;/code&gt; を使用すると、大文字と小文字を区別しないマッチングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="dfe39636b572a032956990221bea7522894ca013" translate="yes" xml:space="preserve">
          <source>Mismatched parenthesis</source>
          <target state="translated">括弧の不一致</target>
        </trans-unit>
        <trans-unit id="7d99cf687fc07cadeb9c71efe74a35ddac5120de" translate="yes" xml:space="preserve">
          <source>More on universal variables</source>
          <target state="translated">普遍的な変数の詳細</target>
        </trans-unit>
        <trans-unit id="021eea9c0dd8f610dc9e4cc089ecb63b53b1ea84" translate="yes" xml:space="preserve">
          <source>Most operations &lt;code&gt;string&lt;/code&gt; supports can also be done by external tools. Some of these include &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;cut&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; サポートのほとんどの操作は、外部ツールでも実行できます。これらのいくつかには、 &lt;code&gt;grep&lt;/code&gt; 、 &lt;code&gt;sed&lt;/code&gt; 、 &lt;code&gt;cut&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="58541b1a51075d09123179aa5f9cebf36d81b9ff" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing</source>
          <target state="translated">ほとんどのプログラムでは、を押すことでプログラムの実行を一時停止し、制御を &lt;code&gt;fish&lt;/code&gt; 戻すことができます</target>
        </trans-unit>
        <trans-unit id="a6722727e636d961891415cd8a8813e266709c00" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt; (also referred to as &lt;code&gt;^Z&lt;/code&gt;). Once back at the &lt;code&gt;fish&lt;/code&gt; commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; (foreground) command.</source>
          <target state="translated">ほとんどのプログラムでは、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt;（ &lt;code&gt;^Z&lt;/code&gt; とも呼ばれる）を押すことで、プログラムの実行を一時停止し、制御を &lt;code&gt;fish&lt;/code&gt; 戻すことができます。 &lt;code&gt;fish&lt;/code&gt; コマンドラインに戻ったら、他のプログラムを起動して、好きなことを行うことができます。その後、必要に応じて、&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;（フォアグラウンド）コマンドを使用して、中断されたコマンドに戻ることができます。&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e36a3163fcb5b2ce91e7e62b6620c694486a5106" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (IO) streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">ほとんどのプログラムでは、ファイルディスクリプタ(FD)と呼ばれる番号で表される3つの入出力(IO)ストリームを使用します。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c20818da60d954d40a5d602d6db10493b1f04e88" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">ほとんどのプログラムは、3つの入力/出力&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;ストリームを使用し、それぞれがファイル記述子（FD）と呼ばれる番号で表されます。これらは：</target>
        </trans-unit>
        <trans-unit id="fbfe945f56b2d1285935393b0ba01a8e6e9fb533" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status.</source>
          <target state="translated">ほとんどのサブコマンドは &lt;code&gt;-q&lt;/code&gt; または &lt;code&gt;--quiet&lt;/code&gt; スイッチを受け入れます。これは、通常の出力を抑制しますが、文書化されたステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="9e4b95e5fe05cdb2e32c0be4dc38dcb8444a090a" translate="yes" xml:space="preserve">
          <source>Multiline editing</source>
          <target state="translated">マルチライン編集</target>
        </trans-unit>
        <trans-unit id="afac76fbf7acd07151be5bf2f1d66efbab839d8c" translate="yes" xml:space="preserve">
          <source>Multiple elements can be given in a &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#expand-brace&quot;&gt;ブレース展開&lt;/a&gt;で複数の要素を指定できます。</target>
        </trans-unit>
        <trans-unit id="284d6c5f151a78ee571b877c91d2822cf913407f" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;code&gt;set_color&lt;/code&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">複数行でも問題ありません。色は、 &lt;code&gt;set_color&lt;/code&gt; を使用して設定でき、名前付きのANSI色、または16進RGB値を渡します。</target>
        </trans-unit>
        <trans-unit id="b9313e4afc7e7087f2691f5390743aa11cb2045a" translate="yes" xml:space="preserve">
          <source>Multiple lines are not supported in &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; では複数行はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2ddaeb8bc8e45a0d0bc521306478830db49c61a1" translate="yes" xml:space="preserve">
          <source>My command (pkg-config) gives its output as a single long string?</source>
          <target state="translated">私のコマンド (pkg-config)は、その出力を一本の長い文字列として出力していますか?</target>
        </trans-unit>
        <trans-unit id="f9c6fa94b0cdb85c962b8db6aabb5f0166f8183a" translate="yes" xml:space="preserve">
          <source>NUL Delimited Examples</source>
          <target state="translated">NUL 区切りの例</target>
        </trans-unit>
        <trans-unit id="2bcd7736113c6b4efdb7226bbeffaacd2a34dab2" translate="yes" xml:space="preserve">
          <source>Next, do the following (assuming fish was installed to /usr/local):</source>
          <target state="translated">次に、以下のようにします(fishが/usr/localにインストールされていると仮定して)。</target>
        </trans-unit>
        <trans-unit id="e1c89d68ecad2be53a8cf7ccdf90c12f59e35a10" translate="yes" xml:space="preserve">
          <source>Non existing commands.</source>
          <target state="translated">既存のコマンド以外。</target>
        </trans-unit>
        <trans-unit id="76f3e65e8538fb0ceb8d456aa90c5d4ef9931a07" translate="yes" xml:space="preserve">
          <source>Normally when &lt;code&gt;fish&lt;/code&gt; starts a program, this program will be put in the foreground, meaning it will take control of the terminal and &lt;code&gt;fish&lt;/code&gt; will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish's behavior.</source>
          <target state="translated">通常、 &lt;code&gt;fish&lt;/code&gt; がプログラムを開始すると、このプログラムはフォアグラウンドに置かれます。つまり、ターミナルを制御し、プログラムが終了するまで &lt;code&gt;fish&lt;/code&gt; は停止します。これは望ましくない場合があります。たとえば、ターミナルからグラフィカルユーザーインターフェイスを使用してアプリケーションを起動し、シェルを引き続き使用できるようにする場合があります。このような場合、ユーザーが魚の行動を変更する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="08c5c1ef76ceaf50dd2d8b6a05425f76eaec2b83" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;case&lt;/code&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; と小文字は区別されず、複数の引数または（引用符で囲まれた）ワイルドカードを受け入れることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ade5bb175b9c01fc56dcd04dfd8820b5d87cfdc6" translate="yes" xml:space="preserve">
          <source>Note that all colors can also have a corresponding &lt;code&gt;_done&lt;/code&gt; color. For example, the contents of &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; is printed right _after_ the upstream.</source>
          <target state="translated">すべての色が対応する &lt;code&gt;_done&lt;/code&gt; 色を持つこともできることに注意してください。たとえば、 &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; 内容は、アップストリームの直後に出力されます。</target>
        </trans-unit>
        <trans-unit id="daafcf66550c6e75c5e67349c16e61c50e7a4d2f" translate="yes" xml:space="preserve">
          <source>Note that array indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">他の言語ではより一般的であるように、配列のインデックスは0ではなく &lt;code&gt;fish&lt;/code&gt; で1から始まることに注意してください。これは、 &lt;code&gt;seq&lt;/code&gt; のような多くの一般的なUnixツールがそのような用途により適しているためです。無効なインデックスは暗黙的に無視され、その結果、値は置換されません（空の文字列ではありません）。</target>
        </trans-unit>
        <trans-unit id="75e8dbe710958336c22801c9b7351ebb45c4f694" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;../index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">fishはオンデマンドで関数をロードするため、保存された関数は、他の方法で実行または取得されるまで、&lt;a href=&quot;../index#event&quot;&gt;イベントハンドラー&lt;/a&gt;として機能しないことに注意してください。新しいシェルごとにイベントハンドラーをアクティブ化するには、 &lt;code&gt;funcsave&lt;/code&gt; を使用&lt;a href=&quot;../index#initialization&quot;&gt;する&lt;/a&gt;代わりに、シェル初期化ファイルに関数を追加します。</target>
        </trans-unit>
        <trans-unit id="a0707e5e6cd48555094dd0ce06f95a929ab9ee48" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">fishはオンデマンドで関数をロードするため、保存された関数は、実行されるか、別の方法でソースされるまで、&lt;a href=&quot;index#event&quot;&gt;イベントハンドラー&lt;/a&gt;として機能しません。新しいシェルごとにイベントハンドラーをアクティブにするには、 &lt;code&gt;funcsave&lt;/code&gt; を使用&lt;a href=&quot;index#initialization&quot;&gt;する&lt;/a&gt;代わりに、シェル初期化ファイルに関数を追加します。</target>
        </trans-unit>
        <trans-unit id="d05600b5a2c4216ed0373e93b0ae5b8dde601d3a" translate="yes" xml:space="preserve">
          <source>Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.</source>
          <target state="translated">case文の中のコマンドの置換は、本体が取られていなくても評価されることに注意してください。コマンドの置換を含むすべての置換は、値がパラメータと比較される前に実行されなければなりません。</target>
        </trans-unit>
        <trans-unit id="27acedfb629019bcb72c1aaa58829703ce6d6432" translate="yes" xml:space="preserve">
          <source>Note that conversion may fail, e.g. &quot;102.234&quot; will not losslessly convert to an integer, causing printf to print an error.</source>
          <target state="translated">変換に失敗する可能性があることに注意してください。例えば、&quot;102.234 &quot;はロスレスに整数に変換されず、printfがエラーを表示する原因となります。</target>
        </trans-unit>
        <trans-unit id="8107914840367cc99db95db5e903f636fb93ac38" translate="yes" xml:space="preserve">
          <source>Note that events are only received from the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">ある魚プロセスから別の魚プロセスにイベントを送信する方法がないため、イベントは現在の魚プロセスからしか受信できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b604d17300bf8871e1df935d8ccab61e77f2c2e6" translate="yes" xml:space="preserve">
          <source>Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">ある魚プロセスから別の魚プロセスにイベントを送信する方法がないため、イベントは現在の魚プロセスにのみ送信されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1816c418ab7796b893d641bb9d4e996647340b50" translate="yes" xml:space="preserve">
          <source>Note that fish does not fall through on case statements. Only the first matching case is executed.</source>
          <target state="translated">fishはcase文では落ちないことに注意してください。最初にマッチしたケースのみが実行されます。</target>
        </trans-unit>
        <trans-unit id="dea20fe7204b37a954eb8c5b71576a69b5e9c5a0" translate="yes" xml:space="preserve">
          <source>Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.</source>
          <target state="translated">fishにはデフォルトのタイトルバーメッセージがあり、これはfish_title関数が未定義の場合に使用されることに注意してください。そのため、単に fish_title 関数の設定を解除しただけでは動作しません。</target>
        </trans-unit>
        <trans-unit id="216dd486d99355c7f2e848a5066c6390232ae830" translate="yes" xml:space="preserve">
          <source>Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than &lt;code&gt;history search&lt;/code&gt; you can type &lt;code&gt;history --search&lt;/code&gt;. Those long options are deprecated and will be removed in a future release.</source>
          <target state="translated">下位互換性のために、各サブコマンドを長いオプションとして指定することもできます。たとえば、 &lt;code&gt;history search&lt;/code&gt; ではなく、「 &lt;code&gt;history --search&lt;/code&gt; 」と入力できます。これらの長いオプションは非推奨であり、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="3b22090df2d664d4741cb8fa8f02ce46c5b511d7" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">ほとんどのコマンドでは、ワイルドカードの展開に失敗した場合、コマンドは実行されず、&lt;a href=&quot;#variables-status&quot;&gt;$ status&lt;/a&gt;がゼロ以外に設定され、警告が出力されることに注意してください。この動作は、bashで &lt;code&gt;shopt -s failglob&lt;/code&gt; を設定することと一致しています。正確に4つの例外があります。つまり、&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;、&lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;、&lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt;、および&lt;a href=&quot;cmds/for#cmd-for&quot;&gt;forの&lt;/a&gt;変数のオーバーライドです。それらのグロブは、bashの &lt;code&gt;shopt -s nullglob&lt;/code&gt; の場合と同様に、ゼロ引数に拡張できます。</target>
        </trans-unit>
        <trans-unit id="c97f265eeb04a552b0a053d1fe6fd39164111e41" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;&lt;code&gt;$status&lt;/code&gt;&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 3 exceptions, namely &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">ほとんどのコマンドでは、ワイルドカードが展開に失敗した場合、コマンドは実行されず、&lt;a href=&quot;#variables-status&quot;&gt; &lt;code&gt;$status&lt;/code&gt; &lt;/a&gt;がゼロ以外に設定され、警告が出力されます。この動作は、bashでの &lt;code&gt;shopt -s failglob&lt;/code&gt; の設定と一致しています。ちょうど3つの例外、つまり&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; があり&lt;/a&gt;ます。それらのグロブは、bashの &lt;code&gt;shopt -s nullglob&lt;/code&gt; と同様に、ゼロ引数に拡張することが許可されています。</target>
        </trans-unit>
        <trans-unit id="179b535385e9bcd6de7a6f886e309b106b43e8dd" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;code&gt;bg&lt;/code&gt; command will not execute correctly.</source>
          <target state="translated">機能はバックグラウンドで開始できないことに注意してください。停止してから &lt;code&gt;bg&lt;/code&gt; コマンドを使用してバックグラウンドで再開した機能は、正しく実行されません。</target>
        </trans-unit>
        <trans-unit id="d0299abe7df714002513b6c5ca5f854adee2c02d" translate="yes" xml:space="preserve">
          <source>Note that list indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">リストのインデックスは1から開始することを注意 &lt;code&gt;fish&lt;/code&gt; 他の言語では、より一般的であるように、0でありません、。これは、 &lt;code&gt;seq&lt;/code&gt; のような多くの一般的なUnixツールがそのような使用に適しているためです。無効なインデックスは黙って無視され、値は置き換えられません（空の文字列ではありません）。</target>
        </trans-unit>
        <trans-unit id="56578f519a03e2785432ffc83f432b088789cd11" translate="yes" xml:space="preserve">
          <source>Note that most builtin commands display their help in the terminal when given the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--help&lt;/code&gt; オプションを指定すると、ほとんどの組み込みコマンドがヘルプを端末に表示することに注意してください。</target>
        </trans-unit>
        <trans-unit id="052c493b4f8ae8b6935593bcf58c5ec984ab99f3" translate="yes" xml:space="preserve">
          <source>Note that not all these limits are available in all operating systems.</source>
          <target state="translated">これらの制限は、すべてのオペレーティングシステムで利用できるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fd0759c196f448d14f3c2205ba14675a88db1daf" translate="yes" xml:space="preserve">
          <source>Note that parentheses will usually require escaping with &lt;code&gt;\(&lt;/code&gt; to avoid being interpreted as a command substitution.</source>
          <target state="translated">括弧は通常、コマンド置換として解釈されないように &lt;code&gt;\(&lt;/code&gt; でエスケープする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="188395866987d29873c39e6fea9524d72368f195" translate="yes" xml:space="preserve">
          <source>Note that seeding the engine will NOT give the same result across different systems.</source>
          <target state="translated">エンジンのシーディングを行っても、異なるシステムで同じ結果が得られるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b65cb077ea76993a41de3fb713b42e0fed91a42b" translate="yes" xml:space="preserve">
          <source>Note that symbolic masks currently do not work as intended.</source>
          <target state="translated">シンボリックマスクは現在のところ意図した通りには動作しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="bef2f79c5ca0fefc2538b283ecde5e201f174c69" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は、このコマンドが操作する &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="10a8eb5ef4bfcbb0fbb38b2c1dbc89e74a6c7106" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は、このコマンドが操作する &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚インスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="9b4bda95d407194baa99d73ed10ab09fd4118640" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="468f475ce4540aa6d4ffc053e8efd0e42aba5839" translate="yes" xml:space="preserve">
          <source>Note that the shell will attempt to change directory without requiring &lt;code&gt;cd&lt;/code&gt; if the name of a directory is provided (starting with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, or ending with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">ディレクトリの名前が​​指定されている場合（ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;~&lt;/code&gt; で始まる、または &lt;code&gt;/&lt;/code&gt; で終わる）、シェルは &lt;code&gt;cd&lt;/code&gt; を要求せずにディレクトリを変更しようとすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a1ad39e7a025d924c676894892c33d43f516843" translate="yes" xml:space="preserve">
          <source>Note that there are three environment variables that are automatically split on colons to become lists when fish starts running: &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;. Conversely, they are joined on colons when exported to subcommands. All other environment variables (e.g., &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) which have similar semantics are treated as simple strings.</source>
          <target state="translated">fishの実行開始時にリストになるようにコロンで自動的に分割される3つの環境変数があることに注意してください： &lt;code&gt;PATH&lt;/code&gt; 、 &lt;code&gt;CDPATH&lt;/code&gt; 、 &lt;code&gt;MANPATH&lt;/code&gt; 。逆に、サブコマンドにエクスポートすると、コロンで結合されます。同様のセマンティクスを持つ他のすべての環境変数（ &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; など）は、単純な文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="bf45589c3e3c3f4d264bc9f93c56158f4afde11c" translate="yes" xml:space="preserve">
          <source>Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).</source>
          <target state="translated">この名前のコマンドが存在する場合(macOSやHaikuの場合)は、この関数は使用されませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="5bf381b343429f3c3b6b07cc6b6f0a80c7987163" translate="yes" xml:space="preserve">
          <source>Note that without the quotes or braces, fish will try to expand a variable called &lt;code&gt;$WORDs&lt;/code&gt;, which may not exist.</source>
          <target state="translated">引用符や中括弧がないと、fishは &lt;code&gt;$WORDs&lt;/code&gt; という変数を展開しようとしますが、これは存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="655206648d0dc7faa21d15bc23b20c851a2e5079" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced &lt;em&gt;after&lt;/em&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">〜/ .config / fish / config.fishはスニペットの&lt;em&gt;後&lt;/em&gt;に供給されることに注意してください。これは、ユーザーがスニペットをコピーして、一部の動作を上書きできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="ce33996fd64092e1167cf6f8d31deb6827e1e03e" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced _after_ the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">スニペットの後に ~/.config/fish/config.fish が生成されることに注意してください。これは、ユーザがスニペットをコピーして、その動作の一部を上書きすることができるようにするためです。</target>
        </trans-unit>
        <trans-unit id="e4d54cdd421c0c07715137d8eb13776063e53178" translate="yes" xml:space="preserve">
          <source>Note that, like &lt;code&gt;wc -l&lt;/code&gt;, reading from stdin counts newlines, so &lt;code&gt;echo -n foo | count&lt;/code&gt; will print 0.</source>
          <target state="translated">&lt;code&gt;wc -l&lt;/code&gt; と同様に、stdinからの読み取りでは改行がカウントされるため、 &lt;code&gt;echo -n foo | count&lt;/code&gt; は0を出力します。</target>
        </trans-unit>
        <trans-unit id="e2ce3cf51c29175bd1e3054b41cb66e679925023" translate="yes" xml:space="preserve">
          <source>Note that, like GNU tools and most of fish's builtins, &lt;code&gt;contains&lt;/code&gt; interprets all arguments starting with a &lt;code&gt;-&lt;/code&gt; as options to contains, until it reaches an argument that is &lt;code&gt;--&lt;/code&gt; (two dashes). See the examples below.</source>
          <target state="translated">GNUツールやほとんどのfishのビルトインと同様に、 &lt;code&gt;contains&lt;/code&gt; は &lt;code&gt;-&lt;/code&gt; で始まるすべての引数を、それが &lt;code&gt;--&lt;/code&gt; （2つのダッシュ）である引数に達するまで、containsのオプションとして解釈することに注意してください。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6acc4ccc246684cfa1057fb20ffd8a8f35f63d65" translate="yes" xml:space="preserve">
          <source>Note that, unlike other shells, fish will first set the variable and then perform other expansions on the line, so:</source>
          <target state="translated">他の貝と違って、魚は最初に変数を設定してからライン上で他の展開を行うので注意してください。</target>
        </trans-unit>
        <trans-unit id="9cd1c04aa664d29ef9d4114fed80a20478f9f7c6" translate="yes" xml:space="preserve">
          <source>Note: At the moment the debug prompt is identical to your normal fish prompt. This can make it hard to recognize that you've entered a debug session. Issue 1310 is open to improve this.</source>
          <target state="translated">注意:現時点では、デバッグプロンプトは通常の魚のプロンプトと同じです。これにより、デバッグセッションに入ったことを認識するのが困難になることがあります。これを改善するために1310号を公開しています。</target>
        </trans-unit>
        <trans-unit id="2acd9175970aa8fc3b9936ce32e6e5f5129257b5" translate="yes" xml:space="preserve">
          <source>Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.</source>
          <target state="translated">注意:このイベントは、コマンドが無効な場合でも発生します。コマンドラインパラメータにはコマンドライン全体がそのまま含まれ、改行を含む可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a71ed28fa070fd5d0f2ba5d9d8b94e51646208b" translate="yes" xml:space="preserve">
          <source>Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.</source>
          <target state="translated">注意:fish 2.2.0 以前のバージョンではデフォルトで 10 ミリ秒を使用しており、これを設定する方法はありませんでした。そのため、メタキーとしてエスケープを使用することが事実上不可能になっていました。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="03c757f6b7891744a49627d17ec9ed791ed69d26" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else</source>
          <target state="translated">フラグが引数を取らないブール値か、暗黙のintフラグであれば何もしません。</target>
        </trans-unit>
        <trans-unit id="7e9e91cddb4e1bbe3d96c5cfb7bcf12796b0c7e0" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.</source>
          <target state="translated">これで hub は git からすべての補完を継承するようになりました。これは関数宣言で指定することもできます。</target>
        </trans-unit>
        <trans-unit id="377c6369b04b17877206baabd99b8340d2c1712d" translate="yes" xml:space="preserve">
          <source>Now in another shell:</source>
          <target state="translated">今度は別のシェルで。</target>
        </trans-unit>
        <trans-unit id="d5aead3c087eb1218d9c5de157a34a40ad6e6161" translate="yes" xml:space="preserve">
          <source>Numerical comparisons will simply fail if one of the operands is not a number:</source>
          <target state="translated">オペランドの1つが数値でない場合、数値比較は単純に失敗します。</target>
        </trans-unit>
        <trans-unit id="aeeb9e7d5766fc544e9c4260b0a26961443229c2" translate="yes" xml:space="preserve">
          <source>Oh My Fish</source>
          <target state="translated">オーマイフィッシュ</target>
        </trans-unit>
        <trans-unit id="c168b84a253f1a9380f35914e43b4459d37046ec" translate="yes" xml:space="preserve">
          <source>Old style long options, like '&lt;code&gt;-Wall&lt;/code&gt;'. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter ('&lt;code&gt;-ao null&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-Wall&lt;/code&gt; 'のような古いスタイルの長いオプション。古いスタイルの長いオプションは、1文字以上にすることができ、単一のハイフンが前に付き、一緒にグループ化することはできません。オプション引数は、次のパラメーターで指定されます（ ' &lt;code&gt;-ao null&lt;/code&gt; '）。</target>
        </trans-unit>
        <trans-unit id="b9e42bb3078b6143675803071b50a1f886f1fddf" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these configuration variables is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">起動時に、Fishはシェルの動作を制御するために使用できる多くの設定ファイルを評価します。これらの設定ファイルの場所はいくつかの環境変数によって制御されており、それらのデフォルトまたは通常の場所は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="24b148830736c9caeaaf006e4d059c7b395c5a53" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">起動時、Fishはいくつかの設定ファイルを評価し、シェルの動作を制御するために使用します。これらのファイルの場所はいくつかの環境変数によって制御され、それらのデフォルトまたは通常の場所は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="53732b6ec19e859a0b3473ce5240c51bbdc7db63" translate="yes" xml:space="preserve">
          <source>On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.</source>
          <target state="translated">この機能をサポートしているシステムでは、最後のコマンドが実行されてからの各ジョブのCPU使用率が表示されます。CPU使用率は、フルCPUアクティビティのパーセンテージで表示されます。マルチプロセッサシステムでは、アクティビティの合計が100%を超える場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4b94b1b00f4f9d7408bbdbe697afeca3ea6a2231" translate="yes" xml:space="preserve">
          <source>Once fish has been installed, open a terminal. If fish is not the default shell:</source>
          <target state="translated">fishがインストールされたら、ターミナルを開きます。fishがデフォルトのシェルでない場合。</target>
        </trans-unit>
        <trans-unit id="18125968ef24a12c2f2c9db564d4fb936f8a352f" translate="yes" xml:space="preserve">
          <source>Once installed, just type in &lt;code&gt;fish&lt;/code&gt; into your current shell to try it out!</source>
          <target state="translated">インストールしたら、現在のシェルに &lt;code&gt;fish&lt;/code&gt; を入力して試してみてください！</target>
        </trans-unit>
        <trans-unit id="f9801d214429ef9429f41d9ccbf53d1f50cc2cf7" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is '&lt;code&gt;--color=auto&lt;/code&gt;'. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">関数の最も一般的な用途の1つは、既存のコマンドの動作をわずかに変更することです。たとえば、色を表示するために &lt;code&gt;ls&lt;/code&gt; コマンドを再定義したい場合があります。GNUシステムで色をオンにするスイッチは ' &lt;code&gt;--color=auto&lt;/code&gt; 'です。 &lt;code&gt;ls&lt;/code&gt; のエイリアスまたはラッパーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="c6ed72e8734163b3555d72a22a65213a63ac427a" translate="yes" xml:space="preserve">
          <source>Only one function's description can be changed in a single invocation of &lt;code&gt;functions -d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;functions -d&lt;/code&gt; 1回の呼び出しで変更できる関数の説明は1つだけです。</target>
        </trans-unit>
        <trans-unit id="744f6b1ea6029a4d03e486aa51d71e6cdfe3a24a" translate="yes" xml:space="preserve">
          <source>Only part of the output can be used, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">出力の一部のみを使用できます。詳細については、&lt;a href=&quot;#expand-index-range&quot;&gt;インデックス範囲の拡張&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e52f4d4c344dadad003e702bffb9e5e28cdc4a21" translate="yes" xml:space="preserve">
          <source>Operators for files and directories</source>
          <target state="translated">ファイルとディレクトリの演算子</target>
        </trans-unit>
        <trans-unit id="f27bb0ff136bb8c7c7f1daaac32275d53bfd219d" translate="yes" xml:space="preserve">
          <source>Operators for text strings</source>
          <target state="translated">テキスト文字列用の演算子</target>
        </trans-unit>
        <trans-unit id="a47a505eb7af733ce0bd8e9777ac0dd7490e55d7" translate="yes" xml:space="preserve">
          <source>Operators to combine expressions</source>
          <target state="translated">式を結合するための演算子</target>
        </trans-unit>
        <trans-unit id="7fa47fe3927b334a484c669114b525abc6a94112" translate="yes" xml:space="preserve">
          <source>Operators to compare and examine numbers</source>
          <target state="translated">数字を比較検討するオペレーター</target>
        </trans-unit>
        <trans-unit id="d4829f651a76eb5aa9c3d27e3534a7c418cd1fc9" translate="yes" xml:space="preserve">
          <source>Option Specifications</source>
          <target state="translated">オプション仕様</target>
        </trans-unit>
        <trans-unit id="7a482cf8fb70076ae04055b4c030c65bed8421d9" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the exit status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#flag-value-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">オプションで &lt;code&gt;!&lt;/code&gt; 値を検証するためのfishスクリプトが続きます。通常、これは実行する関数になります。終了ステータスがゼロの場合、フラグの値は有効です。ゼロ以外の場合、値は無効です。エラーメッセージはすべて（stderrではなく）stdoutに書き込む必要があります。詳細については、&lt;a href=&quot;#flag-value-validation&quot;&gt;フラグ値の検証&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6f38993c6d0d5cf791252a01f84f61ce28090cdc" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the return status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#arparse-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">オプションで &lt;code&gt;!&lt;/code&gt; 続いて、値を検証するための魚のスクリプト通常、これは実行する関数です。戻り状況がゼロの場合、フラグの値は有効です。ゼロ以外の場合、値は無効です。エラーメッセージは、（stderrではなく）stdoutに書き込む必要があります。詳細については、&lt;a href=&quot;#arparse-validation&quot;&gt;フラグ値の検証&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="3b7277ba5f0f20e70f1f91d410bbc35500c732a7" translate="yes" xml:space="preserve">
          <source>Or if you just want to do one command in case the first succeeded or failed, use &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;:</source>
          <target state="translated">または、最初のコマンドが成功または失敗した場合に1つのコマンドを実行するだけの場合は、 &lt;code&gt;and&lt;/code&gt; または &lt;code&gt;or&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="14be7a9cc678ff8d2acac3f8d22e39b9c8a4df32" translate="yes" xml:space="preserve">
          <source>Other features</source>
          <target state="translated">その他の特徴</target>
        </trans-unit>
        <trans-unit id="853554e3756e54eab25e2cb9c5b84f13d2534ef7" translate="yes" xml:space="preserve">
          <source>Other help pages</source>
          <target state="translated">その他のヘルプページ</target>
        </trans-unit>
        <trans-unit id="8064e7b7ad17f0248f35efb48f0f1d68ee39d15e" translate="yes" xml:space="preserve">
          <source>Other shells such as bash and zsh use a variable named &lt;code&gt;HISTFILE&lt;/code&gt; for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; it will inhibit importing the bash history. That's because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.</source>
          <target state="translated">bashやzshなどの他のシェルは、同様の目的で &lt;code&gt;HISTFILE&lt;/code&gt; という名前の変数を使用します。 Fishは別の名前を使用して競合を回避し、動作が異なることを通知します（ファイルパスではなくセッション名）。また、varを &lt;code&gt;fish&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 以外に設定すると、bash履歴のインポートが禁止されます。これは、この機能の最も一般的な使用例は、プレゼンテーションを行うときにプライベートな履歴や機密の履歴が漏洩しないようにするためです。</target>
        </trans-unit>
        <trans-unit id="ca76df4fa26ca40f2ebdbbcc9b7ac947b4b17597" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, &lt;code&gt;**(.)&lt;/code&gt;, to only match regular files. Fish prefers to defer such features to programs, such as &lt;code&gt;find&lt;/code&gt;, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,</source>
          <target state="translated">zshなどの他のシェルは、グロブに一致するファイルを制限するための豊富なグロブ構文を提供します。たとえば、 &lt;code&gt;**(.)&lt;/code&gt; 、通常のファイルにのみ一致します。Fishは、そのような機能を、ホイールを再発明するのではなく、 &lt;code&gt;find&lt;/code&gt; などのプログラムに任せることを好みます。したがって、ワイルドカードの展開を通常のファイルだけに制限したい場合、魚のアプローチは関数を定義して使用することです。例えば、</target>
        </trans-unit>
        <trans-unit id="14a838bcf64937317892425e5ab22ef3642359f4" translate="yes" xml:space="preserve">
          <source>Other variables, like &lt;code&gt;$PATH&lt;/code&gt;, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; などの他の変数には、実際には複数の値があります。変数の展開中、変数は展開されて複数の引数になります。</target>
        </trans-unit>
        <trans-unit id="b5d3d0ee6275d093a0cfd5679e24b1abd3556dc6" translate="yes" xml:space="preserve">
          <source>Otherwise, by default, the variable will not be exported.</source>
          <target state="translated">そうでない場合、デフォルトでは変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="adcbabbfd6290e1df478b0d2b37c0beb20ff4767" translate="yes" xml:space="preserve">
          <source>Outputting multiple lines is not supported in &lt;code&gt;fish_mode_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; では、複数行の出力はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5b8012177cdea50be6a01e8c45312b388ccc9c7a" translate="yes" xml:space="preserve">
          <source>Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.</source>
          <target state="translated">二重引用符以外では、変数は要素を持つ引数の数だけ展開されます。つまり、空のリストは何も展開されず、1つの要素を持つ変数はその要素に展開され、複数の要素を持つ変数はそれぞれの要素に個別に展開されます。</target>
        </trans-unit>
        <trans-unit id="701d31f2af951617e24913040bb289cccf377776" translate="yes" xml:space="preserve">
          <source>Overriding variables for a single command</source>
          <target state="translated">単一コマンドの変数をオーバーライドする</target>
        </trans-unit>
        <trans-unit id="b7cda6a843d651b6992452486c962d590a3cb164" translate="yes" xml:space="preserve">
          <source>PATH variables</source>
          <target state="translated">PATH 変数</target>
        </trans-unit>
        <trans-unit id="404b5a722c514f9f99c58c8b9832dbdc15c84e14" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal arrays, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 変数は通常の配列と同じように動作しますが、コロンで暗黙的に結合されたり分割されたりします。</target>
        </trans-unit>
        <trans-unit id="b66696987075bafb7f873ca41d609e5877999e68" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal lists, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 変数は通常のリストと同じように動作しますが、暗黙のうちに結合され、コロンで分割されます。</target>
        </trans-unit>
        <trans-unit id="5c77b5722c41b6f199f92efb5977aba4430b61c9" translate="yes" xml:space="preserve">
          <source>Page Up</source>
          <target state="translated">ページアップ</target>
        </trans-unit>
        <trans-unit id="6b76530ae6668a37f97a682d440c45d138de6409" translate="yes" xml:space="preserve">
          <source>Parameter expansion (Globbing)</source>
          <target state="translated">パラメータ展開(グラビング</target>
        </trans-unit>
        <trans-unit id="0fdb3f75d27167ce5697671dbec55e14ed3744ea" translate="yes" xml:space="preserve">
          <source>Parentheses and the &lt;code&gt;-o&lt;/code&gt; and &lt;code&gt;-a&lt;/code&gt; operators can be combined to produce more complicated expressions. In this example, success is printed if there is a &lt;code&gt;/foo&lt;/code&gt; or &lt;code&gt;/bar&lt;/code&gt; file as well as a &lt;code&gt;/baz&lt;/code&gt; or &lt;code&gt;/bat&lt;/code&gt; file.</source>
          <target state="translated">括弧と &lt;code&gt;-o&lt;/code&gt; および &lt;code&gt;-a&lt;/code&gt; 演算子を組み合わせて、より複雑な式を作成できます。この例では、 &lt;code&gt;/foo&lt;/code&gt; または &lt;code&gt;/bar&lt;/code&gt; ファイルと &lt;code&gt;/baz&lt;/code&gt; または &lt;code&gt;/bat&lt;/code&gt; ファイルがある場合、成功が出力されます。</target>
        </trans-unit>
        <trans-unit id="e0efa09d094aec052590bdd703ecb253fb17eb1e" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &lt;code&gt;PATH&lt;/code&gt; (case-sensitive) become PATH variables.</source>
          <target state="translated">パス変数は、PATH、CDPATH、MANPATH、PYTHONPATHを含む支持コロン区切りのパスリストに使用する変数の特殊な、などすべての変数という点で終了している &lt;code&gt;PATH&lt;/code&gt; （大文字と小文字を区別）となっPATH変数。</target>
        </trans-unit>
        <trans-unit id="db92c54d01dcbf9ce9147cf302fcbe0e8290138e" translate="yes" xml:space="preserve">
          <source>Performs a history search when the</source>
          <target state="translated">のときに履歴検索を実行します。</target>
        </trans-unit>
        <trans-unit id="acdeb27738adfec3e214f14b0bc5ac319dee18bf" translate="yes" xml:space="preserve">
          <source>Performs a history search when the &lt;b&gt;Page Up&lt;/b&gt; key is pressed.</source>
          <target state="translated">とき履歴検索を行います&lt;b&gt;ページアップ&lt;/b&gt;キーが押されています。</target>
        </trans-unit>
        <trans-unit id="b07e355a3677aa688ad89bddfe79ee5b312d7645" translate="yes" xml:space="preserve">
          <source>Pipes and Redirections</source>
          <target state="translated">パイプとリダイレクト</target>
        </trans-unit>
        <trans-unit id="109d28af6c9d51926601f8d9e60546da74487021" translate="yes" xml:space="preserve">
          <source>Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:</source>
          <target state="translated">パイプは通常、第1の処理のファイルディスクリプタ1(標準出力)と第2の処理のファイルディスクリプタ0(標準入力)を接続する。所望のFD番号を前置してパイプにリダイレクトシンボルを出力することで、異なる出力のファイルディスクリプタを使用することが可能である。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3247b493bc40b8745523a27d8c525cd0dc056fd5" translate="yes" xml:space="preserve">
          <source>Piping</source>
          <target state="translated">Piping</target>
        </trans-unit>
        <trans-unit id="36298b88737bbda60ad0697ed9af7787bf89ea37" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;cmds/source#cmd-source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">あなたがそうする必要があるかもしれませんどの手段、機能がロードされたときにそのイベントハンドラにのみ有効となりますのでご注意ください&lt;a href=&quot;cmds/source#cmd-source&quot;&gt;ソース&lt;/a&gt;またはその代わりに頼るの機能を実行する&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自動ロード&lt;/a&gt;。1つのアプローチは、それを&lt;a href=&quot;#initialization&quot;&gt;初期化ファイル&lt;/a&gt;に入れることです。</target>
        </trans-unit>
        <trans-unit id="484a02744408ea850ed69df5530d98aa375e29f4" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;commands#source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;index#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">イベントハンドラーは、関数が読み込まれたときにのみアクティブになることに注意してください。つまり、&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自動&lt;/a&gt;読み込みに依存する代わりに、関数を&lt;a href=&quot;commands#source&quot;&gt;ソース&lt;/a&gt;または実行する必要がある場合があります。1つのアプローチは、それを&lt;a href=&quot;index#initialization&quot;&gt;初期化ファイル&lt;/a&gt;に入れることです。</target>
        </trans-unit>
        <trans-unit id="0e1a82c707f23d09169b7a07b352752535b796b2" translate="yes" xml:space="preserve">
          <source>Prefixing a feature with &lt;code&gt;no-&lt;/code&gt; turns it off instead. .. _other:</source>
          <target state="translated">機能の前に &lt;code&gt;no-&lt;/code&gt; を付けると、代わりにオフになります。.. _other：</target>
        </trans-unit>
        <trans-unit id="d9da79a093b23650535a151c09a73e3fee5ee4ae" translate="yes" xml:space="preserve">
          <source>Prefixing the commandline with a space will prevent the entire line from being stored in the history.</source>
          <target state="translated">コマンドラインの先頭にスペースを付けると、その行全体が履歴に保存されないようになります。</target>
        </trans-unit>
        <trans-unit id="ae87eccf04345730f74111e3854e8d88c3f15602" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;sudo&lt;/code&gt; to the current commandline.</source>
          <target state="translated">現在のコマンドラインに &lt;code&gt;sudo&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ea683ad616063b7347bdddeee7203a82e1a3805b" translate="yes" xml:space="preserve">
          <source>Press</source>
          <target state="translated">Press</target>
        </trans-unit>
        <trans-unit id="fe2ed6ea3216d06709445e2c3ce6b00041d037ed" translate="yes" xml:space="preserve">
          <source>Press &lt;b&gt;Tab&lt;/b&gt;, and &lt;code&gt;fish&lt;/code&gt; will attempt to complete the command, argument, or path:</source>
          <target state="translated">押して&lt;b&gt;タブ&lt;/b&gt;、および &lt;code&gt;fish&lt;/code&gt; 、コマンド、引数、またはパスを完成しようとします。</target>
        </trans-unit>
        <trans-unit id="7ec470886283f4bfbbc71ce123f5602a60ae342e" translate="yes" xml:space="preserve">
          <source>Pressing</source>
          <target state="translated">Pressing</target>
        </trans-unit>
        <trans-unit id="09c712c74db06b262e6e04d6f0d9c7fa02c47733" translate="yes" xml:space="preserve">
          <source>Pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt; instead of pressing the &lt;b&gt;Enter&lt;/b&gt; key.</source>
          <target state="translated">押すと&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;入力&lt;/b&gt;を押すのではなく、&lt;b&gt;入力&lt;/b&gt;キーを。</target>
        </trans-unit>
        <trans-unit id="18a079610776709bdf0e5127ade329eadec0eaa4" translate="yes" xml:space="preserve">
          <source>Pressing the</source>
          <target state="translated">を押すと</target>
        </trans-unit>
        <trans-unit id="27bf58510d3b20325eed84381a6d30434da9e2ca" translate="yes" xml:space="preserve">
          <source>Pressing the &lt;b&gt;Enter&lt;/b&gt; key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">押すと&lt;b&gt;入力し&lt;/b&gt;たコマンドのブロックは、1つのまたは複数のブロックのようなコマンド時のように、閉じていないあるときにキーを &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;if&lt;/code&gt; 、対応する必要はありません &lt;code&gt;end&lt;/code&gt; コマンドを。</target>
        </trans-unit>
        <trans-unit id="68f9e196a99ef7c54610b77d7819c1536c7dc380" translate="yes" xml:space="preserve">
          <source>Previous versions of fish also allowed spelling this as &lt;code&gt;^DESTINATION&lt;/code&gt;, but that made another character special so it was deprecated and will be removed in future.</source>
          <target state="translated">以前のバージョンのfishでも、これを &lt;code&gt;^DESTINATION&lt;/code&gt; と綴ることができましたが、別のキャラクターが特別なものになったため、非推奨になり、将来削除される予定です。</target>
        </trans-unit>
        <trans-unit id="27493f631ba000f95a572539cafcbb594a951944" translate="yes" xml:space="preserve">
          <source>Print Top and Bottom on separate lines, using an escape sequence</source>
          <target state="translated">エスケープシーケンスを使用して、上と下を別々の行に印刷する</target>
        </trans-unit>
        <trans-unit id="84c34db7a924b44d0ab81ef51631e488d755a55a" translate="yes" xml:space="preserve">
          <source>Print hello world to stdout</source>
          <target state="translated">ハローワールドを標準出力に印刷する</target>
        </trans-unit>
        <trans-unit id="ad29dcc16fea024e7e41818ab9d4740b264b782b" translate="yes" xml:space="preserve">
          <source>Prior to the addition of this builtin command in the 2.7.0 release there were two main ways to parse the arguments passed to a fish script or function. One way was to use the OS provided &lt;code&gt;getopt&lt;/code&gt; command. The problem with that is that the GNU and BSD implementations are not compatible. Which makes using that external command difficult other than in trivial situations. The other way is to iterate over &lt;code&gt;$argv&lt;/code&gt; and use the fish &lt;code&gt;switch&lt;/code&gt; statement to decide how to handle the argument. That, however, involves a huge amount of boilerplate code. It is also borderline impossible to implement the same behavior as builtin commands.</source>
          <target state="translated">2.7.0リリースでこの組み込みコマンドが追加される前は、fishスクリプトまたは関数に渡された引数を解析する方法は主に2つありました。1つの方法は、OS提供の &lt;code&gt;getopt&lt;/code&gt; コマンドを使用することでした。これの問題は、GNUとBSDの実装に互換性がないことです。これは、些細な状況以外では、その外部コマンドの使用を困難にします。もう1つの方法は、 &lt;code&gt;$argv&lt;/code&gt; を反復処理し、fish &lt;code&gt;switch&lt;/code&gt; ステートメントを使用して引数の処理方法を決定することです。ただし、これには大量の定型コードが含まれます。また、組み込みコマンドと同じ動作を実装することは不可能です。</target>
        </trans-unit>
        <trans-unit id="e14c52a6b5ed7f130784534e792abd7951342686" translate="yes" xml:space="preserve">
          <source>Private mode</source>
          <target state="translated">プライベートモード</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">問題解決!</target>
        </trans-unit>
        <trans-unit id="27fee3438e0d28b1f5e56d2013e82bcf5b441945" translate="yes" xml:space="preserve">
          <source>Programmable prompt</source>
          <target state="translated">プログラム可能なプロンプト</target>
        </trans-unit>
        <trans-unit id="4eae5ed9e86eb92ca41dd75ef52fb9a0a53af761" translate="yes" xml:space="preserve">
          <source>Programmable title</source>
          <target state="translated">プログラム可能なタイトル</target>
        </trans-unit>
        <trans-unit id="a817d7eb8e0f1dab755ab5203a082e5c3c094fce" translate="yes" xml:space="preserve">
          <source>Prompt</source>
          <target state="translated">Prompt</target>
        </trans-unit>
        <trans-unit id="0495187c978ea883d19171649639e1c756060adb" translate="yes" xml:space="preserve">
          <source>Quick answer:</source>
          <target state="translated">即答で。</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="a5ab0c393626e6b25924176a035ebd63722dc7ec" translate="yes" xml:space="preserve">
          <source>Range expansion will go in reverse if the end element is earlier in the list than the start and forward if the end is later than the start, unless exactly one of the given indices is negative. This is to enable clamping without changing direction if the list has fewer elements than expected.</source>
          <target state="translated">範囲の拡張は、与えられたインデックスのうちの1つがまさに負の値でない限り、リストの最後の要素が開始よりも前にある場合は逆に進み、最後の要素が開始よりも後にある場合は順に進みます。これは、リストの要素数が予想よりも少ない場合に、方向を変えずにクランプできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="b16d80967d06f9706108437bd28e6a8d5175e9a0" translate="yes" xml:space="preserve">
          <source>Reading from or appending to a non existing file.</source>
          <target state="translated">既存のファイルではないファイルから読み込んだり、既存のファイルに追加したりします。</target>
        </trans-unit>
        <trans-unit id="3e22373b8f4786a11fc3f5247c24bd1cd140127f" translate="yes" xml:space="preserve">
          <source>Ready for more?</source>
          <target state="translated">準備はできていますか?</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="5c8c7c6ececfc7a4858b06b4968629df633fe974" translate="yes" xml:space="preserve">
          <source>Renames an existing abbreviation from &lt;code&gt;gco&lt;/code&gt; to &lt;code&gt;gch&lt;/code&gt;.</source>
          <target state="translated">既存の略語の &lt;code&gt;gch&lt;/code&gt; を &lt;code&gt;gco&lt;/code&gt; からgchに変更します。</target>
        </trans-unit>
        <trans-unit id="4dc79b3cd9563c59f1fd2d978861f14b1270090f" translate="yes" xml:space="preserve">
          <source>Repeat Examples</source>
          <target state="translated">リピート例</target>
        </trans-unit>
        <trans-unit id="a879640933d6c8936ca4cc6a02a55f8cc4408041" translate="yes" xml:space="preserve">
          <source>Replace Literal Examples</source>
          <target state="translated">リテラルの例を置き換える</target>
        </trans-unit>
        <trans-unit id="13b05ad41dc01c7c29077cca05d8339a7a6429b9" translate="yes" xml:space="preserve">
          <source>Replace Regex Examples</source>
          <target state="translated">正規表現の例を置き換える</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="27ca7249b11e61ac7f3b63efe842130af63f97b8" translate="yes" xml:space="preserve">
          <source>Run the following command in fish:</source>
          <target state="translated">fishで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ddd9c246e03e2789458ae8bb429c9d694195cb17" translate="yes" xml:space="preserve">
          <source>Running Commands</source>
          <target state="translated">実行中のコマンド</target>
        </trans-unit>
        <trans-unit id="5c5cc33a225b06807a45544c8793a5276a15976d" translate="yes" xml:space="preserve">
          <source>Running multiple programs</source>
          <target state="translated">複数のプログラムを実行する</target>
        </trans-unit>
        <trans-unit id="b6ee539e25ba9fe37112f3eead73eaed680c02a5" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;../index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example,</source>
          <target state="translated">SEQUENCEは、バインドする文字シーケンスです。これらは、&lt;a href=&quot;../index#escapes&quot;&gt;魚のエスケープシーケンス&lt;/a&gt;として記述する必要があります。たとえば、Altキーを押すと別の文字がその文字の前にエスケープ文字を送信するため、Altベースのキーバインディングは &lt;code&gt;\e&lt;/code&gt; エスケープを使用して記述できます。例えば、</target>
        </trans-unit>
        <trans-unit id="b3fe37f1b337c360725965146e94ffa93a9708da" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; (^X) can be written as &lt;code&gt;\cx&lt;/code&gt;. Note that Alt-based key bindings are case sensitive and Control-based key bindings are not. This is a constraint of text-based terminals, not &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">SEQUENCEは、バインドする文字シーケンスです。これらは&lt;a href=&quot;index#escapes&quot;&gt;魚のエスケープシーケンス&lt;/a&gt;として記述する必要があります。たとえば、Altキーを押して別の文字を押すと、その文字の前にエスケープ文字が送信されるため、Altベースのキーバインディングは &lt;code&gt;\e&lt;/code&gt; エスケープを使用して記述できます。たとえば、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;は &lt;code&gt;\ew&lt;/code&gt; と書くことができます。制御文字は、 &lt;code&gt;\c&lt;/code&gt; エスケープを使用してほぼ同じ方法で記述できます。たとえば、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;（^ X）は &lt;code&gt;\cx&lt;/code&gt; として記述できます。Altベースのキーバインディングでは大文字と小文字が区別され、Controlベースのキーバインディングでは区別されないことに注意してください。これは &lt;code&gt;fish&lt;/code&gt; ではなくテキストベースの端末の制約です。</target>
        </trans-unit>
        <trans-unit id="769ee8ba6c10d0fc5cc5d5931ff5950b069f7631" translate="yes" xml:space="preserve">
          <source>STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.</source>
          <target state="translated">標準入力がパイプやファイルに接続されていない限り、STRING引数はコマンドラインから取り出されます。コマンドラインと標準入力でSTRING引数を指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="4e1a6674d38590faffffeb4695d9d452b5339baa" translate="yes" xml:space="preserve">
          <source>Same as</source>
          <target state="translated">同上</target>
        </trans-unit>
        <trans-unit id="3e9759d5f8593842e337c74b9202035585d520b2" translate="yes" xml:space="preserve">
          <source>Same as above but with a second flag that requires a value:</source>
          <target state="translated">上記と同じですが、値を必要とする2番目のフラグがあります。</target>
        </trans-unit>
        <trans-unit id="d562a361adfcc4bd04396673622d38c2c23c4a3b" translate="yes" xml:space="preserve">
          <source>Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (&lt;code&gt;--token&lt;/code&gt;) can be used:</source>
          <target state="translated">上記と同じですが、3番目のフラグを複数回指定して、表示される各インスタンスの値を保存し、長いフラグ名（ &lt;code&gt;--token&lt;/code&gt; ）のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="c902e77d44ee1a72851bdd66a8039b7289e5469e" translate="yes" xml:space="preserve">
          <source>Say $animal contains the name of an animal. Then this code would classify it:</source>
          <target state="translated">animal に動物の名前が含まれているとします。そうすると、このコードはそれを分類します。</target>
        </trans-unit>
        <trans-unit id="2e406da000ac4099abeb149121071ece020d3907" translate="yes" xml:space="preserve">
          <source>Searchable history</source>
          <target state="translated">検索可能な履歴</target>
        </trans-unit>
        <trans-unit id="b445d35ecc1c55f9e1ceba18d794fb79d964e899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;index#editor&quot;&gt;documentation&lt;/a&gt; for more details about line editing in fish.</source>
          <target state="translated">魚のライン編集の詳細については、&lt;a href=&quot;index#editor&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="49221a7350c523a8e1009128e69d530a8c75a22a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print the stack and &lt;code&gt;dirs -c&lt;/code&gt; to clear it.</source>
          <target state="translated">スタックを印刷するには&lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt;を、クリアするには &lt;code&gt;dirs -c&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="77543101f6f627a4f89275ca4aa34557b8a135ef" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;, which will call all supported version control prompt functions, including git, Mercurial and Subversion.</source>
          <target state="translated">&lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;も参照してください。これは、git、Mercurial、Subversionなど、サポートされているすべてのバージョン管理プロンプト関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="67035298680ddb09dd248da78e915fd9c9627f01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;dirs&lt;/code&gt; and &lt;code&gt;dirs -c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; および &lt;code&gt;dirs -c&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1a3b31765df862a7d9c4531c872152ad402c53f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;read --delimiter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read --delimiter&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="5324b1f4d638d16895e396283d6222620e56d716" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">最近アクセスしたディレクトリに変更するには、&lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="7238893c67063d93ae05263dd71a5ccfc50d90c7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">最近アクセスしたディレクトリに変更するには、&lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="01cfa9314baef15cf1a7d7383228c6d181370cb2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">最近の &lt;code&gt;cd&lt;/code&gt; 履歴でも機能し、他のシェルとの互換性のために提供されている&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="a276f1ec5f60e2df52ed4c479379eca5a14e0acb" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt; and &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">参照してください&lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;と&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushdは&lt;/a&gt;また、最近で動作するコマンド &lt;code&gt;cd&lt;/code&gt; 歴史や他のシェルとの互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="c59959e6168e702c87aad6497074fc87974da46d" translate="yes" xml:space="preserve">
          <source>See the &quot;Internals&quot; section for more on them.</source>
          <target state="translated">それらについては、「内部」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c6e5f5869c0d557646211d7b722a3358667dc217" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">オプションの仕様を作成するための、より&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;詳細な方法については、fish_optコマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="762e36367184253ec997bd0b9511dad76a9722aa" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt; command for other manipulations.</source>
          <target state="translated">その他の操作については、&lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt;コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="c014ad7ef4dcc4632ad4cb9226ca38ced50624d9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;fish_opt&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">オプション仕様を作成するためのより&lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;わかり&lt;/a&gt;やすいがより冗長な方法については、fish_optコマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="f689ba7f1bf5e057a3d971021477d48085ed9ad9" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically, and &lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$fish_function_path&lt;/a&gt; to control their location.</source>
          <target state="translated">これらのファイルを自動的に作成する方法については&lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;と&lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsaveの&lt;/a&gt;ドキュメントを、ファイルの場所を制御する方法については&lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$ fish_function_path&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d34ee1f18350527bff51e963b54e3ce46a24e48" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;test&lt;/a&gt; and &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;cmds/test#cmd-test&quot;&gt;テスト&lt;/a&gt;および&lt;a href=&quot;cmds/if#cmd-if&quot;&gt;ifの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ac7646fb3e869bb56303fbe3fca839b0d38f1d8" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically.</source>
          <target state="translated">これらのファイルを自動的に作成する方法については、&lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt;および&lt;a href=&quot;commands#funcsave&quot;&gt;funcsaveの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bb216107606bc95b848f93fc29c67e8fe68c93ea" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;commands#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9299a43e63898a7efcae7a83cc40f247242085fc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;set&lt;/code&gt; for more details on the scoping rules for variables.</source>
          <target state="translated">変数のスコープ規則の詳細については、 &lt;code&gt;set&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f325a391b2afa8d45fd9b05b9b133df7d497fc47" translate="yes" xml:space="preserve">
          <source>Separating Commands (Semicolon)</source>
          <target state="translated">コマンドの区切り(セミコロン</target>
        </trans-unit>
        <trans-unit id="0ffd1469dee865172080d29fd56f5825f24fc441" translate="yes" xml:space="preserve">
          <source>Sequences of elements can be written with the range operator '&lt;code&gt;..&lt;/code&gt;'. A range '&lt;code&gt;a..b&lt;/code&gt;' ('a' and 'b' being integers) is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. Negative range limits are calculated from the end of the list. If an index is too large or small it's silently clamped to one or the size of the list as appropriate.</source>
          <target state="translated">要素のシーケンスは、範囲演算子 ' &lt;code&gt;..&lt;/code&gt; 'を使用して記述できます。範囲 ' &lt;code&gt;a..b&lt;/code&gt; '（ 'a'および 'b'は整数）は、インデックス ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; 'または ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; シーケンスに展開されます。 。b'a 'または' b 'のどちらが高いかによって異なります。負の範囲制限は、リストの最後から計算されます。インデックスが大きすぎるか小さすぎる場合は、必要に応じてリストの1つまたはサイズにサイレントにクランプされます。</target>
        </trans-unit>
        <trans-unit id="cafea76301da663d6e72c8dd0182bf1a08fe0c7b" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides.</source>
          <target state="translated">背景色の設定は、その後に書かれた文字にのみ影響します。Fishは端末のウィンドウ全体の背景色を設定する方法を提供していません。ウィンドウの背景色(およびその不透明度などの他の属性)を設定するには、端末が提供するメカニズムを使って行う必要があります。</target>
        </trans-unit>
        <trans-unit id="b7ac25be64a83552cee11d2c2c101281899b7d94" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides. Look for a config option.</source>
          <target state="translated">背景色の設定は、その後に書かれた文字にのみ影響します。Fishは端末のウィンドウ全体の背景色を設定する方法を提供していません。ウィンドウの背景色(および不透明度などの他の属性)を設定するには、ターミナルが提供するメカニズムを使って行う必要があります。設定オプションを探してください。</target>
        </trans-unit>
        <trans-unit id="0c0750f1643a764b440d30cec12896d4e2f3c4f4" translate="yes" xml:space="preserve">
          <source>Shared bindings</source>
          <target state="translated">共有バインディング</target>
        </trans-unit>
        <trans-unit id="02a6cc27a3e125fbed4ff93ba00ddc32ff248036" translate="yes" xml:space="preserve">
          <source>Shebang Line</source>
          <target state="translated">シェーバンライン</target>
        </trans-unit>
        <trans-unit id="61e5ec8aae4e834701135d3867ab63125d131c5e" translate="yes" xml:space="preserve">
          <source>Shell variable and function names</source>
          <target state="translated">シェルの変数名と関数名</target>
        </trans-unit>
        <trans-unit id="e91aede6defa8d430f67e550004d49863d3e2e5b" translate="yes" xml:space="preserve">
          <source>Shell variables</source>
          <target state="translated">シェル変数</target>
        </trans-unit>
        <trans-unit id="0f86f7ae2195716edf4d3ac75b6ae230d7060ba1" translate="yes" xml:space="preserve">
          <source>Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user. Variables may optionally be &quot;exported&quot;, so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an &quot;environment variable&quot;.</source>
          <target state="translated">シェル変数は、名前のついたデータの断片で、作成、削除、値の変更が可能で、ユーザが使用することができます。変数はオプションで「エクスポート」することができ、シェルが作成するどのサブプロセスでも変数のコピーを利用できるようにします。エクスポートされた変数は「環境変数」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="9ba5016166d5ba5cee4a99a1b1e6e1f5fe3f8efe" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same basic syntax.</source>
          <target state="translated">魚のような貝殻は、それらにコマンドを与えることによって使用されます。すべての &lt;code&gt;fish&lt;/code&gt; コマンドは、同じ基本構文に従います。</target>
        </trans-unit>
        <trans-unit id="e122d1fcfbe4d2952329855d2c90efb389777230" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same simple syntax.</source>
          <target state="translated">魚のような貝はそれらにコマンドを与えることによって使用されます。すべての &lt;code&gt;fish&lt;/code&gt; コマンドは、同じ単純な構文に従います。</target>
        </trans-unit>
        <trans-unit id="c89673d426f813c79fba3be3ad53403494aea9ae" translate="yes" xml:space="preserve">
          <source>Shift, Tab</source>
          <target state="translated">シフト、タブ</target>
        </trans-unit>
        <trans-unit id="f44347ef7035824e74312bda85a5c1f33acab5d3" translate="yes" xml:space="preserve">
          <source>Shift,&amp;larr;,Left</source>
          <target state="translated">Shift,&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="389f8e25d83e1e1c83d311028f205dfb3a8af791" translate="yes" xml:space="preserve">
          <source>Shift,&amp;rarr;,Right</source>
          <target state="translated">Shift,&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="794fe0e411bbf424857358cfb3699f0985ef9bee" translate="yes" xml:space="preserve">
          <source>Shift,A</source>
          <target state="translated">Shift,A</target>
        </trans-unit>
        <trans-unit id="a4f7b08e9c36efe6a08eae925c49ef2f720086e4" translate="yes" xml:space="preserve">
          <source>Shift,D</source>
          <target state="translated">Shift,D</target>
        </trans-unit>
        <trans-unit id="42414c807cd9c1ab64d204f7113345e9c5f0a85a" translate="yes" xml:space="preserve">
          <source>Short options, like '&lt;code&gt;-a&lt;/code&gt;'. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like '&lt;code&gt;-la&lt;/code&gt;', which is equivalent to '&lt;code&gt;-l -a&lt;/code&gt;'). Option arguments may be specified in the following parameter ('&lt;code&gt;-w 32&lt;/code&gt;') or by appending the option with the value ('&lt;code&gt;-w32&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-a&lt;/code&gt; 'のような短いオプション。短いオプションは1文字の長さで、前に1つのハイフンがあり、一緒にグループ化できます（ ' &lt;code&gt;-la&lt;/code&gt; 'は ' &lt;code&gt;-l -a&lt;/code&gt; ' と同じです）。オプションの引数は、次のパラメーター（ ' &lt;code&gt;-w 32&lt;/code&gt; '）で指定するか、オプションに値（ ' &lt;code&gt;-w32&lt;/code&gt; '）を追加することで指定できます。</target>
        </trans-unit>
        <trans-unit id="214c488d368da8c81796e48eb7f6963ef7a93bff" translate="yes" xml:space="preserve">
          <source>Should you wish to uninstall fish, first ensure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">魚をアンインストールする場合は、まず魚がシェルとして設定されていないことを確認してください。不明な場合は、 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="d5a22b01fc547f4aefabc8c7a496313159dfc74d" translate="yes" xml:space="preserve">
          <source>Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="translated">信号名では大文字と小文字が区別されず、 &lt;code&gt;SIG&lt;/code&gt; プレフィックスはオプションです。</target>
        </trans-unit>
        <trans-unit id="2339b49e18e4fa7fa63c25097d1c3cb05b3abf7a" translate="yes" xml:space="preserve">
          <source>Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; and switch back with &lt;code&gt;fish_default_key_bindings&lt;/code&gt;. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:</source>
          <target state="translated">bashと同様に、fishにはEmacsおよびVi編集モードがあります。デフォルトの編集モードはEmacsです。あなたはとViのモードに切り替えることができ &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; と、スイッチバック &lt;code&gt;fish_default_key_bindings&lt;/code&gt; 。関数を作成して$ fish_key_bindingsをその名前に設定することにより、独自のキーバインディングを作成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="841cba81f949103d830192d933a434ce626dfca6" translate="yes" xml:space="preserve">
          <source>Since fish 3.1 you can set an environment variable for just one command using the &lt;code&gt;key=value some command&lt;/code&gt; syntax, like in other shells. The two lines below behave identically - unlike other shells, fish will output &lt;code&gt;value&lt;/code&gt; both times:</source>
          <target state="translated">fish 3.1以降、他のシェルと同様に、 &lt;code&gt;key=value some command&lt;/code&gt; 構文を使用して、1つのコマンドに環境変数を設定できます。以下の2行は同じように動作します。他のシェルとは異なり、魚は両方の時間で &lt;code&gt;value&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="7ae81f7020b13f6dbc6ef9ce845da695c08f53b8" translate="yes" xml:space="preserve">
          <source>Since scripts for shell commands can be written in many different languages, they need to carry information about what interpreter is needed to execute them: For this they are expected to have a first line, the shebang line, which names an executable for this purpose:</source>
          <target state="translated">シェルコマンドのスクリプトは多くの異なる言語で書かれているので、それらを実行するためにはどのインタプリタが必要かという情報を伝える必要があります。そのためには、最初の行である shebang 行を持つことが期待されており、この行にはこの目的のための実行ファイルの名前が付けられています。</target>
        </trans-unit>
        <trans-unit id="14b8aecd3aaaa33e35d9724dfec4e61ddcb14189" translate="yes" xml:space="preserve">
          <source>So:</source>
          <target state="translated">So:</target>
        </trans-unit>
        <trans-unit id="530fce1c2ad1ce0277a5df96933c6fbf422dc856" translate="yes" xml:space="preserve">
          <source>Some OPTION_SPEC examples:</source>
          <target state="translated">いくつかのOPTION_SPECの例。</target>
        </trans-unit>
        <trans-unit id="4d6baccd4c71912ba57043465594b0cf17749be7" translate="yes" xml:space="preserve">
          <source>Some bindings are shared between emacs- and vi-mode because they aren't text editing bindings or because what Vi/Vim does for a particular key doesn't make sense for a shell.</source>
          <target state="translated">いくつかのバインディングは emacs-と vi-mode の間で共有されていますが、これはテキスト編集用のバインディングではないため、あるいは Vi/Vim が特定のキーに対して行うことがシェルでは意味をなさないためです。</target>
        </trans-unit>
        <trans-unit id="425593164f34a70e7fd63371baa3a373bc2ecb38" translate="yes" xml:space="preserve">
          <source>Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:</source>
          <target state="translated">コマンドラインに直接書き込めない文字があります。これらの文字には、いわゆるエスケープシーケンスが用意されています。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a528e343afc3809db9c1142fa89d7ee4b8aa846e" translate="yes" xml:space="preserve">
          <source>Some colors for status symbols:</source>
          <target state="translated">ステータスシンボルには一部色を使用しています。</target>
        </trans-unit>
        <trans-unit id="6dd3509b210643ba6eefaffcdf24924a6a2790a7" translate="yes" xml:space="preserve">
          <source>Some common words</source>
          <target state="translated">いくつかの一般的な単語</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="9a67d5493118a559656027def8dc4fcd0cc3974f" translate="yes" xml:space="preserve">
          <source>Some features include repetitions:</source>
          <target state="translated">一部の機能にはリピートが含まれています。</target>
        </trans-unit>
        <trans-unit id="4ded8c2bc928f23aa366efb17837e70948b9a888" translate="yes" xml:space="preserve">
          <source>Some of the special features of fish are:</source>
          <target state="translated">魚の特徴としては、いくつかあります。</target>
        </trans-unit>
        <trans-unit id="d39624c87b3e78e02ed8dde71f696712e0710389" translate="yes" xml:space="preserve">
          <source>Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. &lt;code&gt;psub&lt;/code&gt; combined with a regular command substitution provides the same functionality.</source>
          <target state="translated">一部のシェル（ksh、bashなど）には、コマンド置換とパイプ処理を組み合わせた構文（プロセス置換と呼ばれる）があります。これは、コマンド置換のように、コマンドの出力を呼び出しコマンドに送信するために使用されますが、出力はコマンドライン引数ではなく、名前付きパイプを通じて送信され、名前付きパイプのファイル名が引数として送信されます。呼び出しプログラムに。通常のコマンド置換と組み合わせた &lt;code&gt;psub&lt;/code&gt; は、同じ機能を提供します。</target>
        </trans-unit>
        <trans-unit id="28861f1ca2bfa4eb42bfb98ba18be09e02df8f97" translate="yes" xml:space="preserve">
          <source>Some terminals use the &lt;code&gt;--bold&lt;/code&gt; escape sequence to switch to a brighter color set rather than increasing the weight of text.</source>
          <target state="translated">一部の端末では、-- &lt;code&gt;--bold&lt;/code&gt; エスケープシーケンスを使用して、テキストの重みを増やすのではなく、明るい色のセットに切り替えます。</target>
        </trans-unit>
        <trans-unit id="81e4919181b85ff99cd6f65bd27d07c5ffe80e11" translate="yes" xml:space="preserve">
          <source>Some variables are only used in some modes, like when informative status is enabled:</source>
          <target state="translated">いくつかの変数は、情報提供ステータスが有効になっているときのように、いくつかのモードでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="c4dd50f777b9a845d16edeb5ac29fc4998e7e176" translate="yes" xml:space="preserve">
          <source>Some variables, like &lt;code&gt;$PWD&lt;/code&gt;, only have one value. By convention, we talk about that variable's value, but we really mean its first (and only) value.</source>
          <target state="translated">&lt;code&gt;$PWD&lt;/code&gt; などの一部の変数には、1つの値しかありません。慣例として、その変数の値について説明しますが、実際にはその最初の（そして唯一の）値を意味します。</target>
        </trans-unit>
        <trans-unit id="8709ff84c2c20f30aea0078b8e4ce461f5bca70c" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &amp;lsquo;&amp;rsquo;&lt;code&gt;(single quote) or&lt;/code&gt;&quot;&lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt;\'&lt;code&gt;, which escapes a single quote and&lt;/code&gt;\`, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;パラメータ拡張&lt;/a&gt;や&lt;a href=&quot;#escapes&quot;&gt;文字エスケープ&lt;/a&gt;などの機能が邪魔になる場合があります。その場合、ユーザーは '' &lt;code&gt;(single quote) or&lt;/code&gt; &lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt; 符）または &quot; （二重引用符）のいずれかでパラメーターを引用符で囲むことができます。一重引用符付き文字列と二重引用符付き文字列の間に重要な違いが1つあります。二重引用符付き文字列を使用する場合、&amp;lt;a href = &quot;＃expand-variable&quot;&amp;gt;変数の展開&amp;lt;/a&amp;gt;は引き続き行われます。それ以外の場合、他の種類の展開（&amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;ブレース展開&amp;lt;/a&amp;gt;およびパラメーター展開を含む）は行われませんが発生すると、パラメータにはスペースが含まれる可能性があり、エスケープシーケンスは無視されます。単一引用符内で受け入れられるバックスラッシュエスケープ &lt;code&gt;, which escapes a single quote and&lt;/code&gt; \ ' のみです。\ `：バックスラッシュ記号をエスケープします。二重引用符で受け入れられた唯一のバックスラッシュエスケープは &lt;code&gt;\&quot;&lt;/code&gt; 二重引用符、逃げる、 &lt;code&gt;\$&lt;/code&gt; ドル記号、逃げる、 &lt;code&gt;\&lt;/code&gt; 最後に改行が続き、バックスラッシュと改行を削除し、 &lt;code&gt;\\&lt;/code&gt; バックスラッシュをエスケープし、シンボル。二重引用符内では単一引用符は特別な意味を持たず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="1c2aa93843ddd26ec4e00cb7588c5d09f093b293" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &lt;code&gt;'&lt;/code&gt; (single quote) or &lt;code&gt;&quot;&lt;/code&gt; (double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt; still takes place. Other than that, no other kind of expansion (including &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;パラメータ拡張&lt;/a&gt;や&lt;a href=&quot;#escapes&quot;&gt;文字エスケープ&lt;/a&gt;などの機能が邪魔になることがあります。その場合、ユーザーは引用符内に &lt;code&gt;'&lt;/code&gt; （一重引用符）または &lt;code&gt;&quot;&lt;/code&gt; （二重引用符）のいずれかのパラメーターを書き込むことができます。一重引用符と二重引用符の文字列には重要な違いが1つあります。二重引用符で囲まれた文字列を使用する場合でも、&lt;a href=&quot;#expand-variable&quot;&gt;変数の展開&lt;/a&gt;は行われます。 。それ以外の種類の展開（中&lt;a href=&quot;#expand-brace&quot;&gt;括弧の展開&lt;/a&gt;やパラメーターの展開を含む）は行われず、パラメーターにスペースが含まれる場合があり、エスケープシーケンスは無視されます。</target>
        </trans-unit>
        <trans-unit id="bbef0a968c656b4a5b1d7f9e05d2b88ddbbced0c" translate="yes" xml:space="preserve">
          <source>Sometimes it's necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both allow this by providing a set of indices in square brackets.</source>
          <target state="translated">リストの一部の要素や、置換コマンドが出力する行の一部だけにアクセスする必要がある場合があります。どちらも、角括弧内のインデックスのセットを提供することでこれを可能にします。</target>
        </trans-unit>
        <trans-unit id="757ebf561cb13f732876f1ea411a1e9e3f80de54" translate="yes" xml:space="preserve">
          <source>Sometimes you need to have a variable available to an external command, often as a setting. For example many programs like &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;man&lt;/code&gt; read the &lt;code&gt;$PAGER&lt;/code&gt; variable to figure out your preferred pager (the program that lets you scroll text). Other variables used like this include &lt;code&gt;$BROWSER&lt;/code&gt;, &lt;code&gt;$LANG&lt;/code&gt; (to configure your language) and &lt;code&gt;$PATH&lt;/code&gt;. You'll note these are written in ALLCAPS, but that's just a convention.</source>
          <target state="translated">多くの場合、設定として、外部コマンドで使用できる変数が必要になる場合があります。たとえば、 &lt;code&gt;git&lt;/code&gt; や &lt;code&gt;man&lt;/code&gt; などの多くのプログラムは、 &lt;code&gt;$PAGER&lt;/code&gt; 変数を読み取って、好みのページャー（テキストをスクロールできるプログラム）を見つけます。このように使用される他の変数には、 &lt;code&gt;$BROWSER&lt;/code&gt; 、 &lt;code&gt;$LANG&lt;/code&gt; （言語を構成するため）、および &lt;code&gt;$PATH&lt;/code&gt; ます。これらはALLCAPSで書かれていることに気付くでしょうが、それは単なる慣例です。</target>
        </trans-unit>
        <trans-unit id="eebf6318c30de678887503010959c6f407c73301" translate="yes" xml:space="preserve">
          <source>Sometimes you need to validate the option values. For example, that it is a valid integer within a specific range, or an ip address, or something entirely different. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">オプション値を検証する必要がある場合があります。たとえば、特定の範囲内の有効な整数、IPアドレス、またはまったく異なるものであること。 &lt;code&gt;argparse&lt;/code&gt; が戻った後はいつでもこれを行うことができますが、任意のfishスクリプトを実行して &lt;code&gt;argparse&lt;/code&gt; に検証を実行するように要求することもできます。これを行うには、 &lt;code&gt;!&lt;/code&gt; を追加するだけです。（感嘆符）次に、実行する魚のスクリプト。そのコードが実行されると、3つの変数が定義されます。</target>
        </trans-unit>
        <trans-unit id="6d8c9b124d521027647b4f270cb2872798f9264e" translate="yes" xml:space="preserve">
          <source>Space</source>
          <target state="translated">Space</target>
        </trans-unit>
        <trans-unit id="5773d504847f59d4f28606344c751b42fcadfb09" translate="yes" xml:space="preserve">
          <source>Special Case: The escape Character</source>
          <target state="translated">特殊なケース:脱出キャラクター</target>
        </trans-unit>
        <trans-unit id="28dc52fcfc9145786fed85cff73226269b82a2c9" translate="yes" xml:space="preserve">
          <source>Special input functions</source>
          <target state="translated">特殊入力機能</target>
        </trans-unit>
        <trans-unit id="a6c32b7763c1deccd93080cf33efdb324072a965" translate="yes" xml:space="preserve">
          <source>Special variables</source>
          <target state="translated">特殊変数</target>
        </trans-unit>
        <trans-unit id="a0a234701d3553b3ee0fce9d93e7f64fadef5cac" translate="yes" xml:space="preserve">
          <source>Specifying your own completions is not difficult. To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">独自の補完を指定することは難しくありません。補完を指定するには、 &lt;code&gt;complete&lt;/code&gt; コマンドを使用します。 &lt;code&gt;complete&lt;/code&gt; は、補完を指定するコマンドの名前をパラメーターとして受け取ります。例えば、プログラムの完了追加する &lt;code&gt;myprog&lt;/code&gt; 、一つはで終了コマンドを開始すると &lt;code&gt;complete -c myprog ...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ac6973627e50b5b3feef24cc873cca39ec65518" translate="yes" xml:space="preserve">
          <source>Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.</source>
          <target state="translated">標準エラー、FD 2、書き込みエラーや警告の場合は、デフォルトで画面に書き込みます。</target>
        </trans-unit>
        <trans-unit id="8116e8803b0b4ccfe612ba1239d0a4c13eb0c484" translate="yes" xml:space="preserve">
          <source>Standard input, FD 0, for reading, defaults to reading from the keyboard.</source>
          <target state="translated">標準入力、読込用FD 0、デフォルトはキーボードからの読込です。</target>
        </trans-unit>
        <trans-unit id="fd08166eefe7793a02e0886b87576b866f11ba8d" translate="yes" xml:space="preserve">
          <source>Standard output, FD 1, for writing, defaults to writing to the screen.</source>
          <target state="translated">標準出力、書き込み用FD1、デフォルトは画面への書き込みです。</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="8f0c324bc7ae0630cb203b31d62e67e8a3bc6740" translate="yes" xml:space="preserve">
          <source>Starting and Exiting</source>
          <target state="translated">開始と終了</target>
        </trans-unit>
        <trans-unit id="806c8aeb75c45b416dcfcd215f384af2b2abda22" translate="yes" xml:space="preserve">
          <source>Startup (Where's .bashrc?)</source>
          <target state="translated">スタートアップ(.bashrcはどこにある?</target>
        </trans-unit>
        <trans-unit id="d9d8d313fdc1a560ea8caf500b990c2077839155" translate="yes" xml:space="preserve">
          <source>Startup time and memory usage is improved, etc.</source>
          <target state="translated">起動時間やメモリ使用量の改善など</target>
        </trans-unit>
        <trans-unit id="b3cfed68ddc06bae90fd47f85fdeed65b5766e4e" translate="yes" xml:space="preserve">
          <source>Support for italics, dim, reverse, and other modes is not guaranteed in all terminal emulators. Fish attempts to determine if the terminal supports these modes even if the terminfo database may not be up-to-date.</source>
          <target state="translated">イタリック、ディム、リバース、その他のモードのサポートはすべてのターミナルエミュレータで保証されているわけではありません。Fish は terminfo データベースが最新でなくても、ターミナルがこれらのモードをサポートしているかどうかを判断しようとします。</target>
        </trans-unit>
        <trans-unit id="d269dff6a5e6def876fa34f03bd1eb013ca33acd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example '&lt;code&gt;--help&lt;/code&gt;' will usually display a help text, '&lt;code&gt;-i&lt;/code&gt;' will often turn on interactive prompting before taking action, while '&lt;code&gt;-f&lt;/code&gt;' will turn it off.</source>
          <target state="translated">スイッチはコマンドごとに異なり、各コマンドのマニュアルページに記載されています。一部のスイッチはほとんどのコマンドに共通ですが、たとえば、「-- &lt;code&gt;--help&lt;/code&gt; 」は通常、ヘルプテキストを表示します。「- &lt;code&gt;-i&lt;/code&gt; 」は、アクションを実行する前にインタラクティブプロンプトをオンにし、「- &lt;code&gt;-f&lt;/code&gt; 」はオフにします。</target>
        </trans-unit>
        <trans-unit id="b5eb6066faf764d428231e3c214c4d783bbf5bcc" translate="yes" xml:space="preserve">
          <source>Switching to fish?</source>
          <target state="translated">魚に切り替え?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
