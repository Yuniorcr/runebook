<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="fish">
    <body>
      <group id="fish">
        <trans-unit id="9c47b741a075c31ca3e2cd472a89d590bf7358b1" translate="yes" xml:space="preserve">
          <source>However using variables as indices for command substitution is currently not supported, so:</source>
          <target state="translated">しかし、変数をインデックスとして使用することは現在のところサポートされていません。</target>
        </trans-unit>
        <trans-unit id="3ece1cae89b5ddaf2b419721f67d267e2d87fe0b" translate="yes" xml:space="preserve">
          <source>However, it is more common and efficient to use autoloading functions and universal variables.</source>
          <target state="translated">しかし、オートローディング関数やユニバーサル変数を使用する方が一般的で効率的です。</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="332860b83cabf222387565b3cbb3a4ca2b6a60c7" translate="yes" xml:space="preserve">
          <source>I accidentally entered a directory path and fish changed directory. What happened?</source>
          <target state="translated">誤ってディレクトリパスを入力してしまい、魚がディレクトリを変更してしまいました。何が起こったのでしょうか?</target>
        </trans-unit>
        <trans-unit id="3fa38a6c40854bfd0c5b8465a45e20805cb6f30b" translate="yes" xml:space="preserve">
          <source>I'm getting weird graphical glitches (a staircase effect, ghost characters,...)?</source>
          <target state="translated">奇妙なグラフィックの不具合(階段状の効果、ゴーストキャラクターなど)が発生するのですが?</target>
        </trans-unit>
        <trans-unit id="077b540fd621e89ad74c3aa41ae8c6bb0c4148b1" translate="yes" xml:space="preserve">
          <source>I'm seeing weird output before each prompt when using screen. What's wrong?</source>
          <target state="translated">screenを使っていると、各プロンプトの前に変な出力が出てきます。何か問題があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="639bf0b0aff96876be47fb838f518342cc2e94f3" translate="yes" xml:space="preserve">
          <source>IO redirections like &amp;gt;/dev/null</source>
          <target state="translated">&amp;gt; / dev / nullのようなIOリダイレクト</target>
        </trans-unit>
        <trans-unit id="bdf1b05d1769ec6457d76c24cbcd4eac62d22fbc" translate="yes" xml:space="preserve">
          <source>If $WORD here is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt;).</source>
          <target state="translated">ここでの$ WORDが未定義または空のリストの場合、「s」は出力されません。ただし、$ WORDが空の文字列の場合（ &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt; 後など）に出力されます。</target>
        </trans-unit>
        <trans-unit id="7884771064847db56c0b28c42a19e5f67be016fb" translate="yes" xml:space="preserve">
          <source>If $animals is a list of animals, the following will test if it contains a cat:</source>
          <target state="translated">animalsが動物のリストの場合、以下は猫が含まれているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="6288311089317cecbe49c2b077270e72c24f0c74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$animal&lt;/code&gt; was set to &quot;banana&quot;, it would print &quot;I have no idea what a banana is&quot;.</source>
          <target state="translated">場合は &lt;code&gt;$animal&lt;/code&gt; 「バナナ」に設定し、それは「私はバナナが何であるか見当がつかない」印刷します。</target>
        </trans-unit>
        <trans-unit id="6529dd48f4bbe7af35d8ee17e053a860dce8bc42" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables (more on this &lt;a href=&quot;argparse-local-variables&quot;&gt;below&lt;/a&gt;) are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">&lt;code&gt;$argv&lt;/code&gt; が空の場合、解析するものは何もなく、 &lt;code&gt;argparse&lt;/code&gt; は成功を示すためにゼロを返します。 &lt;code&gt;$argv&lt;/code&gt; が空でない場合、フラグ &lt;code&gt;-h&lt;/code&gt; 、-- &lt;code&gt;--help&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; 、および &lt;code&gt;--name&lt;/code&gt; がチェックされます。彼らが発見された場合、それらは、引数とローカル変数（この詳細から削除されている&lt;a href=&quot;argparse-local-variables&quot;&gt;以下の&lt;/a&gt;スクリプトが見られたどのオプションを判別できるように設定されています）。 &lt;code&gt;$argv&lt;/code&gt; オプションの必須値がないなどのエラーがないと仮定すると、 &lt;code&gt;argparse&lt;/code&gt; はステータス0で終了します。それ以外の場合は、適切なエラーメッセージをstderrに書き込み、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="c0fbfd35fc6ed08657df1862ed0095c68b3987ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables are set so the script can determine which options were seen. Assuming &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, such as a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with status zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">&lt;code&gt;$argv&lt;/code&gt; が空の場合、解析するものはなく、 &lt;code&gt;argparse&lt;/code&gt; は成功を示すためにゼロを返します。 &lt;code&gt;$argv&lt;/code&gt; が空でない場合は、フラグ &lt;code&gt;-h&lt;/code&gt; 、 &lt;code&gt;--help&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; 、および &lt;code&gt;--name&lt;/code&gt; がチェックされます。それらが見つかった場合、それらは引数から削除され、ローカル変数が設定されるため、スクリプトはどのオプションが表示されたかを判別できます。 &lt;code&gt;$argv&lt;/code&gt; オプションの必須値がないなどのエラーがないと仮定すると、 &lt;code&gt;argparse&lt;/code&gt; はステータスゼロで終了します。それ以外の場合は、適切なエラーメッセージをstderrに書き込み、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="d5aebf9be775c6394cdc60c0ad1ceaf1b0a07403" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$argv&lt;/code&gt; is empty then there is nothing to parse and &lt;code&gt;argparse&lt;/code&gt; returns zero to indicate success. If &lt;code&gt;$argv&lt;/code&gt; is not empty then it is checked for flags &lt;code&gt;-h&lt;/code&gt;, &lt;code&gt;--help&lt;/code&gt;, &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;--name&lt;/code&gt;. If they are found they are removed from the arguments and local variables called &lt;code&gt;_flag_OPTION&lt;/code&gt; are set so the script can determine which options were seen. If &lt;code&gt;$argv&lt;/code&gt; doesn't have any errors, like a missing mandatory value for an option, then &lt;code&gt;argparse&lt;/code&gt; exits with a status of zero. Otherwise it writes appropriate error messages to stderr and exits with a status of one.</source>
          <target state="translated">&lt;code&gt;$argv&lt;/code&gt; が空の場合、解析するものはなく、 &lt;code&gt;argparse&lt;/code&gt; は成功を示すためにゼロを返します。 &lt;code&gt;$argv&lt;/code&gt; が空でない場合は、フラグ &lt;code&gt;-h&lt;/code&gt; 、 &lt;code&gt;--help&lt;/code&gt; 、 &lt;code&gt;-n&lt;/code&gt; 、および &lt;code&gt;--name&lt;/code&gt; がチェックされます。それらが見つかった場合、それらは引数から削除され、 &lt;code&gt;_flag_OPTION&lt;/code&gt; と呼ばれるローカル変数が設定されるため、スクリプトはどのオプションが表示されたかを判別できます。場合は &lt;code&gt;$argv&lt;/code&gt; 、オプションの不足している必須値のように、その後、すべてのエラーを持っていない &lt;code&gt;argparse&lt;/code&gt; ゼロのステータスを持って終了し。それ以外の場合は、適切なエラーメッセージをstderrに書き込み、ステータス1で終了します。</target>
        </trans-unit>
        <trans-unit id="41d872df0da7e81d8c1be2d6e71a47a3e72854f2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$fish_private_mode&lt;/code&gt; is set to a non-empty value, commands will not be written to the history file on disk.</source>
          <target state="translated">場合は &lt;code&gt;$fish_private_mode&lt;/code&gt; 空でない値に設定され、コマンドは、ディスク上の履歴ファイルに書き込まれません。</target>
        </trans-unit>
        <trans-unit id="18c0231ee0546ad7aeb3f50a1a68cbc1c85d1797" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;-n&lt;/code&gt; is given, each match is reported as a 1-based start position and a length. By default, PATTERN is interpreted as a glob pattern matched against each entire STRING argument. A glob pattern is only considered a valid match if it matches the entire STRING.</source>
          <target state="translated">&lt;code&gt;--index&lt;/code&gt; または &lt;code&gt;-n&lt;/code&gt; が指定されている場合、各一致は1から始まる開始位置と長さとして報告されます。デフォルトでは、PATTERNはSTRING引数全体と照合されるグロブパターンとして解釈されます。globパターンは、STRING全体と一致する場合にのみ有効な一致と見なされます。</target>
        </trans-unit>
        <trans-unit id="dbf8f89e324b9e1f656b472c919d4c7a437efce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--invert&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt; is used the selected lines will be only those which do not match the given glob pattern or regular expression.</source>
          <target state="translated">場合 &lt;code&gt;--invert&lt;/code&gt; または &lt;code&gt;-v&lt;/code&gt; が使用されている選択した行のみが与えられたグロブパターンや正規表現に一致しないものになります。</target>
        </trans-unit>
        <trans-unit id="0477403438bc546d3f9ceccb9070392b46aee810" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--move&lt;/code&gt; is used, it may of course lead to the path swapping order, so you should be careful doing that in config.fish.</source>
          <target state="translated">場合 &lt;code&gt;--move&lt;/code&gt; が使用されている、それは順序を入れ替えるパスへのコースリードのかもしれないので、あなたはconfig.fishであることをやって注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="bca5e01e9673f9e6a815d4bc3b45775fa51fbbf4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;--regex&lt;/code&gt; or &lt;code&gt;-r&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, which does not have to match the entire STRING. For a regular expression containing capturing groups, multiple items will be reported for each match, one for the entire match and one for each capturing group. With this, only the matching part of the STRING will be reported, unless &lt;code&gt;--entire&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;--regex&lt;/code&gt; または &lt;code&gt;-r&lt;/code&gt; が指定されている場合、PATTERNはPerl互換の正規表現として解釈され、STRING全体と一致する必要はありません。キャプチャグループを含む正規表現の場合、一致ごとに1つ、一致全体とキャプチャグループごとに1つずつ、複数のアイテムが報告されます。これにより、 &lt;code&gt;--entire&lt;/code&gt; が指定されていない限り、STRINGの一致する部分のみが報告されます。</target>
        </trans-unit>
        <trans-unit id="fcb2b97b9b74110a92108364c83d3b0d2cdf428f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as a list in this variable.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--array&lt;/code&gt; が指定されている場合、1つの変数名のみが許可され、トークンはこの変数にリストとして格納されます。</target>
        </trans-unit>
        <trans-unit id="4e269b8b85f5f48b405e1f529c5cc1623456789e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--array&lt;/code&gt; is provided, only one variable name is allowed and the tokens are stored as an array in this variable.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--array&lt;/code&gt; が指定されている場合、1つの変数名のみが許可され、トークンはこの変数に配列として格納されます。</target>
        </trans-unit>
        <trans-unit id="27479dcd11f9e1927be7c3559e78933c9baee94b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--char&lt;/code&gt; is given, pad with CHAR instead of whitespace.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--char&lt;/code&gt; を指定した場合は、空白の代わりにCHARを埋め込みます。</target>
        </trans-unit>
        <trans-unit id="a6dcb1b88668c5c41c70fbdad2157ee6171f60f0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-e&lt;/code&gt; is used, the following sequences are recognized:</source>
          <target state="translated">場合は &lt;code&gt;-e&lt;/code&gt; が使用され、以下の配列が認識されます。</target>
        </trans-unit>
        <trans-unit id="e5d5482f59147347f76e114d12618ff3d78fea80" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--regex&lt;/code&gt; is given, PATTERN is interpreted as a Perl-compatible regular expression, and REPLACEMENT can contain C-style escape sequences like &lt;code&gt;\t&lt;/code&gt; as well as references to capturing groups by number or name as &lt;code&gt;$n&lt;/code&gt; or &lt;code&gt;${n}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--regex&lt;/code&gt; が指定されている場合、PATTERNはPerl互換の正規表現として解釈され、REPLACEMENTには、 &lt;code&gt;\t&lt;/code&gt; などのCスタイルのエスケープシーケンスと、 &lt;code&gt;$n&lt;/code&gt; または &lt;code&gt;${n}&lt;/code&gt; としての番号または名前によるキャプチャグループへの参照を含めることができます。n}。</target>
        </trans-unit>
        <trans-unit id="0451d245611bea211070a667bbded49226ef6ea9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;-r&lt;/code&gt; or &lt;code&gt;--right&lt;/code&gt; is given, add the padding after a string.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; または &lt;code&gt;--right&lt;/code&gt; を指定した場合は、文字列の後にパディングを追加します。</target>
        </trans-unit>
        <trans-unit id="227584b023d6d2c7837f693e7e9b190c0c0b3bf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; and &lt;code&gt;REASON&lt;/code&gt; are both specified, &lt;code&gt;ARG&lt;/code&gt; is the command to be executed when the event specified by &lt;code&gt;REASON&lt;/code&gt; occurs (e.g., the signal is delivered).</source>
          <target state="translated">&lt;code&gt;ARG&lt;/code&gt; と &lt;code&gt;REASON&lt;/code&gt; の両方が指定されている場合、 &lt;code&gt;ARG&lt;/code&gt; は、 &lt;code&gt;REASON&lt;/code&gt; で指定されたイベントが発生した（たとえば、シグナルが配信された）ときに実行されるコマンドです。</target>
        </trans-unit>
        <trans-unit id="d6a059f39530ea46f03b1a88f280774a9e1b7e4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is absent (and there is a single REASON) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell). If &lt;code&gt;ARG&lt;/code&gt; is the null string the signal specified by each &lt;code&gt;REASON&lt;/code&gt; is ignored by the shell and by the commands it invokes.</source>
          <target state="translated">場合 &lt;code&gt;ARG&lt;/code&gt; が存在しない（および単一理由がある）又は- 、指定された各信号は、元の配置（これはシェルの入口上にあった値）にリセットされます。 &lt;code&gt;ARG&lt;/code&gt; がヌル文字列の場合、各 &lt;code&gt;REASON&lt;/code&gt; によって指定されたシグナルは、シェルとそれが呼び出すコマンドによって無視されます。</target>
        </trans-unit>
        <trans-unit id="0310897c6525d4c0a20301e5b59490367df8d786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ARG&lt;/code&gt; is not present and &lt;code&gt;-p&lt;/code&gt; has been supplied, then the trap commands associated with each &lt;code&gt;REASON&lt;/code&gt; are displayed. If no arguments are supplied or if only &lt;code&gt;-p&lt;/code&gt; is given, &lt;code&gt;trap&lt;/code&gt; prints the list of commands associated with each signal.</source>
          <target state="translated">場合 &lt;code&gt;ARG&lt;/code&gt; が存在せず、 &lt;code&gt;-p&lt;/code&gt; は、供給された後、それぞれに関連するトラップコマンド &lt;code&gt;REASON&lt;/code&gt; 表示されています。引数が指定されていない場合、または &lt;code&gt;-p&lt;/code&gt; のみが指定されている場合、 &lt;code&gt;trap&lt;/code&gt; は各シグナルに関連付けられているコマンドのリストを出力します。</target>
        </trans-unit>
        <trans-unit id="46f4e7706aaa7715626c2065fdf439e268266771" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; environment variable array will be tried as prefixes for the specified path.</source>
          <target state="translated">&lt;code&gt;DIRECTORY&lt;/code&gt; が相対パスの場合、 &lt;code&gt;CDPATH&lt;/code&gt; 環境変数配列にあるパスが、指定されたパスのプレフィックスとして試行されます。</target>
        </trans-unit>
        <trans-unit id="d8fdf9c081d12374165457176e730cf87d210ca2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is a relative path, the paths found in the &lt;code&gt;CDPATH&lt;/code&gt; list will be tried as prefixes for the specified path, in addition to $PWD.</source>
          <target state="translated">&lt;code&gt;DIRECTORY&lt;/code&gt; が相対パスの場合、 &lt;code&gt;CDPATH&lt;/code&gt; リストで見つかったパスは、$ PWDに加えて、指定されたパスのプレフィックスとして試行されます。</target>
        </trans-unit>
        <trans-unit id="6d211b5295328f27c5f4dda2c5b64e33b2d339ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;DIRECTORY&lt;/code&gt; is supplied, it will become the new directory. If no parameter is given, the contents of the &lt;code&gt;HOME&lt;/code&gt; environment variable will be used.</source>
          <target state="translated">場合は &lt;code&gt;DIRECTORY&lt;/code&gt; 供給され、それは、新しいディレクトリになります。パラメータを指定しない場合、 &lt;code&gt;HOME&lt;/code&gt; 環境変数の内容が使用されます。</target>
        </trans-unit>
        <trans-unit id="ee49ba74d2c75163466a92ec95757c32496b3231" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;commandline&lt;/code&gt; is called during a call to complete a given string using &lt;code&gt;complete -C STRING&lt;/code&gt;, &lt;code&gt;commandline&lt;/code&gt; will consider the specified string to be the current contents of the command line.</source>
          <target state="translated">場合は &lt;code&gt;commandline&lt;/code&gt; 使用して、指定された文字列を完了するために、通話中に呼び出され &lt;code&gt;complete -C STRING&lt;/code&gt; 、 &lt;code&gt;commandline&lt;/code&gt; 指定した文字列は、コマンドラインの現在の内容であると考えます。</target>
        </trans-unit>
        <trans-unit id="1145ddb3bdeee96521a717d934a15cc64d95077c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;fish&lt;/code&gt; encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">コマンドの実行中に &lt;code&gt;fish&lt;/code&gt; で問題が発生した場合、ステータス変数も特定の値に設定される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f09fbf7f2a9a04bff01d5330effffef51795cab0" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;SECTION&lt;/code&gt; is specified, the help for that command is shown.</source>
          <target state="translated">場合 &lt;code&gt;SECTION&lt;/code&gt; が指定され、そのコマンドのヘルプが表示されます。</target>
        </trans-unit>
        <trans-unit id="11bdc7a6b00b9fcae9c145670ea2e6640ce69306" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;realpath&lt;/code&gt; command exists, it will be preferred, so if you want to use the builtin you should use &lt;code&gt;builtin realpath&lt;/code&gt; explicitly.</source>
          <target state="translated">場合 &lt;code&gt;realpath&lt;/code&gt; コマンドが存在し、あなたが使用する必要があり、組み込み使用したいのであれば、優先される &lt;code&gt;builtin realpath&lt;/code&gt; 明示的に。</target>
        </trans-unit>
        <trans-unit id="8d59528d17aca71e945c01c4f608cc07968fec9a" translate="yes" xml:space="preserve">
          <source>If a VCS isn't installed, the respective function does nothing.</source>
          <target state="translated">VCS がインストールされていない場合、それぞれの機能は何もしません。</target>
        </trans-unit>
        <trans-unit id="d49d6b1b0943371d699bdcd914d1ffd8f148b167" translate="yes" xml:space="preserve">
          <source>If a component is not an existing directory, &lt;code&gt;fish_add_path&lt;/code&gt; ignores it.</source>
          <target state="translated">コンポーネントが既存のディレクトリでない場合、 &lt;code&gt;fish_add_path&lt;/code&gt; はそれを無視します。</target>
        </trans-unit>
        <trans-unit id="965812140edc45643abb7baee6c2564a00e17217" translate="yes" xml:space="preserve">
          <source>If a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">引数の解析時にフラグが見当たらない場合、対応する _flag_X var(s)は設定されません。</target>
        </trans-unit>
        <trans-unit id="9a983c7d227d19d1c1e4484bef89499880499b5b" translate="yes" xml:space="preserve">
          <source>If a function named &lt;a href=&quot;cmds/fish_greeting#cmd-fish-greeting&quot;&gt;fish_greeting&lt;/a&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;a href=&quot;cmds/fish_greeting#cmd-fish-greeting&quot;&gt;fish_greeting&lt;/a&gt; exists, it will be printed.</source>
          <target state="translated">&lt;a href=&quot;cmds/fish_greeting#cmd-fish-greeting&quot;&gt;fish_greeting&lt;/a&gt;という名前の関数が存在する場合、インタラクティブモードに入るときに実行されます。それ以外の場合、&lt;a href=&quot;cmds/fish_greeting#cmd-fish-greeting&quot;&gt;fish_greeting&lt;/a&gt;という名前の環境変数が存在する場合は、それが出力されます。</target>
        </trans-unit>
        <trans-unit id="8ebee8483e83b06811ff3ba9ccc429433dce33cd" translate="yes" xml:space="preserve">
          <source>If a function named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be run when entering interactive mode. Otherwise, if an environment variable named &lt;code&gt;fish_greeting&lt;/code&gt; exists, it will be printed.</source>
          <target state="translated">&lt;code&gt;fish_greeting&lt;/code&gt; という名前の関数が存在する場合、インタラクティブモードに入るときに実行されます。それ以外の場合、 &lt;code&gt;fish_greeting&lt;/code&gt; という名前の環境変数が存在すると、それが出力されます。</target>
        </trans-unit>
        <trans-unit id="97b797a58e10af21dd1b7d448818b7c4a5c38502" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">ジョブが停止すると、実行を継続するためのシグナルが送信され、警告が出力されます。所有権が剥奪された後は、&lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt;ビルトインを使用してジョブを続行することはできません。</target>
        </trans-unit>
        <trans-unit id="236d9b2bfa9ffd703bff82e438702935d8f276d3" translate="yes" xml:space="preserve">
          <source>If a job is stopped, it is sent a signal to continue running, and a warning is printed. It is not possible to use the &lt;code&gt;bg&lt;/code&gt; builtin to continue a job once it has been disowned.</source>
          <target state="translated">ジョブが停止すると、実行を継続するシグナルが送信され、警告が出力されます。取り消されたジョブを続行するために組み込みの &lt;code&gt;bg&lt;/code&gt; を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="6866740fedf191e9a889c0dfe968149210933d55" translate="yes" xml:space="preserve">
          <source>If a list has 5 elements the indices go from 1 to 5, so a range of &lt;code&gt;2..16&lt;/code&gt; will only go from element 2 to element 5.</source>
          <target state="translated">リストに5つの要素がある場合、インデックスは1から5になります。したがって、 &lt;code&gt;2..16&lt;/code&gt; の範囲は要素2から要素5にのみなります。</target>
        </trans-unit>
        <trans-unit id="60e2a752180a8997dd97af87732b5ed3a03f8d8f" translate="yes" xml:space="preserve">
          <source>If a numeric mask is specified as a parameter, the current shell's umask will be set to that value, and the rights specified by that mask will be removed from new files and directories by default.</source>
          <target state="translated">数値マスクがパラメータとして指定された場合、現在のシェルの umask はその値に設定され、そのマスクで指定された権利はデフォルトで新しいファイルやディレクトリから削除されます。</target>
        </trans-unit>
        <trans-unit id="2dde9e658888f495cea69c0ad8b260a62416e91a" translate="yes" xml:space="preserve">
          <source>If a pid is specified, the command waits for the job that the process with the pid belongs to.</source>
          <target state="translated">pid が指定された場合は、その pid を持つプロセスが属するジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="f851c83c3c3953c372c81382f02613c546f275f0" translate="yes" xml:space="preserve">
          <source>If a process exits through a signal, the exit status will be 128 plus the number of the signal.</source>
          <target state="translated">シグナルを経由してプロセスが終了する場合、終了ステータスは128にシグナルの番号を加えたものになります。</target>
        </trans-unit>
        <trans-unit id="47cb47829c9383def1fb8361853c4c7dd09368a8" translate="yes" xml:space="preserve">
          <source>If a process name is specified, the command waits for the jobs that the matched processes belong to.</source>
          <target state="translated">プロセス名を指定すると、一致したプロセスが属するジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="302f9ccffa6bb045e0895a185f5c9e50859c884f" translate="yes" xml:space="preserve">
          <source>If a script produces output, it should finish by calling &lt;code&gt;commandline -f repaint&lt;/code&gt; to tell fish that a repaint is in order.</source>
          <target state="translated">スクリプトが出力を生成する場合は、 &lt;code&gt;commandline -f repaint&lt;/code&gt; を呼び出して再描画が適切であることを魚に通知することで終了します。</target>
        </trans-unit>
        <trans-unit id="67026ba945428dc31827715c1565311d33b5af8d" translate="yes" xml:space="preserve">
          <source>If a star (&lt;code&gt;*&lt;/code&gt;) or a question mark (&lt;code&gt;?&lt;/code&gt;) is present in the parameter, &lt;code&gt;fish&lt;/code&gt; attempts to match the given parameter to any files in such a way that:</source>
          <target state="translated">スター（ &lt;code&gt;*&lt;/code&gt; ）または疑問符（ &lt;code&gt;?&lt;/code&gt; ）がパラメーターに含まれている場合、 &lt;code&gt;fish&lt;/code&gt; は指定されたパラメーターを次のような方法で任意のファイルに一致させようとします。</target>
        </trans-unit>
        <trans-unit id="18a6fd00e4b1ddec496d39ba9f288b25c849a5d6" translate="yes" xml:space="preserve">
          <source>If a symbolic mask is specified, the desired permission bits, and not the inverse, should be specified. A symbolic mask is a comma separated list of rights. Each right consists of three parts:</source>
          <target state="translated">シンボリックマスクが指定されている場合は、その逆ではなく、所望の許可ビットを指定する必要があります。シンボリックマスクは、カンマで区切られた権利のリストである。各権利は 3 つの部分から構成される。</target>
        </trans-unit>
        <trans-unit id="9ffd05091b2bc11f75c6658a3328814a16ee9e1f" translate="yes" xml:space="preserve">
          <source>If a variable expands to nothing, it will cancel out any other strings attached to it. See the &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt; section for more information.</source>
          <target state="translated">変数が何にも展開されない場合、それに接続されている他の文字列はキャンセルされます。詳細については、&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積の&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c3bd46787a5c6b92e6f20cfe4fbc883c75045f2a" translate="yes" xml:space="preserve">
          <source>If a variable has global scope, it is accessible read-write to functions whether it is exported or not.</source>
          <target state="translated">変数がグローバルスコープを持つ場合、エクスポートされているかどうかに関わらず、関数への読み書きが可能です。</target>
        </trans-unit>
        <trans-unit id="741d44bccaaf674b1d069d14a1bdb399e238d593" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a &lt;em&gt;copy&lt;/em&gt; of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">変数にローカルスコープがあり、エクスポートされた場合、呼び出された関数はその&lt;em&gt;コピー&lt;/em&gt;を受け取ります。そのため、変数が変数に加えた変更は、関数が戻ると消えます。</target>
        </trans-unit>
        <trans-unit id="b71ed16ea5a59eda60ec534a14bf2d103ba20ae9" translate="yes" xml:space="preserve">
          <source>If a variable has local scope and is exported, any function called receives a _copy_ of it, so any changes it makes to the variable disappear once the function returns.</source>
          <target state="translated">変数がローカルスコープを持ち、エクスポートされている場合、呼び出された関数はすべてそのコピーを受け取ります。</target>
        </trans-unit>
        <trans-unit id="96f0994fdaca0f9b1c269335d2df0f4e271c169d" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to a scope (universal, global or local), that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">変数が明示的にスコープ (ユニバーサル、グローバル、ローカル)に設定されている場合は、その設定が尊重されます。同じ名前の変数が別のスコープに存在する場合、その変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="2cbdc88f5e9bb2f3b40009d0379b55ab2352ae84" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either be exported or not exported, that setting will be honored.</source>
          <target state="translated">変数が明示的にエクスポートされるかどうかが設定されている場合は、その設定が優先されます。</target>
        </trans-unit>
        <trans-unit id="ce6484065868b4e9c43f6db14f55a84fe136a4bf" translate="yes" xml:space="preserve">
          <source>If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.</source>
          <target state="translated">変数が明示的にユニバーサル、グローバル、ローカルのいずれかに設定されている場合は、その設定が尊重されます。同じ名前の変数が別のスコープに存在する場合、その変数は変更されません。</target>
        </trans-unit>
        <trans-unit id="7fd2961197b45dfc25c896ad23c85e1abfcf8519" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope and has not been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">変数がスコープに明示的に設定されておらず、定義されていない場合、変数は現在実行中の関数に対してローカルになります。これは、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--local&lt;/code&gt; フラグを使用する場合とは異なることに注意してください。これらのフラグの1つが使用されている場合、変数は現在実行中の最も内側のブロックに対してローカルになりますが、これらがない場合、変数は関数に対してローカルになります。関数が実行されていない場合、変数はグローバルになります。</target>
        </trans-unit>
        <trans-unit id="6e687f439d700aaa30c67d0c1c2079a9950e1712" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to a scope, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">変数が明示的にスコープに設定されておらず、以前に定義されていた場合、変数のスコープは変更されません。</target>
        </trans-unit>
        <trans-unit id="326eb232490e8df93b49fd2c3a89fde63906ed77" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or not exported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">エクスポートするかしないかが明示的に設定されておらず、これまでに一度も定義されたことがない変数の場合、その変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="ef107fe0701094bebbf7a6322c1155614a1be3ba" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.</source>
          <target state="translated">変数が明示的にエクスポートまたはエクスポートされないように設定されておらず、一度も定義されたことがない場合、変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="bd6c17ea05cd6c81f352d96759e2622e4a16e84b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing function. Note that this is different from using the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--local&lt;/code&gt; flag. If one of those flags is used, the variable will be local to the most inner currently executing block, while without these the variable will be local to the function. If no function is executing, the variable will be global.</source>
          <target state="translated">変数が明示的にユニバーサル、グローバル、またはローカルに設定されておらず、かつて定義されたことがない場合、変数は現在実行中の関数に対してローカルになります。これは、 &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--local&lt;/code&gt; フラグの使用とは異なることに注意してください。これらのフラグの1つが使用される場合、変数は現在実行されている最も内側のブロックに対してローカルになりますが、これらがない場合、変数は関数に対してローカルになります。関数が実行されていない場合、変数はグローバルになります。</target>
        </trans-unit>
        <trans-unit id="8b2d1734ef9bdd7bd6d21bc623798a68378e6c8b" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.</source>
          <target state="translated">変数がユニバーサル、グローバル、ローカルのいずれかに明示的に設定されておらず、以前に定義されていた場合は、以前の変数スコープが使用されます。</target>
        </trans-unit>
        <trans-unit id="ae5e31cb3d02690bd43a99dc6a823c8568d4b6e8" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the variable scope is not changed.</source>
          <target state="translated">変数がユニバーサル、グローバル、ローカルのいずれかに明示的に設定されていなくても、以前に定義されていた場合、変数のスコープは変更されません。</target>
        </trans-unit>
        <trans-unit id="6ccd9990afce6a9aaaa05eb9827a340fd925feb1" translate="yes" xml:space="preserve">
          <source>If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.</source>
          <target state="translated">変数が明示的にエクスポートされるかどうかが設定されておらず、以前に定義されていた場合、その変数の以前のエクスポートルールが保持されます。</target>
        </trans-unit>
        <trans-unit id="ae603cd6be44b99d51c1566501087ce7b225183b" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be a list with the specified elements. If a variable is set to zero elements, it will become a list with zero elements.</source>
          <target state="translated">変数に複数の値が設定されている場合は、指定された要素を持つリストになります。変数にゼロ要素が設定されている場合は、ゼロ要素を持つリストになります。</target>
        </trans-unit>
        <trans-unit id="72e2106717a7a37128914da8765dc2c6c6697b14" translate="yes" xml:space="preserve">
          <source>If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.</source>
          <target state="translated">変数に複数の値が設定されている場合は、指定された要素を持つ配列になります。変数に0要素が設定されている場合は、指定された要素を持つ配列になります。</target>
        </trans-unit>
        <trans-unit id="a723f0fea3c45c67807883ef6059438866b12547" translate="yes" xml:space="preserve">
          <source>If after expansion there is nothing between the braces, the argument will be removed (see &lt;a href=&quot;#cartesian-product&quot;&gt;the cartesian product section&lt;/a&gt;):</source>
          <target state="translated">拡張後、中括弧の間に何もない場合、引数は削除されます（&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積のセクションを参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="7f805483966bd1b92bb16fa0e48ac91c14f18567" translate="yes" xml:space="preserve">
          <source>If an error occurs during argparse processing it will exit with a non-zero status and print error messages to stderr.</source>
          <target state="translated">argparseの処理中にエラーが発生した場合は、0以外のステータスで終了し、エラーメッセージをstderrに表示します。</target>
        </trans-unit>
        <trans-unit id="f3bb201c1119b5848ebfda84c47d1e1698174af5" translate="yes" xml:space="preserve">
          <source>If any non-option parameters are given, the definition of the specified functions are printed.</source>
          <target state="translated">オプション以外のパラメータが与えられた場合、指定された関数の定義が出力されます。</target>
        </trans-unit>
        <trans-unit id="dcc764ad71040642c2ae2b7ce376987c8f357ee1" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;#source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">（組み込みの&lt;a href=&quot;#source&quot;&gt;ソース&lt;/a&gt;を使用して）ファイルのソース中にexitが呼び出されると、ファイルの残りの部分はスキップされますが、シェル自体は終了しません。</target>
        </trans-unit>
        <trans-unit id="2ad30bb6821fad0de41f3c375fba71f6a9c37c25" translate="yes" xml:space="preserve">
          <source>If exit is called while sourcing a file (using the &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; builtin) the rest of the file will be skipped, but the shell itself will not exit.</source>
          <target state="translated">（組み込みの&lt;a href=&quot;source#cmd-source&quot;&gt;ソース&lt;/a&gt;を使用して）ファイルのソース中にexitが呼び出された場合、ファイルの残りの部分はスキップされますが、シェル自体は終了しません。</target>
        </trans-unit>
        <trans-unit id="821287731530c6efa130c60447058d08f9892ad3" translate="yes" xml:space="preserve">
          <source>If fish encounters a problem while executing a command, the status variable may also be set to a specific value:</source>
          <target state="translated">コマンドの実行中に問題が発生した場合、ステータス変数に特定の値を設定することもできます。</target>
        </trans-unit>
        <trans-unit id="3068ba7bd98e36689eab0ca26911e82ce1011087" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with '&lt;code&gt;.&lt;/code&gt;', '&lt;code&gt;/&lt;/code&gt;' or '&lt;code&gt;~&lt;/code&gt;', fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">魚が特定の名前のコマンドを見つけることができず、「」で始まる場合 &lt;code&gt;.&lt;/code&gt; '、' &lt;code&gt;/&lt;/code&gt; 'または' &lt;code&gt;~&lt;/code&gt; '、fishはその名前のディレクトリが存在するかどうかをテストします。その場合、作業ディレクトリを変更することを暗黙的に想定しています。たとえば、ホームディレクトリに切り替える最も速い方法は、単に &lt;code&gt;~&lt;/code&gt; を押してEnter キーを押すことです。</target>
        </trans-unit>
        <trans-unit id="db62838a3a80ccd2f019a10d8292bd8ef109bbbc" translate="yes" xml:space="preserve">
          <source>If fish is unable to locate a command with a given name, and it starts with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, fish will test if a directory of that name exists. If it does, it is implicitly assumed that you want to change working directory. For example, the fastest way to switch to your home directory is to simply press &lt;code&gt;~&lt;/code&gt; and enter.</source>
          <target state="translated">fishが指定された名前のコマンドを見つけることができず、 &lt;code&gt;.&lt;/code&gt; で始まる場合。、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;~&lt;/code&gt; 、fishは、その名前のディレクトリが存在するかどうかをテストします。含まれている場合は、作業ディレクトリを変更する必要があると暗黙的に想定されます。たとえば、ホームディレクトリに切り替える最も速い方法は、 &lt;code&gt;~&lt;/code&gt; を押してEnterキーを押すことです。</target>
        </trans-unit>
        <trans-unit id="08db4ab1c440a3e304e3453045348ee442c8b3f8" translate="yes" xml:space="preserve">
          <source>If fish is your default shell and you want to copy commands from the internet that are written in a different shell language, bash for example, you can proceed in the following way:</source>
          <target state="translated">fishがデフォルトのシェルで、例えばbashなど別のシェル言語で書かれたコマンドをインターネットからコピーしたい場合は、以下のように進めます。</target>
        </trans-unit>
        <trans-unit id="47028e01b9fbf55fb3801396985dce61b199f8e5" translate="yes" xml:space="preserve">
          <source>If fish is your default shell and you want to copy commands from the internet that are written in bash (the default shell on most systems), you can proceed in one of the following two ways:</source>
          <target state="translated">fishがデフォルトのシェルで、bash(ほとんどのシステムのデフォルトシェル)で書かれたコマンドをインターネットからコピーしたい場合、次の2つの方法のいずれかで進めることができます。</target>
        </trans-unit>
        <trans-unit id="779713b50e0b6db32e410c35dd906b7eab469c0a" translate="yes" xml:space="preserve">
          <source>If invoked with multiple arguments instead of input, &lt;code&gt;string collect&lt;/code&gt; preserves each argument separately, where the number of output arguments is equal to the number of arguments given to &lt;code&gt;string collect&lt;/code&gt;.</source>
          <target state="translated">代わりに、入力の複数の引数で呼び出された場合、 &lt;code&gt;string collect&lt;/code&gt; 個別の引数を保持し、ここで、出力引数の数は、与えられた引数の数に等しい &lt;code&gt;string collect&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd1e21aed552d458b2c10cb3ad02fe6a085212c8" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The exit status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">制限が指定されている場合、それは指定されたリソースの新しい値です。オプションが指定されていない場合、 &lt;code&gt;-f&lt;/code&gt; が想定されます。値はキロバイト単位ですが、 &lt;code&gt;-t&lt;/code&gt; は秒単位であり、 &lt;code&gt;-n&lt;/code&gt; と &lt;code&gt;-u&lt;/code&gt; はスケーリングされていない値です。無効なオプションまたは引数が指定されていない限り、または新しい制限の設定中にエラーが発生しない限り、終了ステータスは0です。</target>
        </trans-unit>
        <trans-unit id="9365afaebdcba814bae204eaa9cb6846f923618b" translate="yes" xml:space="preserve">
          <source>If limit is given, it is the new value of the specified resource. If no option is given, then &lt;code&gt;-f&lt;/code&gt; is assumed. Values are in kilobytes, except for &lt;code&gt;-t&lt;/code&gt;, which is in seconds and &lt;code&gt;-n&lt;/code&gt; and &lt;code&gt;-u&lt;/code&gt;, which are unscaled values. The return status is 0 unless an invalid option or argument is supplied, or an error occurs while setting a new limit.</source>
          <target state="translated">制限が指定されている場合は、指定されたリソースの新しい値です。オプションを指定しない場合、 &lt;code&gt;-f&lt;/code&gt; が想定されます。値はキロバイト単位です。ただし、秒単位の &lt;code&gt;-t&lt;/code&gt; と、スケーリングされていない値である &lt;code&gt;-n&lt;/code&gt; および &lt;code&gt;-u&lt;/code&gt; を除きます。無効なオプションまたは引数が指定されない限り、または新しい制限の設定中にエラーが発生しない限り、戻りステータスは0です。</target>
        </trans-unit>
        <trans-unit id="ca3ffe9826b96a93254e7258c40cd2d913b9941e" translate="yes" xml:space="preserve">
          <source>If neither a pid nor a process name is specified, the command waits for all background jobs.</source>
          <target state="translated">pid やプロセス名が指定されていない場合、コマンドはすべてのバックグラウンドジョブを待ちます。</target>
        </trans-unit>
        <trans-unit id="40f766e228eab41d3736559f22189015b4f35da8" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the given &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided but no &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; が指定されていない場合、すべてのバインディング（または指定された &lt;code&gt;MODE&lt;/code&gt; のバインディングのみ）が出力されます。 &lt;code&gt;SEQUENCE&lt;/code&gt; が提供されているが、 &lt;code&gt;COMMAND&lt;/code&gt; が提供されていない場合、そのシーケンスに一致するバインディングのみが出力されます。</target>
        </trans-unit>
        <trans-unit id="6620b792aa7c50700f6a7c83a134de00e5936216" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;SEQUENCE&lt;/code&gt; is provided, all bindings (or just the bindings in the specified &lt;code&gt;MODE&lt;/code&gt;) are printed. If &lt;code&gt;SEQUENCE&lt;/code&gt; is provided without &lt;code&gt;COMMAND&lt;/code&gt;, just the binding matching that sequence is printed.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; が指定されていない場合、すべてのバインディング（または指定された &lt;code&gt;MODE&lt;/code&gt; のバインディングのみ）が出力されます。 &lt;code&gt;COMMAND&lt;/code&gt; なしで &lt;code&gt;SEQUENCE&lt;/code&gt; が提供されている場合、そのシーケンスに一致するバインディングのみが出力されます。</target>
        </trans-unit>
        <trans-unit id="7a85e1fe01cc44642ce9e8c5d9992c08bd26d23e" translate="yes" xml:space="preserve">
          <source>If no component is new, the variable ($fish_user_paths or $PATH) is not set again or otherwise modified, so variable handlers are not triggered.</source>
          <target state="translated">新しいコンポーネントがない場合、変数($fish_user_pathsまたは$PATH)は再度設定されたり、その他の方法で変更されることはないので、変数ハンドラーはトリガーされません。</target>
        </trans-unit>
        <trans-unit id="319b10cf51c7aaf0a0ad28a0d4b4f6c772504c25" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name '&lt;code&gt;-&lt;/code&gt;' is used, stdin will be read.</source>
          <target state="translated">ファイルが指定されておらず、標準入力が端末でない場合、またはファイル名「 &lt;code&gt;-&lt;/code&gt; 」が使用されている場合、標準入力が読み取られます。</target>
        </trans-unit>
        <trans-unit id="7bf33c78938c4ed9c99f65ad25f906359596c488" translate="yes" xml:space="preserve">
          <source>If no file is specified and stdin is not the terminal, or if the file name &lt;code&gt;-&lt;/code&gt; is used, stdin will be read.</source>
          <target state="translated">ファイルが指定されておらず、stdinが端末でない場合、またはファイル名 &lt;code&gt;-&lt;/code&gt; が使用されている場合、stdinが読み取られます。</target>
        </trans-unit>
        <trans-unit id="193caf7005f5652feb5a621fdb872e8d40cb588f" translate="yes" xml:space="preserve">
          <source>If no option to determine how to split like &lt;code&gt;--delimiter&lt;/code&gt;, &lt;code&gt;--line&lt;/code&gt; or &lt;code&gt;--tokenize&lt;/code&gt; is given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">以下のように分割する方法を決定する場合はオプションなし &lt;code&gt;--delimiter&lt;/code&gt; 、 &lt;code&gt;--line&lt;/code&gt; または &lt;code&gt;--tokenize&lt;/code&gt; が与えられ、変数 &lt;code&gt;IFS&lt;/code&gt; は、上のスプリットへの文字のリストとして使用されています。 &lt;code&gt;IFS&lt;/code&gt; の使用に依存することは非推奨であり、この動作は将来のバージョンで削除される予定です。 &lt;code&gt;IFS&lt;/code&gt; のデフォルト値には、スペース、タブ、および改行文字が含まれます。特別な場合として、 &lt;code&gt;IFS&lt;/code&gt; が空の文字列に設定されている場合、入力の各文字は個別のトークンと見なされます。</target>
        </trans-unit>
        <trans-unit id="e05e6aafbb793ade9f477fd1403ff37aea85d34f" translate="yes" xml:space="preserve">
          <source>If no piping or other compound shell constructs are required, variable-expansion-as-command, as in &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt;, is also an option.</source>
          <target state="translated">配管やその他の複合シェル構造が必要ない場合は、 &lt;code&gt;set cmd ls -la; $cmd&lt;/code&gt; - laのようにコマンドとしてvariable-expansion- la; $ cmdもオプションです。</target>
        </trans-unit>
        <trans-unit id="dcfe8801c42ff77994dd55c54562f05ad1157dea" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt; and &lt;a href=&quot;fg#cmd-fg&quot;&gt;fg&lt;/a&gt;). If one or more PIDs are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">プロセスが指定されていない場合、最後に使用されたジョブが削除されます（&lt;a href=&quot;bg#cmd-bg&quot;&gt;bg&lt;/a&gt;や&lt;a href=&quot;fg#cmd-fg&quot;&gt;fgなど&lt;/a&gt;）。1つ以上のPIDが指定されている場合、指定されたプロセスIDを持つジョブはジョブリストから削除されます。無効なジョブは無視され、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="536986c9ac77b0a65c848619315ad13a2f046d5c" translate="yes" xml:space="preserve">
          <source>If no process is specified, the most recently-used job is removed (like &lt;code&gt;bg&lt;/code&gt; and &lt;code&gt;fg&lt;/code&gt;). If one or more &lt;code&gt;PID&lt;/code&gt;s are specified, jobs with the specified process IDs are removed from the job list. Invalid jobs are ignored and a warning is printed.</source>
          <target state="translated">プロセスが指定されていない場合、最後に使用されたジョブが削除されます（ &lt;code&gt;bg&lt;/code&gt; や &lt;code&gt;fg&lt;/code&gt; など）。1つ以上の &lt;code&gt;PID&lt;/code&gt; が指定されている場合、指定されたプロセスIDのジョブはジョブリストから削除されます。無効なジョブは無視され、警告が出力されます。</target>
        </trans-unit>
        <trans-unit id="713bf8682430a51e2b7af1a6d836f8e75fd1bdaa" translate="yes" xml:space="preserve">
          <source>If no variable names are provided, &lt;code&gt;read&lt;/code&gt; enters a special case that simply provides redirection from standard input to standard output, useful for command substitution. For instance, the fish shell command below can be used to read data that should be provided via a command line argument from the console instead of hardcoding it in the command itself, allowing the command to both be reused as-is in various contexts with different input values and preventing possibly sensitive text from being included in the shell history:</source>
          <target state="translated">変数名が指定されていない場合、 &lt;code&gt;read&lt;/code&gt; は、標準入力から標準出力へのリダイレクトを提供する特別なケースに入り、コマンド置換に役立ちます。たとえば、以下のフィッシュシェルコマンドを使用すると、コマンド自体にハードコーディングするのではなく、コンソールからコマンドライン引数を介して提供する必要のあるデータを読み取ることができるため、コマンドをさまざまなコンテキストでさまざまなコンテキストでそのまま再利用できます。値を入力し、機密性の高いテキストがシェルの履歴に含まれないようにします。</target>
        </trans-unit>
        <trans-unit id="5d57c5310bf24631a02f8ac52009cfffd06f806b" translate="yes" xml:space="preserve">
          <source>If none of these apply, the commit SHA shortened to 8 characters is used.</source>
          <target state="translated">これらに該当しない場合は、8文字に短縮されたコミットSHAが使用されます。</target>
        </trans-unit>
        <trans-unit id="10333c9963acc5318f6aa7e98a933a59ba99c98b" translate="yes" xml:space="preserve">
          <source>If one argument is specified, the internal engine will be seeded with the argument for future invocations of &lt;code&gt;random&lt;/code&gt; and no output will be produced.</source>
          <target state="translated">引数が1つ指定されている場合、内部エンジンには、将来 &lt;code&gt;random&lt;/code&gt; 呼び出されるための引数がシードされ、出力は生成されません。</target>
        </trans-unit>
        <trans-unit id="f6b617c0f8612fdf2ea16aba5ec62984acf5c44a" translate="yes" xml:space="preserve">
          <source>If only 123 and 789 exist, it will still background them and print an error about 456.</source>
          <target state="translated">123と789だけが存在する場合でも、それらをバックグラウンドにして456についてのエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="e5b23704e06de8e7cf41b466203c3d1a05734047" translate="yes" xml:space="preserve">
          <source>If set is called with no arguments, the names and values of all shell variables are printed in sorted order. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.</source>
          <target state="translated">set が引数なしで呼ばれた場合、すべてのシェル変数の名前と値がソートされた順に表示されます。スコープフラグやエクスポートフラグが指定されている場合は、 指定されたスコープにマッチする変数のみが表示されます。</target>
        </trans-unit>
        <trans-unit id="c9d5f4fcbf5a20e0012582eafdf56b977cf064da" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, 256 color support will always be enabled.</source>
          <target state="translated">ターミナルの256色サポートを terminfo が報告している場合、256色サポートは常に有効になります。</target>
        </trans-unit>
        <trans-unit id="302a7adb7b2bb424535b98eb0c4ef6539ea7cb20" translate="yes" xml:space="preserve">
          <source>If terminfo reports 256 color support for a terminal, support will always be enabled. To debug color palette problems, &lt;code&gt;tput colors&lt;/code&gt; may be useful to see the number of colors in terminfo for a terminal. Fish launched as &lt;code&gt;fish -d2&lt;/code&gt; will include diagnostic messages that indicate the color support mode in use.</source>
          <target state="translated">terminfoが端末の256色サポートを報告する場合、サポートは常に有効になります。カラーパレットの問題をデバッグするには、端末のterminfoで色の数を確認するために &lt;code&gt;tput colors&lt;/code&gt; が役立つ場合があります。 &lt;code&gt;fish -d2&lt;/code&gt; として起動されたFishには、使用中のカラーサポートモードを示す診断メッセージが含まれます。</target>
        </trans-unit>
        <trans-unit id="4d30c96739992df19433df0a6e1c59dfb95af762" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can</source>
          <target state="translated">ディレクトリの探索に時間がかかる場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="34986c35bab0e2df661c76619902534fb332f46c" translate="yes" xml:space="preserve">
          <source>If that directory traversal is taking a long time, you can &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;C&lt;/b&gt; out of it.</source>
          <target state="translated">そのディレクトリトラバーサルに長い時間がかかる場合は、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;C&lt;/b&gt;を使用できます。</target>
        </trans-unit>
        <trans-unit id="ffef75da37c5f07daa061c4afec5f2616551ca39" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press</source>
          <target state="translated">場合は &lt;code&gt;$VISUAL&lt;/code&gt; 環境変数が設定され、それが編集にプログラムの機能として使用されます。場合は &lt;code&gt;$VISUAL&lt;/code&gt; 設定されていないが、 &lt;code&gt;$EDITOR&lt;/code&gt; セットされ、それが使用されます。それ以外の場合は、組み込みのエディターが使用されます。組み込みエディターを使用してリテラル改行を入力するには、を押す必要があることに注意してください</target>
        </trans-unit>
        <trans-unit id="e3d023db5ee6df47941a2ca566209f059001722c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$VISUAL&lt;/code&gt; environment variable is set, it will be used as the program to edit the function. If &lt;code&gt;$VISUAL&lt;/code&gt; is unset but &lt;code&gt;$EDITOR&lt;/code&gt; is set, that will be used. Otherwise, a built-in editor will be used. Note that to enter a literal newline using the built-in editor you should press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt;. Pressing &lt;b&gt;Enter&lt;/b&gt; signals that you are done editing the function. This does not apply to an external editor like emacs or vim.</source>
          <target state="translated">場合は &lt;code&gt;$VISUAL&lt;/code&gt; 環境変数が設定され、それが編集にプログラムの機能として使用されます。場合は &lt;code&gt;$VISUAL&lt;/code&gt; 設定されていないが、 &lt;code&gt;$EDITOR&lt;/code&gt; セットされ、それが使用されます。それ以外の場合は、組み込みのエディターが使用されます。組み込みのエディタを使用してリテラルの改行を入力するには、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Enter &lt;/b&gt;&lt;em&gt;キー&lt;/em&gt;を押す必要があることに注意して&lt;b&gt;ください&lt;/b&gt;。&lt;b&gt;Enterキーを&lt;/b&gt;押すと、関数の編集が完了したことが通知されます。これは、emacsやvimなどの外部エディターには適用されません。</target>
        </trans-unit>
        <trans-unit id="e8fb943c750f92e3917384bc05f81b775bd8db88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;--delimiter&lt;/code&gt; argument is not given, the variable &lt;code&gt;IFS&lt;/code&gt; is used as a list of characters to split on. Relying on the use of &lt;code&gt;IFS&lt;/code&gt; is deprecated and this behaviour will be removed in future versions. The default value of &lt;code&gt;IFS&lt;/code&gt; contains space, tab and newline characters. As a special case, if &lt;code&gt;IFS&lt;/code&gt; is set to the empty string, each character of the input is considered a separate token.</source>
          <target state="translated">&lt;code&gt;--delimiter&lt;/code&gt; 引数が指定されていない場合、変数 &lt;code&gt;IFS&lt;/code&gt; は分割する文字のリストとして使用されます。 &lt;code&gt;IFS&lt;/code&gt; の使用に依存することは非推奨であり、この動作は将来のバージョンで削除される予定です。 &lt;code&gt;IFS&lt;/code&gt; のデフォルト値には、スペース、タブ、および改行文字が含まれています。特殊なケースとして、 &lt;code&gt;IFS&lt;/code&gt; が空の文字列に設定されている場合、入力の各文字は個別のトークンと見なされます。</target>
        </trans-unit>
        <trans-unit id="42f805a3ed49f9b5bb3e1d744a17decb53fbbd80" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of a key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys). Normally this will print an error if the current &lt;code&gt;$TERM&lt;/code&gt; entry doesn't have a given key, unless the &lt;code&gt;-s&lt;/code&gt; switch is given.</source>
          <target state="translated">&lt;code&gt;-k&lt;/code&gt; スイッチを使用する場合、シーケンスの代わりにキーの名前（ 'down'、 'up'、 'backspace'など）が使用されます。使用される名前は、対応するcurses変数と同じですが、接頭辞「key_」がありません。（詳細については &lt;code&gt;terminfo(5)&lt;/code&gt; を参照 &lt;code&gt;bind --key-names&lt;/code&gt; か、使用可能なすべての名前付きキーのリストについてはbind --key-namesを使用してください）。通常、 &lt;code&gt;-s&lt;/code&gt; スイッチが指定されていない限り、現在の &lt;code&gt;$TERM&lt;/code&gt; エントリに指定されたキーがない場合、これはエラーを出力します。</target>
        </trans-unit>
        <trans-unit id="b9a1bc2ff2f56d3990f495529faa7ba44ead0455" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-k&lt;/code&gt; switch is used, the name of the key (such as 'down', 'up' or 'backspace') is used instead of a sequence. The names used are the same as the corresponding curses variables, but without the 'key_' prefix. (See &lt;code&gt;terminfo(5)&lt;/code&gt; for more information, or use &lt;code&gt;bind --key-names&lt;/code&gt; for a list of all available named keys.) If used in conjunction with the &lt;code&gt;-s&lt;/code&gt; switch, &lt;code&gt;bind&lt;/code&gt; will silently ignore bindings to named keys that are not found in termcap for the current &lt;code&gt;$TERMINAL&lt;/code&gt;, otherwise a warning is emitted.</source>
          <target state="translated">&lt;code&gt;-k&lt;/code&gt; スイッチを使用する場合、シーケンスの代わりにキーの名前（「down」、「up」、「backspace」など）が使用されます。使用される名前は対応するcurses変数と同じですが、「key_」接頭辞がありません。（詳細については、 &lt;code&gt;terminfo(5)&lt;/code&gt; を参照してください。または、使用可能なすべての名前付きキーのリストについては、 &lt;code&gt;bind --key-names&lt;/code&gt; を使用してください。）- &lt;code&gt;-s&lt;/code&gt; スイッチと一緒に使用すると、 &lt;code&gt;bind&lt;/code&gt; は、見つからない名前付きキーへのバインディングを暗黙的に無視します現在の &lt;code&gt;$TERMINAL&lt;/code&gt; termcap では、それ以外の場合は警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="1d7b9b3be6cec368c8849bf11af8487da853a633" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current directory history is also displayed.</source>
          <target state="translated">場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--list&lt;/code&gt; フラグが指定され、現在のディレクトリ履歴も表示されます。</target>
        </trans-unit>
        <trans-unit id="4cfc35a3a98ed01dd389efdde71deb0bf3c6669a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-l&lt;/code&gt; or &lt;code&gt;--list&lt;/code&gt; flag is specified, the current history is also displayed.</source>
          <target state="translated">場合は &lt;code&gt;-l&lt;/code&gt; または &lt;code&gt;--list&lt;/code&gt; フラグが指定され、現在の履歴も表示されます。</target>
        </trans-unit>
        <trans-unit id="492a67bd7712dda8e66c7c5fc44c0836f4b18f3a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; flag is provided, the command returns as soon as the first job completes. If it is not provided, it returns after all jobs complete.</source>
          <target state="translated">場合は &lt;code&gt;-n&lt;/code&gt; / &lt;code&gt;--any&lt;/code&gt; フラグはすぐに最初のジョブが完了するほど、コマンドのリターンを提供します。指定されていない場合は、すべてのジョブが完了した後に戻ります。</target>
        </trans-unit>
        <trans-unit id="63b9207ee5d979afeb85211115a3c6ffa7012a71" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/tmp&lt;/code&gt; directory exists, copy the &lt;code&gt;/etc/motd&lt;/code&gt; file to it:</source>
          <target state="translated">&lt;code&gt;/tmp&lt;/code&gt; ディレクトリが存在する場合は、 &lt;code&gt;/etc/motd&lt;/code&gt; ファイルをそこにコピーします。</target>
        </trans-unit>
        <trans-unit id="c3b856c7f49407f5bd18390ec22c0a975e0942a6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;BROWSER&lt;/code&gt; environment variable is set, it will be used as the name of the web browser to open instead of the system default.</source>
          <target state="translated">場合は &lt;code&gt;BROWSER&lt;/code&gt; 環境変数が設定され、システムのデフォルトの代わりに開くために、Webブラウザの名前として使用されます。</target>
        </trans-unit>
        <trans-unit id="3debf54dad8f4dc6d939e041eacf2dbfc04ad3d0" translate="yes" xml:space="preserve">
          <source>If the BROWSER environment variable is set, it will be used to display the documentation. Otherwise, fish will search for a suitable browser.</source>
          <target state="translated">環境変数browserが設定されている場合は、ドキュメントを表示するために使用されます。そうでない場合、fishは適切なブラウザを探します。</target>
        </trans-unit>
        <trans-unit id="aa6fc1ea4246a9f77c10ddff36e9849dd9022bcd" translate="yes" xml:space="preserve">
          <source>If the above code was run with &lt;code&gt;$animal&lt;/code&gt; set to &lt;code&gt;whale&lt;/code&gt;, the output would be &lt;code&gt;mammal&lt;/code&gt;.</source>
          <target state="translated">上記のコードが &lt;code&gt;$animal&lt;/code&gt; を &lt;code&gt;whale&lt;/code&gt; に設定して実行された場合、出力は &lt;code&gt;mammal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d75d0af6becad51e324987bba4dbf96c51e8300a" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, it is necessary to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; in order to tell fish that the function should not call itself, but rather a command with the same name. Failing to do so will cause infinite recursion bugs.</source>
          <target state="translated">エイリアスがエイリアスコマンドと同じ名前である場合、関数にそれ自体を呼び出すのではなく、同じ名前のコマンドを呼び出す必要があることを魚に伝えるために、プログラムの呼び出しの前に &lt;code&gt;command&lt;/code&gt; を付ける必要があります。そうしないと、無限の再帰バグが発生します。</target>
        </trans-unit>
        <trans-unit id="49ebc34132e7660866a77bb4bd002951a641b8a0" translate="yes" xml:space="preserve">
          <source>If the alias has the same name as the aliased command, you need to prefix the call to the program with &lt;code&gt;command&lt;/code&gt; to tell fish that the function should not call itself, but rather a command with the same name. If you forget to do so, the function would call itself until the end of time. Usually fish is smart enough to figure this out and will refrain from doing so (which is hopefully in your interest).</source>
          <target state="translated">エイリアスの名前がエイリアスコマンドと同じである場合は、プログラムの呼び出しの前に &lt;code&gt;command&lt;/code&gt; を付けて、関数がそれ自体を呼び出すのではなく、同じ名前のコマンドを呼び出す必要があることをfishに通知する必要があります。そうするのを忘れると、関数は時間の終わりまで自分自身を呼び出します。通常、魚はこれを理解するのに十分賢く、そうすることを控えます（これはあなたの利益になることを願っています）。</target>
        </trans-unit>
        <trans-unit id="e5185e556f9b263d1410cf1a894fc4a29463388d" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press</source>
          <target state="translated">欲しい議論が歴史の中でずっと前のものであれば(例えば、2行前のもの-それはたくさんの言葉です!)、それの任意の部分を入力してから</target>
        </trans-unit>
        <trans-unit id="ad3ed0aa46a2e24462a85265faa22a817cd5bf4f" translate="yes" xml:space="preserve">
          <source>If the argument you want is far back in history (e.g. 2 lines back - that's a lot of words!), type any part of it and then press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt;. This will show only arguments containing that part and you will get what you want much faster. Try it out, this is very convenient!</source>
          <target state="translated">あなたが欲しい引数がはるかに戻って歴史の中である場合（例えばバック2つのライン！ -言葉の多くはだ）、任意のその一部、その後、プレス型&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;。これにより、その部分を含む引数のみが表示され、必要なものがより速く取得されます。試してみてください、これはとても便利です！</target>
        </trans-unit>
        <trans-unit id="8b1303483eab8a0aafe5607e65c79febb8c3aca1" translate="yes" xml:space="preserve">
          <source>If the commandline contains</source>
          <target state="translated">コマンドラインに</target>
        </trans-unit>
        <trans-unit id="e3f1eb54148bd5719468d4632589d32c09c11b49" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press</source>
          <target state="translated">コマンドラインを読み込む場合は &lt;code&gt;cd m&lt;/code&gt; 、上にカーソルを置き &lt;code&gt;m&lt;/code&gt; 文字を押します</target>
        </trans-unit>
        <trans-unit id="4b1c190c6ad0436a0fd3fb383f1281a2e816bf89" translate="yes" xml:space="preserve">
          <source>If the commandline reads &lt;code&gt;cd m&lt;/code&gt;, place the cursor over the &lt;code&gt;m&lt;/code&gt; character and press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;uarr;&lt;/b&gt; to search for previously typed words containing 'm'.</source>
          <target state="translated">コマンドラインを読み込む場合は &lt;code&gt;cd m&lt;/code&gt; 、上にカーソルを置き &lt;code&gt;m&lt;/code&gt; 文字を押して&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;uarr;&lt;/b&gt;「M」を含む、以前に入力した単語を検索します。</target>
        </trans-unit>
        <trans-unit id="aec97b1cdbedc052d45f0ca8a3886ba07331192c" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output 'abar1 abar2 abar3 afoo1 afoo2 afoo3'.</source>
          <target state="translated">現在のディレクトリにファイル「foo」と「bar」が含まれている場合、コマンド &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; は「abar1 abar2 abar3 afoo1 afoo2 afoo3」を出力します。</target>
        </trans-unit>
        <trans-unit id="3b9446dcdf384793d9dbf8ed3d708bf58cbc9557" translate="yes" xml:space="preserve">
          <source>If the current directory contains the files 'foo' and 'bar', the command &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; will output &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt;.</source>
          <target state="translated">現在のディレクトリにファイル「foo」と「bar」が含まれている場合、コマンド &lt;code&gt;echo a(ls){1,2,3}&lt;/code&gt; は &lt;code&gt;abar1 abar2 abar3 afoo1 afoo2 afoo3&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="6ce9ab732e8430cafcdfc25d7e2465b58abf7288" translate="yes" xml:space="preserve">
          <source>If the cursor shape does not appear to be changing after setting the above variables, it's likely your terminal emulator does not support the capabilities necessary to do this. It may also be the case, however, that &lt;code&gt;fish_vi_cursor&lt;/code&gt; has not detected your terminal's features correctly (for example, if you are using &lt;code&gt;tmux&lt;/code&gt;). If this is the case, you can force &lt;code&gt;fish_vi_cursor&lt;/code&gt; to set the cursor shape by setting &lt;code&gt;$fish_vi_force_cursor&lt;/code&gt; in &lt;code&gt;config.fish&lt;/code&gt;. You'll have to restart fish for any changes to take effect. If cursor shape setting remains broken after this, it's almost certainly an issue with your terminal emulator, and not fish.</source>
          <target state="translated">上記の変数を設定した後、カーソルの形状が変化していないように見える場合は、ターミナルエミュレータがこれを行うために必要な機能をサポートしていない可能性があります。ただし、 &lt;code&gt;fish_vi_cursor&lt;/code&gt; が端末の機能を正しく検出していない場合もあります（たとえば、 &lt;code&gt;tmux&lt;/code&gt; を使用している場合）。このような場合は、強制することができ &lt;code&gt;fish_vi_cursor&lt;/code&gt; 設定することで、カーソルの形状を設定する &lt;code&gt;$fish_vi_force_cursor&lt;/code&gt; して &lt;code&gt;config.fish&lt;/code&gt; 。変更を有効にするには、魚を再起動する必要があります。この後もカーソルの形状設定が壊れたままの場合は、端末エミュレータの問題であり、魚ではありません。</target>
        </trans-unit>
        <trans-unit id="b0808aebe4a3101606343cf63b29ba38dae1d40f" translate="yes" xml:space="preserve">
          <source>If the end is negative the range always goes up, so &lt;code&gt;2..-2&lt;/code&gt; will go from element 2 to 4, and &lt;code&gt;2..-16&lt;/code&gt; won't go anywhere because there is no way to go from the second element to one that doesn't exist, while going up. If the start is negative the range always goes down, so &lt;code&gt;-2..1&lt;/code&gt; will go from element 4 to 1, and &lt;code&gt;-16..2&lt;/code&gt; won't go anywhere because there is no way to go from the second element to one that doesn't exist, while going down.</source>
          <target state="translated">終わりが負の場合、範囲は常に上がるので、 &lt;code&gt;2..-2&lt;/code&gt; は要素2から4に移動し、 &lt;code&gt;2..-16&lt;/code&gt; は、2番目の要素から次の要素に移動する方法がないため、どこにも移動しません。上昇中は存在しません。開始が負の場合、範囲は常に下がるので、 &lt;code&gt;-2..1&lt;/code&gt; は要素4から1に移動し、 &lt;code&gt;-16..2&lt;/code&gt; は、2番目の要素から次の要素に移動する方法がないため、どこにも移動しません。降りている間は存在しません。</target>
        </trans-unit>
        <trans-unit id="ea966f7daecf90f40c09560ec0ace32a38679be8" translate="yes" xml:space="preserve">
          <source>If the end is smaller than the start, or the start is larger than the end, range expansion will go in reverse. This is unless exactly one of the given indices is negative, so the direction doesn't change if the list has fewer elements than expected.</source>
          <target state="translated">末尾が開始よりも小さい場合、または開始が終了よりも大きい場合、範囲展開は逆になります。これは、与えられたインデックスの正確に1つが負の値でない限り、リストの要素数が予想よりも少ない場合には方向は変わりません。</target>
        </trans-unit>
        <trans-unit id="9ac01aa8bdf61c4705d1b573ca6b14e107487f86" translate="yes" xml:space="preserve">
          <source>If the expression is successfully evaluated and doesn't over/underflow or return NaN the return &lt;code&gt;status&lt;/code&gt; is zero (success) else one.</source>
          <target state="translated">式が正常に評価され、オーバーフロー/アンダーフローまたはNaNを返さない場合、戻り &lt;code&gt;status&lt;/code&gt; は0（成功）、それ以外は1です。</target>
        </trans-unit>
        <trans-unit id="5cfff00b5bb7a05a9b5b06be91a9cc46be32a1f7" translate="yes" xml:space="preserve">
          <source>If the first and second parts are skipped, they are assumed to be &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;, respectively. As an example, &lt;code&gt;r,u+w&lt;/code&gt; means all users should have read access and the file owner should also have write access.</source>
          <target state="translated">最初の部分と2番目の部分をスキップ &lt;code&gt;a&lt;/code&gt; と、それぞれaと &lt;code&gt;=&lt;/code&gt; と見なされます。例として、 &lt;code&gt;r,u+w&lt;/code&gt; は、すべてのユーザーが読み取りアクセス権を持ち、ファイルの所有者も書き込みアクセス権を持つ必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="b4698317f8ba03650612df6e27206dff978e2d3a" translate="yes" xml:space="preserve">
          <source>If the function definition is changed, all running shells will automatically reload the altered version, after a while.</source>
          <target state="translated">関数の定義が変更された場合、しばらくすると実行中のすべてのシェルが自動的に変更後のバージョンを再読み込みします。</target>
        </trans-unit>
        <trans-unit id="51826fa22bf5b5c7586ce652a67a6e4318f4ac64" translate="yes" xml:space="preserve">
          <source>If the function definition is changed, all running shells will automatically reload the altered version.</source>
          <target state="translated">関数の定義が変更された場合、実行中のすべてのシェルは自動的に変更後のバージョンをリロードします。</target>
        </trans-unit>
        <trans-unit id="9a3fcf12ac09fc3d89e8bddfebabb9762099029f" translate="yes" xml:space="preserve">
          <source>If the given argument doesn't work for the given format (like when you try to convert a number like 3.141592 to an integer), printf prints an error, to stderr. printf will then also return non-zero, but will still try to print as much as it can.</source>
          <target state="translated">与えられた引数が与えられたフォーマットで動作しない場合(3.141592のような数値を整数に変換しようとした場合など)、printfは標準エラーを表示します。</target>
        </trans-unit>
        <trans-unit id="154cdf4f784ed79e1fcb74335c0c901b6cf4ac90" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will constrain the recall to lines that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">欲しい行が履歴の中でかなり後ろにある場合は、その行の任意の部分を入力してから、Upを1回以上押します。こうすることで、このテキストを含む行への呼び出しが制限され、目的の行への到達が格段に速くなります。これは、「!vi」や「!bar.c」などの代わりになります。</target>
        </trans-unit>
        <trans-unit id="3b7bdf7353455fbb73bf0134588c41d8ca71de37" translate="yes" xml:space="preserve">
          <source>If the line you want is far back in the history, type any part of the line and then press Up one or more times. This will filter the recalled lines to ones that include this text, and you will get to the line you want much faster. This replaces &quot;!vi&quot;, &quot;!?bar.c&quot; and the like.</source>
          <target state="translated">目的の行が履歴のかなり後ろの方にある場合は、行の任意の部分を入力してから「上」を1回以上押します。これにより、呼び出された行がこのテキストを含むものにフィルタリングされ、目的の行に早くたどり着くことができます。これは、&quot;! vi&quot;、&quot;!?bar.c &quot;などの代わりになります。</target>
        </trans-unit>
        <trans-unit id="70006a59c6935a4438f9d0040be162c8ee9ec5a8" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible.</source>
          <target state="translated">リストが表示されている場合、control-S（または &lt;code&gt;pager-toggle-search&lt;/code&gt; バインディング）を押すと、リストをフィルタリングできます。Shift-tab（または &lt;code&gt;complete-and-search&lt;/code&gt; バインディング）は、検索フィールドをすぐに表示して完了をトリガーします。</target>
        </trans-unit>
        <trans-unit id="d76a8116548a88ed416d142b0ea322f0ccb59543" translate="yes" xml:space="preserve">
          <source>If the list is visible, pressing control-S (or the &lt;code&gt;pager-toggle-search&lt;/code&gt; binding) will allow filtering the list. Shift-tab (or the &lt;code&gt;complete-and-search&lt;/code&gt; binding) will trigger completion with the search field immediately visible. These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">リストが表示されている場合は、control-S（または &lt;code&gt;pager-toggle-search&lt;/code&gt; バインディング）を押すと、リストをフィルタリングできます。Shift-tab（または &lt;code&gt;complete-and-search&lt;/code&gt; バインディング）は、検索フィールドがすぐに表示された状態で完了をトリガーします。これらは、 &lt;code&gt;fish&lt;/code&gt; が提供する汎用タブ補完です。</target>
        </trans-unit>
        <trans-unit id="275b4b014bd30e8806c2588d2da955cb7daf020a" translate="yes" xml:space="preserve">
          <source>If the operation fails, an error will be reported.</source>
          <target state="translated">操作に失敗した場合は、エラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="29df263ac386a0b20ba5f9a3e6fe000d33b8c6f2" translate="yes" xml:space="preserve">
          <source>If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear and no additional splitting on newlines takes place.</source>
          <target state="translated">最後のステップとして出力が&lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;stringsplitまたはstringsplit0に&lt;/a&gt;パイプされる場合、それらの分割は表示されたとおりに使用され、改行で追加の分割は行われません。</target>
        </trans-unit>
        <trans-unit id="a8520adcbbdaffc01186486c06aba4bb1a9f6f80" translate="yes" xml:space="preserve">
          <source>If the output is piped to &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split or string split0&lt;/a&gt; as the last step, those splits are used as they appear instead of splitting lines.</source>
          <target state="translated">最後のステップとして出力が&lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;stringsplitまたはstringsplit0に&lt;/a&gt;パイプされる場合、これらの分割は、行を分割する代わりに、表示されたとおりに使用されます。</target>
        </trans-unit>
        <trans-unit id="48cbf00537e46f313957ac2ba3ba9168d8838d5a" translate="yes" xml:space="preserve">
          <source>If the output of &lt;code&gt;jobs&lt;/code&gt; is redirected or if it is part of a command substitution, the column header that is usually printed is omitted, making it easier to parse.</source>
          <target state="translated">&lt;code&gt;jobs&lt;/code&gt; の出力がリダイレクトされる場合、またはコマンド置換の一部である場合、通常出力される列ヘッダーは省略されるため、解析が容易になります。</target>
        </trans-unit>
        <trans-unit id="e4c01f00f1709a1d845be8af766e2896516906fa" translate="yes" xml:space="preserve">
          <source>If the path is invalid no translated path will be written to stdout and an error will be reported.</source>
          <target state="translated">パスが無効な場合、翻訳されたパスは標準出力に書き込まれず、エラーが報告されます。</target>
        </trans-unit>
        <trans-unit id="e1e2f0cd5d9c3189924438eab165e537469221dd" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a terminal device, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">指定されたファイル記述子が端末装置である場合、コマンドの終了ステータスはゼロである。それ以外の場合、終了ステータスはゼロではありません。標準エラーにはメッセージは出力されません。</target>
        </trans-unit>
        <trans-unit id="e907fd3510899683ab1ac3f96d2aac1979d9258b" translate="yes" xml:space="preserve">
          <source>If the specified file descriptor is a tty, the exit status of the command is zero. Otherwise, the exit status is non-zero. No messages are printed to standard error.</source>
          <target state="translated">指定されたファイル記述子が tty の場合、コマンドの終了ステータスはゼロである。それ以外の場合、終了ステータスはゼロではありません。標準エラーにはメッセージは出力されません。</target>
        </trans-unit>
        <trans-unit id="fe06c7e257d873be32fd7989f5055c27083aeab6" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;../index#variables-lists&quot;&gt;variable list&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">ユーザーが関数の後に追加の引数を入力すると、それらは環境&lt;a href=&quot;../index#variables-lists&quot;&gt;変数リスト&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 挿入されます。場合 &lt;code&gt;--argument-names&lt;/code&gt; オプションが提供され、引数は、そのオプションで指定した名前に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="bd0e2ed527cbeaac8bf34e5481dc729ba00211c1" translate="yes" xml:space="preserve">
          <source>If the user enters any additional arguments after the function, they are inserted into the environment &lt;a href=&quot;index#variables-arrays&quot;&gt;variable array&lt;/a&gt;&lt;code&gt;$argv&lt;/code&gt;. If the &lt;code&gt;--argument-names&lt;/code&gt; option is provided, the arguments are also assigned to names specified in that option.</source>
          <target state="translated">ユーザーが関数の後に追加の引数を入力すると、それらは環境&lt;a href=&quot;index#variables-arrays&quot;&gt;変数配列&lt;/a&gt; &lt;code&gt;$argv&lt;/code&gt; 挿入されます。場合 &lt;code&gt;--argument-names&lt;/code&gt; オプションが提供され、引数は、そのオプションで指定した名前に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="89093e95575f5c91e69c231cc514a5f888c355b9" translate="yes" xml:space="preserve">
          <source>If the variable $animal contains the name of an animal, the following code would attempt to classify it:</source>
          <target state="translated">変数 $animal に動物の名前が含まれている場合、以下のコードはそれを分類しようとします。</target>
        </trans-unit>
        <trans-unit id="081ef0f3bbeaf93e50b97aca197ba4dab7103ab9" translate="yes" xml:space="preserve">
          <source>If the variable &lt;code&gt;MANPATH&lt;/code&gt; is defined and not empty, print the contents. (If &lt;code&gt;MANPATH&lt;/code&gt; is not defined, then it will expand to zero arguments, unless quoted.)</source>
          <target state="translated">変数 &lt;code&gt;MANPATH&lt;/code&gt; が定義されていて空でない場合は、内容を出力します。（ &lt;code&gt;MANPATH&lt;/code&gt; が定義されていない場合、引用されない限り、引数はゼロに展開されます。）</target>
        </trans-unit>
        <trans-unit id="b85b340b71b7dd9ea477da93a9f45e28372572db" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more array elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those array elements specified will be changed. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">変数名が &lt;code&gt;PATH[1 3 7]&lt;/code&gt; などの1つ以上の配列要素の場合、指定された配列要素のみが変更されます。配列変数を展開または割り当てるときに負のインデックスを指定すると、インデックスは配列の最後から計算されます。たとえば、インデックス-1は配列の最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="2711332599fb67538cfe4343e904027c558ff897" translate="yes" xml:space="preserve">
          <source>If the variable name is one or more list elements, such as &lt;code&gt;PATH[1 3 7]&lt;/code&gt;, only those list elements specified will be changed. If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="translated">変数名が &lt;code&gt;PATH[1 3 7]&lt;/code&gt; などの1つ以上のリスト要素である場合、指定されたリスト要素のみが変更されます。リスト変数を展開または割り当てるときに負のインデックスを指定すると、インデックスはリストの最後から計算されます。たとえば、インデックス-1は、リストの最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="a6814ef5142616c01b6f2d05d43a0d85447be5e1" translate="yes" xml:space="preserve">
          <source>If the wildcard doesn't match any files, fish prints an error instead of running the command:</source>
          <target state="translated">ワイルドカードがどのファイルにもマッチしなかった場合、fishはコマンドを実行せずにエラーを表示します。</target>
        </trans-unit>
        <trans-unit id="788fcc2dc7b9ec9c743aa985b73d706a1c941ace" translate="yes" xml:space="preserve">
          <source>If there are multiple files with the same name in these directories, only the first will be executed. They are executed in order of their filename, sorted (like globs) in a natural order (i.e. &quot;01&quot; sorts before &quot;2&quot;).</source>
          <target state="translated">これらのディレクトリに同じ名前のファイルが複数ある場合、最初のファイルのみが実行されます。これらのファイルは、ファイル名の順に実行され、自然な順序でソートされます (グロブのように)(例:&quot;01&quot; は &quot;2&quot; の前にソートされます)。</target>
        </trans-unit>
        <trans-unit id="eac425bf6207cbab94ad0592640cd63376fdd157" translate="yes" xml:space="preserve">
          <source>If there is no &quot;,&quot; or variable expansion between the curly braces, they will not be expanded:</source>
          <target state="translated">中括弧の間に「、」や変数の展開がない場合は、展開されません。</target>
        </trans-unit>
        <trans-unit id="37b3f6c1d9e2443aab8662a7a439797d66881a18" translate="yes" xml:space="preserve">
          <source>If there is no function called &lt;code&gt;NAME&lt;/code&gt; a new function will be created with the specified name</source>
          <target state="translated">&lt;code&gt;NAME&lt;/code&gt; という関数がない場合は、指定した名前で新しい関数が作成されます</target>
        </trans-unit>
        <trans-unit id="6d5cfe09681412194f4ba98b5cd9ee3fb9a19be4" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element.</source>
          <target state="translated">中括弧とカンマまたは2つのカンマの間に何もない場合は、空の要素として解釈されます。</target>
        </trans-unit>
        <trans-unit id="bda5467f9834c7878e79dd21cd4d2f3d7dd7c4a6" translate="yes" xml:space="preserve">
          <source>If there is nothing between a brace and a comma or two commas, it's interpreted as an empty element:</source>
          <target state="translated">中括弧とカンマまたは2つのカンマの間に何もない場合は、空の要素として解釈されます。</target>
        </trans-unit>
        <trans-unit id="24adce4068128d584888031a1553f03853a858ae" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them</source>
          <target state="translated">複数の可能性がある場合は、それらをリストアップします。</target>
        </trans-unit>
        <trans-unit id="afe6214497e3e493ce7fed66861473c8f9d5c2d3" translate="yes" xml:space="preserve">
          <source>If there's more than one possibility, it will list them:</source>
          <target state="translated">複数の可能性がある場合は、それをリストアップします。</target>
        </trans-unit>
        <trans-unit id="de923b57f81ea36d26260a4b367e2212c4d985f9" translate="yes" xml:space="preserve">
          <source>If this weren't the case, using an option without an optional argument would be difficult if you also wanted to use positional arguments.</source>
          <target state="translated">もしそうでなければ、位置引数も使いたい場合に、オプション引数のないオプションを使うことは難しいでしょう。</target>
        </trans-unit>
        <trans-unit id="463c7b41266bb02e7be790b635471da72331d8c9" translate="yes" xml:space="preserve">
          <source>If two braces do not contain a &quot;,&quot; or a variable expansion, they will not be expanded in this manner:</source>
          <target state="translated">2つの中括弧に「,」や変数展開が含まれていない場合は、このように展開されません。</target>
        </trans-unit>
        <trans-unit id="b7169ee1687897eb641502cd41ad2371d924e959" translate="yes" xml:space="preserve">
          <source>If you are already familiar with other shells like bash and want to see the scripting differences, see &lt;a href=&quot;fish_for_bash_users#fish-for-bash-users&quot;&gt;Fish For Bash Users&lt;/a&gt;.</source>
          <target state="translated">bashのような他のシェルに既に精通していて、スクリプトの違いを確認したい場合は、&lt;a href=&quot;fish_for_bash_users#fish-for-bash-users&quot;&gt;Fish ForBashユーザーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="50cb82d2e700bf8a36c75cef6564324d53172bf4" translate="yes" xml:space="preserve">
          <source>If you are developing another program and want to install fish functions for it, install them to the &quot;vendor&quot; functions directory. As this path varies from system to system, you can use &lt;code&gt;pkgconfig&lt;/code&gt; to discover it with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">別のプログラムを開発していて、そのプログラムにfish関数をインストールする場合は、それらを「ベンダー」関数ディレクトリにインストールします。このパスはシステムごとに異なるため、 &lt;code&gt;pkgconfig&lt;/code&gt; を使用して、 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; 出力でパスを検出できます。他のディストリビューターが簡単に変更する必要があるかもしれないので、インストールシステムはpkgconfigパスをオーバーライドするカスタムパスをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="1b4ecf432926bdf9219384030390dce4a62ae339" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発していて、プログラムに補完を同梱する場合は、それらを「ベンダー」の補完ディレクトリにインストールします。このパスはシステムによって異なるため、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用して、 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; の出力でこのパスを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3b96ff834aa659d4dcfe109c2f08409908bba2c" translate="yes" xml:space="preserve">
          <source>If you are developing another program and would like to ship completions with your program, install them to the &quot;vendor&quot; completions directory. As this path may vary from system to system, the pkgconfig framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">別のプログラムを開発していて、プログラムと一緒にコンプリーションを出荷したい場合は、それらを「ベンダー」コンプリーションディレクトリにインストールします。このパスはシステムごとに異なる可能性があるため、pkgconfigフレームワークを使用して、 &lt;code&gt;pkg-config --variable completionsdir fish&lt;/code&gt; 出力でこのパスを検出する必要があります。他のディストリビューターが簡単に変更する必要があるかもしれないので、インストールシステムはpkgconfigパスをオーバーライドするカスタムパスをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="a2e3bcc2c86a34d726c99da6041e118aebc6aab5" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install configuration which is run for all users of the fish shell on a system. This is discouraged; if not carefully written, they may have side-effects or slow the startup of the shell. Additionally, users of other shells will not benefit from the Fish-specific configuration. However, if they are absolutely required, you may install them to the &quot;vendor&quot; configuration directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発している場合、魚シェルのすべてのユーザーに対して実行される構成をシステムにインストールすることができます。これはお勧めできません。注意深く書かれていないと、副作用が発生したり、シェルの起動が遅くなる可能性があります。さらに、他のシェルのユーザーは、Fish固有の構成から恩恵を受けません。ただし、それらが絶対に必要な場合は、「ベンダー」構成ディレクトリにインストールできます。このパスはシステムによって異なる可能性があるため、 &lt;code&gt;pkg-config --variable confdir fish&lt;/code&gt; の出力でこのパスを検出するには、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4916db32b6aa8cbf9c1ffbb01d73d5df4a8870cc" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;.</source>
          <target state="translated">別のプログラムを開発している場合は、魚の殻のすべてのユーザーが使用できる機能をシステムにインストールすることができます。これらは、「ベンダー」関数ディレクトリにインストールできます。このパスはシステムによって異なる可能性があるため、 &lt;code&gt;pkgconfig&lt;/code&gt; のフレームワークを使用して、 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; の出力でこのパスを検出する必要があります。</target>
        </trans-unit>
        <trans-unit id="24d577aff02c57ccc535834fabc2b9ff18d8c605" translate="yes" xml:space="preserve">
          <source>If you are developing another program, you may wish to install functions which are available for all users of the fish shell on a system. They can be installed to the &quot;vendor&quot; functions directory. As this path may vary from system to system, the &lt;code&gt;pkgconfig&lt;/code&gt; framework should be used to discover this path with the output of &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt;. Your installation system should support a custom path to override the pkgconfig path, as other distributors may need to alter it easily.</source>
          <target state="translated">別のプログラムを開発している場合は、フィッシュシェルのすべてのユーザーが使用できる関数をシステムにインストールすることをお勧めします。それらは「ベンダー」機能ディレクトリにインストールできます。このパスはシステムごとに異なる可能性があるため、 &lt;code&gt;pkgconfig&lt;/code&gt; フレームワークを使用して、 &lt;code&gt;pkg-config --variable functionsdir fish&lt;/code&gt; 出力でこのパスを検出する必要があります。他のディストリビューターが簡単に変更する必要があるかもしれないので、インストールシステムはpkgconfigパスをオーバーライドするカスタムパスをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="423e276545b7dd53d72e587423056db3d40ae703" translate="yes" xml:space="preserve">
          <source>If you are familiar with these, it is useful to know how &lt;code&gt;string&lt;/code&gt; differs from them.</source>
          <target state="translated">これらに精通している場合は、 &lt;code&gt;string&lt;/code&gt; がそれらとどのように異なるかを知っておくと便利です。</target>
        </trans-unit>
        <trans-unit id="2c8709afb8c37b08fcb75856aca6d9778e8772cd" translate="yes" xml:space="preserve">
          <source>If you are just interested in success or failure, you can run the command directly as the if-condition:</source>
          <target state="translated">成功か失敗かだけに興味があるのであれば、if条件として直接実行しても良いでしょう。</target>
        </trans-unit>
        <trans-unit id="369024ad3ad574b3856fe6057599495dfc817fd9" translate="yes" xml:space="preserve">
          <source>If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="translated">よくわからない場合は、関数が &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 属している可能性があります。</target>
        </trans-unit>
        <trans-unit id="6b4679db7ed1ee15be09b7a815eb852cdada744e" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the array will be written as separate items. This means you can easily iterate over an array using this syntax:</source>
          <target state="translated">括弧を使用しない場合は、配列のすべての要素が別の項目として記述されます。つまり、この構文を使って簡単に配列を反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="80a3062c14429e2bf432a524df5b36623d385389" translate="yes" xml:space="preserve">
          <source>If you do not use any brackets, all the elements of the list will be written as separate items. This means you can easily iterate over a list using this syntax:</source>
          <target state="translated">括弧を使用しない場合、リストのすべての要素は別の項目として記述されます。つまり、この構文を使ってリストを簡単に反復処理することができます。</target>
        </trans-unit>
        <trans-unit id="21121c72874a1f506d3167db9734fb72635e8aba" translate="yes" xml:space="preserve">
          <source>If you do this via a function it should be defined with the &lt;code&gt;--no-scope-shadowing&lt;/code&gt; flag. Otherwise it won't have access to those variables.</source>
          <target state="translated">関数を使用してこれを行う場合は、 &lt;code&gt;--no-scope-shadowing&lt;/code&gt; フラグを使用して定義する必要があります。そうしないと、これらの変数にアクセスできません。</target>
        </trans-unit>
        <trans-unit id="057466e7c75d89a70efb57d8608b762b10a981b3" translate="yes" xml:space="preserve">
          <source>If you don't use any brackets, all the elements of the list will be passed to the command as separate items. This means you can iterate over a list with &lt;code&gt;for&lt;/code&gt;:</source>
          <target state="translated">角かっこを使用しない場合、リストのすべての要素が個別の項目としてコマンドに渡されます。これは、 &lt;code&gt;for&lt;/code&gt; ：を使用してリストを反復処理できることを意味します。</target>
        </trans-unit>
        <trans-unit id="cf34bb52e96a3b222773c87c97bf5316f69250b8" translate="yes" xml:space="preserve">
          <source>If you enabled the informative status, there are numerous customization options, which can be controlled with fish variables.</source>
          <target state="translated">情報提供ステータスを有効にした場合、多数のカスタマイズオプションがあり、それは魚の変数で制御することができます。</target>
        </trans-unit>
        <trans-unit id="76fc284188c8102e752b1bddb9f0226a85c1fbff" translate="yes" xml:space="preserve">
          <source>If you have a question not answered by this documentation, there are several avenues for help:</source>
          <target state="translated">このドキュメントで回答が得られない質問がある場合は、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="d5d69fd8cf3faf8da11aa1c87838469a40522c72" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what &lt;code&gt;fish&lt;/code&gt; does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">あなたが他のシェルの強力な理解を持って、そして何を知りたい場合は &lt;code&gt;fish&lt;/code&gt; 異なりん、魔法のフレーズを検索&lt;em&gt;他のシェルとは異なり、&lt;/em&gt;重要な違いを呼び出す際に使用します。</target>
        </trans-unit>
        <trans-unit id="ba67516086f4606dc5d63145b43021f56c59577b" translate="yes" xml:space="preserve">
          <source>If you have a strong understanding of other shells, and want to know what fish does differently, search for the magic phrase &lt;em&gt;unlike other shells&lt;/em&gt;, which is used to call out important differences.</source>
          <target state="translated">あなたが他のシェルの強力な理解を持って、そして魚が異なって何をするかを知りたい場合は、魔法のフレーズを検索&lt;em&gt;他のシェルとは異なり、&lt;/em&gt;重要な違いを呼び出す際に使用します。</target>
        </trans-unit>
        <trans-unit id="bbc09dcecb8ef64b63482fb69c9b8ca0c41f4a9d" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the GitHub page.</source>
          <target state="translated">魚の改良点があれば、GitHubページから提出することができます。</target>
        </trans-unit>
        <trans-unit id="d94e356f3d06bfc0847471bd8ac63c7fdd35e968" translate="yes" xml:space="preserve">
          <source>If you have an improvement for fish, you can submit it via the mailing list or the GitHub page.</source>
          <target state="translated">魚のための改善点があれば、メーリングリストやGitHubページから投稿することができます。</target>
        </trans-unit>
        <trans-unit id="3c91aaa3641347d6b92a729c32a7d96c010b6da2" translate="yes" xml:space="preserve">
          <source>If you have written new completions for a common Unix command, please consider sharing your work by submitting it via the instructions in &lt;a href=&quot;#more-help&quot;&gt;Further help and development&lt;/a&gt;.</source>
          <target state="translated">一般的なUnixコマンドの新しい補完を書いた場合は、「&lt;a href=&quot;#more-help&quot;&gt;さらなるヘルプと開発」の&lt;/a&gt;指示に従って提出して、作品を共有することを検討してください。</target>
        </trans-unit>
        <trans-unit id="59be97f1d3e357895205704e9a083053c416f3f4" translate="yes" xml:space="preserve">
          <source>If you haven't activated vi mode on purpose, you might have installed a third-party theme that does it.</source>
          <target state="translated">意図的にviモードを有効にしていない場合は、viモードを有効にするサードパーティ製テーマをインストールしている可能性があります。</target>
        </trans-unit>
        <trans-unit id="801a4bfeff44c78289adc6da559907889b10b7ff" translate="yes" xml:space="preserve">
          <source>If you installed a prepackaged version of fish, the package manager should have already done this for you.</source>
          <target state="translated">魚のプレパッケージ版をインストールした場合は、パッケージマネージャがすでにこれを行っているはずです。</target>
        </trans-unit>
        <trans-unit id="bacc9cf3f5b8aece5e2cb795329bd9e98f414229" translate="yes" xml:space="preserve">
          <source>If you installed fish manually (e.g. by compiling it, not by using a package manager), you first need to add fish to the list of shells by executing the following command (assuming you installed fish in /usr/local):</source>
          <target state="translated">手動で(パッケージマネージャを使わずにコンパイルするなどして)fishをインストールした場合は、まず以下のコマンドを実行して、シェルのリストにfishを追加する必要があります(/usr/localにfishをインストールしたと仮定して)。</target>
        </trans-unit>
        <trans-unit id="af40cb842637feef7ad4047a0e620a3e2d404f64" translate="yes" xml:space="preserve">
          <source>If you installed it with a package manager, just use that package manager's uninstall function. If you built fish yourself, assuming you installed it to /usr/local, do this:</source>
          <target state="translated">パッケージマネージャーを使ってインストールした場合は、そのパッケージマネージャーのアンインストール機能を使えばよい。fishを自分でビルドした場合は、/usr/localにインストールしたと仮定して、次のようにします。</target>
        </trans-unit>
        <trans-unit id="cec1a3f92a8c27f32a8f6e6cb86da5cd7afb4270" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command.</source>
          <target state="translated">代わりに、中断されたジョブをバックグラウンドに配置する場合は、&lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="24dbcaa65ea45136e4556660a86f87890a258184" translate="yes" xml:space="preserve">
          <source>If you instead want to put a suspended job into the background, use the &lt;a href=&quot;commands#bg&quot;&gt;&lt;code&gt;bg&lt;/code&gt;&lt;/a&gt; command.</source>
          <target state="translated">一時停止したジョブをバックグラウンドに置きたい場合は、&lt;a href=&quot;commands#bg&quot;&gt; &lt;code&gt;bg&lt;/code&gt; &lt;/a&gt;コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="542197cd998c2de66183ced7aed677f0d6eff906" translate="yes" xml:space="preserve">
          <source>If you need a list of numbers, you can use the &lt;code&gt;seq&lt;/code&gt; command to create one:</source>
          <target state="translated">番号のリストが必要な場合は、 &lt;code&gt;seq&lt;/code&gt; コマンドを使用して次の番号を作成できます。</target>
        </trans-unit>
        <trans-unit id="7d15c732f3a561ab865f45eb2b69dbf51b681f71" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as a list, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">魚のヘルプに別のブラウザ(上記以外)を使いたい場合は、 fish_help_browser変数を設定することができます。この変数はリストとして設定することができ、最初の要素はブラウザコマンドで、残りの要素はブラウザオプションです。</target>
        </trans-unit>
        <trans-unit id="76575622923fc6960275a0372650f7e641f7d23c" translate="yes" xml:space="preserve">
          <source>If you prefer to use a different browser (other than as described above) for fish help, you can set the fish_help_browser variable. This variable may be set as an array, where the first element is the browser command and the rest are browser options.</source>
          <target state="translated">魚のヘルプに別のブラウザ(上記以外)を使いたい場合は、 fish_help_browser 変数を設定することができます。この変数は配列として設定することができ、最初の要素はブラウザコマンドで、残りの要素はブラウザオプションです。</target>
        </trans-unit>
        <trans-unit id="e98db4a9618c4e99c4cfeeb47be4e315b3159f68" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to a list variable, the index will be calculated from the end of the list. For example, the index -1 means the last index of a list.</source>
          <target state="translated">リスト変数の展開時や代入時に負のインデックスを指定すると、リストの末尾からインデックスが計算されます。例えば、インデックス-1はリストの最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="bfe063a17016dbfe1f5327724e22af9c696e2b9d" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to a list variable, the index will be taken from the &lt;em&gt;end&lt;/em&gt; of the list. For example, the index -1 is the last element of the list:</source>
          <target state="translated">リスト変数を展開または割り当てるときに負のインデックスを指定すると、インデックスはリストの&lt;em&gt;最後&lt;/em&gt;から取得されます。たとえば、インデックス-1はリストの最後の要素です。</target>
        </trans-unit>
        <trans-unit id="6b10dc2d52b83a3f3bcbb9eafde410131a7638e1" translate="yes" xml:space="preserve">
          <source>If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.</source>
          <target state="translated">配列変数の展開時や代入時に負のインデックスを指定すると、配列の末尾からインデックスが計算されます。例えば、インデックス -1 は配列の最後のインデックスを意味します。</target>
        </trans-unit>
        <trans-unit id="bef2a5da408bc0ccc604bb6e7c2ada1e1e368d28" translate="yes" xml:space="preserve">
          <source>If you specify both &lt;code&gt;--prefix&lt;/code&gt; and &lt;code&gt;--contains&lt;/code&gt; the last flag seen is used.</source>
          <target state="translated">&lt;code&gt;--prefix&lt;/code&gt; と &lt;code&gt;--contains&lt;/code&gt; の両方を指定した場合、最後に表示されたフラグが使用されます。</target>
        </trans-unit>
        <trans-unit id="cfeb5cfbb4d7330298cd9ae2e7db448aa2300961" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--entire&lt;/code&gt; then each matching string is printed including any prefix or suffix not matched by the pattern (equivalent to &lt;code&gt;grep&lt;/code&gt; without the &lt;code&gt;-o&lt;/code&gt; flag). You can, obviously, achieve the same result by prepending and appending &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;.*&lt;/code&gt; depending on whether or not you have specified the &lt;code&gt;--regex&lt;/code&gt; flag. The &lt;code&gt;--entire&lt;/code&gt; flag is simply a way to avoid having to complicate the pattern in that fashion and make the intent of the &lt;code&gt;string match&lt;/code&gt; clearer. Without &lt;code&gt;--entire&lt;/code&gt; and &lt;code&gt;--regex&lt;/code&gt;, a PATTERN will need to match the entire STRING before it will be reported.</source>
          <target state="translated">&lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--entire&lt;/code&gt; を指定すると、パターンに一致しないプレフィックスまたはサフィックスを含む、一致する各文字列が出力されます（ &lt;code&gt;-o&lt;/code&gt; フラグなしの &lt;code&gt;grep&lt;/code&gt; と同等）。 &lt;code&gt;--regex&lt;/code&gt; フラグを指定したかどうかに応じて、 &lt;code&gt;*&lt;/code&gt; または &lt;code&gt;.*&lt;/code&gt; 先頭に追加して追加することで、同じ結果を達成できることは明らかです。 &lt;code&gt;--entire&lt;/code&gt; フラグは、単にそのやり方でパターンを複雑にしての意図作ることを避けるための方法である &lt;code&gt;string match&lt;/code&gt; 明確に。 &lt;code&gt;--entire&lt;/code&gt; と &lt;code&gt;--regex&lt;/code&gt; がない場合、PATTERNは報告される前にSTRING全体と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="22a9feadf64d822a318f10f2b4793d1a2316c159" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--filter&lt;/code&gt; flag then each input string is printed only if a replacement was done. This is useful where you would otherwise use this idiom: &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt;. You can instead just write &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; または &lt;code&gt;--filter&lt;/code&gt; フラグを指定すると、置換が行われた場合にのみ、各入力文字列が出力されます。これは、このイディオムを使用する場合に便利です &lt;code&gt;a_cmd | string match pattern | string replace pattern new_pattern&lt;/code&gt; 。代わりに単に &lt;code&gt;a_cmd | string replace --filter pattern new_pattern&lt;/code&gt; と書くことができます。string replace --filter pattern new_pattern。</target>
        </trans-unit>
        <trans-unit id="d8e54ae0a24762829d8f55a86df97428a46a48f0" translate="yes" xml:space="preserve">
          <source>If you want to add the directory &lt;code&gt;~/linux/bin&lt;/code&gt; to your PATH variable when using a login shell, add the following to your &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file:</source>
          <target state="translated">ログインシェルを使用するときにディレクトリ &lt;code&gt;~/linux/bin&lt;/code&gt; をPATH変数に追加する場合は、以下を &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="9279139c6582126d71499a2ce758884961e720f6" translate="yes" xml:space="preserve">
          <source>If you want to be able to press</source>
          <target state="translated">を押せるようにしたい場合</target>
        </trans-unit>
        <trans-unit id="e3b1e2234b3ea5f7781540b4747240f8e476c656" translate="yes" xml:space="preserve">
          <source>If you want to change or disable this display, modify the &lt;code&gt;fish_mode_prompt&lt;/code&gt; function, for instance via &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;.</source>
          <target state="translated">あなたはこの表示を変更または無効にしたい場合は、変更 &lt;code&gt;fish_mode_prompt&lt;/code&gt; を経由して、たとえば、機能を&lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3226bbbfea92d52214a04066c17b75561d8b1dfd" translate="yes" xml:space="preserve">
          <source>If you want to find out more about the echo command used above, read the manual page for the echo command by writing: &lt;code&gt;man echo&lt;/code&gt;</source>
          <target state="translated">上記で使用したechoコマンドの詳細を知りたい場合は、次のように記述してechoコマンドのマニュアルページを読んでください &lt;code&gt;man echo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf2181e509bdee84b390ead8fe1261883f65f450" translate="yes" xml:space="preserve">
          <source>If you want to know if a variable has &lt;em&gt;no elements&lt;/em&gt;, use &lt;code&gt;set -q var[1]&lt;/code&gt;.</source>
          <target state="translated">変数に&lt;em&gt;要素&lt;/em&gt;が&lt;em&gt;ない&lt;/em&gt;かどうかを知りたい場合は、 &lt;code&gt;set -q var[1]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="f6b8934a463057ab4cbebc293cbcc2bde13fda93" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index&quot;&gt;lots of detailed documentation&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, the IRC channel #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">魚についてもっと知りたいなら、&lt;a href=&quot;index&quot;&gt;たくさんの詳細なドキュメント&lt;/a&gt;、&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;公式のメーリングリスト&lt;/a&gt;、IRCチャンネル#fish on &lt;code&gt;irc.oftc.net&lt;/code&gt; 、そして&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;githubページがあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aa7777db3b385617c9905b1bb85dce8643e34e91" translate="yes" xml:space="preserve">
          <source>If you want to learn more about fish, there is &lt;a href=&quot;index#intro&quot;&gt;lots of detailed documentation&lt;/a&gt;, the &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;official gitter channel&lt;/a&gt;, an &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;official mailing list&lt;/a&gt;, and the &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;github page&lt;/a&gt;.</source>
          <target state="translated">魚についてもっと知りたい場合は&lt;a href=&quot;index#intro&quot;&gt;、詳細なドキュメント&lt;/a&gt;、&lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;公式のgitterチャネル&lt;/a&gt;、&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;公式のメーリングリスト&lt;/a&gt;、および&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;githubページ&lt;/a&gt;がたくさんあります。</target>
        </trans-unit>
        <trans-unit id="19d1a8c24236cf7d05190b1115ef30aaad303cfb" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then &lt;code&gt;fish&lt;/code&gt; might be just what you're looking for!</source>
          <target state="translated">難解な構文と構成オプションを学ばなくても、コマンドラインをより生産的で、より便利で、より楽しいものにしたい場合、 &lt;code&gt;fish&lt;/code&gt; はまさにあなたが探しているものかもしれません！</target>
        </trans-unit>
        <trans-unit id="5b7d23bdb9d59e0e649f1e88d3662e4b2b0bdeb7" translate="yes" xml:space="preserve">
          <source>If you want to make your command line more productive, more useful, and more fun, without learning a bunch of arcane syntax and configuration options, then fish might be just what you're looking for!</source>
          <target state="translated">難解な構文や設定オプションを覚えることなく、コマンドラインをより生産的に、より便利に、より楽しくしたいと思っているなら、fishはまさにあなたが探しているものかもしれません。</target>
        </trans-unit>
        <trans-unit id="8639c78ec7d928802ef97a990dee029d2225ce5d" translate="yes" xml:space="preserve">
          <source>If you want to modify your existing prompt, you can use &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt; like:</source>
          <target state="translated">既存のプロンプトを変更する場合は、&lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;次の&lt;/a&gt;ように&lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;およびfuncsaveを使用できます。</target>
        </trans-unit>
        <trans-unit id="240e39aa619c5f139c2593362dec95cdca1dfa27" translate="yes" xml:space="preserve">
          <source>If you want to organize your configuration, fish also reads commands in .fish files in &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt;. See &lt;a href=&quot;index#initialization&quot;&gt;initialization&lt;/a&gt; for the details.</source>
          <target state="translated">構成を整理する場合、fishは &lt;code&gt;~/.config/fish/conf.d/&lt;/code&gt; .fishファイル内のコマンドも読み取ります。詳細については、&lt;a href=&quot;index#initialization&quot;&gt;初期化&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="57bb991addeaec34e0d2e4ff1072fa3e66d59b28" translate="yes" xml:space="preserve">
          <source>If you want to override a variable for a single command, you can use &quot;var=val&quot; statements before the command:</source>
          <target state="translated">一つのコマンドに対して変数をオーバーライドしたい場合は、コマンドの前に &quot;var=val &quot;文を使うことができます。</target>
        </trans-unit>
        <trans-unit id="b010bfc3d915896fa771aef1b796169616d992f5" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (</source>
          <target state="translated">同じ行から複数の引数を再利用したい場合(「!3:3*」など)は、行全体を呼び出して不要なものを削除することを検討してください(</target>
        </trans-unit>
        <trans-unit id="817bbc583c325d82f70d5e4e389c9fb588a7021e" translate="yes" xml:space="preserve">
          <source>If you want to reuse several arguments from the same line (&quot;!!:3*&quot; and the like), consider recalling the whole line and removing what you don't need (&lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;D&lt;/b&gt; and &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Backspace&lt;/b&gt; are your friends).</source>
          <target state="translated">同じ行の複数の引数（ &quot;!!：3 *&quot;など）を再利用する場合は、行全体を呼び出して、不要なものを削除することを検討してください（&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;D&lt;/b&gt;と&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;Backspace&lt;/b&gt;は友だちです）。</target>
        </trans-unit>
        <trans-unit id="17b2c50714eca6eb3a1c4f418309af6c45fec63f" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when &lt;code&gt;fish&lt;/code&gt; exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; が終了したときに一連のコマンドを実行する場合は、シェルの終了によってトリガーされる&lt;a href=&quot;#event&quot;&gt;イベントハンドラー&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="a64e2d8d56c620a2a93cec9e87f8b2ade6021773" translate="yes" xml:space="preserve">
          <source>If you want to run a set of commands when fish exits, use an &lt;a href=&quot;#event&quot;&gt;event handler&lt;/a&gt; that is triggered by the exit of the shell:</source>
          <target state="translated">魚が終了するときに一連のコマンドを実行する場合は、シェルの終了によってトリガーされる&lt;a href=&quot;#event&quot;&gt;イベントハンドラー&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="aef00e85cfc00298b4501ca427b39a1d3165499a" translate="yes" xml:space="preserve">
          <source>If you want to set some personal customization, universal variables are nice:</source>
          <target state="translated">個人的なカスタマイズを設定したい場合は、ユニバーサル変数がいいでしょう。</target>
        </trans-unit>
        <trans-unit id="46bd99bf1b62b6b2fbac8244f0ed2e2fc11de65b" translate="yes" xml:space="preserve">
          <source>If you want to set something in config.fish, or set something in a function and have it available for the rest of the session, global scope is a good choice:</source>
          <target state="translated">config.fishで何かを設定したり、関数で何かを設定して、それをセッションの残りの部分で利用できるようにしたい場合は、グローバルスコープが適しています。</target>
        </trans-unit>
        <trans-unit id="c9a9b4644cb739f83f6382b12a8a184f1a74b482" translate="yes" xml:space="preserve">
          <source>If you want to uninstall fish, first make sure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">魚をアンインストールする場合は、最初に魚がシェルとして設定されていないことを確認してください。よくわからない場合は、 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 実行してください。</target>
        </trans-unit>
        <trans-unit id="840dcfc4db83e11261bb160a1f0912d853943c4b" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places:</source>
          <target state="translated">fish（またはその他のシェル）をデフォルトのシェルとして使用する場合は、新しいシェルの実行可能ファイル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を2か所に入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="115e2c44e689956437e718e0ec0032e55b5f7fed" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; in two places: - add &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; to &lt;code&gt;/etc/shells&lt;/code&gt; - change your default shell with &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt;</source>
          <target state="translated">fish（または他のシェル）をデフォルトのシェルとして使用する場合は、新しいシェルの実行可能ファイル &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を次の2つの場所に入力する必要があります。-- &lt;code&gt;/usr/local/bin/fish&lt;/code&gt; を &lt;code&gt;/etc/shells&lt;/code&gt; 追加します。/ shells - &lt;code&gt;chsh -s /usr/local/bin/fish&lt;/code&gt; 使用してデフォルトのシェルを変更します</target>
        </trans-unit>
        <trans-unit id="3366416e47329d39ef388391235aec49254de478" translate="yes" xml:space="preserve">
          <source>If you wish to use fish (or any other shell) as your default shell, you need to enter your new shell's executable in two places.</source>
          <target state="translated">fish(または他のシェル)をデフォルトのシェルとして使用したい場合は、新しいシェルの実行ファイルを2箇所に入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a5f2b7c10dba916512ad297d63b951291ca4677" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;a href=&quot;source#cmd-source&quot;&gt;source&lt;/a&gt; instead.</source>
          <target state="translated">コマンドがstdinにアクセスする必要がない場合は、代わりに&lt;a href=&quot;source#cmd-source&quot;&gt;sourceの&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="3a88aaa448eb4ccc5d7c16b222b1aaafa2e3553e" translate="yes" xml:space="preserve">
          <source>If your command does not need access to stdin, consider using &lt;code&gt;source&lt;/code&gt; instead.</source>
          <target state="translated">コマンドがstdinにアクセスする必要がない場合は、代わりに &lt;code&gt;source&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="a0edd7289f911011f3a35d834f1f941473e2b0a8" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed if $WORD is the empty string (like after &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt;).</source>
          <target state="translated">上記の例で、$ WORDが未定義または空のリストである場合、「s」は出力されません。ただし、$ WORDが空の文字列の場合（ &lt;code&gt;set WORD &quot;&quot;&lt;/code&gt; 後など）に出力されます。</target>
        </trans-unit>
        <trans-unit id="20b7e02e5dced2f235b74397e5dd8fd6678ecaa1" translate="yes" xml:space="preserve">
          <source>If, in the example above, $WORD is undefined or an empty list, the &quot;s&quot; is not printed. However, it is printed, if $WORD is the empty string.</source>
          <target state="translated">上の例で、$WORDが未定義または空のリストの場合、&quot;s &quot;は出力されません。ただし、$WORDが空の文字列の場合は表示されます。</target>
        </trans-unit>
        <trans-unit id="cd4f982a2dfbfb7a494a0fcc11edc18044fd3ee7" translate="yes" xml:space="preserve">
          <source>Import the abbreviations defined on another_host over SSH.</source>
          <target state="translated">another_host で定義されている略語を SSH 経由でインポートします。</target>
        </trans-unit>
        <trans-unit id="07b875aa08020a5fdd644ae88f4843b8a79307a9" translate="yes" xml:space="preserve">
          <source>In a terminal, the application running inside it and the terminal itself need to agree on the width of characters in order to handle cursor movement.</source>
          <target state="translated">端末では、カーソルの移動に対応するために、端末内で動作するアプリケーションと端末自体が文字の幅を取り決める必要があります。</target>
        </trans-unit>
        <trans-unit id="439670388f9df6081d069daa092806041f2fd81f" translate="yes" xml:space="preserve">
          <source>In addition there's a &lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;begin&lt;/a&gt; block that just groups commands together so you can redirect to a block or use a new &lt;a href=&quot;#variables-scope&quot;&gt;variable scope&lt;/a&gt; without any repetition:</source>
          <target state="translated">さらに、コマンドをグループ化するだけの&lt;a href=&quot;cmds/begin#cmd-begin&quot;&gt;開始&lt;/a&gt;ブロックがあるため、ブロックにリダイレクトしたり、繰り返しなしで新しい&lt;a href=&quot;#variables-scope&quot;&gt;変数スコープ&lt;/a&gt;を使用したりできます。</target>
        </trans-unit>
        <trans-unit id="7fee095141e15902cb9b8f496f993f1d5d3fa057" translate="yes" xml:space="preserve">
          <source>In addition to the standard bindings listed here, you can also define your own with &lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bind&lt;/a&gt;:</source>
          <target state="translated">ここにリストされている標準のバインディングに加えて、&lt;a href=&quot;cmds/bind#cmd-bind&quot;&gt;bindを&lt;/a&gt;使用して独自のバインディングを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="c50371ba790382257744186339f089813674f7e0" translate="yes" xml:space="preserve">
          <source>In addition, it only splits them on newlines instead of $IFS. If you want to split on something else, use &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split&lt;/a&gt;, &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split0&lt;/a&gt; or &lt;a href=&quot;cmds/string#cmd-string-collect&quot;&gt;string collect&lt;/a&gt;. If those are used as the last command in a command substitution the splits they create are carried over. So:</source>
          <target state="translated">さらに、$ IFSではなく改行でのみ分割します。あなたが何か他のものに分割したい場合は、使用する&lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;文字列の分割&lt;/a&gt;、&lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;文字列split0&lt;/a&gt;または&lt;a href=&quot;cmds/string#cmd-string-collect&quot;&gt;文字列を収集&lt;/a&gt;。それらがコマンド置換の最後のコマンドとして使用される場合、それらが作成する分割は引き継がれます。そう：</target>
        </trans-unit>
        <trans-unit id="99b7d1b47f67f33906cafe0ea45bb9a7ae9de792" translate="yes" xml:space="preserve">
          <source>In addition, when adding abbreviations:</source>
          <target state="translated">また、略語を追加する場合。</target>
        </trans-unit>
        <trans-unit id="8214b19376f922281d94350c39e691ba4c55ab07" translate="yes" xml:space="preserve">
          <source>In addition, when adding or renaming abbreviations:</source>
          <target state="translated">また、略語を追加したり、名前を変更したりする場合。</target>
        </trans-unit>
        <trans-unit id="f5b280783a543346f92416ec886c17e3557233fc" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status, but passes along whatever $status was set, including by command substitutions. This allows capturing the output and exit status of a subcommand, like in &lt;code&gt;if set output (command)&lt;/code&gt;.</source>
          <target state="translated">割り当てモードでは、 &lt;code&gt;set&lt;/code&gt; は終了ステータスを変更しませんが、コマンド置換を含め、設定された$ statusを渡します。これにより、 &lt;code&gt;if set output (command)&lt;/code&gt; ように、サブコマンドの出力ステータスと終了ステータスをキャプチャできます。</target>
        </trans-unit>
        <trans-unit id="b11dd25d3b50e779c52a3bed6755a9de86e7cc31" translate="yes" xml:space="preserve">
          <source>In assignment mode, &lt;code&gt;set&lt;/code&gt; does not modify the exit status. This allows simultaneous capture of the output and exit status of a subcommand, e.g. &lt;code&gt;if set output (command)&lt;/code&gt;. In query mode, the exit status is the number of variables that were not found. In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.</source>
          <target state="translated">割り当てモードでは、 &lt;code&gt;set&lt;/code&gt; は終了ステータスを変更しません。これにより、たとえば &lt;code&gt;if set output (command)&lt;/code&gt; 、サブコマンドの出力と終了ステータスを同時にキャプチャできます。照会モードでは、終了状況は検出されなかった変数の数です。消去モードでは、成功の場合はゼロの終了ステータスで終了を &lt;code&gt;set&lt;/code&gt; 、コマンドラインが無効な場合、変数が書き込み保護されている場合、または変数が存在しない場合は、非ゼロの終了ステータスで終了を設定します。</target>
        </trans-unit>
        <trans-unit id="997bbb76e726398decafa893aef44209d89a5923" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In &lt;code&gt;fish&lt;/code&gt;, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">bashでは、これにより2つのディレクトリ「Mister」と「Noodle」が作成されます。では &lt;code&gt;fish&lt;/code&gt; 、それは一つだけ作成しました：それはに渡された引数であるので、変数は、値「ミスターヌードル」を持ってい &lt;code&gt;mkdir&lt;/code&gt; 、スペースおよびすべて。他のシェルでは、リストではなく「配列」という用語を使用します。</target>
        </trans-unit>
        <trans-unit id="e4489109b985bf2bfd34ae1b60049239f2bd9ed4" translate="yes" xml:space="preserve">
          <source>In bash, this would have created two directories &quot;Mister&quot; and &quot;Noodle&quot;. In fish, it created only one: the variable had the value &quot;Mister Noodle&quot;, so that is the argument that was passed to &lt;code&gt;mkdir&lt;/code&gt;, spaces and all. Other shells use the term &quot;arrays&quot;, rather than lists.</source>
          <target state="translated">bashでは、これにより「Mister」と「Noodle」の2つのディレクトリが作成されます。魚では、1つだけ作成されました。変数の値は「MisterNoodle」でした。したがって、これが &lt;code&gt;mkdir&lt;/code&gt; 、spacesなどに渡された引数です。他のシェルでは、リストではなく「配列」という用語を使用しています。</target>
        </trans-unit>
        <trans-unit id="febdce18a02406c3f663a8114d7d2b52f9d2f956" translate="yes" xml:space="preserve">
          <source>In cases such as this, one can use &lt;code&gt;command&lt;/code&gt;&lt;code&gt;test&lt;/code&gt; to explicitly use the system's standalone &lt;code&gt;test&lt;/code&gt; rather than this &lt;code&gt;builtin&lt;/code&gt;&lt;code&gt;test&lt;/code&gt;.</source>
          <target state="translated">このような場合、 &lt;code&gt;command&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; を使用して、この &lt;code&gt;builtin&lt;/code&gt; &lt;code&gt;test&lt;/code&gt; ではなく、システムのスタンドアロン &lt;code&gt;test&lt;/code&gt; を明示的に使用できます。</target>
        </trans-unit>
        <trans-unit id="d1ce47c387bac9b4cac7573029867c2d32e1cdf6" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;'s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt;'s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; とは対照的に、 &lt;code&gt;string&lt;/code&gt; の &lt;code&gt;match&lt;/code&gt; デフォルトでglob-modeになり、 &lt;code&gt;replace&lt;/code&gt; はデフォルトでリテラル一致になります。regex-modeに設定されている場合、それらはPCRE正規表現を使用します。これは &lt;code&gt;grep&lt;/code&gt; の &lt;code&gt;-P&lt;/code&gt; オプションに相当します。 &lt;code&gt;match&lt;/code&gt; のようなものですちょうど試合、印刷するデフォルト &lt;code&gt;grep&lt;/code&gt; で &lt;code&gt;-o&lt;/code&gt; を（使用は &lt;code&gt;--entire&lt;/code&gt; grepのような動作を可能にします）。</target>
        </trans-unit>
        <trans-unit id="c4f2d284a1e65e7867199a2469dd5dff1c9b6cd8" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;s &lt;code&gt;match&lt;/code&gt; defaults to glob-mode, while &lt;code&gt;replace&lt;/code&gt; defaults to literal matching. If set to regex-mode, they use PCRE regular expressions, which is comparable to &lt;code&gt;grep&lt;/code&gt;s &lt;code&gt;-P&lt;/code&gt; option. &lt;code&gt;match&lt;/code&gt; defaults to printing just the match, which is like &lt;code&gt;grep&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; (use &lt;code&gt;--entire&lt;/code&gt; to enable grep-like behavior).</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; とは対照的に、 &lt;code&gt;string&lt;/code&gt; の &lt;code&gt;match&lt;/code&gt; デフォルトでglob-modeになり、 &lt;code&gt;replace&lt;/code&gt; のデフォルトはリテラル一致になります。regex-modeに設定すると、PCRE正規表現が使用されます。これは &lt;code&gt;grep&lt;/code&gt; s- &lt;code&gt;-P&lt;/code&gt; オプションに相当します。 &lt;code&gt;match&lt;/code&gt; のようなものですちょうど試合、印刷するデフォルト &lt;code&gt;grep&lt;/code&gt; で &lt;code&gt;-o&lt;/code&gt; を（使用は &lt;code&gt;--entire&lt;/code&gt; grepのような動作を可能にします）。</target>
        </trans-unit>
        <trans-unit id="50308010771463782c1b1049f298eeb910eb8cb2" translate="yes" xml:space="preserve">
          <source>In contrast to these classics, &lt;code&gt;string&lt;/code&gt; reads input either from stdin or as arguments. &lt;code&gt;string&lt;/code&gt; also does not deal with files, so it requires redirections to be used with them.</source>
          <target state="translated">これらの古典とは対照的に、 &lt;code&gt;string&lt;/code&gt; はstdinからまたは引数として入力を読み取ります。 &lt;code&gt;string&lt;/code&gt; もファイルを処理しないため、ファイルでリダイレクトを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ded371170cef1c5c72e22d233a501a909e3ec3b" translate="yes" xml:space="preserve">
          <source>In erase mode, &lt;code&gt;set&lt;/code&gt; exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if any of the variables did not exist or was a &lt;a href=&quot;../index#variables-special&quot;&gt;special read-only variable&lt;/a&gt;.</source>
          <target state="translated">消去モードでは、成功した場合は終了ステータスをゼロに &lt;code&gt;set&lt;/code&gt; 、コマンドラインが無効な場合、変数のいずれかが存在しないか、&lt;a href=&quot;../index#variables-special&quot;&gt;特別な読み取り専用変数で&lt;/a&gt;あった場合は、終了ステータスをゼロ以外に設定します。</target>
        </trans-unit>
        <trans-unit id="8150d5ade4961a7346cfe9d6f7af40451a0e9eba" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased.</source>
          <target state="translated">消去モードでは、変数のインデックスを指定すると、配列変数の指定されたスライスのみが消去されます。</target>
        </trans-unit>
        <trans-unit id="ea9ced13df63c29343d5b0a4c89e208d759dd99a" translate="yes" xml:space="preserve">
          <source>In erase mode, if variable indices are specified, only the specified slices of the list variable will be erased.</source>
          <target state="translated">消去モードでは、変数のインデックスが指定されている場合、リスト変数の指定されたスライスのみが消去されます。</target>
        </trans-unit>
        <trans-unit id="d285383bee7174093582f84311886d8e77b2597e" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0 the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">2.3.0より前のバージョンのfishでは、引数が存在しない場合、 &lt;code&gt;$argv&lt;/code&gt; 変数は単一の要素（ソースファイルの名前）になります。それ以外の場合は、ソースファイルの名前のない引数が含まれます。その動作は非常に混乱し、bashやzshなどの他のシェルとは異なりました。</target>
        </trans-unit>
        <trans-unit id="9b6a0ae9d083c309f889a5d39f65825be86a357a" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.3.0, the &lt;code&gt;$argv&lt;/code&gt; variable would have a single element (the name of the sourced file) if no arguments are present. Otherwise, it would contain arguments without the name of the sourced file. That behavior was very confusing and unlike other shells such as bash and zsh.</source>
          <target state="translated">2.3.0より前のfishバージョンでは、引数が存在しない場合、 &lt;code&gt;$argv&lt;/code&gt; 変数は単一の要素（ソースファイルの名前）を持ちます。それ以外の場合は、ソースファイルの名前のない引数が含まれます。その動作は非常に混乱し、bashやzshなどの他のシェルとは異なりました。</target>
        </trans-unit>
        <trans-unit id="b6167c9c2e21f8c5d664cda565772acda6aa5a44" translate="yes" xml:space="preserve">
          <source>In fish versions prior to 2.5.0 it was possible to create a function named &lt;code&gt;-&lt;/code&gt; that would do &lt;code&gt;cd -&lt;/code&gt;. Changes in the 2.5.0 release included several bug fixes that enforce the rule that a bare hyphen is not a valid function (or variable) name. However, you can achieve the same effect via an abbreviation:</source>
          <target state="translated">前2.5.0に魚のバージョンでは、という名前の関数を作成することが可能であった &lt;code&gt;-&lt;/code&gt; どうなる &lt;code&gt;cd -&lt;/code&gt; 。2.5.0リリースの変更には、ベアハイフンが有効な関数（または変数）名ではないというルールを適用するいくつかのバグ修正が含まれています。ただし、省略形を使用して同じ効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="c82580c4fc0344cd7e4b4c3bbc7ac9db12a80d91" translate="yes" xml:space="preserve">
          <source>In functions, &lt;code&gt;block&lt;/code&gt; can be useful while performing work that should not be interrupted by the shell.</source>
          <target state="translated">関数では、 &lt;code&gt;block&lt;/code&gt; はシェルによって中断されるべきではない作業を実行するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="38b2f2e802b2d8e2671843b97b7871d835bce820" translate="yes" xml:space="preserve">
          <source>In general, fish's history recall works like this:</source>
          <target state="translated">一般的に、魚の履歴の呼び出しは次のような仕組みになっています。</target>
        </trans-unit>
        <trans-unit id="89ff03b555073b2736f671e958968657fb6eb4ed" translate="yes" xml:space="preserve">
          <source>In general, special characters are special by default, so &lt;code&gt;a+&lt;/code&gt; matches one or more &quot;a&quot;s, while &lt;code&gt;a\+&lt;/code&gt; matches an &quot;a&quot; and then a &quot;+&quot;. &lt;code&gt;(a+)&lt;/code&gt; matches one or more &quot;a&quot;s in a capturing group (&lt;code&gt;(?:XXXX)&lt;/code&gt; denotes a non-capturing group). For the replacement parameter of &lt;code&gt;replace&lt;/code&gt;, &lt;code&gt;$n&lt;/code&gt; refers to the n-th group of the match. In the match parameter, &lt;code&gt;\n&lt;/code&gt; (e.g. &lt;code&gt;\1&lt;/code&gt;) refers back to groups.</source>
          <target state="translated">一般に、特殊文字はデフォルトで特殊であるため &lt;code&gt;a+&lt;/code&gt; 1つ以上の「a」に一致し、 &lt;code&gt;a\+&lt;/code&gt; は「a」、次に「+」に一致します。 &lt;code&gt;(a+)&lt;/code&gt; は、キャプチャグループ内の1つ以上の &quot;a&quot;に一致し &lt;code&gt;(?:XXXX)&lt;/code&gt; （（？：XXXX）は非キャプチャグループを示します）。 &lt;code&gt;replace&lt;/code&gt; の置換パラメーターの場合、 &lt;code&gt;$n&lt;/code&gt; は一致のn番目のグループを指します。 matchパラメータでは、 &lt;code&gt;\n&lt;/code&gt; （例： &lt;code&gt;\1&lt;/code&gt; ）はグループを参照します。</target>
        </trans-unit>
        <trans-unit id="b51eb76c3309ce93bf5e04af0029f4517c90bda0" translate="yes" xml:space="preserve">
          <source>In index brackets, fish understands ranges written like &lt;code&gt;a..b&lt;/code&gt; ('a' and 'b' being indices). They are expanded into a sequence of indices from a to b (so &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;), going up if b is larger and going down if a is larger. Negative indices can also be used - they are taken from the end of the list, so &lt;code&gt;-1&lt;/code&gt; is the last element, and &lt;code&gt;-2&lt;/code&gt; the one before it. If an index doesn't exist the range is clamped to the next possible index.</source>
          <target state="translated">インデックスブラケットでは、fishは &lt;code&gt;a..b&lt;/code&gt; のように記述された範囲を理解します（「a」と「b」はインデックスです）。それらは、aからbまでの一連のインデックスに展開され（したがって &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; ）、bが大きい場合は上昇し、aが大きい場合は下降します。負のインデックスも使用できます。リストの最後から取得されるため、 &lt;code&gt;-1&lt;/code&gt; が最後の要素で、 &lt;code&gt;-2&lt;/code&gt; がその前の要素です。インデックスが存在しない場合、範囲は次に可能なインデックスにクランプされます。</target>
        </trans-unit>
        <trans-unit id="52f151afd8c58f05083781d29e38adf8acc285ad" translate="yes" xml:space="preserve">
          <source>In order to change your default shell, type:</source>
          <target state="translated">デフォルトのシェルを変更するには、次のようにタイプします。</target>
        </trans-unit>
        <trans-unit id="7744f887d10f15ca76ae2472bb145fdd5fdbdb57" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 10 MiB (1048576 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">シェルが多くのシステムリソースを消費しないように保護するために、 &lt;code&gt;read&lt;/code&gt; は最大10 MiB（1048576バイト）しか消費しません。この制限の前にターミネータに到達しない場合、VARIABLEは空に設定され、終了ステータスは122に設定されます。この制限は、 &lt;code&gt;fish_read_limit&lt;/code&gt; 変数で変更できます。0（ゼロ）に設定すると、制限が削除されます。</target>
        </trans-unit>
        <trans-unit id="10c1bbb71199c4bba1fc0fbd3600f1a2a6187c25" translate="yes" xml:space="preserve">
          <source>In order to protect the shell from consuming too many system resources, &lt;code&gt;read&lt;/code&gt; will only consume a maximum of 100 MiB (104857600 bytes); if the terminator is not reached before this limit then VARIABLE is set to empty and the exit status is set to 122. This limit can be altered with the &lt;code&gt;fish_read_limit&lt;/code&gt; variable. If set to 0 (zero), the limit is removed.</source>
          <target state="translated">シェルが多くのシステムリソースを消費するのを防ぐために、 &lt;code&gt;read&lt;/code&gt; は最大100 MiB（104857600バイト）しか消費しません。この制限の前にターミネータに到達しない場合、VARIABLEは空に設定され、終了ステータスは122に設定されます。この制限は &lt;code&gt;fish_read_limit&lt;/code&gt; 変数で変更できます。0（ゼロ）に設定すると、制限が削除されます。</target>
        </trans-unit>
        <trans-unit id="ccb466b6200e27a0e4799833112a3b42e6de23b3" translate="yes" xml:space="preserve">
          <source>In particular it will:</source>
          <target state="translated">特にそれはそうなります。</target>
        </trans-unit>
        <trans-unit id="1deffb90bad78ed3a67d8bbda9ff35ba53cfc814" translate="yes" xml:space="preserve">
          <source>In query mode, the exit status is the number of variables that were not found.</source>
          <target state="translated">クエリモードでは、終了ステータスとして、見つからなかった変数の数が表示されます。</target>
        </trans-unit>
        <trans-unit id="cfb4b17946050d9f509c4bdb763f770ebb06687a" translate="yes" xml:space="preserve">
          <source>In query mode, the scope to be examined can be specified.</source>
          <target state="translated">クエリモードでは、検査対象のスコープを指定することができます。</target>
        </trans-unit>
        <trans-unit id="aab78a9420c39e765e3c7ab37bc447943546b397" translate="yes" xml:space="preserve">
          <source>In short: &lt;a href=&quot;index#quotes&quot;&gt;quote&lt;/a&gt; or &lt;a href=&quot;index#escapes&quot;&gt;escape&lt;/a&gt; the wildcard:</source>
          <target state="translated">つまり、ワイルドカードを&lt;a href=&quot;index#quotes&quot;&gt;引用&lt;/a&gt;または&lt;a href=&quot;index#escapes&quot;&gt;エスケープ&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="89d4f28841a1759ddcc1b8894ac4045a23593691" translate="yes" xml:space="preserve">
          <source>In the following code, all output is redirected to the file out.html.</source>
          <target state="translated">以下のコードでは、すべての出力がファイル out.html にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="67bf59485bd852b33bf0045b83854687c5fd2923" translate="yes" xml:space="preserve">
          <source>In the following examples if a flag is not seen when parsing the arguments then the corresponding _flag_X var(s) will not be set.</source>
          <target state="translated">以下の例では、引数を解析する際にフラグが見えない場合は、対応する _flag_X var(s)は設定されません。</target>
        </trans-unit>
        <trans-unit id="b18679bb485a969aa3729a892fbc342e477da1e5" translate="yes" xml:space="preserve">
          <source>In the overwhelming majority of cases, splitting on spaces is unwanted, so this is an improvement.</source>
          <target state="translated">圧倒的に多いのがスペースでの分割は不要なので、これは改善の余地があります。</target>
        </trans-unit>
        <trans-unit id="55c66e2c1e0fda8174837bafe85eb3fcb419d043" translate="yes" xml:space="preserve">
          <source>In the simplest case, this is just something like:</source>
          <target state="translated">最もシンプルなケースでは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="40d4bef31048f07adb0a3c1f574c30c70992f0e5" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">これらの場合、次のように &lt;code&gt;string split &quot; &quot;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="18fa635f435c584cd7b90aa2e82333c61c95545a" translate="yes" xml:space="preserve">
          <source>In these cases use &lt;code&gt;string split -n &quot; &quot;&lt;/code&gt; like:</source>
          <target state="translated">このような場合は、次のように &lt;code&gt;string split -n &quot; &quot;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e86e38a4028df2e1d281758cf65343b3a55357c4" translate="yes" xml:space="preserve">
          <source>In these cases, the expansion eliminates the string, as a result of the implicit &lt;a href=&quot;#cartesian-product&quot;&gt;cartesian product&lt;/a&gt;.</source>
          <target state="translated">これらの場合、暗黙の&lt;a href=&quot;#cartesian-product&quot;&gt;デカルト積の&lt;/a&gt;結果として、展開により文字列が削除されます。</target>
        </trans-unit>
        <trans-unit id="a96781a5a37dbe8375812a63f70f63e6201fe8ae" translate="yes" xml:space="preserve">
          <source>Incorrect use of output redirects</source>
          <target state="translated">出力リダイレクトの誤用</target>
        </trans-unit>
        <trans-unit id="00039aeb76d249d44e4bf3ba01d88ffc368e8bd4" translate="yes" xml:space="preserve">
          <source>Index range expansion</source>
          <target state="translated">インデックス範囲の拡大</target>
        </trans-unit>
        <trans-unit id="6fb7f6ce1f52c7d40f5bab615e431e3f8551d458" translate="yes" xml:space="preserve">
          <source>Initialization files</source>
          <target state="translated">初期化ファイル</target>
        </trans-unit>
        <trans-unit id="5b8bc6fd5a49916cbd83500565c87c69583337ad" translate="yes" xml:space="preserve">
          <source>Inline variable assignments need to follow the &lt;code&gt;time&lt;/code&gt; keyword:</source>
          <target state="translated">インライン変数の割り当ては、 &lt;code&gt;time&lt;/code&gt; キーワードに従う必要があります。</target>
        </trans-unit>
        <trans-unit id="2a06266a915eac92808f8af015840d61f777058b" translate="yes" xml:space="preserve">
          <source>Input/Output (IO) redirection</source>
          <target state="translated">入出力リダイレクト</target>
        </trans-unit>
        <trans-unit id="d06fb6a26a0cdbfbe971938c779ba1d8847a636e" translate="yes" xml:space="preserve">
          <source>Input/Output Redirection</source>
          <target state="translated">入出力リダイレクション</target>
        </trans-unit>
        <trans-unit id="cc03501ba8e2728a6aa8f006cb5c7941d732153b" translate="yes" xml:space="preserve">
          <source>Insert mode</source>
          <target state="translated">挿入モード</target>
        </trans-unit>
        <trans-unit id="f37697c91d983059a7f049680216d12bd20b587e" translate="yes" xml:space="preserve">
          <source>Inserts a space without expanding an &lt;a href=&quot;#abbreviations&quot;&gt;abbreviation&lt;/a&gt;. For vi-mode this only applies to insert-mode.</source>
          <target state="translated">&lt;a href=&quot;#abbreviations&quot;&gt;省略形&lt;/a&gt;を展開せずにスペースを挿入します。viモードの場合、これは挿入モードにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="56c7ddbfeb574a673d5b721d96a9d20284b9212a" translate="yes" xml:space="preserve">
          <source>Installation and Start</source>
          <target state="translated">インストールとスタート</target>
        </trans-unit>
        <trans-unit id="fb573a25e7d086275bc5c6e4ace954c5c0646937" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;&amp;lt;(command)&lt;/code&gt; fish uses &lt;code&gt;(command | psub)&lt;/code&gt;. There is no equivalent to &lt;code&gt;&amp;gt;(command)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;(command)&lt;/code&gt; 代わりに、fishは &lt;code&gt;(command | psub)&lt;/code&gt; ます。 &lt;code&gt;&amp;gt;(command)&lt;/code&gt; 相当するものはありません。</target>
        </trans-unit>
        <trans-unit id="ae42c8f55618254e86eb5072d662a945a623a1b7" translate="yes" xml:space="preserve">
          <source>Instead of introducing specific escapes like &lt;code&gt;\h&lt;/code&gt; for the hostname, the prompt is simply a function, so you can use variables like &lt;code&gt;$hostname&lt;/code&gt;.</source>
          <target state="translated">ホスト名に &lt;code&gt;\h&lt;/code&gt; ような特定のエスケープを導入する代わりに、プロンプトは単なる関数なので、 &lt;code&gt;$hostname&lt;/code&gt; ような変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="2ccd152ce4747f5dc9ca0704a6680d2b21035b46" translate="yes" xml:space="preserve">
          <source>Integer flag</source>
          <target state="translated">整数フラグ</target>
        </trans-unit>
        <trans-unit id="fb0ea93fbb85b738df0bd31fcf1bc9eb5468d22b" translate="yes" xml:space="preserve">
          <source>Interactive use</source>
          <target state="translated">インタラクティブな使用</target>
        </trans-unit>
        <trans-unit id="653edb0bfdb6bd20dfe7affb5776bc7d271237c7" translate="yes" xml:space="preserve">
          <source>Internals</source>
          <target state="translated">Internals</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="c62c2864f20a2be4aa0393bfb86357685145de0e" translate="yes" xml:space="preserve">
          <source>Invoking &lt;code&gt;complete&lt;/code&gt; multiple times for the same command adds the new definitions on top of any existing completions defined for the command.</source>
          <target state="translated">同じコマンドに対して &lt;code&gt;complete&lt;/code&gt; 複数回呼び出すと、コマンドに定義されている既存の完了に加えて新しい定義が追加されます。</target>
        </trans-unit>
        <trans-unit id="b79b686609fac01050f615aa2d90cce8c104548e" translate="yes" xml:space="preserve">
          <source>It also provides a large number of program specific scripted completions. Most of these completions are simple options like the &lt;code&gt;-l&lt;/code&gt; option for &lt;code&gt;ls&lt;/code&gt;, but some are more advanced. For example:</source>
          <target state="translated">また、多数のプログラム固有のスクリプト化された補完を提供します。これらの補完のほとんどは、 &lt;code&gt;ls&lt;/code&gt; の &lt;code&gt;-l&lt;/code&gt; オプションのような単純なオプションですが、より高度なものもあります。例えば：</target>
        </trans-unit>
        <trans-unit id="60085e96c04073bb488214d0f08662dbfb4f6528" translate="yes" xml:space="preserve">
          <source>It calls out to VCS-specific functions. The currently supported systems are:</source>
          <target state="translated">VCS 固有の機能を呼び出します。現在サポートされているシステムは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="203759edaf1b0804074e8480cb71a78345306aec" translate="yes" xml:space="preserve">
          <source>It can add bindings if given a SEQUENCE of characters to bind to. These should be written as &lt;a href=&quot;../index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. The most important of these are &lt;code&gt;\c&lt;/code&gt; for the control key, and &lt;code&gt;\e&lt;/code&gt; for escape, and because of historical reasons also the Alt key (sometimes also called &quot;Meta&quot;).</source>
          <target state="translated">バインドする文字のシーケンスが指定されている場合は、バインディングを追加できます。これらは、&lt;a href=&quot;../index#escapes&quot;&gt;魚のエスケープシーケンス&lt;/a&gt;として記述する必要があります。これらの中で最も重要なのは、コントロールキー用の &lt;code&gt;\c&lt;/code&gt; とエスケープ用の &lt;code&gt;\e&lt;/code&gt; であり、歴史的な理由から、Altキー（「メタ」とも呼ばれる）もあります。</target>
        </trans-unit>
        <trans-unit id="cd08cedcb39096700407dcb2ed27cc0a4d9655b5" translate="yes" xml:space="preserve">
          <source>It can also be unexported with &lt;code&gt;--unexport&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--unexport&lt;/code&gt; または &lt;code&gt;-u&lt;/code&gt; を使用してエクスポート解除することもできます。</target>
        </trans-unit>
        <trans-unit id="72de81959962a9a672242451c7ee1c544e10edd3" translate="yes" xml:space="preserve">
          <source>It can handle floating point numbers:</source>
          <target state="translated">浮動小数点数を扱うことができます。</target>
        </trans-unit>
        <trans-unit id="ddbcc8a329c69e0ee07a4d0ad690183b6b281c37" translate="yes" xml:space="preserve">
          <source>It can print a message to tell you about it, and it often also checks for a missing package that would include the command.</source>
          <target state="translated">そのことを伝えるメッセージを表示したり、コマンドを含むパッケージがないかどうかをチェックすることもあります。</target>
        </trans-unit>
        <trans-unit id="55070aaf0fa7daad220e9d1da32a51d9a5c70260" translate="yes" xml:space="preserve">
          <source>It doesn't support any options, so there is no need for a &lt;code&gt;--&lt;/code&gt; separator, which makes it easier to use for arbitrary input than &lt;code&gt;echo&lt;/code&gt;. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;</source>
          <target state="translated">これは、任意のオプションをサポートしていないので、ために必要はありません &lt;code&gt;--&lt;/code&gt; より任意の入力に使用することが容易になり、セパレータ、 &lt;code&gt;echo&lt;/code&gt; 。&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="907fa9ff594fcd3a11d91328fd423e6cb93e804d" translate="yes" xml:space="preserve">
          <source>It is (by default) safe to use &lt;code&gt;fish_add_path&lt;/code&gt; in config.fish, or it can be used once, interactively, and the paths will stay in future because of &lt;a href=&quot;../index#variables-universal&quot;&gt;universal variables&lt;/a&gt;. This is a &quot;do what I mean&quot; style command, if you need more control, consider modifying the variable yourself.</source>
          <target state="translated">&lt;code&gt;fish_add_path&lt;/code&gt; でfish_add_pathを使用するのは（デフォルトで）安全です。または、インタラクティブに1回使用することもでき、&lt;a href=&quot;../index#variables-universal&quot;&gt;ユニバーサル変数がある&lt;/a&gt;ため、パスは将来も維持されます。これは「私が言っていることを実行する」スタイルのコマンドです。さらに制御が必要な場合は、変数を自分で変更することを検討してください。</target>
        </trans-unit>
        <trans-unit id="83c3b240dba13d15ae7f53c1a501f0c631e4c4fe" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like</source>
          <target state="translated">また、以下のようにしてすべての emacs-mode バインディングを vi-mode に追加することも可能です。</target>
        </trans-unit>
        <trans-unit id="ec8325ed194e0bd115e6eac2314eb9c5b93bc6c7" translate="yes" xml:space="preserve">
          <source>It is also possible to add all emacs-mode bindings to vi-mode by using something like:</source>
          <target state="translated">また、以下のような方法ですべての emacs-mode バインディングを vi-mode に追加することも可能です。</target>
        </trans-unit>
        <trans-unit id="88b3a0222511e2204a83e1bd65b24a52023e46f7" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of a list:</source>
          <target state="translated">また、リストの個々の要素を設定したり、消去したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="8ab84d80263900ba9d5b235b1f2ea80519e28b73" translate="yes" xml:space="preserve">
          <source>It is also possible to set or erase individual elements of an array:</source>
          <target state="translated">また、配列の個々の要素を設定したり、消去したりすることも可能です。</target>
        </trans-unit>
        <trans-unit id="b76c3dec3cad4d06a40836a74a8d9d7e685bfe94" translate="yes" xml:space="preserve">
          <source>It is an error to redirect a builtin, function, or block to a file descriptor above 2. However this is supported for external commands.</source>
          <target state="translated">ビルドイン、関数、ブロックを2以上のファイルディスクリプターにリダイレクトするのはエラーです。ただし、外部コマンドではサポートされています。</target>
        </trans-unit>
        <trans-unit id="5d526954a8bce879648c1f8388f9dcd5c2cf78df" translate="yes" xml:space="preserve">
          <source>It is common to want to validate the the value provided for an option satisfies some criteria. For example, that it is a valid integer within a specific range. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">オプションに指定された値がいくつかの基準を満たしていることを検証したい場合がよくあります。たとえば、特定の範囲内の有効な整数であること。 &lt;code&gt;argparse&lt;/code&gt; が戻った後はいつでもこれを行うことができますが、任意のfishスクリプトを実行して &lt;code&gt;argparse&lt;/code&gt; が検証を実行するように要求することもできます。これを行うには、単に &lt;code&gt;!&lt;/code&gt; （感嘆符）次に、fishスクリプトを実行します。このコードを実行すると、3つの変数が定義されます。</target>
        </trans-unit>
        <trans-unit id="0d6750d924d7d23c326002d74cd58ced0561fd77" translate="yes" xml:space="preserve">
          <source>It is equivalent to &lt;code&gt;gettext fish STRING&lt;/code&gt;, meaning it can only be used to look up fish's own translations.</source>
          <target state="translated">これは &lt;code&gt;gettext fish STRING&lt;/code&gt; と同等です。つまり、魚自身の翻訳を検索するためにのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="cc00ed6c087a163188d567eb4446d3e5458a9c89" translate="yes" xml:space="preserve">
          <source>It is possible the character is simply too new for your system to know - in this case you need to refrain from using it.</source>
          <target state="translated">その文字がシステムにとって新しすぎる可能性がありますので、その場合は使用を控える必要があります。</target>
        </trans-unit>
        <trans-unit id="a71bcd2264c669eb00c671521098fb03d224a747" translate="yes" xml:space="preserve">
          <source>It is possible to directly create functions and variables in &lt;code&gt;config.fish&lt;/code&gt; file, using the commands shown above. For example:</source>
          <target state="translated">上記のコマンドを使用して、 &lt;code&gt;config.fish&lt;/code&gt; ファイルに関数と変数を直接作成できます。例えば：</target>
        </trans-unit>
        <trans-unit id="c54df5298d2680170d64430ca4a68d0d26623f84" translate="yes" xml:space="preserve">
          <source>It is possible to pipe a different output file descriptor by prepending its FD number and the output redirect symbol to the pipe. For example:</source>
          <target state="translated">異なる出力ファイル記述子のFD番号と出力リダイレクト記号をパイプの前に付けることで、異なる出力ファイル記述子をパイプすることが可能です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="83c56d7ebd2ae7a42fad58d3fe21565a95290624" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">これは通常、&lt;a href=&quot;#if&quot;&gt;if&lt;/a&gt;ステートメントや&lt;a href=&quot;#switch&quot;&gt;switch&lt;/a&gt;ステートメントなどの条件付きブロック内に追加され、実行中の関数を条件付きで停止して呼び出し元に戻りますが、関数の終了ステータスを指定するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="2f4a9521ff238cfd8c93799d8d5f98df72dc4a0c" translate="yes" xml:space="preserve">
          <source>It is usually added inside of a conditional block such as an &lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt; statement or a &lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt; statement to conditionally stop the executing function and return to the caller, but it can also be used to specify the exit status of a function.</source>
          <target state="translated">通常、&lt;a href=&quot;if#cmd-if&quot;&gt;if&lt;/a&gt;ステートメントや&lt;a href=&quot;switch#cmd-switch&quot;&gt;switch&lt;/a&gt;ステートメントなどの条件付きブロック内に追加され、実行中の関数を条件付きで停止して呼び出し元に戻りますが、関数の終了ステータスを指定するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="cefa92c853442bbe4dd3a6ef0bacadea8c59bfbd" translate="yes" xml:space="preserve">
          <source>It is very important that function definition files only contain the definition for the specified function and nothing else. Otherwise, it is possible that autoloading a function files requires that the function already be loaded, which creates a circular dependency.</source>
          <target state="translated">関数定義ファイルには、指定された関数の定義のみが含まれ、それ以外は何も含まれていないことが非常に重要です。そうしないと、関数ファイルをオートロードする際に、その関数が既にロードされている必要があり、循環的な依存関係が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ee7deea0a6c7d1bf1f12282d8e4f2d33d9fa574c" translate="yes" xml:space="preserve">
          <source>It knows about paths and options</source>
          <target state="translated">それはパスとオプションについて知っている</target>
        </trans-unit>
        <trans-unit id="13749347248c90340a66276ab0e48e071806f943" translate="yes" xml:space="preserve">
          <source>It knows about paths and options:</source>
          <target state="translated">それは、パスとオプションについて知っています。</target>
        </trans-unit>
        <trans-unit id="73489c53a191e7b18096896c25d0bf7ce0247f3c" translate="yes" xml:space="preserve">
          <source>It receives the full commandline as one argument per token, so $argv[1] contains the missing command.</source>
          <target state="translated">トークンごとに1つの引数として完全なコマンドラインを受け取るので、$argv[1]には不足しているコマンドが含まれています。</target>
        </trans-unit>
        <trans-unit id="60b075e830d4afccde933ee553ba07abf9675ce6" translate="yes" xml:space="preserve">
          <source>It requires fish to be built with gettext support. If that support is disabled, or there is no translation it will simply echo the argument back.</source>
          <target state="translated">これには、gettext をサポートする fish が必要です。もしそのサポートが無効であったり、翻訳がなかったりすると、単に引数を返します。</target>
        </trans-unit>
        <trans-unit id="d78e633fc7cdcd0634a499148a621014d2eb87ba" translate="yes" xml:space="preserve">
          <source>It will also return non-zero if no argument at all was given, in which case it will print nothing.</source>
          <target state="translated">また、引数が全く与えられていない場合はゼロ以外を返し、その場合は何も表示されません。</target>
        </trans-unit>
        <trans-unit id="09881db18dec90e0ba8f4c151dbc729afee1f020" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;, because the &quot;a b c &quot; is used in one piece. But if you do</source>
          <target state="translated">それが印刷されます &lt;code&gt;xa b c x&lt;/code&gt; 「ABC」は一体で使用されているので、。しかし、あなたがそうするなら</target>
        </trans-unit>
        <trans-unit id="f51b747a62fc1665fa16726f0cc05a908bd9ced6" translate="yes" xml:space="preserve">
          <source>It will print &lt;code&gt;xa b c x&lt;/code&gt;. But if you do</source>
          <target state="translated">それが印刷されます &lt;code&gt;xa b c x&lt;/code&gt; 。しかし、もし</target>
        </trans-unit>
        <trans-unit id="784cf5b2d3ebe2dbad48daf3fd3356b85327650b" translate="yes" xml:space="preserve">
          <source>Iterating over a list of numbers can be done with &lt;code&gt;seq&lt;/code&gt;:</source>
          <target state="translated">数値のリストを反復処理するには、 &lt;code&gt;seq&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="1c2654e77c8a1d66520f0e811b49f2ee16ec66ef" translate="yes" xml:space="preserve">
          <source>Job control</source>
          <target state="translated">ジョブ制御</target>
        </trans-unit>
        <trans-unit id="090e4272d6cb5283367e3c64d3f84a1ce2fa8aee" translate="yes" xml:space="preserve">
          <source>Jobs in the list of jobs are sent a hang-up signal when fish terminates, which usually causes the job to terminate; &lt;code&gt;disown&lt;/code&gt; allows these processes to continue regardless.</source>
          <target state="translated">ジョブのリストにあるジョブには、魚が終了するとハングアップシグナルが送信されます。これにより、通常、ジョブが終了します。 &lt;code&gt;disown&lt;/code&gt; を指定すると、これらのプロセスを続行できます。</target>
        </trans-unit>
        <trans-unit id="a7ee38bb7be4fc44198cb2685d9601dcf2b9f569" translate="yes" xml:space="preserve">
          <source>K</source>
          <target state="translated">K</target>
        </trans-unit>
        <trans-unit id="544b65b506a2ffb69625eb6e4d7541dde083f7c6" translate="yes" xml:space="preserve">
          <source>Keep in mind that a defined variabled could also be empty, either by having no elements (if set like &lt;code&gt;set var&lt;/code&gt;) or only empty elements (if set like &lt;code&gt;set var &quot;&quot;&lt;/code&gt;). Read on for how to deal with those.</source>
          <target state="translated">要素がない（ &lt;code&gt;set var&lt;/code&gt; のように設定されている場合）か、空の要素のみ（ &lt;code&gt;set var &quot;&quot;&lt;/code&gt; のように設定されている場合）のいずれかによって、定義された変数が空になる可能性があることに注意してください。それらに対処する方法について読んでください。</target>
        </trans-unit>
        <trans-unit id="67c2ddd8aa7fac8b85b7d1410e5632ad6336f06c" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion happens before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (&lt;code&gt;()&lt;/code&gt;) and the asterisk (&lt;code&gt;*&lt;/code&gt;) glob character have to be escaped or quoted. &lt;code&gt;x&lt;/code&gt; can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.</source>
          <target state="translated">パラメータの展開は、式が評価される前に行われることに注意してください。これは、シェル変数またはコマンド置換の出力を含む計算を実行するために非常に役立ちますが、括弧（ &lt;code&gt;()&lt;/code&gt; ）およびアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）グロブ文字をエスケープまたは引用符で囲む必要があることも意味します。 &lt;code&gt;x&lt;/code&gt; は乗算を表すためにも使用できますが、16進数と区別するために、その後に空白を続ける必要があります。</target>
        </trans-unit>
        <trans-unit id="32881a56b33d045dddcff4e97bad3c9a0cec51b4" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis (&lt;code&gt;()&lt;/code&gt;) and the asterisk (&lt;code&gt;*&lt;/code&gt;) glob character have to be escaped or quoted. &lt;code&gt;x&lt;/code&gt; can also be used to denote multiplication, but it needs to be followed by whitespace to distinguish it from hexadecimal numbers.</source>
          <target state="translated">式が評価される前に、パラメーターの展開にかかることに注意してください。これは、シェル変数またはコマンド置換の出力を含む計算を実行するために非常に役立ちますが、括弧（ &lt;code&gt;()&lt;/code&gt; ）およびアスタリスク（ &lt;code&gt;*&lt;/code&gt; ）グロブ文字をエスケープまたは引用符で囲む必要があることも意味します。 &lt;code&gt;x&lt;/code&gt; は乗算を表すためにも使用できますが、16進数と区別するために、その後に空白を続ける必要があります。</target>
        </trans-unit>
        <trans-unit id="946c99cee0972cba5b6dec7f34cb20b94d3a2715" translate="yes" xml:space="preserve">
          <source>Keep in mind that parameter expansion takes before expressions are evaluated. This can be very useful in order to perform calculations involving shell variables or the output of command substitutions, but it also means that parenthesis and the asterisk glob character have to be escaped or quoted.</source>
          <target state="translated">パラメータ展開は式が評価される前に行われることに注意してください。これはシェル変数を含む計算やコマンド置換の出力を行う際に非常に便利ですが、括弧とアスタリスク・グロブ文字をエスケープするか引用符で囲む必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="573891be377321acc4815f0519173b9b072d48fa" translate="yes" xml:space="preserve">
          <source>Key bindings may use &quot;modes&quot;, which mimics Vi's modal input behavior. The default mode is &quot;default&quot;, and every bind applies to a single mode. The mode can be viewed/changed with the &lt;code&gt;$fish_bind_mode&lt;/code&gt; variable.</source>
          <target state="translated">キーバインディングは、Viのモーダル入力動作を模倣する「モード」を使用できます。デフォルトのモードは「デフォルト」であり、すべてのバインドは単一のモードに適用されます。モードは &lt;code&gt;$fish_bind_mode&lt;/code&gt; 変数で表示/変更できます。</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="07749d64f555cfedf3e2d5d1184ead2daee433fc" translate="yes" xml:space="preserve">
          <source>Launch &lt;code&gt;git diff&lt;/code&gt; and repaint the commandline afterwards when</source>
          <target state="translated">&lt;code&gt;git diff&lt;/code&gt; を起動し、後でコマンドラインを再描画します。</target>
        </trans-unit>
        <trans-unit id="b562f1a6d0c5684ca96b09426bc1669506a7f803" translate="yes" xml:space="preserve">
          <source>Learning fish</source>
          <target state="translated">学習魚</target>
        </trans-unit>
        <trans-unit id="3229609e15436ec51bcf00818a69a84dbc58a0c2" translate="yes" xml:space="preserve">
          <source>License</source>
          <target state="translated">License</target>
        </trans-unit>
        <trans-unit id="b5cf98d60edf53bb04a75b49fe8d89b334867632" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU General Public License, version 2.</source>
          <target state="translated">GNU General Public License,バージョン2の下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="0c817d22761932bbede7666d8ef3e49c8a0db6e6" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sed&lt;/code&gt;'s &lt;code&gt;s/old/new/&lt;/code&gt; command, &lt;code&gt;string replace&lt;/code&gt; still prints strings that don't match. &lt;code&gt;sed&lt;/code&gt;'s &lt;code&gt;-n&lt;/code&gt; in combination with a &lt;code&gt;/p&lt;/code&gt; modifier or command is like &lt;code&gt;string replace -f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sed&lt;/code&gt; の &lt;code&gt;s/old/new/&lt;/code&gt; コマンドと同様に、 &lt;code&gt;string replace&lt;/code&gt; は、一致しない文字列を出力します。 &lt;code&gt;/p&lt;/code&gt; 修飾子またはコマンドと組み合わせた &lt;code&gt;sed&lt;/code&gt; 's &lt;code&gt;-n&lt;/code&gt; は、 &lt;code&gt;string replace -f&lt;/code&gt; ようなものです。</target>
        </trans-unit>
        <trans-unit id="c93725e0a0f010017ca3b484abe1192273219e4e" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;s/&lt;/code&gt; command, &lt;code&gt;string replace&lt;/code&gt; still prints strings that don't match. &lt;code&gt;sed&lt;/code&gt;s &lt;code&gt;-n&lt;/code&gt; in combination with a &lt;code&gt;/p&lt;/code&gt; modifier or command is like &lt;code&gt;string replace -f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sed&lt;/code&gt; s &lt;code&gt;s/&lt;/code&gt; コマンドと同様に、 &lt;code&gt;string replace&lt;/code&gt; は、一致しない文字列を出力します。 &lt;code&gt;sed&lt;/code&gt; S &lt;code&gt;-n&lt;/code&gt; Aとの組み合わせで &lt;code&gt;/p&lt;/code&gt; 修飾子またはコマンドのようなものです &lt;code&gt;string replace -f&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1d7dce52159e33fc313d29a4609b6f0ca14c0f7" translate="yes" xml:space="preserve">
          <source>Like most programming language, fish also has the familiar &lt;a href=&quot;cmds/while#cmd-while&quot;&gt;while&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt; loops.</source>
          <target state="translated">ほとんどのプログラミング言語と同様に、fishにもおなじみの&lt;a href=&quot;cmds/while#cmd-while&quot;&gt;while&lt;/a&gt;ループと&lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;ループがあります。</target>
        </trans-unit>
        <trans-unit id="f063dbdbbc3586964fed3651ab53c12631bbacd5" translate="yes" xml:space="preserve">
          <source>Like other shells, a dollar sign performs variable substitution:</source>
          <target state="translated">他のシェルと同様に、ドル記号は変数の置換を行います。</target>
        </trans-unit>
        <trans-unit id="1c10e83fba90f8ed8fbb793d35b29d018d6a8897" translate="yes" xml:space="preserve">
          <source>Like other shells, fish allows multiple commands either on separate lines or the same line.</source>
          <target state="translated">他のシェルと同様に、魚は複数のコマンドを別々の行または同じ行で実行することができます。</target>
        </trans-unit>
        <trans-unit id="c894b65fadc7501ee13e70fa65a7de836d05e57a" translate="yes" xml:space="preserve">
          <source>Like other shells, the Up arrow,</source>
          <target state="translated">他のシェルと同様に、上矢印</target>
        </trans-unit>
        <trans-unit id="57c9502a7d7d48fd4a86b45fefb2b163491c3ae1" translate="yes" xml:space="preserve">
          <source>Lists</source>
          <target state="translated">Lists</target>
        </trans-unit>
        <trans-unit id="a51da1d245e2b299170419f02a7283c1cf86ec93" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as &lt;a href=&quot;index#cartesian-product&quot;&gt;cartesian products&lt;/a&gt; unless quoted (see &lt;a href=&quot;index#expand-variable&quot;&gt;Variable expansion&lt;/a&gt;):</source>
          <target state="translated">他のリストまたは文字列に隣接するリストは、引用符で囲まれていない限り、&lt;a href=&quot;index#cartesian-product&quot;&gt;デカルト積&lt;/a&gt;として展開されます（&lt;a href=&quot;index#expand-variable&quot;&gt;変数展開を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e550372c446deb80cb7097a6530c7895ce489c98" translate="yes" xml:space="preserve">
          <source>Lists adjacent to other lists or strings are expanded as cartesian products:</source>
          <target state="translated">他のリストや文字列に隣接するリストは、直交積として展開されます。</target>
        </trans-unit>
        <trans-unit id="4d148bf1eeeabc2918d896ed4801527981164657" translate="yes" xml:space="preserve">
          <source>Lists can be inspected with the &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; or the &lt;a href=&quot;cmds/contains#cmd-contains&quot;&gt;contains&lt;/a&gt; commands:</source>
          <target state="translated">リストは、&lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt;または&lt;a href=&quot;cmds/contains#cmd-contains&quot;&gt;contains&lt;/a&gt;コマンドで検査できます。</target>
        </trans-unit>
        <trans-unit id="d036c0ec2ab378b452b8d2cead3a3ffcc191575a" translate="yes" xml:space="preserve">
          <source>Lists cannot contain other lists: there is no recursion. A variable is a list of strings, full stop.</source>
          <target state="translated">リストは他のリストを含むことはできません。変数は文字列のリストです。</target>
        </trans-unit>
        <trans-unit id="1a9f2a13711da14fca66fcdde04b63c088d5386d" translate="yes" xml:space="preserve">
          <source>Local variables are specific to the current fish session, and associated with a specific block of commands, and automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">ローカル変数は現在のフィッシュセッションに固有であり、コマンドの特定のブロックに関連付けられており、特定のブロックがスコープ外になると自動的に消去されます。コマンドのブロックは、コマンドのいずれかで始まる一連のコマンドである &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;switch&lt;/code&gt; 、およびコマンドで終わる &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd5bfe87f1fde5105869e708324f805855fff5fa" translate="yes" xml:space="preserve">
          <source>Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">ローカル変数は、現在のフィッシュセッションに固有であり、コマンドの特定のブロックに関連付けられており、特定のブロックがスコープ外になると自動的に消去されます。コマンドのブロックは、コマンドのいずれかで始まる一連のコマンドである &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;switch&lt;/code&gt; 、およびコマンドで終わる &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8172703ebdf7bfc5b44da606bf9f833637212ffc" translate="yes" xml:space="preserve">
          <source>Locale variables</source>
          <target state="translated">ロケール変数</target>
        </trans-unit>
        <trans-unit id="02720f9d38bf4f35e84ed5228689898bee176418" translate="yes" xml:space="preserve">
          <source>Loops</source>
          <target state="translated">Loops</target>
        </trans-unit>
        <trans-unit id="4f6fd280f95526cf9605e281ba55d1b9e4e755e0" translate="yes" xml:space="preserve">
          <source>Loops and blocks</source>
          <target state="translated">ループとブロック</target>
        </trans-unit>
        <trans-unit id="4e836fdc2572ab23d5dc8c36bd613ac6b0f82d63" translate="yes" xml:space="preserve">
          <source>Manual</source>
          <target state="translated">Manual</target>
        </trans-unit>
        <trans-unit id="daa46eacc82eda91d82b231750f9ce0c28ce8e77" translate="yes" xml:space="preserve">
          <source>Many characters + control are indistinguishable from other keys.</source>
          <target state="translated">多くの文字+コントロールは、他のキーと見分けがつきません。</target>
        </trans-unit>
        <trans-unit id="f5f695dcfd95e469044fda4ad8dda41439800142" translate="yes" xml:space="preserve">
          <source>Many other shells have a large library of builtin commands. Most of these commands are also available as standalone commands, but have been implemented in the shell anyway. To avoid code duplication, and to avoid the confusion of subtly differing versions of the same command, &lt;code&gt;fish&lt;/code&gt; generally only implements builtins for actions which cannot be performed by a regular command.</source>
          <target state="translated">他の多くのシェルには、組み込みコマンドの大きなライブラリがあります。これらのコマンドのほとんどはスタンドアロンコマンドとしても使用できますが、いずれにしてもシェルに実装されています。コードの重複を避け、同じコマンドの微妙に異なるバージョンの混乱を避けるために、 &lt;code&gt;fish&lt;/code&gt; は通常、通常のコマンドでは実行できないアクションのビルトインのみを実装します。</target>
        </trans-unit>
        <trans-unit id="508666f7961e41b7a23a46d49b1c68da21e0ab6e" translate="yes" xml:space="preserve">
          <source>Many terminals support 24-bit (i.e., true-color) color escape sequences. This includes modern xterm, Gnome Terminal, Konsole, and iTerm2. Fish attempts to detect such terminals through various means in &lt;code&gt;config.fish&lt;/code&gt; You can explicitly force that support via &lt;code&gt;set fish_term24bit 1&lt;/code&gt;.</source>
          <target state="translated">多くの端末は24ビット（つまり、トゥルーカラー）のカラーエスケープシーケンスをサポートしています。これには、最新のxterm、Gnome Terminal、Konsole、およびiTerm2が含まれます。Fishは、 &lt;code&gt;config.fish&lt;/code&gt; のさまざまな方法でそのような端末を検出しようとします &lt;code&gt;set fish_term24bit 1&lt;/code&gt; 介して、そのサポートを明示的に強制できます。</target>
        </trans-unit>
        <trans-unit id="e069a87ea72df19d398bb86736ac50bde7ce37cb" translate="yes" xml:space="preserve">
          <source>Many things are similar - they both fundamentally expand commandlines to execute commands, have pipes, redirections, variables, globs, use command output in various ways. This document is there to quickly show you the differences.</source>
          <target state="translated">どちらも基本的にはコマンドラインを拡張してコマンドを実行したり、パイプ、リダイレクト、変数、グロブ、コマンド出力を様々な方法で使用するなど、多くの点で似ています。このドキュメントは、その違いを簡単に示すためのものです。</target>
        </trans-unit>
        <trans-unit id="ee9b4890d50f0c6b762d298b81c92845215e8616" translate="yes" xml:space="preserve">
          <source>Match Glob Examples</source>
          <target state="translated">グローブの例を一致させる</target>
        </trans-unit>
        <trans-unit id="5d635a6434318430e0640768784677cf44ef96c2" translate="yes" xml:space="preserve">
          <source>Match Regex Examples</source>
          <target state="translated">一致する正規表現の例</target>
        </trans-unit>
        <trans-unit id="282c4c424c8c8f802f09ed9069046a66c3e0e2df" translate="yes" xml:space="preserve">
          <source>Matching can be made case-insensitive with &lt;code&gt;--ignore-case&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--ignore-case&lt;/code&gt; または &lt;code&gt;-i&lt;/code&gt; を使用すると、大文字と小文字を区別しないマッチングを行うことができます。</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="dfe39636b572a032956990221bea7522894ca013" translate="yes" xml:space="preserve">
          <source>Mismatched parenthesis</source>
          <target state="translated">括弧の不一致</target>
        </trans-unit>
        <trans-unit id="08965269be31a1f77226663d4b16152886fa2985" translate="yes" xml:space="preserve">
          <source>More examples:</source>
          <target state="translated">その他の例。</target>
        </trans-unit>
        <trans-unit id="7d99cf687fc07cadeb9c71efe74a35ddac5120de" translate="yes" xml:space="preserve">
          <source>More on universal variables</source>
          <target state="translated">普遍的な変数の詳細</target>
        </trans-unit>
        <trans-unit id="021eea9c0dd8f610dc9e4cc089ecb63b53b1ea84" translate="yes" xml:space="preserve">
          <source>Most operations &lt;code&gt;string&lt;/code&gt; supports can also be done by external tools. Some of these include &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;cut&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; サポートのほとんどの操作は、外部ツールでも実行できます。これらのいくつかには、 &lt;code&gt;grep&lt;/code&gt; 、 &lt;code&gt;sed&lt;/code&gt; 、 &lt;code&gt;cut&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="58541b1a51075d09123179aa5f9cebf36d81b9ff" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing</source>
          <target state="translated">ほとんどのプログラムでは、を押すことでプログラムの実行を一時停止し、制御を &lt;code&gt;fish&lt;/code&gt; 戻すことができます</target>
        </trans-unit>
        <trans-unit id="a6722727e636d961891415cd8a8813e266709c00" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to &lt;code&gt;fish&lt;/code&gt; by pressing &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;Z&lt;/b&gt; (also referred to as &lt;code&gt;^Z&lt;/code&gt;). Once back at the &lt;code&gt;fish&lt;/code&gt; commandline, you can start other programs and do anything you want. If you then want you can go back to the suspended command by using the &lt;a href=&quot;commands#fg&quot;&gt;&lt;code&gt;fg&lt;/code&gt;&lt;/a&gt; (foreground) command.</source>
          <target state="translated">ほとんどのプログラムでは、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Z&lt;/b&gt;（ &lt;code&gt;^Z&lt;/code&gt; とも呼ばれる）を押すことで、プログラムの実行を一時停止し、制御を &lt;code&gt;fish&lt;/code&gt; 戻すことができます。 &lt;code&gt;fish&lt;/code&gt; コマンドラインに戻ったら、他のプログラムを起動して、好きなことを行うことができます。その後、必要に応じて、&lt;a href=&quot;commands#fg&quot;&gt; &lt;code&gt;fg&lt;/code&gt; &lt;/a&gt;（フォアグラウンド）コマンドを使用して、中断されたコマンドに戻ることができます。&lt;em&gt;&lt;/em&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="42e39dcb42dd9f2c013945b7875260844de45299" translate="yes" xml:space="preserve">
          <source>Most programs allow you to suspend the program's execution and return control to fish by pressing</source>
          <target state="translated">ほとんどのプログラムでは、プログラムの実行を一時停止し、制御をフィッシュに戻すために</target>
        </trans-unit>
        <trans-unit id="e20a7603daf5506e0104fd220a18c38ad250d45c" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (I/O) streams:</source>
          <target state="translated">多くのプログラムでは、3つの入出力(I/O)ストリームを使用します。</target>
        </trans-unit>
        <trans-unit id="e36a3163fcb5b2ce91e7e62b6620c694486a5106" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output (IO) streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">ほとんどのプログラムでは、ファイルディスクリプタ(FD)と呼ばれる番号で表される3つの入出力(IO)ストリームを使用します。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c20818da60d954d40a5d602d6db10493b1f04e88" translate="yes" xml:space="preserve">
          <source>Most programs use three input/output &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; streams, each represented by a number called a file descriptor (FD). These are:</source>
          <target state="translated">ほとんどのプログラムは、3つの入力/出力&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;ストリームを使用し、それぞれがファイル記述子（FD）と呼ばれる番号で表されます。これらは：</target>
        </trans-unit>
        <trans-unit id="fbfe945f56b2d1285935393b0ba01a8e6e9fb533" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status.</source>
          <target state="translated">ほとんどのサブコマンドは &lt;code&gt;-q&lt;/code&gt; または &lt;code&gt;--quiet&lt;/code&gt; スイッチを受け入れます。これは、通常の出力を抑制しますが、文書化されたステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="03976ab7d33a85c8fc9480afc29d1387785551a9" translate="yes" xml:space="preserve">
          <source>Most subcommands accept a &lt;code&gt;-q&lt;/code&gt; or &lt;code&gt;--quiet&lt;/code&gt; switch, which suppresses the usual output but exits with the documented status. In this case these commands will quit early, without reading all of the available input.</source>
          <target state="translated">ほとんどのサブコマンドは &lt;code&gt;-q&lt;/code&gt; または &lt;code&gt;--quiet&lt;/code&gt; スイッチを受け入れます。これは通常の出力を抑制しますが、文書化されたステータスで終了します。この場合、これらのコマンドは、使用可能なすべての入力を読み取らずに、早期に終了します。</target>
        </trans-unit>
        <trans-unit id="9e4b95e5fe05cdb2e32c0be4dc38dcb8444a090a" translate="yes" xml:space="preserve">
          <source>Multiline editing</source>
          <target state="translated">マルチライン編集</target>
        </trans-unit>
        <trans-unit id="63062e2bb329a1db1e4dac2e1dda44f0bf889fa3" translate="yes" xml:space="preserve">
          <source>Multiple command switches and wrapped commands can also be given to define multiple completions in one call.</source>
          <target state="translated">また、複数のコマンドスイッチやラップコマンドを与えることで、1回の通話で複数の完了を定義することができます。</target>
        </trans-unit>
        <trans-unit id="3da78228f66f1d5dda641de8fdf0ef902754c494" translate="yes" xml:space="preserve">
          <source>Multiple commands and paths can be given in one call to define the same completions for multiple commands.</source>
          <target state="translated">1回の通話で複数のコマンドとパスを指定して、複数のコマンドに同じ補完を定義することができます。</target>
        </trans-unit>
        <trans-unit id="afac76fbf7acd07151be5bf2f1d66efbab839d8c" translate="yes" xml:space="preserve">
          <source>Multiple elements can be given in a &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#expand-brace&quot;&gt;ブレース展開&lt;/a&gt;で複数の要素を指定できます。</target>
        </trans-unit>
        <trans-unit id="4e562a20b062b14bf4f914e63d6a366748810ee2" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">複数行でもOKです。色は、&lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt;を使用して設定し、ANSI色、または16進RGB値という名前で渡すことができます。</target>
        </trans-unit>
        <trans-unit id="284d6c5f151a78ee571b877c91d2822cf913407f" translate="yes" xml:space="preserve">
          <source>Multiple lines are OK. Colors can be set via &lt;code&gt;set_color&lt;/code&gt;, passing it named ANSI colors, or hex RGB values:</source>
          <target state="translated">複数行でも問題ありません。色は、 &lt;code&gt;set_color&lt;/code&gt; を使用して設定でき、名前付きのANSI色、または16進RGB値を渡します。</target>
        </trans-unit>
        <trans-unit id="b9313e4afc7e7087f2691f5390743aa11cb2045a" translate="yes" xml:space="preserve">
          <source>Multiple lines are not supported in &lt;code&gt;fish_right_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_right_prompt&lt;/code&gt; では複数行はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="533228885e107d3eaa86bae132326686a81acd20" translate="yes" xml:space="preserve">
          <source>Multiple ranges are also possible, separated with a space.</source>
          <target state="translated">スペースで区切って複数の範囲を指定することも可能です。</target>
        </trans-unit>
        <trans-unit id="2ddaeb8bc8e45a0d0bc521306478830db49c61a1" translate="yes" xml:space="preserve">
          <source>My command (pkg-config) gives its output as a single long string?</source>
          <target state="translated">私のコマンド (pkg-config)は、その出力を一本の長い文字列として出力していますか?</target>
        </trans-unit>
        <trans-unit id="ea4625148060290559b503a843a926f0635335a1" translate="yes" xml:space="preserve">
          <source>My command prints &quot;No matches for wildcard&quot; but works in bash</source>
          <target state="translated">私のコマンドは「No matches for wildcard」と表示されますが、bashでは動作します。</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="f9c6fa94b0cdb85c962b8db6aabb5f0166f8183a" translate="yes" xml:space="preserve">
          <source>NUL Delimited Examples</source>
          <target state="translated">NUL 区切りの例</target>
        </trans-unit>
        <trans-unit id="462063d7fb620e3775d8d6aee72a22d131be5da2" translate="yes" xml:space="preserve">
          <source>Navigate directories using the &lt;a href=&quot;../index#directory-history&quot;&gt;directory history&lt;/a&gt; or the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../index#directory-history&quot;&gt;ディレクトリ履歴&lt;/a&gt;または&lt;a href=&quot;../index#directory-stack&quot;&gt;ディレクトリスタック&lt;/a&gt;を使用してディレクトリをナビゲートします</target>
        </trans-unit>
        <trans-unit id="877b0ac88e7cbb97cba9ff5c5c5c305c451eb822" translate="yes" xml:space="preserve">
          <source>Navigating directories</source>
          <target state="translated">ディレクトリの移動</target>
        </trans-unit>
        <trans-unit id="2bcd7736113c6b4efdb7226bbeffaacd2a34dab2" translate="yes" xml:space="preserve">
          <source>Next, do the following (assuming fish was installed to /usr/local):</source>
          <target state="translated">次に、以下のようにします(fishが/usr/localにインストールされていると仮定して)。</target>
        </trans-unit>
        <trans-unit id="e1c89d68ecad2be53a8cf7ccdf90c12f59e35a10" translate="yes" xml:space="preserve">
          <source>Non existing commands.</source>
          <target state="translated">既存のコマンド以外。</target>
        </trans-unit>
        <trans-unit id="ef71956d237455d6edd36051eb69b5df7d7daaf5" translate="yes" xml:space="preserve">
          <source>Non-monospace fonts - there is &lt;em&gt;no way&lt;/em&gt; for fish to figure out what width a specific character has as it has no influence on the terminal's font rendering.</source>
          <target state="translated">非等幅フォント-端末のフォントレンダリングに影響を与えないため、特定の文字の幅を魚が把握する&lt;em&gt;方法&lt;/em&gt;はあり&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="76f3e65e8538fb0ceb8d456aa90c5d4ef9931a07" translate="yes" xml:space="preserve">
          <source>Normally when &lt;code&gt;fish&lt;/code&gt; starts a program, this program will be put in the foreground, meaning it will take control of the terminal and &lt;code&gt;fish&lt;/code&gt; will be stopped until the program finishes. Sometimes this is not desirable. For example, you may wish to start an application with a graphical user interface from the terminal, and then be able to continue using the shell. In such cases, there are several ways in which the user can change fish's behavior.</source>
          <target state="translated">通常、 &lt;code&gt;fish&lt;/code&gt; がプログラムを開始すると、このプログラムはフォアグラウンドに置かれます。つまり、ターミナルを制御し、プログラムが終了するまで &lt;code&gt;fish&lt;/code&gt; は停止します。これは望ましくない場合があります。たとえば、ターミナルからグラフィカルユーザーインターフェイスを使用してアプリケーションを起動し、シェルを引き続き使用できるようにする場合があります。このような場合、ユーザーが魚の行動を変更する方法はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="725343c5d9934b2dc59d44a6bd5ed0c4b217734a" translate="yes" xml:space="preserve">
          <source>Note that &quot;exported&quot; is not a &lt;a href=&quot;index#variables-scope&quot;&gt;scope&lt;/a&gt;, but an additional bit of state. A variable can be global and exported or local and exported or even universal and exported. Typically it makes sense to make an exported variable global.</source>
          <target state="translated">「エクスポートされた」は&lt;a href=&quot;index#variables-scope&quot;&gt;スコープ&lt;/a&gt;ではなく、状態の追加ビットであることに注意してください。変数は、グローバルでエクスポートすることも、ローカルでエクスポートすることも、ユニバーサルでエクスポートすることもできます。通常、エクスポートされた変数をグローバルにすることは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="96c863f5345c5efef0b87a4ab35f2576e2a2fce7" translate="yes" xml:space="preserve">
          <source>Note that &lt;a href=&quot;cmds/case#cmd-case&quot;&gt;case&lt;/a&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">&lt;a href=&quot;cmds/case#cmd-case&quot;&gt;大文字&lt;/a&gt;と小文字は区別されず、複数の引数または（引用符で囲まれた）ワイルドカードを受け入れることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="08c5c1ef76ceaf50dd2d8b6a05425f76eaec2b83" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;case&lt;/code&gt; does not fall through, and can accept multiple arguments or (quoted) wildcards.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; と小文字は区別されず、複数の引数または（引用符で囲まれた）ワイルドカードを受け入れることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="94e6c8486c051199cf983de0b2724a88564f11b3" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; is sourced &lt;code&gt;after&lt;/code&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">&lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; はスニペットの &lt;code&gt;after&lt;/code&gt; に供給されることに注意してください。これは、ユーザーがスニペットをコピーして、動作の一部をオーバーライドできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="ade5bb175b9c01fc56dcd04dfd8820b5d87cfdc6" translate="yes" xml:space="preserve">
          <source>Note that all colors can also have a corresponding &lt;code&gt;_done&lt;/code&gt; color. For example, the contents of &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; is printed right _after_ the upstream.</source>
          <target state="translated">すべての色が対応する &lt;code&gt;_done&lt;/code&gt; 色を持つこともできることに注意してください。たとえば、 &lt;code&gt;$__fish_git_prompt_color_upstream_done&lt;/code&gt; 内容は、アップストリームの直後に出力されます。</target>
        </trans-unit>
        <trans-unit id="daafcf66550c6e75c5e67349c16e61c50e7a4d2f" translate="yes" xml:space="preserve">
          <source>Note that array indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">他の言語ではより一般的であるように、配列のインデックスは0ではなく &lt;code&gt;fish&lt;/code&gt; で1から始まることに注意してください。これは、 &lt;code&gt;seq&lt;/code&gt; のような多くの一般的なUnixツールがそのような用途により適しているためです。無効なインデックスは暗黙的に無視され、その結果、値は置換されません（空の文字列ではありません）。</target>
        </trans-unit>
        <trans-unit id="75e8dbe710958336c22801c9b7351ebb45c4f694" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;../index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;../index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">fishはオンデマンドで関数をロードするため、保存された関数は、他の方法で実行または取得されるまで、&lt;a href=&quot;../index#event&quot;&gt;イベントハンドラー&lt;/a&gt;として機能しないことに注意してください。新しいシェルごとにイベントハンドラーをアクティブ化するには、 &lt;code&gt;funcsave&lt;/code&gt; を使用&lt;a href=&quot;../index#initialization&quot;&gt;する&lt;/a&gt;代わりに、シェル初期化ファイルに関数を追加します。</target>
        </trans-unit>
        <trans-unit id="a0707e5e6cd48555094dd0ce06f95a929ab9ee48" translate="yes" xml:space="preserve">
          <source>Note that because fish loads functions on-demand, saved functions will not function as &lt;a href=&quot;index#event&quot;&gt;event handlers&lt;/a&gt; until they are run or sourced otherwise. To activate an event handler for every new shell, add the function to your &lt;a href=&quot;index#initialization&quot;&gt;shell initialization file&lt;/a&gt; instead of using &lt;code&gt;funcsave&lt;/code&gt;.</source>
          <target state="translated">fishはオンデマンドで関数をロードするため、保存された関数は、実行されるか、別の方法でソースされるまで、&lt;a href=&quot;index#event&quot;&gt;イベントハンドラー&lt;/a&gt;として機能しません。新しいシェルごとにイベントハンドラーをアクティブにするには、 &lt;code&gt;funcsave&lt;/code&gt; を使用&lt;a href=&quot;index#initialization&quot;&gt;する&lt;/a&gt;代わりに、シェル初期化ファイルに関数を追加します。</target>
        </trans-unit>
        <trans-unit id="589ecfcb67f532f7a8f91c889d769fa9b8dc1363" translate="yes" xml:space="preserve">
          <source>Note that both of these are bashisms, and most things can easily be expressed without. E.g. instead of:</source>
          <target state="translated">なお、これらはいずれもバシズムであり、ほとんどのものはなくても簡単に表現できます。例)instead of:</target>
        </trans-unit>
        <trans-unit id="d05600b5a2c4216ed0373e93b0ae5b8dde601d3a" translate="yes" xml:space="preserve">
          <source>Note that command substitutions in a case statement will be evaluated even if its body is not taken. All substitutions, including command substitutions, must be performed before the value can be compared against the parameter.</source>
          <target state="translated">case文の中のコマンドの置換は、本体が取られていなくても評価されることに注意してください。コマンドの置換を含むすべての置換は、値がパラメータと比較される前に実行されなければなりません。</target>
        </trans-unit>
        <trans-unit id="27acedfb629019bcb72c1aaa58829703ce6d6432" translate="yes" xml:space="preserve">
          <source>Note that conversion may fail, e.g. &quot;102.234&quot; will not losslessly convert to an integer, causing printf to print an error.</source>
          <target state="translated">変換に失敗する可能性があることに注意してください。例えば、&quot;102.234 &quot;はロスレスに整数に変換されず、printfがエラーを表示する原因となります。</target>
        </trans-unit>
        <trans-unit id="8107914840367cc99db95db5e903f636fb93ac38" translate="yes" xml:space="preserve">
          <source>Note that events are only received from the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">ある魚プロセスから別の魚プロセスにイベントを送信する方法がないため、イベントは現在の魚プロセスからしか受信できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b604d17300bf8871e1df935d8ccab61e77f2c2e6" translate="yes" xml:space="preserve">
          <source>Note that events are only sent to the current fish process as there is no way to send events from one fish process to another.</source>
          <target state="translated">ある魚プロセスから別の魚プロセスにイベントを送信する方法がないため、イベントは現在の魚プロセスにのみ送信されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="12b209e520b1b3c2d9d6735095ba293070697631" translate="yes" xml:space="preserve">
          <source>Note that exported variables can be local or global or universal - &quot;exported&quot; is not a &lt;a href=&quot;index#variables-scope&quot;&gt;scope&lt;/a&gt;. Usually you'd make them global via &lt;code&gt;set -gx MyVariable SomeValue&lt;/code&gt;.</source>
          <target state="translated">エクスポートされた変数は、ローカル、グローバル、またはユニバーサルである可能性があることに注意してください。「エクスポートされた」は&lt;a href=&quot;index#variables-scope&quot;&gt;スコープで&lt;/a&gt;はありません。通常は、 &lt;code&gt;set -gx MyVariable SomeValue&lt;/code&gt; 使用してグローバルにします。</target>
        </trans-unit>
        <trans-unit id="1816c418ab7796b893d641bb9d4e996647340b50" translate="yes" xml:space="preserve">
          <source>Note that fish does not fall through on case statements. Only the first matching case is executed.</source>
          <target state="translated">fishはcase文では落ちないことに注意してください。最初にマッチしたケースのみが実行されます。</target>
        </trans-unit>
        <trans-unit id="dea20fe7204b37a954eb8c5b71576a69b5e9c5a0" translate="yes" xml:space="preserve">
          <source>Note that fish has a default titlebar message, which will be used if the fish_title function is undefined. So simply unsetting the fish_title function will not work.</source>
          <target state="translated">fishにはデフォルトのタイトルバーメッセージがあり、これはfish_title関数が未定義の場合に使用されることに注意してください。そのため、単に fish_title 関数の設定を解除しただけでは動作しません。</target>
        </trans-unit>
        <trans-unit id="216dd486d99355c7f2e848a5066c6390232ae830" translate="yes" xml:space="preserve">
          <source>Note that for backwards compatibility each subcommand can also be specified as a long option. For example, rather than &lt;code&gt;history search&lt;/code&gt; you can type &lt;code&gt;history --search&lt;/code&gt;. Those long options are deprecated and will be removed in a future release.</source>
          <target state="translated">下位互換性のために、各サブコマンドを長いオプションとして指定することもできます。たとえば、 &lt;code&gt;history search&lt;/code&gt; ではなく、「 &lt;code&gt;history --search&lt;/code&gt; 」と入力できます。これらの長いオプションは非推奨であり、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="3b22090df2d664d4741cb8fa8f02ce46c5b511d7" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;$status&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 4 exceptions, namely &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;, overriding variables in &lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;, &lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt; and &lt;a href=&quot;cmds/for#cmd-for&quot;&gt;for&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">ほとんどのコマンドでは、ワイルドカードの展開に失敗した場合、コマンドは実行されず、&lt;a href=&quot;#variables-status&quot;&gt;$ status&lt;/a&gt;がゼロ以外に設定され、警告が出力されることに注意してください。この動作は、bashで &lt;code&gt;shopt -s failglob&lt;/code&gt; を設定することと一致しています。正確に4つの例外があります。つまり、&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;、&lt;a href=&quot;#variables-override&quot;&gt;overrides&lt;/a&gt;、&lt;a href=&quot;cmds/count#cmd-count&quot;&gt;count&lt;/a&gt;、および&lt;a href=&quot;cmds/for#cmd-for&quot;&gt;forの&lt;/a&gt;変数のオーバーライドです。それらのグロブは、bashの &lt;code&gt;shopt -s nullglob&lt;/code&gt; の場合と同様に、ゼロ引数に拡張できます。</target>
        </trans-unit>
        <trans-unit id="c97f265eeb04a552b0a053d1fe6fd39164111e41" translate="yes" xml:space="preserve">
          <source>Note that for most commands, if any wildcard fails to expand, the command is not executed, &lt;a href=&quot;#variables-status&quot;&gt;&lt;code&gt;$status&lt;/code&gt;&lt;/a&gt; is set to nonzero, and a warning is printed. This behavior is consistent with setting &lt;code&gt;shopt -s failglob&lt;/code&gt; in bash. There are exactly 3 exceptions, namely &lt;a href=&quot;commands#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt;. Their globs are permitted to expand to zero arguments, as with &lt;code&gt;shopt -s nullglob&lt;/code&gt; in bash.</source>
          <target state="translated">ほとんどのコマンドでは、ワイルドカードが展開に失敗した場合、コマンドは実行されず、&lt;a href=&quot;#variables-status&quot;&gt; &lt;code&gt;$status&lt;/code&gt; &lt;/a&gt;がゼロ以外に設定され、警告が出力されます。この動作は、bashでの &lt;code&gt;shopt -s failglob&lt;/code&gt; の設定と一致しています。ちょうど3つの例外、つまり&lt;a href=&quot;commands#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; があり&lt;/a&gt;ます。それらのグロブは、bashの &lt;code&gt;shopt -s nullglob&lt;/code&gt; と同様に、ゼロ引数に拡張することが許可されています。</target>
        </trans-unit>
        <trans-unit id="85d04e8ba3b775ebb67002c660a72287b64eba9e" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt; command will not execute correctly.</source>
          <target state="translated">関数はバックグラウンドで開始できないことに注意してください。&lt;a href=&quot;cmds/bg#cmd-bg&quot;&gt;bg&lt;/a&gt;コマンドを使用してバックグラウンドで停止してから再起動した関数は、正しく実行されません。</target>
        </trans-unit>
        <trans-unit id="179b535385e9bcd6de7a6f886e309b106b43e8dd" translate="yes" xml:space="preserve">
          <source>Note that functions cannot be started in the background. Functions that are stopped and then restarted in the background using the &lt;code&gt;bg&lt;/code&gt; command will not execute correctly.</source>
          <target state="translated">機能はバックグラウンドで開始できないことに注意してください。停止してから &lt;code&gt;bg&lt;/code&gt; コマンドを使用してバックグラウンドで再開した機能は、正しく実行されません。</target>
        </trans-unit>
        <trans-unit id="d0299abe7df714002513b6c5ca5f854adee2c02d" translate="yes" xml:space="preserve">
          <source>Note that list indices start at 1 in &lt;code&gt;fish&lt;/code&gt;, not 0, as is more common in other languages. This is because many common Unix tools like &lt;code&gt;seq&lt;/code&gt; are more suited to such use. An invalid index is silently ignored resulting in no value being substituted (not an empty string).</source>
          <target state="translated">リストのインデックスは1から開始することを注意 &lt;code&gt;fish&lt;/code&gt; 他の言語では、より一般的であるように、0でありません、。これは、 &lt;code&gt;seq&lt;/code&gt; のような多くの一般的なUnixツールがそのような使用に適しているためです。無効なインデックスは黙って無視され、値は置き換えられません（空の文字列ではありません）。</target>
        </trans-unit>
        <trans-unit id="58e1ba9da269293437fe6233c6fcc925fb1049b3" translate="yes" xml:space="preserve">
          <source>Note that list indices start at 1 in fish, not 0 like in other languages. This is because it requires less subtracting of 1 and many common Unix tools like &lt;code&gt;seq&lt;/code&gt; work better with it (&lt;code&gt;seq 5&lt;/code&gt; prints 1 to 5, not 0 to 5). An invalid index is silently ignored resulting in no value (not even an empty string, just no argument at all).</source>
          <target state="translated">リストインデックスは、他の言語のように0ではなく、魚では1から始まることに注意してください。これは、1の減算が少なくて済み、 &lt;code&gt;seq&lt;/code&gt; のような多くの一般的なUnixツールがより適切に機能するためです（ &lt;code&gt;seq 5&lt;/code&gt; は0から5ではなく1から5を出力します）。無効なインデックスは黙って無視され、値がなくなります（空の文字列でさえなく、引数がまったくありません）。</target>
        </trans-unit>
        <trans-unit id="56578f519a03e2785432ffc83f432b088789cd11" translate="yes" xml:space="preserve">
          <source>Note that most builtin commands display their help in the terminal when given the &lt;code&gt;--help&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;--help&lt;/code&gt; オプションを指定すると、ほとんどの組み込みコマンドがヘルプを端末に表示することに注意してください。</target>
        </trans-unit>
        <trans-unit id="052c493b4f8ae8b6935593bcf58c5ec984ab99f3" translate="yes" xml:space="preserve">
          <source>Note that not all these limits are available in all operating systems.</source>
          <target state="translated">これらの制限は、すべてのオペレーティングシステムで利用できるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fd0759c196f448d14f3c2205ba14675a88db1daf" translate="yes" xml:space="preserve">
          <source>Note that parentheses will usually require escaping with &lt;code&gt;\(&lt;/code&gt; to avoid being interpreted as a command substitution.</source>
          <target state="translated">括弧は通常、コマンド置換として解釈されないように &lt;code&gt;\(&lt;/code&gt; でエスケープする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="188395866987d29873c39e6fea9524d72368f195" translate="yes" xml:space="preserve">
          <source>Note that seeding the engine will NOT give the same result across different systems.</source>
          <target state="translated">エンジンのシーディングを行っても、異なるシステムで同じ結果が得られるわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8cff03b2fdbde6fa37f1f5e156f040ecab266358" translate="yes" xml:space="preserve">
          <source>Note that some key combinations are indistinguishable or unbindable. For instance control-i &lt;em&gt;is the same&lt;/em&gt; as the tab key. This is a terminal limitation that fish can't do anything about.</source>
          <target state="translated">一部のキーの組み合わせは、区別できないか、バインドできないことに注意してください。たとえば、control-i&lt;em&gt;は&lt;/em&gt;タブキー&lt;em&gt;と同じ&lt;/em&gt;です。これは、魚が何もできない最終的な制限です。</target>
        </trans-unit>
        <trans-unit id="d6845ef4744da1872b3bb15bf0a1af7f22c61de6" translate="yes" xml:space="preserve">
          <source>Note that special input functions cannot be combined with ordinary shell script commands. The commands must be entirely a sequence of special input functions (from &lt;code&gt;bind -f&lt;/code&gt;) or all shell script commands (i.e., valid fish script).</source>
          <target state="translated">特別な入力関数を通常のシェルスクリプトコマンドと組み合わせることはできないことに注意してください。コマンドは、完全に一連の特別な入力関数（ &lt;code&gt;bind -f&lt;/code&gt; から）またはすべてのシェルスクリプトコマンド（つまり、有効なfishスクリプト）である必要があります。</target>
        </trans-unit>
        <trans-unit id="b65cb077ea76993a41de3fb713b42e0fed91a42b" translate="yes" xml:space="preserve">
          <source>Note that symbolic masks currently do not work as intended.</source>
          <target state="translated">シンボリックマスクは現在のところ意図した通りには動作しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c3e85ac16b77a7d86f7c2f0977d9686c607affe4" translate="yes" xml:space="preserve">
          <source>Note that the &lt;a href=&quot;cd#cmd-cd&quot;&gt;cd&lt;/a&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">&lt;a href=&quot;cd#cmd-cd&quot;&gt;cd&lt;/a&gt;コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴はに保存されている &lt;code&gt;$dirprev&lt;/code&gt; と &lt;code&gt;$dirnext&lt;/code&gt; 変数。</target>
        </trans-unit>
        <trans-unit id="bef2f79c5ca0fefc2538b283ecde5e201f174c69" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は、このコマンドが操作する &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="10a8eb5ef4bfcbb0fbb38b2c1dbc89e74a6c7106" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables which this command manipulates. If you make those universal variables your &lt;code&gt;cd&lt;/code&gt; history is shared among all fish instances.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は、このコマンドが操作する &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。これらのユニバーサル変数を作成すると、 &lt;code&gt;cd&lt;/code&gt; 履歴がすべての魚インスタンス間で共有されます。</target>
        </trans-unit>
        <trans-unit id="9b4bda95d407194baa99d73ed10ab09fd4118640" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;cd&lt;/code&gt; command limits directory history to the 25 most recently visited directories. The history is stored in the &lt;code&gt;$dirprev&lt;/code&gt; and &lt;code&gt;$dirnext&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;cd&lt;/code&gt; コマンドは、ディレクトリ履歴を最近アクセスした25個のディレクトリに制限することに注意してください。履歴は &lt;code&gt;$dirprev&lt;/code&gt; および &lt;code&gt;$dirnext&lt;/code&gt; 変数に格納されます。</target>
        </trans-unit>
        <trans-unit id="468f475ce4540aa6d4ffc053e8efd0e42aba5839" translate="yes" xml:space="preserve">
          <source>Note that the shell will attempt to change directory without requiring &lt;code&gt;cd&lt;/code&gt; if the name of a directory is provided (starting with &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt;, or ending with &lt;code&gt;/&lt;/code&gt;).</source>
          <target state="translated">ディレクトリの名前が​​指定されている場合（ &lt;code&gt;.&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; または &lt;code&gt;~&lt;/code&gt; で始まる、または &lt;code&gt;/&lt;/code&gt; で終わる）、シェルは &lt;code&gt;cd&lt;/code&gt; を要求せずにディレクトリを変更しようとすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a1ad39e7a025d924c676894892c33d43f516843" translate="yes" xml:space="preserve">
          <source>Note that there are three environment variables that are automatically split on colons to become lists when fish starts running: &lt;code&gt;PATH&lt;/code&gt;, &lt;code&gt;CDPATH&lt;/code&gt;, &lt;code&gt;MANPATH&lt;/code&gt;. Conversely, they are joined on colons when exported to subcommands. All other environment variables (e.g., &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt;) which have similar semantics are treated as simple strings.</source>
          <target state="translated">fishの実行開始時にリストになるようにコロンで自動的に分割される3つの環境変数があることに注意してください： &lt;code&gt;PATH&lt;/code&gt; 、 &lt;code&gt;CDPATH&lt;/code&gt; 、 &lt;code&gt;MANPATH&lt;/code&gt; 。逆に、サブコマンドにエクスポートすると、コロンで結合されます。同様のセマンティクスを持つ他のすべての環境変数（ &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; など）は、単純な文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="bf45589c3e3c3f4d264bc9f93c56158f4afde11c" translate="yes" xml:space="preserve">
          <source>Note that this function will not be used if a command by this name exists (which is the case on macOS or Haiku).</source>
          <target state="translated">この名前のコマンドが存在する場合(macOSやHaikuの場合)は、この関数は使用されませんのでご注意ください。</target>
        </trans-unit>
        <trans-unit id="5bf381b343429f3c3b6b07cc6b6f0a80c7987163" translate="yes" xml:space="preserve">
          <source>Note that without the quotes or braces, fish will try to expand a variable called &lt;code&gt;$WORDs&lt;/code&gt;, which may not exist.</source>
          <target state="translated">引用符や中括弧がないと、fishは &lt;code&gt;$WORDs&lt;/code&gt; という変数を展開しようとしますが、これは存在しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="655206648d0dc7faa21d15bc23b20c851a2e5079" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced &lt;em&gt;after&lt;/em&gt; the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">〜/ .config / fish / config.fishはスニペットの&lt;em&gt;後&lt;/em&gt;に供給されることに注意してください。これは、ユーザーがスニペットをコピーして、一部の動作を上書きできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="ce33996fd64092e1167cf6f8d31deb6827e1e03e" translate="yes" xml:space="preserve">
          <source>Note that ~/.config/fish/config.fish is sourced _after_ the snippets. This is so users can copy snippets and override some of their behavior.</source>
          <target state="translated">スニペットの後に ~/.config/fish/config.fish が生成されることに注意してください。これは、ユーザがスニペットをコピーして、その動作の一部を上書きすることができるようにするためです。</target>
        </trans-unit>
        <trans-unit id="e4d54cdd421c0c07715137d8eb13776063e53178" translate="yes" xml:space="preserve">
          <source>Note that, like &lt;code&gt;wc -l&lt;/code&gt;, reading from stdin counts newlines, so &lt;code&gt;echo -n foo | count&lt;/code&gt; will print 0.</source>
          <target state="translated">&lt;code&gt;wc -l&lt;/code&gt; と同様に、stdinからの読み取りでは改行がカウントされるため、 &lt;code&gt;echo -n foo | count&lt;/code&gt; は0を出力します。</target>
        </trans-unit>
        <trans-unit id="e2ce3cf51c29175bd1e3054b41cb66e679925023" translate="yes" xml:space="preserve">
          <source>Note that, like GNU tools and most of fish's builtins, &lt;code&gt;contains&lt;/code&gt; interprets all arguments starting with a &lt;code&gt;-&lt;/code&gt; as options to contains, until it reaches an argument that is &lt;code&gt;--&lt;/code&gt; (two dashes). See the examples below.</source>
          <target state="translated">GNUツールやほとんどのfishのビルトインと同様に、 &lt;code&gt;contains&lt;/code&gt; は &lt;code&gt;-&lt;/code&gt; で始まるすべての引数を、それが &lt;code&gt;--&lt;/code&gt; （2つのダッシュ）である引数に達するまで、containsのオプションとして解釈することに注意してください。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6acc4ccc246684cfa1057fb20ffd8a8f35f63d65" translate="yes" xml:space="preserve">
          <source>Note that, unlike other shells, fish will first set the variable and then perform other expansions on the line, so:</source>
          <target state="translated">他の貝と違って、魚は最初に変数を設定してからライン上で他の展開を行うので注意してください。</target>
        </trans-unit>
        <trans-unit id="9cd1c04aa664d29ef9d4114fed80a20478f9f7c6" translate="yes" xml:space="preserve">
          <source>Note: At the moment the debug prompt is identical to your normal fish prompt. This can make it hard to recognize that you've entered a debug session. Issue 1310 is open to improve this.</source>
          <target state="translated">注意:現時点では、デバッグプロンプトは通常の魚のプロンプトと同じです。これにより、デバッグセッションに入ったことを認識するのが困難になることがあります。これを改善するために1310号を公開しています。</target>
        </trans-unit>
        <trans-unit id="7341a7c6e815f3797445d76ed55a3c56872a0b2b" translate="yes" xml:space="preserve">
          <source>Note: Exporting is not a &lt;a href=&quot;#variables-scope&quot;&gt;scope&lt;/a&gt;, but an additional state. It typically makes sense to make exported variables global as well, but local-exported variables can be useful if you need something more specific than &lt;a href=&quot;#variables-override&quot;&gt;Overrides&lt;/a&gt;. They are &lt;em&gt;copied&lt;/em&gt; to functions so the function can't alter them outside, and still available to commands.</source>
          <target state="translated">注：エクスポートは&lt;a href=&quot;#variables-scope&quot;&gt;スコープ&lt;/a&gt;ではなく、追加の状態です。通常、エクスポートされた変数をグローバルにすることも理にかなっていますが、ローカルにエクスポートされた変数は、&lt;a href=&quot;#variables-override&quot;&gt;オーバーライド&lt;/a&gt;よりも具体的なものが必要な場合に役立ちます。それらは関数に&lt;em&gt;コピーさ&lt;/em&gt;れるため、関数はそれらを外部で変更できず、コマンドで引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="8200dd2c18320e71ce4b78ddf09a868f7796fa5a" translate="yes" xml:space="preserve">
          <source>Note: Optional arguments</source>
          <target state="translated">注:オプションの引数</target>
        </trans-unit>
        <trans-unit id="2acd9175970aa8fc3b9936ce32e6e5f5129257b5" translate="yes" xml:space="preserve">
          <source>Note: This event will be emitted even if the command is invalid. The commandline parameter includes the entire commandline verbatim, and may potentially include newlines.</source>
          <target state="translated">注意:このイベントは、コマンドが無効な場合でも発生します。コマンドラインパラメータにはコマンドライン全体がそのまま含まれ、改行を含む可能性があります。</target>
        </trans-unit>
        <trans-unit id="4a71ed28fa070fd5d0f2ba5d9d8b94e51646208b" translate="yes" xml:space="preserve">
          <source>Note: fish 2.2.0 and earlier used a default of 10 milliseconds, and provided no way to configure it. That effectively made it impossible to use escape as a meta key.</source>
          <target state="translated">注意:fish 2.2.0 以前のバージョンではデフォルトで 10 ミリ秒を使用しており、これを設定する方法はありませんでした。そのため、メタキーとしてエスケープを使用することが事実上不可能になっていました。</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="03c757f6b7891744a49627d17ec9ed791ed69d26" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an implicit int flag, else</source>
          <target state="translated">フラグが引数を取らないブール値か、暗黙のintフラグであれば何もしません。</target>
        </trans-unit>
        <trans-unit id="3a6065f76d3b020b6ad540bdea70b2f7e755a94a" translate="yes" xml:space="preserve">
          <source>Nothing if the flag is a boolean that takes no argument or is an integer flag, or</source>
          <target state="translated">フラグが引数を取らない真偽値であったり、整数のフラグであったりした場合は何もしない。</target>
        </trans-unit>
        <trans-unit id="e47908ae8dc7d29c7e8ca1f8808d3df2ae36cf39" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration (&lt;code&gt;function thing -w otherthing&lt;/code&gt;).</source>
          <target state="translated">これで、ハブはすべての補完をgitから継承します。これは関数宣言（ &lt;code&gt;function thing -w otherthing&lt;/code&gt; ）でも指定できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7e9e91cddb4e1bbe3d96c5cfb7bcf12796b0c7e0" translate="yes" xml:space="preserve">
          <source>Now hub inherits all of the completions from git. Note this can also be specified in a function declaration.</source>
          <target state="translated">これで hub は git からすべての補完を継承するようになりました。これは関数宣言で指定することもできます。</target>
        </trans-unit>
        <trans-unit id="377c6369b04b17877206baabd99b8340d2c1712d" translate="yes" xml:space="preserve">
          <source>Now in another shell:</source>
          <target state="translated">今度は別のシェルで。</target>
        </trans-unit>
        <trans-unit id="9241604f804422daccce563b9e8acb2fb7b8f7c8" translate="yes" xml:space="preserve">
          <source>Now, bash also tries to match files in this case, but when it doesn't find a match, it passes along the literal wildcard string instead.</source>
          <target state="translated">さて、bashはこの場合もファイルのマッチを試みますが、マッチしない場合は、代わりにリテラルのワイルドカード文字列を渡します。</target>
        </trans-unit>
        <trans-unit id="d5aead3c087eb1218d9c5de157a34a40ad6e6161" translate="yes" xml:space="preserve">
          <source>Numerical comparisons will simply fail if one of the operands is not a number:</source>
          <target state="translated">オペランドの1つが数値でない場合、数値比較は単純に失敗します。</target>
        </trans-unit>
        <trans-unit id="08a914cde05039694ef0194d9ee79ff9a79dde33" translate="yes" xml:space="preserve">
          <source>O</source>
          <target state="translated">O</target>
        </trans-unit>
        <trans-unit id="aeeb9e7d5766fc544e9c4260b0a26961443229c2" translate="yes" xml:space="preserve">
          <source>Oh My Fish</source>
          <target state="translated">オーマイフィッシュ</target>
        </trans-unit>
        <trans-unit id="c168b84a253f1a9380f35914e43b4459d37046ec" translate="yes" xml:space="preserve">
          <source>Old style long options, like '&lt;code&gt;-Wall&lt;/code&gt;'. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter ('&lt;code&gt;-ao null&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-Wall&lt;/code&gt; 'のような古いスタイルの長いオプション。古いスタイルの長いオプションは、1文字以上にすることができ、単一のハイフンが前に付き、一緒にグループ化することはできません。オプション引数は、次のパラメーターで指定されます（ ' &lt;code&gt;-ao null&lt;/code&gt; '）。</target>
        </trans-unit>
        <trans-unit id="702d8b387b41361a3850f5f8a5ccb56e871723f8" translate="yes" xml:space="preserve">
          <source>Old style long options, like &lt;code&gt;-Wall&lt;/code&gt; or &lt;code&gt;-name&lt;/code&gt;. Old style long options can be more than one character long, are preceded by a single hyphen and may not be grouped together. Option arguments are specified in the following parameter (&lt;code&gt;-ao null&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-Wall&lt;/code&gt; や &lt;code&gt;-name&lt;/code&gt; などの古いスタイルの長いオプション。古いスタイルの長いオプションは、複数の文字長にすることができ、前に1つのハイフンを付けることができ、グループ化することはできません。オプション引数は、次のパラメーター（ &lt;code&gt;-ao null&lt;/code&gt; ）で指定されます。</target>
        </trans-unit>
        <trans-unit id="b9e42bb3078b6143675803071b50a1f886f1fddf" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these configuration variables is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">起動時に、Fishはシェルの動作を制御するために使用できる多くの設定ファイルを評価します。これらの設定ファイルの場所はいくつかの環境変数によって制御されており、それらのデフォルトまたは通常の場所は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="24b148830736c9caeaaf006e4d059c7b395c5a53" translate="yes" xml:space="preserve">
          <source>On startup, Fish evaluates a number of configuration files, which can be used to control the behavior of the shell. The location of these is controlled by a number of environment variables, and their default or usual location is given below.</source>
          <target state="translated">起動時、Fishはいくつかの設定ファイルを評価し、シェルの動作を制御するために使用します。これらのファイルの場所はいくつかの環境変数によって制御され、それらのデフォルトまたは通常の場所は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="53732b6ec19e859a0b3473ce5240c51bbdc7db63" translate="yes" xml:space="preserve">
          <source>On systems that supports this feature, jobs will print the CPU usage of each job since the last command was executed. The CPU usage is expressed as a percentage of full CPU activity. Note that on multiprocessor systems, the total activity may be more than 100%.</source>
          <target state="translated">この機能をサポートしているシステムでは、最後のコマンドが実行されてからの各ジョブのCPU使用率が表示されます。CPU使用率は、フルCPUアクティビティのパーセンテージで表示されます。マルチプロセッサシステムでは、アクティビティの合計が100%を超える場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4b94b1b00f4f9d7408bbdbe697afeca3ea6a2231" translate="yes" xml:space="preserve">
          <source>Once fish has been installed, open a terminal. If fish is not the default shell:</source>
          <target state="translated">fishがインストールされたら、ターミナルを開きます。fishがデフォルトのシェルでない場合。</target>
        </trans-unit>
        <trans-unit id="18125968ef24a12c2f2c9db564d4fb936f8a352f" translate="yes" xml:space="preserve">
          <source>Once installed, just type in &lt;code&gt;fish&lt;/code&gt; into your current shell to try it out!</source>
          <target state="translated">インストールしたら、現在のシェルに &lt;code&gt;fish&lt;/code&gt; を入力して試してみてください！</target>
        </trans-unit>
        <trans-unit id="f9801d214429ef9429f41d9ccbf53d1f50cc2cf7" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is '&lt;code&gt;--color=auto&lt;/code&gt;'. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">関数の最も一般的な用途の1つは、既存のコマンドの動作をわずかに変更することです。たとえば、色を表示するために &lt;code&gt;ls&lt;/code&gt; コマンドを再定義したい場合があります。GNUシステムで色をオンにするスイッチは ' &lt;code&gt;--color=auto&lt;/code&gt; 'です。 &lt;code&gt;ls&lt;/code&gt; のエイリアスまたはラッパーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="18a097b3775c30d06cc2f17460da80ed3f17620c" translate="yes" xml:space="preserve">
          <source>One of the most common uses for functions is to slightly alter the behavior of an already existing command. For example, one might want to redefine the &lt;code&gt;ls&lt;/code&gt; command to display colors. The switch for turning on colors on GNU systems is &lt;code&gt;--color=auto&lt;/code&gt;. An alias, or wrapper, around &lt;code&gt;ls&lt;/code&gt; might look like this:</source>
          <target state="translated">関数の最も一般的な使用法の1つは、既存のコマンドの動作をわずかに変更することです。たとえば、 &lt;code&gt;ls&lt;/code&gt; コマンドを再定義して色を表示したい場合があります。GNUシステムで色をオンにするためのスイッチは &lt;code&gt;--color=auto&lt;/code&gt; です。 &lt;code&gt;ls&lt;/code&gt; の周りのエイリアスまたはラッパーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="9b470ff64825bad720814107ffdfa7bc5213df21" translate="yes" xml:space="preserve">
          <source>One of the most important expansions in fish is the &quot;variable expansion&quot;. This is the replacing of a dollar sign (&lt;code&gt;$&lt;/code&gt;) followed by a variable name with the _value_ of that variable. For more on shell variables, read the &lt;a href=&quot;#variables&quot;&gt;Shell variables&lt;/a&gt; section.</source>
          <target state="translated">魚の最も重要な拡張の1つは、「可変拡張」です。これは、ドル記号（ &lt;code&gt;$&lt;/code&gt; ）の後に変数名をその変数の_value_に置き換えることです。シェル変数の詳細については、「&lt;a href=&quot;#variables&quot;&gt;シェル変数」&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c6ed72e8734163b3555d72a22a65213a63ac427a" translate="yes" xml:space="preserve">
          <source>Only one function's description can be changed in a single invocation of &lt;code&gt;functions -d&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;functions -d&lt;/code&gt; 1回の呼び出しで変更できる関数の説明は1つだけです。</target>
        </trans-unit>
        <trans-unit id="744f6b1ea6029a4d03e486aa51d71e6cdfe3a24a" translate="yes" xml:space="preserve">
          <source>Only part of the output can be used, see &lt;a href=&quot;#expand-index-range&quot;&gt;index range expansion&lt;/a&gt; for details.</source>
          <target state="translated">出力の一部のみを使用できます。詳細については、&lt;a href=&quot;#expand-index-range&quot;&gt;インデックス範囲の拡張&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="e52f4d4c344dadad003e702bffb9e5e28cdc4a21" translate="yes" xml:space="preserve">
          <source>Operators for files and directories</source>
          <target state="translated">ファイルとディレクトリの演算子</target>
        </trans-unit>
        <trans-unit id="f27bb0ff136bb8c7c7f1daaac32275d53bfd219d" translate="yes" xml:space="preserve">
          <source>Operators for text strings</source>
          <target state="translated">テキスト文字列用の演算子</target>
        </trans-unit>
        <trans-unit id="a47a505eb7af733ce0bd8e9777ac0dd7490e55d7" translate="yes" xml:space="preserve">
          <source>Operators to combine expressions</source>
          <target state="translated">式を結合するための演算子</target>
        </trans-unit>
        <trans-unit id="7fa47fe3927b334a484c669114b525abc6a94112" translate="yes" xml:space="preserve">
          <source>Operators to compare and examine numbers</source>
          <target state="translated">数字を比較検討するオペレーター</target>
        </trans-unit>
        <trans-unit id="d4829f651a76eb5aa9c3d27e3534a7c418cd1fc9" translate="yes" xml:space="preserve">
          <source>Option Specifications</source>
          <target state="translated">オプション仕様</target>
        </trans-unit>
        <trans-unit id="7a482cf8fb70076ae04055b4c030c65bed8421d9" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the exit status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#flag-value-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">オプションで &lt;code&gt;!&lt;/code&gt; 値を検証するためのfishスクリプトが続きます。通常、これは実行する関数になります。終了ステータスがゼロの場合、フラグの値は有効です。ゼロ以外の場合、値は無効です。エラーメッセージはすべて（stderrではなく）stdoutに書き込む必要があります。詳細については、&lt;a href=&quot;#flag-value-validation&quot;&gt;フラグ値の検証&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6f38993c6d0d5cf791252a01f84f61ce28090cdc" translate="yes" xml:space="preserve">
          <source>Optionally a &lt;code&gt;!&lt;/code&gt; followed by fish script to validate the value. Typically this will be a function to run. If the return status is zero the value for the flag is valid. If non-zero the value is invalid. Any error messages should be written to stdout (not stderr). See the section on &lt;a href=&quot;#arparse-validation&quot;&gt;Flag Value Validation&lt;/a&gt; for more information.</source>
          <target state="translated">オプションで &lt;code&gt;!&lt;/code&gt; 続いて、値を検証するための魚のスクリプト通常、これは実行する関数です。戻り状況がゼロの場合、フラグの値は有効です。ゼロ以外の場合、値は無効です。エラーメッセージは、（stderrではなく）stdoutに書き込む必要があります。詳細については、&lt;a href=&quot;#arparse-validation&quot;&gt;フラグ値の検証&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="3b7277ba5f0f20e70f1f91d410bbc35500c732a7" translate="yes" xml:space="preserve">
          <source>Or if you just want to do one command in case the first succeeded or failed, use &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt;:</source>
          <target state="translated">または、最初のコマンドが成功または失敗した場合に1つのコマンドを実行するだけの場合は、 &lt;code&gt;and&lt;/code&gt; または &lt;code&gt;or&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="713a94b9bc2fb6c6ad642cfcecc352a0220c8694" translate="yes" xml:space="preserve">
          <source>Or if you prefer not to use a universal variable, use:</source>
          <target state="translated">また、ユニバーサル変数を使用したくない場合は、使用します。</target>
        </trans-unit>
        <trans-unit id="0a9abc7dccb472746b2948ac650340ce146780c6" translate="yes" xml:space="preserve">
          <source>Or odd numbers from 1 to 3:</source>
          <target state="translated">あるいは、1から3までの奇数。</target>
        </trans-unit>
        <trans-unit id="c337c713192bc94b6ec5b1b84f6028cb1ca99ebf" translate="yes" xml:space="preserve">
          <source>Or the handler for OpenSUSE's command-not-found:</source>
          <target state="translated">あるいは、OpenSUSE の command-not-found のハンドラ。</target>
        </trans-unit>
        <trans-unit id="23708273232d69f28e02edee8358b668eb03e266" translate="yes" xml:space="preserve">
          <source>Or the simple default handler:</source>
          <target state="translated">あるいは、シンプルなデフォルトのハンドラー。</target>
        </trans-unit>
        <trans-unit id="8de71742464e8e90ccc846c603c38a7e6c76aecb" translate="yes" xml:space="preserve">
          <source>Or with a &lt;a href=&quot;#expand-wildcard&quot;&gt;glob&lt;/a&gt;:</source>
          <target state="translated">または&lt;a href=&quot;#expand-wildcard&quot;&gt;グロブで&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="81bf0c03fb4bccb95c35b8c3ab1ac72a8321cb91" translate="yes" xml:space="preserve">
          <source>Or you can modify $fish_user_paths yourself, but you should be careful &lt;em&gt;not&lt;/em&gt; to append to it unconditionally in config.fish, or it will grow longer and longer.</source>
          <target state="translated">または、$ fish_user_pathsを自分で変更することもできますが、config.fishで無条件に追加し&lt;em&gt;ない&lt;/em&gt;ように注意する必要があります。そうし&lt;em&gt;ない&lt;/em&gt;と、ますます長くなります。</target>
        </trans-unit>
        <trans-unit id="a0b86ec4ef5585a86b2d2d95ef6ccb97a2b91faa" translate="yes" xml:space="preserve">
          <source>Or, to only get even numbers from 2 to 20:</source>
          <target state="translated">あるいは、2から20までの偶数の数字しか出ないように。</target>
        </trans-unit>
        <trans-unit id="14be7a9cc678ff8d2acac3f8d22e39b9c8a4df32" translate="yes" xml:space="preserve">
          <source>Other features</source>
          <target state="translated">その他の特徴</target>
        </trans-unit>
        <trans-unit id="853554e3756e54eab25e2cb9c5b84f13d2534ef7" translate="yes" xml:space="preserve">
          <source>Other help pages</source>
          <target state="translated">その他のヘルプページ</target>
        </trans-unit>
        <trans-unit id="77469ecfa59d843fae303a2fd75c68c6d8c80b23" translate="yes" xml:space="preserve">
          <source>Other keys don't have a direct encoding, and are sent as escape sequences. For example</source>
          <target state="translated">その他のキーは、直接のエンコーディングを持たず、エスケープシーケンスとして送信されます。以下はその例です。</target>
        </trans-unit>
        <trans-unit id="8064e7b7ad17f0248f35efb48f0f1d68ee39d15e" translate="yes" xml:space="preserve">
          <source>Other shells such as bash and zsh use a variable named &lt;code&gt;HISTFILE&lt;/code&gt; for a similar purpose. Fish uses a different name to avoid conflicts and signal that the behavior is different (session name instead of a file path). Also, if you set the var to anything other than &lt;code&gt;fish&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt; it will inhibit importing the bash history. That's because the most common use case for this feature is to avoid leaking private or sensitive history when giving a presentation.</source>
          <target state="translated">bashやzshなどの他のシェルは、同様の目的で &lt;code&gt;HISTFILE&lt;/code&gt; という名前の変数を使用します。 Fishは別の名前を使用して競合を回避し、動作が異なることを通知します（ファイルパスではなくセッション名）。また、varを &lt;code&gt;fish&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 以外に設定すると、bash履歴のインポートが禁止されます。これは、この機能の最も一般的な使用例は、プレゼンテーションを行うときにプライベートな履歴や機密の履歴が漏洩しないようにするためです。</target>
        </trans-unit>
        <trans-unit id="994d2884abd0455d7cd071bce999e810a742d0a0" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, have a much richer glob syntax, like &lt;code&gt;**(.)&lt;/code&gt; to only match regular files. Fish does not. Instead of reinventing the whell, use programs like &lt;code&gt;find&lt;/code&gt; to look for files. For example:</source>
          <target state="translated">zshなどの他のシェルには、通常のファイルにのみ一致する &lt;code&gt;**(.)&lt;/code&gt; などのはるかに豊富なglob構文があります。魚はしません。地獄を再発明する代わりに、ファイルを探すために &lt;code&gt;find&lt;/code&gt; のようなプログラムを使用してください。例えば：</target>
        </trans-unit>
        <trans-unit id="ca76df4fa26ca40f2ebdbbcc9b7ac947b4b17597" translate="yes" xml:space="preserve">
          <source>Other shells, such as zsh, provide a rich glob syntax for restricting the files matched by globs. For example, &lt;code&gt;**(.)&lt;/code&gt;, to only match regular files. Fish prefers to defer such features to programs, such as &lt;code&gt;find&lt;/code&gt;, rather than reinventing the wheel. Thus, if you want to limit the wildcard expansion to just regular files the fish approach is to define and use a function. For example,</source>
          <target state="translated">zshなどの他のシェルは、グロブに一致するファイルを制限するための豊富なグロブ構文を提供します。たとえば、 &lt;code&gt;**(.)&lt;/code&gt; 、通常のファイルにのみ一致します。Fishは、そのような機能を、ホイールを再発明するのではなく、 &lt;code&gt;find&lt;/code&gt; などのプログラムに任せることを好みます。したがって、ワイルドカードの展開を通常のファイルだけに制限したい場合、魚のアプローチは関数を定義して使用することです。例えば、</target>
        </trans-unit>
        <trans-unit id="c782bae247172d8d54b6355e71e72f640fe2e686" translate="yes" xml:space="preserve">
          <source>Other things have other restrictions. For instance what is allowed for file names depends on your system, but at the very least they cannot contain a &quot;/&quot; (because that is the path separator) or NULL byte (because that is how UNIX ends strings).</source>
          <target state="translated">他のものには他の制限があります。たとえば、ファイル名に何が許されるかはシステムによって異なりますが、少なくとも「/」(パスの区切り文字)やNULLバイト(UNIXでは文字列の終わり方がそうなっている)を含むことはできません。</target>
        </trans-unit>
        <trans-unit id="14a838bcf64937317892425e5ab22ef3642359f4" translate="yes" xml:space="preserve">
          <source>Other variables, like &lt;code&gt;$PATH&lt;/code&gt;, really do have multiple values. During variable expansion, the variable expands to become multiple arguments:</source>
          <target state="translated">&lt;code&gt;$PATH&lt;/code&gt; などの他の変数には、実際には複数の値があります。変数の展開中、変数は展開されて複数の引数になります。</target>
        </trans-unit>
        <trans-unit id="b5d3d0ee6275d093a0cfd5679e24b1abd3556dc6" translate="yes" xml:space="preserve">
          <source>Otherwise, by default, the variable will not be exported.</source>
          <target state="translated">そうでない場合、デフォルトでは変数はエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="adcbabbfd6290e1df478b0d2b37c0beb20ff4767" translate="yes" xml:space="preserve">
          <source>Outputting multiple lines is not supported in &lt;code&gt;fish_mode_prompt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; では、複数行の出力はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="5b8012177cdea50be6a01e8c45312b388ccc9c7a" translate="yes" xml:space="preserve">
          <source>Outside of double quotes, variables will expand to as many arguments as they have elements. That means an empty list will expand to nothing, a variable with one element will expand to that element, and a variable with multiple elements will expand to each of those elements separately.</source>
          <target state="translated">二重引用符以外では、変数は要素を持つ引数の数だけ展開されます。つまり、空のリストは何も展開されず、1つの要素を持つ変数はその要素に展開され、複数の要素を持つ変数はそれぞれの要素に個別に展開されます。</target>
        </trans-unit>
        <trans-unit id="701d31f2af951617e24913040bb289cccf377776" translate="yes" xml:space="preserve">
          <source>Overriding variables for a single command</source>
          <target state="translated">単一コマンドの変数をオーバーライドする</target>
        </trans-unit>
        <trans-unit id="511993d3c99719e38a6779073019dacd7178ddb9" translate="yes" xml:space="preserve">
          <source>P</source>
          <target state="translated">P</target>
        </trans-unit>
        <trans-unit id="b7cda6a843d651b6992452486c962d590a3cb164" translate="yes" xml:space="preserve">
          <source>PATH variables</source>
          <target state="translated">PATH 変数</target>
        </trans-unit>
        <trans-unit id="404b5a722c514f9f99c58c8b9832dbdc15c84e14" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal arrays, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 変数は通常の配列と同じように動作しますが、コロンで暗黙的に結合されたり分割されたりします。</target>
        </trans-unit>
        <trans-unit id="b66696987075bafb7f873ca41d609e5877999e68" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal lists, except they are are implicitly joined and split on colons.</source>
          <target state="translated">PATH 変数は通常のリストと同じように動作しますが、暗黙のうちに結合され、コロンで分割されます。</target>
        </trans-unit>
        <trans-unit id="e0aae95ec2c89c6e7884d8a51c6718b40028b727" translate="yes" xml:space="preserve">
          <source>PATH variables act as normal lists, except they are implicitly joined and split on colons.</source>
          <target state="translated">PATH 変数は、コロンで暗黙のうちに結合・分割されることを除けば、通常のリストとして機能します。</target>
        </trans-unit>
        <trans-unit id="eebe8b4d277848e1ec370986e82d2178731c6293" translate="yes" xml:space="preserve">
          <source>Page Down</source>
          <target state="translated">ページダウン</target>
        </trans-unit>
        <trans-unit id="5c77b5722c41b6f199f92efb5977aba4430b61c9" translate="yes" xml:space="preserve">
          <source>Page Up</source>
          <target state="translated">ページアップ</target>
        </trans-unit>
        <trans-unit id="fb7524411cf6310c7a2701b4eaf14a129c0d2513" translate="yes" xml:space="preserve">
          <source>Pager color variables</source>
          <target state="translated">ページャーのカラー変数</target>
        </trans-unit>
        <trans-unit id="46f46839db81e25cd2e4301ef04e9902136c3028" translate="yes" xml:space="preserve">
          <source>Parameter expansion</source>
          <target state="translated">パラメータの拡張</target>
        </trans-unit>
        <trans-unit id="6b76530ae6668a37f97a682d440c45d138de6409" translate="yes" xml:space="preserve">
          <source>Parameter expansion (Globbing)</source>
          <target state="translated">パラメータ展開(グラビング</target>
        </trans-unit>
        <trans-unit id="d1978ad07fd49427cbbdee50809caf0b5f1afd7e" translate="yes" xml:space="preserve">
          <source>Parameter expansion is limited to 524288 items. There is a limit to how many arguments the operating system allows for any command, and 524288 is far above it. This is a measure to stop the shell from hanging doing useless computation.</source>
          <target state="translated">パラメータの拡張は524288項目に制限されています。オペレーティングシステムが任意のコマンドに対して許容する引数の数には限界があり、524288はその限界をはるかに超えています。これは、シェルが無駄な計算をしてぶら下がるのを防ぐための措置です。</target>
        </trans-unit>
        <trans-unit id="0fdb3f75d27167ce5697671dbec55e14ed3744ea" translate="yes" xml:space="preserve">
          <source>Parentheses and the &lt;code&gt;-o&lt;/code&gt; and &lt;code&gt;-a&lt;/code&gt; operators can be combined to produce more complicated expressions. In this example, success is printed if there is a &lt;code&gt;/foo&lt;/code&gt; or &lt;code&gt;/bar&lt;/code&gt; file as well as a &lt;code&gt;/baz&lt;/code&gt; or &lt;code&gt;/bat&lt;/code&gt; file.</source>
          <target state="translated">括弧と &lt;code&gt;-o&lt;/code&gt; および &lt;code&gt;-a&lt;/code&gt; 演算子を組み合わせて、より複雑な式を作成できます。この例では、 &lt;code&gt;/foo&lt;/code&gt; または &lt;code&gt;/bar&lt;/code&gt; ファイルと &lt;code&gt;/baz&lt;/code&gt; または &lt;code&gt;/bat&lt;/code&gt; ファイルがある場合、成功が出力されます。</target>
        </trans-unit>
        <trans-unit id="a3a505e6684eca4bb15ce321fd252137c0869b89" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &quot;PATH&quot; (case-sensitive) become PATH variables.</source>
          <target state="translated">パス変数は、PATH、CDPATH、MANPATH、PYTHONPATH など、コロンで区切られたパスリストをサポートするために使用される特殊な変数です。PATH」で終わる(大文字と小文字を区別する)すべての変数は、PATH 変数になります。</target>
        </trans-unit>
        <trans-unit id="e0efa09d094aec052590bdd703ecb253fb17eb1e" translate="yes" xml:space="preserve">
          <source>Path variables are a special kind of variable used to support colon-delimited path lists including PATH, CDPATH, MANPATH, PYTHONPATH, etc. All variables that end in &lt;code&gt;PATH&lt;/code&gt; (case-sensitive) become PATH variables.</source>
          <target state="translated">パス変数は、PATH、CDPATH、MANPATH、PYTHONPATHを含む支持コロン区切りのパスリストに使用する変数の特殊な、などすべての変数という点で終了している &lt;code&gt;PATH&lt;/code&gt; （大文字と小文字を区別）となっPATH変数。</target>
        </trans-unit>
        <trans-unit id="2d153a802a389d1d077cca2e46097df8c50f33d8" translate="yes" xml:space="preserve">
          <source>Perform a history search when</source>
          <target state="translated">履歴検索を行うのは</target>
        </trans-unit>
        <trans-unit id="db92c54d01dcbf9ce9147cf302fcbe0e8290138e" translate="yes" xml:space="preserve">
          <source>Performs a history search when the</source>
          <target state="translated">のときに履歴検索を実行します。</target>
        </trans-unit>
        <trans-unit id="acdeb27738adfec3e214f14b0bc5ac319dee18bf" translate="yes" xml:space="preserve">
          <source>Performs a history search when the &lt;b&gt;Page Up&lt;/b&gt; key is pressed.</source>
          <target state="translated">とき履歴検索を行います&lt;b&gt;ページアップ&lt;/b&gt;キーが押されています。</target>
        </trans-unit>
        <trans-unit id="b07e355a3677aa688ad89bddfe79ee5b312d7645" translate="yes" xml:space="preserve">
          <source>Pipes and Redirections</source>
          <target state="translated">パイプとリダイレクト</target>
        </trans-unit>
        <trans-unit id="109d28af6c9d51926601f8d9e60546da74487021" translate="yes" xml:space="preserve">
          <source>Pipes usually connect file descriptor 1 (standard output) of the first process to file descriptor 0 (standard input) of the second process. It is possible to use a different output file descriptor by prepending the desired FD number and then output redirect symbol to the pipe. For example:</source>
          <target state="translated">パイプは通常、第1の処理のファイルディスクリプタ1(標準出力)と第2の処理のファイルディスクリプタ0(標準入力)を接続する。所望のFD番号を前置してパイプにリダイレクトシンボルを出力することで、異なる出力のファイルディスクリプタを使用することが可能である。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3247b493bc40b8745523a27d8c525cd0dc056fd5" translate="yes" xml:space="preserve">
          <source>Piping</source>
          <target state="translated">Piping</target>
        </trans-unit>
        <trans-unit id="36298b88737bbda60ad0697ed9af7787bf89ea37" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;cmds/source#cmd-source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">あなたがそうする必要があるかもしれませんどの手段、機能がロードされたときにそのイベントハンドラにのみ有効となりますのでご注意ください&lt;a href=&quot;cmds/source#cmd-source&quot;&gt;ソース&lt;/a&gt;またはその代わりに頼るの機能を実行する&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自動ロード&lt;/a&gt;。1つのアプローチは、それを&lt;a href=&quot;#initialization&quot;&gt;初期化ファイル&lt;/a&gt;に入れることです。</target>
        </trans-unit>
        <trans-unit id="484a02744408ea850ed69df5530d98aa375e29f4" translate="yes" xml:space="preserve">
          <source>Please note that event handlers only become active when a function is loaded, which means you might need to otherwise &lt;a href=&quot;commands#source&quot;&gt;source&lt;/a&gt; or execute a function instead of relying on &lt;a href=&quot;#syntax-function-autoloading&quot;&gt;autoloading&lt;/a&gt;. One approach is to put it into your &lt;a href=&quot;index#initialization&quot;&gt;initialization file&lt;/a&gt;.</source>
          <target state="translated">イベントハンドラーは、関数が読み込まれたときにのみアクティブになることに注意してください。つまり、&lt;a href=&quot;#syntax-function-autoloading&quot;&gt;自動&lt;/a&gt;読み込みに依存する代わりに、関数を&lt;a href=&quot;commands#source&quot;&gt;ソース&lt;/a&gt;または実行する必要がある場合があります。1つのアプローチは、それを&lt;a href=&quot;index#initialization&quot;&gt;初期化ファイル&lt;/a&gt;に入れることです。</target>
        </trans-unit>
        <trans-unit id="a11138604a9e12fab2be4d88197eda43c40a71dc" translate="yes" xml:space="preserve">
          <source>Prefixing a feature with &lt;code&gt;no-&lt;/code&gt; turns it off instead.</source>
          <target state="translated">機能の前に &lt;code&gt;no-&lt;/code&gt; を付けると、代わりにオフになります。</target>
        </trans-unit>
        <trans-unit id="0e1a82c707f23d09169b7a07b352752535b796b2" translate="yes" xml:space="preserve">
          <source>Prefixing a feature with &lt;code&gt;no-&lt;/code&gt; turns it off instead. .. _other:</source>
          <target state="translated">機能の前に &lt;code&gt;no-&lt;/code&gt; を付けると、代わりにオフになります。.. _other：</target>
        </trans-unit>
        <trans-unit id="d9da79a093b23650535a151c09a73e3fee5ee4ae" translate="yes" xml:space="preserve">
          <source>Prefixing the commandline with a space will prevent the entire line from being stored in the history.</source>
          <target state="translated">コマンドラインの先頭にスペースを付けると、その行全体が履歴に保存されないようになります。</target>
        </trans-unit>
        <trans-unit id="ae87eccf04345730f74111e3854e8d88c3f15602" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;sudo&lt;/code&gt; to the current commandline.</source>
          <target state="translated">現在のコマンドラインに &lt;code&gt;sudo&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="9839bfb9437debae035747212d941ee55c05aeb5" translate="yes" xml:space="preserve">
          <source>Prepends &lt;code&gt;sudo&lt;/code&gt; to the current commandline. If the commandline is empty, prepend &lt;code&gt;sudo&lt;/code&gt; to the last commandline.</source>
          <target state="translated">現在のコマンドラインの前に &lt;code&gt;sudo&lt;/code&gt; を追加します。コマンドラインが空の場合は、最後のコマンドラインの前に &lt;code&gt;sudo&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="ea683ad616063b7347bdddeee7203a82e1a3805b" translate="yes" xml:space="preserve">
          <source>Press</source>
          <target state="translated">Press</target>
        </trans-unit>
        <trans-unit id="fe2ed6ea3216d06709445e2c3ce6b00041d037ed" translate="yes" xml:space="preserve">
          <source>Press &lt;b&gt;Tab&lt;/b&gt;, and &lt;code&gt;fish&lt;/code&gt; will attempt to complete the command, argument, or path:</source>
          <target state="translated">押して&lt;b&gt;タブ&lt;/b&gt;、および &lt;code&gt;fish&lt;/code&gt; 、コマンド、引数、またはパスを完成しようとします。</target>
        </trans-unit>
        <trans-unit id="7ec470886283f4bfbbc71ce123f5602a60ae342e" translate="yes" xml:space="preserve">
          <source>Pressing</source>
          <target state="translated">Pressing</target>
        </trans-unit>
        <trans-unit id="09c712c74db06b262e6e04d6f0d9c7fa02c47733" translate="yes" xml:space="preserve">
          <source>Pressing &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;Enter&lt;/b&gt; instead of pressing the &lt;b&gt;Enter&lt;/b&gt; key.</source>
          <target state="translated">押すと&lt;em&gt;Altキーを&lt;/em&gt; - &lt;b&gt;入力&lt;/b&gt;を押すのではなく、&lt;b&gt;入力&lt;/b&gt;キーを。</target>
        </trans-unit>
        <trans-unit id="18a079610776709bdf0e5127ade329eadec0eaa4" translate="yes" xml:space="preserve">
          <source>Pressing the</source>
          <target state="translated">を押すと</target>
        </trans-unit>
        <trans-unit id="27bf58510d3b20325eed84381a6d30434da9e2ca" translate="yes" xml:space="preserve">
          <source>Pressing the &lt;b&gt;Enter&lt;/b&gt; key while a block of commands is unclosed, such as when one or more block commands such as &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; do not have a corresponding &lt;code&gt;end&lt;/code&gt; command.</source>
          <target state="translated">押すと&lt;b&gt;入力し&lt;/b&gt;たコマンドのブロックは、1つのまたは複数のブロックのようなコマンド時のように、閉じていないあるときにキーを &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; または &lt;code&gt;if&lt;/code&gt; 、対応する必要はありません &lt;code&gt;end&lt;/code&gt; コマンドを。</target>
        </trans-unit>
        <trans-unit id="51c1ca9c0f68b042eddbc3f8c65475d34963915f" translate="yes" xml:space="preserve">
          <source>Previous versions of fish also allowed specifying this as &lt;code&gt;^DESTINATION&lt;/code&gt;, but that made another character special so it was deprecated and will be removed in the future. See &lt;a href=&quot;#featureflags&quot;&gt;feature flags&lt;/a&gt;.</source>
          <target state="translated">以前のバージョンのfishでも、これを &lt;code&gt;^DESTINATION&lt;/code&gt; として指定できましたが、別の文字が特別なものになったため、非推奨になり、将来削除される予定です。&lt;a href=&quot;#featureflags&quot;&gt;機能フラグを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68f9e196a99ef7c54610b77d7819c1536c7dc380" translate="yes" xml:space="preserve">
          <source>Previous versions of fish also allowed spelling this as &lt;code&gt;^DESTINATION&lt;/code&gt;, but that made another character special so it was deprecated and will be removed in future.</source>
          <target state="translated">以前のバージョンのfishでも、これを &lt;code&gt;^DESTINATION&lt;/code&gt; と綴ることができましたが、別のキャラクターが特別なものになったため、非推奨になり、将来削除される予定です。</target>
        </trans-unit>
        <trans-unit id="27493f631ba000f95a572539cafcbb594a951944" translate="yes" xml:space="preserve">
          <source>Print Top and Bottom on separate lines, using an escape sequence</source>
          <target state="translated">エスケープシーケンスを使用して、上と下を別々の行に印刷する</target>
        </trans-unit>
        <trans-unit id="84c34db7a924b44d0ab81ef51631e488d755a55a" translate="yes" xml:space="preserve">
          <source>Print hello world to stdout</source>
          <target state="translated">ハローワールドを標準出力に印刷する</target>
        </trans-unit>
        <trans-unit id="ad29dcc16fea024e7e41818ab9d4740b264b782b" translate="yes" xml:space="preserve">
          <source>Prior to the addition of this builtin command in the 2.7.0 release there were two main ways to parse the arguments passed to a fish script or function. One way was to use the OS provided &lt;code&gt;getopt&lt;/code&gt; command. The problem with that is that the GNU and BSD implementations are not compatible. Which makes using that external command difficult other than in trivial situations. The other way is to iterate over &lt;code&gt;$argv&lt;/code&gt; and use the fish &lt;code&gt;switch&lt;/code&gt; statement to decide how to handle the argument. That, however, involves a huge amount of boilerplate code. It is also borderline impossible to implement the same behavior as builtin commands.</source>
          <target state="translated">2.7.0リリースでこの組み込みコマンドが追加される前は、fishスクリプトまたは関数に渡された引数を解析する方法は主に2つありました。1つの方法は、OS提供の &lt;code&gt;getopt&lt;/code&gt; コマンドを使用することでした。これの問題は、GNUとBSDの実装に互換性がないことです。これは、些細な状況以外では、その外部コマンドの使用を困難にします。もう1つの方法は、 &lt;code&gt;$argv&lt;/code&gt; を反復処理し、fish &lt;code&gt;switch&lt;/code&gt; ステートメントを使用して引数の処理方法を決定することです。ただし、これには大量の定型コードが含まれます。また、組み込みコマンドと同じ動作を実装することは不可能です。</target>
        </trans-unit>
        <trans-unit id="e14c52a6b5ed7f130784534e792abd7951342686" translate="yes" xml:space="preserve">
          <source>Private mode</source>
          <target state="translated">プライベートモード</target>
        </trans-unit>
        <trans-unit id="7d03d42c737cd08e3c616e333f7637225318bb7d" translate="yes" xml:space="preserve">
          <source>Problem solved!</source>
          <target state="translated">問題解決!</target>
        </trans-unit>
        <trans-unit id="ee9fca50a497a5601e04bc03c01cb7e46d034712" translate="yes" xml:space="preserve">
          <source>Process substitution</source>
          <target state="translated">プロセス置換</target>
        </trans-unit>
        <trans-unit id="27fee3438e0d28b1f5e56d2013e82bcf5b441945" translate="yes" xml:space="preserve">
          <source>Programmable prompt</source>
          <target state="translated">プログラム可能なプロンプト</target>
        </trans-unit>
        <trans-unit id="4eae5ed9e86eb92ca41dd75ef52fb9a0a53af761" translate="yes" xml:space="preserve">
          <source>Programmable title</source>
          <target state="translated">プログラム可能なタイトル</target>
        </trans-unit>
        <trans-unit id="a817d7eb8e0f1dab755ab5203a082e5c3c094fce" translate="yes" xml:space="preserve">
          <source>Prompt</source>
          <target state="translated">Prompt</target>
        </trans-unit>
        <trans-unit id="eea5311d723f2493a5c1450ad76e4f364fdaf4f0" translate="yes" xml:space="preserve">
          <source>Prompts</source>
          <target state="translated">Prompts</target>
        </trans-unit>
        <trans-unit id="891af452e40b1f57d6207ad00ca8f173d9425b11" translate="yes" xml:space="preserve">
          <source>Put &lt;code&gt;bind&lt;/code&gt; statements into &lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt; or a function called &lt;code&gt;fish_user_key_bindings&lt;/code&gt;.</source>
          <target state="translated">入れ &lt;code&gt;bind&lt;/code&gt; に文を&lt;a href=&quot;#initialization&quot;&gt;config.fish&lt;/a&gt;または呼び出される関数 &lt;code&gt;fish_user_key_bindings&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0495187c978ea883d19171649639e1c756060adb" translate="yes" xml:space="preserve">
          <source>Quick answer:</source>
          <target state="translated">即答で。</target>
        </trans-unit>
        <trans-unit id="7b0257ce75add65485cb879a8ababbebc2270b68" translate="yes" xml:space="preserve">
          <source>Quotes</source>
          <target state="translated">Quotes</target>
        </trans-unit>
        <trans-unit id="19e3869f24dda01e67d9a925748b4ce101c6820b" translate="yes" xml:space="preserve">
          <source>Quotes are followed across newlines.</source>
          <target state="translated">引用符は改行を挟んで続きます。</target>
        </trans-unit>
        <trans-unit id="60fefb29eda0237f92306cb85899330ca8b230ee" translate="yes" xml:space="preserve">
          <source>Quoting</source>
          <target state="translated">Quoting</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="a5ab0c393626e6b25924176a035ebd63722dc7ec" translate="yes" xml:space="preserve">
          <source>Range expansion will go in reverse if the end element is earlier in the list than the start and forward if the end is later than the start, unless exactly one of the given indices is negative. This is to enable clamping without changing direction if the list has fewer elements than expected.</source>
          <target state="translated">範囲の拡張は、与えられたインデックスのうちの1つがまさに負の値でない限り、リストの最後の要素が開始よりも前にある場合は逆に進み、最後の要素が開始よりも後にある場合は順に進みます。これは、リストの要素数が予想よりも少ない場合に、方向を変えずにクランプできるようにするためです。</target>
        </trans-unit>
        <trans-unit id="b16d80967d06f9706108437bd28e6a8d5175e9a0" translate="yes" xml:space="preserve">
          <source>Reading from or appending to a non existing file.</source>
          <target state="translated">既存のファイルではないファイルから読み込んだり、既存のファイルに追加したりします。</target>
        </trans-unit>
        <trans-unit id="3e22373b8f4786a11fc3f5247c24bd1cd140127f" translate="yes" xml:space="preserve">
          <source>Ready for more?</source>
          <target state="translated">準備はできていますか?</target>
        </trans-unit>
        <trans-unit id="ab140354a34bd045ff52d42f722acc1c4ffada22" translate="yes" xml:space="preserve">
          <source>Regular Expressions</source>
          <target state="translated">正規表現</target>
        </trans-unit>
        <trans-unit id="cd5af7344f50420161f8f096f94794e6fe1580c6" translate="yes" xml:space="preserve">
          <source>Release notes</source>
          <target state="translated">リリースノート</target>
        </trans-unit>
        <trans-unit id="5c8c7c6ececfc7a4858b06b4968629df633fe974" translate="yes" xml:space="preserve">
          <source>Renames an existing abbreviation from &lt;code&gt;gco&lt;/code&gt; to &lt;code&gt;gch&lt;/code&gt;.</source>
          <target state="translated">既存の略語の &lt;code&gt;gch&lt;/code&gt; を &lt;code&gt;gco&lt;/code&gt; からgchに変更します。</target>
        </trans-unit>
        <trans-unit id="4dc79b3cd9563c59f1fd2d978861f14b1270090f" translate="yes" xml:space="preserve">
          <source>Repeat Examples</source>
          <target state="translated">リピート例</target>
        </trans-unit>
        <trans-unit id="a879640933d6c8936ca4cc6a02a55f8cc4408041" translate="yes" xml:space="preserve">
          <source>Replace Literal Examples</source>
          <target state="translated">リテラルの例を置き換える</target>
        </trans-unit>
        <trans-unit id="13b05ad41dc01c7c29077cca05d8339a7a6429b9" translate="yes" xml:space="preserve">
          <source>Replace Regex Examples</source>
          <target state="translated">正規表現の例を置き換える</target>
        </trans-unit>
        <trans-unit id="4c85d59c181a8bdfec393789d72d1942cf54846f" translate="yes" xml:space="preserve">
          <source>Return Values</source>
          <target state="translated">戻り値</target>
        </trans-unit>
        <trans-unit id="27ca7249b11e61ac7f3b63efe842130af63f97b8" translate="yes" xml:space="preserve">
          <source>Run the following command in fish:</source>
          <target state="translated">fishで以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="247f6e4943c76c92b5c6c8d51b7623da37673dc0" translate="yes" xml:space="preserve">
          <source>Run:</source>
          <target state="translated">Run:</target>
        </trans-unit>
        <trans-unit id="ddd9c246e03e2789458ae8bb429c9d694195cb17" translate="yes" xml:space="preserve">
          <source>Running Commands</source>
          <target state="translated">実行中のコマンド</target>
        </trans-unit>
        <trans-unit id="5c5cc33a225b06807a45544c8793a5276a15976d" translate="yes" xml:space="preserve">
          <source>Running multiple programs</source>
          <target state="translated">複数のプログラムを実行する</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="b6ee539e25ba9fe37112f3eead73eaed680c02a5" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;../index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example,</source>
          <target state="translated">SEQUENCEは、バインドする文字シーケンスです。これらは、&lt;a href=&quot;../index#escapes&quot;&gt;魚のエスケープシーケンス&lt;/a&gt;として記述する必要があります。たとえば、Altキーを押すと別の文字がその文字の前にエスケープ文字を送信するため、Altベースのキーバインディングは &lt;code&gt;\e&lt;/code&gt; エスケープを使用して記述できます。例えば、</target>
        </trans-unit>
        <trans-unit id="b3fe37f1b337c360725965146e94ffa93a9708da" translate="yes" xml:space="preserve">
          <source>SEQUENCE is the character sequence to bind to. These should be written as &lt;a href=&quot;index#escapes&quot;&gt;fish escape sequences&lt;/a&gt;. For example, because pressing the Alt key and another character sends that character prefixed with an escape character, Alt-based key bindings can be written using the &lt;code&gt;\e&lt;/code&gt; escape. For example, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;w&lt;/b&gt; can be written as &lt;code&gt;\ew&lt;/code&gt;. The control character can be written in much the same way using the &lt;code&gt;\c&lt;/code&gt; escape, for example &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;X&lt;/b&gt; (^X) can be written as &lt;code&gt;\cx&lt;/code&gt;. Note that Alt-based key bindings are case sensitive and Control-based key bindings are not. This is a constraint of text-based terminals, not &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">SEQUENCEは、バインドする文字シーケンスです。これらは&lt;a href=&quot;index#escapes&quot;&gt;魚のエスケープシーケンス&lt;/a&gt;として記述する必要があります。たとえば、Altキーを押して別の文字を押すと、その文字の前にエスケープ文字が送信されるため、Altベースのキーバインディングは &lt;code&gt;\e&lt;/code&gt; エスケープを使用して記述できます。たとえば、&lt;em&gt;Alt&lt;/em&gt; - &lt;b&gt;w&lt;/b&gt;は &lt;code&gt;\ew&lt;/code&gt; と書くことができます。制御文字は、 &lt;code&gt;\c&lt;/code&gt; エスケープを使用してほぼ同じ方法で記述できます。たとえば、&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;X&lt;/b&gt;（^ X）は &lt;code&gt;\cx&lt;/code&gt; として記述できます。Altベースのキーバインディングでは大文字と小文字が区別され、Controlベースのキーバインディングでは区別されないことに注意してください。これは &lt;code&gt;fish&lt;/code&gt; ではなくテキストベースの端末の制約です。</target>
        </trans-unit>
        <trans-unit id="769ee8ba6c10d0fc5cc5d5931ff5950b069f7631" translate="yes" xml:space="preserve">
          <source>STRING arguments are taken from the command line unless standard input is connected to a pipe or a file, in which case they are read from standard input, one STRING per line. It is an error to supply STRING arguments on the command line and on standard input.</source>
          <target state="translated">標準入力がパイプやファイルに接続されていない限り、STRING引数はコマンドラインから取り出されます。コマンドラインと標準入力でSTRING引数を指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="4e1a6674d38590faffffeb4695d9d452b5339baa" translate="yes" xml:space="preserve">
          <source>Same as</source>
          <target state="translated">同上</target>
        </trans-unit>
        <trans-unit id="3e9759d5f8593842e337c74b9202035585d520b2" translate="yes" xml:space="preserve">
          <source>Same as above but with a second flag that requires a value:</source>
          <target state="translated">上記と同じですが、値を必要とする2番目のフラグがあります。</target>
        </trans-unit>
        <trans-unit id="d562a361adfcc4bd04396673622d38c2c23c4a3b" translate="yes" xml:space="preserve">
          <source>Same as above but with a third flag that can be given multiple times saving the value of each instance seen and only the long flag name (&lt;code&gt;--token&lt;/code&gt;) can be used:</source>
          <target state="translated">上記と同じですが、3番目のフラグを複数回指定して、表示される各インスタンスの値を保存し、長いフラグ名（ &lt;code&gt;--token&lt;/code&gt; ）のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="c902e77d44ee1a72851bdd66a8039b7289e5469e" translate="yes" xml:space="preserve">
          <source>Say $animal contains the name of an animal. Then this code would classify it:</source>
          <target state="translated">animal に動物の名前が含まれているとします。そうすると、このコードはそれを分類します。</target>
        </trans-unit>
        <trans-unit id="bb8db2460eda9933a6f87adda85e236a41134192" translate="yes" xml:space="preserve">
          <source>Say you want to modify your prompt.</source>
          <target state="translated">プロンプトを変更したいとします。</target>
        </trans-unit>
        <trans-unit id="51d54c1089bcba444eef6cef409cdf1c2eb4307c" translate="yes" xml:space="preserve">
          <source>Searchable command history</source>
          <target state="translated">検索可能なコマンド履歴</target>
        </trans-unit>
        <trans-unit id="2e406da000ac4099abeb149121071ece020d3907" translate="yes" xml:space="preserve">
          <source>Searchable history</source>
          <target state="translated">検索可能な履歴</target>
        </trans-unit>
        <trans-unit id="2b36d3f6cf281f2c73783b0cc5596b490e2def69" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fish_for_bash_users#fish-for-bash-users&quot;&gt;Fish for bash users&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;fish_for_bash_users#fish-for-bash-users&quot;&gt;bashユーザー&lt;/a&gt;についてはFishを参照してください</target>
        </trans-unit>
        <trans-unit id="b445d35ecc1c55f9e1ceba18d794fb79d964e899" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;index#editor&quot;&gt;documentation&lt;/a&gt; for more details about line editing in fish.</source>
          <target state="translated">魚のライン編集の詳細については、&lt;a href=&quot;index#editor&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="67373bb92cd7ecbf243edb9d60ad6f00f86a6052" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="49221a7350c523a8e1009128e69d530a8c75a22a" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt; to print the stack and &lt;code&gt;dirs -c&lt;/code&gt; to clear it.</source>
          <target state="translated">スタックを印刷するには&lt;a href=&quot;dirs#cmd-dirs&quot;&gt;dirs&lt;/a&gt;を、クリアするには &lt;code&gt;dirs -c&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="77543101f6f627a4f89275ca4aa34557b8a135ef" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;, which will call all supported version control prompt functions, including git, Mercurial and Subversion.</source>
          <target state="translated">&lt;a href=&quot;fish_vcs_prompt#cmd-fish-vcs-prompt&quot;&gt;fish_vcs_prompt&lt;/a&gt;も参照してください。これは、git、Mercurial、Subversionなど、サポートされているすべてのバージョン管理プロンプト関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="67035298680ddb09dd248da78e915fd9c9627f01" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;dirs&lt;/code&gt; and &lt;code&gt;dirs -c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dirs&lt;/code&gt; および &lt;code&gt;dirs -c&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="1a3b31765df862a7d9c4531c872152ad402c53f3" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;read --delimiter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read --delimiter&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="5324b1f4d638d16895e396283d6222620e56d716" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">最近アクセスしたディレクトリに変更するには、&lt;a href=&quot;cdh#cmd-cdh&quot;&gt;cdh&lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="7238893c67063d93ae05263dd71a5ccfc50d90c7" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#cdh&quot;&gt;&lt;code&gt;cdh&lt;/code&gt;&lt;/a&gt; command for changing to a recently visited directory.</source>
          <target state="translated">最近アクセスしたディレクトリに変更するには、&lt;a href=&quot;commands#cdh&quot;&gt; &lt;code&gt;cdh&lt;/code&gt; &lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="01cfa9314baef15cf1a7d7383228c6d181370cb2" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;commands#prevd&quot;&gt;&lt;code&gt;prevd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#pushd&quot;&gt;&lt;code&gt;pushd&lt;/code&gt;&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">最近の &lt;code&gt;cd&lt;/code&gt; 履歴でも機能し、他のシェルとの互換性のために提供されている&lt;a href=&quot;commands#prevd&quot;&gt; &lt;code&gt;prevd&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#pushd&quot;&gt; &lt;code&gt;pushd&lt;/code&gt; &lt;/a&gt;コマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="a276f1ec5f60e2df52ed4c479379eca5a14e0acb" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt; and &lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushd&lt;/a&gt; commands which also work with the recent &lt;code&gt;cd&lt;/code&gt; history and are provided for compatibility with other shells.</source>
          <target state="translated">参照してください&lt;a href=&quot;prevd#cmd-prevd&quot;&gt;prevd&lt;/a&gt;と&lt;a href=&quot;pushd#cmd-pushd&quot;&gt;pushdは&lt;/a&gt;また、最近で動作するコマンド &lt;code&gt;cd&lt;/code&gt; 歴史や他のシェルとの互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="a54c40ece878eeac53f5bdaa4674e3e9022a5158" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;--delimiter&lt;/code&gt; option of the &lt;a href=&quot;read#cmd-read&quot;&gt;read&lt;/a&gt; command.</source>
          <target state="translated">&lt;a href=&quot;read#cmd-read&quot;&gt;read&lt;/a&gt;コマンドの &lt;code&gt;--delimiter&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="c59959e6168e702c87aad6497074fc87974da46d" translate="yes" xml:space="preserve">
          <source>See the &quot;Internals&quot; section for more on them.</source>
          <target state="translated">それらについては、「内部」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c6e5f5869c0d557646211d7b722a3358667dc217" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;#fish-opt&quot;&gt;&lt;code&gt;fish_opt&lt;/code&gt;&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">オプションの仕様を作成するための、より&lt;a href=&quot;#fish-opt&quot;&gt; &lt;code&gt;fish_opt&lt;/code&gt; &lt;/a&gt;詳細な方法については、fish_optコマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="762e36367184253ec997bd0b9511dad76a9722aa" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt; command for other manipulations.</source>
          <target state="translated">その他の操作については、&lt;a href=&quot;cmds/history#cmd-history&quot;&gt;history&lt;/a&gt;コマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="c014ad7ef4dcc4632ad4cb9226ca38ced50624d9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;fish_opt&lt;/a&gt; command for a friendlier but more verbose way to create option specifications.</source>
          <target state="translated">オプション仕様を作成するためのより&lt;a href=&quot;fish_opt#cmd-fish-opt&quot;&gt;わかり&lt;/a&gt;やすいがより冗長な方法については、fish_optコマンドを参照してください。</target>
        </trans-unit>
        <trans-unit id="f689ba7f1bf5e057a3d971021477d48085ed9ad9" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically, and &lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$fish_function_path&lt;/a&gt; to control their location.</source>
          <target state="translated">これらのファイルを自動的に作成する方法については&lt;a href=&quot;cmds/funced#cmd-funced&quot;&gt;funced&lt;/a&gt;と&lt;a href=&quot;cmds/funcsave#cmd-funcsave&quot;&gt;funcsaveの&lt;/a&gt;ドキュメントを、ファイルの場所を制御する方法については&lt;a href=&quot;index#syntax-function-autoloading&quot;&gt;$ fish_function_path&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d34ee1f18350527bff51e963b54e3ce46a24e48" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;cmds/test#cmd-test&quot;&gt;test&lt;/a&gt; and &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;cmds/test#cmd-test&quot;&gt;テスト&lt;/a&gt;および&lt;a href=&quot;cmds/if#cmd-if&quot;&gt;ifの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ac7646fb3e869bb56303fbe3fca839b0d38f1d8" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt; and &lt;a href=&quot;commands#funcsave&quot;&gt;funcsave&lt;/a&gt; for ways to create these files automatically.</source>
          <target state="translated">これらのファイルを自動的に作成する方法については、&lt;a href=&quot;commands#funced&quot;&gt;funced&lt;/a&gt;および&lt;a href=&quot;commands#funcsave&quot;&gt;funcsaveの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="bb216107606bc95b848f93fc29c67e8fe68c93ea" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;a href=&quot;commands#test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;commands#test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9299a43e63898a7efcae7a83cc40f247242085fc" translate="yes" xml:space="preserve">
          <source>See the documentation for &lt;code&gt;set&lt;/code&gt; for more details on the scoping rules for variables.</source>
          <target state="translated">変数のスコープ規則の詳細については、 &lt;code&gt;set&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f325a391b2afa8d45fd9b05b9b133df7d497fc47" translate="yes" xml:space="preserve">
          <source>Separating Commands (Semicolon)</source>
          <target state="translated">コマンドの区切り(セミコロン</target>
        </trans-unit>
        <trans-unit id="0ffd1469dee865172080d29fd56f5825f24fc441" translate="yes" xml:space="preserve">
          <source>Sequences of elements can be written with the range operator '&lt;code&gt;..&lt;/code&gt;'. A range '&lt;code&gt;a..b&lt;/code&gt;' ('a' and 'b' being integers) is expanded into a sequence of indices '&lt;code&gt;a a+1 a+2 ... b&lt;/code&gt;' or '&lt;code&gt;a a-1 a-2 ... b&lt;/code&gt;' depending on which of 'a' or 'b' is higher. Negative range limits are calculated from the end of the list. If an index is too large or small it's silently clamped to one or the size of the list as appropriate.</source>
          <target state="translated">要素のシーケンスは、範囲演算子 ' &lt;code&gt;..&lt;/code&gt; 'を使用して記述できます。範囲 ' &lt;code&gt;a..b&lt;/code&gt; '（ 'a'および 'b'は整数）は、インデックス ' &lt;code&gt;a a+1 a+2 ... b&lt;/code&gt; 'または ' &lt;code&gt;a a-1 a-2 ... b&lt;/code&gt; シーケンスに展開されます。 。b'a 'または' b 'のどちらが高いかによって異なります。負の範囲制限は、リストの最後から計算されます。インデックスが大きすぎるか小さすぎる場合は、必要に応じてリストの1つまたはサイズにサイレントにクランプされます。</target>
        </trans-unit>
        <trans-unit id="024cdc89776fc67afc34af4659ea1d4b7b50ced1" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;$IFS&lt;/code&gt; to empty will disable line splitting. This is deprecated, use &lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;string split&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;$IFS&lt;/code&gt; を空に設定すると、行分割が無効になります。これは非推奨です。代わりに&lt;a href=&quot;cmds/string#cmd-string-split&quot;&gt;文字列分割を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="cafea76301da663d6e72c8dd0182bf1a08fe0c7b" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides.</source>
          <target state="translated">背景色の設定は、その後に書かれた文字にのみ影響します。Fishは端末のウィンドウ全体の背景色を設定する方法を提供していません。ウィンドウの背景色(およびその不透明度などの他の属性)を設定するには、端末が提供するメカニズムを使って行う必要があります。</target>
        </trans-unit>
        <trans-unit id="b7ac25be64a83552cee11d2c2c101281899b7d94" translate="yes" xml:space="preserve">
          <source>Setting the background color only affects subsequently written characters. Fish provides no way to set the background color for the entire terminal window. Configuring the window background color (and other attributes such as its opacity) has to be done using whatever mechanisms the terminal provides. Look for a config option.</source>
          <target state="translated">背景色の設定は、その後に書かれた文字にのみ影響します。Fishは端末のウィンドウ全体の背景色を設定する方法を提供していません。ウィンドウの背景色(および不透明度などの他の属性)を設定するには、ターミナルが提供するメカニズムを使って行う必要があります。設定オプションを探してください。</target>
        </trans-unit>
        <trans-unit id="f4c7b58dd2bcf51fca3690de5c68c9e1a134f91d" translate="yes" xml:space="preserve">
          <source>Several commands are provided to interact with this directory history:</source>
          <target state="translated">このディレクトリの履歴を操作するために、いくつかのコマンドが用意されています。</target>
        </trans-unit>
        <trans-unit id="0c0750f1643a764b440d30cec12896d4e2f3c4f4" translate="yes" xml:space="preserve">
          <source>Shared bindings</source>
          <target state="translated">共有バインディング</target>
        </trans-unit>
        <trans-unit id="02a6cc27a3e125fbed4ff93ba00ddc32ff248036" translate="yes" xml:space="preserve">
          <source>Shebang Line</source>
          <target state="translated">シェーバンライン</target>
        </trans-unit>
        <trans-unit id="61e5ec8aae4e834701135d3867ab63125d131c5e" translate="yes" xml:space="preserve">
          <source>Shell variable and function names</source>
          <target state="translated">シェルの変数名と関数名</target>
        </trans-unit>
        <trans-unit id="d32397da27c98186753b21a057b7b69d1b40c8e1" translate="yes" xml:space="preserve">
          <source>Shell variable names.</source>
          <target state="translated">シェルの変数名。</target>
        </trans-unit>
        <trans-unit id="e91aede6defa8d430f67e550004d49863d3e2e5b" translate="yes" xml:space="preserve">
          <source>Shell variables</source>
          <target state="translated">シェル変数</target>
        </trans-unit>
        <trans-unit id="0f86f7ae2195716edf4d3ac75b6ae230d7060ba1" translate="yes" xml:space="preserve">
          <source>Shell variables are named pieces of data, which can be created, deleted and their values changed and used by the user. Variables may optionally be &quot;exported&quot;, so that a copy of the variable is available to any subprocesses the shell creates. An exported variable is referred to as an &quot;environment variable&quot;.</source>
          <target state="translated">シェル変数は、名前のついたデータの断片で、作成、削除、値の変更が可能で、ユーザが使用することができます。変数はオプションで「エクスポート」することができ、シェルが作成するどのサブプロセスでも変数のコピーを利用できるようにします。エクスポートされた変数は「環境変数」と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="9ba5016166d5ba5cee4a99a1b1e6e1f5fe3f8efe" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same basic syntax.</source>
          <target state="translated">魚のような貝殻は、それらにコマンドを与えることによって使用されます。すべての &lt;code&gt;fish&lt;/code&gt; コマンドは、同じ基本構文に従います。</target>
        </trans-unit>
        <trans-unit id="e122d1fcfbe4d2952329855d2c90efb389777230" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every &lt;code&gt;fish&lt;/code&gt; command follows the same simple syntax.</source>
          <target state="translated">魚のような貝はそれらにコマンドを与えることによって使用されます。すべての &lt;code&gt;fish&lt;/code&gt; コマンドは、同じ単純な構文に従います。</target>
        </trans-unit>
        <trans-unit id="c7dc92c664fcb0cec1505db87af17f46c261058f" translate="yes" xml:space="preserve">
          <source>Shells like fish are used by giving them commands. Every fish command follows the same basic syntax. A command is executed by writing the name of the command followed by any arguments. For example:</source>
          <target state="translated">fishのようなシェルは、コマンドを与えて使用します。すべてのfishコマンドは、同じ基本的な構文に従っています。コマンドを実行するには、コマンドの名前の後に引数を書きます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="469d5b183fdc0d59e41a51e61529cdd95274ba7c" translate="yes" xml:space="preserve">
          <source>Shift</source>
          <target state="translated">Shift</target>
        </trans-unit>
        <trans-unit id="c89673d426f813c79fba3be3ad53403494aea9ae" translate="yes" xml:space="preserve">
          <source>Shift, Tab</source>
          <target state="translated">シフト、タブ</target>
        </trans-unit>
        <trans-unit id="f44347ef7035824e74312bda85a5c1f33acab5d3" translate="yes" xml:space="preserve">
          <source>Shift,&amp;larr;,Left</source>
          <target state="translated">Shift,&amp;larr;,Left</target>
        </trans-unit>
        <trans-unit id="389f8e25d83e1e1c83d311028f205dfb3a8af791" translate="yes" xml:space="preserve">
          <source>Shift,&amp;rarr;,Right</source>
          <target state="translated">Shift,&amp;rarr;,Right</target>
        </trans-unit>
        <trans-unit id="794fe0e411bbf424857358cfb3699f0985ef9bee" translate="yes" xml:space="preserve">
          <source>Shift,A</source>
          <target state="translated">Shift,A</target>
        </trans-unit>
        <trans-unit id="a4f7b08e9c36efe6a08eae925c49ef2f720086e4" translate="yes" xml:space="preserve">
          <source>Shift,D</source>
          <target state="translated">Shift,D</target>
        </trans-unit>
        <trans-unit id="42414c807cd9c1ab64d204f7113345e9c5f0a85a" translate="yes" xml:space="preserve">
          <source>Short options, like '&lt;code&gt;-a&lt;/code&gt;'. Short options are a single character long, are preceded by a single hyphen and may be grouped together (like '&lt;code&gt;-la&lt;/code&gt;', which is equivalent to '&lt;code&gt;-l -a&lt;/code&gt;'). Option arguments may be specified in the following parameter ('&lt;code&gt;-w 32&lt;/code&gt;') or by appending the option with the value ('&lt;code&gt;-w32&lt;/code&gt;').</source>
          <target state="translated">' &lt;code&gt;-a&lt;/code&gt; 'のような短いオプション。短いオプションは1文字の長さで、前に1つのハイフンがあり、一緒にグループ化できます（ ' &lt;code&gt;-la&lt;/code&gt; 'は ' &lt;code&gt;-l -a&lt;/code&gt; ' と同じです）。オプションの引数は、次のパラメーター（ ' &lt;code&gt;-w 32&lt;/code&gt; '）で指定するか、オプションに値（ ' &lt;code&gt;-w32&lt;/code&gt; '）を追加することで指定できます。</target>
        </trans-unit>
        <trans-unit id="b826892dea52d149aa790eeb614ebf8c6f5012a3" translate="yes" xml:space="preserve">
          <source>Short options, like &lt;code&gt;-a&lt;/code&gt;. Short options are a single character long, are preceded by a single hyphen and can be grouped together (like &lt;code&gt;-la&lt;/code&gt;, which is equivalent to &lt;code&gt;-l -a&lt;/code&gt;). Option arguments may be specified in the following parameter (&lt;code&gt;-w 32&lt;/code&gt;) or by appending the option with the value (&lt;code&gt;-w32&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; などの短いオプション。短いオプションは1文字の長さで、前に1つのハイフンが付き、グループ化できます（ &lt;code&gt;-la&lt;/code&gt; 、 &lt;code&gt;-l -a&lt;/code&gt; と同等）。オプション引数は、次のパラメーター（ &lt;code&gt;-w 32&lt;/code&gt; ）で指定するか、オプションに値（ &lt;code&gt;-w32&lt;/code&gt; ）を追加することで指定できます。</target>
        </trans-unit>
        <trans-unit id="214c488d368da8c81796e48eb7f6963ef7a93bff" translate="yes" xml:space="preserve">
          <source>Should you wish to uninstall fish, first ensure fish is not set as your shell. Run &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; if you are not sure.</source>
          <target state="translated">魚をアンインストールする場合は、まず魚がシェルとして設定されていないことを確認してください。不明な場合は、 &lt;code&gt;chsh -s /bin/bash&lt;/code&gt; 実行します。</target>
        </trans-unit>
        <trans-unit id="aa028fe987fcdcfafee00c72a67c8ab786ef2286" translate="yes" xml:space="preserve">
          <source>Show all completions for &lt;code&gt;git&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; のすべての完了を表示します。</target>
        </trans-unit>
        <trans-unit id="d5a22b01fc547f4aefabc8c7a496313159dfc74d" translate="yes" xml:space="preserve">
          <source>Signal names are case insensitive and the &lt;code&gt;SIG&lt;/code&gt; prefix is optional.</source>
          <target state="translated">信号名では大文字と小文字が区別されず、 &lt;code&gt;SIG&lt;/code&gt; プレフィックスはオプションです。</target>
        </trans-unit>
        <trans-unit id="2339b49e18e4fa7fa63c25097d1c3cb05b3abf7a" translate="yes" xml:space="preserve">
          <source>Similar to bash, fish has Emacs and Vi editing modes. The default editing mode is Emacs. You can switch to Vi mode with &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; and switch back with &lt;code&gt;fish_default_key_bindings&lt;/code&gt;. You can also make your own key bindings by creating a function and setting $fish_key_bindings to its name. For example:</source>
          <target state="translated">bashと同様に、fishにはEmacsおよびVi編集モードがあります。デフォルトの編集モードはEmacsです。あなたはとViのモードに切り替えることができ &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; と、スイッチバック &lt;code&gt;fish_default_key_bindings&lt;/code&gt; 。関数を作成して$ fish_key_bindingsをその名前に設定することにより、独自のキーバインディングを作成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="841cba81f949103d830192d933a434ce626dfca6" translate="yes" xml:space="preserve">
          <source>Since fish 3.1 you can set an environment variable for just one command using the &lt;code&gt;key=value some command&lt;/code&gt; syntax, like in other shells. The two lines below behave identically - unlike other shells, fish will output &lt;code&gt;value&lt;/code&gt; both times:</source>
          <target state="translated">fish 3.1以降、他のシェルと同様に、 &lt;code&gt;key=value some command&lt;/code&gt; 構文を使用して、1つのコマンドに環境変数を設定できます。以下の2行は同じように動作します。他のシェルとは異なり、魚は両方の時間で &lt;code&gt;value&lt;/code&gt; を出力します。</target>
        </trans-unit>
        <trans-unit id="7ae81f7020b13f6dbc6ef9ce845da695c08f53b8" translate="yes" xml:space="preserve">
          <source>Since scripts for shell commands can be written in many different languages, they need to carry information about what interpreter is needed to execute them: For this they are expected to have a first line, the shebang line, which names an executable for this purpose:</source>
          <target state="translated">シェルコマンドのスクリプトは多くの異なる言語で書かれているので、それらを実行するためにはどのインタプリタが必要かという情報を伝える必要があります。そのためには、最初の行である shebang 行を持つことが期待されており、この行にはこの目的のための実行ファイルの名前が付けられています。</target>
        </trans-unit>
        <trans-unit id="6591aa81ebfefa7f2a81cf6a8ddd00202ee95252" translate="yes" xml:space="preserve">
          <source>Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">一重引用符は二重引用符の中では特別な意味を持ちませんし、その逆もまた然りです。</target>
        </trans-unit>
        <trans-unit id="39e5d1ac7ee2c4dbadd618ffa494ac83d1493abc" translate="yes" xml:space="preserve">
          <source>So you set a variable with &lt;code&gt;set&lt;/code&gt;, and use it with a &lt;code&gt;$&lt;/code&gt; and the name.</source>
          <target state="translated">したがって、 &lt;code&gt;set&lt;/code&gt; を使用して変数を設定し、それを &lt;code&gt;$&lt;/code&gt; と名前とともに使用します。</target>
        </trans-unit>
        <trans-unit id="14b8aecd3aaaa33e35d9724dfec4e61ddcb14189" translate="yes" xml:space="preserve">
          <source>So:</source>
          <target state="translated">So:</target>
        </trans-unit>
        <trans-unit id="530fce1c2ad1ce0277a5df96933c6fbf422dc856" translate="yes" xml:space="preserve">
          <source>Some OPTION_SPEC examples:</source>
          <target state="translated">いくつかのOPTION_SPECの例。</target>
        </trans-unit>
        <trans-unit id="30df5e6aa8dc13e79598637f63555c5942642d5c" translate="yes" xml:space="preserve">
          <source>Some bash variables and their closest fish equivalent:</source>
          <target state="translated">いくつかのbashの変数と、それに最も近い魚の変数。</target>
        </trans-unit>
        <trans-unit id="4d6baccd4c71912ba57043465594b0cf17749be7" translate="yes" xml:space="preserve">
          <source>Some bindings are shared between emacs- and vi-mode because they aren't text editing bindings or because what Vi/Vim does for a particular key doesn't make sense for a shell.</source>
          <target state="translated">いくつかのバインディングは emacs-と vi-mode の間で共有されていますが、これはテキスト編集用のバインディングではないため、あるいは Vi/Vim が特定のキーに対して行うことがシェルでは意味をなさないためです。</target>
        </trans-unit>
        <trans-unit id="425593164f34a70e7fd63371baa3a373bc2ecb38" translate="yes" xml:space="preserve">
          <source>Some characters can not be written directly on the command line. For these characters, so called escape sequences are provided. These are:</source>
          <target state="translated">コマンドラインに直接書き込めない文字があります。これらの文字には、いわゆるエスケープシーケンスが用意されています。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6e896b61b585149013fb98cf0696e1c05f9594f2" translate="yes" xml:space="preserve">
          <source>Some characters cannot be written directly on the command line. For these characters, so-called escape sequences are provided. These are:</source>
          <target state="translated">コマンドラインに直接書くことができない文字があります。このような文字には、いわゆるエスケープシーケンスが用意されています。これらは</target>
        </trans-unit>
        <trans-unit id="f32cca7a190f9346b166b71a80738e3921998ba9" translate="yes" xml:space="preserve">
          <source>Some characters have special meaning to the shell. For example, an apostrophe &lt;code&gt;'&lt;/code&gt; disables expansion (see &lt;a href=&quot;#quotes&quot;&gt;Quotes&lt;/a&gt;). To tell the shell to treat these characters literally, escape them with a backslash. For example, the command:</source>
          <target state="translated">一部の文字は、シェルにとって特別な意味を持っています。たとえば、アポストロフィ &lt;code&gt;'&lt;/code&gt; は拡張を無効にします（&lt;a href=&quot;#quotes&quot;&gt;引用符を&lt;/a&gt;参照）。これらの文字を文字通り処理するようにシェルに指示するには、バックスラッシュでそれらをエスケープします。たとえば、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="a528e343afc3809db9c1142fa89d7ee4b8aa846e" translate="yes" xml:space="preserve">
          <source>Some colors for status symbols:</source>
          <target state="translated">ステータスシンボルには一部色を使用しています。</target>
        </trans-unit>
        <trans-unit id="6dd3509b210643ba6eefaffcdf24924a6a2790a7" translate="yes" xml:space="preserve">
          <source>Some common words</source>
          <target state="translated">いくつかの一般的な単語</target>
        </trans-unit>
        <trans-unit id="01706013cfdbcb0fc543d3c97784f3f4c235d630" translate="yes" xml:space="preserve">
          <source>Some examples:</source>
          <target state="translated">いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="9a67d5493118a559656027def8dc4fcd0cc3974f" translate="yes" xml:space="preserve">
          <source>Some features include repetitions:</source>
          <target state="translated">一部の機能にはリピートが含まれています。</target>
        </trans-unit>
        <trans-unit id="4ded8c2bc928f23aa366efb17837e70948b9a888" translate="yes" xml:space="preserve">
          <source>Some of the special features of fish are:</source>
          <target state="translated">魚の特徴としては、いくつかあります。</target>
        </trans-unit>
        <trans-unit id="d39624c87b3e78e02ed8dde71f696712e0710389" translate="yes" xml:space="preserve">
          <source>Some shells (e.g., ksh, bash) feature a syntax that is a mix between command substitution and piping, called process substitution. It is used to send the output of a command into the calling command, much like command substitution, but with the difference that the output is not sent through commandline arguments but through a named pipe, with the filename of the named pipe sent as an argument to the calling program. &lt;code&gt;psub&lt;/code&gt; combined with a regular command substitution provides the same functionality.</source>
          <target state="translated">一部のシェル（ksh、bashなど）には、コマンド置換とパイプ処理を組み合わせた構文（プロセス置換と呼ばれる）があります。これは、コマンド置換のように、コマンドの出力を呼び出しコマンドに送信するために使用されますが、出力はコマンドライン引数ではなく、名前付きパイプを通じて送信され、名前付きパイプのファイル名が引数として送信されます。呼び出しプログラムに。通常のコマンド置換と組み合わせた &lt;code&gt;psub&lt;/code&gt; は、同じ機能を提供します。</target>
        </trans-unit>
        <trans-unit id="28861f1ca2bfa4eb42bfb98ba18be09e02df8f97" translate="yes" xml:space="preserve">
          <source>Some terminals use the &lt;code&gt;--bold&lt;/code&gt; escape sequence to switch to a brighter color set rather than increasing the weight of text.</source>
          <target state="translated">一部の端末では、-- &lt;code&gt;--bold&lt;/code&gt; エスケープシーケンスを使用して、テキストの重みを増やすのではなく、明るい色のセットに切り替えます。</target>
        </trans-unit>
        <trans-unit id="81e4919181b85ff99cd6f65bd27d07c5ffe80e11" translate="yes" xml:space="preserve">
          <source>Some variables are only used in some modes, like when informative status is enabled:</source>
          <target state="translated">いくつかの変数は、情報提供ステータスが有効になっているときのように、いくつかのモードでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="c4dd50f777b9a845d16edeb5ac29fc4998e7e176" translate="yes" xml:space="preserve">
          <source>Some variables, like &lt;code&gt;$PWD&lt;/code&gt;, only have one value. By convention, we talk about that variable's value, but we really mean its first (and only) value.</source>
          <target state="translated">&lt;code&gt;$PWD&lt;/code&gt; などの一部の変数には、1つの値しかありません。慣例として、その変数の値について説明しますが、実際にはその最初の（そして唯一の）値を意味します。</target>
        </trans-unit>
        <trans-unit id="07ce7b74abb2c830c303e793b3a670b92a1ed421" translate="yes" xml:space="preserve">
          <source>Sometimes a variable has no value because it is undefined or empty, and it expands to nothing:</source>
          <target state="translated">変数は、未定義や空であるために値がなく、何もない状態に展開されることがあります。</target>
        </trans-unit>
        <trans-unit id="75df37faa6697f888a3b911f52d0f98c1e11ff65" translate="yes" xml:space="preserve">
          <source>Sometimes commands take numbers directly as options, like &lt;code&gt;foo -55&lt;/code&gt;. To allow this one option spec can have the &lt;code&gt;#&lt;/code&gt; modifier so that any integer will be understood as this flag, and the last number will be given as its value (as if &lt;code&gt;=&lt;/code&gt; was used).</source>
          <target state="translated">&lt;code&gt;foo -55&lt;/code&gt; のように、コマンドがオプションとして直接数値を受け取る場合があります。これを許可するために、1つのオプション仕様に &lt;code&gt;#&lt;/code&gt; 修飾子を付けて、任意の整数がこのフラグとして理解され、最後の数値がその値として指定されるようにすることができます（ &lt;code&gt;=&lt;/code&gt; が使用されたかのように）。</target>
        </trans-unit>
        <trans-unit id="e5495d80577d573036b499fb0c7884929ac34e4e" translate="yes" xml:space="preserve">
          <source>Sometimes features like &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, you can use quotes, either single (&lt;code&gt;'&lt;/code&gt;) or double (&lt;code&gt;&quot;&lt;/code&gt;). Between single quotes, fish performs no expansions. Between double quotes, fish only performs &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt;. No other kind of expansion (including &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt; or parameter expansion) is performed, and escape sequences (for example, &lt;code&gt;\n&lt;/code&gt;) are ignored. Within quotes, whitespace is not used to separate arguments, allowing quoted arguments to contain spaces.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;パラメータ拡張&lt;/a&gt;や&lt;a href=&quot;#escapes&quot;&gt;文字エスケープ&lt;/a&gt;などの機能が邪魔になることがあります。それが起こるとき、あなたは、単一（、引用符を使用することはできません &lt;code&gt;'&lt;/code&gt; （）または二重 &lt;code&gt;&quot;&lt;/code&gt; ）。単一引用符、魚を行なう間に展開。二重引用符の間には、魚だけ実行&lt;a href=&quot;#expand-variable&quot;&gt;変数の展開を&lt;/a&gt;。拡張の他の種類を（含む&lt;a href=&quot;#expand-brace&quot;&gt;ブレース展開&lt;/a&gt;やパラメータ拡張）が実行され、エスケープシーケンス（たとえば、 &lt;code&gt;\n&lt;/code&gt; ）は無視されます。引用符内では、空白を使用して引数を区切ることはなく、引用符で囲まれた引数にスペースを含めることができます。</target>
        </trans-unit>
        <trans-unit id="8709ff84c2c20f30aea0078b8e4ce461f5bca70c" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &amp;lsquo;&amp;rsquo;&lt;code&gt;(single quote) or&lt;/code&gt;&quot;&lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt;\'&lt;code&gt;, which escapes a single quote and&lt;/code&gt;\`, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;パラメータ拡張&lt;/a&gt;や&lt;a href=&quot;#escapes&quot;&gt;文字エスケープ&lt;/a&gt;などの機能が邪魔になる場合があります。その場合、ユーザーは '' &lt;code&gt;(single quote) or&lt;/code&gt; &lt;code&gt;(double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &amp;lt;a href=&quot;#expand-variable&quot;&amp;gt;variable expansion&amp;lt;/a&amp;gt; still takes place. Other than that, no other kind of expansion (including &amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;brace expansion&amp;lt;/a&amp;gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored. The only backslash escape accepted within single quotes is&lt;/code&gt; 符）または &quot; （二重引用符）のいずれかでパラメーターを引用符で囲むことができます。一重引用符付き文字列と二重引用符付き文字列の間に重要な違いが1つあります。二重引用符付き文字列を使用する場合、&amp;lt;a href = &quot;＃expand-variable&quot;&amp;gt;変数の展開&amp;lt;/a&amp;gt;は引き続き行われます。それ以外の場合、他の種類の展開（&amp;lt;a href=&quot;#expand-brace&quot;&amp;gt;ブレース展開&amp;lt;/a&amp;gt;およびパラメーター展開を含む）は行われませんが発生すると、パラメータにはスペースが含まれる可能性があり、エスケープシーケンスは無視されます。単一引用符内で受け入れられるバックスラッシュエスケープ &lt;code&gt;, which escapes a single quote and&lt;/code&gt; \ ' のみです。\ `：バックスラッシュ記号をエスケープします。二重引用符で受け入れられた唯一のバックスラッシュエスケープは &lt;code&gt;\&quot;&lt;/code&gt; 二重引用符、逃げる、 &lt;code&gt;\$&lt;/code&gt; ドル記号、逃げる、 &lt;code&gt;\&lt;/code&gt; 最後に改行が続き、バックスラッシュと改行を削除し、 &lt;code&gt;\\&lt;/code&gt; バックスラッシュをエスケープし、シンボル。二重引用符内では単一引用符は特別な意味を持たず、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="1c2aa93843ddd26ec4e00cb7588c5d09f093b293" translate="yes" xml:space="preserve">
          <source>Sometimes features such as &lt;a href=&quot;#expand&quot;&gt;parameter expansion&lt;/a&gt; and &lt;a href=&quot;#escapes&quot;&gt;character escapes&lt;/a&gt; get in the way. When that happens, the user can write a parameter within quotes, either &lt;code&gt;'&lt;/code&gt; (single quote) or &lt;code&gt;&quot;&lt;/code&gt; (double quote). There is one important difference between single quoted and double quoted strings: When using double quoted string, &lt;a href=&quot;#expand-variable&quot;&gt;variable expansion&lt;/a&gt; still takes place. Other than that, no other kind of expansion (including &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt; and parameter expansion) will take place, the parameter may contain spaces, and escape sequences are ignored.</source>
          <target state="translated">&lt;a href=&quot;#expand&quot;&gt;パラメータ拡張&lt;/a&gt;や&lt;a href=&quot;#escapes&quot;&gt;文字エスケープ&lt;/a&gt;などの機能が邪魔になることがあります。その場合、ユーザーは引用符内に &lt;code&gt;'&lt;/code&gt; （一重引用符）または &lt;code&gt;&quot;&lt;/code&gt; （二重引用符）のいずれかのパラメーターを書き込むことができます。一重引用符と二重引用符の文字列には重要な違いが1つあります。二重引用符で囲まれた文字列を使用する場合でも、&lt;a href=&quot;#expand-variable&quot;&gt;変数の展開&lt;/a&gt;は行われます。 。それ以外の種類の展開（中&lt;a href=&quot;#expand-brace&quot;&gt;括弧の展開&lt;/a&gt;やパラメーターの展開を含む）は行われず、パラメーターにスペースが含まれる場合があり、エスケープシーケンスは無視されます。</target>
        </trans-unit>
        <trans-unit id="bbef0a968c656b4a5b1d7f9e05d2b88ddbbced0c" translate="yes" xml:space="preserve">
          <source>Sometimes it's necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both allow this by providing a set of indices in square brackets.</source>
          <target state="translated">リストの一部の要素や、置換コマンドが出力する行の一部だけにアクセスする必要がある場合があります。どちらも、角括弧内のインデックスのセットを提供することでこれを可能にします。</target>
        </trans-unit>
        <trans-unit id="381611052ef691d56b1efd4f092108acac608354" translate="yes" xml:space="preserve">
          <source>Sometimes it's necessary to access only some of the elements of a list, or some of the lines a command substitution outputs. Both are possible in fish by writing a set of indices in brackets, like:</source>
          <target state="translated">リストの一部の要素だけにアクセスしたい場合や、コマンド置換で出力される行の一部にアクセスしたい場合があります。どちらもfishでは、次のようにインデックスのセットを括弧で囲むことで可能です。</target>
        </trans-unit>
        <trans-unit id="0be615fbc68f9e7bd311c7f45b00fbeddf065488" translate="yes" xml:space="preserve">
          <source>Sometimes this may be unwanted, especially that tokens can disappear after expansion. In those cases, you should double-quote variables - &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt;.</source>
          <target state="translated">これは望ましくない場合があります。特に、拡張後にトークンが消える可能性があります。そのような場合は、変数を二重引用符で囲む必要があります &lt;code&gt;echo &quot;$c&quot;word&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="757ebf561cb13f732876f1ea411a1e9e3f80de54" translate="yes" xml:space="preserve">
          <source>Sometimes you need to have a variable available to an external command, often as a setting. For example many programs like &lt;code&gt;git&lt;/code&gt; or &lt;code&gt;man&lt;/code&gt; read the &lt;code&gt;$PAGER&lt;/code&gt; variable to figure out your preferred pager (the program that lets you scroll text). Other variables used like this include &lt;code&gt;$BROWSER&lt;/code&gt;, &lt;code&gt;$LANG&lt;/code&gt; (to configure your language) and &lt;code&gt;$PATH&lt;/code&gt;. You'll note these are written in ALLCAPS, but that's just a convention.</source>
          <target state="translated">多くの場合、設定として、外部コマンドで使用できる変数が必要になる場合があります。たとえば、 &lt;code&gt;git&lt;/code&gt; や &lt;code&gt;man&lt;/code&gt; などの多くのプログラムは、 &lt;code&gt;$PAGER&lt;/code&gt; 変数を読み取って、好みのページャー（テキストをスクロールできるプログラム）を見つけます。このように使用される他の変数には、 &lt;code&gt;$BROWSER&lt;/code&gt; 、 &lt;code&gt;$LANG&lt;/code&gt; （言語を構成するため）、および &lt;code&gt;$PATH&lt;/code&gt; ます。これらはALLCAPSで書かれていることに気付くでしょうが、それは単なる慣例です。</target>
        </trans-unit>
        <trans-unit id="eebf6318c30de678887503010959c6f407c73301" translate="yes" xml:space="preserve">
          <source>Sometimes you need to validate the option values. For example, that it is a valid integer within a specific range, or an ip address, or something entirely different. You can always do this after &lt;code&gt;argparse&lt;/code&gt; returns but you can also request that &lt;code&gt;argparse&lt;/code&gt; perform the validation by executing arbitrary fish script. To do so simply append an &lt;code&gt;!&lt;/code&gt; (exclamation-mark) then the fish script to be run. When that code is executed three vars will be defined:</source>
          <target state="translated">オプション値を検証する必要がある場合があります。たとえば、特定の範囲内の有効な整数、IPアドレス、またはまったく異なるものであること。 &lt;code&gt;argparse&lt;/code&gt; が戻った後はいつでもこれを行うことができますが、任意のfishスクリプトを実行して &lt;code&gt;argparse&lt;/code&gt; に検証を実行するように要求することもできます。これを行うには、 &lt;code&gt;!&lt;/code&gt; を追加するだけです。（感嘆符）次に、実行する魚のスクリプト。そのコードが実行されると、3つの変数が定義されます。</target>
        </trans-unit>
        <trans-unit id="56a5f493ab8c9264182d38baab070e353e607061" translate="yes" xml:space="preserve">
          <source>Sometimes you want to pass the output of a command to another command that only accepts files. If it's just one file, you can usually just pass it via a pipe, like:</source>
          <target state="translated">あるコマンドの出力を、ファイルしか受け付けない別のコマンドに渡したいことがあります。1つのファイルであれば、通常、次のようにパイプを介して渡すことができます。</target>
        </trans-unit>
        <trans-unit id="9277421700b70459398cb0c365d578b50058cd1a" translate="yes" xml:space="preserve">
          <source>Sometimes, there is disagreement on the width. There are numerous causes and fixes for this:</source>
          <target state="translated">時には、幅について意見が分かれることもあります。これには数多くの原因と対処法があります。</target>
        </trans-unit>
        <trans-unit id="6d8c9b124d521027647b4f270cb2872798f9264e" translate="yes" xml:space="preserve">
          <source>Space</source>
          <target state="translated">Space</target>
        </trans-unit>
        <trans-unit id="95e14bad66e5b43a6bb7d92e4d00d181d18e3f47" translate="yes" xml:space="preserve">
          <source>Special Case: The Escape Character</source>
          <target state="translated">スペシャルケース:脱出キャラクター</target>
        </trans-unit>
        <trans-unit id="5773d504847f59d4f28606344c751b42fcadfb09" translate="yes" xml:space="preserve">
          <source>Special Case: The escape Character</source>
          <target state="translated">特殊なケース:脱出キャラクター</target>
        </trans-unit>
        <trans-unit id="28dc52fcfc9145786fed85cff73226269b82a2c9" translate="yes" xml:space="preserve">
          <source>Special input functions</source>
          <target state="translated">特殊入力機能</target>
        </trans-unit>
        <trans-unit id="a6c32b7763c1deccd93080cf33efdb324072a965" translate="yes" xml:space="preserve">
          <source>Special variables</source>
          <target state="translated">特殊変数</target>
        </trans-unit>
        <trans-unit id="8f06d35453aa3a9039c7bd098b2dc7f5924d81cb" translate="yes" xml:space="preserve">
          <source>Specific elements of a list can be selected:</source>
          <target state="translated">リストの特定の要素を選択することができます。</target>
        </trans-unit>
        <trans-unit id="a0a234701d3553b3ee0fce9d93e7f64fadef5cac" translate="yes" xml:space="preserve">
          <source>Specifying your own completions is not difficult. To specify a completion, use the &lt;code&gt;complete&lt;/code&gt; command. &lt;code&gt;complete&lt;/code&gt; takes as a parameter the name of the command to specify a completion for. For example, to add a completion for the program &lt;code&gt;myprog&lt;/code&gt;, one would start the completion command with &lt;code&gt;complete -c myprog ...&lt;/code&gt;</source>
          <target state="translated">独自の補完を指定することは難しくありません。補完を指定するには、 &lt;code&gt;complete&lt;/code&gt; コマンドを使用します。 &lt;code&gt;complete&lt;/code&gt; は、補完を指定するコマンドの名前をパラメーターとして受け取ります。例えば、プログラムの完了追加する &lt;code&gt;myprog&lt;/code&gt; 、一つはで終了コマンドを開始すると &lt;code&gt;complete -c myprog ...&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="097a1b990191aac51f47b5d492033829ffa1b1cb" translate="yes" xml:space="preserve">
          <source>Standard error (stderr) for writing errors and warnings. Defaults to writing to the screen.</source>
          <target state="translated">エラーや警告を書き込むための標準エラー(stderr)。デフォルトでは画面への書き込みが行われます。</target>
        </trans-unit>
        <trans-unit id="1ac6973627e50b5b3feef24cc873cca39ec65518" translate="yes" xml:space="preserve">
          <source>Standard error, FD 2, for writing errors and warnings, defaults to writing to the screen.</source>
          <target state="translated">標準エラー、FD 2、書き込みエラーや警告の場合は、デフォルトで画面に書き込みます。</target>
        </trans-unit>
        <trans-unit id="f0b1702763dda2703f7004c06fb0ee81c1751e99" translate="yes" xml:space="preserve">
          <source>Standard input (stdin) for reading. Defaults to reading from the keyboard.</source>
          <target state="translated">読み取り用の標準入力(stdin)です。デフォルトでは、キーボードから読み込まれます。</target>
        </trans-unit>
        <trans-unit id="8116e8803b0b4ccfe612ba1239d0a4c13eb0c484" translate="yes" xml:space="preserve">
          <source>Standard input, FD 0, for reading, defaults to reading from the keyboard.</source>
          <target state="translated">標準入力、読込用FD 0、デフォルトはキーボードからの読込です。</target>
        </trans-unit>
        <trans-unit id="c6f2c8146d25a95772c182950e401c6e7649f489" translate="yes" xml:space="preserve">
          <source>Standard output (stdout) for writing output. Defaults to writing to the screen.</source>
          <target state="translated">出力を書き込むための標準出力(stdout)です。デフォルトでは画面への書き込みが行われます。</target>
        </trans-unit>
        <trans-unit id="fd08166eefe7793a02e0886b87576b866f11ba8d" translate="yes" xml:space="preserve">
          <source>Standard output, FD 1, for writing, defaults to writing to the screen.</source>
          <target state="translated">標準出力、書き込み用FD1、デフォルトは画面への書き込みです。</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="8f0c324bc7ae0630cb203b31d62e67e8a3bc6740" translate="yes" xml:space="preserve">
          <source>Starting and Exiting</source>
          <target state="translated">開始と終了</target>
        </trans-unit>
        <trans-unit id="806c8aeb75c45b416dcfcd215f384af2b2abda22" translate="yes" xml:space="preserve">
          <source>Startup (Where's .bashrc?)</source>
          <target state="translated">スタートアップ(.bashrcはどこにある?</target>
        </trans-unit>
        <trans-unit id="d9d8d313fdc1a560ea8caf500b990c2077839155" translate="yes" xml:space="preserve">
          <source>Startup time and memory usage is improved, etc.</source>
          <target state="translated">起動時間やメモリ使用量の改善など</target>
        </trans-unit>
        <trans-unit id="411f94c6ca34e4478bca225615707da562686a1d" translate="yes" xml:space="preserve">
          <source>String manipulation</source>
          <target state="translated">文字列の操作</target>
        </trans-unit>
        <trans-unit id="b3cfed68ddc06bae90fd47f85fdeed65b5766e4e" translate="yes" xml:space="preserve">
          <source>Support for italics, dim, reverse, and other modes is not guaranteed in all terminal emulators. Fish attempts to determine if the terminal supports these modes even if the terminfo database may not be up-to-date.</source>
          <target state="translated">イタリック、ディム、リバース、その他のモードのサポートはすべてのターミナルエミュレータで保証されているわけではありません。Fish は terminfo データベースが最新でなくても、ターミナルがこれらのモードをサポートしているかどうかを判断しようとします。</target>
        </trans-unit>
        <trans-unit id="d269dff6a5e6def876fa34f03bd1eb013ca33acd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are documented in the manual page for each command. Some switches are common to most command though, for example '&lt;code&gt;--help&lt;/code&gt;' will usually display a help text, '&lt;code&gt;-i&lt;/code&gt;' will often turn on interactive prompting before taking action, while '&lt;code&gt;-f&lt;/code&gt;' will turn it off.</source>
          <target state="translated">スイッチはコマンドごとに異なり、各コマンドのマニュアルページに記載されています。一部のスイッチはほとんどのコマンドに共通ですが、たとえば、「-- &lt;code&gt;--help&lt;/code&gt; 」は通常、ヘルプテキストを表示します。「- &lt;code&gt;-i&lt;/code&gt; 」は、アクションを実行する前にインタラクティブプロンプトをオンにし、「- &lt;code&gt;-f&lt;/code&gt; 」はオフにします。</target>
        </trans-unit>
        <trans-unit id="51354aa978a2468b119f16e69269a00d4d13fefd" translate="yes" xml:space="preserve">
          <source>Switches differ between commands and are usually documented on a command's manual page. There are some switches, however, that are common to most commands. For example, &lt;code&gt;--help&lt;/code&gt; will usually display a help text, &lt;code&gt;--version&lt;/code&gt; will usually display the command version, and &lt;code&gt;-i&lt;/code&gt; will often turn on interactive prompting before taking action.</source>
          <target state="translated">スイッチはコマンドによって異なり、通常はコマンドのマニュアルページに記載されています。ただし、ほとんどのコマンドに共通するスイッチがいくつかあります。たとえば、 &lt;code&gt;--help&lt;/code&gt; は通常ヘルプテキストを表示し、 &lt;code&gt;--version&lt;/code&gt; は通常コマンドバージョンを表示し、 &lt;code&gt;-i&lt;/code&gt; はアクションを実行する前にインタラクティブプロンプトをオンにすることがよくあります。</target>
        </trans-unit>
        <trans-unit id="b5eb6066faf764d428231e3c214c4d783bbf5bcc" translate="yes" xml:space="preserve">
          <source>Switching to fish?</source>
          <target state="translated">魚に切り替え?</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="d27b4fd727666f53e797902bf47550ba0a21184a" translate="yes" xml:space="preserve">
          <source>Syntax Highlighting</source>
          <target state="translated">構文の強調表示</target>
        </trans-unit>
        <trans-unit id="aaeb56c070a1b1a7f285d0c48b5a3e8940ab79cb" translate="yes" xml:space="preserve">
          <source>Syntax Overview</source>
          <target state="translated">構文の概要</target>
        </trans-unit>
        <trans-unit id="037fceb004812e2c76fd4ee125e5787960e7ee91" translate="yes" xml:space="preserve">
          <source>Syntax highlighting</source>
          <target state="translated">シンタックスハイライト</target>
        </trans-unit>
        <trans-unit id="a991dd19e2e4193f19d18e3b5e051fc3eb5c463d" translate="yes" xml:space="preserve">
          <source>Syntax highlighting variables</source>
          <target state="translated">シンタックスハイライトの変数</target>
        </trans-unit>
        <trans-unit id="418e9ee62ad6b7ba7264fdf5d0ee995e2e351045" translate="yes" xml:space="preserve">
          <source>Syntax overview</source>
          <target state="translated">構文の概要</target>
        </trans-unit>
        <trans-unit id="648056b93fe4233586db207ccd2bb7c37a24ed26" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;).</source>
          <target state="translated">システム全体の構成ファイル。管理者は、システム上のすべてのユーザーに対して実行する必要のある初期化を &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; （通常は &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; ）に含めることができます（POSIXスタイルのシェルの &lt;code&gt;/etc/profile&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="afcc6a38c449b540b7b14d03d1b1f6092ebcf158" translate="yes" xml:space="preserve">
          <source>System-wide configuration files, where administrators can include initialization that should be run for all users on the system - similar to &lt;code&gt;/etc/profile&lt;/code&gt; for POSIX-style shells - in &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; (usually &lt;code&gt;/etc/fish/config.fish&lt;/code&gt;);</source>
          <target state="translated">システム全体の構成ファイル。管理者は、POSIXスタイルのシェルの &lt;code&gt;/etc/profile&lt;/code&gt; と同様に、システムのすべてのユーザーに対して実行する必要のある初期化を &lt;code&gt;$__fish_sysconf_dir&lt;/code&gt; （通常は &lt;code&gt;/etc/fish/config.fish&lt;/code&gt; ）に含めることができます。</target>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="translated">T</target>
        </trans-unit>
        <trans-unit id="fe06eb6459c87f0e497ce1805f076f104bfecf78" translate="yes" xml:space="preserve">
          <source>Tab</source>
          <target state="translated">Tab</target>
        </trans-unit>
        <trans-unit id="1870d395ae4bdd7644d2246d47b66d22f565347b" translate="yes" xml:space="preserve">
          <source>Tab Completion</source>
          <target state="translated">タブの完成</target>
        </trans-unit>
        <trans-unit id="87564ea1bf094f88395489e37aab98a53d8a3438" translate="yes" xml:space="preserve">
          <source>Tab Completions</source>
          <target state="translated">タブの完成</target>
        </trans-unit>
        <trans-unit id="eb8b89e8c468a2f2b0bf3f62ac7419a0270f3b4b" translate="yes" xml:space="preserve">
          <source>Tab completion</source>
          <target state="translated">タブ補完</target>
        </trans-unit>
        <trans-unit id="2c4aae4ff3b4716ef2c5982376317648c9a9138a" translate="yes" xml:space="preserve">
          <source>Tab completion is a time saving feature of any modern shell. When you type</source>
          <target state="translated">タブ補完は、現代のシェルの時間短縮機能です。と入力すると</target>
        </trans-unit>
        <trans-unit id="2ea2b2cc91429ba0736ea7b5a4dc7f2208abf174" translate="yes" xml:space="preserve">
          <source>Tab completion is one of the most time saving features of any modern shell. By tapping the tab key, the user asks &lt;code&gt;fish&lt;/code&gt; to guess the rest of the command or parameter that the user is currently typing. If &lt;code&gt;fish&lt;/code&gt; can only find one possible completion, &lt;code&gt;fish&lt;/code&gt; will write it out. If there is more than one completion, &lt;code&gt;fish&lt;/code&gt; will write out the longest prefix that all completions have in common. If the completions differ on the first character, a list of all possible completions is printed. The list features descriptions of the completions and if the list doesn't fit the screen, it is scrollable by using the arrow keys, the page up/page down keys, the tab key or the space bar.</source>
          <target state="translated">タブ補完は、最近のシェルで最も時間を節約できる機能の1つです。ユーザーはタブキーをタップすることで、ユーザーが現在入力しているコマンドまたはパラメーターの残りを推測するように &lt;code&gt;fish&lt;/code&gt; に要求します。 &lt;code&gt;fish&lt;/code&gt; が可能な補完を1つしか見つけられない場合、 &lt;code&gt;fish&lt;/code&gt; はそれを書き出します。複数の補完がある場合、 &lt;code&gt;fish&lt;/code&gt; はすべての補完に共通する最も長い接頭辞を書き出します。最初の文字で補完が異なる場合、可能なすべての補完のリストが出力されます。リストには補完の説明が表示され、リストが画面に合わない場合は、矢印キー、PageUp / PageDownキー、タブキー、またはスペースバーを使用してスクロールできます。</target>
        </trans-unit>
        <trans-unit id="44e924f5f1b607dd0e4feccbc1d4d898f052a887" translate="yes" xml:space="preserve">
          <source>Tacklebox</source>
          <target state="translated">Tacklebox</target>
        </trans-unit>
        <trans-unit id="d1f6becf050c6a3d481d711b08a3cf1e80f4a45f" translate="yes" xml:space="preserve">
          <source>Technically, unix allows filenames with newlines, and this splits the &lt;code&gt;find&lt;/code&gt; output on newlines. If you want to avoid that, use find's &lt;code&gt;-print0&lt;/code&gt; option and &lt;a href=&quot;cmds/string#cmd-string-split0&quot;&gt;string split0&lt;/a&gt;.</source>
          <target state="translated">技術的には、unixは改行を含むファイル名を許可し、これにより &lt;code&gt;find&lt;/code&gt; 出力が改行で分割されます。これを回避したい場合は、findの &lt;code&gt;-print0&lt;/code&gt; オプションと&lt;a href=&quot;cmds/string#cmd-string-split0&quot;&gt;文字列split0を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="e3c7839574383a9eaa3d82c610c455446f6121c0" translate="yes" xml:space="preserve">
          <source>Terminal Capability Detection</source>
          <target state="translated">端末能力検出</target>
        </trans-unit>
        <trans-unit id="066a694f7543574dbbd89c308f8361b862e2f6dc" translate="yes" xml:space="preserve">
          <source>Terminal Limitations</source>
          <target state="translated">端末の制限</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="f4db73f91ff31a9cc26abcce871824e94dd4c380" translate="yes" xml:space="preserve">
          <source>Test (&lt;code&gt;test&lt;/code&gt;, &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;[[&lt;/code&gt;)</source>
          <target state="translated">テスト（ &lt;code&gt;test&lt;/code&gt; 、 &lt;code&gt;[&lt;/code&gt; 、 &lt;code&gt;[[&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b54b1fa82b8ecdc3fb07f7f9d29066e5997831e6" translate="yes" xml:space="preserve">
          <source>Tests the expression given and sets the exit status to 0 if true, and 1 if false. An expression is made up of one or more operators and their arguments.</source>
          <target state="translated">与えられた式をテストし、真の場合は0、偽の場合は1に終了ステータスを設定します。式は、1つ以上の演算子とその引数で構成されます。</target>
        </trans-unit>
        <trans-unit id="6b1fc2e3b816bc95de3d9b1753ab9aa1375ff7b8" translate="yes" xml:space="preserve">
          <source>That means if you run</source>
          <target state="translated">つまり、あなたが実行すると</target>
        </trans-unit>
        <trans-unit id="1524134a04c0ceb49ab53ac5b3cc51239e9fa5c2" translate="yes" xml:space="preserve">
          <source>That means that commands like the above</source>
          <target state="translated">つまり、上記のようなコマンドは</target>
        </trans-unit>
        <trans-unit id="e0037e5dc6a5265afc3461906162967fa82bca2b" translate="yes" xml:space="preserve">
          <source>That means the argument will only be used for the option if you use it like:</source>
          <target state="translated">のように使用した場合にのみ、その引数がオプションに使用されるということです。</target>
        </trans-unit>
        <trans-unit id="baf65aaba6f80f192071085d55edadb89cb69226" translate="yes" xml:space="preserve">
          <source>That's the &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt;. It is displayed by default when you've activated vi mode using &lt;code&gt;fish_vi_key_bindings&lt;/code&gt;.</source>
          <target state="translated">それが&lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt;です。 &lt;code&gt;fish_vi_key_bindings&lt;/code&gt; を使用してviモードをアクティブにすると、デフォルトで表示されます。</target>
        </trans-unit>
        <trans-unit id="ff31576d4415b08aa68ec0f43f4c2956d9b998f4" translate="yes" xml:space="preserve">
          <source>The &quot;locale&quot; of a program is its set of language and regional settings. In UNIX, there are a few separate variables to control separate things - &lt;code&gt;LC_CTYPE&lt;/code&gt; defines the text encoding while &lt;code&gt;LC_TIME&lt;/code&gt; defines the time format.</source>
          <target state="translated">プログラムの「ロケール」は、言語と地域の設定のセットです。UNIXでは、個別のものを制御するための個別の変数がいくつかあります &lt;code&gt;LC_CTYPE&lt;/code&gt; はテキストのエンコードを定義し、 &lt;code&gt;LC_TIME&lt;/code&gt; は時間形式を定義します。</target>
        </trans-unit>
        <trans-unit id="4d0484d8ce9d411754518c1cad07f4ac9deac98c" translate="yes" xml:space="preserve">
          <source>The &quot;~/.config&quot; part of this can be set via $XDG_CONFIG_HOME, that's just the default.</source>
          <target state="translated">このうち「~/.config」の部分は、$XDG_CONFIG_HOMEで設定できますが、これはあくまでもデフォルトです。</target>
        </trans-unit>
        <trans-unit id="5ba0cf9aceb2fa7adface85cb83d889d4900b6d9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cmds/functions#cmd-functions&quot;&gt;functions&lt;/a&gt; builtin can show a function's current definition (and &lt;a href=&quot;cmds/type#cmd-type&quot;&gt;type&lt;/a&gt; will also do if given a function).</source>
          <target state="translated">&lt;a href=&quot;cmds/functions#cmd-functions&quot;&gt;機能の&lt;/a&gt;組み込み関数の現在の定義を表示することができます（と&lt;a href=&quot;cmds/type#cmd-type&quot;&gt;タイプは、&lt;/a&gt;機能指定した場合にも行います）。</target>
        </trans-unit>
        <trans-unit id="5c95ce6c80c581cf82b67c951e68df6b74a32a98" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;スイッチ&lt;/a&gt;コマンドは、文字列の値に応じてコマンドのおそらく多くのブロックのいずれかを実行するために使用されます。詳細については、&lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;スイッチ&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1eb80306f9b817b1c0fb037539e70c68832e042f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;GitHub page&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;GitHubのページ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="92160f08bddffe06e4520887bdd5645514caf0af" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;project GitHub page&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/fish-shell/fish-shell/&quot;&gt;プロジェクトGitHubのページ&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da142e6cb5a45841f62249b274bcc36ba693563d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;printf#cmd-printf&quot;&gt;printf&lt;/a&gt; command can do simple padding, for example &lt;code&gt;printf %10s\n&lt;/code&gt; works like &lt;code&gt;string pad -w10&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;printf#cmd-printf&quot;&gt;printf&lt;/a&gt;コマンドは、例えばのために、簡単なパディングを行うことができます &lt;code&gt;printf %10s\n&lt;/code&gt; のような作品を &lt;code&gt;string pad -w10&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1b65dd2b4e53dcf4e58c496b2ca6829ad905125" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;#&lt;/code&gt; must follow the short flag letter (if any), and other modifiers like &lt;code&gt;=&lt;/code&gt; are not allowed, except for &lt;code&gt;-&lt;/code&gt; (for backwards compatibility):</source>
          <target state="translated">&lt;code&gt;#&lt;/code&gt; は、短いフラグ手紙を（もしあれば）に従わなければならない、とのような他の修飾子 &lt;code&gt;=&lt;/code&gt; を除いて、許可されていません &lt;code&gt;-&lt;/code&gt; ：（後方互換性のため）</target>
        </trans-unit>
        <trans-unit id="4cc348ddd7ad603b4b7e3a6d1134042f24b0ee0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$&lt;/code&gt; symbol can also be used multiple times, as a kind of &quot;dereference&quot; operator (the &lt;code&gt;*&lt;/code&gt; in C or C++), like in the following code:</source>
          <target state="translated">&lt;code&gt;$&lt;/code&gt; の記号は、「間接参照」演算子（の一種として、複数回使用することができる &lt;code&gt;*&lt;/code&gt; 以下のコードのように、CまたはC ++で）。</target>
        </trans-unit>
        <trans-unit id="7e4fc8fc89e59cd9ece4a187b16054d89db8031c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt; operators for comparing strings are not implemented.</source>
          <target state="translated">文字列を比較するための &lt;code&gt;&amp;lt;&lt;/code&gt; および &lt;code&gt;&amp;gt;&lt;/code&gt; 演算子は実装されていません。</target>
        </trans-unit>
        <trans-unit id="65fe6102162982a331ea3f92362fbdf8528333d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; argument is required. You do not have to include any arguments after the &lt;code&gt;--&lt;/code&gt; but you must include the &lt;code&gt;--&lt;/code&gt;. For example, this is acceptable:</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; 引数が必要です。 &lt;code&gt;--&lt;/code&gt; 後に引数を含める必要はありませんが、 &lt;code&gt;--&lt;/code&gt; 含める必要があります。たとえば、これは許容範囲です。</target>
        </trans-unit>
        <trans-unit id="0c906c7f83627c97b083a6eb5c63248805d8c516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; here stops &lt;code&gt;contains&lt;/code&gt; from treating &lt;code&gt;-q&lt;/code&gt; to an option to itself. Instead it treats it as a normal string to check.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; ここで停止しますが &lt;code&gt;contains&lt;/code&gt; 治療から &lt;code&gt;-q&lt;/code&gt; 自体のオプションに。代わりに、チェックする通常の文字列として扱います。</target>
        </trans-unit>
        <trans-unit id="759c9b9de6e7b693bbc543cee2edb183ec65e7a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-n&lt;/code&gt; is so empty elements are removed like POSIX shells would do.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; は、 POSIXシェルがどうなるようなので、空の要素が削除されています。</target>
        </trans-unit>
        <trans-unit id="c88d441c07c1b7086b4b120f0e1995c32e1789db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-q&lt;/code&gt;, &lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-P&lt;/code&gt; flags (and their long flag aliases) are mutually exclusive. Only one can be specified at a time.</source>
          <target state="translated">&lt;code&gt;-q&lt;/code&gt; 、 &lt;code&gt;-p&lt;/code&gt; 、 &lt;code&gt;-t&lt;/code&gt; および &lt;code&gt;-P&lt;/code&gt; フラグ（およびその長フラグ別名）が相互に排他的です。一度に指定できるのは1つだけです。</target>
        </trans-unit>
        <trans-unit id="59f023c5b3800bfdb8a65685dca44b899595aa05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command, &quot;wrapping&quot; the other command. The wrapping command can also have additional completions. A command can wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; または &lt;code&gt;--wraps&lt;/code&gt; オプション「ラッピング」は、他のコマンド、別のコマンドから継承補完に指定されたコマンドを引き起こします。 wrappingコマンドには、追加の補完を含めることもできます。コマンドは複数のコマンドをラップでき、ラッピングは推移的です。AがBをラップし、BがCをラップする場合、AはCのすべての補完を自動的に継承します。折り返しは、 &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--erase&lt;/code&gt; オプションを使用して削除できます。折り返しは、 &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--command&lt;/code&gt; で指定された補完に対してのみ機能し、 &lt;code&gt;-p&lt;/code&gt; または &lt;code&gt;--path&lt;/code&gt; で補完を指定した場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="2c58a8949ca637e3657d904f90d0683f9b8a4548" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--wraps&lt;/code&gt; options causes the specified command to inherit completions from another command. The inheriting command is said to &quot;wrap&quot; the inherited command. The wrapping command may have its own completions in addition to inherited ones. A command may wrap multiple commands, and wrapping is transitive: if A wraps B, and B wraps C, then A automatically inherits all of C's completions. Wrapping can be removed using the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; options. Note that wrapping only works for completions specified with &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;--command&lt;/code&gt; and are ignored when specifying completions with &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-w&lt;/code&gt; または &lt;code&gt;--wraps&lt;/code&gt; オプション別のコマンドから継承補完に指定されたコマンドを引き起こします。継承するコマンドは、継承されたコマンドを「ラップ」すると言います。 wrappingコマンドには、継承されたコマンドの他に、独自の補完機能がある場合があります。コマンドは複数のコマンドをラップする場合があり、ラップは推移的です。AがBをラップし、BがCをラップする場合、AはCのすべての補完を自動的に継承します。折り返しは、 &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--erase&lt;/code&gt; オプションを使用して削除できます。ラップは &lt;code&gt;-c&lt;/code&gt; または &lt;code&gt;--command&lt;/code&gt; で指定された補完に対してのみ機能し、 &lt;code&gt;-p&lt;/code&gt; または &lt;code&gt;--path&lt;/code&gt; で補完を指定した場合は無視されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c3779bf48914bcae0cdcc953ecc413edee9ed2fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VARNAME&lt;/code&gt; was local to the for block in releases prior to 3.0.0. This means that if you did something like this:</source>
          <target state="translated">&lt;code&gt;VARNAME&lt;/code&gt; は、以前の3.0.0のリリースでブロックのために地元のでした。つまり、次のようなことをした場合、</target>
        </trans-unit>
        <trans-unit id="a5fbe884c0818c473736504e3a3f15c774e6b13f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands show installed or installable packages</source>
          <target state="translated">&lt;code&gt;apt-get&lt;/code&gt; は、 &lt;code&gt;rpm&lt;/code&gt; と &lt;code&gt;yum&lt;/code&gt; コマンドがインストールまたはインストール可能なパッケージを表示します</target>
        </trans-unit>
        <trans-unit id="da3409d273e3db5ef8ddc4ea273fbbb872d656c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;rpm&lt;/code&gt; and &lt;code&gt;yum&lt;/code&gt; commands use all installed packages as completions.</source>
          <target state="translated">&lt;code&gt;apt-get&lt;/code&gt; は、 &lt;code&gt;rpm&lt;/code&gt; と &lt;code&gt;yum&lt;/code&gt; コマンドが補完としてインストールされているすべてのパッケージを使用しています。</target>
        </trans-unit>
        <trans-unit id="a176ce24ca6419e62567415a12b97aacd6da428c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;echo $flounder &amp;gt;&amp;amp;&lt;/code&gt; is the first process, &lt;code&gt;less&lt;/code&gt; the second and &lt;code&gt;and echo $catfish&lt;/code&gt; the third.</source>
          <target state="translated">&lt;code&gt;echo $flounder &amp;gt;&amp;amp;&lt;/code&gt; 最初の工程で、 &lt;code&gt;less&lt;/code&gt; 第二及び &lt;code&gt;and echo $catfish&lt;/code&gt; 三分の一を。</target>
        </trans-unit>
        <trans-unit id="08c885ad47f98ee1d2fa7d61aaf2be5914055c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;end&lt;/code&gt; command does not change the current exit status. Instead, the status after it will be the status returned by the most recent command.</source>
          <target state="translated">&lt;code&gt;end&lt;/code&gt; コマンドは、現在の終了ステータスは変更されません。その代わり、その後のステータスは、最新のコマンドによって返されたステータスになります。</target>
        </trans-unit>
        <trans-unit id="cd7f0141ffadda545e17fb22c15ec53f8466fcc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a &lt;a href=&quot;#history-search&quot;&gt;searchable history&lt;/a&gt; and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; エディタ機能は、コピー＆ペースト&lt;a href=&quot;#history-search&quot;&gt;、検索歴史&lt;/a&gt;特別なキーボードショートカットにバインドすることができ、多くのエディタ機能を。</target>
        </trans-unit>
        <trans-unit id="3cb7ec726c85b79feb29910ee5250baa8513a66f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; editor features copy and paste, a searchable history and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">&lt;code&gt;fish&lt;/code&gt; エディタ機能は、特殊なキーボードショートカットにバインドすることができ、検索履歴や多くのエディタ機能をコピーして貼り付けます。</target>
        </trans-unit>
        <trans-unit id="c64f6cc8af3f868e2009e8fec92b3aa89f2848f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish&lt;/code&gt; implementation of &lt;code&gt;ulimit&lt;/code&gt; should behave identically to the implementation in bash, except for these differences:</source>
          <target state="translated">&lt;code&gt;ulimit&lt;/code&gt; の &lt;code&gt;fish&lt;/code&gt; 実装は、これらの違いを除いて、bashの実装と同じように動作する必要があります。</target>
        </trans-unit>
        <trans-unit id="07e5eef3af7a89848f46c551cd20fd456ad73c6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_git_prompt&lt;/code&gt; function displays information about the current git repository, if any.</source>
          <target state="translated">&lt;code&gt;fish_git_prompt&lt;/code&gt; あれば関数は、現在のgitリポジトリに関する情報が表示されます。</target>
        </trans-unit>
        <trans-unit id="129eb955355c8f7758d77f2cac61f370f6205e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_mode_prompt&lt;/code&gt; function outputs the mode indicator for use in vi-mode.</source>
          <target state="translated">&lt;code&gt;fish_mode_prompt&lt;/code&gt; 関数は、VI-モードで使用するためのモードインジケータを出力します。</target>
        </trans-unit>
        <trans-unit id="13e49a3e07554395afbb4e275a3cd442c1c677ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_prompt&lt;/code&gt; function is executed when the prompt is to be shown, and the output is used as a prompt.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 関数はプロンプトが表示されるときに実行され、その出力は、プロンプトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="ca964de959867d14ed3a9f8b9974f6eaea7d9c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_title&lt;/code&gt; function is executed before and after a new command is executed or put into the foreground and the output is used as a titlebar message.</source>
          <target state="translated">&lt;code&gt;fish_title&lt;/code&gt; 機能は前にして、新しいコマンドを実行またはフォアグラウンドに入れ、出力はタイトルバーメッセージとして使用された後に実行されます。</target>
        </trans-unit>
        <trans-unit id="40b7c153dde9c57207852c321a7476ca5435e545" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_vcs_prompt&lt;/code&gt; function displays information about the current version control system (VCS) repository, if any.</source>
          <target state="translated">&lt;code&gt;fish_vcs_prompt&lt;/code&gt; 現在のバージョン管理システム（VCS）リポジトリに関する機能情報が表示され、もしあれば。</target>
        </trans-unit>
        <trans-unit id="ca816a872a077d36b73d0af3eade298496b9cd5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fish_vi_cursor&lt;/code&gt; function will be used to change the cursor's shape depending on the mode in supported terminals. The following snippet can be used to manually configure cursors after enabling vi-mode:</source>
          <target state="translated">&lt;code&gt;fish_vi_cursor&lt;/code&gt; の機能がサポートされる端末モードに応じてカーソルの形状を変更するために使用されるであろう。次のスニペットを使用して、viモードを有効にした後でカーソルを手動で構成できます。</target>
        </trans-unit>
        <trans-unit id="67113321177587b92e33339a6cdbfbb714ba38b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &amp;lsquo;printf &amp;rsquo;d' &quot;102.234&quot;` produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数が指定された引数のすべてを変換するのに必要な回数として再利用されます。書式指定子が指定された引数に適切でない場合、エラーが出力されます。たとえば、「printf 'd' &quot;102.234&quot; `は、「102.234」は整数としてフォーマットできないため、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fa359d649d24e5335af9a0db3ad3244dff9a6be4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. If a format specifier is not appropriate for the given argument, an error is printed. For example, &lt;code&gt;printf '%d' &quot;102.234&quot;&lt;/code&gt; produces an error, as &quot;102.234&quot; cannot be formatted as an integer.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数が指定された引数のすべてを変換するのに必要な回数として再利用されます。指定された引数にフォーマット指定子が適切でない場合、エラーが出力されます。たとえば、 &lt;code&gt;printf '%d' &quot;102.234&quot;&lt;/code&gt; は整数としてフォーマットできないため、printf '％d' &quot;102.234&quot;はエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="b1fe28da968ad020cc831ee02008bdf7ad25078a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; argument is re-used as many times as necessary to convert all of the given arguments. So &lt;code&gt;printf %s\n flounder catfish clownfish shark&lt;/code&gt; will print four lines.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 引数が指定された引数のすべてを変換するのに必要な回数として再利用されます。したがって、 &lt;code&gt;printf %s\n flounder catfish clownfish shark&lt;/code&gt; は4行を印刷します。</target>
        </trans-unit>
        <trans-unit id="89f23a465dd8d76eebf980544d18d2de2601f2be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;make&lt;/code&gt; program uses all targets in the Makefile in the current directory as completions.</source>
          <target state="translated">&lt;code&gt;make&lt;/code&gt; プログラムは補完として、現在のディレクトリにあるMakefileのすべてのターゲットを使用しています。</target>
        </trans-unit>
        <trans-unit id="08ddda0f4e3d5dbda6ef1fb82291b1b27f800ddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mount&lt;/code&gt; command uses all mount points specified in fstab as completions.</source>
          <target state="translated">&lt;code&gt;mount&lt;/code&gt; コマンドが使用するすべての補完としてfstabに指定されたマウントポイントを。</target>
        </trans-unit>
        <trans-unit id="bac670339d33af9a7bab7a0aa6c9bff4de41f823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; コマンドは、MIMEタイプのデータベースや使用 &lt;code&gt;.desktop&lt;/code&gt; ファイルタイプとデフォルトのアクションを識別するために、GNOMEとKDEで使用されるファイルを。これらの環境の少なくとも1つがインストールされているが、openコマンドが機能していない場合は、関連するファイルが標準以外の場所にインストールされている可能性があります。&lt;a href=&quot;index#more-help&quot;&gt;さらに助け&lt;/a&gt;を求めることを検討してください。</target>
        </trans-unit>
        <trans-unit id="671a2f0e6604938b59263b838275bea0e131dc63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;open&lt;/code&gt; command uses the MIME type database and the &lt;code&gt;.desktop&lt;/code&gt; files used by Gnome and KDE to identify filetypes and default actions. If at least one of these environments is installed, but the open command is not working, this probably means that the relevant files are installed in a non-standard location. Consider &lt;a href=&quot;index#more-help&quot;&gt;asking for more help&lt;/a&gt;. .. _faq-ssh-interactive:</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; コマンドは、MIMEタイプのデータベースや使用 &lt;code&gt;.desktop&lt;/code&gt; ファイルタイプとデフォルトのアクションを識別するために、GNOMEとKDEで使用されるファイルを。これらの環境の少なくとも1つがインストールされているが、openコマンドが機能しない場合、これはおそらく、関連するファイルが非標準の場所にインストールされていることを意味します。&lt;a href=&quot;index#more-help&quot;&gt;さらに助け&lt;/a&gt;を求めることを検討してください。.. _faq-ssh-interactive：</target>
        </trans-unit>
        <trans-unit id="5ee971b433f3902a987e68857661a14613f57897" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;or return&lt;/code&gt; means that the function returns &lt;code&gt;argparse&lt;/code&gt;'s status if it failed, so if it goes on &lt;code&gt;argparse&lt;/code&gt; succeeded.</source>
          <target state="translated">&lt;code&gt;or return&lt;/code&gt; 機能のリターンがあることを意味 &lt;code&gt;argparse&lt;/code&gt; それが失敗した場合、それが上になるようならば、のステータスを &lt;code&gt;argparse&lt;/code&gt; 成功しました。</target>
        </trans-unit>
        <trans-unit id="041e0c82c73f6cce25f8c5fa37958883f066722d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the &lt;a href=&quot;../index#directory-stack&quot;&gt;directory stack&lt;/a&gt; and makes it the current working directory. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 機能が追加されます &lt;code&gt;DIRECTORY&lt;/code&gt; の先頭に&lt;a href=&quot;../index#directory-stack&quot;&gt;ディレクトリスタック&lt;/a&gt;およびそれを現在の作業ディレクトリになります。&lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;はそれをポップオフし、元のディレクトリに戻ります。</target>
        </trans-unit>
        <trans-unit id="12db9bbc519582e7296e06534b51717da7e239b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;#popd&quot;&gt;&lt;code&gt;popd&lt;/code&gt;&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 機能が追加されます &lt;code&gt;DIRECTORY&lt;/code&gt; ディレクトリスタックの一番上にし、それを現在の作業ディレクトリになります。&lt;a href=&quot;#popd&quot;&gt; &lt;code&gt;popd&lt;/code&gt; &lt;/a&gt;はそれをポップし、元のディレクトリに戻ります。</target>
        </trans-unit>
        <trans-unit id="232591d70cc81d9e2252f02a7f0ab108b8f2be53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pushd&lt;/code&gt; function adds &lt;code&gt;DIRECTORY&lt;/code&gt; to the top of the directory stack and makes it the current working directory. &lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt; will pop it off and return to the original directory.</source>
          <target state="translated">&lt;code&gt;pushd&lt;/code&gt; 機能が追加されます &lt;code&gt;DIRECTORY&lt;/code&gt; ディレクトリスタックの一番上にし、それを現在の作業ディレクトリになります。&lt;a href=&quot;popd#cmd-popd&quot;&gt;popd&lt;/a&gt;はそれをポップオフし、元のディレクトリに戻ります。</target>
        </trans-unit>
        <trans-unit id="a826eafcc5f8080c789ef8d78318660a9727e115" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; command supported the &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;--mode-name&lt;/code&gt; flags in fish versions prior to 2.7.0 to specify an alternative read history file. Those flags are now deprecated and ignored. Instead, set the &lt;code&gt;fish_history&lt;/code&gt; variable to specify a history session ID. That will affect both the &lt;code&gt;read&lt;/code&gt; history file and the fish command history file. You can set it to an empty string to specify that no history should be read or written. This is useful for presentations where you do not want possibly private or sensitive history to be exposed to the audience but do want history relevant to the presentation to be available.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; コマンドはサポートされ &lt;code&gt;-m&lt;/code&gt; と &lt;code&gt;--mode-name&lt;/code&gt; 代替読み取り履歴ファイルを指定するには、魚より前のバージョン2.7.0へのフラグを。これらのフラグは廃止され、無視されます。代わりに、 &lt;code&gt;fish_history&lt;/code&gt; 変数を設定して、履歴セッションIDを指定します。これは、 &lt;code&gt;read&lt;/code&gt; 履歴ファイルと魚コマンド履歴ファイルの両方に影響します。空の文字列に設定して、履歴を読み書きしないことを指定できます。これは、プライベートまたは機密の履歴を聴衆に公開したくないが、プレゼンテーションに関連する履歴を利用可能にしたいプレゼンテーションに役立ちます。</target>
        </trans-unit>
        <trans-unit id="7fcdb96d7e5417d911e99a0401becd905a30865f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rpm&lt;/code&gt; command has several different modes. If the &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--erase&lt;/code&gt; flag has been specified, &lt;code&gt;rpm&lt;/code&gt; should delete one or more packages, in which case several switches related to deleting packages are valid, like the &lt;code&gt;nodeps&lt;/code&gt; switch.</source>
          <target state="translated">&lt;code&gt;rpm&lt;/code&gt; コマンドは、いくつかの異なるモードがあります。 &lt;code&gt;-e&lt;/code&gt; または &lt;code&gt;--erase&lt;/code&gt; フラグが指定されている場合、 &lt;code&gt;rpm&lt;/code&gt; は1つ以上のパッケージを削除する必要があります。この場合、 &lt;code&gt;nodeps&lt;/code&gt; スイッチのように、パッケージの削除に関連するいくつかのスイッチが有効です。</target>
        </trans-unit>
        <trans-unit id="a790e8c78ea9f158b99ff23d36fc572c40897097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in &lt;code&gt;fish&lt;/code&gt; are really lists, that can contain any number of values, or none at all.</source>
          <target state="translated">上記の &lt;code&gt;set&lt;/code&gt; コマンドは引用符を使用して、 &lt;code&gt;Mister Noodle&lt;/code&gt; が1つの引数であることを確認しました。2つの引数があった場合、 &lt;code&gt;name&lt;/code&gt; は長さ2のリストになります。実際、 &lt;code&gt;fish&lt;/code&gt; のすべての変数は実際にはリストであり、任意の数の値を含むことも、まったく含まないこともあります。</target>
        </trans-unit>
        <trans-unit id="4fca0ef2366ca80fbd9b2829024455a0201bdf5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; command above used quotes to ensure that &lt;code&gt;Mister Noodle&lt;/code&gt; was one argument. If it had been two arguments, then &lt;code&gt;name&lt;/code&gt; would have been a list of length 2. In fact, all variables in fish are really lists, that can contain any number of values, or none at all.</source>
          <target state="translated">上記の &lt;code&gt;set&lt;/code&gt; コマンドは、引用符を使用して、 &lt;code&gt;Mister Noodle&lt;/code&gt; が1つの引数であることを確認しました。2つの引数があった場合、 &lt;code&gt;name&lt;/code&gt; は長さ2のリストになります。実際、fishのすべての変数は実際にはリストであり、任意の数の値を含めることも、まったく含めることもできません。</target>
        </trans-unit>
        <trans-unit id="4e4c01874451687405926cb86a3846c32a777675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and lack color information for terminals that support it. Fish assumes that all terminals can use the [ANSI X3.64](&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;) escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; コマンドが使用されているものは何でも端末上の端末の色を変更する方法を探すためにterminfoデータベースを使用しています。一部のシステムには古くて不完全なterminfoデータベースがあり、それをサポートする端末の色情報が不足しています。Fishは、terminfo定義が16未満の色がサポートされていないことを示している場合、すべての端末が[ANSI X3.64]（&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;https://en.wikipedia.org/wiki/ANSI_escape_code&lt;/a&gt;）エスケープシーケンスを使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="b8a21bdde776c698d3de37f05072833e8526edd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_color&lt;/code&gt; command uses the terminfo database to look up how to change terminal colors on whatever terminal is in use. Some systems have old and incomplete terminfo databases, and may lack color information for terminals that support it. Fish will assume that all terminals can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt; escape sequences if the terminfo definition indicates a color below 16 is not supported.</source>
          <target state="translated">&lt;code&gt;set_color&lt;/code&gt; コマンドが使用されているものは何でも端末上の端末の色を変更する方法を探すためにterminfoデータベースを使用しています。一部のシステムには古い不完全なterminfoデータベースがあり、それをサポートする端末のカラー情報が不足している場合があります。Fishは、terminfo定義が16未満の色がサポートされていないことを示している場合、すべての端末が&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt;ANSI X3.64&lt;/a&gt;エスケープシーケンスを使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="570ae270bf32027068dbc7611cc21eacc745b07d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; command uses all hosts that are stored in the known_hosts file as completions. (See the ssh documentation for more information)</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; コマンドが補完として、known_hostsファイルに保存されているすべてのホストを使用しています。（詳細については、sshのドキュメントを参照してください）</target>
        </trans-unit>
        <trans-unit id="8edee39da4cf69aebe1d3841fdc9bb385090a9e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command shows the users on the system</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; コマンドは、システム上のユーザーを示してい</target>
        </trans-unit>
        <trans-unit id="98c28ed2787aacc681a7fe21c43d77f6911bb6d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command takes any username as an argument. Usernames are given as the first colon-separated field in the file /etc/passwd. This can be specified as:</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; コマンドは、引数として任意のユーザー名を取ります。ユーザー名は、/ etc / passwdファイル内の最初のコロンで区切られたフィールドとして指定されます。これは次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="d0c2e5dc87ea547203543a3113293b01834dc317" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;su&lt;/code&gt; command uses all users on the system as completions.</source>
          <target state="translated">&lt;code&gt;su&lt;/code&gt; コマンドが補完として、システム上のすべてのユーザーを使用しています。</target>
        </trans-unit>
        <trans-unit id="1694f288fba89e086b666fb0fa0aa6f5ed0e92d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; コマンドは、文字列の値に応じてコマンドのおそらく多くのブロックのいずれかを実行するために使用されます。詳細については、&lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;スイッチ&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ac2d93e5ce9c99380286aea119eb1c4d811d5e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; command is used to execute one of possibly many blocks of commands depending on the value of a string. See the documentation for &lt;a href=&quot;commands#switch&quot;&gt;switch&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; コマンドは、文字列の値に応じてコマンドのおそらく多くのブロックのいずれかを実行するために使用されます。詳細については、&lt;a href=&quot;commands#switch&quot;&gt;スイッチ&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="47ad27700014770c354049370500a3fdcb1e0c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; ユーザー名に続くパラメータの先頭に（チルダ）文字は、指定したユーザのホームディレクトリに展開されます。単独の &lt;code&gt;~&lt;/code&gt; 、または &lt;code&gt;~&lt;/code&gt; 後にスラッシュが続くものは、プロセス所有者のホームディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="08bf891aa7a0590874350d3510cb5b3148d6f765" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; (tilde) character at the beginning of a parameter, followed by a username, is expanded into the home directory of the specified user. A lone &lt;code&gt;~&lt;/code&gt;, or a &lt;code&gt;~&lt;/code&gt; followed by a slash, is expanded into the home directory of the process owner:</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; ユーザー名に続くパラメータの先頭に（チルダ）文字は、指定したユーザのホームディレクトリに展開されます。単独の &lt;code&gt;~&lt;/code&gt; 、または &lt;code&gt;~&lt;/code&gt; 後にスラッシュが続くものは、プロセス所有者のホームディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="265a9c81a69231c01219582e938c14d98984c415" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;br&lt;/em&gt;- (as in 'bright') forms are full-brightness variants of the 8 standard-brightness colors on many terminals. &lt;em&gt;brblack&lt;/em&gt; has higher brightness than &lt;em&gt;black&lt;/em&gt; - towards gray.</source>
          <target state="translated">&lt;em&gt;BR&lt;/em&gt; - （「明るい」のような）の形態は、フル輝度が多くの端末に8標準輝度の色の変異体です。&lt;em&gt;brblack&lt;/em&gt;は、&lt;em&gt;黒&lt;/em&gt;よりも明るさが高く、灰色に向かっています。</target>
        </trans-unit>
        <trans-unit id="fa7f7b1a4ad16744a0f606de485b9dcac150e6e6" translate="yes" xml:space="preserve">
          <source>The IRC channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="translated">IRCチャンネル、irc.oftc.netの &lt;code&gt;irc.oftc.net&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="81bc67c4cc6d1500fe78dbf824dcd5a05daabcef" translate="yes" xml:space="preserve">
          <source>The Internet Relay Chat channel, #fish on &lt;code&gt;irc.oftc.net&lt;/code&gt;</source>
          <target state="translated">インターネットリレーチャットチャネル、irc.oftc.netの &lt;code&gt;irc.oftc.net&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38912f78e93626e5fa47b637ba81937a676623d5" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. (Note: you should NOT add this line to &lt;code&gt;config.fish&lt;/code&gt;. If you do, the variable will get longer each time you run fish!)</source>
          <target state="translated">利点は、ファイルをいじくり回す必要がないことです。これをコマンドラインで1回実行するだけで、現在のセッションと将来のすべてのインスタンスにも影響します。（注：この行を &lt;code&gt;config.fish&lt;/code&gt; に追加しないでください。追加すると、魚を実行するたびに変数が長くなります！）</target>
        </trans-unit>
        <trans-unit id="92a877b936875a7b135f437c779582ab970c90cc" translate="yes" xml:space="preserve">
          <source>The advantage is that you don't have to go mucking around in files: just run this once at the command line, and it will affect the current session and all future instances too. You can also add this line to &lt;a href=&quot;#tut-config&quot;&gt;config.fish&lt;/a&gt;, as it only adds the component if necessary.</source>
          <target state="translated">利点は、ファイルをいじくり回す必要がないことです。コマンドラインでこれを1回実行するだけで、現在のセッションと将来のすべてのインスタンスにも影響します。必要な場合にのみコンポーネントを追加するため、この行を&lt;a href=&quot;#tut-config&quot;&gt;config.fishに&lt;/a&gt;追加することもできます。</target>
        </trans-unit>
        <trans-unit id="9a5b6fa2b60fb7b30f834fa877a85006d71c86dd" translate="yes" xml:space="preserve">
          <source>The block can be removed. Any events which triggered while the block was in place will then be delivered.</source>
          <target state="translated">ブロックは削除することができます。ブロックが設置されている間に発生したイベントはすべて配信されます。</target>
        </trans-unit>
        <trans-unit id="bb7debcb6ad4bd52a3602c3c576ba4ce44391ac4" translate="yes" xml:space="preserve">
          <source>The block is unconditionally executed. &lt;code&gt;begin; ...; end&lt;/code&gt; is equivalent to &lt;code&gt;if true; ...; end&lt;/code&gt;.</source>
          <target state="translated">ブロックは無条件に実行されます。 &lt;code&gt;begin; ...; end&lt;/code&gt; は &lt;code&gt;if true; ...; end&lt;/code&gt; と同等です。...; 終わり。</target>
        </trans-unit>
        <trans-unit id="b145eb51c1a7060a787ad20b1384352c3498a3fe" translate="yes" xml:space="preserve">
          <source>The character has an &quot;ambiguous&quot; width and fish thinks that means a width of X while your terminal thinks it's Y. In this case you either need to change your terminal's configuration or set $fish_ambiguous_width to the correct value.</source>
          <target state="translated">この場合、端末の設定を変更するか、$fish_ambiguous_widthを正しい値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="11122cc3bb4128a26d73e8038e6c49944b1ac492" translate="yes" xml:space="preserve">
          <source>The character is an emoji and the host system only supports Unicode 8, while you are running the terminal on a system that uses Unicode &amp;gt;= 9. In this case set $fish_emoji_width to 2.</source>
          <target state="translated">文字は絵文字であり、Unicode&amp;gt; = 9を使用するシステムで端末を実行している間、ホストシステムはUnicode 8のみをサポートします。この場合、$ fish_emoji_widthを2に設定します。</target>
        </trans-unit>
        <trans-unit id="68d8e6504c0343fb9e99dc0c0584d6abb0401ef4" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">構文の強調表示にfishが使用する色は、さまざまな変数の値を変更することで構成できます。これらの変数の値は、&lt;a href=&quot;cmds/set_color#cmd-set-color&quot;&gt;set_color&lt;/a&gt;コマンドで受け入れられる色の1つにすることができます。 &lt;code&gt;--bold&lt;/code&gt; または &lt;code&gt;-b&lt;/code&gt; によって受け入れられたスイッチ &lt;code&gt;set_color&lt;/code&gt; も受け入れています。</target>
        </trans-unit>
        <trans-unit id="c5cb93e79eb59eed4f3c4bd5e54faad96127309f" translate="yes" xml:space="preserve">
          <source>The colors used by fish for syntax highlighting can be configured by changing the values of a various variables. The value of these variables can be one of the colors accepted by the &lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt; command. The &lt;code&gt;--bold&lt;/code&gt; or &lt;code&gt;-b&lt;/code&gt; switches accepted by &lt;code&gt;set_color&lt;/code&gt; are also accepted.</source>
          <target state="translated">fishが構文の強調表示に使用する色は、さまざまな変数の値を変更することで構成できます。これらの変数の値は、&lt;a href=&quot;commands#set_color&quot;&gt;set_color&lt;/a&gt;コマンドで受け入れられる色のいずれかになります。 &lt;code&gt;--bold&lt;/code&gt; または &lt;code&gt;-b&lt;/code&gt; によって受け入れられたスイッチ &lt;code&gt;set_color&lt;/code&gt; も受け入れています。</target>
        </trans-unit>
        <trans-unit id="eebbaa522fd61caa5f13112c46410239f8902654" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;cat foo.txt&lt;/code&gt; sends the contents of &lt;code&gt;foo.txt&lt;/code&gt; to stdout. This output is provided as input for the &lt;code&gt;head&lt;/code&gt; program, which prints the first 10 lines of its input.</source>
          <target state="translated">コマンド &lt;code&gt;cat foo.txt&lt;/code&gt; は、 &lt;code&gt;foo.txt&lt;/code&gt; の内容をstdoutに送信します。この出力は、入力の最初の10行を出力する &lt;code&gt;head&lt;/code&gt; プログラムの入力として提供されます。</target>
        </trans-unit>
        <trans-unit id="84d325ad2d19b4840c597f9597e729e6423f6e0a" translate="yes" xml:space="preserve">
          <source>The command history is stored in the file &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; (or &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; if that variable is set) by default. However, you can set the &lt;code&gt;fish_history&lt;/code&gt; environment variable to change the name of the history session (resulting in a &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; file); both before starting the shell and while the shell is running.</source>
          <target state="translated">コマンド履歴は、デフォルトでファイル &lt;code&gt;~/.local/share/fish/fish_history&lt;/code&gt; （または、変数が設定されている場合は &lt;code&gt;$XDG_DATA_HOME/fish/fish_history&lt;/code&gt; されます。ただし、 &lt;code&gt;fish_history&lt;/code&gt; 環境変数を設定して、履歴セッションの名前を変更できます（結果として &lt;code&gt;&amp;lt;session&amp;gt;_history&lt;/code&gt; ファイルになります）。シェルを開始する前とシェルの実行中の両方。</target>
        </trans-unit>
        <trans-unit id="ad9471aeb00cd7dbf667ba8000bfffbdd6168599" translate="yes" xml:space="preserve">
          <source>The completions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/completions&lt;/code&gt;; and</source>
          <target state="translated">通常、 &lt;code&gt;/usr/share/fish/completions&lt;/code&gt; にインストールされる、fishに付属する補完物。そして</target>
        </trans-unit>
        <trans-unit id="a5bac7b22b091ed7d9ec59183c217ba0ddc57510" translate="yes" xml:space="preserve">
          <source>The current working directory can be displayed with the &lt;a href=&quot;cmds/pwd#cmd-pwd&quot;&gt;pwd&lt;/a&gt; command, or the &lt;code&gt;$PWD&lt;/code&gt;&lt;a href=&quot;#variables-special&quot;&gt;special variable&lt;/a&gt;.</source>
          <target state="translated">現在の作業ディレクトリは、&lt;a href=&quot;cmds/pwd#cmd-pwd&quot;&gt;pwd&lt;/a&gt;コマンドまたは &lt;code&gt;$PWD&lt;/code&gt; &lt;a href=&quot;#variables-special&quot;&gt;特殊変数を使用&lt;/a&gt;して表示できます。</target>
        </trans-unit>
        <trans-unit id="1a3296dffab7060413e9666f968221326b4a22e5" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;fish_mode_prompt&lt;/code&gt; 関数は、通常のプロンプトの左側に表示される現在のViエディターモードに関するインジケーターを出力します。独自の関数を定義して、モードインジケータの外観をカスタマイズします。 &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; 現在のモードを決定するために使用することができます。これは、 &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;replace_one&lt;/code&gt; 、または &lt;code&gt;visual&lt;/code&gt; のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="526642f1e62598bbea0ecea2aededa98b233083a" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;fish_mode_prompt&lt;/code&gt; function will output indicators about the current Vi editor mode displayed to the left of the regular prompt. Define your own function to customize the appearance of the mode indicator. You can also define an empty &lt;code&gt;fish_mode_prompt&lt;/code&gt; function to remove the Vi mode indicators. The &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; can be used to determine the current mode. It will be one of &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;replace_one&lt;/code&gt;, or &lt;code&gt;visual&lt;/code&gt;.</source>
          <target state="translated">デフォルトの &lt;code&gt;fish_mode_prompt&lt;/code&gt; 関数は、通常のプロンプトの左側に表示される現在のViエディターモードに関するインジケーターを出力します。独自の関数を定義して、モードインジケーターの外観をカスタマイズします。空の &lt;code&gt;fish_mode_prompt&lt;/code&gt; 関数を定義して、Viモードインジケーターを削除することもできます。 &lt;code&gt;$fish_bind_mode variable&lt;/code&gt; 現在のモードを決定するために使用することができます。これは、のいずれかになります &lt;code&gt;default&lt;/code&gt; 、 &lt;code&gt;insert&lt;/code&gt; 、 &lt;code&gt;replace_one&lt;/code&gt; 、または &lt;code&gt;visual&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5cecf773b45b71f464d270740746e4c81be97a5f" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are included in the output.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; のデフォルトの動作は、引数なしで呼び出された場合、定義されたすべての関数の名前を出力することです。 &lt;code&gt;-a&lt;/code&gt; オプションを指定しない限り、アンダースコアで始まる関数は出力に含まれません。</target>
        </trans-unit>
        <trans-unit id="b701404c307944b4f207202092290f154a8ceb6b" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;functions&lt;/code&gt;, when called with no arguments, is to print the names of all defined functions. Unless the &lt;code&gt;-a&lt;/code&gt; option is given, no functions starting with underscores are not included in the output.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; のデフォルトの動作は、引数なしで呼び出された場合、定義されたすべての関数の名前を出力することです。 &lt;code&gt;-a&lt;/code&gt; オプションを指定しない限り、アンダースコアで始まる関数は出力に含まれません。</target>
        </trans-unit>
        <trans-unit id="d4c91c27fab2727c86c4962ed510a017a29b2b1e" translate="yes" xml:space="preserve">
          <source>The default fish_greeting is a function that prints a variable of the same name (&lt;code&gt;$fish_greeting&lt;/code&gt;), so you can also just change that if you just want to change the text.</source>
          <target state="translated">デフォルトのfish_greetingは、同じ名前の変数（ &lt;code&gt;$fish_greeting&lt;/code&gt; ）を出力する関数であるため、テキストを変更するだけの場合は、これを変更することもできます。</target>
        </trans-unit>
        <trans-unit id="3238e1ed93b89a49bf4c1e65f05bfcad2dc2ccfc" translate="yes" xml:space="preserve">
          <source>The default key binding can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). It will be used whenever no other binding matches. For most key bindings, it makes sense to use the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;) as the default keybinding. This will insert any keystrokes not specifically bound to into the editor. Non- printable characters are ignored by the editor, so this will not result in control sequences being printable.</source>
          <target state="translated">空の文字列（つまり &lt;code&gt;''&lt;/code&gt; ）の &lt;code&gt;SEQUENCE&lt;/code&gt; を指定することで、デフォルトのキーバインディングを設定できます。他のバインディングが一致しない場合は常に使用されます。ほとんどのキー割り当てでは、デフォルトのキー割り当てとして &lt;code&gt;self-insert&lt;/code&gt; 関数（つまり &lt;code&gt;bind '' self-insert&lt;/code&gt; ）を使用するのが理にかなっています。これにより、特にバインドされていないキーストロークがエディターに挿入されます。印刷不可能な文字はエディターによって無視されるため、これによって制御シーケンスが印刷可能になることはありません。</target>
        </trans-unit>
        <trans-unit id="80908167c1fd52bd3b1ff34d8e60c0c19ce6ff92" translate="yes" xml:space="preserve">
          <source>The default prompt is reasonably full-featured and its code can be read via &lt;code&gt;type fish_prompt&lt;/code&gt;.</source>
          <target state="translated">デフォルトのプロンプトは適度にフル機能であり、そのコードは &lt;code&gt;type fish_prompt&lt;/code&gt; を介して読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="761122ce7c1e00f6a72f6459922524107cc8cd64" translate="yes" xml:space="preserve">
          <source>The delay in milliseconds since the previous character was received is included in the diagnostic information written to stderr. This information may be useful to determine the optimal &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; setting or learn the amount of lag introduced by tools like &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;mosh&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt;.</source>
          <target state="translated">前の文字が受信されてからのミリ秒単位の遅延は、stderrに書き込まれる診断情報に含まれています。この情報は、最適な決定するのに有用である可能性が &lt;code&gt;fish_escape_delay_ms&lt;/code&gt; を設定するなどのツールによって導入遅れの量を学び &lt;code&gt;ssh&lt;/code&gt; 、 &lt;code&gt;mosh&lt;/code&gt; や &lt;code&gt;tmux&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="858922f559826f295d941e88749f79239abe12a3" translate="yes" xml:space="preserve">
          <source>The destination of a stream can be changed using something called &lt;em&gt;redirection&lt;/em&gt;. For example, &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt;, redirects the standard output of the &lt;code&gt;echo&lt;/code&gt; command to a text file.</source>
          <target state="translated">ストリームの宛先は、&lt;em&gt;リダイレクト&lt;/em&gt;と呼ば&lt;em&gt;れる&lt;/em&gt;ものを使用して変更できます。たとえば、 &lt;code&gt;echo hello &amp;gt; output.txt&lt;/code&gt; は、 &lt;code&gt;echo&lt;/code&gt; コマンドの標準出力をテキストファイルにリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="aec578501f85f58e1b6e5dcfc273e5557d618a78" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape can also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, like for function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">エスケープキーは単独で使用することができ、例えば、Vi キーバインドを使用しているときに挿入モードから通常モードに切り替えることができます。エスケープは「メタ」キーとしても使用でき、ファンクションキーや矢印キーのようにエスケープシーケンスの開始を示すことができます。エスケープ文字で始まるカスタムバインディングを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="e2ae9cb276e98e46e4c54626cf3a5b994505cd52" translate="yes" xml:space="preserve">
          <source>The escape key can be used standalone, for example, to switch from insertion mode to normal mode when using Vi keybindings. Escape may also be used as a &quot;meta&quot; key, to indicate the start of an escape sequence, such as function or arrow keys. Custom bindings can also be defined that begin with an escape character.</source>
          <target state="translated">エスケープキーは、例えば、Vi キーバインドを使用しているときに挿入モードから通常モードに切り替えるためにスタンドアローンで使用することができます。エスケープは「メタ」キーとしても使用でき、ファンクションキーや矢印キーなどのエスケープシーケンスの開始を示すことができます。エスケープ文字で始まるカスタムバインディングを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="f2b67ae0b734fe8c7eb4002ecf7174bec7a097d2" translate="yes" xml:space="preserve">
          <source>The exit code of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">組み込みの &lt;code&gt;jobs&lt;/code&gt; の終了コードは、実行中のバックグラウンドジョブがある場合は &lt;code&gt;0&lt;/code&gt; 、それ以外の場合は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bdab6b4388bdecbfaaade04b54ac542c4110731a" translate="yes" xml:space="preserve">
          <source>The exit status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">いずれかの &lt;code&gt;REASON&lt;/code&gt; が無効な場合、終了ステータスは1です。それ以外の場合、トラップは0を返します。</target>
        </trans-unit>
        <trans-unit id="92a98ee3485df09b2caf60e2fe8f1f43529de92d" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;functions&lt;/code&gt; is the number of functions specified in the argument list that do not exist, which can be used in concert with the &lt;code&gt;-q&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; の終了ステータスは、存在しない引数リストで指定された関数の数であり、 &lt;code&gt;-q&lt;/code&gt; オプションと組み合わせて使用できます。</target>
        </trans-unit>
        <trans-unit id="ea71aa43d0423248b5e6d17342f55b2785678003" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;jobs&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">実行中のバックグラウンドジョブがある場合、 &lt;code&gt;jobs&lt;/code&gt; の終了ステータスは &lt;code&gt;0&lt;/code&gt; であり、それ以外の場合は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ef3cb59016fb249c3eee79ed924509a2fbc0c01f" translate="yes" xml:space="preserve">
          <source>The exit status of &lt;code&gt;source&lt;/code&gt; is the exit status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">終了ステータス &lt;code&gt;source&lt;/code&gt; 実行するための最後のジョブの終了ステータスです。ファイルを開いたり読み取ったりしているときに問題が発生した場合、 &lt;code&gt;source&lt;/code&gt; はゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="87e8fe9012c8960260a66a84283038f62899649e" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 内のコマンドの終了ステータスは、 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数外の&lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt;の値を変更しません。</target>
        </trans-unit>
        <trans-unit id="0f212eae622b07227263f98bfdb5b6ec216b4de4" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 内のコマンドの終了ステータスは、 &lt;code&gt;fish_breakpoint_prompt&lt;/code&gt; 関数外の&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;の値を変更しません。</target>
        </trans-unit>
        <trans-unit id="59c65315bdacf0d0e4111fbb51abfbd8b92270ba" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 内のコマンドの終了ステータスは、 &lt;code&gt;fish_prompt&lt;/code&gt; 関数外の&lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt;の値を変更しません。</target>
        </trans-unit>
        <trans-unit id="5657481f999e23c3116d622970acdbbcff597a42" translate="yes" xml:space="preserve">
          <source>The exit status of commands within &lt;code&gt;fish_prompt&lt;/code&gt; will not modify the value of &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; outside of the &lt;code&gt;fish_prompt&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;fish_prompt&lt;/code&gt; 内のコマンドの終了ステータスは、 &lt;code&gt;fish_prompt&lt;/code&gt; 関数外の&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;の値を変更しません。</target>
        </trans-unit>
        <trans-unit id="ee4b36588801ba4a5846d1e6ab3ec967f5f37ee0" translate="yes" xml:space="preserve">
          <source>The exit status of the &lt;code&gt;jobs&lt;/code&gt; builtin is &lt;code&gt;0&lt;/code&gt; if there are running background jobs and &lt;code&gt;1&lt;/code&gt; otherwise.</source>
          <target state="translated">組み込み &lt;code&gt;jobs&lt;/code&gt; の終了ステータスは、実行中のバックグラウンドジョブがある場合は &lt;code&gt;0&lt;/code&gt; 、それ以外の場合は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dde297103a5b92cbf6063c24bb9aa65b611780da" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;../index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;../index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ff645c10072dc44f93fe8a0bc1b09a1e128e9d19" translate="yes" xml:space="preserve">
          <source>The exit status of the last foreground command to exit can always be accessed using the &lt;a href=&quot;index#variables-status&quot;&gt;$status&lt;/a&gt; variable.</source>
          <target state="translated">最後に終了するフォアグラウンドコマンドの終了ステータスには、&lt;a href=&quot;index#variables-status&quot;&gt;$ status&lt;/a&gt;変数を使用していつでもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2bb050210ccd5d99a0518f801eba8a539afbe988" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution happens in the context of a &lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt; command (so &lt;code&gt;if set -l (something)&lt;/code&gt; checks if &lt;code&gt;something&lt;/code&gt; returned true).</source>
          <target state="translated">最後に実行されたコマンド置換の終了ステータスは、置換が&lt;a href=&quot;cmds/set#cmd-set&quot;&gt;set&lt;/a&gt;コマンドのコンテキストで発生した場合、&lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt;変数で使用できます（したがって &lt;code&gt;if set -l (something)&lt;/code&gt; がtrueを返したかどう &lt;code&gt;something&lt;/code&gt; チェックします）。</target>
        </trans-unit>
        <trans-unit id="4652deeba9fb7344bebbe6060971799e99a44a6b" translate="yes" xml:space="preserve">
          <source>The exit status of the last run command substitution is available in the &lt;a href=&quot;#variables-status&quot;&gt;status&lt;/a&gt; variable if the substitution occurs in the context of a &lt;code&gt;set&lt;/code&gt; command.</source>
          <target state="translated">最後に実行されたコマンド置換の終了ステータスは、置換が &lt;code&gt;set&lt;/code&gt; コマンドのコンテキストで発生した場合、&lt;a href=&quot;#variables-status&quot;&gt;ステータス&lt;/a&gt;変数で利用できます。</target>
        </trans-unit>
        <trans-unit id="110fb03150bee422319feb18aa0d332d91a7cdc7" translate="yes" xml:space="preserve">
          <source>The exit status of the while loop is the exit status of the last iteration of the &lt;code&gt;COMMANDS&lt;/code&gt; executed, or 0 if none were executed. (This matches other shells and is POSIX-compatible.)</source>
          <target state="translated">whileループの終了ステータスは、実行された &lt;code&gt;COMMANDS&lt;/code&gt; の最後の反復の終了ステータス、または何も実行されなかった場合は0です。（これは他のシェルと一致し、POSIX互換です。）</target>
        </trans-unit>
        <trans-unit id="0e8e9a53dcf07764aa42aaf44d6d7a9d7ab8311a" translate="yes" xml:space="preserve">
          <source>The exporting rules when creating or updating a variable are identical to the scoping rules for variables:</source>
          <target state="translated">変数を作成または更新する際のエクスポートルールは、変数のスコープルールと同じです。</target>
        </trans-unit>
        <trans-unit id="f3b2b8baa995e92464f5e5d45c31f3a60ec2cb9d" translate="yes" xml:space="preserve">
          <source>The file given in &lt;code&gt;--debug-output&lt;/code&gt; takes precedence over the file in $FISH_DEBUG_OUTPUT.</source>
          <target state="translated">&lt;code&gt;--debug-output&lt;/code&gt; で指定されたファイルは、$ FISH_DEBUG_OUTPUTのファイルよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="09376457a3a1c5f117afa52bbec921cf1ee6399b" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications and options to &lt;code&gt;argparse&lt;/code&gt; itself (like &lt;code&gt;--ignore-unknown&lt;/code&gt;) from the command arguments, so it is required.</source>
          <target state="translated">最初の &lt;code&gt;--&lt;/code&gt; 見ては可能にするものです &lt;code&gt;argparse&lt;/code&gt; 確実にするためのオプション仕様とオプションを分離するためのコマンドを &lt;code&gt;argparse&lt;/code&gt; 自身（のような &lt;code&gt;--ignore-unknown&lt;/code&gt; それが必要とされるように、コマンド引数から）。</target>
        </trans-unit>
        <trans-unit id="ccd7da4c54986027f5d438b2f8ee07a3d4f4e74d" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;--&lt;/code&gt; seen is what allows the &lt;code&gt;argparse&lt;/code&gt; command to reliably separate the option specifications from the command arguments.</source>
          <target state="translated">最初の &lt;code&gt;--&lt;/code&gt; 見ては可能にするものです &lt;code&gt;argparse&lt;/code&gt; 確実コマンド引数からオプション仕様を分離するためのコマンドを。</target>
        </trans-unit>
        <trans-unit id="94b3d0ab298a19d908eda08c397cba03b7e163b0" translate="yes" xml:space="preserve">
          <source>The first argument to fish_title contains the most recently executed foreground command as a string, if any.</source>
          <target state="translated">fish_titleの第1引数には、直近に実行されたフォアグラウンド・コマンドがあれば、それを文字列として格納します。</target>
        </trans-unit>
        <trans-unit id="f00c945cebc76b9e34b8670689ec76047f703bed" translate="yes" xml:space="preserve">
          <source>The first form (&lt;code&gt;test&lt;/code&gt;) is preferred. For compatibility with other shells, the second form is available: a matching pair of square brackets (&lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt;).</source>
          <target state="translated">最初の形式（ &lt;code&gt;test&lt;/code&gt; ）が推奨されます。他のシェルとの互換性のために、2番目の形式が使用できます。対応する角括弧のペア（ &lt;code&gt;[ [EXPRESSION ] ]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="43f4d110308413cf0bb5f3a0257b712c35d80d02" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is a list variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;cmds/function#cmd-function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">最初の行は、 &lt;code&gt;ll&lt;/code&gt; という名前の関数を定義することを魚に伝えています。これを使用するには、コマンドラインで &lt;code&gt;ll&lt;/code&gt; と書くだけです。2行目は、 &lt;code&gt;ll&lt;/code&gt; が呼び出されたときにコマンド &lt;code&gt;ls -l $argv&lt;/code&gt; を呼び出す必要があることをfishに通知します。' &lt;code&gt;$argv&lt;/code&gt; 'はリスト変数であり、関数に送信されるすべての引数が常に含まれています。上記の例では、これらは単に &lt;code&gt;ls&lt;/code&gt; コマンドに渡されます。関数の詳細については、組み込み&lt;a href=&quot;cmds/function#cmd-function&quot;&gt;関数&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1feeb6c582e1b13feec652671af704d8c4bca81d" translate="yes" xml:space="preserve">
          <source>The first line tells fish that a function by the name of &lt;code&gt;ll&lt;/code&gt; is to be defined. To use it, simply write &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. '&lt;code&gt;$argv&lt;/code&gt;' is an array variable, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. For more information on functions, see the documentation for the &lt;a href=&quot;commands#function&quot;&gt;function&lt;/a&gt; builtin.</source>
          <target state="translated">最初の行は、 &lt;code&gt;ll&lt;/code&gt; という名前の関数が定義されることを魚に伝えます。それを使用するには、コマンドラインで &lt;code&gt;ll&lt;/code&gt; と書くだけです。 2行目は、 &lt;code&gt;ll&lt;/code&gt; が呼び出されたときにコマンド &lt;code&gt;ls -l $argv&lt;/code&gt; を呼び出す必要があることをfishに伝えます。 ' &lt;code&gt;$argv&lt;/code&gt; 'は配列変数で、常に関数に送信されるすべての引数が含まれています。上記の例では、これらは単に &lt;code&gt;ls&lt;/code&gt; コマンドに渡されます。関数の詳細については、組み込み&lt;a href=&quot;commands#function&quot;&gt;関数&lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="074dd03c76d5b47505aa8770948856719e412113" translate="yes" xml:space="preserve">
          <source>The first line tells fish to define a function by the name of &lt;code&gt;ll&lt;/code&gt;, so it can be used by simply writing &lt;code&gt;ll&lt;/code&gt; on the commandline. The second line tells fish that the command &lt;code&gt;ls -l $argv&lt;/code&gt; should be called when &lt;code&gt;ll&lt;/code&gt; is invoked. &lt;a href=&quot;#variables-argv&quot;&gt;$argv&lt;/a&gt; is a &lt;a href=&quot;#variables-lists&quot;&gt;list variable&lt;/a&gt;, which always contains all arguments sent to the function. In the example above, these are simply passed on to the &lt;code&gt;ls&lt;/code&gt; command. The &lt;code&gt;end&lt;/code&gt; on the third line ends the definition.</source>
          <target state="translated">最初の行は、魚に &lt;code&gt;ll&lt;/code&gt; という名前で関数を定義するように指示しているため、コマンドラインで &lt;code&gt;ll&lt;/code&gt; と記述するだけで使用できます。2行目は、 &lt;code&gt;ll&lt;/code&gt; が呼び出されたときにコマンド &lt;code&gt;ls -l $argv&lt;/code&gt; を呼び出す必要があることをfishに通知します。&lt;a href=&quot;#variables-argv&quot;&gt;$ argv&lt;/a&gt;は&lt;a href=&quot;#variables-lists&quot;&gt;リスト変数&lt;/a&gt;であり、関数に送信されるすべての引数が常に含まれています。上記の例では、これらは単に &lt;code&gt;ls&lt;/code&gt; コマンドに渡されます。 &lt;code&gt;end&lt;/code&gt; 3行目には、定義を終了します。</target>
        </trans-unit>
        <trans-unit id="5aa91cd04a31d486d202e2b1e77d870e577f521a" translate="yes" xml:space="preserve">
          <source>The first part specifies to whom this set of right applies, and can be one of &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;g&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;, where &lt;code&gt;u&lt;/code&gt; specifies the user who owns the file, &lt;code&gt;g&lt;/code&gt; specifies the group owner of the file, &lt;code&gt;o&lt;/code&gt; specific other users rights and &lt;code&gt;a&lt;/code&gt; specifies all three should be changed.</source>
          <target state="translated">最初の部分は、この一連の権利を誰に適用するかを指定し、 &lt;code&gt;u&lt;/code&gt; 、 &lt;code&gt;g&lt;/code&gt; 、 &lt;code&gt;o&lt;/code&gt; または &lt;code&gt;a&lt;/code&gt; のいずれかです。ここで、 &lt;code&gt;u&lt;/code&gt; はファイルを所有するユーザーを指定し、 &lt;code&gt;g&lt;/code&gt; はファイルのグループ所有者を指定します &lt;code&gt;o&lt;/code&gt; 他の特定のユーザー権限および &lt;code&gt;a&lt;/code&gt; は、3つすべてを変更する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="8197431f9332af76bce775e1de1257355f1cd95c" translate="yes" xml:space="preserve">
          <source>The fish commandline editor can be used to work on commands that are several lines long. There are three ways to make a command span more than a single line:</source>
          <target state="translated">魚のコマンドラインエディタを使えば、数行に及ぶコマンドを扱うことができます。コマンドを一行以上の長さにするには、3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="8f8186d4ab0a2d348fed572d2dce9da78099265a" translate="yes" xml:space="preserve">
          <source>The fish commandline editor works exactly the same in single line mode and in multiline mode. To move between lines use the left and right arrow keys and other such keyboard shortcuts.</source>
          <target state="translated">魚のコマンドラインエディタは、一行モードでも複数行モードでも全く同じように動作します。行間を移動するには、左右の矢印キーやその他のキーボードショートカットを使用します。</target>
        </trans-unit>
        <trans-unit id="c10195114b2c2ba4a31738c3505e1c57b1525797" translate="yes" xml:space="preserve">
          <source>The fish editor features copy and paste, a &lt;a href=&quot;#history-search&quot;&gt;searchable history&lt;/a&gt; and many editor functions that can be bound to special keyboard shortcuts.</source>
          <target state="translated">魚のエディタは、コピーアンドペースト、&lt;a href=&quot;#history-search&quot;&gt;検索可能な履歴&lt;/a&gt;、および特別なキーボードショートカットにバインドできる多くのエディタ機能を備えています。</target>
        </trans-unit>
        <trans-unit id="c26a6a29915d54b8a282c8e0ab812a4f1acfe95a" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the &lt;a href=&quot;../index#variables-status&quot;&gt;exit status of the last foreground command&lt;/a&gt;.</source>
          <target state="translated">魚の終了ステータスは、通常&lt;a href=&quot;../index#variables-status&quot;&gt;、最後のフォアグラウンドコマンドの終了ステータスです&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="23b5304e27f02f59d7a10f53fd4009e199ac5306" translate="yes" xml:space="preserve">
          <source>The fish exit status is generally the exit status of the last foreground command. If fish is exiting because of a parse error, the exit status is 127.</source>
          <target state="translated">fishの終了ステータスは、一般的には最後のフォアグラウンドコマンドの終了ステータスです。パースエラーでfishが終了している場合、終了ステータスは127です。</target>
        </trans-unit>
        <trans-unit id="81b0737757c6447d0c7efe9ceff078d063aa48ef" translate="yes" xml:space="preserve">
          <source>The fish user community extends fish in unique and useful ways via scripts that aren't always appropriate for bundling with the fish package. Typically because they solve a niche problem unlikely to appeal to a broad audience. You can find those extensions, including prompts, themes and useful functions, in various third-party repositories. These include:</source>
          <target state="translated">魚のユーザーコミュニティは、スクリプトを使ってユニークで有用な方法で魚を拡張していますが、必ずしも魚のパッケージにバンドルするのに適しているとは限りません。一般的に、それらのスクリプトはニッチな問題を解決するものであり、多くの人にアピールすることはできません。これらの拡張機能は、プロンプトやテーマ、便利な機能など、さまざまなサードパーティのリポジトリで見つけることができます。これらには次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="1dc678d68b9717e5200d2d3ebd01cf72bd98b0c8" translate="yes" xml:space="preserve">
          <source>The fish_hg_prompt function displays information about the current Mercurial repository, if any.</source>
          <target state="translated">fish_hg_prompt 関数は、現在の Mercurial リポジトリがあれば、その情報を表示します。</target>
        </trans-unit>
        <trans-unit id="d06891f80053c3220358df28d431b54da754d75c" translate="yes" xml:space="preserve">
          <source>The fish_mode_prompt function will output the mode indicator for use in vi-mode.</source>
          <target state="translated">fish_mode_prompt関数は、viモードで使用するためのモードインジケータを出力します。</target>
        </trans-unit>
        <trans-unit id="2cd3e1be81f908b3d67ab09f753310049f406ade" translate="yes" xml:space="preserve">
          <source>The fish_svn_prompt function displays information about the current Subversion repository, if any.</source>
          <target state="translated">fish_svn_prompt 関数は、現在の Subversion リポジトリがあれば、その情報を表示します。</target>
        </trans-unit>
        <trans-unit id="89d3be5da20cd5974bed5d4cec48f0faf57383bf" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available. They must appear before all OPTION_SPECs:</source>
          <target state="translated">次の &lt;code&gt;argparse&lt;/code&gt; オプションを使用できます。これらはすべてのOPTION_SPECの前に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="23d5e5164bbb45ea1a895b015bf1d3acf0cdeae1" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;argparse&lt;/code&gt; options are available:</source>
          <target state="translated">次の &lt;code&gt;argparse&lt;/code&gt; オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="224bb1116b7af6da373f3bd98c7370044c04d51d" translate="yes" xml:space="preserve">
          <source>The following additional options are also understood by &lt;code&gt;ulimit&lt;/code&gt;:</source>
          <target state="translated">以下の追加オプションも &lt;code&gt;ulimit&lt;/code&gt; によって認識されます。</target>
        </trans-unit>
        <trans-unit id="72e92d902d19c4f9a787cc785c9f6f673c804c7c" translate="yes" xml:space="preserve">
          <source>The following code first defines an event handler for the generic event named 'test_event', and then emits an event of that type.</source>
          <target state="translated">以下のコードは、まず 'test_event' という名前の汎用イベントのイベントハンドラを定義し、そのタイプのイベントを放出します。</target>
        </trans-unit>
        <trans-unit id="4dfce41da5b846516accbd2a1b32a0ea88076d5d" translate="yes" xml:space="preserve">
          <source>The following code is an implementation of the false command as a fish function</source>
          <target state="translated">以下のコードは、False コマンドを fish 関数として実装したものです。</target>
        </trans-unit>
        <trans-unit id="73f428206d6cc247fb0a938bd495734a3eb822ae" translate="yes" xml:space="preserve">
          <source>The following code removes all tmp files that do not contain the word smurf.</source>
          <target state="translated">以下のコードは、smurfという単語を含まないすべてのtmpファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="479b6746587510b08a8b09d6baf9432244f03bce" translate="yes" xml:space="preserve">
          <source>The following code reports an error and exits if no file named spoon can be found.</source>
          <target state="translated">次のコードは、スプーンという名前のファイルが見つからない場合にエラーを報告して終了します。</target>
        </trans-unit>
        <trans-unit id="c4c2a9bc321af801fbf29261dd0e7d5af4245506" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, &lt;code&gt;make&lt;/code&gt;'s exit status is 0, and the program is installed. If either step fails, the exit status is 1, and &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">次のコードは、 &lt;code&gt;make&lt;/code&gt; コマンドを実行してプログラムをビルドします。ビルドが成功すると、 &lt;code&gt;make&lt;/code&gt; の終了ステータスは0になり、プログラムがインストールされます。いずれかのステップが失敗すると、終了ステータスは1になり、 &lt;code&gt;make clean&lt;/code&gt; が実行され、ビルドプロセスによって作成されたファイルが削除されます。</target>
        </trans-unit>
        <trans-unit id="546e6c9b6b78b14a90cdffaa174cd31d19fddac9" translate="yes" xml:space="preserve">
          <source>The following code runs the &lt;code&gt;make&lt;/code&gt; command to build a program. If the build succeeds, the program is installed. If either step fails, &lt;code&gt;make clean&lt;/code&gt; is run, which removes the files created by the build process.</source>
          <target state="translated">次のコードは、 &lt;code&gt;make&lt;/code&gt; コマンドを実行してプログラムをビルドします。ビルドが成功すると、プログラムがインストールされます。いずれかのステップが失敗すると、 &lt;code&gt;make clean&lt;/code&gt; が実行され、ビルドプロセスによって作成されたファイルが削除されます。</target>
        </trans-unit>
        <trans-unit id="22ceb5db939abfc8429d0cfac70346e285c29f90" translate="yes" xml:space="preserve">
          <source>The following code searches all .c files for &quot;smurf&quot;, and halts at the first occurrence.</source>
          <target state="translated">以下のコードは、すべての .c ファイルから &quot;smurf&quot; を検索し、最初の出現で停止します。</target>
        </trans-unit>
        <trans-unit id="4275d8a3b1aa0d62413745bb834485269f681525" translate="yes" xml:space="preserve">
          <source>The following code sets a number of variables inside of a block scope. Since the variables are set inside the block and have local scope, they will be automatically deleted when the block ends.</source>
          <target state="translated">以下のコードは、ブロックスコープ内にいくつかの変数を設定しています。変数はブロック内で設定され、ローカルスコープを持っているため、ブロックが終了すると自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="9c3e3b53e3555daf8b545c545da16a2dcb0110a7" translate="yes" xml:space="preserve">
          <source>The following code stores the value 'hello' in the shell variable &lt;code&gt;$foo&lt;/code&gt;.</source>
          <target state="translated">次のコードは、値 'hello'をシェル変数 &lt;code&gt;$foo&lt;/code&gt; 格納します。</target>
        </trans-unit>
        <trans-unit id="381bfb0bdea553cc88676dcf9cb0ff3a9ee0da17" translate="yes" xml:space="preserve">
          <source>The following code tests whether a file &lt;code&gt;foo.txt&lt;/code&gt; exists as a regular file.</source>
          <target state="translated">次のコードは、ファイル &lt;code&gt;foo.txt&lt;/code&gt; が通常のファイルとして存在するかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="858bb8cd938dce0407b131e7aecbe8f7f0e34166" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command and truncate each filename to the first 12 characters.</source>
          <target state="translated">以下のコードは、ls コマンドを呼び出し、各ファイル名を最初の 12 文字まで切り詰めます。</target>
        </trans-unit>
        <trans-unit id="96c71a4810d00e2a53ad0417748ddcd2d89501b6" translate="yes" xml:space="preserve">
          <source>The following code will call the ls command. Note that &lt;code&gt;fish&lt;/code&gt; does not support the use of shell variables as direct commands; &lt;code&gt;eval&lt;/code&gt; can be used to work around this.</source>
          <target state="translated">次のコードはlsコマンドを呼び出します。 &lt;code&gt;fish&lt;/code&gt; は、シェル変数のダイレクトコマンドとしての使用をサポートしていないことに注意してください。 &lt;code&gt;eval&lt;/code&gt; はこれを回避するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ca62666931da18a9248d4ac0f516c18c3953407d" translate="yes" xml:space="preserve">
          <source>The following code will count down from a random even number between 10 and 20 to 1:</source>
          <target state="translated">以下のコードは、10から20までの偶数の乱数から1までカウントダウンします。</target>
        </trans-unit>
        <trans-unit id="b827c00166140f0325b113f6c5ec11ead3608d8d" translate="yes" xml:space="preserve">
          <source>The following code will create &lt;code&gt;rmi&lt;/code&gt;, which runs &lt;code&gt;rm&lt;/code&gt; with additional arguments on every invocation.</source>
          <target state="translated">次のコードは、呼び出しごとに追加の引数を使用して &lt;code&gt;rm&lt;/code&gt; を実行する &lt;code&gt;rmi&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="2bda4fa27dff7ecce2f691a9e2a6631fca487d27" translate="yes" xml:space="preserve">
          <source>The following code will not output anything:</source>
          <target state="translated">以下のコードでは何も出力されません。</target>
        </trans-unit>
        <trans-unit id="ef1c53d0ac92fed4883e8ae1b1d7d027d13ad785" translate="yes" xml:space="preserve">
          <source>The following code will print &quot;foo.txt exists and is readable&quot; if foo.txt is a regular file and readable</source>
          <target state="translated">以下のコードは、foo.txt が通常のファイルで読み込み可能な場合、&quot;foo.txt が存在し、読み込み可能である&quot; と表示されます。</target>
        </trans-unit>
        <trans-unit id="1b900844821e8f04f7dd1574d0cf172ece4e3553" translate="yes" xml:space="preserve">
          <source>The following code will print &lt;code&gt;foo.txt exists&lt;/code&gt; if the file foo.txt exists and is a regular file, otherwise it will print &lt;code&gt;bar.txt exists&lt;/code&gt; if the file bar.txt exists and is a regular file, otherwise it will print &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt;.</source>
          <target state="translated">次のコードが印刷されます &lt;code&gt;foo.txt exists&lt;/code&gt; ファイルfoo.txtのが存在し、通常のファイルであれば、それ以外の場合は、印刷します &lt;code&gt;bar.txt exists&lt;/code&gt; ファイルbar.txtが存在し、通常のファイルであれば、それ以外の場合は、印刷します &lt;code&gt;foo.txt and bar.txt do not exist&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de3876978d90a169388326ae4fae09574262829b" translate="yes" xml:space="preserve">
          <source>The following operations (sub-commands) are available:</source>
          <target state="translated">以下の操作(サブコマンド)が可能です。</target>
        </trans-unit>
        <trans-unit id="87ad7915cdbf5aabf9ec8f4e6f650717a3e51ad5" translate="yes" xml:space="preserve">
          <source>The following options are available:</source>
          <target state="translated">以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="d66ddc0c6de8a95bb5854453416293c96da8d8a9" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; prints the current commandline buffer:</source>
          <target state="translated">次のオプションは、 &lt;code&gt;commandline&lt;/code&gt; が現在のコマンドラインバッファを出力する方法を変更します。</target>
        </trans-unit>
        <trans-unit id="63df7f64ccf12b96665f8dde259ffe470d38015a" translate="yes" xml:space="preserve">
          <source>The following options change the way &lt;code&gt;commandline&lt;/code&gt; updates the command line buffer:</source>
          <target state="translated">次のオプションが途中変更 &lt;code&gt;commandline&lt;/code&gt; コマンド・ライン・バッファを更新します：</target>
        </trans-unit>
        <trans-unit id="74214e3ec02696aeea391992facc065916f44218" translate="yes" xml:space="preserve">
          <source>The following options change what part of the commandline is printed or updated:</source>
          <target state="translated">以下のオプションは、コマンドラインのどの部分が印刷されるか、または更新されるかを変更します。</target>
        </trans-unit>
        <trans-unit id="4caebaf69abe1f045ca9b70c7d77c6343b9dba77" translate="yes" xml:space="preserve">
          <source>The following options control variable scope:</source>
          <target state="translated">以下のオプションは、変数のスコープを制御します。</target>
        </trans-unit>
        <trans-unit id="de38d59c5de4e05441ae91dc9bbb795a1e1439a4" translate="yes" xml:space="preserve">
          <source>The following options output metadata about the commandline state:</source>
          <target state="translated">以下のオプションは、コマンドラインの状態に関するメタデータを出力します。</target>
        </trans-unit>
        <trans-unit id="2cc91c14fc643ec75cd8e42977ab3bf342c34ee4" translate="yes" xml:space="preserve">
          <source>The following parameters are available:</source>
          <target state="translated">以下のパラメータを使用できます。</target>
        </trans-unit>
        <trans-unit id="328c4823c00af02675ec490144bb09f24d6106dd" translate="yes" xml:space="preserve">
          <source>The following special input functions are available:</source>
          <target state="translated">以下のような特殊入力機能があります。</target>
        </trans-unit>
        <trans-unit id="f152dd9767da97d86c0b7bee6016016e58054d4e" translate="yes" xml:space="preserve">
          <source>The following subcommands are available.</source>
          <target state="translated">以下のサブコマンドが利用できます。</target>
        </trans-unit>
        <trans-unit id="58f88b1896d25d9e560265aa1ea2d352215c9687" translate="yes" xml:space="preserve">
          <source>The following variables are available to change the highlighting colors in fish:</source>
          <target state="translated">魚のハイライトカラーを変更するには、以下の変数を使用できます。</target>
        </trans-unit>
        <trans-unit id="b5c283f87142fff645059f0c26d945ecfa72619d" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; (really &lt;code&gt;$__fish_data_dir/functions&lt;/code&gt;).</source>
          <target state="translated">通常、 &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; （実際には &lt;code&gt;$__fish_data_dir/functions&lt;/code&gt; ）にインストールされているfishに付属の関数。</target>
        </trans-unit>
        <trans-unit id="c602bb0a290012cbead72e55c75dd6308e892909" translate="yes" xml:space="preserve">
          <source>The functions shipped with fish, usually installed in &lt;code&gt;/usr/share/fish/functions&lt;/code&gt;.</source>
          <target state="translated">fishに付属する関数で、通常は &lt;code&gt;/usr/share/fish/functions&lt;/code&gt; にインストールされます。</target>
        </trans-unit>
        <trans-unit id="60305ba8888539448dea4b7d945ecc4313728a85" translate="yes" xml:space="preserve">
          <source>The generic key binding that matches if no other binding does can be set by specifying a &lt;code&gt;SEQUENCE&lt;/code&gt; of the empty string (that is, &lt;code&gt;''&lt;/code&gt; ). For most key bindings, it makes sense to bind this to the &lt;code&gt;self-insert&lt;/code&gt; function (i.e. &lt;code&gt;bind '' self-insert&lt;/code&gt;). This will insert any keystrokes not specifically bound to into the editor. Non-printable characters are ignored by the editor, so this will not result in control sequences being inserted.</source>
          <target state="translated">空の文字列（つまり、 &lt;code&gt;''&lt;/code&gt; ）の &lt;code&gt;SEQUENCE&lt;/code&gt; を指定することにより、他のバインディングが一致しない場合に一致する汎用キーバインディングを設定できます。ほとんどのキーバインディングでは、これを &lt;code&gt;self-insert&lt;/code&gt; 関数にバインドすることは理にかなっています（つまり、 &lt;code&gt;bind '' self-insert&lt;/code&gt; ）。これにより、エディターに特にバインドされていないキーストロークが挿入されます。印刷できない文字はエディターによって無視されるため、制御シーケンスが挿入されることはありません。</target>
        </trans-unit>
        <trans-unit id="6f5d264af15f8432fec7957ce6625de24ad79a9e" translate="yes" xml:space="preserve">
          <source>The key sequence (the &lt;code&gt;\cc&lt;/code&gt;) here depends on your setup, in particular the terminal. To find out what the terminal sends use &lt;a href=&quot;cmds/fish_key_reader#cmd-fish-key-reader&quot;&gt;fish_key_reader&lt;/a&gt;:</source>
          <target state="translated">ここでのキーシーケンス（ &lt;code&gt;\cc&lt;/code&gt; ）は、セットアップ、特に端末によって異なります。ターミナルが送信するものを見つけるには、&lt;a href=&quot;cmds/fish_key_reader#cmd-fish-key-reader&quot;&gt;fish_key_reader&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="09152effa3ffc16b24d3fc6b4a6980e177c4d889" translate="yes" xml:space="preserve">
          <source>The language depends on the current locale, set with &lt;code&gt;$LANG&lt;/code&gt; and &lt;code&gt;$LC_MESSAGES&lt;/code&gt;.</source>
          <target state="translated">言語は、 &lt;code&gt;$LANG&lt;/code&gt; および &lt;code&gt;$LC_MESSAGES&lt;/code&gt; で設定された現在のロケールによって異なります。</target>
        </trans-unit>
        <trans-unit id="31d1d74253673e0e00e4ab6d298c6cfbfbe641c4" translate="yes" xml:space="preserve">
          <source>The last value assigned to &lt;code&gt;var&lt;/code&gt; when the loop terminated would not be available outside the loop. What &lt;code&gt;echo $var&lt;/code&gt; would write depended on what it was set to before the loop was run. Likely nothing.</source>
          <target state="translated">ループが終了したときに &lt;code&gt;var&lt;/code&gt; に割り当てられた最後の値は、ループ外では使用できません。何が &lt;code&gt;echo $var&lt;/code&gt; 、それがループを実行する前に設定したものに依存して書きます。おそらくない。</target>
        </trans-unit>
        <trans-unit id="a484c97c564e9f2294dccdee0326b8d8bb53aff4" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; is a special case of &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="translated">後者の構文 &lt;code&gt;{$WORD}&lt;/code&gt; は、中&lt;a href=&quot;#expand-brace&quot;&gt;括弧拡張の&lt;/a&gt;特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="4b5d758036d63a8bf5273befa9ba2de30bb1d084" translate="yes" xml:space="preserve">
          <source>The latter syntax &lt;code&gt;{$WORD}&lt;/code&gt; works by exploiting &lt;a href=&quot;#expand-brace&quot;&gt;brace expansion&lt;/a&gt;.</source>
          <target state="translated">後者の構文 &lt;code&gt;{$WORD}&lt;/code&gt; は、&lt;a href=&quot;#expand-brace&quot;&gt;ブレース展開を&lt;/a&gt;利用することで機能します。</target>
        </trans-unit>
        <trans-unit id="003f5cfaee3e7c8f053961483130a113e4a771af" translate="yes" xml:space="preserve">
          <source>The locale variables &lt;code&gt;LANG&lt;/code&gt;, &lt;code&gt;LC_ALL&lt;/code&gt;, &lt;code&gt;LC_COLLATE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt;, &lt;code&gt;LC_MESSAGES&lt;/code&gt;, &lt;code&gt;LC_MONETARY&lt;/code&gt;, &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_TIME&lt;/code&gt; set the language option for the shell and subprograms. See the section &lt;a href=&quot;#variables-locale&quot;&gt;Locale variables&lt;/a&gt; for more information.</source>
          <target state="translated">ロケール変数 &lt;code&gt;LANG&lt;/code&gt; 、 &lt;code&gt;LC_ALL&lt;/code&gt; 、 &lt;code&gt;LC_COLLATE&lt;/code&gt; 、 &lt;code&gt;LC_CTYPE&lt;/code&gt; 、 &lt;code&gt;LC_MESSAGES&lt;/code&gt; 、 &lt;code&gt;LC_MONETARY&lt;/code&gt; 、 &lt;code&gt;LC_NUMERIC&lt;/code&gt; 、および &lt;code&gt;LC_TIME&lt;/code&gt; は、シェルとサブプログラムの言語オプションを設定します。詳細については、&lt;a href=&quot;#variables-locale&quot;&gt;ロケール変数&lt;/a&gt;のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4f2d87c31efe5a5242aff1d1ac9d16a3f6f17fb6" translate="yes" xml:space="preserve">
          <source>The locale variables are: &lt;code&gt;LANG&lt;/code&gt;, &lt;code&gt;LC_ALL&lt;/code&gt;, &lt;code&gt;LC_COLLATE&lt;/code&gt;, &lt;code&gt;LC_CTYPE&lt;/code&gt;, &lt;code&gt;LC_MESSAGES&lt;/code&gt;, &lt;code&gt;LC_MONETARY&lt;/code&gt;, &lt;code&gt;LC_NUMERIC&lt;/code&gt; and &lt;code&gt;LC_TIME&lt;/code&gt;. These variables work as follows: &lt;code&gt;LC_ALL&lt;/code&gt; forces all the aspects of the locale to the specified value. If &lt;code&gt;LC_ALL&lt;/code&gt; is set, all other locale variables will be ignored (this is typically not recommended!). The other &lt;code&gt;LC_&lt;/code&gt; variables set the specified aspect of the locale information. &lt;code&gt;LANG&lt;/code&gt; is a fallback value, it will be used if none of the &lt;code&gt;LC_&lt;/code&gt; variables are specified.</source>
          <target state="translated">ロケール変数は、 &lt;code&gt;LANG&lt;/code&gt; 、 &lt;code&gt;LC_ALL&lt;/code&gt; 、 &lt;code&gt;LC_COLLATE&lt;/code&gt; 、 &lt;code&gt;LC_CTYPE&lt;/code&gt; 、 &lt;code&gt;LC_MESSAGES&lt;/code&gt; 、 &lt;code&gt;LC_MONETARY&lt;/code&gt; 、 &lt;code&gt;LC_NUMERIC&lt;/code&gt; 、および &lt;code&gt;LC_TIME&lt;/code&gt; です。これらの変数は次のように機能します &lt;code&gt;LC_ALL&lt;/code&gt; は、ロケールのすべての側面を指定された値に強制します。 &lt;code&gt;LC_ALL&lt;/code&gt; が設定されている場合、他のすべてのロケール変数は無視されます（これは通常推奨されません！）。他の &lt;code&gt;LC_&lt;/code&gt; 変数は、ロケール情報の指定された側面を設定します。 &lt;code&gt;LANG&lt;/code&gt; はフォールバック値であり、 &lt;code&gt;LC_&lt;/code&gt; 変数が指定されていない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="af91f79f8373488bcf43ad9d85211f47c5490d9e" translate="yes" xml:space="preserve">
          <source>The long answer:</source>
          <target state="translated">長い答えだ</target>
        </trans-unit>
        <trans-unit id="3bc04ce8ee0aaf5de96a68984a57d83e6ba0f996" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like 'set -x LANG en_GB.utf8', which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. For a list of available locales, use 'locale -a'.</source>
          <target state="translated">ロケールを設定する最も一般的な方法は、'set -x LANG en_GB.utf8' のようなコマンドを使用することです。利用可能なロケールの一覧は 'locale -a' を使用してください。</target>
        </trans-unit>
        <trans-unit id="09535cffbe3c2afe43b7f4429fbeb021277bbe52" translate="yes" xml:space="preserve">
          <source>The most common way to set the locale to use a command like &lt;code&gt;set -gx LANG en_GB.utf8&lt;/code&gt;, which sets the current locale to be the English language, as used in Great Britain, using the UTF-8 character set. That way any program that requires one setting differently can easily override just that and doesn't have to resort to LC_ALL. For a list of available locales on your system, try &lt;code&gt;locale -a&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set -gx LANG en_GB.utf8&lt;/code&gt; のようなコマンドを使用してロケールを設定する最も一般的な方法。このコマンドは、UTF-8文字セットを使用して、現在のロケールを英国で使用されている英語に設定します。そうすれば、1つの設定を異なる方法で必要とするプログラムは、それを簡単にオーバーライドでき、LC_ALLに頼る必要はありません。システムで使用可能なロケールのリストについては、 &lt;code&gt;locale -a&lt;/code&gt; 試してください。</target>
        </trans-unit>
        <trans-unit id="08f8a0f7d2af2ecdf29f96a294a1554c9c3b5a41" translate="yes" xml:space="preserve">
          <source>The names given to shell objects like variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define what sequences of characters are valid to use.</source>
          <target state="translated">変数や関数名のようなシェルオブジェクトに与えられる名前は「識別子」として知られています。それぞれのタイプの識別子には、使用するのに有効な文字列を定義するルールがあります。</target>
        </trans-unit>
        <trans-unit id="65aa63047471b9a76e26dd8f43f5899f1292feb3" translate="yes" xml:space="preserve">
          <source>The names given to shell objects such as variables and function names are known as &quot;identifiers&quot;. Each type of identifier has rules that define the valid sequence of characters which compose the identifier.</source>
          <target state="translated">変数や関数名などのシェルオブジェクトに与えられる名前は「識別子」として知られています。各タイプの識別子には、識別子を構成する有効な文字列を定義するルールがあります。</target>
        </trans-unit>
        <trans-unit id="c3e07e91f8f96b0293f87a0e2d848d2b640fb2eb" translate="yes" xml:space="preserve">
          <source>The names given to variables and functions (so called &quot;identifiers&quot;) have to follow certain rules:</source>
          <target state="translated">変数や関数に付ける名前(いわゆる「識別子」)は、一定のルールに従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="2fe3f46a59e146e352f1c4758de7a57641a2c629" translate="yes" xml:space="preserve">
          <source>The names of these variables are mostly derived from the csh family of shells and differ from the ones used by Bourne style shells such as bash.</source>
          <target state="translated">これらの変数の名前はほとんどの場合、シェルの csh ファミリーに由来しており、 bash のようなボーンスタイルのシェルで使われているものとは異なります。</target>
        </trans-unit>
        <trans-unit id="d0bbdfdf4f6bd58e59535b30b244a24f5c9c7616" translate="yes" xml:space="preserve">
          <source>The official &lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;Gitter channel&lt;/a&gt;</source>
          <target state="translated">公式&lt;a href=&quot;https://gitter.im/fish-shell/fish-shell&quot;&gt;Gitterチャンネル&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0cdd8d204de3244af011ba40dd2e1e03a80c3965" translate="yes" xml:space="preserve">
          <source>The official mailing list at &lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://lists.sourceforge.net/lists/listinfo/fish-users&quot;&gt;fish-users@lists.sourceforge.net&lt;/a&gt;の公式メーリングリスト</target>
        </trans-unit>
        <trans-unit id="e4e7f0cf7342207349af3cfc04732168d9c47e27" translate="yes" xml:space="preserve">
          <source>The only backslash escape accepted within single quotes is &lt;code&gt;\'&lt;/code&gt;, which escapes a single quote and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. The only backslash escapes accepted within double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and lastly &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. Single quotes have no special meaning within double quotes and vice versa.</source>
          <target state="translated">一重引用符内で受け入れられるバックスラッシュエスケープは、一重引用符をエスケープする &lt;code&gt;\'&lt;/code&gt; と、バックスラッシュ記号をエスケープする &lt;code&gt;\\&lt;/code&gt; だけです。二重引用符で受け入れられた唯一のバックスラッシュエスケープは &lt;code&gt;\&quot;&lt;/code&gt; 二重引用符、逃げる、 &lt;code&gt;\$&lt;/code&gt; ドル記号、逃げる、 &lt;code&gt;\&lt;/code&gt; 最後に改行が続き、バックスラッシュと改行を削除し、 &lt;code&gt;\\&lt;/code&gt; バックスラッシュをエスケープし、記号。一重引用符は二重引用符内で特別な意味を持ちません。その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="c9442b55259d81b4b21486be4ca1ced11f021b67" translate="yes" xml:space="preserve">
          <source>The only meaningful escape sequences in single quotes are &lt;code&gt;\'&lt;/code&gt;, which escapes a single quote and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol. The only meaningful escapes in double quotes are &lt;code&gt;\&quot;&lt;/code&gt;, which escapes a double quote, &lt;code&gt;\$&lt;/code&gt;, which escapes a dollar character, &lt;code&gt;\&lt;/code&gt; followed by a newline, which deletes the backslash and the newline, and &lt;code&gt;\\&lt;/code&gt;, which escapes the backslash symbol.</source>
          <target state="translated">一重引用符で囲まれた唯一の意味のあるエスケープシーケンスは、一重引用符をエスケープする &lt;code&gt;\'&lt;/code&gt; と、円記号をエスケープする &lt;code&gt;\\&lt;/code&gt; です。二重引用符でのみ意味を持つエスケープがある &lt;code&gt;\&quot;&lt;/code&gt; 二重引用符、逃げる、 &lt;code&gt;\$&lt;/code&gt; ドル文字をエスケープし、 &lt;code&gt;\&lt;/code&gt; バックスラッシュと改行、および削除改行、続い &lt;code&gt;\\&lt;/code&gt; バックスラッシュ記号をエスケープ、。</target>
        </trans-unit>
        <trans-unit id="341137762021767c1bcfe1d4e89d1efb6ab672f6" translate="yes" xml:space="preserve">
          <source>The open command doesn't work.</source>
          <target state="translated">オープンコマンドが効かない</target>
        </trans-unit>
        <trans-unit id="1270e20d3a3df8e1f5346556fc472ccabc75c9c8" translate="yes" xml:space="preserve">
          <source>The options for specifying command name and command path may be used multiple times to define the same completions for multiple commands.</source>
          <target state="translated">コマンド名とコマンドパスを指定するオプションは、複数のコマンドに対して同じ補完を定義するために複数回使用することができます。</target>
        </trans-unit>
        <trans-unit id="ff3a156169840aa3d5e264e866d9a002dac09c1f" translate="yes" xml:space="preserve">
          <source>The options for specifying command switches and wrapped commands may be used multiple times to define multiple completions for the command(s) in a single call.</source>
          <target state="translated">コマンドスイッチやラッピングコマンドを指定するためのオプションは、1回の呼び出しでコマンドの複数の補完を定義するために複数回使用することができます。</target>
        </trans-unit>
        <trans-unit id="167492ae418de8b794d088cd0b8696f7eb1da125" translate="yes" xml:space="preserve">
          <source>The options will be &lt;em&gt;removed&lt;/em&gt; from $argv, so $argv[2] is the second &lt;em&gt;positional&lt;/em&gt; argument now:</source>
          <target state="translated">オプションは$ argvから&lt;em&gt;削除さ&lt;/em&gt;れるため、$ argv [2]は2番目の&lt;em&gt;位置&lt;/em&gt;引数になります。</target>
        </trans-unit>
        <trans-unit id="cad33245af3be3da37e9c1809228a2452469da24" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed.</source>
          <target state="translated">他の条件は、コマンドの&lt;a href=&quot;#variables-status&quot;&gt;終了ステータス&lt;/a&gt;を使用して、コマンドまたはコマンドのブロックを実行する必要があるかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="514a8bdf395655769cdf0c1f52c06c11623edf78" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See the documentation for &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">他の条件&lt;a href=&quot;#variables-status&quot;&gt;文&lt;/a&gt;は、コマンドの終了ステータスを使用して、コマンドまたはコマンドのブロックを実行する必要があるかどうかを決定します。詳細については、&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;のドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="dfcf59b6a13b148c10967aa98c28930a4e9e12a5" translate="yes" xml:space="preserve">
          <source>The other conditionals use the &lt;a href=&quot;#variables-status&quot;&gt;exit status&lt;/a&gt; of a command to decide if a command or a block of commands should be executed. See their documentation for more information.</source>
          <target state="translated">他の条件は、コマンドの&lt;a href=&quot;#variables-status&quot;&gt;終了ステータス&lt;/a&gt;を使用して、コマンドまたはコマンドのブロックを実行する必要があるかどうかを決定します。詳細については、ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1764743bcfc6b735a5f4be8e624a42400f8a284e" translate="yes" xml:space="preserve">
          <source>The output is padded to the maximum width of all input strings. If &lt;code&gt;-w&lt;/code&gt; or &lt;code&gt;--width&lt;/code&gt; is given, use at least that.</source>
          <target state="translated">出力は、すべての入力文字列の最大幅まで埋め込まれます。もし &lt;code&gt;-w&lt;/code&gt; または &lt;code&gt;--width&lt;/code&gt; 与えられ、少なくともその使用。</target>
        </trans-unit>
        <trans-unit id="08c811383629f8638c43b331b8903700d8404bb5" translate="yes" xml:space="preserve">
          <source>The output of a command (or an entire &lt;a href=&quot;#pipes&quot;&gt;pipeline&lt;/a&gt;) can be used as the arguments to another command.</source>
          <target state="translated">コマンドの出力（または&lt;a href=&quot;#pipes&quot;&gt;パイプライン&lt;/a&gt;全体）は、別のコマンドの引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="a2490e597900e8176c6a2c4a4584d5571260ded3" translate="yes" xml:space="preserve">
          <source>The output of a series of commands can be used as the parameters to another command. If a parameter contains a set of parenthesis, the text enclosed by the parenthesis will be interpreted as a list of commands. On expansion, this list is executed, and substituted by the output. If the output is more than one line long, each line will be expanded to a new parameter. Setting &lt;code&gt;IFS&lt;/code&gt; to the empty string will disable line splitting.</source>
          <target state="translated">一連のコマンドの出力は、別のコマンドのパラメーターとして使用できます。パラメータに一連の括弧が含まれている場合、括弧で囲まれたテキストはコマンドのリストとして解釈されます。展開時に、このリストが実行され、出力に置き換えられます。出力が複数行の場合、各行は新しいパラメーターに展開されます。 &lt;code&gt;IFS&lt;/code&gt; を空の文字列に設定すると、行分割が無効になります。</target>
        </trans-unit>
        <trans-unit id="31f457d4448ccae4818e31a09dc55489e017a791" translate="yes" xml:space="preserve">
          <source>The pager can be navigated with the arrow keys,</source>
          <target state="translated">ページャーは、矢印キーで操作できます。</target>
        </trans-unit>
        <trans-unit id="c076b2b362e357c8c787010692c3897b0cde8acf" translate="yes" xml:space="preserve">
          <source>The previous test can likewise be inverted:</source>
          <target state="translated">前のテストも同様に反転させることができます。</target>
        </trans-unit>
        <trans-unit id="ddedd2674467015f6a5beb34ee2fbb835520f26b" translate="yes" xml:space="preserve">
          <source>The programs &lt;code&gt;man&lt;/code&gt; and &lt;code&gt;whatis&lt;/code&gt; show all installed manual pages as completions.</source>
          <target state="translated">プログラム &lt;code&gt;man&lt;/code&gt; と &lt;code&gt;whatis&lt;/code&gt; は、インストールされているすべてのマニュアルページを補完として表示します。</target>
        </trans-unit>
        <trans-unit id="923e6b118fb538f4ca8e8f67ca4698c422b3b072" translate="yes" xml:space="preserve">
          <source>The prompt is the output of the &lt;code&gt;fish_prompt&lt;/code&gt; function. Put it in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. For example, a simple prompt is:</source>
          <target state="translated">プロンプトは、 &lt;code&gt;fish_prompt&lt;/code&gt; 関数の出力です。で、それを入れて &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt; 。たとえば、簡単なプロンプトは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f6c98e8413fa41203c749875900025da16302aca" translate="yes" xml:space="preserve">
          <source>The reason for providing for two output file descriptors is to allow separation of errors and warnings from regular program output.</source>
          <target state="translated">2つの出力ファイル記述子を提供する理由は、通常のプログラム出力からエラーと警告を分離できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="1c641b43a1ed9a01749c093f3a5864403b12f91c" translate="yes" xml:space="preserve">
          <source>The return status is 1 if any &lt;code&gt;REASON&lt;/code&gt; is invalid; otherwise trap returns 0.</source>
          <target state="translated">いずれかの &lt;code&gt;REASON&lt;/code&gt; が無効な場合、戻りステータスは1です。それ以外の場合、トラップは0を返します。</target>
        </trans-unit>
        <trans-unit id="eec28e525883ec2bf359aa9ac84f19012ae7983d" translate="yes" xml:space="preserve">
          <source>The return status of &lt;code&gt;source&lt;/code&gt; is the return status of the last job to execute. If something goes wrong while opening or reading the file, &lt;code&gt;source&lt;/code&gt; exits with a non-zero status.</source>
          <target state="translated">戻りステータス &lt;code&gt;source&lt;/code&gt; 実行するための最後のジョブの戻り状態です。ファイルのオープンまたは読み取り中に問題が発生した場合、 &lt;code&gt;source&lt;/code&gt; はゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="1c30a73e8a51035e518bdfeccb5ae03bbba2a49e" translate="yes" xml:space="preserve">
          <source>The same works when setting or expanding variables:</source>
          <target state="translated">変数を設定したり展開したりしても同じように動作します。</target>
        </trans-unit>
        <trans-unit id="0df43a9567e35d287e4e0a64578b1540c9c5524d" translate="yes" xml:space="preserve">
          <source>The scoping rules when creating or updating a variable are:</source>
          <target state="translated">変数の作成時や更新時のスコープルールは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="af1ca2dded8974103c58a768e1e91d3d877d12bd" translate="yes" xml:space="preserve">
          <source>The script should write any error messages to stdout, not stderr. It should return a status of zero if the flag value is valid otherwise a non-zero status to indicate it is invalid.</source>
          <target state="translated">スクリプトはエラーメッセージを標準エラーではなく標準出力に書き込むべきです。フラグの値が有効な場合はゼロのステータスを返し、そうでない場合は無効であることを示すためにゼロ以外のステータスを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="ea5694e15d95ca5a5e96c990e236cff7fa4686dd" translate="yes" xml:space="preserve">
          <source>The second part of a right specifies the mode, and can be one of &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, where &lt;code&gt;=&lt;/code&gt; specifies that the rights should be set to the new value, &lt;code&gt;+&lt;/code&gt; specifies that the specified right should be added to those previously specified and &lt;code&gt;-&lt;/code&gt; specifies that the specified rights should be removed from those previously specified.</source>
          <target state="translated">権限の2番目の部分はモードを指定し、 &lt;code&gt;=&lt;/code&gt; 、 &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; のいずれかです。ここで &lt;code&gt;=&lt;/code&gt; は権限を新しい値に設定することを指定し、 &lt;code&gt;+&lt;/code&gt; は指定した権限を以前に指定した権限に追加することを指定し、 &lt;code&gt;-&lt;/code&gt; 指定した権限を以前に指定した権限から削除する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="38928de4a99cf4b1b80ad161ac8d51a39f94774f" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires one of &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;skip&lt;/code&gt; or &lt;code&gt;recurse&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;grep&lt;/code&gt; コマンドの短いスタイルオプション &lt;code&gt;-d&lt;/code&gt; には、 &lt;code&gt;read&lt;/code&gt; 、 &lt;code&gt;skip&lt;/code&gt; または &lt;code&gt;recurse&lt;/code&gt; いずれかが必要です。</target>
        </trans-unit>
        <trans-unit id="7823c527da5d40f4505f5d7ca9cee1dbf65bd935" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-d&lt;/code&gt; for the &lt;code&gt;grep&lt;/code&gt; command requires that one of the strings '&lt;code&gt;read&lt;/code&gt;', '&lt;code&gt;skip&lt;/code&gt;' or '&lt;code&gt;recurse&lt;/code&gt;' is used. This can be specified writing:</source>
          <target state="translated">オプションはショートスタイル &lt;code&gt;-d&lt;/code&gt; ため &lt;code&gt;grep&lt;/code&gt; コマンドは、文字列「のいずれかが必要です &lt;code&gt;read&lt;/code&gt; 」、「 &lt;code&gt;skip&lt;/code&gt; 」または「 &lt;code&gt;recurse&lt;/code&gt; 」が使用されます。これは次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="47faeb09fe72243db57c3e0978defbb0c093d69c" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command needs a file argument:</source>
          <target state="translated">&lt;code&gt;gcc&lt;/code&gt; コマンドの短いスタイルオプション &lt;code&gt;-o&lt;/code&gt; には、ファイル引数が必要です。</target>
        </trans-unit>
        <trans-unit id="21aef96d543138db0f5113aa8c694e877221993a" translate="yes" xml:space="preserve">
          <source>The short style option &lt;code&gt;-o&lt;/code&gt; for the &lt;code&gt;gcc&lt;/code&gt; command requires that a file follows it. This can be done using writing:</source>
          <target state="translated">ショートスタイルオプション &lt;code&gt;-o&lt;/code&gt; 用 &lt;code&gt;gcc&lt;/code&gt; コマンドは、ファイルがそれに従うことが必要です。これは、書き込みを使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="d1b22e71e7a777d09a79f935b2d1b50d368962c0" translate="yes" xml:space="preserve">
          <source>The special characters and their escape sequences are:</source>
          <target state="translated">特殊文字とそのエスケープシーケンスは</target>
        </trans-unit>
        <trans-unit id="65b2e415c1ad09956265d420e5d30ef098fe39f3" translate="yes" xml:space="preserve">
          <source>The status symbols themselves:</source>
          <target state="translated">ステータスシンボルそのもの。</target>
        </trans-unit>
        <trans-unit id="a7c9c314ad94ef58d396d8ee54dfb17c9688e5cf" translate="yes" xml:space="preserve">
          <source>The status variable</source>
          <target state="translated">ステータス変数</target>
        </trans-unit>
        <trans-unit id="3d79b5f2fb8b7ff9607cb6173124ce2876018175" translate="yes" xml:space="preserve">
          <source>The string FORMAT should contain format specifiers, each of which are replaced with successive arguments according to the specifier. Specifiers are detailed below, and are taken from the C library function &lt;code&gt;printf(3)&lt;/code&gt;.</source>
          <target state="translated">文字列FORMATにはフォーマット指定子を含める必要があります。フォーマット指定子はそれぞれ、指定子に従って連続した引数に置き換えられます。指定子の詳細は以下のとおりで、Cライブラリ関数 &lt;code&gt;printf(3)&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="3834fb20eb3adec382d678c86de21e4a50afed73" translate="yes" xml:space="preserve">
          <source>The svn prompt is disabled by default because it's slow on large svn repositories. To enable it, modify fish_vcs_prompt to uncomment it. See &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced&lt;/a&gt;.</source>
          <target state="translated">svnプロンプトは、大きなsvnリポジトリでは遅いため、デフォルトでは無効になっています。これを有効にするには、fish_vcs_promptを変更してコメントを解除します。&lt;a href=&quot;funced#cmd-funced&quot;&gt;funcedを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="78761829292527d745af43c24666b70964c2aa8e" translate="yes" xml:space="preserve">
          <source>The third part of a right specifies what rights should be changed and can be any combination of &lt;code&gt;r&lt;/code&gt;, &lt;code&gt;w&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, representing read, write and execute rights.</source>
          <target state="translated">権利の3番目の部分は、変更する必要がある権利を指定し、読み取り、書き込み、および実行の権利を表す、 &lt;code&gt;r&lt;/code&gt; 、 &lt;code&gt;w&lt;/code&gt; 、および &lt;code&gt;x&lt;/code&gt; の任意の組み合わせにすることができます。</target>
        </trans-unit>
        <trans-unit id="d877ece01d39e8e40eb99d98ee821a1189d44e6e" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;a href=&quot;bind#cmd-bind&quot;&gt;bind&lt;/a&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="translated">このツールは、キャプチャされた文字シーケンスをstdoutに一致させる&lt;a href=&quot;bind#cmd-bind&quot;&gt;バインド&lt;/a&gt;コマンドの例を記述します。文字シーケンスが特別なキー名と一致する場合（ &lt;code&gt;bind --key-names&lt;/code&gt; を参照）、 &lt;code&gt;bind CHARS ...&lt;/code&gt; と &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; - k KEYNAME ...の両方の使用法が表示されます。文字間の遅延など、受信した文字に関する追加の詳細は、stderrに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f6aea30b4125640db0c941f62792d8db2583d13d" translate="yes" xml:space="preserve">
          <source>The tool will write an example &lt;code&gt;bind&lt;/code&gt; command matching the character sequence captured to stdout. If the character sequence matches a special key name (see &lt;code&gt;bind --key-names&lt;/code&gt;), both &lt;code&gt;bind CHARS ...&lt;/code&gt; and &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; usage will be shown. Additional details about the characters received, such as the delay between chars, are written to stderr.</source>
          <target state="translated">ツールは、標準出力にキャプチャされた文字シーケンスに一致 &lt;code&gt;bind&lt;/code&gt; コマンドの例を記述します。文字シーケンスが特殊なキー名に一致する場合（ &lt;code&gt;bind --key-names&lt;/code&gt; を参照）、 &lt;code&gt;bind CHARS ...&lt;/code&gt; と &lt;code&gt;bind -k KEYNAME ...&lt;/code&gt; の両方の使用法が表示されます。文字間の遅延など、受け取った文字に関する追加の詳細は、stderrに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="33a16e681c6b2de523ee079730543d5aaaa072a3" translate="yes" xml:space="preserve">
          <source>The umask may be expressed either as an octal number, which represents the rights that will be removed by default, or symbolically, which represents the only rights that will be granted by default.</source>
          <target state="translated">umaskは、デフォルトで削除される権利を表す8進数で表現するか、デフォルトで付与される権利のみを表す記号で表現することができます。</target>
        </trans-unit>
        <trans-unit id="ff67961119e87010a71ffb5f982a7874fbd862b2" translate="yes" xml:space="preserve">
          <source>The user can change the settings of &lt;code&gt;fish&lt;/code&gt; by changing the values of certain variables.</source>
          <target state="translated">ユーザーは、特定の変数の値を変更することにより、 &lt;code&gt;fish&lt;/code&gt; の設定を変更できます。</target>
        </trans-unit>
        <trans-unit id="750b14e6fcc9f04250c8bd648ed58f679784632d" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a &lt;em&gt;pipeline&lt;/em&gt;. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">ユーザーは、複数のコマンドを&lt;em&gt;パイプラインに&lt;/em&gt;まとめることができます。これは、あるコマンドの標準出力が次のコマンドへの標準入力として読み込まれることを意味します。これは、コマンドをパイプ文字 ' &lt;code&gt;|&lt;/code&gt; で区切ることによって行われます。'。例えば</target>
        </trans-unit>
        <trans-unit id="92734526becf97d0102e67503ae3f5ec70437f52" translate="yes" xml:space="preserve">
          <source>The user can string together multiple commands into a so called pipeline. This means that the standard output of one command will be read in as standard input into the next command. This is done by separating the commands by the pipe character '&lt;code&gt;|&lt;/code&gt;'. For example</source>
          <target state="translated">ユーザーは、いわゆるパイプラインに複数のコマンドをつなぎ合わせることができます。これは、1つのコマンドの標準出力が標準入力として次のコマンドに読み込まれることを意味します。これは、コマンドをパイプ文字 ' &lt;code&gt;|&lt;/code&gt; で区切ることによって行われます。'。例えば</target>
        </trans-unit>
        <trans-unit id="7b8b4db39167ca73155b4a80905652bbe883d472" translate="yes" xml:space="preserve">
          <source>The value of limit can be a number in the unit specified for the resource or one of the special values &lt;code&gt;hard&lt;/code&gt;, &lt;code&gt;soft&lt;/code&gt;, or &lt;code&gt;unlimited&lt;/code&gt;, which stand for the current hard limit, the current soft limit, and no limit, respectively.</source>
          <target state="translated">limitの値は、リソースに指定された単位の数値、または現在のハード制限、現在のソフト制限、制限なしをそれぞれ表す特別な値 &lt;code&gt;hard&lt;/code&gt; 、 &lt;code&gt;soft&lt;/code&gt; 、または &lt;code&gt;unlimited&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9ca665e6a6512b8a0c95bbf980b6d1f431c9c003" translate="yes" xml:space="preserve">
          <source>The variables will be set with local scope (i.e., as if the script had done &lt;code&gt;set -l _flag_X&lt;/code&gt;). If the flag is a boolean (that is, it just is passed or not, it doesn't have a value) the values are the short and long flags seen. If the option is not a boolean the values will be zero or more values corresponding to the values collected when the ARG list is processed. If the flag was not seen the flag variable will not be set.</source>
          <target state="translated">変数はローカルスコープで設定されます（つまり、スクリプトが &lt;code&gt;set -l _flag_X&lt;/code&gt; を実行したかのように）。フラグがブール値である場合（つまり、渡されるかどうか、値がない場合）、値は表示される短いフラグと長いフラグです。オプションがブール値でない場合、値は、ARGリストの処理時に収集された値に対応する0個以上の値になります。フラグが表示されなかった場合、フラグ変数は設定されません。</target>
        </trans-unit>
        <trans-unit id="ea2f6068a9dad88efc3494909770d142904666d0" translate="yes" xml:space="preserve">
          <source>The web interface allows you to view your functions, variables and history, and to make changes to your prompt and color configuration.</source>
          <target state="translated">ウェブインタフェースでは、関数、変数、履歴を表示したり、プロンプトや色の設定を変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="27cd5ebce2dff7c39841e898f946a341a35b41e4" translate="yes" xml:space="preserve">
          <source>Then the following invocations behave like this:</source>
          <target state="translated">すると、次の呼び出しは次のように動作します。</target>
        </trans-unit>
        <trans-unit id="20c1373ed37a3dee3a825fe7d548ac46a6928bf3" translate="yes" xml:space="preserve">
          <source>Then, if you are happy with it, you can save it to disk by typing &lt;code&gt;funcsave fish_prompt&lt;/code&gt;. This saves the prompt in &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt;. (Or, if you want, you can create that file manually from the start.)</source>
          <target state="translated">次に、問題がなければ、 &lt;code&gt;funcsave fish_prompt&lt;/code&gt; 入力してディスクに保存できます。これにより、プロンプトが &lt;code&gt;~/.config/fish/functions/fish_prompt.fish&lt;/code&gt; ます。（または、必要に応じて、最初からそのファイルを手動で作成できます。）</target>
        </trans-unit>
        <trans-unit id="fa54c06d5fdedec560ab96fcbf9871934330e6d3" translate="yes" xml:space="preserve">
          <source>There are a few important things that need to be noted about aliases:</source>
          <target state="translated">エイリアスについて注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a92222b51e2c8f981924f999522d99c277c7fff5" translate="yes" xml:space="preserve">
          <source>There are a few possible uses for different scopes.</source>
          <target state="translated">スコープの違いによる用途はいくつか考えられます。</target>
        </trans-unit>
        <trans-unit id="2bead6244a797e147f47c59aa8f116fc1866372d" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;cmds/complete#cmd-complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">受け入れられた各種スイッチの完全な説明については、いくつかの組み合わせ、など。でのみ利用可能です補完作成するには、無効ファイル名補完に、スイッチは引数が必要であることを指定するための特別なスイッチでもあり &lt;code&gt;complete&lt;/code&gt; コマンドは、ドキュメントを参照してください、以下のための&lt;a href=&quot;cmds/complete#cmd-complete&quot;&gt;完全な&lt;/a&gt;組み込み、または書き込み &lt;code&gt;complete --help&lt;/code&gt; 内部の &lt;code&gt;fish&lt;/code&gt; 貝。</target>
        </trans-unit>
        <trans-unit id="3ba25ca105726fc0d596821887908ff16a459bda" translate="yes" xml:space="preserve">
          <source>There are also special switches for specifying that a switch requires an argument, to disable filename completion, to create completions that are only available in some combinations, etc.. For a complete description of the various switches accepted by the &lt;code&gt;complete&lt;/code&gt; command, see the documentation for the &lt;a href=&quot;commands#complete&quot;&gt;complete&lt;/a&gt; builtin, or write &lt;code&gt;complete --help&lt;/code&gt; inside the &lt;code&gt;fish&lt;/code&gt; shell.</source>
          <target state="translated">受け入れられた各種スイッチの完全な説明については、いくつかの組み合わせ、など。でのみ利用可能です補完作成するには、無効ファイル名補完に、スイッチは引数が必要であることを指定するための特別なスイッチでもあり &lt;code&gt;complete&lt;/code&gt; コマンドは、ドキュメントを参照してください、以下のための&lt;a href=&quot;commands#complete&quot;&gt;完全な&lt;/a&gt;組み込み、または書き込み &lt;code&gt;complete --help&lt;/code&gt; 内部の &lt;code&gt;fish&lt;/code&gt; 貝。</target>
        </trans-unit>
        <trans-unit id="8f62b81b574864e97ff42dca00b7081081edae35" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;cmds/if#cmd-if&quot;&gt;if&lt;/a&gt;, &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;, &lt;a href=&quot;cmds/and#cmd-and&quot;&gt;and&lt;/a&gt; and &lt;a href=&quot;cmds/or#cmd-or&quot;&gt;or&lt;/a&gt;.</source>
          <target state="translated">特定の基準が満たされた場合にのみコマンドを実行できる4つの魚の組み込みがあります。これらの組み込みコマンドがある&lt;a href=&quot;cmds/if#cmd-if&quot;&gt;場合は&lt;/a&gt;、&lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;スイッチ&lt;/a&gt;、&lt;a href=&quot;cmds/and#cmd-and&quot;&gt;および&lt;/a&gt;および&lt;a href=&quot;cmds/or#cmd-or&quot;&gt;または&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2d9df96be8b6a2362ccd2ca558b23ccf8d96cd57" translate="yes" xml:space="preserve">
          <source>There are four fish builtins that let you execute commands only if a specific criterion is met. These builtins are &lt;a href=&quot;commands#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#switch&quot;&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;commands#and&quot;&gt;&lt;code&gt;and&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;commands#or&quot;&gt;&lt;code&gt;or&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の基準が満たされた場合にのみコマンドを実行できる4つの魚の組み込みがあります。これらの組み込みは&lt;a href=&quot;commands#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#switch&quot;&gt; &lt;code&gt;switch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#and&quot;&gt; &lt;code&gt;and&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;commands#or&quot;&gt; &lt;code&gt;or&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="2b2d351b6ae375a8f6e30f9a4f15f06461eb44b4" translate="yes" xml:space="preserve">
          <source>There are no multiline comments. If you want to make a comment span multiple lines, simply start each line with a &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">複数行コメントはありません。コメントを複数行にまたがらせる場合は、各行を &lt;code&gt;#&lt;/code&gt; で始めます。</target>
        </trans-unit>
        <trans-unit id="41675f9cf420970709f08c4fa09e126c6834d476" translate="yes" xml:space="preserve">
          <source>There are no options to control globbing so it always behaves like that.</source>
          <target state="translated">グロブを制御するオプションはないので、常にそのように動作します。</target>
        </trans-unit>
        <trans-unit id="255b5925229ebf64b3dccbaf56f554bfda33418a" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; のパラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="a56ebf43ed98e5db43b2052e83aa4d07a4140747" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;breakpoint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;breakpoint&lt;/code&gt; のパラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="c25f17ac972a261d801c33ab7a6b142dc2017014" translate="yes" xml:space="preserve">
          <source>There are no parameters for &lt;code&gt;fish_update_completions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fish_update_completions&lt;/code&gt; のパラメーターはありません。</target>
        </trans-unit>
        <trans-unit id="b64e5bca9c9d038dcdaec525201a6e983cd4c039" translate="yes" xml:space="preserve">
          <source>There are numerous customization options, which can be controlled with fish variables.</source>
          <target state="translated">数多くのカスタマイズオプションがあり、魚の変数で制御することができます。</target>
        </trans-unit>
        <trans-unit id="416f9bfa834c4b421dc3928904fcdb14dcbe03e2" translate="yes" xml:space="preserve">
          <source>There are numerous customization options, which can be controlled with git options or fish variables. git options, where available, take precedence over the fish variable with the same function. git options can be set on a per-repository or global basis. git options can be set with the &lt;code&gt;git config&lt;/code&gt; command, while fish variables can be set as usual with the &lt;a href=&quot;set#cmd-set&quot;&gt;set&lt;/a&gt; command.</source>
          <target state="translated">gitオプションまたはfish変数で制御できる多数のカスタマイズオプションがあります。 gitオプションは、利用可能な場合、同じ関数を持つfish変数よりも優先されます。 gitオプションは、リポジトリごとまたはグローバルベースで設定できます。 gitオプションは &lt;code&gt;git config&lt;/code&gt; コマンドで設定できますが、fish変数は通常どおり&lt;a href=&quot;set#cmd-set&quot;&gt;set&lt;/a&gt;コマンドで設定できます。</target>
        </trans-unit>
        <trans-unit id="bd120b1aba4ded7c561e9d4f21f84619af0191cb" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables.</source>
          <target state="translated">魚の変数には、ユニバーサル変数、グローバル変数、ローカル変数の3種類があります。</target>
        </trans-unit>
        <trans-unit id="031b665a362fca99dc2232105e16d4be76ec8e13" translate="yes" xml:space="preserve">
          <source>There are three kinds of variables in fish: universal, global and local variables. Universal variables are shared between all fish sessions a user is running on one computer. Global variables are specific to the current fish session, but are not associated with any specific block scope, and will never be erased unless the user explicitly requests it using &lt;code&gt;set -e&lt;/code&gt;. Local variables are specific to the current fish session, and associated with a specific block of commands, and is automatically erased when a specific block goes out of scope. A block of commands is a series of commands that begins with one of the commands &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;begin&lt;/code&gt; or &lt;code&gt;switch&lt;/code&gt;, and ends with the command &lt;code&gt;end&lt;/code&gt;. The user can specify that a variable should have either global or local scope using the &lt;code&gt;-g/--global&lt;/code&gt; or &lt;code&gt;-l/--local&lt;/code&gt; switches.</source>
          <target state="translated">魚には、ユニバーサル変数、グローバル変数、ローカル変数の3種類の変数があります。ユニバーサル変数は、ユーザーが1台のコンピューターで実行しているすべてのfishセッション間で共有されます。グローバル変数は現在のフィッシュセッションに固有ですが、特定のブロックスコープに関連付けられておらず、ユーザーが &lt;code&gt;set -e&lt;/code&gt; を使用して明示的に要求しない限り消去されることはありません。ローカル変数は現在のフィッシュセッションに固有であり、コマンドの特定のブロックに関連付けられており、特定のブロックがスコープ外になると自動的に消去されます。コマンドのブロックは、コマンドのいずれかで始まる一連のコマンドである &lt;code&gt;for&lt;/code&gt; 、 &lt;code&gt;while&lt;/code&gt; 、 &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;function&lt;/code&gt; 、 &lt;code&gt;begin&lt;/code&gt; 又は &lt;code&gt;switch&lt;/code&gt; 、コマンド &lt;code&gt;end&lt;/code&gt; で終了します。ユーザーは、 &lt;code&gt;-g/--global&lt;/code&gt; または &lt;code&gt;-l/--local&lt;/code&gt; スイッチを使用して、変数にグローバルスコープまたはローカルスコープを指定することができます。</target>
        </trans-unit>
        <trans-unit id="e53b3e187fabe1e40c14b723e24b9fbf71412fee" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob.</source>
          <target state="translated">fish 3.0には、2つの重大な変更があります。キャレット &lt;code&gt;^&lt;/code&gt; はstderrをリダイレクトしなくなり、疑問符は &lt;code&gt;?&lt;/code&gt; もはやグロブではありません。</target>
        </trans-unit>
        <trans-unit id="a8bb46a6b8bc305c23a119159486bd2d5c470ee5" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in fish 3.0: caret &lt;code&gt;^&lt;/code&gt; no longer redirects stderr, and question mark &lt;code&gt;?&lt;/code&gt; is no longer a glob. These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">fish 3.0には2つの重大な変更があります。キャレット &lt;code&gt;^&lt;/code&gt; が stderrをリダイレクトしないようになりました &lt;code&gt;?&lt;/code&gt; もはやグロブではありません。これらの変更はデフォルトでオフになっています。セッションごとに有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="6e66bd08a5ba89d0954ad9909f64383e4a87bdf0" translate="yes" xml:space="preserve">
          <source>There can be many variables with the same name, but different scopes. When you &lt;a href=&quot;#expand-variable&quot;&gt;use a variable&lt;/a&gt;, the smallest scoped variable of that name will be used. If a local variable exists, it will be used instead of the global or universal variable of the same name.</source>
          <target state="translated">同じ名前でスコープが異なる変数が多数存在する可能性があります。&lt;a href=&quot;#expand-variable&quot;&gt;変数&lt;/a&gt;を使用する場合、その名前の最小スコープ変数が使用されます。ローカル変数が存在する場合は、同じ名前のグローバル変数またはユニバーサル変数の代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="3dcc1aa82fa8e3e84e1746b6a27a38d0c390796a" translate="yes" xml:space="preserve">
          <source>There is a function called &lt;a href=&quot;cmds/alias#cmd-alias&quot;&gt;alias&lt;/a&gt;, but it's just a shortcut to make functions.</source>
          <target state="translated">&lt;a href=&quot;cmds/alias#cmd-alias&quot;&gt;エイリアス&lt;/a&gt;と呼ばれる関数がありますが、それは関数を作成するための単なるショートカットです。</target>
        </trans-unit>
        <trans-unit id="2e415ead715f11f67297da7b425bcc5e4aa40b89" translate="yes" xml:space="preserve">
          <source>There is also a &lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt; command:</source>
          <target state="translated">&lt;a href=&quot;cmds/switch#cmd-switch&quot;&gt;switch&lt;/a&gt;コマンドもあります。</target>
        </trans-unit>
        <trans-unit id="b0b4e1d35ca4c236214ba374558333566d7c39ce" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;$pipestatus&lt;/code&gt; list variable for the exit statuses &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; of processes in a pipe.</source>
          <target state="translated">パイプ内のプロセスの終了ステータス&lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt;用の &lt;code&gt;$pipestatus&lt;/code&gt; リスト変数もあります。</target>
        </trans-unit>
        <trans-unit id="20ceb2460c137862f053425df367d426c42e4313" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;switch&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;switch&lt;/code&gt; コマンドもあります：</target>
        </trans-unit>
        <trans-unit id="57875a262d2c2eb3777d4d6118abc803d714194f" translate="yes" xml:space="preserve">
          <source>There is no &lt;code&gt;$''&lt;/code&gt;, instead the sequences that would transform are transformed &lt;em&gt;when unquoted&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;$''&lt;/code&gt; はありません。代わりに、&lt;em&gt;引用符で囲まれていない場合、&lt;/em&gt;変換されるシーケンスは変換されます。</target>
        </trans-unit>
        <trans-unit id="f9457a5982580c619b1f010b4a7510be7a176dfe" translate="yes" xml:space="preserve">
          <source>There is one breaking change in fish 3.1: &lt;code&gt;string replace -r&lt;/code&gt; does a superfluous round of escaping for the replacement, so escaping backslashes would look like &lt;code&gt;string replace -ra '([ab])' '\\\\\\\$1' a&lt;/code&gt;. This flag removes that if turned on, so &lt;code&gt;'\\\\$1'&lt;/code&gt; is enough.</source>
          <target state="translated">fish 3.1には1つ &lt;code&gt;string replace -ra '([ab])' '\\\\\\\$1' a&lt;/code&gt; &lt;code&gt;string replace -r&lt;/code&gt; は、置換のために余分なエスケープラウンドを実行するため、バックスラッシュのエスケープはstring replace -ra '（[ab]）' '\\\\\\\ $ 1'のようになります。 A。このフラグをオンにすると、フラグが削除されるため、 &lt;code&gt;'\\\\$1'&lt;/code&gt; で十分です。</target>
        </trans-unit>
        <trans-unit id="b0866a618c196f1ac7d2ced3309d7b238c006085" translate="yes" xml:space="preserve">
          <source>There may be many variables with the same name, but different scopes. When using a variable, the variable scope will be searched from the inside out, i.e. a local variable will be used rather than a global variable with the same name, a global variable will be used rather than a universal variable with the same name.</source>
          <target state="translated">同じ名前の変数がたくさんあっても、スコープが異なる場合があります。つまり、同じ名前のグローバル変数ではなくローカル変数が使用され、同じ名前のユニバーサル変数ではなくグローバル変数が使用されます。</target>
        </trans-unit>
        <trans-unit id="d7f028aa2b19c153baae8d83c317ae110446208a" translate="yes" xml:space="preserve">
          <source>These are the general purpose tab completions that &lt;code&gt;fish&lt;/code&gt; provides:</source>
          <target state="translated">これらは、 &lt;code&gt;fish&lt;/code&gt; が提供する汎用タブ補完です。</target>
        </trans-unit>
        <trans-unit id="a541ca19e60c8c36165c2c4faab471af97abf450" translate="yes" xml:space="preserve">
          <source>These changes are off by default. They can be enabled on a per session basis:</source>
          <target state="translated">これらの変更はデフォルトではオフになっています。セッションごとに有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="0f240a03ecd9ebdbd8bb2b071dbc72c7fb11026f" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying &lt;a href=&quot;index#variables-color&quot;&gt;color variables&lt;/a&gt; directly.</source>
          <target state="translated">これらの色やその他の多くの色は、 &lt;code&gt;fish_config&lt;/code&gt; を実行するか、&lt;a href=&quot;index#variables-color&quot;&gt;色変数を&lt;/a&gt;直接変更することで変更できます。</target>
        </trans-unit>
        <trans-unit id="e7972582e9c4968e777fc42db67d9b318fa79e46" translate="yes" xml:space="preserve">
          <source>These colors, and many more, can be changed by running &lt;code&gt;fish_config&lt;/code&gt;, or by modifying variables directly.</source>
          <target state="translated">これらの色やその他の色は、 &lt;code&gt;fish_config&lt;/code&gt; を実行するか、変数を直接変更することで変更できます。</target>
        </trans-unit>
        <trans-unit id="91e1e5aba0c598515d08d40af2f8d04dd57004f4" translate="yes" xml:space="preserve">
          <source>These files are all executed on the startup of every shell. If you want to run a command only on starting an interactive shell, use the exit status of the command &lt;code&gt;status --is-interactive&lt;/code&gt; to determine if the shell is interactive. If you want to run a command only when using a login shell, use &lt;code&gt;status --is-login&lt;/code&gt; instead. This will speed up the starting of non-interactive or non-login shells.</source>
          <target state="translated">これらのファイルはすべて、すべてのシェルの起動時に実行されます。対話型シェルの開始時にのみコマンドを実行する場合は、コマンドの終了ステータス &lt;code&gt;status --is-interactive&lt;/code&gt; を使用して、シェルが対話型かどうかを判断します。ログインシェルを使用しているときにのみコマンドを実行する場合は、代わりに &lt;code&gt;status --is-login&lt;/code&gt; を使用します。これにより、非インタラクティブシェルまたは非ログインシェルの起動が高速化されます。</target>
        </trans-unit>
        <trans-unit id="80b96b3d74710e83d20ff5ac21723a42f2f052d6" translate="yes" xml:space="preserve">
          <source>These flags can appear before or immediately after one of the sub-commands listed above.</source>
          <target state="translated">これらのフラグは、上記のいずれかのサブコマンドの前または直後に表示することができます。</target>
        </trans-unit>
        <trans-unit id="0a1a70df80594e6385f1bb77aed0566514490dd4" translate="yes" xml:space="preserve">
          <source>These options can also be changed via the $FISH_DEBUG and $FISH_DEBUG_OUTPUT variables. The categories enabled via &lt;code&gt;--debug&lt;/code&gt; are &lt;em&gt;added&lt;/em&gt; to the ones enabled by $FISH_DEBUG, so they can be disabled by prefixing them with &lt;code&gt;-&lt;/code&gt; (&lt;code&gt;reader-*,-ast*&lt;/code&gt; enables reader debugging and disables ast debugging).</source>
          <target state="translated">これらのオプションは、$ FISH_DEBUG変数と$ FISH_DEBUG_OUTPUT変数を介して変更することもできます。 &lt;code&gt;--debug&lt;/code&gt; を介して有効にされたカテゴリは、$ FISH_DEBUGによって有効に&lt;em&gt;さ&lt;/em&gt;れたカテゴリに&lt;em&gt;追加さ&lt;/em&gt;れるため、接頭辞として &lt;code&gt;-&lt;/code&gt; を付けることで無効にできます（ &lt;code&gt;reader-*,-ast*&lt;/code&gt; はリーダーのデバッグを有効にし、astのデバッグを無効にします）。</target>
        </trans-unit>
        <trans-unit id="018467e6400b14718548d65eb59c273e2720ed52" translate="yes" xml:space="preserve">
          <source>These paths are controlled by parameters set at build, install, or run time, and may vary from the defaults listed above.</source>
          <target state="translated">これらのパスは、ビルド、インストール、または実行時に設定されたパラメータによって制御され、上記のデフォルト値とは異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="e0f227d731eb85d679b8689a23b63dd21f1e30dc" translate="yes" xml:space="preserve">
          <source>These problems are generally caused by the &lt;a href=&quot;index#initialization&quot;&gt;user initialization file&lt;/a&gt; (usually &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;) producing output when started in non-interactive mode.</source>
          <target state="translated">これらの問題は通常、非対話型モードで起動したときに出力を生成する&lt;a href=&quot;index#initialization&quot;&gt;ユーザー初期化ファイル&lt;/a&gt;（通常は &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; ）によって引き起こされます。</target>
        </trans-unit>
        <trans-unit id="59764234fbda3a5ae9dc6fc3ff0782f754b46b8c" translate="yes" xml:space="preserve">
          <source>These rely on external tools. Currently xsel, xclip, wl-copy/wl-paste and pbcopy/pbpaste are supported.</source>
          <target state="translated">これらは外部ツールに依存しています。現在、xsel,xclip,wl-copy/wl-paste,pbcopy/pbpaste がサポートされています。</target>
        </trans-unit>
        <trans-unit id="5ff2e8e4beb1e0db4118c370fb4cace2f8ea572e" translate="yes" xml:space="preserve">
          <source>These variables are passed to the function as local exported variables.</source>
          <target state="translated">これらの変数は、ローカルにエクスポートされた変数として関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="d24f98a189aa3819db3885dc20417a7ef5fd2074" translate="yes" xml:space="preserve">
          <source>They are all used in an infix manner - &lt;code&gt;5 + 2&lt;/code&gt;, not &lt;code&gt;+ 5 2&lt;/code&gt;.</source>
          <target state="translated">それらはすべて、内接法で使用されます &lt;code&gt;5 + 2&lt;/code&gt; ではなく、5 + &lt;code&gt;+ 5 2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c0f73538164b821e962b37c1ab4243fee6900c4" translate="yes" xml:space="preserve">
          <source>This also applies to &lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt; and &lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_prompt&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;cmds/fish_right_prompt#cmd-fish-right-prompt&quot;&gt;fish_right_prompt&lt;/a&gt;と&lt;a href=&quot;cmds/fish_mode_prompt#cmd-fish-mode-prompt&quot;&gt;fish_mode_promptに&lt;/a&gt;も当てはまります。</target>
        </trans-unit>
        <trans-unit id="e037c16e89673bc6c789c7a56fb11f5ef6afe572" translate="yes" xml:space="preserve">
          <source>This also applies to fish - when it starts up, it receives environment variables from its parent (usually the terminal). These typically include system configuration like &lt;a href=&quot;#path&quot;&gt;$PATH&lt;/a&gt; and &lt;a href=&quot;#variables-locale&quot;&gt;locale variables&lt;/a&gt;.</source>
          <target state="translated">これは魚にも当てはまります。魚が起動すると、親（通常は端末）から環境変数を受け取ります。これらには通常、&lt;a href=&quot;#path&quot;&gt;$ PATH&lt;/a&gt;や&lt;a href=&quot;#variables-locale&quot;&gt;ロケール変数&lt;/a&gt;などのシステム構成が含まれます。</target>
        </trans-unit>
        <trans-unit id="af768071c5b224ad5b92ddb2ba1221dcbc0d859d" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. Therefore strings might be eliminated. This can be avoided by making the inner command return a trailing newline.</source>
          <target state="translated">これは、&lt;a href=&quot;#expand-command-substitution&quot;&gt;コマンド置換&lt;/a&gt;後にも発生します。したがって、文字列が削除される可能性があります。これは、内部のコマンドが末尾の改行を返すようにすることで回避できます。</target>
        </trans-unit>
        <trans-unit id="5862d4da112945498ea94b6d7f269d1e61fc0beb" translate="yes" xml:space="preserve">
          <source>This also happens after &lt;a href=&quot;#expand-command-substitution&quot;&gt;command substitution&lt;/a&gt;. To avoid tokens disappearing there, make the inner command return a trailing newline, or store the output in a variable and double-quote it.</source>
          <target state="translated">これは、&lt;a href=&quot;#expand-command-substitution&quot;&gt;コマンド置換&lt;/a&gt;後にも発生します。トークンがそこで消えないようにするには、内部コマンドで末尾の改行を返すか、出力を変数に格納して二重引用符で囲みます。</target>
        </trans-unit>
        <trans-unit id="ee81161214cb28f5e40645cd788da1b748a880bf" translate="yes" xml:space="preserve">
          <source>This also means that a few things are unsupportable:</source>
          <target state="translated">これは、いくつかのものがサポートされていないことも意味しています。</target>
        </trans-unit>
        <trans-unit id="34c81de6d4b84d88e0bc761153be31bad7326fa6" translate="yes" xml:space="preserve">
          <source>This assumes you installed fish to /usr/local/bin, which is the default location when you've compiled it yourself. If you installed it with a package manager, the usual location is /usr/bin/fish, but package managers typically already add it to /etc/shells. Just substitute the correct location.</source>
          <target state="translated">ここでは、fishを/usr/local/binにインストールしたと仮定していますが、これは自分でコンパイルした場合のデフォルトの場所です。パッケージマネージャでインストールした場合、通常の場所は/usr/bin/fishですが、パッケージマネージャは通常/etc/shellsに追加します。正しい場所に置き換えてください。</target>
        </trans-unit>
        <trans-unit id="0d2c383ecda8a4c5bf0708b66a394d7bf089bafc" translate="yes" xml:space="preserve">
          <source>This bit of the documentation is a quick guide on how to get going. If you are new to this, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">ドキュメントのこのビットは、始める方法のクイックガイドです。これが初めての場合は、&lt;a href=&quot;tutorial#tutorial&quot;&gt;チュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="242bcbd19612b56a15e5401c1d4c647240f20532" translate="yes" xml:space="preserve">
          <source>This calls the &lt;a href=&quot;cmds/echo#cmd-echo&quot;&gt;echo&lt;/a&gt; command. &lt;code&gt;echo&lt;/code&gt; writes its arguments to the screen. In the example above, the output is &lt;code&gt;hello world&lt;/code&gt;. Everything in fish is done with commands. There are commands for repeating other commands, commands for assigning variables, commands for treating a group of commands as a single command, etc. All of these commands follow the same basic syntax.</source>
          <target state="translated">これにより、&lt;a href=&quot;cmds/echo#cmd-echo&quot;&gt;echo&lt;/a&gt;コマンドが呼び出されます。 &lt;code&gt;echo&lt;/code&gt; は引数を画面に書き込みます。上記の例では、出力は &lt;code&gt;hello world&lt;/code&gt; 。魚のすべてはコマンドで行われます。他のコマンドを繰り返すためのコマンド、変数を割り当てるためのコマンド、コマンドのグループを単一のコマンドとして扱うためのコマンドなどがあります。これらのコマンドはすべて、同じ基本構文に従います。</target>
        </trans-unit>
        <trans-unit id="11a28f4bed992d7cf613847d7498fafe31511aea" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same basic syntax.</source>
          <target state="translated">これにより、 &lt;code&gt;echo&lt;/code&gt; コマンドが呼び出されます。 &lt;code&gt;echo&lt;/code&gt; は、引数を画面に書き込むコマンドです。上記の例では、出力は「helloworld」になります。魚のすべてはコマンドで行われます。コマンドのセットを複数回実行するためのコマンド、変数を割り当てるためのコマンド、コマンドのグループを単一のコマンドとして扱うためのコマンドなどがあります。また、すべてのコマンドは同じ基本構文に従います。</target>
        </trans-unit>
        <trans-unit id="b50932aeaca87e43aadc296b2abd6503a42d3550" translate="yes" xml:space="preserve">
          <source>This calls the &lt;code&gt;echo&lt;/code&gt; command. &lt;code&gt;echo&lt;/code&gt; is a command which will write its arguments to the screen. In the example above, the output will be 'hello world'. Everything in fish is done with commands. There are commands for performing a set of commands multiple times, commands for assigning variables, commands for treating a group of commands as a single command, etc.. And every single command follows the same simple syntax.</source>
          <target state="translated">これは、 &lt;code&gt;echo&lt;/code&gt; コマンドを呼び出します。 &lt;code&gt;echo&lt;/code&gt; は、引数を画面に書き込むコマンドです。上記の例では、出力は「hello world」になります。魚のすべてはコマンドで行われます。一連のコマンドを複数回実行するコマンド、変数を割り当てるコマンド、コマンドのグループを単一のコマンドとして扱うコマンドなどがあります。すべての単一のコマンドは、同じ単純な構文に従います。</target>
        </trans-unit>
        <trans-unit id="d7f43076657a40a0a56470982d549a61a4508f48" translate="yes" xml:space="preserve">
          <source>This can be quite useful. For example, if you want to go through all the files in all the directories in $PATH, use:</source>
          <target state="translated">これは非常に便利です。たとえば、$PATHにあるすべてのディレクトリにあるすべてのファイルを調べたい場合は、次のように使います。</target>
        </trans-unit>
        <trans-unit id="366a5d79af152ebea92d5f861ed8a475043b7941" translate="yes" xml:space="preserve">
          <source>This can be written as:</source>
          <target state="translated">と書くことができます。</target>
        </trans-unit>
        <trans-unit id="2c3fa67d634b278ec1a7802bf809ac5774656af1" translate="yes" xml:space="preserve">
          <source>This code will add some directories to $PATH if they aren't yet included:</source>
          <target state="translated">このコードは、まだ含まれていないディレクトリを $PATH に追加します。</target>
        </trans-unit>
        <trans-unit id="46b694f24aed40624e847ae57ae10b126b23d033" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments in a manner 100% identical to how fish builtin commands handle their arguments. You pass a sequence of arguments that define the options recognized, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). More on this in the &lt;a href=&quot;#argparse-usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">このコマンドを使用すると、fishスクリプトおよび関数で、fish組み込みコマンドが引数を処理する方法と100％同一の方法で引数を処理できます。認識されるオプションを定義する一連の引数を渡し、その後にリテラル &lt;code&gt;--&lt;/code&gt; 、次に解析する引数（リテラル &lt;code&gt;--&lt;/code&gt; も含まれる場合があります）を渡します。これについては、以下の&lt;a href=&quot;#argparse-usage&quot;&gt;使用法の&lt;/a&gt;セクションで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="51ecea6002832d6f166772d002d2b9826d4db24b" translate="yes" xml:space="preserve">
          <source>This command makes it easy for fish scripts and functions to handle arguments like how fish builtin commands handle their arguments. You pass arguments that define the known options, followed by a literal &lt;code&gt;--&lt;/code&gt;, then the arguments to be parsed (which might also include a literal &lt;code&gt;--&lt;/code&gt;). &lt;code&gt;argparse&lt;/code&gt; then sets variables to indicate the passed options with their values, and sets $argv (and always $argv) to the remaining arguments. More on this in the &lt;a href=&quot;#usage&quot;&gt;usage&lt;/a&gt; section below.</source>
          <target state="translated">このコマンドを使用すると、fishスクリプトと関数で、fish組み込みコマンドが引数を処理する方法などの引数を簡単に処理できます。既知のオプションを定義する引数を渡し、続いてリテラル &lt;code&gt;--&lt;/code&gt; 渡し、次に解析する引数を渡します（リテラル &lt;code&gt;--&lt;/code&gt; も含まれる場合があります）。次に、 &lt;code&gt;argparse&lt;/code&gt; は、渡されたオプションとその値を示す変数を設定し、残りの引数に$ argv（および常に$ argv）を設定します。これについては、以下の&lt;a href=&quot;#usage&quot;&gt;使用法の&lt;/a&gt;セクションで詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="20cd8d04285455a5eeee7e58dc05b32ca7729358" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;#argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">このコマンドは、&lt;a href=&quot;#argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;コマンドでの使用に適したオプション指定を生成する方法を提供します。もちろん、このコマンドを使用せずに、オプション仕様を手動で作成することもできます。しかし、提供する明快さのためにこれを使用することを好むかもしれません。</target>
        </trans-unit>
        <trans-unit id="a74b8d6f46def2454cb1a7815efcf306bc15eb2a" translate="yes" xml:space="preserve">
          <source>This command provides a way to produce option specifications suitable for use with the &lt;a href=&quot;argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt; command. You can, of course, write the option specs by hand without using this command. But you might prefer to use this for the clarity it provides.</source>
          <target state="translated">このコマンドは、&lt;a href=&quot;argparse#cmd-argparse&quot;&gt;argparse&lt;/a&gt;コマンドでの使用に適したオプション仕様を作成する方法を提供します。もちろん、このコマンドを使用せずに、オプションの仕様を手動で作成することもできます。しかし、それが提供する明快さのためにこれを使用することを好むかもしれません。</target>
        </trans-unit>
        <trans-unit id="e59ff744d5f96fc84e3687f1f094a0f6cc1182bc" translate="yes" xml:space="preserve">
          <source>This command was introduced in fish 3.2.0. Previous versions of fish used the &quot;fish_command_not_found&quot; &lt;a href=&quot;../index#event&quot;&gt;event&lt;/a&gt; instead.</source>
          <target state="translated">このコマンドはfish3.2.0で導入されました。以前のバージョンのfishは、代わりに「fish_command_not_found」&lt;a href=&quot;../index#event&quot;&gt;イベントを&lt;/a&gt;使用していました。</target>
        </trans-unit>
        <trans-unit id="e7278174eb8df4d8cf8cf4810097720c8a46b647" translate="yes" xml:space="preserve">
          <source>This creates a temporary file, stores the output of the command in that file and prints the filename, so it is given to the outer command.</source>
          <target state="translated">これは、一時ファイルを作成し、コマンドの出力をそのファイルに保存し、ファイル名を印刷するので、外側のコマンドに与えられます。</target>
        </trans-unit>
        <trans-unit id="07448165c0f812cb8478f38c84a94b14d2215ae2" translate="yes" xml:space="preserve">
          <source>This does not overwrite custom completions.</source>
          <target state="translated">これはカスタム補完を上書きするものではありません。</target>
        </trans-unit>
        <trans-unit id="8d876af295a974aa3fa22db08bb217710ab623ce" translate="yes" xml:space="preserve">
          <source>This does not read numbers given as &lt;code&gt;+NNN&lt;/code&gt;, only those that look like flags - &lt;code&gt;-NNN&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;+NNN&lt;/code&gt; として指定された数値を読み取るのではなく、フラグ &lt;code&gt;-NNN&lt;/code&gt; NNNのように見える数値のみを読み取ります。</target>
        </trans-unit>
        <trans-unit id="6147eda0417a76ae63d83548f1bb6d3684130031" translate="yes" xml:space="preserve">
          <source>This file has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="translated">このファイルは、GNU Coreutilsバージョン6.9のprintfからインポートされました。OSに同梱されているなど、新しいバージョンのprintfを使用する場合は、 &lt;code&gt;command printf&lt;/code&gt; 試してください。</target>
        </trans-unit>
        <trans-unit id="36a27e8809bc8ecec60cf5b8b496d2f657edff50" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Please call &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt;</source>
          <target state="translated">この関数は非推奨です。 &lt;code&gt;fish_vi_key_bindings directly&lt;/code&gt; 呼び出してください</target>
        </trans-unit>
        <trans-unit id="6bb30a141584bbcfda9f7bb389eaff8fab492867" translate="yes" xml:space="preserve">
          <source>This function takes whatever arguments it gets and prints the first and third:</source>
          <target state="translated">この関数は、取得した任意の引数を受け取り、1番目と3番目を表示します。</target>
        </trans-unit>
        <trans-unit id="02ffa9c43b28edd0a7fd5ea7d8c790c69c51b478" translate="yes" xml:space="preserve">
          <source>This goes over every directory in $PATH separately and prints a line saying it is in the path.</source>
          <target state="translated">これは、$PATHに含まれるすべてのディレクトリを個別に調べ、そのディレクトリがパスに含まれていることを示す行を表示します。</target>
        </trans-unit>
        <trans-unit id="3dbee0ce24ddb2a7779ce4b45c3fe6d00ac4de3f" translate="yes" xml:space="preserve">
          <source>This indicates how the command fared - 0 usually means success, while the others signify kinds of failure. For instance fish's &lt;code&gt;set --query&lt;/code&gt; returns the number of variables it queried that weren't set - &lt;code&gt;set --query PATH&lt;/code&gt; usually returns 0, &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; usually returns 2.</source>
          <target state="translated">これは、コマンドがどのように実行されたかを示します-0は通常成功を意味し、その他は失敗の種類を意味します。たとえば、fishの &lt;code&gt;set --query&lt;/code&gt; は、クエリされた、設定されなかった変数の数を返します &lt;code&gt;set --query arglbargl boogagoogoo&lt;/code&gt; &lt;code&gt;set --query PATH&lt;/code&gt; は通常0を返し、set --query arglbarglboogagoogooは通常2を返します。</target>
        </trans-unit>
        <trans-unit id="42846739d24ee758a7b3a2194b5979dbb4c14902" translate="yes" xml:space="preserve">
          <source>This is a kind of function known as a &lt;a href=&quot;#syntax-function-wrappers&quot;&gt;wrapper&lt;/a&gt; or &quot;alias&quot;.</source>
          <target state="translated">これは、&lt;a href=&quot;#syntax-function-wrappers&quot;&gt;ラッパー&lt;/a&gt;または「エイリアス」と呼ばれる一種の関数です。</target>
        </trans-unit>
        <trans-unit id="cbbea16193e927515d0dc3be9146ab095157af42" translate="yes" xml:space="preserve">
          <source>This is a short explanation of some of the commonly used words in fish.</source>
          <target state="translated">魚でよく使われる言葉を簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="c08782246abd769f65e5240248630e4c4eb762a8" translate="yes" xml:space="preserve">
          <source>This is an alternative to aliases, and has the advantage that you see the actual command before using it, and the actual command will be stored in history.</source>
          <target state="translated">これはエイリアスの代わりで、使う前に実際のコマンドを見ることができ、実際のコマンドがヒストリーに保存されるという利点があります。</target>
        </trans-unit>
        <trans-unit id="8d244f1f10393a3fd4f3ebf581d37f923228ef19" translate="yes" xml:space="preserve">
          <source>This is implemented as a function and a builtin. The function will attempt to use an external realpath command if one can be found. Otherwise it falls back to the builtin. The builtin does not support any options. It's meant to be used only by scripts which need to be portable. The builtin implementation behaves like GNU realpath when invoked without any options (which is the most common use case). In general scripts should not invoke the builtin directly. They should just use &lt;code&gt;realpath&lt;/code&gt;.</source>
          <target state="translated">これは、関数および組み込みとして実装されます。関数は、外部のrealpathコマンドが見つかると、それを使用しようとします。それ以外の場合は、組み込みにフォールバックします。組み込みはオプションをサポートしていません。移植性が必要なスクリプトでのみ使用することを意図しています。組み込み実装は、オプションなしで呼び出されると、GNU realpathのように動作します（これが最も一般的な使用例です）。一般に、スクリプトは組み込みを直接呼び出すべきではありません。彼らはただ &lt;code&gt;realpath&lt;/code&gt; を使うべきです。</target>
        </trans-unit>
        <trans-unit id="02eb29102e35b60198abd6b2a437d296ee6b593d" translate="yes" xml:space="preserve">
          <source>This is more important to fish than other shells because features like syntax highlighting and autosuggestions are implemented by moving the cursor.</source>
          <target state="translated">シンタックスハイライトやオートサジェスチョンなどの機能は、カーソルを動かすことで実装されるため、他のシェルよりもfishにとっては重要な機能です。</target>
        </trans-unit>
        <trans-unit id="ee1d4171e513cf57adfa5dbd82bf66ed41edba27" translate="yes" xml:space="preserve">
          <source>This is not an exhaustive list and the fish project has no opinion regarding the merits of the repositories listed above or the scripts found therein.</source>
          <target state="translated">これは網羅的なリストではなく、上記のようなリポジトリやそこにあるスクリプトのメリットについては、魚類プロジェクトは意見を述べていません。</target>
        </trans-unit>
        <trans-unit id="096d775aa834b5a98fc75f9c9df8cd5ad1df3f6c" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;index#expand-brace&quot;&gt;Brace expansion&lt;/a&gt;.</source>
          <target state="translated">これは&lt;a href=&quot;index#expand-brace&quot;&gt;ブレース展開に&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="29a7e62ae3df780620ab5b6db68453aaf61e47e8" translate="yes" xml:space="preserve">
          <source>This is similar to bash's &quot;failglob&quot; option.</source>
          <target state="translated">これは、bashの「failglob」オプションに似ています。</target>
        </trans-unit>
        <trans-unit id="87b5c6aa51fef3c82ea1bd8fddb7c95bed61e89d" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;code&gt;fish&lt;/code&gt;, the friendly interactive shell. &lt;code&gt;fish&lt;/code&gt; is a user friendly commandline shell intended mostly for interactive use. A shell is a program used to execute other programs. For the latest information on &lt;code&gt;fish&lt;/code&gt;, please visit the &lt;a href=&quot;https://fishshell.com/&quot;&gt;&lt;code&gt;fish&lt;/code&gt; homepage&lt;/a&gt;.</source>
          <target state="translated">これは、使いやすいインタラクティブなシェルである &lt;code&gt;fish&lt;/code&gt; のドキュメントです。 &lt;code&gt;fish&lt;/code&gt; は、主にインタラクティブな使用を目的としたユーザーフレンドリーなコマンドラインシェルです。シェルは、他のプログラムを実行するために使用されるプログラムです。 &lt;code&gt;fish&lt;/code&gt; の最新情報については、&lt;a href=&quot;https://fishshell.com/&quot;&gt; &lt;code&gt;fish&lt;/code&gt; ホームページ&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="4dbd4206fa5ed554553ccafdb81158a2765cb589" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;em&gt;fish&lt;/em&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</source>
          <target state="translated">これはのためのドキュメントです&lt;em&gt;魚&lt;/em&gt;、&lt;strong&gt;F&lt;/strong&gt; riendly&lt;strong&gt;私&lt;/strong&gt;nteractive&lt;strong&gt;のsh&lt;/strong&gt;エル。</target>
        </trans-unit>
        <trans-unit id="92aefc1a52c71a85a78cc971b6c1d5c9539281b3" translate="yes" xml:space="preserve">
          <source>This is the documentation for &lt;strong&gt;fish&lt;/strong&gt;, the &lt;strong&gt;f&lt;/strong&gt;riendly &lt;strong&gt;i&lt;/strong&gt;nteractive &lt;strong&gt;sh&lt;/strong&gt;ell.</source>
          <target state="translated">これはのためのドキュメントです&lt;strong&gt;魚&lt;/strong&gt;、&lt;strong&gt;F&lt;/strong&gt; riendly&lt;strong&gt;私&lt;/strong&gt;nteractive&lt;strong&gt;のsh&lt;/strong&gt;エル。</target>
        </trans-unit>
        <trans-unit id="577bd6355fb298c4b6b2d6488f451eaa11f5dbb8" translate="yes" xml:space="preserve">
          <source>This is the preferred way to define your prompt as well:</source>
          <target state="translated">これはプロンプトを定義するのにも好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="d682fbb50ebb7a2307c888a8c708e837d0f174a7" translate="yes" xml:space="preserve">
          <source>This is to give you a quick overview if you come from bash (or to a lesser extent other shells like zsh or ksh) and want to know how fish differs. Fish is intentionally not POSIX-compatible and as such some of the things you are used to work differently.</source>
          <target state="translated">これは、bash(あるいはzshやkshなどの他のシェル)から来て、fishがどのように違うのかを知りたい場合に、簡単な概要を説明するためのものです。fishは意図的にPOSIX互換ではないため、あなたが慣れ親しんだものとは異なる動作をするものがあります。</target>
        </trans-unit>
        <trans-unit id="36aa325151397e7468490d9f008691d69c01ff3b" translate="yes" xml:space="preserve">
          <source>This is typically used together with &lt;a href=&quot;funced#cmd-funced&quot;&gt;funced&lt;/a&gt;, which will open the function in your editor and load it in the current seession afterwards.</source>
          <target state="translated">これは通常、&lt;a href=&quot;funced#cmd-funced&quot;&gt;funced&lt;/a&gt;と一緒に使用されます。これにより、エディターで関数が開き、後で現在のシーションに読み込まれます。</target>
        </trans-unit>
        <trans-unit id="87d9754ec8407965c3cbfc3b364ea4b70ea05378" translate="yes" xml:space="preserve">
          <source>This is useful to explain what and why you are doing something:</source>
          <target state="translated">これは、何を、なぜするのかを説明するのに便利です。</target>
        </trans-unit>
        <trans-unit id="9e20bc0bbf6f3a094416aeb9967f247c41c79abd" translate="yes" xml:space="preserve">
          <source>This isn't specific to argparse but common to all things using &lt;code&gt;getopt(3)&lt;/code&gt; (if they have optional arguments at all). That &lt;code&gt;grep&lt;/code&gt; example is how GNU grep actually behaves.</source>
          <target state="translated">これはargparseに固有ではありませんが、 &lt;code&gt;getopt(3)&lt;/code&gt; を使用するすべてのものに共通です（オプションの引数がある場合）。その &lt;code&gt;grep&lt;/code&gt; の例は、GNUgrepが実際にどのように動作するかです。</target>
        </trans-unit>
        <trans-unit id="ae35cced4effb763cdd5c51f3c938b7ee1f84dcc" translate="yes" xml:space="preserve">
          <source>This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;`fish /path/to/script&lt;/code&gt; they aren't required (but don't hurt either!).</source>
          <target state="translated">この行は、インタープリターを指定せずにスクリプトを実行する場合にのみ必要です。fish内の関数の場合、または &lt;code&gt;`fish /path/to/script&lt;/code&gt; を使用してスクリプトを実行する場合、それらは必須ではありません（ただし、害はありません！）。</target>
        </trans-unit>
        <trans-unit id="4bb1e8c793d879fcc7211d62126c449110f747e8" translate="yes" xml:space="preserve">
          <source>This line is only needed when scripts are executed without specifying the interpreter. For functions inside fish or when executing a script with &lt;code&gt;fish /path/to/script&lt;/code&gt;, a shebang is not required (but it doesn't hurt!).</source>
          <target state="translated">この行は、インタプリタを指定せずにスクリプトを実行する場合にのみ必要です。fish内の関数の場合、または &lt;code&gt;fish /path/to/script&lt;/code&gt; してスクリプトを実行する場合、シバンは必要ありません（ただし、問題はありません）。</target>
        </trans-unit>
        <trans-unit id="44756654753bba67ac9fe0b2cb5461aed36daaa0" translate="yes" xml:space="preserve">
          <source>This line tells the shell to execute the file with the bash interpreter, that is located at the path &lt;code&gt;/bin/bash&lt;/code&gt;.</source>
          <target state="translated">この行は、パス &lt;code&gt;/bin/bash&lt;/code&gt; にあるbashインタープリターを使用してファイルを実行するようにシェルに指示します。</target>
        </trans-unit>
        <trans-unit id="8cc576b35450257aadce9343fd3afaecbb82068c" translate="yes" xml:space="preserve">
          <source>This means that the global value takes precedence over the universal value.</source>
          <target state="translated">これは、グローバルな値が普遍的な値よりも優先されることを意味します。</target>
        </trans-unit>
        <trans-unit id="47d6e70d0d49cd275f91f52dd4bedfd9891bd255" translate="yes" xml:space="preserve">
          <source>This page can be viewed via &lt;code&gt;help index&lt;/code&gt; (or just &lt;code&gt;help&lt;/code&gt;) or &lt;code&gt;man fish-doc&lt;/code&gt;. The tutorial can be viewed with &lt;code&gt;help tutorial&lt;/code&gt; or &lt;code&gt;man fish-tutorial&lt;/code&gt;.</source>
          <target state="translated">このページは、 &lt;code&gt;help index&lt;/code&gt; （または単に &lt;code&gt;help&lt;/code&gt; ）または &lt;code&gt;man fish-doc&lt;/code&gt; 介して表示できます。チュートリアルは、 &lt;code&gt;help tutorial&lt;/code&gt; または &lt;code&gt;man fish-tutorial&lt;/code&gt; で表示できます。</target>
        </trans-unit>
        <trans-unit id="c4d8f78e08b40db86d5c72927eaed6ea7f694252" translate="yes" xml:space="preserve">
          <source>This page gives an overview of fish's features, syntax, and interface. If this is your first time using fish, see the &lt;a href=&quot;tutorial#tutorial&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">このページでは、魚の機能、構文、およびインターフェイスの概要を説明します。魚を初めて使用する場合は、&lt;a href=&quot;tutorial#tutorial&quot;&gt;チュートリアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="65ce226a719bb61f2e28f1a537f01bad1bd3083a" translate="yes" xml:space="preserve">
          <source>This printf has been imported from the printf in GNU Coreutils version 6.9. If you would like to use a newer version of printf, for example the one shipped with your OS, try &lt;code&gt;command printf&lt;/code&gt;.</source>
          <target state="translated">このprintfは、GNUCoreutilsバージョン6.9のprintfからインポートされています。OSに付属しているような新しいバージョンのprintfを使用する場合は、 &lt;code&gt;command printf&lt;/code&gt; 試してください。</target>
        </trans-unit>
        <trans-unit id="9b9cf3fb5792de48928eff8cebc96f16a1c55ae3" translate="yes" xml:space="preserve">
          <source>This problem may manifest as messages such as &quot;&lt;code&gt;Received message too long&lt;/code&gt;&quot;, &quot;&lt;code&gt;open terminal
failed: not a terminal&lt;/code&gt;&quot;, &quot;&lt;code&gt;Bad packet length&lt;/code&gt;&quot;, or &quot;&lt;code&gt;Connection refused&lt;/code&gt;&quot; with strange output in &lt;code&gt;ssh_exchange_identification&lt;/code&gt; messages in the debug log.</source>
          <target state="translated">この問題は、「 &lt;code&gt;Received message too long&lt;/code&gt; 」、「 &lt;code&gt;open terminal failed: not a terminal&lt;/code&gt; 」、「 &lt;code&gt;Bad packet length&lt;/code&gt; が &lt;code&gt;ssh_exchange_identification&lt;/code&gt; ません」、「 &lt;code&gt;Connection refused&lt;/code&gt; 」などのメッセージとして現れ、デバッグログのssh_exchange_identificationメッセージに奇妙な出力が表示される場合があります。</target>
        </trans-unit>
        <trans-unit id="51d7db524de6aeb12230612416aa7c659663fe8a" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory.</source>
          <target state="translated">上に表示されるこのプロンプトは、 &lt;code&gt;fish&lt;/code&gt; のデフォルトのプロンプトです。ユーザー名、ホスト名、および作業ディレクトリが表示されます。</target>
        </trans-unit>
        <trans-unit id="c7a03d7fff57e6a14cd855d9e527df2a9ce2b8e1" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the &lt;code&gt;fish&lt;/code&gt; default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</source>
          <target state="translated">上に表示されているこのプロンプトは、 &lt;code&gt;fish&lt;/code&gt; のデフォルトのプロンプトです。ユーザー名、ホスト名、および作業ディレクトリが表示されます。-このプロンプト&lt;a href=&quot;#prompt&quot;&gt;を変更するには、プロンプトを変更する方法を&lt;/a&gt;参照してください-魚に永続的に&lt;a href=&quot;#switching-to-fish&quot;&gt;切り替えるには、デフォルトのシェルを魚に切り替えるを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9b0aa0ea070dfc024abe95e676b3f5a9f72a6d28" translate="yes" xml:space="preserve">
          <source>This prompt that you see above is the fish default prompt: it shows your username, hostname, and working directory. - to change this prompt see &lt;a href=&quot;#prompt&quot;&gt;how to change your prompt&lt;/a&gt; - to switch to fish permanently see &lt;a href=&quot;#switching-to-fish&quot;&gt;switch your default shell to fish&lt;/a&gt;.</source>
          <target state="translated">上に表示されるこのプロンプトは、fishのデフォルトのプロンプトです。ユーザー名、ホスト名、および作業ディレクトリが表示されます。-このプロンプト&lt;a href=&quot;#prompt&quot;&gt;を変更するには、プロンプトを変更する方法を&lt;/a&gt;参照してください-永久に魚に&lt;a href=&quot;#switching-to-fish&quot;&gt;切り替えるには、デフォルトのシェルを魚に切り替えるを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0a4bee240833f3605c3cce7670c50d418746b9a0" translate="yes" xml:space="preserve">
          <source>This prompt would look like:</source>
          <target state="translated">このプロンプトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="773977870866a71aecd2e7e7f8a3ac68810d217e" translate="yes" xml:space="preserve">
          <source>This requires that your terminal supports programmable titles and the feature is turned on.</source>
          <target state="translated">このためには、お使いの端末がプログラマブル・タイトルに対応しており、その機能がオンになっている必要があります。</target>
        </trans-unit>
        <trans-unit id="09aac7de9ce9cd61579136cf9dcf630266cb3674" translate="yes" xml:space="preserve">
          <source>This runs the command &lt;code&gt;echo&lt;/code&gt; with the arguments &lt;code&gt;hello&lt;/code&gt; and &lt;code&gt;world&lt;/code&gt;.</source>
          <target state="translated">これにより、引数 &lt;code&gt;hello&lt;/code&gt; および &lt;code&gt;world&lt;/code&gt; を指定してコマンド &lt;code&gt;echo&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="5ef39c78e496aafe0f43eff2fcf48ff7024883cf" translate="yes" xml:space="preserve">
          <source>This section describes how to install, uninstall, start, and exit the fish shell. It also explains how to make fish the default shell.</source>
          <target state="translated">ここでは、fishシェルのインストール、アンインストール、起動、終了の方法を説明します。また、fishをデフォルトのシェルにする方法についても説明します。</target>
        </trans-unit>
        <trans-unit id="c9eeea9640faa8417502c909ed567d93f8c26ac1" translate="yes" xml:space="preserve">
          <source>This section is on how to install, uninstall, start and exit a fish shell and on how to make fish the default shell:</source>
          <target state="translated">ここでは、フィッシュシェルのインストール、アンインストール、起動、終了の方法と、フィッシュをデフォルトシェルにする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="25342c42f4612fb5670f158c84589f2f2bbbea7d" translate="yes" xml:space="preserve">
          <source>This shows a few differences:</source>
          <target state="translated">これにはいくつかの違いがあります。</target>
        </trans-unit>
        <trans-unit id="8365c7b8dad5a5bec81e8a157c63659de9f8f9c9" translate="yes" xml:space="preserve">
          <source>This syntax is supported since fish 3.1.</source>
          <target state="translated">この構文はfish 3.1からサポートされています。</target>
        </trans-unit>
        <trans-unit id="c731bb20159682c25c6b4c24ba8357e2f689c68f" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with '&lt;code&gt;somefi&lt;/code&gt;', which is useful feedback as you type.</source>
          <target state="translated">これは、「 &lt;code&gt;somefi&lt;/code&gt; 」で始まるファイルが存在することを示しています。これは、入力するときに役立つフィードバックです。</target>
        </trans-unit>
        <trans-unit id="4b7a09d6b5d8f49fa5d96567ba9ae8e8dc675a1a" translate="yes" xml:space="preserve">
          <source>This tells you that there exists a file that starts with &lt;code&gt;somefi&lt;/code&gt;, which is useful feedback as you type.</source>
          <target state="translated">これは、 &lt;code&gt;somefi&lt;/code&gt; で始まるファイルが存在することを示しています。これは、入力時に役立つフィードバックです。</target>
        </trans-unit>
        <trans-unit id="1ffb61bd1cd5715a466531b7a657f71109690e35" translate="yes" xml:space="preserve">
          <source>This test is mostly POSIX-compatible.</source>
          <target state="translated">このテストはほとんどPOSIXと互換性があります。</target>
        </trans-unit>
        <trans-unit id="44595c0d7ccfd8b4e39fcc6fb1c75e80391912f7" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of &lt;code&gt;fish&lt;/code&gt;.</source>
          <target state="translated">このチュートリアルは、コマンドラインシェルとUnixコマンドの基本的な理解と、 &lt;code&gt;fish&lt;/code&gt; の作業用コピーがあることを前提としています。</target>
        </trans-unit>
        <trans-unit id="c9de5aabc7c0b11e4da0fd1f2d758a3b173718c1" translate="yes" xml:space="preserve">
          <source>This tutorial assumes a basic understanding of command line shells and Unix commands, and that you have a working copy of fish.</source>
          <target state="translated">このチュートリアルでは、コマンドラインシェルとUnixコマンドの基本的な理解と、fishの作業コピーがあることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f48d5a2439da006a37325d3b33d3046473c20c81" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure where to put your own customisations, use &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt;.</source>
          <target state="translated">この広い検索は混乱するかもしれません。独自のカスタマイズをどこに置くかわからない場合は、 &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; 使用してください。</target>
        </trans-unit>
        <trans-unit id="f358815973e2ad20875ee5c37318a06668178037" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your completions probably belong in &lt;code&gt;~/.config/fish/completions&lt;/code&gt;.</source>
          <target state="translated">この広い検索は混乱するかもしれません。よくわからない場合は、補完がおそらく &lt;code&gt;~/.config/fish/completions&lt;/code&gt; 属しています。</target>
        </trans-unit>
        <trans-unit id="fc8f74e5e402cdc09fe9163449bdf559dd908a47" translate="yes" xml:space="preserve">
          <source>This wide search may be confusing. If you are unsure, your functions probably belong in &lt;code&gt;~/.config/fish/functions&lt;/code&gt;.</source>
          <target state="translated">この広い検索は混乱するかもしれません。不明な場合は、関数が &lt;code&gt;~/.config/fish/functions&lt;/code&gt; 属している可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a9195514b37c65c22f746374d557ac1c811b3ed" translate="yes" xml:space="preserve">
          <source>This will beep when the most recent job completes.</source>
          <target state="translated">直近のジョブが完了するとビープ音が鳴ります。</target>
        </trans-unit>
        <trans-unit id="2695319d77a04db7d59336c7fd04aa2a313c7f47" translate="yes" xml:space="preserve">
          <source>This will open up your editor, allowing you to modify the function. When you're done, save and quit. Fish will reload the function, so you should see the changes right away.</source>
          <target state="translated">これでエディターが開き、機能を修正することができます。作業が終わったら、保存して終了してください。Fishは関数を再読み込みするので、すぐに変更を確認できるはずです。</target>
        </trans-unit>
        <trans-unit id="d275d705f3563e034e584f7f1416ca37d5829386" translate="yes" xml:space="preserve">
          <source>This will run the &lt;code&gt;mkdir&lt;/code&gt; command, and if it is successful, change the current working directory to the one just created.</source>
          <target state="translated">これにより &lt;code&gt;mkdir&lt;/code&gt; コマンドが実行され、成功した場合は、現在の作業ディレクトリを作成したディレクトリに変更します。</target>
        </trans-unit>
        <trans-unit id="9aaacc060f4b5ae831a842fd2305208286294877" translate="yes" xml:space="preserve">
          <source>This works the other way around as well! If fish is started by something else, it inherits that parents exported variables. So if your terminal emulator starts fish, and it exports &lt;code&gt;$LANG&lt;/code&gt; set to &lt;code&gt;en_US.UTF-8&lt;/code&gt;, fish will receive that setting. And whatever started your terminal emulator also gave &lt;em&gt;it&lt;/em&gt; some variables that it will then pass on unless it specifically decides not to. This is how fish usually receives the values for things like &lt;code&gt;$LANG&lt;/code&gt;, &lt;code&gt;$PATH&lt;/code&gt; and &lt;code&gt;$TERM&lt;/code&gt;, without you having to specify them again.</source>
          <target state="translated">これは逆にも機能します！魚が他の何かによって開始された場合、それは親が変数をエクスポートしたことを継承します。したがって、ターミナルエミュレータがfishを起動し、 &lt;code&gt;$LANG&lt;/code&gt; セットを &lt;code&gt;en_US.UTF-8&lt;/code&gt; にエクスポートすると、fishはその設定を受け取ります。そしてまた、与えたあなたのターミナルエミュレータを開始したものは何でも&lt;em&gt;それを&lt;/em&gt;それが特異的にないことを決定しない限り、それは、その後に合格することをいくつかの変数を。これは、通常、魚が &lt;code&gt;$LANG&lt;/code&gt; 、 &lt;code&gt;$PATH&lt;/code&gt; 、 &lt;code&gt;$TERM&lt;/code&gt; などの値を、再度指定しなくても受け取る方法です。</target>
        </trans-unit>
        <trans-unit id="af34e672544a6ca1366a112af55970d3795853d6" translate="yes" xml:space="preserve">
          <source>Three arguments indicate a range from START to END with a spacing of STEP between possible outputs. &lt;code&gt;random choice&lt;/code&gt; will select one random item from the succeeding arguments.</source>
          <target state="translated">3つの引数は、開始から終了までの範囲を示し、可能な出力の間にSTEPの間隔があります。 &lt;code&gt;random choice&lt;/code&gt; すると、後続の引数からランダムなアイテムが1つ選択されます。</target>
        </trans-unit>
        <trans-unit id="0db7b1d5a15270db41f2cc8f791f0d914b51536a" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press</source>
          <target state="translated">自動提案を受け入れる(コマンドラインの内容を置き換える)には、次のように押します。</target>
        </trans-unit>
        <trans-unit id="ee864a54df8fc82a493855e23af51940c281088e" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or</source>
          <target state="translated">自動提案を受け入れる(コマンドラインの内容を置き換える)には、右矢印を押すか</target>
        </trans-unit>
        <trans-unit id="f891073aa4578597be2a0dcd4d98d094f936e0cd" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion (replacing the command line contents), press right arrow or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept the first suggested word, press &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. If the autosuggestion is not what you want, just ignore it: it won't execute unless you accept it.</source>
          <target state="translated">自動提案を受け入れる（コマンドラインの内容を置き換える）には、右矢印キーまたは&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;F&lt;/b&gt;キーを押します。最初の候補の単語、プレス受け入れるには&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;または&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;Fを&lt;/b&gt;。自動提案が適切でない場合は、無視してください。受け入れない限り、自動提案は実行されません。</target>
        </trans-unit>
        <trans-unit id="b8736772d7b0120e4918f841f4d7512238ae0d0f" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit</source>
          <target state="translated">自動提案を受け入れるには</target>
        </trans-unit>
        <trans-unit id="18bff7130ea79ac3d65a254db2e29fd6582707f0" translate="yes" xml:space="preserve">
          <source>To accept the autosuggestion, hit &lt;b&gt;&amp;rarr;&lt;/b&gt; or &lt;em&gt;Control&lt;/em&gt;-&lt;b&gt;F&lt;/b&gt;. To accept a single word of the autosuggestion, &lt;em&gt;Alt&lt;/em&gt;-&lt;b&gt;&amp;rarr;&lt;/b&gt; (right arrow). If the autosuggestion is not what you want, just ignore it.</source>
          <target state="translated">自動提案を受け入れるには、&lt;b&gt;&amp;rarr;&lt;/b&gt;または&lt;em&gt;Control&lt;/em&gt; - &lt;b&gt;Fを&lt;/b&gt;押します。自己暗示の単一の単語、受け入れるために、&lt;em&gt;Altキー&lt;/em&gt; - &lt;b&gt;&amp;rarr;&lt;/b&gt;（右矢印）。自動提案が適切でない場合は、無視してください。</target>
        </trans-unit>
        <trans-unit id="bf3b8743951a6f601c9691879cf6b325619cbbc5" translate="yes" xml:space="preserve">
          <source>To access one element of a list, use the index of the element inside of square brackets, like this:</source>
          <target state="translated">リストの1つの要素にアクセスするには、次のように角括弧の中に要素のインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="490972bea5b74c2308bba9f42c4d177bcaabea44" translate="yes" xml:space="preserve">
          <source>To append standard error to a file, use &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt;.</source>
          <target state="translated">ファイルに標準エラーを追加するには、 &lt;code&gt;2&amp;gt;&amp;gt;DESTINATION_FILE&lt;/code&gt; 使用します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
