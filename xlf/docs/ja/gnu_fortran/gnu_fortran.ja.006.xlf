<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="gnu_fortran">
    <body>
      <group id="gnu_fortran">
        <trans-unit id="eb53e961d2bb5f1b5ee80557c9816e0f3fdd477c" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of kind &lt;var&gt;KIND&lt;/var&gt;. If &lt;var&gt;KIND&lt;/var&gt; is absent, the return value is of default integer kind.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; で、種類は &lt;var&gt;KIND&lt;/var&gt; です。場合は &lt;var&gt;KIND&lt;/var&gt; 存在せず、戻り値は、デフォルトの整数の種類のものです。</target>
        </trans-unit>
        <trans-unit id="0bdf5ddfa5925754973e731c8e1d96133f640c61" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of kind &lt;var&gt;KIND&lt;/var&gt;. If &lt;var&gt;KIND&lt;/var&gt; is absent, the return value is of default integer kind. If &lt;var&gt;DIM&lt;/var&gt; is absent, the result is an array of the lower bounds of &lt;var&gt;ARRAY&lt;/var&gt;. If &lt;var&gt;DIM&lt;/var&gt; is present, the result is a scalar corresponding to the lower bound of the array along that dimension. If &lt;var&gt;ARRAY&lt;/var&gt; is an expression rather than a whole array or array structure component, or if it has a zero extent along the relevant dimension, the lower bound is taken to be 1.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; で、種類は &lt;var&gt;KIND&lt;/var&gt; です。場合は &lt;var&gt;KIND&lt;/var&gt; 存在せず、戻り値は、デフォルトの整数の種類のものです。場合 &lt;var&gt;DIM&lt;/var&gt; が存在せず、結果は、下限の配列である &lt;var&gt;ARRAY&lt;/var&gt; 。場合 &lt;var&gt;DIM&lt;/var&gt; が存在し、その結果、その次元に沿って配列の下限に対応するスカラーです。場合 &lt;var&gt;ARRAY&lt;/var&gt; は、式ではなく、全体配列または配列構造成分である、またはそれは、関連する次元に沿ってゼロ広がりを持っている場合、下限は1であるとします。</target>
        </trans-unit>
        <trans-unit id="83a9edd7ddbef7e8f627c3a7780c3eabdb730e23" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of kind &lt;var&gt;KIND&lt;/var&gt;. If &lt;var&gt;KIND&lt;/var&gt; is absent, the return value is of default integer kind. If &lt;var&gt;DIM&lt;/var&gt; is absent, the result is an array of the lower cobounds of &lt;var&gt;COARRAY&lt;/var&gt;. If &lt;var&gt;DIM&lt;/var&gt; is present, the result is a scalar corresponding to the lower cobound of the array along that codimension.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; で、種類は &lt;var&gt;KIND&lt;/var&gt; です。場合は &lt;var&gt;KIND&lt;/var&gt; 存在せず、戻り値は、デフォルトの整数の種類のものです。場合 &lt;var&gt;DIM&lt;/var&gt; が存在せず、結果は下のcoboundsの配列である &lt;var&gt;COARRAY&lt;/var&gt; 。場合 &lt;var&gt;DIM&lt;/var&gt; が存在し、その結果、その余次元に沿ってアレイの下部coboundに対応するスカラーです。</target>
        </trans-unit>
        <trans-unit id="a62ee54968351482d9fafb6b9f2f76c0ec81a458" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of kind &lt;var&gt;KIND&lt;/var&gt;. If &lt;var&gt;KIND&lt;/var&gt; is absent, the return value is of default integer kind. If &lt;var&gt;DIM&lt;/var&gt; is absent, the result is an array of the upper bounds of &lt;var&gt;ARRAY&lt;/var&gt;. If &lt;var&gt;DIM&lt;/var&gt; is present, the result is a scalar corresponding to the upper bound of the array along that dimension. If &lt;var&gt;ARRAY&lt;/var&gt; is an expression rather than a whole array or array structure component, or if it has a zero extent along the relevant dimension, the upper bound is taken to be the number of elements along the relevant dimension.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; で、種類は &lt;var&gt;KIND&lt;/var&gt; です。場合は &lt;var&gt;KIND&lt;/var&gt; 存在せず、戻り値は、デフォルトの整数の種類のものです。場合 &lt;var&gt;DIM&lt;/var&gt; が存在せず、結果は、上限の配列である &lt;var&gt;ARRAY&lt;/var&gt; 。場合 &lt;var&gt;DIM&lt;/var&gt; が存在し、その結果、上部その次元に沿って配列の結合に対応するスカラーです。 &lt;var&gt;ARRAY&lt;/var&gt; が配列全体または配列構造コンポーネントではなく式の場合、または関連する次元に沿って範囲がゼロの場合、上限は関連する次元に沿った要素の数と見なされます。</target>
        </trans-unit>
        <trans-unit id="598dee67912bfb6dc4099ccea478e8d202fdc5e7" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of kind &lt;var&gt;KIND&lt;/var&gt;. If &lt;var&gt;KIND&lt;/var&gt; is absent, the return value is of default integer kind. If &lt;var&gt;DIM&lt;/var&gt; is present, the result is an array with a rank one less than the rank of &lt;var&gt;ARRAY&lt;/var&gt;, and a size corresponding to the shape of &lt;var&gt;ARRAY&lt;/var&gt; with the &lt;var&gt;DIM&lt;/var&gt; dimension removed.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; で、種類は &lt;var&gt;KIND&lt;/var&gt; です。場合は &lt;var&gt;KIND&lt;/var&gt; 存在せず、戻り値は、デフォルトの整数の種類のものです。場合 &lt;var&gt;DIM&lt;/var&gt; が存在し、結果は以下のランクよりもランク1を持つ配列である &lt;var&gt;ARRAY&lt;/var&gt; との形状に対応する大き &lt;var&gt;ARRAY&lt;/var&gt; と &lt;var&gt;DIM&lt;/var&gt; の寸法を除去しました。</target>
        </trans-unit>
        <trans-unit id="d4eb954ceec6871a8aff825eb0013483cc733be0" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of the default integer kind.</source>
          <target state="translated">戻り値は &lt;code&gt;INTEGER&lt;/code&gt; 型で、デフォルトの整数の種類です。</target>
        </trans-unit>
        <trans-unit id="c6a1743976d9027bc9f3577d9c87408e3c4f6365" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of the default integer kind. For arrays, their rank is returned; for scalars zero is returned.</source>
          <target state="translated">戻り値は &lt;code&gt;INTEGER&lt;/code&gt; 型で、デフォルトの整数の種類です。配列の場合、それらのランクが返されます。スカラーの場合はゼロが返されます。</target>
        </trans-unit>
        <trans-unit id="2e905ca40ccd62ec252076e443b49b1de863c018" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; and of the same kind as &lt;var&gt;I&lt;/var&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;INTEGER&lt;/code&gt; 型で、 &lt;var&gt;I&lt;/var&gt; と同じ種類です。</target>
        </trans-unit>
        <trans-unit id="b6116519989c78aedef730f398f73e179cfb24d3" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; または &lt;code&gt;REAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eb509545a2eeeaf252e2869237f497564ddb7a7f" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;. (As a GNU extension, kind is the largest kind of the actual arguments.)</source>
          <target state="translated">戻り値のタイプは &lt;code&gt;INTEGER&lt;/code&gt; または &lt;code&gt;REAL&lt;/code&gt; です。（GNU拡張として、kindは実際の引数の最大の種類です。）</target>
        </trans-unit>
        <trans-unit id="eee9ab99f3e5a3ae690c8716e8b14d5ce06f2f46" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt;, with a &lt;code&gt;KIND&lt;/code&gt; corresponding to the size (in bytes) of a memory address on the target machine.</source>
          <target state="translated">戻り値のタイプは &lt;code&gt;INTEGER&lt;/code&gt; で、 &lt;code&gt;KIND&lt;/code&gt; はターゲットマシンのメモリアドレスのサイズ（バイト単位）に対応しています。</target>
        </trans-unit>
        <trans-unit id="249be10cc932f7ed0c8b836fb4fc9c745c4b5df5" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fbddfbc0a85071342fdff8fc3bb9f25f454fc734" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;INTEGER&lt;/code&gt;. If &lt;var&gt;KIND&lt;/var&gt; is present, it specifies the kind value of the return type; otherwise, it is of the default integer kind.</source>
          <target state="translated">戻り値の型は &lt;code&gt;INTEGER&lt;/code&gt; です。場合 &lt;var&gt;KIND&lt;/var&gt; が存在している、それは戻り値の型の種類値を指定します。それ以外の場合は、デフォルトの整数の種類です。</target>
        </trans-unit>
        <trans-unit id="5de0e4f80a9b872da4f5e336c0113b9974a1094d" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;LOGICAL&lt;/code&gt;</source>
          <target state="translated">戻り値の型は &lt;code&gt;LOGICAL&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="48c5fc8912623f8a9a113f6506c7b0e23b5c0c13" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;LOGICAL&lt;/code&gt; and of the default kind.</source>
          <target state="translated">戻り値の型は &lt;code&gt;LOGICAL&lt;/code&gt; で、デフォルトの種類です。</target>
        </trans-unit>
        <trans-unit id="370753e248a8b09156d7e597be39f3a1d02cfe65" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;LOGICAL&lt;/code&gt;; it is &lt;code&gt;.false.&lt;/code&gt; if either &lt;var&gt;c_ptr_1&lt;/var&gt; is a C NULL pointer or if &lt;var&gt;c_ptr1&lt;/var&gt; and &lt;var&gt;c_ptr_2&lt;/var&gt; point to different addresses.</source>
          <target state="translated">戻り値の型は &lt;code&gt;LOGICAL&lt;/code&gt; です。それは &lt;code&gt;.false.&lt;/code&gt; いずれかの場合 &lt;var&gt;c_ptr_1&lt;/var&gt; C NULLポインタであるか、または場合 &lt;var&gt;c_ptr1&lt;/var&gt; と &lt;var&gt;c_ptr_2&lt;/var&gt; 異なるアドレスをポイント。</target>
        </trans-unit>
        <trans-unit id="aa23bca46de4600f9ff3218ab9518e4d08e2c3a3" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL(8)&lt;/code&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL(8)&lt;/code&gt; 型です。</target>
        </trans-unit>
        <trans-unit id="efb37cd7ab3769e55ed29b5e0743bab1572519ec" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; and lies in the range &lt;em&gt;- 0.4027... \leq Bessel (0,x) \leq 1&lt;/em&gt;. It has the same kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">戻り値の型は &lt;code&gt;REAL&lt;/code&gt; で、範囲は&lt;em&gt;-0.4027 ... \ leq Bessel（0、x）\ leq 1&lt;/em&gt;です。 &lt;var&gt;X&lt;/var&gt; と同じ種類です。</target>
        </trans-unit>
        <trans-unit id="a7f8a8b7baaa4eba4b1ab3ef3e72e6a0ab31cf47" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; and lies in the range &lt;em&gt;- 0.5818... \leq Bessel (0,x) \leq 0.5818 &lt;/em&gt;. It has the same kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL&lt;/code&gt; 型で、範囲は&lt;em&gt;-0.5818 ... \ leq Bessel（0、x）\ leq 0.5818&lt;/em&gt;です。 &lt;var&gt;X&lt;/var&gt; と同じ種類です。</target>
        </trans-unit>
        <trans-unit id="6e609ed1651145c9e468a4004da8ba43e0a852b9" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; and of the same kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL&lt;/code&gt; 型で、 &lt;var&gt;X&lt;/var&gt; と同じ種類です。</target>
        </trans-unit>
        <trans-unit id="c7c92ce3fa938c9048704a3fa45833e2bbda77aa" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; and of the same kind as &lt;var&gt;X&lt;/var&gt;. It lies in the range &lt;em&gt;0 \leq erfc (x) \leq 2 &lt;/em&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL&lt;/code&gt; 型で、 &lt;var&gt;X&lt;/var&gt; と同じ種類です。&lt;em&gt;0 \ leq erfc（x）\ leq 2&lt;/em&gt;の範囲にあります。</target>
        </trans-unit>
        <trans-unit id="9b3ba37ae4292a3d6aace960f8ba7c22914180e3" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; of the same kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">戻り値は、 &lt;var&gt;X&lt;/var&gt; と同じ種類の &lt;code&gt;REAL&lt;/code&gt; 型です。</target>
        </trans-unit>
        <trans-unit id="c4d7bc9244655beb96b55b76d32c755d70f08bb9" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;. The kind type parameter is the same as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">戻り値の型は &lt;code&gt;REAL&lt;/code&gt; または &lt;code&gt;COMPLEX&lt;/code&gt; です。kind型パラメーターは &lt;var&gt;X&lt;/var&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="52f2f43018f4f86c1e559faa9e18b3978a8a9f65" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;. The kind type parameter is the same as &lt;var&gt;X&lt;/var&gt;. If &lt;var&gt;X&lt;/var&gt; is &lt;code&gt;COMPLEX&lt;/code&gt;, the imaginary part &lt;em&gt;\omega&lt;/em&gt; is in the range &lt;em&gt;-\pi &amp;lt; \omega \leq \pi&lt;/em&gt;.</source>
          <target state="translated">戻り値の型は &lt;code&gt;REAL&lt;/code&gt; または &lt;code&gt;COMPLEX&lt;/code&gt; です。kind型パラメーターは &lt;var&gt;X&lt;/var&gt; と同じです。場合 &lt;var&gt;X&lt;/var&gt; がある &lt;code&gt;COMPLEX&lt;/code&gt; 、虚数部&lt;em&gt;\ omegaが&lt;/em&gt;範囲内である&lt;em&gt;- \ &amp;lt;\オメガ\当量\パイパイ&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="271633e463525471e3aaf3bfaf331cbeb0bdc05a" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; with the kind type parameter of the argument if the optional &lt;var&gt;KIND&lt;/var&gt; is absent; otherwise, the kind type parameter will be given by &lt;var&gt;KIND&lt;/var&gt;. If the magnitude of &lt;var&gt;X&lt;/var&gt; is less than one, &lt;code&gt;AINT(X)&lt;/code&gt; returns zero. If the magnitude is equal to or greater than one then it returns the largest whole number that does not exceed its magnitude. The sign is the same as the sign of &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">オプションの &lt;var&gt;KIND&lt;/var&gt; が存在しない場合、戻り値は &lt;code&gt;REAL&lt;/code&gt; 型で、引数のkind型パラメーターです。それ以外の場合、kind型パラメーターは &lt;var&gt;KIND&lt;/var&gt; によって指定されます。 &lt;var&gt;X&lt;/var&gt; の大きさが1より小さい場合、 &lt;code&gt;AINT(X)&lt;/code&gt; はゼロを返します。マグニチュードが1以上の場合、マグニチュードを超えない最大の整数を返します。符号は &lt;var&gt;X&lt;/var&gt; の符号と同じです。</target>
        </trans-unit>
        <trans-unit id="f7f36e7fcea48ef96a95edfab1de67a3cc236316" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt; with the kind type parameter of the argument.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL&lt;/code&gt; 型で、引数のkind型パラメーターが含まれています。</target>
        </trans-unit>
        <trans-unit id="c45065812d5139a1b1942d2709f16b6269e10256" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt;, of the same kind as &lt;var&gt;X&lt;/var&gt; and lies in the range &lt;em&gt;-1 \leq erf (x) \leq 1 &lt;/em&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL&lt;/code&gt; 型で、 &lt;var&gt;X&lt;/var&gt; と同じ種類であり、範囲は&lt;em&gt;-1 \ leq erf（x）\ leq 1&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="3593be30e354a4944f584f85ca4db6a0e05b4320" translate="yes" xml:space="preserve">
          <source>The return value is of type &lt;code&gt;REAL&lt;/code&gt;. It has the same kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">戻り値は &lt;code&gt;REAL&lt;/code&gt; 型です。 &lt;var&gt;X&lt;/var&gt; と同じ種類です。</target>
        </trans-unit>
        <trans-unit id="984b03c6b9e16b2e0f22e91b0e736ec9951bccee" translate="yes" xml:space="preserve">
          <source>The return value is of type default &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">戻り値の型はデフォルトの &lt;code&gt;INTEGER&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0f315eca9ae0c32f83b2fd4691a70cd03d6e071b" translate="yes" xml:space="preserve">
          <source>The return value is of type double precision real.</source>
          <target state="translated">戻り値は倍精度リアル型です。</target>
        </trans-unit>
        <trans-unit id="582cd1df820740d9a93f7e6f89fdb131e2276d78" translate="yes" xml:space="preserve">
          <source>The return value is of type integer and of the system-dependent kind &lt;code&gt;C_SIZE_T&lt;/code&gt; (from the &lt;code&gt;ISO_C_BINDING&lt;/code&gt; module). Its value is the number of bytes occupied by the argument. If the argument has the &lt;code&gt;POINTER&lt;/code&gt; attribute, the number of bytes of the storage area pointed to is returned. If the argument is of a derived type with &lt;code&gt;POINTER&lt;/code&gt; or &lt;code&gt;ALLOCATABLE&lt;/code&gt; components, the return value does not account for the sizes of the data pointed to by these components.</source>
          <target state="translated">戻り値は整数型で、システムに依存する種類の &lt;code&gt;C_SIZE_T&lt;/code&gt; （ &lt;code&gt;ISO_C_BINDING&lt;/code&gt; モジュールから）です。その値は、引数が占めるバイト数です。引数に &lt;code&gt;POINTER&lt;/code&gt; 属性がある場合は、ポイントされているストレージ域のバイト数が返されます。引数が &lt;code&gt;POINTER&lt;/code&gt; または &lt;code&gt;ALLOCATABLE&lt;/code&gt; コンポーネントを持つ派生型である場合、戻り値はこれらのコンポーネントが指すデータのサイズを考慮しません。</target>
        </trans-unit>
        <trans-unit id="6eec0376a05371f7d168dbbc7f9d15cbde400f9a" translate="yes" xml:space="preserve">
          <source>The return value is of type integer and of the system-dependent kind &lt;var&gt;C_SIZE_T&lt;/var&gt; (from the &lt;var&gt;ISO_C_BINDING&lt;/var&gt; module). Its value is the number of bytes occupied by the argument. If the argument has the &lt;code&gt;POINTER&lt;/code&gt; attribute, the number of bytes of the storage area pointed to is returned. If the argument is of a derived type with &lt;code&gt;POINTER&lt;/code&gt; or &lt;code&gt;ALLOCATABLE&lt;/code&gt; components, the return value does not account for the sizes of the data pointed to by these components. If the argument is polymorphic, the size according to the dynamic type is returned. The argument may not be a procedure or procedure pointer. Note that the code assumes for arrays that those are contiguous; for contiguous arrays, it returns the storage or an array element multiplied by the size of the array.</source>
          <target state="translated">戻り値は整数型で、システムに依存する種類の &lt;var&gt;C_SIZE_T&lt;/var&gt; （ &lt;var&gt;ISO_C_BINDING&lt;/var&gt; モジュールから）です。その値は、引数が占めるバイト数です。引数に &lt;code&gt;POINTER&lt;/code&gt; 属性がある場合は、ポイントされているストレージ域のバイト数が返されます。引数が &lt;code&gt;POINTER&lt;/code&gt; または &lt;code&gt;ALLOCATABLE&lt;/code&gt; の派生型の場合コンポーネントの場合、戻り値はこれらのコンポーネントが指すデータのサイズを考慮しません。引数がポリモーフィックの場合、動的タイプに応じたサイズが返されます。引数は、プロシージャまたはプロシージャポインタであってはなりません。コードでは、配列が連続していると想定していることに注意してください。連続した配列の場合、ストレージまたは配列のサイズを乗じた配列要素を返します。</target>
        </trans-unit>
        <trans-unit id="4e4e26872c5fa9c8fdafe9bf5459f08da237b356" translate="yes" xml:space="preserve">
          <source>The return value is of type real with the kind type parameter of the argument if the optional &lt;var&gt;KIND&lt;/var&gt; is absent; otherwise, the kind type parameter will be given by &lt;var&gt;KIND&lt;/var&gt;. If &lt;var&gt;A&lt;/var&gt; is greater than zero, &lt;code&gt;ANINT(A)&lt;/code&gt; returns &lt;code&gt;AINT(X+0.5)&lt;/code&gt;. If &lt;var&gt;A&lt;/var&gt; is less than or equal to zero then it returns &lt;code&gt;AINT(X-0.5)&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;var&gt;KIND&lt;/var&gt; が存在しない場合、戻り値は引数のkind型パラメーターを持つ実数型です。それ以外の場合、kind型パラメーターは &lt;var&gt;KIND&lt;/var&gt; によって指定されます。場合 &lt;var&gt;A&lt;/var&gt; はゼロより大きい、 &lt;code&gt;ANINT(A)&lt;/code&gt; は返し &lt;code&gt;AINT(X+0.5)&lt;/code&gt; 。場合 &lt;var&gt;A&lt;/var&gt; はゼロに等しいかまたはそれ以下であり、それは返し &lt;code&gt;AINT(X-0.5)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="959f4c5d3ac7748c28361f6f293891c14b6170fa" translate="yes" xml:space="preserve">
          <source>The return value is the result of &lt;code&gt;A - (INT(A/P) * P)&lt;/code&gt;. The type and kind of the return value is the same as that of the arguments. The returned value has the same sign as A and a magnitude less than the magnitude of P.</source>
          <target state="translated">戻り値は &lt;code&gt;A - (INT(A/P) * P)&lt;/code&gt; です。戻り値の型と種類は、引数と同じです。戻り値はAと同じ符号で、Pのマグニチュードよりも小さいマグニチュードを持っています。</target>
        </trans-unit>
        <trans-unit id="13755d147827e4166e8b56ffa0ab71a42622c2f5" translate="yes" xml:space="preserve">
          <source>The return value is the result of &lt;code&gt;A - (INT(A/P) * P)&lt;/code&gt;. The type and kind of the return value is the same as that of the arguments. The returned value has the same sign as A and a magnitude less than the magnitude of P. (As a GNU extension, kind is the largest kind of the actual arguments.)</source>
          <target state="translated">戻り値は &lt;code&gt;A - (INT(A/P) * P)&lt;/code&gt; です。戻り値の種類と種類は引数と同じです。戻り値の符号はAと同じで、大きさはPの大きさよりも小さくなります（GNU拡張として、kindは実際の引数の最大の種類です）。</target>
        </trans-unit>
        <trans-unit id="fc1a7134b3700811e1b902a25e654b06aaf1aead" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;GETGID&lt;/code&gt; is an &lt;code&gt;INTEGER&lt;/code&gt; of the default kind.</source>
          <target state="translated">戻り値 &lt;code&gt;GETGID&lt;/code&gt; がある &lt;code&gt;INTEGER&lt;/code&gt; 、デフォルトの種類の。</target>
        </trans-unit>
        <trans-unit id="b162949d538a88dc141803e7b2a4ecb8ca274cf0" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;GETPID&lt;/code&gt; is an &lt;code&gt;INTEGER&lt;/code&gt; of the default kind.</source>
          <target state="translated">戻り値 &lt;code&gt;GETPID&lt;/code&gt; がある &lt;code&gt;INTEGER&lt;/code&gt; 、デフォルトの種類の。</target>
        </trans-unit>
        <trans-unit id="4028dd5f729d49755b5e378fb57c9b2e9288e821" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;GETUID&lt;/code&gt; is an &lt;code&gt;INTEGER&lt;/code&gt; of the default kind.</source>
          <target state="translated">戻り値 &lt;code&gt;GETUID&lt;/code&gt; がある &lt;code&gt;INTEGER&lt;/code&gt; 、デフォルトの種類の。</target>
        </trans-unit>
        <trans-unit id="3d715262b947ce1f385c5394b09cac4bfaba7ec8" translate="yes" xml:space="preserve">
          <source>The returned value has the same sign as P and a magnitude less than the magnitude of P.</source>
          <target state="translated">返された値は、Pと同じ符号を持ち、Pのマグニチュードよりも小さいマグニチュードを持つ。</target>
        </trans-unit>
        <trans-unit id="5b7f540253a5a8f1d16e9afd7bde9fc797a18ad7" translate="yes" xml:space="preserve">
          <source>The runtime-library implements the xorshift1024* random number generator (RNG). This generator has a period of &lt;em&gt;2^{1024} - 1&lt;/em&gt;, and when using multiple threads up to &lt;em&gt;2^{512}&lt;/em&gt; threads can each generate &lt;em&gt;2^{512}&lt;/em&gt; random numbers before any aliasing occurs.</source>
          <target state="translated">ランタイムライブラリは、xorshift1024 *乱数ジェネレーター（RNG）を実装します。このジェネレーターの周期は&lt;em&gt;2 ^ {1024}-1&lt;/em&gt;であり、複数のスレッドを使用する場合、最大&lt;em&gt;2 ^ {512}の&lt;/em&gt;スレッドはそれぞれ、エイリアスが発生する前に&lt;em&gt;2 ^ {512}の&lt;/em&gt;乱数を生成できます。</target>
        </trans-unit>
        <trans-unit id="fd62adf3c80e0178e752054222417f6259e8f5be" translate="yes" xml:space="preserve">
          <source>The runtime-library implements the xoshiro256** pseudorandom number generator (PRNG). This generator has a period of &lt;em&gt;2^{256} - 1&lt;/em&gt;, and when using multiple threads up to &lt;em&gt;2^{128}&lt;/em&gt; threads can each generate &lt;em&gt;2^{128}&lt;/em&gt; random numbers before any aliasing occurs.</source>
          <target state="translated">ランタイムライブラリは、xoshiro256 **疑似乱数ジェネレータ（PRNG）を実装します。このジェネレーターの周期は&lt;em&gt;2 ^ {256} -1&lt;/em&gt;であり、複数のスレッドを使用する場合、最大&lt;em&gt;2 ^ {128}の&lt;/em&gt;スレッドが、エイリアシングが発生する前にそれぞれ&lt;em&gt;2 ^ {128}の&lt;/em&gt;乱数を生成できます。</target>
        </trans-unit>
        <trans-unit id="42e4d0f915730a2252b564d93ed3dce9a87c6599" translate="yes" xml:space="preserve">
          <source>The seconds of the minute</source>
          <target state="translated">分の秒数</target>
        </trans-unit>
        <trans-unit id="24e7b16ff59f49171cc78027e1794f8f1b1d7d6d" translate="yes" xml:space="preserve">
          <source>The size in bits of the numeric storage unit.</source>
          <target state="translated">数値記憶装置のビット単位のサイズ。</target>
        </trans-unit>
        <trans-unit id="b7ee76dd2d9d1f495ebca5858975eaff9d4583d5" translate="yes" xml:space="preserve">
          <source>The start of the GNU Fortran 95 project was announced on the GCC homepage in March 18, 2000 (even though Andy had already been working on it for a while, of course).</source>
          <target state="translated">GNU Fortran 95プロジェクトの開始は2000年3月18日にGCCのホームページで発表されました(もちろん、Andyはすでにしばらくの間それに取り組んでいましたが)。</target>
        </trans-unit>
        <trans-unit id="38ed06fe770c5d35789774258b2b51a19de5472c" translate="yes" xml:space="preserve">
          <source>The statement is an image-control statement but does not imply sync memory. Still, all preceeding push communications of this image to the specified remote image have to be completed before &lt;code&gt;event_wait&lt;/code&gt; on the remote image returns.</source>
          <target state="translated">このステートメントはイメージ制御ステートメントですが、同期メモリを意味するものではありません。それでも、このイメージの指定されたリモートイメージへの先行するすべてのプッシュ通信は、リモートイメージの &lt;code&gt;event_wait&lt;/code&gt; が戻る前に完了する必要があります。</target>
        </trans-unit>
        <trans-unit id="9616ab988b77a036324fbde31f5b9db4dfa45ebc" translate="yes" xml:space="preserve">
          <source>The structure used for implementing arbitrary reference chains. A &lt;code&gt;CAF_REFERENCE_T&lt;/code&gt; allows to specify a component reference or any kind of array reference of any rank supported by gfortran. For array references all kinds as known by the compiler/Fortran standard are supported indicated by a &lt;code&gt;MODE&lt;/code&gt;.</source>
          <target state="translated">任意の参照チェーンを実装するために使用される構造。 A &lt;code&gt;CAF_REFERENCE_T&lt;/code&gt; は、コンポーネントの参照またはのgfortranによってサポートされる任意のランクの配列リファレンスのいずれかの種類を指定することを可能にします。配列参照の場合、コンパイラ/ Fortran規格で知られているすべての種類がサポートされ、 &lt;code&gt;MODE&lt;/code&gt; で示されます。</target>
        </trans-unit>
        <trans-unit id="7999118032b291f8794b503745efd367d18a17c0" translate="yes" xml:space="preserve">
          <source>The syntax for the initializers is as for the &lt;code&gt;DATA&lt;/code&gt; statement, but unlike in a &lt;code&gt;DATA&lt;/code&gt; statement, an initializer only applies to the variable immediately preceding the initialization. In other words, something like &lt;code&gt;INTEGER I,J/2,3/&lt;/code&gt; is not valid. This style of initialization is only allowed in declarations without double colons (&lt;code&gt;::&lt;/code&gt;); the double colons were introduced in Fortran 90, which also introduced a standard syntax for initializing variables in type declarations.</source>
          <target state="translated">初期化子の構文はのためのようである &lt;code&gt;DATA&lt;/code&gt; 文ではなく、内とは違っ &lt;code&gt;DATA&lt;/code&gt; 文で、初期化子は、すぐに初期化の前の変数に適用されます。つまり、 &lt;code&gt;INTEGER I,J/2,3/&lt;/code&gt; ようなものは無効です。このスタイルの初期化は、二重コロン（ &lt;code&gt;::&lt;/code&gt; :）なしの宣言でのみ許可されます。二重コロンはFortran 90で導入されました。これにより、型宣言で変数を初期化するための標準構文も導入されました。</target>
        </trans-unit>
        <trans-unit id="28a61d29fef76ee86cf7c31200823d33363cf00f" translate="yes" xml:space="preserve">
          <source>The syntax of the directive is</source>
          <target state="translated">ディレクティブの構文は</target>
        </trans-unit>
        <trans-unit id="3764ebf0328558fd1dd7adacb7fedba955fffe52" translate="yes" xml:space="preserve">
          <source>The the present status for optional arguments with value attribute, which are internally passed by value</source>
          <target state="translated">value属性を持つオプション引数の現在の状態。</target>
        </trans-unit>
        <trans-unit id="bf8c7dff005259cfa5a4d11f5128b5cc039c6c96" translate="yes" xml:space="preserve">
          <source>The three last arguments allow the user to get status information. After synchronous execution, &lt;code&gt;EXITSTAT&lt;/code&gt; contains the integer exit code of the command, as returned by &lt;code&gt;system&lt;/code&gt;. &lt;code&gt;CMDSTAT&lt;/code&gt; is set to zero if the command line was executed (whatever its exit status was). &lt;code&gt;CMDMSG&lt;/code&gt; is assigned an error message if an error has occurred.</source>
          <target state="translated">最後の3つの引数により、ユーザーはステータス情報を取得できます。同期実行後、 &lt;code&gt;EXITSTAT&lt;/code&gt; には、 &lt;code&gt;system&lt;/code&gt; によって返されるコマンドの整数終了コードが含まれます。コマンドラインが実行された場合（終了ステータスが何であれ）、 &lt;code&gt;CMDSTAT&lt;/code&gt; はゼロに設定されます。エラーが発生した場合、 &lt;code&gt;CMDMSG&lt;/code&gt; にはエラーメッセージが割り当てられます。</target>
        </trans-unit>
        <trans-unit id="76b048dbc2a9186b5f83e47a87d8985393f66ae2" translate="yes" xml:space="preserve">
          <source>The transformational function uses a recurrence algorithm which might, for some values of &lt;var&gt;X&lt;/var&gt;, lead to different results than calls to the elemental function.</source>
          <target state="translated">変換関数は、 &lt;var&gt;X&lt;/var&gt; の一部の値について、要素関数の呼び出しとは異なる結果をもたらす可能性がある再帰アルゴリズムを使用します。</target>
        </trans-unit>
        <trans-unit id="e948b80cb7634d9e146c3c4cd97e720da8293b87" translate="yes" xml:space="preserve">
          <source>The two maps share memory, and the size of the union is ultimately six bytes:</source>
          <target state="translated">2 つのマップはメモリを共有しており、組合のサイズは最終的に 6 バイトになります。</target>
        </trans-unit>
        <trans-unit id="262c2c26c9d4d716ef902e5e289d6414c127cfc0" translate="yes" xml:space="preserve">
          <source>The two sections below detail the extensions to standard Fortran that are implemented in GNU Fortran, as well as some of the popular or historically important extensions that are not (or not yet) implemented. For the latter case, we explain the alternatives available to GNU Fortran users, including replacement by standard-conforming code or GNU extensions.</source>
          <target state="translated">以下の二つのセクションでは、GNU Fortranで実装されている標準Fortranの拡張と、実装されていない(あるいはまだ実装されていない)人気のある拡張や歴史的に重要な拡張のいくつかを詳細に説明します。後者については、標準に準拠したコードやGNU拡張による置き換えを含め、GNU Fortranユーザが利用可能な代替案を説明します。</target>
        </trans-unit>
        <trans-unit id="bcfae381a0eef2dc76bc9418159791a9ca625429" translate="yes" xml:space="preserve">
          <source>The type and kind of the result are those of the arguments.</source>
          <target state="translated">結果の型と種類は引数のものです。</target>
        </trans-unit>
        <trans-unit id="dd135a1aca29e33ba458b4303e44879b82e09f3f" translate="yes" xml:space="preserve">
          <source>The type and kind of the result are those of the arguments. (As a GNU extension, kind is the largest kind of the actual arguments.)</source>
          <target state="translated">結果の型と種類は引数のものです。(GNUの拡張として、kindは実際の引数の最大の種類です)。</target>
        </trans-unit>
        <trans-unit id="b60d7601344c5a76fe23d562a35e95b6cd3dea0d" translate="yes" xml:space="preserve">
          <source>The type and kind type parameter shall be the same as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">typeおよびkind型パラメーターは &lt;var&gt;X&lt;/var&gt; と同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="82b301b08e2a4fecedb703e179985e48328b7a90" translate="yes" xml:space="preserve">
          <source>The type and kind type parameter shall be the same as &lt;var&gt;Y&lt;/var&gt;. If &lt;var&gt;Y&lt;/var&gt; is zero, then &lt;var&gt;X&lt;/var&gt; must be nonzero.</source>
          <target state="translated">typeおよびkind型パラメーターは &lt;var&gt;Y&lt;/var&gt; と同じでなければなりません。場合は &lt;var&gt;Y&lt;/var&gt; がゼロである場合、 &lt;var&gt;X&lt;/var&gt; はゼロであってはなりません。</target>
        </trans-unit>
        <trans-unit id="751d8f91b294511309a460716d26411b1fe93de1" translate="yes" xml:space="preserve">
          <source>The type may be &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; または &lt;code&gt;REAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f8f2ea0d4d6ab9dc7bd366ab4f0dd6a79aa826cb" translate="yes" xml:space="preserve">
          <source>The type may be &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt; 、または &lt;code&gt;COMPLEX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="72337e0bbf2eed4e1d2af8058240e838f1642aef" translate="yes" xml:space="preserve">
          <source>The type name may be ommitted, in which case the structure type itself is anonymous, and other structures of the same type cannot be instantiated. The following shows some examples:</source>
          <target state="translated">型名が省略されている場合があり、その場合は構造体の型自体が匿名であり、同じ型の他の構造体はインスタンス化できません。以下にいくつかの例を示します。</target>
        </trans-unit>
        <trans-unit id="d93c0e4e182c185d842cdedd7b10bce1e0b09ec2" translate="yes" xml:space="preserve">
          <source>The type of a function result is declared more than once with the same type. If</source>
          <target state="translated">関数の結果の型が同じ型で複数回宣言されている。もし</target>
        </trans-unit>
        <trans-unit id="8cc354975027bfd2028d021bf406aae4e3c2d38f" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">引数のタイプは &lt;code&gt;COMPLEX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="93d3d86c4793cd0d4401ee7d242dfcc9aa3063bc" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be &lt;code&gt;LOGICAL&lt;/code&gt; and it shall not be scalar.</source>
          <target state="translated">引数のタイプは &lt;code&gt;LOGICAL&lt;/code&gt; であり、スカラーであってはなりません。</target>
        </trans-unit>
        <trans-unit id="a1874399dd8debb219c5166e114bcbc5bf94b1dd" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">引数の型は &lt;code&gt;REAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1ceb8e964c7fd1ebadc2b5eede315eb190e2024b" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be a &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">引数の型は &lt;code&gt;INTEGER&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="06e32e8771daa785aeef2c61d1c640563e957265" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be a &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">引数の型は &lt;code&gt;REAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ac8d7b662297ea3c01d30c6ccc66589e2943b18a" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be a scalar &lt;code&gt;INTEGER&lt;/code&gt;. It is &lt;code&gt;INTENT(IN)&lt;/code&gt;.</source>
          <target state="translated">引数のタイプはスカラー &lt;code&gt;INTEGER&lt;/code&gt; でなければなりません。それは &lt;code&gt;INTENT(IN)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc735b17b3e1f45f00cd00ddaaaff079cc26f77b" translate="yes" xml:space="preserve">
          <source>The type of the argument shall be an &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">引数のタイプは、 &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt; 、または &lt;code&gt;COMPLEX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6a26da1da7695d65728a115e85aba923eff3ae08" translate="yes" xml:space="preserve">
          <source>The type of the return value is the default &lt;code&gt;INTEGER&lt;/code&gt;. If all the bits of &lt;code&gt;I&lt;/code&gt; are zero, the result value is &lt;code&gt;BIT_SIZE(I)&lt;/code&gt;.</source>
          <target state="translated">戻り値の型はデフォルトの &lt;code&gt;INTEGER&lt;/code&gt; です。 &lt;code&gt;I&lt;/code&gt; のすべてのビットがゼロの場合、結果の値は &lt;code&gt;BIT_SIZE(I)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7fbe3f02380e2b541d6e5457e7fd0a69d68d25ff" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;CHARACTER&lt;/code&gt; and of default kind.</source>
          <target state="translated">タイプは &lt;code&gt;CHARACTER&lt;/code&gt; で、デフォルトの種類です。</target>
        </trans-unit>
        <trans-unit id="8ac9263fbe3acf460bfb8625ad993bbd135775a9" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;CHARACTER&lt;/code&gt; of default kind and shall specify a valid path within the file system.</source>
          <target state="translated">タイプはデフォルトの種類の &lt;code&gt;CHARACTER&lt;/code&gt; であり、ファイルシステム内の有効なパスを指定します。</target>
        </trans-unit>
        <trans-unit id="4d5803c299829066d26b7e0ce007201e4f888669" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;CHARACTER&lt;/code&gt; of the default kind, a valid path within the file system.</source>
          <target state="translated">タイプは、デフォルトの種類の &lt;code&gt;CHARACTER&lt;/code&gt; 、つまりファイルシステム内の有効なパスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="1191d123664006490d5882a44e897251d5c2caab" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;CHARACTER&lt;/code&gt;, of the default kind and a valid path within the file system.</source>
          <target state="translated">タイプは &lt;code&gt;CHARACTER&lt;/code&gt; で、デフォルトの種類であり、ファイルシステム内の有効なパスです。</target>
        </trans-unit>
        <trans-unit id="f3c4911b8a9b58407af0c2fbaba9514d93d71561" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;CHARACTER&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;CHARACTER&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eb22e9421ec5f9f0d104cf9bb996a9f8d7dee861" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;COMPLEX(8)&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;COMPLEX(8)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="06b67a221511c0e137257882d1e9e59a3a6a906a" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;COMPLEX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fa76ae774f29008bb21faf05fe5ccb873dccc65b" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER(4), DIMENSION(13)&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER(4), DIMENSION(13)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="49195e157b64b566b580d8516dbc048e0859f5ec" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER, DIMENSION(3)&lt;/code&gt; and the kind shall be the default integer kind.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER, DIMENSION(3)&lt;/code&gt; で、種類はデフォルトの整数の種類です。</target>
        </trans-unit>
        <trans-unit id="91ac4567f922029acc27911837202a12cd629a6c" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; または &lt;code&gt;REAL&lt;/code&gt; である必要があります</target>
        </trans-unit>
        <trans-unit id="6d2189a5d0c4283c4e9be116f62bac9339b0eae3" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt; or &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; または &lt;code&gt;REAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e640f8d3716ba6d12a4818ad86507a012d12c244" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt; or a boz-literal-constant.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; またはboz-literal-constantでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b7033141ab7807510ed446e758a073d59e78db46" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt; with the same kind type parameter as &lt;var&gt;I&lt;/var&gt; or a boz-literal-constant. &lt;var&gt;I&lt;/var&gt; and &lt;var&gt;J&lt;/var&gt; shall not both be boz-literal-constants.</source>
          <target state="translated">タイプは、 &lt;var&gt;I&lt;/var&gt; またはboz-literal-constantと同じ種類タイプパラメーターを持つ &lt;code&gt;INTEGER&lt;/code&gt; でなければなりません。 &lt;var&gt;I&lt;/var&gt; と &lt;var&gt;J&lt;/var&gt; の両方がboz-literal-constantsであってはなりません。</target>
        </trans-unit>
        <trans-unit id="2398afaa22acebf6c886fed2e5dc8c055949c3e0" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt; 、または &lt;code&gt;COMPLEX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="423f64bb13fd0d42f68ddc7daa7ff17b2469804e" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt;, of the same kind as &lt;var&gt;FROM&lt;/var&gt;.</source>
          <target state="translated">タイプは &lt;var&gt;FROM&lt;/var&gt; と同じ種類の &lt;code&gt;INTEGER&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="cd7da9b9811c2580ca363bb937e63ef59f2802c6" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt;, of the same kind as &lt;var&gt;I&lt;/var&gt;. (As a GNU extension, different kinds are also permitted.)</source>
          <target state="translated">タイプは &lt;var&gt;I&lt;/var&gt; と同じ種類の &lt;code&gt;INTEGER&lt;/code&gt; です。（GNU拡張として、さまざまな種類も許可されています。）</target>
        </trans-unit>
        <trans-unit id="9ada3b2664ea127dd02d2db4489e10c7cbecc094" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc3226094e6148191cbe212a1c5e1db104d20630" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;INTEGER&lt;/code&gt;. It represents the location of the memory that should be de-allocated.</source>
          <target state="translated">タイプは &lt;code&gt;INTEGER&lt;/code&gt; です。これは、割り当てを解除する必要があるメモリの場所を表します。</target>
        </trans-unit>
        <trans-unit id="d658f58c3260d8a5faf85a1dcf5910d294af1e67" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;LOGICAL&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;LOGICAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1f6885c8dbbf74fea9a2c2207ed5c178cfd8486c" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;REAL(4), DIMENSION(2)&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;REAL(4), DIMENSION(2)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="98eecf6903ab82ddba4992ccecbade0f5e4dc553" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;REAL(4)&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;REAL(4)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53e0fc940e7cbebaeb46dba0fae40184676739e7" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;REAL&lt;/code&gt; または &lt;code&gt;COMPLEX&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d7c7235d467d216904c788cbcc38511c2e9b34bd" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;; if &lt;var&gt;Y&lt;/var&gt; is present, &lt;var&gt;X&lt;/var&gt; shall be REAL.</source>
          <target state="translated">タイプは &lt;code&gt;REAL&lt;/code&gt; または &lt;code&gt;COMPLEX&lt;/code&gt; です。 &lt;var&gt;Y&lt;/var&gt; が存在する場合、 &lt;var&gt;X&lt;/var&gt; は実数です。</target>
        </trans-unit>
        <trans-unit id="9db9c2eb618b2ddd88b7468a00b9cefb69525c6a" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;REAL&lt;/code&gt; with &lt;code&gt;INTENT(OUT)&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;INTENT(OUT)&lt;/code&gt; の &lt;code&gt;REAL&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="5a1d18069968fd48b59b8a6d6c93958c7b56552e" translate="yes" xml:space="preserve">
          <source>The type shall be &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;REAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8845fd97fc1463c357a0d65af6946451066b800c" translate="yes" xml:space="preserve">
          <source>The type shall be either &lt;code&gt;REAL&lt;/code&gt; and a magnitude that is less than or equal to one - or be &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">タイプは &lt;code&gt;REAL&lt;/code&gt; で、1以下のマグニチュード、または &lt;code&gt;COMPLEX&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e5a30dd13926b2e12959183c6903362c0105b0fd" translate="yes" xml:space="preserve">
          <source>The type shall be either a scalar &lt;code&gt;INTEGER&lt;/code&gt; type or a scalar &lt;code&gt;LOGICAL&lt;/code&gt; type or a boz-literal-constant.</source>
          <target state="translated">型は、スカラー &lt;code&gt;INTEGER&lt;/code&gt; 型、スカラー &lt;code&gt;LOGICAL&lt;/code&gt; 型、またはboz-literal-constantのいずれかです。</target>
        </trans-unit>
        <trans-unit id="94fbd5f24d0acbd8e22e93455330e0fd225c853c" translate="yes" xml:space="preserve">
          <source>The type shall be either a scalar &lt;code&gt;INTEGER&lt;/code&gt; type or a scalar &lt;code&gt;LOGICAL&lt;/code&gt; type.</source>
          <target state="translated">タイプは、スカラー &lt;code&gt;INTEGER&lt;/code&gt; タイプまたはスカラー &lt;code&gt;LOGICAL&lt;/code&gt; タイプのいずれかです。</target>
        </trans-unit>
        <trans-unit id="ec7ca22141e4b9a06e5dda596780008cef2fb919" translate="yes" xml:space="preserve">
          <source>The type shall be numeric if &lt;var&gt;VECTOR_A&lt;/var&gt; is of numeric type or &lt;code&gt;LOGICAL&lt;/code&gt; if &lt;var&gt;VECTOR_A&lt;/var&gt; is of type &lt;code&gt;LOGICAL&lt;/code&gt;. &lt;var&gt;VECTOR_B&lt;/var&gt; shall be a rank-one array.</source>
          <target state="translated">場合タイプは数値でなければなら &lt;var&gt;VECTOR_A&lt;/var&gt; が数値型かである &lt;code&gt;LOGICAL&lt;/code&gt; 場合 &lt;var&gt;VECTOR_A&lt;/var&gt; は型である &lt;code&gt;LOGICAL&lt;/code&gt; 。 &lt;var&gt;VECTOR_B&lt;/var&gt; は、ランク1の配列です。</target>
        </trans-unit>
        <trans-unit id="4a6bd7e1bb25961611a360c9aea3894916ae7a04" translate="yes" xml:space="preserve">
          <source>The type shall be numeric or &lt;code&gt;LOGICAL&lt;/code&gt;, rank 1.</source>
          <target state="translated">タイプは数値または &lt;code&gt;LOGICAL&lt;/code&gt; で、ランクは1です。</target>
        </trans-unit>
        <trans-unit id="f72f1156bbda3a66bb289860d34381f4dab86e4f" translate="yes" xml:space="preserve">
          <source>The type shall be of default &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">タイプはデフォルトの &lt;code&gt;INTEGER&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="4d5327a23ce03329961ba946fd7f5361a11ebb85" translate="yes" xml:space="preserve">
          <source>The type shall be of type &lt;code&gt;CHARACTER&lt;/code&gt; and of default kind. It is an &lt;code&gt;INTENT(OUT)&lt;/code&gt; argument. If the length of this variable is too short for the time and date string to fit completely, it will be blank on procedure return.</source>
          <target state="translated">タイプは、タイプ &lt;code&gt;CHARACTER&lt;/code&gt; およびデフォルトの種類である必要があります。これは &lt;code&gt;INTENT(OUT)&lt;/code&gt; 引数です。この変数の長さが短すぎて時刻と日付の文字列が完全に収まらない場合、プロシージャの戻り時に空白になります。</target>
        </trans-unit>
        <trans-unit id="d3bc2bd1c32b2500e670a40e260b765d1daa5ffd" translate="yes" xml:space="preserve">
          <source>The type shall be of type &lt;code&gt;CHARACTER&lt;/code&gt; of the default kind. It is an &lt;code&gt;INTENT(OUT)&lt;/code&gt; argument. If the length of this variable is too short for the date and time string to fit completely, it will be blank on procedure return.</source>
          <target state="translated">タイプは、デフォルトの種類のタイプ &lt;code&gt;CHARACTER&lt;/code&gt; でなければなりません。これは &lt;code&gt;INTENT(OUT)&lt;/code&gt; 引数です。この変数の長さが短すぎて日付と時刻の文字列が完全に収まらない場合、プロシージャの戻り時に空白になります。</target>
        </trans-unit>
        <trans-unit id="5f826de915dcf6de08abe91e02c9b917f35ea9d8" translate="yes" xml:space="preserve">
          <source>The type shall be of type &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">型は &lt;code&gt;INTEGER&lt;/code&gt; 型でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0455977db0b358c9c374904b286d9d5e35bd7233" translate="yes" xml:space="preserve">
          <source>The type shall be the same as the type of &lt;var&gt;I&lt;/var&gt; or a boz-literal-constant. &lt;var&gt;I&lt;/var&gt; and &lt;var&gt;J&lt;/var&gt; shall not both be boz-literal-constants. If either &lt;var&gt;I&lt;/var&gt; and &lt;var&gt;J&lt;/var&gt; is a boz-literal-constant, then the other argument must be a scalar &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">タイプは、 &lt;var&gt;I&lt;/var&gt; またはboz-literal-constantのタイプと同じでなければなりません。 &lt;var&gt;I&lt;/var&gt; と &lt;var&gt;J&lt;/var&gt; の両方がboz-literal-constantsであってはなりません。 &lt;var&gt;I&lt;/var&gt; と &lt;var&gt;J&lt;/var&gt; のいずれかがboz-literal-constantである場合、他の引数はスカラー &lt;code&gt;INTEGER&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="52f6b28315bae2355372b670b1e0b04942b6ec56" translate="yes" xml:space="preserve">
          <source>The type shall be the same as the type of &lt;var&gt;I&lt;/var&gt; or a boz-literal-constant. &lt;var&gt;I&lt;/var&gt; and &lt;var&gt;J&lt;/var&gt; shall not both be boz-literal-constants. If either &lt;var&gt;I&lt;/var&gt; or &lt;var&gt;J&lt;/var&gt; is a boz-literal-constant, then the other argument must be a scalar &lt;code&gt;INTEGER&lt;/code&gt;.</source>
          <target state="translated">タイプは、 &lt;var&gt;I&lt;/var&gt; またはboz-literal-constantのタイプと同じでなければなりません。 &lt;var&gt;I&lt;/var&gt; と &lt;var&gt;J&lt;/var&gt; の両方がboz-literal-constantsであってはなりません。 &lt;var&gt;I&lt;/var&gt; または &lt;var&gt;J&lt;/var&gt; のいずれかがboz-literal-constantの場合、他の引数はスカラー &lt;code&gt;INTEGER&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0fab4c8cedc4a7416040514c677a6e882f57b066" translate="yes" xml:space="preserve">
          <source>The type shall be the same as the type of &lt;var&gt;I&lt;/var&gt;.</source>
          <target state="translated">タイプは &lt;var&gt;I&lt;/var&gt; のタイプと同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="26736d9505849944df4354034817057ec4ee69a6" translate="yes" xml:space="preserve">
          <source>The type shall be the same as the type of &lt;var&gt;J&lt;/var&gt;.</source>
          <target state="translated">タイプは &lt;var&gt;J&lt;/var&gt; のタイプと同じでなければなりません。</target>
        </trans-unit>
        <trans-unit id="a40fb18a4c682357ac4bf46cfe1b7ca7c8f3ffbb" translate="yes" xml:space="preserve">
          <source>The type shall be the same type and kind as &lt;var&gt;X&lt;/var&gt;.</source>
          <target state="translated">タイプは &lt;var&gt;X&lt;/var&gt; と同じタイプおよび種類である必要があります。</target>
        </trans-unit>
        <trans-unit id="b55cb762dcab77e36401e60098066687e4343226" translate="yes" xml:space="preserve">
          <source>The type shall be the same type and kind as &lt;var&gt;X&lt;/var&gt;. (As a GNU extension, arguments of different kinds are permitted.)</source>
          <target state="translated">タイプは &lt;var&gt;X&lt;/var&gt; と同じタイプおよび種類でなければなりません。（GNU拡張として、さまざまな種類の引数が許可されます。）</target>
        </trans-unit>
        <trans-unit id="d8835b12c862d6d220d2c23db41fba6f0af76889" translate="yes" xml:space="preserve">
          <source>The type shall either be &lt;code&gt;REAL&lt;/code&gt; with a magnitude that is less than or equal to one - or the type shall be &lt;code&gt;COMPLEX&lt;/code&gt;.</source>
          <target state="translated">タイプは、1以下の大きさの &lt;code&gt;REAL&lt;/code&gt; であるか、または &lt;code&gt;COMPLEX&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="2a61b360fc68557bef0129d9bac7f2f1c8be4d5c" translate="yes" xml:space="preserve">
          <source>The typical use is to check the local event variable to only call &lt;code&gt;event_wait&lt;/code&gt; when the data is available. However, a coindexed variable is permitted; there is no ordering or synchronization implied. It acts like an atomic fetch of the value of the event variable.</source>
          <target state="translated">典型的な使用法は、ローカルイベント変数をチェックして、データが利用可能な場合にのみ &lt;code&gt;event_wait&lt;/code&gt; を呼び出すことです。ただし、共指標変数は許可されます。暗黙の順序付けや同期はありません。イベント変数の値のアトミックなフェッチのように機能します。</target>
        </trans-unit>
        <trans-unit id="b26c90a9256d5a439ecc493931c274578b970f64" translate="yes" xml:space="preserve">
          <source>The use of strings is now further illustrated using the C library function &lt;code&gt;strncpy&lt;/code&gt;, whose prototype is</source>
          <target state="translated">文字列の使用は、Cライブラリ関数 &lt;code&gt;strncpy&lt;/code&gt; を使用してさらに説明されています。そのプロトタイプは</target>
        </trans-unit>
        <trans-unit id="fb593af2f8485dd7a7d7b8f147a99dc20d1b9c75" translate="yes" xml:space="preserve">
          <source>The use of the</source>
          <target state="translated">を使用しています。</target>
        </trans-unit>
        <trans-unit id="d5f9011906ddcee052fe235787a5b3d54198f0cb" translate="yes" xml:space="preserve">
          <source>The value assigned to the variable passed to the &lt;code&gt;IOSTAT=&lt;/code&gt; specifier of an input/output statement if an end-of-file condition occurred.</source>
          <target state="translated">ファイルの終わり条件が発生した場合に、入出力ステートメントの &lt;code&gt;IOSTAT=&lt;/code&gt; 指定子に渡される変数に割り当てられた値。</target>
        </trans-unit>
        <trans-unit id="4719f11c07d3f3c8ce4ac8fd00cd9775f6091e99" translate="yes" xml:space="preserve">
          <source>The value assigned to the variable passed to the &lt;code&gt;IOSTAT=&lt;/code&gt; specifier of an input/output statement if an end-of-record condition occurred.</source>
          <target state="translated">レコード終了条件が発生した場合に、入出力ステートメントの &lt;code&gt;IOSTAT=&lt;/code&gt; 指定子に渡される変数に割り当てられた値。</target>
        </trans-unit>
        <trans-unit id="3e536cd1dcbd59b580aa893db3378560129f426d" translate="yes" xml:space="preserve">
          <source>The value of the conversion can be queried by using &lt;code&gt;INQUIRE(CONVERT=ch)&lt;/code&gt;. The values returned are &lt;code&gt;'BIG_ENDIAN'&lt;/code&gt; and &lt;code&gt;'LITTLE_ENDIAN'&lt;/code&gt;.</source>
          <target state="translated">変換の値は、 &lt;code&gt;INQUIRE(CONVERT=ch)&lt;/code&gt; を使用して照会できます。返される値は &lt;code&gt;'BIG_ENDIAN'&lt;/code&gt; および &lt;code&gt;'LITTLE_ENDIAN'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3096c64b44533dfc371fdf31cd22b8c410e097ac" translate="yes" xml:space="preserve">
          <source>The values &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; and &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY&lt;/code&gt; are for allocatable components in derived type coarrays only. The first one sets up the token without allocating memory for allocatable component. The latter one only allocates the memory for an allocatable component in a derived type coarray. The token needs to be setup previously by the REGISTER_ONLY. This allows to have allocatable components un-allocated on some images. The status whether an allocatable component is allocated on a remote image can be queried by &lt;code&gt;_caf_is_present&lt;/code&gt; which used internally by the &lt;code&gt;ALLOCATED&lt;/code&gt; intrinsic.</source>
          <target state="translated">値 &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; および &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY&lt;/code&gt; は、派生型Co-Arrayでのみ割り当て可能なコンポーネント用です。最初のものは、割り当て可能なコンポーネントにメモリを割り当てずにトークンを設定します。後者は、派生型Co-Arrayの割り当て可能なコンポーネントにのみメモリを割り当てます。トークンは、REGISTER_ONLYによって事前に設定する必要があります。これにより、一部のイメージに割り当て可能なコンポーネントを未割り当てにすることができます。割り当て可能なコンポーネントがリモートイメージに割り当てられているかどうかのステータスは、 &lt;code&gt;ALLOCATED&lt;/code&gt; 組み込み関数によって内部的に使用される &lt;code&gt;_caf_is_present&lt;/code&gt; によって照会できます。</target>
        </trans-unit>
        <trans-unit id="8e62877336f5ec6496c8f902184b7517e2b17ee0" translate="yes" xml:space="preserve">
          <source>The variable consists of an optional default mode, followed by a list of optional exceptions, which are separated by semicolons from the preceding default and each other. Each exception consists of a format and a comma-separated list of units. Valid values for the modes are the same as for the &lt;code&gt;CONVERT&lt;/code&gt; specifier:</source>
          <target state="translated">変数はオプションのデフォルトモードで構成され、その後にオプションの例外のリストが続きます。これらの例外は、先行するデフォルトからセミコロンで区切られています。各例外は、形式と単位のコンマ区切りリストで構成されます。モードの有効な値は、 &lt;code&gt;CONVERT&lt;/code&gt; 指定子の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="109448d45cda92cd38e03fa0cd8353b386cdad87" translate="yes" xml:space="preserve">
          <source>The year</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b63780e5af2f3c57683186b887d40e59e0c09a1" translate="yes" xml:space="preserve">
          <source>There are a number of restrictions on the attributes that can be applied to Cray pointers and pointees. Pointees may not have the &lt;code&gt;ALLOCATABLE&lt;/code&gt;, &lt;code&gt;INTENT&lt;/code&gt;, &lt;code&gt;OPTIONAL&lt;/code&gt;, &lt;code&gt;DUMMY&lt;/code&gt;, &lt;code&gt;TARGET&lt;/code&gt;, &lt;code&gt;INTRINSIC&lt;/code&gt;, or &lt;code&gt;POINTER&lt;/code&gt; attributes. Pointers may not have the &lt;code&gt;DIMENSION&lt;/code&gt;, &lt;code&gt;POINTER&lt;/code&gt;, &lt;code&gt;TARGET&lt;/code&gt;, &lt;code&gt;ALLOCATABLE&lt;/code&gt;, &lt;code&gt;EXTERNAL&lt;/code&gt;, or &lt;code&gt;INTRINSIC&lt;/code&gt; attributes, nor may they be function results. Pointees may not occur in more than one pointer statement. A pointee cannot be a pointer. Pointees cannot occur in equivalence, common, or data statements.</source>
          <target state="translated">Crayポインターと指示先に適用できる属性には、いくつかの制限があります。指示先には、 &lt;code&gt;ALLOCATABLE&lt;/code&gt; 、 &lt;code&gt;INTENT&lt;/code&gt; 、 &lt;code&gt;OPTIONAL&lt;/code&gt; 、 &lt;code&gt;DUMMY&lt;/code&gt; 、 &lt;code&gt;TARGET&lt;/code&gt; 、 &lt;code&gt;INTRINSIC&lt;/code&gt; 、または &lt;code&gt;POINTER&lt;/code&gt; 属性がない場合があります。ポインターには、 &lt;code&gt;DIMENSION&lt;/code&gt; 、 &lt;code&gt;POINTER&lt;/code&gt; 、 &lt;code&gt;TARGET&lt;/code&gt; 、 &lt;code&gt;ALLOCATABLE&lt;/code&gt; 、 &lt;code&gt;EXTERNAL&lt;/code&gt; 、または &lt;code&gt;INTRINSIC&lt;/code&gt; 属性を指定することはできません。また、関数の結果とすることもできません。指示先は、複数のポインターステートメントで発生することはできません。指示先をポインターにすることはできません。指示先は、同等、共通、またはデータのステートメントで発生することはできません。</target>
        </trans-unit>
        <trans-unit id="c4b5193ed4beb969198ed57f8498f98bf39a4c7d" translate="yes" xml:space="preserve">
          <source>Therefore, if your &lt;code&gt;PROGRAM&lt;/code&gt; is not compiled with GNU Fortran and the GNU Fortran compiled procedures require intrinsics relying on the library initialization, you need to initialize the library yourself. Using the default options, gfortran calls &lt;code&gt;_gfortran_set_args&lt;/code&gt; and &lt;code&gt;_gfortran_set_options&lt;/code&gt;. The initialization of the former is needed if the called procedures access the command line (and for backtracing); the latter sets some flags based on the standard chosen or to enable backtracing. In typical programs, it is not necessary to call any initialization function.</source>
          <target state="translated">したがって、 &lt;code&gt;PROGRAM&lt;/code&gt; がGNU Fortranでコンパイルされておらず、GNU Fortranのコンパイルされたプロシージャでライブラリの初期化に依存する組み込み関数が必要な場合、ライブラリを自分で初期化する必要があります。デフォルトのオプションを使用して、gfortranは &lt;code&gt;_gfortran_set_args&lt;/code&gt; および &lt;code&gt;_gfortran_set_options&lt;/code&gt; を呼び出します。呼び出されたプロシージャがコマンドラインにアクセスする場合（およびバックトレースの場合）、前者の初期化が必要です。後者は、選択した標準に基づいて、またはバックトレースを有効にするためにいくつかのフラグを設定します。一般的なプログラムでは、初期化関数を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="77e19f5b5e0547ddf8dbdd2c925284ab5527bc06" translate="yes" xml:space="preserve">
          <source>These affect interpretation of the &lt;code&gt;INCLUDE&lt;/code&gt; directive (as well as of the &lt;code&gt;#include&lt;/code&gt; directive of the &lt;code&gt;cpp&lt;/code&gt; preprocessor).</source>
          <target state="translated">これらは、 &lt;code&gt;INCLUDE&lt;/code&gt; ディレクティブ（および &lt;code&gt;cpp&lt;/code&gt; プリプロセッサーの &lt;code&gt;#include&lt;/code&gt; ディレクティブ）の解釈に影響します。</target>
        </trans-unit>
        <trans-unit id="ef3bfde35380344720b3705131f2b7157e7c6c81" translate="yes" xml:space="preserve">
          <source>These functions return a &lt;code&gt;INTEGER&lt;/code&gt; variable or array under the following rules:</source>
          <target state="translated">これらの関数は、次の規則の下で &lt;code&gt;INTEGER&lt;/code&gt; 変数または配列を返します。</target>
        </trans-unit>
        <trans-unit id="c64413df2ece9f7b1f68f08d4c3768a8444b0404" translate="yes" xml:space="preserve">
          <source>These functions return a &lt;code&gt;REAL&lt;/code&gt; variable or array under the following rules:</source>
          <target state="translated">これらの関数は、次の規則の下で &lt;code&gt;REAL&lt;/code&gt; 変数または配列を返します。</target>
        </trans-unit>
        <trans-unit id="9b9701e15c9d94aa04294acbc1a1a03ddc6872e2" translate="yes" xml:space="preserve">
          <source>These machine-independent options control the interface conventions used in code generation.</source>
          <target state="translated">これらのマシンに依存しないオプションは、コード生成に使用されるインターフェイスの規約を制御します。</target>
        </trans-unit>
        <trans-unit id="a0382784bb77d0eef10d617838d494ddb43f0ff9" translate="yes" xml:space="preserve">
          <source>These options affect how GNU Fortran searches for files specified by the &lt;code&gt;INCLUDE&lt;/code&gt; directive and where it searches for previously compiled modules.</source>
          <target state="translated">これらのオプションは、GNU Fortranが &lt;code&gt;INCLUDE&lt;/code&gt; ディレクティブで指定されたファイルを検索する方法と、以前にコンパイルされたモジュールを検索する場所に影響します。</target>
        </trans-unit>
        <trans-unit id="9212e0d4ae1040d9de601a8656e96605a53c3da8" translate="yes" xml:space="preserve">
          <source>These options affect the runtime behavior of programs compiled with GNU Fortran.</source>
          <target state="translated">これらのオプションは、GNU Fortranでコンパイルされたプログラムの実行時の動作に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="024672ba12f6533c6267ee5ffbe7b18b0036fae5" translate="yes" xml:space="preserve">
          <source>These options come into play when the compiler links object files into an executable output file. They are meaningless if the compiler is not doing a link step.</source>
          <target state="translated">これらのオプションは、コンパイラがオブジェクト・ファイルを実行可能な出力ファイルにリンクするときに使用されます。コンパイラがリンク・ステップを実行していない場合、これらのオプションは意味を持ちません。</target>
        </trans-unit>
        <trans-unit id="66481454213e08f056758bde6c4884e98bafbb08" translate="yes" xml:space="preserve">
          <source>These options control the amount and kinds of errors and warnings produced by GNU Fortran:</source>
          <target state="translated">これらのオプションは、GNU Fortranが生成するエラーや警告の量や種類を制御します。</target>
        </trans-unit>
        <trans-unit id="4a18eb980bce33438d417cf38b9a8bbb9aa71b69" translate="yes" xml:space="preserve">
          <source>These options do not initialize</source>
          <target state="translated">これらのオプションは初期化されません。</target>
        </trans-unit>
        <trans-unit id="9de3c712a06a63e8325149190f38205617b3b74b" translate="yes" xml:space="preserve">
          <source>This acts like an atomic add of one to the remote image&amp;rsquo;s event variable. The statement is an image-control statement but does not imply sync memory. Still, all preceeding push communications of this image to the specified remote image have to be completed before &lt;code&gt;event_wait&lt;/code&gt; on the remote image returns.</source>
          <target state="translated">これは、リモートイメージのイベント変数に1をアトミックに追加するように機能します。このステートメントはイメージ制御ステートメントですが、同期メモリを意味するものではありません。それでも、このイメージの指定されたリモートイメージへの先行するすべてのプッシュ通信は、リモートイメージの &lt;code&gt;event_wait&lt;/code&gt; が戻る前に完了する必要があります。</target>
        </trans-unit>
        <trans-unit id="22feb0461e5b7f6c0ba7f52a4663dfe24d62502d" translate="yes" xml:space="preserve">
          <source>This chapter describes certain characteristics of the GNU Fortran compiler, that are not specified by the Fortran standard, but which might in some way or another become visible to the programmer.</source>
          <target state="translated">この章では、Fortran標準では規定されていませんが、何らかの形でプログラマに見えるようになるかもしれない、GNU Fortranコンパイラのある種の特徴について説明します。</target>
        </trans-unit>
        <trans-unit id="2a4a43a7feae452bf5173b8a111e0a8262d577cf" translate="yes" xml:space="preserve">
          <source>This chapter is about mixed-language interoperability, but also applies if one links Fortran code compiled by different compilers. In most cases, use of the C Binding features of the Fortran 2003 standard is sufficient, and their use is highly recommended.</source>
          <target state="translated">この章では混合言語の相互運用性について説明しますが、異なるコンパイラでコンパイルされたFortranコードをリンクする場合にも適用されます。ほとんどの場合、Fortran 2003 標準の C バインディング機能を使用すれば十分であり、その使用を強く推奨します。</target>
        </trans-unit>
        <trans-unit id="f1e702b7214a6f7ca59d3d47c387289ebf5b4067" translate="yes" xml:space="preserve">
          <source>This code can easily be rewritten in the Fortran 90 syntax as following:</source>
          <target state="translated">このコードは、以下のようにFortran 90の構文で簡単に書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="c8656ad7821fd04eca3a624a8da4662c1420c6fe" translate="yes" xml:space="preserve">
          <source>This currently produces a warning under the following circumstances:</source>
          <target state="translated">現在、以下のような状況で警告が表示されています。</target>
        </trans-unit>
        <trans-unit id="197a9a23ea62f4dbfbe96edba0cf2526747fb0b2" translate="yes" xml:space="preserve">
          <source>This directive is intended for annotation of existing code. For new code it is recommended to consider OpenMP SIMD directives as potential alternative.</source>
          <target state="translated">このディレクティブは既存のコードのアノテーションを目的としています。新しいコードについては、OpenMP SIMD ディレクティブを代替の可能性として考慮することが推奨されています。</target>
        </trans-unit>
        <trans-unit id="8ecad4e9d8fa92bb361e1868fdc79df79afe2276" translate="yes" xml:space="preserve">
          <source>This directive tells the compiler to ignore vector dependencies in the following loop. It must be placed immediately before a &lt;code&gt;DO&lt;/code&gt; loop and applies only to the loop that follows.</source>
          <target state="translated">このディレクティブは、コンパイラに次のループのベクトル依存関係を無視するように指示します。 &lt;code&gt;DO&lt;/code&gt; ループの直前に配置する必要があり、後続のループにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="d8fdec12332cdc958871af4cc82a52d567201791" translate="yes" xml:space="preserve">
          <source>This directive tells the compiler to not vectorize the following loop. It must be placed immediately before a &lt;code&gt;DO&lt;/code&gt; loop and applies only to the loop that follows.</source>
          <target state="translated">このディレクティブは、次のループをベクトル化しないようにコンパイラーに指示します。 &lt;code&gt;DO&lt;/code&gt; ループの直前に配置する必要があり、後続のループにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="795f35f6b1b2bf87ba510c9877fa8ff5ca2f961d" translate="yes" xml:space="preserve">
          <source>This directive tells the compiler to vectorize the following loop. It must be placed immediately before a &lt;code&gt;DO&lt;/code&gt; loop and applies only to the loop that follows.</source>
          <target state="translated">このディレクティブは、コンパイラに次のループをベクトル化するように指示します。 &lt;code&gt;DO&lt;/code&gt; ループの直前に配置する必要があり、後続のループにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="a600f5bae88b8af4f41aa1dcd6b00bb0403b9073" translate="yes" xml:space="preserve">
          <source>This does not affect the generation of code that interfaces with the &lt;code&gt;libgfortran&lt;/code&gt; library.</source>
          <target state="translated">これは、 &lt;code&gt;libgfortran&lt;/code&gt; ライブラリとインターフェースするコードの生成には影響しません。</target>
        </trans-unit>
        <trans-unit id="28f0968dc8b67521c596f25f3a75db83bc49a3f8" translate="yes" xml:space="preserve">
          <source>This environment variable can be used to select the unit number preconnected to standard error. This must be a positive integer. The default value is 0.</source>
          <target state="translated">この環境変数を使用して、標準誤差にあらかじめ接続されている単位番号を選択することができます。これは正の整数でなければなりません。デフォルト値は 0 です。</target>
        </trans-unit>
        <trans-unit id="cd6caa3d92713d5d3fd8a16b4a767da8d7286bed" translate="yes" xml:space="preserve">
          <source>This environment variable can be used to select the unit number preconnected to standard input. This must be a positive integer. The default value is 5.</source>
          <target state="translated">この環境変数を使用して、標準入力にあらかじめ接続されている単位番号を選択することができます。これは正の整数でなければなりません。デフォルト値は 5 です。</target>
        </trans-unit>
        <trans-unit id="55be1592809c0c8fd62642ebfe31c0c986768a4b" translate="yes" xml:space="preserve">
          <source>This environment variable can be used to select the unit number preconnected to standard output. This must be a positive integer. The default value is 6.</source>
          <target state="translated">この環境変数を使用して、標準出力に予め接続されている単位番号を選択することができます。これは正の整数でなければなりません。デフォルト値は6です。</target>
        </trans-unit>
        <trans-unit id="9edad1663ac8df062018ea2991b5d54b2936b869" translate="yes" xml:space="preserve">
          <source>This environment variable controls whether all I/O is unbuffered. If the first letter is &amp;lsquo;</source>
          <target state="translated">この環境変数は、すべてのI / Oがバッファリングされないかどうかを制御します。最初の文字が '</target>
        </trans-unit>
        <trans-unit id="ff0027efe7de9254829de09fdcc76e5978299729" translate="yes" xml:space="preserve">
          <source>This environment variable specifies the default record length, in bytes, for files which are opened without a &lt;code&gt;RECL&lt;/code&gt; tag in the &lt;code&gt;OPEN&lt;/code&gt; statement. This must be a positive integer. The default value is 1073741824 bytes (1 GB).</source>
          <target state="translated">この環境変数は、 &lt;code&gt;OPEN&lt;/code&gt; ステートメントで &lt;code&gt;RECL&lt;/code&gt; タグなしで開かれたファイルのデフォルトのレコード長をバイト単位で指定します。これは正の整数でなければなりません。デフォルト値は1073741824バイト（1 GB）です。</target>
        </trans-unit>
        <trans-unit id="8ea7fe46fc8c55d61a3db5fc15d498d1f4180d49" translate="yes" xml:space="preserve">
          <source>This environment variable specifies the separator when writing list-directed output. It may contain any number of spaces and at most one comma. If you specify this on the command line, be sure to quote spaces, as in</source>
          <target state="translated">この環境変数は、リスト指向の出力を書くときの区切り文字を指定します。この環境変数には、任意の数のスペースと最大でも1つのカンマを含めることができます。コマンドラインでこれを指定する場合は、次のようにスペースを引用符で囲んでください。</target>
        </trans-unit>
        <trans-unit id="5c021d72749991c23356ffabd6dfbc56508b828a" translate="yes" xml:space="preserve">
          <source>This function follows TS18508.</source>
          <target state="translated">この機能は、TS18508 に従います。</target>
        </trans-unit>
        <trans-unit id="5c92002fa62b66e4c064f8a830ba00c4e17f2880" translate="yes" xml:space="preserve">
          <source>This function follows TS18508. Because team-functionality is not yet implemented a null-pointer is passed for the &lt;var&gt;team&lt;/var&gt; argument at the moment.</source>
          <target state="translated">この機能はTS18508に準拠しています。チーム機能はまだ実装されていないため、現時点では &lt;var&gt;team&lt;/var&gt; 引数にnullポインターが渡されます。</target>
        </trans-unit>
        <trans-unit id="281161dd77013053891d99d6b24620dd744c6d98" translate="yes" xml:space="preserve">
          <source>This function follows TS18508. If the num_image intrinsic has no arguments, then the compiler passes &lt;code&gt;distance=0&lt;/code&gt; and &lt;code&gt;failed=-1&lt;/code&gt; to the function.</source>
          <target state="translated">この機能はTS18508に準拠しています。num_image組み込みが引数を持たない場合、コンパイラーは関数に &lt;code&gt;distance=0&lt;/code&gt; および &lt;code&gt;failed=-1&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="36843c9a9d81510495a2de5041a8f388c0b515d9" translate="yes" xml:space="preserve">
          <source>This function has been superseded by the &lt;code&gt;ISHFT&lt;/code&gt; intrinsic, which is standard in Fortran 95 and later, and the &lt;code&gt;SHIFTL&lt;/code&gt; intrinsic, which is standard in Fortran 2008 and later.</source>
          <target state="translated">この関数は、Fortran 95以降の標準である &lt;code&gt;ISHFT&lt;/code&gt; 組み込み関数と、Fortran 2008以降の標準である &lt;code&gt;SHIFTL&lt;/code&gt; 組み込み関数に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="8d5185981845465d6f936768cfaf1c8479d1f960" translate="yes" xml:space="preserve">
          <source>This function has been superseded by the &lt;code&gt;SHIFTA&lt;/code&gt; intrinsic, which is standard in Fortran 2008 and later.</source>
          <target state="translated">この関数は、Fortran 2008以降で標準となっている &lt;code&gt;SHIFTA&lt;/code&gt; 組み込み関数に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7883b9835b542c667123819e0017b2ed606c2e97" translate="yes" xml:space="preserve">
          <source>This function is also called for critical block; for those, the array index is always zero and the image index is one. Libraries are permitted to use other images for critical-block locking variables.</source>
          <target state="translated">この関数は、クリティカルブロックの場合にも呼び出されます;これらの場合、配列のインデックスは常に0であり、画像のインデックスは1です。ライブラリは、クリティカルブロックのロック変数に他のイメージを使用することを許可されています。</target>
        </trans-unit>
        <trans-unit id="af4e94494ad79c851ab73148a3f8bfbbeeeb9909" translate="yes" xml:space="preserve">
          <source>This function is also called for critical blocks; for those, the array index is always zero and the image index is one. Libraries are permitted to use other images for critical-block locking variables.</source>
          <target state="translated">この関数は、クリティカルブロックに対しても呼び出されます。ライブラリは、クリティカルブロックのロック変数に他の画像を使用することを許可されています。</target>
        </trans-unit>
        <trans-unit id="39f3abb212933541d2d1b3129f0bc0b04deb34de" translate="yes" xml:space="preserve">
          <source>This function is called at startup of the program before the Fortran main program, if the latter has been compiled with</source>
          <target state="translated">この関数は,Fortranのメインプログラムの前のプログラムの起動時に呼び出されます.</target>
        </trans-unit>
        <trans-unit id="966affa2d8ec1c35095281de0ab1620333c77c35" translate="yes" xml:space="preserve">
          <source>This function is called at the end of the Fortran main program, if it has been compiled with the</source>
          <target state="translated">でコンパイルされている場合、この関数はFortranのメインプログラムの最後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7c33170ca1e280e7028e9de505f203126b99ce8a" translate="yes" xml:space="preserve">
          <source>This function is for compatibility only and should be avoided in favor of standard constructs wherever possible.</source>
          <target state="translated">この関数は互換性のためだけのものであり、可能な限り標準的な構造体を使用することは避けるべきです。</target>
        </trans-unit>
        <trans-unit id="f40c18ee3caf97ebb024c915f4966940a7077192" translate="yes" xml:space="preserve">
          <source>This function only operates on a local coarray. It acts like a loop checking atomically the value of the event variable, breaking if the value is greater or equal the requested number of counts. Before the function returns, the event variable has to be decremented by the requested &lt;var&gt;until_count&lt;/var&gt; value. A possible implementation would be a busy loop for a certain number of spins (possibly depending on the number of threads relative to the number of available cores) followed by another waiting strategy such as a sleeping wait (possibly with an increasing number of sleep time) or, if possible, a futex wait.</source>
          <target state="translated">この関数はローカルcoarrayでのみ機能します。これは、イベント変数の値をアトミックにチェックするループのように機能し、値が要求されたカウント数以上である場合にブレークします。関数が戻る前に、イベント変数は、要求された &lt;var&gt;until_count&lt;/var&gt; 値だけ減らされなければなりません。可能な実装は、特定の数のスピンのビジーループ（おそらく、使用可能なコアの数に対するスレッドの数によって異なります）の後に、スリープ待機などの別の待機戦略が続きます（スリープ時間が増加する可能性があります）。または、可能であればfutexの待機。</target>
        </trans-unit>
        <trans-unit id="8e82c777fee24347fe2a752fe09317af253677a8" translate="yes" xml:space="preserve">
          <source>This function returns information about a file. No permissions are required on the file itself, but execute (search) permission is required on all of the directories in path that lead to the file.</source>
          <target state="translated">この関数は、ファイルに関する情報を返します。ファイル自体にはパーミッションは必要ありませんが、ファイルにつながるパス内の全てのディレクトリには実行(検索)パーミッションが必要です。</target>
        </trans-unit>
        <trans-unit id="2913c4adfe5d7ae124ee72c05cb92ad9d07380eb" translate="yes" xml:space="preserve">
          <source>This function returns the current image number, which is a positive number.</source>
          <target state="translated">この関数は、現在の画像番号を正の数で返します。</target>
        </trans-unit>
        <trans-unit id="b0050502c27f414b284c68b355fb97fbc36d5be3" translate="yes" xml:space="preserve">
          <source>This function returns the number of images in the current team, if &lt;var&gt;distance&lt;/var&gt; is 0 or the number of images in the parent team at the specified distance. If failed is -1, the function returns the number of all images at the specified distance; if it is 0, the function returns the number of nonfailed images, and if it is 1, it returns the number of failed images.</source>
          <target state="translated">この関数は、 &lt;var&gt;distance&lt;/var&gt; が0である場合、または指定された距離にある親チームの画像の数である場合、現在のチームの画像の数を返します。failedが-1の場合、この関数は指定された距離にあるすべての画像の数を返します。0の場合、関数は失敗していないイメージの数を返し、1の場合、失敗したイメージの数を返します。</target>
        </trans-unit>
        <trans-unit id="0f859e604f7d0cc6144d2103a4a535c2a8a84248" translate="yes" xml:space="preserve">
          <source>This intrinsic is not fully portable, such as to systems with 32-bit &lt;code&gt;INTEGER&lt;/code&gt; types but supporting times wider than 32 bits. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program.</source>
          <target state="translated">この組み込み関数は、32ビット &lt;code&gt;INTEGER&lt;/code&gt; 型のシステムなど、32ビットより広い時間をサポートするなど、完全に移植可能ではありません。したがって、この組み込み関数によって返される値は、コンパイル済みプログラムの1回の実行中に、前の値よりも負になるか、数値的に小さくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f1ee5be7e9d104fb85189d68c349b1f07bdcc025" translate="yes" xml:space="preserve">
          <source>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit.</source>
          <target state="translated">この内在性は、サブルーチンと関数の両方の形式で提供されますが、任意のプログラム単位で使用できるのは1つの形式のみです。</target>
        </trans-unit>
        <trans-unit id="f3b7f87b22e060341f281484f211efd48d33be44" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is not fully backwards compatible with &lt;code&gt;g77&lt;/code&gt;. In &lt;code&gt;g77&lt;/code&gt;, the &lt;code&gt;FSEEK&lt;/code&gt; takes a statement label instead of a &lt;var&gt;STATUS&lt;/var&gt; variable. If FSEEK is used in old code, change</source>
          <target state="translated">この組み込みルーチンは、 &lt;code&gt;g77&lt;/code&gt; と完全に下位互換性がありません。では &lt;code&gt;g77&lt;/code&gt; 、 &lt;code&gt;FSEEK&lt;/code&gt; は、文ラベルの代わりに、かかる &lt;var&gt;STATUS&lt;/var&gt; の変数を。FSEEKが古いコードで使用されている場合は、変更します</target>
        </trans-unit>
        <trans-unit id="3c54a719431e9fc3537265ce2e390f6baa049068" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the &lt;a href=&quot;iand#IAND&quot;&gt;IAND&lt;/a&gt; intrinsic defined by the Fortran standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。整数引数の場合、プログラマーは、Fortran規格で定義されている&lt;a href=&quot;iand#IAND&quot;&gt;IAND&lt;/a&gt;組み込みの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="44801e63896540caa2832d84542a86121fdefa3e" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the &lt;a href=&quot;ieor#IEOR&quot;&gt;IEOR&lt;/a&gt; intrinsic and for logical arguments the &lt;code&gt;.NEQV.&lt;/code&gt; operator, which are both defined by the Fortran standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。整数引数の場合、プログラマーは&lt;a href=&quot;ieor#IEOR&quot;&gt;IEOR&lt;/a&gt;組み込みの使用と、論理引数の場合は &lt;code&gt;.NEQV.&lt;/code&gt; の使用を検討する必要があります。演算子。どちらもFortran規格で定義されています。</target>
        </trans-unit>
        <trans-unit id="384676885402adf7056d33be128dffc3896cabcc" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the &lt;a href=&quot;ior#IOR&quot;&gt;IOR&lt;/a&gt; intrinsic defined by the Fortran standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。整数引数の場合、プログラマーは、Fortran規格で定義された&lt;a href=&quot;ior#IOR&quot;&gt;IOR&lt;/a&gt;組み込みの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e0c30a4df04adf858f82efcd71fa903821aa148" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the &lt;a href=&quot;command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT&quot;&gt;COMMAND_ARGUMENT_COUNT&lt;/a&gt; intrinsic defined by the Fortran 2003 standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。新しいコードでは、プログラマーは、Fortran 2003標準で定義された&lt;a href=&quot;command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT&quot;&gt;COMMAND_ARGUMENT_COUNT&lt;/a&gt;組み込みの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="032801d3fd91afdf588dd9891d97526b21fba234" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the &lt;a href=&quot;date_005fand_005ftime#DATE_005fAND_005fTIME&quot;&gt;DATE_AND_TIME&lt;/a&gt; intrinsic defined by the Fortran 95 standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。新しいコードでは、プログラマはFortran 95標準で定義されている&lt;a href=&quot;date_005fand_005ftime#DATE_005fAND_005fTIME&quot;&gt;DATE_AND_TIME&lt;/a&gt;組み込みの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="1792c97c2e33afc51300c7a79b0243e98eb49abf" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the &lt;a href=&quot;get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT&quot;&gt;GET_COMMAND_ARGUMENT&lt;/a&gt; intrinsic defined by the Fortran 2003 standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。新しいコードでは、プログラマは、Fortran 2003標準で定義されている&lt;a href=&quot;get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT&quot;&gt;GET_COMMAND_ARGUMENT&lt;/a&gt;組み込みの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ae6719e90c20d36962ce023f82322bd6e242d70" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the &lt;a href=&quot;get_005fenvironment_005fvariable#GET_005fENVIRONMENT_005fVARIABLE&quot;&gt;GET_ENVIRONMENT_VARIABLE&lt;/a&gt; intrinsic defined by the Fortran 2003 standard.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。新しいコードでは、プログラマは、Fortran 2003標準で定義されている&lt;a href=&quot;get_005fenvironment_005fvariable#GET_005fENVIRONMENT_005fVARIABLE&quot;&gt;GET_ENVIRONMENT_VARIABLE&lt;/a&gt;組み込みの使用を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="158f40f2fb86f2bf4a0090b473106d93ef551f36" translate="yes" xml:space="preserve">
          <source>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. It implements a simple modulo generator as provided by &lt;code&gt;g77&lt;/code&gt;. For new code, one should consider the use of &lt;a href=&quot;random_005fnumber#RANDOM_005fNUMBER&quot;&gt;RANDOM_NUMBER&lt;/a&gt; as it implements a superior algorithm.</source>
          <target state="translated">この組み込みルーチンは、GNU Fortran 77との下位互換性のために提供されています。これは、 &lt;code&gt;g77&lt;/code&gt; が提供する単純なモジュロジェネレーターを実装します。新しいコードでは、&lt;a href=&quot;random_005fnumber#RANDOM_005fNUMBER&quot;&gt;RANDOM_NUMBER&lt;/a&gt;の使用を検討する必要があります。これは、優れたアルゴリズムを実装しているためです。</target>
        </trans-unit>
        <trans-unit id="84f88a6daf986c4c9df5236405833583354c355a" translate="yes" xml:space="preserve">
          <source>This is approximately equivalent to the C concept of &lt;em&gt;casting&lt;/em&gt; one type to another.</source>
          <target state="translated">これは、あるタイプを別のタイプに&lt;em&gt;キャスト&lt;/em&gt;するというCの概念とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="6673b3fe5ac6180ff2788c69a30622746a7d9f64" translate="yes" xml:space="preserve">
          <source>This is primarily meant for legacy code to ensure that existing C bindings match what &lt;code&gt;gfortran&lt;/code&gt; emits. The generated C prototypes should be correct for the current version of the compiler, but may not match what other compilers or earlier versions of &lt;code&gt;gfortran&lt;/code&gt; need. For new developments, use of the &lt;code&gt;BIND(C)&lt;/code&gt; features is recommended.</source>
          <target state="translated">これは主に、既存のCバインディングが &lt;code&gt;gfortran&lt;/code&gt; が出力するものと一致することを保証するためのレガシーコードを対象としています。生成されたCプロトタイプは、コンパイラの現在のバージョンに対して正しいはずですが、他のコンパイラまたは以前のバージョンの &lt;code&gt;gfortran&lt;/code&gt; が必要とするものと一致しない場合があります。新規開発の場合は、 &lt;code&gt;BIND(C)&lt;/code&gt; 機能の使用をお勧めします。</target>
        </trans-unit>
        <trans-unit id="4f78ddbd198ef016de9d8500e32ce704f98a0b6b" translate="yes" xml:space="preserve">
          <source>This manual documents the use of &lt;code&gt;gfortran&lt;/code&gt;, the GNU Fortran compiler. You can find in this manual how to invoke &lt;code&gt;gfortran&lt;/code&gt;, as well as its features and incompatibilities.</source>
          <target state="translated">このマニュアルでは、GNU Fortranコンパイラである &lt;code&gt;gfortran&lt;/code&gt; の使用について説明します。このマニュアルには、 &lt;code&gt;gfortran&lt;/code&gt; の呼び出し方法、およびその機能と非互換性が記載されています。</target>
        </trans-unit>
        <trans-unit id="fd00d3b339354c60934121feacbd122117058b19" translate="yes" xml:space="preserve">
          <source>This manual specifically documents the Fortran front end, which handles the programming language&amp;rsquo;s syntax and semantics. The aspects of GCC which relate to the optimization passes and the back-end code generation are documented in the GCC manual; see &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/index.html#Top&quot;&gt;Introduction&lt;/a&gt; in Using the GNU Compiler Collection (GCC). The two manuals together provide a complete reference for the GNU Fortran compiler.</source>
          <target state="translated">このマニュアルでは、プログラミング言語の構文とセマンティクスを処理するFortranフロントエンドについて具体的に説明しています。最適化パスとバックエンドコード生成に関連するGCCの側面は、GCCマニュアルに記載されています。GNU Compiler Collection（GCC）の&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gcc/index.html#Top&quot;&gt;概要&lt;/a&gt;を参照してください。2つのマニュアルは共に、GNU Fortranコンパイラの完全なリファレンスを提供します。</target>
        </trans-unit>
        <trans-unit id="da761f38b79fd038dcaec436084fc120f672c166" translate="yes" xml:space="preserve">
          <source>This option can be used to increase the upper limit permitted in array constructors. The code below requires this option to expand the array at compile time.</source>
          <target state="translated">このオプションを使用すると、配列のコンストラクタで許可される上限を増やすことができます。以下のコードでは、コンパイル時に配列を展開するにはこのオプションが必要です。</target>
        </trans-unit>
        <trans-unit id="fee5c9abfd0e1aa5822834c6eeb723d8669d34d4" translate="yes" xml:space="preserve">
          <source>This option causes all intrinsic procedures (including the GNU-specific extensions) to be accepted. This can be useful with</source>
          <target state="translated">このオプションを指定すると、(GNU固有の拡張を含む)すべての内部手続きが受け入れられるようになります。これは</target>
        </trans-unit>
        <trans-unit id="6d0348a7094c3bb65db79638454b061059b7c330" translate="yes" xml:space="preserve">
          <source>This option currently only affects local arrays declared with constant bounds, and may not apply to all character variables. Future versions of GNU Fortran may improve this behavior.</source>
          <target state="translated">このオプションは現在のところ、定数境界で宣言されたローカル配列にのみ影響を与え、すべての文字変数には適用されません。GNU Fortranの将来のバージョンでは、この動作が改善されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e34b9ddb5ac2a20b41fb080bdfe00e59908b6305" translate="yes" xml:space="preserve">
          <source>This option has no effect if</source>
          <target state="translated">このオプションは</target>
        </trans-unit>
        <trans-unit id="223090f1188ac1bc38c64fe292f4f4b2503fac75" translate="yes" xml:space="preserve">
          <source>This option is implied by</source>
          <target state="translated">このオプションは</target>
        </trans-unit>
        <trans-unit id="705dd214fcbbda555d2c25430996631d43106884" translate="yes" xml:space="preserve">
          <source>This option is like the</source>
          <target state="translated">このオプションは</target>
        </trans-unit>
        <trans-unit id="6dcc834a238a6d226feb006834bccbf03e189785" translate="yes" xml:space="preserve">
          <source>This option is provided for interoperability with C code that was compiled with the</source>
          <target state="translated">このオプションは、C 言語でコンパイルされたコードとの相互運用性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="917b232fb77d73cb0ec8cab985a319ee6cf9d3dd" translate="yes" xml:space="preserve">
          <source>This option performs front-end optimization, based on manipulating parts the Fortran parse tree. Enabled by default by any</source>
          <target state="translated">このオプションは、Fortranのパースツリーの一部を操作することに基づいて、フロントエンドの最適化を行います。デフォルトでは</target>
        </trans-unit>
        <trans-unit id="ca34be3ac1c0cfbcac13e98adbbf3aaf42480458" translate="yes" xml:space="preserve">
          <source>This option specifies the location of pre-compiled intrinsic modules, if they are not in the default location expected by the compiler.</source>
          <target state="translated">このオプションは、コンパイル済みの内部モジュールの場所を指定します。</target>
        </trans-unit>
        <trans-unit id="489d2d3dc4ad612404439f06784d2cccd2575735" translate="yes" xml:space="preserve">
          <source>This option specifies the size in bytes of the largest array that will be put on the stack; if the size is exceeded static memory is used (except in procedures marked as RECURSIVE). Use the option</source>
          <target state="translated">このオプションは、スタックに置かれる最大の配列のサイズをバイト単位で指定します。 サイズを超えた場合はスタティックメモリが使用されます (RECURSIVE とマークされたプロシージャを除く)。このオプションを使用すると、スタックに置かれる最大の配列のサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="11be81f519864dfc1a1dc18a3dd7b92d323a6f47" translate="yes" xml:space="preserve">
          <source>This option specifies where to put</source>
          <target state="translated">このオプションは</target>
        </trans-unit>
        <trans-unit id="a2292812ac2de4bbcf125e97db150b88d1ff19e4" translate="yes" xml:space="preserve">
          <source>This option tells GNU Fortran to pack derived type members as closely as possible. Code compiled with this option is likely to be incompatible with code compiled without this option, and may execute slower.</source>
          <target state="translated">このオプションは、GNU Fortranに派生型のメンバを可能な限り密接にパックするように指示します。このオプションでコンパイルされたコードは、このオプションなしでコンパイルされたコードと互換性がない可能性が高く、実行が遅くなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7164ae1aacba18245cfcc434f9b65dac4ecc25c4" translate="yes" xml:space="preserve">
          <source>This option will generate C prototypes from &lt;code&gt;BIND(C)&lt;/code&gt; variable declarations, types and procedure interfaces and writes them to standard output. &lt;code&gt;ENUM&lt;/code&gt; is not yet supported.</source>
          <target state="translated">このオプションは、 &lt;code&gt;BIND(C)&lt;/code&gt; 変数宣言、型、およびプロシージャインターフェイスからCプロトタイプを生成し、それらを標準出力に書き込みます。 &lt;code&gt;ENUM&lt;/code&gt; はまだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="dadda4652a5366d77172435b6ab8c58d2728b1ac" translate="yes" xml:space="preserve">
          <source>This option will generate C prototypes from external functions and subroutines and write them to standard output. This may be useful for making sure that C bindings to Fortran code are correct. This option does not generate prototypes for &lt;code&gt;BIND(C)&lt;/code&gt; procedures, use</source>
          <target state="translated">このオプションは、外部関数とサブルーチンからCプロトタイプを生成し、それらを標準出力に書き込みます。これは、FortranコードへのCバインディングが正しいことを確認するのに役立つ場合があります。このオプションは、 &lt;code&gt;BIND(C)&lt;/code&gt; プロシージャのプロトタイプを生成しません。</target>
        </trans-unit>
        <trans-unit id="12532c5ae0779044956d4d2a254f6c248c99f323" translate="yes" xml:space="preserve">
          <source>This option will make &lt;code&gt;gfortran&lt;/code&gt; generate calls to BLAS functions for some matrix operations like &lt;code&gt;MATMUL&lt;/code&gt;, instead of using our own algorithms, if the size of the matrices involved is larger than a given limit (see</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;gfortran&lt;/code&gt; する行列のサイズが指定された制限よりも大きい場合、独自のアルゴリズムを使用する代わりに、 &lt;code&gt;MATMUL&lt;/code&gt; などの一部の行列演算のBLAS関数の呼び出しを生成します（参照</target>
        </trans-unit>
        <trans-unit id="899ab6a4f582ee97e38d7181c40ae4cb35d7e064" translate="yes" xml:space="preserve">
          <source>This path is also used to search for</source>
          <target state="translated">このパスは</target>
        </trans-unit>
        <trans-unit id="d56cad3d74290385e337db23139ff0aedc0acdde" translate="yes" xml:space="preserve">
          <source>This section contains a brief overview of data and metadata consistency and durability issues when doing I/O.</source>
          <target state="translated">このセクションでは、I/Oを行う際のデータとメタデータの整合性と耐久性の問題について簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="6957d6ca0910154380babb76e8d3e085f1e68957" translate="yes" xml:space="preserve">
          <source>This section documents the behavior of GNU Fortran for file operations on symbolic links, on systems that support them.</source>
          <target state="translated">このセクションでは、シンボリックリンクをサポートするシステム上でのファイル操作のためのGNU Fortranの動作を文書化しています。</target>
        </trans-unit>
        <trans-unit id="38dea81c180f672b0c441b27663adef76042f832" translate="yes" xml:space="preserve">
          <source>This section gives an overview about the naming convention of procedures and global variables and about the argument passing conventions used by GNU Fortran. If a C binding has been specified, the naming convention and some of the argument-passing conventions change. If possible, mixed-language and mixed-compiler projects should use the better defined C binding for interoperability. See see &lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Interoperability with C&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、プロシージャとグローバル変数の命名規則と、GNU Fortranで使用される引数渡し規則について概要を説明します。Cバインディングが指定されている場合、命名規則と一部の引数渡し規則が変更されます。可能であれば、混合言語および混合コンパイラーのプロジェクトは、相互運用性のために、より適切に定義されたCバインディングを使用する必要があります。&lt;a href=&quot;interoperability-with-c#Interoperability-with-C&quot;&gt;Cとの相互運用性を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d40aa1a9ac50cb6cb64b6b5960e75cdc841b86bf" translate="yes" xml:space="preserve">
          <source>This should be used in conjunction with</source>
          <target state="translated">と組み合わせて使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d261c166654b6be1ca7aff01a1aa0b9021ccf34f" translate="yes" xml:space="preserve">
          <source>This should result in faster accesses to the array. However it can introduce significant overhead to the function call, especially when the passed data is noncontiguous.</source>
          <target state="translated">これにより,配列へのアクセスが高速になるはずです.しかし、特に渡されたデータが連続していない場合には、関数の呼び出しに大きなオーバーヘッドが発生します。</target>
        </trans-unit>
        <trans-unit id="ba1f840584de56db6b801fec0e6ee266bab8c03f" translate="yes" xml:space="preserve">
          <source>This will cause the external routine &lt;var&gt;handler_print&lt;/var&gt; to be called after 3 seconds.</source>
          <target state="translated">これにより、3秒後に外部ルーチン &lt;var&gt;handler_print&lt;/var&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d36424075df8e6139c5277cabf5beae54f23f070" translate="yes" xml:space="preserve">
          <source>Time difference with UTC in minutes</source>
          <target state="translated">UTCとの時差(分単位</target>
        </trans-unit>
        <trans-unit id="c9e15e81d54c8d889d77808a2a80a45f461c3998" translate="yes" xml:space="preserve">
          <source>Time function</source>
          <target state="translated">時間関数</target>
        </trans-unit>
        <trans-unit id="789434162ce4077a1ca99d458662cad7a7c91e5f" translate="yes" xml:space="preserve">
          <source>Time function (64-bit)</source>
          <target state="translated">時間関数(64ビット</target>
        </trans-unit>
        <trans-unit id="b3f3742e1f14daffeeba7a726599fb169259df16" translate="yes" xml:space="preserve">
          <source>To aid this dialog, when input is from stdin, errors send their messages to stderr and execution continues, even if &lt;code&gt;IOSTAT&lt;/code&gt; is set.</source>
          <target state="translated">このダイアログを支援するために、入力がstdinからのものである場合、 &lt;code&gt;IOSTAT&lt;/code&gt; が設定されている場合でも、エラーによってメッセージがstderrに送信され、実行が続行されます。</target>
        </trans-unit>
        <trans-unit id="747d887a590c006b3f8b814203bc58099792b3a7" translate="yes" xml:space="preserve">
          <source>To disable preprocessing of files with any of the above listed extensions, use the negative form:</source>
          <target state="translated">上記のいずれかの拡張子を持つファイルの前処理を無効にするには、否定形を使用します。</target>
        </trans-unit>
        <trans-unit id="106845682d1e1eedc961b9b2b1a996284635faff" translate="yes" xml:space="preserve">
          <source>To enable the processing of the OpenACC directive &lt;code&gt;!$acc&lt;/code&gt; in free-form source code; the &lt;code&gt;c$acc&lt;/code&gt;, &lt;code&gt;*$acc&lt;/code&gt; and &lt;code&gt;!$acc&lt;/code&gt; directives in fixed form; the &lt;code&gt;!$&lt;/code&gt; conditional compilation sentinels in free form; and the &lt;code&gt;c$&lt;/code&gt;, &lt;code&gt;*$&lt;/code&gt; and &lt;code&gt;!$&lt;/code&gt; sentinels in fixed form, &lt;code&gt;gfortran&lt;/code&gt; needs to be invoked with the</source>
          <target state="translated">自由形式のソースコードでOpenACCディレクティブ &lt;code&gt;!$acc&lt;/code&gt; の処理を有効にするには、固定形式の &lt;code&gt;c$acc&lt;/code&gt; 、 &lt;code&gt;*$acc&lt;/code&gt; および &lt;code&gt;!$acc&lt;/code&gt; ディレクティブ。 &lt;code&gt;!$&lt;/code&gt; 自由な形で条件付きコンパイルの番兵を。そして &lt;code&gt;c$&lt;/code&gt; 、 &lt;code&gt;*$&lt;/code&gt; と &lt;code&gt;!$&lt;/code&gt; 定形で歩哨は、 &lt;code&gt;gfortran&lt;/code&gt; ニーズがで呼び出されます</target>
        </trans-unit>
        <trans-unit id="771a514eda173adc5e3191103ddb927fd8f9ab25" translate="yes" xml:space="preserve">
          <source>To enable the processing of the OpenMP directive &lt;code&gt;!$omp&lt;/code&gt; in free-form source code; the &lt;code&gt;c$omp&lt;/code&gt;, &lt;code&gt;*$omp&lt;/code&gt; and &lt;code&gt;!$omp&lt;/code&gt; directives in fixed form; the &lt;code&gt;!$&lt;/code&gt; conditional compilation sentinels in free form; and the &lt;code&gt;c$&lt;/code&gt;, &lt;code&gt;*$&lt;/code&gt; and &lt;code&gt;!$&lt;/code&gt; sentinels in fixed form, &lt;code&gt;gfortran&lt;/code&gt; needs to be invoked with the</source>
          <target state="translated">OpenMPディレクティブの処理を有効にするには &lt;code&gt;!$omp&lt;/code&gt; を自由形式のソースコードで使用します。固定形式の &lt;code&gt;c$omp&lt;/code&gt; 、 &lt;code&gt;*$omp&lt;/code&gt; および &lt;code&gt;!$omp&lt;/code&gt; ディレクティブ。 &lt;code&gt;!$&lt;/code&gt; 自由な形で条件付きコンパイルの番兵を。そして &lt;code&gt;c$&lt;/code&gt; 、 &lt;code&gt;*$&lt;/code&gt; と &lt;code&gt;!$&lt;/code&gt; 定形で歩哨は、 &lt;code&gt;gfortran&lt;/code&gt; ニーズがで呼び出されます</target>
        </trans-unit>
        <trans-unit id="4d2732defdbbc505a06dbf529811a90f7a471e2b" translate="yes" xml:space="preserve">
          <source>To get the address of elements, this extension provides an intrinsic function &lt;code&gt;LOC()&lt;/code&gt;. The &lt;code&gt;LOC()&lt;/code&gt; function is equivalent to the &lt;code&gt;&amp;amp;&lt;/code&gt; operator in C, except the address is cast to an integer type:</source>
          <target state="translated">要素のアドレスを取得するために、この拡張機能には組み込み関数 &lt;code&gt;LOC()&lt;/code&gt; が用意されています。 &lt;code&gt;LOC()&lt;/code&gt; 関数は、と等価である &lt;code&gt;&amp;amp;&lt;/code&gt; アドレスが整数型にキャストされた以外は、Cでオペレータ：</target>
        </trans-unit>
        <trans-unit id="6e2d882aa0b48c86a658f6347fc786377914ea4c" translate="yes" xml:space="preserve">
          <source>To pass a variable by value, use the &lt;code&gt;VALUE&lt;/code&gt; attribute. Thus, the following C prototype</source>
          <target state="translated">変数を値で渡すには、 &lt;code&gt;VALUE&lt;/code&gt; 属性を使用します。したがって、次のCプロトタイプ</target>
        </trans-unit>
        <trans-unit id="700a2463d3f19e5a55c7c576d786360cc36572b2" translate="yes" xml:space="preserve">
          <source>To provide a workaround for existing binary packages, this option disables tail call optimization for gfortran procedures with character arguments. With</source>
          <target state="translated">既存のバイナリパッケージの回避策として、このオプションは、文字引数を持つ gfortran プロシージャのテールコールの最適化を無効にします。このオプションを使用すると</target>
        </trans-unit>
        <trans-unit id="9282e2bdcf4231e51bbc3fa2981e1fe29516f8f8" translate="yes" xml:space="preserve">
          <source>To stat a link: &lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt; To stat a file: &lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</source>
          <target state="translated">リンクを統計するには：&lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;ファイルを統計するには：&lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="21bf865177a622b9b1d5706746a33709f5af3eac" translate="yes" xml:space="preserve">
          <source>To stat a link: &lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;, to stat a file: &lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</source>
          <target state="translated">リンクを統計するには：&lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;、ファイルを統計するには：&lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1266b5a0f7ad3fb906f188e853a7b736fd26145e" translate="yes" xml:space="preserve">
          <source>To stat an open file: &lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt; To stat a file: &lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</source>
          <target state="translated">開いているファイルを統計するには：&lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;ファイルを統計するには：&lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="71c8db7b766cf8cb469c0e5bb3240fd944a223a1" translate="yes" xml:space="preserve">
          <source>To stat an open file: &lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt; To stat a link: &lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;</source>
          <target state="translated">開いているファイルを統計するには：&lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;リンクを統計するには：&lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="60682cbc389a7f0f541210a8589d63dafde4129f" translate="yes" xml:space="preserve">
          <source>To stat an open file: &lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;, to stat a file: &lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</source>
          <target state="translated">開いているファイルを統計するには：&lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;、ファイルを統計するには：&lt;a href=&quot;stat#STAT&quot;&gt;STAT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="97207c3da28dd1f216297ba21e80496ef7309eac" translate="yes" xml:space="preserve">
          <source>To stat an open file: &lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;, to stat a link: &lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;</source>
          <target state="translated">開いているファイルを統計するには：&lt;a href=&quot;fstat#FSTAT&quot;&gt;FSTAT&lt;/a&gt;、リンクを統計するには：&lt;a href=&quot;lstat#LSTAT&quot;&gt;LSTAT&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ee60ad344c778dbb162e77975b44b1ab1581540d" translate="yes" xml:space="preserve">
          <source>To support legacy codes, GNU Fortran allows missing periods in format specifications if and only if</source>
          <target state="translated">レガシーコードをサポートするために、GNU Fortranでは、以下の場合に限り、フォーマット仕様でピリオドの欠落を許容しています。</target>
        </trans-unit>
        <trans-unit id="aeff8a003878724bccac02bb31b67dbb969733c7" translate="yes" xml:space="preserve">
          <source>To support legacy codes, GNU Fortran allows the comma separator to be omitted immediately before and after character string edit descriptors in &lt;code&gt;FORMAT&lt;/code&gt; statements.</source>
          <target state="translated">レガシーコードをサポートするために、GNU Fortranでは、 &lt;code&gt;FORMAT&lt;/code&gt; ステートメントの文字列編集記述子の直前と直後のカンマ区切りを省略できます。</target>
        </trans-unit>
        <trans-unit id="0e84af684dc5daeae32e10f526c51cbb39c823bf" translate="yes" xml:space="preserve">
          <source>To support legacy codes, GNU Fortran allows the comma separator to be omitted immediately before and after character string edit descriptors in &lt;code&gt;FORMAT&lt;/code&gt; statements. A comma with no following format decriptor is permited if the</source>
          <target state="translated">レガシーコードをサポートするために、GNU Fortranでは、 &lt;code&gt;FORMAT&lt;/code&gt; ステートメントの文字列編集記述子の直前と直後にコンマ区切り文字を省略できます。次の形式の記述子がないコンマは、次の場合に許可されます。</target>
        </trans-unit>
        <trans-unit id="4e034d558672f1bb2625e58e4102dfa15d7fec77" translate="yes" xml:space="preserve">
          <source>To support legacy codes, GNU Fortran allows the input item list of the &lt;code&gt;READ&lt;/code&gt; statement, and the output item lists of the &lt;code&gt;WRITE&lt;/code&gt; and &lt;code&gt;PRINT&lt;/code&gt; statements, to start with a comma.</source>
          <target state="translated">レガシーコードをサポートするために、GNU Fortranでは、 &lt;code&gt;READ&lt;/code&gt; ステートメントの入力項目リスト、および &lt;code&gt;WRITE&lt;/code&gt; ステートメントと &lt;code&gt;PRINT&lt;/code&gt; ステートメントの出力項目リストをコンマで始めることができます。</target>
        </trans-unit>
        <trans-unit id="9e00d99a569b4269ee4bd52962b512317475de80" translate="yes" xml:space="preserve">
          <source>To support legacy codes, GNU Fortran allows width to be omitted from format specifications if and only if</source>
          <target state="translated">レガシーコードをサポートするために、GNU Fortranでは、以下の場合に限り、フォーマットの指定から幅を省略することができます。</target>
        </trans-unit>
        <trans-unit id="6fa264a42cc80e6c180dee472f9205b2ee99b9c2" translate="yes" xml:space="preserve">
          <source>To support legacy codes, GNU Fortran permits the count field of the &lt;code&gt;X&lt;/code&gt; edit descriptor in &lt;code&gt;FORMAT&lt;/code&gt; statements to be omitted. When omitted, the count is implicitly assumed to be one.</source>
          <target state="translated">レガシーコードをサポートするために、GNU Fortranでは、 &lt;code&gt;FORMAT&lt;/code&gt; ステートメントの &lt;code&gt;X&lt;/code&gt; 編集記述子のcountフィールドを省略できます。省略した場合、カウントは暗黙的に1と見なされます。</target>
        </trans-unit>
        <trans-unit id="0397b205290cd3284fcb87047fd515ce71bc79b3" translate="yes" xml:space="preserve">
          <source>Transfer bit patterns</source>
          <target state="translated">転送ビットパターン</target>
        </trans-unit>
        <trans-unit id="581923b0ba5bd2d15abc29d6e5e8ce7ea6dc2af6" translate="yes" xml:space="preserve">
          <source>Transferring of allocations via &lt;code&gt;MOVE_ALLOC&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MOVE_ALLOC&lt;/code&gt; による割り当ての転送。</target>
        </trans-unit>
        <trans-unit id="5f200117904c989c5b71c10e2df8802de5fcf81c" translate="yes" xml:space="preserve">
          <source>Transformational function</source>
          <target state="translated">変形機能</target>
        </trans-unit>
        <trans-unit id="e70128a916c6f33d343fed9e075e6779cd01028c" translate="yes" xml:space="preserve">
          <source>Translate the user&amp;rsquo;s program into instructions a computer can carry out more quickly than it takes to translate the instructions in the first place. The result after compilation of a program is &lt;em&gt;machine code&lt;/em&gt;, code designed to be efficiently translated and processed by a machine such as your computer. Humans usually are not as good writing machine code as they are at writing Fortran (or C++, Ada, or Java), because it is easy to make tiny mistakes writing machine code.</source>
          <target state="translated">ユーザーのプログラムを命令に変換します。コンピュータは最初から命令を変換するよりも速く実行できます。プログラムのコンパイル後の結果は、コンピューター&lt;em&gt;コード&lt;/em&gt;（コンピューターなどのマシンによって効率的に変換および処理されるように設計された&lt;em&gt;コード&lt;/em&gt;）です。人間は通常、Fortran（またはC ++、Ada、Java）を書くときほど機械コードを書くのは上手ではありません。機械コードを書くときに小さな間違いを犯しやすいからです。</target>
        </trans-unit>
        <trans-unit id="618e311e13c4b76d3cf2bebe91792696125b79f3" translate="yes" xml:space="preserve">
          <source>Transpose an array of rank two</source>
          <target state="translated">ランク2の配列を転置</target>
        </trans-unit>
        <trans-unit id="fa5b118cd82926c8ba60fc5b4e9f4facc9ec3577" translate="yes" xml:space="preserve">
          <source>Transpose an array of rank two. Element (i, j) of the result has the value &lt;code&gt;MATRIX(j, i)&lt;/code&gt;, for all i, j.</source>
          <target state="translated">ランク2の配列を転置します。結果の要素（i、j）の値は、すべてのi、jに対して &lt;code&gt;MATRIX(j, i)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="87b07ff0b8c55dbd66f463e70061f285ff8e7f1d" translate="yes" xml:space="preserve">
          <source>Treat each program unit (except those marked as RECURSIVE) as if the &lt;code&gt;SAVE&lt;/code&gt; statement were specified for every local variable and array referenced in it. Does not affect common blocks. (Some Fortran compilers provide this option under the name</source>
          <target state="translated">各プログラム単位（RECURSIVEとマークされているものを除く）を、その中で参照されるすべてのローカル変数と配列に対して &lt;code&gt;SAVE&lt;/code&gt; ステートメントが指定されているかのように扱います。共通ブロックには影響しません。（一部のFortranコンパイラは、このオプションを</target>
        </trans-unit>
        <trans-unit id="2e664ee052bbf2019c132b1385ce2ac062702f98" translate="yes" xml:space="preserve">
          <source>Truncate to a whole number</source>
          <target state="translated">全数に切り詰める</target>
        </trans-unit>
        <trans-unit id="04079637719a844631dc4811a152bce800d6eb55" translate="yes" xml:space="preserve">
          <source>Turns all warnings into errors.</source>
          <target state="translated">すべての警告をエラーに変えます。</target>
        </trans-unit>
        <trans-unit id="1811066da67e504477d75dad839d3b284b5d6851" translate="yes" xml:space="preserve">
          <source>Two line feeds and carriage return</source>
          <target state="translated">2本のラインフィードとキャリッジリターン</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="a3dc6c906e98f1e5ba74f445e96c86ba8ba7fbb6" translate="yes" xml:space="preserve">
          <source>Typedef of type &lt;code&gt;void *&lt;/code&gt; on the compiler side. Can be any data type on the library side.</source>
          <target state="translated">コンパイラー側の &lt;code&gt;void *&lt;/code&gt; 型のTypedef 。ライブラリ側の任意のデータ型を使用できます。</target>
        </trans-unit>
        <trans-unit id="e7e51a4459148e181b9af3ce817118a68e10cf35" translate="yes" xml:space="preserve">
          <source>UNPACK</source>
          <target state="translated">UNPACK</target>
        </trans-unit>
        <trans-unit id="9531ac1c772b98a514787df9460ed3aef76b01b3" translate="yes" xml:space="preserve">
          <source>Unformatted sequential files are stored as logical records using record markers. Each logical record consists of one of more subrecords.</source>
          <target state="translated">フォーマットされていないシーケンシャルファイルは、レコードマーカーを使用して論理レコードとして格納されます。各論理レコードは、1つ以上のサブレコードで構成されています。</target>
        </trans-unit>
        <trans-unit id="6a6dc403952d1c8a45e0169421b64bf31ee41166" translate="yes" xml:space="preserve">
          <source>Unions are an old vendor extension which were commonly used with the non-standard &lt;a href=&quot;structure-and-record#STRUCTURE-and-RECORD&quot;&gt;STRUCTURE and RECORD&lt;/a&gt; extensions. Use of &lt;code&gt;UNION&lt;/code&gt; and &lt;code&gt;MAP&lt;/code&gt; is automatically enabled with</source>
          <target state="translated">ユニオンは、非標準の&lt;a href=&quot;structure-and-record#STRUCTURE-and-RECORD&quot;&gt;STRUCTUREおよびRECORD&lt;/a&gt;拡張で一般的に使用されていた古いベンダー拡張です。 &lt;code&gt;UNION&lt;/code&gt; と &lt;code&gt;MAP&lt;/code&gt; の使用は、</target>
        </trans-unit>
        <trans-unit id="db7a84404f8bec00fa2f135c6d8a6f6a613666fe" translate="yes" xml:space="preserve">
          <source>Unit number for standard error</source>
          <target state="translated">標準誤差の単位数</target>
        </trans-unit>
        <trans-unit id="280f3d077d29a2f474bd7a75efbfa76f173f2a77" translate="yes" xml:space="preserve">
          <source>Unit number for standard input</source>
          <target state="translated">標準入力のユニット番号</target>
        </trans-unit>
        <trans-unit id="61acf618a725b32bf12841f02d25e1776f39d8e3" translate="yes" xml:space="preserve">
          <source>Unit number for standard output</source>
          <target state="translated">標準出力の単位番号</target>
        </trans-unit>
        <trans-unit id="019d93f6fdc1b764eb07d4db6e13bc6056e02f95" translate="yes" xml:space="preserve">
          <source>Unlinks the file &lt;var&gt;PATH&lt;/var&gt;. A null character (&lt;code&gt;CHAR(0)&lt;/code&gt;) can be used to mark the end of the name in &lt;var&gt;PATH&lt;/var&gt;; otherwise, trailing blanks in the file name are ignored. If the &lt;var&gt;STATUS&lt;/var&gt; argument is supplied, it contains 0 on success or a nonzero error code upon return; see &lt;code&gt;unlink(2)&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;var&gt;PATH&lt;/var&gt; のリンクを解除します。 NULL文字（ &lt;code&gt;CHAR(0)&lt;/code&gt; ）を使用して、 &lt;var&gt;PATH&lt;/var&gt; 内の名前の終わりをマークできます。それ以外の場合、ファイル名の末尾の空白は無視されます。 &lt;var&gt;STATUS&lt;/var&gt; 引数が指定されている場合、成功時には0が返され、戻り時にはゼロ以外のエラーコードが含まれます。 &lt;code&gt;unlink(2)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a9f17adaf9079b58a1a3d4f20af95a3dca6f657" translate="yes" xml:space="preserve">
          <source>Unlocking a lock variable</source>
          <target state="translated">ロック変数のロック解除</target>
        </trans-unit>
        <trans-unit id="12eb5b406f16b604cf34ad2388c34903d500a97d" translate="yes" xml:space="preserve">
          <source>Unpack an array of rank one into an array</source>
          <target state="translated">ランク1の配列を配列に展開する</target>
        </trans-unit>
        <trans-unit id="f13be7738e1389f72c0f88aa84d17719f746bf4a" translate="yes" xml:space="preserve">
          <source>Unused.</source>
          <target state="translated">Unused.</target>
        </trans-unit>
        <trans-unit id="c4664e1c6e1eed64913fcd62c9c184079c4df3ca" translate="yes" xml:space="preserve">
          <source>Up to Fortran 95, BOZ literal constants were only allowed to initialize integer variables in DATA statements. Since Fortran 2003 BOZ literal constants are also allowed as actual arguments to the &lt;code&gt;REAL&lt;/code&gt;, &lt;code&gt;DBLE&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt; and &lt;code&gt;CMPLX&lt;/code&gt; intrinsic functions. The BOZ literal constant is simply a string of bits, which is padded or truncated as needed, during conversion to a numeric type. The Fortran standard states that the treatment of the sign bit is processor dependent. Gfortran interprets the sign bit as a user would expect.</source>
          <target state="translated">Fortran 95までは、BOZリテラル定数はDATAステートメントの整数変数の初期化のみが許可されていました。Fortran 2003以降、BOZリテラル定数は、 &lt;code&gt;REAL&lt;/code&gt; 、 &lt;code&gt;DBLE&lt;/code&gt; 、 &lt;code&gt;INT&lt;/code&gt; 、および &lt;code&gt;CMPLX&lt;/code&gt; 組み込み関数への実際の引数としても使用できます。BOZリテラル定数は、数値型への変換中に必要に応じてパディングまたは切り捨てられるビットの文字列です。Fortran規格では、符号ビットの処理はプロセッサに依存するとされています。Gfortranは、ユーザーが期待するように符号ビットを解釈します。</target>
        </trans-unit>
        <trans-unit id="43973ff76352a5affc21c21f4a8d3d0508028492" translate="yes" xml:space="preserve">
          <source>Up to Fortran 95, BOZ literals were only allowed to initialize integer variables in DATA statements. Since Fortran 2003 BOZ literals are also allowed as argument of &lt;code&gt;REAL&lt;/code&gt;, &lt;code&gt;DBLE&lt;/code&gt;, &lt;code&gt;INT&lt;/code&gt; and &lt;code&gt;CMPLX&lt;/code&gt;; the result is the same as if the integer BOZ literal had been converted by &lt;code&gt;TRANSFER&lt;/code&gt; to, respectively, &lt;code&gt;real&lt;/code&gt;, &lt;code&gt;double precision&lt;/code&gt;, &lt;code&gt;integer&lt;/code&gt; or &lt;code&gt;complex&lt;/code&gt;. As GNU Fortran extension the intrinsic procedures &lt;code&gt;FLOAT&lt;/code&gt;, &lt;code&gt;DFLOAT&lt;/code&gt;, &lt;code&gt;COMPLEX&lt;/code&gt; and &lt;code&gt;DCMPLX&lt;/code&gt; are treated alike.</source>
          <target state="translated">Fortran 95までは、BOZリテラルはDATAステートメントの整数変数の初期化のみが許可されていました。 Fortran 2003のBOZリテラルは、 &lt;code&gt;REAL&lt;/code&gt; 、 &lt;code&gt;DBLE&lt;/code&gt; 、 &lt;code&gt;INT&lt;/code&gt; 、および &lt;code&gt;CMPLX&lt;/code&gt; の引数としても使用できるため、結果は、整数BOZリテラルが &lt;code&gt;TRANSFER&lt;/code&gt; によってそれぞれ &lt;code&gt;real&lt;/code&gt; 、 &lt;code&gt;double precision&lt;/code&gt; 、 &lt;code&gt;integer&lt;/code&gt; または &lt;code&gt;complex&lt;/code&gt; 変換された場合と同じです。 GNU Fortran拡張機能として、組み込みプロシージャー &lt;code&gt;FLOAT&lt;/code&gt; 、 &lt;code&gt;DFLOAT&lt;/code&gt; 、 &lt;code&gt;COMPLEX&lt;/code&gt; 、および &lt;code&gt;DCMPLX&lt;/code&gt; は同様に扱われます。</target>
        </trans-unit>
        <trans-unit id="3984c15373a989fe27ef4b1eeb3b706a5a45538d" translate="yes" xml:space="preserve">
          <source>Upper codimension bounds of an array</source>
          <target state="translated">配列の2次元上界</target>
        </trans-unit>
        <trans-unit id="147d16aacd6cba56d9ff8f3f120167efb5adc5f2" translate="yes" xml:space="preserve">
          <source>Upper dimension bounds of an array</source>
          <target state="translated">配列の上次元境界</target>
        </trans-unit>
        <trans-unit id="eb4639975214bd02baed9aee7811250d9713b6c2" translate="yes" xml:space="preserve">
          <source>Use &lt;var&gt;dir&lt;/var&gt; as a subdirectory of the directory containing target-specific C++ headers.</source>
          <target state="translated">ターゲット固有のC ++ヘッダーを含むディレクトリのサブディレクトリとして &lt;var&gt;dir&lt;/var&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="496c59f6a9d32b643cd08c29e9aafbff1438a9fb" translate="yes" xml:space="preserve">
          <source>Use of</source>
          <target state="translated">使用方法</target>
        </trans-unit>
        <trans-unit id="6c08132280908eb00731c64ad8528e58b9a6bef0" translate="yes" xml:space="preserve">
          <source>Used to query the coarray library whether an allocatable component in a derived type coarray is allocated on a remote image.</source>
          <target state="translated">派生型 Co-Array の割り当て可能なコンポーネントがリモート画像上に割り当てられているかどうかを Co-Array ライブラリに問い合わせるために使用されます。</target>
        </trans-unit>
        <trans-unit id="228565cbb2b7d39564fb37b4722a8bb876904f67" translate="yes" xml:space="preserve">
          <source>User ID function</source>
          <target state="translated">ユーザーID機能</target>
        </trans-unit>
        <trans-unit id="8b8d229c12343fe081586cfe087fea3a8ed6c959" translate="yes" xml:space="preserve">
          <source>User time in seconds.</source>
          <target state="translated">ユーザータイムを秒単位で表示しています。</target>
        </trans-unit>
        <trans-unit id="a663e15f507d37b3a8ee28f0c34a9256987cb042" translate="yes" xml:space="preserve">
          <source>User-visible implementation details.</source>
          <target state="translated">ユーザーから見える実装の詳細。</target>
        </trans-unit>
        <trans-unit id="6935b3ffa77b90caf0faa1e8c8b856ce5c34b528" translate="yes" xml:space="preserve">
          <source>Using anything but the native representation for unformatted data carries a significant speed overhead. If speed in this area matters to you, it is best if you use this only for data that needs to be portable.</source>
          <target state="translated">フォーマットされていないデータにネイティブ表現以外のものを使用すると、かなりの速度オーバーヘッドが発生します。この領域の速度が重要な場合は、移植性が必要なデータにのみこれを使用するのが最善です。</target>
        </trans-unit>
        <trans-unit id="89e3bf68c4405c5a4aa33fded084807b149d7ac2" translate="yes" xml:space="preserve">
          <source>Using assumed-shape, assumed-rank and deferred-shape arrays in &lt;code&gt;BIND(C)&lt;/code&gt; procedures is not fully supported. In particular, C interoperable strings of other length than one are not supported as this requires the new array descriptor.</source>
          <target state="translated">&lt;code&gt;BIND(C)&lt;/code&gt; プロシージャーでの想定形状、想定ランク、および据え置き形状配列の使用は、完全にはサポートされていません。特に、1以外の長さのC相互運用文字列はサポートされていません。これには、新しい配列記述子が必要になるためです。</target>
        </trans-unit>
        <trans-unit id="7ef2bf79fd4bd83959b5f9a04b3c5898c048623e" translate="yes" xml:space="preserve">
          <source>Using complex arguments with &lt;code&gt;TAN&lt;/code&gt;, &lt;code&gt;SINH&lt;/code&gt;, &lt;code&gt;COSH&lt;/code&gt;, &lt;code&gt;TANH&lt;/code&gt;, &lt;code&gt;ASIN&lt;/code&gt;, &lt;code&gt;ACOS&lt;/code&gt;, and &lt;code&gt;ATAN&lt;/code&gt; is now possible; &lt;code&gt;ATAN&lt;/code&gt;(&lt;var&gt;Y&lt;/var&gt;,&lt;var&gt;X&lt;/var&gt;) is now an alias for &lt;code&gt;ATAN2&lt;/code&gt;(&lt;var&gt;Y&lt;/var&gt;,&lt;var&gt;X&lt;/var&gt;).</source>
          <target state="translated">複雑な引数を使用して &lt;code&gt;TAN&lt;/code&gt; 、 &lt;code&gt;SINH&lt;/code&gt; 、 &lt;code&gt;COSH&lt;/code&gt; 、 &lt;code&gt;TANH&lt;/code&gt; 、 &lt;code&gt;ASIN&lt;/code&gt; 、 &lt;code&gt;ACOS&lt;/code&gt; 、および &lt;code&gt;ATAN&lt;/code&gt; が可能になりました。 &lt;code&gt;ATAN&lt;/code&gt; （ &lt;var&gt;Y&lt;/var&gt; 、 &lt;var&gt;X&lt;/var&gt; ）は、 &lt;code&gt;ATAN2&lt;/code&gt; （ &lt;var&gt;Y&lt;/var&gt; 、 &lt;var&gt;X&lt;/var&gt; ）のエイリアスになりました。</target>
        </trans-unit>
        <trans-unit id="0fece744bc9977f23cdac28c3daa8c2367a856f3" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;OPEN&lt;/code&gt; statement with a &lt;code&gt;STATUS=&quot;NEW&quot;&lt;/code&gt; specifier on a symbolic link will result in an error condition, whether the symbolic link points to an existing target or is dangling.</source>
          <target state="translated">シンボリックリンクで &lt;code&gt;STATUS=&quot;NEW&quot;&lt;/code&gt; 指定子を指定した &lt;code&gt;OPEN&lt;/code&gt; ステートメントを使用すると、シンボリックリンクが既存のターゲットを指しているか、ぶら下がっているかに関係なく、エラー状態になります。</target>
        </trans-unit>
        <trans-unit id="93d3730838597eeb50b33dec00642cbfcc38d35b" translate="yes" xml:space="preserve">
          <source>Using the option could look like this:</source>
          <target state="translated">オプションを使用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="765c9e1c01049eff74e4f8406ca71be449872e2b" translate="yes" xml:space="preserve">
          <source>Using this option can lead to problems including crashes due to insufficient stack space.</source>
          <target state="translated">このオプションを使用すると、スタックスペースが不足してクラッシュするなどの問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cae86d6fdec2cd3dc1278e7b6832cae32df94ce6" translate="yes" xml:space="preserve">
          <source>Using this option is &lt;em&gt;strongly&lt;/em&gt; discouraged. It is possible to provide standard-conforming code which allows different types of arguments by using an explicit interface and &lt;code&gt;TYPE(*)&lt;/code&gt;.</source>
          <target state="translated">このオプションの使用は&lt;em&gt;強く&lt;/em&gt;お勧めしません。明示的なインターフェイスと &lt;code&gt;TYPE(*)&lt;/code&gt; を使用することにより、さまざまなタイプの引数を許可する標準準拠のコードを提供することができます。</target>
        </trans-unit>
        <trans-unit id="25a92b1376d7512d8c7f7c39f7d1ff452ae99c9f" translate="yes" xml:space="preserve">
          <source>Valid Fortran 95 programs should compile properly with or without this option. However, without this option, certain GNU extensions and traditional Fortran features are supported as well. With this option, many of them are rejected.</source>
          <target state="translated">有効なFortran 95プログラムは、このオプションの有無に関わらず、正しくコンパイルされるべきです。しかし、このオプションがない場合、ある種のGNU拡張や伝統的なFortranの機能もサポートされています。このオプションを使うと、それらの多くは拒否されます。</target>
        </trans-unit>
        <trans-unit id="407568ddcfbd4b707cbc30d20bbc2a3cdc6e850e" translate="yes" xml:space="preserve">
          <source>Valid Fortran programs should compile properly with or without this option. However, without this option, certain GNU extensions and traditional Fortran features are supported as well. With this option, many of them are rejected.</source>
          <target state="translated">有効なFortranプログラムは、このオプションの有無に関わらず正しくコンパイルされるべきです。しかし、このオプションがない場合、ある種のGNU拡張や伝統的なFortranの機能もサポートされます。このオプションを使うと、それらの多くは拒否されます。</target>
        </trans-unit>
        <trans-unit id="81a4ce5218bef8986dca03cf2247e3656031274f" translate="yes" xml:space="preserve">
          <source>Valid values for &lt;code&gt;CONVERT&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;CONVERT&lt;/code&gt; の有効な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="86c32875bdd6c77926003edf1c3b3e4acfee35de" translate="yes" xml:space="preserve">
          <source>Variable of any type.</source>
          <target state="translated">任意のタイプの変数。</target>
        </trans-unit>
        <trans-unit id="3fa8f639194f927a05e6ee8c3f56f9cf59112e12" translate="yes" xml:space="preserve">
          <source>Variable of the type &lt;code&gt;REAL&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;REAL&lt;/code&gt; の変数。</target>
        </trans-unit>
        <trans-unit id="5f50cd138831971a4cd8cb6d265ba3e133d980fe" translate="yes" xml:space="preserve">
          <source>Variables can be made accessible from C using the C binding attribute, optionally together with specifying a binding name. Those variables have to be declared in the declaration part of a &lt;code&gt;MODULE&lt;/code&gt;, be of interoperable type, and have neither the &lt;code&gt;pointer&lt;/code&gt; nor the &lt;code&gt;allocatable&lt;/code&gt; attribute.</source>
          <target state="translated">変数は、Cバインディング属性を使用して、オプションでバインディング名を指定して、Cからアクセス可能にすることができます。これらの変数は、 &lt;code&gt;MODULE&lt;/code&gt; の宣言部分で宣言され、相互運用可能な型であり、 &lt;code&gt;pointer&lt;/code&gt; も &lt;code&gt;allocatable&lt;/code&gt; 属性も持たない必要があります。</target>
        </trans-unit>
        <trans-unit id="e29dc413f150614968f1b014cc388ae4bbbb66a1" translate="yes" xml:space="preserve">
          <source>Variables with &lt;code&gt;NO_ARG_CHECK&lt;/code&gt; attribute shall be of assumed-type (&lt;code&gt;TYPE(*)&lt;/code&gt;; recommended) or of type &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;LOGICAL&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt; or &lt;code&gt;COMPLEX&lt;/code&gt;. They shall not have the &lt;code&gt;ALLOCATE&lt;/code&gt;, &lt;code&gt;CODIMENSION&lt;/code&gt;, &lt;code&gt;INTENT(OUT)&lt;/code&gt;, &lt;code&gt;POINTER&lt;/code&gt; or &lt;code&gt;VALUE&lt;/code&gt; attribute; furthermore, they shall be either scalar or of assumed-size (&lt;code&gt;dimension(*)&lt;/code&gt;). As &lt;code&gt;TYPE(*)&lt;/code&gt;, the &lt;code&gt;NO_ARG_CHECK&lt;/code&gt; attribute requires an explicit interface.</source>
          <target state="translated">&lt;code&gt;NO_ARG_CHECK&lt;/code&gt; 属性を持つ変数は、想定型（ &lt;code&gt;TYPE(*)&lt;/code&gt; ;推奨）または型 &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;LOGICAL&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt; 、または &lt;code&gt;COMPLEX&lt;/code&gt; でなければなりません。 &lt;code&gt;ALLOCATE&lt;/code&gt; 、 &lt;code&gt;CODIMENSION&lt;/code&gt; 、 &lt;code&gt;INTENT(OUT)&lt;/code&gt; 、 &lt;code&gt;POINTER&lt;/code&gt; または &lt;code&gt;VALUE&lt;/code&gt; 属性を持たないこと。さらに、それらはスカラーまたは想定サイズ（ &lt;code&gt;dimension(*)&lt;/code&gt; ）のいずれかでなければなりません。以下のよう &lt;code&gt;TYPE(*)&lt;/code&gt; 、 &lt;code&gt;NO_ARG_CHECK&lt;/code&gt; の属性は、明示的なインターフェイスが必要です。</target>
        </trans-unit>
        <trans-unit id="bfe3182f539bb0934f3b078b390e76b150e1ffae" translate="yes" xml:space="preserve">
          <source>Verifies that all the characters in &lt;var&gt;STRING&lt;/var&gt; belong to the set of characters in &lt;var&gt;SET&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;STRING&lt;/var&gt; のすべての文字が &lt;var&gt;SET&lt;/var&gt; の文字セットに属していることを確認します。</target>
        </trans-unit>
        <trans-unit id="4bd7e52ecd27919a5500b769c17d879c88191ef8" translate="yes" xml:space="preserve">
          <source>Wait for completion of segment-memory operations</source>
          <target state="translated">セグメントメモリ操作の完了を待つ</target>
        </trans-unit>
        <trans-unit id="82441dcba5985ea7f14bcce3582fcb6daa3ff460" translate="yes" xml:space="preserve">
          <source>Wait that an event occurred</source>
          <target state="translated">イベントが発生したのを待つ</target>
        </trans-unit>
        <trans-unit id="09800eef55377fcedfe7531a852761aa69452162" translate="yes" xml:space="preserve">
          <source>Wait until the event count has reached at least the specified &lt;var&gt;until_count&lt;/var&gt;; if so, atomically decrement the event variable by this amount and return.</source>
          <target state="translated">イベント数が少なくとも指定された &lt;var&gt;until_count&lt;/var&gt; に達するまで待ちます。その場合、イベント変数をこの量だけアトミックにデクリメントして戻ります。</target>
        </trans-unit>
        <trans-unit id="b224c52d9abbb5a7474efb2d65072b2e44bb2089" translate="yes" xml:space="preserve">
          <source>Warn about array temporaries generated by the compiler. The information generated by this warning is sometimes useful in optimization, in order to avoid such temporaries.</source>
          <target state="translated">コンパイラによって生成された配列のテンポラリについて警告します。この警告によって生成された情報は、そのようなテンポラリを避けるために最適化を行う際に役立つことがあります。</target>
        </trans-unit>
        <trans-unit id="4084725652784f9979ae67cc2bc37cba76815b06" translate="yes" xml:space="preserve">
          <source>Warn about implicit conversions between different types and kinds. This option does &lt;em&gt;not&lt;/em&gt; imply</source>
          <target state="translated">異なる型と種類の間の暗黙の変換について警告します。このオプションは意味しませ&lt;em&gt;ん&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5951ad61852d6e3a277ac4de207b01682a21781d" translate="yes" xml:space="preserve">
          <source>Warn about implicit conversions that are likely to change the value of the expression after conversion. Implied by</source>
          <target state="translated">変換後に式の値を変更する可能性が高い暗黙の変換について警告します。暗黙の</target>
        </trans-unit>
        <trans-unit id="522d88aac9acdbc550cd79b62acd8f2814978281" translate="yes" xml:space="preserve">
          <source>Warn about missing ampersand in continued character constants. The warning is given with</source>
          <target state="translated">連続文字定数のアンパサンドの欠落について警告します。警告は</target>
        </trans-unit>
        <trans-unit id="bd7ac747461bfb19988cc8539e1c9e64fa811341" translate="yes" xml:space="preserve">
          <source>Warn about possible aliasing of dummy arguments. Specifically, it warns if the same actual argument is associated with a dummy argument with &lt;code&gt;INTENT(IN)&lt;/code&gt; and a dummy argument with &lt;code&gt;INTENT(OUT)&lt;/code&gt; in a call with an explicit interface.</source>
          <target state="translated">仮引数のエイリアスの可能性について警告します。具体的には、明示的なインターフェイスを使用した呼び出しで、同じ実引数が &lt;code&gt;INTENT(IN)&lt;/code&gt; の仮引数と &lt;code&gt;INTENT(OUT)&lt;/code&gt; の仮引数に関連付けられている場合に警告します。</target>
        </trans-unit>
        <trans-unit id="8276d05128a23bdc66caf69856565cd3ac49b11d" translate="yes" xml:space="preserve">
          <source>Warn about type, rank, and other mismatches between formal parameters and actual arguments to functions and subroutines. These warnings are recommended and thus enabled by default.</source>
          <target state="translated">関数やサブルーチンの形式的なパラメータと実際の引数との間の型やランク、その他のミスマッチについて警告します。これらの警告は推奨されており、デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="1912b824d5122aa2b3135ac8571577fd7b48e4ab" translate="yes" xml:space="preserve">
          <source>Warn about unused dummy arguments. This option is implied by</source>
          <target state="translated">未使用のダミー引数について警告します。このオプションは</target>
        </trans-unit>
        <trans-unit id="466fbabbce62f74944696cd15456fb2d7fcaeb87" translate="yes" xml:space="preserve">
          <source>Warn if &lt;code&gt;gfortran&lt;/code&gt; finds a procedure named like an intrinsic not available in the currently selected standard (with</source>
          <target state="translated">&lt;code&gt;gfortran&lt;/code&gt; が、現在選択されている標準では使用できない組み込み関数のような名前のプロシージャを見つけた場合に警告します（</target>
        </trans-unit>
        <trans-unit id="6161693bd356986be63048763cd39c9baa6b5c07" translate="yes" xml:space="preserve">
          <source>Warn if a &lt;code&gt;DO&lt;/code&gt; loop is known to execute zero times at compile time. This option is implied by</source>
          <target state="translated">&lt;code&gt;DO&lt;/code&gt; ループがコンパイル時にゼロ回実行されることがわかっている場合に警告します。このオプションは、</target>
        </trans-unit>
        <trans-unit id="661e7d1989726a5b031f8b8e009ebf9f30bc1812" translate="yes" xml:space="preserve">
          <source>Warn if a &lt;code&gt;USE&lt;/code&gt; statement has no &lt;code&gt;ONLY&lt;/code&gt; qualifier and thus implicitly imports all public entities of the used module.</source>
          <target state="translated">&lt;code&gt;USE&lt;/code&gt; ステートメントに &lt;code&gt;ONLY&lt;/code&gt; 修飾子がなく、使用されたモジュールのすべてのパブリックエンティティを暗黙的にインポートする場合に警告します。</target>
        </trans-unit>
        <trans-unit id="3689fd7d0ff1922bbed4f343e2ef4cb9af2ab93c" translate="yes" xml:space="preserve">
          <source>Warn if a DO loop with step either 1 or -1 yields an underflow or an overflow during iteration of an induction variable of the loop. This option is implied by</source>
          <target state="translated">ステップが1または-1のDOループで、ループの誘導変数の反復中にアンダーフローまたはオーバーフローが発生した場合に警告します。このオプションは</target>
        </trans-unit>
        <trans-unit id="854d2f746792cf8db804c37e064b21ce9301b18d" translate="yes" xml:space="preserve">
          <source>Warn if a constant integer division truncates it result. As an example, 3/5 evaluates to 0.</source>
          <target state="translated">定数整数の除算で結果が切り捨てられる場合に警告を出します。例として、3/5 は 0 と評価されます。</target>
        </trans-unit>
        <trans-unit id="9b2066d9dfd9a4c837bc20bf0aa183d1120fdb7a" translate="yes" xml:space="preserve">
          <source>Warn if a constant integer division truncates its result. As an example, 3/5 evaluates to 0.</source>
          <target state="translated">定数整数の除算がその結果を切り捨てる場合に警告します。例として、3/5 は 0 と評価されます。</target>
        </trans-unit>
        <trans-unit id="588972d1cbb7265eaf8fc906a30d164447a14d0f" translate="yes" xml:space="preserve">
          <source>Warn if a procedure is called that has neither an explicit interface nor has been declared as &lt;code&gt;EXTERNAL&lt;/code&gt;.</source>
          <target state="translated">明示的なインターフェースも &lt;code&gt;EXTERNAL&lt;/code&gt; としても宣言されていないプロシージャが呼び出された場合に警告します。</target>
        </trans-unit>
        <trans-unit id="ea0bee44772f0985b4e6b09fe2b0a698f6dea611" translate="yes" xml:space="preserve">
          <source>Warn if a procedure is called without an explicit interface. Note this only checks that an explicit interface is present. It does not check that the declared interfaces are consistent across program units.</source>
          <target state="translated">プロシージャが明示的なインターフェースなしで呼ばれた場合に警告を出します。これは、明示的なインタフェースが存在するかどうかをチェックするだけであることに注意してください。宣言されたインタフェースがプログラム単位で一貫しているかどうかはチェックしません。</target>
        </trans-unit>
        <trans-unit id="572b81076d92d77297bcbc29d67f13fbb01a1c1d" translate="yes" xml:space="preserve">
          <source>Warn if a user-defined procedure or module procedure has the same name as an intrinsic; in this case, an explicit interface or &lt;code&gt;EXTERNAL&lt;/code&gt; or &lt;code&gt;INTRINSIC&lt;/code&gt; declaration might be needed to get calls later resolved to the desired intrinsic/procedure. This option is implied by</source>
          <target state="translated">ユーザー定義のプロシージャまたはモジュールプロシージャの名前が組み込みと同じである場合に警告します。この場合、呼び出しを後で目的の組み込み/手順に解決するために、明示的なインターフェイスまたは &lt;code&gt;EXTERNAL&lt;/code&gt; または &lt;code&gt;INTRINSIC&lt;/code&gt; 宣言が必要になる場合があります。このオプションは、</target>
        </trans-unit>
        <trans-unit id="c6313468c7f20703362c8280354927535f8c4817" translate="yes" xml:space="preserve">
          <source>Warn if an array subscript inside a DO loop could lead to an out-of-bounds access even if the compiler cannot prove that the statement is actually executed, in cases like</source>
          <target state="translated">のように、DO ループ内の配列の添え字が境界外アクセスにつながる可能性がある場合、コンパイラがステートメントが実際に実行されたことを証明できなくても、警告を表示します。</target>
        </trans-unit>
        <trans-unit id="1bbfd5c0b30e3d9b0cc4d30b7e0b3b1ab599cea5" translate="yes" xml:space="preserve">
          <source>Warn if any calls to functions are eliminated by the optimizations enabled by the</source>
          <target state="translated">で有効になっている最適化によって関数の呼び出しが排除された場合に警告を出します。</target>
        </trans-unit>
        <trans-unit id="78622fc9eb587b89d6e067b9c66adbfba344d1bf" translate="yes" xml:space="preserve">
          <source>Warn if any calls to impure functions are eliminated by the optimizations enabled by the</source>
          <target state="translated">で有効になっている最適化によって不純な関数の呼び出しが排除された場合に警告を出します。</target>
        </trans-unit>
        <trans-unit id="28fa1b23765d5b95be89cb337809efc686e5e2fa" translate="yes" xml:space="preserve">
          <source>Warn if the a variable might not be C interoperable. In particular, warn if the variable has been declared using an intrinsic type with default kind instead of using a kind parameter defined for C interoperability in the intrinsic &lt;code&gt;ISO_C_Binding&lt;/code&gt; module. This option is implied by</source>
          <target state="translated">a変数がCと相互運用できない可能性がある場合に警告します。特に、組み込みの &lt;code&gt;ISO_C_Binding&lt;/code&gt; モジュールでCの相互運用性のために定義されたkindパラメーターを使用するのではなく、デフォルトのkindを持つ組み込み型を使用して変数が宣言されている場合に警告します。このオプションは、</target>
        </trans-unit>
        <trans-unit id="ef8af028d4983d98362486a17cbfc0701f0c1daf" translate="yes" xml:space="preserve">
          <source>Warn if the pointer in a pointer assignment might be longer than the its target. This option is implied by</source>
          <target state="translated">ポインタ代入のポインタがターゲットよりも長くなる可能性がある場合に警告します。このオプションは</target>
        </trans-unit>
        <trans-unit id="1e1c6cf6b2f16673310dca3f81d3413d3db94acf" translate="yes" xml:space="preserve">
          <source>Warn when a character assignment will truncate the assigned string.</source>
          <target state="translated">文字の代入で代入された文字列が切り捨てられる場合に警告します。</target>
        </trans-unit>
        <trans-unit id="33974696d324503f9f5592f482c2b2bed794f6dc" translate="yes" xml:space="preserve">
          <source>Warn when a source code line will be truncated. This option is implied by</source>
          <target state="translated">ソースコードの行が切り捨てられるときに警告します。このオプションは</target>
        </trans-unit>
        <trans-unit id="ef60364667482ef9180c9682128a09332dcdd4fd" translate="yes" xml:space="preserve">
          <source>Warn when comparing real or complex types for equality or inequality. This option is implied by</source>
          <target state="translated">実数型や複素数型を比較して等しくないか不等しくないかを比較するときに警告します。このオプションは</target>
        </trans-unit>
        <trans-unit id="1bae9b5e7bb97c9d9f44c62b324978d3ef2cfb85" translate="yes" xml:space="preserve">
          <source>Warn when the compiler inserts code to for allocation or reallocation of an allocatable variable; this includes scalars and derived types.</source>
          <target state="translated">コンパイラが割り当て可能な変数の割り当てまたは再割り当てのためにコードを挿入すると警告します。</target>
        </trans-unit>
        <trans-unit id="3e7c470d64906667f279242b7e6866ca62a8625a" translate="yes" xml:space="preserve">
          <source>Warn when the compiler might insert code to for allocation or reallocation of an allocatable array variable of intrinsic type in intrinsic assignments. In hot loops, the Fortran 2003 reallocation feature may reduce the performance. If the array is already allocated with the correct shape, consider using a whole-array array-spec (e.g. &lt;code&gt;(:,:,:)&lt;/code&gt;) for the variable on the left-hand side to prevent the reallocation check. Note that in some cases the warning is shown, even if the compiler will optimize reallocation checks away. For instance, when the right-hand side contains the same variable multiplied by a scalar. See also</source>
          <target state="translated">コンパイラが組み込み代入で組み込み型の割り当て可能な配列変数の割り当てまたは再割り当てを行うコードを挿入する可能性がある場合に警告します。ホットループでは、Fortran 2003の再割り当て機能によってパフォーマンスが低下する場合があります。配列がすでに正しい形状で割り当てられている場合は、再配置チェックを防ぐために、左側の変数に配列全体の配列指定（例： &lt;code&gt;(:,:,:)&lt;/code&gt; ）を使用することを検討してください。コンパイラーが再割り当てチェックを最適化しても、警告が表示される場合があることに注意してください。たとえば、右側に同じ変数にスカラーを掛けた値が含まれている場合などです。こちらもご覧ください</target>
        </trans-unit>
        <trans-unit id="aba0f8527f0ae28cb3764542d56ab9c6554a3372" translate="yes" xml:space="preserve">
          <source>Warn when using</source>
          <target state="translated">使用時の警告</target>
        </trans-unit>
        <trans-unit id="dd2caf461146fc0c27dbc71c71c4f7aa3908451d" translate="yes" xml:space="preserve">
          <source>Warning: this currently handles C- and C++-Style comments only. The preprocessor does not yet recognize Fortran-style comments.</source>
          <target state="translated">警告:これは現在、CおよびC++スタイルのコメントのみを扱います。プリプロセッサはFortranスタイルのコメントをまだ認識していません。</target>
        </trans-unit>
        <trans-unit id="94ffd48f2b4d962c99d9db25ca293419aa163ad8" translate="yes" xml:space="preserve">
          <source>Warning: this currently handles C-Style comments only. The preprocessor does not yet recognize Fortran-style comments.</source>
          <target state="translated">警告:現在、これは C-Style コメントのみを扱います。プリプロセッサはFortranスタイルのコメントをまだ認識していません。</target>
        </trans-unit>
        <trans-unit id="a2c9d16128d0b0e986193867a02e538ba9edc111" translate="yes" xml:space="preserve">
          <source>Warnings are diagnostic messages that report constructions which are not inherently erroneous but which are risky or suggest there is likely to be a bug in the program. Unless</source>
          <target state="translated">警告は、本質的に誤っているわけではないが、危険な構造を報告する診断メッセージであり、 プログラムにバグがある可能性があることを示唆しています。このような場合は</target>
        </trans-unit>
        <trans-unit id="108fa40e56841a965aacfcbfefc2ec6faafaf150" translate="yes" xml:space="preserve">
          <source>Warns at run time when for passing an actual argument a temporary array had to be generated. The information generated by this warning is sometimes useful in optimization, in order to avoid such temporaries.</source>
          <target state="translated">実際の引数を渡すために一時的な配列が生成されなければならなかった場合、実行時に警告します。この警告によって生成された情報は、このような一時配列を避けるために最適化を行う際に役立つことがあります。</target>
        </trans-unit>
        <trans-unit id="5f670340f4086217d636b58b4a8baf518283a90e" translate="yes" xml:space="preserve">
          <source>What you should know about the GNU Fortran compiler.</source>
          <target state="translated">GNU Fortranコンパイラについて知っておくべきこと。</target>
        </trans-unit>
        <trans-unit id="769bb19e615b7f8e2809e5882e2d05a18f57a531" translate="yes" xml:space="preserve">
          <source>When</source>
          <target state="translated">When</target>
        </trans-unit>
        <trans-unit id="ae8f2c847e82eacb3330824431ecb6760c9c80c7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; is used, then only a token for an allocatable or pointer component is created. The &lt;code&gt;SIZE&lt;/code&gt; parameter is not used then. On the contrary when &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY&lt;/code&gt; is specified, then the &lt;var&gt;token&lt;/var&gt; needs to be registered by a previous call with regtype &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; and either the memory specified in the &lt;var&gt;DESC&lt;/var&gt;&amp;rsquo;s data-ptr is registered or allocate when the data-ptr is &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; が使用され、その後、割り当てまたはポインタ成分についてのみトークンが作成されます。その場合、 &lt;code&gt;SIZE&lt;/code&gt; パラメーターは使用されません。逆に、 &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY&lt;/code&gt; が指定されている場合、 &lt;var&gt;token&lt;/var&gt; はregtype &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; を使用した前回の呼び出しで登録する必要があり、 &lt;var&gt;DESC&lt;/var&gt; のdata-ptrで指定されたメモリが登録されるか、data-ptrが &lt;code&gt;NULL&lt;/code&gt; の場合に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="67560420e909b1895814947ddf8f0aa9a465f756" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; is used, then only a token for an allocatable or pointer component is created. The &lt;code&gt;SIZE&lt;/code&gt; parameter is not used then. On the contrary when &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY&lt;/code&gt; is specified, then the &lt;var&gt;token&lt;/var&gt; needs to be registered by a previous call with regtype &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; and either the memory specified in the &lt;var&gt;desc&lt;/var&gt;&amp;rsquo;s data-ptr is registered or allocate when the data-ptr is NULL.</source>
          <target state="translated">場合 &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; が使用され、その後、割り当てまたはポインタ成分についてのみトークンが作成されます。その場合、 &lt;code&gt;SIZE&lt;/code&gt; パラメータは使用されません。逆に、 &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_ALLOCATE_ONLY&lt;/code&gt; が指定されている場合、 &lt;var&gt;token&lt;/var&gt; は以前の呼び出しでregtype &lt;code&gt;CAF_REGTYPE_COARRAY_ALLOC_REGISTER_ONLY&lt;/code&gt; を使用して登録する必要があり、 &lt;var&gt;desc&lt;/var&gt; のdata-ptrで指定されたメモリが登録されるか、data-ptrがNULLの場合に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="88bded3e15ff0baa725022f73c001015ef1a3188" translate="yes" xml:space="preserve">
          <source>When a serious runtime error is encountered or a deadly signal is emitted (segmentation fault, illegal instruction, bus error, floating-point exception, and the other POSIX signals that have the action &amp;lsquo;</source>
          <target state="translated">深刻なランタイムエラーが発生した場合、または致命的な信号が発生した場合（セグメンテーション違反、不正な命令、バスエラー、浮動小数点例外、およびアクションを持つその他のPOSIX信号 '</target>
        </trans-unit>
        <trans-unit id="d187440d3289a9e0210d93ea0fd013f9512aa25b" translate="yes" xml:space="preserve">
          <source>When converting C to Fortran arrays, the one-dimensional &lt;code&gt;SHAPE&lt;/code&gt; argument has to be passed.</source>
          <target state="translated">CをFortran配列に変換する場合、1次元の &lt;code&gt;SHAPE&lt;/code&gt; 引数を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="c7c4c91617326eaca277c24e11db7d05cc0cbfa1" translate="yes" xml:space="preserve">
          <source>When enabled, floating point numbers of value zero with the sign bit set are written as negative number in formatted output and treated as negative in the &lt;code&gt;SIGN&lt;/code&gt; intrinsic.</source>
          <target state="translated">有効にすると、符号ビットが設定された値0の浮動小数点数は、フォーマットされた出力では負の数として書き込まれ、 &lt;code&gt;SIGN&lt;/code&gt; 組み込み関数では負として扱われます。</target>
        </trans-unit>
        <trans-unit id="eeca1f337fb739872b54dee328f73f93a9e40dfd" translate="yes" xml:space="preserve">
          <source>When front-end optimiztion is active, some calls to the &lt;code&gt;MATMUL&lt;/code&gt; intrinsic function will be inlined. This may result in code size increase if the size of the matrix cannot be determined at compile time, as code for both cases is generated. Setting &lt;code&gt;-finline-matmul-limit=0&lt;/code&gt; will disable inlining in all cases. Setting this option with a value of &lt;var&gt;n&lt;/var&gt; will produce inline code for matrices with size up to &lt;var&gt;n&lt;/var&gt;. If the matrices involved are not square, the size comparison is performed using the geometric mean of the dimensions of the argument and result matrices.</source>
          <target state="translated">フロントエンド最適化がアクティブな場合、 &lt;code&gt;MATMUL&lt;/code&gt; 組み込み関数の一部の呼び出しがインライン化されます。両方の場合のコードが生成されるため、コンパイル時にマトリックスのサイズを決定できない場合、これによりコードサイズが大きくなる可能性があります。設定 &lt;code&gt;-finline-matmul-limit=0&lt;/code&gt; すべてのケースでインライン化が無効になります。このオプションに値 &lt;var&gt;n&lt;/var&gt; を設定すると、最大 &lt;var&gt;n&lt;/var&gt; のサイズの行列のインラインコードが生成されます。関連する行列が正方でない場合、引数と結果の行列の次元の相乗平均を使用してサイズ比較が実行されます。</target>
        </trans-unit>
        <trans-unit id="2766d2d7801570fd9ec5320c58ddadc1590a00ab" translate="yes" xml:space="preserve">
          <source>When opening a file with &lt;code&gt;STATUS='SCRATCH'&lt;/code&gt;, GNU Fortran tries to create the file in one of the potential directories by testing each directory in the order below.</source>
          <target state="translated">&lt;code&gt;STATUS='SCRATCH'&lt;/code&gt; でファイルを開くと、GNU Fortranは、各ディレクトリを以下の順序でテストすることにより、潜在的なディレクトリの1つにファイルを作成しようとします。</target>
        </trans-unit>
        <trans-unit id="11e80ace0193957c244a758d9c902ca08eba49a2" translate="yes" xml:space="preserve">
          <source>When passing an assumed-shape argument of a procedure as actual argument to an assumed-size or explicit size or as argument to a procedure that does not have an explicit interface, the argument may have to be packed, that is put into contiguous memory. An example is the call to &lt;code&gt;foo&lt;/code&gt; in</source>
          <target state="translated">プロシージャの仮定された形状の引数を、仮定されたサイズまたは明示的なサイズへの実際の引数として、または明示的なインターフェイスを持たないプロシージャへの引数として渡す場合、引数をパックする必要があります。つまり、連続したメモリに配置されます。例では、呼び出しです &lt;code&gt;foo&lt;/code&gt; で</target>
        </trans-unit>
        <trans-unit id="a35971e670e07866ae8840e316c8e7d29e3fe47c" translate="yes" xml:space="preserve">
          <source>When running on a platform using the GNU C library (glibc) version 2.16 or older, or a derivative thereof, the high resolution monotonic clock is available only when linking with the &lt;var&gt;rt&lt;/var&gt; library. This can be done explicitly by adding the &lt;code&gt;-lrt&lt;/code&gt; flag when linking the application, but is also done implicitly when using OpenMP.</source>
          <target state="translated">GNU Cライブラリ（glibc）バージョン2.16以前またはその派生物を使用するプラットフォームで実行する場合、高解像度の単調クロックは &lt;var&gt;rt&lt;/var&gt; ライブラリとリンクしている場合にのみ使用できます。これは、アプリケーションをリンクするときに &lt;code&gt;-lrt&lt;/code&gt; フラグを追加することによって明示的に行うことができますが、OpenMPを使用する場合は暗黙的に行われます。</target>
        </trans-unit>
        <trans-unit id="e675ba4e2a9fc9ca692908904940d08356ceb15f" translate="yes" xml:space="preserve">
          <source>When the resulting bit representation does not correspond to a valid representation of a variable of the same type as &lt;var&gt;MOLD&lt;/var&gt;, the results are undefined, and subsequent operations on the result cannot be guaranteed to produce sensible behavior. For example, it is possible to create &lt;code&gt;LOGICAL&lt;/code&gt; variables for which &lt;code&gt;&lt;var&gt;VAR&lt;/var&gt;&lt;/code&gt; and &lt;code&gt;.NOT.&lt;var&gt;VAR&lt;/var&gt;&lt;/code&gt; both appear to be true.</source>
          <target state="translated">結果のビット表現が &lt;var&gt;MOLD&lt;/var&gt; と同じ型の変数の有効な表現に対応していない場合、結果は未定義であり、結果に対する後続の操作が適切な動作を保証することはできません。たとえば、 &lt;code&gt;&lt;var&gt;VAR&lt;/var&gt;&lt;/code&gt; および &lt;code&gt;.NOT.&lt;var&gt;VAR&lt;/var&gt;&lt;/code&gt; &lt;code&gt;LOGICAL&lt;/code&gt; 変数を作成できます。 &lt;var&gt;VAR&lt;/var&gt; はどちらも正しいようです。</target>
        </trans-unit>
        <trans-unit id="a3f056e8af3b672d61e0cf862b2ce71a359bc2ac" translate="yes" xml:space="preserve">
          <source>When writing a namelist, if no &lt;code&gt;DELIM=&lt;/code&gt; is specified, by default a double quote is used to delimit character strings. If -std=F95, F2003, or F2008, etc, the delim status is set to &amp;rsquo;none&amp;rsquo;. Defaulting to quotes ensures that namelists with character strings can be subsequently read back in accurately.</source>
          <target state="translated">&lt;code&gt;DELIM=&lt;/code&gt; リストを書き込むときにDELIM =が指定されていない場合、デフォルトでは、文字列を区切るために二重引用符が使用されます。 -std = F95、F2003、またはF2008などの場合、遅延ステータスは「なし」に設定されます。引用符をデフォルトにすると、文字列を含む名前リストを後で正確に読み戻すことができます。</target>
        </trans-unit>
        <trans-unit id="ba58728ec5ca054abee939a9a3fb572c1d4641e6" translate="yes" xml:space="preserve">
          <source>When you compile a &lt;code&gt;PROGRAM&lt;/code&gt; with GNU Fortran, a function with the name &lt;code&gt;main&lt;/code&gt; (in the symbol table of the object file) is generated, which initializes the libgfortran library and then calls the actual program which uses the name &lt;code&gt;MAIN__&lt;/code&gt;, for historic reasons. If you link GNU Fortran compiled procedures to, e.g., a C or C++ program or to a Fortran program compiled by a different compiler, the libgfortran library is not initialized and thus a few intrinsic procedures do not work properly, e.g. those for obtaining the command-line arguments.</source>
          <target state="translated">GNU Fortranで &lt;code&gt;PROGRAM&lt;/code&gt; をコンパイルすると、（オブジェクトファイルのシンボルテーブルにある） &lt;code&gt;main&lt;/code&gt; という名前の関数が生成されます。これにより、libgfortranライブラリが初期化され、歴史的な理由により、名前 &lt;code&gt;MAIN__&lt;/code&gt; を使用する実際のプログラムが呼び出されます。GNU Fortranコンパイル済みプロシージャを、たとえばCまたはC ++プログラム、または別のコンパイラーによってコンパイルされたFortranプログラムにリンクすると、libgfortranライブラリは初期化されないため、コマンドを取得するための組み込みプロシージャなど、適切に機能しません。 -line引数。</target>
        </trans-unit>
        <trans-unit id="f2750398741b2f11290cbd685e177851d8fb5c1c" translate="yes" xml:space="preserve">
          <source>Where &lt;em&gt;cc&lt;/em&gt; is a character expression that evaluates to one of the following values:</source>
          <target state="translated">どこ&lt;em&gt;CCは、&lt;/em&gt;文字式は、その次のいずれかの値に評価されます。</target>
        </trans-unit>
        <trans-unit id="6c7de8024b3cfabcef4a35c5b7edc7a021aa8dea" translate="yes" xml:space="preserve">
          <source>Where &lt;em&gt;sh&lt;/em&gt; in the first form is a character expression that evaluates to a value as seen in the table below. The latter two forms are aliases for particular values of &lt;em&gt;sh&lt;/em&gt;:</source>
          <target state="translated">ここで&lt;em&gt;SH&lt;/em&gt;最初の形態では、値に評価を下記の表に見られるようにその文字表現です。後者の2つの形式は、&lt;em&gt;shの&lt;/em&gt;特定の値のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="4791bac408596c8470b374c7662725fdf31ff5e8" translate="yes" xml:space="preserve">
          <source>Where to find module files</source>
          <target state="translated">モジュールファイルの場所</target>
        </trans-unit>
        <trans-unit id="8485a0cf529dc17b7cfbe99570f8d806cd3e66d5" translate="yes" xml:space="preserve">
          <source>Whether a unit is a terminal device</source>
          <target state="translated">ユニットが端末装置であるかどうか</target>
        </trans-unit>
        <trans-unit id="35defbb7af16014ebb90d057f80d80681233aa89" translate="yes" xml:space="preserve">
          <source>While CPP is the de-facto standard for preprocessing Fortran code, Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines Conditional Compilation, which is not widely used and not directly supported by the GNU Fortran compiler. You can use the program coco to preprocess such files (&lt;a href=&quot;http://www.daniellnagle.com/coco.html&quot;&gt;http://www.daniellnagle.com/coco.html&lt;/a&gt;).</source>
          <target state="translated">CPPはFortranコードを前処理するための事実上の標準ですが、Fortran 95標準（ISO / IEC 1539-3：1998）のパート3は、広く使用されておらず、GNU Fortranコンパイラーによって直接サポートされない条件付きコンパイルを定義します。プログラムcocoを使用して、このようなファイルを前処理できます（&lt;a href=&quot;http://www.daniellnagle.com/coco.html&quot;&gt;http://www.daniellnagle.com/coco.html&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="44465ca1745e5c89ef858bdcaf96f5ad6660cc0e" translate="yes" xml:space="preserve">
          <source>While the rules permit in principle an intrinsic function, none of the intrinsics in the standard fulfill the criteria of having a specific function, which takes two arguments of the same type and returning that type as result.</source>
          <target state="translated">規則では原則として本質的な関数を許可していますが、標準の本質的な関数は、同じ型の2つの引数を取り、その型を結果として返す特定の関数を持つという基準を満たしていません。</target>
        </trans-unit>
        <trans-unit id="e9b230703e30bf49ec651c144023967c8c1427a1" translate="yes" xml:space="preserve">
          <source>Why we chose to start from scratch.</source>
          <target state="translated">ゼロからのスタートを選んだ理由</target>
        </trans-unit>
        <trans-unit id="564f8c6e76fbd512be2e38dabdfdd61550d0c3cc" translate="yes" xml:space="preserve">
          <source>With</source>
          <target state="translated">With</target>
        </trans-unit>
        <trans-unit id="97578212676930534c49ede2c08cfc8bb97a541e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;CARRIAGECONTROL='FORTRAN'&lt;/code&gt;, when a record is written, the first character of the input record is not written, and instead determines the output record separator as follows:</source>
          <target state="translated">&lt;code&gt;CARRIAGECONTROL='FORTRAN'&lt;/code&gt; レコードが書き込まれ、入力レコードの最初の文字が書かれ、その代わりに次のように出力レコードセパレータを決定していません。</target>
        </trans-unit>
        <trans-unit id="0dabf0d0b5e9adcedd79c3fc95b6d7f5d6bae542" translate="yes" xml:space="preserve">
          <source>With respect to consistency, for regular files GNU Fortran uses buffered I/O in order to improve performance. This buffer is flushed automatically when full and in some other situations, e.g. when closing a unit. It can also be explicitly flushed with the &lt;code&gt;FLUSH&lt;/code&gt; statement. Also, the buffering can be turned off with the &lt;code&gt;GFORTRAN_UNBUFFERED_ALL&lt;/code&gt; and &lt;code&gt;GFORTRAN_UNBUFFERED_PRECONNECTED&lt;/code&gt; environment variables. Special files, such as terminals and pipes, are always unbuffered. Sometimes, however, further things may need to be done in order to allow other processes to see data that GNU Fortran has written, as follows.</source>
          <target state="translated">一貫性に関して、通常のファイルの場合、GNU Fortranはパフォーマンスを改善するためにバッファードI / Oを使用します。このバッファは、いっぱいになったとき、およびユニットを閉じるときなど、他の状況では自動的にフラッシュされます。また、 &lt;code&gt;FLUSH&lt;/code&gt; ステートメントで明示的にフラッシュすることもできます。また、 &lt;code&gt;GFORTRAN_UNBUFFERED_ALL&lt;/code&gt; および &lt;code&gt;GFORTRAN_UNBUFFERED_PRECONNECTED&lt;/code&gt; 環境変数を使用して、バッファリングをオフにすることもできます。端末やパイプなどの特別なファイルは常にバッファリングされません。ただし、次のように、GNU Fortranが書き込んだデータを他のプロセスが参照できるようにするために、さらに処理が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="ecf2fd597a2a6a9d6edc2945801575d8aeebc586" translate="yes" xml:space="preserve">
          <source>With respect to durability, GNU Fortran makes no effort to ensure that data is committed to stable storage. If this is required, the GNU Fortran programmer can use the intrinsic &lt;code&gt;FNUM&lt;/code&gt; to retrieve the low level file descriptor corresponding to an open Fortran unit. Then, using e.g. the &lt;code&gt;ISO_C_BINDING&lt;/code&gt; feature, one can call the underlying system call to flush dirty data to stable storage, such as &lt;code&gt;fsync&lt;/code&gt; on POSIX, &lt;code&gt;_commit&lt;/code&gt; on MingW, or &lt;code&gt;fcntl(fd,
F_FULLSYNC, 0)&lt;/code&gt; on Mac OS X. The following example shows how to call fsync:</source>
          <target state="translated">耐久性に関しては、GNU Fortranは、データが安定したストレージに確実にコミットされるように努力しません。これが必要な場合、GNU Fortranプログラマーは、組み込みの &lt;code&gt;FNUM&lt;/code&gt; を使用して、開いているFortranユニットに対応する低レベルのファイル記述子を取得できます。その後、例えば使用 &lt;code&gt;ISO_C_BINDING&lt;/code&gt; の機能を一つのような安定したストレージにフラッシュダーティデータの基礎となるシステム・コールを呼び出すことができ &lt;code&gt;fsync&lt;/code&gt; POSIXに、 &lt;code&gt;_commit&lt;/code&gt; mingwの上に、または &lt;code&gt;fcntl(fd, F_FULLSYNC, 0)&lt;/code&gt; のMac OS Xの次の例ではfsyncを呼び出す方法を示します。</target>
        </trans-unit>
        <trans-unit id="d4565f8f86a38c3e14bd51ab8867add7e5bdca13" translate="yes" xml:space="preserve">
          <source>Write a single character in stream mode</source>
          <target state="translated">ストリームモードで1文字を書き込む</target>
        </trans-unit>
        <trans-unit id="0c7aacd737c85b4482ea60464b1e5483a7f859f6" translate="yes" xml:space="preserve">
          <source>Write a single character in stream mode by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.</source>
          <target state="translated">通常のフォーマットされた出力をバイパスして、ストリームモードで1文字を書き込む。ストリームI/Oは、同じユニット上の通常のレコード指向(フォーマットされたまたはフォーマットされていない)I/Oと混合してはいけません;結果は予測できません。</target>
        </trans-unit>
        <trans-unit id="2ae30dab9123b514da2987353a722881cdcb9b99" translate="yes" xml:space="preserve">
          <source>Write a single character in stream mode to stdout</source>
          <target state="translated">ストリームモードで標準出力に1文字を書き込む</target>
        </trans-unit>
        <trans-unit id="ae7b54f04eb7530a2b1812a63e469e3d486eba7f" translate="yes" xml:space="preserve">
          <source>Write a single character in stream mode to stdout by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable.</source>
          <target state="translated">通常のフォーマットされた出力をバイパスして、ストリームモードで1文字を標準出力に書き込む。ストリームI/Oは、同じユニット上の通常のレコード指向(フォーマットされたまたはフォーマットされていない)I/Oと混合してはいけません;結果は予測できません。</target>
        </trans-unit>
        <trans-unit id="23eb4d3f4155395a74e9d534f97ff4c1908f5aac" translate="yes" xml:space="preserve">
          <source>Y</source>
          <target state="translated">Y</target>
        </trans-unit>
        <trans-unit id="6c48174bf9be34e46b8e987347f290f90c99d38c" translate="yes" xml:space="preserve">
          <source>Years since 1900</source>
          <target state="translated">1900年からの年月</target>
        </trans-unit>
        <trans-unit id="111fe75a8c4e18020ec4499e010fa687af13b495" translate="yes" xml:space="preserve">
          <source>You can compile Fortran, C, or other programs.</source>
          <target state="translated">FortranやCなどのプログラムをコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="6dd4909e8fc25b70ebd4942296a6f09a42e2b499" translate="yes" xml:space="preserve">
          <source>You can request many specific warnings with options beginning</source>
          <target state="translated">で始まるオプションで、多くの特定の警告を要求することができます。</target>
        </trans-unit>
        <trans-unit id="3e9f14dd6998edf466db38fdc1b1ab851d13c7e5" translate="yes" xml:space="preserve">
          <source>You can use this directive to control how many times a loop should be unrolled. It must be placed immediately before a &lt;code&gt;DO&lt;/code&gt; loop and applies only to the loop that follows. N is an integer constant specifying the unrolling factor. The values of 0 and 1 block any unrolling of the loop.</source>
          <target state="translated">このディレクティブを使用して、ループを展開する回数を制御できます。 &lt;code&gt;DO&lt;/code&gt; ループの直前に配置する必要があり、後続のループにのみ適用されます。Nは、展開係数を指定する整数定数です。0と1の値は、ループの展開をブロックします。</target>
        </trans-unit>
        <trans-unit id="f747c1351f871bcd60a180b905c92b44750331fe" translate="yes" xml:space="preserve">
          <source>You can use this directive to define which middle-end built-ins provide vector implementations. &lt;code&gt;B&lt;/code&gt; is name of the middle-end built-in. &lt;code&gt;FLAGS&lt;/code&gt; are optional and must be either &quot;(inbranch)&quot; or &quot;(notinbranch)&quot;. &lt;code&gt;IF&lt;/code&gt; statement is optional and is used to filter multilib ABIs for the built-in that should be vectorized. Example usage:</source>
          <target state="translated">このディレクティブを使用して、どのミドルエンドビルトインがベクター実装を提供するかを定義できます。 &lt;code&gt;B&lt;/code&gt; はミドルエンドビルトインの名前です。 &lt;code&gt;FLAGS&lt;/code&gt; はオプションであり、「（inbranch）」または「（notinbranch）」のいずれかである必要があります。 &lt;code&gt;IF&lt;/code&gt; ステートメントはオプションであり、ベクトル化する必要のある組み込みのmultilibABIをフィルター処理するために使用されます。使用例：</target>
        </trans-unit>
        <trans-unit id="5a83a0c884ced5b1afbf8e0b73de9c85e4e8c7bb" translate="yes" xml:space="preserve">
          <source>You should be prepared for side effects when using</source>
          <target state="translated">を使用する際には、副作用を覚悟しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="b09ae3d62baa1b83765b926b94bd6ef475f9f741" translate="yes" xml:space="preserve">
          <source>[Function] The kind type parameter is that of &lt;code&gt;pid&lt;/code&gt;. Returns 0 on success; otherwise a system-specific error code is returned.</source>
          <target state="translated">【機能】 &lt;code&gt;pid&lt;/code&gt; パラメータはpidのパラメータです。成功すると0を返します。それ以外の場合は、システム固有のエラーコードが返されます。</target>
        </trans-unit>
        <trans-unit id="d3a12c2833904d981c45e7a3ab4d30ccefa492e9" translate="yes" xml:space="preserve">
          <source>[Subroutine](Optional) Shall be a scalar &lt;code&gt;INTEGER&lt;/code&gt;. Returns 0 on success; otherwise a system-specific error code is returned.</source>
          <target state="translated">[サブルーチン]（オプション）スカラー &lt;code&gt;INTEGER&lt;/code&gt; である必要があります。成功すると0を返します。それ以外の場合は、システム固有のエラーコードが返されます。</target>
        </trans-unit>
        <trans-unit id="80bcc8b02cd875c9c7b9dc9e6159a6cd886a4b36" translate="yes" xml:space="preserve">
          <source>\e</source>
          <target state="translated">\e</target>
        </trans-unit>
        <trans-unit id="c0f3cda9e4344c2a7bab365b583714e3ced4d0ef" translate="yes" xml:space="preserve">
          <source>a scalar integer expression. It shall have the same the same value on all images and refer to an image of the current team.</source>
          <target state="translated">スカラー整数式。すべての画像で同じ値を持ち、現在のチームの画像を参照するものとする。</target>
        </trans-unit>
        <trans-unit id="8f1dba76b561684930a25a984046b3b4149785ca" translate="yes" xml:space="preserve">
          <source>alert</source>
          <target state="translated">alert</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="e77bd9716ede992358114f3a902f3355d112cb37" translate="yes" xml:space="preserve">
          <source>allocatable arrays</source>
          <target state="translated">割り付け可能配列</target>
        </trans-unit>
        <trans-unit id="62633185507778aceb37987eb1cc91a21a879a8f" translate="yes" xml:space="preserve">
          <source>allows both without warning. The special compile flag</source>
          <target state="translated">は警告なしで両方を許可します。特別なコンパイルフラグ</target>
        </trans-unit>
        <trans-unit id="1f5b3f613766aaf918a69780de4c9798b47580fe" translate="yes" xml:space="preserve">
          <source>allows direct specification of user-defined names while debugging and when interfacing GNU Fortran code with other languages.</source>
          <target state="translated">デバッグ中やGNU Fortranコードを他の言語と連動させる際に、ユーザ定義の名前を直接指定することができます。</target>
        </trans-unit>
        <trans-unit id="b094bd4b93be6eefd9deabac603a3ffc8863916f" translate="yes" xml:space="preserve">
          <source>allows the compiler to accept both types of extensions, but to warn about the use of the latter. Specifying either</source>
          <target state="translated">を指定すると、コンパイラは両方のタイプの拡張機能を受け入れることができますが、後者の拡張機能の使用を警告します。どちらかを指定すると</target>
        </trans-unit>
        <trans-unit id="307d1e360bd70b68e619ab4409229ef6381f25fd" translate="yes" xml:space="preserve">
          <source>allows the compiler to reorder &lt;code&gt;REAL&lt;/code&gt; and &lt;code&gt;COMPLEX&lt;/code&gt; expressions to produce faster code. Note that for the re-association optimization</source>
          <target state="translated">コンパイラが &lt;code&gt;REAL&lt;/code&gt; および &lt;code&gt;COMPLEX&lt;/code&gt; 式を並べ替えて、より高速なコードを生成できるようにします。再関連付けの最適化については、</target>
        </trans-unit>
        <trans-unit id="40bc64f32f3759cd80b03c592116e7e3e45028dc" translate="yes" xml:space="preserve">
          <source>also applies to C-language constructs where they occur in GNU Fortran source files, such as use of &amp;lsquo;</source>
          <target state="translated">'の使用など、GNU Fortranソースファイルで発生するC言語構成にも適用されます。</target>
        </trans-unit>
        <trans-unit id="f34eaf4f6ae89eb9588e134559245afad4e138e4" translate="yes" xml:space="preserve">
          <source>also sets</source>
          <target state="translated">もセットになっています。</target>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="462e6102c017b6efc429cc5adc75f57c58251ea7" translate="yes" xml:space="preserve">
          <source>and &lt;code&gt;INCLUDE&lt;/code&gt; is pretty much the same as of</source>
          <target state="translated">そして &lt;code&gt;INCLUDE&lt;/code&gt; ほとんど同じのようです</target>
        </trans-unit>
        <trans-unit id="292980597e557a10217b5691febcadb9d213adb8" translate="yes" xml:space="preserve">
          <source>and before the standard system directories. If &lt;var&gt;dir&lt;/var&gt; begins with &lt;code&gt;=&lt;/code&gt;, then the &lt;code&gt;=&lt;/code&gt; will be replaced by the sysroot prefix; see</source>
          <target state="translated">標準システムディレクトリの前。 &lt;var&gt;dir&lt;/var&gt; が &lt;code&gt;=&lt;/code&gt; で始まる場合、 &lt;code&gt;=&lt;/code&gt; はsysrootプレフィックスに置き換えられます。見る</target>
        </trans-unit>
        <trans-unit id="fe615c5a045e9786f613b25d6db6e8a3a153cd9f" translate="yes" xml:space="preserve">
          <source>and the standard system directories have been exhausted. &lt;var&gt;dir&lt;/var&gt; is treated as a system include directory. If dir begins with &lt;code&gt;=&lt;/code&gt;, then the &lt;code&gt;=&lt;/code&gt; will be replaced by the sysroot prefix; see</source>
          <target state="translated">標準のシステムディレクトリがすべて使用されています。 &lt;var&gt;dir&lt;/var&gt; はシステムインクルードディレクトリとして扱われます。dirが &lt;code&gt;=&lt;/code&gt; で始まる場合、 &lt;code&gt;=&lt;/code&gt; はsysrootプレフィックスに置き換えられます。見る</target>
        </trans-unit>
        <trans-unit id="279e1d014cf4abebcae795334732a0d437d5eaee" translate="yes" xml:space="preserve">
          <source>are fulfillable</source>
          <target state="translated">充足性がある</target>
        </trans-unit>
        <trans-unit id="c162e6f931b76a039cade52319fa62f5f59d5ac4" translate="yes" xml:space="preserve">
          <source>are unset, then</source>
          <target state="translated">がセットされていない場合は</target>
        </trans-unit>
        <trans-unit id="f90b354e1ad05f2cbdb06191a417c252a8ef06d9" translate="yes" xml:space="preserve">
          <source>array-temps</source>
          <target state="translated">array-temps</target>
        </trans-unit>
        <trans-unit id="701c2ff3eb348e7426c8e05b63b0c9f609bb4ed2" translate="yes" xml:space="preserve">
          <source>as a shared and a static library, this option forces the use of the static version. If no shared version of</source>
          <target state="translated">を共有ライブラリと静的ライブラリとして使用する場合、このオプションは静的バージョンを強制的に使用します。の共有バージョンがない場合、このオプションは静的バージョンを強制的に使用します。</target>
        </trans-unit>
        <trans-unit id="4930eb3f60df3a6a61e8d44178feb2b8f820a153" translate="yes" xml:space="preserve">
          <source>backspace</source>
          <target state="translated">backspace</target>
        </trans-unit>
        <trans-unit id="38e4f23119f7668c81c56c877acdc10f397299d2" translate="yes" xml:space="preserve">
          <source>big-endian</source>
          <target state="translated">big-endian</target>
        </trans-unit>
        <trans-unit id="0569ae912e387dbc988dee842bf17cdd4e437f63" translate="yes" xml:space="preserve">
          <source>bits</source>
          <target state="translated">bits</target>
        </trans-unit>
        <trans-unit id="94ae97ff8e7caaef3f4646cca3cdf56f523b799b" translate="yes" xml:space="preserve">
          <source>bounds</source>
          <target state="translated">bounds</target>
        </trans-unit>
        <trans-unit id="188ee8a2f10ca3a55acd9ea49e80b28725f4f691" translate="yes" xml:space="preserve">
          <source>but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If &lt;var&gt;dir&lt;/var&gt; begins with &lt;code&gt;=&lt;/code&gt;, then the &lt;code&gt;=&lt;/code&gt; will be replaced by the sysroot prefix; see</source>
          <target state="translated">ただし、標準のシステムディレクトリの前。これをシステムディレクトリとしてマークすると、標準のシステムディレクトリに適用されるのと同じ特別な扱いを受けます。 &lt;var&gt;dir&lt;/var&gt; が &lt;code&gt;=&lt;/code&gt; で始まる場合、 &lt;code&gt;=&lt;/code&gt; はsysrootプレフィックスに置き換えられます。見る</target>
        </trans-unit>
        <trans-unit id="ebb9c7c867d883ff5141789956a5ef40c338d9bf" translate="yes" xml:space="preserve">
          <source>calling conventions as, calling &lt;code&gt;COMPLEX&lt;/code&gt; or default &lt;code&gt;REAL&lt;/code&gt; functions between program parts which were compiled with different calling conventions will break at execution time.</source>
          <target state="translated">呼び出し規約として、異なる呼び出し規約でコンパイルされたプログラム部分間で &lt;code&gt;COMPLEX&lt;/code&gt; またはデフォルトの &lt;code&gt;REAL&lt;/code&gt; 関数を呼び出すと、実行時に中断します。</target>
        </trans-unit>
        <trans-unit id="155492bae6631e20781be78071bc152b6d8f9cf8" translate="yes" xml:space="preserve">
          <source>calling conventions.</source>
          <target state="translated">呼び出し規約。</target>
        </trans-unit>
        <trans-unit id="0ba7cfd7085a8bbf209947aafdb4a7809cf36c85" translate="yes" xml:space="preserve">
          <source>can be of any type</source>
          <target state="translated">如何なるものでも良い</target>
        </trans-unit>
        <trans-unit id="53beda948658ffb5ab31db86eab25bf5510c8780" translate="yes" xml:space="preserve">
          <source>can be used to disable automatic alignment. The same form of this option should be used for all files that share a &lt;code&gt;COMMON&lt;/code&gt; block. To avoid potential alignment issues in &lt;code&gt;COMMON&lt;/code&gt; blocks, it is recommended to order objects from largest to smallest.</source>
          <target state="translated">自動整列を無効にするために使用できます。このオプションと同じ形式を、 &lt;code&gt;COMMON&lt;/code&gt; ブロックを共有するすべてのファイルに使用する必要があります。 &lt;code&gt;COMMON&lt;/code&gt; ブロックでの潜在的な整列の問題を回避するために、オブジェクトを最大のものから最小のものの順に並べることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ccf724a55479e15f28ad8abcfb71e0079d794123" translate="yes" xml:space="preserve">
          <source>can be used to never trigger this behavior and always link to the intrinsic regardless of the selected standard.</source>
          <target state="translated">を使用すると、この動作をトリガせず、選択された標準に関係なく常に本質にリンクすることができます。</target>
        </trans-unit>
        <trans-unit id="45d7ff0a6ad7e73b5bef8ff8fc4ce39dd5dd1f46" translate="yes" xml:space="preserve">
          <source>can be used to prevent this. The kind of real constants like &lt;code&gt;1.d0&lt;/code&gt; will not be changed by</source>
          <target state="translated">これを防ぐために使用できます。 &lt;code&gt;1.d0&lt;/code&gt; のような実際の定数の種類は、</target>
        </trans-unit>
        <trans-unit id="6e9f192b79a14968d26f70ab1aa8e21b65e3df64" translate="yes" xml:space="preserve">
          <source>carriage return</source>
          <target state="translated">キャリッジリターン</target>
        </trans-unit>
        <trans-unit id="80b50fe0872299d1f4bb06454839f9fee15d937e" translate="yes" xml:space="preserve">
          <source>compile flag. If you have a choice, you should instead use Fortran 90&amp;rsquo;s &amp;ldquo;derived types&amp;rdquo;, which have a different syntax.</source>
          <target state="translated">コンパイルフラグ。選択肢がある場合は、代わりに構文が異なるFortran 90の「派生型」を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="11e041a9bab9c284eb7a06bcf02197a4245d640d" translate="yes" xml:space="preserve">
          <source>compile option was used.</source>
          <target state="translated">コンパイルオプションが使用されていました。</target>
        </trans-unit>
        <trans-unit id="725ff60a58db4873feed67e0e19b5f49ef4d936b" translate="yes" xml:space="preserve">
          <source>compile options.</source>
          <target state="translated">コンパイルオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="6d5c9dab960e525ed112945029e61215d50dbc52" translate="yes" xml:space="preserve">
          <source>complement</source>
          <target state="translated">complement</target>
        </trans-unit>
        <trans-unit id="a145496a160f0c990a2ba77072b2813a8d1d3095" translate="yes" xml:space="preserve">
          <source>complement of exclusive or</source>
          <target state="translated">排他的補語</target>
        </trans-unit>
        <trans-unit id="94a0426e8d3203da5468ccf0c624f93cb37601e2" translate="yes" xml:space="preserve">
          <source>core</source>
          <target state="translated">core</target>
        </trans-unit>
        <trans-unit id="08702c35c20b1e6b02956f50b2b6be9b1f59559b" translate="yes" xml:space="preserve">
          <source>dD</source>
          <target state="translated">dD</target>
        </trans-unit>
        <trans-unit id="09f4b2adfa8ab11737d7e6446fe87db9cdad1ed9" translate="yes" xml:space="preserve">
          <source>default integer rank-1 array of a size equal to the corank of &lt;var&gt;COARRAY&lt;/var&gt;.</source>
          <target state="translated">COARRAYの &lt;var&gt;COARRAY&lt;/var&gt; 等しいサイズのデフォルトの整数ランク1配列。</target>
        </trans-unit>
        <trans-unit id="8910a4fc750141e3933a3e7d21cbc111c5a9aa05" translate="yes" xml:space="preserve">
          <source>default integer scalar (optional). If present, &lt;var&gt;DIM&lt;/var&gt; shall be between one and the corank of &lt;var&gt;COARRAY&lt;/var&gt;.</source>
          <target state="translated">デフォルトの整数スカラー（オプション）。存在する場合、 &lt;var&gt;DIM&lt;/var&gt; は1とCOARRAYの &lt;var&gt;COARRAY&lt;/var&gt; 間でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5610fa253c9ebb20d865092429beef7dcace7f0b" translate="yes" xml:space="preserve">
          <source>define the corresponding C prototype as follows:</source>
          <target state="translated">対応するCプロトタイプを以下のように定義します。</target>
        </trans-unit>
        <trans-unit id="0fcd775c9c66c394d7cc47116dfc0df06082e8f9" translate="yes" xml:space="preserve">
          <source>denormal</source>
          <target state="translated">denormal</target>
        </trans-unit>
        <trans-unit id="384cccd1da3089fa8cc9d67e9123633665ca5e87" translate="yes" xml:space="preserve">
          <source>disables both types of extensions, and</source>
          <target state="translated">両方のタイプの拡張機能を無効にし</target>
        </trans-unit>
        <trans-unit id="b7aa8f1c66cb1264d85616aec76821fc3ff00e0b" translate="yes" xml:space="preserve">
          <source>disables it if it was activated by a previous specification.</source>
          <target state="translated">以前の仕様で有効化されていた場合は無効化します。</target>
        </trans-unit>
        <trans-unit id="eadcd9bd2a09c75aef04954e6799e50278ee124a" translate="yes" xml:space="preserve">
          <source>do</source>
          <target state="translated">do</target>
        </trans-unit>
        <trans-unit id="309ebc44023886ea3f59fbc3403a90cbc6a0c62f" translate="yes" xml:space="preserve">
          <source>does not affect it.</source>
          <target state="translated">は影響しません。</target>
        </trans-unit>
        <trans-unit id="3d3e15e2be429ba7d9009b3b7776254e4b47a296" translate="yes" xml:space="preserve">
          <source>does not print the negative sign of zero values (or values rounded to zero for I/O) and regards zero as positive number in the &lt;code&gt;SIGN&lt;/code&gt; intrinsic for compatibility with Fortran 77. The default is</source>
          <target state="translated">ゼロ値（またはI / Oの場合はゼロに丸められた値）の負符号を出力せず、Fortran 77との互換性のために &lt;code&gt;SIGN&lt;/code&gt; 組み込み関数でゼロを正数と見なします。デフォルトは</target>
        </trans-unit>
        <trans-unit id="66e88d0cc4f406250069737b8bc68e800a009817" translate="yes" xml:space="preserve">
          <source>during the linking step.</source>
          <target state="translated">リンクステップの間に</target>
        </trans-unit>
        <trans-unit id="016da978ce5f23a177543b5e3d96bbc5b9004fcb" translate="yes" xml:space="preserve">
          <source>elimination of identical function calls within expressions,</source>
          <target state="translated">式内での同一の関数呼び出しの排除</target>
        </trans-unit>
        <trans-unit id="61c4d33bfa297438229056e5bc5fd2d834fdc945" translate="yes" xml:space="preserve">
          <source>enables additional compatibility extensions along with those enabled by</source>
          <target state="translated">で有効になっているものに加えて、追加の互換性拡張が可能になります。</target>
        </trans-unit>
        <trans-unit id="30e425d1c4938905cafa6a9ccc95d9145b90381d" translate="yes" xml:space="preserve">
          <source>enables the &lt;a href=&quot;cotan#COTAN&quot;&gt;COTAN&lt;/a&gt; intrinsic, and trigonometric intrinsics which accept or produce values in degrees instead of radians. Here is a summary of the new intrinsics:</source>
          <target state="translated">&lt;a href=&quot;cotan#COTAN&quot;&gt;COTAN&lt;/a&gt;組み込み関数、およびラジアンの代わりに度単位の値を受け入れるまたは生成する三角関数組み込み関数を有効にします。以下は、新しい組み込み関数の要約です。</target>
        </trans-unit>
        <trans-unit id="cd86d7d19b20b55735eac175826a31a3ec2f4e06" translate="yes" xml:space="preserve">
          <source>except in two respects: it does not include the predefined macros, and it outputs both the &lt;code&gt;#define&lt;/code&gt; directives and the result of preprocessing. Both kinds of output go to the standard output file.</source>
          <target state="translated">2つの点を除いて：事前定義されたマクロが含まれておらず、 &lt;code&gt;#define&lt;/code&gt; ディレクティブと前処理の結果の両方を出力します。どちらの種類の出力も標準出力ファイルに送られます。</target>
        </trans-unit>
        <trans-unit id="e70fcdf9170ecc89eefcbc7fa642a563ae39722e" translate="yes" xml:space="preserve">
          <source>except that only macros that are expanded, or whose definedness is tested in preprocessor directives, are output; the output is delayed until the use or test of the macro; and &lt;code&gt;'#undef'&lt;/code&gt; directives are also output for macros tested but undefined at the time.</source>
          <target state="translated">ただし、展開されたマクロ、またはプリプロセッサディレクティブで定義がテストされたマクロのみが出力されます。出力は、マクロの使用またはテストまで遅延されます。と &lt;code&gt;'#undef'&lt;/code&gt; ディレクティブは、テストされたが未定義のマクロに対しても出力されます。</target>
        </trans-unit>
        <trans-unit id="2935217b8f0d832c64304c27e48cf1504494e46e" translate="yes" xml:space="preserve">
          <source>exclusive or</source>
          <target state="translated">専有的</target>
        </trans-unit>
        <trans-unit id="7532ab0484812d9733fa29e0282123a8e828146f" translate="yes" xml:space="preserve">
          <source>extension are also run through preprocessing.</source>
          <target state="translated">拡張子も前処理を経て実行されます。</target>
        </trans-unit>
        <trans-unit id="2fe3532a6dc9049685bd1aa545e3adedf8f01067" translate="yes" xml:space="preserve">
          <source>extensions are treated as fixed form. Source files with</source>
          <target state="translated">拡張子は固定形式として扱われます。拡張子が</target>
        </trans-unit>
        <trans-unit id="1221fc936dfb7f80572f110e231a5f4fdcbabb06" translate="yes" xml:space="preserve">
          <source>extensions are treated as free form. The capitalized versions of either form are run through preprocessing. Source files with the lower case</source>
          <target state="translated">拡張子は自由形として扱われます。いずれかの形式の大文字のバージョンは、前処理で実行されます。小文字の</target>
        </trans-unit>
        <trans-unit id="3b6dbce3c28e8958016b1367d18e1b647fc90c18" translate="yes" xml:space="preserve">
          <source>extensions as Fortran source code, and compile it accordingly. A &lt;code&gt;gfortran&lt;/code&gt; driver program is also provided, which is identical to &lt;code&gt;gcc&lt;/code&gt; except that it automatically links the Fortran runtime libraries into the compiled program.</source>
          <target state="translated">Fortranソースコードとしての拡張機能、およびそれに応じたコンパイル。 &lt;code&gt;gfortran&lt;/code&gt; ドライバプログラムも同じですが提供される &lt;code&gt;gcc&lt;/code&gt; のそれは自動的にコンパイルされたプログラムにFortranのランタイムライブラリをリンクすることを除いて。</target>
        </trans-unit>
        <trans-unit id="f860431e8f0c3d87c15448f01b23bae1fd07eeae" translate="yes" xml:space="preserve">
          <source>f2003</source>
          <target state="translated">f2003</target>
        </trans-unit>
        <trans-unit id="7c5cdf6f9cb2427be7c07c63dfe25e61f4f80ae7" translate="yes" xml:space="preserve">
          <source>f2008</source>
          <target state="translated">f2008</target>
        </trans-unit>
        <trans-unit id="4a7d0cf549ae5bbfe745d9d0aa6b41e4b556a3d7" translate="yes" xml:space="preserve">
          <source>f2018</source>
          <target state="translated">f2018</target>
        </trans-unit>
        <trans-unit id="26275c768e377b0d50c55c5828e7fd8bf70c44ca" translate="yes" xml:space="preserve">
          <source>f77, gnu</source>
          <target state="translated">F77、GNU</target>
        </trans-unit>
        <trans-unit id="a5576455cb5f0024ec37f8307e138df17eecc413" translate="yes" xml:space="preserve">
          <source>f95</source>
          <target state="translated">f95</target>
        </trans-unit>
        <trans-unit id="42c37e11cecc411fd563a9b8bd87322962f195a3" translate="yes" xml:space="preserve">
          <source>f95, gnu</source>
          <target state="translated">f95,gnu</target>
        </trans-unit>
        <trans-unit id="a4d41b154a214defec5ed9b013895d21989d8cf2" translate="yes" xml:space="preserve">
          <source>files and other such things.</source>
          <target state="translated">のファイルなどがあります。</target>
        </trans-unit>
        <trans-unit id="e677ffdbb391e44728ea8e698e026741ec3283c1" translate="yes" xml:space="preserve">
          <source>files for compiled modules. It is also added to the list of directories to searched by an &lt;code&gt;USE&lt;/code&gt; statement.</source>
          <target state="translated">コンパイルされたモジュールのファイル。また、 &lt;code&gt;USE&lt;/code&gt; ステートメントによって検索されるディレクトリのリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="80090814aeb95110019f1c0b128d2837019fefb0" translate="yes" xml:space="preserve">
          <source>files when previously compiled modules are required by a &lt;code&gt;USE&lt;/code&gt; statement.</source>
          <target state="translated">以前にコンパイルされたモジュールが &lt;code&gt;USE&lt;/code&gt; ステートメントで必要な場合のファイル。</target>
        </trans-unit>
        <trans-unit id="c8091331f7fa59c4253e1f30ce7b111c70e8ce6d" translate="yes" xml:space="preserve">
          <source>flag and experimental support for multiple images with the</source>
          <target state="translated">フラグと、実験的に</target>
        </trans-unit>
        <trans-unit id="a77d55c00e1bb084c2e9eb99f2d962433de325e7" translate="yes" xml:space="preserve">
          <source>flag is present in the command line, this option has no effect, since no &lt;code&gt;#line&lt;/code&gt; directives are emitted whatsoever.</source>
          <target state="translated">フラグがコマンドラインに存在する場合、このオプションは効果がありません。 &lt;code&gt;#line&lt;/code&gt; line ディレクティブはまったく出力されないためです。</target>
        </trans-unit>
        <trans-unit id="834427f82fddf40fa83fb85bab98bdc1e308071c" translate="yes" xml:space="preserve">
          <source>flag will be treated as described above with</source>
          <target state="translated">フラグは上記のように</target>
        </trans-unit>
        <trans-unit id="964992a57d111bb0865d708e942f8599f79c480d" translate="yes" xml:space="preserve">
          <source>flag.</source>
          <target state="translated">flag.</target>
        </trans-unit>
        <trans-unit id="d6032db772960f71d51d4e8867565ae351e5755c" translate="yes" xml:space="preserve">
          <source>foo.f90</source>
          <target state="translated">foo.f90</target>
        </trans-unit>
        <trans-unit id="0fe82926165e5182b9b802441f71648ba07fbc6c" translate="yes" xml:space="preserve">
          <source>for a description of the exceptions.)</source>
          <target state="translated">を参照してください)。</target>
        </trans-unit>
        <trans-unit id="686fada21819d2c685a6f60218198bc8a61e59f2" translate="yes" xml:space="preserve">
          <source>for compatability with legacy code. These intrinsics are described fully in &lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;Intrinsic Procedures&lt;/a&gt; where it is noted that they are extensions and should be avoided whenever possible.</source>
          <target state="translated">レガシーコードとの互換性のため。これらの組み込み関数は、完全に記述されている&lt;a href=&quot;intrinsic-procedures#Intrinsic-Procedures&quot;&gt;組み込み手続き&lt;/a&gt;彼らが拡張され、可能な限り避けるべきであることに留意されたいです。</target>
        </trans-unit>
        <trans-unit id="0b65456fcee33f621726a32682c9f5a43fcf563c" translate="yes" xml:space="preserve">
          <source>for performing loop interchanges.</source>
          <target state="translated">ループ交換を実行するための</target>
        </trans-unit>
        <trans-unit id="c5b3ddef2954620839314bb4513103ce8cff3be3" translate="yes" xml:space="preserve">
          <source>for that.</source>
          <target state="translated">そのために</target>
        </trans-unit>
        <trans-unit id="c0389b13c0c0bc3d4c76f0cdcfbaf94048d4f9f2" translate="yes" xml:space="preserve">
          <source>for the affected local variables.</source>
          <target state="translated">を使用して、影響を受けるローカル変数を指定します。</target>
        </trans-unit>
        <trans-unit id="cacfbd40505fff5a97d7effce15468bbc881b94d" translate="yes" xml:space="preserve">
          <source>form feed</source>
          <target state="translated">フォームフィード</target>
        </trans-unit>
        <trans-unit id="336da558f64105368889cd9dc8c1bedbc9b157d2" translate="yes" xml:space="preserve">
          <source>gnu</source>
          <target state="translated">gnu</target>
        </trans-unit>
        <trans-unit id="14734451d7bae207d688228f94079ef3922bc4f5" translate="yes" xml:space="preserve">
          <source>header.gcc</source>
          <target state="translated">header.gcc</target>
        </trans-unit>
        <trans-unit id="840335b8f41f2168b82077c6520c948eb5434936" translate="yes" xml:space="preserve">
          <source>horizontal tab</source>
          <target state="translated">横タブ</target>
        </trans-unit>
        <trans-unit id="99a98a2beae0cd812850d3aafc1f5072a3698eb9" translate="yes" xml:space="preserve">
          <source>i386 and x86_64 processors</source>
          <target state="translated">i386 および x86_64 プロセッサ</target>
        </trans-unit>
        <trans-unit id="c38e1a7be464ab7163038c4c36228ad752b9e97b" translate="yes" xml:space="preserve">
          <source>if &lt;var&gt;TARGET&lt;/var&gt; is associated with &lt;var&gt;POINTER&lt;/var&gt;, the target associated with &lt;var&gt;TARGET&lt;/var&gt; are not zero-sized storage sequences and occupy the same storage units. The result is false, if either &lt;var&gt;TARGET&lt;/var&gt; or &lt;var&gt;POINTER&lt;/var&gt; is disassociated.</source>
          <target state="translated">&lt;var&gt;TARGET&lt;/var&gt; が &lt;var&gt;POINTER&lt;/var&gt; に関連付けられている場合、TARGETに関連付けられている &lt;var&gt;TARGET&lt;/var&gt; はサイズがゼロのストレージシーケンスではなく、同じストレージユニットを使用します。 &lt;var&gt;TARGET&lt;/var&gt; または &lt;var&gt;POINTER&lt;/var&gt; が関連付けられていない場合、結果はfalse です。</target>
        </trans-unit>
        <trans-unit id="6c9b2714a61483876d23ff7c8a64d7bd23a0e3a4" translate="yes" xml:space="preserve">
          <source>if also</source>
          <target state="translated">にしても</target>
        </trans-unit>
        <trans-unit id="470cec587602b47395a317eb72d14272f9628412" translate="yes" xml:space="preserve">
          <source>implies</source>
          <target state="translated">implies</target>
        </trans-unit>
        <trans-unit id="9c5bf8d9bc8e210238a8fe2e5d72c0d3cd933402" translate="yes" xml:space="preserve">
          <source>in effect, GNU Fortran appends one underscore to external names with no underscores. This is done to ensure compatibility with code produced by many UNIX Fortran compilers.</source>
          <target state="translated">事実上、GNU Fortranは、アンダースコアのない外部の名前にアンダースコアを1つ追加します。これは、多くのUNIX Fortranコンパイラが生成するコードとの互換性を確保するために行われています。</target>
        </trans-unit>
        <trans-unit id="199b8c6b0e05b2ae2850d87fb479d7514ae3a298" translate="yes" xml:space="preserve">
          <source>inexact</source>
          <target state="translated">inexact</target>
        </trans-unit>
        <trans-unit id="3975926a2eab8c1f39a81423a9191838bedd5ce0" translate="yes" xml:space="preserve">
          <source>inlining calls to &lt;code&gt;MATMUL&lt;/code&gt;,</source>
          <target state="translated">&lt;code&gt;MATMUL&lt;/code&gt; への呼び出しのインライン化、</target>
        </trans-unit>
        <trans-unit id="f288a9885275d88fa51cca7f94d4afe580da627d" translate="yes" xml:space="preserve">
          <source>intent(in) An array with the images provided by the user. If &lt;var&gt;count&lt;/var&gt; is zero, a NULL pointer is passed.</source>
          <target state="translated">intent（in）ユーザーが提供した画像の配列。場合は &lt;var&gt;count&lt;/var&gt; ゼロになる、NULLポインタが渡されます。</target>
        </trans-unit>
        <trans-unit id="0d64470f06caa30284d32cc6160676923b4aef37" translate="yes" xml:space="preserve">
          <source>intent(in) An opaque pointer identifying the coarray.</source>
          <target state="translated">intent(in)Co-Arrayを識別する不透明なポインタ。</target>
        </trans-unit>
        <trans-unit id="76d06192264773444e86ae90f3b2d4858da682a7" translate="yes" xml:space="preserve">
          <source>intent(in) An opaque pointer identifying the destination coarray.</source>
          <target state="translated">intent(in)コピー先の Co-Array を識別する不透明なポインタ。</target>
        </trans-unit>
        <trans-unit id="5a519cdcdc1f69485de1ce896d1cbabdc62b2317" translate="yes" xml:space="preserve">
          <source>intent(in) An opaque pointer identifying the source coarray.</source>
          <target state="translated">intent(in)元の Co-Array を識別する不透明なポインタ。</target>
        </trans-unit>
        <trans-unit id="0d89f0a22dc211bfe990fa5c7112a73605f1d37e" translate="yes" xml:space="preserve">
          <source>intent(in) Array descriptor for the destination remote image for the bounds and the size. The &lt;code&gt;base_addr&lt;/code&gt; shall not be accessed.</source>
          <target state="translated">intent（in）境界とサイズの宛先リモートイメージの配列記述子。 &lt;code&gt;base_addr&lt;/code&gt; 、アクセスしてはなりません。</target>
        </trans-unit>
        <trans-unit id="d8e381ccf9b08b8bb80b79ca9d9afc63960bc670" translate="yes" xml:space="preserve">
          <source>intent(in) Array descriptor for the remote image for the bounds and the size. The &lt;code&gt;base_addr&lt;/code&gt; shall not be accessed.</source>
          <target state="translated">intent（in）境界とサイズのリモートイメージの配列記述子。 &lt;code&gt;base_addr&lt;/code&gt; 、アクセスしてはなりません。</target>
        </trans-unit>
        <trans-unit id="21b36193b1986e46831d2d36d9f55427bd188643" translate="yes" xml:space="preserve">
          <source>intent(in) Array descriptor of the local array to be transferred to the remote image</source>
          <target state="translated">intent(in)リモート画像に転送されるローカル配列の配列記述子。</target>
        </trans-unit>
        <trans-unit id="94d835761d04046e12ac086173de735e16582194" translate="yes" xml:space="preserve">
          <source>intent(in) Array descriptor of the local array to be transferred to the remote image.</source>
          <target state="translated">intent(in)リモートイメージに転送されるローカル配列の配列記述子。</target>
        </trans-unit>
        <trans-unit id="0b137a9a57ef4f28ad011e2688d0324f73eaeef5" translate="yes" xml:space="preserve">
          <source>intent(in) Array descriptor of the local array to store the data transferred from the remote image. May be reallocated where needed and when &lt;var&gt;DST_REALLOCATABLE&lt;/var&gt; allows it.</source>
          <target state="translated">intent（in）リモートイメージから転送されたデータを格納するローカル配列の配列記述子。必要に応じて、 &lt;var&gt;DST_REALLOCATABLE&lt;/var&gt; で許可されている場合に再割り当てできます。</target>
        </trans-unit>
        <trans-unit id="715d21a9ec79deea7ff428d1e569238505e5ccf2" translate="yes" xml:space="preserve">
          <source>intent(in) Array index; first array index is 0. For scalars, it is always 0.</source>
          <target state="translated">最初の配列インデックスは 0 です。 スカラの場合は常に 0 です。</target>
        </trans-unit>
        <trans-unit id="ff507e34c8a45057567cc7f417a397b02a1068fd" translate="yes" xml:space="preserve">
          <source>intent(in) By which amount of bytes the actual data is shifted compared to the base address of the coarray.</source>
          <target state="translated">intent(in)Co-Array のベースアドレスに対して、実際のデータを何バイトシフトするか。</target>
        </trans-unit>
        <trans-unit id="5827bcb1977aba2b510ad01fde06be16a4301a86" translate="yes" xml:space="preserve">
          <source>intent(in) By which amount of bytes the actual data is shifted compared to the base address of the destination coarray.</source>
          <target state="translated">intent(in)実際のデータを宛先 Co-Array のベースアドレスと比較して何バイトシフトさせるか。</target>
        </trans-unit>
        <trans-unit id="36fd39d0a6f6c42be47d9de7d1437673d7949fbb" translate="yes" xml:space="preserve">
          <source>intent(in) By which amount of bytes the actual data is shifted compared to the base address of the source coarray.</source>
          <target state="translated">intent(in)ソース Co-Array のベースアドレスに対して、実際のデータを何バイトシフトするか。</target>
        </trans-unit>
        <trans-unit id="4da886a16175f0a7b81dfb6c2e0c47f35e40e618" translate="yes" xml:space="preserve">
          <source>intent(in) Flags regarding the reduction function</source>
          <target state="translated">intent(in)リダクション関数に関するフラグ</target>
        </trans-unit>
        <trans-unit id="a6190352aaf55ad6622c0af3d93413a4480ed70c" translate="yes" xml:space="preserve">
          <source>intent(in) Function pointer to the reduction function</source>
          <target state="translated">intent(in)削減関数への関数ポインタ</target>
        </trans-unit>
        <trans-unit id="a02d70d8f2943db449fcc8123140cb5fb7336dc3" translate="yes" xml:space="preserve">
          <source>intent(in) Give the type of the destination. When the destination is not an array, than the precise type, e.g. of a component in a derived type, is not known, but provided here.</source>
          <target state="translated">intent(in)出力先の型を指定します。宛先が配列ではない場合は、例えば派生型のコンポーネントのように正確な型はわかりませんが、ここで指定します。</target>
        </trans-unit>
        <trans-unit id="94b8b32e6aad49601b5ba54e2c449fa6566b2f8b" translate="yes" xml:space="preserve">
          <source>intent(in) Give the type of the source. When the source is not an array, than the precise type, e.g. of a component in a derived type, is not known, but provided here.</source>
          <target state="translated">intent(in)ソースの型を指定します。ソースが配列ではない場合は、例えば派生型のコンポーネントのように正確な型はわかりませんが、ここでは提供されます。</target>
        </trans-unit>
        <trans-unit id="099a17fba874ac35f6d7cf534e76942244c794bf" translate="yes" xml:space="preserve">
          <source>intent(in) If not NULL, it contains the vector subscript of the destination array; the values are relative to the dimension triplet of the dest argument.</source>
          <target state="translated">intent(in)NULL でない場合は、宛先配列のベクトル添字を含みます。</target>
        </trans-unit>
        <trans-unit id="ef8b16d7a048c23ba0824f7f2f4bfb6363160aae" translate="yes" xml:space="preserve">
          <source>intent(in) If not NULL, it contains the vector subscript of the source array; the values are relative to the dimension triplet of the &lt;var&gt;src&lt;/var&gt; argument.</source>
          <target state="translated">intent（in）NULLでない場合、ソース配列のベクトル添え字が含まれます。値は、 &lt;var&gt;src&lt;/var&gt; 引数の次元トリプレットに関連しています。</target>
        </trans-unit>
        <trans-unit id="6a0bfaf3a867d4013c44ac4e4703e60f31f2ee27" translate="yes" xml:space="preserve">
          <source>intent(in) Kind of the destination argument</source>
          <target state="translated">intent(in)目的の引数の種類</target>
        </trans-unit>
        <trans-unit id="be96b2d6d8760aa7f00af41e9cc13426e60ba4d2" translate="yes" xml:space="preserve">
          <source>intent(in) Kind of the source argument</source>
          <target state="translated">intent(in)ソース引数の種類</target>
        </trans-unit>
        <trans-unit id="ac127585157acceadcf25227de2729aeb1d0024d" translate="yes" xml:space="preserve">
          <source>intent(in) Set when &lt;var&gt;DST&lt;/var&gt; is of allocatable or pointer type and its refs allow reallocation, i.e., the full array or a component is referenced.</source>
          <target state="translated">intent（in） &lt;var&gt;DST&lt;/var&gt; が割り当て可能型またはポインタ型であり、その参照が再割り当てを許可する場合、つまり、完全な配列またはコンポーネントが参照される場合に設定されます。</target>
        </trans-unit>
        <trans-unit id="9f64b05bd8e771d00afab090b88b25239dc8c88e" translate="yes" xml:space="preserve">
          <source>intent(in) Set when the destination is of allocatable or pointer type and the refs will allow reallocation, i.e., the ref is a full array or component ref.</source>
          <target state="translated">intent(in)目的地がallocatableまたはポインタ型であり、refが再割り当てを許可する場合、すなわちrefが完全な配列またはコンポーネントrefである場合に設定します。</target>
        </trans-unit>
        <trans-unit id="707edae82ce5d7667a384fa041f087c32e6e0207" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the destination remote image; must be a positive number.</source>
          <target state="translated">intent(in)転送先のリモート画像の ID。</target>
        </trans-unit>
        <trans-unit id="d13067c812dd2136e27be3b4e43b1002f75687ec" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the image from which the data should be broadcasted.</source>
          <target state="translated">intent(in)データをブロードキャストする画像の ID。</target>
        </trans-unit>
        <trans-unit id="fe3c7bbfa06c3e100efc7391462de42ea1ca1928" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the image to which the reduced value should be copied to; if zero, it has to be copied to all images.</source>
          <target state="translated">intent(in)削減値がコピーされるべき画像の ID。</target>
        </trans-unit>
        <trans-unit id="614aa95da334df7441884dcfef7b16977cd669e6" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the remote image; must be a positive number.</source>
          <target state="translated">intent(in)リモート画像の ID。</target>
        </trans-unit>
        <trans-unit id="593f98f053fd1048d7e959bd12fb2a4533078aee" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when accessed noncoindexed.</source>
          <target state="translated">intent(in)リモート画像の ID。 正の数でなければならない。</target>
        </trans-unit>
        <trans-unit id="2746bd8754c2c29907d7c1474f9bdd0c919b1479" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the remote image; must be a positive number; zero indicates the current image when used noncoindexed.</source>
          <target state="translated">intent(in)リモート画像の ID。 正の数である必要があります。</target>
        </trans-unit>
        <trans-unit id="bee143538f01659107759ee190edb66748b742d9" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the remote image; must be a positive number; zero indicates the current image, when accessed noncoindexed.</source>
          <target state="translated">intent(in)リモート画像の ID。 正の数である必要があります。</target>
        </trans-unit>
        <trans-unit id="19cc660c7fa6722f307efcfd657f55037a63a836" translate="yes" xml:space="preserve">
          <source>intent(in) The ID of the source remote image; must be a positive number.</source>
          <target state="translated">intent(in)ソースリモート画像の ID。</target>
        </trans-unit>
        <trans-unit id="8cab2a8aaf16a06b15938951d4164a5698cf708c" translate="yes" xml:space="preserve">
          <source>intent(in) The data type, i.e. &lt;code&gt;BT_INTEGER&lt;/code&gt; (1) or &lt;code&gt;BT_LOGICAL&lt;/code&gt; (2).</source>
          <target state="translated">intent（in）データ型、つまり &lt;code&gt;BT_INTEGER&lt;/code&gt; （1）または &lt;code&gt;BT_LOGICAL&lt;/code&gt; （2）。</target>
        </trans-unit>
        <trans-unit id="26d46f5d8fc76e851c39a2ab69e77b469f89fecf" translate="yes" xml:space="preserve">
          <source>intent(in) The exit status to be used.</source>
          <target state="translated">intent(in)使用する終了ステータス。</target>
        </trans-unit>
        <trans-unit id="81be2bf3ece9e0451e872d67bae1b61ea82f5c85" translate="yes" xml:space="preserve">
          <source>intent(in) The kind value (only 4; always &lt;code&gt;int&lt;/code&gt;)</source>
          <target state="translated">intent（in）種類の値（4のみ、常に &lt;code&gt;int&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="8e67d808ca7c4c1adf44b87b05fec3ee5dce6fda" translate="yes" xml:space="preserve">
          <source>intent(in) The new value for the atomic variable, assigned to the atomic variable, if &lt;code&gt;compare&lt;/code&gt; equals the value of the atomic variable.</source>
          <target state="translated">intent（in） &lt;code&gt;compare&lt;/code&gt; がアトミック変数の値と等しい場合、アトミック変数に割り当てられたアトミック変数の新しい値。</target>
        </trans-unit>
        <trans-unit id="632f1c1dd95212054e5a6a41d7d28e207ea8e344" translate="yes" xml:space="preserve">
          <source>intent(in) The number of events which have to be available before the function returns.</source>
          <target state="translated">intent(in)関数が戻るまでに利用可能でなければならないイベントの数。</target>
        </trans-unit>
        <trans-unit id="a0dda66dcc75e30df5dfb47d443b5ee4eccd3de8" translate="yes" xml:space="preserve">
          <source>intent(in) The number of images which are provided in the next argument. For a zero-sized array, the value is zero. For &lt;code&gt;sync images (*)&lt;/code&gt;, the value is &lt;em&gt;-1&lt;/em&gt;.</source>
          <target state="translated">intent（in）次の引数で提供される画像の数。サイズがゼロの配列の場合、値はゼロです。ための &lt;code&gt;sync images (*)&lt;/code&gt; 、値は&lt;em&gt;-1&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b95cccac8dff5eeb8d8d037c1032117c395be679" translate="yes" xml:space="preserve">
          <source>intent(in) The references on the remote array to store the data given by src. Guaranteed to have at least one entry.</source>
          <target state="translated">intent(in)src で与えられたデータを格納するためのリモート配列上の参照.少なくとも一つのエントリを持つことが保証されています。</target>
        </trans-unit>
        <trans-unit id="6c623d7793e522d3f1bd14e50d5a27ec6a4aafb7" translate="yes" xml:space="preserve">
          <source>intent(in) The references on the remote array to store the data given by the source. Guaranteed to have at least one entry.</source>
          <target state="translated">intent(in)ソースから与えられたデータを格納するためのリモート配列上の参照。少なくとも1つのエントリを持つことが保証されています。</target>
        </trans-unit>
        <trans-unit id="e344f1531d4a9859696eb12549ffe2d312c23227" translate="yes" xml:space="preserve">
          <source>intent(in) The references to apply to the remote structure to get the data.</source>
          <target state="translated">intent(in)データを取得するためにリモート構造体に適用する参照。</target>
        </trans-unit>
        <trans-unit id="364809cebf2b546a1a2419774fc89aab03edbd59" translate="yes" xml:space="preserve">
          <source>intent(in) The value used for comparision.</source>
          <target state="translated">intent(in)比較に使用する値。</target>
        </trans-unit>
        <trans-unit id="f8a5ce8e22eeec22028c3a25534b9f0a8f00bfe9" translate="yes" xml:space="preserve">
          <source>intent(in) The variable is &lt;code&gt;false&lt;/code&gt; when it is known at compile time that the &lt;var&gt;dest&lt;/var&gt; and &lt;var&gt;src&lt;/var&gt; either cannot overlap or overlap (fully or partially) such that walking &lt;var&gt;src&lt;/var&gt; and &lt;var&gt;dest&lt;/var&gt; in element wise element order (honoring the stride value) will not lead to wrong results. Otherwise, the value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">intent（in）コンパイル時に &lt;var&gt;dest&lt;/var&gt; と &lt;var&gt;src&lt;/var&gt; がオーバーラップまたはオーバーラップできない（完全にまたは部分的に）ことができないため、要素ごとの要素順（ストライド値の調整）で &lt;var&gt;src&lt;/var&gt; と &lt;var&gt;dest&lt;/var&gt; を移動できないことがわかっている場合、変数は &lt;code&gt;false&lt;/code&gt; です。間違った結果に。それ以外の場合、値は &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="14696eb7013c871f6ac8b0e40360e0aba7f91b96" translate="yes" xml:space="preserve">
          <source>intent(in) the buffer size of errmsg</source>
          <target state="translated">intent(in)errmsg のバッファサイズ</target>
        </trans-unit>
        <trans-unit id="487364230ad74ee8ff94a2c56002bbba442e162f" translate="yes" xml:space="preserve">
          <source>intent(in) the buffer size of errmsg.</source>
          <target state="translated">intent(in)errmsg のバッファサイズ。</target>
        </trans-unit>
        <trans-unit id="6930506ddb242563b5df2d1b100d308c41f04c72" translate="yes" xml:space="preserve">
          <source>intent(in) the data type, i.e. &lt;code&gt;BT_INTEGER&lt;/code&gt; (1) or &lt;code&gt;BT_LOGICAL&lt;/code&gt; (2)</source>
          <target state="translated">intent（in）データ型、つまり &lt;code&gt;BT_INTEGER&lt;/code&gt; （1）または &lt;code&gt;BT_LOGICAL&lt;/code&gt; （2）</target>
        </trans-unit>
        <trans-unit id="267e2cfef03902802c5bb271f9a6a5b9eaef7486" translate="yes" xml:space="preserve">
          <source>intent(in) the data type, i.e. &lt;code&gt;BT_INTEGER&lt;/code&gt; (1) or &lt;code&gt;BT_LOGICAL&lt;/code&gt; (2).</source>
          <target state="translated">intent（in）データ型、つまり &lt;code&gt;BT_INTEGER&lt;/code&gt; （1）または &lt;code&gt;BT_LOGICAL&lt;/code&gt; （2）。</target>
        </trans-unit>
        <trans-unit id="b45b63c027a940467363f23d448c2e80775628ef" translate="yes" xml:space="preserve">
          <source>intent(in) the error message (not zero terminated)</source>
          <target state="translated">エラーメッセージの意図</target>
        </trans-unit>
        <trans-unit id="e941f7b7ab614dced2a98601335bc887a0fb90e2" translate="yes" xml:space="preserve">
          <source>intent(in) the kind value (only 4; always &lt;code&gt;int&lt;/code&gt;)</source>
          <target state="translated">intent（in）種類の値（4のみ、常に &lt;code&gt;int&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="161b92ce03cf05a924e603651ee8720b17f85c90" translate="yes" xml:space="preserve">
          <source>intent(in) the length of the string</source>
          <target state="translated">インテント(in)文字列の長さ</target>
        </trans-unit>
        <trans-unit id="801a43379f5383a484c1d7fcd49339ffa7c177e1" translate="yes" xml:space="preserve">
          <source>intent(in) the operation to be performed; possible values &lt;code&gt;GFC_CAF_ATOMIC_ADD&lt;/code&gt; (1), &lt;code&gt;GFC_CAF_ATOMIC_AND&lt;/code&gt; (2), &lt;code&gt;GFC_CAF_ATOMIC_OR&lt;/code&gt; (3), &lt;code&gt;GFC_CAF_ATOMIC_XOR&lt;/code&gt; (4).</source>
          <target state="translated">intent（in）実行する操作。可能な値 &lt;code&gt;GFC_CAF_ATOMIC_ADD&lt;/code&gt; （1）、 &lt;code&gt;GFC_CAF_ATOMIC_AND&lt;/code&gt; （2）、 &lt;code&gt;GFC_CAF_ATOMIC_OR&lt;/code&gt; （3）、 &lt;code&gt;GFC_CAF_ATOMIC_XOR&lt;/code&gt; （4）。</target>
        </trans-unit>
        <trans-unit id="cbd4fc3531fc5aaece553a14856fb436b6cec67d" translate="yes" xml:space="preserve">
          <source>intent(in) the string length of argument &lt;var&gt;a&lt;/var&gt;</source>
          <target state="translated">intent（in）引数 &lt;var&gt;a&lt;/var&gt; の文字列の長さ</target>
        </trans-unit>
        <trans-unit id="55829fdaad223f02bc1b593a6c576e3a98d38032" translate="yes" xml:space="preserve">
          <source>intent(in) the value to be assigned, passed by reference</source>
          <target state="translated">割り当てられた値を参照して渡されるインテント</target>
        </trans-unit>
        <trans-unit id="ca2950f4e0981e66b5092046e61ae50fe611a127" translate="yes" xml:space="preserve">
          <source>intent(inout) A pointer to an array of strings with the command-line arguments or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">intent（inout）コマンドライン引数または &lt;code&gt;NULL&lt;/code&gt; を持つ文字列の配列へのポインター。</target>
        </trans-unit>
        <trans-unit id="bc4fc492c137a2aac25ed0170b410c18ef467370" translate="yes" xml:space="preserve">
          <source>intent(inout) An array descriptor for the data to be processed. On the destination image(s) the result overwrites the old content.</source>
          <target state="translated">intent(inout)処理したいデータの配列記述子。処理先の画像では,結果は古い内容を上書きします.</target>
        </trans-unit>
        <trans-unit id="bf144a4f344e14f25a36df8b8073a68a514976c0" translate="yes" xml:space="preserve">
          <source>intent(inout) An array descriptor with the data to be broadcasted (on &lt;var&gt;source_image&lt;/var&gt;) or to be received (other images).</source>
          <target state="translated">intent（inout）ブロードキャストされる（ &lt;var&gt;source_image&lt;/var&gt; で）または受信される（その他のイメージ）データの配列記述子。</target>
        </trans-unit>
        <trans-unit id="66d3c2612d7bc69005f1150de25d473ca9ae6cc5" translate="yes" xml:space="preserve">
          <source>intent(inout) An array descriptor with the data to be processed. On the destination image(s) the result overwrites the old content.</source>
          <target state="translated">intent(inout)処理したいデータを持つ配列記述子。処理先の画像では,結果は古い内容を上書きします.</target>
        </trans-unit>
        <trans-unit id="15db2faef357bb642fdf7ad82237c3ab5f2aa45b" translate="yes" xml:space="preserve">
          <source>intent(inout) An integer pointer with the number of arguments passed to the program or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">intent（inout）プログラムに渡された引数の数を含む整数ポインターまたは &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17af252aee68c0a180ad426063d7fd6f33756878" translate="yes" xml:space="preserve">
          <source>intent(inout) The (pseudo) array descriptor.</source>
          <target state="translated">intent(inout)(擬似)配列記述子。</target>
        </trans-unit>
        <trans-unit id="a9aea7e4d8827fc261f8a44e5dac43b414a0de40" translate="yes" xml:space="preserve">
          <source>intent(int) If not NULL, it contains the vector subscript of the destination array; the values are relative to the dimension triplet of the &lt;var&gt;dest&lt;/var&gt; argument.</source>
          <target state="translated">intent（int）NULLでない場合、宛先配列のベクトル添え字が含まれます。値は、 &lt;var&gt;dest&lt;/var&gt; 引数の次元トリプレットに関連しています。</target>
        </trans-unit>
        <trans-unit id="73693a50ec07021820249ec97ab3f4a3857520ad" translate="yes" xml:space="preserve">
          <source>intent(out) An opaque pointer identifying the coarray.</source>
          <target state="translated">intent(out)Co-Array を識別する不透明なポインタ。</target>
        </trans-unit>
        <trans-unit id="e921c52080158ef4b2d7956cab258208bd2b5162" translate="yes" xml:space="preserve">
          <source>intent(out) Array descriptor of the local array to store the data retrieved from the remote image</source>
          <target state="translated">intent(out)リモート画像から取得したデータを格納するローカル配列の配列記述子。</target>
        </trans-unit>
        <trans-unit id="f04319656bf0d2e6dd6f69e5a5ebb3a6473ed9a7" translate="yes" xml:space="preserve">
          <source>intent(out) For allocatable coarrays, stores the STAT=; may be &lt;code&gt;NULL&lt;/code&gt;</source>
          <target state="translated">intent（out）割り当て可能なCo-Arrayの場合、STAT =を格納します。 &lt;code&gt;NULL&lt;/code&gt; の可能性があります</target>
        </trans-unit>
        <trans-unit id="d65f0a6beb9d913a66c822d2c5d3190a6cf67b5e" translate="yes" xml:space="preserve">
          <source>intent(out) For allocatable coarrays, stores the STAT=; may be NULL</source>
          <target state="translated">intent(out)アロケート可能なcoarraysの場合、STAT=を格納します。</target>
        </trans-unit>
        <trans-unit id="d0037247da208404b3a842a5e9cfe758abeb866e" translate="yes" xml:space="preserve">
          <source>intent(out) For allocatable coarrays, stores the STAT=; may be NULL.</source>
          <target state="translated">intent(out)アロケート可能なcoarraysの場合、STAT=を格納します。</target>
        </trans-unit>
        <trans-unit id="34d74a331233b4f4e33077ab905a4a92be98a2b0" translate="yes" xml:space="preserve">
          <source>intent(out) If not NULL, it returns whether lock could be obtained.</source>
          <target state="translated">intent(out)NULL でない場合は、ロックが取得できたかどうかを返します。</target>
        </trans-unit>
        <trans-unit id="1003c2c632053ef5ecb8fcb61f066d500a185edb" translate="yes" xml:space="preserve">
          <source>intent(out) Stores the STAT=; may be NULL</source>
          <target state="translated">intent(out)STAT=を格納します。</target>
        </trans-unit>
        <trans-unit id="8b105c6684afeb53d9958a6bbbbc96e3a8e1d80e" translate="yes" xml:space="preserve">
          <source>intent(out) Stores the STAT=; may be NULL.</source>
          <target state="translated">intent(out)STAT=を格納します。</target>
        </trans-unit>
        <trans-unit id="0e8c5e64d7a23388138d38004f467f462432d82d" translate="yes" xml:space="preserve">
          <source>intent(out) Stores the status STAT= and may be NULL.</source>
          <target state="translated">intent(out)ステータスを格納します。</target>
        </trans-unit>
        <trans-unit id="22aa95cc1b4c96223ae30d6859771efc98ea6d55" translate="yes" xml:space="preserve">
          <source>intent(out) The number of events currently posted to the event variable.</source>
          <target state="translated">intent(out)現在イベント変数に投稿されているイベントの数。</target>
        </trans-unit>
        <trans-unit id="50abafcc6e831cd3614d9d2457378295c9110a1e" translate="yes" xml:space="preserve">
          <source>intent(out) The value which the atomic variable had just before the atomic operation.</source>
          <target state="translated">intent(out)原子変数が原子操作の直前に持っていた値。</target>
        </trans-unit>
        <trans-unit id="df5b1fedaa41491bd8f2afed52ad873636b5ce93" translate="yes" xml:space="preserve">
          <source>intent(out) The value which the atomic variable had just before the cas operation.</source>
          <target state="translated">intent(out)アトミック変数がcas演算の直前に持っていた値。</target>
        </trans-unit>
        <trans-unit id="035558d623a032f3ec28a40dede97bfa7bec65d0" translate="yes" xml:space="preserve">
          <source>intent(out) The variable assigned the atomically referenced variable.</source>
          <target state="translated">intent(out)原子的に参照された変数が代入された変数。</target>
        </trans-unit>
        <trans-unit id="037f9e80fca605767df17477ee17f05ac728bff4" translate="yes" xml:space="preserve">
          <source>intent(out) When an error occurs, this will be set to an error message; may be &lt;code&gt;NULL&lt;/code&gt;</source>
          <target state="translated">intent（out）エラーが発生すると、これはエラーメッセージに設定されます。 &lt;code&gt;NULL&lt;/code&gt; の可能性があります</target>
        </trans-unit>
        <trans-unit id="2225374520d16971d111cf41e4784e1901ae311d" translate="yes" xml:space="preserve">
          <source>intent(out) When an error occurs, this will be set to an error message; may be NULL</source>
          <target state="translated">intent(out)エラーが発生した場合、エラーメッセージに設定されます。</target>
        </trans-unit>
        <trans-unit id="ce26b108a707115bd5f4aef03c042398dd221791" translate="yes" xml:space="preserve">
          <source>intent(out) When an error occurs, this will be set to an error message; may be NULL.</source>
          <target state="translated">intent(out)エラーが発生した場合、エラーメッセージに設定されます。</target>
        </trans-unit>
        <trans-unit id="dedba824d83bedf8875dc183379515a617109434" translate="yes" xml:space="preserve">
          <source>intent(out) When non-&lt;code&gt;NULL&lt;/code&gt; give the result of the get-operation, i.e., zero on success and non-zero on error. When &lt;code&gt;NULL&lt;/code&gt; and an error occurs, then an error message is printed and the program is terminated.</source>
          <target state="translated">intent（out） &lt;code&gt;NULL&lt;/code&gt; 以外の場合、get操作の結果を返します。つまり、成功した場合はゼロ、エラーの場合はゼロ以外です。場合 &lt;code&gt;NULL&lt;/code&gt; とエラーが発生すると、エラーメッセージが出力され、プログラムを終了します。</target>
        </trans-unit>
        <trans-unit id="f86c202555db33039a8ef7c3450ea3126f57bf3b" translate="yes" xml:space="preserve">
          <source>intent(out) When non-&lt;code&gt;NULL&lt;/code&gt; give the result of the operation, i.e., zero on success and non-zero on error. When &lt;code&gt;NULL&lt;/code&gt; and an error occurs, then an error message is printed and the program is terminated.</source>
          <target state="translated">intent（out） &lt;code&gt;NULL&lt;/code&gt; 以外の場合、操作の結果を返します。つまり、成功した場合はゼロ、エラーの場合はゼロ以外です。場合 &lt;code&gt;NULL&lt;/code&gt; とエラーが発生すると、エラーメッセージが出力され、プログラムを終了します。</target>
        </trans-unit>
        <trans-unit id="bbc5b3e98e236b00632ca29ed3051aaf8a6c9b55" translate="yes" xml:space="preserve">
          <source>intent(out) When non-NULL give the result of the operation, i.e., zero on success and non-zero on error. When NULL and an error occurs, then an error message is printed and the program is terminated.</source>
          <target state="translated">intent(out)非NULLの場合は、操作の結果、すなわち成功の場合はゼロ、エラーの場合はゼロではありません。NULLでエラーが発生した場合は、エラーメッセージを表示してプログラムを終了します。</target>
        </trans-unit>
        <trans-unit id="83f9a047e55e2f65c0bf4d6d3570cf32a45ee927" translate="yes" xml:space="preserve">
          <source>intent(out) when non-&lt;code&gt;NULL&lt;/code&gt; give the result of the send-operation, i.e., zero on success and non-zero on error. When &lt;code&gt;NULL&lt;/code&gt; and an error occurs, then an error message is printed and the program is terminated.</source>
          <target state="translated">intent（out） &lt;code&gt;NULL&lt;/code&gt; 以外の場合は送信操作の結果を返します。つまり、成功した場合はゼロ、エラーの場合はゼロ以外です。場合 &lt;code&gt;NULL&lt;/code&gt; とエラーが発生すると、エラーメッセージが出力され、プログラムを終了します。</target>
        </trans-unit>
        <trans-unit id="cfc152cf3a76c667ea7be9868520c394342defa4" translate="yes" xml:space="preserve">
          <source>intent(out) when non-NULL give the result of the operation, i.e., zero on success and non-zero on error. When NULL and an error occurs, then an error message is printed and the program is terminated.</source>
          <target state="translated">intent(out)がNULLでない場合は、操作の結果、つまり成功時には0、エラー時には0ではない結果を与えます。NULLでエラーが発生した場合は、エラーメッセージを表示してプログラムを終了します。</target>
        </trans-unit>
        <trans-unit id="4b6914c620d2daa62ebe5994f36f361b3a759bf8" translate="yes" xml:space="preserve">
          <source>intersection</source>
          <target state="translated">intersection</target>
        </trans-unit>
        <trans-unit id="81f344a7686a80b4c5293e8fdc0b0160c82c06a8" translate="yes" xml:space="preserve">
          <source>invalid</source>
          <target state="translated">invalid</target>
        </trans-unit>
        <trans-unit id="023e03b99b011f685d4d366b227ca74853a31772" translate="yes" xml:space="preserve">
          <source>is active for</source>
          <target state="translated">活躍している</target>
        </trans-unit>
        <trans-unit id="a3399e99e36d13c096ddbe66f96097e5ea9fa4d6" translate="yes" xml:space="preserve">
          <source>is an &lt;code&gt;INTENT(INOUT)&lt;/code&gt; argument and shall be nonpolymorphic. If it is allocatable, it shall be allocated; if it is a pointer, it shall be associated. &lt;var&gt;A&lt;/var&gt; shall have the same type and type parameters on all images of the team; if it is an array, it shall have the same shape on all images.</source>
          <target state="translated">ある &lt;code&gt;INTENT(INOUT)&lt;/code&gt; 引数と非多ものでなければなりません。割り当て可能な場合は、割り当てられます。ポインターの場合は、関連付けられます。 &lt;var&gt;A&lt;/var&gt; は、チームのすべての画像で同じタイプとタイプパラメータを持つものとします。配列の場合、すべての画像で同じ形状になります。</target>
        </trans-unit>
        <trans-unit id="d5e077e3588ef2b8e6993d19f94c41071bc6f708" translate="yes" xml:space="preserve">
          <source>is explicitly requested.</source>
          <target state="translated">が明示的に要求されています。</target>
        </trans-unit>
        <trans-unit id="8a98a007e26664e6e90b50caf1a9921d33b04c72" translate="yes" xml:space="preserve">
          <source>is given on the command line. Default widths will be used. This is considered non-conforming code and is discouraged.</source>
          <target state="translated">をコマンドラインで指定します。デフォルトの幅が使用されます。これは不適合なコードとみなされ、お勧めしません。</target>
        </trans-unit>
        <trans-unit id="26e79733e06b2f4ea2fe9f20c47dd94601696725" translate="yes" xml:space="preserve">
          <source>is given on the command line. This is considered non-conforming code and is discouraged.</source>
          <target state="translated">がコマンドラインで与えられています。これは不適合なコードとみなされ、推奨されません。</target>
        </trans-unit>
        <trans-unit id="a5dbae8240e6694e97ce09b3556bdb8f793596ca" translate="yes" xml:space="preserve">
          <source>is given, &lt;code&gt;DOUBLE PRECISION&lt;/code&gt; would instead be promoted to 16 bytes if possible, and</source>
          <target state="translated">が指定されている場合、可能であれば &lt;code&gt;DOUBLE PRECISION&lt;/code&gt; が16バイトにプロモートされます。</target>
        </trans-unit>
        <trans-unit id="b8f2654b110054bce27d4604268533e4097dc61a" translate="yes" xml:space="preserve">
          <source>is given.</source>
          <target state="translated">が与えられます。</target>
        </trans-unit>
        <trans-unit id="fa1a1e11beb3fa8f41d6859fdb96ba4f0fde5df7" translate="yes" xml:space="preserve">
          <source>is given. See also</source>
          <target state="translated">が与えられます。も参照してください。</target>
        </trans-unit>
        <trans-unit id="92aa0aaeaa698b1852033bd37c58c53ce7482b9e" translate="yes" xml:space="preserve">
          <source>is given. This attribute overrides</source>
          <target state="translated">が与えられます。この属性は</target>
        </trans-unit>
        <trans-unit id="d511ff3c4c76fb95257fb99a792937799e6a1fca" translate="yes" xml:space="preserve">
          <source>is implemented as something akin to:</source>
          <target state="translated">のようなものとして実装されています。</target>
        </trans-unit>
        <trans-unit id="f815a1bc4e8a059d90fcdeaf55f25f08112f57b7" translate="yes" xml:space="preserve">
          <source>is implied by</source>
          <target state="translated">によって暗示されています。</target>
        </trans-unit>
        <trans-unit id="cf3593f4d582b9feb29ac97d0837991402cbf637" translate="yes" xml:space="preserve">
          <source>is implied by any of the</source>
          <target state="translated">のいずれかによって暗示されています。</target>
        </trans-unit>
        <trans-unit id="822a1460ab8db4ab8c430537f71607d13c088241" translate="yes" xml:space="preserve">
          <source>is in effect, this packing will be performed by inline code. This allows for more optimization while increasing code size.</source>
          <target state="translated">が有効な場合、このパッキングはインラインコードで実行されます。これにより、コードサイズを大きくしながら、より多くの最適化を行うことができます。</target>
        </trans-unit>
        <trans-unit id="f71aadf50c18579748c6456b5e95ba08181d232a" translate="yes" xml:space="preserve">
          <source>is in effect.</source>
          <target state="translated">が有効になっています。</target>
        </trans-unit>
        <trans-unit id="1b81137a94ebbde76653e3f712e080132ad80d01" translate="yes" xml:space="preserve">
          <source>is in effect. It is implied by the</source>
          <target state="translated">が有効であることを示しています。によって暗示されています。</target>
        </trans-unit>
        <trans-unit id="664179b7d883d2fcc4f164fbe02f49a06fb16b23" translate="yes" xml:space="preserve">
          <source>is in effect. Matrix multiplication of matrices with size larger than (or equal to) &lt;var&gt;n&lt;/var&gt; will be performed by calls to BLAS functions, while others will be handled by &lt;code&gt;gfortran&lt;/code&gt; internal algorithms. If the matrices involved are not square, the size comparison is performed using the geometric mean of the dimensions of the argument and result matrices.</source>
          <target state="translated">有効です。 &lt;var&gt;n&lt;/var&gt; より大きい（または等しい）サイズの行列の行列乗算は、BLAS関数の呼び出しによって実行されますが、その他は &lt;code&gt;gfortran&lt;/code&gt; 内部アルゴリズムによって処理されます。関連する行列が正方でない場合、引数と結果の行列の次元の幾何平均を使用してサイズ比較が実行されます。</target>
        </trans-unit>
        <trans-unit id="1e3edce66572775c2ea107b61d39776d81b7bd51" translate="yes" xml:space="preserve">
          <source>is not recommended unless you are experimenting with issues such as integration of GNU Fortran into existing system environments (vis-&amp;agrave;-vis existing libraries, tools, and so on).</source>
          <target state="translated">GNU Fortranを既存のシステム環境（既存のライブラリ、ツールなど）に統合するなどの問題を実験しているのでない限り、これはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="3de06cc6f860f8a9fc1d0678674470739770e52a" translate="yes" xml:space="preserve">
          <source>is set for the compilation of the main program.</source>
          <target state="translated">がメインプログラムのコンパイルに設定されています。</target>
        </trans-unit>
        <trans-unit id="ea83b96a85bb598b022550183e045e1662e26def" translate="yes" xml:space="preserve">
          <source>is specified, they do not prevent compilation of the program.</source>
          <target state="translated">が指定されていても、プログラムのコンパイルを妨げることはありません。</target>
        </trans-unit>
        <trans-unit id="df7614250cf825ce49ccd1794afad60108faf9d9" translate="yes" xml:space="preserve">
          <source>is specified.</source>
          <target state="translated">が指定されています。</target>
        </trans-unit>
        <trans-unit id="8a587815b962b44059592c40869eeea56aa9fb9d" translate="yes" xml:space="preserve">
          <source>is used  *** unless</source>
          <target state="translated">は***を使用します。</target>
        </trans-unit>
        <trans-unit id="f136f5c17366f25e870e746058a467ee09b3377a" translate="yes" xml:space="preserve">
          <source>is used (see &lt;a href=&quot;fortran-dialect-options#Fortran-Dialect-Options&quot;&gt;Fortran Dialect Options&lt;/a&gt;)</source>
          <target state="translated">が使用されます（&lt;a href=&quot;fortran-dialect-options#Fortran-Dialect-Options&quot;&gt;Fortran方言オプションを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="25f648ba07c318fb10c2ec4f60a42f5fb257af03" translate="yes" xml:space="preserve">
          <source>is used with</source>
          <target state="translated">と一緒に使用されています。</target>
        </trans-unit>
        <trans-unit id="a6839d76bbb7783af5dc7927fd3ea8c02821e91c" translate="yes" xml:space="preserve">
          <source>is used.</source>
          <target state="translated">を使用しています。</target>
        </trans-unit>
        <trans-unit id="66e43fcd5f31ca6c3f01f8743ada40c1cd9bf77d" translate="yes" xml:space="preserve">
          <source>is used. In the following example, the first element of the array will be given the value 0.00 and the two succeeding elements will be given the values 1.00 and 2.00.</source>
          <target state="translated">が使用されます。次の例では、配列の最初の要素には値0.00が与えられ、後続の2つの要素には値1.00と2.00が与えられます。</target>
        </trans-unit>
        <trans-unit id="9b33046ed39d182e3adafa9045ad6787d4bbc321" translate="yes" xml:space="preserve">
          <source>legacy</source>
          <target state="translated">legacy</target>
        </trans-unit>
        <trans-unit id="9d062bafff17ba8b9a1215c4c51485134d509d91" translate="yes" xml:space="preserve">
          <source>lib</source>
          <target state="translated">lib</target>
        </trans-unit>
        <trans-unit id="80218e6fcc0c072989e1a142de7299e32a6e5226" translate="yes" xml:space="preserve">
          <source>libgfortran</source>
          <target state="translated">libgfortran</target>
        </trans-unit>
        <trans-unit id="aadf46ad52b563db141c6a8b633250cb09e7740c" translate="yes" xml:space="preserve">
          <source>little-endian</source>
          <target state="translated">little-endian</target>
        </trans-unit>
        <trans-unit id="3f9a1c07b593dfba479aaa63292e71d7545fc898" translate="yes" xml:space="preserve">
          <source>matches the Fortran declaration</source>
          <target state="translated">はFortran宣言と一致します。</target>
        </trans-unit>
        <trans-unit id="73b77927d84a6401987ab70daf9a82a6ee5e4f4e" translate="yes" xml:space="preserve">
          <source>matches the following &lt;code&gt;struct&lt;/code&gt; declaration in C</source>
          <target state="translated">Cの次の &lt;code&gt;struct&lt;/code&gt; 宣言に一致します</target>
        </trans-unit>
        <trans-unit id="7fe27285fff392016bb8c583c67246eb6704f6e8" translate="yes" xml:space="preserve">
          <source>matrix multiplication</source>
          <target state="translated">行列乗算</target>
        </trans-unit>
        <trans-unit id="19bbd4269ffa388d514e6c395af8f09261c1a711" translate="yes" xml:space="preserve">
          <source>means the same thing as</source>
          <target state="translated">と同じ意味を持つ</target>
        </trans-unit>
        <trans-unit id="eccc4fdd5c655985a966fcd5519cee11d576e209" translate="yes" xml:space="preserve">
          <source>mem</source>
          <target state="translated">mem</target>
        </trans-unit>
        <trans-unit id="d1854cae891ec7b29161ccaf79a24b00c274bdaa" translate="yes" xml:space="preserve">
          <source>n</source>
          <target state="translated">n</target>
        </trans-unit>
        <trans-unit id="6f5b01580ce43822444ae4c79edcd0dc789028f1" translate="yes" xml:space="preserve">
          <source>native</source>
          <target state="translated">native</target>
        </trans-unit>
        <trans-unit id="52c56ebf038fb7625cfef22840e3ab11b2246ecb" translate="yes" xml:space="preserve">
          <source>need to be in effect. The parentheses protection is enabled by default, unless</source>
          <target state="translated">を有効にする必要があります。括弧の保護はデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="e453d1d3e45b46f4624613d0ed41283e8121317d" translate="yes" xml:space="preserve">
          <source>new line</source>
          <target state="translated">しんせん</target>
        </trans-unit>
        <trans-unit id="6912021f8da67a66e21e98578b71290c2142f9a3" translate="yes" xml:space="preserve">
          <source>no underscore is appended while &lt;code&gt;-fsecond-underscore&lt;/code&gt; appends two underscores. Depending on the target system and the calling convention, the procedure might be additionally dressed; for instance, on 32bit Windows with &lt;code&gt;stdcall&lt;/code&gt;, an at-sign &lt;code&gt;@&lt;/code&gt; followed by an integer number is appended. For the changing the calling convention, see see &lt;a href=&quot;gnu-fortran-compiler-directives#GNU-Fortran-Compiler-Directives&quot;&gt;GNU Fortran Compiler Directives&lt;/a&gt;.</source>
          <target state="translated">下線は追加されませんが、 &lt;code&gt;-fsecond-underscore&lt;/code&gt; は2つの下線を追加します。ターゲットシステムと呼び出し規約に応じて、プロシージャはさらに整えられる場合があります。たとえば、32ビットWindowsで &lt;code&gt;stdcall&lt;/code&gt; を使用すると、アットマーク &lt;code&gt;@&lt;/code&gt; の後に整数が追加されます。呼び出し規約の変更については、&lt;a href=&quot;gnu-fortran-compiler-directives#GNU-Fortran-Compiler-Directives&quot;&gt;GNU Fortran Compiler Directivesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84e9d0dbac2449a2a96508e04c0accf17a79c336" translate="yes" xml:space="preserve">
          <source>no-</source>
          <target state="translated">no-</target>
        </trans-unit>
        <trans-unit id="71f8e7976e4cbc4561c9d62fb283e7f788202acb" translate="yes" xml:space="preserve">
          <source>none</source>
          <target state="translated">none</target>
        </trans-unit>
        <trans-unit id="82a52a64d1c2d49d8fe29b8a8671eba7fdbb2c8d" translate="yes" xml:space="preserve">
          <source>null character</source>
          <target state="translated">ヌル文字</target>
        </trans-unit>
        <trans-unit id="150d7bb6bbb7c572c7453262785b65f5c1ada1e5" translate="yes" xml:space="preserve">
          <source>number of command line argument strings</source>
          <target state="translated">コマンドライン引数文字列の数</target>
        </trans-unit>
        <trans-unit id="11fbbaaf0a67aea0d85fd3edb52178ee2c95cf54" translate="yes" xml:space="preserve">
          <source>number of options passed</source>
          <target state="translated">渡されたオプションの数</target>
        </trans-unit>
        <trans-unit id="6e972ef42bd6df42920670270b4f66874641ff72" translate="yes" xml:space="preserve">
          <source>objects with the POINTER attribute</source>
          <target state="translated">POINTER属性を持つオブジェクト</target>
        </trans-unit>
        <trans-unit id="937fc102cb0f766f49b950a02e67b46c044617c6" translate="yes" xml:space="preserve">
          <source>omp_lib.h</source>
          <target state="translated">omp_lib.h</target>
        </trans-unit>
        <trans-unit id="110ac099a63aaaf008854653e573454a1ebc64ad" translate="yes" xml:space="preserve">
          <source>one of the caf_register_t types.</source>
          <target state="translated">caf_register_t型のうちの1つ。</target>
        </trans-unit>
        <trans-unit id="0808d0355362fb07d30f078c078ddacfa434ffa1" translate="yes" xml:space="preserve">
          <source>only in gfortran procedures with character arguments that call implicitly prototyped procedures.</source>
          <target state="translated">暗黙のうちにプロトタイプ化されたプロシージャを呼び出す文字引数を持つgfortranプロシージャでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="a6f32744141032da5bff0021214a9f0a8f72e942" translate="yes" xml:space="preserve">
          <source>openacc_lib.h</source>
          <target state="translated">openacc_lib.h</target>
        </trans-unit>
        <trans-unit id="21a94b187356f6639de170787b8b0236b1d55489" translate="yes" xml:space="preserve">
          <source>option (which exists for backwards compability only) is in effect.</source>
          <target state="translated">オプション(後方互換性のためだけに存在する)が有効になります。</target>
        </trans-unit>
        <trans-unit id="7cd170a8ec5cf578e8a1b74718a186076244d2a7" translate="yes" xml:space="preserve">
          <source>option and support for the file extensions</source>
          <target state="translated">オプションとファイル拡張子のサポート</target>
        </trans-unit>
        <trans-unit id="46dddf0d2774765cfbd4425ea3472294efd49c5c" translate="yes" xml:space="preserve">
          <source>option can be used to generate prototypes which conform to gfortran&amp;rsquo;s ABI, for inclusion in the source code.</source>
          <target state="translated">オプションを使用して、gfortranのABIに準拠するプロトタイプを生成し、ソースコードに含めることができます。</target>
        </trans-unit>
        <trans-unit id="8d2a8c3d168f9f29ea8a3e3a3b55392ccc7d5b17" translate="yes" xml:space="preserve">
          <source>option causes all C++-style comments inside a macro to be converted to C-style comments. This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line. The</source>
          <target state="translated">オプションを指定すると、マクロ内のすべての C++スタイルのコメントが C スタイルのコメントに変換されます。これは、後からそのマクロを使用する際に、うっかりソース行の残りの部分をコメントアウトしてしまうことを防ぐためです。このオプションを使用すると、マクロ内のすべての C++スタイルのコメントが C スタイルのコメントに変換されます。</target>
        </trans-unit>
        <trans-unit id="5f7873321f26f0d990c13e9a403ffb186d691b13" translate="yes" xml:space="preserve">
          <source>option except</source>
          <target state="translated">オプションを除いて</target>
        </trans-unit>
        <trans-unit id="b30bad31c44d5554857ee51285785dbaa4e87bd2" translate="yes" xml:space="preserve">
          <source>option extends support of Hollerith constants to comparisons:</source>
          <target state="translated">オプションは、Hollerith定数のサポートを比較にまで拡張します。</target>
        </trans-unit>
        <trans-unit id="3e715e6cf813b3fb8e875cb1b4d893d15277d8f9" translate="yes" xml:space="preserve">
          <source>option flag list:</source>
          <target state="translated">オプションフラグのリスト。</target>
        </trans-unit>
        <trans-unit id="f8a59604aa1481079b7689e1b94785aeca741601" translate="yes" xml:space="preserve">
          <source>option for more information.</source>
          <target state="translated">オプションで詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="3556e958b8c1ce0c992c816b18693450704dfd5a" translate="yes" xml:space="preserve">
          <source>option if you want object files compiled with GNU Fortran to be compatible with object code created with these tools.</source>
          <target state="translated">GNU Fortranでコンパイルされたオブジェクトファイルを、これらのツールで作成されたオブジェクトコードと互換性のあるものにしたい場合は、このオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="faf18f537fa40899cc1130e12579a59c575a8cd5" translate="yes" xml:space="preserve">
          <source>option initializes &lt;code&gt;REAL&lt;/code&gt; and &lt;code&gt;COMPLEX&lt;/code&gt; variables with a quiet NaN. For a signalling NaN use</source>
          <target state="translated">オプションは、 &lt;code&gt;REAL&lt;/code&gt; および &lt;code&gt;COMPLEX&lt;/code&gt; 変数をクワイエットNaNで初期化します。シグナルNaNを使用する場合</target>
        </trans-unit>
        <trans-unit id="2d1351c892abbbed783a3034224515fbc9786eec" translate="yes" xml:space="preserve">
          <source>option instructs the compiler to initialize local &lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, and &lt;code&gt;COMPLEX&lt;/code&gt; variables to zero, &lt;code&gt;LOGICAL&lt;/code&gt; variables to false, and &lt;code&gt;CHARACTER&lt;/code&gt; variables to a string of null bytes. Finer-grained initialization options are provided by the</source>
          <target state="translated">オプションは、ローカルの &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt; 、および &lt;code&gt;COMPLEX&lt;/code&gt; 変数をゼロに、 &lt;code&gt;LOGICAL&lt;/code&gt; 変数をfalseに、 &lt;code&gt;CHARACTER&lt;/code&gt; 変数をnullバイトの文字列に初期化するようコンパイラーに指示します。よりきめの細かい初期化オプションは、</target>
        </trans-unit>
        <trans-unit id="138b0af3ea6a0946f118342990e798f7bd579fd2" translate="yes" xml:space="preserve">
          <source>option is added.</source>
          <target state="translated">オプションが追加されました。</target>
        </trans-unit>
        <trans-unit id="c7091ba3109db02534597ef8e378b2538efffa4f" translate="yes" xml:space="preserve">
          <source>option is generally used to support lint comments.</source>
          <target state="translated">オプションは一般的に lint コメントをサポートするために使用されます。</target>
        </trans-unit>
        <trans-unit id="b24d04c41729d60f21d32bbbdb1a63f474f66a5a" translate="yes" xml:space="preserve">
          <source>option is given they are treated as if the first column contained a blank. If the</source>
          <target state="translated">オプションが与えられた場合、それらは最初の列に空白が含まれているかのように扱われます。オプションが与えられた場合は、最初の列に空白が含まれていたものとして扱われます。</target>
        </trans-unit>
        <trans-unit id="287e7f63ad39154ebe8fecc7c99d0f618b1a471f" translate="yes" xml:space="preserve">
          <source>option is given, they are treated as comment lines.</source>
          <target state="translated">オプションが与えられた場合、それらはコメント行として扱われます。</target>
        </trans-unit>
        <trans-unit id="90976eedeea57409cf17e2da87a1ee0ee77b5ef4" translate="yes" xml:space="preserve">
          <source>option is used. With any of those options continued character constants never have implicit spaces appended to them to fill out the line.</source>
          <target state="translated">オプションが使用されます。これらのオプションのいずれかを使用すると、継続文字定数は、行を埋めるためにそれらに暗黙のスペースが追加されることはありません。</target>
        </trans-unit>
        <trans-unit id="c4e83634651ab2e2fcb8d2a3eca160fe7a66d634" translate="yes" xml:space="preserve">
          <source>option will parse the value into an integer of type &lt;code&gt;INTEGER(kind=C_LONG)&lt;/code&gt; on the host. Said value is then assigned to the integer variables in the Fortran code, which might result in wraparound if the value is too large for the kind.</source>
          <target state="translated">option will parse the value into an integer of type &lt;code&gt;INTEGER(kind=C_LONG)&lt;/code&gt; on the host. Said value is then assigned to the integer variables in the Fortran code, which might result in wraparound if the value is too large for the kind.</target>
        </trans-unit>
        <trans-unit id="25417ae0a78b0af13771ed7615f72787bf0a4d94" translate="yes" xml:space="preserve">
          <source>option, altough this is rarely useful. If the length of a logical record exceeds this limit, the data is distributed among several subrecords.</source>
          <target state="translated">オプションを使用しますが、これが役に立つことはほとんどありません。論理レコードの長さがこの制限を超える場合、データは複数のサブレコードに分散されます。</target>
        </trans-unit>
        <trans-unit id="a34f2f3d76e4e1b302822281837cf4eec6b279a0" translate="yes" xml:space="preserve">
          <source>option, and so all intrinsic procedures described here are accepted. There is one caveat. For a select group of intrinsic procedures, &lt;code&gt;g77&lt;/code&gt; implemented both a function and a subroutine. Both classes have been implemented in &lt;code&gt;gfortran&lt;/code&gt; for backwards compatibility with &lt;code&gt;g77&lt;/code&gt;. It is noted here that these functions and subroutines cannot be intermixed in a given subprogram. In the descriptions that follow, the applicable standard for each intrinsic procedure is noted.</source>
          <target state="translated">オプション、およびここで説明されているすべての組み込み手続きが受け入れられます。注意点が1つあります。組み込み手続きの選択グループに対して、 &lt;code&gt;g77&lt;/code&gt; は関数とサブルーチンの両方を実装しました。どちらのクラスも、 &lt;code&gt;g77&lt;/code&gt; との下位互換性のために &lt;code&gt;gfortran&lt;/code&gt; に実装されています。ここで、これらの関数とサブルーチンを特定のサブプログラムに混在させることはできません。以下の説明では、各組み込み手続きに適用される標準が示されています。</target>
        </trans-unit>
        <trans-unit id="b9f390858f176c761bd4d024b001313103e7ff4b" translate="yes" xml:space="preserve">
          <source>option, but applies only to header files. See the</source>
          <target state="translated">オプションがありますが、ヘッダファイルにのみ適用されます。このオプションが適用されるのはヘッダーファイルのみです。</target>
        </trans-unit>
        <trans-unit id="ca06f45b34999ef78d83680cc23aee4feb47bec5" translate="yes" xml:space="preserve">
          <source>option, the</source>
          <target state="translated">オプションである</target>
        </trans-unit>
        <trans-unit id="b9e36dadee662e7af188ab666bac755b65329f40" translate="yes" xml:space="preserve">
          <source>option, the &lt;a href=&quot;convert-specifier#CONVERT-specifier&quot;&gt;CONVERT specifier&lt;/a&gt; in an open statement or the &lt;a href=&quot;gfortran_005fconvert_005funit#GFORTRAN_005fCONVERT_005fUNIT&quot;&gt;GFORTRAN_CONVERT_UNIT&lt;/a&gt; environment variable.</source>
          <target state="translated">option, the &lt;a href=&quot;convert-specifier#CONVERT-specifier&quot;&gt;CONVERT specifier&lt;/a&gt; in an open statement or the &lt;a href=&quot;gfortran_005fconvert_005funit#GFORTRAN_005fCONVERT_005fUNIT&quot;&gt;GFORTRAN_CONVERT_UNIT&lt;/a&gt; environment variable.</target>
        </trans-unit>
        <trans-unit id="6ae8466701cc7877c4bddede4c4fb980f9a951c6" translate="yes" xml:space="preserve">
          <source>option, the argument passing is modified and no longer completely matches the platform ABI. Some other Fortran compilers use &lt;code&gt;f2c&lt;/code&gt; semantic by default; this might cause problems with interoperablility.</source>
          <target state="translated">オプションでは、引数の受け渡しが変更され、プラットフォームのABIと完全に一致しなくなります。他の一部のFortranコンパイラーは、デフォルトで &lt;code&gt;f2c&lt;/code&gt; セマンティックを使用します。これは相互運用性に問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="b7327a6f71275be751e16853302d6797cd34f889" translate="yes" xml:space="preserve">
          <source>option, unless</source>
          <target state="translated">オプション</target>
        </trans-unit>
        <trans-unit id="12cb917fa6b139c69bd08293a23c4256c452e570" translate="yes" xml:space="preserve">
          <source>option.</source>
          <target state="translated">option.</target>
        </trans-unit>
        <trans-unit id="423425bb1735fe8335c27b50a1b492c0164e3f59" translate="yes" xml:space="preserve">
          <source>option. At the moment, this option only affects &lt;code&gt;FORALL&lt;/code&gt; and &lt;code&gt;DO CONCURRENT&lt;/code&gt; statements with several forall triplets.</source>
          <target state="translated">option. At the moment, this option only affects &lt;code&gt;FORALL&lt;/code&gt; and &lt;code&gt;DO CONCURRENT&lt;/code&gt; statements with several forall triplets.</target>
        </trans-unit>
        <trans-unit id="24fe3d79734f45c3cb85b43fb6884e4a13dbbb29" translate="yes" xml:space="preserve">
          <source>option. It will make GNU Fortran choose the smallest &lt;code&gt;INTEGER&lt;/code&gt; kind a given enumerator set will fit in, and give all its enumerators this kind.</source>
          <target state="translated">オプション。これにより、GNU Fortranは、指定された列挙子セットが適合する最小の &lt;code&gt;INTEGER&lt;/code&gt; 種類を選択し、すべての列挙子にこの種類を与えます。</target>
        </trans-unit>
        <trans-unit id="0617d98ebd8478371e5e0679fa2d7af359a09fd0" translate="yes" xml:space="preserve">
          <source>option. Optimizations enabled by this option include inlining calls to &lt;code&gt;MATMUL&lt;/code&gt;, elimination of identical function calls within expressions, removing unnecessary calls to &lt;code&gt;TRIM&lt;/code&gt; in comparisons and assignments and replacing &lt;code&gt;TRIM(a)&lt;/code&gt; with &lt;code&gt;a(1:LEN_TRIM(a))&lt;/code&gt;. It can be deselected by specifying</source>
          <target state="translated">オプション。最適化は、このオプションで有効にインラインの呼び出し含む &lt;code&gt;MATMUL&lt;/code&gt; 、式中の同じ関数呼び出しの除去に不必要な呼出しを除去 &lt;code&gt;TRIM&lt;/code&gt; 比較と割り当ておよび置換 &lt;code&gt;TRIM(a)&lt;/code&gt; とを &lt;code&gt;a(1:LEN_TRIM(a))&lt;/code&gt; 。指定することで選択を解除できます</target>
        </trans-unit>
        <trans-unit id="1853c2f7202c9954976851c97d33b2b4a06e6b87" translate="yes" xml:space="preserve">
          <source>option. This option is implied by</source>
          <target state="translated">オプションを使用します。このオプションは</target>
        </trans-unit>
        <trans-unit id="cb8daff2914505b56aa7be7e3b603f292e7e4638" translate="yes" xml:space="preserve">
          <source>optional; team on the which the inquiry is to be performed.</source>
          <target state="translated">任意;問い合わせが実行されるチーム。</target>
        </trans-unit>
        <trans-unit id="b186fbd0500f9fe44f2380f8246be6d9890766d9" translate="yes" xml:space="preserve">
          <source>optional; the kind of the resulting integer array.</source>
          <target state="translated">オプション;結果として得られる整数配列の種類。</target>
        </trans-unit>
        <trans-unit id="2eaa6d5ac1dfa500abd78c17f69dab63fb485980" translate="yes" xml:space="preserve">
          <source>options (and the directory of the current file, if appropriate) are searched.</source>
          <target state="translated">オプション (および適切な場合はカレントファイルのディレクトリ)が検索されます。</target>
        </trans-unit>
        <trans-unit id="aad1cb0d40ee3402c17e9ce478fccd81f8043e35" translate="yes" xml:space="preserve">
          <source>options are processed in the order they are given on the command line. All -imacros file and -include file options are processed after all -D and -U options.</source>
          <target state="translated">オプションは、コマンドラインで指定された順に処理されます。すべての -imacros ファイルおよび -include ファイルオプションは、すべての -D および -U オプションの後に処理されます。</target>
        </trans-unit>
        <trans-unit id="461a1f48c7d01c8208afeba6b7008faaa6051aae" translate="yes" xml:space="preserve">
          <source>options except when optimizing for size via</source>
          <target state="translated">オプションを使用してサイズを最適化する場合を除き</target>
        </trans-unit>
        <trans-unit id="0ce552b484c6baf569abee1187485cadddefa843" translate="yes" xml:space="preserve">
          <source>options will silence warnings that would have been emitted by</source>
          <target state="translated">オプションを指定すると</target>
        </trans-unit>
        <trans-unit id="eeec37a7c5de5e558698507dd9b10d6069b93b4e" translate="yes" xml:space="preserve">
          <source>options, which can be used to restrict the set of intrinsic procedures to a given standard. By default, &lt;code&gt;gfortran&lt;/code&gt; sets the</source>
          <target state="translated">オプション。組み込み手続きのセットを特定の標準に制限するために使用できます。デフォルトでは、 &lt;code&gt;gfortran&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="835470bacb439d9d9ed5b0fb6adc0d05997c0a0e" translate="yes" xml:space="preserve">
          <source>options.</source>
          <target state="translated">options.</target>
        </trans-unit>
        <trans-unit id="503a31a0aef5a90f801a2df18be9d8e43e463a55" translate="yes" xml:space="preserve">
          <source>options. If the &lt;var&gt;prefix&lt;/var&gt; represents a directory, you should include the final &lt;code&gt;'/'&lt;/code&gt;.</source>
          <target state="translated">オプション。 &lt;var&gt;prefix&lt;/var&gt; がディレクトリを表す場合は、最後の &lt;code&gt;'/'&lt;/code&gt; を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="1758356db21759f7c5a0da9b4dd1db8fd6feab3f" translate="yes" xml:space="preserve">
          <source>or</source>
          <target state="translated">or</target>
        </trans-unit>
        <trans-unit id="15207e97dc285c469651810c46695ae88381311c" translate="yes" xml:space="preserve">
          <source>or adding it.</source>
          <target state="translated">またはそれを追加します。</target>
        </trans-unit>
        <trans-unit id="1ac31865bdacb9fa6c7dbeeb75ff28738cae398a" translate="yes" xml:space="preserve">
          <source>or equivalent</source>
          <target state="translated">または同等の</target>
        </trans-unit>
        <trans-unit id="f3c446f5c600ee0723a591482edd6f3fc16d1ec1" translate="yes" xml:space="preserve">
          <source>or if</source>
          <target state="translated">或いは</target>
        </trans-unit>
        <trans-unit id="7575aa67b045f229769b11d1626612197866d7c5" translate="yes" xml:space="preserve">
          <source>or standard-conforming mode is enabled, this is an error.</source>
          <target state="translated">または標準適合モードが有効になっている場合はエラーです。</target>
        </trans-unit>
        <trans-unit id="7cb1b49562016ba76c59c7ec044adaf8cc02dc6c" translate="yes" xml:space="preserve">
          <source>or with:</source>
          <target state="translated">または一緒に。</target>
        </trans-unit>
        <trans-unit id="6ae2dc2ac7dc5d47b8c060f0e22c38089a3bea86" translate="yes" xml:space="preserve">
          <source>or,</source>
          <target state="translated">or,</target>
        </trans-unit>
        <trans-unit id="10e80591d92f76de99d040a135745da09e965721" translate="yes" xml:space="preserve">
          <source>overflow</source>
          <target state="translated">overflow</target>
        </trans-unit>
        <trans-unit id="4149a32b415d88839c45c3b1f1c432b9aea20387" translate="yes" xml:space="preserve">
          <source>platforms which use the GNU C Library (glibc)</source>
          <target state="translated">GNU C ライブラリ (glibc)を使用するプラットフォーム</target>
        </trans-unit>
        <trans-unit id="aebf9343fb5e97ec99071763d5134ef00c0c95b7" translate="yes" xml:space="preserve">
          <source>platforms with support for SysV/386 routines for floating point interface (including Solaris and BSDs)</source>
          <target state="translated">浮動小数点インターフェイス用の SysV/386 ルーチンをサポートするプラットフォーム (Solaris および BSD を含む)</target>
        </trans-unit>
        <trans-unit id="dc8880b02ba33882587808f96c9cce75017781ce" translate="yes" xml:space="preserve">
          <source>platforms with the AIX OS</source>
          <target state="translated">プラットフォームと AIX OS</target>
        </trans-unit>
        <trans-unit id="b35bb38df9605e4c5858316b7853a16e42ea6997" translate="yes" xml:space="preserve">
          <source>pointer</source>
          <target state="translated">pointer</target>
        </trans-unit>
        <trans-unit id="d1f4ebfda5b47a773e00bd291970f315bc667b29" translate="yes" xml:space="preserve">
          <source>pointer interoperable with &lt;var&gt;cptr&lt;/var&gt;. It is &lt;code&gt;INTENT(OUT)&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;cptr&lt;/var&gt; と相互運用可能なポインタ。それは &lt;code&gt;INTENT(OUT)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31d0b624910a4b7c8e86205cd558df13bb986d6f" translate="yes" xml:space="preserve">
          <source>precision greater than or equal to &lt;code&gt;P&lt;/code&gt;, but the &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;RADIX&lt;/code&gt; requirements can be fulfilled</source>
          <target state="translated">&lt;code&gt;P&lt;/code&gt; 以上の精度ですが、 &lt;code&gt;R&lt;/code&gt; および &lt;code&gt;RADIX&lt;/code&gt; の要件を満たすことができます</target>
        </trans-unit>
        <trans-unit id="2a609d8b6eabd5abd1462e4b709db12a4397fc81" translate="yes" xml:space="preserve">
          <source>prefix quote digits quote</source>
          <target state="translated">プレフィックス引用符 数字引用符</target>
        </trans-unit>
        <trans-unit id="ebc67bc60f36362ea4b9599cdd2a8b18adda1a4b" translate="yes" xml:space="preserve">
          <source>procedure pointer interoperable with &lt;var&gt;cptr&lt;/var&gt;. It is &lt;code&gt;INTENT(OUT)&lt;/code&gt;.</source>
          <target state="translated">&lt;var&gt;cptr&lt;/var&gt; と相互運用可能なプロシージャポインタ。それは &lt;code&gt;INTENT(OUT)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81503dacd5c0d1686795eef17cfffc587b8f8036" translate="yes" xml:space="preserve">
          <source>pure function with two scalar nonallocatable arguments, which shall be nonpolymorphic and have the same type and type parameters as &lt;var&gt;A&lt;/var&gt;. The function shall return a nonallocatable scalar of the same type and type parameters as &lt;var&gt;A&lt;/var&gt;. The function shall be the same on all images and with regards to the arguments mathematically commutative and associative. Note that &lt;var&gt;OPERATOR&lt;/var&gt; may not be an elemental function, unless it is an intrisic function.</source>
          <target state="translated">2つのスカラーの割り当て不可能な引数を持つ純粋な関数。これらは非多相であり、 &lt;var&gt;A&lt;/var&gt; と同じ型と型パラメーターを持ちます。関数は、 &lt;var&gt;A&lt;/var&gt; と同じ型および型パラメーターの割り当て不可のスカラーを返します。関数は、すべての画像で同じであり、引数に関して数学的に可換的かつ連想的です。 &lt;var&gt;OPERATOR&lt;/var&gt; は、組み込み関数でない限り、要素関数ではない可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="67c20a4b9186099107113a1238627a8f556312fb" translate="yes" xml:space="preserve">
          <source>range greater than or equal to &lt;code&gt;R&lt;/code&gt;, but &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;RADIX&lt;/code&gt; are fulfillable</source>
          <target state="translated">&lt;code&gt;R&lt;/code&gt; 以上の範囲ですが、 &lt;code&gt;P&lt;/code&gt; と &lt;code&gt;RADIX&lt;/code&gt; は満たされます</target>
        </trans-unit>
        <trans-unit id="1ec362cb7d87fee296be85bb7958cd5060dcaacb" translate="yes" xml:space="preserve">
          <source>recursion</source>
          <target state="translated">recursion</target>
        </trans-unit>
        <trans-unit id="e78f6ff8fbc54ae9f6cfee89ff8b3e4d5badc065" translate="yes" xml:space="preserve">
          <source>removing unnecessary calls to &lt;code&gt;TRIM&lt;/code&gt; in comparisons and assignments,</source>
          <target state="translated">removing unnecessary calls to &lt;code&gt;TRIM&lt;/code&gt; in comparisons and assignments,</target>
        </trans-unit>
        <trans-unit id="46ff44d1ca669fafcb26a0787762a184f26821da" translate="yes" xml:space="preserve">
          <source>replacing &lt;code&gt;TRIM(a)&lt;/code&gt; with &lt;code&gt;a(1:LEN_TRIM(a))&lt;/code&gt; and</source>
          <target state="translated">replacing &lt;code&gt;TRIM(a)&lt;/code&gt; with &lt;code&gt;a(1:LEN_TRIM(a))&lt;/code&gt; and</target>
        </trans-unit>
        <trans-unit id="819058b65252d029de261449f9498a5e4222043a" translate="yes" xml:space="preserve">
          <source>scalar of the type &lt;code&gt;C_FUNPTR&lt;/code&gt;. It is &lt;code&gt;INTENT(IN)&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;C_FUNPTR&lt;/code&gt; のスカラー。それは &lt;code&gt;INTENT(IN)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9619df87ad5b8d0cffb524d9db5432d401495cb7" translate="yes" xml:space="preserve">
          <source>scalar of the type &lt;code&gt;C_PTR&lt;/code&gt;. It is &lt;code&gt;INTENT(IN)&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;C_PTR&lt;/code&gt; のスカラー。それは &lt;code&gt;INTENT(IN)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c100f5177622824e526bd2cff4fe2591455f888" translate="yes" xml:space="preserve">
          <source>shall be -1, 0, or 1</source>
          <target state="translated">は-1、0、または1でなければならない。</target>
        </trans-unit>
        <trans-unit id="e11bc8db23be401b73ea4ba436e695069a4319e8" translate="yes" xml:space="preserve">
          <source>shall be an integer, real or character variable, which has the same type and type parameters on all images of the team.</source>
          <target state="translated">は、整数、実数、文字のいずれかの変数で、チームのすべての画像に同じ型と型パラメータを持つものとする。</target>
        </trans-unit>
        <trans-unit id="876f21c9041df223eb7d36b233a1216a066a05bb" translate="yes" xml:space="preserve">
          <source>shall be an integer, real or complex variable, which has the same type and type parameters on all images of the team.</source>
          <target state="translated">は、整数、実数または複素数の変数で、チームのすべての画像に同じ型と型パラメータを持つものとする。</target>
        </trans-unit>
        <trans-unit id="754e6a0f423fa609374c119a06dd1be2850f58b5" translate="yes" xml:space="preserve">
          <source>short-circuiting of logical operators (&lt;code&gt;.AND.&lt;/code&gt; and &lt;code&gt;.OR.&lt;/code&gt;).</source>
          <target state="translated">short-circuiting of logical operators ( &lt;code&gt;.AND.&lt;/code&gt; and &lt;code&gt;.OR.&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="ce0b1612aa711b78a720295d271a33894e2b72bf" translate="yes" xml:space="preserve">
          <source>single</source>
          <target state="translated">single</target>
        </trans-unit>
        <trans-unit id="0a6e2d7628cf0474c6c912a6bba3b83770aa6e9e" translate="yes" xml:space="preserve">
          <source>subroutine</source>
          <target state="translated">subroutine</target>
        </trans-unit>
        <trans-unit id="a0a26055aa647c7655ff344172186c18c0368f94" translate="yes" xml:space="preserve">
          <source>such that truncations are reported as error.</source>
          <target state="translated">のように、切り捨てがエラーとして報告されるようにします。</target>
        </trans-unit>
        <trans-unit id="ade3217578be1546a1b2a6827e4b13aa6d48d141" translate="yes" xml:space="preserve">
          <source>swap</source>
          <target state="translated">swap</target>
        </trans-unit>
        <trans-unit id="8c16ef009120e8094f13233a82aa09319ebbe601" translate="yes" xml:space="preserve">
          <source>tail call optimization is disabled in all gfortran procedures with character arguments, with</source>
          <target state="translated">テールコールの最適化は、文字引数を持つすべての gfortran プロシージャで無効になります。</target>
        </trans-unit>
        <trans-unit id="8afd4b5d93b2a139a83662e7e0b82aa8491d287d" translate="yes" xml:space="preserve">
          <source>target associated with &lt;var&gt;POINTER&lt;/var&gt; and the target associated with &lt;var&gt;TARGET&lt;/var&gt; have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and &lt;var&gt;TARGET&lt;/var&gt; and &lt;var&gt;POINTER&lt;/var&gt; occupy the same storage units in array element order. The result is false, if either &lt;var&gt;TARGET&lt;/var&gt; or &lt;var&gt;POINTER&lt;/var&gt; is disassociated.</source>
          <target state="translated">&lt;var&gt;POINTER&lt;/var&gt; に関連付けられたターゲットと &lt;var&gt;TARGET&lt;/var&gt; に関連付けられたターゲットは同じ形状を持ち、サイズがゼロの配列ではなく、要素がサイズがゼロのストレージシーケンスではない配列であり、 &lt;var&gt;TARGET&lt;/var&gt; と &lt;var&gt;POINTER&lt;/var&gt; は配列要素の順序で同じストレージユニットを占有します。 &lt;var&gt;TARGET&lt;/var&gt; または &lt;var&gt;POINTER&lt;/var&gt; の関連付けが解除されている場合、結果はfalse です。</target>
        </trans-unit>
        <trans-unit id="a04d7e97691cac9fa21cc2c1727b513d58907ee0" translate="yes" xml:space="preserve">
          <source>the buffer size of errmsg.</source>
          <target state="translated">errmsgのバッファサイズ。</target>
        </trans-unit>
        <trans-unit id="3407790e76ade08f5621b00541c84788000db589" translate="yes" xml:space="preserve">
          <source>the command-line argument strings; argv[0] is the pathname of the executable itself.</source>
          <target state="translated">argv[0]は実行ファイルのパス名です。</target>
        </trans-unit>
        <trans-unit id="f7316138e93b6f1077a4e8c0c10a40a6aabb0213" translate="yes" xml:space="preserve">
          <source>the data type, i.e. &lt;code&gt;BT_INTEGER&lt;/code&gt; (1) or &lt;code&gt;BT_LOGICAL&lt;/code&gt; (2).</source>
          <target state="translated">データ型、つまり &lt;code&gt;BT_INTEGER&lt;/code&gt; （1）または &lt;code&gt;BT_LOGICAL&lt;/code&gt; （2）。</target>
        </trans-unit>
        <trans-unit id="d0a58458c0c7eeebc72672ded1b3cadf21e05a5c" translate="yes" xml:space="preserve">
          <source>the distance from this image to the ancestor. Shall be positive.</source>
          <target state="translated">この画像から祖先までの距離を 正でなければならない。</target>
        </trans-unit>
        <trans-unit id="cf81f6aaca3c9b58b11682a24caa3eeba563266d" translate="yes" xml:space="preserve">
          <source>the maximum length for a subrecord; the maximum permitted value is 2147483639, which is also the default.</source>
          <target state="translated">サブレコードの最大長を指定します。</target>
        </trans-unit>
        <trans-unit id="930a883f5491fe120e904a7088ece0ae97f6f47e" translate="yes" xml:space="preserve">
          <source>the positive scalar id of the image in the current TEAM.</source>
          <target state="translated">現在のTEAMの画像の正のスカラーID。</target>
        </trans-unit>
        <trans-unit id="d68abd242c6370cf39d9f99e6286ef1833e644c1" translate="yes" xml:space="preserve">
          <source>the token to free.</source>
          <target state="translated">トークンを自由にすることができます。</target>
        </trans-unit>
        <trans-unit id="7faa6a77513725b31df0b7cc8968bc2d3ebe484f" translate="yes" xml:space="preserve">
          <source>the type of action to take for the coarray. A &lt;code&gt;CAF_DEREGTYPE_COARRAY_DEALLOCATE_ONLY&lt;/code&gt; is allowed only for allocatable or pointer components of derived type coarrays. The action only deallocates the local memory without deleting the token.</source>
          <target state="translated">Co-Arrayに対して実行するアクションのタイプ。A &lt;code&gt;CAF_DEREGTYPE_COARRAY_DEALLOCATE_ONLY&lt;/code&gt; にのみ派生型coarraysの割り当てまたはポインタコンポーネントに許可されています。このアクションは、トークンを削除せずにローカルメモリの割り当てを解除するだけです。</target>
        </trans-unit>
        <trans-unit id="5b5dd8c9ff824ec9ed1299ba9e3f206e549366f7" translate="yes" xml:space="preserve">
          <source>the value will &amp;ldquo;wrap around&amp;rdquo; and &lt;code&gt;i&lt;/code&gt; will be initialized to &lt;em&gt;-1&lt;/em&gt; instead.</source>
          <target state="translated">値は「循環」し、代わりに &lt;code&gt;i&lt;/code&gt; が&lt;em&gt;-1&lt;/em&gt;に初期化されます。</target>
        </trans-unit>
        <trans-unit id="e3bd2ac3c4ecbd8d070128bab4585b0f261719c7" translate="yes" xml:space="preserve">
          <source>there will only be a single call to &lt;code&gt;f&lt;/code&gt;. This option only works if</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; の呼び出しは1回だけです。このオプションは、次の場合にのみ機能します</target>
        </trans-unit>
        <trans-unit id="ce0b84d0dd06526675c367a9b37baa8d05636232" translate="yes" xml:space="preserve">
          <source>though, so also</source>
          <target state="translated">然しながら</target>
        </trans-unit>
        <trans-unit id="4374aaee247fb237ce6c97d5c8d64bbe474d16de" translate="yes" xml:space="preserve">
          <source>to</source>
          <target state="translated">to</target>
        </trans-unit>
        <trans-unit id="58290606c3460d65f954245fc13085dc9fb00b03" translate="yes" xml:space="preserve">
          <source>to allow for recursive procedures which do not have a RECURSIVE attribute or for parallel programs. Use</source>
          <target state="translated">を使用して、RECURSIVE属性を持たない再帰的なプロシージャや、並列プログラムを可能にします。並列プログラムのために</target>
        </trans-unit>
        <trans-unit id="175241870abde22a0be0b3aac8163545ef8c3eb8" translate="yes" xml:space="preserve">
          <source>to check programs for conformance. They soon find that it does not do quite what they want&amp;mdash;it finds some nonstandard practices, but not all. However, improvements to GNU Fortran in this area are welcome.</source>
          <target state="translated">プログラムの適合性をチェックします。彼らはすぐにそれが彼らが望んでいることを全くしないことに気づきます－それはすべてではなくいくつかの非標準的な慣行を見つけます。ただし、この分野でのGNU Fortranの改善は歓迎されます。</target>
        </trans-unit>
        <trans-unit id="c76aacb822227bb99791ba9c41442a01f2a7f418" translate="yes" xml:space="preserve">
          <source>to enable the extension.</source>
          <target state="translated">を使用して拡張子を有効にします。</target>
        </trans-unit>
        <trans-unit id="3b9acd43263622cec1b2ad4f0e876aff9b871918" translate="yes" xml:space="preserve">
          <source>to force standard-compliance but get access to the full range of intrinsics available with &lt;code&gt;gfortran&lt;/code&gt;. As a consequence,</source>
          <target state="translated">標準準拠を強制しますが、 &lt;code&gt;gfortran&lt;/code&gt; で使用可能な組み込みの全範囲にアクセスできます。結果として、</target>
        </trans-unit>
        <trans-unit id="12b49323bb42ef72b6d00da7d458b41262f07945" translate="yes" xml:space="preserve">
          <source>to never use the stack.</source>
          <target state="translated">を使ってスタックを絶対に使わないようにしましょう。</target>
        </trans-unit>
        <trans-unit id="a487cdc42f348f32bb8abc739adc4b9c8e68d91f" translate="yes" xml:space="preserve">
          <source>to print &amp;ldquo;Hello World&amp;rdquo; from Fortran, one can call it using</source>
          <target state="translated">Fortranから「Hello World」を印刷するには、次のコマンドを使用して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c229f515f93d84975158baab99770dc72d593ef2" translate="yes" xml:space="preserve">
          <source>to request warnings on implicit declarations. Each of these specific warning options also has a negative form beginning</source>
          <target state="translated">を使用して、暗黙の宣言に対する警告を要求することができます。これらの特定の警告オプションのそれぞれは、負の形式で始まる</target>
        </trans-unit>
        <trans-unit id="2cf73b040d3ebb1a557b25499750c11e6de3ec66" translate="yes" xml:space="preserve">
          <source>to turn off warnings; for example,</source>
          <target state="translated">を使用して警告をオフにします。</target>
        </trans-unit>
        <trans-unit id="19015b8c94f51ee823f61956ac164471d73f4dd5" translate="yes" xml:space="preserve">
          <source>to use no static memory.</source>
          <target state="translated">を使用してスタティックメモリを使用しないようにします。</target>
        </trans-unit>
        <trans-unit id="36e14f2c6b35cc9a0321a033c591b6ea1d4e4a21" translate="yes" xml:space="preserve">
          <source>underflow</source>
          <target state="translated">underflow</target>
        </trans-unit>
        <trans-unit id="67ad5a07a2b999e38f2228365318c33459ab727a" translate="yes" xml:space="preserve">
          <source>union</source>
          <target state="translated">union</target>
        </trans-unit>
        <trans-unit id="42e184930956d048c819e40f18f94f0094d47bc6" translate="yes" xml:space="preserve">
          <source>unless</source>
          <target state="translated">unless</target>
        </trans-unit>
        <trans-unit id="679625c058dc3d2ec7b3e088cae949818bb4ef55" translate="yes" xml:space="preserve">
          <source>variables that appear in an &lt;code&gt;EQUIVALENCE&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;EQUIVALENCE&lt;/code&gt; 文に現れる変数。</target>
        </trans-unit>
        <trans-unit id="8e20de8c86b03fce756f44020e334524e1e43cf0" translate="yes" xml:space="preserve">
          <source>vertical tab</source>
          <target state="translated">縦タブ</target>
        </trans-unit>
        <trans-unit id="e6e6862204ddc536a1d78809a8a7a3e4e4f4e18d" translate="yes" xml:space="preserve">
          <source>was built when the compiler was configured, this option has no effect.</source>
          <target state="translated">がコンパイラーの設定時にビルドされていた場合、このオプションは何の影響も受けません。</target>
        </trans-unit>
        <trans-unit id="21eb15aba4be708707af156d3f8a747af52717e8" translate="yes" xml:space="preserve">
          <source>when &lt;code&gt;a.out&lt;/code&gt; is the compiled Fortran program that you want to run. Default is a single space.</source>
          <target state="translated">とき &lt;code&gt;a.out&lt;/code&gt; が、実行することをコンパイルしたFortranのプログラムです。デフォルトは単一のスペースです。</target>
        </trans-unit>
        <trans-unit id="f138e9d634fdf24c393cc63f5b7d7f32db5395c0" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;TYPESPEC&lt;/code&gt; is a basic type (&lt;code&gt;INTEGER&lt;/code&gt;, &lt;code&gt;REAL&lt;/code&gt;, etc.), and where &lt;code&gt;size&lt;/code&gt; is a byte count corresponding to the storage size of a valid kind for that type. (For &lt;code&gt;COMPLEX&lt;/code&gt; variables, &lt;code&gt;size&lt;/code&gt; is the total size of the real and imaginary parts.) The statement then declares &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; to be of type &lt;code&gt;TYPESPEC&lt;/code&gt; with the appropriate kind. This is equivalent to the standard-conforming declaration</source>
          <target state="translated">ここで、 &lt;code&gt;TYPESPEC&lt;/code&gt; は基本タイプ（ &lt;code&gt;INTEGER&lt;/code&gt; 、 &lt;code&gt;REAL&lt;/code&gt; など）であり、 &lt;code&gt;size&lt;/code&gt; はそのタイプの有効な種類のストレージサイズに対応するバイト数です。 （ &lt;code&gt;COMPLEX&lt;/code&gt; 変数の場合、 &lt;code&gt;size&lt;/code&gt; は実数部と虚数部の合計サイズです。）次に、ステートメントは、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; が適切な種類の &lt;code&gt;TYPESPEC&lt;/code&gt; 型であることを宣言します。これは、標準に準拠した宣言に相当します</target>
        </trans-unit>
        <trans-unit id="106f049255c1037131151279d9bf42f29a26e2ce" translate="yes" xml:space="preserve">
          <source>where &lt;code&gt;k&lt;/code&gt; is the kind parameter suitable for the intended precision. As kind parameters are implementation-dependent, use the &lt;code&gt;KIND&lt;/code&gt;, &lt;code&gt;SELECTED_INT_KIND&lt;/code&gt; and &lt;code&gt;SELECTED_REAL_KIND&lt;/code&gt; intrinsics to retrieve the correct value, for instance &lt;code&gt;REAL*8 x&lt;/code&gt; can be replaced by:</source>
          <target state="translated">ここで、 &lt;code&gt;k&lt;/code&gt; は目的の精度に適した種類のパラメーターです。種類パラメータは実装に依存するため、 &lt;code&gt;KIND&lt;/code&gt; 、 &lt;code&gt;SELECTED_INT_KIND&lt;/code&gt; 、および &lt;code&gt;SELECTED_REAL_KIND&lt;/code&gt; 組み込み関数を使用して正しい値を取得します。たとえば、 &lt;code&gt;REAL*8 x&lt;/code&gt; は次のように置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="72fe5a3c57c54d3e2df5873ea9ccfd1fc3a8e0c9" translate="yes" xml:space="preserve">
          <source>where in free-form source code only whitespace is allowed before &lt;code&gt;!GCC$&lt;/code&gt; and in fixed-form source code &lt;code&gt;!GCC$&lt;/code&gt;, &lt;code&gt;cGCC$&lt;/code&gt; or &lt;code&gt;*GCC$&lt;/code&gt; shall start in the first column.</source>
          <target state="translated">自由形式のソースコードでは、 &lt;code&gt;!GCC$&lt;/code&gt; 前に空白のみが許可され、固定形式のソースコードでは &lt;code&gt;!GCC$&lt;/code&gt; 、 &lt;code&gt;cGCC$&lt;/code&gt; または &lt;code&gt;*GCC$&lt;/code&gt; は最初の列から開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="976b09a5872dfbfbe83998f6bc24c8c24ead00cf" translate="yes" xml:space="preserve">
          <source>where the C code intended for interoperating with the Fortran code then uses &lt;code&gt;#include &quot;foo.h&quot;&lt;/code&gt;.</source>
          <target state="translated">where the C code intended for interoperating with the Fortran code then uses &lt;code&gt;#include &quot;foo.h&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ba5f4a488a95f68e495af46779a064e4a2d6d895" translate="yes" xml:space="preserve">
          <source>will be ignored and no user-defined procedure with the same name as any intrinsic will be called except when it is explicitly declared &lt;code&gt;EXTERNAL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EXTERNAL&lt;/code&gt; が明示的に宣言されている場合を除いて、無視され、組み込みと同じ名前のユーザー定義プロシージャは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="98a9b25f5321a98f1dce9cf581bf7cb1bd4139f7" translate="yes" xml:space="preserve">
          <source>will cause a warning to be issued if a tab is encountered. Note,</source>
          <target state="translated">を使用すると、タブに遭遇した場合に警告が表示されます。注意してください。</target>
        </trans-unit>
        <trans-unit id="abd1c0581f4e0c24d7b8edaf4b7bbe5f6c665192" translate="yes" xml:space="preserve">
          <source>will compile the file with all checks enabled as specified above except warnings for generated array temporaries.</source>
          <target state="translated">は、生成された配列のテンポラリに対する警告を除いて、上記で指定されたすべてのチェックを有効にしてファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="8cd24269c88b630d3e1526473ce0dc27e5552e94" translate="yes" xml:space="preserve">
          <source>will show all the predefined macros.</source>
          <target state="translated">はすべての定義済みマクロを表示します。</target>
        </trans-unit>
        <trans-unit id="5f9f286f890efae667cf8be4c3e3f0f9db0bad42" translate="yes" xml:space="preserve">
          <source>with &lt;code&gt;#include&lt;/code&gt; in the &lt;code&gt;cpp&lt;/code&gt; preprocessor, with regard to looking for</source>
          <target state="translated">&lt;code&gt;cpp&lt;/code&gt; プリプロセッサで &lt;code&gt;#include&lt;/code&gt; を使用して、検索に関して</target>
        </trans-unit>
        <trans-unit id="380dd5456f2c95e0b9a35505ef92da839c0c01fb" translate="yes" xml:space="preserve">
          <source>with code compiled with the default</source>
          <target state="translated">でコンパイルされたコードで</target>
        </trans-unit>
        <trans-unit id="671e80331550079d85338e454d62ec7cf1db23b8" translate="yes" xml:space="preserve">
          <source>with the following:</source>
          <target state="translated">を添えて。</target>
        </trans-unit>
        <trans-unit id="0b290e6292697adca00d7d3d5662240ab8fc30bb" translate="yes" xml:space="preserve">
          <source>would be</source>
          <target state="translated">であろう</target>
        </trans-unit>
        <trans-unit id="95cb0bfd2977c761298d9624e4b4d4c72a39974a" translate="yes" xml:space="preserve">
          <source>y</source>
          <target state="translated">y</target>
        </trans-unit>
        <trans-unit id="aa8c41330509455ee5679d04ed41535d280d9a89" translate="yes" xml:space="preserve">
          <source>zero</source>
          <target state="translated">zero</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
