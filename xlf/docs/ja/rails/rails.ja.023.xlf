<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="2ab15d11218b04ab1e55edd9e2351474404876f9" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; Controller stack includes all renderers, which means you can use &lt;code&gt;render :json&lt;/code&gt; and brothers freely in your controllers. Keep in mind that templates are not going to be rendered, so you need to ensure your controller is calling either &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;redirect_to&lt;/code&gt; in all actions, otherwise it will return 204 No Content.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;api&quot;&gt;API&lt;/a&gt;コントローラースタックにはすべてのレンダラーが含まれています。つまり、コントローラーで &lt;code&gt;render :json&lt;/code&gt; とBrothersを自由に使用できます。テンプレートはレンダリングされないので、コントローラーがすべてのアクションで &lt;code&gt;render&lt;/code&gt; または &lt;code&gt;redirect_to&lt;/code&gt; を呼び出していることを確認する必要があります。そうでない場合、204 No Contentが返されます。</target>
        </trans-unit>
        <trans-unit id="68002b170cf143cd31a7dd0a441517d28da354ce" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;chars&quot;&gt;&lt;code&gt;Chars&lt;/code&gt;&lt;/a&gt; implementation assumes that the encoding of the string is UTF-8, if you want to handle different encodings you can write your own multibyte string handler and configure it through &lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt;&lt;code&gt;ActiveSupport::Multibyte.proxy_class&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;chars&quot;&gt; &lt;code&gt;Chars&lt;/code&gt; &lt;/a&gt;実装では、文字列のエンコードがUTF-8であると想定しています。さまざまなエンコードを処理する場合は、独自のマルチバイト文字列ハンドラーを作成し、&lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt; &lt;code&gt;ActiveSupport::Multibyte.proxy_class&lt;/code&gt; &lt;/a&gt;を使用して構成できます。</target>
        </trans-unit>
        <trans-unit id="dc90e3304a747d9958eb86ef66ce3055efc93b4d" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;chars&quot;&gt;Chars&lt;/a&gt; implementation assumes that the encoding of the string is UTF-8, if you want to handle different encodings you can write your own multibyte string handler and configure it through &lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt;ActiveSupport::Multibyte.proxy_class&lt;/a&gt;.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;chars&quot;&gt;Chars&lt;/a&gt;実装は、文字列のエンコーディングがUTF-8であると想定しています。異なるエンコーディングを処理したい場合は、独自のマルチバイト文字列ハンドラを&lt;a href=&quot;../multibyte#method-c-proxy_class&quot;&gt;記述&lt;/a&gt;し、ActiveSupport :: Multibyte.proxy_classを介して構成できます。</target>
        </trans-unit>
        <trans-unit id="0999be2b2dd63e205841c3741dbcba8d12a40141" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;connectionpool&quot;&gt;&lt;code&gt;ConnectionPool&lt;/code&gt;&lt;/a&gt; maximum size is 5.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;connectionpool&quot;&gt; &lt;code&gt;ConnectionPool&lt;/code&gt; の&lt;/a&gt;最大サイズは5です。</target>
        </trans-unit>
        <trans-unit id="b0d39dd78e8545ab21333b000c8adbc3abe6b759" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;connectionpool&quot;&gt;ConnectionPool&lt;/a&gt; maximum size is 5.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;connectionpool&quot;&gt;ConnectionPool&lt;/a&gt;最大サイズは5です。</target>
        </trans-unit>
        <trans-unit id="417f6a3218aa19f90d2676b492b9137303dbd659" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;en.yml&lt;/code&gt; locale in this directory contains a sample pair of translation strings:</source>
          <target state="translated">このディレクトリのデフォルトの &lt;code&gt;en.yml&lt;/code&gt; ロケールには、翻訳文字列のサンプルペアが含まれています。</target>
        </trans-unit>
        <trans-unit id="b0d259d82af709edf493880239feb894d39f182f" translate="yes" xml:space="preserve">
          <source>The default Content-Type and Content-Disposition headers are set to download arbitrary binary files in as many browsers as possible. IE versions 4, 5, 5.5, and 6 are all known to have a variety of quirks (especially when downloading over SSL).</source>
          <target state="translated">デフォルトの Content-Type ヘッダと Content-Disposition ヘッダは、できるだけ多くのブラウザで任意のバイナリファイルをダウンロードするように設定されています。IE のバージョン 4,5,5.5,5.5,6 はいずれも様々なクセがあることが知られています (特に SSL 経由でダウンロードする場合)。</target>
        </trans-unit>
        <trans-unit id="8cb593908b345bbc3e5cdf84afbaa780e9d63901" translate="yes" xml:space="preserve">
          <source>The default HTTP status code used in &lt;code&gt;ActionDispatch::SSL&lt;/code&gt; when redirecting non-GET/HEAD requests from HTTP to HTTPS has been changed to &lt;code&gt;308&lt;/code&gt; as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc7538&quot;&gt;https://tools.ietf.org/html/rfc7538&lt;/a&gt;.</source>
          <target state="translated">で使用されるデフォルトのHTTPステータスコード &lt;code&gt;ActionDispatch::SSL&lt;/code&gt; HTTPからHTTPSに非GET / HEADリクエストをリダイレクトすることに変更されたとき、 &lt;code&gt;308&lt;/code&gt; で定義されているよう&lt;a href=&quot;https://tools.ietf.org/html/rfc7538&quot;&gt;https://tools.ietf.org/html/rfc7538&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="db07404c73b8a2a45b04e8b6ffb034a810331405" translate="yes" xml:space="preserve">
          <source>The default Rails log level is &lt;code&gt;debug&lt;/code&gt; in all environments.</source>
          <target state="translated">デフォルトのRailsログレベルは、すべての環境で &lt;code&gt;debug&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="38a0c4e49d718aec7078c57bc4c8099a64d09f22" translate="yes" xml:space="preserve">
          <source>The default XML builder is a fresh instance of &lt;code&gt;Builder::XmlMarkup&lt;/code&gt;. You can configure your own builder via the &lt;code&gt;:builder&lt;/code&gt; option. The method also accepts options like &lt;code&gt;:dasherize&lt;/code&gt; and friends, they are forwarded to the builder:</source>
          <target state="translated">デフォルトのXMLビルダーは、 &lt;code&gt;Builder::XmlMarkup&lt;/code&gt; 新しいインスタンスです。 &lt;code&gt;:builder&lt;/code&gt; オプションを使用して独自のビルダーを設定できます。このメソッドは、 &lt;code&gt;:dasherize&lt;/code&gt; やfriends などのオプションも受け入れます。これらはビルダーに転送されます。</target>
        </trans-unit>
        <trans-unit id="4ff911b45d3f05d4d40816676a3ed43ffe82d1a8" translate="yes" xml:space="preserve">
          <source>The default XML builder is a fresh instance of &lt;code&gt;Builder::XmlMarkup&lt;/code&gt;. You can configure your own builder with the &lt;code&gt;:builder&lt;/code&gt; option. The method also accepts options like &lt;code&gt;:dasherize&lt;/code&gt; and friends, they are forwarded to the builder.</source>
          <target state="translated">デフォルトのXMLビルダーは、 &lt;code&gt;Builder::XmlMarkup&lt;/code&gt; 新しいインスタンスです。 &lt;code&gt;:builder&lt;/code&gt; オプションを使用して独自のビルダーを設定できます。このメソッドは、 &lt;code&gt;:dasherize&lt;/code&gt; やfriends などのオプションも受け入れます。これらはビルダーに転送されます。</target>
        </trans-unit>
        <trans-unit id="fdfbcaff28aa74fc6b3972d42c3a0b707432a40f" translate="yes" xml:space="preserve">
          <source>The default behavior can be changed by setting the config options to a custom class:</source>
          <target state="translated">デフォルトの動作は、configオプションをカスタムクラスに設定することで変更することができます。</target>
        </trans-unit>
        <trans-unit id="964deb4deb137c72b1a8c946cd6ea798ee2b77c0" translate="yes" xml:space="preserve">
          <source>The default configuration for Rails 6</source>
          <target state="translated">Rails 6のデフォルト設定</target>
        </trans-unit>
        <trans-unit id="cefd9f0956a756fa1742eab5d0fdfe7c9672a491" translate="yes" xml:space="preserve">
          <source>The default confirmation uses a JavaScript confirm dialog, but you can customize this by listening to the &lt;code&gt;confirm&lt;/code&gt; event, which is fired just before the confirmation window appears to the user. To cancel this default confirmation, have the confirm handler return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトの確認ではJavaScriptの確認ダイアログが使用されますが、確認ウィンドウがユーザーに表示される直前に発生 &lt;code&gt;confirm&lt;/code&gt; イベントをリッスンすることで、これをカスタマイズできます。このデフォルトの確認をキャンセルするには、確認ハンドラーが &lt;code&gt;false&lt;/code&gt; を返すようにします。</target>
        </trans-unit>
        <trans-unit id="e5118e78e0f72e8d201c79ffa5ee19f3bb74d601" translate="yes" xml:space="preserve">
          <source>The default confirmation uses a JavaScript confirm dialog, but you can customize this by listening to the &lt;code&gt;confirm&lt;/code&gt; event, which is fired just before the confirmation window appears to the user. To cancel this default confirmation, have the confirm handler to return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">デフォルトの確認ではJavaScript確認ダイアログが使用されますが、確認ウィンドウがユーザーに表示される直前に発生 &lt;code&gt;confirm&lt;/code&gt; イベントをリッスンすることで、これをカスタマイズできます。このデフォルトの確認をキャンセルするには、確認ハンドラーに &lt;code&gt;false&lt;/code&gt; を返させます。</target>
        </trans-unit>
        <trans-unit id="3124d3c72e5b92f5a8455f117ed6fd09726ebfff" translate="yes" xml:space="preserve">
          <source>The default error message for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated&quot;&gt;&lt;code&gt;validates_associated&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;. Note that each associated object will contain its own &lt;code&gt;errors&lt;/code&gt; collection; errors do not bubble up to the calling model.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/Validations/ClassMethods.html#method-i-validates_associated&quot;&gt; &lt;code&gt;validates_associated&lt;/code&gt; &lt;/a&gt;のデフォルトのエラーメッセージは&lt;em&gt;「isinvalid」&lt;/em&gt;です。関連する各オブジェクトには、独自の &lt;code&gt;errors&lt;/code&gt; コレクションが含まれることに注意してください。エラーは呼び出し元のモデルにバブルアップしません。</target>
        </trans-unit>
        <trans-unit id="da02076b73046b331e3a794c5d90ae5db9d7569c" translate="yes" xml:space="preserve">
          <source>The default error message for &lt;code&gt;:only_integer&lt;/code&gt; is &lt;em&gt;&quot;must be an integer&quot;&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;:only_integer&lt;/code&gt; のデフォルトのエラーメッセージは&lt;em&gt;「整数でなければなりません」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="6bbe748864f65ace153e63b32d9fb9aae5ccc443" translate="yes" xml:space="preserve">
          <source>The default error message for &lt;code&gt;validates_associated&lt;/code&gt; is &lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;. Note that each associated object will contain its own &lt;code&gt;errors&lt;/code&gt; collection; errors do not bubble up to the calling model.</source>
          <target state="translated">&lt;code&gt;validates_associated&lt;/code&gt; のデフォルトのエラーメッセージは&lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;です。関連する各オブジェクトには、独自の &lt;code&gt;errors&lt;/code&gt; コレクションが含まれることに注意してください。エラーは呼び出しモデルにまで達しません。</target>
        </trans-unit>
        <trans-unit id="867423ae48db625181e81d46b4c69e62f28c825d" translate="yes" xml:space="preserve">
          <source>The default error message for this helper is &lt;em&gt;&quot;doesn't match confirmation&quot;&lt;/em&gt;.</source>
          <target state="translated">このヘルパーのデフォルトのエラーメッセージは、&lt;em&gt;「確認が一致しない」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="191962cf0a53a5a6e818b0f1aca5743ac55311d9" translate="yes" xml:space="preserve">
          <source>The default error message for this helper is &lt;em&gt;&quot;is not included in the list&quot;&lt;/em&gt;.</source>
          <target state="translated">このヘルパーのデフォルトのエラーメッセージは、&lt;em&gt;「リストに含まれていません」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="c1fb5c5ae103bf01f69e90eaa63675b328ed1a1c" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;has already been taken&quot;&lt;/em&gt;.</source>
          <target state="translated">デフォルトのエラーメッセージは&lt;em&gt;「すでに使用されています」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="9457ef49196b5a4950348b7a27e4d880cb9c20c8" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;.</source>
          <target state="translated">デフォルトのエラーメッセージは&lt;em&gt;&quot;is invalid&quot;&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="ba637f7bfb2bf214d7ab58eb7fa9d57e04657f8f" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;is not a number&quot;&lt;/em&gt;.</source>
          <target state="translated">デフォルトのエラーメッセージは&lt;em&gt;「is not a number」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="9335fb9ba4197c3649d79cacccddab3b123bd729" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;is reserved&quot;&lt;/em&gt;.</source>
          <target state="translated">デフォルトのエラーメッセージは&lt;em&gt;「予約済み」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="7f4903f326fc4f8f3dc2774dfae143f7d309b858" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;em&gt;&quot;must be blank&quot;&lt;/em&gt;.</source>
          <target state="translated">デフォルトのエラーメッセージは&lt;em&gt;「空白である必要があります」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="fe342e1d9bddcb12fc387433f37a34de0597592e" translate="yes" xml:space="preserve">
          <source>The default error message when no options are specified is &lt;em&gt;&quot;is not a number&quot;&lt;/em&gt;.</source>
          <target state="translated">オプションが指定されていない場合のデフォルトのエラーメッセージは&lt;em&gt;「番号ではありません」&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="465f1f3ea389cd791f8d42ff409bc80944085d28" translate="yes" xml:space="preserve">
          <source>The default error messages depend on the type of length validation being performed. You can customize these messages using the &lt;code&gt;:wrong_length&lt;/code&gt;, &lt;code&gt;:too_long&lt;/code&gt;, and &lt;code&gt;:too_short&lt;/code&gt; options and &lt;code&gt;%{count}&lt;/code&gt; as a placeholder for the number corresponding to the length constraint being used. You can still use the &lt;code&gt;:message&lt;/code&gt; option to specify an error message.</source>
          <target state="translated">デフォルトのエラーメッセージは、実行されている長さ検証のタイプによって異なります。これらのメッセージは、 &lt;code&gt;:wrong_length&lt;/code&gt; 、 &lt;code&gt;:too_long&lt;/code&gt; 、および &lt;code&gt;:too_short&lt;/code&gt; オプションと、使用されている長さの制約に対応する数値のプレースホルダーとして &lt;code&gt;%{count}&lt;/code&gt; を使用してカスタマイズできます。 &lt;code&gt;:message&lt;/code&gt; オプションを使用して、エラーメッセージを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="0e1ac826384501a459391f77dccc506bc756093f" translate="yes" xml:space="preserve">
          <source>The default error messages depend on the type of length validation being performed. You can personalize these messages using the &lt;code&gt;:wrong_length&lt;/code&gt;, &lt;code&gt;:too_long&lt;/code&gt;, and &lt;code&gt;:too_short&lt;/code&gt; options and &lt;code&gt;%{count}&lt;/code&gt; as a placeholder for the number corresponding to the length constraint being used. You can still use the &lt;code&gt;:message&lt;/code&gt; option to specify an error message.</source>
          <target state="translated">デフォルトのエラーメッセージは、実行される長さ検証のタイプによって異なります。 &lt;code&gt;:wrong_length&lt;/code&gt; 、 &lt;code&gt;:too_long&lt;/code&gt; 、および &lt;code&gt;:too_short&lt;/code&gt; オプションを使用してこれらのメッセージをパーソナライズし、使用されている長さの制約に対応する数値のプレースホルダーとして &lt;code&gt;%{count}&lt;/code&gt; を使用できます。引き続き &lt;code&gt;:message&lt;/code&gt; オプションを使用して、エラーメッセージを指定できます。</target>
        </trans-unit>
        <trans-unit id="b13f3a7afb4a9725957b1897d9ead715643512bb" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing; the implementation should be overridden by concrete adapters.</source>
          <target state="translated">デフォルトの実装は何もしません;実装は具体的なアダプタによってオーバーライドされるべきです。</target>
        </trans-unit>
        <trans-unit id="3e74ab6be939a5c78f62ad5e60efb485ede92294" translate="yes" xml:space="preserve">
          <source>The default inheritance column name is &lt;code&gt;type&lt;/code&gt;, which means it's a reserved word inside Active Record. To be able to use single-table inheritance with another column name, or to use the column &lt;code&gt;type&lt;/code&gt; in your own model for something else, you can set &lt;code&gt;inheritance_column&lt;/code&gt;:</source>
          <target state="translated">デフォルトの継承列名は &lt;code&gt;type&lt;/code&gt; です。これは、Active Record内の予約語であることを意味します。別の列名で単一テーブルの継承を使用できるようにしたり、独自のモデルで列 &lt;code&gt;type&lt;/code&gt; を別のものに使用したりするには、 &lt;code&gt;inheritance_column&lt;/code&gt; を設定できます。</target>
        </trans-unit>
        <trans-unit id="5b04d3ac6d07f3c41ce5d77eae396450a01409f4" translate="yes" xml:space="preserve">
          <source>The default is 5 minutes.</source>
          <target state="translated">デフォルトは5分です。</target>
        </trans-unit>
        <trans-unit id="1b67e281a2d48140c816abd25a470778ff77b5bf" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;/rails/active_storage&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;/rails/active_storage&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b2f7dad334733a76121cb0c0714aec946761f52d" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;:rails_storage_redirect&lt;/code&gt;.</source>
          <target state="translated">デフォルトは &lt;code&gt;:rails_storage_redirect&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c3000af20082800ed1719b2c75850c9c000fd27e" translate="yes" xml:space="preserve">
          <source>The default locale is used for all translations unless &lt;code&gt;I18n.locale=&lt;/code&gt; or &lt;code&gt;I18n.with_locale&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;I18n.locale=&lt;/code&gt; または &lt;code&gt;I18n.with_locale&lt;/code&gt; を使用しない限り、デフォルトのロケールがすべての翻訳に使用されます。</target>
        </trans-unit>
        <trans-unit id="bdea9edbdc10997d0fc7eb472e80325679677f90" translate="yes" xml:space="preserve">
          <source>The default locale loading mechanism in Rails does not load locale files in nested dictionaries, like we have here. So, for this to work, we must explicitly tell Rails to look further:</source>
          <target state="translated">Railsのデフォルトのロケール読み込みメカニズムでは、ここで紹介したようなネストされた辞書内のロケールファイルは読み込まれません。そのため、これを動作させるためには、Railsに明示的に「さらに調べるように」と指示しなければなりません。</target>
        </trans-unit>
        <trans-unit id="0c2d50ec5de29e7e39e2abf4cdda42eed22420e0" translate="yes" xml:space="preserve">
          <source>The default location for the manifest is the root of the location specified in &lt;code&gt;config.assets.prefix&lt;/code&gt; ('/assets' by default).</source>
          <target state="translated">マニフェストのデフォルトの場所は、 &lt;code&gt;config.assets.prefix&lt;/code&gt; で指定された場所のルートです（デフォルトでは「/ assets」）。</target>
        </trans-unit>
        <trans-unit id="f81c8358ebf064bc1b12157c51e2df2cc81232bf" translate="yes" xml:space="preserve">
          <source>The default locations are: the &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;javascripts&lt;/code&gt; and &lt;code&gt;stylesheets&lt;/code&gt; directories under the &lt;code&gt;app/assets&lt;/code&gt; folder, but these subdirectories are not special - any path under &lt;code&gt;assets/*&lt;/code&gt; will be searched.</source>
          <target state="translated">デフォルトの場所は次のとおりです： &lt;code&gt;app/assets&lt;/code&gt; フォルダーの下の &lt;code&gt;images&lt;/code&gt; 、 &lt;code&gt;javascripts&lt;/code&gt; 、および &lt;code&gt;stylesheets&lt;/code&gt; ディレクトリー。ただし、これらのサブディレクトリーは特別ではありません &lt;code&gt;assets/*&lt;/code&gt; 下のパスが検索されます。</target>
        </trans-unit>
        <trans-unit id="1c2b4eace4f7484f211975650ac9a2dae6cb21cb" translate="yes" xml:space="preserve">
          <source>The default mailer queue name is &lt;code&gt;mailers&lt;/code&gt;. This configuration option allows you to globally change the queue name. Set the following in your config:</source>
          <target state="translated">デフォルトのメーラーキュー名は &lt;code&gt;mailers&lt;/code&gt; です。この構成オプションを使用すると、キュー名をグローバルに変更できます。設定で以下を設定します：</target>
        </trans-unit>
        <trans-unit id="d40a6c3b3003507f3c7ed2c5fd5c5f76c65efea7" translate="yes" xml:space="preserve">
          <source>The default matcher for compiling files includes &lt;code&gt;application.js&lt;/code&gt;, &lt;code&gt;application.css&lt;/code&gt; and all non-JS/CSS files (this will include all image assets automatically) from &lt;code&gt;app/assets&lt;/code&gt; folders including your gems:</source>
          <target state="translated">ファイルをコンパイルするためのデフォルトのマッチャーには、宝石を含む &lt;code&gt;app/assets&lt;/code&gt; フォルダーからの &lt;code&gt;application.js&lt;/code&gt; 、 &lt;code&gt;application.css&lt;/code&gt; 、およびすべての非JS / CSSファイル（すべての画像アセットが自動的に含まれます）が含まれます。</target>
        </trans-unit>
        <trans-unit id="ed073a8405e9ab34fc3dac43c68ab0a495c2a384" translate="yes" xml:space="preserve">
          <source>The default middlewares shown here (and some others) are each summarized in the &lt;a href=&quot;#internal-middleware-stack&quot;&gt;Internal Middlewares&lt;/a&gt; section, below.</source>
          <target state="translated">ここに示されているデフォルトのミドルウェア（および他のいくつか）は、それぞれ以下の&lt;a href=&quot;#internal-middleware-stack&quot;&gt;内部ミドルウェアの&lt;/a&gt;セクションに要約されています。</target>
        </trans-unit>
        <trans-unit id="8a3c7bfab60bb2a9340081d984047c607d31607f" translate="yes" xml:space="preserve">
          <source>The default normalization used for operations that require normalization. It can be set to any of the normalizations in &lt;a href=&quot;unicode#NORMALIZATION_FORMS&quot;&gt;NORMALIZATION_FORMS&lt;/a&gt;.</source>
          <target state="translated">正規化が必要な操作に使用されるデフォルトの正規化。&lt;a href=&quot;unicode#NORMALIZATION_FORMS&quot;&gt;NORMALIZATION_FORMS&lt;/a&gt;の正規化のいずれかに設定できます。</target>
        </trans-unit>
        <trans-unit id="8a301994a79c75534c49b79a61a4664b4e721cdd" translate="yes" xml:space="preserve">
          <source>The default parallelization method is to fork processes using Ruby's DRb system. The processes are forked based on the number of workers provided. The default number is the actual core count on the machine you are on, but can be changed by the number passed to the parallelize method.</source>
          <target state="translated">デフォルトの並列化方法は、RubyのDRbシステムを使ってプロセスをフォークする方法です。プロセスは提供されたワーカーの数に基づいてフォークされます。デフォルトの数は自分が乗っているマシンの実際のコア数ですが、並列化メソッドに渡された数で変更することができます。</target>
        </trans-unit>
        <trans-unit id="f767b8f5ac6c561f9d1d4776585774fb62693a4e" translate="yes" xml:space="preserve">
          <source>The default parallelization method is to fork processes. If you'd like to use threads instead you can pass &lt;code&gt;with: :threads&lt;/code&gt; to the &lt;code&gt;parallelize&lt;/code&gt; method. Note the threaded parallelization does not create multiple database and will not work with system tests at this time.</source>
          <target state="translated">デフォルトの並列化方法は、プロセスをフォークすることです。代わりにスレッドを使用する場合は &lt;code&gt;with: :threads&lt;/code&gt; を &lt;code&gt;parallelize&lt;/code&gt; メソッドに渡します。スレッド化された並列化は複数のデータベースを作成せず、現時点ではシステムテストでは機能しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1b1d81ea25551b6dbe82955f22e7b61026f6857f" translate="yes" xml:space="preserve">
          <source>The default query string in Rails 2.x is based on the modification time of the files. When assets are deployed to a cluster, there is no guarantee that the timestamps will be the same, resulting in different values being used depending on which server handles the request.</source>
          <target state="translated">Rails 2.xのデフォルトのクエリ文字列は、ファイルの修正時間に基づいています。アセットがクラスタにデプロイされている場合、タイムスタンプが同じであるという保証はないため、結果的にどのサーバがリクエストを処理するかによって異なる値が使用されることになります。</target>
        </trans-unit>
        <trans-unit id="147c7acadfc41f5f5e59a90b1e7884d58638c717" translate="yes" xml:space="preserve">
          <source>The default queue name prefix delimiter is '_'. This can be changed by setting &lt;code&gt;config.active_job.queue_name_delimiter&lt;/code&gt; in &lt;code&gt;application.rb&lt;/code&gt;:</source>
          <target state="translated">デフォルトのキュー名プレフィックス区切り文字は「_」です。これは、 &lt;code&gt;application.rb&lt;/code&gt; で &lt;code&gt;config.active_job.queue_name_delimiter&lt;/code&gt; を設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="8552b825d22023630bc90a85bfa0ff7ef0a73f83" translate="yes" xml:space="preserve">
          <source>The default sanitizer is Rails::Html::SafeListSanitizer. See &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;Rails HTML Sanitizers&lt;/a&gt; for more information.</source>
          <target state="translated">デフォルトのサニタイザーはRails :: Html :: SafeListSanitizerです。詳細については、&lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;Rails HTML Sanitizers&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b2016ca14211876c1edaa8337a906e443cb4b6a4" translate="yes" xml:space="preserve">
          <source>The default serializer for new applications is &lt;code&gt;:json&lt;/code&gt;. For compatibility with old applications with existing cookies, &lt;code&gt;:marshal&lt;/code&gt; is used when &lt;code&gt;serializer&lt;/code&gt; option is not specified.</source>
          <target state="translated">新しいアプリケーションのデフォルトのシリアライザは &lt;code&gt;:json&lt;/code&gt; です。既存のCookieを持つ古いアプリケーションとの互換性のために、 &lt;code&gt;serializer&lt;/code&gt; オプションが指定されていない場合は、 &lt;code&gt;:marshal&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="f47159673cb495ccbabe040b7bed54c0ab255c7c" translate="yes" xml:space="preserve">
          <source>The default setting is &lt;code&gt;true&lt;/code&gt;, which uses the partial at &lt;code&gt;/admin/articles/_article.erb&lt;/code&gt;. Setting the value to &lt;code&gt;false&lt;/code&gt; would render &lt;code&gt;/articles/_article.erb&lt;/code&gt;, which is the same behavior as rendering from a non-namespaced controller such as &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="translated">デフォルト設定は &lt;code&gt;true&lt;/code&gt; で、 &lt;code&gt;/admin/articles/_article.erb&lt;/code&gt; のパーシャルを使用します。値を &lt;code&gt;false&lt;/code&gt; に設定すると、 &lt;code&gt;/articles/_article.erb&lt;/code&gt; がレンダリングされます。これは、 &lt;code&gt;ArticlesController&lt;/code&gt; などの非名前空間コントローラーからのレンダリングと同じ動作です。</target>
        </trans-unit>
        <trans-unit id="515503b563ee9a5bbb4ae3beb0127d46d8fa5713" translate="yes" xml:space="preserve">
          <source>The default settings are Selenium, using Chrome, with a screen size of 1400x1400.</source>
          <target state="translated">初期設定はSeleniumで、Chromeを使用しており、画面サイズは1400×1400です。</target>
        </trans-unit>
        <trans-unit id="c5f8f103612c80ac874538744f53c5fe3b5cd267" translate="yes" xml:space="preserve">
          <source>The default sum of an empty list is zero. You can override this default:</source>
          <target state="translated">空のリストの既定の合計はゼロです。このデフォルトを上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="071a72da76e5b74a031c70449265c7fa7a2297fe" translate="yes" xml:space="preserve">
          <source>The default terminator halts the chain when a callback throws &lt;code&gt;:abort&lt;/code&gt;.</source>
          <target state="translated">デフォルトのターミネーターは、コールバックが &lt;code&gt;:abort&lt;/code&gt; をスローするとチェーンを停止します。</target>
        </trans-unit>
        <trans-unit id="4697708713aa6085f40190002f8d6e33c97a56cf" translate="yes" xml:space="preserve">
          <source>The default test stub in &lt;code&gt;test/models/article_test.rb&lt;/code&gt; looks like this:</source>
          <target state="translated">&lt;code&gt;test/models/article_test.rb&lt;/code&gt; のデフォルトのテストスタブは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6a1270eb0f735549a1008a4527b95f164d8e96ac" translate="yes" xml:space="preserve">
          <source>The default trusted IPs list simply includes IP addresses that are guaranteed by the IP specification to be private addresses. Those will not be the ultimate client IP in production, and so are discarded. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network&quot;&gt;en.wikipedia.org/wiki/Private_network&lt;/a&gt; for details.</source>
          <target state="translated">デフォルトの信頼できるIPリストには、IP仕様によってプライベートアドレスであることが保証されているIPアドレスが含まれています。これらは本番環境での最終的なクライアントIPにはならないため、破棄されます。詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network&quot;&gt;en.wikipedia.org / wiki / Private_network&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="387dbd27be3c9069b6f778552aed77b8b5cd08bc" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;include_root&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. You can change it to &lt;code&gt;true&lt;/code&gt; if the given &lt;a href=&quot;json&quot;&gt;&lt;code&gt;JSON&lt;/code&gt;&lt;/a&gt; string includes a single root node.</source>
          <target state="translated">&lt;code&gt;include_root&lt;/code&gt; のデフォルト値は &lt;code&gt;false&lt;/code&gt; です。指定された&lt;a href=&quot;json&quot;&gt; &lt;code&gt;JSON&lt;/code&gt; &lt;/a&gt;文字列に単一のルートノードが含まれている場合は、 &lt;code&gt;true&lt;/code&gt; に変更できます。</target>
        </trans-unit>
        <trans-unit id="23f60753d7620ad7eea0f11cae021bf7e9adc787" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;include_root&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. You can change it to &lt;code&gt;true&lt;/code&gt; if the given &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; string includes a single root node.</source>
          <target state="translated">&lt;code&gt;include_root&lt;/code&gt; のデフォルト値は &lt;code&gt;false&lt;/code&gt; です。指定された&lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt;文字列に単一のルートノードが含まれている場合は、 &lt;code&gt;true&lt;/code&gt; に変更できます。</target>
        </trans-unit>
        <trans-unit id="2995a2cd89ccb1c807ab761506e22c3579641b10" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%T.%L&amp;rdquo; on the object's value. It is still possible to override that by passing the &amp;ldquo;value&amp;rdquo; option.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に「％T.％L」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。「値」オプションを渡すことで、それをオーバーライドすることも可能です。</target>
        </trans-unit>
        <trans-unit id="2352d73ec4b0e0d6ff2a95c7bb0de09cbf629174" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に「％Y-％m」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt;インスタンスで期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="fce923ebd77135ee6e5a64fb412ca563cbb9a2f4" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に&amp;ldquo;％Y-％m&amp;rdquo;を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすることによって生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZoneの&lt;/a&gt;インスタンスに対して期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="961406feda2c9607a547c41ca3bd120f2aeaa8dd" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%d&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;. You can still override that by passing the &amp;ldquo;value&amp;rdquo; option explicitly, e.g.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に「％Y-％m-％d」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt;インスタンスで期待どおりに動作します。「value」オプションを明示的に渡すことで、それをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="51b813ed49344540ac2076972a7ceaf113ab8138" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%d&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;. You can still override that by passing the &amp;ldquo;value&amp;rdquo; option explicitly, e.g.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に対して「％Y-％m-％d」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすることによって生成され、&lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZoneの&lt;/a&gt;インスタンスに対して期待どおりに動作します。「value」オプションを明示的に渡すことで、それをオーバーライドすることもできます。たとえば、</target>
        </trans-unit>
        <trans-unit id="8a7a98ac087cf08203ada29462f60f281cc7ce8c" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%dT%T&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に「％Y-％m-％dT％T」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt;インスタンスで期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="155f523aa7dab7eaef4a73cf5262806f48843b57" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-%m-%dT%T&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に対して「％Y-％m-％dT％T」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZoneの&lt;/a&gt;インスタンスに対して期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="5d5885094783f9624549e228e79f6943abafae18" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-W%W&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;&lt;code&gt;DateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;&lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に「％YW％W」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt; &lt;code&gt;DateTime&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt; &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; &lt;/a&gt;インスタンスで期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="5e75e0fbb28eddbbcf15907c13cd835044074f14" translate="yes" xml:space="preserve">
          <source>The default value is generated by trying to call &lt;code&gt;strftime&lt;/code&gt; with &amp;ldquo;%Y-W%W&amp;rdquo; on the object's value, which makes it behave as expected for instances of &lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt; and &lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt;.</source>
          <target state="translated">デフォルト値は、オブジェクトの値に対して「％YW％W」を指定して &lt;code&gt;strftime&lt;/code&gt; を呼び出そうとすると生成されます。これにより、&lt;a href=&quot;../../datetime&quot;&gt;DateTime&lt;/a&gt;および&lt;a href=&quot;../../activesupport/timewithzone&quot;&gt;ActiveSupport :: TimeWithZoneの&lt;/a&gt;インスタンスに対して期待どおりに動作します。</target>
        </trans-unit>
        <trans-unit id="302a80951efeb150725e12d390b168e285d9d6c7" translate="yes" xml:space="preserve">
          <source>The defaults for these options can be localized, their keys are:</source>
          <target state="translated">これらのオプションのデフォルト値はローカライズすることができ、そのキーは以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="1405dbd52b41e365289863e28f99fa1bd2332eb9" translate="yes" xml:space="preserve">
          <source>The delay of the retry</source>
          <target state="translated">リトライの遅延</target>
        </trans-unit>
        <trans-unit id="b3b195383209449dce9fab8d27f9f073c6ae8715" translate="yes" xml:space="preserve">
          <source>The delegated method must be public on the target, otherwise it will raise &lt;code&gt;DelegationError&lt;/code&gt;. If you wish to instead return &lt;code&gt;nil&lt;/code&gt;, use the &lt;code&gt;:allow_nil&lt;/code&gt; option.</source>
          <target state="translated">委任されたメソッドは、ターゲット上でパブリックである必要があります。そうでない場合、 &lt;code&gt;DelegationError&lt;/code&gt; が発生します。代わりに &lt;code&gt;nil&lt;/code&gt; を返したい場合は、 &lt;code&gt;:allow_nil&lt;/code&gt; オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="0ddcccd9c048d80e5af182b551f880e6af315c21" translate="yes" xml:space="preserve">
          <source>The delegated method must be public on the target, otherwise it will raise &lt;code&gt;NoMethodError&lt;/code&gt;.</source>
          <target state="translated">委任されたメソッドはターゲットでパブリックでなければなりません。そうでない場合、 &lt;code&gt;NoMethodError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="4b09ac1b3fc3753d4f13bde06b487a8da159ea06" translate="yes" xml:space="preserve">
          <source>The delegated methods are public by default. Pass &lt;code&gt;private:
true&lt;/code&gt; to change that.</source>
          <target state="translated">委任されたメソッドはデフォルトでパブリックです。それを変更するには、 &lt;code&gt;private: true&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="1c09337d38031bfbccf8b69e1b2b744dc8e04ce3" translate="yes" xml:space="preserve">
          <source>The delegated type shouldn't just answer the question of what the underlying class is called. In fact, that's an anti-pattern most of the time. The reason you're building this hierarchy is to take advantage of polymorphism. So here's a simple example of that:</source>
          <target state="translated">delegated型は、その下にあるクラスが何と呼ばれているかという質問に答えるだけではいけません。実際、それはほとんどの場合アンチパターンです。この階層を構築する理由は、ポリモーフィズムを利用するためです。だから、ここではその簡単な例を紹介します。</target>
        </trans-unit>
        <trans-unit id="02b4e2eca3f12dd43b5daa997c4256d932c0c2d1" translate="yes" xml:space="preserve">
          <source>The dependent &lt;a href=&quot;richtext&quot;&gt;&lt;code&gt;RichText&lt;/code&gt;&lt;/a&gt; model will also automatically process attachments links as sent via the Trix-powered editor. These attachments are associated with the &lt;a href=&quot;richtext&quot;&gt;&lt;code&gt;RichText&lt;/code&gt;&lt;/a&gt; model using Active Storage.</source>
          <target state="translated">依存する&lt;a href=&quot;richtext&quot;&gt; &lt;code&gt;RichText&lt;/code&gt; &lt;/a&gt;モデルは、Trixを利用したエディターを介して送信された添付ファイルのリンクも自動的に処理します。これらの添付ファイルは、アクティブストレージを使用して&lt;a href=&quot;richtext&quot;&gt; &lt;code&gt;RichText&lt;/code&gt; &lt;/a&gt;モデルに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="b561c6d24076a191c3806cfbab4b44dc868d9533" translate="yes" xml:space="preserve">
          <source>The dependent &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; model will also automatically process attachments links as sent via the Trix-powered editor. These attachments are associated with the &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; model using Active Storage.</source>
          <target state="translated">依存する&lt;a href=&quot;richtext&quot;&gt;リッチテキスト&lt;/a&gt;モデルは、Trix搭載のエディターを介して送信される添付リンクも自動的に処理します。これらの添付ファイルは、Active Storageを使用して&lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt;モデルに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="7b896f7775194663df7f16876df2a84f94b10d3b" translate="yes" xml:space="preserve">
          <source>The deprecated constant now returns the same object as the new one rather than a proxy object, so it can be used transparently in &lt;code&gt;rescue&lt;/code&gt; blocks etc.</source>
          <target state="translated">非推奨の定数は、プロキシオブジェクトではなく新しいオブジェクトと同じオブジェクトを返すようになったため、 &lt;code&gt;rescue&lt;/code&gt; ブロックなどで透過的に使用できます。</target>
        </trans-unit>
        <trans-unit id="036245d5d96624f479702d772eb72dcb5e11e8c4" translate="yes" xml:space="preserve">
          <source>The deprecation warning</source>
          <target state="translated">廃止予定の警告</target>
        </trans-unit>
        <trans-unit id="31b2196e4888dd55cad8ce07cad5266dfe9ec435" translate="yes" xml:space="preserve">
          <source>The desired result can be accomplished by wrapping the known-safe string in &lt;a href=&quot;../arel#method-c-sql&quot;&gt;&lt;code&gt;Arel.sql&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">既知の安全な文字列を&lt;a href=&quot;../arel#method-c-sql&quot;&gt; &lt;code&gt;Arel.sql&lt;/code&gt; で&lt;/a&gt;ラップすることにより、目的の結果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="296534b4b5c0114d9b09d904b18e264419c9274a" translate="yes" xml:space="preserve">
          <source>The desired result can be accomplished by wrapping the known-safe string in Arel.sql:</source>
          <target state="translated">既知の安全な文字列をArel.sqlでラップすることで、目的の結果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="f01e3ce935b75a14bcd55aaf7d5d0bb040f17e93" translate="yes" xml:space="preserve">
          <source>The differences with &lt;code&gt;Kernel#Array&lt;/code&gt; explained above apply to the rest of &lt;code&gt;object&lt;/code&gt;s.</source>
          <target state="translated">上記で説明した &lt;code&gt;Kernel#Array&lt;/code&gt; との違いは、残りの &lt;code&gt;object&lt;/code&gt; 当てはまります。</target>
        </trans-unit>
        <trans-unit id="f4f7d49b1ac826abef81ba5b39c283b9cef02d95" translate="yes" xml:space="preserve">
          <source>The different ways of debugging.</source>
          <target state="translated">デバッグの方法の違い。</target>
        </trans-unit>
        <trans-unit id="4e465a9e2c0e5bd338b7983c7a2d3ecf29038df0" translate="yes" xml:space="preserve">
          <source>The digest will be generated using &lt;code&gt;virtual_path:&lt;/code&gt; if it is provided.</source>
          <target state="translated">ダイジェストは、 &lt;code&gt;virtual_path:&lt;/code&gt; が提供されている場合はそれを使用して生成されます。</target>
        </trans-unit>
        <trans-unit id="87e9e845de388090f6fedfdef8cbb1972b1b0d42" translate="yes" xml:space="preserve">
          <source>The digestor can be bypassed by passing skip_digest: true as an option to the cache call:</source>
          <target state="translated">キャッシュコールのオプションとして skip_digest:true を渡すことで、ダイジェクタをバイパスすることができます。</target>
        </trans-unit>
        <trans-unit id="c9880525eeb47dcc8b1a61a667bcb1ac06388bf9" translate="yes" xml:space="preserve">
          <source>The directives that work in JavaScript files also work in stylesheets (though obviously including stylesheets rather than JavaScript files). The &lt;code&gt;require_tree&lt;/code&gt; directive in a CSS manifest works the same way as the JavaScript one, requiring all stylesheets from the current directory.</source>
          <target state="translated">JavaScriptファイルで機能するディレクティブは、スタイルシートでも機能します（JavaScriptファイルではなくスタイルシートが含まれていることは明らかです）。CSSマニフェストの &lt;code&gt;require_tree&lt;/code&gt; ディレクティブは、JavaScriptのマニフェストと同じように機能し、現在のディレクトリからすべてのスタイルシートを要求します。</target>
        </trans-unit>
        <trans-unit id="213bb5462a19fb4d16c75c50df8bd7cb3bb8fb11" translate="yes" xml:space="preserve">
          <source>The directory &lt;code&gt;test/mailers/previews&lt;/code&gt;.</source>
          <target state="translated">ディレクトリ &lt;code&gt;test/mailers/previews&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db0a97cd4a13a2cce5468ae004d2f87eec98fccd" translate="yes" xml:space="preserve">
          <source>The distinction is in where you place the foreign key (it goes on the table for the class declaring the &lt;code&gt;belongs_to&lt;/code&gt; association), but you should give some thought to the actual meaning of the data as well. The &lt;code&gt;has_one&lt;/code&gt; relationship says that one of something is yours - that is, that something points back to you. For example, it makes more sense to say that a supplier owns an account than that an account owns a supplier. This suggests that the correct relationships are like this:</source>
          <target state="translated">違いは、外部キーを配置する場所です（これは、 &lt;code&gt;belongs_to&lt;/code&gt; 関連付けを宣言するクラスのテーブルにあります）が、データの実際の意味についても考慮する必要があります。 &lt;code&gt;has_one&lt;/code&gt; のが、ポイントはあなたに戻っている何かである-の関係は何かの1つはあなたですと言います。たとえば、アカウントがサプライヤーを所有しているというより、サプライヤーがアカウントを所有していると言う方が理にかなっています。これは、正しい関係が次のようであることを示唆しています。</target>
        </trans-unit>
        <trans-unit id="985c59a63de601354797a9003df4ab4f40409519" translate="yes" xml:space="preserve">
          <source>The documentation for &lt;code&gt;PermitScrubber&lt;/code&gt; and &lt;code&gt;TargetScrubber&lt;/code&gt; explains how you can gain complete control over when and how elements should be stripped.</source>
          <target state="translated">&lt;code&gt;PermitScrubber&lt;/code&gt; および &lt;code&gt;TargetScrubber&lt;/code&gt; のドキュメントでは、要素を削除するタイミングと方法を完全に制御する方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="7a30f95b69b46783ce610879e86f95b33971917c" translate="yes" xml:space="preserve">
          <source>The driver name is a required argument for &lt;code&gt;driven_by&lt;/code&gt;. The optional arguments that can be passed to &lt;code&gt;driven_by&lt;/code&gt; are &lt;code&gt;:using&lt;/code&gt; for the browser (this will only be used by Selenium), &lt;code&gt;:screen_size&lt;/code&gt; to change the size of the screen for screenshots, and &lt;code&gt;:options&lt;/code&gt; which can be used to set options supported by the driver.</source>
          <target state="translated">ドライバ名は、 &lt;code&gt;driven_by&lt;/code&gt; の必須の引数です。 &lt;code&gt;driven_by&lt;/code&gt; に渡すことができるオプションの引数は、 &lt;code&gt;:using&lt;/code&gt; for the browser（これはSeleniumでのみ使用されます） &lt;code&gt;:screen_size&lt;/code&gt; はスクリーンショットの画面サイズを変更し、 &lt;code&gt;:options&lt;/code&gt; は、運転者。</target>
        </trans-unit>
        <trans-unit id="207b31a7446a5dd854fdf995d6f80eaf815309e8" translate="yes" xml:space="preserve">
          <source>The easiest way is to define acronyms in &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt;:</source>
          <target state="translated">最も簡単な方法は、 &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt; /inflections.rbで頭字語を定義することです。</target>
        </trans-unit>
        <trans-unit id="4997e6afb5b4fcd0fc1edb4cdc05bfb0a531e68e" translate="yes" xml:space="preserve">
          <source>The easiest way to add custom validators for validating individual attributes is with the convenient &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt;.</source>
          <target state="translated">個々の属性を検証するためのカスタムバリデーターを追加する最も簡単な方法は、便利な &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="98faafe30a9e70db0e0977f135231c7feded8674" translate="yes" xml:space="preserve">
          <source>The easiest way to add custom validators for validating individual attributes is with the convenient &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt;. In this case, the custom validator class must implement a &lt;code&gt;validate_each&lt;/code&gt; method which takes three arguments: record, attribute, and value. These correspond to the instance, the attribute to be validated, and the value of the attribute in the passed instance.</source>
          <target state="translated">個々の属性を検証するためのカスタムバリデーターを追加する最も簡単な方法は、便利な &lt;code&gt;ActiveModel::EachValidator&lt;/code&gt; です。この場合、カスタムバリデータークラスは、record、attribute、valueの3つの引数を取る &lt;code&gt;validate_each&lt;/code&gt; メソッドを実装する必要があります。これらは、インスタンス、検証される属性、および渡されたインスタンスの属性の値に対応します。</target>
        </trans-unit>
        <trans-unit id="91e62d62a76a3d0d1a18977f96d9d5517a4cc465" translate="yes" xml:space="preserve">
          <source>The easiest way to do that is to throw</source>
          <target state="translated">一番簡単な方法は</target>
        </trans-unit>
        <trans-unit id="67abd7985beb12edf1df94d4e24d4ac0499aedde" translate="yes" xml:space="preserve">
          <source>The easiest way to see functional tests in action is to generate a controller using the scaffold generator:</source>
          <target state="translated">機能テストを実際に見る最も簡単な方法は、足場ジェネレータを使ってコントローラを生成することです。</target>
        </trans-unit>
        <trans-unit id="71f9b218d0a717f2a34e6fb5f6eed95f85739bd8" translate="yes" xml:space="preserve">
          <source>The easiest way to work with Rails is to store all external data as UTF-8. If you don't, Ruby libraries and Rails will often be able to convert your native data into UTF-8, but this doesn't always work reliably, so you're better off ensuring that all external data is UTF-8.</source>
          <target state="translated">Railsを使う最も簡単な方法は、すべての外部データをUTF-8で保存することです。そうしない場合は、RubyライブラリやRailsがネイティブデータをUTF-8に変換してくれることが多いですが、これが必ずしも確実に動作するとは限らないので、外部データはすべてUTF-8にしておいたほうがいいでしょう。</target>
        </trans-unit>
        <trans-unit id="69e2efc49c2d7213b2c913e7885eead9c6a6f639" translate="yes" xml:space="preserve">
          <source>The editor can be found by:</source>
          <target state="translated">エディターは以下の方法で見つけることができます。</target>
        </trans-unit>
        <trans-unit id="de8bad23dcd8917481e25590ac072420ea7cda7e" translate="yes" xml:space="preserve">
          <source>The encoded form of the mail</source>
          <target state="translated">メールのエンコードされた形式</target>
        </trans-unit>
        <trans-unit id="603d901a7533f7d4b81087cd4d5da75a04f6dc77" translate="yes" xml:space="preserve">
          <source>The engine contains migrations for the &lt;code&gt;blorgh_articles&lt;/code&gt; and &lt;code&gt;blorgh_comments&lt;/code&gt; table which need to be created in the application's database so that the engine's models can query them correctly. To copy these migrations into the application run the following command from the application's root:</source>
          <target state="translated">エンジンには、 &lt;code&gt;blorgh_articles&lt;/code&gt; および &lt;code&gt;blorgh_comments&lt;/code&gt; テーブルの移行が含まれています。これらは、エンジンのモデルが正しくクエリできるように、アプリケーションのデータベースに作成する必要があります。これらの移行をアプリケーションにコピーするには、アプリケーションのルートから次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="2465fb9cdbf0b80704e99d5b2da49be290d0b4c9" translate="yes" xml:space="preserve">
          <source>The engine is unable to find the partial required for rendering the comments. Rails looks first in the application's (&lt;code&gt;test/dummy&lt;/code&gt;) &lt;code&gt;app/views&lt;/code&gt; directory and then in the engine's &lt;code&gt;app/views&lt;/code&gt; directory. When it can't find it, it will throw this error. The engine knows to look for &lt;code&gt;blorgh/comments/_comment&lt;/code&gt; because the model object it is receiving is from the &lt;code&gt;Blorgh::Comment&lt;/code&gt; class.</source>
          <target state="translated">エンジンは、コメントのレンダリングに必要な部分を見つけることができません。Railsは最初にアプリケーションの（ &lt;code&gt;test/dummy&lt;/code&gt; ） &lt;code&gt;app/views&lt;/code&gt; ディレクトリを調べ、次にエンジンの &lt;code&gt;app/views&lt;/code&gt; ディレクトリを調べます。見つからない場合は、このエラーがスローされます。エンジンは &lt;code&gt;blorgh/comments/_comment&lt;/code&gt; を探すことを認識しています。これは、エンジンが受け取っているモデルオブジェクトが &lt;code&gt;Blorgh::Comment&lt;/code&gt; クラスからのものだからです。</target>
        </trans-unit>
        <trans-unit id="ea6b332efc300c274b97a32b7ce8d8e009ab65ef" translate="yes" xml:space="preserve">
          <source>The engine that this guide covers provides submitting articles and commenting functionality and follows a similar thread to the &lt;a href=&quot;getting_started&quot;&gt;Getting Started Guide&lt;/a&gt;, with some new twists.</source>
          <target state="translated">このガイドがカバーするエンジンは、投稿記事とコメント機能を提供し、いくつかの新しいひねりを加えた、&lt;a href=&quot;getting_started&quot;&gt;スタートガイド&lt;/a&gt;と同様のスレッドに従います。</target>
        </trans-unit>
        <trans-unit id="d7b01cfd4565a85c2dbb4f19156a363391250255" translate="yes" xml:space="preserve">
          <source>The engine that will be created in this guide will be called &quot;blorgh&quot;. This engine will provide blogging functionality to its host applications, allowing for new articles and comments to be created. At the beginning of this guide, you will be working solely within the engine itself, but in later sections you'll see how to hook it into an application.</source>
          <target state="translated">このガイドで作成されるエンジンは「blorgh」と呼ばれます。このエンジンはホストアプリケーションにブログ機能を提供し、新しい記事やコメントを作成できるようにします。このガイドの最初の方では、エンジン自体の中だけで作業しますが、後のセクションでは、エンジンをアプリケーションにフックする方法を見ていきます。</target>
        </trans-unit>
        <trans-unit id="527b2aac30ef582fdc0a45802b88ee7ae5e7ffc7" translate="yes" xml:space="preserve">
          <source>The entire URL used for the request.</source>
          <target state="translated">リクエストに使用されたURL全体。</target>
        </trans-unit>
        <trans-unit id="1c7a4ea6286b889e3eeecb8b0c295abd48222222" translate="yes" xml:space="preserve">
          <source>The entire callback chain of a &lt;a href=&quot;persistence#method-i-save&quot;&gt;#save&lt;/a&gt;, &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;#save!&lt;/a&gt;, or &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt; call runs within a transaction. That includes &lt;code&gt;after_*&lt;/code&gt; hooks. If everything goes fine a &lt;code&gt;COMMIT&lt;/code&gt; is executed once the chain has been completed.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save&quot;&gt;＃save&lt;/a&gt;、&lt;a href=&quot;persistence#method-i-save-21&quot;&gt;＃save！の&lt;/a&gt;コールバックチェーン全体 、または&lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt;呼び出しはトランザクション内で実行されます。これには &lt;code&gt;after_*&lt;/code&gt; フックが含まれます。すべてがうまく &lt;code&gt;COMMIT&lt;/code&gt; ば、チェーンが完了するとCOMMITが実行されます。</target>
        </trans-unit>
        <trans-unit id="d99c9a66d0b0be0a02769838a20ac0b1925f5311" translate="yes" xml:space="preserve">
          <source>The entire callback chain of a &lt;a href=&quot;persistence#method-i-save&quot;&gt;#save&lt;/a&gt;, &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;#save!&lt;/a&gt;, or &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt; call runs within a transaction. That includes &lt;code&gt;after_*&lt;/code&gt; hooks. If everything goes fine a COMMIT is executed once the chain has been completed.</source>
          <target state="translated">&lt;a href=&quot;persistence#method-i-save&quot;&gt;#save&lt;/a&gt;、&lt;a href=&quot;persistence#method-i-save-21&quot;&gt;# &lt;/a&gt;saveのコールバックチェーン全体！、または&lt;a href=&quot;persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt;呼び出しはトランザクション内で実行されます。これには &lt;code&gt;after_*&lt;/code&gt; フックが含まれます。すべてが順調に進んだ場合、チェーンが完了するとCOMMITが実行されます。</target>
        </trans-unit>
        <trans-unit id="160135e0f4b320878ee046d55d4b87a2848ed38b" translate="yes" xml:space="preserve">
          <source>The entry &amp;ldquo;superclass&amp;rdquo; also serves as a perfect place to put all that shared logic that applies to both messages and comments, and which acts primarily on the shared attributes. Imagine:</source>
          <target state="translated">エントリ「スーパークラス」は、メッセージとコメントの両方に適用され、主に共有属性に作用するすべての共有ロジックを配置するのに最適な場所としても機能します。想像してみてください：</target>
        </trans-unit>
        <trans-unit id="f16e4fc1970700778bf53ca3a20a8ccb854a9165" translate="yes" xml:space="preserve">
          <source>The environment variable RAILS_GROUPS;</source>
          <target state="translated">環境変数 RAILS_GROUPS。</target>
        </trans-unit>
        <trans-unit id="47fccb458c4924179eb7ab520146ad2f2e5b5da5" translate="yes" xml:space="preserve">
          <source>The equivalent YAML file would look like this:</source>
          <target state="translated">これに相当するYAMLファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="46b064b6decece00517a4ae80500c5b520897a0b" translate="yes" xml:space="preserve">
          <source>The errata for the &lt;code&gt;PATCH&lt;/code&gt; verb &lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=5789&quot;&gt;specifies that a 'diff' media type should be used with &lt;code&gt;PATCH&lt;/code&gt;&lt;/a&gt;. One such format is &lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSON Patch&lt;/a&gt;. While Rails does not support JSON Patch natively, it's easy enough to add support:</source>
          <target state="translated">&lt;code&gt;PATCH&lt;/code&gt; 動詞の正誤表は、&lt;a href=&quot;http://www.rfc-editor.org/errata_search.php?rfc=5789&quot;&gt;「差分」メディアタイプを &lt;code&gt;PATCH&lt;/code&gt; &lt;/a&gt;で使用する必要があることを指定しています。そのような形式の1つが&lt;a href=&quot;https://tools.ietf.org/html/rfc6902&quot;&gt;JSONパッチ&lt;/a&gt;です。RailsはJSONパッチをネイティブでサポートしていませんが、サポートを追加するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="517f5495378b09403c3a338eae8b0225a24b8aff" translate="yes" xml:space="preserve">
          <source>The error that caused the discard</source>
          <target state="translated">廃棄の原因となったエラー</target>
        </trans-unit>
        <trans-unit id="202c080109e967ceac7ed5f3b20a32c657e5c762" translate="yes" xml:space="preserve">
          <source>The error that caused the retry</source>
          <target state="translated">リトライの原因となったエラー</target>
        </trans-unit>
        <trans-unit id="4e43b8e70ed522e58308259bcdb4debbfad5afa2" translate="yes" xml:space="preserve">
          <source>The escaping performed in this method is identical to those performed in the Active Support JSON encoder when &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; is set to true. Because this transformation is idempotent, this helper can be applied even if &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; is already true.</source>
          <target state="translated">このメソッドで実行される &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; は、ActiveSupport.escape_html_entities_in_jsonがtrueに設定されている場合に、Active Support JSONエンコーダーで実行されるエスケープと同じです。この変換はべき等であるため、 &lt;code&gt;ActiveSupport.escape_html_entities_in_json&lt;/code&gt; がすでにtrueであっても、このヘルパーを適用できます。</target>
        </trans-unit>
        <trans-unit id="f6cd9b6aa0872547b71e432f2132c47e1b23d564" translate="yes" xml:space="preserve">
          <source>The eval() function is a nightmare for restricted list input filters, as it allows the style attribute to hide the word &quot;innerHTML&quot;:</source>
          <target state="translated">eval()関数は制限付きリスト入力フィルタにとって悪夢です。</target>
        </trans-unit>
        <trans-unit id="3970e1a2fc0e3743d76d2b4beaa13f39ba8d4504" translate="yes" xml:space="preserve">
          <source>The example above generates &amp;ldquo;&lt;a href=&quot;http://assets1.example.com&quot;&gt;assets1.example.com&lt;/a&gt;&amp;rdquo; and &amp;ldquo;&lt;a href=&quot;http://assets2.example.com&quot;&gt;assets2.example.com&lt;/a&gt;&amp;rdquo;. This option is useful for example if you need fewer/more than four hosts, custom host names, etc.</source>
          <target state="translated">上記の例では、「&lt;a href=&quot;http://assets1.example.com&quot;&gt;assets1.example.com&lt;/a&gt;」と「&lt;a href=&quot;http://assets2.example.com&quot;&gt;assets2.example.com&lt;/a&gt;」が生成されます。このオプションは、たとえば、必要なホストが4つより少ない/多い場合や、カスタムホスト名などが必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="4ccbe5f2440d7cda26b90a4eb61f3a776bcb524d" translate="yes" xml:space="preserve">
          <source>The example above uses a custom environment called &quot;staging&quot; for a production like server but for testing purposes. You can read &lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Creating Rails Environments&lt;/a&gt; for more information about custom Rails environments.</source>
          <target state="translated">上記の例では、サーバーのような本番環境でテスト目的で「ステージング」と呼ばれるカスタム環境を使用しています。あなたは読むことができます&lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Railsの環境を作成する&lt;/a&gt;カスタムRailsの環境の詳細については。</target>
        </trans-unit>
        <trans-unit id="dd5763a2636a74bdb09de576f848b626740d358c" translate="yes" xml:space="preserve">
          <source>The example above uses a custom environment called &quot;staging&quot; for a production like server but for testing purposes. You can read &lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Creating Rails environments&lt;/a&gt; for more information about custom Rails environments.</source>
          <target state="translated">上記の例では、サーバーのような本番環境では「テスト」と呼ばれるカスタム環境を使用していますが、テストを目的としています。あなたは読むことができます&lt;a href=&quot;configuring#creating-rails-environments&quot;&gt;Railsの環境を作成する&lt;/a&gt;カスタムRailsの環境の詳細については。</target>
        </trans-unit>
        <trans-unit id="ecb3184dee5c579a473cebc5475c09e72e149629" translate="yes" xml:space="preserve">
          <source>The example above will create a test framework option and will invoke a generator based on the user supplied value.</source>
          <target state="translated">上の例では、テストフレームワークオプションを作成し、ユーザーが提供した値に基づいてジェネレータを起動します。</target>
        </trans-unit>
        <trans-unit id="344add1bda36def193aec6a1db38dc0ecd133c78" translate="yes" xml:space="preserve">
          <source>The example of partial use describes a familiar pattern where a template needs to iterate over an array and render a sub template for each of the elements. This pattern has been implemented as a single method that accepts an array and renders a partial by the same name as the elements contained within. So the three-lined example in &amp;ldquo;Using partials&amp;rdquo; can be rewritten with a single line:</source>
          <target state="translated">部分的な使用例は、テンプレートが配列を反復処理し、各要素のサブテンプレートをレンダリングする必要がある一般的なパターンを示しています。このパターンは、配列を受け入れ、含まれる要素と同じ名前で部分配列をレンダリングする単一のメソッドとして実装されています。したがって、「パーシャルの使用」の3行の例は、1行で書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="513e1d35af00b7b4857d0001cb9d96cd14237d06" translate="yes" xml:space="preserve">
          <source>The examples above put files under the application's &lt;code&gt;lib&lt;/code&gt; because said directory belongs to &lt;code&gt;$LOAD_PATH&lt;/code&gt;.</source>
          <target state="translated">上記の例では、ディレクトリが &lt;code&gt;$LOAD_PATH&lt;/code&gt; 属しているため、ファイルをアプリケーションの &lt;code&gt;lib&lt;/code&gt; の下に配置しています。</target>
        </trans-unit>
        <trans-unit id="1c74c9a07fb4e60ccadc9e321e8eb5e6ad8dd588" translate="yes" xml:space="preserve">
          <source>The examples above show that &lt;code&gt;in_groups&lt;/code&gt; fills some groups with a trailing &lt;code&gt;nil&lt;/code&gt; element as needed. A group can get at most one of these extra elements, the rightmost one if any. And the groups that have them are always the last ones.</source>
          <target state="translated">上記の例は、必要に応じて、 &lt;code&gt;in_groups&lt;/code&gt; が一部のグループを末尾の &lt;code&gt;nil&lt;/code&gt; 要素で埋めることを示しています。グループは、これらの追加要素の多くても1つを取得できます。そして、それらを持っているグループは常に最後のものです。</target>
        </trans-unit>
        <trans-unit id="253b59cdddb01f4ba710f2685087ef72920525de" translate="yes" xml:space="preserve">
          <source>The examples below use &lt;code&gt;$&lt;/code&gt; to represent your terminal prompt in a UNIX-like OS, though it may have been customized to appear differently. If you are using Windows, your prompt will look something like &lt;code&gt;C:\source_code&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以下の例では、 &lt;code&gt;$&lt;/code&gt; を使用してUNIXライクなOSのターミナルプロンプトを表していますが、表示が異なるようにカスタマイズされている場合があります。Windowsを使用している場合、プロンプトは &lt;code&gt;C:\source_code&amp;gt;&lt;/code&gt; ようになります。</target>
        </trans-unit>
        <trans-unit id="61162445c5595b6fb1ee7e3f0721291476b564b0" translate="yes" xml:space="preserve">
          <source>The examples below use &lt;code&gt;$&lt;/code&gt; to represent your terminal prompt in a UNIX-like OS, though it may have been customized to appear differently. If you are using Windows, your prompt will look something like &lt;code&gt;c:\source_code&amp;gt;&lt;/code&gt;</source>
          <target state="translated">以下の例では、 &lt;code&gt;$&lt;/code&gt; を使用してUNIXライクなOSのターミナルプロンプトを表していますが、表示が異なるようにカスタマイズされている場合もあります。Windowsを使用している場合、プロンプトは &lt;code&gt;c:\source_code&amp;gt;&lt;/code&gt; ようになります。</target>
        </trans-unit>
        <trans-unit id="962d766aea512badcd93d36a0bad74875b6df8a3" translate="yes" xml:space="preserve">
          <source>The exception object</source>
          <target state="translated">例外オブジェクト</target>
        </trans-unit>
        <trans-unit id="61f4d305dc19efd8a77994a6d624f683cf529072" translate="yes" xml:space="preserve">
          <source>The exceptions &lt;a href=&quot;adapternotspecified&quot;&gt;&lt;code&gt;AdapterNotSpecified&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;adapternotfound&quot;&gt;&lt;code&gt;AdapterNotFound&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;ArgumentError&lt;/code&gt; may be returned on an error.</source>
          <target state="translated">例外&lt;a href=&quot;adapternotspecified&quot;&gt; &lt;code&gt;AdapterNotSpecified&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;adapternotfound&quot;&gt; &lt;code&gt;AdapterNotFound&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;ArgumentError&lt;/code&gt; は、エラー時に返される場合があります。</target>
        </trans-unit>
        <trans-unit id="13335fd46e437958bd49212b4d657196ad9ffa75" translate="yes" xml:space="preserve">
          <source>The exceptions &lt;a href=&quot;adapternotspecified&quot;&gt;AdapterNotSpecified&lt;/a&gt;, &lt;a href=&quot;adapternotfound&quot;&gt;AdapterNotFound&lt;/a&gt; and &lt;code&gt;ArgumentError&lt;/code&gt; may be returned on an error.</source>
          <target state="translated">エラーの場合、例外&lt;a href=&quot;adapternotspecified&quot;&gt;AdapterNotSpecified&lt;/a&gt;、&lt;a href=&quot;adapternotfound&quot;&gt;AdapterNotFound&lt;/a&gt;、および &lt;code&gt;ArgumentError&lt;/code&gt; が返されることがあります。</target>
        </trans-unit>
        <trans-unit id="2268f470fa1e4f224984a46fe5b66988eea0dd2c" translate="yes" xml:space="preserve">
          <source>The execution context of a block passed to &lt;code&gt;Class.new&lt;/code&gt; or &lt;code&gt;Module.new&lt;/code&gt; is not entirely equivalent to the one of the body of the definitions using the &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; keywords. But both idioms result in the same constant assignment.</source>
          <target state="translated">&lt;code&gt;Class.new&lt;/code&gt; または &lt;code&gt;Module.new&lt;/code&gt; に渡されるブロックの実行コンテキストは、 &lt;code&gt;class&lt;/code&gt; および &lt;code&gt;module&lt;/code&gt; キーワードを使用する定義の本体の実行コンテキストと完全に同等ではありません。しかし、両方のイディオムは同じ定数割り当てになります。</target>
        </trans-unit>
        <trans-unit id="d1560f51490992d361bd33ce4f84967240b07850" translate="yes" xml:space="preserve">
          <source>The execution of each test method stops as soon as any error or an assertion failure is encountered, and the test suite continues with the next method. All test methods are executed in random order. The &lt;a href=&quot;configuring#configuring-active-support&quot;&gt;&lt;code&gt;config.active_support.test_order&lt;/code&gt; option&lt;/a&gt; can be used to configure test order.</source>
          <target state="translated">各テストメソッドの実行は、エラーまたはアサーションエラーが発生するとすぐに停止し、テストスイートは次のメソッドを続行します。すべてのテストメソッドはランダムな順序で実行されます。&lt;a href=&quot;configuring#configuring-active-support&quot;&gt; &lt;code&gt;config.active_support.test_order&lt;/code&gt; のオプションは、&lt;/a&gt;テストの順序を設定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="86f2a88639b58b6dc320a26b779f9c83492793d1" translate="yes" xml:space="preserve">
          <source>The face attribute must be in the object and it cannot be blank or marked for destruction.</source>
          <target state="translated">face属性はオブジェクト内になければならず、空白にしたり、破壊のためにマークを付けたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="cd2e2325522f51d93172fabd30184210ad6758e4" translate="yes" xml:space="preserve">
          <source>The field name can also be a string:</source>
          <target state="translated">フィールド名には文字列を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="c23f5a2d4fe414d9b9dccdb276434ede248d4038" translate="yes" xml:space="preserve">
          <source>The file &lt;code&gt;railties/lib/rails/cli&lt;/code&gt; in turn calls &lt;code&gt;Rails::AppLoader.exec_app&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;railties/lib/rails/cli&lt;/code&gt; は、次に &lt;code&gt;Rails::AppLoader.exec_app&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="bac5d2c07bdf6dfba37a9dd229fabf112d19ceeb" translate="yes" xml:space="preserve">
          <source>The file extensions used on an asset determine what preprocessing is applied. When a controller or a scaffold is generated with the default Rails gemset, a CoffeeScript file and a SCSS file are generated in place of a regular JavaScript and CSS file. The example used before was a controller called &quot;projects&quot;, which generated an &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; file.</source>
          <target state="translated">アセットで使用されるファイル拡張子によって、適用される前処理が決まります。コントローラーまたはスキャフォールドがデフォルトのRails gemsetで生成されると、通常のJavaScriptおよびCSSファイルの代わりにCoffeeScriptファイルとSCSSファイルが生成されます。前に使用した例は「プロジェクト」と呼ばれるコントローラーで、 &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; ファイルを生成しました。</target>
        </trans-unit>
        <trans-unit id="683b772b6fe83f9b1b76bea0a8b4863a2c46b587" translate="yes" xml:space="preserve">
          <source>The file extensions used on an asset determine what preprocessing is applied. When a controller or a scaffold is generated with the default Rails gemset, an SCSS file is generated in place of a regular CSS file. The example used before was a controller called &quot;projects&quot;, which generated an &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; file.</source>
          <target state="translated">アセットで使用されるファイル拡張子によって、適用される前処理が決まります。コントローラーまたはスキャフォールドがデフォルトのRailsgemsetで生成されると、通常のCSSファイルの代わりにSCSSファイルが生成されます。以前に使用した例は、「projects」と呼ばれるコントローラーで、 &lt;code&gt;app/assets/stylesheets/projects.scss&lt;/code&gt; ファイルを生成しました。</target>
        </trans-unit>
        <trans-unit id="cba93d2258aa378ac9e921c11bf7eaf5e6cfa97d" translate="yes" xml:space="preserve">
          <source>The file_path parameter on the show action would be encoded as ASCII-8BIT, but all other arguments will remain UTF-8 encoded. This is useful in the case where an application must handle data but encoding of the data is unknown, like file system data.</source>
          <target state="translated">showアクションのfile_pathパラメータはASCII-8BITとしてエンコードされますが、他のすべての引数はUTF-8でエンコードされたままになります。これは、アプリケーションがデータを処理しなければならないが、ファイルシステムデータのようにデータのエンコーディングが不明な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="c26c0108cf064c492a946765b42605d5cad90a75" translate="yes" xml:space="preserve">
          <source>The files in &lt;code&gt;config/initializers&lt;/code&gt; (and any subdirectories of &lt;code&gt;config/initializers&lt;/code&gt;) are sorted and loaded one by one as part of the &lt;code&gt;load_config_initializers&lt;/code&gt; initializer.</source>
          <target state="translated">内のファイル &lt;code&gt;config/initializers&lt;/code&gt; （および任意のサブディレクトリ &lt;code&gt;config/initializers&lt;/code&gt; ）ソートとの一部として一つずつロードされ &lt;code&gt;load_config_initializers&lt;/code&gt; 初期化子。</target>
        </trans-unit>
        <trans-unit id="693c5053c620072ba87006436392f9198d81b36c" translate="yes" xml:space="preserve">
          <source>The files or configs can also be encrypted with a custom key. To decrypt with a key in the &lt;code&gt;ENV&lt;/code&gt;, use:</source>
          <target state="translated">ファイルまたは構成は、カスタムキーで暗号化することもできます。 &lt;code&gt;ENV&lt;/code&gt; のキーで復号化するには、次を使用します。</target>
        </trans-unit>
        <trans-unit id="79590c5db1b2aa3e6f7401ef520c2cc7cf875c50" translate="yes" xml:space="preserve">
          <source>The final caveat is that your actions are executed in a separate thread than the main thread. Make sure your actions are thread safe, and this shouldn't be a problem (don't share state across threads, etc).</source>
          <target state="translated">最後の注意点は、あなたのアクションはメインスレッドとは別のスレッドで実行されるということです。あなたのアクションがスレッドセーフであることを確認し、これは問題にならないはずです (スレッド間で状態を共有しないなど)。</target>
        </trans-unit>
        <trans-unit id="421c547ed96034c7fdf98ebd07b149c41367cd02" translate="yes" xml:space="preserve">
          <source>The final result would be:</source>
          <target state="translated">最終的にはこうなるだろう。</target>
        </trans-unit>
        <trans-unit id="b6e8a878c6d566279c79dabab5729cf9f687141e" translate="yes" xml:space="preserve">
          <source>The fingerprinting behavior is controlled by the &lt;code&gt;config.assets.digest&lt;/code&gt; initialization option (which defaults to &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">フィンガープリントの動作は、 &lt;code&gt;config.assets.digest&lt;/code&gt; 初期化オプション（デフォルトは &lt;code&gt;true&lt;/code&gt; ）によって制御されます。</target>
        </trans-unit>
        <trans-unit id="0e5b88eb961587020694ec62f77f764be5c16bf8" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;link_to&lt;/code&gt; will generate &amp;ldquo;/profile&amp;rdquo; but the second will generate the standard polymorphic URL of &amp;ldquo;/admin/users/1&amp;rdquo;.</source>
          <target state="translated">最初の &lt;code&gt;link_to&lt;/code&gt; は「/ profile」を生成しますが、2番目は「/ admin / users / 1」の標準的な多態性URLを生成します。</target>
        </trans-unit>
        <trans-unit id="cd20ffb3e2140e1113ddfc3b288c6aa57e901460" translate="yes" xml:space="preserve">
          <source>The first and last part used to find the generator to be invoked are guessed based on class invokes &lt;a href=&quot;base#method-c-hook_for&quot;&gt;::hook_for&lt;/a&gt;, as noticed in the example above. This can be customized with two options: :in and :as.</source>
          <target state="translated">呼び出されるジェネレータを見つけるために使用される最初と最後の部分は、上記の例で気づいたように、クラスinvokes &lt;a href=&quot;base#method-c-hook_for&quot;&gt;:: hook_forに&lt;/a&gt;基づいて推測されます。これは、：inと：asの2つのオプションでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="4ab3c578cc14a9f99df243c07a14a3467eafd65b" translate="yes" xml:space="preserve">
          <source>The first and last part used to find the generator to be invoked are guessed based on class invokes &lt;a href=&quot;base#method-c-hook_for&quot;&gt;&lt;code&gt;hook_for&lt;/code&gt;&lt;/a&gt;, as noticed in the example above. This can be customized with two options: :in and :as.</source>
          <target state="translated">上記の例でわかるように、呼び出されるジェネレーターを見つけるために使用される最初と最後の部分は、クラス&lt;a href=&quot;base#method-c-hook_for&quot;&gt; &lt;code&gt;hook_for&lt;/code&gt; &lt;/a&gt;基づいて推測されます。これは、：inと：asの2つのオプションでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="6b2feec48312de884813c60913a1cd3ef59e3f70" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;code&gt;options_for_select&lt;/code&gt; is a nested array where each element has two elements: option text (city name) and option value (city id). The option value is what will be submitted to your controller. Often this will be the id of a corresponding database object but this does not have to be the case.</source>
          <target state="translated">&lt;code&gt;options_for_select&lt;/code&gt; の最初の引数はネストされた配列で、各要素にはオプションテキスト（都市名）とオプション値（都市ID）の2つの要素があります。オプション値は、コントローラーに送信されるものです。多くの場合、これは対応するデータベースオブジェクトのIDになりますが、そうである必要はありません。</target>
        </trans-unit>
        <trans-unit id="c35a6654821cab50b0d48eb9aec811dba267ad71" translate="yes" xml:space="preserve">
          <source>The first example shows &lt;code&gt;in_groups_of&lt;/code&gt; fills the last group with as many &lt;code&gt;nil&lt;/code&gt; elements as needed to have the requested size. You can change this padding value using the second optional argument:</source>
          <target state="translated">最初の例は、 &lt;code&gt;in_groups_of&lt;/code&gt; が、要求されたサイズになるのに必要なだけの &lt;code&gt;nil&lt;/code&gt; 要素で最後のグループを埋めることを示しています。2番目のオプションの引数を使用して、このパディング値を変更できます。</target>
        </trans-unit>
        <trans-unit id="cec3ae932966c51c2ccbcc94a3e144ca1e358e96" translate="yes" xml:space="preserve">
          <source>The first example shows how &lt;code&gt;in_groups_of&lt;/code&gt; fills the last group with as many &lt;code&gt;nil&lt;/code&gt; elements as needed to have the requested size. You can change this padding value using the second optional argument:</source>
          <target state="translated">最初の例は、 &lt;code&gt;in_groups_of&lt;/code&gt; が、要求されたサイズにするために必要な数の &lt;code&gt;nil&lt;/code&gt; 要素で最後のグループを埋める方法を示しています。このパディング値は、2番目のオプションの引数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="4f47fe60e70f182e1be5811a83b6e1289320cec3" translate="yes" xml:space="preserve">
          <source>The first feature of the pipeline is to concatenate assets, which can reduce the number of requests that a browser makes to render a web page. Web browsers are limited in the number of requests that they can make in parallel, so fewer requests can mean faster loading for your application.</source>
          <target state="translated">パイプラインの最初の機能はアセットを連結することで、ブラウザがウェブページをレンダリングするために行うリクエストの数を減らすことができます。Web ブラウザは並行して行えるリクエスト数に制限があるため、リクエスト数を減らすことでアプリケーションの読み込みが速くなることを意味します。</target>
        </trans-unit>
        <trans-unit id="a7fda4a618b934b655302ec63bac10bfdaa3385c" translate="yes" xml:space="preserve">
          <source>The first form</source>
          <target state="translated">第一の形態</target>
        </trans-unit>
        <trans-unit id="c779e7cdfc5b1f836df5b6e50b3fb3f8e6ec3015" translate="yes" xml:space="preserve">
          <source>The first is to use a block directly with the *_action methods. The block receives the controller as an argument. The &lt;code&gt;require_login&lt;/code&gt; filter from above could be rewritten to use a block:</source>
          <target state="translated">1つは、* _ actionメソッドで直接ブロックを使用することです。ブロックはコントローラーを引数として受け取ります。上記の &lt;code&gt;require_login&lt;/code&gt; フィルターは、ブロックを使用するように書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="0eefd9b71e6b09cec0f424fcb37e2f0065378122" translate="yes" xml:space="preserve">
          <source>The first is to use a block directly with the &lt;code&gt;*_action&lt;/code&gt; methods. The block receives the controller as an argument. The &lt;code&gt;require_login&lt;/code&gt; filter from above could be rewritten to use a block:</source>
          <target state="translated">1つ目は、 &lt;code&gt;*_action&lt;/code&gt; メソッドでブロックを直接使用することです。ブロックは、コントローラーを引数として受け取ります。上記の &lt;code&gt;require_login&lt;/code&gt; フィルターは、ブロックを使用するように書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="decf5a49fc6e6d01f58f977387f90ce1c0e78cbb" translate="yes" xml:space="preserve">
          <source>The first option doesn't require any client-side JavaScript integration, and can be used by any other back-end service that deals with files. The second option is faster, since you're not using your own server as a staging point for uploads, and can work with deployments like Heroku that do not provide large amounts of disk space.</source>
          <target state="translated">最初のオプションは、クライアント側の JavaScript との統合を必要とせず、ファイルを扱う他のバックエンドサービスで使用することができます。2 番目のオプションは、アップロードのためのステージングポイントとして自分のサーバーを使用しないので高速で、Heroku のような大量のディスクスペースを提供しないデプロイメントでも動作します。</target>
        </trans-unit>
        <trans-unit id="3018e7bc52b5fa1b4994063800ecfef2cab4f995" translate="yes" xml:space="preserve">
          <source>The first parameter specifies which value should be selected and can either be an instance of a &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, or &lt;code&gt;DateTime&lt;/code&gt;, in which case the relevant component will be extracted, or a numerical value. For example:</source>
          <target state="translated">最初のパラメーターは選択する値を指定し、関連するコンポーネントが抽出される &lt;code&gt;Date&lt;/code&gt; 、 &lt;code&gt;Time&lt;/code&gt; 、または &lt;code&gt;DateTime&lt;/code&gt; のインスタンス、または数値のいずれかになります。例えば：</target>
        </trans-unit>
        <trans-unit id="23ef7dafac92cd567811d97501c6c0de467a9214" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-check_box&quot;&gt;&lt;code&gt;check_box&lt;/code&gt;&lt;/a&gt; is the name of the input. The second parameter is the value of the input. This value will be included in the form data (and be present in &lt;code&gt;params&lt;/code&gt;) when the checkbox is checked.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html#method-i-check_box&quot;&gt; &lt;code&gt;check_box&lt;/code&gt; &lt;/a&gt;の最初のパラメーターは、入力の名前です。2番目のパラメーターは、入力の値です。この値は、チェックボックスが &lt;code&gt;params&lt;/code&gt; ときにフォームデータに含まれます（そしてparamsに存在します）。</target>
        </trans-unit>
        <trans-unit id="9f933693c0140825dd1f189e2779b8fe6cb715c9" translate="yes" xml:space="preserve">
          <source>The first parameter to &lt;code&gt;check_box_tag&lt;/code&gt;, of course, is the name of the input. The second parameter, naturally, is the value of the input. This value will be included in the form data (and be present in &lt;code&gt;params&lt;/code&gt;) when the checkbox is checked.</source>
          <target state="translated">もちろん、 &lt;code&gt;check_box_tag&lt;/code&gt; の最初のパラメーターは入力の名前です。当然、2番目のパラメーターは入力の値です。この値は、チェックボックスが &lt;code&gt;params&lt;/code&gt; ときにフォームデータに含まれます（そしてparamsに存在します）。</target>
        </trans-unit>
        <trans-unit id="ceab9ee28778e0cd198e4bb4c0d9830c53ea674c" translate="yes" xml:space="preserve">
          <source>The first question a lot of people have when thinking about building a JSON API using Rails is: &quot;isn't using Rails to spit out some JSON overkill? Shouldn't I just use something like Sinatra?&quot;.</source>
          <target state="translated">Railsを使ってJSON APIを構築しようと考えたときに、多くの人が最初に抱く疑問があります。&quot;Railsを使ってJSONを吐き出すのはやりすぎではないか?Sinatraのようなものを使うべきではないのか?&quot;ということです。</target>
        </trans-unit>
        <trans-unit id="dbb1590aff8add787236e67ae78ae8bec4308b59" translate="yes" xml:space="preserve">
          <source>The first step is to call &lt;code&gt;visit articles_path&lt;/code&gt;. This will take the test to the articles index page.</source>
          <target state="translated">最初のステップは、 &lt;code&gt;visit articles_path&lt;/code&gt; を呼び出すことです。これにより、記事のインデックスページにテストが移動します。</target>
        </trans-unit>
        <trans-unit id="a5f38744e3441897f904e05dbaada4d430125ad6" translate="yes" xml:space="preserve">
          <source>The first step is to create a file at &lt;code&gt;lib/generators/initializer_generator.rb&lt;/code&gt; with the following content:</source>
          <target state="translated">最初のステップは、 &lt;code&gt;lib/generators/initializer_generator.rb&lt;/code&gt; に以下の内容のファイルを作成することです：</target>
        </trans-unit>
        <trans-unit id="7647b789ce905eead162df1c2d4deef59320a6d1" translate="yes" xml:space="preserve">
          <source>The first step is to update the README file with detailed information about how to use your plugin. A few key things to include are:</source>
          <target state="translated">最初のステップは、プラグインの使用方法についての詳細な情報が記載されたREADMEファイルを更新することです。含めるべきいくつかの重要なことは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="59c512882e34836962c0651a7f7bce0b3070c1e6" translate="yes" xml:space="preserve">
          <source>The first step to avoid this is to make sure all &quot;destructive&quot; actions (create, update, and destroy) can only be accessed with non-GET requests. If you're following RESTful conventions you're already doing this. However, a malicious site can still send a non-GET request to your site quite easily, and that's where the request forgery protection comes in. As the name says, it protects from forged requests.</source>
          <target state="translated">これを避けるための最初のステップは、すべての「破壊的な」アクション(create、update、destroy)が非GETリクエストでのみアクセスできるようにすることです。RESTful の規約に従っているのであれば、すでにこれを実行しています。しかし、悪意のあるサイトは、あなたのサイトに非GETリクエストを簡単に送信することができます。その名の通り、これは偽造されたリクエストから保護します。</target>
        </trans-unit>
        <trans-unit id="5109762b5d7c74ae179ab67654f35f303d74031b" translate="yes" xml:space="preserve">
          <source>The first step we'll take is adding an &lt;code&gt;edit&lt;/code&gt; action to the &lt;code&gt;ArticlesController&lt;/code&gt;, generally between the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; actions, as shown:</source>
          <target state="translated">次のように、最初のステップは、通常、 &lt;code&gt;new&lt;/code&gt; アクションと &lt;code&gt;create&lt;/code&gt; アクションの間に、 &lt;code&gt;ArticlesController&lt;/code&gt; に &lt;code&gt;edit&lt;/code&gt; アクションを追加することです。</target>
        </trans-unit>
        <trans-unit id="ca590be262eb1b3454e67886b520ae65c0895075" translate="yes" xml:space="preserve">
          <source>The first thing that the scaffold generator does is invoke the &lt;code&gt;active_record&lt;/code&gt; generator, which generates a migration and a model for the resource. Note here, however, that the migration is called &lt;code&gt;create_blorgh_articles&lt;/code&gt; rather than the usual &lt;code&gt;create_articles&lt;/code&gt;. This is due to the &lt;code&gt;isolate_namespace&lt;/code&gt; method called in the &lt;code&gt;Blorgh::Engine&lt;/code&gt; class's definition. The model here is also namespaced, being placed at &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; rather than &lt;code&gt;app/models/article.rb&lt;/code&gt; due to the &lt;code&gt;isolate_namespace&lt;/code&gt; call within the &lt;code&gt;Engine&lt;/code&gt; class.</source>
          <target state="translated">scaffoldジェネレーターが最初に行うことは、リソースの移行とモデルを生成する &lt;code&gt;active_record&lt;/code&gt; ジェネレーターを呼び出すことです。ただし、ここでの移行は、通常の &lt;code&gt;create_articles&lt;/code&gt; ではなく &lt;code&gt;create_blorgh_articles&lt;/code&gt; と呼ばれることに注意してください。これは、 &lt;code&gt;Blorgh::Engine&lt;/code&gt; クラスの定義で呼び出される &lt;code&gt;isolate_namespace&lt;/code&gt; メソッドが原因です。こちらのモデルはまたに配置され、名前空間れる &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; ではなく、 &lt;code&gt;app/models/article.rb&lt;/code&gt; 原因に &lt;code&gt;isolate_namespace&lt;/code&gt; の内のコール &lt;code&gt;Engine&lt;/code&gt; クラス。</target>
        </trans-unit>
        <trans-unit id="bf247db1b15a4a0665a1fff0a86d0b8b870286c8" translate="yes" xml:space="preserve">
          <source>The first thing to generate for a blog engine is the &lt;code&gt;Article&lt;/code&gt; model and related controller. To quickly generate this, you can use the Rails scaffold generator.</source>
          <target state="translated">ブログエンジン用に最初に生成するのは、 &lt;code&gt;Article&lt;/code&gt; モデルと関連するコントローラーです。これを素早く生成するために、Rails scaffoldジェネレーターを使用できます。</target>
        </trans-unit>
        <trans-unit id="67ac826f249d2df18239a1cdc76f0b3ffea39836" translate="yes" xml:space="preserve">
          <source>The first thing we'll want to do is create a new Rails application by running the &lt;code&gt;rails new&lt;/code&gt; command after installing Rails.</source>
          <target state="translated">まず、Railsのインストール後に &lt;code&gt;rails new&lt;/code&gt; コマンドを実行して、新しいRailsアプリケーションを作成します。</target>
        </trans-unit>
        <trans-unit id="0ee7285a99cf6559d8f8b5329c15cff3b597d8f9" translate="yes" xml:space="preserve">
          <source>The first timestamp (&lt;code&gt;[timestamp_1]&lt;/code&gt;) will be the current time, and the second timestamp (&lt;code&gt;[timestamp_2]&lt;/code&gt;) will be the current time plus a second. The reason for this is so that the migrations for the engine are run after any existing migrations in the application.</source>
          <target state="translated">最初のタイムスタンプ（ &lt;code&gt;[timestamp_1]&lt;/code&gt; ）は現在の時刻になり、2番目のタイムスタンプ（ &lt;code&gt;[timestamp_2]&lt;/code&gt; ）は現在の時刻に1秒を加えたものになります。これは、アプリケーションの既存の移行の後に、エンジンの移行が実行されるためです。</target>
        </trans-unit>
        <trans-unit id="3e6b2570d51c28085531d230e84b5d63f1e48272" translate="yes" xml:space="preserve">
          <source>The first two characters (&amp;ldquo;&amp;gt;) are required in case the exception happens while rendering attributes for a given tag. You can check the real cause for the exception in your logger.</source>
          <target state="translated">特定のタグの属性のレンダリング中に例外が発生した場合に備えて、最初の2文字（「&amp;gt;」）は必須です。ロガーで例外の実際の原因を確認できます。</target>
        </trans-unit>
        <trans-unit id="f5092553a0a2e3d4056efc8cfd87cfcacfff7bc7" translate="yes" xml:space="preserve">
          <source>The first validation declares that a &lt;code&gt;title&lt;/code&gt; value must be present. Because &lt;code&gt;title&lt;/code&gt; is a string, this means that the &lt;code&gt;title&lt;/code&gt; value must contain at least one non-whitespace character.</source>
          <target state="translated">最初の検証では、 &lt;code&gt;title&lt;/code&gt; 値が存在する必要があることを宣言しています。 &lt;code&gt;title&lt;/code&gt; は文字列であるため、これは、 &lt;code&gt;title&lt;/code&gt; 値に少なくとも1つの非空白文字が含まれている必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="b2c00d089f456d9cd4776e5aa15cde27aa51cc15" translate="yes" xml:space="preserve">
          <source>The first way uses a &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;&lt;code&gt;has_many&lt;/code&gt;&lt;/a&gt; association with the &lt;code&gt;:through&lt;/code&gt; option and a join model, so there are two stages of associations.</source>
          <target state="translated">最初の方法では、&lt;a href=&quot;classmethods#method-i-has_many&quot;&gt; &lt;code&gt;has_many&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;:through&lt;/code&gt; オプションおよび結合モデルを使用するため、関連付けには2つの段階があります。</target>
        </trans-unit>
        <trans-unit id="72aa6535de6074bb6bd46b9d2d9f30007e42e7a1" translate="yes" xml:space="preserve">
          <source>The first way uses a &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; association with the &lt;code&gt;:through&lt;/code&gt; option and a join model, so there are two stages of associations.</source>
          <target state="translated">1つ目の方法では、 &lt;code&gt;:through&lt;/code&gt; オプションを使用した&lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;関連付けと結合モデルを使用するため、関連付けには2つの段階があります。</target>
        </trans-unit>
        <trans-unit id="c9cd0c75ac26aeaf1392bf739898212b29b06c34" translate="yes" xml:space="preserve">
          <source>The first_name attribute must be in the object and it cannot be blank.</source>
          <target state="translated">first_name属性はオブジェクト内になければならず、空白にすることはできません。</target>
        </trans-unit>
        <trans-unit id="7f7deeb91723eb6307c03873779ac20d588eb92a" translate="yes" xml:space="preserve">
          <source>The first_name attribute must be in the object and it must be blank.</source>
          <target state="translated">first_name属性はオブジェクト内になければならず、空白でなければなりません。</target>
        </trans-unit>
        <trans-unit id="55bef31fcee581ecc39fbeffc0faa4743f90075a" translate="yes" xml:space="preserve">
          <source>The flash is a special part of the session which is cleared with each request. This means that values stored there will only be available in the next request, which is useful for passing error messages etc.</source>
          <target state="translated">フラッシュはセッションの特別な部分で、リクエストごとにクリアされます。これは、そこに保存された値が次のリクエストでのみ利用可能であることを意味し、エラーメッセージなどを渡すのに便利です。</target>
        </trans-unit>
        <trans-unit id="13c55339edc43cfab5f941cbdf399008a5a9ec67" translate="yes" xml:space="preserve">
          <source>The flash is a special part of the session which is cleared with each request. This means that values stored there will only be available in the next request, which is useful for passing error messages, etc.</source>
          <target state="translated">フラッシュはセッションの特別な部分で、リクエストごとにクリアされます。これは、そこに保存された値が次のリクエストでのみ利用可能であることを意味し、エラーメッセージなどを渡すのに便利です。</target>
        </trans-unit>
        <trans-unit id="9245524e6ad5dd053b9feec99770843d73c126d2" translate="yes" xml:space="preserve">
          <source>The flash is accessed via the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash&quot;&gt;&lt;code&gt;flash&lt;/code&gt;&lt;/a&gt; method. Like the session, the flash is represented as a hash.</source>
          <target state="translated">フラッシュには、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/RequestMethods.html#method-i-flash&quot;&gt; &lt;code&gt;flash&lt;/code&gt; &lt;/a&gt;方式でアクセスします。セッションと同様に、フラッシュはハッシュとして表されます。</target>
        </trans-unit>
        <trans-unit id="643574b17d90501a21086b03d4416808f0b5012a" translate="yes" xml:space="preserve">
          <source>The flash provides a way to pass temporary primitive-types (&lt;a href=&quot;../string&quot;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;) between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets &lt;code&gt;flash[:notice] = &quot;Post successfully created&quot;&lt;/code&gt; before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done.</source>
          <target state="translated">フラッシュは、アクション間で一時的なプリミティブ型（&lt;a href=&quot;../string&quot;&gt; &lt;code&gt;String&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;）を渡す方法を提供します。フラッシュに置いたものはすべて、次のアクションにさらされてからクリアされます。これは、フラッシュをテンプレートに公開できる表示アクションにリダイレクトする前に、 &lt;code&gt;flash[:notice] = &quot;Post successfully created&quot;&lt;/code&gt; を設定する作成アクションなどの通知とアラートを実行するための優れた方法です。実際、その露出は自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="89b509889e32d8f793986316afbb6c7d8a102d1b" translate="yes" xml:space="preserve">
          <source>The flash provides a way to pass temporary primitive-types (String, &lt;a href=&quot;../array&quot;&gt;Array&lt;/a&gt;, &lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt;) between actions. Anything you place in the flash will be exposed to the very next action and then cleared out. This is a great way of doing notices and alerts, such as a create action that sets &lt;code&gt;flash[:notice] = &quot;Post
successfully created&quot;&lt;/code&gt; before redirecting to a display action that can then expose the flash to its template. Actually, that exposure is automatically done.</source>
          <target state="translated">フラッシュは、アクション間で一時的なプリミティブ型（String、&lt;a href=&quot;../array&quot;&gt;Array&lt;/a&gt;、&lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt;）を渡す方法を提供します。フラッシュに配置したものはすべて、次のアクションにさらされてからクリアされます。これは、 &lt;code&gt;flash[:notice] = &quot;Post successfully created&quot;&lt;/code&gt; からフラッシュをテンプレートに公開できる表示アクションにリダイレクトする作成アクションなど、通知やアラートを実行する優れた方法です。実際、その露出は自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="d6361541543365d2f737ca6fb21692e2f0f63b28" translate="yes" xml:space="preserve">
          <source>The following are methods available for both generators and templates for Rails.</source>
          <target state="translated">Railsのジェネレータとテンプレートの両方で利用できるメソッドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="67bf5b51e02f43e1149966c9a4a365e81062253f" translate="yes" xml:space="preserve">
          <source>The following bundled adapters throw the &lt;a href=&quot;../recordnotunique&quot;&gt;&lt;code&gt;ActiveRecord::RecordNotUnique&lt;/code&gt;&lt;/a&gt; exception:</source>
          <target state="translated">次のバンドルされたアダプターは、&lt;a href=&quot;../recordnotunique&quot;&gt; &lt;code&gt;ActiveRecord::RecordNotUnique&lt;/code&gt; &lt;/a&gt;例外をスローします。</target>
        </trans-unit>
        <trans-unit id="ffee53ad3ec5b77a2f9a08d7a6e4adedc900dee5" translate="yes" xml:space="preserve">
          <source>The following bundled adapters throw the &lt;a href=&quot;../recordnotunique&quot;&gt;ActiveRecord::RecordNotUnique&lt;/a&gt; exception:</source>
          <target state="translated">次のバンドルされたアダプターは、&lt;a href=&quot;../recordnotunique&quot;&gt;ActiveRecord :: RecordNotUnique&lt;/a&gt;例外をスローします。</target>
        </trans-unit>
        <trans-unit id="4f1c96675ae6b9570b50e212e3ae027ef8570ca5" translate="yes" xml:space="preserve">
          <source>The following calculation methods have edge cases in October 1582, since days 5..14 just do not exist. This guide does not document their behavior around those days for brevity, but it is enough to say that they do what you would expect. That is, &lt;code&gt;Date.new(1582, 10, 4).tomorrow&lt;/code&gt; returns &lt;code&gt;Date.new(1582, 10, 15)&lt;/code&gt; and so on. Please check &lt;code&gt;test/core_ext/date_ext_test.rb&lt;/code&gt; in the Active Support test suite for expected behavior.</source>
          <target state="translated">次の計算方法は、1582年10月にエッジケースがあります。これは、5..14日が存在しないためです。このガイドでは、簡潔にするために当時のそれらの動作を文書化していませんが、彼らがあなたが期待することをするということで十分です。つまり、 &lt;code&gt;Date.new(1582, 10, 4).tomorrow&lt;/code&gt; は &lt;code&gt;Date.new(1582, 10, 15)&lt;/code&gt; ）などを返します。予想される動作については、アクティブサポートテストスイートの &lt;code&gt;test/core_ext/date_ext_test.rb&lt;/code&gt; を確認してください。</target>
        </trans-unit>
        <trans-unit id="70d4c9f719378844b4409a52323353064e172572" translate="yes" xml:space="preserve">
          <source>The following changes are meant for upgrading your application to Rails 3.1.12, the last 3.1.x version of Rails.</source>
          <target state="translated">以下の変更は、アプリケーションをRails 3.1.xの最後のバージョンであるRails 3.1.12にアップグレードするためのものです。</target>
        </trans-unit>
        <trans-unit id="a21909e1f363f954735463d953a47620a34d0ecc" translate="yes" xml:space="preserve">
          <source>The following changes are meant for upgrading your application to Rails 4.0.</source>
          <target state="translated">以下の変更は、アプリケーションをRails 4.0にアップグレードするためのものです。</target>
        </trans-unit>
        <trans-unit id="1f4eba11712b688c04dbd32d2ec745a16224dc68" translate="yes" xml:space="preserve">
          <source>The following changes are meant for upgrading your application to the latest 3.2.x version of Rails.</source>
          <target state="translated">以下の変更は、アプリケーションをRailsの最新バージョン3.2.xにアップグレードするためのものです。</target>
        </trans-unit>
        <trans-unit id="5a17e0ad99303eed4359cff4d8da7d88c45ebc56" translate="yes" xml:space="preserve">
          <source>The following checks can also be supplied with a proc or a symbol which corresponds to a method:</source>
          <target state="translated">以下のチェックは、メソッドに対応する proc またはシンボルで提供することもできます。</target>
        </trans-unit>
        <trans-unit id="46a28b7e917344b9bee0503c9f816514c89eeea1" translate="yes" xml:space="preserve">
          <source>The following code summarizes the situation:</source>
          <target state="translated">状況をまとめると以下のコードになります。</target>
        </trans-unit>
        <trans-unit id="c281ebe2a035df9fc9b458fe9d16552fd19ecc0a" translate="yes" xml:space="preserve">
          <source>The following concrete subclasses are included in Active Storage:</source>
          <target state="translated">Active Storageには、以下のような具体的なサブクラスが含まれています。</target>
        </trans-unit>
        <trans-unit id="96657eda8232590db12df6e4e53baab705d4dc34" translate="yes" xml:space="preserve">
          <source>The following configuration options are best made in one of the environment files (environment.rb, production.rb, etc...)</source>
          <target state="translated">以下の設定オプションは、環境ファイル(environment.rb、production.rbなど)のいずれかで作成するのが最適です。</target>
        </trans-unit>
        <trans-unit id="30177bc5b6729d79742e2ee030efdfe4f950f932" translate="yes" xml:space="preserve">
          <source>The following configuration would queue the given job on the &lt;code&gt;production_high_priority&lt;/code&gt; queue when run in production:</source>
          <target state="translated">次の構成は、 &lt;code&gt;production_high_priority&lt;/code&gt; 環境で実行されるときに、指定されたジョブをproduction_high_priorityキューに入れます。</target>
        </trans-unit>
        <trans-unit id="48b002c00bb39650ea2c3d72da1338bb50128142" translate="yes" xml:space="preserve">
          <source>The following configuration would queue the provided job on the &lt;code&gt;video_server.low_priority&lt;/code&gt; queue:</source>
          <target state="translated">次の構成では、提供されたジョブを &lt;code&gt;video_server.low_priority&lt;/code&gt; キューに入れます。</target>
        </trans-unit>
        <trans-unit id="daa83a45bf2ff91d6a20f892040b66a0d751ead1" translate="yes" xml:space="preserve">
          <source>The following example demonstrates an extension which can be used with or without &lt;code&gt;Rails&lt;/code&gt;.</source>
          <target state="translated">次の例は、 &lt;code&gt;Rails&lt;/code&gt; の有無にかかわらず使用できる拡張機能を示しています。</target>
        </trans-unit>
        <trans-unit id="5f452617bef02933cc7f6d371891f371f7e4b779" translate="yes" xml:space="preserve">
          <source>The following example demonstrates an extension which can be used with or without Rails.</source>
          <target state="translated">次の例では、Railsの有無にかかわらず使用できる拡張機能を示しています。</target>
        </trans-unit>
        <trans-unit id="99962e504be8e6840c8589ad9d05120d1cb4146f" translate="yes" xml:space="preserve">
          <source>The following features are not (yet) supported:</source>
          <target state="translated">以下の機能は(まだ)サポートされていません。</target>
        </trans-unit>
        <trans-unit id="013180286a901d766bcc39db17dc989369dbd41a" translate="yes" xml:space="preserve">
          <source>The following form allows a user to create a &lt;code&gt;Person&lt;/code&gt; and its associated addresses.</source>
          <target state="translated">次のフォームでは、ユーザーが &lt;code&gt;Person&lt;/code&gt; とそれに関連付けられたアドレスを作成できます。</target>
        </trans-unit>
        <trans-unit id="d27a5fac9684ab445570c45c6aa8783eca1e2a54" translate="yes" xml:space="preserve">
          <source>The following form:</source>
          <target state="translated">次のような形です。</target>
        </trans-unit>
        <trans-unit id="bc83f277cf7da9fe5a7029905b527298a6aa3ec1" translate="yes" xml:space="preserve">
          <source>The following format is for legacy syntax support. It will be deprecated in future versions of Rails.</source>
          <target state="translated">以下のフォーマットはレガシー構文をサポートするためのものです。これは将来のRailsのバージョンでは非推奨となります。</target>
        </trans-unit>
        <trans-unit id="d8548d239e9c484f9cc69b4404f594147009b4fe" translate="yes" xml:space="preserve">
          <source>The following full app-like example demonstrates how to use a Current class to facilitate easy access to the global, per-request attributes without passing them deeply around everywhere:</source>
          <target state="translated">次の完全なアプリのような例では、Current クラスを使って、グローバルな、リクエストごとの属性に簡単にアクセスできるようにする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="f673bda06c21b2c27e3f9ccec5465bcd91e788ad" translate="yes" xml:space="preserve">
          <source>The following headers:</source>
          <target state="translated">以下のヘッダーです。</target>
        </trans-unit>
        <trans-unit id="0955f47379c8d09732c707b032526245b3e6cc5c" translate="yes" xml:space="preserve">
          <source>The following is a list of the most commonly used methods. Please refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Errors.html&quot;&gt;&lt;code&gt;ActiveModel::Errors&lt;/code&gt;&lt;/a&gt; documentation for a list of all the available methods.</source>
          <target state="translated">以下は、最も一般的に使用される方法のリストです。使用可能なすべてのメソッドのリストについては、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveModel/Errors.html&quot;&gt; &lt;code&gt;ActiveModel::Errors&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="58d425cd8d652b864ae1fe65a46c847b1c3552b2" translate="yes" xml:space="preserve">
          <source>The following is a list of the most commonly used methods. Please refer to the &lt;code&gt;ActiveModel::Errors&lt;/code&gt; documentation for a list of all the available methods.</source>
          <target state="translated">以下は、最も一般的に使用される方法のリストです。利用可能なすべてのメソッドのリストについては、 &lt;code&gt;ActiveModel::Errors&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="12aabb098cae3591d87c543791e9cbc757195d40" translate="yes" xml:space="preserve">
          <source>The following is an excerpt from the &lt;a href=&quot;http://www.symantec.com/security_response/writeup.jsp?docid=2006-061211-4111-99&amp;amp;tabid=1&quot;&gt;Js.Yamanner@m&lt;/a&gt; Yahoo! Mail &lt;a href=&quot;http://groovin.net/stuff/yammer.txt&quot;&gt;worm&lt;/a&gt;. It appeared on June 11, 2006 and was the first webmail interface worm:</source>
          <target state="translated">以下は、&lt;a href=&quot;http://www.symantec.com/security_response/writeup.jsp?docid=2006-061211-4111-99&amp;amp;tabid=1&quot;&gt;Js.Yamanner @ m&lt;/a&gt; Yahoo! からの抜粋です。メール&lt;a href=&quot;http://groovin.net/stuff/yammer.txt&quot;&gt;ワーム&lt;/a&gt;。2006年6月11日に出現し、最初のWebメールインターフェースワームでした。</target>
        </trans-unit>
        <trans-unit id="579d8c42dd4ef8c57843a057efd4713ac1241a02" translate="yes" xml:space="preserve">
          <source>The following is only a brief overview summary of the helpers available in Action View. It's recommended that you review the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;API Documentation&lt;/a&gt;, which covers all of the helpers in more detail, but this should serve as a good starting point.</source>
          <target state="translated">以下は、アクションビューで使用できるヘルパーの簡単な概要のみです。すべてのヘルパーについて詳しく説明している&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;APIドキュメント&lt;/a&gt;を確認することをお勧めしますが、これは出発点として役立ちます。</target>
        </trans-unit>
        <trans-unit id="d28f8549e31b151dd0222afe166ac626a4278627" translate="yes" xml:space="preserve">
          <source>The following line enables YUI compression, and requires the &lt;code&gt;yui-compressor&lt;/code&gt; gem.</source>
          <target state="translated">次の行はYUI圧縮を有効にし、 &lt;code&gt;yui-compressor&lt;/code&gt; gem を必要とします。</target>
        </trans-unit>
        <trans-unit id="f47cec262f30e06d8f4686db19c2d636b84a9271" translate="yes" xml:space="preserve">
          <source>The following line invokes &lt;code&gt;uglifier&lt;/code&gt; for JavaScript compression.</source>
          <target state="translated">次の行は、JavaScript圧縮用の &lt;code&gt;uglifier&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3a19c4339274251eb0bf0254401868be2ad510d0" translate="yes" xml:space="preserve">
          <source>The following methods are only implemented in &lt;code&gt;active_support/core_ext/date_time/calculations.rb&lt;/code&gt; as they only make sense when used with a &lt;code&gt;DateTime&lt;/code&gt; instance:</source>
          <target state="translated">次のメソッドは、 &lt;code&gt;DateTime&lt;/code&gt; インスタンスで使用する場合にのみ意味があるため、 &lt;code&gt;active_support/core_ext/date_time/calculations.rb&lt;/code&gt; でのみ実装されます。</target>
        </trans-unit>
        <trans-unit id="f43faaf33bf2c0cdf7480bc0b867a519fa0ab48b" translate="yes" xml:space="preserve">
          <source>The following methods are reimplemented so you do &lt;strong&gt;not&lt;/strong&gt; need to load &lt;code&gt;active_support/core_ext/date/calculations.rb&lt;/code&gt; for these ones:</source>
          <target state="translated">以下のメソッドは再実装 &lt;code&gt;active_support/core_ext/date/calculations.rb&lt;/code&gt; れているため、これらのメソッドについてactive_support / core_ext / date / calculations.rbをロードする必要&lt;strong&gt;は&lt;/strong&gt;ありませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3a5dee795f797c6e7d2a27bbce6ab149fb9ee6ba" translate="yes" xml:space="preserve">
          <source>The following methods for retrieval and query of a single associated object will be added:</source>
          <target state="translated">単一の関連するオブジェクトの検索と問い合わせのための以下のメソッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="d5783a97e1eb9d3a76a908a48921fa3c38071460" translate="yes" xml:space="preserve">
          <source>The following methods return a &lt;code&gt;Time&lt;/code&gt; object if possible, otherwise a &lt;code&gt;DateTime&lt;/code&gt;. If set, they honor the user time zone.</source>
          <target state="translated">次のメソッドは、可能な場合は &lt;code&gt;Time&lt;/code&gt; オブジェクトを返し、それ以外の場合は &lt;code&gt;DateTime&lt;/code&gt; を返します。設定されている場合、ユーザーのタイムゾーンを尊重します。</target>
        </trans-unit>
        <trans-unit id="657070cc7bdd9e1b035ac61f00a01849f933d950" translate="yes" xml:space="preserve">
          <source>The following methods skip validations, and will save the object to the database regardless of its validity. They should be used with caution.</source>
          <target state="translated">以下のメソッドはバリデーションをスキップし、オブジェクトの有効性に関係なくデータベースに保存します。これらのメソッドは注意して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f465129a4fb90e4527101bf731f2963373a56d8" translate="yes" xml:space="preserve">
          <source>The following methods trigger callbacks:</source>
          <target state="translated">以下のメソッドはコールバックをトリガします。</target>
        </trans-unit>
        <trans-unit id="cfbc7fa8f557720dad3b43f60910ef4eb36a6082" translate="yes" xml:space="preserve">
          <source>The following methods trigger validations, and will save the object to the database only if the object is valid:</source>
          <target state="translated">以下のメソッドはバリデーションをトリガし、オブジェクトが有効な場合にのみデータベースに保存します。</target>
        </trans-unit>
        <trans-unit id="523016b8452201bb1628b70c8c9797a7f03d6744" translate="yes" xml:space="preserve">
          <source>The following methods:</source>
          <target state="translated">以下のような方法です。</target>
        </trans-unit>
        <trans-unit id="fb3f54b9d4027c086c72adc490b0f155c01c54fb" translate="yes" xml:space="preserve">
          <source>The following middlewares, used for session management, are excluded from API apps since they normally don't need sessions. If one of your API clients is a browser, you might want to add one of these back in:</source>
          <target state="translated">セッション管理に使用される以下のミドルウェアは、通常はセッションを必要としないため、APIアプリから除外されています。API クライアントの 1 つがブラウザである場合、これらのうちの 1 つを追加しておくとよいでしょう。</target>
        </trans-unit>
        <trans-unit id="36cf22b1fa5b113b06014631879e53072ca8ace1" translate="yes" xml:space="preserve">
          <source>The following migration will remove the table 'horses' and create the table 'apples' on the way up, and the reverse on the way down.</source>
          <target state="translated">以下の移行では、テーブル「馬」を削除して、上りはテーブル「りんご」、下りは逆のテーブル「りんご」を作成します。</target>
        </trans-unit>
        <trans-unit id="e4d77afab2cb5c0e79177397fed4c21c74e5e9f3" translate="yes" xml:space="preserve">
          <source>The following options are accepted:</source>
          <target state="translated">以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="07868184f0badaae70ea74815fedb13374262579" translate="yes" xml:space="preserve">
          <source>The following sections give the details of each type of association, including the methods that they add and the options that you can use when declaring an association.</source>
          <target state="translated">以下のセクションでは、各タイプのアソシエーションの詳細について説明します。</target>
        </trans-unit>
        <trans-unit id="2562708af49a0bfce89266564bd6292133c83b57" translate="yes" xml:space="preserve">
          <source>The following sections outline the primary methods provided by the API:</source>
          <target state="translated">APIが提供する主な方法の概要は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="609de3a69e18bad3684cc06e831d02068915f957" translate="yes" xml:space="preserve">
          <source>The following setup steps are common to both examples:</source>
          <target state="translated">以下のセットアップ手順は、両方の例に共通しています。</target>
        </trans-unit>
        <trans-unit id="68ac9096c207d6e6fc7e824e70e5b3e0bab909e1" translate="yes" xml:space="preserve">
          <source>The following symbols are special:</source>
          <target state="translated">以下の記号は特殊です。</target>
        </trans-unit>
        <trans-unit id="9ff0dc756e7049a9d9d1160dc09667c5d872c2b2" translate="yes" xml:space="preserve">
          <source>The following two forms both upload a file.</source>
          <target state="translated">以下の2つのフォームはどちらもファイルをアップロードします。</target>
        </trans-unit>
        <trans-unit id="1b73d642411f485e10316d22f8c12e0959b92a7e" translate="yes" xml:space="preserve">
          <source>The following validations are added automatically:</source>
          <target state="translated">以下の検証は自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="392904f5f0a66b4200b7691949066a9831c1859a" translate="yes" xml:space="preserve">
          <source>The following values are considered to be blank in a Rails application:</source>
          <target state="translated">Railsアプリケーションでは、以下の値は空白とみなされます。</target>
        </trans-unit>
        <trans-unit id="deee9509446ecf108a516105821dd5478062ac54" translate="yes" xml:space="preserve">
          <source>The foreign key column name on &lt;code&gt;from_table&lt;/code&gt;. Defaults to &lt;code&gt;to_table.singularize + &quot;_id&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from_table&lt;/code&gt; の外部キー列名。デフォルトは &lt;code&gt;to_table.singularize + &quot;_id&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3326729145fe6394d473ee7cb8400c3bea60f441" translate="yes" xml:space="preserve">
          <source>The foreign key will be named after the following pattern: &lt;code&gt;fk_rails_&amp;lt;identifier&amp;gt;&lt;/code&gt;. &lt;code&gt;identifier&lt;/code&gt; is a 10 character long string which is deterministically generated from the &lt;code&gt;from_table&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. A custom name can be specified with the &lt;code&gt;:name&lt;/code&gt; option.</source>
          <target state="translated">外部キーは、次のパターンに従って名前が付けられます： &lt;code&gt;fk_rails_&amp;lt;identifier&amp;gt;&lt;/code&gt; 。 &lt;code&gt;identifier&lt;/code&gt; は、 &lt;code&gt;from_table&lt;/code&gt; と &lt;code&gt;column&lt;/code&gt; から決定論的に生成される10文字の長さの文字列です。カスタム名は &lt;code&gt;:name&lt;/code&gt; オプションで指定できます。</target>
        </trans-unit>
        <trans-unit id="c57ae9faadcd902410eb3b14af62a22ffbd5d285" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;action&lt;/code&gt; is automatically filled with an appropriate value for &lt;code&gt;@article&lt;/code&gt;.</source>
          <target state="translated">フォーム &lt;code&gt;action&lt;/code&gt; は、 &lt;code&gt;@article&lt;/code&gt; 適切な値が自動的に入力されます。</target>
        </trans-unit>
        <trans-unit id="1e007df2b561afc5d816ad0fcb5f864ca277d8c4" translate="yes" xml:space="preserve">
          <source>The form builder object yielded by &lt;code&gt;form_with&lt;/code&gt; provides numerous helper methods for generating form elements such as text fields, checkboxes, and radio buttons. The first parameter to these methods is always the name of the input. When the form is submitted, the name will be passed along with the form data, and will make its way to the &lt;code&gt;params&lt;/code&gt; in the controller with the value entered by the user for that field. For example, if the form contains &lt;code&gt;&amp;lt;%= form.text_field :query %&amp;gt;&lt;/code&gt;, then you would be able to get the value of this field in the controller with &lt;code&gt;params[:query]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; によって生成されるフォームビルダーオブジェクトは、テキストフィールド、チェックボックス、ラジオボタンなどのフォーム要素を生成するための多数のヘルパーメソッドを提供します。これらのメソッドの最初のパラメーターは、常に入力の名前です。フォームが送信されると、名前がフォームデータと一緒に渡されます、とにその方法を作る &lt;code&gt;params&lt;/code&gt; そのフィールドに対してユーザが入力した値を持つコントローラで。たとえば、フォームに &lt;code&gt;&amp;lt;%= form.text_field :query %&amp;gt;&lt;/code&gt; が含まれている場合、 &lt;code&gt;params[:query]&lt;/code&gt; してコントローラーでこのフィールドの値を取得できます。</target>
        </trans-unit>
        <trans-unit id="090e93106d4fe15776dd64af77237f6b9a5104b9" translate="yes" xml:space="preserve">
          <source>The form builder used also determines what happens when you do</source>
          <target state="translated">また、フォームビルダーを使用した場合に何が起こるかを決定します。</target>
        </trans-unit>
        <trans-unit id="6f232e20bbc8c58f703a1c9e6e79a9addc1e2cf8" translate="yes" xml:space="preserve">
          <source>The form builder used also determines what happens when you do:</source>
          <target state="translated">また、使用するフォームビルダーは、その時に何が起こるかを決定します。</target>
        </trans-unit>
        <trans-unit id="969e4f9f028abca92b6eaeb2377525e0daf1b47a" translate="yes" xml:space="preserve">
          <source>The form field names are scoped with &lt;code&gt;article[...]&lt;/code&gt;. This means that &lt;code&gt;params[:article]&lt;/code&gt; will be a hash containing all these field's values. You can read more about the significance of input names in chapter &lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;Understanding Parameter Naming Conventions&lt;/a&gt; of this guide.</source>
          <target state="translated">フォームフィールド名のスコープは &lt;code&gt;article[...]&lt;/code&gt; です。これは、 &lt;code&gt;params[:article]&lt;/code&gt; がこれらすべてのフィールドの値を含むハッシュになることを意味します。入力名の重要性について詳しくは、このガイドの&lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;「パラメーターの命名規則について」の&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="fa5be3edf2485d340a88e387ea582ad91c46d2ce" translate="yes" xml:space="preserve">
          <source>The form fields are automatically filled with the corresponding values from &lt;code&gt;@article&lt;/code&gt;.</source>
          <target state="translated">フォームフィールドには、 &lt;code&gt;@article&lt;/code&gt; 対応する値が自動的に入力されます。</target>
        </trans-unit>
        <trans-unit id="60342ada4ced98a39f41de5586ec3ad3944ed28b" translate="yes" xml:space="preserve">
          <source>The form needs to use a different URL in order to go somewhere else. This can be done quite simply with the &lt;code&gt;:url&lt;/code&gt; option of &lt;code&gt;form_with&lt;/code&gt;. Typically in Rails, the action that is used for new form submissions like this is called &quot;create&quot;, and so the form should be pointed to that action.</source>
          <target state="translated">別の場所に移動するには、フォームで別のURLを使用する必要があります。これは、 &lt;code&gt;form_with&lt;/code&gt; の &lt;code&gt;:url&lt;/code&gt; オプションで非常に簡単に行うことができます。通常、Railsでは、このような新しいフォームの送信に使用されるアクションは「作成」と呼ばれるため、フォームはそのアクションを指す必要があります。</target>
        </trans-unit>
        <trans-unit id="db75dbcbdc0e093bbfc719f467a241d7e67a2520" translate="yes" xml:space="preserve">
          <source>The form will be making a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;/articles/:article_id/comments&lt;/code&gt;, which will correspond with the &lt;code&gt;create&lt;/code&gt; action in &lt;code&gt;Blorgh::CommentsController&lt;/code&gt;. This action needs to be created, which can be done by putting the following lines inside the class definition in &lt;code&gt;app/controllers/blorgh/comments_controller.rb&lt;/code&gt;:</source>
          <target state="translated">フォームは &lt;code&gt;/articles/:article_id/comments&lt;/code&gt; への &lt;code&gt;POST&lt;/code&gt; リクエストを &lt;code&gt;create&lt;/code&gt; 。これは &lt;code&gt;Blorgh::CommentsController&lt;/code&gt; createアクションに対応します。このアクションを作成する必要があります。これは、 &lt;code&gt;app/controllers/blorgh/comments_controller.rb&lt;/code&gt; のクラス定義内に次の行を置くことで実行できます。</target>
        </trans-unit>
        <trans-unit id="7fbb9ae7852d624b58a411bef42e33a47388b020" translate="yes" xml:space="preserve">
          <source>The form's authenticity parameter. Override to provide your own.</source>
          <target state="translated">フォームの認証パラメータ。独自のものを提供するためにオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="3a13d407b622c23af95f052897df47515f94470f" translate="yes" xml:space="preserve">
          <source>The format of a fixture file looks like this:</source>
          <target state="translated">フィクスチャファイルのフォーマットは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2f7cb81c43eb0277bcb09abdbdfa4f95cbea41c6" translate="yes" xml:space="preserve">
          <source>The format of the schema dump generated by Rails is controlled by the &lt;code&gt;config.active_record.schema_format&lt;/code&gt; setting in &lt;code&gt;config/application.rb&lt;/code&gt;. By default, the format is &lt;code&gt;:ruby&lt;/code&gt;, but can also be set to &lt;code&gt;:sql&lt;/code&gt;.</source>
          <target state="translated">Railsによって生成されるスキーマダンプの形式は、 &lt;code&gt;config/application.rb&lt;/code&gt; の &lt;code&gt;config.active_record.schema_format&lt;/code&gt; 設定によって制御されます。デフォルトでは、形式は &lt;code&gt;:ruby&lt;/code&gt; ですが、 &lt;code&gt;:sql&lt;/code&gt; に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="b2bcbf7d68f15e27fc0dd857f9971c15c0d46bd3" translate="yes" xml:space="preserve">
          <source>The former is the main one. The latter is there mostly for backwards compatibility reasons, in case the application has something in &lt;code&gt;config.autoload_once_paths&lt;/code&gt; (this is discouraged nowadays).</source>
          <target state="translated">前者がメインです。後者は、アプリケーションが &lt;code&gt;config.autoload_once_paths&lt;/code&gt; に何かを持っている場合に備えて、主に下位互換性の理由で存在します（現在、これは推奨されません）。</target>
        </trans-unit>
        <trans-unit id="82fadfffe8a017d8cc4cbac60f0f81c907522668" translate="yes" xml:space="preserve">
          <source>The full list of options for the plugin generator may be seen by typing:</source>
          <target state="translated">プラグインジェネレータのオプションの完全なリストは、次のように入力することで見ることができます。</target>
        </trans-unit>
        <trans-unit id="d4bde2b1b890d3a726aec51e0fcf264cdac863fa" translate="yes" xml:space="preserve">
          <source>The full request object is available via the request accessor and is primarily used to query for HTTP headers:</source>
          <target state="translated">完全なリクエストオブジェクトはリクエストアクセサを介して利用可能で、主に HTTP ヘッダを問い合わせるために使用されます。</target>
        </trans-unit>
        <trans-unit id="15558a932ce7d5ec8c2377322dcd833861fe3a97" translate="yes" xml:space="preserve">
          <source>The full set of methods that can be used in this block are as follows:</source>
          <target state="translated">このブロックで使用できるメソッドのフルセットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6c14ca350035676710a670dd045416bbcfb75b88" translate="yes" xml:space="preserve">
          <source>The gateway through which you can drill down into various details of each error.</source>
          <target state="translated">各エラーの様々な詳細を掘り下げることができるゲートウェイです。</target>
        </trans-unit>
        <trans-unit id="46bd57d06a4ef9cdd161560d193f0e40b2eb8282" translate="yes" xml:space="preserve">
          <source>The general layout of a Rails application.</source>
          <target state="translated">Railsアプリケーションの一般的なレイアウトです。</target>
        </trans-unit>
        <trans-unit id="e7eeed51b86202389059cb757e688e04f990154f" translate="yes" xml:space="preserve">
          <source>The generated ID for a given label is constant, so we can discover any fixture's ID without loading anything, as long as we know the label.</source>
          <target state="translated">与えられたラベルのために生成されたIDは一定なので、ラベルがわかっていれば、何もロードせずに任意のフィクスチャのIDを発見することができます。</target>
        </trans-unit>
        <trans-unit id="c89bd0c48d5da0f02788cadbf5279ad7b0b6ae74" translate="yes" xml:space="preserve">
          <source>The generated attributes are escaped by default. This can be disabled using &lt;code&gt;escape_attributes&lt;/code&gt;.</source>
          <target state="translated">生成された属性はデフォルトでエスケープされます。これは &lt;code&gt;escape_attributes&lt;/code&gt; を使用して無効にできます。</target>
        </trans-unit>
        <trans-unit id="645e01b963a2d6bedc01988adc919326a38cbb71" translate="yes" xml:space="preserve">
          <source>The generated model inherits from &lt;code&gt;ApplicationMailer&lt;/code&gt; which in turn inherits from &lt;code&gt;ActionMailer::Base&lt;/code&gt;. A mailer model defines methods used to generate an email message. In these methods, you can set up variables to be used in the mailer views, options on the mail itself such as the &lt;code&gt;:from&lt;/code&gt; address, and attachments.</source>
          <target state="translated">生成されたモデルは &lt;code&gt;ApplicationMailer&lt;/code&gt; を継承し、ApplicationMailerは &lt;code&gt;ActionMailer::Base&lt;/code&gt; 継承します。メーラーモデルは、電子メールメッセージの生成に使用されるメソッドを定義します。これらのメソッドでは、メーラービューで使用する変数、 &lt;code&gt;:from&lt;/code&gt; アドレスなどのメール自体のオプション、および添付ファイルを設定できます。</target>
        </trans-unit>
        <trans-unit id="83ab849c0e0913321228afc5541b5041a5ce971d" translate="yes" xml:space="preserve">
          <source>The generated model inherits from &lt;code&gt;ApplicationMailer&lt;/code&gt; which in turn inherits from &lt;code&gt;ActionMailer::Base&lt;/code&gt;. A mailer model defines methods used to generate an email message. In these methods, you can setup variables to be used in the mailer views, options on the mail itself such as the &lt;code&gt;:from&lt;/code&gt; address, and attachments.</source>
          <target state="translated">生成されたモデルは &lt;code&gt;ApplicationMailer&lt;/code&gt; を継承し、ApplicationMailerは &lt;code&gt;ActionMailer::Base&lt;/code&gt; 継承します。メーラーモデルは、電子メールメッセージの生成に使用されるメソッドを定義します。これらのメソッドでは、メーラービューで使用される変数、 &lt;code&gt;:from&lt;/code&gt; アドレスなどのメール自体のオプション、添付ファイルを設定できます。</target>
        </trans-unit>
        <trans-unit id="321061befaaa7def4b485d8f5cfddc8d61d5b9d2" translate="yes" xml:space="preserve">
          <source>The generated model will automatically inherit from &lt;code&gt;AnimalsRecord&lt;/code&gt;.</source>
          <target state="translated">生成されたモデルは、 &lt;code&gt;AnimalsRecord&lt;/code&gt; から自動的に継承されます。</target>
        </trans-unit>
        <trans-unit id="9642127f67417f40c4b17b7ca6fba9837a5b3709" translate="yes" xml:space="preserve">
          <source>The generated model will look like this:</source>
          <target state="translated">生成されたモデルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="8ebb94072c2ba22e483813ad1a85b01320851bc6" translate="yes" xml:space="preserve">
          <source>The generation of the reader instance method can be prevented by setting &lt;code&gt;:instance_reader&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; and the generation of the writer instance method can be prevented by setting &lt;code&gt;:instance_writer&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. Generation of both methods can be prevented by setting &lt;code&gt;:instance_accessor&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. In all cases, the value must be exactly &lt;code&gt;false&lt;/code&gt; and not any false value.</source>
          <target state="translated">リーダインスタンスメソッドの生成は、設定することによって防止することができる &lt;code&gt;:instance_reader&lt;/code&gt; に &lt;code&gt;false&lt;/code&gt; ライタインスタンスメソッドの生成は、設定することによって防止することができる &lt;code&gt;:instance_writer&lt;/code&gt; する &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;:instance_accessor&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、両方のメソッドの生成を防ぐことができます。すべての場合において、値は正確に &lt;code&gt;false&lt;/code&gt; なければならず、偽の値であってはなりません。</target>
        </trans-unit>
        <trans-unit id="d4bf2ad59eb23553637bb6ad74e918f26165d9a9" translate="yes" xml:space="preserve">
          <source>The generation of the reader instance method can be prevented by setting the option &lt;code&gt;:instance_reader&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;:instance_reader&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、リーダーインスタンスメソッドの生成を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="96923220f999eee1905ec339692e505269b44e49" translate="yes" xml:space="preserve">
          <source>The generation of the writer instance method can be prevented by setting the option &lt;code&gt;:instance_writer&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;:instance_writer&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、ライターインスタンスメソッドの生成を防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="03b7c6a99d34c4aaf65fc166f48dc469d58dfbbc" translate="yes" xml:space="preserve">
          <source>The generator checks that there exist the directories for models, controllers, helpers, layouts, functional and unit tests, stylesheets, creates the views, controller, model and database migration for HighScore (creating the &lt;code&gt;high_scores&lt;/code&gt; table and fields), takes care of the route for the &lt;strong&gt;resource&lt;/strong&gt;, and new tests for everything.</source>
          <target state="translated">ジェネレーターは、モデル、コントローラー、ヘルパー、レイアウト、機能テストと単体テスト、スタイルシートのディレクトリが存在することを確認し、HighScoreのビュー、コントローラー、モデル、およびデータベースの移行を作成し（ &lt;code&gt;high_scores&lt;/code&gt; テーブルとフィールドを作成）、ルートを処理します以下のための&lt;strong&gt;リソース&lt;/strong&gt;、およびすべてのための新しいテスト。</target>
        </trans-unit>
        <trans-unit id="7b39f749f99948f5914a83edc800a368fad145a9" translate="yes" xml:space="preserve">
          <source>The generators you can use to create them.</source>
          <target state="translated">それを作るのに使えるジェネレーター</target>
        </trans-unit>
        <trans-unit id="a84866369ad05153b18c2d07d9dde0bdd61861cb" translate="yes" xml:space="preserve">
          <source>The given arguments may also be specified as matcher procs that return a boolean value indicating whether a job's attribute meets certain criteria.</source>
          <target state="translated">与えられた引数は、ジョブの属性が特定の基準を満たしているかどうかを示すブール値を返す matcher procs として指定することもできます。</target>
        </trans-unit>
        <trans-unit id="44697cfaaac008cfcbe2fe60f5a95303683ec71b" translate="yes" xml:space="preserve">
          <source>The given range must be fully bounded, with both start and end.</source>
          <target state="translated">与えられた範囲は、開始と終了の両方で完全に拘束されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="4a11e822e465e85b59074ad8222bc49591cdfb25" translate="yes" xml:space="preserve">
          <source>The goals of testing your mailer classes are to ensure that:</source>
          <target state="translated">メーラークラスをテストする目的は、以下のことを確認することです。</target>
        </trans-unit>
        <trans-unit id="362978286aa17bd104be42963df61dd594f4d276" translate="yes" xml:space="preserve">
          <source>The guides for earlier releases: &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt;, and &lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails 2.3&lt;/a&gt;.</source>
          <target state="translated">以前のリリースのガイド：&lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt;、および&lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails 2.3&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b2b614143472cc56211bf69dd5927b0911062968" translate="yes" xml:space="preserve">
          <source>The guides for earlier releases: &lt;a href=&quot;https://guides.rubyonrails.org/v6.0/&quot;&gt;Rails 6.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt;, &lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt;, and &lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails 2.3&lt;/a&gt;.</source>
          <target state="translated">以前のリリースのガイド：&lt;a href=&quot;https://guides.rubyonrails.org/v6.0/&quot;&gt;Rails 6.0&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v5.2/&quot;&gt;Rails 5.2&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v5.1/&quot;&gt;Rails 5.1&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v5.0/&quot;&gt;Rails 5.0&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v4.2/&quot;&gt;Rails 4.2&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v4.1/&quot;&gt;Rails 4.1&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v4.0/&quot;&gt;Rails 4.0&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v3.2/&quot;&gt;Rails 3.2&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v3.1/&quot;&gt;Rails 3.1&lt;/a&gt;、&lt;a href=&quot;https://guides.rubyonrails.org/v3.0/&quot;&gt;Rails 3.0&lt;/a&gt;、および&lt;a href=&quot;https://guides.rubyonrails.org/v2.3/&quot;&gt;Rails2.3&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0769462d4182a8d7e15fc285a42e4195eb77d38c" translate="yes" xml:space="preserve">
          <source>The hash keys are the attribute names, and the hash values are the original attribute values in the database (as opposed to the in-memory values about to be saved).</source>
          <target state="translated">ハッシュキーは属性名であり、ハッシュ値はデータベース内の元の属性値です(保存されようとしているメモリ内の値とは対照的です)。</target>
        </trans-unit>
        <trans-unit id="058d050ee7d540ed9e563b384b80cef28a9d82ce" translate="yes" xml:space="preserve">
          <source>The hash passed to the mail method allows you to specify any header that a &lt;code&gt;Mail::Message&lt;/code&gt; will accept (any valid email header including optional fields).</source>
          <target state="translated">mailメソッドに渡されるハッシュを使用すると、 &lt;code&gt;Mail::Message&lt;/code&gt; が受け入れるヘッダー（オプションのフィールドを含む有効なメールヘッダー）を指定できます。</target>
        </trans-unit>
        <trans-unit id="6f5c290181dabdf6559a851bcac9bcc0636e995f" translate="yes" xml:space="preserve">
          <source>The helper gets the name of the favicon file as first argument, which defaults to &amp;ldquo;favicon.ico&amp;rdquo;, and also supports &lt;code&gt;:rel&lt;/code&gt; and &lt;code&gt;:type&lt;/code&gt; options to override their defaults, &amp;ldquo;shortcut icon&amp;rdquo; and &amp;ldquo;image/x-icon&amp;rdquo; respectively:</source>
          <target state="translated">ヘルパーは最初の引数としてファビコンファイルの名前を取得します。デフォルトは「favicon.ico」で、デフォルトの「ショートカットアイコン」と「image / x-icon」をオーバーライドする &lt;code&gt;:rel&lt;/code&gt; および &lt;code&gt;:type&lt;/code&gt; オプションもサポートしています。</target>
        </trans-unit>
        <trans-unit id="c8f3b49cd9e3cb6be9a8ff2c3fb102ef6cfdd129" translate="yes" xml:space="preserve">
          <source>The helper inside &lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt; is also namespaced:</source>
          <target state="translated">&lt;code&gt;app/helpers/blorgh/articles_helper.rb&lt;/code&gt; 内のヘルパーにも名前空間があります：</target>
        </trans-unit>
        <trans-unit id="3b93bd5de48450a8776f0c3f464e327c151c1f12" translate="yes" xml:space="preserve">
          <source>The helper method &lt;code&gt;full_messages&lt;/code&gt; uses &lt;code&gt;humanize&lt;/code&gt; as a fallback to include attribute names:</source>
          <target state="translated">ヘルパーメソッド &lt;code&gt;full_messages&lt;/code&gt; 用途は &lt;code&gt;humanize&lt;/code&gt; 属性名を含めるようにフォールバックとして：</target>
        </trans-unit>
        <trans-unit id="c03db03c2478cc4beefab4ef9e28af6f4d551a14" translate="yes" xml:space="preserve">
          <source>The helper methods called on the form builder are identical to the model object helpers except that it is not necessary to specify which object is being edited since this is already managed by the form builder.</source>
          <target state="translated">フォームビルダで呼び出されるヘルパーメソッドはモデルオブジェクトヘルパーと同じですが、どのオブジェクトが編集されるかはフォームビルダで既に管理されているので指定する必要がありません。</target>
        </trans-unit>
        <trans-unit id="48e6e57e3a5816d496cf9346b7b10113bd662a20" translate="yes" xml:space="preserve">
          <source>The hooks inside the Rails framework for instrumentation.</source>
          <target state="translated">インストルメンテーションのためのRailsフレームワーク内部のフック。</target>
        </trans-unit>
        <trans-unit id="4b21621570d8c2b68888621ecdd2bf376d3c4875" translate="yes" xml:space="preserve">
          <source>The hooks lookup is similar as above:</source>
          <target state="translated">フックのルックアップは上記のような感じです。</target>
        </trans-unit>
        <trans-unit id="4350fdd5e24421c545843a276f1aecf4174489c6" translate="yes" xml:space="preserve">
          <source>The horizontal sharding API also supports read replicas. You can swap the role and the shard with the &lt;code&gt;connected_to&lt;/code&gt; API.</source>
          <target state="translated">水平シャーディングAPIは、リードレプリカもサポートしています。役割とシャードを &lt;code&gt;connected_to&lt;/code&gt; APIと交換できます。</target>
        </trans-unit>
        <trans-unit id="7943c0c7de50364f1568dbf6a3844f8f66f52bc0" translate="yes" xml:space="preserve">
          <source>The host of a request is checked against the &lt;code&gt;hosts&lt;/code&gt; entries with the case operator (&lt;code&gt;#===&lt;/code&gt;), which lets &lt;code&gt;hosts&lt;/code&gt; support entries of type &lt;code&gt;Regexp&lt;/code&gt;, &lt;code&gt;Proc&lt;/code&gt; and &lt;code&gt;IPAddr&lt;/code&gt; to name a few. Here is an example with a regexp.</source>
          <target state="translated">リクエストのホストは、case演算子（ &lt;code&gt;#===&lt;/code&gt; ）を使用して &lt;code&gt;hosts&lt;/code&gt; エントリと照合されます。これにより、 &lt;code&gt;hosts&lt;/code&gt; は、 &lt;code&gt;Regexp&lt;/code&gt; 、 &lt;code&gt;Proc&lt;/code&gt; 、および &lt;code&gt;IPAddr&lt;/code&gt; タイプのエントリをサポートできます。これは正規表現の例です。</target>
        </trans-unit>
        <trans-unit id="465f83962e2239cb19550b0b54f391531039b74a" translate="yes" xml:space="preserve">
          <source>The hostname used for this request.</source>
          <target state="translated">このリクエストに使用されるホスト名です。</target>
        </trans-unit>
        <trans-unit id="df619d8c4ceafae7f4ef07c3343b96da7296ae57" translate="yes" xml:space="preserve">
          <source>The hostname used in the last request.</source>
          <target state="translated">最後のリクエストで使用されたホスト名。</target>
        </trans-unit>
        <trans-unit id="d729a8f7d6c2e7248811f11389969b4f75002255" translate="yes" xml:space="preserve">
          <source>The hostname's first &lt;code&gt;n&lt;/code&gt; segments, starting from the right (the TLD).</source>
          <target state="translated">右から始まるホスト名の最初の &lt;code&gt;n&lt;/code&gt; セグメント（TLD）。</target>
        </trans-unit>
        <trans-unit id="247a4e650cdfc512efea9563eb1b2a0a9fceb6a4" translate="yes" xml:space="preserve">
          <source>The i18n library takes a &lt;strong&gt;pragmatic approach&lt;/strong&gt; to locale keys (after &lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;some discussion&lt;/a&gt;), including only the &lt;em&gt;locale&lt;/em&gt; (&quot;language&quot;) part, like &lt;code&gt;:en&lt;/code&gt;, &lt;code&gt;:pl&lt;/code&gt;, not the &lt;em&gt;region&lt;/em&gt; part, like &lt;code&gt;:&quot;en-US&quot;&lt;/code&gt; or &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt;, which are traditionally used for separating &quot;languages&quot; and &quot;regional setting&quot; or &quot;dialects&quot;. Many international applications use only the &quot;language&quot; element of a locale such as &lt;code&gt;:cs&lt;/code&gt;, &lt;code&gt;:th&lt;/code&gt;, or &lt;code&gt;:es&lt;/code&gt; (for Czech, Thai, and Spanish). However, there are also regional differences within different language groups that may be important. For instance, in the &lt;code&gt;:&quot;en-US&quot;&lt;/code&gt; locale you would have $ as a currency symbol, while in &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt;, you would have &amp;pound;. Nothing stops you from separating regional and other settings in this way: you just have to provide full &quot;English - United Kingdom&quot; locale in a &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt; dictionary.</source>
          <target state="translated">i18nライブラリは、ロケールキーに対して&lt;strong&gt;実用的なアプローチ&lt;/strong&gt;を取ります（&lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;いくつかの議論の&lt;/a&gt;後）。これには、 &lt;code&gt;:&quot;en-US&quot;&lt;/code&gt; や &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt; などの&lt;em&gt;リージョン&lt;/em&gt;部分ではなく、 &lt;code&gt;:en&lt;/code&gt; 、 &lt;code&gt;:pl&lt;/code&gt; などの&lt;em&gt;ロケール&lt;/em&gt;（&quot;言語 &quot;）部分のみが含まれ&lt;em&gt;ます。&lt;/em&gt;-GB」。これは、「言語」と「地域設定」または「方言」を分離するために伝統的に使用されます。多くの国際的なアプリケーションは、 &lt;code&gt;:cs&lt;/code&gt; 、 &lt;code&gt;:th&lt;/code&gt; 、または &lt;code&gt;:es&lt;/code&gt; （チェコ語、タイ語、スペイン語の場合）などのロケールの「言語」要素のみを使用します。ただし、重要な可能性のある異なる言語グループ内の地域の違いもあります。たとえば、&lt;em&gt;&lt;/em&gt; &lt;code&gt;:&quot;en-US&quot;&lt;/code&gt; ロケールでは、通貨記号として$が使用されますが、 &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt; では、&amp;pound;が使用されます。この方法で地域とその他の設定を分離することを妨げるものは何もありません。完全な「英語-英国」ロケールを &lt;code&gt;:&quot;en-GB&quot;&lt;/code&gt; 辞書で提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="42fa67d833d76b1422c347fe803ccf6a40acbd46" translate="yes" xml:space="preserve">
          <source>The i18n library takes a &lt;strong&gt;pragmatic approach&lt;/strong&gt; to locale keys (after &lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;some discussion&lt;/a&gt;), including only the &lt;em&gt;locale&lt;/em&gt; (&quot;language&quot;) part, like &lt;code&gt;:en&lt;/code&gt;, &lt;code&gt;:pl&lt;/code&gt;, not the &lt;em&gt;region&lt;/em&gt; part, like &lt;code&gt;:en-US&lt;/code&gt; or &lt;code&gt;:en-GB&lt;/code&gt;, which are traditionally used for separating &quot;languages&quot; and &quot;regional setting&quot; or &quot;dialects&quot;. Many international applications use only the &quot;language&quot; element of a locale such as &lt;code&gt;:cs&lt;/code&gt;, &lt;code&gt;:th&lt;/code&gt;, or &lt;code&gt;:es&lt;/code&gt; (for Czech, Thai, and Spanish). However, there are also regional differences within different language groups that may be important. For instance, in the &lt;code&gt;:en-US&lt;/code&gt; locale you would have $ as a currency symbol, while in &lt;code&gt;:en-GB&lt;/code&gt;, you would have &amp;pound;. Nothing stops you from separating regional and other settings in this way: you just have to provide full &quot;English - United Kingdom&quot; locale in a &lt;code&gt;:en-GB&lt;/code&gt; dictionary.</source>
          <target state="translated">国際化ライブラリがかかる&lt;strong&gt;実用的なアプローチ&lt;/strong&gt;ロケールキー（後に&lt;a href=&quot;https://groups.google.com/forum/#!topic/rails-i18n/FN7eLH2-lHA&quot;&gt;いくつかの議論&lt;/a&gt;のみを含む）、&lt;em&gt;ロケール&lt;/em&gt;のように、（「言語」）の部分を &lt;code&gt;:en&lt;/code&gt; 、 &lt;code&gt;:pl&lt;/code&gt; いない&lt;em&gt;領域&lt;/em&gt;のように、一部 &lt;code&gt;:en-US&lt;/code&gt; または &lt;code&gt;:en-GB&lt;/code&gt; 、 「言語」と「地域設定」または「方言」を分離するために伝統的に使用されます。多くの国際的なアプリケーションは、 &lt;code&gt;:cs&lt;/code&gt; 、 &lt;code&gt;:th&lt;/code&gt; 、 &lt;code&gt;:es&lt;/code&gt; （チェコ語、タイ語、スペイン語の場合）などのロケールの &quot;language&quot;要素のみを使用します。ただし、重要な場合がある言語グループごとに地域の違いもあります。例えば、 &lt;code&gt;:en-US&lt;/code&gt; ロケールでは$を通貨記号として使用しますが、 &lt;code&gt;:en-GB&lt;/code&gt; では、&amp;pound;を使用します。このように地域とその他の設定を分離することを妨げるものは何もありません。 &lt;code&gt;:en-GB&lt;/code&gt; 辞書で完全な「英語-イギリス」ロケールを提供する必要があるだけです。</target>
        </trans-unit>
        <trans-unit id="7f53afb305af92309a3fdf213ca6a51b59f8138a" translate="yes" xml:space="preserve">
          <source>The idea of a parent namespace is at the core of the autoloading algorithms and helps explain and understand their motivation intuitively, but as you see that metaphor leaks easily. Given an edge case to reason about, take always into account that by &quot;parent namespace&quot; the guide means exactly that specific string derivation.</source>
          <target state="translated">親名前空間の考え方はオートローディングアルゴリズムの核心であり、その動機を直感的に説明し理解するのに役立ちますが、見ての通り、メタファーは簡単に漏れてしまいます。推論すべきエッジケースがあった場合、ガイドでは「親名前空間」とは正確に特定の文字列の派生を意味することを常に考慮に入れてください。</target>
        </trans-unit>
        <trans-unit id="3cd13b5796c3fc5827aff4691f7e2ec42bfb7375" translate="yes" xml:space="preserve">
          <source>The idea would be to use &lt;code&gt;$PAYMENT_GATEWAY&lt;/code&gt; in the code, and let the initializer set that to the actual implementation depending on the environment.</source>
          <target state="translated">コードで &lt;code&gt;$PAYMENT_GATEWAY&lt;/code&gt; を使用し、初期化子に環境に応じて実際の実装に設定させるというアイデアです。</target>
        </trans-unit>
        <trans-unit id="5f19b540681118fdd893c06bdeb7c6925c5febfb" translate="yes" xml:space="preserve">
          <source>The immutable requirement is enforced by Active Record by freezing any object assigned as a value object. Attempting to change it afterwards will result in a &lt;code&gt;RuntimeError&lt;/code&gt;.</source>
          <target state="translated">不変の要件は、値オブジェクトとして割り当てられたオブジェクトをフリーズすることにより、アクティブレコードによって実施されます。後で変更しようとすると、 &lt;code&gt;RuntimeError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="54381883e6c09b4dc43d4ac46bee21b9cc5395a7" translate="yes" xml:space="preserve">
          <source>The implicit block given to &lt;code&gt;link_to_unless_current&lt;/code&gt; is evaluated if the current action is the action given. So, if we had a comments page and wanted to render a &amp;ldquo;Go Back&amp;rdquo; link instead of a link to the comments page, we could do something like this&amp;hellip;</source>
          <target state="translated">&lt;code&gt;link_to_unless_current&lt;/code&gt; に指定された暗黙のブロックは、現在のアクションが指定されたアクションである場合に評価されます。したがって、コメントページがあり、コメントページへのリンクの代わりに「戻る」リンクを表示したい場合は、次のようにすることができます&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="ae13bd63f4cdb460db67da0c75a77a0f55f7ea5c" translate="yes" xml:space="preserve">
          <source>The inbound emails are turned into &lt;code&gt;InboundEmail&lt;/code&gt; records using Active Record and feature lifecycle tracking, storage of the original email on cloud storage via Active Storage, and responsible data handling with on-by-default incineration.</source>
          <target state="translated">受信メールは、Active Recordと機能のライフサイクル追跡、Active Storageを介したクラウドストレージでの元のメールの保存、デフォルトでの焼却による責任あるデータ処理を使用して、 &lt;code&gt;InboundEmail&lt;/code&gt; レコードに変換されます。</target>
        </trans-unit>
        <trans-unit id="869236c95820445e727ad51587da6b23b472304d" translate="yes" xml:space="preserve">
          <source>The index view (&lt;code&gt;app/views/users/index.html.erb&lt;/code&gt;) contains:</source>
          <target state="translated">インデックスビュー（ &lt;code&gt;app/views/users/index.html.erb&lt;/code&gt; ）には以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="b32f9511f66640e563df5e34e2c7c0a6fab3ddf3" translate="yes" xml:space="preserve">
          <source>The index will be named after the table and the column name(s), unless you pass &lt;code&gt;:name&lt;/code&gt; as an option.</source>
          <target state="translated">オプションとして &lt;code&gt;:name&lt;/code&gt; を渡さない限り、インデックスはテーブルと列名にちなんで名付けられます。</target>
        </trans-unit>
        <trans-unit id="648e623dacab4b9af4b014df64075bd0547875ce" translate="yes" xml:space="preserve">
          <source>The initializer wants to create a &lt;code&gt;BellX1::FlightModel&lt;/code&gt; and nesting has &lt;code&gt;BellX1&lt;/code&gt;, that looks good. But if the default flight model is loaded and the one for the Bell-X1 is not, the interpreter is able to resolve the top-level &lt;code&gt;FlightModel&lt;/code&gt; and autoloading is thus not triggered for &lt;code&gt;BellX1::FlightModel&lt;/code&gt;.</source>
          <target state="translated">イニシャライザは &lt;code&gt;BellX1::FlightModel&lt;/code&gt; を作成する必要があり、ネストには &lt;code&gt;BellX1&lt;/code&gt; があります。ただし、デフォルトのフライトモデルがロードされていて、Bell-X1のモデルがロードされていない場合、インタプリタはトップレベルの &lt;code&gt;FlightModel&lt;/code&gt; を解決できるため、 &lt;code&gt;BellX1::FlightModel&lt;/code&gt; オートロードはトリガーされません。</target>
        </trans-unit>
        <trans-unit id="7c80d611760f565bf27d46366137ae2e4fd9731f" translate="yes" xml:space="preserve">
          <source>The instrumentation API provided by Active Support allows developers to provide hooks which other developers may hook into. There are several of these within the &lt;a href=&quot;#rails-framework-hooks&quot;&gt;Rails framework&lt;/a&gt;. With this API, developers can choose to be notified when certain events occur inside their application or another piece of Ruby code.</source>
          <target state="translated">アクティブサポートが提供するインストルメンテーションAPIにより、開発者は他の開発者がフックできるフックを提供できます。&lt;a href=&quot;#rails-framework-hooks&quot;&gt;Railsフレームワークに&lt;/a&gt;はこれらのいくつかがあります。このAPIを使用すると、開発者は、アプリケーションまたは別のRubyコードの一部で特定のイベントが発生したときに通知を受けるように選択できます。</target>
        </trans-unit>
        <trans-unit id="44b71bf98dd0cdf4cb43c535aaee7d46af03287d" translate="yes" xml:space="preserve">
          <source>The intended use case for this method is to escape JSON strings before including them inside a script tag to avoid XSS vulnerability:</source>
          <target state="translated">このメソッドの意図された使用例は、スクリプトタグ内にJSON文字列を含める前にエスケープして、XSS脆弱性を回避することです。</target>
        </trans-unit>
        <trans-unit id="79f2c35a7b9a90149c8abcd1a54d9b8fc7aa6157" translate="yes" xml:space="preserve">
          <source>The interaction &lt;em&gt;changes the state&lt;/em&gt; of the resource in a way that the user would perceive (e.g., a subscription to a service), or</source>
          <target state="translated">対話&lt;em&gt;により、&lt;/em&gt;ユーザーが認識する方法でリソース&lt;em&gt;の状態&lt;/em&gt;が&lt;em&gt;変更&lt;/em&gt;されます（たとえば、サービスへのサブスクリプション）。</target>
        </trans-unit>
        <trans-unit id="a5762c80b87c2c4c3a9e18dfd534cadedd2d6b35" translate="yes" xml:space="preserve">
          <source>The interaction is more &lt;em&gt;like a question&lt;/em&gt; (i.e., it is a safe operation such as a query, read operation, or lookup).</source>
          <target state="translated">相互作用は&lt;em&gt;、質問のような&lt;/em&gt;ものです（つまり、クエリ、読み取り操作、ルックアップなどの安全な操作です）。</target>
        </trans-unit>
        <trans-unit id="7962fec553e1f444a5bd713ae1675baca557a15e" translate="yes" xml:space="preserve">
          <source>The interaction is more &lt;em&gt;like an order&lt;/em&gt;, or</source>
          <target state="translated">相互作用は&lt;em&gt;注文のようなものです&lt;/em&gt;、または</target>
        </trans-unit>
        <trans-unit id="95f3d55c11448516ef4cf2c075e8257c9652b19b" translate="yes" xml:space="preserve">
          <source>The interesting part for a Rails app is the last line, &lt;code&gt;server.run&lt;/code&gt;. Here we encounter the &lt;code&gt;wrapped_app&lt;/code&gt; method again, which this time we're going to explore more (even though it was executed before, and thus memoized by now).</source>
          <target state="translated">Railsアプリの興味深い部分は、最後の行の &lt;code&gt;server.run&lt;/code&gt; です。ここで再び &lt;code&gt;wrapped_app&lt;/code&gt; メソッドに遭遇しますが、今回はさらに調査します（以前に実行されたため、今ではメモ化されています）。</target>
        </trans-unit>
        <trans-unit id="b459fda0fb539be04b0a909ef219de4e5a2b39af" translate="yes" xml:space="preserve">
          <source>The interpretation of a parent namespace when thinking about classes and modules is tricky though. Let's consider a module M named &quot;A::B&quot;:</source>
          <target state="translated">しかし、クラスやモジュールを考えるときの親名前空間の解釈は厄介です。A::B &quot;という名前のモジュールMを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b088dc4a33ac210d77c1458749a93ed8bf4c34fc" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;String#include?&lt;/code&gt;. Returns true if the string does not include the other string.</source>
          <target state="translated">&lt;code&gt;String#include?&lt;/code&gt; の逆？。文字列に他の文字列が含まれていない場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="d3b045c64486cd3543aa4c92eac840cd5ff4ee1a" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;pluralize&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; の逆：</target>
        </trans-unit>
        <trans-unit id="5dd1404e8fb1e4a2f3428a87a501d557bbc475c1" translate="yes" xml:space="preserve">
          <source>The join table should not have a primary key or a model associated with it. You must manually generate the join table with a migration such as this:</source>
          <target state="translated">結合テーブルには、主キーやモデルが関連付けられていてはいけません。このようなマイグレーションを使用して、手動で結合テーブルを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="052d7b38c38526d06bad1945b5b98f5f66c7d437" translate="yes" xml:space="preserve">
          <source>The key for the error message in this case is &lt;code&gt;:blank&lt;/code&gt;. Active Record will look up this key in the namespaces:</source>
          <target state="translated">この場合のエラーメッセージのキーは &lt;code&gt;:blank&lt;/code&gt; です。Active Recordは名前空間でこのキーを検索します：</target>
        </trans-unit>
        <trans-unit id="a03e001b53b8dfaae3a1107e4ec8266dabdface7" translate="yes" xml:space="preserve">
          <source>The keys must be the fixture names, that coincide with the short paths to the fixture files.</source>
          <target state="translated">キーは、フィクスチャファイルへの短いパスと一致するフィクスチャ名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d3e3365229f6940a1c09a4628bdc8177d9404b5" translate="yes" xml:space="preserve">
          <source>The keys of the &lt;code&gt;:addresses_attributes&lt;/code&gt; hash are unimportant, they need merely be different for each address.</source>
          <target state="translated">&lt;code&gt;:addresses_attributes&lt;/code&gt; ハッシュのキーは重要ではなく、アドレスごとに異なる必要があります。</target>
        </trans-unit>
        <trans-unit id="437996ad7c0e04b8e7fa0c7a7527aa0f661baec9" translate="yes" xml:space="preserve">
          <source>The keys of the hash which is the value for &lt;code&gt;:posts_attributes&lt;/code&gt; are ignored in this case. However, it is not allowed to use &lt;code&gt;'id'&lt;/code&gt; or &lt;code&gt;:id&lt;/code&gt; for one of such keys, otherwise the hash will be wrapped in an array and interpreted as an attribute hash for a single post.</source>
          <target state="translated">この場合、 &lt;code&gt;:posts_attributes&lt;/code&gt; の値であるハッシュのキーは無視されます。ただし、そのようなキーの1つに &lt;code&gt;'id'&lt;/code&gt; または &lt;code&gt;:id&lt;/code&gt; を使用することはできません。そうしないと、ハッシュは配列にラップされ、単一の投稿の属性ハッシュとして解釈されます。</target>
        </trans-unit>
        <trans-unit id="bff0237eaabfc7db91da8d08231c80475092cb7e" translate="yes" xml:space="preserve">
          <source>The keys used in a cache can be any object that responds to either &lt;code&gt;cache_key&lt;/code&gt; or &lt;code&gt;to_param&lt;/code&gt;. You can implement the &lt;code&gt;cache_key&lt;/code&gt; method on your classes if you need to generate custom keys. Active Record will generate keys based on the class name and record id.</source>
          <target state="translated">キャッシュで使用されるキーは、 &lt;code&gt;cache_key&lt;/code&gt; または &lt;code&gt;to_param&lt;/code&gt; のいずれかに応答する任意のオブジェクトです。カスタムキーを生成する必要がある場合は、クラスに &lt;code&gt;cache_key&lt;/code&gt; メソッドを実装できます。Active Recordは、クラス名とレコードIDに基づいてキーを生成します。</target>
        </trans-unit>
        <trans-unit id="f7776f2c4b88c4d6b494aa2092d34ebd03edd32c" translate="yes" xml:space="preserve">
          <source>The keys you use on &lt;code&gt;Rails.cache&lt;/code&gt; will not be the same as those actually used with the storage engine. They may be modified with a namespace or altered to fit technology backend constraints. This means, for instance, that you can't save values with &lt;code&gt;Rails.cache&lt;/code&gt; and then try to pull them out with the &lt;code&gt;dalli&lt;/code&gt; gem. However, you also don't need to worry about exceeding the memcached size limit or violating syntax rules.</source>
          <target state="translated">&lt;code&gt;Rails.cache&lt;/code&gt; で使用するキーは、ストレージエンジンで実際に使用されるキーとは異なります。名前空間を使用して変更するか、テクノロジーバックエンドの制約に合わせて変更することができます。これは、たとえば、 &lt;code&gt;Rails.cache&lt;/code&gt; で値を保存してから、 &lt;code&gt;dalli&lt;/code&gt; gemで値を引き出そうとすることはできないことを意味します。ただし、me​​mcachedのサイズ制限を超えたり、構文ルールに違反したりすることを心配する必要もありません。</target>
        </trans-unit>
        <trans-unit id="9a7613a9e24c1242511419e1adb78550681bc52d" translate="yes" xml:space="preserve">
          <source>The keyword arguments :from and :to can be given to specify the expected initial value and the expected value after the block was executed.</source>
          <target state="translated">キーワード引数 :from および :to を指定すると、期待される初期値とブロック実行後の期待値を指定することができます。</target>
        </trans-unit>
        <trans-unit id="f3349b4c7e79a27feec027e09eaaf6fe241addad" translate="yes" xml:space="preserve">
          <source>The label of the current fixture is always available as a column value:</source>
          <target state="translated">現在のフィクスチャのラベルは、常にカラム値として利用可能です。</target>
        </trans-unit>
        <trans-unit id="5a7bea3f7592b166f30ea2c09e8e9abb723ec914" translate="yes" xml:space="preserve">
          <source>The last characters will be replaced with the &lt;code&gt;:omission&lt;/code&gt; string (defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;) for a total length not exceeding &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">最後の文字が置き換えられます &lt;code&gt;:omission&lt;/code&gt; 超えない合計の長さの文字列（デフォルトは「...」） &lt;code&gt;length&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e5104bffaf01d4231666775a1d668f8d8ffd8c52" translate="yes" xml:space="preserve">
          <source>The last characters will be replaced with the &lt;code&gt;:omission&lt;/code&gt; string (defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;):</source>
          <target state="translated">最後の文字は &lt;code&gt;:omission&lt;/code&gt; 文字列に置き換えられます（デフォルトは「&amp;hellip;」）：</target>
        </trans-unit>
        <trans-unit id="5b1fbe78e9957e7cf09f70c95db9866dfc8c504c" translate="yes" xml:space="preserve">
          <source>The last line ought to save the through record (a &lt;code&gt;Tagging&lt;/code&gt;). This will only work if the &lt;code&gt;:inverse_of&lt;/code&gt; is set:</source>
          <target state="translated">最後の行は、スルーレコード（ &lt;code&gt;Tagging&lt;/code&gt; ）を保存する必要があります。これは、 &lt;code&gt;:inverse_of&lt;/code&gt; が設定されている場合にのみ機能します。</target>
        </trans-unit>
        <trans-unit id="67a572e784d49a5e26efa0baf5210771e08bc0d2" translate="yes" xml:space="preserve">
          <source>The last point is easily explained with some enumerables:</source>
          <target state="translated">最後のポイントは、いくつかの列挙変数を使って簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="6bf06164b55dbf97e284223c0efd4152256ea1e6" translate="yes" xml:space="preserve">
          <source>The last point is particularly worth comparing for some enumerables:</source>
          <target state="translated">特に最後のポイントは、いくつかの列挙型の場合に比較する価値があります。</target>
        </trans-unit>
        <trans-unit id="c184c4cc81fa679b5807f802db648819174c0a80" translate="yes" xml:space="preserve">
          <source>The last three methods are required in your object for &lt;code&gt;Errors&lt;/code&gt; to be able to generate error messages correctly and also handle multiple languages. Of course, if you extend your object with &lt;code&gt;ActiveModel::Translation&lt;/code&gt; you will not need to implement the last two. Likewise, using &lt;code&gt;ActiveModel::Validations&lt;/code&gt; will handle the validation related methods for you.</source>
          <target state="translated">以下のために、最後の3つの方法は、あなたのオブジェクトに必要とされる &lt;code&gt;Errors&lt;/code&gt; 正しくエラーメッセージを生成し、また、複数の言語を扱うことができるように。もちろん、オブジェクトを &lt;code&gt;ActiveModel::Translation&lt;/code&gt; で拡張する場合、最後の2つを実装する必要はありません。同様に、 &lt;code&gt;ActiveModel::Validations&lt;/code&gt; を使用すると、検証に関連するメソッドが処理されます。</target>
        </trans-unit>
        <trans-unit id="97564964a74572c208e8ddbae7b14e004f054ff5" translate="yes" xml:space="preserve">
          <source>The last two assume that &lt;code&gt;&quot;foo&quot;.camelize&lt;/code&gt; returns &amp;ldquo;Foo&amp;rdquo;.</source>
          <target state="translated">最後の2つは、 &lt;code&gt;&quot;foo&quot;.camelize&lt;/code&gt; が「Foo」を返すことを前提としています。</target>
        </trans-unit>
        <trans-unit id="47b2c402c42a4bd00dbe048a89ca0f4f2119a696" translate="yes" xml:space="preserve">
          <source>The last two assume that &lt;code&gt;&quot;foo/bar&quot;.camelize&lt;/code&gt; returns &amp;ldquo;Foo::Bar&amp;rdquo;.</source>
          <target state="translated">最後の2つは、 &lt;code&gt;&quot;foo/bar&quot;.camelize&lt;/code&gt; が「Foo :: Bar」を返すことを前提としています。</target>
        </trans-unit>
        <trans-unit id="01d4583e92db9c0607227e88af967aeb5072f75c" translate="yes" xml:space="preserve">
          <source>The latter is a shortcut for:</source>
          <target state="translated">後者の方が近道です。</target>
        </trans-unit>
        <trans-unit id="d60eb064146a6c7d8808535fb46ffe1d06c0ef35" translate="yes" xml:space="preserve">
          <source>The layout will be rendered together with the partial for each item in the collection. The current object and object_counter variables will be available in the layout as well, the same way they are within the partial.</source>
          <target state="translated">レイアウトは、コレクション内の各アイテムのパーシャルと一緒にレンダリングされます。現在のオブジェクトと object_counter 変数は、パーシャルの中と同じようにレイアウトの中でも利用可能になります。</target>
        </trans-unit>
        <trans-unit id="f284415c6d146c7afcb0672e6e0f0abf85ffd823" translate="yes" xml:space="preserve">
          <source>The library as a whole can be accessed in the application manifest like so:</source>
          <target state="translated">ライブラリ全体は、アプリケーションのマニフェストでこのようにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="fba58133a93884c30ef1d3cc05d18c16fa410026" translate="yes" xml:space="preserve">
          <source>The life cycle of Active Record objects.</source>
          <target state="translated">アクティブレコードオブジェクトのライフサイクル。</target>
        </trans-unit>
        <trans-unit id="92a217a341fa19e51932070fc99d9da0f3f4d7cb" translate="yes" xml:space="preserve">
          <source>The link looks innocent to visitors, but when it's clicked, it will execute the JavaScript function &quot;exploit_code&quot; or any other JavaScript the attacker provides.</source>
          <target state="translated">リンクは訪問者には無害に見えますが、クリックされると攻撃者が提供するJavaScriptの関数「exploit_code」やその他のJavaScriptを実行します。</target>
        </trans-unit>
        <trans-unit id="140864c4a27c61fd406b6f614287fbce60f18f97" translate="yes" xml:space="preserve">
          <source>The list of columns names the model should ignore. Ignored columns won't have attribute accessors defined, and won't be referenced in SQL queries.</source>
          <target state="translated">モデルが無視するカラム名のリスト。無視されたカラムは属性アクセサが定義されておらず、SQLクエリでは参照されません。</target>
        </trans-unit>
        <trans-unit id="e01fcb5edebcaa447ba52d13d4044f5a0666630b" translate="yes" xml:space="preserve">
          <source>The load path must be specified before any translations are looked up. To change the default locale from an initializer instead of &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">変換が検索される前に、ロードパスを指定する必要があります。 &lt;code&gt;config/application.rb&lt;/code&gt; ではなくイニシャライザからデフォルトのロケールを変更するには：</target>
        </trans-unit>
        <trans-unit id="b91abe0a3bab1667a08a85ecc6e8da70adbd94e0" translate="yes" xml:space="preserve">
          <source>The local variables passed to sub templates can be accessed as a hash using the &lt;code&gt;local_assigns&lt;/code&gt; hash. This lets you access the variables as:</source>
          <target state="translated">サブテンプレートに渡されたローカル変数は、 &lt;code&gt;local_assigns&lt;/code&gt; ハッシュを使用してハッシュとしてアクセスできます。これにより、次のように変数にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d2dceed55b6b0e02bd26ebf3baea2208a19abe67" translate="yes" xml:space="preserve">
          <source>The locale can be either set pseudo-globally to &lt;code&gt;I18n.locale&lt;/code&gt; (which uses &lt;code&gt;Thread.current&lt;/code&gt; like, e.g., &lt;code&gt;Time.zone&lt;/code&gt;) or can be passed as an option to &lt;code&gt;#translate&lt;/code&gt; and &lt;code&gt;#localize&lt;/code&gt;.</source>
          <target state="translated">ロケールは、疑似グローバルに &lt;code&gt;I18n.locale&lt;/code&gt; （たとえば、 &lt;code&gt;Time.zone&lt;/code&gt; などの &lt;code&gt;Thread.current&lt;/code&gt; を使用）に設定するか、または &lt;code&gt;#translate&lt;/code&gt; および &lt;code&gt;#localize&lt;/code&gt; にオプションとして渡すことができます。</target>
        </trans-unit>
        <trans-unit id="413c8092d1383ea347a5974fbaadfa780f3120e9" translate="yes" xml:space="preserve">
          <source>The locale can be set in an &lt;code&gt;around_action&lt;/code&gt; in the &lt;code&gt;ApplicationController&lt;/code&gt;:</source>
          <target state="translated">ロケールは、 &lt;code&gt;ApplicationController&lt;/code&gt; の &lt;code&gt;around_action&lt;/code&gt; で設定できます。</target>
        </trans-unit>
        <trans-unit id="daf31176920b1d84600a05b4b96e3cdf806b6a98" translate="yes" xml:space="preserve">
          <source>The locale can be set using one of many different approaches.</source>
          <target state="translated">ロケールを設定するには、さまざまな方法があります。</target>
        </trans-unit>
        <trans-unit id="dacee22f44c5ce441593543b2c1e7a3944349db1" translate="yes" xml:space="preserve">
          <source>The locale is an &lt;em&gt;obvious&lt;/em&gt; part of the URL.</source>
          <target state="translated">ロケールはURLの&lt;em&gt;明らかな&lt;/em&gt;部分です。</target>
        </trans-unit>
        <trans-unit id="7cbd4a2a8191fc3188f26e69e32667e5d3e6d197" translate="yes" xml:space="preserve">
          <source>The log files on &lt;a href=&quot;http://www.attacker.com&quot;&gt;www.attacker.com&lt;/a&gt; will read like this:</source>
          <target state="translated">&lt;a href=&quot;http://www.attacker.com&quot;&gt;www.attacker.com&lt;/a&gt;のログファイルは次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="cc00365603b4266cf1c98299376d51ed6a9302f8" translate="yes" xml:space="preserve">
          <source>The lookup in this case for test_unit as input is:</source>
          <target state="translated">この場合、入力としてのtest_unitのルックアップは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="dc77ccb96283466ad3dd5c3db6e697992a0f4424" translate="yes" xml:space="preserve">
          <source>The lookup order for an &lt;code&gt;admin/products#index&lt;/code&gt; action will be:</source>
          <target state="translated">&lt;code&gt;admin/products#index&lt;/code&gt; アクションの検索順序は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="361ee9d224498cc085910e79d5715c8d5a8243a4" translate="yes" xml:space="preserve">
          <source>The loop is set up in regular embedding tags &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;, and the name is written using the output embedding tag &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt;. Note that this is not just a usage suggestion. Regular output functions like print or puts won't work with &lt;code&gt;ERB&lt;/code&gt; templates. So this would be wrong:</source>
          <target state="translated">ループは通常の埋め込みタグ &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; %% &amp;gt;で設定され、名前は出力埋め込みタグ &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; を使用して書き込まれます。これは単なる使用法の提案ではないことに注意してください。印刷やプットなどの通常の出力機能は、 &lt;code&gt;ERB&lt;/code&gt; テンプレートでは機能しません。したがって、これは間違っているでしょう：</target>
        </trans-unit>
        <trans-unit id="89708913768e17e0f4e9ebf21fe3c90dedbbdee1" translate="yes" xml:space="preserve">
          <source>The loop is set up using regular embedding tags (&lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;) and the name is inserted using the output embedding tags (&lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt;). Note that this is not just a usage suggestion: regular output functions such as &lt;code&gt;print&lt;/code&gt; and &lt;code&gt;puts&lt;/code&gt; won't be rendered to the view with ERB templates. So this would be wrong:</source>
          <target state="translated">ループは通常の埋め込みタグ（ &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; ％％&amp;gt;）を使用して設定され、名前は出力埋め込みタグ（ &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; ）を使用して挿入されます。これは単なる使用方法の提案ではないことに注意してください：のような定期的な出力機能 &lt;code&gt;print&lt;/code&gt; と &lt;code&gt;puts&lt;/code&gt; ERBテンプレートを持つビューにレンダリングされることはありません。だからこれは間違っているでしょう：</target>
        </trans-unit>
        <trans-unit id="dc30761df747a5ac678de0e1485ab435952394e1" translate="yes" xml:space="preserve">
          <source>The loop is setup in regular embedding tags &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt;, and the name is written using the output embedding tag &lt;code&gt;&amp;lt;%=
%&amp;gt;&lt;/code&gt;. Note that this is not just a usage suggestion. Regular output functions like print or puts won't work with ERB templates. So this would be wrong:</source>
          <target state="translated">ループは通常の埋め込みタグ &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; ％％&amp;gt;でセットアップされ、名前は出力埋め込みタグ &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; を使用して書き込まれます。これは使用法の提案ではないことに注意してください。printやputsなどの通常の出力関数は、ERBテンプレートでは機能しません。だからこれは間違っているでしょう：</target>
        </trans-unit>
        <trans-unit id="60c1c080776c32f16ee80456ec4655445a163299" translate="yes" xml:space="preserve">
          <source>The macro &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-attr_internal&quot;&gt;&lt;code&gt;attr_internal&lt;/code&gt;&lt;/a&gt; is a synonym for &lt;code&gt;attr_internal_accessor&lt;/code&gt;:</source>
          <target state="translated">マクロ&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-attr_internal&quot;&gt; &lt;code&gt;attr_internal&lt;/code&gt; は&lt;/a&gt;同義語です &lt;code&gt;attr_internal_accessor&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="b359cd9a1a8a4f6521d576bd7487d6e3b867cc80" translate="yes" xml:space="preserve">
          <source>The macro &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-delegate&quot;&gt;&lt;code&gt;delegate&lt;/code&gt;&lt;/a&gt; offers an easy way to forward methods.</source>
          <target state="translated">マクロ&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-delegate&quot;&gt; &lt;code&gt;delegate&lt;/code&gt; &lt;/a&gt;は、メソッドを転送する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="4782d45cb3bff384195fc3fa74f6ae6e493a63ea" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;attr_internal&lt;/code&gt; is a synonym for &lt;code&gt;attr_internal_accessor&lt;/code&gt;:</source>
          <target state="translated">マクロ &lt;code&gt;attr_internal&lt;/code&gt; は同義語です &lt;code&gt;attr_internal_accessor&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="a2f7c6d14cf5071e8ad6bb4bd27649a2b165b18f" translate="yes" xml:space="preserve">
          <source>The macro &lt;code&gt;delegate&lt;/code&gt; offers an easy way to forward methods.</source>
          <target state="translated">マクロ &lt;code&gt;delegate&lt;/code&gt; は、メソッドを転送する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="415498318beba7b40f9b5611af8461964ca6a83e" translate="yes" xml:space="preserve">
          <source>The macro receives one or more method names (specified as symbols or strings) and the name of the target object via the &lt;code&gt;:to&lt;/code&gt; option (also a symbol or string).</source>
          <target state="translated">マクロは、1つ以上のメソッド名（シンボルまたは文字列として指定）と、 &lt;code&gt;:to&lt;/code&gt; オプションを介してターゲットオブジェクトの名前（これもシンボルまたは文字列）を受け取ります。</target>
        </trans-unit>
        <trans-unit id="60baf372c6c437b91d26d4adf2d9c721e5ed9c08" translate="yes" xml:space="preserve">
          <source>The macro-style class methods can also receive a block. Consider using this style if the code inside your block is so short that it fits in a single line. For example, you could send metrics for every job enqueued:</source>
          <target state="translated">マクロスタイルのクラスメソッドは、ブロックを受け取ることもできます。ブロック内のコードが 1 行に収まるほど短い場合は、このスタイルの使用を検討してください。例えば、キューに入れられたジョブごとにメトリクスを送信することができます。</target>
        </trans-unit>
        <trans-unit id="ae8d13b0e4b30afca687a27a2a6bcee77b82e1f5" translate="yes" xml:space="preserve">
          <source>The macro-style class methods can also receive a block. Consider using this style if the code inside your block is so short that it fits in a single line:</source>
          <target state="translated">マクロスタイルのクラスメソッドは、ブロックを受け取ることもできます。ブロック内のコードが一行に収まるほど短い場合は、このスタイルの使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="62a5b4baa352f58f0f7825e54ea2087fe5908668" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_reader&quot;&gt;&lt;code&gt;cattr_reader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_writer&quot;&gt;&lt;code&gt;cattr_writer&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_accessor&quot;&gt;&lt;code&gt;cattr_accessor&lt;/code&gt;&lt;/a&gt; are analogous to their &lt;code&gt;attr_*&lt;/code&gt; counterparts but for classes. They initialize a class variable to &lt;code&gt;nil&lt;/code&gt; unless it already exists, and generate the corresponding class methods to access it:</source>
          <target state="translated">マクロ&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_reader&quot;&gt; &lt;code&gt;cattr_reader&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_writer&quot;&gt; &lt;code&gt;cattr_writer&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-cattr_accessor&quot;&gt; &lt;code&gt;cattr_accessor&lt;/code&gt; &lt;/a&gt;は、対応する &lt;code&gt;attr_*&lt;/code&gt; に類似していますが、クラス用です。クラス変数がすでに存在しない限り、 &lt;code&gt;nil&lt;/code&gt; に初期化し、それにアクセスするための対応するクラスメソッドを生成します。</target>
        </trans-unit>
        <trans-unit id="87afced873ca87f9a61f091f800f32b8bc8f5a43" translate="yes" xml:space="preserve">
          <source>The macros &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_reader&quot;&gt;&lt;code&gt;mattr_reader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_writer&quot;&gt;&lt;code&gt;mattr_writer&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_accessor&quot;&gt;&lt;code&gt;mattr_accessor&lt;/code&gt;&lt;/a&gt; are the same as the &lt;code&gt;cattr_*&lt;/code&gt; macros defined for class. In fact, the &lt;code&gt;cattr_*&lt;/code&gt; macros are just aliases for the &lt;code&gt;mattr_*&lt;/code&gt; macros. Check &lt;a href=&quot;#class-attributes&quot;&gt;Class Attributes&lt;/a&gt;.</source>
          <target state="translated">マクロ&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_reader&quot;&gt; &lt;code&gt;mattr_reader&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_writer&quot;&gt; &lt;code&gt;mattr_writer&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-mattr_accessor&quot;&gt; &lt;code&gt;mattr_accessor&lt;/code&gt; &lt;/a&gt;は、クラスに定義されている &lt;code&gt;cattr_*&lt;/code&gt; マクロと同じです。実際には、 &lt;code&gt;cattr_*&lt;/code&gt; マクロはのためだけの別名である &lt;code&gt;mattr_*&lt;/code&gt; マクロ。&lt;a href=&quot;#class-attributes&quot;&gt;クラス属性を&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="7bf8a2a68d5bb7d9bdce0e3db1b7396a5f8c4dbe" translate="yes" xml:space="preserve">
          <source>The macros &lt;code&gt;cattr_reader&lt;/code&gt;, &lt;code&gt;cattr_writer&lt;/code&gt;, and &lt;code&gt;cattr_accessor&lt;/code&gt; are analogous to their &lt;code&gt;attr_*&lt;/code&gt; counterparts but for classes. They initialize a class variable to &lt;code&gt;nil&lt;/code&gt; unless it already exists, and generate the corresponding class methods to access it:</source>
          <target state="translated">マクロ &lt;code&gt;cattr_reader&lt;/code&gt; 、 &lt;code&gt;cattr_writer&lt;/code&gt; 、および &lt;code&gt;cattr_accessor&lt;/code&gt; は、対応する &lt;code&gt;attr_*&lt;/code&gt; に類似していますが、クラス用です。これらは、クラス変数が存在しない限り &lt;code&gt;nil&lt;/code&gt; に初期化し、それにアクセスするための対応するクラスメソッドを生成します。</target>
        </trans-unit>
        <trans-unit id="75c1b4fe1ccf8d7f2c382dea52c838eafc63998f" translate="yes" xml:space="preserve">
          <source>The macros &lt;code&gt;mattr_reader&lt;/code&gt;, &lt;code&gt;mattr_writer&lt;/code&gt;, and &lt;code&gt;mattr_accessor&lt;/code&gt; are the same as the &lt;code&gt;cattr_*&lt;/code&gt; macros defined for class. In fact, the &lt;code&gt;cattr_*&lt;/code&gt; macros are just aliases for the &lt;code&gt;mattr_*&lt;/code&gt; macros. Check &lt;a href=&quot;#class-attributes&quot;&gt;Class Attributes&lt;/a&gt;.</source>
          <target state="translated">マクロ &lt;code&gt;mattr_reader&lt;/code&gt; 、 &lt;code&gt;mattr_writer&lt;/code&gt; 、および &lt;code&gt;mattr_accessor&lt;/code&gt; は、クラスに定義された &lt;code&gt;cattr_*&lt;/code&gt; マクロと同じです。実際には、 &lt;code&gt;cattr_*&lt;/code&gt; マクロはのためだけの別名である &lt;code&gt;mattr_*&lt;/code&gt; マクロ。&lt;a href=&quot;#class-attributes&quot;&gt;クラス属性を&lt;/a&gt;確認します。</target>
        </trans-unit>
        <trans-unit id="58b4dccf4abf64be6b0a0ec46a36c74305dc1844" translate="yes" xml:space="preserve">
          <source>The main body of the view will always render into the unnamed &lt;code&gt;yield&lt;/code&gt;. To render content into a named &lt;code&gt;yield&lt;/code&gt;, you use the &lt;code&gt;content_for&lt;/code&gt; method.</source>
          <target state="translated">ビューの本体は常に名前のない &lt;code&gt;yield&lt;/code&gt; にレンダリングされます。コンテンツを名前付き &lt;code&gt;yield&lt;/code&gt; にレンダリングするには、 &lt;code&gt;content_for&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="c79154cc310f99ec2631747409f4048ac004be4c" translate="yes" xml:space="preserve">
          <source>The main difference from &lt;code&gt;belongs_to&lt;/code&gt; is that the link column &lt;code&gt;supplier_id&lt;/code&gt; is located in the other table:</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; との主な違いは、リンク列 &lt;code&gt;supplier_id&lt;/code&gt; が他のテーブルにあることです。</target>
        </trans-unit>
        <trans-unit id="8a300fdd5f24e0f35d7ec91006d771d21fa00b32" translate="yes" xml:space="preserve">
          <source>The main form helper is &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with&quot;&gt;&lt;code&gt;form_with&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メインのフォームヘルパーは&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with&quot;&gt; &lt;code&gt;form_with&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="79f6a395f84dfa52f266c952a76eb19193188b76" translate="yes" xml:space="preserve">
          <source>The main form helper is &lt;code&gt;form_with&lt;/code&gt;.</source>
          <target state="translated">メインフォームヘルパーは &lt;code&gt;form_with&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7fc515176450fdd7cbfab7c1b8954dc09f9c2dce" translate="yes" xml:space="preserve">
          <source>The main method that creates the message and renders the email templates. There are two ways to call this method, with a block, or without a block.</source>
          <target state="translated">メッセージを作成し、メールテンプレートをレンダリングするメインのメソッドです。このメソッドを呼び出すには、ブロック付きとブロックなしの2通りの方法があります。</target>
        </trans-unit>
        <trans-unit id="495929d2ad1e03b5a3e61a6dfafb4d72fa178b9c" translate="yes" xml:space="preserve">
          <source>The main methods to call are &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;exist?&lt;/code&gt;, and &lt;code&gt;fetch&lt;/code&gt;. The fetch method takes a block and will either return an existing value from the cache, or evaluate the block and write the result to the cache if no value exists.</source>
          <target state="translated">呼び出す主なメソッドは、 &lt;code&gt;read&lt;/code&gt; 、 &lt;code&gt;write&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;exist?&lt;/code&gt; 、 &lt;code&gt;fetch&lt;/code&gt; ます。fetchメソッドはブロックを受け取り、キャッシュから既存の値を返すか、値が存在しない場合はブロックを評価して結果をキャッシュに書き込みます。</target>
        </trans-unit>
        <trans-unit id="14c39f5026611e3921bac887dbcc489606e1d7f4" translate="yes" xml:space="preserve">
          <source>The main objective of most attackers is to make money. The underground prices for stolen bank login accounts range from 0.5%-10% of account balance, $0.5-$30 for credit card numbers ($20-$60 with full details), $0.1-$1.5 for identities (Name, SSN &amp;amp; DOB), $20-$50 for retailer accounts, and $6-$10 for cloud service provider accounts, according to the &lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;Symantec Internet Security Threat Report (2017)&lt;/a&gt;.</source>
          <target state="translated">ほとんどの攻撃者の主な目的はお金を稼ぐことです。盗まれた銀行ログインアカウントの地下価格は、口座残高の0.5％-10％、クレジットカード番号の場合は$ 0.5- $ 30（詳細は$ 20- $ 60）、ID（名前、SSN、DOB）の場合は$ 0.1- $ 1.5、$ 20- &lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;Symantec Internet Security Threat Report（2017）&lt;/a&gt;によると、小売業者アカウントは50ドル、クラウドサービスプロバイダーアカウントは6〜10ドルです。</target>
        </trans-unit>
        <trans-unit id="5f0f4d1e05aeb9d77de10ffcf78f1778658c85b3" translate="yes" xml:space="preserve">
          <source>The main objective of most attackers is to make money. The underground prices for stolen bank login accounts range from 0.5%-10% of account balance, $0.5-$30 for credit card numbers ($20-$60 with full details), $0.1-$1.5 for identities (Name, SSN, and DOB), $20-$50 for retailer accounts, and $6-$10 for cloud service provider accounts, according to the &lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;Symantec Internet Security Threat Report (2017)&lt;/a&gt;.</source>
          <target state="translated">ほとんどの攻撃者の主な目的は、お金を稼ぐことです。盗まれた銀行のログインアカウントの地下価格は、口座残高の0.5％〜10％、クレジットカード番号で0.5〜30ドル（詳細は20〜60ドル）、ID（名前、SSN、DOB）で0.1〜1.5ドル、20ドルの範囲です。&lt;a href=&quot;https://www.symantec.com/content/dam/symantec/docs/reports/istr-22-2017-en.pdf&quot;&gt;-Symantec Internet Security Threat Report（2017）&lt;/a&gt;によると、小売業者のアカウントは50ドル、クラウドサービスプロバイダーのアカウントは6ドルから10ドルです。</target>
        </trans-unit>
        <trans-unit id="21599ae78681ea4faf08ff08a657288956a915b6" translate="yes" xml:space="preserve">
          <source>The main point is to ensure that all Rails apps will have a job infrastructure in place. We can then have framework features and other gems build on top of that, without having to worry about API differences between various job runners such as Delayed Job and Resque. Picking your queuing backend becomes more of an operational concern, then. And you'll be able to switch between them without having to rewrite your jobs.</source>
          <target state="translated">主なポイントは、すべてのRailsアプリがジョブのインフラストラクチャを確保できるようにすることです。そうすれば、Delayed JobやResqueのような様々なジョブランナー間のAPIの違いを気にすることなく、フレームワークの機能や他のジェムをその上に構築してもらうことができます。キューイングのバックエンドを選択することは、運用上の関心事になります。そして、ジョブを書き換えることなく、それらの間で切り替えることができるようになります。</target>
        </trans-unit>
        <trans-unit id="71619b344378d256ebf3fdb56f4d5efbf0440f8d" translate="yes" xml:space="preserve">
          <source>The main purpose of Rails' migration feature is to issue commands that modify the schema using a consistent process. Migrations can also be used to add or modify data. This is useful in an existing database that can't be destroyed and recreated, such as a production database.</source>
          <target state="translated">Railsのマイグレーション機能の主な目的は、一貫したプロセスを使ってスキーマを修正するコマンドを発行することです。マイグレーションはデータの追加や修正にも利用できます。これは、本番用のデータベースのように破壊して再作成できない既存のデータベースの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="9f79a2a93cfc18ecc7090835c969528751a32baa" translate="yes" xml:space="preserve">
          <source>The matcher (and other members of the precompile array; see below) is applied to final compiled file names. This means anything that compiles to JS/CSS is excluded, as well as raw JS/CSS files; for example, &lt;code&gt;.coffee&lt;/code&gt; and &lt;code&gt;.scss&lt;/code&gt; files are &lt;strong&gt;not&lt;/strong&gt; automatically included as they compile to JS/CSS.</source>
          <target state="translated">マッチャー（およびプリコンパイル配列の他のメンバー。以下を参照）は、最終的なコンパイル済みファイル名に適用されます。これは、JS / CSSにコンパイルされるもの、および未加工のJS / CSSファイルが除外されることを意味します。たとえば、 &lt;code&gt;.coffee&lt;/code&gt; および &lt;code&gt;.scss&lt;/code&gt; ファイルは、JS / CSSにコンパイルされるため、自動的には含まれ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5a5326dc8382eb380da680fd49ebf42711f48794" translate="yes" xml:space="preserve">
          <source>The maximum length of a password is 72 (required by &lt;code&gt;bcrypt&lt;/code&gt; on which ActiveModel::SecurePassword depends)</source>
          <target state="translated">パスワードの最大長は72（ActiveModel :: SecurePasswordが依存する &lt;code&gt;bcrypt&lt;/code&gt; で必要）</target>
        </trans-unit>
        <trans-unit id="efc00f941fcc8767657069623c7b30577861e458" translate="yes" xml:space="preserve">
          <source>The message identifies which template is missing. In this case, it's the &lt;code&gt;articles/new&lt;/code&gt; template. Rails will first look for this template. If not found, then it will attempt to load a template called &lt;code&gt;application/new&lt;/code&gt;, because the &lt;code&gt;ArticlesController&lt;/code&gt; inherits from &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="translated">メッセージは、欠落しているテンプレートを識別します。この場合は、 &lt;code&gt;articles/new&lt;/code&gt; テンプレートです。Railsは最初にこのテンプレートを探します。見つからない場合、 &lt;code&gt;ArticlesController&lt;/code&gt; は &lt;code&gt;ApplicationController&lt;/code&gt; から継承するため、 &lt;code&gt;application/new&lt;/code&gt; というテンプレートをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="47bc5e7f0a3a4de0af0ba74ae3f9825d3afcaeb3" translate="yes" xml:space="preserve">
          <source>The message is signed with the &lt;code&gt;MessageVerifier&lt;/code&gt;'s secret. Returns Base64-encoded message joined with the generated signature.</source>
          <target state="translated">メッセージは &lt;code&gt;MessageVerifier&lt;/code&gt; のシークレットで署名されています。生成された署名と結合されたBase64エンコードメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="687ac77baf1c88b97b2fe37f68e7a236164e70b0" translate="yes" xml:space="preserve">
          <source>The message is signed with the &lt;code&gt;MessageVerifier&lt;/code&gt;'s secret. Without knowing the secret, the original value cannot be extracted from the message.</source>
          <target state="translated">メッセージは &lt;code&gt;MessageVerifier&lt;/code&gt; の秘密で署名されています。秘密を知らなければ、元の値をメッセージから抽出することはできません。</target>
        </trans-unit>
        <trans-unit id="093a0fd1eecb6d23d318f6fc14f9ed0c2e8da44c" translate="yes" xml:space="preserve">
          <source>The messages are available in the @logger instance, which is a logger with limited powers (it actually does not send anything to your output), and you can collect them doing @logger.logged(level), where level is the level used in logging, like info, debug, warn and so on.</source>
          <target state="translated">メッセージは @logger インスタンスで利用可能ですが、これは限られた権限を持つロガーです (実際には出力に何も送信しません)。</target>
        </trans-unit>
        <trans-unit id="b612ae6689da6e5fbb2f1fd93e9a17cebb56a72f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-c-wrap&quot;&gt;&lt;code&gt;Array.wrap&lt;/code&gt;&lt;/a&gt; wraps its argument in an array unless it is already an array (or array-like).</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-c-wrap&quot;&gt; &lt;code&gt;Array.wrap&lt;/code&gt; &lt;/a&gt;メソッドは、すでに配列（または配列のようなもの）でない限り、引数を配列にラップします。</target>
        </trans-unit>
        <trans-unit id="e0c7986875aada54039f9f866dce9eaf81b9b726" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-deep_dup&quot;&gt;&lt;code&gt;Array#deep_dup&lt;/code&gt;&lt;/a&gt; duplicates itself and all objects inside recursively with the Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Array#map&lt;/code&gt;, sending &lt;code&gt;deep_dup&lt;/code&gt; method to each object inside.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-deep_dup&quot;&gt; &lt;code&gt;Array#deep_dup&lt;/code&gt; &lt;/a&gt;は、アクティブサポートメソッド &lt;code&gt;Object#deep_dup&lt;/code&gt; を使用して、それ自体と内部のすべてのオブジェクトを再帰的に複製します。これは &lt;code&gt;Array#map&lt;/code&gt; のように機能し、 &lt;code&gt;deep_dup&lt;/code&gt; メソッドを内部の各オブジェクトに送信します。</target>
        </trans-unit>
        <trans-unit id="f1083861e0acfb7a7f8c678f8a1acde83bccc8a4" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-excluding&quot;&gt;&lt;code&gt;excluding&lt;/code&gt;&lt;/a&gt; returns a copy of the Array excluding the specified elements. This is an optimization of &lt;code&gt;Enumerable#excluding&lt;/code&gt; that uses &lt;code&gt;Array#-&lt;/code&gt; instead of &lt;code&gt;Array#reject&lt;/code&gt; for performance reasons.</source>
          <target state="translated">exceptメソッドは、指定された要素を除いた配列のコピー&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-excluding&quot;&gt; &lt;code&gt;excluding&lt;/code&gt; &lt;/a&gt;返します。これは、パフォーマンス上の理由から &lt;code&gt;Array#reject&lt;/code&gt; の代わりにArray＃ &lt;code&gt;Array#-&lt;/code&gt; を使用する &lt;code&gt;Enumerable#excluding&lt;/code&gt; の最適化です。</target>
        </trans-unit>
        <trans-unit id="3c5ab031b7e50d2e96e0a74ffe9af2b6b2712219" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-extract-21&quot;&gt;&lt;code&gt;extract!&lt;/code&gt;&lt;/a&gt; removes and returns the elements for which the block returns a true value. If no block is given, an Enumerator is returned instead.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-extract-21&quot;&gt; &lt;code&gt;extract!&lt;/code&gt; &lt;/a&gt;ブロックが真の値を返す要素を削除して返します。ブロックが指定されていない場合は、代わりに列挙子が返されます。</target>
        </trans-unit>
        <trans-unit id="1baa36c974bc804921431457c1c6c6a4be330e0f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-in_groups&quot;&gt;&lt;code&gt;in_groups&lt;/code&gt;&lt;/a&gt; splits an array into a certain number of groups. The method returns an array with the groups:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-in_groups&quot;&gt; &lt;code&gt;in_groups&lt;/code&gt; &lt;/a&gt;メソッドは、配列を特定の数のグループに分割します。このメソッドは、グループを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="7d79e4eef123985b75e731ceb60d98228c7cbf62" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-in_groups_of&quot;&gt;&lt;code&gt;in_groups_of&lt;/code&gt;&lt;/a&gt; splits an array into consecutive groups of a certain size. It returns an array with the groups:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-in_groups_of&quot;&gt; &lt;code&gt;in_groups_of&lt;/code&gt; &lt;/a&gt;メソッドは、配列を特定のサイズの連続するグループに分割します。グループを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="ece220193b948f6451f39d1479e13638b20bc0a7" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-including&quot;&gt;&lt;code&gt;including&lt;/code&gt;&lt;/a&gt; returns a new array that includes the passed elements:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-including&quot;&gt; &lt;code&gt;including&lt;/code&gt; &lt;/a&gt;メソッドは、渡された要素を含む新しい配列を返します。</target>
        </trans-unit>
        <trans-unit id="9dc7dad9a9aca6e185fba5588ba639a3bc736351" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-split&quot;&gt;&lt;code&gt;split&lt;/code&gt;&lt;/a&gt; divides an array by a separator and returns the resulting chunks.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-split&quot;&gt; &lt;code&gt;split&lt;/code&gt; &lt;/a&gt;は、配列を区切り文字で分割し、結果のチャンクを返します。</target>
        </trans-unit>
        <trans-unit id="41c401983d9066d49e62ff263b77010081bab58b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_formatted_s&quot;&gt;&lt;code&gt;to_formatted_s&lt;/code&gt;&lt;/a&gt; acts like &lt;code&gt;to_s&lt;/code&gt; by default.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_formatted_s&quot;&gt; &lt;code&gt;to_formatted_s&lt;/code&gt; &lt;/a&gt;は、デフォルトでは &lt;code&gt;to_s&lt;/code&gt; のように機能します。</target>
        </trans-unit>
        <trans-unit id="bf0308bc34dfdcb2c2be01608f4664521f58109a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_sentence&quot;&gt;&lt;code&gt;to_sentence&lt;/code&gt;&lt;/a&gt; turns an array into a string containing a sentence that enumerates its items:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_sentence&quot;&gt; &lt;code&gt;to_sentence&lt;/code&gt; &lt;/a&gt;メソッドは、配列を、その項目を列挙する文を含む文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="9d753bd10bf8fe0a2e8c39d13af5c915e0223f06" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_xml&quot;&gt;&lt;code&gt;to_xml&lt;/code&gt;&lt;/a&gt; returns a string containing an XML representation of its receiver:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-to_xml&quot;&gt; &lt;code&gt;to_xml&lt;/code&gt; &lt;/a&gt;は、レシーバーのXML表現を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c897ff212d2d6e5e632ed0bce056d6c3f7ff27f5" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Class.html#method-i-class_attribute&quot;&gt;&lt;code&gt;class_attribute&lt;/code&gt;&lt;/a&gt; declares one or more inheritable class attributes that can be overridden at any level down the hierarchy.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Class.html#method-i-class_attribute&quot;&gt; &lt;code&gt;class_attribute&lt;/code&gt; &lt;/a&gt;は、階層の任意のレベルでオーバーライドできる1つ以上の継承可能なクラス属性を宣言します。</target>
        </trans-unit>
        <trans-unit id="2a8ebb5b1ac4f9cf2151a625cbb168b3204d93d6" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-ago&quot;&gt;&lt;code&gt;ago&lt;/code&gt;&lt;/a&gt; receives a number of seconds as argument and returns a timestamp those many seconds ago from midnight:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-ago&quot;&gt; &lt;code&gt;ago&lt;/code&gt; &lt;/a&gt;は、引数として秒数を受け取り、真夜中から数秒前のタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="35bcee94edc7af7af7187cdc1c4002a40197bcdc" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-beginning_of_day&quot;&gt;&lt;code&gt;beginning_of_day&lt;/code&gt;&lt;/a&gt; returns a timestamp at the beginning of the day (00:00:00):</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-beginning_of_day&quot;&gt; &lt;code&gt;beginning_of_day&lt;/code&gt; &lt;/a&gt;は、1日の始まり（00:00:00）にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="039fc540d1c85df727eee6b7666d9a480d776c99" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-change&quot;&gt;&lt;code&gt;change&lt;/code&gt;&lt;/a&gt; allows you to get a new date which is the same as the receiver except for the given year, month, or day:</source>
          <target state="translated">メソッドの&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-change&quot;&gt; &lt;code&gt;change&lt;/code&gt; &lt;/a&gt;により、指定された年、月、または日を除いて、受信者と同じ新しい日付を取得できます。</target>
        </trans-unit>
        <trans-unit id="1a04133f50a7e8dee41d24a8c412f407c8402448" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-end_of_day&quot;&gt;&lt;code&gt;end_of_day&lt;/code&gt;&lt;/a&gt; returns a timestamp at the end of the day (23:59:59):</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-end_of_day&quot;&gt; &lt;code&gt;end_of_day&lt;/code&gt; &lt;/a&gt;は、1日の終わり（23:59:59）にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="8e0610126065795c03431aa3b00277477ca54fbf" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-all_day&quot;&gt;&lt;code&gt;all_day&lt;/code&gt;&lt;/a&gt; returns a range representing the whole day of the current time.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-all_day&quot;&gt; &lt;code&gt;all_day&lt;/code&gt; &lt;/a&gt;メソッドは、現在の時刻の1日を表す範囲を返します。</target>
        </trans-unit>
        <trans-unit id="998250f2fb6bd070c9087e3c2d373d324896049e" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-next_week&quot;&gt;&lt;code&gt;next_week&lt;/code&gt;&lt;/a&gt; receives a symbol with a day name in English (default is the thread local &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-c-beginning_of_week&quot;&gt;&lt;code&gt;Date.beginning_of_week&lt;/code&gt;&lt;/a&gt;, or &lt;code&gt;config.beginning_of_week&lt;/code&gt;, or &lt;code&gt;:monday&lt;/code&gt;) and it returns the date corresponding to that day.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-next_week&quot;&gt; &lt;code&gt;next_week&lt;/code&gt; &lt;/a&gt;メソッドは、英語の曜日名を持つシンボル（デフォルトはスレッドローカル&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-c-beginning_of_week&quot;&gt; &lt;code&gt;Date.beginning_of_week&lt;/code&gt; &lt;/a&gt;、または &lt;code&gt;config.beginning_of_week&lt;/code&gt; 、または &lt;code&gt;:monday&lt;/code&gt; ）を受け取り、その日に対応する日付を返します。</target>
        </trans-unit>
        <trans-unit id="73a8292161baf30cfe01fcc1081d24d9ea2ac191" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-prev_week&quot;&gt;&lt;code&gt;prev_week&lt;/code&gt;&lt;/a&gt; is analogous:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-prev_week&quot;&gt; &lt;code&gt;prev_week&lt;/code&gt; &lt;/a&gt;メソッドは類似しています。</target>
        </trans-unit>
        <trans-unit id="a78efcc4bbe0421096dae65f032b7093e39e2f67" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-weeks_ago&quot;&gt;&lt;code&gt;weeks_ago&lt;/code&gt;&lt;/a&gt; works analogously for weeks:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-weeks_ago&quot;&gt; &lt;code&gt;weeks_ago&lt;/code&gt; &lt;/a&gt;は、数週間同様に機能します。</target>
        </trans-unit>
        <trans-unit id="e69dd34154dc2248f2543c71ee8b402f5698765a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-years_ago&quot;&gt;&lt;code&gt;years_ago&lt;/code&gt;&lt;/a&gt; receives a number of years and returns the same date those many years ago:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-years_ago&quot;&gt; &lt;code&gt;years_ago&lt;/code&gt; &lt;/a&gt;は数年を受け取り、何年も前と同じ日付を返します。</target>
        </trans-unit>
        <trans-unit id="2beaa804c79a1634aac18973a0e2f9c9f66ddfa3" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-beginning_of_hour&quot;&gt;&lt;code&gt;beginning_of_hour&lt;/code&gt;&lt;/a&gt; returns a timestamp at the beginning of the hour (hh:00:00):</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-beginning_of_hour&quot;&gt; &lt;code&gt;beginning_of_hour&lt;/code&gt; &lt;/a&gt;は、時間の初め（hh：00：00）にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="07bdff82609af37ff84c3cfd8409014733ca8a8e" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-beginning_of_minute&quot;&gt;&lt;code&gt;beginning_of_minute&lt;/code&gt;&lt;/a&gt; returns a timestamp at the beginning of the minute (hh:mm:00):</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-beginning_of_minute&quot;&gt; &lt;code&gt;beginning_of_minute&lt;/code&gt; &lt;/a&gt;は、分の先頭（hh：mm：00）にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="65a870bfad322c3180cf0ec3330dd1a5debe159c" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-change&quot;&gt;&lt;code&gt;change&lt;/code&gt;&lt;/a&gt; allows you to get a new datetime which is the same as the receiver except for the given options, which may include &lt;code&gt;:year&lt;/code&gt;, &lt;code&gt;:month&lt;/code&gt;, &lt;code&gt;:day&lt;/code&gt;, &lt;code&gt;:hour&lt;/code&gt;, &lt;code&gt;:min&lt;/code&gt;, &lt;code&gt;:sec&lt;/code&gt;, &lt;code&gt;:offset&lt;/code&gt;, &lt;code&gt;:start&lt;/code&gt;:</source>
          <target state="translated">メソッドの&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-change&quot;&gt; &lt;code&gt;change&lt;/code&gt; &lt;/a&gt;により、 &lt;code&gt;:year&lt;/code&gt; 、 &lt;code&gt;:month&lt;/code&gt; 、 &lt;code&gt;:day&lt;/code&gt; 、 &lt;code&gt;:hour&lt;/code&gt; 、 &lt;code&gt;:min&lt;/code&gt; 、 &lt;code&gt;:sec&lt;/code&gt; 、 &lt;code&gt;:offset&lt;/code&gt; 、 &lt;code&gt;:start&lt;/code&gt; ：などのオプションを除いて、レシーバーと同じ新しい日時を取得できます。</target>
        </trans-unit>
        <trans-unit id="d673cf2b5b30a16b5b74d7a095ccbb4ff056d438" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-end_of_hour&quot;&gt;&lt;code&gt;end_of_hour&lt;/code&gt;&lt;/a&gt; returns a timestamp at the end of the hour (hh:59:59):</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-end_of_hour&quot;&gt; &lt;code&gt;end_of_hour&lt;/code&gt; &lt;/a&gt;は、時間の終わり（hh：59：59）にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="b81a306583738eb9cb77cb80392e2c36cb478eeb" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-end_of_minute&quot;&gt;&lt;code&gt;end_of_minute&lt;/code&gt;&lt;/a&gt; returns a timestamp at the end of the minute (hh:mm:59):</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-end_of_minute&quot;&gt; &lt;code&gt;end_of_minute&lt;/code&gt; &lt;/a&gt;は、分の終わりにタイムスタンプを返します（hh：mm：59）：</target>
        </trans-unit>
        <trans-unit id="6f76fda555ef0678ba34cbf7845ada96b332bf68" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-seconds_since_midnight&quot;&gt;&lt;code&gt;seconds_since_midnight&lt;/code&gt;&lt;/a&gt; returns the number of seconds since midnight:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-seconds_since_midnight&quot;&gt; &lt;code&gt;seconds_since_midnight&lt;/code&gt; &lt;/a&gt;は、真夜中からの秒数を返します。</target>
        </trans-unit>
        <trans-unit id="c28216d4001ab19eedcabbf50fa36d8544027988" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-utc&quot;&gt;&lt;code&gt;utc&lt;/code&gt;&lt;/a&gt; gives you the same datetime in the receiver expressed in UTC.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-utc&quot;&gt; &lt;code&gt;utc&lt;/code&gt; &lt;/a&gt;は、UTCで表されたレシーバーで同じ日時を提供します。</target>
        </trans-unit>
        <trans-unit id="1b80281bb6fb3d4596fcd7b362d6ecddd2052fc4" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-excluding&quot;&gt;&lt;code&gt;excluding&lt;/code&gt;&lt;/a&gt; returns a copy of an enumerable with the specified elements removed:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-excluding&quot;&gt; &lt;code&gt;excluding&lt;/code&gt; &lt;/a&gt;メソッドは、指定された要素が削除された列挙型のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="2a09a352614ac83f88a19a2b4fbddd78472bda89" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-including&quot;&gt;&lt;code&gt;including&lt;/code&gt;&lt;/a&gt; returns a new enumerable that includes the passed elements:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-including&quot;&gt; &lt;code&gt;including&lt;/code&gt; &lt;/a&gt;メソッドは、渡された要素を含む新しい列挙型を返します。</target>
        </trans-unit>
        <trans-unit id="4b6d0cfdbebf0ab3c55fdcef586069d11f968776" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-index_by&quot;&gt;&lt;code&gt;index_by&lt;/code&gt;&lt;/a&gt; generates a hash with the elements of an enumerable indexed by some key.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-index_by&quot;&gt; &lt;code&gt;index_by&lt;/code&gt; &lt;/a&gt;は、いくつかのキーによってインデックス付けされた列挙可能な要素を使用してハッシュを生成します。</target>
        </trans-unit>
        <trans-unit id="ac63c0f10ceee6988f41a4c0e8a3c0c22f173476" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-index_with&quot;&gt;&lt;code&gt;index_with&lt;/code&gt;&lt;/a&gt; generates a hash with the elements of an enumerable as keys. The value is either a passed default or returned in a block.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-index_with&quot;&gt; &lt;code&gt;index_with&lt;/code&gt; &lt;/a&gt;は、列挙可能な要素をキーとして使用してハッシュを生成します。値は、渡されたデフォルトであるか、ブロックで返されます。</target>
        </trans-unit>
        <trans-unit id="49039a23028677150f6fec3f16952f42c907275a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-many-3F&quot;&gt;&lt;code&gt;many?&lt;/code&gt;&lt;/a&gt; is shorthand for &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-many-3F&quot;&gt; &lt;code&gt;many?&lt;/code&gt; &lt;/a&gt;の方法？ &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt; 省略形です：</target>
        </trans-unit>
        <trans-unit id="c4d868e6a4eb9fce227da49b321e5cf5c7948cb8" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-pick&quot;&gt;&lt;code&gt;pick&lt;/code&gt;&lt;/a&gt; extracts the given key from the first element:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-pick&quot;&gt; &lt;code&gt;pick&lt;/code&gt; &lt;/a&gt;は、最初の要素から指定されたキーを抽出します。</target>
        </trans-unit>
        <trans-unit id="067cb0f562d830d4d67135591127ca2f21f24fed" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-pluck&quot;&gt;&lt;code&gt;pluck&lt;/code&gt;&lt;/a&gt; extracts the given key from each element:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-pluck&quot;&gt; &lt;code&gt;pluck&lt;/code&gt; &lt;/a&gt;メソッドは、各要素から指定されたキーを抽出します。</target>
        </trans-unit>
        <trans-unit id="7b5a526849a27f31a1962e9f3c08dd81c0bea1df" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; adds the elements of an enumerable:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-sum&quot;&gt; &lt;code&gt;sum&lt;/code&gt; &lt;/a&gt;は、列挙可能な要素を追加します。</target>
        </trans-unit>
        <trans-unit id="6c9ca080cc58756a3d47a0ed20beb1ffda36552b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-assert_valid_keys&quot;&gt;&lt;code&gt;assert_valid_keys&lt;/code&gt;&lt;/a&gt; receives an arbitrary number of arguments, and checks whether the receiver has any key outside that list. If it does &lt;code&gt;ArgumentError&lt;/code&gt; is raised.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-assert_valid_keys&quot;&gt; &lt;code&gt;assert_valid_keys&lt;/code&gt; &lt;/a&gt;は任意の数の引数を受け取り、レシーバーがそのリストの外にキーを持っているかどうかをチェックします。それがない場合は &lt;code&gt;ArgumentError&lt;/code&gt; 発生します。</target>
        </trans-unit>
        <trans-unit id="e39fb3197db6c4eca6513a55e9e4170d984b1c8f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_dup&quot;&gt;&lt;code&gt;Hash#deep_dup&lt;/code&gt;&lt;/a&gt; duplicates itself and all keys and values inside recursively with Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; with sending &lt;code&gt;deep_dup&lt;/code&gt; method to each pair inside.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_dup&quot;&gt; &lt;code&gt;Hash#deep_dup&lt;/code&gt; は&lt;/a&gt;、アクティブサポートメソッド &lt;code&gt;Object#deep_dup&lt;/code&gt; を使用して、それ自体と内部のすべてのキーと値を再帰的に複製します。 &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; のように機能し、内部の各ペアに &lt;code&gt;deep_dup&lt;/code&gt; メソッドを送信します。</target>
        </trans-unit>
        <trans-unit id="ef1c7ff2c42fcd6ffca4211ce8c4aafdbc8ca006" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_merge-21&quot;&gt;&lt;code&gt;deep_merge!&lt;/code&gt;&lt;/a&gt; performs a deep merge in place.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_merge-21&quot;&gt; &lt;code&gt;deep_merge!&lt;/code&gt; &lt;/a&gt;インプレースでディープマージを実行します。</target>
        </trans-unit>
        <trans-unit id="db56b2fbf9f7496ce388c67fa2491a432c560048" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_transform_values&quot;&gt;&lt;code&gt;deep_transform_values&lt;/code&gt;&lt;/a&gt; returns a new hash with all values converted by the block operation. This includes the values from the root hash and from all nested hashes and arrays.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-deep_transform_values&quot;&gt; &lt;code&gt;deep_transform_values&lt;/code&gt; &lt;/a&gt;は、ブロック操作によって変換されたすべての値を含む新しいハッシュを返します。これには、ルートハッシュ、およびネストされたすべてのハッシュと配列からの値が含まれます。</target>
        </trans-unit>
        <trans-unit id="33be23ac1f32f6d9010c22340202bc130db384ee" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt; returns a hash with the keys in the argument list removed, if present:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt;メソッドは、引数リスト内のキーが存在する場合は削除されたハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="6490dc6ca0ea2e116d9ca4eb23f948822aacf23d" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-extract-21&quot;&gt;&lt;code&gt;extract!&lt;/code&gt;&lt;/a&gt; removes and returns the key/value pairs matching the given keys.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-extract-21&quot;&gt; &lt;code&gt;extract!&lt;/code&gt; &lt;/a&gt;指定されたキーに一致するキーと値のペアを削除して返します。</target>
        </trans-unit>
        <trans-unit id="fade3e9adbec811dcd25983814a9bf033e16c62f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-reverse_update&quot;&gt;&lt;code&gt;reverse_update&lt;/code&gt;&lt;/a&gt; is an alias for &lt;code&gt;reverse_merge!&lt;/code&gt;, explained above.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-reverse_update&quot;&gt; &lt;code&gt;reverse_update&lt;/code&gt; &lt;/a&gt;は、reverse_mergeのエイリアスです &lt;code&gt;reverse_merge!&lt;/code&gt; 、上記で説明しました。</target>
        </trans-unit>
        <trans-unit id="35b414153ebbc60a3b64d13a1d98835966813d9f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-slice-21&quot;&gt;&lt;code&gt;slice!&lt;/code&gt;&lt;/a&gt; replaces the hash with only the given keys and returns a hash containing the removed key/value pairs.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-slice-21&quot;&gt; &lt;code&gt;slice!&lt;/code&gt; &lt;/a&gt;ハッシュを指定されたキーのみに置き換え、削除されたキーと値のペアを含むハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="8b46983a719de51e4d19bef825a0edcf7d848670" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-stringify_keys&quot;&gt;&lt;code&gt;stringify_keys&lt;/code&gt;&lt;/a&gt; returns a hash that has a stringified version of the keys in the receiver. It does so by sending &lt;code&gt;to_s&lt;/code&gt; to them:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-stringify_keys&quot;&gt; &lt;code&gt;stringify_keys&lt;/code&gt; &lt;/a&gt;メソッドは、レシーバーのキーの文字列化されたバージョンを持つハッシュを返します。これは、 &lt;code&gt;to_s&lt;/code&gt; をそれらに送信することによって行われます。</target>
        </trans-unit>
        <trans-unit id="b5b9400ba7eec7cce0300dff6b1ddd2b1d82e8a1" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-symbolize_keys&quot;&gt;&lt;code&gt;symbolize_keys&lt;/code&gt;&lt;/a&gt; returns a hash that has a symbolized version of the keys in the receiver, where possible. It does so by sending &lt;code&gt;to_sym&lt;/code&gt; to them:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-symbolize_keys&quot;&gt; &lt;code&gt;symbolize_keys&lt;/code&gt; &lt;/a&gt;は、可能な場合、レシーバー内のキーのシンボル化されたバージョンを持つハッシュを返します。これは、 &lt;code&gt;to_sym&lt;/code&gt; をそれらに送信することによって行われます。</target>
        </trans-unit>
        <trans-unit id="a947f9eb3846b0bdddd07f12c282763be5d6207d" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_query&quot;&gt;&lt;code&gt;Hash#to_query&lt;/code&gt;&lt;/a&gt; accepts an optional namespace for the keys:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_query&quot;&gt; &lt;code&gt;Hash#to_query&lt;/code&gt; &lt;/a&gt;は、キーのオプションの名前空間を受け入れます。</target>
        </trans-unit>
        <trans-unit id="31d153239a06048bedf1876d59d7c1af9d5a66c3" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_xml&quot;&gt;&lt;code&gt;to_xml&lt;/code&gt;&lt;/a&gt; returns a string containing an XML representation of its receiver:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_xml&quot;&gt; &lt;code&gt;to_xml&lt;/code&gt; &lt;/a&gt;は、レシーバーのXML表現を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3ab0dde6e21a4d8de1002823763ee74238bd72b5" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-with_indifferent_access&quot;&gt;&lt;code&gt;with_indifferent_access&lt;/code&gt;&lt;/a&gt; returns an &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html&quot;&gt;&lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;&lt;/a&gt; out of its receiver:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-with_indifferent_access&quot;&gt; &lt;code&gt;with_indifferent_access&lt;/code&gt; &lt;/a&gt;は、レシーバーから&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/HashWithIndifferentAccess.html&quot;&gt; &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; &lt;/a&gt;HashWithIndifferentAccessを返します。</target>
        </trans-unit>
        <trans-unit id="c728b859a01fd896b600648d1f5fd53efc1c894d" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-multiple_of-3F&quot;&gt;&lt;code&gt;multiple_of?&lt;/code&gt;&lt;/a&gt; tests whether an integer is multiple of the argument:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-multiple_of-3F&quot;&gt; &lt;code&gt;multiple_of?&lt;/code&gt; &lt;/a&gt;整数が引数の倍数であるかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="629496f56548980ec7d8b63ec8d54512ed656f20" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-ordinal&quot;&gt;&lt;code&gt;ordinal&lt;/code&gt;&lt;/a&gt; returns the ordinal suffix string corresponding to the receiver integer:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-ordinal&quot;&gt; &lt;code&gt;ordinal&lt;/code&gt; &lt;/a&gt;は、レシーバー整数に対応する序数接尾辞文字列を返します。</target>
        </trans-unit>
        <trans-unit id="7e852fe6e316d83ad3e1d9716154d2f4fd818712" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-ordinalize&quot;&gt;&lt;code&gt;ordinalize&lt;/code&gt;&lt;/a&gt; returns the ordinal string corresponding to the receiver integer. In comparison, note that the &lt;code&gt;ordinal&lt;/code&gt; method returns &lt;strong&gt;only&lt;/strong&gt; the suffix string.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Integer.html#method-i-ordinalize&quot;&gt; &lt;code&gt;ordinalize&lt;/code&gt; &lt;/a&gt;メソッドは、レシーバー整数に対応する序数文字列を返します。比較すると、 &lt;code&gt;ordinal&lt;/code&gt; メソッドはサフィックス文字列&lt;strong&gt;のみを&lt;/strong&gt;返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8b7b6222edb5074fb9f1ab910e335ceeb413e25a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-module_parents&quot;&gt;&lt;code&gt;module_parents&lt;/code&gt;&lt;/a&gt; calls &lt;code&gt;module_parent&lt;/code&gt; on the receiver and upwards until &lt;code&gt;Object&lt;/code&gt; is reached. The chain is returned in an array, from bottom to top:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-module_parents&quot;&gt; &lt;code&gt;module_parents&lt;/code&gt; &lt;/a&gt;呼び出す &lt;code&gt;module_parent&lt;/code&gt; をするまで上向きに受信機にして &lt;code&gt;Object&lt;/code&gt; 到達しました。チェーンは、下から上に配列で返されます。</target>
        </trans-unit>
        <trans-unit id="bb93589607ae29af34d998bb5eed6ffeb493d63c" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-redefine_method&quot;&gt;&lt;code&gt;redefine_method&lt;/code&gt;&lt;/a&gt; prevents such a potential warning, removing the existing method before if needed.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Module.html#method-i-redefine_method&quot;&gt; &lt;code&gt;redefine_method&lt;/code&gt; は&lt;/a&gt;、このような潜在的な警告を防ぎ、必要に応じて前に既存のメソッドを削除します。</target>
        </trans-unit>
        <trans-unit id="1be34124f06e32daed96a1fbf94011dfc94fd3ae" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-acts_like-3F&quot;&gt;&lt;code&gt;acts_like?&lt;/code&gt;&lt;/a&gt; provides a way to check whether some class acts like some other class based on a simple convention: a class that provides the same interface as &lt;code&gt;String&lt;/code&gt; defines</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-acts_like-3F&quot;&gt; &lt;code&gt;acts_like?&lt;/code&gt; &lt;/a&gt;単純な規則に基づいて、一部のクラスが他のクラスのように動作するかどうかを確認する方法を提供します &lt;code&gt;String&lt;/code&gt; 定義するのと同じインターフェイスを提供するクラス</target>
        </trans-unit>
        <trans-unit id="8e28f9efa48a8311d58b2d51671a5cff0b79b51b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-instance_values&quot;&gt;&lt;code&gt;instance_values&lt;/code&gt;&lt;/a&gt; returns a hash that maps instance variable names without &quot;@&quot; to their corresponding values. Keys are strings:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-instance_values&quot;&gt; &lt;code&gt;instance_values&lt;/code&gt; &lt;/a&gt;は、「@」のないインスタンス変数名を対応する値にマップするハッシュを返します。キーは文字列です：</target>
        </trans-unit>
        <trans-unit id="83778f8bb2b218390999a2216414d88765df2915" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-instance_variable_names&quot;&gt;&lt;code&gt;instance_variable_names&lt;/code&gt;&lt;/a&gt; returns an array. Each name includes the &quot;@&quot; sign.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-instance_variable_names&quot;&gt; &lt;code&gt;instance_variable_names&lt;/code&gt; &lt;/a&gt;は配列を返します。それぞれの名前には「@」記号が含まれています。</target>
        </trans-unit>
        <trans-unit id="97593ca123b5fa134e1de89a1623369dfbe38b08" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-present-3F&quot;&gt;&lt;code&gt;present?&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;!blank?&lt;/code&gt;. This example is taken from &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt;:</source>
          <target state="translated">方法は&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-present-3F&quot;&gt; &lt;code&gt;present?&lt;/code&gt; &lt;/a&gt; &lt;code&gt;!blank?&lt;/code&gt; と同等ですか？。この例は、 &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt; ：から抜粋したものです。</target>
        </trans-unit>
        <trans-unit id="b4d05db4a11b99876a5c2a16edcd12327922b2d2" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-with_options&quot;&gt;&lt;code&gt;with_options&lt;/code&gt;&lt;/a&gt; provides a way to factor out common options in a series of method calls.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-with_options&quot;&gt; &lt;code&gt;with_options&lt;/code&gt; &lt;/a&gt;メソッドは、一連のメソッド呼び出しで一般的なオプションを除外する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="6f9c17b68b3afdf4396eabd741209a2dc4ba5802" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Range.html#method-i-overlaps-3F&quot;&gt;&lt;code&gt;Range#overlaps?&lt;/code&gt;&lt;/a&gt; says whether any two given ranges have non-void intersection:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Range.html#method-i-overlaps-3F&quot;&gt; &lt;code&gt;Range#overlaps?&lt;/code&gt; &lt;/a&gt;与えられた2つの範囲に非ボイド交差があるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="37eab709de9cd444dc9a168cede664380cbc58df" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Regexp.html#method-i-multiline-3F&quot;&gt;&lt;code&gt;multiline?&lt;/code&gt;&lt;/a&gt; says whether a regexp has the &lt;code&gt;/m&lt;/code&gt; flag set, that is, whether the dot matches newlines.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Regexp.html#method-i-multiline-3F&quot;&gt; &lt;code&gt;multiline?&lt;/code&gt; &lt;/a&gt;正規表現に &lt;code&gt;/m&lt;/code&gt; フラグが設定されているかどうか、つまり、ドットが改行と一致するかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="25765e5be6305cd00889838f5f220713c979597a" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-camelize&quot;&gt;&lt;code&gt;camelize&lt;/code&gt;&lt;/a&gt; returns its receiver in camel case:</source>
          <target state="translated">方法&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-camelize&quot;&gt; &lt;code&gt;camelize&lt;/code&gt; は、&lt;/a&gt;キャメルケースにその受信機を返します。</target>
        </trans-unit>
        <trans-unit id="10006c76f77637b0c12c06d471a11da83918cead" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-classify&quot;&gt;&lt;code&gt;classify&lt;/code&gt;&lt;/a&gt; is the inverse of &lt;code&gt;tableize&lt;/code&gt;. It gives you the class name corresponding to a table name:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-classify&quot;&gt; &lt;code&gt;classify&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;tableize&lt;/code&gt; の逆です。テーブル名に対応するクラス名が表示されます。</target>
        </trans-unit>
        <trans-unit id="81a2a0f4e6205fbf9a54f41a00af597eccd4db28" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-constantize&quot;&gt;&lt;code&gt;constantize&lt;/code&gt;&lt;/a&gt; resolves the constant reference expression in its receiver:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-constantize&quot;&gt; &lt;code&gt;constantize&lt;/code&gt; &lt;/a&gt;は、レシーバーの定数参照式を解決します。</target>
        </trans-unit>
        <trans-unit id="7f370a448dc74955ff307f5132c85487f986fce2" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-dasherize&quot;&gt;&lt;code&gt;dasherize&lt;/code&gt;&lt;/a&gt; replaces the underscores in the receiver with dashes:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-dasherize&quot;&gt; &lt;code&gt;dasherize&lt;/code&gt; &lt;/a&gt;メソッドは、レシーバーのアンダースコアをダッシュ​​に置き換えます。</target>
        </trans-unit>
        <trans-unit id="a6d0cf8fdd61c1b357d02992fa1a01b5f9ac5bbc" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-foreign_key&quot;&gt;&lt;code&gt;foreign_key&lt;/code&gt;&lt;/a&gt; gives a foreign key column name from a class name. To do so it demodulizes, underscores, and adds &quot;_id&quot;:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-foreign_key&quot;&gt; &lt;code&gt;foreign_key&lt;/code&gt; &lt;/a&gt;は、クラス名から外部キー列名を指定します。そうするために、それは「_id」を非変調化し、下線を引き、そして追加します：</target>
        </trans-unit>
        <trans-unit id="afd665bdbb2f5cfcbf0161f40c174b33f22d5b58" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-humanize&quot;&gt;&lt;code&gt;humanize&lt;/code&gt;&lt;/a&gt; tweaks an attribute name for display to end users.</source>
          <target state="translated">メソッドの&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-humanize&quot;&gt; &lt;code&gt;humanize&lt;/code&gt; &lt;/a&gt;エンドユーザーへの表示のための属性名を微調整します。</target>
        </trans-unit>
        <trans-unit id="86f7039fb2270b5e42f7ecdfcbb0befc1f15aa6b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-parameterize&quot;&gt;&lt;code&gt;parameterize&lt;/code&gt;&lt;/a&gt; normalizes its receiver in a way that can be used in pretty URLs.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-parameterize&quot;&gt; &lt;code&gt;parameterize&lt;/code&gt; &lt;/a&gt;は、きれいなURLで使用できる方法でレシーバーを正規化します。</target>
        </trans-unit>
        <trans-unit id="0336691ef81dccacdb120a7ca91df0c74effeb6f" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-pluralize&quot;&gt;&lt;code&gt;pluralize&lt;/code&gt;&lt;/a&gt; returns the plural of its receiver:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-pluralize&quot;&gt; &lt;code&gt;pluralize&lt;/code&gt; &lt;/a&gt;メソッドは、その受信者の複数形を返します。</target>
        </trans-unit>
        <trans-unit id="80b6102669c6a659bf608e07041a3c518bad5567" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-remove&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; will remove all occurrences of the pattern:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-remove&quot;&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/a&gt;は、パターンのすべての出現を削除します。</target>
        </trans-unit>
        <trans-unit id="c46836ff01da142902bf881767e118ccf1df1bc8" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-squish&quot;&gt;&lt;code&gt;squish&lt;/code&gt;&lt;/a&gt; strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:</source>
          <target state="translated">方法&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-squish&quot;&gt; &lt;code&gt;squish&lt;/code&gt; &lt;/a&gt;空白を先頭と末尾ストリップ、および単一スペースで空白の代替実行毎：</target>
        </trans-unit>
        <trans-unit id="3c69b14879cb479c724cf35abbee1bf24245da29" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-strip_heredoc&quot;&gt;&lt;code&gt;strip_heredoc&lt;/code&gt;&lt;/a&gt; strips indentation in heredocs.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-strip_heredoc&quot;&gt; &lt;code&gt;strip_heredoc&lt;/code&gt; &lt;/a&gt;は、ヒアドキュメントのインデントを取り除きます。</target>
        </trans-unit>
        <trans-unit id="ddc2d54e3b46414455fe4e79fb39d04443de248b" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-tableize&quot;&gt;&lt;code&gt;tableize&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;underscore&lt;/code&gt; followed by &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-tableize&quot;&gt; &lt;code&gt;tableize&lt;/code&gt; &lt;/a&gt;メソッドは、 &lt;code&gt;underscore&lt;/code&gt; 後に &lt;code&gt;pluralize&lt;/code&gt; 続きます。</target>
        </trans-unit>
        <trans-unit id="d500c31ed587cc52ff907cedd5049f912cf7ea36" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-titleize&quot;&gt;&lt;code&gt;titleize&lt;/code&gt;&lt;/a&gt; capitalizes the words in the receiver:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-titleize&quot;&gt; &lt;code&gt;titleize&lt;/code&gt; &lt;/a&gt;メソッドは、レシーバー内の単語を大文字にします。</target>
        </trans-unit>
        <trans-unit id="0d766d4ec220da853443cfb4af23b11a7e235fbd" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate&quot;&gt;&lt;code&gt;truncate&lt;/code&gt;&lt;/a&gt; returns a copy of its receiver truncated after a given &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate&quot;&gt; &lt;code&gt;truncate&lt;/code&gt; &lt;/a&gt;メソッドは、指定 &lt;code&gt;length&lt;/code&gt; れた長さの後に切り捨てられたレシーバーのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="5f5cf95e1c9f81af90ce3b38f1c3f8ba6aa4cefe" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate_bytes&quot;&gt;&lt;code&gt;truncate_bytes&lt;/code&gt;&lt;/a&gt; returns a copy of its receiver truncated to at most &lt;code&gt;bytesize&lt;/code&gt; bytes:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate_bytes&quot;&gt; &lt;code&gt;truncate_bytes&lt;/code&gt; &lt;/a&gt;は、 &lt;code&gt;bytesize&lt;/code&gt; バイトサイズのバイトに切り捨てられたレシーバーのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="f39ec5a8e52e6f9f7ec6de6443711ad7c9d8e4aa" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate_words&quot;&gt;&lt;code&gt;truncate_words&lt;/code&gt;&lt;/a&gt; returns a copy of its receiver truncated after a given number of words:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-truncate_words&quot;&gt; &lt;code&gt;truncate_words&lt;/code&gt; &lt;/a&gt;は、指定された単語数の後に切り捨てられたレシーバーのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="e98455a7f0340463fe249c782e9664af3346ee03" translate="yes" xml:space="preserve">
          <source>The method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-underscore&quot;&gt;&lt;code&gt;underscore&lt;/code&gt;&lt;/a&gt; goes the other way around, from camel case to paths:</source>
          <target state="translated">メソッドの&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-underscore&quot;&gt; &lt;code&gt;underscore&lt;/code&gt; &lt;/a&gt;は、キャメルケースからパスへと逆になります。</target>
        </trans-unit>
        <trans-unit id="e32772287becf00004ac3c06bca75256d6389810" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Array#deep_dup&lt;/code&gt; duplicates itself and all objects inside recursively with Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Array#map&lt;/code&gt; with sending &lt;code&gt;deep_dup&lt;/code&gt; method to each object inside.</source>
          <target state="translated">メソッド &lt;code&gt;Array#deep_dup&lt;/code&gt; は、それ自体とすべてのオブジェクトをActive Supportメソッド &lt;code&gt;Object#deep_dup&lt;/code&gt; で再帰的に複製します。内部の各オブジェクトに &lt;code&gt;deep_dup&lt;/code&gt; メソッドを送信すると、 &lt;code&gt;Array#map&lt;/code&gt; のように機能します。</target>
        </trans-unit>
        <trans-unit id="c1e33e74fb4fd7f607ac4ec9c062ba47e1d98a83" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Array.wrap&lt;/code&gt; wraps its argument in an array unless it is already an array (or array-like).</source>
          <target state="translated">&lt;code&gt;Array.wrap&lt;/code&gt; メソッドは、すでに配列（または配列のような）でない限り、引数を配列にラップします。</target>
        </trans-unit>
        <trans-unit id="d6b82f431ad6d4eddf847396d46b04b6fd616ec1" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Hash#deep_dup&lt;/code&gt; duplicates itself and all keys and values inside recursively with Active Support method &lt;code&gt;Object#deep_dup&lt;/code&gt;. It works like &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; with sending &lt;code&gt;deep_dup&lt;/code&gt; method to each pair inside.</source>
          <target state="translated">メソッド &lt;code&gt;Hash#deep_dup&lt;/code&gt; は、アクティブサポートメソッド &lt;code&gt;Object#deep_dup&lt;/code&gt; を使用して、メソッド自体とすべてのキーと値を再帰的に複製します。 &lt;code&gt;Enumerator#each_with_object&lt;/code&gt; のように機能し、内部の各ペアに &lt;code&gt;deep_dup&lt;/code&gt; メソッドを送信します。</target>
        </trans-unit>
        <trans-unit id="7de965296f37e83a90fa8fad4aeb58775b5f8602" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Hash#to_query&lt;/code&gt; accepts an optional namespace for the keys:</source>
          <target state="translated">メソッド &lt;code&gt;Hash#to_query&lt;/code&gt; は、キーのオプションの名前空間を受け入れます。</target>
        </trans-unit>
        <trans-unit id="d0eeaa0bdef1015a3d295e8021c903df196a0661" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;Range#overlaps?&lt;/code&gt; says whether any two given ranges have non-void intersection:</source>
          <target state="translated">メソッド &lt;code&gt;Range#overlaps?&lt;/code&gt; 与えられた2つの範囲に交差がないかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="2179f3488c189a7d1b1ae889f5df7a90d0add093" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;acts_like?&lt;/code&gt; provides a way to check whether some class acts like some other class based on a simple convention: a class that provides the same interface as &lt;code&gt;String&lt;/code&gt; defines</source>
          <target state="translated">メソッド &lt;code&gt;acts_like?&lt;/code&gt; いくつかのクラスが単純な規則に基づいて他のクラスのように動作するかどうかを確認する方法を提供します： &lt;code&gt;String&lt;/code&gt; が定義するのと同じインターフェースを提供するクラス</target>
        </trans-unit>
        <trans-unit id="3f8c125e2741bd24b350323c120868d16ec18dbf" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;advance&lt;/code&gt; advances first one month, and then one day, the result is:</source>
          <target state="translated">この方法の &lt;code&gt;advance&lt;/code&gt; 最初の1月進み、その後、1日、結果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="552f54883f3f33b594f06d41ba5b2220bba8453d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;ago&lt;/code&gt; receives a number of seconds as argument and returns a timestamp those many seconds ago from midnight:</source>
          <target state="translated">メソッド &lt;code&gt;ago&lt;/code&gt; は、秒数を引数として受け取り、真夜中から数秒前のタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="8f2e4acf7ddddd85645952fc4aa279e137c99b5a" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;all_day&lt;/code&gt; returns a range representing the whole day of the current time.</source>
          <target state="translated">&lt;code&gt;all_day&lt;/code&gt; メソッドは、現在時刻の1日全体を表す範囲を返します。</target>
        </trans-unit>
        <trans-unit id="541b5c428abe6077b2427df44c06151cabbe2505" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;assert_valid_keys&lt;/code&gt; receives an arbitrary number of arguments, and checks whether the receiver has any key outside that white list. If it does &lt;code&gt;ArgumentError&lt;/code&gt; is raised.</source>
          <target state="translated">メソッド &lt;code&gt;assert_valid_keys&lt;/code&gt; は、任意の数の引数を受け取り、受信者がそのホワイトリスト外のキーを持っているかどうかを確認します。もしそうなら &lt;code&gt;ArgumentError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="91964bd2587b244f8090ac94f24f6de56fc458e7" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;beginning_of_day&lt;/code&gt; returns a timestamp at the beginning of the day (00:00:00):</source>
          <target state="translated">メソッド &lt;code&gt;beginning_of_day&lt;/code&gt; は、日（夜12時00分00秒）の先頭にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="e085bbffe1ea485f880a3af6f70c393c243f7720" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;beginning_of_hour&lt;/code&gt; returns a timestamp at the beginning of the hour (hh:00:00):</source>
          <target state="translated">方法 &lt;code&gt;beginning_of_hour&lt;/code&gt; は時間（00：00：HH）の開始時にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="f577d04c9de8bcd3e4d8ba5950192cbedbcd4c33" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;beginning_of_minute&lt;/code&gt; returns a timestamp at the beginning of the minute (hh:mm:00):</source>
          <target state="translated">方法 &lt;code&gt;beginning_of_minute&lt;/code&gt; は分（：MM：00 HH）の開始時にタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="c36a6bddcb246413376decd5b3e385ac52a3c55d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;camelize&lt;/code&gt; returns its receiver in camel case:</source>
          <target state="translated">&lt;code&gt;camelize&lt;/code&gt; メソッドは、キャメルケースでレシーバーを返します。</target>
        </trans-unit>
        <trans-unit id="50d58e637eefa0c2f54a8097a5a26358508ed881" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;change&lt;/code&gt; allows you to get a new date which is the same as the receiver except for the given year, month, or day:</source>
          <target state="translated">メソッドの &lt;code&gt;change&lt;/code&gt; により、指定した年、月、または日を除いて、レシーバーと同じ新しい日付を取得できます。</target>
        </trans-unit>
        <trans-unit id="c1693ffe243f5ff35dd83e523a87b2b0e6b7ce09" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;change&lt;/code&gt; allows you to get a new datetime which is the same as the receiver except for the given options, which may include &lt;code&gt;:year&lt;/code&gt;, &lt;code&gt;:month&lt;/code&gt;, &lt;code&gt;:day&lt;/code&gt;, &lt;code&gt;:hour&lt;/code&gt;, &lt;code&gt;:min&lt;/code&gt;, &lt;code&gt;:sec&lt;/code&gt;, &lt;code&gt;:offset&lt;/code&gt;, &lt;code&gt;:start&lt;/code&gt;:</source>
          <target state="translated">メソッドの &lt;code&gt;change&lt;/code&gt; により、指定されたオプションを除いて、レシーバーと同じ新しい日時を取得できます。オプションには、 &lt;code&gt;:year&lt;/code&gt; 、 &lt;code&gt;:month&lt;/code&gt; 、 &lt;code&gt;:day&lt;/code&gt; 、 &lt;code&gt;:hour&lt;/code&gt; 、 &lt;code&gt;:min&lt;/code&gt; 、 &lt;code&gt;:sec&lt;/code&gt; 、 &lt;code&gt;:offset&lt;/code&gt; 、 &lt;code&gt;:start&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="c90aa7f827d4f56fea49a7ae34641b299c94c4bd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;class_attribute&lt;/code&gt; declares one or more inheritable class attributes that can be overridden at any level down the hierarchy.</source>
          <target state="translated">&lt;code&gt;class_attribute&lt;/code&gt; メソッドは、階層の下位レベルでオーバーライドできる1つ以上の継承可能なクラス属性を宣言します。</target>
        </trans-unit>
        <trans-unit id="c9e96da64b1b8279c4e0994f0fb0a8adae7dac72" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;classify&lt;/code&gt; is the inverse of &lt;code&gt;tableize&lt;/code&gt;. It gives you the class name corresponding to a table name:</source>
          <target state="translated">&lt;code&gt;classify&lt;/code&gt; メソッドは &lt;code&gt;tableize&lt;/code&gt; の逆です。それはあなたにテーブル名に対応するクラス名を与えます：</target>
        </trans-unit>
        <trans-unit id="078c50f28bde0d9e8cd63a6c910aaaf2320cfc2f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;constantize&lt;/code&gt; resolves the constant reference expression in its receiver:</source>
          <target state="translated">&lt;code&gt;constantize&lt;/code&gt; メソッドは、レシーバーの定数参照式を解決します。</target>
        </trans-unit>
        <trans-unit id="357988408dbb70c115cb0dfc7514cae03b651c01" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;dasherize&lt;/code&gt; replaces the underscores in the receiver with dashes:</source>
          <target state="translated">メソッド &lt;code&gt;dasherize&lt;/code&gt; は、レシーバーの下線をダッシュ​​に置き換えます。</target>
        </trans-unit>
        <trans-unit id="e211c70f6c4329e28772a26b56c394e16d3ce068" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;deep_merge!&lt;/code&gt; performs a deep merge in place.</source>
          <target state="translated">メソッド &lt;code&gt;deep_merge!&lt;/code&gt; 深いマージを実行します。</target>
        </trans-unit>
        <trans-unit id="d78f3750e4c5052b90fcbd5bea5e723036a174b5" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;end_of_day&lt;/code&gt; returns a timestamp at the end of the day (23:59:59):</source>
          <target state="translated">&lt;code&gt;end_of_day&lt;/code&gt; メソッドは、1日の終わり（23:59:59）のタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="d46bf9d09c3a7c7fd408440a7e9a40f95118e29f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;end_of_hour&lt;/code&gt; returns a timestamp at the end of the hour (hh:59:59):</source>
          <target state="translated">メソッド &lt;code&gt;end_of_hour&lt;/code&gt; は、時間の終わり（hh：59：59）のタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="de74d561fab3abfbd50e4756cde750b0a3935f48" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;end_of_minute&lt;/code&gt; returns a timestamp at the end of the minute (hh:mm:59):</source>
          <target state="translated">&lt;code&gt;end_of_minute&lt;/code&gt; メソッドは、分（hh：mm：59）の終わりにタイムスタンプを返します。</target>
        </trans-unit>
        <trans-unit id="0b221ae8dbe130744caad5199d2d97fbc76c565f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;except&lt;/code&gt; returns a hash with the keys in the argument list removed, if present:</source>
          <target state="translated">&lt;code&gt;except&lt;/code&gt; メソッドは、存在する場合、引数リストのキーを削除したハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="aaf6f40b5a5a4af9d91c806cce7c3bbcea4835d2" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; removes and returns the elements for which the block returns a true value. If no block is given, an Enumerator is returned instead.</source>
          <target state="translated">メソッド &lt;code&gt;extract!&lt;/code&gt; ブロックがtrue値を返す要素を削除して返します。ブロックが指定されていない場合は、代わりにEnumeratorが返されます。</target>
        </trans-unit>
        <trans-unit id="99ed6b8b4541116327e8d0e7a6633713b0532871" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; removes and returns the key/value pairs matching the given keys.</source>
          <target state="translated">メソッド &lt;code&gt;extract!&lt;/code&gt; 指定されたキーに一致するキーと値のペアを削除して返します。</target>
        </trans-unit>
        <trans-unit id="0741247d19b528e9a12214261ac26cb44b6ed1c7" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; returns the same subclass of Hash that the receiver is.</source>
          <target state="translated">メソッド &lt;code&gt;extract!&lt;/code&gt; 受信者と同じハッシュのサブクラスを返します。</target>
        </trans-unit>
        <trans-unit id="ea9f782cf4d463d7fa0c6babbe898a4179c215a0" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;extract!&lt;/code&gt; returns the same subclass of Hash, that the receiver is.</source>
          <target state="translated">メソッド &lt;code&gt;extract!&lt;/code&gt; 受信者と同じハッシュのサブクラスを返します。</target>
        </trans-unit>
        <trans-unit id="2ff5d88d672e86390c7f851883bc096da7e53d01" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;foreign_key&lt;/code&gt; gives a foreign key column name from a class name. To do so it demodulizes, underscores, and adds &quot;_id&quot;:</source>
          <target state="translated">&lt;code&gt;foreign_key&lt;/code&gt; メソッドは、クラス名から外部キーカラム名を提供します。これを行うには、「_ id」を復調、アンダースコア、および追加します。</target>
        </trans-unit>
        <trans-unit id="e7a5c875313a703800a91a074d810febde910dd4" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;humanize&lt;/code&gt; tweaks an attribute name for display to end users.</source>
          <target state="translated">メソッドの &lt;code&gt;humanize&lt;/code&gt; エンドユーザーへの表示のための属性名を微調整します。</target>
        </trans-unit>
        <trans-unit id="fb26c0817d6731204de3f5269480a99a26d221bd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;in_groups&lt;/code&gt; splits an array into a certain number of groups. The method returns an array with the groups:</source>
          <target state="translated">メソッド &lt;code&gt;in_groups&lt;/code&gt; は、配列を特定の数のグループに分割します。このメソッドは、グループを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="bcda912a9181a0c10cda3df95ea77faada8fc3fd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;in_groups_of&lt;/code&gt; splits an array into consecutive groups of a certain size. It returns an array with the groups:</source>
          <target state="translated">&lt;code&gt;in_groups_of&lt;/code&gt; メソッドは、配列を特定のサイズの連続したグループに分割します。グループを含む配列を返します。</target>
        </trans-unit>
        <trans-unit id="435c8a187b47719a1cd22951879b4182144227d5" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;index_by&lt;/code&gt; generates a hash with the elements of an enumerable indexed by some key.</source>
          <target state="translated">&lt;code&gt;index_by&lt;/code&gt; メソッドは、いくつかのキーによってインデックスが付けられた列挙可能な要素を使用してハッシュを生成します。</target>
        </trans-unit>
        <trans-unit id="da8b1a27cc1c31e946af6fde23476e92ede82db2" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;index_with&lt;/code&gt; generates a hash with the elements of an enumerable as keys. The value is either a passed default or returned in a block.</source>
          <target state="translated">&lt;code&gt;index_with&lt;/code&gt; メソッドは、列挙可能な要素をキーとして持つハッシュを生成します。値は、渡されたデフォルトか、ブロックで返されます。</target>
        </trans-unit>
        <trans-unit id="d1f20a3ddef2c375b761522691412f7214b57d0f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;instance_values&lt;/code&gt; returns a hash that maps instance variable names without &quot;@&quot; to their corresponding values. Keys are strings:</source>
          <target state="translated">&lt;code&gt;instance_values&lt;/code&gt; メソッドは、「@」なしのインスタンス変数名を対応する値にマッピングするハッシュを返します。キーは文字列です：</target>
        </trans-unit>
        <trans-unit id="c321602f17827d8217a980646e121648d496bb1c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;instance_variable_names&lt;/code&gt; returns an array. Each name includes the &quot;@&quot; sign.</source>
          <target state="translated">&lt;code&gt;instance_variable_names&lt;/code&gt; メソッドは配列を返します。各名前には「@」記号が含まれています。</target>
        </trans-unit>
        <trans-unit id="20ff505780bbd3782af13427c34a1855014975cb" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;many?&lt;/code&gt; is shorthand for &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt;:</source>
          <target state="translated">方法は &lt;code&gt;many?&lt;/code&gt; &lt;code&gt;collection.size &amp;gt; 1&lt;/code&gt; 省略形です。</target>
        </trans-unit>
        <trans-unit id="bb55847e5bf51aa79a7903f73ec506aacf7196a6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;module_parents&lt;/code&gt; calls &lt;code&gt;module_parent&lt;/code&gt; on the receiver and upwards until &lt;code&gt;Object&lt;/code&gt; is reached. The chain is returned in an array, from bottom to top:</source>
          <target state="translated">メソッド &lt;code&gt;module_parents&lt;/code&gt; 呼び出す &lt;code&gt;module_parent&lt;/code&gt; をするまで上向きに受信機にして &lt;code&gt;Object&lt;/code&gt; 到達しました。チェーンは下から上に配列で返されます。</target>
        </trans-unit>
        <trans-unit id="6089bffe83adf640f1613660fa0462ada9ab1360" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;multiline?&lt;/code&gt; says whether a regexp has the &lt;code&gt;/m&lt;/code&gt; flag set, that is, whether the dot matches newlines.</source>
          <target state="translated">メソッド &lt;code&gt;multiline?&lt;/code&gt; 正規表現に &lt;code&gt;/m&lt;/code&gt; フラグが設定されているかどうか、つまりドットが改行と一致するかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="b85ea67c1af5da35bcf6a98d0598b5cd5fe12943" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;multiple_of?&lt;/code&gt; tests whether an integer is multiple of the argument:</source>
          <target state="translated">メソッド &lt;code&gt;multiple_of?&lt;/code&gt; 整数が引数の倍数かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="f15df0993a61ed439f2d1c9e3f00efd157cf7c77" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;next_week&lt;/code&gt; receives a symbol with a day name in English (default is the thread local &lt;code&gt;Date.beginning_of_week&lt;/code&gt;, or &lt;code&gt;config.beginning_of_week&lt;/code&gt;, or &lt;code&gt;:monday&lt;/code&gt;) and it returns the date corresponding to that day.</source>
          <target state="translated">メソッド &lt;code&gt;next_week&lt;/code&gt; は、英語で曜日名の付いたシンボルを受け取り（デフォルトはスレッドローカルの &lt;code&gt;Date.beginning_of_week&lt;/code&gt; 、または &lt;code&gt;config.beginning_of_week&lt;/code&gt; 、または &lt;code&gt;:monday&lt;/code&gt; です）、その日に対応する日付を返します。</target>
        </trans-unit>
        <trans-unit id="a33b8ded9323df6fd86cb09ff5d011f7e28769a0" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;ordinal&lt;/code&gt; returns the ordinal suffix string corresponding to the receiver integer:</source>
          <target state="translated">メソッド &lt;code&gt;ordinal&lt;/code&gt; は、レシーバ整数に対応する序数接尾文字列を返します。</target>
        </trans-unit>
        <trans-unit id="d1761b81eab5a13ce24b2d3f37ede256550af29c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;ordinalize&lt;/code&gt; returns the ordinal string corresponding to the receiver integer. In comparison, note that the &lt;code&gt;ordinal&lt;/code&gt; method returns &lt;strong&gt;only&lt;/strong&gt; the suffix string.</source>
          <target state="translated">メソッド &lt;code&gt;ordinalize&lt;/code&gt; は、レシーバー整数に対応する序数文字列を返します。比較すると、 &lt;code&gt;ordinal&lt;/code&gt; メソッドは接尾辞文字列&lt;strong&gt;のみを&lt;/strong&gt;返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="97392ecc57bbe19c9ee47fe2e7e60d101f006c2d" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;parameterize&lt;/code&gt; normalizes its receiver in a way that can be used in pretty URLs.</source>
          <target state="translated">&lt;code&gt;parameterize&lt;/code&gt; メソッドは、きれいなURLで使用できるようにレシーバーを正規化します。</target>
        </trans-unit>
        <trans-unit id="6e7420cd00a473a7a6d8483f9261f0ddfd51a128" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;pluck&lt;/code&gt; returns an array based on the given key:</source>
          <target state="translated">メソッド &lt;code&gt;pluck&lt;/code&gt; は、指定されたキーに基づいて配列を返します。</target>
        </trans-unit>
        <trans-unit id="9ee6516c7f56f1ba0ed077fbc2e7db598686ac08" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;pluralize&lt;/code&gt; returns the plural of its receiver:</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; メソッドは、そのレシーバの複数形を返します。</target>
        </trans-unit>
        <trans-unit id="41bb7c4e58183037bcfd42551f575ed0b14097d0" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;present?&lt;/code&gt; is equivalent to &lt;code&gt;!blank?&lt;/code&gt;. This example is taken from &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt;:</source>
          <target state="translated">方法は &lt;code&gt;present?&lt;/code&gt; &lt;code&gt;!blank?&lt;/code&gt; と同等ですか？。この例は、 &lt;code&gt;ActionDispatch::Http::Cache::Response&lt;/code&gt; からの抜粋です。</target>
        </trans-unit>
        <trans-unit id="b91d6be6b7e138a340af57a72512784b971a9ee1" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;prev_week&lt;/code&gt; is analogous:</source>
          <target state="translated">メソッド &lt;code&gt;prev_week&lt;/code&gt; も同様です。</target>
        </trans-unit>
        <trans-unit id="f12cfe07736bb5bbc05da705235c306e033463f5" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;redefine_method&lt;/code&gt; prevents such a potential warning, removing the existing method before if needed.</source>
          <target state="translated">メソッド &lt;code&gt;redefine_method&lt;/code&gt; はこのような潜在的な警告を防ぎ、必要に応じて既存のメソッドを削除します。</target>
        </trans-unit>
        <trans-unit id="dd8539a782376af5d21222e2cb75190799a1d16b" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;remove&lt;/code&gt; will remove all occurrences of the pattern:</source>
          <target state="translated">メソッド &lt;code&gt;remove&lt;/code&gt; は、パターンのすべての出現を削除します。</target>
        </trans-unit>
        <trans-unit id="387ce0f8010addda4cde39eee52ccea1d12762fd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;reverse_update&lt;/code&gt; is an alias for &lt;code&gt;reverse_merge!&lt;/code&gt;, explained above.</source>
          <target state="translated">メソッド &lt;code&gt;reverse_update&lt;/code&gt; は、reverse_mergeのエイリアスです &lt;code&gt;reverse_merge!&lt;/code&gt; 、上記で説明。</target>
        </trans-unit>
        <trans-unit id="ff4b75d9e257aba1e8fc283a1b01585233e460b4" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;seconds_since_midnight&lt;/code&gt; returns the number of seconds since midnight:</source>
          <target state="translated">&lt;code&gt;seconds_since_midnight&lt;/code&gt; メソッドは、真夜中からの秒数を返します。</target>
        </trans-unit>
        <trans-unit id="4a0dfce079234958f39d2ac44a20f44086af21e6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;slice!&lt;/code&gt; replaces the hash with only the given keys and returns a hash containing the removed key/value pairs.</source>
          <target state="translated">メソッド &lt;code&gt;slice!&lt;/code&gt; ハッシュを指定されたキーのみに置き換え、削除されたキーと値のペアを含むハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="115efaa72ec871de6e14307a19a958b113979000" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;split&lt;/code&gt; divides an array by a separator and returns the resulting chunks.</source>
          <target state="translated">&lt;code&gt;split&lt;/code&gt; メソッドは、配列をセパレータで分割し、結果のチャンクを返します。</target>
        </trans-unit>
        <trans-unit id="706387e27a1798aff7654f080c37fe4327344e38" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;squish&lt;/code&gt; strips leading and trailing whitespace, and substitutes runs of whitespace with a single space each:</source>
          <target state="translated">メソッド &lt;code&gt;squish&lt;/code&gt; は、先頭と末尾の空白を取り除き、一連の空白をそれぞれ単一のスペースに置き換えます。</target>
        </trans-unit>
        <trans-unit id="f0869d8f033f9cae7ed0fb46925e26e58694dd80" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;stringify_keys&lt;/code&gt; returns a hash that has a stringified version of the keys in the receiver. It does so by sending &lt;code&gt;to_s&lt;/code&gt; to them:</source>
          <target state="translated">&lt;code&gt;stringify_keys&lt;/code&gt; メソッドは、受信者のキーの文字列化されたバージョンを含むハッシュを返します。彼らに &lt;code&gt;to_s&lt;/code&gt; を送ることでそうします：</target>
        </trans-unit>
        <trans-unit id="a2a91721cba9308202438adc6d39cc57e1518bfd" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;strip_heredoc&lt;/code&gt; strips indentation in heredocs.</source>
          <target state="translated">&lt;code&gt;strip_heredoc&lt;/code&gt; メソッドは、ヒアドキュメントのインデントを削除します。</target>
        </trans-unit>
        <trans-unit id="c0907a71fc4ec4c8ff7e86f4c1da60f559bdf3f6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;sum&lt;/code&gt; adds the elements of an enumerable:</source>
          <target state="translated">メソッド &lt;code&gt;sum&lt;/code&gt; は、列挙可能な要素を追加します。</target>
        </trans-unit>
        <trans-unit id="bcd37680102e0da1447d329b81f3e01b33deeae9" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;symbolize_keys&lt;/code&gt; returns a hash that has a symbolized version of the keys in the receiver, where possible. It does so by sending &lt;code&gt;to_sym&lt;/code&gt; to them:</source>
          <target state="translated">symbolize_keysメソッド &lt;code&gt;symbolize_keys&lt;/code&gt; 、可能であれば、レシーバーのキーのシンボルバージョンを含むハッシュを返します。それらに &lt;code&gt;to_sym&lt;/code&gt; を送ることでそうします：</target>
        </trans-unit>
        <trans-unit id="bd6b9963429952cd5d8efa1a81a122b83c576304" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;tableize&lt;/code&gt; is &lt;code&gt;underscore&lt;/code&gt; followed by &lt;code&gt;pluralize&lt;/code&gt;.</source>
          <target state="translated">方法 &lt;code&gt;tableize&lt;/code&gt; はれる &lt;code&gt;underscore&lt;/code&gt; が続く &lt;code&gt;pluralize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4811f4d445cab7099f3493b7e741d51ccb0dfb69" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;titleize&lt;/code&gt; capitalizes the words in the receiver:</source>
          <target state="translated">&lt;code&gt;titleize&lt;/code&gt; メソッドは、レシーバー内の単語を大文字にします。</target>
        </trans-unit>
        <trans-unit id="b25ddab50687e5e7168c2e3221c5982ea48aaa35" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_formatted_s&lt;/code&gt; acts like &lt;code&gt;to_s&lt;/code&gt; by default.</source>
          <target state="translated">メソッド &lt;code&gt;to_formatted_s&lt;/code&gt; は、デフォルトでは &lt;code&gt;to_s&lt;/code&gt; のように動作します。</target>
        </trans-unit>
        <trans-unit id="2800ff6f2b96de9b72d620a5f58ae1e0841c919b" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_s&lt;/code&gt; provides a default specifier of &quot;F&quot;. This means that a simple call to &lt;code&gt;to_s&lt;/code&gt; will result in floating point representation instead of engineering notation:</source>
          <target state="translated">メソッド &lt;code&gt;to_s&lt;/code&gt; は、デフォルトの指定子「F」を提供します。つまり、 &lt;code&gt;to_s&lt;/code&gt; への単純な呼び出しは、エンジニアリング表記ではなく浮動小数点表現になります。</target>
        </trans-unit>
        <trans-unit id="b7c050e5958ce1fe8f9c1bab0bac53bdcf120f3c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_sentence&lt;/code&gt; turns an array into a string containing a sentence that enumerates its items:</source>
          <target state="translated">&lt;code&gt;to_sentence&lt;/code&gt; メソッドは、配列を、項目を列挙する文を含む文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="2524a9e324636fcdd082cb9a29ef299c0ddea118" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;to_xml&lt;/code&gt; returns a string containing an XML representation of its receiver:</source>
          <target state="translated">&lt;code&gt;to_xml&lt;/code&gt; メソッドは、レシーバーのXML表現を含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="59c0bc92f01100a9cc031a421d333b37a09ddef7" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;truncate&lt;/code&gt; returns a copy of its receiver truncated after a given &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="translated">メソッド &lt;code&gt;truncate&lt;/code&gt; は、指定 &lt;code&gt;length&lt;/code&gt; れた長さの後に切り捨てられたレシーバーのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="b1562a387389afb4f581f9b1a1ebd89caf5ecb3c" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;truncate_words&lt;/code&gt; returns a copy of its receiver truncated after a given number of words:</source>
          <target state="translated">メソッド &lt;code&gt;truncate_words&lt;/code&gt; は、指定された単語数の後に切り捨てられたレシーバーのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="770445ffcdb5e5d9f57ab10d842bffa5bd0051ec" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;underscore&lt;/code&gt; goes the other way around, from camel case to paths:</source>
          <target state="translated">メソッドの &lt;code&gt;underscore&lt;/code&gt; は、キャメルケースからパスまで、その逆です。</target>
        </trans-unit>
        <trans-unit id="c982543515f1362bd3befc11f73b8e85e6f34c9f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;utc&lt;/code&gt; gives you the same datetime in the receiver expressed in UTC.</source>
          <target state="translated">メソッド &lt;code&gt;utc&lt;/code&gt; は、UTCで表されたレシーバーで同じ日時を提供します。</target>
        </trans-unit>
        <trans-unit id="a3ce902d2fa93d5680d9025389c8b3d49da865a6" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;weeks_ago&lt;/code&gt; works analogously for weeks:</source>
          <target state="translated">&lt;code&gt;weeks_ago&lt;/code&gt; メソッドは、数週間同様に機能します。</target>
        </trans-unit>
        <trans-unit id="38036a1b218f762f72707ab93f3b1ac4c75cc41e" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;welcome_email&lt;/code&gt; returns an &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object which can then be told to &lt;code&gt;deliver_now&lt;/code&gt; or &lt;code&gt;deliver_later&lt;/code&gt; to send itself out. The &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object is a wrapper around a &lt;code&gt;Mail::Message&lt;/code&gt;. If you want to inspect, alter, or do anything else with the &lt;code&gt;Mail::Message&lt;/code&gt; object you can access it with the &lt;code&gt;message&lt;/code&gt; method on the &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object.</source>
          <target state="translated">メソッド &lt;code&gt;welcome_email&lt;/code&gt; は、 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; オブジェクトを返します。このオブジェクトは、 &lt;code&gt;deliver_now&lt;/code&gt; または &lt;code&gt;deliver_later&lt;/code&gt; に送信するように指示できます。 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; オブジェクトがラッパーである &lt;code&gt;Mail::Message&lt;/code&gt; 。 &lt;code&gt;Mail::Message&lt;/code&gt; オブジェクトを調べたり、変更したり、その他のことをしたい場合は、 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; オブジェクトの &lt;code&gt;message&lt;/code&gt; メソッドを使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="2e30119f0c67cfd57bce9d6914c30134d947806b" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;welcome_email&lt;/code&gt; returns an &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object which can then just be told &lt;code&gt;deliver_now&lt;/code&gt; or &lt;code&gt;deliver_later&lt;/code&gt; to send itself out. The &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object is just a wrapper around a &lt;code&gt;Mail::Message&lt;/code&gt;. If you want to inspect, alter, or do anything else with the &lt;code&gt;Mail::Message&lt;/code&gt; object you can access it with the &lt;code&gt;message&lt;/code&gt; method on the &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object.</source>
          <target state="translated">メソッド &lt;code&gt;welcome_email&lt;/code&gt; は、 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; オブジェクトを返します。このオブジェクトは、 &lt;code&gt;deliver_now&lt;/code&gt; または &lt;code&gt;deliver_later&lt;/code&gt; に自分自身に送信するように指示することができます。 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; オブジェクトは単なるラッパーである &lt;code&gt;Mail::Message&lt;/code&gt; 。 &lt;code&gt;Mail::Message&lt;/code&gt; オブジェクトを使用して検査、変更、またはその他の処理を行う場合は、 &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; オブジェクトの &lt;code&gt;message&lt;/code&gt; メソッドを使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="143476ef54c29a1ec148780dbea92c40c0a25b4e" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;with_indifferent_access&lt;/code&gt; returns an &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; out of its receiver:</source>
          <target state="translated">&lt;code&gt;with_indifferent_access&lt;/code&gt; メソッドは、レシーバーから &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; HashWithIndifferentAccessを返します。</target>
        </trans-unit>
        <trans-unit id="376cd7ee7cb616a24d413450adee82f6527d2b4f" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;with_options&lt;/code&gt; provides a way to factor out common options in a series of method calls.</source>
          <target state="translated">&lt;code&gt;with_options&lt;/code&gt; メソッドは、一連のメソッド呼び出しで共通のオプションを除外する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="d918b0efff2157c8c8e66e095e36340c8d9725bb" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;without&lt;/code&gt; returns a copy of an enumerable with the specified elements removed:</source>
          <target state="translated">&lt;code&gt;without&lt;/code&gt; のメソッドは、指定された要素が削除された列挙可能なオブジェクトのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="749ed452302f0bfc6da535e793254e8dd6d7ddc2" translate="yes" xml:space="preserve">
          <source>The method &lt;code&gt;years_ago&lt;/code&gt; receives a number of years and returns the same date those many years ago:</source>
          <target state="translated">&lt;code&gt;years_ago&lt;/code&gt; メソッドはいくつかの年数を受け取り、何年も前と同じ日付を返します。</target>
        </trans-unit>
        <trans-unit id="b6139bf6204c334a2dca2c4766b4c7e500cf1072" translate="yes" xml:space="preserve">
          <source>The method accepts a block too. If present, the block is evaluated in the context of the controller helper module. This simple call makes the &lt;code&gt;wadus&lt;/code&gt; method available in templates of the enclosing controller:</source>
          <target state="translated">このメソッドはブロックも受け入れます。存在する場合、ブロックはコントローラーヘルパーモジュールのコンテキストで評価されます。この単純な呼び出しにより、 &lt;code&gt;wadus&lt;/code&gt; メソッドを囲んでいるコントローラーのテンプレートで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="4eaf50f86f012b22cbcfd5d0712981b9b5c8c600" translate="yes" xml:space="preserve">
          <source>The method accepts an optional fourth argument to replace existing &lt;code&gt;NULL&lt;/code&gt;s with some other value. Use that one when enabling the constraint if needed, since otherwise those rows would not be valid.</source>
          <target state="translated">このメソッドは、オプションの4番目の引数を受け入れて、既存の &lt;code&gt;NULL&lt;/code&gt; を他の値に置き換えます。必要に応じて制約を有効にするときにそれを使用してください。そうしないと、それらの行が無効になります。</target>
        </trans-unit>
        <trans-unit id="f52bb918e6a1a9bd9c24ca2082d9cf87e5aa096a" translate="yes" xml:space="preserve">
          <source>The method arguments are symbols which correspond to the names of the methods which should be unscoped. The valid arguments are given in &lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt;&lt;code&gt;VALID_UNSCOPING_VALUES&lt;/code&gt;&lt;/a&gt;. The method can also be called with multiple arguments. For example:</source>
          <target state="translated">メソッド引数は、スコープを解除する必要があるメソッドの名前に対応するシンボルです。有効な引数は&lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt; &lt;code&gt;VALID_UNSCOPING_VALUES&lt;/code&gt; で&lt;/a&gt;指定されます。このメソッドは、複数の引数を使用して呼び出すこともできます。例えば：</target>
        </trans-unit>
        <trans-unit id="72a3e85771e7d5da34d4a62058419ff2db1527a9" translate="yes" xml:space="preserve">
          <source>The method arguments are symbols which correspond to the names of the methods which should be unscoped. The valid arguments are given in &lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt;VALID_UNSCOPING_VALUES&lt;/a&gt;. The method can also be called with multiple arguments. For example:</source>
          <target state="translated">メソッドの引数は、スコープを外すべきメソッドの名前に対応するシンボルです。有効な引数は&lt;a href=&quot;querymethods#VALID_UNSCOPING_VALUES&quot;&gt;VALID_UNSCOPING_VALUESで&lt;/a&gt;指定されます。このメソッドは、複数の引数を指定して呼び出すこともできます。例えば：</target>
        </trans-unit>
        <trans-unit id="f29811b2344f3c781cc85f6126a7eba350e8f54e" translate="yes" xml:space="preserve">
          <source>The method can be used in several slightly different ways, depending on how much you wish to rely on Rails to infer automatically from the model how the form should be constructed. For a generic model object, a form can be created by passing &lt;code&gt;form_for&lt;/code&gt; a string or symbol representing the object we are concerned with:</source>
          <target state="translated">このメソッドは、フォームの構築方法をモデルから自動的に推測するためにRailsにどれだけ依存したいかに応じて、いくつかのわずかに異なる方法で使用できます。一般的なモデルオブジェクトの場合、フォームは、対象のオブジェクトを表す文字列またはシンボルに &lt;code&gt;form_for&lt;/code&gt; を渡すことで作成できます。</target>
        </trans-unit>
        <trans-unit id="df59aa5f4379b6a7b3027cf6de35b290d184f6f8" translate="yes" xml:space="preserve">
          <source>The method must be public in the target.</source>
          <target state="translated">メソッドはターゲットで公開されている必要があります。</target>
        </trans-unit>
        <trans-unit id="d6c4a302116d905f51af0710172d864db0198ec2" translate="yes" xml:space="preserve">
          <source>The method name is generated by replacing spaces with underscores. The result does not need to be a valid Ruby identifier though &amp;mdash; the name may contain punctuation characters, etc. That's because in Ruby technically any string may be a method name. This may require use of &lt;code&gt;define_method&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; calls to function properly, but formally there's little restriction on the name.</source>
          <target state="translated">メソッド名は、スペースをアンダースコアに置き換えることによって生成されます。ただし、結果は有効なRuby識別子である必要はありません。名前には句読文字などが含まれる場合があります。これは、Rubyでは技術的には任意の文字列がメソッド名である可能性があるためです。これは、の使用必要な場合があり &lt;code&gt;define_method&lt;/code&gt; をして &lt;code&gt;send&lt;/code&gt; 適切に機能への呼び出しを、しかし、正式名称にはほとんど制限があります。</target>
        </trans-unit>
        <trans-unit id="0ea58e33d4325a5441c0ed44a3d6618cc3feba41" translate="yes" xml:space="preserve">
          <source>The method name is generated by replacing spaces with underscores. The result does not need to be a valid Ruby identifier though, the name may contain punctuation characters etc. That's because in Ruby technically any string may be a method name. This may require use of &lt;code&gt;define_method&lt;/code&gt; and &lt;code&gt;send&lt;/code&gt; calls to function properly, but formally there's little restriction on the name.</source>
          <target state="translated">メソッド名は、スペースをアンダースコアに置き換えて生成されます。ただし、結果は有効なRuby識別子である必要はありません。名前に句読点文字などが含まれている場合があります。これは、Rubyでは技術的に任意の文字列がメソッド名になる可能性があるためです。これには、 &lt;code&gt;define_method&lt;/code&gt; と &lt;code&gt;send&lt;/code&gt; 呼び出しを使用して正しく機能する必要がある場合がありますが、正式には名前に制限はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="3f48950e7a1291930ff3ceba91618afc3d58f76d" translate="yes" xml:space="preserve">
          <source>The method reference callbacks work by specifying a protected or private method available in the object, like this:</source>
          <target state="translated">メソッド参照のコールバックは、以下のようにオブジェクト内で利用可能な protected または private メソッドを指定することで動作します。</target>
        </trans-unit>
        <trans-unit id="4c103e976f66c3afee2e0a77e51963a42f30a430" translate="yes" xml:space="preserve">
          <source>The method reference is the preferred approach to variable layouts and is used like this:</source>
          <target state="translated">メソッドリファレンスは、変数レイアウトの好ましいアプローチであり、このように使用されます。</target>
        </trans-unit>
        <trans-unit id="0177f2d4e9121bd990bbdc6e21ee4939f478d0b6" translate="yes" xml:space="preserve">
          <source>The method simply stores an error message in the flash and redirects to the login form if the user is not logged in. If a &quot;before&quot; filter renders or redirects, the action will not run. If there are additional filters scheduled to run after that filter, they are also cancelled.</source>
          <target state="translated">このメソッドは単にエラーメッセージをフラッシュに保存し、ユーザーがログインしていない場合はログインフォームにリダイレクトします。before」フィルターがレンダリングまたはリダイレクトする場合、アクションは実行されません。そのフィルタの後に追加のフィルタが実行される予定がある場合、それらもキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="e51ca83b78ed3a96cbc5befd362957c1169c765e" translate="yes" xml:space="preserve">
          <source>The method understands qualified table names:</source>
          <target state="translated">このメソッドは、修飾されたテーブル名を理解します。</target>
        </trans-unit>
        <trans-unit id="f0a296b63f2cf5a95d407e53006a436d773bba0e" translate="yes" xml:space="preserve">
          <source>The method will also ensure an HTTP &lt;a href=&quot;../date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt; header for client compatibility.</source>
          <target state="translated">この方法はまた、HTTPのようになります&lt;a href=&quot;../date&quot;&gt; &lt;code&gt;Date&lt;/code&gt; &lt;/a&gt;クライアントとの互換性のためのヘッダを。</target>
        </trans-unit>
        <trans-unit id="c350fc830645f9176dfd3818099b11ae3983bdbf" translate="yes" xml:space="preserve">
          <source>The method will also ensure an HTTP &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; header for client compatibility.</source>
          <target state="translated">このメソッドは、クライアントの互換性のためにHTTP &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt;ヘッダーも保証します。</target>
        </trans-unit>
        <trans-unit id="e7934c859ba3f1bbfef963b0dd18e1eebc036a02" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-second&quot;&gt;&lt;code&gt;second&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-third&quot;&gt;&lt;code&gt;third&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-fourth&quot;&gt;&lt;code&gt;fourth&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-fifth&quot;&gt;&lt;code&gt;fifth&lt;/code&gt;&lt;/a&gt; return the corresponding element, as do &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-second_to_last&quot;&gt;&lt;code&gt;second_to_last&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-third_to_last&quot;&gt;&lt;code&gt;third_to_last&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; are built-in). Thanks to social wisdom and positive constructiveness all around, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-forty_two&quot;&gt;&lt;code&gt;forty_two&lt;/code&gt;&lt;/a&gt; is also available.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-second&quot;&gt; &lt;code&gt;second&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-third&quot;&gt; &lt;code&gt;third&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-fourth&quot;&gt; &lt;code&gt;fourth&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-fifth&quot;&gt; &lt;code&gt;fifth&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-second_to_last&quot;&gt; &lt;code&gt;second_to_last&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-third_to_last&quot;&gt; &lt;code&gt;third_to_last&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;first&lt;/code&gt; および &lt;code&gt;last&lt;/code&gt; が組み込まれている）と同様に、対応する要素を返します。社会的な知恵と前向きな建設性のおかげで、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Array.html#method-i-forty_two&quot;&gt; &lt;code&gt;forty_two&lt;/code&gt; &lt;/a&gt;も利用できます。</target>
        </trans-unit>
        <trans-unit id="0f4268a3f3f72e7bfd7ea9ce837459b402d840ed" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_month&quot;&gt;&lt;code&gt;beginning_of_month&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_month&quot;&gt;&lt;code&gt;end_of_month&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the month:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_month&quot;&gt; &lt;code&gt;beginning_of_month&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_month&quot;&gt; &lt;code&gt;end_of_month&lt;/code&gt; &lt;/a&gt;は、月の初めと終わりの日付を返します。</target>
        </trans-unit>
        <trans-unit id="5bbbb643120063a3302eafe287e3a55134792667" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_quarter&quot;&gt;&lt;code&gt;beginning_of_quarter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_quarter&quot;&gt;&lt;code&gt;end_of_quarter&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the quarter of the receiver's calendar year:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_quarter&quot;&gt; &lt;code&gt;beginning_of_quarter&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_quarter&quot;&gt; &lt;code&gt;end_of_quarter&lt;/code&gt; &lt;/a&gt;は、受信者の暦年の四半期の開始日と終了日を返します。</target>
        </trans-unit>
        <trans-unit id="b7a39f9936b27ee847e67301677097f669a8b309" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_week&quot;&gt;&lt;code&gt;beginning_of_week&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_week&quot;&gt;&lt;code&gt;end_of_week&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the week, respectively. Weeks are assumed to start on Monday, but that can be changed passing an argument, setting thread local &lt;code&gt;Date.beginning_of_week&lt;/code&gt; or &lt;code&gt;config.beginning_of_week&lt;/code&gt;.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_week&quot;&gt; &lt;code&gt;beginning_of_week&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_week&quot;&gt; &lt;code&gt;end_of_week&lt;/code&gt; &lt;/a&gt;は、それぞれ週の始まりと終わりの日付を返します。週は月曜日に始まると想定されていますが、引数を渡してスレッドローカル &lt;code&gt;Date.beginning_of_week&lt;/code&gt; または &lt;code&gt;config.beginning_of_week&lt;/code&gt; を設定して変更できます。</target>
        </trans-unit>
        <trans-unit id="2313909eb086648ffc293b8a000069cf41ee70a4" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_year&quot;&gt;&lt;code&gt;beginning_of_year&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_year&quot;&gt;&lt;code&gt;end_of_year&lt;/code&gt;&lt;/a&gt; return the dates for the beginning and end of the year:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-beginning_of_year&quot;&gt; &lt;code&gt;beginning_of_year&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-end_of_year&quot;&gt; &lt;code&gt;end_of_year&lt;/code&gt; &lt;/a&gt;は、年の初めと終わりの日付を返します。</target>
        </trans-unit>
        <trans-unit id="19aae78de33632f9430ef34c4a1f0fa2d8cea8e3" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-monday&quot;&gt;&lt;code&gt;monday&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-sunday&quot;&gt;&lt;code&gt;sunday&lt;/code&gt;&lt;/a&gt; return the dates for the previous Monday and next Sunday, respectively.</source>
          <target state="translated">&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-monday&quot;&gt; &lt;code&gt;monday&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-sunday&quot;&gt; &lt;code&gt;sunday&lt;/code&gt; &lt;/a&gt;のメソッドは、それぞれ前の月曜日と次の日曜日の日付を返します。</target>
        </trans-unit>
        <trans-unit id="8bc9f6890a4064f7a40ab776d4900a65595e7b6f" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-months_ago&quot;&gt;&lt;code&gt;months_ago&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-months_since&quot;&gt;&lt;code&gt;months_since&lt;/code&gt;&lt;/a&gt; work analogously for months:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-months_ago&quot;&gt; &lt;code&gt;months_ago&lt;/code&gt; &lt;/a&gt;とmonths_sinceは、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateAndTime/Calculations.html#method-i-months_since&quot;&gt; &lt;code&gt;months_since&lt;/code&gt; &lt;/a&gt;同様に機能します。</target>
        </trans-unit>
        <trans-unit id="a89be9d861059d6afe106e651977780cec5f0cd1" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_options&quot;&gt;&lt;code&gt;to_options&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_options-21&quot;&gt;&lt;code&gt;to_options!&lt;/code&gt;&lt;/a&gt; are aliases of &lt;code&gt;symbolize_keys&lt;/code&gt; and &lt;code&gt;symbolize_keys!&lt;/code&gt;, respectively.</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_options&quot;&gt; &lt;code&gt;to_options&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Hash.html#method-i-to_options-21&quot;&gt; &lt;code&gt;to_options!&lt;/code&gt; &lt;/a&gt;別名である &lt;code&gt;symbolize_keys&lt;/code&gt; と &lt;code&gt;symbolize_keys!&lt;/code&gt; 、それぞれ。</target>
        </trans-unit>
        <trans-unit id="a4fe83528af64482eb1c2c0f517513b16f498a1a" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Kernel.html#method-i-silence_warnings&quot;&gt;&lt;code&gt;silence_warnings&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Kernel.html#method-i-enable_warnings&quot;&gt;&lt;code&gt;enable_warnings&lt;/code&gt;&lt;/a&gt; change the value of &lt;code&gt;$VERBOSE&lt;/code&gt; accordingly for the duration of their block, and reset it afterwards:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Kernel.html#method-i-silence_warnings&quot;&gt; &lt;code&gt;silence_warnings&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Kernel.html#method-i-enable_warnings&quot;&gt; &lt;code&gt;enable_warnings&lt;/code&gt; &lt;/a&gt;は、ブロックの期間中、それに応じて &lt;code&gt;$VERBOSE&lt;/code&gt; の値を変更し、後でリセットします。</target>
        </trans-unit>
        <trans-unit id="3b0647dfcd8d7d70703cb0a11190a6cedb68989a" translate="yes" xml:space="preserve">
          <source>The methods &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_date&quot;&gt;&lt;code&gt;to_date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_time&quot;&gt;&lt;code&gt;to_time&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_datetime&quot;&gt;&lt;code&gt;to_datetime&lt;/code&gt;&lt;/a&gt; are basically convenience wrappers around &lt;code&gt;Date._parse&lt;/code&gt;:</source>
          <target state="translated">メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_date&quot;&gt; &lt;code&gt;to_date&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_time&quot;&gt; &lt;code&gt;to_time&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/String.html#method-i-to_datetime&quot;&gt; &lt;code&gt;to_datetime&lt;/code&gt; &lt;/a&gt;は、基本的に &lt;code&gt;Date._parse&lt;/code&gt; の便利なラッパーです。</target>
        </trans-unit>
        <trans-unit id="c7c7f5ee384fe2044ad32d25e79e26d5f3aa690a" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;Range#===&lt;/code&gt;, &lt;code&gt;Range#include?&lt;/code&gt;, and &lt;code&gt;Range#cover?&lt;/code&gt; say whether some value falls between the ends of a given instance:</source>
          <target state="translated">メソッド &lt;code&gt;Range#===&lt;/code&gt; 、 &lt;code&gt;Range#include?&lt;/code&gt; 、および &lt;code&gt;Range#cover?&lt;/code&gt; 特定のインスタンスの両端の間にある値があるかどうかを言う：</target>
        </trans-unit>
        <trans-unit id="d9a7edd36cd3f87a9ac106594572cc990797d90a" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_month&lt;/code&gt; and &lt;code&gt;end_of_month&lt;/code&gt; return the dates for the beginning and end of the month:</source>
          <target state="translated">方法は &lt;code&gt;beginning_of_month&lt;/code&gt; と &lt;code&gt;end_of_month&lt;/code&gt; 月の最初と最後の日付を返します。</target>
        </trans-unit>
        <trans-unit id="b082ddf7d0327c04320194626ffb003ed515c178" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_quarter&lt;/code&gt; and &lt;code&gt;end_of_quarter&lt;/code&gt; return the dates for the beginning and end of the quarter of the receiver's calendar year:</source>
          <target state="translated">方法 &lt;code&gt;beginning_of_quarter&lt;/code&gt; と &lt;code&gt;end_of_quarter&lt;/code&gt; は、受信者の暦年の四半期の最初と最後の日付を返します。</target>
        </trans-unit>
        <trans-unit id="d9a727e15831861050a8ad7462355064dc28ab58" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_week&lt;/code&gt; and &lt;code&gt;end_of_week&lt;/code&gt; return the dates for the beginning and end of the week, respectively. Weeks are assumed to start on Monday, but that can be changed passing an argument, setting thread local &lt;code&gt;Date.beginning_of_week&lt;/code&gt; or &lt;code&gt;config.beginning_of_week&lt;/code&gt;.</source>
          <target state="translated">方法は &lt;code&gt;beginning_of_week&lt;/code&gt; と &lt;code&gt;end_of_week&lt;/code&gt; それぞれ、週の開始と終了の日付を返します。週は月曜日に始まると想定されますが、引数を渡して変更でき、スレッドローカルの &lt;code&gt;Date.beginning_of_week&lt;/code&gt; または &lt;code&gt;config.beginning_of_week&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="bc61fc2dcfd38d754ffc1b03fdf37a7ac79771a6" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;beginning_of_year&lt;/code&gt; and &lt;code&gt;end_of_year&lt;/code&gt; return the dates for the beginning and end of the year:</source>
          <target state="translated">方法 &lt;code&gt;beginning_of_year&lt;/code&gt; と &lt;code&gt;end_of_year&lt;/code&gt; は、今年の最初と最後の日付を返します。</target>
        </trans-unit>
        <trans-unit id="c93442f75ad37d78087c0cd7de4798ce7440226e" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;monday&lt;/code&gt; and &lt;code&gt;sunday&lt;/code&gt; return the dates for the previous Monday and next Sunday, respectively.</source>
          <target state="translated">メソッド &lt;code&gt;monday&lt;/code&gt; と &lt;code&gt;sunday&lt;/code&gt; は、それぞれ前の月曜日と次の日曜日の日付を返します。</target>
        </trans-unit>
        <trans-unit id="101e739f5a98fcc8679ad2d254272635b35eb22b" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;months_ago&lt;/code&gt; and &lt;code&gt;months_since&lt;/code&gt; work analogously for months:</source>
          <target state="translated">メソッド &lt;code&gt;months_ago&lt;/code&gt; および &lt;code&gt;months_since&lt;/code&gt; は、数か月間同様に機能します。</target>
        </trans-unit>
        <trans-unit id="a57bf9a6a89002a3c34cc6c1d424b2ec54e1d27a" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;, &lt;code&gt;fourth&lt;/code&gt;, and &lt;code&gt;fifth&lt;/code&gt; return the corresponding element, as do &lt;code&gt;second_to_last&lt;/code&gt; and &lt;code&gt;third_to_last&lt;/code&gt; (&lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; are built-in). Thanks to social wisdom and positive constructiveness all around, &lt;code&gt;forty_two&lt;/code&gt; is also available.</source>
          <target state="translated">方法は、 &lt;code&gt;second&lt;/code&gt; 、 &lt;code&gt;third&lt;/code&gt; 、 &lt;code&gt;fourth&lt;/code&gt; 、及び &lt;code&gt;fifth&lt;/code&gt; ように行い、対応する要素を返す &lt;code&gt;second_to_last&lt;/code&gt; と &lt;code&gt;third_to_last&lt;/code&gt; （ &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; 内蔵されています）。社会的な知恵と &lt;code&gt;forty_two&lt;/code&gt; 建設的なおかげで、forty_twoも利用できます。</target>
        </trans-unit>
        <trans-unit id="302a64dec0c184391c6bcb15ca258c399575c5b1" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;silence_warnings&lt;/code&gt; and &lt;code&gt;enable_warnings&lt;/code&gt; change the value of &lt;code&gt;$VERBOSE&lt;/code&gt; accordingly for the duration of their block, and reset it afterwards:</source>
          <target state="translated">メソッド &lt;code&gt;silence_warnings&lt;/code&gt; および &lt;code&gt;enable_warnings&lt;/code&gt; は、それらのブロックの期間中、それに応じて &lt;code&gt;$VERBOSE&lt;/code&gt; の値を変更し、後でリセットします。</target>
        </trans-unit>
        <trans-unit id="10ee15491942712a1e41b76c89b0f5f1b22a509f" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;to_date&lt;/code&gt;, &lt;code&gt;to_time&lt;/code&gt;, and &lt;code&gt;to_datetime&lt;/code&gt; are basically convenience wrappers around &lt;code&gt;Date._parse&lt;/code&gt;:</source>
          <target state="translated">メソッド &lt;code&gt;to_date&lt;/code&gt; 、 &lt;code&gt;to_time&lt;/code&gt; 、および &lt;code&gt;to_datetime&lt;/code&gt; は、基本的には &lt;code&gt;Date._parse&lt;/code&gt; の便利なラッパーです。</target>
        </trans-unit>
        <trans-unit id="cbe25a0862b8a2b5ae25688ccd92978edff13bd7" translate="yes" xml:space="preserve">
          <source>The methods &lt;code&gt;to_options&lt;/code&gt; and &lt;code&gt;to_options!&lt;/code&gt; are respectively aliases of &lt;code&gt;symbolize_keys&lt;/code&gt; and &lt;code&gt;symbolize_keys!&lt;/code&gt;.</source>
          <target state="translated">メソッド &lt;code&gt;to_options&lt;/code&gt; および &lt;code&gt;to_options!&lt;/code&gt; それぞれの別名です &lt;code&gt;symbolize_keys&lt;/code&gt; と &lt;code&gt;symbolize_keys!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28acdf93546eacce94f3d9bcd3f859094ac99119" translate="yes" xml:space="preserve">
          <source>The methods Active Record provides to manipulate your database.</source>
          <target state="translated">アクティブレコードは、データベースを操作するためのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="e01fbc4ac2e1415be0e05e3a36a4769e572ae738" translate="yes" xml:space="preserve">
          <source>The methods are:</source>
          <target state="translated">方法は</target>
        </trans-unit>
        <trans-unit id="85ead67c11e5371c2a532edbb9f016817232ba42" translate="yes" xml:space="preserve">
          <source>The methods that are available for generators are covered in the &lt;a href=&quot;#generator-methods&quot;&gt;final section&lt;/a&gt; of this guide.</source>
          <target state="translated">ジェネレーターで使用できるメソッドについては、このガイドの&lt;a href=&quot;#generator-methods&quot;&gt;最後のセクション&lt;/a&gt;で説明しています。</target>
        </trans-unit>
        <trans-unit id="632757f8db9c26f8fc3f69acc6499d156989d659" translate="yes" xml:space="preserve">
          <source>The migration DSL has been expanded to support foreign key definitions. If you've been using the Foreigner gem, you might want to consider removing it. Note that the foreign key support of Rails is a subset of Foreigner. This means that not every Foreigner definition can be fully replaced by its Rails migration DSL counterpart.</source>
          <target state="translated">移行DSLが拡張され、外国人キー定義をサポートするようになりました。Foreigner gemを使っていた場合は、削除を検討したほうがいいかもしれません。Railsの外部キーサポートはForeignerのサブセットであることに注意してください。つまり、すべてのForeigner定義をRailsの移行DSLの対応するもので完全に置き換えることができるわけではありません。</target>
        </trans-unit>
        <trans-unit id="fe354a4973240c9410053a804a2ebd4b4d92ba50" translate="yes" xml:space="preserve">
          <source>The migration method &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table&quot;&gt;&lt;code&gt;create_join_table&lt;/code&gt;&lt;/a&gt; creates an HABTM (has and belongs to many) join table. A typical use would be:</source>
          <target state="translated">移行メソッド&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-create_join_table&quot;&gt; &lt;code&gt;create_join_table&lt;/code&gt; &lt;/a&gt;は、HABTM（多数に属している）結合テーブルを作成します。典型的な使用法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="064ad71d72802cf5173a957b04d66eaf6ae10a67" translate="yes" xml:space="preserve">
          <source>The migration method &lt;code&gt;create_join_table&lt;/code&gt; creates an HABTM (has and belongs to many) join table. A typical use would be:</source>
          <target state="translated">移行メソッド &lt;code&gt;create_join_table&lt;/code&gt; は、HABTM（has and belongs to many）結合テーブルを作成します。典型的な使用法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="46f69d5e49bda7d74e75c9f40f69e27e28ae44b1" translate="yes" xml:space="preserve">
          <source>The migration procedure is as follows:</source>
          <target state="translated">移行の手順は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d18afdf6bffb0d53df16ac23c3fc6603a2497553" translate="yes" xml:space="preserve">
          <source>The migration requires that we &lt;strong&gt;migrate&lt;/strong&gt;, that is, run some Ruby code (living in that &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt;) to modify the schema of our database. Which database? The SQLite3 database that Rails will create for you when we run the &lt;code&gt;bin/rails db:migrate&lt;/code&gt; command. We'll talk more about that command below.</source>
          <target state="translated">移行は、我々が必要としていること&lt;strong&gt;の移行&lt;/strong&gt;であること、（その中に住んでいるいくつかのRubyのコードを実行し、 &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt; 当社のデータベースのスキーマを変更します）。どのデータベース？ &lt;code&gt;bin/rails db:migrate&lt;/code&gt; コマンドを実行したときにRailsが作成するSQLite3データベース。このコマンドについては、以下で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="ab24c1cdb4bc14a36f9680163589fdc69716d944" translate="yes" xml:space="preserve">
          <source>The migration requires that we &lt;strong&gt;migrate&lt;/strong&gt;, that is, run some Ruby code (living in that &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt;) to modify the schema of our database. Which database? The SQLite3 database that Rails will create for you when we run the &lt;code&gt;rails db:migrate&lt;/code&gt; command. We'll talk more about that command below.</source>
          <target state="translated">移行は、我々が必要としていること&lt;strong&gt;の移行&lt;/strong&gt;であること、（その中に住んでいるいくつかのRubyのコードを実行し、 &lt;code&gt;20130717151933_create_high_scores.rb&lt;/code&gt; 当社のデータベースのスキーマを変更します）。どのデータベース？Railsが作成するSQLite3データベースは、 &lt;code&gt;rails db:migrate&lt;/code&gt; コマンドを実行したときに作成されます。このコマンドの詳細については、以下で説明します。</target>
        </trans-unit>
        <trans-unit id="106794560ae8481f1f8e790f3f30a20620d4b2b3" translate="yes" xml:space="preserve">
          <source>The migration version, migration file name, migration class name are available as instance variables in the template to be rendered.</source>
          <target state="translated">移行バージョン、移行ファイル名、移行クラス名は、レンダリングされるテンプレートのインスタンス変数として利用可能です。</target>
        </trans-unit>
        <trans-unit id="264fdcd063a5b992cffc029bb74fd19a7ee3ecc8" translate="yes" xml:space="preserve">
          <source>The migrations paths for a database configuration. If the &lt;code&gt;migrations_paths&lt;/code&gt; key is present in the config, &lt;code&gt;migrations_paths&lt;/code&gt; will return its value.</source>
          <target state="translated">データベース構成の移行パス。場合 &lt;code&gt;migrations_paths&lt;/code&gt; のキーが設定に存在している、 &lt;code&gt;migrations_paths&lt;/code&gt; は、その値を返します。</target>
        </trans-unit>
        <trans-unit id="1ffa60f96218aefefa017b3600936d844a777339" translate="yes" xml:space="preserve">
          <source>The model and scaffold generators will create migrations appropriate for adding a new model. This migration will already contain instructions for creating the relevant table. If you tell Rails what columns you want, then statements for adding these columns will also be created. For example, running:</source>
          <target state="translated">モデルと足場ジェネレーターは、新しいモデルを追加するのに適したマイグレーションを作成します。このマイグレーションには、関連するテーブルを作成するための指示がすでに含まれています。必要なカラムをRailsに伝えると、これらのカラムを追加するためのステートメントも作成されます。例えば、実行すると</target>
        </trans-unit>
        <trans-unit id="249b19b94a2baf19802b3a383ce518c8761e1284" translate="yes" xml:space="preserve">
          <source>The model class method &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; allows you to update and destroy associated records. This is based on the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;_destroy&lt;/code&gt; parameters:</source>
          <target state="translated">モデルクラスメソッド &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; を使用すると、関連するレコードを更新および破棄できます。これは、 &lt;code&gt;id&lt;/code&gt; および &lt;code&gt;_destroy&lt;/code&gt; パラメーターに基づいています。</target>
        </trans-unit>
        <trans-unit id="e14cc259f2fce88b090eb2cb7128b471b333c1e8" translate="yes" xml:space="preserve">
          <source>The model file, &lt;code&gt;app/models/article.rb&lt;/code&gt; is about as simple as it can get:</source>
          <target state="translated">モデルファイル &lt;code&gt;app/models/article.rb&lt;/code&gt; は、取得できるのとほぼ同じくらい簡単です。</target>
        </trans-unit>
        <trans-unit id="eba21083dc8e4e9c25ca1f480fd47c8b083c4073" translate="yes" xml:space="preserve">
          <source>The module object following a &lt;code&gt;module&lt;/code&gt; keyword gets pushed when its body is executed, and popped after it.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; キーワードに続くモジュールオブジェクトは、その本体が実行されるとプッシュされ、その後にポップされます。</target>
        </trans-unit>
        <trans-unit id="83bfde6905a12029da10ae0302da14e944a33572" translate="yes" xml:space="preserve">
          <source>The more generic form can also be used:</source>
          <target state="translated">より一般的な形でもよい。</target>
        </trans-unit>
        <trans-unit id="8749a8b69f507a203077616aca924230b98cbb6b" translate="yes" xml:space="preserve">
          <source>The more prepared statements in use: the more memory your database will require. If your PostgreSQL database is hitting memory limits, try lowering &lt;code&gt;statement_limit&lt;/code&gt; or disabling prepared statements.</source>
          <target state="translated">使用する準備済みステートメントが多いほど、データベースに必要なメモリが多くなります。PostgreSQLデータベースがメモリ制限に達している場合は、 &lt;code&gt;statement_limit&lt;/code&gt; を下げるか、準備されたステートメントを無効にしてください。</target>
        </trans-unit>
        <trans-unit id="559aa9c854f2130ef8fac1dca2f96f39aeb3d7e4" translate="yes" xml:space="preserve">
          <source>The most common XSS language is of course the most popular client-side scripting language JavaScript, often in combination with HTML. &lt;em&gt;Escaping user input is essential&lt;/em&gt;.</source>
          <target state="translated">最も一般的なXSS言語はもちろん、最も人気のあるクライアント側スクリプト言語JavaScriptであり、多くの場合HTMLと組み合わされています。&lt;em&gt;ユーザー入力をエスケープすることが不可欠&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="7cd17334a3478f1d7c2e20e61fa6e2680f80c045" translate="yes" xml:space="preserve">
          <source>The most common commands of the &lt;code&gt;db:&lt;/code&gt; rails namespace are &lt;code&gt;migrate&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt;, and it will pay off to try out all of the migration rails commands (&lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;). &lt;code&gt;bin/rails db:version&lt;/code&gt; is useful when troubleshooting, telling you the current version of the database.</source>
          <target state="translated">&lt;code&gt;db:&lt;/code&gt; rails名前空間の最も一般的なコマンドは &lt;code&gt;migrate&lt;/code&gt; と &lt;code&gt;create&lt;/code&gt; であり、すべての移行railsコマンド（ &lt;code&gt;up&lt;/code&gt; 、 &lt;code&gt;down&lt;/code&gt; 、 &lt;code&gt;redo&lt;/code&gt; 、 &lt;code&gt;reset&lt;/code&gt; ）を試してみると効果があります。 &lt;code&gt;bin/rails db:version&lt;/code&gt; は、トラブルシューティング時に役立ち、データベースの現在のバージョンを通知します。</target>
        </trans-unit>
        <trans-unit id="a394aaf66692ca993ee720ec89c38286621984ad" translate="yes" xml:space="preserve">
          <source>The most common commands of the &lt;code&gt;db:&lt;/code&gt; rails namespace are &lt;code&gt;migrate&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt;, and it will pay off to try out all of the migration rails commands (&lt;code&gt;up&lt;/code&gt;, &lt;code&gt;down&lt;/code&gt;, &lt;code&gt;redo&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;). &lt;code&gt;rails db:version&lt;/code&gt; is useful when troubleshooting, telling you the current version of the database.</source>
          <target state="translated">&lt;code&gt;db:&lt;/code&gt; rails名前空間の最も一般的なコマンドは &lt;code&gt;migrate&lt;/code&gt; と &lt;code&gt;create&lt;/code&gt; であり、すべての移行Railsコマンド（ &lt;code&gt;up&lt;/code&gt; 、 &lt;code&gt;down&lt;/code&gt; 、 &lt;code&gt;redo&lt;/code&gt; 、 &lt;code&gt;reset&lt;/code&gt; ）を試すと効果的です。 &lt;code&gt;rails db:version&lt;/code&gt; は、トラブルシューティングを行うときに役立ち、データベースの現在のバージョンを知らせます。</target>
        </trans-unit>
        <trans-unit id="2d09f26c4b080f0da2d9b5d96ee1a38b054f08f7" translate="yes" xml:space="preserve">
          <source>The most common entry points are message posts, user comments, and guest books, but project titles, document names, and search result pages have also been vulnerable - just about everywhere where the user can input data. But the input does not necessarily have to come from input boxes on web sites, it can be in any URL parameter - obvious, hidden or internal. Remember that the user may intercept any traffic. Applications or client-site proxies make it easy to change requests. There are also other attack vectors like banner advertisements.</source>
          <target state="translated">最も一般的な入力ポイントは、メッセージ投稿、ユーザーコメント、ゲストブックですが、プロジェクトのタイトル、ドキュメント名、検索結果ページなど、ユーザーがデータを入力できるあらゆる場所が脆弱性の対象となっています。しかし、入力は必ずしもWebサイトの入力ボックスからのものである必要はなく、明白なもの、隠されたもの、内部のものなど、あらゆるURLパラメータからのものである可能性があります。ユーザーはあらゆるトラフィックを傍受する可能性があることを忘れないでください。アプリケーションやクライアントサイトのプロキシは、リクエストの変更を容易にします。バナー広告のような他の攻撃ベクターもあります。</target>
        </trans-unit>
        <trans-unit id="445653008345676d9901d54b1dd03fc1df7ab282" translate="yes" xml:space="preserve">
          <source>The most common parameter that a user might tamper with, is the id parameter, as in &lt;code&gt;http://www.domain.com/project/1&lt;/code&gt;, whereas 1 is the id. It will be available in params in the controller. There, you will most likely do something like this:</source>
          <target state="translated">ユーザーが改ざんする可能性のある最も一般的なパラメーターは、 &lt;code&gt;http://www.domain.com/project/1&lt;/code&gt; のようにidパラメーターですが、1はidです。コントローラーのパラメーターで使用できます。そこで、あなたはおそらく次のようなことをするでしょう：</target>
        </trans-unit>
        <trans-unit id="539024df1130477692163b826318e13606156156" translate="yes" xml:space="preserve">
          <source>The most common usage pattern for this method is probably in a migration, when just after creating a table you want to populate it with some default values, eg:</source>
          <target state="translated">このメソッドの最も一般的な使用パターンは、おそらくマイグレーションで、テーブルを作成した直後にデフォルト値を入力したい場合です。</target>
        </trans-unit>
        <trans-unit id="53c94369ca312f2c571a25a01b217c63a4032152" translate="yes" xml:space="preserve">
          <source>The most effective countermeasure is to &lt;em&gt;issue a new session identifier&lt;/em&gt; and declare the old one invalid after a successful login. That way, an attacker cannot use the fixed session identifier. This is a good countermeasure against session hijacking, as well. Here is how to create a new session in Rails:</source>
          <target state="translated">最も効果的な対策は&lt;em&gt;、新しいセッション識別子&lt;/em&gt;を&lt;em&gt;発行し、&lt;/em&gt;ログイン成功後に古いものを無効と宣言することです。このようにして、攻撃者は固定セッション識別子を使用できません。これも、セッションのハイジャックに対する優れた対策です。 Railsで新しいセッションを作成する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ed10c5c1398c3d0f83d0fb9826f7a006d60d6b58" translate="yes" xml:space="preserve">
          <source>The most efficient way to implement low-level caching is using the &lt;code&gt;Rails.cache.fetch&lt;/code&gt; method. This method does both reading and writing to the cache. When passed only a single argument, the key is fetched and value from the cache is returned. If a block is passed, that block will be executed in the event of a cache miss. The return value of the block will be written to the cache under the given cache key, and that return value will be returned. In case of cache hit, the cached value will be returned without executing the block.</source>
          <target state="translated">低レベルのキャッシュを実装する最も効率的な方法は、 &lt;code&gt;Rails.cache.fetch&lt;/code&gt; メソッドを使用することです。このメソッドは、キャッシュの読み取りと書き込みの両方を行います。引数を1つだけ渡すと、キーがフェッチされ、キャッシュから値が返されます。ブロックが渡されると、そのブロックはキャッシュミスの場合に実行されます。ブロックの戻り値は、指定されたキャッシュキーの下のキャッシュに書き込まれ、その戻り値が返されます。キャッシュヒットの場合、キャッシュされた値はブロックを実行せずに返されます。</target>
        </trans-unit>
        <trans-unit id="1bf4622040a1d5fcf3d59cf7f1f8b690e8a3cdf9" translate="yes" xml:space="preserve">
          <source>The most generic helper is &lt;code&gt;select_tag&lt;/code&gt;, which - as the name implies - simply generates the &lt;code&gt;SELECT&lt;/code&gt; tag that encapsulates an options string:</source>
          <target state="translated">最も一般的なヘルパーは &lt;code&gt;select_tag&lt;/code&gt; で、名前が示すように、オプション文字列をカプセル化する &lt;code&gt;SELECT&lt;/code&gt; タグを生成します。</target>
        </trans-unit>
        <trans-unit id="b3bfcdc3e816b4ad131b3a2dfe0a00d3ea806652" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to another datetime is &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-advance&quot;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, and &lt;code&gt;:seconds&lt;/code&gt;, and returns a datetime advanced as much as the present keys indicate.</source>
          <target state="translated">別の日時にジャンプする最も一般的な方法は、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-advance&quot;&gt; &lt;code&gt;advance&lt;/code&gt; &lt;/a&gt;です。このメソッドは、キー &lt;code&gt;:years&lt;/code&gt; 、 &lt;code&gt;:months&lt;/code&gt; 、 &lt;code&gt;:weeks&lt;/code&gt; 、 &lt;code&gt;:days&lt;/code&gt; 、 &lt;code&gt;:hours&lt;/code&gt; 、 &lt;code&gt;:minutes&lt;/code&gt; 、および &lt;code&gt;:seconds&lt;/code&gt; を含むハッシュを受け取り、現在のキーが示すだけ進んだ日時を返します。</target>
        </trans-unit>
        <trans-unit id="0509ac0ca8c10723fb1e7121e2ee0f87534275c0" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to another datetime is &lt;code&gt;advance&lt;/code&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, and &lt;code&gt;:seconds&lt;/code&gt;, and returns a datetime advanced as much as the present keys indicate.</source>
          <target state="translated">別の日時にジャンプする最も一般的な方法は、 &lt;code&gt;advance&lt;/code&gt; です。このメソッドは、キー &lt;code&gt;:years&lt;/code&gt; 、 &lt;code&gt;:months&lt;/code&gt; 、 &lt;code&gt;:weeks&lt;/code&gt; 、 &lt;code&gt;:days&lt;/code&gt; 、 &lt;code&gt;:hours&lt;/code&gt; 、 &lt;code&gt;:minutes&lt;/code&gt; 、および &lt;code&gt;:seconds&lt;/code&gt; を含むハッシュを受け取り、現在のキーが示すだけ進んだ日時を返します。</target>
        </trans-unit>
        <trans-unit id="10fdde72309e5fae6123dcb99ad5f251fa0233e8" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to other days is &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-advance&quot;&gt;&lt;code&gt;advance&lt;/code&gt;&lt;/a&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, and returns a date advanced as much as the present keys indicate:</source>
          <target state="translated">他の日にジャンプする最も一般的な方法は、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Date.html#method-i-advance&quot;&gt; &lt;code&gt;advance&lt;/code&gt; &lt;/a&gt;です。このメソッドは、キー &lt;code&gt;:years&lt;/code&gt; 、 &lt;code&gt;:months&lt;/code&gt; 、 &lt;code&gt;:weeks&lt;/code&gt; 、 &lt;code&gt;:days&lt;/code&gt; のハッシュを受け取り、現在のキーが示すだけ進んだ日付を返します。</target>
        </trans-unit>
        <trans-unit id="12e7e7cea726db9dc19377303f26cc2abd058530" translate="yes" xml:space="preserve">
          <source>The most generic way to jump to other days is &lt;code&gt;advance&lt;/code&gt;. This method receives a hash with keys &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, and returns a date advanced as much as the present keys indicate:</source>
          <target state="translated">他の日にジャンプする最も一般的な方法は &lt;code&gt;advance&lt;/code&gt; です。このメソッドは、 &lt;code&gt;:years&lt;/code&gt; 、 &lt;code&gt;:months&lt;/code&gt; 、 &lt;code&gt;:weeks&lt;/code&gt; 、 &lt;code&gt;:days&lt;/code&gt; のキーを持つハッシュを受け取り、現在のキーが示すだけ進んだ日付を返します。</target>
        </trans-unit>
        <trans-unit id="ab1db0eb26e081fb619f5c2ecda6a3dfcb20b5b0" translate="yes" xml:space="preserve">
          <source>The most important methods of the I18n API are:</source>
          <target state="translated">I18n APIの最も重要なメソッドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4ba9a929bfe627197eb5e19693e6263041543a97" translate="yes" xml:space="preserve">
          <source>The most important of these is the controller file, &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;. Let's take a look at it:</source>
          <target state="translated">これらの中で最も重要なのは、コントローラーファイル &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; です。それを見てみましょう：</target>
        </trans-unit>
        <trans-unit id="de5193516e477d3a63bb08f8e687e1bad99cf2fe" translate="yes" xml:space="preserve">
          <source>The most lightweight way to get &lt;code&gt;blank?&lt;/code&gt; is to cherry-pick the file that defines it.</source>
          <target state="translated">&lt;code&gt;blank?&lt;/code&gt; するための最も軽量な方法は？それを定義するファイルを選択することです。</target>
        </trans-unit>
        <trans-unit id="deaa5c007cdde26cbe743db657315259b43d7a47" translate="yes" xml:space="preserve">
          <source>The most significant part of the reloading process is the Class Unload, where all autoloaded classes are removed, ready to be loaded again. This will occur immediately before either the Run or Complete callback, depending on the &lt;code&gt;reload_classes_only_on_change&lt;/code&gt; setting.</source>
          <target state="translated">リロードプロセスの最も重要な部分は、クラスアンロードです。このクラスアンロードでは、すべての自動ロードされたクラスが削除され、再びロードする準備が整います。これは、 &lt;code&gt;reload_classes_only_on_change&lt;/code&gt; 設定に応じて、RunまたはCompleteコールバックの直前に発生します。</target>
        </trans-unit>
        <trans-unit id="f22b7e6bbaf30a8c9243fc72a0dbaa5e651e526a" translate="yes" xml:space="preserve">
          <source>The most simple negative CAPTCHA is one hidden honeypot field. On the server side, you will check the value of the field: If it contains any text, it must be a bot. Then, you can either ignore the post or return a positive result, but not saving the post to the database. This way the bot will be satisfied and moves on.</source>
          <target state="translated">最もシンプルなネガティブCAPTCHAは、1つの隠れたハニーポットフィールドです。サーバー側では、そのフィールドの値をチェックします。もしテキストが含まれている場合は、ボットでなければなりません。そして、投稿を無視するか、肯定的な結果を返すかのどちらかですが、投稿をデータベースに保存しないようにします。このようにしてボットは満足して次に進みます。</target>
        </trans-unit>
        <trans-unit id="5b08222207f915df820834ca331365d73b1692b3" translate="yes" xml:space="preserve">
          <source>The most usual way of setting (and passing) the locale would be to include it in URL params, as we did in the &lt;code&gt;I18n.with_locale(params[:locale], &amp;amp;action)&lt;/code&gt;&lt;em&gt;around_action&lt;/em&gt; in the first example. We would like to have URLs like &lt;code&gt;www.example.com/books?locale=ja&lt;/code&gt; or &lt;code&gt;www.example.com/ja/books&lt;/code&gt; in this case.</source>
          <target state="translated">最初の例の &lt;code&gt;I18n.with_locale(params[:locale], &amp;amp;action)&lt;/code&gt; &lt;em&gt;around_action&lt;/em&gt;で行ったように、ロケールを設定（および渡す）する最も一般的な方法は、URL paramsに含めることです。この場合、 &lt;code&gt;www.example.com/books?locale=ja&lt;/code&gt; / &lt;code&gt;www.example.com/ja/books&lt;/code&gt; jaまたはwww.example.com/ja/booksのようなURLが必要です。</target>
        </trans-unit>
        <trans-unit id="7e572f11bc576cfa35e26cdda3779b627b91359a" translate="yes" xml:space="preserve">
          <source>The mysql2 and postgresql adapters support setting the transaction isolation level.</source>
          <target state="translated">mysql2 と postgresql アダプタは、トランザクション分離レベルの設定をサポートしています。</target>
        </trans-unit>
        <trans-unit id="7abd2783257ce5c418b69249f67d3cccad19bd9b" translate="yes" xml:space="preserve">
          <source>The name is assumed to be the one of a top-level constant, no matter whether it starts with &amp;ldquo;::&amp;rdquo; or not. No lexical context is taken into account:</source>
          <target state="translated">名前は、「::」で始まるかどうかに関係なく、トップレベルの定数であると想定されます。語彙的文脈は考慮されません：</target>
        </trans-unit>
        <trans-unit id="7682be9c1ac3480a8408c4e7c8381256b4759439" translate="yes" xml:space="preserve">
          <source>The name may be given as a symbol or string. A symbol is tested against the bare constant name, a string is against the fully qualified constant name.</source>
          <target state="translated">名前は記号または文字列として与えられます。記号は素の定数名に対してテストされ、文字列は完全に修飾された定数名に対してテストされます。</target>
        </trans-unit>
        <trans-unit id="ff2cc46757b67b828a3611568ef0999be93f8863" translate="yes" xml:space="preserve">
          <source>The name of children nodes is by default the name of the root node singularized. In the examples above we've seen &quot;contributor&quot; and &quot;object&quot;. The option &lt;code&gt;:children&lt;/code&gt; allows you to set these node names.</source>
          <target state="translated">子ノードの名前は、デフォルトでは、単一化されたルートノードの名前です。上記の例では、「寄稿者」と「オブジェクト」を見てきました。オプション &lt;code&gt;:children&lt;/code&gt; を使用すると、これらのノード名を設定できます。</target>
        </trans-unit>
        <trans-unit id="9c6ce84bb5ee288c0d73a45b947b0bd4d166718a" translate="yes" xml:space="preserve">
          <source>The name of the column records are ordered by if no explicit order clause is used during an ordered finder call. If not set the primary key is used.</source>
          <target state="translated">順序付きファインダーの呼び出し中に明示的な順序句が使用されていない場合、レコードが順序付けられるカラムの名前。設定されていない場合は、主キーが使用されます。</target>
        </trans-unit>
        <trans-unit id="2d5cd10d5efb705d95ff6ef881164cb30052e176" translate="yes" xml:space="preserve">
          <source>The name of the event</source>
          <target state="translated">イベント名</target>
        </trans-unit>
        <trans-unit id="99cde37466813b73e8fdf6722f4504527670a021" translate="yes" xml:space="preserve">
          <source>The name of the file is passed as an argument, and the method yields a file handle opened for writing. Once the block is done &lt;code&gt;atomic_write&lt;/code&gt; closes the file handle and completes its job.</source>
          <target state="translated">ファイルの名前が引数として渡され、メソッドは書き込み用に開かれたファイルハンドルを生成します。ブロックが完了すると、 &lt;code&gt;atomic_write&lt;/code&gt; はファイルハンドルを閉じ、そのジョブを完了します。</target>
        </trans-unit>
        <trans-unit id="0521ba09d337a2d778bfca23d5ae64a4f07775ab" translate="yes" xml:space="preserve">
          <source>The name of the internal metadata table. By default, the value is &lt;code&gt;&quot;ar_internal_metadata&quot;&lt;/code&gt;.</source>
          <target state="translated">内部メタデータテーブルの名前。デフォルトでは、値は &lt;code&gt;&quot;ar_internal_metadata&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="87b9d571692332990b0d9ecc4d38d8bf64d75f30" translate="yes" xml:space="preserve">
          <source>The name of the other model is pluralized when declaring a &lt;code&gt;has_many&lt;/code&gt; association.</source>
          <target state="translated">他のモデルの名前は、 &lt;code&gt;has_many&lt;/code&gt; 関連付けを宣言するときに複数形になります。</target>
        </trans-unit>
        <trans-unit id="fae05eeb96ed23d05d4d24f0db744b426f26af4b" translate="yes" xml:space="preserve">
          <source>The name of the primary key, if one is to be added automatically. Defaults to &lt;code&gt;id&lt;/code&gt;. If &lt;code&gt;:id&lt;/code&gt; is false, then this option is ignored.</source>
          <target state="translated">自動的に追加される場合、主キーの名前。デフォルトは &lt;code&gt;id&lt;/code&gt; です。場合 &lt;code&gt;:id&lt;/code&gt; が偽である場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="da0fc804bd180d28e2d8888d63d2769586922e81" translate="yes" xml:space="preserve">
          <source>The name of the schema migrations table. By default, the value is &lt;code&gt;&quot;schema_migrations&quot;&lt;/code&gt;.</source>
          <target state="translated">スキーマ移行テーブルの名前。デフォルトでは、値は &lt;code&gt;&quot;schema_migrations&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e6c80f6f8b2cab6f8d72af40fb12b078c9f2364a" translate="yes" xml:space="preserve">
          <source>The name of the table that contains the referenced primary key.</source>
          <target state="translated">参照される主キーを含むテーブルの名前。</target>
        </trans-unit>
        <trans-unit id="7b4e2235c7c60d1a2f073929cfea99b7c7914199" translate="yes" xml:space="preserve">
          <source>The name used to generate routing helpers.</source>
          <target state="translated">ルーティングヘルパーの生成に使用する名前です。</target>
        </trans-unit>
        <trans-unit id="3964abe7f918479b2abff91c768cdbbc000a3785" translate="yes" xml:space="preserve">
          <source>The namespace for :controller.</source>
          <target state="translated">コントローラの名前空間。</target>
        </trans-unit>
        <trans-unit id="c0a61dcbd71b123c4388becd07a60ebdedcd55c9" translate="yes" xml:space="preserve">
          <source>The naming convention of controllers in Rails favors pluralization of the last word in the controller's name, although it is not strictly required (e.g. &lt;code&gt;ApplicationController&lt;/code&gt;). For example, &lt;code&gt;ClientsController&lt;/code&gt; is preferable to &lt;code&gt;ClientController&lt;/code&gt;, &lt;code&gt;SiteAdminsController&lt;/code&gt; is preferable to &lt;code&gt;SiteAdminController&lt;/code&gt; or &lt;code&gt;SitesAdminsController&lt;/code&gt;, and so on.</source>
          <target state="translated">Railsでのコントローラーの命名規則では、厳密には必須ではありませんが（例えば &lt;code&gt;ApplicationController&lt;/code&gt; ）、コントローラーの名前の最後の単語の複数形化が優先されます。たとえば、 &lt;code&gt;ClientsController&lt;/code&gt; はClientControllerよりも &lt;code&gt;ClientController&lt;/code&gt; 、 &lt;code&gt;SiteAdminsController&lt;/code&gt; は &lt;code&gt;SiteAdminController&lt;/code&gt; または &lt;code&gt;SitesAdminsController&lt;/code&gt; よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="da43aa56708a046e9d919ba08558af7f2b7c90f6" translate="yes" xml:space="preserve">
          <source>The native Range#=== behavior is untouched.</source>
          <target state="translated">ネイティブのRange#===の動作はそのままです。</target>
        </trans-unit>
        <trans-unit id="01d960ee2f543130c2fa5e0f4bbe3a7d3b4d5d58" translate="yes" xml:space="preserve">
          <source>The native Range#cover? behavior is untouched.</source>
          <target state="translated">ネイティブのRange#cover?の動作はそのままです。</target>
        </trans-unit>
        <trans-unit id="addd76f14ed86b37f8794f1949371e30871af465" translate="yes" xml:space="preserve">
          <source>The native Range#include? behavior is untouched.</source>
          <target state="translated">ネイティブのRange#include?の動作はそのままです。</target>
        </trans-unit>
        <trans-unit id="955570bf5e30a267b95e2b19e01795ab5b90fe19" translate="yes" xml:space="preserve">
          <source>The negative of the &lt;code&gt;Enumerable#include?&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if the collection does not include the object.</source>
          <target state="translated">&lt;code&gt;Enumerable#include?&lt;/code&gt; の否定？。コレクションにオブジェクトが含まれていない場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aa592105289e44cdc2fe7058b0d283c263374192" translate="yes" xml:space="preserve">
          <source>The nesting at the top-level of code interpreted by &lt;code&gt;Kernel#load&lt;/code&gt; is empty unless the &lt;code&gt;load&lt;/code&gt; call receives a true value as second argument, in which case a newly created anonymous module is pushed by Ruby.</source>
          <target state="translated">&lt;code&gt;Kernel#load&lt;/code&gt; によって解釈されるコードのトップレベルでのネストは、 &lt;code&gt;load&lt;/code&gt; 呼び出しが2番目の引数としてtrue値を受信しない限り空です。この場合、新しく作成された匿名モジュールはRubyによってプッシュされます。</target>
        </trans-unit>
        <trans-unit id="44f681ce3d5bf281490d9093acabc279f90b97b0" translate="yes" xml:space="preserve">
          <source>The nesting in (3) consists of two module objects:</source>
          <target state="translated">(3)の入れ子は、2つのモジュールオブジェクトで構成されています。</target>
        </trans-unit>
        <trans-unit id="1f2776db1df9e895a5437fc06cd98a8e3f712806" translate="yes" xml:space="preserve">
          <source>The nesting is an internal stack maintained by the interpreter, and it gets modified according to these rules:</source>
          <target state="translated">ネスティングはインタプリタによって維持される内部スタックであり、これらのルールに従って変更されます。</target>
        </trans-unit>
        <trans-unit id="d8132f087b3a3c8f4dbbe4d6d5c2d07c8a3b1719" translate="yes" xml:space="preserve">
          <source>The new Rails version might have different configuration defaults than the previous version. However, after following the steps described above, your application would still run with configuration defaults from the &lt;em&gt;previous&lt;/em&gt; Rails version. That's because the value for &lt;code&gt;config.load_defaults&lt;/code&gt; in &lt;code&gt;config/application.rb&lt;/code&gt; has not been changed yet.</source>
          <target state="translated">新しいRailsバージョンでは、以前のバージョンとは構成のデフォルトが異なる場合があります。ただし、上記の手順を実行した後でも、アプリケーションは&lt;em&gt;以前の&lt;/em&gt;バージョンのRailsのデフォルト設定で実行されます。これは、 &lt;code&gt;config/application.rb&lt;/code&gt; の &lt;code&gt;config.load_defaults&lt;/code&gt; の値がまだ変更されていないためです。</target>
        </trans-unit>
        <trans-unit id="5cd4f4aaeecefdcd80f1ff388b96a1c0963cfd34" translate="yes" xml:space="preserve">
          <source>The new adjusted credit value is stored in the session.</source>
          <target state="translated">新しい調整されたクレジット値がセッションに保存されます。</target>
        </trans-unit>
        <trans-unit id="3236ac103406c4313c28858fa0a2054906ffe321" translate="yes" xml:space="preserve">
          <source>The new configuration point</source>
          <target state="translated">新しい設定ポイント</target>
        </trans-unit>
        <trans-unit id="0da16999f13727907b8b87c6035cd8e31952aef2" translate="yes" xml:space="preserve">
          <source>The new instance is yielded to the passed block. Typically the block will create some routes using &lt;code&gt;set.draw { match ... }&lt;/code&gt;:</source>
          <target state="translated">新しいインスタンスは、渡されたブロックに委譲されます。通常、ブロックは &lt;code&gt;set.draw { match ... }&lt;/code&gt; を使用していくつかのルートを作成します：</target>
        </trans-unit>
        <trans-unit id="361f89f47f1ce3ba7058a4305e31979330927e55" translate="yes" xml:space="preserve">
          <source>The new method, &lt;code&gt;update&lt;/code&gt;, is used when you want to update a record that already exists, and it accepts a hash containing the attributes that you want to update. As before, if there was an error updating the article we want to show the form back to the user.</source>
          <target state="translated">新しいメソッド &lt;code&gt;update&lt;/code&gt; は、既存のレコードを更新するときに使用され、更新する属性を含むハッシュを受け入れます。以前と同様に、記事の更新中にエラーが発生した場合は、フォームをユーザーに表示します。</target>
        </trans-unit>
        <trans-unit id="6412348bc9179e1b6361749c95aec125c2d79269" translate="yes" xml:space="preserve">
          <source>The new record might not be saved to the database; that depends on whether validations passed or not (just like &lt;code&gt;create&lt;/code&gt;).</source>
          <target state="translated">新しいレコードはデータベースに保存されない可能性があります。これは、検証が成功したかどうかに依存し &lt;code&gt;create&lt;/code&gt; （createと同じです）。</target>
        </trans-unit>
        <trans-unit id="3b0901f800f4c2c35a3db6cb60e5551b6c28b8fd" translate="yes" xml:space="preserve">
          <source>The new route is another &lt;code&gt;get&lt;/code&gt; route, but it has something extra in its path: &lt;code&gt;:id&lt;/code&gt;. This designates a route &lt;em&gt;parameter&lt;/em&gt;. A route parameter captures a segment of the request's path, and puts that value into the &lt;code&gt;params&lt;/code&gt; Hash, which is accessible by the controller action. For example, when handling a request like &lt;code&gt;GET http://localhost:3000/articles/1&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; would be captured as the value for &lt;code&gt;:id&lt;/code&gt;, which would then be accessible as &lt;code&gt;params[:id]&lt;/code&gt; in the &lt;code&gt;show&lt;/code&gt; action of &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="translated">新しいルートは別の &lt;code&gt;get&lt;/code&gt; ルートですが、パスに何か特別なものがあります &lt;code&gt;:id&lt;/code&gt; 。これはルート&lt;em&gt;パラメータを&lt;/em&gt;指定し&lt;em&gt;ます&lt;/em&gt;。ルートパラメーターは、リクエストのパスのセグメントをキャプチャし、その値を &lt;code&gt;params&lt;/code&gt; Hashに配置します。これは、コントローラーアクションからアクセスできます。例えば、のような要求扱うとき &lt;code&gt;GET http://localhost:3000/articles/1&lt;/code&gt; 、 &lt;code&gt;1&lt;/code&gt; の値として捕捉されるであろう &lt;code&gt;:id&lt;/code&gt; 次いでとしてアクセス可能であるように、 &lt;code&gt;params[:id]&lt;/code&gt; における &lt;code&gt;show&lt;/code&gt; の作用 &lt;code&gt;ArticlesController&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74f8325afa2e53ab911c7dd3a1bd0b5d96aac1df" translate="yes" xml:space="preserve">
          <source>The new version updates &lt;code&gt;sanitize&lt;/code&gt;, so it can take a &lt;code&gt;Loofah::Scrubber&lt;/code&gt; for powerful scrubbing. &lt;a href=&quot;https://github.com/flavorjones/loofah#loofahscrubber&quot;&gt;See some examples of scrubbers here&lt;/a&gt;.</source>
          <target state="translated">新しいバージョンでは &lt;code&gt;sanitize&lt;/code&gt; が更新されるため、強力なスクラブには &lt;code&gt;Loofah::Scrubber&lt;/code&gt; が必要になります。&lt;a href=&quot;https://github.com/flavorjones/loofah#loofahscrubber&quot;&gt;ここでスクラバーのいくつかの例を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1894e9581c114e574d8b39a2616de5b78a0f089" translate="yes" xml:space="preserve">
          <source>The next customization on the workflow will be to stop generating stylesheet and test fixture files for scaffolds altogether. We can achieve that by changing our configuration to the following:</source>
          <target state="translated">ワークフローの次のカスタマイズは、足場用のスタイルシートとテストフィクスチャファイルの生成を完全に停止することです。以下のように設定を変更することで実現できます。</target>
        </trans-unit>
        <trans-unit id="c8b49bfc24f4c677b6906642f014ecee042d3e62" translate="yes" xml:space="preserve">
          <source>The next level is to simply load all extensions to &lt;code&gt;Object&lt;/code&gt;. As a rule of thumb, extensions to &lt;code&gt;SomeClass&lt;/code&gt; are available in one shot by loading &lt;code&gt;active_support/core_ext/some_class&lt;/code&gt;.</source>
          <target state="translated">次のレベルは、 &lt;code&gt;Object&lt;/code&gt; のすべての拡張機能を単にロードすることです。経験則として、への拡張 &lt;code&gt;SomeClass&lt;/code&gt; ロードすることによりワンショットで提供されてい &lt;code&gt;active_support/core_ext/some_class&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6a1f1dbc7d882abfb6cfb4b67d27a4e28897661" translate="yes" xml:space="preserve">
          <source>The next line in &lt;code&gt;config/application.rb&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; の次の行は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="890dcab656e3faff6f378319839d5ff9b37f86c6" translate="yes" xml:space="preserve">
          <source>The next problem was MySpace filtering the word &quot;javascript&quot;, so the author used &quot;java&amp;lt;NEWLINE&amp;gt;script&quot; to get around this:</source>
          <target state="translated">次の問題は、MySpaceが「javascript」という単語をフィルタリングすることでした。そのため、著者はこれを回避するために「java &amp;lt;NEWLINE&amp;gt; script」を使用しました。</target>
        </trans-unit>
        <trans-unit id="95abed138dae7b61a5b5608d40b96e6a4ae0a51d" translate="yes" xml:space="preserve">
          <source>The next problem was MySpace filtering the word &lt;code&gt;&quot;javascript&quot;&lt;/code&gt;, so the author used &lt;code&gt;&quot;java&amp;lt;NEWLINE&amp;gt;script&quot;&lt;/code&gt; to get around this:</source>
          <target state="translated">次の問題は、MySpaceが &lt;code&gt;&quot;javascript&quot;&lt;/code&gt; という単語をフィルタリングすることだったので、作成者は &lt;code&gt;&quot;java&amp;lt;NEWLINE&amp;gt;script&quot;&lt;/code&gt; を使用してこれを回避しました。</target>
        </trans-unit>
        <trans-unit id="86ab928a1a7619a09a73390e50d76a97c8e90778" translate="yes" xml:space="preserve">
          <source>The next step is to make the class that represents a &lt;code&gt;User&lt;/code&gt; in the application customizable for the engine. This is because that class may not always be &lt;code&gt;User&lt;/code&gt;, as previously explained. To make this setting customizable, the engine will have a configuration setting called &lt;code&gt;author_class&lt;/code&gt; that will be used to specify which class represents users inside the application.</source>
          <target state="translated">次のステップは、アプリケーションで &lt;code&gt;User&lt;/code&gt; を表すクラスをエンジン用にカスタマイズ可能にすることです。これは、前述のように、そのクラスが常に &lt;code&gt;User&lt;/code&gt; であるとは限らないためです。この設定をカスタマイズ可能にするために、エンジンには、アプリケーション内のユーザーを表すクラスを指定するために使用される &lt;code&gt;author_class&lt;/code&gt; と呼ばれる設定があります。</target>
        </trans-unit>
        <trans-unit id="79e3f57a1b3ee60f1474c6b0b6b6f30307fee9e6" translate="yes" xml:space="preserve">
          <source>The next step is to switch the &lt;code&gt;Blorgh::Article&lt;/code&gt; model over to this new setting. Change the &lt;code&gt;belongs_to&lt;/code&gt; association inside this model (&lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt;) to this:</source>
          <target state="translated">次のステップは、 &lt;code&gt;Blorgh::Article&lt;/code&gt; モデルをこの新しい設定に切り替えることです。このモデル（ &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt; ）内の &lt;code&gt;belongs_to&lt;/code&gt; 関連付けを次のように変更します。</target>
        </trans-unit>
        <trans-unit id="665b7f33f63099c0b1cea4b1fb4ebac3b0e2d737" translate="yes" xml:space="preserve">
          <source>The next thing that changes in isolated engines is the behavior of routes. Normally, when you namespace your controllers, you also need to namespace the related routes. With an isolated engine, the engine's namespace is automatically applied, so you don't need to specify it explicitly in your routes:</source>
          <target state="translated">孤立したエンジンで次に変わるのは、ルートの挙動です。通常、コントローラの名前空間を設定する際には、関連するルートの名前空間も設定する必要があります。隔離されたエンジンでは、エンジンのネームスペースが自動的に適用されるので、ルートで明示的に指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8035be6c63365e5b247a107ff1f6abbe4ff4d98d" translate="yes" xml:space="preserve">
          <source>The nonce is opaque to the client. Composed of &lt;a href=&quot;../../time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt;, and hash of &lt;a href=&quot;../../time&quot;&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/a&gt; with secret key from the Rails session secret generated upon creation of project. Ensures the time cannot be modified by client.</source>
          <target state="translated">ナンスはクライアントに対して不透明です。&lt;a href=&quot;../../time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;、およびプロジェクトの作成時に生成されたRailsセッションシークレットからの秘密鍵を使用した&lt;a href=&quot;../../time&quot;&gt; &lt;code&gt;Time&lt;/code&gt; &lt;/a&gt;ハッシュで構成されます。クライアントが時間を変更できないようにします。</target>
        </trans-unit>
        <trans-unit id="93d819b142e381f44914883470304c3b40e5adf1" translate="yes" xml:space="preserve">
          <source>The nonce is opaque to the client. Composed of &lt;a href=&quot;../../time&quot;&gt;Time&lt;/a&gt;, and hash of &lt;a href=&quot;../../time&quot;&gt;Time&lt;/a&gt; with secret key from the Rails session secret generated upon creation of project. Ensures the time cannot be modified by client.</source>
          <target state="translated">nonceはクライアントに対して不透明です。で構成&lt;a href=&quot;../../time&quot;&gt;時間&lt;/a&gt;、およびハッシュの&lt;a href=&quot;../../time&quot;&gt;時間&lt;/a&gt;プロジェクトの作成時に生成されたRailsのセッションの秘密から秘密鍵を持ちます。クライアントが時刻を変更できないようにします。</target>
        </trans-unit>
        <trans-unit id="d6afe7561df1d98a902707f851ee94efab958e53" translate="yes" xml:space="preserve">
          <source>The number in the middle is the &lt;code&gt;product_id&lt;/code&gt; followed by the timestamp value in the &lt;code&gt;updated_at&lt;/code&gt; attribute of the product record. Rails uses the timestamp value to make sure it is not serving stale data. If the value of &lt;code&gt;updated_at&lt;/code&gt; has changed, a new key will be generated. Then Rails will write a new cache to that key, and the old cache written to the old key will never be used again. This is called key-based expiration.</source>
          <target state="translated">中央の数字は、 &lt;code&gt;product_id&lt;/code&gt; の後に、製品レコードの &lt;code&gt;updated_at&lt;/code&gt; 属性のタイムスタンプ値が続きます。Railsはタイムスタンプ値を使用して、古いデータを提供していないことを確認します。 &lt;code&gt;updated_at&lt;/code&gt; の値が変更された場合、新しいキーが生成されます。次に、Railsはそのキーに新しいキャッシュを書き込み、古いキーに書き込まれた古いキャッシュは二度と使用されません。これはキーベースの有効期限と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="8ee1df042709719100df6be6c3b0a3fd04dc19b3" translate="yes" xml:space="preserve">
          <source>The number of arguments in the signature must match. If the object responds to the method the call is attempted and &lt;code&gt;ArgumentError&lt;/code&gt; is still raised in case of argument mismatch.</source>
          <target state="translated">署名の引数の数は一致する必要があります。オブジェクトがメソッドに応答する場合、呼び出しが試行され、 &lt;code&gt;ArgumentError&lt;/code&gt; が一致しない場合はArgumentErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="505e9d95ab3606901bc6ffa80ead6b281f7cb035" translate="yes" xml:space="preserve">
          <source>The number of iterations that will be done by the partial.</source>
          <target state="translated">パーシャルによって行われる反復の数。</target>
        </trans-unit>
        <trans-unit id="038422c23b9cb97bfa4b6a6b66a4d0be0680f470" translate="yes" xml:space="preserve">
          <source>The number of workers passed is the number of times the process will be forked. You may want to parallelize your local test suite differently from your CI, so an environment variable is provided to be able to easily change the number of workers a test run should use:</source>
          <target state="translated">渡されるワーカーの数は、プロセスがフォークされる回数です。ローカルテストスイートをCIとは異なる方法で並列化したい場合もあるでしょうから、テスト実行で使用するワーカーの数を簡単に変更できる環境変数が用意されています。</target>
        </trans-unit>
        <trans-unit id="33d090a4862daa4700aeb1957ac30a3aad04f48a" translate="yes" xml:space="preserve">
          <source>The number of workers passed to &lt;code&gt;parallelize&lt;/code&gt; determines the number of threads the tests will use. You may want to parallelize your local test suite differently from your CI, so an environment variable is provided to be able to easily change the number of workers a test run should use:</source>
          <target state="translated">&lt;code&gt;parallelize&lt;/code&gt; 渡されるワーカーの数によって、テストが使用するスレッドの数が決まります。ローカルテストスイートをCIとは異なる方法で並列化したい場合があるため、テスト実行で使用するワーカーの数を簡単に変更できるように、環境変数が用意されています。</target>
        </trans-unit>
        <trans-unit id="bec8710416db3a7f64fed68d9b0b0bf55970a04e" translate="yes" xml:space="preserve">
          <source>The object in the &lt;code&gt;params&lt;/code&gt; hash is an instance of &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Http/UploadedFile.html&quot;&gt;&lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt;&lt;/a&gt;. The following snippet saves the uploaded file in &lt;code&gt;#{Rails.root}/public/uploads&lt;/code&gt; under the same name as the original file.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; ハッシュ内のオブジェクトは、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Http/UploadedFile.html&quot;&gt; &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; &lt;/a&gt;インスタンスです。次のスニペットは、アップロードしたファイルを元のファイルと同じ名前で &lt;code&gt;#{Rails.root}/public/uploads&lt;/code&gt; に保存します。</target>
        </trans-unit>
        <trans-unit id="638d1c2387bff55fda430b14e4440039041a5b60" translate="yes" xml:space="preserve">
          <source>The object passed as &lt;code&gt;:model&lt;/code&gt; in &lt;code&gt;form_with&lt;/code&gt; controls the key used in &lt;code&gt;params&lt;/code&gt; to access the form's values. Here the name is &lt;code&gt;article&lt;/code&gt; and so all the inputs have names of the form &lt;code&gt;article[attribute_name]&lt;/code&gt;. Accordingly, in the &lt;code&gt;create&lt;/code&gt; action &lt;code&gt;params[:article]&lt;/code&gt; will be a hash with keys &lt;code&gt;:title&lt;/code&gt; and &lt;code&gt;:body&lt;/code&gt;. You can read more about the significance of input names in chapter &lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;Understanding Parameter Naming Conventions&lt;/a&gt; of this guide.</source>
          <target state="translated">オブジェクトは、として渡された &lt;code&gt;:model&lt;/code&gt; に &lt;code&gt;form_with&lt;/code&gt; に使用されるキーコントロール &lt;code&gt;params&lt;/code&gt; フォームの値にアクセスします。ここでは名前は &lt;code&gt;article&lt;/code&gt; であり、すべての入力は &lt;code&gt;article[attribute_name]&lt;/code&gt; という形式の名前を持っています。したがって、 &lt;code&gt;create&lt;/code&gt; アクションでは、 &lt;code&gt;params[:article]&lt;/code&gt; はキー &lt;code&gt;:title&lt;/code&gt; と &lt;code&gt;:body&lt;/code&gt; を持つハッシュになります。入力名の重要性の詳細については、このガイドの&lt;a href=&quot;#understanding-parameter-naming-conventions&quot;&gt;「パラメーターの命名規則について」の&lt;/a&gt;章を参照してください。</target>
        </trans-unit>
        <trans-unit id="3db7e74818e7069b61951f9db787751ef0935d02" translate="yes" xml:space="preserve">
          <source>The object returned is a relation, which can be further extended.</source>
          <target state="translated">返されるオブジェクトはリレーションであり、さらに拡張することができます。</target>
        </trans-unit>
        <trans-unit id="7ee58bc1aa9442c84125f9312a20866565bb95cb" translate="yes" xml:space="preserve">
          <source>The object which the error belongs to</source>
          <target state="translated">エラーが属するオブジェクト</target>
        </trans-unit>
        <trans-unit id="7ebeb64ea392c06389da82d15b57e2dc0fb1998e" translate="yes" xml:space="preserve">
          <source>The object yielded by &lt;code&gt;fields_for&lt;/code&gt; is a form builder like the one yielded by &lt;code&gt;form_with&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fields_for&lt;/code&gt; によって生成されるオブジェクトは、 &lt;code&gt;form_with&lt;/code&gt; によって生成されるオブジェクトと同様のフォームビルダーです。</target>
        </trans-unit>
        <trans-unit id="fea8f8996397205887d460fe4b147f31a68fa5ae" translate="yes" xml:space="preserve">
          <source>The object yielded by &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; is an instance of &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt;&lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt;&lt;/a&gt;. Form builders encapsulate the notion of displaying form elements for a single object. While you can write helpers for your forms in the usual way, you can also create a subclass of &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt;, and add the helpers there. For example,</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; と &lt;code&gt;fields_for&lt;/code&gt; によって生成されるオブジェクトは、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt; &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; &lt;/a&gt; FormBuilderのインスタンスです。フォームビルダーは、単一のオブジェクトのフォーム要素を表示するという概念をカプセル化します。通常の方法でフォームのヘルパーを作成できますが、 &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; サブクラスを作成し、そこにヘルパーを追加することもできます。例えば、</target>
        </trans-unit>
        <trans-unit id="57072ad448de4139f9cc538a750565d5bae03dd9" translate="yes" xml:space="preserve">
          <source>The object yielded by &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; is an instance of &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt;&lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt;&lt;/a&gt;. Form builders encapsulate the notion of displaying form elements for a single object. While you can write helpers for your forms in the usual way, you can also create subclass &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; and add the helpers there. For example:</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; および &lt;code&gt;fields_for&lt;/code&gt; によって生成されるオブジェクトは、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormBuilder.html&quot;&gt; &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; &lt;/a&gt; FormBuilderのインスタンスです。フォームビルダーは、単一のオブジェクトのフォーム要素を表示するという概念をカプセル化します。通常の方法でフォームのヘルパーを作成できますが、サブクラス &lt;code&gt;ActionView::Helpers::FormBuilder&lt;/code&gt; を作成して、そこにヘルパーを追加することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="3de27dfed2e4c78b35ecc58982517007c169ac2a" translate="yes" xml:space="preserve">
          <source>The only ActiveStorage service that provides this hook so far is GCS.</source>
          <target state="translated">これまでのところ、このフックを提供するActiveStorageサービスはGCSだけです。</target>
        </trans-unit>
        <trans-unit id="caaae6a0029374b4c88ed2f441090956efc2faaa" translate="yes" xml:space="preserve">
          <source>The only catch with using the SCM options is that you have to make your application's directory first, then initialize your SCM, then you can run the &lt;code&gt;rails new&lt;/code&gt; command to generate the basis of your app.</source>
          <target state="translated">SCMオプションを使用する唯一の難点は、最初にアプリケーションのディレクトリを作成し、次にSCMを初期化する必要があります。次に、 &lt;code&gt;rails new&lt;/code&gt; コマンドを実行して、アプリの基礎を生成できます。</target>
        </trans-unit>
        <trans-unit id="7c023b3703738247136fd6b3e082be811c39b62e" translate="yes" xml:space="preserve">
          <source>The only downside to this code is that it requires a round trip to the browser: the browser requested the show action with &lt;code&gt;/books/1&lt;/code&gt; and the controller finds that there are no books, so the controller sends out a 302 redirect response to the browser telling it to go to &lt;code&gt;/books/&lt;/code&gt;, the browser complies and sends a new request back to the controller asking now for the &lt;code&gt;index&lt;/code&gt; action, the controller then gets all the books in the database and renders the index template, sending it back down to the browser which then shows it on your screen.</source>
          <target state="translated">このコードの唯一の欠点は、ブラウザへの往復が必要であることです。ブラウザは &lt;code&gt;/books/1&lt;/code&gt; で showアクションを要求し、コントローラは本がないことを検出したため、コントローラはブラウザに302リダイレクト応答を送信します &lt;code&gt;/books/&lt;/code&gt; に移動するように指示すると、ブラウザーはそれに応じて新しいリクエストをコントローラーに送信し、ここで &lt;code&gt;index&lt;/code&gt; アクションを要求すると、コントローラーはデータベース内のすべてのブックを取得してインデックステンプレートをレンダリングし、それを次に、それを画面に表示するブラウザ。</target>
        </trans-unit>
        <trans-unit id="fc98b0333a36a5de22e2fad582904083f06df014" translate="yes" xml:space="preserve">
          <source>The only exception in &lt;a href=&quot;activemodel&quot;&gt;&lt;code&gt;ActiveModel&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../../activerecord&quot;&gt;&lt;code&gt;ActiveRecord&lt;/code&gt;&lt;/a&gt; is the use of self.build instead of self.new.</source>
          <target state="translated">唯一の例外&lt;a href=&quot;activemodel&quot;&gt; &lt;code&gt;ActiveModel&lt;/code&gt; &lt;/a&gt;ため&lt;a href=&quot;../../activerecord&quot;&gt; &lt;code&gt;ActiveRecord&lt;/code&gt; &lt;/a&gt;self.build代わりのself.newの使用です。</target>
        </trans-unit>
        <trans-unit id="e864bfdb02d383ce40daeb3ce7e75a9c7a05ef9f" translate="yes" xml:space="preserve">
          <source>The only exception in &lt;a href=&quot;activemodel&quot;&gt;ActiveModel&lt;/a&gt; for &lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt; is the use of self.build instead of self.new.</source>
          <target state="translated">&lt;a href=&quot;activemodel&quot;&gt;ActiveModel&lt;/a&gt;での&lt;a href=&quot;../../activerecord&quot;&gt;ActiveRecord&lt;/a&gt;の唯一の例外は、self.newではなくself.buildの使用です。</target>
        </trans-unit>
        <trans-unit id="34c0aabafc22ecd298ab851ec0d24c56c1e88a3c" translate="yes" xml:space="preserve">
          <source>The only folder seen by the world as-is. Contains static files and compiled assets.</source>
          <target state="translated">世界で唯一、そのままの姿で見られるフォルダ。静的ファイルとコンパイルされたアセットが含まれています。</target>
        </trans-unit>
        <trans-unit id="663af767fd7a7f252ce4ee85857ca02667951d37" translate="yes" xml:space="preserve">
          <source>The only option specific to &lt;code&gt;link_to&lt;/code&gt; (&lt;code&gt;:method&lt;/code&gt;) is used as follows:</source>
          <target state="translated">&lt;code&gt;link_to&lt;/code&gt; （ &lt;code&gt;:method&lt;/code&gt; ）に固有の唯一のオプションは、次のように使用されます。</target>
        </trans-unit>
        <trans-unit id="7c0ff2b98d6f31ee4756bfd1d58b0f4832f27608" translate="yes" xml:space="preserve">
          <source>The only way to explicitly not use the connection information in &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; is to specify an explicit URL connection using the &lt;code&gt;&quot;url&quot;&lt;/code&gt; sub key:</source>
          <target state="translated">&lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; の接続情報を明示的に使用しない唯一の方法は、 &lt;code&gt;&quot;url&quot;&lt;/code&gt; サブキーを使用して明示的なURL接続を指定することです。</target>
        </trans-unit>
        <trans-unit id="485f1b08d0393f65ac194833dc19f2f4b02d18c0" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;:prefix&lt;/code&gt; adds a prefix to the name of the generated method. This may be handy for example to get a better name:</source>
          <target state="translated">オプション &lt;code&gt;:prefix&lt;/code&gt; は、生成されたメソッドの名前に接頭辞を追加します。これは、たとえば、より適切な名前を取得するのに便利です。</target>
        </trans-unit>
        <trans-unit id="d676be4f5f3aec25fb5d02ebd5821b65122eba01" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;:private&lt;/code&gt; changes methods scope:</source>
          <target state="translated">オプション &lt;code&gt;:private&lt;/code&gt; はメソッドのスコープを変更します：</target>
        </trans-unit>
        <trans-unit id="ebf24d67cdabeb37ae32a041724d968a479a51ca" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;:separator&lt;/code&gt; can be a regexp:</source>
          <target state="translated">オプション &lt;code&gt;:separator&lt;/code&gt; は正規表現にすることができます：</target>
        </trans-unit>
        <trans-unit id="0490cc17857480b9ef81752f108a7a4d9fbadfb9" translate="yes" xml:space="preserve">
          <source>The option &lt;code&gt;include_root_in_json&lt;/code&gt; controls the top-level behavior of &lt;code&gt;as_json&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;as_json&lt;/code&gt; will emit a single root node named after the object's type. The default value for &lt;code&gt;include_root_in_json&lt;/code&gt; option is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;include_root_in_json&lt;/code&gt; は、 &lt;code&gt;as_json&lt;/code&gt; のトップレベルの動作を制御します。場合は &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;as_json&lt;/code&gt; は、オブジェクトの型にちなんで名付けられた単一のルートノードを放出します。 &lt;code&gt;include_root_in_json&lt;/code&gt; オプションのデフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0ce777a5e57cdf17270d4c689d41bf2c6a2b14b4" translate="yes" xml:space="preserve">
          <source>The option symbols for setting cookies are:</source>
          <target state="translated">クッキーを設定するためのオプション記号は</target>
        </trans-unit>
        <trans-unit id="bc84187c74ec254bde3266c466aa3c582e0b4eff" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;:lock&lt;/code&gt; flag option allows you to lock the reloaded record:</source>
          <target state="translated">オプションの &lt;code&gt;:lock&lt;/code&gt; フラグオプションを使用すると、再ロードされたレコードをロックできます。</target>
        </trans-unit>
        <trans-unit id="336ab459b6485d2886e181144760cc2ad7abeb56" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;if:&lt;/code&gt; argument accepts a truthy/falsy value or an object that responds to &lt;code&gt;.call&lt;/code&gt;. If truthy, then matching warnings will be allowed. If falsey then the method yields to the block without allowing the warning.</source>
          <target state="translated">オプションの &lt;code&gt;if:&lt;/code&gt; 引数は、true / falsy値または &lt;code&gt;.call&lt;/code&gt; に応答するオブジェクトを受け入れます。真実であれば、一致する警告が許可されます。falseの場合、メソッドは警告を許可せずにブロックに譲ります。</target>
        </trans-unit>
        <trans-unit id="ecb1b69daa018b38b7e714147d617a0beace3731" translate="yes" xml:space="preserve">
          <source>The optional envs given as argument and the hash with group dependencies;</source>
          <target state="translated">引数として与えられたオプションのenvと、グループの依存関係を持つハッシュ。</target>
        </trans-unit>
        <trans-unit id="8bad16bbf06e5c49b47b6289efd545cfe8573f00" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;finish&lt;/code&gt; are especially useful if you want multiple workers dealing with the same processing queue. You can make worker 1 handle all the records between id 1 and 9999 and worker 2 handle from 10000 and beyond by setting the &lt;code&gt;:start&lt;/code&gt; and &lt;code&gt;:finish&lt;/code&gt; option on each worker.</source>
          <target state="translated">オプション &lt;code&gt;start&lt;/code&gt; および &lt;code&gt;finish&lt;/code&gt; は、複数のワーカーが同じ処理キューを処理する場合に特に役立ちます。各ワーカーに &lt;code&gt;:start&lt;/code&gt; および &lt;code&gt;:finish&lt;/code&gt; オプションを設定することで、ワーカー1がID 1から9999までのすべてのレコードを処理し、ワーカー2が10000以降のレコードを処理できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="fedec4d892fc12eab521b8368ec8823d40ac4794" translate="yes" xml:space="preserve">
          <source>The options for &lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt;#atom_feed&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt;#atom_feed&lt;/a&gt;のオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a0057ee5f702ab7519d47406e8c77a7e336b856d" translate="yes" xml:space="preserve">
          <source>The options for &lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt;&lt;code&gt;atom_feed&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;atomfeedhelper#method-i-atom_feed&quot;&gt; &lt;code&gt;atom_feed&lt;/code&gt; &lt;/a&gt;のオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="41953f0040392b7d0f4ad2663cc42a50b8be8ed0" translate="yes" xml:space="preserve">
          <source>The options hash is passed to the underlying cache implementation.</source>
          <target state="translated">オプションのハッシュは、基礎となるキャッシュの実装に渡されます。</target>
        </trans-unit>
        <trans-unit id="92b1bd4dfe279a0b6d6f24784cc22f88f3542d92" translate="yes" xml:space="preserve">
          <source>The options map directly to &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; commands.</source>
          <target state="translated">オプションは、&lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt;コマンドに直接マップされます。</target>
        </trans-unit>
        <trans-unit id="b81cb3f36e09679bafae42dc7251254763394afc" translate="yes" xml:space="preserve">
          <source>The options provided when calling `errors#add`</source>
          <target state="translated">errors#add` を呼び出す際に提供されるオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7eeb5a5bc634b08fc4f1b6083706e1781ce77e46" translate="yes" xml:space="preserve">
          <source>The options version of redirect allows you to supply only the parts of the URL which need to change, it also supports interpolation of the path similar to the first example.</source>
          <target state="translated">リダイレクトのオプションバージョンでは、変更が必要なURLの部分だけを指定することができ、最初の例と同様にパスの補間もサポートしています。</target>
        </trans-unit>
        <trans-unit id="45cc4dd11762c701415947a3cd200605db900701" translate="yes" xml:space="preserve">
          <source>The order in which files are eager loaded is undefined.</source>
          <target state="translated">ファイルが熱心に読み込まれる順序は未定義です。</target>
        </trans-unit>
        <trans-unit id="338f8ced7409f9b6ec13ebf9eab9b58b6549e163" translate="yes" xml:space="preserve">
          <source>The order in which helpers from more than one directory are loaded has changed in Rails 4.0. Previously, they were gathered and then sorted alphabetically. After upgrading to Rails 4.0, helpers will preserve the order of loaded directories and will be sorted alphabetically only within each directory. Unless you explicitly use the &lt;code&gt;helpers_path&lt;/code&gt; parameter, this change will only impact the way of loading helpers from engines. If you rely on the ordering, you should check if correct methods are available after upgrade. If you would like to change the order in which engines are loaded, you can use &lt;code&gt;config.railties_order=&lt;/code&gt; method.</source>
          <target state="translated">Rails 4.0では、複数のディレクトリからヘルパーがロードされる順序が変更されました。以前は、それらは収集され、アルファベット順に並べ替えられていました。Rails 4.0へのアップグレード後、ヘルパーはロードされたディレクトリの順序を保持し、各ディレクトリ内でのみアルファベット順にソートされます。 &lt;code&gt;helpers_path&lt;/code&gt; パラメータを明示的に使用しない限り、この変更はエンジンからヘルパーをロードする方法にのみ影響します。注文に依存している場合は、アップグレード後に正しい方法が利用可能かどうかを確認する必要があります。エンジンがロードされる順序を変更したい場合は、 &lt;code&gt;config.railties_order=&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="7f79a6fadd87c66fa259266c738bf34142097f62" translate="yes" xml:space="preserve">
          <source>The order in which jobs are processed can be configured differently depending on the adapter.</source>
          <target state="translated">ジョブの処理順序は、アダプタによって異なる設定が可能です。</target>
        </trans-unit>
        <trans-unit id="4660c5ab3c3d9ae3dd6bf0c0e1eaefdf8ef89ec0" translate="yes" xml:space="preserve">
          <source>The order in which these classes are returned is unspecified.</source>
          <target state="translated">これらのクラスが返される順序は指定されていません。</target>
        </trans-unit>
        <trans-unit id="80069d6fee26801de2e5e79b49b962b023fa71f9" translate="yes" xml:space="preserve">
          <source>The order of the parts getting inserted is determined by the &lt;code&gt;:parts_order&lt;/code&gt; inside of the &lt;code&gt;ActionMailer::Base.default&lt;/code&gt; method.</source>
          <target state="translated">挿入されるパーツの順序は、 &lt;code&gt;ActionMailer::Base.default&lt;/code&gt; メソッド内の &lt;code&gt;:parts_order&lt;/code&gt; によって決定されます。</target>
        </trans-unit>
        <trans-unit id="e2922c4f0610a60fd83d95bc4625e590fe1de4c8" translate="yes" xml:space="preserve">
          <source>The other common option to configure is the log tags applied to the per-connection logger. Here's an example that uses the user account id if available, else &quot;no-account&quot; while tagging:</source>
          <target state="translated">他の一般的な設定オプションは、接続ごとのロガーに適用されるログタグです。ここでは、利用可能な場合はユーザーアカウントIDを使用し、タグ付けの間は「アカウントなし」を使用する例を示しています。</target>
        </trans-unit>
        <trans-unit id="b590272dbc4291a5ec0f0a787d5da3c74a48aa22" translate="yes" xml:space="preserve">
          <source>The other option for compressing CSS if you have the sass-rails gem installed is</source>
          <target state="translated">sass-rails gemがインストールされている場合、CSSを圧縮するためのもう一つのオプションは</target>
        </trans-unit>
        <trans-unit id="8f9ca12326137875e63ad6771e8cba598bbeb967" translate="yes" xml:space="preserve">
          <source>The output tempfile is opened in the directory returned by &lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt;&lt;code&gt;tmpdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">出力一時ファイルは、&lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt; &lt;code&gt;tmpdir&lt;/code&gt; &lt;/a&gt;によって返されるディレクトリで開かれます。</target>
        </trans-unit>
        <trans-unit id="196e3e845bbd8998ec86973e62e45a7a873a74bc" translate="yes" xml:space="preserve">
          <source>The output tempfile is opened in the directory returned by &lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt;tmpdir&lt;/a&gt;.</source>
          <target state="translated">出力一時ファイルは、&lt;a href=&quot;previewer#method-i-tmpdir&quot;&gt;tmpdir&lt;/a&gt;によって返されたディレクトリで開かれます。</target>
        </trans-unit>
        <trans-unit id="781ad50fc530a421e9d27dbfa906b4aebe4123b2" translate="yes" xml:space="preserve">
          <source>The parameters in the forms are accessible in controllers according to their name nesting. So inputs named &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;post[title]&lt;/code&gt; are accessible as &lt;code&gt;params[:title]&lt;/code&gt; and &lt;code&gt;params[:post][:title]&lt;/code&gt; respectively.</source>
          <target state="translated">フォームのパラメーターは、名前のネストに従ってコントローラーでアクセスできます。したがって、 &lt;code&gt;title&lt;/code&gt; と &lt;code&gt;post[title]&lt;/code&gt; という名前の入力には、それぞれ &lt;code&gt;params[:title]&lt;/code&gt; と &lt;code&gt;params[:post][:title]&lt;/code&gt; としてアクセスできます。</target>
        </trans-unit>
        <trans-unit id="7acce9bd0f8ebeb41299d3c5d39790821251f354" translate="yes" xml:space="preserve">
          <source>The params hash has a nested person value, which can therefore be accessed with &lt;code&gt;params[:person]&lt;/code&gt; in the controller.</source>
          <target state="translated">paramsハッシュにはネストされたperson値があるため、コントローラーの &lt;code&gt;params[:person]&lt;/code&gt; でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b1f382907f48466d6409760d407191f01637a0f9" translate="yes" xml:space="preserve">
          <source>The params object created when this form is submitted would look like:</source>
          <target state="translated">このフォームが送信されたときに作成される params オブジェクトは次のようになります。</target>
        </trans-unit>
        <trans-unit id="a22d4f278f8aeadd352f595fa70b33907e1f9099" translate="yes" xml:space="preserve">
          <source>The parent namespace, &quot;A&quot;, may not reflect nesting at a given spot.</source>
          <target state="translated">親の名前空間「A」は、指定されたスポットでのネスティングを反映していない場合があります。</target>
        </trans-unit>
        <trans-unit id="6ea5a8450dc660e2360062956f4fc310b23802e1" translate="yes" xml:space="preserve">
          <source>The parent of top-level and anonymous modules is &lt;a href=&quot;object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">トップレベルの匿名モジュールの親は&lt;a href=&quot;object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="fa88e48a48c300647e152fdf64f231b79f2e6cac" translate="yes" xml:space="preserve">
          <source>The parent of top-level and anonymous modules is &lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt;.</source>
          <target state="translated">トップレベルの匿名モジュールの親は&lt;a href=&quot;object&quot;&gt;Object&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e70e4385028599bc0890d172e091f651173988f3" translate="yes" xml:space="preserve">
          <source>The path prefix for the routes.</source>
          <target state="translated">ルートのパスプレフィックス。</target>
        </trans-unit>
        <trans-unit id="8a2dd5a0b629cf6bb84f63e15d0a368551d1b4f3" translate="yes" xml:space="preserve">
          <source>The path to the schema cache dump file for a database. If omitted, the filename will be read from ENV or a default will be derived.</source>
          <target state="translated">データベースのスキーマキャッシュダンプファイルへのパス。省略された場合は、ENVからファイル名が読み込まれるか、デフォルトが導出されます。</target>
        </trans-unit>
        <trans-unit id="8b49906b65248bb2a02d7efa1852cdde693d1597" translate="yes" xml:space="preserve">
          <source>The pattern used to match explicit dependencies is &lt;code&gt;/# Template
Dependency: (\S+)/&lt;/code&gt;, so it's important that you type it out just so. You can only declare one template dependency per line.</source>
          <target state="translated">明示的な依存関係を照合するために使用されるパターンは &lt;code&gt;/# Template Dependency: (\S+)/&lt;/code&gt; なので、正確に入力することが重要です。1行につき1つのテンプレート依存関係のみを宣言できます。</target>
        </trans-unit>
        <trans-unit id="a9e9c2775512158c82915ce14fd279245dc64fea" translate="yes" xml:space="preserve">
          <source>The payload (described in future sections)</source>
          <target state="translated">ペイロード(後述)</target>
        </trans-unit>
        <trans-unit id="202c79dce79999d668dd4c269eaef15bd452360a" translate="yes" xml:space="preserve">
          <source>The payload (described in previous sections)</source>
          <target state="translated">ペイロード(前のセクションで説明した</target>
        </trans-unit>
        <trans-unit id="19698fc3977432b8ba532562866f2175617a2f1e" translate="yes" xml:space="preserve">
          <source>The permitted scalar types are &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;NilClass&lt;/code&gt;, &lt;code&gt;Numeric&lt;/code&gt;, &lt;code&gt;TrueClass&lt;/code&gt;, &lt;code&gt;FalseClass&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;StringIO&lt;/code&gt;, &lt;code&gt;IO&lt;/code&gt;, &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt;, and &lt;code&gt;Rack::Test::UploadedFile&lt;/code&gt;.</source>
          <target state="translated">許可されているスカラー型は、 &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; 、 &lt;code&gt;NilClass&lt;/code&gt; 、 &lt;code&gt;Numeric&lt;/code&gt; 、 &lt;code&gt;TrueClass&lt;/code&gt; 、 &lt;code&gt;FalseClass&lt;/code&gt; 、 &lt;code&gt;Date&lt;/code&gt; 、 &lt;code&gt;Time&lt;/code&gt; 、 &lt;code&gt;DateTime&lt;/code&gt; 、 &lt;code&gt;StringIO&lt;/code&gt; 、 &lt;code&gt;IO&lt;/code&gt; 、 &lt;code&gt;ActionDispatch::Http::UploadedFile&lt;/code&gt; 、および &lt;code&gt;Rack::Test::UploadedFile&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0d9fe577f207f6e519a775e2220ac855388fee63" translate="yes" xml:space="preserve">
          <source>The phrase &amp;ldquo;Updating salaries&amp;hellip;&amp;rdquo; would then be printed, along with the benchmark for the block when the block completes.</source>
          <target state="translated">ブロックが完了すると、「給与を更新しています...」というフレーズがブロックのベンチマークと共に印刷されます。</target>
        </trans-unit>
        <trans-unit id="211a16b14e6131fc9047c75ee343534532a31b7c" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; seconds), then the pool forcefully clears the cache and reloads connections without any regard for other connection owning threads.</source>
          <target state="translated">プールは最初にすべての接続の所有権を取得しようとします。タイムアウト間隔（デフォルトの継続時間は &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; 秒）内にこれを実行できない場合、プールはキャッシュを強制的にクリアし、他の接続所有スレッドを考慮せずに接続をリロードします。</target>
        </trans-unit>
        <trans-unit id="b737fd02684471a726d9203f4d5534cf0b4a32c7" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; seconds), then the pool is forcefully disconnected without any regard for other connection owning threads.</source>
          <target state="translated">プールは最初にすべての接続の所有権を取得しようとします。タイムアウト間隔（デフォルトの継続時間は &lt;code&gt;spec.config[:checkout_timeout] * 2&lt;/code&gt; 秒）内にこれを実行できない場合、プールは、他の接続所有スレッドに関係なく強制的に切断されます。</target>
        </trans-unit>
        <trans-unit id="043ef0651a5185dbb1d4310ac69dd97001b88323" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.db_config.checkout_timeout * 2&lt;/code&gt; seconds), then the pool forcefully clears the cache and reloads connections without any regard for other connection owning threads.</source>
          <target state="translated">プールは最初にすべての接続の所有権を取得しようとします。タイムアウト間隔（デフォルトの期間は &lt;code&gt;spec.db_config.checkout_timeout * 2&lt;/code&gt; 秒）内にこれを実行できない場合、プールは他の接続所有スレッドに関係なく、キャッシュを強制的にクリアし、接続を再ロードします。</target>
        </trans-unit>
        <trans-unit id="928e74f739977016b03bc6c121a2e6a2302ec5ff" translate="yes" xml:space="preserve">
          <source>The pool first tries to gain ownership of all connections. If unable to do so within a timeout interval (default duration is &lt;code&gt;spec.db_config.checkout_timeout * 2&lt;/code&gt; seconds), then the pool is forcefully disconnected without any regard for other connection owning threads.</source>
          <target state="translated">プールは最初にすべての接続の所有権を取得しようとします。タイムアウト間隔（デフォルトの期間は &lt;code&gt;spec.db_config.checkout_timeout * 2&lt;/code&gt; 秒）内にこれを行うことができない場合、他の接続所有スレッドに関係なく、プールは強制的に切断されます。</target>
        </trans-unit>
        <trans-unit id="0b9aa36314226d9fc2457ceacd68160dd0193c9a" translate="yes" xml:space="preserve">
          <source>The popular Apache web server has an option called DocumentRoot. This is the home directory of the web site, everything in this directory tree will be served by the web server. If there are files with a certain file name extension, the code in it will be executed when requested (might require some options to be set). Examples for this are PHP and CGI files. Now think of a situation where an attacker uploads a file &quot;file.cgi&quot; with code in it, which will be executed when someone downloads the file.</source>
          <target state="translated">人気のあるApacheウェブサーバには、DocumentRootと呼ばれるオプションがあります。これはウェブサイトのホームディレクトリで、このディレクトリツリー内のすべてのものがウェブサーバによって提供されます。特定のファイル名の拡張子を持つファイルがある場合、要求されたときにその中のコードが実行されます (オプションの設定が必要かもしれません)。この例としては、PHPやCGIファイルなどがあります。ここで、攻撃者がコードを含むファイル &quot;file.cgi &quot;をアップロードした場合を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="dbdce44c77c959bd4862bc5a859508ac636ef124" translate="yes" xml:space="preserve">
          <source>The port number (integer) used for the request.</source>
          <target state="translated">リクエストに使用されたポート番号 (整数)。</target>
        </trans-unit>
        <trans-unit id="b079d046ffb4ec9ded1b387f3e0010827c056b99" translate="yes" xml:space="preserve">
          <source>The possible length constraint options are:</source>
          <target state="translated">可能な長さ制約オプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4fce22dc56bb380decb3337ee172999502454fa4" translate="yes" xml:space="preserve">
          <source>The power of the &lt;code&gt;validates&lt;/code&gt; method comes when using custom validators and default validators in one call for a given attribute.</source>
          <target state="translated">&lt;code&gt;validates&lt;/code&gt; メソッドの威力は、特定の属性の1回の呼び出しでカスタムバリデーターとデフォルトバリデーターを使用する場合に得られます。</target>
        </trans-unit>
        <trans-unit id="b6c43b0561e55dd6178731da78ad85e3a4b6c1e1" translate="yes" xml:space="preserve">
          <source>The precedence between model names is calculated using the &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; operator for &lt;code&gt;String&lt;/code&gt;. This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. For example, one would expect the tables &quot;paper_boxes&quot; and &quot;papers&quot; to generate a join table name of &quot;papers_paper_boxes&quot; because of the length of the name &quot;paper_boxes&quot;, but it in fact generates a join table name of &quot;paper_boxes_papers&quot; (because the underscore '_' is lexicographically &lt;em&gt;less&lt;/em&gt; than 's' in common encodings).</source>
          <target state="translated">モデル名間の優先順位は、 &lt;code&gt;String&lt;/code&gt; の &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 演算子を使用して計算されます。つまり、文字列の長さが異なり、最短の長さまで比較すると文字列が等しい場合、長い文字列は短い文字列よりも字句の優先順位が高いと見なされます。たとえば、「paper_boxes」と「papers」というテーブルは、「paper_boxes」という名前の長さのため、「papers_paper_boxes」という結合テーブル名を生成すると期待しますが、実際には「paper_boxes_papers」という結合テーブル名を生成します（アンダースコア '_'は辞書順では一般的なエンコーディングの 's'よりも&lt;em&gt;小さい&lt;/em&gt;ためです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="62344c6f40c22e3ba498eca199d54186aace22e0" translate="yes" xml:space="preserve">
          <source>The predicate &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-utc-3F&quot;&gt;&lt;code&gt;utc?&lt;/code&gt;&lt;/a&gt; says whether the receiver has UTC as its time zone:</source>
          <target state="translated">述語&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/DateTime.html#method-i-utc-3F&quot;&gt; &lt;code&gt;utc?&lt;/code&gt; &lt;/a&gt;受信者がタイムゾーンとしてUTCを持っているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="15001a85859fd6f531e3d41dbeae196b33a737ca" translate="yes" xml:space="preserve">
          <source>The predicate &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-exclude-3F&quot;&gt;&lt;code&gt;exclude?&lt;/code&gt;&lt;/a&gt; tests whether a given object does &lt;strong&gt;not&lt;/strong&gt; belong to the collection. It is the negation of the built-in &lt;code&gt;include?&lt;/code&gt;:</source>
          <target state="translated">述語は&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Enumerable.html#method-i-exclude-3F&quot;&gt; &lt;code&gt;exclude?&lt;/code&gt; &lt;/a&gt;特定のオブジェクトがコレクションに属してい&lt;strong&gt;ない&lt;/strong&gt;かどうかをテストします。組み込み &lt;code&gt;include?&lt;/code&gt; の否定ですか？：</target>
        </trans-unit>
        <trans-unit id="91f64f61b5bae382f5c6be5cf79dd8734e286cba" translate="yes" xml:space="preserve">
          <source>The predicate &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-in-3F&quot;&gt;&lt;code&gt;in?&lt;/code&gt;&lt;/a&gt; tests if an object is included in another object. An &lt;code&gt;ArgumentError&lt;/code&gt; exception will be raised if the argument passed does not respond to &lt;code&gt;include?&lt;/code&gt;.</source>
          <target state="translated">の述語&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/Object.html#method-i-in-3F&quot;&gt; &lt;code&gt;in?&lt;/code&gt; &lt;/a&gt;オブジェクトが別のオブジェクトに含まれているかどうかをテストします。アン &lt;code&gt;ArgumentError&lt;/code&gt; 応答しない渡された引数がする場合は、例外が発生します &lt;code&gt;include?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1623bdf3d6d99614a33905e28305018e8da2ea92" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;exclude?&lt;/code&gt; tests whether a given object does &lt;strong&gt;not&lt;/strong&gt; belong to the collection. It is the negation of the built-in &lt;code&gt;include?&lt;/code&gt;:</source>
          <target state="translated">述語は &lt;code&gt;exclude?&lt;/code&gt; 指定されたオブジェクトがコレクションに属してい&lt;strong&gt;ない&lt;/strong&gt;かどうかをテストします。組み込み &lt;code&gt;include?&lt;/code&gt; の否定ですか？：</target>
        </trans-unit>
        <trans-unit id="d30534585d78db0e871015ad6fc7ba29234362ff" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;in?&lt;/code&gt; tests if an object is included in another object. An &lt;code&gt;ArgumentError&lt;/code&gt; exception will be raised if the argument passed does not respond to &lt;code&gt;include?&lt;/code&gt;.</source>
          <target state="translated">述語 &lt;code&gt;in?&lt;/code&gt; オブジェクトが別のオブジェクトに含まれているかどうかをテストします。アン &lt;code&gt;ArgumentError&lt;/code&gt; 応答しない渡された引数がする場合は、例外が発生します &lt;code&gt;include?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51cc5e243f6ab35d21893ecf5f94e037441bc436" translate="yes" xml:space="preserve">
          <source>The predicate &lt;code&gt;utc?&lt;/code&gt; says whether the receiver has UTC as its time zone:</source>
          <target state="translated">述語 &lt;code&gt;utc?&lt;/code&gt; 受信者がそのタイムゾーンとしてUTCを持っているかどうかを示します：</target>
        </trans-unit>
        <trans-unit id="b750834b37ac4d51943f62e9387ff28a0575c379" translate="yes" xml:space="preserve">
          <source>The predicate for strings uses the Unicode-aware character class &lt;code&gt;[:space:]&lt;/code&gt;, so for example U+2029 (paragraph separator) is considered to be whitespace.</source>
          <target state="translated">文字列の述語はUnicode対応の文字クラス &lt;code&gt;[:space:]&lt;/code&gt; を使用するため、たとえばU + 2029（段落区切り文字）は空白と見なされます。</target>
        </trans-unit>
        <trans-unit id="dc6a93f70839243fa9e1d8408e34e2544f70a727" translate="yes" xml:space="preserve">
          <source>The preferred method of outputting text in your views is to use the &amp;lt;%= &amp;ldquo;text&amp;rdquo; %&amp;gt; eRuby syntax. The regular &lt;em&gt;puts&lt;/em&gt; and &lt;em&gt;print&lt;/em&gt; methods do not operate as expected in an eRuby code block. If you absolutely must output text within a non-output code block (i.e., &amp;lt;% %&amp;gt;), you can use the concat method.</source>
          <target state="translated">ビューにテキストを出力するための推奨される方法は、&amp;lt;％=&amp;ldquo; text&amp;rdquo;％&amp;gt; eRuby構文を使用することです。通常の&lt;em&gt;put&lt;/em&gt;および&lt;em&gt;print&lt;/em&gt;メソッドは、eRubyコードブロックで期待どおりに動作しません。非出力コードブロック（&amp;lt;％％&amp;gt;など）内でテキストを出力する必要がある場合は、concatメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="746374f648c11779fb7595faf543aa73a11667ec" translate="yes" xml:space="preserve">
          <source>The prefix is a generation timestamp (in UTC).</source>
          <target state="translated">プレフィックスは生成タイムスタンプ(UTC)です。</target>
        </trans-unit>
        <trans-unit id="d2dc8c1fb9d9a6e930ad3ad1f1962e294f759976" translate="yes" xml:space="preserve">
          <source>The prefix string to prepend to every table name.</source>
          <target state="translated">すべてのテーブル名の前に付加する接頭辞文字列。</target>
        </trans-unit>
        <trans-unit id="c8eb84352de12fc2e14e658df97f8e1dd7fc6ae7" translate="yes" xml:space="preserve">
          <source>The prefix type that will be prepended to every primary key column name. The options are &lt;code&gt;:table_name&lt;/code&gt; and &lt;code&gt;:table_name_with_underscore&lt;/code&gt;. If the first is specified, the Product class will look for &amp;ldquo;productid&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo; as the primary column. If the latter is specified, the Product class will look for &amp;ldquo;product_id&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo;. Remember that this is a global setting for all Active Records.</source>
          <target state="translated">すべての主キー列名に付加される接頭辞タイプ。オプションは &lt;code&gt;:table_name&lt;/code&gt; と &lt;code&gt;:table_name_with_underscore&lt;/code&gt; です。最初が指定されている場合、Productクラスはプライマリ列として「id」ではなく「productid」を検索します。後者が指定されている場合、Productクラスは「id」ではなく「product_id」を検索します。これはすべてのアクティブレコードのグローバル設定であることを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="76608f27ed33c279c84f9724f718d27ff86e52f7" translate="yes" xml:space="preserve">
          <source>The previous example generates &lt;code&gt;address_street&lt;/code&gt; rather than &lt;code&gt;street&lt;/code&gt;.</source>
          <target state="translated">前の例では、 &lt;code&gt;street&lt;/code&gt; ではなく &lt;code&gt;address_street&lt;/code&gt; を生成しています。</target>
        </trans-unit>
        <trans-unit id="bf79e4462cb7c0cd7769f456bd8a2b2988b51b2b" translate="yes" xml:space="preserve">
          <source>The previous sections did not use the Rails form helpers at all. While you can craft the input names yourself and pass them directly to helpers such as &lt;code&gt;text_field_tag&lt;/code&gt; Rails also provides higher level support. The two tools at your disposal here are the name parameter to &lt;code&gt;form_with&lt;/code&gt; and &lt;code&gt;fields_for&lt;/code&gt; and the &lt;code&gt;:index&lt;/code&gt; option that helpers take.</source>
          <target state="translated">前のセクションでは、Railsフォームヘルパーをまったく使用しませんでした。入力名を自分で作成し、 &lt;code&gt;text_field_tag&lt;/code&gt; などのヘルパーに直接渡すこともできますが、Railsはより高いレベルのサポートも提供します。ここで自由に使用できる2つのツールは、 &lt;code&gt;form_with&lt;/code&gt; と &lt;code&gt;fields_for&lt;/code&gt; の名前パラメーターと、ヘルパーが使用する &lt;code&gt;:index&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="e0e9047f925fbf67d1eb6f9a1ed3d116890223cc" translate="yes" xml:space="preserve">
          <source>The primary goal of the function &lt;code&gt;exec_app&lt;/code&gt; is to execute your app's &lt;code&gt;bin/rails&lt;/code&gt;. If the current directory does not have a &lt;code&gt;bin/rails&lt;/code&gt;, it will navigate upwards until it finds a &lt;code&gt;bin/rails&lt;/code&gt; executable. Thus one can invoke a &lt;code&gt;rails&lt;/code&gt; command from anywhere inside a rails application.</source>
          <target state="translated">関数 &lt;code&gt;exec_app&lt;/code&gt; の主な目的は、アプリの &lt;code&gt;bin/rails&lt;/code&gt; を実行することです。現在のディレクトリに &lt;code&gt;bin/rails&lt;/code&gt; がない場合は、 &lt;code&gt;bin/rails&lt;/code&gt; 実行可能ファイルが見つかるまで上に移動します。したがって、railsアプリケーション内のどこからでも &lt;code&gt;rails&lt;/code&gt; コマンドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="374e971dc3ced2698c6060ed9d03807d33897f25" translate="yes" xml:space="preserve">
          <source>The primary key column name on &lt;code&gt;to_table&lt;/code&gt;. Defaults to &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;to_table&lt;/code&gt; の主キー列名。デフォルトは &lt;code&gt;id&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bac5ab3487ebac7ba2d2d20e1ec39fd6f57a8550" translate="yes" xml:space="preserve">
          <source>The primary key may auto-increment on each create, even if it fails. This can accelerate the problem of running out of integers, if the underlying table is still stuck on a primary key of type int (note: All Rails apps since 5.1+ have defaulted to bigint, which is not liable to this problem).</source>
          <target state="translated">失敗した場合でも、作成のたびに主キーがオートインクリメントされることがあります。これは、基礎となるテーブルがint型の主キーに固執している場合に、整数を使い果たす問題を加速させる可能性があります(注意:5.1+以降のすべてのRailsアプリはデフォルトでbigintになっており、この問題の原因にはなりません)。</target>
        </trans-unit>
        <trans-unit id="0e4104a011a461fd57d9f8ef9c0cc4734f38d19d" translate="yes" xml:space="preserve">
          <source>The primary operation of &lt;code&gt;Model.find(options)&lt;/code&gt; can be summarized as:</source>
          <target state="translated">&lt;code&gt;Model.find(options)&lt;/code&gt; の主な操作は、次のように要約できます。</target>
        </trans-unit>
        <trans-unit id="355491ae17fbdee22c249344fd63c33317a6c2c6" translate="yes" xml:space="preserve">
          <source>The primary options are:</source>
          <target state="translated">主な選択肢は</target>
        </trans-unit>
        <trans-unit id="1db357e331d3a9a64b5d07b7e285558b9301de2f" translate="yes" xml:space="preserve">
          <source>The problem with purely abstract classes is that all concrete subclasses must persist all the shared attributes themselves in their own tables (also known as class-table inheritance). This makes it hard to do queries across the hierarchy. For example, imagine you have the following hierarchy:</source>
          <target state="translated">純粋に抽象的なクラスの問題は、すべての具体的なサブクラスが、共有された属性自体をすべて自分のテーブルに永続化しなければならないということです(クラステーブル継承とも呼ばれています)。これにより、階層をまたいでクエリを実行することが困難になります。例えば、以下のような階層があると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="e4fa3e65aa6bbe33b99dacd08bdbeb417dc2f95b" translate="yes" xml:space="preserve">
          <source>The procedure to autoload constant &lt;code&gt;C&lt;/code&gt; in an arbitrary situation is as follows:</source>
          <target state="translated">任意の状況で定数 &lt;code&gt;C&lt;/code&gt; を自動ロードする手順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8040e6c9ad1dcfe9ba2350e5dae6e0ddc3828236" translate="yes" xml:space="preserve">
          <source>The process of &quot;internationalization&quot; usually means to abstract all strings and other locale specific bits (such as date or currency formats) out of your application. The process of &quot;localization&quot; means to provide translations and localized formats for these bits.&lt;sup id=&quot;footnote-1-ref&quot;&gt;&lt;a href=&quot;#footnote-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</source>
          <target state="translated">「国際化」のプロセスは通常、アプリケーションからすべての文字列およびその他のロケール固有のビット（日付や通貨のフォーマットなど）を抽象化することを意味します。「ローカリゼーション」のプロセスは、これらのビットの翻訳とローカライズされたフォーマットを提供することを意味します。&lt;sup id=&quot;footnote-1-ref&quot;&gt;&lt;a href=&quot;#footnote-1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="bab12b63d1f444a4baf98767b36d0c0acab0c884" translate="yes" xml:space="preserve">
          <source>The process should go as follows:</source>
          <target state="translated">プロセスは以下のように行う必要があります。</target>
        </trans-unit>
        <trans-unit id="d247badcf31b8cb60f802528ca9ec9615802ad61" translate="yes" xml:space="preserve">
          <source>The program should report its version.</source>
          <target state="translated">プログラムは、そのバージョンを報告する必要があります。</target>
        </trans-unit>
        <trans-unit id="39be8745f83c23f980e50b68440fb75f28893215" translate="yes" xml:space="preserve">
          <source>The project class now has the following methods (and more) to ease the traversal and manipulation of its relationships:</source>
          <target state="translated">プロジェクトクラスには、以下のメソッドが追加されました (その他にも)。</target>
        </trans-unit>
        <trans-unit id="9549fd7af922ed428621dcdb95af872afc58b4e3" translate="yes" xml:space="preserve">
          <source>The provided regexp will be wrapped with both anchors (&lt;code&gt;\A&lt;/code&gt; and &lt;code&gt;\z&lt;/code&gt;) so it must match the entire hostname. &lt;code&gt;/product.com/&lt;/code&gt;, for example, once anchored, would fail to match &lt;code&gt;www.product.com&lt;/code&gt;.</source>
          <target state="translated">提供された正規表現は両方のアンカー（ &lt;code&gt;\A&lt;/code&gt; と &lt;code&gt;\z&lt;/code&gt; ）でラップされるため、ホスト名全体と一致する必要があります。たとえば、 &lt;code&gt;/product.com/&lt;/code&gt; 、固定されると、 &lt;code&gt;www.product.com&lt;/code&gt; と一致しなくなります。</target>
        </trans-unit>
        <trans-unit id="a2aa13204d8f2986d4eaf321a39937bb7daefb6c" translate="yes" xml:space="preserve">
          <source>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See the &lt;a href=&quot;multibyte/chars&quot;&gt;&lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt;&lt;/a&gt; implementation for an example how to do this.</source>
          <target state="translated">mb_charsを呼び出すときに返されたプロキシクラス。このアクセサを使用して独自のプロキシクラスを設定し、他のエンコーディングをサポートできます。これを行う方法の例については、&lt;a href=&quot;multibyte/chars&quot;&gt; &lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt; &lt;/a&gt;実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="35e6836db7b86f1636ec6a98ca72c3104147db64" translate="yes" xml:space="preserve">
          <source>The proxy class returned when calling mb_chars. You can use this accessor to configure your own proxy class so you can support other encodings. See the &lt;a href=&quot;multibyte/chars&quot;&gt;ActiveSupport::Multibyte::Chars&lt;/a&gt; implementation for an example how to do this.</source>
          <target state="translated">mb_charsを呼び出したときに返されるプロキシクラス。このアクセサーを使用して独自のプロキシクラスを構成し、他のエンコーディングをサポートできます。これを行う方法の例については、&lt;a href=&quot;multibyte/chars&quot;&gt;ActiveSupport :: Multibyte :: Chars&lt;/a&gt;実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="2db1dccdc41ae63a5d769078a53e229b53f03007" translate="yes" xml:space="preserve">
          <source>The proxy objects that control the access to associations can be extended through anonymous modules. This is especially beneficial for adding new finders, creators, and other factory-type methods that are only used as part of this association.</source>
          <target state="translated">アソシエーションへのアクセスを制御するプロキシオブジェクトは、匿名モジュールを介して拡張することができます。これは、このアソシエーションの一部としてのみ使用される新しいファインダーやクリエイター、その他のファクトリータイプのメソッドを追加する場合に特に有益です。</target>
        </trans-unit>
        <trans-unit id="cb2ef0a3f23683b82b3a7fc76ce94b0e0f988d66" translate="yes" xml:space="preserve">
          <source>The public API of the i18n framework - a Ruby module with public methods that define how the library works</source>
          <target state="translated">i18n フレームワークの公開 API-ライブラリの動作を定義する公開メソッドを持つ Ruby モジュール</target>
        </trans-unit>
        <trans-unit id="e2f3f6bc15534a07027a580fb53a5ce807cb0522" translate="yes" xml:space="preserve">
          <source>The public controller methods &lt;code&gt;respond_to&lt;/code&gt; may be called with a block that is used to define responses to different mime-types, e.g. for &lt;code&gt;respond_to&lt;/code&gt; :</source>
          <target state="translated">パブリック制御方法 &lt;code&gt;respond_to&lt;/code&gt; がために、例えば、異なるMIMEタイプに対する応答を定義するために使用されるブロックと呼ばれることもある &lt;code&gt;respond_to&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e523c677a1876a5d7712fcdf44f31a3393f986ba" translate="yes" xml:space="preserve">
          <source>The public path that Sprockets uses by default is &lt;code&gt;/assets&lt;/code&gt;.</source>
          <target state="translated">Sprocketsがデフォルトで使用するパブリックパスは &lt;code&gt;/assets&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b1c15f7c37361e4d62cc7d2ebb86fe446e3f202b" translate="yes" xml:space="preserve">
          <source>The purpose of debugging.</source>
          <target state="translated">デバッグの目的。</target>
        </trans-unit>
        <trans-unit id="bc7610d0ca7ba5f46a29cc2aff958d13007d672d" translate="yes" xml:space="preserve">
          <source>The purpose of this setup would be that the application uses the class that corresponds to the environment via &lt;code&gt;AUTH_SERVICE&lt;/code&gt;. In development mode &lt;code&gt;MockedAuthService&lt;/code&gt; gets autoloaded when the initializer runs. Let's suppose we do some requests, change its implementation, and hit the application again. To our surprise the changes are not reflected. Why?</source>
          <target state="translated">このセットアップの目的は、アプリケーションが &lt;code&gt;AUTH_SERVICE&lt;/code&gt; を介して環境に対応するクラスを使用することです。開発モードでは、イニシャライザの実行時に &lt;code&gt;MockedAuthService&lt;/code&gt; がオートロードされます。いくつかのリクエストを実行し、その実装を変更して、アプリケーションに再度アクセスしたとします。驚いたことに、変更は反映されていません。どうして？</target>
        </trans-unit>
        <trans-unit id="3b96e7010ad0263400b2ad5355a0f3d1d24d9569" translate="yes" xml:space="preserve">
          <source>The query string part of the URL, i.e., everything after &quot;?&quot;.</source>
          <target state="translated">URL のクエリ文字列の部分、つまり &quot;?</target>
        </trans-unit>
        <trans-unit id="963ede72d0dfa198743a61a0942634ecdbed773d" translate="yes" xml:space="preserve">
          <source>The query string strategy has several disadvantages:</source>
          <target state="translated">クエリ文字列戦略にはいくつかの欠点があります。</target>
        </trans-unit>
        <trans-unit id="9447d2ea713bcd10ab52cda886cd6cbf5d593b22" translate="yes" xml:space="preserve">
          <source>The rails commands that manipulate migrations and your schema.</source>
          <target state="translated">マイグレーションとスキーマを操作する rails コマンド。</target>
        </trans-unit>
        <trans-unit id="211b65c121c2996e58957eb6dd2511f01b18717b" translate="yes" xml:space="preserve">
          <source>The raw value provided as the second parameter when calling `errors#add`</source>
          <target state="translated">errors#add` を呼び出す際に2番目のパラメータとして与えられる生の値。</target>
        </trans-unit>
        <trans-unit id="4e2911d154a61b6a5ba76018adc402ed58605ab3" translate="yes" xml:space="preserve">
          <source>The reason for this is that during development you'd usually want your views to still render even though a translation is missing.</source>
          <target state="translated">その理由は、開発中は通常、翻訳が欠けていてもビューをレンダリングしたいと思うからです。</target>
        </trans-unit>
        <trans-unit id="78dd8f5116b3d8b957ca4166352d82a58bb88405" translate="yes" xml:space="preserve">
          <source>The reason is that autoloading is triggered for the singleton class, which is anonymous, and as &lt;a href=&quot;#generic-procedure&quot;&gt;we saw before&lt;/a&gt;, Rails only checks the top-level namespace in that edge case.</source>
          <target state="translated">その理由は、匿名であるシングルトンクラスに対してオートローディングがトリガーされるためです。&lt;a href=&quot;#generic-procedure&quot;&gt;前&lt;/a&gt;に見たように、Railsはそのエッジケースでトップレベルのネームスペースのみをチェックします。</target>
        </trans-unit>
        <trans-unit id="fbbbe01fb4a2a4d9cb2a8c25e4df69ba3ef590b0" translate="yes" xml:space="preserve">
          <source>The reason most people use Rails is that it provides a set of defaults that allows developers to get up and running quickly, without having to make a lot of trivial decisions.</source>
          <target state="translated">ほとんどの人がRailsを使っている理由は、開発者がつまらない決定をたくさんしなくてもすぐに立ち上がることができるように、デフォルトのセットを提供してくれるからです。</target>
        </trans-unit>
        <trans-unit id="25facf3920d52f7ea5f36c7e93e4e595a2175805" translate="yes" xml:space="preserve">
          <source>The reason why we added &lt;code&gt;@article = Article.new&lt;/code&gt; in the &lt;code&gt;ArticlesController&lt;/code&gt; is that otherwise &lt;code&gt;@article&lt;/code&gt; would be &lt;code&gt;nil&lt;/code&gt; in our view, and calling &lt;code&gt;@article.errors.any?&lt;/code&gt; would throw an error.</source>
          <target state="translated">&lt;code&gt;ArticlesController&lt;/code&gt; に &lt;code&gt;@article = Article.new&lt;/code&gt; を追加したのは、そうしないと &lt;code&gt;@article&lt;/code&gt; が &lt;code&gt;nil&lt;/code&gt; になり、 &lt;code&gt;@article.errors.any?&lt;/code&gt; エラーをスローします。</target>
        </trans-unit>
        <trans-unit id="cec56727dcf557c3b63bdfe82a9a3a16d8e16121" translate="yes" xml:space="preserve">
          <source>The rebroadcast will be received by all connected clients, &lt;em&gt;including&lt;/em&gt; the client that sent the message. Note that params are the same as they were when you subscribed to the channel.</source>
          <target state="translated">再ブロードキャストは、メッセージを送信したクライアントを&lt;em&gt;含む&lt;/em&gt;、接続されているすべてのクライアントによって受信されます。paramsは、チャンネルに登録したときと同じであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="34a3cd9fd5339aaaefab9615beb498916c347532" translate="yes" xml:space="preserve">
          <source>The redirection happens as a &lt;code&gt;302 Found&lt;/code&gt; header unless otherwise specified using the &lt;code&gt;:status&lt;/code&gt; option:</source>
          <target state="translated">&lt;code&gt;:status&lt;/code&gt; オプションを使用して特に指定されていない限り、リダイレクトは &lt;code&gt;302 Found&lt;/code&gt; ヘッダーとして行われます。</target>
        </trans-unit>
        <trans-unit id="6fc33772c67a94f60777ad03a5f62d48d81352f8" translate="yes" xml:space="preserve">
          <source>The reference column type. Defaults to &lt;code&gt;:bigint&lt;/code&gt;.</source>
          <target state="translated">参照列タイプ。デフォルトは &lt;code&gt;:bigint&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d9352b43be8aa84da2f638620572a5ccea912a66" translate="yes" xml:space="preserve">
          <source>The referrer information is pulled from the HTTP &lt;code&gt;Referer&lt;/code&gt; (sic) header on the request. This is an optional header and its presence on the request is subject to browser security settings and user preferences. If the request is missing this header, the &lt;code&gt;fallback_location&lt;/code&gt; will be used.</source>
          <target state="translated">リファラ情報がHTTPから引き出され &lt;code&gt;Referer&lt;/code&gt; リクエストに（SIC）ヘッダ。これはオプションのヘッダーであり、要求に対するその存在は、ブラウザーのセキュリティ設定とユーザー設定の影響を受けます。リクエストにこのヘッダーがない場合は、 &lt;code&gt;fallback_location&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="eb49b45c4a2d1a85d2d9af882862e039d5010fcc" translate="yes" xml:space="preserve">
          <source>The rendered template is &lt;code&gt;people/_labelling_form&lt;/code&gt; and the local variable referencing the form builder is called &lt;code&gt;labelling_form&lt;/code&gt;.</source>
          <target state="translated">レンダリングされたテンプレートは &lt;code&gt;people/_labelling_form&lt;/code&gt; であり、フォームビルダーを参照するローカル変数は &lt;code&gt;labelling_form&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="a94255df270ad824d9d83b0a6f7b7ff760d009d7" translate="yes" xml:space="preserve">
          <source>The request body is an &lt;code&gt;IO&lt;/code&gt; input stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.</source>
          <target state="translated">リクエストの本文は &lt;code&gt;IO&lt;/code&gt; 入力ストリームです。RAW_POST_DATA環境変数がすでに設定されている場合は、StringIOでラップします。</target>
        </trans-unit>
        <trans-unit id="63f684b0b47877c550e81776857431c7164bacd0" translate="yes" xml:space="preserve">
          <source>The request body is an IO input stream. If the RAW_POST_DATA environment variable is already set, wrap it in a StringIO.</source>
          <target state="translated">リクエストボディはIO入力ストリームです。環境変数RAW_POST_DATAが既に設定されている場合は、StringIOでラップします。</target>
        </trans-unit>
        <trans-unit id="5618400bb0c662f7a9044a9e92d762488642b3ee" translate="yes" xml:space="preserve">
          <source>The request object contains a lot of useful information about the request coming in from the client. To get a full list of the available methods, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;Rails API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Request&quot;&gt;Rack Documentation&lt;/a&gt;. Among the properties that you can access on this object are:</source>
          <target state="translated">リクエストオブジェクトには、クライアントからのリクエストに関する多くの有用な情報が含まれています。使用可能なメソッドの完全なリストを取得するには、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Request.html&quot;&gt;Rails APIドキュメント&lt;/a&gt;および&lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Request&quot;&gt;Rackドキュメントを&lt;/a&gt;参照してください。このオブジェクトでアクセスできるプロパティには、次のものがあります。</target>
        </trans-unit>
        <trans-unit id="447adfed7e1b075f5907827838b9d68713be5f5a" translate="yes" xml:space="preserve">
          <source>The request that initiated the WebSocket connection is available here. This gives access to the environment, cookies, etc.</source>
          <target state="translated">WebSocket接続を開始したリクエストはこちらで確認できます。これにより、環境やクッキーなどへのアクセスが可能になります。</target>
        </trans-unit>
        <trans-unit id="2ebe4d5fe508222930c3bc355f953f8b7e69a836" translate="yes" xml:space="preserve">
          <source>The request that the response is responding to.</source>
          <target state="translated">レスポンスが返ってくるリクエスト。</target>
        </trans-unit>
        <trans-unit id="8c0d63c0e9b70807564233148a1c2dbdea492502" translate="yes" xml:space="preserve">
          <source>The request to this asset is then served by the Sprockets gem.</source>
          <target state="translated">このアセットへのリクエストは、Sprockets gemによって提供されます。</target>
        </trans-unit>
        <trans-unit id="a13bac9dbc4228aac718c2160238ae2f74224f6d" translate="yes" xml:space="preserve">
          <source>The request variant is a specialization of the request format, like &lt;code&gt;:tablet&lt;/code&gt;, &lt;code&gt;:phone&lt;/code&gt;, or &lt;code&gt;:desktop&lt;/code&gt;.</source>
          <target state="translated">リクエストバリアントは、 &lt;code&gt;:tablet&lt;/code&gt; 、 &lt;code&gt;:phone&lt;/code&gt; 、 &lt;code&gt;:desktop&lt;/code&gt; などのリクエスト形式の特殊化です。</target>
        </trans-unit>
        <trans-unit id="dcb52832bce02225033e7ae0b7180e0e9aa6ae0c" translate="yes" xml:space="preserve">
          <source>The requirements for implementing &lt;a href=&quot;dirty&quot;&gt;&lt;code&gt;ActiveModel::Dirty&lt;/code&gt;&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;dirty&quot;&gt; &lt;code&gt;ActiveModel::Dirty&lt;/code&gt; &lt;/a&gt;を実装するための要件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1c6f31a993c883608b49486cf93c169ad92d6226" translate="yes" xml:space="preserve">
          <source>The requirements for implementing &lt;a href=&quot;dirty&quot;&gt;ActiveModel::Dirty&lt;/a&gt; are:</source>
          <target state="translated">&lt;a href=&quot;dirty&quot;&gt;ActiveModel :: Dirty&lt;/a&gt;を実装するための要件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c89ab6641453bcf8d055aa8bc68cd2cd8cab4f65" translate="yes" xml:space="preserve">
          <source>The requirements to implement &lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; are to:</source>
          <target state="translated">&lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; を実装するための要件は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b8decea92879d37a4f7c7d58ad76e94662a99ef0" translate="yes" xml:space="preserve">
          <source>The resolution of a constant could depend on load order, the definition of a class or module object could depend on load order, there was edge cases with singleton classes, oftentimes you had to use &lt;code&gt;require_dependency&lt;/code&gt; as a workaround, .... The guide for &lt;code&gt;classic&lt;/code&gt; mode documents &lt;a href=&quot;autoloading_and_reloading_constants_classic_mode#common-gotchas&quot;&gt;these issues&lt;/a&gt;.</source>
          <target state="translated">定数の解決はロード順序に依存する可能性があり、クラスまたはモジュールオブジェクトの定義はロード順序に依存する可能性があり、シングルトンクラスのエッジケースがあり、多くの場合、回避策として &lt;code&gt;require_dependency&lt;/code&gt; を使用する必要がありました。 &lt;code&gt;classic&lt;/code&gt; モードは&lt;a href=&quot;autoloading_and_reloading_constants_classic_mode#common-gotchas&quot;&gt;これらの問題を&lt;/a&gt;文書化します。</target>
        </trans-unit>
        <trans-unit id="300f2949996e658ac115ccea16fe17506d448ce0" translate="yes" xml:space="preserve">
          <source>The resolver class defines when the application should switch (i.e. read from the primary if a write occurred less than 2 seconds ago) and a resolver context class that sets a value that helps the resolver class decide when to switch.</source>
          <target state="translated">リゾルバクラスは、アプリケーションがいつ切り替えるべきかを定義します(例えば、書き込みが2秒未満前に発生した場合はプライマリから読み込みます)。</target>
        </trans-unit>
        <trans-unit id="15f2c7d083db22a8119db70913a3db4aaad993bc" translate="yes" xml:space="preserve">
          <source>The resource and all segments will now route to /postings instead of /posts.</source>
          <target state="translated">リソースとすべてのセグメントは、/posts の代わりに /postings にルーティングされるようになりました。</target>
        </trans-unit>
        <trans-unit id="beaa87f3d21ecbfe45641f3a86ee4784a14c6812" translate="yes" xml:space="preserve">
          <source>The response code of the request.</source>
          <target state="translated">リクエストのレスポンスコード。</target>
        </trans-unit>
        <trans-unit id="0c493831110ba9d815114c381b8f94946676425e" translate="yes" xml:space="preserve">
          <source>The response object is not usually used directly, but is built up during the execution of the action and rendering of the data that is being sent back to the user, but sometimes - like in an after filter - it can be useful to access the response directly. Some of these accessor methods also have setters, allowing you to change their values. To get a full list of the available methods, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html&quot;&gt;Rails API documentation&lt;/a&gt; and &lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Response&quot;&gt;Rack Documentation&lt;/a&gt;.</source>
          <target state="translated">応答オブジェクトは通常直接使用されませんが、アクションの実行中、およびユーザーに送り返されるデータのレンダリング中に作成されますが、時々-後フィルターのように-応答にアクセスすると役立つ場合があります直接。これらのアクセサメソッドの一部にはセッターもあり、値を変更できます。使用可能なメソッドの完全なリストを取得するには、&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Response.html&quot;&gt;Rails APIドキュメント&lt;/a&gt;および&lt;a href=&quot;https://www.rubydoc.info/github/rack/rack/Rack/Response&quot;&gt;Rackドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cbf34bbcf94a3cd1f50b6c287697c3d57ed72cb5" translate="yes" xml:space="preserve">
          <source>The rest of &lt;code&gt;config/application.rb&lt;/code&gt; defines the configuration for the &lt;code&gt;Rails::Application&lt;/code&gt; which will be used once the application is fully initialized. When &lt;code&gt;config/application.rb&lt;/code&gt; has finished loading Rails and defined the application namespace, we go back to &lt;code&gt;config/environment.rb&lt;/code&gt;. Here, the application is initialized with &lt;code&gt;Rails.application.initialize!&lt;/code&gt;, which is defined in &lt;code&gt;rails/application.rb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; の残りの部分は、アプリケーションが完全に初期化されると使用される &lt;code&gt;Rails::Application&lt;/code&gt; 構成を定義します。とき &lt;code&gt;config/application.rb&lt;/code&gt; 完成負荷Railsと定義されたアプリケーションの名前空間を持って、我々はに戻って行く &lt;code&gt;config/environment.rb&lt;/code&gt; 。ここでは、アプリケーションは &lt;code&gt;Rails.application.initialize!&lt;/code&gt; で初期化されます。、これは &lt;code&gt;rails/application.rb&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="effb5614fd27c25befd2c6d1b8f3efd5ba7fd3b2" translate="yes" xml:space="preserve">
          <source>The rest of this guide describes the mechanisms Rails uses to make it &quot;mostly ignorable&quot;, and how extensions and applications with special needs can use them.</source>
          <target state="translated">このガイドの残りの部分では、Railsが「ほとんど無視できる」ようにするために使用するメカニズムと、特別なニーズを持つ拡張機能やアプリケーションがどのように使用できるかについて説明しています。</target>
        </trans-unit>
        <trans-unit id="74aecee2b54888a4b816d341feda0b0331477ef2" translate="yes" xml:space="preserve">
          <source>The result after rendering is:</source>
          <target state="translated">レンダリング後の結果は</target>
        </trans-unit>
        <trans-unit id="dcd568ad6b005de288f75e8fe0668cc29b612d27" translate="yes" xml:space="preserve">
          <source>The result is marked as HTML-safe, but it is escaped by default, unless &lt;code&gt;:escape&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. Care should be taken if &lt;code&gt;text&lt;/code&gt; contains HTML tags or entities, because truncation may produce invalid HTML (such as unbalanced or incomplete tags).</source>
          <target state="translated">結果はHTMLセーフとしてマークされますが、 &lt;code&gt;:escape&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; でない限り、デフォルトでエスケープされます。 &lt;code&gt;text&lt;/code&gt; にHTMLタグまたはエンティティが含まれている場合は、切り捨てによって無効なHTML（タグの不均衡または不完全など）が生成される可能性があるため、注意が必要です。</target>
        </trans-unit>
        <trans-unit id="a25ad2e87bf95b7cfc6b0056a7f16420a069ff66" translate="yes" xml:space="preserve">
          <source>The result may contain alphanumeric characters except 0, O, I and l.</source>
          <target state="translated">結果には、0、O、I、l以外の英数字が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="59041e876a7fc33927f1114587cb2013250c8716" translate="yes" xml:space="preserve">
          <source>The result of rendering this page into the supplied layout would be this HTML:</source>
          <target state="translated">このページを指定されたレイアウトにレンダリングした結果は、次のような HTML になります。</target>
        </trans-unit>
        <trans-unit id="ce4233cf4e68b15da2f7f962c3aa058e81e088f1" translate="yes" xml:space="preserve">
          <source>The result should be something like this:</source>
          <target state="translated">結果はこんな感じになるはずです。</target>
        </trans-unit>
        <trans-unit id="346e462e239bdd14b4a628c87f5eadb465a3a2fa" translate="yes" xml:space="preserve">
          <source>The result will contain alphanumeric characters in lowercase.</source>
          <target state="translated">結果には英数字の小文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="0adb8a1307684faa2f86601a21cfe31f030157a8" translate="yes" xml:space="preserve">
          <source>The result won't be a list of projects (because there is no project with an empty name), but a list of user names and their password. So hopefully you encrypted the passwords in the database! The only problem for the attacker is, that the number of columns has to be the same in both queries. That's why the second query includes a list of ones (1), which will be always the value 1, in order to match the number of columns in the first query.</source>
          <target state="translated">結果はプロジェクトのリストではなく(空の名前のプロジェクトはないので)、ユーザ名とそのパスワードのリストになります。うまくいけば、データベース内のパスワードが暗号化されていることを願っています。攻撃者にとっての唯一の問題は、両方のクエリでカラム数を同じにしなければならないことです。そのため、2 番目のクエリでは、1 番目のクエリのカラム数と一致させるために、常に 1 の値を持つ 1 のリストが含まれています。</target>
        </trans-unit>
        <trans-unit id="e70fb1c2729e8458de00d32c3591467e2d7aa855" translate="yes" xml:space="preserve">
          <source>The resulting &lt;code&gt;Mail::Message&lt;/code&gt; will have the following in its header:</source>
          <target state="translated">結果の &lt;code&gt;Mail::Message&lt;/code&gt; は、ヘッダーに次のようになります。</target>
        </trans-unit>
        <trans-unit id="99d61cd3773bc4d60f3270a01f2095c107751685" translate="yes" xml:space="preserve">
          <source>The resulting HTML is:</source>
          <target state="translated">結果のHTMLは</target>
        </trans-unit>
        <trans-unit id="71c86b5736b5204e9f35c1743a129c5e2694ebf0" translate="yes" xml:space="preserve">
          <source>The resulting output from our &lt;code&gt;form_with&lt;/code&gt; call will look like:</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; 呼び出しからの結果の出力は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="291698672d11962c8bb088e3306823ab4309b2d4" translate="yes" xml:space="preserve">
          <source>The retrieved record may vary depending on the database engine.</source>
          <target state="translated">検索されるレコードは、データベースエンジンによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="9f55e694c225f295d0bdcccba3be020d10a4d8fa" translate="yes" xml:space="preserve">
          <source>The return of capture is the string generated by the block. For Example:</source>
          <target state="translated">キャプチャの戻り値は、ブロックによって生成された文字列です。例としては、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4ddd68cea8d0fe03eb2943356aa27557616b7f05" translate="yes" xml:space="preserve">
          <source>The return value from the block passed to &lt;code&gt;direct&lt;/code&gt; must be a valid set of arguments for &lt;code&gt;url_for&lt;/code&gt; which will actually build the URL string. This can be one of the following:</source>
          <target state="translated">&lt;code&gt;direct&lt;/code&gt; に渡されるブロックからの戻り値は、実際にURL文字列を構築する &lt;code&gt;url_for&lt;/code&gt; の有効な引数のセットである必要があります。これは次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="154e88df68e99f69cd0b483c47a5ada31a856800" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;to_param&lt;/code&gt; should &lt;strong&gt;not&lt;/strong&gt; be escaped:</source>
          <target state="translated">&lt;code&gt;to_param&lt;/code&gt; の戻り値はエスケープし&lt;strong&gt;ない&lt;/strong&gt;でください：</target>
        </trans-unit>
        <trans-unit id="c3147580f8522c424243090e61bbb85df53db8c8" translate="yes" xml:space="preserve">
          <source>The return value of the block must be a valid argument for the &lt;code&gt;url_for&lt;/code&gt; method. So, you can pass a valid string URL, Hash, Array, an Active Model instance, or an Active Model class.</source>
          <target state="translated">ブロックの戻り値は、 &lt;code&gt;url_for&lt;/code&gt; メソッドの有効な引数である必要があります。したがって、有効な文字列URL、ハッシュ、配列、アクティブモデルインスタンス、またはアクティブモデルクラスを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d7ebe9022d127f36d9e15723d5e55359c15a6093" translate="yes" xml:space="preserve">
          <source>The return value of this method will be returned from &lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;&lt;code&gt;ActiveRecord::AttributeMethods::Read#read_attribute&lt;/code&gt;&lt;/a&gt;. See also: &lt;a href=&quot;value#method-i-cast_value&quot;&gt;&lt;code&gt;Value#cast_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このメソッドの戻り値は、&lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt; &lt;code&gt;ActiveRecord::AttributeMethods::Read#read_attribute&lt;/code&gt; &lt;/a&gt;から返されます。参照：&lt;a href=&quot;value#method-i-cast_value&quot;&gt; &lt;code&gt;Value#cast_value&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="712cb04b5cda0c9344ce367414c9f233585347f5" translate="yes" xml:space="preserve">
          <source>The return value of this method will be returned from &lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;ActiveRecord::AttributeMethods::Read#read_attribute&lt;/a&gt;. See also: &lt;a href=&quot;value#method-i-cast_value&quot;&gt;#cast_value&lt;/a&gt;.</source>
          <target state="translated">このメソッドの戻り値は、&lt;a href=&quot;../../activerecord/attributemethods/read#method-i-read_attribute&quot;&gt;ActiveRecord :: AttributeMethods :: Read＃read_attribute&lt;/a&gt;から返されます。&lt;a href=&quot;value#method-i-cast_value&quot;&gt;#cast_value&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="baf87def1ba1a7cea81f7ae68bf2ac6b989f6b22" translate="yes" xml:space="preserve">
          <source>The return value of this method will implement the interface described by &lt;a href=&quot;../../activemodel/type/value&quot;&gt;&lt;code&gt;ActiveModel::Type::Value&lt;/code&gt;&lt;/a&gt; (though the object itself may not subclass it).</source>
          <target state="translated">このメソッドの戻り値は、&lt;a href=&quot;../../activemodel/type/value&quot;&gt; &lt;code&gt;ActiveModel::Type::Value&lt;/code&gt; &lt;/a&gt;記述されたインターフェイスを実装します（ただし、オブジェクト自体はサブクラス化できない場合があります）。</target>
        </trans-unit>
        <trans-unit id="02d062788bd9bee681b003f51a10c4ddc35a0f20" translate="yes" xml:space="preserve">
          <source>The return value of this method will implement the interface described by &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; (though the object itself may not subclass it).</source>
          <target state="translated">このメソッドの戻り値は、&lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Value&lt;/a&gt;によって記述されたインターフェイスを実装します（オブジェクト自体はサブクラス化しない場合があります）。</target>
        </trans-unit>
        <trans-unit id="fc938c5063fc1ebd08656f7dd09cbe35e6bc81af" translate="yes" xml:space="preserve">
          <source>The returned relation implements the Null &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt; pattern. It is an object with defined null behavior and always returns an empty array of records without querying the database.</source>
          <target state="translated">返された関係は、ヌルの実装&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; &lt;/a&gt;パターンを。これはnullの動作が定義されたオブジェクトであり、データベースにクエリを実行せずに常にレコードの空の配列を返します。</target>
        </trans-unit>
        <trans-unit id="8151c4f5afe49e75a934b72f81a8df8a8e3d9b5f" translate="yes" xml:space="preserve">
          <source>The returned relation implements the Null &lt;a href=&quot;../object&quot;&gt;Object&lt;/a&gt; pattern. It is an object with defined null behavior and always returns an empty array of records without querying the database.</source>
          <target state="translated">返される関係は、Null &lt;a href=&quot;../object&quot;&gt;オブジェクト&lt;/a&gt;パターンを実装します。これはnullの動作が定義されたオブジェクトであり、常にデータベースに問い合わせることなく、空のレコード配列を返します。</target>
        </trans-unit>
        <trans-unit id="2f6d33ea1cddf31651da115f43de80616f27f4f9" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;&lt;code&gt;pluralize&lt;/code&gt;&lt;/a&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;a href=&quot;inflector#method-i-pluralize&quot;&gt; &lt;code&gt;pluralize&lt;/code&gt; &lt;/a&gt;の逆は、文字列内の単語の単数形を返します。</target>
        </trans-unit>
        <trans-unit id="a8a176bf29706fa37ad63399ebcd21c506e08a48" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;pluralize&lt;/a&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;a href=&quot;inflector#method-i-pluralize&quot;&gt;pluralize&lt;/a&gt;の逆は、文字列内の単語の単数形を返します。</target>
        </trans-unit>
        <trans-unit id="f0c5f4b12a37e16bfe4b06dcf4213f26c624b861" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;code&gt;camelize&lt;/code&gt;. Makes an underscored, lowercase form from the expression in the string.</source>
          <target state="translated">&lt;code&gt;camelize&lt;/code&gt; の逆。文字列内の式から下線付きの小文字形式を作成します。</target>
        </trans-unit>
        <trans-unit id="49c3882be12d0dbab48454dd420e872739fa4014" translate="yes" xml:space="preserve">
          <source>The reverse of &lt;code&gt;pluralize&lt;/code&gt;, returns the singular form of a word in a string.</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; の逆は、文字列内の単語の単数形を返します。</target>
        </trans-unit>
        <trans-unit id="5a2f5d042f75acbe0f3e7548eed90e866ea9799c" translate="yes" xml:space="preserve">
          <source>The rightmost argument to &lt;code&gt;form_for&lt;/code&gt; is an optional hash of options -</source>
          <target state="translated">&lt;code&gt;form_for&lt;/code&gt; の右端の引数はオプションのオプションハッシュです-</target>
        </trans-unit>
        <trans-unit id="a9a9612e7634415916c2149adc277d52fac00916" translate="yes" xml:space="preserve">
          <source>The root node reflects the class name of the first element in plural if all elements belong to the same type and that's not Hash:</source>
          <target state="translated">ルートノードは、すべての要素が同じ型に属し、それがHashではない場合、最初の要素のクラス名を複数形で反映します。</target>
        </trans-unit>
        <trans-unit id="f5bc1d31e8e66c06bdb0658b08aafa634967a8a0" translate="yes" xml:space="preserve">
          <source>The route above declares that &lt;code&gt;GET /articles&lt;/code&gt; requests are mapped to the &lt;code&gt;index&lt;/code&gt; action of &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="translated">上記のルートは、 &lt;code&gt;GET /articles&lt;/code&gt; リクエストが &lt;code&gt;ArticlesController&lt;/code&gt; の &lt;code&gt;index&lt;/code&gt; アクションにマップされることを宣言しています。</target>
        </trans-unit>
        <trans-unit id="924c9739d75001033fe4a310f64ac55258d3feec" translate="yes" xml:space="preserve">
          <source>The route key also considers if the noun is uncountable and, in such cases, automatically appends _index.</source>
          <target state="translated">ルートキーは、名詞がカウント不能であるかどうかも考慮し、その場合は自動的に_indexを追加します。</target>
        </trans-unit>
        <trans-unit id="f42ca910b8cf2641923a9b3307cb94acee7c74ce" translate="yes" xml:space="preserve">
          <source>The route name (if any)</source>
          <target state="translated">ルート名(あれば</target>
        </trans-unit>
        <trans-unit id="d73914cf8b9c98e84c8b82ff0505113e4b8e3e02" translate="yes" xml:space="preserve">
          <source>The route now exists, but the controller that this route goes to does not. To create it, run this command from the application root:</source>
          <target state="translated">ルートは存在しますが、このルートの先のコントローラは存在しません。これを作成するには、アプリケーションのルートから以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ce667ab0870037991d8f31a5b132c6137e6613ea" translate="yes" xml:space="preserve">
          <source>The route now exists, but the controller that this route goes to does not. To create it, run this command from the engine root:</source>
          <target state="translated">ルートは存在しますが、このルートの先のコントローラは存在しません。これを作成するには、エンジンルートから以下のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="9b9c1a0a0514b0f65210493280e8a71f86fdbca5" translate="yes" xml:space="preserve">
          <source>The route's action.</source>
          <target state="translated">ルートの行動。</target>
        </trans-unit>
        <trans-unit id="163a12e69171016995c19135436c2a61402b497f" translate="yes" xml:space="preserve">
          <source>The route's controller.</source>
          <target state="translated">ルートのコントローラ。</target>
        </trans-unit>
        <trans-unit id="9ea35eca50e9266731ea2e3982089ae64656d971" translate="yes" xml:space="preserve">
          <source>The routes for your application or engine live in the file &lt;code&gt;config/routes.rb&lt;/code&gt; and typically looks like this:</source>
          <target state="translated">アプリケーションまたはエンジンのルートは、 &lt;code&gt;config/routes.rb&lt;/code&gt; ファイルにあり、通常は次のようになります。</target>
        </trans-unit>
        <trans-unit id="d98c7c75f450c601067f23fdeb5247891ee46349" translate="yes" xml:space="preserve">
          <source>The routing module provides URL rewriting in native Ruby. It's a way to redirect incoming requests to controllers and actions. This replaces mod_rewrite rules. Best of all, Rails' Routing works with any web server. Routes are defined in &lt;code&gt;config/routes.rb&lt;/code&gt;.</source>
          <target state="translated">ルーティングモジュールは、ネイティブRubyでURL書き換えを提供します。これは、着信要求をコントローラーとアクションにリダイレクトする方法です。これはmod_rewriteルールを置き換えます。何よりも、RailsのルーティングはどのWebサーバーでも機能します。ルートは &lt;code&gt;config/routes.rb&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="43b869ffdbb23efddcd2f11588a9dd772e5b663c" translate="yes" xml:space="preserve">
          <source>The routing parameters for the route</source>
          <target state="translated">ルートのルーティングパラメータ</target>
        </trans-unit>
        <trans-unit id="5c1e7a884f603d0cb7012c9790df3b850851f848" translate="yes" xml:space="preserve">
          <source>The row is simply removed with an SQL &lt;code&gt;DELETE&lt;/code&gt; statement on the record's primary key, and no callbacks are executed.</source>
          <target state="translated">行は、レコードの主キーに対するSQL &lt;code&gt;DELETE&lt;/code&gt; ステートメントで単純に削除され、コールバックは実行されません。</target>
        </trans-unit>
        <trans-unit id="57647ca6535b32390105386b22f168aaa4fd171c" translate="yes" xml:space="preserve">
          <source>The safety bit is lost always, no matter whether the transformation actually changed something.</source>
          <target state="translated">変形が実際に何かを変えたかどうかに関わらず、安全ビットは常に失われています。</target>
        </trans-unit>
        <trans-unit id="aefe907ee6913d67f5922b327093209a576a180b" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;content_for&lt;/code&gt; but when used with streaming flushes straight back to the layout. In other words, if you want to concatenate several times to the same buffer when rendering a given template, you should use &lt;code&gt;content_for&lt;/code&gt;, if not, use &lt;code&gt;provide&lt;/code&gt; to tell the layout to stop looking for more contents.</source>
          <target state="translated">&lt;code&gt;content_for&lt;/code&gt; と同じですが、ストリーミングで使用すると、レイアウトに直接フラッシュされます。つまり、特定のテンプレートをレンダリングするときに同じバッファに複数回連結したい場合は、 &lt;code&gt;content_for&lt;/code&gt; を使用する必要があります。そうでない場合は、 &lt;code&gt;provide&lt;/code&gt; を使用して、レイアウトがコンテンツの検索を停止するように指示します。</target>
        </trans-unit>
        <trans-unit id="9953b98c64e5ffc7f405323c6a791708f94ff6a1" translate="yes" xml:space="preserve">
          <source>The same format can be used to set carbon copy (Cc:) and blind carbon copy (Bcc:) recipients, by using the &lt;code&gt;:cc&lt;/code&gt; and &lt;code&gt;:bcc&lt;/code&gt; keys respectively.</source>
          <target state="translated">同じ形式を使用して、それぞれ &lt;code&gt;:cc&lt;/code&gt; キーと &lt;code&gt;:bcc&lt;/code&gt; キーを使用することにより、カーボンコピー（Cc :)およびブラインドカーボンコピー（Bcc :)の受信者を設定できます。</target>
        </trans-unit>
        <trans-unit id="2e706e64542efdac4f02a3ddcdaaa1983b14beed" translate="yes" xml:space="preserve">
          <source>The same migration could also have been written without using &lt;code&gt;revert&lt;/code&gt; but this would have involved a few more steps: reversing the order of &lt;code&gt;create_table&lt;/code&gt; and &lt;code&gt;reversible&lt;/code&gt;, replacing &lt;code&gt;create_table&lt;/code&gt; by &lt;code&gt;drop_table&lt;/code&gt;, and finally replacing &lt;code&gt;up&lt;/code&gt; by &lt;code&gt;down&lt;/code&gt; and vice-versa. This is all taken care of by &lt;code&gt;revert&lt;/code&gt;.</source>
          <target state="translated">同じ移行も使用せずに書かれている可能性が &lt;code&gt;revert&lt;/code&gt; が、これはさらにいくつかのステップを含んでいたでしょう：の順序逆転 &lt;code&gt;create_table&lt;/code&gt; と &lt;code&gt;reversible&lt;/code&gt; 、交換 &lt;code&gt;create_table&lt;/code&gt; により &lt;code&gt;drop_table&lt;/code&gt; 、そして最終的に置き換える &lt;code&gt;up&lt;/code&gt; により &lt;code&gt;down&lt;/code&gt; し、その逆。これはすべて &lt;code&gt;revert&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="ae2cbbfb58ef1b4d1438f7be95f11bb462578b7d" translate="yes" xml:space="preserve">
          <source>The same remarks about ordering made above apply. In particular, you can specify individual files and they are compiled in the order specified. For example, you might concatenate three CSS files together this way:</source>
          <target state="translated">順番については、上記と同様の注意事項が適用されます。特に、個々のファイルを指定することができ、指定された順番でコンパイルされます。例えば、3つのCSSファイルをこのように連結することができます。</target>
        </trans-unit>
        <trans-unit id="f697c996741525baca91a161ef79961528f0bca1" translate="yes" xml:space="preserve">
          <source>The same works with &lt;code&gt;javascript_include_tag&lt;/code&gt;:</source>
          <target state="translated">同じことが &lt;code&gt;javascript_include_tag&lt;/code&gt; でも機能します。</target>
        </trans-unit>
        <trans-unit id="a2261c96796ab795ed35937e8774ef8812b143b7" translate="yes" xml:space="preserve">
          <source>The schema above declares a table with two columns: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Each row of this table represents a certain product with these two parameters. Thus, you would be able to write code like the following:</source>
          <target state="translated">上記のスキーマは、 &lt;code&gt;id&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; の2つの列を持つテーブルを宣言しています。この表の各行は、これら2つのパラメーターを持つ特定の製品を表しています。したがって、次のようなコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="902eca9fb9857fe6b9624eac04a7cecf345099d8" translate="yes" xml:space="preserve">
          <source>The schema dumper adds two additional configuration options:</source>
          <target state="translated">スキーマダンパは、2つの設定オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="ffc159d804a9b963f31a83ad9fbb61b806f8e16a" translate="yes" xml:space="preserve">
          <source>The schema still contains `category`, but now the model omits it, so any meta-driven code or schema caching will not attempt to use the column:</source>
          <target state="translated">スキーマにはまだ `category` が含まれていますが、現在はモデルがそれを省略しているので、メタ駆動型のコードやスキーマキャッシングはカラムを使用しようとしません。</target>
        </trans-unit>
        <trans-unit id="0c53c10237ef4bddb7676d2ae3b7456838e0a982" translate="yes" xml:space="preserve">
          <source>The screenshot will be displayed in your console, if supported.</source>
          <target state="translated">スクリーンショットは、サポートされていればコンソールに表示されます。</target>
        </trans-unit>
        <trans-unit id="abfd5ddb1b891ad695041019063c671d48b40a8e" translate="yes" xml:space="preserve">
          <source>The search, telephone, date, time, color, datetime, datetime-local, month, week, URL, email, number, and range inputs are HTML5 controls. If you require your app to have a consistent experience in older browsers, you will need an HTML5 polyfill (provided by CSS and/or JavaScript). There is definitely &lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;no shortage of solutions for this&lt;/a&gt;, although a popular tool at the moment is &lt;a href=&quot;https://modernizr.com/&quot;&gt;Modernizr&lt;/a&gt;, which provides a simple way to add functionality based on the presence of detected HTML5 features.</source>
          <target state="translated">検索、電話、日付、時刻、色、日時、日時ローカル、月、週、URL、電子メール、数値、および範囲の入力は、HTML5コントロールです。古いブラウザで一貫したエクスペリエンスをアプリに持たせる必要がある場合は、HTML5ポリフィル（CSSやJavaScriptで提供）が必要です。現時点で人気のあるツールである&lt;a href=&quot;https://modernizr.com/&quot;&gt;Modernizrは&lt;/a&gt;、検出されたHTML5機能の存在に基づいて機能を追加する簡単な方法を提供しますが、&lt;a href=&quot;https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills&quot;&gt;このためのソリューションに&lt;/a&gt;間違いなく不足はありません。</target>
        </trans-unit>
        <trans-unit id="d921cbf4d775ce5249e42b24eb44f85bf4cbff38" translate="yes" xml:space="preserve">
          <source>The second argument indicates whether the callback is to be run &lt;code&gt;:before&lt;/code&gt;, &lt;code&gt;:after&lt;/code&gt;, or &lt;code&gt;:around&lt;/code&gt; the event. If omitted, &lt;code&gt;:before&lt;/code&gt; is assumed. This means the first example above can also be written as:</source>
          <target state="translated">2番目の引数は、コールバックをイベントの &lt;code&gt;:before&lt;/code&gt; に &lt;code&gt;:after&lt;/code&gt; before、：after、または &lt;code&gt;:around&lt;/code&gt; のどちらで実行するかを示します。省略した場合、 &lt;code&gt;:before&lt;/code&gt; が想定されます。つまり、上記の最初の例は次のように書くこともできます。</target>
        </trans-unit>
        <trans-unit id="9af4d188053d675b615bd09c5b2ebeed2870fe55" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;indent_string&lt;/code&gt;, specifies which indent string to use. The default is &lt;code&gt;nil&lt;/code&gt;, which tells the method to make a guess by peeking at the first indented line, and fallback to a space if there is none.</source>
          <target state="translated">2番目の引数 &lt;code&gt;indent_string&lt;/code&gt; は、使用するインデント文字列を指定します。デフォルトは &lt;code&gt;nil&lt;/code&gt; です。これは、最初のインデントされた行をピークから推測して、何もない場合はスペースにフォールバックするようにメソッドに指示します。</target>
        </trans-unit>
        <trans-unit id="4cb8c9f7b08002ccee566978dd1cbdbd3f7197a5" translate="yes" xml:space="preserve">
          <source>The second argument, &lt;code&gt;indent_string&lt;/code&gt;, specifies which indent string to use. The default is &lt;code&gt;nil&lt;/code&gt;, which tells the method to make an educated guess peeking at the first indented line, and fallback to a space if there is none.</source>
          <target state="translated">2番目の引数 &lt;code&gt;indent_string&lt;/code&gt; は、使用するインデント文字列を指定します。デフォルトは &lt;code&gt;nil&lt;/code&gt; です。これは、最初のインデントされた行で知識に基づいた推測をピークにし、存在しない場合はスペースにフォールバックするようにメソッドに指示します。</target>
        </trans-unit>
        <trans-unit id="b0c1c629ea994f2987ea56b45bca30e917233746" translate="yes" xml:space="preserve">
          <source>The second feature of the asset pipeline is asset minification or compression. For CSS files, this is done by removing whitespace and comments. For JavaScript, more complex processes can be applied. You can choose from a set of built in options or specify your own.</source>
          <target state="translated">アセットパイプラインの2つ目の機能は、アセットのミニ化または圧縮です。CSS ファイルの場合、これは空白やコメントを削除することで行われます。JavaScript の場合は、より複雑な処理を適用することができます。ビルトインされたオプションのセットから選択するか、独自のオプションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="fe9a2783619d59158ecacd99966e8ff4873dee03" translate="yes" xml:space="preserve">
          <source>The second line can safely access the &quot;type&quot; key, and let the user to pass either &lt;code&gt;:type&lt;/code&gt; or &quot;type&quot;.</source>
          <target state="translated">2行目は「type」キーに安全にアクセスでき、ユーザーに &lt;code&gt;:type&lt;/code&gt; または「type」のいずれかを渡させます。</target>
        </trans-unit>
        <trans-unit id="c5b46933582d278e942545f1f09e4e2181c0c75a" translate="yes" xml:space="preserve">
          <source>The second line can safely access the &lt;code&gt;:params&lt;/code&gt; key, and let the user to pass either &lt;code&gt;:params&lt;/code&gt; or &quot;params&quot;.</source>
          <target state="translated">2行目は &lt;code&gt;:params&lt;/code&gt; キーに安全にアクセスでき、ユーザーは &lt;code&gt;:params&lt;/code&gt; または &quot;params&quot;のいずれかを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="87370f63b750b398e3d1d2d4d7ac881a34411734" translate="yes" xml:space="preserve">
          <source>The second render just defines the partial template we want to render, &lt;code&gt;comments/form&lt;/code&gt;. Rails is smart enough to spot the forward slash in that string and realize that you want to render the &lt;code&gt;_form.html.erb&lt;/code&gt; file in the &lt;code&gt;app/views/comments&lt;/code&gt; directory.</source>
          <target state="translated">2番目のレンダリングは、レンダリングする部分テンプレート（ &lt;code&gt;comments/form&lt;/code&gt; を定義するだけです。Railsは、その文字列内のスラッシュを &lt;code&gt;_form.html.erb&lt;/code&gt; て、 &lt;code&gt;app/views/comments&lt;/code&gt; ディレクトリにある_form.html.erbファイルをレンダリングしたいことに気づくほど賢いです。</target>
        </trans-unit>
        <trans-unit id="95d2464bf033dbb44e211484579e31d9b961dbc8" translate="yes" xml:space="preserve">
          <source>The second time the same query is run against the database, it's not actually going to hit the database. The first time the result is returned from the query it is stored in the query cache (in memory) and the second time it's pulled from memory.</source>
          <target state="translated">2回目に同じクエリをデータベースに対して実行しても、実際にはデータベースにヒットすることはありません。クエリから最初に結果が返されたときには、それは(メモリ内の)クエリキャッシュに格納され、2回目にはメモリから引き出されます。</target>
        </trans-unit>
        <trans-unit id="8ff3ec58f06e1cf34a733e22ed5738cc9d78e9b3" translate="yes" xml:space="preserve">
          <source>The second validation declares that a &lt;code&gt;body&lt;/code&gt; value must also be present. Additionally, it declares that the &lt;code&gt;body&lt;/code&gt; value must be at least 10 characters long.</source>
          <target state="translated">2番目の検証では、 &lt;code&gt;body&lt;/code&gt; 値も存在する必要があることを宣言しています。さらに、 &lt;code&gt;body&lt;/code&gt; 値は少なくとも10文字の長さでなければならないことを宣言しています。</target>
        </trans-unit>
        <trans-unit id="3efc4a8e9d7945b1d7f7a23ba4380c75006156f2" translate="yes" xml:space="preserve">
          <source>The second way is to use a class (actually, any object that responds to the right methods will do) to handle the filtering. This is useful in cases that are more complex and cannot be implemented in a readable and reusable way using the two other methods. As an example, you could rewrite the login filter again to use a class:</source>
          <target state="translated">2 つ目の方法は、フィルタリングを処理するためにクラス (実際には、適切なメソッドに応答するオブジェクトであればどんなものでもよい)を使用することです。これはより複雑で、他の2つのメソッドを使っても読みやすく再利用可能な方法で実装できない場合に便利です。例として、ログインフィルタをクラスを使うように再度書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="61a71f83c97ed525d6c4921cbda3d9a74c8be32f" translate="yes" xml:space="preserve">
          <source>The second way is using a block:</source>
          <target state="translated">2つ目の方法は、ブロックを使う方法です。</target>
        </trans-unit>
        <trans-unit id="ee3dafb008288f3fc62bfe8b4c6a215bc537e4d7" translate="yes" xml:space="preserve">
          <source>The second way to declare a many-to-many relationship is to use &lt;code&gt;has_many :through&lt;/code&gt;. This makes the association indirectly, through a join model:</source>
          <target state="translated">多対多の関係を宣言する2番目の方法は、 &lt;code&gt;has_many :through&lt;/code&gt; を使用することです。これにより、結合モデルを介して間接的に関連付けが行われます。</target>
        </trans-unit>
        <trans-unit id="5be71a74ba22ce6b2dedd769c1778c19f8234b4b" translate="yes" xml:space="preserve">
          <source>The secrets kept in credentials file are accessible via &lt;code&gt;Rails.application.credentials&lt;/code&gt;. For example, with the following decrypted &lt;code&gt;config/credentials.yml.enc&lt;/code&gt;:</source>
          <target state="translated">クレデンシャルファイルに保存されているシークレットには、 &lt;code&gt;Rails.application.credentials&lt;/code&gt; からアクセスできます。たとえば、次の復号化された &lt;code&gt;config/credentials.yml.enc&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="c32777ba2c91a6de93a05febdd555f4b3337b2e7" translate="yes" xml:space="preserve">
          <source>The section &lt;em&gt;Customizing Inflections&lt;/em&gt; below documents ways to override this default.</source>
          <target state="translated">以下の「&lt;em&gt;語尾変化のカスタマイズ&lt;/em&gt;」セクションでは、このデフォルトをオーバーライドする方法について説明しています。</target>
        </trans-unit>
        <trans-unit id="3ab74d6898ce4ece91f996260f25f8432949724d" translate="yes" xml:space="preserve">
          <source>The section about session fixation introduced the problem of maintained sessions. An attacker maintaining a session every five minutes can keep the session alive forever, although you are expiring sessions. A simple solution for this would be to add a &lt;code&gt;created_at&lt;/code&gt; column to the sessions table. Now you can delete sessions that were created a long time ago. Use this line in the sweep method above:</source>
          <target state="translated">セッションの固定に関するセクションでは、維持されたセッションの問題が導入されました。5分ごとにセッションを維持している攻撃者は、セッションの有効期限が切れても、セッションを永久に存続させることができます。これに対する簡単な解決策は、セッションテーブルに &lt;code&gt;created_at&lt;/code&gt; 列を追加することです。これで、かなり前に作成されたセッションを削除できます。上記のスイープメソッドでこの行を使用します。</target>
        </trans-unit>
        <trans-unit id="1f6120da2c879830bdb45596b1660515dc2d88c6" translate="yes" xml:space="preserve">
          <source>The security landscape shifts and it is important to keep up to date, because missing a new vulnerability can be catastrophic. You can find additional resources about (Rails) security here:</source>
          <target state="translated">セキュリティの状況は変化しており、新しい脆弱性を見逃すと壊滅的な被害を受ける可能性があるため、最新の情報を入手しておくことが重要です。(Rails)セキュリティに関するその他のリソースはこちらからご覧いただけます。</target>
        </trans-unit>
        <trans-unit id="7126ad7da26114aa98cd24f05b132e044ab649ab" translate="yes" xml:space="preserve">
          <source>The selects are prepared for multi-parameter assignment to an Active Record object.</source>
          <target state="translated">セレクトは、アクティブレコードオブジェクトに複数のパラメータを割り当てるために準備されています。</target>
        </trans-unit>
        <trans-unit id="67fc72ff072f14ae4ea568c8c44418a72eccad87" translate="yes" xml:space="preserve">
          <source>The server can be run on a different port using the &lt;code&gt;-p&lt;/code&gt; option. The default development environment can be changed using &lt;code&gt;-e&lt;/code&gt;.</source>
          <target state="translated">サーバーは、 &lt;code&gt;-p&lt;/code&gt; オプションを使用して別のポートで実行できます。デフォルトの開発環境は、 &lt;code&gt;-e&lt;/code&gt; を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="f626801485519e4714c541015bc3033414f53387" translate="yes" xml:space="preserve">
          <source>The server sends a response containing the HTML back to the browser.</source>
          <target state="translated">サーバーは、HTMLを含むレスポンスをブラウザに送り返します。</target>
        </trans-unit>
        <trans-unit id="6f096bb4e5d5d5c6145e30b812288136686222e7" translate="yes" xml:space="preserve">
          <source>The setup in Rails allows you to easily change how the switching is done and what parameters it's based on. Let's say you want to use a cookie instead of a session to decide when to swap connections. You can write your own class:</source>
          <target state="translated">Railsでの設定では、どのように切り替えを行うのか、どのようなパラメータに基づいているのかを簡単に変更することができます。接続を切り替えるタイミングを決めるためにセッションではなくクッキーを使いたいとしましょう。独自のクラスを書くことができます。</target>
        </trans-unit>
        <trans-unit id="bf940f74e13a7a42bdf13e37d4c4acbb4d699793" translate="yes" xml:space="preserve">
          <source>The show action in the above controller would have all parameter values encoded as ASCII-8BIT. This is useful in the case where an application must handle data but encoding of the data is unknown, like file system data.</source>
          <target state="translated">上記のコントローラのshowアクションは、すべてのパラメータ値をASCII-8BITとしてエンコードします。これは、アプリケーションがデータを処理しなければならないが、ファイルシステムデータのようにデータのエンコーディングが不明な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="9fb10354b4e9f1b98e97daca2e9598a177524248" translate="yes" xml:space="preserve">
          <source>The signed ID is also used to create stable URLs for the blob through the BlobsController.</source>
          <target state="translated">また、署名付きのIDは、BlobsControllerを介してブロブの安定したURLを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ce32a93e4064970c8546be14bb4215b30b4ef348" translate="yes" xml:space="preserve">
          <source>The simplest rule of thumb is that you should set up a &lt;code&gt;has_many :through&lt;/code&gt; relationship if you need to work with the relationship model as an independent entity. If you don't need to do anything with the relationship model, it may be simpler to set up a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; relationship (though you'll need to remember to create the joining table in the database).</source>
          <target state="translated">最も単純な経験則は、リレーションシップモデルを独立したエンティティとして使用する必要がある場合は、 &lt;code&gt;has_many :through&lt;/code&gt; リレーションシップを設定することです。リレーションシップモデルで何もする必要がない場合は、 &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; リレーションシップを設定する方が簡単な場合があります（ただし、データベースに結合テーブルを作成することを覚えておく必要があります）。</target>
        </trans-unit>
        <trans-unit id="20504bd60dd726d82fcb6ff496945b67c5bac04a" translate="yes" xml:space="preserve">
          <source>The simplest template that would work in this case would be one located at &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;. The extension of this file name is important: the first extension is the &lt;em&gt;format&lt;/em&gt; of the template, and the second extension is the &lt;em&gt;handler&lt;/em&gt; that will be used to render the template. Rails is attempting to find a template called &lt;code&gt;articles/new&lt;/code&gt; within &lt;code&gt;app/views&lt;/code&gt; for the application. The format for this template can only be &lt;code&gt;html&lt;/code&gt; and the default handler for HTML is &lt;code&gt;erb&lt;/code&gt;. Rails uses other handlers for other formats. &lt;code&gt;builder&lt;/code&gt; handler is used to build XML templates and &lt;code&gt;coffee&lt;/code&gt; handler uses CoffeeScript to build JavaScript templates. Since you want to create a new HTML form, you will be using the &lt;code&gt;ERB&lt;/code&gt; language which is designed to embed Ruby in HTML.</source>
          <target state="translated">この場合に機能する最も単純なテンプレートは、 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; にあるテンプレートです。このファイル名の拡張子は重要です。最初の拡張子はテンプレートの&lt;em&gt;形式&lt;/em&gt;で、2番目の拡張子はテンプレートのレンダリングに使用される&lt;em&gt;ハンドラー&lt;/em&gt;です。 Railsは、アプリケーションの &lt;code&gt;app/views&lt;/code&gt; 内で、 &lt;code&gt;articles/new&lt;/code&gt; というテンプレートを見つけようとしています。このテンプレートの形式は &lt;code&gt;html&lt;/code&gt; のみで、HTMLのデフォルトのハンドラーは &lt;code&gt;erb&lt;/code&gt; です。 Railsは他のフォーマット用に他のハンドラーを使用します。 &lt;code&gt;builder&lt;/code&gt; ハンドラーは、XMLテンプレートと &lt;code&gt;coffee&lt;/code&gt; を構築するために使用されますハンドラーはCoffeeScriptを使用してJavaScriptテンプレートを作成します。新しいHTMLフォームを作成するため、RubyをHTMLに埋め込むように設計された &lt;code&gt;ERB&lt;/code&gt; 言語を使用します。</target>
        </trans-unit>
        <trans-unit id="29e2b5e147c1b372744d171d51ecfd514b5b40e6" translate="yes" xml:space="preserve">
          <source>The solution to this is best to &lt;em&gt;process media files asynchronously&lt;/em&gt;: Save the media file and schedule a processing request in the database. A second process will handle the processing of the file in the background.</source>
          <target state="translated">これに対する解決策は、&lt;em&gt;メディアファイルを非同期で処理するのに&lt;/em&gt;最適&lt;em&gt;です&lt;/em&gt;。メディアファイルを保存し、データベースに処理要求をスケジュールします。2番目のプロセスは、ファイルの処理をバックグラウンドで処理します。</target>
        </trans-unit>
        <trans-unit id="fcaaa7261c7e1496228fcd0f857e65f05c064de9" translate="yes" xml:space="preserve">
          <source>The speak action simply uses the Chat::Room object that was created when the channel was first subscribed to by the consumer when that subscriber wants to say something in the room.</source>
          <target state="translated">speak アクションは、チャンネルが最初に購読されたときに作成された Chat::Room オブジェクトを使用して、購読者がルーム内で何かを言いたいときに使用します。</target>
        </trans-unit>
        <trans-unit id="1bdd39fb0d2e38471f75ef10005c947a24983c76" translate="yes" xml:space="preserve">
          <source>The special syntax &lt;code&gt;:id&lt;/code&gt; tells rails that this route expects an &lt;code&gt;:id&lt;/code&gt; parameter, which in our case will be the id of the article.</source>
          <target state="translated">特別な構文 &lt;code&gt;:id&lt;/code&gt; は、このルートが &lt;code&gt;:id&lt;/code&gt; パラメータを想定していることをrailsに伝えます。</target>
        </trans-unit>
        <trans-unit id="e9e8a45a7c799b646c1a99d6f999c5114cf4bf41" translate="yes" xml:space="preserve">
          <source>The specified URL will then be passed a &lt;a href=&quot;../../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object containing the selected file, or if the field was left blank, a StringIO object.</source>
          <target state="translated">指定されたURLには、選択したファイルを含む&lt;a href=&quot;../../file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;オブジェクトが渡されます。フィールドが空白のままの場合は、StringIOオブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="d21a3746c58b2424072639a95cdac84836fee217" translate="yes" xml:space="preserve">
          <source>The specified URL will then be passed a &lt;a href=&quot;../../file&quot;&gt;File&lt;/a&gt; object containing the selected file, or if the field was left blank, a StringIO object.</source>
          <target state="translated">指定されたURLには、選択されたファイルを含む&lt;a href=&quot;../../file&quot;&gt;File&lt;/a&gt;オブジェクトが渡されます。フィールドが空白のままの場合は、StringIOオブジェクトが渡されます。</target>
        </trans-unit>
        <trans-unit id="2a90b5c619bbc6a71675b667b03350ade98a639f" translate="yes" xml:space="preserve">
          <source>The standard set of helper methods for form building are located in the &lt;code&gt;field_helpers&lt;/code&gt; class attribute.</source>
          <target state="translated">フォーム作成用の標準のヘルパーメソッドのセットは、 &lt;code&gt;field_helpers&lt;/code&gt; クラス属性にあります。</target>
        </trans-unit>
        <trans-unit id="4d57b2839976977694e926113e1db0d9b1557222" translate="yes" xml:space="preserve">
          <source>The status code can either be a standard &lt;a href=&quot;https://www.iana.org/assignments/http-status-codes&quot;&gt;HTTP Status code&lt;/a&gt; as an integer, or a symbol representing the downcased, underscored and symbolized description. Note that the status code must be a 3xx HTTP code, or redirection will not occur.</source>
          <target state="translated">&lt;a href=&quot;https://www.iana.org/assignments/http-status-codes&quot;&gt;ステータスコード&lt;/a&gt;は、整数としての標準のHTTPステータスコード、または小文字、アンダースコア、記号で表された説明を表すシンボルのいずれかです。ステータスコードは3xx HTTPコードである必要があります。そうでない場合、リダイレクトは発生しません。</target>
        </trans-unit>
        <trans-unit id="dab910766bcf61ff2b6b105149ac996ae15cafe0" translate="yes" xml:space="preserve">
          <source>The stored attribute names can be retrieved using .stored_attributes.</source>
          <target state="translated">ストアドされた属性名は、.stored_attributesを使用して取得することができます。</target>
        </trans-unit>
        <trans-unit id="47747cd71d2b363e8477e4247c0b31b077637c9e" translate="yes" xml:space="preserve">
          <source>The string of characters in the middle is a template tree digest. It is a hash digest computed based on the contents of the view fragment you are caching. If you change the view fragment (e.g., the HTML changes), the digest will change, expiring the existing file.</source>
          <target state="translated">真ん中の文字列はテンプレートツリーのダイジェストです。これは、キャッシュしているビューフラグメントの内容に基づいて計算されたハッシュダイジェストです。ビューフラグメントを変更した場合 (例えば HTML が変更された場合)、ダイジェストは変更され、既存のファイルは期限切れとなります。</target>
        </trans-unit>
        <trans-unit id="06fa98d1baa28477f3254b368c8fb59ce8ee67d7" translate="yes" xml:space="preserve">
          <source>The string pairs &amp;ldquo;key=value&amp;rdquo; that conform the query string are sorted lexicographically in ascending order.</source>
          <target state="translated">クエリ文字列に一致する文字列ペア「key = value」は、辞書順に昇順でソートされます。</target>
        </trans-unit>
        <trans-unit id="64f19a2a1cf8db7cc04037d9a665651ea6cfea93" translate="yes" xml:space="preserve">
          <source>The strong parameter API was designed with the most common use cases in mind. It is not meant as a silver bullet to handle all of your parameter filtering problems. However, you can easily mix the API with your own code to adapt to your situation.</source>
          <target state="translated">強力なパラメータAPIは、最も一般的なユースケースを念頭に置いて設計されています。これは、パラメータフィルタリングの問題をすべて処理するための銀の弾丸ではありません。しかし、あなたの状況に合わせて API を独自のコードと簡単に組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="a2d753308a3640e6bb4732791ff859ebc9145332" translate="yes" xml:space="preserve">
          <source>The submit button is automatically given an appropriate text value.</source>
          <target state="translated">送信ボタンには自動的に適切なテキスト値が与えられます。</target>
        </trans-unit>
        <trans-unit id="64aeaa7e8af743f68b89426602efeec47b839e41" translate="yes" xml:space="preserve">
          <source>The suffix string to append to every table name.</source>
          <target state="translated">すべてのテーブル名に追加するサフィックス文字列。</target>
        </trans-unit>
        <trans-unit id="c231da1b10c4104be616e8c614640770820e58c1" translate="yes" xml:space="preserve">
          <source>The sum of an empty collection is zero by default, but this is customizable:</source>
          <target state="translated">空のコレクションの合計はデフォルトでは0ですが、これはカスタマイズ可能です。</target>
        </trans-unit>
        <trans-unit id="e0f6f599baf2275dfb5a4aa872b6058539d06ebe" translate="yes" xml:space="preserve">
          <source>The sum of an empty receiver can be customized in this form as well:</source>
          <target state="translated">空の受信機の合計は、この形式でもカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="85b2addcb5be78afc0c6fb0986c7aafdb8dd27d1" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;many&quot;&gt;&lt;code&gt;ActiveStorage::Attached::Many&lt;/code&gt;&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;#attach&lt;/code&gt;.</source>
          <target state="translated">このシステムは、&lt;a href=&quot;many&quot;&gt; &lt;code&gt;ActiveStorage::Attached::Many&lt;/code&gt; &lt;/a&gt; &lt;code&gt;#attach&lt;/code&gt; :: Manyプロキシを経由するように設計されており、＃attachのようにアソシエーションとファクトリメソッドに動的プロキシを提供します。</target>
        </trans-unit>
        <trans-unit id="1980a1d02d3b53fd80ac4e2d7c492dc10cf6c43f" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;many&quot;&gt;ActiveStorage::Attached::Many&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;#attach&lt;/code&gt;.</source>
          <target state="translated">このシステムは、 &lt;code&gt;#attach&lt;/code&gt; などの関連付けやファクトリメソッドに動的プロキシを提供する&lt;a href=&quot;many&quot;&gt;ActiveStorage :: Attached :: Many&lt;/a&gt;プロキシを経由するように設計されています。</target>
        </trans-unit>
        <trans-unit id="88383070a5f80fa3b1e58808f444a7e943270336" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;one&quot;&gt;&lt;code&gt;ActiveStorage::Attached::One&lt;/code&gt;&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;attach&lt;/code&gt;.</source>
          <target state="translated">システムは、&lt;a href=&quot;one&quot;&gt; &lt;code&gt;ActiveStorage::Attached::One&lt;/code&gt; &lt;/a&gt; &lt;code&gt;attach&lt;/code&gt; :: Oneプロキシを経由するように設計されており、attachなどのアソシエーションおよびファクトリメソッドに動的プロキシを提供します。</target>
        </trans-unit>
        <trans-unit id="c6ebe8a2a1f772cd708e9b2d8a544a7d7601a8a9" translate="yes" xml:space="preserve">
          <source>The system has been designed to having you go through the &lt;a href=&quot;one&quot;&gt;ActiveStorage::Attached::One&lt;/a&gt; proxy that provides the dynamic proxy to the associations and factory methods, like &lt;code&gt;attach&lt;/code&gt;.</source>
          <target state="translated">このシステムは、&lt;a href=&quot;one&quot;&gt;ActiveStorage :: Attached :: One&lt;/a&gt;プロキシを介して、 &lt;code&gt;attach&lt;/code&gt; などの関連付けとファクトリメソッドに動的プロキシを提供するように設計されています。</target>
        </trans-unit>
        <trans-unit id="ffb7d9e85d8c423cb49ef35ffe1f58ff36aea978" translate="yes" xml:space="preserve">
          <source>The system test directory holds system tests, which are used for full browser testing of your application. System tests allow you to test your application the way your users experience it and help you test your JavaScript as well. System tests inherit from Capybara and perform in browser tests for your application.</source>
          <target state="translated">システムテストディレクトリにはシステムテストがあり、アプリケーションのフルブラウザテストに使用されます。システムテストは、ユーザーが体験する方法でアプリケーションをテストし、JavaScriptのテストにも役立ちます。システムテストは Capybara を継承し、アプリケーションのブラウザテストで実行します。</target>
        </trans-unit>
        <trans-unit id="6c61cb8c1e81d7702d9e362c4a46ecd45bc1e6ec" translate="yes" xml:space="preserve">
          <source>The table name for &lt;code&gt;Blog::Post&lt;/code&gt; should be &lt;code&gt;blog_posts&lt;/code&gt; due to the existence of the method &lt;code&gt;Blog.table_name_prefix&lt;/code&gt;. However, if &lt;code&gt;app/models/blog/post.rb&lt;/code&gt; is executed before &lt;code&gt;app/models/blog.rb&lt;/code&gt; is, Active Record is not aware of the existence of such method, and assumes the table is &lt;code&gt;posts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Blog.table_name_prefix&lt;/code&gt; メソッドが存在するため、 &lt;code&gt;Blog::Post&lt;/code&gt; のテーブル名は &lt;code&gt;blog_posts&lt;/code&gt; にする必要があります。ただし、 &lt;code&gt;app/models/blog/post.rb&lt;/code&gt; が &lt;code&gt;app/models/blog.rb&lt;/code&gt; よりも前に実行された場合、Active Recordはそのようなメソッドの存在を認識せず、テーブルが &lt;code&gt;posts&lt;/code&gt; であると見なします。</target>
        </trans-unit>
        <trans-unit id="e226fbd01d0f3a577c7b4944a32ddf8e19e4f6ff" translate="yes" xml:space="preserve">
          <source>The tables for these classes could look something like:</source>
          <target state="translated">これらのクラスのテーブルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b607a63d813d085dd13611c891d91b17902f9714" translate="yes" xml:space="preserve">
          <source>The tag builder respects &lt;a href=&quot;https://www.w3.org/TR/html5/syntax.html#void-elements&quot;&gt;HTML5 void elements&lt;/a&gt; if no content is passed, and omits closing tags for those elements.</source>
          <target state="translated">コンテンツが渡されない場合、タグビルダーは&lt;a href=&quot;https://www.w3.org/TR/html5/syntax.html#void-elements&quot;&gt;HTML5 void要素を&lt;/a&gt;尊重し、それらの要素の終了タグを省略します。</target>
        </trans-unit>
        <trans-unit id="675b6b8a4bce863060710a5c9d10379e1bb08bad" translate="yes" xml:space="preserve">
          <source>The target can be anything callable within the object, e.g. instance variables, methods, constants, etc.</source>
          <target state="translated">ターゲットは、インスタンス変数、メソッド、定数など、オブジェクト内で呼び出し可能なものであれば何でも構いません。</target>
        </trans-unit>
        <trans-unit id="baa685d8cc36701c6d0f85459c13777a362b6065" translate="yes" xml:space="preserve">
          <source>The target can be anything callable within the object, e.g. instance variables, methods, constants, etc. Only the public methods of the target are delegated.</source>
          <target state="translated">ターゲットは、インスタンス変数、メソッド、定数など、オブジェクト内で呼び出し可能なものであれば何でも構いません。ターゲットのパブリックメソッドのみがデリゲートされます。</target>
        </trans-unit>
        <trans-unit id="6ccd69b0632a038b4775e1137e3438272e0689a3" translate="yes" xml:space="preserve">
          <source>The target method must be public, otherwise it will raise &lt;code&gt;NoMethodError&lt;/code&gt;.</source>
          <target state="translated">ターゲットメソッドはパブリックである必要があります。そうでない場合、 &lt;code&gt;NoMethodError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="97e918c05349a4e966ec6c625bebb25ec81486ac" translate="yes" xml:space="preserve">
          <source>The technique Sprockets uses for fingerprinting is to insert a hash of the content into the name, usually at the end. For example a CSS file &lt;code&gt;global.css&lt;/code&gt;</source>
          <target state="translated">Sprocketsがフィンガープリント作成に使用する手法は、コンテンツのハッシュを名前の通常最後に挿入することです。たとえば、CSSファイル &lt;code&gt;global.css&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a5e1b46915f509c3c7c7826ece3ecda8e4ab7d6" translate="yes" xml:space="preserve">
          <source>The tempfile is automatically closed and unlinked after the given block is executed.</source>
          <target state="translated">指定されたブロックが実行されると、 tempfile は自動的に閉じられ、リンクが解除されます。</target>
        </trans-unit>
        <trans-unit id="08851009cfd2022992ccb98a459841a4bbcf4922" translate="yes" xml:space="preserve">
          <source>The tempfile's name is prefixed with &lt;code&gt;ActiveStorage-&lt;/code&gt; and the blob's ID. Its extension matches that of the blob.</source>
          <target state="translated">一時ファイルの名前には、 &lt;code&gt;ActiveStorage-&lt;/code&gt; とblobのID がプレフィックスとして付加されます。その拡張子はblobの拡張子と一致します。</target>
        </trans-unit>
        <trans-unit id="fcda92529a81d9af722ac3cb13fb8f8768ff4cb9" translate="yes" xml:space="preserve">
          <source>The template digest that's added to the cache key is computed by taking an MD5 of the contents of the entire template file. This ensures that your caches will automatically expire when you change the template file.</source>
          <target state="translated">キャッシュキーに追加されるテンプレートダイジェストは、テンプレートファイル全体の内容の MD5 を取得して計算されます。これにより、テンプレートファイルを変更したときにキャッシュが自動的に期限切れになることを保証します。</target>
        </trans-unit>
        <trans-unit id="ba538c4449760474d7d60b4c54d76929d5f7fcb3" translate="yes" xml:space="preserve">
          <source>The template will be looked always in &lt;code&gt;app/views/layouts/&lt;/code&gt; folder. But you can point &lt;code&gt;layouts&lt;/code&gt; folder direct also. &lt;code&gt;layout &quot;layouts/demo&quot;&lt;/code&gt; is the same as &lt;code&gt;layout
&quot;demo&quot;&lt;/code&gt;.</source>
          <target state="translated">テンプレートは常に &lt;code&gt;app/views/layouts/&lt;/code&gt; フォルダーで検索されます。ただし、 &lt;code&gt;layouts&lt;/code&gt; フォルダーを直接ポイントすることもできます。 &lt;code&gt;layout &quot;layouts/demo&quot;&lt;/code&gt; は、 &lt;code&gt;layout &quot;demo&quot;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="5c5c794abecdd21cff9c4b0a0fde1a6849f77b0f" translate="yes" xml:space="preserve">
          <source>The template will be rendered in a Rack environment which is accessible through ActionController::Renderer#env. You can set it up in two ways:</source>
          <target state="translated">テンプレートは、ActionController::Renderer#env からアクセスできる Rack 環境でレンダリングされます。設定方法は2通りあります。</target>
        </trans-unit>
        <trans-unit id="2cf77bf1c65d71615e432d7b152984771af2f9e1" translate="yes" xml:space="preserve">
          <source>The test adapter should be used only in testing. Along with &lt;code&gt;ActionCable::TestHelper&lt;/code&gt; it makes a great tool to test your Rails application.</source>
          <target state="translated">テストアダプターは、テストでのみ使用する必要があります。 &lt;code&gt;ActionCable::TestHelper&lt;/code&gt; とともに、Railsアプリケーションをテストするための優れたツールになります。</target>
        </trans-unit>
        <trans-unit id="e2f52f540be30e96ad7b0037c64acc9126cfb2d3" translate="yes" xml:space="preserve">
          <source>The test adapter should be used only in testing. Along with &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; and &lt;code&gt;ActiveJob::TestHelper&lt;/code&gt; it makes a great tool to test your Rails application.</source>
          <target state="translated">テストアダプターは、テストでのみ使用する必要があります。 &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; と &lt;code&gt;ActiveJob::TestHelper&lt;/code&gt; それはあなたのRailsアプリケーションをテストするための素晴らしいツールになります。</target>
        </trans-unit>
        <trans-unit id="975aa4be50774a60cf43702b38d9d5f31ba89b40" translate="yes" xml:space="preserve">
          <source>The test for the controller</source>
          <target state="translated">コントローラーのテスト</target>
        </trans-unit>
        <trans-unit id="00a7467e10ff3f397084acc632df42c027f23243" translate="yes" xml:space="preserve">
          <source>The test runner also provides a lot of other features like failing fast, deferring test output at the end of test run and so on. Check the documentation of the test runner as follows:</source>
          <target state="translated">テストランナーは他にも、高速に失敗したり、テスト実行の最後にテスト出力を先送りにしたりと、多くの機能を提供しています。以下のようにテストランナーのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="b6c69ad7de8325a76cdfff0549a2a13fb995582e" translate="yes" xml:space="preserve">
          <source>The test runner also provides a lot of other features like failing fast, deferring test output at the end of the test run and so on. Check the documentation of the test runner as follows:</source>
          <target state="translated">テストランナーは他にも、高速に失敗したり、テスト実行の最後にテスト出力を延期したりと、多くの機能を提供しています。以下のようにテストランナーのドキュメントを確認してください。</target>
        </trans-unit>
        <trans-unit id="640507b7858ee7a8ef9198521e54b0f566518fb9" translate="yes" xml:space="preserve">
          <source>The test should see that there is an &lt;code&gt;h1&lt;/code&gt; on the articles index page and pass.</source>
          <target state="translated">テストでは、記事のインデックスページに &lt;code&gt;h1&lt;/code&gt; があり、合格するはずです。</target>
        </trans-unit>
        <trans-unit id="9b2cf1c313b916f77748246680f4fd2104331502" translate="yes" xml:space="preserve">
          <source>The test will have the following name:</source>
          <target state="translated">テストは以下のような名前になります。</target>
        </trans-unit>
        <trans-unit id="72797504f4efb0607c366b3726d9a06008557676" translate="yes" xml:space="preserve">
          <source>The testing environment will automatically load all the fixtures into the database before each test. To ensure consistent data, the environment deletes the fixtures before running the load.</source>
          <target state="translated">テスト環境は、各テストの前に自動的にすべてのフィクスチャをデータベースにロードします。一貫性のあるデータを確保するために、環境はロードを実行する前にフィクスチャを削除します。</target>
        </trans-unit>
        <trans-unit id="29f0e86770cb31aee986bbcb60bab0de0e063a64" translate="yes" xml:space="preserve">
          <source>The third argument, &lt;code&gt;indent_empty_lines&lt;/code&gt;, is a flag that says whether empty lines should be indented. Default is false.</source>
          <target state="translated">3番目の引数 &lt;code&gt;indent_empty_lines&lt;/code&gt; は、空の行をインデントするかどうかを示すフラグです。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="416d9d9d95fa737fdf9ecf9dd097599dc8c9c7ef" translate="yes" xml:space="preserve">
          <source>The third feature of the asset pipeline is it allows coding assets via a higher-level language, with precompilation down to the actual assets. Supported languages include Sass for CSS, CoffeeScript for JavaScript, and ERB for both by default.</source>
          <target state="translated">アセットパイプラインの3つ目の特徴は、より上位の言語を介してアセットをコーディングし、実際のアセットに至るまでのプリコンパイルを可能にすることです。サポートされている言語は、CSSではSass、JavaScriptではCoffeeScript、デフォルトではどちらもERBとなっています。</target>
        </trans-unit>
        <trans-unit id="11060f387f51981fd82ede832f35a1656221d2dc" translate="yes" xml:space="preserve">
          <source>The third line can safely access the &lt;code&gt;:input&lt;/code&gt; key, and let the user to pass either &lt;code&gt;:input&lt;/code&gt; or &quot;input&quot;.</source>
          <target state="translated">3行目は、 &lt;code&gt;:input&lt;/code&gt; キーに安全にアクセスでき、ユーザーが &lt;code&gt;:input&lt;/code&gt; または &quot;input&quot;のいずれかを渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f12ece5923a813434343679094fa85482f7f8059" translate="yes" xml:space="preserve">
          <source>The threaded parallelization uses minitest's parallel executor directly. The processes parallelization uses a Ruby DRb server.</source>
          <target state="translated">スレッド並列化はminitestの並列実行プログラムを直接使用します。プロセス並列化はRuby DRbサーバを使用します。</target>
        </trans-unit>
        <trans-unit id="6511e3596ea3977b98718f56e83ca7b2c0af377b" translate="yes" xml:space="preserve">
          <source>The threats against web applications include user account hijacking, bypass of access control, reading or modifying sensitive data, or presenting fraudulent content. Or an attacker might be able to install a Trojan horse program or unsolicited e-mail sending software, aim at financial enrichment, or cause brand name damage by modifying company resources. In order to prevent attacks, minimize their impact and remove points of attack, first of all, you have to fully understand the attack methods in order to find the correct countermeasures. That is what this guide aims at.</source>
          <target state="translated">ウェブアプリケーションに対する脅威には、ユーザーアカウントの乗っ取り、アクセス制御の迂回、機密データの読み取りや改ざん、詐欺的なコンテンツの提示などがあります。また、攻撃者はトロイの木馬プログラムや迷惑メール送信ソフトをインストールし、金銭的な豊かさを狙ったり、企業のリソースを改ざんしてブランド名を毀損したりする可能性があります。攻撃を防ぎ、その影響を最小限に抑え、攻撃のポイントを取り除くためには、まず、攻撃手法を十分に理解し、正しい対策を見つけることが必要です。本書はそのようなことを目的としています。</target>
        </trans-unit>
        <trans-unit id="31848326716b8e439bd35853912f7581c2cf69c2" translate="yes" xml:space="preserve">
          <source>The three of them return &lt;code&gt;nil&lt;/code&gt; for blank receivers.</source>
          <target state="translated">それらの3つは、空白のレシーバーに対して &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a86c8236c7a4aa22941361c064142983f59ef501" translate="yes" xml:space="preserve">
          <source>The time is parsed using Time.parse method. If &lt;code&gt;form&lt;/code&gt; is :local, then the time is in the system timezone. If the date part is missing then the current date is used and if the time part is missing then it is assumed to be 00:00:00.</source>
          <target state="translated">時間はTime.parseメソッドを使用して解析されます。 &lt;code&gt;form&lt;/code&gt; が：localの場合、時刻はシステムのタイムゾーンです。日付部分がない場合は現在の日付が使用され、時間部分がない場合は00:00:00と見なされます。</target>
        </trans-unit>
        <trans-unit id="1da1a16a7b055aacdbe4a5e837bd0b5a8550d320" translate="yes" xml:space="preserve">
          <source>The timeline of Rails' initialization sequence.</source>
          <target state="translated">Railsの初期化シーケンスのタイムライン。</target>
        </trans-unit>
        <trans-unit id="d6194f3b2f582790fad265e80912cb271ac73c7b" translate="yes" xml:space="preserve">
          <source>The token parameter is named &lt;code&gt;authenticity_token&lt;/code&gt; by default. The name and value of this token must be added to every layout that renders forms by including &lt;code&gt;csrf_meta_tags&lt;/code&gt; in the HTML &lt;code&gt;head&lt;/code&gt;.</source>
          <target state="translated">トークンパラメータは、デフォルトで &lt;code&gt;authenticity_token&lt;/code&gt; という名前です。このトークンの名前と値は、HTML &lt;code&gt;head&lt;/code&gt; &lt;code&gt;csrf_meta_tags&lt;/code&gt; を含めることにより、フォームをレンダリングするすべてのレイアウトに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="05d8eb590d8e83077814240b2a170f555b1863fe" translate="yes" xml:space="preserve">
          <source>The top portion of the index page displays the users. The bottom portion provides a form to create a new user.</source>
          <target state="translated">インデックスページの上部にはユーザーが表示されます。下の部分は、新しいユーザーを作成するためのフォームを提供します。</target>
        </trans-unit>
        <trans-unit id="e7aaa0ff7f838941cf4d13f0243ddae8be9664af" translate="yes" xml:space="preserve">
          <source>The trailing '_id' can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true (default is false).</source>
          <target state="translated">末尾の '_id'は、オプションのパラメーター &lt;code&gt;keep_id_suffix&lt;/code&gt; をtrue（デフォルトはfalse）に設定することで保持して大文字にすることができます。</target>
        </trans-unit>
        <trans-unit id="a346915612a785e701fb8aa4fb88d6d804e10964" translate="yes" xml:space="preserve">
          <source>The trailing '_id' can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true. By default, this parameter is false.</source>
          <target state="translated">末尾の '_id'は、オプションのパラメーター &lt;code&gt;keep_id_suffix&lt;/code&gt; をtrueに設定することで保持および大文字化できます。デフォルトでは、このパラメーターはfalseです。</target>
        </trans-unit>
        <trans-unit id="aec6fc5c9914c772cee6cc49f306e3312005d4e1" translate="yes" xml:space="preserve">
          <source>The trailing '_id','Id'.. can be kept and capitalized by setting the optional parameter &lt;code&gt;keep_id_suffix&lt;/code&gt; to true. By default, this parameter is false.</source>
          <target state="translated">末尾の '_id'、 'Id' ..は、オプションのパラメーター &lt;code&gt;keep_id_suffix&lt;/code&gt; をtrueに設定することで保持および大文字化できます。デフォルトでは、このパラメーターはfalseです。</target>
        </trans-unit>
        <trans-unit id="c4c9ed39b42fbbb24c8e1e3654de7fd488fd5d48" translate="yes" xml:space="preserve">
          <source>The translated model name, translated attribute name, and value are always available for interpolation as &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;attribute&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; respectively.</source>
          <target state="translated">翻訳されたモデル名、翻訳された属性名、および値は、それぞれ &lt;code&gt;model&lt;/code&gt; 、 &lt;code&gt;attribute&lt;/code&gt; 、および &lt;code&gt;value&lt;/code&gt; として常に補間に使用できます。</target>
        </trans-unit>
        <trans-unit id="0c206e712ab9262a624613a14bf5a4614f215afa" translate="yes" xml:space="preserve">
          <source>The translation denoted as &lt;code&gt;:one&lt;/code&gt; is regarded as singular, and the &lt;code&gt;:other&lt;/code&gt; is used as plural. If the count is zero, and a &lt;code&gt;:zero&lt;/code&gt; entry is present, then it will be used instead of &lt;code&gt;:other&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:one&lt;/code&gt; と表記された翻訳は単数と見なされ、 &lt;code&gt;:other&lt;/code&gt; は複数と使用されます。カウントがゼロで、 &lt;code&gt;:zero&lt;/code&gt; エントリが存在する場合は、 &lt;code&gt;:other&lt;/code&gt; の代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="817e4fce66d44b8da035cb559bc61fa24de4f850" translate="yes" xml:space="preserve">
          <source>The trick to adding these back in is that, by default, they are passed &lt;code&gt;session_options&lt;/code&gt; when added (including the session key), so you can't just add a &lt;code&gt;session_store.rb&lt;/code&gt; initializer, add &lt;code&gt;use ActionDispatch::Session::CookieStore&lt;/code&gt; and have sessions functioning as usual. (To be clear: sessions may work, but your session options will be ignored - i.e the session key will default to &lt;code&gt;_session_id&lt;/code&gt;)</source>
          <target state="translated">これらを再び追加する秘訣は、デフォルトでは、追加時に &lt;code&gt;session_options&lt;/code&gt; が渡されるため（セッションキーを含む）、 &lt;code&gt;session_store.rb&lt;/code&gt; 初期化子を追加 &lt;code&gt;use ActionDispatch::Session::CookieStore&lt;/code&gt; だけでなく、ActionDispatch :: Session :: CookieStoreを追加してセッションは通常どおり機能します。（明確にするために：セッションは機能する可能性がありますが、セッションオプションは無視されます-つまり、セッションキーはデフォルトで &lt;code&gt;_session_id&lt;/code&gt; になります）</target>
        </trans-unit>
        <trans-unit id="1eaffe2233ce31e6bda12ed1e808ce2e1055683f" translate="yes" xml:space="preserve">
          <source>The truncated text ends with the &lt;code&gt;:omission&lt;/code&gt; string, defaulting to &amp;ldquo;&amp;hellip;&amp;rdquo;, for a total length not exceeding &lt;code&gt;bytesize&lt;/code&gt;.</source>
          <target state="translated">切り詰められたテキストは &lt;code&gt;:omission&lt;/code&gt; &lt;code&gt;bytesize&lt;/code&gt; 文字列で終わり、デフォルトは「&amp;hellip;」で、合計長はbytesizeを超えません。</target>
        </trans-unit>
        <trans-unit id="3ef5f4d61a4d21cbfd235b66e8b63c8804fdf71b" translate="yes" xml:space="preserve">
          <source>The two basic structures are arrays and hashes. Hashes mirror the syntax used for accessing the value in &lt;code&gt;params&lt;/code&gt;. For example, if a form contains:</source>
          <target state="translated">2つの基本的な構造は、配列とハッシュです。ハッシュは、 &lt;code&gt;params&lt;/code&gt; の値にアクセスするために使用される構文を反映しています。たとえば、フォームに次のものが含まれているとします。</target>
        </trans-unit>
        <trans-unit id="4ae6f1958803c95c5af96cee2de8ca60e298f229" translate="yes" xml:space="preserve">
          <source>The two dashes start a comment ignoring everything after it. So the query returns all records from the projects table including those blind to the user. This is because the condition is true for all records.</source>
          <target state="translated">2 つのダッシュは、それ以降のすべてを無視してコメントを開始します。つまり、このクエリは、ユーザーには見えないものも含めて、プロジェクトテーブルのすべてのレコードを返します。これは、条件がすべてのレコードに対して真であるためです。</target>
        </trans-unit>
        <trans-unit id="8942bbf1653c1d3d11b11a9b73ae3e0919f325ce" translate="yes" xml:space="preserve">
          <source>The two files we'll focus on are the migration file (&lt;code&gt;db/migrate/&amp;lt;timestamp&amp;gt;_create_articles.rb&lt;/code&gt;) and the model file (&lt;code&gt;app/models/article.rb&lt;/code&gt;).</source>
          <target state="translated">ここで焦点を当てる2つのファイルは、移行ファイル（ &lt;code&gt;db/migrate/&amp;lt;timestamp&amp;gt;_create_articles.rb&lt;/code&gt; ）とモデルファイル（ &lt;code&gt;app/models/article.rb&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="26baf66a5c5cf8b3ca15d0abd849a6180bb33678" translate="yes" xml:space="preserve">
          <source>The two lines following the request are to handle the redirect we setup when creating a new article.</source>
          <target state="translated">リクエストに続く2行は、新しい記事を作成する際に設定したリダイレクトを処理するためのものです。</target>
        </trans-unit>
        <trans-unit id="6b101fb80aec1c9c2ab48a863fb3cea6d938460e" translate="yes" xml:space="preserve">
          <source>The two main methods for testing your routes:</source>
          <target state="translated">自分のルートをテストする方法は主に2つあります。</target>
        </trans-unit>
        <trans-unit id="baed0bf9298ec8701b9fbc2d0adf2775a8c9d6ae" translate="yes" xml:space="preserve">
          <source>The two relations must be structurally compatible: they must be scoping the same model, and they must differ only by &lt;a href=&quot;querymethods#method-i-where&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt; (if no &lt;a href=&quot;querymethods#method-i-group&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt; has been defined) or &lt;a href=&quot;querymethods#method-i-having&quot;&gt;&lt;code&gt;having&lt;/code&gt;&lt;/a&gt; (if a &lt;a href=&quot;querymethods#method-i-group&quot;&gt;&lt;code&gt;group&lt;/code&gt;&lt;/a&gt; is present).</source>
          <target state="translated">2つの関係は、構造的に互換性がある必要があります。同じモデルをスコープする必要があり、&lt;a href=&quot;querymethods#method-i-where&quot;&gt; &lt;code&gt;where&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;querymethods#method-i-group&quot;&gt; &lt;code&gt;group&lt;/code&gt; &lt;/a&gt;が定義されていない場合）または&lt;a href=&quot;querymethods#method-i-having&quot;&gt; &lt;code&gt;having&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;querymethods#method-i-group&quot;&gt; &lt;code&gt;group&lt;/code&gt; &lt;/a&gt;が存在する場合）のみが異なる必要があります。</target>
        </trans-unit>
        <trans-unit id="4df240969de79c63294f13e9b45064ab12e90f94" translate="yes" xml:space="preserve">
          <source>The two relations must be structurally compatible: they must be scoping the same model, and they must differ only by &lt;a href=&quot;querymethods#method-i-where&quot;&gt;where&lt;/a&gt; (if no &lt;a href=&quot;querymethods#method-i-group&quot;&gt;group&lt;/a&gt; has been defined) or &lt;a href=&quot;querymethods#method-i-having&quot;&gt;having&lt;/a&gt; (if a &lt;a href=&quot;querymethods#method-i-group&quot;&gt;group&lt;/a&gt; is present). Neither relation may have a &lt;a href=&quot;querymethods#method-i-limit&quot;&gt;limit&lt;/a&gt;, &lt;a href=&quot;querymethods#method-i-offset&quot;&gt;offset&lt;/a&gt;, or &lt;a href=&quot;querymethods#method-i-distinct&quot;&gt;distinct&lt;/a&gt; set.</source>
          <target state="translated">2つの関係は、構造的に互換性がある必要があります。同じモデルのスコープである必要があり、&lt;a href=&quot;querymethods#method-i-where&quot;&gt;場所&lt;/a&gt;（&lt;a href=&quot;querymethods#method-i-group&quot;&gt;グループ&lt;/a&gt;が定義されていない場合）または&lt;a href=&quot;querymethods#method-i-having&quot;&gt;所有し&lt;/a&gt;ている場合（&lt;a href=&quot;querymethods#method-i-group&quot;&gt;グループ&lt;/a&gt;が存在する場合）のみが異なる必要があります。どちらの関係にも、&lt;a href=&quot;querymethods#method-i-limit&quot;&gt;limit&lt;/a&gt;、&lt;a href=&quot;querymethods#method-i-offset&quot;&gt;offset&lt;/a&gt;、または&lt;a href=&quot;querymethods#method-i-distinct&quot;&gt;個別の&lt;/a&gt;セットを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="4429a5c939dc6aca1139441991d565996b91dd6d" translate="yes" xml:space="preserve">
          <source>The type detected by Active Record can be overridden.</source>
          <target state="translated">アクティブレコードで検出された型をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="d6e1bcdf615211277f7abc9c829db95fcf59969a" translate="yes" xml:space="preserve">
          <source>The type of an attribute is given the opportunity to change how dirty tracking is performed. The methods &lt;code&gt;changed?&lt;/code&gt; and &lt;code&gt;changed_in_place?&lt;/code&gt; will be called from &lt;a href=&quot;../../activemodel/dirty&quot;&gt;&lt;code&gt;ActiveModel::Dirty&lt;/code&gt;&lt;/a&gt;. See the documentation for those methods in &lt;a href=&quot;../../activemodel/type/value&quot;&gt;&lt;code&gt;ActiveModel::Type::Value&lt;/code&gt;&lt;/a&gt; for more details.</source>
          <target state="translated">属性のタイプには、ダーティトラッキングの実行方法を変更する機会が与えられます。方法は &lt;code&gt;changed?&lt;/code&gt; と &lt;code&gt;changed_in_place?&lt;/code&gt; &lt;a href=&quot;../../activemodel/dirty&quot;&gt; &lt;code&gt;ActiveModel::Dirty&lt;/code&gt; &lt;/a&gt;から呼び出されます。詳細については、&lt;a href=&quot;../../activemodel/type/value&quot;&gt; &lt;code&gt;ActiveModel::Type::Value&lt;/code&gt; &lt;/a&gt;これらのメソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="1f0b9cf1c4d9c3eca3e4a428a0c7fa3e8066b238" translate="yes" xml:space="preserve">
          <source>The type of an attribute is given the opportunity to change how dirty tracking is performed. The methods &lt;code&gt;changed?&lt;/code&gt; and &lt;code&gt;changed_in_place?&lt;/code&gt; will be called from &lt;a href=&quot;../../activemodel/dirty&quot;&gt;ActiveModel::Dirty&lt;/a&gt;. See the documentation for those methods in &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; for more details.</source>
          <target state="translated">属性のタイプには、ダーティートラッキングの実行方法を変更する機会が与えられます。メソッドは &lt;code&gt;changed?&lt;/code&gt; そして &lt;code&gt;changed_in_place?&lt;/code&gt; &lt;a href=&quot;../../activemodel/dirty&quot;&gt;ActiveModel :: Dirty&lt;/a&gt;から呼び出されます。詳細については、&lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel :: Type :: Valueにある&lt;/a&gt;これらのメソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ffc82cbd0e859aed8de76a61e8169992477d9bfa" translate="yes" xml:space="preserve">
          <source>The type of error, defaults to `:invalid` unless specified</source>
          <target state="translated">エラーの種類、デフォルトは指定されていない限り `:invalid` です。</target>
        </trans-unit>
        <trans-unit id="927059acf7f717dfa1ace58934a018ae273d21bc" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; are mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.2.2/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;macaddr&lt;/code&gt; type is mapped to normal text.</source>
          <target state="translated">タイプ &lt;code&gt;inet&lt;/code&gt; および &lt;code&gt;cidr&lt;/code&gt; はRuby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.2.2/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt; &lt;code&gt;IPAddr&lt;/code&gt; &lt;/a&gt;オブジェクトにマップされます。 &lt;code&gt;macaddr&lt;/code&gt; タイプは、通常のテキストにマップされます。</target>
        </trans-unit>
        <trans-unit id="a226f5fad36d407ad5aa4429e81676ae87fdbd65" translate="yes" xml:space="preserve">
          <source>The types &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; are mapped to Ruby &lt;a href=&quot;https://ruby-doc.org/stdlib-2.5.0/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt;&lt;code&gt;IPAddr&lt;/code&gt;&lt;/a&gt; objects. The &lt;code&gt;macaddr&lt;/code&gt; type is mapped to normal text.</source>
          <target state="translated">種類 &lt;code&gt;inet&lt;/code&gt; と &lt;code&gt;cidr&lt;/code&gt; ルビーにマッピングされ&lt;a href=&quot;https://ruby-doc.org/stdlib-2.5.0/libdoc/ipaddr/rdoc/IPAddr.html&quot;&gt; &lt;code&gt;IPAddr&lt;/code&gt; &lt;/a&gt;オブジェクト。 &lt;code&gt;macaddr&lt;/code&gt; タイプは、通常のテキストにマップされます。</target>
        </trans-unit>
        <trans-unit id="b0861f73b8db3082acb47c4ea15e2a6f8e772b26" translate="yes" xml:space="preserve">
          <source>The typical route is to just dump everything in a monolithic class, perhaps with a comment, as a least-bad alternative. Using modules in separate files means tedious sifting to get a big-picture view.</source>
          <target state="translated">典型的なルートは、すべてをモノリシックなクラスにダンプすることです。別々のファイルでモジュールを使用すると、全体像を把握するためには面倒なふるい分けが必要になります。</target>
        </trans-unit>
        <trans-unit id="cc0073e1d3239a9024667d104757ce1e2361f109" translate="yes" xml:space="preserve">
          <source>The underlying body, as a streamable object.</source>
          <target state="translated">ストリーム可能なオブジェクトとしての下半身。</target>
        </trans-unit>
        <trans-unit id="504117b27c360308482a63dde448944374808b20" translate="yes" xml:space="preserve">
          <source>The underlying table must have the relevant columns defined with unique constraints.</source>
          <target state="translated">基礎となるテーブルは、一意の制約で関連する列が定義されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="fdf93057400271c1f0b768430268fc455455f04a" translate="yes" xml:space="preserve">
          <source>The unique request id can be used to trace a request end-to-end and would typically end up being part of log files from multiple pieces of the stack.</source>
          <target state="translated">一意のリクエスト ID はリクエストをエンドツーエンドでトレースするために使われ、通常はスタックの複数の部分からのログファイルの一部として終わるでしょう。</target>
        </trans-unit>
        <trans-unit id="44345e0f37696053af8dfe1ad08931d4ee884fed" translate="yes" xml:space="preserve">
          <source>The unique request id is either based on the X-Request-Id header in the request, which would typically be generated by a firewall, load balancer, or the web server, or, if this header is not available, a random uuid. If the header is accepted from the outside world, we sanitize it to a max of 255 chars and alphanumeric and dashes only.</source>
          <target state="translated">一意なリクエストIDは、リクエスト中のX-Request-Idヘッダに基づくか、ファイアウォール、ロードバランサ、ウェブサーバによって通常生成されるか、またはこのヘッダが利用できない場合はランダムなUUIDに基づいています。このヘッダーが外部から受け入れられた場合は、最大255文字、英数字とダッシュのみでサニタイズされます。</target>
        </trans-unit>
        <trans-unit id="c4127c0166c14c885baf6d19dcdb9fce72629288" translate="yes" xml:space="preserve">
          <source>The upside of long-lived channel instances is that you can use instance variables to keep reference to objects that future subscriber requests can interact with. Here's a quick example:</source>
          <target state="translated">長寿命のチャンネルインスタンスの利点は、インスタンス変数を使用して、将来のサブスクライバーのリクエストが対話できるオブジェクトへの参照を保持できることです。簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="f05b9f48f977cb2b8245e6965144965f6f98f067" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;write_attribute&lt;/code&gt; to write to the field in model is just one example of how a plugin can interact with the model, and will not always be the right method to use. For example, you could also use:</source>
          <target state="translated">モデル内のフィールドに書き込むための &lt;code&gt;write_attribute&lt;/code&gt; の使用は、プラグインがモデルと対話する方法の1つの例にすぎず、常に適切な方法であるとは限りません。たとえば、次のものも使用できます。</target>
        </trans-unit>
        <trans-unit id="8ba3a56d5e7efe66d3fab380043aeea55b8e7b0a" translate="yes" xml:space="preserve">
          <source>The use of extra attributes on the join table in a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association is deprecated. If you require this sort of complex behavior on the table that joins two models in a many-to-many relationship, you should use a &lt;code&gt;has_many :through&lt;/code&gt; association instead of &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has_and_belongs_to_many&lt;/code&gt; アソシエーションでの結合テーブルでの追加属性の使用は廃止されました。多対多の関係で2つのモデルを結合するテーブルでこの種の複雑な動作が必要な場合は、 &lt;code&gt;has_many :through&lt;/code&gt; 代わりに &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; ：through関連付けを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="687066842fc8ecd4fa47ae8968fd256f5e45ada4" translate="yes" xml:space="preserve">
          <source>The user buys something.</source>
          <target state="translated">ユーザーは何かを買う。</target>
        </trans-unit>
        <trans-unit id="7c62bd30e184568bef1e6d0ac16046c9a736c174" translate="yes" xml:space="preserve">
          <source>The user can also specify the encoding via a comment on the first line of the template (# encoding: NAME-OF-ENCODING). This will work with any template engine, as we process out the encoding comment before passing the source on to the template engine, leaving a blank line in its stead.</source>
          <target state="translated">ユーザーはテンプレートの最初の行にコメントを書いてエンコーディングを指定することもできます (#encoding:NAME-OF-ENCODING)。これは、テンプレートエンジンにソースを渡す前にエンコーディングコメントを処理し、代わりに空白の行を残すので、どのテンプレートエンジンでも動作します。</target>
        </trans-unit>
        <trans-unit id="826ca47e57f18b11478c16bdc6bb3633f987bcfe" translate="yes" xml:space="preserve">
          <source>The user can override this default by passing a block to the layout:</source>
          <target state="translated">ユーザーは、レイアウトにブロックを渡すことで、このデフォルトをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="719dce192492bacd8bcefcb5f6b709f528c266da" translate="yes" xml:space="preserve">
          <source>The user has their original credit back.</source>
          <target state="translated">ユーザーは元のクレジットを取り戻しています。</target>
        </trans-unit>
        <trans-unit id="c6fa6bc3d4150b5cc2b951fee14c9d1cabd21a92" translate="yes" xml:space="preserve">
          <source>The user is &lt;em&gt;held accountable for the results&lt;/em&gt; of the interaction.</source>
          <target state="translated">ユーザーは、対話の&lt;em&gt;結果に対して責任を負い&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="3e076b48f1c86983855eb3347dba2080e3709d89" translate="yes" xml:space="preserve">
          <source>The user takes the cookie from the first step (which they previously copied) and replaces the current cookie in the browser.</source>
          <target state="translated">ユーザーは最初のステップからクッキー(以前にコピーしたもの)を取り、ブラウザで現在のクッキーを置き換えます。</target>
        </trans-unit>
        <trans-unit id="0c221d372386ae6055b0803819195b0d89fb89dc" translate="yes" xml:space="preserve">
          <source>The validation happens by performing an SQL query into the model's table, searching for an existing record with the same value in that attribute.</source>
          <target state="translated">検証は、モデルのテーブルにSQLクエリを実行し、その属性で同じ値を持つ既存のレコードを検索することで行われます。</target>
        </trans-unit>
        <trans-unit id="210fb69772009d42d4971aa88ccf3a4132e9cbb3" translate="yes" xml:space="preserve">
          <source>The validation only runs when all the &lt;code&gt;:if&lt;/code&gt; conditions and none of the &lt;code&gt;:unless&lt;/code&gt; conditions are evaluated to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">検証は、 &lt;code&gt;:if&lt;/code&gt; 条件がすべて評価され、 &lt;code&gt;:unless&lt;/code&gt; 条件がいずれも &lt;code&gt;true&lt;/code&gt; と評価されない場合にのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="22d922531e256f36a7805e905aa5612d4cc33f30" translate="yes" xml:space="preserve">
          <source>The validation process on save can be skipped by passing &lt;code&gt;validate:
false&lt;/code&gt;. The validation context can be changed by passing &lt;code&gt;context: context&lt;/code&gt;. The regular &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; method is replaced with this when the validations module is mixed in, which it is by default.</source>
          <target state="translated">保存時の検証プロセスは、 &lt;code&gt;validate: false&lt;/code&gt; を渡すことでスキップできます。検証コンテキストは、 &lt;code&gt;context: context&lt;/code&gt; を渡すことで変更できます。通常の&lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord :: Base＃save&lt;/a&gt;メソッドは、検証モジュールが混合されるとこれに置き換えられます。これはデフォルトです。</target>
        </trans-unit>
        <trans-unit id="8999b1ed1a41ae9c57579e07e860b4efcd1722c6" translate="yes" xml:space="preserve">
          <source>The validators hash can also handle regular expressions, ranges, arrays and strings in shortcut form.</source>
          <target state="translated">バリデータハッシュは、正規表現、範囲、配列、文字列をショートカット形式で扱うこともできます。</target>
        </trans-unit>
        <trans-unit id="74bda52d12b9a29a5adb328b6d0e82b42dd08d0d" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; can be a simple &lt;a href=&quot;../hash&quot;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt; that maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:</source>
          <target state="translated">&lt;code&gt;i18n.transliterate.rule&lt;/code&gt; の値は、上記のように文字をASCII近似にマップする単純な&lt;a href=&quot;../hash&quot;&gt; &lt;code&gt;Hash&lt;/code&gt; &lt;/a&gt;することができます。より複雑な要件の場合は、Proc：</target>
        </trans-unit>
        <trans-unit id="ddc6ecf56ce207f86d9a65f068b01ae48ef8f30f" translate="yes" xml:space="preserve">
          <source>The value for &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; can be a simple &lt;a href=&quot;../hash&quot;&gt;Hash&lt;/a&gt; that maps characters to ASCII approximations as shown above, or, for more complex requirements, a Proc:</source>
          <target state="translated">&lt;code&gt;i18n.transliterate.rule&lt;/code&gt; の値は、上記のように文字をASCII近似にマッピングする単純な&lt;a href=&quot;../hash&quot;&gt;ハッシュ&lt;/a&gt;、またはより複雑な要件の場合はProcにすることができます。</target>
        </trans-unit>
        <trans-unit id="4529e2d3c40915fd4c9132c578e7597ed49f3db5" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;autoload_paths&lt;/code&gt; can be inspected. In a just-generated application it is (edited):</source>
          <target state="translated">&lt;code&gt;autoload_paths&lt;/code&gt; の値を検査できます。生成されたばかりのアプリケーションでは（編集されて）：</target>
        </trans-unit>
        <trans-unit id="cd0a00e0a081899b611799d0f44fe6f9726d2a6e" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;params[:ids]&lt;/code&gt; will now be &lt;code&gt;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/code&gt;. Note that parameter values are always strings; Rails makes no attempt to guess or cast the type.</source>
          <target state="translated">値 &lt;code&gt;params[:ids]&lt;/code&gt; 今であろう &lt;code&gt;[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]&lt;/code&gt; 。パラメータ値は常に文字列であることに注意してください。Railsはタイプの推測やキャストを試みません。</target>
        </trans-unit>
        <trans-unit id="7ee55d30d007ee20fa020330bcd60d746465c7ba" translate="yes" xml:space="preserve">
          <source>The value will be assigned to instance variable &lt;code&gt;@options&lt;/code&gt;.</source>
          <target state="translated">値はインスタンス変数 &lt;code&gt;@options&lt;/code&gt; に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="be17b91d3b4e674a03379a9cbc0828c572860985" translate="yes" xml:space="preserve">
          <source>The values are first processed by SHA256, so that we don't leak length info via timing attacks.</source>
          <target state="translated">値は最初にSHA256で処理されるので、タイミング攻撃で長さ情報が漏れることはありません。</target>
        </trans-unit>
        <trans-unit id="f7668455a149f8036f8739030b9a40a0d03c8dfc" translate="yes" xml:space="preserve">
          <source>The values compared should be of fixed length, such as strings that have already been processed by HMAC. Raises in case of length mismatch.</source>
          <target state="translated">比較される値は、すでに HMAC で処理された文字列など、固定長でなければなりません。長さが不一致の場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c3de7898cf5037e5a00562c2e793081732841dfe" translate="yes" xml:space="preserve">
          <source>The values of the hash here being the arguments or options passed to the specific git command. As per the final example shown here, multiple git commands can be specified at a time, but the order of their running is not guaranteed to be the same as the order that they were specified in.</source>
          <target state="translated">ここでのハッシュの値は、特定の git コマンドに渡された引数あるいはオプションです。ここで示した最後の例のように、複数の git コマンドを一度に指定することができますが、それらの実行順序が指定した順序と同じであることは保証されません。</target>
        </trans-unit>
        <trans-unit id="7922ad0c81f69985a50e0d574592935e9fe97a2f" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;f&lt;/code&gt; yielded to the block is a &lt;a href=&quot;formbuilder&quot;&gt;&lt;code&gt;FormBuilder&lt;/code&gt;&lt;/a&gt; object that incorporates the knowledge about the model object represented by &lt;code&gt;:person&lt;/code&gt; passed to &lt;code&gt;form_for&lt;/code&gt;. Methods defined on the &lt;a href=&quot;formbuilder&quot;&gt;&lt;code&gt;FormBuilder&lt;/code&gt;&lt;/a&gt; are used to generate fields bound to this model. Thus, for example,</source>
          <target state="translated">ブロックに生成される変数 &lt;code&gt;f&lt;/code&gt; は、&lt;a href=&quot;formbuilder&quot;&gt; &lt;code&gt;FormBuilder&lt;/code&gt; &lt;/a&gt;渡される &lt;code&gt;:person&lt;/code&gt; &lt;code&gt;form_for&lt;/code&gt; 表されるモデルオブジェクトに関する知識を組み込んだFormBuilderオブジェクトです。&lt;a href=&quot;formbuilder&quot;&gt; &lt;code&gt;FormBuilder&lt;/code&gt; で&lt;/a&gt;定義されたメソッドは、このモデルにバインドされたフィールドを生成するために使用されます。したがって、たとえば、</target>
        </trans-unit>
        <trans-unit id="51738102e906fea5a59e8e5aa4f95a26d7b4e6ee" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;f&lt;/code&gt; yielded to the block is a &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; object that incorporates the knowledge about the model object represented by &lt;code&gt;:person&lt;/code&gt; passed to &lt;code&gt;form_for&lt;/code&gt;. Methods defined on the &lt;a href=&quot;formbuilder&quot;&gt;FormBuilder&lt;/a&gt; are used to generate fields bound to this model. Thus, for example,</source>
          <target state="translated">ブロックに渡される変数 &lt;code&gt;f&lt;/code&gt; は、&lt;a href=&quot;formbuilder&quot;&gt;formBuilder&lt;/a&gt;オブジェクトであり、form_forに渡される &lt;code&gt;:person&lt;/code&gt; &lt;code&gt;form_for&lt;/code&gt; によって表されるモデルオブジェクトに関する知識が組み込まれています。&lt;a href=&quot;formbuilder&quot;&gt;FormBuilderで&lt;/a&gt;定義されたメソッドは、このモデルにバインドされたフィールドを生成するために使用されます。したがって、たとえば、</target>
        </trans-unit>
        <trans-unit id="c9a81f628645aa415b2032ec2f5f389b9a451d86" translate="yes" xml:space="preserve">
          <source>The variables inside the displayed list will be printed with their values after you move in the stack. To stop displaying a variable use &lt;code&gt;undisplay n&lt;/code&gt; where &lt;em&gt;n&lt;/em&gt; is the variable number (1 in the last example).</source>
          <target state="translated">スタック内を移動すると、表示されたリスト内の変数がその値とともに出力されます。可変用表示を停止し &lt;code&gt;undisplay n&lt;/code&gt; ここで&lt;em&gt;nは&lt;/em&gt;可変数（最後の例では1）です。</target>
        </trans-unit>
        <trans-unit id="f2073f8b2673f5d9daba21618df8968535a36ee3" translate="yes" xml:space="preserve">
          <source>The various connection pools are managed by a single instance of &lt;a href=&quot;connectionhandler&quot;&gt;&lt;code&gt;ConnectionHandler&lt;/code&gt;&lt;/a&gt; accessible via &lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;&lt;code&gt;ActiveRecord::Base.connection_handler&lt;/code&gt;&lt;/a&gt;. All Active Record models use this handler to determine the connection pool that they should use.</source>
          <target state="translated">さまざまな接続プールは、&lt;a href=&quot;../core#method-c-connection_handler&quot;&gt; &lt;code&gt;ActiveRecord::Base.connection_handler&lt;/code&gt; &lt;/a&gt;介してアクセスできる&lt;a href=&quot;connectionhandler&quot;&gt; &lt;code&gt;ConnectionHandler&lt;/code&gt; の&lt;/a&gt;単一インスタンスによって管理されます。すべてのActiveRecordモデルは、このハンドラーを使用して、使用する必要のある接続プールを決定します。</target>
        </trans-unit>
        <trans-unit id="30e5bd030892b4a852e2c3cbc8b86634a728d26f" translate="yes" xml:space="preserve">
          <source>The various connection pools are managed by a single instance of &lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandler&lt;/a&gt; accessible via &lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;ActiveRecord::Core.connection_handler&lt;/a&gt;. All Active Record models use this handler to determine the connection pool that they should use.</source>
          <target state="translated">さまざまな接続プールは、&lt;a href=&quot;../core#method-c-connection_handler&quot;&gt;ActiveRecord :: Core.connection_handlerを&lt;/a&gt;介してアクセス可能な&lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandlerの&lt;/a&gt;単一のインスタンスによって管理されます。すべてのActive Recordモデルは、このハンドラーを使用して、使用する接続プールを決定します。</target>
        </trans-unit>
        <trans-unit id="c5f5cf73bffa3d14b9dcf19ce3a4d326d20b7af7" translate="yes" xml:space="preserve">
          <source>The verifier instance that all signed ids are generated and verified from. By default, it'll be initialized with the class-level &lt;code&gt;signed_id_verifier_secret&lt;/code&gt;, which within Rails comes from the &lt;a href=&quot;../../rails#method-c-application&quot;&gt;&lt;code&gt;Rails.application&lt;/code&gt;&lt;/a&gt;.key_generator. By default, it's SHA256 for the digest and JSON for the serialization.</source>
          <target state="translated">すべての署名付きIDが生成および検証されるベリファイアインスタンス。デフォルトでは、クラスレベルの &lt;code&gt;signed_id_verifier_secret&lt;/code&gt; で初期化されます。これは、Rails内で&lt;a href=&quot;../../rails#method-c-application&quot;&gt; &lt;code&gt;Rails.application&lt;/code&gt; .key_generator&lt;/a&gt;から取得されます。デフォルトでは、ダイジェストの場合はSHA256、シリアル化の場合はJSONです。</target>
        </trans-unit>
        <trans-unit id="3ba65a91e27bd5bcb67a20448455ea6160bacbdd" translate="yes" xml:space="preserve">
          <source>The version column used for optimistic locking. Defaults to &lt;code&gt;lock_version&lt;/code&gt;.</source>
          <target state="translated">楽観的ロックに使用されるバージョン列。デフォルトは &lt;code&gt;lock_version&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d0edb9fdea3de462fd0a58773839cce4a4acbae7" translate="yes" xml:space="preserve">
          <source>The version number in which the deprecated behavior will be removed, by default.</source>
          <target state="translated">デフォルトでは、非推奨の動作が削除されるバージョン番号。</target>
        </trans-unit>
        <trans-unit id="4fba4be43b3a2433eb37357ca2a053469838a20b" translate="yes" xml:space="preserve">
          <source>The version of your Node.js runtime should be printed out. Make sure it's greater than 8.16.0.</source>
          <target state="translated">お使いのNode.jsランタイムのバージョンをプリントアウトする必要があります。8.16.0以上であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="9fdf6561d827cf69682ee0db6a81ad972d2a8482" translate="yes" xml:space="preserve">
          <source>The very first migration related rails command you will use will probably be &lt;code&gt;bin/rails db:migrate&lt;/code&gt;. In its most basic form it just runs the &lt;code&gt;change&lt;/code&gt; or &lt;code&gt;up&lt;/code&gt; method for all the migrations that have not yet been run. If there are no such migrations, it exits. It will run these migrations in order based on the date of the migration.</source>
          <target state="translated">使用する最初の移行関連のrailsコマンドは、おそらく &lt;code&gt;bin/rails db:migrate&lt;/code&gt; です。最も基本的な形式では、まだ実行されていないすべての移行に対して &lt;code&gt;change&lt;/code&gt; または &lt;code&gt;up&lt;/code&gt; メソッドを実行するだけです。そのような移行がない場合は終了します。これらの移行は、移行の日付に基づいて順番に実行されます。</target>
        </trans-unit>
        <trans-unit id="ac0230161de62aae504a0f81a584296cdc0e8222" translate="yes" xml:space="preserve">
          <source>The very first migration related rails command you will use will probably be &lt;code&gt;rails db:migrate&lt;/code&gt;. In its most basic form it just runs the &lt;code&gt;change&lt;/code&gt; or &lt;code&gt;up&lt;/code&gt; method for all the migrations that have not yet been run. If there are no such migrations, it exits. It will run these migrations in order based on the date of the migration.</source>
          <target state="translated">使用する最初のマイグレーション関連のrailsコマンドは、おそらく &lt;code&gt;rails db:migrate&lt;/code&gt; になります。最も基本的な形式では、まだ実行されていないすべての移行に対して、 &lt;code&gt;change&lt;/code&gt; または &lt;code&gt;up&lt;/code&gt; メソッドを実行するだけです。そのようなマイグレーションがない場合は、終了します。これらの移行は、移行の日付に基づいて順番に実行されます。</target>
        </trans-unit>
        <trans-unit id="ac2a3b8ac588e6c7d35fe808ffcfdd151ce9cc02" translate="yes" xml:space="preserve">
          <source>The video tag also supports all of the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTML options through the HTML options hash, including:</source>
          <target state="translated">videoタグは、以下を含むHTMLオプションハッシュを通じて、すべての &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; HTMLオプションもサポートします。</target>
        </trans-unit>
        <trans-unit id="119b909af465377a2dafbbc8a03ac551f389a7b4" translate="yes" xml:space="preserve">
          <source>The view class must have the following methods:</source>
          <target state="translated">ビュークラスは以下のメソッドを持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="1d2a88b0bc833aa9900595087d57dd20bf6b3e79" translate="yes" xml:space="preserve">
          <source>The view will contain a form similar to the one we used when creating new articles. Create a file called &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; and make it look as follows:</source>
          <target state="translated">ビューには、新しい記事を作成するときに使用したものと同様のフォームが含まれます。 &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; というファイルを作成し、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6c158899320feee2e97c385d2ee14ec4ce40aa6d" translate="yes" xml:space="preserve">
          <source>The way it works is that, when the link is activated, it constructs a hidden form in the document with the &quot;action&quot; attribute corresponding to &quot;href&quot; value of the link, and the method corresponding to &lt;code&gt;data-method&lt;/code&gt; value, and submits that form.</source>
          <target state="translated">それが機能する方法は、リンクがアクティブ化されると、リンクの「href」値に対応する「action」属性と &lt;code&gt;data-method&lt;/code&gt; 値に対応するメソッドを使用してドキュメントに非表示フォームを作成し、それを送信することです形。</target>
        </trans-unit>
        <trans-unit id="1e18e70ccf9ed0f548a5db54192832822b7a0ad9" translate="yes" xml:space="preserve">
          <source>The way this is done is to add a non-guessable token which is only known to your server to each request. This way, if a request comes in without the proper token, it will be denied access.</source>
          <target state="translated">この方法は、各リクエストにサーバのみが知っている推測不可能なトークンを追加することです。これにより、適切なトークンを持たないリクエストが来た場合はアクセスを拒否されます。</target>
        </trans-unit>
        <trans-unit id="b7c78eda0eacbc05a4fde40017411e78c31cd0e1" translate="yes" xml:space="preserve">
          <source>The web application at &lt;code&gt;www.webapp.com&lt;/code&gt; verifies the user information in the corresponding session hash and destroys the project with the ID 1. It then returns a result page which is an unexpected result for the browser, so it will not display the image.</source>
          <target state="translated">&lt;code&gt;www.webapp.com&lt;/code&gt; のWebアプリケーションは、対応するセッションハッシュのユーザー情報を確認し、ID 1のプロジェクトを破棄します。次に、ブラウザーに予期しない結果である結果ページを返すため、画像は表示されません。</target>
        </trans-unit>
        <trans-unit id="9f0bf503400b87f8f940d1752feec19d755672a8" translate="yes" xml:space="preserve">
          <source>The whole callback chain is wrapped in a transaction. If any callback raises an exception, the execution chain gets halted and a ROLLBACK is issued. To intentionally stop a chain use:</source>
          <target state="translated">コールバックチェーン全体がトランザクションに包まれています。コールバックが例外を発生させると、実行チェーンは停止して ROLLBACK が発行されます。チェーンを意図的に停止させるには</target>
        </trans-unit>
        <trans-unit id="422946e01cb3a5446cf46834bea23043acb43072" translate="yes" xml:space="preserve">
          <source>The word will be pluralized using rules defined for the locale (you must define your own inflection rules for languages other than English). See &lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;&lt;code&gt;ActiveSupport::Inflector.pluralize&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">単語は、ロケールに対して定義された規則を使用して複数形になります（英語以外の言語に対しては、独自の語尾変化規則を定義する必要があります）。&lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt; &lt;code&gt;ActiveSupport::Inflector.pluralize&lt;/code&gt; &lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="304e04fad05e0c4f4a61a9fc6958560aa376e82f" translate="yes" xml:space="preserve">
          <source>The word will be pluralized using rules defined for the locale (you must define your own inflection rules for languages other than English). See &lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;ActiveSupport::Inflector#pluralize&lt;/a&gt;</source>
          <target state="translated">単語は、ロケールに定義された規則を使用して複数形になります（英語以外の言語には独自の活用規則を定義する必要があります）。&lt;a href=&quot;../../activesupport/inflector#method-i-pluralize&quot;&gt;ActiveSupport :: Inflector＃pluralizeを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="8b90a1b189ff4eaf81ed82bbe6e50b03aaabd418" translate="yes" xml:space="preserve">
          <source>The worker pool is used to run connection callbacks and channel actions in isolation from the server's main thread. Action Cable allows the application to configure the number of simultaneously processed threads in the worker pool.</source>
          <target state="translated">ワーカープールは、サーバーのメインスレッドから分離して接続コールバックとチャンネルアクションを実行するために使用されます。アクションケーブルを使用すると、アプリケーションはワーカープールで同時に処理されるスレッドの数を設定することができます。</target>
        </trans-unit>
        <trans-unit id="5a227e6c2220ef5acd6b50d07b084d078961f053" translate="yes" xml:space="preserve">
          <source>The worker pool is where we run connection callbacks and channel actions. We do as little as possible on the server's main thread. The worker pool is an executor service that's backed by a pool of threads working from a task queue. The thread pool size maxes out at 4 worker threads by default. Tune the size yourself with &lt;code&gt;config.action_cable.worker_pool_size&lt;/code&gt;.</source>
          <target state="translated">ワーカープールは、接続コールバックとチャネルアクションを実行する場所です。サーバーのメインスレッドでは、可能な限り処理を行いません。ワーカープールは、タスクキューから機能するスレッドのプールに支えられたエグゼキューターサービスです。スレッドプールサイズは、デフォルトで最大4つのワーカースレッドになります。 &lt;code&gt;config.action_cable.worker_pool_size&lt;/code&gt; でサイズを自分で調整します。</target>
        </trans-unit>
        <trans-unit id="4071a60de007bb344068973d53b28d0026839c89" translate="yes" xml:space="preserve">
          <source>The worms exploit a hole in Yahoo's HTML/JavaScript filter, which usually filters all targets and onload attributes from tags (because there can be JavaScript). The filter is applied only once, however, so the onload attribute with the worm code stays in place. This is a good example why restricted list filters are never complete and why it is hard to allow HTML/JavaScript in a web application.</source>
          <target state="translated">このワームは、ヤフーのHTML/JavaScriptフィルターの穴を悪用しています。しかし、フィルターは一度だけ適用されるため、ワームのコードを含むオンロード属性はその場に留まります。これは、制限付きリストフィルタが決して完全ではない理由と、ウェブアプリケーションでHTML/JavaScriptを許可することが難しい理由を示す良い例です。</target>
        </trans-unit>
        <trans-unit id="381cfbd9c2dd9fecda0a80c5cba63a031cfacf42" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.human_attribute_name(&quot;role.admin&quot;)&lt;/code&gt; will return &quot;Admin&quot;.</source>
          <target state="translated">次に、 &lt;code&gt;User.human_attribute_name(&quot;role.admin&quot;)&lt;/code&gt; は &quot;Admin&quot;を返します。</target>
        </trans-unit>
        <trans-unit id="69726d22ecf072f07dd132a5079e2db0487c5a16" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.model_name.human(count: 2)&lt;/code&gt; will return &quot;Customers&quot;. With &lt;code&gt;count: 1&lt;/code&gt; or without params will return &quot;Customer&quot;.</source>
          <target state="translated">次に、 &lt;code&gt;User.model_name.human(count: 2)&lt;/code&gt; は「Customers」を返します。では &lt;code&gt;count: 1&lt;/code&gt; かのparamsなしでは、「顧客」を返します。</target>
        </trans-unit>
        <trans-unit id="ce1ac48f704be117e0c440eeff8da490a84e2fdd" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;User.model_name.human&lt;/code&gt; will return &quot;Customer&quot; and &lt;code&gt;User.human_attribute_name(&quot;login&quot;)&lt;/code&gt; will return &quot;Handle&quot;.</source>
          <target state="translated">次に、 &lt;code&gt;User.model_name.human&lt;/code&gt; は「Customer」を返し、 &lt;code&gt;User.human_attribute_name(&quot;login&quot;)&lt;/code&gt; は「Handle」を返します。</target>
        </trans-unit>
        <trans-unit id="a1dcc9b3170af9168677c16003802ad10b7a65fa" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;parse_options&lt;/code&gt; is defined like this:</source>
          <target state="translated">次に、 &lt;code&gt;parse_options&lt;/code&gt; は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="23a50ecef846d168f5924b2581ba4253e1d79ec9" translate="yes" xml:space="preserve">
          <source>Then Action View will look first in this directory when resolving views.</source>
          <target state="translated">そうすると、アクションビューはビューを解決するときにこのディレクトリを最初に探します。</target>
        </trans-unit>
        <trans-unit id="459d1a5ee37a5dfc347ac0b9db5a24592e3778ee" translate="yes" xml:space="preserve">
          <source>Then Active Record will look for messages in this order:</source>
          <target state="translated">そうすると、Active Recordはこの順番でメッセージを探します。</target>
        </trans-unit>
        <trans-unit id="3d4d27ddd244a8a4ebabec05bc03c56676658e3a" translate="yes" xml:space="preserve">
          <source>Then any written signed cookies will be digested with SHA256. Old cookies that were written with SHA1 can still be read, and if accessed will be written with the new digest so they're upgraded and won't be invalid when you remove the rotation.</source>
          <target state="translated">その後、書き込まれた署名付きクッキーはすべてSHA256でダイジェストされます。SHA1で書き込まれた古いクッキーはまだ読むことができ、アクセスされた場合は新しいダイジェストで書き込まれるので、アップグレードされ、ローテーションを削除したときに無効になることはありません。</target>
        </trans-unit>
        <trans-unit id="85e3645699a57b500a4fac14d2ba27a49c74a6f7" translate="yes" xml:space="preserve">
          <source>Then define a list of methods that you want callbacks attached to:</source>
          <target state="translated">次に、コールバックをアタッチしたいメソッドのリストを定義します。</target>
        </trans-unit>
        <trans-unit id="4f510685cd652852a1e3efa690ea6956f7bcdfdb" translate="yes" xml:space="preserve">
          <source>Then do the same for the &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; view:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/edit.html.erb&lt;/code&gt; ビューに対して同じことを行います。</target>
        </trans-unit>
        <trans-unit id="35dfdb159823060f46838dd038413c533e538e9c" translate="yes" xml:space="preserve">
          <source>Then ensure that this file is loaded at the top of your &lt;code&gt;config/application.rb&lt;/code&gt; (or in your &lt;code&gt;Gemfile&lt;/code&gt;) and it will automatically load models, controllers and helpers inside &lt;code&gt;app&lt;/code&gt;, load routes at &lt;code&gt;config/routes.rb&lt;/code&gt;, load locales at &lt;code&gt;config/locales/*&lt;/code&gt;, and load tasks at &lt;code&gt;lib/tasks/*&lt;/code&gt;.</source>
          <target state="translated">次に、このファイルが &lt;code&gt;config/application.rb&lt;/code&gt; （または &lt;code&gt;Gemfile&lt;/code&gt; ）の上部に読み込まれていることを確認します。これにより、 &lt;code&gt;app&lt;/code&gt; 内のモデル、コントローラー、ヘルパーが自動的に読み込まれ、 &lt;code&gt;config/routes.rb&lt;/code&gt; にルートが読み込まれ、 &lt;code&gt;config/locales/*&lt;/code&gt; ロケールが読み込まれます。locales / *、および &lt;code&gt;lib/tasks/*&lt;/code&gt; でタスクをロードします。</target>
        </trans-unit>
        <trans-unit id="ce0a816131af5b4f10ba7dd68f10732047901d7d" translate="yes" xml:space="preserve">
          <source>Then gradually rotate the old values out by adding them as fallbacks. Any message generated with the old values will then work until the rotation is removed.</source>
          <target state="translated">次に、古い値をフォールバックとして追加することで、古い値を徐々に回転させていきます。古い値で生成されたメッセージは、回転が取り除かれるまで動作します。</target>
        </trans-unit>
        <trans-unit id="c25ba8a4f5f2e80428305d964bd1bf9df12698c9" translate="yes" xml:space="preserve">
          <source>Then in the view any form using &lt;code&gt;form_for&lt;/code&gt; will be an instance of the specified form builder:</source>
          <target state="translated">次に、ビューでは、 &lt;code&gt;form_for&lt;/code&gt; を使用するすべてのフォームが、指定されたフォームビルダーのインスタンスになります。</target>
        </trans-unit>
        <trans-unit id="ef7bc07bcc95fd9eba906b05a01efc5367db71e6" translate="yes" xml:space="preserve">
          <source>Then in the view, you can call it like any class method:</source>
          <target state="translated">そして、ビューでは、他のクラスメソッドのように呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e1a2120982b7267dfa978e50b64a59538c9064c3" translate="yes" xml:space="preserve">
          <source>Then in your class, you can use the &lt;code&gt;before_create&lt;/code&gt;, &lt;code&gt;after_create&lt;/code&gt; and &lt;code&gt;around_create&lt;/code&gt; methods, just as you would in an Active Record model.</source>
          <target state="translated">次に、クラスで、Active Recordモデルの場合と &lt;code&gt;around_create&lt;/code&gt; 、 &lt;code&gt;before_create&lt;/code&gt; 、 &lt;code&gt;after_create&lt;/code&gt; 、around_createメソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="aebe8891b52bd362b7f19f07d1a47dc194ca8c95" translate="yes" xml:space="preserve">
          <source>Then in your view, you can just reference &lt;code&gt;attachments&lt;/code&gt; as a hash and specify which attachment you want to show, calling &lt;code&gt;url&lt;/code&gt; on it and then passing the result into the &lt;code&gt;image_tag&lt;/code&gt; method:</source>
          <target state="translated">次に、ビューで &lt;code&gt;attachments&lt;/code&gt; をハッシュとして参照し、表示する添付ファイルを指定し、その添付ファイルの &lt;code&gt;url&lt;/code&gt; を呼び出して、結果を &lt;code&gt;image_tag&lt;/code&gt; メソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="237fe237773a0ec739fb4cc8e5c87bcf8fa12ec0" translate="yes" xml:space="preserve">
          <source>Then make sure that all your job classes inherit from it.</source>
          <target state="translated">そして、すべてのジョブクラスがそれを継承していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4d121a9048cc21ad12c6bc9dfcf50d1c0c7ed200" translate="yes" xml:space="preserve">
          <source>Then make sure that all your models inherit from it.</source>
          <target state="translated">そして、すべてのモデルがそれを継承していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="5c028a05387b465e3194a93caa32b7f4e2825e9e" translate="yes" xml:space="preserve">
          <source>Then models can swap connections manually via the &lt;code&gt;connected_to&lt;/code&gt; API. If using sharding both a &lt;code&gt;role&lt;/code&gt; and &lt;code&gt;shard&lt;/code&gt; must be passed:</source>
          <target state="translated">次に、モデルは、 &lt;code&gt;connected_to&lt;/code&gt; APIを介して手動で接続を交換できます。シャーディングを使用する場合は、 &lt;code&gt;role&lt;/code&gt; と &lt;code&gt;shard&lt;/code&gt; 両方を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="e9c05622c9e2375d881f99cefdba0de66f0a8aab" translate="yes" xml:space="preserve">
          <source>Then new join models are automatically created for the newly associated objects. If some that existed previously are now missing, then their join rows are automatically deleted.</source>
          <target state="translated">そして、新しく関連付けられたオブジェクトに対して新しい結合モデルが自動的に作成されます。以前に存在していたものがなくなった場合、それらの結合行は自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="8bb78d3088ec4a03fb4ba35f504b631634a22413" translate="yes" xml:space="preserve">
          <source>Then refer to this field in the form for the model:</source>
          <target state="translated">そして、モデル用のフォームのこのフィールドを参照してください。</target>
        </trans-unit>
        <trans-unit id="01700a39e23b7ab78877badc25228c5133bf399d" translate="yes" xml:space="preserve">
          <source>Then run &lt;code&gt;bundle&lt;/code&gt; to install the gem.</source>
          <target state="translated">次に &lt;code&gt;bundle&lt;/code&gt; を実行してgemをインストールします。</target>
        </trans-unit>
        <trans-unit id="3c797d8f24c8628794ae46f0798a2a8a395d237f" translate="yes" xml:space="preserve">
          <source>Then set up a mailbox:</source>
          <target state="translated">そして、メールボックスを設定します。</target>
        </trans-unit>
        <trans-unit id="b23cf8584845218e3a92147b3fe0ba5780c2bf36" translate="yes" xml:space="preserve">
          <source>Then that same purpose must be passed when verifying to get the data back out:</source>
          <target state="translated">そうすると、データを取り出すための検証の際には、同じ目的を渡さなければなりません。</target>
        </trans-unit>
        <trans-unit id="32681196fa4394258a9f0ddbaa6841d13623c56b" translate="yes" xml:space="preserve">
          <source>Then the &lt;code&gt;click_on &quot;New Article&quot;&lt;/code&gt; will find the &quot;New Article&quot; button on the index page. This will redirect the browser to &lt;code&gt;/articles/new&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;click_on &quot;New Article&quot;&lt;/code&gt; ]をクリックすると、インデックスページに[新しい記事]ボタンが表示されます。これにより、ブラウザが &lt;code&gt;/articles/new&lt;/code&gt; にリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="c3adef20432b6b66fe2ce80984aa12cb32aa026a" translate="yes" xml:space="preserve">
          <source>Then the fun begins!</source>
          <target state="translated">そして、お楽しみが始まります!</target>
        </trans-unit>
        <trans-unit id="62bc07d8aa975b0496a50ba872658d371c63aa06" translate="yes" xml:space="preserve">
          <source>Then the messages can be verified and returned up to the expire time. Thereafter, the &lt;code&gt;verified&lt;/code&gt; method returns &lt;code&gt;nil&lt;/code&gt; while &lt;code&gt;verify&lt;/code&gt; raises &lt;code&gt;ActiveSupport::MessageVerifier::InvalidSignature&lt;/code&gt;.</source>
          <target state="translated">次に、メッセージを検証して、有効期限まで返されます。その後、 &lt;code&gt;verified&lt;/code&gt; メソッドは &lt;code&gt;nil&lt;/code&gt; を返し、 &lt;code&gt;verify&lt;/code&gt; は &lt;code&gt;ActiveSupport::MessageVerifier::InvalidSignature&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="13f7c19977b2cebec1e9a82e2e3042c127ffb695" translate="yes" xml:space="preserve">
          <source>Then the messages can be verified and returned up to the expire time. Thereafter, verifying returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">次に、メッセージを検証して、有効期限まで返されます。その後、検証すると &lt;code&gt;nil&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="37db38f09873e69b0d0d19b6cd96ccbb3c4b339b" translate="yes" xml:space="preserve">
          <source>Then the preview will be available in http://localhost:3000/rails/mailers/user_mailer/welcome_email.</source>
          <target state="translated">その後、http://localhost:3000/rails/mailers/user_mailer/welcome_email。</target>
        </trans-unit>
        <trans-unit id="369ed4a7ad9c26f1140c7972a5560f133f03519c" translate="yes" xml:space="preserve">
          <source>Then the returned token is &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, and the options are &lt;code&gt;{nonce: &quot;def&quot;}&lt;/code&gt;</source>
          <target state="translated">次に、返されるトークンは &lt;code&gt;&quot;abc&quot;&lt;/code&gt; で、オプションは &lt;code&gt;{nonce: &quot;def&quot;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="366a0275143580828d7dd35a9ff6892eaaf5f9a4" translate="yes" xml:space="preserve">
          <source>Then the test will fill in the title and body of the article with the specified text. Once the fields are filled in, &quot;Create Article&quot; is clicked on which will send a POST request to create the new article in the database.</source>
          <target state="translated">その後、テストは記事のタイトルと本文を指定したテキストで記入します。フィールドが入力されると、&quot;Create Article &quot;がクリックされ、データベースに新しい記事を作成するためのPOSTリクエストが送信されます。</target>
        </trans-unit>
        <trans-unit id="10a63abca550fb5d05522c45d27747f0e9db193b" translate="yes" xml:space="preserve">
          <source>Then the view, to display our message (in &lt;code&gt;app/views/greetings/hello.html.erb&lt;/code&gt;):</source>
          <target state="translated">次に、メッセージを表示するためのビュー（ &lt;code&gt;app/views/greetings/hello.html.erb&lt;/code&gt; 内）：</target>
        </trans-unit>
        <trans-unit id="ddfd5408dd5dd26d25099c7e83d85cdbe7fac7a2" translate="yes" xml:space="preserve">
          <source>Then we need to update &lt;code&gt;ApplicationRecord&lt;/code&gt; to be aware of our new replica.</source>
          <target state="translated">次に、 &lt;code&gt;ApplicationRecord&lt;/code&gt; を更新して、新しいレプリカを認識させる必要があります。</target>
        </trans-unit>
        <trans-unit id="098660123aac14d41b15d67b877d80ee14982a13" translate="yes" xml:space="preserve">
          <source>Then you can add an automatic nonce value by passing &lt;code&gt;nonce: true&lt;/code&gt; as part of &lt;code&gt;html_options&lt;/code&gt;. Example:</source>
          <target state="translated">次に、 &lt;code&gt;html_options&lt;/code&gt; の一部として &lt;code&gt;nonce: true&lt;/code&gt; を渡すことにより、自動nonce値を追加できます。例：</target>
        </trans-unit>
        <trans-unit id="0d37c70958344a9839a6342d4c9fc86d22db17b4" translate="yes" xml:space="preserve">
          <source>Then you can change &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; to look like the following:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; を次のように変更できます。</target>
        </trans-unit>
        <trans-unit id="1f03061ab10bf02c25498814f574e5e40f393c87" translate="yes" xml:space="preserve">
          <source>Then you could create special views like &lt;code&gt;app/views/articles/show.expert.html.erb&lt;/code&gt; that would only be displayed to expert users.</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/show.expert.html.erb&lt;/code&gt; のような特別なビューを作成し、エキスパートユーザーにのみ表示されるようにします。</target>
        </trans-unit>
        <trans-unit id="496beabd3e4e458cf277bd0998b3a81e387ea7cd" translate="yes" xml:space="preserve">
          <source>Then you could do:</source>
          <target state="translated">ならば、あなたにもできるはずです。</target>
        </trans-unit>
        <trans-unit id="9063c5f74d1b74e7ea62cc04b8a5984d7224827c" translate="yes" xml:space="preserve">
          <source>Then you make the &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; look like the following:</source>
          <target state="translated">次に、 &lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt; を次のようにします。</target>
        </trans-unit>
        <trans-unit id="0ca1e0676acb4662d0e6ee4f9143d236d7763d5d" translate="yes" xml:space="preserve">
          <source>Then you start the server using a binstub in &lt;code&gt;bin/cable&lt;/code&gt; ala:</source>
          <target state="translated">次に、 &lt;code&gt;bin/cable&lt;/code&gt; alaのbinstubを使用してサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="87783a1bba48c17b1a2f3223b471f53bb6f44608" translate="yes" xml:space="preserve">
          <source>Then you would create your own channel classes. For example, you could have a &lt;code&gt;ChatChannel&lt;/code&gt; and an &lt;code&gt;AppearanceChannel&lt;/code&gt;:</source>
          <target state="translated">次に、独自のチャネルクラスを作成します。たとえば、 &lt;code&gt;ChatChannel&lt;/code&gt; と &lt;code&gt;AppearanceChannel&lt;/code&gt; を持つことができます：</target>
        </trans-unit>
        <trans-unit id="5b8b29d981a70edce615391b418603f900f0fc23" translate="yes" xml:space="preserve">
          <source>Then your library can be eager loaded by simply calling:</source>
          <target state="translated">そうすれば、単に呼び出すだけでライブラリを熱心に読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="9c669580c7cd4aecaf4436886d6487f9c2355d6f" translate="yes" xml:space="preserve">
          <source>Then, elsewhere in your Rails application, you can broadcast to such a room by calling &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionCable/Server/Broadcasting.html#method-i-broadcast&quot;&gt;&lt;code&gt;broadcast&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">その後、別の場所でRailsアプリケーションでは、あなたは呼び出すことで、このようなAの部屋にブロードキャストすることができ&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionCable/Server/Broadcasting.html#method-i-broadcast&quot;&gt; &lt;code&gt;broadcast&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="e48472de2f53d5ecda6546f6dd9503f542948c68" translate="yes" xml:space="preserve">
          <source>Then, if you want webrat to be invoked, just supply:</source>
          <target state="translated">そして、webratを起動させたい場合は、単に供給するだけです。</target>
        </trans-unit>
        <trans-unit id="70a620085ffad4cda58d1cc705b7621b4c3d6b03" translate="yes" xml:space="preserve">
          <source>Then, in another template or layout, this code would render both links in order:</source>
          <target state="translated">そして、別のテンプレートやレイアウトでは、このコードは両方のリンクを順番にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="1ee33242fa8dc35c52b38b93dd261d062e831523" translate="yes" xml:space="preserve">
          <source>Then, in another template or layout, this code would render only the last link:</source>
          <target state="translated">そして、別のテンプレートやレイアウトでは、このコードは最後のリンクだけをレンダリングします。</target>
        </trans-unit>
        <trans-unit id="c02759babbfbed3b2ce9248b83250e3d9c6e304d" translate="yes" xml:space="preserve">
          <source>Then, in another view, you could to do something like this:</source>
          <target state="translated">その後、別のビューでは、このようなことをすることができます。</target>
        </trans-unit>
        <trans-unit id="2428dd5467214a1330f0142642a33f223e8adb27" translate="yes" xml:space="preserve">
          <source>Then, in any view rendered by &lt;code&gt;EventsController&lt;/code&gt;, the &lt;code&gt;format_time&lt;/code&gt; method can be called:</source>
          <target state="translated">次に、 &lt;code&gt;EventsController&lt;/code&gt; によってレンダリングされた任意のビューで、 &lt;code&gt;format_time&lt;/code&gt; メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="c65e9c4deed32989d4d5a92327af12701fec9bd3" translate="yes" xml:space="preserve">
          <source>Then, in our &lt;code&gt;index&lt;/code&gt; action template (&lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt;) we would use the &lt;code&gt;archived?&lt;/code&gt; method to avoid displaying any article that is archived:</source>
          <target state="translated">次に、 &lt;code&gt;index&lt;/code&gt; アクションテンプレート（ &lt;code&gt;app/views/articles/index.html.erb&lt;/code&gt; ）で、 &lt;code&gt;archived?&lt;/code&gt; を使用します。アーカイブされた記事の表示を回避する方法：</target>
        </trans-unit>
        <trans-unit id="6ab1405302d62c1ecddf63d2dc2d85296feb34ca" translate="yes" xml:space="preserve">
          <source>Then, in your application's configuration, you can specify the service to use like this:</source>
          <target state="translated">そして、アプリケーションの設定では、このように使用するサービスを指定することができます。</target>
        </trans-unit>
        <trans-unit id="57185357f15f4a8fb2cd8be83b26417c031c473e" translate="yes" xml:space="preserve">
          <source>Then, one asserts whether the current state is as expected. &amp;ldquo;State&amp;rdquo; can be anything: the controller's HTTP response, the database contents, etc.</source>
          <target state="translated">次に、現在の状態が期待どおりかどうかをアサートします。「状態」は、コントローラのHTTP応答、データベースのコンテンツなど、何でもかまいません。</target>
        </trans-unit>
        <trans-unit id="482ca65ca763b7b0baddca14580910c2d6413532" translate="yes" xml:space="preserve">
          <source>Then, one asserts whether the current state is as expected. &amp;ldquo;State&amp;rdquo; can be anything: transmitted messages, subscribed streams, etc.</source>
          <target state="translated">次に、現在の状態が期待どおりかどうかをアサートします。「状態」は何でもかまいません：送信されたメッセージ、サブスクライブされたストリームなど。</target>
        </trans-unit>
        <trans-unit id="031870965fb348d4c11e251e9555a1156c075b8c" translate="yes" xml:space="preserve">
          <source>There also may be a case where you have a database that you don't always want to connect to on application boot but may need for a slow query or analytics. After defining that database in the &lt;code&gt;database.yml&lt;/code&gt; you can connect by passing a database argument to &lt;code&gt;connected_to&lt;/code&gt;</source>
          <target state="translated">また、アプリケーションの起動時に常に接続する必要はないが、クエリや分析に時間がかかるデータベースが存在する場合もあります。で、そのデータベースを定義した後 &lt;code&gt;database.yml&lt;/code&gt; をあなたがにデータベース引数を渡すことで接続することができます &lt;code&gt;connected_to&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3bb2b87b49ad713bc9166e86cd1da2325e0969a0" translate="yes" xml:space="preserve">
          <source>There are &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; methods in Ruby, but only &lt;code&gt;public&lt;/code&gt; methods can be actions for controllers. For more details check out &lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Programming Ruby&lt;/a&gt;.</source>
          <target state="translated">Rubyには &lt;code&gt;public&lt;/code&gt; 、 &lt;code&gt;private&lt;/code&gt; 、および &lt;code&gt;protected&lt;/code&gt; メソッドがありますが、コントローラーのアクションにできるのは &lt;code&gt;public&lt;/code&gt; メソッドのみです。詳細については、&lt;a href=&quot;http://www.ruby-doc.org/docs/ProgrammingRuby/&quot;&gt;Rubyのプログラミングを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="19b00caa5f3ff7b3b669683c7dea0b0d4f09835e" translate="yes" xml:space="preserve">
          <source>There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. For example, if a C extension in the interpreter calls &lt;code&gt;malloc()&lt;/code&gt; but doesn't properly call &lt;code&gt;free()&lt;/code&gt;, this memory won't be available until the app terminates.</source>
          <target state="translated">多くのメモリ管理とスレッド化のバグを自動的に検出し、プログラムを詳細にプロファイリングできるValgrindツールがあります。たとえば、インタプリタのC拡張が &lt;code&gt;malloc()&lt;/code&gt; を呼び出しても、 &lt;code&gt;free()&lt;/code&gt; を適切に呼び出さない場合、このメモリはアプリが終了するまで使用できません。</target>
        </trans-unit>
        <trans-unit id="9b00b3df83e32e888bc604425fec394ee693ccd7" translate="yes" xml:space="preserve">
          <source>There are a couple of new configuration settings that you should add to your development environment:</source>
          <target state="translated">開発環境に追加すべき新しい設定がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="164be5c17020dc109dc9be858a8e3b603db5fe38" translate="yes" xml:space="preserve">
          <source>There are a couple of things to notice in the above example. We need to make sure to close the response stream. Forgetting to close the stream will leave the socket open forever. We also have to set the content type to &lt;code&gt;text/event-stream&lt;/code&gt; before we write to the response stream. This is because headers cannot be written after the response has been committed (when &lt;code&gt;response.committed?&lt;/code&gt; returns a truthy value), which occurs when you &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;commit&lt;/code&gt; the response stream.</source>
          <target state="translated">上記の例では、いくつかの注意点があります。必ず応答ストリームを閉じる必要があります。ストリームを閉じるのを忘れると、ソケットは永久に開いたままになります。また、応答ストリームに書き込む前に、コンテンツタイプを &lt;code&gt;text/event-stream&lt;/code&gt; に設定する必要があります。これは、応答がコミットされた後（ &lt;code&gt;response.committed?&lt;/code&gt; が真の値を返したとき）にヘッダーを書き込むことができないためです。これは、応答ストリームを &lt;code&gt;write&lt;/code&gt; だり &lt;code&gt;commit&lt;/code&gt; したりしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="0c768baf5fd448c75d1de2436abdaa5e34da7465" translate="yes" xml:space="preserve">
          <source>There are a few caveats with this module. You &lt;strong&gt;cannot&lt;/strong&gt; write headers after the response has been committed (Response#committed? will return truthy). Calling &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;close&lt;/code&gt; on the response stream will cause the response object to be committed. Make sure all headers are set before calling write or close on your stream.</source>
          <target state="translated">このモジュールにはいくつかの注意点があります。応答がコミットされた後でヘッダーを書き込むこと&lt;strong&gt;はできません&lt;/strong&gt;（Response＃committed？は真実を返します）。応答ストリームで &lt;code&gt;write&lt;/code&gt; または &lt;code&gt;close&lt;/code&gt; を呼び出すと、応答オブジェクトがコミットされます。ストリームでwriteまたはcloseを呼び出す前に、すべてのヘッダーが設定されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4bad24b22c7cae4c6a61de5d3108af1db11f82d6" translate="yes" xml:space="preserve">
          <source>There are a few commands that are absolutely critical to your everyday usage of Rails. In the order of how much you'll probably use them are:</source>
          <target state="translated">Railsを日常的に使う上で絶対に欠かせないコマンドがいくつかあります。おそらく使うであろう順に並べると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e56663a6abdb097299bc4197150b89e3d7d69945" translate="yes" xml:space="preserve">
          <source>There are a few configuration options available in Active Support:</source>
          <target state="translated">アクティブサポートでは、いくつかの設定オプションが用意されています。</target>
        </trans-unit>
        <trans-unit id="e637e4147c84d8dceeb2b213377ec66714ac9891" translate="yes" xml:space="preserve">
          <source>There are a few major changes related to JSON handling in Rails 4.1.</source>
          <target state="translated">Rails 4.1ではJSONの扱いに関連した大きな変更点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="aec8cfbde75f8f1d463fce1d466fe8064fa5e4a5" translate="yes" xml:space="preserve">
          <source>There are a few more steps to be carried out before our application works with the addition of &lt;code&gt;status&lt;/code&gt; column. First, let's run the following migrations to add &lt;code&gt;status&lt;/code&gt; to &lt;code&gt;Articles&lt;/code&gt; and &lt;code&gt;Comments&lt;/code&gt;:</source>
          <target state="translated">アプリケーションが &lt;code&gt;status&lt;/code&gt; 列を追加して機能する前に、実行する必要のある手順がさらにいくつかあります。まず、次の移行を実行して、 &lt;code&gt;Articles&lt;/code&gt; と &lt;code&gt;Comments&lt;/code&gt; &lt;code&gt;status&lt;/code&gt; を追加しましょう。</target>
        </trans-unit>
        <trans-unit id="c564b1ac7e5320df2899d4761623e9c54d1bfc41" translate="yes" xml:space="preserve">
          <source>There are a few special &lt;code&gt;html_options&lt;/code&gt;:</source>
          <target state="translated">いくつかの特別な &lt;code&gt;html_options&lt;/code&gt; があります：</target>
        </trans-unit>
        <trans-unit id="09097833af7a7785ff0289cc3e4cd9f30ec67ede" translate="yes" xml:space="preserve">
          <source>There are a few steps to get up and running with I18n support for a Rails application.</source>
          <target state="translated">RailsアプリケーションのI18nサポートを利用して立ち上げるには、いくつかのステップがあります。</target>
        </trans-unit>
        <trans-unit id="d785783338230f3b87db04ee80e1a01039e7eb28" translate="yes" xml:space="preserve">
          <source>There are a few things to note here:</source>
          <target state="translated">ここで注意すべき点がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a7ec542f6e00c4c48c1cc756a5abf11aceb10d86" translate="yes" xml:space="preserve">
          <source>There are a number of authentication plug-ins for Rails available. Good ones, such as the popular &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;devise&lt;/a&gt; and &lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt;, store only encrypted passwords, not plain-text passwords. In Rails 3.1 you can use the built-in &lt;code&gt;has_secure_password&lt;/code&gt; method which has similar features.</source>
          <target state="translated">Rails用の多数の認証プラグインが利用可能です。などの人気として良いもの、&lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;工夫&lt;/a&gt;と&lt;a href=&quot;https://github.com/binarylogic/authlogic&quot;&gt;authlogic&lt;/a&gt;、店舗のみで暗号化されたパスワードではなく、プレーンテキストのパスワード。Rails 3.1 では、同様の機能を持つ &lt;code&gt;has_secure_password&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="9e915227e133b452b09ab70d569af6da2645774d" translate="yes" xml:space="preserve">
          <source>There are a number of settings available on &lt;code&gt;config.action_mailer&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config.action_mailer&lt;/code&gt; にはいくつかの設定があります：</target>
        </trans-unit>
        <trans-unit id="dd7c127858d5bd0036433e51e9a1318a30cbc05b" translate="yes" xml:space="preserve">
          <source>There are also attribute readers and writers for the following attributes:</source>
          <target state="translated">また、以下のような属性の読み手や書き手もいます。</target>
        </trans-unit>
        <trans-unit id="dc21147cd3a67cc0d6503d0c6c1d9ae6e97da06e" translate="yes" xml:space="preserve">
          <source>There are also some Action Mailer-specific helper methods available in &lt;code&gt;ActionMailer::MailHelper&lt;/code&gt;. For example, these allow accessing the mailer instance from your view with &lt;code&gt;mailer&lt;/code&gt;, and accessing the message as &lt;code&gt;message&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ActionMailer::MailHelper&lt;/code&gt; 使用できるActionMailer固有のヘルパーメソッドもいくつかあります。例えば、これらは、とあなたのビューからメーラーのインスタンスにアクセスできるように &lt;code&gt;mailer&lt;/code&gt; 、および、メッセージにアクセスして &lt;code&gt;message&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6ab98ce79b9f7ae2b050438c168ded2c086027fb" translate="yes" xml:space="preserve">
          <source>There are also some optional column names that will add additional features to Active Record instances:</source>
          <target state="translated">また、Active Recordインスタンスに追加機能を追加するオプションのカラム名もいくつかあります。</target>
        </trans-unit>
        <trans-unit id="9a3b4a5facffc66d580f52bd37aca25d75f46c3f" translate="yes" xml:space="preserve">
          <source>There are also three special methods available: &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;, which are the current item being rendered, its text and value methods, respectively. You can use them like this:</source>
          <target state="translated">また、3つの特別なメソッド、 &lt;code&gt;object&lt;/code&gt; 、 &lt;code&gt;text&lt;/code&gt; 、 &lt;code&gt;value&lt;/code&gt; が利用可能です。これらは現在レンダリングされているアイテムであり、それぞれtextメソッドとvalueメソッドです。次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="e9328ff730efb351cb7c68f93646e3e43677d947" translate="yes" xml:space="preserve">
          <source>There are cases where you need to define a method with &lt;code&gt;define_method&lt;/code&gt;, but don't know whether a method with that name already exists. If it does, a warning is issued if they are enabled. No big deal, but not clean either.</source>
          <target state="translated">&lt;code&gt;define_method&lt;/code&gt; でメソッドを定義する必要がある場合がありますが、その名前のメソッドがすでに存在するかどうかはわかりません。存在する場合、それらが有効になっていると警告が発行されます。大したことではないが、きれいでもない。</target>
        </trans-unit>
        <trans-unit id="029bc6ef9eb6398dbbb511125f106e1c755e2fa6" translate="yes" xml:space="preserve">
          <source>There are certain queries that can't run inside a transaction. If your adapter supports DDL transactions you can use &lt;code&gt;disable_ddl_transaction!&lt;/code&gt; to disable them for a single migration.</source>
          <target state="translated">トランザクション内で実行できない特定のクエリがあります。アダプターがDDLトランザクションをサポートしている場合は、 &lt;code&gt;disable_ddl_transaction!&lt;/code&gt; を使用できます。単一の移行でそれらを無効にします。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
