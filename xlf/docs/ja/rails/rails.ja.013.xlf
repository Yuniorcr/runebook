<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="92a84248a85c0345a1f31c7e901bddf26352d033" translate="yes" xml:space="preserve">
          <source>If you did not configure the &lt;code&gt;:host&lt;/code&gt; option globally make sure to pass it to the URL helper.</source>
          <target state="translated">&lt;code&gt;:host&lt;/code&gt; オプションをグローバルに構成しなかった場合は、必ずURLヘルパーに渡してください。</target>
        </trans-unit>
        <trans-unit id="19f896a8051227d916889ea44e72bfd1d0512d45" translate="yes" xml:space="preserve">
          <source>If you didn't want to use a generator, you could create your own file inside of &lt;code&gt;app/mailers&lt;/code&gt;, just make sure that it inherits from &lt;code&gt;ActionMailer::Base&lt;/code&gt;:</source>
          <target state="translated">ジェネレーターを使用したくない場合は、 &lt;code&gt;app/mailers&lt;/code&gt; 内に独自のファイルを作成できます。このファイルが &lt;code&gt;ActionMailer::Base&lt;/code&gt; から継承されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="31e7db8dd815a268d841d89ad01529eaae9db9a7" translate="yes" xml:space="preserve">
          <source>If you do not pass a block to the &lt;code&gt;mail&lt;/code&gt; method, it will find all templates in the view paths using by default the mailer name and the method name that it is being called from, it will then create parts for each of these templates intelligently, making educated guesses on correct content type and sequence, and return a fully prepared &lt;code&gt;Mail::Message&lt;/code&gt; ready to call &lt;code&gt;:deliver&lt;/code&gt; on to send.</source>
          <target state="translated">&lt;code&gt;mail&lt;/code&gt; メソッドにブロックを渡さない場合、デフォルトでメーラー名とそれが呼び出されているメソッド名を使用してビューパス内のすべてのテンプレートが検索され、これらのテンプレートごとにインテリジェントにパーツが作成されます。正しいコンテンツタイプと配列に教育を受けた推測を作り、そして完全に準備返す &lt;code&gt;Mail::Message&lt;/code&gt; 呼び出す準備ができて &lt;code&gt;:deliver&lt;/code&gt; 送信するために。</target>
        </trans-unit>
        <trans-unit id="e49bb87fb9a1a55c72a69389c44e7008d38edb7d" translate="yes" xml:space="preserve">
          <source>If you do not provide a block to &lt;a href=&quot;batchenumerator#method-i-each_record&quot;&gt;each_record&lt;/a&gt;, it will return an Enumerator for chaining with other methods:</source>
          <target state="translated">&lt;a href=&quot;batchenumerator#method-i-each_record&quot;&gt;each_record&lt;/a&gt;にブロックを指定しない場合、他のメソッドとチェーンするための列挙子が返されます。</target>
        </trans-unit>
        <trans-unit id="4140ab18bcd63be6a412aecefbbbd190489cd2d5" translate="yes" xml:space="preserve">
          <source>If you do not provide a block to &lt;a href=&quot;batches#method-i-find_each&quot;&gt;find_each&lt;/a&gt;, it will return an Enumerator for chaining with other methods:</source>
          <target state="translated">&lt;a href=&quot;batches#method-i-find_each&quot;&gt;find_each&lt;/a&gt;にブロックを指定しない場合、他のメソッドとチェーンするための列挙子が返されます。</target>
        </trans-unit>
        <trans-unit id="7cb18e1cb1e3c7f393cc6642780d06d1eb6b80c5" translate="yes" xml:space="preserve">
          <source>If you do not provide a block to &lt;a href=&quot;batches#method-i-find_in_batches&quot;&gt;find_in_batches&lt;/a&gt;, it will return an Enumerator for chaining with other methods:</source>
          <target state="translated">&lt;a href=&quot;batches#method-i-find_in_batches&quot;&gt;find_in_batches&lt;/a&gt;にブロックを指定しない場合、他のメソッドとチェーンするための列挙子が返されます。</target>
        </trans-unit>
        <trans-unit id="f027cb4edcde27ee50ad5b5eddd3e7ae2b8487fc" translate="yes" xml:space="preserve">
          <source>If you do not provide a block to &lt;a href=&quot;batches#method-i-in_batches&quot;&gt;in_batches&lt;/a&gt;, it will return a &lt;a href=&quot;batches/batchenumerator&quot;&gt;BatchEnumerator&lt;/a&gt; which is enumerable.</source>
          <target state="translated">&lt;a href=&quot;batches#method-i-in_batches&quot;&gt;in_batches&lt;/a&gt;にブロックを指定しない場合、列挙可能な&lt;a href=&quot;batches/batchenumerator&quot;&gt;BatchEnumerator&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="a014b6ac6ec93d8bd393971aaa82010a7c491b1f" translate="yes" xml:space="preserve">
          <source>If you do not set the &lt;code&gt;:inverse_of&lt;/code&gt; record, the association will do its best to match itself up with the correct inverse. Automatic inverse detection only works on &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;, &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; associations.</source>
          <target state="translated">&lt;code&gt;:inverse_of&lt;/code&gt; レコードを設定しない場合、アソシエーションはそれ自体を正しいインバースと一致させるために最善を尽くします。自動逆検出は、&lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;、&lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;、および&lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;関連付けでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="02910cc77b0be1566c9800df7735a1d0ac74e701" translate="yes" xml:space="preserve">
          <source>If you do not specify a value for this option, a deprecation warning will be emitted. To avoid this, add the following line to your test environment:</source>
          <target state="translated">このオプションに値を指定しないと、非推奨の警告が発せられます。これを避けるために、以下の行をテスト環境に追加してください。</target>
        </trans-unit>
        <trans-unit id="eef8af99ea47332d6d11e1ad298d5910dde6559d" translate="yes" xml:space="preserve">
          <source>If you do not want the instance predicate, pass &lt;code&gt;instance_predicate: false&lt;/code&gt; and it will not be defined.</source>
          <target state="translated">インスタンスの述語が不要な &lt;code&gt;instance_predicate: false&lt;/code&gt; 、instance_predicate：falseを渡すと定義されません。</target>
        </trans-unit>
        <trans-unit id="48efd90fc348a0d9589d86743ee6c2acc3f50c3d" translate="yes" xml:space="preserve">
          <source>If you do not want your file to be handled via the raw handler, you should add an extension to your file that can be parsed by the appropriate template handler.</source>
          <target state="translated">ファイルを生ハンドラで処理したくない場合は、適切なテンプレートハンドラで解析できる拡張子をファイルに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="406900a443f2d25a6b532f732fd2e6e6351bbff5" translate="yes" xml:space="preserve">
          <source>If you do pass a block, you can render specific templates of your choice:</source>
          <target state="translated">ブロックを渡した場合は、お好みのテンプレートをレンダリングすることができます。</target>
        </trans-unit>
        <trans-unit id="74ecd23e26826cdd049e7329b893237f73b60f68" translate="yes" xml:space="preserve">
          <source>If you do so, you will have to define manually the class name that is hosting the fixtures (my_products.yml) using the &lt;code&gt;set_fixture_class&lt;/code&gt; method in your test definition:</source>
          <target state="translated">その場合、テスト定義で &lt;code&gt;set_fixture_class&lt;/code&gt; メソッドを使用して、フィクスチャ（my_products.yml）をホストしているクラス名を手動で定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca0e1fc71c14f9f8af7450a60a370b0f48d31113" translate="yes" xml:space="preserve">
          <source>If you do this, then Mail will take the file name and work out the mime type. It will also set the Content-Type, Content-Disposition, Content-Transfer-Encoding and encode the contents of the attachment in Base64.</source>
          <target state="translated">これを実行すると、Mail はファイル名を取得して MIME タイプを計算します。また、Content-Type、Content-Disposition、Content-Transfer-Encodingを設定し、添付ファイルの内容をBase64でエンコードします。</target>
        </trans-unit>
        <trans-unit id="8767744e965d45f97b638be1206c0cffe952975f" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t provide a content type and Active Storage can&amp;rsquo;t determine the file&amp;rsquo;s content type automatically, it defaults to application/octet-stream.</source>
          <target state="translated">コンテンツタイプを指定せず、Active Storageがファイルのコンテンツタイプを自動的に判別できない場合、デフォルトでapplication / octet-streamになります。</target>
        </trans-unit>
        <trans-unit id="fc9c20b9484d5edd8a9592cdbfabd993cce65aec" translate="yes" xml:space="preserve">
          <source>If you don't have a type column defined in your table, single-table inheritance won't be triggered. In that case, it'll work just like normal subclasses with no special magic for differentiating between them or reloading the right type with find.</source>
          <target state="translated">テーブルに型のカラムが定義されていない場合、シングルテーブル継承は発動しません。その場合は、通常のサブクラスと同じように動作し、特別に区別したり、find で正しい型をリロードしたりする魔法はありません。</target>
        </trans-unit>
        <trans-unit id="f2bc8d4f243e8832712c4be31cca4d7689b2c779" translate="yes" xml:space="preserve">
          <source>If you don't have any special response processing and are using the default rendering mechanism (i.e. you're not using &lt;code&gt;respond_to&lt;/code&gt; or calling render yourself) then you've got an easy helper in &lt;code&gt;fresh_when&lt;/code&gt;:</source>
          <target state="translated">特別な応答処理がなく、デフォルトのレンダリングメカニズムを使用している場合（つまり、 &lt;code&gt;respond_to&lt;/code&gt; を使用していないか、自分でrenderを呼び出していない場合）、 &lt;code&gt;fresh_when&lt;/code&gt; に簡単なヘルパーがあります。</target>
        </trans-unit>
        <trans-unit id="536d96169698859e04794d8ff518da4654447b74" translate="yes" xml:space="preserve">
          <source>If you don't have it, you can add the following to your &lt;code&gt;Gemfile&lt;/code&gt;:</source>
          <target state="translated">お持ちでない場合は、以下を &lt;code&gt;Gemfile&lt;/code&gt; に追加できます。</target>
        </trans-unit>
        <trans-unit id="d8fe1583558b53ca29247f000ea8f412b9bbd5ca" translate="yes" xml:space="preserve">
          <source>If you don't just want to parlay the broadcast unfiltered to the subscriber, you can also supply a callback that lets you alter what is sent out. The below example shows how you can use this to provide performance introspection in the process:</source>
          <target state="translated">単にフィルタリングされていないブロードキャストをサブスクライバーにパーレイしたいだけではなく、送信されるものを変更できるようにコールバックを提供することもできます。以下の例は、これを使用してプロセスのパフォーマンスのイントロスペクションを提供する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0ff55d0e491430e1f64a9c77d9de71b7cbc9a9a1" translate="yes" xml:space="preserve">
          <source>If you don't need to attach a form to a model instance, then check out &lt;a href=&quot;formtaghelper#method-i-form_tag&quot;&gt;ActionView::Helpers::FormTagHelper#form_tag&lt;/a&gt;.</source>
          <target state="translated">フォームをモデルインスタンスに添付する必要がない場合は、&lt;a href=&quot;formtaghelper#method-i-form_tag&quot;&gt;ActionView :: Helpers :: FormTagHelper＃form_tagを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="ccd012a92fa2736ea2202478d5a8d02230235625" translate="yes" xml:space="preserve">
          <source>If you don't pass a subject to the &lt;code&gt;mail&lt;/code&gt; method, Action Mailer will try to find it in your translations. The performed lookup will use the pattern &lt;code&gt;&amp;lt;mailer_scope&amp;gt;.&amp;lt;action_name&amp;gt;.subject&lt;/code&gt; to construct the key.</source>
          <target state="translated">件名を &lt;code&gt;mail&lt;/code&gt; メソッドに渡さない場合、アクションメーラーは翻訳で件名を見つけようとします。実行される検索では、パターン &lt;code&gt;&amp;lt;mailer_scope&amp;gt;.&amp;lt;action_name&amp;gt;.subject&lt;/code&gt; を使用してキーを作成します。</target>
        </trans-unit>
        <trans-unit id="43990df1c551a2eb7490c735de41631ffb9f7a25" translate="yes" xml:space="preserve">
          <source>If you don't specify an endpoint, routes will be used as the default endpoint. You can use them just like you use an application's routes:</source>
          <target state="translated">エンドポイントを指定しない場合は、デフォルトのエンドポイントとして routes が使用されます。アプリケーションのルートを使うのと同じように使うことができます。</target>
        </trans-unit>
        <trans-unit id="892033cd916d52f004ab4ae9e14cfd8ddedf786b" translate="yes" xml:space="preserve">
          <source>If you don't want to an authenticity token field be rendered at all just pass &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">認証トークンフィールドをまったくレンダリングしたくない場合は、単に &lt;code&gt;false&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="8cb88ea8687e4075151208607606ccf25698f8be" translate="yes" xml:space="preserve">
          <source>If you don't want to force a layout on to users of the engine, then you can delete this file and reference a different layout in the controllers of your engine.</source>
          <target state="translated">エンジンのユーザーにレイアウトを強制したくない場合は、このファイルを削除して、エンジンのコントローラで別のレイアウトを参照することができます。</target>
        </trans-unit>
        <trans-unit id="25721c75d7a2c3ad6bd3a5b975b48bea88d6ad0b" translate="yes" xml:space="preserve">
          <source>If you don't want to force the use of a locale in your routes you can use an optional path scope (denoted by the parentheses) like so:</source>
          <target state="translated">ルートでロケールを強制的に使用したくない場合は、オプションのパススコープ (括弧で囲まれた部分)を使用することができます。</target>
        </trans-unit>
        <trans-unit id="a4220d9a84edef742f81d3e912d4afd9142ab026" translate="yes" xml:space="preserve">
          <source>If you don't want to use a generator, you could create your own file inside of &lt;code&gt;app/jobs&lt;/code&gt;, just make sure that it inherits from &lt;code&gt;ApplicationJob&lt;/code&gt;.</source>
          <target state="translated">ジェネレータを使用したくない場合は、 &lt;code&gt;app/jobs&lt;/code&gt; 内に独自のファイルを作成し、 &lt;code&gt;ApplicationJob&lt;/code&gt; から継承するようにしてください。</target>
        </trans-unit>
        <trans-unit id="3637b43bcc260555a9e865a3fb610bd1839c0baf" translate="yes" xml:space="preserve">
          <source>If you don't want to use a middleware that is included by default in the API-only middleware set, you can remove it with:</source>
          <target state="translated">APIのみのミドルウェアセットにデフォルトで含まれているミドルウェアを使用したくない場合は、以下で削除できます。</target>
        </trans-unit>
        <trans-unit id="20674bbcbba7835744bdc242bcd09875ead799c3" translate="yes" xml:space="preserve">
          <source>If you eager load an association with a specified &lt;code&gt;:limit&lt;/code&gt; option, it will be ignored, returning all the associated objects:</source>
          <target state="translated">指定された &lt;code&gt;:limit&lt;/code&gt; オプションを使用して関連付けを熱心にロードすると、その関連付けは無視され、関連付けられたすべてのオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="7f46061761309fdc2cd2fc6d585a72e40532ccf5" translate="yes" xml:space="preserve">
          <source>If you enable &lt;code&gt;ParamsWrapper&lt;/code&gt; for &lt;code&gt;:json&lt;/code&gt; format, instead of having to send JSON parameters like this:</source>
          <target state="translated">&lt;code&gt;:json&lt;/code&gt; 形式で &lt;code&gt;ParamsWrapper&lt;/code&gt; を有効にすると、次のようなJSONパラメータを送信する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="82e3c1aec71b777fae1e7b0b4a0fe046629f64f9" translate="yes" xml:space="preserve">
          <source>If you find your helpers are cluttering &lt;code&gt;test_helper.rb&lt;/code&gt;, you can extract them into separate files. One good place to store them is &lt;code&gt;lib/test&lt;/code&gt;.</source>
          <target state="translated">ヘルパーが &lt;code&gt;test_helper.rb&lt;/code&gt; を乱雑に見つけている場合は、それらを個別のファイルに抽出できます。それらを保存するための1つの良い場所は &lt;code&gt;lib/test&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="30e6213fe0918312e4279adb45e7deef5e07336a" translate="yes" xml:space="preserve">
          <source>If you find your own locale (language) missing from our &lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale&quot;&gt;example translations data&lt;/a&gt; repository for Ruby on Rails, please &lt;a href=&quot;https://github.com/guides/fork-a-project-and-submit-your-modifications&quot;&gt;&lt;em&gt;fork&lt;/em&gt;&lt;/a&gt; the repository, add your data, and send a &lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;pull request&lt;/a&gt;.</source>
          <target state="translated">Ruby on Railsの&lt;a href=&quot;https://github.com/svenfuchs/rails-i18n/tree/master/rails/locale&quot;&gt;翻訳データ&lt;/a&gt;リポジトリの例に独自のロケール（言語）がない場合は、リポジトリを&lt;a href=&quot;https://github.com/guides/fork-a-project-and-submit-your-modifications&quot;&gt;&lt;em&gt;フォーク&lt;/em&gt;&lt;/a&gt;してデータを追加し、&lt;a href=&quot;https://help.github.com/articles/about-pull-requests/&quot;&gt;プルリクエスト&lt;/a&gt;を送信してください。</target>
        </trans-unit>
        <trans-unit id="aee4c416dc0883b87638d93d75d5ac3f38315db4" translate="yes" xml:space="preserve">
          <source>If you find yourself adding many extra actions to a resourceful route, it's time to stop and ask yourself whether you're disguising the presence of another resource.</source>
          <target state="translated">リソースの多いルートに多くの余分なアクションを追加していることに気づいたら、立ち止まって、別のリソースの存在を偽装していないかどうかを自問自答してみましょう。</target>
        </trans-unit>
        <trans-unit id="67863595d8969ae1f5a6fe5426cd6b3cf82732bd" translate="yes" xml:space="preserve">
          <source>If you find yourself wanting to change this option uniformly for all of your routes, you can use a scope.</source>
          <target state="translated">すべてのルートでこのオプションを一律に変更したい場合は、スコープを使用することができます。</target>
        </trans-unit>
        <trans-unit id="08c1ed0660af323c6b38280145d4b69ea2250ce1" translate="yes" xml:space="preserve">
          <source>If you followed the steps in the Basic Authentication section, you'll need to add authorization to every request header to get all the tests passing:</source>
          <target state="translated">基本的な認証のセクションのステップに従った場合、すべてのテストを通過させるために、すべてのリクエストヘッダに認証を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="07b3354400b50989138ed2cd6a3c38797d5e394e" translate="yes" xml:space="preserve">
          <source>If you frequently retrieve authors directly from chapters (&lt;code&gt;@chapter.book.author&lt;/code&gt;), then you can make your code somewhat more efficient by including authors in the association from chapters to books:</source>
          <target state="translated">章から直接著者を頻繁に取得する場合（ &lt;code&gt;@chapter.book.author&lt;/code&gt; ）、章から本への関連付けに著者を含めることにより、コードをいくらか効率的にすることができます。</target>
        </trans-unit>
        <trans-unit id="73716ae08dcaaac4220267ec92986f29436f62be" translate="yes" xml:space="preserve">
          <source>If you frequently retrieve chapters directly from authors (&lt;code&gt;@author.books.chapters&lt;/code&gt;), then you can make your code somewhat more efficient by including chapters in the association from authors to books:</source>
          <target state="translated">著者から直接章を頻繁に取得する場合（ &lt;code&gt;@author.books.chapters&lt;/code&gt; ）、著者から本への関連付けに章を含めることにより、コードをいくらか効率的にすることができます。</target>
        </trans-unit>
        <trans-unit id="98a0030b10beafb8e8d4a632de359b4cb60e78fe" translate="yes" xml:space="preserve">
          <source>If you frequently retrieve representatives directly from suppliers (&lt;code&gt;@supplier.account.representative&lt;/code&gt;), then you can make your code somewhat more efficient by including representatives in the association from suppliers to accounts:</source>
          <target state="translated">サプライヤから直接代表を頻繁に取得する場合（ &lt;code&gt;@supplier.account.representative&lt;/code&gt; ）、サプライヤからアカウントへの関連付けに代表を含めることにより、コードをいくらか効率的にすることができます。</target>
        </trans-unit>
        <trans-unit id="c0c0aef2c83bdce2045072d5251d85d631c54098" translate="yes" xml:space="preserve">
          <source>If you generate a form like this:</source>
          <target state="translated">このようなフォームを生成すると</target>
        </trans-unit>
        <trans-unit id="5f9908bbf604191f82bab577a8c5260160dab56d" translate="yes" xml:space="preserve">
          <source>If you generate another resource, you can see that we get exactly the same result! This is useful if you want to customize your scaffold templates and/or layout by just creating &lt;code&gt;edit.html.erb&lt;/code&gt;, &lt;code&gt;index.html.erb&lt;/code&gt; and so on inside &lt;code&gt;lib/templates/erb/scaffold&lt;/code&gt;.</source>
          <target state="translated">別のリソースを生成すると、まったく同じ結果が得られることがわかります！これは、 &lt;code&gt;lib/templates/erb/scaffold&lt;/code&gt; 内に &lt;code&gt;edit.html.erb&lt;/code&gt; 、 &lt;code&gt;index.html.erb&lt;/code&gt; などを作成するだけで、スキャフォールドテンプレートやレイアウトをカスタマイズする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d8d80a96cb267acb711147a9efacc8f899edfd01" translate="yes" xml:space="preserve">
          <source>If you generated your mailer, the generator does not create stub fixtures for the mailers actions. You'll have to create those files yourself as described above.</source>
          <target state="translated">メーラーを生成した場合、ジェネレーターはメーラーのアクションのためのスタブ・フィクスチャを作成しません。上記で説明したように、それらのファイルを自分で作成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="0fd092a4ccbfde5c34feeb7f091644196fcd76ba" translate="yes" xml:space="preserve">
          <source>If you get the above error, you might want to increase the size of the connection pool by incrementing the &lt;code&gt;pool&lt;/code&gt; option in &lt;code&gt;database.yml&lt;/code&gt;</source>
          <target state="translated">上記のエラーが発生した場合は、 &lt;code&gt;database.yml&lt;/code&gt; の &lt;code&gt;pool&lt;/code&gt; オプションをインクリメントして、接続プールのサイズを増やすことができます。</target>
        </trans-unit>
        <trans-unit id="5abe2a9c4438d6b9d28b46ea384acc62f1555bf4" translate="yes" xml:space="preserve">
          <source>If you got there by a browser request, the browser tab containing the request will be hung until the debugger has finished and the trace has finished processing the entire request.</source>
          <target state="translated">ブラウザのリクエストで辿り着いた場合、デバッガが終了してトレースがリクエスト全体の処理を終えるまで、リクエストを含むブラウザタブはハングします。</target>
        </trans-unit>
        <trans-unit id="90a6bff827a4dfd6e1a87d9ded69a67eee69dad6" translate="yes" xml:space="preserve">
          <source>If you have a &lt;code&gt;config/database.yml&lt;/code&gt; but no &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; then this file will be used to connect to your database:</source>
          <target state="translated">&lt;code&gt;config/database.yml&lt;/code&gt; はあるが &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; がない場合、このファイルはデータベースへの接続に使用されます：</target>
        </trans-unit>
        <trans-unit id="1be4ccdf90899637a9e7f5bb397c6eba29f87752" translate="yes" xml:space="preserve">
          <source>If you have a Rails template that adds all the files in version control, it fails to add the generated binstubs because it gets executed before Bundler:</source>
          <target state="translated">バージョン管理ですべてのファイルを追加するRailsテンプレートがある場合、Bundlerよりも先に実行されてしまうため、生成されたbinstubsの追加に失敗します。</target>
        </trans-unit>
        <trans-unit id="651cf9b965cdd1ee650c11cdee3bd97dad86eb28" translate="yes" xml:space="preserve">
          <source>If you have a content security policy enabled then you can add an automatic nonce value by passing &lt;code&gt;nonce: true&lt;/code&gt; as part of &lt;code&gt;html_options&lt;/code&gt;. Example:</source>
          <target state="translated">コンテンツセキュリティポリシーを有効にしている場合は、 &lt;code&gt;html_options&lt;/code&gt; の一部として &lt;code&gt;nonce: true&lt;/code&gt; を渡すことで、自動ナンス値を追加できます。例：</target>
        </trans-unit>
        <trans-unit id="d0bcd96695c95db679a2cf79bacb1d734c477fd2" translate="yes" xml:space="preserve">
          <source>If you have a custom &lt;code&gt;QC::Queue&lt;/code&gt; subclass you'll need to subclass &lt;code&gt;ActiveJob::QueueAdapters::QueueClassicAdapter&lt;/code&gt; and override the &lt;code&gt;build_queue&lt;/code&gt; method.</source>
          <target state="translated">カスタム &lt;code&gt;QC::Queue&lt;/code&gt; サブクラスがある場合は、 &lt;code&gt;ActiveJob::QueueAdapters::QueueClassicAdapter&lt;/code&gt; をサブクラス化し、 &lt;code&gt;build_queue&lt;/code&gt; メソッドをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="f9742db575a597c0715ebe3f5762a44ce4ffcebe" translate="yes" xml:space="preserve">
          <source>If you have a layout that by default is applied to all the actions of a controller, you still have the option of rendering a given action or set of actions without a layout, or restricting a layout to only a single action or a set of actions. The &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; options can be passed to the layout call. For example:</source>
          <target state="translated">デフォルトでコントローラーのすべてのアクションに適用されるレイアウトがある場合でも、特定のアクションまたはアクションセットをレイアウトなしでレンダリングするオプション、またはレイアウトを単一のアクションまたはアクションセットのみに制限するオプションがあります。 。 &lt;code&gt;:only&lt;/code&gt; と &lt;code&gt;:except&lt;/code&gt; のオプションは、レイアウトの呼び出しに渡すことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="6b93e10e3f4ae69640e52527ab8e71609f556eba" translate="yes" xml:space="preserve">
          <source>If you have a more advanced constraint, you can provide an object that responds to &lt;code&gt;matches?&lt;/code&gt; that Rails should use. Let's say you wanted to route all users on a restricted list to the &lt;code&gt;RestrictedListController&lt;/code&gt;. You could do:</source>
          <target state="translated">より高度な制約がある場合、 &lt;code&gt;matches?&lt;/code&gt; 応答するオブジェクトを提供できますか？Railsで使用する必要があります。制限付きリストのすべてのユーザーを &lt;code&gt;RestrictedListController&lt;/code&gt; にルーティングするとします。あなたがすることができます：</target>
        </trans-unit>
        <trans-unit id="a560f192ee8ec9a1a15928b0663a0c5d7fd22fe7" translate="yes" xml:space="preserve">
          <source>If you have a stream that is related to a model, then the broadcasting used can be generated from the model and channel. The following example would subscribe to a broadcasting like &lt;code&gt;comments:Z2lkOi8vVGVzdEFwcC9Qb3N0LzE&lt;/code&gt;</source>
          <target state="translated">モデルに関連するストリームがある場合、使用されるブロードキャストはモデルとチャネルから生成できます。次の例では、 &lt;code&gt;comments:Z2lkOi8vVGVzdEFwcC9Qb3N0LzE&lt;/code&gt; ようなブロードキャストをサブスクライブします。Z2lkOi8vVGVzdEFwcC9Qb3N0LzE</target>
        </trans-unit>
        <trans-unit id="f173c059eba767e3af7bbb4a57f0feb244fb4cf2" translate="yes" xml:space="preserve">
          <source>If you have a stream that is related to a model, then the broadcasting used can be generated from the model and channel. The following example would subscribe to a broadcasting like &lt;code&gt;comments:Z2lkOi8vVGVzdEFwcC9Qb3N0LzE&lt;/code&gt;.</source>
          <target state="translated">モデルに関連するストリームがある場合、使用されるブロードキャストはモデルとチャネルから生成できます。次の例では、 &lt;code&gt;comments:Z2lkOi8vVGVzdEFwcC9Qb3N0LzE&lt;/code&gt; ようなブロードキャストをサブスクライブします：Z2lkOi8vVGVzdEFwcC9Qb3N0LzE。</target>
        </trans-unit>
        <trans-unit id="ace6b01aac78a93246d7e4a98a5362a0be559c03" translate="yes" xml:space="preserve">
          <source>If you have an attribute that needs to be saved to the database as an object, and retrieved as the same object, then specify the name of that attribute using this method and it will be handled automatically. The serialization is done through YAML. If &lt;code&gt;class_name&lt;/code&gt; is specified, the serialized object must be of that class on assignment and retrieval. Otherwise &lt;a href=&quot;../../serializationtypemismatch&quot;&gt;SerializationTypeMismatch&lt;/a&gt; will be raised.</source>
          <target state="translated">オブジェクトとしてデータベースに保存し、同じオブジェクトとして取得する必要がある属性がある場合は、このメソッドを使用してその属性の名前を指定すると、自動的に処理されます。シリアル化はYAMLを介して行われます。場合 &lt;code&gt;class_name&lt;/code&gt; 指定されて、シリアライズされたオブジェクトは、割り当ておよび検索にそのクラスのものでなければなりません。そうでない場合、&lt;a href=&quot;../../serializationtypemismatch&quot;&gt;SerializationTypeMismatch&lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="2fe32855d22ec254cf4b801e56944535a321053f" translate="yes" xml:space="preserve">
          <source>If you have an empty &lt;code&gt;config/database.yml&lt;/code&gt; file but your &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; is present, then Rails will connect to the database via your environment variable:</source>
          <target state="translated">空の &lt;code&gt;config/database.yml&lt;/code&gt; ファイルがあり、 &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; が存在する場合、Railsは環境変数を介してデータベースに接続します。</target>
        </trans-unit>
        <trans-unit id="b434262d0e0d30d972cd53659122043c19c68e57" translate="yes" xml:space="preserve">
          <source>If you have an extension that should be shared by many associations, you can use a named extension module. For example:</source>
          <target state="translated">多くのアソシエーションで共有されるべき拡張機能がある場合、名前付き拡張モジュールを使うことができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="71c2997c2132b3a3c4257c66422181641082fbce" translate="yes" xml:space="preserve">
          <source>If you have an instance of a model to render into a partial, you can use a shorthand syntax:</source>
          <target state="translated">パーシャルにレンダリングするモデルのインスタンスがある場合、短縮構文を使用することができます。</target>
        </trans-unit>
        <trans-unit id="c92ab7fbd387e8e24a134b89d84155d191fe3250" translate="yes" xml:space="preserve">
          <source>If you have an instance of the &lt;code&gt;Picture&lt;/code&gt; model, you can get to its parent via &lt;code&gt;@picture.imageable&lt;/code&gt;. To make this work, you need to declare both a foreign key column and a type column in the model that declares the polymorphic interface:</source>
          <target state="translated">&lt;code&gt;Picture&lt;/code&gt; モデルのインスタンスがある場合は、 &lt;code&gt;@picture.imageable&lt;/code&gt; を介してその親にアクセスできます。これを機能させるには、ポリモーフィックインターフェイスを宣言するモデルで、外部キー列と型列の両方を宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="749159229f0a75d73cecb02d4a0dbd7000807ff0" translate="yes" xml:space="preserve">
          <source>If you have both &lt;code&gt;config/database.yml&lt;/code&gt; and &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; set then Rails will merge the configuration together. To better understand this we must see some examples.</source>
          <target state="translated">&lt;code&gt;config/database.yml&lt;/code&gt; と &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; 両方が設定されている場合、Railsは設定をマージします。これをよりよく理解するには、いくつかの例を見る必要があります。</target>
        </trans-unit>
        <trans-unit id="c50df36a34b654a6ac8d59986b79a1a7b827d8ab" translate="yes" xml:space="preserve">
          <source>If you have created namespaced routes, &lt;code&gt;form_with&lt;/code&gt; has a nifty shorthand for that too. If your application has an admin namespace then</source>
          <target state="translated">名前空間付きのルートを作成した場合、 &lt;code&gt;form_with&lt;/code&gt; にはそのための気の利いた省略形もあります。アプリケーションに管理名前空間がある場合</target>
        </trans-unit>
        <trans-unit id="dfe47051a5d0d7d1fb7c807bed417ae1e0b1f5f4" translate="yes" xml:space="preserve">
          <source>If you have images as application resources this method may conflict with their named routes. The alias &lt;code&gt;path_to_image&lt;/code&gt; is provided to avoid that. Rails uses the alias internally, and plugin authors are encouraged to do so.</source>
          <target state="translated">アプリケーションリソースとしてイメージがある場合、このメソッドは名前付きルートと競合する可能性があります。これを回避するために、エイリアス &lt;code&gt;path_to_image&lt;/code&gt; が提供されています。Railsはエイリアスを内部的に使用し、プラグインの作成者はそうすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bab616c672f906a24a8da6f399b21cce858459b1" translate="yes" xml:space="preserve">
          <source>If you have made a mistake in this area, the most common symptom is a black diamond with a question mark inside appearing in the browser. Another common symptom is characters like &quot;&amp;Atilde;&amp;frac14;&quot; appearing instead of &quot;&amp;uuml;&quot;. Rails takes a number of internal steps to mitigate common causes of these problems that can be automatically detected and corrected. However, if you have external data that is not stored as UTF-8, it can occasionally result in these kinds of issues that cannot be automatically detected by Rails and corrected.</source>
          <target state="translated">この領域で誤りを犯した場合、最も一般的な症状は、ブラウザに表示される内部に疑問符のある黒いひし形です。もう1つの一般的な症状は、「&amp;uuml;」の代わりに「&amp;Atilde;&amp;frac14;」のような文字が表示されることです。Railsは、これらの問題の一般的な原因を軽減するために、いくつかの内部手順を実行します。これらの問題は、自動的に検出および修正できます。ただし、UTF-8として保存されていない外部データがある場合、Railsで自動的に検出して修正できないこの種の問題が発生することがあります。</target>
        </trans-unit>
        <trans-unit id="9747b5dd1ba72cbbc96b487b18b280e044481aa5" translate="yes" xml:space="preserve">
          <source>If you have multiple engines that need migrations copied over, use &lt;code&gt;railties:install:migrations&lt;/code&gt; instead:</source>
          <target state="translated">移行をコピーする必要があるエンジンが複数ある場合は、代わりに &lt;code&gt;railties:install:migrations&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2c03fc752a11ff911bd0015f95701be96c600a53" translate="yes" xml:space="preserve">
          <source>If you have other manifests or individual stylesheets and JavaScript files to include, you can add them to the &lt;code&gt;precompile&lt;/code&gt; array in &lt;code&gt;config/initializers/assets.rb&lt;/code&gt;:</source>
          <target state="translated">含める他のマニフェストまたは個々のスタイルシートとJavaScriptファイルがある場合、それらを &lt;code&gt;config/initializers/assets.rb&lt;/code&gt; の &lt;code&gt;precompile&lt;/code&gt; 配列に追加できます。</target>
        </trans-unit>
        <trans-unit id="df82c551ce18fac9bf69f0fb3e927ca6f5be0c45" translate="yes" xml:space="preserve">
          <source>If you include &lt;code&gt;ActionController::Live&lt;/code&gt; in another module that is included in your controller, then you should also extend the module with &lt;code&gt;ActiveSupport::Concern&lt;/code&gt;. Alternatively, you can use the &lt;code&gt;self.included&lt;/code&gt; hook to include &lt;code&gt;ActionController::Live&lt;/code&gt; directly to the controller once the &lt;code&gt;StreamingSupport&lt;/code&gt; is included.</source>
          <target state="translated">コントローラに含まれている別のモジュールに &lt;code&gt;ActionController::Live&lt;/code&gt; を含める場合は、 &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; モジュールを拡張する必要もあります。または、 &lt;code&gt;StreamingSupport&lt;/code&gt; がインクルードされたら、 &lt;code&gt;self.included&lt;/code&gt; フックを使用して &lt;code&gt;ActionController::Live&lt;/code&gt; 直接コントローラーにインクルードできます。</target>
        </trans-unit>
        <trans-unit id="e83fc35c3e903402fcb6715e83f3dc96c7f48074" translate="yes" xml:space="preserve">
          <source>If you look in the &lt;code&gt;db/migrate/YYYYMMDDHHMMSS_create_articles.rb&lt;/code&gt; file (remember, yours will have a slightly different name), here's what you'll find:</source>
          <target state="translated">あなたが見れば &lt;code&gt;db/migrate/YYYYMMDDHHMMSS_create_articles.rb&lt;/code&gt; ファイル（あなたがわずかに異なる名前を持つことになり、覚えておいてください）、ここであなたが見つけるものです。</target>
        </trans-unit>
        <trans-unit id="790cbfe3352192c73258d08a620394606704f786" translate="yes" xml:space="preserve">
          <source>If you modify this collection please update the &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; of &lt;code&gt;permit&lt;/code&gt; above.</source>
          <target state="translated">このコレクションを変更する場合は &lt;code&gt;permit&lt;/code&gt; 上記の許可の&lt;a href=&quot;api&quot;&gt;API&lt;/a&gt;を更新してください。</target>
        </trans-unit>
        <trans-unit id="bae7f8fe46e797c75db60cffb6a878be3fd20cf1" translate="yes" xml:space="preserve">
          <source>If you need a deep copy of an object, you should use &lt;code&gt;deep_dup&lt;/code&gt;. Here is an example:</source>
          <target state="translated">オブジェクトのディープコピーが必要な場合は、 &lt;code&gt;deep_dup&lt;/code&gt; を使用する必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="20f29ef1028dace4ea49a793644fd7a8bcc48fc5" translate="yes" xml:space="preserve">
          <source>If you need a different session storage mechanism, you can change it in an initializer:</source>
          <target state="translated">別のセッションストレージ機構が必要な場合は、イニシャライザで変更することができます。</target>
        </trans-unit>
        <trans-unit id="080a325cf371fc82e3e04c5bccb728e7cb6b2a39" translate="yes" xml:space="preserve">
          <source>If you need other headers not listed above, you can either pass them in as part of the headers hash or use the &lt;code&gt;headers['name'] = value&lt;/code&gt; method.</source>
          <target state="translated">上記以外のヘッダーが必要な場合は、ヘッダーハッシュの一部として渡すか、 &lt;code&gt;headers['name'] = value&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="7ae92042dbed69362c07d535dde7b6b2ed8c402a" translate="yes" xml:space="preserve">
          <source>If you need to access the subject, from or the recipients in the view, you can do that through message object:</source>
          <target state="translated">ビュー内の件名、送信元、受信者にアクセスする必要がある場合は、メッセージオブジェクトを使ってアクセスできます。</target>
        </trans-unit>
        <trans-unit id="954f1c83a910f9054d1e6e5f93f9071747a3263d" translate="yes" xml:space="preserve">
          <source>If you need to add verification to the beginning of the callback chain, use &lt;code&gt;prepend: true&lt;/code&gt;.</source>
          <target state="translated">コールバックチェーンの先頭に検証を追加する必要がある場合は、 &lt;code&gt;prepend: true&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="3cd1bbfe07dcda3b0429f966b7d198efb7a51e68" translate="yes" xml:space="preserve">
          <source>If you need to address multiple instances of the same class in the same view, you can prefix the &lt;a href=&quot;recordidentifier#method-i-dom_class&quot;&gt;#dom_class&lt;/a&gt;:</source>
          <target state="translated">同じビューで同じクラスの複数のインスタンスをアドレス指定する必要がある場合は、&lt;a href=&quot;recordidentifier#method-i-dom_class&quot;&gt;#dom_classに&lt;/a&gt;プレフィックスを付けることができます。</target>
        </trans-unit>
        <trans-unit id="bf8a89605e408f1e8580b14cac896f52f258bcf7" translate="yes" xml:space="preserve">
          <source>If you need to address multiple instances of the same class in the same view, you can prefix the &lt;a href=&quot;recordidentifier#method-i-dom_id&quot;&gt;#dom_id&lt;/a&gt;:</source>
          <target state="translated">同じビュー内の同じクラスの複数のインスタンスをアドレス指定する必要がある場合は、&lt;a href=&quot;recordidentifier#method-i-dom_id&quot;&gt;#dom_idに&lt;/a&gt;プレフィックスを付けることができます。</target>
        </trans-unit>
        <trans-unit id="9359a7d31d917d57f842db261747f4b0f5f8fe8a" translate="yes" xml:space="preserve">
          <source>If you need to create a link from outside of controller/view context (Background jobs, Cronjobs, etc.), you can access the rails_blob_path like this:</source>
          <target state="translated">コントローラ/ビューのコンテキスト外からリンクを作成する必要がある場合(バックグラウンドジョブやCronjobなど)は、以下のようにrails_blob_pathにアクセスします。</target>
        </trans-unit>
        <trans-unit id="fa817aba72a4c37421ed41ccfb1a2fc86729bda1" translate="yes" xml:space="preserve">
          <source>If you need to create routes for more than one resource, you can save a bit of typing by defining them all with a single call to &lt;code&gt;resources&lt;/code&gt;:</source>
          <target state="translated">あなたが複数のリソースのためのルートを作成する必要がある場合は、単一の呼び出しでそれらすべてを定義することにより、タイピングのビットを保存することができ &lt;code&gt;resources&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="34844eee6eff2caf99e5b8e6623c0bf544ac9a15" translate="yes" xml:space="preserve">
          <source>If you need to customize any of these inflections, for example to add an acronym, please have a look at &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt;.</source>
          <target state="translated">頭字語を追加するなど、これらの活用形をカスタマイズする必要がある場合は、 &lt;code&gt;config/initializers/inflections.rb&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="53d21564526c14a06fa310834e5593a9e78a326e" translate="yes" xml:space="preserve">
          <source>If you need to disconnect a given connection, you can go through the &lt;a href=&quot;remoteconnections&quot;&gt;RemoteConnections&lt;/a&gt;. You can find the connections you're looking for by searching for the identifier declared on the connection. For example:</source>
          <target state="translated">特定の接続を切断する必要がある場合は、&lt;a href=&quot;remoteconnections&quot;&gt;RemoteConnections&lt;/a&gt;を使用できます。接続で宣言された識別子を検索することで、探している接続を見つけることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="d5c9243255bc5062fcc30a7801758920f6e9c91b" translate="yes" xml:space="preserve">
          <source>If you need to do more complex things with a default scope, you can alternatively define it as a class method:</source>
          <target state="translated">デフォルトのスコープでより複雑なことを行う必要がある場合は、クラスメソッドとして定義することもできます。</target>
        </trans-unit>
        <trans-unit id="64d124bcef6d2f5cc39955a8634ad8736def8c80" translate="yes" xml:space="preserve">
          <source>If you need to interact with your application models, perform database queries, and so on, your task should depend on the &lt;code&gt;environment&lt;/code&gt; task, which will load your application code.</source>
          <target state="translated">アプリケーションモデルと対話したり、データベースクエリを実行したりする必要がある場合、タスクは、アプリケーションコードをロードする &lt;code&gt;environment&lt;/code&gt; タスクに依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="75176359408a8d163e91332794d54bd48802d326" translate="yes" xml:space="preserve">
          <source>If you need to output JSON elsewhere in your HTML, you can just do something like this, as any unsafe characters (including quotation marks) will be automatically escaped for you:</source>
          <target state="translated">HTML内の他の場所にJSONを出力する必要がある場合、安全でない文字(引用符を含む)は自動的にエスケープされるので、このようにすればいいのです。</target>
        </trans-unit>
        <trans-unit id="519dd973910d9eb8ae67c8edf32bba83a663bab5" translate="yes" xml:space="preserve">
          <source>If you need to redirect on the condition of something, then be sure to add &amp;ldquo;and return&amp;rdquo; to halt execution.</source>
          <target state="translated">何かの条件でリダイレクトする必要がある場合は、「and return」を追加して実行を停止してください。</target>
        </trans-unit>
        <trans-unit id="4b83190fc0648fde07fde56ea7fac76aabe04f49" translate="yes" xml:space="preserve">
          <source>If you need to run a specific migration up or down, the &lt;code&gt;db:migrate:up&lt;/code&gt; and &lt;code&gt;db:migrate:down&lt;/code&gt; commands will do that. Just specify the appropriate version and the corresponding migration will have its &lt;code&gt;change&lt;/code&gt;, &lt;code&gt;up&lt;/code&gt; or &lt;code&gt;down&lt;/code&gt; method invoked, for example:</source>
          <target state="translated">特定のマイグレーションを上または下に実行する必要がある場合、 &lt;code&gt;db:migrate:up&lt;/code&gt; および &lt;code&gt;db:migrate:down&lt;/code&gt; コマンドがそれを行います。適切なバージョンを指定するだけで、対応する移行で &lt;code&gt;change&lt;/code&gt; 、 &lt;code&gt;up&lt;/code&gt; または &lt;code&gt;down&lt;/code&gt; メソッドが呼び出されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="7b2c971f9e6d96aca70d28e7479cb38c3f266923" translate="yes" xml:space="preserve">
          <source>If you need to send attachments with no content, you need to create an empty view for it, or add an empty body parameter like this:</source>
          <target state="translated">内容のない添付ファイルを送信する必要がある場合は、空のビューを作成するか、以下のように空のボディパラメータを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="04f1c647aef975987d77057d6d4fe9c8d4b41c82" translate="yes" xml:space="preserve">
          <source>If you need to share the same extensions between many associations, you can use a named extension module.</source>
          <target state="translated">多くのアソシエーション間で同じ拡張子を共有する必要がある場合は、名前付き拡張モジュールを使用することができます。</target>
        </trans-unit>
        <trans-unit id="8ba1aa5152edc7d8ae4a1d94e91395ac318fcc31" translate="yes" xml:space="preserve">
          <source>If you need to support a cloud service other than these, you will need to implement the Service. Each service extends &lt;a href=&quot;https://github.com/rails/rails/blob/master/activestorage/lib/active_storage/service.rb&quot;&gt;&lt;code&gt;ActiveStorage::Service&lt;/code&gt;&lt;/a&gt; by implementing the methods necessary to upload and download files to the cloud.</source>
          <target state="translated">これら以外のクラウドサービスをサポートする必要がある場合は、サービスを実装する必要があります。各サービスは、ファイルをクラウドにアップロードおよびダウンロードするために必要なメソッドを実装することにより、&lt;a href=&quot;https://github.com/rails/rails/blob/master/activestorage/lib/active_storage/service.rb&quot;&gt; &lt;code&gt;ActiveStorage::Service&lt;/code&gt; &lt;/a&gt;拡張します。</target>
        </trans-unit>
        <trans-unit id="2f9831e439ebeb7b38108ed6ec41e90a0ee658bb" translate="yes" xml:space="preserve">
          <source>If you need to track the progress of the file upload, you can pass a third parameter to the &lt;code&gt;DirectUpload&lt;/code&gt; constructor. During the upload, DirectUpload will call the object's &lt;code&gt;directUploadWillStoreFileWithXHR&lt;/code&gt; method. You can then bind your own progress handler on the XHR.</source>
          <target state="translated">ファイルのアップロードの進行状況を追跡する必要がある場合は、3番目のパラメーターを &lt;code&gt;DirectUpload&lt;/code&gt; コンストラクターに渡すことができます。アップロード中、DirectUploadはオブジェクトの &lt;code&gt;directUploadWillStoreFileWithXHR&lt;/code&gt; メソッドを呼び出します。その後、独自の進捗ハンドラーをXHRにバインドできます。</target>
        </trans-unit>
        <trans-unit id="bb9860260780994b1b9fb79388dd273a28e808c5" translate="yes" xml:space="preserve">
          <source>If you need to use a MIME type which isn't supported by default, you can register your own handlers in &lt;code&gt;config/initializers/mime_types.rb&lt;/code&gt; as follows.</source>
          <target state="translated">デフォルトでサポートされていないMIMEタイプを使用する必要がある場合は、次のように &lt;code&gt;config/initializers/mime_types.rb&lt;/code&gt; に独自のハンドラーを登録できます。</target>
        </trans-unit>
        <trans-unit id="c13930cc1194c1e09ba9d62347bc7e108608cf50" translate="yes" xml:space="preserve">
          <source>If you now go to http://localhost:3000/articles/new you'll &lt;em&gt;almost&lt;/em&gt; be able to create an article. Try it! You should get an error that looks like this:</source>
          <target state="translated">ここでhttp：// localhost：3000 / articles / newにアクセスすると、&lt;em&gt;ほぼ&lt;/em&gt;記事を作成できるようになります。それを試してみてください！次のようなエラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="798968b5441f3c2daa3ad458545f1e2ddca45cb0" translate="yes" xml:space="preserve">
          <source>If you only want to see the routes that map to a specific controller, there's the -c option.</source>
          <target state="translated">特定のコントローラにマップされたルートのみを表示したい場合は、-c オプションがあります。</target>
        </trans-unit>
        <trans-unit id="71785e7b949dee72159074c906445c53a98687be" translate="yes" xml:space="preserve">
          <source>If you open up the newly generated &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; you'll see a fairly empty controller:</source>
          <target state="translated">新しく生成された &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; を開くと、かなり空のコントローラーが表示されます。</target>
        </trans-unit>
        <trans-unit id="caf437c6570b9645593ea709f18577d0e37d6c8e" translate="yes" xml:space="preserve">
          <source>If you pass a Symbol as the first argument, then a corresponding cache store class under the &lt;a href=&quot;cache&quot;&gt;ActiveSupport::Cache&lt;/a&gt; namespace will be created. For example:</source>
          <target state="translated">Symbolを最初の引数として渡すと、&lt;a href=&quot;cache&quot;&gt;ActiveSupport :: Cache&lt;/a&gt;名前空間の下に対応するキャッシュストアクラスが作成されます。例えば：</target>
        </trans-unit>
        <trans-unit id="ddfa7769dcc84943f68c46033b730ce91d513aec" translate="yes" xml:space="preserve">
          <source>If you pass a single integer, returns a substring of one character at that position. The first character of the string is at position 0, the next at position 1, and so on. If a range is supplied, a substring containing characters at offsets given by the range is returned. In both cases, if an offset is negative, it is counted from the end of the string. Returns &lt;code&gt;nil&lt;/code&gt; if the initial offset falls outside the string. Returns an empty string if the beginning of the range is greater than the end of the string.</source>
          <target state="translated">単一の整数を渡す場合、その位置にある1文字の部分文字列を返します。文字列の最初の文字は位置0にあり、次の文字は位置1に続きます。範囲が指定されている場合、範囲で指定されたオフセットに文字を含む部分文字列が返されます。どちらの場合も、オフセットが負の場合、文字列の最後から数えます。初期オフセットが文字列の外にある場合は &lt;code&gt;nil&lt;/code&gt; を返します。範囲の先頭が文字列の末尾より大きい場合は、空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="632b8d8ffb1decfb5d4c8badbac89dd3e00fd7a9" translate="yes" xml:space="preserve">
          <source>If you pass any additional configuration options, they will be passed to the class and available as &lt;code&gt;options&lt;/code&gt;, please refer to the class version of this method for more information.</source>
          <target state="translated">追加の構成オプションを渡すと、それらはクラスに渡され、 &lt;code&gt;options&lt;/code&gt; として使用できるようになります。詳細については、このメソッドのクラスバージョンを参照してください。</target>
        </trans-unit>
        <trans-unit id="682ace517c959a77a771d42d6d9eac363da111c9" translate="yes" xml:space="preserve">
          <source>If you pass any additional configuration options, they will be passed to the class and available as &lt;code&gt;options&lt;/code&gt;:</source>
          <target state="translated">追加の構成オプションを渡すと、それらはクラスに渡され、 &lt;code&gt;options&lt;/code&gt; として使用できます。</target>
        </trans-unit>
        <trans-unit id="1b6ba8e3114a56aad325e9b14a29ecad96dca5d8" translate="yes" xml:space="preserve">
          <source>If you pass arguments to &amp;ldquo;yield&amp;rdquo; then this will be passed to the block. One way to use this is to pass an array to layout and treat it as an enumerable.</source>
          <target state="translated">「yield」に引数を渡すと、これがブロックに渡されます。これを使用する1つの方法は、配列をレイアウトに渡し、それを列挙可能として扱うことです。</target>
        </trans-unit>
        <trans-unit id="f17ab7779351ab1a6884b258f583eb53ffb5b44d" translate="yes" xml:space="preserve">
          <source>If you pass the conditions via hash, you don't need to call &lt;a href=&quot;querymethods#method-i-references&quot;&gt;references&lt;/a&gt; explicitly, as &lt;a href=&quot;querymethods#method-i-where&quot;&gt;where&lt;/a&gt; references the tables for you. For example, this will work correctly:</source>
          <target state="translated">ハッシュを介して条件を渡す場合、&lt;a href=&quot;querymethods#method-i-where&quot;&gt;where&lt;/a&gt;がテーブルを参照するため、&lt;a href=&quot;querymethods#method-i-references&quot;&gt;参照を&lt;/a&gt;明示的に呼び出す必要はありません。たとえば、これは正しく動作します。</target>
        </trans-unit>
        <trans-unit id="3b7db4311465b5c467ecad29ee1f4f9d15f4656a" translate="yes" xml:space="preserve">
          <source>If you prefer logging to a file, configure this instead:</source>
          <target state="translated">ファイルへのロギングを希望する場合は、代わりにこれを設定します。</target>
        </trans-unit>
        <trans-unit id="215c252f0c89788189f24e2d9043c91a50b33007" translate="yes" xml:space="preserve">
          <source>If you prefer using threads or are using JRuby, a threaded parallelization option is provided. The threaded parallelizer is backed by Minitest's &lt;code&gt;Parallel::Executor&lt;/code&gt;.</source>
          <target state="translated">スレッドを使用したい場合、またはJRubyを使用している場合は、スレッド化された並列化オプションが提供されます。スレッド化されたパラレライザーは、Minitestの &lt;code&gt;Parallel::Executor&lt;/code&gt; によってサポートされています。</target>
        </trans-unit>
        <trans-unit id="eafe8299d3fe7769815c71c88d087079dcd317d2" translate="yes" xml:space="preserve">
          <source>If you prefer, you can use a symbol instead of a string to specify the action to render:</source>
          <target state="translated">お好みであれば、文字列の代わりにシンボルを使用してレンダリングするアクションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="9d10e2bda23cd78a6360473103ead5548519dcba" translate="yes" xml:space="preserve">
          <source>If you preload your test database with all fixture data (probably by running `rails db:fixtures:load`) and use transactional tests, then you may omit all fixtures declarations in your test cases since all the data's already there and every case rolls back its changes.</source>
          <target state="translated">すべてのフィクスチャデータをテストデータベースにプリロードして(おそらく `rails db:fixtures:load` を実行して)、トランザクションテストを使う場合、すべてのデータはすでに存在していて、すべてのケースはその変更をロールバックするので、テストケースではすべてのフィクスチャ宣言を省略することができます。</target>
        </trans-unit>
        <trans-unit id="032b750ddc0f2a68782ec3a07a6c02fa0912464e" translate="yes" xml:space="preserve">
          <source>If you re-submit the form now, you may not see any change on the page. Don't worry! This is because Rails by default returns &lt;code&gt;204 No Content&lt;/code&gt; response for an action if we don't specify what the response should be. We just added the &lt;code&gt;create&lt;/code&gt; action but didn't specify anything about how the response should be. In this case, the &lt;code&gt;create&lt;/code&gt; action should save our new article to the database.</source>
          <target state="translated">ここでフォームを再送信すると、ページに変更が表示されない場合があります。心配しないで！これは、レスポンスが何であるかを指定しない場合、Railsはデフォルトでアクションに対して &lt;code&gt;204 No Content&lt;/code&gt; レスポンスを返すためです。 &lt;code&gt;create&lt;/code&gt; アクションを追加しましたが、応答がどうあるべきかについては何も指定していません。この場合、 &lt;code&gt;create&lt;/code&gt; アクションによって新しい記事がデータベースに保存されます。</target>
        </trans-unit>
        <trans-unit id="0a3ba760f2039016218b42a07ffd0719e51d2c95" translate="yes" xml:space="preserve">
          <source>If you re-submit the form one more time, you'll see something that looks like the following:</source>
          <target state="translated">もう一度フォームを再提出すると、以下のようなものが表示されます。</target>
        </trans-unit>
        <trans-unit id="f5cb608c0020eca0be434d098953cdecfbe1c340" translate="yes" xml:space="preserve">
          <source>If you refresh http://localhost:3000/articles/new now, you'll get a new error:</source>
          <target state="translated">今、http://localhost:3000/articles/new を更新すると、新しいエラーが出ます。</target>
        </trans-unit>
        <trans-unit id="62810ba4faad6de0e07c448d86b162e6adf194c5" translate="yes" xml:space="preserve">
          <source>If you refresh the page now, you'll see the exact same form from our example above. Building forms in Rails is really just that easy!</source>
          <target state="translated">今ページを更新すると、上の例とまったく同じフォームが表示されます。Railsでフォームを作るのは本当に簡単です。</target>
        </trans-unit>
        <trans-unit id="d168564efe905e950a12a0bbe8fa883b06949143" translate="yes" xml:space="preserve">
          <source>If you reload http://localhost:3000/articles/new and try to save an article without a title, Rails will send you back to the form, but that's not very useful. You need to tell the user that something went wrong. To do that, you'll modify &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; to check for error messages:</source>
          <target state="translated">http：// localhost：3000 / articles / newをリロードして、タイトルなしで記事を保存しようとすると、Railsはフォームに送り返しますが、あまり役に立ちません。何か問題が発生したことをユーザーに伝える必要があります。そのためには、 &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt; を変更してエラーメッセージを確認します。</target>
        </trans-unit>
        <trans-unit id="8dc2177084e8c394a6a53d12cfdefd8100d07b30" translate="yes" xml:space="preserve">
          <source>If you remember from earlier, one of the Three Hashes of the Apocalypse was &lt;code&gt;flash&lt;/code&gt;.</source>
          <target state="translated">あなたが以前から覚えているならば、黙示録の三つのハッシュの一つは &lt;code&gt;flash&lt;/code&gt; でした。</target>
        </trans-unit>
        <trans-unit id="6dbac9c281a00497859f5bd21c6d9e0516606801" translate="yes" xml:space="preserve">
          <source>If you remember, we used the &lt;code&gt;rails generate model&lt;/code&gt; command in the &lt;a href=&quot;getting_started&quot;&gt;Getting Started with Rails&lt;/a&gt; guide. We created our first model, and among other things it created test stubs in the &lt;code&gt;test&lt;/code&gt; directory:</source>
          <target state="translated">覚えているかと思いますが、&lt;a href=&quot;getting_started&quot;&gt;「Rails入門」&lt;/a&gt;ガイドの &lt;code&gt;rails generate model&lt;/code&gt; コマンドを使用しました。最初のモデルを作成し、とりわけ、 &lt;code&gt;test&lt;/code&gt; ディレクトリにテストスタブを作成しました。</target>
        </trans-unit>
        <trans-unit id="66a7e4fff5ec93b09b720d5b6a8599b8fb7d7ff2" translate="yes" xml:space="preserve">
          <source>If you repeatedly invoke application code from a long-running process, you may want to wrap using the Reloader instead.</source>
          <target state="translated">長時間実行しているプロセスからアプリケーションコードを繰り返し呼び出す場合は、代わりに Reloader を使ってラップした方がいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="6e7a1fd5aef7d3248f2da5139cc60b8c9d29b34d" translate="yes" xml:space="preserve">
          <source>If you require your cookies to be read by 5.1 and older, or you are still validating your 5.2 deploy and want to allow you to rollback set &lt;code&gt;Rails.application.config.action_dispatch.use_authenticated_cookie_encryption&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">5.1以前の &lt;code&gt;Rails.application.config.action_dispatch.use_authenticated_cookie_encryption&lt;/code&gt; Cookieを読み取る必要がある場合、または5.2デプロイを検証していて、Rails.application.config.action_dispatch.use_authenticated_cookie_encryptionを &lt;code&gt;false&lt;/code&gt; にロールバックできるようにする場合。</target>
        </trans-unit>
        <trans-unit id="1dfadda751bf13743cb353e426d145dc9b175a37" translate="yes" xml:space="preserve">
          <source>If you require your cookies to be read by Rails 5.2 and older, or you are still validating your 6.0 deploy and want to be able to rollback set &lt;code&gt;Rails.application.config.action_dispatch.use_cookies_with_metadata&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Rails 5.2以前でCookieを読み取る必要がある場合、または6.0のデプロイをまだ検証中で、 &lt;code&gt;Rails.application.config.action_dispatch.use_cookies_with_metadata&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; にロールバックできるようにしたい場合。</target>
        </trans-unit>
        <trans-unit id="9fc71a9c4e127e7236f9ac5863d445bd51714d2b" translate="yes" xml:space="preserve">
          <source>If you reuse this frequently you could define a &lt;code&gt;labeled_form_with&lt;/code&gt; helper that automatically applies the &lt;code&gt;builder: LabellingFormBuilder&lt;/code&gt; option:</source>
          <target state="translated">これを頻繁に再利用する場合、 &lt;code&gt;builder: LabellingFormBuilder&lt;/code&gt; オプションを自動的に適用する &lt;code&gt;labeled_form_with&lt;/code&gt; ヘルパーを定義することができます：</target>
        </trans-unit>
        <trans-unit id="6cbb87cb4a5f9fbd29ad857e361eaf0f387942e5" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;rails routes&lt;/code&gt;, you'll see that it has defined routes for all the standard RESTful actions. The meaning of the prefix column (and other columns) will be seen later, but for now notice that Rails has inferred the singular form &lt;code&gt;article&lt;/code&gt; and makes meaningful use of the distinction.</source>
          <target state="translated">&lt;code&gt;rails routes&lt;/code&gt; を実行すると、すべての標準RESTfulアクションのルートが定義されていることがわかります。プレフィックス列（および他の列）の意味は後で説明しますが、今のところ、Railsが単数形の &lt;code&gt;article&lt;/code&gt; を推測し、その区別を有意義に使用していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a5736fbb209b1e7176278dc85bda1088c0f60271" translate="yes" xml:space="preserve">
          <source>If you run the &lt;code&gt;rails db:migrate:status&lt;/code&gt; command, which displays the status (up or down) of each migration, you should see &lt;code&gt;********** NO FILE **********&lt;/code&gt; displayed next to any deleted migration file which was once executed on a specific environment but can no longer be found in the &lt;code&gt;db/migrate/&lt;/code&gt; directory.</source>
          <target state="translated">各マイグレーションのステータス（アップまたはダウン）を表示 &lt;code&gt;rails db:migrate:status&lt;/code&gt; コマンドを実行すると、 &lt;code&gt;********** NO FILE **********&lt;/code&gt; が表示されます。特定の環境で一度実行されたが、 &lt;code&gt;db/migrate/&lt;/code&gt; ディレクトリーで検出されなくなった削除済みマイグレーション・ファイルの横に表示されます。</target>
        </trans-unit>
        <trans-unit id="2ddac9227d2dba8d69bc55abee86ae1f7389613d" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;:only_integer&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, then it will use the</source>
          <target state="translated">&lt;code&gt;:only_integer&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、</target>
        </trans-unit>
        <trans-unit id="1a740b969cec9b8b5c9b7bf367c39be063ba9913" translate="yes" xml:space="preserve">
          <source>If you set &lt;code&gt;config.time_zone&lt;/code&gt; in the Rails Application, you can access this &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; object via &lt;code&gt;Time.zone&lt;/code&gt;:</source>
          <target state="translated">Railsアプリケーションで &lt;code&gt;config.time_zone&lt;/code&gt; を設定すると、 &lt;code&gt;Time.zone&lt;/code&gt; を介してこの&lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt;オブジェクトにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e982780a9d946f64c4d7b6f259ce4892a834ec57" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;:autosave&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;, Rails will save any loaded association members and destroy members that are marked for destruction whenever you save the parent object. Setting &lt;code&gt;:autosave&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; is not the same as not setting the &lt;code&gt;:autosave&lt;/code&gt; option. If the &lt;code&gt;:autosave&lt;/code&gt; option is not present, then new associated objects will be saved, but updated associated objects will not be saved.</source>
          <target state="translated">&lt;code&gt;:autosave&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定すると、Railsはロードされた関連付けメンバーをすべて保存し、親オブジェクトを保存するたびに破棄のマークが付けられたメンバーを破棄します。 &lt;code&gt;:autosave&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することは、 &lt;code&gt;:autosave&lt;/code&gt; オプションを設定しないことと同じではありません。場合 &lt;code&gt;:autosave&lt;/code&gt; オプションが存在しない場合、新しい関連オブジェクトが保存されますが、更新された関連オブジェクトは保存されません。</target>
        </trans-unit>
        <trans-unit id="a5ac83c1930890185af66324fd705be52e7e44d4" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;:dependent&lt;/code&gt; option to:</source>
          <target state="translated">&lt;code&gt;:dependent&lt;/code&gt; オプションを次のように設定した場合：</target>
        </trans-unit>
        <trans-unit id="12dcf0f411660275e0f33063283ddd8270d49a00" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;:optional&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;, then the presence of the associated object won't be validated. By default, this option is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:optional&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定すると、関連付けられたオブジェクトの存在は検証されません。デフォルトでは、このオプションは &lt;code&gt;false&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="f54ae2ad12dfc24f090d30428ebf9feaf86d69cf" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;:touch&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;, then the &lt;code&gt;updated_at&lt;/code&gt; or &lt;code&gt;updated_on&lt;/code&gt; timestamp on the associated object will be set to the current time whenever this object is saved or destroyed:</source>
          <target state="translated">あなたが設定した場合 &lt;code&gt;:touch&lt;/code&gt; にオプション &lt;code&gt;true&lt;/code&gt; 、その後、 &lt;code&gt;updated_at&lt;/code&gt; のか &lt;code&gt;updated_on&lt;/code&gt; のこのオブジェクトが保存または破棄されるたびに、関連するオブジェクトのタイムスタンプは、現在の時刻に設定されます。</target>
        </trans-unit>
        <trans-unit id="38743afae7adfc5e0e587df5c7c10a6c0f8b74a9" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;:validate&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;, then associated objects will not be validated whenever you save this object. By default, this is &lt;code&gt;true&lt;/code&gt;: associated objects will be validated when this object is saved.</source>
          <target state="translated">&lt;code&gt;:validate&lt;/code&gt; オプションを &lt;code&gt;false&lt;/code&gt; に設定すると、関連付けられたオブジェクトは、このオブジェクトを保存するたびに検証されません。デフォルトでは &lt;code&gt;true&lt;/code&gt; です。関連付けられたオブジェクトは、このオブジェクトが保存されるときに検証されます。</target>
        </trans-unit>
        <trans-unit id="bb46c33993d0c4a869b2ee45c2a47a55c32ff3a1" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;:validate&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;, then associated objects will be validated whenever you save this object. By default, this is &lt;code&gt;false&lt;/code&gt;: associated objects will not be validated when this object is saved.</source>
          <target state="translated">&lt;code&gt;:validate&lt;/code&gt; オプションを &lt;code&gt;true&lt;/code&gt; に設定すると、関連付けられたオブジェクトは、このオブジェクトを保存するたびに検証されます。デフォルトでは、これは &lt;code&gt;false&lt;/code&gt; です。関連付けられたオブジェクトは、このオブジェクトが保存されるときに検証されません。</target>
        </trans-unit>
        <trans-unit id="dacf4eb6331a59ac9520410f480184f687ec5233" translate="yes" xml:space="preserve">
          <source>If you simply want to check for the existence of the object there's a method called &lt;code&gt;exists?&lt;/code&gt;. This method will query the database using the same query as &lt;code&gt;find&lt;/code&gt;, but instead of returning an object or collection of objects it will return either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オブジェクトの存在を確認するだけの場合は、 &lt;code&gt;exists?&lt;/code&gt; というメソッドがありますか？。このメソッドは、 &lt;code&gt;find&lt;/code&gt; と同じクエリを使用してデータベースにクエリを実行しますが、オブジェクトまたはオブジェクトのコレクションを返す代わりに、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="67bc3cb65d8184980d212dfd9e822bfdf8b287bc" translate="yes" xml:space="preserve">
          <source>If you specify a Rack application as the endpoint for a matcher, remember that the route will be unchanged in the receiving application. With the following route your Rack application should expect the route to be &lt;code&gt;/admin&lt;/code&gt;:</source>
          <target state="translated">マッチャーのエンドポイントとしてRackアプリケーションを指定する場合、受信アプリケーションではルートが変更されないことに注意してください。次のルートを使用すると、Rackアプリケーションはルートが &lt;code&gt;/admin&lt;/code&gt; であると想定します。</target>
        </trans-unit>
        <trans-unit id="1008a7039ea28960d769ea99f1ff1f8c59392671" translate="yes" xml:space="preserve">
          <source>If you specify a target version, Active Record will run the required migrations (change, up, down) until it has reached the specified version. The version is the numerical prefix on the migration's filename. For example, to migrate to version 20080906120000 run:</source>
          <target state="translated">対象バージョンを指定すると、Active Record は指定したバージョンに達するまで、必要なマイグレーション(変更、アップ、ダウン)を実行します。バージョンは、マイグレーションのファイル名の数字の接頭辞です。例えば、バージョン 20080906120000 に移行するには、以下のように実行します。</target>
        </trans-unit>
        <trans-unit id="f651ca4d5d892c8edafc644e3e3a8fd8f269046b" translate="yes" xml:space="preserve">
          <source>If you specify an encoding, Mail will assume that your content is already encoded and not try to Base64 encode it.</source>
          <target state="translated">エンコーディングを指定した場合、メールはコンテンツがすでにエンコードされているとみなし、Base64エンコードを試みません。</target>
        </trans-unit>
        <trans-unit id="9126865264c6be1e7027d977582109ed0bb142af" translate="yes" xml:space="preserve">
          <source>If you specify your own &lt;code&gt;select&lt;/code&gt;, be sure to include the primary key and foreign key columns of the associated model. If you do not, Rails will throw an error.</source>
          <target state="translated">独自の &lt;code&gt;select&lt;/code&gt; を指定する場合は、関連するモデルの主キーと外部キーの列を必ず含めてください。そうしないと、Railsはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="f16426fc6e7323d088a689b6ea243d576d56117e" translate="yes" xml:space="preserve">
          <source>If you stop the &lt;code&gt;ajax:aborted:file&lt;/code&gt; event, the default behavior of allowing the browser to submit the form via normal means (i.e. non-Ajax submission) will be canceled and the form will not be submitted at all. This is useful for implementing your own Ajax file upload workaround.</source>
          <target state="translated">&lt;code&gt;ajax:aborted:file&lt;/code&gt; イベントを停止すると、ブラウザが通常の方法（Ajax以外の送信）でフォームを送信できるようにするデフォルトの動作がキャンセルされ、フォームは送信されません。これは、独自のAjaxファイルアップロードの回避策を実装するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="51f455c5e6976e35adebd807b27c3342f5873d91" translate="yes" xml:space="preserve">
          <source>If you submit the form again now, Rails will complain about not finding the &lt;code&gt;show&lt;/code&gt; action. That's not very useful though, so let's add the &lt;code&gt;show&lt;/code&gt; action before proceeding.</source>
          <target state="translated">ここでフォームを再度送信すると、Railsは &lt;code&gt;show&lt;/code&gt; アクションが見つからないというメッセージを表示します。ただし、これはあまり役に立ちませんので、先に進む前に &lt;code&gt;show&lt;/code&gt; アクションを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="68a6679b4edb22f06a2c4bad7125b30641e15742" translate="yes" xml:space="preserve">
          <source>If you then restart the application and re-trigger the deadlock condition, &lt;code&gt;/rails/locks&lt;/code&gt; will show a summary of all threads currently known to the interlock, which lock level they are holding or awaiting, and their current backtrace.</source>
          <target state="translated">その後、アプリケーションを再起動してデッドロック状態を再度トリガーすると、 &lt;code&gt;/rails/locks&lt;/code&gt; は、インターロックが現在認識しているすべてのスレッドの概要、それらが保持または待機しているロックレベル、および現在のバックトレースを表示します。</target>
        </trans-unit>
        <trans-unit id="45dc06c18ada78f9291ac8e05d04201fde995ce7" translate="yes" xml:space="preserve">
          <source>If you try out this command in a Rails console, you would see that this loads &lt;code&gt;railties/exe/rails&lt;/code&gt;. A part of the file &lt;code&gt;railties/exe/rails&lt;/code&gt; has the following code:</source>
          <target state="translated">このコマンドをRailsコンソールで試してみると、 &lt;code&gt;railties/exe/rails&lt;/code&gt; がロードされていることがわかります。ファイル &lt;code&gt;railties/exe/rails&lt;/code&gt; の一部に次のコードがあります。</target>
        </trans-unit>
        <trans-unit id="8c7739665b35931a331b95459613cd91721f606b" translate="yes" xml:space="preserve">
          <source>If you try running &lt;code&gt;test_should_create_article&lt;/code&gt; test from &lt;code&gt;articles_controller_test.rb&lt;/code&gt; it will fail on account of the newly added model level validation and rightly so.</source>
          <target state="translated">あなたが実行してみた場合 &lt;code&gt;test_should_create_article&lt;/code&gt; のからテストを &lt;code&gt;articles_controller_test.rb&lt;/code&gt; それが当然のように、新たに追加されたモデル・レベルの検証のために失敗します。</target>
        </trans-unit>
        <trans-unit id="69aa3078e7ba43546bbdbcbcd41e3c86b7e26fa6" translate="yes" xml:space="preserve">
          <source>If you try to define a set of Rake tasks on the instance, these will get passed up to the Rake tasks defined on the application's class.</source>
          <target state="translated">インスタンス上で Rake タスクのセットを定義しようとすると、アプリケーションのクラスで定義された Rake タスクに渡されます。</target>
        </trans-unit>
        <trans-unit id="43891496e6b3634d5b07b0b4f3b41b7a66741e77" translate="yes" xml:space="preserve">
          <source>If you try to render content along with a non-content status code (100-199, 204, 205, or 304), it will be dropped from the response.</source>
          <target state="translated">非コンテンツステータスコード (100-199、204、205、304)と一緒にコンテンツをレンダリングしようとすると、レスポンスから削除されます。</target>
        </trans-unit>
        <trans-unit id="5fd0daa65aa7e1a3f3cac1e33634eb83b028b95e" translate="yes" xml:space="preserve">
          <source>If you try to use more connections than are available, Active Record will block you and wait for a connection from the pool. If it cannot get a connection, a timeout error similar to that given below will be thrown.</source>
          <target state="translated">利用可能な接続数よりも多くの接続を使用しようとすると、Active Record はあなたをブロックし、プールからの接続を待ちます。接続を取得できない場合は、以下のようなタイムアウトエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="860e16f3811842974bde3c3a9af5e24519a3b933" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;readonly&lt;/code&gt;, then the associated object will be read-only when retrieved via the association.</source>
          <target state="translated">&lt;code&gt;readonly&lt;/code&gt; を使用すると、関連付けられたオブジェクトは、関連付けを介して取得されたときに読み取り専用になります。</target>
        </trans-unit>
        <trans-unit id="b2fff0660301739a755c59746d1897254d0051f8" translate="yes" xml:space="preserve">
          <source>If you use a hash-style &lt;code&gt;where&lt;/code&gt; option, then record creation via this association will be automatically scoped using the hash. In this case, using &lt;code&gt;@author.confirmed_books.create&lt;/code&gt; or &lt;code&gt;@author.confirmed_books.build&lt;/code&gt; will create books where the confirmed column has the value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ハッシュスタイルの &lt;code&gt;where&lt;/code&gt; オプションを使用する場合、この関連付けによるレコードの作成は、ハッシュを使用して自動的にスコープされます。この場合、 &lt;code&gt;@author.confirmed_books.create&lt;/code&gt; または &lt;code&gt;@author.confirmed_books.build&lt;/code&gt; を使用すると、confirmed列の値が &lt;code&gt;true&lt;/code&gt; のブックが作成されます。</target>
        </trans-unit>
        <trans-unit id="5dd83d9db514a7dbdd4c85fbd0f778c62753c3a1" translate="yes" xml:space="preserve">
          <source>If you use a hash-style &lt;code&gt;where&lt;/code&gt;, then record creation via this association will be automatically scoped using the hash. In this case, using &lt;code&gt;@parts.assemblies.create&lt;/code&gt; or &lt;code&gt;@parts.assemblies.build&lt;/code&gt; will create orders where the &lt;code&gt;factory&lt;/code&gt; column has the value &quot;Seattle&quot;.</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt; ハッシュスタイルを使用する場合、この関連付けによるレコードの作成は、ハッシュを使用して自動的にスコープされます。この場合、 &lt;code&gt;@parts.assemblies.create&lt;/code&gt; または &lt;code&gt;@parts.assemblies.build&lt;/code&gt; を使用すると、 &lt;code&gt;factory&lt;/code&gt; 列の値が「Seattle」である注文が作成されます。</target>
        </trans-unit>
        <trans-unit id="ff0906b2865b4b40c9406d2045692447a90d6ec8" translate="yes" xml:space="preserve">
          <source>If you use a helper method, for example, inside a cached block and you then update that helper, you'll have to bump the cache as well. It doesn't really matter how you do it, but the MD5 of the template file must change. One recommendation is to simply be explicit in a comment, like:</source>
          <target state="translated">例えば、キャッシュされたブロックの中でヘルパーメソッドを使用して、そのヘルパーを更新する場合は、キャッシュもバンプしなければなりません。どのようにするかは重要ではありませんが、テンプレートファイルの MD5 は変更しなければなりません。一つのお勧めは、単純にコメントで明示的にすることです。</target>
        </trans-unit>
        <trans-unit id="b7278a05bf1f7032406ce8df1e82fa5cb69d391c" translate="yes" xml:space="preserve">
          <source>If you use a module, for instance Weblog::PostsController, you will need a template named &lt;code&gt;app/views/layouts/weblog/posts.html.erb&lt;/code&gt;.</source>
          <target state="translated">Weblog :: PostsControllerなどのモジュールを使用する場合、 &lt;code&gt;app/views/layouts/weblog/posts.html.erb&lt;/code&gt; という名前のテンプレートが必要になります。</target>
        </trans-unit>
        <trans-unit id="1ce5a47f8e7e2a9b04c86ebb4fd66b97d7210e50" translate="yes" xml:space="preserve">
          <source>If you use a schema cache and multiple databases you'll need to write an initializer that loads the schema cache from your app. This wasn't an issue we could resolve in time for Rails 6.0 but hope to have it in a future version soon.</source>
          <target state="translated">スキーマキャッシュと複数のデータベースを使用する場合は、アプリからスキーマキャッシュをロードするイニシャライザを書く必要があります。これはRails 6.0には間に合いませんでしたが、近い将来のバージョンで解決できることを期待しています。</target>
        </trans-unit>
        <trans-unit id="dbe42d6b14f3e476da63fc938a5753e0e1a72642" translate="yes" xml:space="preserve">
          <source>If you use multiple &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope&lt;/a&gt; declarations in your model then they will be merged together:</source>
          <target state="translated">モデルで複数の&lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope&lt;/a&gt;宣言を使用する場合、それらは一緒にマージされます。</target>
        </trans-unit>
        <trans-unit id="80c97ff655888952411fdd288b4e6d761401568a" translate="yes" xml:space="preserve">
          <source>If you use the &lt;a href=&quot;https://rubygems.org/gems/in_place_editing&quot;&gt;in_place_editor plugin&lt;/a&gt;, or actions that return a string, rather than rendering a view, &lt;em&gt;you have to escape the return value in the action&lt;/em&gt;. Otherwise, if the return value contains a XSS string, the malicious code will be executed upon return to the browser. Escape any input value using the h() method.</source>
          <target state="translated">ビューをレンダリングするのではなく、&lt;a href=&quot;https://rubygems.org/gems/in_place_editing&quot;&gt;in_place_editorプラグイン&lt;/a&gt;、または文字列を返すアクションを使用する&lt;em&gt;場合は、アクションの戻り値をエスケープする必要が&lt;/em&gt;あり&lt;em&gt;ます&lt;/em&gt;。それ以外の場合、戻り値にXSS文字列が含まれていると、ブラウザに戻ったときに悪意のあるコードが実行されます。h（）メソッドを使用して入力値をエスケープします。</target>
        </trans-unit>
        <trans-unit id="42b21ecf5693ca022b4b65f0e8a6a7b79b4dcdcd" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;readonly&lt;/code&gt; method, then the associated object will be read-only when retrieved via the association.</source>
          <target state="translated">&lt;code&gt;readonly&lt;/code&gt; メソッドを使用する場合、関連付けを介して取得した場合、関連付けられたオブジェクトは読み取り専用になります。</target>
        </trans-unit>
        <trans-unit id="13fd547389407f2aa534f580945dfbb93b81209d" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;readonly&lt;/code&gt; method, then the associated objects will be read-only when retrieved via the association.</source>
          <target state="translated">&lt;code&gt;readonly&lt;/code&gt; メソッドを使用する場合、関連付けを介して取得した場合、関連付けられたオブジェクトは読み取り専用になります。</target>
        </trans-unit>
        <trans-unit id="e4b4313b28e5174a5005ef4a1de6683090bde533" translate="yes" xml:space="preserve">
          <source>If you use the &lt;code&gt;select&lt;/code&gt; method on a &lt;code&gt;belongs_to&lt;/code&gt; association, you should also set the &lt;code&gt;:foreign_key&lt;/code&gt; option to guarantee the correct results.</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; アソシエーションで &lt;code&gt;select&lt;/code&gt; メソッドを使用する場合、正しい結果を保証するために &lt;code&gt;:foreign_key&lt;/code&gt; オプションも設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2957357fa844d5aa40521acffe133afd9ad46862" translate="yes" xml:space="preserve">
          <source>If you use the cookie session store, this would apply to the &lt;code&gt;session&lt;/code&gt; and &lt;code&gt;flash&lt;/code&gt; hash as well.</source>
          <target state="translated">Cookieセッションストアを使用する場合、これは &lt;code&gt;session&lt;/code&gt; と &lt;code&gt;flash&lt;/code&gt; ハッシュにも適用されます。</target>
        </trans-unit>
        <trans-unit id="ba2e5aabecb68374b1079b50a06d15a4d4a23aff" translate="yes" xml:space="preserve">
          <source>If you use the popular &lt;a href=&quot;https://rubygems.org/gems/devise&quot;&gt;Devise&lt;/a&gt; gem for user management, it will automatically expire sessions on sign in and sign out for you. If you roll your own, remember to expire the session after your sign in action (when the session is created). This will remove values from the session, therefore &lt;em&gt;you will have to transfer them to the new session&lt;/em&gt;.</source>
          <target state="translated">ユーザー管理に人気のある&lt;a href=&quot;https://rubygems.org/gems/devise&quot;&gt;Devise&lt;/a&gt; gemを使用すると、サインインおよびサインアウト時にセッションが自動的に期限切れになります。自分でロールする場合は、サインイン操作後（セッションの作成時）にセッションを期限切れにしてください。これにより、セッションから値が削除&lt;em&gt;されるため、それらを新しいセッションに転送する必要が&lt;/em&gt;あり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b260b5b45736153fb5e856c84240bdfdc7061b3c" translate="yes" xml:space="preserve">
          <source>If you used the scaffold generator, a system test skeleton was automatically created for you. If you didn't use the scaffold generator, start by creating a system test skeleton.</source>
          <target state="translated">足場ジェネレーターを使用した場合は、システムテストのスケルトンが自動的に作成されています。足場ジェネレーターを使用していない場合は、システム・テスト・スケルトンの作成から始めてください。</target>
        </trans-unit>
        <trans-unit id="8186ba98e8144b29de8b3fe8b6e0a06a9a6ed8eb" translate="yes" xml:space="preserve">
          <source>If you validate the absence of an object associated via a &lt;code&gt;has_one&lt;/code&gt; or &lt;code&gt;has_many&lt;/code&gt; relationship, it will check that the object is neither &lt;code&gt;present?&lt;/code&gt; nor &lt;code&gt;marked_for_destruction?&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has_one&lt;/code&gt; または &lt;code&gt;has_many&lt;/code&gt; 関係を介して関連付けられたオブジェクトが存在しないことを検証すると、オブジェクトが &lt;code&gt;present?&lt;/code&gt; ないことを確認しますか？また、 &lt;code&gt;marked_for_destruction?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f7fa8dd05040adec975ca62bfc25061e785c7df" translate="yes" xml:space="preserve">
          <source>If you validate the presence of an object associated via a &lt;code&gt;has_one&lt;/code&gt; or &lt;code&gt;has_many&lt;/code&gt; relationship, it will check that the object is neither &lt;code&gt;blank?&lt;/code&gt; nor &lt;code&gt;marked_for_destruction?&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;has_one&lt;/code&gt; または &lt;code&gt;has_many&lt;/code&gt; 関係を介して関連付けられたオブジェクトの存在を検証すると、オブジェクトが &lt;code&gt;blank?&lt;/code&gt; でもないことが確認されますか？また、 &lt;code&gt;marked_for_destruction?&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8675fa9dbdfda79f0d9e088a9370acf6f7785f3" translate="yes" xml:space="preserve">
          <source>If you want Active Record to not output anything, then running &lt;code&gt;rails db:migrate
VERBOSE=false&lt;/code&gt; will suppress all output.</source>
          <target state="translated">Active Recordが何も出力しないようにする場合、 &lt;code&gt;rails db:migrate VERBOSE=false&lt;/code&gt; を実行すると、すべての出力が抑制されます。</target>
        </trans-unit>
        <trans-unit id="5f8328e4e201b7e1606e4bfef13b41ffeba2bde1" translate="yes" xml:space="preserve">
          <source>If you want a flash value to be carried over to another request, use the &lt;code&gt;keep&lt;/code&gt; method:</source>
          <target state="translated">flash値を別のリクエストに引き継ぐ場合は、 &lt;code&gt;keep&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="630fe8293b9d46b8c896fddf7673500c6efe7a60" translate="yes" xml:space="preserve">
          <source>If you want a gem to behave as an engine, you have to specify an &lt;code&gt;Engine&lt;/code&gt; for it somewhere inside your plugin's &lt;code&gt;lib&lt;/code&gt; folder (similar to how we specify a &lt;code&gt;Railtie&lt;/code&gt;):</source>
          <target state="translated">gemをエンジンとして動作させたい場合は、プラグインの &lt;code&gt;lib&lt;/code&gt; フォルダー内のどこかに &lt;code&gt;Engine&lt;/code&gt; を指定する必要があります（ &lt;code&gt;Railtie&lt;/code&gt; の指定方法と同様）。</target>
        </trans-unit>
        <trans-unit id="aee38d59683e989a0bb0adbb29c2bd0c92f4d9ee" translate="yes" xml:space="preserve">
          <source>If you want an exception to be raised when some key is blank, use the bang version:</source>
          <target state="translated">キーが空白のときに例外を発生させたい場合は、bangバージョンを使用してください。</target>
        </trans-unit>
        <trans-unit id="26e3876b177bb4a765333ca5c28aca58d164c1eb" translate="yes" xml:space="preserve">
          <source>If you want just MIME type, please use &lt;code&gt;ActionDispatch::Response#media_type&lt;/code&gt; instead.</source>
          <target state="translated">MIMEタイプのみが必要な場合は、代わりに &lt;code&gt;ActionDispatch::Response#media_type&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="730767bfa8f160596399009706fb4cf9a0a1f899" translate="yes" xml:space="preserve">
          <source>If you want more control on what queue a job will be run you can pass a &lt;code&gt;:queue&lt;/code&gt; option to &lt;code&gt;#set&lt;/code&gt;:</source>
          <target state="translated">ジョブが実行されるキューをさらに制御したい場合は、 &lt;code&gt;:queue&lt;/code&gt; オプションを &lt;code&gt;#set&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="cdfd062178bdf53433d9b2b0b20c92f631bd29ca" translate="yes" xml:space="preserve">
          <source>If you want more flexibility you can also pass a block and render specific templates or even render inline or text without using a template file:</source>
          <target state="translated">より柔軟性を求める場合は、ブロックを渡して特定のテンプレートをレンダリングしたり、テンプレートファイルを使用せずにインラインやテキストをレンダリングすることもできます。</target>
        </trans-unit>
        <trans-unit id="fb075b036e1a4a68f429c4ff5cc6a6fc5e17d254" translate="yes" xml:space="preserve">
          <source>If you want to add check constraints like in the examples above, you will have to use &lt;code&gt;structure.sql&lt;/code&gt; as dump method. See &lt;a href=&quot;#schema-dumping-and-you&quot;&gt;Schema Dumping and You&lt;/a&gt;.</source>
          <target state="translated">上記の例のようにチェック制約を追加する場合は、dumpメソッドとして &lt;code&gt;structure.sql&lt;/code&gt; を使用する必要があります。&lt;a href=&quot;#schema-dumping-and-you&quot;&gt;Schema Dumping and Youを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d6819ae67fca06a336a7c220cddca705251c5bd7" translate="yes" xml:space="preserve">
          <source>If you want to add string conditions to your included models, you'll have to explicitly reference them. For example:</source>
          <target state="translated">インクルードされたモデルに文字列条件を追加したい場合は、明示的に参照する必要があります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fcdf79631da776965ca916863b0814010876d14b" translate="yes" xml:space="preserve">
          <source>If you want to assign an object to a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association without saving the object, use the &lt;code&gt;collection.build&lt;/code&gt; method.</source>
          <target state="translated">オブジェクトを保存せずにオブジェクトを &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; 関連付けに割り当てる場合は、 &lt;code&gt;collection.build&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="049e99eb928b4643b8ed72ec399f9776d18df912" translate="yes" xml:space="preserve">
          <source>If you want to assign an object to a &lt;code&gt;has_many&lt;/code&gt; association without saving the object, use the &lt;code&gt;collection.build&lt;/code&gt; method.</source>
          <target state="translated">オブジェクトを保存せずにオブジェクトを &lt;code&gt;has_many&lt;/code&gt; 関連付けに割り当てる場合は、 &lt;code&gt;collection.build&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="881b0e238763be506a07bc64b13764f8fc1d30bc" translate="yes" xml:space="preserve">
          <source>If you want to assign an object to a &lt;code&gt;has_one&lt;/code&gt; association without saving the object, use the &lt;code&gt;build_association&lt;/code&gt; method.</source>
          <target state="translated">オブジェクトを保存せずにオブジェクトを &lt;code&gt;has_one&lt;/code&gt; アソシエーションに割り当てる場合は、 &lt;code&gt;build_association&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="54e4507250cc520d9ef9f615ef6bd7149e330d17" translate="yes" xml:space="preserve">
          <source>If you want to be sure that an association is absent, you'll need to test whether the associated object itself is absent, and not the foreign key used to map the association.</source>
          <target state="translated">アソシエーションが存在しないことを確認したい場合は、アソシエーションをマップするために使用された外部キーではなく、関連付けられたオブジェクト自体が存在しないかどうかをテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="9e06a09ea7f3496b2601d56d74f968ca41431796" translate="yes" xml:space="preserve">
          <source>If you want to be sure that an association is present, you'll need to test whether the associated object itself is present, and not the foreign key used to map the association. This way, it is not only checked that the foreign key is not empty but also that the referenced object exists.</source>
          <target state="translated">アソシエーションが存在することを確認したい場合は、アソシエーションのマッピングに使用された外部キーではなく、関連付けられたオブジェクト自体が存在するかどうかをテストする必要があります。この方法では、外部キーが空でないことだけでなく、参照されているオブジェクトが存在するかどうかもチェックされます。</target>
        </trans-unit>
        <trans-unit id="81e027a9e050661dd1bbf2862087d403e8986023" translate="yes" xml:space="preserve">
          <source>If you want to cache a fragment under certain conditions, you can use &lt;code&gt;cache_if&lt;/code&gt; or &lt;code&gt;cache_unless&lt;/code&gt;:</source>
          <target state="translated">特定の条件下でフラグメントをキャッシュする場合は、 &lt;code&gt;cache_if&lt;/code&gt; または &lt;code&gt;cache_unless&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="882fdac760d8377266eb2e86f1a03a0b05fa12fe" translate="yes" xml:space="preserve">
          <source>If you want to call &lt;code&gt;order&lt;/code&gt; multiple times, subsequent orders will be appended to the first:</source>
          <target state="translated">&lt;code&gt;order&lt;/code&gt; 複数回呼び出す場合は、後続の注文が最初の注文に追加されます。</target>
        </trans-unit>
        <trans-unit id="01478e680e0a3de06aa15384b8c62b6f3e1b9a4d" translate="yes" xml:space="preserve">
          <source>If you want to change the default settings you can change what the system tests are &quot;driven by&quot;. Say you want to change the driver from Selenium to Poltergeist. First add the &lt;code&gt;poltergeist&lt;/code&gt; gem to your &lt;code&gt;Gemfile&lt;/code&gt;. Then in your &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file do the following:</source>
          <target state="translated">デフォルト設定を変更したい場合は、システムテストの「駆動源」を変更できます。ドライバーをSeleniumからPoltergeistに変更するとします。まず、 &lt;code&gt;poltergeist&lt;/code&gt; gemを &lt;code&gt;Gemfile&lt;/code&gt; に追加します。次に、 &lt;code&gt;application_system_test_case.rb&lt;/code&gt; ファイルで以下を実行します。</target>
        </trans-unit>
        <trans-unit id="f61e2bb61d59bbfaa9068fd515324935d10137ae" translate="yes" xml:space="preserve">
          <source>If you want to clear &lt;code&gt;public/assets&lt;/code&gt; completely, you can use &lt;code&gt;rails assets:clobber&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public/assets&lt;/code&gt; 完全にクリアしたい場合は、 &lt;code&gt;rails assets:clobber&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="84dce1db9910af536d37104449772f92e11bc938" translate="yes" xml:space="preserve">
          <source>If you want to define the singular form of a resource, you should add additional rules to the &lt;code&gt;Inflector&lt;/code&gt;:</source>
          <target state="translated">リソースの単数形を定義する場合は、 &lt;code&gt;Inflector&lt;/code&gt; 追加のルールを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d60b834048a06a8aac5fcc39e4ca479462715455" translate="yes" xml:space="preserve">
          <source>If you want to destroy any of the associated models through the form, you have to enable it first using the &lt;code&gt;:allow_destroy&lt;/code&gt; option for &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;:</source>
          <target state="translated">フォームを介して関連するモデルを破棄する場合は、まず &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; の： &lt;code&gt;:allow_destroy&lt;/code&gt; オプションを使用してモデルを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="8cf4512ea7b0117056f5d1547f834737b34adbc7" translate="yes" xml:space="preserve">
          <source>If you want to destroy the associated model through the form, you have to enable it first using the &lt;code&gt;:allow_destroy&lt;/code&gt; option for &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;:</source>
          <target state="translated">フォームを介して関連するモデルを破棄する場合は、 &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; ： &lt;code&gt;:allow_destroy&lt;/code&gt; オプションを使用してモデルを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="ffb3f3dbf442bca04532c3a1fda2be7e3a29fd1b" translate="yes" xml:space="preserve">
          <source>If you want to disable Turbolinks for certain links, add a &lt;code&gt;data-turbolinks=&quot;false&quot;&lt;/code&gt; attribute to the tag:</source>
          <target state="translated">特定のリンクのターボリンクを無効にする場合は、タグに &lt;code&gt;data-turbolinks=&quot;false&quot;&lt;/code&gt; 属性を追加します。</target>
        </trans-unit>
        <trans-unit id="1b888393b095eb8be9cc49c8e192d63811a4e144" translate="yes" xml:space="preserve">
          <source>If you want to disable color in console, do:</source>
          <target state="translated">コンソールで色を無効にしたい場合は、そうします。</target>
        </trans-unit>
        <trans-unit id="e30d33a09c87d83b4cb462987de309752d63489a" translate="yes" xml:space="preserve">
          <source>If you want to do something a bit more elaborate when catching errors, you can use &lt;code&gt;rescue_from&lt;/code&gt;, which handles exceptions of a certain type (or multiple types) in an entire controller and its subclasses.</source>
          <target state="translated">エラーをキャッチするときにもう少し複雑なことを行う場合は、コントローラ全体とそのサブクラスで特定のタイプ（または複数のタイプ）の例外を処理する &lt;code&gt;rescue_from&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="04738d106004ad91f50efe35fd9254c2801b9859" translate="yes" xml:space="preserve">
          <source>If you want to ensure your destination root is clean before running each test, you can set a setup callback:</source>
          <target state="translated">各テストを実行する前に目的地のルートがクリーンであることを確認したい場合は、セットアップコールバックを設定することができます。</target>
        </trans-unit>
        <trans-unit id="be69844258d0f1e61429e02bacd7a81a4960bfad" translate="yes" xml:space="preserve">
          <source>If you want to escape all content, you should invoke the &lt;code&gt;h&lt;/code&gt; method before calling the text helper.</source>
          <target state="translated">すべてのコンテンツをエスケープする場合は、テキストヘルパーを呼び出す前に &lt;code&gt;h&lt;/code&gt; メソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="9046fa26c6e62782a0a60039d77ec14dd6dd2b1e" translate="yes" xml:space="preserve">
          <source>If you want to explicitly render only certain templates, pass a block:</source>
          <target state="translated">特定のテンプレートのみを明示的にレンダリングしたい場合は、ブロックを渡します。</target>
        </trans-unit>
        <trans-unit id="9095618f3a017358eb1838ae59d25212c838a84b" translate="yes" xml:space="preserve">
          <source>If you want to expose your action to GET, use &lt;code&gt;get&lt;/code&gt; in the router:</source>
          <target state="translated">アクションをGETに公開する場合は、ルーターで &lt;code&gt;get&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7506b1f3128dfe856087aae91f14a7cef70e262d" translate="yes" xml:space="preserve">
          <source>If you want to expose your action to both GET and POST, use:</source>
          <target state="translated">GETとPOSTの両方にアクションを公開したい場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="5f99a973d61a2033c930918ae7de48be26737ec4" translate="yes" xml:space="preserve">
          <source>If you want to find both by name and locked, you can chain these finders together by simply typing &quot;&lt;code&gt;and&lt;/code&gt;&quot; between the fields. For example, &lt;code&gt;Client.find_by_first_name_and_locked(&quot;Ryan&quot;, true)&lt;/code&gt;.</source>
          <target state="translated">名前とロックの両方で検索する場合は、フィールド間に「」 &lt;code&gt;and&lt;/code&gt; 「」を入力するだけで、これらのファインダーを連結できます。たとえば、 &lt;code&gt;Client.find_by_first_name_and_locked(&quot;Ryan&quot;, true)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="79e1f98e54f296f2c7e4ea42e01c1fc27040270b" translate="yes" xml:space="preserve">
          <source>If you want to find records using the &lt;code&gt;IN&lt;/code&gt; expression you can pass an array to the conditions hash:</source>
          <target state="translated">&lt;code&gt;IN&lt;/code&gt; 式を使用してレコードを検索する場合は、条件ハッシュに配列を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="64fa85f08ba7bf321366b6270e9b87b779facc87" translate="yes" xml:space="preserve">
          <source>If you want to find the maximum value of a field in your table you can call the &lt;code&gt;maximum&lt;/code&gt; method on the class that relates to the table. This method call will look something like this:</source>
          <target state="translated">テーブル内のフィールドの最大値を検索する場合は、テーブルに関連するクラスで &lt;code&gt;maximum&lt;/code&gt; メソッドを呼び出すことができます。このメソッド呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="28c3fda57f94de181be4b5408c0b0847936dab74" translate="yes" xml:space="preserve">
          <source>If you want to find the minimum value of a field in your table you can call the &lt;code&gt;minimum&lt;/code&gt; method on the class that relates to the table. This method call will look something like this:</source>
          <target state="translated">テーブル内のフィールドの最小値を検索する場合は、テーブルに関連するクラスの &lt;code&gt;minimum&lt;/code&gt; メソッドを呼び出すことができます。このメソッド呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b488c2a178c88deaa3c422faf6e87ada4f5cdea2" translate="yes" xml:space="preserve">
          <source>If you want to find the sum of a field for all records in your table you can call the &lt;code&gt;sum&lt;/code&gt; method on the class that relates to the table. This method call will look something like this:</source>
          <target state="translated">テーブル内のすべてのレコードのフィールドの合計を検索する場合は、テーブルに関連するクラスで &lt;code&gt;sum&lt;/code&gt; メソッドを呼び出すことができます。このメソッド呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="afcf2558505ba1fa6f04ecc0d3ef9a8e4515680d" translate="yes" xml:space="preserve">
          <source>If you want to follow along while browsing the Rails &lt;a href=&quot;https://github.com/rails/rails&quot;&gt;source code&lt;/a&gt;, we recommend that you use the &lt;code&gt;t&lt;/code&gt; key binding to open the file finder inside GitHub and find files quickly.</source>
          <target state="translated">Railsの&lt;a href=&quot;https://github.com/rails/rails&quot;&gt;ソースコード&lt;/a&gt;を参照しながら追跡したい場合は、 &lt;code&gt;t&lt;/code&gt; キーバインディングを使用してGitHub内のファイルファインダーを開き、ファイルをすばやく検索することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4b81c7f5d1059063f5ff1e607628d7b3a231038b" translate="yes" xml:space="preserve">
          <source>If you want to include all of the engine's helpers, you can use the helper method on an engine's instance:</source>
          <target state="translated">エンジンのヘルパーをすべて含めたい場合は、エンジンのインスタンスでヘルパー・メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="4367fc68e01e7cac642cd5f8e973aeffedafdc2c" translate="yes" xml:space="preserve">
          <source>If you want to keep that structure, you'll need to delete the subdirectory from the autoload paths in an initializer:</source>
          <target state="translated">その構造を維持したい場合は、イニシャライザでオートロードパスからサブディレクトリを削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="833aa975863b9d65c76d04ff5db68bd93b0c3dd1" translate="yes" xml:space="preserve">
          <source>If you want to link to an action in the same controller, you don't need to specify the &lt;code&gt;:controller&lt;/code&gt; option, as Rails will use the current controller by default.</source>
          <target state="translated">同じコントローラー内のアクションにリンクする場合、Railsはデフォルトで現在のコントローラーを使用するため、 &lt;code&gt;:controller&lt;/code&gt; オプションを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="9ae5a18bce4081d8e4bce6b79dad0a6271339c34" translate="yes" xml:space="preserve">
          <source>If you want to load all posts (including posts with no approved comments), then write your own &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; query using &lt;code&gt;ON&lt;/code&gt;:</source>
          <target state="translated">すべての投稿（コメントが承認されていない投稿を含む）をロードする場合は、 &lt;code&gt;ON&lt;/code&gt; を使用して独自の &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; クエリを記述します。</target>
        </trans-unit>
        <trans-unit id="c7608a97b4cc8fee46c8ddb8e25f6f759d653e29" translate="yes" xml:space="preserve">
          <source>If you want to make sure that, upon insertion, all of the records in the persisted association are distinct (so that you can be sure that when you inspect the association that you will never find duplicate records), you should add a unique index on the table itself. For example, if you have a table named &lt;code&gt;readings&lt;/code&gt; and you want to make sure the articles can only be added to a person once, you could add the following in a migration:</source>
          <target state="translated">挿入時に、永続化された関連付けのすべてのレコードが明確であることを確認したい場合（関連付けを検査すると、重複レコードが見つからないことを確認できるため）、一意のインデックスをテーブル自体。たとえば、 &lt;code&gt;readings&lt;/code&gt; という名前のテーブルがあり、記事を人に一度だけ追加できるようにしたい場合は、移行で次の行を追加できます。</target>
        </trans-unit>
        <trans-unit id="87d7a136709e327488aa669dc1033c97f1e78efb" translate="yes" xml:space="preserve">
          <source>If you want to make the format segment mandatory, so it cannot be omitted, you can supply &lt;code&gt;format: true&lt;/code&gt; like this:</source>
          <target state="translated">フォーマットセグメントを必須にして、省略できないようにする場合は、 &lt;code&gt;format: true&lt;/code&gt; ように指定できます。</target>
        </trans-unit>
        <trans-unit id="202741924d3793a6f39f70128849a1f76eb67a92" translate="yes" xml:space="preserve">
          <source>If you want to perform interpolation on a bulk hash of translations, you need to pass &lt;code&gt;deep_interpolation: true&lt;/code&gt; as a parameter. When you have the following dictionary:</source>
          <target state="translated">翻訳の一括ハッシュで補間を実行する &lt;code&gt;deep_interpolation: true&lt;/code&gt; は、パラメーターとしてdeep_interpolation：trueを渡す必要があります。次の辞書がある場合：</target>
        </trans-unit>
        <trans-unit id="b898a526db032ac4b4c17d10ed6b687f6f7a6dcf" translate="yes" xml:space="preserve">
          <source>If you want to provide text formatting other than HTML (due to security), use a mark-up language which is converted to HTML on the server-side. &lt;a href=&quot;http://redcloth.org/&quot;&gt;RedCloth&lt;/a&gt; is such a language for Ruby, but without precautions, it is also vulnerable to XSS.</source>
          <target state="translated">（セキュリティ上の理由から）HTML以外のテキスト書式を提供する場合は、サーバー側でHTMLに変換されるマークアップ言語を使用します。&lt;a href=&quot;http://redcloth.org/&quot;&gt;RedCloth&lt;/a&gt;はRuby用のそのような言語ですが、予防策がないため、XSSに対しても脆弱です。</target>
        </trans-unit>
        <trans-unit id="0de6137e22655510821e761cfb4e32162cdf37b1" translate="yes" xml:space="preserve">
          <source>If you want to remove session related middleware, do the following:</source>
          <target state="translated">セッション関連のミドルウェアを削除したい場合は、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="437988df35a90760193f1e50466ecd5f8d0cf358" translate="yes" xml:space="preserve">
          <source>If you want to render the view that corresponds to a different template within the same controller, you can use &lt;code&gt;render&lt;/code&gt; with the name of the view:</source>
          <target state="translated">同じコントローラー内の別のテンプレートに対応するビューをレンダリングする場合は、ビューの名前を指定して &lt;code&gt;render&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="678518a594c94e4ba524c6e692f3d1358ce5f917" translate="yes" xml:space="preserve">
          <source>If you want to replace any header which already exists, first set it to &lt;code&gt;nil&lt;/code&gt; in order to reset the value otherwise another field will be added for the same header.</source>
          <target state="translated">すでに存在するヘッダーを置き換える場合は、最初に &lt;code&gt;nil&lt;/code&gt; に設定して値をリセットします。そうしないと、同じヘッダーに別のフィールドが追加されます。</target>
        </trans-unit>
        <trans-unit id="5a89ab8db551e352e42182a2cfd9536e4a45123d" translate="yes" xml:space="preserve">
          <source>If you want to route /admin/posts to &lt;code&gt;PostsController&lt;/code&gt; (without the &lt;code&gt;Admin::&lt;/code&gt; module prefix), you could use</source>
          <target state="translated">/ admin / postsを &lt;code&gt;PostsController&lt;/code&gt; （ &lt;code&gt;Admin::&lt;/code&gt; モジュール接頭辞なし）にルーティングしたい場合は、</target>
        </trans-unit>
        <trans-unit id="71e1116ab58411d02bb9b2741fbbff3dea0caf12" translate="yes" xml:space="preserve">
          <source>If you want to route /posts (without the prefix /admin) to &lt;code&gt;Admin::PostsController&lt;/code&gt;, you could use</source>
          <target state="translated">/ posts（接頭辞/ adminなし）を &lt;code&gt;Admin::PostsController&lt;/code&gt; にルーティングしたい場合は、</target>
        </trans-unit>
        <trans-unit id="c22991ae1709bb07298a0afe1f2a901f31ffa538" translate="yes" xml:space="preserve">
          <source>If you want to route &lt;code&gt;/admin/articles&lt;/code&gt; to &lt;code&gt;ArticlesController&lt;/code&gt; (without the &lt;code&gt;Admin::&lt;/code&gt; module prefix), you could use:</source>
          <target state="translated">&lt;code&gt;/admin/articles&lt;/code&gt; を &lt;code&gt;ArticlesController&lt;/code&gt; にルーティングする場合（ &lt;code&gt;Admin::&lt;/code&gt; モジュール接頭辞なし）、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="c0d8526c069daa42c1a84666facdfaead9045910" translate="yes" xml:space="preserve">
          <source>If you want to route &lt;code&gt;/articles&lt;/code&gt; (without the prefix &lt;code&gt;/admin&lt;/code&gt;) to &lt;code&gt;Admin::ArticlesController&lt;/code&gt;, you could use:</source>
          <target state="translated">&lt;code&gt;/articles&lt;/code&gt; （接頭辞 &lt;code&gt;/admin&lt;/code&gt; なし）を &lt;code&gt;Admin::ArticlesController&lt;/code&gt; にルーティングする場合は、次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="3a23182d8fff39aabae6eb6b0d95e07349aebd04" translate="yes" xml:space="preserve">
          <source>If you want to see how many records are in your model's table you could call &lt;code&gt;Client.count&lt;/code&gt; and that will return the number. If you want to be more specific and find all the clients with their age present in the database you can use &lt;code&gt;Client.count(:age)&lt;/code&gt;.</source>
          <target state="translated">モデルのテーブルにあるレコードの数を確認する場合は、 &lt;code&gt;Client.count&lt;/code&gt; を呼び出すと、その数が返されます。より具体的にしたい場合は、データベースに存在するすべてのクライアントとその年齢を検索するには、 &lt;code&gt;Client.count(:age)&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="c82af370bdb1006cbe834871485c7f1ca878b194" translate="yes" xml:space="preserve">
          <source>If you want to see the average of a certain number in one of your tables you can call the &lt;code&gt;average&lt;/code&gt; method on the class that relates to the table. This method call will look something like this:</source>
          <target state="translated">テーブルの1つにある特定の数の平均を表示する場合は、テーブルに関連するクラスで &lt;code&gt;average&lt;/code&gt; メソッドを呼び出すことができます。このメソッド呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="7b0feb29eaac36cd5373da76d96fb33a59b720fd" translate="yes" xml:space="preserve">
          <source>If you want to see the exact results of a call to &lt;code&gt;render&lt;/code&gt; without needing to inspect it in a browser, you can call &lt;code&gt;render_to_string&lt;/code&gt;. This method takes exactly the same options as &lt;code&gt;render&lt;/code&gt;, but it returns a string instead of sending a response back to the browser.</source>
          <target state="translated">ブラウザーで検査する必要なく &lt;code&gt;render&lt;/code&gt; 呼び出しの正確な結果を確認したい場合は、 &lt;code&gt;render_to_string&lt;/code&gt; を呼び出すことができます。このメソッドは &lt;code&gt;render&lt;/code&gt; とまったく同じオプションを取りますが、ブラウザに応答を返す代わりに文字列を返します。</target>
        </trans-unit>
        <trans-unit id="fb3bcca1fe2eb16c2e4bafbe58abd6079508f7d4" translate="yes" xml:space="preserve">
          <source>If you want to select a set of records whether or not they have associated records you can use the &lt;code&gt;left_outer_joins&lt;/code&gt; method.</source>
          <target state="translated">レコードが関連付けられているかどうかに関係なく、一連のレコードを選択する場合は、 &lt;code&gt;left_outer_joins&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="fd867d338e486f51b7e048f7dbfe4bba0ff8db95" translate="yes" xml:space="preserve">
          <source>If you want to send a file that already exists on disk, use the &lt;code&gt;send_file&lt;/code&gt; method.</source>
          <target state="translated">ディスクに既に存在するファイルを送信する場合は、 &lt;code&gt;send_file&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="fa8614479ca836359c8d9b53a1ceb07120d48fe5" translate="yes" xml:space="preserve">
          <source>If you want to send emails right away (from a cronjob for example) just call &lt;code&gt;deliver_now&lt;/code&gt;:</source>
          <target state="translated">（ &lt;code&gt;deliver_now&lt;/code&gt; などから）すぐにメールを送信したい場合は、deliver_nowを呼び出します。</target>
        </trans-unit>
        <trans-unit id="b7e40e2a1ad7f940f357a14d957ba15d7fb75371" translate="yes" xml:space="preserve">
          <source>If you want to serve only some assets from your CDN, you can use custom &lt;code&gt;:host&lt;/code&gt; option your asset helper, which overwrites value set in &lt;code&gt;config.action_controller.asset_host&lt;/code&gt;.</source>
          <target state="translated">CDNから一部のアセットのみを提供 &lt;code&gt;:host&lt;/code&gt; 場合は、アセットヘルパーのカスタム：hostオプションを使用できます。これにより、 &lt;code&gt;config.action_controller.asset_host&lt;/code&gt; で設定された値が上書きされます。</target>
        </trans-unit>
        <trans-unit id="86a051be540d60a884f81305aac005b33816a13e" translate="yes" xml:space="preserve">
          <source>If you want to set custom headers for a response then &lt;code&gt;response.headers&lt;/code&gt; is the place to do it. The headers attribute is a hash which maps header names to their values, and Rails will set some of them automatically. If you want to add or change a header, just assign it to &lt;code&gt;response.headers&lt;/code&gt; this way:</source>
          <target state="translated">応答にカスタムヘッダーを設定する場合は、 &lt;code&gt;response.headers&lt;/code&gt; を使用します。headers属性は、ヘッダー名をそれらの値にマップするハッシュであり、Railsはそれらのいくつかを自動的に設定します。ヘッダーを追加または変更する場合は、次のように &lt;code&gt;response.headers&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="099225027f13bd8921cfcbe297f75a2b5bfbff8e" translate="yes" xml:space="preserve">
          <source>If you want to set far future &lt;code&gt;max-age&lt;/code&gt; in your &lt;code&gt;Cache-Control&lt;/code&gt; (and you do), then make sure when you change your assets that your cache is invalidated. For example when changing the smiley face in an image from yellow to blue, you want all visitors of your site to get the new blue face. When using a CDN with the Rails asset pipeline &lt;code&gt;config.assets.digest&lt;/code&gt; is set to true by default so that each asset will have a different file name when it is changed. This way you don't have to ever manually invalidate any items in your cache. By using a different unique asset name instead, your users get the latest asset.</source>
          <target state="translated">&lt;code&gt;Cache-Control&lt;/code&gt; で遠い将来の &lt;code&gt;max-age&lt;/code&gt; を設定する場合（およびそうする場合）、アセットを変更するときに、キャッシュが無効になっていることを確認してください。たとえば、画像のスマイリーフェイスを黄色から青色に変更する場合、サイトのすべての訪問者に新しい青色の顔を与えたいとします。 RailsアセットパイプラインでCDNを使用する場合、 &lt;code&gt;config.assets.digest&lt;/code&gt; はデフォルトでtrueに設定されているため、各アセットが変更されたときに異なるファイル名が付けられます。これにより、キャッシュ内のアイテムを手動で無効にする必要がなくなります。代わりに別の一意のアセット名を使用すると、ユーザーは最新のアセットを取得できます。</target>
        </trans-unit>
        <trans-unit id="3aef9f711923eec46d9db89fdf9587f2d1fc51b2" translate="yes" xml:space="preserve">
          <source>If you want to set up a one-to-one relationship between two models, you'll need to add &lt;code&gt;belongs_to&lt;/code&gt; to one, and &lt;code&gt;has_one&lt;/code&gt; to the other. How do you know which is which?</source>
          <target state="translated">あなたは二つのモデル間の1対1の関係を設定したい場合は、追加する必要があります &lt;code&gt;belongs_to&lt;/code&gt; 1、およびに &lt;code&gt;has_one&lt;/code&gt; の他に。どちらがどれであるかをどのようにして知っていますか？</target>
        </trans-unit>
        <trans-unit id="41299ecc49f2b55d12fc783dd8a4bce25cda4533" translate="yes" xml:space="preserve">
          <source>If you want to specify multiple conditions:</source>
          <target state="translated">複数の条件を指定する場合</target>
        </trans-unit>
        <trans-unit id="92432ba849376cfd328bd42af73915abeec976e3" translate="yes" xml:space="preserve">
          <source>If you want to take an existing application and make it an API one, read the following steps.</source>
          <target state="translated">既存のアプリケーションをAPI化したい場合は、以下の手順を読んでください。</target>
        </trans-unit>
        <trans-unit id="426e7b46d2daba4aa620587d8734cf3218fc3ddf" translate="yes" xml:space="preserve">
          <source>If you want to test for mobile sizes on top of testing for desktop, you can create another class that inherits from SystemTestCase and use in your test suite. In this example a file called &lt;code&gt;mobile_system_test_case.rb&lt;/code&gt; is created in the &lt;code&gt;/test&lt;/code&gt; directory with the following configuration.</source>
          <target state="translated">デスクトップのテストに加えてモバイルサイズをテストする場合は、SystemTestCaseから継承してテストスイートで使用する別のクラスを作成できます。この例では、 &lt;code&gt;mobile_system_test_case.rb&lt;/code&gt; というファイルが &lt;code&gt;/test&lt;/code&gt; ディレクトリに次の構成で作成されます。</target>
        </trans-unit>
        <trans-unit id="bb99e9b5714695e3c0d2a4ad4579d004020c4ebf" translate="yes" xml:space="preserve">
          <source>If you want to test the broadcasting made with &lt;code&gt;Channel.broadcast_to&lt;/code&gt;, you shoud use &lt;code&gt;Channel.broadcasting_for&lt;/code&gt; to generate an underlying stream name:</source>
          <target state="translated">あなたが作っ放送テストしたい場合は &lt;code&gt;Channel.broadcast_to&lt;/code&gt; を、あなたは使用shoud &lt;code&gt;Channel.broadcasting_for&lt;/code&gt; を基本となるストリーム名を生成します：</target>
        </trans-unit>
        <trans-unit id="4ff54b553ef18f239f233ecc554746be0ea932b7" translate="yes" xml:space="preserve">
          <source>If you want to update the current avatar without providing the id, you must add &lt;code&gt;:update_only&lt;/code&gt; option.</source>
          <target state="translated">IDを指定せずに現在のアバターを更新する場合は、 &lt;code&gt;:update_only&lt;/code&gt; オプションを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="d7f01918dd89fba4b8c4e6c1531a6a2074a2bdf6" translate="yes" xml:space="preserve">
          <source>If you want to use Spring as your application preloader you need to:</source>
          <target state="translated">アプリケーションのプリローダーとしてSpringを使いたい場合は、以下のようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="b965db2407513b5b2b570f23c5d93b00e3101f2d" translate="yes" xml:space="preserve">
          <source>If you want to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_URI_scheme&quot;&gt;data URI&lt;/a&gt; - a method of embedding the image data directly into the CSS file - you can use the &lt;code&gt;asset_data_uri&lt;/code&gt; helper.</source>
          <target state="translated">あなたが使用したい場合は&lt;a href=&quot;https://en.wikipedia.org/wiki/Data_URI_scheme&quot;&gt;、データURI&lt;/a&gt; CSSファイルに直接画像データを埋め込む方法を- -あなたが使用することができます &lt;code&gt;asset_data_uri&lt;/code&gt; ヘルパーを。</target>
        </trans-unit>
        <trans-unit id="a38b6f313ac095865cc041c45313249a8c891f54" translate="yes" xml:space="preserve">
          <source>If you want to use a headless browser, you could use Headless Chrome or Headless Firefox by adding &lt;code&gt;headless_chrome&lt;/code&gt; or &lt;code&gt;headless_firefox&lt;/code&gt; in the &lt;code&gt;:using&lt;/code&gt; argument.</source>
          <target state="translated">ヘッドレスブラウザを使用する場合は、 &lt;code&gt;:using&lt;/code&gt; 引数に &lt;code&gt;headless_chrome&lt;/code&gt; または &lt;code&gt;headless_firefox&lt;/code&gt; を追加して、ヘッドレスChromeまたはヘッドレスFirefoxを使用できます。</target>
        </trans-unit>
        <trans-unit id="8469a734b56d841b8d3b06494a60e3dbb5a95e48" translate="yes" xml:space="preserve">
          <source>If you want to use an inline method, such as a proc, do something like this:</source>
          <target state="translated">proc のようなインラインメソッドを使いたい場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e9476b0eea21be4c7ecb97a0e9ba1aba5803590f" translate="yes" xml:space="preserve">
          <source>If you want to use encoding other than Base64 then you will need to pass encoding type along with the pre-encoded content as Mail doesn't know how to decode the data:</source>
          <target state="translated">Base64以外のエンコーディングを使用したい場合は、エンコーディングタイプを事前にエンコードされた内容と一緒に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="83bc651176612167b690b60503d3abc1dba33511" translate="yes" xml:space="preserve">
          <source>If you want to use environment variables, standard SDK configuration files, profiles, IAM instance profiles or task roles, you can omit the &lt;code&gt;access_key_id&lt;/code&gt;, &lt;code&gt;secret_access_key&lt;/code&gt;, and &lt;code&gt;region&lt;/code&gt; keys in the example above. The Amazon S3 Service supports all of the authentication options described in the &lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-ruby/v3/developer-guide/setup-config.html&quot;&gt;AWS SDK documentation&lt;/a&gt;.</source>
          <target state="translated">環境変数、標準SDK構成ファイル、プロファイル、IAMインスタンスプロファイル、またはタスクの役割を使用する場合は、上の例で &lt;code&gt;access_key_id&lt;/code&gt; 、 &lt;code&gt;secret_access_key&lt;/code&gt; 、および &lt;code&gt;region&lt;/code&gt; キーを省略できます。Amazon S3サービスは、&lt;a href=&quot;https://docs.aws.amazon.com/sdk-for-ruby/v3/developer-guide/setup-config.html&quot;&gt;AWS SDKドキュメントに&lt;/a&gt;記載されているすべての認証オプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="78550f6d08d1ff8a685dd59e30382d79dffa8bb2" translate="yes" xml:space="preserve">
          <source>If you want to use multiple Sass files, you should generally use the &lt;a href=&quot;https://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import&quot;&gt;Sass &lt;code&gt;@import&lt;/code&gt; rule&lt;/a&gt; instead of these Sprockets directives. When using Sprockets directives, Sass files exist within their own scope, making variables or mixins only available within the document they were defined in.</source>
          <target state="translated">複数のSassファイルを使用する場合は、通常、これらのSprocketsディレクティブの代わりに&lt;a href=&quot;https://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html#import&quot;&gt;Sass &lt;code&gt;@import&lt;/code&gt; ルールを&lt;/a&gt;使用する必要があります。Sprocketsディレクティブを使用する場合、Sassファイルは独自のスコープ内に存在し、変数またはミックスインはそれらが定義されたドキュメント内でのみ使用可能になります。</target>
        </trans-unit>
        <trans-unit id="6c94a4e174d42f497da3366d92bc9b0b8bc6401f" translate="yes" xml:space="preserve">
          <source>If you want to use the Direct Upload feature from a JavaScript framework, or you want to integrate custom drag and drop solutions, you can use the &lt;code&gt;DirectUpload&lt;/code&gt; class for this purpose. Upon receiving a file from your library of choice, instantiate a DirectUpload and call its create method. Create takes a callback to invoke when the upload completes.</source>
          <target state="translated">JavaScriptフレームワークから直接アップロード機能を使用する場合、またはカスタムのドラッグアンドドロップソリューションを統合する場合は、この目的で &lt;code&gt;DirectUpload&lt;/code&gt; クラスを使用できます。選択したライブラリからファイルを受け取ったら、DirectUploadをインスタンス化し、そのcreateメソッドを呼び出します。Createは、アップロードの完了時に呼び出すコールバックを取ります。</target>
        </trans-unit>
        <trans-unit id="0daea374afa45a4f9161d43ce592eeaf4bfcbb83" translate="yes" xml:space="preserve">
          <source>If you want to use the new &lt;code&gt;secrets.yml&lt;/code&gt; convention to store your application's secrets, you need to:</source>
          <target state="translated">新しい &lt;code&gt;secrets.yml&lt;/code&gt; 規約を使用してアプリケーションのシークレットを保存する場合は、次のことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="5b2f0d4edf0b36ea43e41a3cceafe2919b1796b3" translate="yes" xml:space="preserve">
          <source>If you want to validate that a child record is associated with a parent record, you can use the &lt;code&gt;validates_presence_of&lt;/code&gt; method and the &lt;code&gt;:inverse_of&lt;/code&gt; key as this example illustrates:</source>
          <target state="translated">子レコードが親レコードに関連付けられていることを &lt;code&gt;validates_presence_of&lt;/code&gt; 場合は、次の例に示すように、validates_presence_ofメソッドと &lt;code&gt;:inverse_of&lt;/code&gt; キーを使用できます。</target>
        </trans-unit>
        <trans-unit id="360919c22e7192293a509dac7b1cea6d815c9f8c" translate="yes" xml:space="preserve">
          <source>If you want to validate the presence of a boolean field (where the real values are &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;), you will want to use &lt;code&gt;validates_inclusion_of :field_name, in: [true, false]&lt;/code&gt;.</source>
          <target state="translated">ブールフィールド（実際の値が &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; ）の存在を検証する場合は、 &lt;code&gt;validates_inclusion_of :field_name, in: [true, false]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ea56a09fad8a04faf2bff57737e8a807d3431719" translate="yes" xml:space="preserve">
          <source>If you want to validate the presence of a boolean field (where the real values are true and false), you will want to use &lt;code&gt;validates_inclusion_of :field_name, in: [true, false]&lt;/code&gt;.</source>
          <target state="translated">ブールフィールド（実際の値がtrueとfalseである）の存在を検証する場合は、 &lt;code&gt;validates_inclusion_of :field_name, in: [true, false]&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="7fa417478846acd30b43d6fde743d8c6ea43060f" translate="yes" xml:space="preserve">
          <source>If you want your mailer to be able to process incoming messages, you'll need to implement a &lt;code&gt;receive&lt;/code&gt; method that accepts the raw email string as a parameter:</source>
          <target state="translated">メーラーで受信メッセージを処理できるようにするには、生のメール文字列をパラメーターとして受け入れる &lt;code&gt;receive&lt;/code&gt; メソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="6455c2de3d7a047581e9fcb01755edb3c86f2bbd" translate="yes" xml:space="preserve">
          <source>If you wanted to link to just a magazine:</source>
          <target state="translated">ただの雑誌にリンクしたかったのであれば</target>
        </trans-unit>
        <trans-unit id="7776932dfe5e1ba6fe53dedb97b0fcebe5afe5b5" translate="yes" xml:space="preserve">
          <source>If you were to publish your blog online, anyone would be able to add, edit and delete articles or delete comments.</source>
          <target state="translated">ブログをネットで公開していたら、誰でも記事の追加・編集・削除やコメントの削除ができるようになりますよね。</target>
        </trans-unit>
        <trans-unit id="575cb50250b1bf052c4de6c10262311c1b70fb97" translate="yes" xml:space="preserve">
          <source>If you were to use this inside an engine, it would &lt;strong&gt;always&lt;/strong&gt; go to the application's root. If you were to leave off the &lt;code&gt;main_app&lt;/code&gt; &quot;routing proxy&quot; method call, it could potentially go to the engine's or application's root, depending on where it was called from.</source>
          <target state="translated">これをエンジン内で使用すると、&lt;strong&gt;常に&lt;/strong&gt;アプリケーションのルートに移動します。 &lt;code&gt;main_app&lt;/code&gt; の「ルーティングプロキシ」メソッド呼び出しを省略した場合、呼び出し元によっては、エンジンまたはアプリケーションのルートに移動する可能性があります。</target>
        </trans-unit>
        <trans-unit id="a427f99647eb5e543a3ae1b3a0d916eb1faa0edd" translate="yes" xml:space="preserve">
          <source>If you wish for a migration to do something that Active Record doesn't know how to reverse, you can use &lt;code&gt;reversible&lt;/code&gt;:</source>
          <target state="translated">Active Recordがリバースする方法を知らない何かを行うマイグレーションに希望する場合は、 &lt;code&gt;reversible&lt;/code&gt; を使用できます：</target>
        </trans-unit>
        <trans-unit id="acd56c78b0133cc928ce018dc68640e14293ed83" translate="yes" xml:space="preserve">
          <source>If you wish to assign an object to a &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; association without saving it, use the &lt;code&gt;#build_association&lt;/code&gt; method (documented below). The object being replaced will still be saved to update its foreign key.</source>
          <target state="translated">オブジェクトを保存せずに&lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;アソシエーションに割り当てる場合は、 &lt;code&gt;#build_association&lt;/code&gt; メソッド（以下に記載）を使用します。置換されるオブジェクトは、その外部キーを更新するために保存されます。</target>
        </trans-unit>
        <trans-unit id="a737eea7353d9510092816cd514035cc221c5cdd" translate="yes" xml:space="preserve">
          <source>If you wish to direct your form request to a particular URL, you would use &lt;code&gt;form_with url: my_nifty_url_path&lt;/code&gt; instead. To see more in depth options on what &lt;code&gt;form_with&lt;/code&gt; accepts be sure to &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with&quot;&gt;check out the API documentation&lt;/a&gt;.</source>
          <target state="translated">フォームリクエストを特定のURLに送信する場合は、代わりに &lt;code&gt;form_with url: my_nifty_url_path&lt;/code&gt; 使用します。 &lt;code&gt;form_with&lt;/code&gt; が受け入れるオプションの詳細について&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/FormHelper.html#method-i-form_with&quot;&gt;は、APIドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d6402f3e6ee3269544b94ed2afd9f856f4bfe840" translate="yes" xml:space="preserve">
          <source>If you wish to enforce referential integrity at the database level, add the &lt;code&gt;foreign_key: true&lt;/code&gt; option to the &amp;lsquo;reference&amp;rsquo; column declarations above.</source>
          <target state="translated">データベースレベルで参照整合性を適用する場合は、上記の「参照」列宣言に &lt;code&gt;foreign_key: true&lt;/code&gt; オプションを追加します。</target>
        </trans-unit>
        <trans-unit id="aba5ce0e2d38e3da0ce1fa3f46b615712df3745f" translate="yes" xml:space="preserve">
          <source>If you wish to override the default delivery options (e.g. SMTP credentials) while delivering emails, you can do this using &lt;code&gt;delivery_method_options&lt;/code&gt; in the mailer action.</source>
          <target state="translated">電子メールの配信中にデフォルトの配信オプション（SMTP資格情報など）を上書きする場合は、メーラーアクションで &lt;code&gt;delivery_method_options&lt;/code&gt; を使用してこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="8bc41a963ec89ff455cd121d6950f47a8727574b" translate="yes" xml:space="preserve">
          <source>If you wish to preload the dependent &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; model, you can use the named scope:</source>
          <target state="translated">依存する&lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt;モデルをプリロードする場合は、名前付きスコープを使用できます。</target>
        </trans-unit>
        <trans-unit id="32d5aaa0eac49f14bbdb07d88277c02905e0a8f3" translate="yes" xml:space="preserve">
          <source>If you wish to reference the application inside the engine in a similar way, use the &lt;code&gt;main_app&lt;/code&gt; helper:</source>
          <target state="translated">同様の方法でエンジン内のアプリケーションを参照する場合は、 &lt;code&gt;main_app&lt;/code&gt; ヘルパーを使用します。</target>
        </trans-unit>
        <trans-unit id="e733200282906818655a1aeb77c3effbcc540ff4" translate="yes" xml:space="preserve">
          <source>If you wish to specify disabled option tags, set &lt;code&gt;selected&lt;/code&gt; to be a hash, with &lt;code&gt;:disabled&lt;/code&gt; being either a value or array of values to be disabled. In this case, you can use &lt;code&gt;:selected&lt;/code&gt; to specify selected option tags.</source>
          <target state="translated">無効化されたオプションタグを指定する場合は、 &lt;code&gt;selected&lt;/code&gt; をハッシュに設定します &lt;code&gt;:disabled&lt;/code&gt; は、無効化する値または値の配列です。この場合、 &lt;code&gt;:selected&lt;/code&gt; を使用して、選択したオプションタグを指定できます。</target>
        </trans-unit>
        <trans-unit id="e1c9e5119e4d165a495f0f324ad98ec144c7d4d2" translate="yes" xml:space="preserve">
          <source>If you wish to specify your own custom joins using &lt;a href=&quot;../querymethods#method-i-joins&quot;&gt;ActiveRecord::QueryMethods#joins&lt;/a&gt; method, those table names will take precedence over the eager associations:</source>
          <target state="translated">&lt;a href=&quot;../querymethods#method-i-joins&quot;&gt;ActiveRecord :: QueryMethods＃joins&lt;/a&gt;メソッドを使用して独自のカスタム結合を指定する場合は、それらのテーブル名が熱心な関連付けよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="81a502737a61e2e278b4a4cb999f6a9c1f6ca22d" translate="yes" xml:space="preserve">
          <source>If you wish to test out some code without changing any data, you can do that by invoking &lt;code&gt;rails console --sandbox&lt;/code&gt;.</source>
          <target state="translated">データを変更せずにコードをテストしたい場合は、 &lt;code&gt;rails console --sandbox&lt;/code&gt; を呼び出すことでテストできます。</target>
        </trans-unit>
        <trans-unit id="55e25e1f3e40c431c5a37b5f3841936bbc4459cd" translate="yes" xml:space="preserve">
          <source>If you wish to use an initializer - code that should run before the engine is loaded - the place for it is the &lt;code&gt;config/initializers&lt;/code&gt; folder. This directory's functionality is explained in the &lt;a href=&quot;configuring#initializers&quot;&gt;Initializers section&lt;/a&gt; of the Configuring guide, and works precisely the same way as the &lt;code&gt;config/initializers&lt;/code&gt; directory inside an application. The same thing goes if you want to use a standard initializer.</source>
          <target state="translated">イニシャライザ（エンジンがロードされる前に実行する必要があるコード）を使用する場合、その場所は &lt;code&gt;config/initializers&lt;/code&gt; フォルダです。このディレクトリの機能は、構成ガイドの&lt;a href=&quot;configuring#initializers&quot;&gt;初期化セクション&lt;/a&gt;で説明されており、アプリケーション内の &lt;code&gt;config/initializers&lt;/code&gt; ディレクトリとまったく同じように機能します。標準のイニシャライザを使用したい場合も同様です。</target>
        </trans-unit>
        <trans-unit id="c739de938813bf2056a36275c1000bffb09bd3db" translate="yes" xml:space="preserve">
          <source>If you wish, you can manually specify a URL inside of your &lt;code&gt;config/database.yml&lt;/code&gt;</source>
          <target state="translated">必要に応じて、 &lt;code&gt;config/database.yml&lt;/code&gt; 内に手動でURLを指定できます</target>
        </trans-unit>
        <trans-unit id="f69437be8ce715e3ad0ef7043ae0bcb2d318c62e" translate="yes" xml:space="preserve">
          <source>If you would like to only grab a single record per unique value in a certain field, you can use &lt;code&gt;distinct&lt;/code&gt;:</source>
          <target state="translated">特定のフィールドの一意の値ごとに1つのレコードのみを取得する場合は、 &lt;code&gt;distinct&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ed75682776d228d6bff9a8ef48ef887e89b70898" translate="yes" xml:space="preserve">
          <source>If you would like to render a template located outside of the default &lt;code&gt;app/views/mailer_name/&lt;/code&gt; directory, you can apply the &lt;code&gt;prepend_view_path&lt;/code&gt;, like so:</source>
          <target state="translated">デフォルトの &lt;code&gt;app/views/mailer_name/&lt;/code&gt; ディレクトリの外にあるテンプレートをレンダリングしたい場合は、次のように &lt;code&gt;prepend_view_path&lt;/code&gt; を適用できます：</target>
        </trans-unit>
        <trans-unit id="7911382e4c2b67c50379b3d44270b5f5346e6d73" translate="yes" xml:space="preserve">
          <source>If you would like to run migrations only from one engine, you can do it by specifying &lt;code&gt;SCOPE&lt;/code&gt;:</source>
          <target state="translated">1つのエンジンからのみ移行を実行する場合は、 &lt;code&gt;SCOPE&lt;/code&gt; を指定して実行できます。</target>
        </trans-unit>
        <trans-unit id="790b328e640d82b5da7e75fab70c6282096d3a74" translate="yes" xml:space="preserve">
          <source>If you would prefer missing translations to raise an error, you can opt out of span-wrapping behavior globally by setting &lt;code&gt;ActionView::Base.raise_on_missing_translations = true&lt;/code&gt; or individually by passing &lt;code&gt;raise: true&lt;/code&gt; as an option to &lt;code&gt;translate&lt;/code&gt;.</source>
          <target state="translated">エラーを発生させるために翻訳の欠落を好む場合は、 &lt;code&gt;ActionView::Base.raise_on_missing_translations = true&lt;/code&gt; 設定するか、 &lt;code&gt;translate&lt;/code&gt; のオプションとして &lt;code&gt;raise: true&lt;/code&gt; を渡して個別に設定することで、スパンラップ動作をオプトアウトできます。</target>
        </trans-unit>
        <trans-unit id="d9b08445505f4021362fd6c2de4bd7b9f8fc7ae2" translate="yes" xml:space="preserve">
          <source>If you would prefer to have your Rack application receive requests at the root path instead, use &lt;code&gt;mount&lt;/code&gt;:</source>
          <target state="translated">代わりに、Rackアプリケーションがルートパスでリクエストを受信するようにする場合は、 &lt;code&gt;mount&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="85f046f887041093bb4fa70b63dbbb0a559fdea0" translate="yes" xml:space="preserve">
          <source>If you'd like to add an index on the new column, you can do that as well:</source>
          <target state="translated">新しいカラムにインデックスを追加したい場合は、そのようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="7976c8ec3a7be940920ae427bbf8a122fa920741" translate="yes" xml:space="preserve">
          <source>If you'd like to add conditions to your find, you could just specify them in there, just like &lt;code&gt;Client.where(&quot;orders_count = '2'&quot;)&lt;/code&gt;. This will find all clients where the &lt;code&gt;orders_count&lt;/code&gt; field's value is 2.</source>
          <target state="translated">検索に条件を追加する場合は、 &lt;code&gt;Client.where(&quot;orders_count = '2'&quot;)&lt;/code&gt; ように、条件をそこに指定するだけです。これにより、 &lt;code&gt;orders_count&lt;/code&gt; フィールドの値が2 であるすべてのクライアントが検索されます。</target>
        </trans-unit>
        <trans-unit id="d19f1f4f9e797b4b1ec650b6359a17ffa7511296" translate="yes" xml:space="preserve">
          <source>If you'd like to delete several records in bulk, you may use &lt;code&gt;destroy_by&lt;/code&gt; or &lt;code&gt;destroy_all&lt;/code&gt; method:</source>
          <target state="translated">複数のレコードを一括で削除する場合は、 &lt;code&gt;destroy_by&lt;/code&gt; または &lt;code&gt;destroy_all&lt;/code&gt; メソッドを使用できます。</target>
        </trans-unit>
        <trans-unit id="7e981bfaa7de9368100fa34a45a9739141519f9a" translate="yes" xml:space="preserve">
          <source>If you'd like to ensure that communication to your controller is only possible via HTTPS, you should do so by enabling the &lt;code&gt;ActionDispatch::SSL&lt;/code&gt; middleware via &lt;code&gt;config.force_ssl&lt;/code&gt; in your environment configuration.</source>
          <target state="translated">コントローラとの通信をHTTPS経由でのみ可能にする場合は、環境設定で &lt;code&gt;config.force_ssl&lt;/code&gt; を介して &lt;code&gt;ActionDispatch::SSL&lt;/code&gt; ミドルウェアを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="6bfd2699bc66216d017e05cf9ebcf5a5fc2b1215" translate="yes" xml:space="preserve">
          <source>If you'd like to use your own SQL to find records in a table you can use &lt;code&gt;find_by_sql&lt;/code&gt;. The &lt;code&gt;find_by_sql&lt;/code&gt; method will return an array of objects even if the underlying query returns just a single record. For example you could run this query:</source>
          <target state="translated">独自のSQLを使用してテーブル内のレコードを検索する場合は、 &lt;code&gt;find_by_sql&lt;/code&gt; を使用できます。 &lt;code&gt;find_by_sql&lt;/code&gt; 方法はただでさえ単一のレコード基になるクエリが返す場合はオブジェクトの配列を返します。たとえば、次のクエリを実行できます。</target>
        </trans-unit>
        <trans-unit id="d913a8c49bbd0caa0d0558b5ff8d81df0b5195d4" translate="yes" xml:space="preserve">
          <source>If you'd prefer to use numeric prefixes, you can turn timestamped migrations off by setting:</source>
          <target state="translated">数字の接頭辞を使いたい場合は、タイムスタンプによる移行をオフにすることができます。</target>
        </trans-unit>
        <trans-unit id="72e07e42c2f306a8f64c34aec429563c444e6909" translate="yes" xml:space="preserve">
          <source>If you'd rather play around in the console, &lt;code&gt;rails console&lt;/code&gt; will also work just like a Rails application. Remember: the &lt;code&gt;Article&lt;/code&gt; model is namespaced, so to reference it you must call it as &lt;code&gt;Blorgh::Article&lt;/code&gt;.</source>
          <target state="translated">コンソールで遊んでみたい場合は、 &lt;code&gt;rails console&lt;/code&gt; もRailsアプリケーションと同じように機能します。覚えておいてください： &lt;code&gt;Article&lt;/code&gt; モデルは名前空間を持っているので、それを参照するには &lt;code&gt;Blorgh::Article&lt;/code&gt; と呼ぶ必要があります。</target>
        </trans-unit>
        <trans-unit id="6532d9f78f750c236c3b6d83a991d12488056704" translate="yes" xml:space="preserve">
          <source>If you're building a Rails application that will be an API server first and foremost, you can start with a more limited subset of Rails and add in features as needed.</source>
          <target state="translated">まず第一にAPIサーバとなるRailsアプリケーションを構築するのであれば、Railsのより限定されたサブセットから始めて、必要に応じて機能を追加していくことができます。</target>
        </trans-unit>
        <trans-unit id="20e3e39f3273389814db32e9d227bc1663081d89" translate="yes" xml:space="preserve">
          <source>If you're defining additional resource routes with a symbol as the first positional argument, be mindful that it is not equivalent to using a string. Symbols infer controller actions while strings infer paths.</source>
          <target state="translated">シンボルを最初の位置引数として追加のリソースルートを定義している場合は、文字列を使用することと同じではないことに注意してください。シンボルはコントローラのアクションを推察しますが、文字列はパスを推察します。</target>
        </trans-unit>
        <trans-unit id="c858a8636b2b3b43ef9fa37542ac6af20ab4623e" translate="yes" xml:space="preserve">
          <source>If you're familiar with the HTTP protocol, you'll know that &lt;code&gt;get&lt;/code&gt; is a type of request. There are 6 request types supported in Rails functional tests:</source>
          <target state="translated">HTTPプロトコルに精通している場合は、 &lt;code&gt;get&lt;/code&gt; が一種の要求であることがわかります。Railsの機能テストでは、6つのリクエストタイプがサポートされています。</target>
        </trans-unit>
        <trans-unit id="fc8fe2bd82f04d8f34c233a8938cd887f9fe4b73" translate="yes" xml:space="preserve">
          <source>If you're going to need to use any other methods, you should use &lt;code&gt;reversible&lt;/code&gt; or write the &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; methods instead of using the &lt;code&gt;change&lt;/code&gt; method.</source>
          <target state="translated">他のメソッドを使用する必要がある場合は、 &lt;code&gt;change&lt;/code&gt; メソッドを使用する代わりに、 &lt;code&gt;reversible&lt;/code&gt; を使用するか、 &lt;code&gt;up&lt;/code&gt; メソッドと &lt;code&gt;down&lt;/code&gt; メソッドを記述してください。</target>
        </trans-unit>
        <trans-unit id="2da9f66c4acf50bc0a779c72300d200c3b9cb2d7" translate="yes" xml:space="preserve">
          <source>If you're going to pass the parameters to an &lt;code&gt;ActiveModel&lt;/code&gt; object (such as &lt;code&gt;User.new(params[:user])&lt;/code&gt;), you might consider passing the model class to the method instead. The &lt;code&gt;ParamsWrapper&lt;/code&gt; will actually try to determine the list of attribute names from the model and only wrap those attributes:</source>
          <target state="translated">パラメーターを &lt;code&gt;ActiveModel&lt;/code&gt; オブジェクト（ &lt;code&gt;User.new(params[:user])&lt;/code&gt; ）に渡す場合は、代わりにモデルクラスをメソッドに渡すことを検討してください。 &lt;code&gt;ParamsWrapper&lt;/code&gt; は実際にモデルから属性名のリストを決定し、属性のみをラップしようとします。</target>
        </trans-unit>
        <trans-unit id="096ce5069eb7339a39375acb03a52843c4f452e9" translate="yes" xml:space="preserve">
          <source>If you're not going to be using any of the options like collections or layouts, you can also use the short-hand defaults of render to render partials. Examples:</source>
          <target state="translated">コレクションやレイアウトなどのオプションを使用しない場合は、partials をレンダリングするために render の短いデフォルト値を使用することもできます。例を挙げてみましょう。</target>
        </trans-unit>
        <trans-unit id="c1428a86731299c6d458cfab5f49fba8d9a54cee" translate="yes" xml:space="preserve">
          <source>If you're on MySQL, then do not use Data Definition Language (DDL) operations in nested transactions blocks that are emulated with savepoints. That is, do not execute statements like 'CREATE TABLE' inside such blocks. This is because MySQL automatically releases all savepoints upon executing a DDL operation. When &lt;code&gt;transaction&lt;/code&gt; is finished and tries to release the savepoint it created earlier, a database error will occur because the savepoint has already been automatically released. The following example demonstrates the problem:</source>
          <target state="translated">MySQLを使用している場合は、セーブポイントでエミュレートされるネストされたトランザクションブロックでデータ定義言語（DDL）操作を使用しないでください。つまり、そのようなブロック内で「CREATE TABLE」のようなステートメントを実行しないでください。これは、DDL操作の実行時にMySQLがすべてのセーブポイントを自動的に解放するためです。ときに &lt;code&gt;transaction&lt;/code&gt; 終了し、それ以前に作成したセーブポイントを解放しようとしているセーブポイントがすでに自動的に解除されているため、データベース・エラーが発生します。次の例は、問題を示しています。</target>
        </trans-unit>
        <trans-unit id="e401cde5d947378c5cb2630d5792af35e1cd426a" translate="yes" xml:space="preserve">
          <source>If you're precompiling your assets (see &lt;a href=&quot;#in-production&quot;&gt;In Production&lt;/a&gt; below), linking to an asset that does not exist will raise an exception in the calling page. This includes linking to a blank string. As such, be careful using &lt;code&gt;image_tag&lt;/code&gt; and the other helpers with user-supplied data.</source>
          <target state="translated">アセットをプリコンパイルしている場合（下記の&lt;a href=&quot;#in-production&quot;&gt;「本番環境」を&lt;/a&gt;参照）、存在しないアセットにリンクすると、呼び出しページで例外が発生します。これには、空の文字列へのリンクが含まれます。そのため、ユーザー指定のデータで &lt;code&gt;image_tag&lt;/code&gt; や他のヘルパーを使用する場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="3df341ac8f262d7b86a6c04ae7e8cea08aa1a2e1" translate="yes" xml:space="preserve">
          <source>If you're running multiple Ruby on Rails server processes (which is the case if you're using Phusion Passenger or puma clustered mode), then your Rails server process instances won't be able to share cache data with each other. This cache store is not appropriate for large application deployments. However, it can work well for small, low traffic sites with only a couple of server processes, as well as development and test environments.</source>
          <target state="translated">複数のRuby on Railsサーバプロセスを実行している場合(Phusion Passengerやpumaクラスター化モードを使用している場合がこれにあたります)、Railsサーバプロセスインスタンスはキャッシュデータを相互に共有できません。このキャッシュストアは大規模なアプリケーションのデプロイメントには適していません。しかし、数個のサーバープロセスしかない小規模でトラフィックの少ないサイトや、開発環境やテスト環境ではうまく機能します。</target>
        </trans-unit>
        <trans-unit id="9b7c79524790e17cbf7db1c67efd468a1423d66e" translate="yes" xml:space="preserve">
          <source>If you're used to using raw SQL to find database records, then you will generally find that there are better ways to carry out the same operations in Rails. Active Record insulates you from the need to use SQL in most cases.</source>
          <target state="translated">データベースのレコードを見つけるために生のSQLを使うことに慣れている場合、一般的にはRailsで同じ操作を行うためのより良い方法があることに気づくでしょう。Active Recordを使えば、ほとんどの場合、SQLを使う必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="cf43b2e21b48384c946daf0f74a4a7b9ec9b126b" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;schema_search_path&lt;/code&gt; or other PostgreSQL extensions, you can control how the schema is dumped. Set to &lt;code&gt;:all&lt;/code&gt; to generate all dumps, or to &lt;code&gt;:schema_search_path&lt;/code&gt; to generate from schema search path.</source>
          <target state="translated">&lt;code&gt;schema_search_path&lt;/code&gt; または他のPostgreSQL拡張機能を使用している場合は、スキーマのダンプ方法を制御できます。すべてのダンプを生成するには &lt;code&gt;:all&lt;/code&gt; に設定し、スキーマ検索パスから生成するには &lt;code&gt;:schema_search_path&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="d229ea54e3d521db7d13293be710b7f3c3f89865" translate="yes" xml:space="preserve">
          <source>If you're using Windows Subsystem for Linux then there are currently some limitations on file system notifications that mean you should disable the &lt;code&gt;spring&lt;/code&gt; and &lt;code&gt;listen&lt;/code&gt; gems which you can do by running &lt;code&gt;rails new blog --skip-spring --skip-listen&lt;/code&gt;.</source>
          <target state="translated">あなたがLinux用のWindowsサブシステムを使用している場合、あなたは無効にする必要があり意味ファイルシステムの通知にはいくつかの制限現在ある &lt;code&gt;spring&lt;/code&gt; と &lt;code&gt;listen&lt;/code&gt; 、あなたが実行することによって行うことができます宝石 &lt;code&gt;rails new blog --skip-spring --skip-listen&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="252ef08bae0df050b53b6a5779527ac92970980d" translate="yes" xml:space="preserve">
          <source>If you're using named routes, they can be easily tested using the original named routes' methods straight in the test case.</source>
          <target state="translated">名前付きルートを使用している場合は、テストケースで元の名前付きルートのメソッドをストレートに使用して簡単にテストすることができます。</target>
        </trans-unit>
        <trans-unit id="cf468826e965e22f66613dde40512c32eb5d1476" translate="yes" xml:space="preserve">
          <source>If you're using password input fields (for any purpose), you might want to configure your application to prevent those parameters from being logged. You can learn about this in the &lt;a href=&quot;security#logging&quot;&gt;Securing Rails Applications&lt;/a&gt; guide.</source>
          <target state="translated">（任意の目的で）パスワード入力フィールドを使用している場合、これらのパラメーターがログに記録されないようにアプリケーションを構成することができます。これについては、&lt;a href=&quot;security#logging&quot;&gt;Railsアプリケーション&lt;/a&gt;の保護ガイドをご覧ください。</target>
        </trans-unit>
        <trans-unit id="6052169eaf1bc86bbca65ea47bc1eb643397b147" translate="yes" xml:space="preserve">
          <source>If you're writing a library or component that will invoke application code, you should wrap it with a call to the executor:</source>
          <target state="translated">アプリケーションコードを呼び出すライブラリやコンポーネントを書いている場合は、それを実行者への呼び出しでラップする必要があります。</target>
        </trans-unit>
        <trans-unit id="43117e0ed8eb687cc272466c40042620d7fe982e" translate="yes" xml:space="preserve">
          <source>If you're writing a web service application, you might find yourself more comfortable accepting parameters in JSON format. If the &quot;Content-Type&quot; header of your request is set to &quot;application/json&quot;, Rails will automatically load your parameters into the &lt;code&gt;params&lt;/code&gt; hash, which you can access as you would normally.</source>
          <target state="translated">Webサービスアプリケーションを作成している場合は、JSON形式のパラメーターを受け入れる方が快適な場合があります。リクエストの「Content-Type」ヘッダーが「application / json」に設定されている場合、Railsは自動的にパラメーターを &lt;code&gt;params&lt;/code&gt; ハッシュにロードします。これは、通常どおりアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1d4d5f61b556e519c6e1e2356999ce42a7ddf62c" translate="yes" xml:space="preserve">
          <source>If you've set specific values, they'll be left alone.</source>
          <target state="translated">特定の値を設定していれば、そのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="74869c5690f1f8df683db24bb30ead644f992f32" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;active_record_querying#applying-a-default-scope&quot;&gt;default scope&lt;/a&gt; contains an order method, &lt;code&gt;first&lt;/code&gt; will return the first record according to this ordering.</source>
          <target state="translated">&lt;a href=&quot;active_record_querying#applying-a-default-scope&quot;&gt;デフォルトのスコープ&lt;/a&gt;にorderメソッドが含まれている場合、 &lt;code&gt;first&lt;/code&gt; はこの順序に従って最初のレコードを返します。</target>
        </trans-unit>
        <trans-unit id="6835afd1c650ba01f41e5d358bf7f0e864950743" translate="yes" xml:space="preserve">
          <source>If your &lt;a href=&quot;active_record_querying#applying-a-default-scope&quot;&gt;default scope&lt;/a&gt; contains an order method, &lt;code&gt;last&lt;/code&gt; will return the last record according to this ordering.</source>
          <target state="translated">&lt;a href=&quot;active_record_querying#applying-a-default-scope&quot;&gt;デフォルトのスコープ&lt;/a&gt;にorderメソッドが含まれている場合、 &lt;code&gt;last&lt;/code&gt; はこの順序に従って最後のレコードを返します。</target>
        </trans-unit>
        <trans-unit id="1caa7aca1cdb0d5b52aac0863cedc2558d775ff6" translate="yes" xml:space="preserve">
          <source>If your Capybara configuration requires more setup than provided by Rails, this additional configuration could be added into the &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file.</source>
          <target state="translated">Capybara構成でRailsが提供するよりも多くのセットアップが必要な場合は、この追加構成を &lt;code&gt;application_system_test_case.rb&lt;/code&gt; ファイルに追加できます。</target>
        </trans-unit>
        <trans-unit id="5682ba1adb63dcd899a9ab63cfa20e123e47b8a7" translate="yes" xml:space="preserve">
          <source>If your JSON is being used downstream for insertion into the DOM, be aware of whether or not it is being inserted via +html()+. Most jQuery plugins do this. If that is the case, be sure to &lt;code&gt;html_escape&lt;/code&gt; or &lt;code&gt;sanitize&lt;/code&gt; any user-generated content returned by your JSON.</source>
          <target state="translated">JSONがダウンストリームでDOMへの挿入に使用されている場合は、+ html（）+を介して挿入されているかどうかに注意してください。ほとんどのjQueryプラグインがこれを行います。その場合は、必ず &lt;code&gt;html_escape&lt;/code&gt; または &lt;code&gt;sanitize&lt;/code&gt; あなたのJSONで返されるすべてのユーザー生成コンテンツを。</target>
        </trans-unit>
        <trans-unit id="f7fefdf5de1dd35d237a9b1901e9afd42363fae3" translate="yes" xml:space="preserve">
          <source>If your MySQL version is 5.5 or 5.6 and want to use the &lt;code&gt;utf8mb4&lt;/code&gt; character set by default, please configure your MySQL server to support the longer key prefix by enabling &lt;code&gt;innodb_large_prefix&lt;/code&gt; system variable.</source>
          <target state="translated">MySQLのバージョンが5.5または5.6で、デフォルトで &lt;code&gt;utf8mb4&lt;/code&gt; 文字セットを使用する場合は、 &lt;code&gt;innodb_large_prefix&lt;/code&gt; システム変数を有効にして、より長いキープレフィックスをサポートするようにMySQLサーバーを構成してください。</target>
        </trans-unit>
        <trans-unit id="2ec6ed42547439a0457afd0ebebe94c88bd5fa87" translate="yes" xml:space="preserve">
          <source>If your application currently depends on MultiJSON directly, you have a few options:</source>
          <target state="translated">現在アプリケーションがMultiJSONに直接依存している場合、いくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="ad0d95ee276b14edf1a42c9fa291547930f26681" translate="yes" xml:space="preserve">
          <source>If your application depends on one of these features, you can get them back by adding the &lt;a href=&quot;https://github.com/rails/activesupport-json_encoder&quot;&gt;&lt;code&gt;activesupport-json_encoder&lt;/code&gt;&lt;/a&gt; gem to your &lt;code&gt;Gemfile&lt;/code&gt;.</source>
          <target state="translated">アプリケーションがこれらの機能の1に依存している場合は、追加することによって、それらを取り戻すことができ&lt;a href=&quot;https://github.com/rails/activesupport-json_encoder&quot;&gt; &lt;code&gt;activesupport-json_encoder&lt;/code&gt; &lt;/a&gt;あなたに宝石を &lt;code&gt;Gemfile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="381e5230923304164bbcf6cb5cafb16c7ce7b7f7" translate="yes" xml:space="preserve">
          <source>If your application has STIs, please check their section in the guide &lt;a href=&quot;autoloading_and_reloading_constants#single-table-inheritance&quot;&gt;Autoloading and Reloading Constants (Zeitwerk Mode)&lt;/a&gt;.</source>
          <target state="translated">アプリケーションにSTIがある場合は、ガイド「&lt;a href=&quot;autoloading_and_reloading_constants#single-table-inheritance&quot;&gt;定数の自動読み込みと再読み込み（Zeitwerkモード）」の&lt;/a&gt;セクションを確認してください。</target>
        </trans-unit>
        <trans-unit id="8dbc5db49e45fcf4e2303c426327e0441f8dcc0b" translate="yes" xml:space="preserve">
          <source>If your application has complex routes, Rails provides a number of useful helpers to test them.</source>
          <target state="translated">アプリケーションに複雑なルートがある場合、Railsにはそれらをテストするための便利なヘルパーが多数用意されています。</target>
        </trans-unit>
        <trans-unit id="e74a56a0c5eeea301a713680cbfd78e970264146" translate="yes" xml:space="preserve">
          <source>If your application has many RESTful routes, using &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; to generate only the routes that you actually need can cut down on memory use and speed up the routing process.</source>
          <target state="translated">アプリケーションに多くのRESTfulルートがある場合、 &lt;code&gt;:only&lt;/code&gt; と &lt;code&gt;:except&lt;/code&gt; を使用して実際に必要なルートのみを生成すると、メモリ使用量を削減し、ルーティングプロセスを高速化できます。</target>
        </trans-unit>
        <trans-unit id="41f0014e907848cfdeccd3b999808ddc2e11c394" translate="yes" xml:space="preserve">
          <source>If your application has to execute commands in the underlying operating system, there are several methods in Ruby: exec(command), syscall(command), system(command) and &lt;code&gt;command&lt;/code&gt;. You will have to be especially careful with these functions if the user may enter the whole command, or a part of it. This is because in most shells, you can execute another command at the end of the first one, concatenating them with a semicolon (;) or a vertical bar (|).</source>
          <target state="translated">アプリケーションが基盤となるオペレーティングシステムでコマンドを実行する必要がある場合、Rubyにはexec（command）、syscall（command）、system（command）および &lt;code&gt;command&lt;/code&gt; のいくつかのメソッドがあります。ユーザーがコマンド全体またはその一部を入力する可能性がある場合は、これらの機能に特に注意する必要があります。これは、ほとんどのシェルで、最初のコマンドの最後に別のコマンドを実行し、それらをセミコロン（;）または垂直バー（|）で連結できるためです。</target>
        </trans-unit>
        <trans-unit id="889c5891aad30eb8db5021e9ab63293d15ccf22f" translate="yes" xml:space="preserve">
          <source>If your application includes a locale switching menu, you would then have something like this in it:</source>
          <target state="translated">アプリケーションにロケール切り替えメニューが含まれている場合は、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2fc86689b27dc32bd92136eda6001352ad0921b2" translate="yes" xml:space="preserve">
          <source>If your application is currently on any version of Rails older than 3.0.x, you should upgrade to Rails 3.0 before attempting an update to Rails 3.1.</source>
          <target state="translated">アプリケーションが現在3.0.xよりも古いバージョンのRailsを使用している場合は、Rails 3.1へのアップデートを試みる前にRails 3.0にアップグレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="12223a67df42527d2cbff3ea72dd72f11fc7181b" translate="yes" xml:space="preserve">
          <source>If your application is currently on any version of Rails older than 3.1.x, you should upgrade to Rails 3.1 before attempting an update to Rails 3.2.</source>
          <target state="translated">アプリケーションが現在3.1.xよりも古いバージョンのRailsを使用している場合は、Rails 3.2へのアップデートを試みる前にRails 3.1にアップグレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="cf06afce41a26745cb148a584af6c8c383ba496b" translate="yes" xml:space="preserve">
          <source>If your application is currently on any version of Rails older than 3.2.x, you should upgrade to Rails 3.2 before attempting one to Rails 4.0.</source>
          <target state="translated">お使いのアプリケーションが現在3.2.xよりも古いバージョンのRailsを使用している場合は、Rails 4.0へのアップグレードを試みる前にRails 3.2にアップグレードする必要があります。</target>
        </trans-unit>
        <trans-unit id="c90ef0b46bf42ed5bf642ff84f742f3bf3110011" translate="yes" xml:space="preserve">
          <source>If your application is deadlocking and you think the Load Interlock may be involved, you can temporarily add the ActionDispatch::DebugLocks middleware to &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">アプリケーションがデッドロックしていて、ロードインターロックが関係していると思われる場合は、ActionDispatch :: DebugLocksミドルウェアを &lt;code&gt;config/application.rb&lt;/code&gt; に一時的に追加できます。</target>
        </trans-unit>
        <trans-unit id="cc2f17257706e28458d22e8b6cad9d03d6bad0a4" translate="yes" xml:space="preserve">
          <source>If your application is using an &quot;/assets&quot; route for a resource you may want to change the prefix used for assets to avoid conflicts:</source>
          <target state="translated">アプリケーションがリソースに対して「/assets」ルートを使用している場合、競合を避けるためにアセットに使用するプレフィックスを変更したいかもしれません。</target>
        </trans-unit>
        <trans-unit id="e05fa3e91e37b6cf6fa12bc4e688c1e6edaef466" translate="yes" xml:space="preserve">
          <source>If your application lived at &lt;code&gt;https://example.com&lt;/code&gt;, you would specify the fully-qualified URL &lt;code&gt;https://example.com/rails/action_mailbox/mailgun/inbound_emails/mime&lt;/code&gt;.</source>
          <target state="translated">アプリケーションが &lt;code&gt;https://example.com&lt;/code&gt; にある場合は、完全修飾URL &lt;code&gt;https://example.com/rails/action_mailbox/mailgun/inbound_emails/mime&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="7e4bd7dc0f0e490c584ba6f39585e2d67413ee59" translate="yes" xml:space="preserve">
          <source>If your application lives at &lt;code&gt;https://example.com&lt;/code&gt;, you would configure the Postfix SMTP server to pipe inbound emails to the following command:</source>
          <target state="translated">アプリケーションが &lt;code&gt;https://example.com&lt;/code&gt; にある場合は、受信メールを次のコマンドにパイプするようにPostfix SMTPサーバーを設定します。</target>
        </trans-unit>
        <trans-unit id="daa1c9e216c9d8d165b0c33678ea2b6e0ff6a8b7" translate="yes" xml:space="preserve">
          <source>If your application needs to use the old sanitizer implementation, include &lt;code&gt;rails-deprecated_sanitizer&lt;/code&gt; in your &lt;code&gt;Gemfile&lt;/code&gt;:</source>
          <target state="translated">アプリケーションで古いサニタイザー実装を使用する必要がある場合は、 &lt;code&gt;Gemfile&lt;/code&gt; に &lt;code&gt;rails-deprecated_sanitizer&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="1030747ba04510c35d637b99ad76753d7203e5a7" translate="yes" xml:space="preserve">
          <source>If your application stores nested configuration in &lt;code&gt;config/secrets.yml&lt;/code&gt;, all keys are now loaded as symbols, so access using strings should be changed.</source>
          <target state="translated">アプリケーションがネストされた設定を &lt;code&gt;config/secrets.yml&lt;/code&gt; に保存している場合、すべてのキーがシンボルとして読み込まれるため、文字列を使用したアクセスを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="b8139193fb989ae2ed172e3931f636d721facb2c" translate="yes" xml:space="preserve">
          <source>If your application uses the top-level &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; class, you should slowly move your code to instead use &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt;.</source>
          <target state="translated">アプリケーションが最上位の &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; クラスを使用する場合は、コードをゆっくりと移動して、代わりに &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; 使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="91af82fb39f605eb090b15525e992995690b6439" translate="yes" xml:space="preserve">
          <source>If your application was not updated to Rails 5.2 defaults, the secret_key_base will be found in the old &lt;code&gt;config/secrets.yml&lt;/code&gt; file.</source>
          <target state="translated">アプリケーションがRails 5.2のデフォルトに更新されていない場合、secret_key_baseは古い &lt;code&gt;config/secrets.yml&lt;/code&gt; ファイルにあります。</target>
        </trans-unit>
        <trans-unit id="ac9b2e447adcea9fbe7e2a9bd3bc168e61c635fb" translate="yes" xml:space="preserve">
          <source>If your application's secrets may have been exposed, strongly consider changing them. Changing &lt;code&gt;secret_key_base&lt;/code&gt; will expire currently active sessions.</source>
          <target state="translated">アプリケーションのシークレットが公開されている可能性がある場合は、それらを変更することを強く検討してください。 &lt;code&gt;secret_key_base&lt;/code&gt; を変更すると、現在アクティブなセッションが期限切れになります。</target>
        </trans-unit>
        <trans-unit id="fe0a57381eea06e446a567dd408bdc093cbdd1ce" translate="yes" xml:space="preserve">
          <source>If your cache is on a shared infrastructure, you can define a namespace for your cache entries. If a namespace is defined, it will be prefixed on to every key. The namespace can be either a static value or a Proc. If it is a Proc, it will be invoked when each key is evaluated so that you can use application logic to invalidate keys.</source>
          <target state="translated">キャッシュが共有インフラ上にある場合、キャッシュエントリの名前空間を定義することができます。名前空間が定義されている場合、それはすべてのキーの前にプレフィックスとして付けられます。名前空間は静的な値か Proc のどちらかになります。 Proc の場合は、各キーが評価された時に呼び出されるので、アプリケーションロジックを使用してキーを無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="15ac4c43c45266924507181e8d1c66138e18a9e8" translate="yes" xml:space="preserve">
          <source>If your collection cache depends on multiple sources (try to avoid this to keep things simple), you can name all these dependencies as part of a block that returns an array:</source>
          <target state="translated">コレクションキャッシュが複数のソースに依存している場合 (シンプルにするためにこれを避けるようにしましょう)、これらの依存関係をすべて配列を返すブロックの一部として名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="7b951b1cd4019d75cd33aff42a1e533f21ba16a6" translate="yes" xml:space="preserve">
          <source>If your controller has defined &lt;code&gt;@person&lt;/code&gt; and that person's city_id is 2:</source>
          <target state="translated">お使いのコントローラが定義されている場合は &lt;code&gt;@person&lt;/code&gt; とその人のCITY_IDは2：</target>
        </trans-unit>
        <trans-unit id="0aecaded96b353fb5bd5f694e20b8584a9b1d3a5" translate="yes" xml:space="preserve">
          <source>If your database supports setting the isolation level for a transaction, you can set it like so:</source>
          <target state="translated">データベースがトランザクションの分離レベルの設定をサポートしている場合は、以下のように設定できます。</target>
        </trans-unit>
        <trans-unit id="103ba4b31df0da57a8ec66f6aa656e1b132fd216" translate="yes" xml:space="preserve">
          <source>If your development database has a root user with an empty password, this configuration should work for you. Otherwise, change the username and password in the &lt;code&gt;development&lt;/code&gt; section as appropriate.</source>
          <target state="translated">開発データベースに空のパスワードを持つrootユーザーがいる場合、この構成でうまくいくはずです。それ以外の場合は、必要に応じて &lt;code&gt;development&lt;/code&gt; セクションでユーザー名とパスワードを変更します。</target>
        </trans-unit>
        <trans-unit id="0c10c4f115be70f11c744ae41c96edb7a7107b4c" translate="yes" xml:space="preserve">
          <source>If your engine has migrations, you may also want to prepare data for the database in the &lt;code&gt;db/seeds.rb&lt;/code&gt; file. You can load that data using the &lt;code&gt;load_seed&lt;/code&gt; method, e.g.</source>
          <target state="translated">エンジンにマイグレーションがある場合は、 &lt;code&gt;db/seeds.rb&lt;/code&gt; ファイルでデータベースのデータを準備することもできます。 &lt;code&gt;load_seed&lt;/code&gt; メソッドを使用してそのデータをロードできます。例えば、</target>
        </trans-unit>
        <trans-unit id="425cd983d81b837debf97e01070fc8dd942a349a" translate="yes" xml:space="preserve">
          <source>If your front-end server supports accelerated file sending, &lt;code&gt;Rack::Sendfile&lt;/code&gt; will offload the actual file sending work to the front-end server.</source>
          <target state="translated">フロントエンドサーバーが高速ファイル送信をサポートしている場合、 &lt;code&gt;Rack::Sendfile&lt;/code&gt; は実際のファイル送信作業をフロントエンドサーバーにオフロードします。</target>
        </trans-unit>
        <trans-unit id="bd8111e3c285dfb7987c6fb762023306b9a5dc95" translate="yes" xml:space="preserve">
          <source>If your migration is irreversible, you should raise &lt;code&gt;ActiveRecord::IrreversibleMigration&lt;/code&gt; from your &lt;code&gt;down&lt;/code&gt; method. If someone tries to revert your migration, an error message will be displayed saying that it can't be done.</source>
          <target state="translated">移行が元に戻せない場合は、 &lt;code&gt;down&lt;/code&gt; メソッドから &lt;code&gt;ActiveRecord::IrreversibleMigration&lt;/code&gt; を発生させる必要があります。誰かが移行を元に戻そうとすると、実行できないことを示すエラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="b8c3382db198a7dd11c8954262ef38078bc5ca90" translate="yes" xml:space="preserve">
          <source>If your model does not act like an Active Model object, then you should define &lt;code&gt;:to_model&lt;/code&gt; yourself returning a proxy object that wraps your object with Active Model compliant methods.</source>
          <target state="translated">モデルがアクティブモデルオブジェクトのように機能しない場合は、 &lt;code&gt;:to_model&lt;/code&gt; を自分で定義して、オブジェクトをアクティブモデル準拠のメソッドでラップするプロキシオブジェクトを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="76baa030465bac752869f817cdc6077b5aeb38ed" translate="yes" xml:space="preserve">
          <source>If your object is already designed to implement all of the Active Model you can use the default &lt;code&gt;:to_model&lt;/code&gt; implementation, which simply returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">オブジェクトがすでにすべてのアクティブモデルを実装するように設計されている場合は、デフォルトの &lt;code&gt;:to_model&lt;/code&gt; 実装を使用できます。これは単に &lt;code&gt;self&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="05b58e6bdf018a796fd3192e810a7a0d52af9a3b" translate="yes" xml:space="preserve">
          <source>If your railtie has Rake tasks, you can tell Rails to load them through the method &lt;code&gt;rake_tasks&lt;/code&gt;:</source>
          <target state="translated">RailtieにRakeタスクがある場合、メソッド &lt;code&gt;rake_tasks&lt;/code&gt; を介してそれらをロードするようにRailsに指示できます。</target>
        </trans-unit>
        <trans-unit id="87a60c820f332d2130d62bec29e48f80d0781651" translate="yes" xml:space="preserve">
          <source>If your resource has associations defined, for example, you want to add comments to the document given that the routes are set correctly:</source>
          <target state="translated">リソースに関連付けが定義されている場合、例えば、ルートが正しく設定されていることを考慮してドキュメントにコメントを追加したいとします。</target>
        </trans-unit>
        <trans-unit id="6fe760c48d59a5abc10b50357644a1cefa1de69d" translate="yes" xml:space="preserve">
          <source>If your route needs to respond to more than one HTTP method (or all methods) then using the &lt;code&gt;:via&lt;/code&gt; option on &lt;code&gt;match&lt;/code&gt; is preferable.</source>
          <target state="translated">ルートが複数のHTTPメソッド（またはすべてのメソッド）に応答する必要がある場合は、 &lt;code&gt;match&lt;/code&gt; &lt;code&gt;:via&lt;/code&gt; オプションを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="14e98748b230ce1d3b61f7ea63fc8bfa9d1c5edb" translate="yes" xml:space="preserve">
          <source>If your system tests verify the deletion of a model with attachments and you're using Active Job, set your test environment to use the inline queue adapter so the purge job is executed immediately rather at an unknown time in the future.</source>
          <target state="translated">システムテストで添付ファイルのあるモデルの削除を検証し、Active Jobを使用している場合は、パージジョブが将来の未知の時間ではなくすぐに実行されるように、インラインキューアダプタを使用するようにテスト環境を設定してください。</target>
        </trans-unit>
        <trans-unit id="6bedd4e4c87ec197ef48f07fe917c09d9e5f5451" translate="yes" xml:space="preserve">
          <source>If your table/model specifies any of Active Record's standard timestamp columns (&lt;code&gt;created_at&lt;/code&gt;, &lt;code&gt;created_on&lt;/code&gt;, &lt;code&gt;updated_at&lt;/code&gt;, &lt;code&gt;updated_on&lt;/code&gt;), they will automatically be set to &lt;code&gt;Time.now&lt;/code&gt;.</source>
          <target state="translated">テーブル/モデルでアクティブレコードの標準タイムスタンプ列（ &lt;code&gt;created_at&lt;/code&gt; 、 &lt;code&gt;created_on&lt;/code&gt; 、 &lt;code&gt;updated_at&lt;/code&gt; 、 &lt;code&gt;updated_on&lt;/code&gt; ）のいずれかが指定されている場合、それらは自動的に &lt;code&gt;Time.now&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="582795cbf5201022212575a8a28b6d7709781eb4" translate="yes" xml:space="preserve">
          <source>If your template cache depends on multiple sources (try to avoid this to keep things simple), you can name all these dependencies as part of an array:</source>
          <target state="translated">テンプレートキャッシュが複数のソースに依存している場合 (シンプルにするためにこれを避けるようにしましょう)、これらの依存関係をすべて配列の一部として名前を付けることができます。</target>
        </trans-unit>
        <trans-unit id="40543e76d91d611a5ec9410b5887ffa0387c4560" translate="yes" xml:space="preserve">
          <source>If your test helper contains a call to &lt;code&gt;ActiveRecord::Migration.check_pending!&lt;/code&gt; this can be removed. The check is now done automatically when you &lt;code&gt;require 'rails/test_help'&lt;/code&gt;, although leaving this line in your helper is not harmful in any way.</source>
          <target state="translated">テストヘルパーに &lt;code&gt;ActiveRecord::Migration.check_pending!&lt;/code&gt; 呼び出しが含まれている場合！これは削除できます。このチェックは &lt;code&gt;require 'rails/test_help'&lt;/code&gt; が必要なときに自動的に行われるようになりましたが、この行をヘルパーに残しても害はありません。</target>
        </trans-unit>
        <trans-unit id="5aa870b38e91039a2c31c0ec518113cbf1f31ce8" translate="yes" xml:space="preserve">
          <source>If your translations are stored in YAML files, certain keys must be escaped. They are:</source>
          <target state="translated">翻訳がYAMLファイルに保存されている場合、特定のキーはエスケープされなければなりません。それは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="1185f54ced928c01b83f233ae5ac48bd71437bbc" translate="yes" xml:space="preserve">
          <source>If your user sessions don't store critical data or don't need to be around for long periods (for instance if you just use the flash for messaging), you can consider using &lt;code&gt;ActionDispatch::Session::CacheStore&lt;/code&gt;. This will store sessions using the cache implementation you have configured for your application. The advantage of this is that you can use your existing cache infrastructure for storing sessions without requiring any additional setup or administration. The downside, of course, is that the sessions will be ephemeral and could disappear at any time.</source>
          <target state="translated">ユーザーセッションに重要なデータが保存されていない場合、または長期にわたって存在する必要がない場合（たとえば、メッセージングにフラッシュを使用するだけの場合）、 &lt;code&gt;ActionDispatch::Session::CacheStore&lt;/code&gt; 使用を検討できます。これは、アプリケーション用に構成したキャッシュ実装を使用してセッションを格納します。これの利点は、追加の設定や管理を必要とせずに、セッションを格納するために既存のキャッシュインフラストラクチャを使用できることです。もちろん、欠点は、セッションが一時的なものになり、いつでも消えてしまう可能性があることです。</target>
        </trans-unit>
        <trans-unit id="c10b3295ac930c8b6d0186ae1b2fa25dca24d2a2" translate="yes" xml:space="preserve">
          <source>If your validator is complex enough that you want instance variables, you can easily use a plain old Ruby object instead:</source>
          <target state="translated">インスタンス変数が必要なほどバリデータが複雑な場合は、代わりに古いRubyオブジェクトを使うこともできます。</target>
        </trans-unit>
        <trans-unit id="afcb932a25203f1fddef75a94720d32694cde47f" translate="yes" xml:space="preserve">
          <source>If your web application is RESTful, you might be used to additional HTTP verbs, such as PATCH, PUT, or DELETE. Some legacy web browsers, however, do not support them - only GET and POST. Rails uses a hidden &lt;code&gt;_method&lt;/code&gt; field to handle these cases.</source>
          <target state="translated">WebアプリケーションがRESTfulである場合、PATCH、PUT、DELETEなどの追加のHTTP動詞に慣れている可能性があります。ただし、一部のレガシーWebブラウザーはそれらをサポートせず、GETとPOSTのみをサポートします。Railsはこれらのケースを処理するために隠し &lt;code&gt;_method&lt;/code&gt; フィールドを使用します。</target>
        </trans-unit>
        <trans-unit id="18ed34d58a9a3df6e8627865711db726b025acd9" translate="yes" xml:space="preserve">
          <source>If, in the case of this &lt;code&gt;includes&lt;/code&gt; query, there were no comments for any articles, all the articles would still be loaded. By using &lt;code&gt;joins&lt;/code&gt; (an INNER JOIN), the join conditions &lt;strong&gt;must&lt;/strong&gt; match, otherwise no records will be returned.</source>
          <target state="translated">この &lt;code&gt;includes&lt;/code&gt; クエリの場合、どの記事にもコメントがない場合でも、すべての記事が読み込まれます。使用して &lt;code&gt;joins&lt;/code&gt; （INNER JOINを）、条件が加入&lt;strong&gt;しなければならない&lt;/strong&gt;そうでなければ、レコードが返されません、一致します。</target>
        </trans-unit>
        <trans-unit id="00fef5983e69c04936b5e027592d449f0c9aa803" translate="yes" xml:space="preserve">
          <source>Image blobs can have variants that are the result of a set of transformations applied to the original. These variants are used to create thumbnails, fixed-size avatars, or any other derivative image from the original.</source>
          <target state="translated">イメージブロブは、オリジナルに適用された一連の変換の結果であるバリアントを持つことができます。これらのバリアントは、サムネイルや固定サイズのアバターなど、元の画像から派生した画像を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c26464afe4467cfea083f888c397ad9db64fe0da" translate="yes" xml:space="preserve">
          <source>ImageMagick reference</source>
          <target state="translated">イメージマジックのリファレンス</target>
        </trans-unit>
        <trans-unit id="6b547bf4fc75d103729ab2f9120fc708162824e6" translate="yes" xml:space="preserve">
          <source>ImageProcessing::MiniMagick</source>
          <target state="translated">ImageProcessing::MiniMagick</target>
        </trans-unit>
        <trans-unit id="bb1869013b3837865b83b826ba6cbc2f0478b949" translate="yes" xml:space="preserve">
          <source>ImageProcessing::Vips</source>
          <target state="translated">ImageProcessing::Vips</target>
        </trans-unit>
        <trans-unit id="e59410c44344783744ca127bd399b00f6c4b26d8" translate="yes" xml:space="preserve">
          <source>Images can also be organized into subdirectories if required, and then can be accessed by specifying the directory's name in the tag:</source>
          <target state="translated">必要に応じて画像をサブディレクトリに整理し、タグにディレクトリ名を指定してアクセスすることもできます。</target>
        </trans-unit>
        <trans-unit id="042a141a97424ca18ce357d660b1f19cd18e6379" translate="yes" xml:space="preserve">
          <source>Imagine a restricted list deletes &quot;script&quot; from the user input. Now the attacker injects &quot;&amp;lt;scrscriptipt&amp;gt;&quot;, and after the filter, &quot;&amp;lt;script&amp;gt;&quot; remains. Earlier versions of Rails used a restricted list approach for the strip_tags(), strip_links() and sanitize() method. So this kind of injection was possible:</source>
          <target state="translated">制限付きリストがユーザー入力から「スクリプト」を削除するとします。これで攻撃者は「&amp;lt;scrscriptipt&amp;gt;」を挿入し、フィルタの後に「&amp;lt;script&amp;gt;」が残ります。Railsの以前のバージョンでは、strip_tags（）、strip_links（）およびsanitize（）メソッドに制限付きリストアプローチを使用していました。したがって、この種の注入は可能でした：</target>
        </trans-unit>
        <trans-unit id="8b880b948b508d4c09c27dafc56f6c45e159ad52" translate="yes" xml:space="preserve">
          <source>Imagine a scenario where you have parameters representing a product name and a hash of arbitrary data associated with that product, and you want to permit the product name attribute and also the whole data hash:</source>
          <target state="translated">製品名とその製品に関連付けられた任意のデータのハッシュを表すパラメータを持っていて、製品名属性とデータ全体のハッシュを許可したい場合を想像してみてください。</target>
        </trans-unit>
        <trans-unit id="82efa8ca1d9a12ef2b518545653e0d364d47da15" translate="yes" xml:space="preserve">
          <source>Imagine that this template was in a file called &lt;code&gt;template.rb&lt;/code&gt;. We can use it to modify the outcome of the &lt;code&gt;rails new&lt;/code&gt; command by using the &lt;code&gt;-m&lt;/code&gt; option and passing in the filename:</source>
          <target state="translated">このテンプレートがtemplate.rbというファイルにあったと想像して &lt;code&gt;template.rb&lt;/code&gt; 。これを使用して、 &lt;code&gt;-m&lt;/code&gt; オプションを使用し、ファイル名を渡すことにより、 &lt;code&gt;rails new&lt;/code&gt; コマンドの結果を変更できます。</target>
        </trans-unit>
        <trans-unit id="a23c9f6f0d6eb9b1c67997eb11e2e598caca6dc7" translate="yes" xml:space="preserve">
          <source>Imagine that you did have an asset located at &lt;code&gt;app/assets/stylesheets/blorgh/style.css&lt;/code&gt; To include this asset inside an application, just use &lt;code&gt;stylesheet_link_tag&lt;/code&gt; and reference the asset as if it were inside the engine:</source>
          <target state="translated">あなたがで資産を置かなければならなかったことを想像して &lt;code&gt;app/assets/stylesheets/blorgh/style.css&lt;/code&gt; 、アプリケーション内だけで使用する、この資産を含めるには &lt;code&gt;stylesheet_link_tag&lt;/code&gt; し、それがエンジン内部であるかのように資産を参照します。</target>
        </trans-unit>
        <trans-unit id="d8d65f4b17f25607c90868e7031c68bab93f6d78" translate="yes" xml:space="preserve">
          <source>Imagine you have a series of users that you would like to display and provide a form on that same page to create a new user. The index action of your controller looks like this:</source>
          <target state="translated">表示したい一連のユーザーがあり、同じページにフォームを提供して新しいユーザーを作成したとします。コントローラのインデックスアクションは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1e96898b6501d3fbdcf2300804027e8c6693dd90" translate="yes" xml:space="preserve">
          <source>Imagine you have a server which mirrors the production environment but is only used for testing. Such a server is commonly called a &quot;staging server&quot;. To define an environment called &quot;staging&quot; for this server, just create a file called &lt;code&gt;config/environments/staging.rb&lt;/code&gt;. Please use the contents of any existing file in &lt;code&gt;config/environments&lt;/code&gt; as a starting point and make the necessary changes from there.</source>
          <target state="translated">本番環境をミラーリングしているが、テストにのみ使用されるサーバーがあるとします。このようなサーバーは、一般的に「ステージングサーバー」と呼ばれます。このサーバーの「ステージング」と呼ばれる環境を定義するには、 &lt;code&gt;config/environments/staging.rb&lt;/code&gt; というファイルを作成するだけです。開始点として &lt;code&gt;config/environments&lt;/code&gt; 内の既存のファイルの内容を使用し、そこから必要な変更を行ってください。</target>
        </trans-unit>
        <trans-unit id="9b0e1a932488fc0faaa2b295c30a9aa45876243c" translate="yes" xml:space="preserve">
          <source>Imagine you need to work with a legacy database containing the following table:</source>
          <target state="translated">以下のテーブルを含むレガシーデータベースで作業する必要があると想像してみてください。</target>
        </trans-unit>
        <trans-unit id="6970d62a4e47823d1263b678a59e7b3be71b5a0c" translate="yes" xml:space="preserve">
          <source>Imagine you would like to delegate everything missing from the &lt;code&gt;User&lt;/code&gt; object, to the &lt;code&gt;Profile&lt;/code&gt; one. The &lt;code&gt;delegate_missing_to&lt;/code&gt; macro lets you implement this in a breeze:</source>
          <target state="translated">&lt;code&gt;User&lt;/code&gt; オブジェクトから欠落しているすべてのものを &lt;code&gt;Profile&lt;/code&gt; オブジェクトに委任したいとします。 &lt;code&gt;delegate_missing_to&lt;/code&gt; のマクロを使用すると、風にこれを実装することができます：</target>
        </trans-unit>
        <trans-unit id="592f461f8f650c9881d19434eb07cf55d51fcec5" translate="yes" xml:space="preserve">
          <source>Immediately forget this connection ever existed. Unlike disconnect!, this will not communicate with the server.</source>
          <target state="translated">この接続が存在したことを即座に忘れます。disconnect! とは異なり、サーバーとの通信は行われません。</target>
        </trans-unit>
        <trans-unit id="4ba4b37c409e259716fe6f3feb135d41b0df925d" translate="yes" xml:space="preserve">
          <source>Impact of Logs on Performance</source>
          <target state="translated">ログのパフォーマンスへの影響</target>
        </trans-unit>
        <trans-unit id="3541319efbbc447409bc55f973fe6221e45917e9" translate="yes" xml:space="preserve">
          <source>Implement this method in a concrete subclass. Have it return true when given a blob from which the analyzer can extract metadata.</source>
          <target state="translated">このメソッドを具体的なサブクラスに実装します。アナライザがメタデータを抽出できる blob を指定した場合に true を返すようにします。</target>
        </trans-unit>
        <trans-unit id="6725be8193f353157ed48984e7bd46897dd0c798" translate="yes" xml:space="preserve">
          <source>Implement this method in a concrete subclass. Have it return true when given a blob from which the previewer can generate an image.</source>
          <target state="translated">このメソッドを具体的なサブクラスに実装します。プレビューアが画像を生成できる blob が与えられた場合に true を返すようにします。</target>
        </trans-unit>
        <trans-unit id="900dd4ac67347484c1b41e0135def860124558d7" translate="yes" xml:space="preserve">
          <source>Implementing Support for Other Cloud Services</source>
          <target state="translated">他のクラウドサービスへの対応を実装する</target>
        </trans-unit>
        <trans-unit id="beca3b2271c9131a4132ecdb9e1400f3f98aaa03" translate="yes" xml:space="preserve">
          <source>Implementing a system test</source>
          <target state="translated">システムテストの実施</target>
        </trans-unit>
        <trans-unit id="088e2ffa59238fae1077a6a98d6f816ed4781b79" translate="yes" xml:space="preserve">
          <source>Implementing an integration test</source>
          <target state="translated">統合テストの実装</target>
        </trans-unit>
        <trans-unit id="be2fc4a7e872958c1218af9bd0f7ec74151da4b2" translate="yes" xml:space="preserve">
          <source>Implements a hash where keys &lt;code&gt;:foo&lt;/code&gt; and &lt;code&gt;&quot;foo&quot;&lt;/code&gt; are considered to be the same.</source>
          <target state="translated">キー &lt;code&gt;:foo&lt;/code&gt; と &lt;code&gt;&quot;foo&quot;&lt;/code&gt; が同じであると見なされるハッシュを実装します。</target>
        </trans-unit>
        <trans-unit id="c613ef0456cfc282a210d9a952d24027a5dbe57d" translate="yes" xml:space="preserve">
          <source>Implements a mailer preview interceptor that converts image tag src attributes that use inline cid: style URLs to data: style URLs so that they are visible when previewing an HTML email in a web browser.</source>
          <target state="translated">インラインの cid:スタイル URL を使用する画像タグの src 属性を data:スタイル URL に変換し、Web ブラウザで HTML メールをプレビューする際に表示されるようにするメーラープレビューインターセプターを実装します。</target>
        </trans-unit>
        <trans-unit id="22d4e13f56409e0a39f90cdbbbdbcd9d6342ece8" translate="yes" xml:space="preserve">
          <source>Implements methods that allow rendering from a view context. In order to use this module, all you need is to implement view_renderer that returns an &lt;a href=&quot;../renderer&quot;&gt;ActionView::Renderer&lt;/a&gt; object.</source>
          <target state="translated">ビューコンテキストからのレンダリングを可能にするメソッドを実装します。このモジュールを使用するために必要なのは、&lt;a href=&quot;../renderer&quot;&gt;ActionView :: Renderer&lt;/a&gt;オブジェクトを返すview_rendererを実装することだけです。</target>
        </trans-unit>
        <trans-unit id="24ec6605d9328a8008364cc4c4f420581b79a4a9" translate="yes" xml:space="preserve">
          <source>Implements the &lt;a href=&quot;../activesupport/logsubscriber&quot;&gt;ActiveSupport::LogSubscriber&lt;/a&gt; for logging notifications when email is delivered or received.</source>
          <target state="translated">電子メールが配信または受信されたときに通知をログに記録するための&lt;a href=&quot;../activesupport/logsubscriber&quot;&gt;ActiveSupport :: LogSubscriber&lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="52d6a97892d78e3ae869c7ed2c900dea4e6ebf61" translate="yes" xml:space="preserve">
          <source>Implements the logic behind &lt;code&gt;Rails::Command::NotesCommand&lt;/code&gt;. See &lt;code&gt;rails notes --help&lt;/code&gt; for usage information.</source>
          <target state="translated">&lt;code&gt;Rails::Command::NotesCommand&lt;/code&gt; 背後にあるロジックを実装します。使用方法については、 &lt;code&gt;rails notes --help&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="35d2e815ecf5eaeaf9463f97d49b56bdcf2cedef" translate="yes" xml:space="preserve">
          <source>Implicit Controller Namespacing</source>
          <target state="translated">暗黙のコントローラの名前空間</target>
        </trans-unit>
        <trans-unit id="cc812dcbced753eec4dd16100a96e45f4f64caaa" translate="yes" xml:space="preserve">
          <source>Implicit dependencies</source>
          <target state="translated">暗黙の依存関係</target>
        </trans-unit>
        <trans-unit id="4bc21b467c16e56b3af4d8560fc26cb749a105d4" translate="yes" xml:space="preserve">
          <source>Implicit template rendering is not performed if any attachments or parts have been added to the email. This means that you'll have to manually add each part to the email and set the content type of the email to &lt;code&gt;multipart/alternative&lt;/code&gt;.</source>
          <target state="translated">電子メールに添付ファイルまたはパーツが追加されている場合、暗黙的なテンプレートレンダリングは実行されません。つまり、手動で各パートをメールに追加し、メールのコンテンツタイプを &lt;code&gt;multipart/alternative&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4cf6d21cc8c3ec4dc1b9b1edae7488384d03d30c" translate="yes" xml:space="preserve">
          <source>ImplicitRender</source>
          <target state="translated">ImplicitRender</target>
        </trans-unit>
        <trans-unit id="d1638a243bdb748019bd32183a25a00764fdfe7e" translate="yes" xml:space="preserve">
          <source>Improper abstraction is shown in the following example, where assumptions are made about the ordering of the different parts of the translation. Note that Rails provides a &lt;code&gt;number_to_currency&lt;/code&gt; helper to handle the following case.</source>
          <target state="translated">不適切な抽象化を次の例に示します。ここでは、翻訳のさまざまな部分の順序について仮定が行われています。Rails が次のケースを処理するための &lt;code&gt;number_to_currency&lt;/code&gt; ヘルパーを提供することに注意してください。</target>
        </trans-unit>
        <trans-unit id="25277a4e2d3aab7b020dc767c1fa2cdd12889e2b" translate="yes" xml:space="preserve">
          <source>Improving engine functionality</source>
          <target state="translated">エンジンの機能性向上</target>
        </trans-unit>
        <trans-unit id="fae9a341e3cc54b88e5881c130771b3562076a34" translate="yes" xml:space="preserve">
          <source>In 2007 there was the first tailor-made trojan which stole information from an Intranet, namely the &quot;Monster for employers&quot; web site of Monster.com, an online recruitment web application. Tailor-made Trojans are very rare, so far, and the risk is quite low, but it is certainly a possibility and an example of how the security of the client host is important, too. However, the highest threat to Intranet and Admin applications are XSS and CSRF.</source>
          <target state="translated">2007年には、イントラネットから情報を盗み出した最初のテーラーメイドのトロイの木馬、すなわち、オンライン採用WebアプリケーションのMonster.comの「Monster for employers」Webサイトがありました。テーラーメイドのトロイの木馬は今のところ非常に珍しく、リスクはかなり低いのですが、確かに可能性はありますし、クライアントホストのセキュリティも重要であることを示す例でもあります。しかし、イントラネットやAdminアプリケーションにとって最も脅威が高いのは、XSSとCSRFです。</target>
        </trans-unit>
        <trans-unit id="459e6a935c80dde6e06ed67fe83a90bd9883c215" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;classic&lt;/code&gt; mode you could technically define several constants at the same top-level and have them all reloaded. For example, given</source>
          <target state="translated">では &lt;code&gt;classic&lt;/code&gt; モードで、あなたは技術的に同じトップレベルで、いくつかの定数を定義し、それらをすべて再ロード可能性があります。たとえば、</target>
        </trans-unit>
        <trans-unit id="542cf5e02cd8fb77390910ad4c46d85ca2ae6998" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;classic&lt;/code&gt; mode, if &lt;code&gt;app/models/foo.rb&lt;/code&gt; defines &lt;code&gt;Bar&lt;/code&gt;, you won't be able to autoload that file, but eager loading will work because it loads files recursively blindly. This can be a source of errors if you test things first eager loading, execution may fail later autoloading.</source>
          <target state="translated">では &lt;code&gt;classic&lt;/code&gt; モードで、あれば &lt;code&gt;app/models/foo.rb&lt;/code&gt; 定義されて &lt;code&gt;Bar&lt;/code&gt; 、そのファイルを自動ロードすることはできませんが、それは再帰的に盲目的にファイルをロードするため、積極的なロードが動作します。最初に熱心なロードをテストすると、これがエラーの原因になる可能性があります。実行すると、後でオートロードが失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c0c8108a5c9ee6932aeb4bd9a770d0dfa0e4b1c8" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;config/application.rb&lt;/code&gt; add the following line at the top of the &lt;code&gt;Application&lt;/code&gt; class definition:</source>
          <target state="translated">内 &lt;code&gt;config/application.rb&lt;/code&gt; の先頭に次の行を追加し &lt;code&gt;Application&lt;/code&gt; クラス定義：</target>
        </trans-unit>
        <trans-unit id="038e4733f3293952f2c69b8c06c72d61d56cd4cf" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;config/environments/development.rb&lt;/code&gt;, place the following line:</source>
          <target state="translated">で &lt;code&gt;config/environments/development.rb&lt;/code&gt; 、次の行を配置します。</target>
        </trans-unit>
        <trans-unit id="19a666179d9c9c5c55b760fb4bd295bdd2019cf2" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;config/environments/development.rb&lt;/code&gt;, set &lt;code&gt;config.debug_exception_response_format&lt;/code&gt; to configure the format used in responses when errors occur in development mode.</source>
          <target state="translated">で &lt;code&gt;config/environments/development.rb&lt;/code&gt; 、セット &lt;code&gt;config.debug_exception_response_format&lt;/code&gt; エラーが開発モードで発生したときの応答で使用されるフォーマットを設定します。</target>
        </trans-unit>
        <trans-unit id="1432a9900cff26dddc3080234094b35f280b42a8" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;config/routes.rb&lt;/code&gt; you define URL-to-controller mappings, but the reverse is also possible: a URL can be generated from one of your routing definitions. URL generation functionality is centralized in this module.</source>
          <target state="translated">&lt;code&gt;config/routes.rb&lt;/code&gt; をあなたはURLとコントローラのマッピングを定義し、その逆も可能である：URLはルーティングの定義のいずれかから生成することができます。URL生成機能は、このモジュールに集中しています。</target>
        </trans-unit>
        <trans-unit id="1642945971bc58efcad1099a8a64f5268eb8322c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;lib/yaffle.rb&lt;/code&gt;, add &lt;code&gt;require &quot;yaffle/core_ext&quot;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;lib/yaffle.rb&lt;/code&gt; 、追加 &lt;code&gt;require &quot;yaffle/core_ext&quot;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e232716b6d62b50c947b184953eae7d056f56191" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;zeitwerk&lt;/code&gt; mode both loading modes are consistent, they fail and err in the same files.</source>
          <target state="translated">で &lt;code&gt;zeitwerk&lt;/code&gt; モードの両方の負荷モードは、彼らが同じファイルに失敗し、errは、一貫しています。</target>
        </trans-unit>
        <trans-unit id="e673fd939bb83dbf33354669755b6f6e9fd442c0" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;zeitwerk&lt;/code&gt; mode, Rails uses &lt;a href=&quot;https://github.com/fxn/zeitwerk&quot;&gt;Zeitwerk&lt;/a&gt; internally to autoload, reload, and eager load. Rails instantiates and configures a dedicated Zeitwerk instance that manages the project.</source>
          <target state="translated">で &lt;code&gt;zeitwerk&lt;/code&gt; モードで、Railsは使用しています&lt;a href=&quot;https://github.com/fxn/zeitwerk&quot;&gt;Zeitwerkを&lt;/a&gt;自動ロード、リロード、および熱心な負荷に内部。Railsは、プロジェクトを管理する専用のZeitwerkインスタンスをインスタンス化して構成します。</target>
        </trans-unit>
        <trans-unit id="71ea6f7b46d9cf92e4933e28e9d6bba26cdba1a8" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;development&lt;/strong&gt;, you want quicker startup with incremental loading of application code. So &lt;code&gt;eager_load&lt;/code&gt; should be set to &lt;code&gt;false&lt;/code&gt;, and Rails will autoload files as needed (see &lt;a href=&quot;#autoloading-algorithms&quot;&gt;Autoloading Algorithms&lt;/a&gt; below) -- and then reload them when they change (see &lt;a href=&quot;#constant-reloading&quot;&gt;Constant Reloading&lt;/a&gt; below).</source>
          <target state="translated">で&lt;strong&gt;開発&lt;/strong&gt;、アプリケーション・コードの増分ロードで迅速に起動します。したがって、 &lt;code&gt;eager_load&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定する必要があります。Railsは必要に応じてファイルを自動ロードし（下記の&lt;a href=&quot;#autoloading-algorithms&quot;&gt;自動ロードアルゴリズムを&lt;/a&gt;参照）、ファイルが変更されたときに再ロードします（下記の&lt;a href=&quot;#constant-reloading&quot;&gt;定数の&lt;/a&gt;再ロードを参照）。</target>
        </trans-unit>
        <trans-unit id="0f72170ee1c24d4c865ecf78482068999436ea7a" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;production&lt;/strong&gt;, however, you want consistency and thread-safety and can live with a longer boot time. So &lt;code&gt;eager_load&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, and then during boot (before the app is ready to receive requests) Rails loads all files in the &lt;code&gt;eager_load_paths&lt;/code&gt; and then turns off auto loading (NB: autoloading may be needed during eager loading). Not autoloading after boot is a &lt;code&gt;good thing&lt;/code&gt;, as autoloading can cause the app to be have thread-safety problems.</source>
          <target state="translated">で&lt;strong&gt;生産&lt;/strong&gt;、しかし、あなたは一貫性とスレッドセーフにしたいと長い起動時間と一緒に暮らすことができます。したがって、 &lt;code&gt;eager_load&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されてから、起動中（アプリがリクエストを受信する準備ができる前）に、Railsは &lt;code&gt;eager_load_paths&lt;/code&gt; 内のすべてのファイルをロードしてから、自動ロードをオフにします（NB：自動ロードは、eagerロード中に必要になる場合があります）。起動後に自動読み込みを行わない &lt;code&gt;good thing&lt;/code&gt; は良いことです。自動読み込みにより、アプリにスレッドセーフの問題が発生する可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="f92b7014d8bd1687e9d67744b5d5dbfdfdc69342" translate="yes" xml:space="preserve">
          <source>In &lt;strong&gt;test&lt;/strong&gt;, for speed of execution (of individual tests) &lt;code&gt;eager_load&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, so Rails follows development behaviour.</source>
          <target state="translated">では&lt;strong&gt;テスト&lt;/strong&gt;、（個々のテストの）実行速度のため &lt;code&gt;eager_load&lt;/code&gt; はある &lt;code&gt;false&lt;/code&gt; Railsは開発の動作を以下のように。</target>
        </trans-unit>
        <trans-unit id="64bc7c7244baf7a888ec03c60f63bef901cae7ee" translate="yes" xml:space="preserve">
          <source>In App</source>
          <target state="translated">アプリ内</target>
        </trans-unit>
        <trans-unit id="da5d6eae39d42acaf080e6551490223f993953d3" translate="yes" xml:space="preserve">
          <source>In December 2006, 34,000 actual user names and passwords were stolen in a &lt;a href=&quot;http://news.netcraft.com/archives/2006/10/27/myspace_accounts_compromised_by_phishers.html&quot;&gt;MySpace phishing attack&lt;/a&gt;. The idea of the attack was to create a profile page named &quot;login_home_index_html&quot;, so the URL looked very convincing. Specially-crafted HTML and CSS was used to hide the genuine MySpace content from the page and instead display its own login form.</source>
          <target state="translated">2006年12月、&lt;a href=&quot;http://news.netcraft.com/archives/2006/10/27/myspace_accounts_compromised_by_phishers.html&quot;&gt;MySpaceのフィッシング攻撃&lt;/a&gt;で実際のユーザー名とパスワード34,000が盗まれました。攻撃のアイデアは、「login_home_index_html」という名前のプロファイルページを作成することだったので、URLは非常に説得力のあるものに見えました。特別に細工されたHTMLとCSSを使用して、正規のMySpaceコンテンツをページから隠し、代わりに独自のログインフォームを表示しました。</target>
        </trans-unit>
        <trans-unit id="95a2bb9868cd89f678d0493fad1f8fb986cade2e" translate="yes" xml:space="preserve">
          <source>In Development</source>
          <target state="translated">開発中</target>
        </trans-unit>
        <trans-unit id="465280a3f4d120ddf717e03ed4ad4332c4473248" translate="yes" xml:space="preserve">
          <source>In JavaScript files, Sprockets directives begin with &lt;code&gt;//=&lt;/code&gt;. In the above case, the file is using the &lt;code&gt;require&lt;/code&gt; and the &lt;code&gt;require_tree&lt;/code&gt; directives. The &lt;code&gt;require&lt;/code&gt; directive is used to tell Sprockets the files you wish to require. Here, you are requiring the files &lt;code&gt;rails-ujs.js&lt;/code&gt; and &lt;code&gt;turbolinks.js&lt;/code&gt; that are available somewhere in the search path for Sprockets. You need not supply the extensions explicitly. Sprockets assumes you are requiring a &lt;code&gt;.js&lt;/code&gt; file when done from within a &lt;code&gt;.js&lt;/code&gt; file.</source>
          <target state="translated">JavaScriptファイルでは、Sprocketsディレクティブは &lt;code&gt;//=&lt;/code&gt; で始まります。上記の場合、ファイルは &lt;code&gt;require&lt;/code&gt; および &lt;code&gt;require_tree&lt;/code&gt; ディレクティブを使用しています。 &lt;code&gt;require&lt;/code&gt; ディレクティブがスプロケットにあなたが必要とするファイルを伝えるために使用されています。ここでは、Sprocketsの検索パスのどこかにある &lt;code&gt;rails-ujs.js&lt;/code&gt; および &lt;code&gt;turbolinks.js&lt;/code&gt; ファイルが必要です。拡張を明示的に指定する必要はありません。スプロケットは、あなたが必要としていると仮定し &lt;code&gt;.js&lt;/code&gt; ファイル内から実行時にファイルを &lt;code&gt;.js&lt;/code&gt; ファイル。</target>
        </trans-unit>
        <trans-unit id="03f18111b3979ea4cddec4b3d6254c6c8812f51e" translate="yes" xml:space="preserve">
          <source>In Production</source>
          <target state="translated">製作中</target>
        </trans-unit>
        <trans-unit id="881b52a0818476cf9a85f46aa68f0a3a1628f652" translate="yes" xml:space="preserve">
          <source>In Rails 3.0 and above, generators don't just look in the source root for templates, they also search for templates in other paths. And one of them is &lt;code&gt;lib/templates&lt;/code&gt;. Since we want to customize &lt;code&gt;Rails::Generators::HelperGenerator&lt;/code&gt;, we can do that by simply making a template copy inside &lt;code&gt;lib/templates/rails/helper&lt;/code&gt; with the name &lt;code&gt;helper.rb&lt;/code&gt;. So let's create that file with the following content:</source>
          <target state="translated">Rails 3.0以降では、ジェネレーターはソースルートでテンプレートを探すだけでなく、他のパスでテンプレートも検索します。そしてそのうちの1つは &lt;code&gt;lib/templates&lt;/code&gt; です。 &lt;code&gt;Rails::Generators::HelperGenerator&lt;/code&gt; をカスタマイズしたいので、 &lt;code&gt;lib/templates/rails/helper&lt;/code&gt; 内に &lt;code&gt;helper.rb&lt;/code&gt; という名前でテンプレートのコピーを作成するだけでそれを行うことができます。次の内容でそのファイルを作成しましょう：</target>
        </trans-unit>
        <trans-unit id="3d701b2dca3add4cb90f7c327e5b34c565ff6209" translate="yes" xml:space="preserve">
          <source>In Rails 4.0 when a column or a table is renamed the related indexes are also renamed. If you have migrations which rename the indexes, they are no longer needed.</source>
          <target state="translated">Rails 4.0では、カラムやテーブルの名前が変更されると、関連するインデックスの名前も変更されます。インデックスの名前を変更するマイグレーションを行っている場合、それらは不要になりました。</target>
        </trans-unit>
        <trans-unit id="1adb17f63f770a578c9bd8dceb71a192376252bb" translate="yes" xml:space="preserve">
          <source>In Rails 4.0, &lt;code&gt;ActionController::UnknownFormat&lt;/code&gt; is raised when the action doesn't handle the request format. By default, the exception is handled by responding with 406 Not Acceptable, but you can override that now. In Rails 3, 406 Not Acceptable was always returned. No overrides.</source>
          <target state="translated">Rails 4.0では、アクションがリクエスト形式を処理しない場合、 &lt;code&gt;ActionController::UnknownFormat&lt;/code&gt; が発生します。デフォルトでは、例外は406 Not Acceptableで応答することで処理されますが、ここでオーバーライドできます。Rails 3では、406 Not Acceptableが常に返されていました。上書きなし。</target>
        </trans-unit>
        <trans-unit id="e8c55c03013f5a72f0bf3f4390ebed968b1b748e" translate="yes" xml:space="preserve">
          <source>In Rails 4.0, &lt;code&gt;SCRIPT_NAME&lt;/code&gt; is properly nested when engines are mounted on an app that's served from a URL prefix. You no longer have to set &lt;code&gt;default_url_options[:script_name]&lt;/code&gt; to work around overwritten URL prefixes.</source>
          <target state="translated">Rails 4.0では、URLプレフィックスから提供されるアプリにエンジンがマウントされている場合、 &lt;code&gt;SCRIPT_NAME&lt;/code&gt; が適切にネストされます。上書きされたURLプレフィックスを回避するために &lt;code&gt;default_url_options[:script_name]&lt;/code&gt; を設定する必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="fbd697524f2577109c25789402e832c69d562e7a" translate="yes" xml:space="preserve">
          <source>In Rails 4.0, a generic &lt;code&gt;ActionDispatch::ParamsParser::ParseError&lt;/code&gt; exception is raised when &lt;code&gt;ParamsParser&lt;/code&gt; fails to parse request params. You will want to rescue this exception instead of the low-level &lt;code&gt;MultiJson::DecodeError&lt;/code&gt;, for example.</source>
          <target state="translated">Rails 4.0では、 &lt;code&gt;ParamsParser&lt;/code&gt; がリクエストパラメータの解析に失敗すると、汎用の &lt;code&gt;ActionDispatch::ParamsParser::ParseError&lt;/code&gt; 例外が発生します。たとえば、低レベルの &lt;code&gt;MultiJson::DecodeError&lt;/code&gt; ではなく、この例外をレスキューしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="2a1b06b5dc0aa44b96b3b0146a540533fa23c8d9" translate="yes" xml:space="preserve">
          <source>In Rails 4.0, precompiling assets no longer automatically copies non-JS/CSS assets from &lt;code&gt;vendor/assets&lt;/code&gt; and &lt;code&gt;lib/assets&lt;/code&gt;. Rails application and engine developers should put these assets in &lt;code&gt;app/assets&lt;/code&gt; or configure &lt;code&gt;config.assets.precompile&lt;/code&gt;.</source>
          <target state="translated">Rails 4.0では、アセットのプリコンパイルで、 &lt;code&gt;vendor/assets&lt;/code&gt; および &lt;code&gt;lib/assets&lt;/code&gt; から非JS / CSSアセットが自動的にコピーされなくなりました。Railsアプリケーションおよびエンジンの開発者は、これらのアセットを &lt;code&gt;app/assets&lt;/code&gt; に配置するか、 &lt;code&gt;config.assets.precompile&lt;/code&gt; を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="e790cb94a07686a3cdc4c05781a0fcaefa57d168" translate="yes" xml:space="preserve">
          <source>In Rails 4.2, an Active Job inherits from &lt;code&gt;ActiveJob::Base&lt;/code&gt;. In Rails 5.0, this behavior has changed to now inherit from &lt;code&gt;ApplicationJob&lt;/code&gt;.</source>
          <target state="translated">Rails 4.2では、アクティブジョブは &lt;code&gt;ActiveJob::Base&lt;/code&gt; 継承します。Rails 5.0では、この動作が変更され、 &lt;code&gt;ApplicationJob&lt;/code&gt; から継承されるようになりました。</target>
        </trans-unit>
        <trans-unit id="3dd8df2469bc7ba82d934c36883ac1e21582a46d" translate="yes" xml:space="preserve">
          <source>In Rails 4.2, an Active Record model inherits from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;. In Rails 5.0, all models inherit from &lt;code&gt;ApplicationRecord&lt;/code&gt;.</source>
          <target state="translated">Rails 4.2では、Active Recordモデルは &lt;code&gt;ActiveRecord::Base&lt;/code&gt; 継承しています。Rails 5.0では、すべてのモデルが &lt;code&gt;ApplicationRecord&lt;/code&gt; を継承します。</target>
        </trans-unit>
        <trans-unit id="439d6d805d6bd1ed63fe14cf4cd328905a76b44e" translate="yes" xml:space="preserve">
          <source>In Rails 4.2, when a 'before' callback returns &lt;code&gt;false&lt;/code&gt; in Active Record and Active Model, then the entire callback chain is halted. In other words, successive 'before' callbacks are not executed, and neither is the action wrapped in callbacks.</source>
          <target state="translated">Rails 4.2では、アクティブレコードとアクティブモデルで「before」コールバックが &lt;code&gt;false&lt;/code&gt; を返すと、コールバックチェーン全体が停止します。つまり、連続する「before」コールバックは実行されず、アクションもコールバックにラップされません。</target>
        </trans-unit>
        <trans-unit id="7dce1a93bbd29712f2b1ec669334dfd3205ce7be" translate="yes" xml:space="preserve">
          <source>In Rails 5, the default log level for the production environment will be changed to &lt;code&gt;:debug&lt;/code&gt; (from &lt;code&gt;:info&lt;/code&gt;). To preserve the current default, add the following line to your &lt;code&gt;production.rb&lt;/code&gt;:</source>
          <target state="translated">Rails 5では、本番環境のデフォルトのログレベルは &lt;code&gt;:debug&lt;/code&gt; （ &lt;code&gt;:info&lt;/code&gt; から）に変更されます。現在のデフォルトを保持するには、次の行を &lt;code&gt;production.rb&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="6a17e8569da075383aacc8ee0799bf2cfe2223ce" translate="yes" xml:space="preserve">
          <source>In Rails 5.0, how JSON/JSONB attributes are serialized and deserialized changed. Now, if you set a column equal to a &lt;code&gt;String&lt;/code&gt;, Active Record will no longer turn that string into a &lt;code&gt;Hash&lt;/code&gt;, and will instead only return the string. This is not limited to code interacting with models, but also affects &lt;code&gt;:default&lt;/code&gt; column settings in &lt;code&gt;db/schema.rb&lt;/code&gt;. It is recommended that you do not set columns equal to a &lt;code&gt;String&lt;/code&gt;, but pass a &lt;code&gt;Hash&lt;/code&gt; instead, which will be converted to and from a JSON string automatically.</source>
          <target state="translated">Rails 5.0では、JSON / JSONB属性のシリアライズとデシリアライズの方法が変更されました。これで、列を &lt;code&gt;String&lt;/code&gt; に設定した場合、Active Recordはその文字列を &lt;code&gt;Hash&lt;/code&gt; に変換しなくなり、代わりに文字列のみを返します。これは、モデルと対話するコードに限定されず、 &lt;code&gt;db/schema.rb&lt;/code&gt; の &lt;code&gt;:default&lt;/code&gt; カラム設定にも影響します。列を &lt;code&gt;String&lt;/code&gt; に設定するのではなく、代わりに &lt;code&gt;Hash&lt;/code&gt; を渡すことをお勧めします。ハッシュは、JSON文字列との間で自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="8805a6baac81772ba5bc008724fb0e7b03fcbd7c" translate="yes" xml:space="preserve">
          <source>In Rails 5.0, returning &lt;code&gt;false&lt;/code&gt; in an Active Record or Active Model callback will not have this side effect of halting the callback chain. Instead, callback chains must be explicitly halted by calling &lt;code&gt;throw(:abort)&lt;/code&gt;.</source>
          <target state="translated">Rails 5.0では、アクティブレコードまたはアクティブモデルのコールバックで &lt;code&gt;false&lt;/code&gt; を返しても、コールバックチェーンが停止するという副作用はありません。代わりに、 &lt;code&gt;throw(:abort)&lt;/code&gt; を呼び出して、コールバックチェーンを明示的に停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="9ccfc486350477735c33b236b56a8f69a4fcc517" translate="yes" xml:space="preserve">
          <source>In Rails 5.0, test cases will be executed in random order by default. In anticipation of this change, Rails 4.2 introduced a new configuration option &lt;code&gt;active_support.test_order&lt;/code&gt; for explicitly specifying the test ordering. This allows you to either lock down the current behavior by setting the option to &lt;code&gt;:sorted&lt;/code&gt;, or opt into the future behavior by setting the option to &lt;code&gt;:random&lt;/code&gt;.</source>
          <target state="translated">Rails 5.0では、テストケースはデフォルトでランダムな順序で実行されます。この変更を見越して、Rails 4.2では、テストの順序を明示的に指定するための新しい構成オプション &lt;code&gt;active_support.test_order&lt;/code&gt; が導入されました。これにより、オプションを &lt;code&gt;:sorted&lt;/code&gt; に設定して現在の動作をロックするか、オプションを &lt;code&gt;:random&lt;/code&gt; に設定して将来の動作にオプトインすることができます。</target>
        </trans-unit>
        <trans-unit id="0b0c195e1af271ce415b466ef143019d7676d6f1" translate="yes" xml:space="preserve">
          <source>In Rails 5.2, assigning to a collection of attachments declared with &lt;code&gt;has_many_attached&lt;/code&gt; appended new files:</source>
          <target state="translated">Rails 5.2では、 &lt;code&gt;has_many_attached&lt;/code&gt; を追加して宣言された添付ファイルのコレクションに新しいファイルを割り当てます。</target>
        </trans-unit>
        <trans-unit id="a6731ddb55b6a64f0e9f7cfc11759cdbf65ec568" translate="yes" xml:space="preserve">
          <source>In Rails, a resourceful route provides a mapping between HTTP verbs and URLs and controller actions. By convention, each action also maps to particular CRUD operations in a database. A single entry in the routing file, such as</source>
          <target state="translated">Railsでは、リソースフルルートはHTTP動詞やURLとコントローラのアクションの間のマッピングを提供します。規約では、各アクションはデータベース内の特定のCRUD操作にもマッピングされます。のようなルーティングファイルの単一のエントリは</target>
        </trans-unit>
        <trans-unit id="a77466629531af636135628e6426524916605e5c" translate="yes" xml:space="preserve">
          <source>In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions. By convention, each action also maps to a specific CRUD operation in a database. A single entry in the routing file, such as:</source>
          <target state="translated">Railsでは、リソースフルルートはHTTP動詞とURLの間のコントローラアクションへのマッピングを提供します。規約では、各アクションはデータベース内の特定のCRUD操作にもマッピングされます。のようなルーティングファイルの単一のエントリ。</target>
        </trans-unit>
        <trans-unit id="8c3a8caddd6cd9e897f742a979983edd518e3c9b" translate="yes" xml:space="preserve">
          <source>In Rails, an &lt;em&gt;association&lt;/em&gt; is a connection between two Active Record models. Why do we need associations between models? Because they make common operations simpler and easier in your code. For example, consider a simple Rails application that includes a model for authors and a model for books. Each author can have many books. Without associations, the model declarations would look like this:</source>
          <target state="translated">Railsでは、&lt;em&gt;関連付け&lt;/em&gt;は2つのアクティブレコードモデル間の接続です。モデル間の関連付けが必要なのはなぜですか？コード内の一般的な操作がより簡単で簡単になるためです。たとえば、著者用のモデルと本用のモデルを含む単純なRailsアプリケーションを考えてみましょう。各著者は多くの本を持つことができます。関連付けがない場合、モデル宣言は次のようになります。</target>
        </trans-unit>
        <trans-unit id="56e83cf4d25c00dd476d47cc56bf04c7705eec09" translate="yes" xml:space="preserve">
          <source>In Rails, testing the various actions of a controller is a form of writing functional tests. Remember your controllers handle the incoming web requests to your application and eventually respond with a rendered view. When writing functional tests, you are testing how your actions handle the requests and the expected result or response, in some cases an HTML view.</source>
          <target state="translated">Railsでは、コントローラのさまざまな動作をテストすることは、機能テストを書くことの一形態です。コントローラはアプリケーションへのWebリクエストを処理し、最終的にはレンダリングされたビューで応答することを覚えておいてください。機能テストを書くときは、アクションがリクエストをどのように処理するか、そして期待される結果やレスポンス、場合によってはHTMLビューをテストします。</target>
        </trans-unit>
        <trans-unit id="0d6b371170194bc0f26caa23ed54b666ace3efba" translate="yes" xml:space="preserve">
          <source>In Rails, this is usually achieved by creating the form using &lt;code&gt;form_for&lt;/code&gt; and a number of related helper methods. &lt;code&gt;form_for&lt;/code&gt; generates an appropriate &lt;code&gt;form&lt;/code&gt; tag and yields a form builder object that knows the model the form is about. Input fields are created by calling methods defined on the form builder, which means they are able to generate the appropriate names and default values corresponding to the model attributes, as well as convenient IDs, etc. Conventions in the generated field names allow controllers to receive form data nicely structured in &lt;code&gt;params&lt;/code&gt; with no effort on your side.</source>
          <target state="translated">Railsでは、これは通常、 &lt;code&gt;form_for&lt;/code&gt; といくつかの関連するヘルパーメソッドを使用してフォームを作成することによって実現されます。 &lt;code&gt;form_for&lt;/code&gt; は適切な &lt;code&gt;form&lt;/code&gt; タグを生成し、フォームのモデルを認識しているフォームビルダーオブジェクトを生成します。入力フィールドは、フォームビルダーで定義されたメソッドを呼び出すことによって作成されます。つまり、モデル属性に対応する適切な名前とデフォルト値、および便利なIDなどを生成できます。生成されたフィールド名の規則により、コントローラーはあなたの側で努力なしで &lt;code&gt;params&lt;/code&gt; でうまく構造化されたフォームデータ。</target>
        </trans-unit>
        <trans-unit id="ecb88f5d832e7f6682e1a0ae438d564ee40bc97a" translate="yes" xml:space="preserve">
          <source>In Rails, web requests are handled by &lt;a href=&quot;action_controller_overview&quot;&gt;Action Controller&lt;/a&gt; and Action View. Typically, Action Controller is concerned with communicating with the database and performing CRUD actions where necessary. Action View is then responsible for compiling the response.</source>
          <target state="translated">Railsでは、Webリクエストは&lt;a href=&quot;action_controller_overview&quot;&gt;Action Controller&lt;/a&gt;とAction View によって処理されます。通常、アクションコントローラは、データベースとの通信と、必要に応じたCRUDアクションの実行に関係しています。次に、アクションビューが応答のコンパイルを担当します。</target>
        </trans-unit>
        <trans-unit id="0f84e8f7f3343be9781b8755e807fc7655f5753f" translate="yes" xml:space="preserve">
          <source>In Ruby &amp;lt; 2.5 &lt;code&gt;String::Hash&lt;/code&gt; evaluates to &lt;code&gt;Hash&lt;/code&gt; and the interpreter issues a warning: &quot;toplevel constant Hash referenced by String::Hash&quot;. Starting with 2.5, &lt;code&gt;String::Hash&lt;/code&gt; raises &lt;code&gt;NameError&lt;/code&gt; because &lt;code&gt;Object&lt;/code&gt; is skipped.</source>
          <target state="translated">Ruby &amp;lt;2.5では、 &lt;code&gt;String::Hash&lt;/code&gt; は &lt;code&gt;Hash&lt;/code&gt; と評価され、インタプリタは「String :: Hashによって参照されるトップレベルの定数Hash」という警告を発行します。2.5以降では、 &lt;code&gt;Object&lt;/code&gt; がスキップされるため、 &lt;code&gt;String::Hash&lt;/code&gt; は &lt;code&gt;NameError&lt;/code&gt; を発生させます。</target>
        </trans-unit>
        <trans-unit id="a7a30f953cf4d0929d1f4865a5b10c5e1cf44ed0" translate="yes" xml:space="preserve">
          <source>In a Rails application file names have to match the constants they define, with directories acting as namespaces.</source>
          <target state="translated">Railsアプリケーションでは、ファイル名は定義した定数と一致しなければならず、ディレクトリは名前空間として機能します。</target>
        </trans-unit>
        <trans-unit id="f7eee8371ad89288909147fa07191ccefaa0c267" translate="yes" xml:space="preserve">
          <source>In a Rails application, add or remove analyzers by manipulating &lt;code&gt;Rails.application.config.active_storage.analyzers&lt;/code&gt; in an initializer:</source>
          <target state="translated">Railsアプリケーションでは、初期化子で &lt;code&gt;Rails.application.config.active_storage.analyzers&lt;/code&gt; を操作して、アナライザーを追加または削除します。</target>
        </trans-unit>
        <trans-unit id="a752f21ee54a6f792635342e300e65ca1f47dbd3" translate="yes" xml:space="preserve">
          <source>In a Rails console there is no file watcher active regardless of the value of &lt;code&gt;config.cache_classes&lt;/code&gt;. This is so because, normally, it would be confusing to have code reloaded in the middle of a console session, the same way you generally want an individual request to be served by a consistent, non-changing set of application classes and modules.</source>
          <target state="translated">Railsコンソールでは、 &lt;code&gt;config.cache_classes&lt;/code&gt; の値に関係なく、アクティブなファイルウォッチャーはありません。これは、通常、コンソールセッションの途中でコードをリロードするのは混乱するためです。通常、アプリケーションクラスとモジュールの一貫した、変更されていないセットによって個々のリクエストを処理するのと同じ方法です。</target>
        </trans-unit>
        <trans-unit id="271d126f8c9e0941ba1c5dcf24c8eee1adaeb3af" translate="yes" xml:space="preserve">
          <source>In a default Rails application, the Executor callbacks are used to:</source>
          <target state="translated">デフォルトのRailsアプリケーションでは、Executorコールバックを使用しています。</target>
        </trans-unit>
        <trans-unit id="0a1f399aa9a761173b4354a91df7a1e6d6783267" translate="yes" xml:space="preserve">
          <source>In a given request, the method is not actually called for every single generated URL; for performance reasons, the returned hash is cached, there is at most one invocation per request.</source>
          <target state="translated">パフォーマンス上の理由から、返されたハッシュはキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="b6a3fb5ca85e3e7566828c53420b6eec7802c016" translate="yes" xml:space="preserve">
          <source>In a normal Ruby program classes need to load their dependencies:</source>
          <target state="translated">通常のRubyプログラムでは、クラスは依存関係をロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="6bd2c46748362d10f7e077a4a3b403485446d896" translate="yes" xml:space="preserve">
          <source>In a normal Ruby program, dependencies need to be loaded by hand. For example, the following controller uses classes &lt;code&gt;ApplicationController&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt;, and normally you'd need to put &lt;code&gt;require&lt;/code&gt; calls for them:</source>
          <target state="translated">通常のRubyプログラムでは、依存関係を手動でロードする必要があります。たとえば、次のコントローラーはクラス &lt;code&gt;ApplicationController&lt;/code&gt; と &lt;code&gt;Post&lt;/code&gt; を使用し、通常はそれらの &lt;code&gt;require&lt;/code&gt; 呼び出しを配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac0a2911ec6534ec9248c4c1ae1f11192066c33e" translate="yes" xml:space="preserve">
          <source>In a sense, applications need to eager load STI hierarchies regardless of the loading mode.</source>
          <target state="translated">ある意味では、アプリケーションはロードモードに関係なく、STI 階層を熱心にロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="492e74f0c484a235e0b7869c9c63fccdba258011" translate="yes" xml:space="preserve">
          <source>In a standard Rails application, there's a &lt;code&gt;Gemfile&lt;/code&gt; which declares all dependencies of the application. &lt;code&gt;config/boot.rb&lt;/code&gt; sets &lt;code&gt;ENV['BUNDLE_GEMFILE']&lt;/code&gt; to the location of this file. If the &lt;code&gt;Gemfile&lt;/code&gt; exists, then &lt;code&gt;bundler/setup&lt;/code&gt; is required. The require is used by Bundler to configure the load path for your Gemfile's dependencies.</source>
          <target state="translated">標準のRailsアプリケーションには、アプリケーションのすべての依存関係を宣言する &lt;code&gt;Gemfile&lt;/code&gt; があります。 &lt;code&gt;config/boot.rb&lt;/code&gt; は、 &lt;code&gt;ENV['BUNDLE_GEMFILE']&lt;/code&gt; をこのファイルの場所に設定します。 &lt;code&gt;Gemfile&lt;/code&gt; が存在する場合、 &lt;code&gt;bundler/setup&lt;/code&gt; が必要です。Bundlerはrequireを使用して、Gemfileの依存関係のロードパスを設定します。</target>
        </trans-unit>
        <trans-unit id="2efca34d821f10fdc65229cd31d319da2be59d15" translate="yes" xml:space="preserve">
          <source>In a template for Advertiser#account:</source>
          <target state="translated">Advertiser#accountのテンプレートで。</target>
        </trans-unit>
        <trans-unit id="52490bd34ae0086f95f318727490682f974da3a4" translate="yes" xml:space="preserve">
          <source>In a view:</source>
          <target state="translated">景色の中で。</target>
        </trans-unit>
        <trans-unit id="e2736192c03ed00ff774577997cd5dbd2315c098" translate="yes" xml:space="preserve">
          <source>In above examples &quot;dear&quot; gets cut first, but then &lt;code&gt;:separator&lt;/code&gt; prevents it.</source>
          <target state="translated">上記の例では、「dear」が最初にカットされますが、 &lt;code&gt;:separator&lt;/code&gt; がそれを防ぎます。</target>
        </trans-unit>
        <trans-unit id="9ac475981d36c18878c748709fd215ea0991ca21" translate="yes" xml:space="preserve">
          <source>In addition to &quot;before&quot; filters, you can also run filters after an action has been executed, or both before and after.</source>
          <target state="translated">前」のフィルタに加えて、アクションが実行された後にフィルタを実行したり、前と後の両方のフィルタを実行することもできます。</target>
        </trans-unit>
        <trans-unit id="a9f9d35b8c646e0ba939b09862711d8f92f46954" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;beforetypecast#method-i-read_attribute_before_type_cast&quot;&gt;read_attribute_before_type_cast&lt;/a&gt; and &lt;a href=&quot;beforetypecast#method-i-attributes_before_type_cast&quot;&gt;attributes_before_type_cast&lt;/a&gt;, it declares a method for all attributes with the &lt;code&gt;*_before_type_cast&lt;/code&gt; suffix.</source>
          <target state="translated">&lt;a href=&quot;beforetypecast#method-i-read_attribute_before_type_cast&quot;&gt;read_attribute_before_type_cast&lt;/a&gt;および&lt;a href=&quot;beforetypecast#method-i-attributes_before_type_cast&quot;&gt;attributes_before_type_castに&lt;/a&gt;加えて、 &lt;code&gt;*_before_type_cast&lt;/code&gt; サフィックスを持つすべての属性のメソッドを宣言します。</target>
        </trans-unit>
        <trans-unit id="c19c7591f28c7db08cef693a8cc1a57e75f0daf1" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;AbstractController::UrlFor&lt;/code&gt;, this module accesses the HTTP layer to define URL options like the &lt;code&gt;host&lt;/code&gt;. In order to do so, this module requires the host class to implement &lt;code&gt;env&lt;/code&gt; which needs to be Rack-compatible and &lt;code&gt;request&lt;/code&gt; which is either an instance of &lt;code&gt;ActionDispatch::Request&lt;/code&gt; or an object that responds to the &lt;code&gt;host&lt;/code&gt;, &lt;code&gt;optional_port&lt;/code&gt;, &lt;code&gt;protocol&lt;/code&gt; and &lt;code&gt;symbolized_path_parameter&lt;/code&gt; methods.</source>
          <target state="translated">&lt;code&gt;AbstractController::UrlFor&lt;/code&gt; 加えて、このモジュールはHTTPレイヤーにアクセスして、 &lt;code&gt;host&lt;/code&gt; などのURLオプションを定義します。そうするために、このモジュールを実装するホストクラスを必要 &lt;code&gt;env&lt;/code&gt; ラック互換性とする必要がある &lt;code&gt;request&lt;/code&gt; のいずれかのインスタンスである &lt;code&gt;ActionDispatch::Request&lt;/code&gt; またはオブジェクトをそれに応答する &lt;code&gt;host&lt;/code&gt; 、 &lt;code&gt;optional_port&lt;/code&gt; 、 &lt;code&gt;protocol&lt;/code&gt; 及び &lt;code&gt;symbolized_path_parameter&lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="0c8406462341f19d778a61e152839741ecc45929" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;polymorphic_url&lt;/code&gt; and &lt;code&gt;polymorphic_path&lt;/code&gt; methods, a number of prefixed helpers are available as a shorthand to &lt;code&gt;action: &quot;...&quot;&lt;/code&gt; in options. Those are:</source>
          <target state="translated">加えて、 &lt;code&gt;polymorphic_url&lt;/code&gt; と &lt;code&gt;polymorphic_path&lt;/code&gt; 方法、接頭辞ヘルパーの数は速記として利用できる &lt;code&gt;action: &quot;...&quot;&lt;/code&gt; オプションインチ それらは：</target>
        </trans-unit>
        <trans-unit id="4f7e1642dcfee5fa1064709f46ea588c41a50fed" translate="yes" xml:space="preserve">
          <source>In addition to being available in the database, the fixture's data may also be accessed by using a special dynamic method, which has the same name as the model.</source>
          <target state="translated">データベースで利用できるだけでなく、フィクスチャのデータは、モデルと同じ名前を持つ特別な動的メソッドを使ってアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="4ef8b9864032ee34f35123efed8c80f6525320f5" translate="yes" xml:space="preserve">
          <source>In addition to resource routing, Rails has powerful support for routing arbitrary URLs to actions. Here, you don't get groups of routes automatically generated by resourceful routing. Instead, you set up each route separately within your application.</source>
          <target state="translated">Railsはリソースルーティングに加えて、任意のURLをアクションにルーティングするための強力なサポートを持っています。ここでは、リソースフルルーティングによって自動的に生成されるルートのグループは得られません。代わりに、アプリケーション内でそれぞれのルートを個別に設定します。</target>
        </trans-unit>
        <trans-unit id="6fb5ad3102fed665dc6fd095dfd966ded3fa35b8" translate="yes" xml:space="preserve">
          <source>In addition to that, Bootsnap needs to disable the iseq cache due to a bug in the interpreter if running Ruby 2.5. Please make sure to depend on at least Bootsnap 1.4.4 in that case.</source>
          <target state="translated">また、Ruby 2.5 を実行している場合、インタープリタのバグのために iseq キャッシュを無効にする必要があります。その場合は、少なくとも Bootsnap 1.4.4 に依存するようにしてください。</target>
        </trans-unit>
        <trans-unit id="4f0707640817a2197a7219d2ab7981419f6d589b" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;:include_blank&lt;/code&gt; option documented above, this method also supports a &lt;code&gt;:model&lt;/code&gt; option, which defaults to &lt;a href=&quot;../../activesupport/timezone&quot;&gt;ActiveSupport::TimeZone&lt;/a&gt;. This may be used by users to specify a different time zone model object. (See &lt;code&gt;time_zone_options_for_select&lt;/code&gt; for more information.)</source>
          <target state="translated">上記の &lt;code&gt;:include_blank&lt;/code&gt; オプションに加えて、このメソッドは &lt;code&gt;:model&lt;/code&gt; オプションもサポートします。デフォルトは&lt;a href=&quot;../../activesupport/timezone&quot;&gt;ActiveSupport :: TimeZone&lt;/a&gt;です。これは、ユーザーが別のタイムゾーンモデルオブジェクトを指定するために使用できます。（詳細については、 &lt;code&gt;time_zone_options_for_select&lt;/code&gt; を参照してください。）</target>
        </trans-unit>
        <trans-unit id="7f2aa54d391ee44ae00e7344e86d409d232deb52" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;valid?&lt;/code&gt; and &lt;code&gt;invalid?&lt;/code&gt; methods covered earlier, Rails provides a number of methods for working with the &lt;code&gt;errors&lt;/code&gt; collection and inquiring about the validity of objects.</source>
          <target state="translated">&lt;code&gt;valid?&lt;/code&gt; 加えて？そして &lt;code&gt;invalid?&lt;/code&gt; 以前にカバーしたメソッドであるRailsは、 &lt;code&gt;errors&lt;/code&gt; コレクションを操作したり、オブジェクトの有効性を問い合わせたりするためのいくつかのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="b25623f60c158c6ebcefbfc797a4eee78412b2c9" translate="yes" xml:space="preserve">
          <source>In addition to the above special tags, you can supply a final hash of standard HTML options, such as &lt;code&gt;:class&lt;/code&gt;, &lt;code&gt;:id&lt;/code&gt; or &lt;code&gt;:name&lt;/code&gt;:</source>
          <target state="translated">上記の特別なタグに加えて、 &lt;code&gt;:class&lt;/code&gt; 、 &lt;code&gt;:id&lt;/code&gt; 、 &lt;code&gt;:name&lt;/code&gt; などの標準HTMLオプションの最終ハッシュを指定できます。</target>
        </trans-unit>
        <trans-unit id="3ed198b3314abe269e0167da41dc4271ec9cb08d" translate="yes" xml:space="preserve">
          <source>In addition to the basic accessors, query methods are also automatically available on the Active Record object. Query methods allow you to test whether an attribute value is present. Additionally, when dealing with numeric values, a query method will return false if the value is zero.</source>
          <target state="translated">基本的なアクセサに加えて、アクティブレコードオブジェクトでは、クエリメソッドも自動的に利用できます。クエリメソッドを使用すると、属性値が存在するかどうかをテストすることができます。さらに、数値を扱う場合、クエリメソッドは値がゼロの場合に false を返します。</target>
        </trans-unit>
        <trans-unit id="d0a66c08aa6f98ab67dbdc0e69a533f42cbcb5ab" translate="yes" xml:space="preserve">
          <source>In addition to the model, Rails has also made a migration to create the corresponding database table:</source>
          <target state="translated">モデルだけでなく、Railsでは対応するデータベーステーブルを作成するためのマイグレーションも行いました。</target>
        </trans-unit>
        <trans-unit id="659fec6072497b31e669b6f4a5b72d04e9dbb1f8" translate="yes" xml:space="preserve">
          <source>In addition to the routes for magazines, this declaration will also route ads to an &lt;code&gt;AdsController&lt;/code&gt;. The ad URLs require a magazine:</source>
          <target state="translated">雑誌のルートに加えて、この宣言は広告を &lt;code&gt;AdsController&lt;/code&gt; にルーティングします。広告URLには雑誌が必要です。</target>
        </trans-unit>
        <trans-unit id="273d8d34d0d9b7f29ca3c0db3edc85ecc0178162" translate="yes" xml:space="preserve">
          <source>In addition to the standard testing helpers, inheriting from &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; comes with some additional helpers available when writing integration tests. Let's get briefly introduced to the three categories of helpers we get to choose from.</source>
          <target state="translated">標準のテストヘルパーに加えて、 &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; からの継承には、統合テストを作成するときに使用できるいくつかの追加ヘルパーが付属しています。選択できるヘルパーの3つのカテゴリーを簡単に紹介しましょう。</target>
        </trans-unit>
        <trans-unit id="3b76cd292632a3d6bbb2d48a3be80cc0143dce1a" translate="yes" xml:space="preserve">
          <source>In addition to these specific assertions, you also have easy access to various collections that the regular test/unit assertions can be used against. These collections are:</source>
          <target state="translated">これらの特定のアサーションに加えて、通常のテスト/ユニットアサーションが使用できる様々なコレクションに簡単にアクセスできます。これらのコレクションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2f54b6c933dbdba4d46f41b497b370c4dc86bcb9" translate="yes" xml:space="preserve">
          <source>In addition to using the routing helpers, Rails can also create paths and URLs from an array of parameters. For example, suppose you have this set of routes:</source>
          <target state="translated">Railsではルーティングヘルパーを使うだけでなく、パラメータの配列からパスやURLを作成することもできます。たとえば、次のようなルートのセットがあるとします。</target>
        </trans-unit>
        <trans-unit id="9a489e96256e076ad81bed57e5b930cbe1f34754" translate="yes" xml:space="preserve">
          <source>In addition to using the standard template helpers provided, creating custom helpers to extract complicated logic or reusable functionality is strongly encouraged. By default, each controller will include all helpers. These helpers are only accessible on the controller through &lt;code&gt;#helpers&lt;/code&gt;</source>
          <target state="translated">提供されている標準テンプレートヘルパーの使用に加えて、複雑なロジックまたは再利用可能な機能を抽出するカスタムヘルパーを作成することを強くお勧めします。デフォルトでは、各コントローラーにすべてのヘルパーが含まれます。これらのヘルパーは、 &lt;code&gt;#helpers&lt;/code&gt; を介してコントローラーでのみアクセスできます</target>
        </trans-unit>
        <trans-unit id="a653052b951c629d3ca791ef6bf869c9d73b3cf7" translate="yes" xml:space="preserve">
          <source>In addition, default connection parameters of libpq can be set per environment variables. See &lt;a href=&quot;https://www.postgresql.org/docs/current/static/libpq-envars.html&quot;&gt;www.postgresql.org/docs/current/static/libpq-envars.html&lt;/a&gt; .</source>
          <target state="translated">さらに、libpqのデフォルトの接続パラメーターは、環境変数ごとに設定できます。&lt;a href=&quot;https://www.postgresql.org/docs/current/static/libpq-envars.html&quot;&gt;www.postgresql.org/docs/current/static/libpq-envars.htmlを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="86eb91ad68dda50198619f27072e415d3a33306a" translate="yes" xml:space="preserve">
          <source>In addition, parameters can be marked as required and flow through a predefined raise/rescue flow to end up as a &lt;code&gt;400 Bad Request&lt;/code&gt; with no effort.</source>
          <target state="translated">さらに、パラメーターを必須としてマークし、事前定義されたレイズ/レスキューフローを介して、 &lt;code&gt;400 Bad Request&lt;/code&gt; として処理することができます。</target>
        </trans-unit>
        <trans-unit id="37cf4de850ab31fd45274bd24911679d02a7c120" translate="yes" xml:space="preserve">
          <source>In addition, parameters can be marked as required and will flow through a predefined raise/rescue flow that will result in a 400 Bad Request being returned if not all required parameters are passed in.</source>
          <target state="translated">さらに、パラメータは必要なものとしてマークすることができ、必要なパラメータがすべて渡されていない場合には、400 Bad Requestが返されるという結果になる、事前に定義されたレイズ/レスキューのフローを流れることになります。</target>
        </trans-unit>
        <trans-unit id="e1e0d6f445342011a367c696c83fbd3cd58f1a98" translate="yes" xml:space="preserve">
          <source>In addition, the code takes advantage of some of the methods available for an association. We use the &lt;code&gt;create&lt;/code&gt; method on &lt;code&gt;@article.comments&lt;/code&gt; to create and save the comment. This will automatically link the comment so that it belongs to that particular article.</source>
          <target state="translated">さらに、このコードは、関連付けに使用できるいくつかのメソッドを利用しています。 &lt;code&gt;@article.comments&lt;/code&gt; &lt;code&gt;create&lt;/code&gt; メソッドを使用して、コメントを作成して保存します。これにより、コメントが自動的にリンクされ、コメントが特定の記事に属します。</target>
        </trans-unit>
        <trans-unit id="1c5e264b6df4bc7992f34cc32e3948724826c818" translate="yes" xml:space="preserve">
          <source>In all of these cases, if you don't provide the leading host (&lt;code&gt;http://www.example.com&lt;/code&gt;), Rails will take those details from the current request.</source>
          <target state="translated">これらすべてのケースで、主要なホスト（ &lt;code&gt;http://www.example.com&lt;/code&gt; ）を提供しない場合、Railsはそれらの詳細を現在のリクエストから取得します。</target>
        </trans-unit>
        <trans-unit id="e3b2d56224656c1d716fe11607fdcc52c7fafa15" translate="yes" xml:space="preserve">
          <source>In all of these methods, &lt;code&gt;association&lt;/code&gt; is replaced with the symbol passed as the first argument to &lt;code&gt;belongs_to&lt;/code&gt;. For example, given the declaration:</source>
          <target state="translated">これらすべてのメソッドで、 &lt;code&gt;association&lt;/code&gt; は、最初の引数として &lt;code&gt;belongs_to&lt;/code&gt; に渡されたシンボルに置き換えられます。たとえば、次の宣言があるとします。</target>
        </trans-unit>
        <trans-unit id="0267e786c3a2473c923ff186544a4fe59a3bc697" translate="yes" xml:space="preserve">
          <source>In all of these methods, &lt;code&gt;association&lt;/code&gt; is replaced with the symbol passed as the first argument to &lt;code&gt;has_one&lt;/code&gt;. For example, given the declaration:</source>
          <target state="translated">これらのすべてのメソッドで、 &lt;code&gt;association&lt;/code&gt; は &lt;code&gt;has_one&lt;/code&gt; の最初の引数として渡されたシンボルに置き換えられます。たとえば、次の宣言があるとします。</target>
        </trans-unit>
        <trans-unit id="4228a39194d9fa678da42b335b025a8551d95b8d" translate="yes" xml:space="preserve">
          <source>In all of these methods, &lt;code&gt;collection&lt;/code&gt; is replaced with the symbol passed as the first argument to &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;, and &lt;code&gt;collection_singular&lt;/code&gt; is replaced with the singularized version of that symbol. For example, given the declaration:</source>
          <target state="translated">これらの方法の全てにおいて、 &lt;code&gt;collection&lt;/code&gt; 最初の引数として渡された記号に置き換えられ &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; アソシエーション、および &lt;code&gt;collection_singular&lt;/code&gt; は、そのシンボルの単数化バージョンに置き換えられています。たとえば、次の宣言があるとします。</target>
        </trans-unit>
        <trans-unit id="3664f08539ac9bbd1f271c61e976c587e1e5dc16" translate="yes" xml:space="preserve">
          <source>In all of these methods, &lt;code&gt;collection&lt;/code&gt; is replaced with the symbol passed as the first argument to &lt;code&gt;has_many&lt;/code&gt;, and &lt;code&gt;collection_singular&lt;/code&gt; is replaced with the singularized version of that symbol. For example, given the declaration:</source>
          <target state="translated">これらの方法の全てにおいて、 &lt;code&gt;collection&lt;/code&gt; 最初の引数として渡された記号に置き換えられ &lt;code&gt;has_many&lt;/code&gt; の、そして &lt;code&gt;collection_singular&lt;/code&gt; は、そのシンボルの単数化バージョンに置き換えられています。たとえば、次の宣言があるとします。</target>
        </trans-unit>
        <trans-unit id="76ba7bee8ae02e8825975013dd94ae4e48597265" translate="yes" xml:space="preserve">
          <source>In all other environments, we look for it first in &lt;a href=&quot;application&quot;&gt;ENV&lt;/a&gt;, then credentials.secret_key_base, and finally secrets.secret_key_base. For most applications, the correct place to store it is in the encrypted credentials file.</source>
          <target state="translated">他のすべての環境では、最初に&lt;a href=&quot;application&quot;&gt;ENV&lt;/a&gt;で探し、次にcredentials.secret_key_base、最後にsecrets.secret_key_baseを探します。ほとんどのアプリケーションでは、それを保存する正しい場所は暗号化された資格情報ファイルです。</target>
        </trans-unit>
        <trans-unit id="000084df2bdb044e5363d197d064db2690bafce1" translate="yes" xml:space="preserve">
          <source>In another template for Advertiser#buy, we could have:</source>
          <target state="translated">Advertiser#buyの別のテンプレートでは、以下のようにすることができます。</target>
        </trans-unit>
        <trans-unit id="4870aa44e6a6abc63d2b0ec3e900a2aa278eff45" translate="yes" xml:space="preserve">
          <source>In any case, Rails will not create foreign key columns for you. You need to explicitly define them as part of your migrations.</source>
          <target state="translated">いずれにしても、Railsは外部キーカラムを作成してくれません。移行の一環として明示的に定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="1d11d79019970af8991b8284f111043aec00e832" translate="yes" xml:space="preserve">
          <source>In application.rb.</source>
          <target state="translated">application.rbでは</target>
        </trans-unit>
        <trans-unit id="9c59320d50acb675849eb2769c537ff63243a3c9" translate="yes" xml:space="preserve">
          <source>In both cases, the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;class&lt;/code&gt; of the wrapping DOM element are automatically generated, following naming conventions encapsulated by the &lt;a href=&quot;recordidentifier&quot;&gt;RecordIdentifier&lt;/a&gt; methods &lt;a href=&quot;recordidentifier#method-i-dom_id&quot;&gt;dom_id&lt;/a&gt; and &lt;a href=&quot;recordidentifier#method-i-dom_class&quot;&gt;dom_class&lt;/a&gt;:</source>
          <target state="translated">どちらの場合も、ラッピングDOM要素の &lt;code&gt;id&lt;/code&gt; および &lt;code&gt;class&lt;/code&gt; は、&lt;a href=&quot;recordidentifier&quot;&gt;RecordIdentifier&lt;/a&gt;メソッド&lt;a href=&quot;recordidentifier#method-i-dom_id&quot;&gt;dom_id&lt;/a&gt;および&lt;a href=&quot;recordidentifier#method-i-dom_class&quot;&gt;dom_class&lt;/a&gt;によってカプセル化された命名規則に従って自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="668c56622e7f9451f33d9f93e487e3ef6506b55c" translate="yes" xml:space="preserve">
          <source>In broad strokes, this involves deciding what should be sent as the response and calling an appropriate method to create that response. If the response is a full-blown view, Rails also does some extra work to wrap the view in a layout and possibly to pull in partial views. You'll see all of those paths later in this guide.</source>
          <target state="translated">大まかに言うと、これは何をレスポンスとして送信すべきかを決定し、適切なメソッドを呼び出してそのレスポンスを作成することになります。レスポンスが本格的なビューである場合、Railsはビューをレイアウトでラップしたり、場合によっては部分的なビューを引っ張ってきたりするための余分な作業も行います。これらのパスについては、このガイドの後半ですべて見ていきます。</target>
        </trans-unit>
        <trans-unit id="f04c0e7fc642bc09b37b52db8f26f85e840c7be4" translate="yes" xml:space="preserve">
          <source>In case &lt;a href=&quot;core#method-c-configurations&quot;&gt;ActiveRecord::Base.configurations&lt;/a&gt; is set (Rails automatically loads the contents of config/database.yml into it), a symbol can also be given as argument, representing a key in the configuration hash:</source>
          <target state="translated">&lt;a href=&quot;core#method-c-configurations&quot;&gt;ActiveRecord :: Base.configurations&lt;/a&gt;が設定されている場合（Railsはconfig / database.ymlの内容をそれに自動的にロードします）、構成ハッシュのキーを表すシンボルを引数として指定することもできます。</target>
        </trans-unit>
        <trans-unit id="2914a351943b11d907ce8804814e83c9455d5f5b" translate="yes" xml:space="preserve">
          <source>In case if you don't want the helper to generate this hidden field you can specify &lt;code&gt;include_hidden: false&lt;/code&gt; option.</source>
          <target state="translated">ヘルパーにこの非表示フィールドを生成させたくない場合は、 &lt;code&gt;include_hidden: false&lt;/code&gt; オプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="53b57a67e8f0b195f0c2f8ec972106aabad30b2f" translate="yes" xml:space="preserve">
          <source>In case of collision the key in the hash of the argument wins in &lt;code&gt;merge&lt;/code&gt;. You can support option hashes with default values in a compact way with this idiom:</source>
          <target state="translated">衝突の場合、引数のハッシュのキー &lt;code&gt;merge&lt;/code&gt; 勝ちます。このイディオムを使用すると、デフォルト値のオプションハッシュをコンパクトな方法でサポートできます。</target>
        </trans-unit>
        <trans-unit id="5747e87b6b5262401689f735501c016f96edb770" translate="yes" xml:space="preserve">
          <source>In case of key collision, the value will be the one most recently inserted into the hash:</source>
          <target state="translated">キーが衝突した場合、その値はハッシュに最も最近挿入されたものになります。</target>
        </trans-unit>
        <trans-unit id="ead9150d71466c198079df9606375a348f7545f7" translate="yes" xml:space="preserve">
          <source>In case the &lt;code&gt;reselect&lt;/code&gt; clause is not used,</source>
          <target state="translated">場合に &lt;code&gt;reselect&lt;/code&gt; 句は使用されず、</target>
        </trans-unit>
        <trans-unit id="b99031f5395107cae850a34182a86c583a5e8bbc" translate="yes" xml:space="preserve">
          <source>In case the &lt;code&gt;rewhere&lt;/code&gt; clause is not used,</source>
          <target state="translated">場合 &lt;code&gt;rewhere&lt;/code&gt; の句は使用されず、</target>
        </trans-unit>
        <trans-unit id="1b52403da0263fbc97fea21478c66a6efee34f30" translate="yes" xml:space="preserve">
          <source>In case there are multiple transactional callbacks as seen below, the order is reversed.</source>
          <target state="translated">以下のように複数のトランザクションコールバックがある場合は、順序が逆になります。</target>
        </trans-unit>
        <trans-unit id="635a341b8073e09a13f08f7515b6ef51d59d28df" translate="yes" xml:space="preserve">
          <source>In case you do need to use this directly, it's instantiated using a hash of transformations where the key is the command and the value is the arguments. Example:</source>
          <target state="translated">これを直接使用する必要がある場合は、キーがコマンド、値が引数の変換ハッシュを使ってインスタンス化されます。例を示します。</target>
        </trans-unit>
        <trans-unit id="ab38fdbdc2be5e311392ae9dec66807dbc33331a" translate="yes" xml:space="preserve">
          <source>In classic mode, constant autoloading is not thread-safe, though Rails has locks in place for example to make web requests thread-safe when autoloading is enabled, as it is common in &lt;code&gt;development&lt;/code&gt; mode.</source>
          <target state="translated">クラシックモードでは、定数オートロードはスレッドセーフではありませんが、自動ロードが有効になっている場合、Railsにはロックがあり、たとえばWebリクエストをスレッドセーフにすることができます。これは、 &lt;code&gt;development&lt;/code&gt; モードでは一般的です。</target>
        </trans-unit>
        <trans-unit id="72a6c46a95f9b3a44f98f5f588dade7b6ceb8aa0" translate="yes" xml:space="preserve">
          <source>In designing a data model, you will sometimes find a model that should have a relation to itself. For example, you may want to store all employees in a single database model, but be able to trace relationships such as between manager and subordinates. This situation can be modeled with self-joining associations:</source>
          <target state="translated">データモデルを設計していると、それ自体に関係性を持たせるべきモデルが出てくることがあります。例えば、すべての従業員を単一のデータベースモデルに格納したいが、マネージャーと部下の間のような関係をトレースできるようにしたい場合があるかもしれません。このような状況は、自己結合連想を使ってモデル化することができます。</target>
        </trans-unit>
        <trans-unit id="1dd40f53ba75e011c7a28f5ec65b729053cc27ab" translate="yes" xml:space="preserve">
          <source>In development and test, this is randomly generated and stored in a temporary file in &lt;code&gt;tmp/development_secret.txt&lt;/code&gt;.</source>
          <target state="translated">開発およびテストでは、これはランダムに生成され、 &lt;code&gt;tmp/development_secret.txt&lt;/code&gt; の一時ファイルに保存されます。</target>
        </trans-unit>
        <trans-unit id="7dc3433693fc4166beebd7acff85f8551ec0ef84" translate="yes" xml:space="preserve">
          <source>In development mode (which is what you're working in by default), Rails reloads your application with every browser request, so there's no need to stop and restart the web server when a change is made.</source>
          <target state="translated">開発モード(デフォルトではこれで作業しています)では、Railsはブラウザからのリクエストがあるたびにアプリケーションをリロードするので、変更があったときにWebサーバを停止して再起動する必要はありません。</target>
        </trans-unit>
        <trans-unit id="3cbbe35a8e7fc2586eee8dc5f2c42cbf40cb2cdf" translate="yes" xml:space="preserve">
          <source>In development mode, assets are served as separate files in the order they are specified in the manifest file.</source>
          <target state="translated">開発モードでは、アセットはマニフェスト ファイルで指定された順番で別のファイルとして提供されます。</target>
        </trans-unit>
        <trans-unit id="d0117c9022aff8e1edf96d1640e0ef23c9aa8e0c" translate="yes" xml:space="preserve">
          <source>In development mode, or if the asset pipeline is disabled, when these files are requested they are processed by the processors provided by the &lt;code&gt;coffee-script&lt;/code&gt; and &lt;code&gt;sass&lt;/code&gt; gems and then sent back to the browser as JavaScript and CSS respectively. When asset pipelining is enabled, these files are preprocessed and placed in the &lt;code&gt;public/assets&lt;/code&gt; directory for serving by either the Rails app or web server.</source>
          <target state="translated">開発モードの場合、またはアセットパイプラインが無効になっている場合、これらのファイルが要求されると、それらは &lt;code&gt;coffee-script&lt;/code&gt; および &lt;code&gt;sass&lt;/code&gt; gems によって提供されるプロセッサーによって処理され、JavaScriptおよびCSSとしてそれぞれブラウザーに送り返されます。アセットのパイプライン処理が有効になっている場合、これらのファイルは前処理され、 &lt;code&gt;public/assets&lt;/code&gt; ディレクトリに配置されて、RailsアプリまたはWebサーバーのいずれかから提供されます。</target>
        </trans-unit>
        <trans-unit id="3786ad74fa4fe0940b68fbf7d2f8c00871af10e7" translate="yes" xml:space="preserve">
          <source>In each of these cases, the named routes remain the same as if you did not use &lt;code&gt;scope&lt;/code&gt;. In the last case, the following paths map to &lt;code&gt;ArticlesController&lt;/code&gt;:</source>
          <target state="translated">これらの各ケースで、名前付きルートは、 &lt;code&gt;scope&lt;/code&gt; 使用しなかった場合と同じままです。最後のケースでは、次のパスが &lt;code&gt;ArticlesController&lt;/code&gt; にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="dc0da6ec76022c06eb655cd87ccef507cdb3d8d8" translate="yes" xml:space="preserve">
          <source>In each of these cases, the named routes remain the same as if you did not use scope. In the last case, the following paths map to &lt;code&gt;PostsController&lt;/code&gt;:</source>
          <target state="translated">これらのいずれの場合でも、名前付きルートは、スコープを使用しなかった場合と同じままです。最後のケースでは、次のパスが &lt;code&gt;PostsController&lt;/code&gt; にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="d609cba35afc0d9cbede9275222dd86903f0402f" translate="yes" xml:space="preserve">
          <source>In every controller there are two accessor methods pointing to the request and the response objects associated with the request cycle that is currently in execution. The &lt;code&gt;request&lt;/code&gt; method contains an instance of &lt;code&gt;ActionDispatch::Request&lt;/code&gt; and the &lt;code&gt;response&lt;/code&gt; method returns a response object representing what is going to be sent back to the client.</source>
          <target state="translated">すべてのコントローラーには、現在実行中の要求サイクルに関連付けられた要求オブジェクトと応答オブジェクトを指す2つのアクセサーメソッドがあります。 &lt;code&gt;request&lt;/code&gt; 方法はのインスタンスが含まれ &lt;code&gt;ActionDispatch::Request&lt;/code&gt; と &lt;code&gt;response&lt;/code&gt; 方法は、クライアントに送信されようとしているものを示す応答オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="10d1c3f7b24ff0cd15fba1526043f7d57ca81a41" translate="yes" xml:space="preserve">
          <source>In fact, in the BooksController class, inside of the update action where we want to render the edit template if the book does not update successfully, all of the following render calls would all render the &lt;code&gt;edit.html.erb&lt;/code&gt; template in the &lt;code&gt;views/books&lt;/code&gt; directory:</source>
          <target state="translated">実際、BooksControllerクラスでは、本が正常に更新されなかった場合に編集テンプレートをレンダリングするupdateアクション内で、次のすべてのレンダリング呼び出しにより、 &lt;code&gt;views/books&lt;/code&gt; に &lt;code&gt;edit.html.erb&lt;/code&gt; テンプレートがすべてレンダリングされます。ディレクトリ：</target>
        </trans-unit>
        <trans-unit id="2a136ee58e677ffa9a8948ad3664e874d61587d7" translate="yes" xml:space="preserve">
          <source>In fact, the &lt;code&gt;options&lt;/code&gt; method here does quite a lot. This method is defined in &lt;code&gt;Rack::Server&lt;/code&gt; like this:</source>
          <target state="translated">実際、ここでの &lt;code&gt;options&lt;/code&gt; メソッドはかなり多くのことを行います。このメソッドは、 &lt;code&gt;Rack::Server&lt;/code&gt; ように定義されています。</target>
        </trans-unit>
        <trans-unit id="abd53ed7ec9bbce4777f7ebf39b859fff4f5d42f" translate="yes" xml:space="preserve">
          <source>In fact, the result string is wrapped in an instance of &lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt;.</source>
          <target state="translated">実際、結果の文字列は &lt;code&gt;ActiveSupport::Multibyte::Chars&lt;/code&gt; インスタンスでラップされます。</target>
        </trans-unit>
        <trans-unit id="0e8382f13be7db86341dbb74cd26348b30c534d2" translate="yes" xml:space="preserve">
          <source>In fact, this is very close to the syntax that Rails uses to declare this association. You've already seen the line of code inside the &lt;code&gt;Comment&lt;/code&gt; model (app/models/comment.rb) that makes each comment belong to an Article:</source>
          <target state="translated">実際、これはRailsがこの関連付けを宣言するために使用する構文に非常に近いものです。各コメントがArticleに属するようにする &lt;code&gt;Comment&lt;/code&gt; モデル（app / models / comment.rb）内のコード行はすでに見ました。</target>
        </trans-unit>
        <trans-unit id="cdd8ad375719e4ab6835063d47e1a972802da964" translate="yes" xml:space="preserve">
          <source>In general there is no such thing as plug-n-play security. Security depends on the people using the framework, and sometimes on the development method. And it depends on all layers of a web application environment: The back-end storage, the web server, and the web application itself (and possibly other layers or applications).</source>
          <target state="translated">一般的にプラグアンドプレイのセキュリティというものは存在しません。セキュリティはフレームワークを使う人に依存し、時には開発方法にも依存します。そして、それはウェブアプリケーション環境のすべてのレイヤーに依存します。バックエンドストレージ、ウェブサーバ、ウェブアプリケーション自体(そして、おそらく他のレイヤーやアプリケーション)です。</target>
        </trans-unit>
        <trans-unit id="7859df51f6b2aa1d976967648705ec81c4e55e0c" translate="yes" xml:space="preserve">
          <source>In general, Rails encourages using resources objects instead of declaring routes manually. For more information about routing, see &lt;a href=&quot;routing&quot;&gt;Rails Routing from the Outside In&lt;/a&gt;.</source>
          <target state="translated">一般に、Railsでは、ルートを手動で宣言する代わりに、リソースオブジェクトを使用することを推奨しています。ルーティングの詳細については、「&lt;a href=&quot;routing&quot;&gt;外部からのRails&lt;/a&gt;ルーティング」を参照してください。</target>
        </trans-unit>
        <trans-unit id="50540acc55f3de829c0940388140fb1e249e65eb" translate="yes" xml:space="preserve">
          <source>In general, applications do not need to use the API of Zeitwerk directly. Rails sets things up according to the existing contract: &lt;code&gt;config.autoload_paths&lt;/code&gt;, &lt;code&gt;config.cache_classes&lt;/code&gt;, etc.</source>
          <target state="translated">一般に、アプリケーションはZeitwerkのAPIを直接使用する必要はありません。Railsは、既存のコントラクト（ &lt;code&gt;config.autoload_paths&lt;/code&gt; 、 &lt;code&gt;config.cache_classes&lt;/code&gt; など）に従って設定します。</target>
        </trans-unit>
        <trans-unit id="009e5cde90877d092ff3fb64ff8f83cd2b9360b9" translate="yes" xml:space="preserve">
          <source>In general, editing existing migrations is not a good idea. You will be creating extra work for yourself and your co-workers and cause major headaches if the existing version of the migration has already been run on production machines. Instead, you should write a new migration that performs the changes you require. Editing a freshly generated migration that has not yet been committed to source control (or, more generally, which has not been propagated beyond your development machine) is relatively harmless.</source>
          <target state="translated">一般的に、既存のマイグレーションを編集することは良い考えではありません。既存のバージョンのマイグレーションがすでに本番マシンで実行されている場合、自分や同僚のために余分な作業が発生し、大きな頭痛の種となります。その代わりに、必要な変更を実行する新しいマイグレーションを書くべきです。まだソース管理にコミットされていない(あるいは、より一般的には、開発マシンを超えて伝搬されていない)新しく生成されたマイグレーションを編集することは、比較的無害です。</target>
        </trans-unit>
        <trans-unit id="cfa4f37960ac63db4c1e0581d458aa91965fd49b" translate="yes" xml:space="preserve">
          <source>In general, the work of configuring Rails means configuring the components of Rails, as well as configuring Rails itself. The configuration file &lt;code&gt;config/application.rb&lt;/code&gt; and environment-specific configuration files (such as &lt;code&gt;config/environments/production.rb&lt;/code&gt;) allow you to specify the various settings that you want to pass down to all of the components.</source>
          <target state="translated">一般に、Railsを構成する作業は、Railsのコンポーネントを構成することと、Rails自体を構成することを意味します。構成ファイル &lt;code&gt;config/application.rb&lt;/code&gt; と環境固有の構成ファイル（ &lt;code&gt;config/environments/production.rb&lt;/code&gt; など）を使用すると、すべてのコンポーネントに渡すさまざまな設定を指定できます。</target>
        </trans-unit>
        <trans-unit id="5ba2b0f04d81bdf445c82110d1b2a735d4926f1c" translate="yes" xml:space="preserve">
          <source>In general, this approach is far less reliable than using the language header and is not recommended for most web applications.</source>
          <target state="translated">一般的に、このアプローチは言語ヘッダを使用するよりもはるかに信頼性が低く、ほとんどのウェブアプリケーションにはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="05d3f7c12b05724d16ed0c24ed8019b8a5ebfbc8" translate="yes" xml:space="preserve">
          <source>In general, views will be rendered in the &lt;code&gt;main&lt;/code&gt; layout</source>
          <target state="translated">一般的に、ビューは &lt;code&gt;main&lt;/code&gt; レイアウトでレンダリングされます</target>
        </trans-unit>
        <trans-unit id="561ed79dc42d8cf5921bed84b25cc1b1d859875b" translate="yes" xml:space="preserve">
          <source>In general, you should use the &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; methods to constrain a route to a particular verb. You can use the &lt;code&gt;match&lt;/code&gt; method with the &lt;code&gt;:via&lt;/code&gt; option to match multiple verbs at once:</source>
          <target state="translated">一般に、ルートを特定の動詞に制限するには、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;post&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; 、 &lt;code&gt;patch&lt;/code&gt; 、および &lt;code&gt;delete&lt;/code&gt; メソッドを使用する必要があります。 &lt;code&gt;:via&lt;/code&gt; オプションを指定して &lt;code&gt;match&lt;/code&gt; メソッドを使用すると、複数の動詞を一度に照合できます。</target>
        </trans-unit>
        <trans-unit id="1bd774faaf94fcd3bfa62b756b86b0055c4640b8" translate="yes" xml:space="preserve">
          <source>In many cases you will want to wrap the above in another helper, so you could do something like the following:</source>
          <target state="translated">多くの場合、上記を別のヘルパーでラップしたいと思うでしょうから、以下のようなことができます。</target>
        </trans-unit>
        <trans-unit id="7a4038dff4cecd3f066b2d24d2f7447a5cd95089" translate="yes" xml:space="preserve">
          <source>In many languages &amp;mdash; including English &amp;mdash; there are only two forms, a singular and a plural, for a given string, e.g. &quot;1 message&quot; and &quot;2 messages&quot;. Other languages (&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#ar&quot;&gt;Arabic&lt;/a&gt;, &lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#ja&quot;&gt;Japanese&lt;/a&gt;, &lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#ru&quot;&gt;Russian&lt;/a&gt; and many more) have different grammars that have additional or fewer &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;plural forms&lt;/a&gt;. Thus, the I18n API provides a flexible pluralization feature.</source>
          <target state="translated">英語を含む多くの言語では、「1メッセージ」と「2メッセージ」のように、特定の文字列に対して単数形と複数形の2つの形式しかありません。他の言語（&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#ar&quot;&gt;アラビア語&lt;/a&gt;、&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#ja&quot;&gt;日本語&lt;/a&gt;、&lt;a href=&quot;http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html#ru&quot;&gt;ロシア語&lt;/a&gt;など）では、文法が異なり、&lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;複数形の&lt;/a&gt;数が増減します。したがって、I18n APIは柔軟な複数化機能を提供します。</target>
        </trans-unit>
        <trans-unit id="80fd14ee0705f257e5f31eb4d9dd647ce74d257c" translate="yes" xml:space="preserve">
          <source>In many of the examples just shown, the &lt;code&gt;:model&lt;/code&gt; passed to &lt;code&gt;form_with&lt;/code&gt; is a &lt;em&gt;resource&lt;/em&gt;. It corresponds to a set of RESTful routes, most likely defined via &lt;code&gt;resources&lt;/code&gt; in &lt;code&gt;config/routes.rb&lt;/code&gt;.</source>
          <target state="translated">今示した例の多くでは、 &lt;code&gt;form_with&lt;/code&gt; に渡される &lt;code&gt;:model&lt;/code&gt; は&lt;em&gt;リソース&lt;/em&gt;です。これは、RESTfulなルートのセットに対応し、おそらく &lt;code&gt;config/routes.rb&lt;/code&gt; の &lt;code&gt;resources&lt;/code&gt; を介して定義されます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ef6ef665603c985acc7fe36f2e58ee464bdd2d68" translate="yes" xml:space="preserve">
          <source>In many ways this is exactly what it is. This file is created by inspecting the database and expressing its structure using &lt;code&gt;create_table&lt;/code&gt;, &lt;code&gt;add_index&lt;/code&gt;, and so on.</source>
          <target state="translated">多くの点で、これはまさにそれです。このファイルは、データベースを検査し、 &lt;code&gt;create_table&lt;/code&gt; 、 &lt;code&gt;add_index&lt;/code&gt; などを使用してその構造を表現することによって作成されます。</target>
        </trans-unit>
        <trans-unit id="f1503f11656b8d1ff7d917aa789c3193af3aea8f" translate="yes" xml:space="preserve">
          <source>In most cases form controls will be tied to a specific model and as you might expect Rails provides helpers tailored for that purpose. Consistent with other form helpers, when dealing with a model object drop the &lt;code&gt;_tag&lt;/code&gt; suffix from &lt;code&gt;select_tag&lt;/code&gt;:</source>
          <target state="translated">ほとんどの場合、フォームコントロールは特定のモデルに関連付けられ、Railsはその目的に合わせて調整されたヘルパーを提供します。他のフォームヘルパーと同じように、モデルオブジェクトを処理するときは、 &lt;code&gt;_tag&lt;/code&gt; から &lt;code&gt;select_tag&lt;/code&gt; サフィックスを削除します。</target>
        </trans-unit>
        <trans-unit id="283fed243a06178888cb8100163ceca9e14989cb" translate="yes" xml:space="preserve">
          <source>In most cases, fetching large number of records can be performed efficiently using the &lt;a href=&quot;../batches&quot;&gt;ActiveRecord::Batches&lt;/a&gt; methods. See &lt;a href=&quot;../batches&quot;&gt;ActiveRecord::Batches&lt;/a&gt; for more information.</source>
          <target state="translated">ほとんどの場合、多数のレコードのフェッチは、&lt;a href=&quot;../batches&quot;&gt;ActiveRecord :: Batches&lt;/a&gt;メソッドを使用して効率的に実行できます。詳細については、&lt;a href=&quot;../batches&quot;&gt;ActiveRecord :: Batches&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a148fbaa7aee69002a1ac5f21efa423a9e3c30e" translate="yes" xml:space="preserve">
          <source>In most cases, the &lt;code&gt;ActionController::Base#render&lt;/code&gt; method does the heavy lifting of rendering your application's content for use by a browser. There are a variety of ways to customize the behavior of &lt;code&gt;render&lt;/code&gt;. You can render the default view for a Rails template, or a specific template, or a file, or inline code, or nothing at all. You can render text, JSON, or XML. You can specify the content type or HTTP status of the rendered response as well.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;ActionController::Base#render&lt;/code&gt; メソッドは、ブラウザで使用するためにアプリケーションのコンテンツをレンダリングするという面倒な作業を行います。 &lt;code&gt;render&lt;/code&gt; の動作をカスタマイズするには、さまざまな方法があります。 Railsテンプレート、特定のテンプレート、ファイル、またはインラインコードのデフォルトビューをレンダリングすることも、何もレンダリングしないこともできます。テキスト、JSON、またはXMLをレンダリングできます。レンダリングされた応答のコンテンツタイプまたはHTTPステータスも指定できます。</target>
        </trans-unit>
        <trans-unit id="845cacdf9af459c9ecab3fe3b4510b4778e6725a" translate="yes" xml:space="preserve">
          <source>In most database systems, on selecting fields with &lt;code&gt;distinct&lt;/code&gt; from a result set using methods like &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;pluck&lt;/code&gt; and &lt;code&gt;ids&lt;/code&gt;; the &lt;code&gt;order&lt;/code&gt; method will raise an &lt;code&gt;ActiveRecord::StatementInvalid&lt;/code&gt; exception unless the field(s) used in &lt;code&gt;order&lt;/code&gt; clause are included in the select list. See the next section for selecting fields from the result set.</source>
          <target state="translated">ほとんどのデータベースシステムでは、 &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;pluck&lt;/code&gt; 、 &lt;code&gt;ids&lt;/code&gt; などのメソッドを使用して、結果セットとは &lt;code&gt;distinct&lt;/code&gt; フィールドを選択します。 &lt;code&gt;order&lt;/code&gt; 方法は上がります &lt;code&gt;ActiveRecord::StatementInvalid&lt;/code&gt; に使用されるフィールド（複数可）しない限り、例外を &lt;code&gt;order&lt;/code&gt; 句が選択リストに含まれています。結果セットからフィールドを選択するには、次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9cb5f676660b8c29fc4145374c10ee3d76b54507" translate="yes" xml:space="preserve">
          <source>In order for this example to work, you have to add the PDF MIME type to Rails. This can be done by adding the following line to the file &lt;code&gt;config/initializers/mime_types.rb&lt;/code&gt;:</source>
          <target state="translated">この例を機能させるには、PDF MIMEタイプをRailsに追加する必要があります。これは、ファイル &lt;code&gt;config/initializers/mime_types.rb&lt;/code&gt; に次の行を追加することで実行できます。</target>
        </trans-unit>
        <trans-unit id="1c259d151655b1917e97acadee79d5579af946a0" translate="yes" xml:space="preserve">
          <source>In order to change engine's priority you can use &lt;code&gt;config.railties_order&lt;/code&gt; in the main application. It will affect the priority of loading views, helpers, assets, and all the other files related to engine or application.</source>
          <target state="translated">エンジンの優先度を変更するには、メインアプリケーションで &lt;code&gt;config.railties_order&lt;/code&gt; を使用できます。これは、ビュー、ヘルパー、アセット、およびエンジンやアプリケーションに関連するその他すべてのファイルの読み込みの優先度に影響します。</target>
        </trans-unit>
        <trans-unit id="f7199abd7ed7d1a2fbcfd4e2d260b9e8d6a648b3" translate="yes" xml:space="preserve">
          <source>In order to correctly invalidate the cache, you need to properly define the caching dependencies. Rails is clever enough to handle common cases so you don't have to specify anything. However, sometimes, when you're dealing with custom helpers for instance, you need to explicitly define them.</source>
          <target state="translated">キャッシュを正しく無効にするためには、キャッシュの依存関係を正しく定義する必要があります。Railsは一般的なケースを扱うのに十分賢いので、何も指定する必要はありません。しかし、たとえばカスタムヘルパーを扱う場合など、明示的に定義しなければならないこともあります。</target>
        </trans-unit>
        <trans-unit id="d0a530ba61d4811b2b142c8b4e65c31a5d957a7f" translate="yes" xml:space="preserve">
          <source>In order to develop secure web applications you have to keep up to date on all layers and know your enemies. To keep up to date subscribe to security mailing lists, read security blogs, and make updating and security checks a habit (check the &lt;a href=&quot;#additional-resources&quot;&gt;Additional Resources&lt;/a&gt; chapter). It is done manually because that's how you find the nasty logical security problems.</source>
          <target state="translated">安全なWebアプリケーションを開発するには、すべてのレイヤーを最新の状態に保ち、敵を知る必要があります。セキュリティメーリングリストを最新の状態に保つには、セキュリティブログを読み、更新とセキュリティチェックを習慣にしてください（「&lt;a href=&quot;#additional-resources&quot;&gt;その他のリソース」の&lt;/a&gt;章を参照してください）。それが厄介な論理的セキュリティ問題を見つける方法だからです。</target>
        </trans-unit>
        <trans-unit id="c80eb3d9bc865a25159d18d747353ab8f8e5787e" translate="yes" xml:space="preserve">
          <source>In order to find the first address that is (probably) accurate, we take the list of IPs, remove known and trusted proxies, and then take the last address left, which was presumably set by one of those proxies.</source>
          <target state="translated">(おそらく)正確な最初のアドレスを見つけるために、IPのリストを取得し、既知の信頼できるプロキシを削除し、最後に残ったアドレスを取得します。</target>
        </trans-unit>
        <trans-unit id="6354c48f70c32d4750012cacd9da8ac279600087" translate="yes" xml:space="preserve">
          <source>In order to get a ROLLBACK for the nested transaction you may ask for a real sub-transaction by passing &lt;code&gt;requires_new: true&lt;/code&gt;. If anything goes wrong, the database rolls back to the beginning of the sub-transaction without rolling back the parent transaction. If we add it to the previous example:</source>
          <target state="translated">ネストされたトランザクションのROLLBACKを取得するには、 &lt;code&gt;requires_new: true&lt;/code&gt; を渡して実際のサブトランザクションを要求できます。何か問題が発生した場合、データベースは親トランザクションをロールバックせずにサブトランザクションの最初にロールバックします。前の例に追加すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="410e25b9e9888fb013e4964fa7a83949db21bdb0" translate="yes" xml:space="preserve">
          <source>In order to get around this problem, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; will emulate the effect of nested transactions, by using savepoints: &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/savepoint.html&quot;&gt;dev.mysql.com/doc/refman/5.7/en/savepoint.html&lt;/a&gt;Savepoints are supported by MySQL and PostgreSQL. SQLite3 version &amp;gt;= '3.6.8' supports savepoints.</source>
          <target state="translated">この問題を回避するために、&lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;トランザクション&lt;/a&gt;は、セーブポイントを使用して、ネストされたトランザクションの効果をエミュレートします&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/savepoint.html&quot;&gt;。dev.mysql.com&lt;/a&gt; / doc / refman / 5.7 / en / savepoint.htmlセーブポイントは、MySQLおよびPostgreSQLでサポートされています。SQLite3バージョン&amp;gt; = '3.6.8'はセーブポイントをサポートしています。</target>
        </trans-unit>
        <trans-unit id="dd11742e858f6334bdad83633d6fa6c8c53354ab" translate="yes" xml:space="preserve">
          <source>In order to have a near-zero default footprint, Active Support does not load anything by default. It is broken in small pieces so that you can load just what you need, and also has some convenience entry points to load related extensions in one shot, even everything.</source>
          <target state="translated">デフォルトのフットプリントをほぼゼロにするために、Active Support はデフォルトでは何もロードしません。必要なものだけをロードできるように細分化されていて、関連する拡張機能を一発でロードできるように便利なエントリーポイントもいくつか用意されていて、すべてのものをロードできるようになっています。</target>
        </trans-unit>
        <trans-unit id="d82c837ad4838a769498f05c39e5cc7258777bc1" translate="yes" xml:space="preserve">
          <source>In order to load &lt;code&gt;ApplicationController&lt;/code&gt;, Rails iterates over &lt;code&gt;autoload_paths&lt;/code&gt;. First it checks if &lt;code&gt;app/assets/application_controller.rb&lt;/code&gt; exists. If it does not, which is normally the case, it continues and finds &lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ApplicationController&lt;/code&gt; をロードするために、Railsは &lt;code&gt;autoload_paths&lt;/code&gt; を反復処理します。まず、 &lt;code&gt;app/assets/application_controller.rb&lt;/code&gt; が存在するかどうかを確認します。そうでない場合、通常はそうですが、続行して &lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt; を見つけます。</target>
        </trans-unit>
        <trans-unit id="4446192ce96a4398b61fcdab3b6475fcb7381eb8" translate="yes" xml:space="preserve">
          <source>In order to make your custom transliterations available, you must set them as the &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; i18n key:</source>
          <target state="translated">カスタム &lt;code&gt;i18n.transliterate.rule&lt;/code&gt; 変換を使用可能にするには、それらをi18n.transliterate.rule i18nキーとして設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="73d914ea93f06da557242e0d8ce9a09c0b88f5d6" translate="yes" xml:space="preserve">
          <source>In order to mitigate SSL attacks, &lt;code&gt;form_authenticity_token&lt;/code&gt; is now masked so that it varies with each request. Thus, tokens are validated by unmasking and then decrypting. As a result, any strategies for verifying requests from non-rails forms that relied on a static session CSRF token have to take this into account.</source>
          <target state="translated">SSL攻撃を軽減するために、 &lt;code&gt;form_authenticity_token&lt;/code&gt; がマスクされ、リクエストごとに変化するようになりました。したがって、トークンは、マスクを解除してから復号化することによって検証されます。その結果、静的セッションCSRFトークンに依存する非Railsフォームからのリクエストを検証するための戦略では、これを考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc82d22a9f284ef62e02e9541120ccbb65275b2b" translate="yes" xml:space="preserve">
          <source>In order to mitigate such attacks, &lt;em&gt;display a generic error message on forgot-password pages, too&lt;/em&gt;. Moreover, you can &lt;em&gt;require to enter a CAPTCHA after a number of failed logins from a certain IP address&lt;/em&gt;. Note, however, that this is not a bullet-proof solution against automatic programs, because these programs may change their IP address exactly as often. However, it raises the barrier of an attack.</source>
          <target state="translated">このような攻撃を緩和する&lt;em&gt;には、パスワードを忘れたページにも一般的なエラーメッセージを表示します&lt;/em&gt;。さらに、&lt;em&gt;特定のIPアドレスからのログインに失敗した後、CAPTCHAを入力するよう要求する&lt;/em&gt;ことができ&lt;em&gt;ます&lt;/em&gt;。ただし、これらのプログラムはIPアドレスを正確に頻繁に変更する可能性があるため、これは自動プログラムに対する防弾ソリューションではないことに注意してください。ただし、攻撃の障壁は高くなります。</target>
        </trans-unit>
        <trans-unit id="b8932dfdb433984f20a34dffa003cc8435f6ddf0" translate="yes" xml:space="preserve">
          <source>In order to remove existing data from the database, Rails tries to disable referential integrity triggers (like foreign keys and check constraints). If you are getting annoying permission errors on running tests, make sure the database user has privilege to disable these triggers in testing environment. (In PostgreSQL, only superusers can disable all triggers. Read more about PostgreSQL permissions &lt;a href=&quot;http://blog.endpoint.com/2012/10/postgres-system-triggers-error.html&quot;&gt;here&lt;/a&gt;).</source>
          <target state="translated">Railsは、データベースから既存のデータを削除するために、参照整合性トリガー（外部キーやチェック制約など）を無効にしようとします。テストの実行時に迷惑な権限エラーが発生する場合は、データベースユーザーがテスト環境でこれらのトリガーを無効にする権限を持っていることを確認してください。 （PostgreSQLでは、スーパーユーザーのみがすべてのトリガーを無効にできます。PostgreSQLの権限について詳しくは、&lt;a href=&quot;http://blog.endpoint.com/2012/10/postgres-system-triggers-error.html&quot;&gt;こちらをご覧ください&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="591a364b06e24638cd2bbe248317d0147d336890" translate="yes" xml:space="preserve">
          <source>In order to run your tests, your test database will need to have the current structure. The test helper checks whether your test database has any pending migrations. It will try to load your &lt;code&gt;db/schema.rb&lt;/code&gt; or &lt;code&gt;db/structure.sql&lt;/code&gt; into the test database. If migrations are still pending, an error will be raised. Usually this indicates that your schema is not fully migrated. Running the migrations against the development database (&lt;code&gt;rails db:migrate&lt;/code&gt;) will bring the schema up to date.</source>
          <target state="translated">テストを実行するには、テストデータベースが現在の構造である必要があります。テストヘルパーは、テストデータベースに保留中の移行があるかどうかを確認します。 &lt;code&gt;db/schema.rb&lt;/code&gt; または &lt;code&gt;db/structure.sql&lt;/code&gt; をテストデータベースにロードしようとします。移行がまだ保留中の場合、エラーが発生します。通常、これはスキーマが完全に移行されていないことを示しています。開発データベース（ &lt;code&gt;rails db:migrate&lt;/code&gt; ）に対してマイグレーションを実行すると、スキーマが最新になります。</target>
        </trans-unit>
        <trans-unit id="58f575461fcf64d202b669e6b7c232ec89e9af74" translate="yes" xml:space="preserve">
          <source>In order to test helpers, all you need to do is check that the output of the helper method matches what you'd expect. Tests related to the helpers are located under the &lt;code&gt;test/helpers&lt;/code&gt; directory.</source>
          <target state="translated">ヘルパーをテストするために必要なことは、ヘルパーメソッドの出力が期待どおりであることを確認することだけです。ヘルパーに関連するテストは、 &lt;code&gt;test/helpers&lt;/code&gt; ディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="5ceb97c0e3b59e713cb40747cecd51d611b98bbe" translate="yes" xml:space="preserve">
          <source>In order to test that your mailer is working as expected, you can use unit tests to compare the actual results of the mailer with pre-written examples of what should be produced.</source>
          <target state="translated">メーラーが期待通りに動作しているかどうかをテストするために、ユニットテストを使用して、メーラーの実際の結果を、事前に書かれた例と比較して、何が生成されるべきかを確認することができます。</target>
        </trans-unit>
        <trans-unit id="30ed14a4839497197db3034ba8b5734ade36f0cf" translate="yes" xml:space="preserve">
          <source>In order to understand Ajax, you must first understand what a web browser does normally.</source>
          <target state="translated">Ajaxを理解するためには、まずWebブラウザが普通にやっていることを理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="46312161d035588213184c9f80aa1fb2fc07cd0c" translate="yes" xml:space="preserve">
          <source>In order to understand what a generator template means, let's create the file &lt;code&gt;lib/generators/initializer/templates/initializer.rb&lt;/code&gt; with the following content:</source>
          <target state="translated">ジェネレーターテンプレートの意味を理解するために、次の内容で &lt;code&gt;lib/generators/initializer/templates/initializer.rb&lt;/code&gt; ファイルを作成しましょう。</target>
        </trans-unit>
        <trans-unit id="107547c56e4f88408e05c37dbf186d51ea22566e" translate="yes" xml:space="preserve">
          <source>In order to use &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; with Strong Parameters, you will need to specify which nested attributes should be permitted. You might want to allow &lt;code&gt;:id&lt;/code&gt; and &lt;code&gt;:_destroy&lt;/code&gt;, see ActiveRecord::NestedAttributes for more information.</source>
          <target state="translated">強力なパラメーターで &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; を使用するには、許可するネストされた属性を指定する必要があります。 &lt;code&gt;:id&lt;/code&gt; と &lt;code&gt;:_destroy&lt;/code&gt; を許可することもできます。詳細については、ActiveRecord :: NestedAttributesを参照してください。</target>
        </trans-unit>
        <trans-unit id="40d37692f2f31f03a36c5e7dcd20c22020868c24" translate="yes" xml:space="preserve">
          <source>In order to use a different file, call &lt;code&gt;layout&lt;/code&gt; in your mailer:</source>
          <target state="translated">別のファイルを使用するには、メーラーで &lt;code&gt;layout&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6d85767016fa3a495331b4fb23a752c703fee817" translate="yes" xml:space="preserve">
          <source>In order to use instantiated fixtures with preloaded data, set &lt;code&gt;self.pre_loaded_fixtures&lt;/code&gt; to true. This will provide access to fixture data for every table that has been loaded through fixtures (depending on the value of &lt;code&gt;use_instantiated_fixtures&lt;/code&gt;).</source>
          <target state="translated">プリロードされたデータでインスタンス化されたフィクスチャを使用するには、 &lt;code&gt;self.pre_loaded_fixtures&lt;/code&gt; をtrue に設定します。これにより、（ &lt;code&gt;use_instantiated_fixtures&lt;/code&gt; の値に応じて）フィクスチャを介してロードされたすべてのテーブルのフィクスチャデータへのアクセスが提供されます。</target>
        </trans-unit>
        <trans-unit id="18bdaed8e369471a7df6f869f483701a9bf4a802" translate="yes" xml:space="preserve">
          <source>In order to use optimistic locking, the table needs to have a column called &lt;code&gt;lock_version&lt;/code&gt; of type integer. Each time the record is updated, Active Record increments the &lt;code&gt;lock_version&lt;/code&gt; column. If an update request is made with a lower value in the &lt;code&gt;lock_version&lt;/code&gt; field than is currently in the &lt;code&gt;lock_version&lt;/code&gt; column in the database, the update request will fail with an &lt;code&gt;ActiveRecord::StaleObjectError&lt;/code&gt;. Example:</source>
          <target state="translated">楽観的ロックを使用するには、テーブルに整数型の &lt;code&gt;lock_version&lt;/code&gt; という列が必要です。レコードが更新されるたびに、アクティブレコードは &lt;code&gt;lock_version&lt;/code&gt; 列をインクリメントします。更新要求がより低い値で作られている場合 &lt;code&gt;lock_version&lt;/code&gt; の中で、現在よりも、フィールド &lt;code&gt;lock_version&lt;/code&gt; のデータベース内の列、更新要求がで失敗します &lt;code&gt;ActiveRecord::StaleObjectError&lt;/code&gt; 。例：</target>
        </trans-unit>
        <trans-unit id="97f8db0543047a0b8ca16dbd131cc3b42104554f" translate="yes" xml:space="preserve">
          <source>In order to use streaming, you will need to use a Ruby version that supports fibers (fibers are supported since version 1.9.2 of the main Ruby implementation).</source>
          <target state="translated">ストリーミングを利用するためには、fiberをサポートしているRubyのバージョンを使用する必要があります(fiberはRubyの主要な実装のバージョン1.9.2以降でサポートされています)。</target>
        </trans-unit>
        <trans-unit id="dba418ad8c83fa1633e3b40c0d2bddfc1c0342ec" translate="yes" xml:space="preserve">
          <source>In order to use the PostgreSQL adapter you need to have at least version 9.3 installed. Older versions are not supported.</source>
          <target state="translated">PostgreSQLアダプタを使用するには、少なくともバージョン9.3がインストールされている必要があります。それ以前のバージョンはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="2e8a387461da518b7b0ce941ea8ccc2c1adfc8d6" translate="yes" xml:space="preserve">
          <source>In order to use the available callbacks, you need to register them. You can implement the callbacks as ordinary methods and use a macro-style class method to register them as callbacks:</source>
          <target state="translated">利用可能なコールバックを利用するためには、コールバックを登録する必要があります。コールバックを通常のメソッドとして実装し、マクロスタイルのクラスメソッドを使ってコールバックとして登録することができます。</target>
        </trans-unit>
        <trans-unit id="00d0b40146c6f65e6dde8c5670a9643e8aee5e87" translate="yes" xml:space="preserve">
          <source>In order to use these methods to access fixtured data within your test cases, you must specify one of the following in your ActiveSupport::TestCase-derived class:</source>
          <target state="translated">テストケース内のフィクスチャデータにアクセスするためにこれらのメソッドを使用するには、ActiveSupport::Test ケース派生クラスで以下のいずれかを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="651da9723da705d25ae3a7c22c950d1248914e1f" translate="yes" xml:space="preserve">
          <source>In order to use this helper, you need to install &lt;a href=&quot;https://github.com/joelmoss/dynamic_form&quot;&gt;DynamicForm&lt;/a&gt; gem by adding this line to your &lt;code&gt;Gemfile&lt;/code&gt;: &lt;code&gt;gem 'dynamic_form'&lt;/code&gt;.</source>
          <target state="translated">このヘルパーを使用するには、 &lt;code&gt;Gemfile&lt;/code&gt; に次の行を追加して&lt;a href=&quot;https://github.com/joelmoss/dynamic_form&quot;&gt;DynamicForm&lt;/a&gt; gem をインストールする必要があります： &lt;code&gt;gem 'dynamic_form'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ab4e37bd8136ae2e3df92d16165dff5ee0c42e5" translate="yes" xml:space="preserve">
          <source>In order to validate associated records whose absence is required, you must specify the &lt;code&gt;:inverse_of&lt;/code&gt; option for the association:</source>
          <target state="translated">不在が必要な関連レコードを検証するには、関連付けに： &lt;code&gt;:inverse_of&lt;/code&gt; オプションを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4f288ff2a7ae3e4f9c2eb79749ecb68121c66351" translate="yes" xml:space="preserve">
          <source>In order to validate associated records whose presence is required, you must specify the &lt;code&gt;:inverse_of&lt;/code&gt; option for the association:</source>
          <target state="translated">存在が必要な関連レコードを検証するには、関連付けに： &lt;code&gt;:inverse_of&lt;/code&gt; オプションを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="218a79265ec0fd7c85e83c35da82e6a7ffce9b16" translate="yes" xml:space="preserve">
          <source>In order to work with Action Controller, a &lt;a href=&quot;context&quot;&gt;Context&lt;/a&gt; must just include this module. The initialization of the variables used by the context (@output_buffer, @view_flow, and @virtual_path) is responsibility of the object that includes this module (although you can call &lt;a href=&quot;context#method-i-_prepare_context&quot;&gt;#_prepare_context&lt;/a&gt; defined below).</source>
          <target state="translated">アクションコントローラを使用するには、&lt;a href=&quot;context&quot;&gt;コンテキスト&lt;/a&gt;にこのモジュールを含める必要があります。コンテキストで使用される変数の初期化（@ output_buffer、@ view_flow、および@virtual_path）は、このモジュールを含むオブジェクトの責任です（ただし、以下で定義されている&lt;a href=&quot;context#method-i-_prepare_context&quot;&gt;#_prepare_context&lt;/a&gt;を呼び出すことができます）。</target>
        </trans-unit>
        <trans-unit id="b483ca18407dce764b375bf3103a7eee8c3384af" translate="yes" xml:space="preserve">
          <source>In other contexts you might want to change this behavior, though. E.g. the default exception handling does not allow to catch missing translations during automated tests easily. For this purpose a different exception handler can be specified. The specified exception handler must be a method on the I18n module or a class with &lt;code&gt;#call&lt;/code&gt; method:</source>
          <target state="translated">ただし、他のコンテキストでは、この動作を変更したい場合があります。たとえば、デフォルトの例外処理では、自動テスト中に欠落している翻訳を簡単にキャッチできません。この目的のために、別の例外ハンドラーを指定できます。指定された例外ハンドラーは、 &lt;code&gt;#call&lt;/code&gt; モジュールのメソッドか、＃callメソッドを持つクラスである必要があります。</target>
        </trans-unit>
        <trans-unit id="393cd9beea03d987167d30b004ade204e3cf72ad" translate="yes" xml:space="preserve">
          <source>In other words, this query can be generated by calling &lt;code&gt;where&lt;/code&gt; with no argument, then immediately chain with &lt;code&gt;not&lt;/code&gt; passing &lt;code&gt;where&lt;/code&gt; conditions. This will generate SQL like this:</source>
          <target state="translated">つまり、このクエリは、引数なし &lt;code&gt;where&lt;/code&gt; を呼び出して、 &lt;code&gt;where&lt;/code&gt; 条件を渡さ &lt;code&gt;not&lt;/code&gt; すぐにチェーンすることで生成できます。これにより、次のようなSQLが生成されます。</target>
        </trans-unit>
        <trans-unit id="f14055d795b486afde1a4cf285f261794af7f815" translate="yes" xml:space="preserve">
          <source>In other words, we make the request so that it operates on a single entity's person. Then, in the action, we extract the company data from the request, find or create the company, and then create the new person with the remaining data.</source>
          <target state="translated">つまり、1つのエンティティの人物に対して動作するようにリクエストを作成します。そして、その動作の中で、リクエストから会社のデータを抽出し、会社を探したり作成したりして、残ったデータで新しい人を作成します。</target>
        </trans-unit>
        <trans-unit id="8c47a20f437054f4ca7a327a1a842acd08b76b69" translate="yes" xml:space="preserve">
          <source>In particular, &lt;code&gt;Colors::RED&lt;/code&gt; is totally unrelated to any other &lt;code&gt;RED&lt;/code&gt; constant that may live in any other class or module object. If there were any, they would have separate entries in their respective constant tables.</source>
          <target state="translated">特に、 &lt;code&gt;Colors::RED&lt;/code&gt; は、他のクラスまたはモジュールオブジェクトに存在する可能性のある他の &lt;code&gt;RED&lt;/code&gt; 定数とはまったく無関係です。存在する場合は、それぞれの定数テーブルに個別のエントリがあります。</target>
        </trans-unit>
        <trans-unit id="92bbc81dc05e3ca5c6f8c3d2409439a68ba3f44d" translate="yes" xml:space="preserve">
          <source>In particular, simple routing makes it very easy to map legacy URLs to new Rails actions.</source>
          <target state="translated">特に、シンプルなルーティングにより、レガシーなURLを新しいRailsアクションにマッピングするのが非常に簡単になります。</target>
        </trans-unit>
        <trans-unit id="7b80c87979c07427dbbadbad87cc7038c0873204" translate="yes" xml:space="preserve">
          <source>In particular, thanks to the conventions followed in the generated field names, the controller gets a nested hash &lt;code&gt;params[:person]&lt;/code&gt; with the person attributes set in the form. That hash is ready to be passed to &lt;code&gt;Person.new&lt;/code&gt;:</source>
          <target state="translated">特に、生成されたフィールド名に従う規則のおかげで、コントローラーは、フォームに設定された個人属性を含むネストされたハッシュ &lt;code&gt;params[:person]&lt;/code&gt; を取得します。そのハッシュは &lt;code&gt;Person.new&lt;/code&gt; に渡される準備ができています：</target>
        </trans-unit>
        <trans-unit id="a9a2eb08117638628d90ba0302a5370951bb7703" translate="yes" xml:space="preserve">
          <source>In practice, more robust code is necessary to do this reliably. Iain Hecker's &lt;a href=&quot;https://github.com/iain/http_accept_language/tree/master&quot;&gt;http_accept_language&lt;/a&gt; library or Ryan Tomayko's &lt;a href=&quot;https://github.com/rack/rack-contrib/blob/master/lib/rack/contrib/locale.rb&quot;&gt;locale&lt;/a&gt; Rack middleware provide solutions to this problem.</source>
          <target state="translated">実際には、これを確実に行うには、より堅牢なコードが必要です。Iain Heckerの&lt;a href=&quot;https://github.com/iain/http_accept_language/tree/master&quot;&gt;http_accept_language&lt;/a&gt;ライブラリまたはRyan Tomaykoの&lt;a href=&quot;https://github.com/rack/rack-contrib/blob/master/lib/rack/contrib/locale.rb&quot;&gt;ロケール&lt;/a&gt; Rackミドルウェアがこの問題の解決策を提供します。</target>
        </trans-unit>
        <trans-unit id="0802cfe51fdef2c921e267ee151179358a255e95" translate="yes" xml:space="preserve">
          <source>In practice, this will allow you to precompile locally, have those files in your working tree, and commit those files to source control when needed. Development mode will work as expected.</source>
          <target state="translated">実際には、これにより、ローカルでプリコンパイルを行い、それらのファイルを作業ツリーに配置し、必要に応じてそれらのファイルをソースコントロールにコミットすることができるようになります。開発モードは期待通りに動作します。</target>
        </trans-unit>
        <trans-unit id="bfb8683e07369e8581df19e40a7fbd85c022d176" translate="yes" xml:space="preserve">
          <source>In practice, this works quite well as long as the nesting matches all parent namespaces respectively and the constants that make the rule apply are known at that time.</source>
          <target state="translated">実際には、入れ子がそれぞれすべての親名前空間にマッチし、ルールを適用させる定数がその時点でわかっている限り、これは非常にうまく機能します。</target>
        </trans-unit>
        <trans-unit id="9f32eee395899344bec411ccbf6930fd17ef9d92" translate="yes" xml:space="preserve">
          <source>In previous versions of Rails the controller will include a helper which matches the name of the controller, e.g., &lt;code&gt;MyController&lt;/code&gt; will automatically include &lt;code&gt;MyHelper&lt;/code&gt;. To return old behavior set &lt;code&gt;config.action_controller.include_all_helpers&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">Railsの以前のバージョンでは、コントローラにはコントローラの名前と一致するヘルパーが含まれてい &lt;code&gt;MyHelper&lt;/code&gt; 。たとえば、 &lt;code&gt;MyController&lt;/code&gt; には自動的にMyHelperが含まれます。古い動作を返すには、 &lt;code&gt;config.action_controller.include_all_helpers&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="387fca91ce034b1ccf78d7b329410a4b592846a5" translate="yes" xml:space="preserve">
          <source>In previous versions of Rails, all assets were located in subdirectories of &lt;code&gt;public&lt;/code&gt; such as &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;javascripts&lt;/code&gt; and &lt;code&gt;stylesheets&lt;/code&gt;. With the asset pipeline, the preferred location for these assets is now the &lt;code&gt;app/assets&lt;/code&gt; directory. Files in this directory are served by the Sprockets middleware.</source>
          <target state="translated">Railsの以前のバージョンでは、すべてのアセットは、 &lt;code&gt;images&lt;/code&gt; 、 &lt;code&gt;javascripts&lt;/code&gt; 、 &lt;code&gt;stylesheets&lt;/code&gt; などの &lt;code&gt;public&lt;/code&gt; サブディレクトリにありました。アセットパイプラインにより、これらのアセットの優先場所は &lt;code&gt;app/assets&lt;/code&gt; ディレクトリになります。このディレクトリ内のファイルは、Sprocketsミドルウェアによって提供されます。</target>
        </trans-unit>
        <trans-unit id="7dc5570153310ae5658bb85dc33107a7d11c2edb" translate="yes" xml:space="preserve">
          <source>In previous versions when you defined a &lt;code&gt;default_scope&lt;/code&gt; in a model it was overridden by chained conditions in the same field. Now it is merged like any other scope.</source>
          <target state="translated">以前のバージョンでは、モデルに &lt;code&gt;default_scope&lt;/code&gt; を定義すると、同じフィールドの連鎖条件によってオーバーライドされました。これで、他のスコープと同様にマージされます。</target>
        </trans-unit>
        <trans-unit id="acdc2b5830d037a308e1f80820fc64001fe34307" translate="yes" xml:space="preserve">
          <source>In production, Rails precompiles these files to &lt;code&gt;public/assets&lt;/code&gt; by default. The precompiled copies are then served as static assets by the web server. The files in &lt;code&gt;app/assets&lt;/code&gt; are never served directly in production.</source>
          <target state="translated">本番環境では、Railsはデフォルトでこれらのファイルを &lt;code&gt;public/assets&lt;/code&gt; にプリコンパイルします。プリコンパイルされたコピーは、Webサーバーによって静的アセットとして提供されます。 &lt;code&gt;app/assets&lt;/code&gt; 内のファイルが本番環境で直接提供されることはありません。</target>
        </trans-unit>
        <trans-unit id="bd1c2f4bacd2e42e0926f761088b2fa08f639486" translate="yes" xml:space="preserve">
          <source>In production-like environments it is generally better to load all the application code when the application boots. Eager loading puts everything in memory ready to serve requests right away, and it is also &lt;a href=&quot;https://en.wikipedia.org/wiki/Copy-on-write&quot;&gt;CoW&lt;/a&gt;-friendly.</source>
          <target state="translated">本番環境のような環境では、一般に、アプリケーションの起動時にすべてのアプリケーションコードをロードする方が適切です。Eager Loadingは、すべての要求をすぐに処理できるようにメモリ内に配置し、&lt;a href=&quot;https://en.wikipedia.org/wiki/Copy-on-write&quot;&gt;CoWに&lt;/a&gt;も対応しています。</target>
        </trans-unit>
        <trans-unit id="867aa3c331895802d160c399e93401a07e010863" translate="yes" xml:space="preserve">
          <source>In rare circumstances you might need to access the mapping directly. The mappings are exposed through a class method with the pluralized attribute name, which return the mapping in a &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt;:</source>
          <target state="translated">まれに、マッピングに直接アクセスする必要がある場合があります。マッピングは、複数形の属性名を持つクラスメソッドを介して公開され、 &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; でマッピングを返します。</target>
        </trans-unit>
        <trans-unit id="f6955c0b68123d164c5a31f6ca257fa2c43af53a" translate="yes" xml:space="preserve">
          <source>In rare instances, web servers or front proxies strip authorization headers before they reach your application. You can debug this situation by logging all environment variables, and check for HTTP_AUTHORIZATION, amongst others.</source>
          <target state="translated">まれに、ウェブサーバやフロントプロキシがアプリケーションに到達する前に認可ヘッダを削除してしまうことがあります。この状況をデバッグするには、すべての環境変数をログに記録し、HTTP_AUTHORIZATION などをチェックします。</target>
        </trans-unit>
        <trans-unit id="448cd91c5ca45a692c6ec9543871b6564930e128" translate="yes" xml:space="preserve">
          <source>In regular views you can access images in the &lt;code&gt;app/assets/images&lt;/code&gt; directory like this:</source>
          <target state="translated">通常のビューでは、次のように &lt;code&gt;app/assets/images&lt;/code&gt; ディレクトリ内の画像にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="06ae7ad8ee810f01851d88cc659fdf8a687fed96" translate="yes" xml:space="preserve">
          <source>In some cases you may want to prevent writes to the database even if you are on a database that can write. `while_preventing_writes` will prevent writes to the database for the duration of the block.</source>
          <target state="translated">場合によっては、書き込み可能なデータベース上にいてもデータベースへの書き込みを防ぎたいことがあるかもしれません。while_preventing_writes` は、そのブロックの間、データベースへの書き込みを阻止します。</target>
        </trans-unit>
        <trans-unit id="1f80e06d03640ad157d5355c15d46fb341b319a3" translate="yes" xml:space="preserve">
          <source>In some cases, like a single table inheritance setup, you might have a bunch of explicit dependencies. Instead of writing every template out, you can use a wildcard to match any template in a directory:</source>
          <target state="translated">単一のテーブル継承の設定のように、明示的な依存関係の束がある場合もあるでしょう。すべてのテンプレートを書き出すのではなく、ワイルドカードを使ってディレクトリ内の任意のテンプレートにマッチさせることができます。</target>
        </trans-unit>
        <trans-unit id="3131b4ceda57af774c0368b496b38c23e7f116b4" translate="yes" xml:space="preserve">
          <source>In some cases, you may want to provide a boolean hook. For example, webrat developers might want to have webrat available on controller generator. This can be achieved as:</source>
          <target state="translated">場合によっては、ブーリアンフックを提供したい場合もあるでしょう。例えば、webratの開発者はコントローラジェネレータでwebratを利用できるようにしたいかもしれません。これは次のように実現できます。</target>
        </trans-unit>
        <trans-unit id="47b358a6bb6300b251cb348fc564a8833f7d939e" translate="yes" xml:space="preserve">
          <source>In some circumstances you may wish to use live compilation. In this mode all requests for assets in the pipeline are handled by Sprockets directly.</source>
          <target state="translated">状況によっては、ライブコンパイルを使用したい場合もあるでしょう。このモードでは、パイプライン内のアセットに対するすべてのリクエストは、Sprocketsによって直接処理されます。</target>
        </trans-unit>
        <trans-unit id="5f915ed8669a78a1a735442736b9533062f4ecfc" translate="yes" xml:space="preserve">
          <source>In some scenarios you may want to add back some functionality provided by &lt;code&gt;ActionController::Base&lt;/code&gt; that is not present by default in &lt;code&gt;ActionController::API&lt;/code&gt;, for instance &lt;code&gt;MimeResponds&lt;/code&gt;. This module gives you the &lt;code&gt;respond_to&lt;/code&gt; method. Adding it is quite simple, you just need to include the module in a specific controller or in &lt;code&gt;ApplicationController&lt;/code&gt; in case you want it available in your entire application:</source>
          <target state="translated">一部のシナリオでは、デフォルトでは &lt;code&gt;ActionController::API&lt;/code&gt; に存在しない &lt;code&gt;ActionController::Base&lt;/code&gt; によって提供されるいくつかの機能、たとえば &lt;code&gt;MimeResponds&lt;/code&gt; を追加することができます。このモジュールは、 &lt;code&gt;respond_to&lt;/code&gt; メソッドを提供します。追加は非常に簡単です。アプリケーション全体で使用できるようにする場合は、特定のコントローラーまたは &lt;code&gt;ApplicationController&lt;/code&gt; にモジュールを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="17f0250b4e2377f22078b52d68151700c5137bc6" translate="yes" xml:space="preserve">
          <source>In special situations, where someone from the Core Team agrees to support more series, they are included in the list of supported series.</source>
          <target state="translated">特別な状況では、コアチームの誰かがより多くのシリーズをサポートすることに同意した場合、サポートされているシリーズのリストに含まれます。</target>
        </trans-unit>
        <trans-unit id="d3f08fa535d4de28e332a84e5bf7432c5065e585" translate="yes" xml:space="preserve">
          <source>In such actions, you want to delay queries execution as much as you can. For example, imagine the following &lt;code&gt;dashboard&lt;/code&gt; action:</source>
          <target state="translated">このようなアクションでは、クエリの実行をできる限り遅らせたいと考えています。たとえば、次の &lt;code&gt;dashboard&lt;/code&gt; アクションを想像してください。</target>
        </trans-unit>
        <trans-unit id="e22a8c55bcb2ac30014d38e167eb68330f7cd298" translate="yes" xml:space="preserve">
          <source>In such case, it could even happen that the reassigned &lt;code&gt;A&lt;/code&gt; held a new class or module called also &quot;A&quot;!</source>
          <target state="translated">そのような場合、再割り当てされた &lt;code&gt;A&lt;/code&gt; が「A」とも呼ばれる新しいクラスまたはモジュールを保持していることさえあり得ます。</target>
        </trans-unit>
        <trans-unit id="7bc9b2fd355ec60ad8bae876600fcb6906d3ef26" translate="yes" xml:space="preserve">
          <source>In such cases, Ruby's core &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html&quot;&gt;Date&lt;/a&gt; and &lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html&quot;&gt;Time&lt;/a&gt; should be used for precision date and time arithmetic.</source>
          <target state="translated">そのような場合、Rubyのコアの&lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/date/rdoc/Date.html&quot;&gt;日付&lt;/a&gt;と&lt;a href=&quot;http://ruby-doc.org/stdlib/libdoc/time/rdoc/Time.html&quot;&gt;時刻&lt;/a&gt;は、正確な日付と時刻の計算に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3aac43b2be2d07c0a420f20d829b8934449b3c17" translate="yes" xml:space="preserve">
          <source>In test and development applications get a &lt;code&gt;secret_key_base&lt;/code&gt; derived from the app name. Other environments must use a random key present in &lt;code&gt;config/credentials.yml.enc&lt;/code&gt;, shown here in its decrypted state:</source>
          <target state="translated">テストおよび開発アプリケーションでは、アプリ名から派生した &lt;code&gt;secret_key_base&lt;/code&gt; を取得します。他の環境では、 &lt;code&gt;config/credentials.yml.enc&lt;/code&gt; にあるランダムなキーを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0b604c981536c6f7a57e350835fcc0cf00e3e7d1" translate="yes" xml:space="preserve">
          <source>In tests you can simply pass the URL or named route to &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;post&lt;/code&gt;.</source>
          <target state="translated">テストでは、URLまたは名前付きルートを渡して、 &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;post&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bbfb856b113f8aa7f20649d6800d05bfc1f91454" translate="yes" xml:space="preserve">
          <source>In that case it is preferable to either use &lt;code&gt;check_box_tag&lt;/code&gt; or to use hashes instead of arrays.</source>
          <target state="translated">その場合は、 &lt;code&gt;check_box_tag&lt;/code&gt; を使用するか、配列ではなくハッシュを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e8a94c0205e8998c88c2b83ec95edd58bd84adb0" translate="yes" xml:space="preserve">
          <source>In that case, &lt;code&gt;app/models/concerns&lt;/code&gt; is assumed to be a root directory (because it belongs to the autoload paths), and it is ignored as namespace. So, &lt;code&gt;app/models/concerns/foo.rb&lt;/code&gt; should define &lt;code&gt;Foo&lt;/code&gt;, not &lt;code&gt;Concerns::Foo&lt;/code&gt;.</source>
          <target state="translated">その場合、 &lt;code&gt;app/models/concerns&lt;/code&gt; はルートディレクトリであると見なされ（オートロードパスに属しているため）、名前空間として無視されます。したがって、 &lt;code&gt;app/models/concerns/foo.rb&lt;/code&gt; は、 &lt;code&gt;Concerns::Foo&lt;/code&gt; ではなく &lt;code&gt;Foo&lt;/code&gt; を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="b13a5797f6fc9e1292d0609d2b1de532169ec70b" translate="yes" xml:space="preserve">
          <source>In that case, batch processing methods allow you to work with the records in batches, thereby greatly reducing memory consumption.</source>
          <target state="translated">その場合、バッチ処理の方法では、レコードを一括して処理することができるので、メモリ消費量を大幅に削減することができます。</target>
        </trans-unit>
        <trans-unit id="e0c1c021f721c684135b59830f5b970354577a47" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;#sessions&quot;&gt;session chapter&lt;/a&gt; you have learned that most Rails applications use cookie-based sessions. Either they store the session ID in the cookie and have a server-side session hash, or the entire session hash is on the client-side. In either case the browser will automatically send along the cookie on every request to a domain, if it can find a cookie for that domain. The controversial point is that if the request comes from a site of a different domain, it will also send the cookie. Let's start with an example:</source>
          <target state="translated">では&lt;a href=&quot;#sessions&quot;&gt;セッション章&lt;/a&gt;あなたは、ほとんどのRailsアプリケーションは、クッキーベースのセッションを使用することを学びました。セッションIDをCookieに保存し、サーバー側のセッションハッシュを持っているか、セッションハッシュ全体がクライアント側にあります。どちらの場合でも、ブラウザーは、そのドメインのCookieを見つけることができる場合、ドメインへのすべての要求でCookieを自動的に送信します。論争点は、リクエストが別のドメインのサイトからのものである場合、Cookieも送信することです。例から始めましょう：</target>
        </trans-unit>
        <trans-unit id="cda842a28317aed91dd703e8e2c47e5c82db26d0" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;ArticlesController&lt;/code&gt; we need to have a way to block access to the various actions if the person is not authenticated. Here we can use the Rails &lt;code&gt;http_basic_authenticate_with&lt;/code&gt; method, which allows access to the requested action if that method allows it.</source>
          <target state="translated">で &lt;code&gt;ArticlesController&lt;/code&gt; 私たちは、人が認証されていない場合、様々なアクションへのアクセスをブロックする方法を持っている必要があります。ここでは、Railsの &lt;code&gt;http_basic_authenticate_with&lt;/code&gt; メソッドを使用できます。これにより、そのメソッドで許可されている場合は、要求されたアクションにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="109d17caa7860bcdee4fd3c758460f7d4c9a3bc5" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;show&lt;/code&gt; template, we'll render the &lt;code&gt;_article&lt;/code&gt; partial wrapped in the &lt;code&gt;box&lt;/code&gt; layout:</source>
          <target state="translated">で &lt;code&gt;show&lt;/code&gt; テンプレート、我々はレンダリングます &lt;code&gt;_article&lt;/code&gt; に包まれた部分 &lt;code&gt;box&lt;/code&gt; レイアウトを：</target>
        </trans-unit>
        <trans-unit id="932111316617cc42b0f847695447a92081a2e91f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;test_should_get_index&lt;/code&gt; test, Rails simulates a request on the action called &lt;code&gt;index&lt;/code&gt;, making sure the request was successful and also ensuring that the right response body has been generated.</source>
          <target state="translated">で &lt;code&gt;test_should_get_index&lt;/code&gt; のテスト、Railsはと呼ばれる行動上の要求をシミュレート &lt;code&gt;index&lt;/code&gt; 必ず要求が成功したとも右レスポンスボディが生成されていることを確実にすること、。</target>
        </trans-unit>
        <trans-unit id="b0dd914d44cf11ff05a98e10708f475b57b6904b" translate="yes" xml:space="preserve">
          <source>In the Blog application, you will now create a new &lt;em&gt;resource&lt;/em&gt;. A resource is the term used for a collection of similar objects, such as articles, people, or animals. You can create, read, update, and destroy items for a resource and these operations are referred to as &lt;em&gt;CRUD&lt;/em&gt; operations.</source>
          <target state="translated">ブログアプリケーションで、新しい&lt;em&gt;リソースを&lt;/em&gt;作成します。リソースとは、記事、人、動物などの同様のオブジェクトのコレクションに使用される用語です。リソースのアイテムを作成、読み取り、更新、破棄できます。これらの操作は&lt;em&gt;CRUD&lt;/em&gt;操作と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="24db4d3c8293c09d3f0c65d469d2a51f794699b9" translate="yes" xml:space="preserve">
          <source>In the Rails framework these hooks are called when a specific library is loaded. For example, when &lt;code&gt;ActionController::Base&lt;/code&gt; is loaded, the &lt;code&gt;:action_controller_base&lt;/code&gt; hook is called. This means that all &lt;code&gt;ActiveSupport.on_load&lt;/code&gt; calls with &lt;code&gt;:action_controller_base&lt;/code&gt; hooks will be called in the context of &lt;code&gt;ActionController::Base&lt;/code&gt; (that means &lt;code&gt;self&lt;/code&gt; will be an &lt;code&gt;ActionController::Base&lt;/code&gt;).</source>
          <target state="translated">Railsフレームワークでは、これらのフックは、特定のライブラリーがロードされるときに呼び出されます。たとえば、 &lt;code&gt;ActionController::Base&lt;/code&gt; が読み込まれると、 &lt;code&gt;:action_controller_base&lt;/code&gt; フックが呼び出されます。これは、 &lt;code&gt;:action_controller_base&lt;/code&gt; フックを使用したすべての &lt;code&gt;ActiveSupport.on_load&lt;/code&gt; 呼び出しが、 &lt;code&gt;ActionController::Base&lt;/code&gt; コンテキストで呼び出されることを意味します（つまり、 &lt;code&gt;self&lt;/code&gt; は &lt;code&gt;ActionController::Base&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="018cf8fd21b3afc27f24b270e9c9f004f622eeca" translate="yes" xml:space="preserve">
          <source>In the above block, a &lt;code&gt;FormBuilder&lt;/code&gt; object is yielded as the &lt;code&gt;person_form&lt;/code&gt; variable. This allows you to generate the &lt;code&gt;text_field&lt;/code&gt; and &lt;code&gt;check_box&lt;/code&gt; fields by specifying their eponymous methods, which modify the underlying template and associates the &lt;code&gt;@person&lt;/code&gt; model object with the form.</source>
          <target state="translated">上記ブロックにおいて、 &lt;code&gt;FormBuilder&lt;/code&gt; のオブジェクトは、次のように得ている &lt;code&gt;person_form&lt;/code&gt; の変数。これにより、基になるテンプレートを変更し、 &lt;code&gt;check_box&lt;/code&gt; &lt;code&gt;@person&lt;/code&gt; モデルオブジェクトをフォームに関連付ける、同義のメソッドを指定して、 &lt;code&gt;text_field&lt;/code&gt; およびcheck_boxフィールドを生成できます。</target>
        </trans-unit>
        <trans-unit id="9e8f8ae805ddb6dd1112cbcc45e4fc5957590768" translate="yes" xml:space="preserve">
          <source>In the above case as long as Subclass does not assign a value to setting by performing &lt;code&gt;Subclass.setting = &lt;em&gt;something&lt;/em&gt;&lt;/code&gt;, &lt;code&gt;Subclass.setting&lt;/code&gt; would read value assigned to parent class. Once Subclass assigns a value then the value assigned by Subclass would be returned.</source>
          <target state="translated">上記の場合、 &lt;code&gt;Subclass.setting&lt;/code&gt; が &lt;code&gt;Subclass.setting = &lt;em&gt;something&lt;/em&gt;&lt;/code&gt; 実行して設定に値を割り当てない限り、Subclass.settingは親クラスに割り当てられた値を読み取ります。サブクラスが値を割り当てると、サブクラスによって割り当てられた値が返されます。</target>
        </trans-unit>
        <trans-unit id="4b1cb73fc73094a58e195dd6ca9b80ae9df2dfa1" translate="yes" xml:space="preserve">
          <source>In the above case it would make more sense to use the &lt;code&gt;content_type&lt;/code&gt; setter directly.</source>
          <target state="translated">上記の場合、 &lt;code&gt;content_type&lt;/code&gt; セッターを直接使用する方が理にかなっています。</target>
        </trans-unit>
        <trans-unit id="7e163be244fe8bdb5f530f0935c88b0adb00fc3e" translate="yes" xml:space="preserve">
          <source>In the above case there are still two readings. However &lt;code&gt;person.articles&lt;/code&gt; shows only one article because the collection loads only unique records.</source>
          <target state="translated">上記の場合でも、2つの測定値があります。ただし、コレクションは一意のレコードのみをロードするため、 &lt;code&gt;person.articles&lt;/code&gt; は1つの記事のみを表示します。</target>
        </trans-unit>
        <trans-unit id="176a9dc5fbcfae20c994660d52dd8f429b5d77c6" translate="yes" xml:space="preserve">
          <source>In the above case there are two readings and &lt;code&gt;person.articles&lt;/code&gt; brings out both of them even though these records are pointing to the same article.</source>
          <target state="translated">上記の場合、2つの読み取り値があり、 &lt;code&gt;person.articles&lt;/code&gt; は、これらのレコードが同じ記事を指しているにもかかわらず、両方を表示します。</target>
        </trans-unit>
        <trans-unit id="690cd0e61c2000224f7b44dbcc541e9443157e34" translate="yes" xml:space="preserve">
          <source>In the above case whenever you save an account the method &lt;code&gt;Audit#before&lt;/code&gt; will be called. On the other hand</source>
          <target state="translated">上記の場合、アカウントを保存するたびに、 &lt;code&gt;Audit#before&lt;/code&gt; メソッドが呼び出されます。一方</target>
        </trans-unit>
        <trans-unit id="20fa2b618a41090d64744e8886e56741eb7768e0" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;render&lt;/code&gt; takes 2 options: &lt;code&gt;partial&lt;/code&gt; and &lt;code&gt;locals&lt;/code&gt;. But if these are the only options you want to pass, you can skip using these options. For example, instead of:</source>
          <target state="translated">上記の例では、 &lt;code&gt;render&lt;/code&gt; は2つのオプション、 &lt;code&gt;partial&lt;/code&gt; と &lt;code&gt;locals&lt;/code&gt; を取ります。ただし、これらのオプションのみを渡したい場合は、これらのオプションの使用をスキップできます。たとえば、次の代わりに：</target>
        </trans-unit>
        <trans-unit id="157feea9492cf83c86be261458171459bd27095d" translate="yes" xml:space="preserve">
          <source>In the above example, the configuration from the first application was used to initialize the second application. You can also use the &lt;code&gt;initialize_copy&lt;/code&gt; on one of the applications to create a copy of the application which shares the configuration.</source>
          <target state="translated">上記の例では、最初のアプリケーションの構成を使用して、2番目のアプリケーションを初期化しました。また、いずれかのアプリケーションで &lt;code&gt;initialize_copy&lt;/code&gt; を使用して、構成を共有するアプリケーションのコピーを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="bb83d7ff54804b12fe50b173335aa3b0288d1172" translate="yes" xml:space="preserve">
          <source>In the above example, there will be a performance impact even if the allowed output level doesn't include debug. The reason is that Ruby has to evaluate these strings, which includes instantiating the somewhat heavy &lt;code&gt;String&lt;/code&gt; object and interpolating the variables. Therefore, it's recommended to pass blocks to the logger methods, as these are only evaluated if the output level is the same as &amp;mdash; or included in &amp;mdash; the allowed level (i.e. lazy loading). The same code rewritten would be:</source>
          <target state="translated">上記の例では、許可される出力レベルにデバッグが含まれていない場合でも、パフォーマンスに影響があります。その理由は、Rubyがこれらの文字列を評価する必要があるためです。これには、やや重い &lt;code&gt;String&lt;/code&gt; オブジェクトのインスタンス化や変数の補間が含まれます。したがって、出力レベルが許可されたレベルと同じであるか、または含まれている場合にのみ評価されるため、ロガーメソッドにブロックを渡すことをお勧めします（遅延読み込み）。書き換えられた同じコードは次のようになります。</target>
        </trans-unit>
        <trans-unit id="378a590ed7ea217bc157b04f767bbce3a298baf9" translate="yes" xml:space="preserve">
          <source>In the above template we specify that the application relies on the &lt;code&gt;rspec-rails&lt;/code&gt; and &lt;code&gt;cucumber-rails&lt;/code&gt; gem so these two will be added to the &lt;code&gt;test&lt;/code&gt; group in the &lt;code&gt;Gemfile&lt;/code&gt;. Then we pose a question to the user about whether or not they would like to install Devise. If the user replies &quot;y&quot; or &quot;yes&quot; to this question, then the template will add Devise to the &lt;code&gt;Gemfile&lt;/code&gt; outside of any group and then runs the &lt;code&gt;devise:install&lt;/code&gt; generator. This template then takes the users input and runs the &lt;code&gt;devise&lt;/code&gt; generator, with the user's answer from the last question being passed to this generator.</source>
          <target state="translated">上記のテンプレートでは、アプリケーションが &lt;code&gt;rspec-rails&lt;/code&gt; および &lt;code&gt;cucumber-rails&lt;/code&gt; gemに依存していることを指定しているため、これら2つは &lt;code&gt;Gemfile&lt;/code&gt; の &lt;code&gt;test&lt;/code&gt; グループに追加されます。次に、ユーザーにDeviseをインストールするかどうかを質問します。ユーザーがこの質問に「y」または「yes」と応答すると、テンプレートはDeviseをグループ外のGemfileに追加し、 &lt;code&gt;Gemfile&lt;/code&gt; &lt;code&gt;devise:install&lt;/code&gt; ジェネレーターを実行します。次に、このテンプレートはユーザーの入力を受け取って &lt;code&gt;devise&lt;/code&gt; ジェネレーターを実行し、最後の質問からのユーザーの回答がこのジェネレーターに渡されます。</target>
        </trans-unit>
        <trans-unit id="d28329a81b72878163d25972277a4b07abf621a9" translate="yes" xml:space="preserve">
          <source>In the authentication filter:</source>
          <target state="translated">認証フィルタで</target>
        </trans-unit>
        <trans-unit id="b9a1952af56540f70e0738c20b1efb6e624ed304" translate="yes" xml:space="preserve">
          <source>In the case above we could implement a dynamic access point:</source>
          <target state="translated">上記のケースでは、動的アクセスポイントを実装することができます。</target>
        </trans-unit>
        <trans-unit id="4ca6413dd0b8621bd4954d0e4a4e829ed7492594" translate="yes" xml:space="preserve">
          <source>In the case of a belongs_to relationship, an association key can be used to specify the model if an &lt;a href=&quot;../activerecord&quot;&gt;ActiveRecord&lt;/a&gt; object is used as the value.</source>
          <target state="translated">belongs_to関係の場合、&lt;a href=&quot;../activerecord&quot;&gt;ActiveRecord&lt;/a&gt;オブジェクトが値として使用されている場合、関連キーを使用してモデルを指定できます。</target>
        </trans-unit>
        <trans-unit id="05db8fea52973334b7d1041a94daa538e6e41de9" translate="yes" xml:space="preserve">
          <source>In the case of a belongs_to relationship, an association key can be used to specify the model if an Active Record object is used as the value. This method works with polymorphic relationships as well.</source>
          <target state="translated">belongs_to関係の場合、Active Recordオブジェクトが値として使用されている場合、アソシエーションキーを使用してモデルを指定することができます。このメソッドは、ポリモーフィック・リレーションシップでも動作します。</target>
        </trans-unit>
        <trans-unit id="d93756087be58618e833c25f67ba938827e554d3" translate="yes" xml:space="preserve">
          <source>In the case of in-place transformations like &lt;code&gt;gsub!&lt;/code&gt; the receiver itself becomes unsafe.</source>
          <target state="translated">&lt;code&gt;gsub!&lt;/code&gt; ようなインプレース変換の場合！受信機自体が安全でなくなります。</target>
        </trans-unit>
        <trans-unit id="f90f4443b51bcdba4e9b77cbfad0537dffd722d4" translate="yes" xml:space="preserve">
          <source>In the case where the &lt;code&gt;reorder&lt;/code&gt; clause is not used, the SQL executed would be:</source>
          <target state="translated">場合 &lt;code&gt;reorder&lt;/code&gt; 句を使用しない場合、実行されるSQLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="043c45971093b99cfaa59be2aec6275bba7ade66" translate="yes" xml:space="preserve">
          <source>In the development and test environments your application's secret key base is generated by Rails and stored in a temporary file in &lt;code&gt;tmp/development_secret.txt&lt;/code&gt;. In all other environments, it is stored encrypted in the &lt;code&gt;config/credentials.yml.enc&lt;/code&gt; file.</source>
          <target state="translated">開発およびテスト環境では、アプリケーションの秘密鍵ベースはRailsによって生成され、 &lt;code&gt;tmp/development_secret.txt&lt;/code&gt; の一時ファイルに保存されます。他のすべての環境では、暗号化されて &lt;code&gt;config/credentials.yml.enc&lt;/code&gt; ファイルに格納されます。</target>
        </trans-unit>
        <trans-unit id="c75681960dd180c7b1234a9df577a41edc756ce2" translate="yes" xml:space="preserve">
          <source>In the end, he got a 4 KB worm, which he injected into his profile page.</source>
          <target state="translated">結局、4KBのワームを手に入れ、それをプロフィールページに注入した。</target>
        </trans-unit>
        <trans-unit id="a9a0668d9e8b01d60ee00fef66c5a4fe3b886bf5" translate="yes" xml:space="preserve">
          <source>In the event that the collection is empty, &lt;code&gt;render&lt;/code&gt; will return nil, so it should be fairly simple to provide alternative content.</source>
          <target state="translated">コレクションが空の場合、 &lt;code&gt;render&lt;/code&gt; はnilを返すため、代替コンテンツを提供するのはかなり簡単です。</target>
        </trans-unit>
        <trans-unit id="59270391c73875761b1bc79e7f69878ff7f7d24a" translate="yes" xml:space="preserve">
          <source>In the event you need to access nested attributes within a given model, you should nest these under &lt;code&gt;model/attribute&lt;/code&gt; at the model level of your translation file:</source>
          <target state="translated">特定のモデル内のネストされた属性にアクセスする必要がある場合は、翻訳ファイルのモデルレベルで &lt;code&gt;model/attribute&lt;/code&gt; 下にこれらをネストする必要があります。</target>
        </trans-unit>
        <trans-unit id="6bcd3a44538f064cef6c5ae28aa20a97b263d372" translate="yes" xml:space="preserve">
          <source>In the example above &lt;code&gt;render&lt;/code&gt; is the name of the event, and the rest is called the &lt;em&gt;payload&lt;/em&gt;. The payload is a mechanism that allows instrumenters to pass extra information to subscribers. Payloads consist of a hash whose contents are arbitrary and generally depend on the event.</source>
          <target state="translated">上記の例では、 &lt;code&gt;render&lt;/code&gt; はイベントの名前であり、残りは&lt;em&gt;ペイロード&lt;/em&gt;と呼ばれます。ペイロードは、インストルメンターがサブスクライバーに追加情報を渡すことができるメカニズムです。ペイロードは任意の内容のハッシュで構成され、通常はイベントに依存します。</target>
        </trans-unit>
        <trans-unit id="7f3d1821b9f0f188e97d2cc4c5d27dd0bb5e0290" translate="yes" xml:space="preserve">
          <source>In the example above, if &lt;code&gt;@post&lt;/code&gt; is a new record, it will use &amp;ldquo;Create Post&amp;rdquo; as button label; otherwise, it uses &amp;ldquo;Update Post&amp;rdquo;.</source>
          <target state="translated">上記の例では、 &lt;code&gt;@post&lt;/code&gt; が新しいレコードの場合、ボタンラベルとして「投稿の作成」を使用します。それ以外の場合は、「Update Post」を使用します。</target>
        </trans-unit>
        <trans-unit id="12de8b2a7a4948b5a6d00dcc981ef44ca582121c" translate="yes" xml:space="preserve">
          <source>In the example above, if &lt;code&gt;@post&lt;/code&gt; is a new record, it will use &amp;ldquo;Create Post&amp;rdquo; as submit button label; otherwise, it uses &amp;ldquo;Update Post&amp;rdquo;.</source>
          <target state="translated">上記の例では、 &lt;code&gt;@post&lt;/code&gt; が新しいレコードの場合、送信ボタンのラベルとして「投稿の作成」を使用します。それ以外の場合は、「Update Post」を使用します。</target>
        </trans-unit>
        <trans-unit id="3f14b2fb242760f899c366a5e39f1bd828c37f48" translate="yes" xml:space="preserve">
          <source>In the example above, if the format is xml, it will render:</source>
          <target state="translated">上の例では、フォーマットがxmlの場合はレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="a12f2deb8f1230067d03dc82012f59d41652e60e" translate="yes" xml:space="preserve">
          <source>In the examples above, the object to be created or edited was represented by a symbol passed to &lt;code&gt;form_for&lt;/code&gt;, and we noted that a string can also be used equivalently. It is also possible, however, to pass a model object itself to &lt;code&gt;form_for&lt;/code&gt;. For example, if &lt;code&gt;@post&lt;/code&gt; is an existing record you wish to edit, you can create the form using</source>
          <target state="translated">上記の例では、作成または編集されるオブジェクトは &lt;code&gt;form_for&lt;/code&gt; に渡されたシンボルによって表され、文字列も同等に使用できることに注意しました。ただし、モデルオブジェクト自体を &lt;code&gt;form_for&lt;/code&gt; に渡すこともできます。たとえば、 &lt;code&gt;@post&lt;/code&gt; が編集する既存のレコードである場合、次のコマンドを使用してフォームを作成できます。</target>
        </trans-unit>
        <trans-unit id="eed6ef156bb24a3a66221694c274d09c46bead3c" translate="yes" xml:space="preserve">
          <source>In the examples just shown, although not indicated explicitly, we still need to use the &lt;code&gt;:url&lt;/code&gt; option in order to specify where the form is going to be sent. However, further simplification is possible if the record passed to &lt;code&gt;form_for&lt;/code&gt; is a &lt;em&gt;resource&lt;/em&gt;, i.e. it corresponds to a set of RESTful routes, e.g. defined using the &lt;code&gt;resources&lt;/code&gt; method in &lt;code&gt;config/routes.rb&lt;/code&gt;. In this case Rails will simply infer the appropriate URL from the record itself. For example,</source>
          <target state="translated">ここに示した例では、明示的には示されていませんが、フォームの送信先を指定するために &lt;code&gt;:url&lt;/code&gt; オプションを使用する必要があります。渡されたレコードの場合は、さらに簡素化が可能である &lt;code&gt;form_for&lt;/code&gt; ある&lt;em&gt;リソースは&lt;/em&gt;、例えば、それはRESTfulなルートのセットに対応する、すなわち、使用して定義され &lt;code&gt;resources&lt;/code&gt; 方法で &lt;code&gt;config/routes.rb&lt;/code&gt; 。この場合、Railsは単にレコード自体から適切なURLを推測します。例えば、</target>
        </trans-unit>
        <trans-unit id="aa0683ade2679737cbdc05a148fe8c06a05a2542" translate="yes" xml:space="preserve">
          <source>In the first case, you can simply avoid using the same name for multiple routes. In the second, you can use the &lt;code&gt;only&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt; options provided by the &lt;code&gt;resources&lt;/code&gt; method to restrict the routes created as detailed in the &lt;a href=&quot;routing#restricting-the-routes-created&quot;&gt;Routing Guide&lt;/a&gt;.</source>
          <target state="translated">最初のケースでは、複数のルートに同じ名前を使用することを単に回避できます。2番目の方法では、 &lt;code&gt;resources&lt;/code&gt; メソッドによって提供される &lt;code&gt;only&lt;/code&gt; オプションまたは &lt;code&gt;except&lt;/code&gt; オプションを使用して、「&lt;a href=&quot;routing#restricting-the-routes-created&quot;&gt;ルーティングガイド」で&lt;/a&gt;詳述されているように作成されたルートを制限できます。</target>
        </trans-unit>
        <trans-unit id="fdaeba8b8091b87a8ab856794d2cb5912acdd5a6" translate="yes" xml:space="preserve">
          <source>In the following example the Post model has many Comments stored within it in a NoSQL database, thus there is no primary key for comments.</source>
          <target state="translated">次の例では、PostモデルはNoSQLデータベースに保存された多くのコメントを持っているため、コメントの主キーはありません。</target>
        </trans-unit>
        <trans-unit id="c4a3d8485ceda8e58b6d1bfce4e3d31c308fca89" translate="yes" xml:space="preserve">
          <source>In the following example, the inner &lt;code&gt;assert_select&lt;/code&gt; for &lt;code&gt;li.menu_item&lt;/code&gt; runs within the collection of elements selected by the outer block:</source>
          <target state="translated">次の例では、内側 &lt;code&gt;assert_select&lt;/code&gt; ため &lt;code&gt;li.menu_item&lt;/code&gt; 外側のブロックで選択された要素のコレクション内で実行されます。</target>
        </trans-unit>
        <trans-unit id="f7bef9cb53d38149013bd74d2990ec374d378858" translate="yes" xml:space="preserve">
          <source>In the following example, the looping on users will always be done when the three columns 'first_name', 'last_name' and 'full_name' exist, even when migrating down:</source>
          <target state="translated">次の例では、ユーザーに対するループ処理は、下に移行する場合でも、3つのカラム 'first_name'、'last_name'、'full_name' が存在する場合には常に行われます。</target>
        </trans-unit>
        <trans-unit id="a22f54b5a9f917ca16377381a398c8ffa97e40c4" translate="yes" xml:space="preserve">
          <source>In the following example, the new column &lt;code&gt;published&lt;/code&gt; will be given the value &lt;code&gt;true&lt;/code&gt; for all existing records.</source>
          <target state="translated">次の例では、 &lt;code&gt;published&lt;/code&gt; た新しい列には、既存のすべてのレコードに対して値 &lt;code&gt;true&lt;/code&gt; が与えられます。</target>
        </trans-unit>
        <trans-unit id="1cf32ccab8bfedf8d3bd009f8023805f13eb7150" translate="yes" xml:space="preserve">
          <source>In the next section, you will add the ability to create new articles in your application and be able to view them. This is the &quot;C&quot; and the &quot;R&quot; from CRUD: create and read. The form for doing this will look like this:</source>
          <target state="translated">次のセクションでは、アプリケーション内に新しい記事を作成して閲覧できる機能を追加します。これはCRUD:create and readの「C」と「R」です。これを行うためのフォームは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="bf8117729c34fd38f858f62c942b31df3e2602c4" translate="yes" xml:space="preserve">
          <source>In the output, &lt;code&gt;F&lt;/code&gt; denotes a failure. You can see the corresponding trace shown under &lt;code&gt;Failure&lt;/code&gt; along with the name of the failing test. The next few lines contain the stack trace followed by a message that mentions the actual value and the expected value by the assertion. The default assertion messages provide just enough information to help pinpoint the error. To make the assertion failure message more readable, every assertion provides an optional message parameter, as shown here:</source>
          <target state="translated">出力では、 &lt;code&gt;F&lt;/code&gt; は失敗を示します。対応するトレースが「 &lt;code&gt;Failure&lt;/code&gt; 下に表示され、失敗したテストの名前が表示されます。次の数行にはスタックトレースが含まれ、その後に、アサーションによる実際の値と期待される値について言及するメッセージが続きます。デフォルトのアサーションメッセージは、エラーの特定に役立つ十分な情報を提供します。アサーションエラーメッセージを読みやすくするために、以下に示すように、すべてのアサーションにオプションのメッセージパラメータが用意されています。</target>
        </trans-unit>
        <trans-unit id="4db67d28b943836cff0a68073645d31f62ee1a8f" translate="yes" xml:space="preserve">
          <source>In the previous example it could be the case that &lt;code&gt;:log_level&lt;/code&gt; does not belong to the public interface of the library and it is only used for development. The client code, unaware of the potential conflict, subclasses and defines its own &lt;code&gt;:log_level&lt;/code&gt;. Thanks to &lt;code&gt;attr_internal&lt;/code&gt; there's no collision.</source>
          <target state="translated">前の例では、 &lt;code&gt;:log_level&lt;/code&gt; がライブラリのパブリックインターフェイスに属しておらず、開発にのみ使用される場合があります。クライアントコードは、潜在的な競合を認識せずに、独自の &lt;code&gt;:log_level&lt;/code&gt; をサブクラス化して定義します。 &lt;code&gt;attr_internal&lt;/code&gt; のおかげで、衝突はありません。</target>
        </trans-unit>
        <trans-unit id="3908f2e1774247ac628c78d28b4387e97fe76ec2" translate="yes" xml:space="preserve">
          <source>In the previous example the macro generates &lt;code&gt;avatar_size&lt;/code&gt; rather than &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">前の例では、マクロは &lt;code&gt;avatar_size&lt;/code&gt; ではなくavatar_sizeを生成し &lt;code&gt;size&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35dfd724e5592aa2978efe9cdd4cbb5436938ecd" translate="yes" xml:space="preserve">
          <source>In the previous scenarios M would no longer be reachable through &lt;code&gt;A::B&lt;/code&gt; but the module object itself could still be alive somewhere and its name would still be &quot;A::B&quot;.</source>
          <target state="translated">以前のシナリオでは、Mは &lt;code&gt;A::B&lt;/code&gt; を介して到達できなくなりましたが、モジュールオブジェクト自体はまだどこかに存在していて、その名前は「A :: B」のままです。</target>
        </trans-unit>
        <trans-unit id="240be3d54a3302b13164d042110cd1f87453480c" translate="yes" xml:space="preserve">
          <source>In the process of &lt;em&gt;localizing&lt;/em&gt; your application you'll probably want to do the following three things:</source>
          <target state="translated">アプリケーションを&lt;em&gt;ローカライズ&lt;/em&gt;するプロセスでは、おそらく次の3つのことを行います。</target>
        </trans-unit>
        <trans-unit id="6966b7531fe1cf3228dbcc40ef51e48619f56ef9" translate="yes" xml:space="preserve">
          <source>In the production environment Sprockets uses the fingerprinting scheme outlined above. By default Rails assumes assets have been precompiled and will be served as static assets by your web server.</source>
          <target state="translated">本番環境では、Sprocketsは上記で説明したフィンガープリンティングスキームを使用します。デフォルトでは、Railsはアセットがプリコンパイルされていると想定しており、Webサーバから静的アセットとして提供されます。</target>
        </trans-unit>
        <trans-unit id="6fd699f9c03765d18ac7eeda7b127958136df039" translate="yes" xml:space="preserve">
          <source>In the rare case you don't want this hidden field, you can pass the &lt;code&gt;include_hidden: false&lt;/code&gt; option to the helper method.</source>
          <target state="translated">まれにこの非表示フィールドが &lt;code&gt;include_hidden: false&lt;/code&gt; 場合は、include_hidden：falseオプションをヘルパーメソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="907dc721c200adc34c9cd1a38a774d66172f7072" translate="yes" xml:space="preserve">
          <source>In the rare event that your application needs to run some code before Rails itself is loaded, put it above the call to &lt;code&gt;require 'rails/all'&lt;/code&gt; in &lt;code&gt;config/application.rb&lt;/code&gt;.</source>
          <target state="translated">Rails自体がロードされる前にアプリケーションがいくつかのコードを実行する必要があるまれなイベントでは、 &lt;code&gt;config/application.rb&lt;/code&gt; で &lt;code&gt;require 'rails/all'&lt;/code&gt; を要求するためにそれを呼び出しの上に置きます。</target>
        </trans-unit>
        <trans-unit id="e343b15a5c1979c12b2ce78c1a6e9b635664460e" translate="yes" xml:space="preserve">
          <source>In the remainder of this guide, you'll learn how to declare and use the various forms of associations. But first, a quick introduction to the situations where each association type is appropriate.</source>
          <target state="translated">このガイドの残りの部分では、さまざまな形のアソシエーションを宣言して使用する方法を学びます。しかし、その前に、各アソシエーションタイプが適切な状況について簡単に紹介します。</target>
        </trans-unit>
        <trans-unit id="f1ecfbad640a171b281df19ce17b6db703c115aa" translate="yes" xml:space="preserve">
          <source>In the step above we simply wanted to add a line to the generated helper, without adding any extra functionality. There is a simpler way to do that, and it's by replacing the templates of already existing generators, in that case &lt;code&gt;Rails::Generators::HelperGenerator&lt;/code&gt;.</source>
          <target state="translated">上記のステップでは、追加の機能を追加せずに、生成されたヘルパーに行を追加するだけでした。これを行う簡単な方法があります。既存のジェネレーターのテンプレートを置き換えること &lt;code&gt;Rails::Generators::HelperGenerator&lt;/code&gt; 。その場合はRails :: Generators :: HelperGeneratorです。</target>
        </trans-unit>
        <trans-unit id="d4aca72171cec217a6a6f8419ee4e2bc7dffd58d" translate="yes" xml:space="preserve">
          <source>In the test we create the email and store the returned object in the &lt;code&gt;email&lt;/code&gt; variable. We then ensure that it was sent (the first assert), then, in the second batch of assertions, we ensure that the email does indeed contain what we expect. The helper &lt;code&gt;read_fixture&lt;/code&gt; is used to read in the content from this file.</source>
          <target state="translated">テストでは、電子メールを作成し、返されたオブジェクトを &lt;code&gt;email&lt;/code&gt; 変数に格納します。次に、それが送信されたこと（最初のアサート）を確認し、次に、アサーションの2番目のバッチで、電子メールに期待どおりの内容が含まれていることを確認します。ヘルパー &lt;code&gt;read_fixture&lt;/code&gt; は、このファイルからコンテンツを読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="5ffe3c0b50c71cf9044af6117e77e0043e0f0f60" translate="yes" xml:space="preserve">
          <source>In these cases the interpreter issues a warning though:</source>
          <target state="translated">このような場合、通訳者は警告を発します。</target>
        </trans-unit>
        <trans-unit id="93ce4a58cfac5b635c26f22549185d914a6bdf90" translate="yes" xml:space="preserve">
          <source>In these examples, we have three implicit lookup scenarios:</source>
          <target state="translated">これらの例では、3つの暗黙のルックアップシナリオがあります。</target>
        </trans-unit>
        <trans-unit id="502f55decb79b29eb1515742d9f6251647206e2e" translate="yes" xml:space="preserve">
          <source>In this application:</source>
          <target state="translated">このアプリケーションでは</target>
        </trans-unit>
        <trans-unit id="f245011a3468e934666f54bb9f814c5d90ff5341" translate="yes" xml:space="preserve">
          <source>In this case it will look for templates at &lt;code&gt;app/views/notifications&lt;/code&gt; with name &lt;code&gt;another&lt;/code&gt;. You can also specify an array of paths for &lt;code&gt;template_path&lt;/code&gt;, and they will be searched in order.</source>
          <target state="translated">この場合、 &lt;code&gt;app/views/notifications&lt;/code&gt; で &lt;code&gt;another&lt;/code&gt; 名前のテンプレートを探します。 &lt;code&gt;template_path&lt;/code&gt; にパスの配列を指定することもでき、それらは順番に検索されます。</target>
        </trans-unit>
        <trans-unit id="0d9d06832166b95bcc20a680a541dfc7390292e7" translate="yes" xml:space="preserve">
          <source>In this case the &lt;code&gt;do_something_else&lt;/code&gt; gets executed before &lt;code&gt;log_children&lt;/code&gt;.</source>
          <target state="translated">この場合、 &lt;code&gt;do_something_else&lt;/code&gt; は &lt;code&gt;log_children&lt;/code&gt; の前に実行されます。</target>
        </trans-unit>
        <trans-unit id="f8ae7818af6dd8e94846acb9a537d14c62858b73" translate="yes" xml:space="preserve">
          <source>In this case the &lt;code&gt;log_children&lt;/code&gt; gets executed before &lt;code&gt;do_something_else&lt;/code&gt;. The same applies to all non-transactional callbacks.</source>
          <target state="translated">この場合、 &lt;code&gt;log_children&lt;/code&gt; は &lt;code&gt;do_something_else&lt;/code&gt; の前に実行されます。同じことがすべての非トランザクションコールバックに適用されます。</target>
        </trans-unit>
        <trans-unit id="95b5def6a1eafc74bdaaae9878cf5714bb14081e" translate="yes" xml:space="preserve">
          <source>In this case, &lt;code&gt;options&lt;/code&gt; will be &lt;code&gt;nil&lt;/code&gt; so nothing happens in this method.</source>
          <target state="translated">この場合、 &lt;code&gt;options&lt;/code&gt; は &lt;code&gt;nil&lt;/code&gt; になるため、このメソッドでは何も起こりません。</target>
        </trans-unit>
        <trans-unit id="e4dc79e30fed233fc8c2b2718746ea33166b3079" translate="yes" xml:space="preserve">
          <source>In this case, Rails will create all of the normal routes except the route for &lt;code&gt;destroy&lt;/code&gt; (a &lt;code&gt;DELETE&lt;/code&gt; request to &lt;code&gt;/photos/:id&lt;/code&gt;).</source>
          <target state="translated">この場合、Railsは &lt;code&gt;destroy&lt;/code&gt; のルート（ &lt;code&gt;/photos/:id&lt;/code&gt; への &lt;code&gt;DELETE&lt;/code&gt; リクエスト）以外の通常のルートをすべて作成します。</target>
        </trans-unit>
        <trans-unit id="8af14d976d9ce80f23b3242ec266f5b8244e100c" translate="yes" xml:space="preserve">
          <source>In this case, Rails will see that &lt;code&gt;@magazine&lt;/code&gt; is a &lt;code&gt;Magazine&lt;/code&gt; and &lt;code&gt;@ad&lt;/code&gt; is an &lt;code&gt;Ad&lt;/code&gt; and will therefore use the &lt;code&gt;magazine_ad_path&lt;/code&gt; helper. In helpers like &lt;code&gt;link_to&lt;/code&gt;, you can specify just the object in place of the full &lt;code&gt;url_for&lt;/code&gt; call:</source>
          <target state="translated">この場合、Railsは &lt;code&gt;@magazine&lt;/code&gt; が &lt;code&gt;Magazine&lt;/code&gt; であり、 &lt;code&gt;@ad&lt;/code&gt; が &lt;code&gt;Ad&lt;/code&gt; であることを認識するため、 &lt;code&gt;magazine_ad_path&lt;/code&gt; ヘルパーを使用します。 &lt;code&gt;link_to&lt;/code&gt; のようなヘルパーでは、完全な &lt;code&gt;url_for&lt;/code&gt; 呼び出しの代わりにオブジェクトのみを指定できます。</target>
        </trans-unit>
        <trans-unit id="ec98966b432fd02dd889acb0e3ae363d24f7331a" translate="yes" xml:space="preserve">
          <source>In this case, Rails will use the customer or employee partials as appropriate for each member of the collection.</source>
          <target state="translated">この場合、Railsは、コレクションの各メンバーに応じて、顧客パーシャルまたは従業員パーシャルを適切に使用します。</target>
        </trans-unit>
        <trans-unit id="324afa7d33283fa836e991ed242a0c763e9a50ca" translate="yes" xml:space="preserve">
          <source>In this case, after saving our new entry to the database, the user is redirected to the &lt;code&gt;show&lt;/code&gt; method, which is then executed. Note that this is an external HTTP-level redirection which will cause the browser to make a second request (a GET to the show action), and not some internal re-routing which calls both &amp;ldquo;create&amp;rdquo; and then &amp;ldquo;show&amp;rdquo; within one request.</source>
          <target state="translated">この場合、新しいエントリをデータベースに保存した後、ユーザーは &lt;code&gt;show&lt;/code&gt; メソッドにリダイレクトされ、それが実行されます。これは外部のHTTPレベルのリダイレクトであり、ブラウザーが2番目の要求（showアクションへのGET）を行うことに注意してください。1つの要求内で「作成」と「表示」の両方を呼び出す内部再ルーティングではありません。 。</target>
        </trans-unit>
        <trans-unit id="90d76c0d057ec80df1313425905dbf5fc8817833" translate="yes" xml:space="preserve">
          <source>In this case, if you use this:</source>
          <target state="translated">この場合、これを使うと</target>
        </trans-unit>
        <trans-unit id="1be8ecd1ff257edb9a048d380cba8d414155c70d" translate="yes" xml:space="preserve">
          <source>In this case, if you use:</source>
          <target state="translated">この場合、使用する場合。</target>
        </trans-unit>
        <trans-unit id="45910dcc6fa37937e878c391486df7457ff27ceb" translate="yes" xml:space="preserve">
          <source>In this case, instead of the default block, which would return &lt;code&gt;content_for(:layout)&lt;/code&gt;, this method returns the block that was passed in to &lt;code&gt;render :layout&lt;/code&gt;, and the response would be</source>
          <target state="translated">この場合、 &lt;code&gt;content_for(:layout)&lt;/code&gt; を返すデフォルトのブロックの代わりに、このメソッドは &lt;code&gt;render :layout&lt;/code&gt; に渡されたブロックを返し、応答は次のようになります。</target>
        </trans-unit>
        <trans-unit id="23294ab6faccc1c47ad44363cc9caeae8dba7046" translate="yes" xml:space="preserve">
          <source>In this case, it is usually more natural to include an association which has conditions defined on it:</source>
          <target state="translated">この場合、通常は、条件が定義されている連想を含める方が自然です。</target>
        </trans-unit>
        <trans-unit id="3682a82419f80b6aaba8341e83ca11b591eb3f0f" translate="yes" xml:space="preserve">
          <source>In this case, saving or destroying a book will update the timestamp on the associated author. You can also specify a particular timestamp attribute to update:</source>
          <target state="translated">この場合、本を保存したり破棄したりすると、関連する著者のタイムスタンプが更新されます。また、更新する特定のタイムスタンプ属性を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="46550e2dc92461d1a9bec5aa815cb8c7643c013c" translate="yes" xml:space="preserve">
          <source>In this case, saving or destroying a supplier will update the timestamp on the associated account. You can also specify a particular timestamp attribute to update:</source>
          <target state="translated">この場合、サプライヤーを保存または破棄すると、関連するアカウントのタイムスタンプが更新されます。また、更新する特定のタイムスタンプ属性を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="06a3fa81533cea880dc23c87f021c293fd2df3af" translate="yes" xml:space="preserve">
          <source>In this case, the checkbox field will be represented by an HTML &lt;code&gt;input&lt;/code&gt; tag with the &lt;code&gt;name&lt;/code&gt; attribute &lt;code&gt;permission[admin]&lt;/code&gt;, and the submitted value will appear in the controller as &lt;code&gt;params[:permission][:admin]&lt;/code&gt;. If &lt;code&gt;@person.permission&lt;/code&gt; is an existing record with an attribute &lt;code&gt;admin&lt;/code&gt;, the initial state of the checkbox when first displayed will reflect the value of &lt;code&gt;@person.permission.admin&lt;/code&gt;.</source>
          <target state="translated">この場合、チェックボックスフィールドは &lt;code&gt;name&lt;/code&gt; 属性 &lt;code&gt;permission[admin]&lt;/code&gt; 持つHTML &lt;code&gt;input&lt;/code&gt; タグで表され、送信された値は &lt;code&gt;params[:permission][:admin]&lt;/code&gt; としてコントローラーに表示されます。場合 &lt;code&gt;@person.permission&lt;/code&gt; 属性を持つ既存のレコードで &lt;code&gt;admin&lt;/code&gt; 、最初に表示のチェックボックスの初期状態は、の値が反映されます &lt;code&gt;@person.permission.admin&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e31b43893b5d7d80c3642e5735940479c8a39085" translate="yes" xml:space="preserve">
          <source>In this case, the layout would receive the block passed into &lt;code&gt;render
:layout&lt;/code&gt;, and the struct specified would be passed into the block as an argument. The result would be</source>
          <target state="translated">この場合、レイアウトは &lt;code&gt;render :layout&lt;/code&gt; 渡されたブロックを受け取り、指定された構造体が引数としてブロックに渡されます。結果は</target>
        </trans-unit>
        <trans-unit id="eb428f6fa982c5a012e150312c045633b5daa11c" translate="yes" xml:space="preserve">
          <source>In this case, the partial will have access to a local variable &lt;code&gt;title&lt;/code&gt; with the value &quot;Products Page&quot;.</source>
          <target state="translated">この場合、パーシャルは&quot;Products Page&quot;という値を持つローカル変数の &lt;code&gt;title&lt;/code&gt; アクセスできます。</target>
        </trans-unit>
        <trans-unit id="0271f9329c9956c7be3a8dd886bdf6c333e85c14" translate="yes" xml:space="preserve">
          <source>In this case, the problem is that when the &lt;code&gt;before_destroy&lt;/code&gt; callback is executed, the children are not available because the &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;ActiveRecord::Base#destroy&lt;/a&gt; callback gets executed first. You can use the &lt;code&gt;prepend&lt;/code&gt; option on the &lt;code&gt;before_destroy&lt;/code&gt; callback to avoid this.</source>
          <target state="translated">この場合の問題は、 &lt;code&gt;before_destroy&lt;/code&gt; コールバックが実行されると、&lt;a href=&quot;persistence#method-i-destroy&quot;&gt;ActiveRecord :: Base＃destroy&lt;/a&gt;コールバックが最初に実行されるため、子を使用できないことです。これを回避するために、 &lt;code&gt;before_destroy&lt;/code&gt; コールバックで &lt;code&gt;prepend&lt;/code&gt; オプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="9baf39f668787b7ea9b2708f867d659f69a15343" translate="yes" xml:space="preserve">
          <source>In this case, when a user opens the URL &lt;code&gt;/clients/active&lt;/code&gt;, &lt;code&gt;params[:status]&lt;/code&gt; will be set to &quot;active&quot;. When this route is used, &lt;code&gt;params[:foo]&lt;/code&gt; will also be set to &quot;bar&quot;, as if it were passed in the query string. Your controller will also receive &lt;code&gt;params[:action]&lt;/code&gt; as &quot;index&quot; and &lt;code&gt;params[:controller]&lt;/code&gt; as &quot;clients&quot;.</source>
          <target state="translated">この場合、ユーザーがURL &lt;code&gt;/clients/active&lt;/code&gt; を開くと、 &lt;code&gt;params[:status]&lt;/code&gt; が「アクティブ」に設定されます。このルートを使用すると、 &lt;code&gt;params[:foo]&lt;/code&gt; もクエリ文字列で渡されたかのように &quot;bar&quot;に設定されます。また、コントローラーは &lt;code&gt;params[:action]&lt;/code&gt; を「インデックス」として、 &lt;code&gt;params[:controller]&lt;/code&gt; を「クライアント」として受け取ります。</target>
        </trans-unit>
        <trans-unit id="0a36fec3659c2de19ce884ca0a800b73a334ea2d" translate="yes" xml:space="preserve">
          <source>In this case, you would need to configure the proxy server (NGINX, Apache, etc) to accept connections from your application server (Unicorn). By default Unicorn will listen for TCP connections on port 8080, but you can change the port or configure it to use sockets instead.</source>
          <target state="translated">この場合、アプリケーションサーバ(Unicorn)からの接続を受け入れるようにプロキシサーバ(NGINX、Apacheなど)を設定する必要があります。デフォルトでは、Unicornはポート8080でTCP接続をリッスンしますが、ポートを変更したり、代わりにソケットを使用するように設定することができます。</target>
        </trans-unit>
        <trans-unit id="ede2f597296609c3cbf7e0fc1896d94a0128407a" translate="yes" xml:space="preserve">
          <source>In this example a &lt;code&gt;balance&lt;/code&gt; record is transactionally saved even though &lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;transaction&lt;/a&gt; is called on the &lt;code&gt;Account&lt;/code&gt; class:</source>
          <target state="translated">この例では、&lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;取引&lt;/a&gt;が &lt;code&gt;Account&lt;/code&gt; クラスで呼び出されても、 &lt;code&gt;balance&lt;/code&gt; レコードは取引で保存されます。</target>
        </trans-unit>
        <trans-unit id="8315e856964911dcdef9965da60bf232cff0ef4f" translate="yes" xml:space="preserve">
          <source>In this example the filter is added to &lt;code&gt;ApplicationController&lt;/code&gt; and thus all controllers in the application inherit it. This will make everything in the application require the user to be logged in in order to use it. For obvious reasons (the user wouldn't be able to log in in the first place!), not all controllers or actions should require this. You can prevent this filter from running before particular actions with &lt;code&gt;skip_before_action&lt;/code&gt;:</source>
          <target state="translated">この例では、フィルターが &lt;code&gt;ApplicationController&lt;/code&gt; に追加されているため、アプリケーション内のすべてのコントローラーがフィルターを継承します。これにより、アプリケーションを使用するには、ユーザーがログインする必要があります。明らかな理由（ユーザーがそもそもログインできない）のために、すべてのコントローラーまたはアクションでこれが必要になるわけではありません。 &lt;code&gt;skip_before_action&lt;/code&gt; を使用して、特定のアクションの前にこのフィルターが実行されないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="c6ed05101913eb841250d9350938e2a1cbfaa622" translate="yes" xml:space="preserve">
          <source>In this example you will add a method to String named &lt;code&gt;to_squawk&lt;/code&gt;. To begin, create a new test file with a few assertions:</source>
          <target state="translated">この例では、 &lt;code&gt;to_squawk&lt;/code&gt; という名前のメソッドをStringに追加します。まず、いくつかのアサーションを含む新しいテストファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="fedd050168d34065a17d9d68e74077e8c1d0a4f1" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;require_self&lt;/code&gt; is used. This puts the CSS contained within the file (if any) at the precise location of the &lt;code&gt;require_self&lt;/code&gt; call.</source>
          <target state="translated">この例では、 &lt;code&gt;require_self&lt;/code&gt; が使用されています。これにより、ファイル内のCSS（存在する場合）が &lt;code&gt;require_self&lt;/code&gt; 呼び出しの正確な場所に配置されます。</target>
        </trans-unit>
        <trans-unit id="5d763f0c08a6e36b13bfd4f55c2b0c56d55c2060" translate="yes" xml:space="preserve">
          <source>In this example, if any before validate callbacks returns &lt;code&gt;false&lt;/code&gt;, any successive before and around callback is not executed.</source>
          <target state="translated">この例では、before beforeコールバックのいずれかが &lt;code&gt;false&lt;/code&gt; を返した場合、後続のbeforeおよびaroundコールバックは実行されません。</target>
        </trans-unit>
        <trans-unit id="7b577440c4b67419e3dd43e87c84951cf5901392" translate="yes" xml:space="preserve">
          <source>In this example, the :iphone format will be used if it's available, otherwise it'll fallback to the :html format.</source>
          <target state="translated">この例では、利用可能な場合は :iphone 形式が使用され、そうでない場合は :html 形式にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="7e25f6b231c3e7a583a15488e6962be811bbb8cb" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;articles_path&lt;/code&gt; helper is passed to the &lt;code&gt;:url&lt;/code&gt; option. To see what Rails will do with this, we look back at the output of &lt;code&gt;rails routes&lt;/code&gt;:</source>
          <target state="translated">この例では、 &lt;code&gt;articles_path&lt;/code&gt; ヘルパーが &lt;code&gt;:url&lt;/code&gt; オプションに渡されます。Railsがこれで何を行うかを確認するために、 &lt;code&gt;rails routes&lt;/code&gt; 出力を振り返ります。</target>
        </trans-unit>
        <trans-unit id="cefad5f74cb38773452302635f93e20f8d80d081" translate="yes" xml:space="preserve">
          <source>In this example, the first question mark will be replaced with the value in &lt;code&gt;params[:orders]&lt;/code&gt; and the second will be replaced with the SQL representation of &lt;code&gt;false&lt;/code&gt;, which depends on the adapter.</source>
          <target state="translated">この例では、最初の疑問符は &lt;code&gt;params[:orders]&lt;/code&gt; 値に置き換えられ、2番目の疑問符はアダプターに依存する &lt;code&gt;false&lt;/code&gt; のSQL表現に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="a1c27b9227975c797fa6b2e2b282ef1471c2fa42" translate="yes" xml:space="preserve">
          <source>In this example, the subscribed and unsubscribed methods are not callable methods, as they were already declared in &lt;a href=&quot;base&quot;&gt;ActionCable::Channel::Base&lt;/a&gt;, but &lt;code&gt;#appear&lt;/code&gt; and &lt;code&gt;#away&lt;/code&gt; are. &lt;code&gt;#generate_connection_token&lt;/code&gt; is also not callable, since it's a private method. You'll see that appear accepts a data parameter, which it then uses as part of its model call. &lt;code&gt;#away&lt;/code&gt; does not, since it's simply a trigger action.</source>
          <target state="translated">この例では、サブスクライブされたメソッドとサブスクライブされていないメソッドは呼び出し可能メソッドではありません。これらはすでに&lt;a href=&quot;base&quot;&gt;ActionCable :: Channel :: Base&lt;/a&gt;で宣言されていますが、# &lt;code&gt;#appear&lt;/code&gt; と &lt;code&gt;#away&lt;/code&gt; はそうです。 &lt;code&gt;#generate_connection_token&lt;/code&gt; もプライベートメソッドであるため、呼び出し可能ではありません。appearがデータパラメータを受け入れ、モデル呼び出しの一部として使用することがわかります。 &lt;code&gt;#away&lt;/code&gt; はそうしません。これは単にトリガーアクションであるためです。</target>
        </trans-unit>
        <trans-unit id="9e06e6bc72e0675f6e83f410d12668e53aa905bf" translate="yes" xml:space="preserve">
          <source>In this example, the subscription will be rejected if the &lt;code&gt;current_user&lt;/code&gt; does not have access to the chat room. On the client-side, the &lt;code&gt;Channel#rejected&lt;/code&gt; callback will get invoked when the server rejects the subscription request.</source>
          <target state="translated">この例では、 &lt;code&gt;current_user&lt;/code&gt; がチャットルームにアクセスできない場合、サブスクリプションは拒否されます。クライアント側では、サーバーがサブスクリプション要求を拒否すると、 &lt;code&gt;Channel#rejected&lt;/code&gt; コールバックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e4189c06b24b1d007060ef87497a67e0f217bf84" translate="yes" xml:space="preserve">
          <source>In this guide you will learn about engines and how they can be used to provide additional functionality to their host applications through a clean and very easy-to-use interface.</source>
          <target state="translated">このガイドでは、エンジンについて学び、クリーンで非常に使いやすいインターフェイスを介してホストアプリケーションに追加機能を提供するために、どのようにエンジンを使用できるかを学びます。</target>
        </trans-unit>
        <trans-unit id="62fddb8ee2378135835c382d27251f82d4d91a62" translate="yes" xml:space="preserve">
          <source>In this guide you will learn how controllers work and how they fit into the request cycle in your application.</source>
          <target state="translated">このガイドでは、コントローラがどのように動作し、アプリケーションのリクエストサイクルにどのように適合するかを学びます。</target>
        </trans-unit>
        <trans-unit id="cf19788f5357ece34c60a8480d19af8f12bf7ec6" translate="yes" xml:space="preserve">
          <source>In this guide you will learn:</source>
          <target state="translated">このガイドでは、あなたが学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="cf6643c2d1d2064aadb116664a08bad47743e0a1" translate="yes" xml:space="preserve">
          <source>In this guide, you will learn how Action Cable works and how to use WebSockets to incorporate real-time features into your Rails application.</source>
          <target state="translated">このガイドでは、Action Cableがどのように動作するか、またWebSocketを使用してリアルタイム機能をRailsアプリケーションに組み込む方法を学びます。</target>
        </trans-unit>
        <trans-unit id="bdf3816ba71ddd3fd76041fa284bf113f06c1558" translate="yes" xml:space="preserve">
          <source>In this guide, you will learn how to use the instrumentation API inside of Active Support to measure events inside of Rails and other Ruby code.</source>
          <target state="translated">このガイドでは、Active Support内部のインストルメンテーションAPIを使ってRailsや他のRubyコード内部のイベントを測定する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="17d6f3660a8d0024f2df0642dcac76b33986119b" translate="yes" xml:space="preserve">
          <source>In this instance the &lt;code&gt;params&lt;/code&gt; object comes from the context in which the block is executed, e.g. generating a URL inside a controller action or a view. If the block is executed where there isn't a &lt;code&gt;params&lt;/code&gt; object such as this:</source>
          <target state="translated">この場合、 &lt;code&gt;params&lt;/code&gt; オブジェクトは、ブロックが実行されるコンテキストから取得されます。たとえば、コントローラーアクションまたはビュー内でURLを生成します。次のような &lt;code&gt;params&lt;/code&gt; オブジェクトがない場所でブロックが実行される場合：</target>
        </trans-unit>
        <trans-unit id="e775a416c0401e99c05491f16f2e3ad2f0b37cf9" translate="yes" xml:space="preserve">
          <source>In this section, you will learn how to find and fix such leaks by using tool such as Valgrind.</source>
          <target state="translated">このセクションでは、Valgrindのようなツールを使用して、そのような漏れを発見し、修正する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="7264044f5a1a998f82bc2a0fb68556ba4a58797d" translate="yes" xml:space="preserve">
          <source>In this usage, the argument passed to the block (&lt;code&gt;format&lt;/code&gt; above) is an instance of the &lt;a href=&quot;collector&quot;&gt;ActionController::MimeResponds::Collector&lt;/a&gt; class. This object serves as a container in which available responses can be stored by calling any of the dynamically generated, mime-type-specific methods such as &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;xml&lt;/code&gt; etc on the &lt;a href=&quot;collector&quot;&gt;Collector&lt;/a&gt;. Each response is represented by a corresponding block if present.</source>
          <target state="translated">この使用法では、ブロックに渡される引数（上記の &lt;code&gt;format&lt;/code&gt; ）は&lt;a href=&quot;collector&quot;&gt;ActionController :: MimeResponds :: Collector&lt;/a&gt;クラスのインスタンスです。このオブジェクトは、&lt;a href=&quot;collector&quot;&gt;コレクターで&lt;/a&gt; &lt;code&gt;html&lt;/code&gt; 、 &lt;code&gt;xml&lt;/code&gt; などの動的に生成されたMIMEタイプ固有のメソッドを呼び出すことにより、使用可能な応答を格納できるコンテナーとして機能します。各応答は、存在する場合、対応するブロックによって表されます。</target>
        </trans-unit>
        <trans-unit id="33174322f55d37e3ac00f4a987ec114066590e1a" translate="yes" xml:space="preserve">
          <source>In those cases, you may give an options hash a distinguished treatment with &lt;code&gt;extract_options!&lt;/code&gt;. This method checks the type of the last item of an array. If it is a hash it pops it and returns it, otherwise it returns an empty hash.</source>
          <target state="translated">そのような場合、 &lt;code&gt;extract_options!&lt;/code&gt; 使用して、オプションハッシュに特別な扱いを与えることができます。。このメソッドは、配列の最後の項目のタイプをチェックします。ハッシュの場合はポップして返し、それ以外の場合は空のハッシュを返します。</target>
        </trans-unit>
        <trans-unit id="a550daa4f417c340f8beea7b13981602f9c09f42" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;test_helper.rb&lt;/code&gt; add the following:</source>
          <target state="translated">あなたに &lt;code&gt;test_helper.rb&lt;/code&gt; 以下を追加します。</target>
        </trans-unit>
        <trans-unit id="6d1f8e8d9a788b93b49454806edd8d6f19ea0326" translate="yes" xml:space="preserve">
          <source>In your controller you can access the session through the &lt;code&gt;session&lt;/code&gt; instance method.</source>
          <target state="translated">コントローラーでは、 &lt;code&gt;session&lt;/code&gt; インスタンスメソッドを介してセッションにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="20313399289d6ad32ea0f25486fb25f73b6a1650" translate="yes" xml:space="preserve">
          <source>In your integration tests, you can do something like this:</source>
          <target state="translated">統合テストでは、次のようなことができます。</target>
        </trans-unit>
        <trans-unit id="77569b20d1403399dd78bff7dad56dca4c39d837" translate="yes" xml:space="preserve">
          <source>In your migrations/schema, you will add a references column to the model itself.</source>
          <target state="translated">移行/スキーマでは、モデル自体に参照欄を追加します。</target>
        </trans-unit>
        <trans-unit id="ed89d3298ab08bf564636e9e1eea9e37ffc2f147" translate="yes" xml:space="preserve">
          <source>In your view template you could use something like</source>
          <target state="translated">ビューテンプレートでは、次のようなものを使用することができます。</target>
        </trans-unit>
        <trans-unit id="82340ae6007cc58d7c548a04779b98577444585b" translate="yes" xml:space="preserve">
          <source>InboundEmail</source>
          <target state="translated">InboundEmail</target>
        </trans-unit>
        <trans-unit id="a2ca380949bd2057d6cdc7b1a64745c4fb788fad" translate="yes" xml:space="preserve">
          <source>InboundEmail#mail</source>
          <target state="translated">InboundEmail#mail</target>
        </trans-unit>
        <trans-unit id="54414ba50dcb2d80fb74313ab3fda2b9f0df9706" translate="yes" xml:space="preserve">
          <source>InboundEmail#processed?</source>
          <target state="translated">InboundEmail#processed?</target>
        </trans-unit>
        <trans-unit id="824dd431201525fd3c331dec03aa796e0bdf2999" translate="yes" xml:space="preserve">
          <source>InboundEmail#source</source>
          <target state="translated">InboundEmail#source</target>
        </trans-unit>
        <trans-unit id="a4b17cd6aa1bb27eacde79de6be6eb12a19d8fb5" translate="yes" xml:space="preserve">
          <source>InboundEmail::Incineratable</source>
          <target state="translated">InboundEmail::Incineratable</target>
        </trans-unit>
        <trans-unit id="8f576111d92a7d2712339c8f9909670add70e0da" translate="yes" xml:space="preserve">
          <source>InboundEmail::Incineratable#incinerate</source>
          <target state="translated">InboundEmail::Incineratable#incinerate</target>
        </trans-unit>
        <trans-unit id="ab3295021ae0509b9a0423771d3bb8027490f71f" translate="yes" xml:space="preserve">
          <source>InboundEmail::Incineratable#incinerate_later</source>
          <target state="translated">InboundEmail::Incineratable#incinerate_later</target>
        </trans-unit>
        <trans-unit id="4a96b1371404b43e410f57979e0fc13280a27420" translate="yes" xml:space="preserve">
          <source>InboundEmail::Incineratable::Incineration</source>
          <target state="translated">InboundEmail::Incineratable::Incineration</target>
        </trans-unit>
        <trans-unit id="4f0b1cec59ebbd3a8456fb217fa4aca34edbfa2c" translate="yes" xml:space="preserve">
          <source>InboundEmail::Incineratable::Incineration#run</source>
          <target state="translated">InboundEmail::Incineratable::Incineration#run</target>
        </trans-unit>
        <trans-unit id="51cfcbf40a300479b6e6bcbd940a6d346920ecf1" translate="yes" xml:space="preserve">
          <source>InboundEmail::Incineratable::Incineration::new</source>
          <target state="translated">InboundEmail::Incineratable::Incineration::new</target>
        </trans-unit>
        <trans-unit id="40bbbecf96c6d12682faff9578d52533226f3c97" translate="yes" xml:space="preserve">
          <source>InboundEmail::MessageId</source>
          <target state="translated">InboundEmail::MessageId</target>
        </trans-unit>
        <trans-unit id="154e37c7872ea04e9018c3d4634f5f5f366b70d0" translate="yes" xml:space="preserve">
          <source>InboundEmail::MessageId#create_and_extract_message_id!</source>
          <target state="translated">InboundEmail::MessageId#create_and_extract_message_id!</target>
        </trans-unit>
        <trans-unit id="3e18904aabd7444b3358c765ab98ff3e7a93289b" translate="yes" xml:space="preserve">
          <source>InboundEmail::MessageId#extract_message_id</source>
          <target state="translated">InboundEmail::MessageId#extract_message_id</target>
        </trans-unit>
        <trans-unit id="f5912d0e9fb9f1a27f3fcc3d7157b541ab860c0f" translate="yes" xml:space="preserve">
          <source>InboundEmail::MessageId#generate_missing_message_id</source>
          <target state="translated">InboundEmail::MessageId#generate_missing_message_id</target>
        </trans-unit>
        <trans-unit id="2c0be3c66e86606aab01bf26322bb4ede14060b8" translate="yes" xml:space="preserve">
          <source>InboundEmail::Routable</source>
          <target state="translated">InboundEmail::Routable</target>
        </trans-unit>
        <trans-unit id="6c6b1b612c3911b90fce7e2e5e0d1ef6e415c371" translate="yes" xml:space="preserve">
          <source>InboundEmail::Routable#route</source>
          <target state="translated">InboundEmail::Routable#route</target>
        </trans-unit>
        <trans-unit id="ff0fbc44503d8cb2db7d66abca56d62be677cace" translate="yes" xml:space="preserve">
          <source>InboundEmail::Routable#route_later</source>
          <target state="translated">InboundEmail::Routable#route_later</target>
        </trans-unit>
        <trans-unit id="acbf3a393e68b6f6f34e91d2c28dcbb1f27f41ad" translate="yes" xml:space="preserve">
          <source>Incineration of InboundEmails</source>
          <target state="translated">インバウンドメールの焼却</target>
        </trans-unit>
        <trans-unit id="46f00fe566c2a85a7ae293976c1f5cc228d97a9f" translate="yes" xml:space="preserve">
          <source>IncinerationJob</source>
          <target state="translated">IncinerationJob</target>
        </trans-unit>
        <trans-unit id="9a3b927462c4fc3601133e7ebb25fa8381442e2e" translate="yes" xml:space="preserve">
          <source>IncinerationJob#perform</source>
          <target state="translated">IncinerationJob#perform</target>
        </trans-unit>
        <trans-unit id="cac65a7ffa3df433e8908fd590e410aeec250ed8" translate="yes" xml:space="preserve">
          <source>IncinerationJob::schedule</source>
          <target state="translated">IncinerationJob::schedule</target>
        </trans-unit>
        <trans-unit id="5c9882c571c76e2d7257004676310a0cdec5e265" translate="yes" xml:space="preserve">
          <source>Include &lt;code&gt;activestorage.js&lt;/code&gt; in your application's JavaScript bundle.</source>
          <target state="translated">アプリケーションのJavaScriptバンドルに &lt;code&gt;activestorage.js&lt;/code&gt; を含めます。</target>
        </trans-unit>
        <trans-unit id="1bec07c62228d9d427b17ec331ffe481e3050aea" translate="yes" xml:space="preserve">
          <source>Include a field with the current UTC time-stamp in it and check it on the server. If it is too far in the past, or if it is in the future, the form is invalid.</source>
          <target state="translated">フィールドに現在のUTCタイムスタンプを入れて、サーバー上で確認します。それがあまりにも過去のものであったり、未来のものであったりすると、フォームは無効になります。</target>
        </trans-unit>
        <trans-unit id="f121e28368bea6b8e2ce8d128829d6efaa5b3b4a" translate="yes" xml:space="preserve">
          <source>Include in a cookie jar to allow chaining, e.g. cookies.permanent.signed.</source>
          <target state="translated">クッキージャーの中に入れてチェーン化を可能にします。</target>
        </trans-unit>
        <trans-unit id="c100b7d867e6c16b5bd5b980d88e6a2a50d8f041" translate="yes" xml:space="preserve">
          <source>Include more than one honeypot field of all types, including submission buttons</source>
          <target state="translated">送信ボタンを含むすべてのタイプのハニーポットフィールドを1つ以上含む</target>
        </trans-unit>
        <trans-unit id="4c5f87743501282fa63fbaffa15c1a3acc9cc8cd" translate="yes" xml:space="preserve">
          <source>Included modules:</source>
          <target state="translated">含まれているモジュール。</target>
        </trans-unit>
        <trans-unit id="bdf9b5829b7161238ada537108b7fe4a6e34fa4e" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;url_for&lt;/code&gt; into the host class (e.g. an abstract controller or mailer). The class has to provide a &lt;code&gt;RouteSet&lt;/code&gt; by implementing the &lt;code&gt;_routes&lt;/code&gt; methods. Otherwise, an exception will be raised.</source>
          <target state="translated">含まれてい &lt;code&gt;url_for&lt;/code&gt; ホストクラス（例えば、抽象コントローラまたはメーラー）へ。クラスは、 &lt;code&gt;_routes&lt;/code&gt; メソッドを実装してRouteSetを提供する &lt;code&gt;RouteSet&lt;/code&gt; があります。それ以外の場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="2b4374eea981f26c15f5994eec0f3f1ab7ef8047" translate="yes" xml:space="preserve">
          <source>Includes &lt;code&gt;url_for&lt;/code&gt; into the host class. The class has to provide a &lt;code&gt;RouteSet&lt;/code&gt; by implementing the &lt;code&gt;_routes&lt;/code&gt; method. Otherwise, an exception will be raised.</source>
          <target state="translated">含まれてい &lt;code&gt;url_for&lt;/code&gt; ホストクラスに。クラスは、 &lt;code&gt;_routes&lt;/code&gt; メソッドを実装してRouteSetを提供する &lt;code&gt;RouteSet&lt;/code&gt; があります。それ以外の場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="f5579a2df75038fb652d0231bd1004d082f10429" translate="yes" xml:space="preserve">
          <source>Includes methods for executing and performing jobs instantly.</source>
          <target state="translated">瞬時にジョブを実行し、実行するためのメソッドを含む。</target>
        </trans-unit>
        <trans-unit id="631b012f0c3aa49dec56ba3a62ff5bff3b8b3f91" translate="yes" xml:space="preserve">
          <source>Includes the &lt;code&gt;perform_later&lt;/code&gt; method for job initialization.</source>
          <target state="translated">ジョブの初期化用の &lt;code&gt;perform_later&lt;/code&gt; メソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="53c7595c01b9dbfe8612fe4bc1db96f60de2a369" translate="yes" xml:space="preserve">
          <source>Includes the ability to override the default queue name and prefix.</source>
          <target state="translated">デフォルトのキュー名とプレフィックスを上書きする機能を含みます。</target>
        </trans-unit>
        <trans-unit id="e7990a0676a74bda5cc28e40baf19fd593e762c7" translate="yes" xml:space="preserve">
          <source>Includes the ability to override the default queue priority.</source>
          <target state="translated">デフォルトのキューの優先度を上書きする機能を含みます。</target>
        </trans-unit>
        <trans-unit id="e15c12fa809cf4ddf2cfdca94bdae62aa1fa326a" translate="yes" xml:space="preserve">
          <source>Includes the required interface for an object to interact with Action Pack and Action View, using different Active &lt;a href=&quot;model&quot;&gt;Model&lt;/a&gt; modules. It includes model name introspections, conversions, translations and validations. Besides that, it allows you to initialize the object with a hash of attributes, pretty much like Active Record does.</source>
          <target state="translated">さまざまなアクティブ&lt;a href=&quot;model&quot;&gt;モデル&lt;/a&gt;モジュールを使用して、オブジェクトがアクションパックやアクションビューとやり取りするために必要なインターフェイスが含まれています。モデル名のイントロスペクション、変換、翻訳、検証が含まれます。その上、Active Recordとほぼ同じように、属性のハッシュでオブジェクトを初期化できます。</target>
        </trans-unit>
        <trans-unit id="c7fea2d3a0b9e01a0a5f139f1591c47d3c91bbc9" translate="yes" xml:space="preserve">
          <source>Includes the setter method for changing the active queue adapter.</source>
          <target state="translated">アクティブキューアダプタを変更するためのセッターメソッドを含みます。</target>
        </trans-unit>
        <trans-unit id="aa5f93716a712ea4619d480ed3cde7ae07449569" translate="yes" xml:space="preserve">
          <source>Including &lt;code&gt;ActionController::Live&lt;/code&gt; inside of your controller class will provide all actions inside of the controller the ability to stream data. You can mix in the module like so:</source>
          <target state="translated">コントローラークラス内に &lt;code&gt;ActionController::Live&lt;/code&gt; を含めると、コントローラー内のすべてのアクションにデータをストリーミングする機能が提供されます。次のようにモジュールで混ぜることができます：</target>
        </trans-unit>
        <trans-unit id="bab20420de5d9ccbf10b3dcff8cc1b95ab75628b" translate="yes" xml:space="preserve">
          <source>Including a nonce (a random value) in the session solves replay attacks. A nonce is valid only once, and the server has to keep track of all the valid nonces. It gets even more complicated if you have several application servers. Storing nonces in a database table would defeat the entire purpose of CookieStore (avoiding accessing the database).</source>
          <target state="translated">セッションに nonce (ランダムな値)を含めることでリプレイ攻撃を解決します。nonce は一度しか有効ではなく、サーバは有効な nonce をすべて追跡しなければなりません。複数のアプリケーションサーバがある場合は、さらに複雑になります。データベーステーブルに nonce を保存すると、CookieStore の目的(データベースへのアクセスを避けること)を完全に打ち破ることになります。</target>
        </trans-unit>
        <trans-unit id="3ba3a191a2f605b7f6e1de97049978194d3e3d3a" translate="yes" xml:space="preserve">
          <source>Increment a cached value. This method uses the Redis incr atomic operator and can only be used on values written with the :raw option. Calling it on a value not stored with :raw will initialize that value to zero.</source>
          <target state="translated">キャッシュされた値をインクリメントします。このメソッドは、Redisのincrアトミック演算子を使用し、 :rawオプションで書き込まれた値に対してのみ使用できます。raw で保存されていない値に対してこのメソッドを呼び出すと、その値がゼロに初期化されます。</target>
        </trans-unit>
        <trans-unit id="84d6064c26c32bbd7bab16ef8fd8429566031c22" translate="yes" xml:space="preserve">
          <source>Increment a cached value. This method uses the memcached incr atomic operator and can only be used on values written with the :raw option. Calling it on a value not stored with :raw will initialize that value to zero.</source>
          <target state="translated">キャッシュされた値をインクリメントします。このメソッドは memcached incr アトミック演算子を使用し、 :raw オプションで書き込まれた値に対してのみ使用できます。raw で保存されていない値に対してこのメソッドを呼び出すと、その値がゼロに初期化されます。</target>
        </trans-unit>
        <trans-unit id="dd0c837987bda03b85ceb94f7c3cfea331fe8115" translate="yes" xml:space="preserve">
          <source>Increment a numeric field by one, via a direct SQL update.</source>
          <target state="translated">SQLを直接更新することで、数値フィールドを1つインクリメントします。</target>
        </trans-unit>
        <trans-unit id="975a549b7ff243eb9938d718f3659245c93a9383" translate="yes" xml:space="preserve">
          <source>Increment an integer value in the cache.</source>
          <target state="translated">キャッシュ内の整数値をインクリメントします。</target>
        </trans-unit>
        <trans-unit id="78f8148e4691770bb4ee98b5331ee87d3d67f053" translate="yes" xml:space="preserve">
          <source>Increments an already existing integer value that is stored in the cache. If the key is not found nothing is done.</source>
          <target state="translated">キャッシュに保存されている既存の整数値をインクリメントします。キーが見つからない場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="5c60a79bc55fbbd08f59d91ffb860f8c89bb4d61" translate="yes" xml:space="preserve">
          <source>Increments an integer value in the cache.</source>
          <target state="translated">キャッシュ内の整数値をインクリメントします。</target>
        </trans-unit>
        <trans-unit id="ac8f586235cd9c9a54e04e1582486b97984ef9e5" translate="yes" xml:space="preserve">
          <source>Indeed, those features are provided by Ruby on Rails, where we just write</source>
          <target state="translated">実際、これらの機能はRuby on Railsで提供されています。</target>
        </trans-unit>
        <trans-unit id="15cfadc26717bad880a9fde19a51e2f1ba2fa5ba" translate="yes" xml:space="preserve">
          <source>Indent the &lt;code&gt;Gemfile&lt;/code&gt; to the depth of @indentation</source>
          <target state="translated">&lt;code&gt;Gemfile&lt;/code&gt; を@indentationの深さまでインデントします</target>
        </trans-unit>
        <trans-unit id="55a69bd5ad72c95be80535a77a034016a752d59f" translate="yes" xml:space="preserve">
          <source>Indents the lines in the receiver:</source>
          <target state="translated">受信機のラインをインデントします。</target>
        </trans-unit>
        <trans-unit id="383b324a3291b51f1e54ef9c0d763010fbc5e171" translate="yes" xml:space="preserve">
          <source>IndexError</source>
          <target state="translated">IndexError</target>
        </trans-unit>
        <trans-unit id="6af6ebf2652770fb07b7edc8a706df252af3c13a" translate="yes" xml:space="preserve">
          <source>Indicates if the model is persisted. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">モデルが永続化されているかどうかを示します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2fd1b698c13f9950dbc0a396b271f3999ea4de3b" translate="yes" xml:space="preserve">
          <source>Indicates whether table names should be the pluralized versions of the corresponding class names. If true, the default table name for a Product class will be &amp;ldquo;products&amp;rdquo;. If false, it would just be &amp;ldquo;product&amp;rdquo;. See table_name for the full rules on table/class naming. This is true, by default.</source>
          <target state="translated">テーブル名を対応するクラス名の複数形バージョンにするかどうかを示します。trueの場合、Productクラスのデフォルトのテーブル名は「products」になります。falseの場合、それは単に「製品」になります。テーブル/クラスの命名に関する完全な規則については、table_nameを参照してください。これはデフォルトで当てはまります。</target>
        </trans-unit>
        <trans-unit id="dc64305a14542034550a32ad76b58e39ab963e2d" translate="yes" xml:space="preserve">
          <source>Indicates whether the table associated with this class exists</source>
          <target state="translated">このクラスに関連付けられたテーブルが存在するかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="b833fb286a71c34f5e91a0725ed89419e3cd6797" translate="yes" xml:space="preserve">
          <source>Indifferent Access</source>
          <target state="translated">無関心アクセス</target>
        </trans-unit>
        <trans-unit id="e377a7420d75303382002218677f891fbd8e5368" translate="yes" xml:space="preserve">
          <source>Individual Components</source>
          <target state="translated">個別部品</target>
        </trans-unit>
        <trans-unit id="af78b717bb9e05184fbb67ea0224879b5cf257ac" translate="yes" xml:space="preserve">
          <source>Inflection Rules For Other Locales</source>
          <target state="translated">他のロケールのインフレクションルール</target>
        </trans-unit>
        <trans-unit id="7919b931473684f976aff4e0e966d02ccdc1b05a" translate="yes" xml:space="preserve">
          <source>Inflections</source>
          <target state="translated">Inflections</target>
        </trans-unit>
        <trans-unit id="5ade1199eca264ac0dfc557731d76a0f599ba79e" translate="yes" xml:space="preserve">
          <source>Info::inspect</source>
          <target state="translated">Info::inspect</target>
        </trans-unit>
        <trans-unit id="5e57975599660667fcec0e77696ab5bd3ccb669a" translate="yes" xml:space="preserve">
          <source>Info::property</source>
          <target state="translated">Info::property</target>
        </trans-unit>
        <trans-unit id="e8c940c56b021e4e98e5c24a447c9f7fb6f97ec7" translate="yes" xml:space="preserve">
          <source>Info::to_html</source>
          <target state="translated">Info::to_html</target>
        </trans-unit>
        <trans-unit id="6d3ae8926026fa77c4627cf590895d6f17c9ff4e" translate="yes" xml:space="preserve">
          <source>Info::to_s</source>
          <target state="translated">Info::to_s</target>
        </trans-unit>
        <trans-unit id="238da28b1ea22430b20905f64adaf447cc97c56b" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from Mailgun. Requires the following parameters:</source>
          <target state="translated">Mailgunからのインバウンドメールをインジェストする。以下のパラメータが必要です。</target>
        </trans-unit>
        <trans-unit id="c243d42c40b1b079fac4e495d20a5f383add383e" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from Mandrill.</source>
          <target state="translated">Mandrillからのインバウンドメールをインジェストします。</target>
        </trans-unit>
        <trans-unit id="2e89987697155a3aab4cf8005968c5692402a010" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from Postmark. Requires a &lt;code&gt;RawEmail&lt;/code&gt; parameter containing a full RFC 822 message.</source>
          <target state="translated">消印から受信メールを取り込みます。完全なRFC 822メッセージを含む &lt;code&gt;RawEmail&lt;/code&gt; パラメータが必要です。</target>
        </trans-unit>
        <trans-unit id="04e8776b1781cf6ec53bef1b8cc34a7ff1a0e9d4" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails from SendGrid. Requires an &lt;code&gt;email&lt;/code&gt; parameter containing a full RFC 822 message.</source>
          <target state="translated">SendGridから受信メールを取り込みます。完全なRFC 822メッセージを含む &lt;code&gt;email&lt;/code&gt; パラメータが必要です。</target>
        </trans-unit>
        <trans-unit id="844c9e9ffaf6b19ebb0cb6befdac150c47968826" translate="yes" xml:space="preserve">
          <source>Ingests inbound emails relayed from an SMTP server.</source>
          <target state="translated">SMTPサーバから中継されたインバウンドメールをインジェストします。</target>
        </trans-unit>
        <trans-unit id="7da25d8a59155f55aeac4ed34d5ae1b9e20f37f3" translate="yes" xml:space="preserve">
          <source>Ingresses::Mailgun::InboundEmailsController</source>
          <target state="translated">Ingresses::Mailgun::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="b6d7efeec877849944e373cc37ee9788cbc2bde9" translate="yes" xml:space="preserve">
          <source>Ingresses::Mailgun::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Mailgun::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="d471c518a4e0625f34b076410d3be699c0bfa111" translate="yes" xml:space="preserve">
          <source>Ingresses::Mandrill::InboundEmailsController</source>
          <target state="translated">Ingresses::Mandrill::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="6497cdc2b1c087141d75471048d8be9f2619e409" translate="yes" xml:space="preserve">
          <source>Ingresses::Mandrill::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Mandrill::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="32482320e6f8c5325ea6fc34ae05791cb30bc211" translate="yes" xml:space="preserve">
          <source>Ingresses::Postmark::InboundEmailsController</source>
          <target state="translated">Ingresses::Postmark::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="def7ccd5bae34830a8dcd032d9c179d5f085af18" translate="yes" xml:space="preserve">
          <source>Ingresses::Postmark::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Postmark::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="7055870ae3e931a2224267afbbb92ab8f653c953" translate="yes" xml:space="preserve">
          <source>Ingresses::Relay::InboundEmailsController</source>
          <target state="translated">Ingresses::Relay::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="d68de4f5b7ef94464fcb633024f3afa8e9d82b81" translate="yes" xml:space="preserve">
          <source>Ingresses::Relay::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Relay::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="3315bf43c874cae6ee36c7d291e89ba04abb6915" translate="yes" xml:space="preserve">
          <source>Ingresses::Sendgrid::InboundEmailsController</source>
          <target state="translated">Ingresses::Sendgrid::InboundEmailsController</target>
        </trans-unit>
        <trans-unit id="79fc86436700d42b832b3c4ea9ae5af07d6ac826" translate="yes" xml:space="preserve">
          <source>Ingresses::Sendgrid::InboundEmailsController#create</source>
          <target state="translated">Ingresses::Sendgrid::InboundEmailsController#create</target>
        </trans-unit>
        <trans-unit id="9addf5a08ee6560a6444bfa5da226f9dda5097e8" translate="yes" xml:space="preserve">
          <source>Inheritable callback queues</source>
          <target state="translated">継承可能なコールバックキュー</target>
        </trans-unit>
        <trans-unit id="878ffd80536d567c1ec4814aab5eb7633c481c93" translate="yes" xml:space="preserve">
          <source>InheritableOptions</source>
          <target state="translated">InheritableOptions</target>
        </trans-unit>
        <trans-unit id="3d6a119a959e8cbe5490945458d11f87f26d87c5" translate="yes" xml:space="preserve">
          <source>InheritableOptions#inheritable_copy</source>
          <target state="translated">InheritableOptions#inheritable_copy</target>
        </trans-unit>
        <trans-unit id="108a36b1b8200fb5a72710521a7d03c26b191aca" translate="yes" xml:space="preserve">
          <source>InheritableOptions::new</source>
          <target state="translated">InheritableOptions::new</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="6990f737f07155678850da157ebfcf4ec6a6199e" translate="yes" xml:space="preserve">
          <source>Inheritance Examples</source>
          <target state="translated">相続の例</target>
        </trans-unit>
        <trans-unit id="bde126929181e729972ad7d9ddf772e47cda5bd8" translate="yes" xml:space="preserve">
          <source>Inheritance#initialize_dup</source>
          <target state="translated">Inheritance#initialize_dup</target>
        </trans-unit>
        <trans-unit id="a326a867145d9f00f1712c47c8eb34e3439ab41c" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods</source>
          <target state="translated">Inheritance::ClassMethods</target>
        </trans-unit>
        <trans-unit id="a01613b2b9238ef321f4b05a78a4568055d71e6e" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#abstract_class</source>
          <target state="translated">Inheritance::ClassMethods#abstract_class</target>
        </trans-unit>
        <trans-unit id="4934c3b146a1d79f2577e3e67ff820d302381e18" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#abstract_class?</source>
          <target state="translated">Inheritance::ClassMethods#abstract_class?</target>
        </trans-unit>
        <trans-unit id="00e7918294e24f28c311b4076f415b7d8b83740e" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#base_class</source>
          <target state="translated">Inheritance::ClassMethods#base_class</target>
        </trans-unit>
        <trans-unit id="04a62c79aa4cb9e487fae1d12175cd1d777f6770" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#base_class?</source>
          <target state="translated">Inheritance::ClassMethods#base_class?</target>
        </trans-unit>
        <trans-unit id="0fb13c325e9fe3b08f15be74bd775aff377f5c5b" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#compute_type</source>
          <target state="translated">Inheritance::ClassMethods#compute_type</target>
        </trans-unit>
        <trans-unit id="15186ad27ca45e760e125a07d16fa8e79261d707" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#descends_from_active_record?</source>
          <target state="translated">Inheritance::ClassMethods#descends_from_active_record?</target>
        </trans-unit>
        <trans-unit id="0635fb33f336fafb4ba4e40502aff8a83777dcc6" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#inherited</source>
          <target state="translated">Inheritance::ClassMethods#inherited</target>
        </trans-unit>
        <trans-unit id="977d92bc899515934b4b966eb7654018c87db3bf" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#new</source>
          <target state="translated">Inheritance::ClassMethods#new</target>
        </trans-unit>
        <trans-unit id="372df04a248e04ff8449a2c54ffff50187ce7f28" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#polymorphic_name</source>
          <target state="translated">Inheritance::ClassMethods#polymorphic_name</target>
        </trans-unit>
        <trans-unit id="2a2dfa372be9c94c50976c8495df7eae0586c8a4" translate="yes" xml:space="preserve">
          <source>Inheritance::ClassMethods#sti_name</source>
          <target state="translated">Inheritance::ClassMethods#sti_name</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="6514323c8fb77a04ce286a1549e2bf030a862781" translate="yes" xml:space="preserve">
          <source>Initialization events</source>
          <target state="translated">初期化イベント</target>
        </trans-unit>
        <trans-unit id="12ddca1d545d5a1128488691ed488f4cd1e459af" translate="yes" xml:space="preserve">
          <source>Initialize a new &lt;a href=&quot;messageencryptor&quot;&gt;MessageEncryptor&lt;/a&gt;. &lt;code&gt;secret&lt;/code&gt; must be at least as long as the cipher key size. For the default 'aes-256-gcm' cipher, this is 256 bits. If you are using a user-entered secret, you can generate a suitable key by using &lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt; or a similar key derivation function.</source>
          <target state="translated">新しい&lt;a href=&quot;messageencryptor&quot;&gt;MessageEncryptorを&lt;/a&gt;初期化します。 &lt;code&gt;secret&lt;/code&gt; は、少なくとも暗号鍵のサイズと同じ長さでなければなりません。デフォルトの「aes-256-gcm」暗号の場合、これは256ビットです。ユーザーが入力したシークレットを使用している場合は、 &lt;code&gt;ActiveSupport::KeyGenerator&lt;/code&gt; または同様のキー派生関数を使用して適切なキーを生成できます。</target>
        </trans-unit>
        <trans-unit id="96d7e26d527682af0767568cd6eff6730b2648d3" translate="yes" xml:space="preserve">
          <source>Initialize an empty model object from &lt;code&gt;coder&lt;/code&gt;. &lt;code&gt;coder&lt;/code&gt; should be the result of previously encoding an Active Record model, using &lt;a href=&quot;core#method-i-encode_with&quot;&gt;encode_with&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;coder&lt;/code&gt; から空のモデルオブジェクトを初期化します。 &lt;code&gt;coder&lt;/code&gt; は、&lt;a href=&quot;core#method-i-encode_with&quot;&gt;encode_with&lt;/a&gt;を使用してアクティブレコードモデルを以前にエンコードした結果である必要があります。</target>
        </trans-unit>
        <trans-unit id="db5e65d8fc7dddd98f6860c2416bcbcc90ec0fba" translate="yes" xml:space="preserve">
          <source>Initializers</source>
          <target state="translated">Initializers</target>
        </trans-unit>
        <trans-unit id="3cc643394e015280b5fb20c2d82a6a247d93fb7d" translate="yes" xml:space="preserve">
          <source>Initializers defined using the &lt;code&gt;initializer&lt;/code&gt; method will be run in the order they are defined in, with the exception of ones that use the &lt;code&gt;:before&lt;/code&gt; or &lt;code&gt;:after&lt;/code&gt; methods.</source>
          <target state="translated">初期 &lt;code&gt;initializer&lt;/code&gt; メソッドを使用して定義された初期化子は、 &lt;code&gt;:before&lt;/code&gt; または &lt;code&gt;:after&lt;/code&gt; メソッドを使用するものを除いて、定義された順序で実行されます。</target>
        </trans-unit>
        <trans-unit id="a86d77af0c3722c3e4da4c178fb648acf43fc367" translate="yes" xml:space="preserve">
          <source>Initializes &lt;code&gt;attribute&lt;/code&gt; to zero if &lt;code&gt;nil&lt;/code&gt; and adds the value passed as &lt;code&gt;by&lt;/code&gt; (default is 1). The increment is performed directly on the underlying attribute, no setter is invoked. Only makes sense for number-based attributes. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">初期化 &lt;code&gt;attribute&lt;/code&gt; であればゼロに &lt;code&gt;nil&lt;/code&gt; として渡された値追加 &lt;code&gt;by&lt;/code&gt; （デフォルトは1です）。増分は、基礎となる属性に対して直接実行され、セッターは呼び出されません。数値ベースの属性に対してのみ意味があります。 &lt;code&gt;self&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="fcd42385993fdf0221b329817d9382977b72308d" translate="yes" xml:space="preserve">
          <source>Initializes &lt;code&gt;attribute&lt;/code&gt; to zero if &lt;code&gt;nil&lt;/code&gt; and subtracts the value passed as &lt;code&gt;by&lt;/code&gt; (default is 1). The decrement is performed directly on the underlying attribute, no setter is invoked. Only makes sense for number-based attributes. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">初期化 &lt;code&gt;attribute&lt;/code&gt; 場合は、ゼロに &lt;code&gt;nil&lt;/code&gt; と減算として渡された値 &lt;code&gt;by&lt;/code&gt; （デフォルトは1です）。デクリメントは、基礎となる属性で直接実行され、セッターは呼び出されません。数値ベースの属性に対してのみ意味があります。 &lt;code&gt;self&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="9d1efbf2932073f2aaa30fb69d34ca59d561f6dc" translate="yes" xml:space="preserve">
          <source>Initializes a new model with the given &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;params&lt;/code&gt; で新しいモデルを初期化します。</target>
        </trans-unit>
        <trans-unit id="25919e950f14f28342516aa26edc8ef27fb8cfe7" translate="yes" xml:space="preserve">
          <source>Initializes and connects a PostgreSQL adapter.</source>
          <target state="translated">PostgreSQLアダプタを初期化して接続します。</target>
        </trans-unit>
        <trans-unit id="5f44168de8e6de1f11fd906b709a9ac6d9152d00" translate="yes" xml:space="preserve">
          <source>Initializes new record from relation while maintaining the current scope.</source>
          <target state="translated">現在のスコープを維持したまま、リレーションから新しいレコードを初期化します。</target>
        </trans-unit>
        <trans-unit id="56915b94b06061a272ee042aac64cce078107917" translate="yes" xml:space="preserve">
          <source>Initiate a manual reload</source>
          <target state="translated">手動リロードを開始する</target>
        </trans-unit>
        <trans-unit id="2d851649cb0b809ff3f794243faf8b50aac49273" translate="yes" xml:space="preserve">
          <source>Injection</source>
          <target state="translated">Injection</target>
        </trans-unit>
        <trans-unit id="829ffb5e8ba86505d0ede43d4f74c3b605d82ec6" translate="yes" xml:space="preserve">
          <source>Injection is very tricky, because the same code or parameter can be malicious in one context, but totally harmless in another. A context can be a scripting, query, or programming language, the shell, or a Ruby/Rails method. The following sections will cover all important contexts where injection attacks may happen. The first section, however, covers an architectural decision in connection with Injection.</source>
          <target state="translated">インジェクションは非常に厄介です。同じコードやパラメータがあるコンテキストでは悪意のあるものでも、別のコンテキストでは全く無害になることがあるからです。コンテキストには、スクリプト、クエリ、プログラミング言語、シェル、Ruby/Rails のメソッドなどがあります。以下のセクションでは、インジェクション攻撃が行われる可能性のある重要なコンテキストをすべて取り上げます。しかし、最初のセクションでは、インジェクションに関連したアーキテクチャ上の決定を扱います。</target>
        </trans-unit>
        <trans-unit id="6485cd5f8e0fb60a6b40665efa4be6e80ab8c693" translate="yes" xml:space="preserve">
          <source>Injects a block of code into a defined position in your file.</source>
          <target state="translated">ファイル内の定義された位置にコードブロックを挿入します。</target>
        </trans-unit>
        <trans-unit id="d2860d2edae8411abdfa46d50321f29af97f5353" translate="yes" xml:space="preserve">
          <source>Inline Attachments</source>
          <target state="translated">インラインアタッチメント</target>
        </trans-unit>
        <trans-unit id="b46ea27191430cc66d892811d5c5909433511f69" translate="yes" xml:space="preserve">
          <source>Inline callback blocks using &lt;code&gt;return&lt;/code&gt; can be refactored to evaluate to the returned value:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; を使用したインラインコールバックブロックをリファクタリングして、戻り値を評価できます。</target>
        </trans-unit>
        <trans-unit id="29a8dda03d8fa26cf788bd2ddffa18aa80d59c11" translate="yes" xml:space="preserve">
          <source>InlinePreviewInterceptor</source>
          <target state="translated">InlinePreviewInterceptor</target>
        </trans-unit>
        <trans-unit id="a845996754ffc7a0716a05091edc051fd302fc2e" translate="yes" xml:space="preserve">
          <source>Inserting data into HTML templates needs extra care. For example, you can't just interpolate &lt;code&gt;@review.title&lt;/code&gt; verbatim into an HTML page. For one thing, if the review title is &quot;Flanagan &amp;amp; Matz rules!&quot; the output won't be well-formed because an ampersand has to be escaped as &quot;&amp;amp;amp;&quot;. What's more, depending on the application, that may be a big security hole because users can inject malicious HTML setting a hand-crafted review title. Check out the section about cross-site scripting in the &lt;a href=&quot;security#cross-site-scripting-xss&quot;&gt;Security guide&lt;/a&gt; for further information about the risks.</source>
          <target state="translated">HTMLテンプレートへのデータの挿入には、さらに注意が必要です。たとえば、 &lt;code&gt;@review.title&lt;/code&gt; そのままHTMLページに補間することはできません。1つには、レビューのタイトルが「Flanagan＆Matz rules！」の場合です。アンパサンドは「＆amp;」としてエスケープする必要があるため、出力は整形式ではありません。さらに、アプリケーションによっては、ユーザーが悪意のあるHTMLを挿入して手作りのレビュータイトルを設定できるため、これは大きなセキュリティホールになる可能性があります。リスクの詳細については、&lt;a href=&quot;security#cross-site-scripting-xss&quot;&gt;セキュリティガイドの&lt;/a&gt;クロスサイトスクリプティングに関するセクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="01be4a345faed307605daf983eeed9bc1912f61d" translate="yes" xml:space="preserve">
          <source>Inserts a single record into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="translated">単一のSQL INSERT文で単一のレコードをデータベースに挿入します。これは、モデルをインスタンス化したり、Active Record のコールバックやバリデーションをトリガーしたりしません。しかし、渡された値はActive Recordの型キャストとシリアライズを通過します。</target>
        </trans-unit>
        <trans-unit id="f2098ea62054241a3c2030b9e7b979d66024097c" translate="yes" xml:space="preserve">
          <source>Inserts multiple records into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="translated">単一のSQL INSERT文で複数のレコードをデータベースに挿入します。これは、モデルをインスタンス化したり、Active Record のコールバックやバリデーションをトリガーしたりしません。しかし、渡された値はActive Recordの型キャストとシリアライズを通過します。</target>
        </trans-unit>
        <trans-unit id="3e75d211e60bc43f28ee2a4034ae9797a2cd4e71" translate="yes" xml:space="preserve">
          <source>Inserts the given fixture into the table. Overridden in adapters that require something beyond a simple insert (eg. Oracle). Most of adapters should implement `insert_fixtures_set` that leverages bulk SQL insert. We keep this method to provide fallback for databases like sqlite that do not support bulk inserts.</source>
          <target state="translated">指定したフィクスチャをテーブルに挿入します。単純な挿入以上のものを必要とするアダプタではオーバーライドされます (例:Oracle)。ほとんどのアダプタは、SQLの一括挿入を利用した `insert_fixtures_set` を実装しなければなりません。このメソッドは、バルク挿入をサポートしていない sqlite のようなデータベースのフォールバックを提供するために残しています。</target>
        </trans-unit>
        <trans-unit id="dcdce6d287df6df156ef34c4bebe0e7598a298eb" translate="yes" xml:space="preserve">
          <source>Inside a Rails application, you can set-up your services through the generated &lt;code&gt;config/storage.yml&lt;/code&gt; file and reference one of the aforementioned constant under the &lt;code&gt;service&lt;/code&gt; key. For example:</source>
          <target state="translated">Railsアプリケーション内では、生成された &lt;code&gt;config/storage.yml&lt;/code&gt; ファイルを使用してサービスをセットアップし、 &lt;code&gt;service&lt;/code&gt; キーの下で前述の定数の1つを参照できます。例えば：</target>
        </trans-unit>
        <trans-unit id="81fc66f02c626e819fce091962b69cd908ed799a" translate="yes" xml:space="preserve">
          <source>Inside an Engine</source>
          <target state="translated">エンジン内部</target>
        </trans-unit>
        <trans-unit id="ca089a5502c726d8026d3a6ef582d1f9c7041b18" translate="yes" xml:space="preserve">
          <source>Inside any Rails application you can then invoke the debugger by calling the &lt;code&gt;byebug&lt;/code&gt; method.</source>
          <target state="translated">Railsアプリケーション内では、 &lt;code&gt;byebug&lt;/code&gt; メソッドを呼び出すことでデバッガーを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7bafd3cd51f90726af9a9d1acaf7aa7cadd199a4" translate="yes" xml:space="preserve">
          <source>Inside any controller action or view, you can invoke the console by calling the &lt;code&gt;console&lt;/code&gt; method.</source>
          <target state="translated">任意のコントローラーアクションまたはビュー内で、 &lt;code&gt;console&lt;/code&gt; メソッドを呼び出すことによってコンソールを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="21481b8c559c4c02b87406f78ebeb054fe506b43" translate="yes" xml:space="preserve">
          <source>Inside migration files, the &lt;code&gt;t&lt;/code&gt; object in &lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt; is actually of this type:</source>
          <target state="translated">移行ファイル内では、&lt;a href=&quot;schemastatements#method-i-create_table&quot;&gt;create_table&lt;/a&gt;の &lt;code&gt;t&lt;/code&gt; オブジェクトは実際には次のタイプです。</target>
        </trans-unit>
        <trans-unit id="acfb2b1ac48dee8a30cfcdf3f4dfe998556d2d5a" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; block you can use all of the usual &lt;a href=&quot;../relation&quot;&gt;Relation&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;-&amp;gt; { ... }&lt;/code&gt; ブロック内では、通常の&lt;a href=&quot;../relation&quot;&gt;Relation&lt;/a&gt;メソッドをすべて使用できます。</target>
        </trans-unit>
        <trans-unit id="edfc5dfee3505b9f9d6bda671872ebd4a4ee350e" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;app&lt;/code&gt; directory are the standard &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;controllers&lt;/code&gt;, &lt;code&gt;helpers&lt;/code&gt;, &lt;code&gt;jobs&lt;/code&gt;, &lt;code&gt;mailers&lt;/code&gt;, &lt;code&gt;models&lt;/code&gt;, and &lt;code&gt;views&lt;/code&gt; directories that you should be familiar with from an application. We'll look more into models in a future section, when we're writing the engine.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; ディレクトリー内には、アプリケーションから精通している必要がある標準の &lt;code&gt;assets&lt;/code&gt; 、 &lt;code&gt;controllers&lt;/code&gt; 、 &lt;code&gt;helpers&lt;/code&gt; 、 &lt;code&gt;jobs&lt;/code&gt; 、 &lt;code&gt;mailers&lt;/code&gt; 、 &lt;code&gt;models&lt;/code&gt; 、および &lt;code&gt;views&lt;/code&gt; ディレクトリーがあります。エンジンを作成するときは、モデルの詳細については、今後のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="3b5bb7d78f59ef0d2405b8e986fb4763ebd602dd" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;rails console&lt;/code&gt; you have access to the &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;helper&lt;/code&gt; instances.</source>
          <target state="translated">&lt;code&gt;rails console&lt;/code&gt; 内では、 &lt;code&gt;app&lt;/code&gt; と &lt;code&gt;helper&lt;/code&gt; インスタンスにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="6469372268010b680566e892d837c1be10063e1d" translate="yes" xml:space="preserve">
          <source>Inside the test directory there is the &lt;code&gt;test/integration&lt;/code&gt; directory, where integration tests for the engine should be placed. Other directories can be created in the &lt;code&gt;test&lt;/code&gt; directory as well. For example, you may wish to create a &lt;code&gt;test/models&lt;/code&gt; directory for your model tests.</source>
          <target state="translated">テストディレクトリ内には &lt;code&gt;test/integration&lt;/code&gt; ディレクトリがあり、エンジンの統合テストを配置する必要があります。その他のディレクトリも &lt;code&gt;test&lt;/code&gt; ディレクトリに作成できます。たとえば、モデルテスト用に &lt;code&gt;test/models&lt;/code&gt; ディレクトリを作成するとします。</target>
        </trans-unit>
        <trans-unit id="8408bbf7dfd69738c24b99c0074fd7a247613a94" translate="yes" xml:space="preserve">
          <source>Inspecting Middleware Stack</source>
          <target state="translated">ミドルウェアスタックの検査</target>
        </trans-unit>
        <trans-unit id="a6ae35f450b26d859c2118e63fa573b3bd8d5308" translate="yes" xml:space="preserve">
          <source>Inspecting Variables</source>
          <target state="translated">変数の検査</target>
        </trans-unit>
        <trans-unit id="c92130bec27348f9c16772e495150fc6bd805def" translate="yes" xml:space="preserve">
          <source>Inspecting and Testing Routes</source>
          <target state="translated">ルートの検査とテスト</target>
        </trans-unit>
        <trans-unit id="cfb0a450eea8507a41095ebe947ca2ed8994961a" translate="yes" xml:space="preserve">
          <source>Inspired by the Quiet Backtrace gem by thoughtbot.</source>
          <target state="translated">thoughtbotの「Quiet Backtrace」という宝石にインスパイアされました。</target>
        </trans-unit>
        <trans-unit id="8dacdfdb2b7181d7db1e289a5292e9965b1d7fd8" translate="yes" xml:space="preserve">
          <source>Install a callback for the given event.</source>
          <target state="translated">与えられたイベントのコールバックをインストールします。</target>
        </trans-unit>
        <trans-unit id="17ec383645ad0dd91277a304080964bf80f4f253" translate="yes" xml:space="preserve">
          <source>Install migrations needed for &lt;code&gt;InboundEmail&lt;/code&gt; and ensure Active Storage is set up:</source>
          <target state="translated">&lt;code&gt;InboundEmail&lt;/code&gt; に必要な移行をインストールし、アクティブストレージがセットアップされていることを確認します。</target>
        </trans-unit>
        <trans-unit id="d00f491d8c40c03d4b59f712550d0e446ff54fbd" translate="yes" xml:space="preserve">
          <source>Install spring using &lt;code&gt;bundle install&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bundle install&lt;/code&gt; を使用してSpringをインストールします。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="6e0f3906b5c7f6a4b6cb048055a7f93079d5264f" translate="yes" xml:space="preserve">
          <source>Installing Rails</source>
          <target state="translated">Railsのインストール</target>
        </trans-unit>
        <trans-unit id="aa6dfe54274ed1710b82f903b6abd73713a2f05a" translate="yes" xml:space="preserve">
          <source>Instance Variables</source>
          <target state="translated">インスタンス変数</target>
        </trans-unit>
        <trans-unit id="e6bc144a6aa17edc35608d98fc5380cd3df13339" translate="yes" xml:space="preserve">
          <source>Instance Variables Available</source>
          <target state="translated">利用可能なインスタンス変数</target>
        </trans-unit>
        <trans-unit id="f4afcaf921a6de61c708f5f2c356b8ce5c3328e9" translate="yes" xml:space="preserve">
          <source>Instance methods are created as well for convenience, they are just proxies to the class attribute. So, instances can change the class attribute, but cannot override it as it happens with &lt;code&gt;class_attribute&lt;/code&gt; (see above). For example given</source>
          <target state="translated">インスタンスメソッドも便利なように作成されます。これらはクラス属性の単なるプロキシです。そのため、インスタンスはクラス属性を変更できますが、 &lt;code&gt;class_attribute&lt;/code&gt; で発生するようにオーバーライドすることはできません（上記を参照）。例えば与えられた</target>
        </trans-unit>
        <trans-unit id="0c9fd054155855fd08e13e216d559f7895b79636" translate="yes" xml:space="preserve">
          <source>Instance variables that are accessible in views.</source>
          <target state="translated">ビューでアクセス可能なインスタンス変数。</target>
        </trans-unit>
        <trans-unit id="a7436cd076605f4f6b404cf011f15d6a92df9c3d" translate="yes" xml:space="preserve">
          <source>Instance-level &lt;code&gt;respond_to&lt;/code&gt; is unaffected and does not require the additional gem:</source>
          <target state="translated">インスタンスレベルの &lt;code&gt;respond_to&lt;/code&gt; は影響を受けず、追加のgemは必要ありません。</target>
        </trans-unit>
        <trans-unit id="7762633929a1e0b61a50135d708b869a90a1a564" translate="yes" xml:space="preserve">
          <source>Instances may overwrite the class value in the same way:</source>
          <target state="translated">インスタンスは、同じようにクラスの値を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="9f2c6de42dd18302648ff7dd63c129bbd2f177e6" translate="yes" xml:space="preserve">
          <source>Instantiate the equivalent Ruby object of the appropriate model for every resulting row.</source>
          <target state="translated">結果として得られるすべての行に対して、適切なモデルの等価なRubyオブジェクトをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="d4cfe1684b9bdb4a97ddba033a2969091cea4d78" translate="yes" xml:space="preserve">
          <source>Instantiates a new column for the table. See &lt;a href=&quot;schemastatements#method-i-add_column&quot;&gt;connection.add_column&lt;/a&gt; for available options.</source>
          <target state="translated">テーブルの新しい列をインスタンス化します。使用可能なオプションについては、&lt;a href=&quot;schemastatements#method-i-add_column&quot;&gt;connection.add_column&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec491111cabccfee0fc99b9e3416ee8ef93d5fab" translate="yes" xml:space="preserve">
          <source>Instantiating a new &lt;a href=&quot;stringinquirer&quot;&gt;StringInquirer&lt;/a&gt;</source>
          <target state="translated">新しい&lt;a href=&quot;stringinquirer&quot;&gt;StringInquirerを&lt;/a&gt;インスタンス化する</target>
        </trans-unit>
        <trans-unit id="de2daca2c5d3ff11781567a508a71041f4b7c73f" translate="yes" xml:space="preserve">
          <source>Instead of a &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;, like &lt;code&gt;posts#index&lt;/code&gt;, which corresponds to the index action in the PostsController, you can specify any Rack application as the endpoint for a matcher:</source>
          <target state="translated">PostsControllerのインデックスアクションに対応する &lt;code&gt;posts#index&lt;/code&gt; のような&lt;a href=&quot;../string&quot;&gt;Stringの&lt;/a&gt;代わりに、任意のRackアプリケーションをマッチャーのエンドポイントとして指定できます。</target>
        </trans-unit>
        <trans-unit id="b82c51d0b22ee7205e62cd6f126b3721bdf68de6" translate="yes" xml:space="preserve">
          <source>Instead of a String like &lt;code&gt;'articles#index'&lt;/code&gt;, which corresponds to the &lt;code&gt;index&lt;/code&gt; action in the &lt;code&gt;ArticlesController&lt;/code&gt;, you can specify any &lt;a href=&quot;rails_on_rack&quot;&gt;Rack application&lt;/a&gt; as the endpoint for a matcher:</source>
          <target state="translated">&lt;code&gt;ArticlesController&lt;/code&gt; の &lt;code&gt;index&lt;/code&gt; アクションに対応する &lt;code&gt;'articles#index'&lt;/code&gt; のような文字列の代わりに、任意の&lt;a href=&quot;rails_on_rack&quot;&gt;Rackアプリケーション&lt;/a&gt;をマッチャーのエンドポイントとして指定できます。</target>
        </trans-unit>
        <trans-unit id="cda95c68819053b9941c2e8712b8b82003b7c61b" translate="yes" xml:space="preserve">
          <source>Instead of an options hash, you can also simply pass in a model. Rails will use the &lt;code&gt;updated_at&lt;/code&gt; and &lt;code&gt;cache_key_with_version&lt;/code&gt; methods for setting &lt;code&gt;last_modified&lt;/code&gt; and &lt;code&gt;etag&lt;/code&gt;:</source>
          <target state="translated">オプションのハッシュの代わりに、単にモデルを渡すこともできます。Railsは、 &lt;code&gt;last_modified&lt;/code&gt; および &lt;code&gt;etag&lt;/code&gt; を設定するために &lt;code&gt;updated_at&lt;/code&gt; および &lt;code&gt;cache_key_with_version&lt;/code&gt; メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="b08b659f08cd25084c638c422a66099cf07388cf" translate="yes" xml:space="preserve">
          <source>Instead of calling &lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;column&lt;/a&gt; directly, you can also work with the short-hand definitions for the default types. They use the type as the method name instead of as a parameter and allow for multiple columns to be defined in a single statement.</source>
          <target state="translated">&lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;列を&lt;/a&gt;直接呼び出す代わりに、デフォルトの型の省略形の定義を使用することもできます。それらはパラメーターとしてではなくメソッド名としてタイプを使用し、単一のステートメントで複数の列を定義できるようにします。</target>
        </trans-unit>
        <trans-unit id="d6fac76b830aa8fdf650571fd8e47e809b5f97b6" translate="yes" xml:space="preserve">
          <source>Instead of explicitly naming the location of a partial, you can also let &lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt; do the work and pick the proper path by checking &lt;code&gt;to_partial_path&lt;/code&gt; method.</source>
          <target state="translated">パーシャルの場所に明示的に名前を付ける代わりに、&lt;a href=&quot;partialrenderer&quot;&gt;PartialRenderer&lt;/a&gt;に作業を行わせ、 &lt;code&gt;to_partial_path&lt;/code&gt; メソッドをチェックして適切なパスを選択することもできます。</target>
        </trans-unit>
        <trans-unit id="282a280a0cab90c59c897d96018296189d742c1c" translate="yes" xml:space="preserve">
          <source>Instead of passing a string to the conditions option, you can pass an array to sanitize tainted strings like this:</source>
          <target state="translated">conditions オプションに文字列を渡す代わりに配列を渡すと、次のように汚染された文字列をサニタイズすることができます。</target>
        </trans-unit>
        <trans-unit id="ec02bda762202680a9ca746c8177602658813c28" translate="yes" xml:space="preserve">
          <source>Instead of passing the content as an argument, you can also use a block in which case, you pass your &lt;code&gt;html_options&lt;/code&gt; as the first parameter.</source>
          <target state="translated">引数としてコンテンツを渡す代わりに、ブロックを使用することもできます。その場合、最初のパラメーターとして &lt;code&gt;html_options&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="edd65bb52286b846fe1b028432f87a2da5ac601a" translate="yes" xml:space="preserve">
          <source>Instead of polluting the thread locals namespace:</source>
          <target state="translated">スレッドローカルの名前空間を汚染する代わりに</target>
        </trans-unit>
        <trans-unit id="38b0e5a9769fb9574f82e5157ef0cddca8289de5" translate="yes" xml:space="preserve">
          <source>Instead of returning a path such as &lt;code&gt;/assets/smile.png&lt;/code&gt; (digests are left out for readability). The URL generated will have the full path to your CDN.</source>
          <target state="translated">&lt;code&gt;/assets/smile.png&lt;/code&gt; などのパスを返す代わりに（読みやすさのためにダイジェストは省略されています）。生成されたURLには、CDNへの絶対パスが含まれます。</target>
        </trans-unit>
        <trans-unit id="8b24539f81dce8069573b818cfa967fe057251e4" translate="yes" xml:space="preserve">
          <source>Instead of setting the variant on the render call you may also set it on the request object in your controller action.</source>
          <target state="translated">レンダリングコールにバリアントを設定する代わりに、コントローラアクションのリクエストオブジェクトに設定することもできます。</target>
        </trans-unit>
        <trans-unit id="d7d9c8fa98536e91c26d449b779521f157c1a6de" translate="yes" xml:space="preserve">
          <source>Instead of stealing a cookie unknown to the attacker, they fix a user's session identifier (in the cookie) known to them. Read more about this so-called session fixation later.</source>
          <target state="translated">攻撃者が知らないクッキーを盗む代わりに、攻撃者が知っているユーザーのセッション識別子(クッキーの中の)を固定します。このいわゆるセッション固定については後述します。</target>
        </trans-unit>
        <trans-unit id="a9ae3405744e20c189c424dbe4a3d20461b01ff6" translate="yes" xml:space="preserve">
          <source>Instead of using Rails to generate HTML that communicates with the server through forms and links, many developers are treating their web application as just an API client delivered as HTML with JavaScript that consumes a JSON API.</source>
          <target state="translated">Railsを使ってフォームやリンクを通じてサーバと通信するHTMLを生成するのではなく、多くの開発者はWebアプリケーションを、JSON APIを消費するJavaScriptを使ってHTMLとして配信される単なるAPIクライアントとして扱っています。</target>
        </trans-unit>
        <trans-unit id="c042f3d9b71b32db250543be269d410c99d13527" translate="yes" xml:space="preserve">
          <source>Instead of:</source>
          <target state="translated">代わりに</target>
        </trans-unit>
        <trans-unit id="507770191eeb7ec98eb1ba54a5ba1a74a894e508" translate="yes" xml:space="preserve">
          <source>Instrumentation: Rails has an instrumentation API that triggers registered handlers for a variety of events, such as action processing, sending a file or data, redirection, and database queries. The payload of each event comes with relevant information (for the action processing event, the payload includes the controller, action, parameters, request format, request method, and the request's full path).</source>
          <target state="translated">インストルメンテーション。RailsにはインストルメンテーションAPIがあり、アクション処理、ファイルやデータの送信、リダイレクト、データベースクエリなど、さまざまなイベントのために登録されたハンドラをトリガーします。各イベントのペイロードには関連情報が含まれています(アクション処理イベントの場合、ペイロードにはコントローラ、アクション、パラメータ、リクエストフォーマット、リクエストメソッド、リクエストのフルパスが含まれます)。</target>
        </trans-unit>
        <trans-unit id="ce36819d4451c02e4b229841cfbf52796a818ec4" translate="yes" xml:space="preserve">
          <source>Instrumenters</source>
          <target state="translated">Instrumenters</target>
        </trans-unit>
        <trans-unit id="b300e5ce045a08b89313fafa5e73ed0492a458f3" translate="yes" xml:space="preserve">
          <source>Instrumenters are stored in a thread local.</source>
          <target state="translated">インストゥルメントはローカルのスレッドに格納されます。</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="3caba6d00ba203d77ce889c6e7b15dc02732832e" translate="yes" xml:space="preserve">
          <source>Integer#year</source>
          <target state="translated">Integer#year</target>
        </trans-unit>
        <trans-unit id="6c44dbddc3fd22ad67d4d705b958417bd4bc9d93" translate="yes" xml:space="preserve">
          <source>Integers in the example above are supposed to come from the respective calls to &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">上記の例の整数は、 &lt;code&gt;id&lt;/code&gt; へのそれぞれの呼び出しから来ると想定されています。</target>
        </trans-unit>
        <trans-unit id="c87f52def7d613c90253e811aa67f30c00e37459" translate="yes" xml:space="preserve">
          <source>Integrating with Libraries or Frameworks</source>
          <target state="translated">ライブラリやフレームワークとの統合</target>
        </trans-unit>
        <trans-unit id="899e5920ef1372292f1f4f69d3125e5a5f5a1dfb" translate="yes" xml:space="preserve">
          <source>Integration</source>
          <target state="translated">Integration</target>
        </trans-unit>
        <trans-unit id="ed8e7536d5000854a478dee90bcbee2c9954ce4e" translate="yes" xml:space="preserve">
          <source>Integration Testing</source>
          <target state="translated">統合テスト</target>
        </trans-unit>
        <trans-unit id="67982c4f135ee413508775af875318e3445716ec" translate="yes" xml:space="preserve">
          <source>Integration test methods such as &lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch::Integration::RequestHelpers#get&lt;/a&gt; and &lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch::Integration::RequestHelpers#post&lt;/a&gt; return objects of class &lt;a href=&quot;testresponse&quot;&gt;TestResponse&lt;/a&gt;, which represent the HTTP response results of the requested controller actions.</source>
          <target state="translated">&lt;a href=&quot;integration/requesthelpers#method-i-get&quot;&gt;ActionDispatch :: Integration :: RequestHelpers＃get&lt;/a&gt;や&lt;a href=&quot;integration/requesthelpers#method-i-post&quot;&gt;ActionDispatch :: Integration :: RequestHelpers＃post&lt;/a&gt;などの統合テストメソッドは、要求されたコントローラーアクションのHTTP応答結果を表すクラス&lt;a href=&quot;testresponse&quot;&gt;TestResponseの&lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="2e1cd626fe8c4b66dfdf6e0d004c6db44ed7558b" translate="yes" xml:space="preserve">
          <source>Integration tests are used to test how various parts of your application interact. They are generally used to test important workflows within our application.</source>
          <target state="translated">統合テストは、アプリケーションの様々な部分がどのように相互作用するかをテストするために使用されます。一般的には、アプリケーション内の重要なワークフローをテストするために使用されます。</target>
        </trans-unit>
        <trans-unit id="b2819304f744a3d244c44613d57e819fac608045" translate="yes" xml:space="preserve">
          <source>Integration#cache_key</source>
          <target state="translated">Integration#cache_key</target>
        </trans-unit>
        <trans-unit id="6c53dea3f7d20bb55236f30495fad68cb70689bb" translate="yes" xml:space="preserve">
          <source>Integration#cache_key_with_version</source>
          <target state="translated">Integration#cache_key_with_version</target>
        </trans-unit>
        <trans-unit id="f02c91c56da5fefe68235806aa6ec3d1994ea656" translate="yes" xml:space="preserve">
          <source>Integration#cache_version</source>
          <target state="translated">Integration#cache_version</target>
        </trans-unit>
        <trans-unit id="21095e92f582034508d7653b41289d55753aeab1" translate="yes" xml:space="preserve">
          <source>Integration#to_param</source>
          <target state="translated">Integration#to_param</target>
        </trans-unit>
        <trans-unit id="ce1fd21e1204581f63416449f6c7edfb967c6d78" translate="yes" xml:space="preserve">
          <source>Integration::ClassMethods</source>
          <target state="translated">Integration::ClassMethods</target>
        </trans-unit>
        <trans-unit id="139e252d29f786121f30f0460e336269c02a8bac" translate="yes" xml:space="preserve">
          <source>Integration::ClassMethods#to_param</source>
          <target state="translated">Integration::ClassMethods#to_param</target>
        </trans-unit>
        <trans-unit id="98b57e9fddf70f7d3e9da54385232a98cebca479" translate="yes" xml:space="preserve">
          <source>IntegrationTest</source>
          <target state="translated">IntegrationTest</target>
        </trans-unit>
        <trans-unit id="ab94e6a337bd2b08d6d1d29161b02030b26df85e" translate="yes" xml:space="preserve">
          <source>Intercepting Emails</source>
          <target state="translated">電子メールの傍受</target>
        </trans-unit>
        <trans-unit id="173c52fe8d7e7d33649dde7c6d75cc38405db524" translate="yes" xml:space="preserve">
          <source>Intercepting and Observing Emails</source>
          <target state="translated">電子メールの傍受と監視</target>
        </trans-unit>
        <trans-unit id="342e3231db1c88366814ccab28f7d0434684057a" translate="yes" xml:space="preserve">
          <source>Interceptors allow you to make modifications to emails before they are handed off to the delivery agents. An interceptor class must implement the &lt;code&gt;:delivering_email(message)&lt;/code&gt; method which will be called before the email is sent.</source>
          <target state="translated">インターセプターを使用すると、配信エージェントに引き渡される前にメールを変更できます。インターセプタークラスは、メールが送信される前に呼び出される &lt;code&gt;:delivering_email(message)&lt;/code&gt; メソッドを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="2dfcc4c89dfb267aa18e62e74d6d54f6561f0fc2" translate="yes" xml:space="preserve">
          <source>Interestingly, the exact same view code in the previous example can be used to edit a person. If &lt;code&gt;@person&lt;/code&gt; is an existing record with name &amp;ldquo;John Smith&amp;rdquo; and ID 256, the code above as is would yield instead:</source>
          <target state="translated">興味深いことに、前の例とまったく同じビューコードを使用して人物を編集できます。 &lt;code&gt;@person&lt;/code&gt; が名前が「John Smith」でIDが256の既存のレコードである場合、上記のコードはそのまま生成されます。</target>
        </trans-unit>
        <trans-unit id="dcc5733b7561d603a93c21562214e0c1d33fb1c8" translate="yes" xml:space="preserve">
          <source>Internal Middleware Stack</source>
          <target state="translated">内部ミドルウェアスタック</target>
        </trans-unit>
        <trans-unit id="505d9d0c421453bd1f4ff40309dee285d37725cf" translate="yes" xml:space="preserve">
          <source>Internally symbols are mapped to strings when used as keys in the entire writing interface (calling &lt;code&gt;[]=&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, etc). This mapping belongs to the public interface. For example, given:</source>
          <target state="translated">書き込みインターフェース全体でキーとして使用される場合、内部的にシンボルは文字列にマップされます（ &lt;code&gt;[]=&lt;/code&gt; 、 &lt;code&gt;merge&lt;/code&gt; の呼び出しなど）。このマッピングはパブリックインターフェイスに属しています。たとえば、次の場合：</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="ec41529ec988c31d48e2791253f7675f0f07663a" translate="yes" xml:space="preserve">
          <source>Internationalization and Localization</source>
          <target state="translated">国際化とローカライゼーション</target>
        </trans-unit>
        <trans-unit id="c09a9a12334a713ae333766d80dbc7726ba5ddbd" translate="yes" xml:space="preserve">
          <source>Internationalization is a complex problem. Natural languages differ in so many ways (e.g. in pluralization rules) that it is hard to provide tools for solving all problems at once. For that reason the Rails I18n API focuses on:</source>
          <target state="translated">国際化は複雑な問題です。自然言語は非常に多くの点で異なっており(複数形化のルールなど)、すべての問題を一度に解決するためのツールを提供することは困難です。そのため、Rails I18n APIはこの問題に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="5ec77c95171316f9af44f1afebf62f3ac2ca5ee5" translate="yes" xml:space="preserve">
          <source>Interoperability and configuration</source>
          <target state="translated">相互運用性と構成</target>
        </trans-unit>
        <trans-unit id="80feef0d1957adca54e3f9d24dc512572009e68c" translate="yes" xml:space="preserve">
          <source>Interpolation escapes as needed though. For example, given:</source>
          <target state="translated">しかし、必要に応じて補間をエスケープします。例えば、与えられた</target>
        </trans-unit>
        <trans-unit id="b70d894eda2fa1027b4f2cc23a1615a878a3cb5f" translate="yes" xml:space="preserve">
          <source>Interpretation of the output of EXPLAIN is beyond the scope of this guide. The following pointers may be helpful:</source>
          <target state="translated">EXPLAINの出力の解釈は、このガイドの範囲を超えています。以下のポインタが参考になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1331fd357cb4c48e65a61cb90dbec7b0da4d430b" translate="yes" xml:space="preserve">
          <source>Interpreting EXPLAIN</source>
          <target state="translated">EXPLAINの解釈</target>
        </trans-unit>
        <trans-unit id="438faf6320554999d6e3436c3267791fd96090b3" translate="yes" xml:space="preserve">
          <source>Interprets a file using &lt;code&gt;mechanism&lt;/code&gt; and marks its defined constants as autoloaded. &lt;code&gt;file_name&lt;/code&gt; can be either a string or respond to &lt;code&gt;to_path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mechanism&lt;/code&gt; を使用してファイルを解釈し、その定義済み定数をオートロード済みとしてマークします。 &lt;code&gt;file_name&lt;/code&gt; は文字列か、 &lt;code&gt;to_path&lt;/code&gt; に応答することができます。</target>
        </trans-unit>
        <trans-unit id="bab1ab6e63418fb60a28315088fc32113592c35b" translate="yes" xml:space="preserve">
          <source>Intranet and Admin Security</source>
          <target state="translated">イントラネットと管理者のセキュリティ</target>
        </trans-unit>
        <trans-unit id="0a6767b03885ddc439ef17983c2f692c5a07e41e" translate="yes" xml:space="preserve">
          <source>Intranet and administration interfaces are popular attack targets, because they allow privileged access. Although this would require several extra-security measures, the opposite is the case in the real world.</source>
          <target state="translated">イントラネットや管理インターフェイスは、特権的なアクセスを許可するため、攻撃対象としてよく知られています。これにはいくつかの余分なセキュリティ対策が必要ですが、現実の世界では逆のケースもあります。</target>
        </trans-unit>
        <trans-unit id="1e02c113caf7083037190e94f7f4d29321ba00e9" translate="yes" xml:space="preserve">
          <source>Introducing &lt;a href=&quot;concerning#method-i-concerning&quot;&gt;#concerning&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;concerning#method-i-concerning&quot;&gt;#concerningの&lt;/a&gt;紹介</target>
        </trans-unit>
        <trans-unit id="f8ab457bd47803331ebc080bd833f3ee0b9e2d8f" translate="yes" xml:space="preserve">
          <source>Introducing Rack</source>
          <target state="translated">ラックの紹介</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="b10b45ec08f0b166df0731e9de830720dfa05269" translate="yes" xml:space="preserve">
          <source>Introduction to Rack</source>
          <target state="translated">ラックの紹介</target>
        </trans-unit>
        <trans-unit id="2dc38a9b87ba3ab2b84c75bf7b0f1b314cde1a6d" translate="yes" xml:space="preserve">
          <source>Introduction to Testing</source>
          <target state="translated">テストの紹介</target>
        </trans-unit>
        <trans-unit id="87d217e986a7a6fcb0d9d6294bb7ea099ed34b8e" translate="yes" xml:space="preserve">
          <source>Introduction to instrumentation</source>
          <target state="translated">インストルメンテーションの紹介</target>
        </trans-unit>
        <trans-unit id="f6d7303488dffe7e3ac8ead1d3fcbd32a701138b" translate="yes" xml:space="preserve">
          <source>Invocation of the tasks will look like:</source>
          <target state="translated">タスクの呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="58dd409d6a03b715d8a4a7142eeb16c3ce59eda9" translate="yes" xml:space="preserve">
          <source>Invoke a generator based on the value supplied by the user to the given option named &amp;ldquo;name&amp;rdquo;. A class option is created when this method is invoked and you can set a hash to customize it.</source>
          <target state="translated">ユーザーが「name」という名前のオプションに指定した値に基づいてジェネレーターを呼び出します。このメソッドが呼び出されるとクラスオプションが作成され、ハッシュを設定してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="5b3a05f5c432f715f0fac2ee75b57be97620fa7a" translate="yes" xml:space="preserve">
          <source>Invoke a method on the connection asynchronously through the pool of thread workers.</source>
          <target state="translated">スレッドワーカーのプールを介して、非同期的に接続上のメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="0256c5a56ef3a0bc7ccc3f9ed6d01aea84ad06a9" translate="yes" xml:space="preserve">
          <source>Invokes Journey::Router::Utils.normalize_path and ensure that (:locale) becomes (/:locale) instead of /(:locale). Except for root cases, where the latter is the correct one.</source>
          <target state="translated">Journey::Router::Utils.normalize_path を呼び出し、(:locale)が /(:locale)の代わりに (/:locale)になるようにします。後者が正しい場合のルートケースを除きます。</target>
        </trans-unit>
        <trans-unit id="385202a85d41f1ba93fb6a0880e136ee611817eb" translate="yes" xml:space="preserve">
          <source>Invokes the public method whose name goes as first argument just like &lt;code&gt;public_send&lt;/code&gt; does, except that if the receiver does not respond to it the call returns &lt;code&gt;nil&lt;/code&gt; rather than raising an exception.</source>
          <target state="translated">&lt;code&gt;public_send&lt;/code&gt; と同じように、最初の引数として名前が指定されるpublicメソッドを呼び出します。ただし、レシーバーがそれに応答しない場合、呼び出しは例外を発生させるのではなく &lt;code&gt;nil&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="59e5020714711541b39a9551f5b84853e831134e" translate="yes" xml:space="preserve">
          <source>Irreversible transformations</source>
          <target state="translated">不可逆的な変換</target>
        </trans-unit>
        <trans-unit id="2f766b312d7e667b7f0d8b9c17bb303b08b1acae" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;new_name&lt;/code&gt; an alias?</source>
          <target state="translated">ある &lt;code&gt;new_name&lt;/code&gt; 別名？</target>
        </trans-unit>
        <trans-unit id="b0eda3fd7457c0fb4308b75d0bf6df3d4719aced" translate="yes" xml:space="preserve">
          <source>Is equivalent to:</source>
          <target state="translated">と同等です。</target>
        </trans-unit>
        <trans-unit id="46fb94424bf8f10921609b59625d794e12d26b07" translate="yes" xml:space="preserve">
          <source>Is it a &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; or &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; association?</source>
          <target state="translated">それは&lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;または&lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;アソシエーションですか？</target>
        </trans-unit>
        <trans-unit id="7aee814e5e7b7c81d49f7ba52ab62790c23d34e6" translate="yes" xml:space="preserve">
          <source>Is it a GET or HEAD request? GETs should be safe and idempotent</source>
          <target state="translated">それは GET リクエストなのか HEAD リクエストなのか?GET は安全であるべきです。</target>
        </trans-unit>
        <trans-unit id="a559a239bb82de0629bcb6a428aeb5fd89db0826" translate="yes" xml:space="preserve">
          <source>Is the same as:</source>
          <target state="translated">と同じです。</target>
        </trans-unit>
        <trans-unit id="0e468c5ec10bbeae8ac268222bf3b1cefef440a5" translate="yes" xml:space="preserve">
          <source>Is this connection alive and ready for queries?</source>
          <target state="translated">この接続は生きていて、クエリの準備ができていますか?</target>
        </trans-unit>
        <trans-unit id="76655109a5cf36c486e596d85b9959d33081cbb3" translate="yes" xml:space="preserve">
          <source>Isolated &lt;a href=&quot;engine&quot;&gt;Engine&lt;/a&gt;</source>
          <target state="translated">隔離された&lt;a href=&quot;engine&quot;&gt;エンジン&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2f451fdf2858ac5e97eb02d93dd74df99d36099e" translate="yes" xml:space="preserve">
          <source>Isolated engine's helpers</source>
          <target state="translated">分離されたエンジンのヘルパー</target>
        </trans-unit>
        <trans-unit id="7ac5f519b4cd0a9c673a2b984a399a3a92c58140" translate="yes" xml:space="preserve">
          <source>It accepts a hash where the key is the symbol of the MIME type and the value is a proc.</source>
          <target state="translated">これは、キーが MIME タイプのシンボルで、値が proc であるハッシュを受け取ります。</target>
        </trans-unit>
        <trans-unit id="4a6fae6667f1ec35b8e1214e1089d2257fc09809" translate="yes" xml:space="preserve">
          <source>It accepts a headers hash. This hash allows you to specify the most used headers in an email message, these are:</source>
          <target state="translated">これは、ヘッダハッシュを受け入れます。このハッシュを使用して、メールメッセージで最も使用されるヘッダを指定することができます。</target>
        </trans-unit>
        <trans-unit id="d5f0f4cf85fc4819613826afbcfe7f04f25a0738" translate="yes" xml:space="preserve">
          <source>It accepts two parameters on initialization. The first is a version of library and the second is a library name.</source>
          <target state="translated">初期化時に2つのパラメータを受け取ります。1つ目はライブラリのバージョン、2つ目はライブラリ名です。</target>
        </trans-unit>
        <trans-unit id="9435a5a3fea1387cba916e7fc9c284d2e6dfd894" translate="yes" xml:space="preserve">
          <source>It accepts two parameters on initialization. The first is an array of files and the second is an optional hash of directories. The hash must have directories as keys and the value is an array of extensions to be watched under that directory.</source>
          <target state="translated">これは初期化時に2つのパラメータを受け取ります。1つ目はファイルの配列で、2つ目はオプションのディレクトリのハッシュです。ハッシュはディレクトリをキーとし、値はそのディレクトリの下で監視する拡張機能の配列です。</target>
        </trans-unit>
        <trans-unit id="38ca25bcf2c0905e02178cd352066c0836a6a9a0" translate="yes" xml:space="preserve">
          <source>It allows you to call method &lt;a href=&quot;renderer#method-i-render&quot;&gt;render&lt;/a&gt; directly.</source>
          <target state="translated">メソッド&lt;a href=&quot;renderer#method-i-render&quot;&gt;renderを&lt;/a&gt;直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d49d2a57a5a1ca8b7ea86511d458060ee225f77d" translate="yes" xml:space="preserve">
          <source>It also allows you to update the avatar through the member:</source>
          <target state="translated">また、会員経由でアバターを更新することができます。</target>
        </trans-unit>
        <trans-unit id="ebc0f9ba57056697e4de8afcfef4be20a0ad3303" translate="yes" xml:space="preserve">
          <source>It also generated some lines in our &lt;code&gt;database.yml&lt;/code&gt; configuration corresponding to our choice of PostgreSQL for database.</source>
          <target state="translated">また、 &lt;code&gt;database.yml&lt;/code&gt; 用のPostgreSQLの選択に対応するdatabase.yml設定にいくつかの行を生成しました。</target>
        </trans-unit>
        <trans-unit id="39146458b45b3abeec98952f595c4cf5f503332e" translate="yes" xml:space="preserve">
          <source>It also gives you the ability to initialize an object with a hash of attributes, much like any Active Record object.</source>
          <target state="translated">また、Active Record オブジェクトのように、属性のハッシュでオブジェクトを初期化する機能も提供します。</target>
        </trans-unit>
        <trans-unit id="bd0ee1da8322e4399bcac48a328b9839193f1124" translate="yes" xml:space="preserve">
          <source>It also searches for a key specific to the given object:</source>
          <target state="translated">また、与えられたオブジェクトに固有のキーを検索します。</target>
        </trans-unit>
        <trans-unit id="cfedffa8e710bb3bffa6f731ec1bf9d845f19fbc" translate="yes" xml:space="preserve">
          <source>It also strips href/src attributes with unsafe protocols like &lt;code&gt;javascript:&lt;/code&gt;, while also protecting against attempts to use Unicode, ASCII, and hex character references to work around these protocol filters. All special characters will be escaped.</source>
          <target state="translated">また、 &lt;code&gt;javascript:&lt;/code&gt; などの安全でないプロトコルを使用してhref / src属性を取り除き、これらのプロトコルフィルターを回避するためにUnicode、ASCII、および16進文字参照を使用する試みから保護します。すべての特殊文字はエスケープされます。</target>
        </trans-unit>
        <trans-unit id="426c108419ecab367f3cf08cecf90bf1479d10f5" translate="yes" xml:space="preserve">
          <source>It can also be used to return exceptional conditions:</source>
          <target state="translated">また、例外的な条件を返すために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="9316df6dbeb2297de41526f9b627ebdbe698b986" translate="yes" xml:space="preserve">
          <source>It can also be used with an explicit receiver:</source>
          <target state="translated">また、明示的な受信機との併用も可能です。</target>
        </trans-unit>
        <trans-unit id="6dba1fa6506ff89cb1689631b83474c09424753e" translate="yes" xml:space="preserve">
          <source>It can also be useful to save information to log files at runtime. Rails maintains a separate log file for each runtime environment.</source>
          <target state="translated">また、実行時にログファイルに情報を保存しておくと便利です。Railsでは、実行時の環境ごとに個別のログファイルを保持しています。</target>
        </trans-unit>
        <trans-unit id="2831d4f1ce96a57796267468ca626023eda9252e" translate="yes" xml:space="preserve">
          <source>It can also calculate the sum without the use of a block.</source>
          <target state="translated">また、ブロックを使わずに和を計算することもできます。</target>
        </trans-unit>
        <trans-unit id="7687f2339942576b33eabc229b67923feb868d9f" translate="yes" xml:space="preserve">
          <source>It can also receive an &lt;code&gt;:accept&lt;/code&gt; option, which determines the allowed values that will be considered as accepted. It defaults to &lt;code&gt;['1', true]&lt;/code&gt; and can be easily changed.</source>
          <target state="translated">&lt;code&gt;:accept&lt;/code&gt; オプションを受け取ることもできます。これは、受け入れられたと見なされる許容値を決定します。デフォルトは &lt;code&gt;['1', true]&lt;/code&gt; 、簡単に変更できます。</target>
        </trans-unit>
        <trans-unit id="a234c9c580ec73225fe07a2b2cb15c5278679324" translate="yes" xml:space="preserve">
          <source>It can also validate whether the value of the specified attributes are unique based on a &lt;code&gt;:scope&lt;/code&gt; parameter:</source>
          <target state="translated">また、指定した属性の値が &lt;code&gt;:scope&lt;/code&gt; パラメータに基づいて一意であるかどうかを検証できます。</target>
        </trans-unit>
        <trans-unit id="40a7b1d9d8a7cd76b12428401930bc5065694c8d" translate="yes" xml:space="preserve">
          <source>It can be used along with &lt;code&gt;belongs_to&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; と一緒に使用できます：</target>
        </trans-unit>
        <trans-unit id="1ac0a20ef283df4adc7e264352fcf154710271f2" translate="yes" xml:space="preserve">
          <source>It can be useful to access the class that is using that validator when there are prerequisites such as an &lt;code&gt;attr_accessor&lt;/code&gt; being present. This class is accessible via &lt;code&gt;options[:class]&lt;/code&gt; in the constructor. To setup your validator override the constructor.</source>
          <target state="translated">&lt;code&gt;attr_accessor&lt;/code&gt; が存在するなどの前提条件がある場合、そのバリデーターを使用しているクラスにアクセスすると便利です。このクラスには、コンストラクターの &lt;code&gt;options[:class]&lt;/code&gt; を介してアクセスできます。バリデーターを設定するには、コンストラクターをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="49b4aa175d14125482748aa613908101aa82e8b5" translate="yes" xml:space="preserve">
          <source>It creates and returns an instance of the &lt;a href=&quot;activesupport/multibyte/chars&quot;&gt;ActiveSupport::Multibyte::Chars&lt;/a&gt; class which encapsulates the original string. A Unicode safe version of all the &lt;a href=&quot;string&quot;&gt;String&lt;/a&gt; methods are defined on this proxy class. If the proxy class doesn't respond to a certain method, it's forwarded to the encapsulated string.</source>
          <target state="translated">元の文字列をカプセル化する&lt;a href=&quot;activesupport/multibyte/chars&quot;&gt;ActiveSupport :: Multibyte :: Chars&lt;/a&gt;クラスのインスタンスを作成して返します。すべての&lt;a href=&quot;string&quot;&gt;String&lt;/a&gt;メソッドのUnicodeセーフバージョンがこのプロキシクラスで定義されています。プロキシクラスが特定のメソッドに応答しない場合は、カプセル化された文字列に転送されます。</target>
        </trans-unit>
        <trans-unit id="499cc07feea969499a3dc48ed2492713c8c86211" translate="yes" xml:space="preserve">
          <source>It does not call &lt;code&gt;to_a&lt;/code&gt; on the argument, if the argument does not respond to &lt;code&gt;to_ary&lt;/code&gt; it returns an array with the argument as its single element.</source>
          <target state="translated">それは呼ばない &lt;code&gt;to_a&lt;/code&gt; 引数が応答しない場合は、引数にし &lt;code&gt;to_ary&lt;/code&gt; それはその単一の要素として引数を配列で返します。</target>
        </trans-unit>
        <trans-unit id="56b4d8dc1bf62dfda767cc7b994335d9456a43bf" translate="yes" xml:space="preserve">
          <source>It intends to prevent odd bugs and confusion in code that call mutator methods directly on the &lt;code&gt;Relation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Relation&lt;/code&gt; で直接ミューテーターメソッドを呼び出すコードの奇妙なバグや混乱を防ぐことを目的としています。</target>
        </trans-unit>
        <trans-unit id="5d5c5b84f1606def2d58f9fb00f6b5f36fadaeab" translate="yes" xml:space="preserve">
          <source>It is &lt;strong&gt;highly&lt;/strong&gt; recommended that the &lt;code&gt;isolate_namespace&lt;/code&gt; line be left within the &lt;code&gt;Engine&lt;/code&gt; class definition. Without it, classes generated in an engine &lt;strong&gt;may&lt;/strong&gt; conflict with an application.</source>
          <target state="translated">&lt;code&gt;isolate_namespace&lt;/code&gt; 行を &lt;code&gt;Engine&lt;/code&gt; クラス定義内に残すことを&lt;strong&gt;強く&lt;/strong&gt;お勧めします。これがないと、エンジンで生成されたクラスがアプリケーションと競合する&lt;strong&gt;可能性&lt;/strong&gt;があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="10cfb379bf3244a1c48de6cb1cda23ec4480ebb5" translate="yes" xml:space="preserve">
          <source>It is accessed in much the same way as the session, as a hash (it's a &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/FlashHash.html&quot;&gt;FlashHash&lt;/a&gt; instance).</source>
          <target state="translated">セッションとほとんど同じ方法で、ハッシュとしてアクセスされます（&lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Flash/FlashHash.html&quot;&gt;FlashHash&lt;/a&gt;インスタンスです）。</target>
        </trans-unit>
        <trans-unit id="83efac2576f2e3cca18100e7aee4b5a47479b098" translate="yes" xml:space="preserve">
          <source>It is also important to use different salt values for encrypted and signed cookies. Using the same value for different salt configuration values may lead to the same derived key being used for different security features which in turn may weaken the strength of the key.</source>
          <target state="translated">暗号化されたクッキーと署名されたクッキーでは、異なるソルト値を使用することも重要です。異なるソルト設定値に同じ値を使用すると、同じ派生鍵が異なるセキュリティ機能に使用され、鍵の強度が弱くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="fd5336404614ecb4acce82c4ff85169b0e93d510" translate="yes" xml:space="preserve">
          <source>It is also possible to assign a flash message as part of the redirection. There are two special accessors for the commonly used flash names &lt;code&gt;alert&lt;/code&gt; and &lt;code&gt;notice&lt;/code&gt; as well as a general purpose &lt;code&gt;flash&lt;/code&gt; bucket.</source>
          <target state="translated">リダイレクトの一部としてフラッシュメッセージを割り当てることもできます。一般的に使用されるフラッシュ名の &lt;code&gt;alert&lt;/code&gt; と &lt;code&gt;notice&lt;/code&gt; 、および汎用 &lt;code&gt;flash&lt;/code&gt; バケットには、2つの特別なアクセサーがあります。</target>
        </trans-unit>
        <trans-unit id="179fe87c22bf5b6c89ee355df0482f9dc84a0da7" translate="yes" xml:space="preserve">
          <source>It is also possible to automatically disable an input while the form is submitting by using the &lt;code&gt;data-disable-with&lt;/code&gt; attribute. This is to prevent accidental double-clicks from the user, which could result in duplicate HTTP requests that the backend may not detect as such. The value of the attribute is the text that will become the new value of the button in its disabled state.</source>
          <target state="translated">&lt;code&gt;data-disable-with&lt;/code&gt; 属性を使用して、フォームの送信中に入力を自動的に無効にすることもできます。これは、ユーザーが誤ってダブルクリックして、バックエンドがそのように検出できないHTTPリクエストが重複する可能性があるのを防ぐためです。属性の値は、無効な状態のボタンの新しい値になるテキストです。</target>
        </trans-unit>
        <trans-unit id="348a45df3c04b6d5fe9c86d061104b62e5b62d75" translate="yes" xml:space="preserve">
          <source>It is also possible to customize the way the elements will be shown by giving a block to the method:</source>
          <target state="translated">メソッドにブロックを与えることで、要素の表示方法をカスタマイズすることも可能です。</target>
        </trans-unit>
        <trans-unit id="5e55d2ed2495603dfd9e5fa2fc9d52ef7987d08b" translate="yes" xml:space="preserve">
          <source>It is also possible to define the Ajax &lt;code&gt;dataType&lt;/code&gt; explicitly while performing requests for &lt;code&gt;data-remote&lt;/code&gt; elements, by way of the &lt;code&gt;data-type&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;data-type&lt;/code&gt; 属性を使用して、 &lt;code&gt;data-remote&lt;/code&gt; 要素のリクエストを実行しながら、Ajax &lt;code&gt;dataType&lt;/code&gt; を明示的に定義することもできます。</target>
        </trans-unit>
        <trans-unit id="819fc44ec9ef18718e13d598795b20fdc7e69280" translate="yes" xml:space="preserve">
          <source>It is also possible to limit the uniqueness constraint to a set of records matching certain conditions. In this example archived articles are not being taken into consideration when validating uniqueness of the title attribute:</source>
          <target state="translated">一意性制約を特定の条件にマッチするレコードのセットに限定することも可能です。この例では、アーカイブされた記事はtitle属性の一意性を検証する際に考慮されていません。</target>
        </trans-unit>
        <trans-unit id="a985124ab3a30ac2f740ba2e729b65433dd15f7c" translate="yes" xml:space="preserve">
          <source>It is also possible to pass a custom serializer that responds to &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;dump&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; と &lt;code&gt;dump&lt;/code&gt; 応答するカスタムシリアライザーを渡すことも可能です。</target>
        </trans-unit>
        <trans-unit id="d7a775c2c33dca7d2800bfafa6f196f92f27191d" translate="yes" xml:space="preserve">
          <source>It is also possible to pass an object which responds to &lt;code&gt;call&lt;/code&gt; method as the second parameter to the &lt;code&gt;subscribe&lt;/code&gt; method instead of a block:</source>
          <target state="translated">2番目のパラメーターとして、 &lt;code&gt;call&lt;/code&gt; メソッドに応答するオブジェクトをブロックの代わりに &lt;code&gt;subscribe&lt;/code&gt; メソッドに渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="18abb3beeb3bf6cdf55d0d1bc4bfefab51a336a9" translate="yes" xml:space="preserve">
          <source>It is also possible to set a default host that will be used in all mailers by setting the &lt;code&gt;:host&lt;/code&gt; option as a configuration option in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; の構成オプションとして &lt;code&gt;:host&lt;/code&gt; オプションを設定することで、すべてのメーラーで使用されるデフォルトのホストを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="ab7cb2d57cb049b703f4721d525abf15854caa6a" translate="yes" xml:space="preserve">
          <source>It is also possible to set these default options that will be used in all mailers through the &lt;code&gt;default_options=&lt;/code&gt; configuration in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;config/application.rb&lt;/code&gt; の &lt;code&gt;default_options=&lt;/code&gt; 設定を介して、すべてのメーラーで使用されるこれらのデフォルトオプションを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="7b781e4a3aafdb190e8c24f4f3c6f103c1f5c3b3" translate="yes" xml:space="preserve">
          <source>It is also possible to supply a custom prefix.</source>
          <target state="translated">カスタムのプレフィックスを指定することも可能です。</target>
        </trans-unit>
        <trans-unit id="217db1c91aa9f1200c2f9bc48daada017d477db5" translate="yes" xml:space="preserve">
          <source>It is beyond the scope of this guide to document Ruby constants, but we are nevertheless going to highlight a few key topics. Truly grasping the following sections is instrumental to understanding constant autoloading and reloading.</source>
          <target state="translated">このガイドでは、Ruby の定数について説明することはできませんが、いくつかの重要なトピックを紹介します。以下のセクションを本当に理解することは、定数のオートロードとリロードを理解する上で非常に重要です。</target>
        </trans-unit>
        <trans-unit id="3258883b4eb20fb13831be19bf566b5526debab3" translate="yes" xml:space="preserve">
          <source>It is beyond the scope of this guide to inform you on how to secure your application code and environments. However, please secure your database configuration, e.g. &lt;code&gt;config/database.yml&lt;/code&gt;, master key for &lt;code&gt;credentials.yml&lt;/code&gt;, and other unencrypted secrets. You may want to further restrict access, using environment-specific versions of these files and any others that may contain sensitive information.</source>
          <target state="translated">アプリケーションコードと環境を保護する方法については、このガイドの範囲を超えています。ただし、データベース構成（ &lt;code&gt;config/database.yml&lt;/code&gt; 、 &lt;code&gt;credentials.yml&lt;/code&gt; のマスターキー、その他の暗号化されていないシークレットなど）を保護してください。これらのファイルの環境固有のバージョンや、機密情報を含む可能性のあるその他のファイルを使用して、アクセスをさらに制限することができます。</target>
        </trans-unit>
        <trans-unit id="6fe4130ab4ee095a6deeb9892cd4088476f03a76" translate="yes" xml:space="preserve">
          <source>It is common to use persistent cookies to store user information, with &lt;code&gt;cookies.permanent&lt;/code&gt; for example. In this case, the cookies will not be cleared and the out of the box CSRF protection will not be effective. If you are using a different cookie store than the session for this information, you must handle what to do with it yourself:</source>
          <target state="translated">たとえば、 &lt;code&gt;cookies.permanent&lt;/code&gt; のように、永続的なCookieを使用してユーザー情報を保存するのが一般的です。この場合、Cookieはクリアされず、すぐに使用できるCSRF保護は有効になりません。この情報のセッションとは異なるCookieストアを使用している場合は、それを自分で処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="f9341cff4e30114860c81d61ae45c3c73d6ae1c7" translate="yes" xml:space="preserve">
          <source>It is considered good practice to declare callback methods as private. If left public, they can be called from outside of the model and violate the principle of object encapsulation.</source>
          <target state="translated">コールバックメソッドをプライベートとして宣言することは良い習慣と考えられています。public のままにしておくと、モデルの外部から呼び出される可能性があり、オブジェクトカプセル化の原則に違反します。</target>
        </trans-unit>
        <trans-unit id="43a011e67c6ead698c933aa355ff5673de5432b5" translate="yes" xml:space="preserve">
          <source>It is equivalent to writing:</source>
          <target state="translated">書くことに相当します。</target>
        </trans-unit>
        <trans-unit id="01ba04d8b437042468e0c2c09742be51208f176a" translate="yes" xml:space="preserve">
          <source>It is generally safe to exclude XHR requests from CSRF protection (like the code snippet above does), because XHR requests can only be made from the same origin. Note however that any cross-origin third party domain allowed via &lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; will also be able to create XHR requests. Be sure to check your CORS configuration before disabling forgery protection for XHR.</source>
          <target state="translated">XHRリクエストは同じオリジンからのみ作成できるため、XHRリクエストをCSRF保護から除外することは一般的に安全です（上記のコードスニペットのように）。ただし、&lt;a href=&quot;https://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt;を介して許可されたクロスオリジンサードパーティドメインもXHRリクエストを作成できることに注意してください。XHRの偽造防止を無効にする前に、必ずCORS設定を確認してください。</target>
        </trans-unit>
        <trans-unit id="a207a505579df11ef014f66a20f5d9cf4698ae30" translate="yes" xml:space="preserve">
          <source>It is important that this folder is shared between deployments so that remotely cached pages referencing the old compiled assets still work for the life of the cached page.</source>
          <target state="translated">このフォルダをデプロイメント間で共有することが重要で、古いコンパイルされたアセットを参照してリモートでキャッシュされたページがキャッシュされたページの有効期間中も動作するようにします。</target>
        </trans-unit>
        <trans-unit id="dda9f7c4cb278191f2fd04c7db508eb24b9287cd" translate="yes" xml:space="preserve">
          <source>It is important to note that files you want to reference outside a manifest must be added to the precompile array or they will not be available in the production environment.</source>
          <target state="translated">マニフェストの外で参照するファイルはプリコンパイル配列に追加する必要があり、そうしないと本番環境では利用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="525c4700d9b0c161a634194efc57c56e14f975ce" translate="yes" xml:space="preserve">
          <source>It is important to notice that the actual crafted image or link doesn't necessarily have to be situated in the web application's domain, it can be anywhere - in a forum, blog post, or email.</source>
          <target state="translated">それは、実際に細工された画像やリンクが必ずしもウェブアプリケーションのドメインに位置している必要はないことに気づくことが重要であり、それはどこにでもあることができます-フォーラム、ブログ記事、または電子メールで。</target>
        </trans-unit>
        <trans-unit id="a753c2dcf80c811ac30d16c0dda03089e7018f95" translate="yes" xml:space="preserve">
          <source>It is important to understand that &lt;code&gt;html_safe&lt;/code&gt; performs no escaping whatsoever, it is just an assertion:</source>
          <target state="translated">&lt;code&gt;html_safe&lt;/code&gt; はエスケープを実行せず、単なるアサーションであることを理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="d55e0a0d2aac8db229502f8ef70a2140d1f09635" translate="yes" xml:space="preserve">
          <source>It is important to understand that the nesting is composed of class and module &lt;em&gt;objects&lt;/em&gt;, it has nothing to do with the constants used to access them, and is also unrelated to their names.</source>
          <target state="translated">ネストはクラス&lt;em&gt;オブジェクト&lt;/em&gt;とモジュール&lt;em&gt;オブジェクト&lt;/em&gt;で構成され、それらにアクセスするために使用される定数とは何の関係もなく、名前にも関係がないことを理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="41efcacaf212ba9a4488f51d99b234f2f8337edd" translate="yes" xml:space="preserve">
          <source>It is interesting to observe that blocks do not modify the stack. In particular the blocks that may be passed to &lt;code&gt;Class.new&lt;/code&gt; and &lt;code&gt;Module.new&lt;/code&gt; do not get the class or module being defined pushed to their nesting. That's one of the differences between defining classes and modules in one way or another.</source>
          <target state="translated">ブロックがスタックを変更しないことを観察することは興味深いです。特に、 &lt;code&gt;Class.new&lt;/code&gt; および &lt;code&gt;Module.new&lt;/code&gt; に渡される可能性のあるブロックは、定義されているクラスまたはモジュールを入れ子にプッシュしません。これは、クラスとモジュールの定義の違いの1つです。</target>
        </trans-unit>
        <trans-unit id="941e591857cdf0d45804c6c106a3821ade8d5bf6" translate="yes" xml:space="preserve">
          <source>It is necessary to &lt;code&gt;raw&lt;/code&gt; the result of &lt;code&gt;json_escape&lt;/code&gt;, so that quotation marks don't get converted to &lt;code&gt;&amp;amp;quot;&lt;/code&gt; entities. &lt;code&gt;json_escape&lt;/code&gt; doesn't automatically flag the result as HTML safe, since the raw value is unsafe to use inside HTML attributes.</source>
          <target state="translated">引用符が &lt;code&gt;&amp;amp;quot;&lt;/code&gt; に変換されないように、 &lt;code&gt;json_escape&lt;/code&gt; の結果を &lt;code&gt;raw&lt;/code&gt; にする必要があります。エンティティ。 &lt;code&gt;json_escape&lt;/code&gt; は、生の値をHTML属性内で使用するのは安全でないため、結果をHTMLセーフとして自動的にフラグ付けしません。</target>
        </trans-unit>
        <trans-unit id="59035bb25168789f781c7f9fcd3e7e21efa80ace" translate="yes" xml:space="preserve">
          <source>It is not necessary to pass all the attributes to &lt;code&gt;update&lt;/code&gt;. For example, if &lt;code&gt;@article.update(title: 'A new title')&lt;/code&gt; was called, Rails would only update the &lt;code&gt;title&lt;/code&gt; attribute, leaving all other attributes untouched.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; するためにすべての属性を渡す必要はありません。たとえば、 &lt;code&gt;@article.update(title: 'A new title')&lt;/code&gt; が呼び出された場合、Railsは &lt;code&gt;title&lt;/code&gt; 属性のみを更新し、他のすべての属性はそのままにします。</target>
        </trans-unit>
        <trans-unit id="93598eff3d787ca530523d68e5e3b68468b4d0d0" translate="yes" xml:space="preserve">
          <source>It is not recommended that you stream static files through Rails if you can instead keep them in a public folder on your web server. It is much more efficient to let the user download the file directly using Apache or another web server, keeping the request from unnecessarily going through the whole Rails stack.</source>
          <target state="translated">静的ファイルをWebサーバのパブリックフォルダに保存できるのであれば、静的ファイルをRails経由でストリーム配信することはお勧めできません。Apacheや別のWebサーバを使って直接ファイルをダウンロードさせた方がはるかに効率的で、リクエストが不必要にRailsスタック全体を通過することを防ぎます。</target>
        </trans-unit>
        <trans-unit id="e88432ee04e64b5f3195b709467ab625a7694aa3" translate="yes" xml:space="preserve">
          <source>It is often useful to ignore sets of fields that the user has not filled in. You can control this by passing a &lt;code&gt;:reject_if&lt;/code&gt; proc to &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt;. This proc will be called with each hash of attributes submitted by the form. If the proc returns &lt;code&gt;false&lt;/code&gt; then Active Record will not build an associated object for that hash. The example below only tries to build an address if the &lt;code&gt;kind&lt;/code&gt; attribute is set.</source>
          <target state="translated">ユーザーが記入されていないことをフィールドのセットを無視することが有用であることが多いあなたが渡すことで、これを制御することができます。 &lt;code&gt;:reject_if&lt;/code&gt; にPROCを &lt;code&gt;accepts_nested_attributes_for&lt;/code&gt; 。このプロシージャは、フォームから送信された属性のハッシュごとに呼び出されます。プロシージャが &lt;code&gt;false&lt;/code&gt; を返す場合、アクティブレコードはそのハッシュの関連オブジェクトを構築しません。以下の例では、 &lt;code&gt;kind&lt;/code&gt; 属性が設定されている場合にのみアドレスの作成を試みます。</target>
        </trans-unit>
        <trans-unit id="359dd26ed4325027fc03a54808e8ea6356971976" translate="yes" xml:space="preserve">
          <source>It is only soft-deprecated, which means that your code will not break at the moment and no deprecation warning will be displayed, but this constant will be removed in the future.</source>
          <target state="translated">これはソフトディスクリプタートされているだけなので、今のところコードが壊れることはなく、非推奨の警告は表示されませんが、この定数は将来的には削除されるでしょう。</target>
        </trans-unit>
        <trans-unit id="4562ca89794a86c1f1a7abdb14c2b0bf7874f843" translate="yes" xml:space="preserve">
          <source>It is possible to associate &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Proc&lt;/code&gt; object which will be called. Using a &lt;code&gt;Proc&lt;/code&gt; object gives you the ability to write an inline condition instead of a separate method. This option is best suited for one-liners.</source>
          <target state="translated">&lt;code&gt;:if&lt;/code&gt; および &lt;code&gt;:unless&lt;/code&gt; を、呼び出される &lt;code&gt;Proc&lt;/code&gt; オブジェクトに関連付けることができます。 &lt;code&gt;Proc&lt;/code&gt; オブジェクトを使用すると、個別のメソッドの代わりにインライン条件を書き込むことができます。このオプションは、ワンライナーに最適です。</target>
        </trans-unit>
        <trans-unit id="cf776ffebf1af8bc2d942f750e9a51092414860e" translate="yes" xml:space="preserve">
          <source>It is possible to associate &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Proc&lt;/code&gt; object. This option is best suited when writing short validation methods, usually one-liners:</source>
          <target state="translated">&lt;code&gt;:if&lt;/code&gt; および &lt;code&gt;:unless&lt;/code&gt; を &lt;code&gt;Proc&lt;/code&gt; オブジェクトに関連付けることができます。このオプションは、短い検証メソッド（通常は1行）を記述する場合に最適です。</target>
        </trans-unit>
        <trans-unit id="94c0520a8d6f229af5d1702cf7d9bb86be3a506e" translate="yes" xml:space="preserve">
          <source>It is possible to customize the behavior of elements with a &lt;code&gt;data-remote&lt;/code&gt; attribute without writing a line of JavaScript. You can specify extra &lt;code&gt;data-&lt;/code&gt; attributes to accomplish this.</source>
          <target state="translated">JavaScriptの行を記述しなくても、 &lt;code&gt;data-remote&lt;/code&gt; 属性を持つ要素の動作をカスタマイズできます。これを行うために、追加の &lt;code&gt;data-&lt;/code&gt; 属性を指定できます。</target>
        </trans-unit>
        <trans-unit id="5fdb819e34d79e2af13d3f5739becece3367eef9" translate="yes" xml:space="preserve">
          <source>It is possible to return to old behavior and disable &lt;code&gt;deep_munge&lt;/code&gt; configuring your application if you are aware of the risk and know how to handle it:</source>
          <target state="translated">リスクを認識し、それを処理する方法を知っている場合は、以前の動作に戻り、アプリケーションを構成する &lt;code&gt;deep_munge&lt;/code&gt; を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="c699de2f3bdf654ecdd4536b61685dc7cafc0885" translate="yes" xml:space="preserve">
          <source>It is possible to send email to one or more recipients in one email (e.g., informing all admins of a new signup) by setting the list of emails to the &lt;code&gt;:to&lt;/code&gt; key. The list of emails can be an array of email addresses or a single string with the addresses separated by commas.</source>
          <target state="translated">メールのリストを &lt;code&gt;:to&lt;/code&gt; キーに設定することにより、1人のメールで1人以上の受信者にメールを送信することができます（たとえば、すべての管理者に新しいサインアップを通知する）。電子メールのリストは、電子メールアドレスの配列、またはアドレスをコンマで区切った単一の文字列にすることができます。</target>
        </trans-unit>
        <trans-unit id="dd2fba07d1449421861070682cf3bc42607770a5" translate="yes" xml:space="preserve">
          <source>It is possible to share partials and associated caching between files with different mime types. For example shared partial caching allows template writers to share a partial between HTML and JavaScript files. When templates are collected in the template resolver file paths they only include the template language extension and not the mime type. Because of this templates can be used for multiple mime types. Both HTML and JavaScript requests will respond to the following code:</source>
          <target state="translated">異なる MIME タイプのファイル間でパーシャルと関連するキャッシングを共有することができます。例えば、共有されたパーシャルのキャッシングにより、テンプレートライターは HTML ファイルと JavaScript ファイルの間でパーシャルを共有することができます。テンプレートがテンプレートリゾルバのファイルパスに収集されるとき、テンプレートにはテンプレート言語拡張子のみが含まれ、マイムタイプは含まれません。このため、テンプレートは複数の MIME タイプに使用することができます。HTML と JavaScript の両方のリクエストは、以下のコードに応答します。</target>
        </trans-unit>
        <trans-unit id="b8fd1eae44ed2d596522e191f73299d597768b59" translate="yes" xml:space="preserve">
          <source>It is possible to swap the shipped Simple backend with a more powerful one, which would store translation data in a relational database, GetText dictionary, or similar. See section &lt;a href=&quot;#using-different-backends&quot;&gt;Using different backends&lt;/a&gt; below.</source>
          <target state="translated">付属のSimpleバックエンドを、リレーショナルデータベースやGetText辞書などに保存するより強力なものと交換することができます。以下のセクション「&lt;a href=&quot;#using-different-backends&quot;&gt;さまざまなバックエンドの使用&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="648e7ff34b53bee2903e398ed4116f0d74bf63d7" translate="yes" xml:space="preserve">
          <source>It is recommended not to use the same verifier for different things, so you can get different verifiers passing the &lt;code&gt;verifier_name&lt;/code&gt; argument.</source>
          <target state="translated">異なるものに同じベリファイアを使用しないことをお勧めします。これにより、 &lt;code&gt;verifier_name&lt;/code&gt; 引数を渡して異なるベリファイアを取得できます。</target>
        </trans-unit>
        <trans-unit id="ab44ad0eac99bfa97d75c89f0ad0ef7a845ed57e" translate="yes" xml:space="preserve">
          <source>It is recommended to &lt;em&gt;use RedCloth in combination with a permitted input filter&lt;/em&gt;, as described in the countermeasures against XSS section.</source>
          <target state="translated">XSS対策のセクションで説明されているように、&lt;em&gt;許可された入力フィルターと組み合わせてRedCloth&lt;/em&gt;を&lt;em&gt;使用する&lt;/em&gt;ことをお勧めし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="298255e081934b106aba3a7bad6a52c856a4bc8f" translate="yes" xml:space="preserve">
          <source>It is safe to call this method if a database transaction is already open, i.e. if &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; is called within another &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; block. In case of a nested call, &lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;transaction&lt;/a&gt; will behave as follows:</source>
          <target state="translated">データベーストランザクションがすでに開いている場合、つまり&lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;トランザクション&lt;/a&gt;が別の&lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;トランザクション&lt;/a&gt;ブロック内で呼び出される場合は、このメソッドを呼び出しても安全です。ネストされた呼び出しの場合、&lt;a href=&quot;databasestatements#method-i-transaction&quot;&gt;トランザクション&lt;/a&gt;は次のように動作します。</target>
        </trans-unit>
        <trans-unit id="7a45593b8b2126e4764abc506e87f644124f7d10" translate="yes" xml:space="preserve">
          <source>It is shorter, and the intention more obvious.</source>
          <target state="translated">より短く、より明らかな意図を持っています。</target>
        </trans-unit>
        <trans-unit id="89bdff5bc31e9e0bf49c6a3a0b41b9c39713a357" translate="yes" xml:space="preserve">
          <source>It is similar to render, except that it does not set the &lt;code&gt;response_body&lt;/code&gt; and it should be guaranteed to always return a string.</source>
          <target state="translated">これは、 &lt;code&gt;response_body&lt;/code&gt; を設定せず、常に文字列を返すことが保証されていることを除いて、レンダリングに似ています。</target>
        </trans-unit>
        <trans-unit id="feba03ed2eb137a18e226422934ced8f11f7d231" translate="yes" xml:space="preserve">
          <source>It is the server's (i.e. our) responsibility to look for a last modified timestamp and the if-none-match header and determine whether or not to send back the full response. With conditional-get support in Rails this is a pretty easy task:</source>
          <target state="translated">最終的に修正されたタイムスタンプとif-none-matchヘッダを探して、完全なレスポンスを送り返すかどうかを判断するのは、サーバ(つまり私たち)の責任です。Railsの条件付きgetのサポートにより、これは非常に簡単な作業です。</target>
        </trans-unit>
        <trans-unit id="1f24fb666ec8101a20d8e74aef753ea515b4ed85" translate="yes" xml:space="preserve">
          <source>It is useful when rendering from an &lt;code&gt;ActionController::Metal&lt;/code&gt; controller or otherwise to add an available renderer proc to a specific controller.</source>
          <target state="translated">&lt;code&gt;ActionController::Metal&lt;/code&gt; コントローラーからレンダリングする場合、または特定のコントローラーに使用可能なレンダラープロシージャを追加する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="8381b5798039f8bdc6ba9892429183aa3882944c" translate="yes" xml:space="preserve">
          <source>It is very common that a template will need to iterate over a collection and render a sub-template for each of the elements. This pattern has been implemented as a single method that accepts an array and renders a partial for each one of the elements in the array.</source>
          <target state="translated">テンプレートがコレクションを反復処理し、要素ごとにサブテンプレートをレンダリングする必要があることは非常に一般的です。このパターンは、配列を受け取り、配列内の各要素のパーシャルをレンダリングする単一のメソッドとして実装されています。</target>
        </trans-unit>
        <trans-unit id="112ab076fea03f9d75fe593aa250d73126e6c082" translate="yes" xml:space="preserve">
          <source>It is very easy to create Active Record models. All you have to do is to subclass the &lt;code&gt;ApplicationRecord&lt;/code&gt; class and you're good to go:</source>
          <target state="translated">Active Recordモデルの作成は非常に簡単です。 &lt;code&gt;ApplicationRecord&lt;/code&gt; クラスをサブクラス化するだけで、準備は完了です。</target>
        </trans-unit>
        <trans-unit id="3f2567301b91ff3e1a8e3b6ab299f1ab0e52af5b" translate="yes" xml:space="preserve">
          <source>It is very important to &lt;em&gt;think about the worst case&lt;/em&gt;: What if someone really got hold of your cookies or user credentials. You could &lt;em&gt;introduce roles&lt;/em&gt; for the admin interface to limit the possibilities of the attacker. Or how about &lt;em&gt;special login credentials&lt;/em&gt; for the admin interface, other than the ones used for the public part of the application. Or a &lt;em&gt;special password for very serious actions&lt;/em&gt;?</source>
          <target state="translated">&lt;em&gt;最悪のケースについて考える&lt;/em&gt;ことは非常に重要です：誰かが本当にあなたのクッキーまたはユーザー資格情報を手に入れたらどうなるでしょうか 攻撃者の可能性を制限するために、管理インターフェースの&lt;em&gt;役割&lt;/em&gt;を&lt;em&gt;導入&lt;/em&gt;できます。または、アプリケーションのパブリック部分に使用されるもの以外の、管理インターフェースの&lt;em&gt;特別なログイン認証情報&lt;/em&gt;はどうですか。または&lt;em&gt;非常に深刻なアクションのための特別なパスワード&lt;/em&gt;？</target>
        </trans-unit>
        <trans-unit id="b0493caf1193ee906843c7daabc5ed6988e9f46b" translate="yes" xml:space="preserve">
          <source>It is very important to understand that Ruby does not have a way to truly reload classes and modules in memory, and have that reflected everywhere they are already used. Technically, &quot;unloading&quot; the &lt;code&gt;User&lt;/code&gt; class means removing the &lt;code&gt;User&lt;/code&gt; constant via &lt;code&gt;Object.send(:remove_const, &quot;User&quot;)&lt;/code&gt;.</source>
          <target state="translated">Rubyにはメモリ内のクラスやモジュールを本当にリロードする方法がなく、すでに使用されているすべての場所に反映されていることを理解することは非常に重要です。技術的には、 &lt;code&gt;User&lt;/code&gt; クラスの「アンロード」とは、 &lt;code&gt;Object.send(:remove_const, &quot;User&quot;)&lt;/code&gt; 介して &lt;code&gt;User&lt;/code&gt; 定数を削除することを意味します。</target>
        </trans-unit>
        <trans-unit id="2ae463c41c994975a8c9d1ed7d20b19f6f82fa4e" translate="yes" xml:space="preserve">
          <source>It is very trivial to implement in Rails.</source>
          <target state="translated">Railsで実装するのは非常につまらない。</target>
        </trans-unit>
        <trans-unit id="35ee732864066c0d0eadb6125761394ebaf22e35" translate="yes" xml:space="preserve">
          <source>It is your responsibility to ensure calling &lt;code&gt;html_safe&lt;/code&gt; on a particular string is fine.</source>
          <target state="translated">特定の文字列で &lt;code&gt;html_safe&lt;/code&gt; を正常に呼び出すことは、ユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="31c0edfcaa4fc403ac3adceae75236d17c99abf7" translate="yes" xml:space="preserve">
          <source>It iterates through the collection and passes each element to a block. The element will be keyed by the value returned by the block:</source>
          <target state="translated">コレクションを反復処理し、各要素をブロックに渡します。要素は、ブロックから返された値がキーになります。</target>
        </trans-unit>
        <trans-unit id="721fe765d7d4e10b75516d49bfbcce75be736438" translate="yes" xml:space="preserve">
          <source>It may not function correctly. This is because the application doesn't know how to route these requests to the engine unless you explicitly tell it &lt;strong&gt;how&lt;/strong&gt;. To do this, you must set the &lt;code&gt;@routes&lt;/code&gt; instance variable to the engine's route set in your setup code:</source>
          <target state="translated">正しく機能しない場合があります。あなたが明示的に指示しない限り、アプリケーションがエンジンへのルーティング方法にこれらの要求を知らないので、これはあります&lt;strong&gt;か&lt;/strong&gt;。これを行うには、 &lt;code&gt;@routes&lt;/code&gt; インスタンス変数を、セットアップコードで設定されたエンジンのルートに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ce713b879eb723ee2b86cf67e06dfef733959e9" translate="yes" xml:space="preserve">
          <source>It offers a richer bottom-line at the language level, targeted both at the development of Rails applications, and at the development of Ruby on Rails itself.</source>
          <target state="translated">Railsアプリケーションの開発とRuby on Rails自体の開発の両方を対象とした、言語レベルでのより豊かなボトムラインを提供します。</target>
        </trans-unit>
        <trans-unit id="8096c3aca7a392a3a34226c703cd085adca651c9" translate="yes" xml:space="preserve">
          <source>It preserves dashes and underscores unless they are used as separators:</source>
          <target state="translated">ダッシュやアンダースコアがセパレータとして使用されていない限り、それは保持されます。</target>
        </trans-unit>
        <trans-unit id="124daf2dae3dc1290bb02e4af593b4afcd962cb7" translate="yes" xml:space="preserve">
          <source>It provides a method to capture blocks into variables through capture and a way to capture a block of markup for use in a layout through &lt;a href=&quot;capturehelper#method-i-content_for&quot;&gt;content_for&lt;/a&gt;.</source>
          <target state="translated">キャプチャを通じてブロックを変数にキャプチャする方法と、&lt;a href=&quot;capturehelper#method-i-content_for&quot;&gt;content_for&lt;/a&gt;を通じてレイアウトで使用するマークアップのブロックをキャプチャする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="d559b2073af90812c6c78ec7af2c339cdd913618" translate="yes" xml:space="preserve">
          <source>It provides an interface for protecting attributes from end-user assignment. This makes Action Controller parameters forbidden to be used in Active Model mass assignment until they have been explicitly enumerated.</source>
          <target state="translated">エンドユーザーの割り当てから属性を保護するためのインターフェイスを提供します。これにより、アクションコントローラのパラメータが明示的に列挙されるまで、アクティブモデルの大量割り当てで使用されることが禁止されます。</target>
        </trans-unit>
        <trans-unit id="d53d2b0f66ddb0510df5988207a06488b1a81009" translate="yes" xml:space="preserve">
          <source>It provides two options that controls the top-level behavior of new instances:</source>
          <target state="translated">これは、新しいインスタンスのトップレベルの動作を制御する2つのオプションを提供します。</target>
        </trans-unit>
        <trans-unit id="b59d7e861125ed6d581d3a0cc77e6a38802989db" translate="yes" xml:space="preserve">
          <source>It relies on exception handling to handle control flow, which may be marginally slower.</source>
          <target state="translated">制御フローを処理するために例外処理に依存しているため、多少遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8e985f63cf9499f5816c3c8d3acd3c680200932a" translate="yes" xml:space="preserve">
          <source>It returns an empty HTML tag of type &lt;code&gt;name&lt;/code&gt; which by default is XHTML compliant. Set &lt;code&gt;open&lt;/code&gt; to true to create an open tag compatible with HTML 4.0 and below. Add HTML attributes by passing an attributes hash to &lt;code&gt;options&lt;/code&gt;. Set &lt;code&gt;escape&lt;/code&gt; to false to disable attribute value escaping.</source>
          <target state="translated">デフォルトではXHTMLに準拠しているタイプ &lt;code&gt;name&lt;/code&gt; 空のHTMLタグを返します。HTML 4.0以前と互換性のあるオープンタグを作成するには、 &lt;code&gt;open&lt;/code&gt; をtrueに設定します。 &lt;code&gt;options&lt;/code&gt; 属性ハッシュを渡して、HTML属性を追加します。属性値のエスケープを無効にするには、 &lt;code&gt;escape&lt;/code&gt; をfalseに設定します。</target>
        </trans-unit>
        <trans-unit id="103c6ce50b681a6ef444b5d698f26fbec76c9171" translate="yes" xml:space="preserve">
          <source>It should have created a test file placeholder for us. With the output of the previous command we should see:</source>
          <target state="translated">テストファイルのプレースホルダが作成されているはずです。先ほどのコマンドの出力を見ると、以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="4966f7811cb27a198a6cba34da214ff55b23cc1f" translate="yes" xml:space="preserve">
          <source>It should have created a test file placeholder for us. With the output of the previous command you should see:</source>
          <target state="translated">テストファイルのプレースホルダが作成されているはずです。先ほどのコマンドの出力では、以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="157ac47cfa200341598ff079a15434917fd957db" translate="yes" xml:space="preserve">
          <source>It takes the names of an old (deprecated) constant and of a new constant (both in string form) and optionally a deprecator. The deprecator defaults to &lt;code&gt;ActiveSupport::Deprecator&lt;/code&gt; if none is specified.</source>
          <target state="translated">これは、古い（非推奨）定数と新しい定数（両方とも文字列形式）の名前を取り、オプションで非推奨文字を受け取ります。何も指定されていない場合、非推奨はデフォルトで &lt;code&gt;ActiveSupport::Deprecator&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="83087d1a900bea48f8391e7474e1e5c67d0ff05a" translate="yes" xml:space="preserve">
          <source>It tends to be faster and less error prone to create a new instance of your application's database by loading the schema file via &lt;code&gt;rails db:schema:load&lt;/code&gt; than it is to replay the entire migration history. &lt;a href=&quot;#old-migrations&quot;&gt;Old migrations&lt;/a&gt; may fail to apply correctly if those migrations use changing external dependencies or rely on application code which evolves separately from your migrations.</source>
          <target state="translated">移行履歴全体を再生するよりも、 &lt;code&gt;rails db:schema:load&lt;/code&gt; を介してスキーマファイルをロードすることで、アプリケーションのデータベースの新しいインスタンスを作成する方が、高速でエラーが発生しにくい傾向があります。&lt;a href=&quot;#old-migrations&quot;&gt;古い移行&lt;/a&gt;は、外部依存関係の変更を使用する場合や、移行とは別に進化するアプリケーションコードに依存している場合、正しく適用できない場合があります。</target>
        </trans-unit>
        <trans-unit id="ccc2a2f98b56eb3a54fae986fc622f497465a043" translate="yes" xml:space="preserve">
          <source>It will include all of the helpers from engine's directory. Take into account that this does not include helpers defined in controllers with helper_method or other similar solutions, only helpers defined in the helpers directory will be included.</source>
          <target state="translated">これは、エンジンのディレクトリにあるすべてのヘルパーを含みます。これには helper_method やその他の類似のソリューションを持つコントローラで定義されたヘルパーは含まれないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="98c13cf8d00ca42ad01461edeb1c7ca6801faefd" translate="yes" xml:space="preserve">
          <source>It will look a little basic for now, but that's ok. We'll look at improving the styling for it afterwards.</source>
          <target state="translated">今のところは少しベーシックな感じになりますが、それはそれでいいです。その後のスタイリングの改善を検討します。</target>
        </trans-unit>
        <trans-unit id="8637603c373814dd050a1532100af0da4f2090a9" translate="yes" xml:space="preserve">
          <source>It will use the given &lt;code&gt;user_content_type&lt;/code&gt;, or multipart if the mail message has any attachments. If the attachments are inline, the content type will be &amp;ldquo;multipart/related&amp;rdquo;, otherwise &amp;ldquo;multipart/mixed&amp;rdquo;.</source>
          <target state="translated">メールメッセージに添付ファイルがある場合は、指定された &lt;code&gt;user_content_type&lt;/code&gt; またはマルチパートを使用します。添付ファイルがインラインの場合、コンテンツタイプは「multipart / related」、それ以外の場合は「multipart / mixed」になります。</target>
        </trans-unit>
        <trans-unit id="42cbfd3191bc8d384376a66a5cca989147dbf649" translate="yes" xml:space="preserve">
          <source>It works for both inline:</source>
          <target state="translated">インライン両方に対応しています。</target>
        </trans-unit>
        <trans-unit id="618aee3ec871071cafa5f2c415e6c3ad428f6c63" translate="yes" xml:space="preserve">
          <source>It works like this:</source>
          <target state="translated">このように動作します。</target>
        </trans-unit>
        <trans-unit id="4e9581765ec600cf23cfdcdef0a724ea6ec31300" translate="yes" xml:space="preserve">
          <source>It's a good practice to ensure that the correct message has been broadcasted inside other components (e.g. inside your controllers). This is precisely where the custom assertions provided by Action Cable are pretty useful. For instance, within a model:</source>
          <target state="translated">正しいメッセージが他のコンポーネントの内部(例えば、コントローラの内部)でブロードキャストされていることを確認するのは良い習慣です。Action Cable が提供するカスタムアサーションは、まさにこのような場合に便利です。例えば、モデル内で</target>
        </trans-unit>
        <trans-unit id="f422ae9e8159f660700963246d16c8816e8e4e5b" translate="yes" xml:space="preserve">
          <source>It's a good practice to ensure that your jobs correctly get enqueued or performed wherever you invoke them (e.g. inside your controllers). This is precisely where the custom assertions provided by Active Job are pretty useful. For instance, within a model:</source>
          <target state="translated">ジョブを呼び出した場所 (コントローラの中など)で正しく待ち行列に入れられたり実行されたりするようにするのは良い習慣です。これこそが、Active Job が提供するカスタムアサーションが非常に便利なところです。例えば、モデル内で</target>
        </trans-unit>
        <trans-unit id="a80a15c6dc9f952abf9d054b00b9bc97a4a2ae13" translate="yes" xml:space="preserve">
          <source>It's advisable that you only store simple data (strings and numbers) in cookies. If you have to store complex objects, you would need to handle the conversion manually when reading the values on subsequent requests.</source>
          <target state="translated">クッキーには単純なデータ(文字列や数字)だけを保存することをお勧めします。複雑なオブジェクトを保存する必要がある場合は、後続のリクエストで値を読み込む際に手動で変換を処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="1b5341eced867c0f8d3ab2b44d8744a44e0359bb" translate="yes" xml:space="preserve">
          <source>It's also a good idea to add indexes to each of those columns to speed up the joins process. However, in MySQL it is advised to add a compound index for both of the columns as MySQL only uses one index per table during the lookup.</source>
          <target state="translated">また、結合処理を高速化するために、それぞれのカラムにインデックスを追加するのも良いアイデアです。しかし、MySQLでは、検索中にテーブルごとに1つのインデックスしか使用しないため、両方のカラムに複合インデックスを追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="23d63436f77065acc450057bff4d18024da3b766" translate="yes" xml:space="preserve">
          <source>It's also important to treat the value objects as immutable. Don't allow the Money object to have its amount changed after creation. Create a new Money object with the new value instead. The &lt;code&gt;Money#exchange_to&lt;/code&gt; method is an example of this. It returns a new value object instead of changing its own values. Active Record won't persist value objects that have been changed through means other than the writer method.</source>
          <target state="translated">値オブジェクトを不変として扱うことも重要です。Moneyオブジェクトの作成後に金額を変更しないでください。代わりに、新しい値で新しいMoneyオブジェクトを作成します。 &lt;code&gt;Money#exchange_to&lt;/code&gt; 方法は、その一例です。独自の値を変更するのではなく、新しい値オブジェクトを返します。Active Recordは、writerメソッド以外の方法で変更された値オブジェクトを永続化しません。</target>
        </trans-unit>
        <trans-unit id="ce772d533b0ed334ad2b7969d9190d3bfed1e182" translate="yes" xml:space="preserve">
          <source>It's also possible to construct multi-dimensional parameter hashes by specifying keys using brackets, such as:</source>
          <target state="translated">のようにカッコを使ってキーを指定することで多次元のパラメータハッシュを構築することも可能です。</target>
        </trans-unit>
        <trans-unit id="1c5080c9d97459219fcb315f929272aaf0d44726" translate="yes" xml:space="preserve">
          <source>It's also possible to delegate a method to the class by using &lt;code&gt;:class&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;:class&lt;/code&gt; を使用して、クラスにメソッドを委任することもできます。</target>
        </trans-unit>
        <trans-unit id="ee9bba4c576ef4381989429f386a4c0d76c77e88" translate="yes" xml:space="preserve">
          <source>It's also possible to instantiate related objects, so a &lt;code&gt;Client&lt;/code&gt; class belonging to the &lt;code&gt;clients&lt;/code&gt; table with a &lt;code&gt;master_id&lt;/code&gt; foreign key can instantiate master through &lt;code&gt;Client#master&lt;/code&gt;.</source>
          <target state="translated">関連するオブジェクトをインスタンス化することも可能であるため、 &lt;code&gt;master_id&lt;/code&gt; 外部キーを持つ &lt;code&gt;clients&lt;/code&gt; テーブルに属する &lt;code&gt;Client&lt;/code&gt; クラスは、 &lt;code&gt;Client#master&lt;/code&gt; を介してマスターをインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="d018ba7160b482abab2b6e00cfd3ecbbb4865e28" translate="yes" xml:space="preserve">
          <source>It's also possible to interpret encrypted YAML files with &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="translated">暗号化されたYAMLファイルを &lt;code&gt;config&lt;/code&gt; で解釈することも可能です。</target>
        </trans-unit>
        <trans-unit id="6c8736847d7c7ad6de203a9a1a70d34f62f81a4d" translate="yes" xml:space="preserve">
          <source>It's also possible to override the column that should be used as the table's primary key using the &lt;code&gt;ActiveRecord::Base.primary_key=&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;ActiveRecord::Base.primary_key=&lt;/code&gt; メソッドを使用して、テーブルの主キーとして使用する必要がある列をオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="20c583d4833cfc55c98348bf9834c35bbaee87ec" translate="yes" xml:space="preserve">
          <source>It's also possible to retry or discard a job if an exception is raised during execution. For example:</source>
          <target state="translated">また、実行中に例外が発生した場合にジョブを再試行したり、破棄したりすることも可能です。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7d0f83e7bb64d92b6a7b5c41f4d4d0caa14b8cea" translate="yes" xml:space="preserve">
          <source>It's also possible to specify the instance to be used:</source>
          <target state="translated">使用するインスタンスを指定することも可能です。</target>
        </trans-unit>
        <trans-unit id="06bf6d5af71eff30bf65d8d44e4b90be5583daab" translate="yes" xml:space="preserve">
          <source>It's also possible to use multiple attributes in the same &lt;code&gt;find_by_&lt;/code&gt; by separating them with &amp;ldquo;&lt;em&gt;and&lt;/em&gt;&amp;rdquo;.</source>
          <target state="translated">また、「&lt;em&gt;and&lt;/em&gt;」で区切ることにより、同じ &lt;code&gt;find_by_&lt;/code&gt; で複数の属性を使用することもできます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b3598f3734b84a9d144e42f8399310dc626f865a" translate="yes" xml:space="preserve">
          <source>It's common that you need to find a record or create it if it doesn't exist. You can do that with the &lt;code&gt;find_or_create_by&lt;/code&gt; and &lt;code&gt;find_or_create_by!&lt;/code&gt; methods.</source>
          <target state="translated">通常、レコードを見つけるか、存在しない場合は作成する必要があります。あなたがそれを行うことができ &lt;code&gt;find_or_create_by&lt;/code&gt; と &lt;code&gt;find_or_create_by!&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="0f49250b8cffccdc364b03b3385e42a6d9aa7de5" translate="yes" xml:space="preserve">
          <source>It's common to have resources that are logically children of other resources. For example, suppose your application includes these models:</source>
          <target state="translated">論理的に他のリソースの子であるリソースを持つことはよくあることです。例えば、アプリケーションにこれらのモデルが含まれているとします。</target>
        </trans-unit>
        <trans-unit id="b210ae2be028d7173f42ca71c61c6b0b4412e0aa" translate="yes" xml:space="preserve">
          <source>It's common to have resources that are logically children of other resources:</source>
          <target state="translated">論理的に他の資源の子になる資源を持つことはよくあることです。</target>
        </trans-unit>
        <trans-unit id="70811258be9b0fd9bd6ee0a2ce8b0baa003841be" translate="yes" xml:space="preserve">
          <source>It's common to want to test the caching strategy of your application in development mode. Rails provides the rails command &lt;code&gt;dev:cache&lt;/code&gt; to easily toggle caching on/off.</source>
          <target state="translated">開発モードでアプリケーションのキャッシング戦略をテストすることはよくあります。Railsはrailsコマンド &lt;code&gt;dev:cache&lt;/code&gt; を提供して、キャッシングのオン/オフを簡単に切り替えることができます。</target>
        </trans-unit>
        <trans-unit id="496d6b6240d7125cf093cec706a29512a5683f4c" translate="yes" xml:space="preserve">
          <source>It's even possible to call these dynamic finder methods on relations and named scopes.</source>
          <target state="translated">これらのダイナミックファインダメソッドをリレーションや名前付きスコープで呼び出すことも可能です。</target>
        </trans-unit>
        <trans-unit id="d40bb18153b626c0253f7b7d4189338603c47ddb" translate="yes" xml:space="preserve">
          <source>It's even possible to use &lt;code&gt;exists?&lt;/code&gt; without any arguments on a model or a relation.</source>
          <target state="translated">使用 &lt;code&gt;exists?&lt;/code&gt; ことも可能ですか？モデルまたは関係に引数なし。</target>
        </trans-unit>
        <trans-unit id="d966070d0b05c39fbcc1da00391f8af210d6e75b" translate="yes" xml:space="preserve">
          <source>It's helpful to be able to test incoming emails in development without actually sending and receiving real emails. To accomplish this, there's a conductor controller mounted at &lt;code&gt;/rails/conductor/action_mailbox/inbound_emails&lt;/code&gt;, which gives you an index of all the InboundEmails in the system, their state of processing, and a form to create a new InboundEmail as well.</source>
          <target state="translated">実際のメールを実際に送受信することなく、開発中の受信メールをテストできると便利です。これを実現するために、 &lt;code&gt;/rails/conductor/action_mailbox/inbound_emails&lt;/code&gt; にマウントされたコンダクターコントローラーがあり、システム内のすべてのInboundEmailのインデックス、それらの処理の状態、および新しいInboundEmailを作成するためのフォームも提供します。</target>
        </trans-unit>
        <trans-unit id="74318357210d0ce970a5c87b95a2c46f5bec161f" translate="yes" xml:space="preserve">
          <source>It's important to connect to your database in a single model and then inherit from that model for the tables rather than connect multiple individual models to the same database. Database clients have a limit to the number of open connections there can be and if you do this it will multiply the number of connections you have since Rails uses the model class name for the connection specification name.</source>
          <target state="translated">複数の個別モデルを同じデータベースに接続するのではなく、1つのモデルでデータベースに接続し、そのモデルからテーブルを継承することが重要です。データベースクライアントにはオープンな接続数に制限があり、Railsは接続指定名にモデルクラス名を使用しているため、これを行うと接続数が倍になってしまいます。</target>
        </trans-unit>
        <trans-unit id="c731ba937d8d715e7c40709120f481beab47aa00" translate="yes" xml:space="preserve">
          <source>It's important to keep in mind at all times that the application should &lt;strong&gt;always&lt;/strong&gt; take precedence over its engines. An application is the object that has final say in what goes on in its environment. The engine should only be enhancing it, rather than changing it drastically.</source>
          <target state="translated">アプリケーションは&lt;strong&gt;常に&lt;/strong&gt;エンジンよりも優先される必要&lt;strong&gt;がある&lt;/strong&gt;ことを&lt;strong&gt;常に&lt;/strong&gt;心に留めておくことは重要です。アプリケーションとは、その環境で何が行われているのかを最終的に決定するオブジェクトです。エンジンはそれを大幅に変更するのではなく、それを強化するだけです。</target>
        </trans-unit>
        <trans-unit id="a0c359079f380a8190da5470e95085b4e0266c5b" translate="yes" xml:space="preserve">
          <source>It's important to remember that XML or JSON requests are also checked by default. If you're building an &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; or an SPA you could change forgery protection method in &lt;code&gt;ApplicationController&lt;/code&gt; (by default: &lt;code&gt;:exception&lt;/code&gt;):</source>
          <target state="translated">XMLまたはJSONリクエストもデフォルトでチェックされることに注意してください。&lt;a href=&quot;api&quot;&gt;API&lt;/a&gt;またはSPAを構築している場合は、 &lt;code&gt;ApplicationController&lt;/code&gt; の偽造防止方法を変更できます（デフォルトでは &lt;code&gt;:exception&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="d4ea5fd1f11864cb83fb9ed3228955626a4be617" translate="yes" xml:space="preserve">
          <source>It's necessary not to set or leave &lt;code&gt;:nullify&lt;/code&gt; option for those associations that have &lt;code&gt;NOT NULL&lt;/code&gt; database constraints. If you don't set &lt;code&gt;dependent&lt;/code&gt; to destroy such associations you won't be able to change the associated object because the initial associated object's foreign key will be set to the unallowed &lt;code&gt;NULL&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;NOT NULL&lt;/code&gt; データベース制約を持つ関連付けには、 &lt;code&gt;:nullify&lt;/code&gt; オプションを設定したり、そのままにしたりしないでください。このような関連付けを破棄するように &lt;code&gt;dependent&lt;/code&gt; を設定しないと、関連付けられたオブジェクトを変更できません。これは、最初の関連付けられたオブジェクトの外部キーが許可されていない &lt;code&gt;NULL&lt;/code&gt; 値に設定されるためです。</target>
        </trans-unit>
        <trans-unit id="2de386d061ae8779fc61c2f09a77ad60535807ab" translate="yes" xml:space="preserve">
          <source>It's normal for associations to work in two directions, requiring declaration on two different models:</source>
          <target state="translated">アソシエーションが2つの方向で動作するのは普通のことで、2つの異なるモデルでの宣言を必要とします。</target>
        </trans-unit>
        <trans-unit id="27f390c981876d7b7b77c2786f714460a8271639" translate="yes" xml:space="preserve">
          <source>It's not possible to derive all render calls like that, though. Here are a few examples of things that can't be derived:</source>
          <target state="translated">そんな感じですべてのレンダーコールを派生させることはできませんが。派生できないものの例をいくつか挙げてみます。</target>
        </trans-unit>
        <trans-unit id="25f14b97d2c364a8b7b21e0c4a093d07e8cb1fd6" translate="yes" xml:space="preserve">
          <source>It's possible to add an exclamation point (!) on the end of the dynamic finders to get them to raise an &lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord::RecordNotFound&lt;/a&gt; error if they do not return any records, like &lt;code&gt;Person.find_by_last_name!&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Person.find_by_last_name!&lt;/code&gt; などのレコードを返さない場合、動的ファインダーの最後に感嘆符（！）を追加して&lt;a href=&quot;recordnotfound&quot;&gt;ActiveRecord :: RecordNotFound&lt;/a&gt;エラーを発生させることができます。。</target>
        </trans-unit>
        <trans-unit id="07d745fa3c1940442a48d11e1c81707259e4e2fc" translate="yes" xml:space="preserve">
          <source>It's possible to rotate the ciphers and digests used for encrypted and signed cookies.</source>
          <target state="translated">暗号化されたクッキーや署名されたクッキーに使用される暗号やダイジェストを回転させることができます。</target>
        </trans-unit>
        <trans-unit id="c32e8dd88e75c55390e501c7bd381f8aca605240" translate="yes" xml:space="preserve">
          <source>It's possible to set the fixture's model class directly in the YAML file. This is helpful when fixtures are loaded outside tests and &lt;code&gt;set_fixture_class&lt;/code&gt; is not available (e.g. when running &lt;code&gt;rails db:fixtures:load&lt;/code&gt;).</source>
          <target state="translated">YAMLファイルでフィクスチャのモデルクラスを直接設定することが可能です。これは、フィクスチャがテスト外でロードされ、 &lt;code&gt;set_fixture_class&lt;/code&gt; が利用できない場合に便利です（たとえば、 &lt;code&gt;rails db:fixtures:load&lt;/code&gt; を実行する場合）。</target>
        </trans-unit>
        <trans-unit id="98cb3aa74f36c4b8f6c7c65b58c0012c527c5d89" translate="yes" xml:space="preserve">
          <source>It's possible to stack callbacks by passing them as an array. Example:</source>
          <target state="translated">コールバックを配列として渡すことでスタック化することができます。例を示します。</target>
        </trans-unit>
        <trans-unit id="411969aa31079ad6714c1419f7c08edef6d92a15" translate="yes" xml:space="preserve">
          <source>It's possible to use any of the above middlewares in your custom Rack stack.</source>
          <target state="translated">上記のいずれかのミドルウェアをカスタムラックスタックで使用することが可能です。</target>
        </trans-unit>
        <trans-unit id="a3d4cccbe811b7396f09d0f801e04618ab0dac79" translate="yes" xml:space="preserve">
          <source>It's time to add a second model to the application. The second model will handle comments on articles.</source>
          <target state="translated">2つ目のモデルをアプリケーションに追加する時が来ました。2つ目のモデルは、記事へのコメントを処理します。</target>
        </trans-unit>
        <trans-unit id="0ad56c35d6c96eef75a6ee75178cc603e11a32f0" translate="yes" xml:space="preserve">
          <source>It's very important here to use the &lt;code&gt;String&lt;/code&gt; version of the class, rather than the class itself. If you were to use the class, Rails would attempt to load that class and then reference the related table. This could lead to problems if the table didn't already exist. Therefore, a &lt;code&gt;String&lt;/code&gt; should be used and then converted to a class using &lt;code&gt;constantize&lt;/code&gt; in the engine later on.</source>
          <target state="translated">ここでは、クラス自体ではなく、 &lt;code&gt;String&lt;/code&gt; バージョンのクラスを使用することが非常に重要です。クラスを使用する場合、Railsはそのクラスをロードしてから、関連するテーブルを参照しようとします。テーブルがまだ存在していない場合、これにより問題が発生する可能性があります。したがって、 &lt;code&gt;String&lt;/code&gt; を使用してから、後でエンジンで &lt;code&gt;constantize&lt;/code&gt; を使用してクラスに変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="82c4355aa174ea1134e7c02d2a116f276e1eee7a" translate="yes" xml:space="preserve">
          <source>Iterates through each error key, value pair in the error messages hash. Yields the attribute and the error for that attribute. If the attribute has more than one error message, yields once for each error message.</source>
          <target state="translated">エラーメッセージのハッシュ内の各エラーキーと値のペアを繰り返し処理します。属性とその属性のエラーを返します。属性に複数のエラーメッセージがある場合、各エラーメッセージに対して一度だけ返されます。</target>
        </trans-unit>
        <trans-unit id="9a3f6528f2606d1ed81f1e9f85b624a26b98cbbe" translate="yes" xml:space="preserve">
          <source>JOIN</source>
          <target state="translated">JOIN</target>
        </trans-unit>
        <trans-unit id="031a4e76f0b39d0df073d934da5fc48da8d737e5" translate="yes" xml:space="preserve">
          <source>JSON</source>
          <target state="translated">JSON</target>
        </trans-unit>
        <trans-unit id="fe0b7e20b2738d8025a2377f855de38e73f547f9" translate="yes" xml:space="preserve">
          <source>JSON and JSONB</source>
          <target state="translated">JSONおよびJSONB</target>
        </trans-unit>
        <trans-unit id="cf43040f699629e838a8715912bcf428aa5440fb" translate="yes" xml:space="preserve">
          <source>JSON is a JavaScript data format used by many Ajax libraries. Rails has built-in support for converting objects to JSON and rendering that JSON back to the browser:</source>
          <target state="translated">JSONは多くのAjaxライブラリで使用されているJavaScriptのデータ形式です。Railsには、オブジェクトをJSONに変換し、そのJSONをブラウザにレンダリングするためのサポートが組み込まれています。</target>
        </trans-unit>
        <trans-unit id="31c1bce502137da7db199329615126120773d1f0" translate="yes" xml:space="preserve">
          <source>JSON parameters</source>
          <target state="translated">JSONパラメータ</target>
        </trans-unit>
        <trans-unit id="935b885e280c10afb46d2bf45f85bbea09bc94ce" translate="yes" xml:space="preserve">
          <source>JSON support</source>
          <target state="translated">JSON サポート</target>
        </trans-unit>
        <trans-unit id="91b8bae1d5741163238caeb859f60f9aad22ca54" translate="yes" xml:space="preserve">
          <source>JSON::decode</source>
          <target state="translated">JSON::decode</target>
        </trans-unit>
        <trans-unit id="cd65102564a8ba6c57d96671fc65196b16e48b3c" translate="yes" xml:space="preserve">
          <source>JSON::encode</source>
          <target state="translated">JSON::encode</target>
        </trans-unit>
        <trans-unit id="92b18c9405f766007bd6109914f3813baf41ad56" translate="yes" xml:space="preserve">
          <source>JSON::parse_error</source>
          <target state="translated">JSON::parse_error</target>
        </trans-unit>
        <trans-unit id="19acdb4160eb288df993337f159e349c600848ff" translate="yes" xml:space="preserve">
          <source>JSON_ESCAPE</source>
          <target state="translated">JSON_ESCAPE</target>
        </trans-unit>
        <trans-unit id="c4f4583027599ec31d99dce1fd474812e595bec5" translate="yes" xml:space="preserve">
          <source>JSON_ESCAPE_REGEXP</source>
          <target state="translated">JSON_ESCAPE_REGEXP</target>
        </trans-unit>
        <trans-unit id="6b078a8fb6a84f103228ea09a5d693750075dfee" translate="yes" xml:space="preserve">
          <source>JS_ESCAPE_MAP</source>
          <target state="translated">JS_ESCAPE_MAP</target>
        </trans-unit>
        <trans-unit id="3a2bc94aa5df89cb534947cbbba66bbfa8f5d420" translate="yes" xml:space="preserve">
          <source>JavaScript Compression</source>
          <target state="translated">JavaScriptの圧縮</target>
        </trans-unit>
        <trans-unit id="329f655713f7ed95d8ad672ec206ea61c89847f8" translate="yes" xml:space="preserve">
          <source>JavaScript asset compression requires you have a JavaScript runtime available on your system, in the absence of a runtime you will see an &lt;code&gt;execjs&lt;/code&gt; error during asset compilation. Usually macOS and Windows come with a JavaScript runtime installed. &lt;code&gt;therubyrhino&lt;/code&gt; is the recommended runtime for JRuby users and is added by default to the &lt;code&gt;Gemfile&lt;/code&gt; in apps generated under JRuby. You can investigate all the supported runtimes at &lt;a href=&quot;https://github.com/rails/execjs#readme&quot;&gt;ExecJS&lt;/a&gt;.</source>
          <target state="translated">JavaScriptアセットの圧縮では、システムでJavaScriptランタイムを使用できる必要があります。ランタイムがない場合、アセットのコンパイル中に &lt;code&gt;execjs&lt;/code&gt; エラーが表示されます。通常、macOSとWindowsにはJavaScriptランタイムがインストールされています。 &lt;code&gt;therubyrhino&lt;/code&gt; は、JRubyユーザーに推奨されるランタイムであり、JRubyで生成されたアプリの &lt;code&gt;Gemfile&lt;/code&gt; にデフォルトで追加されます。&lt;a href=&quot;https://github.com/rails/execjs#readme&quot;&gt;ExecJSで&lt;/a&gt;サポートされているすべてのランタイムを調査できます。</target>
        </trans-unit>
        <trans-unit id="c469bfe9f94b3c15c0a2967572561504964de859" translate="yes" xml:space="preserve">
          <source>JavaScript can also make requests to the server, and parse the response. It also has the ability to update information on the page. Combining these two powers, a JavaScript writer can make a web page that can update just parts of itself, without needing to get the full page data from the server. This is a powerful technique that we call Ajax.</source>
          <target state="translated">また、JavaScriptはサーバーへのリクエストを行い、レスポンスを解析することができます。また、ページ上の情報を更新する機能も持っています。これら2つの力を組み合わせることで、JavaScriptライターは、サーバーからページ全体のデータを取得することなく、それ自体の一部だけを更新できるWebページを作ることができます。これがAjaxと呼ばれる強力な技術です。</target>
        </trans-unit>
        <trans-unit id="e79342aa85fd4f1c22498783cd42d8faf5c0f966" translate="yes" xml:space="preserve">
          <source>JavaScriptHelper</source>
          <target state="translated">JavaScriptHelper</target>
        </trans-unit>
        <trans-unit id="4d1ff2f58b0a4a6adf2107fa93ff7226f28327a3" translate="yes" xml:space="preserve">
          <source>Job Execution</source>
          <target state="translated">ジョブの実行</target>
        </trans-unit>
        <trans-unit id="ba8d06fda34fb43af828c544923775e18fb1a0b2" translate="yes" xml:space="preserve">
          <source>Job Identifier</source>
          <target state="translated">ジョブ識別子</target>
        </trans-unit>
        <trans-unit id="3f331e97598d78f4160b82438f27bf259a5df56f" translate="yes" xml:space="preserve">
          <source>Job Testing</source>
          <target state="translated">ジョブテスト</target>
        </trans-unit>
        <trans-unit id="e5baad04a61a328c9f20c8c710417477b5871973" translate="yes" xml:space="preserve">
          <source>Job arguments</source>
          <target state="translated">ジョブ引数</target>
        </trans-unit>
        <trans-unit id="243efbade47e05637dd57919b72473a334187b42" translate="yes" xml:space="preserve">
          <source>Job object</source>
          <target state="translated">ジョブオブジェクト</target>
        </trans-unit>
        <trans-unit id="e91b70d63ed47030600cb3d8ce6bdfdabe2a990d" translate="yes" xml:space="preserve">
          <source>Job: Any class inheriting from the adapter may set the priority on the job object relative to other jobs.</source>
          <target state="translated">ジョブです。アダプタを継承するクラスは、他のジョブとの相対的な優先度をジョブオブジェクトに設定することができます。</target>
        </trans-unit>
        <trans-unit id="3a6116842526736873ed5f69baef76f0d3c2c51b" translate="yes" xml:space="preserve">
          <source>Job: The number of retries can be set per instance of the job class.</source>
          <target state="translated">ジョブです。ジョブクラスのインスタンスごとにリトライ回数を設定できます。</target>
        </trans-unit>
        <trans-unit id="bfef8c94380b329ced3bcf083ac61b7f2a6ce2ec" translate="yes" xml:space="preserve">
          <source>Job: The timeout can be set for each instance of the job class.</source>
          <target state="translated">ジョブです。ジョブクラスのインスタンスごとにタイムアウトを設定できます。</target>
        </trans-unit>
        <trans-unit id="f8a539a40723c2241a7fba7916651de221c51cc8" translate="yes" xml:space="preserve">
          <source>Joining Across Databases</source>
          <target state="translated">データベース間の結合</target>
        </trans-unit>
        <trans-unit id="5e207af13c7f10c990fa0278c9a6d430dd7d1927" translate="yes" xml:space="preserve">
          <source>Joining Tables</source>
          <target state="translated">テーブルの結合</target>
        </trans-unit>
        <trans-unit id="9cd1a12e9f4770062aa1cf8bf14ef4b159146a9b" translate="yes" xml:space="preserve">
          <source>Joining across clusters</source>
          <target state="translated">クラスター間の結合</target>
        </trans-unit>
        <trans-unit id="36cb6826dbbbacc9f0915d9e44ccb82925b04c72" translate="yes" xml:space="preserve">
          <source>Joins</source>
          <target state="translated">Joins</target>
        </trans-unit>
        <trans-unit id="b8202b1a0f9ac4ece76b1b53a1b999e3fec322b8" translate="yes" xml:space="preserve">
          <source>Joins that are also marked for preloading. In which case we should just eager load them. Note that this is a naive implementation because we could have strings and symbols which represent the same association, but that aren't matched by this. Also, we could have nested hashes which partially match, e.g. { a: :b } &amp;amp; { a: [:b, :c] }</source>
          <target state="translated">プレロード用にマークされている結合。その場合、私たちはそれらを熱心にロードする必要があります。同じ関連付けを表す文字列とシンボルが存在する可能性があるため、これは単純な実装であることに注意してください。ただし、これには一致しません。また、部分的に一致するネストされたハッシュを使用することもできます。たとえば、{a：：b}＆{a：[：b、：c]}</target>
        </trans-unit>
        <trans-unit id="6e55f603d9ec6b7739d6e41f2a606f221971eb79" translate="yes" xml:space="preserve">
          <source>Just about every Rails application interacts heavily with a database and, as a result, your tests will need a database to interact with as well. To write efficient tests, you'll need to understand how to set up this database and populate it with sample data.</source>
          <target state="translated">ほぼすべてのRailsアプリケーションはデータベースと大きく相互作用し、結果として、テストにも相互作用するデータベースが必要になります。効率的なテストを書くためには、このデータベースを設定し、サンプルデータを入力する方法を理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="9a2e31fe0f7501188d972dc8b3009118ae147cce" translate="yes" xml:space="preserve">
          <source>Just about every Rails application will interact with a database. You can connect to the database by setting an environment variable &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; or by using a configuration file called &lt;code&gt;config/database.yml&lt;/code&gt;.</source>
          <target state="translated">ほぼすべてのRailsアプリケーションがデータベースと対話します。環境変数 &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; 設定するか、 &lt;code&gt;config/database.yml&lt;/code&gt; という構成ファイルを使用して、データベースに接続できます。</target>
        </trans-unit>
        <trans-unit id="a6e9bc826bb062c09dd75404c4f004cf69a6b37f" translate="yes" xml:space="preserve">
          <source>Just as with member routes, you can pass &lt;code&gt;:on&lt;/code&gt; to a route:</source>
          <target state="translated">メンバールートと同様に、ルートに： &lt;code&gt;:on&lt;/code&gt; を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="2f3d430d08030c44ea5008d7059f7767a85248fa" translate="yes" xml:space="preserve">
          <source>Just as with validations, it is also possible to skip callbacks by using the following methods:</source>
          <target state="translated">バリデーションと同様に、以下のメソッドを使用することでコールバックをスキップすることも可能です。</target>
        </trans-unit>
        <trans-unit id="f7176b43f8be7e97b7f6abc748a4d1ba73e1f076" translate="yes" xml:space="preserve">
          <source>Just as you have to filter file names for uploads, you have to do so for downloads. The send_file() method sends files from the server to the client. If you use a file name, that the user entered, without filtering, any file can be downloaded:</source>
          <target state="translated">アップロードの際にファイル名をフィルタリングしなければならないのと同じように、ダウンロードの際にもフィルタリングしなければなりません。send_file()メソッドは、サーバからクライアントにファイルを送信します。ユーザが入力したファイル名をフィルタリングなしで使用すると、どのようなファイルでもダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="6eba7e48f48826c026364d3ef9033ea0a2ba0cec" translate="yes" xml:space="preserve">
          <source>Just follow the flow and use constant autoloading always, never mix autoloading and &lt;code&gt;require&lt;/code&gt;. As a last resort, if some file absolutely needs to load a certain file use &lt;code&gt;require_dependency&lt;/code&gt; to play nice with constant autoloading. This option is rarely needed in practice, though.</source>
          <target state="translated">ただ、自動ロードを混ぜ、決して、常に自動ロードの流れと使用定数をたどる &lt;code&gt;require&lt;/code&gt; 。最後の手段として、特定のファイルを絶対にロードする必要があるファイルがある場合は、 &lt;code&gt;require_dependency&lt;/code&gt; を使用して、一定のオートロードで適切に動作します。ただし、このオプションが実際に必要になることはめったにありません。</target>
        </trans-unit>
        <trans-unit id="c7399cb44559f41a1a38147646227e775691d7d9" translate="yes" xml:space="preserve">
          <source>Just like &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;pluck&lt;/a&gt;, &lt;a href=&quot;calculations#method-i-pick&quot;&gt;pick&lt;/a&gt; will only load the actual value, not the entire record object, so it's also more efficient. The value is, again like with pluck, typecast by the column type.</source>
          <target state="translated">&lt;a href=&quot;calculations#method-i-pluck&quot;&gt;pluck&lt;/a&gt;と同様に、&lt;a href=&quot;calculations#method-i-pick&quot;&gt;pick&lt;/a&gt;はレコードオブジェクト全体ではなく、実際の値のみをロードするため、より効率的です。この値も、pluckと同様に、列の型で型キャストされます。</target>
        </trans-unit>
        <trans-unit id="671b2bc997bf58b09f7c839fa2e9de6a259349c8" translate="yes" xml:space="preserve">
          <source>Just like &lt;code&gt;where&lt;/code&gt; clauses scopes are merged using &lt;code&gt;AND&lt;/code&gt; conditions.</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt; 句のスコープが &lt;code&gt;AND&lt;/code&gt; 条件を使用してマージされるのと同じように。</target>
        </trans-unit>
        <trans-unit id="f64914076cb847b94287ce323657522270559d5e" translate="yes" xml:space="preserve">
          <source>Just like controller views, you can also have mailer layouts. The layout name needs to be the same as your mailer, such as &lt;code&gt;user_mailer.html.erb&lt;/code&gt; and &lt;code&gt;user_mailer.text.erb&lt;/code&gt; to be automatically recognized by your mailer as a layout.</source>
          <target state="translated">コントローラービューと同様に、メーラーレイアウトも使用できます。メーラーがレイアウトとして自動的に認識されるようにするには、レイアウト名をメーラーと同じにする必要があります（ &lt;code&gt;user_mailer.html.erb&lt;/code&gt; や &lt;code&gt;user_mailer.text.erb&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="753554100abd5092cfad1bab450b186806b19dcb" translate="yes" xml:space="preserve">
          <source>Just like the &lt;code&gt;:status&lt;/code&gt; option for &lt;code&gt;render&lt;/code&gt;, &lt;code&gt;:status&lt;/code&gt; for &lt;code&gt;redirect_to&lt;/code&gt; accepts both numeric and symbolic header designations.</source>
          <target state="translated">同じように &lt;code&gt;:status&lt;/code&gt; のオプション &lt;code&gt;render&lt;/code&gt; 、 &lt;code&gt;:status&lt;/code&gt; のための &lt;code&gt;redirect_to&lt;/code&gt; は数値とシンボリックヘッダの指定の両方を受け入れます。</target>
        </trans-unit>
        <trans-unit id="48a1e320e2900c92a403a1b54619041dc6c7dbb0" translate="yes" xml:space="preserve">
          <source>Just like with controller views, use &lt;code&gt;yield&lt;/code&gt; to render the view inside the layout.</source>
          <target state="translated">コントローラービューの場合と同様に、 &lt;code&gt;yield&lt;/code&gt; を使用してビューをレイアウト内にレンダリングします。</target>
        </trans-unit>
        <trans-unit id="cfe563ecbc5c2d0727d8e68cb28dba126901d7cb" translate="yes" xml:space="preserve">
          <source>Just provide the polymorphic target type and Active Record will take care of the rest.</source>
          <target state="translated">多相性のあるターゲットタイプを指定するだけで、Active Recordが残りの部分を処理してくれます。</target>
        </trans-unit>
        <trans-unit id="860d8665c7153f5ed86a5af21fcfc9bdf178a9c7" translate="yes" xml:space="preserve">
          <source>Just remember: They'll be gone by the time the next action has been performed.</source>
          <target state="translated">覚えておいてください。彼らは次のアクションが実行されるまでに消えてしまいます。</target>
        </trans-unit>
        <trans-unit id="dd65c1b4b3e66e765523873bd29cf5d6d6838189" translate="yes" xml:space="preserve">
          <source>KEY</source>
          <target state="translated">KEY</target>
        </trans-unit>
        <trans-unit id="d4539f21502f9a79f091307f97c17b2f1499a26d" translate="yes" xml:space="preserve">
          <source>KILOBYTE</source>
          <target state="translated">KILOBYTE</target>
        </trans-unit>
        <trans-unit id="74f46f9fed362d70b79016c97d7a171bb9094666" translate="yes" xml:space="preserve">
          <source>KV_RE</source>
          <target state="translated">KV_RE</target>
        </trans-unit>
        <trans-unit id="6dc3af60e01355817ee8300ffeb6bf0b63b5301c" translate="yes" xml:space="preserve">
          <source>Karel Minař&amp;iacute;k</source>
          <target state="translated">カレル・ミナジーク</target>
        </trans-unit>
        <trans-unit id="ca6310cd242689398be52a0e491b3ffc0905a27a" translate="yes" xml:space="preserve">
          <source>Keep in mind that database adapters handle certain serialization tasks for you. For instance: &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;jsonb&lt;/code&gt; types in PostgreSQL will be converted between JSON object/array syntax and Ruby &lt;code&gt;Hash&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; objects transparently. There is no need to use &lt;a href=&quot;classmethods#method-i-serialize&quot;&gt;serialize&lt;/a&gt; in this case.</source>
          <target state="translated">データベースアダプターは特定のシリアル化タスクを処理することに注意してください。たとえば、PostgreSQLの &lt;code&gt;json&lt;/code&gt; および &lt;code&gt;jsonb&lt;/code&gt; タイプは、JSONオブジェクト/配列構文とRuby &lt;code&gt;Hash&lt;/code&gt; または &lt;code&gt;Array&lt;/code&gt; オブジェクトの間で透過的に変換されます。この場合、&lt;a href=&quot;classmethods#method-i-serialize&quot;&gt;シリアライズ&lt;/a&gt;を使用する必要はありません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
