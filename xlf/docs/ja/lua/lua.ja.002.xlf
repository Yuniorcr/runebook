<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="lua">
    <body>
      <group id="lua">
        <trans-unit id="aa39944ec03b1ec2d3455e9418607f7822bf72a3" translate="yes" xml:space="preserve">
          <source>If the resulting function has upvalues, its first upvalue is set to the value of the global environment stored at index &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; in the registry (see &lt;a href=&quot;#4.3&quot;&gt;&amp;sect;4.3&lt;/a&gt;). When loading main chunks, this upvalue will be the &lt;code&gt;_ENV&lt;/code&gt; variable (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). Other upvalues are initialized with &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">結果の関数にアップバリューがある場合、その最初のアップバリューは、レジストリのインデックス &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; に格納されているグローバル環境の値に設定されます（&lt;a href=&quot;#4.3&quot;&gt;&amp;sect;4.3を&lt;/a&gt;参照）。メインチャンクをロードする場合、このアップバリューは &lt;code&gt;_ENV&lt;/code&gt; 変数になります（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。その他のアップバリューは&lt;b&gt;nilで&lt;/b&gt;初期化されます。</target>
        </trans-unit>
        <trans-unit id="afde979ca5fc178b1fdd97cd1a0eb2a3d73cbc9c" translate="yes" xml:space="preserve">
          <source>If the resulting function has upvalues, its first upvalue is set to the value of the global environment stored at index &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; in the registry (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;). When loading main chunks, this upvalue will be the &lt;code&gt;_ENV&lt;/code&gt; variable (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). Other upvalues are initialized with &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">結果の関数にアップ値がある場合、その最初のアップ値は、レジストリのインデックス &lt;code&gt;LUA_RIDX_GLOBALS&lt;/code&gt; に格納されているグローバル環境の値に設定されます（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。メインチャンクをロードする場合、このアップバリューは &lt;code&gt;_ENV&lt;/code&gt; 変数になります（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。他のアップバリューは&lt;b&gt;nilで&lt;/b&gt;初期化されます。</target>
        </trans-unit>
        <trans-unit id="275e9e5485299a94935ea18cd6064e91a7392a15" translate="yes" xml:space="preserve">
          <source>If the resulting function has upvalues, the first upvalue is set to the value of &lt;code&gt;env&lt;/code&gt;, if that parameter is given, or to the value of the global environment. Other upvalues are initialized with &lt;b&gt;nil&lt;/b&gt;. (When you load a main chunk, the resulting function will always have exactly one upvalue, the &lt;code&gt;_ENV&lt;/code&gt; variable (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). However, when you load a binary chunk created from a function (see &lt;a href=&quot;#pdf-string.dump&quot;&gt;&lt;code&gt;string.dump&lt;/code&gt;&lt;/a&gt;), the resulting function can have an arbitrary number of upvalues.) All upvalues are fresh, that is, they are not shared with any other function.</source>
          <target state="translated">結果の関数にアップ値がある場合、最初のアップ値は、そのパラメーターが指定されている場合は &lt;code&gt;env&lt;/code&gt; の値、またはグローバル環境の値に設定されます。他のアップバリューは&lt;b&gt;nilで&lt;/b&gt;初期化されます。（メインチャンクをロードすると、結果の関数には常に1つのアップ値、 &lt;code&gt;_ENV&lt;/code&gt; 変数が含まれます（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。ただし、関数から作成されたバイナリチャンクをロードすると（&lt;a href=&quot;#pdf-string.dump&quot;&gt; &lt;code&gt;string.dump&lt;/code&gt; を&lt;/a&gt;参照）、結果の関数は任意の数のアップバリューがあります。）すべてのアップバリューは新しいものです。つまり、他の関数と共有されません。</target>
        </trans-unit>
        <trans-unit id="2440107420c56013ca178ce5e9d33aaab09429e6" translate="yes" xml:space="preserve">
          <source>If the third expression (the step) is absent, then a step of 1 is used.</source>
          <target state="translated">第3の式(ステップ)がない場合は、1のステップを使用します。</target>
        </trans-unit>
        <trans-unit id="b6867da3d50ebe1ffe1a4f6e7b8d21bdab6c2e11" translate="yes" xml:space="preserve">
          <source>If the userdata does not have that value, pushes &lt;b&gt;nil&lt;/b&gt; and returns &lt;a href=&quot;#pdf-LUA_TNONE&quot;&gt;&lt;code&gt;LUA_TNONE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#pdf-LUA_TNONE&quot;&gt; &lt;code&gt;LUA_TNONE&lt;/code&gt; &lt;/a&gt;その値がない場合は、&lt;b&gt;nil&lt;/b&gt;をプッシュ&lt;b&gt;して&lt;/b&gt;、LUA_TNONEを返します。</target>
        </trans-unit>
        <trans-unit id="30fdcf02dde9756f746a6d73d9bf8f5049261a0f" translate="yes" xml:space="preserve">
          <source>If the value &lt;code&gt;x&lt;/code&gt; is convertible to an integer, returns that integer. Otherwise, returns &lt;b&gt;fail&lt;/b&gt;.</source>
          <target state="translated">値 &lt;code&gt;x&lt;/code&gt; が整数に変換可能な場合、その整数を返します。それ以外の場合は、&lt;b&gt;失敗を&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="876e4bd473070df65d9eb13c67cd61272830f8dd" translate="yes" xml:space="preserve">
          <source>If the value &lt;code&gt;x&lt;/code&gt; is convertible to an integer, returns that integer. Otherwise, returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">値 &lt;code&gt;x&lt;/code&gt; が整数に変換可能な場合は、その整数を返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="94b7f8b2fd53356736681842c541a85531d3f0c6" translate="yes" xml:space="preserve">
          <source>If the value at the given index has a metatable, the function pushes that metatable onto the stack and returns 1. Otherwise, the function returns 0 and pushes nothing on the stack.</source>
          <target state="translated">指定されたインデックスの値にメタテーブルがある場合、この関数はそのメタテーブルをスタックにプッシュして 1 を返します。そうでない場合は、この関数は 0 を返し、スタック上には何もプッシュしません。</target>
        </trans-unit>
        <trans-unit id="9441049c218d493b700b38a8bccd81b0ab58775b" translate="yes" xml:space="preserve">
          <source>If the value at the given index is a full userdata, returns its block address. If the value is a light userdata, returns its pointer. Otherwise, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">指定されたインデックスの値が完全なユーザーデータの場合、そのブロックアドレスを返します。値がlight userdataの場合、そのポインタを返します。それ以外の場合は、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9c5badf0b625046b21174cf23ead77965326f8cc" translate="yes" xml:space="preserve">
          <source>If the value at the given index is a full userdata, returns its memory-block address. If the value is a light userdata, returns its value (a pointer). Otherwise, returns &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">指定されたインデックスの値が完全なユーザーデータである場合、そのメモリブロックアドレスを返します。値がライトユーザーデータの場合、その値（ポインター）を返します。それ以外の場合は、 &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4632120bcb257e680797b7d6b495d6ae5165f498" translate="yes" xml:space="preserve">
          <source>If the value has a metatable with a &lt;code&gt;__tostring&lt;/code&gt; field, then &lt;code&gt;luaL_tolstring&lt;/code&gt; calls the corresponding metamethod with the value as argument, and uses the result of the call as its result.</source>
          <target state="translated">値に &lt;code&gt;__tostring&lt;/code&gt; フィールドを持つメタテーブルがある場合、 &lt;code&gt;luaL_tolstring&lt;/code&gt; は対応するメタメソッドを値を引数として呼び出し、呼び出しの結果を結果として使用します。</target>
        </trans-unit>
        <trans-unit id="d98fc2205300b7d347d732dbb4a9c377f9f7a2f3" translate="yes" xml:space="preserve">
          <source>If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;nil&lt;/b&gt;, then there is no replacement (that is, the original match is kept in the string).</source>
          <target state="translated">テーブルクエリまたは関数呼び出しによって返された値が文字列または数値の場合、それが置換文字列として使用されます。それ以外の場合、&lt;b&gt;false&lt;/b&gt;または&lt;b&gt;nilの&lt;/b&gt;場合、置換はありません（つまり、元の一致が文字列に保持されます）。</target>
        </trans-unit>
        <trans-unit id="ff3df837749e4825f721110ceca71ee53b60c2f6" translate="yes" xml:space="preserve">
          <source>If there are no syntactic errors, &lt;code&gt;load&lt;/code&gt; returns the compiled chunk as a function; otherwise, it returns &lt;b&gt;fail&lt;/b&gt; plus the error message.</source>
          <target state="translated">構文エラーがない場合、 &lt;code&gt;load&lt;/code&gt; はコンパイルされたチャンクを関数として返します。それ以外の場合は、&lt;b&gt;失敗&lt;/b&gt;とエラーメッセージが返されます。</target>
        </trans-unit>
        <trans-unit id="ed5b55c4ebb32433c98e6d7ba29a004a9265213b" translate="yes" xml:space="preserve">
          <source>If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns &lt;b&gt;nil&lt;/b&gt; plus the error message.</source>
          <target state="translated">構文エラーがない場合は、コンパイルされたチャンクを関数として返します。それ以外の場合は、&lt;b&gt;nil&lt;/b&gt;とエラーメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="94d76ea95ae9d04310650a4926fa6e03a91eead5" translate="yes" xml:space="preserve">
          <source>If there is any error loading or running the module, or if it cannot find any loader for the module, then &lt;code&gt;require&lt;/code&gt; raises an error.</source>
          <target state="translated">モジュールのロードまたは実行中にエラーが発生した場合、またはモジュールのローダーが見つからない場合、 &lt;code&gt;require&lt;/code&gt; はエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="ce92cea2e328d0390d4ad8b2857051594fc6df6d" translate="yes" xml:space="preserve">
          <source>If there is any error while running a closing method, that error is handled like an error in the regular code where the variable was defined. However, Lua may call the method one more time.</source>
          <target state="translated">クロージングメソッドの実行中にエラーが発生した場合、そのエラーは変数が定義されている通常のコードのエラーと同じように処理されます。ただし、Luaはメソッドをもう一度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0a6dbd64b84e48ca7300b890ff312675543ee0f6" translate="yes" xml:space="preserve">
          <source>If there is no script in the call, the interpreter name goes to index 0, followed by the other arguments. For instance, the call</source>
          <target state="translated">呼び出しにスクリプトがない場合、インタープリタ名はインデックス 0 になり、その後に他の引数が続きます。例えば、呼び出し</target>
        </trans-unit>
        <trans-unit id="2f77907008466a9df684a2c79024f9604e714a0c" translate="yes" xml:space="preserve">
          <source>If this option is given together with option '&lt;code&gt;f&lt;/code&gt;', its table is pushed after the function.</source>
          <target state="translated">このオプションがオプション ' &lt;code&gt;f&lt;/code&gt; ' とともに指定された場合、そのテーブルは関数の後にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="232d4cb58dd3dc6d647132e58f5ddab6d89f9ef6" translate="yes" xml:space="preserve">
          <source>If you know beforehand the maximum size of the resulting string, you can use the buffer like this:</source>
          <target state="translated">結果として得られる文字列の最大サイズがあらかじめわかっていれば、このようなバッファを使うことができます。</target>
        </trans-unit>
        <trans-unit id="eda48319758ff6bba8bcf8cb507f6d311265837c" translate="yes" xml:space="preserve">
          <source>If you know beforehand the total size of the resulting string, you can use the buffer like this:</source>
          <target state="translated">結果として得られる文字列の合計サイズがあらかじめわかっていれば、このようなバッファを使うことができます。</target>
        </trans-unit>
        <trans-unit id="0e57af394dbc6d5a626668daa30c3f8e2018059e" translate="yes" xml:space="preserve">
          <source>If you set the step multiplier to a very large number (larger than 10% of the maximum number of bytes that the program may use), the collector behaves like a stop-the-world collector. If you then set the pause to 200, the collector behaves as in old Lua versions, doing a complete collection every time Lua doubles its memory usage.</source>
          <target state="translated">ステップ倍率を非常に大きな数値(プログラムが使用できる最大バイト数の10%以上)に設定すると、コレクターはストップザワールドコレクターのような動作をします。一時停止の値を200に設定すると、Luaのメモリ使用量が2倍になるたびにコレクターは完全なコレクションを行います。</target>
        </trans-unit>
        <trans-unit id="29af696fcc1cdd39d14ec551ccbd633c6f06b895" translate="yes" xml:space="preserve">
          <source>If, after the translation of negative indices, &lt;code&gt;i&lt;/code&gt; is less than 1, it is corrected to 1. If &lt;code&gt;j&lt;/code&gt; is greater than the string length, it is corrected to that length. If, after these corrections, &lt;code&gt;i&lt;/code&gt; is greater than &lt;code&gt;j&lt;/code&gt;, the function returns the empty string.</source>
          <target state="translated">負のインデックスの変換後、 &lt;code&gt;i&lt;/code&gt; が1未満の場合は1に修正されます &lt;code&gt;j&lt;/code&gt; が文字列の長さより大きい場合は、その長さに修正されます。これらの修正後、 &lt;code&gt;i&lt;/code&gt; が &lt;code&gt;j&lt;/code&gt; より大きい場合、関数は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="a9f42e3411c1cd363cce85bb39824046e38afc0c" translate="yes" xml:space="preserve">
          <source>In POSIX systems, this function also creates a file with that name, to avoid security risks. (Someone else might create the file with wrong permissions in the time between getting the name and creating the file.) You still have to open the file to use it and to remove it (even if you do not use it).</source>
          <target state="translated">POSIXシステムでは、セキュリティリスクを避けるために、この関数はその名前のファイルも作成します。(名前を取得してからファイルを作成するまでの間に、誰かが間違ったパーミッションでファイルを作成してしまうかもしれません)。使用するためにはファイルを開く必要がありますし、削除する必要もあります (使用しない場合でも)。</target>
        </trans-unit>
        <trans-unit id="6e188c4467182589f4f24a348f7b82d5dc4eb843" translate="yes" xml:space="preserve">
          <source>In a conversion from integer to float, if the integer value has an exact representation as a float, that is the result. Otherwise, the conversion gets the nearest higher or the nearest lower representable value. This kind of conversion never fails.</source>
          <target state="translated">整数から浮動小数点数への変換では,整数値が浮動小数点数として正確に表現されていれば,それが結果となります。そうでなければ,変換は,最も近い上位の値または最も近い下位の表現可能な値を取得します。この種の変換は決して失敗しません。</target>
        </trans-unit>
        <trans-unit id="ea37a32b7be8a539051904217ddd263915df9e9c" translate="yes" xml:space="preserve">
          <source>In a function call, first prefixexp and args are evaluated. If the value of prefixexp has type &lt;em&gt;function&lt;/em&gt;, then this function is called with the given arguments. Otherwise, if present, the prefixexp &lt;code&gt;__call&lt;/code&gt; metamethod is called: its first argument is the value of prefixexp, followed by the original call arguments (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">関数呼び出しでは、最初のprefixexpとargsが評価されます。 prefixexpの値の型が&lt;em&gt;functionの&lt;/em&gt;場合、この関数は指定された引数で呼び出されます。それ以外の場合は、prefixexp &lt;code&gt;__call&lt;/code&gt; メタメソッドが呼び出されます。最初の引数はprefixexpの値であり、その後に元の呼び出し引数が続きます（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="97b9aa4de4630491dcb4d24142294547e0b16cc1" translate="yes" xml:space="preserve">
          <source>In a function call, first prefixexp and args are evaluated. If the value of prefixexp has type &lt;em&gt;function&lt;/em&gt;, then this function is called with the given arguments. Otherwise, the prefixexp &quot;call&quot; metamethod is called, having as first parameter the value of prefixexp, followed by the original call arguments (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">関数呼び出しでは、最初のprefixexpとargsが評価されます。prefixexpの値の型が&lt;em&gt;functionの&lt;/em&gt;場合、この関数は指定された引数で呼び出されます。そうでない場合、prefixexp &quot;call&quot;メタメソッドが呼び出され、最初のパラメーターとしてprefixexpの値があり、その後に元の呼び出し引数が続きます（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="49949926795e2c68295a80e05d4c59850e0ba7a4" translate="yes" xml:space="preserve">
          <source>In addition to the previous list, the interpreter also respects the following keys in metatables: &lt;code&gt;__gc&lt;/code&gt; (see &lt;a href=&quot;#2.5.3&quot;&gt;&amp;sect;2.5.3&lt;/a&gt;), &lt;code&gt;__close&lt;/code&gt; (see &lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;), &lt;code&gt;__mode&lt;/code&gt; (see &lt;a href=&quot;#2.5.4&quot;&gt;&amp;sect;2.5.4&lt;/a&gt;), and &lt;code&gt;__name&lt;/code&gt;. (The entry &lt;code&gt;__name&lt;/code&gt;, when it contains a string, may be used by &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt; and in error messages.)</source>
          <target state="translated">：前のリストに加えて、インタープリターは、以下のメタテーブルのキー尊重 &lt;code&gt;__gc&lt;/code&gt; （参照&lt;a href=&quot;#2.5.3&quot;&gt;&amp;sect;2.5.3&lt;/a&gt;）、 &lt;code&gt;__close&lt;/code&gt; （参照&lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;）、 &lt;code&gt;__mode&lt;/code&gt; （参照&lt;a href=&quot;#2.5.4&quot;&gt;&amp;sect;2.5.4&lt;/a&gt;）、および &lt;code&gt;__name&lt;/code&gt; を。（エントリ &lt;code&gt;__name&lt;/code&gt; それが文字列が含まれている、ことによって使用することができる&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;とエラーメッセージで）。</target>
        </trans-unit>
        <trans-unit id="62eebdc1879c0b1be4e46a0d6b0e9bcf316566f7" translate="yes" xml:space="preserve">
          <source>In any case, if the pattern specifies no captures, then it behaves as if the whole pattern was inside a capture.</source>
          <target state="translated">いずれにしても、パターンがキャプチャを指定していない場合は、パターン全体がキャプチャの中にあるかのように振る舞います。</target>
        </trans-unit>
        <trans-unit id="2bb9e40f7423d9d013509578590213e990081254" translate="yes" xml:space="preserve">
          <source>In both cases pushes onto the stack the final value associated with &lt;code&gt;tname&lt;/code&gt; in the registry.</source>
          <target state="translated">どちらの場合も、レジストリの &lt;code&gt;tname&lt;/code&gt; に関連付けられている最終的な値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="2fdfe218bfd306e46380cb987820b12f4c22a7cd" translate="yes" xml:space="preserve">
          <source>In both cases, the function pushes onto the stack the final value associated with &lt;code&gt;tname&lt;/code&gt; in the registry.</source>
          <target state="translated">どちらの場合も、関数はレジストリ内の &lt;code&gt;tname&lt;/code&gt; に関連付けられた最終値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="745fa42e653c44e85ff99efe0906a4b1ecb00bd0" translate="yes" xml:space="preserve">
          <source>In case of errors opening the file, this function raises the error, instead of returning an error code.</source>
          <target state="translated">ファイルを開く際にエラーが発生した場合、この関数はエラーコードを返す代わりにエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="529481951babb324dab477372f5c6d52890e6006" translate="yes" xml:space="preserve">
          <source>In case of errors this function raises the error, instead of returning an error code.</source>
          <target state="translated">エラーが発生した場合、この関数はエラーコードを返す代わりにエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="f30334a63968b6ddb7bb2b4604dd500f34422267" translate="yes" xml:space="preserve">
          <source>In case of errors, the stack is not unwound, so you can use the debug API over it. The error object is on the top of the stack.</source>
          <target state="translated">エラーが発生した場合、スタックは巻き戻されないので、その上でデバッグAPIを利用することができます。エラーオブジェクトはスタックの先頭にあります。</target>
        </trans-unit>
        <trans-unit id="467db70feecc1c4f6d135a7d76a384db5dda44c8" translate="yes" xml:space="preserve">
          <source>In case of overflows in integer arithmetic, all operations &lt;em&gt;wrap around&lt;/em&gt;, according to the usual rules of two-complement arithmetic. (In other words, they return the unique representable integer that is equal modulo &lt;em&gt;2&lt;sup&gt;64&lt;/sup&gt;&lt;/em&gt; to the mathematical result.)</source>
          <target state="translated">整数演算でオーバーフローが発生した場合、2補数演算の通常の規則に従って、すべての演算が&lt;em&gt;ラップアラウンドし&lt;/em&gt;ます。（言い換えれば、それらは&lt;em&gt;2 &lt;sup&gt;64&lt;/sup&gt;&lt;/em&gt;を法とする数学的な結果に等しい一意の表現可能な整数を返します。）</target>
        </trans-unit>
        <trans-unit id="e042bc5ef9c39f04e2c4f57f3960a9657ca9b2b3" translate="yes" xml:space="preserve">
          <source>In case of overflows in integer arithmetic, all operations &lt;em&gt;wrap around&lt;/em&gt;.</source>
          <target state="translated">整数演算でオーバーフローが発生した場合、すべての演算は&lt;em&gt;ラップアラウンドし&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4404e49caab8b46532d3c1ccdfde90bff4f9337a" translate="yes" xml:space="preserve">
          <source>In case of success, &lt;code&gt;seek&lt;/code&gt; returns the final file position, measured in bytes from the beginning of the file. If &lt;code&gt;seek&lt;/code&gt; fails, it returns &lt;b&gt;fail&lt;/b&gt;, plus a string describing the error.</source>
          <target state="translated">成功した場合、 &lt;code&gt;seek&lt;/code&gt; は、ファイルの先頭からバイト単位で測定された最終的なファイル位置を返します。場合 &lt;code&gt;seek&lt;/code&gt; 失敗し、それを返し&lt;b&gt;失敗し&lt;/b&gt;、プラスのエラーを説明する文字列。</target>
        </trans-unit>
        <trans-unit id="af2e9f70152b7436cb1235e5607b1026adf8b4df" translate="yes" xml:space="preserve">
          <source>In case of success, &lt;code&gt;seek&lt;/code&gt; returns the final file position, measured in bytes from the beginning of the file. If &lt;code&gt;seek&lt;/code&gt; fails, it returns &lt;b&gt;nil&lt;/b&gt;, plus a string describing the error.</source>
          <target state="translated">成功した場合、 &lt;code&gt;seek&lt;/code&gt; はファイルの先頭からのバイト数で測定された最終的なファイル位置を返します。場合 &lt;code&gt;seek&lt;/code&gt; 失敗し、それを返します&lt;b&gt;nilを&lt;/b&gt;、プラスのエラーを説明する文字列を。</target>
        </trans-unit>
        <trans-unit id="8ce8027efe413a45818ec783d9d3bd6228742c83" translate="yes" xml:space="preserve">
          <source>In case of success, returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.</source>
          <target state="translated">成功した場合、一時ファイルのハンドルを返します。このファイルは更新モードで開かれ、プログラムが終了すると自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="6be35cfe80694e8f2a500c5ffa60712ba072cc6f" translate="yes" xml:space="preserve">
          <source>In case of success, this function returns &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;file&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b6a86eee5d971d25767843d4dbdef34e84774cef" translate="yes" xml:space="preserve">
          <source>In case of success, this function returns &lt;code&gt;file&lt;/code&gt;. Otherwise it returns &lt;b&gt;nil&lt;/b&gt; plus a string describing the error.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;file&lt;/code&gt; を返します。それ以外の場合は、&lt;b&gt;nil&lt;/b&gt;とエラーを説明する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="8c632a9fad5564d87f459215e17e926cda31f0ee" translate="yes" xml:space="preserve">
          <source>In case of unprotected errors in the script, the interpreter reports the error to the standard error stream. If the error object is not a string but has a metamethod &lt;code&gt;__tostring&lt;/code&gt;, the interpreter calls this metamethod to produce the final message. Otherwise, the interpreter converts the error object to a string and adds a stack traceback to it.</source>
          <target state="translated">スクリプトで保護されていないエラーが発生した場合、インタープリターはエラーを標準エラーストリームに報告します。エラーオブジェクトが文字列ではないが &lt;code&gt;__tostring&lt;/code&gt; 場合、インタプリタはこのメタメソッドを呼び出して最終的なメッセージを生成します。それ以外の場合、インタプリタはエラーオブジェクトを文字列に変換し、それにスタックトレースバックを追加します。</target>
        </trans-unit>
        <trans-unit id="bea04697f039ec14dc1ee8265502eaa4d56df50c" translate="yes" xml:space="preserve">
          <source>In case of unprotected errors in the script, the interpreter reports the error to the standard error stream. If the error object is not a string but has a metamethod &lt;code&gt;__tostring&lt;/code&gt;, the interpreter calls this metamethod to produce the final message. Otherwise, the interpreter converts the error object to a string and adds a stack traceback to it. When warnings are on, they are simply printed in the standard error output.</source>
          <target state="translated">スクリプトで保護されていないエラーが発生した場合、インタープリターはエラーを標準エラーストリームに報告します。エラーオブジェクトが文字列ではなく、 &lt;code&gt;__tostring&lt;/code&gt; 場合、インタプリタはこのメタメソッドを呼び出して最終メッセージを生成します。それ以外の場合、インタプリタはエラーオブジェクトを文字列に変換し、それにスタックトレースバックを追加します。警告がオンの場合、警告は標準エラー出力に出力されるだけです。</target>
        </trans-unit>
        <trans-unit id="07f47d88fa41a69cbb5505a94710be0b6ddd4668" translate="yes" xml:space="preserve">
          <source>In general, Lua's garbage collection can free or move internal memory and then invalidate pointers to internal strings. To allow a safe use of these pointers, The API guarantees that any pointer to a string in a stack index is valid while the value at that index is neither modified nor popped. When the index is a pseudo-index (referring to an upvalue), the pointer is valid while the corresponding call is active and the corresponding upvalue is not modified.</source>
          <target state="translated">一般的に、Luaのガベージコレクションは内部メモリを解放または移動した後、内部文字列へのポインタを無効にすることがあります。このようなポインタを安全に使用できるようにするために、APIでは、スタックインデックス内の文字列へのポインタが有効であることを保証しています。インデックスが疑似インデックス(upvalueを参照する)である場合、ポインタは対応する呼び出しがアクティブで、対応するupvalueが変更されていない間は有効です。</target>
        </trans-unit>
        <trans-unit id="ea95e591f583f4a7ef86223f97f4160fc20ef3bf" translate="yes" xml:space="preserve">
          <source>In generational mode, the collector does frequent &lt;em&gt;minor&lt;/em&gt; collections, which traverses only objects recently created. If after a minor collection the use of memory is still above a limit, the collector does a stop-the-world &lt;em&gt;major&lt;/em&gt; collection, which traverses all objects. The generational mode uses two parameters: the &lt;em&gt;minor multiplier&lt;/em&gt; and the &lt;em&gt;the major multiplier&lt;/em&gt;.</source>
          <target state="translated">生成モードでは、コレクターは頻繁に&lt;em&gt;マイナー&lt;/em&gt;コレクションを実行し、最近作成されたオブジェクトのみをトラバースします。マイナーコレクションの後、メモリの使用がまだ制限を超えている場合、コレクターは、すべてのオブジェクトをトラバースするストップザワールド&lt;em&gt;メジャー&lt;/em&gt;コレクションを実行します。生成モードは、&lt;em&gt;マイナー乗数&lt;/em&gt;と&lt;em&gt;メジャー乗数の&lt;/em&gt;2つのパラメーターを使用します。</target>
        </trans-unit>
        <trans-unit id="dd00f2668545ca027b5cc5fd8421e849fff38797" translate="yes" xml:space="preserve">
          <source>In incremental mode, each GC cycle performs a mark-and-sweep collection in small steps interleaved with the program's execution. In this mode, the collector uses three numbers to control its garbage-collection cycles: the &lt;em&gt;garbage-collector pause&lt;/em&gt;, the &lt;em&gt;garbage-collector step multiplier&lt;/em&gt;, and the &lt;em&gt;garbage-collector step size&lt;/em&gt;.</source>
          <target state="translated">インクリメンタルモードでは、各GCサイクルは、プログラムの実行とインターリーブされた小さなステップでマークアンドスイープ収集を実行します。このモードでは、コレクターは3つの数値を使用して、ガベージコレクションサイクルを制御します。ガベージ&lt;em&gt;コレクターの一時停止&lt;/em&gt;、&lt;em&gt;ガベージコレクターのステップ乗数&lt;/em&gt;、および&lt;em&gt;ガベージコレクターのステップサイズ&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="bae459100d0f219cfd74a53f2eb34f96a6176512" translate="yes" xml:space="preserve">
          <source>In interactive mode, Lua repeatedly prompts and waits for a line. After reading a line, Lua first try to interpret the line as an expression. If it succeeds, it prints its value. Otherwise, it interprets the line as a statement. If you write an incomplete statement, the interpreter waits for its completion by issuing a different prompt.</source>
          <target state="translated">対話型モードでは、Lua はプロンプトを繰り返して行を待ちます。行を読み込んだ後、Luaはまずその行を式として解釈しようとします。成功した場合は、その値を表示します。それ以外の場合は、その行を文として解釈します。不完全な文を書いた場合、インタプリタは別のプロンプトを出してその完了を待ちます。</target>
        </trans-unit>
        <trans-unit id="63d381d8ee2b95ac5052d39e95b78fbc9ea8d9fb" translate="yes" xml:space="preserve">
          <source>In order to communicate properly with Lua, a C function must use the following protocol, which defines the way parameters and results are passed: a C function receives its arguments from Lua in its stack in direct order (the first argument is pushed first). So, when the function starts, &lt;code&gt;lua_gettop(L)&lt;/code&gt; returns the number of arguments received by the function. The first argument (if any) is at index 1 and its last argument is at index &lt;code&gt;lua_gettop(L)&lt;/code&gt;. To return values to Lua, a C function just pushes them onto the stack, in direct order (the first result is pushed first), and returns in C the number of results. Any other value in the stack below the results will be properly discarded by Lua. Like a Lua function, a C function called by Lua can also return many results.</source>
          <target state="translated">Luaと適切に通信するには、C関数は次のプロトコルを使用する必要があります。これは、パラメーターと結果が渡される方法を定義します。C関数は、スタック内のLuaから直接引数を受け取ります（最初の引数が最初にプッシュされます）。したがって、関数が開始すると、 &lt;code&gt;lua_gettop(L)&lt;/code&gt; は関数が受け取った引数の数を返します。最初の引数（存在する場合）はインデックス1にあり、最後の引数はインデックス &lt;code&gt;lua_gettop(L)&lt;/code&gt; にあります。 Luaに値を返すために、C関数はそれらを直接スタックにプッシュし（最初の結果が最初にプッシュされます）、Cで結果の数を返します。結果より下のスタック内の他の値は、Luaによって適切に破棄されます。 Lua関数と同様に、Luaによって呼び出されるC関数も多くの結果を返すことができます。</target>
        </trans-unit>
        <trans-unit id="08b57c85f9e4681ef2b296b47dfe58462b42111a" translate="yes" xml:space="preserve">
          <source>In order to communicate properly with Lua, a C function must use the following protocol, which defines the way parameters and results are passed: a C function receives its arguments from Lua in its stack in direct order (the first argument is pushed first). So, when the function starts, &lt;code&gt;lua_gettop(L)&lt;/code&gt; returns the number of arguments received by the function. The first argument (if any) is at index 1 and its last argument is at index &lt;code&gt;lua_gettop(L)&lt;/code&gt;. To return values to Lua, a C function just pushes them onto the stack, in direct order (the first result is pushed first), and returns the number of results. Any other value in the stack below the results will be properly discarded by Lua. Like a Lua function, a C function called by Lua can also return many results.</source>
          <target state="translated">Luaと適切に通信するために、C関数は次のプロトコルを使用する必要があります。プロトコルは、パラメーターと結果が渡される方法を定義します。C関数は、スタック内のLuaから直接引数を受け取ります（最初の引数が最初にプッシュされます）。したがって、関数が開始すると、 &lt;code&gt;lua_gettop(L)&lt;/code&gt; は関数が受け取った引数の数を返します。最初の引数（存在する場合）はインデックス1にあり、最後の引数はインデックス &lt;code&gt;lua_gettop(L)&lt;/code&gt; にあります。 Luaに値を返すために、C関数は直接それらをスタックにプッシュし（最初の結果が最初にプッシュされます）、結果の数を返します。結果の下にあるスタック内の他の値は、Luaによって適切に破棄されます。 Lua関数と同様に、Luaによって呼び出されたC関数も多くの結果を返すことができます。</target>
        </trans-unit>
        <trans-unit id="1509d2ba42008705f892c900bc91b5bc201ddc1e" translate="yes" xml:space="preserve">
          <source>In the &lt;b&gt;repeat&lt;/b&gt;&amp;ndash;&lt;b&gt;until&lt;/b&gt; loop, the inner block does not end at the &lt;b&gt;until&lt;/b&gt; keyword, but only after the condition. So, the condition can refer to local variables declared inside the loop block.</source>
          <target state="translated">で&lt;b&gt;繰り返し&lt;/b&gt; - &lt;b&gt;まで&lt;/b&gt;ループ、内側のブロックは時に終わらない&lt;b&gt;まで&lt;/b&gt;だけの状態の後に、キーワード。したがって、条件はループブロック内で宣言されたローカル変数を参照できます。</target>
        </trans-unit>
        <trans-unit id="82f098174293e606c23ea050f8d7e73e0153453e" translate="yes" xml:space="preserve">
          <source>In the above code, the new function &lt;code&gt;k&lt;/code&gt; is a &lt;em&gt;continuation function&lt;/em&gt; (with type &lt;a href=&quot;#lua_KFunction&quot;&gt;&lt;code&gt;lua_KFunction&lt;/code&gt;&lt;/a&gt;), which should do all the work that the original function was doing after calling &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;. Now, we must inform Lua that it must call &lt;code&gt;k&lt;/code&gt; if the Lua code being executed by &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; gets interrupted in some way (errors or yielding), so we rewrite the code as here, replacing &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; by &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">上記のコードでは、新しい関数 &lt;code&gt;k&lt;/code&gt; は&lt;em&gt;継続関数&lt;/em&gt;（タイプは&lt;a href=&quot;#lua_KFunction&quot;&gt; &lt;code&gt;lua_KFunction&lt;/code&gt; &lt;/a&gt;）であり、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;を呼び出した後に元の関数が行っていたすべての作業を実行する必要があります。ここで、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;によって実行されているLuaコードが何らかの方法（エラーまたは生成）で中断された場合に &lt;code&gt;k&lt;/code&gt; を呼び出す必要があることをLuaに通知する必要があるため、次のようにコードを書き直し、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;に置き換えます。</target>
        </trans-unit>
        <trans-unit id="1a9834b08661ce8efa680d14f8d2efb7c60bfccf" translate="yes" xml:space="preserve">
          <source>In the case of an out-of-memory error, the value in the given index is immediately closed, as if it was already marked.</source>
          <target state="translated">メモリ切れのエラーが発生した場合、指定されたインデックスの値は、すでにマークされていたかのように直ちに閉じられます。</target>
        </trans-unit>
        <trans-unit id="06f49d50825ba7a2c55ba6aba66f792c4da727cd" translate="yes" xml:space="preserve">
          <source>In the first case, the parameter &lt;code&gt;ar&lt;/code&gt; must be a valid activation record that was filled by a previous call to &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; or given as argument to a hook (see &lt;a href=&quot;#lua_Hook&quot;&gt;&lt;code&gt;lua_Hook&lt;/code&gt;&lt;/a&gt;). The index &lt;code&gt;n&lt;/code&gt; selects which local variable to inspect; see &lt;a href=&quot;#pdf-debug.getlocal&quot;&gt;&lt;code&gt;debug.getlocal&lt;/code&gt;&lt;/a&gt; for details about variable indices and names.</source>
          <target state="translated">最初のケースでは、パラメーター &lt;code&gt;ar&lt;/code&gt; は、&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;への以前の呼び出しによって満たされた、またはフックへの引数として指定された有効なアクティブ化レコードでなければなりません（&lt;a href=&quot;#lua_Hook&quot;&gt; &lt;code&gt;lua_Hook&lt;/code&gt; を&lt;/a&gt;参照）。インデックス &lt;code&gt;n&lt;/code&gt; は、検査するローカル変数を選択します。変数のインデックスと名前の詳細については、&lt;a href=&quot;#pdf-debug.getlocal&quot;&gt; &lt;code&gt;debug.getlocal&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="41a440753f8786d13a87f3b118280fbe98ed6aa7" translate="yes" xml:space="preserve">
          <source>In the second case, &lt;code&gt;ar&lt;/code&gt; must be &lt;code&gt;NULL&lt;/code&gt; and the function to be inspected must be at the top of the stack. In this case, only parameters of Lua functions are visible (as there is no information about what variables are active) and no values are pushed onto the stack.</source>
          <target state="translated">2番目のケースでは、 &lt;code&gt;ar&lt;/code&gt; は &lt;code&gt;NULL&lt;/code&gt; でなければならず、検査される関数はスタックの一番上になければなりません。この場合、Lua関数のパラメーターのみが表示され（アクティブな変数に関する情報がないため）、値はスタックにプッシュされません。</target>
        </trans-unit>
        <trans-unit id="5b74c4ab2ab9491434583e802b1853e197a9999c" translate="yes" xml:space="preserve">
          <source>In the second case, &lt;code&gt;ar&lt;/code&gt; must be &lt;code&gt;NULL&lt;/code&gt; and the function to be inspected must be on the top of the stack. In this case, only parameters of Lua functions are visible (as there is no information about what variables are active) and no values are pushed onto the stack.</source>
          <target state="translated">2番目のケースでは、 &lt;code&gt;ar&lt;/code&gt; は &lt;code&gt;NULL&lt;/code&gt; である必要があり、検査される関数はスタックの最上位にある必要があります。この場合、Lua関数のパラメーターのみが表示され（アクティブな変数に関する情報がないため）、値はスタックにプッシュされません。</target>
        </trans-unit>
        <trans-unit id="431335cf2ea122b520413c8e75c042e2443dd934" translate="yes" xml:space="preserve">
          <source>In this case, all returned values are thrown away. Function calls are explained in &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;.</source>
          <target state="translated">この場合、戻り値はすべて破棄されます。関数呼び出しについては、&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10で&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="789e39d8c294634d33eb6b9c165293b5343c70b0" translate="yes" xml:space="preserve">
          <source>In words, a border is any (natural) index in a table where a non-nil value is followed by a nil value (or zero, when index 1 is nil).</source>
          <target state="translated">言い換えれば、ボーダーとは、表の中の任意の(自然な)インデックスで、非nil値の後にnil値(インデックス1がnilの場合は0)が続くものを指します。</target>
        </trans-unit>
        <trans-unit id="46873fd5ff052b8cbb9d6a8125368950d99d54a9" translate="yes" xml:space="preserve">
          <source>In words, a border is any (natural) index present in the table that is followed by an absent index (or zero, when index 1 is absent).</source>
          <target state="translated">言い換えれば、ボーダーとは、表の中に存在する(自然な)任意のインデックスで、インデックスが存在しない(インデックス1が存在しない場合はゼロ)インデックスの後に続くものです。</target>
        </trans-unit>
        <trans-unit id="da8e5fd662c079ec4e558198c08627aa99e4ddde" translate="yes" xml:space="preserve">
          <source>In words, if the argument &lt;code&gt;arg&lt;/code&gt; is nil or absent, the macro results in the default &lt;code&gt;dflt&lt;/code&gt;. Otherwise, it results in the result of calling &lt;code&gt;func&lt;/code&gt; with the state &lt;code&gt;L&lt;/code&gt; and the argument index &lt;code&gt;arg&lt;/code&gt; as arguments. Note that it evaluates the expression &lt;code&gt;dflt&lt;/code&gt; only if needed.</source>
          <target state="translated">つまり、引数 &lt;code&gt;arg&lt;/code&gt; がnilであるか存在しない場合、マクロはデフォルトの &lt;code&gt;dflt&lt;/code&gt; になります。それ以外の場合は、状態 &lt;code&gt;L&lt;/code&gt; と引数インデックス &lt;code&gt;arg&lt;/code&gt; を引数として &lt;code&gt;func&lt;/code&gt; を呼び出した結果になります。必要な場合にのみ式 &lt;code&gt;dflt&lt;/code&gt; を評価することに注意してください。</target>
        </trans-unit>
        <trans-unit id="1d61c65c4df032dfd4680710a9c5e29989e4f8c3" translate="yes" xml:space="preserve">
          <source>In words, if the argument &lt;code&gt;arg&lt;/code&gt; is nil or absent, the macro results in the default &lt;code&gt;dflt&lt;/code&gt;. Otherwise, it results in the result of calling &lt;code&gt;func&lt;/code&gt; with the state &lt;code&gt;L&lt;/code&gt; and the argument index &lt;code&gt;arg&lt;/code&gt; as parameters. Note that it evaluates the expression &lt;code&gt;dflt&lt;/code&gt; only if needed.</source>
          <target state="translated">つまり、引数 &lt;code&gt;arg&lt;/code&gt; がnilまたは存在しない場合、マクロはデフォルトの &lt;code&gt;dflt&lt;/code&gt; になります。それ以外の場合は、状態 &lt;code&gt;L&lt;/code&gt; と引数インデックス &lt;code&gt;arg&lt;/code&gt; をパラメーターとして指定して &lt;code&gt;func&lt;/code&gt; を呼び出した結果になります。必要な場合のみ式 &lt;code&gt;dflt&lt;/code&gt; を評価することに注意してください。</target>
        </trans-unit>
        <trans-unit id="01a07bfb5ef11a02986679665264fe04ed7927b3" translate="yes" xml:space="preserve">
          <source>Incremental Garbage Collection</source>
          <target state="translated">インクリメンタル・ガベージ・コレクション</target>
        </trans-unit>
        <trans-unit id="bea01033355ce358e0c79f805090383ef4dadccc" translate="yes" xml:space="preserve">
          <source>Initializes a buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). This function does not allocate any space; the buffer must be declared as a variable.</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; を初期化します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。この関数はスペースを割り当てません。バッファは変数として宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="67c7955edf181aeadc7e61f0904d3690ad3a91fb" translate="yes" xml:space="preserve">
          <source>Initializes a buffer &lt;code&gt;B&lt;/code&gt;. This function does not allocate any space; the buffer must be declared as a variable (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; を初期化します。この関数はスペースを割り当てません。バッファは変数として宣言する必要があります（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0abea9e11cfbbca6718360dab7feca24a7e28d57" translate="yes" xml:space="preserve">
          <source>Inserts element &lt;code&gt;value&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, shifting up the elements &lt;code&gt;list[pos], list[pos+1], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt;. The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list+1&lt;/code&gt;, so that a call &lt;code&gt;table.insert(t,x)&lt;/code&gt; inserts &lt;code&gt;x&lt;/code&gt; at the end of list &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; の位置 &lt;code&gt;pos&lt;/code&gt; に要素 &lt;code&gt;value&lt;/code&gt; を挿入し、要素を上にシフトします &lt;code&gt;list[pos], list[pos+1], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; 。デフォルト値 &lt;code&gt;pos&lt;/code&gt; ある &lt;code&gt;#list+1&lt;/code&gt; そう呼こと、 &lt;code&gt;table.insert(t,x)&lt;/code&gt; インサートが &lt;code&gt;x&lt;/code&gt; はリストの最後に &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="97337f3db6c1f37e6b68c3a033b725e785a46913" translate="yes" xml:space="preserve">
          <source>Inserts element &lt;code&gt;value&lt;/code&gt; at position &lt;code&gt;pos&lt;/code&gt; in &lt;code&gt;list&lt;/code&gt;, shifting up the elements &lt;code&gt;list[pos], list[pos+1], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt;. The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list+1&lt;/code&gt;, so that a call &lt;code&gt;table.insert(t,x)&lt;/code&gt; inserts &lt;code&gt;x&lt;/code&gt; at the end of the list &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 位置 &lt;code&gt;pos&lt;/code&gt; に要素 &lt;code&gt;value&lt;/code&gt; を挿入し、要素 &lt;code&gt;list[pos], list[pos+1], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; 。デフォルト値 &lt;code&gt;pos&lt;/code&gt; ある &lt;code&gt;#list+1&lt;/code&gt; そう呼こと、 &lt;code&gt;table.insert(t,x)&lt;/code&gt; インサートが &lt;code&gt;x&lt;/code&gt; はリストの最後に &lt;code&gt;t&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3151191ed07199be567c359ddf6e784a4e531a23" translate="yes" xml:space="preserve">
          <source>Inside a C function you can raise an error by calling &lt;a href=&quot;#lua_error&quot;&gt;&lt;code&gt;lua_error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C関数内では、&lt;a href=&quot;#lua_error&quot;&gt; &lt;code&gt;lua_error&lt;/code&gt; &lt;/a&gt;を呼び出してエラーを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="f7de63f7ebba7b4f1b63972998e3589e858efeb5" translate="yes" xml:space="preserve">
          <source>Inside a C function you can raise an error explicitly by calling &lt;a href=&quot;#lua_error&quot;&gt;&lt;code&gt;lua_error&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C関数内では、&lt;a href=&quot;#lua_error&quot;&gt; &lt;code&gt;lua_error&lt;/code&gt; &lt;/a&gt;を呼び出すことで明示的にエラーを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="85b166ec01ff2a0e99bcb49337529aa50cdf9ed8" translate="yes" xml:space="preserve">
          <source>Internally, Lua uses the C &lt;code&gt;longjmp&lt;/code&gt; facility to handle errors. (Lua will use exceptions if you compile it as C++; search for &lt;code&gt;LUAI_THROW&lt;/code&gt; in the source code for details.) When Lua faces any error (such as a memory allocation error or a type error) it &lt;em&gt;raises&lt;/em&gt; an error; that is, it does a long jump. A &lt;em&gt;protected environment&lt;/em&gt; uses &lt;code&gt;setjmp&lt;/code&gt; to set a recovery point; any error jumps to the most recent active recovery point.</source>
          <target state="translated">内部的には、LuaはC &lt;code&gt;longjmp&lt;/code&gt; 機能を使用してエラーを処理します。 （C ++としてコンパイルする場合、Luaは例外を使用します。詳細については、ソースコードで &lt;code&gt;LUAI_THROW&lt;/code&gt; を検索してください。）Luaでエラー（メモリ割り当てエラーや型エラーなど）が&lt;em&gt;発生&lt;/em&gt;すると、エラーが発生します。つまり、ロングジャンプします。&lt;em&gt;保護された環境の&lt;/em&gt;用途は &lt;code&gt;setjmp&lt;/code&gt; のリカバリポイントを設定します。エラーが発生すると、最新のアクティブなリカバリポイントにジャンプします。</target>
        </trans-unit>
        <trans-unit id="5b482879524a2f9c14e638942f5681b2d3a687a1" translate="yes" xml:space="preserve">
          <source>Internally, Lua uses the C &lt;code&gt;longjmp&lt;/code&gt; facility to handle errors. (Lua will use exceptions if you compile it as C++; search for &lt;code&gt;LUAI_THROW&lt;/code&gt; in the source code for details.) When Lua faces any error, such as a memory allocation error or a type error, it &lt;em&gt;raises&lt;/em&gt; an error; that is, it does a long jump. A &lt;em&gt;protected environment&lt;/em&gt; uses &lt;code&gt;setjmp&lt;/code&gt; to set a recovery point; any error jumps to the most recent active recovery point.</source>
          <target state="translated">内部的には、Luaは &lt;code&gt;longjmp&lt;/code&gt; 機能を使用してエラーを処理します。 （LuaはあなたがC ++としてコンパイルする場合、例外を使用する;を検索 &lt;code&gt;LUAI_THROW&lt;/code&gt; 。詳細はソースコード内）Luaは、このようなメモリ割り当てエラー又は型エラーとして、エラーに直面した場合、それが&lt;em&gt;提起&lt;/em&gt;エラー。つまり、走り幅跳びをします。&lt;em&gt;保護された環境の&lt;/em&gt;用途は &lt;code&gt;setjmp&lt;/code&gt; のリカバリポイントを設定します。エラーが発生すると、最新のアクティブなリカバリポイントにジャンプします。</target>
        </trans-unit>
        <trans-unit id="8519c30b2fe0a1d5b4b757f31a04911a4641884f" translate="yes" xml:space="preserve">
          <source>Internally, Lua uses the C &lt;code&gt;longjmp&lt;/code&gt; facility to yield a coroutine. Therefore, if a C function &lt;code&gt;foo&lt;/code&gt; calls an API function and this API function yields (directly or indirectly by calling another function that yields), Lua cannot return to &lt;code&gt;foo&lt;/code&gt; any more, because the &lt;code&gt;longjmp&lt;/code&gt; removes its frame from the C stack.</source>
          <target state="translated">内部的には、LuaはC &lt;code&gt;longjmp&lt;/code&gt; 機能を使用してコルーチンを生成します。したがって、C関数 &lt;code&gt;foo&lt;/code&gt; がAPI関数を呼び出し、このAPI関数が（直接または間接的に生成する別の関数を呼び出すことによって）生成する場合、 &lt;code&gt;longjmp&lt;/code&gt; はCスタックからフレームを削除するため、Luaは &lt;code&gt;foo&lt;/code&gt; に戻ることができません。</target>
        </trans-unit>
        <trans-unit id="7b4e8ed077aa1747843eb727cc8f6e4bfe8b0b8a" translate="yes" xml:space="preserve">
          <source>It can only be called from the main coroutine (thread);</source>
          <target state="translated">メインのコルーチン(スレッド)からのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ad02c3ff1e54045c9f87d15faf0f433734a4ee16" translate="yes" xml:space="preserve">
          <source>It cannot be called while handling a stack-overflow error;</source>
          <target state="translated">スタックオーバーフローエラーを処理している間は呼び出すことができません。</target>
        </trans-unit>
        <trans-unit id="ffa29374aa14b1802d3041c63b03777bfa3568ee" translate="yes" xml:space="preserve">
          <source>It is a good practice to add all needed metamethods to a table before setting it as a metatable of some object. In particular, the &lt;code&gt;__gc&lt;/code&gt; metamethod works only when this order is followed (see &lt;a href=&quot;#2.5.1&quot;&gt;&amp;sect;2.5.1&lt;/a&gt;).</source>
          <target state="translated">オブジェクトのメタテーブルとして設定する前に、必要なメタメソッドをすべてテーブルに追加することをお勧めします。特に、 &lt;code&gt;__gc&lt;/code&gt; メタメソッドがこの順に（参照続いている場合にのみ動作し&lt;a href=&quot;#2.5.1&quot;&gt;&amp;sect;2.5.1&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="2ea190191ffd1383568cdfab371917a78dd082eb" translate="yes" xml:space="preserve">
          <source>It is a good practice to add all needed metamethods to a table before setting it as a metatable of some object. In particular, the &lt;code&gt;__gc&lt;/code&gt; metamethod works only when this order is followed (see &lt;a href=&quot;#2.5.3&quot;&gt;&amp;sect;2.5.3&lt;/a&gt;). It is also a good practice to set the metatable of an object right after its creation.</source>
          <target state="translated">テーブルをオブジェクトのメタテーブルとして設定する前に、必要なすべてのメタメソッドをテーブルに追加することをお勧めします。特に、 &lt;code&gt;__gc&lt;/code&gt; メタメソッドがこの順に（参照続いている場合にのみ動作し&lt;a href=&quot;#2.5.3&quot;&gt;&amp;sect;2.5.3&lt;/a&gt;）。オブジェクトの作成直後にメタテーブルを設定することもお勧めします。</target>
        </trans-unit>
        <trans-unit id="1db3cf420aeec740d5b98f3c2218fb5a839f1cb0" translate="yes" xml:space="preserve">
          <source>It is implemented as a macro. The array &lt;code&gt;l&lt;/code&gt; must be the actual array, not a pointer to it.</source>
          <target state="translated">マクロとして実装されています。配列 &lt;code&gt;l&lt;/code&gt; は、それを指すポインターではなく、実際の配列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="c9afa0ea65ace9886d214c45b938bb7c94f5de0d" translate="yes" xml:space="preserve">
          <source>It is implemented as the following macro:</source>
          <target state="translated">以下のマクロとして実装されています。</target>
        </trans-unit>
        <trans-unit id="783b6db8dfbf8f740fac86413ecee3fd449cddff" translate="yes" xml:space="preserve">
          <source>It is safe to load malformed binary chunks; &lt;code&gt;load&lt;/code&gt; signals an appropriate error. However, Lua does not check the consistency of the code inside binary chunks; running maliciously crafted bytecode can crash the interpreter.</source>
          <target state="translated">不正な形式のバイナリチャンクをロードしても安全です。 &lt;code&gt;load&lt;/code&gt; は適切なエラーを通知します。ただし、Luaはバイナリチャンク内のコードの整合性をチェックしません。悪意を持って作成されたバイトコードを実行すると、インタープリターがクラッシュする可能性があります。</target>
        </trans-unit>
        <trans-unit id="190f1a01da6183ca61829ab46d875cc8475bbf31" translate="yes" xml:space="preserve">
          <source>It returns &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; if there are no errors, or an error code in case of errors (see &lt;a href=&quot;#4.4.1&quot;&gt;&amp;sect;4.4.1&lt;/a&gt;).</source>
          <target state="translated">エラーがない場合は&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; を&lt;/a&gt;返し、エラーがある場合はエラーコードを返します（&lt;a href=&quot;#4.4.1&quot;&gt;&amp;sect;4.4.1を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2562ec974531de3f4ff5f92b1e35fb5384a96e25" translate="yes" xml:space="preserve">
          <source>It returns false if there are no errors or true in case of errors.</source>
          <target state="translated">エラーがなければfalseを返し、エラーの場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="53569202de7b24893f55608fc3a251509d5c5ed1" translate="yes" xml:space="preserve">
          <source>Labels and empty statements are called &lt;em&gt;void statements&lt;/em&gt;, as they perform no actions.</source>
          <target state="translated">ラベルと空のステートメントはアクションを実行しないため、&lt;em&gt;voidステートメント&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="89b86ab0e66f527166d98df92ddbcf5416ed58f6" translate="yes" xml:space="preserve">
          <source>Language</source>
          <target state="translated">Language</target>
        </trans-unit>
        <trans-unit id="34328aff9c833379f4f7362578f7f6f3c35f336b" translate="yes" xml:space="preserve">
          <source>Language constructs will be explained using the usual extended BNF notation, in which {&lt;em&gt;a&lt;/em&gt;} means 0 or more &lt;em&gt;a&lt;/em&gt;'s, and [&lt;em&gt;a&lt;/em&gt;] means an optional &lt;em&gt;a&lt;/em&gt;. Non-terminals are shown like non-terminal, keywords are shown like &lt;b&gt;kword&lt;/b&gt;, and other terminal symbols are shown like &amp;lsquo;&lt;b&gt;=&lt;/b&gt;&amp;rsquo;. The complete syntax of Lua can be found in &lt;a href=&quot;#9&quot;&gt;&amp;sect;9&lt;/a&gt; at the end of this manual.</source>
          <target state="translated">言語構造は、通常の拡張BNF表記を使用して説明されます。ここで、{ &lt;em&gt;a&lt;/em&gt; }は0個以上の&lt;em&gt;aを&lt;/em&gt;意味し、[ &lt;em&gt;a&lt;/em&gt; ]はオプションの&lt;em&gt;aを&lt;/em&gt;意味します。&lt;b&gt;非終端&lt;/b&gt;記号は非終端記号のように表示され、キーワードは&lt;b&gt;kwordの&lt;/b&gt;ように表示され、その他の終端記号は「&lt;b&gt;=&lt;/b&gt;」のように表示されます。Luaの完全な構文は、このマニュアルの最後にある&lt;a href=&quot;#9&quot;&gt;&amp;sect;9&lt;/a&gt;にあります。</target>
        </trans-unit>
        <trans-unit id="b15777583b377cc227a5505487783a1d631969a6" translate="yes" xml:space="preserve">
          <source>Leaves a copy of the module on the stack.</source>
          <target state="translated">スタック上にモジュールのコピーを残します。</target>
        </trans-unit>
        <trans-unit id="c282589ab5afc326acf6f1bd9d84cafcef993944" translate="yes" xml:space="preserve">
          <source>Level 0 is the running function, level 1 is the function that called the running function, etc.</source>
          <target state="translated">レベル0はランニング関数、レベル1はランニング関数を呼び出した関数などです。</target>
        </trans-unit>
        <trans-unit id="bd2f93f70d8b01be186bad25b37a58b9b3ce91ea" translate="yes" xml:space="preserve">
          <source>Lexical Conventions</source>
          <target state="translated">語彙規則</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MITライセンスに基づいてライセンスされています。</target>
        </trans-unit>
        <trans-unit id="63d6bf8afb548c458acc9de58d99159419a5b08e" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; function also creates a coroutine, but instead of returning the coroutine itself, it returns a function that, when called, resumes the coroutine. Any arguments passed to this function go as extra arguments to &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; returns all the values returned by &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, except the first one (the boolean error code). Unlike &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; does not catch errors; any error is propagated to the caller.</source>
          <target state="translated">&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;関数もコルーチンを作成しますが、コルーチン自体を返すのではなく、呼び出されたときにコルーチンを再開する関数を返します。この関数に渡される引数は、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;への追加の引数として渡されます。&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;は、最初の値（ブールエラーコード）を除いて、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;によって返されるすべての値を返します。&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;はエラーをキャッチしません。エラーは呼び出し元に伝搬されます。</target>
        </trans-unit>
        <trans-unit id="9f39f04881560be91c1cf898317730aebddff532" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; function also creates a coroutine, but instead of returning the coroutine itself, it returns a function that, when called, resumes the coroutine. Any arguments passed to this function go as extra arguments to &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; returns all the values returned by &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, except the first one (the boolean error code). Unlike &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, the function created by &lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt;&lt;code&gt;coroutine.wrap&lt;/code&gt;&lt;/a&gt; propagates any error to the caller. In this case, the function also closes the coroutine (see &lt;a href=&quot;#pdf-coroutine.close&quot;&gt;&lt;code&gt;coroutine.close&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; &lt;/a&gt;と同様に、&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;関数もコルーチンを作成しますが、コルーチン自体を返す代わりに、呼び出されたときにコルーチンを再開する関数を返します。この関数に渡される引数はすべて、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;への追加の引数として使用されます。&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; &lt;/a&gt;は、最初の値（ブールエラーコード）を除いて、&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;によって返されるすべての値を返します。異なり&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;、によって作成された関数&lt;a href=&quot;#pdf-coroutine.wrap&quot;&gt; &lt;code&gt;coroutine.wrap&lt;/code&gt; は、&lt;/a&gt;呼び出し元にエラーを伝播します。この場合、関数はコルーチンも閉じます（&lt;a href=&quot;#pdf-coroutine.close&quot;&gt; &lt;code&gt;coroutine.close&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="589bb9a9b2f8417c5c99beaf7b463ed9bff7b7a8" translate="yes" xml:space="preserve">
          <source>Like any other reference manual, this document is dry in places. For a discussion of the decisions behind the design of Lua, see the technical papers available at Lua's web site. For a detailed introduction to programming in Lua, see Roberto's book, &lt;em&gt;Programming in Lua&lt;/em&gt;.</source>
          <target state="translated">他のリファレンスマニュアルと同じように、このドキュメントは乾燥しています。Luaの設計の背後にある決定の議論については、LuaのWebサイトで入手可能な技術文書を参照してください。Luaでのプログラミングの詳細については、Robertoの著書 『&lt;em&gt;Programming in Lua&lt;/em&gt;』を参照してください。</target>
        </trans-unit>
        <trans-unit id="0685b0afda8aac522f92e3eb98e6860f9fdecb1c" translate="yes" xml:space="preserve">
          <source>Like indices, the values of table fields can be of any type. In particular, because functions are first-class values, table fields can contain functions. Thus tables can also carry &lt;em&gt;methods&lt;/em&gt; (see &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;).</source>
          <target state="translated">インデックスと同様に、テーブルフィールドの値はどのタイプでもかまいません。特に、関数はファーストクラスの値であるため、テーブルフィールドに関数を含めることができます。したがって、テーブルは&lt;em&gt;メソッドを&lt;/em&gt;運ぶこともでき&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8afe6c1d451218575629deb4965cb995c2e958ea" translate="yes" xml:space="preserve">
          <source>Like with indexing, the metamethod for this event can be either a function or a table. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt; as arguments. If it is a table, Lua does an indexing assignment to this table with the same key and value. (This assignment is regular, not raw, and therefore can trigger another metamethod.)</source>
          <target state="translated">インデックス作成の場合と同様に、このイベントのメタメソッドは関数またはテーブルのいずれかです。関数の場合は、 &lt;code&gt;table&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、および &lt;code&gt;value&lt;/code&gt; を引数として呼び出されます。テーブルの場合、Luaは同じキーと値を使用してこのテーブルにインデックス割り当てを行います。 （この割り当ては生ではなく定期的であるため、別のメタメソッドをトリガーできます。）</target>
        </trans-unit>
        <trans-unit id="b37120a70be7b7e2fa099662ff64ecef444b9310" translate="yes" xml:space="preserve">
          <source>Like with indexing, the metavalue for this event can be either a function, a table, or any value with an &lt;code&gt;__newindex&lt;/code&gt; metavalue. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt; as arguments. Otherwise, Lua repeats the indexing assignment over this metavalue with the same key and value. This assignment is regular, not raw, and therefore can trigger another &lt;code&gt;__newindex&lt;/code&gt; metavalue.</source>
          <target state="translated">インデックス作成と同様に、このイベントの &lt;code&gt;__newindex&lt;/code&gt; 値は、関数、テーブル、または__newindexメタ値を持つ任意の値のいずれかになります。関数の場合は、 &lt;code&gt;table&lt;/code&gt; 、 &lt;code&gt;key&lt;/code&gt; 、 &lt;code&gt;value&lt;/code&gt; を引数として呼び出されます。それ以外の場合、Luaは、同じキーと値を使用して、このメタ値に対してインデックスの割り当てを繰り返します。この割り当ては定期的であり、生ではないため、別の &lt;code&gt;__newindex&lt;/code&gt; メタ値をトリガーできます。</target>
        </trans-unit>
        <trans-unit id="86fb0e6b085882445de9a7a2409c78eb9059df37" translate="yes" xml:space="preserve">
          <source>Literal decimal integer constants that overflow are read as floats, instead of wrapping around. You can use hexadecimal notation for such constants if you want the old behavior (reading them as integers with wrap around).</source>
          <target state="translated">オーバーフローするリテラル 10 進整数定数は、回り込みではなくフロートとして読み込まれます。以前の動作 (回り込みをして整数として読み込む)をしたい場合は、このような定数に 16 進数表記を使用することができます。</target>
        </trans-unit>
        <trans-unit id="5cf4bcbf4e9a4c997d9f25e1a4ebd39ad823de69" translate="yes" xml:space="preserve">
          <source>Literal strings can also be defined using a long format enclosed by &lt;em&gt;long brackets&lt;/em&gt;. We define an &lt;em&gt;opening long bracket of level &lt;em&gt;n&lt;/em&gt;&lt;/em&gt; as an opening square bracket followed by &lt;em&gt;n&lt;/em&gt; equal signs followed by another opening square bracket. So, an opening long bracket of level 0 is written as &lt;code&gt;[[&lt;/code&gt;, an opening long bracket of level 1 is written as &lt;code&gt;[=[&lt;/code&gt;, and so on. A &lt;em&gt;closing long bracket&lt;/em&gt; is defined similarly; for instance, a closing long bracket of level 4 is written as &lt;code&gt;]====]&lt;/code&gt;. A &lt;em&gt;long literal&lt;/em&gt; starts with an opening long bracket of any level and ends at the first closing long bracket of the same level. It can contain any text except a closing bracket of the same level. Literals in this bracketed form can run for several lines, do not interpret any escape sequences, and ignore long brackets of any other level. Any kind of end-of-line sequence (carriage return, newline, carriage return followed by newline, or newline followed by carriage return) is converted to a simple newline.</source>
          <target state="translated">リテラル文字列は、&lt;em&gt;長い角かっこで&lt;/em&gt;囲まれた長い形式を使用して定義することもでき&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;レベル&lt;em&gt;nの&lt;/em&gt;&lt;/em&gt;&lt;em&gt;開始の長いブラケットを&lt;/em&gt;、開始の角括弧、それに続く&lt;em&gt;nの&lt;/em&gt;等号、それに続く別の開始の角括弧として定義します。したがって、レベル0の開始長括弧は &lt;code&gt;[[&lt;/code&gt; として記述され、レベル1の開始長括弧は &lt;code&gt;[=[&lt;/code&gt; として記述され、以下同様です。&lt;em&gt;閉鎖長いブラケットは&lt;/em&gt;同様に定義されます。たとえば、レベル4の閉じ長いブラケットは &lt;code&gt;]====]&lt;/code&gt; と記述されます。&lt;em&gt;長いリテラル&lt;/em&gt;任意のレベルの開始ロングブラケットで始まり、同じレベルの最初の終了ロングブラケットで終了します。同じレベルの閉じ括弧以外の任意のテキストを含めることができます。この括弧で囲まれた形式のリテラルは、複数行にわたって実行でき、エスケープシーケンスを解釈せず、他のレベルの長い括弧を無視します。すべての種類の行末シーケンス（復帰、改行、復帰とそれに続く改行、または復帰とそれに続く復帰）は、単純な改行に変換されます。</target>
        </trans-unit>
        <trans-unit id="7806930c3347438897b185e0ff1d0adc3021f8d3" translate="yes" xml:space="preserve">
          <source>Literal strings can also be defined using a long format enclosed by &lt;em&gt;long brackets&lt;/em&gt;. We define an &lt;em&gt;opening long bracket of level &lt;em&gt;n&lt;/em&gt;&lt;/em&gt; as an opening square bracket followed by &lt;em&gt;n&lt;/em&gt; equal signs followed by another opening square bracket. So, an opening long bracket of level 0 is written as &lt;code&gt;[[&lt;/code&gt;, an opening long bracket of level 1 is written as &lt;code&gt;[=[&lt;/code&gt;, and so on. A &lt;em&gt;closing long bracket&lt;/em&gt; is defined similarly; for instance, a closing long bracket of level 4 is written as &lt;code&gt;]====]&lt;/code&gt;. A &lt;em&gt;long literal&lt;/em&gt; starts with an opening long bracket of any level and ends at the first closing long bracket of the same level. It can contain any text except a closing bracket of the same level. Literals in this bracketed form can run for several lines, do not interpret any escape sequences, and ignore long brackets of any other level. Any kind of end-of-line sequence (carriage return, newline, carriage return followed by newline, or newline followed by carriage return) is converted to a simple newline. When the opening long bracket is immediately followed by a newline, the newline is not included in the string.</source>
          <target state="translated">リテラル文字列は、&lt;em&gt;長い角かっこで&lt;/em&gt;囲まれた長い形式を使用して定義することもでき&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;レベル&lt;em&gt;nの&lt;/em&gt;&lt;/em&gt;&lt;em&gt;開始長括弧を&lt;/em&gt;、開始角括弧、&lt;em&gt;n個の&lt;/em&gt;等号、別の開始角括弧として定義します。したがって、レベル0の開始長括弧は &lt;code&gt;[[&lt;/code&gt; ]と記述され、レベル1の開始長括弧は &lt;code&gt;[=[&lt;/code&gt; と記述されます。&lt;em&gt;閉鎖長いブラケットは&lt;/em&gt;同様に定義されます。たとえば、レベル4の閉じ角かっこは &lt;code&gt;]====]&lt;/code&gt; と記述されます。&lt;em&gt;長いリテラル&lt;/em&gt;任意のレベルの開始長いブラケットで始まり、同じレベルの最初の終了長いブラケットで終わります。同じレベルの閉じ括弧を除く任意のテキストを含めることができます。この括弧で囲まれた形式のリテラルは、数行実行でき、エスケープシーケンスを解釈せず、他のレベルの長い括弧を無視します。あらゆる種類の行末シーケンス（キャリッジリターン、ニューライン、キャリッジリターンの後にニューライン、またはニューラインの後にキャリッジリターン）が単純なニューラインに変換されます。開始の長い角かっこの直後に改行が続く場合、改行は文字列に含まれません。</target>
        </trans-unit>
        <trans-unit id="e1021ae8c4b84ca4a4e3486abedfb8d10587c094" translate="yes" xml:space="preserve">
          <source>Loads a Lua chunk without running it. If there are no errors, &lt;code&gt;lua_load&lt;/code&gt; pushes the compiled chunk as a Lua function on top of the stack. Otherwise, it pushes an error message.</source>
          <target state="translated">実行せずにLuaチャンクをロードします。エラーがない場合、 &lt;code&gt;lua_load&lt;/code&gt; はコンパイルされたチャンクをスタックの最上位のLua関数としてプッシュします。それ以外の場合は、エラーメッセージをプッシュします。</target>
        </trans-unit>
        <trans-unit id="d5d5fd2502388f4bdbfdc40480095cb9940c91fb" translate="yes" xml:space="preserve">
          <source>Loads a buffer as a Lua chunk. This function uses &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; to load the chunk in the buffer pointed to by &lt;code&gt;buff&lt;/code&gt; with size &lt;code&gt;sz&lt;/code&gt;.</source>
          <target state="translated">バッファをLuaチャンクとしてロードします。この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;を使用して、サイズが &lt;code&gt;sz&lt;/code&gt; の &lt;code&gt;buff&lt;/code&gt; が指すバッファーにチャンクをロードします。</target>
        </trans-unit>
        <trans-unit id="014ceb5ba979a3f7460e80adaf03760442d4492f" translate="yes" xml:space="preserve">
          <source>Loads a chunk.</source>
          <target state="translated">チャンクを積む。</target>
        </trans-unit>
        <trans-unit id="8dd06506aefef93d24f715ed25819bedec96323c" translate="yes" xml:space="preserve">
          <source>Loads a file as a Lua chunk. This function uses &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; to load the chunk in the file named &lt;code&gt;filename&lt;/code&gt;. If &lt;code&gt;filename&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, then it loads from the standard input. The first line in the file is ignored if it starts with a &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">ファイルをLuaチャンクとしてロードします。この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;を使用して、 &lt;code&gt;filename&lt;/code&gt; という名前のファイルにチャンクをロードします。 &lt;code&gt;filename&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; の場合、標準入力からロードされます。 &lt;code&gt;#&lt;/code&gt; で始まる場合、ファイルの最初の行は無視されます。</target>
        </trans-unit>
        <trans-unit id="f640ebe64a89ecb5b9bd56467fcc7e3fb5298535" translate="yes" xml:space="preserve">
          <source>Loads a string as a Lua chunk. This function uses &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; to load the chunk in the zero-terminated string &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">文字列をLuaチャンクとしてロードします。この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;を使用して、ゼロで終了する文字列 &lt;code&gt;s&lt;/code&gt; にチャンクをロードします。</target>
        </trans-unit>
        <trans-unit id="601f4f126ff0dc3c88078602ece1575bc60b38da" translate="yes" xml:space="preserve">
          <source>Loads and runs the given file. It is defined as the following macro:</source>
          <target state="translated">与えられたファイルをロードして実行します。以下のマクロで定義されています。</target>
        </trans-unit>
        <trans-unit id="41daddb6c30d8daa7aa997ef002e9682aa252572" translate="yes" xml:space="preserve">
          <source>Loads and runs the given string. It is defined as the following macro:</source>
          <target state="translated">与えられた文字列をロードして実行します。以下のマクロとして定義されています。</target>
        </trans-unit>
        <trans-unit id="07953018574342518cc4ef6ce0bb634e54cd3232" translate="yes" xml:space="preserve">
          <source>Loads the given module. The function starts by looking into the &lt;a href=&quot;#pdf-package.loaded&quot;&gt;&lt;code&gt;package.loaded&lt;/code&gt;&lt;/a&gt; table to determine whether &lt;code&gt;modname&lt;/code&gt; is already loaded. If it is, then &lt;code&gt;require&lt;/code&gt; returns the value stored at &lt;code&gt;package.loaded[modname]&lt;/code&gt;. (The absence of a second result in this case signals that this call did not have to load the module.) Otherwise, it tries to find a &lt;em&gt;loader&lt;/em&gt; for the module.</source>
          <target state="translated">指定されたモジュールをロードします。この関数は、&lt;a href=&quot;#pdf-package.loaded&quot;&gt; &lt;code&gt;package.loaded&lt;/code&gt; &lt;/a&gt;テーブルを調べて、 &lt;code&gt;modname&lt;/code&gt; がすでにロードされているかどうかを判断することから始まります。そうである場合、 &lt;code&gt;require&lt;/code&gt; は &lt;code&gt;package.loaded[modname]&lt;/code&gt; 格納されている値を返します。 （この場合、2番目の結果がないことは、この呼び出しがモジュールをロードする必要がなかったことを示します。）それ以外の場合は、モジュールの&lt;em&gt;ローダー&lt;/em&gt;を見つけようとします。</target>
        </trans-unit>
        <trans-unit id="5754e2c7cbb7348e49d26f5b052dec66fe41474e" translate="yes" xml:space="preserve">
          <source>Loads the given module. The function starts by looking into the &lt;a href=&quot;#pdf-package.loaded&quot;&gt;&lt;code&gt;package.loaded&lt;/code&gt;&lt;/a&gt; table to determine whether &lt;code&gt;modname&lt;/code&gt; is already loaded. If it is, then &lt;code&gt;require&lt;/code&gt; returns the value stored at &lt;code&gt;package.loaded[modname]&lt;/code&gt;. Otherwise, it tries to find a &lt;em&gt;loader&lt;/em&gt; for the module.</source>
          <target state="translated">指定されたモジュールをロードします。関数はまず、&lt;a href=&quot;#pdf-package.loaded&quot;&gt; &lt;code&gt;package.loaded&lt;/code&gt; &lt;/a&gt;テーブルを調べて、 &lt;code&gt;modname&lt;/code&gt; がすでにロードされているかどうかを判別します。そうであれば、 &lt;code&gt;require&lt;/code&gt; は &lt;code&gt;package.loaded[modname]&lt;/code&gt; 保存されている値を返します。それ以外の場合は、モジュールの&lt;em&gt;ローダー&lt;/em&gt;を見つけようとします。</target>
        </trans-unit>
        <trans-unit id="675ad816883ad3050b77c4af165af0c382872da3" translate="yes" xml:space="preserve">
          <source>Local Declarations</source>
          <target state="translated">ローカル宣言</target>
        </trans-unit>
        <trans-unit id="e74ccb9aead3e3f9b1bc796bf321e14c551c0f2e" translate="yes" xml:space="preserve">
          <source>Local variables can be declared anywhere inside a block. The declaration can include an initial assignment:</source>
          <target state="translated">ローカル変数はブロック内のどこでも宣言できます。宣言には初期代入を含めることができます。</target>
        </trans-unit>
        <trans-unit id="c10d9e4965c7bd64f801ff5a335aa4dea4e1bdf4" translate="yes" xml:space="preserve">
          <source>Local variables can be declared anywhere inside a block. The declaration can include an initialization:</source>
          <target state="translated">ローカル変数はブロック内のどこでも宣言できます。宣言には初期化を含めることができます。</target>
        </trans-unit>
        <trans-unit id="65eac6118ebdd55aa38b41f70efdf532e567ffd8" translate="yes" xml:space="preserve">
          <source>Logical Operators</source>
          <target state="translated">論理演算子</target>
        </trans-unit>
        <trans-unit id="f3c2c12151d04fbe64aef12442234645ff418818" translate="yes" xml:space="preserve">
          <source>Looks for the first &lt;em&gt;match&lt;/em&gt; of &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) in the string &lt;code&gt;s&lt;/code&gt;. If it finds one, then &lt;code&gt;match&lt;/code&gt; returns the captures from the pattern; otherwise it returns &lt;b&gt;nil&lt;/b&gt;. If &lt;code&gt;pattern&lt;/code&gt; specifies no captures, then the whole match is returned. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; で &lt;code&gt;pattern&lt;/code&gt; の最初の&lt;em&gt;一致&lt;/em&gt;（&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）を検索します。見つかった場合、 &lt;code&gt;match&lt;/code&gt; はパターンからのキャプチャを返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。 &lt;code&gt;pattern&lt;/code&gt; がキャプチャを指定しない場合、一致全体が返されます。 3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値も可能です。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="8c9988ddc14961cb0c52bb6cea07ce6c02324d47" translate="yes" xml:space="preserve">
          <source>Looks for the first &lt;em&gt;match&lt;/em&gt; of the &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) in the string &lt;code&gt;s&lt;/code&gt;. If it finds one, then &lt;code&gt;match&lt;/code&gt; returns the captures from the pattern; otherwise it returns &lt;b&gt;fail&lt;/b&gt;. If &lt;code&gt;pattern&lt;/code&gt; specifies no captures, then the whole match is returned. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; で &lt;code&gt;pattern&lt;/code&gt; 最初の&lt;em&gt;一致&lt;/em&gt;を&lt;a href=&quot;#6.4.1&quot;&gt;探し&lt;/a&gt;ます（&amp;sect;6.4.1を参照）。見つかった場合、 &lt;code&gt;match&lt;/code&gt; はパターンからのキャプチャを返します。それ以外の場合は&lt;b&gt;失敗を&lt;/b&gt;返します。 &lt;code&gt;pattern&lt;/code&gt; がキャプチャを指定しない場合、一致全体が返されます。 3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値にすることができます。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ac72aba64827a6df2b943b8e5302e4719c3c812b" translate="yes" xml:space="preserve">
          <source>Looks for the first match of &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) in the string &lt;code&gt;s&lt;/code&gt;. If it finds a match, then &lt;code&gt;find&lt;/code&gt; returns the indices of &lt;code&gt;s&lt;/code&gt; where this occurrence starts and ends; otherwise, it returns &lt;b&gt;fail&lt;/b&gt;. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative. A value of &lt;b&gt;true&lt;/b&gt; as a fourth, optional argument &lt;code&gt;plain&lt;/code&gt; turns off the pattern matching facilities, so the function does a plain &quot;find substring&quot; operation, with no characters in &lt;code&gt;pattern&lt;/code&gt; being considered magic.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; で &lt;code&gt;pattern&lt;/code&gt; の最初の一致（&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）を探します。一致するものが見つかった場合、 &lt;code&gt;find&lt;/code&gt; は、このオカレンスが開始および終了する &lt;code&gt;s&lt;/code&gt; のインデックスを返します。それ以外の場合は、&lt;b&gt;failを&lt;/b&gt;返します。 3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値にすることができます。4番目のオプションの引数 &lt;code&gt;plain&lt;/code&gt; として&lt;b&gt;true&lt;/b&gt;の値を指定すると、パターンマッチング機能がオフになるため、関数は単純な「部分文字列の検索」操作を実行し、 &lt;code&gt;pattern&lt;/code&gt; 内の文字は魔法とは見なされません。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="0531dd8559629f728382a45e8fa0141160f819b2" translate="yes" xml:space="preserve">
          <source>Looks for the first match of &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) in the string &lt;code&gt;s&lt;/code&gt;. If it finds a match, then &lt;code&gt;find&lt;/code&gt; returns the indices of &lt;code&gt;s&lt;/code&gt; where this occurrence starts and ends; otherwise, it returns &lt;b&gt;nil&lt;/b&gt;. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative. A value of &lt;b&gt;true&lt;/b&gt; as a fourth, optional argument &lt;code&gt;plain&lt;/code&gt; turns off the pattern matching facilities, so the function does a plain &quot;find substring&quot; operation, with no characters in &lt;code&gt;pattern&lt;/code&gt; being considered magic. Note that if &lt;code&gt;plain&lt;/code&gt; is given, then &lt;code&gt;init&lt;/code&gt; must be given as well.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; で &lt;code&gt;pattern&lt;/code&gt; の最初の一致（&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）を検索します。一致が見つかると、 &lt;code&gt;find&lt;/code&gt; は、このオカレンスが開始および終了する &lt;code&gt;s&lt;/code&gt; のインデックスを返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。 3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値も可能です。4番目のオプションの引数 &lt;code&gt;plain&lt;/code&gt; として値&lt;b&gt;true&lt;/b&gt;を指定すると、パターンマッチング機能が無効になるため、関数は単純な「サブストリングを見つける」操作を実行し、 &lt;code&gt;pattern&lt;/code&gt; 内の文字はマジックと見なされません。なお、場合 &lt;code&gt;plain&lt;/code&gt; 、その後、与えられています&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt; &lt;code&gt;init&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0832074630eb731d7fbe8074de48a90cd9bb220" translate="yes" xml:space="preserve">
          <source>Lua</source>
          <target state="translated">Lua</target>
        </trans-unit>
        <trans-unit id="74935e355c6d4299b6901e869daba41fae3ae4f2" translate="yes" xml:space="preserve">
          <source>Lua 5.3 Reference Manual</source>
          <target state="translated">Lua 5.3 リファレンスマニュアル</target>
        </trans-unit>
        <trans-unit id="1c9ec46a65315e465f99f9adf0e3977cea4a15cf" translate="yes" xml:space="preserve">
          <source>Lua 5.4 Reference Manual</source>
          <target state="translated">Lua 5.4 リファレンスマニュアル</target>
        </trans-unit>
        <trans-unit id="e8957a41e15b0eb53aad63ef201700fe8063f094" translate="yes" xml:space="preserve">
          <source>Lua allows multiple assignments. Therefore, the syntax for assignment defines a list of variables on the left side and a list of expressions on the right side. The elements in both lists are separated by commas:</source>
          <target state="translated">Luaでは複数の代入が可能です。そのため、代入の構文では、左側に変数のリスト、右側に式のリストを定義します。両リストの要素はカンマで区切られています。</target>
        </trans-unit>
        <trans-unit id="1e02808cd690aaf7df864db5c4c452af196be013" translate="yes" xml:space="preserve">
          <source>Lua also converts strings to numbers, whenever a number is expected.</source>
          <target state="translated">また、Luaでは文字列を数字に変換することもできます。</target>
        </trans-unit>
        <trans-unit id="93377de262ae6c56472bd1d07591e21435ec1e52" translate="yes" xml:space="preserve">
          <source>Lua also defines the constants &lt;a id=&quot;pdf-LUA_MININTEGER&quot;&gt;&lt;code&gt;LUA_MININTEGER&lt;/code&gt;&lt;/a&gt; and &lt;a id=&quot;pdf-LUA_MAXINTEGER&quot;&gt;&lt;code&gt;LUA_MAXINTEGER&lt;/code&gt;&lt;/a&gt;, with the minimum and the maximum values that fit in this type.</source>
          <target state="translated">Luaは定数&lt;a id=&quot;pdf-LUA_MININTEGER&quot;&gt; &lt;code&gt;LUA_MININTEGER&lt;/code&gt; &lt;/a&gt;および&lt;a id=&quot;pdf-LUA_MAXINTEGER&quot;&gt; &lt;code&gt;LUA_MAXINTEGER&lt;/code&gt; &lt;/a&gt;も定義し、この型に適合する最小値と最大値を使用します。</target>
        </trans-unit>
        <trans-unit id="801090e92a322f968636387436cbfb91aa33b154" translate="yes" xml:space="preserve">
          <source>Lua also has a &lt;b&gt;for&lt;/b&gt; statement, in two flavors (see &lt;a href=&quot;#3.3.5&quot;&gt;&amp;sect;3.3.5&lt;/a&gt;).</source>
          <target state="translated">Luaには、2つの種類の&lt;b&gt;for&lt;/b&gt;ステートメントもあります（&lt;a href=&quot;#3.3.5&quot;&gt;&amp;sect;3.3.5を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b8bd17007ccbbeb2e48374787c45da4db96657dd" translate="yes" xml:space="preserve">
          <source>Lua also offers a system of &lt;em&gt;warnings&lt;/em&gt; (see &lt;a href=&quot;#pdf-warn&quot;&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/a&gt;). Unlike errors, warnings do not interfere in any way with program execution. They typically only generate a message to the user, although this behavior can be adapted from C (see &lt;a href=&quot;#lua_setwarnf&quot;&gt;&lt;code&gt;lua_setwarnf&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Luaは&lt;em&gt;警告&lt;/em&gt;システムも提供してい&lt;em&gt;ます&lt;/em&gt;（&lt;a href=&quot;#pdf-warn&quot;&gt; &lt;code&gt;warn&lt;/code&gt; を&lt;/a&gt;参照）。エラーとは異なり、警告はプログラムの実行を妨げることはありません。これらは通常、ユーザーへのメッセージのみを生成しますが、この動作はCから適応できます（&lt;a href=&quot;#lua_setwarnf&quot;&gt; &lt;code&gt;lua_setwarnf&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3da908593ea7c1cd8a16b5d87a2733072f9be916" translate="yes" xml:space="preserve">
          <source>Lua assumes the following behavior from the allocator function:</source>
          <target state="translated">Luaでは、アロケータ関数から以下のような動作を想定しています。</target>
        </trans-unit>
        <trans-unit id="ebffede5db745b98cdaa093a245240704c9e96b1" translate="yes" xml:space="preserve">
          <source>Lua can call (and manipulate) functions written in Lua and functions written in C (see &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;). Both are represented by the type &lt;em&gt;function&lt;/em&gt;.</source>
          <target state="translated">Luaは、Luaで記述された関数とCで記述された関数を呼び出す（および操​​作する）ことができます（&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10を&lt;/a&gt;参照）。どちらもtype &lt;em&gt;関数で&lt;/em&gt;表され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="95c6862384367c489829b9fcf5d130d494969aa1" translate="yes" xml:space="preserve">
          <source>Lua code can explicitly generate an error by calling the &lt;a href=&quot;#pdf-error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; function. If you need to catch errors in Lua, you can use &lt;a href=&quot;#pdf-pcall&quot;&gt;&lt;code&gt;pcall&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pdf-xpcall&quot;&gt;&lt;code&gt;xpcall&lt;/code&gt;&lt;/a&gt; to call a given function in &lt;em&gt;protected mode&lt;/em&gt;.</source>
          <target state="translated">Luaコードは、&lt;a href=&quot;#pdf-error&quot;&gt; &lt;code&gt;error&lt;/code&gt; &lt;/a&gt;関数を呼び出すことにより、明示的にエラーを生成できます。Luaでエラーをキャッチする必要がある場合は、&lt;a href=&quot;#pdf-pcall&quot;&gt; &lt;code&gt;pcall&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pdf-xpcall&quot;&gt; &lt;code&gt;xpcall&lt;/code&gt; &lt;/a&gt;を使用して、&lt;em&gt;プロテクトモードで&lt;/em&gt;特定の関数を呼び出すことができ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1dc01b0813afb0e9f0eaf4570d6c6a76184553b6" translate="yes" xml:space="preserve">
          <source>Lua code can explicitly raise an error by calling the &lt;a href=&quot;#pdf-error&quot;&gt;&lt;code&gt;error&lt;/code&gt;&lt;/a&gt; function. (This function never returns.)</source>
          <target state="translated">Luaコードは、&lt;a href=&quot;#pdf-error&quot;&gt; &lt;code&gt;error&lt;/code&gt; &lt;/a&gt;関数を呼び出すことで明示的にエラーを発生させることができます。（この関数は決して戻りません。）</target>
        </trans-unit>
        <trans-unit id="1864a075a2790c597421da62110c2e5ddf9a0670" translate="yes" xml:space="preserve">
          <source>Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with a generational garbage collection, making it ideal for configuration, scripting, and rapid prototyping.</source>
          <target state="translated">Luaはシンプルな手続き型構文と、連想配列と拡張可能なセマンティクスに基づいた強力なデータ記述構造を組み合わせたものです。Luaは動的に型付けされ、レジスタベースの仮想マシンでバイトコードを解釈して実行されます。また、世代別ガベージコレクションによる自動メモリ管理機能を備えており、設定、スクリプト作成、ラピッドプロトタイピングに最適です。</target>
        </trans-unit>
        <trans-unit id="55000944726bac35e3a7a8c2c659ce8ea827ae88" translate="yes" xml:space="preserve">
          <source>Lua combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is dynamically typed, runs by interpreting bytecode with a register-based virtual machine, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping.</source>
          <target state="translated">Luaは、シンプルな手続き的構文と、連想配列と拡張可能なセマンティクスに基づく強力なデータ記述構造を組み合わせたものです。Luaは動的に型付けされ、レジスタベースの仮想マシンでバイトコードを解釈して実行されます。また、インクリメンタルガベージコレクションによる自動メモリ管理機能を備えているため、設定やスクリプト作成、ラピッドプロトタイピングに最適です。</target>
        </trans-unit>
        <trans-unit id="8c26f824cf75010655e9550b8fde705425a3784c" translate="yes" xml:space="preserve">
          <source>Lua does not check the consistency of binary chunks. Maliciously crafted binary chunks can crash the interpreter.</source>
          <target state="translated">Lua はバイナリチャンクの整合性をチェックしません。悪意を持って作られたバイナリチャンクは、インタープリタをクラッシュさせる可能性があります。</target>
        </trans-unit>
        <trans-unit id="1a5e8dc647ce5f791a0e6cc5be4cbed5172328da" translate="yes" xml:space="preserve">
          <source>Lua handles a chunk as the body of an anonymous function with a variable number of arguments (see &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;). As such, chunks can define local variables, receive arguments, and return values. Moreover, such anonymous function is compiled as in the scope of an external local variable called &lt;code&gt;_ENV&lt;/code&gt; (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). The resulting function always has &lt;code&gt;_ENV&lt;/code&gt; as its only external variable, even if it does not use that variable.</source>
          <target state="translated">Luaは、チャンクを可変数の引数を持つ無名関数の本体として処理します（&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11を&lt;/a&gt;参照）。そのため、チャンクはローカル変数を定義し、引数を受け取り、値を返すことができます。また、このような匿名関数が呼び出される外部ローカル変数のスコープのようにコンパイルされ &lt;code&gt;_ENV&lt;/code&gt; （参照&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;）。結果の関数は、その変数を使用しない場合でも、常に唯一の外部変数として &lt;code&gt;_ENV&lt;/code&gt; を持ちます。</target>
        </trans-unit>
        <trans-unit id="35b65ab36f2f47f5954bb270f0f9be36cfe1a6ba" translate="yes" xml:space="preserve">
          <source>Lua handles a chunk as the body of an anonymous function with a variable number of arguments (see &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;). As such, chunks can define local variables, receive arguments, and return values. Moreover, such anonymous function is compiled as in the scope of an external local variable called &lt;code&gt;_ENV&lt;/code&gt; (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). The resulting function always has &lt;code&gt;_ENV&lt;/code&gt; as its only upvalue, even if it does not use that variable.</source>
          <target state="translated">Luaはチャンクを可変数の引数を持つ無名関数の本体として扱います（&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11を&lt;/a&gt;参照）。したがって、チャンクはローカル変数を定義し、引数を受け取り、値を返すことができます。また、このような匿名関数が呼び出される外部ローカル変数のスコープのようにコンパイルされ &lt;code&gt;_ENV&lt;/code&gt; （参照&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;）。結果の関数は、その変数を使用していなくても、常に &lt;code&gt;_ENV&lt;/code&gt; を唯一のアップバリューとして持っています。</target>
        </trans-unit>
        <trans-unit id="7bb5694782dd5240f5a360755736e520cb7caddd" translate="yes" xml:space="preserve">
          <source>Lua has &lt;em&gt;empty statements&lt;/em&gt; that allow you to separate statements with semicolons, start a block with a semicolon or write two semicolons in sequence:</source>
          <target state="translated">Luaには&lt;em&gt;空のステートメント&lt;/em&gt;があり、セミコロンでステートメントを分離したり、セミコロンでブロックを開始したり、2つのセミコロンを順番に書き込んだりできます。</target>
        </trans-unit>
        <trans-unit id="3e19bed5c0654df07eeefc8d0dbcff0cc7fb976e" translate="yes" xml:space="preserve">
          <source>Lua has explicit rules about when each subtype is used, but it also converts between them automatically as needed (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;). Therefore, the programmer may choose to mostly ignore the difference between integers and floats or to assume complete control over the representation of each number.</source>
          <target state="translated">Luaには、各サブタイプがいつ使用されるかについての明示的なルールがありますが、必要に応じてそれらの間で自動的に変換されます（&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3を&lt;/a&gt;参照）。したがって、プログラマーは、整数と浮動小数点数の違いをほとんど無視するか、各数値の表現を完全に制御することを選択できます。</target>
        </trans-unit>
        <trans-unit id="08b67a26f91c4bb6ecbeaabc79499925202576c4" translate="yes" xml:space="preserve">
          <source>Lua has no built-in debugging facilities. Instead, it offers a special interface by means of functions and &lt;em&gt;hooks&lt;/em&gt;. This interface allows the construction of different kinds of debuggers, profilers, and other tools that need &quot;inside information&quot; from the interpreter.</source>
          <target state="translated">Luaにはデバッグ機能が組み込まれていません。代わりに、関数と&lt;em&gt;フック&lt;/em&gt;によって特別なインターフェースを提供します。このインターフェイスを使用すると、インタープリターからの「内部情報」を必要とするさまざまな種類のデバッガー、プロファイラー、およびその他のツールを構築できます。</target>
        </trans-unit>
        <trans-unit id="ab53ba5d8b707a086c1f55306a5e491b7ca0c834" translate="yes" xml:space="preserve">
          <source>Lua implements an incremental mark-and-sweep collector. It uses two numbers to control its garbage-collection cycles: the &lt;em&gt;garbage-collector pause&lt;/em&gt; and the &lt;em&gt;garbage-collector step multiplier&lt;/em&gt;. Both use percentage points as units (e.g., a value of 100 means an internal value of 1).</source>
          <target state="translated">Luaはインクリメンタルマークアンドスイープコレクターを実装しています。ガベージコレクションのサイクルを制御するために、ガベージ&lt;em&gt;コレクタの一時停止&lt;/em&gt;と&lt;em&gt;ガベージコレクタのステップ乗数という&lt;/em&gt; 2つの数値を使用します。どちらもパーセントポイントを単位として使用します（たとえば、値100は内部値1を意味します）。</target>
        </trans-unit>
        <trans-unit id="ad855bd45416f0333645541d1257309374015262" translate="yes" xml:space="preserve">
          <source>Lua initializes its pseudo-random generator with the equivalent of a call to &lt;a href=&quot;#pdf-math.randomseed&quot;&gt;&lt;code&gt;math.randomseed&lt;/code&gt;&lt;/a&gt; with no arguments, so that &lt;code&gt;math.random&lt;/code&gt; should generate different sequences of results each time the program runs.</source>
          <target state="translated">Luaは、引数なしで&lt;a href=&quot;#pdf-math.randomseed&quot;&gt; &lt;code&gt;math.randomseed&lt;/code&gt; &lt;/a&gt;を呼び出すのと同等の疑似ランダムジェネレーターを初期化するため、 &lt;code&gt;math.random&lt;/code&gt; は、プログラムが実行されるたびに異なる結果シーケンスを生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="4be60237bd80620e268374029f3211e510b05c17" translate="yes" xml:space="preserve">
          <source>Lua initializes the C path &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt; in the same way it initializes the Lua path &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt;, using the environment variable &lt;a id=&quot;pdf-LUA_CPATH_5_3&quot;&gt;&lt;code&gt;LUA_CPATH_5_3&lt;/code&gt;&lt;/a&gt;, or the environment variable &lt;a id=&quot;pdf-LUA_CPATH&quot;&gt;&lt;code&gt;LUA_CPATH&lt;/code&gt;&lt;/a&gt;, or a default path defined in &lt;code&gt;luaconf.h&lt;/code&gt;.</source>
          <target state="translated">LuaはCパス初期化&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; &lt;/a&gt;がLuaのパス初期化同様に&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; を&lt;/a&gt;環境変数の使用、&lt;a id=&quot;pdf-LUA_CPATH_5_3&quot;&gt; &lt;code&gt;LUA_CPATH_5_3&lt;/code&gt; &lt;/a&gt;、または環境変数&lt;a id=&quot;pdf-LUA_CPATH&quot;&gt; &lt;code&gt;LUA_CPATH&lt;/code&gt; &lt;/a&gt;、又はで定義されたデフォルトのパス &lt;code&gt;luaconf.h&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="9dd87e2bc11c5d748dd2ecd3b8a3e7dcc5b9ccfa" translate="yes" xml:space="preserve">
          <source>Lua initializes the C path &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt; in the same way it initializes the Lua path &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt;, using the environment variable &lt;a id=&quot;pdf-LUA_CPATH_5_4&quot;&gt;&lt;code&gt;LUA_CPATH_5_4&lt;/code&gt;&lt;/a&gt;, or the environment variable &lt;a id=&quot;pdf-LUA_CPATH&quot;&gt;&lt;code&gt;LUA_CPATH&lt;/code&gt;&lt;/a&gt;, or a default path defined in &lt;code&gt;luaconf.h&lt;/code&gt;.</source>
          <target state="translated">LuaはCパス初期化&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; &lt;/a&gt;がLuaのパス初期化同様に&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; を&lt;/a&gt;環境変数の使用、&lt;a id=&quot;pdf-LUA_CPATH_5_4&quot;&gt; &lt;code&gt;LUA_CPATH_5_4&lt;/code&gt; &lt;/a&gt;、または環境変数&lt;a id=&quot;pdf-LUA_CPATH&quot;&gt; &lt;code&gt;LUA_CPATH&lt;/code&gt; &lt;/a&gt;、又はで定義されたデフォルトのパス &lt;code&gt;luaconf.h&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4714009f33265bf1fc4688da888d62c97c45d7b7" translate="yes" xml:space="preserve">
          <source>Lua initializes this table with four searcher functions.</source>
          <target state="translated">Luaはこのテーブルを4つのサーチャー関数で初期化します。</target>
        </trans-unit>
        <trans-unit id="ef9edf704545b26dfa394b151700f2e58198d961" translate="yes" xml:space="preserve">
          <source>Lua is a &lt;em&gt;dynamically typed language&lt;/em&gt;. This means that variables do not have types; only values do. There are no type definitions in the language. All values carry their own type.</source>
          <target state="translated">Luaは&lt;em&gt;動的に型付けされた言語&lt;/em&gt;です。つまり、変数には型がありません。値のみです。言語に型定義はありません。すべての値には独自のタイプがあります。</target>
        </trans-unit>
        <trans-unit id="768b1dfa86b0332cedc5bdb9fcc8e17166f9ef47" translate="yes" xml:space="preserve">
          <source>Lua is a case-sensitive language: &lt;code&gt;and&lt;/code&gt; is a reserved word, but &lt;code&gt;And&lt;/code&gt; and &lt;code&gt;AND&lt;/code&gt; are two different, valid names. As a convention, programs should avoid creating names that start with an underscore followed by one or more uppercase letters (such as &lt;a href=&quot;#pdf-_VERSION&quot;&gt;&lt;code&gt;_VERSION&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Luaは大文字と小文字を区別する言語です &lt;code&gt;and&lt;/code&gt; 予約語ですが、 &lt;code&gt;And&lt;/code&gt; そして &lt;code&gt;AND&lt;/code&gt; 二つの異なる、有効な名前です。慣例として、プログラムでは、アンダースコアで始まり1つ以上の大文字が続く名前（&lt;a href=&quot;#pdf-_VERSION&quot;&gt; &lt;code&gt;_VERSION&lt;/code&gt; &lt;/a&gt;など）を作成しないでください。</target>
        </trans-unit>
        <trans-unit id="14462b481cdd16dd35942cf7ea65c476fc81dc92" translate="yes" xml:space="preserve">
          <source>Lua is a dynamically typed language. This means that variables do not have types; only values do. There are no type definitions in the language. All values carry their own type.</source>
          <target state="translated">Luaは動的型付け言語です。つまり、変数に型はなく、値のみが型を持つということです。この言語には型定義はありません。すべての値は独自の型を持ちます。</target>
        </trans-unit>
        <trans-unit id="5747aeb4d5eff65fa7549c62e63b2802c05d28fa" translate="yes" xml:space="preserve">
          <source>Lua is a free-form language. It ignores spaces (including new lines) and comments between lexical elements (tokens), except as delimiters between names and keywords.</source>
          <target state="translated">Luaは自由形式言語です。名前とキーワードの間の区切り文字として使用する場合を除き、スペース(改行を含む)や字句要素(トークン)間のコメントは無視されます。</target>
        </trans-unit>
        <trans-unit id="d6fc1e0827574e83666a7aeb884cd5cd48ccb329" translate="yes" xml:space="preserve">
          <source>Lua is a free-form language. It ignores spaces and comments between lexical elements (tokens), except as delimiters between two tokens. In source code, Lua recognizes as spaces the standard ASCII whitespace characters space, form feed, newline, carriage return, horizontal tab, and vertical tab.</source>
          <target state="translated">Lua は自由形式言語です。辞書的要素(トークン)間のスペースやコメントは、2つのトークン間の区切り文字として使用される場合を除き、無視されます。ソースコードでは、標準的な ASCII ホワイトスペース文字であるスペース、フォームフィード、改行、キャリッジリターン、水平タブ、垂直タブをスペースとして認識します。</target>
        </trans-unit>
        <trans-unit id="10cf3931978ad3da8f2a0c2e42a3bc57db1befcb" translate="yes" xml:space="preserve">
          <source>Lua is a lexically scoped language. The scope of a local variable begins at the first statement after its declaration and lasts until the last non-void statement of the innermost block that includes the declaration. Consider the following example:</source>
          <target state="translated">Lua は語彙的にスコープが設定された言語です。ローカル変数のスコープは、宣言後の最初のステートメントから始まり、その宣言を含む最上位ブロックの最後の非ボイドステートメントまで続きます。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="64997c71b569a923ad45e14df6ef4a0a98b01aef" translate="yes" xml:space="preserve">
          <source>Lua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.</source>
          <target state="translated">Luaは、パワフルで効率的、軽量、埋め込み可能なスクリプト言語です。手続き型プログラミング、オブジェクト指向プログラミング、関数型プログラミング、データ駆動型プログラミング、データ記述をサポートしています。</target>
        </trans-unit>
        <trans-unit id="6525b86788861e011c88cf07f7294dd56f02830d" translate="yes" xml:space="preserve">
          <source>Lua is free software, and is provided as usual with no guarantees, as stated in its license. The implementation described in this manual is available at Lua's official web site, &lt;code&gt;www.lua.org&lt;/code&gt;.</source>
          <target state="translated">Luaはフリーソフトウェアであり、ライセンスに記載されているとおり、通常どおり提供され、保証はありません。このマニュアルで説明されている実装は、Luaの公式Webサイト &lt;code&gt;www.lua.org&lt;/code&gt; から入手できます。</target>
        </trans-unit>
        <trans-unit id="bf89f8ce15263309be1a18939b1bc8b312081d0b" translate="yes" xml:space="preserve">
          <source>Lua is implemented as a library, written in &lt;em&gt;clean C&lt;/em&gt;, the common subset of Standard C and C++. The Lua distribution includes a host program called &lt;code&gt;lua&lt;/code&gt;, which uses the Lua library to offer a complete, standalone Lua interpreter, for interactive or batch use. Lua is intended to be used both as a powerful, lightweight, embeddable scripting language for any program that needs one, and as a powerful but lightweight and efficient stand-alone language.</source>
          <target state="translated">Luaは、標準CおよびC ++の共通サブセットである&lt;em&gt;クリーンC&lt;/em&gt;で記述されたライブラリとして実装されます。Luaディストリビューションには &lt;code&gt;lua&lt;/code&gt; と呼ばれるホストプログラムが含まれています。これは、Luaライブラリを使用して、インタラクティブまたはバッチで使用できる完全なスタンドアロンのLuaインタープリターを提供します。Luaは、強力で軽量な埋め込み可能なスクリプト言語として、プログラムを必要とするすべてのプログラムと、強力でありながら軽量で効率的なスタンドアロン言語の両方として使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="d706bcd1ff8f8bec50ed4b63b5fce0e2915787d3" translate="yes" xml:space="preserve">
          <source>Lua keeps a distinguished environment called the &lt;em&gt;global environment&lt;/em&gt;. This value is kept at a special index in the C registry (see &lt;a href=&quot;#4.3&quot;&gt;&amp;sect;4.3&lt;/a&gt;). In Lua, the global variable &lt;a href=&quot;#pdf-_G&quot;&gt;&lt;code&gt;_G&lt;/code&gt;&lt;/a&gt; is initialized with this same value. (&lt;a href=&quot;#pdf-_G&quot;&gt;&lt;code&gt;_G&lt;/code&gt;&lt;/a&gt; is never used internally, so changing its value will affect only your own code.)</source>
          <target state="translated">Luaは、&lt;em&gt;地球環境&lt;/em&gt;と呼ばれる優れた環境を維持してい&lt;em&gt;ます&lt;/em&gt;。この値は、Cレジストリの特別なインデックスに保持されます（&lt;a href=&quot;#4.3&quot;&gt;&amp;sect;4.3を&lt;/a&gt;参照）。Luaでは、グローバル変数&lt;a href=&quot;#pdf-_G&quot;&gt; &lt;code&gt;_G&lt;/code&gt; &lt;/a&gt;はこれと同じ値で初期化されます。（&lt;a href=&quot;#pdf-_G&quot;&gt; &lt;code&gt;_G&lt;/code&gt; &lt;/a&gt;は内部で使用されることはないため、その値を変更しても、自分のコードにのみ影響します。）</target>
        </trans-unit>
        <trans-unit id="766bf2f3607b0c894574e1db0930518cd452197d" translate="yes" xml:space="preserve">
          <source>Lua keeps a distinguished environment called the &lt;em&gt;global environment&lt;/em&gt;. This value is kept at a special index in the C registry (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;). In Lua, the global variable &lt;a href=&quot;#pdf-_G&quot;&gt;&lt;code&gt;_G&lt;/code&gt;&lt;/a&gt; is initialized with this same value. (&lt;a href=&quot;#pdf-_G&quot;&gt;&lt;code&gt;_G&lt;/code&gt;&lt;/a&gt; is never used internally.)</source>
          <target state="translated">Luaは、&lt;em&gt;地球環境&lt;/em&gt;と呼ばれる際立った環境を維持してい&lt;em&gt;ます&lt;/em&gt;。この値は、Cレジストリの特別なインデックスに保持されます（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。Luaでは、グローバル変数&lt;a href=&quot;#pdf-_G&quot;&gt; &lt;code&gt;_G&lt;/code&gt; &lt;/a&gt;は同じ値で初期化されます。（&lt;a href=&quot;#pdf-_G&quot;&gt; &lt;code&gt;_G&lt;/code&gt; &lt;/a&gt;は内部的に使用されることはありません。）</target>
        </trans-unit>
        <trans-unit id="50a6344d2469ab6de8e8a3709a57a990d508f2b9" translate="yes" xml:space="preserve">
          <source>Lua performs automatic memory management. This means that you do not have to worry about allocating memory for new objects or freeing it when the objects are no longer needed. Lua manages memory automatically by running a &lt;em&gt;garbage collector&lt;/em&gt; to collect all &lt;em&gt;dead objects&lt;/em&gt; (that is, objects that are no longer accessible from Lua). All memory used by Lua is subject to automatic management: strings, tables, userdata, functions, threads, internal structures, etc.</source>
          <target state="translated">Luaは自動メモリ管理を実行します。つまり、新しいオブジェクトにメモリを割り当てたり、オブジェクトが不要になったときにメモリを解放したりする必要はありません。 Luaは、&lt;em&gt;ガベージコレクター&lt;/em&gt;を実行してすべての&lt;em&gt;無効なオブジェクト&lt;/em&gt;（つまり、Luaからアクセスできなくなったオブジェクト）を&lt;em&gt;収集&lt;/em&gt;することにより、メモリを自動的に管理します。 Luaが使用するすべてのメモリは自動管理の対象となります：文字列、テーブル、ユーザーデータ、関数、スレッド、内部構造など。</target>
        </trans-unit>
        <trans-unit id="a37183d7def474e8ad0a40034770f88144395901" translate="yes" xml:space="preserve">
          <source>Lua performs automatic memory management. This means that you do not have to worry about allocating memory for new objects or freeing it when the objects are no longer needed. Lua manages memory automatically by running a &lt;em&gt;garbage collector&lt;/em&gt; to collect all &lt;em&gt;dead&lt;/em&gt; objects. All memory used by Lua is subject to automatic management: strings, tables, userdata, functions, threads, internal structures, etc.</source>
          <target state="translated">Luaは自動メモリ管理を実行します。これは、新しいオブジェクトにメモリを割り当てたり、オブジェクトが不要になったときにメモリを解放したりすることを心配する必要がないことを意味します。Luaは、&lt;em&gt;ガベージコレクター&lt;/em&gt;を実行してすべての&lt;em&gt;デッド&lt;/em&gt;オブジェクトを収集することにより、メモリを自動的に管理します。Luaが使用するすべてのメモリ（文字列、テーブル、ユーザーデータ、関数、スレッド、内部構造など）は自動管理の対象になります。</target>
        </trans-unit>
        <trans-unit id="304c36d43ad643a3a401b38816464fd6feff69ef" translate="yes" xml:space="preserve">
          <source>Lua provides a &lt;em&gt;registry&lt;/em&gt;, a predefined table that can be used by any C code to store whatever Lua values it needs to store. The registry table is always accessible at pseudo-index &lt;a id=&quot;pdf-LUA_REGISTRYINDEX&quot;&gt;&lt;code&gt;LUA_REGISTRYINDEX&lt;/code&gt;&lt;/a&gt;. Any C library can store data into this table, but it must take care to choose keys that are different from those used by other libraries, to avoid collisions. Typically, you should use as key a string containing your library name, or a light userdata with the address of a C object in your code, or any Lua object created by your code. As with variable names, string keys starting with an underscore followed by uppercase letters are reserved for Lua.</source>
          <target state="translated">Luaは&lt;em&gt;レジストリを&lt;/em&gt;提供し&lt;em&gt;ます&lt;/em&gt;。これは、保存する必要のあるLua値を保存するために、任意のCコードで使用できる事前定義されたテーブルです。レジストリテーブルは、疑似インデックス&lt;a id=&quot;pdf-LUA_REGISTRYINDEX&quot;&gt; &lt;code&gt;LUA_REGISTRYINDEX&lt;/code&gt; &lt;/a&gt;で常にアクセスできます。どのCライブラリでもこのテーブルにデータを格納できますが、衝突を避けるために、他のライブラリで使用されているものとは異なるキーを選択するように注意する必要があります。通常、キーとして、ライブラリ名を含む文字列、コード内のCオブジェクトのアドレスを含むライトユーザーデータ、またはコードによって作成されたLuaオブジェクトを使用する必要があります。変数名と同様に、アンダースコアで始まり大文字が続く文字列キーはLua用に予約されています。</target>
        </trans-unit>
        <trans-unit id="ff53c69b14f5a971156b01cea314fe8462f1fb40" translate="yes" xml:space="preserve">
          <source>Lua provides a &lt;em&gt;registry&lt;/em&gt;, a predefined table that can be used by any C code to store whatever Lua values it needs to store. The registry table is always located at pseudo-index &lt;a id=&quot;pdf-LUA_REGISTRYINDEX&quot;&gt;&lt;code&gt;LUA_REGISTRYINDEX&lt;/code&gt;&lt;/a&gt;. Any C library can store data into this table, but it must take care to choose keys that are different from those used by other libraries, to avoid collisions. Typically, you should use as key a string containing your library name, or a light userdata with the address of a C object in your code, or any Lua object created by your code. As with variable names, string keys starting with an underscore followed by uppercase letters are reserved for Lua.</source>
          <target state="translated">Luaは&lt;em&gt;レジストリを&lt;/em&gt;提供し&lt;em&gt;ます。これ&lt;/em&gt;は、任意のCコードが格納に必要なLua値を格納するために使用できる定義済みのテーブルです。レジストリテーブルは常に疑似インデックス&lt;a id=&quot;pdf-LUA_REGISTRYINDEX&quot;&gt; &lt;code&gt;LUA_REGISTRYINDEX&lt;/code&gt; にあり&lt;/a&gt;ます。どのCライブラリでもこのテーブルにデータを格納できますが、衝突を避けるために、他のライブラリで使用されているものとは異なるキーを選択するように注意する必要があります。通常、ライブラリ名を含む文字列、コード内のCオブジェクトのアドレス、またはコードによって作成されたLuaオブジェクトを含むライトユーザーデータをキーとして使用する必要があります。変数名と同様に、アンダースコアで始まり大文字が続く文字列キーはLua用に予約されています。</target>
        </trans-unit>
        <trans-unit id="c7ec27426739f62c59f6fb19adc0cf4fd8e79bdf" translate="yes" xml:space="preserve">
          <source>Lua provides some automatic conversions between some types and representations at run time. Bitwise operators always convert float operands to integers. Exponentiation and float division always convert integer operands to floats. All other arithmetic operations applied to mixed numbers (integers and floats) convert the integer operand to a float. The C API also converts both integers to floats and floats to integers, as needed. Moreover, string concatenation accepts numbers as arguments, besides strings.</source>
          <target state="translated">Luaでは、実行時にいくつかの型や表現を自動的に変換する機能を提供しています。ビット演算子は常に float オペランドを整数に変換します。指数やフロート除算では、整数演算子は常にフロートに変換されます。混合数(整数と浮動小数点数)に適用される他のすべての算術演算は、整数のオペランドを浮動小数点数に変換します。また、C API は必要に応じて、整数を浮動小数点数に、浮動小数点数を整数に変換します。さらに、文字列連結では、文字列以外にも数値を引数として受け付けることができます。</target>
        </trans-unit>
        <trans-unit id="8aebea72c222a51d9f5c90460286acb8ff7bd836" translate="yes" xml:space="preserve">
          <source>Lua provides some automatic conversions between some types and representations at run time. Bitwise operators always convert float operands to integers. Exponentiation and float division always convert integer operands to floats. All other arithmetic operations applied to mixed numbers (integers and floats) convert the integer operand to a float; this is called the &lt;em&gt;usual rule&lt;/em&gt;. The C API also converts both integers to floats and floats to integers, as needed. Moreover, string concatenation accepts numbers as arguments, besides strings.</source>
          <target state="translated">Luaは、実行時にいくつかの型と表現の間のいくつかの自動変換を提供します。ビット演算子は常に浮動小数点オペランドを整数に変換します。べき乗と浮動小数点除算は、整数のオペランドを常に浮動小数点に変換します。混合数（整数と浮動小数点数）に適用される他のすべての算術演算は、整数オペランドを浮動小数点数に変換します。これは&lt;em&gt;通常のルール&lt;/em&gt;と呼ばれます。 C APIは、必要に応じて、両方の整数を浮動小数点数に、浮動小数点数を整数に変換します。さらに、文字列連結では、文字列のほかに数値を引数として受け入れます。</target>
        </trans-unit>
        <trans-unit id="fc88527d32d4eef52fab883602cc5a04e027d076" translate="yes" xml:space="preserve">
          <source>Lua supports an almost conventional set of statements, similar to those in Pascal or C. This set includes assignments, control structures, function calls, and variable declarations.</source>
          <target state="translated">Luaは、PascalやC言語と同様に、代入、制御構造、関数呼び出し、変数宣言など、ほぼ従来のステートメントをサポートしています。</target>
        </trans-unit>
        <trans-unit id="91dafa2daf60652dca7a18b91e3e12584dce5ecb" translate="yes" xml:space="preserve">
          <source>Lua supports an almost conventional set of statements, similar to those in other conventional languages. This set includes blocks, assignments, control structures, function calls, and variable declarations.</source>
          <target state="translated">Lua は、他の従来型言語と同様に、ほぼ従来型のステートメントセットをサポートしています。このセットには、ブロック、代入、制御構造、関数呼び出し、変数宣言が含まれます。</target>
        </trans-unit>
        <trans-unit id="d24c360e7097470e8a9eb4284ea5f5a81791560b" translate="yes" xml:space="preserve">
          <source>Lua supports coroutines, also called &lt;em&gt;collaborative multithreading&lt;/em&gt;. A coroutine in Lua represents an independent thread of execution. Unlike threads in multithread systems, however, a coroutine only suspends its execution by explicitly calling a yield function.</source>
          <target state="translated">Luaはコルーチンをサポートします。これは、&lt;em&gt;コラボレーションマルチスレッド&lt;/em&gt;とも呼ばれます。Luaのコルーチンは、独立した実行スレッドを表します。ただし、マルチスレッドシステムのスレッドとは異なり、コルーチンは、yield関数を明示的に呼び出して実行を一時停止するだけです。</target>
        </trans-unit>
        <trans-unit id="3591c85e3de8f7bdc4a45d500a8261a9e6ec09be" translate="yes" xml:space="preserve">
          <source>Lua supports the following arithmetic operators:</source>
          <target state="translated">Luaは以下の算術演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="f0e5bf2dcec5e267f3660839f8aee19d34a65569" translate="yes" xml:space="preserve">
          <source>Lua supports the following bitwise operators:</source>
          <target state="translated">Luaは以下のビット演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="681beb7c86ad47856fd70c3b7329189c44c67f13" translate="yes" xml:space="preserve">
          <source>Lua supports the following relational operators:</source>
          <target state="translated">Luaは以下のリレーショナル演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ea7647f42e558dda5334904038fac1e7ced0aeee" translate="yes" xml:space="preserve">
          <source>Lua treats the continuation function as if it were the original function. The continuation function receives the same Lua stack from the original function, in the same state it would be if the callee function had returned. (For instance, after a &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt; the function and its arguments are removed from the stack and replaced by the results from the call.) It also has the same upvalues. Whatever it returns is handled by Lua as if it were the return of the original function.</source>
          <target state="translated">Luaは継続関数を元の関数と同様に扱います。継続関数は、元の関数から同じLuaスタックを受け取ります。呼び出し先関数が返された場合と同じ状態です。（たとえば、&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;の後、関数とその引数はスタックから削除され、呼び出しの結果に置き換えられます。）また、同じアップ値があります。それが返すものはすべて、それが元の関数の戻りであるかのようにLuaによって処理されます。</target>
        </trans-unit>
        <trans-unit id="8d18554a7115d65153a0cecb32181cd5cd13b803" translate="yes" xml:space="preserve">
          <source>Lua uses a &lt;em&gt;virtual stack&lt;/em&gt; to pass values to and from C. Each element in this stack represents a Lua value (&lt;b&gt;nil&lt;/b&gt;, number, string, etc.). Functions in the API can access this stack through the Lua state parameter that they receive.</source>
          <target state="translated">Luaは&lt;em&gt;仮想スタック&lt;/em&gt;を使用してCと値をやり取りし&lt;em&gt;ます&lt;/em&gt;。このスタックの各要素はLua値（&lt;b&gt;nil&lt;/b&gt;、数値、文字列など）を表します。APIの関数は、受け取ったLua状態パラメーターを介してこのスタックにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9ab5b312f28e26ecbcf6e086d97bd76369eeeb34" translate="yes" xml:space="preserve">
          <source>Lua versions can always change the C API in ways that do not imply source-code changes in a program, such as the numeric values for constants or the implementation of functions as macros. Therefore, you should never assume that binaries are compatible between different Lua versions. Always recompile clients of the Lua API when using a new version.</source>
          <target state="translated">Luaのバージョンでは、定数の数値やマクロとしての関数の実装など、プログラムのソースコードの変更を意味するものではない方法でC APIを変更することがあります。そのため、バイナリが異なる Lua バージョン間で互換性があると仮定してはいけません。新しいバージョンを使用する場合は、必ずLua APIのクライアントを再コンパイルしてください。</target>
        </trans-unit>
        <trans-unit id="225017af8d199117d297936391565191b16afd75" translate="yes" xml:space="preserve">
          <source>Lua versions can always change the C API in ways that do not imply source-code changes in a program, such as the numeric values for constants or the implementation of functions as macros. Therefore, you should not assume that binaries are compatible between different Lua versions. Always recompile clients of the Lua API when using a new version.</source>
          <target state="translated">Luaのバージョンでは、定数の数値やマクロとしての関数の実装など、プログラムのソースコードの変更を意味しない方法でC APIを変更することが常にあります。そのため、バイナリが異なる Lua バージョン間で互換性があると思い込んではいけません。新しいバージョンを使用する場合は、必ずLua APIのクライアントを再コンパイルしてください。</target>
        </trans-unit>
        <trans-unit id="d9819702e70f7dce9f1483706cfae2f70bcb9e32" translate="yes" xml:space="preserve">
          <source>Macros to project non-default integer types (&lt;code&gt;luaL_checkint&lt;/code&gt;, &lt;code&gt;luaL_optint&lt;/code&gt;, &lt;code&gt;luaL_checklong&lt;/code&gt;, &lt;code&gt;luaL_optlong&lt;/code&gt;) were deprecated. Use their equivalent over &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt; with a type cast (or, when possible, use &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt; in your code).</source>
          <target state="translated">デフォルト以外の整数型（ &lt;code&gt;luaL_checkint&lt;/code&gt; 、 &lt;code&gt;luaL_optint&lt;/code&gt; 、 &lt;code&gt;luaL_checklong&lt;/code&gt; 、 &lt;code&gt;luaL_optlong&lt;/code&gt; ）を投影するマクロは非推奨になりました。型キャストで&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; に&lt;/a&gt;相当するものを使用します（または、可能であれば、コードで&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; &lt;/a&gt;を使用します）。</target>
        </trans-unit>
        <trans-unit id="b77ee37c1b7bd6807618cb75d302c1c6fbf5df15" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;n1&lt;/code&gt;-th upvalue of the Lua closure &lt;code&gt;f1&lt;/code&gt; refer to the &lt;code&gt;n2&lt;/code&gt;-th upvalue of the Lua closure &lt;code&gt;f2&lt;/code&gt;.</source>
          <target state="translated">Luaクロージャー &lt;code&gt;f1&lt;/code&gt; の &lt;code&gt;n1&lt;/code&gt; 番目のアップ値がLuaクロージャー &lt;code&gt;f2&lt;/code&gt; の &lt;code&gt;n2&lt;/code&gt; 番目のアップ値を参照するようにします。</target>
        </trans-unit>
        <trans-unit id="62787e3133e3f8c1540f23ea948a696e338e2fa1" translate="yes" xml:space="preserve">
          <source>Make the &lt;code&gt;n1&lt;/code&gt;-th upvalue of the Lua closure at index &lt;code&gt;funcindex1&lt;/code&gt; refer to the &lt;code&gt;n2&lt;/code&gt;-th upvalue of the Lua closure at index &lt;code&gt;funcindex2&lt;/code&gt;.</source>
          <target state="translated">作る &lt;code&gt;n1&lt;/code&gt; 番目の上位値のインデックスのLuaのクロージャの &lt;code&gt;funcindex1&lt;/code&gt; はを参照してください &lt;code&gt;n2&lt;/code&gt; のインデックスで番目の上位値Luaのクロージャの &lt;code&gt;funcindex2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f45634619c3458c08eba16dfa423d4f5456e189b" translate="yes" xml:space="preserve">
          <source>Marks the given index in the stack as a to-be-closed &quot;variable&quot; (see &lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;). Like a to-be-closed variable in Lua, the value at that index in the stack will be closed when it goes out of scope. Here, in the context of a C function, to go out of scope means that the running function returns to Lua, there is an error, or the index is removed from the stack through &lt;a href=&quot;#lua_settop&quot;&gt;&lt;code&gt;lua_settop&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pop&quot;&gt;&lt;code&gt;lua_pop&lt;/code&gt;&lt;/a&gt;. An index marked as to-be-closed should not be removed from the stack by any other function in the API except &lt;a href=&quot;#lua_settop&quot;&gt;&lt;code&gt;lua_settop&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pop&quot;&gt;&lt;code&gt;lua_pop&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スタック内の指定されたインデックスを、クローズされる「変数」としてマークします（&lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8を&lt;/a&gt;参照）。 Luaのクローズされる変数と同様に、スタック内のそのインデックスの値は、スコープ外になるとクローズされます。ここで、C関数のコンテキストでは、スコープ外になるとは、実行中の関数がLuaに戻るか、エラーが発生するか、&lt;a href=&quot;#lua_settop&quot;&gt; &lt;code&gt;lua_settop&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#lua_pop&quot;&gt; &lt;code&gt;lua_pop&lt;/code&gt; を&lt;/a&gt;介してインデックスがスタックから削除されることを意味します。クローズ予定としてマークされたインデックスは、&lt;a href=&quot;#lua_settop&quot;&gt; &lt;code&gt;lua_settop&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#lua_pop&quot;&gt; &lt;code&gt;lua_pop&lt;/code&gt; &lt;/a&gt;を除くAPIの他の関数によってスタックから削除されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="e0580c95da4f3ceb84abf5c18ee164021809ea4c" translate="yes" xml:space="preserve">
          <source>Metatables and Metamethods</source>
          <target state="translated">メタテーブルとメタメソッド</target>
        </trans-unit>
        <trans-unit id="4feff686bfbdf59cf154d1294db67c187b9f7489" translate="yes" xml:space="preserve">
          <source>Modulo is defined as the remainder of a division that rounds the quotient towards minus infinity (floor division).</source>
          <target state="translated">モデューロとは、商をマイナス無限大に向けて丸める除算(床除算)の残りと定義されています。</target>
        </trans-unit>
        <trans-unit id="71e2b3ce8af16f1677267e51894cb5b57ee61429" translate="yes" xml:space="preserve">
          <source>Moreover, with a &lt;code&gt;count&lt;/code&gt; different from zero, the hook is called also after every &lt;code&gt;count&lt;/code&gt; instructions.</source>
          <target state="translated">さらに、ゼロ以外の &lt;code&gt;count&lt;/code&gt; では、フックはすべての &lt;code&gt;count&lt;/code&gt; 命令の後にも呼び出されます。</target>
        </trans-unit>
        <trans-unit id="68a5432576b0a8367df52ec04ef603f754149162" translate="yes" xml:space="preserve">
          <source>Most functions in the API can raise an error, for instance due to a memory allocation error. The documentation for each function indicates whether it can raise errors.</source>
          <target state="translated">API のほとんどの関数は、メモリ割り当てエラーなどの理由でエラーを発生させることができます。各関数のドキュメントには、エラーを発生させることができるかどうかが記載されています。</target>
        </trans-unit>
        <trans-unit id="211349efeacad71bfc6580d063e630f7c7ac8b51" translate="yes" xml:space="preserve">
          <source>Moves elements from table &lt;code&gt;a1&lt;/code&gt; to table &lt;code&gt;a2&lt;/code&gt;, performing the equivalent to the following multiple assignment: &lt;code&gt;a2[t],&amp;middot;&amp;middot;&amp;middot; = a1[f],&amp;middot;&amp;middot;&amp;middot;,a1[e]&lt;/code&gt;. The default for &lt;code&gt;a2&lt;/code&gt; is &lt;code&gt;a1&lt;/code&gt;. The destination range can overlap with the source range. The number of elements to be moved must fit in a Lua integer.</source>
          <target state="translated">要素をテーブル &lt;code&gt;a1&lt;/code&gt; からテーブル &lt;code&gt;a2&lt;/code&gt; に移動し、次の複数の代入と同等の処理を実行します： &lt;code&gt;a2[t],&amp;middot;&amp;middot;&amp;middot; = a1[f],&amp;middot;&amp;middot;&amp;middot;,a1[e]&lt;/code&gt; 。 &lt;code&gt;a2&lt;/code&gt; のデフォルトは &lt;code&gt;a1&lt;/code&gt; です。宛先範囲は、ソース範囲と重複する可能性があります。移動する要素の数は、Lua整数に収まる必要があります。</target>
        </trans-unit>
        <trans-unit id="510e5879338c47950130f12189e321dcf4ce36c2" translate="yes" xml:space="preserve">
          <source>Moves elements from the table &lt;code&gt;a1&lt;/code&gt; to the table &lt;code&gt;a2&lt;/code&gt;, performing the equivalent to the following multiple assignment: &lt;code&gt;a2[t],&amp;middot;&amp;middot;&amp;middot; = a1[f],&amp;middot;&amp;middot;&amp;middot;,a1[e]&lt;/code&gt;. The default for &lt;code&gt;a2&lt;/code&gt; is &lt;code&gt;a1&lt;/code&gt;. The destination range can overlap with the source range. The number of elements to be moved must fit in a Lua integer.</source>
          <target state="translated">要素をテーブル &lt;code&gt;a1&lt;/code&gt; からテーブル &lt;code&gt;a2&lt;/code&gt; に移動し、次の複数の割り当てと同等の処理を実行します： &lt;code&gt;a2[t],&amp;middot;&amp;middot;&amp;middot; = a1[f],&amp;middot;&amp;middot;&amp;middot;,a1[e]&lt;/code&gt; 。 &lt;code&gt;a2&lt;/code&gt; のデフォルトは &lt;code&gt;a1&lt;/code&gt; です。宛先範囲はソース範囲と重複する可能性があります。移動する要素の数は、Lua整数に収まる必要があります。</target>
        </trans-unit>
        <trans-unit id="7f2bdd0bd3d59fce772f98ee9eb7eb0b3b6d4a93" translate="yes" xml:space="preserve">
          <source>Moves the top element into the given valid index without shifting any element (therefore replacing the value at that given index), and then pops the top element.</source>
          <target state="translated">先頭の要素をシフトせずに有効なインデックスに移動し(したがって、そのインデックスの値を置き換えます)、先頭の要素をポップします。</target>
        </trans-unit>
        <trans-unit id="4e0c82df95dd4d912151141c645e29919783b9cd" translate="yes" xml:space="preserve">
          <source>Moves the top element into the given valid index, shifting up the elements above this index to open space. This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.</source>
          <target state="translated">先頭の要素を有効なインデックスに移動し、このインデックスより上の要素をオープンスペースに移動します。疑似インデックスは実際のスタックの位置ではないので、この関数は疑似インデックスを指定して呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="391a0967919882d8d7da074ecd835868b9ad0813" translate="yes" xml:space="preserve">
          <source>Multiple matches:</source>
          <target state="translated">複数の試合をしています。</target>
        </trans-unit>
        <trans-unit id="f3ebf3f60d00dc82250b0b628b803e44dd494422" translate="yes" xml:space="preserve">
          <source>Name denotes identifiers (see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;).</source>
          <target state="translated">名前は識別子を示します（&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="53b225abd3f0033a18a8e56044eee89e7ebbd191" translate="yes" xml:space="preserve">
          <source>Name denotes identifiers, as defined in &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;.</source>
          <target state="translated">名前は、&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1で&lt;/a&gt;定義されている識別子を示します。</target>
        </trans-unit>
        <trans-unit id="132dfdc791b8ee51cdbc214b5f4f4d7ac599cf90" translate="yes" xml:space="preserve">
          <source>Native endianness assumes that the whole system is either big or little endian. The packing functions will not emulate correctly the behavior of mixed-endian formats.</source>
          <target state="translated">ネイティブエンディアンは、システム全体がビッグエンディアンかリトルエンディアンであることを前提としています。パッキング関数は、混合エンディアン形式の動作を正しくエミュレートしません。</target>
        </trans-unit>
        <trans-unit id="0ff07f80cb3da5ffaa1ac22e6dac9b937f6ab24f" translate="yes" xml:space="preserve">
          <source>Nonetheless, it is always a good practice not to rely on these implicit coercions, as they are not always applied; in particular, &lt;code&gt;&quot;1&quot;==1&lt;/code&gt; is false and &lt;code&gt;&quot;1&quot;&amp;lt;1&lt;/code&gt; raises an error (see &lt;a href=&quot;#3.4.4&quot;&gt;&amp;sect;3.4.4&lt;/a&gt;). These coercions exist mainly for compatibility and may be removed in future versions of the language.</source>
          <target state="translated">それにもかかわらず、これらの暗黙の強制は常に適用されるとは限らないため、これらの暗黙の強制に依存しないことは常に良い習慣です。特に、 &lt;code&gt;&quot;1&quot;==1&lt;/code&gt; は偽であり、 &lt;code&gt;&quot;1&quot;&amp;lt;1&lt;/code&gt; はエラーを発生させます（&lt;a href=&quot;#3.4.4&quot;&gt;&amp;sect;3.4.4を&lt;/a&gt;参照）。これらの強制は主に互換性のために存在し、言語の将来のバージョンで削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="14931c9658b2e9143b168a9666b173cd80e49603" translate="yes" xml:space="preserve">
          <source>Note that Standard C ensures that &lt;code&gt;free(NULL)&lt;/code&gt; has no effect and that &lt;code&gt;realloc(NULL,size)&lt;/code&gt; is equivalent to &lt;code&gt;malloc(size)&lt;/code&gt;.</source>
          <target state="translated">標準Cは、 &lt;code&gt;free(NULL)&lt;/code&gt; が効果を持たず、 &lt;code&gt;realloc(NULL,size)&lt;/code&gt; が &lt;code&gt;malloc(size)&lt;/code&gt; と同等であることを保証することに注意してください。</target>
        </trans-unit>
        <trans-unit id="1fb92775055c34d37036245800bd4e66793f8802" translate="yes" xml:space="preserve">
          <source>Note that Standard C ensures that &lt;code&gt;free(NULL)&lt;/code&gt; has no effect and that &lt;code&gt;realloc(NULL,size)&lt;/code&gt; is equivalent to &lt;code&gt;malloc(size)&lt;/code&gt;. This code assumes that &lt;code&gt;realloc&lt;/code&gt; does not fail when shrinking a block. (Although Standard C does not ensure this behavior, it seems to be a safe assumption.)</source>
          <target state="translated">標準Cでは、 &lt;code&gt;free(NULL)&lt;/code&gt; は効果がなく、 &lt;code&gt;realloc(NULL,size)&lt;/code&gt; は &lt;code&gt;malloc(size)&lt;/code&gt; と同等であることに注意してください。このコードは、ブロックの縮小時に &lt;code&gt;realloc&lt;/code&gt; が失敗しないことを前提としています。（標準Cはこの動作を保証していませんが、安全な仮定のようです。）</target>
        </trans-unit>
        <trans-unit id="7a567518fb3007e639daf24d7ac35ede7aba1d84" translate="yes" xml:space="preserve">
          <source>Note that commands for &lt;code&gt;debug.debug&lt;/code&gt; are not lexically nested within any function and so have no direct access to local variables.</source>
          <target state="translated">&lt;code&gt;debug.debug&lt;/code&gt; のコマンドは、関数内で字句的にネストされていないため、ローカル変数に直接アクセスできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a3819f26854d326b0f73d55f7e4a2133dc45716a" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;comp&lt;/code&gt; function must define a strict partial order over the elements in the list; that is, it must be asymmetric and transitive. Otherwise, no valid sort may be possible.</source>
          <target state="translated">&lt;code&gt;comp&lt;/code&gt; 関数は、リスト内の要素に対して厳密な部分順序を定義する必要があることに注意してください。つまり、非対称で推移的でなければなりません。そうしないと、有効な並べ替えができない可能性があります。</target>
        </trans-unit>
        <trans-unit id="1dab5c0bc6e3b7d33e45552977787711c9e9cd82" translate="yes" xml:space="preserve">
          <source>Note that the code above is &lt;em&gt;balanced&lt;/em&gt;: at its end, the stack is back to its original configuration. This is considered good programming practice.</source>
          <target state="translated">上記のコードは&lt;em&gt;バランス&lt;/em&gt;が&lt;em&gt;取れ&lt;/em&gt;ていることに注意してください。最後に、スタックは元の構成に戻ります。これは優れたプログラミング手法と見なされます。</target>
        </trans-unit>
        <trans-unit id="27456ef634a2ef274b5d4e632f792b2f499755a1" translate="yes" xml:space="preserve">
          <source>Note that, both in case of errors and of a regular return, by the time the &lt;code&gt;__close&lt;/code&gt; metamethod runs, the C stack was already unwound, so that any automatic C variable declared in the calling function will be out of scope.</source>
          <target state="translated">エラーの場合と通常の戻りの場合の両方で、 &lt;code&gt;__close&lt;/code&gt; メタメソッドが実行されるまでに、Cスタックはすでに巻き戻されているため、呼び出し元の関数で宣言された自動C変数はスコープ外になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f095d9ef1108e5d2ebeb20830f7a9cdf31641d73" translate="yes" xml:space="preserve">
          <source>Note the external, explicit call to the continuation: Lua will call the continuation only if needed, that is, in case of errors or resuming after a yield. If the called function returns normally without ever yielding, &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt; (and &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt;) will also return normally. (Of course, instead of calling the continuation in that case, you can do the equivalent work directly inside the original function.)</source>
          <target state="translated">継続に対する外部の明示的な呼び出しに注意してください。Luaは、必要な場合にのみ、つまり、エラーが発生した場合、またはyieldの後に再開した場合にのみ、継続を呼び出します。呼び出された関数が正常に戻ることなく、正常に戻る場合、&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; &lt;/a&gt;（および&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;）も正常に戻ります。（もちろん、その場合、継続を呼び出す代わりに、元の関数内で直接同等の作業を行うことができます。）</target>
        </trans-unit>
        <trans-unit id="20d78a8e421517dfc8501178399cb2a435e63306" translate="yes" xml:space="preserve">
          <source>Note the following:</source>
          <target state="translated">以下に注意してください。</target>
        </trans-unit>
        <trans-unit id="143069908049a001ca51a83cef0a8d3fcbe11397" translate="yes" xml:space="preserve">
          <source>Notice that each execution of a &lt;b&gt;local&lt;/b&gt; statement defines new local variables. Consider the following example:</source>
          <target state="translated">&lt;b&gt;ローカル&lt;/b&gt;ステートメントを実行するたびに、新しいローカル変数が定義されることに注意してください。次の例について考えてみます。</target>
        </trans-unit>
        <trans-unit id="fcc164423a09d2953e5486a056f1e10293de0711" translate="yes" xml:space="preserve">
          <source>Notice that, in a declaration like &lt;code&gt;local x = x&lt;/code&gt;, the new &lt;code&gt;x&lt;/code&gt; being declared is not in scope yet, and so the second &lt;code&gt;x&lt;/code&gt; refers to the outside variable.</source>
          <target state="translated">&lt;code&gt;local x = x&lt;/code&gt; ような宣言では、宣言される新しい &lt;code&gt;x&lt;/code&gt; はまだスコープ内にないため、2番目の &lt;code&gt;x&lt;/code&gt; は外部変数を参照していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d213f09117ec25cd2306bbea812a90e0c2b8aabb" translate="yes" xml:space="preserve">
          <source>Now we want to allow the Lua code being run by &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; to yield. First, we can rewrite our function like here:</source>
          <target state="translated">ここで、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;によって実行されるLuaコードが生成されるようにします。まず、次のように関数を書き換えます。</target>
        </trans-unit>
        <trans-unit id="754d929d0f6f3e09a813d3e11d5cb6448eada594" translate="yes" xml:space="preserve">
          <source>Numerals and literal strings are explained in &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;; variables are explained in &lt;a href=&quot;#3.2&quot;&gt;&amp;sect;3.2&lt;/a&gt;; function definitions are explained in &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;; function calls are explained in &lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10&lt;/a&gt;; table constructors are explained in &lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9&lt;/a&gt;. Vararg expressions, denoted by three dots ('&lt;code&gt;...&lt;/code&gt;'), can only be used when directly inside a vararg function; they are explained in &lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11&lt;/a&gt;.</source>
          <target state="translated">数字とリテラル文字列については、&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1で&lt;/a&gt;説明しています。変数については、&lt;a href=&quot;#3.2&quot;&gt;&amp;sect;3.2で&lt;/a&gt;説明しています。関数定義は&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11で&lt;/a&gt;説明されています。関数呼び出しについては、&lt;a href=&quot;#3.4.10&quot;&gt;&amp;sect;3.4.10で&lt;/a&gt;説明しています。テーブルコンストラクタについては、&lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9で&lt;/a&gt;説明しています。3つのドット（ ' &lt;code&gt;...&lt;/code&gt; '）で示されるVararg式は、vararg関数内で直接使用する場合にのみ使用できます。それらは&lt;a href=&quot;#3.4.11&quot;&gt;&amp;sect;3.4.11で&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="4ef3b305c58fad6f6199b8fc85c384f4f0aec1bf" translate="yes" xml:space="preserve">
          <source>Numeric codes are not necessarily portable across platforms.</source>
          <target state="translated">数値コードは必ずしもプラットフォーム間で移植可能とは限りません。</target>
        </trans-unit>
        <trans-unit id="b0a0e9260ed5a6d09f75bd0cd4a96d473084f65f" translate="yes" xml:space="preserve">
          <source>Of course, the location of the Lua interpreter may be different in your machine. If &lt;code&gt;lua&lt;/code&gt; is in your &lt;code&gt;PATH&lt;/code&gt;, then</source>
          <target state="translated">もちろん、Luaインタープリターの場所はマシンによって異なる場合があります。場合は &lt;code&gt;lua&lt;/code&gt; 、あなたの中にある &lt;code&gt;PATH&lt;/code&gt; 、その後、</target>
        </trans-unit>
        <trans-unit id="b1e9a773eef8de621ab2c2acf9814098928b38f7" translate="yes" xml:space="preserve">
          <source>On POSIX systems, this function also creates a file with that name, to avoid security risks. (Someone else might create the file with wrong permissions in the time between getting the name and creating the file.) You still have to open the file to use it and to remove it (even if you do not use it).</source>
          <target state="translated">POSIXシステムでは、セキュリティリスクを避けるために、この関数はその名前のファイルも作成します。(名前を取得してからファイルを作成するまでの間に、誰かが間違った権限でファイルを作成してしまうかもしれません)。ファイルを使用するためには、ファイルを開いて削除する必要があります (使用していなくても)。</target>
        </trans-unit>
        <trans-unit id="b4eb9b31d3cdaa19214342b44ace3c1948a9b1c8" translate="yes" xml:space="preserve">
          <source>On non-POSIX systems, this function may be not thread safe because of its reliance on C function &lt;code&gt;gmtime&lt;/code&gt; and C function &lt;code&gt;localtime&lt;/code&gt;.</source>
          <target state="translated">非POSIXシステムでは、この関数はC関数 &lt;code&gt;gmtime&lt;/code&gt; およびC関数 &lt;code&gt;localtime&lt;/code&gt; に依存しているため、スレッドセーフではない場合があります。</target>
        </trans-unit>
        <trans-unit id="327d9d40cc45661d18c144b659d732ccb083e105" translate="yes" xml:space="preserve">
          <source>On several platforms, you may not need to call this function, because all resources are naturally released when the host program ends. On the other hand, long-running programs that create multiple states, such as daemons or web servers, will probably need to close states as soon as they are not needed.</source>
          <target state="translated">いくつかのプラットフォームでは、ホストプログラムの終了時にすべてのリソースが自然に解放されるので、この関数を呼び出す必要がないかもしれません。一方で、デーモンやウェブサーバのように複数の状態を作成するような長時間稼働するプログラムでは、不要になったらすぐに状態を閉じる必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="087e8ef073a71f75716b2985ce5b0a8533e700f2" translate="yes" xml:space="preserve">
          <source>Once a loader is found, &lt;code&gt;require&lt;/code&gt; calls the loader with two arguments: &lt;code&gt;modname&lt;/code&gt; and an extra value dependent on how it got the loader. (If the loader came from a file, this extra value is the file name.) If the loader returns any non-nil value, &lt;code&gt;require&lt;/code&gt; assigns the returned value to &lt;code&gt;package.loaded[modname]&lt;/code&gt;. If the loader does not return a non-nil value and has not assigned any value to &lt;code&gt;package.loaded[modname]&lt;/code&gt;, then &lt;code&gt;require&lt;/code&gt; assigns &lt;b&gt;true&lt;/b&gt; to this entry. In any case, &lt;code&gt;require&lt;/code&gt; returns the final value of &lt;code&gt;package.loaded[modname]&lt;/code&gt;.</source>
          <target state="translated">ローダーが見つかると、 &lt;code&gt;require&lt;/code&gt; は2つの引数でローダーを呼び出します &lt;code&gt;modname&lt;/code&gt; と、ローダーの取得方法に応じた追加の値です。 （ローダーがファイルからのものである場合、この追加の値はファイル名です。）ローダーが非nil値を返す場合、 &lt;code&gt;require&lt;/code&gt; は返された値を &lt;code&gt;package.loaded[modname]&lt;/code&gt; 割り当てます。ローダーが非nil値を返さず、 &lt;code&gt;package.loaded[modname]&lt;/code&gt; 値を割り当てていない場合、 &lt;code&gt;require&lt;/code&gt; はこのエントリに&lt;b&gt;true&lt;/b&gt;を割り当て&lt;b&gt;ます&lt;/b&gt;。いずれの場合も、 &lt;code&gt;require&lt;/code&gt; は &lt;code&gt;package.loaded[modname]&lt;/code&gt; 最終値を返します。</target>
        </trans-unit>
        <trans-unit id="cf51682813139c6b06902191dce5e737d2d9c9a1" translate="yes" xml:space="preserve">
          <source>Once a loader is found, &lt;code&gt;require&lt;/code&gt; calls the loader with two arguments: &lt;code&gt;modname&lt;/code&gt; and an extra value, a &lt;em&gt;loader data&lt;/em&gt;, also returned by the searcher. The loader data can be any value useful to the module; for the default searchers, it indicates where the loader was found. (For instance, if the loader came from a file, this extra value is the file path.) If the loader returns any non-nil value, &lt;code&gt;require&lt;/code&gt; assigns the returned value to &lt;code&gt;package.loaded[modname]&lt;/code&gt;. If the loader does not return a non-nil value and has not assigned any value to &lt;code&gt;package.loaded[modname]&lt;/code&gt;, then &lt;code&gt;require&lt;/code&gt; assigns &lt;b&gt;true&lt;/b&gt; to this entry. In any case, &lt;code&gt;require&lt;/code&gt; returns the final value of &lt;code&gt;package.loaded[modname]&lt;/code&gt;. Besides that value, &lt;code&gt;require&lt;/code&gt; also returns as a second result the loader data returned by the searcher, which indicates how &lt;code&gt;require&lt;/code&gt; found the module.</source>
          <target state="translated">ローダーが見つかると、 &lt;code&gt;require&lt;/code&gt; は、 &lt;code&gt;modname&lt;/code&gt; と追加の値である&lt;em&gt;ローダーデータの&lt;/em&gt;2つの引数を使用してローダーを呼び出します。これも、サーチャーによって返されます。ローダーデータは、モジュールに役立つ任意の値にすることができます。デフォルトのサーチャーの場合、ローダーが見つかった場所を示します。 （たとえば、ローダーがファイルからのものである場合、この追加の値はファイルパスです。）ローダーがnil以外の値を返す場合、 &lt;code&gt;require&lt;/code&gt; は戻り値を &lt;code&gt;package.loaded[modname]&lt;/code&gt; 割り当てます。ローダーがnil以外の値を返さず、 &lt;code&gt;package.loaded[modname]&lt;/code&gt; 値を割り当てていない場合、 &lt;code&gt;require&lt;/code&gt; はこのエントリに&lt;b&gt;true&lt;/b&gt;を割り当て&lt;b&gt;ます&lt;/b&gt;。いずれの場合も、 &lt;code&gt;require&lt;/code&gt; &lt;code&gt;package.loaded[modname]&lt;/code&gt; の最終値を返します。その値に加えて、 &lt;code&gt;require&lt;/code&gt; は、2番目の結果として、サーチャーによって返されたローダーデータも返します。これは、 &lt;code&gt;require&lt;/code&gt; がモジュールをどのように見つけたかを示します。</target>
        </trans-unit>
        <trans-unit id="c0f13732846387f19dd5d62a467bb6af8a9e77c4" translate="yes" xml:space="preserve">
          <source>Only objects that have an explicit construction are removed from weak tables. Values, such as numbers and light C functions, are not subject to garbage collection, and therefore are not removed from weak tables (unless their associated values are collected). Although strings are subject to garbage collection, they do not have an explicit construction and their equality is by value; they behave more like values than like objects. Therefore, they are not removed from weak tables.</source>
          <target state="translated">明示的な構造を持つオブジェクトのみが弱いテーブルから削除されます。数値や軽いC関数のような値はガベージコレクションの対象ではないので、弱いテーブルからは削除されません(関連する値が収集されない限り)。文字列はガベージコレクションの対象となりますが、明示的な構造を持っておらず、その等質性は値によるものです。したがって、弱いテーブルからは削除されません。</target>
        </trans-unit>
        <trans-unit id="dd79eaea9e398294fa6609bcc37919375540b811" translate="yes" xml:space="preserve">
          <source>Only objects that have an explicit construction are removed from weak tables. Values, such as numbers and light C functions, are not subject to garbage collection, and therefore are not removed from weak tables (unless their associated values are collected). Although strings are subject to garbage collection, they do not have an explicit construction, and therefore are not removed from weak tables.</source>
          <target state="translated">明示的な構造を持つオブジェクトのみが弱いテーブルから削除されます。数値や軽度のC関数のような値はガベージコレクションの対象ではないので、弱いテーブルからは削除されません(関連する値が収集されない限り)。文字列はガベージコレクションの対象となりますが、明示的な構造を持たないため、弱いテーブルからは削除されません。</target>
        </trans-unit>
        <trans-unit id="b08de619674921c221a144a642faade8131401ce" translate="yes" xml:space="preserve">
          <source>Opens all standard Lua libraries into the given state.</source>
          <target state="translated">すべての標準Luaライブラリを指定された状態で開きます。</target>
        </trans-unit>
        <trans-unit id="fed8115b8cb0d575a6d2ddd5024ea0f4b7c2651d" translate="yes" xml:space="preserve">
          <source>Opens the given file name in read mode and returns an iterator function that works like &lt;code&gt;file:lines(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; over the opened file. When the iterator function detects the end of file, it returns no values (to finish the loop) and automatically closes the file.</source>
          <target state="translated">指定されたファイル名を読み取りモードで開き、開いたファイルに対して &lt;code&gt;file:lines(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; のように機能する反復関数を返します。イテレータ関数はファイルの終わりを検出すると、値を返さず（ループを終了するため）、ファイルを自動的に閉じます。</target>
        </trans-unit>
        <trans-unit id="94b0d085d949942fdb3fb646a2df4ce4d0e5c72f" translate="yes" xml:space="preserve">
          <source>Opens the given file name in read mode and returns an iterator function that works like &lt;code&gt;file:lines(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; over the opened file. When the iterator function fails to read any value, it automatically closes the file. Besides the iterator function, &lt;code&gt;io.lines&lt;/code&gt; returns three other values: two &lt;b&gt;nil&lt;/b&gt; values as placeholders, plus the created file handle. Therefore, when used in a generic &lt;b&gt;for&lt;/b&gt; loop, the file is closed also if the loop is interrupted by an error or a &lt;b&gt;break&lt;/b&gt;.</source>
          <target state="translated">指定されたファイル名を読み取りモードで開き、開いたファイルに対して &lt;code&gt;file:lines(&amp;middot;&amp;middot;&amp;middot;)&lt;/code&gt; のように機能するイテレーター関数を返します。イテレータ関数が値の読み取りに失敗すると、ファイルを自動的に閉じます。イテレータ関数に &lt;code&gt;io.lines&lt;/code&gt; 、io.linesは他の3つの値を返します。プレースホルダーとしての2つの&lt;b&gt;nil&lt;/b&gt;値と、作成されたファイルハンドルです。したがって、ジェネリック&lt;b&gt;for&lt;/b&gt;ループで使用すると、エラーまたは&lt;b&gt;ブレーク&lt;/b&gt;によってループが中断された場合にもファイルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="6c9790a0effb3e0767d24700689fb5bce0eb0f23" translate="yes" xml:space="preserve">
          <source>Opens the named file and executes its content as a Lua chunk. When called without arguments, &lt;code&gt;dofile&lt;/code&gt; executes the content of the standard input (&lt;code&gt;stdin&lt;/code&gt;). Returns all values returned by the chunk. In case of errors, &lt;code&gt;dofile&lt;/code&gt; propagates the error to its caller. (That is, &lt;code&gt;dofile&lt;/code&gt; does not run in protected mode.)</source>
          <target state="translated">名前付きファイルを開き、そのコンテンツをLuaチャンクとして実行します。引数なしで呼び出されると、 &lt;code&gt;dofile&lt;/code&gt; は標準入力（ &lt;code&gt;stdin&lt;/code&gt; ）の内容を実行します。チャンクによって返されるすべての値を返します。エラーが発生した場合、 &lt;code&gt;dofile&lt;/code&gt; はエラーを呼び出し元に伝播します。（つまり、 &lt;code&gt;dofile&lt;/code&gt; は保護モードでは実行されません。）</target>
        </trans-unit>
        <trans-unit id="4996bd3a029769976e9b98ed2378b1547c48ce7d" translate="yes" xml:space="preserve">
          <source>Opens the named file and executes its contents as a Lua chunk. When called without arguments, &lt;code&gt;dofile&lt;/code&gt; executes the contents of the standard input (&lt;code&gt;stdin&lt;/code&gt;). Returns all values returned by the chunk. In case of errors, &lt;code&gt;dofile&lt;/code&gt; propagates the error to its caller (that is, &lt;code&gt;dofile&lt;/code&gt; does not run in protected mode).</source>
          <target state="translated">指定されたファイルを開き、その内容をLuaチャンクとして実行します。引数なしで呼び出されると、 &lt;code&gt;dofile&lt;/code&gt; は標準入力（ &lt;code&gt;stdin&lt;/code&gt; ）の内容を実行します。チャンクによって返されたすべての値を返します。エラーが発生した場合、 &lt;code&gt;dofile&lt;/code&gt; は呼び出し元にエラーを伝達します（つまり、 &lt;code&gt;dofile&lt;/code&gt; はプロテクトモードで実行されません）。</target>
        </trans-unit>
        <trans-unit id="1b77184a8e40f826198903ec77c88ff94fba7356" translate="yes" xml:space="preserve">
          <source>Operator precedence in Lua follows the table below, from lower to higher priority:</source>
          <target state="translated">Lua の演算子の優先順位は以下の表の通りです。</target>
        </trans-unit>
        <trans-unit id="5d68118be76331913c2ce7bb079ac0bdce1e02a7" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;s&lt;/code&gt; expects a string; if its argument is not a string, it is converted to one following the same rules of &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt;. If the option has any modifier (flags, width, length), the string argument should not contain embedded zeros.</source>
          <target state="translated">オプション &lt;code&gt;s&lt;/code&gt; には文字列が必要です。引数が文字列でない場合は、&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;と同じ規則に従って変換されます。オプションに修飾子（フラグ、幅、長さ）がある場合、文字列引数にゼロが埋め込まれていてはなりません。</target>
        </trans-unit>
        <trans-unit id="87ca1fbe6a8feba28ed3fc6964e861a77643303f" translate="yes" xml:space="preserve">
          <source>Option names in &lt;a href=&quot;#pdf-io.read&quot;&gt;&lt;code&gt;io.read&lt;/code&gt;&lt;/a&gt; do not have a starting '&lt;code&gt;*&lt;/code&gt;' anymore. For compatibility, Lua will continue to accept (and ignore) this character.</source>
          <target state="translated">&lt;a href=&quot;#pdf-io.read&quot;&gt; &lt;code&gt;io.read&lt;/code&gt; の&lt;/a&gt;オプション名には、先頭に「 &lt;code&gt;*&lt;/code&gt; 」がありません。互換性のために、Luaはこの文字を引き続き受け入れます（無視します）。</target>
        </trans-unit>
        <trans-unit id="b8e36de59136b88fc2be5c019f1c1af0d901d853" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;g&lt;/code&gt; all expect a number as argument. Options &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; expect an integer. When Lua is compiled with a C89 compiler, options &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; (hexadecimal floats) do not support any modifier (flags, width, length).</source>
          <target state="translated">オプション &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;E&lt;/code&gt; 、 &lt;code&gt;e&lt;/code&gt; 、 &lt;code&gt;f&lt;/code&gt; 、 &lt;code&gt;G&lt;/code&gt; 、および &lt;code&gt;g&lt;/code&gt; はすべて、引数として数値を期待します。オプション &lt;code&gt;c&lt;/code&gt; 、 &lt;code&gt;d&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;o&lt;/code&gt; 、 &lt;code&gt;u&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; 、および &lt;code&gt;x&lt;/code&gt; には整数が必要です。LuaがC89コンパイラーでコンパイルされる場合、オプション &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;a&lt;/code&gt; （16進浮動小数点数）は修飾子（フラグ、幅、長さ）をサポートしません。</target>
        </trans-unit>
        <trans-unit id="8a1abeaa4ebe74d5340ad5d927126ab129362a92" translate="yes" xml:space="preserve">
          <source>Otherwise, returns three values: the &lt;a href=&quot;#pdf-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; function, the table &lt;code&gt;t&lt;/code&gt;, and &lt;b&gt;nil&lt;/b&gt;, so that the construction</source>
          <target state="translated">そうでなければ、三つの値を返す：&lt;a href=&quot;#pdf-next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;関数、テーブル &lt;code&gt;t&lt;/code&gt; 、および&lt;b&gt;nilの&lt;/b&gt;ように、建設</target>
        </trans-unit>
        <trans-unit id="178c0a8da555da3fb52bb9fe10047627cb505e75" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;ar&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in function &lt;a href=&quot;#lua_getlocal&quot;&gt;&lt;code&gt;lua_getlocal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;ar&lt;/code&gt; および &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getlocal&quot;&gt; &lt;code&gt;lua_getlocal&lt;/code&gt; の&lt;/a&gt;場合と同じです。</target>
        </trans-unit>
        <trans-unit id="8dc64fc2f4cd99c0ced65561a7ce6e7af2b4bf51" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;ar&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in the function &lt;a href=&quot;#lua_getlocal&quot;&gt;&lt;code&gt;lua_getlocal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;ar&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getlocal&quot;&gt; &lt;code&gt;lua_getlocal&lt;/code&gt; と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="6ea29796519b03e49b8f299281d87fde989109ec" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;funcindex&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in function &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;, but &lt;code&gt;n&lt;/code&gt; cannot be greater than the number of upvalues.</source>
          <target state="translated">パラメータ &lt;code&gt;funcindex&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は関数&lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; と同じ&lt;/a&gt;ですが、 &lt;code&gt;n&lt;/code&gt; はアップ値の数より大きくすることはできません。</target>
        </trans-unit>
        <trans-unit id="430e32c1c643e4f1d035c6b28b1a7ed4bf4a0eac" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;funcindex&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in function &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;funcindex&lt;/code&gt; および &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; と同じ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="bc00bbb5ef17f161e882643cc3eb1de5624c1761" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;funcindex&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in the function &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;, but &lt;code&gt;n&lt;/code&gt; cannot be greater than the number of upvalues.</source>
          <target state="translated">パラメータ &lt;code&gt;funcindex&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; と同じ&lt;/a&gt;ですが、 &lt;code&gt;n&lt;/code&gt; はアップバリューの数より大きくすることはできません。</target>
        </trans-unit>
        <trans-unit id="d4fbfbc25528bfc37258607c935be76b6d23f936" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;funcindex&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; are as in the function &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;funcindex&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は、関数&lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; と同じ&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="ed5ec09aef437013e06ea8a8354f4fd26022ed2a" translate="yes" xml:space="preserve">
          <source>Parameters act as local variables that are initialized with the argument values:</source>
          <target state="translated">パラメータは、引数の値で初期化されるローカル変数として動作します。</target>
        </trans-unit>
        <trans-unit id="448ecaf1d946410d7f3122c5e30729943106812b" translate="yes" xml:space="preserve">
          <source>Pattern Item:</source>
          <target state="translated">パターンアイテム</target>
        </trans-unit>
        <trans-unit id="5da899e9024f2b8d94cc4514fe33d4ff85310e83" translate="yes" xml:space="preserve">
          <source>Pattern:</source>
          <target state="translated">Pattern:</target>
        </trans-unit>
        <trans-unit id="4d34f7a2b0b3b6df62a051917d7e7ac2de8a38df" translate="yes" xml:space="preserve">
          <source>Patterns</source>
          <target state="translated">Patterns</target>
        </trans-unit>
        <trans-unit id="8d2dcea1a0ef2ec1d9376ec9b8afe27c3f59c3e3" translate="yes" xml:space="preserve">
          <source>Patterns in Lua are described by regular strings, which are interpreted as patterns by the pattern-matching functions &lt;a href=&quot;#pdf-string.find&quot;&gt;&lt;code&gt;string.find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-string.gmatch&quot;&gt;&lt;code&gt;string.gmatch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-string.gsub&quot;&gt;&lt;code&gt;string.gsub&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-string.match&quot;&gt;&lt;code&gt;string.match&lt;/code&gt;&lt;/a&gt;. This section describes the syntax and the meaning (that is, what they match) of these strings.</source>
          <target state="translated">Luaのパターンは通常の文字列で記述され、パターンマッチング関数&lt;a href=&quot;#pdf-string.find&quot;&gt; &lt;code&gt;string.find&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-string.gmatch&quot;&gt; &lt;code&gt;string.gmatch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-string.gsub&quot;&gt; &lt;code&gt;string.gsub&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#pdf-string.match&quot;&gt; &lt;code&gt;string.match&lt;/code&gt; &lt;/a&gt;によってパターンとして解釈されます。このセクションでは、これらの文字列の構文と意味（つまり、一致するもの）について説明します。</target>
        </trans-unit>
        <trans-unit id="dc7394297e26f026260d375d7cd96592fbd9339e" translate="yes" xml:space="preserve">
          <source>Performs an arithmetic or bitwise operation over the two values (or one, in the case of negations) at the top of the stack, with the value at the top being the second operand, pops these values, and pushes the result of the operation. The function follows the semantics of the corresponding Lua operator (that is, it may call metamethods).</source>
          <target state="translated">スタックの先頭の値を 2 番目のオペランドとして、スタックの先頭にある 2 つの値 (否定の場合は 1 つ)に対して算術演算またはビット演算を行い、これらの値をポップし、演算結果をプッシュします。この関数は、対応する Lua 演算子のセマンティクスに従います (つまり、メタメソッドを呼び出すことができます)。</target>
        </trans-unit>
        <trans-unit id="1fd5e0033b4343c024b4c61550d5dda42703ec57" translate="yes" xml:space="preserve">
          <source>Performs an arithmetic or bitwise operation over the two values (or one, in the case of negations) at the top of the stack, with the value on the top being the second operand, pops these values, and pushes the result of the operation. The function follows the semantics of the corresponding Lua operator (that is, it may call metamethods).</source>
          <target state="translated">スタックの先頭にある 2 つの値 (否定の場合は 1 つ)に対して算術演算またはビット演算を実行し、先頭の値を 2 番目のオペランドとします。この関数は、対応する Lua 演算子のセマンティクスに従います (つまり、メタメソッドを呼び出すことができます)。</target>
        </trans-unit>
        <trans-unit id="ee7dc30bd933bbb4baaecee808c6149d39035466" translate="yes" xml:space="preserve">
          <source>Pointers to strings</source>
          <target state="translated">文字列へのポインタ</target>
        </trans-unit>
        <trans-unit id="1299b0bc498833db75f9cf0fffff3c4bae0facff" translate="yes" xml:space="preserve">
          <source>Pops &lt;code&gt;n&lt;/code&gt; elements from the stack.</source>
          <target state="translated">スタックから &lt;code&gt;n&lt;/code&gt; 個の要素をポップします。</target>
        </trans-unit>
        <trans-unit id="fcc747279637a2d8a447881433d9aea7cb9cb559" translate="yes" xml:space="preserve">
          <source>Pops a key from the stack, and pushes a key&amp;ndash;value pair from the table at the given index (the &quot;next&quot; pair after the given key). If there are no more elements in the table, then &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt; returns 0 (and pushes nothing).</source>
          <target state="translated">スタックからキーをポップし、指定されたインデックスにあるテーブルからキーと値のペアをプッシュします（指定されたキーの次のペア）。テーブルに要素がなくなると、&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; &lt;/a&gt;は0を返します（何もプッシュしません）。</target>
        </trans-unit>
        <trans-unit id="d60cca5dd50e4b83932b42fd8d8d9fbffe7a1bc8" translate="yes" xml:space="preserve">
          <source>Pops a key from the stack, and pushes a key&amp;ndash;value pair from the table at the given index, the &quot;next&quot; pair after the given key. If there are no more elements in the table, then &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt; returns 0 and pushes nothing.</source>
          <target state="translated">スタックからキーをポップし、指定されたインデックスのテーブルからキーと値のペア、指定されたキーの次の「次の」ペアをプッシュします。テーブルにこれ以上要素がない場合、&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; &lt;/a&gt;は0を返し、何もプッシュしません。</target>
        </trans-unit>
        <trans-unit id="38ce2b2d648784be385652bd2405ecdc4f5fbdbc" translate="yes" xml:space="preserve">
          <source>Pops a table from the stack and sets it as the new metatable for the value at the given index.</source>
          <target state="translated">スタックからテーブルをポップして、それを指定されたインデックスの値の新しいメタテーブルとして設定します。</target>
        </trans-unit>
        <trans-unit id="3748a23e8606e10be9753871f0543fd3b3c035b8" translate="yes" xml:space="preserve">
          <source>Pops a table or &lt;b&gt;nil&lt;/b&gt; from the stack and sets that value as the new metatable for the value at the given index. (&lt;b&gt;nil&lt;/b&gt; means no metatable.)</source>
          <target state="translated">スタックからテーブルまたは&lt;b&gt;nil&lt;/b&gt;をポップし、その値を指定されたインデックスの値の新しいメタテーブルとして設定します。（&lt;b&gt;nil&lt;/b&gt;はメタテーブルがないことを意味します。）</target>
        </trans-unit>
        <trans-unit id="02cbea7516afa5834e8becd7f7d4a828165b122a" translate="yes" xml:space="preserve">
          <source>Pops a value from the stack and sets it as the new &lt;code&gt;n&lt;/code&gt;-th user value associated to the full userdata at the given index. Returns 0 if the userdata does not have that value.</source>
          <target state="translated">スタックから値をポップし、指定されたインデックスの完全なユーザーデータに関連付けられた新しい &lt;code&gt;n&lt;/code&gt; 番目のユーザー値として設定します。userdataにその値がない場合は、0を返します。</target>
        </trans-unit>
        <trans-unit id="9e0a9d18a088445b817b9df7884bfcb32d185882" translate="yes" xml:space="preserve">
          <source>Pops a value from the stack and sets it as the new value associated to the full userdata at the given index.</source>
          <target state="translated">スタックから値をポップし、指定されたインデックスの完全な userdata に関連付けられた新しい値として設定します。</target>
        </trans-unit>
        <trans-unit id="e2b2f785858d2ccd19fa2b3c3174e4f53334d580" translate="yes" xml:space="preserve">
          <source>Pops a value from the stack and sets it as the new value of global &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">スタックから値をポップし、それをグローバル &lt;code&gt;name&lt;/code&gt; 新しい値として設定します。</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="38891db011f7fa7075e0b3b67c891847a651262c" translate="yes" xml:space="preserve">
          <source>Pushes a C function onto the stack. This function is equivalent to &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; with no upvalues.</source>
          <target state="translated">C関数をスタックにプッシュします。この関数は、&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;ないlua_pushcclosureと同等です。</target>
        </trans-unit>
        <trans-unit id="6069e3ce33f065015c2dc7cf19747d682b66d1cb" translate="yes" xml:space="preserve">
          <source>Pushes a C function onto the stack. This function receives a pointer to a C function and pushes onto the stack a Lua value of type &lt;code&gt;function&lt;/code&gt; that, when called, invokes the corresponding C function.</source>
          <target state="translated">C関数をスタックにプッシュします。この関数は、C関数へのポインターを受け取り、呼び出されたときに対応するC関数を呼び出す &lt;code&gt;function&lt;/code&gt; 型のLua値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="225557cebb89115cc93c59763f61b47f6e9246c5" translate="yes" xml:space="preserve">
          <source>Pushes a boolean value with value &lt;code&gt;b&lt;/code&gt; onto the stack.</source>
          <target state="translated">値 &lt;code&gt;b&lt;/code&gt; のブール値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="894000f061d35d3982475e83383dc72799631571" translate="yes" xml:space="preserve">
          <source>Pushes a copy of the element at the given index onto the stack.</source>
          <target state="translated">指定されたインデックスの要素のコピーをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="b6ff7b2e435c0e0bd4a4dbe8af13548197a7ba1c" translate="yes" xml:space="preserve">
          <source>Pushes a float with value &lt;code&gt;n&lt;/code&gt; onto the stack.</source>
          <target state="translated">値 &lt;code&gt;n&lt;/code&gt; のフロートをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="1b7c742fb6acbbb7614fff04126bb1d65108509f" translate="yes" xml:space="preserve">
          <source>Pushes a light userdata onto the stack.</source>
          <target state="translated">ライトのユーザデータをスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="f9640c606650c6c3b185fb6d556165b919470195" translate="yes" xml:space="preserve">
          <source>Pushes a new C closure onto the stack.</source>
          <target state="translated">新しいCのクロージャをスタックに押し付けます。</target>
        </trans-unit>
        <trans-unit id="783ef23f706b3af65f922bb64840e0a1f3a3b44a" translate="yes" xml:space="preserve">
          <source>Pushes a new C closure onto the stack. This function receives a pointer to a C function and pushes onto the stack a Lua value of type &lt;code&gt;function&lt;/code&gt; that, when called, invokes the corresponding C function. The parameter &lt;code&gt;n&lt;/code&gt; tells how many upvalues this function will have (see &lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2&lt;/a&gt;).</source>
          <target state="translated">新しいCクロージャーをスタックにプッシュします。この関数は、スタック型のLuaの値C関数とプッシュへのポインタを受信する &lt;code&gt;function&lt;/code&gt; 、呼び出されたとき、対応するC関数を呼び出します。パラメータ &lt;code&gt;n&lt;/code&gt; は、この関数が持つアップバリューの数を示します（&lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f1a59444f671b252069eb2dc564dace63fe90d50" translate="yes" xml:space="preserve">
          <source>Pushes a nil value onto the stack.</source>
          <target state="translated">nil の値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="2ac334edd538c29ffe856d049cab16b02559c4e6" translate="yes" xml:space="preserve">
          <source>Pushes an integer with value &lt;code&gt;n&lt;/code&gt; onto the stack.</source>
          <target state="translated">値 &lt;code&gt;n&lt;/code&gt; の整数をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="f8ab0829fe517855f739ffae026b3c01efbb88ce" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack a formatted string and returns a pointer to this string (see &lt;a href=&quot;#4.1.3&quot;&gt;&amp;sect;4.1.3&lt;/a&gt;). It is similar to the ISO C function &lt;code&gt;sprintf&lt;/code&gt;, but has two important differences. First, you do not have to allocate space for the result; the result is a Lua string and Lua takes care of memory allocation (and deallocation, through garbage collection). Second, the conversion specifiers are quite restricted. There are no flags, widths, or precisions. The conversion specifiers can only be '&lt;code&gt;%%&lt;/code&gt;' (inserts the character '&lt;code&gt;%&lt;/code&gt;'), '&lt;code&gt;%s&lt;/code&gt;' (inserts a zero-terminated string, with no size restrictions), '&lt;code&gt;%f&lt;/code&gt;' (inserts a &lt;a href=&quot;#lua_Number&quot;&gt;&lt;code&gt;lua_Number&lt;/code&gt;&lt;/a&gt;), '&lt;code&gt;%I&lt;/code&gt;' (inserts a &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;), '&lt;code&gt;%p&lt;/code&gt;' (inserts a pointer), '&lt;code&gt;%d&lt;/code&gt;' (inserts an &lt;code&gt;int&lt;/code&gt;), '&lt;code&gt;%c&lt;/code&gt;' (inserts an &lt;code&gt;int&lt;/code&gt; as a one-byte character), and '&lt;code&gt;%U&lt;/code&gt;' (inserts a &lt;code&gt;long int&lt;/code&gt; as a UTF-8 byte sequence).</source>
          <target state="translated">フォーマットされた文字列をスタックに&lt;a href=&quot;#4.1.3&quot;&gt;プッシュ&lt;/a&gt;し、この文字列へのポインタを返します（&amp;sect;4.1.3を参照）。これは &lt;code&gt;sprintf&lt;/code&gt; 関数sprintfに似ていますが、2つの重要な違いがあります。まず、結果にスペースを割り当てる必要はありません。結果はLua文字列であり、Luaがメモリ割り当て（およびガベージコレクションによる割り当て解除）を処理します。第二に、変換指定子はかなり制限されています。フラグ、幅、または精度はありません。変換指定子は、 ' &lt;code&gt;%%&lt;/code&gt; '（文字 ' &lt;code&gt;%&lt;/code&gt; 'を挿入）、 ' &lt;code&gt;%s&lt;/code&gt; '（サイズ制限なしで、ゼロで終了する文字列を挿入）、 ' &lt;code&gt;%f&lt;/code&gt; '（&lt;a href=&quot;#lua_Number&quot;&gt; &lt;code&gt;lua_Number&lt;/code&gt; を&lt;/a&gt;挿入）、 ' &lt;code&gt;%I&lt;/code&gt; のみです。 '（を挿入します&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; &lt;/a&gt;）、 ' &lt;code&gt;%p&lt;/code&gt; '（ポインタを挿入）、 ' &lt;code&gt;%d&lt;/code&gt; '（ &lt;code&gt;int&lt;/code&gt; を挿入）、 ' &lt;code&gt;%c&lt;/code&gt; '（ &lt;code&gt;int&lt;/code&gt; を1バイト文字として挿入）、および ' &lt;code&gt;%U&lt;/code&gt; '（ &lt;code&gt;long int&lt;/code&gt; をとして挿入）UTF-8バイトシーケンス）。</target>
        </trans-unit>
        <trans-unit id="ebf2182a4bd44a4ababe6986cdc0d46624511d6f" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack a formatted string and returns a pointer to this string. It is similar to the ISO C function &lt;code&gt;sprintf&lt;/code&gt;, but has some important differences:</source>
          <target state="translated">スタックにフォーマットされた文字列をプッシュし、この文字列へのポインタを返します。ISO C関数 &lt;code&gt;sprintf&lt;/code&gt; に似ていますが、いくつかの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="e3eb6979dbbec2441c887e7c302c341c3e2193b2" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack a string identifying the current position of the control at level &lt;code&gt;lvl&lt;/code&gt; in the call stack. Typically this string has the following format:</source>
          <target state="translated">呼び出しスタックのレベル &lt;code&gt;lvl&lt;/code&gt; にあるコントロールの現在の位置を識別する文字列をスタックにプッシュします。通常、この文字列の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="31d25d3d93b7e126c80bd4b8ac83684541597116" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the &lt;code&gt;n&lt;/code&gt;-th user value associated with the full userdata at the given index and returns the type of the pushed value.</source>
          <target state="translated">指定されたインデックスの完全なユーザーデータに関連付けられた &lt;code&gt;n&lt;/code&gt; 番目のユーザー値をスタックにプッシュし、プッシュされた値のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="1400d6038d9c13c6266dab4b80bdcdd7fc31a04b" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the Lua value associated with the full userdata at the given index.</source>
          <target state="translated">指定されたインデックスの完全なuserdataに関連付けられたLua値をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="96d78a717bd5f3b49461732d2e8f02559185b11e" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the field &lt;code&gt;e&lt;/code&gt; from the metatable of the object at index &lt;code&gt;obj&lt;/code&gt; and returns the type of pushed value. If the object does not have a metatable, or if the metatable does not have this field, pushes nothing and returns &lt;code&gt;LUA_TNIL&lt;/code&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;obj&lt;/code&gt; にあるオブジェクトのメタテーブルからフィールド &lt;code&gt;e&lt;/code&gt; をスタックにプッシュし、プッシュされた値のタイプを返します。オブジェクトにメタテーブルがない場合、またはメタテーブルにこのフィールドがない場合は、何もプッシュせずに &lt;code&gt;LUA_TNIL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d063d65f8ebdd7680c71182f22ecc37ef6878b23" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the field &lt;code&gt;e&lt;/code&gt; from the metatable of the object at index &lt;code&gt;obj&lt;/code&gt; and returns the type of the pushed value. If the object does not have a metatable, or if the metatable does not have this field, pushes nothing and returns &lt;code&gt;LUA_TNIL&lt;/code&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;obj&lt;/code&gt; にあるオブジェクトのメタテーブルからフィールド &lt;code&gt;e&lt;/code&gt; をスタックにプッシュし、プッシュされた値のタイプを返します。オブジェクトにメタテーブルがない場合、またはメタテーブルにこのフィールドがない場合は、何もプッシュせずに &lt;code&gt;LUA_TNIL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6a3ae7b655cf9df13c5b9cf6975aa8b58442402" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the metatable associated with name &lt;code&gt;tname&lt;/code&gt; in the registry (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;) (&lt;b&gt;nil&lt;/b&gt; if there is no metatable associated with that name). Returns the type of the pushed value.</source>
          <target state="translated">レジストリの名前 &lt;code&gt;tname&lt;/code&gt; に関連付けられたメタテーブルをスタックにプッシュします（&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）（その名前に関連付けられたメタテーブルがない場合は&lt;b&gt;nil&lt;/b&gt;）。プッシュされた値のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="c76c4d4c11e0c9e0d1f805bd491ba2da9880963e" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the metatable associated with the name &lt;code&gt;tname&lt;/code&gt; in the registry (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;), or &lt;b&gt;nil&lt;/b&gt; if there is no metatable associated with that name. Returns the type of the pushed value.</source>
          <target state="translated">レジストリ内の名前 &lt;code&gt;tname&lt;/code&gt; に関連付けられたメタテーブル（&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）をスタックにプッシュします。その名前に関連付けられたメタテーブルがない場合は&lt;b&gt;nil&lt;/b&gt;をプッシュします。プッシュされた値のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="3681d4e1cdd569fb3b2f3300755bb4d0cfb69c67" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[i]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index. As in Lua, this function may trigger a metamethod for the &quot;index&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">スタックに値 &lt;code&gt;t[i]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値です。Luaと同様に、この関数は「index」イベントの&lt;a href=&quot;#2.4&quot;&gt;メタメソッドを&lt;/a&gt;トリガーする場合があります（&amp;sect;2.4を参照）。</target>
        </trans-unit>
        <trans-unit id="160cbb51fcadb575239ec804bbd26447a616f853" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index and &lt;code&gt;k&lt;/code&gt; is the pointer &lt;code&gt;p&lt;/code&gt; represented as a light userdata. The access is raw; that is, it does not invoke the &lt;code&gt;__index&lt;/code&gt; metamethod.</source>
          <target state="translated">スタックに値 &lt;code&gt;t[k]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルであり、 &lt;code&gt;k&lt;/code&gt; は軽いユーザーデータとして表されるポインター &lt;code&gt;p&lt;/code&gt; です。アクセスは未加工です。つまり、 &lt;code&gt;__index&lt;/code&gt; メタメソッドを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="f758b684030c5bdc751c5b58b931a7f7b9972806" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index and &lt;code&gt;k&lt;/code&gt; is the pointer &lt;code&gt;p&lt;/code&gt; represented as a light userdata. The access is raw; that is, it does not use the &lt;code&gt;__index&lt;/code&gt; metavalue.</source>
          <target state="translated">値 &lt;code&gt;t[k]&lt;/code&gt; スタックにプッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルであり、 &lt;code&gt;k&lt;/code&gt; はライトユーザーデータとして表されるポインター &lt;code&gt;p&lt;/code&gt; です。アクセスは生です。つまり、 &lt;code&gt;__index&lt;/code&gt; indexメタ値を使用しません。</target>
        </trans-unit>
        <trans-unit id="9ba28c13e89d272d19c50f5e767726525d936e21" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index and &lt;code&gt;k&lt;/code&gt; is the value at the top of the stack.</source>
          <target state="translated">スタックに値 &lt;code&gt;t[k]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値で、 &lt;code&gt;k&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="2c9f6ce9bcbe6e782d6892ed66ce333a49c1c0f5" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index and &lt;code&gt;k&lt;/code&gt; is the value on the top of the stack.</source>
          <target state="translated">値 &lt;code&gt;t[k]&lt;/code&gt; スタックにプッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値であり、 &lt;code&gt;k&lt;/code&gt; はスタックの最上位の値です。</target>
        </trans-unit>
        <trans-unit id="d433d1f4953100bc2a0c9d7a8e8e092f7c0a5c2a" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[k]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the value at the given index. As in Lua, this function may trigger a metamethod for the &quot;index&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">スタックに値 &lt;code&gt;t[k]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスの値です。Luaと同様に、この関数は「index」イベントの&lt;a href=&quot;#2.4&quot;&gt;メタメソッドを&lt;/a&gt;トリガーする場合があります（&amp;sect;2.4を参照）。</target>
        </trans-unit>
        <trans-unit id="27c3e32a80e22fb604cbe4557acc820d3c5231a7" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[n]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index. The access is raw, that is, it does not invoke the &lt;code&gt;__index&lt;/code&gt; metamethod.</source>
          <target state="translated">スタックに値 &lt;code&gt;t[n]&lt;/code&gt; プッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルです。アクセスはraw です。 &lt;code&gt;__index&lt;/code&gt; 、__ indexメタメソッドを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="dbeb4c059af4ccf3fb9e1fdfc5784413b8117212" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value &lt;code&gt;t[n]&lt;/code&gt;, where &lt;code&gt;t&lt;/code&gt; is the table at the given index. The access is raw, that is, it does not use the &lt;code&gt;__index&lt;/code&gt; metavalue.</source>
          <target state="translated">値 &lt;code&gt;t[n]&lt;/code&gt; スタックにプッシュします。ここで、 &lt;code&gt;t&lt;/code&gt; は指定されたインデックスのテーブルです。アクセスは生です。つまり、 &lt;code&gt;__index&lt;/code&gt; indexメタ値を使用しません。</target>
        </trans-unit>
        <trans-unit id="3adeb92584bb85f61e3f56627b5522106f4dd7b4" translate="yes" xml:space="preserve">
          <source>Pushes onto the stack the value of the global &lt;code&gt;name&lt;/code&gt;. Returns the type of that value.</source>
          <target state="translated">グローバル &lt;code&gt;name&lt;/code&gt; 値をスタックにプッシュします。その値のタイプを返します。</target>
        </trans-unit>
        <trans-unit id="d5f71bf51568746d5ff514f34182d2dde3178d9d" translate="yes" xml:space="preserve">
          <source>Pushes the &lt;b&gt;fail&lt;/b&gt; value onto the stack (see &lt;a href=&quot;#6&quot;&gt;&amp;sect;6&lt;/a&gt;).</source>
          <target state="translated">プッシュ&lt;b&gt;失敗&lt;/b&gt;（参照スタックに値を&lt;a href=&quot;#6&quot;&gt;&amp;sect;6&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="96bb89f8fd253dc6a3b3b23f64ce3135d6817db4" translate="yes" xml:space="preserve">
          <source>Pushes the global environment onto the stack.</source>
          <target state="translated">グローバル環境をスタックにプッシュします。</target>
        </trans-unit>
        <trans-unit id="b8b8e3282a4a6ab4f3ed7c29929c1ea38215b0e1" translate="yes" xml:space="preserve">
          <source>Pushes the string pointed to by &lt;code&gt;s&lt;/code&gt; with size &lt;code&gt;len&lt;/code&gt; onto the stack. Lua makes (or reuses) an internal copy of the given string, so the memory at &lt;code&gt;s&lt;/code&gt; can be freed or reused immediately after the function returns. The string can contain any binary data, including embedded zeros.</source>
          <target state="translated">サイズ &lt;code&gt;len&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; が指す文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成（または再利用）するため、関数が戻った直後に &lt;code&gt;s&lt;/code&gt; のメモリを解放または再利用できます。文字列には、埋め込まれたゼロを含む任意のバイナリデータを含めることができます。</target>
        </trans-unit>
        <trans-unit id="5639aa8221a13af71464ab360f3a38097209c56d" translate="yes" xml:space="preserve">
          <source>Pushes the string pointed to by &lt;code&gt;s&lt;/code&gt; with size &lt;code&gt;len&lt;/code&gt; onto the stack. Lua will make or reuse an internal copy of the given string, so the memory at &lt;code&gt;s&lt;/code&gt; can be freed or reused immediately after the function returns. The string can contain any binary data, including embedded zeros.</source>
          <target state="translated">サイズ &lt;code&gt;len&lt;/code&gt; &lt;code&gt;s&lt;/code&gt; が指す文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成または再利用するため、関数が戻った直後に &lt;code&gt;s&lt;/code&gt; のメモリを解放または再利用できます。文字列には、埋め込まれたゼロを含む任意のバイナリデータを含めることができます。</target>
        </trans-unit>
        <trans-unit id="b6b66a7bc8fe80fa098dee231f5eaec5a6ccedfa" translate="yes" xml:space="preserve">
          <source>Pushes the thread represented by &lt;code&gt;L&lt;/code&gt; onto the stack. Returns 1 if this thread is the main thread of its state.</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; で表されるスレッドをスタックにプッシュします。このスレッドがその状態のメインスレッドである場合、1を返します。</target>
        </trans-unit>
        <trans-unit id="4854f8dce1b3efb397d0da3cc0315b1cfb867e30" translate="yes" xml:space="preserve">
          <source>Pushes the zero-terminated string pointed to by &lt;code&gt;s&lt;/code&gt; onto the stack. Lua makes (or reuses) an internal copy of the given string, so the memory at &lt;code&gt;s&lt;/code&gt; can be freed or reused immediately after the function returns.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が指すゼロで終了する文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成（または再利用）するため、関数が戻った直後に &lt;code&gt;s&lt;/code&gt; のメモリを解放または再利用できます。</target>
        </trans-unit>
        <trans-unit id="8860aa35b65cff58872a8601fb6de276a53dc538" translate="yes" xml:space="preserve">
          <source>Pushes the zero-terminated string pointed to by &lt;code&gt;s&lt;/code&gt; onto the stack. Lua will make or reuse an internal copy of the given string, so the memory at &lt;code&gt;s&lt;/code&gt; can be freed or reused immediately after the function returns.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; が指すゼロで終了する文字列をスタックにプッシュします。Luaは指定された文字列の内部コピーを作成または再利用するため、関数が戻った直後に &lt;code&gt;s&lt;/code&gt; のメモリを解放または再利用できます。</target>
        </trans-unit>
        <trans-unit id="8cfffe2498f662da17fd436630bb5c185a5f3013" translate="yes" xml:space="preserve">
          <source>Raises a Lua error, using the value on the top of the stack as the error object. This function does a long jump, and therefore never returns (see &lt;a href=&quot;#luaL_error&quot;&gt;&lt;code&gt;luaL_error&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">スタックの最上位の値をエラーオブジェクトとして使用して、Luaエラーを発生させます。この関数はロングジャンプを実行するため、戻ることはありません（&lt;a href=&quot;#luaL_error&quot;&gt; &lt;code&gt;luaL_error&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6a9d1916a4b52d4c954d6611c2265a068aa73389" translate="yes" xml:space="preserve">
          <source>Raises a type error for the argument &lt;code&gt;arg&lt;/code&gt; of the C function that called it, using a standard message; &lt;code&gt;tname&lt;/code&gt; is a &quot;name&quot; for the expected type. This function never returns.</source>
          <target state="translated">標準メッセージを使用して、それを呼び出したC関数の引数 &lt;code&gt;arg&lt;/code&gt; の型エラーを発生させます。 &lt;code&gt;tname&lt;/code&gt; は、予期されるタイプの「名前」です。この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="9b9354a43204b93a4330b1af0c9ff798523b53da" translate="yes" xml:space="preserve">
          <source>Raises an error (see &lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3&lt;/a&gt;) with @{message} as the error object. This function never returns.</source>
          <target state="translated">@ {message}をエラーオブジェクトとして使用してエラーを発生させます（&lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3を&lt;/a&gt;参照）。この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="bf358ba5588da456b49a6b3b1276c902731720d9" translate="yes" xml:space="preserve">
          <source>Raises an error if the value of its argument &lt;code&gt;v&lt;/code&gt; is false (i.e., &lt;b&gt;nil&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;); otherwise, returns all its arguments. In case of error, &lt;code&gt;message&lt;/code&gt; is the error object; when absent, it defaults to &quot;&lt;code&gt;assertion failed!&lt;/code&gt;&quot;</source>
          <target state="translated">引数 &lt;code&gt;v&lt;/code&gt; の値がfalse（つまり、&lt;b&gt;nil&lt;/b&gt;または&lt;b&gt;false&lt;/b&gt;）の場合、エラーが発生します。それ以外の場合は、すべての引数を返します。エラーの場合、 &lt;code&gt;message&lt;/code&gt; はエラーオブジェクトです。存在しない場合、デフォルトで「 &lt;code&gt;assertion failed!&lt;/code&gt; 」になります。</target>
        </trans-unit>
        <trans-unit id="fc0763820b54eedcf07407cf791911e6a4435f20" translate="yes" xml:space="preserve">
          <source>Raises an error reporting a problem with argument &lt;code&gt;arg&lt;/code&gt; of the C function that called it, using a standard message that includes &lt;code&gt;extramsg&lt;/code&gt; as a comment:</source>
          <target state="translated">コメントとして &lt;code&gt;extramsg&lt;/code&gt; を含む標準メッセージを使用して、それを呼び出したC関数の引数 &lt;code&gt;arg&lt;/code&gt; の問題を報告するエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="2195072e1ce816af3985bb81599b653639e6d200" translate="yes" xml:space="preserve">
          <source>Raises an error. The error message format is given by &lt;code&gt;fmt&lt;/code&gt; plus any extra arguments, following the same rules of &lt;a href=&quot;#lua_pushfstring&quot;&gt;&lt;code&gt;lua_pushfstring&lt;/code&gt;&lt;/a&gt;. It also adds at the beginning of the message the file name and the line number where the error occurred, if this information is available.</source>
          <target state="translated">エラーを発生させます。エラーメッセージの形式は、&lt;a href=&quot;#lua_pushfstring&quot;&gt; &lt;code&gt;lua_pushfstring&lt;/code&gt; の&lt;/a&gt;同じルールに従って、 &lt;code&gt;fmt&lt;/code&gt; と追加の引数で指定されます。また、この情報が利用可能な場合は、エラーの発生したファイル名と行番号をメッセージの先頭に追加します。</target>
        </trans-unit>
        <trans-unit id="e31b0fedf40d60473a1681a9f95cd0f5ccee72ff" translate="yes" xml:space="preserve">
          <source>Reads the file &lt;code&gt;file&lt;/code&gt;, according to the given formats, which specify what to read. For each format, the function returns a string or a number with the characters read, or &lt;b&gt;fail&lt;/b&gt; if it cannot read data with the specified format. (In this latter case, the function does not read subsequent formats.) When called without arguments, it uses a default format that reads the next line (see below).</source>
          <target state="translated">何を読み取るかを指定する指定された形式に従って、ファイル &lt;code&gt;file&lt;/code&gt; を読み取ります。関数は、フォーマットごとに、文字が読み取られた文字列または数値を返すか、指定されたフォーマットのデータを読み取れない場合は&lt;b&gt;失敗し&lt;/b&gt;ます。（この後者の場合、関数は後続の形式を読み取りません。）引数なしで呼び出されると、次の行を読み取るデフォルトの形式が使用されます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="76a33dab1cf51144cd77abed8a485f73ea3a2319" translate="yes" xml:space="preserve">
          <source>Reads the file &lt;code&gt;file&lt;/code&gt;, according to the given formats, which specify what to read. For each format, the function returns a string or a number with the characters read, or &lt;b&gt;nil&lt;/b&gt; if it cannot read data with the specified format. (In this latter case, the function does not read subsequent formats.) When called without formats, it uses a default format that reads the next line (see below).</source>
          <target state="translated">何を読み取るかを指定する指定された形式に従って、ファイル &lt;code&gt;file&lt;/code&gt; を読み取ります。各形式について、関数は読み取った文字を含む文字列または数値を返します。指定した形式でデータを読み取れない場合は&lt;b&gt;nilを&lt;/b&gt;返します。（この後者の場合、関数は後続のフォーマットを読み取りません。）フォーマットなしで呼び出されると、次の行を読み取るデフォルトのフォーマットを使用します（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="19c5c64f58aecd561b0cc1876786dfe7cb5a0fec" translate="yes" xml:space="preserve">
          <source>Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale.</source>
          <target state="translated">文字列を受け取り、小文字をすべて大文字に変更したこの文字列のコピーを返します。それ以外の文字はすべて変更されません。小文字の定義は、現在のロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="540aac1cb2574351ee99baa96641925cd5f56a55" translate="yes" xml:space="preserve">
          <source>Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale.</source>
          <target state="translated">文字列を受け取り、大文字をすべて小文字に変更した文字列のコピーを返します。それ以外の文字はすべて変更されません。大文字の定義は、現在のロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="b890d3f853acc49ad9cf651903e6eb6cdf33901a" translate="yes" xml:space="preserve">
          <source>Receives a string and returns its length. The empty string &lt;code&gt;&quot;&quot;&lt;/code&gt; has length 0. Embedded zeros are counted, so &lt;code&gt;&quot;a\000bc\000&quot;&lt;/code&gt; has length 5.</source>
          <target state="translated">文字列を受け取り、その長さを返します。空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; の長さは0です。埋め込まれたゼロがカウントされるため、 &lt;code&gt;&quot;a\000bc\000&quot;&lt;/code&gt; 長さは5です。</target>
        </trans-unit>
        <trans-unit id="d82851b5722eeb1a4807bb839e4ddddefaeb2a1b" translate="yes" xml:space="preserve">
          <source>Receives a value of any type and converts it to a string in a human-readable format.</source>
          <target state="translated">任意の型の値を受け取り、人間が読める形式の文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="525f707997f87240ceb1b2b5bdf4cfc009a704fc" translate="yes" xml:space="preserve">
          <source>Receives a value of any type and converts it to a string in a human-readable format. (For complete control of how numbers are converted, use &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">任意のタイプの値を受け取り、それを人間が読める形式の文字列に変換します。（数値の変換方法を完全に制御するには、&lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; を&lt;/a&gt;使用してください。）</target>
        </trans-unit>
        <trans-unit id="f08637f98da65a6c936ab18edfd8700b8df77cb5" translate="yes" xml:space="preserve">
          <source>Receives any number of arguments and prints their values to &lt;code&gt;stdout&lt;/code&gt;, converting each argument to a string following the same rules of &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">任意の数の引数を受け取り、それらの値を &lt;code&gt;stdout&lt;/code&gt; に出力し、&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; の&lt;/a&gt;同じルールに従って各引数を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="4a03622d8f97ccec5d5f7daa5dac73af6b7c7028" translate="yes" xml:space="preserve">
          <source>Receives any number of arguments and prints their values to &lt;code&gt;stdout&lt;/code&gt;, using the &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt; function to convert each argument to a string. &lt;code&gt;print&lt;/code&gt; is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-io.write&quot;&gt;&lt;code&gt;io.write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">任意の数の引数を受け取り、&lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;関数を使用して各引数を文字列に変換し、それらの値を &lt;code&gt;stdout&lt;/code&gt; に出力します。 &lt;code&gt;print&lt;/code&gt; は、フォーマットされた出力を対象としたものではなく、たとえばデバッグなど、値をすばやく表示する方法としてのみ使用できます。出力を完全に制御するには、&lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pdf-io.write&quot;&gt; &lt;code&gt;io.write&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b2cf76b7f314d7be6b1d5b068287552d8871811e" translate="yes" xml:space="preserve">
          <source>Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.</source>
          <target state="translated">0個以上の整数を受け取り、それぞれを対応するUTF-8バイト列に変換し、これらすべての列を連結した文字列を返します。</target>
        </trans-unit>
        <trans-unit id="cb0dfce9b4c27c4105f7ed0248bef997f2d2f7bb" translate="yes" xml:space="preserve">
          <source>Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.</source>
          <target state="translated">0 個以上の整数を受け取ります。引数の数と同じ長さの文字列を返し、各文字は対応する引数と同じ内部数値コードを持ちます。</target>
        </trans-unit>
        <trans-unit id="ac1a2088772d8a0274c1a663c003fac03a83bcc4" translate="yes" xml:space="preserve">
          <source>Regardless, if the resulting function has any upvalues, its first upvalue is set to the value of &lt;code&gt;env&lt;/code&gt;, if that parameter is given, or to the value of the global environment. Other upvalues are initialized with &lt;b&gt;nil&lt;/b&gt;. All upvalues are fresh, that is, they are not shared with any other function.</source>
          <target state="translated">いずれにせよ、結果の関数にアップバリューがある場合、その最初のアップバリューは、そのパラメーターが指定されている場合は &lt;code&gt;env&lt;/code&gt; の値、またはグローバル環境の値に設定されます。その他のアップバリューは&lt;b&gt;nilで&lt;/b&gt;初期化されます。すべてのアップバリューは新鮮です。つまり、他の関数と共有されません。</target>
        </trans-unit>
        <trans-unit id="ba50e88a283776123b7b75fd12714beb6542b84c" translate="yes" xml:space="preserve">
          <source>Registers all functions in the array &lt;code&gt;l&lt;/code&gt; (see &lt;a href=&quot;#luaL_Reg&quot;&gt;&lt;code&gt;luaL_Reg&lt;/code&gt;&lt;/a&gt;) into the table on the top of the stack (below optional upvalues, see next).</source>
          <target state="translated">配列 &lt;code&gt;l&lt;/code&gt; （&lt;a href=&quot;#luaL_Reg&quot;&gt; &lt;code&gt;luaL_Reg&lt;/code&gt; を&lt;/a&gt;参照）のすべての関数をスタックの最上部のテーブルに登録します（オプションのupvaluesの下、次を参照）。</target>
        </trans-unit>
        <trans-unit id="354032ada697719ccb58ca87cd221831508c42b3" translate="yes" xml:space="preserve">
          <source>Relational Operators</source>
          <target state="translated">関係演算子</target>
        </trans-unit>
        <trans-unit id="7d652aafaa213ccec3954206dc0a95e5d151cad3" translate="yes" xml:space="preserve">
          <source>Releases reference &lt;code&gt;ref&lt;/code&gt; from the table at index &lt;code&gt;t&lt;/code&gt; (see &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;). The entry is removed from the table, so that the referred object can be collected. The reference &lt;code&gt;ref&lt;/code&gt; is also freed to be used again.</source>
          <target state="translated">インデックス &lt;code&gt;t&lt;/code&gt; のテーブルから参照 &lt;code&gt;ref&lt;/code&gt; を&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;します（luaL_refを参照）。エントリがテーブルから削除されるため、参照されたオブジェクトを収集できます。参照 &lt;code&gt;ref&lt;/code&gt; も解放され、再度使用できます。</target>
        </trans-unit>
        <trans-unit id="af7c5beadc65cf6aecf24cf7287288561cb7ead7" translate="yes" xml:space="preserve">
          <source>Releases the reference &lt;code&gt;ref&lt;/code&gt; from the table at index &lt;code&gt;t&lt;/code&gt; (see &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;). The entry is removed from the table, so that the referred object can be collected. The reference &lt;code&gt;ref&lt;/code&gt; is also freed to be used again.</source>
          <target state="translated">基準解放 &lt;code&gt;ref&lt;/code&gt; インデックスのテーブルからの &lt;code&gt;t&lt;/code&gt; （参照&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; を&lt;/a&gt;）。エントリがテーブルから削除され、参照されたオブジェクトを収集できるようになります。参照 &lt;code&gt;ref&lt;/code&gt; も解放され、再度使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="1f21ed8cdd38e88c74187592dabfbf9189cec444" translate="yes" xml:space="preserve">
          <source>Remember that, whenever an operation needs the length of a table, all caveats about the length operator apply (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;). All functions ignore non-numeric keys in the tables given as arguments.</source>
          <target state="translated">操作でテーブルの長さが必要な場合は常に、長さ演算子に関するすべての警告が適用されることに注意してください（&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7を&lt;/a&gt;参照）。すべての関数は、引数として指定されたテーブル内の非数値キーを無視します。</target>
        </trans-unit>
        <trans-unit id="50df2da2a4204c47a50a5f2a2a11c7eea37ba603" translate="yes" xml:space="preserve">
          <source>Removes &lt;code&gt;n&lt;/code&gt; bytes from the the buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). The buffer must have at least that many bytes.</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; から &lt;code&gt;n&lt;/code&gt; バイトを削除します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。バッファには少なくともその数のバイトが必要です。</target>
        </trans-unit>
        <trans-unit id="d0dd440324a053f93400815574d10e0db636ed3b" translate="yes" xml:space="preserve">
          <source>Removes from &lt;code&gt;list&lt;/code&gt; the element at position &lt;code&gt;pos&lt;/code&gt;, returning the value of the removed element. When &lt;code&gt;pos&lt;/code&gt; is an integer between 1 and &lt;code&gt;#list&lt;/code&gt;, it shifts down the elements &lt;code&gt;list[pos+1], list[pos+2], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; and erases element &lt;code&gt;list[#list]&lt;/code&gt;; The index &lt;code&gt;pos&lt;/code&gt; can also be 0 when &lt;code&gt;#list&lt;/code&gt; is 0, or &lt;code&gt;#list + 1&lt;/code&gt;.</source>
          <target state="translated">位置 &lt;code&gt;pos&lt;/code&gt; の要素を &lt;code&gt;list&lt;/code&gt; から削除し、削除された要素の値を返します。場合 &lt;code&gt;pos&lt;/code&gt; が1との間の整数であり &lt;code&gt;#list&lt;/code&gt; は、それが要素のシフトダウン &lt;code&gt;list[pos+1], list[pos+2], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; と素子消去 &lt;code&gt;list[#list]&lt;/code&gt; 。 &lt;code&gt;#list&lt;/code&gt; が0の場合、インデックス &lt;code&gt;pos&lt;/code&gt; は0、または &lt;code&gt;#list + 1&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="78486a859650e2590601f8f6a90106add4cefb81" translate="yes" xml:space="preserve">
          <source>Removes from &lt;code&gt;list&lt;/code&gt; the element at position &lt;code&gt;pos&lt;/code&gt;, returning the value of the removed element. When &lt;code&gt;pos&lt;/code&gt; is an integer between 1 and &lt;code&gt;#list&lt;/code&gt;, it shifts down the elements &lt;code&gt;list[pos+1], list[pos+2], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; and erases element &lt;code&gt;list[#list]&lt;/code&gt;; The index &lt;code&gt;pos&lt;/code&gt; can also be 0 when &lt;code&gt;#list&lt;/code&gt; is 0, or &lt;code&gt;#list + 1&lt;/code&gt;; in those cases, the function erases the element &lt;code&gt;list[pos]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; の位置にある要素を &lt;code&gt;list&lt;/code&gt; から削除し、削除された要素の値を返します。 &lt;code&gt;pos&lt;/code&gt; が1から &lt;code&gt;#list&lt;/code&gt; までの整数の場合、要素 &lt;code&gt;list[pos+1], list[pos+2], &amp;middot;&amp;middot;&amp;middot;, list[#list]&lt;/code&gt; を下にシフトし、要素list [#list]を &lt;code&gt;list[#list]&lt;/code&gt; 。 &lt;code&gt;#list&lt;/code&gt; が0、または &lt;code&gt;#list + 1&lt;/code&gt; 場合、インデックス &lt;code&gt;pos&lt;/code&gt; も0になります。そのような場合、関数は要素 &lt;code&gt;list[pos]&lt;/code&gt; 消去します。</target>
        </trans-unit>
        <trans-unit id="11e20bb227ba77f3bb86f13b7935abd6f4634200" translate="yes" xml:space="preserve">
          <source>Removes the element at the given valid index, shifting down the elements above this index to fill the gap. This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.</source>
          <target state="translated">指定された有効なインデックスの要素を削除し、このインデックスより上の要素を下にシフトしてギャップを埋めます。疑似インデックスは実際のスタックの位置ではないため、この関数は疑似インデックスを指定して呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="1d1ad46541c1bc833d763b9872ae152506b03c2a" translate="yes" xml:space="preserve">
          <source>Renames the file or directory named &lt;code&gt;oldname&lt;/code&gt; to &lt;code&gt;newname&lt;/code&gt;. If this function fails, it returns &lt;b&gt;fail&lt;/b&gt;, plus a string describing the error and the error code. Otherwise, it returns true.</source>
          <target state="translated">&lt;code&gt;oldname&lt;/code&gt; という名前のファイルまたはディレクトリの名前を &lt;code&gt;newname&lt;/code&gt; に変更します。この関数が失敗すると、&lt;b&gt;fail&lt;/b&gt;に加えて、エラーとエラーコードを説明する文字列が返されます。それ以外の場合は、trueを返します。</target>
        </trans-unit>
        <trans-unit id="57bc261321eacee5a6b51aa33ad8b6bdff0d2216" translate="yes" xml:space="preserve">
          <source>Renames the file or directory named &lt;code&gt;oldname&lt;/code&gt; to &lt;code&gt;newname&lt;/code&gt;. If this function fails, it returns &lt;b&gt;nil&lt;/b&gt;, plus a string describing the error and the error code. Otherwise, it returns true.</source>
          <target state="translated">&lt;code&gt;oldname&lt;/code&gt; という名前のファイルまたはディレクトリの名前を &lt;code&gt;newname&lt;/code&gt; に変更します。この関数が失敗すると、&lt;b&gt;nil&lt;/b&gt;に加えて、エラーとエラーコードを説明する文字列が返されます。それ以外の場合は、trueを返します。</target>
        </trans-unit>
        <trans-unit id="6fa4b690dd13963596a568015e6ef34dfd9eea75" translate="yes" xml:space="preserve">
          <source>Resets a thread, cleaning its call stack and closing all pending to-be-closed variables. Returns a status code: &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; for no errors in closing methods, or an error status otherwise. In case of error, leaves the error object on the top of the stack,</source>
          <target state="translated">スレッドをリセットし、その呼び出しスタックをクリーンアップして、保留中のすべての閉じられる変数を閉じます。ステータスコードを返します：メソッドを閉じるときにエラーがない場合は&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;、それ以外の場合はエラーステータス。エラーの場合、エラーオブジェクトをスタックの一番上に残します。</target>
        </trans-unit>
        <trans-unit id="0ce3bd88cc94ffb61167bb8f7b9e843c7604f13b" translate="yes" xml:space="preserve">
          <source>Results are returned using the &lt;b&gt;return&lt;/b&gt; statement (see &lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4&lt;/a&gt;). If control reaches the end of a function without encountering a &lt;b&gt;return&lt;/b&gt; statement, then the function returns with no results.</source>
          <target state="translated">結果は&lt;b&gt;return&lt;/b&gt;ステートメントを使用して&lt;b&gt;返されます&lt;/b&gt;（&lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4を&lt;/a&gt;参照）。制御が&lt;b&gt;return&lt;/b&gt;ステートメントに出会わずに関数の終わりに到達した場合、関数は結果なしで戻ります。</target>
        </trans-unit>
        <trans-unit id="244c963cdbd920ed3e3a03fe837b76f265d0a0b8" translate="yes" xml:space="preserve">
          <source>Resurrected objects (that is, objects being finalized and objects accessible only through objects being finalized) have a special behavior in weak tables. They are removed from weak values before running their finalizers, but are removed from weak keys only in the next collection after running their finalizers, when such objects are actually freed. This behavior allows the finalizer to access properties associated with the object through weak tables.</source>
          <target state="translated">復活したオブジェクト(つまり、確定されたオブジェクトと、確定されたオブジェクトからのみアクセス可能なオブジェクト)は、弱いテーブルでは特別な動作をします。これらのオブジェクトは、ファイナライザを実行する前に弱い値から削除されますが、ファイナライザを実行した後、そのようなオブジェクトが実際に解放されたときにのみ、次のコレクションで弱いキーから削除されます。この動作により、ファイナライザは弱いテーブルを通してオブジェクトに関連付けられたプロパティにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="d0a2349b7422351122e89416a8339b7ba9df8537" translate="yes" xml:space="preserve">
          <source>Returns &quot;&lt;code&gt;integer&lt;/code&gt;&quot; if &lt;code&gt;x&lt;/code&gt; is an integer, &quot;&lt;code&gt;float&lt;/code&gt;&quot; if it is a float, or &lt;b&gt;fail&lt;/b&gt; if &lt;code&gt;x&lt;/code&gt; is not a number.</source>
          <target state="translated">戻り値「 &lt;code&gt;integer&lt;/code&gt; 」場合 &lt;code&gt;x&lt;/code&gt; 整数である、「 &lt;code&gt;float&lt;/code&gt; それがフロートの場合」、または&lt;b&gt;失敗し&lt;/b&gt;た場合 &lt;code&gt;x&lt;/code&gt; 数ではありません。</target>
        </trans-unit>
        <trans-unit id="03118cc39c1e81c1c438cef7d116290590135b5a" translate="yes" xml:space="preserve">
          <source>Returns &quot;&lt;code&gt;integer&lt;/code&gt;&quot; if &lt;code&gt;x&lt;/code&gt; is an integer, &quot;&lt;code&gt;float&lt;/code&gt;&quot; if it is a float, or &lt;b&gt;nil&lt;/b&gt; if &lt;code&gt;x&lt;/code&gt; is not a number.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が &lt;code&gt;integer&lt;/code&gt; 場合は「integer」、 &lt;code&gt;float&lt;/code&gt; の場合は「float」、 &lt;code&gt;x&lt;/code&gt; が数値でない場合は&lt;b&gt;nilを&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ec136d49176b1dfa086d0b59ff735d87f5d8b25c" translate="yes" xml:space="preserve">
          <source>Returns 1 if the given coroutine can yield, and 0 otherwise.</source>
          <target state="translated">指定したコアーチンが降伏可能な場合は1を、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="36a260eb163a20a6982a495d8fcda57196ae377b" translate="yes" xml:space="preserve">
          <source>Returns 1 if the given index is not valid or if the value at this index is &lt;b&gt;nil&lt;/b&gt;, and 0 otherwise.</source>
          <target state="translated">指定されたインデックスが有効でない場合、またはこのインデックスの値が&lt;b&gt;nilの&lt;/b&gt;場合は1を返し、それ以外の場合は&lt;b&gt;0を&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="8a03c180e8267d605c7828397144f7c543874d2c" translate="yes" xml:space="preserve">
          <source>Returns 1 if the given index is not valid, and 0 otherwise.</source>
          <target state="translated">指定したインデックスが有効でない場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="8d7984f5b9d91f61d05816274d72ac1e8b987b70" translate="yes" xml:space="preserve">
          <source>Returns 1 if the two values in indices &lt;code&gt;index1&lt;/code&gt; and &lt;code&gt;index2&lt;/code&gt; are primitively equal (that is, equal without calling the &lt;code&gt;__eq&lt;/code&gt; metamethod). Otherwise returns 0. Also returns 0 if any of the indices are not valid.</source>
          <target state="translated">指数内の2つの値の場合に1を返しは &lt;code&gt;index1&lt;/code&gt; のと &lt;code&gt;index2&lt;/code&gt; 原始的等しい（すなわち、呼び出さず等しく &lt;code&gt;__eq&lt;/code&gt; のメタメソッドを）。それ以外の場合は0を返します。インデックスのいずれかが無効な場合も0を返します。</target>
        </trans-unit>
        <trans-unit id="4abb71a0bd2d89035111fe1406578f64ee99f1cd" translate="yes" xml:space="preserve">
          <source>Returns 1 if the two values in indices &lt;code&gt;index1&lt;/code&gt; and &lt;code&gt;index2&lt;/code&gt; are primitively equal (that is, without calling the &lt;code&gt;__eq&lt;/code&gt; metamethod). Otherwise returns 0. Also returns 0 if any of the indices are not valid.</source>
          <target state="translated">指数内の2つの値の場合に1を返し &lt;code&gt;index1&lt;/code&gt; のと &lt;code&gt;index2&lt;/code&gt; （呼び出さずに、である原始等しい &lt;code&gt;__eq&lt;/code&gt; のメタメソッドを）。それ以外の場合は0を返します。無効なインデックスがある場合も0を返します。</target>
        </trans-unit>
        <trans-unit id="77b6c0faff8f019e54587bee38b27269e8ece2d8" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is &lt;b&gt;nil&lt;/b&gt;, and 0 otherwise.</source>
          <target state="translated">指定されたインデックスの値が&lt;b&gt;nilの&lt;/b&gt;場合は1を返し、それ以外の場合は&lt;b&gt;0を&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="acad229e61c0f7b3cf84876f85fd1aed4340fdeb" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a C function, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がC関数の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="c6d1286ca58fd2bca52facd7ccf6f424aa47dca4" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a boolean, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がブール値の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="04d4d0a8fc1e9ff9c642f37982cd6541f074eaf2" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a function (either C or Lua), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が関数(C または Lua)の場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="85c97cef398c89971e6d5d95362f5833c0efeb94" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a light userdata, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がライトユーザデータであれば1を返し、そうでなければ0を返します。</target>
        </trans-unit>
        <trans-unit id="293be583246b5c6f5755824ebef65496d84be9b9" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a number or a string convertible to a number, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が数値または数値に変換可能な文字列の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="1ef629a2e4c4bd109da15d0096305f549d521e11" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a string or a number (which is always convertible to a string), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が文字列か数値(これは常に文字列に変換可能です)の場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="b24b734f996f24f0d2edcb352efb5d0a8733d485" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a table, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がテーブルの場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="6452edfae9b54954154513a55afe95f60e75b4fa" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a thread, and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値がスレッドの場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="fbf8a110fe7143ca6d907ca070a5c03ffa0f2050" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is a userdata (either full or light), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が userdata (full または light のいずれか)の場合は 1 を返し、そうでない場合は 0 を返します。</target>
        </trans-unit>
        <trans-unit id="83893644ee4437282f1a7daf1d6a53c7e83643da" translate="yes" xml:space="preserve">
          <source>Returns 1 if the value at the given index is an integer (that is, the value is a number and is represented as an integer), and 0 otherwise.</source>
          <target state="translated">指定したインデックスの値が整数(つまり、値が数値であり、整数として表現されている)の場合は1を返し、そうでない場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="671cca4567b26fcc0ceb0e43e3d2829f1469cdbb" translate="yes" xml:space="preserve">
          <source>Returns &lt;b&gt;fail&lt;/b&gt; if there is no active hook.</source>
          <target state="translated">アクティブなフックがない場合、戻りは&lt;b&gt;失敗し&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e0d04eca2996cc50939c173c775d0d5f069d8627" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; (and pops nothing) when the index &lt;code&gt;n&lt;/code&gt; is greater than the number of upvalues.</source>
          <target state="translated">インデックス &lt;code&gt;n&lt;/code&gt; がアップ値の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（そして何もポップしません）。</target>
        </trans-unit>
        <trans-unit id="f56ddb3bc18ad7e4888cfe9050da5f11bd833971" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; (and pops nothing) when the index is greater than the number of active local variables.</source>
          <target state="translated">インデックスがアクティブなローカル変数の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（何もポップしません）。</target>
        </trans-unit>
        <trans-unit id="57d7205f6585ea512d11e87992ca7441e1e7627e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;NULL&lt;/code&gt; (and pushes nothing) when the index is greater than the number of active local variables.</source>
          <target state="translated">インデックスがアクティブなローカル変数の数より大きい場合、 &lt;code&gt;NULL&lt;/code&gt; を返します（何もプッシュしません）。</target>
        </trans-unit>
        <trans-unit id="33a341b65f8f92cdfebf70c0c2e075fb9c61bdea" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;udata&lt;/code&gt;, or &lt;b&gt;fail&lt;/b&gt; if the userdata does not have that value.</source>
          <target state="translated">&lt;code&gt;udata&lt;/code&gt; を返すか、userdataにその値がない場合は&lt;b&gt;失敗&lt;/b&gt;します。</target>
        </trans-unit>
        <trans-unit id="cfcdfcdeac01eab8c7e33e91fd9027aed705b576" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;udata&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;udata&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="95b61d5c1d6df056ea18d8531706d5088a5cc2ec" translate="yes" xml:space="preserve">
          <source>Returns a binary string containing the values &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, etc. packed (that is, serialized in binary form) according to the format string &lt;code&gt;fmt&lt;/code&gt; (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;).</source>
          <target state="translated">フォーマット文字列 &lt;code&gt;fmt&lt;/code&gt; に従ってパックされた（つまり、バイナリ形式でシリアル化された）値 &lt;code&gt;v1&lt;/code&gt; 、 &lt;code&gt;v2&lt;/code&gt; などを含むバイナリ文字列を返します（&lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b9eaabee84b326fc38aa7a158662184bb8db15f9" translate="yes" xml:space="preserve">
          <source>Returns a binary string containing the values &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, etc. serialized in binary form (packed) according to the format string &lt;code&gt;fmt&lt;/code&gt; (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;).</source>
          <target state="translated">フォーマット文字列 &lt;code&gt;fmt&lt;/code&gt; に従ってバイナリ形式（パック）でシリアル化された値 &lt;code&gt;v1&lt;/code&gt; 、 &lt;code&gt;v2&lt;/code&gt; などを含むバイナリ文字列を返します（&lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="34fa3ab9c6fcc7c0b0e41c857bf1c60b601f5344" translate="yes" xml:space="preserve">
          <source>Returns a boolean, true if and only if integer &lt;code&gt;m&lt;/code&gt; is below integer &lt;code&gt;n&lt;/code&gt; when they are compared as unsigned integers.</source>
          <target state="translated">ブール値を返します。符号なし整数として比較されたときに整数 &lt;code&gt;m&lt;/code&gt; が整数 &lt;code&gt;n&lt;/code&gt; を下回る場合にのみtrueを返します。</target>
        </trans-unit>
        <trans-unit id="83c4b62eb52291289917793f1a6cc1b8ea7a62cf" translate="yes" xml:space="preserve">
          <source>Returns a copy of &lt;code&gt;s&lt;/code&gt; in which all (or the first &lt;code&gt;n&lt;/code&gt;, if given) occurrences of the &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) have been replaced by a replacement string specified by &lt;code&gt;repl&lt;/code&gt;, which can be a string, a table, or a function. &lt;code&gt;gsub&lt;/code&gt; also returns, as its second value, the total number of matches that occurred. The name &lt;code&gt;gsub&lt;/code&gt; comes from &lt;em&gt;Global SUBstitution&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; （&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）のすべての出現（または指定されている場合は最初の &lt;code&gt;n&lt;/code&gt; ）が &lt;code&gt;repl&lt;/code&gt; で指定された置換文字列に置き換えられた &lt;code&gt;s&lt;/code&gt; のコピーを返します。これは文字列、テーブル、または関数。 &lt;code&gt;gsub&lt;/code&gt; は、2番目の値として、発生した一致の総数も返します。 &lt;code&gt;gsub&lt;/code&gt; という名前は、&lt;em&gt;Global SUBstitutionに&lt;/em&gt;由来します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2ddd8b557487a7047dc27604858d100902c9eec4" translate="yes" xml:space="preserve">
          <source>Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the ISO C function &lt;code&gt;sprintf&lt;/code&gt;. The only differences are that the options/modifiers &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, and &lt;code&gt;p&lt;/code&gt; are not supported and that there is an extra option, &lt;code&gt;q&lt;/code&gt;.</source>
          <target state="translated">最初の引数（文字列である必要があります）で指定された説明に続く可変数の引数のフォーマットされたバージョンを返します。フォーマット文字列は、ISO C関数 &lt;code&gt;sprintf&lt;/code&gt; と同じ規則に従います。唯一の違いは、オプション/修飾子 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;l&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 、および &lt;code&gt;p&lt;/code&gt; がサポートされていないことと、追加のオプション &lt;code&gt;q&lt;/code&gt; があることです。</target>
        </trans-unit>
        <trans-unit id="bf32d68131adf8c84f92b82d86f22e200e2d442a" translate="yes" xml:space="preserve">
          <source>Returns a formatted version of its variable number of arguments following the description given in its first argument, which must be a string. The format string follows the same rules as the ISO C function &lt;code&gt;sprintf&lt;/code&gt;. The only differences are that the conversion specifiers and modifiers &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; are not supported and that there is an extra specifier, &lt;code&gt;q&lt;/code&gt;.</source>
          <target state="translated">最初の引数で指定された説明に続く可変数の引数のフォーマットされたバージョンを返します。これは文字列である必要があります。フォーマット文字列は、 &lt;code&gt;sprintf&lt;/code&gt; 関数sprintfと同じルールに従います。唯一の違いは、変換指定子と修飾子 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;h&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;l&lt;/code&gt; 、および &lt;code&gt;n&lt;/code&gt; がサポートされていないことと、追加の指定子 &lt;code&gt;q&lt;/code&gt; があることです。</target>
        </trans-unit>
        <trans-unit id="48dde3bd411386a559edd6defab289be69c364ab" translate="yes" xml:space="preserve">
          <source>Returns a new table with all arguments stored into keys 1, 2, etc. and with a field &quot;&lt;code&gt;n&lt;/code&gt;&quot; with the total number of arguments. Note that the resulting table may not be a sequence, if some arguments are &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">すべての引数がキー1、2などに格納され、引数の総数を含むフィールド「 &lt;code&gt;n&lt;/code&gt; 」を持つ新しいテーブルを返します。一部の引数が&lt;b&gt;nilの&lt;/b&gt;場合、結果のテーブルはシーケンスではない可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4e8f9acfbbc61db53d975814a02f1c9aab94a23d" translate="yes" xml:space="preserve">
          <source>Returns a new table with all parameters stored into keys 1, 2, etc. and with a field &quot;&lt;code&gt;n&lt;/code&gt;&quot; with the total number of parameters. Note that the resulting table may not be a sequence.</source>
          <target state="translated">すべてのパラメーターがキー1、2などに格納され、フィールド &quot; &lt;code&gt;n&lt;/code&gt; &quot;がパラメーターの総数を含む新しいテーブルを返します。結果のテーブルはシーケンスではない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="04445fdc39272b542d188c106147fa8b6a611119" translate="yes" xml:space="preserve">
          <source>Returns a pointer to a raw memory area associated with the given Lua state. The application can use this area for any purpose; Lua does not use it for anything.</source>
          <target state="translated">指定した Lua の状態に関連付けられた生のメモリ領域へのポインタを返します。アプリケーションはこの領域を任意の目的に使用することができますが、Luaはこの領域を何かに使用することはありません。</target>
        </trans-unit>
        <trans-unit id="45395b391aa23f00e9e4439bd741094c423c0b46" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the internal copy of the string (see &lt;a href=&quot;#4.1.3&quot;&gt;&amp;sect;4.1.3&lt;/a&gt;).</source>
          <target state="translated">文字列の内部コピーへのポインタを返します（&lt;a href=&quot;#4.1.3&quot;&gt;&amp;sect;4.1.3を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4f4330812b83811a6da51b5ddf77a1c753b5a3f8" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the internal copy of the string.</source>
          <target state="translated">文字列の内部コピーへのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="110bc8230211fc8ab3a4f90c96eb53b6ace38d6f" translate="yes" xml:space="preserve">
          <source>Returns a string containing a binary representation (a &lt;em&gt;binary chunk&lt;/em&gt;) of the given function, so that a later &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; on this string returns a copy of the function (but with new upvalues). If &lt;code&gt;strip&lt;/code&gt; is a true value, the binary representation may not include all debug information about the function, to save space.</source>
          <target state="translated">指定された関数のバイナリ表現（&lt;em&gt;バイナリチャンク&lt;/em&gt;）を含む文字列を返します。これにより、この文字列を後で&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;すると、関数のコピーが返されます（ただし、新しいupvalueが含まれます）。場合 &lt;code&gt;strip&lt;/code&gt; 真の値で、バイナリ表現は、スペースを節約するために、機能に関するすべてのデバッグ情報を含まなくてもよいです。</target>
        </trans-unit>
        <trans-unit id="7785dcf0d96ed76232f8ceff4782113f5d891ebc" translate="yes" xml:space="preserve">
          <source>Returns a string or a table containing date and time, formatted according to the given string &lt;code&gt;format&lt;/code&gt;.</source>
          <target state="translated">指定された文字列に応じてフォーマットされた文字列または日付と時刻を含むテーブル、返し &lt;code&gt;format&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e96b629efb1e60f437ca5030afcaedd1ef526018" translate="yes" xml:space="preserve">
          <source>Returns a string that is the concatenation of &lt;code&gt;n&lt;/code&gt; copies of the string &lt;code&gt;s&lt;/code&gt; separated by the string &lt;code&gt;sep&lt;/code&gt;. The default value for &lt;code&gt;sep&lt;/code&gt; is the empty string (that is, no separator). Returns the empty string if &lt;code&gt;n&lt;/code&gt; is not positive.</source>
          <target state="translated">文字列 &lt;code&gt;sep&lt;/code&gt; で区切られた文字列 &lt;code&gt;s&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 個のコピーを連結した文字列を返します。 &lt;code&gt;sep&lt;/code&gt; のデフォルト値は空の文字列（つまり、区切り文字なし）です。 &lt;code&gt;n&lt;/code&gt; が正でない場合は空の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c23b06e9809db45e6323880c87aa7252a0bafcb4" translate="yes" xml:space="preserve">
          <source>Returns a string that is the string &lt;code&gt;s&lt;/code&gt; reversed.</source>
          <target state="translated">文字列である文字列を返します &lt;code&gt;s&lt;/code&gt; の逆転を。</target>
        </trans-unit>
        <trans-unit id="fc7ced1cf6bbd4c86f0ee87b0d833bbb93586b07" translate="yes" xml:space="preserve">
          <source>Returns a string with a file name that can be used for a temporary file. The file must be explicitly opened before its use and explicitly removed when no longer needed.</source>
          <target state="translated">一時ファイルに使用できるファイル名の文字列を返します。このファイルは、使用する前に明示的にオープンし、不要になったら明示的に削除しなければなりません。</target>
        </trans-unit>
        <trans-unit id="aa92524d06f459f4bfe53bf566701137d5986c99" translate="yes" xml:space="preserve">
          <source>Returns a table with information about a function. You can give the function directly or you can give a number as the value of &lt;code&gt;f&lt;/code&gt;, which means the function running at level &lt;code&gt;f&lt;/code&gt; of the call stack of the given thread: level 0 is the current function (&lt;code&gt;getinfo&lt;/code&gt; itself); level 1 is the function that called &lt;code&gt;getinfo&lt;/code&gt; (except for tail calls, which do not count in the stack); and so on. If &lt;code&gt;f&lt;/code&gt; is a number greater than the number of active functions, then &lt;code&gt;getinfo&lt;/code&gt; returns &lt;b&gt;fail&lt;/b&gt;.</source>
          <target state="translated">関数に関する情報を含むテーブルを返します。関数を直接指定することも、 &lt;code&gt;f&lt;/code&gt; の値として数値を指定することもできます。これは、指定されたスレッドの呼び出しスタックのレベル &lt;code&gt;f&lt;/code&gt; で実行されている関数を意味します。レベル0は現在の関数（ &lt;code&gt;getinfo&lt;/code&gt; 自体）です。レベル1は、 &lt;code&gt;getinfo&lt;/code&gt; を呼び出した関数です（スタックにカウントされない末尾呼び出しを除く）。等々。場合 &lt;code&gt;f&lt;/code&gt; がアクティブ機能の数よりも数の大きい、次いで &lt;code&gt;getinfo&lt;/code&gt; 戻る&lt;b&gt;失敗します&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="41736de9eba1b5a23348a72c73555dbf11b75db2" translate="yes" xml:space="preserve">
          <source>Returns a table with information about a function. You can give the function directly or you can give a number as the value of &lt;code&gt;f&lt;/code&gt;, which means the function running at level &lt;code&gt;f&lt;/code&gt; of the call stack of the given thread: level 0 is the current function (&lt;code&gt;getinfo&lt;/code&gt; itself); level 1 is the function that called &lt;code&gt;getinfo&lt;/code&gt; (except for tail calls, which do not count on the stack); and so on. If &lt;code&gt;f&lt;/code&gt; is a number larger than the number of active functions, then &lt;code&gt;getinfo&lt;/code&gt; returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">関数に関する情報を含むテーブルを返します。関数を直接指定することも、 &lt;code&gt;f&lt;/code&gt; の値として数値を指定することもできます。これは、指定されたスレッドのコールスタックのレベル &lt;code&gt;f&lt;/code&gt; で実行される関数を意味します。レベル0は現在の関数です（ &lt;code&gt;getinfo&lt;/code&gt; 自体）。レベル1は、 &lt;code&gt;getinfo&lt;/code&gt; を呼び出した関数です（スタックでカウントされない末尾呼び出しを除く）。等々。 &lt;code&gt;f&lt;/code&gt; がアクティブな関数の数より大きい数の場合、 &lt;code&gt;getinfo&lt;/code&gt; は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="10b30ad1ae8da522aed09e1a02ace7921e1f51a6" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier (as a light userdata) for the upvalue numbered &lt;code&gt;n&lt;/code&gt; from the given function.</source>
          <target state="translated">指定された関数から &lt;code&gt;n&lt;/code&gt; と番号が付けられたアップバリューの一意の識別子を（軽量のユーザーデータとして）返します。</target>
        </trans-unit>
        <trans-unit id="0b3fe57552c933213408135c6244c0db831931eb" translate="yes" xml:space="preserve">
          <source>Returns a unique identifier for the upvalue numbered &lt;code&gt;n&lt;/code&gt; from the closure at index &lt;code&gt;funcindex&lt;/code&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;funcindex&lt;/code&gt; のクロージャから &lt;code&gt;n&lt;/code&gt; 番のアップバリューの一意の識別子を返します。</target>
        </trans-unit>
        <trans-unit id="bee587bfd0df43f919edb6f2e537b30c2fff9e47" translate="yes" xml:space="preserve">
          <source>Returns an address to a space of size &lt;code&gt;sz&lt;/code&gt; where you can copy a string to be added to buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). After copying the string into this space you must call &lt;a href=&quot;#luaL_addsize&quot;&gt;&lt;code&gt;luaL_addsize&lt;/code&gt;&lt;/a&gt; with the size of the string to actually add it to the buffer.</source>
          <target state="translated">追加する文字列をバッファー &lt;code&gt;B&lt;/code&gt; にコピーできるサイズ &lt;code&gt;sz&lt;/code&gt; のスペースにアドレスを返します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。文字列をこのスペースにコピーした後、実際にバッファーに追加するには、文字列のサイズを&lt;a href=&quot;#luaL_addsize&quot;&gt; &lt;code&gt;luaL_addsize&lt;/code&gt; &lt;/a&gt;してluaL_addsizeを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="aee809e239d975376124c38ef9a8bbd38533ebb2" translate="yes" xml:space="preserve">
          <source>Returns an approximation of the amount in seconds of CPU time used by the program, as returned by the underlying ISO C function &lt;code&gt;clock&lt;/code&gt;.</source>
          <target state="translated">基になるISOC関数 &lt;code&gt;clock&lt;/code&gt; によって返される、プログラムによって使用されるCPU時間の秒単位の概算を返します。</target>
        </trans-unit>
        <trans-unit id="791d30f65759aca9bc8c2ab0c81b3414394fb75d" translate="yes" xml:space="preserve">
          <source>Returns an approximation of the amount in seconds of CPU time used by the program.</source>
          <target state="translated">プログラムが使用したCPU時間の概算値を秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="ed3bd9acca66b3345ff64ecf82770701deaf6e39" translate="yes" xml:space="preserve">
          <source>Returns an iterator function that, each time it is called, reads the file according to the given formats. When no format is given, uses &quot;&lt;code&gt;l&lt;/code&gt;&quot; as a default. As an example, the construction</source>
          <target state="translated">呼び出されるたびに、指定された形式に従ってファイルを読み取る反復関数を返します。フォーマットが指定されていない場合、デフォルトとして「 &lt;code&gt;l&lt;/code&gt; 」を使用します。例として、構造</target>
        </trans-unit>
        <trans-unit id="9502ef377c9031927e39c05f93ef446921a0becd" translate="yes" xml:space="preserve">
          <source>Returns an iterator function that, each time it is called, returns the next captures from &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) over the string &lt;code&gt;s&lt;/code&gt;. If &lt;code&gt;pattern&lt;/code&gt; specifies no captures, then the whole match is produced in each call.</source>
          <target state="translated">呼び出されるたびに、文字列 &lt;code&gt;s&lt;/code&gt; に対して &lt;code&gt;pattern&lt;/code&gt; （&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）から次のキャプチャを返す反復関数を返します。 &lt;code&gt;pattern&lt;/code&gt; がキャプチャを指定しない場合、一致全体が各呼び出しで生成されます。</target>
        </trans-unit>
        <trans-unit id="45001f49f50b2b70b2e8422ff32e20831e96980c" translate="yes" xml:space="preserve">
          <source>Returns an iterator function that, each time it is called, returns the next captures from &lt;code&gt;pattern&lt;/code&gt; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;) over the string &lt;code&gt;s&lt;/code&gt;. If &lt;code&gt;pattern&lt;/code&gt; specifies no captures, then the whole match is produced in each call. A third, optional numeric argument &lt;code&gt;init&lt;/code&gt; specifies where to start the search; its default value is 1 and can be negative.</source>
          <target state="translated">呼び出されるたびに、文字列 &lt;code&gt;s&lt;/code&gt; を介して &lt;code&gt;pattern&lt;/code&gt; （&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）から次のキャプチャを返すイテレータ関数を返します。 &lt;code&gt;pattern&lt;/code&gt; がキャプチャを指定しない場合、一致全体が各呼び出しで生成されます。3番目のオプションの数値引数 &lt;code&gt;init&lt;/code&gt; は、検索を開始する場所を指定します。デフォルト値は1で、負の値にすることができます。</target>
        </trans-unit>
        <trans-unit id="a6d0a5b7853c9d4da9293e66e82d86cf0df6305f" translate="yes" xml:space="preserve">
          <source>Returns the &quot;length&quot; of the value at the given index as a number; it is equivalent to the '&lt;code&gt;#&lt;/code&gt;' operator in Lua (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;). Raises an error if the result of the operation is not an integer. (This case can only happen through metamethods.)</source>
          <target state="translated">指定されたインデックスの値の「長さ」を数値として返します。これは、Luaの「 &lt;code&gt;#&lt;/code&gt; 」演算子と同等です（&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7を&lt;/a&gt;参照）。演算の結果が整数でない場合、エラーが発生します。（このケースは、メタメソッドを介してのみ発生する可能性があります。）</target>
        </trans-unit>
        <trans-unit id="ea5fe629e50500647001f1530cb02685325af73a" translate="yes" xml:space="preserve">
          <source>Returns the &quot;length&quot; of the value at the given index as a number; it is equivalent to the '&lt;code&gt;#&lt;/code&gt;' operator in Lua (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;). Raises an error if the result of the operation is not an integer. (This case only can happen through metamethods.)</source>
          <target state="translated">指定されたインデックスにある値の「長さ」を数値として返します。これはLuaの' &lt;code&gt;#&lt;/code&gt; '演算子と同等です（&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7を&lt;/a&gt;参照）。操作の結果が整数でない場合、エラーが発生します。（このケースはメタメソッドを通じてのみ発生します。）</target>
        </trans-unit>
        <trans-unit id="f1e0f7037fc97a264b1135ee9cbbd443e4839b55" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;n&lt;/code&gt;-th user value associated to the userdata &lt;code&gt;u&lt;/code&gt; plus a boolean, &lt;b&gt;false&lt;/b&gt; if the userdata does not have that value.</source>
          <target state="translated">userdata &lt;code&gt;u&lt;/code&gt; に関連付けられた &lt;code&gt;n&lt;/code&gt; 番目のユーザー値とブール値を返します。userdataにその値がない場合は&lt;b&gt;falseを&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="db78771d6acbed28111d58cf748f20e4959f1e52" translate="yes" xml:space="preserve">
          <source>Returns the Lua value associated to &lt;code&gt;u&lt;/code&gt;. If &lt;code&gt;u&lt;/code&gt; is not a full userdata, returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; に関連付けられたLua値を返します。 &lt;code&gt;u&lt;/code&gt; が完全なユーザーデータでない場合は、&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="d1851a04bfd13cc05cd523998c36bdc322db17e1" translate="yes" xml:space="preserve">
          <source>Returns the absolute value of &lt;code&gt;x&lt;/code&gt;. (integer/float)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の絶対値を返します。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="043e0287b11b1a9c8f88357339923c8234440ef7" translate="yes" xml:space="preserve">
          <source>Returns the address of the current content of buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;). Note that any addition to the buffer may invalidate this address.</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; の現在のコンテンツのアドレスを返します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。バッファに追加すると、このアドレスが無効になる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="19e9a2e3f9c2da4b70e14502d18cc907361074e9" translate="yes" xml:space="preserve">
          <source>Returns the address of the version number (a C static variable) stored in the Lua core. When called with a valid &lt;a href=&quot;#lua_State&quot;&gt;&lt;code&gt;lua_State&lt;/code&gt;&lt;/a&gt;, returns the address of the version used to create that state. When called with &lt;code&gt;NULL&lt;/code&gt;, returns the address of the version running the call.</source>
          <target state="translated">Luaコアに保存されているバージョン番号（C静的変数）のアドレスを返します。有効な&lt;a href=&quot;#lua_State&quot;&gt; &lt;code&gt;lua_State&lt;/code&gt; &lt;/a&gt;を指定して呼び出されると、その状態の作成に使用されたバージョンのアドレスを返します。 &lt;code&gt;NULL&lt;/code&gt; で呼び出されると、呼び出しを実行しているバージョンのアドレスを返します。</target>
        </trans-unit>
        <trans-unit id="d492dc5dd4aa5f92735d2073fff7474e1a6b394e" translate="yes" xml:space="preserve">
          <source>Returns the arc cosine of &lt;code&gt;x&lt;/code&gt; (in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の逆余弦（ラジアン）を返します。</target>
        </trans-unit>
        <trans-unit id="f089a8dff08d67188de1f7c5039f149b9fa4a377" translate="yes" xml:space="preserve">
          <source>Returns the arc sine of &lt;code&gt;x&lt;/code&gt; (in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の逆正弦（ラジアン）を返します。</target>
        </trans-unit>
        <trans-unit id="fa1247ba15c62e976046573c6ccc1feeee2f5b6b" translate="yes" xml:space="preserve">
          <source>Returns the arc tangent of &lt;code&gt;y/x&lt;/code&gt; (in radians), but uses the signs of both arguments to find the quadrant of the result. It also handles correctly the case of &lt;code&gt;x&lt;/code&gt; being zero.</source>
          <target state="translated">&lt;code&gt;y/x&lt;/code&gt; の円弧接線（ラジアン）を返しますが、両方の引数の符号を使用して結果の象限を見つけます。また、 &lt;code&gt;x&lt;/code&gt; がゼロの場合も正しく処理します。</target>
        </trans-unit>
        <trans-unit id="94a36782eb1a80f58363dabc61ceebcb41f258d2" translate="yes" xml:space="preserve">
          <source>Returns the arc tangent of &lt;code&gt;y/x&lt;/code&gt; (in radians), but uses the signs of both parameters to find the quadrant of the result. (It also handles correctly the case of &lt;code&gt;x&lt;/code&gt; being zero.)</source>
          <target state="translated">&lt;code&gt;y/x&lt;/code&gt; の逆正接（ラジアン）を返しますが、両方のパラメーターの符号を使用して結果の象限を検索します。（ &lt;code&gt;x&lt;/code&gt; がゼロの場合も正しく処理されます。）</target>
        </trans-unit>
        <trans-unit id="54bafb79a60778cdf93eb8dffe6dc26866068180" translate="yes" xml:space="preserve">
          <source>Returns the argument with the maximum value, according to the Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">Lua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; に従って、最大値の引数を返します。</target>
        </trans-unit>
        <trans-unit id="de4793305a62a7e062a99c696537172768770061" translate="yes" xml:space="preserve">
          <source>Returns the argument with the maximum value, according to the Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt;. (integer/float)</source>
          <target state="translated">Lua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; に従って、最大値の引数を返します。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="d704759b0150aa7e291bb40d3b9e1aa860586ad0" translate="yes" xml:space="preserve">
          <source>Returns the argument with the minimum value, according to the Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">Lua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; に従って、最小値の引数を返します。</target>
        </trans-unit>
        <trans-unit id="23b18e62742fdde277f18684dd6adb5af258b562" translate="yes" xml:space="preserve">
          <source>Returns the argument with the minimum value, according to the Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt;. (integer/float)</source>
          <target state="translated">Lua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; に従って、最小値の引数を返します。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="e0191dad2cae73c27ef7de25f92860dda78cff8d" translate="yes" xml:space="preserve">
          <source>Returns the code points (as integers) from all characters in &lt;code&gt;s&lt;/code&gt; that start between byte position &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; (both included). The default for &lt;code&gt;i&lt;/code&gt; is 1 and for &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;i&lt;/code&gt;. It raises an error if it meets any invalid byte sequence.</source>
          <target state="translated">バイト位置 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; （両方を含む）の間で始まる &lt;code&gt;s&lt;/code&gt; 内のすべての文字からコードポイントを（整数として）返します。 &lt;code&gt;i&lt;/code&gt; のデフォルトは1で、 &lt;code&gt;j&lt;/code&gt; のデフォルトは &lt;code&gt;i&lt;/code&gt; です。無効なバイトシーケンスに遭遇すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="008974cf3ea7a0e47cc66825ae9db754a6215ba2" translate="yes" xml:space="preserve">
          <source>Returns the codepoints (as integers) from all characters in &lt;code&gt;s&lt;/code&gt; that start between byte position &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; (both included). The default for &lt;code&gt;i&lt;/code&gt; is 1 and for &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;i&lt;/code&gt;. It raises an error if it meets any invalid byte sequence.</source>
          <target state="translated">バイト位置 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; （両方を含む）の間で始まる &lt;code&gt;s&lt;/code&gt; のすべての文字からコードポイントを（整数として）返します。 &lt;code&gt;i&lt;/code&gt; のデフォルトは1で、 &lt;code&gt;j&lt;/code&gt; のデフォルトは &lt;code&gt;i&lt;/code&gt; です。無効なバイトシーケンスに一致すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4e9e95635ca72435ec1e4654b329133fcb9b67b6" translate="yes" xml:space="preserve">
          <source>Returns the cosine of &lt;code&gt;x&lt;/code&gt; (assumed to be in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の余弦を返します（ラジアンであると想定）。</target>
        </trans-unit>
        <trans-unit id="d63943c503fbdbc9daf70eb8b368eb63c603cce5" translate="yes" xml:space="preserve">
          <source>Returns the current hook count.</source>
          <target state="translated">現在のフック数を返します。</target>
        </trans-unit>
        <trans-unit id="91adc8b466cf6e5462daa3cdcd2555a890c15635" translate="yes" xml:space="preserve">
          <source>Returns the current hook function.</source>
          <target state="translated">現在のフック関数を返します。</target>
        </trans-unit>
        <trans-unit id="77c0c811e0708693f332c243247f1f4509702b82" translate="yes" xml:space="preserve">
          <source>Returns the current hook mask.</source>
          <target state="translated">現在のフックマスクを返します。</target>
        </trans-unit>
        <trans-unit id="dfa58fd57235ee80a6d63769d911723e3534cac8" translate="yes" xml:space="preserve">
          <source>Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count (as set by the &lt;a href=&quot;#pdf-debug.sethook&quot;&gt;&lt;code&gt;debug.sethook&lt;/code&gt;&lt;/a&gt; function).</source>
          <target state="translated">スレッドの現在のフック設定を、現在のフック関数、現在のフックマスク、現在のフックカウント（&lt;a href=&quot;#pdf-debug.sethook&quot;&gt; &lt;code&gt;debug.sethook&lt;/code&gt; &lt;/a&gt;関数で設定）の3つの値として返します。</target>
        </trans-unit>
        <trans-unit id="732a0eb24511cdffe2ee8db1f2a63d0d03797e0b" translate="yes" xml:space="preserve">
          <source>Returns the current hook settings of the thread, as three values: the current hook function, the current hook mask, and the current hook count, as set by the &lt;a href=&quot;#pdf-debug.sethook&quot;&gt;&lt;code&gt;debug.sethook&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">スレッドの現在のフック設定を、&lt;a href=&quot;#pdf-debug.sethook&quot;&gt; &lt;code&gt;debug.sethook&lt;/code&gt; &lt;/a&gt;関数で設定された現在のフック関数、現在のフックマスク、および現在のフックカウントの3つの値として返します。</target>
        </trans-unit>
        <trans-unit id="a4984b9b007c5eee4f424cfbc9e8ac599f7bc3b2" translate="yes" xml:space="preserve">
          <source>Returns the current time when called without arguments, or a time representing the local date and time specified by the given table. This table must have fields &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, and &lt;code&gt;day&lt;/code&gt;, and may have fields &lt;code&gt;hour&lt;/code&gt; (default is 12), &lt;code&gt;min&lt;/code&gt; (default is 0), &lt;code&gt;sec&lt;/code&gt; (default is 0), and &lt;code&gt;isdst&lt;/code&gt; (default is &lt;b&gt;nil&lt;/b&gt;). Other fields are ignored. For a description of these fields, see the &lt;a href=&quot;#pdf-os.date&quot;&gt;&lt;code&gt;os.date&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">引数なしで呼び出されたときの現在時刻、または指定されたテーブルで指定されたローカルの日付と時刻を表す時刻を返します。このテーブルには &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、および &lt;code&gt;day&lt;/code&gt; フィールドが必要であり、 &lt;code&gt;hour&lt;/code&gt; （デフォルトは12）、 &lt;code&gt;min&lt;/code&gt; （デフォルトは0）、 &lt;code&gt;sec&lt;/code&gt; （デフォルトは0）、および &lt;code&gt;isdst&lt;/code&gt; （デフォルトは&lt;b&gt;nil&lt;/b&gt;）のフィールドが含まれる場合があります。他のフィールドは無視されます。これらのフィールドの説明については、&lt;a href=&quot;#pdf-os.date&quot;&gt; &lt;code&gt;os.date&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b56d9d3e264bf539db578bb8f6317e05525f18e" translate="yes" xml:space="preserve">
          <source>Returns the destination table &lt;code&gt;a2&lt;/code&gt;.</source>
          <target state="translated">宛先テーブル &lt;code&gt;a2&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4a89ca3dbaee05fa9562365bbb11bd2987b8b36f" translate="yes" xml:space="preserve">
          <source>Returns the difference, in seconds, from time &lt;code&gt;t1&lt;/code&gt; to time &lt;code&gt;t2&lt;/code&gt; (where the times are values returned by &lt;a href=&quot;#pdf-os.time&quot;&gt;&lt;code&gt;os.time&lt;/code&gt;&lt;/a&gt;). In POSIX, Windows, and some other systems, this value is exactly &lt;code&gt;t2&lt;/code&gt;&lt;em&gt;-&lt;/em&gt;&lt;code&gt;t1&lt;/code&gt;.</source>
          <target state="translated">時間 &lt;code&gt;t1&lt;/code&gt; から時間 &lt;code&gt;t2&lt;/code&gt; までの差を秒単位で返します（時間は&lt;a href=&quot;#pdf-os.time&quot;&gt; &lt;code&gt;os.time&lt;/code&gt; &lt;/a&gt;によって返される値です）。POSIX、Windows、およびその他の一部のシステムでは、この値は正確に &lt;code&gt;t2&lt;/code&gt; &lt;em&gt;- &lt;/em&gt; &lt;code&gt;t1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="74ef8f0d43907d8993cbf07845e98c64309c4c57" translate="yes" xml:space="preserve">
          <source>Returns the elements from the given list. This function is equivalent to</source>
          <target state="translated">与えられたリストの要素を返します。この関数は</target>
        </trans-unit>
        <trans-unit id="a0ecb44d1768c16defe86a7226eb7cdb677c4d76" translate="yes" xml:space="preserve">
          <source>Returns the index of the top element in the stack. Because indices start at 1, this result is equal to the number of elements in the stack; in particular, 0 means an empty stack.</source>
          <target state="translated">スタックの先頭の要素のインデックスを返します。インデックスは 1 から始まるので、この結果はスタックの要素数と等しくなります。</target>
        </trans-unit>
        <trans-unit id="aae1a98a2afe7e2f6164ed56d98f2c5601c177ce" translate="yes" xml:space="preserve">
          <source>Returns the integral part of &lt;code&gt;x&lt;/code&gt; and the fractional part of &lt;code&gt;x&lt;/code&gt;. Its second result is always a float.</source>
          <target state="translated">戻り値の不可欠な部分 &lt;code&gt;x&lt;/code&gt; との小数部 &lt;code&gt;x&lt;/code&gt; 。2番目の結果は常に浮動小数点です。</target>
        </trans-unit>
        <trans-unit id="d07d66699f96edb0b840ccb7b505ca206ea713f8" translate="yes" xml:space="preserve">
          <source>Returns the internal numeric codes of the characters &lt;code&gt;s[i]&lt;/code&gt;, &lt;code&gt;s[i+1]&lt;/code&gt;, ..., &lt;code&gt;s[j]&lt;/code&gt;. The default value for &lt;code&gt;i&lt;/code&gt; is 1; the default value for &lt;code&gt;j&lt;/code&gt; is &lt;code&gt;i&lt;/code&gt;. These indices are corrected following the same rules of function &lt;a href=&quot;#pdf-string.sub&quot;&gt;&lt;code&gt;string.sub&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字 &lt;code&gt;s[i]&lt;/code&gt; 、 &lt;code&gt;s[i+1]&lt;/code&gt; 、...、 &lt;code&gt;s[j]&lt;/code&gt; の内部数値コードを返します。 &lt;code&gt;i&lt;/code&gt; のデフォルト値は1です。 &lt;code&gt;j&lt;/code&gt; のデフォルト値は &lt;code&gt;i&lt;/code&gt; です。これらのインデックスは、関数&lt;a href=&quot;#pdf-string.sub&quot;&gt; &lt;code&gt;string.sub&lt;/code&gt; の&lt;/a&gt;同じルールに従って修正されます。</target>
        </trans-unit>
        <trans-unit id="b30312394bff808c7607188052990ddfc3f0af18" translate="yes" xml:space="preserve">
          <source>Returns the largest integral value less than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 以下の最大の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="37a74944cfaba1cf96089aa04c3aab36bd768194" translate="yes" xml:space="preserve">
          <source>Returns the largest integral value smaller than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 以下の最大の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="6b65eebb8bdbd39036e0d29924f25daa397f311e" translate="yes" xml:space="preserve">
          <source>Returns the length of the current content of buffer &lt;code&gt;B&lt;/code&gt; (see &lt;a href=&quot;#luaL_Buffer&quot;&gt;&lt;code&gt;luaL_Buffer&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バッファ &lt;code&gt;B&lt;/code&gt; の現在のコンテンツの長さを返します（&lt;a href=&quot;#luaL_Buffer&quot;&gt; &lt;code&gt;luaL_Buffer&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a82986faba63c6df7b4a7e1f2c3e8675bebec131" translate="yes" xml:space="preserve">
          <source>Returns the length of the object &lt;code&gt;v&lt;/code&gt;, which must be a table or a string, without invoking the &lt;code&gt;__len&lt;/code&gt; metamethod. Returns an integer.</source>
          <target state="translated">&lt;code&gt;__len&lt;/code&gt; メタメソッドを呼び出さずに、オブジェクト &lt;code&gt;v&lt;/code&gt; の長さを返します。これはテーブルまたは文字列でなければなりません。整数を返します。</target>
        </trans-unit>
        <trans-unit id="4d195539511c55ff9d09810f9cb9cabd46d5d2c6" translate="yes" xml:space="preserve">
          <source>Returns the length of the value at the given index. It is equivalent to the '&lt;code&gt;#&lt;/code&gt;' operator in Lua (see &lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7&lt;/a&gt;) and may trigger a metamethod for the &quot;length&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). The result is pushed on the stack.</source>
          <target state="translated">指定されたインデックスにある値の長さを返します。これはLuaの' &lt;code&gt;#&lt;/code&gt; '演算子（&lt;a href=&quot;#3.4.7&quot;&gt;&amp;sect;3.4.7を&lt;/a&gt;参照）と同等であり、「length」イベント（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）のメタメソッドをトリガーできます。結果はスタックにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="ca18490544ebe4ab9d2b88782ccfa4bfa597d5c6" translate="yes" xml:space="preserve">
          <source>Returns the logarithm of &lt;code&gt;x&lt;/code&gt; in the given base. The default for &lt;code&gt;base&lt;/code&gt; is &lt;em&gt;e&lt;/em&gt; (so that the function returns the natural logarithm of &lt;code&gt;x&lt;/code&gt;).</source>
          <target state="translated">指定された底での &lt;code&gt;x&lt;/code&gt; の対数を返します。 &lt;code&gt;base&lt;/code&gt; のデフォルトは&lt;em&gt;eです&lt;/em&gt;（そのため、関数は &lt;code&gt;x&lt;/code&gt; の自然対数を返します）。</target>
        </trans-unit>
        <trans-unit id="d77d922681562ed53526ab1cca990af72395285d" translate="yes" xml:space="preserve">
          <source>Returns the maximum value between &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;-x&lt;/code&gt;. (integer/float)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;-x&lt;/code&gt; の間の最大値を返します。（整数/フロート）</target>
        </trans-unit>
        <trans-unit id="d3cb57918cd0fd4016648ae402c7074bcd73a43b" translate="yes" xml:space="preserve">
          <source>Returns the memory-allocation function of a given state. If &lt;code&gt;ud&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, Lua stores in &lt;code&gt;*ud&lt;/code&gt; the opaque pointer given when the memory-allocator function was set.</source>
          <target state="translated">指定された状態のメモリ割り当て関数を返します。 &lt;code&gt;ud&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、Luaは &lt;code&gt;*ud&lt;/code&gt; に、メモリアロケータ関数が設定されたときに指定された不透明なポインタを格納します。</target>
        </trans-unit>
        <trans-unit id="274b26f09340089c109b77fcaa34ab85c7b27be3" translate="yes" xml:space="preserve">
          <source>Returns the metatable of the given &lt;code&gt;value&lt;/code&gt; or &lt;b&gt;nil&lt;/b&gt; if it does not have a metatable.</source>
          <target state="translated">戻り値指定したのメタテーブル &lt;code&gt;value&lt;/code&gt; または&lt;b&gt;nilを&lt;/b&gt;、それがメタテーブルを持っていない場合。</target>
        </trans-unit>
        <trans-unit id="f827b993d336f39e4e067ba1cd00ca433786753f" translate="yes" xml:space="preserve">
          <source>Returns the name of the type encoded by the value &lt;code&gt;tp&lt;/code&gt;, which must be one the values returned by &lt;a href=&quot;#lua_type&quot;&gt;&lt;code&gt;lua_type&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値 &lt;code&gt;tp&lt;/code&gt; によってエンコードされた型の名前を返します。これは、&lt;a href=&quot;#lua_type&quot;&gt; &lt;code&gt;lua_type&lt;/code&gt; &lt;/a&gt;によって返される値の1つでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b5d2c5467f6b31c133d151a482f437390192631a" translate="yes" xml:space="preserve">
          <source>Returns the name of the type of the value at the given index.</source>
          <target state="translated">指定したインデックスの値の型名を返します。</target>
        </trans-unit>
        <trans-unit id="09f17fbeecb99d8ceed703c8e378ebf644bfa53e" translate="yes" xml:space="preserve">
          <source>Returns the new state, or &lt;code&gt;NULL&lt;/code&gt; if there is a memory allocation error.</source>
          <target state="translated">新しい状態を返します。メモリ割り当てエラーがある場合は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d43b7f45fadd64b442bc6cb030aac62b5fed9b46" translate="yes" xml:space="preserve">
          <source>Returns the number of UTF-8 characters in string &lt;code&gt;s&lt;/code&gt; that start between positions &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; (both inclusive). The default for &lt;code&gt;i&lt;/code&gt; is 1 and for &lt;code&gt;j&lt;/code&gt; is -1. If it finds any invalid byte sequence, returns &lt;b&gt;fail&lt;/b&gt; plus the position of the first invalid byte.</source>
          <target state="translated">位置 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; （両方を含む）の間で始まる文字列 &lt;code&gt;s&lt;/code&gt; のUTF-8文字の数を返します。 &lt;code&gt;i&lt;/code&gt; のデフォルトは1で、 &lt;code&gt;j&lt;/code&gt; のデフォルトは-1です。無効なバイトシーケンスが見つかった場合は、&lt;b&gt;fail&lt;/b&gt;と最初の無効なバイトの位置を返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1fac8d97901da4fcfa21c51273c8ade3e30d4960" translate="yes" xml:space="preserve">
          <source>Returns the number of UTF-8 characters in string &lt;code&gt;s&lt;/code&gt; that start between positions &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; (both inclusive). The default for &lt;code&gt;i&lt;/code&gt; is 1 and for &lt;code&gt;j&lt;/code&gt; is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.</source>
          <target state="translated">位置 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; （両方を含む）の間で始まる文字列 &lt;code&gt;s&lt;/code&gt; の UTF-8文字の数を返します。 &lt;code&gt;i&lt;/code&gt; のデフォルトは1で、 &lt;code&gt;j&lt;/code&gt; のデフォルトは-1です。無効なバイトシーケンスが見つかった場合は、false値と最初の無効なバイトの位置を返します。</target>
        </trans-unit>
        <trans-unit id="84f83acaebe526961dfec0323624b3e5b62c9fd0" translate="yes" xml:space="preserve">
          <source>Returns the position (in bytes) where the encoding of the &lt;code&gt;n&lt;/code&gt;-th character of &lt;code&gt;s&lt;/code&gt; (counting from position &lt;code&gt;i&lt;/code&gt;) starts. A negative &lt;code&gt;n&lt;/code&gt; gets characters before position &lt;code&gt;i&lt;/code&gt;. The default for &lt;code&gt;i&lt;/code&gt; is 1 when &lt;code&gt;n&lt;/code&gt; is non-negative and &lt;code&gt;#s + 1&lt;/code&gt; otherwise, so that &lt;code&gt;utf8.offset(s, -n)&lt;/code&gt; gets the offset of the &lt;code&gt;n&lt;/code&gt;-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns &lt;b&gt;fail&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; の &lt;code&gt;n&lt;/code&gt; 番目の文字（位置 &lt;code&gt;i&lt;/code&gt; から数えて）のエンコードが開始される位置（バイト単位）を返します。負の &lt;code&gt;n&lt;/code&gt; は、位置 &lt;code&gt;i&lt;/code&gt; の前に文字を取得します。 &lt;code&gt;i&lt;/code&gt; のデフォルトは、 &lt;code&gt;n&lt;/code&gt; が負でない場合は &lt;code&gt;#s + 1&lt;/code&gt; それ以外の場合は#s + 1であるため、 &lt;code&gt;utf8.offset(s, -n)&lt;/code&gt; は文字列の末尾から &lt;code&gt;n&lt;/code&gt; 番目の文字のオフセットを取得します。指定された文字が件名に含まれておらず、終了直後でもない場合、関数は&lt;b&gt;失敗を&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="56c4cc904851482307ead3085d1ccd1030454da6" translate="yes" xml:space="preserve">
          <source>Returns the position (in bytes) where the encoding of the &lt;code&gt;n&lt;/code&gt;-th character of &lt;code&gt;s&lt;/code&gt; (counting from position &lt;code&gt;i&lt;/code&gt;) starts. A negative &lt;code&gt;n&lt;/code&gt; gets characters before position &lt;code&gt;i&lt;/code&gt;. The default for &lt;code&gt;i&lt;/code&gt; is 1 when &lt;code&gt;n&lt;/code&gt; is non-negative and &lt;code&gt;#s + 1&lt;/code&gt; otherwise, so that &lt;code&gt;utf8.offset(s, -n)&lt;/code&gt; gets the offset of the &lt;code&gt;n&lt;/code&gt;-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; （位置 &lt;code&gt;i&lt;/code&gt; から数えて）の &lt;code&gt;n&lt;/code&gt; 番目の文字のエンコードが開始する位置（バイト単位）を返します。負の &lt;code&gt;n&lt;/code&gt; は、位置 &lt;code&gt;i&lt;/code&gt; の前の文字を取得します。 &lt;code&gt;n&lt;/code&gt; が負でない場合、 &lt;code&gt;i&lt;/code&gt; のデフォルトは1で、それ以外の場合は &lt;code&gt;#s + 1&lt;/code&gt; なので、 &lt;code&gt;utf8.offset(s, -n)&lt;/code&gt; は文字列の末尾から &lt;code&gt;n&lt;/code&gt; 番目の文字のオフセットを取得します。指定された文字が件名に含まれておらず、末尾の直後にもない場合、関数は&lt;b&gt;nilを&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="1e3fa00427da0e5f4dcde3c242518db402bf818a" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-index that represents the &lt;code&gt;i&lt;/code&gt;-th upvalue of the running function (see &lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2&lt;/a&gt;). &lt;code&gt;i&lt;/code&gt; must be in the range &lt;em&gt;[1,256]&lt;/em&gt;.</source>
          <target state="translated">実行中の関数の &lt;code&gt;i&lt;/code&gt; 番目のアップバリューを表す疑似インデックスを返します（&lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2を&lt;/a&gt;参照）。 &lt;code&gt;i&lt;/code&gt; は&lt;em&gt;[1,256]&lt;/em&gt;の範囲内にある必要があります。</target>
        </trans-unit>
        <trans-unit id="bc45c511f20e727c297897c4a412e04b9bb492de" translate="yes" xml:space="preserve">
          <source>Returns the pseudo-index that represents the &lt;code&gt;i&lt;/code&gt;-th upvalue of the running function (see &lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;).</source>
          <target state="translated">実行中の関数の &lt;code&gt;i&lt;/code&gt; 番目のアップ値を表す疑似インデックスを返します（&lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="33f56655c8e98bdcbd9254da5f1e14cc5e047720" translate="yes" xml:space="preserve">
          <source>Returns the raw &quot;length&quot; of the value at the given index: for strings, this is the string length; for tables, this is the result of the length operator ('&lt;code&gt;#&lt;/code&gt;') with no metamethods; for userdata, this is the size of the block of memory allocated for the userdata. For other values, this call returns 0.</source>
          <target state="translated">指定されたインデックスの値の生の「長さ」を返します。文字列の場合、これは文字列の長さです。テーブルの場合、これはメタメソッドを使用しない長さ演算子（ ' &lt;code&gt;#&lt;/code&gt; '）の結果です。userdataの場合、これはuserdataに割り当てられたメモリブロックのサイズです。他の値の場合、この呼び出しは0を返します。</target>
        </trans-unit>
        <trans-unit id="39d8bb977f9b8a6f1742fd3f9dc45db22e1fcb68" translate="yes" xml:space="preserve">
          <source>Returns the raw &quot;length&quot; of the value at the given index: for strings, this is the string length; for tables, this is the result of the length operator ('&lt;code&gt;#&lt;/code&gt;') with no metamethods; for userdata, this is the size of the block of memory allocated for the userdata; for other values, it is 0.</source>
          <target state="translated">指定されたインデックスの値の生の「長さ」を返します。文字列の場合、これは文字列の長さです。テーブルの場合、これはメタメソッドのない長さ演算子（ ' &lt;code&gt;#&lt;/code&gt; '）の結果です。userdataの場合、これはuserdataに割り当てられたメモリブロックのサイズです。他の値の場合は0です。</target>
        </trans-unit>
        <trans-unit id="94fe4847ff4993fa7c4fb27d617dd7c02c05a931" translate="yes" xml:space="preserve">
          <source>Returns the registry table (see &lt;a href=&quot;#4.3&quot;&gt;&amp;sect;4.3&lt;/a&gt;).</source>
          <target state="translated">レジストリテーブルを返します（&lt;a href=&quot;#4.3&quot;&gt;&amp;sect;4.3を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a4878c08432faeac78e45f44f0026ebddb8749ef" translate="yes" xml:space="preserve">
          <source>Returns the registry table (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;).</source>
          <target state="translated">レジストリテーブルを返します（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1f182d1d0910847b92e9f446a7345b1cf7e93ffa" translate="yes" xml:space="preserve">
          <source>Returns the remainder of the division of &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;y&lt;/code&gt; that rounds the quotient towards zero. (integer/float)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を &lt;code&gt;y&lt;/code&gt; で割った余りを返し、商をゼロに丸めます。（整数/浮動小数点）</target>
        </trans-unit>
        <trans-unit id="568e6f5ede477aed12d9d477add4ad442b3fde9c" translate="yes" xml:space="preserve">
          <source>Returns the resulting name of the first file that it can open in read mode (after closing the file), or &lt;b&gt;fail&lt;/b&gt; plus an error message if none succeeds. (This error message lists all file names it tried to open.)</source>
          <target state="translated">（ファイルを閉じた後）読み取りモードで開くことができる最初のファイルの結果の名前を返します。成功しない場合は&lt;b&gt;失敗し&lt;/b&gt;、エラーメッセージを返します。（このエラーメッセージには、開こうとしたすべてのファイル名が一覧表示されます。）</target>
        </trans-unit>
        <trans-unit id="7d00adfd429e9ecb79de1d7e05907584e1f561cc" translate="yes" xml:space="preserve">
          <source>Returns the resulting name of the first file that it can open in read mode (after closing the file), or &lt;b&gt;nil&lt;/b&gt; plus an error message if none succeeds. (This error message lists all file names it tried to open.)</source>
          <target state="translated">（ファイルを閉じた後）読み取りモードで開くことができる最初のファイルの結果の名前を返します。成功しなかった場合は&lt;b&gt;nil&lt;/b&gt;とエラーメッセージを返します。（このエラーメッセージには、開こうとしたすべてのファイル名がリストされます。）</target>
        </trans-unit>
        <trans-unit id="0cafeada936b9b3c536bfda3d7c114159746bc82" translate="yes" xml:space="preserve">
          <source>Returns the running coroutine plus a boolean, true when the running coroutine is the main one.</source>
          <target state="translated">実行中のコルーチンとブール値を返し、実行中のコルーチンがメインの場合はtrueを返します。</target>
        </trans-unit>
        <trans-unit id="f520f4734dbc499082a5c134aebb7e5257b19210" translate="yes" xml:space="preserve">
          <source>Returns the sine of &lt;code&gt;x&lt;/code&gt; (assumed to be in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の正弦を返します（ラジアンであると想定）。</target>
        </trans-unit>
        <trans-unit id="da558ef5afc0fc9c0d21911a38e825ff24dcf0a2" translate="yes" xml:space="preserve">
          <source>Returns the size of a string resulting from &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt; with the given format. The format string cannot have the variable-length options '&lt;code&gt;s&lt;/code&gt;' or '&lt;code&gt;z&lt;/code&gt;' (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;から得られた文字列のサイズを指定された形式で返します。フォーマット文字列には、可変長オプション ' &lt;code&gt;s&lt;/code&gt; 'または ' &lt;code&gt;z&lt;/code&gt; 'を&lt;a href=&quot;#6.4.2&quot;&gt;含める&lt;/a&gt;ことはできません（&amp;sect;6.4.2を参照）。</target>
        </trans-unit>
        <trans-unit id="8a271ccad0d5f1305d18e3f34055196791089e29" translate="yes" xml:space="preserve">
          <source>Returns the smallest integral value greater than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 以上の最小の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="33b392e0c4352ffea2f8586f23e071e85ca1ffec" translate="yes" xml:space="preserve">
          <source>Returns the smallest integral value larger than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; 以上の最小の整数値を返します。</target>
        </trans-unit>
        <trans-unit id="a156517157e4cb0343c49c32e737cf3b8fa30ca3" translate="yes" xml:space="preserve">
          <source>Returns the square root of &lt;code&gt;x&lt;/code&gt;. (You can also use the expression &lt;code&gt;x^0.5&lt;/code&gt; to compute this value.)</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の平方根を返します。（式 &lt;code&gt;x^0.5&lt;/code&gt; を使用してこの値を計算することもできます。）</target>
        </trans-unit>
        <trans-unit id="92c7a785497146b5964e3cfcb16d7bf24c7763b5" translate="yes" xml:space="preserve">
          <source>Returns the status of coroutine &lt;code&gt;co&lt;/code&gt;, as a string: &lt;code&gt;&quot;running&quot;&lt;/code&gt;, if the coroutine is running (that is, it called &lt;code&gt;status&lt;/code&gt;); &lt;code&gt;&quot;suspended&quot;&lt;/code&gt;, if the coroutine is suspended in a call to &lt;code&gt;yield&lt;/code&gt;, or if it has not started running yet; &lt;code&gt;&quot;normal&quot;&lt;/code&gt; if the coroutine is active but not running (that is, it has resumed another coroutine); and &lt;code&gt;&quot;dead&quot;&lt;/code&gt; if the coroutine has finished its body function, or if it has stopped with an error.</source>
          <target state="translated">コルーチン &lt;code&gt;co&lt;/code&gt; のステータスを文字列として返します。コルーチンが実行中の場合（つまり、 &lt;code&gt;status&lt;/code&gt; と呼ばれる場合）は、 &lt;code&gt;&quot;running&quot;&lt;/code&gt; です。 &lt;code&gt;&quot;suspended&quot;&lt;/code&gt; 、コルーチンが &lt;code&gt;yield&lt;/code&gt; の呼び出しで中断されている場合、またはまだ実行されていない場合。 &lt;code&gt;&quot;normal&quot;&lt;/code&gt; コルーチンはアクティブであるが、稼働していない場合（すなわち、それは別のコルーチンを再開しました）。そしてコルーチンがその身体機能を終えた場合、またはコルーチンがエラーで停止した場合は &lt;code&gt;&quot;dead&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae60fb59b3fcc2ee3f16755978255651eb156610" translate="yes" xml:space="preserve">
          <source>Returns the status of the coroutine &lt;code&gt;co&lt;/code&gt;, as a string: &lt;code&gt;&quot;running&quot;&lt;/code&gt;, if the coroutine is running (that is, it is the one that called &lt;code&gt;status&lt;/code&gt;); &lt;code&gt;&quot;suspended&quot;&lt;/code&gt;, if the coroutine is suspended in a call to &lt;code&gt;yield&lt;/code&gt;, or if it has not started running yet; &lt;code&gt;&quot;normal&quot;&lt;/code&gt; if the coroutine is active but not running (that is, it has resumed another coroutine); and &lt;code&gt;&quot;dead&quot;&lt;/code&gt; if the coroutine has finished its body function, or if it has stopped with an error.</source>
          <target state="translated">コルーチン &lt;code&gt;co&lt;/code&gt; のステータスを文字列として返します： &lt;code&gt;&quot;running&quot;&lt;/code&gt; 、コルーチンが実行中の場合（つまり、 &lt;code&gt;status&lt;/code&gt; を呼び出したもの）。 &lt;code&gt;&quot;suspended&quot;&lt;/code&gt; 、コルーチンが &lt;code&gt;yield&lt;/code&gt; の呼び出しで一時停止されている場合、またはコルーチンがまだ実行を開始していない場合。コルーチンがアクティブであるが実行されていない（つまり、別のコルーチンを再開した）場合は &lt;code&gt;&quot;normal&quot;&lt;/code&gt; です。コルーチンが身体機能を終了した場合、またはエラーで停止した場合は &lt;code&gt;&quot;dead&quot;&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="6643f34f054d2169fc15059330c9797cabe4b0f8" translate="yes" xml:space="preserve">
          <source>Returns the status of the thread &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">スレッド &lt;code&gt;L&lt;/code&gt; のステータスを返します。</target>
        </trans-unit>
        <trans-unit id="ce13df23b5d839e4a1b3c62a7a51b8e7083872ff" translate="yes" xml:space="preserve">
          <source>Returns the substring of &lt;code&gt;s&lt;/code&gt; that starts at &lt;code&gt;i&lt;/code&gt; and continues until &lt;code&gt;j&lt;/code&gt;; &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; can be negative. If &lt;code&gt;j&lt;/code&gt; is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call &lt;code&gt;string.sub(s,1,j)&lt;/code&gt; returns a prefix of &lt;code&gt;s&lt;/code&gt; with length &lt;code&gt;j&lt;/code&gt;, and &lt;code&gt;string.sub(s, -i)&lt;/code&gt; (for a positive &lt;code&gt;i&lt;/code&gt;) returns a suffix of &lt;code&gt;s&lt;/code&gt; with length &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">戻り値のサブ &lt;code&gt;s&lt;/code&gt; から始まり &lt;code&gt;i&lt;/code&gt; とまで続き &lt;code&gt;j&lt;/code&gt; 。 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; は負にできます。 &lt;code&gt;j&lt;/code&gt; がない場合は、-1（文字列の長さと同じ）と見なされます。具体的には、呼 &lt;code&gt;string.sub(s,1,j)&lt;/code&gt; の接頭辞を返し &lt;code&gt;s&lt;/code&gt; の長さで &lt;code&gt;j&lt;/code&gt; 、及び &lt;code&gt;string.sub(s, -i)&lt;/code&gt; （正用 &lt;code&gt;i&lt;/code&gt; ）の接尾辞を返し &lt;code&gt;s&lt;/code&gt; 長と &lt;code&gt;i&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d879230a982638cb3037d087aec816766d1bff4" translate="yes" xml:space="preserve">
          <source>Returns the tangent of &lt;code&gt;x&lt;/code&gt; (assumed to be in radians).</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; のタンジェントを返します（ラジアンであると想定）。</target>
        </trans-unit>
        <trans-unit id="aeb49cdc670f656ecf94cc356e8482541619f67b" translate="yes" xml:space="preserve">
          <source>Returns the type of its only argument, coded as a string. The possible results of this function are &quot;&lt;code&gt;nil&lt;/code&gt;&quot; (a string, not the value &lt;b&gt;nil&lt;/b&gt;), &quot;&lt;code&gt;number&lt;/code&gt;&quot;, &quot;&lt;code&gt;string&lt;/code&gt;&quot;, &quot;&lt;code&gt;boolean&lt;/code&gt;&quot;, &quot;&lt;code&gt;table&lt;/code&gt;&quot;, &quot;&lt;code&gt;function&lt;/code&gt;&quot;, &quot;&lt;code&gt;thread&lt;/code&gt;&quot;, and &quot;&lt;code&gt;userdata&lt;/code&gt;&quot;.</source>
          <target state="translated">文字列としてコード化された唯一の引数の型を返します。この関数の可能な結果は、「 &lt;code&gt;nil&lt;/code&gt; 」（値&lt;b&gt;nil&lt;/b&gt;ではなく文字列）、「 &lt;code&gt;number&lt;/code&gt; 」、「 &lt;code&gt;string&lt;/code&gt; 」、「 &lt;code&gt;boolean&lt;/code&gt; 」、「 &lt;code&gt;table&lt;/code&gt; 」、「 &lt;code&gt;function&lt;/code&gt; 」、「 &lt;code&gt;thread&lt;/code&gt; 」、および「 &lt;code&gt;userdata&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="b7cc3af32266285b487ea68c1fc6ffc164e146f6" translate="yes" xml:space="preserve">
          <source>Returns the type of the pushed value.</source>
          <target state="translated">押された値の型を返します。</target>
        </trans-unit>
        <trans-unit id="11efeaa1a0a1dad64efc60561b86e6d305ce3e58" translate="yes" xml:space="preserve">
          <source>Returns the type of the value in the given valid index, or &lt;code&gt;LUA_TNONE&lt;/code&gt; for a non-valid (but acceptable) index. The types returned by &lt;a href=&quot;#lua_type&quot;&gt;&lt;code&gt;lua_type&lt;/code&gt;&lt;/a&gt; are coded by the following constants defined in &lt;code&gt;lua.h&lt;/code&gt;: &lt;a id=&quot;pdf-LUA_TNIL&quot;&gt;&lt;code&gt;LUA_TNIL&lt;/code&gt;&lt;/a&gt; (0), &lt;a id=&quot;pdf-LUA_TNUMBER&quot;&gt;&lt;code&gt;LUA_TNUMBER&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TBOOLEAN&quot;&gt;&lt;code&gt;LUA_TBOOLEAN&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TSTRING&quot;&gt;&lt;code&gt;LUA_TSTRING&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TTABLE&quot;&gt;&lt;code&gt;LUA_TTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TFUNCTION&quot;&gt;&lt;code&gt;LUA_TFUNCTION&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TUSERDATA&quot;&gt;&lt;code&gt;LUA_TUSERDATA&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TTHREAD&quot;&gt;&lt;code&gt;LUA_TTHREAD&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-LUA_TLIGHTUSERDATA&quot;&gt;&lt;code&gt;LUA_TLIGHTUSERDATA&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された有効なインデックスの値のタイプ、または無効な（ただし許容可能な）インデックスの &lt;code&gt;LUA_TNONE&lt;/code&gt; を返します。返されるタイプ&lt;a href=&quot;#lua_type&quot;&gt; &lt;code&gt;lua_type&lt;/code&gt; は、&lt;/a&gt;で定義されている定数によって符号化される &lt;code&gt;lua.h&lt;/code&gt; ：&lt;a id=&quot;pdf-LUA_TNIL&quot;&gt; &lt;code&gt;LUA_TNIL&lt;/code&gt; &lt;/a&gt;（0）、&lt;a id=&quot;pdf-LUA_TNUMBER&quot;&gt; &lt;code&gt;LUA_TNUMBER&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TBOOLEAN&quot;&gt; &lt;code&gt;LUA_TBOOLEAN&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TSTRING&quot;&gt; &lt;code&gt;LUA_TSTRING&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TTABLE&quot;&gt; &lt;code&gt;LUA_TTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TFUNCTION&quot;&gt; &lt;code&gt;LUA_TFUNCTION&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TUSERDATA&quot;&gt; &lt;code&gt;LUA_TUSERDATA&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TTHREAD&quot;&gt; &lt;code&gt;LUA_TTHREAD&lt;/code&gt; &lt;/a&gt;、及び&lt;a id=&quot;pdf-LUA_TLIGHTUSERDATA&quot;&gt; &lt;code&gt;LUA_TLIGHTUSERDATA&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="386a1f58fe55c34012815a8391ceb7917714f28e" translate="yes" xml:space="preserve">
          <source>Returns the type of the value in the given valid index, or &lt;code&gt;LUA_TNONE&lt;/code&gt; for a non-valid but acceptable index. The types returned by &lt;a href=&quot;#lua_type&quot;&gt;&lt;code&gt;lua_type&lt;/code&gt;&lt;/a&gt; are coded by the following constants defined in &lt;code&gt;lua.h&lt;/code&gt;: &lt;a id=&quot;pdf-LUA_TNIL&quot;&gt;&lt;code&gt;LUA_TNIL&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TNUMBER&quot;&gt;&lt;code&gt;LUA_TNUMBER&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TBOOLEAN&quot;&gt;&lt;code&gt;LUA_TBOOLEAN&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TSTRING&quot;&gt;&lt;code&gt;LUA_TSTRING&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TTABLE&quot;&gt;&lt;code&gt;LUA_TTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TFUNCTION&quot;&gt;&lt;code&gt;LUA_TFUNCTION&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TUSERDATA&quot;&gt;&lt;code&gt;LUA_TUSERDATA&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_TTHREAD&quot;&gt;&lt;code&gt;LUA_TTHREAD&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-LUA_TLIGHTUSERDATA&quot;&gt;&lt;code&gt;LUA_TLIGHTUSERDATA&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された有効なインデックスの値のタイプを返します。無効であるが受け入れ可能なインデックスの場合は &lt;code&gt;LUA_TNONE&lt;/code&gt; を返します。&lt;a href=&quot;#lua_type&quot;&gt; &lt;code&gt;lua_type&lt;/code&gt; &lt;/a&gt;によって返される型は、lua.hで定義されている次の定数によってコード化され &lt;code&gt;lua.h&lt;/code&gt; ：&lt;a id=&quot;pdf-LUA_TNIL&quot;&gt; &lt;code&gt;LUA_TNIL&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TNUMBER&quot;&gt; &lt;code&gt;LUA_TNUMBER&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TBOOLEAN&quot;&gt; &lt;code&gt;LUA_TBOOLEAN&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TSTRING&quot;&gt; &lt;code&gt;LUA_TSTRING&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TTABLE&quot;&gt; &lt;code&gt;LUA_TTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TFUNCTION&quot;&gt; &lt;code&gt;LUA_TFUNCTION&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TUSERDATA&quot;&gt; &lt;code&gt;LUA_TUSERDATA&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_TTHREAD&quot;&gt; &lt;code&gt;LUA_TTHREAD&lt;/code&gt; &lt;/a&gt;、および&lt;a id=&quot;pdf-LUA_TLIGHTUSERDATA&quot;&gt; &lt;code&gt;LUA_TLIGHTUSERDATA&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c355c772b6a7cd3959fe3ff1b22ce6913ee6b493" translate="yes" xml:space="preserve">
          <source>Returns the value &lt;em&gt;e&lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt; (where &lt;code&gt;e&lt;/code&gt; is the base of natural logarithms).</source>
          <target state="translated">値&lt;em&gt;e &lt;sup&gt;x&lt;/sup&gt;&lt;/em&gt;（ &lt;code&gt;e&lt;/code&gt; は自然対数の底）を返します。</target>
        </trans-unit>
        <trans-unit id="0fb28ceb3afa0ab32151ee21709c9aa0178b4cd0" translate="yes" xml:space="preserve">
          <source>Returns the value of the process environment variable &lt;code&gt;varname&lt;/code&gt; or &lt;b&gt;fail&lt;/b&gt; if the variable is not defined.</source>
          <target state="translated">プロセスの環境変数の値を返します &lt;code&gt;varname&lt;/code&gt; というのか、&lt;b&gt;失敗する&lt;/b&gt;変数が定義されていない場合。</target>
        </trans-unit>
        <trans-unit id="a1f640b6a2396fe00ff3c46e513b55ada5898623" translate="yes" xml:space="preserve">
          <source>Returns the value of the process environment variable &lt;code&gt;varname&lt;/code&gt;, or &lt;b&gt;nil&lt;/b&gt; if the variable is not defined.</source>
          <target state="translated">プロセスの環境変数の値を返します &lt;code&gt;varname&lt;/code&gt; が、または&lt;b&gt;nilを&lt;/b&gt;変数が定義されていない場合。</target>
        </trans-unit>
        <trans-unit id="f3b86e22b7e07287e106fe5463ecf2e5e16d5d52" translate="yes" xml:space="preserve">
          <source>Returns the values packed in string &lt;code&gt;s&lt;/code&gt; (see &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt;) according to the format string &lt;code&gt;fmt&lt;/code&gt; (see &lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2&lt;/a&gt;). An optional &lt;code&gt;pos&lt;/code&gt; marks where to start reading in &lt;code&gt;s&lt;/code&gt; (default is 1). After the read values, this function also returns the index of the first unread byte in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">フォーマット文字列 &lt;code&gt;fmt&lt;/code&gt; （&lt;a href=&quot;#6.4.2&quot;&gt;&amp;sect;6.4.2を&lt;/a&gt;参照）に従って文字列 &lt;code&gt;s&lt;/code&gt; （&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; を&lt;/a&gt;参照）にパックされた値を返します。オプションの &lt;code&gt;pos&lt;/code&gt; は、 &lt;code&gt;s&lt;/code&gt; で読み取りを開始する場所をマークします（デフォルトは1）。値を読み込んだ後、この関数は &lt;code&gt;s&lt;/code&gt; の最初の未読バイトのインデックスも返します。</target>
        </trans-unit>
        <trans-unit id="9da6ffc3c7ea901268412d4b32b6956c0cf722ea" translate="yes" xml:space="preserve">
          <source>Returns the version number of this core.</source>
          <target state="translated">このコアのバージョン番号を返します。</target>
        </trans-unit>
        <trans-unit id="bcc3adbac55a1cae7b7dbc056f59867a7e653730" translate="yes" xml:space="preserve">
          <source>Returns three values (an iterator function, the table &lt;code&gt;t&lt;/code&gt;, and 0) so that the construction</source>
          <target state="translated">3つの値（反復関数、テーブル &lt;code&gt;t&lt;/code&gt; 、および0）を返します。</target>
        </trans-unit>
        <trans-unit id="fd4f281c2403b2b4ec6dfa198827f4141e53f9ac" translate="yes" xml:space="preserve">
          <source>Returns true when the coroutine &lt;code&gt;co&lt;/code&gt; can yield. The default for &lt;code&gt;co&lt;/code&gt; is the running coroutine.</source>
          <target state="translated">コルーチン &lt;code&gt;co&lt;/code&gt; が降伏できる場合はtrueを返します。 &lt;code&gt;co&lt;/code&gt; のデフォルトは、実行中のコルーチンです。</target>
        </trans-unit>
        <trans-unit id="7db585fd6f4edc4d15ef6261e32bad83a4e3fc94" translate="yes" xml:space="preserve">
          <source>Returns true when the running coroutine can yield.</source>
          <target state="translated">実行中のコルーチンが降伏可能な場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="86872d97a4648c727afb8bd8743402fb113d9d79" translate="yes" xml:space="preserve">
          <source>Returns values so that the construction</source>
          <target state="translated">構築時には</target>
        </trans-unit>
        <trans-unit id="c0dd5c1f0b221305574b2b927c5b76675e55a510" translate="yes" xml:space="preserve">
          <source>Rotates the stack elements between the valid index &lt;code&gt;idx&lt;/code&gt; and the top of the stack. The elements are rotated &lt;code&gt;n&lt;/code&gt; positions in the direction of the top, for a positive &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;-n&lt;/code&gt; positions in the direction of the bottom, for a negative &lt;code&gt;n&lt;/code&gt;. The absolute value of &lt;code&gt;n&lt;/code&gt; must not be greater than the size of the slice being rotated. This function cannot be called with a pseudo-index, because a pseudo-index is not an actual stack position.</source>
          <target state="translated">有効なインデックス &lt;code&gt;idx&lt;/code&gt; とスタックの先頭の間でスタック要素を回転させます。要素を回転させる &lt;code&gt;n&lt;/code&gt; 個の正用トップの方向の位置、 &lt;code&gt;n&lt;/code&gt; 、又は &lt;code&gt;-n&lt;/code&gt; 負のために、底部の方向の位置 &lt;code&gt;n&lt;/code&gt; 。 &lt;code&gt;n&lt;/code&gt; の絶対値は、回転されるスライスのサイズを超えてはなりません。疑似インデックスは実際のスタック位置ではないため、この関数を疑似インデックスで呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="cb167298f69784fe48c5d2a384e7c877c8d9492d" translate="yes" xml:space="preserve">
          <source>Saves any written data to &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">書き込まれたデータを &lt;code&gt;file&lt;/code&gt; 保存します。</target>
        </trans-unit>
        <trans-unit id="920400471986593c15fc84e450728648c16819e7" translate="yes" xml:space="preserve">
          <source>Searchers should raise no errors and have no side effects in Lua. (They may have side effects in C, for instance by linking the application with a library.)</source>
          <target state="translated">サーチャーはLuaではエラーを発生させず、副作用もありません。(C言語では、アプリケーションをライブラリにリンクするなどして副作用が出る可能性があります)。</target>
        </trans-unit>
        <trans-unit id="3440752ad05f6155ff5680caecbafde2dc649d9b" translate="yes" xml:space="preserve">
          <source>Searches for the given &lt;code&gt;name&lt;/code&gt; in the given &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;path&lt;/code&gt; で指定された &lt;code&gt;name&lt;/code&gt; 検索します。</target>
        </trans-unit>
        <trans-unit id="94692e4b88a2528c0b5e86368b0213b54dbd9884" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt; for more details about garbage collection and some of these options.</source>
          <target state="translated">ガベージコレクションとこれらのオプションの詳細については、&lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d2a18ffdb89ed379138be3152d18086f1d55d2a3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#pdf-debug.getlocal&quot;&gt;&lt;code&gt;debug.getlocal&lt;/code&gt;&lt;/a&gt; for more information about variable indices and names.</source>
          <target state="translated">変数のインデックスと名前の詳細については、&lt;a href=&quot;#pdf-debug.getlocal&quot;&gt; &lt;code&gt;debug.getlocal&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c68ceaa8d812b1b10a7eea6ccb5e07ce5de30a37" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#pdf-debug.getupvalue&quot;&gt;&lt;code&gt;debug.getupvalue&lt;/code&gt;&lt;/a&gt; for more information about upvalues.</source>
          <target state="translated">&lt;a href=&quot;#pdf-debug.getupvalue&quot;&gt; &lt;code&gt;debug.getupvalue&lt;/code&gt; &lt;/a&gt;詳細については、debug.getupvalueを参照してください。</target>
        </trans-unit>
        <trans-unit id="8806221244780430f4dab1be1efe9e1deb956088" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#pdf-warn&quot;&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/a&gt; for more details about warnings.</source>
          <target state="translated">参照してください。&lt;a href=&quot;#pdf-warn&quot;&gt; &lt;code&gt;warn&lt;/code&gt; &lt;/a&gt;警告の詳細については。</target>
        </trans-unit>
        <trans-unit id="c3360426ce5422bc56d751e0aa6008fce46fc70e" translate="yes" xml:space="preserve">
          <source>See function &lt;a href=&quot;#pdf-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; for the caveats of modifying the table during its traversal.</source>
          <target state="translated">走査中にテーブルを変更する際の注意については、&lt;a href=&quot;#pdf-next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="19f37898f520273219e289bdee9a8581baa73269" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;x&lt;/code&gt; as the &quot;seed&quot; for the pseudo-random generator: equal seeds produce equal sequences of numbers.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; を疑似ランダムジェネレータの「シード」として設定します。等しいシードは等しい数のシーケンスを生成します。</target>
        </trans-unit>
        <trans-unit id="0d4c31b081bb4e342a5c7b04bb15e6651ad21d58" translate="yes" xml:space="preserve">
          <source>Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow. A limit too small restricts recursive calls pointlessly; a limit too large exposes the interpreter to stack-overflow crashes. Unfortunately, there is no way to know a priori the maximum safe limit for a platform.</source>
          <target state="translated">Cスタックの新しい制限値を設定します。この制限は、スタックオーバーフローを避けるために、Luaでのネストされた呼び出しの深さを制御します。制限値が小さすぎると再帰的な呼び出しが無意味に制限され、大きすぎるとインタプリタがスタックオーバーフローのクラッシュにさらされます。残念ながら、プラットフォームの安全な最大制限値を事前に知る方法はありません。</target>
        </trans-unit>
        <trans-unit id="7966d7ba898208a4bfff8332d8d2ce5eab98e952" translate="yes" xml:space="preserve">
          <source>Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow. Returns the old limit in case of success, or zero in case of error. For more details about this function, see &lt;a href=&quot;#pdf-debug.setcstacklimit&quot;&gt;&lt;code&gt;debug.setcstacklimit&lt;/code&gt;&lt;/a&gt;, its equivalent in the standard library.</source>
          <target state="translated">Cスタックに新しい制限を設定します。この制限は、スタックオーバーフローを回避する目的で、Luaでネストされた呼び出しがどの程度深くなるかを制御します。成功した場合は古い制限を返し、エラーの場合はゼロを返します。この関数の詳細については、標準ライブラリにある同等の&lt;a href=&quot;#pdf-debug.setcstacklimit&quot;&gt; &lt;code&gt;debug.setcstacklimit&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ffaec0474c3c12ab33648528a0c531a28325cf4" translate="yes" xml:space="preserve">
          <source>Sets a new panic function and returns the old one (see &lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;).</source>
          <target state="translated">新しいパニック関数を設定し、古い関数を返します（&lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="0b2903d5c5e2f6aac5cee42b812f29848f11b229" translate="yes" xml:space="preserve">
          <source>Sets a new panic function and returns the old one (see &lt;a href=&quot;#4.6&quot;&gt;&amp;sect;4.6&lt;/a&gt;).</source>
          <target state="translated">新しいパニック関数を設定し、古いパニック関数を返します（&lt;a href=&quot;#4.6&quot;&gt;&amp;sect;4.6を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="10482f8b5b12a1f1db635550932f8faad32fd81b" translate="yes" xml:space="preserve">
          <source>Sets and gets the file position, measured from the beginning of the file, to the position given by &lt;code&gt;offset&lt;/code&gt; plus a base specified by the string &lt;code&gt;whence&lt;/code&gt;, as follows:</source>
          <target state="translated">次のように、ファイルの先頭から測定されたファイルの位置を、 &lt;code&gt;offset&lt;/code&gt; と文字列 &lt;code&gt;whence&lt;/code&gt; で指定されたベースで指定された位置に設定および取得します。</target>
        </trans-unit>
        <trans-unit id="c75eca40914b6c7ff395b6a435b1b2509e75386b" translate="yes" xml:space="preserve">
          <source>Sets the C function &lt;code&gt;f&lt;/code&gt; as the new value of global &lt;code&gt;name&lt;/code&gt;. It is defined as a macro:</source>
          <target state="translated">C関数 &lt;code&gt;f&lt;/code&gt; をグローバル &lt;code&gt;name&lt;/code&gt; 新しい値として設定します。これはマクロとして定義されています。</target>
        </trans-unit>
        <trans-unit id="081317fb6ecee7ae4baa46c02f924ee275f76a03" translate="yes" xml:space="preserve">
          <source>Sets the buffering mode for a file. There are three available modes:</source>
          <target state="translated">ファイルのバッファリングモードを設定します。利用可能なモードは3つあります。</target>
        </trans-unit>
        <trans-unit id="de2f1f4dd9362493d0d4861f3dfe60cc83af4578" translate="yes" xml:space="preserve">
          <source>Sets the buffering mode for an output file. There are three available modes:</source>
          <target state="translated">出力ファイルのバッファリングモードを設定します。利用可能なモードは3つあります。</target>
        </trans-unit>
        <trans-unit id="47362e1529f7af535b225ac5e5e41ff2aab64e46" translate="yes" xml:space="preserve">
          <source>Sets the current locale of the program. &lt;code&gt;locale&lt;/code&gt; is a system-dependent string specifying a locale; &lt;code&gt;category&lt;/code&gt; is an optional string describing which category to change: &lt;code&gt;&quot;all&quot;&lt;/code&gt;, &lt;code&gt;&quot;collate&quot;&lt;/code&gt;, &lt;code&gt;&quot;ctype&quot;&lt;/code&gt;, &lt;code&gt;&quot;monetary&quot;&lt;/code&gt;, &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, or &lt;code&gt;&quot;time&quot;&lt;/code&gt;; the default category is &lt;code&gt;&quot;all&quot;&lt;/code&gt;. The function returns the name of the new locale, or &lt;b&gt;fail&lt;/b&gt; if the request cannot be honored.</source>
          <target state="translated">プログラムの現在のロケールを設定します。 &lt;code&gt;locale&lt;/code&gt; は、ロケールを指定するシステム依存の文字列です。 &lt;code&gt;category&lt;/code&gt; は、変更するカテゴリを説明するオプションの文字列です： &lt;code&gt;&quot;all&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;collate&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ctype&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;monetary&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;time&quot;&lt;/code&gt; ;デフォルトのカテゴリは &lt;code&gt;&quot;all&quot;&lt;/code&gt; です。この関数は、新しいロケールの名前を返すか、要求を受け入れることができない場合は&lt;b&gt;失敗し&lt;/b&gt;ます。</target>
        </trans-unit>
        <trans-unit id="772769933fe32ebc8452718b212f21e2ae3b3d0a" translate="yes" xml:space="preserve">
          <source>Sets the current locale of the program. &lt;code&gt;locale&lt;/code&gt; is a system-dependent string specifying a locale; &lt;code&gt;category&lt;/code&gt; is an optional string describing which category to change: &lt;code&gt;&quot;all&quot;&lt;/code&gt;, &lt;code&gt;&quot;collate&quot;&lt;/code&gt;, &lt;code&gt;&quot;ctype&quot;&lt;/code&gt;, &lt;code&gt;&quot;monetary&quot;&lt;/code&gt;, &lt;code&gt;&quot;numeric&quot;&lt;/code&gt;, or &lt;code&gt;&quot;time&quot;&lt;/code&gt;; the default category is &lt;code&gt;&quot;all&quot;&lt;/code&gt;. The function returns the name of the new locale, or &lt;b&gt;nil&lt;/b&gt; if the request cannot be honored.</source>
          <target state="translated">プログラムの現在のロケールを設定します。 &lt;code&gt;locale&lt;/code&gt; は、ロケールを指定するシステム依存の文字列です。 &lt;code&gt;category&lt;/code&gt; は、変更するカテゴリを説明するオプションの文字列です： &lt;code&gt;&quot;all&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;collate&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;ctype&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;monetary&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;numeric&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;time&quot;&lt;/code&gt; 。デフォルトのカテゴリは &lt;code&gt;&quot;all&quot;&lt;/code&gt; です。この関数は、新しいロケールの名前を返します。要求を&lt;b&gt;受け入れる&lt;/b&gt;ことができない場合は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="577d8bdc520c0556720156fb048d7cc9591b0b65" translate="yes" xml:space="preserve">
          <source>Sets the debugging hook function.</source>
          <target state="translated">デバッグフック機能を設定します。</target>
        </trans-unit>
        <trans-unit id="0e50f7de74529ef0127c0979e57072500795bcf0" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;value&lt;/code&gt; as the &lt;code&gt;n&lt;/code&gt;-th user value associated to the given &lt;code&gt;udata&lt;/code&gt;. &lt;code&gt;udata&lt;/code&gt; must be a full userdata.</source>
          <target state="translated">指定された &lt;code&gt;udata&lt;/code&gt; に関連付けられた &lt;code&gt;n&lt;/code&gt; 番目のユーザー &lt;code&gt;value&lt;/code&gt; として指定された値を設定します。 &lt;code&gt;udata&lt;/code&gt; は完全なuserdataである必要があります。</target>
        </trans-unit>
        <trans-unit id="292ec4e82927af4194013aa2f75932b01e97689c" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;value&lt;/code&gt; as the Lua value associated to the given &lt;code&gt;udata&lt;/code&gt;. &lt;code&gt;udata&lt;/code&gt; must be a full userdata.</source>
          <target state="translated">指定された値を、指定された &lt;code&gt;udata&lt;/code&gt; に関連付けられたLua &lt;code&gt;value&lt;/code&gt; として設定します。 &lt;code&gt;udata&lt;/code&gt; は完全なユーザーデータである必要があります。</target>
        </trans-unit>
        <trans-unit id="0f680b53b706554348285320cb60fd7dd4bf3ce4" translate="yes" xml:space="preserve">
          <source>Sets the given function as a hook. The string &lt;code&gt;mask&lt;/code&gt; and the number &lt;code&gt;count&lt;/code&gt; describe when the hook will be called. The string mask may have any combination of the following characters, with the given meaning:</source>
          <target state="translated">指定された関数をフックとして設定します。文字列 &lt;code&gt;mask&lt;/code&gt; と数 &lt;code&gt;count&lt;/code&gt; は、フックがいつ呼び出されるかを示します。文字列マスクには、次の文字の任意の組み合わせを指定の意味で含めることができます。</target>
        </trans-unit>
        <trans-unit id="cfa457abdfe638a1c05389781b6cb767699e3f5e" translate="yes" xml:space="preserve">
          <source>Sets the given function as the debug hook. The string &lt;code&gt;mask&lt;/code&gt; and the number &lt;code&gt;count&lt;/code&gt; describe when the hook will be called. The string mask may have any combination of the following characters, with the given meaning:</source>
          <target state="translated">指定された関数をデバッグフックとして設定します。文字列 &lt;code&gt;mask&lt;/code&gt; と数 &lt;code&gt;count&lt;/code&gt; は、フックがいつ呼び出されるかを示します。文字列マスクには、次の文字を任意に組み合わせて使用​​できます。意味は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d7b8a030605b64f54e56dc4eb6882692a1e86465" translate="yes" xml:space="preserve">
          <source>Sets the metatable for the given &lt;code&gt;value&lt;/code&gt; to the given &lt;code&gt;table&lt;/code&gt; (which can be &lt;b&gt;nil&lt;/b&gt;). Returns &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;value&lt;/code&gt; メタ &lt;code&gt;table&lt;/code&gt; 指定されたテーブル（&lt;b&gt;nilに&lt;/b&gt;することもできます）に設定します。値を返し &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc55fa8aad2a6ef152d3844b1dbc7d9854df5817" translate="yes" xml:space="preserve">
          <source>Sets the metatable for the given table. (To change the metatable of other types from Lua code, you must use the debug library (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;).) If &lt;code&gt;metatable&lt;/code&gt; is &lt;b&gt;nil&lt;/b&gt;, removes the metatable of the given table. If the original metatable has a &lt;code&gt;__metatable&lt;/code&gt; field, raises an error.</source>
          <target state="translated">指定されたテーブルのメタテーブルを設定します。（Luaコードから他のタイプのメタテーブルを変更するには、デバッグライブラリ（&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;）を使用する必要があります。） &lt;code&gt;metatable&lt;/code&gt; が&lt;b&gt;nilの&lt;/b&gt;場合、指定されたテーブルのメタテーブルを削除します。元のメタテーブルに &lt;code&gt;__metatable&lt;/code&gt; フィールドがある場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a0ebfc6ec4adb4b51d14e3fb506f43ec69d2311e" translate="yes" xml:space="preserve">
          <source>Sets the metatable for the given table. If &lt;code&gt;metatable&lt;/code&gt; is &lt;b&gt;nil&lt;/b&gt;, removes the metatable of the given table. If the original metatable has a &lt;code&gt;__metatable&lt;/code&gt; field, raises an error.</source>
          <target state="translated">指定されたテーブルのメタテーブルを設定します。 &lt;code&gt;metatable&lt;/code&gt; が&lt;b&gt;nilの&lt;/b&gt;場合、指定されたテーブルのmetatableを削除します。元のメタテーブルに &lt;code&gt;__metatable&lt;/code&gt; フィールドがある場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="587b6bacfd61f3dd529496795bf4b5531bf0411f" translate="yes" xml:space="preserve">
          <source>Sets the metatable of the object at the top of the stack as the metatable associated with name &lt;code&gt;tname&lt;/code&gt; in the registry (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">スタックの最上部にあるオブジェクトの &lt;code&gt;tname&lt;/code&gt; を、レジストリの名前tnameに関連付けられたメタテーブルとして設定します（&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d22790332cf1d45f6a8843c4ad039244e90ff99f" translate="yes" xml:space="preserve">
          <source>Sets the metatable of the object on the top of the stack as the metatable associated with name &lt;code&gt;tname&lt;/code&gt; in the registry (see &lt;a href=&quot;#luaL_newmetatable&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">スタックの最上位にあるオブジェクトの &lt;code&gt;tname&lt;/code&gt; を、レジストリ内の名前tnameに関連付けられたメタテーブルとして設定します（&lt;a href=&quot;#luaL_newmetatable&quot;&gt; &lt;code&gt;luaL_newmetatable&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="980d28e7c69235ce8818955ee39047b99459cc45" translate="yes" xml:space="preserve">
          <source>Sets the real value of &lt;code&gt;table[index]&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;, without invoking the &lt;code&gt;__newindex&lt;/code&gt; metamethod. &lt;code&gt;table&lt;/code&gt; must be a table, &lt;code&gt;index&lt;/code&gt; any value different from &lt;b&gt;nil&lt;/b&gt; and NaN, and &lt;code&gt;value&lt;/code&gt; any Lua value.</source>
          <target state="translated">&lt;code&gt;__newindex&lt;/code&gt; メタメソッドを呼び出さずに、 &lt;code&gt;table[index]&lt;/code&gt; の実際の値をvalueに設定し &lt;code&gt;value&lt;/code&gt; 。 &lt;code&gt;table&lt;/code&gt; はテーブルであり、&lt;b&gt;nil&lt;/b&gt;やNaNとは異なる任意の値に &lt;code&gt;index&lt;/code&gt; 、任意のLua値を &lt;code&gt;value&lt;/code&gt; 必要があります。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="83fb6edb67ceac4c3bec94b60202ea6ff8ecd172" translate="yes" xml:space="preserve">
          <source>Sets the real value of &lt;code&gt;table[index]&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;, without using the &lt;code&gt;__newindex&lt;/code&gt; metavalue. &lt;code&gt;table&lt;/code&gt; must be a table, &lt;code&gt;index&lt;/code&gt; any value different from &lt;b&gt;nil&lt;/b&gt; and NaN, and &lt;code&gt;value&lt;/code&gt; any Lua value.</source>
          <target state="translated">Sets the real value of &lt;code&gt;table[index]&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; , without using the &lt;code&gt;__newindex&lt;/code&gt; metavalue. &lt;code&gt;table&lt;/code&gt; must be a table, &lt;code&gt;index&lt;/code&gt; any value different from &lt;b&gt;nil&lt;/b&gt; and NaN, and &lt;code&gt;value&lt;/code&gt; any Lua value.</target>
        </trans-unit>
        <trans-unit id="64764244caf680f963cbe34576ef7f19047e51d8" translate="yes" xml:space="preserve">
          <source>Sets the value of a closure's upvalue. It assigns the value at the top of the stack to the upvalue and returns its name. It also pops the value from the stack.</source>
          <target state="translated">クロージャの upvalue の値を設定します。スタックの先頭にある値を upvalue に代入し、その名前を返します。また、スタックから値をポップします。</target>
        </trans-unit>
        <trans-unit id="a4f7f3cdc50e6225c7b313befabe93f7ca2bf356" translate="yes" xml:space="preserve">
          <source>Sets the value of a closure's upvalue. It assigns the value on the top of the stack to the upvalue and returns its name. It also pops the value from the stack.</source>
          <target state="translated">クロージャの upvalue の値を設定します。スタックの先頭にある値を upvalue に代入し、その名前を返します。また、スタックから値をポップします。</target>
        </trans-unit>
        <trans-unit id="ffba6d217c9340ff452d0b26d7bde601a75effed" translate="yes" xml:space="preserve">
          <source>Sets the value of a local variable of a given activation record. It assigns the value at the top of the stack to the variable and returns its name. It also pops the value from the stack.</source>
          <target state="translated">与えられた活性化レコードのローカル変数の値を設定します。スタックの先頭にある値を変数に代入し、その名前を返します。また、スタックから値をポップします。</target>
        </trans-unit>
        <trans-unit id="7f22679a70311edfc5f50384a42d2ab7fff23fa6" translate="yes" xml:space="preserve">
          <source>Sets the value of a local variable of a given activation record. It assigns the value on the top of the stack to the variable and returns its name. It also pops the value from the stack.</source>
          <target state="translated">与えられた活性化レコードのローカル変数の値を設定します。スタックの先頭にある値を変数に代入し、その名前を返します。また、スタックから値をポップします。</target>
        </trans-unit>
        <trans-unit id="b03940c1d1ac3a2bf1547c98b0cbe03f39d14377" translate="yes" xml:space="preserve">
          <source>Sets the warning function to be used by Lua to emit warnings (see &lt;a href=&quot;#lua_WarnFunction&quot;&gt;&lt;code&gt;lua_WarnFunction&lt;/code&gt;&lt;/a&gt;). The &lt;code&gt;ud&lt;/code&gt; parameter sets the value &lt;code&gt;ud&lt;/code&gt; passed to the warning function.</source>
          <target state="translated">Sets the warning function to be used by Lua to emit warnings (see &lt;a href=&quot;#lua_WarnFunction&quot;&gt; &lt;code&gt;lua_WarnFunction&lt;/code&gt; &lt;/a&gt;). The &lt;code&gt;ud&lt;/code&gt; parameter sets the value &lt;code&gt;ud&lt;/code&gt; passed to the warning function.</target>
        </trans-unit>
        <trans-unit id="e346a8f5ef11e0659f9d13d2fd20c5971760ec54" translate="yes" xml:space="preserve">
          <source>Several functions in the API return pointers (&lt;code&gt;const char*&lt;/code&gt;) to Lua strings in the stack. (See &lt;a href=&quot;#lua_pushfstring&quot;&gt;&lt;code&gt;lua_pushfstring&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_pushlstring&quot;&gt;&lt;code&gt;lua_pushlstring&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_pushstring&quot;&gt;&lt;code&gt;lua_pushstring&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt;. See also &lt;a href=&quot;#luaL_checklstring&quot;&gt;&lt;code&gt;luaL_checklstring&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#luaL_checkstring&quot;&gt;&lt;code&gt;luaL_checkstring&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#luaL_tolstring&quot;&gt;&lt;code&gt;luaL_tolstring&lt;/code&gt;&lt;/a&gt; in the auxiliary library.)</source>
          <target state="translated">Several functions in the API return pointers ( &lt;code&gt;const char*&lt;/code&gt; ) to Lua strings in the stack. (See &lt;a href=&quot;#lua_pushfstring&quot;&gt; &lt;code&gt;lua_pushfstring&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#lua_pushlstring&quot;&gt; &lt;code&gt;lua_pushlstring&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#lua_pushstring&quot;&gt; &lt;code&gt;lua_pushstring&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;. See also &lt;a href=&quot;#luaL_checklstring&quot;&gt; &lt;code&gt;luaL_checklstring&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#luaL_checkstring&quot;&gt; &lt;code&gt;luaL_checkstring&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#luaL_tolstring&quot;&gt; &lt;code&gt;luaL_tolstring&lt;/code&gt; &lt;/a&gt; in the auxiliary library.)</target>
        </trans-unit>
        <trans-unit id="13dfadc7fc1e60158ee478b1d01c15a1a262b8f8" translate="yes" xml:space="preserve">
          <source>Several functions in the auxiliary library are used to check C function arguments. Because the error message is formatted for arguments (e.g., &quot;&lt;code&gt;bad argument #1&lt;/code&gt;&quot;), you should not use these functions for other stack values.</source>
          <target state="translated">補助ライブラリのいくつかの関数は、C関数の引数をチェックするために使用されます。エラーメッセージは引数（たとえば、「 &lt;code&gt;bad argument #1&lt;/code&gt; 」）に対してフォーマットされているため、これらの関数を他のスタック値に使用しないでください。</target>
        </trans-unit>
        <trans-unit id="d7d26a3bd3ccc1bc11907697040007c09639a73d" translate="yes" xml:space="preserve">
          <source>Several functions in the auxiliary library use internally some extra stack slots. When a function in the auxiliary library uses less than five slots, it does not check the stack size; it simply assumes that there are enough slots.</source>
          <target state="translated">補助ライブラリ内のいくつかの関数は、内部的に余分なスタック・スロットを使用しています。補助ライブラリの関数が5つ以下のスロットを使用している場合、スタックサイズはチェックされず、単に十分なスロットがあると仮定します。</target>
        </trans-unit>
        <trans-unit id="1a5b014735ed16f1ba36e3785a0f441d0242e3d9" translate="yes" xml:space="preserve">
          <source>Several functions that report errors in the API use the following status codes to indicate different kinds of errors or other conditions:</source>
          <target state="translated">APIでエラーを報告するいくつかの関数では、以下のステータスコードを使用して、さまざまな種類のエラーやその他の状態を示しています。</target>
        </trans-unit>
        <trans-unit id="08d00af90d2bbbb33d085cc5ef987064ed22d642" translate="yes" xml:space="preserve">
          <source>Several operations in Lua can &lt;em&gt;raise&lt;/em&gt; an error. An error interrupts the normal flow of the program, which can continue by &lt;em&gt;catching&lt;/em&gt; the error.</source>
          <target state="translated">Several operations in Lua can &lt;em&gt;raise&lt;/em&gt; an error. An error interrupts the normal flow of the program, which can continue by &lt;em&gt;catching&lt;/em&gt; the error.</target>
        </trans-unit>
        <trans-unit id="db95dfa9c967586d03ebee139b1fb3b17b47718b" translate="yes" xml:space="preserve">
          <source>Several places in Lua coerce strings to numbers when necessary. In particular, the string library sets metamethods that try to coerce strings to numbers in all arithmetic operations. If the conversion fails, the library calls the metamethod of the other operand (if present) or it raises an error. Note that bitwise operators do not do this coercion.</source>
          <target state="translated">Lua のいくつかの場所では、必要に応じて文字列を数値に強制しています。特に、文字列ライブラリには、すべての算術演算において文字列を数値に変換するためのメタメソッドが設定されています。変換に失敗した場合、ライブラリは他方のオペランドのメタメソッドを呼び出すか(存在する場合)、エラーを発生させます。ビット演算子はこの強制を行わないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4e6f5999f6739678269276a1253783f2e33caacc" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#lua_gettable&quot;&gt;&lt;code&gt;lua_gettable&lt;/code&gt;&lt;/a&gt;, but does a raw access (i.e., without metamethods).</source>
          <target state="translated">&lt;a href=&quot;#lua_gettable&quot;&gt; &lt;code&gt;lua_gettable&lt;/code&gt; &lt;/a&gt;に似ていますが、生のアクセス（つまり、メタメソッドなし）を行います。</target>
        </trans-unit>
        <trans-unit id="98d6dc9d6d25a6a5bcf82cd4cb364da6adb19bc6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#lua_settable&quot;&gt;&lt;code&gt;lua_settable&lt;/code&gt;&lt;/a&gt;, but does a raw assignment (i.e., without metamethods).</source>
          <target state="translated">&lt;a href=&quot;#lua_settable&quot;&gt; &lt;code&gt;lua_settable&lt;/code&gt; &lt;/a&gt;に似ていますが、生の割り当て（つまり、メタメソッドなし）を行います。</target>
        </trans-unit>
        <trans-unit id="bb8fabad1f82bd899f79eae459334cf7e778fcba" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#pdf-io.input&quot;&gt;&lt;code&gt;io.input&lt;/code&gt;&lt;/a&gt;, but operates over the default output file.</source>
          <target state="translated">&lt;a href=&quot;#pdf-io.input&quot;&gt; &lt;code&gt;io.input&lt;/code&gt; &lt;/a&gt;に似ていますが、デフォルトの出力ファイルで動作します。</target>
        </trans-unit>
        <trans-unit id="be9918f302436d602e28315cc5eff3fc1e73bb44" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;, but gets the chunk from file &lt;code&gt;filename&lt;/code&gt; or from the standard input, if no file name is given.</source>
          <target state="translated">&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;に似ていますが、ファイル &lt;code&gt;filename&lt;/code&gt; が指定されていない場合は、ファイルfilenameまたは標準入力からチャンクを取得します。</target>
        </trans-unit>
        <trans-unit id="26f694e9b1074e2724d2aeb68c0547978de3e666" translate="yes" xml:space="preserve">
          <source>Similarly, Lua versions can always change the internal representation of precompiled chunks; precompiled chunks are not compatible between different Lua versions.</source>
          <target state="translated">同様に、Luaのバージョンでは、プリコンパイルされたチャンクの内部表現を常に変更することができます。</target>
        </trans-unit>
        <trans-unit id="fbd85d6dbfcd7a9c4f67b15fec97031a2abeaf4f" translate="yes" xml:space="preserve">
          <source>Some functions in the debug interface also return pointers to strings, namely &lt;a href=&quot;#lua_getlocal&quot;&gt;&lt;code&gt;lua_getlocal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_getupvalue&quot;&gt;&lt;code&gt;lua_getupvalue&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_setlocal&quot;&gt;&lt;code&gt;lua_setlocal&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#lua_setupvalue&quot;&gt;&lt;code&gt;lua_setupvalue&lt;/code&gt;&lt;/a&gt;. For these functions, the pointer is guaranteed to be valid while the caller function is active and the given closure (if one was given) is in the stack.</source>
          <target state="translated">Some functions in the debug interface also return pointers to strings, namely &lt;a href=&quot;#lua_getlocal&quot;&gt; &lt;code&gt;lua_getlocal&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#lua_getupvalue&quot;&gt; &lt;code&gt;lua_getupvalue&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#lua_setlocal&quot;&gt; &lt;code&gt;lua_setlocal&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#lua_setupvalue&quot;&gt; &lt;code&gt;lua_setupvalue&lt;/code&gt; &lt;/a&gt;. For these functions, the pointer is guaranteed to be valid while the caller function is active and the given closure (if one was given) is in the stack.</target>
        </trans-unit>
        <trans-unit id="91f7e308fa2ec755f5b9629aa68bea063366955f" translate="yes" xml:space="preserve">
          <source>Sorts list elements in a given order, &lt;em&gt;in-place&lt;/em&gt;, from &lt;code&gt;list[1]&lt;/code&gt; to &lt;code&gt;list[#list]&lt;/code&gt;. If &lt;code&gt;comp&lt;/code&gt; is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that, after the sort, &lt;code&gt;i &amp;lt; j&lt;/code&gt; implies &lt;code&gt;not comp(list[j],list[i])&lt;/code&gt;). If &lt;code&gt;comp&lt;/code&gt; is not given, then the standard Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt; is used instead.</source>
          <target state="translated">&lt;code&gt;list[1]&lt;/code&gt; から &lt;code&gt;list[#list]&lt;/code&gt; まで、指定された順序の&lt;em&gt;インプレース&lt;/em&gt;でリスト要素を並べ替えます。場合 &lt;code&gt;comp&lt;/code&gt; 与えられる最初の要素は、そのように、ソート後に、（最終的なために、第2の前に来なければならない場合、それは2つのリストの要素と戻り真受信関数でなければならない &lt;code&gt;i &amp;lt; j&lt;/code&gt; 意味 &lt;code&gt;not comp(list[j],list[i])&lt;/code&gt; ）。 &lt;code&gt;comp&lt;/code&gt; が指定されていない場合は、代わりに標準のLua演算子 &lt;code&gt;&amp;lt;&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="c0517f4c6665e2b52991a1cccc3781c492c0e6b1" translate="yes" xml:space="preserve">
          <source>Sorts the list elements in a given order, &lt;em&gt;in-place&lt;/em&gt;, from &lt;code&gt;list[1]&lt;/code&gt; to &lt;code&gt;list[#list]&lt;/code&gt;. If &lt;code&gt;comp&lt;/code&gt; is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that, after the sort, &lt;code&gt;i &amp;lt; j&lt;/code&gt; implies &lt;code&gt;not comp(list[j],list[i])&lt;/code&gt;). If &lt;code&gt;comp&lt;/code&gt; is not given, then the standard Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt; is used instead.</source>
          <target state="translated">Sorts the list elements in a given order, &lt;em&gt;in-place&lt;/em&gt;, from &lt;code&gt;list[1]&lt;/code&gt; to &lt;code&gt;list[#list]&lt;/code&gt; . If &lt;code&gt;comp&lt;/code&gt; is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that, after the sort, &lt;code&gt;i &amp;lt; j&lt;/code&gt; implies &lt;code&gt;not comp(list[j],list[i])&lt;/code&gt; ). If &lt;code&gt;comp&lt;/code&gt; is not given, then the standard Lua operator &lt;code&gt;&amp;lt;&lt;/code&gt; is used instead.</target>
        </trans-unit>
        <trans-unit id="a010f7f7cdbd4258d79a8a94cbe56bc77bf2b5e7" translate="yes" xml:space="preserve">
          <source>Square brackets are used to index a table:</source>
          <target state="translated">角括弧は、テーブルのインデックスを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="15f3db96858a0b179ed1ef035b7c3729debc1d46" translate="yes" xml:space="preserve">
          <source>Stack Size</source>
          <target state="translated">スタックサイズ</target>
        </trans-unit>
        <trans-unit id="a8857dbe9de4909ed5c2183cf91102dab19f054b" translate="yes" xml:space="preserve">
          <source>Standard Libraries</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="3aa420e36a031586ffcaad7595673c265cb89fc8" translate="yes" xml:space="preserve">
          <source>Starts and resumes a coroutine in the given thread &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">指定されたスレッド &lt;code&gt;L&lt;/code&gt; でコルーチンを開始および再開します。</target>
        </trans-unit>
        <trans-unit id="d40756a05671d2e92d48621babd1cb1ebcde9165" translate="yes" xml:space="preserve">
          <source>Starts or continues the execution of coroutine &lt;code&gt;co&lt;/code&gt;. The first time you resume a coroutine, it starts running its body. The values &lt;code&gt;val1&lt;/code&gt;, ... are passed as the arguments to the body function. If the coroutine has yielded, &lt;code&gt;resume&lt;/code&gt; restarts it; the values &lt;code&gt;val1&lt;/code&gt;, ... are passed as the results from the yield.</source>
          <target state="translated">コルーチン &lt;code&gt;co&lt;/code&gt; の実行を開始または続行します。コルーチンを初めて再開すると、コルーチンの実行が開始されます。値 &lt;code&gt;val1&lt;/code&gt; 、...が引数としてbody関数に渡されます。コルーチンが生成された場合、 &lt;code&gt;resume&lt;/code&gt; はそれを再開します。値 &lt;code&gt;val1&lt;/code&gt; 、...は、yieldの結果として渡されます。</target>
        </trans-unit>
        <trans-unit id="fdcf228dfc0fc5649ba85944b97fefcca7ffe43a" translate="yes" xml:space="preserve">
          <source>Starts program &lt;code&gt;prog&lt;/code&gt; in a separated process and returns a file handle that you can use to read data from this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;r&quot;&lt;/code&gt;, the default) or to write data to this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;w&quot;&lt;/code&gt;).</source>
          <target state="translated">別のプロセスでプログラム &lt;code&gt;prog&lt;/code&gt; を開始し、このプログラムからデータを読み取る（ &lt;code&gt;mode&lt;/code&gt; が &lt;code&gt;&quot;r&quot;&lt;/code&gt; の場合はデフォルト）、またはこのプログラムにデータを書き込む（ &lt;code&gt;mode&lt;/code&gt; が &lt;code&gt;&quot;w&quot;&lt;/code&gt; の場合）ために使用できるファイルハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="fe31e15bdd22d691294377c44baf7ad2201f9aed" translate="yes" xml:space="preserve">
          <source>Starts the program &lt;code&gt;prog&lt;/code&gt; in a separated process and returns a file handle that you can use to read data from this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;r&quot;&lt;/code&gt;, the default) or to write data to this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;w&quot;&lt;/code&gt;).</source>
          <target state="translated">Starts the program &lt;code&gt;prog&lt;/code&gt; in a separated process and returns a file handle that you can use to read data from this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;r&quot;&lt;/code&gt; , the default) or to write data to this program (if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;&quot;w&quot;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="translated">Statements</target>
        </trans-unit>
        <trans-unit id="7f5583f5096a76c834c0bcc4f4885ffca8fe34cd" translate="yes" xml:space="preserve">
          <source>Status Codes</source>
          <target state="translated">ステータスコード</target>
        </trans-unit>
        <trans-unit id="4a3601848fbaa157ee7ad1bf17ef71628017fcdf" translate="yes" xml:space="preserve">
          <source>Suppose the running thread yields while executing the callee function. After the thread resumes, it eventually will finish running the callee function. However, the callee function cannot return to the original function, because its frame in the C stack was destroyed by the yield. Instead, Lua calls a &lt;em&gt;continuation function&lt;/em&gt;, which was given as an argument to the callee function. As the name implies, the continuation function should continue the task of the original function.</source>
          <target state="translated">呼び出し先関数の実行中に、実行中のスレッドが制御を譲るとします。スレッドが再開すると、最終的には呼び出し先関数の実行が終了します。ただし、Cスタックのフレームがyieldによって破棄されたため、呼び出し先の関数は元の関数に戻ることができません。代わりに、Luaは、呼び出し先関数への引数として与えられた&lt;em&gt;継続関数を&lt;/em&gt;呼び出します。名前が示すように、継続関数は元の関数のタスクを継続する必要があります。</target>
        </trans-unit>
        <trans-unit id="e83b7d557c46acb05b744857e11a6cfdb7f1df00" translate="yes" xml:space="preserve">
          <source>Suspends the execution of the calling coroutine. Any arguments to &lt;code&gt;yield&lt;/code&gt; are passed as extra results to &lt;code&gt;resume&lt;/code&gt;.</source>
          <target state="translated">呼び出し元のコルーチンの実行を一時停止します。 &lt;code&gt;yield&lt;/code&gt; の引数は、 &lt;code&gt;resume&lt;/code&gt; 追加の結果として渡されます。</target>
        </trans-unit>
        <trans-unit id="cf68697aa23858afae69b1650bbb5ac00b4caade" translate="yes" xml:space="preserve">
          <source>Table Constructors</source>
          <target state="translated">テーブルの構成要素</target>
        </trans-unit>
        <trans-unit id="ddade22015227084f0c0a4b0fb958ac23eef35ed" translate="yes" xml:space="preserve">
          <source>Table constructors are expressions that create tables. Every time a constructor is evaluated, a new table is created. A constructor can be used to create an empty table or to create a table and initialize some of its fields. The general syntax for constructors is</source>
          <target state="translated">テーブル コンストラクタは、テーブルを作成する式です。コンストラクタが評価されるたびに新しいテーブルが作成されます。コンストラクタは、空のテーブルを作成したり、テーブルを作成してフィールドの一部を初期化したりするために使用できます。コンストラクタの一般的な構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8eb8356b5217b3ad22882eb75be685d15131abcf" translate="yes" xml:space="preserve">
          <source>Tables and full userdata have individual metatables (although multiple tables and userdata can share their metatables). Values of all other types share one single metatable per type; that is, there is one single metatable for all numbers, one for all strings, etc. By default, a value has no metatable, but the string library sets a metatable for the string type (see &lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4&lt;/a&gt;).</source>
          <target state="translated">テーブルと完全なユーザーデータには個別のメタテーブルがあります（ただし、複数のテーブルとユーザーデータはメタテーブルを共有できます）。他のすべてのタイプの値は、タイプごとに1つのメタテーブルを共有します。つまり、すべての数値、すべての文字列などに1つのメタテーブルがあります。デフォルトでは、値にメタテーブルはありませんが、文字列ライブラリは文字列型のメタテーブルを設定します（&lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a43eec2139292b4bea0916e6b1d5992b76b7800a" translate="yes" xml:space="preserve">
          <source>Tables and full userdata have individual metatables, although multiple tables and userdata can share their metatables. Values of all other types share one single metatable per type; that is, there is one single metatable for all numbers, one for all strings, etc. By default, a value has no metatable, but the string library sets a metatable for the string type (see &lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4&lt;/a&gt;).</source>
          <target state="translated">Tables and full userdata have individual metatables, although multiple tables and userdata can share their metatables. Values of all other types share one single metatable per type; that is, there is one single metatable for all numbers, one for all strings, etc. By default, a value has no metatable, but the string library sets a metatable for the string type (see &lt;a href=&quot;#6.4&quot;&gt;&amp;sect;6.4&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="790df16e07d28fbd0bc25fd6c6058d692af71b40" translate="yes" xml:space="preserve">
          <source>Tables are the sole data-structuring mechanism in Lua; they can be used to represent ordinary arrays, lists, symbol tables, sets, records, graphs, trees, etc. To represent records, Lua uses the field name as an index. The language supports this representation by providing &lt;code&gt;a.name&lt;/code&gt; as syntactic sugar for &lt;code&gt;a[&quot;name&quot;]&lt;/code&gt;. There are several convenient ways to create tables in Lua (see &lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9&lt;/a&gt;).</source>
          <target state="translated">テーブルはLuaの唯一のデータ構造化メカニズムです。それらは、通常の配列、リスト、シンボルテーブル、セット、レコード、グラフ、ツリーなどを表すために使用できます。Luaは、レコードを表すために、フィールド名をインデックスとして使用します。言語は、 &lt;code&gt;a[&quot;name&quot;]&lt;/code&gt; 構文糖として &lt;code&gt;a.name&lt;/code&gt; を提供することにより、この表現をサポートします。Luaでテーブルを作成するにはいくつかの便利な方法があります（&lt;a href=&quot;#3.4.9&quot;&gt;&amp;sect;3.4.9を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e421a06df75071a6abebc4fb3581855738824adb" translate="yes" xml:space="preserve">
          <source>Tables, functions, threads, and (full) userdata values are &lt;em&gt;objects&lt;/em&gt;: variables do not actually &lt;em&gt;contain&lt;/em&gt; these values, only &lt;em&gt;references&lt;/em&gt; to them. Assignment, parameter passing, and function returns always manipulate references to such values; these operations do not imply any kind of copy.</source>
          <target state="translated">テーブル、関数、スレッド、および（完全）ユーザーデータ値は&lt;em&gt;オブジェクトです&lt;/em&gt;。変数には実際に&lt;em&gt;は&lt;/em&gt;これらの値は&lt;em&gt;含まれ&lt;/em&gt;ず&lt;em&gt;、&lt;/em&gt;それらへの&lt;em&gt;参照&lt;/em&gt;のみが&lt;em&gt;含ま&lt;/em&gt;れます。割り当て、パラメーターの受け渡し、および関数の戻りは、常にそのような値への参照を操作します。これらの操作は、いかなる種類のコピーも意味しません。</target>
        </trans-unit>
        <trans-unit id="669e76ec887de715ba103acde30a3797fae1f331" translate="yes" xml:space="preserve">
          <source>Tables, userdata, and threads are compared by reference: two objects are considered equal only if they are the same object. Every time you create a new object (a table, a userdata, or a thread), this new object is different from any previously existing object. A function is always equal to itself. Functions with any detectable difference (different behavior, different definition) are always different. Functions created at different times but with no detectable differences may be classified as equal or not (depending on internal caching details).</source>
          <target state="translated">テーブル、ユーザデータ、スレッドは参照によって比較されます。新しいオブジェクト(テーブル、ユーザデータ、スレッド)を作成するたびに、この新しいオブジェクトはそれまでに存在していたオブジェクトとは異なります。関数は常にそれ自身と等しいです。検出可能な違い(動作が異なる、定義が異なる)を持つ関数は、常に異なるものです。異なる時刻に作成された関数であっても、検出可能な違いがないものは、等しいか否かを分類することができます(内部のキャッシングの詳細に依存します)。</target>
        </trans-unit>
        <trans-unit id="99385b30015343b5b8e00056e58a762956df3e7d" translate="yes" xml:space="preserve">
          <source>Tables, userdata, and threads are compared by reference: two objects are considered equal only if they are the same object. Every time you create a new object (a table, userdata, or thread), this new object is different from any previously existing object. Closures with the same reference are always equal. Closures with any detectable difference (different behavior, different definition) are always different.</source>
          <target state="translated">テーブル、ユーザデータ、スレッドは参照によって比較されます。新しいオブジェクト(テーブル、userdata、スレッド)を作成するたびに、この新しいオブジェクトはそれまでに存在していたオブジェクトとは異なります。同じ参照を持つクロージャは常に等しくなります。検出可能な違い(動作が異なる、定義が異なる)を持つクロージャは常に異なります。</target>
        </trans-unit>
        <trans-unit id="446beb4016f56d03fb7aeada345cb1a7a86ea482" translate="yes" xml:space="preserve">
          <source>Terminates the last protected function called and returns &lt;code&gt;message&lt;/code&gt; as the error object. Function &lt;code&gt;error&lt;/code&gt; never returns.</source>
          <target state="translated">呼び出された最後の保護された関数を終了し、エラーオブジェクトとして &lt;code&gt;message&lt;/code&gt; を返します。関数 &lt;code&gt;error&lt;/code&gt; は返されません。</target>
        </trans-unit>
        <trans-unit id="aad621a873e57ea830369714dc4bd782c2449476" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; function returns one of the following constants (defined in &lt;code&gt;lua.h&lt;/code&gt;):</source>
          <target state="translated">&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; の&lt;/a&gt;機能は、以下の定数のいずれか（で定義された戻り &lt;code&gt;lua.h&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c9f4dcc9b6adcf3724a0f1527ff15ababb77be1a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt; function returns one of the following status codes: &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_ERRRUN&quot;&gt;&lt;code&gt;LUA_ERRRUN&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_ERRMEM&quot;&gt;&lt;code&gt;LUA_ERRMEM&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#pdf-LUA_ERRERR&quot;&gt;&lt;code&gt;LUA_ERRERR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt; function returns one of the following status codes: &lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_ERRRUN&quot;&gt; &lt;code&gt;LUA_ERRRUN&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_ERRMEM&quot;&gt; &lt;code&gt;LUA_ERRMEM&lt;/code&gt; &lt;/a&gt;, or &lt;a href=&quot;#pdf-LUA_ERRERR&quot;&gt; &lt;code&gt;LUA_ERRERR&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b1d59a96e495b4ed1314e7a452acf7cf2be3dd16" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#pdf-ipairs&quot;&gt;&lt;code&gt;ipairs&lt;/code&gt;&lt;/a&gt; iterator now respects metamethods and its &lt;code&gt;__ipairs&lt;/code&gt; metamethod has been deprecated.</source>
          <target state="translated">&lt;a href=&quot;#pdf-ipairs&quot;&gt; &lt;code&gt;ipairs&lt;/code&gt; &lt;/a&gt;イテレータ今の点メタメソッドとその &lt;code&gt;__ipairs&lt;/code&gt; 廃止されましたメタメソッド。</target>
        </trans-unit>
        <trans-unit id="bc47dc2ae4b1f24c3a3899f4b1f9405cda8bd057" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;break&lt;/b&gt; statement terminates the execution of a &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;repeat&lt;/b&gt;, or &lt;b&gt;for&lt;/b&gt; loop, skipping to the next statement after the loop:</source>
          <target state="translated">&lt;b&gt;ブレーク&lt;/b&gt;文は実行の終了&lt;b&gt;中&lt;/b&gt;、&lt;b&gt;繰り返し&lt;/b&gt;、または&lt;b&gt;のための&lt;/b&gt;ループの後に次の文にスキップし、ループを：</target>
        </trans-unit>
        <trans-unit id="be57b4db5d11ecd50b150a3c2c7baa57bca94b87" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;for&lt;/b&gt; statement has two forms: one numerical and one generic.</source>
          <target state="translated">&lt;b&gt;以下のための&lt;/b&gt; 1つの数値と1つの汎用：文は、2つの形式があります。</target>
        </trans-unit>
        <trans-unit id="b061702cc21366ebd955da1cbb0818c2844543b8" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;goto&lt;/b&gt; statement transfers the program control to a label. For syntactical reasons, labels in Lua are considered statements too:</source>
          <target state="translated">&lt;b&gt;後藤の&lt;/b&gt;文はラベルにプログラム制御を移します。構文上の理由から、Luaのラベルもステートメントと見なされます。</target>
        </trans-unit>
        <trans-unit id="eeaa513ac2a2fd15596d8309fe530d856f6a61e0" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;return&lt;/b&gt; statement can only be written as the last statement of a block. If it is necessary to &lt;b&gt;return&lt;/b&gt; in the middle of a block, then an explicit inner block can be used, as in the idiom &lt;code&gt;do return end&lt;/code&gt;, because now &lt;b&gt;return&lt;/b&gt; is the last statement in its (inner) block.</source>
          <target state="translated">The &lt;b&gt;return&lt;/b&gt; statement can only be written as the last statement of a block. If it is necessary to &lt;b&gt;return&lt;/b&gt; in the middle of a block, then an explicit inner block can be used, as in the idiom &lt;code&gt;do return end&lt;/code&gt; , because now &lt;b&gt;return&lt;/b&gt; is the last statement in its (inner) block.</target>
        </trans-unit>
        <trans-unit id="b8c9f54acbc996a7d79b7252d182ed631a6a317f" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;return&lt;/b&gt; statement can only be written as the last statement of a block. If it is really necessary to &lt;b&gt;return&lt;/b&gt; in the middle of a block, then an explicit inner block can be used, as in the idiom &lt;code&gt;do return end&lt;/code&gt;, because now &lt;b&gt;return&lt;/b&gt; is the last statement in its (inner) block.</source>
          <target state="translated">&lt;b&gt;リターン&lt;/b&gt;ステートメントは、ブロックの最後の文として書くことができます。ブロックの途中で&lt;b&gt;戻る&lt;/b&gt;必要がある場合は、イディオム &lt;code&gt;do return end&lt;/code&gt; のように、明示的な内部ブロックを使用できます。これは、&lt;b&gt;return&lt;/b&gt;が（内部）ブロックの最後のステートメントであるためです。</target>
        </trans-unit>
        <trans-unit id="c44e88f5118a01354e009d7fa35997d3c87c7c1a" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;return&lt;/b&gt; statement is used to return values from a function or a chunk (which is an anonymous function). Functions can return more than one value, so the syntax for the &lt;b&gt;return&lt;/b&gt; statement is</source>
          <target state="translated">&lt;b&gt;リターン&lt;/b&gt;文は関数または（匿名関数である）チャンクから値を返すために使用されます。関数は複数の値を返すことができるため、&lt;b&gt;return&lt;/b&gt;ステートメントの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="50d916d7e4fcf57b5d8ca62cda2c1b54e390dceb" translate="yes" xml:space="preserve">
          <source>The &lt;b&gt;return&lt;/b&gt; statement is used to return values from a function or a chunk (which is handled as an anonymous function). Functions can return more than one value, so the syntax for the &lt;b&gt;return&lt;/b&gt; statement is</source>
          <target state="translated">The &lt;b&gt;return&lt;/b&gt; statement is used to return values from a function or a chunk (which is handled as an anonymous function). Functions can return more than one value, so the syntax for the &lt;b&gt;return&lt;/b&gt; statement is</target>
        </trans-unit>
        <trans-unit id="2b646ffbbdcd054326d494ba2f5c649f95d36297" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bit32&lt;/code&gt; library has been deprecated. It is easy to require a compatible external library or, better yet, to replace its functions with appropriate bitwise operations. (Keep in mind that &lt;code&gt;bit32&lt;/code&gt; operates on 32-bit integers, while the bitwise operators in Lua 5.3 operate on Lua integers, which by default have 64 bits.)</source>
          <target state="translated">&lt;code&gt;bit32&lt;/code&gt; のライブラリが廃止されました。互換性のある外部ライブラリを必要とすることは簡単ですが、その機能を適切なビットごとの演算に置き換えるほうが簡単です。（ &lt;code&gt;bit32&lt;/code&gt; は32ビット整数で動作するのに対し、Lua 5.3のビット演算子はLua整数で動作し、デフォルトでは64ビットであることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="768417f6f84362fdef7cb578c8c372a00d6776b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunkname&lt;/code&gt; argument gives a name to the chunk, which is used for error messages and in debug information (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">The &lt;code&gt;chunkname&lt;/code&gt; argument gives a name to the chunk, which is used for error messages and in debug information (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="3c35b56166af83b28a7e0e22c5d357b538f84788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunkname&lt;/code&gt; argument gives a name to the chunk, which is used for error messages and in debug information (see &lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;chunkname&lt;/code&gt; の引数はエラーメッセージやデバッグ情報で使用されているチャンクに名前を与える（参照&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bae62f5a0575c4f5ff2aabe5bf99d9776f3199b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lua_load&lt;/code&gt; function uses a user-supplied &lt;code&gt;reader&lt;/code&gt; function to read the chunk (see &lt;a href=&quot;#lua_Reader&quot;&gt;&lt;code&gt;lua_Reader&lt;/code&gt;&lt;/a&gt;). The &lt;code&gt;data&lt;/code&gt; argument is an opaque value passed to the reader function.</source>
          <target state="translated">&lt;code&gt;lua_load&lt;/code&gt; との機能は、ユーザ提供の使用 &lt;code&gt;reader&lt;/code&gt; （参照チャンクを読み取る機能&lt;a href=&quot;#lua_Reader&quot;&gt; &lt;code&gt;lua_Reader&lt;/code&gt; を&lt;/a&gt;）。 &lt;code&gt;data&lt;/code&gt; 引数は、リーダ関数に渡される不透明な値です。</target>
        </trans-unit>
        <trans-unit id="85f9907ce6878c8dc7e267337764d4964c7fae3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; string can also have a '&lt;code&gt;b&lt;/code&gt;' at the end, which is needed in some systems to open the file in binary mode.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 文字列はまた「持つことができ &lt;code&gt;b&lt;/code&gt; バイナリモードでファイルを開くには、いくつかのシステムで必要とされる終わりを」、。</target>
        </trans-unit>
        <trans-unit id="2688f69f4c7b22c66219e46ee16c2eac721dcdfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; string can be any of the following:</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 文字列は、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="dcce9d1975851c844f7c2f304003970e38bff938" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;q&lt;/code&gt; option formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call</source>
          <target state="translated">&lt;code&gt;q&lt;/code&gt; オプションは、それが安全にLuaのインタプリタによるリードバックすることができることを確実にするために、必要なときにエスケープシーケンスを使用して、二重引用符の間の文字列をフォーマットします。たとえば、呼び出し</target>
        </trans-unit>
        <trans-unit id="ab9206bbe0932c07e692d615d61a36493a13a496" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;auxiliary library&lt;/em&gt; provides several convenient functions to interface C with Lua. While the basic API provides the primitive functions for all interactions between C and Lua, the auxiliary library provides higher-level functions for some common tasks.</source>
          <target state="translated">&lt;em&gt;補助ライブラリは&lt;/em&gt; LuaのとCをインタフェースするために、いくつかの便利な機能を提供します。基本的なAPIはCとLuaの間のすべての相互作用のための基本関数を提供しますが、補助ライブラリはいくつかの一般的なタスクのための高レベルの関数を提供します。</target>
        </trans-unit>
        <trans-unit id="8ab6afc13be0118f613c20671f20dcaa66bf50fe" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;block&lt;/em&gt; is repeated for &lt;em&gt;name&lt;/em&gt; starting at the value of the first &lt;em&gt;exp&lt;/em&gt;, until it passes the second &lt;em&gt;exp&lt;/em&gt; by steps of the third &lt;em&gt;exp&lt;/em&gt;. More precisely, a &lt;b&gt;for&lt;/b&gt; statement like</source>
          <target state="translated">&lt;em&gt;ブロック&lt;/em&gt;に対して繰り返される&lt;em&gt;名前&lt;/em&gt;最初の値から始まる&lt;em&gt;EXP&lt;/em&gt;、第2経過するまで、&lt;em&gt;EXPを&lt;/em&gt;第三の工程により&lt;em&gt;EXP&lt;/em&gt;。より正確には、&lt;b&gt;for&lt;/b&gt;ステートメントのような</target>
        </trans-unit>
        <trans-unit id="d3b254f35dcb5161307fc6d343f99ec868c9f36b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;colon&lt;/em&gt; syntax is used for defining &lt;em&gt;methods&lt;/em&gt;, that is, functions that have an implicit extra parameter &lt;code&gt;self&lt;/code&gt;. Thus, the statement</source>
          <target state="translated">&lt;em&gt;コロン&lt;/em&gt;構文を定義するために使用されている&lt;em&gt;方法&lt;/em&gt;、暗黙の追加のパラメータの持つ機能である、 &lt;code&gt;self&lt;/code&gt; 。したがって、ステートメント</target>
        </trans-unit>
        <trans-unit id="f572f282cad30118a92f64a8c2a8e8b7d0ba81c2" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;colon&lt;/em&gt; syntax is used to emulate &lt;em&gt;methods&lt;/em&gt;, adding an implicit extra parameter &lt;code&gt;self&lt;/code&gt; to the function. Thus, the statement</source>
          <target state="translated">The &lt;em&gt;colon&lt;/em&gt; syntax is used to emulate &lt;em&gt;methods&lt;/em&gt;, adding an implicit extra parameter &lt;code&gt;self&lt;/code&gt; to the function. Thus, the statement</target>
        </trans-unit>
        <trans-unit id="6d7a7980421d2b17bd0aed9b9a529fd71ecec0a9" translate="yes" xml:space="preserve">
          <source>The I/O library provides two different styles for file manipulation. The first one uses implicit file handles; that is, there are operations to set a default input file and a default output file, and all input/output operations are done over these default files. The second style uses explicit file handles.</source>
          <target state="translated">I/Oライブラリは、ファイル操作のために2つの異なるスタイルを提供しています。すなわち、デフォルトの入力ファイルとデフォルトの出力ファイルを設定する操作があり、すべての入出力操作はこれらのデフォルトファイルに対して行われます。2 つ目のスタイルは明示的なファイルハンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="171411617a28d7de2b0226c80067f77ec30897f7" translate="yes" xml:space="preserve">
          <source>The I/O library provides two different styles for file manipulation. The first one uses implicit file handles; that is, there are operations to set a default input file and a default output file, and all input/output operations are over these default files. The second style uses explicit file handles.</source>
          <target state="translated">I/Oライブラリは、ファイル操作のために2つの異なるスタイルを提供しています。すなわち、デフォルトの入力ファイルとデフォルトの出力ファイルを設定する操作があり、すべての入出力操作はこれらのデフォルトファイル上で行われます。2 つ目のスタイルは明示的なファイルハンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="fe26bd92623ecffd0ef5b0b7681c64345000ef38" translate="yes" xml:space="preserve">
          <source>The Length Operator</source>
          <target state="translated">長さの演算子</target>
        </trans-unit>
        <trans-unit id="b46439f6fc2b5220d043e60a0c5b1b7e77db627e" translate="yes" xml:space="preserve">
          <source>The Lua library is fully reentrant: it has no global variables. It keeps all information it needs in a dynamic structure, called the &lt;em&gt;Lua state&lt;/em&gt;.</source>
          <target state="translated">Luaライブラリは完全に再入可能です。グローバル変数はありません。&lt;em&gt;Lua状態&lt;/em&gt;と呼ばれる動的な構造で必要なすべての情報を保持します。</target>
        </trans-unit>
        <trans-unit id="07b128e0f94f3f9a107ec1b9a4411b8083a41fce" translate="yes" xml:space="preserve">
          <source>The Table library now respects metamethods for setting and getting elements.</source>
          <target state="translated">テーブルライブラリは、要素の設定と取得のためのメタメソッドを尊重するようになりました。</target>
        </trans-unit>
        <trans-unit id="eb554fe048e1c8b347ad8a3da87d434c8b60f5db" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding of a Unicode character can be inserted in a literal string with the escape sequence &lt;code&gt;\u{&lt;em&gt;XXX&lt;/em&gt;}&lt;/code&gt; (note the mandatory enclosing brackets), where &lt;em&gt;XXX&lt;/em&gt; is a sequence of one or more hexadecimal digits representing the character code point.</source>
          <target state="translated">Unicode文字のUTF-8エンコードは、エスケープシーケンス &lt;code&gt;\u{&lt;em&gt;XXX&lt;/em&gt;}&lt;/code&gt; リテラル文字列に挿入できます（必須の囲み括弧に注意）。ここで、&lt;em&gt;XXX&lt;/em&gt;は文字コードポイントを表す1つ以上の16進数のシーケンスです。</target>
        </trans-unit>
        <trans-unit id="133b64cb1acd8fa4b0993eef50a3ec5beecc6e3a" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding of a Unicode character can be inserted in a literal string with the escape sequence &lt;code&gt;\u{&lt;em&gt;XXX&lt;/em&gt;}&lt;/code&gt; (with mandatory enclosing braces), where &lt;em&gt;XXX&lt;/em&gt; is a sequence of one or more hexadecimal digits representing the character code point. This code point can be any value less than &lt;em&gt;2&lt;sup&gt;31&lt;/sup&gt;&lt;/em&gt;. (Lua uses the original UTF-8 specification here, which is not restricted to valid Unicode code points.)</source>
          <target state="translated">The UTF-8 encoding of a Unicode character can be inserted in a literal string with the escape sequence &lt;code&gt;\u{&lt;em&gt;XXX&lt;/em&gt;}&lt;/code&gt; (with mandatory enclosing braces), where &lt;em&gt;XXX&lt;/em&gt; is a sequence of one or more hexadecimal digits representing the character code point. This code point can be any value less than &lt;em&gt;2&lt;sup&gt;31&lt;/sup&gt;&lt;/em&gt;. (Lua uses the original UTF-8 specification here, which is not restricted to valid Unicode code points.)</target>
        </trans-unit>
        <trans-unit id="3e71c6008a2054b02c7458c10af8db199b93e0fc" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;l&lt;/code&gt; must be the actual array, not a pointer to it.</source>
          <target state="translated">配列 &lt;code&gt;l&lt;/code&gt; は、それを指すポインターではなく、実際の配列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ec4ef8ac03868996fbe27096f10720a2a635fd47" translate="yes" xml:space="preserve">
          <source>The assignment statement first evaluates all its expressions and only then the assignments are performed. Thus the code</source>
          <target state="translated">代入文は最初にすべての式を評価し、その後にのみ代入が実行されます。したがって、コードは</target>
        </trans-unit>
        <trans-unit id="63ea036976be25a6fccc44715a31648a894a2cd9" translate="yes" xml:space="preserve">
          <source>The available formats are</source>
          <target state="translated">利用可能なフォーマットは</target>
        </trans-unit>
        <trans-unit id="1bf5ee36dda4ba103acec9799a8f08fe38658693" translate="yes" xml:space="preserve">
          <source>The basic expressions in Lua are the following:</source>
          <target state="translated">Luaの基本的な表現は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a90f0e6ef32f54b398b228c2483c97e99f92d4d7" translate="yes" xml:space="preserve">
          <source>The basic library provides core functions to Lua. If you do not include this library in your application, you should check carefully whether you need to provide implementations for some of its facilities.</source>
          <target state="translated">基本ライブラリはLuaのコア機能を提供します。このライブラリをアプリケーションに含まない場合は、一部の機能の実装を提供する必要があるかどうかをよく確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="6a4e9c1cd28f7989f62ba005ba19f087fc3592ba" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;next&lt;/code&gt; is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may clear existing fields.</source>
          <target state="translated">走査中にテーブル内の存在しないフィールドに値を割り当てた場合の &lt;code&gt;next&lt;/code&gt; の動作は定義されていません。ただし、既存のフィールドは変更できます。特に、既存のフィールドをクリアできます。</target>
        </trans-unit>
        <trans-unit id="ff207200b1250dc2b47ca5a7a827de1d648909f3" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;next&lt;/code&gt; is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.</source>
          <target state="translated">The behavior of &lt;code&gt;next&lt;/code&gt; is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.</target>
        </trans-unit>
        <trans-unit id="0dc90ae531b088f04f67083e165dbcb68af23283" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;collectgarbage(&quot;count&quot;)&lt;/code&gt; now returns only one result. (You can compute that second result from the fractional part of the first result.)</source>
          <target state="translated">&lt;code&gt;collectgarbage(&quot;count&quot;)&lt;/code&gt; を呼び出すと、結果が1つだけ返されるようになりました。（最初の結果の小数部分から2番目の結果を計算できます。）</target>
        </trans-unit>
        <trans-unit id="c68441a4203b3cd2bfe34776a10e03a400a467cb" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;io.lines()&lt;/code&gt; (with no file name) is equivalent to &lt;code&gt;io.input():lines(&quot;*l&quot;)&lt;/code&gt;; that is, it iterates over the lines of the default input file. In this case it does not close the file when the loop ends.</source>
          <target state="translated">呼び出し &lt;code&gt;io.lines()&lt;/code&gt; （ファイル名なし）は &lt;code&gt;io.input():lines(&quot;*l&quot;)&lt;/code&gt; と同等です。つまり、デフォルトの入力ファイルの行を反復します。この場合、ループが終了してもファイルは閉じません。</target>
        </trans-unit>
        <trans-unit id="56312b3ed08e17201e15d0358b34f5524a82475c" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;io.lines()&lt;/code&gt; (with no file name) is equivalent to &lt;code&gt;io.input():lines(&quot;l&quot;)&lt;/code&gt;; that is, it iterates over the lines of the default input file. In this case, the iterator does not close the file when the loop ends.</source>
          <target state="translated">The call &lt;code&gt;io.lines()&lt;/code&gt; (with no file name) is equivalent to &lt;code&gt;io.input():lines(&quot;l&quot;)&lt;/code&gt; ; that is, it iterates over the lines of the default input file. In this case, the iterator does not close the file when the loop ends.</target>
        </trans-unit>
        <trans-unit id="3e4ad773c547ffbe50168aed20636ff53516332e" translate="yes" xml:space="preserve">
          <source>The closing value behaves like a to-be-closed variable (see &lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;), which can be used to release resources when the loop ends. Otherwise, it does not interfere with the loop.</source>
          <target state="translated">The closing value behaves like a to-be-closed variable (see &lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;), which can be used to release resources when the loop ends. Otherwise, it does not interfere with the loop.</target>
        </trans-unit>
        <trans-unit id="798511549246488486c822aec3e1cc74d4fe6a5b" translate="yes" xml:space="preserve">
          <source>The coercion of strings to numbers in arithmetic and bitwise operations has been removed from the core language. The string library does a similar job for arithmetic (but not for bitwise) operations using the string metamethods. However, unlike in previous versions, the new implementation preserves the implicit type of the numeral in the string. For instance, the result of &lt;code&gt;&quot;1&quot; + &quot;2&quot;&lt;/code&gt; now is an integer, not a float.</source>
          <target state="translated">The coercion of strings to numbers in arithmetic and bitwise operations has been removed from the core language. The string library does a similar job for arithmetic (but not for bitwise) operations using the string metamethods. However, unlike in previous versions, the new implementation preserves the implicit type of the numeral in the string. For instance, the result of &lt;code&gt;&quot;1&quot; + &quot;2&quot;&lt;/code&gt; now is an integer, not a float.</target>
        </trans-unit>
        <trans-unit id="ef37fdd6b0b5e41eab32a9928b1d9217a2a5737b" translate="yes" xml:space="preserve">
          <source>The computation of the length of a table has a guaranteed worst time of &lt;em&gt;O(log n)&lt;/em&gt;, where &lt;em&gt;n&lt;/em&gt; is the largest natural key in the table.</source>
          <target state="translated">テーブルの長さの計算では、保証された最悪の時間&lt;em&gt;O（log n）&lt;/em&gt;が保証されます。ここで、&lt;em&gt;n&lt;/em&gt;はテーブル内の最大の自然キーです。</target>
        </trans-unit>
        <trans-unit id="0b56d75e0be562bbdd8ce192220fca509ed349d6" translate="yes" xml:space="preserve">
          <source>The condition expression of a control structure can return any value. Both &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt; are considered false. All values different from &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; are considered true (in particular, the number 0 and the empty string are also true).</source>
          <target state="translated">制御構造の条件式は、任意の値を返すことができます。&lt;b&gt;false&lt;/b&gt;と&lt;b&gt;nil&lt;/b&gt;はどちらも&lt;b&gt;false&lt;/b&gt;と見なされます。&lt;b&gt;nil&lt;/b&gt;と&lt;b&gt;false以外の&lt;/b&gt;すべての値はtrueと見なされます（特に、数値0と空の文字列もtrueと見なされます）。</target>
        </trans-unit>
        <trans-unit id="3b920454c4c1d2c03393d9ac78ec720b9fbaa526" translate="yes" xml:space="preserve">
          <source>The condition expression of a control structure can return any value. Both &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt; test false. All values different from &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; test true. In particular, the number 0 and the empty string also test true.</source>
          <target state="translated">The condition expression of a control structure can return any value. Both &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt; test false. All values different from &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; test true. In particular, the number 0 and the empty string also test true.</target>
        </trans-unit>
        <trans-unit id="ec24a70490264f051fb6d0ae4a587a4f8d0e22eb" translate="yes" xml:space="preserve">
          <source>The constant &lt;code&gt;LUA_ERRGCMM&lt;/code&gt; was removed. Errors in finalizers are never propagated; instead, they generate a warning.</source>
          <target state="translated">The constant &lt;code&gt;LUA_ERRGCMM&lt;/code&gt; was removed. Errors in finalizers are never propagated; instead, they generate a warning.</target>
        </trans-unit>
        <trans-unit id="c3733f14fe1543e4589c9195fb66e8ff53166d2c" translate="yes" xml:space="preserve">
          <source>The control structures &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, and &lt;b&gt;repeat&lt;/b&gt; have the usual meaning and familiar syntax:</source>
          <target state="translated">&lt;b&gt;if&lt;/b&gt;、&lt;b&gt;while&lt;/b&gt;、&lt;b&gt;repeat&lt;/b&gt;の制御構造は、通常の意味と使い慣れた構文を持っています。</target>
        </trans-unit>
        <trans-unit id="fd0c2e7539b39e7334ffb646988e686084be276b" translate="yes" xml:space="preserve">
          <source>The conversion from float to integer checks whether the float has an exact representation as an integer (that is, the float has an integral value and it is in the range of integer representation). If it does, that representation is the result. Otherwise, the conversion fails.</source>
          <target state="translated">floatから整数への変換は、floatが整数として正確に表現されているかどうかをチェックします(つまり、floatは積分値を持ち、整数表現の範囲内にあります)。もしそうであれば、その表現が結果となります。そうでなければ,変換は失敗します。</target>
        </trans-unit>
        <trans-unit id="2672e5ddb4380b4a0e9162708d0ffacc1d9552f5" translate="yes" xml:space="preserve">
          <source>The conversion from numbers to strings uses a non-specified human-readable format. For complete control over how numbers are converted to strings, use the &lt;code&gt;format&lt;/code&gt; function from the string library (see &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">数値から文字列への変換では、指定されていない人間が読める形式を使用します。数値を文字列に変換する方法を完全に制御するには、文字列ライブラリの &lt;code&gt;format&lt;/code&gt; 関数を使用します（&lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d7eef57d5a172c39981c5ce7311c830825d6249b" translate="yes" xml:space="preserve">
          <source>The conversion from numbers to strings uses a non-specified human-readable format. To convert numbers to strings in any specific way, use the function &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The conversion from numbers to strings uses a non-specified human-readable format. To convert numbers to strings in any specific way, use the function &lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e4fc8189f226b883ce5f116eb5b865021736d178" translate="yes" xml:space="preserve">
          <source>The conversion from strings to numbers goes as follows: First, the string is converted to an integer or a float, following its syntax and the rules of the Lua lexer. (The string may have also leading and trailing spaces and a sign.) Then, the resulting number (float or integer) is converted to the type (float or integer) required by the context (e.g., the operation that forced the conversion).</source>
          <target state="translated">文字列から数値への変換は以下のように行われます。まず、文字列をLuaの構文とLuaレキサーのルールに従って、整数または浮動小数点数に変換します(文字列には先頭や末尾にスペースや符号を付けることもできます)。(文字列には、先頭と末尾にスペースや符号が含まれている場合もあります)次に、結果として得られた数値 (float または整数)を、コンテキスト (変換を強制した操作など)で必要とされる型 (float または整数)に変換します。</target>
        </trans-unit>
        <trans-unit id="f171e574fe61e971bf96a3990d066bb469d0ea25" translate="yes" xml:space="preserve">
          <source>The conversion of a float to a string now adds a &lt;code&gt;.0&lt;/code&gt; suffix to the result if it looks like an integer. (For instance, the float 2.0 will be printed as &lt;code&gt;2.0&lt;/code&gt;, not as &lt;code&gt;2&lt;/code&gt;.) You should always use an explicit format when you need a specific format for numbers.</source>
          <target state="translated">浮動小数点数を文字列に変換すると、整数のように見える場合、結果に &lt;code&gt;.0&lt;/code&gt; サフィックスが追加されます。（たとえば、float 2.0は &lt;code&gt;2&lt;/code&gt; ではなく &lt;code&gt;2.0&lt;/code&gt; として印刷されます。）数値に特定の形式が必要な場合は、常に明示的な形式を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="fde25091233105fea6baa5683b61b7b5603b3cd0" translate="yes" xml:space="preserve">
          <source>The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;). (The string may have leading and trailing spaces and a sign.)</source>
          <target state="translated">Luaの字句規則（&lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1を&lt;/a&gt;参照）に従って、文字列の変換は整数または浮動小数点数になる可能性があります。 （文字列には、先頭と末尾にスペースと記号が含まれる場合があります。）</target>
        </trans-unit>
        <trans-unit id="8a7deb37cbfaea7e8697ec963b8057a9bed112e3" translate="yes" xml:space="preserve">
          <source>The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;). The string may have leading and trailing spaces and a sign.</source>
          <target state="translated">The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see &lt;a href=&quot;#3.1&quot;&gt;&amp;sect;3.1&lt;/a&gt;). The string may have leading and trailing spaces and a sign.</target>
        </trans-unit>
        <trans-unit id="2779abe0bdda569ab2443dd1aeb2c757f08c9877" translate="yes" xml:space="preserve">
          <source>The conversion specifiers &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, and &lt;code&gt;g&lt;/code&gt; all expect a number as argument. The specifiers &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; expect an integer. When Lua is compiled with a C89 compiler, the specifiers &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; (hexadecimal floats) do not support modifiers.</source>
          <target state="translated">The conversion specifiers &lt;code&gt;A&lt;/code&gt; , &lt;code&gt;a&lt;/code&gt; , &lt;code&gt;E&lt;/code&gt; , &lt;code&gt;e&lt;/code&gt; , &lt;code&gt;f&lt;/code&gt; , &lt;code&gt;G&lt;/code&gt; , and &lt;code&gt;g&lt;/code&gt; all expect a number as argument. The specifiers &lt;code&gt;c&lt;/code&gt; , &lt;code&gt;d&lt;/code&gt; , &lt;code&gt;i&lt;/code&gt; , &lt;code&gt;o&lt;/code&gt; , &lt;code&gt;u&lt;/code&gt; , &lt;code&gt;X&lt;/code&gt; , and &lt;code&gt;x&lt;/code&gt; expect an integer. When Lua is compiled with a C89 compiler, the specifiers &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; (hexadecimal floats) do not support modifiers.</target>
        </trans-unit>
        <trans-unit id="4a41a1a32246a11826a5d6e075e45733f76f3306" translate="yes" xml:space="preserve">
          <source>The conversion specifiers are quite restricted. There are no flags, widths, or precisions. The conversion specifiers can only be '&lt;code&gt;%%&lt;/code&gt;' (inserts the character '&lt;code&gt;%&lt;/code&gt;'), '&lt;code&gt;%s&lt;/code&gt;' (inserts a zero-terminated string, with no size restrictions), '&lt;code&gt;%f&lt;/code&gt;' (inserts a &lt;a href=&quot;#lua_Number&quot;&gt;&lt;code&gt;lua_Number&lt;/code&gt;&lt;/a&gt;), '&lt;code&gt;%I&lt;/code&gt;' (inserts a &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;), '&lt;code&gt;%p&lt;/code&gt;' (inserts a pointer as a hexadecimal numeral), '&lt;code&gt;%d&lt;/code&gt;' (inserts an &lt;code&gt;int&lt;/code&gt;), '&lt;code&gt;%c&lt;/code&gt;' (inserts an &lt;code&gt;int&lt;/code&gt; as a one-byte character), and '&lt;code&gt;%U&lt;/code&gt;' (inserts a &lt;code&gt;long int&lt;/code&gt; as a UTF-8 byte sequence).</source>
          <target state="translated">変換指定子はかなり制限されています。フラグ、幅、精度はありません。変換指定子は、 ' &lt;code&gt;%%&lt;/code&gt; '（文字 ' &lt;code&gt;%&lt;/code&gt; 'を挿入）、 ' &lt;code&gt;%s&lt;/code&gt; '（サイズ制限なしでゼロで終了する文字列を挿入）、 ' &lt;code&gt;%f&lt;/code&gt; '（&lt;a href=&quot;#lua_Number&quot;&gt; &lt;code&gt;lua_Number&lt;/code&gt; を&lt;/a&gt;挿入）、 ' &lt;code&gt;%I&lt;/code&gt; のみです。 '（&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; を&lt;/a&gt;挿入）、' &lt;code&gt;%p&lt;/code&gt; '（16進数としてポインターを挿入）、' &lt;code&gt;%d&lt;/code&gt; '（ &lt;code&gt;int&lt;/code&gt; を挿入）、' &lt;code&gt;%c&lt;/code&gt; '（ &lt;code&gt;int&lt;/code&gt; を1バイト文字として挿入）、および' &lt;code&gt;%U&lt;/code&gt; '（ &lt;code&gt;long int&lt;/code&gt; をUTF-8バイトシーケンスとして挿入します）。</target>
        </trans-unit>
        <trans-unit id="4a2b4eab7e7e8e47540c45b140f9d1c1edf8fd79" translate="yes" xml:space="preserve">
          <source>The current parser always sees such constructions in the first way, interpreting the open parenthesis as the start of the arguments to a call. To avoid this ambiguity, it is a good practice to always precede with a semicolon statements that start with a parenthesis:</source>
          <target state="translated">現在のパーサは、このような構文を常に最初の方法で認識し、開いている括弧を呼び出しの引数の先頭と解釈しています。この曖昧さを避けるために、括弧で始まる文の前には常にセミコロンを付けるのが良い習慣です。</target>
        </trans-unit>
        <trans-unit id="c9bf869e4f0cbfc39ea3983d219f80c93e648f82" translate="yes" xml:space="preserve">
          <source>The default GC mode with the default parameters are adequate for most uses. However, programs that waste a large proportion of their time allocating and freeing memory can benefit from other settings. Keep in mind that the GC behavior is non-portable both across platforms and across different Lua releases; therefore, optimal settings are also non-portable.</source>
          <target state="translated">デフォルトのパラメータを持つデフォルトの GC 2011 モードは、ほとんどの用途に適しています。しかし、メモリの割り当てや解放に多くの時間を費やすプログラムでは、他の設定が有効です。GC の動作は、プラットフォームや異なる Lua リリース間でも移植性がないため、最適な設定も移植性がないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="1273a024b1e39aac89ab0ab6781ebe040b7fbcc0" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list&lt;/code&gt;, so that a call &lt;code&gt;table.remove(l)&lt;/code&gt; removes the last element of list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; のデフォルト値は &lt;code&gt;#list&lt;/code&gt; であるため、 &lt;code&gt;table.remove(l)&lt;/code&gt; を呼び出すと、リスト &lt;code&gt;l&lt;/code&gt; の最後の要素が削除されます。</target>
        </trans-unit>
        <trans-unit id="29c63af20a776235dbc6fd94c8529980ff13aa8a" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list&lt;/code&gt;, so that a call &lt;code&gt;table.remove(l)&lt;/code&gt; removes the last element of the list &lt;code&gt;l&lt;/code&gt;.</source>
          <target state="translated">The default value for &lt;code&gt;pos&lt;/code&gt; is &lt;code&gt;#list&lt;/code&gt; , so that a call &lt;code&gt;table.remove(l)&lt;/code&gt; removes the last element of the list &lt;code&gt;l&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="13c08370b3a28f0fd5960d5a4c5c48fa16e93a96" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;whence&lt;/code&gt; is &lt;code&gt;&quot;cur&quot;&lt;/code&gt;, and for &lt;code&gt;offset&lt;/code&gt; is 0. Therefore, the call &lt;code&gt;file:seek()&lt;/code&gt; returns the current file position, without changing it; the call &lt;code&gt;file:seek(&quot;set&quot;)&lt;/code&gt; sets the position to the beginning of the file (and returns 0); and the call &lt;code&gt;file:seek(&quot;end&quot;)&lt;/code&gt; sets the position to the end of the file, and returns its size.</source>
          <target state="translated">&lt;code&gt;whence&lt;/code&gt; のデフォルト値は &lt;code&gt;&quot;cur&quot;&lt;/code&gt; で、 &lt;code&gt;offset&lt;/code&gt; のデフォルト値は0です。したがって、 &lt;code&gt;file:seek()&lt;/code&gt; を呼び出すと、現在のファイル位置が変更されずに返されます。呼び出し &lt;code&gt;file:seek(&quot;set&quot;)&lt;/code&gt; は、位置をファイルの先頭に設定します（そして0を返します）。呼び出し &lt;code&gt;file:seek(&quot;end&quot;)&lt;/code&gt; は、位置をファイルの最後に設定し、そのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="6bc56dc8d299b9d15b00a924ab6b6763132d6c6e" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;x&lt;/code&gt; is 1, so that the call &lt;code&gt;math.atan(y)&lt;/code&gt; returns the arc tangent of &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">デフォルト値 &lt;code&gt;x&lt;/code&gt; が呼ように、1 &lt;code&gt;math.atan(y)&lt;/code&gt; はの逆正接を返し &lt;code&gt;y&lt;/code&gt; は。</target>
        </trans-unit>
        <trans-unit id="6c1119d71f1c451d5f2fe0db217d85e8a5bba94c" translate="yes" xml:space="preserve">
          <source>The definitions of letter, space, and other character groups depend on the current locale. In particular, the class &lt;code&gt;[a-z]&lt;/code&gt; may not be equivalent to &lt;code&gt;%l&lt;/code&gt;.</source>
          <target state="translated">文字、スペース、およびその他の文字グループの定義は、現在のロケールによって異なります。特に、クラス &lt;code&gt;[a-z]&lt;/code&gt; は &lt;code&gt;%l&lt;/code&gt; と同等ではない場合があります。</target>
        </trans-unit>
        <trans-unit id="f71cbe788ea609ab97e549ccaa27836b38cc887d" translate="yes" xml:space="preserve">
          <source>The field list can have an optional trailing separator, as a convenience for machine-generated code.</source>
          <target state="translated">フィールドリストには、機械で生成されたコードに便利なように、オプションで末尾にセパレータを付けることができます。</target>
        </trans-unit>
        <trans-unit id="e2dc2a9366caaece55ab74f5902257c1d9cc63e9" translate="yes" xml:space="preserve">
          <source>The fields of &lt;a href=&quot;#lua_Debug&quot;&gt;&lt;code&gt;lua_Debug&lt;/code&gt;&lt;/a&gt; have the following meaning:</source>
          <target state="translated">&lt;a href=&quot;#lua_Debug&quot;&gt; &lt;code&gt;lua_Debug&lt;/code&gt; &lt;/a&gt;のフィールドには次の意味があります。</target>
        </trans-unit>
        <trans-unit id="5cf6a1464c2f6d6211946c68accd0138255e9433" translate="yes" xml:space="preserve">
          <source>The fifth line is a mark to ignore all text after it when building the &lt;code&gt;luaopen_&lt;/code&gt; function name. Default is '&lt;code&gt;-&lt;/code&gt;'.</source>
          <target state="translated">5行目は、 &lt;code&gt;luaopen_&lt;/code&gt; 関数名を作成するときに、その後のすべてのテキストを無視するためのマークです。デフォルトは「 &lt;code&gt;-&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="d550e1bb0cbfc7b8de8aa9f3e58a6e8b1e903f3a" translate="yes" xml:space="preserve">
          <source>The first argument to &lt;a href=&quot;#pdf-string.pack&quot;&gt;&lt;code&gt;string.pack&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-string.packsize&quot;&gt;&lt;code&gt;string.packsize&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-string.unpack&quot;&gt;&lt;code&gt;string.unpack&lt;/code&gt;&lt;/a&gt; is a format string, which describes the layout of the structure being created or read.</source>
          <target state="translated">&lt;a href=&quot;#pdf-string.pack&quot;&gt; &lt;code&gt;string.pack&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-string.packsize&quot;&gt; &lt;code&gt;string.packsize&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#pdf-string.unpack&quot;&gt; &lt;code&gt;string.unpack&lt;/code&gt; &lt;/a&gt;の最初の引数は、作成または読み取られる構造のレイアウトを記述するフォーマット文字列です。</target>
        </trans-unit>
        <trans-unit id="35b2be930dbf43b40449e98f73501827b087ff5f" translate="yes" xml:space="preserve">
          <source>The first field, &lt;code&gt;o&lt;/code&gt;, is how many elements the function pops from the stack. The second field, &lt;code&gt;p&lt;/code&gt;, is how many elements the function pushes onto the stack. (Any function always pushes its results after popping its arguments.) A field in the form &lt;code&gt;x|y&lt;/code&gt; means the function can push (or pop) &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; elements, depending on the situation; an interrogation mark '&lt;code&gt;?&lt;/code&gt;' means that we cannot know how many elements the function pops/pushes by looking only at its arguments (e.g., they may depend on what is on the stack). The third field, &lt;code&gt;x&lt;/code&gt;, tells whether the function may raise errors: '&lt;code&gt;-&lt;/code&gt;' means the function never raises any error; '&lt;code&gt;m&lt;/code&gt;' means the function may raise out-of-memory errors and errors running a &lt;code&gt;__gc&lt;/code&gt; metamethod; '&lt;code&gt;e&lt;/code&gt;' means the function may raise any errors (it can run arbitrary Lua code, either directly or through metamethods); '&lt;code&gt;v&lt;/code&gt;' means the function may raise an error on purpose.</source>
          <target state="translated">最初のフィールド &lt;code&gt;o&lt;/code&gt; は、関数がスタックからポップする要素の数です。 2番目のフィールド &lt;code&gt;p&lt;/code&gt; は、関数がスタックにプッシュする要素の数です。 （どの関数も、引数をポップした後は常に結果をプッシュします。） &lt;code&gt;x|y&lt;/code&gt; の形式のフィールドは、関数が状況に応じて &lt;code&gt;x&lt;/code&gt; または &lt;code&gt;y&lt;/code&gt; 要素をプッシュ（またはポップ）できることを意味します。尋問マーク ' &lt;code&gt;?&lt;/code&gt; 'は、関数がその引数だけを見てもポップ/プッシュする要素の数がわからないことを意味します（たとえば、スタックにあるものに依存する場合があります）。 3番目のフィールド &lt;code&gt;x&lt;/code&gt; は、関数がエラーを発生させるかどうかを示します。「 &lt;code&gt;-&lt;/code&gt; 」は、関数がエラーを発生させないことを意味します。 ' &lt;code&gt;m&lt;/code&gt; 'は、関数がメモリ不足エラーと &lt;code&gt;__gc&lt;/code&gt; メタメソッドの実行エラーを発生させる可能性があることを意味します。' &lt;code&gt;e&lt;/code&gt; 'は、関数がエラーを発生させる可能性があることを意味します（直接またはメタメソッドを介して任意のLuaコードを実行できます）。' &lt;code&gt;v&lt;/code&gt; 'は、関数が意図的にエラーを発生させる可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="0c89478a55ea6827ef7574f90e0b65d3a882b531" translate="yes" xml:space="preserve">
          <source>The first field, &lt;code&gt;o&lt;/code&gt;, is how many elements the function pops from the stack. The second field, &lt;code&gt;p&lt;/code&gt;, is how many elements the function pushes onto the stack. (Any function always pushes its results after popping its arguments.) A field in the form &lt;code&gt;x|y&lt;/code&gt; means the function can push (or pop) &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; elements, depending on the situation; an interrogation mark '&lt;code&gt;?&lt;/code&gt;' means that we cannot know how many elements the function pops/pushes by looking only at its arguments. (For instance, they may depend on what is in the stack.) The third field, &lt;code&gt;x&lt;/code&gt;, tells whether the function may raise errors: '&lt;code&gt;-&lt;/code&gt;' means the function never raises any error; '&lt;code&gt;m&lt;/code&gt;' means the function may raise only out-of-memory errors; '&lt;code&gt;v&lt;/code&gt;' means the function may raise the errors explained in the text; '&lt;code&gt;e&lt;/code&gt;' means the function can run arbitrary Lua code, either directly or through metamethods, and therefore may raise any errors.</source>
          <target state="translated">The first field, &lt;code&gt;o&lt;/code&gt; , is how many elements the function pops from the stack. The second field, &lt;code&gt;p&lt;/code&gt; , is how many elements the function pushes onto the stack. (Any function always pushes its results after popping its arguments.) A field in the form &lt;code&gt;x|y&lt;/code&gt; means the function can push (or pop) &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; elements, depending on the situation; an interrogation mark ' &lt;code&gt;?&lt;/code&gt; ' means that we cannot know how many elements the function pops/pushes by looking only at its arguments. (For instance, they may depend on what is in the stack.) The third field, &lt;code&gt;x&lt;/code&gt; , tells whether the function may raise errors: ' &lt;code&gt;-&lt;/code&gt; ' means the function never raises any error; ' &lt;code&gt;m&lt;/code&gt; ' means the function may raise only out-of-memory errors; ' &lt;code&gt;v&lt;/code&gt; ' means the function may raise the errors explained in the text; ' &lt;code&gt;e&lt;/code&gt; ' means the function can run arbitrary Lua code, either directly or through metamethods, and therefore may raise any errors.</target>
        </trans-unit>
        <trans-unit id="080894d3f355773389e870abdc64bf22951aa7fd" translate="yes" xml:space="preserve">
          <source>The first line is the directory separator string. Default is '&lt;code&gt;\&lt;/code&gt;' for Windows and '&lt;code&gt;/&lt;/code&gt;' for all other systems.</source>
          <target state="translated">1行目はディレクトリ区切り文字列です。デフォルトは、Windowsの場合は「 &lt;code&gt;\&lt;/code&gt; 」、その他すべてのシステムの場合は「 &lt;code&gt;/&lt;/code&gt; 」です。</target>
        </trans-unit>
        <trans-unit id="618ae404e5e9c891f664deb6c2fb8fab741ce902" translate="yes" xml:space="preserve">
          <source>The first parameter or local variable has index 1, and so on, following the order that they are declared in the code, counting only the variables that are active in the current scope of the function. Compile-time constants may not appear in this listing, if they were optimized away by the compiler. Negative indices refer to vararg arguments; -1 is the first vararg argument. The function returns &lt;b&gt;fail&lt;/b&gt; if there is no variable with the given index, and raises an error when called with a level out of range. (You can call &lt;a href=&quot;#pdf-debug.getinfo&quot;&gt;&lt;code&gt;debug.getinfo&lt;/code&gt;&lt;/a&gt; to check whether the level is valid.)</source>
          <target state="translated">The first parameter or local variable has index 1, and so on, following the order that they are declared in the code, counting only the variables that are active in the current scope of the function. Compile-time constants may not appear in this listing, if they were optimized away by the compiler. Negative indices refer to vararg arguments; -1 is the first vararg argument. The function returns &lt;b&gt;fail&lt;/b&gt; if there is no variable with the given index, and raises an error when called with a level out of range. (You can call &lt;a href=&quot;#pdf-debug.getinfo&quot;&gt; &lt;code&gt;debug.getinfo&lt;/code&gt; &lt;/a&gt; to check whether the level is valid.)</target>
        </trans-unit>
        <trans-unit id="b927b10bd57d8d0d9d2adab8cf882393f87f3f97" translate="yes" xml:space="preserve">
          <source>The first parameter or local variable has index 1, and so on, following the order that they are declared in the code, counting only the variables that are active in the current scope of the function. Negative indices refer to vararg parameters; -1 is the first vararg parameter. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no variable with the given index, and raises an error when called with a level out of range. (You can call &lt;a href=&quot;#pdf-debug.getinfo&quot;&gt;&lt;code&gt;debug.getinfo&lt;/code&gt;&lt;/a&gt; to check whether the level is valid.)</source>
          <target state="translated">最初のパラメーターまたはローカル変数はインデックス1を持ち、コードで宣言された順序に従って、関数の現在のスコープでアクティブな変数のみをカウントします。負のインデックスは可変引数パラメーターを参照します。-1は最初の可変引数パラメーターです。この関数は、指定されたインデックスを持つ変数がない場合は&lt;b&gt;nilを&lt;/b&gt;返し、範囲外のレベルで呼び出されるとエラーを発生させます。（&lt;a href=&quot;#pdf-debug.getinfo&quot;&gt; &lt;code&gt;debug.getinfo&lt;/code&gt; &lt;/a&gt;を呼び出して、レベルが有効かどうかを確認できます。）</target>
        </trans-unit>
        <trans-unit id="ee8f303d70c303dd14cac48bd1f16c3b0dcbcc40" translate="yes" xml:space="preserve">
          <source>The first searcher simply looks for a loader in the &lt;a href=&quot;#pdf-package.preload&quot;&gt;&lt;code&gt;package.preload&lt;/code&gt;&lt;/a&gt; table.</source>
          <target state="translated">最初のサーチャーは、&lt;a href=&quot;#pdf-package.preload&quot;&gt; &lt;code&gt;package.preload&lt;/code&gt; &lt;/a&gt;テーブルでローダーを探すだけです。</target>
        </trans-unit>
        <trans-unit id="62aececc4ee40da1a864200ef2a0c8a1bcbfc8f7" translate="yes" xml:space="preserve">
          <source>The float value &lt;code&gt;HUGE_VAL&lt;/code&gt;, a value greater than any other numeric value.</source>
          <target state="translated">The float value &lt;code&gt;HUGE_VAL&lt;/code&gt; , a value greater than any other numeric value.</target>
        </trans-unit>
        <trans-unit id="d265942ec96276d66e6ab599ec30b3a3b29815fd" translate="yes" xml:space="preserve">
          <source>The float value &lt;code&gt;HUGE_VAL&lt;/code&gt;, a value larger than any other numeric value.</source>
          <target state="translated">浮動小数点値 &lt;code&gt;HUGE_VAL&lt;/code&gt; は、他のどの数値よりも大きい値です。</target>
        </trans-unit>
        <trans-unit id="196211405f17ee844517a47f2e8b2cb60db3f8ce" translate="yes" xml:space="preserve">
          <source>The following &lt;em&gt;keywords&lt;/em&gt; are reserved and cannot be used as names:</source>
          <target state="translated">次の&lt;em&gt;キーワード&lt;/em&gt;は予約されており、名前として使用できません。</target>
        </trans-unit>
        <trans-unit id="ab8a72a62eca0d1ef8ee4d0f5f153c9b1519bd5d" translate="yes" xml:space="preserve">
          <source>The following example shows how the host program can do the equivalent to this Lua code:</source>
          <target state="translated">以下の例では、ホストプログラムがこのLuaコードと同等の処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="278e2855a1845e2a26526bc29fe7fac6d57babe0" translate="yes" xml:space="preserve">
          <source>The following functions were deprecated in the mathematical library: &lt;code&gt;atan2&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;frexp&lt;/code&gt;, and &lt;code&gt;ldexp&lt;/code&gt;. You can replace &lt;code&gt;math.pow(x,y)&lt;/code&gt; with &lt;code&gt;x^y&lt;/code&gt;; you can replace &lt;code&gt;math.atan2&lt;/code&gt; with &lt;code&gt;math.atan&lt;/code&gt;, which now accepts one or two parameters; you can replace &lt;code&gt;math.ldexp(x,exp)&lt;/code&gt; with &lt;code&gt;x * 2.0^exp&lt;/code&gt;. For the other operations, you can either use an external library or implement them in Lua.</source>
          <target state="translated">次の関数は、数学ライブラリで非推奨になりました： &lt;code&gt;atan2&lt;/code&gt; 、 &lt;code&gt;cosh&lt;/code&gt; 、 &lt;code&gt;sinh&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、 &lt;code&gt;pow&lt;/code&gt; 、 &lt;code&gt;frexp&lt;/code&gt; 、および &lt;code&gt;ldexp&lt;/code&gt; 。 &lt;code&gt;math.pow(x,y)&lt;/code&gt; を &lt;code&gt;x^y&lt;/code&gt; 置き換えることができます。 &lt;code&gt;math.atan2&lt;/code&gt; を &lt;code&gt;math.atan&lt;/code&gt; に置き換えることができます。math.atanは1つまたは2つのパラメーターを受け入れます。 &lt;code&gt;math.ldexp(x,exp)&lt;/code&gt; を &lt;code&gt;x * 2.0^exp&lt;/code&gt; 置き換えることができます。その他の操作については、外部ライブラリを使用するか、Luaに実装できます。</target>
        </trans-unit>
        <trans-unit id="525a807668897271f1a9b9de59f3fdf8f64551a7" translate="yes" xml:space="preserve">
          <source>The following strings denote other tokens:</source>
          <target state="translated">以下の文字列は他のトークンを表します。</target>
        </trans-unit>
        <trans-unit id="ba13fb8d8389b33ab088d4fc65f5ec35b8d33e18" translate="yes" xml:space="preserve">
          <source>The following syntactic sugar simplifies function definitions:</source>
          <target state="translated">以下の構文糖は、関数の定義を簡略化します。</target>
        </trans-unit>
        <trans-unit id="af2cb037b897b34b24d5a23238cf877011ea082c" translate="yes" xml:space="preserve">
          <source>The form</source>
          <target state="translated">フォーム</target>
        </trans-unit>
        <trans-unit id="7a0c21abdce99c6d3820ba447237185fd89bfedf" translate="yes" xml:space="preserve">
          <source>The formats &quot;&lt;code&gt;l&lt;/code&gt;&quot; and &quot;&lt;code&gt;L&lt;/code&gt;&quot; should be used only for text files.</source>
          <target state="translated">「 &lt;code&gt;l&lt;/code&gt; 」および「 &lt;code&gt;L&lt;/code&gt; 」の形式は、テキストファイルにのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="dd4c785119c8c33799dde8b20447ed83f6ee2b11" translate="yes" xml:space="preserve">
          <source>The fourth line is a string that, in a path in Windows, is replaced by the executable's directory. Default is '&lt;code&gt;!&lt;/code&gt;'.</source>
          <target state="translated">4行目は、Windowsのパスで実行可能ファイルのディレクトリに置き換えられる文字列です。デフォルトは ' &lt;code&gt;!&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="c4934c1b60689ce3f2c3bcb8e146450b0295d47d" translate="yes" xml:space="preserve">
          <source>The fourth searcher tries an &lt;em&gt;all-in-one loader&lt;/em&gt;. It searches the C path for a library for the root name of the given module. For instance, when requiring &lt;code&gt;a.b.c&lt;/code&gt;, it will search for a C library for &lt;code&gt;a&lt;/code&gt;. If found, it looks into it for an open function for the submodule; in our example, that would be &lt;code&gt;luaopen_a_b_c&lt;/code&gt;. With this facility, a package can pack several C submodules into one single library, with each submodule keeping its original open function.</source>
          <target state="translated">4番目のサーチャーは、&lt;em&gt;オールインワンローダーを&lt;/em&gt;試します。指定されたモジュールのルート名のライブラリのCパスを検索します。必要なとき例えば、 &lt;code&gt;a.b.c&lt;/code&gt; 、それがためにCライブラリを検索します。見つかった場合は、サブモジュールのオープン関数を探します。この例では、 &lt;code&gt;luaopen_a_b_c&lt;/code&gt; になります。この機能を使用すると、パッケージは複数のCサブモジュールを1つの単一ライブラリにパックでき、各サブモジュールは元のオープン関数を維持します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0b073a91442e0e0571f6fed07833298243fbd91c" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; has an extra parameter. This out parameter returns the number of values on the top of the stack that were yielded or returned by the coroutine. (In previous versions, those values were the entire stack.)</source>
          <target state="translated">The function &lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt; has an extra parameter. This out parameter returns the number of values on the top of the stack that were yielded or returned by the coroutine. (In previous versions, those values were the entire stack.)</target>
        </trans-unit>
        <trans-unit id="3c583d7e5932250cb3b5f290df0a3aa69c7e5671" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#lua_version&quot;&gt;&lt;code&gt;lua_version&lt;/code&gt;&lt;/a&gt; returns the version number, instead of an address of the version number. The Lua core should work correctly with libraries using their own static copies of the same core, so there is no need to check whether they are using the same address space.</source>
          <target state="translated">The function &lt;a href=&quot;#lua_version&quot;&gt; &lt;code&gt;lua_version&lt;/code&gt; &lt;/a&gt; returns the version number, instead of an address of the version number. The Lua core should work correctly with libraries using their own static copies of the same core, so there is no need to check whether they are using the same address space.</target>
        </trans-unit>
        <trans-unit id="b3e053a7fc1423644f26201e21114115843c06a5" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#pdf-io.lines&quot;&gt;&lt;code&gt;io.lines&lt;/code&gt;&lt;/a&gt; now returns four values, instead of just one. That can be a problem when it is used as the sole argument to another function that has optional parameters, such as in &lt;code&gt;load(io.lines(filename, &quot;L&quot;))&lt;/code&gt;. To fix that issue, you can wrap the call into parentheses, to adjust its number of results to one.</source>
          <target state="translated">The function &lt;a href=&quot;#pdf-io.lines&quot;&gt; &lt;code&gt;io.lines&lt;/code&gt; &lt;/a&gt; now returns four values, instead of just one. That can be a problem when it is used as the sole argument to another function that has optional parameters, such as in &lt;code&gt;load(io.lines(filename, &quot;L&quot;))&lt;/code&gt; . To fix that issue, you can wrap the call into parentheses, to adjust its number of results to one.</target>
        </trans-unit>
        <trans-unit id="ecc8b5fcb7191e1242fe3f17f70a609a4340afa3" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#pdf-print&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; does not call &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt; to format its arguments; instead, it has this functionality hardwired. You should use &lt;code&gt;__tostring&lt;/code&gt; to modify how values are printed.</source>
          <target state="translated">The function &lt;a href=&quot;#pdf-print&quot;&gt; &lt;code&gt;print&lt;/code&gt; &lt;/a&gt; does not call &lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt; to format its arguments; instead, it has this functionality hardwired. You should use &lt;code&gt;__tostring&lt;/code&gt; to modify how values are printed.</target>
        </trans-unit>
        <trans-unit id="0263ab6ca26086df9c4e35bef1b518910d2dc151" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#pdf-string.gsub&quot;&gt;&lt;code&gt;string.gsub&lt;/code&gt;&lt;/a&gt; and the iterator &lt;a href=&quot;#pdf-string.gmatch&quot;&gt;&lt;code&gt;string.gmatch&lt;/code&gt;&lt;/a&gt; match multiple occurrences of the given pattern in the subject. For these functions, a new match is considered valid only if it ends at least one byte after the end of the previous match. In other words, the pattern machine never accepts the empty string as a match immediately after another match. As an example, consider the results of the following code:</source>
          <target state="translated">The function &lt;a href=&quot;#pdf-string.gsub&quot;&gt; &lt;code&gt;string.gsub&lt;/code&gt; &lt;/a&gt; and the iterator &lt;a href=&quot;#pdf-string.gmatch&quot;&gt; &lt;code&gt;string.gmatch&lt;/code&gt; &lt;/a&gt; match multiple occurrences of the given pattern in the subject. For these functions, a new match is considered valid only if it ends at least one byte after the end of the previous match. In other words, the pattern machine never accepts the empty string as a match immediately after another match. As an example, consider the results of the following code:</target>
        </trans-unit>
        <trans-unit id="14ef273b64fc52356a4906b3e7d6eabe19ee71ea" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;print&lt;/code&gt; is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use &lt;a href=&quot;#pdf-string.format&quot;&gt;&lt;code&gt;string.format&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-io.write&quot;&gt;&lt;code&gt;io.write&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The function &lt;code&gt;print&lt;/code&gt; is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use &lt;a href=&quot;#pdf-string.format&quot;&gt; &lt;code&gt;string.format&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#pdf-io.write&quot;&gt; &lt;code&gt;io.write&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="220aaa9b01b5620d0798784b861e1408f8a717e8" translate="yes" xml:space="preserve">
          <source>The function returns the address of the block of memory. Lua ensures that this address is valid as long as the corresponding userdata is alive (see &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;). Moreover, if the userdata is marked for finalization (see &lt;a href=&quot;#2.5.3&quot;&gt;&amp;sect;2.5.3&lt;/a&gt;), its address is valid at least until the call to its finalizer.</source>
          <target state="translated">The function returns the address of the block of memory. Lua ensures that this address is valid as long as the corresponding userdata is alive (see &lt;a href=&quot;#2.5&quot;&gt;&amp;sect;2.5&lt;/a&gt;). Moreover, if the userdata is marked for finalization (see &lt;a href=&quot;#2.5.3&quot;&gt;&amp;sect;2.5.3&lt;/a&gt;), its address is valid at least until the call to its finalizer.</target>
        </trans-unit>
        <trans-unit id="cc98f5bacbd5d5c9b5f87b48eedc41b8165ed273" translate="yes" xml:space="preserve">
          <source>The garbage collector (GC) in Lua can work in two modes: incremental and generational.</source>
          <target state="translated">Luaのガベージコレクタ(GC)には、インクリメンタルとジェネレーショナルの2つのモードがあります。</target>
        </trans-unit>
        <trans-unit id="f3fbd703ec3951b9eef95d2b7d4e3956a139b1f1" translate="yes" xml:space="preserve">
          <source>The garbage-collector pause controls how long the collector waits before starting a new cycle. Larger values make the collector less aggressive. Values smaller than 100 mean the collector will not wait to start a new cycle. A value of 200 means that the collector waits for the total memory in use to double before starting a new cycle.</source>
          <target state="translated">ガベージコレクタの一時停止は、新しいサイクルを開始する前にコレクタが待機する時間を制御します。値が大きいほど、コレクタはあまり積極的ではありません。100 より小さい値は、コレクタが新しいサイクルを開始するまで待たないことを意味します。200 の値は、新しいサイクルを開始する前に使用中のメモリの合計が 2 倍になるまでコレクタが待機することを意味します。</target>
        </trans-unit>
        <trans-unit id="9930e7ac93649b09106490695fbc0f2072543bb0" translate="yes" xml:space="preserve">
          <source>The garbage-collector pause controls how long the collector waits before starting a new cycle. The collector starts a new cycle when the use of memory hits &lt;em&gt;n%&lt;/em&gt; of the use after the previous collection. Larger values make the collector less aggressive. Values equal to or less than 100 mean the collector will not wait to start a new cycle. A value of 200 means that the collector waits for the total memory in use to double before starting a new cycle. The default value is 200; the maximum value is 1000.</source>
          <target state="translated">The garbage-collector pause controls how long the collector waits before starting a new cycle. The collector starts a new cycle when the use of memory hits &lt;em&gt;n%&lt;/em&gt; of the use after the previous collection. Larger values make the collector less aggressive. Values equal to or less than 100 mean the collector will not wait to start a new cycle. A value of 200 means that the collector waits for the total memory in use to double before starting a new cycle. The default value is 200; the maximum value is 1000.</target>
        </trans-unit>
        <trans-unit id="3da0189eddd3acd188369ff8e9890d24f44cba07" translate="yes" xml:space="preserve">
          <source>The garbage-collector step multiplier controls the relative speed of the collector relative to memory allocation. Larger values make the collector more aggressive but also increase the size of each incremental step. You should not use values smaller than 100, because they make the collector too slow and can result in the collector never finishing a cycle. The default is 200, which means that the collector runs at &quot;twice&quot; the speed of memory allocation.</source>
          <target state="translated">ガベージコレクタのステップ乗数は、メモリ割り当てに対するコレクタの相対的な速度を制御します。値を大きくすると、コレクタはより積極的になりますが、各インクリメンタルステップのサイズも大きくなります。100 より小さい値は使用しないでください。これは、コレクタの速度が遅くなりすぎて、コレクタが 1 サイクルを終了しなくなる可能性があるからです。デフォルトは 200 です。これは、コレクタがメモリ割り当ての「2 倍」の速度で実行されることを意味します。</target>
        </trans-unit>
        <trans-unit id="edd02666b7bd31dec27098654c590c3963c3039b" translate="yes" xml:space="preserve">
          <source>The garbage-collector step multiplier controls the speed of the collector relative to memory allocation, that is, how many elements it marks or sweeps for each kilobyte of memory allocated. Larger values make the collector more aggressive but also increase the size of each incremental step. You should not use values less than 100, because they make the collector too slow and can result in the collector never finishing a cycle. The default value is 100; the maximum value is 1000.</source>
          <target state="translated">ガベージコレクタのステップ乗算器は、メモリ割り当てに対するコレクタの速度を制御します。値を大きくすると、コレクタはより積極的になりますが、各インクリメンタルステップのサイズも大きくなります。100 未満の値を使用してはいけません。100 未満の値を使用すると、コレクタの動作が遅くなり、コレクタが 1 サイクルを終了しなくなる可能性があるからです。デフォルト値は 100 で、最大値は 1000 です。</target>
        </trans-unit>
        <trans-unit id="e9a660cf022dffa05c59d7259e6adabb7cdd6f67" translate="yes" xml:space="preserve">
          <source>The garbage-collector step size controls the size of each incremental step, specifically how many bytes the interpreter allocates before performing a step. This parameter is logarithmic: A value of &lt;em&gt;n&lt;/em&gt; means the interpreter will allocate &lt;em&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; bytes between steps and perform equivalent work during the step. A large value (e.g., 60) makes the collector a stop-the-world (non-incremental) collector. The default value is 13, which means steps of approximately 8 Kbytes.</source>
          <target state="translated">The garbage-collector step size controls the size of each incremental step, specifically how many bytes the interpreter allocates before performing a step. This parameter is logarithmic: A value of &lt;em&gt;n&lt;/em&gt; means the interpreter will allocate &lt;em&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; bytes between steps and perform equivalent work during the step. A large value (e.g., 60) makes the collector a stop-the-world (non-incremental) collector. The default value is 13, which means steps of approximately 8 Kbytes.</target>
        </trans-unit>
        <trans-unit id="9dc362bec1b0383d76bda32165a279742df9516d" translate="yes" xml:space="preserve">
          <source>The generational mode for the garbage collector was removed. (It was an experimental feature in Lua 5.2.)</source>
          <target state="translated">ガベージコレクタの世代モードが削除されました。(Lua 5.2では実験的な機能でした)</target>
        </trans-unit>
        <trans-unit id="d89e31ab18c670e311841a5e28477ef95d2189d8" translate="yes" xml:space="preserve">
          <source>The generic &lt;b&gt;for&lt;/b&gt; loop</source>
          <target state="translated">The generic &lt;b&gt;for&lt;/b&gt; loop</target>
        </trans-unit>
        <trans-unit id="3906554899c83e568ddf64f2f5b8f01161ffbe7d" translate="yes" xml:space="preserve">
          <source>The generic &lt;b&gt;for&lt;/b&gt; statement works over functions, called &lt;em&gt;iterators&lt;/em&gt;. On each iteration, the iterator function is called to produce a new value, stopping when this new value is &lt;b&gt;nil&lt;/b&gt;. The generic &lt;b&gt;for&lt;/b&gt; loop has the following syntax:</source>
          <target state="translated">総称&lt;b&gt;for&lt;/b&gt;ステートメントは、&lt;em&gt;イテレーター&lt;/em&gt;と呼ばれる関数に対して機能し&lt;em&gt;ます&lt;/em&gt;。各反復で、反復子関数が呼び出されて新しい値が生成され、この新しい値が&lt;b&gt;nilになる&lt;/b&gt;と停止します。一般的な&lt;b&gt;for&lt;/b&gt;ループの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="856007e1c22ba68bdc34a47c09a357751a2f6c62" translate="yes" xml:space="preserve">
          <source>The given identifier (Name) defines the control variable, which is a new variable local to the loop body (&lt;em&gt;block&lt;/em&gt;).</source>
          <target state="translated">The given identifier (Name) defines the control variable, which is a new variable local to the loop body (&lt;em&gt;block&lt;/em&gt;).</target>
        </trans-unit>
        <trans-unit id="dd954aa3fd6697b79eaabbdef5d75d8c6c7ba3dc" translate="yes" xml:space="preserve">
          <source>The grammar could see it in two ways:</source>
          <target state="translated">文法は2つの方法で見ることができました。</target>
        </trans-unit>
        <trans-unit id="65c328f00080b0011f18aa3b0ed9224892f98cda" translate="yes" xml:space="preserve">
          <source>The grammar could see this fragment in two ways:</source>
          <target state="translated">文法はこの断片を二つの方法で見ることができました。</target>
        </trans-unit>
        <trans-unit id="4a4c9ed6f872e82764d4027ec65c0b5bc05fccbd" translate="yes" xml:space="preserve">
          <source>The indexing of tables follows the definition of raw equality in the language. The expressions &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;a[j]&lt;/code&gt; denote the same table element if and only if &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are raw equal (that is, equal without metamethods). In particular, floats with integral values are equal to their respective integers (e.g., &lt;code&gt;1.0 == 1&lt;/code&gt;). To avoid ambiguities, any float used as a key that is equal to an integer is converted to that integer. For instance, if you write &lt;code&gt;a[2.0] = true&lt;/code&gt;, the actual key inserted into the table will be the integer &lt;code&gt;2&lt;/code&gt;.</source>
          <target state="translated">The indexing of tables follows the definition of raw equality in the language. The expressions &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;a[j]&lt;/code&gt; denote the same table element if and only if &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are raw equal (that is, equal without metamethods). In particular, floats with integral values are equal to their respective integers (e.g., &lt;code&gt;1.0 == 1&lt;/code&gt; ). To avoid ambiguities, any float used as a key that is equal to an integer is converted to that integer. For instance, if you write &lt;code&gt;a[2.0] = true&lt;/code&gt; , the actual key inserted into the table will be the integer &lt;code&gt;2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c16256befb5f873dad0793713187bd7e83a270f1" translate="yes" xml:space="preserve">
          <source>The indexing of tables follows the definition of raw equality in the language. The expressions &lt;code&gt;a[i]&lt;/code&gt; and &lt;code&gt;a[j]&lt;/code&gt; denote the same table element if and only if &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; are raw equal (that is, equal without metamethods). In particular, floats with integral values are equal to their respective integers (e.g., &lt;code&gt;1.0 == 1&lt;/code&gt;). To avoid ambiguities, any float with integral value used as a key is converted to its respective integer. For instance, if you write &lt;code&gt;a[2.0] = true&lt;/code&gt;, the actual key inserted into the table will be the integer &lt;code&gt;2&lt;/code&gt;. (On the other hand, 2 and &quot;&lt;code&gt;2&lt;/code&gt;&quot; are different Lua values and therefore denote different table entries.)</source>
          <target state="translated">テーブルのインデックス付けは、言語における生の平等の定義に従います。式 &lt;code&gt;a[i]&lt;/code&gt; と &lt;code&gt;a[j]&lt;/code&gt; は、 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; がrawで等しい（つまり、メタメソッドなしで等しい）場合に限り、同じテーブル要素を示します。特に、整数値を持つ浮動小数点数は、それぞれの整数に等しくなります（たとえば、 &lt;code&gt;1.0 == 1&lt;/code&gt; ）。あいまいさを避けるために、キーとして使用される整数値を持つフロートは、それぞれの整数に変換されます。たとえば、 &lt;code&gt;a[2.0] = true&lt;/code&gt; と記述した場合、テーブルに挿入される実際のキーは整数 &lt;code&gt;2&lt;/code&gt; になります。 （一方、2と &quot; &lt;code&gt;2&lt;/code&gt; &quot;は異なるLua値であるため、異なるテーブルエントリを示します。）</target>
        </trans-unit>
        <trans-unit id="63673ee512e5ce79f47a34ae0e3f5ac37fa01bb2" translate="yes" xml:space="preserve">
          <source>The integer keys in the registry are used by the reference mechanism (see &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;) and by some predefined values. Therefore, integer keys in the registry must not be used for other purposes.</source>
          <target state="translated">The integer keys in the registry are used by the reference mechanism (see &lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; &lt;/a&gt;) and by some predefined values. Therefore, integer keys in the registry must not be used for other purposes.</target>
        </trans-unit>
        <trans-unit id="7b21a8105ceb5ba09152263fc96b9536c63b0161" translate="yes" xml:space="preserve">
          <source>The integer keys in the registry are used by the reference mechanism (see &lt;a href=&quot;#luaL_ref&quot;&gt;&lt;code&gt;luaL_ref&lt;/code&gt;&lt;/a&gt;) and by some predefined values. Therefore, integer keys must not be used for other purposes.</source>
          <target state="translated">レジストリ内の整数キーは、参照メカニズム（&lt;a href=&quot;#luaL_ref&quot;&gt; &lt;code&gt;luaL_ref&lt;/code&gt; を&lt;/a&gt;参照）およびいくつかの事前定義された値によって使用されます。したがって、整数キーを他の目的に使用することはできません。</target>
        </trans-unit>
        <trans-unit id="9e586180c1379ce5751eba407cc18f08a9cdeaf0" translate="yes" xml:space="preserve">
          <source>The interaction between ranges and classes is not defined. Therefore, patterns like &lt;code&gt;[%a-z]&lt;/code&gt; or &lt;code&gt;[a-%%]&lt;/code&gt; have no meaning.</source>
          <target state="translated">範囲とクラス間の相互作用は定義されていません。したがって、 &lt;code&gt;[%a-z]&lt;/code&gt; や &lt;code&gt;[a-%%]&lt;/code&gt; のようなパターンは意味がありません。</target>
        </trans-unit>
        <trans-unit id="6dede3b6c4c93cdc9b3511ce20065bb16da883ae" translate="yes" xml:space="preserve">
          <source>The key for each event in a metatable is a string with the event name prefixed by two underscores; the corresponding value is called a &lt;em&gt;metavalue&lt;/em&gt;. For most events, the metavalue must be a function, which is then called a &lt;em&gt;metamethod&lt;/em&gt;. In the previous example, the key is the string &quot;&lt;code&gt;__add&lt;/code&gt;&quot; and the metamethod is the function that performs the addition. Unless stated otherwise, a metamethod may in fact be any callable value, which is either a function or a value with a &lt;code&gt;__call&lt;/code&gt; metamethod.</source>
          <target state="translated">The key for each event in a metatable is a string with the event name prefixed by two underscores; the corresponding value is called a &lt;em&gt;metavalue&lt;/em&gt;. For most events, the metavalue must be a function, which is then called a &lt;em&gt;metamethod&lt;/em&gt;. In the previous example, the key is the string &quot; &lt;code&gt;__add&lt;/code&gt; &quot; and the metamethod is the function that performs the addition. Unless stated otherwise, a metamethod may in fact be any callable value, which is either a function or a value with a &lt;code&gt;__call&lt;/code&gt; metamethod.</target>
        </trans-unit>
        <trans-unit id="f2c90b056889f7693fbb491e97825cdc7458b557" translate="yes" xml:space="preserve">
          <source>The key for each event in a metatable is a string with the event name prefixed by two underscores; the corresponding values are called &lt;em&gt;metamethods&lt;/em&gt;. In the previous example, the key is &quot;&lt;code&gt;__add&lt;/code&gt;&quot; and the metamethod is the function that performs the addition.</source>
          <target state="translated">メタテーブル内の各イベントのキーは、イベント名の前に2つのアンダースコアを付けた文字列です。対応する値は&lt;em&gt;メタメソッド&lt;/em&gt;と呼ばれます。前の例では、キーは「 &lt;code&gt;__add&lt;/code&gt; 」であり、メタメソッドは加算を実行する関数です。</target>
        </trans-unit>
        <trans-unit id="a1e3c58922162233ff6ef255d5df925e8da6f663" translate="yes" xml:space="preserve">
          <source>The length of a string is its number of bytes (that is, the usual meaning of string length when each character is one byte).</source>
          <target state="translated">文字列の長さは、そのバイト数(つまり、1文字が1バイトのときの文字列の長さの通常の意味)です。</target>
        </trans-unit>
        <trans-unit id="d1dc4024a9680b5759a0dab678db12d3202b04ba" translate="yes" xml:space="preserve">
          <source>The length of a string is its number of bytes. (That is the usual meaning of string length when each character is one byte.)</source>
          <target state="translated">文字列の長さは、そのバイト数です。(これは、各文字が1バイトである場合の文字列の長さの通常の意味です)。</target>
        </trans-unit>
        <trans-unit id="01dac97eea86a239bf3254b898850f4681c59248" translate="yes" xml:space="preserve">
          <source>The length operator applied on a table returns a border in that table. A &lt;em&gt;border&lt;/em&gt; in a table &lt;code&gt;t&lt;/code&gt; is any natural number that satisfies the following condition:</source>
          <target state="translated">テーブルに適用された長さ演算子は、そのテーブルの境界線を返します。&lt;em&gt;ボーダー&lt;/em&gt;テーブルで &lt;code&gt;t&lt;/code&gt; は以下の条件を満たすことを任意の自然数です。</target>
        </trans-unit>
        <trans-unit id="3a0004633e5acb8c29842421799433ea833432d7" translate="yes" xml:space="preserve">
          <source>The length operator is denoted by the unary prefix operator &lt;code&gt;#&lt;/code&gt;.</source>
          <target state="translated">長さ演算子は、単項前置演算子 &lt;code&gt;#&lt;/code&gt; で示されます。</target>
        </trans-unit>
        <trans-unit id="13a462f71ac26baf154dba8703e365c0df2ac20a" translate="yes" xml:space="preserve">
          <source>The library function &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; returns a string describing the type of a given value (see &lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1&lt;/a&gt;).</source>
          <target state="translated">ライブラリ関数&lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;は、指定された値のタイプを説明する文字列を返します（&lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="5fc003c63a59472e6941a3dc3f9e6ddca58cd50e" translate="yes" xml:space="preserve">
          <source>The library function &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; returns a string describing the type of a given value (see &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">The library function &lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt; returns a string describing the type of a given value (see &lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="6144a62a4a0e6d0612f6eb91c540d8aa8bcf7d08" translate="yes" xml:space="preserve">
          <source>The logical operators in Lua are &lt;b&gt;and&lt;/b&gt;, &lt;b&gt;or&lt;/b&gt;, and &lt;b&gt;not&lt;/b&gt;. Like the control structures (see &lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4&lt;/a&gt;), all logical operators consider both &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;nil&lt;/b&gt; as false and anything else as true.</source>
          <target state="translated">Luaの論理演算子は&lt;b&gt;and&lt;/b&gt;、&lt;b&gt;or&lt;/b&gt;、&lt;b&gt;not&lt;/b&gt;です。制御構造（&lt;a href=&quot;#3.3.4&quot;&gt;&amp;sect;3.3.4を&lt;/a&gt;参照）と同様に、すべての論理演算子は&lt;b&gt;false&lt;/b&gt;と&lt;b&gt;nilの&lt;/b&gt;両方を&lt;b&gt;false&lt;/b&gt;と見なし、その他はすべて&lt;b&gt;true&lt;/b&gt;と見なします。</target>
        </trans-unit>
        <trans-unit id="50f9701ab78d887f6625cde402aefbda0aeac6cc" translate="yes" xml:space="preserve">
          <source>The loop creates ten closures (that is, ten instances of the anonymous function). Each of these closures uses a different &lt;code&gt;y&lt;/code&gt; variable, while all of them share the same &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">ループは10個のクロージャー（つまり、無名関数の10個のインスタンス）を作成します。これらのクロージャーはそれぞれ異なる &lt;code&gt;y&lt;/code&gt; 変数を使用しますが、それらはすべて同じ &lt;code&gt;x&lt;/code&gt; を共有します。</target>
        </trans-unit>
        <trans-unit id="f1f770e06bb0b2e653c2173ac5aacca6b0af5ebd" translate="yes" xml:space="preserve">
          <source>The loop starts by evaluating &lt;em&gt;explist&lt;/em&gt; to produce four values: an &lt;em&gt;iterator function&lt;/em&gt;, a &lt;em&gt;state&lt;/em&gt;, an initial value for the control variable, and a &lt;em&gt;closing value&lt;/em&gt;.</source>
          <target state="translated">The loop starts by evaluating &lt;em&gt;explist&lt;/em&gt; to produce four values: an &lt;em&gt;iterator function&lt;/em&gt;, a &lt;em&gt;state&lt;/em&gt;, an initial value for the control variable, and a &lt;em&gt;closing value&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="6a3ff1f0aa94e8024327de7dc633ad7a75222d95" translate="yes" xml:space="preserve">
          <source>The loop starts by evaluating once the three control expressions. Their values are called respectively the &lt;em&gt;initial value&lt;/em&gt;, the &lt;em&gt;limit&lt;/em&gt;, and the &lt;em&gt;step&lt;/em&gt;. If the step is absent, it defaults to 1.</source>
          <target state="translated">The loop starts by evaluating once the three control expressions. Their values are called respectively the &lt;em&gt;initial value&lt;/em&gt;, the &lt;em&gt;limit&lt;/em&gt;, and the &lt;em&gt;step&lt;/em&gt;. If the step is absent, it defaults to 1.</target>
        </trans-unit>
        <trans-unit id="4fdc614cc4ad6f49d0283a9ba3115c9056932e8c" translate="yes" xml:space="preserve">
          <source>The loop variable &lt;code&gt;v&lt;/code&gt; is local to the loop body. If you need its value after the loop, assign it to another variable before exiting the loop.</source>
          <target state="translated">ループ変数 &lt;code&gt;v&lt;/code&gt; はループ本体に対してローカルです。ループ後に値が必要な場合は、ループを終了する前に別の変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="939c85d0694beae03ef42c252fc95eeaad38dd40" translate="yes" xml:space="preserve">
          <source>The loop variables &lt;code&gt;&lt;em&gt;var_i&lt;/em&gt;&lt;/code&gt; are local to the loop; you cannot use their values after the &lt;b&gt;for&lt;/b&gt; ends. If you need these values, then assign them to other variables before breaking or exiting the loop.</source>
          <target state="translated">ループ変数 &lt;code&gt;&lt;em&gt;var_i&lt;/em&gt;&lt;/code&gt; はループに対してローカルです。&lt;b&gt;for&lt;/b&gt;終了後にそれらの値を使用することはできません。これらの値が必要な場合は、ループを中断または終了する前に、それらの値を他の変数に割り当てます。</target>
        </trans-unit>
        <trans-unit id="b244dd1c7e2205379de1905e2e723510ea200bac" translate="yes" xml:space="preserve">
          <source>The main difference between Lua 5.2 and Lua 5.3 is the introduction of an integer subtype for numbers. Although this change should not affect &quot;normal&quot; computations, some computations (mainly those that involve some kind of overflow) can give different results.</source>
          <target state="translated">Lua 5.2 と Lua 5.3 の主な違いは、整数型のサブタイプが導入されたことです。この変更は &quot;通常の &quot;計算には影響しませんが、一部の計算(主にオーバーフローを伴う計算)では、異なる結果が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3024413e5d3167e329701cbe9f0df4ab1bc0ec8a" translate="yes" xml:space="preserve">
          <source>The major multiplier controls the frequency of major collections. For a major multiplier &lt;em&gt;x&lt;/em&gt;, a new major collection will be done when memory grows &lt;em&gt;x%&lt;/em&gt; larger than the memory in use after the previous major collection. For instance, for a multiplier of 100, the collector will do a major collection when the use of memory gets larger than twice the use after the previous collection. The default value is 100; the maximum value is 1000.</source>
          <target state="translated">The major multiplier controls the frequency of major collections. For a major multiplier &lt;em&gt;x&lt;/em&gt;, a new major collection will be done when memory grows &lt;em&gt;x%&lt;/em&gt; larger than the memory in use after the previous major collection. For instance, for a multiplier of 100, the collector will do a major collection when the use of memory gets larger than twice the use after the previous collection. The default value is 100; the maximum value is 1000.</target>
        </trans-unit>
        <trans-unit id="fc3afb9da0c5e976f755e7c1da0bc9514acc6c24" translate="yes" xml:space="preserve">
          <source>The maximum value for &lt;code&gt;n&lt;/code&gt; is 255.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; の最大値は255です。</target>
        </trans-unit>
        <trans-unit id="ffedb8611bd2219ed1341ed93dfa610c03d14160" translate="yes" xml:space="preserve">
          <source>The meaning of accesses to table fields can be changed via metatables (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">The meaning of accesses to table fields can be changed via metatables (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="ab795f1f93d86887860588306bf3a809576817cd" translate="yes" xml:space="preserve">
          <source>The meaning of accesses to table fields can be changed via metatables. An access to an indexed variable &lt;code&gt;t[i]&lt;/code&gt; is equivalent to a call &lt;code&gt;gettable_event(t,i)&lt;/code&gt;. (See &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt; for a complete description of the &lt;code&gt;gettable_event&lt;/code&gt; function. This function is not defined or callable in Lua. We use it here only for explanatory purposes.)</source>
          <target state="translated">テーブルフィールドへのアクセスの意味は、メタテーブルを介して変更できます。インデックス付き変数 &lt;code&gt;t[i]&lt;/code&gt; へのアクセスは、 &lt;code&gt;gettable_event(t,i)&lt;/code&gt; 呼び出しと同等です。 （参照&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;の完全な説明については &lt;code&gt;gettable_event&lt;/code&gt; 機能。この関数はLuaの中で定義されたり呼び出すことはできません。我々は唯一の説明のためにそれを使用しています。）</target>
        </trans-unit>
        <trans-unit id="51f3fb78699ea2b9989d6abd1980c0cbe4cf6630" translate="yes" xml:space="preserve">
          <source>The meaning of assignments to global variables and table fields can be changed via metatables. An assignment to an indexed variable &lt;code&gt;t[i] = val&lt;/code&gt; is equivalent to &lt;code&gt;settable_event(t,i,val)&lt;/code&gt;. (See &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt; for a complete description of the &lt;code&gt;settable_event&lt;/code&gt; function. This function is not defined or callable in Lua. We use it here only for explanatory purposes.)</source>
          <target state="translated">グローバル変数およびテーブルフィールドへの割り当ての意味は、メタテーブルを介して変更できます。インデックス付き変数 &lt;code&gt;t[i] = val&lt;/code&gt; への代入は、 &lt;code&gt;settable_event(t,i,val)&lt;/code&gt; と同等です。 （ &lt;code&gt;settable_event&lt;/code&gt; 関数の詳細については、&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;を参照してください。この関数はLuaで定義または呼び出し可能ではありません。ここでは、説明の目的でのみ使用しています。）</target>
        </trans-unit>
        <trans-unit id="9a2953cd0234cc021c9ceb35ae45458389e231cf" translate="yes" xml:space="preserve">
          <source>The meaning of assignments to table fields and global variables (which are actually table fields, too) can be changed via metatables (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">The meaning of assignments to table fields and global variables (which are actually table fields, too) can be changed via metatables (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="476f7f8ec4dc606dda756c2c57f4d79d5157eb87" translate="yes" xml:space="preserve">
          <source>The metatable for file handles provides metamethods for &lt;code&gt;__gc&lt;/code&gt; and &lt;code&gt;__close&lt;/code&gt; that try to close the file when called.</source>
          <target state="translated">The metatable for file handles provides metamethods for &lt;code&gt;__gc&lt;/code&gt; and &lt;code&gt;__close&lt;/code&gt; that try to close the file when called.</target>
        </trans-unit>
        <trans-unit id="a517aff7a09be0502b296b4a746e4f103b62d5ad" translate="yes" xml:space="preserve">
          <source>The metavalue for this event can be either a function, a table, or any value with an &lt;code&gt;__index&lt;/code&gt; metavalue. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, the final result is the result of indexing this metavalue with &lt;code&gt;key&lt;/code&gt;. This indexing is regular, not raw, and therefore can trigger another &lt;code&gt;__index&lt;/code&gt; metavalue.</source>
          <target state="translated">The metavalue for this event can be either a function, a table, or any value with an &lt;code&gt;__index&lt;/code&gt; metavalue. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, the final result is the result of indexing this metavalue with &lt;code&gt;key&lt;/code&gt; . This indexing is regular, not raw, and therefore can trigger another &lt;code&gt;__index&lt;/code&gt; metavalue.</target>
        </trans-unit>
        <trans-unit id="8a54b38487e5e67e3c97a44903b55794c2a39219" translate="yes" xml:space="preserve">
          <source>The minor multiplier controls the frequency of minor collections. For a minor multiplier &lt;em&gt;x&lt;/em&gt;, a new minor collection will be done when memory grows &lt;em&gt;x%&lt;/em&gt; larger than the memory in use after the previous major collection. For instance, for a multiplier of 20, the collector will do a minor collection when the use of memory gets 20% larger than the use after the previous major collection. The default value is 20; the maximum value is 200.</source>
          <target state="translated">The minor multiplier controls the frequency of minor collections. For a minor multiplier &lt;em&gt;x&lt;/em&gt;, a new minor collection will be done when memory grows &lt;em&gt;x%&lt;/em&gt; larger than the memory in use after the previous major collection. For instance, for a multiplier of 20, the collector will do a minor collection when the use of memory gets 20% larger than the use after the previous major collection. The default value is 20; the maximum value is 200.</target>
        </trans-unit>
        <trans-unit id="15199f2dd863423c43df4649876d6a87282f6752" translate="yes" xml:space="preserve">
          <source>The names &lt;em&gt;var_i&lt;/em&gt; declare loop variables local to the loop body. The first of these variables is the &lt;em&gt;control variable&lt;/em&gt;.</source>
          <target state="translated">The names &lt;em&gt;var_i&lt;/em&gt; declare loop variables local to the loop body. The first of these variables is the &lt;em&gt;control variable&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="e0fe8ffeb58ed09038372ff537610ec6335cea78" translate="yes" xml:space="preserve">
          <source>The negation operator &lt;b&gt;not&lt;/b&gt; always returns &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;true&lt;/b&gt;. The conjunction operator &lt;b&gt;and&lt;/b&gt; returns its first argument if this value is &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;nil&lt;/b&gt;; otherwise, &lt;b&gt;and&lt;/b&gt; returns its second argument. The disjunction operator &lt;b&gt;or&lt;/b&gt; returns its first argument if this value is different from &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt;; otherwise, &lt;b&gt;or&lt;/b&gt; returns its second argument. Both &lt;b&gt;and&lt;/b&gt; and &lt;b&gt;or&lt;/b&gt; use short-circuit evaluation; that is, the second operand is evaluated only if necessary. Here are some examples:</source>
          <target state="translated">否定演算子&lt;b&gt;は&lt;/b&gt;常に&lt;b&gt;false&lt;/b&gt;または&lt;b&gt;trueを&lt;/b&gt;返す&lt;b&gt;わけではありません&lt;/b&gt;。結合演算子。この値が&lt;b&gt;false&lt;/b&gt;または&lt;b&gt;nilの&lt;/b&gt;場合、最初の引数&lt;b&gt;を&lt;/b&gt;返します。それ以外の場合は、2番目の引数&lt;b&gt;を&lt;/b&gt;返します。分離演算子、&lt;b&gt;または&lt;/b&gt;この値が&lt;b&gt;nil&lt;/b&gt;および&lt;b&gt;false&lt;/b&gt;と異なる場合は最初の引数を返します。それ以外の場合、&lt;b&gt;または&lt;/b&gt; 2番目の引数を返します。&lt;b&gt;and&lt;/b&gt;および&lt;b&gt;orの&lt;/b&gt;両方&lt;b&gt;で&lt;/b&gt;短絡評価を使用します。つまり、第2オペランドは必要な場合にのみ評価されます。ここではいくつかの例を示します。&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="38ec12da384a6d35f4d20d38b437d28efd6741c1" translate="yes" xml:space="preserve">
          <source>The next example collects all pairs &lt;code&gt;key=value&lt;/code&gt; from the given string into a table:</source>
          <target state="translated">次の例では、与えられた文字列からすべてのペア &lt;code&gt;key=value&lt;/code&gt; をテーブルに収集します。</target>
        </trans-unit>
        <trans-unit id="116b01f4d99ddb42293ee136ce9aea24e5e4cfa4" translate="yes" xml:space="preserve">
          <source>The notation &lt;b&gt;fail&lt;/b&gt; means a false value representing some kind of failure. (Currently, &lt;b&gt;fail&lt;/b&gt; is equal to &lt;b&gt;nil&lt;/b&gt;, but that may change in future versions. The recommendation is to always test the success of these functions with &lt;code&gt;(not status)&lt;/code&gt;, instead of &lt;code&gt;(status == nil)&lt;/code&gt;.)</source>
          <target state="translated">The notation &lt;b&gt;fail&lt;/b&gt; means a false value representing some kind of failure. (Currently, &lt;b&gt;fail&lt;/b&gt; is equal to &lt;b&gt;nil&lt;/b&gt;, but that may change in future versions. The recommendation is to always test the success of these functions with &lt;code&gt;(not status)&lt;/code&gt; , instead of &lt;code&gt;(status == nil)&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="71396a651a41b41de0bb0db4aedd5e23034b53f6" translate="yes" xml:space="preserve">
          <source>The numerical &lt;b&gt;for&lt;/b&gt; loop</source>
          <target state="translated">The numerical &lt;b&gt;for&lt;/b&gt; loop</target>
        </trans-unit>
        <trans-unit id="b8808774c2b04bca424be7db4bdcbf672bc791b6" translate="yes" xml:space="preserve">
          <source>The numerical &lt;b&gt;for&lt;/b&gt; loop repeats a block of code while a control variable goes through an arithmetic progression. It has the following syntax:</source>
          <target state="translated">The numerical &lt;b&gt;for&lt;/b&gt; loop repeats a block of code while a control variable goes through an arithmetic progression. It has the following syntax:</target>
        </trans-unit>
        <trans-unit id="eb025962461d05ecdc613ae74134730113e392ef" translate="yes" xml:space="preserve">
          <source>The numerical &lt;b&gt;for&lt;/b&gt; loop repeats a block of code while a control variable runs through an arithmetic progression. It has the following syntax:</source>
          <target state="translated">数値&lt;b&gt;for&lt;/b&gt;ループは、制御変数が算術の進行を実行している間、コードブロックを繰り返します。構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="17ab43bf243843bc19a105d07ba039f8f3f1779b" translate="yes" xml:space="preserve">
          <source>The operator &lt;code&gt;~=&lt;/code&gt; is exactly the negation of equality (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">演算子 &lt;code&gt;~=&lt;/code&gt; は、まったく等しい（ &lt;code&gt;==&lt;/code&gt; ）の否定です。</target>
        </trans-unit>
        <trans-unit id="3db0143b2ada0fe6ef4d1b484bfc03ef679605a8" translate="yes" xml:space="preserve">
          <source>The options &quot;&lt;code&gt;setpause&lt;/code&gt;&quot; and &quot;&lt;code&gt;setstepmul&lt;/code&gt;&quot; of the function &lt;a href=&quot;#pdf-collectgarbage&quot;&gt;&lt;code&gt;collectgarbage&lt;/code&gt;&lt;/a&gt; are deprecated. You should use the new option &quot;&lt;code&gt;incremental&lt;/code&gt;&quot; to set them.</source>
          <target state="translated">The options &quot; &lt;code&gt;setpause&lt;/code&gt; &quot; and &quot; &lt;code&gt;setstepmul&lt;/code&gt; &quot; of the function &lt;a href=&quot;#pdf-collectgarbage&quot;&gt; &lt;code&gt;collectgarbage&lt;/code&gt; &lt;/a&gt; are deprecated. You should use the new option &quot; &lt;code&gt;incremental&lt;/code&gt; &quot; to set them.</target>
        </trans-unit>
        <trans-unit id="47866a087f6f3e0b29ca9d79b5ace30fa7e691fb" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;-e&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt;, and &lt;code&gt;-W&lt;/code&gt; are handled in the order they appear. For instance, an invocation like</source>
          <target state="translated">The options &lt;code&gt;-e&lt;/code&gt; , &lt;code&gt;-l&lt;/code&gt; , and &lt;code&gt;-W&lt;/code&gt; are handled in the order they appear. For instance, an invocation like</target>
        </trans-unit>
        <trans-unit id="a3cd1dd677d9388e84d76eced4474c97bac8b4fd" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;LUA_GCSETPAUSE&lt;/code&gt; and &lt;code&gt;LUA_GCSETSTEPMUL&lt;/code&gt; of the function &lt;a href=&quot;#lua_gc&quot;&gt;&lt;code&gt;lua_gc&lt;/code&gt;&lt;/a&gt; are deprecated. You should use the new option &lt;code&gt;LUA_GCINC&lt;/code&gt; to set them.</source>
          <target state="translated">The options &lt;code&gt;LUA_GCSETPAUSE&lt;/code&gt; and &lt;code&gt;LUA_GCSETSTEPMUL&lt;/code&gt; of the function &lt;a href=&quot;#lua_gc&quot;&gt; &lt;code&gt;lua_gc&lt;/code&gt; &lt;/a&gt; are deprecated. You should use the new option &lt;code&gt;LUA_GCINC&lt;/code&gt; to set them.</target>
        </trans-unit>
        <trans-unit id="dbc030680dac1e5576f7a0a32beac02271b1de9f" translate="yes" xml:space="preserve">
          <source>The options are:</source>
          <target state="translated">オプションは</target>
        </trans-unit>
        <trans-unit id="c0e99c83b2c086ff1b9d5a58745baab04d9e1b8a" translate="yes" xml:space="preserve">
          <source>The order in which the indices are enumerated is not specified, &lt;em&gt;even for numeric indices&lt;/em&gt;. (To traverse a table in numerical order, use a numerical &lt;b&gt;for&lt;/b&gt;.)</source>
          <target state="translated">&lt;em&gt;数値インデックスの&lt;/em&gt;場合&lt;em&gt;でも&lt;/em&gt;、インデックスが列挙される順序は指定されていません。（テーブルを数値順にトラバースするには、数値に&lt;b&gt;を&lt;/b&gt;使用&lt;b&gt;し&lt;/b&gt;ます。）</target>
        </trans-unit>
        <trans-unit id="30b30ff9b28bb0a62b9d5eaa0e7b9c185acec6fd" translate="yes" xml:space="preserve">
          <source>The order of the assignments in a constructor is undefined. (This order would be relevant only when there are repeated keys.)</source>
          <target state="translated">コンストラクタでの代入の順序は定義されていません。(この順序は繰り返しキーがある場合にのみ意味があります)。</target>
        </trans-unit>
        <trans-unit id="e03d986c8e2482e4650648398c1e744ca72bdc4f" translate="yes" xml:space="preserve">
          <source>The order operators work as follows. If both arguments are numbers, then they are compared according to their mathematical values (regardless of their subtypes). Otherwise, if both arguments are strings, then their values are compared according to the current locale. Otherwise, Lua tries to call the &quot;lt&quot; or the &quot;le&quot; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). A comparison &lt;code&gt;a &amp;gt; b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt; a&lt;/code&gt; and &lt;code&gt;a &amp;gt;= b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt;= a&lt;/code&gt;.</source>
          <target state="translated">順序演算子は次のように機能します。両方の引数が数値の場合、それらは（それらのサブタイプに関係なく）数値に従って比較されます。それ以外の場合で、両方の引数が文字列の場合、それらの値は現在のロケールに従って比較されます。そうでない場合、Luaは「lt」または「le」&lt;a href=&quot;#2.4&quot;&gt;メタメソッド&lt;/a&gt;を呼び出そうとします（&amp;sect;2.4を参照）。比較 &lt;code&gt;a &amp;gt; b&lt;/code&gt; に変換され &lt;code&gt;b &amp;lt; a&lt;/code&gt; と &lt;code&gt;a &amp;gt;= b&lt;/code&gt; に変換され &lt;code&gt;b &amp;lt;= a&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16d32560c1bc7362c02c6c6224e74a5d3dda3efc" translate="yes" xml:space="preserve">
          <source>The order operators work as follows. If both arguments are numbers, then they are compared according to their mathematical values, regardless of their subtypes. Otherwise, if both arguments are strings, then their values are compared according to the current locale. Otherwise, Lua tries to call the &lt;code&gt;__lt&lt;/code&gt; or the &lt;code&gt;__le&lt;/code&gt; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). A comparison &lt;code&gt;a &amp;gt; b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt; a&lt;/code&gt; and &lt;code&gt;a &amp;gt;= b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt;= a&lt;/code&gt;.</source>
          <target state="translated">The order operators work as follows. If both arguments are numbers, then they are compared according to their mathematical values, regardless of their subtypes. Otherwise, if both arguments are strings, then their values are compared according to the current locale. Otherwise, Lua tries to call the &lt;code&gt;__lt&lt;/code&gt; or the &lt;code&gt;__le&lt;/code&gt; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). A comparison &lt;code&gt;a &amp;gt; b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt; a&lt;/code&gt; and &lt;code&gt;a &amp;gt;= b&lt;/code&gt; is translated to &lt;code&gt;b &amp;lt;= a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a0cda038c86954689aa106e41f099cb177ac64c" translate="yes" xml:space="preserve">
          <source>The package library provides basic facilities for loading modules in Lua. It exports one function directly in the global environment: &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;. Everything else is exported in a table &lt;a id=&quot;pdf-package&quot;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージライブラリは、Luaでモジュールをロードするための基本的な機能を提供します。それはグローバル環境で直接1つの関数をエクスポートします：&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;。それ以外はすべてテーブル&lt;a id=&quot;pdf-package&quot;&gt; &lt;code&gt;package&lt;/code&gt; &lt;/a&gt;エクスポートされます。</target>
        </trans-unit>
        <trans-unit id="fa03a4bf443ac88c87678b3c72b93c4aa7015676" translate="yes" xml:space="preserve">
          <source>The package library provides basic facilities for loading modules in Lua. It exports one function directly in the global environment: &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;. Everything else is exported in the table &lt;a id=&quot;pdf-package&quot;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The package library provides basic facilities for loading modules in Lua. It exports one function directly in the global environment: &lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;. Everything else is exported in the table &lt;a id=&quot;pdf-package&quot;&gt; &lt;code&gt;package&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="31abba930e733e4da53e00b6f03a89251bd121d5" translate="yes" xml:space="preserve">
          <source>The panic function runs as if it were a message handler (see &lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3&lt;/a&gt;); in particular, the error object is at the top of the stack. However, there is no guarantee about stack space. To push anything on the stack, the panic function must first check the available space (see &lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2&lt;/a&gt;).</source>
          <target state="translated">パニック関数は、メッセージハンドラーのように実行されます（&lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3を&lt;/a&gt;参照）。特に、エラーオブジェクトはスタックの最上位にあります。ただし、スタックスペースに関する保証はありません。スタックに何かをプッシュするために、パニック機能は最初に利用可能なスペースをチェックする必要があります（&lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b28207f33d009ff23a6c3b0471b814b49c1801a0" translate="yes" xml:space="preserve">
          <source>The panic function runs as if it were a message handler (see &lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3&lt;/a&gt;); in particular, the error object is on the top of the stack. However, there is no guarantee about stack space. To push anything on the stack, the panic function must first check the available space (see &lt;a href=&quot;#4.1.1&quot;&gt;&amp;sect;4.1.1&lt;/a&gt;).</source>
          <target state="translated">The panic function runs as if it were a message handler (see &lt;a href=&quot;#2.3&quot;&gt;&amp;sect;2.3&lt;/a&gt;); in particular, the error object is on the top of the stack. However, there is no guarantee about stack space. To push anything on the stack, the panic function must first check the available space (see &lt;a href=&quot;#4.1.1&quot;&gt;&amp;sect;4.1.1&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="248c6c24d6328dcec1eced4a5902bd1ca25c30a6" translate="yes" xml:space="preserve">
          <source>The panic function, as its name implies, is a mechanism of last resort. Programs should avoid it. As a general rule, when a C function is called by Lua with a Lua state, it can do whatever it wants on that Lua state, as it should be already protected. However, when C code operates on other Lua states (e.g., a Lua parameter to the function, a Lua state stored in the registry, or the result of &lt;a href=&quot;#lua_newthread&quot;&gt;&lt;code&gt;lua_newthread&lt;/code&gt;&lt;/a&gt;), it should use them only in API calls that cannot raise errors.</source>
          <target state="translated">パニック機能は、その名前が示すように、最後の手段のメカニズムです。プログラムはそれを避けるべきです。原則として、C関数がLua状態でLuaによって呼び出されると、そのLua状態は保護されているはずなので、そのLua状態に対して何でも実行できます。ただし、Cコードが他のLua状態（たとえば、関数へのLuaパラメーター、レジストリに格納されているLua状態、または&lt;a href=&quot;#lua_newthread&quot;&gt; &lt;code&gt;lua_newthread&lt;/code&gt; &lt;/a&gt;の結果）で動作する場合、エラーを発生させないAPI呼び出しでのみそれらを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7cd9dea0b0f86a65a80b1cdf11372d51ac94ffd8" translate="yes" xml:space="preserve">
          <source>The panic function, as its name implies, is a mechanism of last resort. Programs should avoid it. As a general rule, when a C function is called by Lua with a Lua state, it can do whatever it wants on that Lua state, as it should be already protected. However, when C code operates on other Lua states (e.g., a Lua-state argument to the function, a Lua state stored in the registry, or the result of &lt;a href=&quot;#lua_newthread&quot;&gt;&lt;code&gt;lua_newthread&lt;/code&gt;&lt;/a&gt;), it should use them only in API calls that cannot raise errors.</source>
          <target state="translated">The panic function, as its name implies, is a mechanism of last resort. Programs should avoid it. As a general rule, when a C function is called by Lua with a Lua state, it can do whatever it wants on that Lua state, as it should be already protected. However, when C code operates on other Lua states (e.g., a Lua-state argument to the function, a Lua state stored in the registry, or the result of &lt;a href=&quot;#lua_newthread&quot;&gt; &lt;code&gt;lua_newthread&lt;/code&gt; &lt;/a&gt;), it should use them only in API calls that cannot raise errors.</target>
        </trans-unit>
        <trans-unit id="af1c6d6c99e2e0d628fe3fc7ee1c5062d171bd6d" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;f&lt;/code&gt; may also be a function. In that case, &lt;code&gt;getlocal&lt;/code&gt; returns only the name of function parameters.</source>
          <target state="translated">パラメータ &lt;code&gt;f&lt;/code&gt; は関数でもかまいません。その場合、 &lt;code&gt;getlocal&lt;/code&gt; は関数パラメーターの名前のみを返します。</target>
        </trans-unit>
        <trans-unit id="2ee0f1d943cdb63fea614a28b80243ba707db6c6" translate="yes" xml:space="preserve">
          <source>The parameter &lt;code&gt;from&lt;/code&gt; represents the coroutine that is resuming &lt;code&gt;L&lt;/code&gt;. If there is no such coroutine, this parameter can be &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; パラメータは、 &lt;code&gt;L&lt;/code&gt; を再開するコルーチンを表します。そのようなコルーチンがない場合、このパラメーターは &lt;code&gt;NULL&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="65650656d52c148c40e15fc089970d7544c3c111" translate="yes" xml:space="preserve">
          <source>The path used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to search for a C loader.</source>
          <target state="translated">Cローダーを検索するために&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;が使用するパス。</target>
        </trans-unit>
        <trans-unit id="a62c3b69148e7d0643526b28757764d931f17eab" translate="yes" xml:space="preserve">
          <source>The path used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to search for a Lua loader.</source>
          <target state="translated">Luaローダーを検索するために&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;が使用するパス。</target>
        </trans-unit>
        <trans-unit id="c5695907c31c4cdbe5adbf65f538570d9f4bbc4f" translate="yes" xml:space="preserve">
          <source>The pattern (a string, not a function) &quot;&lt;code&gt;[\0-\x7F\xC2-\xF4][\x80-\xBF]*&lt;/code&gt;&quot; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;), which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.</source>
          <target state="translated">パターン（関数ではなく文字列） &quot; &lt;code&gt;[\0-\x7F\xC2-\xF4][\x80-\xBF]*&lt;/code&gt; &quot;（&lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1を&lt;/a&gt;参照）、これはちょうど1つのUTF-8バイトシーケンスに一致します。件名が有効なUTF-8文字列であると仮定します。</target>
        </trans-unit>
        <trans-unit id="44576e42d538a0d4f15232ab1f12c35467c5f2ae" translate="yes" xml:space="preserve">
          <source>The pattern (a string, not a function) &quot;&lt;code&gt;[\0-\x7F\xC2-\xFD][\x80-\xBF]*&lt;/code&gt;&quot; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;), which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.</source>
          <target state="translated">The pattern (a string, not a function) &quot; &lt;code&gt;[\0-\x7F\xC2-\xFD][\x80-\xBF]*&lt;/code&gt; &quot; (see &lt;a href=&quot;#6.4.1&quot;&gt;&amp;sect;6.4.1&lt;/a&gt;), which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.</target>
        </trans-unit>
        <trans-unit id="87cd937e99e46145262ab909bbf52a9d51f4acf0" translate="yes" xml:space="preserve">
          <source>The pseudo-random number generator used by the function &lt;a href=&quot;#pdf-math.random&quot;&gt;&lt;code&gt;math.random&lt;/code&gt;&lt;/a&gt; now starts with a somewhat random seed. Moreover, it uses a different algorithm.</source>
          <target state="translated">The pseudo-random number generator used by the function &lt;a href=&quot;#pdf-math.random&quot;&gt; &lt;code&gt;math.random&lt;/code&gt; &lt;/a&gt; now starts with a somewhat random seed. Moreover, it uses a different algorithm.</target>
        </trans-unit>
        <trans-unit id="4807ffe56b89f96d5345484b52e6277f351113a1" translate="yes" xml:space="preserve">
          <source>The reader function used by &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;. Every time &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; needs another piece of the chunk, it calls the reader, passing along its &lt;code&gt;data&lt;/code&gt; parameter. The reader must return a pointer to a block of memory with a new piece of the chunk and set &lt;code&gt;size&lt;/code&gt; to the block size. The block must exist until the reader function is called again. To signal the end of the chunk, the reader must return &lt;code&gt;NULL&lt;/code&gt; or set &lt;code&gt;size&lt;/code&gt; to zero. The reader function may return pieces of any size greater than zero.</source>
          <target state="translated">The reader function used by &lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;. Every time &lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt; needs another piece of the chunk, it calls the reader, passing along its &lt;code&gt;data&lt;/code&gt; parameter. The reader must return a pointer to a block of memory with a new piece of the chunk and set &lt;code&gt;size&lt;/code&gt; to the block size. The block must exist until the reader function is called again. To signal the end of the chunk, the reader must return &lt;code&gt;NULL&lt;/code&gt; or set &lt;code&gt;size&lt;/code&gt; to zero. The reader function may return pieces of any size greater than zero.</target>
        </trans-unit>
        <trans-unit id="94196df3b0309cd7d7af8dbae4fe9b55da3dd1ee" translate="yes" xml:space="preserve">
          <source>The reader function used by &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;. Every time it needs another piece of the chunk, &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; calls the reader, passing along its &lt;code&gt;data&lt;/code&gt; parameter. The reader must return a pointer to a block of memory with a new piece of the chunk and set &lt;code&gt;size&lt;/code&gt; to the block size. The block must exist until the reader function is called again. To signal the end of the chunk, the reader must return &lt;code&gt;NULL&lt;/code&gt; or set &lt;code&gt;size&lt;/code&gt; to zero. The reader function may return pieces of any size greater than zero.</source>
          <target state="translated">&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;によって使用されるリーダー関数。チャンクの別の部分が必要になるたびに、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;はリーダーを呼び出し、その &lt;code&gt;data&lt;/code&gt; パラメーターを渡します。リーダーは、チャンクの新しい断片を含むメモリブロックへのポインタを返し、 &lt;code&gt;size&lt;/code&gt; をブロックサイズに設定する必要があります。ブロックは、リーダー関数が再度呼び出されるまで存在している必要があります。チャンクの終わりを通知するには、リーダーは &lt;code&gt;NULL&lt;/code&gt; を返すか、 &lt;code&gt;size&lt;/code&gt; をゼロに設定する必要があります。リーダー関数は、ゼロより大きい任意のサイズのピースを返す場合があります。</target>
        </trans-unit>
        <trans-unit id="37f620be9ce9c46f8c6dc3707673277eb2ba004c" translate="yes" xml:space="preserve">
          <source>The return values of &lt;code&gt;lua_load&lt;/code&gt; are:</source>
          <target state="translated">&lt;code&gt;lua_load&lt;/code&gt; の戻り値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2b6bd9b2d65f7c99bb3fd044a11a11e501baf7b6" translate="yes" xml:space="preserve">
          <source>The returned table can contain all the fields returned by &lt;a href=&quot;#lua_getinfo&quot;&gt;&lt;code&gt;lua_getinfo&lt;/code&gt;&lt;/a&gt;, with the string &lt;code&gt;what&lt;/code&gt; describing which fields to fill in. The default for &lt;code&gt;what&lt;/code&gt; is to get all information available, except the table of valid lines. If present, the option '&lt;code&gt;f&lt;/code&gt;' adds a field named &lt;code&gt;func&lt;/code&gt; with the function itself. If present, the option '&lt;code&gt;L&lt;/code&gt;' adds a field named &lt;code&gt;activelines&lt;/code&gt; with the table of valid lines.</source>
          <target state="translated">返されるテーブルには、&lt;a href=&quot;#lua_getinfo&quot;&gt; &lt;code&gt;lua_getinfo&lt;/code&gt; &lt;/a&gt;によって返されるすべてのフィールドと、入力するフィールドを説明する文字列 &lt;code&gt;what&lt;/code&gt; を含めることができます。有効な行のテーブルを除いて、利用可能なすべての情報を取得するための &lt;code&gt;what&lt;/code&gt; のデフォルト。存在する場合、オプション ' &lt;code&gt;f&lt;/code&gt; 'は &lt;code&gt;func&lt;/code&gt; という名前のフィールドを関数自体に追加します。存在する場合、オプション ' &lt;code&gt;L&lt;/code&gt; 'は、有効な行のテーブルを &lt;code&gt;activelines&lt;/code&gt; という名前のフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="f55f8b6574e5379a6bf6381df42f2bd48b5ec87a" translate="yes" xml:space="preserve">
          <source>The returned value is a number, whose meaning depends on your system. In POSIX, Windows, and some other systems, this number counts the number of seconds since some given start time (the &quot;epoch&quot;). In other systems, the meaning is not specified, and the number returned by &lt;code&gt;time&lt;/code&gt; can be used only as an argument to &lt;a href=&quot;#pdf-os.date&quot;&gt;&lt;code&gt;os.date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-os.difftime&quot;&gt;&lt;code&gt;os.difftime&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">戻り値は数値であり、その意味はシステムによって異なります。POSIX、Windows、およびその他の一部のシステムでは、この数値は、特定の開始時刻（「エポック」）からの秒数をカウントします。他のシステムでは、意味は指定されておらず、 &lt;code&gt;time&lt;/code&gt; によって返される数値は、&lt;a href=&quot;#pdf-os.date&quot;&gt; &lt;code&gt;os.date&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pdf-os.difftime&quot;&gt; &lt;code&gt;os.difftime&lt;/code&gt; &lt;/a&gt;への引数としてのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="cfbc7fd540fdc9556b78c0aa760e8e168374c2f5" translate="yes" xml:space="preserve">
          <source>The searcher for C loaders used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; changed the way it handles versioned names. Now, the version should come after the module name (as is usual in most other tools). For compatibility, that searcher still tries the old format if it cannot find an open function according to the new style. (Lua 5.2 already worked that way, but it did not document the change.)</source>
          <target state="translated">&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;が使用するCローダーのサーチャーは、バージョン管理された名前の処理方法を変更しました。これで、バージョンはモジュール名の後に来るはずです（他のほとんどのツールで通常行われているように）。互換性のために、サーチャーは、新しいスタイルに従ってオープン関数を見つけることができない場合でも、古い形式を試します。（Lua 5.2はすでにそのように機能していましたが、変更を文書化していませんでした。）</target>
        </trans-unit>
        <trans-unit id="9d03150830b6678b3746886a32e87ec44fd83128" translate="yes" xml:space="preserve">
          <source>The second and third results come from Lua matching an empty string after '&lt;code&gt;b&lt;/code&gt;' and another one after '&lt;code&gt;c&lt;/code&gt;'. Lua does not match an empty string after '&lt;code&gt;a&lt;/code&gt;', because it would end at the same position of the previous match.</source>
          <target state="translated">The second and third results come from Lua matching an empty string after ' &lt;code&gt;b&lt;/code&gt; ' and another one after ' &lt;code&gt;c&lt;/code&gt; '. Lua does not match an empty string after ' &lt;code&gt;a&lt;/code&gt; ', because it would end at the same position of the previous match.</target>
        </trans-unit>
        <trans-unit id="d15f5fb6601ee9ab09f9a53d09100cffc80fdb3d" translate="yes" xml:space="preserve">
          <source>The second line is the character that separates templates in a path. Default is '&lt;code&gt;;&lt;/code&gt;'.</source>
          <target state="translated">2行目は、パス内のテンプレートを区切る文字です。デフォルトは ' &lt;code&gt;;&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="98a2720d48fa26f6e8827171e22966063e194996" translate="yes" xml:space="preserve">
          <source>The second searcher looks for a loader as a Lua library, using the path stored at &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt;. The search is done as described in function &lt;a href=&quot;#pdf-package.searchpath&quot;&gt;&lt;code&gt;package.searchpath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2番目のサーチャーは、&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; に&lt;/a&gt;保管されているパスを使用して、Luaライブラリーとしてローダーを探します。検索は、関数&lt;a href=&quot;#pdf-package.searchpath&quot;&gt; &lt;code&gt;package.searchpath&lt;/code&gt; で&lt;/a&gt;説明されているように行われます。</target>
        </trans-unit>
        <trans-unit id="137238d8dbd009a149982e6efcc20bad727cfcef" translate="yes" xml:space="preserve">
          <source>The semantics of the numerical &lt;b&gt;for&lt;/b&gt; loop over integers changed in some details. In particular, the control variable never wraps around.</source>
          <target state="translated">The semantics of the numerical &lt;b&gt;for&lt;/b&gt; loop over integers changed in some details. In particular, the control variable never wraps around.</target>
        </trans-unit>
        <trans-unit id="ff10cde6ef36b0ce8ea3feff1924805fea5410a7" translate="yes" xml:space="preserve">
          <source>The sort algorithm is not stable: elements considered equal by the given order may have their relative positions changed by the sort.</source>
          <target state="translated">ソートアルゴリズムは安定していません:与えられた順序で等しいとみなされる要素は、ソートによって相対的な位置が変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="f130a0a60b21f9cce2226de0fac2751f12370d42" translate="yes" xml:space="preserve">
          <source>The specific behavior of each mode is non portable; check the underlying ISO C function &lt;code&gt;setvbuf&lt;/code&gt; in your platform for more details.</source>
          <target state="translated">The specific behavior of each mode is non portable; check the underlying ISO C function &lt;code&gt;setvbuf&lt;/code&gt; in your platform for more details.</target>
        </trans-unit>
        <trans-unit id="3a64ebff4c2ef0f4608bbc1604d0fba5b08a8c95" translate="yes" xml:space="preserve">
          <source>The specifier &lt;code&gt;p&lt;/code&gt; formats the pointer returned by &lt;a href=&quot;#lua_topointer&quot;&gt;&lt;code&gt;lua_topointer&lt;/code&gt;&lt;/a&gt;. That gives a unique string identifier for tables, userdata, threads, strings, and functions. For other values (numbers, nil, booleans), this specifier results in a string representing the pointer &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">The specifier &lt;code&gt;p&lt;/code&gt; formats the pointer returned by &lt;a href=&quot;#lua_topointer&quot;&gt; &lt;code&gt;lua_topointer&lt;/code&gt; &lt;/a&gt;. That gives a unique string identifier for tables, userdata, threads, strings, and functions. For other values (numbers, nil, booleans), this specifier results in a string representing the pointer &lt;code&gt;NULL&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="092e708e29157a676fc8263f0a955c36a4f68199" translate="yes" xml:space="preserve">
          <source>The specifier &lt;code&gt;q&lt;/code&gt; formats booleans, nil, numbers, and strings in a way that the result is a valid constant in Lua source code. Booleans and nil are written in the obvious way (&lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;nil&lt;/code&gt;). Floats are written in hexadecimal, to preserve full precision. A string is written between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call</source>
          <target state="translated">The specifier &lt;code&gt;q&lt;/code&gt; formats booleans, nil, numbers, and strings in a way that the result is a valid constant in Lua source code. Booleans and nil are written in the obvious way ( &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;nil&lt;/code&gt; ). Floats are written in hexadecimal, to preserve full precision. A string is written between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call</target>
        </trans-unit>
        <trans-unit id="98e415d3f3923dae036c196db9c13a7408c478cc" translate="yes" xml:space="preserve">
          <source>The specifier &lt;code&gt;s&lt;/code&gt; expects a string; if its argument is not a string, it is converted to one following the same rules of &lt;a href=&quot;#pdf-tostring&quot;&gt;&lt;code&gt;tostring&lt;/code&gt;&lt;/a&gt;. If the specifier has any modifier, the corresponding string argument should not contain embedded zeros.</source>
          <target state="translated">The specifier &lt;code&gt;s&lt;/code&gt; expects a string; if its argument is not a string, it is converted to one following the same rules of &lt;a href=&quot;#pdf-tostring&quot;&gt; &lt;code&gt;tostring&lt;/code&gt; &lt;/a&gt;. If the specifier has any modifier, the corresponding string argument should not contain embedded zeros.</target>
        </trans-unit>
        <trans-unit id="5106e7eaf9b7ca3b362e6dc6b36e589c34ea6d05" translate="yes" xml:space="preserve">
          <source>The standard Lua libraries provide useful functions that are implemented directly through the C API. Some of these functions provide essential services to the language (e.g., &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-getmetatable&quot;&gt;&lt;code&gt;getmetatable&lt;/code&gt;&lt;/a&gt;); others provide access to &quot;outside&quot; services (e.g., I/O); and others could be implemented in Lua itself, but are quite useful or have critical performance requirements that deserve an implementation in C (e.g., &lt;a href=&quot;#pdf-table.sort&quot;&gt;&lt;code&gt;table.sort&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">標準のLuaライブラリは、C APIを介して直接実装される便利な関数を提供します。これらの関数のいくつかは、言語に必須のサービスを提供します（例：&lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pdf-getmetatable&quot;&gt; &lt;code&gt;getmetatable&lt;/code&gt; &lt;/a&gt;）。「外部」サービス（I / Oなど）へのアクセスを提供するものもあります。その他はLua自体に実装できますが、非常に有用であるか、Cでの実装に値する重要なパフォーマンス要件があります（例：&lt;a href=&quot;#pdf-table.sort&quot;&gt; &lt;code&gt;table.sort&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="4f9a410557c9b2b1485364215e1b8ab3d88af66f" translate="yes" xml:space="preserve">
          <source>The standard Lua libraries provide useful functions that are implemented in C through the C API. Some of these functions provide essential services to the language (e.g., &lt;a href=&quot;#pdf-type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-getmetatable&quot;&gt;&lt;code&gt;getmetatable&lt;/code&gt;&lt;/a&gt;); others provide access to outside services (e.g., I/O); and others could be implemented in Lua itself, but that for different reasons deserve an implementation in C (e.g., &lt;a href=&quot;#pdf-table.sort&quot;&gt;&lt;code&gt;table.sort&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">The standard Lua libraries provide useful functions that are implemented in C through the C API. Some of these functions provide essential services to the language (e.g., &lt;a href=&quot;#pdf-type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#pdf-getmetatable&quot;&gt; &lt;code&gt;getmetatable&lt;/code&gt; &lt;/a&gt;); others provide access to outside services (e.g., I/O); and others could be implemented in Lua itself, but that for different reasons deserve an implementation in C (e.g., &lt;a href=&quot;#pdf-table.sort&quot;&gt; &lt;code&gt;table.sort&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="f42f392bd799378902334c3d54a3414a4cf4d102" translate="yes" xml:space="preserve">
          <source>The standard paths in the official distribution may change between versions.</source>
          <target state="translated">公式ディストリビューションの標準パスはバージョンによって変更されることがあります。</target>
        </trans-unit>
        <trans-unit id="eaeb2de6b243d1a84e816fda80b831d0cddcf07f" translate="yes" xml:space="preserve">
          <source>The standard representation for file handles used by the standard I/O library.</source>
          <target state="translated">標準I/Oライブラリで使用されるファイルハンドルの標準表現。</target>
        </trans-unit>
        <trans-unit id="bb7020ccdbf4af39d9ada89f1f68b18c849ca42e" translate="yes" xml:space="preserve">
          <source>The standard representation for file handles, which is used by the standard I/O library.</source>
          <target state="translated">ファイルハンドルの標準的な表現で、標準のI/Oライブラリで使用されます。</target>
        </trans-unit>
        <trans-unit id="9fd3499f821fa1f3548e8129d6b35f2161cdaff1" translate="yes" xml:space="preserve">
          <source>The statement</source>
          <target state="translated">声明</target>
        </trans-unit>
        <trans-unit id="b51c68cae2ce99f1a793fe977a6ed087cdabd1ba" translate="yes" xml:space="preserve">
          <source>The status can be 0 (&lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;) for a normal thread, an error code if the thread finished the execution of a &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; with an error, or &lt;a id=&quot;pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; if the thread is suspended.</source>
          <target state="translated">ステータスは、通常のスレッドの場合は0（&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;）、スレッドが&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;の実行をエラーで終了した場合はエラーコード、スレッドが中断されている場合は&lt;a id=&quot;pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; に&lt;/a&gt;なります。</target>
        </trans-unit>
        <trans-unit id="ba591c4d2347c93e195f1809555bf57c5b0e8a4a" translate="yes" xml:space="preserve">
          <source>The status can be &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; for a normal thread, an error code if the thread finished the execution of a &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; with an error, or &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; if the thread is suspended.</source>
          <target state="translated">The status can be &lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt; for a normal thread, an error code if the thread finished the execution of a &lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt; with an error, or &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt; if the thread is suspended.</target>
        </trans-unit>
        <trans-unit id="b6107c417c0095d03331e66cca35b7fc41f404ee" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;mode&lt;/code&gt; controls whether the chunk can be text or binary (that is, a precompiled chunk). It may be the string &quot;&lt;code&gt;b&lt;/code&gt;&quot; (only binary chunks), &quot;&lt;code&gt;t&lt;/code&gt;&quot; (only text chunks), or &quot;&lt;code&gt;bt&lt;/code&gt;&quot; (both binary and text). The default is &quot;&lt;code&gt;bt&lt;/code&gt;&quot;.</source>
          <target state="translated">文字列 &lt;code&gt;mode&lt;/code&gt; は、チャンクがテキストとバイナリのどちらであるか（つまり、プリコンパイルされたチャンク）を制御します。文字列は「 &lt;code&gt;b&lt;/code&gt; 」（バイナリチャンクのみ）、「 &lt;code&gt;t&lt;/code&gt; 」（テキストチャンクのみ）、または「 &lt;code&gt;bt&lt;/code&gt; 」（バイナリとテキストの両方）です。デフォルトは &quot; &lt;code&gt;bt&lt;/code&gt; &quot;です。</target>
        </trans-unit>
        <trans-unit id="eb61b3491c7ef29459d2f5f3b4868e8b5f23f56b" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;mode&lt;/code&gt; works as in function &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列 &lt;code&gt;mode&lt;/code&gt; は関数&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="beb93a28bba84bfd321ab6652fb3b4fded30346b" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;mode&lt;/code&gt; works as in the function &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The string &lt;code&gt;mode&lt;/code&gt; works as in the function &lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4f5be0aef9b83b79d571f55826d5a136dfb44d41" translate="yes" xml:space="preserve">
          <source>The string concatenation operator in Lua is denoted by two dots ('&lt;code&gt;..&lt;/code&gt;'). If both operands are strings or numbers, then the numbers are converted to strings in a non-specified format (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;). Otherwise, the &lt;code&gt;__concat&lt;/code&gt; metamethod is called (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">The string concatenation operator in Lua is denoted by two dots (' &lt;code&gt;..&lt;/code&gt; '). If both operands are strings or numbers, then the numbers are converted to strings in a non-specified format (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;). Otherwise, the &lt;code&gt;__concat&lt;/code&gt; metamethod is called (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="8627952ee0ea9e9e84752d1eff85ae25a6b8cff5" translate="yes" xml:space="preserve">
          <source>The string concatenation operator in Lua is denoted by two dots ('&lt;code&gt;..&lt;/code&gt;'). If both operands are strings or numbers, then they are converted to strings according to the rules described in &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;. Otherwise, the &lt;code&gt;__concat&lt;/code&gt; metamethod is called (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">Luaの文字列連結演算子は、2つのドット（ ' &lt;code&gt;..&lt;/code&gt; '）で示されます。両方のオペランドが文字列または数値の場合は、&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3で&lt;/a&gt;説明されている規則に従って文字列に変換されます。それ以外の場合は、 &lt;code&gt;__concat&lt;/code&gt; メタメソッドが呼び出されます（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9045fd903c161a4ac7a29583b9b8dcf0e5541479" translate="yes" xml:space="preserve">
          <source>The string library assumes one-byte character encodings.</source>
          <target state="translated">文字列ライブラリは、半角文字エンコーディングを想定しています。</target>
        </trans-unit>
        <trans-unit id="b2b7ec0f9126a815843a8b6eedc7a7a4064d3eb8" translate="yes" xml:space="preserve">
          <source>The string library provides all its functions inside the table &lt;a id=&quot;pdf-string&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;. It also sets a metatable for strings where the &lt;code&gt;__index&lt;/code&gt; field points to the &lt;code&gt;string&lt;/code&gt; table. Therefore, you can use the string functions in object-oriented style. For instance, &lt;code&gt;string.byte(s,i)&lt;/code&gt; can be written as &lt;code&gt;s:byte(i)&lt;/code&gt;.</source>
          <target state="translated">文字列ライブラリは、テーブル&lt;a id=&quot;pdf-string&quot;&gt; &lt;code&gt;string&lt;/code&gt; &lt;/a&gt;内にすべての関数を提供します。また、 &lt;code&gt;__index&lt;/code&gt; フィールドが &lt;code&gt;string&lt;/code&gt; テーブルを指す文字列のメタテーブルを設定します。したがって、文字列関数をオブジェクト指向のスタイルで使用できます。たとえば、 &lt;code&gt;string.byte(s,i)&lt;/code&gt; は &lt;code&gt;s:byte(i)&lt;/code&gt; と書くことができます。</target>
        </trans-unit>
        <trans-unit id="10a50517543fae51ebb08fb2ec16c2bc73963b6e" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;var.Name&lt;/code&gt; is just syntactic sugar for &lt;code&gt;var[&quot;Name&quot;]&lt;/code&gt;:</source>
          <target state="translated">構文 &lt;code&gt;var.Name&lt;/code&gt; は、 &lt;code&gt;var[&quot;Name&quot;]&lt;/code&gt; 構文糖衣です。</target>
        </trans-unit>
        <trans-unit id="050ff8b5782f01590c86d4091d6bf58f847c8377" translate="yes" xml:space="preserve">
          <source>The syntax for function definition is</source>
          <target state="translated">関数定義の構文は</target>
        </trans-unit>
        <trans-unit id="632eb45dbc253afb0e4d9a6d182579e0f0a1fc32" translate="yes" xml:space="preserve">
          <source>The table &lt;code&gt;io&lt;/code&gt; also provides three predefined file handles with their usual meanings from C: &lt;a id=&quot;pdf-io.stdin&quot;&gt;&lt;code&gt;io.stdin&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-io.stdout&quot;&gt;&lt;code&gt;io.stdout&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-io.stderr&quot;&gt;&lt;code&gt;io.stderr&lt;/code&gt;&lt;/a&gt;. The I/O library never closes these files.</source>
          <target state="translated">テーブル &lt;code&gt;io&lt;/code&gt; には、Cの通常の意味を持つ3つの定義済みファイルハンドル（&lt;a id=&quot;pdf-io.stdin&quot;&gt; &lt;code&gt;io.stdin&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-io.stdout&quot;&gt; &lt;code&gt;io.stdout&lt;/code&gt; &lt;/a&gt;、および&lt;a id=&quot;pdf-io.stderr&quot;&gt; &lt;code&gt;io.stderr&lt;/code&gt; )&lt;/a&gt;も用意されています。I / Oライブラリがこれらのファイルを閉じることはありません。</target>
        </trans-unit>
        <trans-unit id="a5bb6863eedf039eb3411f3dbe0637455e54c4cb" translate="yes" xml:space="preserve">
          <source>The third line is the string that marks the substitution points in a template. Default is '&lt;code&gt;?&lt;/code&gt;'.</source>
          <target state="translated">3行目は、テンプレートの置換ポイントをマークする文字列です。デフォルトは ' &lt;code&gt;?&lt;/code&gt; '。</target>
        </trans-unit>
        <trans-unit id="2123107d9c2b8fa74113fcb8969ea618ea87943f" translate="yes" xml:space="preserve">
          <source>The third searcher looks for a loader as a C library, using the path given by the variable &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt;. Again, the search is done as described in function &lt;a href=&quot;#pdf-package.searchpath&quot;&gt;&lt;code&gt;package.searchpath&lt;/code&gt;&lt;/a&gt;. For instance, if the C path is the string</source>
          <target state="translated">3番目のサーチャーは、変数&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; で&lt;/a&gt;指定されたパスを使用して、ローダーをCライブラリーとして探します。この場合も、検索は関数&lt;a href=&quot;#pdf-package.searchpath&quot;&gt; &lt;code&gt;package.searchpath&lt;/code&gt; で&lt;/a&gt;説明されているように行われます。たとえば、Cパスが文字列の場合</target>
        </trans-unit>
        <trans-unit id="addd796f69c05ccc4f282e63f096edaf0f445ae8" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;number&lt;/em&gt; represents both integer numbers and real (floating-point) numbers, using two subtypes: &lt;em&gt;integer&lt;/em&gt; and &lt;em&gt;float&lt;/em&gt;. Standard Lua uses 64-bit integers and double-precision (64-bit) floats, but you can also compile Lua so that it uses 32-bit integers and/or single-precision (32-bit) floats. The option with 32 bits for both integers and floats is particularly attractive for small machines and embedded systems. (See macro &lt;code&gt;LUA_32BITS&lt;/code&gt; in file &lt;code&gt;luaconf.h&lt;/code&gt;.)</source>
          <target state="translated">The type &lt;em&gt;number&lt;/em&gt; represents both integer numbers and real (floating-point) numbers, using two subtypes: &lt;em&gt;integer&lt;/em&gt; and &lt;em&gt;float&lt;/em&gt;. Standard Lua uses 64-bit integers and double-precision (64-bit) floats, but you can also compile Lua so that it uses 32-bit integers and/or single-precision (32-bit) floats. The option with 32 bits for both integers and floats is particularly attractive for small machines and embedded systems. (See macro &lt;code&gt;LUA_32BITS&lt;/code&gt; in file &lt;code&gt;luaconf.h&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="8accc1fdc3658380909273543cc837dcd9d22775" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;number&lt;/em&gt; uses two internal representations, or two subtypes, one called &lt;em&gt;integer&lt;/em&gt; and the other called &lt;em&gt;float&lt;/em&gt;. Lua has explicit rules about when each representation is used, but it also converts between them automatically as needed (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;). Therefore, the programmer may choose to mostly ignore the difference between integers and floats or to assume complete control over the representation of each number. Standard Lua uses 64-bit integers and double-precision (64-bit) floats, but you can also compile Lua so that it uses 32-bit integers and/or single-precision (32-bit) floats. The option with 32 bits for both integers and floats is particularly attractive for small machines and embedded systems. (See macro &lt;code&gt;LUA_32BITS&lt;/code&gt; in file &lt;code&gt;luaconf.h&lt;/code&gt;.)</source>
          <target state="translated">タイプ&lt;em&gt;番号&lt;/em&gt;は、2つの内部表現、または2つのサブタイプを使用します。1つは&lt;em&gt;integer&lt;/em&gt;と呼ばれ、もう1つは&lt;em&gt;float&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。 Luaには、各表現がいつ使用されるかについて明示的なルールがありますが、必要に応じてそれらの間で自動的に変換されます（&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3を&lt;/a&gt;参照）。したがって、プログラマーは、整数と浮動小数点数の違いをほとんど無視するか、各数値の表現を完全に制御することを選択できます。標準のLuaは64ビット整数と倍精度（64ビット）浮動小数点数を使用しますが、32ビット整数または単精度（32ビット）浮動小数点数を使用するようにLuaをコンパイルすることもできます。整数と浮動小数点の両方に32ビットを使用するオプションは、小型のマシンや組み込みシステムにとって特に魅力的です。 （マクロを参照 &lt;code&gt;LUA_32BITS&lt;/code&gt; ファイルで &lt;code&gt;luaconf.h&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="c9782558cfd51d05e29ec07247ff6f0f3156a12c" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;string&lt;/em&gt; represents immutable sequences of bytes. Lua is 8-bit clean: strings can contain any 8-bit value, including embedded zeros ('&lt;code&gt;\0&lt;/code&gt;'). Lua is also encoding-agnostic; it makes no assumptions about the contents of a string. The length of any string in Lua must fit in a Lua integer.</source>
          <target state="translated">The type &lt;em&gt;string&lt;/em&gt; represents immutable sequences of bytes. Lua is 8-bit clean: strings can contain any 8-bit value, including embedded zeros (' &lt;code&gt;\0&lt;/code&gt; '). Lua is also encoding-agnostic; it makes no assumptions about the contents of a string. The length of any string in Lua must fit in a Lua integer.</target>
        </trans-unit>
        <trans-unit id="afb6b5b3a4f6e457499e2efa89d3127e8a5239e3" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;table&lt;/em&gt; implements associative arrays, that is, arrays that can be indexed not only with numbers, but with any Lua value except &lt;b&gt;nil&lt;/b&gt; and NaN. (&lt;em&gt;Not a Number&lt;/em&gt; is a special value used to represent undefined or unrepresentable numerical results, such as &lt;code&gt;0/0&lt;/code&gt;.) Tables can be &lt;em&gt;heterogeneous&lt;/em&gt;; that is, they can contain values of all types (except &lt;b&gt;nil&lt;/b&gt;). Any key with value &lt;b&gt;nil&lt;/b&gt; is not considered part of the table. Conversely, any key that is not part of a table has an associated value &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">型&lt;em&gt;テーブル&lt;/em&gt;は、連想配列、つまり、数値だけでなく&lt;b&gt;nil&lt;/b&gt;およびNaN 以外の任意のLua値でインデックスを作成できる配列を実装します。（&lt;em&gt;ません数&lt;/em&gt;など未定義または表現不可能数値結果、表現するために使用される特別な値である &lt;code&gt;0/0&lt;/code&gt; ）テーブルとすることができる&lt;em&gt;異種&lt;/em&gt;。つまり、すべてのタイプの値を含めることができます（&lt;b&gt;nil&lt;/b&gt;を除く）。値が&lt;b&gt;nilの&lt;/b&gt;キーは、テーブルの一部とは見なされません。逆に、テーブルの一部ではないキーには、値&lt;b&gt;nilが&lt;/b&gt;関連付けられています。</target>
        </trans-unit>
        <trans-unit id="30d0477a11463f9ad22a4a02ea0328499a10323e" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;table&lt;/em&gt; implements associative arrays, that is, arrays that can have as indices not only numbers, but any Lua value except &lt;b&gt;nil&lt;/b&gt; and NaN. (&lt;em&gt;Not a Number&lt;/em&gt; is a special floating-point value used by the IEEE 754 standard to represent undefined numerical results, such as &lt;code&gt;0/0&lt;/code&gt;.) Tables can be &lt;em&gt;heterogeneous&lt;/em&gt;; that is, they can contain values of all types (except &lt;b&gt;nil&lt;/b&gt;). Any key associated to the value &lt;b&gt;nil&lt;/b&gt; is not considered part of the table. Conversely, any key that is not part of a table has an associated value &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">The type &lt;em&gt;table&lt;/em&gt; implements associative arrays, that is, arrays that can have as indices not only numbers, but any Lua value except &lt;b&gt;nil&lt;/b&gt; and NaN. (&lt;em&gt;Not a Number&lt;/em&gt; is a special floating-point value used by the IEEE 754 standard to represent undefined numerical results, such as &lt;code&gt;0/0&lt;/code&gt; .) Tables can be &lt;em&gt;heterogeneous&lt;/em&gt;; that is, they can contain values of all types (except &lt;b&gt;nil&lt;/b&gt;). Any key associated to the value &lt;b&gt;nil&lt;/b&gt; is not considered part of the table. Conversely, any key that is not part of a table has an associated value &lt;b&gt;nil&lt;/b&gt;.</target>
        </trans-unit>
        <trans-unit id="4d9440269930bed052fd86cfbac01a1a963271db" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;thread&lt;/em&gt; represents independent threads of execution and it is used to implement coroutines (see &lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6&lt;/a&gt;). Lua threads are not related to operating-system threads. Lua supports coroutines on all systems, even those that do not support threads natively.</source>
          <target state="translated">タイプ&lt;em&gt;thread&lt;/em&gt;は実行の独立したスレッドを表し、コルーチンの実装に使用されます（&lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6を&lt;/a&gt;参照）。 Luaスレッドは、オペレーティングシステムスレッドとは関係ありません。 Luaは、ネイティブにスレッドをサポートしていないものも含め、すべてのシステムでコルーチンをサポートしています。</target>
        </trans-unit>
        <trans-unit id="8121e5be3e303e17463413ad6f8abdbed524db9a" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;userdata&lt;/em&gt; is provided to allow arbitrary C data to be stored in Lua variables. A userdata value represents a block of raw memory. There are two kinds of userdata: &lt;em&gt;full userdata&lt;/em&gt;, which is an object with a block of memory managed by Lua, and &lt;em&gt;light userdata&lt;/em&gt;, which is simply a C pointer value. Userdata has no predefined operations in Lua, except assignment and identity test. By using &lt;em&gt;metatables&lt;/em&gt;, the programmer can define operations for full userdata values (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). Userdata values cannot be created or modified in Lua, only through the C API. This guarantees the integrity of data owned by the host program and C libraries.</source>
          <target state="translated">The type &lt;em&gt;userdata&lt;/em&gt; is provided to allow arbitrary C data to be stored in Lua variables. A userdata value represents a block of raw memory. There are two kinds of userdata: &lt;em&gt;full userdata&lt;/em&gt;, which is an object with a block of memory managed by Lua, and &lt;em&gt;light userdata&lt;/em&gt;, which is simply a C pointer value. Userdata has no predefined operations in Lua, except assignment and identity test. By using &lt;em&gt;metatables&lt;/em&gt;, the programmer can define operations for full userdata values (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). Userdata values cannot be created or modified in Lua, only through the C API. This guarantees the integrity of data owned by the host program and C libraries.</target>
        </trans-unit>
        <trans-unit id="549971961a231ddc4a1edb8a913953e6d0ac1c5d" translate="yes" xml:space="preserve">
          <source>The type &lt;em&gt;userdata&lt;/em&gt; is provided to allow arbitrary C data to be stored in Lua variables. A userdata value represents a block of raw memory. There are two kinds of userdata: &lt;em&gt;full userdata&lt;/em&gt;, which is an object with a block of memory managed by Lua, and &lt;em&gt;light userdata&lt;/em&gt;, which is simply a C pointer value. Userdata has no predefined operations in Lua, except assignment and identity test. By using &lt;em&gt;metatables&lt;/em&gt;, the programmer can define operations for full userdata values (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). Userdata values cannot be created or modified in Lua, only through the C API. This guarantees the integrity of data owned by the host program.</source>
          <target state="translated">タイプ&lt;em&gt;userdata&lt;/em&gt;は、任意のCデータをLua変数に格納できるようにするために提供されています。 userdata値は、未加工のメモリのブロックを表します。 userdataには2種類あります。1つはLuaが管理するメモリブロックを持つオブジェクトである&lt;em&gt;完全なuserdataで&lt;/em&gt;、もう1つは単なるCポインタ値である&lt;em&gt;light userdata&lt;/em&gt;です。 Userdataには、割り当てとIDテストを除いて、Luaで事前定義された操作はありません。&lt;em&gt;メタテーブル&lt;/em&gt;を使用することにより、プログラマーは完全な&lt;a href=&quot;#2.4&quot;&gt;userdata&lt;/a&gt;値の操作を定義できます（&amp;sect;2.4を参照）。 Luaでは、C APIを介してのみ、userdata値を作成または変更できません。これにより、ホストプログラムが所有するデータの整合性が保証されます。</target>
        </trans-unit>
        <trans-unit id="cb2dae663cd0b88537f77f62b52ecd0fdceb5eb7" translate="yes" xml:space="preserve">
          <source>The type for continuation-function contexts. It must be a numeric type. This type is defined as &lt;code&gt;intptr_t&lt;/code&gt; when &lt;code&gt;intptr_t&lt;/code&gt; is available, so that it can store pointers too. Otherwise, it is defined as &lt;code&gt;ptrdiff_t&lt;/code&gt;.</source>
          <target state="translated">継続関数コンテキストのタイプ。数値型でなければなりません。このタイプは次のように定義され &lt;code&gt;intptr_t&lt;/code&gt; とき &lt;code&gt;intptr_t&lt;/code&gt; が、それはあまりにもポインタを格納することができるように、利用可能です。それ以外の場合は、 &lt;code&gt;ptrdiff_t&lt;/code&gt; として定義されます。</target>
        </trans-unit>
        <trans-unit id="b81ea3cf634f923ceea25ead913b80cfce712bbf" translate="yes" xml:space="preserve">
          <source>The type of floats in Lua.</source>
          <target state="translated">Luaのfloatの種類です。</target>
        </trans-unit>
        <trans-unit id="7bd0bf99561dfbd918dc1bdb99594d59c184307f" translate="yes" xml:space="preserve">
          <source>The type of integers in Lua.</source>
          <target state="translated">Luaの整数型。</target>
        </trans-unit>
        <trans-unit id="f3373938fcc3069867ceda08c5889260b4eb48bd" translate="yes" xml:space="preserve">
          <source>The type of the memory-allocation function used by Lua states. The allocator function must provide a functionality similar to &lt;code&gt;realloc&lt;/code&gt;, but not exactly the same. Its arguments are &lt;code&gt;ud&lt;/code&gt;, an opaque pointer passed to &lt;a href=&quot;#lua_newstate&quot;&gt;&lt;code&gt;lua_newstate&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;ptr&lt;/code&gt;, a pointer to the block being allocated/reallocated/freed; &lt;code&gt;osize&lt;/code&gt;, the original size of the block or some code about what is being allocated; and &lt;code&gt;nsize&lt;/code&gt;, the new size of the block.</source>
          <target state="translated">Luaが使用するメモリ割り当て関数のタイプ。アロケータ関数は &lt;code&gt;realloc&lt;/code&gt; と同様の機能を提供する必要がありますが、完全に同じではありません。その引数は &lt;code&gt;ud&lt;/code&gt; であり、&lt;a href=&quot;#lua_newstate&quot;&gt; &lt;code&gt;lua_newstate&lt;/code&gt; に&lt;/a&gt;渡される不透明なポインターです。 &lt;code&gt;ptr&lt;/code&gt; 、割り当て/再割り当て/解放されるブロックへのポインタ。 &lt;code&gt;osize&lt;/code&gt; 、ブロックの元のサイズ、または割り当てられているものに関するいくつかのコード。そして &lt;code&gt;nsize&lt;/code&gt; の場合、ブロックの新しいサイズを。</target>
        </trans-unit>
        <trans-unit id="1df269fdb1511aeac5ae2230ae20c7d3efe5a527" translate="yes" xml:space="preserve">
          <source>The type of the writer function used by &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt;. Every time &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; produces another piece of chunk, it calls the writer, passing along the buffer to be written (&lt;code&gt;p&lt;/code&gt;), its size (&lt;code&gt;sz&lt;/code&gt;), and the &lt;code&gt;ud&lt;/code&gt; parameter supplied to &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The type of the writer function used by &lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;. Every time &lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt; produces another piece of chunk, it calls the writer, passing along the buffer to be written ( &lt;code&gt;p&lt;/code&gt; ), its size ( &lt;code&gt;sz&lt;/code&gt; ), and the &lt;code&gt;ud&lt;/code&gt; parameter supplied to &lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ea2467b4ef42d2fed95d1a97e4a127587c63bf40" translate="yes" xml:space="preserve">
          <source>The type of the writer function used by &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt;. Every time it produces another piece of chunk, &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; calls the writer, passing along the buffer to be written (&lt;code&gt;p&lt;/code&gt;), its size (&lt;code&gt;sz&lt;/code&gt;), and the &lt;code&gt;data&lt;/code&gt; parameter supplied to &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; が&lt;/a&gt;使用するライター関数のタイプ。&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;は、別のチャンクを生成するたびにライターを呼び出し、書き込むバッファー（ &lt;code&gt;p&lt;/code&gt; ）、そのサイズ（ &lt;code&gt;sz&lt;/code&gt; ）、および&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; に&lt;/a&gt;提供される &lt;code&gt;data&lt;/code&gt; パラメーターを渡します。</target>
        </trans-unit>
        <trans-unit id="d018270dc227693da93d9f0a8f9276ac74a821c3" translate="yes" xml:space="preserve">
          <source>The type of warning functions, called by Lua to emit warnings. The first parameter is an opaque pointer set by &lt;a href=&quot;#lua_setwarnf&quot;&gt;&lt;code&gt;lua_setwarnf&lt;/code&gt;&lt;/a&gt;. The second parameter is the warning message. The third parameter is a boolean that indicates whether the message is to be continued by the message in the next call.</source>
          <target state="translated">The type of warning functions, called by Lua to emit warnings. The first parameter is an opaque pointer set by &lt;a href=&quot;#lua_setwarnf&quot;&gt; &lt;code&gt;lua_setwarnf&lt;/code&gt; &lt;/a&gt;. The second parameter is the warning message. The third parameter is a boolean that indicates whether the message is to be continued by the message in the next call.</target>
        </trans-unit>
        <trans-unit id="979b7ad2557665ac8c789bc0692eee0412bef53c" translate="yes" xml:space="preserve">
          <source>The unit of compilation of Lua is called a &lt;em&gt;chunk&lt;/em&gt;. Syntactically, a chunk is simply a block:</source>
          <target state="translated">Luaのコンパイルの単位は&lt;em&gt;チャンク&lt;/em&gt;と呼ばれます。構文的には、チャンクは単なるブロックです。</target>
        </trans-unit>
        <trans-unit id="1fd90de9694cbc90328b75bdffaf97623ca0a9b7" translate="yes" xml:space="preserve">
          <source>The unsigned version of &lt;a href=&quot;#lua_Integer&quot;&gt;&lt;code&gt;lua_Integer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">署名されていないバージョンの&lt;a href=&quot;#lua_Integer&quot;&gt; &lt;code&gt;lua_Integer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f42098ee42cafd687bbe509745646e96e9e3b55" translate="yes" xml:space="preserve">
          <source>The use of the &lt;code&gt;__lt&lt;/code&gt; metamethod to emulate &lt;code&gt;__le&lt;/code&gt; has been removed. When needed, this metamethod must be explicitly defined.</source>
          <target state="translated">The use of the &lt;code&gt;__lt&lt;/code&gt; metamethod to emulate &lt;code&gt;__le&lt;/code&gt; has been removed. When needed, this metamethod must be explicitly defined.</target>
        </trans-unit>
        <trans-unit id="ee895c6fec2956941edfd9074d2ad8c6a07996da" translate="yes" xml:space="preserve">
          <source>The value assigned to a to-be-closed variable must have a &lt;code&gt;__close&lt;/code&gt; metamethod or be a false value. (&lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; are ignored as to-be-closed values.)</source>
          <target state="translated">The value assigned to a to-be-closed variable must have a &lt;code&gt;__close&lt;/code&gt; metamethod or be a false value. (&lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; are ignored as to-be-closed values.)</target>
        </trans-unit>
        <trans-unit id="ea5edb4c646d2befa84cf3aa4de94da00e72b361" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;op&lt;/code&gt; must be one of the following constants:</source>
          <target state="translated">&lt;code&gt;op&lt;/code&gt; の値は、次の定数のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="afade59d4e86a697bf216612fdf19b790b49ed5e" translate="yes" xml:space="preserve">
          <source>The value of &lt;em&gt;&amp;pi;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;&amp;pi;&lt;/em&gt;の値。</target>
        </trans-unit>
        <trans-unit id="9dc3bab908539601286c9612ae1893b48ba8219b" translate="yes" xml:space="preserve">
          <source>The value returned is the error code returned by the last call to the writer; 0 means no errors.</source>
          <target state="translated">返される値は、ライターへの最後の呼び出しによって返されたエラーコードです。</target>
        </trans-unit>
        <trans-unit id="112b2baa6655f11d826fd17791c335badbd32d34" translate="yes" xml:space="preserve">
          <source>The values in these fields do not need to be inside their valid ranges. For instance, if &lt;code&gt;sec&lt;/code&gt; is -10, it means -10 seconds from the time specified by the other fields; if &lt;code&gt;hour&lt;/code&gt; is 1000, it means +1000 hours from the time specified by the other fields.</source>
          <target state="translated">これらのフィールドの値は、有効な範囲内である必要はありません。たとえば、 &lt;code&gt;sec&lt;/code&gt; が-10の場合、他のフィールドで指定された時刻から-10秒であることを意味します。 &lt;code&gt;hour&lt;/code&gt; が1000の場合、他のフィールドで指定された時間から+1000時間を意味します。</target>
        </trans-unit>
        <trans-unit id="a99a66eb862f6556290fc79e5e1c7450f919252a" translate="yes" xml:space="preserve">
          <source>The visibility rules for local variables are explained in &lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5&lt;/a&gt;.</source>
          <target state="translated">ローカル変数の可視性規則については、&lt;a href=&quot;#3.5&quot;&gt;&amp;sect;3.5で&lt;/a&gt;説明しています。</target>
        </trans-unit>
        <trans-unit id="1638bbae2e91cad1bcbf2314b579efab5e69fee7" translate="yes" xml:space="preserve">
          <source>The writer returns an error code: 0 means no errors; any other value means an error and stops &lt;a href=&quot;#lua_dump&quot;&gt;&lt;code&gt;lua_dump&lt;/code&gt;&lt;/a&gt; from calling the writer again.</source>
          <target state="translated">ライターはエラーコードを返します。0はエラーがないことを意味します。その他の値はエラーを意味し、&lt;a href=&quot;#lua_dump&quot;&gt; &lt;code&gt;lua_dump&lt;/code&gt; &lt;/a&gt;がライターを再度呼び出すことを停止します。</target>
        </trans-unit>
        <trans-unit id="e53998e37ed2ba9b38d4b4c370361cd1f8e85f86" translate="yes" xml:space="preserve">
          <source>Then add string pieces to the buffer calling any of the &lt;code&gt;luaL_add*&lt;/code&gt; functions.</source>
          <target state="translated">次に、 &lt;code&gt;luaL_add*&lt;/code&gt; 関数のいずれかを呼び出して、文字列の断片をバッファに追加します。</target>
        </trans-unit>
        <trans-unit id="58d5ea479608da6d358fd4117e4c1650306f8953" translate="yes" xml:space="preserve">
          <source>Then copy the string into that space.</source>
          <target state="translated">そして、そのスペースに文字列をコピーします。</target>
        </trans-unit>
        <trans-unit id="c38aad0ad68cbec114bc022549a75392e5ff942b" translate="yes" xml:space="preserve">
          <source>Then initialize it and preallocate a space of size &lt;code&gt;sz&lt;/code&gt; with a call &lt;code&gt;luaL_buffinitsize(L, &amp;amp;b, sz)&lt;/code&gt;.</source>
          <target state="translated">次にそれを初期化し、 &lt;code&gt;luaL_buffinitsize(L, &amp;amp;b, sz)&lt;/code&gt; 呼び出してサイズ &lt;code&gt;sz&lt;/code&gt; のスペースを事前に割り当てます。</target>
        </trans-unit>
        <trans-unit id="7fde5c748e0c5d875fb24467538da27e6356bfa2" translate="yes" xml:space="preserve">
          <source>Then initialize it with a call &lt;code&gt;luaL_buffinit(L, &amp;amp;b)&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;luaL_buffinit(L, &amp;amp;b)&lt;/code&gt; 呼び出して初期化します。</target>
        </trans-unit>
        <trans-unit id="4a6ac0ddbec77a0c5d75add2623e877e243218e1" translate="yes" xml:space="preserve">
          <source>Then produce the string into that space.</source>
          <target state="translated">そして、そのスペースに文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="20602b0df785d59b7a2fc157ec725f513e02a1fe" translate="yes" xml:space="preserve">
          <source>Then, at each iteration, Lua calls the iterator function with two arguments: the state and the control variable. The results from this call are then assigned to the loop variables, following the rules of multiple assignments (see &lt;a href=&quot;#3.3.3&quot;&gt;&amp;sect;3.3.3&lt;/a&gt;). If the control variable becomes &lt;b&gt;nil&lt;/b&gt;, the loop terminates. Otherwise, the body is executed and the loop goes to the next iteration.</source>
          <target state="translated">Then, at each iteration, Lua calls the iterator function with two arguments: the state and the control variable. The results from this call are then assigned to the loop variables, following the rules of multiple assignments (see &lt;a href=&quot;#3.3.3&quot;&gt;&amp;sect;3.3.3&lt;/a&gt;). If the control variable becomes &lt;b&gt;nil&lt;/b&gt;, the loop terminates. Otherwise, the body is executed and the loop goes to the next iteration.</target>
        </trans-unit>
        <trans-unit id="7c089f6502b4ba313710d9bbf20645416ed3a409" translate="yes" xml:space="preserve">
          <source>Then, we have the following mapping from arguments to parameters and to the vararg expression:</source>
          <target state="translated">すると、引数からパラメータへ、そしてvararg式へのマッピングは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="589d73d8b2db93fee46410c9d04b6ddf513bc616" translate="yes" xml:space="preserve">
          <source>There are eight basic types in Lua: &lt;em&gt;nil&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;function&lt;/em&gt;, &lt;em&gt;userdata&lt;/em&gt;, &lt;em&gt;thread&lt;/em&gt;, and &lt;em&gt;table&lt;/em&gt;. The type &lt;em&gt;nil&lt;/em&gt; has one single value, &lt;b&gt;nil&lt;/b&gt;, whose main property is to be different from any other value; it often represents the absence of a useful value. The type &lt;em&gt;boolean&lt;/em&gt; has two values, &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;true&lt;/b&gt;. Both &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; make a condition false; they are collectively called &lt;em&gt;false values&lt;/em&gt;. Any other value makes a condition true.</source>
          <target state="translated">There are eight basic types in Lua: &lt;em&gt;nil&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;function&lt;/em&gt;, &lt;em&gt;userdata&lt;/em&gt;, &lt;em&gt;thread&lt;/em&gt;, and &lt;em&gt;table&lt;/em&gt;. The type &lt;em&gt;nil&lt;/em&gt; has one single value, &lt;b&gt;nil&lt;/b&gt;, whose main property is to be different from any other value; it often represents the absence of a useful value. The type &lt;em&gt;boolean&lt;/em&gt; has two values, &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;true&lt;/b&gt;. Both &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; make a condition false; they are collectively called &lt;em&gt;false values&lt;/em&gt;. Any other value makes a condition true.</target>
        </trans-unit>
        <trans-unit id="08f15568d44d3dd2fb189f12b0a139775af30148" translate="yes" xml:space="preserve">
          <source>There are eight basic types in Lua: &lt;em&gt;nil&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;function&lt;/em&gt;, &lt;em&gt;userdata&lt;/em&gt;, &lt;em&gt;thread&lt;/em&gt;, and &lt;em&gt;table&lt;/em&gt;. The type &lt;em&gt;nil&lt;/em&gt; has one single value, &lt;b&gt;nil&lt;/b&gt;, whose main property is to be different from any other value; it usually represents the absence of a useful value. The type &lt;em&gt;boolean&lt;/em&gt; has two values, &lt;b&gt;false&lt;/b&gt; and &lt;b&gt;true&lt;/b&gt;. Both &lt;b&gt;nil&lt;/b&gt; and &lt;b&gt;false&lt;/b&gt; make a condition false; any other value makes it true. The type &lt;em&gt;number&lt;/em&gt; represents both integer numbers and real (floating-point) numbers. The type &lt;em&gt;string&lt;/em&gt; represents immutable sequences of bytes. Lua is 8-bit clean: strings can contain any 8-bit value, including embedded zeros ('&lt;code&gt;\0&lt;/code&gt;'). Lua is also encoding-agnostic; it makes no assumptions about the contents of a string.</source>
          <target state="translated">Luaには8つの基本タイプがあります&lt;em&gt;。nil&lt;/em&gt;、&lt;em&gt;boolean&lt;/em&gt;、&lt;em&gt;number&lt;/em&gt;、&lt;em&gt;string&lt;/em&gt;、&lt;em&gt;function&lt;/em&gt;、&lt;em&gt;userdata&lt;/em&gt;、&lt;em&gt;thread&lt;/em&gt;、および&lt;em&gt;table&lt;/em&gt;です。タイプ&lt;em&gt;nilに&lt;/em&gt;は単一の値&lt;b&gt;nilがあり&lt;/b&gt;、その主なプロパティは他の値とは異なります。通常は、有用な値がないことを表します。型&lt;em&gt;boolean型は&lt;/em&gt; 2つの値がある&lt;b&gt;虚偽&lt;/b&gt;と&lt;b&gt;真実を&lt;/b&gt;。&lt;b&gt;nil&lt;/b&gt;と&lt;b&gt;falseは&lt;/b&gt;どちらも条件をfalseにします。他の値はそれを真にします。タイプ&lt;em&gt;番号&lt;/em&gt;整数と実数（浮動小数点）の両方を表します。&lt;em&gt;文字列&lt;/em&gt;型は、不変のバイトシーケンスを表します。Luaは8ビットクリーンです。文字列には、埋め込まれたゼロ（ ' &lt;code&gt;\0&lt;/code&gt; '）を含む、8ビット値を含めることができます。Luaはエンコーディングに依存しません。文字列の内容については想定していません。</target>
        </trans-unit>
        <trans-unit id="e4a1ac0a2e0cbd023852a04862ae5b37cf817438" translate="yes" xml:space="preserve">
          <source>There are two possible attributes: &lt;code&gt;const&lt;/code&gt;, which declares a constant variable, that is, a variable that cannot be assigned to after its initialization; and &lt;code&gt;close&lt;/code&gt;, which declares a to-be-closed variable (see &lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;). A list of variables can contain at most one to-be-closed variable.</source>
          <target state="translated">There are two possible attributes: &lt;code&gt;const&lt;/code&gt; , which declares a constant variable, that is, a variable that cannot be assigned to after its initialization; and &lt;code&gt;close&lt;/code&gt; , which declares a to-be-closed variable (see &lt;a href=&quot;#3.3.8&quot;&gt;&amp;sect;3.3.8&lt;/a&gt;). A list of variables can contain at most one to-be-closed variable.</target>
        </trans-unit>
        <trans-unit id="96a0eb6e93ec0e9480d194fa3833ccbc401284c3" translate="yes" xml:space="preserve">
          <source>There is a system-dependent limit on the number of values that a function may return. This limit is guaranteed to be greater than 1000.</source>
          <target state="translated">関数が返す値の数にはシステムに依存した制限があります。この制限は1000以上であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="7846fd1d69e8fc588a803bcf086d6b71c1b7e6c8" translate="yes" xml:space="preserve">
          <source>There is a system-dependent limit on the number of values that a function may return. This limit is guaranteed to be larger than 1000.</source>
          <target state="translated">関数が返す値の数にはシステムに依存した制限があります。この制限は1000より大きいことが保証されています。</target>
        </trans-unit>
        <trans-unit id="190864f70f817fcefb7920da72729737abc80388" translate="yes" xml:space="preserve">
          <source>There is no explicit function to close or to destroy a thread. Threads are subject to garbage collection, like any Lua object.</source>
          <target state="translated">スレッドを閉じたり破棄したりする明示的な関数はありません。スレッドは、他の Lua オブジェクトと同様にガベージコレクションの対象となります。</target>
        </trans-unit>
        <trans-unit id="cda37c5365062edc06713b41ab47ba449b3019c1" translate="yes" xml:space="preserve">
          <source>These constants are defined in the header file &lt;code&gt;lua.h&lt;/code&gt;.</source>
          <target state="translated">これらの定数は、ヘッダーファイル &lt;code&gt;lua.h&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="33a5b691e1bbd0d76427c85690ea834884923c9e" translate="yes" xml:space="preserve">
          <source>These operators always result in &lt;b&gt;false&lt;/b&gt; or &lt;b&gt;true&lt;/b&gt;.</source>
          <target state="translated">これらの演算子は常に&lt;b&gt;false&lt;/b&gt;または&lt;b&gt;trueになります&lt;/b&gt;。</target>
        </trans-unit>
        <trans-unit id="23af1fc0e094c2dd4a126a0afba341a0993ddceb" translate="yes" xml:space="preserve">
          <source>These unique identifiers allow a program to check whether different closures share upvalues. Lua closures that share an upvalue (that is, that access a same external local variable) will return identical ids for those upvalue indices.</source>
          <target state="translated">これらの一意の識別子を使用することで、異なるクロージャがアップバリューを共有しているかどうかを確認することができます。アップバリューを共有している Lua クローサ (同じ外部ローカル変数にアクセスしている場合)は、アップバリューのインデックスに対して同一の ID を返します。</target>
        </trans-unit>
        <trans-unit id="fcf0ac285f24f41a8021faef38d1d581f4af95ef" translate="yes" xml:space="preserve">
          <source>This function allocates a new block of memory with the given size, pushes onto the stack a new full userdata with the block address, and returns this address. The host program can freely use this memory.</source>
          <target state="translated">この関数は、指定されたサイズの新しいメモリブロックを確保し、そのブロックアドレスを持つ新しい完全なユーザデータをスタックにプッシュし、そのアドレスを返します。ホストプログラムはこのメモリを自由に使うことができます。</target>
        </trans-unit>
        <trans-unit id="80082966d6e2d690085ef70dbe523603499247be" translate="yes" xml:space="preserve">
          <source>This function assigns the value &lt;code&gt;value&lt;/code&gt; to the local variable with index &lt;code&gt;local&lt;/code&gt; of the function at level &lt;code&gt;level&lt;/code&gt; of the stack. The function returns &lt;b&gt;fail&lt;/b&gt; if there is no local variable with the given index, and raises an error when called with a &lt;code&gt;level&lt;/code&gt; out of range. (You can call &lt;code&gt;getinfo&lt;/code&gt; to check whether the level is valid.) Otherwise, it returns the name of the local variable.</source>
          <target state="translated">この関数は、スタックのレベル &lt;code&gt;level&lt;/code&gt; で、関数の &lt;code&gt;local&lt;/code&gt; インデックスを持つローカル変数に値の &lt;code&gt;value&lt;/code&gt; を割り当てます。指定されたインデックスを持つローカル変数がない場合、関数は&lt;b&gt;失敗を&lt;/b&gt;返し、範囲外の &lt;code&gt;level&lt;/code&gt; 呼び出されるとエラーを発生させます。（ &lt;code&gt;getinfo&lt;/code&gt; を呼び出して、レベルが有効かどうかを確認できます。）それ以外の場合は、ローカル変数の名前を返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="02ee19d0f7467cfbd14cfa290c226be8222d4802" translate="yes" xml:space="preserve">
          <source>This function assigns the value &lt;code&gt;value&lt;/code&gt; to the local variable with index &lt;code&gt;local&lt;/code&gt; of the function at level &lt;code&gt;level&lt;/code&gt; of the stack. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no local variable with the given index, and raises an error when called with a &lt;code&gt;level&lt;/code&gt; out of range. (You can call &lt;code&gt;getinfo&lt;/code&gt; to check whether the level is valid.) Otherwise, it returns the name of the local variable.</source>
          <target state="translated">この関数は、スタックのレベル &lt;code&gt;level&lt;/code&gt; で関数の &lt;code&gt;local&lt;/code&gt; インデックスを持つローカル変数に値 &lt;code&gt;value&lt;/code&gt; を割り当てます。この関数は、指定されたインデックスを持つローカル変数がない場合は&lt;b&gt;nilを&lt;/b&gt;返し、範囲外の &lt;code&gt;level&lt;/code&gt; 呼び出されるとエラーを発生させます。（レベルが有効かどうかを確認するために &lt;code&gt;getinfo&lt;/code&gt; を呼び出すことができます。）それ以外の場合は、ローカル変数の名前を返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="d4f42b7d060b48926fc5748edd544aaabb74f7f0" translate="yes" xml:space="preserve">
          <source>This function assigns the value &lt;code&gt;value&lt;/code&gt; to the upvalue with index &lt;code&gt;up&lt;/code&gt; of the function &lt;code&gt;f&lt;/code&gt;. The function returns &lt;b&gt;fail&lt;/b&gt; if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.</source>
          <target state="translated">この関数は、関数 &lt;code&gt;f&lt;/code&gt; のインデックス &lt;code&gt;up&lt;/code&gt; を使用して &lt;code&gt;value&lt;/code&gt; をupvalueに割り当てます。指定されたインデックスにアップバリューがない場合、関数は&lt;b&gt;失敗を&lt;/b&gt;返します。それ以外の場合は、アップバリューの名前を返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b7496e2514cb1dfc80c2cf0b9e57db48fa2c53f8" translate="yes" xml:space="preserve">
          <source>This function assigns the value &lt;code&gt;value&lt;/code&gt; to the upvalue with index &lt;code&gt;up&lt;/code&gt; of the function &lt;code&gt;f&lt;/code&gt;. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no upvalue with the given index. Otherwise, it returns the name of the upvalue.</source>
          <target state="translated">この関数は、関数 &lt;code&gt;f&lt;/code&gt; のインデックス &lt;code&gt;up&lt;/code&gt; を使用して、値 &lt;code&gt;value&lt;/code&gt; をupvalueに割り当てます。この関数は、指定されたインデックスにアップ値がない場合は&lt;b&gt;nilを&lt;/b&gt;返します。それ以外の場合は、上位値の名前を返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="ca95f2234def804d470e8cb89141fa32f72381d2" translate="yes" xml:space="preserve">
          <source>This function assumes that &lt;code&gt;s&lt;/code&gt; is a valid UTF-8 string.</source>
          <target state="translated">この関数は、 &lt;code&gt;s&lt;/code&gt; が有効なUTF-8文字列であることを前提としています。</target>
        </trans-unit>
        <trans-unit id="9890c3cbbc40d1dddc0de99ae46a48146fcb130a" translate="yes" xml:space="preserve">
          <source>This function behaves exactly like &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;, but allows the called function to yield (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;).</source>
          <target state="translated">この関数は&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;とまったく同じように動作しますが、呼び出された関数が生成できるようにします（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="580c46d5d2b043293bd752a3640317342ee77988" translate="yes" xml:space="preserve">
          <source>This function behaves exactly like &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;, but allows the called function to yield (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">この関数は&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;とまったく同じように動作しますが、呼び出された関数が譲れるようにします（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="228ffaca57d64d62cbfa46f275e2308925e5e66b" translate="yes" xml:space="preserve">
          <source>This function behaves exactly like &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, but allows the called function to yield (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">この関数は&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;とまったく同じように動作しますが、呼び出された関数が生成できるようにします（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6950878744f6693dff083a31e116fc5f8c212d8b" translate="yes" xml:space="preserve">
          <source>This function behaves exactly like &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, except that it allows the called function to yield (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;).</source>
          <target state="translated">この関数は、呼び出された関数が生成できることを除いて、&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;とまったく同じように動作します（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ef5d902b412506777fd97b25d07c93121dc8d6e1" translate="yes" xml:space="preserve">
          <source>This function can raise an error if it is called from a thread with a pending C call with no continuation function (what is called a &lt;em&gt;C-call boundary&lt;/em&gt;), or it is called from a thread that is not running inside a resume (typically the main thread).</source>
          <target state="translated">この関数は、継続関数のない保留中のC呼び出しがあるスレッド（いわゆる&lt;em&gt;C呼び出し境界&lt;/em&gt;）から呼び出された場合、またはレジューム内で実行されていないスレッドから呼び出された場合（通常はメインスレッド）。</target>
        </trans-unit>
        <trans-unit id="1bff58bee943ec12e3d7290610d93d1b1f73d8e7" translate="yes" xml:space="preserve">
          <source>This function can raise an error if it is called from a thread with a pending C call with no continuation function, or it is called from a thread that is not running inside a resume (e.g., the main thread).</source>
          <target state="translated">この関数は、継続関数を持たない保留中のCコールを持つスレッドから呼び出された場合や、レジューム内で動作していないスレッド(メインスレッドなど)から呼び出された場合にエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="66854dc63d240dfdfb45adabbcf93e7e8754325d" translate="yes" xml:space="preserve">
          <source>This function creates and pushes on the stack a new full userdata, with &lt;code&gt;nuvalue&lt;/code&gt; associated Lua values, called &lt;code&gt;user values&lt;/code&gt;, plus an associated block of raw memory with &lt;code&gt;size&lt;/code&gt; bytes. (The user values can be set and read with the functions &lt;a href=&quot;#lua_setiuservalue&quot;&gt;&lt;code&gt;lua_setiuservalue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#lua_getiuservalue&quot;&gt;&lt;code&gt;lua_getiuservalue&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">この関数は、 &lt;code&gt;user values&lt;/code&gt; と呼ばれる &lt;code&gt;nuvalue&lt;/code&gt; に関連付けられたLua値と、 &lt;code&gt;size&lt;/code&gt; バイトのrawメモリの関連付けられたブロックを含む新しい完全なuserdataを作成し、スタックにプッシュします。（ユーザー値は、関数&lt;a href=&quot;#lua_setiuservalue&quot;&gt; &lt;code&gt;lua_setiuservalue&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#lua_getiuservalue&quot;&gt; &lt;code&gt;lua_getiuservalue&lt;/code&gt; を使用&lt;/a&gt;して設定および読み取りできます。）</target>
        </trans-unit>
        <trans-unit id="54be94a59f0bc6784fed88d3a32e726d290eea51" translate="yes" xml:space="preserve">
          <source>This function does not pop the Lua function from the stack.</source>
          <target state="translated">この関数は、スタックからLua関数をポップしません。</target>
        </trans-unit>
        <trans-unit id="2481d6e1ad7079fac144cbb94c27fa70e98a36a3" translate="yes" xml:space="preserve">
          <source>This function fills parts of a &lt;a href=&quot;#lua_Debug&quot;&gt;&lt;code&gt;lua_Debug&lt;/code&gt;&lt;/a&gt; structure with an identification of the &lt;em&gt;activation record&lt;/em&gt; of the function executing at a given level. Level 0 is the current running function, whereas level &lt;em&gt;n+1&lt;/em&gt; is the function that has called level &lt;em&gt;n&lt;/em&gt; (except for tail calls, which do not count in the stack). When called with a level greater than the stack depth, &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; returns 0; otherwise it returns 1.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#lua_Debug&quot;&gt; &lt;code&gt;lua_Debug&lt;/code&gt; &lt;/a&gt;構造体の一部に、特定のレベルで実行されている関数の&lt;em&gt;アクティブ化レコードの&lt;/em&gt;IDを入力します。レベル0は現在実行中の関数ですが、レベル&lt;em&gt;n + 1&lt;/em&gt;はレベル&lt;em&gt;n&lt;/em&gt;を呼び出した関数です（スタックにカウントされない末尾呼び出しを除く）。スタックの深さよりも大きいレベルで呼び出されると、&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;は0を返します。それ以外の場合は1を返します。</target>
        </trans-unit>
        <trans-unit id="b380c64bb33a1e7916dc907712574229b22846ec" translate="yes" xml:space="preserve">
          <source>This function fills parts of a &lt;a href=&quot;#lua_Debug&quot;&gt;&lt;code&gt;lua_Debug&lt;/code&gt;&lt;/a&gt; structure with an identification of the &lt;em&gt;activation record&lt;/em&gt; of the function executing at a given level. Level 0 is the current running function, whereas level &lt;em&gt;n+1&lt;/em&gt; is the function that has called level &lt;em&gt;n&lt;/em&gt; (except for tail calls, which do not count on the stack). When there are no errors, &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; returns 1; when called with a level greater than the stack depth, it returns 0.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#lua_Debug&quot;&gt; &lt;code&gt;lua_Debug&lt;/code&gt; &lt;/a&gt;構造体の一部を、指定されたレベルで実行される関数の&lt;em&gt;アクティブ化レコードの&lt;/em&gt;識別で埋めます。レベル0は現在実行中の関数ですが、レベル&lt;em&gt;n + 1&lt;/em&gt;はレベル&lt;em&gt;n&lt;/em&gt;を呼び出した関数です（スタックでカウントされない末尾呼び出しを除く）。エラーがない場合、&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;は1を返します。スタックの深さより大きいレベルで呼び出されると、0を返します。</target>
        </trans-unit>
        <trans-unit id="024557e7c0e16ad2ced2b25eb7a968becab0102d" translate="yes" xml:space="preserve">
          <source>This function has the following restrictions:</source>
          <target state="translated">この関数には以下の制限があります。</target>
        </trans-unit>
        <trans-unit id="95f4de101d63040fc5211037c7343d4c56e0ad01" translate="yes" xml:space="preserve">
          <source>This function is a generic interface to the garbage collector. It performs different functions according to its first argument, &lt;code&gt;opt&lt;/code&gt;:</source>
          <target state="translated">この関数は、ガベージコレクターへの汎用インターフェイスです。最初の引数 &lt;code&gt;opt&lt;/code&gt; に応じて、さまざまな機能を実行します。</target>
        </trans-unit>
        <trans-unit id="d28a53b3b111db987336d2926f880313a09864bb" translate="yes" xml:space="preserve">
          <source>This function is an interface to the underling pseudo-random generator function provided by C.</source>
          <target state="translated">この関数は、Cで提供されているアンダーリング擬似乱数生成関数へのインターフェースです。</target>
        </trans-unit>
        <trans-unit id="1f6bb805a39a7c15cbab2acf8a9252c04d7c39ee" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, but it has no continuation (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;). Therefore, when the thread resumes, it continues the function that called the function calling &lt;code&gt;lua_yield&lt;/code&gt;. To avoid surprises, this function should be called only in a tail call.</source>
          <target state="translated">この関数は&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;と同等ですが、継続はありません（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。したがって、スレッドが再開すると、 &lt;code&gt;lua_yield&lt;/code&gt; を呼び出す関数を呼び出した関数が続行されます。驚きを避けるために、この関数は末尾呼び出しでのみ呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="f98115d2ab8e4d7be0cefa4bae9be552429cd8c3" translate="yes" xml:space="preserve">
          <source>This function is equivalent to &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, but it has no continuation (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;). Therefore, when the thread resumes, it continues the function that called the function calling &lt;code&gt;lua_yield&lt;/code&gt;.</source>
          <target state="translated">この関数は&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;と同等ですが、継続はありません（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7を&lt;/a&gt;参照）。したがって、スレッドが再開すると、 &lt;code&gt;lua_yield&lt;/code&gt; を呼び出す関数を呼び出した関数が続行されます。</target>
        </trans-unit>
        <trans-unit id="09df5ee7dcda106a1d20f49f414f02662778ab04" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the ISO C function &lt;code&gt;system&lt;/code&gt;. It passes &lt;code&gt;command&lt;/code&gt; to be executed by an operating system shell. Its first result is &lt;b&gt;true&lt;/b&gt; if the command terminated successfully, or &lt;b&gt;fail&lt;/b&gt; otherwise. After this first result the function returns a string plus a number, as follows:</source>
          <target state="translated">この関数は、ISOC関数 &lt;code&gt;system&lt;/code&gt; と同等です。オペレーティングシステムシェルによって実行される &lt;code&gt;command&lt;/code&gt; を渡します。最初の結果は、コマンドが正常に終了した場合は&lt;b&gt;true&lt;/b&gt;、それ以外の場合は&lt;b&gt;失敗し&lt;/b&gt;ます。この最初の結果の後、関数は次のように文字列と数値を返します。</target>
        </trans-unit>
        <trans-unit id="670f5f1a9510a05d3452d6c53437d60b035753b4" translate="yes" xml:space="preserve">
          <source>This function is equivalent to the ISO C function &lt;code&gt;system&lt;/code&gt;. It passes &lt;code&gt;command&lt;/code&gt; to be executed by an operating system shell. Its first result is &lt;b&gt;true&lt;/b&gt; if the command terminated successfully, or &lt;b&gt;nil&lt;/b&gt; otherwise. After this first result the function returns a string plus a number, as follows:</source>
          <target state="translated">この関数は、ISO C関数 &lt;code&gt;system&lt;/code&gt; と同等です。オペレーティングシステムシェルによって実行される &lt;code&gt;command&lt;/code&gt; を渡します。最初の結果は、コマンドが正常に終了した場合は&lt;b&gt;true&lt;/b&gt;、それ以外の場合は&lt;b&gt;nil&lt;/b&gt;です。この最初の結果の後、関数は次のように文字列と数値を返します。</target>
        </trans-unit>
        <trans-unit id="d3b4b199ecaac9ea3831e4133d9a32cb7ae19470" translate="yes" xml:space="preserve">
          <source>This function is inherently insecure, as it allows Lua to call any function in any readable dynamic library in the system. (Lua calls any function assuming the function has a proper prototype and respects a proper protocol (see &lt;a href=&quot;#lua_CFunction&quot;&gt;&lt;code&gt;lua_CFunction&lt;/code&gt;&lt;/a&gt;). Therefore, calling an arbitrary function in an arbitrary dynamic library more often than not results in an access violation.)</source>
          <target state="translated">この関数は、Luaがシステム内の読み取り可能なダイナミックライブラリ内の任意の関数を呼び出すことができるため、本質的に安全ではありません。（Luaは、関数に適切なプロトタイプがあり、適切なプロトコルを尊重していると仮定して、任意の関数を呼び出します（&lt;a href=&quot;#lua_CFunction&quot;&gt; &lt;code&gt;lua_CFunction&lt;/code&gt; を&lt;/a&gt;参照）。したがって、任意のダイナミックライブラリ内の任意の関数を呼び出すと、アクセス違反が発生することがよくあります。）</target>
        </trans-unit>
        <trans-unit id="e1a39cb0734d0402904008bd0b6e1f1f1778321f" translate="yes" xml:space="preserve">
          <source>This function is not supported by Standard C. As such, it is only available on some platforms (Windows, Linux, Mac OS X, Solaris, BSD, plus other Unix systems that support the &lt;code&gt;dlfcn&lt;/code&gt; standard).</source>
          <target state="translated">この関数は標準Cではサポートされていません。そのため、一部のプラットフォーム（Windows、Linux、Mac OS X、Solaris、BSD、および &lt;code&gt;dlfcn&lt;/code&gt; 標準をサポートする他のUnixシステム）でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="09ff91542609c4270a5672d90a1b6660e19831ef" translate="yes" xml:space="preserve">
          <source>This function is similar to &lt;a href=&quot;#pdf-pcall&quot;&gt;&lt;code&gt;pcall&lt;/code&gt;&lt;/a&gt;, except that it sets a new message handler &lt;code&gt;msgh&lt;/code&gt;.</source>
          <target state="translated">この関数は、新しいメッセージハンドラー &lt;code&gt;msgh&lt;/code&gt; を設定することを除いて、&lt;a href=&quot;#pdf-pcall&quot;&gt; &lt;code&gt;pcall&lt;/code&gt; &lt;/a&gt;に似ています。</target>
        </trans-unit>
        <trans-unit id="717f7af51aaada41e5e3c40f203c1a8fa9d3bad9" translate="yes" xml:space="preserve">
          <source>This function is system dependent and is not available on all platforms.</source>
          <target state="translated">この機能はシステムに依存しており、すべてのプラットフォームで利用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="11f290796c947e6dfdea50bcfa8240bdb86eb8a0" translate="yes" xml:space="preserve">
          <source>This function is used to build a prefix for error messages.</source>
          <target state="translated">この関数は、エラーメッセージのプレフィックスを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ab9f48a6c272547f77904d32d9efdba0ecb10345" translate="yes" xml:space="preserve">
          <source>This function may be not thread safe because of its reliance on C function &lt;code&gt;setlocale&lt;/code&gt;.</source>
          <target state="translated">この関数は、C関数 &lt;code&gt;setlocale&lt;/code&gt; に依存しているため、スレッドセーフではない場合があります。</target>
        </trans-unit>
        <trans-unit id="f5e00f4b8570418e20286901c0f8bb0744338ebc" translate="yes" xml:space="preserve">
          <source>This function may raise an error if the given key is neither &lt;b&gt;nil&lt;/b&gt; nor present in the table. See function &lt;a href=&quot;#pdf-next&quot;&gt;&lt;code&gt;next&lt;/code&gt;&lt;/a&gt; for the caveats of modifying the table during its traversal.</source>
          <target state="translated">指定されたキーが&lt;b&gt;nil&lt;/b&gt;でもテーブルにも存在しない場合、この関数はエラーを発生させる可能性があります。トラバーサル中にテーブルを変更する際の注意事項については、&lt;a href=&quot;#pdf-next&quot;&gt; &lt;code&gt;next&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9bf98dd64c563d3dc312b225a1b47e8d89ef87d" translate="yes" xml:space="preserve">
          <source>This function may raise errors due to memory overflow or an invalid conversion specifier.</source>
          <target state="translated">この関数は,メモリオーバーフローや無効な変換指定子のためにエラーを発生させることがあります。</target>
        </trans-unit>
        <trans-unit id="76e84460922436ebf110cd9c953279251f6cb0bb" translate="yes" xml:space="preserve">
          <source>This function never returns, but it is an idiom to use it in C functions as &lt;code&gt;return luaL_error(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt;.</source>
          <target state="translated">この関数は決して戻りませんが、C関数でそれを &lt;code&gt;return luaL_error(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; として使用することは慣用です。</target>
        </trans-unit>
        <trans-unit id="7a6a8e72aaf1ce15e733e732a309d591ddf3339d" translate="yes" xml:space="preserve">
          <source>This function never returns.</source>
          <target state="translated">この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="dbd53ac438e83a0043cb356691fb688496f31d3d" translate="yes" xml:space="preserve">
          <source>This function opens a file, in the mode specified in the string &lt;code&gt;mode&lt;/code&gt;. In case of success, it returns a new file handle.</source>
          <target state="translated">この関数は、文字列 &lt;code&gt;mode&lt;/code&gt; 指定されたモードでファイルを開きます。成功した場合は、新しいファイルハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="48efe0efa8028e0841dad22b3bd2dd2fd225e975" translate="yes" xml:space="preserve">
          <source>This function performs several tasks, according to the value of the parameter &lt;code&gt;what&lt;/code&gt;. For options that need extra arguments, they are listed after the option.</source>
          <target state="translated">この関数は、パラメーター &lt;code&gt;what&lt;/code&gt; の値に応じて、いくつかのタスクを実行します。追加の引数が必要なオプションについては、オプションの後にリストされています。</target>
        </trans-unit>
        <trans-unit id="1586e455af396a0193bb677436a0ad64943d1618" translate="yes" xml:space="preserve">
          <source>This function performs several tasks, according to the value of the parameter &lt;code&gt;what&lt;/code&gt;:</source>
          <target state="translated">この関数は、パラメーター &lt;code&gt;what&lt;/code&gt; の値に応じて、いくつかのタスクを実行します。</target>
        </trans-unit>
        <trans-unit id="bc205d90b6658beebf2ab75bca0642c69aa0ce84" translate="yes" xml:space="preserve">
          <source>This function pops &lt;code&gt;n&lt;/code&gt; values from the stack &lt;code&gt;from&lt;/code&gt;, and pushes them onto the stack &lt;code&gt;to&lt;/code&gt;.</source>
          <target state="translated">この関数は、スタック &lt;code&gt;from&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; 個の値をからポップし、それらをスタック &lt;code&gt;to&lt;/code&gt; プッシュします。</target>
        </trans-unit>
        <trans-unit id="4693da6260e34753896c1e887316822f4ced3e1d" translate="yes" xml:space="preserve">
          <source>This function pops both the key and the value from the stack. As in Lua, this function may trigger a metamethod for the &quot;newindex&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">この関数は、スタックからキーと値の両方をポップします。Luaと同様に、この関数は「newindex」イベントのメタメソッドをトリガーする場合があります（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="02f15be23e4eaf0571f919cc7f7e66b956f4d346" translate="yes" xml:space="preserve">
          <source>This function pops the key from the stack, pushing the resulting value in its place. As in Lua, this function may trigger a metamethod for the &quot;index&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">この関数はスタックからキーをポップし、結果の値をその場所にプッシュします。Luaと同様に、この関数は「index」イベントの&lt;a href=&quot;#2.4&quot;&gt;メタメソッドを&lt;/a&gt;トリガーする場合があります（&amp;sect;2.4を参照）。</target>
        </trans-unit>
        <trans-unit id="02c44d9ce8f4d61b45f6e95f4c2615a475b30c3d" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. As in Lua, this function may trigger a metamethod for the &quot;newindex&quot; event (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">この関数は、スタックから値をポップします。Luaと同様に、この関数は「newindex」イベントのメタメソッドをトリガーする場合があります（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d650072e7d52525aa4e9529e95f455ff101b8ac7" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. The assignment is raw, that is, it does not invoke &lt;code&gt;__newindex&lt;/code&gt; metamethod.</source>
          <target state="translated">この関数は、スタックから値をポップします。割り当ては未加工です。 &lt;code&gt;__newindex&lt;/code&gt; ません。</target>
        </trans-unit>
        <trans-unit id="4dc9661dd76f18a4a7b7bac51f4e0d8886007ef1" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. The assignment is raw, that is, it does not invoke the &lt;code&gt;__newindex&lt;/code&gt; metamethod.</source>
          <target state="translated">この関数は、スタックから値をポップします。割り当ては生の &lt;code&gt;__newindex&lt;/code&gt; です。つまり、__ newindexメタメソッドを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="819a7807b617b8fa803512c61d1ba2dc4d437101" translate="yes" xml:space="preserve">
          <source>This function pops the value from the stack. The assignment is raw, that is, it does not use the &lt;code&gt;__newindex&lt;/code&gt; metavalue.</source>
          <target state="translated">この関数は、スタックから値をポップします。割り当ては生です。つまり、 &lt;code&gt;__newindex&lt;/code&gt; newindexメタ値を使用しません。</target>
        </trans-unit>
        <trans-unit id="6ab41c2efc54cdc4ab08b428ef1fab2ac04e1717" translate="yes" xml:space="preserve">
          <source>This function produces the return values for file-related functions in the standard library (&lt;a href=&quot;#pdf-io.open&quot;&gt;&lt;code&gt;io.open&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-os.rename&quot;&gt;&lt;code&gt;os.rename&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-file:seek&quot;&gt;&lt;code&gt;file:seek&lt;/code&gt;&lt;/a&gt;, etc.).</source>
          <target state="translated">この関数は、標準ライブラリのファイル関連関数（&lt;a href=&quot;#pdf-io.open&quot;&gt; &lt;code&gt;io.open&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-os.rename&quot;&gt; &lt;code&gt;os.rename&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-file:seek&quot;&gt; &lt;code&gt;file:seek&lt;/code&gt; &lt;/a&gt;など）の戻り値を生成します。</target>
        </trans-unit>
        <trans-unit id="7ba307bd4b8d4a518ec757e560baba91e283126d" translate="yes" xml:space="preserve">
          <source>This function produces the return values for process-related functions in the standard library (&lt;a href=&quot;#pdf-os.execute&quot;&gt;&lt;code&gt;os.execute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-io.close&quot;&gt;&lt;code&gt;io.close&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">この関数は、標準ライブラリ（&lt;a href=&quot;#pdf-os.execute&quot;&gt; &lt;code&gt;os.execute&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#pdf-io.close&quot;&gt; &lt;code&gt;io.close&lt;/code&gt; &lt;/a&gt;）内のプロセス関連関数の戻り値を生成します。</target>
        </trans-unit>
        <trans-unit id="b6746e2c8158506c924e3d9368f6e2be32b4e0d2" translate="yes" xml:space="preserve">
          <source>This function returns 0 on error (for instance, an invalid option in &lt;code&gt;what&lt;/code&gt;).</source>
          <target state="translated">この関数はエラー時に0を返します（たとえば、 &lt;code&gt;what&lt;/code&gt; の無効なオプション）。</target>
        </trans-unit>
        <trans-unit id="007342df8b0ff02345d55706dd45be96b5514f81" translate="yes" xml:space="preserve">
          <source>This function returns 0 to signal an invalid option in &lt;code&gt;what&lt;/code&gt;; even then the valid options are handled correctly.</source>
          <target state="translated">この関数は0を返し、 &lt;code&gt;what&lt;/code&gt; で無効なオプションを通知します。それでも、有効なオプションは正しく処理されます。</target>
        </trans-unit>
        <trans-unit id="9a4eda5d295976dd3059ff0cebee20501ad1d66f" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;table&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;table&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="dedc3ddfbc8f8f82058b7b55965c12222160cb90" translate="yes" xml:space="preserve">
          <source>This function returns the name and the value of the local variable with index &lt;code&gt;local&lt;/code&gt; of the function at level &lt;code&gt;f&lt;/code&gt; of the stack. This function accesses not only explicit local variables, but also parameters and temporary values.</source>
          <target state="translated">この関数は、スタックのレベル &lt;code&gt;f&lt;/code&gt; にある関数の &lt;code&gt;local&lt;/code&gt; インデックスを持つローカル変数の名前と値を返します。この関数は、明示的なローカル変数だけでなく、パラメーターと一時値にもアクセスします。</target>
        </trans-unit>
        <trans-unit id="cbb6c1599fe3ff6cd07d37a480afe2c16e49c014" translate="yes" xml:space="preserve">
          <source>This function returns the name and the value of the local variable with index &lt;code&gt;local&lt;/code&gt; of the function at level &lt;code&gt;f&lt;/code&gt; of the stack. This function accesses not only explicit local variables, but also parameters, temporaries, etc.</source>
          <target state="translated">この関数は、スタックのレベル &lt;code&gt;f&lt;/code&gt; での関数のインデックス &lt;code&gt;local&lt;/code&gt; を持つローカル変数の名前と値を返します。この関数は、明示的なローカル変数だけでなく、パラメーター、一時変数などにもアクセスします。</target>
        </trans-unit>
        <trans-unit id="6f127ef7aa5ca9413741861659f87c5d2122763a" translate="yes" xml:space="preserve">
          <source>This function returns the name and the value of the upvalue with index &lt;code&gt;up&lt;/code&gt; of the function &lt;code&gt;f&lt;/code&gt;. The function returns &lt;b&gt;fail&lt;/b&gt; if there is no upvalue with the given index.</source>
          <target state="translated">この関数は、関数 &lt;code&gt;f&lt;/code&gt; のインデックス &lt;code&gt;up&lt;/code&gt; を使用してupvalueの名前と値を返します。指定されたインデックスにアップバリューがない場合、関数は&lt;b&gt;失敗を&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="11dccabc4359a103d70b6a183c7d1b9e295f7d04" translate="yes" xml:space="preserve">
          <source>This function returns the name and the value of the upvalue with index &lt;code&gt;up&lt;/code&gt; of the function &lt;code&gt;f&lt;/code&gt;. The function returns &lt;b&gt;nil&lt;/b&gt; if there is no upvalue with the given index.</source>
          <target state="translated">この関数は、関数 &lt;code&gt;f&lt;/code&gt; のインデックス &lt;code&gt;up&lt;/code&gt; を持つupvalueの名前と値を返します。この関数は、指定されたインデックスにアップ値がない場合は&lt;b&gt;nilを&lt;/b&gt;返します。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="dbabb13e68eb92f970ce1720014ee57a5f7be9a6" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#pdf-LUA_ERRFILE&quot;&gt;&lt;code&gt;LUA_ERRFILE&lt;/code&gt;&lt;/a&gt; for file-related errors.</source>
          <target state="translated">この関数は、ファイル関連のエラーに対して&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#pdf-LUA_ERRFILE&quot;&gt; &lt;code&gt;LUA_ERRFILE&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="bebb641f92b0e70a08302c805cbf864b58b36eaf" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;, but it has an extra error code &lt;a id=&quot;pdf-LUA_ERRFILE&quot;&gt;&lt;code&gt;LUA_ERRFILE&lt;/code&gt;&lt;/a&gt; for file-related errors (e.g., it cannot open or read the file).</source>
          <target state="translated">この関数は&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;と同じ結果を返しますが、ファイル関連のエラー（たとえば、ファイルを開いたり読み取ったりできない）に対して追加のエラーコード&lt;a id=&quot;pdf-LUA_ERRFILE&quot;&gt; &lt;code&gt;LUA_ERRFILE&lt;/code&gt; &lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="6596dd0254b38c840e56683db82740f29df06f33" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="c0db593e94c92390f3357b35159d95eee2be2609" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;name&lt;/code&gt; is the chunk name, used for debug information and error messages. The string &lt;code&gt;mode&lt;/code&gt; works as in function &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。 &lt;code&gt;name&lt;/code&gt; は、デバッグ情報とエラーメッセージに使用されるチャンク名です。文字列 &lt;code&gt;mode&lt;/code&gt; は関数&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="fa91cf9c69a1d6d718bdf5a3abdd1697403c8a5e" translate="yes" xml:space="preserve">
          <source>This function returns the same results as &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;name&lt;/code&gt; is the chunk name, used for debug information and error messages. The string &lt;code&gt;mode&lt;/code&gt; works as in the function &lt;a href=&quot;#lua_load&quot;&gt;&lt;code&gt;lua_load&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; &lt;/a&gt;と同じ結果を返します。 &lt;code&gt;name&lt;/code&gt; はチャンク名であり、デバッグ情報とエラーメッセージに使用されます。文字列 &lt;code&gt;mode&lt;/code&gt; は、関数&lt;a href=&quot;#lua_load&quot;&gt; &lt;code&gt;lua_load&lt;/code&gt; の&lt;/a&gt;ように機能します。</target>
        </trans-unit>
        <trans-unit id="cf38c50a3f108c7ed76db3fdffae7549d0d9313a" translate="yes" xml:space="preserve">
          <source>This function returns the two seed components that were effectively used, so that setting them again repeats the sequence.</source>
          <target state="translated">この関数は、有効に使用された2つのシード成分を返します。</target>
        </trans-unit>
        <trans-unit id="fbd05accb35e1396e632daa50237769ee36b8264" translate="yes" xml:space="preserve">
          <source>This function should not be called for an index that is equal to or below an active to-be-closed index.</source>
          <target state="translated">この関数は、アクティブなクローズ予定インデックスと同じかそれ以下のインデックスに対しては呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="5412475350d1ee79055711d0c4350d66e69ffd6d" translate="yes" xml:space="preserve">
          <source>This function uses &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; to get its result, so all conversions and caveats of that function apply here.</source>
          <target state="translated">この関数はその結果を取得するために&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;を使用するため、その関数のすべての変換と警告がここに適用されます。</target>
        </trans-unit>
        <trans-unit id="f440effb67a02807b5514a47b986fa3c896b974d" translate="yes" xml:space="preserve">
          <source>This function uses the &lt;code&gt;xoshiro256**&lt;/code&gt; algorithm to produce pseudo-random 64-bit integers, which are the results of calls with argument 0. Other results (ranges and floats) are unbiased extracted from these integers.</source>
          <target state="translated">この関数は、 &lt;code&gt;xoshiro256**&lt;/code&gt; アルゴリズムを使用して、引数0の呼び出しの結果である疑似ランダム64ビット整数を生成します。他の結果（範囲と浮動小数点数）は、これらの整数から偏りなく抽出されます。</target>
        </trans-unit>
        <trans-unit id="e2d4ea61bcf0f5292e3f253adc7c53a2139d8438" translate="yes" xml:space="preserve">
          <source>This function works like &lt;a href=&quot;#luaL_checkudata&quot;&gt;&lt;code&gt;luaL_checkudata&lt;/code&gt;&lt;/a&gt;, except that, when the test fails, it returns &lt;code&gt;NULL&lt;/code&gt; instead of raising an error.</source>
          <target state="translated">この関数は&lt;a href=&quot;#luaL_checkudata&quot;&gt; &lt;code&gt;luaL_checkudata&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、テストが失敗した場合、エラーを発生させる代わりに &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6563d8fb9cdba4b8e66ee93d7bd36fb67b77cff7" translate="yes" xml:space="preserve">
          <source>This is a low-level function. It completely bypasses the package and module system. Unlike &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;, it does not perform any path searching and does not automatically adds extensions. &lt;code&gt;libname&lt;/code&gt; must be the complete file name of the C library, including if necessary a path and an extension. &lt;code&gt;funcname&lt;/code&gt; must be the exact name exported by the C library (which may depend on the C compiler and linker used).</source>
          <target state="translated">これは低レベル関数です。パッケージとモジュールシステムを完全にバイパスします。&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;とは異なり、パス検索を実行せず、拡張子を自動的に追加しません。 &lt;code&gt;libname&lt;/code&gt; は、必要に応じてパスと拡張子を含む、Cライブラリの完全なファイル名でなければなりません。 &lt;code&gt;funcname&lt;/code&gt; は、Cライブラリによってエクスポートされた正確な名前である必要があります（使用されるCコンパイラおよびリンカーによって異なる場合があります）。</target>
        </trans-unit>
        <trans-unit id="fd11429b923b744979c7d1f098bd69f96f85f6c0" translate="yes" xml:space="preserve">
          <source>This is a useful function for mapping strings to C enums. (The usual convention in Lua libraries is to use strings instead of numbers to select options.)</source>
          <target state="translated">文字列をCの列挙型にマッピングするのに便利な関数です。(Lua ライブラリでは、オプションを選択する際に数値ではなく文字列を使用するのが一般的です)。</target>
        </trans-unit>
        <trans-unit id="753037500c4fa6eda5c0c6251d0c5a1a859a582c" translate="yes" xml:space="preserve">
          <source>This is the only function on string buffers that can (and must) be called with an extra element on the stack, which is the value to be added to the buffer.</source>
          <target state="translated">これは文字列バッファ上の唯一の関数であり、スタック上の余分な要素(バッファに追加される値)を指定して呼び出すことができます(また、必ず呼び出す必要があります)。</target>
        </trans-unit>
        <trans-unit id="fc6eb47b441fdf44e1e8bc0429e02c5da92dec89" translate="yes" xml:space="preserve">
          <source>This is the only option that can raise a memory error.</source>
          <target state="translated">メモリエラーを発生させることができる唯一のオプションです。</target>
        </trans-unit>
        <trans-unit id="90d6873741ea710dec0793ac5a59b32c0c418fac" translate="yes" xml:space="preserve">
          <source>This library comprises the operations to manipulate coroutines, which come inside the table &lt;a id=&quot;pdf-coroutine&quot;&gt;&lt;code&gt;coroutine&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6&lt;/a&gt; for a general description of coroutines.</source>
          <target state="translated">このライブラリは、テーブル&lt;a id=&quot;pdf-coroutine&quot;&gt; &lt;code&gt;coroutine&lt;/code&gt; &lt;/a&gt;内にあるコルーチンを操作する操作で構成されています。コルーチンの一般的な説明については、&lt;a href=&quot;#2.6&quot;&gt;&amp;sect;2.6&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="90c1b961ab3b38c58be563362f0802d45e85c135" translate="yes" xml:space="preserve">
          <source>This library is implemented through table &lt;a id=&quot;pdf-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このライブラリは、テーブル&lt;a id=&quot;pdf-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;を介して実装されます。</target>
        </trans-unit>
        <trans-unit id="677be47bd4a9ee27a5f7b1353939b6d0981e1e42" translate="yes" xml:space="preserve">
          <source>This library provides basic mathematical functions. It provides all its functions and constants inside the table &lt;a id=&quot;pdf-math&quot;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt;. Functions with the annotation &quot;&lt;code&gt;integer/float&lt;/code&gt;&quot; give integer results for integer arguments and float results for float (or mixed) arguments. Rounding functions (&lt;a href=&quot;#pdf-math.ceil&quot;&gt;&lt;code&gt;math.ceil&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-math.floor&quot;&gt;&lt;code&gt;math.floor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-math.modf&quot;&gt;&lt;code&gt;math.modf&lt;/code&gt;&lt;/a&gt;) return an integer when the result fits in the range of an integer, or a float otherwise.</source>
          <target state="translated">このライブラリは、基本的な数学関数を提供します。テーブル&lt;a id=&quot;pdf-math&quot;&gt; &lt;code&gt;math&lt;/code&gt; &lt;/a&gt;内にすべての関数と定数を提供します。注釈「 &lt;code&gt;integer/float&lt;/code&gt; 」が付いた関数は、整数の引数には整数の結果を、浮動小数点（または混合）引数には浮動小数点の結果を返します。丸め関数（&lt;a href=&quot;#pdf-math.ceil&quot;&gt; &lt;code&gt;math.ceil&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-math.floor&quot;&gt; &lt;code&gt;math.floor&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#pdf-math.modf&quot;&gt; &lt;code&gt;math.modf&lt;/code&gt; &lt;/a&gt;）は、結果が整数の範囲に収まる場合は整数を返し、そうでない場合は浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="fda34771150302c5e6235e047b8a7d6f844dd96f" translate="yes" xml:space="preserve">
          <source>This library provides basic mathematical functions. It provides all its functions and constants inside the table &lt;a id=&quot;pdf-math&quot;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt;. Functions with the annotation &quot;&lt;code&gt;integer/float&lt;/code&gt;&quot; give integer results for integer arguments and float results for non-integer arguments. The rounding functions &lt;a href=&quot;#pdf-math.ceil&quot;&gt;&lt;code&gt;math.ceil&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-math.floor&quot;&gt;&lt;code&gt;math.floor&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#pdf-math.modf&quot;&gt;&lt;code&gt;math.modf&lt;/code&gt;&lt;/a&gt; return an integer when the result fits in the range of an integer, or a float otherwise.</source>
          <target state="translated">このライブラリは、基本的な数学関数を提供します。テーブル&lt;a id=&quot;pdf-math&quot;&gt; &lt;code&gt;math&lt;/code&gt; &lt;/a&gt;内にすべての関数と定数を提供します。 「 &lt;code&gt;integer/float&lt;/code&gt; 」という注釈が付いた関数は、整数引数の場合は整数の結果を、非整数引数の場合は浮動小数点の結果を返します。丸め関数&lt;a href=&quot;#pdf-math.ceil&quot;&gt; &lt;code&gt;math.ceil&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-math.floor&quot;&gt; &lt;code&gt;math.floor&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#pdf-math.modf&quot;&gt; &lt;code&gt;math.modf&lt;/code&gt; &lt;/a&gt;は、結果が整数の範囲に収まる場合は整数を返し、それ以外の場合は浮動小数点数を返します。</target>
        </trans-unit>
        <trans-unit id="eff61c8c99df8abb4cc617e0a788ed6e1d7a8ab8" translate="yes" xml:space="preserve">
          <source>This library provides basic support for UTF-8 encoding. It provides all its functions inside the table &lt;a id=&quot;pdf-utf8&quot;&gt;&lt;code&gt;utf8&lt;/code&gt;&lt;/a&gt;. This library does not provide any support for Unicode other than the handling of the encoding. Any operation that needs the meaning of a character, such as character classification, is outside its scope.</source>
          <target state="translated">このライブラリは、UTF-8エンコーディングの基本的なサポートを提供します。テーブル&lt;a id=&quot;pdf-utf8&quot;&gt; &lt;code&gt;utf8&lt;/code&gt; &lt;/a&gt;内にすべての機能を提供します。このライブラリは、エンコーディングの処理以外のUnicodeのサポートを提供しません。文字の分類など、文字の意味を必要とする操作は、その範囲外です。</target>
        </trans-unit>
        <trans-unit id="f54156236b7b08469a0920a829130d4325d9534b" translate="yes" xml:space="preserve">
          <source>This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching. When indexing a string in Lua, the first character is at position 1 (not at 0, as in C). Indices are allowed to be negative and are interpreted as indexing backwards, from the end of the string. Thus, the last character is at position -1, and so on.</source>
          <target state="translated">このライブラリは、部分文字列の検索や抽出、パターンマッチングなどの文字列操作のための汎用的な関数を提供します。Luaで文字列にインデックスを付ける場合、最初の文字は1の位置になります(C言語のように0ではありません)。インデックスには負の値を使用することができますが、これは文字列の末尾から逆方向にインデックスを作成したものと解釈されます。したがって、最後の文字は-1の位置にあります。</target>
        </trans-unit>
        <trans-unit id="eaff80ded470719d876c589d5513c23d7a2d941b" translate="yes" xml:space="preserve">
          <source>This library provides generic functions for table manipulation. It provides all its functions inside the table &lt;a id=&quot;pdf-table&quot;&gt;&lt;code&gt;table&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このライブラリは、テーブル操作のための一般的な関数を提供します。テーブル&lt;a id=&quot;pdf-table&quot;&gt; &lt;code&gt;table&lt;/code&gt; &lt;/a&gt;内にすべての機能を提供します。</target>
        </trans-unit>
        <trans-unit id="5f4d4c7789cbf6727187aa434640210ed81d6661" translate="yes" xml:space="preserve">
          <source>This library provides the functionality of the debug interface (&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;) to Lua programs. You should exert care when using this library. Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code. Moreover, some functions in this library may be slow.</source>
          <target state="translated">このライブラリは、Luaプログラムにデバッグインターフェイス（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;）の機能を提供します。このライブラリを使用するときは注意が必要です。その関数のいくつかは、Luaコードに関する基本的な仮定に違反しているため（たとえば、関数のローカル変数に外部からアクセスできない、ユーザーデータメタテーブルをLuaコードで変更できない、Luaプログラムがクラッシュしない）、それ以外の場合は安全なコードを危険にさらす可能性があります。さらに、このライブラリの一部の関数は遅い場合があります。</target>
        </trans-unit>
        <trans-unit id="8d51d524a82a8aae4d9f2e0292c35c2b4f100e81" translate="yes" xml:space="preserve">
          <source>This library provides the functionality of the debug interface (&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;) to Lua programs. You should exert care when using this library. Several of its functions violate basic assumptions about Lua code (e.g., that variables local to a function cannot be accessed from outside; that userdata metatables cannot be changed by Lua code; that Lua programs do not crash) and therefore can compromise otherwise secure code. Moreover, some functions in this library may be slow.</source>
          <target state="translated">このライブラリは、Luaプログラムへのデバッグインターフェイス（&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;）の機能を提供します。このライブラリを使用するときは注意が必要です。その関数のいくつかは、Luaコードに関する基本的な前提に違反しています（たとえば、関数のローカル変数に外部からアクセスできない、ユーザーデータメタテーブルをLuaコードで変更できない、Luaプログラムがクラッシュしないなど）。したがって、そうでなければ安全なコードを危険にさらす可能性があります。さらに、このライブラリの一部の関数は遅い場合があります。</target>
        </trans-unit>
        <trans-unit id="aa99211cd2ffc6b2b1567c3fa58975b02bdbb57d" translate="yes" xml:space="preserve">
          <source>This macro is defined as follows:</source>
          <target state="translated">このマクロは以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="c062139aee69e54bd4a269563eddaa0f4e8798af" translate="yes" xml:space="preserve">
          <source>This macro is equivalent to &lt;a href=&quot;#lua_pushstring&quot;&gt;&lt;code&gt;lua_pushstring&lt;/code&gt;&lt;/a&gt;, but should be used only when &lt;code&gt;s&lt;/code&gt; is a literal string.</source>
          <target state="translated">このマクロは&lt;a href=&quot;#lua_pushstring&quot;&gt; &lt;code&gt;lua_pushstring&lt;/code&gt; &lt;/a&gt;と同等ですが、 &lt;code&gt;s&lt;/code&gt; がリテラル文字列の場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="8a5828258eda09312844222f71451e9b5df31690" translate="yes" xml:space="preserve">
          <source>This macro is equivalent to &lt;a href=&quot;#lua_pushstring&quot;&gt;&lt;code&gt;lua_pushstring&lt;/code&gt;&lt;/a&gt;, but should be used only when &lt;code&gt;s&lt;/code&gt; is a literal string. (Lua may optimize this case.)</source>
          <target state="translated">このマクロは&lt;a href=&quot;#lua_pushstring&quot;&gt; &lt;code&gt;lua_pushstring&lt;/code&gt; &lt;/a&gt;と同等ですが、 &lt;code&gt;s&lt;/code&gt; がリテラル文字列である場合にのみ使用する必要があります。（Luaはこのケースを最適化する可能性があります。）</target>
        </trans-unit>
        <trans-unit id="73fca2eb54a811850b7ad4e17b0d35bfe7cf0032" translate="yes" xml:space="preserve">
          <source>This macro may evaluate its arguments more than once.</source>
          <target state="translated">このマクロは、その引数を複数回評価することができます。</target>
        </trans-unit>
        <trans-unit id="05f26abbbd5d35b2d22d1c051a71569b0f900ee1" translate="yes" xml:space="preserve">
          <source>This section describes the C API for Lua, that is, the set of C functions available to the host program to communicate with Lua. All API functions and related types and constants are declared in the header file &lt;a id=&quot;pdf-lua.h&quot;&gt;&lt;code&gt;lua.h&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このセクションでは、Lua用のC API、つまりホストプログラムがLuaと通信するために使用できるC関数のセットについて説明します。すべてのAPI関数と関連する型および定数は、ヘッダーファイル&lt;a id=&quot;pdf-lua.h&quot;&gt; &lt;code&gt;lua.h&lt;/code&gt; で&lt;/a&gt;宣言されています。</target>
        </trans-unit>
        <trans-unit id="f58c3cfe49431540420c4f54cf654f80f9192fd6" translate="yes" xml:space="preserve">
          <source>This section describes the basic concepts of the language.</source>
          <target state="translated">ここでは、言語の基本的な概念を説明します。</target>
        </trans-unit>
        <trans-unit id="8fa659ee1a4beeab1fc33f883314eeb2cadc844d" translate="yes" xml:space="preserve">
          <source>This section describes the lexis, the syntax, and the semantics of Lua. In other words, this section describes which tokens are valid, how they can be combined, and what their combinations mean.</source>
          <target state="translated">このセクションでは、Lua の語彙、構文、意味論について説明します。つまり、このセクションでは、どのトークンが有効なのか、どのように組み合わせることができるのか、そしてその組み合わせの意味を説明します。</target>
        </trans-unit>
        <trans-unit id="db29de528ad1c90a96a681f72e450fef6b674bc0" translate="yes" xml:space="preserve">
          <source>This specifier does not support modifiers (flags, width, length).</source>
          <target state="translated">この指定子は修飾子(フラグ、幅、長さ)をサポートしません。</target>
        </trans-unit>
        <trans-unit id="278be3240fe4a7ea3d08f92baa83623d2ac8fe27" translate="yes" xml:space="preserve">
          <source>This userdata must start with the structure &lt;code&gt;luaL_Stream&lt;/code&gt;; it can contain other data after this initial structure. Field &lt;code&gt;f&lt;/code&gt; points to the corresponding C stream (or it can be &lt;code&gt;NULL&lt;/code&gt; to indicate an incompletely created handle). Field &lt;code&gt;closef&lt;/code&gt; points to a Lua function that will be called to close the stream when the handle is closed or collected; this function receives the file handle as its sole argument and must return either &lt;b&gt;true&lt;/b&gt; (in case of success) or &lt;b&gt;nil&lt;/b&gt; plus an error message (in case of error). Once Lua calls this field, it changes the field value to &lt;code&gt;NULL&lt;/code&gt; to signal that the handle is closed.</source>
          <target state="translated">この &lt;code&gt;luaL_Stream&lt;/code&gt; データは、構造luaL_Streamで始まる必要があります。この初期構造の後に他のデータを含めることができます。フィールド &lt;code&gt;f&lt;/code&gt; は、対応するCストリームを指します（または、 &lt;code&gt;NULL&lt;/code&gt; の場合は、不完全に作成されたハンドルを示します）。フィールド &lt;code&gt;closef&lt;/code&gt; は、ハンドルが閉じられるか収集されたときにストリームを閉じるために呼び出されるLua関数を指します。この関数は、ファイルハンドルを唯一の引数として受け取り、&lt;b&gt;true&lt;/b&gt;（成功した場合）または&lt;b&gt;nilに&lt;/b&gt;加えてエラーメッセージ（エラーの場合）を返す必要があります。 Luaはこのフィールドを呼び出すと、フィールド値を &lt;code&gt;NULL&lt;/code&gt; に変更して、ハンドルが閉じていることを通知します。</target>
        </trans-unit>
        <trans-unit id="e34f3769ad0807b3d6dc807de51658a5229c2a2c" translate="yes" xml:space="preserve">
          <source>This userdata must start with the structure &lt;code&gt;luaL_Stream&lt;/code&gt;; it can contain other data after this initial structure. The field &lt;code&gt;f&lt;/code&gt; points to the corresponding C stream (or it can be &lt;code&gt;NULL&lt;/code&gt; to indicate an incompletely created handle). The field &lt;code&gt;closef&lt;/code&gt; points to a Lua function that will be called to close the stream when the handle is closed or collected; this function receives the file handle as its sole argument and must return either a true value, in case of success, or a false value plus an error message, in case of error. Once Lua calls this field, it changes the field value to &lt;code&gt;NULL&lt;/code&gt; to signal that the handle is closed.</source>
          <target state="translated">この &lt;code&gt;luaL_Stream&lt;/code&gt; データは、構造体luaL_Streamで始まる必要があります。この初期構造の後に他のデータを含めることができます。フィールド &lt;code&gt;f&lt;/code&gt; は、対応するCストリームを指します（または、不完全に作成されたハンドルを示すために &lt;code&gt;NULL&lt;/code&gt; にすることができます）。フィールド &lt;code&gt;closef&lt;/code&gt; は、ハンドルが閉じられたとき、または収集されたときにストリームを閉じるために呼び出されるLua関数を指します。この関数は、ファイルハンドルを唯一の引数として受け取り、成功した場合はtrue値を返すか、エラーの場合はfalse値とエラーメッセージを返す必要があります。 Luaがこのフィールドを呼び出すと、フィールド値を &lt;code&gt;NULL&lt;/code&gt; に変更して、ハンドルが閉じていることを通知します。</target>
        </trans-unit>
        <trans-unit id="a38b5444cc9ef2204e61edb4d9f6307dc07f0ac4" translate="yes" xml:space="preserve">
          <source>This variable is only a reference to the real table; assignments to this variable do not change the table used by &lt;a href=&quot;#pdf-require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この変数は実際のテーブルへの参照にすぎません。この変数への割り当ては、&lt;a href=&quot;#pdf-require&quot;&gt; &lt;code&gt;require&lt;/code&gt; が&lt;/a&gt;使用するテーブルを変更しません。</target>
        </trans-unit>
        <trans-unit id="53329857ea4576424bb761eab97ba4d7a438b162" translate="yes" xml:space="preserve">
          <source>Threads are subject to garbage collection, like any Lua object.</source>
          <target state="translated">スレッドは、他のLuaオブジェクトと同様にガベージコレクションの対象となります。</target>
        </trans-unit>
        <trans-unit id="fd5b59d880561eb52ba3ed52be79a6fc246200cf" translate="yes" xml:space="preserve">
          <source>To allow possible side-effects, function calls can be executed as statements:</source>
          <target state="translated">副作用の可能性を考慮して、関数呼び出しはステートメントとして実行することができます。</target>
        </trans-unit>
        <trans-unit id="e5d4f137bc9e715e9e20a727cc9650777e835e92" translate="yes" xml:space="preserve">
          <source>To allow the use of Lua as a script interpreter in Unix systems, Lua skips the first line of a file chunk if it starts with &lt;code&gt;#&lt;/code&gt;. Therefore, Lua scripts can be made into executable programs by using &lt;code&gt;chmod +x&lt;/code&gt; and the &lt;code&gt;#!&lt;/code&gt; form, as in</source>
          <target state="translated">UnixシステムでスクリプトインタープリターとしてLuaを使用できるようにするために、Luaはファイルチャンクの最初の行が &lt;code&gt;#&lt;/code&gt; で始まる場合はスキップします。したがって、Luaスクリプトは、 &lt;code&gt;chmod +x&lt;/code&gt; と &lt;code&gt;#!&lt;/code&gt; を使用して実行可能プログラムにすることができます。フォーム、のように</target>
        </trans-unit>
        <trans-unit id="888be864c9c88102be3a61e9065fc124fb157083" translate="yes" xml:space="preserve">
          <source>To allow the use of Lua as a script interpreter in Unix systems, the standalone interpreter skips the first line of a chunk if it starts with &lt;code&gt;#&lt;/code&gt;. Therefore, Lua scripts can be made into executable programs by using &lt;code&gt;chmod +x&lt;/code&gt; and the &lt;code&gt;#!&lt;/code&gt; form, as in</source>
          <target state="translated">UnixシステムでLuaをスクリプトインタープリターとして使用できるようにするために、スタンドアロンインタープリターは &lt;code&gt;#&lt;/code&gt; で始まる場合、チャンクの最初の行をスキップします。したがって、Luaスクリプトは、 &lt;code&gt;chmod +x&lt;/code&gt; と &lt;code&gt;#!&lt;/code&gt; を使用して実行可能プログラムにすることができます。のような形</target>
        </trans-unit>
        <trans-unit id="1e9c9099d2aea779a3a3f78d58160c9b66011127" translate="yes" xml:space="preserve">
          <source>To avoid this kind of problem, Lua raises an error whenever it tries to yield across an API call, except for three functions: &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt;. All those functions receive a &lt;em&gt;continuation function&lt;/em&gt; (as a parameter named &lt;code&gt;k&lt;/code&gt;) to continue execution after a yield.</source>
          <target state="translated">この種の問題を回避するために、LuaはAPI呼び出しを介して&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;しようとするたびにエラーを発生させます。ただし、3つの関数、&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;、lua_callk、および&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; を除き&lt;/a&gt;ます。これらの関数はすべて、（ &lt;code&gt;k&lt;/code&gt; という名前のパラメーターとして）&lt;em&gt;継続&lt;/em&gt;関数を受け取り、yield後に実行を継続します。</target>
        </trans-unit>
        <trans-unit id="5bb0e844a26e80a97eddacec1b0d3209d0d96606" translate="yes" xml:space="preserve">
          <source>To call a function you must use the following protocol: first, the function to be called is pushed onto the stack; then, the arguments to the function are pushed in direct order; that is, the first argument is pushed first. Finally you call &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;nargs&lt;/code&gt; is the number of arguments that you pushed onto the stack. All arguments and the function value are popped from the stack when the function is called. The function results are pushed onto the stack when the function returns. The number of results is adjusted to &lt;code&gt;nresults&lt;/code&gt;, unless &lt;code&gt;nresults&lt;/code&gt; is &lt;a id=&quot;pdf-LUA_MULTRET&quot;&gt;&lt;code&gt;LUA_MULTRET&lt;/code&gt;&lt;/a&gt;. In this case, all results from the function are pushed; Lua takes care that the returned values fit into the stack space, but it does not ensure any extra space in the stack. The function results are pushed onto the stack in direct order (the first result is pushed first), so that after the call the last result is on the top of the stack.</source>
          <target state="translated">関数を呼び出すには、次のプロトコルを使用する必要があります。最初に、呼び出される関数がスタックにプッシュされます。次に、関数への引数が直接の順序でプッシュされます。つまり、最初の引数が最初にプッシュされます。最後に&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;を呼び出します。 &lt;code&gt;nargs&lt;/code&gt; は、スタックにプッシュした引数の数です。関数が呼び出されると、すべての引数と関数値がスタックからポップされます。関数が戻ると、関数の結果がスタックにプッシュされます。 &lt;code&gt;nresults&lt;/code&gt; が&lt;a id=&quot;pdf-LUA_MULTRET&quot;&gt; &lt;code&gt;LUA_MULTRET&lt;/code&gt; &lt;/a&gt;でない限り、結果の数は &lt;code&gt;nresults&lt;/code&gt; に調整されます。この場合、関数からのすべての結果がプッシュされます。Luaは戻り値がスタックスペースに収まるように注意しますが、スタック内に余分なスペースを確保しません。関数の結果は直接の順序でスタックにプッシュされます（最初の結果が最初にプッシュされます）。したがって、呼び出しの後、最後の結果はスタックの一番上になります。</target>
        </trans-unit>
        <trans-unit id="6f927865cf7be60df11e5707f3fba807a308ae47" translate="yes" xml:space="preserve">
          <source>To catch errors in Lua, you can do a &lt;em&gt;protected call&lt;/em&gt;, using &lt;a href=&quot;#pdf-pcall&quot;&gt;&lt;code&gt;pcall&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#pdf-xpcall&quot;&gt;&lt;code&gt;xpcall&lt;/code&gt;&lt;/a&gt;). The function &lt;a href=&quot;#pdf-pcall&quot;&gt;&lt;code&gt;pcall&lt;/code&gt;&lt;/a&gt; calls a given function in &lt;em&gt;protected mode&lt;/em&gt;. Any error while running the function stops its execution, and control returns immediately to &lt;code&gt;pcall&lt;/code&gt;, which returns a status code.</source>
          <target state="translated">Luaのエラーをキャッチするには、&lt;a href=&quot;#pdf-pcall&quot;&gt; &lt;code&gt;pcall&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#pdf-xpcall&quot;&gt; &lt;code&gt;xpcall&lt;/code&gt; &lt;/a&gt;）を使用して&lt;em&gt;保護された呼び出しを&lt;/em&gt;行うことができます。関数&lt;a href=&quot;#pdf-pcall&quot;&gt; &lt;code&gt;pcall&lt;/code&gt; &lt;/a&gt;は、&lt;em&gt;プロテクトモードで&lt;/em&gt;特定の関数を呼び出し&lt;em&gt;ます&lt;/em&gt;。関数の実行中にエラーが発生すると実行が停止し、制御はすぐに &lt;code&gt;pcall&lt;/code&gt; に戻り、pcallはステータスコードを返します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ea99929cea20ed156e3c1b46c0e6d4b1e4d677a" translate="yes" xml:space="preserve">
          <source>To change the metatable of other types from Lua code, you must use the debug library (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;).</source>
          <target state="translated">Luaコードから他のタイプのメタテーブルを変更するには、デバッグライブラリ（&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6417128dbbbaad3ecee352f08e4fffebce841718" translate="yes" xml:space="preserve">
          <source>To do a call you must use the following protocol: first, the function to be called is pushed onto the stack; then, the arguments to the call are pushed in direct order; that is, the first argument is pushed first. Finally you call &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;; &lt;code&gt;nargs&lt;/code&gt; is the number of arguments that you pushed onto the stack. When the function returns, all arguments and the function value are popped and the call results are pushed onto the stack. The number of results is adjusted to &lt;code&gt;nresults&lt;/code&gt;, unless &lt;code&gt;nresults&lt;/code&gt; is &lt;a id=&quot;pdf-LUA_MULTRET&quot;&gt;&lt;code&gt;LUA_MULTRET&lt;/code&gt;&lt;/a&gt;. In this case, all results from the function are pushed; Lua takes care that the returned values fit into the stack space, but it does not ensure any extra space in the stack. The function results are pushed onto the stack in direct order (the first result is pushed first), so that after the call the last result is on the top of the stack.</source>
          <target state="translated">呼び出しを行うには、次のプロトコルを使用する必要があります。最初に、呼び出される関数がスタックにプッシュされます。次に、呼び出しの引数が直接プッシュされます。つまり、最初の引数が最初にプッシュされます。最後に、&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; &lt;/a&gt;を呼び出します; &lt;code&gt;nargs&lt;/code&gt; は、スタックにプッシュした引数の数です。関数が戻ると、すべての引数と関数値がポップされ、呼び出し結果がスタックにプッシュされます。 &lt;code&gt;nresults&lt;/code&gt; が&lt;a id=&quot;pdf-LUA_MULTRET&quot;&gt; &lt;code&gt;LUA_MULTRET&lt;/code&gt; &lt;/a&gt;でない限り、結果の数は &lt;code&gt;nresults&lt;/code&gt; に調整されます。この場合、関数からのすべての結果がプッシュされます。Luaは、戻り値がスタックスペースに収まるように注意しますが、スタック内に余分なスペースを確保することはできません。関数の結果は直接スタックにプッシュされるため（最初の結果が最初にプッシュされます）、呼び出し後、最後の結果がスタックの一番上になります。</target>
        </trans-unit>
        <trans-unit id="ef1fdaa7f1c7b918f16975f1ca7b0d514c6f0f3a" translate="yes" xml:space="preserve">
          <source>To ensure a required level of randomness to the initial state (or contrarily, to have a deterministic sequence, for instance when debugging a program), you should call &lt;a href=&quot;#pdf-math.randomseed&quot;&gt;&lt;code&gt;math.randomseed&lt;/code&gt;&lt;/a&gt; with explicit arguments.</source>
          <target state="translated">初期状態に対して必要なレベルのランダム性を確保するには（または逆に、プログラムのデバッグ時などに決定論的なシーケンスを作成するには）、明示的な引数を指定して&lt;a href=&quot;#pdf-math.randomseed&quot;&gt; &lt;code&gt;math.randomseed&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="2e1e6304705c324bc934187373072b763f1a1066" translate="yes" xml:space="preserve">
          <source>To find a loader, &lt;code&gt;require&lt;/code&gt; is guided by the &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt; sequence. By changing this sequence, we can change how &lt;code&gt;require&lt;/code&gt; looks for a module. The following explanation is based on the default configuration for &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローダーを見つけるには、 &lt;code&gt;require&lt;/code&gt; は&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; &lt;/a&gt;シーケンスによってガイドされます。このシーケンスを変更することにより、モジュールの &lt;code&gt;require&lt;/code&gt; の外観を変更できます。次の説明は、&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; の&lt;/a&gt;デフォルト構成に基づいています。</target>
        </trans-unit>
        <trans-unit id="5e712bd9f9ff5cb85660101fcd07ff33cf506329" translate="yes" xml:space="preserve">
          <source>To find a loader, &lt;code&gt;require&lt;/code&gt; is guided by the table &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt;. Each item in this table is a search function, that searches for the module in a particular way. By changing this table, we can change how &lt;code&gt;require&lt;/code&gt; looks for a module. The following explanation is based on the default configuration for &lt;a href=&quot;#pdf-package.searchers&quot;&gt;&lt;code&gt;package.searchers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ローダーを見つけるには、 &lt;code&gt;require&lt;/code&gt; は&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; &lt;/a&gt;テーブルによってガイドされます。この表の各項目は、特定の方法でモジュールを検索する検索機能です。このテーブルを変更することで、 &lt;code&gt;require&lt;/code&gt; がモジュールを探す方法を変更できます。以下の説明は、&lt;a href=&quot;#pdf-package.searchers&quot;&gt; &lt;code&gt;package.searchers&lt;/code&gt; の&lt;/a&gt;デフォルト構成に基づいています。</target>
        </trans-unit>
        <trans-unit id="d328425732a8a8cf219c051476f3d38be1088896" translate="yes" xml:space="preserve">
          <source>To get information about a function invocation, the parameter &lt;code&gt;ar&lt;/code&gt; must be a valid activation record that was filled by a previous call to &lt;a href=&quot;#lua_getstack&quot;&gt;&lt;code&gt;lua_getstack&lt;/code&gt;&lt;/a&gt; or given as argument to a hook (see &lt;a href=&quot;#lua_Hook&quot;&gt;&lt;code&gt;lua_Hook&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">関数呼び出しに関する情報を取得するには、パラメーター &lt;code&gt;ar&lt;/code&gt; は、&lt;a href=&quot;#lua_getstack&quot;&gt; &lt;code&gt;lua_getstack&lt;/code&gt; &lt;/a&gt;への以前の呼び出しによって入力された、またはフックへの引数として指定された有効なアクティブ化レコードである必要があります（&lt;a href=&quot;#lua_Hook&quot;&gt; &lt;code&gt;lua_Hook&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="259bf849c0380d37169ac9c2c5ed68eef86ed762" translate="yes" xml:space="preserve">
          <source>To get information about a function you push it onto the stack and start the &lt;code&gt;what&lt;/code&gt; string with the character '&lt;code&gt;&amp;gt;&lt;/code&gt;'. (In that case, &lt;code&gt;lua_getinfo&lt;/code&gt; pops the function from the top of the stack.) For instance, to know in which line a function &lt;code&gt;f&lt;/code&gt; was defined, you can write the following code:</source>
          <target state="translated">関数に関する情報を取得するには、関数をスタックにプッシュし、 &lt;code&gt;what&lt;/code&gt; 文字列を文字 ' &lt;code&gt;&amp;gt;&lt;/code&gt; 'で開始します。（その場合、 &lt;code&gt;lua_getinfo&lt;/code&gt; はスタックの最上部から関数をポップします。）たとえば、関数 &lt;code&gt;f&lt;/code&gt; が定義されている行を確認するには、次のコードを記述します。</target>
        </trans-unit>
        <trans-unit id="bbdfec85d3ce9d473ff7e0ea2279d69ff617c711" translate="yes" xml:space="preserve">
          <source>To get information about a function, you push it onto the stack and start the &lt;code&gt;what&lt;/code&gt; string with the character '&lt;code&gt;&amp;gt;&lt;/code&gt;'. (In that case, &lt;code&gt;lua_getinfo&lt;/code&gt; pops the function from the top of the stack.) For instance, to know in which line a function &lt;code&gt;f&lt;/code&gt; was defined, you can write the following code:</source>
          <target state="translated">関数に関する情報を取得するには、関数をスタックにプッシュし、 &lt;code&gt;what&lt;/code&gt; 文字列を文字 ' &lt;code&gt;&amp;gt;&lt;/code&gt; 'で開始します。（その場合、 &lt;code&gt;lua_getinfo&lt;/code&gt; はスタックの一番上から関数をポップします。）たとえば、関数 &lt;code&gt;f&lt;/code&gt; がどの行で定義されているかを知るには、次のコードを記述できます。</target>
        </trans-unit>
        <trans-unit id="1c87754131cf9f2c3e4c8c44baabf65a58d386a2" translate="yes" xml:space="preserve">
          <source>To have access to these libraries, the C host program should call the &lt;a href=&quot;#luaL_openlibs&quot;&gt;&lt;code&gt;luaL_openlibs&lt;/code&gt;&lt;/a&gt; function, which opens all standard libraries. Alternatively, the host program can open them individually by using &lt;a href=&quot;#luaL_requiref&quot;&gt;&lt;code&gt;luaL_requiref&lt;/code&gt;&lt;/a&gt; to call &lt;a id=&quot;pdf-luaopen_base&quot;&gt;&lt;code&gt;luaopen_base&lt;/code&gt;&lt;/a&gt; (for the basic library), &lt;a id=&quot;pdf-luaopen_package&quot;&gt;&lt;code&gt;luaopen_package&lt;/code&gt;&lt;/a&gt; (for the package library), &lt;a id=&quot;pdf-luaopen_coroutine&quot;&gt;&lt;code&gt;luaopen_coroutine&lt;/code&gt;&lt;/a&gt; (for the coroutine library), &lt;a id=&quot;pdf-luaopen_string&quot;&gt;&lt;code&gt;luaopen_string&lt;/code&gt;&lt;/a&gt; (for the string library), &lt;a id=&quot;pdf-luaopen_utf8&quot;&gt;&lt;code&gt;luaopen_utf8&lt;/code&gt;&lt;/a&gt; (for the UTF-8 library), &lt;a id=&quot;pdf-luaopen_table&quot;&gt;&lt;code&gt;luaopen_table&lt;/code&gt;&lt;/a&gt; (for the table library), &lt;a id=&quot;pdf-luaopen_math&quot;&gt;&lt;code&gt;luaopen_math&lt;/code&gt;&lt;/a&gt; (for the mathematical library), &lt;a id=&quot;pdf-luaopen_io&quot;&gt;&lt;code&gt;luaopen_io&lt;/code&gt;&lt;/a&gt; (for the I/O library), &lt;a id=&quot;pdf-luaopen_os&quot;&gt;&lt;code&gt;luaopen_os&lt;/code&gt;&lt;/a&gt; (for the operating system library), and &lt;a id=&quot;pdf-luaopen_debug&quot;&gt;&lt;code&gt;luaopen_debug&lt;/code&gt;&lt;/a&gt; (for the debug library). These functions are declared in &lt;a id=&quot;pdf-lualib.h&quot;&gt;&lt;code&gt;lualib.h&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのライブラリにアクセスするには、Cホストプログラムが&lt;a href=&quot;#luaL_openlibs&quot;&gt; &lt;code&gt;luaL_openlibs&lt;/code&gt; &lt;/a&gt;関数を呼び出す必要があります。この関数は、すべての標準ライブラリを開きます。または、ホストプログラムは、&lt;a href=&quot;#luaL_requiref&quot;&gt; &lt;code&gt;luaL_requiref&lt;/code&gt; &lt;/a&gt;を使用して&lt;a id=&quot;pdf-luaopen_base&quot;&gt; &lt;code&gt;luaopen_base&lt;/code&gt; &lt;/a&gt;（基本ライブラリの場合）、&lt;a id=&quot;pdf-luaopen_package&quot;&gt; &lt;code&gt;luaopen_package&lt;/code&gt; &lt;/a&gt;（パッケージライブラリの場合）、&lt;a id=&quot;pdf-luaopen_coroutine&quot;&gt; &lt;code&gt;luaopen_coroutine&lt;/code&gt; &lt;/a&gt;（コルーチンライブラリの場合）、&lt;a id=&quot;pdf-luaopen_string&quot;&gt; &lt;code&gt;luaopen_string&lt;/code&gt; &lt;/a&gt;（文字列ライブラリの場合）、&lt;a id=&quot;pdf-luaopen_utf8&quot;&gt; &lt;code&gt;luaopen_utf8&lt;/code&gt; &lt;/a&gt;（ UTF-8ライブラリ）、&lt;a id=&quot;pdf-luaopen_table&quot;&gt; &lt;code&gt;luaopen_table&lt;/code&gt; &lt;/a&gt;（テーブルライブラリ用）、&lt;a id=&quot;pdf-luaopen_math&quot;&gt; &lt;code&gt;luaopen_math&lt;/code&gt; &lt;/a&gt;（数学ライブラリ用）、&lt;a id=&quot;pdf-luaopen_io&quot;&gt; &lt;code&gt;luaopen_io&lt;/code&gt; &lt;/a&gt;（I / Oライブラリ用）、&lt;a id=&quot;pdf-luaopen_os&quot;&gt; &lt;code&gt;luaopen_os&lt;/code&gt; &lt;/a&gt;（オペレーティングシステムライブラリの場合）、および&lt;a id=&quot;pdf-luaopen_debug&quot;&gt; &lt;code&gt;luaopen_debug&lt;/code&gt; &lt;/a&gt;（デバッグライブラリの場合）。これらの関数は&lt;a id=&quot;pdf-lualib.h&quot;&gt; &lt;code&gt;lualib.h&lt;/code&gt; で&lt;/a&gt;宣言されています。</target>
        </trans-unit>
        <trans-unit id="4f65df24a4302e99c5805820ed2c9da17dcc1b4e" translate="yes" xml:space="preserve">
          <source>To have access to these libraries, the C host program should call the &lt;a href=&quot;#luaL_openlibs&quot;&gt;&lt;code&gt;luaL_openlibs&lt;/code&gt;&lt;/a&gt; function, which opens all standard libraries. Alternatively, the host program can open them individually by using &lt;a href=&quot;#luaL_requiref&quot;&gt;&lt;code&gt;luaL_requiref&lt;/code&gt;&lt;/a&gt; to call &lt;a id=&quot;pdf-luaopen_base&quot;&gt;&lt;code&gt;luaopen_base&lt;/code&gt;&lt;/a&gt; (for the basic library), &lt;a id=&quot;pdf-luaopen_package&quot;&gt;&lt;code&gt;luaopen_package&lt;/code&gt;&lt;/a&gt; (for the package library), &lt;a id=&quot;pdf-luaopen_coroutine&quot;&gt;&lt;code&gt;luaopen_coroutine&lt;/code&gt;&lt;/a&gt; (for the coroutine library), &lt;a id=&quot;pdf-luaopen_string&quot;&gt;&lt;code&gt;luaopen_string&lt;/code&gt;&lt;/a&gt; (for the string library), &lt;a id=&quot;pdf-luaopen_utf8&quot;&gt;&lt;code&gt;luaopen_utf8&lt;/code&gt;&lt;/a&gt; (for the UTF8 library), &lt;a id=&quot;pdf-luaopen_table&quot;&gt;&lt;code&gt;luaopen_table&lt;/code&gt;&lt;/a&gt; (for the table library), &lt;a id=&quot;pdf-luaopen_math&quot;&gt;&lt;code&gt;luaopen_math&lt;/code&gt;&lt;/a&gt; (for the mathematical library), &lt;a id=&quot;pdf-luaopen_io&quot;&gt;&lt;code&gt;luaopen_io&lt;/code&gt;&lt;/a&gt; (for the I/O library), &lt;a id=&quot;pdf-luaopen_os&quot;&gt;&lt;code&gt;luaopen_os&lt;/code&gt;&lt;/a&gt; (for the operating system library), and &lt;a id=&quot;pdf-luaopen_debug&quot;&gt;&lt;code&gt;luaopen_debug&lt;/code&gt;&lt;/a&gt; (for the debug library). These functions are declared in &lt;a id=&quot;pdf-lualib.h&quot;&gt;&lt;code&gt;lualib.h&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのライブラリにアクセスするには、Cホストプログラムは、すべての標準ライブラリを開く&lt;a href=&quot;#luaL_openlibs&quot;&gt; &lt;code&gt;luaL_openlibs&lt;/code&gt; &lt;/a&gt;関数を呼び出す必要があります。または、ホストプログラムは、&lt;a href=&quot;#luaL_requiref&quot;&gt; &lt;code&gt;luaL_requiref&lt;/code&gt; &lt;/a&gt;を使用して&lt;a id=&quot;pdf-luaopen_base&quot;&gt; &lt;code&gt;luaopen_base&lt;/code&gt; &lt;/a&gt;（基本ライブラリの場合）、&lt;a id=&quot;pdf-luaopen_package&quot;&gt; &lt;code&gt;luaopen_package&lt;/code&gt; &lt;/a&gt;（パッケージライブラリの場合）、&lt;a id=&quot;pdf-luaopen_coroutine&quot;&gt; &lt;code&gt;luaopen_coroutine&lt;/code&gt; &lt;/a&gt;（コルーチンライブラリの場合）、&lt;a id=&quot;pdf-luaopen_string&quot;&gt; &lt;code&gt;luaopen_string&lt;/code&gt; &lt;/a&gt;（文字列ライブラリの場合）、&lt;a id=&quot;pdf-luaopen_utf8&quot;&gt; &lt;code&gt;luaopen_utf8&lt;/code&gt; &lt;/a&gt;（ UTF8ライブラリ）、&lt;a id=&quot;pdf-luaopen_table&quot;&gt; &lt;code&gt;luaopen_table&lt;/code&gt; &lt;/a&gt;（テーブルライブラリ用）、&lt;a id=&quot;pdf-luaopen_math&quot;&gt; &lt;code&gt;luaopen_math&lt;/code&gt; &lt;/a&gt;（数学ライブラリ用）、&lt;a id=&quot;pdf-luaopen_io&quot;&gt; &lt;code&gt;luaopen_io&lt;/code&gt; &lt;/a&gt;（I / Oライブラリ用）、&lt;a id=&quot;pdf-luaopen_os&quot;&gt; &lt;code&gt;luaopen_os&lt;/code&gt; &lt;/a&gt;（オペレーティングシステムライブラリの場合）、および&lt;a id=&quot;pdf-luaopen_debug&quot;&gt; &lt;code&gt;luaopen_debug&lt;/code&gt; &lt;/a&gt;（デバッグライブラリの場合）。これらの関数は&lt;a id=&quot;pdf-lualib.h&quot;&gt; &lt;code&gt;lualib.h&lt;/code&gt; で&lt;/a&gt;宣言されています。</target>
        </trans-unit>
        <trans-unit id="f7497be5097473a583f39ec52ec425732f31d8c7" translate="yes" xml:space="preserve">
          <source>To resume a coroutine, you remove any results from the last &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;, put on its stack only the values to be passed as results from &lt;code&gt;yield&lt;/code&gt;, and then call &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コルーチンを再開するには、最後の&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;から結果を削除し、 &lt;code&gt;yield&lt;/code&gt; の結果として渡される値のみをスタックに配置してから、&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="9a9f2afcc694b7e6e7b0ece4b95a9b31851f835d" translate="yes" xml:space="preserve">
          <source>To resume a coroutine, you remove the &lt;code&gt;*nresults&lt;/code&gt; yielded values from its stack, push the values to be passed as results from &lt;code&gt;yield&lt;/code&gt;, and then call &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コルーチンを再開するには、スタックから &lt;code&gt;*nresults&lt;/code&gt; で生成された値を削除し、 &lt;code&gt;yield&lt;/code&gt; から結果として渡される値をプッシュしてから、&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f5749af8d5e7fed727ed35d15b38114e430080b8" translate="yes" xml:space="preserve">
          <source>To start a coroutine, you push onto the thread stack the main function plus any arguments; then you call &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;, with &lt;code&gt;nargs&lt;/code&gt; being the number of arguments. This call returns when the coroutine suspends or finishes its execution. When it returns, the stack contains all values passed to &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;, or all values returned by the body function. &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; returns &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; if the coroutine yields, &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; if the coroutine finishes its execution without errors, or an error code in case of errors (see &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">コルーチンを開始するには、メイン関数と引数をスレッドスタックにプッシュします。あなたが呼び出す&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; を&lt;/a&gt;して、 &lt;code&gt;nargs&lt;/code&gt; 引数の数です。この呼び出しは、コルーチンがその実行を中断または終了すると戻ります。スタックが戻ると、スタックには&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;に渡されたすべての値、またはbody関数によって返されたすべての値が含まれます。&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;戻り&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;コルーチン収率場合、&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;コルーチンがエラーなしで実行、またはエラーの場合のエラーコードを終了する場合（参照&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; を&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="76e8f3d7e170acca1d21ee8a1e8c4351dd451abd" translate="yes" xml:space="preserve">
          <source>To start a coroutine, you push the main function plus any arguments onto the empty stack of the thread. then you call &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;, with &lt;code&gt;nargs&lt;/code&gt; being the number of arguments. This call returns when the coroutine suspends or finishes its execution. When it returns, &lt;code&gt;*nresults&lt;/code&gt; is updated and the top of the stack contains the &lt;code&gt;*nresults&lt;/code&gt; values passed to &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt; or returned by the body function. &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; returns &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; if the coroutine yields, &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; if the coroutine finishes its execution without errors, or an error code in case of errors (see &lt;a href=&quot;#4.4.1&quot;&gt;&amp;sect;4.4.1&lt;/a&gt;). In case of errors, the error object is on the top of the stack.</source>
          <target state="translated">コルーチンを開始するには、メイン関数と引数をスレッドの空のスタックにプッシュします。次に、引数の数を &lt;code&gt;nargs&lt;/code&gt; として、&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;を呼び出します。この呼び出しは、コルーチンが実行を一時停止または終了したときに返されます。それが戻ったとき、 &lt;code&gt;*nresults&lt;/code&gt; が更新され、スタックのトップが含まれている &lt;code&gt;*nresults&lt;/code&gt; の値に渡さ&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;または身体機能によって返されます。&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;戻り&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;、コルーチン収率場合&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; は&lt;/a&gt;コルーチンがエラーなしで実行、またはエラーの場合のエラーコードを終了する場合（参照&lt;a href=&quot;#4.4.1&quot;&gt;&amp;sect;4.4.1&lt;/a&gt;）。エラーの場合、エラーオブジェクトはスタックの一番上にあります。</target>
        </trans-unit>
        <trans-unit id="2a41adffb8d584e7921f8216490fc0912471c5b7" translate="yes" xml:space="preserve">
          <source>To-be-closed Variables</source>
          <target state="translated">未定 変数</target>
        </trans-unit>
        <trans-unit id="2cdc79b068557cc0be76c7d7fde8401dd4f7da9e" translate="yes" xml:space="preserve">
          <source>Tries to convert a Lua float to a Lua integer; the float &lt;code&gt;n&lt;/code&gt; must have an integral value. If that value is within the range of Lua integers, it is converted to an integer and assigned to &lt;code&gt;*p&lt;/code&gt;. The macro results in a boolean indicating whether the conversion was successful. (Note that this range test can be tricky to do correctly without this macro, due to rounding.)</source>
          <target state="translated">LuaフロートをLua整数に変換しようとします。フロート &lt;code&gt;n&lt;/code&gt; が整数値を持っている必要があります。その値がLua整数の範囲内にある場合、整数に変換され、 &lt;code&gt;*p&lt;/code&gt; に割り当てられます。マクロは、変換が成功したかどうかを示すブール値になります。（この範囲テストは、丸めのため、このマクロなしで正しく実行するのが難しい場合があることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="11a3a0ec973c2479f00cc8910cb72beb238ed2cd" translate="yes" xml:space="preserve">
          <source>Type for C functions.</source>
          <target state="translated">C関数用のタイプです。</target>
        </trans-unit>
        <trans-unit id="bbac79126ad582b607fa7de417480b28246073cf" translate="yes" xml:space="preserve">
          <source>Type for a &lt;em&gt;string buffer&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;文字列バッファの&lt;/em&gt;タイプ。</target>
        </trans-unit>
        <trans-unit id="597df46ee98db369cefa88ec65178daff885f4c9" translate="yes" xml:space="preserve">
          <source>Type for arrays of functions to be registered by &lt;a href=&quot;#luaL_setfuncs&quot;&gt;&lt;code&gt;luaL_setfuncs&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;name&lt;/code&gt; is the function name and &lt;code&gt;func&lt;/code&gt; is a pointer to the function. Any array of &lt;a href=&quot;#luaL_Reg&quot;&gt;&lt;code&gt;luaL_Reg&lt;/code&gt;&lt;/a&gt; must end with a sentinel entry in which both &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;func&lt;/code&gt; are &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#luaL_setfuncs&quot;&gt; &lt;code&gt;luaL_setfuncs&lt;/code&gt; &lt;/a&gt;によって登録される関数の配列の型。 &lt;code&gt;name&lt;/code&gt; は関数名で、 &lt;code&gt;func&lt;/code&gt; は関数へのポインターです。&lt;a href=&quot;#luaL_Reg&quot;&gt; &lt;code&gt;luaL_Reg&lt;/code&gt; の&lt;/a&gt;配列は、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;func&lt;/code&gt; の両方が &lt;code&gt;NULL&lt;/code&gt; である番兵エントリで終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="7262eb2a012a409a0b60efe4a99f259fc3c90346" translate="yes" xml:space="preserve">
          <source>Type for continuation functions (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;).</source>
          <target state="translated">継続関数のタイプ（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="97624a7d15b8942c923346eb9827dfe7da1b1df0" translate="yes" xml:space="preserve">
          <source>Type for continuation functions (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;).</source>
          <target state="translated">継続関数のタイプ（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="24445b5aafedd0f5dd84a959ce49844260c89cd8" translate="yes" xml:space="preserve">
          <source>Type for debugging hook functions.</source>
          <target state="translated">フック関数をデバッグするためのタイプです。</target>
        </trans-unit>
        <trans-unit id="bd045f19fb648f6e2a8a5ad73d4fd1e6a85d7f43" translate="yes" xml:space="preserve">
          <source>Typically this function is used only for hashing and debug information.</source>
          <target state="translated">通常、この関数はハッシュ化とデバッグ情報にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="82aace29da601638b56c7fcfaece961d82f801a3" translate="yes" xml:space="preserve">
          <source>Typically, the message handler is used to add more debug information to the error object, such as a stack traceback. Such information cannot be gathered after the return of &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, since by then the stack has unwound.</source>
          <target state="translated">通常、メッセージハンドラーは、スタックトレースバックなどのデバッグ情報をエラーオブジェクトに追加するために使用されます。その時までにスタックが巻き戻されているため、そのような情報は&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt;の復帰後に収集できません。</target>
        </trans-unit>
        <trans-unit id="c9efe5a42434457d2c52ab4c0d1415d4bcf07916" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated, all I/O functions return &lt;b&gt;fail&lt;/b&gt; on failure, plus an error message as a second result and a system-dependent error code as a third result, and some non-false value on success. On non-POSIX systems, the computation of the error message and error code in case of errors may be not thread safe, because they rely on the global C variable &lt;code&gt;errno&lt;/code&gt;.</source>
          <target state="translated">特に明記されていない限り、すべてのI / O関数は、&lt;b&gt;失敗時&lt;/b&gt;に失敗を返し、さらに2番目の結果としてエラーメッセージと3番目の結果としてシステム依存のエラーコードを返し、成功すると偽以外の値を返します。非POSIXシステムでは、エラーの場合のエラーメッセージとエラーコードの計算は、グローバルC変数 &lt;code&gt;errno&lt;/code&gt; に依存しているため、スレッドセーフではない可能性があります。</target>
        </trans-unit>
        <trans-unit id="31727baa3a70e03cfa1528c55a7acf86c6c0a582" translate="yes" xml:space="preserve">
          <source>Unless otherwise stated, all I/O functions return &lt;b&gt;nil&lt;/b&gt; on failure (plus an error message as a second result and a system-dependent error code as a third result) and some value different from &lt;b&gt;nil&lt;/b&gt; on success. On non-POSIX systems, the computation of the error message and error code in case of errors may be not thread safe, because they rely on the global C variable &lt;code&gt;errno&lt;/code&gt;.</source>
          <target state="translated">特に明記されていない限り、すべてのI / O関数は、失敗すると&lt;b&gt;nil&lt;/b&gt;（2番目の結果としてエラーメッセージ、3番目の結果としてシステム依存のエラーコード）を返し、成功時には&lt;b&gt;nilと&lt;/b&gt;は異なる値を返します。非POSIXシステムでは、エラーの場合のエラーメッセージとエラーコードの計算は、グローバルC変数 &lt;code&gt;errno&lt;/code&gt; に依存しているため、スレッドセーフではない場合があります。</target>
        </trans-unit>
        <trans-unit id="7b52e7d27a22d0d612f9608bbf1f1eccee941606" translate="yes" xml:space="preserve">
          <source>Unless stated otherwise, all functions that expect a byte position as a parameter assume that the given position is either the start of a byte sequence or one plus the length of the subject string. As in the string library, negative indices count from the end of the string.</source>
          <target state="translated">特に指定がない限り、パラメータとしてバイト位置を指定するすべての関数は、指定された位置がバイト列の開始位置か、あるいは文字列の長さに1を加えたものであると仮定しています。文字列ライブラリと同様に、負のインデックスは文字列の終わりから数えます。</target>
        </trans-unit>
        <trans-unit id="4b92e3ee7788b339628f8fb046cb8cb890dfc063" translate="yes" xml:space="preserve">
          <source>Unless stated otherwise, any overflow when manipulating integer values &lt;em&gt;wrap around&lt;/em&gt;, according to the usual rules of two-complement arithmetic. (In other words, the actual result is the unique representable integer that is equal modulo &lt;em&gt;2&lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt; to the mathematical result, where &lt;em&gt;n&lt;/em&gt; is the number of bits of the integer type.)</source>
          <target state="translated">特に明記されていない限り、整数値を操作するときのオーバーフローは、2の補数演算の通常の規則に従って&lt;em&gt;ラップアラウンドし&lt;/em&gt;ます。（言い換えると、実際の結果は、数学的な結果に&lt;em&gt;2 &lt;sup&gt;n&lt;/sup&gt;&lt;/em&gt;を法として等しい一意の表現可能な整数です。ここで、&lt;em&gt;n&lt;/em&gt;は整数型のビット数です。）</target>
        </trans-unit>
        <trans-unit id="59b21f366bd62c88e740589d6190f38930d6eeac" translate="yes" xml:space="preserve">
          <source>Unlike other push functions, this function checks for the stack space it needs, including the slot for its result.</source>
          <target state="translated">他のプッシュ関数とは異なり、この関数は結果のスロットを含めて必要なスタックスペースをチェックします。</target>
        </trans-unit>
        <trans-unit id="2e42ec0a938ed392af0043f9b91ccccb6b8e5563" translate="yes" xml:space="preserve">
          <source>Upvalues have no particular order, as they are active through the whole function. They are numbered in an arbitrary order.</source>
          <target state="translated">上昇値は、関数全体を通して活性化されているため、特定の順序はありません。これらの値には任意の順序で番号が付けられます。</target>
        </trans-unit>
        <trans-unit id="76f521b6a8d60e44bede4ff94d2d23d25dcfafa8" translate="yes" xml:space="preserve">
          <source>Userdata represent C values in Lua. A &lt;em&gt;light userdata&lt;/em&gt; represents a pointer, a &lt;code&gt;void*&lt;/code&gt;. It is a value (like a number): you do not create it, it has no individual metatable, and it is not collected (as it was never created). A light userdata is equal to &quot;any&quot; light userdata with the same C address.</source>
          <target state="translated">ユーザーデータはLuaのC値を表します。&lt;em&gt;ライトユーザーデータは&lt;/em&gt;ポインタ表し、 &lt;code&gt;void*&lt;/code&gt; 。これは（数値のような）値です。作成せず、個別のメタテーブルがなく、収集されません（作成されなかったため）。ライトユーザーデータは、同じCアドレスを持つ「任意の」ライトユーザーデータと同じです。</target>
        </trans-unit>
        <trans-unit id="e39e23cf8cc12b3b818ae1cbbd67ab727cb6080a" translate="yes" xml:space="preserve">
          <source>Usually, &lt;code&gt;error&lt;/code&gt; adds some information about the error position at the beginning of the message, if the message is a string. The &lt;code&gt;level&lt;/code&gt; argument specifies how to get the error position. With level 1 (the default), the error position is where the &lt;code&gt;error&lt;/code&gt; function was called. Level 2 points the error to where the function that called &lt;code&gt;error&lt;/code&gt; was called; and so on. Passing a level 0 avoids the addition of error position information to the message.</source>
          <target state="translated">通常、 &lt;code&gt;error&lt;/code&gt; は、メッセージが文字列の場合、メッセージの先頭にエラー位置に関する情報を追加します。 &lt;code&gt;level&lt;/code&gt; 引数には、エラー位置を取得する方法を指定します。レベル1（デフォルト）では、エラー位置は &lt;code&gt;error&lt;/code&gt; 関数が呼び出された場所です。レベル2は、エラーを呼び出した関数が呼び出された場所を &lt;code&gt;error&lt;/code&gt; に示します。等々。レベル0を渡すと、メッセージにエラー位置情報が追加されなくなります。</target>
        </trans-unit>
        <trans-unit id="a5ec00a8e6ea1cb6546f41d42ab21ccdd067623e" translate="yes" xml:space="preserve">
          <source>Usually, this function does not return; when the coroutine eventually resumes, it continues executing the continuation function. However, there is one special case, which is when this function is called from inside a line or a count hook (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;). In that case, &lt;code&gt;lua_yieldk&lt;/code&gt; should be called with no continuation (probably in the form of &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;) and no results, and the hook should return immediately after the call. Lua will yield and, when the coroutine resumes again, it will continue the normal execution of the (Lua) function that triggered the hook.</source>
          <target state="translated">通常、この関数は戻りません。コルーチンが最終的に再開すると、継続機能の実行を継続します。ただし、1つの特殊なケースがあります。それは、この関数が行またはカウントフックの内側から呼び出される場合です（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7を&lt;/a&gt;参照）。その場合、 &lt;code&gt;lua_yieldk&lt;/code&gt; は継続せずに（おそらく&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;の形式で）呼び出され、結果は得られず、フックは呼び出しの直後に戻る必要があります。Luaは降伏し、コルーチンが再開すると、フックをトリガーした（Lua）関数の通常の実行を続行します。</target>
        </trans-unit>
        <trans-unit id="ede0ea911a1e4e16232a1c52be2e25bf93574b23" translate="yes" xml:space="preserve">
          <source>Usually, this function does not return; when the coroutine eventually resumes, it continues executing the continuation function. However, there is one special case, which is when this function is called from inside a line or a count hook (see &lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9&lt;/a&gt;). In that case, &lt;code&gt;lua_yieldk&lt;/code&gt; should be called with no continuation (probably in the form of &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;) and no results, and the hook should return immediately after the call. Lua will yield and, when the coroutine resumes again, it will continue the normal execution of the (Lua) function that triggered the hook.</source>
          <target state="translated">通常、この関数は戻りません。コルーチンが最終的に再開すると、継続関数の実行を継続します。ただし、この関数が行またはカウントフック（&lt;a href=&quot;#4.9&quot;&gt;&amp;sect;4.9を&lt;/a&gt;参照）の内部から呼び出される場合は、1つの特別なケースです。その場合、 &lt;code&gt;lua_yieldk&lt;/code&gt; は継続せずに（おそらく&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; &lt;/a&gt;の形式で）呼び出され、結果は返されません。フックは呼び出しの直後に戻る必要があります。 Luaは譲歩し、コルーチンが再び再開すると、フックをトリガーした（Lua）関数の通常の実行を継続します。</target>
        </trans-unit>
        <trans-unit id="d093e0dbaa7c773904acc28ac0d7a51be7670739" translate="yes" xml:space="preserve">
          <source>Valid and Acceptable Indices</source>
          <target state="translated">有効な指標と受け入れ可能な指標</target>
        </trans-unit>
        <trans-unit id="14347ed892514b4d69c3b3bf601cd9c8fb3e904b" translate="yes" xml:space="preserve">
          <source>Values and Types</source>
          <target state="translated">値とタイプ</target>
        </trans-unit>
        <trans-unit id="f5b9087c637e2bfd3e2cf26a4d45a4be30f815bf" translate="yes" xml:space="preserve">
          <source>Variable name '&lt;code&gt;?&lt;/code&gt;' (interrogation mark) represents variables with no known names (variables from chunks saved without debug information).</source>
          <target state="translated">変数名 ' &lt;code&gt;?&lt;/code&gt; '（疑問符）は、既知の名前のない変数（デバッグ情報なしで保存されたチャンクの変数）を表します。</target>
        </trans-unit>
        <trans-unit id="12bad2c7ac94b1eae85bb4982ce9b8d423815b52" translate="yes" xml:space="preserve">
          <source>Variable names starting with '&lt;code&gt;(&lt;/code&gt;' (open parenthesis) represent variables with no known names (internal variables such as loop control variables, and variables from chunks saved without debug information).</source>
          <target state="translated">' &lt;code&gt;(&lt;/code&gt; '（左括弧）で始まる変数名は、既知の名前のない変数（ループ制御変数などの内部変数、およびデバッグ情報なしで保存されたチャンクの変数）を表します。</target>
        </trans-unit>
        <trans-unit id="91ca405a6bcded978537314760080c405ac3d0b7" translate="yes" xml:space="preserve">
          <source>Variable names starting with '&lt;code&gt;(&lt;/code&gt;' (open parenthesis) represent variables with no known names (variables from chunks saved without debug information).</source>
          <target state="translated">' &lt;code&gt;(&lt;/code&gt; '（左括弧）で始まる変数名は、既知の名前のない変数（デバッグ情報なしで保存されたチャンクの変数）を表します。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="be26bb31c1703ed9ce7e9ecf54d6a6a8c765c6e5" translate="yes" xml:space="preserve">
          <source>Variables are places that store values. There are three kinds of variables in Lua: global variables, local variables, and table fields.</source>
          <target state="translated">変数とは、値を格納する場所のことです。Luaには、グローバル変数、ローカル変数、テーブルフィールドの3種類の変数があります。</target>
        </trans-unit>
        <trans-unit id="c95e5bb697c2902b5736feab85b400b53ef72faf" translate="yes" xml:space="preserve">
          <source>Visibility Rules</source>
          <target state="translated">可視性のルール</target>
        </trans-unit>
        <trans-unit id="e3ca3a5141d9967c701776eca46ec10c9e635787" translate="yes" xml:space="preserve">
          <source>We can specify any byte in a short literal string by its numeric value (including embedded zeros). This can be done with the escape sequence &lt;code&gt;\x&lt;em&gt;XX&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;XX&lt;/em&gt; is a sequence of exactly two hexadecimal digits, or with the escape sequence &lt;code&gt;\&lt;em&gt;ddd&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;ddd&lt;/em&gt; is a sequence of up to three decimal digits. (Note that if a decimal escape sequence is to be followed by a digit, it must be expressed using exactly three digits.)</source>
          <target state="translated">短いリテラル文字列の任意のバイトを、その数値（埋め込まれたゼロを含む）で指定できます。これは、エスケープシーケンス &lt;code&gt;\x&lt;em&gt;XX&lt;/em&gt;&lt;/code&gt; （&lt;em&gt;XX&lt;/em&gt;は正確に2桁の16進数のシーケンス）またはエスケープシーケンス &lt;code&gt;\&lt;em&gt;ddd&lt;/em&gt;&lt;/code&gt; （&lt;em&gt;ddd&lt;/em&gt;は最大3桁の10進数のシーケンス）で実行できます。 （10進エスケープシーケンスの後に数字が続く場合は、正確に3桁を使用して表現する必要があることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="588ae2cdfea2aa5958efa441455bc701b5efa923" translate="yes" xml:space="preserve">
          <source>We can specify any byte in a short literal string, including embedded zeros, by its numeric value. This can be done with the escape sequence &lt;code&gt;\x&lt;em&gt;XX&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;XX&lt;/em&gt; is a sequence of exactly two hexadecimal digits, or with the escape sequence &lt;code&gt;\&lt;em&gt;ddd&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;ddd&lt;/em&gt; is a sequence of up to three decimal digits. (Note that if a decimal escape sequence is to be followed by a digit, it must be expressed using exactly three digits.)</source>
          <target state="translated">埋め込まれたゼロを含む短いリテラル文字列の任意のバイトを、その数値で指定できます。これは、エスケープシーケンス &lt;code&gt;\x&lt;em&gt;XX&lt;/em&gt;&lt;/code&gt; （&lt;em&gt;XX&lt;/em&gt;は正確に2桁の16進数のシーケンス）、またはエスケープシーケンス &lt;code&gt;\&lt;em&gt;ddd&lt;/em&gt;&lt;/code&gt; （&lt;em&gt;ddd&lt;/em&gt;は最大3桁の10進数のシーケンス）を使用して実行できます。 （10進数のエスケープシーケンスの後に数字を続ける場合は、正確に3桁で表現する必要があることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="a75447b7504738d77e48aaf615cad9ff4faa5f14" translate="yes" xml:space="preserve">
          <source>We need to set some terminology to explain continuations. We have a C function called from Lua which we will call the &lt;em&gt;original function&lt;/em&gt;. This original function then calls one of those three functions in the C API, which we will call the &lt;em&gt;callee function&lt;/em&gt;, that then yields the current thread. (This can happen when the callee function is &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, or when the callee function is either &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt; and the function called by them yields.)</source>
          <target state="translated">継続を説明するためにいくつかの用語を設定する必要があります。Luaから呼び出されるC関数があり、&lt;em&gt;元の関数&lt;/em&gt;を呼び出し&lt;em&gt;ます&lt;/em&gt;。この元の関数は、C APIの3つの関数の1つを呼び出します。これを&lt;em&gt;呼び出し先関数&lt;/em&gt;と呼び、現在のスレッドを生成します。（これは、呼び出し先の関数が&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;である場合、または呼び出し先の関数が&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; で&lt;/a&gt;あり、それらによって呼び出された関数が生成される場合に発生する可能性があります。）</target>
        </trans-unit>
        <trans-unit id="50c12071f88d71d4186a342c705d8f1079d28abd" translate="yes" xml:space="preserve">
          <source>We need to set some terminology to explain continuations. We have a C function called from Lua which we will call the &lt;em&gt;original function&lt;/em&gt;. This original function then calls one of those three functions in the C API, which we will call the &lt;em&gt;callee function&lt;/em&gt;, that then yields the current thread. This can happen when the callee function is &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, or when the callee function is either &lt;a href=&quot;#lua_callk&quot;&gt;&lt;code&gt;lua_callk&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pcallk&quot;&gt;&lt;code&gt;lua_pcallk&lt;/code&gt;&lt;/a&gt; and the function called by them yields.</source>
          <target state="translated">継続を説明するためにいくつかの用語を設定する必要があります。Luaから呼び出されたC関数があり、これを&lt;em&gt;元の関数&lt;/em&gt;と呼び&lt;em&gt;ます&lt;/em&gt;。次に、この元の関数は、C APIの3つの関数の1つを呼び出します。これを&lt;em&gt;呼び出し先関数&lt;/em&gt;と呼び、現在のスレッドを生成します。これは、呼び出し先関数が&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; の&lt;/a&gt;場合、または呼び出し先関数が&lt;a href=&quot;#lua_callk&quot;&gt; &lt;code&gt;lua_callk&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#lua_pcallk&quot;&gt; &lt;code&gt;lua_pcallk&lt;/code&gt; の&lt;/a&gt;いずれかであり、それらによって呼び出された関数が生成される場合に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d41db10b358155f4f013d45b45675b34f33d9ed3" translate="yes" xml:space="preserve">
          <source>Weak Tables</source>
          <target state="translated">弱いテーブル</target>
        </trans-unit>
        <trans-unit id="b484eff0d117b27e8defcec4a0326a877ca574fe" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;n&lt;/code&gt; is zero, this function creates a &lt;em&gt;light C function&lt;/em&gt;, which is just a pointer to the C function. In that case, it never raises a memory error.</source>
          <target state="translated">場合 &lt;code&gt;n&lt;/code&gt; ゼロであり、この機能は、作成し&lt;em&gt;た光C関数&lt;/em&gt; C関数へのポインタだけです。その場合、メモリエラーが発生することはありません。</target>
        </trans-unit>
        <trans-unit id="341c8ac217813125623e3b1667a920259b68f995" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nsize&lt;/code&gt; is not zero, the allocator must behave like &lt;code&gt;realloc&lt;/code&gt;. In particular, the allocator returns &lt;code&gt;NULL&lt;/code&gt; if and only if it cannot fulfill the request.</source>
          <target state="translated">とき &lt;code&gt;nsize&lt;/code&gt; の場合はゼロではない、アロケータは次のように動作しなければならない &lt;code&gt;realloc&lt;/code&gt; 。特に、アロケータは、要求を満たすことができない場合にのみ &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="996f3bf8346e25b1239b5ab5057ae46c604d1002" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nsize&lt;/code&gt; is not zero, the allocator must behave like &lt;code&gt;realloc&lt;/code&gt;. The allocator returns &lt;code&gt;NULL&lt;/code&gt; if and only if it cannot fulfill the request. Lua assumes that the allocator never fails when &lt;code&gt;osize &amp;gt;= nsize&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;nsize&lt;/code&gt; の場合はゼロではない、アロケータは次のように動作しなければならない &lt;code&gt;realloc&lt;/code&gt; 。アロケータは、リクエストを実行できない場合にのみ &lt;code&gt;NULL&lt;/code&gt; を返します。Luaは、 &lt;code&gt;osize &amp;gt;= nsize&lt;/code&gt; ときにアロケーターが失敗しないことを前提としています。</target>
        </trans-unit>
        <trans-unit id="be7cbd666142d4c0c3a8b1ac15f72ec90fcd56bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nsize&lt;/code&gt; is zero, the allocator must behave like &lt;code&gt;free&lt;/code&gt; and return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;nsize&lt;/code&gt; の場合はゼロで、アロケータは次のように動作する必要があり &lt;code&gt;free&lt;/code&gt; とリターン &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c59226f69b5bf9ddb3f25a1bd10f5e6547c8ad04" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nsize&lt;/code&gt; is zero, the allocator must behave like &lt;code&gt;free&lt;/code&gt; and then return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;nsize&lt;/code&gt; の場合はゼロで、アロケータは同じように動作しなければなら &lt;code&gt;free&lt;/code&gt; 、その後返す &lt;code&gt;NULL&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="63de127a2c08c3b5f3fa7d7ca6251d5614a09288" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nup&lt;/code&gt; is not zero, all functions are created sharing &lt;code&gt;nup&lt;/code&gt; upvalues, which must be previously pushed on the stack on top of the library table. These values are popped from the stack after the registration.</source>
          <target state="translated">とき &lt;code&gt;nup&lt;/code&gt; ゼロではない、すべての機能を共有して作成され &lt;code&gt;nup&lt;/code&gt; 以前のライブラリテーブルの上にスタックにプッシュしなければならない上位値を、。これらの値は、登録後にスタックからポップされます。</target>
        </trans-unit>
        <trans-unit id="954632ad2b6013e35487b453af471fab7d911066" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;nup&lt;/code&gt; is not zero, all functions are created with &lt;code&gt;nup&lt;/code&gt; upvalues, initialized with copies of the &lt;code&gt;nup&lt;/code&gt; values previously pushed on the stack on top of the library table. These values are popped from the stack after the registration.</source>
          <target state="translated">とき &lt;code&gt;nup&lt;/code&gt; ゼロではない、すべての機能を使用して作成され &lt;code&gt;nup&lt;/code&gt; のコピーを使用して初期化上位値、 &lt;code&gt;nup&lt;/code&gt; 以前のライブラリテーブルの上にスタックにプッシュされた値。これらの値は、登録後にスタックからポップされます。</target>
        </trans-unit>
        <trans-unit id="335a5475dbcacbd9ecdd1054fd0513668a84ec31" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ptr&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;osize&lt;/code&gt; encodes the kind of object that Lua is allocating. &lt;code&gt;osize&lt;/code&gt; is any of &lt;a href=&quot;#pdf-LUA_TSTRING&quot;&gt;&lt;code&gt;LUA_TSTRING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_TTABLE&quot;&gt;&lt;code&gt;LUA_TTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_TFUNCTION&quot;&gt;&lt;code&gt;LUA_TFUNCTION&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-LUA_TUSERDATA&quot;&gt;&lt;code&gt;LUA_TUSERDATA&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#pdf-LUA_TTHREAD&quot;&gt;&lt;code&gt;LUA_TTHREAD&lt;/code&gt;&lt;/a&gt; when (and only when) Lua is creating a new object of that type. When &lt;code&gt;osize&lt;/code&gt; is some other value, Lua is allocating memory for something else.</source>
          <target state="translated">&lt;code&gt;ptr&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; の場合、 &lt;code&gt;osize&lt;/code&gt; はLuaが割り当てているオブジェクトの種類をエンコードします。 &lt;code&gt;osize&lt;/code&gt; は、Luaがそのタイプの新しいオブジェクトを作成しているとき（およびそのときだけ）、&lt;a href=&quot;#pdf-LUA_TSTRING&quot;&gt; &lt;code&gt;LUA_TSTRING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-LUA_TTABLE&quot;&gt; &lt;code&gt;LUA_TTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-LUA_TFUNCTION&quot;&gt; &lt;code&gt;LUA_TFUNCTION&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-LUA_TUSERDATA&quot;&gt; &lt;code&gt;LUA_TUSERDATA&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#pdf-LUA_TTHREAD&quot;&gt; &lt;code&gt;LUA_TTHREAD&lt;/code&gt; の&lt;/a&gt;いずれかです。とき &lt;code&gt;osize&lt;/code&gt; 他のいくつかの値であり、Luaは何か他のもののためにメモリを割り当てるされます。</target>
        </trans-unit>
        <trans-unit id="46d45ecf04d4c4d9ebff91c3f78c309dab0e87ef" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;ptr&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, &lt;code&gt;osize&lt;/code&gt; is the size of the block pointed by &lt;code&gt;ptr&lt;/code&gt;, that is, the size given when it was allocated or reallocated.</source>
          <target state="translated">場合 &lt;code&gt;ptr&lt;/code&gt; がない &lt;code&gt;NULL&lt;/code&gt; 、 &lt;code&gt;osize&lt;/code&gt; ブロックの大きさが指す &lt;code&gt;ptr&lt;/code&gt; 、それが割り当てまたは再割り当てされたときに所定のサイズです。</target>
        </trans-unit>
        <trans-unit id="0344be77d1524703e63d720dcdc36380a6d9b380" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;t&lt;/code&gt; is a sequence, &lt;code&gt;#t&lt;/code&gt; returns its only border, which corresponds to the intuitive notion of the length of the sequence. When &lt;code&gt;t&lt;/code&gt; is not a sequence, &lt;code&gt;#t&lt;/code&gt; can return any of its borders. (The exact one depends on details of the internal representation of the table, which in turn can depend on how the table was populated and the memory addresses of its non-numeric keys.)</source>
          <target state="translated">場合 &lt;code&gt;t&lt;/code&gt; が配列され、 &lt;code&gt;#t&lt;/code&gt; をは、配列の長さの直観的概念に対応する唯一の境界を返します。とき &lt;code&gt;t&lt;/code&gt; はシーケンスではない、 &lt;code&gt;#t&lt;/code&gt; をは、その境界のいずれかを返すことができます。（正確なものは、テーブルの内部表現の詳細に依存します。テーブルの内部表現の詳細は、テーブルへのデータの入力方法と非数値キーのメモリアドレスに依存します。）</target>
        </trans-unit>
        <trans-unit id="3c915266f11381b28c8d7b3533ebdd9fec110c77" translate="yes" xml:space="preserve">
          <source>When Lua loads a chunk, the default value for its &lt;code&gt;_ENV&lt;/code&gt; upvalue is the global environment (see &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;). Therefore, by default, free names in Lua code refer to entries in the global environment (and, therefore, they are also called &lt;em&gt;global variables&lt;/em&gt;). Moreover, all standard libraries are loaded in the global environment and some functions there operate on that environment. You can use &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#pdf-loadfile&quot;&gt;&lt;code&gt;loadfile&lt;/code&gt;&lt;/a&gt;) to load a chunk with a different environment. (In C, you have to load the chunk and then change the value of its first upvalue.)</source>
          <target state="translated">Luaがチャンクをロードするとき、その &lt;code&gt;_ENV&lt;/code&gt; アップ値のデフォルト値はグローバル環境です（&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; を&lt;/a&gt;参照）。したがって、デフォルトでは、Luaコードのフリー名はグローバル環境のエントリを参照します（したがって、&lt;em&gt;グローバル変数&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;）。さらに、すべての標準ライブラリはグローバル環境にロードされ、そこでの一部の関数はその環境で動作します。&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#pdf-loadfile&quot;&gt; &lt;code&gt;loadfile&lt;/code&gt; &lt;/a&gt;）を使用して、異なる環境でチャンクをロードできます。 （Cでは、チャンクをロードしてから、その最初のアップバリューの値を変更する必要があります。）</target>
        </trans-unit>
        <trans-unit id="22c2aab30b39695e8a73be14337c6b9195ec6401" translate="yes" xml:space="preserve">
          <source>When Lua loads a chunk, the default value for its &lt;code&gt;_ENV&lt;/code&gt; variable is the global environment (see &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt;). Therefore, by default, free names in Lua code refer to entries in the global environment and, therefore, they are also called &lt;em&gt;global variables&lt;/em&gt;. Moreover, all standard libraries are loaded in the global environment and some functions there operate on that environment. You can use &lt;a href=&quot;#pdf-load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#pdf-loadfile&quot;&gt;&lt;code&gt;loadfile&lt;/code&gt;&lt;/a&gt;) to load a chunk with a different environment. (In C, you have to load the chunk and then change the value of its first upvalue; see &lt;a href=&quot;#lua_setupvalue&quot;&gt;&lt;code&gt;lua_setupvalue&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">Luaがチャンクをロードするとき、その &lt;code&gt;_ENV&lt;/code&gt; 変数のデフォルト値はグローバル環境です（&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; を&lt;/a&gt;参照）。したがって、デフォルトでは、Luaコードのフリーネームはグローバル環境のエントリを参照するため、&lt;em&gt;グローバル変数&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;。さらに、すべての標準ライブラリはグローバル環境にロードされ、そこでの一部の関数はその環境で動作します。&lt;a href=&quot;#pdf-load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#pdf-loadfile&quot;&gt; &lt;code&gt;loadfile&lt;/code&gt; &lt;/a&gt;）を使用して、別の環境でチャンクをロードできます。 （Cでは、チャンクをロードしてから、最初のアップバリューの値を変更する必要があります&lt;a href=&quot;#lua_setupvalue&quot;&gt; &lt;code&gt;lua_setupvalue&lt;/code&gt; &lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="9bf5cddf64fd956b790dcd47186d571d0648ca7d" translate="yes" xml:space="preserve">
          <source>When a C function calls &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;, the running coroutine suspends its execution, and the call to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt; that started this coroutine returns. The parameter &lt;code&gt;nresults&lt;/code&gt; is the number of values from the stack that will be passed as results to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C関数が&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; を呼び出す&lt;/a&gt;と、実行中のコルーチンはその実行を中断し、このコルーチンを開始した&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;への呼び出しが戻ります。パラメータ &lt;code&gt;nresults&lt;/code&gt; は、結果として&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; に&lt;/a&gt;渡されるスタックからの値の数です。</target>
        </trans-unit>
        <trans-unit id="6f9fd5a034919e5ee7025d158d3271b1427b5c02" translate="yes" xml:space="preserve">
          <source>When a C function is created, it is possible to associate some values with it, the so called upvalues; these upvalues are then accessible to the function whenever it is called. This association is called a C closure (see &lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2&lt;/a&gt;). To create a C closure, first the initial values for its upvalues must be pushed onto the stack. (When there are multiple upvalues, the first value is pushed first.) Then &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; is called to create and push the C function onto the stack, with the argument &lt;code&gt;n&lt;/code&gt; telling how many values will be associated with the function. &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; also pops these values from the stack.</source>
          <target state="translated">C関数が作成されると、いくつかの値、いわゆるアップバリューを関連付けることができます。これらのアップバリューは、関数が呼び出されるたびに関数にアクセスできます。この関連付けはCクロージャーと呼ばれます（&lt;a href=&quot;#4.2&quot;&gt;&amp;sect;4.2を&lt;/a&gt;参照）。 Cクロージャを作成するには、最初にそのアップバリューの初期値をスタックにプッシュする必要があります。 （複数のアップ値がある場合は、最初の値が最初にプッシュされます。）次に、&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;が呼び出され、C関数が作成されてスタックにプッシュされます。引数 &lt;code&gt;n&lt;/code&gt; は、関数に関連付けられる値の数を示します。&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;は、これらの値もスタックからポップします。</target>
        </trans-unit>
        <trans-unit id="6587795ac24fa71cf1c2a7e27096b42bc7a40713" translate="yes" xml:space="preserve">
          <source>When a C function is created, it is possible to associate some values with it, thus creating a &lt;em&gt;C closure&lt;/em&gt; (see &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt;); these values are called &lt;em&gt;upvalues&lt;/em&gt; and are accessible to the function whenever it is called.</source>
          <target state="translated">C関数が作成されると、いくつかの値を関連付けることができるため、&lt;em&gt;Cクロージャー&lt;/em&gt;が作成さ&lt;em&gt;れます&lt;/em&gt;（&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; を&lt;/a&gt;参照）。これらの値は&lt;em&gt;upvalues&lt;/em&gt;と呼ばれ、&lt;em&gt;呼び出さ&lt;/em&gt;れたときはいつでも関数にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="11ab54e362e4ae46fe6b07e57d87eadd11f23cbe" translate="yes" xml:space="preserve">
          <source>When a C function is created, it is possible to associate some values with it, thus creating a C closure (see &lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4&lt;/a&gt;); these values are then accessible to the function whenever it is called. To associate values with a C function, first these values must be pushed onto the stack (when there are multiple values, the first value is pushed first). Then &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; is called to create and push the C function onto the stack, with the argument &lt;code&gt;n&lt;/code&gt; telling how many values will be associated with the function. &lt;a href=&quot;#lua_pushcclosure&quot;&gt;&lt;code&gt;lua_pushcclosure&lt;/code&gt;&lt;/a&gt; also pops these values from the stack.</source>
          <target state="translated">C関数が作成されると、いくつかの値を関連付けることができるため、Cクロージャーが作成されます（&lt;a href=&quot;#4.4&quot;&gt;&amp;sect;4.4を&lt;/a&gt;参照）。これらの値は、関数が呼び出されるたびにアクセスできます。値をC関数に関連付けるには、最初にこれらの値をスタックにプッシュする必要があります（複数の値がある場合、最初の値が最初にプッシュされます）。次に、&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;が呼び出され、C関数を作成してスタックにプッシュします。引数 &lt;code&gt;n&lt;/code&gt; は、関数に関連付けられる値の数を示します。&lt;a href=&quot;#lua_pushcclosure&quot;&gt; &lt;code&gt;lua_pushcclosure&lt;/code&gt; &lt;/a&gt;もこれらの値をスタックからポップします。</target>
        </trans-unit>
        <trans-unit id="f143d2ac13b52a6742b50e250fa83e180f7c76c7" translate="yes" xml:space="preserve">
          <source>When a Lua function is called, it adjusts its list of arguments to the length of its list of parameters, unless the function is a &lt;em&gt;vararg function&lt;/em&gt;, which is indicated by three dots ('&lt;code&gt;...&lt;/code&gt;') at the end of its parameter list. A vararg function does not adjust its argument list; instead, it collects all extra arguments and supplies them to the function through a &lt;em&gt;vararg expression&lt;/em&gt;, which is also written as three dots. The value of this expression is a list of all actual extra arguments, similar to a function with multiple results. If a vararg expression is used inside another expression or in the middle of a list of expressions, then its return list is adjusted to one element. If the expression is used as the last element of a list of expressions, then no adjustment is made (unless that last expression is enclosed in parentheses).</source>
          <target state="translated">Lua関数が呼び出されると、関数がパラメータリストの最後に3つのドット（ ' &lt;code&gt;...&lt;/code&gt; '）で示される&lt;em&gt;vararg関数&lt;/em&gt;でない限り、引数のリストをパラメータのリストの長さに調整します。 。 vararg関数は引数リストを調整しません。代わりに、すべての余分な引数を収集し、&lt;em&gt;vararg式を&lt;/em&gt;介して関数に提供します&lt;em&gt;&lt;/em&gt;、これも3つのドットとして記述されます。この式の値は、複数の結果を持つ関数と同様に、実際のすべての追加引数のリストです。vararg式が別の式の内部または式のリストの途中で使用されている場合、その戻りリストは1つの要素に調整されます。式が式のリストの最後の要素として使用されている場合、調整は行われません（最後の式が括弧で囲まれている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="e078eea66272045084e3f01aa8c505b53aa0ead0" translate="yes" xml:space="preserve">
          <source>When a function is called, the list of arguments is adjusted to the length of the list of parameters, unless the function is a &lt;em&gt;vararg function&lt;/em&gt;, which is indicated by three dots ('&lt;code&gt;...&lt;/code&gt;') at the end of its parameter list. A vararg function does not adjust its argument list; instead, it collects all extra arguments and supplies them to the function through a &lt;em&gt;vararg expression&lt;/em&gt;, which is also written as three dots. The value of this expression is a list of all actual extra arguments, similar to a function with multiple results. If a vararg expression is used inside another expression or in the middle of a list of expressions, then its return list is adjusted to one element. If the expression is used as the last element of a list of expressions, then no adjustment is made (unless that last expression is enclosed in parentheses).</source>
          <target state="translated">関数が呼び出されると、その関数がパラメーターリストの最後にある3つのドット（ ' &lt;code&gt;...&lt;/code&gt; '）で示される&lt;em&gt;vararg関数&lt;/em&gt;でない限り、引数のリストはパラメーターのリストの長さに調整されます。 vararg関数は引数リストを調整しません。代わりに、すべての追加の引数を収集し、&lt;em&gt;vararg式を&lt;/em&gt;介して関数に提供します&lt;em&gt;&lt;/em&gt;、これも3つのドットとして書き込まれます。この式の値は、複数の結果を持つ関数に似た、すべての実際の追加引数のリストです。可変引数式が別の式の内部または式のリストの途中で使用される場合、その戻りリストは1つの要素に調整されます。式が式のリストの最後の要素として使用される場合、調整は行われません（最後の式が括弧で囲まれていない限り）。</target>
        </trans-unit>
        <trans-unit id="a989335dc83d50af6f8884cd0fdec47036abae37" translate="yes" xml:space="preserve">
          <source>When a marked object becomes dead, it is not collected immediately by the garbage collector. Instead, Lua puts it in a list. After the collection, Lua goes through that list. For each object in the list, it checks the object's &lt;code&gt;__gc&lt;/code&gt; metamethod: If it is present, Lua calls it with the object as its single argument.</source>
          <target state="translated">マークされたオブジェクトが死んだ場合、ガベージコレクターによってすぐには収集されません。代わりに、Luaはそれをリストに入れます。コレクションの後、ルアはそのリストを調べます。リスト内のオブジェクトごとに、オブジェクトの &lt;code&gt;__gc&lt;/code&gt; メタメソッドをチェックします。存在する場合、Luaはオブジェクトを単一の引数として呼び出します。</target>
        </trans-unit>
        <trans-unit id="da6fe573488f94135e6cdc83d520dc4a94e938c8" translate="yes" xml:space="preserve">
          <source>When a marked object becomes garbage, it is not collected immediately by the garbage collector. Instead, Lua puts it in a list. After the collection, Lua goes through that list. For each object in the list, it checks the object's &lt;code&gt;__gc&lt;/code&gt; metamethod: If it is a function, Lua calls it with the object as its single argument; if the metamethod is not a function, Lua simply ignores it.</source>
          <target state="translated">マークされたオブジェクトがガベージになると、ガベージコレクターによってすぐに収集されません。代わりに、Luaはそれをリストに入れます。コレクションの後、Luaはそのリストを調べます。リスト内の各オブジェクトについて、オブジェクトの &lt;code&gt;__gc&lt;/code&gt; メタメソッドをチェックします。それが関数の場合、Luaはオブジェクトを単一の引数としてそれを呼び出します。メタメソッドが関数でない場合、Luaはそれを単に無視します。</target>
        </trans-unit>
        <trans-unit id="80897f837555b95f2cb104a59226a4a40d8e481f" translate="yes" xml:space="preserve">
          <source>When called with &lt;b&gt;nil&lt;/b&gt; as the first argument, this function only returns the name of the current locale for the given category.</source>
          <target state="translated">最初の引数として&lt;b&gt;nil&lt;/b&gt;を指定して呼び出すと、この関数は指定されたカテゴリの現在のロケールの名前のみを返します。</target>
        </trans-unit>
        <trans-unit id="12503992ba3e7b779eee88f9ab72a6febed44f13" translate="yes" xml:space="preserve">
          <source>When called with &lt;code&gt;base&lt;/code&gt;, then &lt;code&gt;e&lt;/code&gt; must be a string to be interpreted as an integer numeral in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter '&lt;code&gt;A&lt;/code&gt;' (in either upper or lower case) represents 10, '&lt;code&gt;B&lt;/code&gt;' represents 11, and so forth, with '&lt;code&gt;Z&lt;/code&gt;' representing 35. If the string &lt;code&gt;e&lt;/code&gt; is not a valid numeral in the given base, the function returns &lt;b&gt;fail&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; で呼び出される場合、 &lt;code&gt;e&lt;/code&gt; は、そのbaseで整数として解釈される文字列である必要があります。基数は、2から36までの任意の整数です。10を超える基数では、文字「 &lt;code&gt;A&lt;/code&gt; 」（大文字または小文字）は10を表し、「 &lt;code&gt;B&lt;/code&gt; 」は11を表し、以下同様に、「 &lt;code&gt;Z&lt;/code&gt; 」は35を表します。文字列 &lt;code&gt;e&lt;/code&gt; が指定された有効な数字でない場合ベース、関数は&lt;b&gt;失敗を&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="641f9e62059a652c6e39c5a7f8f27534a9246ba4" translate="yes" xml:space="preserve">
          <source>When called with &lt;code&gt;base&lt;/code&gt;, then &lt;code&gt;e&lt;/code&gt; must be a string to be interpreted as an integer numeral in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter '&lt;code&gt;A&lt;/code&gt;' (in either upper or lower case) represents 10, '&lt;code&gt;B&lt;/code&gt;' represents 11, and so forth, with '&lt;code&gt;Z&lt;/code&gt;' representing 35. If the string &lt;code&gt;e&lt;/code&gt; is not a valid numeral in the given base, the function returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; を指定して呼び出される場合、 &lt;code&gt;e&lt;/code&gt; は、その基数で整数として解釈される文字列でなければなりません。基数は2から36までの整数です。 10を超える基数では、文字「 &lt;code&gt;A&lt;/code&gt; 」（大文字または小文字のいずれか）は10を表し、「 &lt;code&gt;B&lt;/code&gt; 」は11を表し、「 &lt;code&gt;Z&lt;/code&gt; 」は35を表します。文字列 &lt;code&gt;e&lt;/code&gt; が、ベース、関数は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="388bcef0db67f7e381df66c3f7ee8cf9b5be28dc" translate="yes" xml:space="preserve">
          <source>When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without arguments, it returns the current default input file.</source>
          <target state="translated">ファイル名を指定して呼び出されると、そのファイルを(テキストモードで)開き、そのハンドルを既定の入力ファイルに設定します。ファイルハンドルを指定して呼び出された場合は、単にこのファイルハンドルをデフォルトの入力ファイルに設定します。引数なしで呼び出された場合は、現在のデフォルト入力ファイルを返します。</target>
        </trans-unit>
        <trans-unit id="ae1235a6e1b0d97767a88001b252dc354fc4428a" translate="yes" xml:space="preserve">
          <source>When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without parameters, it returns the current default input file.</source>
          <target state="translated">ファイル名を指定して呼び出されると、そのファイルを(テキストモードで)開き、そのハンドルを既定の入力ファイルに設定します。ファイルハンドルを指定して呼び出された場合は、単にこのファイルハンドルをデフォルトの入力ファイルに設定します。パラメータなしで呼び出された場合は、現在のデフォルト入力ファイルを返します。</target>
        </trans-unit>
        <trans-unit id="861fad074ef63ba8ca7f9ab877254b943a4b7908" translate="yes" xml:space="preserve">
          <source>When called with a table, &lt;code&gt;os.time&lt;/code&gt; also normalizes all the fields documented in the &lt;a href=&quot;#pdf-os.date&quot;&gt;&lt;code&gt;os.date&lt;/code&gt;&lt;/a&gt; function, so that they represent the same time as before the call but with values inside their valid ranges.</source>
          <target state="translated">テーブルを &lt;code&gt;os.time&lt;/code&gt; して呼び出されると、os.timeは、&lt;a href=&quot;#pdf-os.date&quot;&gt; &lt;code&gt;os.date&lt;/code&gt; &lt;/a&gt;関数に記述されているすべてのフィールドも正規化するため、呼び出し前と同じ時刻を表しますが、値は有効な範囲内にあります。</target>
        </trans-unit>
        <trans-unit id="36b8d68eea93133c352fa9c0560fcd4d022359aa" translate="yes" xml:space="preserve">
          <source>When called with at least one argument, the integer parameters &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are joined into a 128-bit &lt;em&gt;seed&lt;/em&gt; that is used to reinitialize the pseudo-random generator; equal seeds produce equal sequences of numbers. The default for &lt;code&gt;y&lt;/code&gt; is zero.</source>
          <target state="translated">少なくとも1つの引数を指定して呼び出されると、整数パラメーター &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; は、疑似ランダムジェネレーターの再初期化に使用される128ビット&lt;em&gt;シードに&lt;/em&gt;結合されます。等しいシードは、等しい数のシーケンスを生成します。 &lt;code&gt;y&lt;/code&gt; のデフォルトはゼロです。</target>
        </trans-unit>
        <trans-unit id="cb0d3b8cfb48505757d0b30079cef91155c8b44b" translate="yes" xml:space="preserve">
          <source>When called with no &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;tonumber&lt;/code&gt; tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then &lt;code&gt;tonumber&lt;/code&gt; returns this number; otherwise, it returns &lt;b&gt;fail&lt;/b&gt;.</source>
          <target state="translated">なしで呼び出されたときに &lt;code&gt;base&lt;/code&gt; 、 &lt;code&gt;tonumber&lt;/code&gt; 数に引数を変換しようとします。引数がすでに数値または数値に変換可能な文字列である場合、 &lt;code&gt;tonumber&lt;/code&gt; はこの数値を返します。それ以外の場合は、&lt;b&gt;failを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="0331839def59d1c279589644566be45521e46878" translate="yes" xml:space="preserve">
          <source>When called with no &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;tonumber&lt;/code&gt; tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then &lt;code&gt;tonumber&lt;/code&gt; returns this number; otherwise, it returns &lt;b&gt;nil&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;base&lt;/code&gt; なしで呼び出されると、 &lt;code&gt;tonumber&lt;/code&gt; は引数を数値に変換しようとします。引数がすでに数値または数値に変換可能な文字列である場合、 &lt;code&gt;tonumber&lt;/code&gt; はこの数値を返します。それ以外の場合は&lt;b&gt;nilを&lt;/b&gt;返します。</target>
        </trans-unit>
        <trans-unit id="2cf361fe46fad3d672a6b7fc3deab505bdbf7127" translate="yes" xml:space="preserve">
          <source>When called with no arguments, Lua generates a seed with a weak attempt for randomness.</source>
          <target state="translated">引数なしで呼び出された場合、Luaはランダム性の弱いシードを生成します。</target>
        </trans-unit>
        <trans-unit id="e694403948e49c3cdfc8883a69a69e59e1e2c12c" translate="yes" xml:space="preserve">
          <source>When called with option &lt;code&gt;-E&lt;/code&gt;, besides ignoring &lt;code&gt;LUA_INIT&lt;/code&gt;, Lua also ignores the values of &lt;code&gt;LUA_PATH&lt;/code&gt; and &lt;code&gt;LUA_CPATH&lt;/code&gt;, setting the values of &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt; with the default paths defined in &lt;code&gt;luaconf.h&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;-E&lt;/code&gt; で呼び出されると、 &lt;code&gt;LUA_INIT&lt;/code&gt; 無視するだけでなく、Luaは &lt;code&gt;LUA_PATH&lt;/code&gt; と &lt;code&gt;LUA_CPATH&lt;/code&gt; の値も無視し、&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; の&lt;/a&gt;値を &lt;code&gt;luaconf.h&lt;/code&gt; で定義されているデフォルトパスで設定します。</target>
        </trans-unit>
        <trans-unit id="595bc8625b546518b3559c5e580a4c82ef8058d6" translate="yes" xml:space="preserve">
          <source>When called with the option &lt;code&gt;-E&lt;/code&gt;, Lua does not consult any environment variables. In particular, the values of &lt;a href=&quot;#pdf-package.path&quot;&gt;&lt;code&gt;package.path&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pdf-package.cpath&quot;&gt;&lt;code&gt;package.cpath&lt;/code&gt;&lt;/a&gt; are set with the default paths defined in &lt;code&gt;luaconf.h&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;-E&lt;/code&gt; を指定して呼び出された場合、Luaは環境変数を参照しません。特に、&lt;a href=&quot;#pdf-package.path&quot;&gt; &lt;code&gt;package.path&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#pdf-package.cpath&quot;&gt; &lt;code&gt;package.cpath&lt;/code&gt; の&lt;/a&gt;値は、 &lt;code&gt;luaconf.h&lt;/code&gt; で定義されているデフォルトのパスで設定されます。</target>
        </trans-unit>
        <trans-unit id="de667989e59831a06657a1b7bb1953b9b2690bfc" translate="yes" xml:space="preserve">
          <source>When called without a &lt;code&gt;command&lt;/code&gt;, &lt;code&gt;os.execute&lt;/code&gt; returns a boolean that is true if a shell is available.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; なしで呼び出された場合、 &lt;code&gt;os.execute&lt;/code&gt; は、シェルが使用可能な場合にtrueとなるブール値を返します。</target>
        </trans-unit>
        <trans-unit id="08516ebb937ecdc973de2d47f44995af938578a2" translate="yes" xml:space="preserve">
          <source>When called without arguments, &lt;a href=&quot;#pdf-debug.sethook&quot;&gt;&lt;code&gt;debug.sethook&lt;/code&gt;&lt;/a&gt; turns off the hook.</source>
          <target state="translated">引数なしで呼び出されると、&lt;a href=&quot;#pdf-debug.sethook&quot;&gt; &lt;code&gt;debug.sethook&lt;/code&gt; &lt;/a&gt;はフックをオフにします。</target>
        </trans-unit>
        <trans-unit id="8dfc7d66f66b8d42b0606debc6628a523caba4e4" translate="yes" xml:space="preserve">
          <source>When called without arguments, &lt;code&gt;date&lt;/code&gt; returns a reasonable date and time representation that depends on the host system and on the current locale. (More specifically, &lt;code&gt;os.date()&lt;/code&gt; is equivalent to &lt;code&gt;os.date(&quot;%c&quot;)&lt;/code&gt;.)</source>
          <target state="translated">引数なしで呼び出されると、 &lt;code&gt;date&lt;/code&gt; は、ホストシステムと現在のロケールに依存する適切な日付と時刻の表現を返します。（より具体的には、 &lt;code&gt;os.date()&lt;/code&gt; は &lt;code&gt;os.date(&quot;%c&quot;)&lt;/code&gt; と同等です。）</target>
        </trans-unit>
        <trans-unit id="c64be510d7a1b577fd35233990dcc39ace49bc5f" translate="yes" xml:space="preserve">
          <source>When called without arguments, returns a pseudo-random float with uniform distribution in the range &lt;em&gt;[0,1)&lt;/em&gt;. When called with two integers &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;math.random&lt;/code&gt; returns a pseudo-random integer with uniform distribution in the range &lt;em&gt;[m, n]&lt;/em&gt;. (The value &lt;em&gt;n-m&lt;/em&gt; cannot be negative and must fit in a Lua integer.) The call &lt;code&gt;math.random(n)&lt;/code&gt; is equivalent to &lt;code&gt;math.random(1,n)&lt;/code&gt;.</source>
          <target state="translated">引数なしで呼び出された場合、&lt;em&gt;[0,1）の&lt;/em&gt;範囲で均一な分布を持つ疑似ランダムfloatを返します。 2つの整数 &lt;code&gt;m&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; を &lt;code&gt;math.random&lt;/code&gt; 呼び出されると、math.randomは&lt;em&gt;[m、n]の&lt;/em&gt;範囲の一様分布の疑似ランダム整数を返します。 （値&lt;em&gt;nm&lt;/em&gt;は負にすることはできず、Lua整数に収まる必要があります。）呼び出し &lt;code&gt;math.random(n)&lt;/code&gt; は &lt;code&gt;math.random(1,n)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="960c42dc7bcd6f99e9cb92d7e9f07ec281c2bc3b" translate="yes" xml:space="preserve">
          <source>When called without arguments, returns a pseudo-random float with uniform distribution in the range &lt;em&gt;[0,1)&lt;/em&gt;. When called with two integers &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;math.random&lt;/code&gt; returns a pseudo-random integer with uniform distribution in the range &lt;em&gt;[m, n]&lt;/em&gt;. The call &lt;code&gt;math.random(n)&lt;/code&gt;, for a positive &lt;code&gt;n&lt;/code&gt;, is equivalent to &lt;code&gt;math.random(1,n)&lt;/code&gt;. The call &lt;code&gt;math.random(0)&lt;/code&gt; produces an integer with all bits (pseudo)random.</source>
          <target state="translated">引数なしで呼び出されると、&lt;em&gt;[0,1）の&lt;/em&gt;範囲で一様分布する疑似ランダムフロートを返します。 &lt;code&gt;math.random&lt;/code&gt; は、2つの整数 &lt;code&gt;m&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; で呼び出されると、&lt;em&gt;[m、n]の&lt;/em&gt;範囲で一様分布する疑似乱数整数を返します。正の &lt;code&gt;n&lt;/code&gt; に対する &lt;code&gt;math.random(n)&lt;/code&gt; の呼び出しは、 &lt;code&gt;math.random(1,n)&lt;/code&gt; と同等です。 &lt;code&gt;math.random(0)&lt;/code&gt; を呼び出すと、すべてのビットが（疑似）ランダムな整数が生成されます。</target>
        </trans-unit>
        <trans-unit id="29766b7237675cb97603d39839cfd67a198b7d0e" translate="yes" xml:space="preserve">
          <source>When called without option &lt;code&gt;-E&lt;/code&gt;, the interpreter checks for an environment variable &lt;a id=&quot;pdf-LUA_INIT_5_3&quot;&gt;&lt;code&gt;LUA_INIT_5_3&lt;/code&gt;&lt;/a&gt; (or &lt;a id=&quot;pdf-LUA_INIT&quot;&gt;&lt;code&gt;LUA_INIT&lt;/code&gt;&lt;/a&gt; if the versioned name is not defined) before running any argument. If the variable content has the format &lt;code&gt;@&lt;em&gt;filename&lt;/em&gt;&lt;/code&gt;, then &lt;code&gt;lua&lt;/code&gt; executes the file. Otherwise, &lt;code&gt;lua&lt;/code&gt; executes the string itself.</source>
          <target state="translated">オプションなしで呼び出されたときに &lt;code&gt;-E&lt;/code&gt; 、環境変数のためのインタプリタをチェック&lt;a id=&quot;pdf-LUA_INIT_5_3&quot;&gt; &lt;code&gt;LUA_INIT_5_3&lt;/code&gt; &lt;/a&gt;（または&lt;a id=&quot;pdf-LUA_INIT&quot;&gt; &lt;code&gt;LUA_INIT&lt;/code&gt; は、&lt;/a&gt;任意の引数を実行する前に、バージョン名が定義されていない場合）。変数contentの形式が &lt;code&gt;@&lt;em&gt;filename&lt;/em&gt;&lt;/code&gt; 場合、 &lt;code&gt;lua&lt;/code&gt; はファイルを実行します。それ以外の場合、 &lt;code&gt;lua&lt;/code&gt; は文字列自体を実行します。</target>
        </trans-unit>
        <trans-unit id="af35e90ee5c0251ed92b8eb4bb70c55a27767934" translate="yes" xml:space="preserve">
          <source>When called without the option &lt;code&gt;-E&lt;/code&gt;, the interpreter checks for an environment variable &lt;a id=&quot;pdf-LUA_INIT_5_4&quot;&gt;&lt;code&gt;LUA_INIT_5_4&lt;/code&gt;&lt;/a&gt; (or &lt;a id=&quot;pdf-LUA_INIT&quot;&gt;&lt;code&gt;LUA_INIT&lt;/code&gt;&lt;/a&gt; if the versioned name is not defined) before running any argument. If the variable content has the format &lt;code&gt;@&lt;em&gt;filename&lt;/em&gt;&lt;/code&gt;, then &lt;code&gt;lua&lt;/code&gt; executes the file. Otherwise, &lt;code&gt;lua&lt;/code&gt; executes the string itself.</source>
          <target state="translated">オプションなしで呼び出されたときに &lt;code&gt;-E&lt;/code&gt; 、環境変数のためのインタプリタをチェック&lt;a id=&quot;pdf-LUA_INIT_5_4&quot;&gt; &lt;code&gt;LUA_INIT_5_4&lt;/code&gt; &lt;/a&gt;（または&lt;a id=&quot;pdf-LUA_INIT&quot;&gt; &lt;code&gt;LUA_INIT&lt;/code&gt; は、&lt;/a&gt;任意の引数を実行する前に、バージョン名が定義されていない場合）。変数の内容がフォーマットされている場合 &lt;code&gt;@&lt;em&gt;filename&lt;/em&gt;&lt;/code&gt; 、その後、 &lt;code&gt;lua&lt;/code&gt; 、ファイルを実行します。それ以外の場合、 &lt;code&gt;lua&lt;/code&gt; は文字列自体を実行します。</target>
        </trans-unit>
        <trans-unit id="30a01c66de0f50f818dc4c5eb18a31a7ce0c4e4f" translate="yes" xml:space="preserve">
          <source>When closing a file handle created with &lt;a href=&quot;#pdf-io.popen&quot;&gt;&lt;code&gt;io.popen&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#pdf-file:close&quot;&gt;&lt;code&gt;file:close&lt;/code&gt;&lt;/a&gt; returns the same values returned by &lt;a href=&quot;#pdf-os.execute&quot;&gt;&lt;code&gt;os.execute&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">で作成したファイルハンドル閉じるとき&lt;a href=&quot;#pdf-io.popen&quot;&gt; &lt;code&gt;io.popen&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#pdf-file:close&quot;&gt; &lt;code&gt;file:close&lt;/code&gt; &lt;/a&gt;リターンで返される値と同じ値&lt;a href=&quot;#pdf-os.execute&quot;&gt; &lt;code&gt;os.execute&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7249fe8ac6ec7cee81ebe5d27b0ade52596d313" translate="yes" xml:space="preserve">
          <source>When finalizing an object, Lua does not ignore &lt;code&gt;__gc&lt;/code&gt; metamethods that are not functions. Any value will be called, if present. (Non-callable values will generate a warning, like any other error when calling a finalizer.)</source>
          <target state="translated">オブジェクトをファイナライズするとき、Luaは関数ではない &lt;code&gt;__gc&lt;/code&gt; メタメソッドを無視しません。存在する場合は、任意の値が呼び出されます。（呼び出し不可能な値は、ファイナライザーを呼び出すときの他のエラーと同様に、警告を生成します。）</target>
        </trans-unit>
        <trans-unit id="37e9db54045b382cd01f62245d15a65082274498" translate="yes" xml:space="preserve">
          <source>When finishing normally, the interpreter closes its main Lua state (see &lt;a href=&quot;#lua_close&quot;&gt;&lt;code&gt;lua_close&lt;/code&gt;&lt;/a&gt;). The script can avoid this step by calling &lt;a href=&quot;#pdf-os.exit&quot;&gt;&lt;code&gt;os.exit&lt;/code&gt;&lt;/a&gt; to terminate.</source>
          <target state="translated">正常に終了すると、インタープリターはメインのLua状態を閉じます（&lt;a href=&quot;#lua_close&quot;&gt; &lt;code&gt;lua_close&lt;/code&gt; を&lt;/a&gt;参照）。スクリプトは、&lt;a href=&quot;#pdf-os.exit&quot;&gt; &lt;code&gt;os.exit&lt;/code&gt; &lt;/a&gt;を呼び出して終了することにより、このステップを回避できます。</target>
        </trans-unit>
        <trans-unit id="05829140d113fda20398a82789b93e3ec1b75792" translate="yes" xml:space="preserve">
          <source>When possible, you may prefer to use &lt;a href=&quot;#pdf-io.tmpfile&quot;&gt;&lt;code&gt;io.tmpfile&lt;/code&gt;&lt;/a&gt;, which automatically removes the file when the program ends.</source>
          <target state="translated">可能であれば、プログラムの終了時にファイルを自動的に削除する&lt;a href=&quot;#pdf-io.tmpfile&quot;&gt; &lt;code&gt;io.tmpfile&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8f55b3bc753eda1e33e754171321ae6cdf1d0c2b" translate="yes" xml:space="preserve">
          <source>When the coroutine is resumed again, Lua calls the given continuation function &lt;code&gt;k&lt;/code&gt; to continue the execution of the C function that yielded (see &lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5&lt;/a&gt;). This continuation function receives the same stack from the previous function, with the &lt;code&gt;n&lt;/code&gt; results removed and replaced by the arguments passed to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;. Moreover, the continuation function receives the value &lt;code&gt;ctx&lt;/code&gt; that was passed to &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コルーチンが再開されると、Luaは指定された継続関数 &lt;code&gt;k&lt;/code&gt; を呼び出して、生成されたC関数の実行を継続します（&lt;a href=&quot;#4.5&quot;&gt;&amp;sect;4.5を&lt;/a&gt;参照）。この継続関数は、前の関数から同じスタックを受け取りますが、 &lt;code&gt;n&lt;/code&gt; 個の結果が削除され、&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; に&lt;/a&gt;渡された引数に置き換えられます。さらに、継続関数は、&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;に渡された値 &lt;code&gt;ctx&lt;/code&gt; を受け取ります。</target>
        </trans-unit>
        <trans-unit id="e0d813e63ce1dec1bf88d125498265fe1c745f04" translate="yes" xml:space="preserve">
          <source>When the coroutine is resumed again, Lua calls the given continuation function &lt;code&gt;k&lt;/code&gt; to continue the execution of the C function that yielded (see &lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7&lt;/a&gt;). This continuation function receives the same stack from the previous function, with the &lt;code&gt;n&lt;/code&gt; results removed and replaced by the arguments passed to &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;. Moreover, the continuation function receives the value &lt;code&gt;ctx&lt;/code&gt; that was passed to &lt;a href=&quot;#lua_yieldk&quot;&gt;&lt;code&gt;lua_yieldk&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コルーチンが再び再開されると、Luaは指定された継続関数 &lt;code&gt;k&lt;/code&gt; を呼び出して、生成されたC関数の実行を継続します（&lt;a href=&quot;#4.7&quot;&gt;&amp;sect;4.7を&lt;/a&gt;参照）。この継続関数は、前の関数から同じスタックを受け取り、 &lt;code&gt;n&lt;/code&gt; 個の結果を削除して、&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; に&lt;/a&gt;渡された引数で置き換えます。さらに、継続関数は&lt;a href=&quot;#lua_yieldk&quot;&gt; &lt;code&gt;lua_yieldk&lt;/code&gt; &lt;/a&gt;に渡された値 &lt;code&gt;ctx&lt;/code&gt; を受け取ります。</target>
        </trans-unit>
        <trans-unit id="a75209bbb2c2e6ad290df78bf5d0eed53f0f5ef0" translate="yes" xml:space="preserve">
          <source>When the function is called, the values in these fields do not need to be inside their valid ranges. For instance, if &lt;code&gt;sec&lt;/code&gt; is -10, it means 10 seconds before the time specified by the other fields; if &lt;code&gt;hour&lt;/code&gt; is 1000, it means 1000 hours after the time specified by the other fields.</source>
          <target state="translated">関数が呼び出されるとき、これらのフィールドの値は有効な範囲内にある必要はありません。たとえば、 &lt;code&gt;sec&lt;/code&gt; が-10の場合、他のフィールドで指定された時刻の10秒前を意味します。 &lt;code&gt;hour&lt;/code&gt; が1000の場合、他のフィールドで指定された時間から1000時間後を意味します。</target>
        </trans-unit>
        <trans-unit id="4c6a10ad01c056a56db07a26afc7431181db765d" translate="yes" xml:space="preserve">
          <source>When the hook is called, its first parameter is a string describing the event that has triggered its call: &lt;code&gt;&quot;call&quot;&lt;/code&gt; (or &lt;code&gt;&quot;tail call&quot;&lt;/code&gt;), &lt;code&gt;&quot;return&quot;&lt;/code&gt;, &lt;code&gt;&quot;line&quot;&lt;/code&gt;, and &lt;code&gt;&quot;count&quot;&lt;/code&gt;. For line events, the hook also gets the new line number as its second parameter. Inside a hook, you can call &lt;code&gt;getinfo&lt;/code&gt; with level 2 to get more information about the running function (level 0 is the &lt;code&gt;getinfo&lt;/code&gt; function, and level 1 is the hook function).</source>
          <target state="translated">フックが呼び出されるとき、その最初のパラメーターは、その呼び出しをトリガーしたイベントを説明する文字列です： &lt;code&gt;&quot;call&quot;&lt;/code&gt; （または &lt;code&gt;&quot;tail call&quot;&lt;/code&gt; ）、 &lt;code&gt;&quot;return&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;line&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;count&quot;&lt;/code&gt; 。ラインイベントの場合、フックは2番目のパラメーターとして新しいライン番号も取得します。フック内では、レベル2で &lt;code&gt;getinfo&lt;/code&gt; を呼び出して、実行中の関数に関する詳細情報を取得できます（レベル0は &lt;code&gt;getinfo&lt;/code&gt; 関数、レベル1はフック関数です）。</target>
        </trans-unit>
        <trans-unit id="8bbba941f15e3649b6735004f1fa9587fdc162c9" translate="yes" xml:space="preserve">
          <source>When the hook is called, its first parameter is a string describing the event that has triggered its call: &lt;code&gt;&quot;call&quot;&lt;/code&gt;, &lt;code&gt;&quot;tail call&quot;&lt;/code&gt;, &lt;code&gt;&quot;return&quot;&lt;/code&gt;, &lt;code&gt;&quot;line&quot;&lt;/code&gt;, and &lt;code&gt;&quot;count&quot;&lt;/code&gt;. For line events, the hook also gets the new line number as its second parameter. Inside a hook, you can call &lt;code&gt;getinfo&lt;/code&gt; with level 2 to get more information about the running function. (Level 0 is the &lt;code&gt;getinfo&lt;/code&gt; function, and level 1 is the hook function.)</source>
          <target state="translated">フックが呼び出されると、その最初のパラメーターは、呼び出しをトリガーしたイベントを説明する文字列です： &lt;code&gt;&quot;call&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;tail call&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;return&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;line&quot;&lt;/code&gt; 、および &lt;code&gt;&quot;count&quot;&lt;/code&gt; 。行イベントの場合、フックは2番目のパラメーターとして新しい行番号も取得します。フック内で、レベル2の &lt;code&gt;getinfo&lt;/code&gt; を呼び出して、実行中の関数に関する詳細情報を取得できます。 （レベル0は &lt;code&gt;getinfo&lt;/code&gt; 関数であり、レベル1はフック関数です。）</target>
        </trans-unit>
        <trans-unit id="eaa8e9df04a952020bd076482c3d60135f7f329c" translate="yes" xml:space="preserve">
          <source>When using implicit file handles, all operations are supplied by table &lt;a id=&quot;pdf-io&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt;. When using explicit file handles, the operation &lt;a href=&quot;#pdf-io.open&quot;&gt;&lt;code&gt;io.open&lt;/code&gt;&lt;/a&gt; returns a file handle and then all operations are supplied as methods of the file handle.</source>
          <target state="translated">暗黙的なファイルハンドルを使用する場合、すべての操作はテーブル&lt;a id=&quot;pdf-io&quot;&gt; &lt;code&gt;io&lt;/code&gt; &lt;/a&gt;によって提供されます。明示的なファイルハンドルを使用する場合、操作&lt;a href=&quot;#pdf-io.open&quot;&gt; &lt;code&gt;io.open&lt;/code&gt; &lt;/a&gt;はファイルハンドルを返し、すべての操作はファイルハンドルのメソッドとして提供されます。</target>
        </trans-unit>
        <trans-unit id="66e7217ccc689c6dec071df236389bbeca36a0c9" translate="yes" xml:space="preserve">
          <source>When you call a Lua function without a fixed number of results (see &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;), Lua ensures that the stack has enough space for all results, but it does not ensure any extra space. So, before pushing anything in the stack after such a call you should use &lt;a href=&quot;#lua_checkstack&quot;&gt;&lt;code&gt;lua_checkstack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">結果の数を固定せずにLua関数を呼び出す場合（&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; を&lt;/a&gt;参照）、Luaはすべての結果に対して十分なスペースをスタックに確保しますが、余分なスペースは確保しません。そのため、このような呼び出しの後、スタックに何かをプッシュする前に、&lt;a href=&quot;#lua_checkstack&quot;&gt; &lt;code&gt;lua_checkstack&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e87402f549363e6adea42f0d7521692e33eb5518" translate="yes" xml:space="preserve">
          <source>When you call a Lua function without a fixed number of results (see &lt;a href=&quot;#lua_call&quot;&gt;&lt;code&gt;lua_call&lt;/code&gt;&lt;/a&gt;), Lua ensures that the stack has enough space for all results, but it does not ensure any extra space. So, before pushing anything on the stack after such a call you should use &lt;a href=&quot;#lua_checkstack&quot;&gt;&lt;code&gt;lua_checkstack&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">固定数の結果なしでLua関数を呼び出すと（&lt;a href=&quot;#lua_call&quot;&gt; &lt;code&gt;lua_call&lt;/code&gt; を&lt;/a&gt;参照）、Luaはスタックにすべての結果に対して十分なスペースがあることを保証しますが、余分なスペースは保証しません。したがって、そのような呼び出しの後にスタックに何かをプッシュする前に、&lt;a href=&quot;#lua_checkstack&quot;&gt; &lt;code&gt;lua_checkstack&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0fac89278e16d9cfb7afed920548790f04b59edb" translate="yes" xml:space="preserve">
          <source>When you close a state (see &lt;a href=&quot;#lua_close&quot;&gt;&lt;code&gt;lua_close&lt;/code&gt;&lt;/a&gt;), Lua calls the finalizers of all objects marked for finalization, following the reverse order that they were marked. If any finalizer marks objects for collection during that phase, these marks have no effect.</source>
          <target state="translated">状態を閉じるとき（&lt;a href=&quot;#lua_close&quot;&gt; &lt;code&gt;lua_close&lt;/code&gt; を&lt;/a&gt;参照）、Luaは、ファイナライズ対象としてマークされたすべてのオブジェクトのファイナライザを、それらがマークされた逆の順序に従って呼び出します。ファイナライザがそのフェーズ中にコレクションのオブジェクトをマークした場合、これらのマークは効果がありません。</target>
        </trans-unit>
        <trans-unit id="bfa2a1bee37ec1b8b5edb99fbbb2457d178207e5" translate="yes" xml:space="preserve">
          <source>When you create a new Lua state, its registry comes with some predefined values. These predefined values are indexed with integer keys defined as constants in &lt;code&gt;lua.h&lt;/code&gt;. The following constants are defined:</source>
          <target state="translated">新しいLua状態を作成すると、そのレジストリにはいくつかの事前定義された値が付属しています。これらの事前定義された値には、 &lt;code&gt;lua.h&lt;/code&gt; で定数として定義された整数キーでインデックスが付けられます。次の定数が定義されています。</target>
        </trans-unit>
        <trans-unit id="7355d5bd1b6984cb05bdf3acfb6f9c1a447b9f50" translate="yes" xml:space="preserve">
          <source>When you interact with the Lua API, you are responsible for ensuring consistency. In particular, &lt;em&gt;you are responsible for controlling stack overflow&lt;/em&gt;. You can use the function &lt;a href=&quot;#lua_checkstack&quot;&gt;&lt;code&gt;lua_checkstack&lt;/code&gt;&lt;/a&gt; to ensure that the stack has enough space for pushing new elements.</source>
          <target state="translated">Lua APIを操作するときは、一貫性を確保する必要があります。特に、&lt;em&gt;スタックオーバーフローを制御する必要があります&lt;/em&gt;。関数&lt;a href=&quot;#lua_checkstack&quot;&gt; &lt;code&gt;lua_checkstack&lt;/code&gt; &lt;/a&gt;を使用して、スタックに新しい要素をプッシュするための十分なスペースがあることを確認できます。</target>
        </trans-unit>
        <trans-unit id="f3ce65bde15db7ea0ab6b60f199c33fedc361e77" translate="yes" xml:space="preserve">
          <source>When you load a main chunk, the resulting function will always have exactly one upvalue, the &lt;code&gt;_ENV&lt;/code&gt; variable (see &lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2&lt;/a&gt;). However, when you load a binary chunk created from a function (see &lt;a href=&quot;#pdf-string.dump&quot;&gt;&lt;code&gt;string.dump&lt;/code&gt;&lt;/a&gt;), the resulting function can have an arbitrary number of upvalues, and there is no guarantee that its first upvalue will be the &lt;code&gt;_ENV&lt;/code&gt; variable. (A non-main function may not even have an &lt;code&gt;_ENV&lt;/code&gt; upvalue.)</source>
          <target state="translated">メインチャンクをロードすると、結果の関数には常に1つのアップバリューである &lt;code&gt;_ENV&lt;/code&gt; 変数が含まれます（&lt;a href=&quot;#2.2&quot;&gt;&amp;sect;2.2を&lt;/a&gt;参照）。ただし、関数から作成されたバイナリチャンクをロードする場合（&lt;a href=&quot;#pdf-string.dump&quot;&gt; &lt;code&gt;string.dump&lt;/code&gt; を&lt;/a&gt;参照）、結果の関数には任意の数のアップバリューが含まれる可能性があり、最初のアップバリューが &lt;code&gt;_ENV&lt;/code&gt; 変数になる保証はありません。（非メイン関数には、 &lt;code&gt;_ENV&lt;/code&gt; アップ値さえない場合があります。）</target>
        </trans-unit>
        <trans-unit id="1e8b32f8352fd78bcc7ec48884a68493230c9360" translate="yes" xml:space="preserve">
          <source>When you run it, it produces the following output:</source>
          <target state="translated">実行すると、以下のような出力が出てきます。</target>
        </trans-unit>
        <trans-unit id="a2fe48a4ba1fe6efea7e679ea6354ce71899c865" translate="yes" xml:space="preserve">
          <source>When you use &lt;a href=&quot;#pdf-xpcall&quot;&gt;&lt;code&gt;xpcall&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, in C) you may give a &lt;em&gt;message handler&lt;/em&gt; to be called in case of errors. This function is called with the original error object and returns a new error object. It is called before the error unwinds the stack, so that it can gather more information about the error, for instance by inspecting the stack and creating a stack traceback. This message handler is still protected by the protected call; so, an error inside the message handler will call the message handler again. If this loop goes on for too long, Lua breaks it and returns an appropriate message. The message handler is called only for regular runtime errors. It is not called for memory-allocation errors nor for errors while running finalizers or other message handlers.</source>
          <target state="translated">あなたが使用している場合&lt;a href=&quot;#pdf-xpcall&quot;&gt; &lt;code&gt;xpcall&lt;/code&gt; &lt;/a&gt;（または&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; &lt;/a&gt; Cでの、）あなたが与えるかもしれ&lt;em&gt;メッセージハンドラ&lt;/em&gt;エラーが発生した場合に呼び出されるし。この関数は元のエラーオブジェクトで呼び出され、新しいエラーオブジェクトを返します。これは、エラーがスタックを巻き戻す前に呼び出されるため、たとえば、スタックを検査してスタックトレースバックを作成することにより、エラーに関する詳細情報を収集できます。このメッセージハンドラは、保護された呼び出しによって引き続き保護されます。そのため、メッセージハンドラー内のエラーにより、メッセージハンドラーが再度呼び出されます。このループが長すぎると、Luaはループを中断し、適切なメッセージを返します。メッセージハンドラは、通常のランタイムエラーに対してのみ呼び出されます。メモリ割り当てエラーや、ファイナライザーやその他のメッセージハンドラーの実行中のエラーについては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="59fc39a27b959170f68fd36bc3ff7103614c868a" translate="yes" xml:space="preserve">
          <source>When you use &lt;a href=&quot;#pdf-xpcall&quot;&gt;&lt;code&gt;xpcall&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#lua_pcall&quot;&gt;&lt;code&gt;lua_pcall&lt;/code&gt;&lt;/a&gt;, you may give a &lt;em&gt;message handler&lt;/em&gt; to be called in case of errors. This function is called with the original error object and returns a new error object. It is called before the error unwinds the stack, so that it can gather more information about the error, for instance by inspecting the stack and creating a stack traceback. This message handler is still protected by the protected call; so, an error inside the message handler will call the message handler again. If this loop goes on for too long, Lua breaks it and returns an appropriate message. (The message handler is called only for regular runtime errors. It is not called for memory-allocation errors nor for errors while running finalizers.)</source>
          <target state="translated">あなたが使用している場合&lt;a href=&quot;#pdf-xpcall&quot;&gt; &lt;code&gt;xpcall&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#lua_pcall&quot;&gt; &lt;code&gt;lua_pcall&lt;/code&gt; を&lt;/a&gt;、あなたが与えるかもしれ&lt;em&gt;メッセージハンドラ&lt;/em&gt;エラーが発生した場合に呼び出されるし。この関数は、元のエラーオブジェクトで呼び出され、新しいエラーオブジェクトを返します。これは、エラーがスタックを巻き戻す前に呼び出されるため、たとえば、スタックを検査してスタックトレースバックを作成することにより、エラーに関する詳細情報を収集できます。このメッセージハンドラは、保護された呼び出しによって引き続き保護されています。そのため、メッセージハンドラー内のエラーにより、メッセージハンドラーが再度呼び出されます。このループが長すぎると、Luaはそれを中断し、適切なメッセージを返します。 （メッセージハンドラーは通常のランタイムエラーに対してのみ呼び出されます。メモリ割り当てエラーやファイナライザーの実行中のエラーに対しては呼び出されません。）</target>
        </trans-unit>
        <trans-unit id="3d4a440a8a54cb67f8b148f43a2a234b9432ff21" translate="yes" xml:space="preserve">
          <source>Whenever Lua calls C, it ensures that the stack has space for at least &lt;a id=&quot;pdf-LUA_MINSTACK&quot;&gt;&lt;code&gt;LUA_MINSTACK&lt;/code&gt;&lt;/a&gt; extra elements; that is, you can safely push up to &lt;code&gt;LUA_MINSTACK&lt;/code&gt; values into it. &lt;code&gt;LUA_MINSTACK&lt;/code&gt; is defined as 20, so that usually you do not have to worry about stack space unless your code has loops pushing elements onto the stack.</source>
          <target state="translated">LuaがCを呼び出すときはいつでも、スタックに少なくとも&lt;a id=&quot;pdf-LUA_MINSTACK&quot;&gt; &lt;code&gt;LUA_MINSTACK&lt;/code&gt; の&lt;/a&gt;追加要素用のスペースがあることを保証します。つまり、 &lt;code&gt;LUA_MINSTACK&lt;/code&gt; 値まで安全にプッシュできます。 &lt;code&gt;LUA_MINSTACK&lt;/code&gt; は20として定義されているため、コードに要素をスタックにプッシュするループがない限り、通常はスタックスペースについて心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="15a645bbcf65be028c994caf05ae49cc42785d58" translate="yes" xml:space="preserve">
          <source>Whenever Lua calls C, it ensures that the stack has space for at least &lt;a id=&quot;pdf-LUA_MINSTACK&quot;&gt;&lt;code&gt;LUA_MINSTACK&lt;/code&gt;&lt;/a&gt; extra slots. &lt;code&gt;LUA_MINSTACK&lt;/code&gt; is defined as 20, so that usually you do not have to worry about stack space unless your code has loops pushing elements onto the stack.</source>
          <target state="translated">LuaがCを呼び出すときは常に、スタックに少なくとも&lt;a id=&quot;pdf-LUA_MINSTACK&quot;&gt; &lt;code&gt;LUA_MINSTACK&lt;/code&gt; の&lt;/a&gt;追加スロット用のスペースがあることを保証します。 &lt;code&gt;LUA_MINSTACK&lt;/code&gt; は20として定義されているため、コードに要素をスタックにプッシュするループがない限り、通常はスタックスペースを気にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="bc36795858181bb669bdb65cc9b9976ecc560ce7" translate="yes" xml:space="preserve">
          <source>Whenever Lua calls C, the called function gets a new stack, which is independent of previous stacks and of stacks of C functions that are still active. This stack initially contains any arguments to the C function and it is where the C function can store temporary Lua values and must push its results to be returned to the caller (see &lt;a href=&quot;#lua_CFunction&quot;&gt;&lt;code&gt;lua_CFunction&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">LuaがCを呼び出すたびに、呼び出された関数は新しいスタックを取得します。これは、以前のスタックや、まだアクティブなC関数のスタックから独立しています。このスタックには最初にC関数への引数が含まれ、C関数は一時的なLua値を格納でき、その結果を呼び出し元に返すためにプッシュする必要があります（&lt;a href=&quot;#lua_CFunction&quot;&gt; &lt;code&gt;lua_CFunction&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c2b43773a36392d35ca699c4fb17769ecd2dd7c2" translate="yes" xml:space="preserve">
          <source>Whenever a &lt;code&gt;__newindex&lt;/code&gt; metavalue is invoked, Lua does not perform the primitive assignment. If needed, the metamethod itself can call &lt;a href=&quot;#pdf-rawset&quot;&gt;&lt;code&gt;rawset&lt;/code&gt;&lt;/a&gt; to do the assignment.</source>
          <target state="translated">&lt;code&gt;__newindex&lt;/code&gt; メタ値が呼び出されるたびに、Luaはプリミティブ割り当てを実行しません。必要に応じて、メタメソッド自体が&lt;a href=&quot;#pdf-rawset&quot;&gt; &lt;code&gt;rawset&lt;/code&gt; &lt;/a&gt;を呼び出して割り当てを行うことができます。</target>
        </trans-unit>
        <trans-unit id="0194275f7fed5a9af0589750161f145316d9d8f8" translate="yes" xml:space="preserve">
          <source>Whenever a C function is called, its upvalues are located at specific pseudo-indices. These pseudo-indices are produced by the macro &lt;a href=&quot;#lua_upvalueindex&quot;&gt;&lt;code&gt;lua_upvalueindex&lt;/code&gt;&lt;/a&gt;. The first upvalue associated with a function is at index &lt;code&gt;lua_upvalueindex(1)&lt;/code&gt;, and so on. Any access to &lt;code&gt;lua_upvalueindex(&lt;em&gt;n&lt;/em&gt;)&lt;/code&gt;, where &lt;em&gt;n&lt;/em&gt; is greater than the number of upvalues of the current function (but not greater than 256, which is one plus the maximum number of upvalues in a closure), produces an acceptable but invalid index.</source>
          <target state="translated">C関数が呼び出されるときは常に、そのアップバリューは特定の疑似インデックスにあります。これらの疑似インデックスは、マクロ&lt;a href=&quot;#lua_upvalueindex&quot;&gt; &lt;code&gt;lua_upvalueindex&lt;/code&gt; &lt;/a&gt;によって生成されます。関数に関連付けられた最初のアップ値は、インデックス &lt;code&gt;lua_upvalueindex(1)&lt;/code&gt; にあります。アクセス &lt;code&gt;lua_upvalueindex(&lt;em&gt;n&lt;/em&gt;)&lt;/code&gt; 、&lt;em&gt;N&lt;/em&gt;（ワンプラスクロージャにおける上位値の最大数であるが、256より大きくない、）現在の関数の上位値の数よりも大きい場合には、許容されるが、無効なインデックスを生成します。</target>
        </trans-unit>
        <trans-unit id="7b599885fcde567666ae50c3832fa9901f1faa95" translate="yes" xml:space="preserve">
          <source>Whenever a hook is called, its &lt;code&gt;ar&lt;/code&gt; argument has its field &lt;code&gt;event&lt;/code&gt; set to the specific event that triggered the hook. Lua identifies these events with the following constants: &lt;a id=&quot;pdf-LUA_HOOKCALL&quot;&gt;&lt;code&gt;LUA_HOOKCALL&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_HOOKRET&quot;&gt;&lt;code&gt;LUA_HOOKRET&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_HOOKTAILCALL&quot;&gt;&lt;code&gt;LUA_HOOKTAILCALL&lt;/code&gt;&lt;/a&gt;, &lt;a id=&quot;pdf-LUA_HOOKLINE&quot;&gt;&lt;code&gt;LUA_HOOKLINE&lt;/code&gt;&lt;/a&gt;, and &lt;a id=&quot;pdf-LUA_HOOKCOUNT&quot;&gt;&lt;code&gt;LUA_HOOKCOUNT&lt;/code&gt;&lt;/a&gt;. Moreover, for line events, the field &lt;code&gt;currentline&lt;/code&gt; is also set. To get the value of any other field in &lt;code&gt;ar&lt;/code&gt;, the hook must call &lt;a href=&quot;#lua_getinfo&quot;&gt;&lt;code&gt;lua_getinfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フックが呼び出されると、その &lt;code&gt;ar&lt;/code&gt; 引数のフィールド &lt;code&gt;event&lt;/code&gt; は、フックをトリガーした特定のイベントに設定されます。Luaはこれらのイベントを次の定数で識別します：&lt;a id=&quot;pdf-LUA_HOOKCALL&quot;&gt; &lt;code&gt;LUA_HOOKCALL&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_HOOKRET&quot;&gt; &lt;code&gt;LUA_HOOKRET&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_HOOKTAILCALL&quot;&gt; &lt;code&gt;LUA_HOOKTAILCALL&lt;/code&gt; &lt;/a&gt;、&lt;a id=&quot;pdf-LUA_HOOKLINE&quot;&gt; &lt;code&gt;LUA_HOOKLINE&lt;/code&gt; &lt;/a&gt;、および&lt;a id=&quot;pdf-LUA_HOOKCOUNT&quot;&gt; &lt;code&gt;LUA_HOOKCOUNT&lt;/code&gt; &lt;/a&gt;。さらに、ラインイベントの場合、フィールド &lt;code&gt;currentline&lt;/code&gt; も設定されます。 &lt;code&gt;ar&lt;/code&gt; の他のフィールドの値を取得するには、フックが&lt;a href=&quot;#lua_getinfo&quot;&gt; &lt;code&gt;lua_getinfo&lt;/code&gt; を&lt;/a&gt;呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="77a4ffdfeb7ea6979c398f6e32e8da8ff060ce91" translate="yes" xml:space="preserve">
          <source>Whenever there is a &lt;code&gt;__newindex&lt;/code&gt; metamethod, Lua does not perform the primitive assignment. (If necessary, the metamethod itself can call &lt;a href=&quot;#pdf-rawset&quot;&gt;&lt;code&gt;rawset&lt;/code&gt;&lt;/a&gt; to do the assignment.)</source>
          <target state="translated">&lt;code&gt;__newindex&lt;/code&gt; メタメソッドがある場合は常に、Luaはプリミティブ割り当てを実行しません。（必要に応じて、メタメソッド自体が&lt;a href=&quot;#pdf-rawset&quot;&gt; &lt;code&gt;rawset&lt;/code&gt; &lt;/a&gt;を呼び出して割り当てを行うことができます。）</target>
        </trans-unit>
        <trans-unit id="380018403674372e84fb15d5ec3167aa3cf9c5cb" translate="yes" xml:space="preserve">
          <source>Whenever there is an error, an &lt;em&gt;error object&lt;/em&gt; (also called an &lt;em&gt;error message&lt;/em&gt;) is propagated with information about the error. Lua itself only generates errors whose error object is a string, but programs may generate errors with any value as the error object. It is up to the Lua program or its host to handle such error objects.</source>
          <target state="translated">エラーが発生すると、&lt;em&gt;エラーオブジェクト&lt;/em&gt;（&lt;em&gt;エラーメッセージ&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;）がエラーに関する情報とともに伝達されます。Lua自体はエラーオブジェクトが文字列であるエラーのみを生成しますが、プログラムはエラーオブジェクトとして任意の値のエラーを生成する場合があります。このようなエラーオブジェクトを処理するのは、Luaプログラムまたはそのホストの責任です。</target>
        </trans-unit>
        <trans-unit id="846e0dd3b617fa3bf7db09630f23f0393a92f6a2" translate="yes" xml:space="preserve">
          <source>Whenever there is an error, an &lt;em&gt;error object&lt;/em&gt; is propagated with information about the error. Lua itself only generates errors whose error object is a string, but programs may generate errors with any value as the error object. It is up to the Lua program or its host to handle such error objects. For historical reasons, an error object is often called an &lt;em&gt;error message&lt;/em&gt;, even though it does not have to be a string.</source>
          <target state="translated">エラーが発生するたびに、&lt;em&gt;エラーオブジェクト&lt;/em&gt;が&lt;em&gt;エラー&lt;/em&gt;に関する情報とともに伝播されます。Lua自体は、エラーオブジェクトが文字列であるエラーのみを生成しますが、プログラムは、エラーオブジェクトとして任意の値を持つエラーを生成する可能性があります。このようなエラーオブジェクトを処理するのは、Luaプログラムまたはそのホスト次第です。歴史的な理由から、エラーオブジェクトは、文字列である必要はありませんが、&lt;em&gt;エラーメッセージ&lt;/em&gt;と呼ばれることがよくあります。</target>
        </trans-unit>
        <trans-unit id="272f9a8e241eb8a55a33970a98b804e3cbb2993b" translate="yes" xml:space="preserve">
          <source>While Lua is running a hook, it disables other calls to hooks. Therefore, if a hook calls back Lua to execute a function or a chunk, this execution occurs without any calls to hooks.</source>
          <target state="translated">Luaがフックを実行している間は、他のフックへの呼び出しを無効にします。そのため、フックが関数やチャンクを実行するためにLuaを呼び出しても、フックを呼び出すことなく実行されます。</target>
        </trans-unit>
        <trans-unit id="c55926fa7030f56d817d54fc38fc120f3c9f44c9" translate="yes" xml:space="preserve">
          <source>While traversing a table, avoid calling &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; directly on a key, unless you know that the key is actually a string. Recall that &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; may change the value at the given index; this confuses the next call to &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーが実際に文字列であることがわかっている場合を除き、テーブルを&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;するときは、キーに対して直接lua_tolstringを呼び出さないでください。&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;が指定されたインデックスの値を変更する可能性があることを思い出してください。これにより、&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; &lt;/a&gt;への次の呼び出しが混乱します。</target>
        </trans-unit>
        <trans-unit id="768488e627b06a1ccd84c86d3762c984059da019" translate="yes" xml:space="preserve">
          <source>While traversing a table, do not call &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; directly on a key, unless you know that the key is actually a string. Recall that &lt;a href=&quot;#lua_tolstring&quot;&gt;&lt;code&gt;lua_tolstring&lt;/code&gt;&lt;/a&gt; may change the value at the given index; this confuses the next call to &lt;a href=&quot;#lua_next&quot;&gt;&lt;code&gt;lua_next&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">テーブルをトラバースするときは、キーが実際に文字列であることがわかっている場合を除いて、キーに対して&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; を&lt;/a&gt;直接呼び出さないでください。&lt;a href=&quot;#lua_tolstring&quot;&gt; &lt;code&gt;lua_tolstring&lt;/code&gt; &lt;/a&gt;は、指定されたインデックスの値を変更する可能性があることを思い出してください。これにより、次の&lt;a href=&quot;#lua_next&quot;&gt; &lt;code&gt;lua_next&lt;/code&gt; の&lt;/a&gt;呼び出しが混乱します。</target>
        </trans-unit>
        <trans-unit id="518506b1bd272cc87115a976ea99ba83864b9064" translate="yes" xml:space="preserve">
          <source>With the exception of exponentiation and float division, the arithmetic operators work as follows: If both operands are integers, the operation is performed over integers and the result is an integer. Otherwise, if both operands are numbers or strings that can be converted to numbers (see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;), then they are converted to floats, the operation is performed following the usual rules for floating-point arithmetic (usually the IEEE 754 standard), and the result is a float.</source>
          <target state="translated">指数と浮動小数点除算を除いて、算術演算子は次のように機能します。両方のオペランドが整数の場合、演算は整数に対して実行され、結果は整数になります。それ以外の場合、両方のオペランドが数値または数値に変換できる文字列（&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3を&lt;/a&gt;参照）である場合、それらは浮動小数点に変換され、演算は浮動小数点演算の通常の規則（通常はIEEE 754標準）に従って実行されます。 、結果は浮動小数点です。</target>
        </trans-unit>
        <trans-unit id="6d94057967a72a5d81edd6ae24d02d66cf0d57ab" translate="yes" xml:space="preserve">
          <source>With the exception of exponentiation and float division, the arithmetic operators work as follows: If both operands are integers, the operation is performed over integers and the result is an integer. Otherwise, if both operands are numbers, then they are converted to floats, the operation is performed following the machine's rules for floating-point arithmetic (usually the IEEE 754 standard), and the result is a float. (The string library coerces strings to numbers in arithmetic operations; see &lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt; for details.)</source>
          <target state="translated">べき乗と浮動小数点除算を除いて、算術演算子は次のように機能します。両方のオペランドが整数の場合、演算は整数に対して実行され、結果は整数になります。それ以外の場合、両方のオペランドが数値の場合、それらは浮動小数点に変換され、演算は浮動小数点演算のマシンの規則（通常はIEEE 754標準）に従って実行され、結果は浮動小数点になります。 （文字列ライブラリは、算術演算で文字列を数値に強制変換します。詳細については、&lt;a href=&quot;#3.4.3&quot;&gt;&amp;sect;3.4.3&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="ef23cb793be6d01c5592ed37d41262accad311cc" translate="yes" xml:space="preserve">
          <source>Writes the value of each of its arguments to &lt;code&gt;file&lt;/code&gt;. The arguments must be strings or numbers.</source>
          <target state="translated">それぞれの引数の値を &lt;code&gt;file&lt;/code&gt; に書き込みます。引数は文字列または数値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4b2eb6ac09b984e213b2d26d7367f553447ec91c" translate="yes" xml:space="preserve">
          <source>Yields a coroutine (thread).</source>
          <target state="translated">コルーチン(スレッド)を生成します。</target>
        </trans-unit>
        <trans-unit id="4c14ae77965a71399e48d53e02bcb286bb93f6f2" translate="yes" xml:space="preserve">
          <source>You can also create and manipulate coroutines through the C API: see functions &lt;a href=&quot;#lua_newthread&quot;&gt;&lt;code&gt;lua_newthread&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#lua_resume&quot;&gt;&lt;code&gt;lua_resume&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#lua_yield&quot;&gt;&lt;code&gt;lua_yield&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">C APIを使用してコルーチンを作成および操作することもできます。関数&lt;a href=&quot;#lua_newthread&quot;&gt; &lt;code&gt;lua_newthread&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#lua_resume&quot;&gt; &lt;code&gt;lua_resume&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#lua_yield&quot;&gt; &lt;code&gt;lua_yield&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cf65c06d67b704766199b9121e3b29a033e4c3cc" translate="yes" xml:space="preserve">
          <source>You can avoid some incompatibilities by compiling Lua with appropriate options (see file &lt;code&gt;luaconf.h&lt;/code&gt;). However, all these compatibility options will be removed in the future. More often than not, compatibility issues arise when these compatibility options are removed. So, whenever you have the chance, you should try to test your code with a version of Lua compiled with all compatibility options turned off. That will ease transitions to newer versions of Lua.</source>
          <target state="translated">Luaを適切なオプションでコンパイルすることで、いくつかの非互換性を回避できます（ファイル &lt;code&gt;luaconf.h&lt;/code&gt; を参照）。ただし、これらの互換性オプションはすべて将来削除される予定です。多くの場合、これらの互換性オプションを削除すると、互換性の問題が発生します。したがって、機会があればいつでも、すべての互換性オプションをオフにしてコンパイルされたバージョンのLuaを使用してコードをテストする必要があります。これにより、Luaの新しいバージョンへの移行が容易になります。</target>
        </trans-unit>
        <trans-unit id="88e17dda44cc7b49c20312b1b3f6c3280740896b" translate="yes" xml:space="preserve">
          <source>You can call functions only in threads with status &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;. You can resume threads with status &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; (to start a new coroutine) or &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; (to resume a coroutine).</source>
          <target state="translated">関数は、ステータス&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; の&lt;/a&gt;スレッドでのみ呼び出すことができます。ステータス&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;（新しいコルーチンを開始するため）または&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;（コルーチンを再開するため）のスレッドを再開できます。</target>
        </trans-unit>
        <trans-unit id="30acf487d4f39b1b32392092243899e125648aac" translate="yes" xml:space="preserve">
          <source>You can change the GC mode and parameters by calling &lt;a href=&quot;#lua_gc&quot;&gt;&lt;code&gt;lua_gc&lt;/code&gt;&lt;/a&gt; in C or &lt;a href=&quot;#pdf-collectgarbage&quot;&gt;&lt;code&gt;collectgarbage&lt;/code&gt;&lt;/a&gt; in Lua. You can also use these functions to control the collector directly (e.g., to stop and restart it).</source>
          <target state="translated">あなたは呼び出すことにより、GCモードやパラメータを変更することができます&lt;a href=&quot;#lua_gc&quot;&gt; &lt;code&gt;lua_gc&lt;/code&gt; &lt;/a&gt; Cまたは&lt;a href=&quot;#pdf-collectgarbage&quot;&gt; &lt;code&gt;collectgarbage&lt;/code&gt; を&lt;/a&gt;Luaの中で。これらの関数を使用して、コレクターを直接制御することもできます（たとえば、コレクターを停止および再起動するため）。</target>
        </trans-unit>
        <trans-unit id="b7319a84c3be9c603d878df474f45dfa44f88afd" translate="yes" xml:space="preserve">
          <source>You can change the way that Lua compares tables and userdata by using the &quot;eq&quot; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">Luaがテーブルと&lt;a href=&quot;#2.4&quot;&gt;ユーザー&lt;/a&gt;データを比較する方法は、「eq」メタメソッドを使用して変更できます（&amp;sect;2.4を参照）。</target>
        </trans-unit>
        <trans-unit id="bfd38a5c874f3757df856f2f0fe3488def075bb2" translate="yes" xml:space="preserve">
          <source>You can change the way that Lua compares tables and userdata by using the &lt;code&gt;__eq&lt;/code&gt; metamethod (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;__eq&lt;/code&gt; メタメソッドを使用して、Luaがテーブルとユーザーデータを比較する方法を変更できます（&lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3102901d0caee19c958fcee9d58ed56ee554d4f9" translate="yes" xml:space="preserve">
          <source>You can change these numbers by calling &lt;a href=&quot;#lua_gc&quot;&gt;&lt;code&gt;lua_gc&lt;/code&gt;&lt;/a&gt; in C or &lt;a href=&quot;#pdf-collectgarbage&quot;&gt;&lt;code&gt;collectgarbage&lt;/code&gt;&lt;/a&gt; in Lua. You can also use these functions to control the collector directly (e.g., stop and restart it).</source>
          <target state="translated">これらの番号を変更するには、Cで&lt;a href=&quot;#lua_gc&quot;&gt; &lt;code&gt;lua_gc&lt;/code&gt; &lt;/a&gt;を呼び出すか、Luaで&lt;a href=&quot;#pdf-collectgarbage&quot;&gt; &lt;code&gt;collectgarbage&lt;/code&gt; を&lt;/a&gt;呼び出します。これらの機能を使用して、コレクターを直接制御することもできます（例えば、コレクターを停止して再始動します）。</target>
        </trans-unit>
        <trans-unit id="1aa1c0455b97a9145781995effbd7a91d175f4dd" translate="yes" xml:space="preserve">
          <source>You can fix these differences by forcing a number to be a float (in Lua 5.2 all numbers were float), in particular writing constants with an ending &lt;code&gt;.0&lt;/code&gt; or using &lt;code&gt;x = x + 0.0&lt;/code&gt; to convert a variable. (This recommendation is only for a quick fix for an occasional incompatibility; it is not a general guideline for good programming. For good programming, use floats where you need floats and integers where you need integers.)</source>
          <target state="translated">これらの違いを修正するには、数値を浮動小数点数に強制します（Lua 5.2ではすべての数値は浮動小数点数でした）。特に、末尾が &lt;code&gt;.0&lt;/code&gt; の定数を書き込むか、 &lt;code&gt;x = x + 0.0&lt;/code&gt; を使用して変数を変換します。（この推奨事項は、非互換性が発生する場合があるための迅速な修正のみを目的としています。適切なプログラミングの一般的なガイドラインではありません。適切なプログラミングを行うには、浮動小数点数が必要な場合は浮動小数点数を、整数が必要な場合は整数を使用してください。）</target>
        </trans-unit>
        <trans-unit id="6b9f9c8aada12f19e8959797fbd200469c989aaf" translate="yes" xml:space="preserve">
          <source>You can only call functions in threads with status &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt;. You can resume threads with status &lt;a href=&quot;#pdf-LUA_OK&quot;&gt;&lt;code&gt;LUA_OK&lt;/code&gt;&lt;/a&gt; (to start a new coroutine) or &lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt;&lt;code&gt;LUA_YIELD&lt;/code&gt;&lt;/a&gt; (to resume a coroutine).</source>
          <target state="translated">&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;ステータスのスレッドでのみ関数を呼び出すことができます。&lt;a href=&quot;#pdf-LUA_OK&quot;&gt; &lt;code&gt;LUA_OK&lt;/code&gt; &lt;/a&gt;（新しいコルーチンを開始する）または&lt;a href=&quot;#pdf-LUA_YIELD&quot;&gt; &lt;code&gt;LUA_YIELD&lt;/code&gt; &lt;/a&gt;（コルーチンを再開する）ステータスのスレッドを再開できます。</target>
        </trans-unit>
        <trans-unit id="59f7d5bf15872a3901218a87816b69752280c691" translate="yes" xml:space="preserve">
          <source>You can put a closing square bracket in a set by positioning it as the first character in the set. You can put a hyphen in a set by positioning it as the first or the last character in the set. (You can also use an escape for both cases.)</source>
          <target state="translated">閉じ括弧は、セット内の最初の文字として配置することで、セット内に入れることができます。ハイフンをセットの最初の文字または最後の文字として配置することで、セットの中にハイフンを入れることができます(どちらの場合もエスケープを使用することもできます)。(どちらの場合もエスケープを使用することもできます)。</target>
        </trans-unit>
        <trans-unit id="8061a68da1d074d2f5c5e92636b71ce2c9bfb53d" translate="yes" xml:space="preserve">
          <source>You can put a closing square bracket in a set by positioning it as the first character in the set. You can put an hyphen in a set by positioning it as the first or the last character in the set. (You can also use an escape for both cases.)</source>
          <target state="translated">閉じ括弧は、セット内の最初の文字として配置することで、セット内に入れることができます。ハイフンをセットの最初の文字または最後の文字として配置することで、セットの中にハイフンを入れることができます(どちらの場合もエスケープを使用することもできます)。(どちらの場合もエスケープを使用することもできます)。</target>
        </trans-unit>
        <trans-unit id="799d3c0c986643b2fb7ee878e60672115c276c33" translate="yes" xml:space="preserve">
          <source>You can query the metatable of any value using the &lt;a href=&quot;#pdf-getmetatable&quot;&gt;&lt;code&gt;getmetatable&lt;/code&gt;&lt;/a&gt; function. Lua queries metamethods in metatables using a raw access (see &lt;a href=&quot;#pdf-rawget&quot;&gt;&lt;code&gt;rawget&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#pdf-getmetatable&quot;&gt; &lt;code&gt;getmetatable&lt;/code&gt; &lt;/a&gt;関数を使用して、任意の値のメタテーブルをクエリできます。Luaは（参照rawアクセスを使用してメタテーブルにメタメソッドを照会&lt;a href=&quot;#pdf-rawget&quot;&gt; &lt;code&gt;rawget&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="d2781e61b519fd47b1d4f450639555b1c01907b6" translate="yes" xml:space="preserve">
          <source>You can query the metatable of any value using the &lt;a href=&quot;#pdf-getmetatable&quot;&gt;&lt;code&gt;getmetatable&lt;/code&gt;&lt;/a&gt; function. Lua queries metamethods in metatables using a raw access (see &lt;a href=&quot;#pdf-rawget&quot;&gt;&lt;code&gt;rawget&lt;/code&gt;&lt;/a&gt;). So, to retrieve the metamethod for event &lt;code&gt;ev&lt;/code&gt; in object &lt;code&gt;o&lt;/code&gt;, Lua does the equivalent to the following code:</source>
          <target state="translated">&lt;a href=&quot;#pdf-getmetatable&quot;&gt; &lt;code&gt;getmetatable&lt;/code&gt; &lt;/a&gt;関数を使用して、任意の値のメタテーブルをクエリできます。Luaは（参照rawアクセスを使用してメタテーブルにメタメソッドを照会&lt;a href=&quot;#pdf-rawget&quot;&gt; &lt;code&gt;rawget&lt;/code&gt; &lt;/a&gt;）。したがって、オブジェクト &lt;code&gt;o&lt;/code&gt; のイベント &lt;code&gt;ev&lt;/code&gt; のメタメソッドを取得するために、Luaは次のコードと同等のことを行います。</target>
        </trans-unit>
        <trans-unit id="d1dc46c8e9720bcf85f3abea3ac1cb55affdcb0d" translate="yes" xml:space="preserve">
          <source>You can replace the metatable of tables using the &lt;a href=&quot;#pdf-setmetatable&quot;&gt;&lt;code&gt;setmetatable&lt;/code&gt;&lt;/a&gt; function. You cannot change the metatable of other types from Lua code (except by using the debug library (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;)); you should use the C API for that.</source>
          <target state="translated">&lt;a href=&quot;#pdf-setmetatable&quot;&gt; &lt;code&gt;setmetatable&lt;/code&gt; &lt;/a&gt;関数を使用して、テーブルのメタテーブルを置き換えることができます。Luaコードから他のタイプのメタテーブルを変更することはできません（デバッグライブラリ（&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;）を使用する場合を除く）。そのためにはC APIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="71035c95301acc8c192b359af22e6b3657788623" translate="yes" xml:space="preserve">
          <source>You can replace the metatable of tables using the &lt;a href=&quot;#pdf-setmetatable&quot;&gt;&lt;code&gt;setmetatable&lt;/code&gt;&lt;/a&gt; function. You cannot change the metatable of other types from Lua code, except by using the debug library (&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#pdf-setmetatable&quot;&gt; &lt;code&gt;setmetatable&lt;/code&gt; &lt;/a&gt;関数を使用して、テーブルのメタテーブルを置き換えることができます。デバッグライブラリ（&lt;a href=&quot;#6.10&quot;&gt;&amp;sect;6.10&lt;/a&gt;）を使用する場合を除いて、Luaコードから他のタイプのメタテーブルを変更することはできません。</target>
        </trans-unit>
        <trans-unit id="7e58a48a2bbf52e5804761968441fe7ea238d5cc" translate="yes" xml:space="preserve">
          <source>You can set garbage-collector metamethods for tables and, using the C API, for full userdata (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). These metamethods are also called &lt;em&gt;finalizers&lt;/em&gt;. Finalizers allow you to coordinate Lua's garbage collection with external resource management (such as closing files, network or database connections, or freeing your own memory).</source>
          <target state="translated">テーブルのガベージコレクタ&lt;a href=&quot;#2.4&quot;&gt;メタメソッド&lt;/a&gt;を設定し、C APIを使用して完全なユーザーデータを設定できます（&amp;sect;2.4を参照）。これらのメタメソッドは、&lt;em&gt;ファイナライザ&lt;/em&gt;とも呼ばれます。ファイナライザを使用すると、Luaのガベージコレクションを外部リソース管理（ファイルのクローズ、ネットワーク接続またはデータベース接続、独自のメモリの解放など）と調整できます。</target>
        </trans-unit>
        <trans-unit id="bda59ef5aaee54d3f7530ea5520d18e9906d209b" translate="yes" xml:space="preserve">
          <source>You can set garbage-collector metamethods for tables and, using the C API, for full userdata (see &lt;a href=&quot;#2.4&quot;&gt;&amp;sect;2.4&lt;/a&gt;). These metamethods, called &lt;em&gt;finalizers&lt;/em&gt;, are called when the garbage collector detects that the corresponding table or userdata is dead. Finalizers allow you to coordinate Lua's garbage collection with external resource management such as closing files, network or database connections, or freeing your own memory.</source>
          <target state="translated">テーブルにガベージコレクタ&lt;a href=&quot;#2.4&quot;&gt;メタメソッド&lt;/a&gt;を設定し、C APIを使用して完全なユーザーデータに設定できます（&amp;sect;2.4を参照）。&lt;em&gt;ファイナライザー&lt;/em&gt;と呼ばれるこれらのメタメソッドは、ガベージコレクターが対応するテーブルまたはユーザーデータが停止していることを検出したときに呼び出されます。ファイナライザーを使用すると、Luaのガベージコレクションを、ファイルのクローズ、ネットワークまたはデータベース接続、独自のメモリの解放などの外部リソース管理と調整できます。</target>
        </trans-unit>
        <trans-unit id="af1a4e1dd00034824534614f2bda7911ae8431cd" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;break&lt;/b&gt; and &lt;b&gt;goto&lt;/b&gt; to exit a &lt;b&gt;for&lt;/b&gt; loop.</source>
          <target state="translated">&lt;b&gt;break&lt;/b&gt;と&lt;b&gt;goto&lt;/b&gt;を使用して&lt;b&gt;for&lt;/b&gt;ループを終了できます。</target>
        </trans-unit>
        <trans-unit id="b27cc8080576c27c1dd2a0afb3a34a7a52ff85b8" translate="yes" xml:space="preserve">
          <source>You can use &lt;b&gt;break&lt;/b&gt; to exit a &lt;b&gt;for&lt;/b&gt; loop.</source>
          <target state="translated">&lt;b&gt;ブレーク&lt;/b&gt;を使用して&lt;b&gt;for&lt;/b&gt;ループを終了できます。</target>
        </trans-unit>
        <trans-unit id="d52df43ef083f76a03d8e01f3e9a36da3fc66f0d" translate="yes" xml:space="preserve">
          <source>You create a coroutine by calling &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;. Its sole argument is a function that is the main function of the coroutine. The &lt;code&gt;create&lt;/code&gt; function only creates a new coroutine and returns a handle to it (an object of type &lt;em&gt;thread&lt;/em&gt;); it does not start the coroutine.</source>
          <target state="translated">coroutine.createを呼び出して&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; &lt;/a&gt;作成します。その唯一の引数は、コルーチンの主要な関数である関数です。 &lt;code&gt;create&lt;/code&gt; 機能のみ新しいコルーチンを作成し、（タイプのオブジェクトへのハンドルを返す&lt;em&gt;スレッド&lt;/em&gt;）。コルーチンを開始しません。</target>
        </trans-unit>
        <trans-unit id="5ef445026cd0a146e81e995bc4681bfd5e57e5c5" translate="yes" xml:space="preserve">
          <source>You do not have to allocate space for the result: the result is a Lua string and Lua takes care of memory allocation (and deallocation, through garbage collection).</source>
          <target state="translated">結果はLuaの文字列であり、メモリの割り当て(およびガベージコレクションによる解放)はLuaが行います。</target>
        </trans-unit>
        <trans-unit id="76e561e2abeb8c3fca97fd50eca052b57e9c65f8" translate="yes" xml:space="preserve">
          <source>You execute a coroutine by calling &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;. When you first call &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt;, passing as its first argument a thread returned by &lt;a href=&quot;#pdf-coroutine.create&quot;&gt;&lt;code&gt;coroutine.create&lt;/code&gt;&lt;/a&gt;, the coroutine starts its execution by calling its main function. Extra arguments passed to &lt;a href=&quot;#pdf-coroutine.resume&quot;&gt;&lt;code&gt;coroutine.resume&lt;/code&gt;&lt;/a&gt; are passed as arguments to that function. After the coroutine starts running, it runs until it terminates or &lt;em&gt;yields&lt;/em&gt;.</source>
          <target state="translated">coroutine.resumeを呼び出して&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;実行します。最初に&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;を呼び出し、最初の引数として&lt;a href=&quot;#pdf-coroutine.create&quot;&gt; &lt;code&gt;coroutine.create&lt;/code&gt; &lt;/a&gt;によって返されたスレッドを渡すと、コルーチンはメイン関数を呼び出して実行を開始します。&lt;a href=&quot;#pdf-coroutine.resume&quot;&gt; &lt;code&gt;coroutine.resume&lt;/code&gt; &lt;/a&gt;に渡される追加の引数は、その関数の引数として渡されます。コルーチンは実行を開始すると、終了するか&lt;em&gt;生成さ&lt;/em&gt;れるまで実行され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9517d537bb2cc69695684dbed19e521703190b55" translate="yes" xml:space="preserve">
          <source>You should not change the value of the control variable during the loop.</source>
          <target state="translated">ループ中に制御変数の値を変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="beb90315d79ba8436d83c1621548dc0828a068ab" translate="yes" xml:space="preserve">
          <source>You should not change the value of the control variable during the loop. If you need its value after the loop, assign it to another variable before exiting the loop.</source>
          <target state="translated">ループ中に制御変数の値を変更してはいけません。ループ後にその値が必要な場合は、ループを抜ける前に別の変数に代入してください。</target>
        </trans-unit>
        <trans-unit id="f53454c1d52c8e8625f900a3b2f28a52f9ab6262" translate="yes" xml:space="preserve">
          <source>_G</source>
          <target state="translated">_G</target>
        </trans-unit>
        <trans-unit id="2f7691c85ede2ffb322e774a60315181bf799f71" translate="yes" xml:space="preserve">
          <source>_VERSION</source>
          <target state="translated">_VERSION</target>
        </trans-unit>
        <trans-unit id="d361be99d87b0fd1757850b39df6dc818e066eec" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;*&lt;/code&gt;', which matches sequences of zero or more characters in the class. These repetition items will always match the longest possible sequence;</source>
          <target state="translated">単一の文字クラスの後に「 &lt;code&gt;*&lt;/code&gt; 」が続きます。これは、クラス内の0個以上の文字のシーケンスに一致します。これらの繰り返し項目は、常に可能な限り長いシーケンスに一致します。</target>
        </trans-unit>
        <trans-unit id="88f22daca599d25013aaf6d4c6cefa12b839e072" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;*&lt;/code&gt;', which matches zero or more repetitions of characters in the class. These repetition items will always match the longest possible sequence;</source>
          <target state="translated">単一文字クラスの後に「 &lt;code&gt;*&lt;/code&gt; 」が続きます。これは、クラス内の文字の0回以上の繰り返しに一致します。これらの繰り返し項目は常に可能な限り長いシーケンスと一致します。</target>
        </trans-unit>
        <trans-unit id="9f3711be8dd7bfb74572554b6c7626ae533f6527" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;+&lt;/code&gt;', which matches one or more repetitions of characters in the class. These repetition items will always match the longest possible sequence;</source>
          <target state="translated">' &lt;code&gt;+&lt;/code&gt; 'が後に続く単一の文字クラス。これは、クラス内の文字の1回以上の繰り返しと一致します。これらの繰り返し項目は常に可能な限り長いシーケンスと一致します。</target>
        </trans-unit>
        <trans-unit id="bc94c739274a89a02c004f804c812de321b43960" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;+&lt;/code&gt;', which matches sequences of one or more characters in the class. These repetition items will always match the longest possible sequence;</source>
          <target state="translated">クラス内の1つ以上の文字のシーケンスに一致する「 &lt;code&gt;+&lt;/code&gt; 」が後に続く単一の文字クラス。これらの繰り返し項目は、常に可能な限り長いシーケンスに一致します。</target>
        </trans-unit>
        <trans-unit id="bc742d84c8f95089303b3c1235798dad7894c243" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;-&lt;/code&gt;', which also matches sequences of zero or more characters in the class. Unlike '&lt;code&gt;*&lt;/code&gt;', these repetition items will always match the shortest possible sequence;</source>
          <target state="translated">単一の文字クラスの後に「 &lt;code&gt;-&lt;/code&gt; 」が続きます。これは、クラス内の0個以上の文字のシーケンスにも一致します。' &lt;code&gt;*&lt;/code&gt; 'とは異なり、これらの繰り返し項目は常に可能な限り短いシーケンスに一致します。</target>
        </trans-unit>
        <trans-unit id="7c2c202847f17af45741edd719e4addc76505a81" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;-&lt;/code&gt;', which also matches zero or more repetitions of characters in the class. Unlike '&lt;code&gt;*&lt;/code&gt;', these repetition items will always match the shortest possible sequence;</source>
          <target state="translated">単一文字クラスの後に「 &lt;code&gt;-&lt;/code&gt; 」が続きます。これは、クラス内の文字の0回以上の繰り返しにも一致します。「 &lt;code&gt;*&lt;/code&gt; 」とは異なり、これらの繰り返し項目は常に最短のシーケンスと一致します。</target>
        </trans-unit>
        <trans-unit id="237b908d85fd5486211190c63284fa599c924a55" translate="yes" xml:space="preserve">
          <source>a single character class followed by '&lt;code&gt;?&lt;/code&gt;', which matches zero or one occurrence of a character in the class. It always matches one occurrence if possible;</source>
          <target state="translated">単一の文字クラスの後に ' &lt;code&gt;?&lt;/code&gt; '、これはクラス内の文字の0回または1回の出現と一致します。可能な場合は常に1つの出現に一致します。</target>
        </trans-unit>
        <trans-unit id="0c5e2141926ba6afbd01b9f0df61d70a7c93f57e" translate="yes" xml:space="preserve">
          <source>a single character class, which matches any single character in the class;</source>
          <target state="translated">クラス内の任意の1文字にマッチする1文字クラス。</target>
        </trans-unit>
        <trans-unit id="63ae10d79f4a0c4781e4e9b2dacd5c9896a57556" translate="yes" xml:space="preserve">
          <source>assert()</source>
          <target state="translated">assert()</target>
        </trans-unit>
        <trans-unit id="d9b7850ae45b39d5960b24328cbe68f8d5986e4d" translate="yes" xml:space="preserve">
          <source>basic UTF-8 support (&lt;a href=&quot;#6.5&quot;&gt;&amp;sect;6.5&lt;/a&gt;);</source>
          <target state="translated">基本的なUTF-8サポート（&lt;a href=&quot;#6.5&quot;&gt;&amp;sect;6.5&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="fefa5c394d291465c545b09029d833606f910bf8" translate="yes" xml:space="preserve">
          <source>basic library (&lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1&lt;/a&gt;);</source>
          <target state="translated">基本ライブラリ（&lt;a href=&quot;#6.1&quot;&gt;&amp;sect;6.1&lt;/a&gt;）;</target>
        </trans-unit>
        <trans-unit id="74dcaf5215a85f0f3fdfba06d8dc2140d162bce8" translate="yes" xml:space="preserve">
          <source>by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes</source>
          <target state="translated">ロベルト・イエルサリムスキー,ルイス・ヘンリケ・デ・フィゲイレド,ワルデマル・セレス 著</target>
        </trans-unit>
        <trans-unit id="85f91b3e97f2cf4928f588f868b5b56e41f46ac7" translate="yes" xml:space="preserve">
          <source>can be used to call &quot;methods&quot;. A call &lt;code&gt;v:name(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; is syntactic sugar for &lt;code&gt;v.name(v,&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt;, except that &lt;code&gt;v&lt;/code&gt; is evaluated only once.</source>
          <target state="translated">「メソッド」の呼び出しに使用できます。 &lt;code&gt;v:name(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; の呼び出しは、 &lt;code&gt;v.name(v,&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; 構文糖衣ですが、 &lt;code&gt;v&lt;/code&gt; は1回しか評価されません。</target>
        </trans-unit>
        <trans-unit id="6d633e66cce93e82c599b2ed94b6975cd1983c8d" translate="yes" xml:space="preserve">
          <source>can be used to emulate methods. A call &lt;code&gt;v:name(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; is syntactic sugar for &lt;code&gt;v.name(v,&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt;, except that &lt;code&gt;v&lt;/code&gt; is evaluated only once.</source>
          <target state="translated">メソッドをエミュレートするために使用できます。 &lt;code&gt;v:name(&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; の呼び出しは、 &lt;code&gt;v&lt;/code&gt; が1回だけ評価されることを除いて &lt;code&gt;v.name(v,&lt;em&gt;args&lt;/em&gt;)&lt;/code&gt; シンタックスシュガーです。</target>
        </trans-unit>
        <trans-unit id="db3586e1e0bcc962d7bc2f3fead617414fb7e605" translate="yes" xml:space="preserve">
          <source>collectgarbage()</source>
          <target state="translated">collectgarbage()</target>
        </trans-unit>
        <trans-unit id="2d524624e9fa583630d5fa0595340fdebfe37ef7" translate="yes" xml:space="preserve">
          <source>coroutine library (&lt;a href=&quot;#6.2&quot;&gt;&amp;sect;6.2&lt;/a&gt;);</source>
          <target state="translated">コルーチンライブラリ（&lt;a href=&quot;#6.2&quot;&gt;&amp;sect;6.2&lt;/a&gt;）;</target>
        </trans-unit>
        <trans-unit id="eae27926b30edc4437a198e2711147c99c5e7fbe" translate="yes" xml:space="preserve">
          <source>coroutine.close()</source>
          <target state="translated">coroutine.close()</target>
        </trans-unit>
        <trans-unit id="20cd53c84ed6149d722a861cd300131fe78d55e2" translate="yes" xml:space="preserve">
          <source>coroutine.create()</source>
          <target state="translated">coroutine.create()</target>
        </trans-unit>
        <trans-unit id="6817fb4ac877543987e9d2cf2bfa960bd73b02b0" translate="yes" xml:space="preserve">
          <source>coroutine.isyieldable()</source>
          <target state="translated">coroutine.isyieldable()</target>
        </trans-unit>
        <trans-unit id="1c13fd77eddf40ec2374814bf03a272d614ac054" translate="yes" xml:space="preserve">
          <source>coroutine.resume()</source>
          <target state="translated">coroutine.resume()</target>
        </trans-unit>
        <trans-unit id="b96ab0d2970d06f0cea57e5eaa71cf5ecdd618a8" translate="yes" xml:space="preserve">
          <source>coroutine.running()</source>
          <target state="translated">coroutine.running()</target>
        </trans-unit>
        <trans-unit id="ba662b8414ef9e3a4eaa77d2c840fa4c12339222" translate="yes" xml:space="preserve">
          <source>coroutine.status()</source>
          <target state="translated">coroutine.status()</target>
        </trans-unit>
        <trans-unit id="bf3b61ea5fdfb1c6f4aa0021505b10377c2744b9" translate="yes" xml:space="preserve">
          <source>coroutine.wrap()</source>
          <target state="translated">coroutine.wrap()</target>
        </trans-unit>
        <trans-unit id="28fa9aab8f13eb98b7d555b1121c4e2f64da5b24" translate="yes" xml:space="preserve">
          <source>coroutine.yield()</source>
          <target state="translated">coroutine.yield()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
