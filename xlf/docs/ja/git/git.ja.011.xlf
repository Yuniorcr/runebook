<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="c2dfec9fbb580524d9c87ce7e3303a7b47cc295d" translate="yes" xml:space="preserve">
          <source>This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging.</source>
          <target state="translated">これは、転送中の報告をスクエルチするために基礎となる git-fetch と、マージ中の出力をスクエルチするために基礎となる git-merge の両方に渡されます。</target>
        </trans-unit>
        <trans-unit id="3d17e8f742373c8bbf1871e58142a3d3c4b1c09b" translate="yes" xml:space="preserve">
          <source>This is per-repository enhancement / version of global prefix-based &lt;code&gt;@git_base_url_list&lt;/code&gt; gitweb configuration variable (see &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;).</source>
          <target state="translated">これは、リポジトリごとの拡張/グローバルプレフィックスベースの &lt;code&gt;@git_base_url_list&lt;/code&gt; gitweb構成変数のバージョンです（&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a7bcc6783fe2c533eb40b84879a83d32f4d95dc9" translate="yes" xml:space="preserve">
          <source>This is similar to --symbolic, but it omits input that are not refs (i.e. branch or tag names; or more explicitly disambiguating &quot;heads/master&quot; form, when you want to name the &quot;master&quot; branch when there is an unfortunately named tag &quot;master&quot;), and show them as full refnames (e.g. &quot;refs/heads/master&quot;).</source>
          <target state="translated">これは -symbolic と似ていますが、refs ではない入力(すなわちブランチ名やタグ名;より明示的に &quot;head/master&quot; の形式を曖昧にするために、不幸にも &quot;master&quot; という名前のタグがある場合に &quot;master&quot; ブランチに名前を付けたい場合など)を省略し、完全な refnames (例えば &quot;refs/heads/master&quot;)として表示します。</target>
        </trans-unit>
        <trans-unit id="4cae7dda407705febf1be1d8f0d77956238a429a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;info/grafts&lt;/code&gt; but is internally used and maintained by shallow clone mechanism. See &lt;code&gt;--depth&lt;/code&gt; option to &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; and &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;. This file is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/shallow&quot; will be used instead.</source>
          <target state="translated">これは &lt;code&gt;info/grafts&lt;/code&gt; に似ていますが、内部的に使用され、浅いクローンメカニズムによって維持されます。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;および&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]の&lt;/a&gt; &lt;code&gt;--depth&lt;/code&gt; オプションを参照してください。$ GIT_COMMON_DIRが設定されており、代わりに「$ GIT_COMMON_DIR / shallow」が使用される場合、このファイルは無視されます。</target>
        </trans-unit>
        <trans-unit id="44c5e44a5b0e8e88feba4a9ab4b3411e28cf0521" translate="yes" xml:space="preserve">
          <source>This is similar to the previous mode, but lets you use the interactive interface to show the &quot;diff&quot; output and choose which hunks to use in the result. See below for the description of &lt;code&gt;--patch&lt;/code&gt; option.</source>
          <target state="translated">これは前のモードと似ていますが、インタラクティブインターフェイスを使用して「diff」出力を表示し、結果で使用するハンクを選択できます。 &lt;code&gt;--patch&lt;/code&gt; オプションの説明については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d4677f97f18bb53a7088b838331f1fec5e57df8" translate="yes" xml:space="preserve">
          <source>This is synonymous to the earlier form (without the &quot;..&quot;) for viewing the changes between two arbitrary &amp;lt;commit&amp;gt;. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.</source>
          <target state="translated">これは、2つの任意の&amp;lt;commit&amp;gt;間の変更を表示するための以前の形式（「..」なし）と同義です。片側の&amp;lt;commit&amp;gt;を省略すると、代わりにHEADを使用した場合と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="53111542e6130a3092130c1b278f62eb8bf4f3d5" translate="yes" xml:space="preserve">
          <source>This is synonymous to the earlier form (without the &lt;code&gt;..&lt;/code&gt;) for viewing the changes between two arbitrary &amp;lt;commit&amp;gt;. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.</source>
          <target state="translated">これは、2つの任意の&amp;lt;commit&amp;gt;間の変更を表示するための以前の形式（ &lt;code&gt;..&lt;/code&gt; なし）と同義です。片側の&amp;lt;commit&amp;gt;を省略すると、代わりにHEADを使用した場合と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="4054020991b3f63ee43241d99b871a192e5f7888" translate="yes" xml:space="preserve">
          <source>This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.</source>
          <target state="translated">これは前のフォームと同義です。一方の&amp;lt;commit&amp;gt;を省略すると、代わりにHEADを使用した場合と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="75478eb48b06b2098532610f52369c54c5a35766" translate="yes" xml:space="preserve">
          <source>This is the Git native format and is &lt;code&gt;&amp;lt;time&amp;gt; SP &amp;lt;offutc&amp;gt;&lt;/code&gt;. It is also fast-import&amp;rsquo;s default format, if --date-format was not specified.</source>
          <target state="translated">これはGitネイティブ形式であり、 &lt;code&gt;&amp;lt;time&amp;gt; SP &amp;lt;offutc&amp;gt;&lt;/code&gt; です。--date-formatが指定されていない場合、これはfast-importのデフォルト形式でもあります。</target>
        </trans-unit>
        <trans-unit id="6bd79ba5c8340a61cc49527317aae865e2230698" translate="yes" xml:space="preserve">
          <source>This is the filter for performing the commit. If this filter is specified, it will be called instead of the &lt;code&gt;git commit-tree&lt;/code&gt; command, with arguments of the form &quot;&amp;lt;TREE_ID&amp;gt; [(-p &amp;lt;PARENT_COMMIT_ID&amp;gt;)&amp;hellip;​]&quot; and the log message on stdin. The commit id is expected on stdout.</source>
          <target state="translated">これは、コミットを実行するためのフィルターです。このフィルターを指定すると、「&amp;lt;TREE_ID&amp;gt; [（-p &amp;lt;PARENT_COMMIT_ID&amp;gt;）&amp;hellip;]」という形式の引数とstdinのログメッセージを使用して、 &lt;code&gt;git commit-tree&lt;/code&gt; コマンドの代わりに呼び出されます。コミットIDはstdoutで予期されています。</target>
        </trans-unit>
        <trans-unit id="ab02ed108f018595c9832dcfce47c6a593278667" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting tag names. When passed, it will be called for every tag ref that points to a rewritten object (or to a tag object which points to a rewritten object). The original tag name is passed via standard input, and the new tag name is expected on standard output.</source>
          <target state="translated">これは、タグ名を書き換えるためのフィルタです。渡されると、書き換えられたオブジェクトを指す(または書き換えられたオブジェクトを指すタグオブジェクトを指す)タグrefごとに呼び出されます。元のタグ名は標準入力で渡され、標準出力では新しいタグ名が期待されます。</target>
        </trans-unit>
        <trans-unit id="ec46b5cef98509f43f653471ea24de2e709b0b36" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the commit messages. The argument is evaluated in the shell with the original commit message on standard input; its standard output is used as the new commit message.</source>
          <target state="translated">これはコミットメッセージを書き換えるためのフィルタです。引数は、標準入力の元のコミットメッセージとともにシェルで評価され、その標準出力が新しいコミットメッセージとして使用されます。</target>
        </trans-unit>
        <trans-unit id="baaf77805fbcb910ae11f451b39d9e38daaa6669" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the commit&amp;rsquo;s parent list. It will receive the parent string on stdin and shall output the new parent string on stdout. The parent string is in the format described in &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt;: empty for the initial commit, &quot;-p parent&quot; for a normal commit and &quot;-p parent1 -p parent2 -p parent3 &amp;hellip;​&quot; for a merge commit.</source>
          <target state="translated">これは、コミットの親リストを書き換えるためのフィルターです。stdinで親文字列を受け取り、stdoutで新しい親文字列を出力します。親文字列は&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]で&lt;/a&gt;説明されている形式です。最初のコミットの場合は空、通常のコミットの場合は「-p parent」、マージの場合は「-p parent1 -p parent2 -p parent3&amp;hellip;」コミット。</target>
        </trans-unit>
        <trans-unit id="ed6796eee1e84719fc79503aec05a2585b0a98ee" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the index. It is similar to the tree filter but does not check out the tree, which makes it much faster. Frequently used with &lt;code&gt;git rm --cached
--ignore-unmatch ...&lt;/code&gt;, see EXAMPLES below. For hairy cases, see &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">インデックスを書き換えるためのフィルターです。これはツリーフィルターに似ていますが、ツリーをチェックアウトしないため、処理速度が大幅に向上します。 &lt;code&gt;git rm --cached --ignore-unmatch ...&lt;/code&gt; で頻繁に使用されます。以下の例を参照してください。毛深いケースについては、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84464b13412e29584cb64fc663c003212ddd470c" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the tree and its contents. The argument is evaluated in shell with the working directory set to the root of the checked out tree. The new tree is then used as-is (new files are auto-added, disappeared files are auto-removed - neither .gitignore files nor any other ignore rules &lt;strong&gt;HAVE ANY EFFECT&lt;/strong&gt;!).</source>
          <target state="translated">これは、ツリーとその内容を書き換えるためのフィルターです。引数はシェルで評価され、作業ディレクトリはチェックアウトされたツリーのルートに設定されます。新しいツリーは、（ - .gitignoreファイルや他でもないが、ルールは無視し、新しいファイルは、自動的に追加されたファイルは自動削除されている姿を消し、そのまま使用されて&lt;strong&gt;何の効果もあり&lt;/strong&gt;！）。</target>
        </trans-unit>
        <trans-unit id="ac6e8f6a01875184858c8585102e8f6aa273aee7" translate="yes" xml:space="preserve">
          <source>This is the format defined by the initial version of git, including but not limited to the format of the repository directory, the repository configuration file, and the object and ref storage. Specifying the complete behavior of git is beyond the scope of this document.</source>
          <target state="translated">これは、git の初期バージョンで定義された形式で、リポジトリディレクトリの形式、リポジトリ設定ファイルの形式、オブジェクトや ref の保存方法などが含まれますが、これらに限定されません。git の完全な動作を指定することは、このドキュメントの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="53064adeec7c86c12f0de7129be2018180dbdde8" translate="yes" xml:space="preserve">
          <source>This is the instruction format to copy a byte range from the source object. It encodes the offset to copy from and the number of bytes to copy. Offset and size are in little-endian order.</source>
          <target state="translated">コピー元のオブジェクトからバイト範囲をコピーする命令形式です。コピー元のオフセットとコピーするバイト数をエンコードします。オフセットとサイズはリトルエンディアン順です。</target>
        </trans-unit>
        <trans-unit id="7c56810b4cb2a212f096564a869dc50ed111eb3c" translate="yes" xml:space="preserve">
          <source>This is the instruction reserved for future expansion.</source>
          <target state="translated">これは将来の拡張のために予約された命令です。</target>
        </trans-unit>
        <trans-unit id="2ac15a186ae4c1add6605d649b034295db99bef1" translate="yes" xml:space="preserve">
          <source>This is the instruction to construct target object without the base object. The following data is appended to the target object. The first seven bits of the first octet determines the size of data in bytes. The size must be non-zero.</source>
          <target state="translated">ベースとなるオブジェクトを持たずにターゲットオブジェクトを構築する命令です。ターゲットオブジェクトには次のデータが付加されます。最初のオクテットの最初の7ビットは、データのサイズをバイト単位で決定します。サイズは0以外でなければなりません。</target>
        </trans-unit>
        <trans-unit id="109ca8035c1b87bb820c08a28a9de7b34fde1bb6" translate="yes" xml:space="preserve">
          <source>This is the opposite of &lt;code&gt;ours&lt;/code&gt;; note that, unlike &lt;code&gt;ours&lt;/code&gt;, there is no &lt;code&gt;theirs&lt;/code&gt; merge strategy to confuse this merge option with.</source>
          <target state="translated">これは &lt;code&gt;ours&lt;/code&gt; の反対です。 &lt;code&gt;ours&lt;/code&gt; とは異なり、このマージオプションを混同する &lt;code&gt;theirs&lt;/code&gt; マージ戦略がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a470bc42a7932d13fef06a087064186d12eef547" translate="yes" xml:space="preserve">
          <source>This is the preferred method.</source>
          <target state="translated">これが好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="d5ae5cf60359e7831f40d915d7567f63dc115a19" translate="yes" xml:space="preserve">
          <source>This is the same &lt;code&gt;git read-tree&lt;/code&gt; command we have already seen, but it takes three trees, unlike previous examples. This reads the contents of each tree into different &lt;code&gt;stage&lt;/code&gt; in the index file (the first tree goes to stage 1, the second to stage 2, etc.). After reading three trees into three stages, the paths that are the same in all three stages are &lt;code&gt;collapsed&lt;/code&gt; into stage 0. Also paths that are the same in two of three stages are collapsed into stage 0, taking the SHA-1 from either stage 2 or stage 3, whichever is different from stage 1 (i.e. only one side changed from the common ancestor).</source>
          <target state="translated">これはすでに見た &lt;code&gt;git read-tree&lt;/code&gt; コマンドと同じですが、前の例とは異なり、3つのツリーが必要です。これにより、各ツリーの内容がインデックスファイルの異なる &lt;code&gt;stage&lt;/code&gt; に読み込まれます（最初のツリーはステージ1に、2番目のツリーはステージ2に、など）。3つのツリーを3つのステージに読み込んだ後、3つのステージすべてで同じパスがステージ0に &lt;code&gt;collapsed&lt;/code&gt; れます。また、3つのステージのうち2つで同じパスがステージ0に折りたたまれ、SHA-1がいずれかのステージ2から取得されますまたはステージ3、つまりステージ1とは異なる方（つまり、共通の祖先から片側のみが変更された場合）。</target>
        </trans-unit>
        <trans-unit id="d9a78198f4c718b4aad0f141375d5823cd8e39e3" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;gitdir&lt;/code&gt; except that matching is done case-insensitively (e.g. on case-insensitive file systems)</source>
          <target state="translated">これは &lt;code&gt;gitdir&lt;/code&gt; と同じですが、照合は大文字と小文字を区別せずに行われます（たとえば、大文字と小文字を区別しないファイルシステム）。</target>
        </trans-unit>
        <trans-unit id="6d8ef8c3ff85a1d3362ff60dea809d4867db08e2" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;raw&lt;/code&gt; except that no sanity checks on the numeric epoch and local offset are performed. This can be useful when trying to filter or import an existing history with e.g. bogus timezone values.</source>
          <target state="translated">これは、数値エポックとローカルオフセットのサニティチェックが実行されないことを除いて、 &lt;code&gt;raw&lt;/code&gt; と同じです。これは、偽のタイムゾーン値などを使用して既存の履歴をフィルタリングまたはインポートしようとする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3d8eaa3e252f616f4794342341d2f4ec065a52c7" translate="yes" xml:space="preserve">
          <source>This is the standard email format as described by RFC 2822.</source>
          <target state="translated">これは、RFC 2822に記載されている標準的な電子メールフォーマットです。</target>
        </trans-unit>
        <trans-unit id="b1825adadaae31865a7ba56f02eeaa58bb1a595e" translate="yes" xml:space="preserve">
          <source>This is the standard helper program to use with &lt;code&gt;git merge-index&lt;/code&gt; to resolve a merge after the trivial merge done with &lt;code&gt;git read-tree -m&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git read-tree -m&lt;/code&gt; を使用して簡単なマージを行った後、 &lt;code&gt;git merge-index&lt;/code&gt; を使用してマージを解決する標準のヘルパープログラムです。</target>
        </trans-unit>
        <trans-unit id="f4605ef17a6ae238fb7ad1359ce2fc3809a170d2" translate="yes" xml:space="preserve">
          <source>This is the state of the index file and the working file after &lt;code&gt;git merge&lt;/code&gt; returns control back to you, leaving the conflicting merge for you to resolve. Notice that the path &lt;code&gt;hello&lt;/code&gt; is still unmerged, and what you see with &lt;code&gt;git diff&lt;/code&gt; at this point is differences since stage 2 (i.e. your version).</source>
          <target state="translated">これは、 &lt;code&gt;git merge&lt;/code&gt; が制御をユーザーに戻した後のインデックスファイルと作業ファイルの状態であり、競合するマージは解決する必要があります。パス &lt;code&gt;hello&lt;/code&gt; はまだマージされておらず、この時点で &lt;code&gt;git diff&lt;/code&gt; で表示されるのは、ステージ2（つまり、バージョン）以降の違いです。</target>
        </trans-unit>
        <trans-unit id="885013fc19184ff3f87757857452f6badc7e664c" translate="yes" xml:space="preserve">
          <source>This is to emulate &lt;code&gt;git fetch&lt;/code&gt; run on the &lt;code&gt;mothership&lt;/code&gt; using &lt;code&gt;git
push&lt;/code&gt; that is run in the opposite direction in order to integrate the work done on &lt;code&gt;satellite&lt;/code&gt;, and is often necessary when you can only make connection in one way (i.e. satellite can ssh into mothership but mothership cannot initiate connection to satellite because the latter is behind a firewall or does not run sshd).</source>
          <target state="translated">これは、 &lt;code&gt;satellite&lt;/code&gt; で行われた作業を統合するために反対方向に実行される &lt;code&gt;git push&lt;/code&gt; を使用して、 &lt;code&gt;mothership&lt;/code&gt; &lt;code&gt;git fetch&lt;/code&gt; run をエミュレートするものであり、一方向でしか接続できない場合（つまり、サテライトが母船にsshできる場合）に必要です。ただし、後者はファイアウォールの背後にあるか、sshdを実行していないため、母艦は衛星への接続を開始できません。</target>
        </trans-unit>
        <trans-unit id="a0fbffa526980249cc459b3697ae082d2fb16d12" translate="yes" xml:space="preserve">
          <source>This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.</source>
          <target state="translated">これは、2つの任意の&amp;lt;commit&amp;gt;間の変更を表示するためのものです。</target>
        </trans-unit>
        <trans-unit id="2ccd3734f230a6bccf87e0841ef19acfd1763ec7" translate="yes" xml:space="preserve">
          <source>This is used if &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; does not resolve the correct &lt;code&gt;-kb&lt;/code&gt; mode to use. If true, all unresolved files are sent to the client in mode &lt;code&gt;-kb&lt;/code&gt;. This causes the client to treat them as binary files, which suppresses any newline munging it otherwise might do. Alternatively, if it is set to &quot;guess&quot;, then the contents of the file are examined to decide if it is binary, similar to &lt;code&gt;core.autocrlf&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; が使用する正しい &lt;code&gt;-kb&lt;/code&gt; モードを解決しない場合に使用されます。trueの場合、すべての未解決のファイルはモード &lt;code&gt;-kb&lt;/code&gt; でクライアントに送信されます。これにより、クライアントはそれらをバイナリファイルとして処理します。これにより、改行を改ざんしないようにすることができます。または、「guess」に設定されている場合、ファイルの内容が調べられ、 &lt;code&gt;core.autocrlf&lt;/code&gt; と同様に、それがバイナリかどうかが判断されます。</target>
        </trans-unit>
        <trans-unit id="414b7e001678a67515e35206eca5b23ff617a9b6" translate="yes" xml:space="preserve">
          <source>This is used to avoid unnecessary false hits when &lt;code&gt;git diff-files&lt;/code&gt; is run after &lt;code&gt;git read-tree&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git read-tree&lt;/code&gt; の後に &lt;code&gt;git diff-files&lt;/code&gt; を実行するときに不要な誤ヒットを回避するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1756049aad8be96bbdbe029ae5b31f810c9534b0" translate="yes" xml:space="preserve">
          <source>This is used to imply --all-progress whenever progress display is activated. Unlike --all-progress this flag doesn&amp;rsquo;t actually force any progress display by itself.</source>
          <target state="translated">これは、進行状況の表示がアクティブになっているときは常に--all-progressを意味します。--all-progressとは異なり、このフラグは実際にはそれ自体で進行状況の表示を強制しません。</target>
        </trans-unit>
        <trans-unit id="fa389947911fb92b7cae5947eac62679e5095362" translate="yes" xml:space="preserve">
          <source>This is used to reorder the filepairs according to the user&amp;rsquo;s (or project&amp;rsquo;s) taste, and is controlled by the -O option to the &lt;code&gt;git diff-*&lt;/code&gt; commands.</source>
          <target state="translated">これは、ユーザー（またはプロジェクト）の好みに応じてファイルペアを並べ替えるために使用され、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Oオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="e4698ff07eb1e8e63a5c87a4e409437aeb77e0b4" translate="yes" xml:space="preserve">
          <source>This is useful because it makes it easy to choose a good commit to test when you want to avoid to test some of them for some reason (they may not compile for example).</source>
          <target state="translated">これは、何らかの理由で一部のテストを避けたい場合(例えばコンパイルされない可能性がある)に、テストするのに適したコミットを簡単に選択できるので便利です。</target>
        </trans-unit>
        <trans-unit id="8b37ac2c46d9c49011957ba8051eb182f97c074f" translate="yes" xml:space="preserve">
          <source>This is useful if F and G were flawed in some way, or should not be part of topicA. Note that the argument to --onto and the &amp;lt;upstream&amp;gt; parameter can be any valid commit-ish.</source>
          <target state="translated">これは、FとGに何らかの欠陥がある場合、またはtopicAの一部ではない場合に役立ちます。--ontoへの引数と&amp;lt;upstream&amp;gt;パラメータは、任意の有効なcommit-ishにすることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5add7a300e88f092e0ef1b21363222f3ece44ad7" translate="yes" xml:space="preserve">
          <source>This is useful if remote side is git:// server accessed over some tunnel.</source>
          <target state="translated">これは、リモート側が何らかのトンネルを経由して git://サーバーにアクセスしている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d562e00428aacff2db14167eb0ecbc7ee7ea6370" translate="yes" xml:space="preserve">
          <source>This is useful if the branch on which you ran &lt;code&gt;git stash push&lt;/code&gt; has changed enough that &lt;code&gt;git stash apply&lt;/code&gt; fails due to conflicts. Since the stash entry is applied on top of the commit that was HEAD at the time &lt;code&gt;git stash&lt;/code&gt; was run, it restores the originally stashed state with no conflicts.</source>
          <target state="translated">これは、 &lt;code&gt;git stash push&lt;/code&gt; を実行したブランチが変更され、競合のために &lt;code&gt;git stash apply&lt;/code&gt; が失敗した場合に役立ちます。stashエントリは、 &lt;code&gt;git stash&lt;/code&gt; が実行されたときにHEADだったコミットの上に適用されるため、競合することなく、元のstash状態が復元されます。</target>
        </trans-unit>
        <trans-unit id="30fcffaf45041b08cc97af9d1fa76a9ba0b33fa3" translate="yes" xml:space="preserve">
          <source>This is useful if you want to begin your message in a discussion thread with comments and suggestions on the message you are responding to, and to conclude it with a patch submission, separating the discussion and the beginning of the proposed commit log message with a scissors line.</source>
          <target state="translated">これは、ディスカッションスレッドでメッセージを開始して、応答しているメッセージへのコメントや提案でメッセージを始め、最後にパッチの投稿で締めくくりたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f93051fa336df47ab5f519702120e3efac9cd277" translate="yes" xml:space="preserve">
          <source>This is useful on systems where lstat() calls are very slow, such as CIFS/Microsoft Windows.</source>
          <target state="translated">これは、CIFS/Microsoft Windows のように lstat()の呼び出しが非常に遅いシステムで有用です。</target>
        </trans-unit>
        <trans-unit id="6b9439a13a0f6c5a19da94d77f92d4a1ee7e5be6" translate="yes" xml:space="preserve">
          <source>This is useful when cherry-picking more than one commits' effect to your index in a row.</source>
          <target state="translated">これは、複数のコミットの効果を自分のインデックスに一列に並べてチェリーピックするときに便利です。</target>
        </trans-unit>
        <trans-unit id="ccb566ca825959d19feaead9d9434de1315351a7" translate="yes" xml:space="preserve">
          <source>This is useful when reverting more than one commits' effect to your index in a row.</source>
          <target state="translated">これは、複数のコミットの効果を一行にまとめてインデックスに戻す場合に便利です。</target>
        </trans-unit>
        <trans-unit id="a6b3b2938023c6383383af34a5efd6428edcf530" translate="yes" xml:space="preserve">
          <source>This is useful when topicB does not depend on topicA.</source>
          <target state="translated">これは、トピックBがトピックAに依存しない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="804a7dc8302db74d34102cb378738f0047ef1777" translate="yes" xml:space="preserve">
          <source>This is usually not what an end user wants to run directly. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; instead.</source>
          <target state="translated">これは通常、エンドユーザーが直接実行したいものではありません。代わりに&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81deedcd021f1608f9f91f70a15e2349e22a39d7" translate="yes" xml:space="preserve">
          <source>This is what &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; generates. Most headers and MIME formatting are ignored.</source>
          <target state="translated">これは&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]が&lt;/a&gt;生成するものです。ほとんどのヘッダーとMIME形式は無視されます。</target>
        </trans-unit>
        <trans-unit id="ca6a5c0a1684e36bc50c3e68cfccb9e6ebf59a4b" translate="yes" xml:space="preserve">
          <source>This is what causes Git to track the remote&amp;rsquo;s branches; you may modify or delete these configuration options by editing &lt;code&gt;.git/config&lt;/code&gt; with a text editor. (See the &quot;CONFIGURATION FILE&quot; section of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.)</source>
          <target state="translated">これが、Gitがリモートのブランチを追跡する原因になります。テキストエディタで &lt;code&gt;.git/config&lt;/code&gt; を編集して、これらの構成オプションを変更または削除できます。（詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の「CONFIGURATION FILE」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="e49010e0ec73f433e7f19c2db7cbfd7081066732" translate="yes" xml:space="preserve">
          <source>This is why it is a bad idea to just chose the next best unskipped bisection commit when the first one has been skipped.</source>
          <target state="translated">だからこそ、最初にスキップされたときに、スキップされていない次善のバイセクションコミットを選んだだけではダメなのです。</target>
        </trans-unit>
        <trans-unit id="b49b41d6b66c63a0b41c3cd8eb53b02ecb1e28e6" translate="yes" xml:space="preserve">
          <source>This leaves a copy of &lt;code&gt;next&lt;/code&gt; temporarily in FETCH_HEAD, and updates the remote-tracking branch &lt;code&gt;origin/next&lt;/code&gt;. The same can be done by invoking fetch and merge:</source>
          <target state="translated">これにより、 &lt;code&gt;next&lt;/code&gt; のコピーが一時的にFETCH_HEADに残り、リモートトラッキングブランチの &lt;code&gt;origin/next&lt;/code&gt; が更新されます。フェッチとマージを呼び出すことで同じことができます。</target>
        </trans-unit>
        <trans-unit id="51722bee7db4c41cee14b92ba092db0dce132718" translate="yes" xml:space="preserve">
          <source>This leaves a copy of &lt;code&gt;next&lt;/code&gt; temporarily in FETCH_HEAD, but does not update any remote-tracking branches. Using remote-tracking branches, the same can be done by invoking fetch and merge:</source>
          <target state="translated">これにより、 &lt;code&gt;next&lt;/code&gt; のコピーが一時的にFETCH_HEADに残りますが、リモート追跡ブランチは更新されません。リモート追跡ブランチを使用して、フェッチとマージを呼び出すことで同じことができます。</target>
        </trans-unit>
        <trans-unit id="8d3c273456c213d2f0eef245650834ea18d26a16" translate="yes" xml:space="preserve">
          <source>This lets you choose one path out of a &lt;code&gt;status&lt;/code&gt; like selection. After choosing the path, it presents the diff between the index and the working tree file and asks you if you want to stage the change of each hunk. You can select one of the following options and type return:</source>
          <target state="translated">これにより、選択などの &lt;code&gt;status&lt;/code&gt; から1つのパスを選択できます。パスを選択すると、インデックスと作業ツリーファイルの差分が表示され、各ハンクの変更をステージングするかどうかを尋ねられます。次のオプションのいずれかを選択して、returnと入力できます。</target>
        </trans-unit>
        <trans-unit id="060b46ed6fd409fbf360157d2f3c13ff3dcd2220" translate="yes" xml:space="preserve">
          <source>This lets you quit without do cleaning.</source>
          <target state="translated">これで掃除をしなくても辞めることができます。</target>
        </trans-unit>
        <trans-unit id="aa41c7db3702739cc1b230bda0b83b675d7b2671" translate="yes" xml:space="preserve">
          <source>This lets you review what will be committed (i.e. between HEAD and index).</source>
          <target state="translated">これにより、何がコミットされるかを確認することができます(つまり、HEADとインデックスの間)。</target>
        </trans-unit>
        <trans-unit id="ca3fd0a1256c2900c49910f1d037599eb216d4ff" translate="yes" xml:space="preserve">
          <source>This list should contain the URI of gitweb&amp;rsquo;s standard stylesheet. The default URI of gitweb stylesheet can be set at build time using the &lt;code&gt;GITWEB_CSS&lt;/code&gt; makefile variable. Its default value is &lt;code&gt;static/gitweb.css&lt;/code&gt; (or &lt;code&gt;static/gitweb.min.css&lt;/code&gt; if the &lt;code&gt;CSSMIN&lt;/code&gt; variable is defined, i.e. if CSS minifier is used during build).</source>
          <target state="translated">このリストには、gitwebの標準スタイルシートのURIが含まれている必要があります。gitwebスタイルシートのデフォルトURIは、ビルド時に &lt;code&gt;GITWEB_CSS&lt;/code&gt; makefile変数を使用して設定できます。デフォルト値は &lt;code&gt;static/gitweb.css&lt;/code&gt; （または、 &lt;code&gt;CSSMIN&lt;/code&gt; 変数が定義されている場合、つまりビルド中にCSS minifierが使用されている場合は &lt;code&gt;static/gitweb.min.css&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="87db555786bcad0bd342abfeced795a76cdcb852" translate="yes" xml:space="preserve">
          <source>This lists the commits reachable from the previous version of the &lt;code&gt;master&lt;/code&gt; branch head. This syntax can be used with any Git command that accepts a commit, not just with &lt;code&gt;git log&lt;/code&gt;. Some other examples:</source>
          <target state="translated">これは、以前のバージョンの &lt;code&gt;master&lt;/code&gt; ブランチヘッドから到達可能なコミットを一覧表示します。この構文は、 &lt;code&gt;git log&lt;/code&gt; だけでなく、コミットを受け入れるすべてのGitコマンドで使用できます。その他の例：</target>
        </trans-unit>
        <trans-unit id="9d19ff56a7106ea2437dd5210773dc60fd2828eb" translate="yes" xml:space="preserve">
          <source>This looks up the &amp;lt;file&amp;gt;(s) in the index and, if there are any merge entries, passes the SHA-1 hash for those files as arguments 1, 2, 3 (empty argument if no file), and &amp;lt;file&amp;gt; as argument 4. File modes for the three files are passed as arguments 5, 6 and 7.</source>
          <target state="translated">これはインデックス内の&amp;lt;file&amp;gt;を検索し、マージエントリがある場合は、それらのファイルのSHA-1ハッシュを引数1、2、3（ファイルがない場合は空の引数）、および&amp;lt;file&amp;gt;として渡します3つのファイルのファイルモードは、引数5、6、7として渡されます。</target>
        </trans-unit>
        <trans-unit id="6790f45ac4b6ed7e77775e3a5dfba68fc876105d" translate="yes" xml:space="preserve">
          <source>This makes a commit that records the modification to &lt;code&gt;Makefile&lt;/code&gt;. The changes staged for &lt;code&gt;hello.c&lt;/code&gt; and &lt;code&gt;hello.h&lt;/code&gt; are not included in the resulting commit. However, their changes are not lost &amp;mdash; they are still staged and merely held back. After the above sequence, if you do:</source>
          <target state="translated">これにより、 &lt;code&gt;Makefile&lt;/code&gt; への変更を記録するコミットが行われます。 &lt;code&gt;hello.c&lt;/code&gt; および &lt;code&gt;hello.h&lt;/code&gt; に対してステージングされた変更は、結果のコミットには含まれません。ただし、それらの変更は失われません&amp;mdash;それらはまだステージングされ、単に保留されます。上記のシーケンスの後、次の操作を行った場合：</target>
        </trans-unit>
        <trans-unit id="c23316330a20f8d3e00d74e273bc6ee3d02efbd7" translate="yes" xml:space="preserve">
          <source>This makes a new branch called &lt;code&gt;other&lt;/code&gt; from &lt;code&gt;master~5..master&lt;/code&gt; (i.e. if &lt;code&gt;master&lt;/code&gt; has linear history, it will take the last 5 commits).</source>
          <target state="translated">これにより、 &lt;code&gt;master~5..master&lt;/code&gt; から &lt;code&gt;other&lt;/code&gt; と呼ばれる新しいブランチが作成されます（つまり、 &lt;code&gt;master&lt;/code&gt; に線形履歴がある場合、最後の5回のコミットが行われます）。</target>
        </trans-unit>
        <trans-unit id="b0ade35fb815795f98a8b6354752858acd9e1cfa" translate="yes" xml:space="preserve">
          <source>This makes sure that only the key/value pair for kernel.org is replaced.</source>
          <target state="translated">これにより、kernel.org のキーと値のペアだけが置換されることを確認します。</target>
        </trans-unit>
        <trans-unit id="2d726c732ca5f310160366fecc16a8d1ede4f94c" translate="yes" xml:space="preserve">
          <source>This manual describes the convention used throughout Git CLI.</source>
          <target state="translated">このマニュアルでは、Git CLI全体で使用される規約について説明しています。</target>
        </trans-unit>
        <trans-unit id="40982f6c18ca56554ec412b18ace4f012d6c51fa" translate="yes" xml:space="preserve">
          <source>This manual is designed to be readable by someone with basic UNIX command-line skills, but no previous knowledge of Git.</source>
          <target state="translated">本書は、基本的な UNIX コマンドラインのスキルはあるが、Git の知識がない人でも読めるように設計されています。</target>
        </trans-unit>
        <trans-unit id="1b4c4400f56ace6af78ca50c928fe7f5cfe13be6" translate="yes" xml:space="preserve">
          <source>This manual page describes only the most frequently used options.</source>
          <target state="translated">このマニュアルページでは、最もよく使用されるオプションのみを説明しています。</target>
        </trans-unit>
        <trans-unit id="c74c8f67468f674a4bbb6cadbdb326520214aafb" translate="yes" xml:space="preserve">
          <source>This manual page describes only the most frequently used options. See &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; for a complete list.</source>
          <target state="translated">このマニュアルページでは、最も頻繁に使用されるオプションのみを説明しています。完全なリストについては、&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="78fbc8bf0be13ddc4f9bce27ee4dc19783022a2b" translate="yes" xml:space="preserve">
          <source>This means &quot;show everything that is reachable from either one, but exclude anything that is reachable from both of them&quot;.</source>
          <target state="translated">これは、「どちらか一方から届くものはすべて表示するが、両方から届くものは除外する」という意味です。</target>
        </trans-unit>
        <trans-unit id="9f4c07f14694007bf95dcdb96bbfc3991db01ef3" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;git reset &amp;lt;pathspec&amp;gt;&lt;/code&gt; is the opposite of &lt;code&gt;git add
&amp;lt;pathspec&amp;gt;&lt;/code&gt;. This command is equivalent to &lt;code&gt;git restore [--source=&amp;lt;tree-ish&amp;gt;] --staged &amp;lt;pathspec&amp;gt;...&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git reset &amp;lt;pathspec&amp;gt;&lt;/code&gt; が &lt;code&gt;git add &amp;lt;pathspec&amp;gt;&lt;/code&gt; 反対であることを意味します。このコマンドは &lt;code&gt;git restore [--source=&amp;lt;tree-ish&amp;gt;] --staged &amp;lt;pathspec&amp;gt;...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="138908f8222de2b4daf75b57b97dc896b1845167" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;git reset -p&lt;/code&gt; is the opposite of &lt;code&gt;git add -p&lt;/code&gt;, i.e. you can use it to selectively reset hunks. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">これは &lt;code&gt;git reset -p&lt;/code&gt; が &lt;code&gt;git add -p&lt;/code&gt; の逆であることを意味します。つまり、これを使用してハンクを選択的にリセットできます。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9c231d7cedbd657513f91f60869397c2bef2f37d" translate="yes" xml:space="preserve">
          <source>This means that it is often &quot;cheaper&quot; if QA people or end users can do it.</source>
          <target state="translated">つまり、QAの人やエンドユーザーができれば「安く」なることが多いということです。</target>
        </trans-unit>
        <trans-unit id="0ff1dc064f7e1f4d0872498ac05a21ade168adc9" translate="yes" xml:space="preserve">
          <source>This means that test suites are good to prevent some bugs from being committed and they are also quite good to tell you that you have some bugs. But they are not so good to tell you where some bugs have been introduced. To tell you that efficiently, git bisect is needed.</source>
          <target state="translated">つまり、テストスイートはいくつかのバグがコミットされるのを防ぐためには良いものであり、いくつかのバグがあることを伝えるためにはかなり良いものです。しかし、どこにいくつかのバグが混入しているかを伝えるのにはあまり向いていません。それを効率よく伝えるために必要なのが git bisect です。</target>
        </trans-unit>
        <trans-unit id="388b9571e5f1264e3be3a08ce2827efedebdef31" translate="yes" xml:space="preserve">
          <source>This means that the best bisection commits are the commits where the following function is maximum:</source>
          <target state="translated">つまり、以下の関数が最大となるコミットが最良の二等分コミットとなります。</target>
        </trans-unit>
        <trans-unit id="597961da0012b9cd684792dccd1c7471e5687e9f" translate="yes" xml:space="preserve">
          <source>This means that the trimmed &amp;lt;token&amp;gt; and &amp;lt;value&amp;gt; will be separated by &lt;code&gt;': '&lt;/code&gt; (one colon followed by one space).</source>
          <target state="translated">これは、トリムされた&amp;lt;token&amp;gt;と&amp;lt;value&amp;gt;が &lt;code&gt;': '&lt;/code&gt; （1つのコロンと1つのスペース）で区切られることを意味します。</target>
        </trans-unit>
        <trans-unit id="38ea5711a664516b71bd0eeea932fd8ac8d7c412" translate="yes" xml:space="preserve">
          <source>This means that we get rid of the uninteresting commits in the DAG.</source>
          <target state="translated">これは、DAG内の興味のないコミットを取り除くことを意味します。</target>
        </trans-unit>
        <trans-unit id="2454a8b57cbe01726a67b284a671cd468ecfe3a7" translate="yes" xml:space="preserve">
          <source>This means that you can do</source>
          <target state="translated">ということは、以下のことができるということです。</target>
        </trans-unit>
        <trans-unit id="4bfb7f09c9f4811c3630d40fb2caf5f3310e564e" translate="yes" xml:space="preserve">
          <source>This means that you can use &lt;code&gt;git checkout -p&lt;/code&gt; to selectively discard edits from your current working tree. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">つまり、 &lt;code&gt;git checkout -p&lt;/code&gt; を使用して、現在の作業ツリーから編集内容を選択的に破棄できます。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2db1fd51873ef2a0afca87fc61387f5a8891e2a5" translate="yes" xml:space="preserve">
          <source>This merges the changes from Bob&amp;rsquo;s &quot;master&quot; branch into Alice&amp;rsquo;s current branch. If Alice has made her own changes in the meantime, then she may need to manually fix any conflicts.</source>
          <target state="translated">これにより、ボブの「マスター」ブランチからの変更がアリスの現在のブランチにマージされます。その間にアリスが自分で変更を加えた場合は、競合を手動で修正する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="cff3569519105ed116111cf73b4d626e89a75fc2" translate="yes" xml:space="preserve">
          <source>This merges the file listing in the directory cache index with the actual working directory list, and shows different combinations of the two.</source>
          <target state="translated">これは、ディレクトリキャッシュインデックスのファイルリストと実際の作業ディレクトリリストをマージし、2つの異なる組み合わせを表示します。</target>
        </trans-unit>
        <trans-unit id="e550f0e6cba8953c27a9638529775caa0627f8ed" translate="yes" xml:space="preserve">
          <source>This might not be what you expect, i.e. you want to prune remote &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, but also explicitly fetch tags from it, so when you fetch from it you delete all your local tags, most of which may not have come from the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; remote in the first place.</source>
          <target state="translated">これは期待したものとは異なる可能性があります。つまり、リモート &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; をプルーニングするだけでなく、明示的にタグをフェッチするため、そこからフェッチすると、すべてのローカルタグが削除されます。ほとんどのタグは &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; そもそもリモート。</target>
        </trans-unit>
        <trans-unit id="c165a1bf0e23a30271149315bd9959512cec8cbc" translate="yes" xml:space="preserve">
          <source>This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get</source>
          <target state="translated">このモードはデフォルトとは異なる点があります:マージの親のいずれかに対して TREESAME であっても、常にすべての親に従うという点です。マージの複数の側にコミットが含まれていたとしても、これはマージ自体がそうであることを意味するものではありません! 例では</target>
        </trans-unit>
        <trans-unit id="06118fd3f101fa40f7bcb707d4305013c9a74e7d" translate="yes" xml:space="preserve">
          <source>This mode has become the default in Git 2.0.</source>
          <target state="translated">このモードはGit 2.0ではデフォルトとなっています。</target>
        </trans-unit>
        <trans-unit id="9c35450959e8c97cb733c60205966cdb68e529c7" translate="yes" xml:space="preserve">
          <source>This mode is designed for repositories with very large indexes, and aims at reducing the time it takes to repeatedly write these indexes.</source>
          <target state="translated">このモードは非常に大きなインデックスを持つリポジトリのために設計されており、これらのインデックスの繰り返し書き込みにかかる時間を短縮することを目的としています。</target>
        </trans-unit>
        <trans-unit id="660380648a3de0733323135a33a60c0126cae6f8" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to dump the internal marks table to &amp;lt;file&amp;gt; when complete. For details, read up on &lt;code&gt;--export-marks=&amp;lt;file&amp;gt;&lt;/code&gt; in &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、完了時に内部マークテーブルを&amp;lt;file&amp;gt;にダンプするようにGitに指示します。詳細については、&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]の&lt;/a&gt; &lt;code&gt;--export-marks=&amp;lt;file&amp;gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="59a5d5693433000c28979c8002984ee295ddd735" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to load the marks specified in &amp;lt;file&amp;gt; before processing any input. For details, read up on &lt;code&gt;--import-marks=&amp;lt;file&amp;gt;&lt;/code&gt; in &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、入力を処理する前に&amp;lt;file&amp;gt;で指定されたマークをロードするようにGitに指示します。詳細については、&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]の&lt;/a&gt; &lt;code&gt;--import-marks=&amp;lt;file&amp;gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="29cca50076d9ab0c1672949be9f5cf285333ce65" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to pass &lt;code&gt;--signed-tags=verbatim&lt;/code&gt; to &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;. In the absence of this capability, Git will use &lt;code&gt;--signed-tags=warn-strip&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、Gitに &lt;code&gt;--signed-tags=verbatim&lt;/code&gt; を&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]&lt;/a&gt;に渡すように指示されます。この機能がない場合、Gitは &lt;code&gt;--signed-tags=warn-strip&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1cd76e4b36f80f26235450d81c7340212de49a9e" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;import&lt;/code&gt; capability. The fast-import commands &lt;code&gt;cat-blob&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; can be used by remote-helpers to retrieve information about blobs and trees that already exist in fast-import&amp;rsquo;s memory. This requires a channel from fast-import to the remote-helper. If it is advertised in addition to &quot;import&quot;, Git establishes a pipe from fast-import to the remote-helper&amp;rsquo;s stdin. It follows that Git and fast-import are both connected to the remote-helper&amp;rsquo;s stdin. Because Git can send multiple commands to the remote-helper it is required that helpers that use &lt;code&gt;bidi-import&lt;/code&gt; buffer all &lt;code&gt;import&lt;/code&gt; commands of a batch before sending data to fast-import. This is to prevent mixing commands and fast-import responses on the helper&amp;rsquo;s stdin.</source>
          <target state="translated">これにより、 &lt;code&gt;import&lt;/code&gt; 機能が変更されます。高速インポートコマンド &lt;code&gt;cat-blob&lt;/code&gt; および &lt;code&gt;ls&lt;/code&gt; をリモートヘルパーが使用して、高速インポートのメモリにすでに存在するblobおよびツリーに関する情報を取得できます。これには、高速インポートからリモートヘルパーへのチャネルが必要です。「インポート」に加えてアドバタイズされる場合、Gitは高速インポートからリモートヘルパーのstdinへのパイプを確立します。したがって、Gitとfast-importはどちらもリモートヘルパーのstdinに接続されています。Gitはリモートヘルパーに複数のコマンドを送信できるため、 &lt;code&gt;bidi-import&lt;/code&gt; を使用するヘルパーがすべての &lt;code&gt;import&lt;/code&gt; バッファーする必要がありますデータを高速インポートに送信する前のバッチのコマンド。これは、ヘルパーの標準入力でコマンドと高速インポート応答が混在するのを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="18b230f7b58b67f5f52143b1696b5514cecb3bd1" translate="yes" xml:space="preserve">
          <source>This operation is safe even if Alice has uncommitted local changes. The range notation &quot;HEAD..FETCH_HEAD&quot; means &quot;show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD&quot;. Alice already knows everything that leads to her current state (HEAD), and reviews what Bob has in his state (FETCH_HEAD) that she has not seen with this command.</source>
          <target state="translated">この操作は、アリスがローカルの変更をコミットしていない場合でも安全です。範囲表記「head...fetch_head」は、「fetch_headから到達可能なものはすべて表示するが、headから到達可能なものは除外する」という意味です。アリスはすでに自分の現在の状態(head)につながるものはすべて知っていて、このコマンドで見ていないボブの状態(fetch_head)にあるものを見直しています。</target>
        </trans-unit>
        <trans-unit id="4d6058894e90e81912f089323abaddf6ff7286d2" translate="yes" xml:space="preserve">
          <source>This option affects options that expect path name like &lt;code&gt;--git-dir&lt;/code&gt; and &lt;code&gt;--work-tree&lt;/code&gt; in that their interpretations of the path names would be made relative to the working directory caused by the &lt;code&gt;-C&lt;/code&gt; option. For example the following invocations are equivalent:</source>
          <target state="translated">このオプションは、 &lt;code&gt;--git-dir&lt;/code&gt; や &lt;code&gt;--work-tree&lt;/code&gt; などのパス名を期待するオプションに影響を与えます。つまり、パス名の解釈は、 &lt;code&gt;-C&lt;/code&gt; オプションによって引き起こされる作業ディレクトリに対して相対的になります。たとえば、次の呼び出しは同等です。</target>
        </trans-unit>
        <trans-unit id="2b42f3dc9742d00737d912066dfd2008f4af0874" translate="yes" xml:space="preserve">
          <source>This option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no other people did anything to the ref. It is like taking a &quot;lease&quot; on the ref without explicitly locking it, and the remote ref is updated only if the &quot;lease&quot; is still valid.</source>
          <target state="translated">このオプションを使用すると、更新する履歴がリベースした履歴であり、置き換えたい履歴であることを想定していると言うことができます。リモートの ref が指定したコミットをまだ指している場合、他の人がその ref に何かをしたわけではないことを確認することができます。これは、明示的にロックしないで ref に &quot;リース&quot; を取るようなもので、リモート ref は &quot;リース&quot; がまだ有効な場合にのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="a3080455c3c310acd65dd25e9f3c439906791e33" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-commit and commit-msg hooks. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、pre-commitおよびcommit-msgフックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ae0cb95b3299088da58c88ea10fd24e68d20bac1" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-merge and commit-msg hooks. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、マージ前およびcommit-msgフックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="22c10b3b137f37c4d219034c9b73126392cd066c" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-rebase hook. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、リベース前フックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8e7eb09891c6b3b929ffed676724fa916ce9b73e" translate="yes" xml:space="preserve">
          <source>This option can be either set to a boolean value or to &lt;code&gt;on-demand&lt;/code&gt;. Setting it to a boolean changes the behavior of fetch and pull to unconditionally recurse into submodules when set to true or to not recurse at all when set to false. When set to &lt;code&gt;on-demand&lt;/code&gt; (the default value), fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule&amp;rsquo;s reference.</source>
          <target state="translated">このオプションは、ブール値または &lt;code&gt;on-demand&lt;/code&gt; に設定できます。これをブール値に設定すると、フェッチおよびプルの動作が変更され、trueに設定されている場合は無条件にサブモジュールに再帰するか、falseに設定されている場合はまったく再帰されません。 &lt;code&gt;on-demand&lt;/code&gt; （デフォルト値）に設定されている場合、フェッチとプルは、スーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときにのみ、設定されたサブモジュールに再帰します。</target>
        </trans-unit>
        <trans-unit id="5d7a21f2665910c78fd7ff132552ce53899e84c0" translate="yes" xml:space="preserve">
          <source>This option can be used along with &lt;code&gt;--bisect-vars&lt;/code&gt;, in this case, after all the sorted commit objects, there will be the same text as if &lt;code&gt;--bisect-vars&lt;/code&gt; had been used alone.</source>
          <target state="translated">このオプションは &lt;code&gt;--bisect-vars&lt;/code&gt; と一緒に使用できます。この場合、ソートされたすべてのコミットオブジェクトの後に、 &lt;code&gt;--bisect-vars&lt;/code&gt; が単独で使用された場合と同じテキストが表示されます。</target>
        </trans-unit>
        <trans-unit id="93ff5c11faab29c493dcd0eb330b2a514a09e43b" translate="yes" xml:space="preserve">
          <source>This option can be used several times to provide several detection regexes.</source>
          <target state="translated">このオプションは、複数回使用して複数の検出正規表現を提供することができます。</target>
        </trans-unit>
        <trans-unit id="a9be17765d99ef763e2665079651c5e7b4e1ceec" translate="yes" xml:space="preserve">
          <source>This option can be used to control recursive fetching of this submodule. If this option is also present in the submodules entry in .git/config of the superproject, the setting there will override the one found in .gitmodules. Both settings can be overridden on the command line by using the &quot;--[no-]recurse-submodules&quot; option to &quot;git fetch&quot; and &quot;git pull&quot;.</source>
          <target state="translated">このオプションを使用すると、このサブモジュールの再帰的な取得を制御することができます。このオプションがスーパープロジェクトの .git/config の submodules エントリにもある場合は、その設定が .gitmodules の設定を上書きします。どちらの設定も、コマンドラインで &quot;git fetch&quot; と &quot;git pull&quot; に &quot;--[no-]recurse-submodules&quot; オプションを指定することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="4813ba4c4b012e94932c2c7e77e5d37eb750ee7d" translate="yes" xml:space="preserve">
          <source>This option can be used to control recursive fetching of this submodule. It can be overridden by using the --[no-]recurse-submodules command-line option to &quot;git fetch&quot; and &quot;git pull&quot;. This setting will override that from in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file.</source>
          <target state="translated">このオプションは、このサブモジュールの再帰的なフェッチを制御するために使用できます。「git fetch」と「git pull」に-[no-] recurse-submodulesコマンドラインオプションを使用することで、オーバーライドできます。この設定は、&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルの設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="dc1c2b92ebab0226490f8de8ccd94e6df6f7955b" translate="yes" xml:space="preserve">
          <source>This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).</source>
          <target state="translated">このオプションを使うと、コマンドラインオプションをファイルの一覧から切り離すことができます (ファイル名がコマンドラインオプションと間違われている場合に便利です)。</target>
        </trans-unit>
        <trans-unit id="792e2c6acea003d2f54070521de0f6b1fb530a29" translate="yes" xml:space="preserve">
          <source>This option can be used to specify a shell command that will be called to automatically add or modify a trailer with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションを使用して、指定された&amp;lt;token&amp;gt;でトレーラーを自動的に追加または変更するために呼び出されるシェルコマンドを指定できます。</target>
        </trans-unit>
        <trans-unit id="3870831de784b5f9a3b27254aee6ab6f7a036b72" translate="yes" xml:space="preserve">
          <source>This option can only be used for one-shot imports as &lt;code&gt;git svn&lt;/code&gt; will not be able to fetch again without metadata. Additionally, if you lose your &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; files, &lt;code&gt;git svn&lt;/code&gt; will not be able to rebuild them.</source>
          <target state="translated">&lt;code&gt;git svn&lt;/code&gt; はメタデータなしでは再度フェッチできないため、このオプションはワンショットインポートにのみ使用できます。さらに、 &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; ファイルを紛失すると、 &lt;code&gt;git svn&lt;/code&gt; はそれらを再構築できなくなります。</target>
        </trans-unit>
        <trans-unit id="7745929fdc4d071dfa2f069450065a35fb03a357" translate="yes" xml:space="preserve">
          <source>This option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not.</source>
          <target state="translated">このオプションは --dry-run と一緒に使用することができます。このオプションを使用することで、ユーザは与えられたファイルがワークツリーに既に存在するかどうかに関わらず、無視されるかどうかをチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="2cd2090b6cd931e9fb6990b800f11805da77a460" translate="yes" xml:space="preserve">
          <source>This option cannot (currently) be used unless &lt;code&gt;--batch&lt;/code&gt; or &lt;code&gt;--batch-check&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;--batch&lt;/code&gt; または &lt;code&gt;--batch-check&lt;/code&gt; を使用しない限り、このオプションは（現在）使用できません。</target>
        </trans-unit>
        <trans-unit id="0bf834f696ae0c2ea43d0e8666eab0cbfdcf28f1" translate="yes" xml:space="preserve">
          <source>This option cannot be used with --stdin.</source>
          <target state="translated">このオプションは --stdin とは併用できません。</target>
        </trans-unit>
        <trans-unit id="bae4bbd32a33e184bd257e0ab24166cfba6c0a7d" translate="yes" xml:space="preserve">
          <source>This option changes the size of the buffer that Git uses when pushing data to a remote over HTTP or HTTPS. If the data is larger than this size, libcurl, which handles the HTTP support for Git, will use chunked transfer encoding since it isn&amp;rsquo;t known ahead of time what the size of the pushed data will be.</source>
          <target state="translated">このオプションは、HTTPまたはHTTPSを介してデータをリモートにプッシュするときにGitが使用するバッファーのサイズを変更します。データがこのサイズよりも大きい場合、GitのHTTPサポートを処理するlibcurlは、プッシュされたデータのサイズが事前にわからないため、チャンク転送エンコーディングを使用します。</target>
        </trans-unit>
        <trans-unit id="882762ef26e2279478bc78603a1e7faf56dec8c3" translate="yes" xml:space="preserve">
          <source>This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to &lt;code&gt;no&lt;/code&gt; or to unconditionally recurse into all populated submodules when set to &lt;code&gt;yes&lt;/code&gt;, which is the default when this option is used without any value. Use &lt;code&gt;on-demand&lt;/code&gt; to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule&amp;rsquo;s reference to a commit that isn&amp;rsquo;t already in the local submodule clone.</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットもフェッチする必要があるかどうか、またどのような条件下でフェッチするかを制御します。これをブールオプションとして使用して、 &lt;code&gt;no&lt;/code&gt; に設定すると再帰を完全に無効にするか、 &lt;code&gt;yes&lt;/code&gt; に設定すると無条件にすべての入力済みサブモジュールに再帰します。これは、このオプションを値なしで使用した場合のデフォルトです。 &lt;code&gt;on-demand&lt;/code&gt; を使用して、スーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときに、ローカルサブモジュールクローンにまだないコミットへのサブモジュールへの再帰のみを行います。</target>
        </trans-unit>
        <trans-unit id="402f84a0bd330441925cd57436b80c9379eb3ea0" translate="yes" xml:space="preserve">
          <source>This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to &lt;code&gt;no&lt;/code&gt; or to unconditionally recurse into all populated submodules when set to &lt;code&gt;yes&lt;/code&gt;, which is the default when this option is used without any value. Use &lt;code&gt;on-demand&lt;/code&gt; to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule&amp;rsquo;s reference to a commit that isn&amp;rsquo;t already in the local submodule clone. By default, &lt;code&gt;on-demand&lt;/code&gt; is used, unless &lt;code&gt;fetch.recurseSubmodules&lt;/code&gt; is set (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットもフェッチするかどうか、およびどのような条件でフェッチするかを制御します。これはブールオプションとして使用でき、 &lt;code&gt;no&lt;/code&gt; に設定すると再帰を完全に無効にしたり、 &lt;code&gt;yes&lt;/code&gt; に設定するとすべての入力済みサブモジュールに無条件に再帰します。これはこのオプションを値なしで使用した場合のデフォルトです。スーパープロジェクトが、ローカルサブモジュールクローンにまだ存在しないコミットへのサブモジュールの参照を更新するコミットを取得する場合にのみ、 &lt;code&gt;on-demand&lt;/code&gt; を使用して、入力されたサブモジュールに再帰します。デフォルトでは、 &lt;code&gt;fetch.recurseSubmodules&lt;/code&gt; が設定されていない限り、 &lt;code&gt;on-demand&lt;/code&gt; が使用されます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="69bffdffaf64305a520ea61fd7a4110a4c5bf981" translate="yes" xml:space="preserve">
          <source>This option controls if new commits of all populated submodules should be fetched and updated, too (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたすべてのサブモジュールの新しいコミットもフェッチして更新する必要があるかどうかを制御します（&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8666b4e7aa19effada757acd8dc6a366796aecc5" translate="yes" xml:space="preserve">
          <source>This option controls if new commits of populated submodules should be fetched, and if the working trees of active submodules should be updated, too (see &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;, &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットをフェッチするかどうか、およびアクティブなサブモジュールの作業ツリーも更新するかどうかを制御します（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;、および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="99e48667fde8ec2632838629a22c3bc7308b3012" translate="yes" xml:space="preserve">
          <source>This option controls whether &lt;code&gt;git fetch&lt;/code&gt; (and the underlying fetch in &lt;code&gt;git pull&lt;/code&gt;) will recursively fetch into populated submodules. This option can be set either to a boolean value or to &lt;code&gt;on-demand&lt;/code&gt;. Setting it to a boolean changes the behavior of fetch and pull to recurse unconditionally into submodules when set to true or to not recurse at all when set to false. When set to &lt;code&gt;on-demand&lt;/code&gt;, fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule&amp;rsquo;s reference. Defaults to &lt;code&gt;on-demand&lt;/code&gt;, or to the value of &lt;code&gt;submodule.recurse&lt;/code&gt; if set.</source>
          <target state="translated">このオプションは、 &lt;code&gt;git fetch&lt;/code&gt; （および &lt;code&gt;git pull&lt;/code&gt; の基になるフェッチ）が入力されたサブモジュールに再帰的にフェッチするかどうかを制御します。このオプションは、ブール値または &lt;code&gt;on-demand&lt;/code&gt; いずれかに設定できます。ブール値に設定すると、フェッチとプルの動作が変更され、trueに設定されている場合は無条件にサブモジュールに再帰し、falseに設定されている場合はまったく再帰しません。 &lt;code&gt;on-demand&lt;/code&gt; 設定されている場合、フェッチとプルは、スーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときにのみ、入力されたサブモジュールに再帰します。デフォルトは &lt;code&gt;on-demand&lt;/code&gt; 、または設定されている場合は &lt;code&gt;submodule.recurse&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="30828ff428cc76245c5c17e5cbd61f4d3413d1c5" translate="yes" xml:space="preserve">
          <source>This option determines how the commit message will be cleaned up before being passed on to the commit machinery. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for more details. In particular, if the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is given a value of &lt;code&gt;scissors&lt;/code&gt;, scissors will be appended to &lt;code&gt;MERGE_MSG&lt;/code&gt; before being passed on in the case of a conflict.</source>
          <target state="translated">このオプションは、コミットメッセージがコミット機構に渡される前にクリーンアップされる方法を決定します。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。特に、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に &lt;code&gt;scissors&lt;/code&gt; の値が指定されている場合、競合が発生した場合に渡される前に &lt;code&gt;MERGE_MSG&lt;/code&gt; にscissorsが追加されます。</target>
        </trans-unit>
        <trans-unit id="286a93d0042817a6190102b1bfcb5df866579bac" translate="yes" xml:space="preserve">
          <source>This option determines how the merge message will be cleaned up before committing. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for more details. In addition, if the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is given a value of &lt;code&gt;scissors&lt;/code&gt;, scissors will be appended to &lt;code&gt;MERGE_MSG&lt;/code&gt; before being passed on to the commit machinery in the case of a merge conflict.</source>
          <target state="translated">このオプションは、コミットメッセージをコミットする前にクリーンアップする方法を決定します。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。さらに、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に &lt;code&gt;scissors&lt;/code&gt; の値が指定されている場合、マージの競合が発生した場合、はさみが &lt;code&gt;MERGE_MSG&lt;/code&gt; に追加されてからコミット機構に渡されます。</target>
        </trans-unit>
        <trans-unit id="4d1960d5d8472d2a194e5ec10acd8959326f748a" translate="yes" xml:space="preserve">
          <source>This option determines how the supplied commit message should be cleaned up before committing. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; can be &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt;, &lt;code&gt;verbatim&lt;/code&gt;, &lt;code&gt;scissors&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">このオプションは、提供されるコミットメッセージをコミットする前にクリーンアップする方法を決定します。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; することができ &lt;code&gt;strip&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; 、 &lt;code&gt;verbatim&lt;/code&gt; 、 &lt;code&gt;scissors&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5dab8a93409f72b36d8b46ab64625d688725721" translate="yes" xml:space="preserve">
          <source>This option does not (currently) work correctly when an object in the index is specified (e.g. &lt;code&gt;:link&lt;/code&gt; instead of &lt;code&gt;HEAD:link&lt;/code&gt;) rather than one in the tree.</source>
          <target state="translated">インデックス内のオブジェクトが（例えば、指定された場合、このオプションは正しくありません（現在は）作業を行います &lt;code&gt;:link&lt;/code&gt; の代わり &lt;code&gt;HEAD:link&lt;/code&gt; ではなく、ツリー内の1。）</target>
        </trans-unit>
        <trans-unit id="4255d9341f980babd777e06e825f8c27e78f42e4" translate="yes" xml:space="preserve">
          <source>This option enables a check that verifies if the tip of the remote-tracking ref is reachable from one of the &quot;reflog&quot; entries of the local branch based in it for a rewrite. The check ensures that any updates from the remote have been incorporated locally by rejecting the forced update if that is not the case.</source>
          <target state="translated">このオプションは、リモートトラッキング ref の先端が、それに基づくローカルブランチの &quot;reflog&quot; エントリのいずれかから書き換えのために到達可能であるかどうかを検証するチェックを有効にします。このチェックは、そうでない場合は強制更新を拒否することで、リモートからの更新がローカルに組み込まれていることを保証します。</target>
        </trans-unit>
        <trans-unit id="d9ea124fbd7a15594b4c6836d821b0c2d1f565c3" translate="yes" xml:space="preserve">
          <source>This option forces conflicting hunks to be auto-resolved cleanly by favoring &lt;code&gt;our&lt;/code&gt; version. Changes from the other tree that do not conflict with our side are reflected in the merge result. For a binary file, the entire contents are taken from our side.</source>
          <target state="translated">このオプションは &lt;code&gt;our&lt;/code&gt; バージョンを優先することで、競合するハンクを強制的に完全に自動解決します。私たちの側と競合しない他のツリーからの変更は、マージ結果に反映されます。バイナリファイルの場合、コンテンツ全体が私たちの側から取得されます。</target>
        </trans-unit>
        <trans-unit id="03e43ead906b5a3ebd0febb15138c0f0fef70180" translate="yes" xml:space="preserve">
          <source>This option identifies the file status with the following tags (followed by a space) at the start of each line:</source>
          <target state="translated">このオプションは、各行の先頭に以下のタグ(後にスペース)を付けてファイルの状態を識別します。</target>
        </trans-unit>
        <trans-unit id="11f1817b2bcb9580d82cb7eff477a970ee3352b6" translate="yes" xml:space="preserve">
          <source>This option is NOT recommended as it makes it difficult to track down old references to SVN revision numbers in existing documentation, bug reports, and archives. If you plan to eventually migrate from SVN to Git and are certain about dropping SVN history, consider &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; instead. filter-repo also allows reformatting of metadata for ease-of-reading and rewriting authorship info for non-&quot;svn.authorsFile&quot; users.</source>
          <target state="translated">このオプションは、既存のドキュメント、バグレポート、およびアーカイブでSVNリビジョン番号への古い参照を追跡することが困難になるため、お勧めしません。最終的にSVNからGitに移行する予定で、SVN履歴の削除が確実な場合は、代わりに&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repoを&lt;/a&gt;検討してください。filter-repoでは、メタデータを再フォーマットして、「svn.authorsFile」以外のユーザーの作成者情報を読みやすくしたり書き換えたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="78790ec840bc0471b6e620b0edc9dccd8cb32215" translate="yes" xml:space="preserve">
          <source>This option is a more advanced form of &lt;code&gt;subtree&lt;/code&gt; strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.</source>
          <target state="translated">このオプションは、 &lt;code&gt;subtree&lt;/code&gt; 戦略のより高度な形式です。この戦略では、マージ時に2つのツリーをシフトして互いに一致させる必要がある方法を推測します。代わりに、2つのツリーの形状を一致させるために、指定されたパスにプレフィックスが付けられます（または最初から削除されます）。</target>
        </trans-unit>
        <trans-unit id="7e1a0662099548eacf19f027d973ae52cc900bb4" translate="yes" xml:space="preserve">
          <source>This option is deprecated in favour of &lt;code&gt;git stash push&lt;/code&gt;. It differs from &quot;stash push&quot; in that it cannot take pathspec. Instead, all non-option arguments are concatenated to form the stash message.</source>
          <target state="translated">このオプションは廃止され、 &lt;code&gt;git stash push&lt;/code&gt; が採用されました。パススペックをとることができないという点で「スタッシュプッシュ」とは異なります。代わりに、オプション以外のすべての引数が連結されて、隠しメッセージが形成されます。</target>
        </trans-unit>
        <trans-unit id="4caf0764823caa06aa3cb192d447e797c84f9905" translate="yes" xml:space="preserve">
          <source>This option is deprecated in favour of &lt;code&gt;git stash push&lt;/code&gt;. It differs from &quot;stash push&quot; in that it cannot take pathspecs. Instead, all non-option arguments are concatenated to form the stash message.</source>
          <target state="translated">このオプションは &lt;code&gt;git stash push&lt;/code&gt; のために廃止されました。パススペックを取得できないという点で「スタッシュプッシュ」とは異なります。代わりに、すべての非オプション引数が連結されてstashメッセージが形成されます。</target>
        </trans-unit>
        <trans-unit id="c02fef4ae69460732c7c3bd405bb6c17f43ad119" translate="yes" xml:space="preserve">
          <source>This option is equivalent to the &amp;lt;repository&amp;gt; argument. If both are specified, the command-line argument takes precedence.</source>
          <target state="translated">このオプションは、&amp;lt;repository&amp;gt;引数と同等です。両方を指定した場合は、コマンドライン引数が優先されます。</target>
        </trans-unit>
        <trans-unit id="b7fdcf9707bc99b530bc435f0d474fdd1738b42d" translate="yes" xml:space="preserve">
          <source>This option is implicitly supplied if any other list-like option such as &lt;code&gt;--contains&lt;/code&gt; is provided. See the documentation for each of those options for details.</source>
          <target state="translated">&lt;code&gt;--contains&lt;/code&gt; などの他のリスト形式のオプションが提供されている場合、このオプションは暗黙的に提供されます。詳細については、これらの各オプションのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="710c94d6943c052c3ce9d72b355d1824bacce0cd" translate="yes" xml:space="preserve">
          <source>This option is only applicable in non-verbose mode.</source>
          <target state="translated">このオプションは、非言語モードでのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="4cc49fd28601407189cb758fe5a41d5aaf8777ac" translate="yes" xml:space="preserve">
          <source>This option is only applicable when listing tags without annotation lines.</source>
          <target state="translated">このオプションは、注釈行のないタグをリストアップする場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="ac28aa5e8f93911465d1aaa74ae4db50de2f286b" translate="yes" xml:space="preserve">
          <source>This option is only relevant if we are tracking branches (using one of the repository layout options --trunk, --tags, --branches, --stdlayout). For each tracked branch, try to find out where its revision was copied from, and set a suitable parent in the first Git commit for the branch. This is especially helpful when we&amp;rsquo;re tracking a directory that has been moved around within the repository. If this feature is disabled, the branches created by &lt;code&gt;git svn&lt;/code&gt; will all be linear and not share any history, meaning that there will be no information on where branches were branched off or merged. However, following long/convoluted histories can take a long time, so disabling this feature may speed up the cloning process. This feature is enabled by default, use --no-follow-parent to disable it.</source>
          <target state="translated">このオプションは、ブランチを追跡している場合にのみ関連します（リポジトリレイアウトオプション--trunk、-tags、-branches、-stdlayoutのいずれかを使用）。追跡されたブランチごとに、そのリビジョンのコピー元を見つけて、ブランチの最初のGitコミットに適切な親を設定します。これは、リポジトリ内で移動されたディレクトリを追跡する場合に特に役立ちます。この機能が無効になっている場合、 &lt;code&gt;git svn&lt;/code&gt; によって作成されたブランチはすべて線形であり、履歴を共有しません。つまり、ブランチが分岐またはマージされた場所に関する情報はありません。ただし、長い/複雑な履歴をたどると時間がかかる場合があるため、この機能を無効にすると、クローン作成プロセスが高速化する場合があります。この機能はデフォルトで有効になっています。無効にするには--no-follow-parentを使用します。</target>
        </trans-unit>
        <trans-unit id="e12fdc170000781ad1c58dbca132db57e3472f94" translate="yes" xml:space="preserve">
          <source>This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.</source>
          <target state="translated">このオプションは、Git の Mac OS の実装でのみ使用されます。core.precomposeUnicode=true の場合、Git は Mac OS で行われたファイル名の unicode 分解を元に戻します。これは、Mac OS と Linux や Windows の間でリポジトリを共有するときに便利です。(Git for Windows 1.7.10 以降、もしくは cygwin 1.7 以下の Git が必要です)。falseにすると、ファイル名はGitによって完全に透過的に処理され、古いバージョンのGitとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="f6656985205e20f496a0b3074744f80ac096af4d" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;apply&lt;/code&gt; 、 &lt;code&gt;branch&lt;/code&gt; 、 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;show&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="ec6b30f54355307a9689dd1f0d561ef40fa56b3b" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;store&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;apply&lt;/code&gt; 、 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;save&lt;/code&gt; 、 &lt;code&gt;store&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="ca1fe023113c04188594b141d1e29c7346f8a146" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;pop&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;pop&lt;/code&gt; および &lt;code&gt;apply&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="14a31933c42436b9e91daec147e769ddb8e06d57" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;push&lt;/code&gt; コマンドと &lt;code&gt;save&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="1938ed399d7f045d62945a278113dd2db5e4506d" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;push&lt;/code&gt; command.</source>
          <target state="translated">このオプションは、 &lt;code&gt;push&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="488a5b3855b8742f267f0b39339ad03e677bc10e" translate="yes" xml:space="preserve">
          <source>This option is only valid for add and update commands. Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">このオプションは、追加および更新コマンドに対してのみ有効です。q が指定されていない限り、標準エラーストリームが端末に接続されている場合、デフォルトで進行状況が標準エラーストリームに報告される。このフラグは、標準エラーストリームが端末に接続されていない場合でも、進行状況を強制的に報告する。</target>
        </trans-unit>
        <trans-unit id="564be2665790d0ee7a744865d472382d1cf20497" translate="yes" xml:space="preserve">
          <source>This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; command.</source>
          <target state="translated">このオプションは、追加および更新コマンドに対してのみ有効です。これらのコマンドは、リモートリポジトリのクローンを作成する必要がある場合があります。この場合、このオプションは&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;コマンドに渡されます。</target>
        </trans-unit>
        <trans-unit id="1175e1719609394666bffaa81ec16b8052e4a6b8" translate="yes" xml:space="preserve">
          <source>This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule.</source>
          <target state="translated">このオプションは、add、deinit、update コマンドでのみ有効です。add を実行している場合は、無視されているサブモジュールのパスを追加できるようにします。deinit を実行している場合は、サブモジュールの作業ツリーがローカルの変更を含んでいても削除されます。update を実行している場合 (チェックアウト手続きでのみ有効です)、別のコミットに切り替える際にはサブモジュール内のローカルな変更を捨てます。</target>
        </trans-unit>
        <trans-unit id="2de8d442aa39a274aaa4b758d62aa7d0adb622e3" translate="yes" xml:space="preserve">
          <source>This option is only valid for foreach, update, status and sync commands. Traverse submodules recursively. The operation is performed not only in the submodules of the current repo, but also in any nested submodules inside those submodules (and so on).</source>
          <target state="translated">このオプションは、foreach、update、status、syncコマンドに対してのみ有効です。サブモジュールを再帰的にトラバースします。この操作は現在のレポのサブモジュールだけでなく、それらのサブモジュールの中にあるネストしたサブモジュールも含めて実行されます(など)。</target>
        </trans-unit>
        <trans-unit id="d01c54f91ad08eb6d9511d7549b500d6b89b1500" translate="yes" xml:space="preserve">
          <source>This option is only valid for status and summary commands. These commands typically use the commit found in the submodule HEAD, but with this option, the commit stored in the index is used instead.</source>
          <target state="translated">このオプションは、ステータスコマンドとサマリーコマンドに対してのみ有効です。これらのコマンドは通常、サブモジュールの HEAD にあるコミットを使用しますが、 このオプションを指定すると、代わりにインデックスに格納されているコミットが使用されます。</target>
        </trans-unit>
        <trans-unit id="7ba21174d5319ba108a98df185e2c79d000e199b" translate="yes" xml:space="preserve">
          <source>This option is only valid for the add command. It sets the submodule&amp;rsquo;s name to the given string instead of defaulting to its path. The name must be valid as a directory name and may not end with a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">このオプションは、addコマンドに対してのみ有効です。デフォルトのパスではなく、サブモジュールの名前を指定された文字列に設定します。名前はディレクトリ名として有効である必要があり、 &lt;code&gt;/&lt;/code&gt; で終わらないでください。</target>
        </trans-unit>
        <trans-unit id="87ff71824f0ae07bd73763f995cf49d0ad4b94cd" translate="yes" xml:space="preserve">
          <source>This option is only valid for the deinit command. Unregister all submodules in the working tree.</source>
          <target state="translated">このオプションはdeinitコマンドでのみ有効です。作業ツリーのすべてのサブモジュールの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="f24783ef5194da88d7aca04af04dd4876a0ce3ed" translate="yes" xml:space="preserve">
          <source>This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules.</source>
          <target state="translated">このオプションは summary コマンドでのみ有効です。サマリーのサイズ (合計で表示されるコミット数)を制限します。0を指定するとサマリーは無効になります。負の数は無制限(デフォルト)を意味します。この制限は変更されたサブモジュールにのみ適用されます。追加/削除/タイプ変更されたサブモジュールのサイズは常に1に制限されます。</target>
        </trans-unit>
        <trans-unit id="ba7d2b303205764476dea6127f5143ab027381fd" translate="yes" xml:space="preserve">
          <source>This option is only valid for the summary command. This command compares the commit in the index with that in the submodule HEAD when this option is used.</source>
          <target state="translated">このオプションは summary コマンドでのみ有効です。このオプションを使用すると、このコマンドはインデックス内のコミットとサブモジュールの HEAD 内のコミットを比較します。</target>
        </trans-unit>
        <trans-unit id="0329e613a2d579c43cf813e4dcb872eed327d20c" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Checkout the commit recorded in the superproject on a detached HEAD in the submodule. This is the default behavior, the main use of this option is to override &lt;code&gt;submodule.$name.update&lt;/code&gt; when set to a value other than &lt;code&gt;checkout&lt;/code&gt;. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is either not explicitly set or set to &lt;code&gt;checkout&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパーモジュールに記録されたコミットを、サブモジュールの分離されたHEADでチェックアウトします。これはデフォルトの動作です &lt;code&gt;submodule.$name.update&lt;/code&gt; このオプションの主な用途は、 &lt;code&gt;checkout&lt;/code&gt; 以外の値に設定されている場合にsubmodule。$ name.updateをオーバーライドすることです。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が明示的に設定されていないか、または &lt;code&gt;checkout&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="7988d8bd0ba82c9f133c5f7cc525c2236228f253" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Clone new submodules in parallel with as many jobs. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。新しいサブモジュールを同じ数のジョブと並行して複製します。デフォルトは &lt;code&gt;submodule.fetchJobs&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="d378f847e736854044b7df06d860154da6a30cd4" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Clone only one branch during update: HEAD or one specified by --branch.</source>
          <target state="translated">このオプションは update コマンドでのみ有効です。更新時には、HEADまたは--branchで指定されたブランチを1つだけクローンします。</target>
        </trans-unit>
        <trans-unit id="de5e49243a4037b1b14e7038956130dc87de6d4f" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Don&amp;rsquo;t fetch new objects from the remote site.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。リモートサイトから新しいオブジェクトをフェッチしないでください。</target>
        </trans-unit>
        <trans-unit id="f13e740e91a73f0a2574eefa11fc263894a39d8c" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Initialize all submodules for which &quot;git submodule init&quot; has not been called so far before updating.</source>
          <target state="translated">このオプションは update コマンドでのみ有効です。これまでのところ &quot;git submodule init&quot; が呼ばれていないすべてのサブモジュールを、更新前に初期化します。</target>
        </trans-unit>
        <trans-unit id="78bb9a5b0867074719f5c17324b183ac216eed4e" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Instead of using the superproject&amp;rsquo;s recorded SHA-1 to update the submodule, use the status of the submodule&amp;rsquo;s remote-tracking branch. The remote used is branch&amp;rsquo;s remote (&lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt;), defaulting to &lt;code&gt;origin&lt;/code&gt;. The remote branch used defaults to &lt;code&gt;master&lt;/code&gt;, but the branch name may be overridden by setting the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; option in either &lt;code&gt;.gitmodules&lt;/code&gt; or &lt;code&gt;.git/config&lt;/code&gt; (with &lt;code&gt;.git/config&lt;/code&gt; taking precedence).</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパープロジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに、サブモジュールのリモート追跡ブランチのステータスを使用します。使用されるリモートはブランチのリモート（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; ）で、デフォルトは &lt;code&gt;origin&lt;/code&gt; です。リモートブランチはデフォルトで &lt;code&gt;master&lt;/code&gt; を使用しましたが、ブランチ名は、 &lt;code&gt;.gitmodules&lt;/code&gt; または &lt;code&gt;.git/config&lt;/code&gt; （ &lt;code&gt;.git/config&lt;/code&gt; を優先）のいずれかで &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; オプションを設定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="71febe80653ad4c9e80be61d4ea3dbe9011e0741" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Instead of using the superproject&amp;rsquo;s recorded SHA-1 to update the submodule, use the status of the submodule&amp;rsquo;s remote-tracking branch. The remote used is branch&amp;rsquo;s remote (&lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt;), defaulting to &lt;code&gt;origin&lt;/code&gt;. The remote branch used defaults to the remote &lt;code&gt;HEAD&lt;/code&gt;, but the branch name may be overridden by setting the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; option in either &lt;code&gt;.gitmodules&lt;/code&gt; or &lt;code&gt;.git/config&lt;/code&gt; (with &lt;code&gt;.git/config&lt;/code&gt; taking precedence).</source>
          <target state="translated">このオプションは、updateコマンドにのみ有効です。スーパープロジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに、サブモジュールのリモート追跡ブランチのステータスを使用します。使用されるリモートはブランチのリモート（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; ）であり、デフォルトは &lt;code&gt;origin&lt;/code&gt; です。使用されるリモートブランチのデフォルトはリモート &lt;code&gt;HEAD&lt;/code&gt; ですが、ブランチ名は、 &lt;code&gt;.gitmodules&lt;/code&gt; または &lt;code&gt;.git/config&lt;/code&gt; のいずれかで &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; オプションを設定することでオーバーライドできます（ &lt;code&gt;.git/config&lt;/code&gt; が優先されます）。</target>
        </trans-unit>
        <trans-unit id="c3d36d21960733622c3c4d0c9b1d02dde186ab4d" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Merge the commit recorded in the superproject into the current branch of the submodule. If this option is given, the submodule&amp;rsquo;s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve the resulting conflicts within the submodule with the usual conflict resolution tools. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is set to &lt;code&gt;merge&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパープロジェクトに記録されたコミットをサブモジュールの現在のブランチにマージします。このオプションを指定すると、サブモジュールのHEADは切り離されません。マージの失敗がこのプロセスを妨げる場合、通常の競合解決ツールを使用して、サブモジュール内で発生する競合を解決する必要があります。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が &lt;code&gt;merge&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="24320b0a3d3cc55ac6e67c5111e4d5b2024f7768" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Rebase the current branch onto the commit recorded in the superproject. If this option is given, the submodule&amp;rsquo;s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve these failures with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is set to &lt;code&gt;rebase&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパープロジェクトに記録されたコミットに現在のブランチをリベースします。このオプションを指定すると、サブモジュールのHEADは切り離されません。マージの失敗がこのプロセスを妨げる場合、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]で&lt;/a&gt;これらの失敗を解決する必要があります。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が &lt;code&gt;rebase&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="7010a654e778ac0c1da27a5e658bfb8f3af2d2b7" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. The initial clone of a submodule will use the recommended &lt;code&gt;submodule.&amp;lt;name&amp;gt;.shallow&lt;/code&gt; as provided by the &lt;code&gt;.gitmodules&lt;/code&gt; file by default. To ignore the suggestions use &lt;code&gt;--no-recommend-shallow&lt;/code&gt;.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。サブモジュールの最初のクローンは、デフォルトで &lt;code&gt;.gitmodules&lt;/code&gt; ファイルによって提供される推奨 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.shallow&lt;/code&gt; を使用します。提案を無視するには、 &lt;code&gt;--no-recommend-shallow&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e6d7b3753dd95003bf8a5d9061fa7c1fb4ce2aaa" translate="yes" xml:space="preserve">
          <source>This option is only valid when &quot;--rebase&quot; is used.</source>
          <target state="translated">このオプションは、&quot;--rebase &quot;を使用した場合のみ有効である。</target>
        </trans-unit>
        <trans-unit id="98847da95477508a8a5d1e566e92d9a686be8a10" translate="yes" xml:space="preserve">
          <source>This option is particularly useful in avoiding false positives when a merged branch contained broken or non-buildable commits, but the merge itself was OK.</source>
          <target state="translated">このオプションは、マージされたブランチに壊れたコミットやビルド不可能なコミットが含まれていても、マージ自体は問題なかった場合に誤検出を避けるために特に有用です。</target>
        </trans-unit>
        <trans-unit id="f287cb1cbdf50b2a99b97c922a7a8e625bb0e374" translate="yes" xml:space="preserve">
          <source>This option is passed through to &lt;code&gt;git pack-objects&lt;/code&gt;.</source>
          <target state="translated">このオプションは &lt;code&gt;git pack-objects&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="4fbc055bad10c535a2fe42cbab527b95ac43fb4e" translate="yes" xml:space="preserve">
          <source>This option is primarily to help users who are used to older versions of Git, whose &quot;git add &amp;lt;pathspec&amp;gt;&amp;hellip;​&quot; was a synonym for &quot;git add --no-all &amp;lt;pathspec&amp;gt;&amp;hellip;​&quot;, i.e. ignored removed files.</source>
          <target state="translated">このオプションは主に、「git add &amp;lt;pathspec&amp;gt;&amp;hellip;」が「git add --no-all &amp;lt;pathspec&amp;gt;&amp;hellip;」の同義語である古いバージョンのGitに慣れているユーザー、つまり削除されたファイルを無視するユーザーを支援するためのものです。</target>
        </trans-unit>
        <trans-unit id="b78fb9017b343dcaa9f7e76e34c0b6aead88f71f" translate="yes" xml:space="preserve">
          <source>This option is similar to &lt;code&gt;--topo-order&lt;/code&gt; in the sense that no parent comes before all of its children, but otherwise commits are ordered according to their commit date.</source>
          <target state="translated">このオプションは、すべての子の前に親がないという意味では &lt;code&gt;--topo-order&lt;/code&gt; に似ていますが、それ以外の場合、コミットはコミット日に従って順序付けられます。</target>
        </trans-unit>
        <trans-unit id="45355afb761a7570eab836899016e010dbbaff37" translate="yes" xml:space="preserve">
          <source>This option is used internally to temporarily provide a non-negative default value for the --recurse-submodules option. All other methods of configuring fetch&amp;rsquo;s submodule recursion (such as settings in &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; and &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) override this option, as does specifying --[no-]recurse-submodules directly.</source>
          <target state="translated">このオプションは、-recurse-submodulesオプションに負でないデフォルト値を一時的に提供するために内部的に使用されます。-[no-] recurse-submodulesを直接指定するのと同様に、フェッチのサブモジュール再帰を構成する他のすべての方法（&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;や&lt;a href=&quot;git-config&quot;&gt;git-config [1]の設定など&lt;/a&gt;）は、このオプションをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="37e6c888c3b366c4018908c683d3076036665dbd" translate="yes" xml:space="preserve">
          <source>This option is useful in the case where one is developing a feature on top of an upstream branch. While the feature is being worked on, the upstream branch may advance and it may not be the best idea to keep rebasing on top of the upstream but to keep the base commit as-is.</source>
          <target state="translated">このオプションは、上流ブランチの上で機能を開発している場合に便利です。機能を開発している間は、上流のブランチが進むかもしれないので、上流のブランチの上でリベースを続けるのは最良のアイデアではないかもしれませんが、 ベースのコミットはそのままにしておきましょう。</target>
        </trans-unit>
        <trans-unit id="df85f593fd6f7620dd8216482ba39599038d6eaa" translate="yes" xml:space="preserve">
          <source>This option is valid for add and update commands. Create a &lt;code&gt;shallow&lt;/code&gt; clone with a history truncated to the specified number of revisions. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;</source>
          <target state="translated">このオプションは、追加および更新コマンドに有効です。指定したリビジョン数に切り捨てられた履歴を持つ &lt;code&gt;shallow&lt;/code&gt; クローンを作成します。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="ebd5b9556122446be4baef760f1327190ef9a1e0" translate="yes" xml:space="preserve">
          <source>This option makes it possible to choose what action will be performed when there is already at least one trailer with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">このオプションを使用すると、メッセージに同じ&amp;lt;token&amp;gt;を持つトレーラがすでに少なくとも1つある場合に実行するアクションを選択できます。</target>
        </trans-unit>
        <trans-unit id="ccc070d377579e85f01a8bc02ef61c868f5331ee" translate="yes" xml:space="preserve">
          <source>This option makes it possible to choose what action will be performed when there is not yet any trailer with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">このオプションを使用すると、メッセージ内に同じ&amp;lt;token&amp;gt;を持つトレーラーがまだない場合に実行するアクションを選択できます。</target>
        </trans-unit>
        <trans-unit id="f87ac9b403a45c29acabaf374d53994925318884" translate="yes" xml:space="preserve">
          <source>This option may be given up to three times, and specifies labels to be used in place of the corresponding file names in conflict reports. That is, &lt;code&gt;git merge-file -L x -L y -L z a b c&lt;/code&gt; generates output that looks like it came from files x, y and z instead of from files a, b and c.</source>
          <target state="translated">このオプションは3回まで指定でき、競合レポートで対応するファイル名の代わりに使用するラベルを指定します。つまり、 &lt;code&gt;git merge-file -L x -L y -L z a b c&lt;/code&gt; は、ファイルa、b、cではなく、ファイルx、y、zからの出力を生成します。</target>
        </trans-unit>
        <trans-unit id="e631233708c2bfee4790b72e1f69b49f86a6c1ad" translate="yes" xml:space="preserve">
          <source>This option may be specified more than once.</source>
          <target state="translated">このオプションは複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="ad4bbf67e7b293924d5786bf652c9c00512dbaee" translate="yes" xml:space="preserve">
          <source>This option may be specified more than once; if so, Git will report commits reachable from any of the given commits.</source>
          <target state="translated">このオプションは複数回指定することができます。その場合、Git は指定したコミットのいずれかから到達可能なコミットを報告します。</target>
        </trans-unit>
        <trans-unit id="02516672facfbf5a7b264eba6cd92c5455d92d79" translate="yes" xml:space="preserve">
          <source>This option may be specified multiple times.</source>
          <target state="translated">このオプションは複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="b397b665066a62a5850aaf1e8487dea9e6d48e99" translate="yes" xml:space="preserve">
          <source>This option may be useful if you have CVS revision numbers stored in commit messages, bug-tracking systems, email archives, and the like.</source>
          <target state="translated">このオプションは、コミットメッセージやバグ追跡システム、電子メールアーカイブなどに CVS リビジョン番号が保存されている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5f0fddd7193d3e6d239ce8fc4bc7fc077dbf4105" translate="yes" xml:space="preserve">
          <source>This option may be useful when the test you would perform in each step does not require a checked out tree.</source>
          <target state="translated">このオプションは、各ステップで実行するテストがチェックアウトされたツリーを必要としない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="17ca02a4d5f28c7e8971b8d1a382a0b6bcfa0d17" translate="yes" xml:space="preserve">
          <source>This option overrides this restriction if the current value of the remote ref is the expected value. &quot;git push&quot; fails otherwise.</source>
          <target state="translated">このオプションは、リモート ref の現在の値が期待値である場合にこの制限を上書きします。&quot;git push&quot; は失敗します。</target>
        </trans-unit>
        <trans-unit id="8d166b9e59f19f7598d41e509f594cbcbd0ac7f1" translate="yes" xml:space="preserve">
          <source>This option provides an additional limit on top of &lt;code&gt;--window&lt;/code&gt;; the window size will dynamically scale down so as to not take up more than &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. &lt;code&gt;--window-memory=0&lt;/code&gt; makes memory usage unlimited. The default is taken from the &lt;code&gt;pack.windowMemory&lt;/code&gt; configuration variable.</source>
          <target state="translated">このオプションは、-- &lt;code&gt;--window&lt;/code&gt; 加えて追加の制限を提供します。ウィンドウサイズはメモリ内で &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在するリポジトリで、大きなウィンドウでメモリ不足にならないようにする一方で、小さなオブジェクトで大きなウィンドウを利用できる場合に役立ちます。サイズの末尾には「k」、「m」、または「g」を付けることができます。 &lt;code&gt;--window-memory=0&lt;/code&gt; は、メモリ使用量を無制限にします。デフォルトは、 &lt;code&gt;pack.windowMemory&lt;/code&gt; 構成変数から取得されます。</target>
        </trans-unit>
        <trans-unit id="b37ac455915a6998f49ecb85f682ef29dfba0c63" translate="yes" xml:space="preserve">
          <source>This option provides an additional limit on top of &lt;code&gt;--window&lt;/code&gt;; the window size will dynamically scale down so as to not take up more than &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. &lt;code&gt;--window-memory=0&lt;/code&gt; makes memory usage unlimited. The default is taken from the &lt;code&gt;pack.windowMemory&lt;/code&gt; configuration variable. Note that the actual memory usage will be the limit multiplied by the number of threads used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、-- &lt;code&gt;--window&lt;/code&gt; 加えて追加の制限を提供します。ウィンドウサイズはメモリ内で &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在するリポジトリで、大きなウィンドウでメモリ不足にならないようにする一方で、小さなオブジェクトで大きなウィンドウを利用できる場合に役立ちます。サイズの末尾には「k」、「m」、または「g」を付けることができます。 &lt;code&gt;--window-memory=0&lt;/code&gt; は、メモリ使用量を無制限にします。デフォルトは、 &lt;code&gt;pack.windowMemory&lt;/code&gt; 構成変数から取得されます。実際のメモリ使用量は、制限に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]が&lt;/a&gt;使用するスレッド数を掛けたものになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="16a6b7273f3cccefcfa42e33a667c568aaee0875" translate="yes" xml:space="preserve">
          <source>This option sets how the tag message is cleaned up. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; can be one of &lt;code&gt;verbatim&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt; and &lt;code&gt;strip&lt;/code&gt;. The &lt;code&gt;strip&lt;/code&gt; mode is default. The &lt;code&gt;verbatim&lt;/code&gt; mode does not change message at all, &lt;code&gt;whitespace&lt;/code&gt; removes just leading/trailing whitespace lines and &lt;code&gt;strip&lt;/code&gt; removes both whitespace and commentary.</source>
          <target state="translated">このオプションは、タグメッセージのクリーンアップ方法を設定します。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; のいずれかを指定でき &lt;code&gt;verbatim&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; と &lt;code&gt;strip&lt;/code&gt; 。 &lt;code&gt;strip&lt;/code&gt; モードがデフォルトです。 &lt;code&gt;verbatim&lt;/code&gt; モードでは、すべてのメッセージを変更しない &lt;code&gt;whitespace&lt;/code&gt; だけ/大手行と空白末尾削除し &lt;code&gt;strip&lt;/code&gt; 空白や解説の両方を削除します。</target>
        </trans-unit>
        <trans-unit id="1c04622cab5eac3fe5e20d1c189be97d2000ad23" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.ifexists&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.ifexists&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="de59f6641e33166f78c75c60b985eacdf1d2a0ea" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.ifmissing&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.ifmissing&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのそのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="6b156d8c8a67e1eaa9c71b8c4e454e308c17c450" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.where&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.where&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのそのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="7df9ff293572a5c1527bce59783d9544419daa5b" translate="yes" xml:space="preserve">
          <source>This option tells where a new trailer will be added.</source>
          <target state="translated">このオプションは、新しいトレーラーが追加される場所を指定します。</target>
        </trans-unit>
        <trans-unit id="b36c69b0196d300061790058cdc0665affb9915e" translate="yes" xml:space="preserve">
          <source>This option tells which characters are recognized as trailer separators. By default only &lt;code&gt;:&lt;/code&gt; is recognized as a trailer separator, except that &lt;code&gt;=&lt;/code&gt; is always accepted on the command line for compatibility with other git commands.</source>
          <target state="translated">このオプションは、トレーラセパレータとして認識される文字を示します。デフォルトでは、 &lt;code&gt;:&lt;/code&gt; のみがトレーラーセパレーターとして認識されますが、他のgitコマンドとの互換性のために &lt;code&gt;=&lt;/code&gt; はコマンドラインで常に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="d89b4c86a97ff8d1caa3cc84d59173003c0040dc" translate="yes" xml:space="preserve">
          <source>This option will cause fast-export to issue a &quot;deleteall&quot; directive for each commit followed by a full list of all files in the commit (as opposed to just listing the files which are different from the commit&amp;rsquo;s first parent).</source>
          <target state="translated">このオプションを使用すると、fast-exportは各コミットに対して「deleteall」ディレクティブを発行し、その後にコミット内のすべてのファイルの完全なリストが続きます（コミットの最初の親とは異なるファイルをリストするだけではありません）。</target>
        </trans-unit>
        <trans-unit id="f143abcfc92e5721db51d7183ec9951b417133b6" translate="yes" xml:space="preserve">
          <source>This option will cause git-svn to attempt to automatically populate the svn:mergeinfo property in the SVN repository when possible. Currently, this can only be done when dcommitting non-fast-forward merges where all parents but the first have already been pushed into SVN.</source>
          <target state="translated">このオプションを指定すると、git-svn は可能な限り自動的に svn:mergeinfo プロパティを SVN リポジトリに埋めようとします。現在のところ、これが可能なのは、最初の親を除くすべての親がすでに SVN にプッシュされている、fast-forward ではないマージを dcommitting しているときだけです。</target>
        </trans-unit>
        <trans-unit id="06697c041d5aacbd598da12e9917cf43b1b799c5" translate="yes" xml:space="preserve">
          <source>This option will cause the mapping from old to new objects to be loaded from named branch upon startup and saved as a new commit to that branch upon exit, enabling incremental of large trees. If &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; does not exist it will be created.</source>
          <target state="translated">このオプションにより、古いオブジェクトから新しいオブジェクトへのマッピングが、起動時に名前付きブランチからロードされ、終了時にそのブランチへの新しいコミットとして保存され、大きなツリーの増分が可能になります。場合 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 存在しない、それが作成されます。</target>
        </trans-unit>
        <trans-unit id="dac1adaa75a920f5808dd15e4e9468c4b8319529" translate="yes" xml:space="preserve">
          <source>This output format is compatible with what &lt;code&gt;--index-info --stdin&lt;/code&gt; of &lt;code&gt;git update-index&lt;/code&gt; expects.</source>
          <target state="translated">この出力形式は、 &lt;code&gt;git update-index&lt;/code&gt; の &lt;code&gt;--index-info --stdin&lt;/code&gt; が期待するものと互換性があります。</target>
        </trans-unit>
        <trans-unit id="9b61a138f7f673e2e13a43bac58e20e6d27091cc" translate="yes" xml:space="preserve">
          <source>This outputs all the commit objects between the included and excluded commits, ordered by their distance to the included and excluded commits. Refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used. The farthest from them is displayed first. (This is the only one displayed by &lt;code&gt;--bisect&lt;/code&gt;.)</source>
          <target state="translated">これにより、包含および除外されたコミット間のすべてのコミットオブジェクトが、包含および除外されたコミットまでの距離順に並べられて出力されます。中に参考文献 &lt;code&gt;refs/bisect/&lt;/code&gt; 使用されていません。それらから最も遠いものが最初に表示されます。（これは &lt;code&gt;--bisect&lt;/code&gt; で表示される唯一のものです。）</target>
        </trans-unit>
        <trans-unit id="c6b16b352aa83127a9d9220754dcd31555c3879e" translate="yes" xml:space="preserve">
          <source>This outputs something like this (the actual commit object names would be different)</source>
          <target state="translated">これは以下のようなものを出力します (実際のコミットオブジェクト名は異なるでしょう)。</target>
        </trans-unit>
        <trans-unit id="05fcf2a461c52cf42967559d01dbd73ffe108135" translate="yes" xml:space="preserve">
          <source>This overrides a previous &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; setting and reads the default merge tool will be read from the configured &lt;code&gt;merge.tool&lt;/code&gt; variable.</source>
          <target state="translated">これにより、以前の &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--gui&lt;/code&gt; 設定が上書きされ、デフォルトのマージツールが読み取られ、構成 &lt;code&gt;merge.tool&lt;/code&gt; 変数から読み取られます。</target>
        </trans-unit>
        <trans-unit id="cf7619d964802ced013b07a7c34a4262a7e0e3f4" translate="yes" xml:space="preserve">
          <source>This page can be displayed with &lt;code&gt;git help help&lt;/code&gt; or &lt;code&gt;git help --help&lt;/code&gt;</source>
          <target state="translated">このページは、 &lt;code&gt;git help help&lt;/code&gt; または &lt;code&gt;git help --help&lt;/code&gt; で表示できます。</target>
        </trans-unit>
        <trans-unit id="d990ef47ac594dcb10bc55890ec7a6963b3ffaed" translate="yes" xml:space="preserve">
          <source>This particular format is supplied as it&amp;rsquo;s short to implement and may be useful to a process that wants to create a new commit right now, without needing to use a working directory or &lt;code&gt;git update-index&lt;/code&gt;.</source>
          <target state="translated">この特定の形式は、実装するのが短いため提供されており、作業ディレクトリや &lt;code&gt;git update-index&lt;/code&gt; を使用する必要なく、新しいコミットを今すぐ作成したいプロセスに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="3ace4cf0777df858ca1c6440d5cccb2ed6637934" translate="yes" xml:space="preserve">
          <source>This prints the name of a commit they are both based on. You should now look up the tree objects of those commits, which you can easily do with</source>
          <target state="translated">これは、両者のベースとなっているコミットの名前を表示します。これらのコミットのツリーオブジェクトを調べなければなりません。</target>
        </trans-unit>
        <trans-unit id="65ce33f2a6f411ae54de75d77a4a5c5e2663fba3" translate="yes" xml:space="preserve">
          <source>This program computes which packs in your repository are redundant. The output is suitable for piping to &lt;code&gt;xargs rm&lt;/code&gt; if you are in the root of the repository.</source>
          <target state="translated">このプログラムは、リポジトリ内のどのパックが冗長であるかを計算します。リポジトリのルートにいる場合、出力は &lt;code&gt;xargs rm&lt;/code&gt; へのパイプに適しています。</target>
        </trans-unit>
        <trans-unit id="9dec60739fdc5804a4abedc6cf66847493211890" translate="yes" xml:space="preserve">
          <source>This program dumps the given revisions in a form suitable to be piped into &lt;code&gt;git fast-import&lt;/code&gt;.</source>
          <target state="translated">このプログラムは、指定されたリビジョンを &lt;code&gt;git fast-import&lt;/code&gt; にパイプするのに適した形式でダンプします。</target>
        </trans-unit>
        <trans-unit id="21943cdf9cd81593906492b86163eaa305da0be9" translate="yes" xml:space="preserve">
          <source>This program is usually not what the end user wants to run directly. Most end users want to use one of the existing frontend programs, which parses a specific type of foreign source and feeds the contents stored there to &lt;code&gt;git fast-import&lt;/code&gt;.</source>
          <target state="translated">このプログラムは通常、エンドユーザーが直接実行したいものではありません。ほとんどのエンドユーザーは、既存のフロントエンドプログラムの1つを使用したいと考えています。このプログラムは、特定の種類の外部ソースを解析し、そこに格納されているコンテンツを &lt;code&gt;git fast-import&lt;/code&gt; にフィードします。</target>
        </trans-unit>
        <trans-unit id="17acfb3fc2cc80c07ee41f3eeadca000eefd6ee0" translate="yes" xml:space="preserve">
          <source>This program searches the &lt;code&gt;$GIT_OBJECT_DIRECTORY&lt;/code&gt; for all objects that currently exist in a pack file as well as the independent object directories.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;$GIT_OBJECT_DIRECTORY&lt;/code&gt; を検索して、現在パックファイルに存在するすべてのオブジェクトと、独立したオブジェクトディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="a85a25d731117b0f9fdffb50b50cd41a205c14dd" translate="yes" xml:space="preserve">
          <source>This public repository could further be mirrored, and that is how Git repositories at &lt;code&gt;kernel.org&lt;/code&gt; are managed.</source>
          <target state="translated">このパブリックリポジトリはさらにミラーリングすることができます。これが、 &lt;code&gt;kernel.org&lt;/code&gt; の Gitリポジトリを管理する方法です。</target>
        </trans-unit>
        <trans-unit id="3f74cf126c451b6a68e67763c97a8253f485453b" translate="yes" xml:space="preserve">
          <source>This puts a Git archive of the named CVS module in the directory &amp;lt;destination&amp;gt;, which will be created if necessary.</source>
          <target state="translated">これにより、指定したCVSモジュールのGitアーカイブがディレクトリ&amp;lt;destination&amp;gt;に配置され、必要に応じて作成されます。</target>
        </trans-unit>
        <trans-unit id="8831ce4f64ae931ef68e9c4eb0b8a48320fea478" translate="yes" xml:space="preserve">
          <source>This rebase can be performed using the &lt;code&gt;--rebase-merges&lt;/code&gt; option. It will generate a todo list looking like this:</source>
          <target state="translated">このリベースは &lt;code&gt;--rebase-merges&lt;/code&gt; オプションを使用して実行できます。次のようなToDoリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="5e2dd779ca9f11c05d6bae58c7d8a031f404dc72" translate="yes" xml:space="preserve">
          <source>This ref is unchanged since the last import or fetch, although the helper cannot necessarily determine what value that produced.</source>
          <target state="translated">この参照は最後のインポートやフェッチから変更されていませんが、ヘルパーはそれがどのような値を生成したかを決定することはできません。</target>
        </trans-unit>
        <trans-unit id="0e48a6f59fc5d06bf39a026582c3a2674a30ee86" translate="yes" xml:space="preserve">
          <source>This remote helper is transparently used by Git when you use commands such as &quot;git fetch &amp;lt;URL&amp;gt;&quot;, &quot;git clone &amp;lt;URL&amp;gt;&quot;, , &quot;git push &amp;lt;URL&amp;gt;&quot; or &quot;git remote add &amp;lt;nick&amp;gt; &amp;lt;URL&amp;gt;&quot;, where &amp;lt;URL&amp;gt; begins with &lt;code&gt;ext::&lt;/code&gt;. Examples:</source>
          <target state="translated">このリモートヘルパーは、「git fetch &amp;lt;URL&amp;gt;」、「git clone &amp;lt;URL&amp;gt;」、「git push &amp;lt;URL&amp;gt;」、「git remote add &amp;lt;nick&amp;gt; &amp;lt;URL&amp;gt;」などのコマンドを使用すると、Gitによって透過的に使用されます。ここで、&amp;lt;URL&amp;gt;は &lt;code&gt;ext::&lt;/code&gt; 始まります。例：</target>
        </trans-unit>
        <trans-unit id="76e69f76fb018209940d2bd178b055119cc99cef" translate="yes" xml:space="preserve">
          <source>This remote helper uses the specified &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; to connect to a remote Git server.</source>
          <target state="translated">このリモートヘルパーは、指定された &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; を使用してリモートGitサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="08f3058ad626936f077bcdb5101be9917b27eae0" translate="yes" xml:space="preserve">
          <source>This removes the &lt;code&gt;WIP&lt;/code&gt; commit from the commit history, and sets your working tree to the state just before you made that snapshot.</source>
          <target state="translated">これにより、コミット履歴から &lt;code&gt;WIP&lt;/code&gt; コミットが削除され、作業ツリーがそのスナップショットを作成する直前の状態に設定されます。</target>
        </trans-unit>
        <trans-unit id="6cde691b95501235edce70baf30f3d475a6f05af" translate="yes" xml:space="preserve">
          <source>This removes the file from the index while keeping it in the working directory.</source>
          <target state="translated">これは、作業ディレクトリにファイルを保持したままインデックスからファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="f2e99bc05d5874bb5e940e93689126e6c4aa347e" translate="yes" xml:space="preserve">
          <source>This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the &lt;code&gt;recursive&lt;/code&gt; merge strategy.</source>
          <target state="translated">これは任意の数のヘッドを解決しますが、マージの結果のツリーは常に現在のブランチヘッドのツリーであり、他のすべてのブランチからのすべての変更を事実上無視します。これは、サイドブランチの古い開発履歴を置き換えるために使用されることを意図しています。これは、 &lt;code&gt;recursive&lt;/code&gt; マージ戦略の-Xoursオプションとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="053dd73bd0ed92de95c5b132a1b4a0308f96cd04" translate="yes" xml:space="preserve">
          <source>This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.</source>
          <target state="translated">これは、2 つ以上のヘッドを持つケースを解決しますが、手動での解決が必要な複雑なマージは行いません。これは、主にトピックブランチのヘッドをまとめて使用することを目的としています。これは、複数のブランチを引っ張ったりマージしたりする場合のデフォルトのマージ方法です。</target>
        </trans-unit>
        <trans-unit id="e1337ea8d65ee53d09143c99f1f587dd31c2d238" translate="yes" xml:space="preserve">
          <source>This results in:</source>
          <target state="translated">これは結果的に</target>
        </trans-unit>
        <trans-unit id="a3acfff86d0ac3c7e1c1af7dc1decad57125efa5" translate="yes" xml:space="preserve">
          <source>This runs &lt;code&gt;git fsck --unreachable&lt;/code&gt; using all the refs available in &lt;code&gt;refs/&lt;/code&gt;, optionally with additional set of objects specified on the command line, and prunes all unpacked objects unreachable from any of these head objects from the object database. In addition, it prunes the unpacked objects that are also found in packs by running &lt;code&gt;git prune-packed&lt;/code&gt;. It also removes entries from .git/shallow that are not reachable by any ref.</source>
          <target state="translated">これは &lt;code&gt;refs/&lt;/code&gt; で利用可能なすべての参照を使用して &lt;code&gt;git fsck --unreachable&lt;/code&gt; を実行し、オプションでコマンドラインで追加のオブジェクトセットを指定して、オブジェクトデータベースからこれらのヘッドオブジェクトのいずれからも到達できないアンパックされたすべてのオブジェクトをプルーニングします。さらに、 &lt;code&gt;git prune-packed&lt;/code&gt; を実行して、パックにも含まれているアンパックされたオブジェクトを整理します。また、どの参照からも到達できないエントリを.git / shallowから削除します。</target>
        </trans-unit>
        <trans-unit id="66bb2cd044765c7338efb3b55d3b51e463e22970" translate="yes" xml:space="preserve">
          <source>This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge. This option is meant to be used when merging branches with different clean filters or end-of-line normalization rules. See &quot;Merging branches with differing checkin/checkout attributes&quot; in &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">これは、3者間マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトとチェックインを実行します。このオプションは、ブランチをさまざまなクリーンフィルターまたは行末の正規化ルールとマージするときに使用することを目的としています。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]の&lt;/a&gt;「異なるチェックイン/チェックアウト属性を持つブランチのマージ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d37cfee1983b15d675f4e1a4163b8c978a492421" translate="yes" xml:space="preserve">
          <source>This says &quot;include everything in root, but nothing two levels below root.&quot;</source>
          <target state="translated">これは、&quot;ルートにはすべてのものを含むが、ルートより2つ下のレベルのものは含まない &quot;と書いてあります。</target>
        </trans-unit>
        <trans-unit id="b3bd580b61f2b6d754a6c049f07ff919549d1439" translate="yes" xml:space="preserve">
          <source>This says &quot;include everything in root, but nothing two levels below root.&quot; If we then add the folder &lt;code&gt;A/B/C&lt;/code&gt; as a recursive pattern, the folders &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A/B&lt;/code&gt; are added as parent patterns. The resulting sparse-checkout file is now</source>
          <target state="translated">これは、「すべてをルートに含めるが、ルートの2つ下のレベルは含めない」ことを意味します。その後、フォルダー &lt;code&gt;A/B/C&lt;/code&gt; を再帰パターンとして追加 &lt;code&gt;A&lt;/code&gt; と、フォルダーAと &lt;code&gt;A/B&lt;/code&gt; が親パターンとして追加されます。結果のスパースチェックアウトファイルは</target>
        </trans-unit>
        <trans-unit id="9f2fcd6a73ae4ce542d08fc5e7f799314e8e80fc" translate="yes" xml:space="preserve">
          <source>This script can be passed to &quot;git bisect run&quot; to find the commit that introduced a performance regression:</source>
          <target state="translated">このスクリプトを &quot;git bisect run&quot; に渡すことで、パフォーマンスの低下をもたらしたコミットを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="72c86095923977328df35910b245e776428b840b" translate="yes" xml:space="preserve">
          <source>This script is included in various scripts to supply routines to parse files under $GIT_DIR/remotes/ and $GIT_DIR/branches/ and configuration variables that are related to fetching, pulling and pushing.</source>
          <target state="translated">このスクリプトは、$GIT_DIR/remotes/および$GIT_DIR/branches/以下のファイルをパースするルーチンと、フェッチ、プル、プッシュに関連する設定変数を提供するための様々なスクリプトに含まれています。</target>
        </trans-unit>
        <trans-unit id="0b782a6ea862c68f93c66ef721d84ace33a5ac1d" translate="yes" xml:space="preserve">
          <source>This script tries, as much as possible, to display the URLs and FILEs that are passed as arguments, as HTML pages in new tabs on an already opened web browser.</source>
          <target state="translated">このスクリプトは、可能な限り、引数として渡されたURLやFILEを、すでに開いているウェブブラウザ上の新しいタブにHTMLページとして表示しようとします。</target>
        </trans-unit>
        <trans-unit id="a405ee4e7ff4cc67a738558081388543481850c0" translate="yes" xml:space="preserve">
          <source>This section can also be used by those who respond to &lt;code&gt;git
request-pull&lt;/code&gt; or pull-request on GitHub (www.github.com) to integrate the work of others into their history. A sub-area lieutenant for a repository will act both as a participant and as an integrator.</source>
          <target state="translated">このセクションは、GitHub（www.github.com）で &lt;code&gt;git request-pull&lt;/code&gt; またはpull-requestに応答して他のユーザーの作業を履歴に統合する場合にも使用できます。リポジトリのサブエリア代理は、参加者とインテグレータの両方として機能します。</target>
        </trans-unit>
        <trans-unit id="53af582e47690e9820cb012bdcbccf97b8def7d3" translate="yes" xml:space="preserve">
          <source>This section explains how to configure some common webservers to run gitweb. In all cases, &lt;code&gt;/path/to/gitweb&lt;/code&gt; in the examples is the directory you ran installed gitweb in, and contains &lt;code&gt;gitweb_config.perl&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、gitwebを実行するようにいくつかの一般的なWebサーバーを構成する方法について説明します。すべての場合において、例の &lt;code&gt;/path/to/gitweb&lt;/code&gt; は、実行したgitwebがインストールされているディレクトリであり、gitweb_config.perlが含まれてい &lt;code&gt;gitweb_config.perl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79c0f1f15a38eae1b5cc2a5e381bfbc844ef9486" translate="yes" xml:space="preserve">
          <source>This section is only included if a packfile section is also included in the response.</source>
          <target state="translated">このセクションは、パックファイルセクションが応答にも含まれている場合にのみ含まれます。</target>
        </trans-unit>
        <trans-unit id="f3cd5eb5a3885e012dabb05171cc566728c1791b" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git archive --remote&lt;/code&gt;. It is disabled by default, but a repository can enable it by setting &lt;code&gt;daemon.uploadarch&lt;/code&gt; configuration item to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git archive --remote&lt;/code&gt; を提供します。デフォルトでは無効になっていますが、リポジトリは &lt;code&gt;daemon.uploadarch&lt;/code&gt; 設定項目を &lt;code&gt;true&lt;/code&gt; に設定することで有効にできます。</target>
        </trans-unit>
        <trans-unit id="a1fc9be9532fca80163bd11748e3553d0b5b85a4" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients. It is enabled by default, but a repository can disable it by setting &lt;code&gt;daemon.uploadpack&lt;/code&gt; configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これはデフォルトで有効になっていますが、リポジトリーは、 &lt;code&gt;daemon.uploadpack&lt;/code&gt; 構成項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ce507c3877f92fc6c1de609ca683d1e2a4e1b26f" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients. It is enabled by default, but a repository can disable it by setting this configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これはデフォルトで有効になっていますが、リポジトリはこの設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="f25bae0e6df9b1b4a76a588d485b17d422e56c18" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git send-pack&lt;/code&gt; clients, allowing anonymous push. It is disabled by default, as there is &lt;code&gt;no&lt;/code&gt; authentication in the protocol (in other words, anybody can push anything into the repository, including removal of refs). This is solely meant for a closed LAN setting where everybody is friendly. This service can be enabled by setting &lt;code&gt;daemon.receivepack&lt;/code&gt; configuration item to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git send-pack&lt;/code&gt; クライアントにサービスを提供し、匿名のプッシュを許可します。プロトコルには認証が &lt;code&gt;no&lt;/code&gt; 、デフォルトでは無効になっています（つまり、参照の削除を含め、誰でもリポジトリに何かをプッシュできます）。これは、誰もが親しみやすい閉鎖的なLAN設定のためだけのものです。このサービスを有効にするには、 &lt;code&gt;daemon.receivepack&lt;/code&gt; 構成アイテムを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="6b2859849402fde4d51ffe73c129c97d00cb6083" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git send-pack&lt;/code&gt; clients, allowing push. It is disabled by default for anonymous users, and enabled by default for users authenticated by the web server. It can be disabled by setting this item to &lt;code&gt;false&lt;/code&gt;, or enabled for all users, including anonymous users, by setting it to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git send-pack&lt;/code&gt; クライアントにサービスを提供し、プッシュを許可します。匿名ユーザーの場合はデフォルトで無効になり、Webサーバーで認証されたユーザーの場合はデフォルトで有効になります。この項目を &lt;code&gt;false&lt;/code&gt; に設定して無効にするか、 &lt;code&gt;true&lt;/code&gt; に設定して匿名ユーザーを含むすべてのユーザーに対して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1d789007e515492a9cc42830b12a07ff1db6d084" translate="yes" xml:space="preserve">
          <source>This serves Git clients older than version 1.6.6 that are unable to use the upload pack service. When enabled, clients are able to read any file within the repository, including objects that are no longer reachable from a branch but are still present. It is enabled by default, but a repository can disable it by setting this configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは、アップロードパックサービスを使用できないバージョン1.6.6より古いGitクライアントにサービスを提供します。有効にすると、クライアントは、ブランチから到達できなくなってもまだ存在しているオブジェクトを含め、リポジトリ内の任意のファイルを読み取ることができます。これはデフォルトで有効になっていますが、リポジトリはこの設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="5456200c93d8963943eca093573a9d8938a4ea5f" translate="yes" xml:space="preserve">
          <source>This sets GIT_SVN_ID (instead of using the environment). This allows the user to override the default refname to fetch from when tracking a single URL. The &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;dcommit&lt;/code&gt; commands no longer require this switch as an argument.</source>
          <target state="translated">これにより、（環境を使用する代わりに）GIT_SVN_IDが設定されます。これにより、ユーザーは、単一のURLを追跡するときに取得するデフォルトの参照名を上書きできます。 &lt;code&gt;log&lt;/code&gt; と &lt;code&gt;dcommit&lt;/code&gt; コマンドは、もはや引数としてこのスイッチを必要としません。</target>
        </trans-unit>
        <trans-unit id="acb244d7aa46a820614aa10decb4464bc8ecabb6" translate="yes" xml:space="preserve">
          <source>This setting can be disabled by the &lt;code&gt;--no-notes&lt;/code&gt; option, overridden by the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable, and overridden by the &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; option.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; &lt;code&gt;--no-notes&lt;/code&gt; オプションで無効にしたり、GIT_NOTES_DISPLAY_REF環境変数でオーバーライドしたり、 &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; オプションでオーバーライドしたりできます。</target>
        </trans-unit>
        <trans-unit id="a8f435ef26eec94bd5c23846a74c0f4d57a87c8f" translate="yes" xml:space="preserve">
          <source>This setting can be overridden by passing the &lt;code&gt;--strategy&lt;/code&gt; option.</source>
          <target state="translated">この設定は &lt;code&gt;--strategy&lt;/code&gt; オプションを渡すことで上書きできます。</target>
        </trans-unit>
        <trans-unit id="5d273f23cd160340c4f9b3fbc5a088c0fc2c32be" translate="yes" xml:space="preserve">
          <source>This setting can be overridden by the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; 環境変数によって上書きできます。</target>
        </trans-unit>
        <trans-unit id="b28435a905552ea063d5203034696b428fdc0b87" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable, which must be a colon separated list of refs or globs.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; 環境変数で上書きできます。これは、コロンで区切られた参照またはグロブのリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="45473aa6b3903d5487aab6b473bcf528e266cdec" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_MODE&lt;/code&gt; environment variable.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_MODE&lt;/code&gt; 環境変数で上書きできます。</target>
        </trans-unit>
        <trans-unit id="39555b916eeeec115f6735665b5426bf964f4e52" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable, which must be a colon separated list of refs or globs.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; 環境変数で上書きできます。これは、コロンで区切られた参照またはグロブのリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="d17d74e5aa80b06bd416eb43f1c510767efc6dc8" translate="yes" xml:space="preserve">
          <source>This setting defaults to &quot;refs/notes/commits&quot;, and it can be overridden by the &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; environment variable. See &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt;.</source>
          <target state="translated">この設定のデフォルトは「refs / notes / commits」で、 &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; 環境変数によって上書きできます。&lt;a href=&quot;git-notes&quot;&gt;git-notes [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="843f7e48b1e3c030c426060d83a399e29388c249" translate="yes" xml:space="preserve">
          <source>This setting forces Git to normalize line endings for this file on checkin and convert them to CRLF when the file is checked out.</source>
          <target state="translated">この設定では、チェックイン時にこのファイルの行末を正規化し、チェックアウト時にはCRLFに変換します。</target>
        </trans-unit>
        <trans-unit id="8c7bb001c250cfdf4247d252deb09b8b2c2a2839" translate="yes" xml:space="preserve">
          <source>This setting forces Git to normalize line endings to LF on checkin and prevents conversion to CRLF when the file is checked out.</source>
          <target state="translated">この設定では、チェックイン時にGitが行末をLFに正規化し、ファイルをチェックアウトした際にCRLFに変換されないようにします。</target>
        </trans-unit>
        <trans-unit id="886fc853da603148f91948f5793a0d1be70dc28a" translate="yes" xml:space="preserve">
          <source>This setting is automatically guessed by &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; when the repository was created. By default a repository that ends in &quot;/.git&quot; is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).</source>
          <target state="translated">この設定は、リポジトリの作成時に&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;によって自動的に推測されます。デフォルトでは、「/。git」で終わるリポジトリはベアではないと見なされ（bare = false）、他のすべてのリポジトリはベアであると見なされます（bare = true）。</target>
        </trans-unit>
        <trans-unit id="a32da40367d476cb817ba2cfa99cb18bc04a7b3a" translate="yes" xml:space="preserve">
          <source>This setting overrides the default of the &lt;code&gt;--cleanup&lt;/code&gt; option in &lt;code&gt;git commit&lt;/code&gt;. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for details. Changing the default can be useful when you always want to keep lines that begin with comment character &lt;code&gt;#&lt;/code&gt; in your log message, in which case you would do &lt;code&gt;git config commit.cleanup whitespace&lt;/code&gt; (note that you will have to remove the help lines that begin with &lt;code&gt;#&lt;/code&gt; in the commit log template yourself, if you do this).</source>
          <target state="translated">この設定は、 &lt;code&gt;git commit&lt;/code&gt; の &lt;code&gt;--cleanup&lt;/code&gt; オプションのデフォルトを上書きします。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。デフォルトを変更すると、ログメッセージでコメント文字 &lt;code&gt;#&lt;/code&gt; で始まる行を常に保持したい場合に便利です。その場合、 &lt;code&gt;git config commit.cleanup whitespace&lt;/code&gt; を実行します（先頭のヘルプ行を削除する必要があることに注意してください） &lt;code&gt;#&lt;/code&gt; これを行う場合は、自分でコミットログテンプレートを使用してください。</target>
        </trans-unit>
        <trans-unit id="e85001143ab4f6109a8db79b80d46592a3792b5e" translate="yes" xml:space="preserve">
          <source>This setting should be set to a comma-separated list of color and date settings, starting and ending with a color, the dates should be set from oldest to newest. The metadata will be colored given the colors if the line was introduced before the given timestamp, overwriting older timestamped colors.</source>
          <target state="translated">この設定は、色と日付の設定をカンマで区切ったリストに設定し、色で始まり、色で終わるようにし、日付は古いものから新しいものまで設定する必要があります。指定されたタイムスタンプよりも前にその行が導入された場合、メタデータはその色で着色され、古いタイムスタンプの色を上書きします。</target>
        </trans-unit>
        <trans-unit id="1b39995bc064271da90ffd3401f4ace36766db6f" translate="yes" xml:space="preserve">
          <source>This setting writes a JSON-based format that is suited for machine interpretation. See &lt;code&gt;GIT_TRACE2&lt;/code&gt; for available trace output options and &lt;a href=&quot;api-trace2&quot;&gt;Trace2 documentation&lt;/a&gt; for full details.</source>
          <target state="translated">この設定は、機械の解釈に適したJSONベースの形式を書き込みます。使用可能なトレース出力オプションについては &lt;code&gt;GIT_TRACE2&lt;/code&gt; を、詳細については&lt;a href=&quot;api-trace2&quot;&gt;Trace2のドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d727921c238e28668ffb0dd7e4775077e3d6b368" translate="yes" xml:space="preserve">
          <source>This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up into while looking for a repository directory (useful for excluding slow-loading network directories). It will not exclude the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the entries in this list and resolve any symlink that might be present in order to compare them with the current directory. However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are not symlinks and needn&amp;rsquo;t be resolved; e.g., &lt;code&gt;GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink&lt;/code&gt;.</source>
          <target state="translated">これは、コロンで区切られた絶対パスのリストである必要があります。設定されている場合、これはリポジトリディレクトリを探すときにGitがchdirを実行してはならないディレクトリのリストです（読み込みの遅いネットワークディレクトリを除外するのに役立ちます）。コマンドラインまたは環境で設定されている現在の作業ディレクトリまたはGIT_DIRは除外されません。通常、Gitはこのリストのエントリを読み取り、現在のディレクトリと比較するために、存在する可能性のあるシンボリックリンクを解決する必要があります。ただし、このアクセスが遅い場合でも、リストに空のエントリを追加して、後続のエントリがシンボリックリンクではなく解決する必要がないことをGitに伝えることができます。例： &lt;code&gt;GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02391ad98329bedcf2ddfbe7ebdef774e4e7cc67" translate="yes" xml:space="preserve">
          <source>This should help you to submit patches inline using KMail.</source>
          <target state="translated">これで、KMailを使ってパッチをインラインで送信することができるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="dc65a8c75ec971d079e04ac05264e8ee2fb908c8" translate="yes" xml:space="preserve">
          <source>This should make &quot;--pretty=oneline&quot; a whole lot more readable for people using 80-column terminals.</source>
          <target state="translated">これにより、80カラムの端末を使っている人にとっては、&quot;--pretty=oneline &quot;がより読みやすくなるはずです。</target>
        </trans-unit>
        <trans-unit id="cda899a68420b48633046b1cef20e4960b467a9e" translate="yes" xml:space="preserve">
          <source>This should make it easy to look up svn log messages when svn users refer to -r/--revision numbers.</source>
          <target state="translated">これにより、svn のユーザーが -r/--修正番号を参照したときに svn のログメッセージを簡単に調べることができるようになるはずです。</target>
        </trans-unit>
        <trans-unit id="3fce0b9f9a8369808848ec3f066c1735323bb111" translate="yes" xml:space="preserve">
          <source>This should not be confused with the &lt;code&gt;ours&lt;/code&gt; merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring &lt;code&gt;our&lt;/code&gt; history contains all that happened in it.</source>
          <target state="translated">これは、他のツリーに何が含まれているかをまったく確認しない、 &lt;code&gt;ours&lt;/code&gt; マージ戦略と混同しないでください。それは他のツリーが行ったすべてを破棄し、 &lt;code&gt;our&lt;/code&gt; 歴史はその中で起こったすべてを含んでいると宣言します。</target>
        </trans-unit>
        <trans-unit id="70d0ce2d7e7f48cdf303b28228ad271bde0b97ac" translate="yes" xml:space="preserve">
          <source>This shows that our resolved version deleted &quot;Hello world&quot; from the first parent, deleted &quot;Goodbye&quot; from the second parent, and added &quot;Goodbye world&quot;, which was previously absent from both.</source>
          <target state="translated">これは、私たちが解決したバージョンでは、最初の親から &quot;Hello world &quot;が削除され、2番目の親から &quot;Goodbye &quot;が削除され、両方の親にはなかった &quot;Goodbye world &quot;が追加されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="e0fbc89a9eb1f686d88b41839c951cd18b86bf5e" translate="yes" xml:space="preserve">
          <source>This shows that you can do without a run script if you write the test on a single line.</source>
          <target state="translated">これは、テストを一行で書けばランスクリプトなしでもできることを示しています。</target>
        </trans-unit>
        <trans-unit id="f580a082428b40358ee35f346bb87b38bbd6e3f8" translate="yes" xml:space="preserve">
          <source>This shows the change between HEAD and index (i.e. what will be committed if you say &lt;code&gt;git commit&lt;/code&gt;), and between index and working tree files (i.e. what you could stage further before &lt;code&gt;git commit&lt;/code&gt; using &lt;code&gt;git add&lt;/code&gt;) for each path. A sample output looks like this:</source>
          <target state="translated">これは、各パスのHEADとインデックス（つまり、 &lt;code&gt;git commit&lt;/code&gt; と言うとコミットされるもの）と、インデックスと作業ツリーファイル（つまり、 &lt;code&gt;git add&lt;/code&gt; &lt;code&gt;git commit&lt;/code&gt; 使用してgit コミットする前にさらにステージングできるもの）との間の変更を示しています。出力例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="cdedf9c4235065dcc3b6a065543c259879fefa6b" translate="yes" xml:space="preserve">
          <source>This shows the files and directories to be deleted and issues an &quot;Input ignore patterns&amp;gt;&amp;gt;&quot; prompt. You can input space-separated patterns to exclude files and directories from deletion. E.g. &quot;*.c *.h&quot; will excludes files end with &quot;.c&quot; and &quot;.h&quot; from deletion. When you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</source>
          <target state="translated">削除するファイルとディレクトリが表示され、「入力無視パターン&amp;gt;&amp;gt;」プロンプトが表示されます。スペースで区切られたパターンを入力して、ファイルとディレクトリを削除から除外できます。たとえば、「*。c * .h」は、「。c」と「.h」で終わるファイルを削除から除外します。フィルター処理した結果に満足したら、Enter（空）を押してメインメニューに戻ります。</target>
        </trans-unit>
        <trans-unit id="d76da1518821bfa115def32fd19d8e8b1e73d979" translate="yes" xml:space="preserve">
          <source>This shows the files and directories to be deleted and issues an &quot;Select items to delete&amp;gt;&amp;gt;&quot; prompt. When the prompt ends with double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; like this, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. &quot;2-5 7,9&quot; to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining items are selected. E.g. &quot;7-&quot; to choose 7,8,9 from the list. You can say &lt;code&gt;*&lt;/code&gt; to choose everything. Also when you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</source>
          <target state="translated">削除するファイルとディレクトリが表示され、「削除するアイテムを選択&amp;gt;&amp;gt;」というプロンプトが表示されます。プロンプトがこのように二重 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; で終了する場合、空白またはコンマで連結された複数の選択を行うことができます。また、あなたは範囲を言うことができます。たとえば、「2-5 7,9」はリストから2、3、4、5、7、9を選択します。範囲の2番目の数値を省略すると、残りのすべての項目が選択されます。たとえば、「7-」はリストから7,8,9を選択します。 &lt;code&gt;*&lt;/code&gt; と言ってすべてを選択できます。また、フィルター処理した結果に満足したら、Enter（空）を押してメインメニューに戻ります。</target>
        </trans-unit>
        <trans-unit id="53f59db63b45945049b0fe262d831991c1cb4a8d" translate="yes" xml:space="preserve">
          <source>This shows the status information and issues an &quot;Update&amp;gt;&amp;gt;&quot; prompt. When the prompt ends with double &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. &quot;2-5 7,9&quot; to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining patches are taken. E.g. &quot;7-&quot; to choose 7,8,9 from the list. You can say &lt;code&gt;*&lt;/code&gt; to choose everything.</source>
          <target state="translated">ステータス情報が表示され、「Update &amp;gt;&amp;gt;」プロンプトが表示されます。プロンプトが二重 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; で終わる場合、空白またはコンマで連結された複数の選択を行うことができます。また、あなたは範囲を言うことができます。たとえば、「2-5 7,9」はリストから2、3、4、5、7、9を選択します。範囲の2番目の番号を省略すると、残りのすべてのパッチが取得されます。たとえば、 &quot;7-&quot;はリストから7,8,9を選択します。 &lt;code&gt;*&lt;/code&gt; と言ってすべてを選択できます。</target>
        </trans-unit>
        <trans-unit id="728eb7da1f0f1bff86889f4ac114a7967bd3817f" translate="yes" xml:space="preserve">
          <source>This snapshot is now stored in a temporary staging area which Git calls the &quot;index&quot;. You can permanently store the contents of the index in the repository with &lt;code&gt;git commit&lt;/code&gt;:</source>
          <target state="translated">このスナップショットは、Gitが「インデックス」と呼ぶ一時的なステージング領域に保存されます。 &lt;code&gt;git commit&lt;/code&gt; を使用して、インデックスのコンテンツをリポジトリに永続的に保存できます。</target>
        </trans-unit>
        <trans-unit id="dfa3a419f48a4609a0668c69a143f543612e713a" translate="yes" xml:space="preserve">
          <source>This solution is not 100% bulletproof, in the sense that if some project has a named ref (branch, tag) starting with &lt;code&gt;git/&lt;/code&gt;, then paths such as</source>
          <target state="translated">このソリューションは100％防弾ではありません。あるプロジェクトに &lt;code&gt;git/&lt;/code&gt; で始まる名前付きの参照（ブランチ、タグ）がある場合、次のようなパスになります。</target>
        </trans-unit>
        <trans-unit id="02da975953020f9ebbe3388889e8a8406f05d0c7" translate="yes" xml:space="preserve">
          <source>This step and the next one could be combined into a single step with &quot;checkout -b my2.6.14 v2.6.14&quot;.</source>
          <target state="translated">このステップと次のステップは、&quot;checkout -b my2.6.14 v2.6.14 &quot;で1つのステップにまとめることができます。</target>
        </trans-unit>
        <trans-unit id="8693cc187fd5fbc9d2b5824a59520cb3030a07eb" translate="yes" xml:space="preserve">
          <source>This string config option provides a way to specify one of a few recommended schedules for background maintenance. This only affects which tasks are run during &lt;code&gt;git maintenance run --schedule=X&lt;/code&gt; commands, provided no &lt;code&gt;--task=&amp;lt;task&amp;gt;&lt;/code&gt; arguments are provided. Further, if a &lt;code&gt;maintenance.&amp;lt;task&amp;gt;.schedule&lt;/code&gt; config value is set, then that value is used instead of the one provided by &lt;code&gt;maintenance.strategy&lt;/code&gt;. The possible strategy strings are:</source>
          <target state="translated">この文字列設定オプションは、バックグラウンドメンテナンスのいくつかの推奨スケジュールの1つを指定する方法を提供します。これは、 &lt;code&gt;--task=&amp;lt;task&amp;gt;&lt;/code&gt; 引数が指定されていない場合に、 &lt;code&gt;git maintenance run --schedule=X&lt;/code&gt; コマンド中に実行されるタスクにのみ影響します。さらに、 &lt;code&gt;maintenance.&amp;lt;task&amp;gt;.schedule&lt;/code&gt; config値が設定されている場合、 &lt;code&gt;maintenance.strategy&lt;/code&gt; によって提供される値の代わりにその値が使用されます。可能な戦略文字列は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9b0b980e437fd3274de63464aa9184e42833d899" translate="yes" xml:space="preserve">
          <source>This suffix is also accepted when spelled in uppercase, and means the same thing no matter the case.</source>
          <target state="translated">この接尾辞は大文字で綴った場合にも通用し、大文字と小文字に関係なく同じ意味になります。</target>
        </trans-unit>
        <trans-unit id="01f381d8f83cae139b7e7ff06573574ebdbc8086" translate="yes" xml:space="preserve">
          <source>This supersedes the &lt;a href=&quot;#post-update&quot;&gt;&lt;em&gt;post-update&lt;/em&gt;&lt;/a&gt; hook in that it gets both old and new values of all the refs in addition to their names.</source>
          <target state="translated">これは、名前に加えてすべての参照の古い値と新しい値の両方を取得するという点で、&lt;a href=&quot;#post-update&quot;&gt;&lt;em&gt;更新後の&lt;/em&gt;&lt;/a&gt;フックに取って代わります。</target>
        </trans-unit>
        <trans-unit id="6339f7da558022ed0ae10f566dd01f30bb047e19" translate="yes" xml:space="preserve">
          <source>This synchronizes your public repository to match the named branch head (i.e. &lt;code&gt;master&lt;/code&gt; in this case) and objects reachable from them in your current repository.</source>
          <target state="translated">これにより、パブリックリポジトリが同期され、名前付きブランチヘッド（この場合は &lt;code&gt;master&lt;/code&gt; ）と現在のリポジトリ内のそこから到達可能なオブジェクトが一致します。</target>
        </trans-unit>
        <trans-unit id="0012e2584fc653cc03e6dda35ea11cbdc9f6c1a2" translate="yes" xml:space="preserve">
          <source>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path &lt;code&gt;foo:bar&lt;/code&gt; could be specified as an absolute path or &lt;code&gt;./foo:bar&lt;/code&gt; to avoid being misinterpreted as an ssh url.</source>
          <target state="translated">この構文は、最初のコロンの前にスラッシュがない場合にのみ認識されます。これは、コロンを含むローカルパスを区別するのに役立ちます。たとえば、ローカルパス &lt;code&gt;foo:bar&lt;/code&gt; 、絶対パスまたはとして指定することができ &lt;code&gt;./foo:bar&lt;/code&gt; sshのURLと誤解されないように。</target>
        </trans-unit>
        <trans-unit id="9f5d9872e03f1e6dd55415fa2249d9c84ea6f738" translate="yes" xml:space="preserve">
          <source>This takes a text file each of whose lines is a shell glob pattern. Filepairs that match a glob pattern on an earlier line in the file are output before ones that match a later line, and filepairs that do not match any glob pattern are output last.</source>
          <target state="translated">これは、各行がシェル・グロブ・パターンであるテキスト・ファイルを取得します。ファイルの前の行でグロブ・パターンにマッチしたファイルペアは、後の行にマッチしたファイルペアの前に出力され、グロブ・パターンにマッチしないファイルペアは最後に出力されます。</target>
        </trans-unit>
        <trans-unit id="b169549655fddd825e67d14c1591493d6ac0be03" translate="yes" xml:space="preserve">
          <source>This target is intended to be more of a summary (like GIT_TRACE) and less detailed than the other targets. It ignores thread, region, and data messages, for example.</source>
          <target state="translated">このターゲットは (GIT_TRACE のように)より要約的で、他のターゲットよりも詳細ではないことを意図しています。例えば、スレッド、リージョン、データメッセージは無視されます。</target>
        </trans-unit>
        <trans-unit id="49bec15344e0cef74269dabec868d060f4c1b07d" translate="yes" xml:space="preserve">
          <source>This tells the bisect process that no commit after &lt;code&gt;v2.5&lt;/code&gt;, up to and including &lt;code&gt;v2.6&lt;/code&gt;, should be tested.</source>
          <target state="translated">これはbisectプロセスに、 &lt;code&gt;v2.5&lt;/code&gt; 以降（ &lt;code&gt;v2.6&lt;/code&gt; まで）のコミットはテストしないように指示します。</target>
        </trans-unit>
        <trans-unit id="1842bab1269e00a8bf77d06ee23570861225cc48" translate="yes" xml:space="preserve">
          <source>This tells the bisect process that the commits between &lt;code&gt;v2.5&lt;/code&gt; and &lt;code&gt;v2.6&lt;/code&gt; (inclusive) should be skipped.</source>
          <target state="translated">これは、 &lt;code&gt;v2.5&lt;/code&gt; と &lt;code&gt;v2.6&lt;/code&gt; （両端を含む）の間のコミットをスキップする必要があることをbisectプロセスに伝えます。</target>
        </trans-unit>
        <trans-unit id="fb42c5eea9f7afe3662a07fd6af3c3105ab04e8f" translate="yes" xml:space="preserve">
          <source>This tells you that the immediately following version of the file was &quot;newsha&quot;, and that the immediately preceding version was &quot;oldsha&quot;. You also know the commit messages that went with the change from oldsha to 4b9458b and with the change from 4b9458b to newsha.</source>
          <target state="translated">これは、ファイルの直後のバージョンが「newsha」であり、直前のバージョンが「oldsha」であったことを教えてくれます。oldsha から 4b9458b への変更と、4b9458b から newsha への変更に伴うコミットメッセージもわかります。</target>
        </trans-unit>
        <trans-unit id="055a35e65dbf599ed555247ef03e1960ff509b55" translate="yes" xml:space="preserve">
          <source>This tool is invoked via the typical Git setup process, which means that in some cases, it might not be able to launch - for example, if a relevant config file is unreadable. In this kind of scenario, it may be helpful to manually gather the kind of information listed above when manually asking for help.</source>
          <target state="translated">このツールは典型的な Git セットアッププロセスを経て起動されるため、場合によっては起動できないこともあるでしょう。このような場合は、手動で助けを求める際に、上で挙げたような情報を手動で収集しておくと便利です。</target>
        </trans-unit>
        <trans-unit id="8f1179423f3ea23a6c9e525ef159db41c1155b6a" translate="yes" xml:space="preserve">
          <source>This transformation is used to detect renames and copies, and is controlled by the -M option (to detect renames) and the -C option (to detect copies as well) to the &lt;code&gt;git diff-*&lt;/code&gt; commands. If the input contained these filepairs:</source>
          <target state="translated">この変換は、名前変更とコピーを検出するために使用され、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Mオプション（名前変更を検出する）と-Cオプション（コピーも検出する）によって制御されます。入力にこれらのファイルペアが含まれていた場合：</target>
        </trans-unit>
        <trans-unit id="573190bccf8f2a4ea6fc33eedd23b4b8fc3f90f8" translate="yes" xml:space="preserve">
          <source>This transformation is used to merge filepairs broken by diffcore-break, and not transformed into rename/copy by diffcore-rename, back into a single modification. This always runs when diffcore-break is used.</source>
          <target state="translated">この変換は、diffcode-break で壊れたファイルペアを、diffcode-rename で rename/copy に変換されなかったファイルペアにマージして、単一の変更に戻すために使われます。これは diffcore-break が使われているときに常に実行されます。</target>
        </trans-unit>
        <trans-unit id="448726c2164ad1aa28f4d84dcd657bc466764287" translate="yes" xml:space="preserve">
          <source>This transformation limits the set of filepairs to those that change specified strings between the preimage and the postimage in a certain way. -S&amp;lt;block of text&amp;gt; and -G&amp;lt;regular expression&amp;gt; options are used to specify different ways these strings are sought.</source>
          <target state="translated">この変換は、ファイルペアのセットを、特定の方法で前イメージと後イメージの間で指定された文字列を変更するペアに制限します。-S &amp;lt;テキストのブロック&amp;gt;および-G &amp;lt;正規表現&amp;gt;オプションは、これらの文字列が検索されるさまざまな方法を指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="eb01f7c28a2e42a179d9ca76727e0a7db6bb8dce" translate="yes" xml:space="preserve">
          <source>This transport can be used for both uploading and downloading, and requires you to have a log-in privilege over &lt;code&gt;ssh&lt;/code&gt; to the remote machine. It finds out the set of objects the other side lacks by exchanging the head commits both ends have and transfers (close to) minimum set of objects. It is by far the most efficient way to exchange Git objects between repositories.</source>
          <target state="translated">このトランスポートは、アップロードとダウンロードの両方に使用でき、リモートマシンへの &lt;code&gt;ssh&lt;/code&gt; 経由のログイン権限が必要です。両端のヘッドコミットを交換し、オブジェクトの最小セットを（近くに）転送することにより、反対側にないオブジェクトのセットを見つけます。これは、リポジトリ間でGitオブジェクトを交換するための最も効率的な方法です。</target>
        </trans-unit>
        <trans-unit id="1e93313475dc2966a9b364d25d3e63ddb92cd35d" translate="yes" xml:space="preserve">
          <source>This transport is the same as SSH transport but uses &lt;code&gt;sh&lt;/code&gt; to run both ends on the local machine instead of running other end on the remote machine via &lt;code&gt;ssh&lt;/code&gt;.</source>
          <target state="translated">このトランスポートはSSHトランスポートと同じですが、リモートマシンで &lt;code&gt;ssh&lt;/code&gt; を介して他のエンドを実行する代わりに、ローカルマシンで &lt;code&gt;sh&lt;/code&gt; を使用して両端を実行します。</target>
        </trans-unit>
        <trans-unit id="187c060b77919e40b0db07be6c4444d6bedf0f1f" translate="yes" xml:space="preserve">
          <source>This transport was designed for anonymous downloading. Like SSH transport, it finds out the set of objects the downstream side lacks and transfers (close to) minimum set of objects.</source>
          <target state="translated">このトランスポートは匿名ダウンロード用に設計されています。SSH トランスポートと同様に、下流側に不足しているオブジェクトのセットを見つけ出し、 最小限のオブジェクトのセットを(それに近い形で)転送します。</target>
        </trans-unit>
        <trans-unit id="a843c4941e9eb68216876c91a59842ae7d058faa" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to import a new project into Git, make changes to it, and share changes with other developers.</source>
          <target state="translated">このチュートリアルでは、新しいプロジェクトを Git にインポートして変更を加え、他の開発者と共有する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="586b98337ae35b657ccc9687b72106b49b3b174b" translate="yes" xml:space="preserve">
          <source>This tutorial explains how to use the &quot;core&quot; Git commands to set up and work with a Git repository.</source>
          <target state="translated">このチュートリアルでは、&quot;core&quot; Git コマンドを使って Git リポジトリを設定して作業する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="4f3b7287fc4739a451de38537fb0637003a134c1" translate="yes" xml:space="preserve">
          <source>This tutorial should be enough to perform basic distributed revision control for your projects. However, to fully understand the depth and power of Git you need to understand two simple ideas on which it is based:</source>
          <target state="translated">このチュートリアルでは、プロジェクトの基本的な分散リビジョン管理を行うのに十分な内容となっています。しかし、Git の奥深さとパワーを完全に理解するには、Git のベースとなっている二つのシンプルな考え方を理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="50b7797bad77b49520127714ff8a716873aad978" translate="yes" xml:space="preserve">
          <source>This updates (or creates, as necessary) branches &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;tmp&lt;/code&gt; in the local repository by fetching from the branches (respectively) &lt;code&gt;pu&lt;/code&gt; and &lt;code&gt;maint&lt;/code&gt; from the remote repository.</source>
          <target state="translated">これにより、リモートリポジトリから &lt;code&gt;pu&lt;/code&gt; および &lt;code&gt;maint&lt;/code&gt; ブランチを（それぞれ）フェッチすることにより、ローカルリポジトリの &lt;code&gt;pu&lt;/code&gt; および &lt;code&gt;tmp&lt;/code&gt; ブランチが更新（または必要に応じて作成）されます。</target>
        </trans-unit>
        <trans-unit id="3e7d31bbe83aa073e1058fe02ef8026a34345709" translate="yes" xml:space="preserve">
          <source>This updates (or creates, as necessary) branches &lt;code&gt;seen&lt;/code&gt; and &lt;code&gt;tmp&lt;/code&gt; in the local repository by fetching from the branches (respectively) &lt;code&gt;seen&lt;/code&gt; and &lt;code&gt;maint&lt;/code&gt; from the remote repository.</source>
          <target state="translated">この更新（または作成し、必要に応じて）分岐 &lt;code&gt;seen&lt;/code&gt; および &lt;code&gt;tmp&lt;/code&gt; 分岐からフェッチすることによって、ローカルリポジトリに（それぞれ）が &lt;code&gt;seen&lt;/code&gt; と &lt;code&gt;maint&lt;/code&gt; リモートリポジトリから。</target>
        </trans-unit>
        <trans-unit id="70ac0b727096d7231e8fdcdd112d1a04551c8ca8" translate="yes" xml:space="preserve">
          <source>This used to be the default, but not since Git 2.0 (&lt;code&gt;simple&lt;/code&gt; is the new default).</source>
          <target state="translated">これは以前はデフォルトでしたが、Git 2.0以降ではありません（ &lt;code&gt;simple&lt;/code&gt; が新しいデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="fd75f35034e73b98112aaaf4198ee488b9e51804" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;--interactive&lt;/code&gt; machinery internally, but combining it with the &lt;code&gt;--interactive&lt;/code&gt; option explicitly is generally not a good idea unless you know what you are doing (see BUGS below).</source>
          <target state="translated">これは内部的に &lt;code&gt;--interactive&lt;/code&gt; 機構を使用しますが、-- &lt;code&gt;--interactive&lt;/code&gt; オプションと明示的に組み合わせることは、何をしているのかを知らない限り、一般に良い考えではありません（以下のバグを参照）。</target>
        </trans-unit>
        <trans-unit id="665eaff82148d49a545a97a7903a8bf0d3754608" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;--interactive&lt;/code&gt; machinery internally, but it can be run without an explicit &lt;code&gt;--interactive&lt;/code&gt;.</source>
          <target state="translated">これは内部で &lt;code&gt;--interactive&lt;/code&gt; 機構を使用しますが、明示的な &lt;code&gt;--interactive&lt;/code&gt; なしで実行できます。</target>
        </trans-unit>
        <trans-unit id="5a59444b879ae5151f30b1cffe08974240ac7bdc" translate="yes" xml:space="preserve">
          <source>This uses the same two-dot range notation we saw earlier with &lt;code&gt;git log&lt;/code&gt;.</source>
          <target state="translated">これは、前に &lt;code&gt;git log&lt;/code&gt; で見たのと同じ2つのドット範囲表記を使用します。</target>
        </trans-unit>
        <trans-unit id="94dc29f5a82c88ac8ea06389eebe7535e89a6fb1" translate="yes" xml:space="preserve">
          <source>This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.</source>
          <target state="translated">この値は、作業ディレクトリが関連付けられているリポジトリではデフォルトでtrueになり、ベアリポジトリではデフォルトでfalseになります。</target>
        </trans-unit>
        <trans-unit id="73a34f84ecc165ae3643b28ecca4c6c41f197412" translate="yes" xml:space="preserve">
          <source>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value &quot;user&quot; indicates that the archiving user&amp;rsquo;s umask will be used instead. See umask(2) and &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt;.</source>
          <target state="translated">この変数は、tarアーカイブエントリの許可ビットを制限するために使用できます。デフォルトは0002で、ワールドライトビットをオフにします。特別な値「user」は、代わ​​りにアーカイブユーザーのumaskが使用されることを示します。umask（2）および&lt;a href=&quot;git-archive&quot;&gt;git-archive [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="63a384d932515032afb2060852ce18cd5598c9ca" translate="yes" xml:space="preserve">
          <source>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value &quot;user&quot; indicates that the archiving user&amp;rsquo;s umask will be used instead. See umask(2) for details. If &lt;code&gt;--remote&lt;/code&gt; is used then only the configuration of the remote repository takes effect.</source>
          <target state="translated">この変数は、tarアーカイブエントリの許可ビットを制限するために使用できます。デフォルトは0002で、ワールドライトビットをオフにします。特別な値「user」は、代わ​​りにアーカイブユーザーのumaskが使用されることを示します。詳細については、umask（2）を参照してください。場合 &lt;code&gt;--remote&lt;/code&gt; が、その後使用されているリモートリポジトリの構成のみが有効になります。</target>
        </trans-unit>
        <trans-unit id="0afce327e7d4311118de1c5dc2faa8fa7a291053" translate="yes" xml:space="preserve">
          <source>This variable controls the event target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">この変数は、イベントのターゲット宛先を制御します。 &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; 環境変数によって上書きされる場合があります。次の表に、可能な値を示します。</target>
        </trans-unit>
        <trans-unit id="b3073c2a2c3930628fae47eb515e2fe5729910f0" translate="yes" xml:space="preserve">
          <source>This variable controls the normal target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">この変数は、通常のターゲット宛先を制御します。 &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数によって上書きされる場合があります。次の表に、可能な値を示します。</target>
        </trans-unit>
        <trans-unit id="ab644894061fa15fc115b6d355d07c2965277303" translate="yes" xml:space="preserve">
          <source>This variable controls the performance target destination. It may be overridden by the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable. The following table shows possible values.</source>
          <target state="translated">この変数は、パフォーマンスターゲットの宛先を制御します。 &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; 環境変数によってオーバーライドされる場合があります。次の表に、可能な値を示します。</target>
        </trans-unit>
        <trans-unit id="53008d90e6aae985c2e7839a77d7b54894ce429e" translate="yes" xml:space="preserve">
          <source>This variable controls the sort ordering of branches when displayed by &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;. Without the &quot;--sort=&amp;lt;value&amp;gt;&quot; option provided, the value of this variable will be used as the default. See &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref[1]&lt;/a&gt; field names for valid values.</source>
          <target state="translated">この変数は、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;によって表示されるときのブランチのソート順を制御します。「--sort = &amp;lt;value&amp;gt;」オプションを指定しない場合、この変数の値がデフォルトとして使用されます。有効な値については、&lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref [1]&lt;/a&gt;フィールド名をご覧ください。</target>
        </trans-unit>
        <trans-unit id="ea1c7eb75a360c1f9f69915dbc32e427ddfb7ced" translate="yes" xml:space="preserve">
          <source>This variable controls the sort ordering of tags when displayed by &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt;. Without the &quot;--sort=&amp;lt;value&amp;gt;&quot; option provided, the value of this variable will be used as the default.</source>
          <target state="translated">この変数は、&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt;によって表示されるときのタグのソート順を制御します。「--sort = &amp;lt;value&amp;gt;」オプションを指定しない場合、この変数の値がデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="c2680b6925a4a160ca8f3fee892cc23ec9be5f4f" translate="yes" xml:space="preserve">
          <source>This variable determines the default value for variables such as &lt;code&gt;color.diff&lt;/code&gt; and &lt;code&gt;color.grep&lt;/code&gt; that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the &lt;code&gt;--color&lt;/code&gt; option. Set it to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt; if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the &lt;code&gt;--color&lt;/code&gt; option. Set it to &lt;code&gt;always&lt;/code&gt; if you want all output not intended for machine consumption to use color, to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal.</source>
          <target state="translated">この変数は、コマンドファミリごとの色の使用を制御する &lt;code&gt;color.diff&lt;/code&gt; や &lt;code&gt;color.grep&lt;/code&gt; などの変数のデフォルト値を決定します。より多くのコマンドが &lt;code&gt;--color&lt;/code&gt; オプションのデフォルトを設定するための構成を学習するにつれて、その範囲は拡大します。設定してください &lt;code&gt;false&lt;/code&gt; か &lt;code&gt;never&lt;/code&gt; あなたには、いくつかの他の構成やで明示的に有効にしない限り、Gitは使用カラーにないコマンドを好む場合 &lt;code&gt;--color&lt;/code&gt; オプション。マシンの消費を目的としないすべての出力で色を使用する場合は、 &lt;code&gt;always&lt;/code&gt; 出力に設定します。ターミナルへの書き込み時に色を使用する場合は、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;auto&lt;/code&gt; （Git 1.8.4以降のデフォルト）に設定します。</target>
        </trans-unit>
        <trans-unit id="2eb6f1e33d90fc7fb4373fa1793932292fbc650d" translate="yes" xml:space="preserve">
          <source>This variable is the same as &lt;code&gt;transfer.hideRefs&lt;/code&gt;, but applies only to &lt;code&gt;receive-pack&lt;/code&gt; (and so affects pushes, but not fetches). An attempt to update or delete a hidden ref by &lt;code&gt;git push&lt;/code&gt; is rejected.</source>
          <target state="translated">この変数は &lt;code&gt;transfer.hideRefs&lt;/code&gt; と同じですが、 &lt;code&gt;receive-pack&lt;/code&gt; のみ適用されます（したがって、プッシュには影響しますが、フェッチには影響しません）。 &lt;code&gt;git push&lt;/code&gt; によって非表示の参照を更新または削除する試みは拒否されます。</target>
        </trans-unit>
        <trans-unit id="763a368531eb9d8bc40e93c6334e049f21620c45" translate="yes" xml:space="preserve">
          <source>This variable is the same as &lt;code&gt;transfer.hideRefs&lt;/code&gt;, but applies only to &lt;code&gt;upload-pack&lt;/code&gt; (and so affects only fetches, not pushes). An attempt to fetch a hidden ref by &lt;code&gt;git fetch&lt;/code&gt; will fail. See also &lt;code&gt;uploadpack.allowTipSHA1InWant&lt;/code&gt;.</source>
          <target state="translated">この変数は &lt;code&gt;transfer.hideRefs&lt;/code&gt; と同じですが、 &lt;code&gt;upload-pack&lt;/code&gt; にのみ適用されます（したがって、プッシュではなくフェッチのみに影響します）。 &lt;code&gt;git fetch&lt;/code&gt; によって非表示の参照をフェッチしようとすると失敗します。 &lt;code&gt;uploadpack.allowTipSHA1InWant&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="75aa35a44ffd767e8a239dc01347d150ce1e39ed" translate="yes" xml:space="preserve">
          <source>This variable matters only when using persistent web environments that serve multiple requests using single gitweb instance, like mod_perl, FastCGI or Plackup.</source>
          <target state="translated">この変数が重要になるのは、mod_perl や FastCGI、Plackup のように、単一の gitweb インスタンスを使用して複数のリクエストに対応する持続的なウェブ環境を使用している場合のみです。</target>
        </trans-unit>
        <trans-unit id="c0526214b5c55d639fefd6a92d93b97ec2455930" translate="yes" xml:space="preserve">
          <source>This variable specifies a shell command through which the tar output generated by &lt;code&gt;git archive&lt;/code&gt; should be piped. The command is executed using the shell with the generated tar file on its standard input, and should produce the final output on its standard output. Any compression-level options will be passed to the command (e.g., &quot;-9&quot;). An output file with the same extension as &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; will be use this format if no other format is given.</source>
          <target state="translated">この変数は、 &lt;code&gt;git archive&lt;/code&gt; によって生成されたtar出力をパイプするシェルコマンドを指定します。コマンドは、標準入力に生成されたtarファイルを含むシェルを使用して実行され、標準出力に最終出力を生成します。圧縮レベルのオプションはすべてコマンドに渡されます（例： &quot;-9&quot;）。 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; と同じ拡張子を持つ出力ファイルは、他の形式が指定されていない場合、この形式を使用します。</target>
        </trans-unit>
        <trans-unit id="99ffcf0d1fc58b3934082bac9786637cf3a8cdad" translate="yes" xml:space="preserve">
          <source>This view is similar to &lt;code&gt;shortlog&lt;/code&gt; view.</source>
          <target state="translated">このビューは、 &lt;code&gt;shortlog&lt;/code&gt; ビューに似ています。</target>
        </trans-unit>
        <trans-unit id="16ae6576174eeb48325f0bfa3042bcb20d29d417" translate="yes" xml:space="preserve">
          <source>This was not the case in the initial release of this feature in v2.13.0, which only matched the realpath version. Configuration that wants to be compatible with the initial release of this feature needs to either specify only the realpath version, or both versions.</source>
          <target state="translated">この機能の初期リリースである v2.13.0 では、realpath のバージョンにしか対応していませんでした。この機能の初期リリースとの互換性を望む設定は、realpath のバージョンのみを指定するか、両方のバージョンを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7c8d457b197b5558b7abfe068bcd1974205f94ad" translate="yes" xml:space="preserve">
          <source>This was optional in prior versions of git, but now it is the default. You can use &lt;code&gt;--no-utf8&lt;/code&gt; to override this.</source>
          <target state="translated">これは以前のバージョンのgitではオプションでしたが、現在はデフォルトになっています。 &lt;code&gt;--no-utf8&lt;/code&gt; を使用してこれを上書きできます。</target>
        </trans-unit>
        <trans-unit id="314df942d006c94c85d3e8c8bfe0a0b8ef8308d1" translate="yes" xml:space="preserve">
          <source>This will again prompt you for a message describing the change, and then record a new version of the project.</source>
          <target state="translated">これにより、変更内容を説明するメッセージが再度表示され、プロジェクトの新しいバージョンが記録されます。</target>
        </trans-unit>
        <trans-unit id="53cca56aaa41c3093032e1d720cb620b22717e06" translate="yes" xml:space="preserve">
          <source>This will cache the result of running &quot;exif&quot; on each blob indefinitely. If you change the textconv config variable for a diff driver, Git will automatically invalidate the cache entries and re-run the textconv filter. If you want to invalidate the cache manually (e.g., because your version of &quot;exif&quot; was updated and now produces better output), you can remove the cache manually with &lt;code&gt;git update-ref -d refs/notes/textconv/jpg&lt;/code&gt; (where &quot;jpg&quot; is the name of the diff driver, as in the example above).</source>
          <target state="translated">これにより、各blobで「exif」を実行した結果が無期限にキャッシュされます。差分ドライバーのtextconv構成変数を変更すると、Gitは自動的にキャッシュエントリーを無効にし、textconvフィルターを再実行します。キャッシュを手動で無効にしたい場合（たとえば、「exif」のバージョンが更新され、出力が向上したため）、 &lt;code&gt;git update-ref -d refs/notes/textconv/jpg&lt;/code&gt; （where &quot; jpg &quot;は、上記の例のように、diffドライバーの名前です。</target>
        </trans-unit>
        <trans-unit id="3d17cc7dd2b4aac7e00ecd2628dbb99eefd074c7" translate="yes" xml:space="preserve">
          <source>This will cause Git to generate &lt;code&gt;Binary files differ&lt;/code&gt; (or a binary patch, if binary patches are enabled) instead of a regular diff.</source>
          <target state="translated">これにより、Git は通常の差分ではなく、 &lt;code&gt;Binary files differ&lt;/code&gt; （またはバイナリパッチが有効な場合はバイナリパッチ）を生成します。</target>
        </trans-unit>
        <trans-unit id="dac66330b2bd98fcf90352c4cbeba694c8f4feb3" translate="yes" xml:space="preserve">
          <source>This will check out the currently cached copy of &lt;code&gt;Makefile&lt;/code&gt; into the file &lt;code&gt;.merged-Makefile&lt;/code&gt;.</source>
          <target state="translated">これにより、現在キャッシュされている &lt;code&gt;Makefile&lt;/code&gt; のコピーがファイル &lt;code&gt;.merged-Makefile&lt;/code&gt; にチェックアウトされます。</target>
        </trans-unit>
        <trans-unit id="9acb73cd9d17d8ef0d5dfd6af35ea9d0a50c12ab" translate="yes" xml:space="preserve">
          <source>This will create a new commit which undoes the change in HEAD. You will be given a chance to edit the commit message for the new commit.</source>
          <target state="translated">これにより、HEADの変更を元に戻す新しいコミットが作成されます。新しいコミットのコミットメッセージを編集する機会が与えられます。</target>
        </trans-unit>
        <trans-unit id="85437cd96f5cff3dd194d542498fd954d1bf1e01" translate="yes" xml:space="preserve">
          <source>This will define a remote called &quot;origin&quot; in the resulting repository that lets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will have an entry like this:</source>
          <target state="translated">これにより、結果として得られるリポジトリに &quot;origin &quot;というリモートが定義され、バンドルをフェッチしたりプルしたりすることができるようになります。R2の$git_dir/configファイルには、このようなエントリがあります。</target>
        </trans-unit>
        <trans-unit id="2986121c6e711f05b2ed0ba772dedbd8c66503ff" translate="yes" xml:space="preserve">
          <source>This will error out if $REV is empty or not a valid revision.</source>
          <target state="translated">これは、$REVが空であるか、有効なリビジョンでない場合にエラーとなります。</target>
        </trans-unit>
        <trans-unit id="c8b7e8566771f37a03bc25eaec95675ffe82ba31" translate="yes" xml:space="preserve">
          <source>This will export the whole repository and import it into the existing empty repository. Except for reencoding commits that are not in UTF-8, it would be a one-to-one mirror.</source>
          <target state="translated">これはリポジトリ全体をエクスポートし、既存の空のリポジトリにインポートします。UTF-8 ではないコミットを再エンコードする以外は、1対1のミラーになります。</target>
        </trans-unit>
        <trans-unit id="5f851e29f67384fe2f487309701055635453a02c" translate="yes" xml:space="preserve">
          <source>This will list what commits you must have in order to extract from the bundle and will error out if you do not have them.</source>
          <target state="translated">これは、バンドルから抽出するために必要なコミットをリストアップし、それを持っていない場合はエラーになります。</target>
        </trans-unit>
        <trans-unit id="7ed8616207d4b6e51bdcbe1e7b524863a0139782" translate="yes" xml:space="preserve">
          <source>This will open your editor with a list of steps to be taken to perform your rebase.</source>
          <target state="translated">これにより、リベースを実行するためのステップのリストがエディタに表示されます。</target>
        </trans-unit>
        <trans-unit id="e9e68cbb3d1c11da9ad7575ebecc630d58996f10" translate="yes" xml:space="preserve">
          <source>This will prompt you for a commit message. You&amp;rsquo;ve now stored the first version of your project in Git.</source>
          <target state="translated">これにより、コミットメッセージの入力が求められます。これで、プロジェクトの最初のバージョンがGitに保存されました。</target>
        </trans-unit>
        <trans-unit id="9229da0c83ee0b71f5a22085b5f3b7e07e9ec55a" translate="yes" xml:space="preserve">
          <source>This will remove each of your commits from mywork, temporarily saving them as patches (in a directory named &lt;code&gt;.git/rebase-apply&lt;/code&gt;), update mywork to point at the latest version of origin, then apply each of the saved patches to the new mywork. The result will look like:</source>
          <target state="translated">これにより、各コミットがmyworkから削除され、一時的にパッチとして（ &lt;code&gt;.git/rebase-apply&lt;/code&gt; という名前のディレクトリに）保存され、myworkが最新バージョンのoriginを指すように更新され、保存された各パッチが新しいmyworkに適用されます。 。結果は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1c98be5284d00528a6b74a33ba778d044a767668" translate="yes" xml:space="preserve">
          <source>This will result in only b (a and c are cleared).</source>
          <target state="translated">これではb(aとcがクリアされている)だけになってしまいます。</target>
        </trans-unit>
        <trans-unit id="6c3d93fc8322db7b61293784540f1a03e7fd486e" translate="yes" xml:space="preserve">
          <source>This will run &lt;code&gt;git -C &amp;lt;repo&amp;gt; maintenance run&lt;/code&gt; for each value &lt;code&gt;&amp;lt;repo&amp;gt;&lt;/code&gt; in the multi-valued config variable &lt;code&gt;maintenance.repo&lt;/code&gt;.</source>
          <target state="translated">これにより、複数値の構成変数 &lt;code&gt;maintenance.repo&lt;/code&gt; の値 &lt;code&gt;&amp;lt;repo&amp;gt;&lt;/code&gt; ごとに &lt;code&gt;git -C &amp;lt;repo&amp;gt; maintenance run&lt;/code&gt; されます。</target>
        </trans-unit>
        <trans-unit id="0385ed25689cd3e1167020ff6e8ba549d1603871" translate="yes" xml:space="preserve">
          <source>This will set the property &lt;code&gt;svn:keywords&lt;/code&gt; to &lt;code&gt;FreeBSD=%H&lt;/code&gt; for the file &lt;code&gt;devel/py-tipper/Makefile&lt;/code&gt;.</source>
          <target state="translated">これにより、ファイル &lt;code&gt;devel/py-tipper/Makefile&lt;/code&gt; のプロパティ &lt;code&gt;svn:keywords&lt;/code&gt; が &lt;code&gt;FreeBSD=%H&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="61383e31770f578e5ee86310440dccd09a4e5008" translate="yes" xml:space="preserve">
          <source>This will show &quot;refs/heads/master&quot; but also &quot;refs/remote/other-repo/master&quot;, if such references exists.</source>
          <target state="translated">これは、&quot;refs/heads/master &quot;だけでなく、&quot;refs/remote/other-repo/master &quot;も表示されます。</target>
        </trans-unit>
        <trans-unit id="23dd2de32c54566f1df1adf9f6794600102b9c2b" translate="yes" xml:space="preserve">
          <source>This will start to clean, and you must confirm one by one in order to delete items. Please note that this action is not as efficient as the above two actions.</source>
          <target state="translated">これでクリーン化が始まりますので、項目を削除するには一つ一つ確認する必要があります。このアクションは上記2つのアクションに比べて効率が悪いので注意してください。</target>
        </trans-unit>
        <trans-unit id="9b7bbd24afc1c6a470a80ef47d5171b33809ea28" translate="yes" xml:space="preserve">
          <source>This works for any of the supported update procedures (&lt;code&gt;--checkout&lt;/code&gt;, &lt;code&gt;--rebase&lt;/code&gt;, etc.). The only change is the source of the target SHA-1. For example, &lt;code&gt;submodule update --remote --merge&lt;/code&gt; will merge upstream submodule changes into the submodules, while &lt;code&gt;submodule update
--merge&lt;/code&gt; will merge superproject gitlink changes into the submodules.</source>
          <target state="translated">これは、サポートされているすべての更新手順（ &lt;code&gt;--checkout&lt;/code&gt; 、-- &lt;code&gt;--rebase&lt;/code&gt; など）で機能します。唯一の変更は、ターゲットSHA-1のソースです。たとえば、 &lt;code&gt;submodule update --remote --merge&lt;/code&gt; はアップストリームサブモジュールの変更をサブモジュールにマージし、サブ &lt;code&gt;submodule update --merge&lt;/code&gt; はスーパープロジェクトのgitlink変更をサブモジュールにマージします。</target>
        </trans-unit>
        <trans-unit id="5a2ee7840b76b59e3aede30738fb578b292bc5f3" translate="yes" xml:space="preserve">
          <source>This works similarly to &lt;code&gt;svn update&lt;/code&gt; or &lt;code&gt;git pull&lt;/code&gt; except that it preserves linear history with &lt;code&gt;git rebase&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt; for ease of dcommitting with &lt;code&gt;git svn&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;svn update&lt;/code&gt; や &lt;code&gt;git pull&lt;/code&gt; と同様に機能しますが、 &lt;code&gt;git svn&lt;/code&gt; で簡単にコミットできるように &lt;code&gt;git merge&lt;/code&gt; ではなく &lt;code&gt;git rebase&lt;/code&gt; で線形履歴を保持します。</target>
        </trans-unit>
        <trans-unit id="5bc6c0e59c3e651570d66e12101e9a57040fd659" translate="yes" xml:space="preserve">
          <source>This would leave only one merge commit when your topic branch is finally ready and merged into the master branch. This merge would require you to resolve the conflict, introduced by the commits marked with &lt;code&gt;*&lt;/code&gt;. However, this conflict is often the same conflict you resolved when you created the test merge you blew away. &lt;code&gt;git rerere&lt;/code&gt; helps you resolve this final conflicted merge using the information from your earlier hand resolve.</source>
          <target state="translated">これにより、トピックブランチが最終的に準備され、マスターブランチにマージされるときに、マージコミットが1つだけ残ります。このマージでは、 &lt;code&gt;*&lt;/code&gt; でマークされたコミットによって引き起こされる競合を解決する必要があります。ただし、この競合は多くの場合、吹き飛ばしたテストマージを作成したときに解決したものと同じです。 &lt;code&gt;git rerere&lt;/code&gt; は、以前の手の解決からの情報を使用して、この最終的な競合するマージを解決するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dcd6f908de988995d9fff4cafd75d14bc0785c1a" translate="yes" xml:space="preserve">
          <source>This would leave the merge result in &lt;code&gt;hello.c~2&lt;/code&gt; file, along with conflict markers if there are conflicts. After verifying the merge result makes sense, you can tell Git what the final merge result for this file is by:</source>
          <target state="translated">これにより、競合がある場合は競合マーカーとともに、マージ結果が &lt;code&gt;hello.c~2&lt;/code&gt; ファイルに残ります。マージ結果が正しいことを確認したら、次のようにして、このファイルの最終的なマージ結果をGitに通知できます。</target>
        </trans-unit>
        <trans-unit id="cf5b7c750a4b16617dfd7cff20be48990a9d7985" translate="yes" xml:space="preserve">
          <source>This:</source>
          <target state="translated">This:</target>
        </trans-unit>
        <trans-unit id="ee3cacca7314105556d3050112f523980e59f973" translate="yes" xml:space="preserve">
          <source>Those snapshots aren&amp;rsquo;t necessarily all arranged in a single line from oldest to newest; instead, work may simultaneously proceed along parallel lines of development, called &lt;a href=&quot;#def_branch&quot;&gt;branches&lt;/a&gt;, which may merge and diverge.</source>
          <target state="translated">これらのスナップショットは、必ずしもすべてが古いものから新しいものへと1行に配置されているとは限りません。代わりに、&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;と呼ばれる並行した開発ラインに沿って作業が同時に進行し、マージおよび分岐する場合があります。</target>
        </trans-unit>
        <trans-unit id="7a5a53a50d0fbac4f3a27d9d2d5853146557d940" translate="yes" xml:space="preserve">
          <source>Though not required, it&amp;rsquo;s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</source>
          <target state="translated">必須ではありませんが、変更を要約した単一の短い（50文字未満）行でコミットメッセージを開始し、その後に空白行を入れてから、より詳細な説明を付けることをお勧めします。コミットメッセージの最初の空白行までのテキストはコミットタイトルとして扱われ、そのタイトルはGit全体で使用されます。たとえば、&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;はコミットをメールに変換し、件名のタイトルと本文の残りのコミットを使用します。</target>
        </trans-unit>
        <trans-unit id="fdd6ea0498f5dbe48e6926bc8c91e77146fa2184" translate="yes" xml:space="preserve">
          <source>Though, according to Wikipedia &lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;:</source>
          <target state="translated">しかし、ウィキペディアによれば&lt;a href=&quot;#3&quot;&gt;[3]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="18c9e3ce5bbbf77af11ba41f4d7a7d9b7a1aaa55" translate="yes" xml:space="preserve">
          <source>Thread Events</source>
          <target state="translated">スレッドイベント</target>
        </trans-unit>
        <trans-unit id="8850eee2783cf53d0af71d524467316d7d06a850" translate="yes" xml:space="preserve">
          <source>Thread messages added to a thread-proc.</source>
          <target state="translated">スレッドメッセージがスレッドプロックに追加されました。</target>
        </trans-unit>
        <trans-unit id="1501e9d814d273ed34cc6b50f1b5e25add4ac049" translate="yes" xml:space="preserve">
          <source>Three other shorthands exist, particularly useful for merge commits, for naming a set that is formed by a commit and its parent commits.</source>
          <target state="translated">他にも3つの短縮形があります。特にマージコミットでは、コミットとその親コミットで形成されるセットの名前を付けるのに便利です。</target>
        </trans-unit>
        <trans-unit id="8e23a87c8354d34eb4b513798d76048267e22ae4" translate="yes" xml:space="preserve">
          <source>Three steps:</source>
          <target state="translated">3つのステップ。</target>
        </trans-unit>
        <trans-unit id="cf3d01be00b3333c6ca36b4d1bb0a1a1c357a43f" translate="yes" xml:space="preserve">
          <source>Throw-away integration</source>
          <target state="translated">スローアウェイ統合</target>
        </trans-unit>
        <trans-unit id="c4780f4837eebde8ca1de31df251ef05e2361eb2" translate="yes" xml:space="preserve">
          <source>Thunderbird</source>
          <target state="translated">Thunderbird</target>
        </trans-unit>
        <trans-unit id="d5e84648e0355ba1080675ff57a3c64a03a76a7c" translate="yes" xml:space="preserve">
          <source>Thunderbird in particular is known to be problematic. Thunderbird users may wish to visit this web page for more information: &lt;a href=&quot;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&quot;&gt;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&lt;/a&gt;</source>
          <target state="translated">特にThunderbirdには問題があることが知られています。詳細については、ThunderbirdユーザーがこのWebページにアクセスすることをお&lt;a href=&quot;http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email&quot;&gt;勧めし&lt;/a&gt;ます。http：//kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email</target>
        </trans-unit>
        <trans-unit id="da473e9b687406079cfbc2672fddb50595865b5d" translate="yes" xml:space="preserve">
          <source>Thus we see that this tree has one file in it. The SHA-1 hash is a reference to that file&amp;rsquo;s data:</source>
          <target state="translated">したがって、このツリーには1つのファイルが含まれていることがわかります。SHA-1ハッシュは、そのファイルのデータへの参照です。</target>
        </trans-unit>
        <trans-unit id="309fb29079c2e5019b9d34cb235aee0452735a40" translate="yes" xml:space="preserve">
          <source>Thus you can, e.g., turn a library subdirectory into a repository of its own. Note the &lt;code&gt;--&lt;/code&gt; that separates &lt;code&gt;filter-branch&lt;/code&gt; options from revision options, and the &lt;code&gt;--all&lt;/code&gt; to rewrite all branches and tags.</source>
          <target state="translated">したがって、たとえば、ライブラリサブディレクトリを独自のリポジトリに変えることができます。 &lt;code&gt;filter-branch&lt;/code&gt; オプションとリビジョンオプションを区切る &lt;code&gt;--&lt;/code&gt; と、すべてのブランチとタグを書き換える &lt;code&gt;--all&lt;/code&gt; に注意してください。</target>
        </trans-unit>
        <trans-unit id="d35ca4f0ad7715e9f69a7f979c2424eb99273503" translate="yes" xml:space="preserve">
          <source>Thus, the following command:</source>
          <target state="translated">したがって、次のようなコマンドがあります。</target>
        </trans-unit>
        <trans-unit id="77cc1ec67e1af48d92e062ee397960be200bdf58" translate="yes" xml:space="preserve">
          <source>Thus, we can provide O(log N) lookup time for any number of packfiles.</source>
          <target state="translated">このようにして、我々は任意の数のpackfileに対してO(log N)のルックアップ時間を提供することができます。</target>
        </trans-unit>
        <trans-unit id="ae19d34e63a0724afdaaeabe3d0fe80af7f9e778" translate="yes" xml:space="preserve">
          <source>Time and date specified by the ISO 8601 standard, for example &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;. The parser accepts a space instead of the &lt;code&gt;T&lt;/code&gt; character as well.</source>
          <target state="translated">ISO 8601標準で指定された日時（例 &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt; 。パーサーは、 &lt;code&gt;T&lt;/code&gt; 文字の代わりにスペースも受け入れます。</target>
        </trans-unit>
        <trans-unit id="3919d9be78625e6edbfd2764a9b0e03204c6c677" translate="yes" xml:space="preserve">
          <source>Time and date specified by the ISO 8601 standard, for example &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;. The parser accepts a space instead of the &lt;code&gt;T&lt;/code&gt; character as well. Fractional parts of a second will be ignored, for example &lt;code&gt;2005-04-07T22:13:13.019&lt;/code&gt; will be treated as &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt;.</source>
          <target state="translated">ISO 8601規格で指定されている日時（例 &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt; 。パーサーは、 &lt;code&gt;T&lt;/code&gt; 文字の代わりにスペースも受け入れます。秒の &lt;code&gt;2005-04-07T22:13:13.019&lt;/code&gt; 部分は無視されます。たとえば、2005-04-07T22：13：13.019は &lt;code&gt;2005-04-07T22:13:13&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="0bac72478f018c225224e8417f521a2dad6209d3" translate="yes" xml:space="preserve">
          <source>Time zone values can be &quot;local&quot; (for local time zone that browser uses), &quot;utc&quot; (what gitweb uses when JavaScript or this feature is disabled), or numerical time zones in the form of &quot;+/-HHMM&quot;, such as &quot;+0200&quot;.</source>
          <target state="translated">タイムゾーンの値は、&quot;local&quot;(ブラウザが使用するローカルタイムゾーンの場合)、&quot;utc &quot;のいずれかになります。(JavaScript やこの機能が無効になっているときに gitweb が使用するもの)、あるいは &quot;+/HHMM&quot; のような形でタイムゾーンを数値化したもの、たとえば &quot;+0200&quot; のようなものです。</target>
        </trans-unit>
        <trans-unit id="396a560fd1658574279d941c34737eda5359f4fc" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) between the moment the connection is established and the client request is received (typically a rather low value, since that should be basically immediate).</source>
          <target state="translated">接続が確立されてからクライアントのリクエストを受信するまでのタイムアウト(秒単位)。</target>
        </trans-unit>
        <trans-unit id="0ae2f4dfeb0fa0aaf2833b3c271308d2190a4162" translate="yes" xml:space="preserve">
          <source>Timeout (in seconds) for specific client sub-requests. This includes the time it takes for the server to process the sub-request and the time spent waiting for the next client&amp;rsquo;s request.</source>
          <target state="translated">特定のクライアントサブリクエストのタイムアウト（秒単位）。これには、サーバーがサブリクエストを処理するのにかかる時間と、次のクライアントのリクエストを待つのに費やされる時間が含まれます。</target>
        </trans-unit>
        <trans-unit id="ad6b83abe0aada0e5e6aec8e7e7470429fd4ee37" translate="yes" xml:space="preserve">
          <source>Tips and tricks</source>
          <target state="translated">コツとコツ</target>
        </trans-unit>
        <trans-unit id="d7242682d2f91b131962f45ed3706e536d3cdcc6" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; more than two &lt;a href=&quot;#def_branch&quot;&gt;branches&lt;/a&gt;.</source>
          <target state="translated">3 つ以上の&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;を&lt;a href=&quot;#def_merge&quot;&gt;マージ&lt;/a&gt;する。</target>
        </trans-unit>
        <trans-unit id="f7305ba472ceab96976009902e7b731f8e52f311" translate="yes" xml:space="preserve">
          <source>To access refs, it&amp;rsquo;s best not to look inside &lt;code&gt;$GIT_DIR&lt;/code&gt; directly. Instead use commands such as &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; or &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; which will handle refs correctly.</source>
          <target state="translated">参照にアクセスするには、 &lt;code&gt;$GIT_DIR&lt;/code&gt; 内部を直接調べないことをお勧めします。代わりに、&lt;a href=&quot;git-update-ref&quot;&gt;参照を&lt;/a&gt;正しく処理&lt;a href=&quot;git-rev-parse&quot;&gt;するgit-rev-parse [1]&lt;/a&gt;やgit-update-ref [1]などのコマンドを使用してください。</target>
        </trans-unit>
        <trans-unit id="7c181af3380fe2a4df836df7796a5de6ef8d47c5" translate="yes" xml:space="preserve">
          <source>To access refs, it&amp;rsquo;s best not to look inside GIT_DIR directly. Instead use commands such as &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; or &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; which will handle refs correctly.</source>
          <target state="translated">refにアクセスするには、GIT_DIRの内部を直接調べないことをお勧めします。代わりに、&lt;a href=&quot;git-update-ref&quot;&gt;リファレンスを&lt;/a&gt;正しく処理&lt;a href=&quot;git-rev-parse&quot;&gt;するgit-rev-parse [1]&lt;/a&gt;やgit-update-ref [1]などのコマンドを使用してください。</target>
        </trans-unit>
        <trans-unit id="bdc5ec95e827bdeffd1f9aab0bef5dd1e05d0443" translate="yes" xml:space="preserve">
          <source>To achieve this, try to split your work into small steps from the very beginning. It is always easier to squash a few commits together than to split one big commit into several. Don&amp;rsquo;t be afraid of making too small or imperfect steps along the way. You can always go back later and edit the commits with &lt;code&gt;git rebase --interactive&lt;/code&gt; before you publish them. You can use &lt;code&gt;git stash push --keep-index&lt;/code&gt; to run the test suite independent of other uncommitted changes; see the EXAMPLES section of &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt;.</source>
          <target state="translated">これを達成するには、最初から作業を小さなステップに分割してみてください。 1つの大きなコミットをいくつかに分割するよりも、いくつかのコミットをつぶす方が常に簡単です。途中で小さすぎる、または不完全なステップを作成することを恐れないでください。いつでも後で戻って、公開する前に &lt;code&gt;git rebase --interactive&lt;/code&gt; でコミットを編集できます。 &lt;code&gt;git stash push --keep-index&lt;/code&gt; を使用して、他のコミットされていない変更とは関係なくテストスイートを実行できます。&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]の「使用&lt;/a&gt;例」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0fad63887775e60c970096082173b077cbcda459" translate="yes" xml:space="preserve">
          <source>To actually match only values with an exclamation mark, you have to</source>
          <target state="translated">感嘆符のついた値だけを実際にマッチさせるには、次のようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="0fea0d3a69770ac7053eba17165f8f811c0d830f" translate="yes" xml:space="preserve">
          <source>To add a new proxy, without altering any of the existing ones, use</source>
          <target state="translated">既存のプロキシを変更せずに新しいプロキシを追加するには</target>
        </trans-unit>
        <trans-unit id="6a37f3f129452efb4608e170beca8c23ff8dc189" translate="yes" xml:space="preserve">
          <source>To aid in debugging frontends fast-import ignores any line that begins with &lt;code&gt;#&lt;/code&gt; (ASCII pound/hash) up to and including the line ending &lt;code&gt;LF&lt;/code&gt;. A comment line may contain any sequence of bytes that does not contain an LF and therefore may be used to include any detailed debugging information that might be specific to the frontend and useful when inspecting a fast-import data stream.</source>
          <target state="translated">フロントエンドのデバッグを支援するために、高速インポートは &lt;code&gt;#&lt;/code&gt; （ASCIIポンド/ハッシュ）で始まり &lt;code&gt;LF&lt;/code&gt; までの行を含むすべての行を無視します。コメント行には、LFを含まないバイトシーケンスを含めることができるため、フロントエンドに固有であり、高速インポートデータストリームを検査するときに役立つ詳細なデバッグ情報を含めるために使用できます。</target>
        </trans-unit>
        <trans-unit id="285359187a2aff04e4ea763b2f3e4bbaf641190b" translate="yes" xml:space="preserve">
          <source>To assist in this, Git also provides the tag object&amp;hellip;​</source>
          <target state="translated">これを支援するために、Gitはタグオブジェクトも提供しています&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="39ed0e01aa6b6521a62db21f8653937d0b5ccadd" translate="yes" xml:space="preserve">
          <source>To avoid common misconfiguration mistakes, &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt; will abort with a warning if any configuration options for &quot;sendmail&quot; exist. Set this variable to bypass the check.</source>
          <target state="translated">一般的な設定ミスを回避するために、「sendmail」の設定オプションが存在する場合、&lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt;は警告とともに中止します。チェックをバイパスするには、この変数を設定します。</target>
        </trans-unit>
        <trans-unit id="b0021f1eb05e23f63eb7ccc2f58c52546ee61585" translate="yes" xml:space="preserve">
          <source>To avoid deadlock, such frontends must completely consume any pending output from &lt;code&gt;progress&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;get-mark&lt;/code&gt;, and &lt;code&gt;cat-blob&lt;/code&gt; before performing writes to fast-import that might block.</source>
          <target state="translated">デッドロックを回避するために、このようなフロントエンドは、ブロックする可能性がある高速インポートへの書き込みを実行する前に、 &lt;code&gt;progress&lt;/code&gt; 、 &lt;code&gt;ls&lt;/code&gt; 、 &lt;code&gt;get-mark&lt;/code&gt; 、および &lt;code&gt;cat-blob&lt;/code&gt; からの保留中の出力を完全に消費する必要があります。</target>
        </trans-unit>
        <trans-unit id="75e1daad195d404dc835c71216234df4a4676d4e" translate="yes" xml:space="preserve">
          <source>To avoid deleting a shared index file that is still used, its modification time is updated to the current time every time a new split index based on the shared index file is either created or read from.</source>
          <target state="translated">まだ使用されている共有インデックスファイルを削除しないようにするために、共有インデックスファイルに基づく新しいスプリットインデックスが作成されるたびに、その変更時刻が現在の時刻に更新されます。</target>
        </trans-unit>
        <trans-unit id="0b95bb4f949904cf33707d2a81be23c345f8e5aa" translate="yes" xml:space="preserve">
          <source>To avoid false positives (e.g. when a patch has been removed, and an unrelated patch has been added between two iterations of the same patch series), the cost matrix is extended to allow for that, by adding fixed-cost entries for wholesale deletes/adds.</source>
          <target state="translated">誤検出(例えば、パッチが削除され、同じパッチシリーズの2回の繰り返しの間に関連のないパッチが追加された場合など)を避けるために、コストマトリックスは、ホールセール削除/追加のための固定コストエントリを追加することで、それを可能にするように拡張されています。</target>
        </trans-unit>
        <trans-unit id="0fd573776931ed5e5643654b60eb3896366ed973" translate="yes" xml:space="preserve">
          <source>To avoid interfering with other worktrees, it first enables the &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; setting and makes sure to set the &lt;code&gt;core.sparseCheckout&lt;/code&gt; setting in the worktree-specific config file.</source>
          <target state="translated">他のワークツリーとの干渉を回避するために、最初に &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; 設定を有効にし、ワークツリー固有の構成ファイルで &lt;code&gt;core.sparseCheckout&lt;/code&gt; 設定を必ず設定します。</target>
        </trans-unit>
        <trans-unit id="3c2082115575958e10a9c1afdaf9ab0c9127b12a" translate="yes" xml:space="preserve">
          <source>To avoid recording unrelated changes in the merge commit, &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; will also abort if there are any changes registered in the index relative to the &lt;code&gt;HEAD&lt;/code&gt; commit. (Special narrow exceptions to this rule may exist depending on which merge strategy is in use, but generally, the index must match HEAD.)</source>
          <target state="translated">マージコミットで無関係な変更が記録されないように、 &lt;code&gt;HEAD&lt;/code&gt; コミットに関連するインデックスに変更が登録されている場合、 &lt;code&gt;git pull&lt;/code&gt; と &lt;code&gt;git merge&lt;/code&gt; も中止されます。（使用しているマージ戦略によっては、このルールに対する特別な狭い例外が存在する場合がありますが、通常、インデックスはHEADと一致する必要があります。）</target>
        </trans-unit>
        <trans-unit id="3066556f3c40d15744968614a5fc8c1e23bf8a7b" translate="yes" xml:space="preserve">
          <source>To avoid typing long email addresses, point this to one or more email aliases files. You must also supply &lt;code&gt;sendemail.aliasFileType&lt;/code&gt;.</source>
          <target state="translated">長いメールアドレスを入力しないようにするには、これを1つ以上のメールエイリアスファイルにポイントします。 &lt;code&gt;sendemail.aliasFileType&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c4b87fbf313d264308ea989e0e3b9a4c3d776c25" translate="yes" xml:space="preserve">
          <source>To bootstrap the process, you can first create a bundle that does not have any basis. You can use a tag to remember up to what commit you last processed, in order to make it easy to later update the other repository with an incremental bundle:</source>
          <target state="translated">プロセスをブートストラップするには、まずベースを持たないバンドルを作成します。タグを使って最後に処理したコミットまで覚えておくことで、後からインクリメンタルバンドルで他のリポジトリを更新しやすくすることができます。</target>
        </trans-unit>
        <trans-unit id="9d8840568125195e79747db7654d577582e9ce27" translate="yes" xml:space="preserve">
          <source>To change which notes are shown by &lt;code&gt;git log&lt;/code&gt;, see the &quot;notes.displayRef&quot; configuration in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; で表示されるメモを変更するには、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;の「notes.displayRef」設定を参照してください。</target>
        </trans-unit>
        <trans-unit id="97883ec3271fcc02269394ee0880b3655a6f452f" translate="yes" xml:space="preserve">
          <source>To check out commit &lt;code&gt;HEAD~3&lt;/code&gt; for temporary inspection or experiment without creating a new branch:</source>
          <target state="translated">新しいブランチを作成せずに一時的な検査または実験のためにコミット &lt;code&gt;HEAD~3&lt;/code&gt; をチェックアウトするには：</target>
        </trans-unit>
        <trans-unit id="d144f3be27bf6711b21fc83fdbf3f1e8ff9fc321" translate="yes" xml:space="preserve">
          <source>To commit a tree you have instantiated with &lt;code&gt;git write-tree&lt;/code&gt;, you&amp;rsquo;d create a &quot;commit&quot; object that refers to that tree and the history behind it&amp;mdash;​most notably the &quot;parent&quot; commits that preceded it in history.</source>
          <target state="translated">&lt;code&gt;git write-tree&lt;/code&gt; でインスタンス化したツリーをコミットするには、そのツリーとその背後の履歴を参照する「コミット」オブジェクトを作成します。特に、履歴の前にある「親」コミットが顕著です。</target>
        </trans-unit>
        <trans-unit id="05e44c536d85ee3801aa2c0d698cefa8d09c4c33" translate="yes" xml:space="preserve">
          <source>To completely remove a submodule, manually delete &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt;.</source>
          <target state="translated">サブモジュールを完全に削除するには、 &lt;code&gt;$GIT_DIR/modules/&amp;lt;name&amp;gt;/&lt;/code&gt; 手動で削除します。</target>
        </trans-unit>
        <trans-unit id="27c15a86c7e79c3805e163825e563ceb0da18b5a" translate="yes" xml:space="preserve">
          <source>To control which revisions to show, gitk supports most options applicable to the &lt;code&gt;git rev-list&lt;/code&gt; command. It also supports a few options applicable to the &lt;code&gt;git diff-*&lt;/code&gt; commands to control how the changes each commit introduces are shown. Finally, it supports some gitk-specific options.</source>
          <target state="translated">表示するリビジョンを制御するために、gitkは &lt;code&gt;git rev-list&lt;/code&gt; コマンドに適用できるほとんどのオプションをサポートしています。また、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドに適用可能ないくつかのオプションをサポートし、各コミットがもたらす変更の表示方法を制御します。最後に、いくつかのgitk固有のオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="777e371b82028c9765bc912013f44d79febb95a6" translate="yes" xml:space="preserve">
          <source>To cope with such a situation, after the inner &lt;code&gt;git bisect&lt;/code&gt; finds the next revision to test, the script can apply the patch before compiling, run the real test, and afterwards decide if the revision (possibly with the needed patch) passed the test and then rewind the tree to the pristine state. Finally the script should exit with the status of the real test to let the &lt;code&gt;git bisect run&lt;/code&gt; command loop determine the eventual outcome of the bisect session.</source>
          <target state="translated">このような状況に対処するため、内部 &lt;code&gt;git bisect&lt;/code&gt; がテストする次のリビジョンを見つけた後、スクリプトはコンパイルする前にパッチを適用し、実際のテストを実行し、その後、リビジョン（おそらく必要なパッチを含む）がテストに合格したかどうかを判断します。次に、ツリーを元の状態に戻します。最後に、スクリプトは実際のテストのステータスで終了し、 &lt;code&gt;git bisect run&lt;/code&gt; コマンドループがbisectセッションの最終的な結果を決定できるようにします。</target>
        </trans-unit>
        <trans-unit id="8674c1ca562e6ecc34e19d2429ea897e7602bd28" translate="yes" xml:space="preserve">
          <source>To create your own local live copy of such a &quot;raw&quot; Git repository, you&amp;rsquo;d first create your own subdirectory for the project, and then copy the raw repository contents into the &lt;code&gt;.git&lt;/code&gt; directory. For example, to create your own copy of the Git repository, you&amp;rsquo;d do the following</source>
          <target state="translated">そのような「生の」Gitリポジトリの独自のローカルライブコピーを作成するには、まずプロジェクト用に独自のサブディレクトリを作成し、次に生のリポジトリコンテンツを &lt;code&gt;.git&lt;/code&gt; ディレクトリにコピーします。たとえば、Gitリポジトリの独自のコピーを作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="495be7922d2a293092e6f366efd8045104e01478" translate="yes" xml:space="preserve">
          <source>To define a custom merge driver &lt;code&gt;filfre&lt;/code&gt;, add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">カスタムマージドライバー &lt;code&gt;filfre&lt;/code&gt; を定義するには、次のようにセクションを &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）に追加します。</target>
        </trans-unit>
        <trans-unit id="369d97c17e3edbb633e139fcbb4d6a1ea94c1201" translate="yes" xml:space="preserve">
          <source>To define an external diff driver &lt;code&gt;jcdiff&lt;/code&gt;, add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">外部差分ドライバー &lt;code&gt;jcdiff&lt;/code&gt; を定義するには、次のように &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）にセクションを追加します。</target>
        </trans-unit>
        <trans-unit id="302897a013466c7a33ee45af87c508a98422abd4" translate="yes" xml:space="preserve">
          <source>To delete the entry for renames, do</source>
          <target state="translated">リネームのエントリを削除するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f31f6b0ae1c80bea942e287ae0ab318c31ede1f4" translate="yes" xml:space="preserve">
          <source>To determine the location of the repository on disk, &lt;code&gt;git http-backend&lt;/code&gt; concatenates the environment variables PATH_INFO, which is set automatically by the web server, and GIT_PROJECT_ROOT, which must be set manually in the web server configuration. If GIT_PROJECT_ROOT is not set, &lt;code&gt;git http-backend&lt;/code&gt; reads PATH_TRANSLATED, which is also set automatically by the web server.</source>
          <target state="translated">ディスク上のリポジトリの場所を特定するために、 &lt;code&gt;git http-backend&lt;/code&gt; は、Webサーバーによって自動的に設定される環境変数PATH_INFOと、Webサーバー構成で手動で設定する必要があるGIT_PROJECT_ROOTを連結します。GIT_PROJECT_ROOTが設定されていない場合、 &lt;code&gt;git http-backend&lt;/code&gt; はPATH_TRANSLATEDを読み取ります。これもWebサーバーによって自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="b99f7180a07f9dbb13dde063c76c98dd5e2d7887" translate="yes" xml:space="preserve">
          <source>To disable features that accept parameters (are configurable), you need to set this element to empty list i.e. &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">パラメーターを受け入れる（構成可能）機能を無効にするには、この要素を空のリスト、つまり &lt;code&gt;[]&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="43f3c91605c9cb6d680c0ea9cf4c1bb2e77b4d9d" translate="yes" xml:space="preserve">
          <source>To disable interactive logins, displaying a greeting instead:</source>
          <target state="translated">インタラクティブログインを無効にするには、代わりに挨拶を表示します。</target>
        </trans-unit>
        <trans-unit id="2e78622c40c98dec97477af783b12ba20d12cc1a" translate="yes" xml:space="preserve">
          <source>To display the &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; man page, use &lt;code&gt;git help git&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;git&quot;&gt;git [1]の&lt;/a&gt; manページを表示するには、 &lt;code&gt;git help git&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fa4dddf358b16e56494c90923230fd025e6f958d" translate="yes" xml:space="preserve">
          <source>To do automatic tag object dereferencing, use the &quot;-d&quot; or &quot;--dereference&quot; flag, so you can do</source>
          <target state="translated">タグオブジェクトの自動参照を行うには、&quot;-d&quot; または &quot;--dereference&quot; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="1e8ea8767cf483c97d6a2e7fcf2209ed742ecdf8" translate="yes" xml:space="preserve">
          <source>To do so, you can specify a &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; pattern with the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute. For example, the following pattern sets all C files to use UTF-16LE-BOM, which is a common encoding on Windows:</source>
          <target state="translated">これを行うには、 &lt;code&gt;working-tree-encoding&lt;/code&gt; 属性を使用して&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;パターンを指定できます。たとえば、次のパターンは、Windowsで一般的なエンコーディングであるUTF-16LE-BOMを使用するようにすべてのCファイルを設定します。</target>
        </trans-unit>
        <trans-unit id="dc05ce874d6baee1eae11d94d6fd56f1e0a6d0ed" translate="yes" xml:space="preserve">
          <source>To do the merge, do</source>
          <target state="translated">マージを行うには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="45ed93b09b65e276ec2ef33a1d9d7c3e10d14bfe" translate="yes" xml:space="preserve">
          <source>To do this, the current maintenance branch is copied to another branch named with the previous release version number (e.g. maint-X.Y.(Z-1) where X.Y.Z is the current release).</source>
          <target state="translated">これを行うには、現在のメンテナンスブランチを、前のリリースのバージョン番号を持つ別のブランチにコピーします (例:maint-X.Y.(Z-1)X.Y.Z は現在のリリースです)。</target>
        </trans-unit>
        <trans-unit id="380aa6a091a04ad8bbf89399d1982760e370374e" translate="yes" xml:space="preserve">
          <source>To drop a commit, replace the command &quot;pick&quot; with &quot;drop&quot;, or just delete the matching line.</source>
          <target state="translated">コミットを削除するには、コマンド &quot;pick&quot; を &quot;drop&quot; に置き換えるか、一致する行を削除します。</target>
        </trans-unit>
        <trans-unit id="e05b8854f808624747710c5e1d641ee4dabaf30c" translate="yes" xml:space="preserve">
          <source>To elaborate, &quot;reading&quot; means checking for file existence, reading file attributes or file content. The working directory version may be present or absent. If present, its content may match against the index version or not. Writing is not affected by this bit, content safety is still first priority. Note that Git &lt;code&gt;can&lt;/code&gt; update working directory file, that is marked skip-worktree, if it is safe to do so (i.e. working directory version matches index version)</source>
          <target state="translated">詳しく説明すると、「読み取り」とは、ファイルの存在を確認すること、ファイル属性またはファイルの内容を読み取ることを意味します。作業ディレクトリのバージョンが存在する場合と存在しない場合があります。存在する場合、そのコンテンツはインデックスバージョンと一致するかどうかにかかわらず、一致しない場合があります。書き込みはこのビットの影響を受けません。コンテンツの安全性は依然として最優先事項です。Git は、安全に実行できる場合は、skip-worktreeとマークされている作業ディレクトリファイル &lt;code&gt;can&lt;/code&gt; 更新できることに注意してください（つまり、作業ディレクトリのバージョンはインデックスのバージョンと一致します）。</target>
        </trans-unit>
        <trans-unit id="64ecd7272d648bbcdba5e527a1a80e43cb0705c5" translate="yes" xml:space="preserve">
          <source>To enable &lt;code&gt;git archive --remote&lt;/code&gt; and disable &lt;code&gt;git fetch&lt;/code&gt; against a repository, have the following in the configuration file in the repository (that is the file &lt;code&gt;config&lt;/code&gt; next to &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;refs&lt;/code&gt; and &lt;code&gt;objects&lt;/code&gt;).</source>
          <target state="translated">有効にするには &lt;code&gt;git archive --remote&lt;/code&gt; し、無効に &lt;code&gt;git fetch&lt;/code&gt; （ファイルのあるリポジトリ内の構成ファイルに次のように持って、リポジトリに対して &lt;code&gt;config&lt;/code&gt; 次へ &lt;code&gt;HEAD&lt;/code&gt; 、 &lt;code&gt;refs&lt;/code&gt; および &lt;code&gt;objects&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="af7d8457fff28a2087e0f74bc51d0468026a9bff" translate="yes" xml:space="preserve">
          <source>To enable a target, set the corresponding environment variable or system or global config value to one of the following:</source>
          <target state="translated">ターゲットを有効にするには、対応する環境変数、システムまたはグローバル設定値を以下のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="01e6eac26c3bbc386ab13c8cd6a9167801f24836" translate="yes" xml:space="preserve">
          <source>To enable anonymous read access but authenticated write access, require authorization for both the initial ref advertisement (which we detect as a push via the service parameter in the query string), and the receive-pack invocation itself:</source>
          <target state="translated">匿名の読み取りアクセスと認証された書き込みアクセスを可能にするには、最初の ref 広告 (クエリ文字列のサービス・パラメータを介したプッシュとして検出されます)と受信パックの呼び出し自体の両方に認証が必要です。</target>
        </trans-unit>
        <trans-unit id="9bda367b82f8881561a1128afb27f36988891c35" translate="yes" xml:space="preserve">
          <source>To enable anonymous read access but authenticated write access:</source>
          <target state="translated">匿名の読み取りアクセスを有効にするが、認証された書き込みアクセスを有効にする。</target>
        </trans-unit>
        <trans-unit id="050d5472dcd3f05f019f9a8129d0bb6d5e205df8" translate="yes" xml:space="preserve">
          <source>To enable blame, pickaxe search, and snapshot support (allowing &quot;tar.gz&quot; and &quot;zip&quot; snapshots), while allowing individual projects to turn them off, put the following in your GITWEB_CONFIG file:</source>
          <target state="translated">blame、pickaxe 検索、スナップショットのサポートを有効にし(&quot;tar.gz&quot; と &quot;zip&quot; スナップショットを許可)、個々のプロジェクトでそれらをオフにするには、GITWEB_CONFIG ファイルに以下のように記述します。</target>
        </trans-unit>
        <trans-unit id="fa7174e314ce7012972664ac5bcf82d4b390a6d5" translate="yes" xml:space="preserve">
          <source>To enable git-cvsserver access (which should generally have the &lt;code&gt;no-interactive-login&lt;/code&gt; example above as a prerequisite, as creating the git-shell-commands directory allows interactive logins):</source>
          <target state="translated">git-cvsserverアクセス​​を有効にするには（通常、git-shell-commandsディレクトリを作成するとインタラクティブなログインが可能になるため、上記の &lt;code&gt;no-interactive-login&lt;/code&gt; の例を前提条件とする必要があります）：</target>
        </trans-unit>
        <trans-unit id="69aa803d2928631745bb26ea6d720a34de175dd7" translate="yes" xml:space="preserve">
          <source>To enable that additional nice feature, when a bisection is started and when some good commits are not ancestors of the bad commit, we first compute the merge bases between the bad and the good commits and we chose these merge bases as the first commits that will be checked out and tested.</source>
          <target state="translated">この追加機能を有効にするために、二分法が開始され、いくつかの良いコミットが悪いコミットの祖先ではない場合には、まず悪いコミットと良いコミットのマージベースを計算し、これらのマージベースを最初にチェックアウトしてテストするコミットとして選択します。</target>
        </trans-unit>
        <trans-unit id="ba44f6ad0a0230b79b3149aabc029b57fd7f22d9" translate="yes" xml:space="preserve">
          <source>To enable the sparse-checkout feature, run &lt;code&gt;git sparse-checkout init&lt;/code&gt; to initialize a simple sparse-checkout file and enable the &lt;code&gt;core.sparseCheckout&lt;/code&gt; config setting. Then, run &lt;code&gt;git sparse-checkout set&lt;/code&gt; to modify the patterns in the sparse-checkout file.</source>
          <target state="translated">スパースチェックアウト機能を有効にするには、 &lt;code&gt;git sparse-checkout init&lt;/code&gt; を実行してシンプルなスパースチェックアウトファイルを初期化し、 &lt;code&gt;core.sparseCheckout&lt;/code&gt; 構成設定を有効にします。次に、 &lt;code&gt;git sparse-checkout set&lt;/code&gt; を実行して、sparse-checkoutファイルのパターンを変更します。</target>
        </trans-unit>
        <trans-unit id="1318b73efc503f41a06d5d140c646ee25cf7e427" translate="yes" xml:space="preserve">
          <source>To exclude commits reachable from a commit, a prefix &lt;code&gt;^&lt;/code&gt; notation is used. E.g. &lt;code&gt;^r1 r2&lt;/code&gt; means commits reachable from &lt;code&gt;r2&lt;/code&gt; but exclude the ones reachable from &lt;code&gt;r1&lt;/code&gt; (i.e. &lt;code&gt;r1&lt;/code&gt; and its ancestors).</source>
          <target state="translated">コミットから到達可能なコミットを除外するには、プレフィックス &lt;code&gt;^&lt;/code&gt; 表記を使用します。たとえば、 &lt;code&gt;^r1 r2&lt;/code&gt; は、 &lt;code&gt;r2&lt;/code&gt; から到達可能なコミットを意味しますが、 &lt;code&gt;r1&lt;/code&gt; から到達可能なコミット（つまり、 &lt;code&gt;r1&lt;/code&gt; とその祖先）を除外します。</target>
        </trans-unit>
        <trans-unit id="a12d809ea9b20c2b561957b059e3fe943cb6e440" translate="yes" xml:space="preserve">
          <source>To find out how the result can be used, just read on in &lt;code&gt;cmd_cat_file()&lt;/code&gt;:</source>
          <target state="translated">結果の使用方法を確認するには、 &lt;code&gt;cmd_cat_file()&lt;/code&gt; を読みます。</target>
        </trans-unit>
        <trans-unit id="338cdf0c3d82152dc96e1eae9cd9922bf736e76c" translate="yes" xml:space="preserve">
          <source>To get a checkout with the Eclipse CVS client:</source>
          <target state="translated">EclipseのCVSクライアントでチェックアウトを取得するには</target>
        </trans-unit>
        <trans-unit id="976f859125db1311d8f82bb8df703ef2ad537fd0" translate="yes" xml:space="preserve">
          <source>To get a reminder of the currently used terms, use</source>
          <target state="translated">現在使用されている用語のリマインダーを取得するには</target>
        </trans-unit>
        <trans-unit id="68b714c59ff5898ff58433a2938d52aeb27df43e" translate="yes" xml:space="preserve">
          <source>To get started with gitweb, run &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; from a Git repository. This would configure and start your web server, and run web browser pointing to gitweb.</source>
          <target state="translated">gitwebを使い始めるには、Gitリポジトリから&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;実行します。これにより、Webサーバーが構成されて起動し、gitwebを指すWebブラウザーが実行されます。</target>
        </trans-unit>
        <trans-unit id="bf62a03860b36b4b6a615592146052d88035a5f4" translate="yes" xml:space="preserve">
          <source>To get the &quot;base&quot; for the merge, look up the common parent of two commits:</source>
          <target state="translated">マージの &quot;ベース&quot; を取得するには、2 つのコミットの共通の親を調べます。</target>
        </trans-unit>
        <trans-unit id="ec1f343ca45777aa33e95b7222bfb7658aa36062" translate="yes" xml:space="preserve">
          <source>To get the feature/bugfix into an integration branch, simply merge it. If the topic has evolved further in the meantime, merge again. (Note that you do not necessarily have to merge it to the oldest integration branch first. For example, you can first merge a bugfix to &lt;code&gt;next&lt;/code&gt;, give it some testing time, and merge to &lt;code&gt;maint&lt;/code&gt; when you know it is stable.)</source>
          <target state="translated">機能/バグ修正を統合ブランチに入れるには、単にそれをマージします。その間にトピックがさらに進化した場合は、再度マージしてください。（必ずしも最も古い統合ブランチに最初にマージする必要はないことに注意してください。たとえば、最初にバグ修正を &lt;code&gt;next&lt;/code&gt; にマージし、テスト時間を与え、安定していることがわかったら &lt;code&gt;maint&lt;/code&gt; にマージできます。）</target>
        </trans-unit>
        <trans-unit id="60ae758b58fc83602f1720fb9cc2f0f4fb30b090" translate="yes" xml:space="preserve">
          <source>To give some hard figures, we used to have an average report-to-fix cycle of 142.6 hours (according to our somewhat weird bug-tracker which just measures wall-clock time). Since we moved to Git, we&amp;rsquo;ve lowered that to 16.2 hours. Primarily because we can stay on top of the bug fixing now, and because everyone&amp;rsquo;s jockeying to get to fix bugs (we&amp;rsquo;re quite proud of how lazy we are to let Git find the bugs for us). Each new release results in ~40% fewer bugs (almost certainly due to how we now feel about writing tests).</source>
          <target state="translated">いくつかの明確な数字を与えるために、私たちは142.6時間の平均レポートから修正までのサイクルを使用していました（壁時計の時間を測定するだけの奇妙なバグトラッカーによると）。 Gitに移行したので、これを16.2時間に減らしました。主な理由は、今はバグ修正の最上位にいることができるため、そしてバグを修正するためにみんながジョッキーしているためです（Gitにバグを見つけてもらうのがどれほど面倒かを私たちは非常に誇りに思っています）。新しいリリースごとに、バグが最大で40％減少します（ほとんどの場合、テストの作成についての感想が原因です）。</target>
        </trans-unit>
        <trans-unit id="cc855cb566c405d222e3a3236275bbad376833c3" translate="yes" xml:space="preserve">
          <source>To help with that, &lt;code&gt;range&lt;/code&gt; uses the &lt;code&gt;--dual-color&lt;/code&gt; mode by default. In this mode, the diff of diffs will retain the original diff colors, and prefix the lines with -/+ markers that have their &lt;strong&gt;background&lt;/strong&gt; red or green, to make it more obvious that they describe how the diff itself changed.</source>
          <target state="translated">これを支援するために、 &lt;code&gt;range&lt;/code&gt; はデフォルトで &lt;code&gt;--dual-color&lt;/code&gt; モードを使用します。このモードでは、diffのdiffは元のdiffの色を保持し、行の前に-/ +マーカーを付けて&lt;strong&gt;背景を&lt;/strong&gt;赤または緑にして、diff自体がどのように変更されたかを明確に示します。</target>
        </trans-unit>
        <trans-unit id="096c5d9029f3f58b2af501ec17fb5d42ac0f73fe" translate="yes" xml:space="preserve">
          <source>To illustrate the difference between &lt;code&gt;-S&amp;lt;regex&amp;gt; --pickaxe-regex&lt;/code&gt; and &lt;code&gt;-G&amp;lt;regex&amp;gt;&lt;/code&gt;, consider a commit with the following diff in the same file:</source>
          <target state="translated">&lt;code&gt;-S&amp;lt;regex&amp;gt; --pickaxe-regex&lt;/code&gt; と &lt;code&gt;-G&amp;lt;regex&amp;gt;&lt;/code&gt; の違いを説明するために、同じファイルで次のdiffを使用したコミットを検討してください。</target>
        </trans-unit>
        <trans-unit id="e67d6de21feaa90def83753eb253a23faea561fa" translate="yes" xml:space="preserve">
          <source>To illustrate, suppose you are in a situation where someone develops a &lt;code&gt;subsystem&lt;/code&gt; branch, and you are working on a &lt;code&gt;topic&lt;/code&gt; that is dependent on this &lt;code&gt;subsystem&lt;/code&gt;. You might end up with a history like the following:</source>
          <target state="translated">例として、誰かが &lt;code&gt;subsystem&lt;/code&gt; ブランチを開発し、この &lt;code&gt;subsystem&lt;/code&gt; 依存する &lt;code&gt;topic&lt;/code&gt; で作業している状況を想定します。次のような履歴になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a98d25733140cb4450fff563f123b0d4cafeb9f9" translate="yes" xml:space="preserve">
          <source>To interrupt the rebase (just like an &quot;edit&quot; command would do, but without cherry-picking any commit first), use the &quot;break&quot; command.</source>
          <target state="translated">リベースを中断するには (「edit」コマンドと同じように、最初にコミットを選択しないように)、「break」コマンドを使ってください。</target>
        </trans-unit>
        <trans-unit id="f6408dba3913ebdb903fdfce1d68f1906d3e56f0" translate="yes" xml:space="preserve">
          <source>To look at only non-zero stages, use &lt;code&gt;--unmerged&lt;/code&gt; flag:</source>
          <target state="translated">ゼロ以外のステージのみを表示するには、 &lt;code&gt;--unmerged&lt;/code&gt; フラグを使用します。</target>
        </trans-unit>
        <trans-unit id="5b273f729e50c3bb1996889c896c925cce764cd8" translate="yes" xml:space="preserve">
          <source>To make it readable, we can tell &lt;code&gt;git diff-files&lt;/code&gt; to output the differences as a patch, using the &lt;code&gt;-p&lt;/code&gt; flag:</source>
          <target state="translated">読みやすくするために、 &lt;code&gt;-p&lt;/code&gt; フラグを使用して、違いをパッチとして出力するように &lt;code&gt;git diff-files&lt;/code&gt; に指示できます。</target>
        </trans-unit>
        <trans-unit id="9fa7b34f2837aaeca157590c3f1e04cfe3400ecb" translate="yes" xml:space="preserve">
          <source>To make referencing the final pathname simpler, you can map each path component; so if you also anonymize &lt;code&gt;subdir&lt;/code&gt; to &lt;code&gt;publicdir&lt;/code&gt;, then the final pathname would be &lt;code&gt;publicdir/bar.c&lt;/code&gt;.</source>
          <target state="translated">最終パス名の参照を簡単にするために、各パスコンポーネントをマップできます。あなたはまた、匿名ならば &lt;code&gt;subdir&lt;/code&gt; に &lt;code&gt;publicdir&lt;/code&gt; 、最終的なパス名は次のようになり &lt;code&gt;publicdir/bar.c&lt;/code&gt; に。</target>
        </trans-unit>
        <trans-unit id="5411ef1231b1da2dbabaf49f4348af685832f2f7" translate="yes" xml:space="preserve">
          <source>To move the whole tree into a subdirectory, or remove it from there:</source>
          <target state="translated">ツリー全体をサブディレクトリに移動したり、そこから削除したりするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="9fef1883cb2bb53007927c93e3d8f7431145efad" translate="yes" xml:space="preserve">
          <source>To perform a three-way merge, you start with the two commits you want to merge, find their closest common parent (a third commit), and compare the trees corresponding to these three commits.</source>
          <target state="translated">三者間マージを実行するには、まずマージしたい二つのコミットから始め、その共通の親 (三番目のコミット)を見つけ、その三つのコミットに対応するツリーを比較します。</target>
        </trans-unit>
        <trans-unit id="a35f3e8a10774da4c0b0f3f87118660d7ef9889e" translate="yes" xml:space="preserve">
          <source>To place a higher stage entry to the index, the path should first be removed by feeding a mode=0 entry for the path, and then feeding necessary input lines in the third format.</source>
          <target state="translated">より高いステージのエントリをインデックスに配置するためには、まずパスに対してmode=0のエントリを与えてパスを削除し、次に第3のフォーマットで必要な入力行を与えるべきである。</target>
        </trans-unit>
        <trans-unit id="26b0cbf1bc1090821ae6f59cac15f02ec7f562f8" translate="yes" xml:space="preserve">
          <source>To prepare for working on &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;, switch to it by updating the index and the files in the working tree, and by pointing &lt;code&gt;HEAD&lt;/code&gt; at the branch. Local modifications to the files in the working tree are kept, so that they can be committed to the &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; での作業の準備をするには、作業ツリー内のインデックスとファイルを更新し、ブランチに &lt;code&gt;HEAD&lt;/code&gt; をポイントして、それに切り替えます。作業ツリー内のファイルへのローカル変更は保持されるため、 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; にコミットできます。</target>
        </trans-unit>
        <trans-unit id="13739c43ac679e23fc4c2d09478ac31e5293cb15" translate="yes" xml:space="preserve">
          <source>To pretend you have a file at path with mode and sha1, say:</source>
          <target state="translated">パスにモードと sha1 を持つファイルがあると仮定します。</target>
        </trans-unit>
        <trans-unit id="6785e6ba620455f331d4a09eb8363e2600eabf25" translate="yes" xml:space="preserve">
          <source>To prevent a $GIT_DIR/worktrees entry from being pruned (which can be useful in some situations, such as when the entry&amp;rsquo;s working tree is stored on a portable device), use the &lt;code&gt;git worktree lock&lt;/code&gt; command, which adds a file named &lt;code&gt;locked&lt;/code&gt; to the entry&amp;rsquo;s directory. The file contains the reason in plain text. For example, if a linked working tree&amp;rsquo;s &lt;code&gt;.git&lt;/code&gt; file points to &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; then a file named &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; will prevent the &lt;code&gt;test-next&lt;/code&gt; entry from being pruned. See &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; for details.</source>
          <target state="translated">$ GIT_DIRを防ぐために/（そのようなエントリの作業ツリーをポータブルデバイスに保存されている場合など、いくつかの状況で便利です）剪定されてからのエントリ、使用worktrees &lt;code&gt;git worktree lock&lt;/code&gt; という名前のファイルを追加するコマンド、 &lt;code&gt;locked&lt;/code&gt; へのエントリのディレクトリ。ファイルには理由がプレーンテキストで含まれています。例えば、作業ツリーのリンク場合は &lt;code&gt;.git&lt;/code&gt; するために、ファイルのポイントを &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; その後、名前のファイル &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; を防ぐことができます &lt;code&gt;test-next&lt;/code&gt; 剪定からの次のエントリー。詳細については、&lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="af2e73e27abe3e4382121e1f7c2af8f2dfcf3321" translate="yes" xml:space="preserve">
          <source>To prevent a &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; entry from being pruned (which can be useful in some situations, such as when the entry&amp;rsquo;s working tree is stored on a portable device), use the &lt;code&gt;git worktree lock&lt;/code&gt; command, which adds a file named &lt;code&gt;locked&lt;/code&gt; to the entry&amp;rsquo;s directory. The file contains the reason in plain text. For example, if a linked working tree&amp;rsquo;s &lt;code&gt;.git&lt;/code&gt; file points to &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; then a file named &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; will prevent the &lt;code&gt;test-next&lt;/code&gt; entry from being pruned. See &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; for details.</source>
          <target state="translated">防ぐには &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; （そのようなエントリの作業ツリーをポータブルデバイスに保存されている場合など、いくつかの状況で便利です）剪定されてからのエントリ、使用 &lt;code&gt;git worktree lock&lt;/code&gt; という名前のファイルを追加するコマンド、 &lt;code&gt;locked&lt;/code&gt; へのエントリのディレクトリ。ファイルには、理由がプレーンテキストで含まれています。例えば、作業ツリーのリンク場合は &lt;code&gt;.git&lt;/code&gt; するために、ファイルのポイントを &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; その後、名前のファイル &lt;code&gt;/path/main/.git/worktrees/test-next/locked&lt;/code&gt; を防ぐことができます &lt;code&gt;test-next&lt;/code&gt; 剪定からの次のエントリ。詳細については、&lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="46ac404b2baca4d3a659bb0594db0c41828389ed" translate="yes" xml:space="preserve">
          <source>To prevent these unnecessary merge conflicts, Git can be told to run a virtual check-out and check-in of all three stages of a file when resolving a three-way merge by setting the &lt;code&gt;merge.renormalize&lt;/code&gt; configuration variable. This prevents changes caused by check-in conversion from causing spurious merge conflicts when a converted file is merged with an unconverted file.</source>
          <target state="translated">これらの不要なマージの競合を防ぐために、 &lt;code&gt;merge.renormalize&lt;/code&gt; 構成変数を設定して、3者間マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトおよびチェックインを実行するようにGitに指示できます。これにより、変換されたファイルが未変換のファイルとマージされるときに、チェックイン変換によって引き起こされる変更が誤ったマージの競合を引き起こすのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="91d260766aee213709a415223ac206b93100d7d5" translate="yes" xml:space="preserve">
          <source>To prune objects not used by your repository or another that borrows from your repository via its &lt;code&gt;.git/objects/info/alternates&lt;/code&gt;:</source>
          <target state="translated">リポジトリで使用されていないオブジェクト、または &lt;code&gt;.git/objects/info/alternates&lt;/code&gt; を介してリポジトリから借用したオブジェクトをプルーニングするには：</target>
        </trans-unit>
        <trans-unit id="2f63f42b98c259e7fd0384dd68939f7fc302c5eb" translate="yes" xml:space="preserve">
          <source>To prune references as part of your normal workflow without needing to remember to run that, set &lt;code&gt;fetch.prune&lt;/code&gt; globally, or &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; per-remote in the config. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">通常のワークフローの一部として、実行を覚えておく必要なく参照をプルーニングするには、 &lt;code&gt;fetch.prune&lt;/code&gt; をグローバルに設定するか、configでリモートごとに &lt;code&gt;remote.&amp;lt;name&amp;gt;.prune&lt;/code&gt; 設定します。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="68bfae2792009c9d944a67bd77b4854e1c8c4d3e" translate="yes" xml:space="preserve">
          <source>To put the loose objects into a pack, just run git repack:</source>
          <target state="translated">ゆるいものをパックに入れるには git repack を実行するだけです。</target>
        </trans-unit>
        <trans-unit id="8344caf5b982f9b0d4dc99f7ff5aa708ff0b3592" translate="yes" xml:space="preserve">
          <source>To query the value for a given key, do</source>
          <target state="translated">指定したキーの値を問い合わせるには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="6d7c1598e59e901d58d9b961c14fa449c82ef069" translate="yes" xml:space="preserve">
          <source>To reapply a series of changes from a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; to a different base, and reset the &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; of that branch to the result.</source>
          <target state="translated">一連の変更を&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;から別のベースに再適用し、そのブランチの&lt;a href=&quot;#def_head&quot;&gt;ヘッド&lt;/a&gt;を結果にリセットします。</target>
        </trans-unit>
        <trans-unit id="25388a0bc929e9a0e4d2bb9d4d113e8444bb02a5" translate="yes" xml:space="preserve">
          <source>To remove a file from the index and from the working tree, use</source>
          <target state="translated">インデックスと作業ツリーからファイルを削除するには</target>
        </trans-unit>
        <trans-unit id="c7850646e909d85f101794190a2e6f7a699e3e90" translate="yes" xml:space="preserve">
          <source>To remove commits authored by &quot;Darl McBribe&quot; from the history:</source>
          <target state="translated">Darl McBribe &quot;が作成したコミットを履歴から削除します。</target>
        </trans-unit>
        <trans-unit id="65692943c43d72ea453917ea884fccf3994fb56e" translate="yes" xml:space="preserve">
          <source>To remove selection, prefix the input with &lt;code&gt;-&lt;/code&gt; like this:</source>
          <target state="translated">選択を削除するには、次のように入力の前に &lt;code&gt;-&lt;/code&gt; を付けます。</target>
        </trans-unit>
        <trans-unit id="9e91a512899aa79b93af123e6b1768a526248346" translate="yes" xml:space="preserve">
          <source>To repopulate the working directory with all files, use the &lt;code&gt;git sparse-checkout disable&lt;/code&gt; command.</source>
          <target state="translated">作業ディレクトリにすべてのファイルを再入力するには、 &lt;code&gt;git sparse-checkout disable&lt;/code&gt; コマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="5c497720a7ab3ae3ef408305ef475289bc14a521" translate="yes" xml:space="preserve">
          <source>To reproduce the entire p4 history in Git, use the &lt;code&gt;@all&lt;/code&gt; modifier on the depot path:</source>
          <target state="translated">&lt;code&gt;@all&lt;/code&gt; でp4履歴全体を再現するには、デポパスで@all修飾子を使用します。</target>
        </trans-unit>
        <trans-unit id="d4609928d728916d052df2a3b481b65890e4b16e" translate="yes" xml:space="preserve">
          <source>To require authentication for both reads and writes, use a Location directive around the repository, or one of its parent directories:</source>
          <target state="translated">読み取りと書き込みの両方に認証を要求するには、リポジトリの周囲や親ディレクトリの一つに Location ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="10ebfb5ceb771c952eff2c39be3b852f1f654421" translate="yes" xml:space="preserve">
          <source>To require authentication for both reads and writes:</source>
          <target state="translated">読み取りと書き込みの両方に認証を要求する。</target>
        </trans-unit>
        <trans-unit id="847928f545abee25f9f8e4e2cc396a049af86735" translate="yes" xml:space="preserve">
          <source>To restore a file in the index to match the version in &lt;code&gt;HEAD&lt;/code&gt; (this is the same as using &lt;a href=&quot;git-reset&quot;&gt;git-reset[1]&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; のバージョンと一致するようにインデックス内のファイルを復元するには（これは&lt;a href=&quot;git-reset&quot;&gt;git-reset [1]&lt;/a&gt;を使用するのと同じです）</target>
        </trans-unit>
        <trans-unit id="21366b05c441f538e6886570018737e901640e49" translate="yes" xml:space="preserve">
          <source>To restore all files in the current directory</source>
          <target state="translated">カレントディレクトリ内のすべてのファイルを復元するには</target>
        </trans-unit>
        <trans-unit id="0ab7e14988a23edeb341648ca7b63377b3dd49d2" translate="yes" xml:space="preserve">
          <source>To restrict rewriting to only part of the history, specify a revision range in addition to the new branch name. The new branch name will point to the top-most revision that a &lt;code&gt;git rev-list&lt;/code&gt; of this range will print.</source>
          <target state="translated">書き換えを履歴の一部のみに制限するには、新しいブランチ名に加えてリビジョン範囲を指定します。新しいブランチ名は、この範囲の &lt;code&gt;git rev-list&lt;/code&gt; が出力する一番上のリビジョンを指します。</target>
        </trans-unit>
        <trans-unit id="4d880d7fd779c619b85e62692eb083b5f59e932e" translate="yes" xml:space="preserve">
          <source>To rewrite commits E,F,G,H, use one of these:</source>
          <target state="translated">E,F,G,H のコミットを書き換えるには、これらのいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="47b66273feb1f496168989ebee433bebb314fc85" translate="yes" xml:space="preserve">
          <source>To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:</source>
          <target state="translated">D,E,F,G,H のコミットだけを書き換え、A,B,C のコミットだけを残しておくには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="8c31d9c011b7c86062de888fb92cc01426b53584" translate="yes" xml:space="preserve">
          <source>To rewrite the repository to look as if &lt;code&gt;foodir/&lt;/code&gt; had been its project root, and discard all other history:</source>
          <target state="translated">リポジトリを書き直して、 &lt;code&gt;foodir/&lt;/code&gt; がそのプロジェクトルートであるかのように見せ、他のすべての履歴を破棄します。</target>
        </trans-unit>
        <trans-unit id="7c02b2b350476c8c24e25173b62f35a8ad0c0ae3" translate="yes" xml:space="preserve">
          <source>To see how submodule support works, create four example repositories that can be used later as a submodule:</source>
          <target state="translated">サブモジュールのサポートがどのように機能するかを確認するために、後からサブモジュールとして使用できる4つのリポジトリの例を作成します。</target>
        </trans-unit>
        <trans-unit id="700bc56e5656b835e5cd7fa2e5386957dfc66eac" translate="yes" xml:space="preserve">
          <source>To see the currently remaining suspects in &lt;code&gt;gitk&lt;/code&gt;, issue the following command during the bisection process (the subcommand &lt;code&gt;view&lt;/code&gt; can be used as an alternative to &lt;code&gt;visualize&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;gitk&lt;/code&gt; に現在残っている容疑者を表示するには、二分割プロセス中に次のコマンドを発行します（サブコマンド &lt;code&gt;view&lt;/code&gt; は、 &lt;code&gt;visualize&lt;/code&gt; 代わりに使用できます）。</target>
        </trans-unit>
        <trans-unit id="faa509deef7fcd4d518cc2cd2e577046b7eb747b" translate="yes" xml:space="preserve">
          <source>To see whether it has already been merged into the test or release branches, use:</source>
          <target state="translated">すでにテストブランチやリリースブランチにマージされているかどうかを確認するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="1e15ca1368deb202f467e491af7bfdb38f930af4" translate="yes" xml:space="preserve">
          <source>To serve gitweb at the same url, use a ScriptAliasMatch to only those URLs that &lt;code&gt;git http-backend&lt;/code&gt; can handle, and forward the rest to gitweb:</source>
          <target state="translated">同じURLでgitwebを提供するには、githttp &lt;code&gt;git http-backend&lt;/code&gt; が処理できるURLのみにScriptAliasMatchを使用し、残りをgitwebに転送します。</target>
        </trans-unit>
        <trans-unit id="3b5c2b799f6b39d60aa882699fc88e3eb3a77175" translate="yes" xml:space="preserve">
          <source>To serve multiple repositories from different &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces[7]&lt;/a&gt; in a single repository:</source>
          <target state="translated">単一のリポジトリで異なる&lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces [7]&lt;/a&gt;から複数のリポジトリを提供するには：</target>
        </trans-unit>
        <trans-unit id="59fa97f902b7761eca14600ff37aff1758dec6bd" translate="yes" xml:space="preserve">
          <source>To set a commit (which typically is at the tip of another history) to be the parent of the current initial commit, in order to paste the other history behind the current history:</source>
          <target state="translated">現在の履歴の後ろにある他の履歴を貼り付けるために、現在の最初のコミットの親となるコミット(通常は他の履歴の先端にある)を設定します。</target>
        </trans-unit>
        <trans-unit id="d091c25539483b5c5b3db274eae656a5f768704a" translate="yes" xml:space="preserve">
          <source>To set the date used in future tag objects, set the environment variable GIT_COMMITTER_DATE (see the later discussion of possible values; the most common form is &quot;YYYY-MM-DD HH:MM&quot;).</source>
          <target state="translated">将来のタグオブジェクトで使用される日付を設定するには、環境変数GIT_COMMITTER_DATEを設定します(可能な値については後述します;最も一般的な形式は &quot;YYYY-MM-DD HH:MM &quot;です)。</target>
        </trans-unit>
        <trans-unit id="0de4847876d8ab04ebb463613f39507d60c3b1a3" translate="yes" xml:space="preserve">
          <source>To set this up, first create your work tree by cloning Linus&amp;rsquo;s public tree:</source>
          <target state="translated">これを設定するには、まずLinusのパブリックツリーを複製してワークツリーを作成します。</target>
        </trans-unit>
        <trans-unit id="6fdb47a7575f286ad7a6b8b651d8470ef2c51c01" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as a regular, non-inetd service that handles repositories for multiple virtual hosts based on their IP addresses, start the daemon like this:</source>
          <target state="translated">&lt;code&gt;git daemon&lt;/code&gt; を、IPアドレスに基づいて複数の仮想ホストのリポジトリを処理する通常の非inetdサービスとして設定するには、次のようにデーモンを起動します。</target>
        </trans-unit>
        <trans-unit id="cd4e85b93c0b5a71d973a240463742c429d6ce10" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as an inetd service that handles any repository under the whitelisted set of directories, /pub/foo and /pub/bar, place an entry like the following into /etc/inetd all on one line:</source>
          <target state="translated">ホワイトリストに登録された一連のディレクトリ/ pub / fooおよび/ pub / barの下のリポジトリを処理するinetdサービスとして &lt;code&gt;git daemon&lt;/code&gt; を設定するには、次のようなエントリを/ etc / inetdにすべて1行で配置します。</target>
        </trans-unit>
        <trans-unit id="d85d4c6ac447e3ea7881a95ee3354b641502c913" translate="yes" xml:space="preserve">
          <source>To set up &lt;code&gt;git daemon&lt;/code&gt; as an inetd service that handles repositories for different virtual hosts, &lt;code&gt;www.example.com&lt;/code&gt; and &lt;code&gt;www.example.org&lt;/code&gt;, place an entry like the following into &lt;code&gt;/etc/inetd&lt;/code&gt; all on one line:</source>
          <target state="translated">&lt;code&gt;git daemon&lt;/code&gt; を、異なる仮想ホスト &lt;code&gt;www.example.com&lt;/code&gt; と &lt;code&gt;www.example.org&lt;/code&gt; のリポジトリを処理するinetdサービスとして設定するには、次のようなエントリを &lt;code&gt;/etc/inetd&lt;/code&gt; に1行で配置します。</target>
        </trans-unit>
        <trans-unit id="6d1dfa06a0b2e0253dac9a23d3e763ff2be4729c" translate="yes" xml:space="preserve">
          <source>To shelve changes instead of submitting, use &lt;code&gt;--shelve&lt;/code&gt; and &lt;code&gt;--update-shelve&lt;/code&gt;:</source>
          <target state="translated">送信せずに変更を &lt;code&gt;--shelve&lt;/code&gt; するには、 &lt;code&gt;--update-shelve&lt;/code&gt; shelveおよび--update- shelveを使用します。</target>
        </trans-unit>
        <trans-unit id="b19251adc869dd31b98316a2df3ca3e146f58f68" translate="yes" xml:space="preserve">
          <source>To show all references called &quot;master&quot;, whether tags or heads or anything else, and regardless of how deep in the reference naming hierarchy they are, use:</source>
          <target state="translated">タグでもヘッドでも他のものでも、また、それらが参照名付けの階層の中でどれだけ深い位置にあるかに関係なく、「マスター」と呼ばれるすべての参照を表示するには、使用します。</target>
        </trans-unit>
        <trans-unit id="51ec81ccf2337a76aefa897308cd08d96e515614" translate="yes" xml:space="preserve">
          <source>To show only tags, or only proper branch heads, use &quot;--tags&quot; and/or &quot;--heads&quot; respectively (using both means that it shows tags and heads, but not other random references under the refs/ subdirectory).</source>
          <target state="translated">タグのみを表示したり、適切なブランチの先頭のみを表示したりするには、それぞれ &quot;--tags&quot; や &quot;--heads&quot; を使用します (両方を使用すると、タグと先頭を表示しますが、refs/サブディレクトリの下にある他のランダムな参照は表示しません)。</target>
        </trans-unit>
        <trans-unit id="864f9f1ee17e37f4b3823291b8524eebd5879fc4" translate="yes" xml:space="preserve">
          <source>To show that as an example, let&amp;rsquo;s go back to the git-tutorial repository we used earlier, and create a branch in it. You do that by simply just saying that you want to check out a new branch:</source>
          <target state="translated">例としてそれを示すために、前に使用したgit-tutorialリポジトリに戻り、ブランチを作成します。新しいブランチをチェックアウトしたいというだけでそれを行います。</target>
        </trans-unit>
        <trans-unit id="acab411fa1b0a4e2f72e42b537e21a4bc08bf613" translate="yes" xml:space="preserve">
          <source>To simplify the discussion we will suppose that the untestable area is a simple string of commits and that it was created by a breakage introduced by one commit (let&amp;rsquo;s call it BBC for bisect breaking commit) and later fixed by another one (let&amp;rsquo;s call it BFC for bisect fixing commit).</source>
          <target state="translated">議論を簡単にするために、テスト不可能な領域はコミットの単純な文字列であり、1つのコミットによって導入された破損によって作成され（2分割ブレークコミットの場合はBBCとしましょう）、後で別のコミットによって修正される（BFCとしましょう）二等分修正コミット）。</target>
        </trans-unit>
        <trans-unit id="975e3a9279c8287bca9f664bbcc61fee7baa93ca" translate="yes" xml:space="preserve">
          <source>To specify a branch other than the current one, use:</source>
          <target state="translated">現在のブランチ以外のブランチを指定するには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="b6b6e95c2c1acd4004bc280690d73f7c9df3e3b0" translate="yes" xml:space="preserve">
          <source>To specify a namespace, set the &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; environment variable to the namespace. For each ref namespace, Git stores the corresponding refs in a directory under &lt;code&gt;refs/namespaces/&lt;/code&gt;. For example, &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; will store refs under &lt;code&gt;refs/namespaces/foo/&lt;/code&gt;. You can also specify namespaces via the &lt;code&gt;--namespace&lt;/code&gt; option to &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt;.</source>
          <target state="translated">名前空間を指定するには、 &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; 環境変数を名前空間に設定します。各refネームスペースについて、Gitは対応するrefを &lt;code&gt;refs/namespaces/&lt;/code&gt; 下のディレクトリに保存します。たとえば、 &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; は &lt;code&gt;refs/namespaces/foo/&lt;/code&gt; 下に参照を格納します。&lt;a href=&quot;git&quot;&gt;git [1]の&lt;/a&gt; &lt;code&gt;--namespace&lt;/code&gt; オプションを使用して名前空間を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="8d8e0463dddb070b083bcb1d31f0cd304bcae1a2" translate="yes" xml:space="preserve">
          <source>To specify a single commit or a range of commits, use:</source>
          <target state="translated">単一のコミットまたはコミットの範囲を指定するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="b6bdd73c5af990a9c308cb3582e6683a673000a9" translate="yes" xml:space="preserve">
          <source>To stop tracking a file that is currently tracked, use &lt;code&gt;git rm --cached&lt;/code&gt;.</source>
          <target state="translated">現在追跡されているファイルの追跡を停止するには、 &lt;code&gt;git rm --cached&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5aabd990937e7026d6c235ccca8da7a1bd54429f" translate="yes" xml:space="preserve">
          <source>To submit all changes that are in the current Git branch but not in the &lt;code&gt;p4/master&lt;/code&gt; branch, use:</source>
          <target state="translated">現在のGitブランチにあり、 &lt;code&gt;p4/master&lt;/code&gt; ブランチにはないすべての変更を送信するには、次のコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="4d37523ff8334f7ae27e64b17d4088a430f024d8" translate="yes" xml:space="preserve">
          <source>To submit patches using GMail&amp;rsquo;s IMAP interface, first, edit your ~/.gitconfig to specify your account settings:</source>
          <target state="translated">GMailのIMAPインターフェースを使用してパッチを送信するには、まず〜/ .gitconfigを編集してアカウント設定を指定します：</target>
        </trans-unit>
        <trans-unit id="3829362b0206f78fb7e35755e5364f47036b822a" translate="yes" xml:space="preserve">
          <source>To support virtual hosting, an interpolated path template can be used to dynamically construct alternate paths. The template supports %H for the target hostname as supplied by the client but converted to all lowercase, %CH for the canonical hostname, %IP for the server&amp;rsquo;s IP address, %P for the port number, and %D for the absolute path of the named repository. After interpolation, the path is validated against the directory whitelist.</source>
          <target state="translated">仮想ホスティングをサポートするために、補間パステンプレートを使用して、代替パスを動的に構築できます。テンプレートは、クライアントから提供されたターゲットホスト名の％Hをサポートしますが、すべて小文字に変換され、％CHは正規ホスト名、％IPはサーバーのIPアドレス、％Pはポート番号、％Dは絶対パスです。名前付きリポジトリ。補間後、パスはディレクトリのホワイトリストに対して検証されます。</target>
        </trans-unit>
        <trans-unit id="5c5bebcfb262219afa24ad57e1be9ff8017de145" translate="yes" xml:space="preserve">
          <source>To switch back to the previous branch before we switched to mytopic (i.e. &quot;master&quot; branch):</source>
          <target state="translated">mytopicに切り替える前のブランチ(つまり「master」ブランチ)に戻る。</target>
        </trans-unit>
        <trans-unit id="f604bfa9fc2a5e3a8b43aed4c26f0a58bfbd1e14" translate="yes" xml:space="preserve">
          <source>To tell Git that yes, you really do realize that certain files no longer exist, or that new files should be added, you should use the &lt;code&gt;--remove&lt;/code&gt; and &lt;code&gt;--add&lt;/code&gt; flags respectively.</source>
          <target state="translated">Gitに「はい」と伝えるには、特定のファイルが存在しないこと、または新しいファイルを追加する必要があることを実際に認識しているため、それぞれ &lt;code&gt;--remove&lt;/code&gt; フラグと &lt;code&gt;--add&lt;/code&gt; フラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3c508cb95e621506ae6e931b2fdadcaba14a047" translate="yes" xml:space="preserve">
          <source>To test the interaction of several topics, merge them into a throw-away branch. You must never base any work on such a branch!</source>
          <target state="translated">いくつかのトピックの相互作用をテストするには、それらを投げ出しブランチにマージします。このようなブランチをベースにした作業は絶対に行ってはいけません!</target>
        </trans-unit>
        <trans-unit id="ded44bb687bc8a448accbaa8cf09bc1b10b3ff71" translate="yes" xml:space="preserve">
          <source>To that end, it first finds pairs of commits from both commit ranges that correspond with each other. Two commits are said to correspond when the diff between their patches (i.e. the author information, the commit message and the commit diff) is reasonably small compared to the patches' size. See ``Algorithm`` below for details.</source>
          <target state="translated">そのために、まず、両方のコミット範囲から、互いに対応するコミットのペアを見つけます。2つのコミットのパッチ間の差分(すなわち、作者情報、コミットメッセージ、コミット差分)がパッチのサイズに比べて合理的に小さい場合、2つのコミットは対応していると言われます。詳細は以下の ``アルゴリズム`` を参照してください。</target>
        </trans-unit>
        <trans-unit id="28b9a65cbb97d3af18835efd06d4d171278e0508" translate="yes" xml:space="preserve">
          <source>To throw away part of the development, i.e. to assign the &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; to an earlier &lt;a href=&quot;#def_revision&quot;&gt;revision&lt;/a&gt;.</source>
          <target state="translated">開発の一部を破棄する、つまり、&lt;a href=&quot;#def_head&quot;&gt;ヘッド&lt;/a&gt;を以前の&lt;a href=&quot;#def_revision&quot;&gt;リビジョン&lt;/a&gt;に割り当てる。</target>
        </trans-unit>
        <trans-unit id="f2857b34f71a88c7afeb725363e4097e2e44ff45" translate="yes" xml:space="preserve">
          <source>To top it all off, even when users finally find working commands, they naturally want to share them. But they may be unaware that their repo didn&amp;rsquo;t have some special cases that someone else&amp;rsquo;s does. So, when someone else with a different repository runs the same commands, they get hit by the problems above. Or, the user just runs commands that really were vetted for special cases, but they run it on a different OS where it doesn&amp;rsquo;t work, as noted above.</source>
          <target state="translated">さらに、ユーザーが最終的に機能するコマンドを見つけたときでも、当然それらを共有したいと思っています。しかし、彼らは自分たちのリポジトリが他の誰かがするような特別なケースを持っていなかったことに気付かないかもしれません。したがって、別のリポジトリを持つ他の誰かが同じコマンドを実行すると、上記の問題が発生します。または、ユーザーは、特別なケースで実際に吟味されたコマンドを実行するだけですが、上記のように、機能しない別のOSで実行します。</target>
        </trans-unit>
        <trans-unit id="c4d2ca21938c992db0b3b75cacfc935366e6629e" translate="yes" xml:space="preserve">
          <source>To update and refresh only the files already checked out</source>
          <target state="translated">既にチェックアウトされているファイルのみを更新・更新するには</target>
        </trans-unit>
        <trans-unit id="a8c26a487a2f6627cb1ef2fcc7d8934daa7b62d0" translate="yes" xml:space="preserve">
          <source>To update and refresh only the files already checked out:</source>
          <target state="translated">既にチェックアウトされているファイルだけを更新して更新する。</target>
        </trans-unit>
        <trans-unit id="ec65c1043e980aa5b1f1a444793e6e405a4b07fd" translate="yes" xml:space="preserve">
          <source>To update the index with the contents of a new or modified file, use</source>
          <target state="translated">新しいファイルや変更されたファイルの内容でインデックスを更新するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="693fe77a3dea0f3b3cf2c4a884d12237d7043db5" translate="yes" xml:space="preserve">
          <source>To update the resulting mine.git repository, you can fetch or pull after replacing the bundle stored at /home/me/tmp/file.bundle with incremental updates.</source>
          <target state="translated">結果の mine.git リポジトリを更新するには、/home/me/tmp/file.bundle に保存されている bundle をインクリメンタルアップデートで置き換えた後に fetch または pull を実行します。</target>
        </trans-unit>
        <trans-unit id="7804c7379482ba8df4ffa8604001ea71fae1937a" translate="yes" xml:space="preserve">
          <source>To use &quot;old&quot; and &quot;new&quot; instead of &quot;good&quot; and bad, you must run &lt;code&gt;git
bisect start&lt;/code&gt; without commits as argument and then run the following commands to add the commits:</source>
          <target state="translated">「良い」と「悪い」の代わりに「古い」と「新しい」を使用 &lt;code&gt;git bisect start&lt;/code&gt; には、引数としてgit bisect startをコミットなしで実行し、次のコマンドを実行してコミットを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="288cf0a04f95ab8d9b3cedc9a80bcb75e1eb91a6" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;git send-email&lt;/code&gt; to send your patches through the GMail SMTP server, edit ~/.gitconfig to specify your account settings:</source>
          <target state="translated">&lt;code&gt;git send-email&lt;/code&gt; を使用してGMail SMTPサーバー経由でパッチを送信するには、〜/ .gitconfigを編集してアカウント設定を指定します。</target>
        </trans-unit>
        <trans-unit id="b24b5140a04c50c5ab1f6a8bf4b67a65e4b08446" translate="yes" xml:space="preserve">
          <source>To use a helper, you must first select one to use. Git currently includes the following helpers:</source>
          <target state="translated">ヘルパーを使用するには、まず使用するヘルパーを選択しなければなりません。Git には現在、以下のヘルパーが含まれています。</target>
        </trans-unit>
        <trans-unit id="36cbbd22949ca6f21f378ad7a2a2aecbfc17d31c" translate="yes" xml:space="preserve">
          <source>To use the tool, &lt;code&gt;imap.folder&lt;/code&gt; and either &lt;code&gt;imap.tunnel&lt;/code&gt; or &lt;code&gt;imap.host&lt;/code&gt; must be set to appropriate values.</source>
          <target state="translated">このツールを使用するには、 &lt;code&gt;imap.folder&lt;/code&gt; と、 &lt;code&gt;imap.tunnel&lt;/code&gt; または &lt;code&gt;imap.host&lt;/code&gt; のいずれかを適切な値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="00e4f18d69f51ffe1eea42af728cb3d7bb0059ec" translate="yes" xml:space="preserve">
          <source>To use the tool, imap.folder and either imap.tunnel or imap.host must be set to appropriate values.</source>
          <target state="translated">このツールを使用するには、imap.folder と imap.tunnel または imap.host を適切な値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8b51a494019812910be0a147154b59e9ef1b84fa" translate="yes" xml:space="preserve">
          <source>To use this mode effectively, you have to make sure &lt;code&gt;all&lt;/code&gt; the branches you would push out are ready to be pushed out before running &lt;code&gt;git push&lt;/code&gt;, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control.</source>
          <target state="translated">このモードの全体的なポイントはすべてのブランチを一度にプッシュできるようにすることなので、このモードを効果的に使用するには、 &lt;code&gt;git push&lt;/code&gt; を実行する前に、プッシュする &lt;code&gt;all&lt;/code&gt; のブランチがプッシュされる準備ができていることを確認する必要があります。通常、1つのブランチのみで作業を完了して結果をプッシュし、他のブランチは未完了である場合、このモードは適していません。また、他の人がそこに新しいブランチを追加したり、コントロールの外にある既存のブランチのチップを更新したりする可能性があるため、このモードは共有の中央リポジトリにプッシュするのには適していません。</target>
        </trans-unit>
        <trans-unit id="0db2ead5af506998515a70d6693b9cc78c43968a" translate="yes" xml:space="preserve">
          <source>To verify that &lt;code&gt;master&lt;/code&gt; is indeed a superset of &lt;code&gt;maint&lt;/code&gt;, use git log:</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; が本当に &lt;code&gt;maint&lt;/code&gt; のスーパーセットであることを確認するには、git logを使用します。</target>
        </trans-unit>
        <trans-unit id="25e07c07376edb7f994c3289d03610c1335d5288" translate="yes" xml:space="preserve">
          <source>Todo list</source>
          <target state="translated">全リスト</target>
        </trans-unit>
        <trans-unit id="feb6706843b17024c0f5d36ae4a2773f9f7a9d9e" translate="yes" xml:space="preserve">
          <source>Toggle the &quot;sparse&quot; algorithm to determine which objects to include in the pack, when combined with the &quot;--revs&quot; option. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. If this option is not included, it defaults to the value of &lt;code&gt;pack.useSparse&lt;/code&gt;, which is true unless otherwise specified.</source>
          <target state="translated">「--revs」オプションと組み合わせた場合、「スパース」アルゴリズムを切り替えて、パックに含めるオブジェクトを決定します。このアルゴリズムは、新しいオブジェクトを導入するパスに表示されるツリーのみをウォークします。これは、小さな変更を送信するパックを計算するときに、パフォーマンスに大きなメリットをもたらす可能性があります。ただし、含まれているコミットに特定のタイプの直接名前変更が含まれている場合は、追加のオブジェクトがパックファイルに追加される可能性があります。このオプションが含まれていない場合、デフォルトで &lt;code&gt;pack.useSparse&lt;/code&gt; の値になります。これは、特に指定されていない限りtrueです。</target>
        </trans-unit>
        <trans-unit id="44e89f12173f1b11f3c33dfcf393dbeb53d74231" translate="yes" xml:space="preserve">
          <source>Toggle the pre-push hook (see &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely.</source>
          <target state="translated">プレプッシュフックを切り替えます（&lt;a href=&quot;githooks&quot;&gt;githooks [5]を&lt;/a&gt;参照）。デフォルトは--verifyで、フックにプッシュを防止する機会を与えます。 --no-verifyを使用すると、フックは完全にバイパスされます。</target>
        </trans-unit>
        <trans-unit id="e69b3ac557eee7192f98b057069c2f145301ef39" translate="yes" xml:space="preserve">
          <source>Topic branches</source>
          <target state="translated">トピックブランチ</target>
        </trans-unit>
        <trans-unit id="99011a3381da15bff0042576b0bb55bb6ae9ffd0" translate="yes" xml:space="preserve">
          <source>TortoiseCVS</source>
          <target state="translated">TortoiseCVS</target>
        </trans-unit>
        <trans-unit id="9732ce69da01051c0a62cf40cfeb5063ebcf5c22" translate="yes" xml:space="preserve">
          <source>Trace the evolution of the line range given by &quot;&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;&quot; (or the function name regex &amp;lt;funcname&amp;gt;) within the &amp;lt;file&amp;gt;. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and &amp;lt;start&amp;gt; and &amp;lt;end&amp;gt; (or &amp;lt;funcname&amp;gt;) must exist in the starting revision. You can specify this option more than once. Implies &lt;code&gt;--patch&lt;/code&gt;. Patch output can be suppressed using &lt;code&gt;--no-patch&lt;/code&gt;, but other diff formats (namely &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--numstat&lt;/code&gt;, &lt;code&gt;--shortstat&lt;/code&gt;, &lt;code&gt;--dirstat&lt;/code&gt;, &lt;code&gt;--summary&lt;/code&gt;, &lt;code&gt;--name-only&lt;/code&gt;, &lt;code&gt;--name-status&lt;/code&gt;, &lt;code&gt;--check&lt;/code&gt;) are not currently implemented.</source>
          <target state="translated">&amp;lt;file&amp;gt;内の &quot;&amp;lt;start&amp;gt;、&amp;lt;end&amp;gt;&quot;（または関数名regex &amp;lt;funcname&amp;gt;）によって指定された行範囲の変化を追跡します。パススペックリミッターを指定することはできません。これは現在、単一のリビジョンから始まるウォークに制限されています。つまり、ゼロまたは1つの正のリビジョン引数のみを指定でき、&amp;lt;start&amp;gt;および&amp;lt;end&amp;gt;（または&amp;lt;funcname&amp;gt;）は開始リビジョンに存在する必要があります。このオプションは複数回指定できます。意味 &lt;code&gt;--patch&lt;/code&gt; 。パッチ出力は &lt;code&gt;--no-patch&lt;/code&gt; を使用して抑制できますが、他の差分形式（つまり &lt;code&gt;--raw&lt;/code&gt; 、-- &lt;code&gt;--numstat&lt;/code&gt; 、-- &lt;code&gt;--shortstat&lt;/code&gt; 、-- &lt;code&gt;--dirstat&lt;/code&gt; 、-- &lt;code&gt;--summary&lt;/code&gt; 、 &lt;code&gt;--name-only&lt;/code&gt; name -only、-- name &lt;code&gt;--name-status&lt;/code&gt; 、 &lt;code&gt;--check&lt;/code&gt; ）は現在実装されていません。</target>
        </trans-unit>
        <trans-unit id="b64ac9752a19150bbcc2229db77526c8ecf78f4e" translate="yes" xml:space="preserve">
          <source>Trace the evolution of the line range given by &lt;code&gt;&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;&lt;/code&gt;, or by the function name regex &lt;code&gt;&amp;lt;funcname&amp;gt;&lt;/code&gt;, within the &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt;. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; (or &lt;code&gt;&amp;lt;funcname&amp;gt;&lt;/code&gt;) must exist in the starting revision. You can specify this option more than once. Implies &lt;code&gt;--patch&lt;/code&gt;. Patch output can be suppressed using &lt;code&gt;--no-patch&lt;/code&gt;, but other diff formats (namely &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--numstat&lt;/code&gt;, &lt;code&gt;--shortstat&lt;/code&gt;, &lt;code&gt;--dirstat&lt;/code&gt;, &lt;code&gt;--summary&lt;/code&gt;, &lt;code&gt;--name-only&lt;/code&gt;, &lt;code&gt;--name-status&lt;/code&gt;, &lt;code&gt;--check&lt;/code&gt;) are not currently implemented.</source>
          <target state="translated">&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 内の&amp;lt; &lt;code&gt;&amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;&lt;/code&gt; 、または関数名regex &lt;code&gt;&amp;lt;funcname&amp;gt;&lt;/code&gt; で指定された行範囲の変化をトレースします。 pathspecリミッターを指定することはできません。これは現在、単一のリビジョンから開始するウォークに制限されています。つまり、ゼロまたは1つの正のリビジョン引数のみを指定でき、 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; リビジョンには&amp;lt;start&amp;gt;と &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; （または &lt;code&gt;&amp;lt;funcname&amp;gt;&lt;/code&gt; ）が存在する必要があります。このオプションは複数回指定できます。意味 &lt;code&gt;--patch&lt;/code&gt; 。 &lt;code&gt;--no-patch&lt;/code&gt; を使用してパッチ出力を抑制できますが、他のdiff形式（つまり、 &lt;code&gt;--raw&lt;/code&gt; 、 &lt;code&gt;--numstat&lt;/code&gt; 、 &lt;code&gt;--shortstat&lt;/code&gt; 、 &lt;code&gt;--dirstat&lt;/code&gt; 、 &lt;code&gt;--summary&lt;/code&gt; 、 &lt;code&gt;--name-only&lt;/code&gt; 、 &lt;code&gt;--name-status&lt;/code&gt; 、 &lt;code&gt;--check&lt;/code&gt; ）現在実装されていません。</target>
        </trans-unit>
        <trans-unit id="324f1031e6064bf946ba7ad7de400c92a706ee71" translate="yes" xml:space="preserve">
          <source>Trace2 api</source>
          <target state="translated">Trace2 api</target>
        </trans-unit>
        <trans-unit id="f39bab439a6977ac76a84295e79b079d44b7d908" translate="yes" xml:space="preserve">
          <source>Trace2 config settings are only read from the system and global config files; repository local and worktree config files and &lt;code&gt;-c&lt;/code&gt; command line arguments are not respected.</source>
          <target state="translated">Trace2構成設定は、システムおよびグローバル構成ファイルからのみ読み取られます。リポジトリローカルおよびワークツリー構成ファイルと &lt;code&gt;-c&lt;/code&gt; コマンドライン引数は考慮されません。</target>
        </trans-unit>
        <trans-unit id="34f4d5fb2d35b898a8c6180c70ae5079360dafe0" translate="yes" xml:space="preserve">
          <source>Trace2 defines the following set of Trace2 Targets. Format details are given in a later section.</source>
          <target state="translated">Trace2では、以下のようなTrace2 Targetsのセットを定義しています。フォーマットの詳細は後述します。</target>
        </trans-unit>
        <trans-unit id="9cffe01770c87380a0c500c2ba4c5fe9919c83ec" translate="yes" xml:space="preserve">
          <source>Trace2 instrumentation throughout the Git code base sends Trace2 messages to the enabled Trace2 Targets. Targets transform these messages content into purpose-specific formats and write events to their data streams. In this manner, the Trace2 API can drive many different types of analysis.</source>
          <target state="translated">Git コードベース全体の Trace2 インストルメンテーションは、有効になっている Trace2 Targets に Trace2 メッセージを送信します。Targets は、これらのメッセージの内容を目的に応じたフォーマットに変換し、イベントをデータストリームに書き込みます。このようにして、Trace2 API はさまざまなタイプの分析を行うことができます。</target>
        </trans-unit>
        <trans-unit id="78edf21cb8a1d6593bdb09f0d046c88dfeb5c5d1" translate="yes" xml:space="preserve">
          <source>Trace2 is controlled using &lt;code&gt;trace2.*&lt;/code&gt; config values in the system and global config files and &lt;code&gt;GIT_TRACE2*&lt;/code&gt; environment variables. Trace2 does not read from repo local or worktree config files or respect &lt;code&gt;-c&lt;/code&gt; command line config settings.</source>
          <target state="translated">Trace2は、システム内の &lt;code&gt;trace2.*&lt;/code&gt; 値、グローバル構成ファイル、および &lt;code&gt;GIT_TRACE2*&lt;/code&gt; 環境変数を使用して制御されます。Trace2は、リポジトリのローカルまたはワークツリーの設定ファイルから読み取ったり、 &lt;code&gt;-c&lt;/code&gt; コマンドラインの設定を尊重したりしません。</target>
        </trans-unit>
        <trans-unit id="952dc6d60a810a50f48d84409a5ca3162f18abfc" translate="yes" xml:space="preserve">
          <source>Trace2 is controlled using &lt;code&gt;trace2.&lt;/code&gt; config values in the system and global config files and &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variables. Trace2 does not read from repo local or worktree config files or respect &lt;code&gt;-c&lt;/code&gt; command line config settings.</source>
          <target state="translated">Trace2はtrace2を使用して制御され &lt;code&gt;trace2.&lt;/code&gt; システムおよびグローバル構成ファイルの構成値と &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数。Trace2は、リポジトリのローカルファイルまたはワークツリーの構成ファイルを読み取ったり、 &lt;code&gt;-c&lt;/code&gt; コマンドラインの構成設定を尊重したりしません。</target>
        </trans-unit>
        <trans-unit id="20f68aac372bbc56e3b5b3e96aea0079529bedb9" translate="yes" xml:space="preserve">
          <source>Trace2 regions are similar to the existing trace_performance_enter() and trace_performance_leave() routines, but are thread safe and maintain per-thread stacks of timers.</source>
          <target state="translated">Trace2 リージョンは、既存の trace_performance_enter()および trace_performance_leave()ルーチンに似ていますが、スレッドセーフで、スレッドごとのタイマースタックを維持します。</target>
        </trans-unit>
        <trans-unit id="8bded73626b8544423d59c1c5a0c1bfb684cb12e" translate="yes" xml:space="preserve">
          <source>Trace2 target formats</source>
          <target state="translated">Trace2 のターゲットフォーマット</target>
        </trans-unit>
        <trans-unit id="e4cb4d4e7e519744d1375eb303304baebc567ae9" translate="yes" xml:space="preserve">
          <source>Trace2 targets</source>
          <target state="translated">Trace2ターゲット</target>
        </trans-unit>
        <trans-unit id="a0cfb1f78b98054b282b0aab138d8ea25f2c82bd" translate="yes" xml:space="preserve">
          <source>Tracking and contributing to an entire Subversion-managed project (complete with a trunk, tags and branches):</source>
          <target state="translated">Subversion で管理されているプロジェクト全体(トランク、タグ、ブランチを含む)をトラッキングし、貢献することができます。</target>
        </trans-unit>
        <trans-unit id="847895b0cdb93b975e4c930f95d66dabeb1e64d2" translate="yes" xml:space="preserve">
          <source>Tracking and contributing to the trunk of a Subversion-managed project (ignoring tags and branches):</source>
          <target state="translated">Subversion で管理されているプロジェクトのトランクをトラッキングし、貢献する(タグやブランチは無視する)。</target>
        </trans-unit>
        <trans-unit id="667c19a45142471c0c20cc605b683a6a3152afb1" translate="yes" xml:space="preserve">
          <source>Traditionally, tips of branches and tags (collectively known as &lt;code&gt;refs&lt;/code&gt;) were stored one file per ref in a (sub)directory under &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory. While many branch tips tend to be updated often, most tags and some branch tips are never updated. When a repository has hundreds or thousands of tags, this one-file-per-ref format both wastes storage and hurts performance.</source>
          <target state="translated">従来、ブランチとタグのヒント（まとめて &lt;code&gt;refs&lt;/code&gt; と呼ばれていました）は、 &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリの下の（サブ）ディレクトリのrefごとに1つのファイルに格納されていました。多くのブランチヒントは頻繁に更新される傾向がありますが、ほとんどのタグと一部のブランチヒントは決して更新されません。リポジトリに数百または数千のタグがある場合、この1ファイル/参照形式はストレージを浪費し、パフォーマンスを低下させます。</target>
        </trans-unit>
        <trans-unit id="a5cf7db57e9cf074478d171148671cc677faf56a" translate="yes" xml:space="preserve">
          <source>Trailing spaces are ignored unless they are quoted with backslash (&quot;&lt;code&gt;\&lt;/code&gt;&quot;).</source>
          <target state="translated">末尾のスペースは、バックスラッシュ（ &quot; &lt;code&gt;\&lt;/code&gt; &quot;）で囲まれていない限り無視されます。</target>
        </trans-unit>
        <trans-unit id="18baa50eee1aac68104e16bd4ad94c661cde3869" translate="yes" xml:space="preserve">
          <source>Transfer size: In its current form Git requires the whole working tree present. It does not allow partial trees to be transferred in fetch or clone. If the project you work on consists of multiple repositories tied together as submodules in a superproject, you can avoid fetching the working trees of the repositories you are not interested in.</source>
          <target state="translated">転送サイズ。現在の形では、Git は作業ツリー全体を必要としています。部分的なツリーをフェッチやクローンで転送することはできません。作業しているプロジェクトが複数のリポジトリをスーパープロジェクトのサブモジュールとして結びつけている場合は、興味のないリポジトリの作業ツリーをフェッチしないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="bdf6a912dffd18ed6042052fce8610d96ce56a71" translate="yes" xml:space="preserve">
          <source>Transform stdin by substituting all the 40-character SHA-1 hexes (say $hex) with &quot;$hex ($rev_name)&quot;. When used with --name-only, substitute with &quot;$rev_name&quot;, omitting $hex altogether. Intended for the scripter&amp;rsquo;s use.</source>
          <target state="translated">すべての40文字のSHA-1 hex（たとえば$ hex）を「$ hex（$ rev_name）」で置き換えることにより、stdinを変換します。--name-onlyと共に使用する場合は、「$ rev_name」に置き換えて、$ hexを完全に省略します。スクリプト作成者の使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="fc873c381aea0c960eb3ebd47773defb66d7e124" translate="yes" xml:space="preserve">
          <source>Transmit &amp;lt;string&amp;gt; as a push option. As the push option must not contain LF or NUL characters, the string is not encoded.</source>
          <target state="translated">&amp;lt;string&amp;gt;をプッシュオプションとして送信します。プッシュオプションにLFまたはNUL文字を含めることはできないため、文字列はエンコードされません。</target>
        </trans-unit>
        <trans-unit id="32bd61986aca00f68612950bbcdb4915d3d0e846" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. The server&amp;rsquo;s handling of server options, including unknown ones, is server-specific. When multiple &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line.</source>
          <target state="translated">プロトコルバージョン2を使用して通信するときに、指定された文字列をサーバーに送信します。指定された文字列には、NULまたはLF文字を含めることはできません。不明なオプションを含むサーバーオプションのサーバーの処理は、サーバー固有です。複数の &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; が指定されている場合、それらはすべてコマンドラインにリストされている順序で反対側に送信されます。</target>
        </trans-unit>
        <trans-unit id="39635a03df29b9789e505a1038590e24ea96c9e9" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server when communicating using protocol version 2. The given string must not contain a NUL or LF character. When multiple &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line.</source>
          <target state="translated">プロトコルバージョン2を使用して通信するときに、指定された文字列をサーバーに送信します。指定された文字列には、NULまたはLF文字を含めることはできません。複数の &lt;code&gt;--server-option=&amp;lt;option&amp;gt;&lt;/code&gt; が指定されている場合、それらはすべてコマンドラインにリストされている順序で反対側に送信されます。</target>
        </trans-unit>
        <trans-unit id="2995fbcc2c84443582483713456b482a39b63e37" translate="yes" xml:space="preserve">
          <source>Transmit the given string to the server, which passes them to the pre-receive as well as the post-receive hook. The given string must not contain a NUL or LF character. When multiple &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; are given, they are all sent to the other side in the order listed on the command line. When no &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; is given from the command line, the values of configuration variable &lt;code&gt;push.pushOption&lt;/code&gt; are used instead.</source>
          <target state="translated">与えられた文字列をサーバーに送信します。サーバーはそれらをpre-receiveおよびpost-receiveフックに渡します。与えられた文字列はNULまたはLF文字を含んではいけません。複数の &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; が指定されている場合、それらはすべてコマンドラインにリストされている順序で反対側に送信されます。ない場合 &lt;code&gt;--push-option=&amp;lt;option&amp;gt;&lt;/code&gt; コマンドラインから与えられ、コンフィギュレーション変数の値 &lt;code&gt;push.pushOption&lt;/code&gt; が代わりに使用されています。</target>
        </trans-unit>
        <trans-unit id="9960fbc3363c91bebbbc4dae3127f4935a1a22d6" translate="yes" xml:space="preserve">
          <source>Treat all files as text.</source>
          <target state="translated">すべてのファイルをテキストとして扱います。</target>
        </trans-unit>
        <trans-unit id="a08e9c61e543dccc4a24afe7a10c95737cbb1ca7" translate="yes" xml:space="preserve">
          <source>Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the &lt;code&gt;GIT_LITERAL_PATHSPECS&lt;/code&gt; environment variable to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">パススペックを文字通りに扱います（つまり、グロビングなし、パススペックマジックなし）。これは、 &lt;code&gt;GIT_LITERAL_PATHSPECS&lt;/code&gt; 環境変数を &lt;code&gt;1&lt;/code&gt; に設定することと同じです。</target>
        </trans-unit>
        <trans-unit id="8024445062b4bb90b2e84a4da6e0bb207f37b5f4" translate="yes" xml:space="preserve">
          <source>Treat the &amp;lt;string&amp;gt; given to &lt;code&gt;-S&lt;/code&gt; as an extended POSIX regular expression to match.</source>
          <target state="translated">&lt;code&gt;-S&lt;/code&gt; に指定された&amp;lt;string&amp;gt; を、一致する拡張POSIX正規表現として扱います。</target>
        </trans-unit>
        <trans-unit id="72315ec1092243bb561e5b4697869abb3601099e" translate="yes" xml:space="preserve">
          <source>Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.</source>
          <target state="translated">リポジトリをベアリポジトリとして扱います。GIT_DIR環境が設定されていない場合は、現在の作業ディレクトリに設定されます。</target>
        </trans-unit>
        <trans-unit id="1dad3a3b77cbf00bf58d87ee853af6d3cddb344a" translate="yes" xml:space="preserve">
          <source>Treat the revision argument as a &amp;lt;revision range&amp;gt;, even if it is just a single commit (that would normally be treated as a &amp;lt;since&amp;gt;). Note that root commits included in the specified range are always formatted as creation patches, independently of this flag.</source>
          <target state="translated">単一のコミット（通常は&amp;lt;since&amp;gt;として扱われる）であっても、リビジョン引数を&amp;lt;リビジョン範囲&amp;gt;として扱います。指定された範囲に含まれるルートコミットは、このフラグとは関係なく、常に作成パッチとしてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="aa88eae97d6ad1936bc41000081122649aee8d74" translate="yes" xml:space="preserve">
          <source>Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge. Whitespace changes mixed with other changes to a line are not ignored. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;-b&lt;/code&gt;, &lt;code&gt;-w&lt;/code&gt;, &lt;code&gt;--ignore-space-at-eol&lt;/code&gt;, and &lt;code&gt;--ignore-cr-at-eol&lt;/code&gt;.</source>
          <target state="translated">3方向のマージのために、指定されたタイプの空白の変更がある行を変更されていないものとして扱います。行に対する他の変更と混合された空白の変更は無視されません。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;-b&lt;/code&gt; 、 &lt;code&gt;-w&lt;/code&gt; 、-- &lt;code&gt;--ignore-space-at-eol&lt;/code&gt; 、-- &lt;code&gt;--ignore-cr-at-eol&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="6ddd0e484558c1f8e50a8fe3c2dc7499225a9297" translate="yes" xml:space="preserve">
          <source>Tree Object</source>
          <target state="translated">ツリーオブジェクト</target>
        </trans-unit>
        <trans-unit id="bce93b7f9d4c3064a3f582b574710500d7e5efb5" translate="yes" xml:space="preserve">
          <source>Tree and blob objects outside of &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; will be treated the same way as if they were inside &lt;code&gt;refs/tags/*&lt;/code&gt;, any update of them will be rejected.</source>
          <target state="translated">&lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; 外のツリーおよびblobオブジェクトは、 &lt;code&gt;refs/tags/*&lt;/code&gt; 内にある場合と同じように扱われ、それらの更新は拒否されます。</target>
        </trans-unit>
        <trans-unit id="faed43d5018a65bdda1021ea817b81efdd882a1f" translate="yes" xml:space="preserve">
          <source>Tree objects as well as tag objects not pointing at commits, cannot be described. When describing blobs, the lightweight tags pointing at blobs are ignored, but the blob is still described as &amp;lt;committ-ish&amp;gt;:&amp;lt;path&amp;gt; despite the lightweight tag being favorable.</source>
          <target state="translated">ツリーオブジェクトや、コミットを指さないタグオブジェクトは記述できません。blobを記述するとき、blobを指す軽量タグは無視されますが、軽量タグが好ましいにもかかわらず、blobは&amp;lt;committ-ish&amp;gt;：&amp;lt;path&amp;gt;として記述されます。</target>
        </trans-unit>
        <trans-unit id="d94a666a1561928de12071aa36f46464acd70f54" translate="yes" xml:space="preserve">
          <source>Tree to checkout from (when paths are given). If not specified, the index will be used.</source>
          <target state="translated">チェックアウトするツリー(パスが指定されている場合)。指定しない場合はインデックスが使用されます。</target>
        </trans-unit>
        <trans-unit id="fef8232d1c67b8b3403ba454c8ae3c965dc5fb72" translate="yes" xml:space="preserve">
          <source>Trees (aka directories) use just 12 bytes of memory on top of the memory required for their entries (see &amp;ldquo;per active file&amp;rdquo; below). The cost of a tree is virtually 0, as its overhead amortizes out over the individual file entries.</source>
          <target state="translated">ツリー（別名ディレクトリ）は、エントリに必要なメモリの上に12バイトのメモリを使用します（以下の「アクティブなファイルごと」を参照）。ツリーのコストは実質的に0です。これは、そのオーバーヘッドが個々のファイルエントリで償却されるためです。</target>
        </trans-unit>
        <trans-unit id="2bb80d7d00c0395ecaf93c5dc9cd657c191b576d" translate="yes" xml:space="preserve">
          <source>Tries to reinstate not only the working tree&amp;rsquo;s changes, but also the index&amp;rsquo;s ones. However, this can fail, when you have conflicts (which are stored in the index, where you therefore can no longer apply the changes as they were originally).</source>
          <target state="translated">作業ツリーの変更だけでなく、インデックスの変更も復元しようとします。ただし、競合がある場合（インデックスに格納されているため、元の変更を適用できなくなる）、これは失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8797468d6463e4f71332170d9f50ca7fd321cc3a" translate="yes" xml:space="preserve">
          <source>Trivial merges are done by &lt;code&gt;git read-tree&lt;/code&gt; itself. Only conflicting paths will be in unmerged state when &lt;code&gt;git read-tree&lt;/code&gt; returns.</source>
          <target state="translated">ささいなマージは &lt;code&gt;git read-tree&lt;/code&gt; 自体によって行われます。 &lt;code&gt;git read-tree&lt;/code&gt; が戻ると、競合するパスのみがマージされない状態になります。</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="c14d8e783a9f521d30b73eb971eac8f82acc62a0" translate="yes" xml:space="preserve">
          <source>True merge</source>
          <target state="translated">真のマージ</target>
        </trans-unit>
        <trans-unit id="33a579ffc0dccbff15be01734ea4138ea4e7635c" translate="yes" xml:space="preserve">
          <source>Trust</source>
          <target state="translated">Trust</target>
        </trans-unit>
        <trans-unit id="df8a0e781552ee165e12d7086194c5f37262dc36" translate="yes" xml:space="preserve">
          <source>Try to speed up the traversal using the pack bitmap index (if one is available). Note that when traversing with &lt;code&gt;--objects&lt;/code&gt;, trees and blobs will not have their associated path printed.</source>
          <target state="translated">パックビットマップインデックス（使用可能な場合）を使用して、走査を高速化してください。 &lt;code&gt;--objects&lt;/code&gt; を使用してトラバースする場合、ツリーとブロブには関連するパスが印刷されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="db494399fc91d335ea933090c261cf51f7615da6" translate="yes" xml:space="preserve">
          <source>Try to update from the upstream resulted in a lot of conflicts; you were not ready to spend a lot of time merging right now, so you decide to do that later.</source>
          <target state="translated">上流から更新しようとすると、多くの競合が発生しました。</target>
        </trans-unit>
        <trans-unit id="3a12d2b4901990f4e580a360ff850809fe3f67b9" translate="yes" xml:space="preserve">
          <source>Turn off any previous &lt;code&gt;--filter=&lt;/code&gt; argument.</source>
          <target state="translated">以前の &lt;code&gt;--filter=&lt;/code&gt; 引数をオフにします。</target>
        </trans-unit>
        <trans-unit id="34771065d121fc03fac8d38d540e254893826329" translate="yes" xml:space="preserve">
          <source>Turn off branch colors, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">設定ファイルでデフォルトのカラー出力が指定されている場合でも、ブランチのカラーをオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6d9cbb32ce6c68e264cdb30b91e954cf183958d3" translate="yes" xml:space="preserve">
          <source>Turn off colored diff. It is the same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">色付きの差分をオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="3d9b2354f095eeb41acddbf4f3d69d4ac5775813" translate="yes" xml:space="preserve">
          <source>Turn off colored diff. This can be used to override configuration settings. It is the same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">色付きの差分をオフにします。これは、構成設定をオーバーライドするために使用できます。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="8ad464ef4a6c59cdcb2319e829113b9b9a0202fe" translate="yes" xml:space="preserve">
          <source>Turn off colored output, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">構成ファイルがデフォルトでカラー出力を指定している場合でも、カラー出力をオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="a3a997309d5fb6a6ca30f0f6201f278a284d8e1e" translate="yes" xml:space="preserve">
          <source>Turn off match highlighting, even when the configuration file gives the default to color output. Same as &lt;code&gt;--color=never&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでデフォルトのカラー出力が指定されている場合でも、一致の強調表示をオフにします。 &lt;code&gt;--color=never&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="d4fab0f230de92fdcff08739247b39013a4dcf91" translate="yes" xml:space="preserve">
          <source>Turn off move detection. This can be used to override configuration settings. It is the same as &lt;code&gt;--color-moved=no&lt;/code&gt;.</source>
          <target state="translated">移動検出をオフにします。これは、構成設定をオーバーライドするために使用できます。 &lt;code&gt;--color-moved=no&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b0eb0b106db412297afc722cb22850ad8fd89466" translate="yes" xml:space="preserve">
          <source>Turn off rename detection, even when the configuration file gives the default to do so.</source>
          <target state="translated">設定ファイルでデフォルトでリネーム検出を行うように設定されている場合でも、リネーム検出をオフにします。</target>
        </trans-unit>
        <trans-unit id="4e867193eda90e02a99d5e3b2d3aff016424ee32" translate="yes" xml:space="preserve">
          <source>Turn off rename detection. This overrides the &lt;code&gt;merge.renames&lt;/code&gt; configuration variable. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--no-renames&lt;/code&gt;.</source>
          <target state="translated">名前の変更の検出をオフにします。これは、 &lt;code&gt;merge.renames&lt;/code&gt; 構成変数をオーバーライドします。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--no-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="29eb4a9a74bb1156273caaa264fc85825c0572ef" translate="yes" xml:space="preserve">
          <source>Turn on rename detection, optionally setting the similarity threshold. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--find-renames&lt;/code&gt;.</source>
          <target state="translated">名前変更の検出をオンにし、オプションで類似性のしきい値を設定します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--find-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="a279dbfc86c680add56c7a5993ef6023dec20637" translate="yes" xml:space="preserve">
          <source>Turn on rename detection, optionally setting the similarity threshold. This is the default. This overrides the &lt;code&gt;merge.renames&lt;/code&gt; configuration variable. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--find-renames&lt;/code&gt;.</source>
          <target state="translated">名前変更の検出をオンにし、オプションで類似性のしきい値を設定します。これがデフォルトです。これは、 &lt;code&gt;merge.renames&lt;/code&gt; 構成変数をオーバーライドします。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--find-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e9d077a66918e3017c929a4d5ef75e05f491a825" translate="yes" xml:space="preserve">
          <source>Turn on/off rename detection regardless of user configuration. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--no-renames&lt;/code&gt;.</source>
          <target state="translated">ユーザー設定に関係なく、名前の変更の検出をオン/オフにします。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--no-renames&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="ff597cb2e8f500da1bb43f369ea55f0017801fbc" translate="yes" xml:space="preserve">
          <source>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal.</source>
          <target state="translated">プログレスのオン/オフを明示的に設定します。どちらも指定しない場合は、標準エラーが端末に接続されている場合にプログレスを表示します。</target>
        </trans-unit>
        <trans-unit id="b63e204e5b5bb236923126ba202fed353f8079ec" translate="yes" xml:space="preserve">
          <source>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting.</source>
          <target state="translated">プログレスのオン/オフを明示的に設定します。どちらも指定しない場合は、標準エラーがターミナルに接続されている場合に進捗状況が表示されます。すべてのマージ戦略が進捗報告をサポートしているわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ae22b8d4ecb731b706e41a653df929373ee8e8e0" translate="yes" xml:space="preserve">
          <source>Turns off any previous &lt;code&gt;--filter=&lt;/code&gt; argument.</source>
          <target state="translated">以前の &lt;code&gt;--filter=&lt;/code&gt; 引数をオフにします。</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="954e9a2594b4d5687b25c9c1a8357bca3253b18f" translate="yes" xml:space="preserve">
          <source>Tweaking diff output</source>
          <target state="translated">diff出力の微調整</target>
        </trans-unit>
        <trans-unit id="aef2d842e6b781b12f96bc62f4ab607c12e12218" translate="yes" xml:space="preserve">
          <source>Two Tree Merge</source>
          <target state="translated">2つの木のマージ</target>
        </trans-unit>
        <trans-unit id="6bda5442e87e811366b94ce6966009ecac6ac5dc" translate="yes" xml:space="preserve">
          <source>Two consecutive asterisks (&quot;&lt;code&gt;**&lt;/code&gt;&quot;) in patterns matched against full pathname may have special meaning:</source>
          <target state="translated">完全パス名と照合されるパターン内の2つの連続するアスタリスク（ &quot; &lt;code&gt;**&lt;/code&gt; &quot;）は、特別な意味を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="e187ca5222f2f1c9a298321896225faf75c5697a" translate="yes" xml:space="preserve">
          <source>Two consecutive asterisks (&amp;ldquo;**&amp;rdquo;) in patterns matched against full pathname may have special meaning:</source>
          <target state="translated">完全パス名と照合されるパターン内の2つの連続するアスタリスク（「**」）は、特別な意味を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="fce699584c34eaef39ec9c341ad51961e194a419" translate="yes" xml:space="preserve">
          <source>Two special values are supported: &lt;code&gt;off&lt;/code&gt; will simply close the corresponding standard handle, and if &lt;code&gt;GIT_REDIRECT_STDERR&lt;/code&gt; is &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt;, standard error will be redirected to the same handle as standard output.</source>
          <target state="translated">：二つの特別な値がサポートされて &lt;code&gt;off&lt;/code&gt; 単に対応する標準ハンドルを閉じ、そして場合 &lt;code&gt;GIT_REDIRECT_STDERR&lt;/code&gt; がある &lt;code&gt;2&amp;gt;&amp;amp;1&lt;/code&gt; 、標準誤差は、標準出力と同じハンドルにリダイレクトされます。</target>
        </trans-unit>
        <trans-unit id="34a739d621f3038babff4f0f681d077135e77a75" translate="yes" xml:space="preserve">
          <source>Two things are interesting here:</source>
          <target state="translated">ここで気になるのは2つ。</target>
        </trans-unit>
        <trans-unit id="ced48512ad4d3cb13ca20b7cb1f2f8e4abd0bc9d" translate="yes" xml:space="preserve">
          <source>Tying it all together</source>
          <target state="translated">結び付け</target>
        </trans-unit>
        <trans-unit id="3a87a5a93967e0c0facb5bdbedab0a6936494920" translate="yes" xml:space="preserve">
          <source>Type 5 is reserved for future expansion. Type 0 is invalid.</source>
          <target state="translated">タイプ 5 は将来の拡張のために予約されています。タイプ0は無効です。</target>
        </trans-unit>
        <trans-unit id="e8e8d3184972cec12ef3bd94d7eec7947cbe4b53" translate="yes" xml:space="preserve">
          <source>Typical gitweb config files will only change starting (default) time zone, and leave other elements at their default values:</source>
          <target state="translated">典型的な gitweb の設定ファイルは、開始時刻 (デフォルト)のタイムゾーンを変更するだけで、他の要素はデフォルトのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="3aa25a3911a2da2f000729dbc451ee040fee4a66" translate="yes" xml:space="preserve">
          <source>Typical usage is something like:</source>
          <target state="translated">典型的な使い方はこんな感じです。</target>
        </trans-unit>
        <trans-unit id="db1f5b1028dc570d4bb8caccd45a45601a38210c" translate="yes" xml:space="preserve">
          <source>Typical use of git credential</source>
          <target state="translated">git credential の典型的な使い方</target>
        </trans-unit>
        <trans-unit id="d63a8a509d39725ec5fc85189ba54ffbab2dd0bb" translate="yes" xml:space="preserve">
          <source>Typically it will be placed in a MUA&amp;rsquo;s drafts folder, edited to add timely commentary that should not go in the changelog after the three dashes, and then sent as a message whose body, in our example, starts with &quot;arch/arm config files were&amp;hellip;​&quot;. On the receiving end, readers can save interesting patches in a UNIX mailbox and apply them with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;.</source>
          <target state="translated">通常、それはMUAの下書きフォルダに配置され、3つのダッシュの後に変更ログに入れるべきではないタイムリーなコメントを追加するように編集され、この例では本文が「arch / arm config files was &amp;hellip;」。受信側では、読者は興味深いパッチをUNIXメールボックスに保存し、それらを&lt;a href=&quot;git-am&quot;&gt;git-am [1]で&lt;/a&gt;適用できます。</target>
        </trans-unit>
        <trans-unit id="3b51965ce078cc4b0d9ecb0a1b113a383a8700dc" translate="yes" xml:space="preserve">
          <source>Typically such a variable may look like this:</source>
          <target state="translated">通常、このような変数は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9f47be9cc1e7fcec80fcc7e52dcbd486a27d2ee2" translate="yes" xml:space="preserve">
          <source>Typically this is run with a script calling Git&amp;rsquo;s imitation of the &lt;code&gt;merge&lt;/code&gt; command from the RCS package.</source>
          <target state="translated">通常、これはRCSパッケージからの &lt;code&gt;merge&lt;/code&gt; コマンドのGitの模倣を呼び出すスクリプトで実行されます。</target>
        </trans-unit>
        <trans-unit id="e4333d902cedfd0d4739277fdec621b3f9f09422" translate="yes" xml:space="preserve">
          <source>Typically this matches the real type of &amp;lt;object&amp;gt; but asking for a type that can trivially be dereferenced from the given &amp;lt;object&amp;gt; is also permitted. An example is to ask for a &quot;tree&quot; with &amp;lt;object&amp;gt; being a commit object that contains it, or to ask for a &quot;blob&quot; with &amp;lt;object&amp;gt; being a tag object that points at it.</source>
          <target state="translated">通常、これは&amp;lt;object&amp;gt;の実際のタイプと一致しますが、特定の&amp;lt;object&amp;gt;から簡単に逆参照できるタイプを要求することも許可されます。例としては、&amp;lt;object&amp;gt;が含まれる &quot;ツリー&quot;を含むコミットオブジェクト、または&amp;lt;object&amp;gt;がそれを指すタグオブジェクトである &quot;blob&quot;を要求する場合があります。</target>
        </trans-unit>
        <trans-unit id="6b016c5601edd059fd8dc12bb8d8426b6525fff2" translate="yes" xml:space="preserve">
          <source>Typically you would first remove all tracked files from the working tree using this command:</source>
          <target state="translated">通常は、まずこのコマンドを使って作業ツリーからすべての追跡されたファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="3a2ee6ee14f11a86e1818d26c21e9493d38718f1" translate="yes" xml:space="preserve">
          <source>Typically, parallel recursive and multi-remote fetches will be faster. By default fetches are performed sequentially, not in parallel.</source>
          <target state="translated">一般的に、並列再帰的なフェッチや複数のリモートからのフェッチの方が高速です。デフォルトでは、フェッチは並列ではなく順次実行されます。</target>
        </trans-unit>
        <trans-unit id="94e92e77c127b9c8a314ec2c48c4916e008c6404" translate="yes" xml:space="preserve">
          <source>Typically, this is invoked as &lt;code&gt;git read-tree -m $H $M&lt;/code&gt;, where $H is the head commit of the current repository, and $M is the head of a foreign tree, which is simply ahead of $H (i.e. we are in a fast-forward situation).</source>
          <target state="translated">通常、これは &lt;code&gt;git read-tree -m $H $M&lt;/code&gt; として呼び出されます。ここで、$ Hは現在のリポジトリの先頭コミットであり、$ Mは外部ツリーの先頭であり、$ Hの前にあります（つまり、早送りの状況にあります）。</target>
        </trans-unit>
        <trans-unit id="0ada5827188094ef6e82c28e45e078ca96f54ca4" translate="yes" xml:space="preserve">
          <source>U: file is unmerged (you must complete the merge before it can be committed)</source>
          <target state="translated">U:ファイルがマージされていません (コミットする前にマージを完了する必要があります)</target>
        </trans-unit>
        <trans-unit id="1a7a0d0dd35212ae4c8c4c873315c6e7e9351f3b" translate="yes" xml:space="preserve">
          <source>URI and label (title) for the Git logo link (or your site logo, if you chose to use different logo image). By default, these both refer to Git homepage, &lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.com&lt;/a&gt;; in the past, they pointed to Git documentation at &lt;a href=&quot;https://www.kernel.org&quot;&gt;https://www.kernel.org&lt;/a&gt;.</source>
          <target state="translated">Gitロゴリンク（または別のロゴ画像を使用することを選択した場合はサイトのロゴ）のURIとラベル（タイトル）。デフォルトでは、どちらもGitホームページ&lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.comを&lt;/a&gt;参照しています。以前は、&lt;a href=&quot;https://www.kernel.org&quot;&gt;https：&lt;/a&gt; //www.kernel.orgにあるGitのドキュメントを参照していました。</target>
        </trans-unit>
        <trans-unit id="8561702ffd22bbb5ccd1a81c9c8d8cc77f16fa7e" translate="yes" xml:space="preserve">
          <source>Un-sets the previously set type specifier (if one was previously set). This option requests that &lt;code&gt;git config&lt;/code&gt; not canonicalize the retrieved variable. &lt;code&gt;--no-type&lt;/code&gt; has no effect without &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; or &lt;code&gt;--&amp;lt;type&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">以前に設定されたタイプ指定子の設定を解除します（以前に設定されていた場合）。このオプションは、 &lt;code&gt;git config&lt;/code&gt; が取得した変数を正規化しないことを要求します。 &lt;code&gt;--no-type&lt;/code&gt; は、 &lt;code&gt;--&amp;lt;type&amp;gt;&lt;/code&gt; &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; または-&amp;lt;type&amp;gt;なしでは効果がありません。</target>
        </trans-unit>
        <trans-unit id="911839695653d988872929c95814b8902e300040" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;--pretty=oneline&lt;/code&gt;, the commit message is prefixed with this information on the same line. This option cannot be combined with &lt;code&gt;--reverse&lt;/code&gt;. See also &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--pretty=oneline&lt;/code&gt; の下では、コミットメッセージの同じ行にこの情報がプレフィックスされます。このオプションを &lt;code&gt;--reverse&lt;/code&gt; と組み合わせることはできません。&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="64ba59969ba5a36d002d9a189101c624fcf7d3cc" translate="yes" xml:space="preserve">
          <source>Under &lt;code&gt;--pretty=reference&lt;/code&gt;, this information will not be shown at all.</source>
          <target state="translated">&lt;code&gt;--pretty=reference&lt;/code&gt; の下では、この情報はまったく表示されません。</target>
        </trans-unit>
        <trans-unit id="c73a6e04cc57ad10ee4ae7284f559a5ae2a53d36" translate="yes" xml:space="preserve">
          <source>Under certain circumstances, some versions of &lt;code&gt;diff&lt;/code&gt; do not correctly detect a missing new-line at the end of the file. As a result, patches created by such &lt;code&gt;diff&lt;/code&gt; programs do not record incomplete lines correctly. This option adds support for applying such patches by working around this bug.</source>
          <target state="translated">特定の状況下では、 &lt;code&gt;diff&lt;/code&gt; の一部のバージョンでは、ファイルの最後にある欠落した改行が正しく検出されません。その結果、そのような &lt;code&gt;diff&lt;/code&gt; プログラムによって作成されたパッチは、不完全な行を正しく記録しません。このオプションは、このバグを回避することにより、そのようなパッチの適用のサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="67a27dbf5548d05ac63e85bd8b4c875d8f48c102" translate="yes" xml:space="preserve">
          <source>Understanding History: Commits</source>
          <target state="translated">歴史を理解する。コミット</target>
        </trans-unit>
        <trans-unit id="9334dba95d5dfb2042093dd9adbddea5f77c5eb4" translate="yes" xml:space="preserve">
          <source>Understanding history: History diagrams</source>
          <target state="translated">歴史を理解する。歴史の図解</target>
        </trans-unit>
        <trans-unit id="85bd1a7ea75afef7e0417cd2bf9d9f3cf13e5e08" translate="yes" xml:space="preserve">
          <source>Understanding history: What is a branch?</source>
          <target state="translated">歴史を理解する。枝とは何か?</target>
        </trans-unit>
        <trans-unit id="6d61d96a492f996316f1e84e66cbfde933315e2c" translate="yes" xml:space="preserve">
          <source>Understanding history: commits, parents, and reachability</source>
          <target state="translated">歴史を理解する:コミット、親、到達可能性</target>
        </trans-unit>
        <trans-unit id="afa47a28efb9d6631a7be02ac359bed5256995ce" translate="yes" xml:space="preserve">
          <source>Undo a commit and redo</source>
          <target state="translated">コミットを取り消してやり直し</target>
        </trans-unit>
        <trans-unit id="61cb90c052dfcd0fda883c6029d1d0fc0a0f4685" translate="yes" xml:space="preserve">
          <source>Undo a commit, making it a topic branch</source>
          <target state="translated">コミットを元に戻してトピックブランチにする</target>
        </trans-unit>
        <trans-unit id="93d74feb000c815128d68a09c83733db43b69c15" translate="yes" xml:space="preserve">
          <source>Undo a merge or pull</source>
          <target state="translated">マージまたはプルを元に戻す</target>
        </trans-unit>
        <trans-unit id="4728c70cd06347b5f285fb3e7887387303b3968e" translate="yes" xml:space="preserve">
          <source>Undo a merge or pull inside a dirty working tree</source>
          <target state="translated">汚れた作業ツリー内でのマージやプルを元に戻す</target>
        </trans-unit>
        <trans-unit id="27b7abb5b90b7a2e8f00eaf74b6df8323ba7d926" translate="yes" xml:space="preserve">
          <source>Undo add</source>
          <target state="translated">追加を元に戻す</target>
        </trans-unit>
        <trans-unit id="ca677a11d37ffdca5231911a194cc2fcdffc5a26" translate="yes" xml:space="preserve">
          <source>Undo commits permanently</source>
          <target state="translated">コミットを恒久的に元に戻す</target>
        </trans-unit>
        <trans-unit id="4180759bca2f04cde0ec69611cb0e0ec1cfe7139" translate="yes" xml:space="preserve">
          <source>Undoes the effects of &lt;code&gt;fetch&lt;/code&gt; back to the specified revision. This allows you to re-&lt;code&gt;fetch&lt;/code&gt; an SVN revision. Normally the contents of an SVN revision should never change and &lt;code&gt;reset&lt;/code&gt; should not be necessary. However, if SVN permissions change, or if you alter your --ignore-paths option, a &lt;code&gt;fetch&lt;/code&gt; may fail with &quot;not found in commit&quot; (file not previously visible) or &quot;checksum mismatch&quot; (missed a modification). If the problem file cannot be ignored forever (with --ignore-paths) the only way to repair the repo is to use &lt;code&gt;reset&lt;/code&gt;.</source>
          <target state="translated">指定したリビジョンへの &lt;code&gt;fetch&lt;/code&gt; の影響を元に戻します。これにより、SVNリビジョンを再 &lt;code&gt;fetch&lt;/code&gt; できます。通常、SVNリビジョンの内容は決して変更 &lt;code&gt;reset&lt;/code&gt; ず、リセットは必要ありません。ただし、SVN権限が変更された場合、または--ignore-pathsオプションを変更した場合、「コミットで見つかりません」（以前に表示されなかったファイル）または「チェックサムの不一致」（変更が失われた）で &lt;code&gt;fetch&lt;/code&gt; が失敗する場合があります。問題のファイルを永久に無視できない場合（--ignore-pathsを使用）、リポジトリを修復する唯一の方法は、 &lt;code&gt;reset&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="ac1f58f831611819b4114b80dd55e3ce540d5b23" translate="yes" xml:space="preserve">
          <source>Undoing a merge</source>
          <target state="translated">マージを元に戻す</target>
        </trans-unit>
        <trans-unit id="f552d5a5802e3df6273c784214def9840b82f594" translate="yes" xml:space="preserve">
          <source>Unfortunately this system becomes inefficient once a project has a lot of objects. Try this on an old project:</source>
          <target state="translated">残念ながら、このシステムはプロジェクトに多くのオブジェクトがあると効率が悪くなります。古いプロジェクトで試してみてください。</target>
        </trans-unit>
        <trans-unit id="c7deb06b3e42a38e2b00598939aa39f8d24897bd" translate="yes" xml:space="preserve">
          <source>Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.</source>
          <target state="translated">残念ながら、行末が混在するテキストファイルをクリーンアップするという望ましい効果と、バイナリファイルを破損させるという望ましくない効果を区別することはできません。どちらの場合も、CRLF は不可逆的な方法で削除されます。テキスト ファイルの場合は CRLF が行末であるため、これは正しいことですが、バイナリ ファイルの場合は CRLF を変換するとデータが破損します。</target>
        </trans-unit>
        <trans-unit id="6da1ce58d3a6c34c76807dc44593d7cd8c6563b6" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;--text&lt;/code&gt; is supplied patches of binary files without a textconv filter will be ignored.</source>
          <target state="translated">&lt;code&gt;--text&lt;/code&gt; が提供されない限り、textconvフィルターのないバイナリファイルのパッチは無視されます。</target>
        </trans-unit>
        <trans-unit id="54cbf98b314812a07f65f95ae77e8608ddf0b26f" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-f&lt;/code&gt; is given, the &lt;code&gt;replace&lt;/code&gt; reference must not yet exist.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; を指定しない限り、 &lt;code&gt;replace&lt;/code&gt; 参照はまだ存在していてはなりません。</target>
        </trans-unit>
        <trans-unit id="ec0a9816e3fe8947b4bfff6f5914c3288bed6fc9" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;-f&lt;/code&gt; is given, the named tag must not yet exist.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; を指定しない限り、名前付きタグはまだ存在していてはなりません。</target>
        </trans-unit>
        <trans-unit id="7824ccb45f3d7be1fd07def25712792fbdf3f009" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git annotate&lt;/code&gt; in older versions of git, the extent of the annotation can be limited to both line ranges and revision ranges. The &lt;code&gt;-L&lt;/code&gt; option, which limits annotation to a range of lines, may be specified multiple times.</source>
          <target state="translated">古いバージョンのgitの &lt;code&gt;git blame&lt;/code&gt; や &lt;code&gt;git annotate&lt;/code&gt; とは異なり、注釈の範囲は行範囲とリビジョン範囲の両方に制限できます。 &lt;code&gt;-L&lt;/code&gt; 線の範囲に注釈を制限オプションは、複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="1fa5e3a4c28161d2ef67ee80d5624341cfa56be1" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;git diff-files&lt;/code&gt;, which showed the difference between the index file and the working tree, &lt;code&gt;git diff-index&lt;/code&gt; shows the differences between a committed &lt;strong&gt;tree&lt;/strong&gt; and either the index file or the working tree. In other words, &lt;code&gt;git diff-index&lt;/code&gt; wants a tree to be diffed against, and before we did the commit, we couldn&amp;rsquo;t do that, because we didn&amp;rsquo;t have anything to diff against.</source>
          <target state="translated">インデックスファイルと作業ツリーの違いを示した &lt;code&gt;git diff-files&lt;/code&gt; とは異なり、 &lt;code&gt;git diff-index&lt;/code&gt; はコミットされた&lt;strong&gt;ツリー&lt;/strong&gt;とインデックスファイルまたは作業ツリーのどちらかとの違いを示します。言い換えると、 &lt;code&gt;git diff-index&lt;/code&gt; はツリーを比較することを望んでいます。コミットを行う前は、比較するものがなかったため、それを行うことができませんでした。</target>
        </trans-unit>
        <trans-unit id="a75073ebd9356a7219cb30b4bb866c17ce8b906c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;gitk&lt;/code&gt;, &lt;code&gt;git gui&lt;/code&gt; focuses on commit generation and single file annotation and does not show project history. It does however supply menu actions to start a &lt;code&gt;gitk&lt;/code&gt; session from within &lt;code&gt;git gui&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gitk&lt;/code&gt; とは異なり、 &lt;code&gt;git gui&lt;/code&gt; はコミットの生成と単一ファイルのアノテーションに焦点を当てており、プロジェクト履歴を表示しません。ただし、 &lt;code&gt;git gui&lt;/code&gt; 内から &lt;code&gt;gitk&lt;/code&gt; セッションを開始するためのメニューアクションを提供します。</target>
        </trans-unit>
        <trans-unit id="cd17281830ac5a9aa50c0d768481eabf04240182" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;raw&lt;/code&gt; format above, the time zone/UTC offset information contained in an RFC 2822 date string is used to adjust the date value to UTC prior to storage. Therefore it is important that this information be as accurate as possible.</source>
          <target state="translated">上記の &lt;code&gt;raw&lt;/code&gt; 形式とは異なり、RFC 2822日付文字列に含まれるタイムゾーン/ UTCオフセット情報は、保存前に日付値をUTCに調整するために使用されます。したがって、この情報はできるだけ正確であることが重要です。</target>
        </trans-unit>
        <trans-unit id="b9ebe23208a4d3f51d6690b78b04b40646f8e2f1" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;rfc2822&lt;/code&gt; format, this format is very strict. Any variation in formatting will cause fast-import to reject the value, and some sanity checks on the numeric values may also be performed.</source>
          <target state="translated">&lt;code&gt;rfc2822&lt;/code&gt; 形式とは異なり、この形式は非常に厳密です。フォーマットに変化があると、高速インポートで値が拒否され、数値のサニティチェックも実行される場合があります。</target>
        </trans-unit>
        <trans-unit id="422977ffd462a03a6cbce65db58b07001eb2214f" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;code&gt;rfc2822&lt;/code&gt; format, this format is very strict. Any variation in formatting will cause fast-import to reject the value.</source>
          <target state="translated">&lt;code&gt;rfc2822&lt;/code&gt; 形式とは異なり、この形式は非常に厳密です。書式設定にばらつきがあると、高速インポートで値が拒否されます。</target>
        </trans-unit>
        <trans-unit id="a5e8af576412d2facd9f39a0996da0da165c42ee" translate="yes" xml:space="preserve">
          <source>Unlike the Porcelain format, the filename information is always given and terminates the entry:</source>
          <target state="translated">Porcelain形式とは異なり、ファイル名の情報は常に与えられ、エントリは終了します。</target>
        </trans-unit>
        <trans-unit id="b603b31236d9df1a4442c23c62ea6317f2525837" translate="yes" xml:space="preserve">
          <source>Unlike the longhand form, when Alice fetches from Bob using a remote repository shorthand set up with &lt;code&gt;git remote&lt;/code&gt;, what was fetched is stored in a remote-tracking branch, in this case &lt;code&gt;bob/master&lt;/code&gt;. So after this:</source>
          <target state="translated">ロングハンドフォームとは異なり、アリスが &lt;code&gt;git remote&lt;/code&gt; で設定されたリモートリポジトリショートハンドを使用してボブからフェッチすると、フェッチされたものはリモート追跡ブランチ（この場合は &lt;code&gt;bob/master&lt;/code&gt; ）に格納されます。したがって、この後：</target>
        </trans-unit>
        <trans-unit id="cc8e9909209a90f3a790bc3005980e8527de79e5" translate="yes" xml:space="preserve">
          <source>Unlike the traditional &lt;code&gt;unified&lt;/code&gt; diff format, which shows two files A and B with a single column that has &lt;code&gt;-&lt;/code&gt; (minus &amp;mdash; appears in A but removed in B), &lt;code&gt;+&lt;/code&gt; (plus &amp;mdash; missing in A but added to B), or &lt;code&gt;&quot; &quot;&lt;/code&gt; (space &amp;mdash; unchanged) prefix, this format compares two or more files file1, file2,&amp;hellip;​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X&amp;rsquo;s line is different from it.</source>
          <target state="translated">伝統とは異なり、 &lt;code&gt;unified&lt;/code&gt; diff形式、ショー二つのファイルAと持っている単一の列とB &lt;code&gt;-&lt;/code&gt; （マイナス- Aに表示されますが、Bで削除）、 &lt;code&gt;+&lt;/code&gt; （プラス- Aに欠けているが、Bに加える）、または &lt;code&gt;&quot; &quot;&lt;/code&gt; （スペース-変更なし）接頭辞。このフォーマットは、2つ以上のファイルfile1、file2、&amp;hellip;を1つのファイルXと比較し、Xが各fileNとどのように異なるかを示します。 Xの行がどのように異なるかを示すために、fileNごとに1つの列が出力行の先頭に追加されます。</target>
        </trans-unit>
        <trans-unit id="71233552f2a4fc77054593fac1f6899dd0308229" translate="yes" xml:space="preserve">
          <source>Unlike variables like &lt;code&gt;color.ui&lt;/code&gt; and &lt;code&gt;core.editor&lt;/code&gt; the &lt;code&gt;receive.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; and &lt;code&gt;fetch.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; variables will not fall back on the &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; configuration if they aren&amp;rsquo;t set. To uniformly configure the same fsck settings in different circumstances all three of them they must all set to the same values.</source>
          <target state="translated">異なりのような変数 &lt;code&gt;color.ui&lt;/code&gt; と &lt;code&gt;core.editor&lt;/code&gt; &lt;code&gt;receive.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; と &lt;code&gt;fetch.fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; 変数は、上で戻って落ちることはありません &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; コンフィギュレーションそうでない場合セットする。異なる状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="00ee5ed7b48c819f6f323dbe1b9a72aef5a0c864" translate="yes" xml:space="preserve">
          <source>Unlike variables like &lt;code&gt;color.ui&lt;/code&gt; and &lt;code&gt;core.editor&lt;/code&gt; the &lt;code&gt;receive.fsck.skipList&lt;/code&gt; and &lt;code&gt;fetch.fsck.skipList&lt;/code&gt; variables will not fall back on the &lt;code&gt;fsck.skipList&lt;/code&gt; configuration if they aren&amp;rsquo;t set. To uniformly configure the same fsck settings in different circumstances all three of them they must all set to the same values.</source>
          <target state="translated">以下のような変数とは異なり &lt;code&gt;color.ui&lt;/code&gt; と &lt;code&gt;core.editor&lt;/code&gt; &lt;code&gt;receive.fsck.skipList&lt;/code&gt; と &lt;code&gt;fetch.fsck.skipList&lt;/code&gt; 変数は、上で戻って落ちることはありません &lt;code&gt;fsck.skipList&lt;/code&gt; のそれらが設定されていない場合は、設定。異なる状況で同じfsck設定を均一に構成するには、3つすべてを同じ値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8a3dffb4c65d7a1f27e907ef2a919885d1125ac9" translate="yes" xml:space="preserve">
          <source>Unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, any updates outside of &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; will be accepted without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;), whether that&amp;rsquo;s swapping e.g. a tree object for a blob, or a commit for another commit that&amp;rsquo;s doesn&amp;rsquo;t have the previous commit as an ancestor etc.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;でプッシュする場合とは異なり、refspec &lt;code&gt;refs/{tags,heads}/*&lt;/code&gt; 以外の更新は、refspec（または &lt;code&gt;--force&lt;/code&gt; ）に &lt;code&gt;+&lt;/code&gt; なしで受け入れられます。または、先祖としての以前のコミットを持たない別のコミットのコミットなど。</target>
        </trans-unit>
        <trans-unit id="2f2516ccb262ba2dda1eeb5218e911868837ce78" translate="yes" xml:space="preserve">
          <source>Unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, there is no configuration which&amp;rsquo;ll amend these rules, and nothing like a &lt;code&gt;pre-fetch&lt;/code&gt; hook analogous to the &lt;code&gt;pre-receive&lt;/code&gt; hook.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;でプッシュする場合とは異なり、これらのルールを修正する構成はなく、 &lt;code&gt;pre-receive&lt;/code&gt; フックに類似した事前 &lt;code&gt;pre-fetch&lt;/code&gt; フックのようなものはありません。</target>
        </trans-unit>
        <trans-unit id="fb79f423670171900d7e94880e8d45907e9f995c" translate="yes" xml:space="preserve">
          <source>Unlock a working tree, allowing it to be pruned, moved or deleted.</source>
          <target state="translated">作業木のロックを解除して、剪定、移動、削除を可能にします。</target>
        </trans-unit>
        <trans-unit id="b00eee8b49227caba98e5d68033660ff6076ebcc" translate="yes" xml:space="preserve">
          <source>Unmerged entries have the following format; the first character is a &quot;u&quot; to distinguish from ordinary changed entries.</source>
          <target state="translated">マージされていないエントリは以下の形式になります。最初の文字は、通常の変更されたエントリと区別するための「u」です。</target>
        </trans-unit>
        <trans-unit id="2c99cc569343579b221cd64026ecc62bb1c21d7b" translate="yes" xml:space="preserve">
          <source>Unpack objects from a packed archive</source>
          <target state="translated">パックされたアーカイブからオブジェクトを展開する</target>
        </trans-unit>
        <trans-unit id="42e2a268d032a6abb00d4cbd80feaa1ecd7a75d6" translate="yes" xml:space="preserve">
          <source>Unreachable tags, commits, and trees will also be accessed to find the tips of dangling segments of history. Use &lt;code&gt;--no-dangling&lt;/code&gt; if you don&amp;rsquo;t care about this output and want to speed it up further.</source>
          <target state="translated">到達できないタグ、コミット、ツリーにもアクセスして、履歴のぶら下がりセグメントのヒントを見つけます。この出力を気にせず、さらに高速化する場合は、 &lt;code&gt;--no-dangling&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="d8a4efd1d470fc3c5ede97084c82a35b9804122a" translate="yes" xml:space="preserve">
          <source>Unregister the given submodules, i.e. remove the whole &lt;code&gt;submodule.$name&lt;/code&gt; section from .git/config together with their work tree. Further calls to &lt;code&gt;git submodule update&lt;/code&gt;, &lt;code&gt;git submodule foreach&lt;/code&gt; and &lt;code&gt;git submodule sync&lt;/code&gt; will skip any unregistered submodules until they are initialized again, so use this command if you don&amp;rsquo;t want to have a local checkout of the submodule in your working tree anymore.</source>
          <target state="translated">指定されたサブモジュールの登録を解除し &lt;code&gt;submodule.$name&lt;/code&gt; つまり、サブモジュール全体を$ .nameセクションを.git / configから作業ツリーとともに削除します。 &lt;code&gt;git submodule update&lt;/code&gt; 、 &lt;code&gt;git submodule foreach&lt;/code&gt; 、 &lt;code&gt;git submodule sync&lt;/code&gt; をさらに呼び出すと、未登録のサブモジュールが再度初期化されるまでスキップされるため、作業ツリーでサブモジュールのローカルチェックアウトを行わない場合は、このコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="1431f68f359f8699975be39dca08302c67d68d9e" translate="yes" xml:space="preserve">
          <source>Unset</source>
          <target state="translated">Unset</target>
        </trans-unit>
        <trans-unit id="8ff954e80b42b18d3d0fcda602d94db1e46da2d4" translate="yes" xml:space="preserve">
          <source>Unsetting the &lt;code&gt;text&lt;/code&gt; attribute on a path tells Git not to attempt any end-of-line conversion upon checkin or checkout.</source>
          <target state="translated">パスの &lt;code&gt;text&lt;/code&gt; 属性を設定解除すると、チェックインまたはチェックアウト時にGitが行末変換を試行しないようになります。</target>
        </trans-unit>
        <trans-unit id="7f84947907454dd0cb412d2a8e5d5e3b9c2382f0" translate="yes" xml:space="preserve">
          <source>Unsetting the variable, or setting it to empty, &quot;0&quot; or &quot;false&quot; (case insensitive) disables trace messages.</source>
          <target state="translated">変数の設定を解除するか、空、&quot;0 &quot;または &quot;false&quot;(大文字小文字を区別しない)に設定すると、トレースメッセージが無効になります。</target>
        </trans-unit>
        <trans-unit id="c176eff9c64fa28a4b6af1aa296cc1394bbf7a80" translate="yes" xml:space="preserve">
          <source>Unshelve</source>
          <target state="translated">Unshelve</target>
        </trans-unit>
        <trans-unit id="9fde2b36ff30053ad23e6a695929873244cc0367" translate="yes" xml:space="preserve">
          <source>Unshelve options</source>
          <target state="translated">オプションを解除する</target>
        </trans-unit>
        <trans-unit id="004e593b6690fb3d48f4f5a86eac1cd13b5b2234" translate="yes" xml:space="preserve">
          <source>Unshelving will take a shelved P4 changelist, and produce the equivalent git commit in the branch refs/remotes/p4-unshelved/&amp;lt;changelist&amp;gt;.</source>
          <target state="translated">Unshelvingは保留されたP4チェンジリストを受け取り、ブランチrefs / remotes / p4-unshelved / &amp;lt;changelist&amp;gt;に同等のgit commitを生成します。</target>
        </trans-unit>
        <trans-unit id="a6e7eb706e115cdaf88206be37eb67b232d007bc" translate="yes" xml:space="preserve">
          <source>Unspecified</source>
          <target state="translated">Unspecified</target>
        </trans-unit>
        <trans-unit id="78f88266b367e8b6e086054e91f1ebc89e168d16" translate="yes" xml:space="preserve">
          <source>Until Git version 2.20, and unlike when pushing with &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;, any updates to &lt;code&gt;refs/tags/*&lt;/code&gt; would be accepted without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;). When fetching, we promiscuously considered all tag updates from a remote to be forced fetches. Since Git version 2.20, fetching to update &lt;code&gt;refs/tags/*&lt;/code&gt; works the same way as when pushing. I.e. any updates will be rejected without &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;).</source>
          <target state="translated">Gitバージョン2.20まで、および&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;でプッシュする場合とは異なり、 &lt;code&gt;refs/tags/*&lt;/code&gt; への更新は、refspec（または &lt;code&gt;--force&lt;/code&gt; ）に &lt;code&gt;+&lt;/code&gt; なしで受け入れられます。フェッチするとき、リモートからのすべてのタグの更新が強制フェッチであると無差別に考慮しました。Gitバージョン2.20以降、 &lt;code&gt;refs/tags/*&lt;/code&gt; を更新するためのフェッチは、プッシュ時と同じように機能します。つまり、refspec（または &lt;code&gt;--force&lt;/code&gt; ）に &lt;code&gt;+&lt;/code&gt; がなければ、更新は拒否されます。</target>
        </trans-unit>
        <trans-unit id="9514c500d61430538679eec9081979b274172cf9" translate="yes" xml:space="preserve">
          <source>Untracked cache</source>
          <target state="translated">未踏キャッシュ</target>
        </trans-unit>
        <trans-unit id="614ce4ff1bf92552970ab54ff766006d0da693f9" translate="yes" xml:space="preserve">
          <source>Untracked items have the following format:</source>
          <target state="translated">トラックされていない項目は、以下のような形式になっています。</target>
        </trans-unit>
        <trans-unit id="1eade895e693b4111455eda06a87af1097cf4d6c" translate="yes" xml:space="preserve">
          <source>Untyped &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;, e.g. the contents of a file.</source>
          <target state="translated">型なし&lt;a href=&quot;#def_object&quot;&gt;オブジェクト&lt;/a&gt;（例：ファイルの内容）。</target>
        </trans-unit>
        <trans-unit id="7b839a219907b09268c047c522a03961e96bd78b" translate="yes" xml:space="preserve">
          <source>Unused configuration variable. Used in Git versions 2.20 and 2.21 as an escape hatch to enable the legacy shellscript implementation of rebase. Now the built-in rewrite of it in C is always used. Setting this will emit a warning, to alert any remaining users that setting this now does nothing.</source>
          <target state="translated">未使用の設定変数です。Git バージョン 2.20 と 2.21 で、レガシーなシェルスクリプトの実装である rebase を有効にするためのエスケープハッチとして使用されました。現在は、C 言語での組み込みの書き換えが常に使用されています。これを設定すると警告が表示され、残っているユーザーには何もしないことを警告します。</target>
        </trans-unit>
        <trans-unit id="315fc3f07f41b1c3600ceb87f6a9f32b85f1da70" translate="yes" xml:space="preserve">
          <source>Unused configuration variable. Used in Git versions 2.22 to 2.26 as an escape hatch to enable the legacy shellscript implementation of stash. Now the built-in rewrite of it in C is always used. Setting this will emit a warning, to alert any remaining users that setting this now does nothing.</source>
          <target state="translated">未使用の設定変数です。Git のバージョン 2.22 から 2.26 で、レガシーなシェルスクリプトの実装である stash を有効にするためのエスケープハッチとして使用されています。現在は、C言語での組み込みの書き換えが常に使用されています。これを設定すると警告が表示され、これを設定しても何もしないことを警告します。</target>
        </trans-unit>
        <trans-unit id="ca31b4c795dcb03444e6d0c037dbcd47081c70a9" translate="yes" xml:space="preserve">
          <source>Update affected files from CVS repository before attempting export.</source>
          <target state="translated">エクスポートを試みる前に、CVS リポジトリから影響を受けるファイルを更新してください。</target>
        </trans-unit>
        <trans-unit id="82e59b151c004802a1fa23ba3e75a68d14df0e2a" translate="yes" xml:space="preserve">
          <source>Update an existing shelved changelist with this commit. Implies --shelve. Repeat for multiple shelved changelists.</source>
          <target state="translated">このコミットで既存の棚上げされた変更リストを更新します。-shelve を意味します。複数のシェル化された変更リストに対して繰り返してください。</target>
        </trans-unit>
        <trans-unit id="5433caf2e572561b5bb38ff5e69b0263d08b90aa" translate="yes" xml:space="preserve">
          <source>Update and examine branches from the repository you cloned from:</source>
          <target state="translated">クローンしたリポジトリからブランチを更新して調べます。</target>
        </trans-unit>
        <trans-unit id="381f15e94e347f076ef71f417ee29b782a6dcc4d" translate="yes" xml:space="preserve">
          <source>Update auxiliary info file to help dumb servers</source>
          <target state="translated">補助情報ファイルを更新して、ダムサーバーを支援する</target>
        </trans-unit>
        <trans-unit id="d94aecddb1a2d3c03afb4a7cf4e1bb3a0123c2c6" translate="yes" xml:space="preserve">
          <source>Update hook</source>
          <target state="translated">フックの更新</target>
        </trans-unit>
        <trans-unit id="e5f960e3f28d7d7ea59f8750682a356ae18535be" translate="yes" xml:space="preserve">
          <source>Update remote refs along with associated objects</source>
          <target state="translated">関連するオブジェクトと一緒にリモート参照を更新する</target>
        </trans-unit>
        <trans-unit id="ee3315ea0cbb49ab6105a89db0964480184c3ce9" translate="yes" xml:space="preserve">
          <source>Update the Git repository with recent changes from p4, rebasing your work on top:</source>
          <target state="translated">Git リポジトリを p4 からの最近の変更点で更新し、作業内容を上にリベースします。</target>
        </trans-unit>
        <trans-unit id="5937294218e2d7b95b7b77414b52c326239ca8d5" translate="yes" xml:space="preserve">
          <source>Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no &amp;lt;pathspec&amp;gt; is used.</source>
          <target state="translated">インデックスに未知の新しいファイルと作業ツリーで変更されたファイルを追加して、インデックスを更新しますが、作業ツリーから削除されたファイルは無視します。&amp;lt;pathspec&amp;gt;が使用されていない場合、このオプションは何もしません。</target>
        </trans-unit>
        <trans-unit id="94df66721f1bfd4990972c3f5f4a0d6b61f59f9e" translate="yes" xml:space="preserve">
          <source>Update the index just where it already has an entry matching &amp;lt;pathspec&amp;gt;. This removes as well as modifies index entries to match the working tree, but adds no new files.</source>
          <target state="translated">&amp;lt;pathspec&amp;gt;に一致するエントリがすでにある場所でのみインデックスを更新します。これにより、作業ツリーと一致するようにインデックスエントリが削除および変更されますが、新しいファイルは追加されません。</target>
        </trans-unit>
        <trans-unit id="03d173e098621e3730258998672da85e88b347b1" translate="yes" xml:space="preserve">
          <source>Update the index not only where the working tree has a file matching &amp;lt;pathspec&amp;gt; but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.</source>
          <target state="translated">作業ツリーに&amp;lt;pathspec&amp;gt;に一致するファイルがある場所だけでなく、インデックスにすでにエントリがある場所でもインデックスを更新します。これにより、作業ツリーと一致するようにインデックスエントリが追加、変更、および削除されます。</target>
        </trans-unit>
        <trans-unit id="1a6e291eaaa3e731de98429f7fb37fdac90f0a22" translate="yes" xml:space="preserve">
          <source>Update the object name stored in a ref safely</source>
          <target state="translated">refに格納されているオブジェクト名を安全に更新する</target>
        </trans-unit>
        <trans-unit id="00f0c8a1eac4ed2966a7d563ef87a6387d365dcf" translate="yes" xml:space="preserve">
          <source>Update the origin repository&amp;rsquo;s master branch with the dev branch, allowing non-fast-forward updates. &lt;strong&gt;This can leave unreferenced commits dangling in the origin repository.&lt;/strong&gt; Consider the following situation, where a fast-forward is not possible:</source>
          <target state="translated">オリジンリポジトリのマスターブランチをdevブランチで更新し、早送り以外の更新を可能にします。&lt;strong&gt;これにより、参照されていないコミットが元のリポジトリにぶら下がる可能性があります。&lt;/strong&gt;早送りが不可能な次の状況を考えます。</target>
        </trans-unit>
        <trans-unit id="b73d3968359117cfd051c2e81a709d1d9e1579b7" translate="yes" xml:space="preserve">
          <source>Update the reference to the value of the top reflog entry (i.e. &amp;lt;ref&amp;gt;@{0}) if the previous top entry was pruned. (This option is ignored for symbolic references.)</source>
          <target state="translated">前のトップエントリが整理されている場合は、リファレンスをトップのreflogエントリの値（つまり、&amp;lt;ref&amp;gt; @ {0}）に更新します。（このオプションは、シンボリック参照では無視されます。）</target>
        </trans-unit>
        <trans-unit id="d7c08d3ae4fbcbbf6a3dc89cdba309659a4395bc" translate="yes" xml:space="preserve">
          <source>Update the reflog for &amp;lt;name&amp;gt; with &amp;lt;reason&amp;gt;. This is valid only when creating or updating a symbolic ref.</source>
          <target state="translated">&amp;lt;name&amp;gt;のreflogを&amp;lt;reason&amp;gt;で更新します。これは、シンボリック参照を作成または更新する場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="d053e75e709458eca9f01e5c8910658ea18a25cf" translate="yes" xml:space="preserve">
          <source>Update the registered submodules to match what the superproject expects by cloning missing submodules, fetching missing commits in submodules and updating the working tree of the submodules. The &quot;updating&quot; can be done in several ways depending on command line options and the value of &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration variable. The command line option takes precedence over the configuration variable. If neither is given, a &lt;code&gt;checkout&lt;/code&gt; is performed. The &lt;code&gt;update&lt;/code&gt; procedures supported both from the command line as well as through the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration are:</source>
          <target state="translated">登録されているサブモジュールを更新して、欠落しているサブモジュールを複製し、欠落しているコミットをサブモジュールにフェッチし、サブモジュールの作業ツリーを更新することにより、スーパープロジェクトが期待するものと一致させます。 「更新」は、コマンドラインオプションと &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; 構成変数の値に応じて、いくつかの方法で実行できます。コマンドラインオプションは、構成変数よりも優先されます。どちらも指定されていない場合、 &lt;code&gt;checkout&lt;/code&gt; が実行されます。 &lt;code&gt;update&lt;/code&gt; 手順は、コマンドラインから、ならびにを通して両方をサポート &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; 構成は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9a189cb9ecf6f808972788504f5218556d75488e" translate="yes" xml:space="preserve">
          <source>Update the remote-tracking branches for the repository you cloned from, then merge one of them into your current branch:</source>
          <target state="translated">クローンしたリポジトリのリモートトラッキングブランチを更新し、そのうちの一つを現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="b4a6a66956cae4a12a849cae6094fa1d9187d293" translate="yes" xml:space="preserve">
          <source>Update the remote-tracking branches:</source>
          <target state="translated">リモートトラッキングブランチを更新します。</target>
        </trans-unit>
        <trans-unit id="6d5daf3e771e4022d14d6727e49c69b93e7e63af" translate="yes" xml:space="preserve">
          <source>Update the sparse-checkout file to include additional patterns. By default, these patterns are read from the command-line arguments, but they can be read from stdin using the &lt;code&gt;--stdin&lt;/code&gt; option. When &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; is enabled, the given patterns are interpreted as directory names as in the &lt;code&gt;set&lt;/code&gt; subcommand.</source>
          <target state="translated">スパースチェックアウトファイルを更新して、追加のパターンを含めます。デフォルトでは、これらのパターンはコマンドライン引数から読み取られますが、 &lt;code&gt;--stdin&lt;/code&gt; オプションを使用してstdinから読み取ることができます。とき &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; が有効になっている、与えられたパターンは、のようにディレクトリ名として解釈され &lt;code&gt;set&lt;/code&gt; サブコマンド。</target>
        </trans-unit>
        <trans-unit id="f68dff1cbdca38d9a97763a1d9fd849e951b6a1b" translate="yes" xml:space="preserve">
          <source>Updates files in the working tree to match the version in the index or the specified tree. If no pathspec was given, &lt;code&gt;git checkout&lt;/code&gt; will also update &lt;code&gt;HEAD&lt;/code&gt; to set the specified branch as the current branch.</source>
          <target state="translated">作業ツリーのファイルを更新して、インデックスまたは指定されたツリーのバージョンと一致させます。pathspecが指定されていない場合、 &lt;code&gt;git checkout&lt;/code&gt; は &lt;code&gt;HEAD&lt;/code&gt; も更新して、指定されたブランチを現在のブランチとして設定します。</target>
        </trans-unit>
        <trans-unit id="091bf3e8c6fb28b8688a9117ac018615896df561" translate="yes" xml:space="preserve">
          <source>Updates remote refs using local refs, while sending objects necessary to complete the given refs.</source>
          <target state="translated">与えられた参照を完了させるために必要なオブジェクトを送信しながら、ローカル参照を使用してリモート参照を更新します。</target>
        </trans-unit>
        <trans-unit id="91ca9b60db53a2ebedea4c579e08371ec4025869" translate="yes" xml:space="preserve">
          <source>Updating A with the resulting merge commit will fast-forward and your push will be accepted.</source>
          <target state="translated">マージコミットの結果に応じて A を更新すると、早送りされ、あなたのプッシュが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="b1b31935884de26d68d690781ac1ec814b3bc924" translate="yes" xml:space="preserve">
          <source>Updating a repository with git fetch</source>
          <target state="translated">git fetch でリポジトリを更新する</target>
        </trans-unit>
        <trans-unit id="c2ed1ab77aee7c3aaed70bc448641d662955a12f" translate="yes" xml:space="preserve">
          <source>Updating existing tests that assume GIT_TRACE format messages.</source>
          <target state="translated">GIT_TRACE 形式のメッセージを前提とした既存のテストを更新しました。</target>
        </trans-unit>
        <trans-unit id="c5ded60beb1b0eb17cab63a8e09a8acd2261286e" translate="yes" xml:space="preserve">
          <source>Updating the index did something else too: it created a &lt;code&gt;.git/index&lt;/code&gt; file. This is the index that describes your current working tree, and something you should be very aware of. Again, you normally never worry about the index file itself, but you should be aware of the fact that you have not actually really &quot;checked in&quot; your files into Git so far, you&amp;rsquo;ve only &lt;strong&gt;told&lt;/strong&gt; Git about them.</source>
          <target state="translated">インデックスを更新すると、別のことも行われました。これにより、 &lt;code&gt;.git/index&lt;/code&gt; ファイルが作成されました。これは、現在の作業ツリーを説明するインデックスであり、非常に注意する必要があります。ここでも、あなたは通常、インデックスファイル自体心配はありませんが、あなたは、あなたがいない実際には本当にGitリポジトリへのあなたのファイルはこれまでのところ、あなただけしました「で確認」しているという事実を認識しておく必要があり&lt;strong&gt;語っ&lt;/strong&gt;それらについてのGitを。</target>
        </trans-unit>
        <trans-unit id="583381e5edf6e3ab467919c38286667f0916979d" translate="yes" xml:space="preserve">
          <source>Upon completion, &amp;lt;branch&amp;gt; will be the current branch.</source>
          <target state="translated">完了すると、&amp;lt;branch&amp;gt;が現在のブランチになります。</target>
        </trans-unit>
        <trans-unit id="c956664b8da61af6d0e1bf33a6e1ff75cbe45ad1" translate="yes" xml:space="preserve">
          <source>Upon seeing an invalid object name in the input, pretend as if the bad input was not given.</source>
          <target state="translated">入力に無効なオブジェクト名があった場合は、不正な入力がなかったことにしてください。</target>
        </trans-unit>
        <trans-unit id="d725441fc805b8226e9417fb2c8cf53ac8d791d5" translate="yes" xml:space="preserve">
          <source>Upstream branch to compare against. May be any valid commit, not just an existing branch name. Defaults to the configured upstream for the current branch.</source>
          <target state="translated">比較対象となるアップストリームブランチ。既存のブランチ名だけでなく、有効なコミットであっても構いません。デフォルトは、現在のブランチのアップストリームで設定されているものです。</target>
        </trans-unit>
        <trans-unit id="f5808323e4ba717fc383cb75e63b6cf3a4e857e7" translate="yes" xml:space="preserve">
          <source>Upstream branch to search for equivalent commits. Defaults to the upstream branch of HEAD.</source>
          <target state="translated">同等のコミットを検索するアップストリームブランチ。デフォルトは HEAD のアップストリームブランチです。</target>
        </trans-unit>
        <trans-unit id="309bc26d3c4c2649258f95c7069216bb2a7ac5f4" translate="yes" xml:space="preserve">
          <source>Upstream location from which commits are identified to submit to p4. By default, this is the most recent p4 commit reachable from &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">p4に送信するコミットが識別される上流の場所。デフォルトでは、これは &lt;code&gt;HEAD&lt;/code&gt; から到達可能な最新のp4コミットです。</target>
        </trans-unit>
        <trans-unit id="df28f1403e8348eae4829434034d1a95e5fe659d" translate="yes" xml:space="preserve">
          <source>Url translation</source>
          <target state="translated">Url翻訳</target>
        </trans-unit>
        <trans-unit id="7ae770d8c2db91584c78e413662ced65719f53ca" translate="yes" xml:space="preserve">
          <source>Usage of this flag will probably be rare, since you can get rid of commits that start empty by just firing up an interactive rebase and removing the lines corresponding to the commits you don&amp;rsquo;t want. This flag exists as a convenient shortcut, such as for cases where external tools generate many empty commits and you want them all removed.</source>
          <target state="translated">インタラクティブなリベースを起動し、不要なコミットに対応する行を削除するだけで、空で始まるコミットを取り除くことができるため、このフラグの使用はおそらくまれです。このフラグは、外部ツールが多数の空のコミットを生成し、それらをすべて削除する場合など、便利なショートカットとして存在します。</target>
        </trans-unit>
        <trans-unit id="f51159e5f3b0adbeed98e188d040286280a5320b" translate="yes" xml:space="preserve">
          <source>Usage text</source>
          <target state="translated">使用テキスト</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="6039144c2dc6586b6f3f0cb7423bcc0b3de0d0c1" translate="yes" xml:space="preserve">
          <source>Use &quot;patience diff&quot; algorithm when generating patches.</source>
          <target state="translated">パッチを生成する際には、&quot;patient diff&quot; アルゴリズムを使用してください。</target>
        </trans-unit>
        <trans-unit id="1712fa1f1e6f89a27b7d3117ed39073a3258971d" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;dir&amp;gt; to store the resulting files, instead of the current working directory.</source>
          <target state="translated">現在の作業ディレクトリではなく、&amp;lt;dir&amp;gt;を使用して、結果のファイルを保存します。</target>
        </trans-unit>
        <trans-unit id="89ed1ad2d65d4e1af42e685a9ee22c739e5d2c9b" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;message&amp;gt; instead of the branch names for the first line of the log message. For use with &lt;code&gt;--log&lt;/code&gt;.</source>
          <target state="translated">ログメッセージの最初の行のブランチ名の代わりに&amp;lt;message&amp;gt;を使用します。 &lt;code&gt;--log&lt;/code&gt; とともに使用します。</target>
        </trans-unit>
        <trans-unit id="a8e6c324c4e7440184ef28eb2f6fc1fca5a4a325" translate="yes" xml:space="preserve">
          <source>Use &amp;lt;regex&amp;gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies &lt;code&gt;--word-diff&lt;/code&gt; unless it was already enabled.</source>
          <target state="translated">空白ではない文字列を単語と見なす代わりに、&amp;lt;regex&amp;gt;を使用して単語を決定します。また、すでに有効になっていない限り、 &lt;code&gt;--word-diff&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="f70b8a97f949594b729b07efce2ca59a63023925" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;!&lt;/code&gt; to not make the corresponding negated long option available.</source>
          <target state="translated">使用してください &lt;code&gt;!&lt;/code&gt; 対応するnegated longオプションを使用可能にしない。</target>
        </trans-unit>
        <trans-unit id="f7924a219e6794d45a36b15b2c44738227b795ff" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; to set the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; explicitly. e.g., &quot;git remote set-head origin master&quot; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/master&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; を使用して、symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; を明示的に設定します。たとえば、「git remote set-head origin master」は、symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; を &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; に設定します。これは、 &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; がすでに存在する場合にのみ機能します。そうでない場合は、最初にフェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="e726751622c7eadb004a31b60b5fa1e9cc1fbf90" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; to set the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; explicitly. e.g., &lt;code&gt;git
remote set-head origin master&lt;/code&gt; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/master&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; を使用して、symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; を明示的に設定します。たとえば、 &lt;code&gt;git remote set-head origin master&lt;/code&gt; は、symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; を &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; に設定します。これは、 &lt;code&gt;refs/remotes/origin/master&lt;/code&gt; がすでに存在する場合にのみ機能します。そうでない場合は、最初にフェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="d950943422ee3b93275d1e4b1e510463e5b432e0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; to contact a running cache daemon (or start a new cache daemon if one is not started). Defaults to &lt;code&gt;$XDG_CACHE_HOME/git/credential/socket&lt;/code&gt; unless &lt;code&gt;~/.git-credential-cache/&lt;/code&gt; exists in which case &lt;code&gt;~/.git-credential-cache/socket&lt;/code&gt; is used instead. If your home directory is on a network-mounted filesystem, you may need to change this to a local filesystem. You must specify an absolute path.</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 使用を、実行中のキャッシュデーモンに接続します（または、キャッシュデーモンが起動されていない場合は、新しいキャッシュデーモンを起動します）。 &lt;code&gt;~/.git-credential-cache/&lt;/code&gt; が存在しない限り、デフォルトは &lt;code&gt;$XDG_CACHE_HOME/git/credential/socket&lt;/code&gt; です。この場合、代わりに &lt;code&gt;~/.git-credential-cache/socket&lt;/code&gt; が使用されます。ホームディレクトリがネットワークマウントされたファイルシステム上にある場合、これをローカルファイルシステムに変更する必要があるかもしれません。絶対パスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="faabe60607ec900b5e4ad4f074b4870d8f9c10c6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; to lookup and store credentials. The file will have its filesystem permissions set to prevent other users on the system from reading it, but will not be encrypted or otherwise protected. If not specified, credentials will be searched for from &lt;code&gt;~/.git-credentials&lt;/code&gt; and &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt;, and credentials will be written to &lt;code&gt;~/.git-credentials&lt;/code&gt; if it exists, or &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; if it exists and the former does not. See also &lt;a href=&quot;#FILES&quot;&gt;FILES&lt;/a&gt;.</source>
          <target state="translated">資格情報を検索して保存するには、 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; を使用します。ファイルには、システム上の他のユーザーがファイルを読み取れないようにファイルシステムのアクセス許可が設定されますが、暗号化または保護されません。指定しない場合、資格情報はから検索されます &lt;code&gt;~/.git-credentials&lt;/code&gt; および &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; 、および資格情報に書き込まれます &lt;code&gt;~/.git-credentials&lt;/code&gt; が存在する場合、または &lt;code&gt;$XDG_CONFIG_HOME/git/credentials&lt;/code&gt; が存在する場合前者はしません。&lt;a href=&quot;#FILES&quot;&gt;FILES&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="aadb92eae500ef695bbe6a445720ce25246dd04e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;*&lt;/code&gt; to mean that this option should not be listed in the usage generated for the &lt;code&gt;-h&lt;/code&gt; argument. It&amp;rsquo;s shown for &lt;code&gt;--help-all&lt;/code&gt; as documented in &lt;a href=&quot;gitcli&quot;&gt;gitcli[7]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; を使用すると、このオプションは &lt;code&gt;-h&lt;/code&gt; 引数に対して生成される使用法にリストされません。&lt;a href=&quot;gitcli&quot;&gt;gitcli [7]に&lt;/a&gt;記載されているように、-- &lt;code&gt;--help-all&lt;/code&gt; に対して表示されます。</target>
        </trans-unit>
        <trans-unit id="3bbcee2a044e9c08185b38acb1e1c57ceea88054" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;--no-guess&lt;/code&gt; to disable this.</source>
          <target state="translated">使用 &lt;code&gt;--no-guess&lt;/code&gt; 、これを無効にします。</target>
        </trans-unit>
        <trans-unit id="6deefc2a8fa6667ca14a90dee15faf81b1f0546a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-o master&lt;/code&gt; for continuing an import that was initially done by the old cvs2git tool.</source>
          <target state="translated">古いcvs2gitツールによって最初に行われたインポートを続行するには、 &lt;code&gt;-o master&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a4527eec708654a210ce88433047c8e573fb91f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;-r&lt;/code&gt; together with &lt;code&gt;-d&lt;/code&gt; to delete remote-tracking branches. Note, that it only makes sense to delete remote-tracking branches if they no longer exist in the remote repository or if &lt;code&gt;git fetch&lt;/code&gt; was configured not to fetch them again. See also the &lt;code&gt;prune&lt;/code&gt; subcommand of &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt; for a way to clean up all obsolete remote-tracking branches.</source>
          <target state="translated">&lt;code&gt;-r&lt;/code&gt; を &lt;code&gt;-d&lt;/code&gt; と一緒に使用して、リモート追跡ブランチを削除します。リモート追跡ブランチがリモートリポジトリに存在しない場合、または &lt;code&gt;git fetch&lt;/code&gt; がそれらを再度フェッチしないように構成されている場合にのみ、リモート追跡ブランチを削除しても意味があることに注意してください。廃止されたすべてのリモート追跡ブランチをクリーンアップする方法については、&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]&lt;/a&gt;の &lt;code&gt;prune&lt;/code&gt; サブコマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="eb7d25cab29167524de808a8da669505756898ee" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;=&lt;/code&gt; if the option takes an argument.</source>
          <target state="translated">オプションが引数を取る場合は &lt;code&gt;=&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d247642d4c8609f74c2030daa3d24c7c82d2e46d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;?&lt;/code&gt; to mean that the option takes an optional argument. You probably want to use the &lt;code&gt;--stuck-long&lt;/code&gt; mode to be able to unambiguously parse the optional argument.</source>
          <target state="translated">使用し &lt;code&gt;?&lt;/code&gt; オプションがオプションの引数を取ることを意味します。おそらく &lt;code&gt;--stuck-long&lt;/code&gt; モードを使用して、オプションの引数を明確に解析できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="7929eb6fd77d1ea35c9c481fc89518eafcc1cd45" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git bisect&lt;/code&gt; to get a short usage description, and &lt;code&gt;git bisect
help&lt;/code&gt; or &lt;code&gt;git bisect -h&lt;/code&gt; to get a long usage description.</source>
          <target state="translated">&lt;code&gt;git bisect&lt;/code&gt; を使用して短い使用法の説明を取得し、 &lt;code&gt;git bisect help&lt;/code&gt; または &lt;code&gt;git bisect -h&lt;/code&gt; を使用して長い使用法の説明を取得します。</target>
        </trans-unit>
        <trans-unit id="599c65a25784af23c9351ba6f4874c534a65a263" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git cherry origin&lt;/code&gt; to see which ones of your patches were accepted, and/or use &lt;code&gt;git rebase origin&lt;/code&gt; to port your unmerged changes forward to the updated upstream.</source>
          <target state="translated">&lt;code&gt;git cherry origin&lt;/code&gt; を使用して、受け入れられたパッチを確認するか、 &lt;code&gt;git rebase origin&lt;/code&gt; を使用して、マージされていない変更を更新されたアップストリームに移植します。</target>
        </trans-unit>
        <trans-unit id="f1986201248cbf297f2fb86d6f520b30d057ce7d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt; or &lt;code&gt;git remote update&lt;/code&gt; to stay up to date.</source>
          <target state="translated">使用して、 &lt;code&gt;git fetch &amp;lt;remote&amp;gt;&lt;/code&gt; または &lt;code&gt;git remote update&lt;/code&gt; 最新の状態に滞在します。</target>
        </trans-unit>
        <trans-unit id="252ef42d37b56d31d5e5dc2525ae974052dfca91" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git format-patch origin&lt;/code&gt; to prepare patches for e-mail submission to your upstream and send it out. Go back to step 2. and continue.</source>
          <target state="translated">&lt;code&gt;git format-patch origin&lt;/code&gt; を使用して、アップストリームへの電子メール送信用のパッチを準備して送信します。手順2に戻り、続行します。</target>
        </trans-unit>
        <trans-unit id="cd30f3ed950161de3f8267d9a18953af3c02784f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git mergetool&lt;/code&gt; to run one of several merge utilities to resolve merge conflicts. It is typically run after &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git mergetool&lt;/code&gt; を使用して、いくつかのマージユーティリティの1つを実行し、マージの競合を解決します。通常は &lt;code&gt;git merge&lt;/code&gt; の後に実行されます。</target>
        </trans-unit>
        <trans-unit id="6b298c06fc405635f29d06efdf0f42592d8075f2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git rev-parse&lt;/code&gt; in option parsing mode (see PARSEOPT section below).</source>
          <target state="translated">オプション解析モードで &lt;code&gt;git rev-parse&lt;/code&gt; を使用します（下記のPARSEOPTセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="7c9820d48befbd19730095f238fb8a15824823ad" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git rev-parse&lt;/code&gt; in shell quoting mode (see SQ-QUOTE section below). In contrast to the &lt;code&gt;--sq&lt;/code&gt; option below, this mode does only quoting. Nothing else is done to command input.</source>
          <target state="translated">シェルの引用モードで &lt;code&gt;git rev-parse&lt;/code&gt; を使用します（以下のSQ-QUOTEセクションを参照）。以下の &lt;code&gt;--sq&lt;/code&gt; オプションとは対照的に、このモードは引用のみを行います。コマンド入力に対して他に何も行われません。</target>
        </trans-unit>
        <trans-unit id="4c4d44083fa5e2a6971987cf935297be30994f4c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stash&lt;/code&gt; when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the &lt;code&gt;HEAD&lt;/code&gt; commit.</source>
          <target state="translated">作業ディレクトリとインデックスの現在の状態を記録したいが、クリーンな作業ディレクトリに戻りたい場合は、 &lt;code&gt;git stash&lt;/code&gt; を使用してください。このコマンドは、ローカルの変更を保存し、 &lt;code&gt;HEAD&lt;/code&gt; コミットに一致するように作業ディレクトリを元に戻します。</target>
        </trans-unit>
        <trans-unit id="41c11f9d8154a7d9c49ff48bc15e09cdeb4a9a5c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stripspace --strip-comments&lt;/code&gt; to obtain:</source>
          <target state="translated">取得するには、 &lt;code&gt;git stripspace --strip-comments&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="141b00818c5025cc15ff515d81283fc5705a8a4e" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;git stripspace&lt;/code&gt; with no arguments to obtain:</source>
          <target state="translated">引数なしで &lt;code&gt;git stripspace&lt;/code&gt; を使用して取得します。</target>
        </trans-unit>
        <trans-unit id="ae0479a18945009a7ebac30bdfceaa72c61a99c4" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ident&lt;/code&gt; in the &lt;code&gt;From:&lt;/code&gt; header of each commit email. If the author ident of the commit is not textually identical to the provided &lt;code&gt;ident&lt;/code&gt;, place a &lt;code&gt;From:&lt;/code&gt; header in the body of the message with the original author. If no &lt;code&gt;ident&lt;/code&gt; is given, use the committer ident.</source>
          <target state="translated">各コミットメールの &lt;code&gt;From:&lt;/code&gt; ヘッダーで &lt;code&gt;ident&lt;/code&gt; を使用します。コミットの著者IDENTはテキストで提供さと同一でない場合 &lt;code&gt;ident&lt;/code&gt; 、場所A &lt;code&gt;From:&lt;/code&gt; 原作者のメッセージの本体内のヘッダ。 &lt;code&gt;ident&lt;/code&gt; が指定されていない場合は、コミッターIDを使用します。</target>
        </trans-unit>
        <trans-unit id="8fb68f530aa46816206d7ea34908da4d297edef3" translate="yes" xml:space="preserve">
          <source>Use IPv4 addresses only, ignoring IPv6 addresses.</source>
          <target state="translated">IPv6アドレスは無視して、IPv4アドレスのみを使用してください。</target>
        </trans-unit>
        <trans-unit id="d89ac89f76f16a68a863b0d9f578ffd1a558d6b0" translate="yes" xml:space="preserve">
          <source>Use IPv6 addresses only, ignoring IPv4 addresses.</source>
          <target state="translated">IPv4アドレスは無視して、IPv6アドレスのみを使用してください。</target>
        </trans-unit>
        <trans-unit id="23206ddfb8d01b68973d7bd9cccf799f208e3657" translate="yes" xml:space="preserve">
          <source>Use Message &amp;rarr; Insert file&amp;hellip;​ and insert the patch.</source>
          <target state="translated">メッセージ&amp;rarr;ファイルの挿入&amp;hellip;を使用して、パッチを挿入します。</target>
        </trans-unit>
        <trans-unit id="1b7e380bb9ef947a64359e01f17ce54cd3bdece1" translate="yes" xml:space="preserve">
          <source>Use One Mark Per Commit</source>
          <target state="translated">コミットごとに1つのマークを使用する</target>
        </trans-unit>
        <trans-unit id="c24268aab2b43d4e294643c8fbcbd60d377e139b" translate="yes" xml:space="preserve">
          <source>Use POSIX extended/basic regexp for patterns. Default is to use basic regexp.</source>
          <target state="translated">パターンに POSIX 拡張/基本正規表現を使用します。デフォルトは基本正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="36e96e4a2fd002679f3b794b4968539810c5c2eb" translate="yes" xml:space="preserve">
          <source>Use Perl-compatible regular expressions for patterns.</source>
          <target state="translated">パターンにはPerl互換の正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="fd46ce4ee0de88bb1a4ebb0e0c6375d24c2fb065" translate="yes" xml:space="preserve">
          <source>Use SO_REUSEADDR when binding the listening socket. This allows the server to restart without waiting for old connections to time out.</source>
          <target state="translated">リスニングソケットをバインドする際にSO_REUSEADDRを使用します。これにより、古い接続がタイムアウトするのを待たずにサーバを再起動することができます。</target>
        </trans-unit>
        <trans-unit id="f351ffbdfc957393f82f6653e37778e19987b350" translate="yes" xml:space="preserve">
          <source>Use Tag Fixup Branches</source>
          <target state="translated">タグの修正ブランチを使用する</target>
        </trans-unit>
        <trans-unit id="41019858ddf6bd113a2b54361af9c75b6d741367" translate="yes" xml:space="preserve">
          <source>Use \0 as the delimiter for pathnames in the output, and print them verbatim. Without this option, pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable core.quotePath (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">出力のパス名の区切り文字として\ 0を使用し、逐語的に出力します。このオプションがないと、構成変数core.quotePathで説明されているように「異常な」文字を含むパス名が引用符で囲まれます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="67640e675158aa473b8a69cc0cdb46fb8ed7283f" translate="yes" xml:space="preserve">
          <source>Use a &quot;stable&quot; sum of hashes as the patch ID. With this option:</source>
          <target state="translated">パッチ ID として「安定した」ハッシュの合計を使用します。このオプションを使うと</target>
        </trans-unit>
        <trans-unit id="0ec5feaf620cc0230519584645c952a1ae99d83c" translate="yes" xml:space="preserve">
          <source>Use a client spec to find the list of interesting files in p4. See the &quot;CLIENT SPEC&quot; section below.</source>
          <target state="translated">クライアントスペックを使って、p4の中の興味深いファイルのリストを探します。後述の「クライアントスペック」を参照してください。</target>
        </trans-unit>
        <trans-unit id="cf410607b4d646fae6b37dffcb3f37fcc481f52b" translate="yes" xml:space="preserve">
          <source>Use a mergetool. &lt;code&gt;git mergetool&lt;/code&gt; to launch a graphical mergetool which will work you through the merge.</source>
          <target state="translated">mergetoolを使用します。 &lt;code&gt;git mergetool&lt;/code&gt; を使用して、マージを実行するグ​​ラフィカルなマージツールを起動します。</target>
        </trans-unit>
        <trans-unit id="e7589df3d820308df2c8a838829de10cfbcf2077" translate="yes" xml:space="preserve">
          <source>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a &lt;code&gt;+&lt;/code&gt;/&lt;code&gt;-&lt;/code&gt;/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde &lt;code&gt;~&lt;/code&gt; on a line of its own.</source>
          <target state="translated">スクリプトの使用を目的とした特別な行ベースの形式を使用します。追加/削除/変更されていないランは、通常の統一されたdiff形式で印刷されます。行の先頭の &lt;code&gt;+&lt;/code&gt; / &lt;code&gt;-&lt;/code&gt; / ``文字で始まり、行の終わりまで続きます。入力の改行は、それ自体の行のチルダ &lt;code&gt;~&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="77b024aefcbc37a1627539595d18a928f0842816" translate="yes" xml:space="preserve">
          <source>Use a tarball as a starting point for a new repository.</source>
          <target state="translated">新しいリポジトリの出発点として tarball を使用します。</target>
        </trans-unit>
        <trans-unit id="afac3b09febbe243aa11caf12f594c7284e7bf23" translate="yes" xml:space="preserve">
          <source>Use an &quot;unstable&quot; hash as the patch ID. With this option, the result produced is compatible with the patch-id value produced by git 1.9 and older. Users with pre-existing databases storing patch-ids produced by git 1.9 and older (who do not deal with reordered patches) may want to use this option.</source>
          <target state="translated">パッチ ID として &quot;unstable&quot; ハッシュを使用します。このオプションを指定すると、生成される結果は git 1.9 以降で生成された patch-id と互換性があります。git 1.9 以降で作成されたパッチ ID を保存しているデータベースがすでにある場合 (再注文されたパッチを扱わない場合)は、このオプションを使用したほうがよいでしょう。</target>
        </trans-unit>
        <trans-unit id="ef4088fc09156b38070cb26da8281dc7bfd8c504" translate="yes" xml:space="preserve">
          <source>Use an atomic transaction for updating the refs. If any of the refs fails to update then the entire push will fail without changing any refs.</source>
          <target state="translated">参照の更新にはアトミックトランザクションを使用します。いずれかの refs が更新に失敗した場合は、refs を変更せずにプッシュ全体が失敗します。</target>
        </trans-unit>
        <trans-unit id="049c3e05f1b188c69413c7549059c67376f76ed1" translate="yes" xml:space="preserve">
          <source>Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.</source>
          <target state="translated">利用可能であれば、リモート側でアトミックトランザクションを使用します。すべての参照が更新されるか、エラーの場合は参照が更新されません。サーバがアトミックプッシュをサポートしていない場合、プッシュは失敗します。</target>
        </trans-unit>
        <trans-unit id="402b0ecf5212c8d413a7923b4b251cf4b803a260" translate="yes" xml:space="preserve">
          <source>Use applying strategies to rebase (calling &lt;code&gt;git-am&lt;/code&gt; internally). This option may become a no-op in the future once the merge backend handles everything the apply one does.</source>
          <target state="translated">適用戦略を使用してリベースします（内部で &lt;code&gt;git-am&lt;/code&gt; を呼び出します）。マージバックエンドが適用のすべてを処理すると、このオプションは将来的にノーオペレーションになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e55fb404106de44576d9bc731a7fb4baf9a6337c" translate="yes" xml:space="preserve">
          <source>Use binary search to find the commit that introduced a bug</source>
          <target state="translated">バイナリ検索を使ってバグが発生したコミットを見つける</target>
        </trans-unit>
        <trans-unit id="78ee9b127501691d305b39cc3fc13fc74a1d22a1" translate="yes" xml:space="preserve">
          <source>Use customized color for &lt;code&gt;git add --interactive&lt;/code&gt; and &lt;code&gt;git clean --interactive&lt;/code&gt; output. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; may be &lt;code&gt;prompt&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;help&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt;, for four distinct types of normal output from interactive commands.</source>
          <target state="translated">&lt;code&gt;git add --interactive&lt;/code&gt; および &lt;code&gt;git clean --interactive&lt;/code&gt; 出力にカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、対話型コマンドからの4つの異なるタイプの通常の出力に対して、 &lt;code&gt;prompt&lt;/code&gt; 、 &lt;code&gt;header&lt;/code&gt; 、 &lt;code&gt;help&lt;/code&gt; または &lt;code&gt;error&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bf3aeb7f00c3d69ade01b5cc321078d4f50948ae" translate="yes" xml:space="preserve">
          <source>Use customized color for &lt;code&gt;git log --decorate&lt;/code&gt; output. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;remoteBranch&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;stash&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt; for local branches, remote-tracking branches, tags, stash and HEAD, respectively and &lt;code&gt;grafted&lt;/code&gt; for grafted commits.</source>
          <target state="translated">&lt;code&gt;git log --decorate&lt;/code&gt; 出力にカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; の一つである &lt;code&gt;branch&lt;/code&gt; 、 &lt;code&gt;remoteBranch&lt;/code&gt; 、 &lt;code&gt;tag&lt;/code&gt; 、 &lt;code&gt;stash&lt;/code&gt; 又は &lt;code&gt;HEAD&lt;/code&gt; それぞれ、ローカルブランチのリモート追跡ブランチ、タグ、スタッシュとHEADと &lt;code&gt;grafted&lt;/code&gt; グラフトコミットするため。</target>
        </trans-unit>
        <trans-unit id="29ecef38edab0e1998d46583be9558cf2a562eff" translate="yes" xml:space="preserve">
          <source>Use customized color for branch coloration. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;current&lt;/code&gt; (the current branch), &lt;code&gt;local&lt;/code&gt; (a local branch), &lt;code&gt;remote&lt;/code&gt; (a remote-tracking branch in refs/remotes/), &lt;code&gt;upstream&lt;/code&gt; (upstream tracking branch), &lt;code&gt;plain&lt;/code&gt; (other refs).</source>
          <target state="translated">ブランチの配色にはカスタマイズした色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、 &lt;code&gt;current&lt;/code&gt; （現在のブランチ）、 &lt;code&gt;local&lt;/code&gt; （ローカルブランチ）、 &lt;code&gt;remote&lt;/code&gt; （refs / remotes /のリモート追跡ブランチ）、 &lt;code&gt;upstream&lt;/code&gt; （上流の追跡ブランチ）、 &lt;code&gt;plain&lt;/code&gt; （その他の参照）のいずれかです。</target>
        </trans-unit>
        <trans-unit id="fcdeebdb47ef8466da45d806c0dccf091f4447a0" translate="yes" xml:space="preserve">
          <source>Use customized color for diff colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; specifies which part of the patch to use the specified color, and is one of &lt;code&gt;context&lt;/code&gt; (context text - &lt;code&gt;plain&lt;/code&gt; is a historical synonym), &lt;code&gt;meta&lt;/code&gt; (metainformation), &lt;code&gt;frag&lt;/code&gt; (hunk header), &lt;code&gt;func&lt;/code&gt; (function in hunk header), &lt;code&gt;old&lt;/code&gt; (removed lines), &lt;code&gt;new&lt;/code&gt; (added lines), &lt;code&gt;commit&lt;/code&gt; (commit headers), &lt;code&gt;whitespace&lt;/code&gt; (highlighting whitespace errors), &lt;code&gt;oldMoved&lt;/code&gt; (deleted lines), &lt;code&gt;newMoved&lt;/code&gt; (added lines), &lt;code&gt;oldMovedDimmed&lt;/code&gt;, &lt;code&gt;oldMovedAlternative&lt;/code&gt;, &lt;code&gt;oldMovedAlternativeDimmed&lt;/code&gt;, &lt;code&gt;newMovedDimmed&lt;/code&gt;, &lt;code&gt;newMovedAlternative&lt;/code&gt;&lt;code&gt;newMovedAlternativeDimmed&lt;/code&gt; (See the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; setting of &lt;code&gt;--color-moved&lt;/code&gt; in &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; for details), &lt;code&gt;contextDimmed&lt;/code&gt;, &lt;code&gt;oldDimmed&lt;/code&gt;, &lt;code&gt;newDimmed&lt;/code&gt;, &lt;code&gt;contextBold&lt;/code&gt;, &lt;code&gt;oldBold&lt;/code&gt;, and &lt;code&gt;newBold&lt;/code&gt; (see &lt;a href=&quot;git-range-diff&quot;&gt;git-range-diff[1]&lt;/a&gt; for details).</source>
          <target state="translated">カスタマイズされた色を使用して、差分色付け &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、指定した色を使用するパッチの部分を指定し、 &lt;code&gt;context&lt;/code&gt; （コンテキストテキスト- &lt;code&gt;plain&lt;/code&gt; は履歴の同義語です）、 &lt;code&gt;meta&lt;/code&gt; （メタ情報）、 &lt;code&gt;frag&lt;/code&gt; （ハンクヘッダー）、 &lt;code&gt;func&lt;/code&gt; （ハンクヘッダー内の関数）、 &lt;code&gt;old&lt;/code&gt; （削除された行）、 &lt;code&gt;new&lt;/code&gt; （追加された行）、 &lt;code&gt;commit&lt;/code&gt; （ヘッダーのコミット）、 &lt;code&gt;whitespace&lt;/code&gt; （空白エラーの強調表示）、 &lt;code&gt;oldMoved&lt;/code&gt; （削除された行）、 &lt;code&gt;newMoved&lt;/code&gt; （追加された行）、 &lt;code&gt;oldMovedDimmed&lt;/code&gt; 、 &lt;code&gt;oldMovedAlternative&lt;/code&gt; 、 &lt;code&gt;oldMovedAlternativeDimmed&lt;/code&gt; 、 &lt;code&gt;newMovedDimmed&lt;/code&gt; 、 &lt;code&gt;newMovedAlternative&lt;/code&gt; &lt;code&gt;newMovedAlternativeDimmed&lt;/code&gt; （詳細については、&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;の &lt;code&gt;--color-moved&lt;/code&gt; の &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; 設定を参照）、 &lt;code&gt;contextDimmed&lt;/code&gt; 、 &lt;code&gt;oldDimmed&lt;/code&gt; 、 &lt;code&gt;newDimmed&lt;/code&gt; 、 &lt;code&gt;contextBold&lt;/code&gt; 、 &lt;code&gt;oldBold&lt;/code&gt; 、および &lt;code&gt;newBold&lt;/code&gt; （&lt;a href=&quot;git-range-diff&quot;&gt;git-rangeを&lt;/a&gt;参照）1]詳細については）。</target>
        </trans-unit>
        <trans-unit id="799532fe06b09693cab5782f0c7b74d1305d2cb1" translate="yes" xml:space="preserve">
          <source>Use customized color for each remote keyword. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; may be &lt;code&gt;hint&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; which match the corresponding keyword.</source>
          <target state="translated">各リモートキーワードにカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、対応するキーワードに一致する &lt;code&gt;hint&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; 、 &lt;code&gt;success&lt;/code&gt; または &lt;code&gt;error&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e8363e3bb3b19269f1bec63465f050d08c7400a8" translate="yes" xml:space="preserve">
          <source>Use customized color for grep colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; specifies which part of the line to use the specified color, and is one of</source>
          <target state="translated">grepの色付けにカスタマイズした色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、指定された色を使用する線の部分を指定します。</target>
        </trans-unit>
        <trans-unit id="3d940f7a54cc13b6b8a420b163ce2b7e4ccedf38" translate="yes" xml:space="preserve">
          <source>Use customized color for hints.</source>
          <target state="translated">ヒントにカスタマイズした色を使用します。</target>
        </trans-unit>
        <trans-unit id="a7bc0186c1d40a59aee910eedb6524484cbce3a0" translate="yes" xml:space="preserve">
          <source>Use customized color for push errors.</source>
          <target state="translated">プッシュエラーにカスタマイズされた色を使用します。</target>
        </trans-unit>
        <trans-unit id="efd1e4b094e6a540e69b42772ae161651f4648a2" translate="yes" xml:space="preserve">
          <source>Use customized color for status colorization. &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; is one of &lt;code&gt;header&lt;/code&gt; (the header text of the status message), &lt;code&gt;added&lt;/code&gt; or &lt;code&gt;updated&lt;/code&gt; (files which are added but not committed), &lt;code&gt;changed&lt;/code&gt; (files which are changed but not added in the index), &lt;code&gt;untracked&lt;/code&gt; (files which are not tracked by Git), &lt;code&gt;branch&lt;/code&gt; (the current branch), &lt;code&gt;nobranch&lt;/code&gt; (the color the &lt;code&gt;no branch&lt;/code&gt; warning is shown in, defaulting to red), &lt;code&gt;localBranch&lt;/code&gt; or &lt;code&gt;remoteBranch&lt;/code&gt; (the local and remote branch names, respectively, when branch and tracking information is displayed in the status short-format), or &lt;code&gt;unmerged&lt;/code&gt; (files which have unmerged changes).</source>
          <target state="translated">ステータスの色付けにはカスタマイズされた色を使用します。 &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; は、 &lt;code&gt;header&lt;/code&gt; （ステータスメッセージのヘッダーテキスト）、 &lt;code&gt;added&lt;/code&gt; または &lt;code&gt;updated&lt;/code&gt; （追加されたがコミットされていないファイル）、 &lt;code&gt;changed&lt;/code&gt; （変更されたがインデックスに追加されていないファイル）、 &lt;code&gt;untracked&lt;/code&gt; されていない（ファイル以外のファイル）Gitによって追跡されます）、 &lt;code&gt;branch&lt;/code&gt; （現在のブランチ）、 &lt;code&gt;nobranch&lt;/code&gt; （ &lt;code&gt;no branch&lt;/code&gt; 警告が表示される色、デフォルトは赤）、 &lt;code&gt;localBranch&lt;/code&gt; または &lt;code&gt;remoteBranch&lt;/code&gt; （ローカルおよびリモートのブランチ名、それぞれブランチおよび追跡情報が表示される場合）ステータスの短い形式）、または &lt;code&gt;unmerged&lt;/code&gt; （変更がマージされていないファイル）。</target>
        </trans-unit>
        <trans-unit id="42006ecfd08deb9b3ff0a3f1d7240d8f715710f3" translate="yes" xml:space="preserve">
          <source>Use customized color when a push was rejected.</source>
          <target state="translated">プッシュが拒否されたときにカスタマイズされた色を使用します。</target>
        </trans-unit>
        <trans-unit id="7714f2243f3ecb7a0c915a75f0d9677bee5cfddf" translate="yes" xml:space="preserve">
          <source>Use fixed strings for patterns (don&amp;rsquo;t interpret pattern as a regex).</source>
          <target state="translated">パターンには固定文字列を使用します（パターンを正規表現として解釈しないでください）。</target>
        </trans-unit>
        <trans-unit id="be83392780575c9c0f338875e4ab41fca7ad0580" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of Git objects. We check &lt;code&gt;&amp;lt;dir&amp;gt;/packs/multi-pack-index&lt;/code&gt; for the current MIDX file, and &lt;code&gt;&amp;lt;dir&amp;gt;/packs&lt;/code&gt; for the pack-files to index.</source>
          <target state="translated">Gitオブジェクトの場所には、指定されたディレクトリを使用します。私たちは、チェック &lt;code&gt;&amp;lt;dir&amp;gt;/packs/multi-pack-index&lt;/code&gt; 現在のMIDXファイルのために、そして &lt;code&gt;&amp;lt;dir&amp;gt;/packs&lt;/code&gt; インデックスにパック・ファイルのために。</target>
        </trans-unit>
        <trans-unit id="58e0e6d68f2b1086e2f61cc3ccf9bb473fce2cb1" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of packfiles and commit-graph file. This parameter exists to specify the location of an alternate that only has the objects directory, not a full &lt;code&gt;.git&lt;/code&gt; directory. The commit-graph file is expected to be in the &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; directory and the packfiles are expected to be in &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt;.</source>
          <target state="translated">packfilesとcommit-graphファイルの場所には、指定されたディレクトリを使用します。このパラメーターは、完全な &lt;code&gt;.git&lt;/code&gt; ディレクトリではなく、オブジェクトディレクトリのみを持つ代替の場所を指定するために存在します。commit-graphファイルは &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; ディレクトリにあり、packfilesは &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt; にあることが期待されています。</target>
        </trans-unit>
        <trans-unit id="034b8d3eb2bf376cba5a544572cc51a019ffd1af" translate="yes" xml:space="preserve">
          <source>Use given directory for the location of packfiles and commit-graph file. This parameter exists to specify the location of an alternate that only has the objects directory, not a full &lt;code&gt;.git&lt;/code&gt; directory. The commit-graph file is expected to be in the &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; directory and the packfiles are expected to be in &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt;. If the directory could not be made into an absolute path, or does not match any known object directory, &lt;code&gt;git commit-graph ...&lt;/code&gt; will exit with non-zero status.</source>
          <target state="translated">packfilesとcommit-graphファイルの場所に指定されたディレクトリを使用します。このパラメーターは、完全な &lt;code&gt;.git&lt;/code&gt; ディレクトリーではなく、objectsディレクトリーのみを持つ代替の場所を指定するために存在します。commit-graphファイルは &lt;code&gt;&amp;lt;dir&amp;gt;/info&lt;/code&gt; ディレクトリにあり、packfilesは &lt;code&gt;&amp;lt;dir&amp;gt;/pack&lt;/code&gt; にあると想定されています。ディレクトリを絶対パスにすることができなかった場合、または既知のオブジェクトディレクトリと一致しない場合、 &lt;code&gt;git commit-graph ...&lt;/code&gt; はゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="9e22ac3ec044552fceb6f971a8409c3fc735d918" translate="yes" xml:space="preserve">
          <source>Use gmail as the smtp server</source>
          <target state="translated">gmailをsmtpサーバーとして使用する</target>
        </trans-unit>
        <trans-unit id="243e0ec42451f8d223cf0a086b6e0d020fe017bc" translate="yes" xml:space="preserve">
          <source>Use hash &lt;code&gt;#&lt;/code&gt; for comments that are either on their own line, or after the email address.</source>
          <target state="translated">自分の行またはメールアドレスの後にあるコメントにはハッシュ &lt;code&gt;#&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fe4290ca9cf2dcf165b3911c20fcc8115cf36b09" translate="yes" xml:space="preserve">
          <source>Use libcurl to communicate with the IMAP server, unless tunneling into it. Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND option set.</source>
          <target state="translated">IMAP サーバーとの通信には libcurl を使用します。USE_CURL_FOR_IMAP_SEND オプションを設定せずに Git をビルドした場合は無視します。</target>
        </trans-unit>
        <trans-unit id="b43e2a7c9e04ff83908291bc454ceb95c66f26d2" translate="yes" xml:space="preserve">
          <source>Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt;.</source>
          <target state="translated">mailmapファイルを使用して、作成者とコミッターの名前とメールアドレスを正規の実名とメールアドレスにマップします。&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="869311b9e64386ec94c4224dbda98ca212bcb863" translate="yes" xml:space="preserve">
          <source>Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side.</source>
          <target state="translated">マージ戦略を使用してリベースを行います。再帰的な(デフォルトの)マージ戦略を使用した場合、これにより上流側でリベースがリネームを認識できるようになります。</target>
        </trans-unit>
        <trans-unit id="07cf71eed9a3b36f45bcc6fde8a3af9707bd0146" translate="yes" xml:space="preserve">
          <source>Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side. This is the default.</source>
          <target state="translated">マージ戦略を使用してリベースを行います。再帰的な(デフォルトの)マージ戦略を使用した場合、これにより上流側のリネームをリベースが認識できるようになります。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="504dd078aaf1ec972f6af826bbe142e1450759fa" translate="yes" xml:space="preserve">
          <source>Use of &quot;topic branches&quot; solves these problems. The name is pretty self explanatory, with a caveat that comes from the &quot;merge upwards&quot; rule above:</source>
          <target state="translated">トピックブランチ」を使用すると、これらの問題が解決されます。この名前は、上の &quot;上向きにマージ&quot; ルールに由来する注意点がありますが、かなり自己説明的なものです。</target>
        </trans-unit>
        <trans-unit id="2997460999cadfc1fcc5d52315d53b3d5efcd07d" translate="yes" xml:space="preserve">
          <source>Use of &lt;code&gt;dcommit&lt;/code&gt; is preferred to &lt;code&gt;set-tree&lt;/code&gt; (below).</source>
          <target state="translated">使用 &lt;code&gt;dcommit&lt;/code&gt; がより好まれる &lt;code&gt;set-tree&lt;/code&gt; （下記）。</target>
        </trans-unit>
        <trans-unit id="6b08c4843a60fcea417d6fa6b7562621b3124054" translate="yes" xml:space="preserve">
          <source>Use of this utility is encouraged in favor of directly accessing files under the &lt;code&gt;.git&lt;/code&gt; directory.</source>
          <target state="translated">このユーティリティの使用は、 &lt;code&gt;.git&lt;/code&gt; ディレクトリの下のファイルに直接アクセスすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3a96544176d9c64bcdfe76616987380a83e4f896" translate="yes" xml:space="preserve">
          <source>Use permissions reported by umask(2). The default, when &lt;code&gt;--shared&lt;/code&gt; is not specified.</source>
          <target state="translated">umask（2）によって報告された許可を使用します。 &lt;code&gt;--shared&lt;/code&gt; が指定されていない場合のデフォルト。</target>
        </trans-unit>
        <trans-unit id="7b2e5a64a2bb1a5fbe6304abee401e1d3f35a8f4" translate="yes" xml:space="preserve">
          <source>Use reflog to find a better common ancestor between &amp;lt;upstream&amp;gt; and &amp;lt;branch&amp;gt; when calculating which commits have been introduced by &amp;lt;branch&amp;gt;.</source>
          <target state="translated">&amp;lt;branch&amp;gt;によって導入されたコミットを計算するときに、reflogを使用して、&amp;lt;upstream&amp;gt;と&amp;lt;branch&amp;gt;の間のより良い共通の祖先を見つけます。</target>
        </trans-unit>
        <trans-unit id="b40e39ff3f77007104d997879dd735023a9dca06" translate="yes" xml:space="preserve">
          <source>Use revisions from revs-file instead of calling &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;を呼び出す代わりにrevs-fileのリビジョンを使用します。</target>
        </trans-unit>
        <trans-unit id="efb298546ca010c6e357a2c3cc79d1b86fb2f356" translate="yes" xml:space="preserve">
          <source>Use the &quot;sparse&quot; algorithm to determine which objects to include in the pack, when combined with the &quot;--revs&quot; option. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames.</source>
          <target state="translated">sparse&quot; アルゴリズムを使用して、どのオブジェクトをパックに含めるかを決定します。このアルゴリズムは、新しいオブジェクトを導入するパスの中に現れるツリーのみを歩きます。これは、小銭を送るためにパックを計算する際に、パフォーマンスを大きく向上させることができます。しかし、含まれるコミットに特定のタイプの直接リネームが含まれている場合、追加のオブジェクトがパックファイルに追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="0755f10a2fd51824d1737b45b49a4642d66873f8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--in-place&lt;/code&gt; option to edit a message file in place:</source>
          <target state="translated">使用 &lt;code&gt;--in-place&lt;/code&gt; 編集代わりに、メッセージ・ファイルにオプションを：</target>
        </trans-unit>
        <trans-unit id="55e7e1126d3aa0a5c8bf2360dfcd495bb1107882" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute only if you cannot store a file in UTF-8 encoding and if you want Git to be able to process the content as text.</source>
          <target state="translated">ファイルをUTF-8エンコーディングで格納できない場合、およびGitでコンテンツをテキストとして処理できるようにする場合にのみ、 &lt;code&gt;working-tree-encoding&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="b5ec705c3f1e9d70bd95302efbf5732684172042" translate="yes" xml:space="preserve">
          <source>Use the branch detection algorithm to find new paths in p4. It is documented below in &quot;BRANCH DETECTION&quot;.</source>
          <target state="translated">p4 で新しいパスを見つけるには、分岐検出アルゴリズムを使用します。これについては、以下の「分岐検出」で説明します。</target>
        </trans-unit>
        <trans-unit id="33ac56041ae34da6b3682a94d8a665913a47636a" translate="yes" xml:space="preserve">
          <source>Use the credential (e.g., access the URL with the username and password from step (2)), and see if it&amp;rsquo;s accepted.</source>
          <target state="translated">資格情報を使用して（たとえば、ステップ（2）のユーザー名とパスワードでURLにアクセスします）、それが受け入れられるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4cfefdd524d37cf0c1fedc168c903048fc636bbd" translate="yes" xml:space="preserve">
          <source>Use the customized color for the part of git-blame output that is repeated meta information per line (such as commit id, author name, date and timezone). Defaults to cyan.</source>
          <target state="translated">git-blame の出力のうち、1 行ごとにメタ情報 (コミット ID、著者名、日付、タイムゾーンなど)が繰り返される部分の色をカスタマイズします。デフォルトは cyan です。</target>
        </trans-unit>
        <trans-unit id="a024bae6c0f6ae8fa68e77c95e0c4f95100aa970" translate="yes" xml:space="preserve">
          <source>Use the diff tool specified by &amp;lt;tool&amp;gt;. Valid values include emerge, kompare, meld, and vimdiff. Run &lt;code&gt;git difftool --tool-help&lt;/code&gt; for the list of valid &amp;lt;tool&amp;gt; settings.</source>
          <target state="translated">&amp;lt;tool&amp;gt;で指定されたdiffツールを使用します。有効な値には、emerge、konpare、meld、vimdiffがあります。有効な&amp;lt;tool&amp;gt;設定のリストについては、 &lt;code&gt;git difftool --tool-help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="161588bc8b76efbad18d428ccf6e2f5e459908d1" translate="yes" xml:space="preserve">
          <source>Use the fast patchset import strategy. This can be significantly faster for large trees, but cannot handle directory renames or permissions changes. The default strategy is slow and safe.</source>
          <target state="translated">高速なパッチセットのインポート戦略を使用してください。これは大きなツリーに対してはかなり高速になりますが、ディレクトリのリネームやパーミッションの変更を扱うことはできません。デフォルトのストラテジーは低速で安全です。</target>
        </trans-unit>
        <trans-unit id="89541b63bc820ad5c76ea37101a62452ee62e61c" translate="yes" xml:space="preserve">
          <source>Use the following attributes if your &lt;code&gt;*.ps1&lt;/code&gt; files are UTF-16 little endian encoded without BOM and you want Git to use Windows line endings in the working directory (use &lt;code&gt;UTF-16LE-BOM&lt;/code&gt; instead of &lt;code&gt;UTF-16LE&lt;/code&gt; if you want UTF-16 little endian with BOM). Please note, it is highly recommended to explicitly define the line endings with &lt;code&gt;eol&lt;/code&gt; if the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute is used to avoid ambiguity.</source>
          <target state="translated">あなたの場合は、以下の属性を使用してください &lt;code&gt;*.ps1&lt;/code&gt; というファイルはBOMなしでエンコードされたUTF-16リトルエンディアンであり、あなたはGitが作業ディレクトリ（使用中のWindowsの行末を使用する &lt;code&gt;UTF-16LE-BOM&lt;/code&gt; の代わりに、 &lt;code&gt;UTF-16LE&lt;/code&gt; あなたはUTF-16をしたい場合BOMのリトルエンディアン）。あいまいさを避けるために &lt;code&gt;working-tree-encoding&lt;/code&gt; 属性を使用する場合は、行末を &lt;code&gt;eol&lt;/code&gt; で明示的に定義することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="e5c2f58b6a6ebc713504e60181f4f0dd37da2d6d" translate="yes" xml:space="preserve">
          <source>Use the given &amp;lt;msg&amp;gt; as the commit message. If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs.</source>
          <target state="translated">指定された&amp;lt;msg&amp;gt;をコミットメッセージとして使用します。複数の &lt;code&gt;-m&lt;/code&gt; オプションが指定されている場合、それらの値は別々の段落として連結されます。</target>
        </trans-unit>
        <trans-unit id="be3b9715415e0357d3d87d01aa8f812c871fb1e1" translate="yes" xml:space="preserve">
          <source>Use the given &lt;code&gt;msg&lt;/code&gt; as the commit message. This option disables the &lt;code&gt;--edit&lt;/code&gt; option.</source>
          <target state="translated">与えられた使用 &lt;code&gt;msg&lt;/code&gt; コミットメッセージとして。このオプションは &lt;code&gt;--edit&lt;/code&gt; オプションを無効にします。</target>
        </trans-unit>
        <trans-unit id="43103d879018fa15a44cefa9b3baec705e25165c" translate="yes" xml:space="preserve">
          <source>Use the given config file instead of the one specified by GIT_CONFIG.</source>
          <target state="translated">GIT_CONFIG で指定された設定ファイルの代わりに、指定された設定ファイルを使用してください。</target>
        </trans-unit>
        <trans-unit id="1af0579593d71707be713f8eac06f59e9d72c0da" translate="yes" xml:space="preserve">
          <source>Use the given config variable as a multi-valued list storing absolute path names. Iterate on that list of paths to run the given arguments.</source>
          <target state="translated">与えられた config 変数を、絶対パス名を格納する多値リストとして使用します。与えられた引数を実行するためのパスのリストを繰り返し実行します。</target>
        </trans-unit>
        <trans-unit id="6d07104b51b424f44cb0346a9ac8f4116b0f06d7" translate="yes" xml:space="preserve">
          <source>Use the given exclude pattern in addition to the standard ignore rules (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;).</source>
          <target state="translated">標準の無視ルールに加えて、指定された除外パターンを使用します（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="9a12bbd112f0b48f03fdbbbb0b9c68268bedd960" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy. If there is no &lt;code&gt;-s&lt;/code&gt; option &lt;code&gt;git merge-recursive&lt;/code&gt; is used instead. This implies --merge.</source>
          <target state="translated">指定されたマージ戦略を使用します。 &lt;code&gt;-s&lt;/code&gt; オプションがない場合は、代わりに &lt;code&gt;git merge-recursive&lt;/code&gt; が使用されます。これは--mergeを意味します。</target>
        </trans-unit>
        <trans-unit id="aad779cdebc63bc4b25eb19e46a7b214101b70ea" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; for details.</source>
          <target state="translated">指定されたマージ戦略を使用します。一度だけ使用してください。詳細については、&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;のMERGE STRATEGIESセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d697cccd6049781089822f14d706ae91b43a781" translate="yes" xml:space="preserve">
          <source>Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no &lt;code&gt;-s&lt;/code&gt; option, a built-in list of strategies is used instead (&lt;code&gt;git merge-recursive&lt;/code&gt; when merging a single head, &lt;code&gt;git merge-octopus&lt;/code&gt; otherwise).</source>
          <target state="translated">指定されたマージ戦略を使用します。複数回指定して、試行する順序で指定できます。 &lt;code&gt;-s&lt;/code&gt; オプションがない場合は、代わりに組み込みの戦略リストが使用されます（単一のヘッドをマージする場合は &lt;code&gt;git merge-recursive&lt;/code&gt; 、それ以外の場合は &lt;code&gt;git merge-octopus&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e15a6801b533c61848133f0481a1499ec359e784" translate="yes" xml:space="preserve">
          <source>Use the given note message (instead of prompting). If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs. Lines starting with &lt;code&gt;#&lt;/code&gt; and empty lines other than a single line between paragraphs will be stripped out.</source>
          <target state="translated">（プロンプトの代わりに）指定されたノートメッセージを使用します。複数の &lt;code&gt;-m&lt;/code&gt; オプションが指定されている場合、それらの値は別々の段落として連結されます。 &lt;code&gt;#&lt;/code&gt; で始まる行と、段落間の1行以外の空行は削除されます。</target>
        </trans-unit>
        <trans-unit id="2301e57be484e5bf3374c6061960726be52acd3f" translate="yes" xml:space="preserve">
          <source>Use the given tag message (instead of prompting). If multiple &lt;code&gt;-m&lt;/code&gt; options are given, their values are concatenated as separate paragraphs. Implies &lt;code&gt;-a&lt;/code&gt; if none of &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; is given.</source>
          <target state="translated">（プロンプトの代わりに）指定されたタグメッセージを使用します。複数の &lt;code&gt;-m&lt;/code&gt; オプションが指定されている場合、それらの値は別々の段落として連結されます。意味 &lt;code&gt;-a&lt;/code&gt; をのどれ場合 &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-s&lt;/code&gt; 、または &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; 与えられていません。</target>
        </trans-unit>
        <trans-unit id="52a6c166f490dbb0be0d25b65f46015f7e67e623" translate="yes" xml:space="preserve">
          <source>Use the interactive patch selection interface to chose which changes to commit. See &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; for details.</source>
          <target state="translated">インタラクティブなパッチ選択インターフェイスを使用して、コミットする変更を選択します。詳細は&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="7db128e87ada4e1ec3f3340d8431acfc429f3677" translate="yes" xml:space="preserve">
          <source>Use the merge resolution program specified by &amp;lt;tool&amp;gt;. Valid values include emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run &lt;code&gt;git mergetool --tool-help&lt;/code&gt; for the list of valid &amp;lt;tool&amp;gt; settings.</source>
          <target state="translated">&amp;lt;tool&amp;gt;で指定されたマージ解決プログラムを使用します。有効な値は、emerge、gvimdiff、kdiff3、meld、vimdiff、tortoisemergeです。有効な&amp;lt;tool&amp;gt;設定のリストについては、 &lt;code&gt;git mergetool --tool-help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="dcec4916e7483efe626c7c3cca0d933ec3eb9b91" translate="yes" xml:space="preserve">
          <source>Use the multi-pack-index file to track multiple packfiles using a single index. See &lt;a href=&quot;git-multi-pack-index&quot;&gt;git-multi-pack-index[1]&lt;/a&gt; for more information. Defaults to true.</source>
          <target state="translated">multi-pack-indexファイルを使用して、単一のインデックスを使用して複数のパックファイルを追跡します。詳細については、&lt;a href=&quot;git-multi-pack-index&quot;&gt;git-multi-pack-index [1]&lt;/a&gt;を参照してください。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="047156e36b9d6e8b2155d32a029545b1b026f10e" translate="yes" xml:space="preserve">
          <source>Use the multi-pack-index file to track multiple packfiles using a single index. See &lt;a href=&quot;multi-pack-index&quot;&gt;the multi-pack-index design document&lt;/a&gt;.</source>
          <target state="translated">multi-pack-indexファイルを使用して、単一のインデックスを使用して複数のパックファイルを追跡します。&lt;a href=&quot;multi-pack-index&quot;&gt;multi-pack-indexデザインドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f14443aa07cf034aa00129ee21b4f7df2be49255" translate="yes" xml:space="preserve">
          <source>Use the partial clone feature and request that the server sends a subset of reachable objects according to a given object filter. When using &lt;code&gt;--filter&lt;/code&gt;, the supplied &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; is used for the partial clone filter. For example, &lt;code&gt;--filter=blob:none&lt;/code&gt; will filter out all blobs (file contents) until needed by Git. Also, &lt;code&gt;--filter=blob:limit=&amp;lt;size&amp;gt;&lt;/code&gt; will filter out all blobs of size at least &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;. For more details on filter specifications, see the &lt;code&gt;--filter&lt;/code&gt; option in &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt;.</source>
          <target state="translated">部分クローン機能を使用して、サーバーが特定のオブジェクトフィルターに従って到達可能なオブジェクトのサブセットを送信するように要求します。 &lt;code&gt;--filter&lt;/code&gt; を使用する場合、提供された &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; が部分クローンフィルターに使用されます。たとえば、 &lt;code&gt;--filter=blob:none&lt;/code&gt; は、Gitで必要になるまで、すべてのBLOB（ファイルの内容）を除外します。また、 &lt;code&gt;--filter=blob:limit=&amp;lt;size&amp;gt;&lt;/code&gt; は、少なくとも &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt; のサイズのすべてのblobを除外します。フィルタ仕様の詳細については、&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;の &lt;code&gt;--filter&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6bac5b4ccbcc396e691c8ba8f2af89d4f60c9270" translate="yes" xml:space="preserve">
          <source>Use the same output mode as &lt;a href=&quot;git-annotate&quot;&gt;git-annotate[1]&lt;/a&gt; (Default: off).</source>
          <target state="translated">&lt;a href=&quot;git-annotate&quot;&gt;git-annotate [1]&lt;/a&gt;と同じ出力モードを使用します（デフォルト：オフ）。</target>
        </trans-unit>
        <trans-unit id="0ed67a2ecd3a9ee96ae4cd7dcb45f48a2cf84bf4" translate="yes" xml:space="preserve">
          <source>Use the selected commit message without launching an editor. For example, &lt;code&gt;git commit --amend --no-edit&lt;/code&gt; amends a commit without changing its commit message.</source>
          <target state="translated">エディターを起動せずに、選択したコミットメッセージを使用します。たとえば、 &lt;code&gt;git commit --amend --no-edit&lt;/code&gt; は、コミットメッセージを変更せずにコミットを修正します。</target>
        </trans-unit>
        <trans-unit id="8e65c034e7da87d64be153e02b39a8529bd16f67" translate="yes" xml:space="preserve">
          <source>Use the source ref that matches &lt;code&gt;master&lt;/code&gt; (e.g. &lt;code&gt;refs/heads/master&lt;/code&gt;) to update the ref that matches &lt;code&gt;satellite/master&lt;/code&gt; (most probably &lt;code&gt;refs/remotes/satellite/master&lt;/code&gt;) in the &lt;code&gt;mothership&lt;/code&gt; repository; do the same for &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;satellite/dev&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; 一致するソース参照（例： &lt;code&gt;refs/heads/master&lt;/code&gt; ）を使用して、 &lt;code&gt;mothership&lt;/code&gt; リポジトリ内の &lt;code&gt;satellite/master&lt;/code&gt; （ほとんどの場合は &lt;code&gt;refs/remotes/satellite/master&lt;/code&gt; ）に一致する参照を更新します。 &lt;code&gt;dev&lt;/code&gt; と &lt;code&gt;satellite/dev&lt;/code&gt; についても同じようにします。</target>
        </trans-unit>
        <trans-unit id="82b93c6560af27195da14e70510e2b3d8651c3b7" translate="yes" xml:space="preserve">
          <source>Use the specified HTTP protocol version when communicating with a server. If you want to force the default. The available and default version depend on libcurl. Actually the possible values of this option are:</source>
          <target state="translated">サーバとの通信時に指定したHTTPプロトコルのバージョンを使用します。デフォルトを強制的に使用したい場合。利用可能なバージョンとデフォルトのバージョンは libcurl に依存します。実際には、このオプションの可能な値は</target>
        </trans-unit>
        <trans-unit id="85fede53ff0add46d3665dfda925d3c1db752a7f" translate="yes" xml:space="preserve">
          <source>Use the specified HTTP protocol version when communicating with a server. If you want to force the default. The available and default version depend on libcurl. Currently the possible values of this option are:</source>
          <target state="translated">サーバーと通信する際に、指定したHTTPプロトコルのバージョンを使用します。デフォルトを強制的に使用したい場合。利用可能なバージョンと既定のバージョンは libcurl に依存します。現在、このオプションの可能な値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="becfdaabcf538340d904ac918eb155dd5d16c802" translate="yes" xml:space="preserve">
          <source>Use the specified URL to connect to the destination Subversion repository. This is useful in cases where the source SVN repository is read-only. This option overrides configuration property &lt;code&gt;commiturl&lt;/code&gt;.</source>
          <target state="translated">指定されたURLを使用して、宛先のSubversionリポジトリに接続します。これは、ソースSVNリポジトリが読み取り専用である場合に役立ちます。このオプションは、設定プロパティ &lt;code&gt;commiturl&lt;/code&gt; をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="47ea3d46f75adaf5916e50431ef8bbea6e57dfd6" translate="yes" xml:space="preserve">
          <source>Use the specified browser. It must be in the list of supported browsers.</source>
          <target state="translated">指定したブラウザを使用します。サポートされているブラウザのリストに含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="2c9d0a1d0fa5a2da07f63db4c5b77e59ec9169b0" translate="yes" xml:space="preserve">
          <source>Use the specified name for the initial branch in the newly created repository. If not specified, fall back to the default name (currently &lt;code&gt;master&lt;/code&gt;, but this is subject to change in the future; the name can be customized via the &lt;code&gt;init.defaultBranch&lt;/code&gt; configuration variable).</source>
          <target state="translated">新しく作成されたリポジトリの最初のブランチには、指定された名前を使用します。指定しない場合は、デフォルト名にフォールバックします（現在は &lt;code&gt;master&lt;/code&gt; ですが、将来変更される可能性があります。名前は &lt;code&gt;init.defaultBranch&lt;/code&gt; 構成変数を使用してカスタマイズできます）。</target>
        </trans-unit>
        <trans-unit id="eded6790141cbbb141d77bfcf5fc351397828538" translate="yes" xml:space="preserve">
          <source>Use the specified name for the initial branch in the newly created repository. If not specified, fall back to the default name: &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">新しく作成されたリポジトリの最初のブランチには、指定された名前を使用します。指定しない場合は、デフォルト名の &lt;code&gt;master&lt;/code&gt; にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="9e057e9e47493412f91dea4102ac0984cb71bdeb" translate="yes" xml:space="preserve">
          <source>Use the value of the &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable to decide what to notice as error.</source>
          <target state="translated">&lt;code&gt;core.whitespace&lt;/code&gt; 構成変数の値を使用して、エラーとして何を通知するかを決定します。</target>
        </trans-unit>
        <trans-unit id="810f8c03feb9550dd6740190f543dbb37624e241" translate="yes" xml:space="preserve">
          <source>Use this custom program instead of &quot;&lt;code&gt;gpg&lt;/code&gt;&quot; found on &lt;code&gt;$PATH&lt;/code&gt; when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, &quot;&lt;code&gt;gpg --verify $signature - &amp;lt;$file&lt;/code&gt;&quot; is run, and the program is expected to signal a good signature by exiting with code 0, and to generate an ASCII-armored detached signature, the standard input of &quot;&lt;code&gt;gpg -bsau $key&lt;/code&gt;&quot; is fed with the contents to be signed, and the program is expected to send the result to its standard output.</source>
          <target state="translated">PGP署名を作成または検証するときに、 &lt;code&gt;$PATH&lt;/code&gt; にある「 &lt;code&gt;gpg&lt;/code&gt; 」の代わりにこのカスタムプログラムを使用します。プログラムは、GPGと同じコマンドラインインターフェイスをサポートする必要があります。つまり、切り離された署名を確認するには、「 &lt;code&gt;gpg --verify $signature - &amp;lt;$file&lt;/code&gt; 」が実行され、プログラムはコードで終了することにより、適切な署名を通知します。 0、およびASCII装甲の分離署名を生成するには、「 &lt;code&gt;gpg -bsau $key&lt;/code&gt; 」の標準入力に署名する内容を入力し、プログラムは結果を標準出力に送信することが期待されます。</target>
        </trans-unit>
        <trans-unit id="a644dabd3c4c5e288aecaab3da05ddb8c7da086c" translate="yes" xml:space="preserve">
          <source>Use this for compatibility with old-style branch names used by earlier versions of &lt;code&gt;git archimport&lt;/code&gt;. Old-style branch names were category--branch, whereas new-style branch names are archive,category--branch--version. In both cases, names given on the command-line will override the automatically-generated ones.</source>
          <target state="translated">これは、以前のバージョンの &lt;code&gt;git archimport&lt;/code&gt; で使用されていた古いスタイルのブランチ名との互換性のために使用します。古いスタイルのブランチ名はcategory--branchでしたが、新しいスタイルのブランチ名はarchive、category--branch--versionです。どちらの場合も、コマンドラインで指定された名前は、自動生成された名前を上書きします。</target>
        </trans-unit>
        <trans-unit id="ad85fb495e355ea9ee99bf9caef60d6a5acc4df9" translate="yes" xml:space="preserve">
          <source>Use this for compatibility with old-style branch names used by earlier versions of &lt;code&gt;git archimport&lt;/code&gt;. Old-style branch names were category{litdd}branch, whereas new-style branch names are archive,category{litdd}branch{litdd}version. In both cases, names given on the command-line will override the automatically-generated ones.</source>
          <target state="translated">これは、以前のバージョンの &lt;code&gt;git archimport&lt;/code&gt; で使用されていた古いスタイルのブランチ名との互換性のために使用します。古いスタイルのブランチ名はカテゴリ{litdd}ブランチでしたが、新しいスタイルのブランチ名はアーカイブ、カテゴリ{litdd}ブランチ{litdd}バージョンです。どちらの場合も、コマンドラインで指定された名前は、自動生成された名前をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="f09efb8456c99114df5272977533145bfda3715e" translate="yes" xml:space="preserve">
          <source>Use this option to integrate changes from the upstream subproject with your submodule&amp;rsquo;s current HEAD. Alternatively, you can run &lt;code&gt;git pull&lt;/code&gt; from the submodule, which is equivalent except for the remote branch name: &lt;code&gt;update --remote&lt;/code&gt; uses the default upstream repository and &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt;, while &lt;code&gt;git pull&lt;/code&gt; uses the submodule&amp;rsquo;s &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;. Prefer &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; if you want to distribute the default upstream branch with the superproject and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; if you want a more native feel while working in the submodule itself.</source>
          <target state="translated">このオプションを使用して、アップストリームサブプロジェクトからの変更をサブモジュールの現在のHEADと統合します。また、あなたが実行することができます &lt;code&gt;git pull&lt;/code&gt; リモートブランチ名を除いて同等であるサブモジュールから： &lt;code&gt;update --remote&lt;/code&gt; デフォルトの上流リポジトリと使用しています &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; 、一方で &lt;code&gt;git pull&lt;/code&gt; サブモジュールの使用しています &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; 。優先 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; あなたが親プロジェクトとして、デフォルト上流分岐を配布する場合 &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; サブモジュール自体での作業中に、あなたがより多くのネイティブな感触をしたい場合。</target>
        </trans-unit>
        <trans-unit id="205f9bc458a5cacd665ee1af1eac8a989bc13811" translate="yes" xml:space="preserve">
          <source>Use this option to set the namespace where the original commits will be stored. The default value is &lt;code&gt;refs/original&lt;/code&gt;.</source>
          <target state="translated">このオプションを使用して、元のコミットが保存されるネームスペースを設定します。デフォルト値は &lt;code&gt;refs/original&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="978a87da673ee3d6baf57006a070d2ceaf2e0a29" translate="yes" xml:space="preserve">
          <source>Use this option to set the path to the temporary directory used for rewriting. When applying a tree filter, the command needs to temporarily check out the tree to some directory, which may consume considerable space in case of large projects. By default it does this in the &lt;code&gt;.git-rewrite/&lt;/code&gt; directory but you can override that choice by this parameter.</source>
          <target state="translated">このオプションを使用して、書き換えに使用する一時ディレクトリへのパスを設定します。ツリーフィルターを適用する場合、コマンドは一時的にツリーをいくつかのディレクトリにチェックアウトする必要があります。これは、大規模なプロジェクトの場合にかなりのスペースを消費する可能性があります。デフォルトでは、これは &lt;code&gt;.git-rewrite/&lt;/code&gt; ディレクトリーで行われますが、このパラメーターでその選択をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="7dad6966beac366ffc5d985e757265d090b93f5a" translate="yes" xml:space="preserve">
          <source>Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone.</source>
          <target state="translated">このオプションを使用すると、ステージを解除してインデックスからパスのみを削除することができます。作業ツリーファイルは、変更されているかどうかに関わらず、そのままにしておきます。</target>
        </trans-unit>
        <trans-unit id="22e3468b42fc7b02294ecbf3cdd521f378eedf7b" translate="yes" xml:space="preserve">
          <source>Use this to customize the program used for the signing format you chose. (see &lt;code&gt;gpg.program&lt;/code&gt; and &lt;code&gt;gpg.format&lt;/code&gt;) &lt;code&gt;gpg.program&lt;/code&gt; can still be used as a legacy synonym for &lt;code&gt;gpg.openpgp.program&lt;/code&gt;. The default value for &lt;code&gt;gpg.x509.program&lt;/code&gt; is &quot;gpgsm&quot;.</source>
          <target state="translated">これを使用して、選択した署名形式に使用されるプログラムをカスタマイズします。 （参照 &lt;code&gt;gpg.program&lt;/code&gt; と &lt;code&gt;gpg.format&lt;/code&gt; を） &lt;code&gt;gpg.program&lt;/code&gt; は依然としてため、従来の同義語として使用することができる &lt;code&gt;gpg.openpgp.program&lt;/code&gt; 。 &lt;code&gt;gpg.x509.program&lt;/code&gt; のデフォルト値は「gpgsm」です。</target>
        </trans-unit>
        <trans-unit id="2c0ec0febb1ffdfb71fd1faf1bdd4ef5cebdb7eb" translate="yes" xml:space="preserve">
          <source>Use this to specify the path to &lt;code&gt;git-upload-pack&lt;/code&gt; on the remote side, if is not found on your $PATH. Installations of sshd ignores the user&amp;rsquo;s environment setup scripts for login shells (e.g. .bash_profile) and your privately installed git may not be found on the system default $PATH. Another workaround suggested is to set up your $PATH in &quot;.bashrc&quot;, but this flag is for people who do not want to pay the overhead for non-interactive shells by having a lean .bashrc file (they set most of the things up in .bash_profile).</source>
          <target state="translated">$ PATHに見つからない場合、これを使用してリモート側の &lt;code&gt;git-upload-pack&lt;/code&gt; へのパスを指定します。 sshdのインストールでは、ログインシェルのユーザーの環境設定スクリプト（.bash_profileなど）が無視され、プライベートにインストールされたgitがシステムのデフォルトの$ PATHにない場合があります。推奨される別の回避策は、「。bashrc」に$ PATHを設定することですが、このフラグは、無駄のない.bashrcファイルを用意して非インタラクティブシェルのオーバーヘッドを負担したくない人のためのものです（ほとんどの設定は.bash_profile内）。</target>
        </trans-unit>
        <trans-unit id="1f3cdffd9311e81ebd0ee41b41de344f546bb6a2" translate="yes" xml:space="preserve">
          <source>Used DBI driver. You can specify any available driver for this here, but it might not work. cvsserver is tested with &lt;code&gt;DBD::SQLite&lt;/code&gt;, reported to work with &lt;code&gt;DBD::Pg&lt;/code&gt;, and reported &lt;strong&gt;not&lt;/strong&gt; to work with &lt;code&gt;DBD::mysql&lt;/code&gt;. Please regard this as an experimental feature. May not contain colons (&lt;code&gt;:&lt;/code&gt;). Default: &lt;code&gt;SQLite&lt;/code&gt;</source>
          <target state="translated">使用したDBIドライバー。ここで使用可能なドライバーを指定できますが、機能しない可能性があります。 cvsserverは &lt;code&gt;DBD::SQLite&lt;/code&gt; でテストされ、DBD :: &lt;code&gt;DBD::Pg&lt;/code&gt; で動作することが報告されており、 &lt;code&gt;DBD::mysql&lt;/code&gt; 動作し&lt;strong&gt;ない&lt;/strong&gt;ことが報告されて&lt;strong&gt;い&lt;/strong&gt;ます。これは実験的な機能と見なしてください。コロンを含めることはできません（ &lt;code&gt;:&lt;/code&gt; ）。デフォルト： &lt;code&gt;SQLite&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e96c8aa1d6db1322edc422d5cc1ffbd12e71daed" translate="yes" xml:space="preserve">
          <source>Used Perl DBI driver. You can specify any available driver for this here, but it might not work. git-cvsserver is tested with &lt;code&gt;DBD::SQLite&lt;/code&gt;, reported to work with &lt;code&gt;DBD::Pg&lt;/code&gt;, and reported &lt;strong&gt;not&lt;/strong&gt; to work with &lt;code&gt;DBD::mysql&lt;/code&gt;. Experimental feature. May not contain double colons (&lt;code&gt;:&lt;/code&gt;). Default: &lt;code&gt;SQLite&lt;/code&gt;. See &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt;.</source>
          <target state="translated">Perl DBIドライバーを使用。ここで使用可能なドライバーを指定できますが、機能しない可能性があります。 git-cvsserverは &lt;code&gt;DBD::SQLite&lt;/code&gt; でテストされ、DBD &lt;code&gt;DBD::Pg&lt;/code&gt; で動作することが報告されており、 &lt;code&gt;DBD::mysql&lt;/code&gt; 動作し&lt;strong&gt;ない&lt;/strong&gt;ことが報告されて&lt;strong&gt;い&lt;/strong&gt;ます。実験的機能。ダブルコロンを含めることはできません（ &lt;code&gt;:&lt;/code&gt; ）。デフォルト： &lt;code&gt;SQLite&lt;/code&gt; 。&lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3dcc5e110a8886980641614ba00244bbf70eb3c6" translate="yes" xml:space="preserve">
          <source>Used as %(if)&amp;hellip;​%(then)&amp;hellip;​%(end) or %(if)&amp;hellip;​%(then)&amp;hellip;​%(else)&amp;hellip;​%(end). If there is an atom with value or string literal after the %(if) then everything after the %(then) is printed, else if the %(else) atom is used, then everything after %(else) is printed. We ignore space when evaluating the string before %(then), this is useful when we use the %(HEAD) atom which prints either &quot;*&quot; or &quot; &quot; and we want to apply the &lt;code&gt;if&lt;/code&gt; condition only on the &lt;code&gt;HEAD&lt;/code&gt; ref. Append &quot;:equals=&amp;lt;string&amp;gt;&quot; or &quot;:notequals=&amp;lt;string&amp;gt;&quot; to compare the value between the %(if:&amp;hellip;​) and %(then) atoms with the given string.</source>
          <target state="translated">％（if）&amp;hellip;％（then）&amp;hellip;％（end）または％（if）&amp;hellip;％（then）&amp;hellip;％（else）&amp;hellip;％（end）として使用されます。 ％（if）の後に値または文字列リテラルを持つアトムがある場合、％（then）の後のすべてが出力されます。それ以外の場合、％（else）アトムが使用される場合、％（else）の後のすべてが出力されます。 ％（then）の前の文字列を評価するときにスペースを無視します。これは、「*」または「」を出力する％（HEAD）アトムを使用し、 &lt;code&gt;HEAD&lt;/code&gt; 参照にのみ &lt;code&gt;if&lt;/code&gt; 条件を適用する場合に役立ちます。 「：equals = &amp;lt;string&amp;gt;」または「：notequals = &amp;lt;string&amp;gt;」を追加して、％（if：&amp;hellip;）および％（then）アトム間の値を指定された文字列と比較します。</target>
        </trans-unit>
        <trans-unit id="88972a7007de9e429d28d6bad7487052b23f9b65" translate="yes" xml:space="preserve">
          <source>Used to check that a bundle file is valid and will apply cleanly to the current repository. This includes checks on the bundle format itself as well as checking that the prerequisite commits exist and are fully linked in the current repository. &lt;code&gt;git bundle&lt;/code&gt; prints a list of missing commits, if any, and exits with a non-zero status.</source>
          <target state="translated">バンドルファイルが有効であり、現在のリポジトリにクリーンに適用されることを確認するために使用されます。これには、バンドル形式自体のチェック、および前提条件のコミットが存在し、現在のリポジトリに完全にリンクされていることのチェックが含まれます。 &lt;code&gt;git bundle&lt;/code&gt; は、不足しているコミットがある場合はそのリストを出力し、ゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="a81dfbb4b6756f63bb43c72d54c78dd02ef851d4" translate="yes" xml:space="preserve">
          <source>Used to create a bundle named &lt;code&gt;file&lt;/code&gt;. This requires the &lt;code&gt;&amp;lt;git-rev-list-args&amp;gt;&lt;/code&gt; arguments to define the bundle contents. &lt;code&gt;options&lt;/code&gt; contains the options specific to the &lt;code&gt;git bundle create&lt;/code&gt; subcommand.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; という名前のバンドルを作成するために使用されます。これには、バンドルの内容を定義する &lt;code&gt;&amp;lt;git-rev-list-args&amp;gt;&lt;/code&gt; 引数が必要です。 &lt;code&gt;options&lt;/code&gt; には、 &lt;code&gt;git bundle create&lt;/code&gt; サブコマンドに固有のオプションが含まれています。</target>
        </trans-unit>
        <trans-unit id="fe127bac2ab0b61ffb60c0284f3741224c9951e1" translate="yes" xml:space="preserve">
          <source>Used to enforce or disable certificate revocation checks in cURL when http.sslBackend is set to &quot;schannel&quot;. Defaults to &lt;code&gt;true&lt;/code&gt; if unset. Only necessary to disable this if Git consistently errors and the message is about checking the revocation status of a certificate. This option is ignored if cURL lacks support for setting the relevant SSL option at runtime.</source>
          <target state="translated">http.sslBackendが「schannel」に設定されている場合、cURLで証明書失効チェックを強制または無効にするために使用されます。設定されてい &lt;code&gt;true&lt;/code&gt; 場合、デフォルトはtrueです。 Gitが一貫してエラーになり、メッセージが証明書の失効ステータスの確認に関するものである場合にのみ、これを無効にする必要があります。実行時に関連するSSLオプションを設定するためのサポートがcURLにない場合、このオプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="526891fe0801e3a16c20e50ecde492e75d4f6490" translate="yes" xml:space="preserve">
          <source>Used to set the maximum load that we will still respond to gitweb queries. If the server load exceeds this value then gitweb will return &quot;503 Service Unavailable&quot; error. The server load is taken to be 0 if gitweb cannot determine its value. Currently it works only on Linux, where it uses &lt;code&gt;/proc/loadavg&lt;/code&gt;; the load there is the number of active tasks on the system &amp;mdash; processes that are actually running &amp;mdash; averaged over the last minute.</source>
          <target state="translated">gitwebクエリに応答する最大負荷を設定するために使用されます。サーバーの負荷がこの値を超えると、gitwebは「503 Service Unavailable」エラーを返します。gitwebが値を判別できない場合、サーバーの負荷は0になります。現在、これは &lt;code&gt;/proc/loadavg&lt;/code&gt; を使用するLinuxでのみ機能します。負荷は、システム上でアクティブなタスクの数（実際に実行されているプロセス）の数で、直前の1分間の平均です。</target>
        </trans-unit>
        <trans-unit id="184dba4369820f49a823e624aa006f74d3fc96ef" translate="yes" xml:space="preserve">
          <source>Used with --remote to specify the path to the &lt;code&gt;git-upload-archive&lt;/code&gt; on the remote side.</source>
          <target state="translated">--remoteと共に使用して、リモート側の &lt;code&gt;git-upload-archive&lt;/code&gt; へのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="a985abb59dca2d23760f5b7ff00e7d00f2d0f353" translate="yes" xml:space="preserve">
          <source>Used with &lt;code&gt;--range-diff&lt;/code&gt;, tweak the heuristic which matches up commits between the previous and current series of patches by adjusting the creation/deletion cost fudge factor. See &lt;a href=&quot;git-range-diff&quot;&gt;git-range-diff[1]&lt;/a&gt;) for details.</source>
          <target state="translated">&lt;code&gt;--range-diff&lt;/code&gt; とともに使用し、作成/削除のコストファッジファクターを調整することにより、以前のパッチと現在のパッチのコミットを一致させるヒューリスティックを調整します。詳細については、&lt;a href=&quot;git-range-diff&quot;&gt;git-range-diff [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9777df5e2d0f3ca27a559e53074b9f39896040e8" translate="yes" xml:space="preserve">
          <source>Used with the &lt;code&gt;fetch&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; コマンドで使用されます。</target>
        </trans-unit>
        <trans-unit id="ea99fa3d480e34606197cb808cc4a18c1d6b1306" translate="yes" xml:space="preserve">
          <source>User Manual</source>
          <target state="translated">ユーザーマニュアル</target>
        </trans-unit>
        <trans-unit id="3d338fa6790366b9708dc60a5019a8d98f73c4b3" translate="yes" xml:space="preserve">
          <source>User configuration and preferences are stored at:</source>
          <target state="translated">ユーザーの設定や設定は、次の場所に保存されます。</target>
        </trans-unit>
        <trans-unit id="ba3e3bfcde6395de2671f768450f02d32f692aba" translate="yes" xml:space="preserve">
          <source>User name (e.g., &lt;code&gt;user&lt;/code&gt; in &lt;code&gt;https://user@example.com/repo.git&lt;/code&gt;). If the config key has a user name it must match the user name in the URL exactly. If the config key does not have a user name, that config key will match a URL with any user name (including none), but at a lower precedence than a config key with a user name.</source>
          <target state="translated">ユーザー名（例えば、 &lt;code&gt;user&lt;/code&gt; で &lt;code&gt;https://user@example.com/repo.git&lt;/code&gt; ）。構成キーにユーザー名がある場合は、URLのユーザー名と正確に一致する必要があります。構成キーにユーザー名が含まれていない場合、その構成キーは任意のユーザー名（なしを含む）とURLを照合しますが、ユーザー名の構成キーよりも優先順位が低くなります。</target>
        </trans-unit>
        <trans-unit id="9eabd3862d3bc88b6d20553afdc4c28a880bd15a" translate="yes" xml:space="preserve">
          <source>User specified as an option to all p4 commands, with &lt;code&gt;-u &amp;lt;user&amp;gt;&lt;/code&gt;. The environment variable &lt;code&gt;P4USER&lt;/code&gt; can be used instead.</source>
          <target state="translated">&lt;code&gt;-u &amp;lt;user&amp;gt;&lt;/code&gt; を使用して、すべてのp4コマンドのオプションとして指定されたユーザー。代わりに、環境変数 &lt;code&gt;P4USER&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="3129c28f60cb352aa378d9055c2dee4b71cd917d" translate="yes" xml:space="preserve">
          <source>User-specific configuration file. Also called &quot;global&quot; configuration file.</source>
          <target state="translated">ユーザー固有の設定ファイル。グローバル」設定ファイルとも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="53b3f2b51348a1a5a4076e004425d0d150df3f8e" translate="yes" xml:space="preserve">
          <source>User-specific credentials file.</source>
          <target state="translated">ユーザー固有の資格情報ファイル。</target>
        </trans-unit>
        <trans-unit id="fbb3c5af6a1b800cb6bfa442ae5c6ae5ee1a4454" translate="yes" xml:space="preserve">
          <source>Username for SMTP-AUTH. Default is the value of &lt;code&gt;sendemail.smtpUser&lt;/code&gt;; if a username is not specified (with &lt;code&gt;--smtp-user&lt;/code&gt; or &lt;code&gt;sendemail.smtpUser&lt;/code&gt;), then authentication is not attempted.</source>
          <target state="translated">SMTP-AUTHのユーザー名。デフォルトは &lt;code&gt;sendemail.smtpUser&lt;/code&gt; の値です。ユーザー名が指定されていない場合（ &lt;code&gt;--smtp-user&lt;/code&gt; または &lt;code&gt;sendemail.smtpUser&lt;/code&gt; を使用）、認証は試行されません。</target>
        </trans-unit>
        <trans-unit id="74498c0e6117d06ee988164e48dd06849a2a00fa" translate="yes" xml:space="preserve">
          <source>Users may find some cases where scheduled maintenance tasks do not run as frequently as intended. Each &lt;code&gt;git maintenance run&lt;/code&gt; command takes a lock on the repository&amp;rsquo;s object database, and this prevents other concurrent &lt;code&gt;git maintenance run&lt;/code&gt; commands from running on the same repository. Without this safeguard, competing processes could leave the repository in an unpredictable state.</source>
          <target state="translated">ユーザーは、スケジュールされたメンテナンスタスクが意図したほど頻繁に実行されない場合があります。各 &lt;code&gt;git maintenance run&lt;/code&gt; コマンドは、リポジトリのオブジェクトデータベースをロックします。これにより、他の同時 &lt;code&gt;git maintenance run&lt;/code&gt; コマンドが同じリポジトリで実行されなくなります。このセーフガードがないと、競合するプロセスがリポジトリを予測できない状態にする可能性があります。</target>
        </trans-unit>
        <trans-unit id="dd5ba62269befa999225c8d360ebd4fd64f50001" translate="yes" xml:space="preserve">
          <source>Users may select an automated merge strategy from among the following using either -s/--strategy option or configuring notes.mergeStrategy accordingly:</source>
          <target state="translated">ユーザーは、-s/--strategy オプションを使用するか、または notes.mergeStrategy を設定することで、以下の中から自動化されたマージ戦略を選択することができます。</target>
        </trans-unit>
        <trans-unit id="312954bd3f459a8154fbfda7b5edb71c57c929c2" translate="yes" xml:space="preserve">
          <source>Users migrating from CVS may also want to read &lt;a href=&quot;gitcvs-migration&quot;&gt;gitcvs-migration[7]&lt;/a&gt;.</source>
          <target state="translated">CVSから移行するユーザーは、&lt;a href=&quot;gitcvs-migration&quot;&gt;gitcvs-migration [7]&lt;/a&gt;を読むこともできます。</target>
        </trans-unit>
        <trans-unit id="bdfc1b01541d0790675419ccbb86b2582c7e882c" translate="yes" xml:space="preserve">
          <source>Users often try to use the assume-unchanged and skip-worktree bits to tell Git to ignore changes to files that are tracked. This does not work as expected, since Git may still check working tree files against the index when performing certain operations. In general, Git does not provide a way to ignore changes to tracked files, so alternate solutions are recommended.</source>
          <target state="translated">ユーザーはしばしば、asprime-unchanged や skip-worktree ビットを使って、追跡されているファイルへの変更を無視するように Git に指示しようとします。これは期待通りにはいきません。なぜなら、Git は特定の操作を行う際に作業ツリーファイルをインデックスと照合してしまうからです。一般的に、Git は追跡されたファイルへの変更を無視する方法を提供していません。</target>
        </trans-unit>
        <trans-unit id="d2fd200f233551c846ddc52433b7473972ba45cd" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;assume unchanged&amp;rdquo; bit</source>
          <target state="translated">「変更しない」ビットの使用</target>
        </trans-unit>
        <trans-unit id="db59534f65c86c428a7a540c110ff1130d39acfc" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;git add -A&amp;rdquo;</source>
          <target state="translated">「git add -A」を使用する</target>
        </trans-unit>
        <trans-unit id="3f756864c1cac8254338a14f16b7888b4cd11774" translate="yes" xml:space="preserve">
          <source>Using &amp;ldquo;git commit -a&amp;rdquo;</source>
          <target state="translated">「git commit -a」を使用する</target>
        </trans-unit>
        <trans-unit id="1ad6e2bdca2ef33d6f60d1165c40af77488df73e" translate="yes" xml:space="preserve">
          <source>Using --cacheinfo or --info-only</source>
          <target state="translated">キャッシュ情報または --info-only を使用する</target>
        </trans-unit>
        <trans-unit id="63a49bc3316ec7fe7ab1c50a106ab3c187422a12" translate="yes" xml:space="preserve">
          <source>Using --index-info</source>
          <target state="translated">インデックス情報を使う</target>
        </trans-unit>
        <trans-unit id="9465002aca9e596e405478c595d6ec82ecf19f4d" translate="yes" xml:space="preserve">
          <source>Using --recurse-submodules can only fetch new commits in already checked out submodules right now. When e.g. upstream added a new submodule in the just fetched commits of the superproject the submodule itself cannot be fetched, making it impossible to check out that submodule later without having to do a fetch again. This is expected to be fixed in a future Git version.</source>
          <target state="translated">recurse-submodules を使うと、すでにチェックアウトされているサブモジュールの新しいコミットを今すぐに取得することができます。例えば、スーパープロジェクトのコミットを取得したところで上流側が新しいサブモジュールを追加した場合、そのサブモジュール自体を取得することはできません。これは将来の Git バージョンで修正される予定です。</target>
        </trans-unit>
        <trans-unit id="9ba2b3bf5dd0ae3395bffc9a6bf30c85dfb19a1b" translate="yes" xml:space="preserve">
          <source>Using --recurse-submodules will update the content of all active submodules according to the commit recorded in the superproject by calling read-tree recursively, also setting the submodules' HEAD to be detached at that commit.</source>
          <target state="translated">recurse-submodulesを使うと、read-treeを再帰的に呼び出すことで、スーパープロジェクトに記録されたコミットに応じて、すべてのアクティブなサブモジュールの内容が更新され、そのコミットでサブモジュールのHEADが切り離されるように設定されます。</target>
        </trans-unit>
        <trans-unit id="3b6c4766d3d128d670a5d5adf42fc526da676a66" translate="yes" xml:space="preserve">
          <source>Using --recurse-submodules will update the content of all initialized submodules according to the commit recorded in the superproject by calling read-tree recursively, also setting the submodules HEAD to be detached at that commit.</source>
          <target state="translated">recurse-submodulesを使うと、read-treeを再帰的に呼び出すことで、スーパープロジェクトに記録されたコミットに応じて、すべての初期化されたサブモジュールの内容が更新され、そのコミット時にサブモジュールのHEADが切り離されるように設定されます。</target>
        </trans-unit>
        <trans-unit id="8315f077dd8f5ad49468aff013d2df68acafcb5e" translate="yes" xml:space="preserve">
          <source>Using --refresh</source>
          <target state="translated">リフレッシュを使用する</target>
        </trans-unit>
        <trans-unit id="0565ce691b52b5953c2fb97dfb806a2f764f48e2" translate="yes" xml:space="preserve">
          <source>Using --temp or --stage=all</source>
          <target state="translated">temp または --stage=all を使う</target>
        </trans-unit>
        <trans-unit id="509888a40362653e71adbbdc6d4e59bc0d3d4ce4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--index-filter&lt;/code&gt; with &lt;code&gt;git rm&lt;/code&gt; yields a significantly faster version. Like with using &lt;code&gt;rm filename&lt;/code&gt;, &lt;code&gt;git rm --cached filename&lt;/code&gt; will fail if the file is absent from the tree of a commit. If you want to &quot;completely forget&quot; a file, it does not matter when it entered history, so we also add &lt;code&gt;--ignore-unmatch&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;git rm&lt;/code&gt; で &lt;code&gt;--index-filter&lt;/code&gt; を使用すると、非常に高速なバージョンが生成されます。 &lt;code&gt;rm filename&lt;/code&gt; を使用する場合と同様に、ファイルがコミットのツリーにない場合、 &lt;code&gt;git rm --cached filename&lt;/code&gt; は失敗します。ファイルを「完全に忘れる」場合は、いつ履歴に入ったかは関係ないため、 &lt;code&gt;--ignore-unmatch&lt;/code&gt; も追加します。</target>
        </trans-unit>
        <trans-unit id="802dbfe4495f98c59f087035f936edebe365e8d7" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all active submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless &lt;code&gt;-f&lt;/code&gt; is used. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, submodules working trees will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodule.</source>
          <target state="translated">&lt;code&gt;--recurse-submodules&lt;/code&gt; を使用すると、スーパープロジェクトに記録されたコミットに従って、すべてのアクティブなサブモジュールのコンテンツが更新されます。サブモジュールのローカル変更が上書きされる場合、 &lt;code&gt;-f&lt;/code&gt; を使用しない限り、チェックアウトは失敗します。何も使用されていない場合（または &lt;code&gt;--no-recurse-submodules&lt;/code&gt; ）、サブモジュールの作業ツリーは更新されません。同じよう&lt;a href=&quot;git-submodule&quot;&gt;にgit-サブモジュール[1] &lt;/a&gt;、これは切り離します &lt;code&gt;HEAD&lt;/code&gt; サブモジュールのを。</target>
        </trans-unit>
        <trans-unit id="bf5da0d2a32c5b7048069200ef431cff7653b1d4" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all active submodules according to the commit recorded in the superproject. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, submodules working trees will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodules.</source>
          <target state="translated">&lt;code&gt;--recurse-submodules&lt;/code&gt; を使用すると、スーパープロジェクトに記録されたコミットに従って、すべてのアクティブなサブモジュールのコンテンツが更新されます。何も使用されていない場合（または &lt;code&gt;--no-recurse-submodules&lt;/code&gt; ）、サブモジュールの作業ツリーは更新されません。同じよう&lt;a href=&quot;git-submodule&quot;&gt;にgit-サブモジュール[1] &lt;/a&gt;、これは切り離します &lt;code&gt;HEAD&lt;/code&gt; サブモジュールのを。</target>
        </trans-unit>
        <trans-unit id="47e7ecf39552b28db7a0c771cb5239db7d4a81af" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all initialized submodules according to the commit recorded in the superproject. If local modifications in a submodule would be overwritten the checkout will fail unless &lt;code&gt;-f&lt;/code&gt; is used. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, the work trees of submodules will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodule.</source>
          <target state="translated">&lt;code&gt;--recurse-submodules&lt;/code&gt; を使用すると、スーパープロジェクトに記録されたコミットに従って、初期化されたすべてのサブモジュールのコンテンツが更新されます。サブモジュールのローカル変更が上書きされる場合、 &lt;code&gt;-f&lt;/code&gt; を使用しないとチェックアウトは失敗します。何も使用しない場合（または &lt;code&gt;--no-recurse-submodules&lt;/code&gt; ）、サブモジュールの作業ツリーは更新されません。同じよう&lt;a href=&quot;git-submodule&quot;&gt;にgit-サブモジュール[1] &lt;/a&gt;、これは切り離します &lt;code&gt;HEAD&lt;/code&gt; サブモジュールのを。</target>
        </trans-unit>
        <trans-unit id="87e05fa35b92ebd2beac592a4000f99e52c8fa99" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;--recurse-submodules&lt;/code&gt; will update the content of all initialized submodules according to the commit recorded in the superproject. If nothing (or &lt;code&gt;--no-recurse-submodules&lt;/code&gt;) is used, the work trees of submodules will not be updated. Just like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;, this will detach &lt;code&gt;HEAD&lt;/code&gt; of the submodules.</source>
          <target state="translated">&lt;code&gt;--recurse-submodules&lt;/code&gt; を使用すると、スーパープロジェクトに記録されたコミットに従って、初期化されたすべてのサブモジュールのコンテンツが更新されます。何も使用しない場合（または &lt;code&gt;--no-recurse-submodules&lt;/code&gt; ）、サブモジュールの作業ツリーは更新されません。同じよう&lt;a href=&quot;git-submodule&quot;&gt;にgit-サブモジュール[1] &lt;/a&gt;、これは切り離します &lt;code&gt;HEAD&lt;/code&gt; サブモジュールのを。</target>
        </trans-unit>
        <trans-unit id="131907fc18369579f75831dbffd3a45262caaa68" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;-a&lt;/code&gt; would conflate &amp;lt;remote&amp;gt; with any local branches you happen to have been prefixed with the same &amp;lt;remote&amp;gt; pattern.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; を使用すると、&amp;lt;remote&amp;gt;に、同じ&amp;lt;remote&amp;gt;パターンが前に付けられたローカルブランチが混同されます。</target>
        </trans-unit>
        <trans-unit id="bc196497d8f80228e3ec0969c92ba077224b9158" translate="yes" xml:space="preserve">
          <source>Using &lt;em&gt;git checkout-index&lt;/em&gt; to &quot;export an entire tree&quot;</source>
          <target state="translated">&lt;em&gt;git checkout-index&lt;/em&gt;を使用して「ツリー全体をエクスポートする」</target>
        </trans-unit>
        <trans-unit id="bb5a1594f36aa9f526f3a0391e9aecb18bcb1ed6" translate="yes" xml:space="preserve">
          <source>Using Gmail&amp;rsquo;s IMAP interface:</source>
          <target state="translated">GmailのIMAPインターフェースの使用：</target>
        </trans-unit>
        <trans-unit id="f145740948f023493614f8cb28fc352a33b08d80" translate="yes" xml:space="preserve">
          <source>Using a limit</source>
          <target state="translated">制限を使用する</target>
        </trans-unit>
        <trans-unit id="0d18e7415acaf5bf1693b96116e4340271619597" translate="yes" xml:space="preserve">
          <source>Using another project while maintaining independent history. Submodules allow you to contain the working tree of another project within your own working tree while keeping the history of both projects separate. Also, since submodules are fixed to an arbitrary version, the other project can be independently developed without affecting the superproject, allowing the superproject project to fix itself to new versions only when desired.</source>
          <target state="translated">独立した履歴を維持しながら別のプロジェクトを使う サブモジュールを使うことで、両方のプロジェクトの履歴を別々に保ちながら、別のプロジェクトの作業ツリーを自分の作業ツリーの中に入れることができます。また、サブモジュールは任意のバージョンに固定されるため、スーパープロジェクトに影響を与えずに他のプロジェクトを独立して開発することができ、スーパープロジェクトのプロジェクトは必要なときだけ新しいバージョンに固定することができます。</target>
        </trans-unit>
        <trans-unit id="03266ad998c58f3651e774794904a59499884e04" translate="yes" xml:space="preserve">
          <source>Using complex scripts</source>
          <target state="translated">複雑なスクリプトの使用</target>
        </trans-unit>
        <trans-unit id="9a4e17fa716627d801ba04248e7c13675c63f6bf" translate="yes" xml:space="preserve">
          <source>Using direct mode with SSL:</source>
          <target state="translated">SSLでダイレクトモードを使用しています。</target>
        </trans-unit>
        <trans-unit id="80be60b71aa62e009a5472e7b71ecca69fb605f2" translate="yes" xml:space="preserve">
          <source>Using direct mode:</source>
          <target state="translated">ダイレクトモードを使用しています。</target>
        </trans-unit>
        <trans-unit id="1c1bc19943239ea53498134ee5024657c6f7482f" translate="yes" xml:space="preserve">
          <source>Using git for collaboration</source>
          <target state="translated">git を使った共同作業</target>
        </trans-unit>
        <trans-unit id="e742dd237e897f0c09d1168ed38eeca1316d409b" translate="yes" xml:space="preserve">
          <source>Using interactive rebases</source>
          <target state="translated">インタラクティブなリベースの使用</target>
        </trans-unit>
        <trans-unit id="16c9cb76d4ea0981714eee54828fc3305174e2d5" translate="yes" xml:space="preserve">
          <source>Using macro attributes</source>
          <target state="translated">マクロ属性の使用</target>
        </trans-unit>
        <trans-unit id="0bcad514939a1a512d30defc1dd83a6988408bd1" translate="yes" xml:space="preserve">
          <source>Using more options generally further limits the output (e.g. &lt;code&gt;--since=&amp;lt;date1&amp;gt;&lt;/code&gt; limits to commits newer than &lt;code&gt;&amp;lt;date1&amp;gt;&lt;/code&gt;, and using it with &lt;code&gt;--grep=&amp;lt;pattern&amp;gt;&lt;/code&gt; further limits to commits whose log message has a line that matches &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;), unless otherwise noted.</source>
          <target state="translated">より多くのオプションを一般的にさらなる制限を使用して出力（例えば &lt;code&gt;--since=&amp;lt;date1&amp;gt;&lt;/code&gt; より新しいコミットに制限 &lt;code&gt;&amp;lt;date1&amp;gt;&lt;/code&gt; ととそれを用いた &lt;code&gt;--grep=&amp;lt;pattern&amp;gt;&lt;/code&gt; ログメッセージコミットに対するさらなる制限が一致していることラインを有します &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; ）（特に明記しない限り）。</target>
        </trans-unit>
        <trans-unit id="aab9e25047cbd960c71a3d6743c695a0fbcee99d" translate="yes" xml:space="preserve">
          <source>Using refspecs explicitly:</source>
          <target state="translated">refspecsを明示的に使用する。</target>
        </trans-unit>
        <trans-unit id="e240eb205361a2a50754a2cbbad5230917e3c8f6" translate="yes" xml:space="preserve">
          <source>Using test suites and git bisect together</source>
          <target state="translated">テストスイートとgitを二分して使う</target>
        </trans-unit>
        <trans-unit id="8fdfb0e1e33426ffa586ab6e967bc34118a45d25" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--submodule=log&lt;/code&gt; option with &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; will provide that information too.</source>
          <target state="translated">&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]で&lt;/a&gt; &lt;code&gt;--submodule=log&lt;/code&gt; オプションを使用すると、その情報も提供されます。</target>
        </trans-unit>
        <trans-unit id="d42f8d8f39d5c1ce54e65e242137998175012054" translate="yes" xml:space="preserve">
          <source>Using these options, &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; will act similar to the more specialized family of commit log tools: &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt;, and &lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged[1]&lt;/a&gt;</source>
          <target state="translated">これらのオプションを使用すると、&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;は、コミットログツールのより専門的なファミリである&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;、&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;、および&lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged [1]と同様に機能します。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a34d360db274a11502bc402ef7758f2bc5adf11b" translate="yes" xml:space="preserve">
          <source>Using this helper will store your passwords unencrypted on disk, protected only by filesystem permissions. If this is not an acceptable security tradeoff, try &lt;a href=&quot;git-credential-cache&quot;&gt;git-credential-cache[1]&lt;/a&gt;, or find a helper that integrates with secure storage provided by your operating system.</source>
          <target state="translated">このヘルパーを使用すると、パスワードが暗号化されずにディスクに保存され、ファイルシステムのアクセス許可によってのみ保護されます。これが許容できるセキュリティのトレードオフではない場合は、&lt;a href=&quot;git-credential-cache&quot;&gt;git-credential-cache [1]を&lt;/a&gt;試すか、オペレーティングシステムが提供する安全なストレージと統合するヘルパーを見つけてください。</target>
        </trans-unit>
        <trans-unit id="86d0ca06bdb5a3aacec696a9b10115a302a90ea4" translate="yes" xml:space="preserve">
          <source>Using this hook, it is easy to generate mails describing the updates to the repository. This example script sends one mail message per ref listing the commits pushed to the repository, and logs the push certificates of signed pushes with good signatures to a logger service:</source>
          <target state="translated">このフックを使えば、リポジトリへの更新を記述するメールを簡単に生成できます。このスクリプトの例では、リポジトリにプッシュされたコミットをリストアップしたメールメッセージを ref ごとに送信し、署名されたプッシュのプッシュ証明書をロガーサービスに記録しています。</target>
        </trans-unit>
        <trans-unit id="7ae98ad0643543d139a0ccded2d96be6c57e816c" translate="yes" xml:space="preserve">
          <source>Using this option for any other purpose (don&amp;rsquo;t ask) is very strongly discouraged.</source>
          <target state="translated">このオプションを他の目的で使用しないでください（質問しないでください）。</target>
        </trans-unit>
        <trans-unit id="ebe89d9e15d8a582f6b4a48c6c03d60cf9c673f1" translate="yes" xml:space="preserve">
          <source>Using tunnel mode:</source>
          <target state="translated">トンネルモードを使用しています。</target>
        </trans-unit>
        <trans-unit id="f17a1449e9ed80dcff59f550977b6693d42b10bf" translate="yes" xml:space="preserve">
          <source>Usual 3-way file level merge for text files. Conflicted regions are marked with conflict markers &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=======&lt;/code&gt; and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. The version from your branch appears before the &lt;code&gt;=======&lt;/code&gt; marker, and the version from the merged branch appears after the &lt;code&gt;=======&lt;/code&gt; marker.</source>
          <target state="translated">テキストファイルの通常の3方向ファイルレベルマージ。競合の領域が衝突マーカでマークされている &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;=======&lt;/code&gt; そして &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 。ブランチのバージョンは &lt;code&gt;=======&lt;/code&gt; マーカーの前に表示され、マージされたブランチのバージョンは &lt;code&gt;=======&lt;/code&gt; マーカーの後に表示されます。</target>
        </trans-unit>
        <trans-unit id="6cb51fab051882aaba81e0715d7acfa80e2ce09c" translate="yes" xml:space="preserve">
          <source>Usually &lt;code&gt;git gc&lt;/code&gt; runs very quickly while providing good disk space utilization and performance. This option will cause &lt;code&gt;git gc&lt;/code&gt; to more aggressively optimize the repository at the expense of taking much more time. The effects of this optimization are mostly persistent. See the &quot;AGGRESSIVE&quot; section below for details.</source>
          <target state="translated">通常、 &lt;code&gt;git gc&lt;/code&gt; は非常に高速に実行されますが、ディスク領域の使用率とパフォーマンスは良好です。このオプションを使用すると、 &lt;code&gt;git gc&lt;/code&gt; はリポジトリをより積極的に最適化しますが、はるかに時間がかかります。この最適化の効果はほとんど永続的です。詳細については、以下の「積極的」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="da9e2cbf852524ee1edb371514af799c05f82c93" translate="yes" xml:space="preserve">
          <source>Usually a merge requires the index file as well as the files in the working tree to be up to date with the current head commit, in order not to lose local changes. This flag disables the check with the working tree and is meant to be used when creating a merge of trees that are not directly related to the current working tree status into a temporary index file.</source>
          <target state="translated">通常、マージでは、ローカルでの変更を失わないようにするために、作業ツリー内のファイルだけでなくインデックスファイルも現在のヘッドコミットで最新の状態にしておく必要があります。このフラグは、作業ツリーのチェックを無効にし、現在の作業ツリーの状態に直接関係のないツリーを一時的なインデックスファイルにマージする際に使用します。</target>
        </trans-unit>
        <trans-unit id="27214bb5573e76f1f8a1f21396536681c10927d6" translate="yes" xml:space="preserve">
          <source>Usually a three-way merge by &lt;code&gt;git read-tree&lt;/code&gt; resolves the merge for really trivial cases and leaves other cases unresolved in the index, so that porcelains can implement different merge policies. This flag makes the command resolve a few more cases internally:</source>
          <target state="translated">通常、 &lt;code&gt;git read-tree&lt;/code&gt; による3者間マージは、ほんの些細なケースのマージを解決し、他のケースはインデックスに未解決のままにするため、磁器が異なるマージポリシーを実装できます。このフラグにより​​、コマンドは内部でさらにいくつかのケースを解決します。</target>
        </trans-unit>
        <trans-unit id="1a018c180f83561166ef04fc1c1b049dd7bef5e3" translate="yes" xml:space="preserve">
          <source>Usually given &quot;&amp;lt;feature&amp;gt;&quot; is configurable via the &lt;code&gt;gitweb.&amp;lt;feature&amp;gt;&lt;/code&gt; config variable in the per-repository Git configuration file.</source>
          <target state="translated">通常、「&amp;lt;feature&amp;gt;」を指定すると、リポジトリごとのGit構成ファイルの &lt;code&gt;gitweb.&amp;lt;feature&amp;gt;&lt;/code&gt; 構成変数を介して構成できます。</target>
        </trans-unit>
        <trans-unit id="06bd62b74600c2b58fc5390378d7102461c2b477" translate="yes" xml:space="preserve">
          <source>Usually it is easier to configure any desired options through your personal &lt;code&gt;.ssh/config&lt;/code&gt; file. Please consult your ssh documentation for further details.</source>
          <target state="translated">通常、個人の &lt;code&gt;.ssh/config&lt;/code&gt; ファイルを使用して、必要なオプションを構成する方が簡単です。詳細については、sshのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e92c22e35ceb9b2c8da5295a992718e30d5c9f60" translate="yes" xml:space="preserve">
          <source>Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the safety, and is primarily for use by foreign SCM interface scripts.</source>
          <target state="translated">通常、唯一の親コミットと全く同じツリーを持つコミットを記録することは間違いであり、このコマンドはそのようなコミットを行わないようにします。このオプションは安全性をバイパスし、主に外国の SCM インタフェーススクリプトで使用します。</target>
        </trans-unit>
        <trans-unit id="8ce3f0d516dc2a9d67b8e4ba143055eaf7bab452" translate="yes" xml:space="preserve">
          <source>Usually the command automatically creates a sequence of commits. This flag applies the changes necessary to cherry-pick each named commit to your working tree and the index, without making any commit. In addition, when this option is used, your index does not have to match the HEAD commit. The cherry-pick is done against the beginning state of your index.</source>
          <target state="translated">通常、コマンドは自動的に一連のコミットを作成します。このフラグは、コミットを行わずに、作業ツリーとインデックスにそれぞれの名前のついたコミットをチェリーピックするために必要な変更を適用します。さらに、このオプションが使用された場合、インデックスは HEAD コミットと一致する必要はありません。チェリーピックはインデックスの先頭の状態に対して行われます。</target>
        </trans-unit>
        <trans-unit id="55875ee1e78ad1cfc5a25d1e098bc17781327203" translate="yes" xml:space="preserve">
          <source>Usually the command automatically creates some commits with commit log messages stating which commits were reverted. This flag applies the changes necessary to revert the named commits to your working tree and the index, but does not make the commits. In addition, when this option is used, your index does not have to match the HEAD commit. The revert is done against the beginning state of your index.</source>
          <target state="translated">通常、このコマンドは、どのコミットが元に戻されたかを示すコミットログメッセージとともに、いくつかのコミットを自動的に作成します。このフラグは、指定されたコミットを作業ツリーとインデックスに戻すために必要な変更を適用しますが、コミットは行いません。さらに、このオプションを使用した場合、インデックスは HEAD コミットと一致する必要はありません。復帰はインデックスの先頭の状態に対して行われます。</target>
        </trans-unit>
        <trans-unit id="51d5f6e8faedb5ef4d1204f14e2f7ab2d7b77eaf" translate="yes" xml:space="preserve">
          <source>Usually the command stops output upon showing the commit that is the common ancestor of all the branches. This flag tells the command to go &amp;lt;n&amp;gt; more common commits beyond that. When &amp;lt;n&amp;gt; is negative, display only the &amp;lt;reference&amp;gt;s given, without showing the commit ancestry tree.</source>
          <target state="translated">通常、コマンドは、すべてのブランチの共通の祖先であるコミットを表示すると出力を停止します。このフラグは、コマンドに&amp;lt;n&amp;gt;より多くの一般的なコミットを実行するように指示します。&amp;lt;n&amp;gt;が負の場合、指定された&amp;lt;reference&amp;gt;のみを表示し、コミットの祖先ツリーは表示しません。</target>
        </trans-unit>
        <trans-unit id="972a81bf641e40fbeef4b825d75473d102daada5" translate="yes" xml:space="preserve">
          <source>Usually the easiest way to distinguish between these accounts is to use the username in the URL. For example, if you have the accounts &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;committer&lt;/code&gt; on &lt;code&gt;git.example.org&lt;/code&gt;, you can use the URLs &lt;a href=&quot;https://author@git.example.org/org1/project1.git&quot;&gt;https://author@git.example.org/org1/project1.git&lt;/a&gt; and &lt;a href=&quot;https://committer@git.example.org/org2/project2.git&quot;&gt;https://committer@git.example.org/org2/project2.git&lt;/a&gt;. This way, when you use a credential helper, it will automatically try to look up the correct credentials for your account. If you already have a remote set up, you can change the URL with something like &lt;code&gt;git remote set-url
origin https://author@git.example.org/org1/project1.git&lt;/code&gt; (see &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt; for details).</source>
          <target state="translated">通常、これらのアカウントを区別する最も簡単な方法は、URLでユーザー名を使用することです。あなたがアカウント持っている場合たとえば、 &lt;code&gt;author&lt;/code&gt; と &lt;code&gt;committer&lt;/code&gt; 上 &lt;code&gt;git.example.org&lt;/code&gt; 、あなたはURLを使用することができ&lt;a href=&quot;https://author@git.example.org/org1/project1.git&quot;&gt;ます。https：//author@git.example.org/org1/project1.git&lt;/a&gt;と&lt;a href=&quot;https://committer@git.example.org/org2/project2.git&quot;&gt;HTTPS：//committer@git.example .org / org2 /project2.git&lt;/a&gt;。このように、資格情報ヘルパーを使用すると、アカウントの正しい資格情報を自動的に検索しようとします。すでにリモートを設定している場合は、 &lt;code&gt;git remote set-url origin https://author@git.example.org/org1/project1.git&lt;/code&gt; ようにURLを変更できます（詳細については、&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]&lt;/a&gt;を参照してください）。 ）。</target>
        </trans-unit>
        <trans-unit id="29097abe7ecd686605680556737a55dc5b7468af" translate="yes" xml:space="preserve">
          <source>Usually the object names are output in SHA-1 form (with possible &lt;code&gt;^&lt;/code&gt; prefix); this option makes them output in a form as close to the original input as possible.</source>
          <target state="translated">通常、オブジェクト名はSHA-1形式（可能な &lt;code&gt;^&lt;/code&gt; プレフィックス付き）で出力されます。このオプションは、可能な限り元の入力に近い形式で出力します。</target>
        </trans-unit>
        <trans-unit id="576f849692364345fa924f476c3413707294c315" translate="yes" xml:space="preserve">
          <source>Usually the output is made one line per flag and parameter. This option makes output a single line, properly quoted for consumption by shell. Useful when you expect your parameter to contain whitespaces and newlines (e.g. when using pickaxe &lt;code&gt;-S&lt;/code&gt; with &lt;code&gt;git diff-*&lt;/code&gt;). In contrast to the &lt;code&gt;--sq-quote&lt;/code&gt; option, the command input is still interpreted as usual.</source>
          <target state="translated">通常、出力はフラグとパラメータごとに1行になります。このオプションは、シェルによる消費のために適切に引用された出力を1行にします。パラメータに空白や改行が含まれることが予想される場合に便利です（たとえば、 &lt;code&gt;git diff-*&lt;/code&gt; で pickaxe &lt;code&gt;-S&lt;/code&gt; を使用する場合）。 &lt;code&gt;--sq-quote&lt;/code&gt; オプションとは対照的に、コマンド入力は通常どおり解釈されます。</target>
        </trans-unit>
        <trans-unit id="52303fe63fddea8a07d49fe1df917ff950ba6541" translate="yes" xml:space="preserve">
          <source>Usually the program removes email cruft from the Subject: header line to extract the title line for the commit log message. This option prevents this munging, and is most useful when used to read back &lt;code&gt;git format-patch -k&lt;/code&gt; output.</source>
          <target state="translated">通常、プログラムはSubject：ヘッダー行から電子メールの残骸を削除して、コミットログメッセージのタイトル行を抽出します。このオプションはこの変更を防ぎ、 &lt;code&gt;git format-patch -k&lt;/code&gt; の出力を読み取るために使用する場合に最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="12904fba6e8c31d350b5463557502fba670802b3" translate="yes" xml:space="preserve">
          <source>Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows cherry-pick to replay the change relative to the specified parent.</source>
          <target state="translated">マージのどちらをメインラインとみなすべきかがわからないので、通常はチェリーピックはできません。このオプションは、メインラインの親番号 (1 から始まる)を指定し、チェリーピックで指定した親からの相対的な変更を再生することができます。</target>
        </trans-unit>
        <trans-unit id="8ec09d5ac366ce3cd2a5e3c6c67d0b4fe311e4bf" translate="yes" xml:space="preserve">
          <source>Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows revert to reverse the change relative to the specified parent.</source>
          <target state="translated">通常、マージのどちら側をメインラインと見なすべきかがわからないため、マージを元に戻すことはできません。このオプションは、メインラインの親番号 (1 から始まる)を指定し、指定した親からの相対的な変更を元に戻すことができます。</target>
        </trans-unit>
        <trans-unit id="6969d1a350dfc3fafb277e2e6995e5ac7a289ac5" translate="yes" xml:space="preserve">
          <source>Usually you should not need to change (adjust) any of configuration variables described below; they should be automatically set by gitweb to correct value.</source>
          <target state="translated">通常は、以下に説明する設定変数を変更 (調整)する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b172c85defacdb686b541793ef9e8aeee0cdf60e" translate="yes" xml:space="preserve">
          <source>Usually you would want to use &lt;code&gt;git fetch&lt;/code&gt;, which is a higher level wrapper of this command, instead.</source>
          <target state="translated">通常は、代わりに、このコマンドの上位レベルのラッパーである &lt;code&gt;git fetch&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bec645de31c299cb10f93b6253e1e1669a5f0a31" translate="yes" xml:space="preserve">
          <source>Usually you would want to use &lt;code&gt;git push&lt;/code&gt;, which is a higher-level wrapper of this command, instead. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">通常、代わりに、このコマンドの上位レベルのラッパーである &lt;code&gt;git push&lt;/code&gt; を使用します。&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5982263578e4f00875c00a40da810fe92911cebc" translate="yes" xml:space="preserve">
          <source>Usually, &quot;git push&quot; refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.</source>
          <target state="translated">通常、&quot;git push&quot; は、上書きに使用したローカル ref の祖先ではないリモート ref の更新を拒否します。</target>
        </trans-unit>
        <trans-unit id="f8497b6ab754b20f8d36f9efb8dfea581706bc5d" translate="yes" xml:space="preserve">
          <source>Usually, dangling blobs and trees aren&amp;rsquo;t very interesting. They&amp;rsquo;re almost always the result of either being a half-way mergebase (the blob will often even have the conflict markers from a merge in it, if you have had conflicting merges that you fixed up by hand), or simply because you interrupted a &lt;code&gt;git fetch&lt;/code&gt; with ^C or something like that, leaving &lt;code&gt;some&lt;/code&gt; of the new objects in the object database, but just dangling and useless.</source>
          <target state="translated">通常、ぶら下がっているブロブとツリーはあまり面白くありません。それらはほとんどの場合、途中のマージベースである（手動で修正した競合するマージがあった場合、ブロブにはマージからの競合マーカーが含まれることもある）か、単に中断したために発生します。 &lt;code&gt;git fetch&lt;/code&gt; 残し、^ Cまたはそのようなもので &lt;code&gt;some&lt;/code&gt; オブジェクトデータベースに新しいオブジェクトのを、ちょうどダングリングと役に立ちません。</target>
        </trans-unit>
        <trans-unit id="6811a338c6e88fac2f36caab99cbe1bb3018067b" translate="yes" xml:space="preserve">
          <source>Usually, if the password or token is invalid, Git will erase it and prompt for a new one. However, there are times when this doesn&amp;rsquo;t always happen. To change the password or token, you can erase the existing credentials and then Git will prompt for new ones. To erase credentials, use a syntax like the following (substituting your username and the hostname):</source>
          <target state="translated">通常、パスワードまたはトークンが無効な場合、Gitはそれを消去し、新しいものを要求します。ただし、これが常に発生するとは限らない場合があります。パスワードまたはトークンを変更するには、既存の資格情報を消去すると、Gitが新しい資格情報の入力を求めます。資格情報を消去するには、次のような構文を使用します（ユーザー名とホスト名を置き換えます）。</target>
        </trans-unit>
        <trans-unit id="ebecb811fcb50ea2c9e80ad196b73df5b02ee5fc" translate="yes" xml:space="preserve">
          <source>Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when &lt;code&gt;--force-with-lease&lt;/code&gt; option is used, the command refuses to update a remote ref whose current value does not match what is expected.</source>
          <target state="translated">通常、コマンドは、それを上書きするために使用されたローカル参照の祖先ではないリモート参照の更新を拒否します。また、 &lt;code&gt;--force-with-lease&lt;/code&gt; オプションが使用されている場合、コマンドは、現在の値が予期されるものと一致しないリモート参照の更新を拒否します。</target>
        </trans-unit>
        <trans-unit id="1039e5d0aca0474d85bb0cc56a14c21769cd56ed" translate="yes" xml:space="preserve">
          <source>Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. What this means is that the remote repository can lose commits; use it with care.</source>
          <target state="translated">通常、コマンドは、上書きに使用されたローカル ref の祖先ではないリモート ref の更新を拒否します。このフラグはチェックを無効にします。これが意味するのは、リモートリポジトリがコミットを失う可能性があるということです;注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="b573cab97a4c7ff4e65c78f089627a289eeb14b6" translate="yes" xml:space="preserve">
          <source>Valid &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt;'s include:</source>
          <target state="translated">有効な &lt;code&gt;&amp;lt;type&amp;gt;&lt;/code&gt; には以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="2f441e23dc9e42a84676feea9743dbd62f2c9b12" translate="yes" xml:space="preserve">
          <source>Valid object types are:</source>
          <target state="translated">有効なオブジェクトタイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9b5bd1c32c0119d43f13ecb3f634510bb032afd7" translate="yes" xml:space="preserve">
          <source>Validate packed Git archive files</source>
          <target state="translated">パックされた Git アーカイブファイルの検証</target>
        </trans-unit>
        <trans-unit id="c95efe4a20b3c90ba09bca423cb347dacda4f997" translate="yes" xml:space="preserve">
          <source>Validates the GPG signature created by &lt;code&gt;git commit -S&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git commit -S&lt;/code&gt; によって作成されたGPG署名を検証します。</target>
        </trans-unit>
        <trans-unit id="ee833db09826b15f6656c228fc09101a4d262c96" translate="yes" xml:space="preserve">
          <source>Validates the gpg signature created by &lt;code&gt;git tag&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git tag&lt;/code&gt; 作成されたgpg署名を検証します。</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="38ecbfb58a1b4075db82e349628396bb680485d8" translate="yes" xml:space="preserve">
          <source>Values for other tools can be used if there is a corresponding &lt;code&gt;man.&amp;lt;tool&amp;gt;.cmd&lt;/code&gt; configuration entry (see below).</source>
          <target state="translated">対応する &lt;code&gt;man.&amp;lt;tool&amp;gt;.cmd&lt;/code&gt; 構成エントリがある場合は、他のツールの値を使用できます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="4590af9796b7774b94529a47844bbbd8cd70381f" translate="yes" xml:space="preserve">
          <source>Values obtained in later configuration files override values obtained earlier in the above sequence.</source>
          <target state="translated">後の設定ファイルで取得した値は、上記のシーケンスで以前に取得した値を上書きします。</target>
        </trans-unit>
        <trans-unit id="42a2c91c112ab20fb86d229e79049c16aac8f47b" translate="yes" xml:space="preserve">
          <source>Values of many variables are treated as a simple string, but there are variables that take values of specific types and there are rules as to how to spell them.</source>
          <target state="translated">多くの変数の値は単純な文字列として扱われますが、特定の型の値を取る変数があり、それをどのように綴るかというルールがあります。</target>
        </trans-unit>
        <trans-unit id="af6a117cf9cae5d8127a5c83e908e26e4094605c" translate="yes" xml:space="preserve">
          <source>Variable substitution</source>
          <target state="translated">変数の置換</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="36ae09eeb0daa8ef3fa73e86b507f064c6f1150e" translate="yes" xml:space="preserve">
          <source>Various Git commands use the following environment variables:</source>
          <target state="translated">さまざまな Git コマンドでは、以下の環境変数を使用します。</target>
        </trans-unit>
        <trans-unit id="c808db304a88e67e4d99602bde96a3fd73a86c36" translate="yes" xml:space="preserve">
          <source>Various aspects of gitweb&amp;rsquo;s behavior can be controlled through the configuration file &lt;code&gt;gitweb_config.perl&lt;/code&gt; or &lt;code&gt;/etc/gitweb.conf&lt;/code&gt;. See the &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt; for details.</source>
          <target state="translated">gitwebの動作のさまざまな側面は​​、構成ファイル &lt;code&gt;gitweb_config.perl&lt;/code&gt; または &lt;code&gt;/etc/gitweb.conf&lt;/code&gt; を使用して制御できます。詳細については、&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="514c3adc237433a43f04caf698ef6f51638f8f03" translate="yes" xml:space="preserve">
          <source>Various commands read from the configuration file and adjust their operation accordingly. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for a list and more details about the configuration mechanism.</source>
          <target state="translated">さまざまなコマンドが構成ファイルから読み取られ、それに応じて操作が調整されます。参照&lt;a href=&quot;git-config&quot;&gt;のgit-config設定[1]&lt;/a&gt;リストおよび設定メカニズムの詳細については。</target>
        </trans-unit>
        <trans-unit id="9d741cda072f8e825584f9d44fb913d01a1b3645" translate="yes" xml:space="preserve">
          <source>Various values from structured fields in referenced objects can be used to interpolate into the resulting output, or as sort keys.</source>
          <target state="translated">参照オブジェクト内の構造化されたフィールドからの様々な値を、結果の出力への補間や、ソートキーとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="0e52597805b02b27bbf6fa8afb053d38cd1cf9a2" translate="yes" xml:space="preserve">
          <source>Various ways to check your working tree</source>
          <target state="translated">作業木のチェック方法いろいろ</target>
        </trans-unit>
        <trans-unit id="8a8830ff167eaa3505bc00fdd4111ea514743436" translate="yes" xml:space="preserve">
          <source>Verbose output.</source>
          <target state="translated">曖昧な出力。</target>
        </trans-unit>
        <trans-unit id="5e80e8afa8277ee05efe0825f2f72b290ab38b7f" translate="yes" xml:space="preserve">
          <source>Verbose.</source>
          <target state="translated">Verbose.</target>
        </trans-unit>
        <trans-unit id="1eee329978eae57e0140879a7cb5a19a8e448f4c" translate="yes" xml:space="preserve">
          <source>Verbosely display information about the searching strategy being employed to standard error. The tag name will still be printed to standard out.</source>
          <target state="translated">採用されている検索方法の情報を標準誤差になるように曖昧に表示します。タグ名は標準出力されます。</target>
        </trans-unit>
        <trans-unit id="17eca013b0d71c76732d4067f559197bffc5dc5a" translate="yes" xml:space="preserve">
          <source>Verbosity: let &lt;code&gt;cvsimport&lt;/code&gt; report what it is doing.</source>
          <target state="translated">冗長性： &lt;code&gt;cvsimport&lt;/code&gt; に実行内容を報告させます。</target>
        </trans-unit>
        <trans-unit id="43241483b8c2e2b351480246076bc9d9d3aeeb38" translate="yes" xml:space="preserve">
          <source>Verifies the connectivity and validity of the objects in the database</source>
          <target state="translated">データベース内のオブジェクトの接続性と有効性を検証します。</target>
        </trans-unit>
        <trans-unit id="083f6e6fa7581860cb22a12637eec790f2c234d9" translate="yes" xml:space="preserve">
          <source>Verifies the connectivity and validity of the objects in the database.</source>
          <target state="translated">データベース内のオブジェクトの接続性と有効性を検証します。</target>
        </trans-unit>
        <trans-unit id="6f20b572e11a287b2200fc3c18b3124b41ee5e40" translate="yes" xml:space="preserve">
          <source>Verify &amp;lt;ref&amp;gt; against &amp;lt;oldvalue&amp;gt; but do not change it. If &amp;lt;oldvalue&amp;gt; is zero or missing, the ref must not exist.</source>
          <target state="translated">&amp;lt;ref&amp;gt;を&amp;lt;oldvalue&amp;gt;と照合しますが、変更しないでください。&amp;lt;oldvalue&amp;gt;がゼロまたは欠落している場合、参照は存在してはなりません。</target>
        </trans-unit>
        <trans-unit id="121ce6e2fb35359b4c456b6cab91a3389a1154d2" translate="yes" xml:space="preserve">
          <source>Verify &amp;lt;ref&amp;gt; against &amp;lt;oldvalue&amp;gt; but do not change it. If &amp;lt;oldvalue&amp;gt; zero or missing, the ref must not exist.</source>
          <target state="translated">&amp;lt;oldvalue&amp;gt;に対して&amp;lt;ref&amp;gt;を確認しますが、変更しないでください。&amp;lt;oldvalue&amp;gt;がゼロまたは欠落している場合、参照は存在してはなりません。</target>
        </trans-unit>
        <trans-unit id="f2a6ea4dcf4e13700439c2c62eb9c887c3645654" translate="yes" xml:space="preserve">
          <source>Verify that everything reachable from target is fetched. Used after an earlier fetch is interrupted.</source>
          <target state="translated">ターゲットから到達可能なすべてのものがフェッチされていることを確認します。以前のフェッチが中断された後に使用されます。</target>
        </trans-unit>
        <trans-unit id="dc19dfe6277cd8889c0ce32fc30714a767c456fd" translate="yes" xml:space="preserve">
          <source>Verify that exactly one parameter is provided, and that it can be turned into a raw 20-byte SHA-1 that can be used to access the object database. If so, emit it to the standard output; otherwise, error out.</source>
          <target state="translated">正確に1つのパラメータが提供され、それがオブジェクト・データベースにアクセスするために使用できる生の20バイトSHA-1に変換できることを確認してください。そうであれば、それを標準出力に出力し、そうでなければエラーアウトします。</target>
        </trans-unit>
        <trans-unit id="e921c65f691e2b371e3e29dc398bb292612d2860" translate="yes" xml:space="preserve">
          <source>Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.</source>
          <target state="translated">マージするサイドブランチの tip commit が有効な鍵で署名されているかどうかを確認します。サイドブランチの tip コミットが有効な鍵で署名されていない場合は、マージは中止されます。</target>
        </trans-unit>
        <trans-unit id="baf3600caf9cbc675ef33fe6c51f69bd006b47ea" translate="yes" xml:space="preserve">
          <source>Verify the GPG signature of the given tag names.</source>
          <target state="translated">与えられたタグ名のGPG署名を検証します。</target>
        </trans-unit>
        <trans-unit id="2977304de3538ddff5d274481548280fa86926b6" translate="yes" xml:space="preserve">
          <source>Verify the MIDX file for the packfiles in the current .git folder.</source>
          <target state="translated">現在の .git フォルダにある packfiles の MIDX ファイルを確認します。</target>
        </trans-unit>
        <trans-unit id="593811a1bcc6cbc445bcfa7fdf52e4a760c41784" translate="yes" xml:space="preserve">
          <source>Verify the contents of the MIDX file.</source>
          <target state="translated">MIDXファイルの内容を確認します。</target>
        </trans-unit>
        <trans-unit id="63de76d12bfde7fe2c14402fe2f03160cc3a7318" translate="yes" xml:space="preserve">
          <source>Version 1 porcelain format is similar to the short format, but is guaranteed not to change in a backwards-incompatible way between Git versions or based on user configuration. This makes it ideal for parsing by scripts. The description of the short format above also describes the porcelain format, with a few exceptions:</source>
          <target state="translated">バージョン1の磁器フォーマットは短いフォーマットに似ていますが、Gitのバージョン間やユーザーの設定に基づいて後方互換性のない方法で変更されないことが保証されています。そのため、スクリプトによるパースに最適です。上記の short フォーマットの説明では、いくつかの例外を除いて porcelain フォーマットについても説明しています。</target>
        </trans-unit>
        <trans-unit id="1bb30898712789d3819631e4bb7ad8cf32d20671" translate="yes" xml:space="preserve">
          <source>Version 1 takes two arguments, a version (1) and the time in elapsed nanoseconds since midnight, January 1, 1970.</source>
          <target state="translated">バージョン1は2つの引数をとり、バージョン(1)と1970年1月1日の真夜中からの経過ナノ秒の時間を指定します。</target>
        </trans-unit>
        <trans-unit id="33e409adcd5a97d5085c0477fcb4b42dc9a034a9" translate="yes" xml:space="preserve">
          <source>Version 2 format adds more detailed information about the state of the worktree and changed items. Version 2 also defines an extensible set of easy to parse optional headers.</source>
          <target state="translated">バージョン2のフォーマットでは、ワークツリーの状態や変更された項目に関するより詳細な情報が追加されています。バージョン2では、解析しやすいオプションのヘッダの拡張可能なセットも定義されています。</target>
        </trans-unit>
        <trans-unit id="2b8063c91f48f5daba279d42a4965f292b8198dd" translate="yes" xml:space="preserve">
          <source>Version 2 pack-*.idx files support packs larger than 4 gib, and</source>
          <target state="translated">バージョン 2 の pack-*.idx ファイルは 4 gib 以上のパックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="76b6cb1496a78fff149bd68b719a91ca0d69c9df" translate="yes" xml:space="preserve">
          <source>Version 2 takes two arguments, a version (2) and a token that is used for identifying changes since the token. For watchman this would be a clock id. This version must output to stdout the new token followed by a NUL before the list of files.</source>
          <target state="translated">バージョン2は、バージョン(2)とトークンの2つの引数を取り、トークン以降の変更を識別するために使用されます。watchmanの場合、これは時計のIDになります。このバージョンでは、新しいトークンの後にファイルのリストの前にNULを続けて標準出力に出力しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5a28a75eceea6b3fb1730e69daff64901cead811" translate="yes" xml:space="preserve">
          <source>Version 4 performs a simple pathname compression that reduces index size by 30%-50% on large repositories, which results in faster load time. Version 4 is relatively young (first released in 1.8.0 in October 2012). Other Git implementations such as JGit and libgit2 may not support it yet.</source>
          <target state="translated">バージョン4では、単純なパス名圧縮を実行して、大規模なリポジトリでインデックスサイズを30%~50%削減し、ロード時間を短縮します。バージョン 4 は比較的新しいものです (最初にリリースされたのは 2012 年 10 月の 1.8.0 です)。JGit や libgit2 のような他の Git 実装はまだサポートしていないかもしれません。</target>
        </trans-unit>
        <trans-unit id="5b61ffa7c699cf77c98fcf76236048d42ca5d233" translate="yes" xml:space="preserve">
          <source>Version &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">バージョン &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fc1164df4f366b4e06ce848f94e3799671648de" translate="yes" xml:space="preserve">
          <source>Version &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">バージョン &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26980b77b1e7ef480646032aebce78732551db11" translate="yes" xml:space="preserve">
          <source>Versions of Git older than 1.7.7 don&amp;rsquo;t know about the &lt;code&gt;tar.gz&lt;/code&gt; format, you&amp;rsquo;ll need to use gzip explicitly:</source>
          <target state="translated">1.7.7より前のバージョンのGitは &lt;code&gt;tar.gz&lt;/code&gt; 形式を認識していません。明示的にgzipを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="48cda44638e8ce2f3c6e764951e4cd137e88bacc" translate="yes" xml:space="preserve">
          <source>Via the alternates mechanism, a &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt; can inherit part of its &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt; from another object database, which is called an &quot;alternate&quot;.</source>
          <target state="translated">代替メカニズムを介して、&lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;は「代替」と呼ばれる別のオブジェクトデータベースから&lt;a href=&quot;#def_object_database&quot;&gt;オブジェクトデータベースの&lt;/a&gt;一部を継承できます。</target>
        </trans-unit>
        <trans-unit id="d75bfce3768015c62af9c4bd29fd7cad894764e0" translate="yes" xml:space="preserve">
          <source>Viewing everything that was changed in a revision, and step through revisions one at a time, viewing the history of the repository.</source>
          <target state="translated">リビジョンで変更されたものをすべて表示し、リポジトリの履歴を見ながら、リビジョンを1つずつステップアップしていきます。</target>
        </trans-unit>
        <trans-unit id="8e797001d4524362e7db8f18210266901eb28403" translate="yes" xml:space="preserve">
          <source>Viewing files in GUI tools</source>
          <target state="translated">GUIツールでのファイルの閲覧</target>
        </trans-unit>
        <trans-unit id="05c33ea7de1cccd62a72042e46bec3b3d340cf9f" translate="yes" xml:space="preserve">
          <source>Viewing multiple Git repositories with common root.</source>
          <target state="translated">複数の Git リポジトリを共通のルートで表示します。</target>
        </trans-unit>
        <trans-unit id="1439a80405107c5dd4ca129513bf97eb92ca8c3f" translate="yes" xml:space="preserve">
          <source>Viewing old file versions</source>
          <target state="translated">古いファイルのバージョンを表示する</target>
        </trans-unit>
        <trans-unit id="cba1ab24737b9af4081eae74baa579853869959f" translate="yes" xml:space="preserve">
          <source>Viewing project history</source>
          <target state="translated">プロジェクトの履歴を見る</target>
        </trans-unit>
        <trans-unit id="48e788f7b4905bc5801452134707bb74e1fddd3c" translate="yes" xml:space="preserve">
          <source>Viewing the blame/annotation details of any file (if enabled).</source>
          <target state="translated">任意のファイルの注釈/注釈の詳細を表示します(有効な場合)。</target>
        </trans-unit>
        <trans-unit id="afd57038f9956faea3beadae2f663a8f18e1dd6a" translate="yes" xml:space="preserve">
          <source>Viewing the contents of files in the repository at any revision.</source>
          <target state="translated">リポジトリ内のファイルの内容を任意のリビジョンで表示します。</target>
        </trans-unit>
        <trans-unit id="79e8c237bcc343324671ba4de89f13c4632b7437" translate="yes" xml:space="preserve">
          <source>Viewing the revision log of branches, history of files and directories, see what was changed when, by who.</source>
          <target state="translated">ブランチのリビジョンログ、ファイルやディレクトリの履歴を表示して、いつ、誰が、何を変更したかを確認します。</target>
        </trans-unit>
        <trans-unit id="5d3b4279714ad2970a30b9dfdfce1d9cde0d271d" translate="yes" xml:space="preserve">
          <source>Voila.</source>
          <target state="translated">Voila.</target>
        </trans-unit>
        <trans-unit id="f7dda342bfe7129409283096bf9eae6889a3617d" translate="yes" xml:space="preserve">
          <source>Waiting $&amp;lt;int&amp;gt; seconds before reconnecting to SMTP server. Used together with --batch-size option. Defaults to the &lt;code&gt;sendemail.smtpReloginDelay&lt;/code&gt; configuration variable.</source>
          <target state="translated">SMTPサーバーに再接続する前に$ &amp;lt;int&amp;gt;秒待機しています。--batch-sizeオプションと一緒に使用します。デフォルトは &lt;code&gt;sendemail.smtpReloginDelay&lt;/code&gt; 構成変数です。</target>
        </trans-unit>
        <trans-unit id="6abfc589b188840a4520edd8282e2221d54aed84" translate="yes" xml:space="preserve">
          <source>Walk history forward instead of backward. Instead of showing the revision in which a line appeared, this shows the last revision in which a line has existed. This requires a range of revision like START..END where the path to blame exists in START. &lt;code&gt;git blame --reverse START&lt;/code&gt; is taken as &lt;code&gt;git blame
--reverse START..HEAD&lt;/code&gt; for convenience.</source>
          <target state="translated">履歴を後方ではなく前方に移動します。行が表示されたリビジョンを表示する代わりに、行が存在した最後のリビジョンを表示します。これには、START..ENDのような一連のリビジョンが必要です。 &lt;code&gt;git blame --reverse START&lt;/code&gt; は、便宜上 &lt;code&gt;git blame --reverse START..HEAD&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="246770a4db6a59723366cd008c0806351012631a" translate="yes" xml:space="preserve">
          <source>Walk through the patches in the series and warn if we cannot find all of the necessary information to commit a patch. At the time of this writing only missing author information is warned about.</source>
          <target state="translated">シリーズのパッチをウォークスルーして、パッチをコミットするために必要な情報がすべて見つからない場合に警告します。この記事を書いている時点では、欠落している作者情報のみが警告されています。</target>
        </trans-unit>
        <trans-unit id="8741434725596a0a6dcba1ea6ce0540165fbeb38" translate="yes" xml:space="preserve">
          <source>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by &lt;code&gt;core.whitespace&lt;/code&gt; configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</source>
          <target state="translated">変更によって競合マーカーまたは空白エラーが発生した場合に警告します。空白エラーと見なされるものは、 &lt;code&gt;core.whitespace&lt;/code&gt; 構成によって制御されます。デフォルトでは、末尾の空白（空白のみで構成される行を含む）および行の最初のインデント内の直後にタブ文字が続く空白文字は、空白エラーと見なされます。問題が見つかった場合、ゼロ以外のステータスで終了します。--exit-codeと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="d0219dea42624b30174e17cfd1bb37d7d1a042a1" translate="yes" xml:space="preserve">
          <source>Warn of patches that contain lines longer than 998 characters unless a suitable transfer encoding (&lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, or &lt;code&gt;quoted-printable&lt;/code&gt;) is used; this is due to SMTP limits as described by &lt;a href=&quot;http://www.ietf.org/rfc/rfc5322.txt&quot;&gt;http://www.ietf.org/rfc/rfc5322.txt&lt;/a&gt;.</source>
          <target state="translated">適切な転送エンコーディング（ &lt;code&gt;auto&lt;/code&gt; 、 &lt;code&gt;base64&lt;/code&gt; 、または &lt;code&gt;quoted-printable&lt;/code&gt; ）が使用されていない限り、998文字より長い行を含むパッチの警告。これは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc5322.txt&quot;&gt;http://www.ietf.org/rfc/rfc5322.txtで&lt;/a&gt;説明されているSMTPの制限によるものです。</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="d9a62a2598117c2be58c53a722de6576cd225a89" translate="yes" xml:space="preserve">
          <source>Warnings are printed on the standard error output for any explicitly unsupported constructs, and any other lines that are not recognized by the parser.</source>
          <target state="translated">明示的にサポートされていない構文や、パーサに認識されないその他の行については、標準エラー出力に警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="54490e8680807566a4db5e14166b54af9ee18d68" translate="yes" xml:space="preserve">
          <source>We already saw in &lt;a href=&quot;#understanding-commits&quot;&gt;Understanding History: Commits&lt;/a&gt; that all commits are stored under a 40-digit &quot;object name&quot;. In fact, all the information needed to represent the history of a project is stored in objects with such names. In each case the name is calculated by taking the SHA-1 hash of the contents of the object. The SHA-1 hash is a cryptographic hash function. What that means to us is that it is impossible to find two different objects with the same name. This has a number of advantages; among others:</source>
          <target state="translated">&lt;a href=&quot;#understanding-commits&quot;&gt;「ヒストリーの理解：コミット」では&lt;/a&gt;、すべてのコミットが40桁の「オブジェクト名」で保存されることをすでに確認しました。実際、プロジェクトの履歴を表すために必要なすべての情報は、そのような名前のオブジェクトに格納されています。いずれの場合も、名前はオブジェクトの内容のSHA-1ハッシュを取ることによって計算されます。SHA-1ハッシュは、暗号化ハッシュ関数です。つまり、同じ名前の2つの異なるオブジェクトを見つけることは不可能です。これには多くの利点があります。特に：</target>
        </trans-unit>
        <trans-unit id="e79afdd75f0417fa823f7b20619c450850fb2c27" translate="yes" xml:space="preserve">
          <source>We also recommend setting a &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; file to explicitly mark which files are text and which are binary. If you want Git to guess, you can set the attribute &lt;code&gt;text=auto&lt;/code&gt;. For example, the following might be appropriate in some projects:</source>
          <target state="translated">また、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;ファイルを設定して、どのファイルがテキストでどのファイルがバイナリであるかを明示的にマークすることをお勧めします。Gitに推測させたい場合は、属性 &lt;code&gt;text=auto&lt;/code&gt; を設定できます。たとえば、一部のプロジェクトでは次のことが適切な場合があります。</target>
        </trans-unit>
        <trans-unit id="d6fd523936a98d1231393ad2931c9779a4d79b0e" translate="yes" xml:space="preserve">
          <source>We are looking for a &quot;best&quot; explanation of the new series in terms of the old one. We can represent an &quot;explanation&quot; as an edge in the graph:</source>
          <target state="translated">我々は新しい系列の「最良の」説明を古い系列の観点から探している.説明」をグラフの辺として表現することができる.</target>
        </trans-unit>
        <trans-unit id="9b940c15e60e8d5e30f8f0dd6fb317eefa03a3c7" translate="yes" xml:space="preserve">
          <source>We assume that GITWEB_CONFIG has its default Makefile value, namely &lt;code&gt;gitweb_config.perl&lt;/code&gt;. Put the following in &lt;code&gt;gitweb_make_index.perl&lt;/code&gt; file:</source>
          <target state="translated">GITWEB_CONFIGにはデフォルトのMakefile値、つまり &lt;code&gt;gitweb_config.perl&lt;/code&gt; があると想定しています。以下を &lt;code&gt;gitweb_make_index.perl&lt;/code&gt; ファイルに入れます：</target>
        </trans-unit>
        <trans-unit id="860f449f084465687d5f3065e9dcdf4471fe0c53" translate="yes" xml:space="preserve">
          <source>We assume the following in /etc/services</source>
          <target state="translated">etc/servicesでは以下のように仮定しています。</target>
        </trans-unit>
        <trans-unit id="e666201c4a3affd420bf339541f1e66f556269f5" translate="yes" xml:space="preserve">
          <source>We assume you have already created a Git repository for your project, possibly created from scratch or from a tarball (see &lt;a href=&quot;gittutorial&quot;&gt;gittutorial[7]&lt;/a&gt;), or imported from an already existing CVS repository (see the next section).</source>
          <target state="translated">プロジェクトのGitリポジトリがすでに作成されていると想定します。ゼロから作成するか、tarballから作成するか（&lt;a href=&quot;gittutorial&quot;&gt;gittutorial [7]を&lt;/a&gt;参照）、既存のCVSリポジトリからインポートする（次のセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="a35a2d4ac8af99272cba8ca44431c44847ef0735" translate="yes" xml:space="preserve">
          <source>We can also create a tag to refer to a particular commit; after running</source>
          <target state="translated">特定のコミットを参照するためのタグを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="ec584a188dcd2e25a99263b54f2feb909dc57e99" translate="yes" xml:space="preserve">
          <source>We can ask Git about this particular object with the &lt;code&gt;cat-file&lt;/code&gt; command. Don&amp;rsquo;t copy the 40 hex digits from this example but use those from your own version. Note that you can shorten it to only a few characters to save yourself typing all 40 hex digits:</source>
          <target state="translated">&lt;code&gt;cat-file&lt;/code&gt; コマンドを使用して、Gitにこの特定のオブジェクトについて尋ねることができます。この例の40桁の16進数はコピーせず、独自のバージョンのものを使用してください。40桁の16進数をすべて入力する手間を省くために、数文字に短縮できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3d0c7ad92eed63e4b86ed7fcdbe0a2af116dc20a" translate="yes" xml:space="preserve">
          <source>We can further investigate the time spent scanning for untracked files.</source>
          <target state="translated">追跡されていないファイルのスキャンに費やした時間をさらに調査することができます。</target>
        </trans-unit>
        <trans-unit id="14c5f91f2f30d67e424b3d8fa6177783e08a84fd" translate="yes" xml:space="preserve">
          <source>We can get just the branch-head names, and remove &lt;code&gt;master&lt;/code&gt;, with the help of the standard utilities cut and grep:</source>
          <target state="translated">標準のユーティリティであるcutとgrep を使用して、ブランチヘッド名だけを取得し、 &lt;code&gt;master&lt;/code&gt; を削除できます。</target>
        </trans-unit>
        <trans-unit id="a00f6027326a1e03d87c7714c37d6396c5fc0f07" translate="yes" xml:space="preserve">
          <source>We can get this using the following command:</source>
          <target state="translated">以下のコマンドで取得できます。</target>
        </trans-unit>
        <trans-unit id="308213d749ac73498be48acb36aa505b62d477c8" translate="yes" xml:space="preserve">
          <source>We can give this name to &lt;code&gt;git show&lt;/code&gt; to see the details about this commit.</source>
          <target state="translated">この名前を &lt;code&gt;git show&lt;/code&gt; に付けて、このコミットの詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="164a7b582707458e7c29a45bdd3cb932a29b3ca1" translate="yes" xml:space="preserve">
          <source>We can list all the heads in this repository with &lt;a href=&quot;git-show-ref&quot;&gt;git-show-ref[1]&lt;/a&gt;:</source>
          <target state="translated">このリポジトリのすべてのヘッドを&lt;a href=&quot;git-show-ref&quot;&gt;git-show-ref [1]で&lt;/a&gt;一覧表示できます。</target>
        </trans-unit>
        <trans-unit id="3342879e047ae36a38db13969064b38d54ccc902" translate="yes" xml:space="preserve">
          <source>We divide Git into high level (&quot;porcelain&quot;) commands and low level (&quot;plumbing&quot;) commands.</source>
          <target state="translated">Gitを高レベル(「磁器」)のコマンドと低レベル(「配管」)のコマンドに分けています。</target>
        </trans-unit>
        <trans-unit id="011f9d254149abd4e25f111f5f8f2bc847e7e4cc" translate="yes" xml:space="preserve">
          <source>We explain how to do this in the following sections.</source>
          <target state="translated">では、その方法を説明します。</target>
        </trans-unit>
        <trans-unit id="4822ab43c46db1b5802e2f53899245649e4398bd" translate="yes" xml:space="preserve">
          <source>We formulate a set of &lt;code&gt;rules&lt;/code&gt; for quick reference, while the prose tries to motivate each of them. Do not always take them literally; you should value good reasons for your actions higher than manpages such as this one.</source>
          <target state="translated">簡単な参照のために一連の &lt;code&gt;rules&lt;/code&gt; を作成し、散文はそれらのそれぞれに動機を与えようとします。それらを常に文字通りに受け取らないでください。このようなマンページよりもアクションの正当な理由を高く評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="27af85d69b0e1da45afccff7b9c2331995331c55" translate="yes" xml:space="preserve">
          <source>We found that most commits on the graph may give quite a lot of information when they are tested. And the commits that will not on average give a lot of information are the one near the good and bad commits.</source>
          <target state="translated">私たちは、グラフ上のほとんどのコミットがテスト時にかなり多くの情報を提供することを発見しました。そして、平均して多くの情報を提供しないコミットは、良いコミットと悪いコミットの近くにあるコミットです。</target>
        </trans-unit>
        <trans-unit id="319c4fde5f53d3ebfff60d2ca81633ff5c5e7332" translate="yes" xml:space="preserve">
          <source>We have already seen &lt;a href=&quot;#Updating-a-repository-With-git-fetch&quot;&gt;how to keep remote-tracking branches up to date&lt;/a&gt; with &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;, and how to merge two branches. So you can merge in changes from the original repository&amp;rsquo;s master branch with:</source>
          <target state="translated">我々はすでに見てきた&lt;a href=&quot;#Updating-a-repository-With-git-fetch&quot;&gt;これまでのリモート追跡の枝を維持するためにどのよう&lt;/a&gt;に&lt;a href=&quot;git-fetch&quot;&gt;gitのフェッチ[1] &lt;/a&gt;、およびどのように二つのブランチをマージします。したがって、元のリポジトリのマスターブランチからの変更を次のようにマージできます。</target>
        </trans-unit>
        <trans-unit id="9313b2be3fe8f9ef5431fd57e740ed2c389d7c2c" translate="yes" xml:space="preserve">
          <source>We have already seen how branches work previously, with &quot;fun and work&quot; example using two branches. The idea is the same if there are more than two branches. Let&amp;rsquo;s say you started out from &quot;master&quot; head, and have some new code in the &quot;master&quot; branch, and two independent fixes in the &quot;commit-fix&quot; and &quot;diff-fix&quot; branches:</source>
          <target state="translated">2つのブランチを使用する &quot;fun and work&quot;の例を使用して、ブランチが以前にどのように機能するかについてはすでに見ました。ブランチが3つ以上ある場合も同じです。「マスター」の頭から始めて、「マスター」ブランチにいくつかの新しいコードがあり、「コミットコミット」および「差分フィックス」ブランチに2つの独立した修正があるとします。</target>
        </trans-unit>
        <trans-unit id="1170354586d8db2806a89632eb01397ff1d5b39a" translate="yes" xml:space="preserve">
          <source>We have seen several ways of naming commits already:</source>
          <target state="translated">コミットの命名方法はすでにいくつか見てきました。</target>
        </trans-unit>
        <trans-unit id="ea2d131015439270646c4d9deb94b3238eec4d65" translate="yes" xml:space="preserve">
          <source>We have seen that regressions are an important problem, and that &quot;git bisect&quot; has nice features that complement very well practices and other tools, especially test suites, that are generally used to fight regressions. But it might be needed to change some work-flows and (bad) habits to get the most out of it.</source>
          <target state="translated">リグレッションが重要な問題であること、そして &quot;git bisect&quot; には、リグレッションと戦うために一般的に使われているプラクティスや他のツール、特にテストスイートを非常によく補完する機能があることを見てきました。しかし、それを最大限に活用するためには、ワークフローや (悪い)習慣を変える必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="58d71328c844eab6bb246a8885f29a926cbaf29b" translate="yes" xml:space="preserve">
          <source>We have seen that test suites and git bisect are very powerful when used together. It can be even more powerful if you can combine them with other systems.</source>
          <target state="translated">テストスイートとgit bisectは併用すると非常に強力であることがわかりました。他のシステムと組み合わせることができれば、さらに強力になります。</target>
        </trans-unit>
        <trans-unit id="0dc1429b571e4014b12f464201faf90142f01343" translate="yes" xml:space="preserve">
          <source>We ignore all SVN properties except svn:executable. Any unhandled properties are logged to $GIT_DIR/svn/&amp;lt;refname&amp;gt;/unhandled.log</source>
          <target state="translated">svn：executableを除くすべてのSVNプロパティを無視します。未処理のプロパティはすべて$ GIT_DIR / svn / &amp;lt;refname&amp;gt; /unhandled.logに記録されます</target>
        </trans-unit>
        <trans-unit id="5e0e70c2a550cebe0f64341bc25aba4f82846837" translate="yes" xml:space="preserve">
          <source>We said this tutorial shows what plumbing does to help you cope with the porcelain that isn&amp;rsquo;t flushing, but we so far did not talk about how the merge really works. If you are following this tutorial the first time, I&amp;rsquo;d suggest to skip to &quot;Publishing your work&quot; section and come back here later.</source>
          <target state="translated">このチュートリアルでは、水を流していない磁器に対処するために配管が何をするかを説明しましたが、これまでのところ、マージが実際にどのように機能するかについては触れていません。このチュートリアルを初めて実行する場合は、「作品の公開」セクションにスキップして、後でここに戻ることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="038e0426e816e440e5c183b0ccfae9faca0c65b5" translate="yes" xml:space="preserve">
          <source>We saw above that &lt;code&gt;origin&lt;/code&gt; is just a shortcut to refer to the repository that you originally cloned from. This information is stored in Git configuration variables, which you can see using &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;:</source>
          <target state="translated">上記で見たように、 &lt;code&gt;origin&lt;/code&gt; は元のクローン元のリポジトリを参照するための単なるショートカットです。この情報はGit構成変数に格納され、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;を使用して確認できます。</target>
        </trans-unit>
        <trans-unit id="789eeb5f51968bf21d9746b92623ca08838d8bcb" translate="yes" xml:space="preserve">
          <source>We saw earlier that &quot;git bisect skip&quot; is now using a PRNG to try to avoid areas in the commit graph where commits are untestable. The problem is that sometimes the first bad commit will be in an untestable area.</source>
          <target state="translated">先ほど、&quot;git bisect skip&quot; が PRNG を使ってコミットグラフの中でテスト不可能な領域を避けようとしていることを見ました。問題は、最初の悪いコミットがテスト不可能な領域にあることがあるということです。</target>
        </trans-unit>
        <trans-unit id="e6f53989efc34bb4d6e54dcd09f15943b6a8a36c" translate="yes" xml:space="preserve">
          <source>We saw in &lt;a href=&quot;#conflict-resolution&quot;&gt;Getting conflict-resolution help during a merge&lt;/a&gt; that during a merge the index can store multiple versions of a single file (called &quot;stages&quot;). The third column in the &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files[1]&lt;/a&gt; output above is the stage number, and will take on values other than 0 for files with merge conflicts.</source>
          <target state="translated">私たちは、で見た&lt;a href=&quot;#conflict-resolution&quot;&gt;マージ中に競合解決ヘルプの&lt;/a&gt;マージ中にインデックスが（「ステージ」と呼ばれる）単一のファイルの複数のバージョンを保存することが可能となります。上記の&lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files [1]の&lt;/a&gt;出力の3番目の列はステージ番号であり、マージの競合があるファイルに対して0以外の値をとります。</target>
        </trans-unit>
        <trans-unit id="d5d682276e6a6d081a241de022b4ded4aef9c418" translate="yes" xml:space="preserve">
          <source>We saw in &lt;a href=&quot;#fixing-a-mistake-by-rewriting-history&quot;&gt;Fixing a mistake by rewriting history&lt;/a&gt; that you can replace the most recent commit using</source>
          <target state="translated">を使用して最新のコミットを置き換えることができるという&lt;a href=&quot;#fixing-a-mistake-by-rewriting-history&quot;&gt;履歴&lt;/a&gt;を書き換えることによる間違いの修正で見た</target>
        </trans-unit>
        <trans-unit id="aafdc07c8e0d9b297fcdd505608f380ef754ed45" translate="yes" xml:space="preserve">
          <source>We saw in part one of the tutorial that commits have names like this. It turns out that every object in the Git history is stored under a 40-digit hex name. That name is the SHA-1 hash of the object&amp;rsquo;s contents; among other things, this ensures that Git will never store the same data twice (since identical data is given an identical SHA-1 name), and that the contents of a Git object will never change (since that would change the object&amp;rsquo;s name as well). The 7 char hex strings here are simply the abbreviation of such 40 character long strings. Abbreviations can be used everywhere where the 40 character strings can be used, so long as they are unambiguous.</source>
          <target state="translated">チュートリアルの一部で、コミットに次のような名前が付いているのを見ました。 Git履歴のすべてのオブジェクトは、40桁の16進数の名前で保存されていることがわかります。その名前は、オブジェクトの内容のSHA-1ハッシュです。特に、これにより、Gitが同じデータを2回保存することはなく（同じデータには同じSHA-1名が付けられるため）、Gitオブジェクトの内容は決して変更されません（オブジェクトの名前も変更されるため） ）。ここで7文字の16進文字列は、そのような40文字の長い文字列の略語です。省略形は、40文字の文字列が使用できる場所であればどこでも使用できますが、あいまいでない場合に限ります。</target>
        </trans-unit>
        <trans-unit id="09c046487d09b436218fe11aa8c1087251442281" translate="yes" xml:space="preserve">
          <source>We separate the porcelain commands into the main commands and some ancillary user utilities.</source>
          <target state="translated">磁器のコマンドをメインコマンドと補助的なユーザーユーティリティに分けています。</target>
        </trans-unit>
        <trans-unit id="f2e875357a5ce85901234308b841a3138ebd851b" translate="yes" xml:space="preserve">
          <source>We should point out that &quot;habitually&quot; (regularly for no real reason) merging an integration branch into your topics &amp;mdash; and by extension, merging anything upstream into anything downstream on a regular basis &amp;mdash; is frowned upon:</source>
          <target state="translated">統合ブランチをトピックに（通常は本当の理由ではありませんが）マージすること、さらにはアップストリームにあるものとダウンストリームにあるものを定期的にマージすることは、不快なことです。</target>
        </trans-unit>
        <trans-unit id="3b0c2056ade966758c96efbd333ad03c787ca3ac" translate="yes" xml:space="preserve">
          <source>We start with one specialized tool that is useful for finding the commit that introduced a bug into a project.</source>
          <target state="translated">まずは、プロジェクトにバグを導入したコミットを見つけるのに便利な専用ツールから始めます。</target>
        </trans-unit>
        <trans-unit id="3bb7fbe62fd9b3fa1a7f67f6a431251fe7b02079" translate="yes" xml:space="preserve">
          <source>We start with the most important, the &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt; and the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">最も重要な&lt;a href=&quot;#def_object_database&quot;&gt;オブジェクトデータベース&lt;/a&gt;と&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;から始めます。</target>
        </trans-unit>
        <trans-unit id="fa1acdd625946113b786a5983b045431892f2e96" translate="yes" xml:space="preserve">
          <source>We supposed in the previous examples that the &quot;good&quot; commits were ancestors of the &quot;bad&quot; commit. But this is not a requirement of &quot;git bisect&quot;.</source>
          <target state="translated">これまでの例では、「良い」コミットは「悪い」コミットの先祖であると考えていました。しかし、これは &quot;git bisect&quot; の要件ではありません。</target>
        </trans-unit>
        <trans-unit id="09e675bfb62532c536d372645ebddf19b07c5684" translate="yes" xml:space="preserve">
          <source>We want to make &lt;code&gt;topic&lt;/code&gt; forked from branch &lt;code&gt;master&lt;/code&gt;; for example, because the functionality on which &lt;code&gt;topic&lt;/code&gt; depends was merged into the more stable &lt;code&gt;master&lt;/code&gt; branch. We want our tree to look like this:</source>
          <target state="translated">ブランチ &lt;code&gt;master&lt;/code&gt; から分岐した &lt;code&gt;topic&lt;/code&gt; を作成します。たとえば、 &lt;code&gt;topic&lt;/code&gt; 依存する機能がより安定した &lt;code&gt;master&lt;/code&gt; ブランチにマージされたためです。ツリーを次のようにしたいとします。</target>
        </trans-unit>
        <trans-unit id="0fa006b18282abd83f954d3423dfd83f70f68c0d" translate="yes" xml:space="preserve">
          <source>We will introduce some tools that can help you do this, explain how to use them, and then explain some of the problems that can arise because you are rewriting history.</source>
          <target state="translated">その際に役立つツールをいくつか紹介し、その使い方を説明した上で、歴史を書き換えているからこそ起こりうる問題点を解説していきます。</target>
        </trans-unit>
        <trans-unit id="e34d86d215639adac5ecaa74d7f70d803a2ef9de" translate="yes" xml:space="preserve">
          <source>We will sometimes represent Git history using diagrams like the one below. Commits are shown as &quot;o&quot;, and the links between them with lines drawn with - / and \. Time goes left to right:</source>
          <target state="translated">Git の履歴を、以下のような図を使って表現することがあります。コミットを「o」で表し、その間のリンクを「/」と「\」で線で表しています。時間は左から右に進みます。</target>
        </trans-unit>
        <trans-unit id="ab9fd84ced67b4e6059fb12091ba4144199c5397" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll assume that the problem is a single missing or corrupted blob, which is sometimes a solvable problem. (Recovering missing trees and especially commits is &lt;strong&gt;much&lt;/strong&gt; harder).</source>
          <target state="translated">問題は単一の欠落または破損したblobであると想定します。これは解決可能な問題になる場合があります。（欠落しているツリー、特にコミットの回復は&lt;strong&gt;はるかに&lt;/strong&gt;困難です）。</target>
        </trans-unit>
        <trans-unit id="2aa7b1ec194976812ce4b6b3f7e0ba34eba549a8" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll keep this simple and stupid, so we&amp;rsquo;ll start off with populating a few trivial files just to get a feel for it.</source>
          <target state="translated">私たちはこれをシンプルで愚かなままにしておくので、まずはそれを感じさせるために、いくつかの簡単なファイルを作成するところから始めます。</target>
        </trans-unit>
        <trans-unit id="2d4db37414a68811cd95f44af4830929ada62273" translate="yes" xml:space="preserve">
          <source>Webserver configuration</source>
          <target state="translated">ウェブサーバの設定</target>
        </trans-unit>
        <trans-unit id="c0f36d74c982d11ffbdfaa17b6ab39308ec52a2f" translate="yes" xml:space="preserve">
          <source>Webserver configuration with multiple projects' root</source>
          <target state="translated">複数のプロジェクトのルートを持つWebサーバの設定</target>
        </trans-unit>
        <trans-unit id="ef6d4f2b2672206d0b50ce512c5b9cc1369fe95f" translate="yes" xml:space="preserve">
          <source>What an alias file in each format looks like can be found in the documentation of the email program of the same name. The differences and limitations from the standard formats are described below:</source>
          <target state="translated">各フォーマットのエイリアスファイルがどのように見えるかは、同名のメールプログラムのドキュメントを参照してください。標準フォーマットとの違いや制限事項を以下に説明します。</target>
        </trans-unit>
        <trans-unit id="fa6325f935566c907b8b84855ddf6b390a1827e3" translate="yes" xml:space="preserve">
          <source>What are the 7 digits of hex that Git responded to the commit with?</source>
          <target state="translated">Git がコミットに反応した 7 桁の 16 進数は?</target>
        </trans-unit>
        <trans-unit id="1fd975aafde95925b137d84d61ec01ca393e6fe1" translate="yes" xml:space="preserve">
          <source>What does &lt;code&gt;http.postBuffer&lt;/code&gt; really do?</source>
          <target state="translated">&lt;code&gt;http.postBuffer&lt;/code&gt; は実際に何をしますか？</target>
        </trans-unit>
        <trans-unit id="5fb651419665147da76edfca56099f33ccd0e645" translate="yes" xml:space="preserve">
          <source>What does this mean?</source>
          <target state="translated">これは何を意味するのか?</target>
        </trans-unit>
        <trans-unit id="b77fdbd3385bc488b50aa891b5b4c124304a8f69" translate="yes" xml:space="preserve">
          <source>What is interesting too is that end users that are reporting bugs (or QA people that reproduced a bug) have access to the environment where the bug happens. So they can often more easily reproduce a regression. And if they can bisect, then more information will be extracted from the environment where the bug happens, which means that it will be easier to understand and then fix the bug.</source>
          <target state="translated">また、興味深いのは、バグを報告しているエンドユーザー(またはバグを再現したQAの人たち)は、バグが発生した環境にアクセスできるということです。そのため、彼らはより簡単にリグレッションを再現することができます。また、二分することができれば、バグが発生している環境からより多くの情報が抽出され、バグを理解して修正することが容易になります。</target>
        </trans-unit>
        <trans-unit id="90fc9e2a4fe1cfe396d558392d2a0a41db650977" translate="yes" xml:space="preserve">
          <source>What kinds of problems can occur when merging long-lived branches with squash merges?</source>
          <target state="translated">長命枝とスカッシュのマージでは、どのような問題が発生するのでしょうか?</target>
        </trans-unit>
        <trans-unit id="549056214cd4b23720c4559829b5b36cc5cf6d0c" translate="yes" xml:space="preserve">
          <source>What next?</source>
          <target state="translated">次は何をするの?</target>
        </trans-unit>
        <trans-unit id="fe77441e9cc191fb4a5181d6f98e51e7bf6ce4ab" translate="yes" xml:space="preserve">
          <source>What people don&amp;rsquo;t get is that this is a situation where the &quot;end node principle&quot; applies. When you have limited resources (here: developers) you don&amp;rsquo;t push the bulk of the burden upon them. Instead you push things out to the resource you have a lot of, the end nodes (here: users), so that the situation actually scales.</source>
          <target state="translated">人々が得ていないのは、これが「エンドノードの原則」が適用される状況であるということです。リソースが限られている場合（ここでは：開発者）、リソースに大きな負担をかけません。その代わりに、多くのリソースであるエンドノード（ここではユーザー）に物事をプッシュし、状況を実際に拡大できるようにします。</target>
        </trans-unit>
        <trans-unit id="4adfddfda3ea247cced4c30354a360a26072f719" translate="yes" xml:space="preserve">
          <source>What should I put in &lt;code&gt;user.name&lt;/code&gt;?</source>
          <target state="translated">&lt;code&gt;user.name&lt;/code&gt; には何を入力すればよいですか？</target>
        </trans-unit>
        <trans-unit id="e4950cd435094a3f200db11a5c1b540d80d04769" translate="yes" xml:space="preserve">
          <source>What should you do when you tag a wrong commit and you would want to re-tag?</source>
          <target state="translated">間違ったコミットをタグ付けしてしまい、再タグ付けしたい場合はどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="049920ec0574fb80b08ccee259e5814b007cd44c" translate="yes" xml:space="preserve">
          <source>What the -p option produces is slightly different from the traditional diff format:</source>
          <target state="translated">p オプションが生成するものは、従来の diff 形式とは少し異なります。</target>
        </trans-unit>
        <trans-unit id="e27b60d4391d6c41de480e30a2d0df50a6723ae8" translate="yes" xml:space="preserve">
          <source>What to do when a push fails</source>
          <target state="translated">プッシュが失敗したときの対処法</target>
        </trans-unit>
        <trans-unit id="42a1dbf4390cedcf2f183fba444335bae8d5ae11" translate="yes" xml:space="preserve">
          <source>What you chose are then highlighted with &lt;code&gt;*&lt;/code&gt;, like this:</source>
          <target state="translated">次のように、選択したものが &lt;code&gt;*&lt;/code&gt; で強調表示されます。</target>
        </trans-unit>
        <trans-unit id="3ef265c44655b5cf934f7913a368fdf3c53af8a9" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the recommended way to store files in Git?</source>
          <target state="translated">Gitにファイルを保存するための推奨される方法は何ですか？</target>
        </trans-unit>
        <trans-unit id="e11a716b5dc9d27d9966b39b2c63b32b4c67e627" translate="yes" xml:space="preserve">
          <source>When &amp;lt;rev&amp;gt; is not specified, the command annotates the changes starting backwards from the working tree copy. This flag makes the command pretend as if the working tree copy has the contents of the named file (specify &lt;code&gt;-&lt;/code&gt; to make the command read from the standard input).</source>
          <target state="translated">&amp;lt;rev&amp;gt;が指定されていない場合、コマンドは作業ツリーのコピーから逆方向に始まる変更に注釈を付けます。このフラグは、作業ツリーのコピーに指定されたファイルの内容があるかのようにコマンドを偽装させます（ &lt;code&gt;-&lt;/code&gt; を指定すると、コマンドは標準入力から読み取られます）。</target>
        </trans-unit>
        <trans-unit id="df8212af8d2323e7260f5fa3c4bc0bbc714643ff" translate="yes" xml:space="preserve">
          <source>When --fork-point is active, &lt;code&gt;fork_point&lt;/code&gt; will be used instead of &amp;lt;upstream&amp;gt; to calculate the set of commits to rebase, where &lt;code&gt;fork_point&lt;/code&gt; is the result of &lt;code&gt;git merge-base --fork-point &amp;lt;upstream&amp;gt;
&amp;lt;branch&amp;gt;&lt;/code&gt; command (see &lt;a href=&quot;git-merge-base&quot;&gt;git-merge-base[1]&lt;/a&gt;). If &lt;code&gt;fork_point&lt;/code&gt; ends up being empty, the &amp;lt;upstream&amp;gt; will be used as a fallback.</source>
          <target state="translated">--fork-pointがアクティブな場合、リベースするコミットのセットを計算するために、&amp;lt;upstream&amp;gt;の代わりに &lt;code&gt;fork_point&lt;/code&gt; が使用されます &lt;code&gt;fork_point&lt;/code&gt; は &lt;code&gt;git merge-base --fork-point &amp;lt;upstream&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt; コマンドの結果です（&lt;a href=&quot;git-merge-base&quot;&gt;git-merge-base [1]を&lt;/a&gt;参照してください）。もし &lt;code&gt;fork_point&lt;/code&gt; 空になってしまう、&amp;lt;上流&amp;gt;フォールバックとして使用されます。</target>
        </trans-unit>
        <trans-unit id="0b903c4e9a3738f389f65549fe23dcd21fd8909d" translate="yes" xml:space="preserve">
          <source>When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If &lt;code&gt;&amp;lt;barrier&amp;gt;&lt;/code&gt; is specified, it is the string that will be shown instead of the default one.</source>
          <target state="translated">--graphを使用しない場合、すべての履歴ブランチがフラット化されるため、2つの連続したコミットが線形ブランチに属していないことがわかりにくくなる可能性があります。その場合、このオプションはそれらの間に障壁を置きます。 &lt;code&gt;&amp;lt;barrier&amp;gt;&lt;/code&gt; が指定されている場合、デフォルトの文字列の代わりに表示される文字列です。</target>
        </trans-unit>
        <trans-unit id="24ff3c267435a7dcecd3166ed52f8210a7c7f0de" translate="yes" xml:space="preserve">
          <source>When --stdout is specified then progress report is displayed during the object count and compression phases but inhibited during the write-out phase. The reason is that in some cases the output stream is directly linked to another command which may wish to display progress status of its own as it processes incoming pack data. This flag is like --progress except that it forces progress report for the write-out phase as well even if --stdout is used.</source>
          <target state="translated">stdout が指定された場合、オブジェクトカウントと圧縮フェーズでは進捗状況のレポートが表示されますが、書き込みフェーズでは表示されません。これは、出力ストリームが別のコマンドに直接リンクされている場合があり、そのコマンドが入力されたパックデータを処理している間は、そのコマンド自身の進捗状況を表示したい場合があるためです。このフラグは--progressと同様で、--stdoutが使用されている場合でも、書き込みフェーズでも進捗状況の報告を強制することを除いては--progressと同じです。</target>
        </trans-unit>
        <trans-unit id="d3e80ca53bd7d57db503ac84208eff0dbe6d901f" translate="yes" xml:space="preserve">
          <source>When -k is not in effect, all leading strings bracketed with &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; pairs are stripped. This option limits the stripping to only the pairs whose bracketed string contains the word &quot;PATCH&quot;.</source>
          <target state="translated">-kが有効でない場合は、 &lt;code&gt;[&lt;/code&gt; と &lt;code&gt;]&lt;/code&gt; のペアで囲まれたすべての先行文字列が削除されます。このオプションは、ストリッピングを、括弧で囲まれた文字列に「PATCH」という単語が含まれるペアのみに制限します。</target>
        </trans-unit>
        <trans-unit id="882475218cb0a9fc17e76a3d4266386adec5dd71" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;&quot;$@&quot;&lt;/code&gt; is &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--help&lt;/code&gt; in the above example, the following usage text would be shown:</source>
          <target state="translated">ときに &lt;code&gt;&quot;$@&quot;&lt;/code&gt; で &lt;code&gt;-h&lt;/code&gt; または &lt;code&gt;--help&lt;/code&gt; 上記の例では、以下の使用テキストが表示されます：</target>
        </trans-unit>
        <trans-unit id="d78a0cbb0812363470a0c64a4a94d40dd1da90bb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--batch-all-objects&lt;/code&gt; is in use, visit objects in an order which may be more efficient for accessing the object contents than hash order. The exact details of the order are unspecified, but if you do not require a specific order, this should generally result in faster output, especially with &lt;code&gt;--batch&lt;/code&gt;. Note that &lt;code&gt;cat-file&lt;/code&gt; will still show each object only once, even if it is stored multiple times in the repository.</source>
          <target state="translated">とき &lt;code&gt;--batch-all-objects&lt;/code&gt; 使用されている、訪問はハッシュ順序よりもオブジェクトの内容にアクセスするためのより効率的かもしれために、オブジェクト。順序の正確な詳細は指定されていませんが、特定の順序を必要としない場合は、特に &lt;code&gt;--batch&lt;/code&gt; を使用すると、一般的に出力が速くなります。 &lt;code&gt;cat-file&lt;/code&gt; は、リポジトリに複数回保存されている場合でも、各オブジェクトを1回だけ表示することに注意してください。</target>
        </trans-unit>
        <trans-unit id="95919047a579b82415a0ddd6c6f601bfbb7dc80f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--check&lt;/code&gt; is in effect, or when applying the patch (which is the default when none of the options that disables it is in effect), make sure the patch is applicable to what the current index file records. If the file to be patched in the working tree is not up to date, it is flagged as an error. This flag also causes the index file to be updated.</source>
          <target state="translated">とき &lt;code&gt;--check&lt;/code&gt; が有効になっている、または（オプションのいずれも無効、それが有効でないことをするときのデフォルトです）パッチを適用する際に、必ずパッチはどのような現在のインデックスファイル・レコードに適用されます。作業ツリーでパッチを適用するファイルが最新でない場合、エラーとしてフラグが立てられます。このフラグにより​​、インデックスファイルも更新されます。</target>
        </trans-unit>
        <trans-unit id="526cf7ed548b3415806841ff6b0e065a944a8f5e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--compose&lt;/code&gt; is used, git send-email will use the From, Subject, and In-Reply-To headers specified in the message. If the body of the message (what you type after the headers and a blank line) only contains blank (or Git: prefixed) lines, the summary won&amp;rsquo;t be sent, but From, Subject, and In-Reply-To headers will be used unless they are removed.</source>
          <target state="translated">とき &lt;code&gt;--compose&lt;/code&gt; が使用され、gitのセンドメールから、件名、およびIn-返信先のメッセージで指定されたヘッダーを使用します。メッセージの本文（ヘッダーと空白行の後に入力したもの）に空白（またはGit：接頭辞付き）の行しか含まれていない場合、要約は送信されませんが、From、Subject、およびIn-Reply-Toヘッダーは送信されます削除されない限り使用できます。</target>
        </trans-unit>
        <trans-unit id="46dc43993fdd7156fca21e87a205fc0f333f2d9a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--cone&lt;/code&gt; is provided, the &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; setting is also set, allowing for better performance with a limited set of patterns (see &lt;code&gt;CONE PATTERN SET&lt;/code&gt; below).</source>
          <target state="translated">場合 &lt;code&gt;--cone&lt;/code&gt; が設けられ、 &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; の設定も（参照パターンの限定されたセットとのより良好な性能を可能にする、設定された &lt;code&gt;CONE PATTERN SET&lt;/code&gt; 下を）。</target>
        </trans-unit>
        <trans-unit id="ac6d168ca5e25a70ab78d5a850025a2ad07d998b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--exclude&lt;/code&gt; and &lt;code&gt;--include&lt;/code&gt; patterns are used, they are examined in the order they appear on the command line, and the first match determines if a patch to each path is used. A patch to a path that does not match any include/exclude pattern is used by default if there is no include pattern on the command line, and ignored if there is any include pattern.</source>
          <target state="translated">場合 &lt;code&gt;--exclude&lt;/code&gt; と &lt;code&gt;--include&lt;/code&gt; パターンが使用され、それらは、コマンドライン上に表示され、各パスのパッチが使用される場合、最初の一致が判断するために検査されます。include / excludeパターンに一致しないパスへのパッチは、コマンドラインにincludeパターンがない場合はデフォルトで使用され、includeパターンがある場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="febfb7b902fc970c3396f3068a5c66e59c7ec8ea" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--notes&lt;/code&gt; is in effect, the message from the notes is matched as if it were part of the log message.</source>
          <target state="translated">&lt;code&gt;--notes&lt;/code&gt; が有効な場合、ノートからのメッセージは、ログメッセージの一部であるかのように照合されます。</target>
        </trans-unit>
        <trans-unit id="b84c74a91c715b3bf1b4e927529a07a15aed9721" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--numstat&lt;/code&gt; has been given, do not munge pathnames, but use a NUL-terminated machine-readable format.</source>
          <target state="translated">&lt;code&gt;--numstat&lt;/code&gt; が指定されている場合は、パス名を変更せず、NULで終了する機械可読形式を使用してください。</target>
        </trans-unit>
        <trans-unit id="d371e700585c518084c33d84fef0af43b13c3439" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--raw&lt;/code&gt;, &lt;code&gt;--numstat&lt;/code&gt;, &lt;code&gt;--name-only&lt;/code&gt; or &lt;code&gt;--name-status&lt;/code&gt; has been given, do not munge pathnames and use NULs as output field terminators.</source>
          <target state="translated">とき &lt;code&gt;--raw&lt;/code&gt; 、 &lt;code&gt;--numstat&lt;/code&gt; 、 &lt;code&gt;--name-only&lt;/code&gt; または &lt;code&gt;--name-status&lt;/code&gt; 与えられている、出力フィールドターミネータとしてのmungeないパス名と使用NULsを行います。</target>
        </trans-unit>
        <trans-unit id="e163d548a1a886a531d60736c2ba3e851388a10a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--root&lt;/code&gt; is specified the initial commit will be shown as a big creation event. This is equivalent to a diff against the NULL tree.</source>
          <target state="translated">とき &lt;code&gt;--root&lt;/code&gt; が指定された初期には、コミットビッグ作成イベントとして表示されます。これは、NULLツリーに対する差分と同等です。</target>
        </trans-unit>
        <trans-unit id="8183759ad974b12070a46362dbaa27565534e645" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--show-pulls&lt;/code&gt; is paired with &lt;code&gt;--simplify-merges&lt;/code&gt;, the graph includes all of the necessary information:</source>
          <target state="translated">場合 &lt;code&gt;--show-pulls&lt;/code&gt; と対にされる &lt;code&gt;--simplify-merges&lt;/code&gt; 、グラフは、必要な情報のすべてを含みます。</target>
        </trans-unit>
        <trans-unit id="5b88ba2b22685842fbd9b8b75fb2959da8ea9e8b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--stdin&lt;/code&gt; is specified, the command does not take &amp;lt;tree-ish&amp;gt; arguments from the command line. Instead, it reads lines containing either two &amp;lt;tree&amp;gt;, one &amp;lt;commit&amp;gt;, or a list of &amp;lt;commit&amp;gt; from its standard input. (Use a single space as separator.)</source>
          <target state="translated">とき &lt;code&gt;--stdin&lt;/code&gt; を指定され、コマンドは、コマンドラインから&amp;lt;木っぽい&amp;gt;引数を取りません。代わりに、2つの&amp;lt;tree&amp;gt;、1つの&amp;lt;commit&amp;gt;、または&amp;lt;commit&amp;gt;のリストを含む行を標準入力から読み取ります。（区切り文字として単一のスペースを使用します。）</target>
        </trans-unit>
        <trans-unit id="c23ac888d8fe422c1532e2aed10782043e7c6859" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--temp&lt;/code&gt; is used (or implied by &lt;code&gt;--stage=all&lt;/code&gt;) &lt;code&gt;git checkout-index&lt;/code&gt; will create a temporary file for each index entry being checked out. The index will not be updated with stat information. These options can be useful if the caller needs all stages of all unmerged entries so that the unmerged files can be processed by an external merge tool.</source>
          <target state="translated">とき &lt;code&gt;--temp&lt;/code&gt; が使用されている（または黙示による &lt;code&gt;--stage=all&lt;/code&gt; ） &lt;code&gt;git checkout-index&lt;/code&gt; の各インデックスエントリビーイングのための一時ファイルを作成しますが、チェックアウト。インデックスは統計情報で更新されません。これらのオプションは、マージされていないファイルを外部のマージツールで処理できるように、呼び出し元がすべてのマージされていないエントリのすべてのステージを必要とする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5c97ac9560dda79ead627bde39274f79b6e5dd8a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;-G&lt;/code&gt; are used without &lt;code&gt;--pickaxe-all&lt;/code&gt;, only filepairs that match their respective criterion are kept in the output. When &lt;code&gt;--pickaxe-all&lt;/code&gt; is used, if even one filepair matches their respective criterion in a changeset, the entire changeset is kept. This behavior is designed to make reviewing changes in the context of the whole changeset easier.</source>
          <target state="translated">とき &lt;code&gt;-S&lt;/code&gt; または &lt;code&gt;-G&lt;/code&gt; をせずに使用されている &lt;code&gt;--pickaxe-all&lt;/code&gt; 、それぞれの基準に一致のみfilepairsは出力に保存されています。とき &lt;code&gt;--pickaxe-all&lt;/code&gt; 使用されていても1 filepairがチェンジで、それぞれの基準に一致した場合、全体のチェンジが保たれています。この動作は、変更セット全体のコンテキストで変更を簡単に確認できるように設計されています。</target>
        </trans-unit>
        <trans-unit id="b7230470efbcbdb8b4c76cdcdcf3272fde68030f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-S&lt;/code&gt; or &lt;code&gt;-G&lt;/code&gt; finds a change, show all the changes in that changeset, not just the files that contain the change in &amp;lt;string&amp;gt;.</source>
          <target state="translated">とき &lt;code&gt;-S&lt;/code&gt; または &lt;code&gt;-G&lt;/code&gt; が変更を見つけ、そのチェンジ内のすべての変更、&amp;lt;文字列&amp;gt;の変化が含まれていないファイルだけを表示します。</target>
        </trans-unit>
        <trans-unit id="b52ce403c26e2631158c50ee6bd3c17065ed82dc" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-u&lt;/code&gt; option is not used, untracked files and directories are shown (i.e. the same as specifying &lt;code&gt;normal&lt;/code&gt;), to help you avoid forgetting to add newly created files. Because it takes extra work to find untracked files in the filesystem, this mode may take some time in a large working tree. Consider enabling untracked cache and split index if supported (see &lt;code&gt;git update-index --untracked-cache&lt;/code&gt; and &lt;code&gt;git update-index
--split-index&lt;/code&gt;), Otherwise you can use &lt;code&gt;no&lt;/code&gt; to have &lt;code&gt;git status&lt;/code&gt; return more quickly without showing untracked files.</source>
          <target state="translated">ときに &lt;code&gt;-u&lt;/code&gt; オプションが使用されていない、人跡未踏のファイルとディレクトリが（指定するのと同じつまり、表示され &lt;code&gt;normal&lt;/code&gt; 、あなたが新たに作成されたファイルを追加し忘れ避けるために、）。ファイルシステムで追跡されていないファイルを見つけるには追加の作業が必要になるため、このモードでは、大きな作業ツリーでは時間がかかる場合があります。サポートされている場合は、追跡されていないキャッシュと分割インデックスを有効にすることを検討してください（ &lt;code&gt;git update-index --untracked-cache&lt;/code&gt; および &lt;code&gt;git update-index --split-index&lt;/code&gt; 参照）。そうでない場合は、 &lt;code&gt;no&lt;/code&gt; を使用して、追跡されていないファイルを表示せずに &lt;code&gt;git status&lt;/code&gt; より迅速に返すことができます。</target>
        </trans-unit>
        <trans-unit id="97c7c816e31485397947c4cd78f79e742f80ec39" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;-z&lt;/code&gt; output option is in effect, the output is formatted this way:</source>
          <target state="translated">とき &lt;code&gt;-z&lt;/code&gt; 出力オプションが有効である、出力はこのようにフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="2bf71954fc8fac90c9030e3b9b1232971580d22a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;FETCH_HEAD&lt;/code&gt; (and no other commit) is specified, the branches recorded in the &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; file by the previous invocation of &lt;code&gt;git fetch&lt;/code&gt; for merging are merged to the current branch.</source>
          <target state="translated">とき &lt;code&gt;FETCH_HEAD&lt;/code&gt; （および他のコミットしない）が指定され、中に記録された枝 &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; の以前の呼び出しによって、ファイル &lt;code&gt;git fetch&lt;/code&gt; 現在のブランチにマージされているマージします。</target>
        </trans-unit>
        <trans-unit id="30aaf2e9dd06a0335c5f1cb4c0791345a6730170" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; is enabled, the input list is considered a list of directories instead of sparse-checkout patterns. The command writes patterns to the sparse-checkout file to include all files contained in those directories (recursively) as well as files that are siblings of ancestor directories. The input format matches the output of &lt;code&gt;git ls-tree --name-only&lt;/code&gt;. This includes interpreting pathnames that begin with a double quote (&quot;) as C-style quoted strings.</source>
          <target state="translated">とき &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; が有効になっている、入力リストではなく、スパース・チェックアウト・パターンのディレクトリのリストと考えられています。このコマンドは、スパースチェックアウトファイルにパターンを書き込み、それらのディレクトリに含まれるすべてのファイル（再帰的に）と、祖先ディレクトリの兄弟であるファイルを含めます。入力形式は、 &lt;code&gt;git ls-tree --name-only&lt;/code&gt; の出力と一致します。これには、二重引用符（ &quot;）で始まるパス名をCスタイルの引用符で囲まれた文字列として解釈することが含まれます。</target>
        </trans-unit>
        <trans-unit id="a79eb2995cdbf5e2d0a3c4b4e62d970b5798ea30" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is enabled, the config file &lt;code&gt;.git/worktrees/&amp;lt;id&amp;gt;/config.worktree&lt;/code&gt; is read after &lt;code&gt;.git/config&lt;/code&gt; is.</source>
          <target state="translated">とき &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; が有効になっている、設定ファイル &lt;code&gt;.git/worktrees/&amp;lt;id&amp;gt;/config.worktree&lt;/code&gt; 後に読み込まれる &lt;code&gt;.git/config&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="093107f57324ea8ddf834562dc5da735634ce1c2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fetch.fsckObjects&lt;/code&gt; or &lt;code&gt;receive.fsckObjects&lt;/code&gt; are not set, the value of this variable is used instead. Defaults to false.</source>
          <target state="translated">場合 &lt;code&gt;fetch.fsckObjects&lt;/code&gt; 又は &lt;code&gt;receive.fsckObjects&lt;/code&gt; が設定されていない、この変数の値が代わりに使用されます。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="f0f4e4ab298d72d3ce878991ffe1cd2532ffab74" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fetch.unpackLimit&lt;/code&gt; or &lt;code&gt;receive.unpackLimit&lt;/code&gt; are not set, the value of this variable is used instead. The default value is 100.</source>
          <target state="translated">場合 &lt;code&gt;fetch.unpackLimit&lt;/code&gt; 又は &lt;code&gt;receive.unpackLimit&lt;/code&gt; が設定されていない、この変数の値が代わりに使用されます。デフォルト値は100です。</target>
        </trans-unit>
        <trans-unit id="0f43e1a31ad9e45784cdafec68b8141e1a628402" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; is set, errors can be switched to warnings and vice versa by configuring the &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; setting where the &lt;code&gt;&amp;lt;msg-id&amp;gt;&lt;/code&gt; is the fsck message ID and the value is one of &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt;. For convenience, fsck prefixes the error/warning with the message ID, e.g. &quot;missingEmail: invalid author/committer line - missing email&quot; means that setting &lt;code&gt;fsck.missingEmail = ignore&lt;/code&gt; will hide that issue.</source>
          <target state="translated">とき &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; 設定され、エラーがその逆の設定によって警告とバイスに切り替えることができ &lt;code&gt;fsck.&amp;lt;msg-id&amp;gt;&lt;/code&gt; 設定する場合 &lt;code&gt;&amp;lt;msg-id&amp;gt;&lt;/code&gt; のfsckメッセージIDであり、値の一つである &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;warn&lt;/code&gt; または &lt;code&gt;ignore&lt;/code&gt; ます。便宜上、fsckはエラー/警告の前にメッセージIDを付けます。たとえば、「missingEmail：無効な作成者/コミッター行-メールがありません」は、 &lt;code&gt;fsck.missingEmail = ignore&lt;/code&gt; を設定するとその問題が非表示になることを意味します。</target>
        </trans-unit>
        <trans-unit id="ce3f108ee8253a42ecb067bc1a011bcbcd3ad290" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git apply&lt;/code&gt; is used as a &quot;better GNU patch&quot;, the user can pass the &lt;code&gt;--unsafe-paths&lt;/code&gt; option to override this safety check. This option has no effect when &lt;code&gt;--index&lt;/code&gt; or &lt;code&gt;--cached&lt;/code&gt; is in use.</source>
          <target state="translated">ときに &lt;code&gt;git apply&lt;/code&gt; 、「より良いGNUパッチ」として使用され、ユーザーが渡すことができ &lt;code&gt;--unsafe-paths&lt;/code&gt; この安全チェックを無効にするオプションを選択します。 &lt;code&gt;--index&lt;/code&gt; または &lt;code&gt;--cached&lt;/code&gt; が使用されている場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="dea5ce8f581717a21d1ee89e4952655599f11488" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git difftool&lt;/code&gt; is invoked with this tool (either through the &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--tool&lt;/code&gt; option or the &lt;code&gt;diff.tool&lt;/code&gt; configuration variable) the configured command line will be invoked with the following variables available: &lt;code&gt;$LOCAL&lt;/code&gt; is set to the name of the temporary file containing the contents of the diff pre-image and &lt;code&gt;$REMOTE&lt;/code&gt; is set to the name of the temporary file containing the contents of the diff post-image. &lt;code&gt;$MERGED&lt;/code&gt; is the name of the file which is being compared. &lt;code&gt;$BASE&lt;/code&gt; is provided for compatibility with custom merge tool commands and has the same value as &lt;code&gt;$MERGED&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;git difftool&lt;/code&gt; 、このツール（のいずれかを通じてで呼び出され &lt;code&gt;-t&lt;/code&gt; または &lt;code&gt;--tool&lt;/code&gt; オプションまたは &lt;code&gt;diff.tool&lt;/code&gt; の設定変数）設定され、コマンドラインは、使用可能な以下の変数を使用して呼び出されます： &lt;code&gt;$LOCAL&lt;/code&gt; 、一時の名前に設定されています差分プリイメージのコンテンツを含むファイルと &lt;code&gt;$REMOTE&lt;/code&gt; は、差分ポストイメージのコンテンツを含む一時ファイルの名前に設定されます。 &lt;code&gt;$MERGED&lt;/code&gt; は、比較されているファイルの名前です。 &lt;code&gt;$BASE&lt;/code&gt; は、カスタムマージツールコマンドとの互換性のために提供されており、 &lt;code&gt;$MERGED&lt;/code&gt; と同じ値を持っています。</target>
        </trans-unit>
        <trans-unit id="02bc7953c8eb819402a97fdb05db86103d3e94f0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is run with explicit branches and/or tags to fetch on the command line, e.g. &lt;code&gt;git fetch origin master&lt;/code&gt;, the &amp;lt;refspec&amp;gt;s given on the command line determine what are to be fetched (e.g. &lt;code&gt;master&lt;/code&gt; in the example, which is a short-hand for &lt;code&gt;master:&lt;/code&gt;, which in turn means &quot;fetch the &lt;code&gt;master&lt;/code&gt; branch but I do not explicitly say what remote-tracking branch to update with it from the command line&quot;), and the example command will fetch &lt;code&gt;only&lt;/code&gt; the &lt;code&gt;master&lt;/code&gt; branch. The &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values determine which remote-tracking branch, if any, is updated. When used in this way, the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values do not have any effect in deciding &lt;code&gt;what&lt;/code&gt; gets fetched (i.e. the values are not used as refspecs when the command-line lists refspecs); they are only used to decide &lt;code&gt;where&lt;/code&gt; the refs that are fetched are stored by acting as a mapping.</source>
          <target state="translated">ときに &lt;code&gt;git fetch&lt;/code&gt; 例えば、コマンドラインでフェッチするために、明示的な枝および/またはタグで実行され &lt;code&gt;git fetch origin master&lt;/code&gt; 、&amp;lt;refspec&amp;gt; Sコマンドラインで与えられた例（フェッチされるかを決定 &lt;code&gt;master&lt;/code&gt; である例では、 &lt;code&gt;master:&lt;/code&gt; の省略形です。つまり、「 &lt;code&gt;master&lt;/code&gt; ブランチをフェッチしますが、コマンドラインから更新するリモートトラッキングブランチを明示的に指定することはありません」）。例のコマンドは、 &lt;code&gt;master&lt;/code&gt; ブランチ &lt;code&gt;only&lt;/code&gt; をフェッチします。 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 、更新された場合の値は、どのリモート追跡ブランチを決定します。このように使用すると、 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 値は、 &lt;code&gt;what&lt;/code&gt; をフェッチするかを決定するのに影響しません（つまり、コマンドラインがrefspecをリストするとき、値はrefspecとして使用されません）。それらは、マッピングとして機能することにより、フェッチされた参照が格納される &lt;code&gt;where&lt;/code&gt; を決定するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="d3bb27ea8d5739147518646e08d478432b5ac353" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is run without specifying what branches and/or tags to fetch on the command line, e.g. &lt;code&gt;git fetch origin&lt;/code&gt; or &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values are used as the refspecs&amp;mdash;​they specify which refs to fetch and which local refs to update. The example above will fetch all branches that exist in the &lt;code&gt;origin&lt;/code&gt; (i.e. any ref that matches the left-hand side of the value, &lt;code&gt;refs/heads/*&lt;/code&gt;) and update the corresponding remote-tracking branches in the &lt;code&gt;refs/remotes/origin/*&lt;/code&gt; hierarchy.</source>
          <target state="translated">ときに &lt;code&gt;git fetch&lt;/code&gt; 例えば、支店および/またはタグは、コマンドラインでフェッチするかを指定せずに実行された &lt;code&gt;git fetch origin&lt;/code&gt; または &lt;code&gt;git fetch&lt;/code&gt; 、 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 値はrefspecs-として使用されている彼らは、レフリーがフェッチするかを指定し、更新するローカル参照。上記の例は、 &lt;code&gt;origin&lt;/code&gt; 存在するすべてのブランチ（つまり、値の左側に一致するすべてのref &lt;code&gt;refs/heads/*&lt;/code&gt; ）をフェッチし、 &lt;code&gt;refs/remotes/origin/*&lt;/code&gt; の対応するリモート追跡ブランチを更新します階層。</target>
        </trans-unit>
        <trans-unit id="6bfc306f6ccec6cbac00c82d44f7befe47671739" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is used with &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspec it may refuse to update the local branch as discussed in the &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; part below. This option overrides that check.</source>
          <target state="translated">ときに &lt;code&gt;git fetch&lt;/code&gt; で使用される &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspecそれはで説明したようにローカルブランチを更新するために拒否することができる &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; 下記の一部。このオプションはそのチェックを上書きします。</target>
        </trans-unit>
        <trans-unit id="b8a0a18f13c1248a211519fc4b6c3ee775403075" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git fetch&lt;/code&gt; is used with &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspec it may refuse to update the local branch as discussed in the &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; part of the &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; documentation. This option overrides that check.</source>
          <target state="translated">&lt;code&gt;git fetch&lt;/code&gt; が &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; refspecで使用される場合、&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;ドキュメントの &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; の部分で説明されているように、ローカルブランチの更新を拒否する場合があります。このオプションはそのチェックを上書きします。</target>
        </trans-unit>
        <trans-unit id="946d45913d1a6d20975808ddb9f4de7a3a592055" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git gc&lt;/code&gt; is run, it calls &lt;code&gt;git worktree prune --expire 3.months.ago&lt;/code&gt;. This config variable can be used to set a different grace period. The value &quot;now&quot; may be used to disable the grace period and prune &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; immediately, or &quot;never&quot; may be used to suppress pruning.</source>
          <target state="translated">とき &lt;code&gt;git gc&lt;/code&gt; 実行され、それが呼び出されます &lt;code&gt;git worktree prune --expire 3.months.ago&lt;/code&gt; 。この構成変数を使用して、異なる猶予期間を設定できます。値「now」を使用して猶予期間を無効にし、 &lt;code&gt;$GIT_DIR/worktrees&lt;/code&gt; すぐにプルーニングするか、「never」を使用してプルーニングを抑制できます。</target>
        </trans-unit>
        <trans-unit id="bdaf9b565f5bc5effacd5e94ca1e6e23df9c9f7a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git gc&lt;/code&gt; is run, it will call &lt;code&gt;prune --expire 2.weeks.ago&lt;/code&gt;. Override the grace period with this config variable. The value &quot;now&quot; may be used to disable this grace period and always prune unreachable objects immediately, or &quot;never&quot; may be used to suppress pruning. This feature helps prevent corruption when &lt;code&gt;git gc&lt;/code&gt; runs concurrently with another process writing to the repository; see the &quot;NOTES&quot; section of &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;.</source>
          <target state="translated">とき &lt;code&gt;git gc&lt;/code&gt; 実行され、それが呼び出されます &lt;code&gt;prune --expire 2.weeks.ago&lt;/code&gt; 。この構成変数で猶予期間をオーバーライドします。値「now」を使用して、この猶予期間を無効にして常に到達不能オブジェクトをすぐにプルーニングするか、「never」を使用してプルーニングを抑制できます。この機能は、 &lt;code&gt;git gc&lt;/code&gt; がリポジトリに書き込む別のプロセスと同時に実行される場合の破損を防ぐのに役立ちます。&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt;の「NOTES」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9771ab35f0db8c62ffb81b026ac116ab479df958" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git mergetool&lt;/code&gt; is invoked with this tool (either through the &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--tool&lt;/code&gt; option or the &lt;code&gt;merge.tool&lt;/code&gt; configuration variable) the configured command line will be invoked with &lt;code&gt;$BASE&lt;/code&gt; set to the name of a temporary file containing the common base for the merge, if available; &lt;code&gt;$LOCAL&lt;/code&gt; set to the name of a temporary file containing the contents of the file on the current branch; &lt;code&gt;$REMOTE&lt;/code&gt; set to the name of a temporary file containing the contents of the file to be merged, and &lt;code&gt;$MERGED&lt;/code&gt; set to the name of the file to which the merge tool should write the result of the merge resolution.</source>
          <target state="translated">とき &lt;code&gt;git mergetool&lt;/code&gt; 、このツールで（いずれかを介して起動される &lt;code&gt;-t&lt;/code&gt; または &lt;code&gt;--tool&lt;/code&gt; オプションまたは &lt;code&gt;merge.tool&lt;/code&gt; の設定変数）に構成コマンドラインがで呼び出されます &lt;code&gt;$BASE&lt;/code&gt; ための共通基盤を含む一時ファイルの名前に設定可能な場合はマージ。 &lt;code&gt;$LOCAL&lt;/code&gt; は、現在のブランチ上のファイルの内容を含む一時ファイルの名前に設定されます。 &lt;code&gt;$REMOTE&lt;/code&gt; は、マージされるファイルの内容を含む一時ファイルの名前に設定され、 &lt;code&gt;$MERGED&lt;/code&gt; は、マージツールがマージ解決の結果を書き込むファイルの名前に設定されます。</target>
        </trans-unit>
        <trans-unit id="8d649c2a1b515f828b380ed0228639a9abf6f2e7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git-difftool&lt;/code&gt; is invoked with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; option the default diff tool will be read from the configured &lt;code&gt;diff.guitool&lt;/code&gt; variable instead of &lt;code&gt;diff.tool&lt;/code&gt;. The &lt;code&gt;--no-gui&lt;/code&gt; option can be used to override this setting. If &lt;code&gt;diff.guitool&lt;/code&gt; is not set, we will fallback in the order of &lt;code&gt;merge.guitool&lt;/code&gt;, &lt;code&gt;diff.tool&lt;/code&gt;, &lt;code&gt;merge.tool&lt;/code&gt; until a tool is found.</source>
          <target state="translated">とき &lt;code&gt;git-difftool&lt;/code&gt; で呼び出される &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--gui&lt;/code&gt; オプションデフォルトの差分ツールは、設定から読み込まれます &lt;code&gt;diff.guitool&lt;/code&gt; の変数の代わりに、 &lt;code&gt;diff.tool&lt;/code&gt; 。 &lt;code&gt;--no-gui&lt;/code&gt; のオプションは、この設定を上書きするために使用することができます。場合 &lt;code&gt;diff.guitool&lt;/code&gt; が設定されていない場合、我々は、の順にフォールバックします &lt;code&gt;merge.guitool&lt;/code&gt; 、 &lt;code&gt;diff.tool&lt;/code&gt; 、 &lt;code&gt;merge.tool&lt;/code&gt; ツールが見つかるまで。</target>
        </trans-unit>
        <trans-unit id="dab1778e78eece39a70fe4959b77fef05af95366" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;git-mergetool&lt;/code&gt; is invoked with the &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; option the default merge tool will be read from the configured &lt;code&gt;merge.guitool&lt;/code&gt; variable instead of &lt;code&gt;merge.tool&lt;/code&gt;. If &lt;code&gt;merge.guitool&lt;/code&gt; is not set, we will fallback to the tool configured under &lt;code&gt;merge.tool&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;git-mergetool&lt;/code&gt; で呼び出される &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--gui&lt;/code&gt; オプションデフォルトマージツールは、設定から読み込まれます &lt;code&gt;merge.guitool&lt;/code&gt; の代わりに変数 &lt;code&gt;merge.tool&lt;/code&gt; 。場合 &lt;code&gt;merge.guitool&lt;/code&gt; が設定されていない場合、我々は下に構成ツールにフォールバックします &lt;code&gt;merge.tool&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55d1f905322639499a3e0c7d64b920e915841fa1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;group&lt;/code&gt; (or &lt;code&gt;true&lt;/code&gt;), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When &lt;code&gt;all&lt;/code&gt; (or &lt;code&gt;world&lt;/code&gt; or &lt;code&gt;everybody&lt;/code&gt;), the repository will be readable by all users, additionally to being group-shareable. When &lt;code&gt;umask&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt;), Git will use permissions reported by umask(2). When &lt;code&gt;0xxx&lt;/code&gt;, where &lt;code&gt;0xxx&lt;/code&gt; is an octal number, files in the repository will have this mode value. &lt;code&gt;0xxx&lt;/code&gt; will override user&amp;rsquo;s umask value (whereas the other options will only override requested parts of the user&amp;rsquo;s umask value). Examples: &lt;code&gt;0660&lt;/code&gt; will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to &lt;code&gt;group&lt;/code&gt; unless umask is e.g. &lt;code&gt;0022&lt;/code&gt;). &lt;code&gt;0640&lt;/code&gt; is a repository that is group-readable but not group-writable. See &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt;. False by default.</source>
          <target state="translated">&lt;code&gt;group&lt;/code&gt; （または &lt;code&gt;true&lt;/code&gt; ）すると、リポジトリはグループ内の複数のユーザー間で共有可能になります（すべてのファイルとオブジェクトがグループ書き込み可能であることを確認してください）。場合は &lt;code&gt;all&lt;/code&gt; （または &lt;code&gt;world&lt;/code&gt; または &lt;code&gt;everybody&lt;/code&gt; ）、リポジトリはさらに、グループ共有可能であることに、すべてのユーザーが読み取り可能になります。とき &lt;code&gt;umask&lt;/code&gt; （または &lt;code&gt;false&lt;/code&gt; ）、Gitはアクセス許可を使用しますのumask（2）により報告されました。とき &lt;code&gt;0xxx&lt;/code&gt; 、どこ &lt;code&gt;0xxx&lt;/code&gt; 進数である、リポジトリ内のファイルは、このモード値を持つことになります。 &lt;code&gt;0xxx&lt;/code&gt; はユーザーのumask値をオーバーライドします（他のオプションはユーザーのumask値の要求された部分のみをオーバーライドします）。例： &lt;code&gt;0660&lt;/code&gt; 所有者とグループはリポジトリを読み取り/書き込み可能にしますが、他のユーザーはアクセスできません（umaskが &lt;code&gt;0022&lt;/code&gt; でない限り、 &lt;code&gt;group&lt;/code&gt; と同じです）。 &lt;code&gt;0640&lt;/code&gt; は、グループは読み取り可能ですが、グループが書き込み可能ではないリポジトリーです。&lt;a href=&quot;git-init&quot;&gt;git-init [1]を&lt;/a&gt;参照してください。デフォルトではfalse。</target>
        </trans-unit>
        <trans-unit id="0c640b1443fdc376fb0e05e5b19871e0f70bfa75" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;interactive&lt;/code&gt;, enable the interactive mode of rebase.</source>
          <target state="translated">&lt;code&gt;interactive&lt;/code&gt; 場合、リベースのインタラクティブモードを有効にします。</target>
        </trans-unit>
        <trans-unit id="fe63008459e29ff8faa8d062c0d12daf6ea858b2" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;konqueror&lt;/code&gt; is specified by a command-line option or a configuration variable, we launch &lt;code&gt;kfmclient&lt;/code&gt; to try to open the HTML man page on an already opened konqueror in a new tab if possible.</source>
          <target state="translated">とき &lt;code&gt;konqueror&lt;/code&gt; コマンドラインオプションまたは構成変数によって指定され、我々は起動 &lt;code&gt;kfmclient&lt;/code&gt; 可能であれば新しいタブですでに開かれているKonquerorの上のHTMLのmanページを開こうとします。</target>
        </trans-unit>
        <trans-unit id="0e5d1d0d5309f291d73a19a6f71347b59d761978" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;konqueror&lt;/code&gt; is specified in the &lt;code&gt;man.viewer&lt;/code&gt; configuration variable, we launch &lt;code&gt;kfmclient&lt;/code&gt; to try to open the man page on an already opened konqueror in a new tab if possible.</source>
          <target state="translated">&lt;code&gt;konqueror&lt;/code&gt; が &lt;code&gt;man.viewer&lt;/code&gt; 構成変数で指定されている場合、kfmclientを起動して、 &lt;code&gt;kfmclient&lt;/code&gt; 、すでに開いているkonquerorのmanページを新しいタブで開こうとします。</target>
        </trans-unit>
        <trans-unit id="162b4f89725e01e084b1d2a9bb66f41a211da6f6" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;matching&lt;/code&gt; mode is specified, paths that explicitly match an ignored pattern are shown. If a directory matches an ignore pattern, then it is shown, but not paths contained in the ignored directory. If a directory does not match an ignore pattern, but all contents are ignored, then the directory is not shown, but all contents are shown.</source>
          <target state="translated">とき &lt;code&gt;matching&lt;/code&gt; モードが指定され、明示的に無視されたパターンと一致する経路が示されています。ディレクトリが無視パターンに一致する場合、それは表示されますが、無視されたディレクトリに含まれるパスは表示されません。ディレクトリが無視パターンに一致しないが、すべてのコンテンツが無視される場合、ディレクトリは表示されませんが、すべてのコンテンツが表示されます。</target>
        </trans-unit>
        <trans-unit id="7ee4878df1abaf60b54059eba9faa52c16598786" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;merges&lt;/code&gt; (or just &lt;code&gt;m&lt;/code&gt;), pass the &lt;code&gt;--rebase-merges&lt;/code&gt; option to &lt;code&gt;git rebase&lt;/code&gt; so that the local merge commits are included in the rebase (see &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;merges&lt;/code&gt; するとき（または単に &lt;code&gt;m&lt;/code&gt; ）、 &lt;code&gt;--rebase-merges&lt;/code&gt; &lt;code&gt;git rebase&lt;/code&gt; -mergesオプションをgit rebaseに渡して、ローカルマージコミットがリベースに含まれるようにします（詳細については、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="239b51beb1f8c13233881b0568518d58e269df96" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;merges&lt;/code&gt;, pass the &lt;code&gt;--rebase-merges&lt;/code&gt; option to &lt;code&gt;git rebase&lt;/code&gt; so that the local merge commits are included in the rebase (see &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for details).</source>
          <target state="translated">&lt;code&gt;merges&lt;/code&gt; する際、 &lt;code&gt;--rebase-merges&lt;/code&gt; オプションを &lt;code&gt;git rebase&lt;/code&gt; に渡して、ローカルマージコミットがリベースに含まれるようにします（詳細は&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;を参照）。</target>
        </trans-unit>
        <trans-unit id="26887709475bb99a484f3550dfcf66463a02ff1c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserve&lt;/code&gt; (deprecated in favor of &lt;code&gt;merges&lt;/code&gt;), also pass &lt;code&gt;--preserve-merges&lt;/code&gt; along to &lt;code&gt;git rebase&lt;/code&gt; so that locally committed merge commits will not be flattened by running &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preserve&lt;/code&gt; する場合（ &lt;code&gt;merges&lt;/code&gt; ために非推奨）、ローカルでコミットされたマージコミットが &lt;code&gt;git pull&lt;/code&gt; を実行してフラット化されないように、 &lt;code&gt;git rebase&lt;/code&gt; に &lt;code&gt;--preserve-merges&lt;/code&gt; も渡します。</target>
        </trans-unit>
        <trans-unit id="1aa5ac29106f7e567cb177a446057fe6893dfb3c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserve&lt;/code&gt; (or just &lt;code&gt;p&lt;/code&gt;, deprecated in favor of &lt;code&gt;merges&lt;/code&gt;), also pass &lt;code&gt;--preserve-merges&lt;/code&gt; along to &lt;code&gt;git rebase&lt;/code&gt; so that locally committed merge commits will not be flattened by running &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;preserve&lt;/code&gt; する場合（または単に &lt;code&gt;p&lt;/code&gt; 、 &lt;code&gt;merges&lt;/code&gt; を優先して非推奨）、 &lt;code&gt;--preserve-merges&lt;/code&gt; を &lt;code&gt;git rebase&lt;/code&gt; に渡して、ローカルでコミットされたマージコミットがgitpullを実行してもフラット化されないようにし &lt;code&gt;git pull&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c040d756e251986ff4d930aa40402b774da81b76" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;preserveUser&lt;/code&gt; is true, &lt;code&gt;git p4&lt;/code&gt; normally dies if it cannot find an author in the p4 user map. This setting submits the change regardless.</source>
          <target state="translated">とき &lt;code&gt;preserveUser&lt;/code&gt; が真である、 &lt;code&gt;git p4&lt;/code&gt; 、それはP4のユーザマップで著者を見つけることができない場合は正常に死にます。この設定は、関係なく変更を送信します。</target>
        </trans-unit>
        <trans-unit id="f1cb457481e4cab2531cdb48fb2ed70a72c47f80" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;receive-pack&lt;/code&gt; takes in objects, they are placed into a temporary &quot;quarantine&quot; directory within the &lt;code&gt;$GIT_DIR/objects&lt;/code&gt; directory and migrated into the main object store only after the &lt;code&gt;pre-receive&lt;/code&gt; hook has completed. If the push fails before then, the temporary directory is removed entirely.</source>
          <target state="translated">ときに &lt;code&gt;receive-pack&lt;/code&gt; オブジェクトに取り、彼らは内の一時的な「隔離」ディレクトリに配置されている &lt;code&gt;$GIT_DIR/objects&lt;/code&gt; ディレクトリをし、後にのみ、メインオブジェクトストアに移行 &lt;code&gt;pre-receive&lt;/code&gt; フックが完了しました。それ以前にプッシュが失敗した場合、一時ディレクトリは完全に削除されます。</target>
        </trans-unit>
        <trans-unit id="13eed45e8cb127a4420b06f0b52f497c696b7d45" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;text&lt;/code&gt; is set to &quot;auto&quot;, the path is marked for automatic end-of-line conversion. If Git decides that the content is text, its line endings are converted to LF on checkin. When the file has been committed with CRLF, no conversion is done.</source>
          <target state="translated">&lt;code&gt;text&lt;/code&gt; が「auto」に設定されている場合、パスは自動行末変換用にマークされます。コンテンツがテキストであるとGitが判断した場合、その行末はチェックイン時にLFに変換されます。ファイルがCRLFでコミットされている場合、変換は行われません。</target>
        </trans-unit>
        <trans-unit id="2bb8610f0d3f51c94aca7dd51e3603814301750d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;text=auto&lt;/code&gt; conversion is enabled in a cross-platform project using push and pull to a central repository the text files containing CRLFs should be normalized.</source>
          <target state="translated">場合は &lt;code&gt;text=auto&lt;/code&gt; 変換が中央リポジトリにのCRLFを含むテキストファイルをプッシュプルを使用したクロスプラットフォームのプロジェクトで有効になっている正規化されなければなりません。</target>
        </trans-unit>
        <trans-unit id="f1b569ad0a0d3f731d90377a830d25de99487fad" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;upload-pack&lt;/code&gt; has started &lt;code&gt;pack-objects&lt;/code&gt;, there may be a quiet period while &lt;code&gt;pack-objects&lt;/code&gt; prepares the pack. Normally it would output progress information, but if &lt;code&gt;--quiet&lt;/code&gt; was used for the fetch, &lt;code&gt;pack-objects&lt;/code&gt; will output nothing at all until the pack data begins. Some clients and networks may consider the server to be hung and give up. Setting this option instructs &lt;code&gt;upload-pack&lt;/code&gt; to send an empty keepalive packet every &lt;code&gt;uploadpack.keepAlive&lt;/code&gt; seconds. Setting this option to 0 disables keepalive packets entirely. The default is 5 seconds.</source>
          <target state="translated">&lt;code&gt;upload-pack&lt;/code&gt; が &lt;code&gt;pack-objects&lt;/code&gt; を開始したとき、 &lt;code&gt;pack-objects&lt;/code&gt; がパックを準備している間、静かな期間がある場合があります。通常は進捗情報を出力しますが、フェッチに &lt;code&gt;--quiet&lt;/code&gt; を使用した場合、 &lt;code&gt;pack-objects&lt;/code&gt; はパックデータが開始するまで何も出力しません。一部のクライアントとネットワークは、サーバーがハングしてあきらめたと見なす場合があります。このオプションを指示する設定 &lt;code&gt;upload-pack&lt;/code&gt; 空のキープアライブパケットごとに送信するための &lt;code&gt;uploadpack.keepAlive&lt;/code&gt; 秒。このオプションを0に設定すると、キープアライブパケットが完全に無効になります。デフォルトは5秒です。</target>
        </trans-unit>
        <trans-unit id="09ea8c9e4617731ed2a0cdf40185d39ec477e171" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; is in effect, allow &lt;code&gt;upload-pack&lt;/code&gt; to accept a fetch request that asks for an object at the tip of a hidden ref (by default, such a request is rejected). See also &lt;code&gt;uploadpack.hideRefs&lt;/code&gt;. Even if this is false, a client may be able to steal objects via the techniques described in the &quot;SECURITY&quot; section of the &lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces[7]&lt;/a&gt; man page; it&amp;rsquo;s best to keep private data in a separate repository.</source>
          <target state="translated">&lt;code&gt;uploadpack.hideRefs&lt;/code&gt; が有効な場合、非表示の参照の先端にあるオブジェクトを要求するフェッチ要求を受け入れるように、 &lt;code&gt;upload-pack&lt;/code&gt; に許可します（デフォルトでは、そのような要求は拒否されます）。 &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; も参照してください。これがfalseの場合でも、クライアントは&lt;a href=&quot;gitnamespaces&quot;&gt;gitnamespaces [7]の&lt;/a&gt; manページの「SECURITY」セクションで説明されている手法を使用してオブジェクトを盗む可能性があります。プライベートデータは別のリポジトリに保存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="450f4babea27d38a629ee9743ca7ffcb90a8c4de" translate="yes" xml:space="preserve">
          <source>When Git does a normal merge between two branches, it considers exactly three points: the two branches and a third commit, called the &lt;code&gt;merge base&lt;/code&gt;, which is usually the common ancestor of the commits. The result of the merge is the sum of the changes between the merge base and each head. When you merge two branches with a regular merge commit, this results in a new commit which will end up as a merge base when they&amp;rsquo;re merged again, because there is now a new common ancestor. Git doesn&amp;rsquo;t have to consider changes that occurred before the merge base, so you don&amp;rsquo;t have to re-resolve any conflicts you resolved before.</source>
          <target state="translated">Gitが2つのブランチ間で通常のマージを行う場合、正確に3つのポイントが考慮されます。2つのブランチと、通常はコミットの共通の祖先である &lt;code&gt;merge base&lt;/code&gt; と呼ばれる3番目のコミットです。マージの結果は、マージベースと各ヘッドの間の変更の合計です。 2つのブランチを通常のマージコミットでマージすると、新しい共通の祖先が存在するため、それらが再びマージされるときにマージベースとして終了する新しいコミットが生成されます。 Gitは、マージベースの前に発生した変更を考慮する必要がないため、以前に解決した競合を再解決する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5f953a201b0ae4d35f35034718b3114ef928787f" translate="yes" xml:space="preserve">
          <source>When Git doesn&amp;rsquo;t know how to handle a certain transport protocol, it attempts to use the &lt;code&gt;remote-&amp;lt;transport&amp;gt;&lt;/code&gt; remote helper, if one exists. To explicitly request a remote helper, the following syntax may be used:</source>
          <target state="translated">Gitが特定のトランスポートプロトコルの処理方法を知らない場合、リモートヘルパーが存在する場合は、リモートヘルパー &lt;code&gt;remote-&amp;lt;transport&amp;gt;&lt;/code&gt; を使用しようとします。リモートヘルパーを明示的に要求するには、次の構文を使用できます。</target>
        </trans-unit>
        <trans-unit id="cf58a154a8f8fa8889640812d376b7964ce7bef2" translate="yes" xml:space="preserve">
          <source>When Git encounters a URL of the form &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;transport&amp;gt;&lt;/code&gt; is a protocol that it cannot handle natively, it automatically invokes &lt;code&gt;git remote-&amp;lt;transport&amp;gt;&lt;/code&gt; with the full URL as the second argument. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote.</source>
          <target state="translated">Gitが &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt; という形式のURLを検出すると、 &lt;code&gt;&amp;lt;transport&amp;gt;&lt;/code&gt; はネイティブで処理できないプロトコルであり、2番目の引数として完全なURLを指定して &lt;code&gt;git remote-&amp;lt;transport&amp;gt;&lt;/code&gt; を自動的に呼び出します。そのようなURLがコマンドラインで直接検出される場合、最初の引数は2番目の引数と同じです。構成されたリモートで検出される場合、最初の引数はそのリモートの名前です。</target>
        </trans-unit>
        <trans-unit id="27018e5bb4c8622ebcfed2f81b80284203c3bc2f" translate="yes" xml:space="preserve">
          <source>When Git encounters the first file that needs to be cleaned or smudged, it starts the filter and performs the handshake. In the handshake, the welcome message sent by Git is &quot;git-filter-client&quot;, only version 2 is supported, and the supported capabilities are &quot;clean&quot;, &quot;smudge&quot;, and &quot;delay&quot;.</source>
          <target state="translated">Gitは、クリーン化やスマッジが必要な最初のファイルに遭遇すると、フィルターを起動してハンドシェイクを実行します。ハンドシェイクでは、Gitが送るウェルカムメッセージは「git-filter-client」、サポートされているのはバージョン2のみで、サポートされている機能は「clean」「smudge」「delay」です。</target>
        </trans-unit>
        <trans-unit id="f51f886a7edb2e397d8670010685e9d17fb9bc09" translate="yes" xml:space="preserve">
          <source>When Git needs authentication for a particular URL context, credential-store will consider that context a pattern to match against each entry in the credentials file. If the protocol, hostname, and username (if we already have one) match, then the password is returned to Git. See the discussion of configuration in &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; for more information.</source>
          <target state="translated">Gitが特定のURLコンテキストの認証を必要とする場合、credential-storeは、そのコンテキストを、信任状ファイルの各エントリーと照合するパターンと見なします。プロトコル、ホスト名、およびユーザー名（既にある場合）が一致すると、パスワードがGitに返されます。詳細については、&lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]の&lt;/a&gt;構成の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="fbdc4494c8c569621bd35073fd02055c267f7e54" translate="yes" xml:space="preserve">
          <source>When Git needs to show you a diff for the path with &lt;code&gt;diff&lt;/code&gt; attribute set to &lt;code&gt;jcdiff&lt;/code&gt;, it calls the command you specified with the above configuration, i.e. &lt;code&gt;j-c-diff&lt;/code&gt;, with 7 parameters, just like &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; program is called. See &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; for details.</source>
          <target state="translated">Gitは、 &lt;code&gt;diff&lt;/code&gt; 属性が &lt;code&gt;jcdiff&lt;/code&gt; に設定されたパスの差分を表示する必要がある場合、 &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; プログラムが呼び出されるのと同じように、上記の構成で指定したコマンド、つまり &lt;code&gt;j-c-diff&lt;/code&gt; を7つのパラメーターで呼び出します。詳細については、&lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bb3065603615c6a64dfcb623c10f42c6b9e417fa" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;git push --signed&lt;/code&gt; sent a push certificate with a &quot;nonce&quot; that was issued by a receive-pack serving the same repository within this many seconds, export the &quot;nonce&quot; found in the certificate to &lt;code&gt;GIT_PUSH_CERT_NONCE&lt;/code&gt; to the hooks (instead of what the receive-pack asked the sending side to include). This may allow writing checks in &lt;code&gt;pre-receive&lt;/code&gt; and &lt;code&gt;post-receive&lt;/code&gt; a bit easier. Instead of checking &lt;code&gt;GIT_PUSH_CERT_NONCE_SLOP&lt;/code&gt; environment variable that records by how many seconds the nonce is stale to decide if they want to accept the certificate, they only can check &lt;code&gt;GIT_PUSH_CERT_NONCE_STATUS&lt;/code&gt; is &lt;code&gt;OK&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git push --signed&lt;/code&gt; が、この数秒以内に同じリポジトリを提供する受信パックによって発行された「nonce」を含むプッシュ証明書を送信したとき、証明書で見つかった「nonce」をフックに（代わりに） &lt;code&gt;GIT_PUSH_CERT_NONCE&lt;/code&gt; にエクスポートします受信パックが送信側に含めるように要求したもの）。これは、中に小切手を書くことを可能にする &lt;code&gt;pre-receive&lt;/code&gt; と &lt;code&gt;post-receive&lt;/code&gt; 少し簡単。ナンスが古くなっている秒数を記録する &lt;code&gt;GIT_PUSH_CERT_NONCE_SLOP&lt;/code&gt; 環境変数をチェックして証明書を受け入れるかどうかを決定する代わりに、 &lt;code&gt;GIT_PUSH_CERT_NONCE_STATUS&lt;/code&gt; が &lt;code&gt;OK&lt;/code&gt; かどうかのみをチェックできます。</target>
        </trans-unit>
        <trans-unit id="f34a76491c47ddfcf2959dd6944574eeda479afa" translate="yes" xml:space="preserve">
          <source>When a command has finished, and the client has received the entire response from the server, a client can either request that another command be executed or can terminate the connection. A client may optionally send an empty request consisting of just a flush-pkt to indicate that no more requests will be made.</source>
          <target state="translated">コマンドが終了し、クライアントがサーバーからの応答全体を受け取ったとき、クライアントは別のコマンドの実行を 要求するか、接続を終了するかのいずれかを行うことができる。クライアントはオプションで、これ以上のリクエストが行われないことを示すために flush-pkt だけで構成される空のリクエストを送ることができます。</target>
        </trans-unit>
        <trans-unit id="98e606d10b24cc0c03b08a4efd9e014e2a7d092f" translate="yes" xml:space="preserve">
          <source>When a commit is created in this state, the branch is updated to refer to the new commit. Specifically, &lt;code&gt;git commit&lt;/code&gt; creates a new commit &lt;code&gt;d&lt;/code&gt;, whose parent is commit &lt;code&gt;c&lt;/code&gt;, and then updates branch &lt;code&gt;master&lt;/code&gt; to refer to new commit &lt;code&gt;d&lt;/code&gt;. &lt;code&gt;HEAD&lt;/code&gt; still refers to branch &lt;code&gt;master&lt;/code&gt; and so indirectly now refers to commit &lt;code&gt;d&lt;/code&gt;:</source>
          <target state="translated">この状態でコミットが作成されると、新しいコミットを参照するようにブランチが更新されます。具体的には、 &lt;code&gt;git commit&lt;/code&gt; 新しいを作成し、コミット &lt;code&gt;d&lt;/code&gt; その親コミットされ、 &lt;code&gt;c&lt;/code&gt; 、そしてブランチ更新 &lt;code&gt;master&lt;/code&gt; 新しいコミットを参照するために &lt;code&gt;d&lt;/code&gt; 。 &lt;code&gt;HEAD&lt;/code&gt; はまだブランチ &lt;code&gt;master&lt;/code&gt; を指しているため、間接的にcommit &lt;code&gt;d&lt;/code&gt; を指します。</target>
        </trans-unit>
        <trans-unit id="b5e6d106b45c449ef3f9978fa7e9a2c319abd6d7" translate="yes" xml:space="preserve">
          <source>When a conflict occurs while rebasing, rebase stops and asks the user to resolve. Since the user may need to make notable changes while resolving conflicts, after conflicts are resolved and the user has run &lt;code&gt;git rebase --continue&lt;/code&gt;, the rebase should open an editor and ask the user to update the commit message. The merge backend does this, while the apply backend blindly applies the original commit message.</source>
          <target state="translated">リベース中に競合が発生すると、リベースは停止し、ユーザーに解決を求めます。ユーザーは競合の解決中に注目すべき変更を加える必要がある場合があるため、競合が解決され、ユーザーが &lt;code&gt;git rebase --continue&lt;/code&gt; を実行した後、リベースはエディターを開き、ユーザーにコミットメッセージの更新を依頼する必要があります。マージバックエンドはこれを行いますが、適用バックエンドは元のコミットメッセージを盲目的に適用します。</target>
        </trans-unit>
        <trans-unit id="a1d656a10ad8d92cd23d5675fa9c3ba2b92a8d6f" translate="yes" xml:space="preserve">
          <source>When a curl trace is enabled (see &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; above), do not dump data (that is, only dump info lines and headers).</source>
          <target state="translated">curlトレースが有効な場合（上記の &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; を参照）、データをダンプしないでください（つまり、情報行とヘッダーのみをダンプします）。</target>
        </trans-unit>
        <trans-unit id="855748d09cda03242c615ed9f83d928cff4dd252" translate="yes" xml:space="preserve">
          <source>When a fetch mirror is created with &lt;code&gt;--mirror=fetch&lt;/code&gt;, the refs will not be stored in the &lt;code&gt;refs/remotes/&lt;/code&gt; namespace, but rather everything in &lt;code&gt;refs/&lt;/code&gt; on the remote will be directly mirrored into &lt;code&gt;refs/&lt;/code&gt; in the local repository. This option only makes sense in bare repositories, because a fetch would overwrite any local commits.</source>
          <target state="translated">フェッチミラーが &lt;code&gt;--mirror=fetch&lt;/code&gt; で作成されると、 &lt;code&gt;refs/remotes/&lt;/code&gt; はrefs / remotes /名前空間に保存されませんが、リモートの &lt;code&gt;refs/&lt;/code&gt; すべてがローカルリポジトリの &lt;code&gt;refs/&lt;/code&gt; に直接ミラーリングされます。フェッチはローカルコミットを上書きするため、このオプションはベアリポジトリでのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="747511f053f093bdd8637c2efa65029ba86d5e79" translate="yes" xml:space="preserve">
          <source>When a git process is a (direct or indirect) child of another git process, it inherits Trace2 context information. This allows the child to print the command hierarchy. This example shows gc as child[3] of fetch. When the gc process reports its name as &quot;gc&quot;, it also reports the hierarchy as &quot;fetch/gc&quot;. (In this example, trace2 messages from the child process is indented for clarity.)</source>
          <target state="translated">git プロセスが他の git プロセスの (直接的または間接的な)子プロセスである場合、Trace2 のコンテキスト情報を継承します。これにより、子プロセスはコマンド階層を表示することができます。この例では、gc を fetch の child[3]としています。gc プロセスが自分の名前を &quot;gc&quot; と報告すると、階層も &quot;fetch/gc&quot; と報告します。(この例では、わかりやすくするために、子プロセスからのtrace2メッセージをインデントしています)。</target>
        </trans-unit>
        <trans-unit id="dcc866e382263d0b053b9eb6226d8321d2b6f3a3" translate="yes" xml:space="preserve">
          <source>When a helper is executed, it will have one &quot;operation&quot; argument appended to its command line, which is one of:</source>
          <target state="translated">ヘルパーが実行されると、そのヘルパーはそのコマンドラインに1つの &quot;操作 &quot;引数が追加されます。</target>
        </trans-unit>
        <trans-unit id="79294381fcaa0a0dccaa2b41ac29dc7daa74e3f5" translate="yes" xml:space="preserve">
          <source>When a local branch is started off a remote-tracking branch, Git sets up the branch (specifically the &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; configuration entries) so that &lt;code&gt;git pull&lt;/code&gt; will appropriately merge from the remote-tracking branch. This behavior may be changed via the global &lt;code&gt;branch.autoSetupMerge&lt;/code&gt; configuration flag. That setting can be overridden by using the &lt;code&gt;--track&lt;/code&gt; and &lt;code&gt;--no-track&lt;/code&gt; options, and changed later using &lt;code&gt;git branch --set-upstream-to&lt;/code&gt;.</source>
          <target state="translated">ローカルブランチがリモートトラッキングブランチから開始されると、Gitはブランチ（特に、 &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; および &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; 構成エントリ）をセットアップして、 &lt;code&gt;git pull&lt;/code&gt; がリモートブランチから適切にマージされるようにします追跡ブランチ。この動作は、グローバル &lt;code&gt;branch.autoSetupMerge&lt;/code&gt; 構成フラグを介して変更できます。この設定は &lt;code&gt;--track&lt;/code&gt; および &lt;code&gt;--no-track&lt;/code&gt; オプションを使用してオーバーライドでき、後で &lt;code&gt;git branch --set-upstream-to&lt;/code&gt; を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="dbb99a5451930fe8366dedb022737c46385ca3a6" translate="yes" xml:space="preserve">
          <source>When a merge commit is included by &lt;code&gt;--show-pulls&lt;/code&gt;, the merge is treated as if it &quot;pulled&quot; the change from another branch. When using &lt;code&gt;--show-pulls&lt;/code&gt; on this example (and no other options) the resulting graph is:</source>
          <target state="translated">マージコミットが &lt;code&gt;--show-pulls&lt;/code&gt; に含まれている場合、マージは別のブランチから変更を「プル」したかのように扱われます。この例で &lt;code&gt;--show-pulls&lt;/code&gt; を使用すると（他のオプションは使用しない場合）、結果のグラフは次のようになります。</target>
        </trans-unit>
        <trans-unit id="8e12783acd89ac9262429bc89fcf85d9b95e88c1" translate="yes" xml:space="preserve">
          <source>When a merge conflict happens during switching branches with the &lt;code&gt;-m&lt;/code&gt; option, you would see something like this:</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; オプションを使用してブランチを切り替えるときにマージの競合が発生すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="8b8f6236a48634fd451e67557b1ed432c992a4a6" translate="yes" xml:space="preserve">
          <source>When a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with &lt;code&gt;git add&lt;/code&gt; (or &lt;code&gt;git rm&lt;/code&gt; if the merge should result in deletion of the path).</source>
          <target state="translated">マージの競合が発生すると、競合するパスのインデックスエントリはマージされないままになるため、競合を解決し、解決されたパスを &lt;code&gt;git add&lt;/code&gt; （またはマージによってパスが削除される場合は &lt;code&gt;git rm&lt;/code&gt; )でマークする必要があります。</target>
        </trans-unit>
        <trans-unit id="054b9e9957838ff74728498487ffff5f26346d88" translate="yes" xml:space="preserve">
          <source>When a merge isn&amp;rsquo;t resolved automatically, Git leaves the index and the working tree in a special state that gives you all the information you need to help resolve the merge.</source>
          <target state="translated">マージが自動的に解決されない場合、Gitはインデックスと作業ツリーを特別な状態にして、マージの解決に必要なすべての情報を提供します。</target>
        </trans-unit>
        <trans-unit id="1d6b6e4ed4a39cb92155b19d26f3a8478b8d6d5c" translate="yes" xml:space="preserve">
          <source>When a new branch is created with &lt;code&gt;git branch&lt;/code&gt;, &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt; that tracks another branch, this variable tells Git to set up pull to rebase instead of merge (see &quot;branch.&amp;lt;name&amp;gt;.rebase&quot;). When &lt;code&gt;never&lt;/code&gt;, rebase is never automatically set to true. When &lt;code&gt;local&lt;/code&gt;, rebase is set to true for tracked branches of other local branches. When &lt;code&gt;remote&lt;/code&gt;, rebase is set to true for tracked branches of remote-tracking branches. When &lt;code&gt;always&lt;/code&gt;, rebase will be set to true for all tracking branches. See &quot;branch.autoSetupMerge&quot; for details on how to set up a branch to track another branch. This option defaults to never.</source>
          <target state="translated">別のブランチを追跡する &lt;code&gt;git branch&lt;/code&gt; 、 &lt;code&gt;git switch&lt;/code&gt; または &lt;code&gt;git checkout&lt;/code&gt; を使用して新しいブランチが作成されると、この変数はマージの代わりにリベースするプルを設定するようにGitに指示します（「branch。&amp;lt;name&amp;gt; .rebase」を参照）。 &lt;code&gt;never&lt;/code&gt; の場合、リベースが自動的にtrueに設定されることはありません。 &lt;code&gt;local&lt;/code&gt; の場合、他のローカルブランチの追跡されたブランチに対してrebaseがtrueに設定されます。 &lt;code&gt;remote&lt;/code&gt; の場合、リモート追跡ブランチの追跡ブランチに対してrebaseがtrueに設定されます。ときは &lt;code&gt;always&lt;/code&gt; 、リベースは、すべての追跡ブランチをtrueに設定されます。ブランチをセットアップして別のブランチを追跡する方法の詳細については、「branch.autoSetupMerge」を参照してください。このオプションのデフォルトは決してありません。</target>
        </trans-unit>
        <trans-unit id="ed0adff8e63a6741e1694d5ebc304264bd392424" translate="yes" xml:space="preserve">
          <source>When a patch failure occurs, &amp;lt;msg&amp;gt; will be printed to the screen before exiting. This overrides the standard message informing you to use &lt;code&gt;--continue&lt;/code&gt; or &lt;code&gt;--skip&lt;/code&gt; to handle the failure. This is solely for internal use between &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">パッチ障害が発生すると、終了する前に&amp;lt;msg&amp;gt;が画面に出力されます。これにより、 &lt;code&gt;--continue&lt;/code&gt; または &lt;code&gt;--skip&lt;/code&gt; を使用して失敗を処理するように通知する標準メッセージが上書きされます。これは &lt;code&gt;git rebase&lt;/code&gt; と &lt;code&gt;git am&lt;/code&gt; の間の内部使用専用です。</target>
        </trans-unit>
        <trans-unit id="d5b066fa036c4bb98c79472fbdf38de3d119f100" translate="yes" xml:space="preserve">
          <source>When a patch is part of an ongoing discussion, the patch generated by &lt;code&gt;git format-patch&lt;/code&gt; can be tweaked to take advantage of the &lt;code&gt;git am --scissors&lt;/code&gt; feature. After your response to the discussion comes a line that consists solely of &quot;&lt;code&gt;-- &amp;gt;8 --&lt;/code&gt;&quot; (scissors and perforation), followed by the patch with unnecessary header fields removed:</source>
          <target state="translated">パッチが進行中の議論の一部である場合、 &lt;code&gt;git format-patch&lt;/code&gt; によって生成されたパッチを調整して、 &lt;code&gt;git am --scissors&lt;/code&gt; 機能を利用できます。ディスカッションに対する応答の後に、「 &lt;code&gt;-- &amp;gt;8 --&lt;/code&gt; 」（はさみとミシン目）のみで構成される行が続き、不要なヘッダーフィールドが削除されたパッチが続きます。</target>
        </trans-unit>
        <trans-unit id="f3cb24e54c9837370739d06bd25b8c911a05ee6b" translate="yes" xml:space="preserve">
          <source>When a path is in the &quot;unmerged&quot; state, running &lt;code&gt;git update-index&lt;/code&gt; for that path tells Git to mark the path resolved.</source>
          <target state="translated">パスが「マージされていない」状態の場合、そのパスに対して &lt;code&gt;git update-index&lt;/code&gt; を実行すると、Gitにパスを解決済みとしてマークするように指示します。</target>
        </trans-unit>
        <trans-unit id="f8965008f9824bf8da0b033710c2d7ac1f3f6568" translate="yes" xml:space="preserve">
          <source>When a pure mode change is encountered (which has no index information), the information is read from the current index instead.</source>
          <target state="translated">純粋なモード変更(インデックス情報を持たない)に遭遇した場合、代わりに現在のインデックスから情報が読み込まれます。</target>
        </trans-unit>
        <trans-unit id="ef4651b07e5b8cb97cb93de85df1d7e556426d24" translate="yes" xml:space="preserve">
          <source>When a push mirror is created with &lt;code&gt;--mirror=push&lt;/code&gt;, then &lt;code&gt;git push&lt;/code&gt; will always behave as if &lt;code&gt;--mirror&lt;/code&gt; was passed.</source>
          <target state="translated">&lt;code&gt;--mirror=push&lt;/code&gt; を使用してプッシュミラーを作成すると、 &lt;code&gt;git push&lt;/code&gt; は常に &lt;code&gt;--mirror&lt;/code&gt; が渡されたかのように動作します。</target>
        </trans-unit>
        <trans-unit id="deb13d30f8ba66c920f6495f36b99921916b0fbc" translate="yes" xml:space="preserve">
          <source>When a rebase required merge conflicts to be resolved, compare the changes introduced by the rebase directly afterwards using:</source>
          <target state="translated">リベースでマージの競合を解決する必要があった場合、リベースで導入された変更を直接比較するには、次のように使用します。</target>
        </trans-unit>
        <trans-unit id="350766930233515327656bc7b70b13214a7aa33c" translate="yes" xml:space="preserve">
          <source>When a ref is updated, reflog entries are created to keep track of the reason why the ref was updated (which is typically the name of the high-level command that updated the ref), in addition to the old and new values of the ref. A scripted Porcelain command can use set_reflog_action helper function in &lt;code&gt;git-sh-setup&lt;/code&gt; to set its name to this variable when it is invoked as the top level command by the end user, to be recorded in the body of the reflog.</source>
          <target state="translated">refが更新されると、refの古い値と新しい値に加えて、refが更新された理由（通常は、refを更新した高レベルコマンドの名前）を追跡するためのreflogエントリが作成されます。 。スクリプト化されたPorcelainコマンドは、 &lt;code&gt;git-sh-setup&lt;/code&gt; の set_reflog_actionヘルパー関数を使用して、エンドユーザーがトップレベルのコマンドとして呼び出されたときにその名前をこの変数に設定し、reflogの本文に記録できます。</target>
        </trans-unit>
        <trans-unit id="0a564cf0d83332d2cd6fd3ac884cec9942b078c7" translate="yes" xml:space="preserve">
          <source>When a repository is synchronized via &lt;code&gt;git push&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; objects packed in the source repository are usually stored unpacked in the destination. While this allows you to use different packing strategies on both ends, it also means you may need to repack both repositories every once in a while.</source>
          <target state="translated">リポジトリが &lt;code&gt;git push&lt;/code&gt; および &lt;code&gt;git pull&lt;/code&gt; を介して同期されると、ソースリポジトリにパックされたオブジェクトは通常、解凍されて宛先に格納されます。これにより、両端で異なるパッキング戦略を使用できるようになりますが、両方のリポジトリをたまに再パッキングする必要がある場合もあります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
