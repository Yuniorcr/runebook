<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="6b17aa5b71b9d47ea9adc71f193314f65da5b538" translate="yes" xml:space="preserve">
          <source>When two trees are specified, the user is telling &lt;code&gt;git read-tree&lt;/code&gt; the following:</source>
          <target state="translated">2つのツリーが指定されている場合、ユーザーは &lt;code&gt;git read-tree&lt;/code&gt; に次のように伝えます。</target>
        </trans-unit>
        <trans-unit id="0b1c4e2bbef526c82867f5bdebb7889317040a32" translate="yes" xml:space="preserve">
          <source>When unpacking a corrupt packfile, the command dies at the first corruption. This flag tells it to keep going and make the best effort to recover as many objects as possible.</source>
          <target state="translated">破損したパックファイルを解凍すると、最初の破損でコマンドが終了します。このフラグは、コマンドを続行し、可能な限り多くのオブジェクトを回復するための最善の努力をするように指示します。</target>
        </trans-unit>
        <trans-unit id="5a3166bdcd39ee71b5c10c4011020b35e1491541" translate="yes" xml:space="preserve">
          <source>When unspecified, all references, after filtering done with --heads and --tags, are shown. When &amp;lt;refs&amp;gt;&amp;hellip;​ are specified, only references matching the given patterns are displayed.</source>
          <target state="translated">指定しない場合、-headsおよび--tagsでフィルタリングした後のすべての参照が表示されます。&amp;lt;refs&amp;gt;&amp;hellip;を指定すると、指定したパターンに一致する参照のみが表示されます。</target>
        </trans-unit>
        <trans-unit id="fa62c673234c7d272766be9489825a6b1fba8b8c" translate="yes" xml:space="preserve">
          <source>When used in conjunction with the untracked cache, it can further improve performance by avoiding the cost of scanning the entire working directory looking for new files.</source>
          <target state="translated">追跡されていないキャッシュと併用すると、新しいファイルを探すために作業ディレクトリ全体をスキャンするコストを回避して、パフォーマンスをさらに向上させることができます。</target>
        </trans-unit>
        <trans-unit id="4699c35836688678c5cc37f1963f740eb7581527" translate="yes" xml:space="preserve">
          <source>When used together with &lt;code&gt;-B&lt;/code&gt;, omit also the preimage in the deletion part of a delete/create pair.</source>
          <target state="translated">&lt;code&gt;-B&lt;/code&gt; と一緒に使用すると、削除/作成ペアの削除部分のプリイメージも省略されます。</target>
        </trans-unit>
        <trans-unit id="81ec7d099c83d3c361cd6013c655cfcd1bc1c8c9" translate="yes" xml:space="preserve">
          <source>When used with -C/-c/--amend options, or when committing after a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer. This also renews the author timestamp.</source>
          <target state="translated">C/c/c/--amend オプションと併用した場合や、競合するチェリーピックの後にコミットする場合には、結果として得られたコミットの作者はコミット者に属することを宣言します。これは作者のタイムスタンプも更新します。</target>
        </trans-unit>
        <trans-unit id="b6df5147373d036993fb497c4d7575874db40c5c" translate="yes" xml:space="preserve">
          <source>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number &lt;code&gt;n&lt;/code&gt; controls this aspect of the -B option (defaults to 50%). &lt;code&gt;-B20%&lt;/code&gt; specifies that a change with addition and deletion compared to 20% or more of the file&amp;rsquo;s size are eligible for being picked up as a possible source of a rename to another file.</source>
          <target state="translated">-Mと一緒に使用すると、完全に書き換えられたファイルも名前変更のソースと見なされ（通常-Mは、名前が変更されたソースとして表示されなくなったファイルのみを考慮します）、番号 &lt;code&gt;n&lt;/code&gt; は-Bオプションのこの側面を制御します（デフォルトは50％）。 &lt;code&gt;-B20%&lt;/code&gt; は、ファイルのサイズの20％以上と比較した追加および削除による変更が、別のファイルへの名前変更の可能なソースとして取得されるのに適格であることを指定します。</target>
        </trans-unit>
        <trans-unit id="372d4fbee27ed51979ac65f708d9745903af8bc0" translate="yes" xml:space="preserve">
          <source>When used with &lt;code&gt;--all&lt;/code&gt; print description for all recognized commands. This is the default.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; とともに使用すると、認識されたすべてのコマンドの説明が表示されます。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="9b2454d94f74e12e4789baf13180d6dd9add197c" translate="yes" xml:space="preserve">
          <source>When used with &lt;code&gt;-ad&lt;/code&gt;, any unreachable objects from existing packs will be appended to the end of the packfile instead of being removed. In addition, any unreachable loose objects will be packed (and their loose counterparts removed).</source>
          <target state="translated">&lt;code&gt;-ad&lt;/code&gt; と一緒に使用すると、既存のパックから到達できないオブジェクトは、削除されるのではなく、パックファイルの最後に追加されます。さらに、到達できないルーズオブジェクトは梱包されます（ルーズな対応物は削除されます）。</target>
        </trans-unit>
        <trans-unit id="f93c22c6857bec96ca286a73d77a732b313ba7be" translate="yes" xml:space="preserve">
          <source>When using --error-unmatch to expand the user supplied &amp;lt;file&amp;gt; (i.e. path pattern) arguments to paths, pretend that paths which were removed in the index since the named &amp;lt;tree-ish&amp;gt; are still present. Using this option with &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt; options does not make any sense.</source>
          <target state="translated">--error-unmatchを使用してユーザーが指定した&amp;lt;file&amp;gt;（パスパターン）引数をパスに展開する場合、名前付きの&amp;lt;tree-ish&amp;gt;がまだ存在するため、インデックスから削除されたパスを偽装します。このオプションを &lt;code&gt;-s&lt;/code&gt; または &lt;code&gt;-u&lt;/code&gt; オプションと一緒に使用しても意味がありません。</target>
        </trans-unit>
        <trans-unit id="c409615f2beb16e70015d6d6f46a1b549d1fd7f1" translate="yes" xml:space="preserve">
          <source>When using --hash (and not --dereference) the output format is: &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt;</source>
          <target state="translated">--hashを使用する場合（--dereferenceではない）、出力形式は次のとおりです： &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4048d2aa35caefecff5d81ef992bce0c4fb7143f" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;--full-history&lt;/code&gt;, Git walks every edge. This will discover the commits &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; and the merge &lt;code&gt;M&lt;/code&gt;, but also will reveal the merge commits &lt;code&gt;O&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt;. With parent rewriting, the resulting graph is:</source>
          <target state="translated">&lt;code&gt;--full-history&lt;/code&gt; を使用すると、Gitはすべてのエッジをウォークします。これにより、コミット &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; およびマージ &lt;code&gt;M&lt;/code&gt; が検出されますが、マージコミット &lt;code&gt;O&lt;/code&gt; と &lt;code&gt;P&lt;/code&gt; も明らかになります。親を書き換えると、結果のグラフは次のようになります。</target>
        </trans-unit>
        <trans-unit id="081b8dc63c3bf5b426e1b11153b55d3d12af50bd" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;--get&lt;/code&gt;, and the requested variable is not found, behave as if &amp;lt;value&amp;gt; were the value assigned to the that variable.</source>
          <target state="translated">&lt;code&gt;--get&lt;/code&gt; を使用し、要求された変数が見つからない場合、&amp;lt;value&amp;gt;がその変数に割り当てられた値であるかのように動作します。</target>
        </trans-unit>
        <trans-unit id="a0e35ae72d386768f718c98e1facc75ecb16026b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;git diff&lt;/code&gt; to compare with work tree files, do not consider stat-only change as changed. Instead, silently run &lt;code&gt;git update-index --refresh&lt;/code&gt; to update the cached stat information for paths whose contents in the work tree match the contents in the index. This option defaults to true. Note that this affects only &lt;code&gt;git diff&lt;/code&gt; Porcelain, and not lower level &lt;code&gt;diff&lt;/code&gt; commands such as &lt;code&gt;git diff-files&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git diff&lt;/code&gt; を使用してワークツリーファイルと比較する場合、stat-o​​nlyの変更が変更されたと見なさないでください。代わりに、静かに &lt;code&gt;git update-index --refresh&lt;/code&gt; を実行して、作業ツリーのコンテンツがインデックスのコンテンツと一致するパスのキャッシュされた統計情報を更新します。このオプションのデフォルトはtrueです。これは &lt;code&gt;git diff&lt;/code&gt; Porcelainにのみ影響し、 &lt;code&gt;git diff-files&lt;/code&gt; などの低レベルの &lt;code&gt;diff&lt;/code&gt; コマンドには影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b88f8d37a4b8b52b11aa1a9190d81927513fc837" translate="yes" xml:space="preserve">
          <source>When using either the ssh:// or file:// transport, the GIT_PROTOCOL environment variable must be set explicitly to include &quot;version=2&quot;.</source>
          <target state="translated">ssh://または file://トランスポートを使用する場合、環境変数 GIT_PROTOCOL に &quot;version=2&quot; を含めるように明示的に設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="0ba437f399f8167203a8f1358d574f4341e76291" translate="yes" xml:space="preserve">
          <source>When using multiple --branches or --tags, &lt;code&gt;git svn&lt;/code&gt; does not automatically handle name collisions (for example, if two branches from different paths have the same name, or if a branch and a tag have the same name). In these cases, use &lt;code&gt;init&lt;/code&gt; to set up your Git repository then, before your first &lt;code&gt;fetch&lt;/code&gt;, edit the $GIT_DIR/config file so that the branches and tags are associated with different name spaces. For example:</source>
          <target state="translated">複数の--branchesまたは--tagsを使用する場合、 &lt;code&gt;git svn&lt;/code&gt; は名前の衝突を自動的に処理しません（たとえば、異なるパスからの2つのブランチが同じ名前である場合、またはブランチとタグが同じ名前である場合）。このような場合は、 &lt;code&gt;init&lt;/code&gt; を使用してGitリポジトリを設定してから、最初の &lt;code&gt;fetch&lt;/code&gt; 前に、$ GIT_DIR / configファイルを編集して、ブランチとタグが異なる名前空間に関連付けられるようにします。例えば：</target>
        </trans-unit>
        <trans-unit id="66eede648bb8458831446e45d1bace5161e3e57f" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--simplify-merges&lt;/code&gt; option, the commits &lt;code&gt;O&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; disappear from the results. This is because the rewritten second parents of &lt;code&gt;O&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; are reachable from their first parents. Those edges are removed and then the commits look like single-parent commits that are TREESAME to their parent. This also happens to the commit &lt;code&gt;N&lt;/code&gt;, resulting in a history view as follows:</source>
          <target state="translated">&lt;code&gt;--simplify-merges&lt;/code&gt; オプションを使用すると、コミット &lt;code&gt;O&lt;/code&gt; と &lt;code&gt;P&lt;/code&gt; が結果から消えます。これは、書き直された &lt;code&gt;O&lt;/code&gt; と &lt;code&gt;P&lt;/code&gt; の2番目の親が、最初の親から到達可能であるためです。これらのエッジが削除されると、コミットは、親にとってTREESAMEである単一の親のコミットのように見えます。これはコミット &lt;code&gt;N&lt;/code&gt; にも発生し、次のような履歴ビューが表示されます。</target>
        </trans-unit>
        <trans-unit id="bb2aee242441b06254e02f3a0a2e1341fe75fee4" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;--verify&lt;/code&gt; flag, the command requires an exact path:</source>
          <target state="translated">&lt;code&gt;--verify&lt;/code&gt; フラグを使用する場合、コマンドには正確なパスが必要です。</target>
        </trans-unit>
        <trans-unit id="33199341df233e06da35e7d1be5de579f81a31d0" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;refspec&lt;/code&gt; capability, git normally updates the private ref on successful push. This update is disabled when the remote-helper declares the capability &lt;code&gt;no-private-update&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refspec&lt;/code&gt; 機能を使用する場合、gitは通常、プッシュが成功するとプライベート参照を更新します。リモートヘルパーが機能 &lt;code&gt;no-private-update&lt;/code&gt; を宣言すると、この更新は無効になります。</target>
        </trans-unit>
        <trans-unit id="bea3a627ae5a8f7b20a77e60b7a062e9084db269" translate="yes" xml:space="preserve">
          <source>When using the default mode, &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; both have a TREESAME parent, so those edges are walked and the others are ignored. The resulting history graph is:</source>
          <target state="translated">デフォルトモードを使用する場合、 &lt;code&gt;N&lt;/code&gt; と &lt;code&gt;R&lt;/code&gt; の両方にTREESAME親があるため、これらのエッジはウォークされ、他のエッジは無視されます。結果の履歴グラフは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9344e268a1ce18a0fd23fc1ab7349b109ba09f95" translate="yes" xml:space="preserve">
          <source>When using the deprecated &lt;code&gt;[section.subsection]&lt;/code&gt; syntax, changing a value will result in adding a multi-line key instead of a change, if the subsection is given with at least one uppercase character. For example when the config looks like</source>
          <target state="translated">非推奨の &lt;code&gt;[section.subsection]&lt;/code&gt; 構文を使用する場合、サブセクションに少なくとも1つの大文字が指定されていると、値を変更すると、変更ではなく複数行のキーが追加されます。たとえば、設定が次のようになっている場合</target>
        </trans-unit>
        <trans-unit id="d587eeb587978498a5260d6dbb9ec4ed92ae5139" translate="yes" xml:space="preserve">
          <source>When using the git:// transport, you can request to use protocol v2 by sending &quot;version=2&quot; as an extra parameter:</source>
          <target state="translated">git://トランスポートを使用する場合は、追加パラメータとして &quot;version=2&quot; を送ることでプロトコル v2 を使用するようにリクエストすることができます。</target>
        </trans-unit>
        <trans-unit id="32ff889e17de28054dd0cab540306ba1d148a08f" translate="yes" xml:space="preserve">
          <source>When using the http:// or https:// transport a client makes a &quot;smart&quot; info/refs request as described in &lt;code&gt;http-protocol.txt&lt;/code&gt; and requests that v2 be used by supplying &quot;version=2&quot; in the &lt;code&gt;Git-Protocol&lt;/code&gt; header.</source>
          <target state="translated">http：//またはhttps：//トランスポートを使用する場合、クライアントは &lt;code&gt;http-protocol.txt&lt;/code&gt; で説明されているように「スマート」なinfo / refsリクエストを作成し、 &lt;code&gt;Git-Protocol&lt;/code&gt; で「version = 2」を指定してv2を使用するようリクエストします。ヘッダ。</target>
        </trans-unit>
        <trans-unit id="1119c741c1d5ff1dc358a8c521dcf54497e7a91a" translate="yes" xml:space="preserve">
          <source>When we discuss merges we&amp;rsquo;ll also see the special name MERGE_HEAD, which refers to the other branch that we&amp;rsquo;re merging in to the current branch.</source>
          <target state="translated">マージについて説明すると、MERGE_HEADという特別な名前も表示されます。これは、現在のブランチにマージしている他のブランチを指します。</target>
        </trans-unit>
        <trans-unit id="26b492dec7c9b7098cc4171f2408a6f7f7e92986" translate="yes" xml:space="preserve">
          <source>When we need to be precise, we will use the word &quot;branch&quot; to mean a line of development, and &quot;branch head&quot; (or just &quot;head&quot;) to mean a reference to the most recent commit on a branch. In the example above, the branch head named &quot;A&quot; is a pointer to one particular commit, but we refer to the line of three commits leading up to that point as all being part of &quot;branch A&quot;.</source>
          <target state="translated">正確な表現が必要な場合は、&quot;branch&quot; という単語を使って開発ラインを意味し、&quot;branch head&quot; (または単に &quot;head&quot;)という単語を使ってブランチの最新のコミットへの参照を意味するようにします。上の例では、&quot;A&quot; という名前のブランチの先頭はある特定のコミットへのポインタですが、そこに至るまでの 3 つのコミットの行はすべて &quot;branch A&quot; の一部であると考えています。</target>
        </trans-unit>
        <trans-unit id="af865a0e18421a331501b917b6b084d9f08c05af" translate="yes" xml:space="preserve">
          <source>When we want to find out what commits in &lt;code&gt;M&lt;/code&gt; are contaminated with the bug introduced by &lt;code&gt;D&lt;/code&gt; and need fixing, however, we might want to view only the subset of &lt;code&gt;D..M&lt;/code&gt; that are actually descendants of &lt;code&gt;D&lt;/code&gt;, i.e. excluding &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;K&lt;/code&gt;. This is exactly what the &lt;code&gt;--ancestry-path&lt;/code&gt; option does. Applied to the &lt;code&gt;D..M&lt;/code&gt; range, it results in:</source>
          <target state="translated">私たちがコミット何を知りたい場合は &lt;code&gt;M&lt;/code&gt; によって導入されたバグで汚染されている &lt;code&gt;D&lt;/code&gt; と必要性固定、しかし、我々はのサブセットだけを表示したい場合があります &lt;code&gt;D..M&lt;/code&gt; 実際の子孫である &lt;code&gt;D&lt;/code&gt; を除くすなわち、 &lt;code&gt;C&lt;/code&gt; および &lt;code&gt;K&lt;/code&gt; を。これは、 &lt;code&gt;--ancestry-path&lt;/code&gt; オプションが行うこととまったく同じです。 &lt;code&gt;D..M&lt;/code&gt; の範囲に適用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="bd2b751f52f03b9f39eaea429dccc385cd6f8cb7" translate="yes" xml:space="preserve">
          <source>When writing a script that is expected to handle random user-input, it is a good practice to make it explicit which arguments are which by placing disambiguating &lt;code&gt;--&lt;/code&gt; at appropriate places.</source>
          <target state="translated">ランダムなユーザ入力を処理するために期待されているスクリプトを書くときには、引数が一義化配置することにより、どのであることが明示的に作成することをお勧めし &lt;code&gt;--&lt;/code&gt; 適切な場所で。</target>
        </trans-unit>
        <trans-unit id="ec9cac719dc2571ad31301b21a571a63039a88c5" translate="yes" xml:space="preserve">
          <source>When writing remote-helpers for decentralized version control systems, it is advised to keep a local copy of the repository to interact with, and to let the private namespace refs point to this local repository, while the refs/remotes namespace is used to track the remote repository.</source>
          <target state="translated">分散型バージョン管理システム用のリモートヘルパーを書くときは、相互作用するリポジトリのローカルコピーを保持し、プライベート名前空間 refs がこのローカルリポジトリを指すようにし、refs/remotes 名前空間がリモートリポジトリを追跡するために使用されるようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="20c75e316d5f2bc9ee11a82eb08a64c8e94c8af1" translate="yes" xml:space="preserve">
          <source>When writing, the new value is written to the repository local configuration file by default, and options &lt;code&gt;--system&lt;/code&gt;, &lt;code&gt;--global&lt;/code&gt;, &lt;code&gt;--worktree&lt;/code&gt;, &lt;code&gt;--file &amp;lt;filename&amp;gt;&lt;/code&gt; can be used to tell the command to write to that location (you can say &lt;code&gt;--local&lt;/code&gt; but that is the default).</source>
          <target state="translated">書き込む場合、新しい値はデフォルトでリポジトリのローカル設定ファイルに書き込まれ、オプション &lt;code&gt;--system&lt;/code&gt; 、-- &lt;code&gt;--global&lt;/code&gt; 、-- &lt;code&gt;--worktree&lt;/code&gt; 、-- &lt;code&gt;--file &amp;lt;filename&amp;gt;&lt;/code&gt; を使用して、コマンドにその場所に書き込むよう指示できます（ &lt;code&gt;--local&lt;/code&gt; と言うことができますが、これがデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="cd8a515ddc50bbc57c4721fd114c9828b7d7e56b" translate="yes" xml:space="preserve">
          <source>When you are happy with the state of this change, you can merge it into the &quot;test&quot; branch in preparation to make it public:</source>
          <target state="translated">この変更の状態に満足したら、公開に備えて &quot;test &quot;ブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="778f60f4a64466f8d291144e663a70b4838a03f8" translate="yes" xml:space="preserve">
          <source>When you are in the middle of something, you learn that there are upstream changes that are possibly relevant to what you are doing. When your local changes do not conflict with the changes in the upstream, a simple &lt;code&gt;git pull&lt;/code&gt; will let you move forward.</source>
          <target state="translated">あなたが何かの真ん中にいるとき、あなたはあなたがしていることに関連している可能性がある上流の変更があることを学びます。ローカルでの変更がアップストリームでの変更と競合しない場合は、単純な &lt;code&gt;git pull&lt;/code&gt; で先に進むことができます。</target>
        </trans-unit>
        <trans-unit id="f6b623b307a4c06027202dc5b8021ae4a369fe95" translate="yes" xml:space="preserve">
          <source>When you are in the middle of something, your boss comes in and demands that you fix something immediately. Traditionally, you would make a commit to a temporary branch to store your changes away, and return to your original branch to make the emergency fix, like this:</source>
          <target state="translated">何かをしている最中に上司が来て、すぐに何かを修正するように要求してきます。伝統的には、一時的なブランチにコミットして変更を保存し、元のブランチに戻って緊急修正を行うのが一般的です。</target>
        </trans-unit>
        <trans-unit id="5dab203d26aab56f5ab1012e5091a813403ff2db" translate="yes" xml:space="preserve">
          <source>When you are interested in finding the origin for lines 40-60 for file &lt;code&gt;foo&lt;/code&gt;, you can use the &lt;code&gt;-L&lt;/code&gt; option like so (they mean the same thing &amp;mdash; both ask for 21 lines starting at line 40):</source>
          <target state="translated">ファイル &lt;code&gt;foo&lt;/code&gt; の 40〜60行目のオリジンを見つけることに興味がある場合は、次のように &lt;code&gt;-L&lt;/code&gt; オプションを使用できます（これらは同じ意味です。どちらも40行目から21行を要求します）。</target>
        </trans-unit>
        <trans-unit id="709f7df580972f427522b82ef732f913e20c2078" translate="yes" xml:space="preserve">
          <source>When you are not interested in changes older than version v2.6.18, or changes older than 3 weeks, you can use revision range specifiers similar to &lt;code&gt;git rev-list&lt;/code&gt;:</source>
          <target state="translated">バージョンv2.6.18より古い変更、または3週間より古い変更に関心がない場合は、 &lt;code&gt;git rev-list&lt;/code&gt; と同様のリビジョン範囲指定子を使用できます。</target>
        </trans-unit>
        <trans-unit id="da9f31c43174e26846193d472d4442e982c36d7b" translate="yes" xml:space="preserve">
          <source>When you are working in a small closely knit group, it is not unusual to interact with the same repository over and over again. By defining &lt;code&gt;remote&lt;/code&gt; repository shorthand, you can make it easier:</source>
          <target state="translated">密接に結びついた小さなグループで作業している場合、同じリポジトリを何度も何度も操作することは珍しくありません。 &lt;code&gt;remote&lt;/code&gt; リポジトリの省略表現を定義することで、次のことが簡単になります。</target>
        </trans-unit>
        <trans-unit id="9ac50cc4cb199a994adc57ff3704f94a4fe6fd25" translate="yes" xml:space="preserve">
          <source>When you ask &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; to show the conflicts, it runs a three-way diff between the conflicted merge results in the work tree with stages 2 and 3 to show only hunks whose contents come from both sides, mixed (in other words, when a hunk&amp;rsquo;s merge results come only from stage 2, that part is not conflicting and is not shown. Same for stage 3).</source>
          <target state="translated">&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;に競合を表示するよう依頼すると、ステージ2と3のワークツリーで競合したマージ結果の間に3方向の差分が実行され、内容が両側から来ているハンクのみが表示されます（他のつまり、ハンクのマージ結果がステージ2からのみ取得される場合、その部分は競合せず、表示されません。ステージ3でも同じです。</target>
        </trans-unit>
        <trans-unit id="3f0add0b9e7571c844c4ae8fb98b59f1c64d874a" translate="yes" xml:space="preserve">
          <source>When you run &lt;code&gt;git checkout &amp;lt;something&amp;gt;&lt;/code&gt; or &lt;code&gt;git switch &amp;lt;something&amp;gt;&lt;/code&gt; and only have one remote, it may implicitly fall back on checking out and tracking e.g. &lt;code&gt;origin/&amp;lt;something&amp;gt;&lt;/code&gt;. This stops working as soon as you have more than one remote with a &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; reference. This setting allows for setting the name of a preferred remote that should always win when it comes to disambiguation. The typical use-case is to set this to &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="translated">あなたが実行すると、 &lt;code&gt;git checkout &amp;lt;something&amp;gt;&lt;/code&gt; または &lt;code&gt;git switch &amp;lt;something&amp;gt;&lt;/code&gt; のみ、リモート1を持っている、それが暗黙のうちにチェックアウトすると、例えば追跡に頼ること &lt;code&gt;origin/&amp;lt;something&amp;gt;&lt;/code&gt; 。これは、 &lt;code&gt;&amp;lt;something&amp;gt;&lt;/code&gt; 参照を持つ複数のリモートがあるとすぐに機能を停止します。この設定により、明確化に関して常に優先されるリモートの名前を設定できます。典型的なユースケースは、これを &lt;code&gt;origin&lt;/code&gt; に設定することです。</target>
        </trans-unit>
        <trans-unit id="9f93e702904ad75a7ffcc41597ebc2474895e0b0" translate="yes" xml:space="preserve">
          <source>When you start a 3-way merge with an index file that is already populated, it is assumed that it represents the state of the files in your work tree, and you can even have files with changes unrecorded in the index file. It is further assumed that this state is &quot;derived&quot; from the stage 2 tree. The 3-way merge refuses to run if it finds an entry in the original index file that does not match stage 2.</source>
          <target state="translated">すでにインデックスファイルが埋め込まれている状態で3ウェイマージを開始すると、それが作業ツリー内のファイルの状態を表していると想定され、インデックスファイルに記録されていない変更があるファイルを持つこともできます。さらに、この状態はステージ2のツリーから「派生した」状態であると仮定されています。3 者間マージは、元のインデックスファイルにステージ 2 と一致しないエントリが見つかった場合、実行を拒否します。</target>
        </trans-unit>
        <trans-unit id="6831d00e1f830a484b6c5799e343f596bbc55899" translate="yes" xml:space="preserve">
          <source>When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing with an upstream release point, you may not want to make an unnecessary merge commit.</source>
          <target state="translated">上流のリリースポイントとの同期など、たまたまタグ付けされたコミットにつながる作業を統合したい場合は、不要なマージコミットをしたくないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2f28e5d62e5a87453e903e81e941382b8ac566c1" translate="yes" xml:space="preserve">
          <source>When you&amp;rsquo;re ready, just run</source>
          <target state="translated">準備ができたら、実行してください</target>
        </trans-unit>
        <trans-unit id="4aa6b6296b8d97b342099d335ec15bc55634ad41" translate="yes" xml:space="preserve">
          <source>When your topic branch is long-lived, however, your topic branch would end up having many such &quot;Merge from master&quot; commits on it, which would unnecessarily clutter the development history. Readers of the Linux kernel mailing list may remember that Linus complained about such too frequent test merges when a subsystem maintainer asked to pull from a branch full of &quot;useless merges&quot;.</source>
          <target state="translated">しかし、トピックブランチの寿命が長い場合、そのトピックブランチにはそのような &quot;master からのマージ&quot; コミットが多数存在し、開発履歴が不必要に乱雑になってしまいます。Linux カーネルメーリングリストの読者は、サブシステムのメンテナが「無駄なマージ」でいっぱいのブランチから引っ張ってくるように頼んだときに、Linus がこのような頻繁すぎるテストマージに不満を持っていたことを覚えているかもしれません。</target>
        </trans-unit>
        <trans-unit id="bd4128428344ae6c28977b2bc5cf00953da1175f" translate="yes" xml:space="preserve">
          <source>When your topic branch modifies an overlapping area that your master branch (or upstream) touched since your topic branch forked from it, you may want to test it with the latest master, even before your topic branch is ready to be pushed upstream:</source>
          <target state="translated">トピック ブランチがマスター ブランチ (または上流)からフォークしてから触れた重複領域を変更する場合は、トピック ブランチが上流にプッシュされる準備が整う前であっても、最新のマスターを使用してテストしたい場合があります。</target>
        </trans-unit>
        <trans-unit id="4f4eaf255ffc69df0530167a4810c74e9370cd43" translate="yes" xml:space="preserve">
          <source>Whenever possible, section headings should clearly describe the task they explain how to do, in language that requires no more knowledge than necessary: for example, &quot;importing patches into a project&quot; rather than &quot;the &lt;code&gt;git am&lt;/code&gt; command&quot;</source>
          <target state="translated">可能な限り、セクションの見出しには、その方法を説明するタスクを、必要以上の知識を必要としない言語で明確に説明する必要があります。たとえば、「 &lt;code&gt;git am&lt;/code&gt; コマンド」ではなく「プロジェクトへのパッチのインポート」</target>
        </trans-unit>
        <trans-unit id="11683716a14fb2e59c3ad4d48a607606706a0329" translate="yes" xml:space="preserve">
          <source>Where &quot;oldsha1&quot; is the 40 character hexadecimal value previously stored in &amp;lt;ref&amp;gt;, &quot;newsha1&quot; is the 40 character hexadecimal value of &amp;lt;newvalue&amp;gt; and &quot;committer&quot; is the committer&amp;rsquo;s name, email address and date in the standard Git committer ident format.</source>
          <target state="translated">「oldsha1」は以前に&amp;lt;ref&amp;gt;に保存された40文字の16進値、「newsha1」は&amp;lt;newvalue&amp;gt;の40文字の16進値、「committer」は標準のGitコミッターID形式のコミッターの名前、メールアドレス、日付です。</target>
        </trans-unit>
        <trans-unit id="9a6682bd90b10ed7b65387d46ac6e3098ba208ce" translate="yes" xml:space="preserve">
          <source>Where all fields are as described above and &quot;message&quot; is the value supplied to the -m option.</source>
          <target state="translated">ここで、すべてのフィールドは上記の通りであり、&quot;message &quot;は-mオプションに与えられた値である。</target>
        </trans-unit>
        <trans-unit id="1047cdb3a9504c1e49ba180691c6de133fb29736" translate="yes" xml:space="preserve">
          <source>Where to create the Git repository. If not provided, the last component in the p4 depot path is used to create a new directory.</source>
          <target state="translated">Git リポジトリを作成する場所。用意されていない場合は、p4 depotパスの最後のコンポーネントが新しいディレクトリの作成に使用されます。</target>
        </trans-unit>
        <trans-unit id="de8afe671960d7a395defa2e40a80901d96e2485" translate="yes" xml:space="preserve">
          <source>Whereas &lt;code&gt;--batch-check='%(objectname) %(objecttype)'&lt;/code&gt; would produce:</source>
          <target state="translated">一方、 &lt;code&gt;--batch-check='%(objectname) %(objecttype)'&lt;/code&gt; は次のように生成します。</target>
        </trans-unit>
        <trans-unit id="92669e9b8b127c2ba15691914d72dae97b880d0d" translate="yes" xml:space="preserve">
          <source>Whether Git detects directory renames, affecting what happens at merge time to new files added to a directory on one side of history when that directory was renamed on the other side of history. If merge.directoryRenames is set to &quot;false&quot;, directory rename detection is disabled, meaning that such new files will be left behind in the old directory. If set to &quot;true&quot;, directory rename detection is enabled, meaning that such new files will be moved into the new directory. If set to &quot;conflict&quot;, a conflict will be reported for such paths. If merge.renames is false, merge.directoryRenames is ignored and treated as false. Defaults to &quot;conflict&quot;.</source>
          <target state="translated">Git がディレクトリのリネームを検出するかどうか。これは、履歴の一方の側のディレクトリに追加された新しいファイルが履歴の他方の側でリネームされたときにマージ時にどうなるかに影響します。merge.directoryRenames を &quot;false&quot; に設定すると、ディレクトリ名の変更を検出できなくなります。true&quot; に設定すると、ディレクトリ名変更の検出が有効になり、新しいファイルが新しいディレクトリに移動されます。conflict&quot; に設定されている場合は、そのようなパスに対して競合が報告されます。merge.renames が false に設定されている場合、 merge.directoryRenames は無視され、false として扱われます。デフォルトは &quot;conflict&quot; です。</target>
        </trans-unit>
        <trans-unit id="6720b94e3bf2c12c61b3c14de0415d18239394a0" translate="yes" xml:space="preserve">
          <source>Whether Git detects renames. If set to &quot;false&quot;, rename detection is disabled. If set to &quot;true&quot;, basic rename detection is enabled. Defaults to the value of diff.renames.</source>
          <target state="translated">Git がリネームを検出するかどうか。false&quot; に設定すると、リネームの検出は無効になります。true&quot; に設定すると、基本的なリネーム検出が有効になります。デフォルトは diff.renames の値です。</target>
        </trans-unit>
        <trans-unit id="d1f68ec7a1f81e21d54ab2e76eaccedf11117ff8" translate="yes" xml:space="preserve">
          <source>Whether and how Git detects renames in &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; and &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; . If set to &quot;false&quot;, rename detection is disabled. If set to &quot;true&quot;, basic rename detection is enabled. If set to &quot;copies&quot; or &quot;copy&quot;, Git will detect copies, as well. Defaults to the value of diff.renames.</source>
          <target state="translated">Gitが&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;および&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]で&lt;/a&gt;名前変更を検出するかどうか、およびその方法。 「false」に設定すると、名前変更の検出が無効になります。 「true」に設定すると、基本的な名前変更の検出が有効になります。 「コピー」または「コピー」に設定すると、Gitはコピーも検出します。デフォルトはdiff.renamesの値です。</target>
        </trans-unit>
        <trans-unit id="cd914284b278d491020fec9d972b776a56df2f14" translate="yes" xml:space="preserve">
          <source>Whether and how Git detects renames. If set to &quot;false&quot;, rename detection is disabled. If set to &quot;true&quot;, basic rename detection is enabled. If set to &quot;copies&quot; or &quot;copy&quot;, Git will detect copies, as well. Defaults to true. Note that this affects only &lt;code&gt;git diff&lt;/code&gt; Porcelain like &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; and &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, and not lower level commands such as &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt;.</source>
          <target state="translated">Gitが名前変更を検出するかどうか、およびその方法。 「false」に設定すると、名前変更の検出が無効になります。 「true」に設定すると、基本的な名前変更の検出が有効になります。 「コピー」または「コピー」に設定すると、Gitはコピーも検出します。デフォルトはtrueです。これは&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;や&lt;a href=&quot;git-log&quot;&gt;git-log [1]の&lt;/a&gt;ような &lt;code&gt;git diff&lt;/code&gt; Porcelainにのみ影響し、&lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1]&lt;/a&gt;などの低レベルのコマンドには影響しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2329b3f81f31d1e7aac7efc37e396ae5ccc9b5fe" translate="yes" xml:space="preserve">
          <source>Whether git should follow HTTP redirects. If set to &lt;code&gt;true&lt;/code&gt;, git will transparently follow any redirect issued by a server it encounters. If set to &lt;code&gt;false&lt;/code&gt;, git will treat all redirects as errors. If set to &lt;code&gt;initial&lt;/code&gt;, git will follow redirects only for the initial request to a remote, but not for subsequent follow-up HTTP requests. Since git uses the redirected URL as the base for the follow-up requests, this is generally sufficient. The default is &lt;code&gt;initial&lt;/code&gt;.</source>
          <target state="translated">gitがHTTPリダイレクトに従うかどうか。 &lt;code&gt;true&lt;/code&gt; に設定すると、gitは、サーバーが発行したリダイレクトを透過的にたどります。 &lt;code&gt;false&lt;/code&gt; に設定すると、gitはすべてのリダイレクトをエラーとして扱います。 &lt;code&gt;initial&lt;/code&gt; に設定すると、gitはリモートへの最初のリクエストに対してのみリダイレクトに従い、後続のフォローアップHTTPリクエストに対しては行いません。 gitはリダイレクトされたURLをフォローアップリクエストのベースとして使用するため、通常はこれで十分です。デフォルトは &lt;code&gt;initial&lt;/code&gt; 値です。</target>
        </trans-unit>
        <trans-unit id="cd0092aedf4252969afafd8803ba8faf98999493" translate="yes" xml:space="preserve">
          <source>Whether that update is allowed without &lt;code&gt;--force&lt;/code&gt; depends on the ref namespace it&amp;rsquo;s being fetched to, the type of object being fetched, and whether the update is considered to be a fast-forward. Generally, the same rules apply for fetching as when pushing, see the &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; section of &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; for what those are. Exceptions to those rules particular to &lt;code&gt;git fetch&lt;/code&gt; are noted below.</source>
          <target state="translated">その更新が &lt;code&gt;--force&lt;/code&gt; なしで許可されるかどうかは、フェッチ先のref名前空間、フェッチされるオブジェクトのタイプ、および更新が早送りと見なされるかどうかによって異なります。一般に、フェッチの場合と同じルールがフェッチの場合に適用されます。それらが何であるかについては、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;の &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; セクションを参照してください。 &lt;code&gt;git fetch&lt;/code&gt; に固有のルールの例外を以下に示します。</target>
        </trans-unit>
        <trans-unit id="9c31395d6226db0f96527cf13d7284a32596aaef" translate="yes" xml:space="preserve">
          <source>Whether the CVS server interface is enabled for this repository. See &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt;.</source>
          <target state="translated">このリポジトリーでCVSサーバー・インターフェースが有効になっているかどうか。&lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e99c94b5e67663cef6460c2b09cda34348e975de" translate="yes" xml:space="preserve">
          <source>Whether to enable the grouping of projects by category on the project list page. The category of a project is determined by the &lt;code&gt;$GIT_DIR/category&lt;/code&gt; file or the &lt;code&gt;gitweb.category&lt;/code&gt; variable in each repository&amp;rsquo;s configuration. Disabled by default (set to 0).</source>
          <target state="translated">プロジェクトリストページでカテゴリごとにプロジェクトのグループ化を有効にするかどうか。プロジェクトのカテゴリは、 &lt;code&gt;$GIT_DIR/category&lt;/code&gt; ファイル、または各リポジトリの構成の &lt;code&gt;gitweb.category&lt;/code&gt; 変数によって決定されます。デフォルトでは無効です（0に設定）。</target>
        </trans-unit>
        <trans-unit id="be60442dc9a2bb750c3ffb3e91f602fa8cf454b7" translate="yes" xml:space="preserve">
          <source>Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge. True by default.</source>
          <target state="translated">マージ終了時にORIG_HEADとマージ結果のdiffstatを表示するかどうか。デフォルトではTrueです。</target>
        </trans-unit>
        <trans-unit id="e6d010b4fa5fb27d92c64dc2f59319c4e77b544c" translate="yes" xml:space="preserve">
          <source>Whether to show a diffstat of what changed upstream since the last rebase. False by default.</source>
          <target state="translated">前回のリベース以降に上流で変更された内容の diffstat を表示するかどうか。デフォルトでは False です。</target>
        </trans-unit>
        <trans-unit id="2153c59644d7df4b2ed210d8ef453074b1a6c2ac" translate="yes" xml:space="preserve">
          <source>Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file. See &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; for details.</source>
          <target state="translated">システム全体の$（prefix）/ etc / gitconfigファイルから設定の読み取りをスキップするかどうか。詳細については、&lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7c8173d7da296bd9c5f5aef35e3d739c8852bc79" translate="yes" xml:space="preserve">
          <source>Whether to skip reading settings from the system-wide &lt;code&gt;$(prefix)/etc/gitconfig&lt;/code&gt; file. This environment variable can be used along with &lt;code&gt;$HOME&lt;/code&gt; and &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; to create a predictable environment for a picky script, or you can set it temporarily to avoid using a buggy &lt;code&gt;/etc/gitconfig&lt;/code&gt; file while waiting for someone with sufficient permissions to fix it.</source>
          <target state="translated">システム全体の &lt;code&gt;$(prefix)/etc/gitconfig&lt;/code&gt; ファイルから設定の読み取りをスキップするかどうか。この環境変数を &lt;code&gt;$HOME&lt;/code&gt; および &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; と一緒に使用して、選択可能なスクリプトの予測可能な環境を作成できます。または、一時的に設定して、バグのある &lt;code&gt;/etc/gitconfig&lt;/code&gt; ファイルを使用しないようにしながら、十分な権限を持つ人がそれを修正するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="488ddc0ec5d5c663a8e8059a323ed70db5316b78" translate="yes" xml:space="preserve">
          <source>Whether to use ANSI escape sequences to add color to patches. If this is set to &lt;code&gt;always&lt;/code&gt;, &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;, &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, and &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; will use color for all patches. If it is set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;, those commands will only use color when output is to the terminal. If unset, then the value of &lt;code&gt;color.ui&lt;/code&gt; is used (&lt;code&gt;auto&lt;/code&gt; by default).</source>
          <target state="translated">ANSIエスケープシーケンスを使用してパッチに色を追加するかどうか。これが &lt;code&gt;always&lt;/code&gt; に設定されている場合、&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;、および&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;はすべてのパッチに色を使用します。 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;auto&lt;/code&gt; に設定されている場合、これらのコマンドは、出力先が端末である場合にのみ色を使用します。設定しない場合、 &lt;code&gt;color.ui&lt;/code&gt; の値が使用されます（デフォルトでは &lt;code&gt;auto&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="21386b2036d855c8d8dd6eb4c84085329fcf2561" translate="yes" xml:space="preserve">
          <source>Whether to use empty blobs as rename source.</source>
          <target state="translated">リネームソースとして空のブロブを使用するかどうか。</target>
        </trans-unit>
        <trans-unit id="63ea1a80cc99dbbdec2d362a1b57aa7468c9ed6d" translate="yes" xml:space="preserve">
          <source>Whether to verify the SSL certificate when fetching or pushing over HTTPS. Defaults to true. Can be overridden by the &lt;code&gt;GIT_SSL_NO_VERIFY&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPS経由でフェッチまたはプッシュするときにSSL証明書を検証するかどうか。デフォルトはtrueです。 &lt;code&gt;GIT_SSL_NO_VERIFY&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="ec9fdb5354be84561f27023760593b27a86cd126" translate="yes" xml:space="preserve">
          <source>Which file to place a pattern in depends on how the pattern is meant to be used.</source>
          <target state="translated">どのファイルにパターンを配置するかは、パターンがどのように使用されるかによって異なります。</target>
        </trans-unit>
        <trans-unit id="9342c5a7ca74e113fca6826c098da1e9dea46c59" translate="yes" xml:space="preserve">
          <source>Which merge strategy to choose by default when resolving notes conflicts. Must be one of &lt;code&gt;manual&lt;/code&gt;, &lt;code&gt;ours&lt;/code&gt;, &lt;code&gt;theirs&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt;, or &lt;code&gt;cat_sort_uniq&lt;/code&gt;. Defaults to &lt;code&gt;manual&lt;/code&gt;. See &quot;NOTES MERGE STRATEGIES&quot; section above for more information on each strategy.</source>
          <target state="translated">ノートの競合を解決するときにデフォルトで選択するマージ戦略。 &lt;code&gt;manual&lt;/code&gt; 、 &lt;code&gt;ours&lt;/code&gt; 、 &lt;code&gt;theirs&lt;/code&gt; 、 &lt;code&gt;union&lt;/code&gt; 、または &lt;code&gt;cat_sort_uniq&lt;/code&gt; のいずれかでなければなりません。デフォルトは &lt;code&gt;manual&lt;/code&gt; です。各戦略の詳細については、上記の「マージ戦略」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7dd75dabb694bc7182031b6cdb5c605283f3ff3a" translate="yes" xml:space="preserve">
          <source>Which merge strategy to choose by default when resolving notes conflicts. Must be one of &lt;code&gt;manual&lt;/code&gt;, &lt;code&gt;ours&lt;/code&gt;, &lt;code&gt;theirs&lt;/code&gt;, &lt;code&gt;union&lt;/code&gt;, or &lt;code&gt;cat_sort_uniq&lt;/code&gt;. Defaults to &lt;code&gt;manual&lt;/code&gt;. See &quot;NOTES MERGE STRATEGIES&quot; section of &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt; for more information on each strategy.</source>
          <target state="translated">ノートの競合を解決するときにデフォルトで選択するマージ戦略。 &lt;code&gt;manual&lt;/code&gt; 、 &lt;code&gt;ours&lt;/code&gt; 、 &lt;code&gt;theirs&lt;/code&gt; 、 &lt;code&gt;union&lt;/code&gt; 、または &lt;code&gt;cat_sort_uniq&lt;/code&gt; のいずれかでなければなりません。デフォルトは &lt;code&gt;manual&lt;/code&gt; です。各戦略の詳細については、&lt;a href=&quot;git-notes&quot;&gt;git-notes [1]の&lt;/a&gt;「NOTES MERGE STRATEGIES」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9bd73c0d97037644e549ed3fed8d2491f5cfc8e0" translate="yes" xml:space="preserve">
          <source>Which merge strategy to choose when doing a notes merge into refs/notes/&amp;lt;name&amp;gt;. This overrides the more general &quot;notes.mergeStrategy&quot;. See the &quot;NOTES MERGE STRATEGIES&quot; section above for more information on each available strategy.</source>
          <target state="translated">メモをrefs / notes / &amp;lt;name&amp;gt;にマ​​ージするときに選択するマージ戦略。これは、より一般的な「notes.mergeStrategy」をオーバーライドします。利用可能な各戦略の詳細については、上記の「マージ戦略」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f202b61699020bcfa082fe897d7a8560aea486a1" translate="yes" xml:space="preserve">
          <source>Which merge strategy to choose when doing a notes merge into refs/notes/&amp;lt;name&amp;gt;. This overrides the more general &quot;notes.mergeStrategy&quot;. See the &quot;NOTES MERGE STRATEGIES&quot; section in &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt; for more information on the available strategies.</source>
          <target state="translated">メモをrefs / notes / &amp;lt;name&amp;gt;にマ​​ージするときに選択するマージ戦略。これは、より一般的な「notes.mergeStrategy」をオーバーライドします。利用可能な戦略の詳細については、&lt;a href=&quot;git-notes&quot;&gt;git-notes [1]&lt;/a&gt;の「NOTES MERGE STRATEGIES」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="556a322f94dd1e45943ded0ebea9906e93ca0c80" translate="yes" xml:space="preserve">
          <source>Which ref (or refs, if a glob or specified more than once), in addition to the default set by &lt;code&gt;core.notesRef&lt;/code&gt; or &lt;code&gt;GIT_NOTES_REF&lt;/code&gt;, to read notes from when showing commit messages with the &lt;code&gt;git log&lt;/code&gt; family of commands. This setting can be overridden on the command line or by the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable. See &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;core.notesRef&lt;/code&gt; または &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; によって設定されたデフォルトに加えて、コマンドの &lt;code&gt;git log&lt;/code&gt; ファミリーでコミットメッセージを表示するときにメモを読み取るための参照（グロブまたは複数回指定されている場合は参照）。この設定は、コマンドラインまたは &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; 環境変数によって上書きできます。&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="08e8ee8d98ea130471cc368fbf1a571f3d29a34d" translate="yes" xml:space="preserve">
          <source>Which ref to manipulate notes from, instead of &lt;code&gt;refs/notes/commits&lt;/code&gt;. This overrides the &lt;code&gt;core.notesRef&lt;/code&gt; setting.</source>
          <target state="translated">&lt;code&gt;refs/notes/commits&lt;/code&gt; ではなく、どのrefからノートを操作するか。これは、 &lt;code&gt;core.notesRef&lt;/code&gt; 設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="180171a89f79828ca3aedfa4194b8ff07f802f3f" translate="yes" xml:space="preserve">
          <source>Which refs, in addition to the default set by &lt;code&gt;core.notesRef&lt;/code&gt; or &lt;code&gt;GIT_NOTES_REF&lt;/code&gt;, to read notes from when showing commit messages with the &lt;code&gt;log&lt;/code&gt; family of commands. See &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;core.notesRef&lt;/code&gt; または &lt;code&gt;GIT_NOTES_REF&lt;/code&gt; によって設定されたデフォルトに加えて、コマンドの &lt;code&gt;log&lt;/code&gt; ファミリーでコミットメッセージを表示するときにメモを読み取るための参照。&lt;a href=&quot;git-notes&quot;&gt;git-notes [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f4dbbdac6096ee85d080e618f1dfec3eb7804653" translate="yes" xml:space="preserve">
          <source>Which will add the following to a file named &lt;code&gt;.gitconfig&lt;/code&gt; in your home directory:</source>
          <target state="translated">これにより、ホームディレクトリの &lt;code&gt;.gitconfig&lt;/code&gt; という名前のファイルに以下が追加されます。</target>
        </trans-unit>
        <trans-unit id="0b383fc769f1bfb4acb136b5be3ea84e9742db33" translate="yes" xml:space="preserve">
          <source>Which would result in:</source>
          <target state="translated">結果的には</target>
        </trans-unit>
        <trans-unit id="5efe59371f7c539c77a16fb753d65287a4a1a881" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; is usually used to specify what files are in, you can also specify what files are &lt;code&gt;not&lt;/code&gt; in, using negate patterns. For example, to remove the file &lt;code&gt;unwanted&lt;/code&gt;:</source>
          <target state="translated">一方で &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; 、通常、ファイルがであるかを指定するために使用され、あなたはまた、ファイルが何であるかを指定することができ &lt;code&gt;not&lt;/code&gt; 否定パターンを使用して、で。たとえば、 &lt;code&gt;unwanted&lt;/code&gt; ファイルを削除するには：</target>
        </trans-unit>
        <trans-unit id="133c634c89411bc7bbb73a5aa8f4cda72b5442c2" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; is usually used to specify what files are included, you can also specify what files are &lt;code&gt;not&lt;/code&gt; included, using negative patterns. For example, to remove the file &lt;code&gt;unwanted&lt;/code&gt;:</source>
          <target state="translated">一方で &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; 、通常のファイルが含まれているかを指定するために使用されて、あなたはまた、ファイルが何であるかを指定することができ &lt;code&gt;not&lt;/code&gt; 負のパターンを使用して、含まれていました。たとえば、 &lt;code&gt;unwanted&lt;/code&gt; ファイルを削除するには：</target>
        </trans-unit>
        <trans-unit id="118bfe73a3b1ef14dd8bb7fedadb7cb55f01bcfb" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;&lt;/code&gt; was about specifying a single commit parent, these three notations also consider its parents. For example you can say &lt;code&gt;HEAD^2^@&lt;/code&gt;, however you cannot say &lt;code&gt;HEAD^@^2&lt;/code&gt;.</source>
          <target state="translated">一方で &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;&lt;/code&gt; 、単一の親をコミットの指定についてだった、これら三つの表記もその親を検討してください。たとえば、 &lt;code&gt;HEAD^2^@&lt;/code&gt; と言うことはできますが、 &lt;code&gt;HEAD^@^2&lt;/code&gt; と言うことはできません。</target>
        </trans-unit>
        <trans-unit id="eaec58c53324781fb42b4e63ea8a9cb23361a1d5" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;git archimport&lt;/code&gt; will try to create sensible branch names for the archives that it imports, it is also possible to specify Git branch names manually. To do so, write a Git branch name after each &amp;lt;archive/branch&amp;gt; parameter, separated by a colon. This way, you can shorten the Arch branch names and convert Arch jargon to Git jargon, for example mapping a &quot;PROJECT--devo--VERSION&quot; branch to &quot;master&quot;.</source>
          <target state="translated">一方で &lt;code&gt;git archimport&lt;/code&gt; それがインポートすることをアーカイブのための賢明なブランチ名を作成しようとします、手動でGitのブランチ名を指定することも可能です。これを行うには、各&amp;lt;archive / branch&amp;gt;パラメーターの後にコロンで区切ってGitブランチ名を記述します。このようにして、Archブランチ名を短縮し、Arch専門用語をGit専門用語に変換できます。たとえば、「PROJECT--devo--VERSION」ブランチを「master」にマッピングします。</target>
        </trans-unit>
        <trans-unit id="92e92ccd1a34f0875d32051d1b819b76c11daddf" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;git archimport&lt;/code&gt; will try to create sensible branch names for the archives that it imports, it is also possible to specify Git branch names manually. To do so, write a Git branch name after each &amp;lt;archive/branch&amp;gt; parameter, separated by a colon. This way, you can shorten the Arch branch names and convert Arch jargon to Git jargon, for example mapping a &quot;PROJECT{litdd}devo{litdd}VERSION&quot; branch to &quot;master&quot;.</source>
          <target state="translated">一方で &lt;code&gt;git archimport&lt;/code&gt; それがインポートすることをアーカイブのための賢明なブランチ名を作成しようとします、手動でGitのブランチ名を指定することも可能です。そのためには、各&amp;lt;archive / branch&amp;gt;パラメーターの後に、コロンで区切ってGitブランチ名を記述します。このようにして、Archブランチ名を短くしてArch専門用語をGit専門用語に変換できます。たとえば、「PROJECT {litdd} devo {litdd} VERSION」ブランチを「master」にマッピングします。</target>
        </trans-unit>
        <trans-unit id="becb5324e2c3fe06edf2ea3e91b298d56c7ab4c0" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;git log -G&quot;frotz\(nitfol&quot;&lt;/code&gt; will show this commit, &lt;code&gt;git log
-S&quot;frotz\(nitfol&quot; --pickaxe-regex&lt;/code&gt; will not (because the number of occurrences of that string did not change).</source>
          <target state="translated">一方で &lt;code&gt;git log -G&quot;frotz\(nitfol&quot;&lt;/code&gt; このコミット表示され、 &lt;code&gt;git log -S&quot;frotz\(nitfol&quot; --pickaxe-regex&lt;/code&gt; うではない（つまり、文字列の出現回数が変更されていないため）。</target>
        </trans-unit>
        <trans-unit id="6e3c7753b36510ea58174f6c4603b4398587f401" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;git log -G&quot;regexec\(regexp&quot;&lt;/code&gt; will show this commit, &lt;code&gt;git log
-S&quot;regexec\(regexp&quot; --pickaxe-regex&lt;/code&gt; will not (because the number of occurrences of that string did not change).</source>
          <target state="translated">一方で &lt;code&gt;git log -G&quot;regexec\(regexp&quot;&lt;/code&gt; このコミット表示され、 &lt;code&gt;git log -S&quot;regexec\(regexp&quot; --pickaxe-regex&lt;/code&gt; とは限らない（その文字列の出現回数が変更されていないため）。</target>
        </trans-unit>
        <trans-unit id="9fa3ab181478a04a41a15d625153bef4e8a57c74" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;git svn&lt;/code&gt; can track copy history (including branches and tags) for repositories adopting a standard layout, it cannot yet represent merge history that happened inside git back upstream to SVN users. Therefore it is advised that users keep history as linear as possible inside Git to ease compatibility with SVN (see the CAVEATS section below).</source>
          <target state="translated">一方で &lt;code&gt;git svn&lt;/code&gt; 、それはまだSVNユーザーに内部のGitのバック上流に起こったマージ履歴を表すことができない標準レイアウトを採用リポジトリの（ブランチやタグを含む）のコピーの履歴を追跡することができます。したがって、SVNとの互換性を容易にするために、Git内で履歴をできる限り線形に保つことをお勧めします（以下の警告セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="6dffb65164b8303d8f69a39b7acb7d5c91ede142" translate="yes" xml:space="preserve">
          <source>While Git normally leaves file contents alone, it can be configured to normalize line endings to LF in the repository and, optionally, to convert them to CRLF when files are checked out.</source>
          <target state="translated">Git は通常ファイルの内容をそのままにしておきますが、リポジトリ内で行末を LF に正規化したり、オプションでファイルをチェックアウトする際に CRLF に変換したりするように設定することができます。</target>
        </trans-unit>
        <trans-unit id="28e5e3e789710acfbe64ae88514ac76e33edddf4" translate="yes" xml:space="preserve">
          <source>While a tree represents a particular directory state of a working directory, a commit represents that state in &quot;time&quot;, and explains how to get there.</source>
          <target state="translated">ツリーが作業ディレクトリの特定のディレクトリの状態を表すのに対し、コミットはその状態を「時間」で表し、そこにたどり着く方法を説明します。</target>
        </trans-unit>
        <trans-unit id="4340adfab1f511dfd0a9b398534e55b63d70f9b2" translate="yes" xml:space="preserve">
          <source>While an &quot;easy case recovery&quot; sometimes appears to be successful even in the hard case, it may have unintended consequences. For example, a commit that was removed via &lt;code&gt;git rebase
      --interactive&lt;/code&gt; will be &lt;strong&gt;resurrected&lt;/strong&gt;!</source>
          <target state="translated">「簡単なケースでの回復」は、ハードケースでも成功するように見える場合がありますが、意図しない結果になる可能性があります。例えば、経由で削除されたことをコミット &lt;code&gt;git rebase --interactive&lt;/code&gt; されます&lt;strong&gt;復活します&lt;/strong&gt;！</target>
        </trans-unit>
        <trans-unit id="aeca28e54d758d00b7b9efe81e9021c3ae168604" translate="yes" xml:space="preserve">
          <source>While at it, check the &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;final-commit&lt;/code&gt; files as well. If what is in &lt;code&gt;final-commit&lt;/code&gt; is not exactly what you would want to see in the commit log message, it is very likely that the receiver would end up hand editing the log message when applying your patch. Things like &quot;Hi, this is my first patch.\n&quot; in the patch e-mail should come after the three-dash line that signals the end of the commit message.</source>
          <target state="translated">その間、 &lt;code&gt;info&lt;/code&gt; ファイルと &lt;code&gt;final-commit&lt;/code&gt; ファイルも確認してください。どのような場合には &lt;code&gt;final-commit&lt;/code&gt; ログメッセージをコミットするには、それは非常に可能性の高い受信機があなたのパッチを適用する際に、ログメッセージを編集し、手を終わるだろうということです見たいと思うまさにではありません。「こんにちは、これは私の最初のパッチです。\ n」は、パッチの電子メールで、コミットメッセージの終わりを示す3本の破線の後に来るはずです。</target>
        </trans-unit>
        <trans-unit id="8ae695a4eabf8fe5dbbd3e5b96e3d4b6e1234599" translate="yes" xml:space="preserve">
          <source>While creating changes is useful, it&amp;rsquo;s even more useful if you can tell later what changed. The most useful command for this is another of the &lt;code&gt;diff&lt;/code&gt; family, namely &lt;code&gt;git diff-tree&lt;/code&gt;.</source>
          <target state="translated">変更を作成することは便利ですが、何が変更されたかを後で知ることができればさらに便利です。これに最も役立つコマンドは、別の &lt;code&gt;diff&lt;/code&gt; ファミリー、つまり &lt;code&gt;git diff-tree&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e66bf2723385d320e1625ad06ac948bff457808d" translate="yes" xml:space="preserve">
          <source>While it is possible to override all attributes, well behaving helpers should refrain from doing so for any attribute other than username and password.</source>
          <target state="translated">すべての属性をオーバーライドすることは可能ですが、うまく振る舞うヘルパーは、ユーザ名とパスワード以外の属性をオーバーライドしないようにすべきです。</target>
        </trans-unit>
        <trans-unit id="84a06403fddbfbdfed756ddcbe7e1b6ff85edd7a" translate="yes" xml:space="preserve">
          <source>While one could just alter the configuration settings in the gitweb CGI itself, those changes would be lost upon upgrade. Configuration settings might also be placed into a file in the same directory as the CGI script with the default name &lt;code&gt;gitweb_config.perl&lt;/code&gt; &amp;mdash; allowing one to have multiple gitweb instances with different configurations by the use of symlinks.</source>
          <target state="translated">gitweb CGI自体の構成設定を変更することもできますが、それらの変更はアップグレード時に失われます。構成設定は、CGIスクリプトと同じディレクトリ内のファイルに配置され、デフォルト名は &lt;code&gt;gitweb_config.perl&lt;/code&gt; になります。シンボリックリンクを使用することで、構成が異なる複数のgitwebインスタンスを作成できます。</target>
        </trans-unit>
        <trans-unit id="3129dc27b36b536bbc925e644f78f32bde86376a" translate="yes" xml:space="preserve">
          <source>While parent object ids are provided on the command line, author and committer information is taken from the following environment variables, if set:</source>
          <target state="translated">親オブジェクトの ID はコマンドラインで提供されますが、作者とコミッターの情報は、設定されている場合には以下の環境変数から取得されます。</target>
        </trans-unit>
        <trans-unit id="7921bb694427f6298ff631684ef33f9b3436be57" translate="yes" xml:space="preserve">
          <source>While you are in the middle of working on something complicated, you find an unrelated but obvious and trivial bug. You would like to fix it before continuing. You can use &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt; to save the current state of your work, and after fixing the bug (or, optionally after doing so on a different branch and then coming back), unstash the work-in-progress changes.</source>
          <target state="translated">あなたが複雑な何かに取り組んでいる最中に、あなたは無関係であるが明白で些細なバグを見つけます。続行する前に修正してください。&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]&lt;/a&gt;を使用して作業の現在の状態を保存し、バグを修正した後（または、必要に応じて別のブランチで実行してから戻った後で）、進行中の変更をunstashできます。</target>
        </trans-unit>
        <trans-unit id="aa47dd8a2f0ebe83c1c9e1c5b54451eb489a4bd1" translate="yes" xml:space="preserve">
          <source>Whitespace separated fields; any run of whitespace can be used as field separator (rules for Perl&amp;rsquo;s &quot;&lt;code&gt;split(&quot; &quot;, $line)&lt;/code&gt;&quot;).</source>
          <target state="translated">空白で区切られたフィールド。空白の実行は、フィールドセパレーターとして使用できます（Perlの「 &lt;code&gt;split(&quot; &quot;, $line)&lt;/code&gt; の規則）。</target>
        </trans-unit>
        <trans-unit id="863aeb0371f511e273bc66c19d53b7877f38ac8a" translate="yes" xml:space="preserve">
          <source>Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting forces using only the listed mechanisms. Example:</source>
          <target state="translated">許可されたSMTP-AUTHメカニズムのホワイトスペースで区切られたリスト。この設定では、リストされたメカニズムのみを強制的に使用します。例。</target>
        </trans-unit>
        <trans-unit id="389ff74463b52646838e41646e64e38a902b85eb" translate="yes" xml:space="preserve">
          <source>Why bisecting merge commits can be harder than bisecting linear history</source>
          <target state="translated">マージコミットの二分法が線形履歴の二分法よりも難しい理由</target>
        </trans-unit>
        <trans-unit id="4ae988a6589a0546387522087a0861a61e3e4225" translate="yes" xml:space="preserve">
          <source>Wildcards in the pattern such as &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; are treated as literal characters.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; または &lt;code&gt;?&lt;/code&gt; などのパターンのワイルドカード リテラル文字として扱われます。</target>
        </trans-unit>
        <trans-unit id="af4b569cb0fc1bae5a933e3532b964dc5d61facd" translate="yes" xml:space="preserve">
          <source>Will copy all files listed from the index to the working directory (not overwriting existing files).</source>
          <target state="translated">インデックスからリストされたすべてのファイルを作業ディレクトリにコピーします(既存のファイルは上書きしません)。</target>
        </trans-unit>
        <trans-unit id="712e5286413fd90307ff92f23e110885525f2bb8" translate="yes" xml:space="preserve">
          <source>Will fail unless you manually run &lt;code&gt;git fetch origin-push&lt;/code&gt;. This method is of course entirely defeated by something that runs &lt;code&gt;git fetch
--all&lt;/code&gt;, in that case you&amp;rsquo;d need to either disable it or do something more tedious like:</source>
          <target state="translated">手動で &lt;code&gt;git fetch origin-push&lt;/code&gt; を実行しないと失敗します。もちろん、このメソッドは &lt;code&gt;git fetch --all&lt;/code&gt; を実行するものによって完全に無効にされています。その場合は、このメソッドを無効にするか、次のような面倒なことを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="bfd8a0b8d0916903c6596ed358a3cc07670d304e" translate="yes" xml:space="preserve">
          <source>Windows-only: allow redirecting the standard input/output/error handles to paths specified by the environment variables. This is particularly useful in multi-threaded applications where the canonical way to pass standard handles via &lt;code&gt;CreateProcess()&lt;/code&gt; is not an option because it would require the handles to be marked inheritable (and consequently &lt;strong&gt;every&lt;/strong&gt; spawned process would inherit them, possibly blocking regular Git operations). The primary intended use case is to use named pipes for communication (e.g. &lt;code&gt;\\.\pipe\my-git-stdin-123&lt;/code&gt;).</source>
          <target state="translated">Windowsのみ：標準の入力/出力/エラーハンドルを環境変数で指定されたパスにリダイレクトできるようにします。これは、 &lt;code&gt;CreateProcess()&lt;/code&gt; を介して標準ハンドルを渡す標準的な方法がオプションではないマルチスレッドアプリケーションで特に役立ちます。これは、ハンドルを継承可能としてマークする必要があるためです（その結果&lt;strong&gt;、&lt;/strong&gt;生成された&lt;strong&gt;すべての&lt;/strong&gt;プロセスがそれらを継承し、通常のGit操作をブロックする可能性があります。 ）。主な使用目的は、通信に名前付きパイプを使用することです（例： &lt;code&gt;\\.\pipe\my-git-stdin-123&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9c510c80ca0db551792868481dfce7936d126272" translate="yes" xml:space="preserve">
          <source>Windows-only: comma-separated list of environment variables' names that need to be unset before spawning any other process. Defaults to &lt;code&gt;PERL5LIB&lt;/code&gt; to account for the fact that Git for Windows insists on using its own Perl interpreter.</source>
          <target state="translated">Windowsのみ：他のプロセスを起動する前に設定解除する必要がある環境変数の名前のコンマ区切りリスト。Git for Windowsが独自のPerlインタープリターの使用を要求するという事実を考慮して、デフォルトは &lt;code&gt;PERL5LIB&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e74f053e0d02cafdbd0bbd14c65f9fd314f00d13" translate="yes" xml:space="preserve">
          <source>Windows-only: override whether spawned processes inherit only standard file handles (&lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;) or all handles. Can be &lt;code&gt;auto&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Defaults to &lt;code&gt;auto&lt;/code&gt;, which means &lt;code&gt;true&lt;/code&gt; on Windows 7 and later, and &lt;code&gt;false&lt;/code&gt; on older Windows versions.</source>
          <target state="translated">Windowsのみ：生成されたプロセスが標準のファイルハンドル（ &lt;code&gt;stdin&lt;/code&gt; 、 &lt;code&gt;stdout&lt;/code&gt; および &lt;code&gt;stderr&lt;/code&gt; ）のみを継承するか、すべてのハンドルを継承するかをオーバーライドします。することができ &lt;code&gt;auto&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。デフォルトは &lt;code&gt;auto&lt;/code&gt; です。これは、Windows 7以降では &lt;code&gt;true&lt;/code&gt; 、古いWindowsバージョンでは &lt;code&gt;false&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="949442d2f0c16b026f680dbb7df65e881242333c" translate="yes" xml:space="preserve">
          <source>With --abbrev set to 0, the command can be used to find the closest tagname without any suffix:</source>
          <target state="translated">abbrevを0に設定すると、このコマンドを使用して、サフィックスを付けずに最も近いタグ名を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="a158e0380ec8b734a269ad9d0f52eb5eb98f2274" translate="yes" xml:space="preserve">
          <source>With --all, the command can use branch heads as references, so the output shows the reference path as well:</source>
          <target state="translated">allを使うと、コマンドはブランチヘッドを参照として使うことができるので、出力には参照パスも表示されます。</target>
        </trans-unit>
        <trans-unit id="65ee9a1948ccba3bbf4e1e0783ded1eb1bf032c9" translate="yes" xml:space="preserve">
          <source>With --batch or --batch-check, follow symlinks inside the repository when requesting objects with extended SHA-1 expressions of the form tree-ish:path-in-tree. Instead of providing output about the link itself, provide output about the linked-to object. If a symlink points outside the tree-ish (e.g. a link to /foo or a root-level link to ../foo), the portion of the link which is outside the tree will be printed.</source>
          <target state="translated">batchまたは--batch-checkで、 tree-ish:path-in-tree形式の拡張SHA-1式を持つオブジェクトをリクエストする際に、リポジトリ内のシンボリックリンクをたどるようにします。リンク自体に関する出力を提供する代わりに、リンク先のオブジェクトに関する出力を提供してください。シンボリックリンクが tree-ish の外側を指している場合 (例えば /foo へのリンクや ../foo へのルートレベルのリンク)、リンクのうちツリーの外側にある部分が出力されます。</target>
        </trans-unit>
        <trans-unit id="4f48f3dcfb8092537ede5a515e981d6e213aeb9f" translate="yes" xml:space="preserve">
          <source>With --no-commit perform the merge and stop just before creating a merge commit, to give the user a chance to inspect and further tweak the merge result before committing.</source>
          <target state="translated">no-commit を指定すると、マージコミットを作成する直前にマージを実行して停止し、コミット前にマージ結果を確認したり、さらに微調整したりする機会をユーザーに与えます。</target>
        </trans-unit>
        <trans-unit id="3e8c9cc261afe4f0a3a9c88b1d66c9688df929d7" translate="yes" xml:space="preserve">
          <source>With --no-log do not list one-line descriptions from the actual commits being merged.</source>
          <target state="translated">no-logでは、マージされる実際のコミットから一行の説明をリストアップしないようにします。</target>
        </trans-unit>
        <trans-unit id="e1adfa5cefd427bf7d3a2a21965629dcaf3c3388" translate="yes" xml:space="preserve">
          <source>With --no-signoff do not add a Signed-off-by line.</source>
          <target state="translated">no-signoffでは、Signed-off-by行を追加しません。</target>
        </trans-unit>
        <trans-unit id="268060b1be32cd8bc70e7e3bb40c821b809c90c3" translate="yes" xml:space="preserve">
          <source>With --no-squash perform the merge and commit the result. This option can be used to override --squash.</source>
          <target state="translated">no-squash を指定すると、マージを実行して結果をコミットします。このオプションを使用すると、-squash を上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="2060c61f3742702f58530c81f5eefb302aeb60c1" translate="yes" xml:space="preserve">
          <source>With --squash, --commit is not allowed, and will fail.</source>
          <target state="translated">-squashでは、--commitは許可されておらず、失敗します。</target>
        </trans-unit>
        <trans-unit id="865b225dd999d9769e36118a7e13e933131732f5" translate="yes" xml:space="preserve">
          <source>With -n or --no-stat do not show a diffstat at the end of the merge.</source>
          <target state="translated">n または --no-stat を指定すると、マージの最後に diffstat を表示しません。</target>
        </trans-unit>
        <trans-unit id="008f5911b332311009571603d4810039f3b0a542" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--add&lt;/code&gt;, instead of changing existing URLs, new URL is added.</source>
          <target state="translated">&lt;code&gt;--add&lt;/code&gt; 、代わりに既存のURLを変更するので、新しいURLが追加されます。</target>
        </trans-unit>
        <trans-unit id="6b50c366c66c543504b13b437403fc08b0e99b0f" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--add&lt;/code&gt;, instead of replacing the list of currently tracked branches, adds to that list.</source>
          <target state="translated">&lt;code&gt;--add&lt;/code&gt; 、代わりに現在追跡ブランチのリストを置き換えるので、そのリストに追加されます。</target>
        </trans-unit>
        <trans-unit id="b5c6ad97197083d8f93283087955bd70bd89f95f" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--all&lt;/code&gt; flag, all refs that exist locally are transferred to the remote side. You cannot specify any &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; if you use this flag.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; フラグ、局所的に存在するすべての参考文献は、リモート側に転送されます。このフラグを使用する場合、 &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; を指定することはできません。</target>
        </trans-unit>
        <trans-unit id="487cd0ed38992f1c8c21d61869ab0ba8c9131e91" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--all&lt;/code&gt;, all URLs for the remote will be listed.</source>
          <target state="translated">&lt;code&gt;--all&lt;/code&gt; 、リモートのためのすべてのURLが表示されます。</target>
        </trans-unit>
        <trans-unit id="ea729f224a85b66147f6e662a1c5d14a2abdd751" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--contains&lt;/code&gt;, shows only the branches that contain the named commit (in other words, the branches whose tip commits are descendants of the named commit), &lt;code&gt;--no-contains&lt;/code&gt; inverts it. With &lt;code&gt;--merged&lt;/code&gt;, only branches merged into the named commit (i.e. the branches whose tip commits are reachable from the named commit) will be listed. With &lt;code&gt;--no-merged&lt;/code&gt; only branches not merged into the named commit will be listed. If the &amp;lt;commit&amp;gt; argument is missing it defaults to &lt;code&gt;HEAD&lt;/code&gt; (i.e. the tip of the current branch).</source>
          <target state="translated">&lt;code&gt;--contains&lt;/code&gt; 、命名含んのみを示す枝は（が、他の言葉で、その先端コミットという名前のコミットの子孫である枝）は、コミット &lt;code&gt;--no-contains&lt;/code&gt; 反転して。 &lt;code&gt;--merged&lt;/code&gt; 、唯一の枝が名前のコミットにマージ（すなわち、先端がコミットコミットという名前から到達可能な枝）が表示されます。 &lt;code&gt;--no-merged&lt;/code&gt; という名前のリストに表示されますコミットにマージされていないだけで枝を。&amp;lt;commit&amp;gt;引数がない場合は、デフォルトで &lt;code&gt;HEAD&lt;/code&gt; （つまり、現在のブランチの先端）になります。</target>
        </trans-unit>
        <trans-unit id="a1afc8d7fd506e98e5a974a8f26c84b23238fb92" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--create-reflog&lt;/code&gt;, update-ref will create a reflog for each ref even if one would not ordinarily be created.</source>
          <target state="translated">&lt;code&gt;--create-reflog&lt;/code&gt; 、更新-refは1が通常作成されない場合でも、各参照用REFLOGを作成します。</target>
        </trans-unit>
        <trans-unit id="7fef88021ca55186dc4070339cc8624e9a30485c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--delete&lt;/code&gt;, instead of changing existing URLs, all URLs matching regex &amp;lt;url&amp;gt; are deleted for remote &amp;lt;name&amp;gt;. Trying to delete all non-push URLs is an error.</source>
          <target state="translated">&lt;code&gt;--delete&lt;/code&gt; 、代わりに既存のURLを変更するのでは、すべてのURLが正規表現&amp;lt;URL&amp;gt;リモート&amp;lt;名前&amp;gt;のために削除され、一致します。非プッシュURLをすべて削除しようとするとエラーになります。</target>
        </trans-unit>
        <trans-unit id="30918cb51e4372be35c787127ec3b8958bb72e8d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--dry-run&lt;/code&gt; option, report what branches will be pruned, but do not actually prune them.</source>
          <target state="translated">&lt;code&gt;--dry-run&lt;/code&gt; オプション、レポートどのような枝が剪定されますが、実際にそれらを整理しません。</target>
        </trans-unit>
        <trans-unit id="e4cd9a1b8d31ddff1298b3b28b732552e240fb7a" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--dry-run&lt;/code&gt; option, report what branches would be pruned, but do not actually prune them.</source>
          <target state="translated">&lt;code&gt;--dry-run&lt;/code&gt; オプション、レポートどのような枝が剪定されますが、実際にそれらを整理しません。</target>
        </trans-unit>
        <trans-unit id="5189cda6779864f8bd2f5726b39c4529ff52ddf8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--ff-only&lt;/code&gt;, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status.</source>
          <target state="translated">&lt;code&gt;--ff-only&lt;/code&gt; 可能な場合、早送りとしてマージを解決します。不可能な場合は、マージを拒否し、ゼロ以外のステータスで終了します。</target>
        </trans-unit>
        <trans-unit id="7e8f4fddd68a3a89ff49906c538a7ca7b5ef9dea" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--ff&lt;/code&gt;, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.</source>
          <target state="translated">&lt;code&gt;--ff&lt;/code&gt; 、可能な場合は解決早送りなどのマージ（のみマージされたブランチに一致するように分岐ポインタを更新し、コミットマージを作成しないでください）。できない場合（マージされた履歴が現在の履歴の子孫でない場合）、マージコミットを作成します。</target>
        </trans-unit>
        <trans-unit id="1362a77896d8f49d16b2f9c5015389cf3c365072" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--force&lt;/code&gt;, the fast-forward check is disabled for all refs.</source>
          <target state="translated">では &lt;code&gt;--force&lt;/code&gt; 、早送りチェックは、すべてのレフリーのために無効になっています。</target>
        </trans-unit>
        <trans-unit id="ba76b155ec3c447a87cfd160419204d256e0f486" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--keep-cr&lt;/code&gt;, call &lt;code&gt;git mailsplit&lt;/code&gt; (see &lt;a href=&quot;git-mailsplit&quot;&gt;git-mailsplit[1]&lt;/a&gt;) with the same option, to prevent it from stripping CR at the end of lines. &lt;code&gt;am.keepcr&lt;/code&gt; configuration variable can be used to specify the default behaviour. &lt;code&gt;--no-keep-cr&lt;/code&gt; is useful to override &lt;code&gt;am.keepcr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--keep-cr&lt;/code&gt; 、呼び出し &lt;code&gt;git mailsplit&lt;/code&gt; （参照&lt;a href=&quot;git-mailsplit&quot;&gt;[1]のgit-mailsplitを&lt;/a&gt;行の末尾にCR剥離を防止するために、同じオプションを使用して）。 &lt;code&gt;am.keepcr&lt;/code&gt; 構成変数を使用して、デフォルトの動作を指定できます。 &lt;code&gt;--no-keep-cr&lt;/code&gt; は、 &lt;code&gt;am.keepcr&lt;/code&gt; をオーバーライドするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="22e7d426b38d094430582cb84fc0432b42834058" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--no-ff&lt;/code&gt;, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward.</source>
          <target state="translated">&lt;code&gt;--no-ff&lt;/code&gt; 、マージではなく早送りとして解決することができた場合でも、すべての場合にコミットマージを作成します。</target>
        </trans-unit>
        <trans-unit id="5aa5b8e96804090cb89f3aab6cdc283e2c00d87e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--no-tags&lt;/code&gt; option, &lt;code&gt;git fetch &amp;lt;name&amp;gt;&lt;/code&gt; does not import tags from the remote repository.</source>
          <target state="translated">&lt;code&gt;--no-tags&lt;/code&gt; オプション、 &lt;code&gt;git fetch &amp;lt;name&amp;gt;&lt;/code&gt; リモートリポジトリからではないインポートタグを行います。</target>
        </trans-unit>
        <trans-unit id="37eed19521c790d78f1c0615d39722d6298a6cc8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--patch&lt;/code&gt;, you can interactively select hunks from the diff between HEAD and the working tree to be stashed. The stash entry is constructed such that its index state is the same as the index state of your repository, and its worktree contains only the changes you selected interactively. The selected changes are then rolled back from your worktree. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">では &lt;code&gt;--patch&lt;/code&gt; 、あなたが対話的にHEADとスタッシュする作業ツリー間の差分からハンクを選択することができます。 stashエントリーは、そのインデックス状態がリポジトリのインデックス状態と同じになるように構築され、そのワークツリーには、インタラクティブに選択した変更のみが含まれます。次に、選択した変更がワークツリーからロールバックされます。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="8d4d7e74d0f493c9b38977e43daed9cfd8d04693" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--pretty&lt;/code&gt; format other than &lt;code&gt;oneline&lt;/code&gt; and &lt;code&gt;reference&lt;/code&gt; (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as &lt;code&gt;ref@{Nth}&lt;/code&gt; (where &lt;code&gt;Nth&lt;/code&gt; is the reverse-chronological index in the reflog) or as &lt;code&gt;ref@{timestamp}&lt;/code&gt; (with the timestamp for that entry), depending on a few rules:</source>
          <target state="translated">&lt;code&gt;--pretty&lt;/code&gt; 以外のフォーマット &lt;code&gt;oneline&lt;/code&gt; と &lt;code&gt;reference&lt;/code&gt; （明白な理由のために）、これは、出力がREFLOGから採取された情報の2本の余分な線を有するようにします。いくつかのルールに応じて、出力のreflog指定子は、 &lt;code&gt;ref@{Nth}&lt;/code&gt; （ &lt;code&gt;Nth&lt;/code&gt; はreflogの逆時系列インデックス）または &lt;code&gt;ref@{timestamp}&lt;/code&gt; （そのエントリのタイムスタンプを含む）として表示されます。</target>
        </trans-unit>
        <trans-unit id="35b7bcaa0d1a12c16e7ebe5749afd0aa0913b69d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--prune&lt;/code&gt; option, run pruning against all the remotes that are updated.</source>
          <target state="translated">&lt;code&gt;--prune&lt;/code&gt; オプション、更新されたすべてのリモコンに対して剪定実行します。</target>
        </trans-unit>
        <trans-unit id="9a993d0e8bfe45705897018a009a33a68fb547fb" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--push&lt;/code&gt;, push URLs are manipulated instead of fetch URLs.</source>
          <target state="translated">&lt;code&gt;--push&lt;/code&gt; 、プッシュURLは代わりにURLをフェッチするのに操作されています。</target>
        </trans-unit>
        <trans-unit id="d0c8d67cd6d67334176bbc781201963c60a05697" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--push&lt;/code&gt;, push URLs are queried rather than fetch URLs.</source>
          <target state="translated">&lt;code&gt;--push&lt;/code&gt; 、プッシュURLはむしろ、URLをフェッチするよりも、照会されます。</target>
        </trans-unit>
        <trans-unit id="a26943d9e66efe8045d055005cf22b61dc280b47" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--stdin&lt;/code&gt;, update-ref reads instructions from standard input and performs all modifications together. Specify commands of the form:</source>
          <target state="translated">&lt;code&gt;--stdin&lt;/code&gt; 、更新-refは標準入力と一緒に行うすべての変更をから命令を読み出します。次の形式のコマンドを指定します。</target>
        </trans-unit>
        <trans-unit id="46644e8c0f7ae9adba68ae4958242044a646f477" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--tags&lt;/code&gt; option, &lt;code&gt;git fetch &amp;lt;name&amp;gt;&lt;/code&gt; imports every tag from the remote repository.</source>
          <target state="translated">&lt;code&gt;--tags&lt;/code&gt; オプション、 &lt;code&gt;git fetch &amp;lt;name&amp;gt;&lt;/code&gt; リモートリポジトリからの輸入すべてのタグを。</target>
        </trans-unit>
        <trans-unit id="9afd8cc2d67d37867f3891e80c5ed22f0441334c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;--topo-order&lt;/code&gt;, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together.</source>
          <target state="translated">&lt;code&gt;--topo-order&lt;/code&gt; 、それらは8 6 5 3 7 4 2 1（又は8 7 4 2 6 5 3 1）を示すであろう。2つの並行開発トラックからのコミットが混在して表示されないようにするために、一部の古いコミットは新しいコミットの前に表示されます。</target>
        </trans-unit>
        <trans-unit id="bbe3bdb143c872f8bc3522bea317a2ad84af9235" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--auto&lt;/code&gt;, the remote is queried to determine its &lt;code&gt;HEAD&lt;/code&gt;, then the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; is set to the same branch. e.g., if the remote &lt;code&gt;HEAD&lt;/code&gt; is pointed at &lt;code&gt;next&lt;/code&gt;, &quot;&lt;code&gt;git remote set-head origin -a&lt;/code&gt;&quot; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/next&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/next&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--auto&lt;/code&gt; 、リモートは、その決定するために照会さ &lt;code&gt;HEAD&lt;/code&gt; を、シンボリック-refの &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; 同じ枝に設定されています。たとえば、リモート &lt;code&gt;HEAD&lt;/code&gt; が &lt;code&gt;next&lt;/code&gt; を指している場合、「 &lt;code&gt;git remote set-head origin -a&lt;/code&gt; 」は、symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; を &lt;code&gt;refs/remotes/origin/next&lt;/code&gt; に設定します。これは、 &lt;code&gt;refs/remotes/origin/next&lt;/code&gt; がすでに存在する場合にのみ機能します。そうでない場合は、最初にフェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="ca79465e71cd43be9bc8a1c0daf2d4aececc9880" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;--auto&lt;/code&gt;, the remote is queried to determine its &lt;code&gt;HEAD&lt;/code&gt;, then the symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; is set to the same branch. e.g., if the remote &lt;code&gt;HEAD&lt;/code&gt; is pointed at &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;git remote set-head origin -a&lt;/code&gt; will set the symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; to &lt;code&gt;refs/remotes/origin/next&lt;/code&gt;. This will only work if &lt;code&gt;refs/remotes/origin/next&lt;/code&gt; already exists; if not it must be fetched first.</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;--auto&lt;/code&gt; 、リモートは、その決定するために照会さ &lt;code&gt;HEAD&lt;/code&gt; を、シンボリック-refの &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; 同じ枝に設定されています。たとえば、リモート &lt;code&gt;HEAD&lt;/code&gt; が &lt;code&gt;next&lt;/code&gt; を指している場合、 &lt;code&gt;git remote set-head origin -a&lt;/code&gt; は、symbolic-ref &lt;code&gt;refs/remotes/origin/HEAD&lt;/code&gt; を &lt;code&gt;refs/remotes/origin/next&lt;/code&gt; に設定します。これは、 &lt;code&gt;refs/remotes/origin/next&lt;/code&gt; がすでに存在する場合にのみ機能します。そうでない場合は、最初にフェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="5f69d8ea721996a0e954b69bd77400aaa01f9c55" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-d&lt;/code&gt; flag, it deletes the named &amp;lt;ref&amp;gt; after verifying it still contains &amp;lt;oldvalue&amp;gt;.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; フラグ、それが確認した後、それはまだ&amp;lt;OLDVALUE&amp;gt;含まれた&amp;lt;ref&amp;gt;という名前が削除されます。</target>
        </trans-unit>
        <trans-unit id="da9e1b9da40421df76a154165f2b54d479838ea5" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;--delete&lt;/code&gt;, the symbolic ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; is deleted.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; または &lt;code&gt;--delete&lt;/code&gt; 、シンボリック参照 &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; 削除されます。</target>
        </trans-unit>
        <trans-unit id="6b0b5064fe468e227911615a2b7fcbafb431eef7" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-f&lt;/code&gt; option, &lt;code&gt;git fetch &amp;lt;name&amp;gt;&lt;/code&gt; is run immediately after the remote information is set up.</source>
          <target state="translated">&lt;code&gt;-f&lt;/code&gt; オプション、 &lt;code&gt;git fetch &amp;lt;name&amp;gt;&lt;/code&gt; リモート情報が設定された直後に実行されます。</target>
        </trans-unit>
        <trans-unit id="4c11581a6169e0a17084bd502989c1df6d5ff9b6" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-m &amp;lt;master&amp;gt;&lt;/code&gt; option, a symbolic-ref &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; is set up to point at remote&amp;rsquo;s &lt;code&gt;&amp;lt;master&amp;gt;&lt;/code&gt; branch. See also the set-head command.</source>
          <target state="translated">&lt;code&gt;-m &amp;lt;master&amp;gt;&lt;/code&gt; オプション、シンボリック-REF &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/HEAD&lt;/code&gt; 、リモートの時点までに設定されている &lt;code&gt;&amp;lt;master&amp;gt;&lt;/code&gt; ブランチ。set-headコマンドも参照してください。</target>
        </trans-unit>
        <trans-unit id="734f06f2f4ad450ab9efcf1cd7537f18bb0a22f5" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-n&lt;/code&gt; option, the remote heads are not queried first with &lt;code&gt;git ls-remote &amp;lt;name&amp;gt;&lt;/code&gt;; cached information is used instead.</source>
          <target state="translated">&lt;code&gt;-n&lt;/code&gt; オプションは、リモートヘッドが最初に照会されていない &lt;code&gt;git ls-remote &amp;lt;name&amp;gt;&lt;/code&gt; 。代わりに、キャッシュされた情報が使用されます。</target>
        </trans-unit>
        <trans-unit id="dd75e538fb39d452e807a34068040583ee9147bc" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;-t &amp;lt;branch&amp;gt;&lt;/code&gt; option, instead of the default glob refspec for the remote to track all branches under the &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/&lt;/code&gt; namespace, a refspec to track only &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; is created. You can give more than one &lt;code&gt;-t &amp;lt;branch&amp;gt;&lt;/code&gt; to track multiple branches without grabbing all branches.</source>
          <target state="translated">&lt;code&gt;-t &amp;lt;branch&amp;gt;&lt;/code&gt; オプション、代わりにデフォルトグロブrefspec下のすべてのブランチを追跡するために、リモートのための &lt;code&gt;refs/remotes/&amp;lt;name&amp;gt;/&lt;/code&gt; 名前空間、唯一追跡するrefspec &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 作成されます。あなたはより多くのものよりも与えることができます &lt;code&gt;-t &amp;lt;branch&amp;gt;&lt;/code&gt; すべての枝をつかむことなく、複数のブランチを追跡します。</target>
        </trans-unit>
        <trans-unit id="3a17d1e0c132aee2d2be1ec1ea02b9a88fab2a36" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, a new trailer will be added, even if some trailers with the same (&amp;lt;token&amp;gt;, &amp;lt;value&amp;gt;) pair are already in the message.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; を使用すると、同じ（&amp;lt;token&amp;gt;、&amp;lt;value&amp;gt;）ペアを持ついくつかのトレーラーがすでにメッセージ内にある場合でも、新しいトレーラーが追加されます。</target>
        </trans-unit>
        <trans-unit id="bdb99f7baa9796a7b973194e1a5ab4a7e3d82b92" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, a new trailer will be added.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; を使用すると、新しいトレーラーが追加されます。</target>
        </trans-unit>
        <trans-unit id="3d04d4d1926f980c37f6ca9761913ed7f096d165" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, create a new branch named &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; starting at &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;, and check out &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; into the new working tree. If &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is omitted, it defaults to &lt;code&gt;HEAD&lt;/code&gt;. By default, &lt;code&gt;-b&lt;/code&gt; refuses to create a new branch if it already exists. &lt;code&gt;-B&lt;/code&gt; overrides this safeguard, resetting &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;add&lt;/code&gt; 、名前の新しいブランチを作成 &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; から始まる &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; 、およびチェックアウト &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; 新しい作業ツリーに。場合は &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; に省略し、デフォルトで &lt;code&gt;HEAD&lt;/code&gt; 。デフォルトでは、 &lt;code&gt;-b&lt;/code&gt; は、新しいブランチがすでに存在する場合、その作成を拒否します。 &lt;code&gt;-B&lt;/code&gt; はこのセーフガードをオーバーライドし、 &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; にリセットします。</target>
        </trans-unit>
        <trans-unit id="6b61b0983644b0774834807009f4d278bb642b5a" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, create a new branch named &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; starting at &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;, and check out &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; into the new working tree. If &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; is omitted, it defaults to HEAD. By default, &lt;code&gt;-b&lt;/code&gt; refuses to create a new branch if it already exists. &lt;code&gt;-B&lt;/code&gt; overrides this safeguard, resetting &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;add&lt;/code&gt; 、名前の新しいブランチを作成 &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; から始まる &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; 、およびチェックアウト &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; 新しい作業ツリーに。場合は &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; HEADに、そのデフォルトは省略されています。デフォルトでは、 &lt;code&gt;-b&lt;/code&gt; は、新しいブランチがすでに存在する場合、その作成を拒否します。 &lt;code&gt;-B&lt;/code&gt; はこのセーフガードを無効にし、 &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; を &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; にリセットします。</target>
        </trans-unit>
        <trans-unit id="d424a0ce9af1bab4df82ba9ed9c152743e40b774" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, detach &lt;code&gt;HEAD&lt;/code&gt; in the new working tree. See &quot;DETACHED HEAD&quot; in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; 、デタッチ &lt;code&gt;HEAD&lt;/code&gt; 新しい作業ツリーインチ &lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]の&lt;/a&gt;「DETACHEDHEAD」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a273ddd960841784db1a589aad98c4feff6c226" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, detach HEAD in the new working tree. See &quot;DETACHED HEAD&quot; in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; 、新しい作業ツリー内のデタッチHEAD。&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]の&lt;/a&gt;「DETACHED HEAD」を参照してください。</target>
        </trans-unit>
        <trans-unit id="187a01bfec37522a00b693f68238b703a4e0897c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;add&lt;/code&gt;, suppress feedback messages.</source>
          <target state="translated">&lt;code&gt;add&lt;/code&gt; を使用すると、フィードバックメッセージを抑制します。</target>
        </trans-unit>
        <trans-unit id="45995ca3706219a58e816f38cd1d9bf0922ce8ca" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;addIfDifferent&lt;/code&gt;, a new trailer will be added only if no trailer with the same (&amp;lt;token&amp;gt;, &amp;lt;value&amp;gt;) pair is already in the message.</source>
          <target state="translated">&lt;code&gt;addIfDifferent&lt;/code&gt; 、新たなトレーラは、同じ（&amp;lt;トークン&amp;gt;、&amp;lt;値&amp;gt;）ペアがメッセージ内に既にあるとはトレーラ場合に追加されます。</target>
        </trans-unit>
        <trans-unit id="6e3bd24c09b16e87e69f4ad565a18cc8f733f593" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt;, a new trailer will be added only if no trailer with the same (&amp;lt;token&amp;gt;, &amp;lt;value&amp;gt;) pair is above or below the line where the new trailer will be added.</source>
          <target state="translated">&lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; 、新しいトレーラーは同じとはトレーラーが（&amp;lt;トークン&amp;gt;、&amp;lt;値&amp;gt;）ペアが新しいトレーラーが追加される行の上または下でない場合にのみ追加されます。</target>
        </trans-unit>
        <trans-unit id="c538516bcb20191b3fc9da51228fff3eefb68cdf" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;doNothing&lt;/code&gt;, nothing will be done.</source>
          <target state="translated">&lt;code&gt;doNothing&lt;/code&gt; 、何も行われません。</target>
        </trans-unit>
        <trans-unit id="91898a3512235050c32c7a99a50c8394d7a8397d" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;doNothing&lt;/code&gt;, nothing will be done; that is no new trailer will be added if there is already one with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">&lt;code&gt;doNothing&lt;/code&gt; 、何も行われません。メッセージに同じ&amp;lt;token&amp;gt;のトレーラがすでに存在する場合、新しいトレーラは追加されません。</target>
        </trans-unit>
        <trans-unit id="fafece11b5178185f0dda98fe61f1218eca3ec1e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;git format-patch --base=P -3 C&lt;/code&gt; (or variants thereof, e.g. with &lt;code&gt;--cover-letter&lt;/code&gt; or using &lt;code&gt;Z..C&lt;/code&gt; instead of &lt;code&gt;-3 C&lt;/code&gt; to specify the range), the base tree information block is shown at the end of the first message the command outputs (either the first patch, or the cover letter), like this:</source>
          <target state="translated">&lt;code&gt;git format-patch --base=P -3 C&lt;/code&gt; （またはその変異体、例えばで &lt;code&gt;--cover-letter&lt;/code&gt; または使用 &lt;code&gt;Z..C&lt;/code&gt; の代わり &lt;code&gt;-3 C&lt;/code&gt; の範囲を指定する）、ベース・ツリー情報ブロックがで示されています次のように、コマンドが出力する最初のメッセージの終わり（最初のパッチまたはカバーレター）。</target>
        </trans-unit>
        <trans-unit id="0dbfc249aea522f6a40d4b8be190d1fc0f0eadd8" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;list&lt;/code&gt;, output in an easy-to-parse format for scripts. This format will remain stable across Git versions and regardless of user configuration. See below for details.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 、スクリプトのための簡単に解析形式で出力。このフォーマットは、Gitのバージョン間で、ユーザーの設定に関係なく安定したままです。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="021957faebf0fa8a6ba6fb4276abb6b8c72afba9" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;lock&lt;/code&gt;, an explanation why the working tree is locked.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 、作業ツリーがロックされている理由を説明。</target>
        </trans-unit>
        <trans-unit id="bbe63cab2529b193584b4f7d1c86ee0207fc9968" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;prune&lt;/code&gt;, do not remove anything; just report what it would remove.</source>
          <target state="translated">&lt;code&gt;prune&lt;/code&gt; 、何も削除しないでください。削除する内容を報告してください。</target>
        </trans-unit>
        <trans-unit id="97f5cdb302d7f0a46689004724feb3d1aca29383" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;prune&lt;/code&gt;, only expire unused working trees older than &amp;lt;time&amp;gt;.</source>
          <target state="translated">&lt;code&gt;prune&lt;/code&gt; 、唯一の&amp;lt;時間&amp;gt;より古い未使用の作業ツリーを失効します。</target>
        </trans-unit>
        <trans-unit id="fe3d9726d2a7e550ec17d9d6b1b3e9e51367506e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;prune&lt;/code&gt;, only expire unused working trees older than &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prune&lt;/code&gt; 、唯一のより古い未使用の作業ツリーを期限切れに &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92ffa86e9306849b846038bae2a07ad322d0f86c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;prune&lt;/code&gt;, report all removals.</source>
          <target state="translated">&lt;code&gt;prune&lt;/code&gt; 、すべての削除を報告します。</target>
        </trans-unit>
        <trans-unit id="f6631b122f785beeb20cb0ef884a421b144138ae" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;replace&lt;/code&gt;, an existing trailer with the same &amp;lt;token&amp;gt; will be deleted and the new trailer will be added. The deleted trailer will be the closest one (with the same &amp;lt;token&amp;gt;) to the place where the new one will be added.</source>
          <target state="translated">で &lt;code&gt;replace&lt;/code&gt; 、&amp;lt;トークン&amp;gt;と同じで、既存のトレーラーが削除され、新しいトレーラーが追加されます。削除されたトレーラーは、新しいトレーラーが追加される場所に最も近い（同じ&amp;lt;token&amp;gt;を持つ）トレーラーになります。</target>
        </trans-unit>
        <trans-unit id="a80ff1485c839f0e248b3acec4853d6b6aaf0d80" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;worktree add &amp;lt;path&amp;gt;&lt;/code&gt;, without &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;, instead of creating a new branch from &lt;code&gt;HEAD&lt;/code&gt;, if there exists a tracking branch in exactly one remote matching the basename of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;, base the new branch on the remote-tracking branch, and mark the remote-tracking branch as &quot;upstream&quot; from the new branch.</source>
          <target state="translated">&lt;code&gt;worktree add &amp;lt;path&amp;gt;&lt;/code&gt; 、無し &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; 、代わりに新しい分岐を作成する &lt;code&gt;HEAD&lt;/code&gt; 、追跡ブランチは、遠隔のベース名に一致正確に一つに存在する場合 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 、ベースリモート・トラッキングに新しいブランチをブランチを作成し、リモートトラッキングブランチを新しいブランチの「アップストリーム」としてマークします。</target>
        </trans-unit>
        <trans-unit id="7b787c22358696a7fd63895c838388aed6d7912a" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;worktree add &amp;lt;path&amp;gt;&lt;/code&gt;, without &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt;, instead of creating a new branch from HEAD, if there exists a tracking branch in exactly one remote matching the basename of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;, base the new branch on the remote-tracking branch, and mark the remote-tracking branch as &quot;upstream&quot; from the new branch.</source>
          <target state="translated">&lt;code&gt;worktree add &amp;lt;path&amp;gt;&lt;/code&gt; 、無し &lt;code&gt;&amp;lt;commit-ish&amp;gt;&lt;/code&gt; 、代わりに、遠隔のベース名に一致正確に一つにおけるトラッキング分岐が存在する場合、先頭から新しいブランチを作成する &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; は、リモート・トラッキングに新しいブランチ、ベースブランチ、およびリモートトラッキングブランチを新しいブランチの「上流」としてマークします。</target>
        </trans-unit>
        <trans-unit id="660d18378dc3af084a2ac18df92d87c9aea68c5a" translate="yes" xml:space="preserve">
          <source>With Git bisect it&amp;rsquo;s a breeze: in the best case i can get a ~15 step kernel bisection done in 20-30 minutes, in an automated way. Even with manual help or when bisecting multiple, overlapping bugs, it&amp;rsquo;s rarely more than an hour.</source>
          <target state="translated">Git bisectを使用すると、それは簡単です。最良の場合、自動化された方法で、20〜30分で〜15ステップのカーネルの2等分を行うことができます。手動のヘルプを使用しても、複数の重複するバグを二分する場合でも、1時間を超えることはめったにありません。</target>
        </trans-unit>
        <trans-unit id="46d101f0f209ac246ff187c45b6b808668e526b7" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;-d&lt;/code&gt; or &lt;code&gt;-D&lt;/code&gt; option, &lt;code&gt;&amp;lt;branchname&amp;gt;&lt;/code&gt; will be deleted. You may specify more than one branch for deletion. If the branch currently has a reflog then the reflog will also be deleted.</source>
          <target state="translated">&lt;code&gt;-d&lt;/code&gt; または &lt;code&gt;-D&lt;/code&gt; オプション、 &lt;code&gt;&amp;lt;branchname&amp;gt;&lt;/code&gt; 削除されます。削除するブランチを複数指定できます。ブランチに現在reflogがある場合、reflogも削除されます。</target>
        </trans-unit>
        <trans-unit id="f74d36fd60998cbf589b7f2b7f7bc156998c0334" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-M&lt;/code&gt; option, &amp;lt;oldbranch&amp;gt; will be renamed to &amp;lt;newbranch&amp;gt;. If &amp;lt;oldbranch&amp;gt; had a corresponding reflog, it is renamed to match &amp;lt;newbranch&amp;gt;, and a reflog entry is created to remember the branch renaming. If &amp;lt;newbranch&amp;gt; exists, -M must be used to force the rename to happen.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;-M&lt;/code&gt; オプション、&amp;lt;oldbranch&amp;gt; &amp;lt;newbranch&amp;gt;に変更されます。&amp;lt;oldbranch&amp;gt;に対応するreflogがある場合は、&amp;lt;newbranch&amp;gt;に一致するように名前が変更され、ブランチの名前変更を記憶するためにreflogエントリが作成されます。&amp;lt;newbranch&amp;gt;が存在する場合は、-Mを使用して、名前の変更を強制する必要があります。</target>
        </trans-unit>
        <trans-unit id="078f9b93867e54fc6fd5cb6cccb717d173a4bdbb" translate="yes" xml:space="preserve">
          <source>With a small group, developers may just pull changes from each other&amp;rsquo;s repositories without the need for a central maintainer.</source>
          <target state="translated">少人数のグループでは、開発者は中央のメンテナを必要とせずに、互いのリポジトリから変更をプルするだけで済みます。</target>
        </trans-unit>
        <trans-unit id="d93af44627c4056a70413d4d1086a466c1eb6057" translate="yes" xml:space="preserve">
          <source>With an optional &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; argument, use the ref to find the notes to display. The ref can specify the full refname when it begins with &lt;code&gt;refs/notes/&lt;/code&gt;; when it begins with &lt;code&gt;notes/&lt;/code&gt;, &lt;code&gt;refs/&lt;/code&gt; and otherwise &lt;code&gt;refs/notes/&lt;/code&gt; is prefixed to form a full name of the ref.</source>
          <target state="translated">オプションの &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; 引数を指定し、refを使用して表示するメモを検索します。refは、 &lt;code&gt;refs/notes/&lt;/code&gt; で始まる完全なrefnameを指定できます。 &lt;code&gt;notes/&lt;/code&gt; で始まる場合は、 &lt;code&gt;refs/&lt;/code&gt; 、それ以外の場合は &lt;code&gt;refs/notes/&lt;/code&gt; が接頭辞として付けられ、refの完全な名前が形成されます。</target>
        </trans-unit>
        <trans-unit id="5888510f888416379a4d4b5651fc198f809cb1eb" translate="yes" xml:space="preserve">
          <source>With an optional argument, you can return to a different commit instead:</source>
          <target state="translated">オプションの引数を指定すると、代わりに別のコミットに戻ることができます。</target>
        </trans-unit>
        <trans-unit id="70761b9c0ed85e86f5fe4551851f4fb12dda8ef2" translate="yes" xml:space="preserve">
          <source>With centralized revision control systems this is often accomplished by including every module in one single repository. Developers can check out all modules or only the modules they need to work with. They can even modify files across several modules in a single commit while moving things around or updating APIs and translations.</source>
          <target state="translated">一元化されたリビジョン管理システムでは、1つのリポジトリにすべてのモジュールを含めることでこれを実現しています。開発者はすべてのモジュールをチェックアウトしたり、作業に必要なモジュールだけをチェックアウトしたりすることができます。また、一つのコミットで複数のモジュールにまたがるファイルを修正しながら、物を移動させたり、APIや翻訳を更新したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="34547cdab6bbebc8d70f8627cf92ce4ed49693c0" translate="yes" xml:space="preserve">
          <source>With no arguments, shows a list of existing remotes. Several subcommands are available to perform operations on the remotes.</source>
          <target state="translated">引数を指定しない場合、既存のリモコンのリストを表示します。リモコンの操作を行うために、いくつかのサブコマンドが利用できます。</target>
        </trans-unit>
        <trans-unit id="2d8eac222dcf5b2fb83219646b45ebbea55b5081" translate="yes" xml:space="preserve">
          <source>With no arguments, shows the status of existing submodules. Several subcommands are available to perform operations on the submodules.</source>
          <target state="translated">引数なしで、既存のサブモジュールの状態を表示します。サブモジュールに対する操作を実行するために、いくつかのサブコマンドが利用可能です。</target>
        </trans-unit>
        <trans-unit id="2955e54fe9fa9b7446c513283cbd98f27b722daf" translate="yes" xml:space="preserve">
          <source>With no arguments, this will:</source>
          <target state="translated">議論がなければ、これは</target>
        </trans-unit>
        <trans-unit id="07ab1293ff3b475c814f1fed59da838b442b2582" translate="yes" xml:space="preserve">
          <source>With no options and no COMMAND or GUIDE given, the synopsis of the &lt;code&gt;git&lt;/code&gt; command and a list of the most commonly used Git commands are printed on the standard output.</source>
          <target state="translated">オプションを指定せず、COMMANDまたはGUIDEを指定しない場合、 &lt;code&gt;git&lt;/code&gt; コマンドの概要と最もよく使用されるGitコマンドのリストが標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="5afd0acc1bfdb6a1daab0a26aea947b62407909e" translate="yes" xml:space="preserve">
          <source>With something like git.git current tree, I get:</source>
          <target state="translated">git.git current tree のようなもので、私は取得します。</target>
        </trans-unit>
        <trans-unit id="48292de53da5a3060e12b426e889eefbf2d24e76" translate="yes" xml:space="preserve">
          <source>With that configuration the full path to browse repositories would be:</source>
          <target state="translated">この設定では、リポジトリを閲覧するためのフルパスが必要になります。</target>
        </trans-unit>
        <trans-unit id="de963656527f9e7a6067d643ee4aa5bfca1b2d08" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--append&lt;/code&gt; option, include all commits that are present in the existing commit-graph file.</source>
          <target state="translated">&lt;code&gt;--append&lt;/code&gt; オプションを使用すると、既存のコミットグラフファイルに存在するすべてのコミットを含めます。</target>
        </trans-unit>
        <trans-unit id="14495f11a1a9217fb75c7d6db611a80cccd6e859" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--branch&lt;/code&gt; option, the command takes a name and checks if it can be used as a valid branch name (e.g. when creating a new branch). But be cautious when using the previous checkout syntax that may refer to a detached HEAD state. The rule &lt;code&gt;git check-ref-format --branch $name&lt;/code&gt; implements may be stricter than what &lt;code&gt;git check-ref-format refs/heads/$name&lt;/code&gt; says (e.g. a dash may appear at the beginning of a ref component, but it is explicitly forbidden at the beginning of a branch name). When run with &lt;code&gt;--branch&lt;/code&gt; option in a repository, the input is first expanded for the &amp;ldquo;previous checkout syntax&amp;rdquo; &lt;code&gt;@{-n}&lt;/code&gt;. For example, &lt;code&gt;@{-1}&lt;/code&gt; is a way to refer the last thing that was checked out using &quot;git switch&quot; or &quot;git checkout&quot; operation. This option should be used by porcelains to accept this syntax anywhere a branch name is expected, so they can act as if you typed the branch name. As an exception note that, the &amp;ldquo;previous checkout operation&amp;rdquo; might result in a commit object name when the N-th last thing checked out was not a branch.</source>
          <target state="translated">&lt;code&gt;--branch&lt;/code&gt; それは（例えば新しいブランチを作成する場合）、有効な支店名として使用できるのであればオプション、コマンドは名前とチェックを取ります。ただし、切り離されたHEAD状態を参照する可能性がある前述のチェックアウト構文を使用する場合は注意が必要です。ルール &lt;code&gt;git check-ref-format --branch $name&lt;/code&gt; implementsは、 &lt;code&gt;git check-ref-format refs/heads/$name&lt;/code&gt; 内容よりも厳しい場合があります（たとえば、refコンポーネントの先頭にダッシュが表示される場合がありますが、明示的にブランチ名の先頭では禁止されています）。リポジトリで &lt;code&gt;--branch&lt;/code&gt; オプションを指定して実行すると、「以前のチェックアウト構文」 &lt;code&gt;@{-n}&lt;/code&gt; の入力が最初に展開されます。たとえば、 &lt;code&gt;@{-1}&lt;/code&gt; 「git switch」または「git checkout」操作を使用してチェックアウトされた最後のものを参照する方法です。磁器がこのオプションを使用して、ブランチ名が必要な場所でこの構文を受け入れるようにして、ブランチ名を入力したかのように動作できるようにする必要があります。例外として、「前回のチェックアウト操作」では、最後にチェックアウトされたN番目のものがブランチではなかった場合に、コミットオブジェクト名が生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="294719ccdfaa2864ec086fd6924ef46c18c6d01c" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--changed-paths&lt;/code&gt; option, compute and write information about the paths changed between a commit and its first parent. This operation can take a while on large repositories. It provides significant performance gains for getting history of a directory or a file with &lt;code&gt;git log -- &amp;lt;path&amp;gt;&lt;/code&gt;. If this option is given, future commit-graph writes will automatically assume that this option was intended. Use &lt;code&gt;--no-changed-paths&lt;/code&gt; to stop storing this data.</source>
          <target state="translated">&lt;code&gt;--changed-paths&lt;/code&gt; コミットとその最初の親との間で変更パスに関するオプション、コンピューティングおよび書き込み情報。この操作は、大規模なリポジトリでは時間がかかる場合があります。 &lt;code&gt;git log -- &amp;lt;path&amp;gt;&lt;/code&gt; して、ディレクトリまたはファイルの履歴を取得するためのパフォーマンスが大幅に向上します。このオプションが指定されている場合、将来のコミットグラフの書き込みでは、このオプションが意図されたものであると自動的に想定されます。このデータの保存を停止するには、 &lt;code&gt;--no-changed-paths&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7ac44a38e65d55dddeac740d3be63e38e85fa148" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--max-new-filters=&amp;lt;n&amp;gt;&lt;/code&gt; option, generate at most &lt;code&gt;n&lt;/code&gt; new Bloom filters (if &lt;code&gt;--changed-paths&lt;/code&gt; is specified). If &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, no limit is enforced. Only commits present in the new layer count against this limit. To retroactively compute Bloom filters over earlier layers, it is advised to use &lt;code&gt;--split=replace&lt;/code&gt;. Overrides the &lt;code&gt;commitGraph.maxNewFilters&lt;/code&gt; configuration.</source>
          <target state="translated">&lt;code&gt;--max-new-filters=&amp;lt;n&amp;gt;&lt;/code&gt; オプションでは、最大で発生する &lt;code&gt;n&lt;/code&gt; 個（場合は、新しいブルームフィルタ &lt;code&gt;--changed-paths&lt;/code&gt; 指定されています）。 &lt;code&gt;n&lt;/code&gt; が &lt;code&gt;-1&lt;/code&gt; の場合、制限は適用されません。新しいレイヤーに存在するコミットのみがこの制限にカウントされます。以前のレイヤーでブルームフィルターをさかのぼって計算するには、 &lt;code&gt;--split=replace&lt;/code&gt; を使用することをお勧めします。 &lt;code&gt;commitGraph.maxNewFilters&lt;/code&gt; 構成をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="f26f07033bd08bfdb6102afbc60e4bb690a51e35" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--reachable&lt;/code&gt; option, generate the new commit graph by walking commits starting at all refs. (Cannot be combined with &lt;code&gt;--stdin-commits&lt;/code&gt; or &lt;code&gt;--stdin-packs&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;--reachable&lt;/code&gt; オプション、新しいはすべて、引用文献から始まるコミットを歩いてグラフをコミット生成します。（ &lt;code&gt;--stdin-commits&lt;/code&gt; または &lt;code&gt;--stdin-packs&lt;/code&gt; と組み合わせることはできません。）</target>
        </trans-unit>
        <trans-unit id="bced3fa737464959bcb0c4d4992aedaa6293d7b5" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--shallow&lt;/code&gt; option, only check the tip commit-graph file in a chain of split commit-graphs.</source>
          <target state="translated">&lt;code&gt;--shallow&lt;/code&gt; オプションのみ分割のチェーンの先端コミットグラフファイルをチェックし、グラフをコミットします。</target>
        </trans-unit>
        <trans-unit id="023fb87ae200847a2eb976930adb7f7ff9a576bb" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--split&lt;/code&gt; option, write the commit-graph as a chain of multiple commit-graph files stored in &lt;code&gt;&amp;lt;dir&amp;gt;/info/commit-graphs&lt;/code&gt;. The new commits not already in the commit-graph are added in a new &quot;tip&quot; file. This file is merged with the existing file if the following merge conditions are met:</source>
          <target state="translated">&lt;code&gt;--split&lt;/code&gt; オプション、に格納されている複数のコミット・グラフのファイルのチェーンとしてコミットグラフを書く &lt;code&gt;&amp;lt;dir&amp;gt;/info/commit-graphs&lt;/code&gt; 。まだコミットグラフに含まれていない新しいコミットは、新しい「ヒント」ファイルに追加されます。次のマージ条件が満たされている場合、このファイルは既存のファイルとマージされます。</target>
        </trans-unit>
        <trans-unit id="6bf69abea1fff62b20072adaab62de0f43e36b76" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--split[=&amp;lt;strategy&amp;gt;]&lt;/code&gt; option, write the commit-graph as a chain of multiple commit-graph files stored in &lt;code&gt;&amp;lt;dir&amp;gt;/info/commit-graphs&lt;/code&gt;. Commit-graph layers are merged based on the strategy and other splitting options. The new commits not already in the commit-graph are added in a new &quot;tip&quot; file. This file is merged with the existing file if the following merge conditions are met:</source>
          <target state="translated">&lt;code&gt;--split[=&amp;lt;strategy&amp;gt;]&lt;/code&gt; オプションに格納された複数のコミット・グラフのファイルのチェーンとしてコミットグラフを書き込む &lt;code&gt;&amp;lt;dir&amp;gt;/info/commit-graphs&lt;/code&gt; 。コミットグラフレイヤーは、戦略およびその他の分割オプションに基づいてマージされます。 commit-graphにまだ含まれていない新しいコミットは、新しい「tip」ファイルに追加されます。次のマージ条件が満たされた場合、このファイルは既存のファイルとマージされます。</target>
        </trans-unit>
        <trans-unit id="0f402e69b2097f87a53ae26564ee053ba1f630ec" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--stdin-commits&lt;/code&gt; option, generate the new commit graph by walking commits starting at the commits specified in stdin as a list of OIDs in hex, one OID per line. (Cannot be combined with &lt;code&gt;--stdin-packs&lt;/code&gt; or &lt;code&gt;--reachable&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;--stdin-commits&lt;/code&gt; オプション、新しいヘクス内のOIDのリストを、1行に1つのOIDとして、標準入力で指定したコミットから始まる歩いコミットによってグラフをコミット生成します。（ &lt;code&gt;--stdin-packs&lt;/code&gt; または &lt;code&gt;--reachable&lt;/code&gt; と組み合わせることはできません。）</target>
        </trans-unit>
        <trans-unit id="4837cdd22ed59b809de4737c644da886aae1ea19" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--stdin-commits&lt;/code&gt; option, generate the new commit graph by walking commits starting at the commits specified in stdin as a list of OIDs in hex, one OID per line. OIDs that resolve to non-commits (either directly, or by peeling tags) are silently ignored. OIDs that are malformed, or do not exist generate an error. (Cannot be combined with &lt;code&gt;--stdin-packs&lt;/code&gt; or &lt;code&gt;--reachable&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;--stdin-commits&lt;/code&gt; オプション、新しいヘクス内のOIDのリストを、1行に1つのOIDとして、標準入力で指定したコミットから始まる歩いコミットによってグラフをコミット生成します。非コミットに解決されるOID（直接またはタグのピーリングによって）は、黙って無視されます。不正な形式のOID、または存在しないOIDはエラーを生成します。 （ &lt;code&gt;--stdin-packs&lt;/code&gt; または &lt;code&gt;--reachable&lt;/code&gt; と組み合わせることはできません。）</target>
        </trans-unit>
        <trans-unit id="eaf73ef52d157ce1e4ddc4b827c0a6415ea79de1" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;--stdin-packs&lt;/code&gt; option, generate the new commit graph by walking objects only in the specified pack-indexes. (Cannot be combined with &lt;code&gt;--stdin-commits&lt;/code&gt; or &lt;code&gt;--reachable&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;--stdin-packs&lt;/code&gt; オプション、歩行によって新しいコミットグラフを生成することは、必ず指定のパック、インデックス内のオブジェクト。（ &lt;code&gt;--stdin-commits&lt;/code&gt; または &lt;code&gt;--reachable&lt;/code&gt; と組み合わせることはできません。）</target>
        </trans-unit>
        <trans-unit id="17857b1a19de2786ab177b98550f7755d5958169" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;subsystem&lt;/code&gt; reflog: after &lt;code&gt;git fetch&lt;/code&gt;, the old tip of &lt;code&gt;subsystem&lt;/code&gt; is at &lt;code&gt;subsystem@{1}&lt;/code&gt;. Subsequent fetches will increase the number. (See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;subsystem&lt;/code&gt; REFLOG：後に &lt;code&gt;git fetch&lt;/code&gt; 、古い先端 &lt;code&gt;subsystem&lt;/code&gt; である &lt;code&gt;subsystem@{1}&lt;/code&gt; 。後続のフェッチで数が増えます。（&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="b4f2100600cd65d2bb507aefd40b38b428ed31a7" translate="yes" xml:space="preserve">
          <source>With the example above that would give:</source>
          <target state="translated">上の例では</target>
        </trans-unit>
        <trans-unit id="a003c8ea87ae62c71ced8657b18db066ae621f53" translate="yes" xml:space="preserve">
          <source>With the exception of raw file data (which Git does not interpret) the fast-import input format is text (ASCII) based. This text based format simplifies development and debugging of frontend programs, especially when a higher level language such as Perl, Python or Ruby is being used.</source>
          <target state="translated">生のファイルデータ (Git は解釈しません)を除いて、高速インポートの入力フォーマットはテキスト (ASCII)ベースです。このテキストベースのフォーマットは、特に Perl や Python、Ruby などの高レベルの言語を使用している場合に、フロントエンドプログラムの開発やデバッグを簡素化します。</target>
        </trans-unit>
        <trans-unit id="832b24adba81a74f8f3c27d1a374c3c9abe6eae9" translate="yes" xml:space="preserve">
          <source>With the latter, you can use the manual viewer of your choice; see &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt; for more information.</source>
          <target state="translated">後者では、任意の手動ビューアを使用できます。詳細については、&lt;a href=&quot;git-help&quot;&gt;git-help [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd552b2cf02d64fea6c3a2fbecdcfeec69fa5199" translate="yes" xml:space="preserve">
          <source>With the right arguments, &lt;code&gt;git diff&lt;/code&gt; can also show us the difference between the working directory and the last commit, or between the index and the last commit:</source>
          <target state="translated">正しい引数を指定すると、 &lt;code&gt;git diff&lt;/code&gt; は作業ディレクトリと最後のコミット、またはインデックスと最後のコミットの違いも表示できます。</target>
        </trans-unit>
        <trans-unit id="6936b3f47f8ae1f272ba09aecb9105ac3f327d8a" translate="yes" xml:space="preserve">
          <source>With the strategies that use 3-way merge (including the default, &lt;code&gt;recursive&lt;/code&gt;), if a change is made on both branches, but later reverted on one of the branches, that change will be present in the merged result; some people find this behavior confusing. It occurs because only the heads and the merge base are considered when performing a merge, not the individual commits. The merge algorithm therefore considers the reverted change as no change at all, and substitutes the changed version instead.</source>
          <target state="translated">3ウェイマージ（デフォルト、 &lt;code&gt;recursive&lt;/code&gt; を含む）を使用する戦略では、両方のブランチで変更が行われたが、後でいずれかのブランチで元に戻された場合、その変更はマージされた結果に表示されます。一部の人々はこの行動を混乱させます。これは、個々のコミットではなく、ヘッドとマージベースのみがマージの実行時に考慮されるために発生します。したがって、マージアルゴリズムは、元に戻された変更をまったく変更なしと見なし、代わりに変更されたバージョンを置き換えます。</target>
        </trans-unit>
        <trans-unit id="993a54cdc4357f066aea765f4571bf68eff0acc7" translate="yes" xml:space="preserve">
          <source>With this option, &lt;code&gt;git cherry-pick&lt;/code&gt; will let you edit the commit message prior to committing.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;git cherry-pick&lt;/code&gt; を使用して、コミットする前にコミットメッセージを編集できます。</target>
        </trans-unit>
        <trans-unit id="333853f3b4bc551496449cd51ab3f625f2fd83b5" translate="yes" xml:space="preserve">
          <source>With this option, &lt;code&gt;git gc&lt;/code&gt; checks whether any housekeeping is required; if not, it exits without performing any work.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;git gc&lt;/code&gt; いずれかのハウスキーピングが必要かどうかをチェックします。そうでない場合は、何も実行せずに終了します。</target>
        </trans-unit>
        <trans-unit id="71e625d3b0cf2785820345a3c9b0fc38126ae685" translate="yes" xml:space="preserve">
          <source>With this option, &lt;code&gt;git revert&lt;/code&gt; will let you edit the commit message prior to committing the revert. This is the default if you run the command from a terminal.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;git revert&lt;/code&gt; を使用すると、復帰をコミットする前にコミットメッセージを編集できます。これは、端末からコマンドを実行する場合のデフォルトです。</target>
        </trans-unit>
        <trans-unit id="c4b763c3b176a1288a147104d8354f56c0e27e09" translate="yes" xml:space="preserve">
          <source>With this option, &lt;code&gt;git revert&lt;/code&gt; will not start the commit message editor.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;git revert&lt;/code&gt; はコミットメッセージエディターを起動しません。</target>
        </trans-unit>
        <trans-unit id="8c4fe13a9c7d1e41585a8e2b5418a2b1ca5a28f1" translate="yes" xml:space="preserve">
          <source>With this option, &lt;code&gt;merge-recursive&lt;/code&gt; spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly. See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--patience&lt;/code&gt;.</source>
          <target state="translated">このオプションを使用すると、 &lt;code&gt;merge-recursive&lt;/code&gt; は、余計な一致行（たとえば、個別の関数からのブレース）が原因で発生することがある誤マージを回避するために、少し余分な時間を費やします。マージするブランチが大幅に分岐した場合に使用します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--patience&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9b7fa933690b4dfe40d9dc500f9cfa6ba3897c3d" translate="yes" xml:space="preserve">
          <source>With this option, diff output for a merge commit shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time. Furthermore, it lists only files which were modified from all parents.</source>
          <target state="translated">このオプションを使用すると、マージコミットの diff 出力では、親と結果の間の差分を一度に一対ずつ表示するのではなく、それぞれの親からマージ結果への差分を同時に表示します。さらに、すべての親から変更されたファイルのみを表示します。</target>
        </trans-unit>
        <trans-unit id="3524864d6b6fccf88decb6caefb79eeb0a8e7c7e" translate="yes" xml:space="preserve">
          <source>With this option, git will replace all refnames, paths, blob contents, commit and tag messages, names, and email addresses in the output with anonymized data. Two instances of the same string will be replaced equivalently (e.g., two commits with the same author will have the same anonymized author in the output, but bear no resemblance to the original author string). The relationship between commits, branches, and tags is retained, as well as the commit timestamps (but the commit messages and refnames bear no resemblance to the originals). The relative makeup of the tree is retained (e.g., if you have a root tree with 10 files and 3 trees, so will the output), but their names and the contents of the files will be replaced.</source>
          <target state="translated">このオプションを指定すると、git は出力のすべての refnames、パス、ブロブの内容、コミットやタグのメッセージ、名前、メールアドレスを匿名データに置き換えます。同じ文字列のふたつのインスタンスが同等に置き換えられます (たとえば、同じ作者を持つふたつのコミットの場合は匿名化された作者は同じですが、元の作者の文字列とは似ても似つかないということになります)。コミット、ブランチ、タグの関係はコミットのタイムスタンプと同様に保持されます (ただし、コミットメッセージと refnames は元のものとは似ていません)。ツリーの相対的な構成は保持されますが (例えば、ルートツリーに 10 個のファイルと 3 個のツリーがある場合、出力も同様に保持されます)、それらのファイル名とファイルの内容は置き換えられます。</target>
        </trans-unit>
        <trans-unit id="cbb1ff7744c2585e2c6b4c0275539aaae99818d7" translate="yes" xml:space="preserve">
          <source>With this option, parents that are hidden by grafts are packed nevertheless.</source>
          <target state="translated">このオプションを使用すると、移植片によって隠された親はそれにもかかわらずパックされています。</target>
        </trans-unit>
        <trans-unit id="64d24b372615e7424e92210d8b3079a3b6d54b46" translate="yes" xml:space="preserve">
          <source>With this option, the command includes the current branch to the list of revs to be shown when it is not given on the command line.</source>
          <target state="translated">このオプションを指定すると、コマンドラインで指定されていない場合に表示されるリビジョンのリストに現在のブランチを含めることができます。</target>
        </trans-unit>
        <trans-unit id="a7994938c4128018ec7f46d918cac8d359a1f2eb" translate="yes" xml:space="preserve">
          <source>With this, &lt;code&gt;git show-branch&lt;/code&gt; without extra parameters would show only the primary branches. In addition, if you happen to be on your topic branch, it is shown as well.</source>
          <target state="translated">これにより、余分なパラメーターなしで &lt;code&gt;git show-branch&lt;/code&gt; を実行すると、主要なブランチのみが表示されます。また、トピックブランチにいる場合は、それも表示されます。</target>
        </trans-unit>
        <trans-unit id="7d389d82d11c207ddbcbb54d477d308b2e5d9f7f" translate="yes" xml:space="preserve">
          <source>With this, Alice can perform the first part of the &quot;pull&quot; operation alone using the &lt;code&gt;git fetch&lt;/code&gt; command without merging them with her own branch, using:</source>
          <target state="translated">これにより、Aliceは &lt;code&gt;git fetch&lt;/code&gt; コマンドを使用して「プル」操作の最初の部分を単独で実行できます。次のコマンドを使用して、自分のブランチとマージする必要はありません。</target>
        </trans-unit>
        <trans-unit id="6062bf6506f2ab2b976dee38aa5322c59a129e2f" translate="yes" xml:space="preserve">
          <source>Within a linked working tree, $GIT_DIR is set to point to this private directory (e.g. &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; in the example) and $GIT_COMMON_DIR is set to point back to the main working tree&amp;rsquo;s $GIT_DIR (e.g. &lt;code&gt;/path/main/.git&lt;/code&gt;). These settings are made in a &lt;code&gt;.git&lt;/code&gt; file located at the top directory of the linked working tree.</source>
          <target state="translated">リンクされた作業ツリー内で、$ GIT_DIRはこのプライベートディレクトリ（例では &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; ）を指すように設定され、$ GIT_COMMON_DIRはメイン作業ツリーの$ GIT_DIRを指すように設定されます（例えば &lt;code&gt;/path/main/.git&lt;/code&gt; ）。これらの設定は、リンクされた作業ツリーの最上位ディレクトリにある &lt;code&gt;.git&lt;/code&gt; ファイルで行われます。</target>
        </trans-unit>
        <trans-unit id="28d243903fe73e45525c0f96e48fd5d6abc9c7f9" translate="yes" xml:space="preserve">
          <source>Within a linked working tree, &lt;code&gt;$GIT_DIR&lt;/code&gt; is set to point to this private directory (e.g. &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; in the example) and &lt;code&gt;$GIT_COMMON_DIR&lt;/code&gt; is set to point back to the main working tree&amp;rsquo;s &lt;code&gt;$GIT_DIR&lt;/code&gt; (e.g. &lt;code&gt;/path/main/.git&lt;/code&gt;). These settings are made in a &lt;code&gt;.git&lt;/code&gt; file located at the top directory of the linked working tree.</source>
          <target state="translated">リンク作業ツリーの中で、 &lt;code&gt;$GIT_DIR&lt;/code&gt; このプライベートディレクトリを指すように設定されている（例えば &lt;code&gt;/path/main/.git/worktrees/test-next&lt;/code&gt; 例の場合）と &lt;code&gt;$GIT_COMMON_DIR&lt;/code&gt; メイン作業ツリーのにポイントバックに設定されている &lt;code&gt;$GIT_DIR&lt;/code&gt; （例： &lt;code&gt;/path/main/.git&lt;/code&gt; ）。これらの設定は、リンクされた作業ツリーの最上位ディレクトリにある &lt;code&gt;.git&lt;/code&gt; ファイルで行われます。</target>
        </trans-unit>
        <trans-unit id="f531335c76344721aaf744205582ff3be68651bd" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--all&lt;/code&gt; and without any &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;, the heads that exist both on the local side and on the remote side are updated.</source>
          <target state="translated">なければ &lt;code&gt;--all&lt;/code&gt; と任意のなし &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; 、ローカル側とリモート側の両方に存在するヘッドが更新されます。</target>
        </trans-unit>
        <trans-unit id="af870a4c72e2ec7c668a803b1e745b16df6d1c9d" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--follow-symlinks&lt;/code&gt;, these would print data about the symlink itself. In the case of &lt;code&gt;HEAD:link&lt;/code&gt;, you would see</source>
          <target state="translated">&lt;code&gt;--follow-symlinks&lt;/code&gt; がない場合、これらはシンボリックリンク自体に関するデータを出力します。以下の場合は &lt;code&gt;HEAD:link&lt;/code&gt; 、あなたが見ることが</target>
        </trans-unit>
        <trans-unit id="a213d6298e44415b29925050ee6ffa235637e828" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;--force&lt;/code&gt;, the &amp;lt;src&amp;gt; ref is stored at the remote only if &amp;lt;dst&amp;gt; does not exist, or &amp;lt;dst&amp;gt; is a proper subset (i.e. an ancestor) of &amp;lt;src&amp;gt;. This check, known as &quot;fast-forward check&quot;, is performed in order to avoid accidentally overwriting the remote ref and lose other peoples' commits from there.</source>
          <target state="translated">&lt;code&gt;--force&lt;/code&gt; がない場合、&amp;lt;src&amp;gt; refは、&amp;lt;dst&amp;gt;が存在しないか、&amp;lt;dst&amp;gt;が&amp;lt;src&amp;gt;の適切なサブセット（つまり祖先）である場合にのみ、リモートに保存されます。「早送りチェック」として知られるこのチェックは、リモート参照を誤って上書きして、そこから他の人のコミットを失うのを防ぐために実行されます。</target>
        </trans-unit>
        <trans-unit id="44aa5155d389a8a00fc9a9c0d5c5dc24c0b6b423" translate="yes" xml:space="preserve">
          <source>Without additional configuration, pushes the current branch to the configured upstream (&lt;code&gt;remote.origin.merge&lt;/code&gt; configuration variable) if it has the same name as the current branch, and errors out without pushing otherwise.</source>
          <target state="translated">追加の構成なしで、現在のブランチと同じ名前の場合、現在のブランチを構成済みのアップストリーム（ &lt;code&gt;remote.origin.merge&lt;/code&gt; 構成変数）にプッシュし、それ以外の場合はプッシュせずにエラーを出力します。</target>
        </trans-unit>
        <trans-unit id="0d4981e0bf66e69e6f534946531426d82d26ec6d" translate="yes" xml:space="preserve">
          <source>Without an optional path parameter, all files and subdirectories of the current working directory are included in the archive. If one or more paths are specified, only these are included.</source>
          <target state="translated">オプションの path パラメーターを指定しないと、カレント作業ディレクトリのすべてのファイルとサブディレクトリがアーカイブに含まれます。1つ以上のパスを指定した場合は、これらのパスのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="0aaf17e36c6d625d7976371bb21725d2cea205e0" translate="yes" xml:space="preserve">
          <source>Without any credential helpers defined, Git will try the following strategies to ask the user for usernames and passwords:</source>
          <target state="translated">クレデンシャルヘルパーが定義されていない場合、Git は次のような方法でユーザーにユーザー名とパスワードを尋ねようとします。</target>
        </trans-unit>
        <trans-unit id="6f8c2669a27a9c22abf3f515b27b1a9a5be3b6dc" translate="yes" xml:space="preserve">
          <source>Without disambiguating &lt;code&gt;--&lt;/code&gt;, Git makes a reasonable guess, but errors out and asking you to disambiguate when ambiguous. E.g. if you have a file called HEAD in your work tree, &lt;code&gt;git diff HEAD&lt;/code&gt; is ambiguous, and you have to say either &lt;code&gt;git diff HEAD --&lt;/code&gt; or &lt;code&gt;git diff -- HEAD&lt;/code&gt; to disambiguate.</source>
          <target state="translated">明確にすることなく &lt;code&gt;--&lt;/code&gt; 、Gitは妥当な推測を行いますが、エラーが発生し、あいまいな場合は明確にするように求められます。たとえば、作業ツリーにHEADというファイルがある場合、 &lt;code&gt;git diff HEAD&lt;/code&gt; はあいまいであり、明確にするために &lt;code&gt;git diff HEAD --&lt;/code&gt; または &lt;code&gt;git diff -- HEAD&lt;/code&gt; いずれかを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="636ef8b24660180a9f9d02cde9f707a809036029" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;-z&lt;/code&gt; option, pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; オプションを使用しない場合、「異常な」文字を含むパス名は、構成変数 &lt;code&gt;core.quotePath&lt;/code&gt; で説明されているように引用符で囲まれます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fbf6695514712c3a8e39b514953f35111f6c3ca8" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;-z&lt;/code&gt; option, pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). Using &lt;code&gt;-z&lt;/code&gt; the filename is output verbatim and the line is terminated by a NUL byte.</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; オプションを使用しない場合、「異常な」文字を含むパス名は、構成変数 &lt;code&gt;core.quotePath&lt;/code&gt; で説明されているように引用符で囲まれます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。 &lt;code&gt;-z&lt;/code&gt; を使用すると、ファイル名がそのまま出力され、行はNULバイトで終了します。</target>
        </trans-unit>
        <trans-unit id="94da29d7f90d6f6f16856adba693bd0f5ed5aeb9" translate="yes" xml:space="preserve">
          <source>Without the &lt;em&gt;--more=1&lt;/em&gt; option, &lt;em&gt;git show-branch&lt;/em&gt; would not output the &lt;em&gt;[master^]&lt;/em&gt; commit, as &lt;em&gt;[mybranch]&lt;/em&gt; commit is a common ancestor of both &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;mybranch&lt;/em&gt; tips. Please see &lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch[1]&lt;/a&gt; for details.</source>
          <target state="translated">なしで&lt;em&gt;--More = 1&lt;/em&gt;オプション、&lt;em&gt;gitのショー分岐が&lt;/em&gt;出力されていないだろう&lt;em&gt;[^マスター]&lt;/em&gt;として、コミット&lt;em&gt;[mybranch]は&lt;/em&gt;、両方の共通の祖先であるコミット&lt;em&gt;マスター&lt;/em&gt;と&lt;em&gt;mybranch&lt;/em&gt;ヒント。詳細は&lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="c29d8269d6df0a76bd7b7031ef1a5a35a844def8" translate="yes" xml:space="preserve">
          <source>Without this flag, &lt;code&gt;git log -p &amp;lt;path&amp;gt;...&lt;/code&gt; shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that &quot;&amp;lt;path&amp;gt;&amp;hellip;​&quot; limits only commits, and doesn&amp;rsquo;t limit diff for those commits.</source>
          <target state="translated">このフラグがない場合、 &lt;code&gt;git log -p &amp;lt;path&amp;gt;...&lt;/code&gt; は指定されたパスに関連するコミットを表示し、同じ指定されたパスについて差分を表示します。これにより、指定されたパスに関係するコミットの完全な差分が表示されます。つまり、「&amp;lt;path&amp;gt;&amp;hellip;」はコミットのみを制限し、それらのコミットの差分を制限しません。</target>
        </trans-unit>
        <trans-unit id="b86cf57585935f6e60cc9059e45208393d99c9a8" translate="yes" xml:space="preserve">
          <source>Without this option, pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">このオプションがない場合、「異常な」文字を含むパス名は、構成変数 &lt;code&gt;core.quotePath&lt;/code&gt; で説明されているように引用符で囲まれます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8450aafea5471fb336aa6711b707fb955fd65d91" translate="yes" xml:space="preserve">
          <source>Workflow for a third party library</source>
          <target state="translated">サードパーティライブラリのワークフロー</target>
        </trans-unit>
        <trans-unit id="8dfb0e4b50fd82c5ff8bc5fed81147f5e4aadb05" translate="yes" xml:space="preserve">
          <source>Workflow for an artificially split repo</source>
          <target state="translated">人為的に分割されたレポのワークフロー</target>
        </trans-unit>
        <trans-unit id="825ce9e97dc41179ec167b83be91179b5dacd316" translate="yes" xml:space="preserve">
          <source>Workflows</source>
          <target state="translated">Workflows</target>
        </trans-unit>
        <trans-unit id="72b02433b5041ac5ef6045242ff8d0e2784944a3" translate="yes" xml:space="preserve">
          <source>Working branch; defaults to HEAD.</source>
          <target state="translated">デフォルトは HEAD です。</target>
        </trans-unit>
        <trans-unit id="a2b68acce45b31c1701e61880a9ac430bd217ef5" translate="yes" xml:space="preserve">
          <source>Working directory specific configuration file for the main working directory in multiple working directory setup (see &lt;a href=&quot;git-worktree&quot;&gt;git-worktree[1]&lt;/a&gt;).</source>
          <target state="translated">複数の作業ディレクトリ設定のメイン作業ディレクトリ用の作業ディレクトリ固有の構成ファイル（&lt;a href=&quot;git-worktree&quot;&gt;git-worktree [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="29f32a47a3074cae8d2558abdc45a4c7a3f4de27" translate="yes" xml:space="preserve">
          <source>Working directory specific configuration file.</source>
          <target state="translated">作業ディレクトリ固有の設定ファイル。</target>
        </trans-unit>
        <trans-unit id="b7010e71f35d363293e1c71cea9eb7b673f227d7" translate="yes" xml:space="preserve">
          <source>Working trees can be identified by path, either relative or absolute.</source>
          <target state="translated">作業木は、相対的または絶対的な経路によって識別することができます。</target>
        </trans-unit>
        <trans-unit id="e5850a4e043e763eb3c70b51337df764ed12f013" translate="yes" xml:space="preserve">
          <source>Working with others</source>
          <target state="translated">他の人との連携</target>
        </trans-unit>
        <trans-unit id="883363a342498bf776fadbacf0d9322246ddce5d" translate="yes" xml:space="preserve">
          <source>Working with others, shared repository style</source>
          <target state="translated">他者との共同作業、共有リポジトリスタイル</target>
        </trans-unit>
        <trans-unit id="62159bf12f9108d11431e1d1114bdbbeecf78451" translate="yes" xml:space="preserve">
          <source>Works just like --signature except the signature is read from a file.</source>
          <target state="translated">署名がファイルから読み込まれる点を除けば、-signature と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="097006f59137099e2d2ccff414198fea83903044" translate="yes" xml:space="preserve">
          <source>Works just like format.signature except the contents of the file specified by this variable will be used as the signature.</source>
          <target state="translated">この変数で指定されたファイルの内容が署名として使用されることを除いては、 format.signature と同様に動作します。</target>
        </trans-unit>
        <trans-unit id="c45647582ec4fc92bdcd3ecd1a16e9638ca339a8" translate="yes" xml:space="preserve">
          <source>Works like &lt;code&gt;git push &amp;lt;remote&amp;gt;&lt;/code&gt;, where &amp;lt;remote&amp;gt; is the current branch&amp;rsquo;s remote (or &lt;code&gt;origin&lt;/code&gt;, if no remote is configured for the current branch).</source>
          <target state="translated">&lt;code&gt;git push &amp;lt;remote&amp;gt;&lt;/code&gt; のように機能します。ここで、&amp;lt;remote&amp;gt;は現在のブランチのリモート（または現在のブランチにリモートが構成されていない場合は &lt;code&gt;origin&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="96f0b3b7db8530493b30466426fa80c5c21f66c1" translate="yes" xml:space="preserve">
          <source>Wrap code spawning child processes.</source>
          <target state="translated">子プロセスをスポーンするコードをラップします。</target>
        </trans-unit>
        <trans-unit id="1f9c72af7bca7c9666626fcb471d6065e154c93d" translate="yes" xml:space="preserve">
          <source>Write a MIDX file for the packfiles in an alternate object store.</source>
          <target state="translated">代替オブジェクトストアにパックファイル用のMIDXファイルを書きます。</target>
        </trans-unit>
        <trans-unit id="36b48ab2e331354b7c3cc2f14ff9d8ea9d1001c3" translate="yes" xml:space="preserve">
          <source>Write a MIDX file for the packfiles in the current .git folder.</source>
          <target state="translated">現在の .git フォルダにある packfiles 用の MIDX ファイルを書きます。</target>
        </trans-unit>
        <trans-unit id="b42a0c66496716fcd8c88f5906d20e5cf08f4975" translate="yes" xml:space="preserve">
          <source>Write a chapter on using plumbing and writing scripts.</source>
          <target state="translated">配管の使い方やスクリプトの書き方の章を書きましょう。</target>
        </trans-unit>
        <trans-unit id="c8e128b9f546fd58c7e614d0f8b8821821084ae1" translate="yes" xml:space="preserve">
          <source>Write a commit-graph after fetching. This overrides the config setting &lt;code&gt;fetch.writeCommitGraph&lt;/code&gt;.</source>
          <target state="translated">フェッチ後にコミットグラフを書きます。これは、構成設定 &lt;code&gt;fetch.writeCommitGraph&lt;/code&gt; をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="e518a1279678087b263b8a6d5d4572c2e8b9dd3b" translate="yes" xml:space="preserve">
          <source>Write a commit-graph file based on the commits found in packfiles.</source>
          <target state="translated">packfiles で見つかったコミットを元にコミットグラフファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="a8a7e9f2485bf10bd9980490fdf55b0594e99b5f" translate="yes" xml:space="preserve">
          <source>Write a commit-graph file containing all commits in the current commit-graph file along with those reachable from &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">現在のコミットグラフファイル内のすべてのコミットと、 &lt;code&gt;HEAD&lt;/code&gt; から到達可能なコミットを含むコミットグラフファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="8c34e4cbacab76dc7a95f5e0f46081aab1f59603" translate="yes" xml:space="preserve">
          <source>Write a commit-graph file containing all reachable commits.</source>
          <target state="translated">到達可能なすべてのコミットを含むコミットグラフファイルを書きます。</target>
        </trans-unit>
        <trans-unit id="e1238f6b25cc5d29bebfcc60e794e1647b6dd786" translate="yes" xml:space="preserve">
          <source>Write a commit-graph file for the packed commits in your local &lt;code&gt;.git&lt;/code&gt; directory.</source>
          <target state="translated">ローカルの &lt;code&gt;.git&lt;/code&gt; ディレクトリにパックされたコミットのコミットグラフファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="7ba716e808cc8cf569e10d2453e1761bc59eae40" translate="yes" xml:space="preserve">
          <source>Write a commit-graph file, extending the current commit-graph file using commits in &lt;code&gt;&amp;lt;pack-index&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;pack-index&amp;gt;&lt;/code&gt; の commitを使用して現在のコミットグラフファイルを拡張し、コミットグラフファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="73c3a355bd823c82bb9b3a929df0d2e920a5e648" translate="yes" xml:space="preserve">
          <source>Write a new MIDX file.</source>
          <target state="translated">新しいMIDXファイルを書きます。</target>
        </trans-unit>
        <trans-unit id="b0d7b6d61dd4b6501290a029b72f9ed15f8cc305" translate="yes" xml:space="preserve">
          <source>Write a reachability bitmap index as part of the repack. This only makes sense when used with &lt;code&gt;-a&lt;/code&gt; or &lt;code&gt;-A&lt;/code&gt;, as the bitmaps must be able to refer to all reachable objects. This option overrides the setting of &lt;code&gt;repack.writeBitmaps&lt;/code&gt;. This option has no effect if multiple packfiles are created.</source>
          <target state="translated">再パックの一部として到達可能性ビットマップインデックスを記述します。これは、ビットマップが到達可能なすべてのオブジェクトを参照できる必要があるため、 &lt;code&gt;-a&lt;/code&gt; または &lt;code&gt;-A&lt;/code&gt; とともに使用する場合にのみ意味があります。このオプションは、 &lt;code&gt;repack.writeBitmaps&lt;/code&gt; の設定をオーバーライドします。複数のパックファイルが作成されている場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="0ec591cf31eda36450bc843a926c4fd529f9a0da" translate="yes" xml:space="preserve">
          <source>Write a set of patterns to the sparse-checkout file, as given as a list of arguments following the &lt;code&gt;set&lt;/code&gt; subcommand. Update the working directory to match the new patterns. Enable the core.sparseCheckout config setting if it is not already enabled.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; サブコマンドに続く引数のリストとして指定されているように、一連のパターンをスパースチェックアウトファイルに書き込みます。新しいパターンに一致するように作業ディレクトリを更新します。core.sparseCheckout構成設定がまだ有効になっていない場合は、有効にします。</target>
        </trans-unit>
        <trans-unit id="041470620f3506e6e154d55da89dd48b2bba6ec8" translate="yes" xml:space="preserve">
          <source>Write and verify Git commit-graph files</source>
          <target state="translated">Git のコミットグラフファイルを書き込んで検証する</target>
        </trans-unit>
        <trans-unit id="fbde21d9f61e2faa3e597fb0c951212436d2d05f" translate="yes" xml:space="preserve">
          <source>Write and verify multi-pack-indexes</source>
          <target state="translated">マルチパックインデックスの書き込みと検証</target>
        </trans-unit>
        <trans-unit id="0874d3d36a3af067f281de19e268427b067828a4" translate="yes" xml:space="preserve">
          <source>Write dangling objects into .git/lost-found/commit/ or .git/lost-found/other/, depending on type. If the object is a blob, the contents are written into the file, rather than its object name.</source>
          <target state="translated">ぶら下がっているオブジェクトを .git/lost-found/commit/または .git/lost-found/other/に書き出します。オブジェクトが blob の場合は、オブジェクト名ではなく中身がファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d9accbc71f1215e3614372f554930a021fe71b0a" translate="yes" xml:space="preserve">
          <source>Write into pairs of files (.pack and .idx), using &amp;lt;base-name&amp;gt; to determine the name of the created file. When this option is used, the two files in a pair are written in &amp;lt;base-name&amp;gt;-&amp;lt;SHA-1&amp;gt;.{pack,idx} files. &amp;lt;SHA-1&amp;gt; is a hash based on the pack content and is written to the standard output of the command.</source>
          <target state="translated">作成されたファイルの名前を判別するために&amp;lt;base-name&amp;gt;を使用して、ファイルのペア（.packおよび.idx）に書き込みます。このオプションを使用すると、ペアの2つのファイルが&amp;lt;base-name&amp;gt;-&amp;lt;SHA-1&amp;gt;。{pack、idx}ファイルに書き込まれます。&amp;lt;SHA-1&amp;gt;は、パックの内容に基づくハッシュであり、コマンドの標準出力に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="7fe0c30065baa84a0511c3d3081d91c7d606dfea" translate="yes" xml:space="preserve">
          <source>Write or verify a multi-pack-index (MIDX) file.</source>
          <target state="translated">マルチパックインデックス(MIDX)ファイルの書き込みまたは検証。</target>
        </trans-unit>
        <trans-unit id="e39d29fa27aa3fd795b76126771a3ffa6c08d16a" translate="yes" xml:space="preserve">
          <source>Write responses to &lt;code&gt;get-mark&lt;/code&gt;, &lt;code&gt;cat-blob&lt;/code&gt;, and &lt;code&gt;ls&lt;/code&gt; queries to the file descriptor &amp;lt;fd&amp;gt; instead of &lt;code&gt;stdout&lt;/code&gt;. Allows &lt;code&gt;progress&lt;/code&gt; output intended for the end-user to be separated from other output.</source>
          <target state="translated">&lt;code&gt;get-mark&lt;/code&gt; 、 &lt;code&gt;cat-blob&lt;/code&gt; 、および &lt;code&gt;ls&lt;/code&gt; クエリに対する応答を、 &lt;code&gt;stdout&lt;/code&gt; ではなくファイル記述子&amp;lt;fd&amp;gt;に書き込みます。可能に &lt;code&gt;progress&lt;/code&gt; エンドユーザのために意図出力が他の出力から分離されます。</target>
        </trans-unit>
        <trans-unit id="e189db14fd9c8dacb74b437fa25a566d7b39760b" translate="yes" xml:space="preserve">
          <source>Write the archive to &amp;lt;file&amp;gt; instead of stdout.</source>
          <target state="translated">アーカイブをstdoutではなく&amp;lt;file&amp;gt;に書き込みます。</target>
        </trans-unit>
        <trans-unit id="7dc7fd5fc893589e612150dc5a94bc95c63f6644" translate="yes" xml:space="preserve">
          <source>Write the generated pack index into the specified file. Without this option the name of pack index file is constructed from the name of packed archive file by replacing .pack with .idx (and the program fails if the name of packed archive does not end with .pack).</source>
          <target state="translated">生成 し たパック イ ンデ ッ ク ス を、 指定 し た フ ァ イ ルへ書 き 込みます。このオプションを指定しないと、パックインデックスファイルの名前は、パックされたアーカイブファイルの名前を .pack を .idx に置き換えて作成されます (パックされたアーカイブの名前が .pack で終わらない場合はプログラムは失敗します)。</target>
        </trans-unit>
        <trans-unit id="898b44ae7851f33ec7de0339d5f319ea640d48c2" translate="yes" xml:space="preserve">
          <source>Write the list of remote refs fetched in the &lt;code&gt;FETCH_HEAD&lt;/code&gt; file directly under &lt;code&gt;$GIT_DIR&lt;/code&gt;. This is the default. Passing &lt;code&gt;--no-write-fetch-head&lt;/code&gt; from the command line tells Git not to write the file. Under &lt;code&gt;--dry-run&lt;/code&gt; option, the file is never written.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR&lt;/code&gt; 直下の &lt;code&gt;FETCH_HEAD&lt;/code&gt; ファイルにフェッチされたリモート参照のリストを書き込みます。これがデフォルトです。コマンドラインから &lt;code&gt;--no-write-fetch-head&lt;/code&gt; を渡すと、Gitにファイルを書き込まないように指示します。下に &lt;code&gt;--dry-run&lt;/code&gt; オプションは、ファイルが書き込まれることはありません。</target>
        </trans-unit>
        <trans-unit id="7ee51e3bc5f984d1828334228be7ce34fc987d1e" translate="yes" xml:space="preserve">
          <source>Write the pack contents (what would have been written to .pack file) out to the standard output.</source>
          <target state="translated">パックの内容(.packファイルに書き込まれていたであろうもの)を標準出力に書き出します。</target>
        </trans-unit>
        <trans-unit id="f8fab17bc8f3e5385c26a96bd869170c9b748651" translate="yes" xml:space="preserve">
          <source>Write the resulting index out in the named on-disk format version. Supported versions are 2, 3 and 4. The current default version is 2 or 3, depending on whether extra features are used, such as &lt;code&gt;git add -N&lt;/code&gt;.</source>
          <target state="translated">結果のインデックスを名前付きのディスクフォーマットバージョンで書き出します。サポートされているバージョンは2、3、4です。現在のデフォルトバージョンは2または3で、 &lt;code&gt;git add -N&lt;/code&gt; などの追加機能が使用されているかどうかによって異なります。</target>
        </trans-unit>
        <trans-unit id="efedecbf7e9a176a45aaee6d10ad017d653ffad6" translate="yes" xml:space="preserve">
          <source>Write to standard error. Note that if &lt;code&gt;--detach&lt;/code&gt; is specified, the process disconnects from the real standard error, making this destination effectively equivalent to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">標準エラーに書き込みます。 &lt;code&gt;--detach&lt;/code&gt; が指定されている場合、プロセスは実際の標準エラーから切断され、この宛先は事実上 &lt;code&gt;none&lt;/code&gt; と同等になります。</target>
        </trans-unit>
        <trans-unit id="04570d31869f8fe0ff9437709cb2be3000b6efb7" translate="yes" xml:space="preserve">
          <source>Write to syslog, using the &lt;code&gt;git-daemon&lt;/code&gt; identifier.</source>
          <target state="translated">&lt;code&gt;git-daemon&lt;/code&gt; 識別子を使用して、syslogに書き込みます。</target>
        </trans-unit>
        <trans-unit id="b06c59a883065a2aa7a048f19cdd388e420a56a1" translate="yes" xml:space="preserve">
          <source>Write whatever message you want, and all the lines that start with &lt;code&gt;#&lt;/code&gt; will be pruned out, and the rest will be used as the commit message for the change. If you decide you don&amp;rsquo;t want to commit anything after all at this point (you can continue to edit things and update the index), you can just leave an empty message. Otherwise &lt;code&gt;git commit&lt;/code&gt; will commit the change for you.</source>
          <target state="translated">必要なメッセージを書き込んでください。 &lt;code&gt;#&lt;/code&gt; で始まるすべての行が削除され、残りは変更のコミットメッセージとして使用されます。この時点で結局何もコミットしたくないと判断した場合（引き続き編集とインデックスの更新を行うことができます）、空のメッセージを残すことができます。そうでなければ、 &lt;code&gt;git commit&lt;/code&gt; が変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="61b122f3a92e6ba319a161e3ee36a5061ca2ea4c" translate="yes" xml:space="preserve">
          <source>Writes a tree object that represents a subdirectory &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt;. This can be used to write the tree object for a subproject that is in the named subdirectory.</source>
          <target state="translated">サブディレクトリ &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; を表すツリーオブジェクトを書き込みます。これは、指定されたサブディレクトリにあるサブプロジェクトのツリーオブジェクトを書き込むために使用できます。</target>
        </trans-unit>
        <trans-unit id="157114a94f76dd225b6968a998012309617b01fe" translate="yes" xml:space="preserve">
          <source>Writes the commit-id into the filename under $GIT_DIR/refs/&amp;lt;filename&amp;gt; on the local end after the transfer is complete.</source>
          <target state="translated">転送が完了した後、ローカルエンドの$ GIT_DIR / refs / &amp;lt;filename&amp;gt;の下のファイル名にcommit-idを書き込みます。</target>
        </trans-unit>
        <trans-unit id="e02c77bcdadadb66d0f7703e015b6bcd89a6c5e3" translate="yes" xml:space="preserve">
          <source>X: &quot;unknown&quot; change type (most probably a bug, please report it)</source>
          <target state="translated">X:&quot;不明&quot; の変更タイプ (ほとんどがバグでしょう。報告してください)</target>
        </trans-unit>
        <trans-unit id="c4701ab33311f5af4d25d032b9d36f7ee2d229e7" translate="yes" xml:space="preserve">
          <source>You &lt;code&gt;must&lt;/code&gt; therefore ensure that the most recent commit of the branch you want to dcommit to is the &lt;code&gt;first&lt;/code&gt; parent of the merge. Chaos will ensue otherwise, especially if the first parent is an older commit on the same SVN branch.</source>
          <target state="translated">したがって、dcommitするブランチの最新のコミットがマージの &lt;code&gt;first&lt;/code&gt; 親であることを確認する &lt;code&gt;must&lt;/code&gt; があります。特に最初の親が同じSVNブランチの古いコミットである場合は、カオスが発生します。</target>
        </trans-unit>
        <trans-unit id="33b03e34a8212275c562b3fd47359312e9fb9f26" translate="yes" xml:space="preserve">
          <source>You also could say &lt;code&gt;c&lt;/code&gt; or &lt;code&gt;clean&lt;/code&gt; above as long as the choice is unique.</source>
          <target state="translated">選択が一意である限り、上記の &lt;code&gt;c&lt;/code&gt; または &lt;code&gt;clean&lt;/code&gt; と言うこともできます。</target>
        </trans-unit>
        <trans-unit id="3633df0f340d7a5b00e10a65751fa4510ce91fa7" translate="yes" xml:space="preserve">
          <source>You also could say &lt;code&gt;s&lt;/code&gt; or &lt;code&gt;sta&lt;/code&gt; or &lt;code&gt;status&lt;/code&gt; above as long as the choice is unique.</source>
          <target state="translated">選択が一意である限り、上記の「 &lt;code&gt;s&lt;/code&gt; 」、「 &lt;code&gt;sta&lt;/code&gt; 」、または「 &lt;code&gt;status&lt;/code&gt; 」と言うこともできます。</target>
        </trans-unit>
        <trans-unit id="80dcbb43282a1e399b57f0acd29e7d516598c299" translate="yes" xml:space="preserve">
          <source>You also need to ensure that each repository is &quot;bare&quot; (without a Git index file) for &lt;code&gt;cvs commit&lt;/code&gt; to work. See &lt;a href=&quot;gitcvs-migration&quot;&gt;gitcvs-migration[7]&lt;/a&gt;.</source>
          <target state="translated">また、 &lt;code&gt;cvs commit&lt;/code&gt; が機能するためには、各リポジトリが（Gitインデックスファイルなしで）「ベア」であることを確認する必要があります。&lt;a href=&quot;gitcvs-migration&quot;&gt;gitcvs-migration [7]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="63d1d5a88c78a80cfc3950acb2e452ff58df3b69" translate="yes" xml:space="preserve">
          <source>You also should not rewind branches in a submodule beyond commits that were ever recorded in any superproject.</source>
          <target state="translated">また、スーパープロジェクトに記録されたコミットを超えてサブモジュール内のブランチを巻き戻してはいけません。</target>
        </trans-unit>
        <trans-unit id="9cb8652293d991a8fc334c9f946fb5900f566815" translate="yes" xml:space="preserve">
          <source>You are happily working on something, and find the changes in these files are in good order. You do not want to see them when you run &lt;code&gt;git diff&lt;/code&gt;, because you plan to work on other files and changes with these files are distracting.</source>
          <target state="translated">あなたは幸運にも何かに取り組んでおり、これらのファイルの変更が順調であることがわかります。 &lt;code&gt;git diff&lt;/code&gt; を実行するときにこれらのファイルを表示したくないのは、他のファイルで作業する予定であり、これらのファイルでの変更が邪魔になるためです。</target>
        </trans-unit>
        <trans-unit id="48f9e78ec61620aadfc7c1e71bab372f08845a6f" translate="yes" xml:space="preserve">
          <source>You are in the middle of a refactoring session and your boss comes in and demands that you fix something immediately. You might typically use &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt; to store your changes away temporarily, however, your working tree is in such a state of disarray (with new, moved, and removed files, and other bits and pieces strewn around) that you don&amp;rsquo;t want to risk disturbing any of it. Instead, you create a temporary linked working tree to make the emergency fix, remove it when done, and then resume your earlier refactoring session.</source>
          <target state="translated">あなたはリファクタリングセッションの最中で、上司がやって来て、すぐに何かを修正するように要求します。通常は&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]&lt;/a&gt;を使用して変更を一時的に保存しますが、作業ツリーは（新しいファイル、移動されたファイル、削除されたファイル、その他の断片が散らばって）混乱した状態にあります。それを邪魔する危険を冒したくない。代わりに、一時的なリンクされた作業ツリーを作成して緊急修正を行い、完了時に削除してから、以前のリファクタリングセッションを再開します。</target>
        </trans-unit>
        <trans-unit id="bb2df2ca18755cbd46a4ed871293669f22530506" translate="yes" xml:space="preserve">
          <source>You are now ready to commit. You can see what is about to be committed using &lt;code&gt;git diff&lt;/code&gt; with the --cached option:</source>
          <target state="translated">これでコミットする準備ができました。--cachedオプションを指定した &lt;code&gt;git diff&lt;/code&gt; を使用して、コミットされる内容を確認できます。</target>
        </trans-unit>
        <trans-unit id="074e56336e1be0630703b280d6a3b60899f28a4c" translate="yes" xml:space="preserve">
          <source>You can adjust how pages generated by gitweb look using the variables described below. You can change the site name, add common headers and footers for all pages, and add a description of this gitweb installation on its main page (which is the projects list page), etc.</source>
          <target state="translated">gitweb で生成されたページがどのように見えるかは、以下に説明する変数を使って調整することができます。サイト名を変更したり、すべてのページに共通のヘッダやフッタを追加したり、メインページ (プロジェクト一覧ページ)にこの gitweb インストールの説明を追加したりすることができます。</target>
        </trans-unit>
        <trans-unit id="f5130cbe18f25cdc12700266fadc1f554b9c37ce" translate="yes" xml:space="preserve">
          <source>You can also ask git log to show patches:</source>
          <target state="translated">git log にパッチを表示させることもできます。</target>
        </trans-unit>
        <trans-unit id="f5378640dc8884e7695fa8d24ebc61aad94be600" translate="yes" xml:space="preserve">
          <source>You can also check out &lt;code&gt;origin/todo&lt;/code&gt; directly to examine it or write a one-off patch. See &lt;a href=&quot;#detached-head&quot;&gt;detached head&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;origin/todo&lt;/code&gt; を直接チェックアウトして確認したり、1回限りのパッチを作成したりすることもできます。&lt;a href=&quot;#detached-head&quot;&gt;分離ヘッドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1dba829f7b6e6b2354184e851e59ecadab491f50" translate="yes" xml:space="preserve">
          <source>You can also edit a patch series with an interactive rebase. This is the same as &lt;a href=&quot;#reordering-patch-series&quot;&gt;reordering a patch series using &lt;code&gt;format-patch&lt;/code&gt;&lt;/a&gt;, so use whichever interface you like best.</source>
          <target state="translated">インタラクティブなリベースでパッチシリーズを編集することもできます。これは、&lt;a href=&quot;#reordering-patch-series&quot;&gt; &lt;code&gt;format-patch&lt;/code&gt; &lt;/a&gt;を使用してパッチシリーズを並べ替えるのと同じなので、好きなインターフェイスを使用します。</target>
        </trans-unit>
        <trans-unit id="a56f9e1e04034dbb228cdfc1e0cb38c07a8bcbf1" translate="yes" xml:space="preserve">
          <source>You can also fetch branches from other repositories; so</source>
          <target state="translated">他のリポジトリからブランチを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="bb4e25e283a061b1bebe5a9dd36fbbd03f0e1b4b" translate="yes" xml:space="preserve">
          <source>You can also give &lt;code&gt;git log&lt;/code&gt; a &quot;range&quot; of commits where the first is not necessarily an ancestor of the second; for example, if the tips of the branches &quot;stable&quot; and &quot;master&quot; diverged from a common commit some time ago, then</source>
          <target state="translated">最初のコミットが2番目の祖先であるとは限らない場合、 &lt;code&gt;git log&lt;/code&gt; にコミットの「範囲」を与えることもできます。たとえば、ブランチのヒント「stable」と「master」が共通のコミットから少し前に分岐した場合、</target>
        </trans-unit>
        <trans-unit id="c219057e4d44e965fab9fe1f77892cd8f09c5753" translate="yes" xml:space="preserve">
          <source>You can also give commits names of your own; after running</source>
          <target state="translated">自分のコミット名をつけることもできます。</target>
        </trans-unit>
        <trans-unit id="cecebc054603ae5ff87afcd3e6caec5420b5c866" translate="yes" xml:space="preserve">
          <source>You can also override locations of gitweb configuration files during runtime by setting the following environment variables: &lt;code&gt;GITWEB_CONFIG_COMMON&lt;/code&gt;, &lt;code&gt;GITWEB_CONFIG_SYSTEM&lt;/code&gt; and &lt;code&gt;GITWEB_CONFIG&lt;/code&gt; to a non-empty value.</source>
          <target state="translated">&lt;code&gt;GITWEB_CONFIG_COMMON&lt;/code&gt; 、 &lt;code&gt;GITWEB_CONFIG_SYSTEM&lt;/code&gt; 、および &lt;code&gt;GITWEB_CONFIG&lt;/code&gt; の環境変数を空でない値に設定することで、実行時にgitweb構成ファイルの場所を上書きすることもできます。</target>
        </trans-unit>
        <trans-unit id="c335f539c67224e67ef9ba8bcb55a78f32c2ba64" translate="yes" xml:space="preserve">
          <source>You can also revert an earlier change, for example, the next-to-last:</source>
          <target state="translated">また、以前の変更を戻すこともできます(例えば、次の変更など)。</target>
        </trans-unit>
        <trans-unit id="f6f0f4e5da7f74f3d7e6aefa5597ca88126ce358" translate="yes" xml:space="preserve">
          <source>You can also run &lt;code&gt;git daemon&lt;/code&gt; as an inetd service; see the &lt;a href=&quot;git-daemon&quot;&gt;git-daemon[1]&lt;/a&gt; man page for details. (See especially the examples section.)</source>
          <target state="translated">&lt;code&gt;git daemon&lt;/code&gt; をinetdサービスとして実行することもできます。詳細は&lt;a href=&quot;git-daemon&quot;&gt;git-daemon [1]の&lt;/a&gt; manページをご覧ください。（特に例のセクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="f0a51538febea0717277859dfbb5418b689055cc" translate="yes" xml:space="preserve">
          <source>You can also see what references it offers:</source>
          <target state="translated">また、それがどのような参照を提供しているかを見ることができます。</target>
        </trans-unit>
        <trans-unit id="f06fdd5b89ee465ae510128ba09f10dd8adf5eac" translate="yes" xml:space="preserve">
          <source>You can also skip a range of commits, instead of just one commit, using range notation. For example:</source>
          <target state="translated">また、範囲表記を使用して、1つのコミットだけではなく、コミットの範囲をスキップすることもできます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="54e517ee1d2086de2439776d35ac41cdff2f30f7" translate="yes" xml:space="preserve">
          <source>You can also track branches from repositories other than the one you cloned from, using &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]&lt;/a&gt;を使用して、クローン元以外のリポジトリからブランチを追跡することもできます。</target>
        </trans-unit>
        <trans-unit id="28b63a93050077dfe73e5bbbcd2b4df244cc4f26" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt; to create commits, view changes in the index and the working tree files, and individually select diff hunks for inclusion in the index (by right-clicking on the diff hunk and choosing &quot;Stage Hunk For Commit&quot;).</source>
          <target state="translated">また、使用することができます&lt;a href=&quot;git-gui&quot;&gt;[1]のgit-guiのを&lt;/a&gt; diffの塊を右クリックして（コミット、インデックス内のビューの変更と作業ツリーのファイルを作成し、個別のインデックスに含めるためのハンクを選択し、「ステージハンクの場合を選びますコミット&quot;）。</target>
        </trans-unit>
        <trans-unit id="2d89b19204028ed2768f0a7d6951c7af3234e547" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;git format-patch --base=P -3 C&lt;/code&gt; to generate patches for A, B and C, and the identifiers for P, X, Y, Z are appended at the end of the first message.</source>
          <target state="translated">&lt;code&gt;git format-patch --base=P -3 C&lt;/code&gt; を使用して、A、B、Cのパッチを生成することもできます。P、X、Y、Zの識別子は、最初のメッセージの末尾に追加されます。</target>
        </trans-unit>
        <trans-unit id="2c144befb1f45c546071ce64e48b303dc0e810a7" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;git show&lt;/code&gt; to see any such file:</source>
          <target state="translated">&lt;code&gt;git show&lt;/code&gt; を使用して、そのようなファイルを表示することもできます。</target>
        </trans-unit>
        <trans-unit id="49c3eff4b4dfbb20ea17f1bea994d4ab08b8a178" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;git_commit_non_empty_tree &quot;$@&quot;&lt;/code&gt; instead of &lt;code&gt;git commit-tree &quot;$@&quot;&lt;/code&gt; if you don&amp;rsquo;t wish to keep commits with a single parent and that makes no change to the tree.</source>
          <target state="translated">単一の親でコミットを維持したくない場合で、ツリーに変更を加えない場合は、 &lt;code&gt;git commit-tree &quot;$@&quot;&lt;/code&gt; &lt;code&gt;git_commit_non_empty_tree &quot;$@&quot;&lt;/code&gt; 代わりにgit_commit_non_empty_tree &quot;$ @&quot;を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="015df615c0d1b650e7dd0d33e1d03af134ab36e3" translate="yes" xml:space="preserve">
          <source>You can always just jump back to your original &lt;code&gt;master&lt;/code&gt; branch by doing</source>
          <target state="translated">いつでも元の &lt;code&gt;master&lt;/code&gt; ブランチに戻ることができます</target>
        </trans-unit>
        <trans-unit id="e3173f9b04378ce969d4435b57687de248be9e7d" translate="yes" xml:space="preserve">
          <source>You can always view an old version of a file by just checking out the correct revision first. But sometimes it is more convenient to be able to view an old version of a single file without checking anything out; this command does that:</source>
          <target state="translated">最初に正しいリビジョンをチェックアウトするだけで、常に古いバージョンのファイルを表示することができます。しかし、何もチェックアウトせずに古いバージョンのファイルを見ることができる方が便利な場合もあります。</target>
        </trans-unit>
        <trans-unit id="ac57e48df46d91546d0b6c2ab36f112078813032" translate="yes" xml:space="preserve">
          <source>You can at any time create a new branch by just picking an arbitrary point in the project history, and just writing the SHA-1 name of that object into a file under &lt;code&gt;.git/refs/heads/&lt;/code&gt;. You can use any filename you want (and indeed, subdirectories), but the convention is that the &quot;normal&quot; branch is called &lt;code&gt;master&lt;/code&gt;. That&amp;rsquo;s just a convention, though, and nothing enforces it.</source>
          <target state="translated">プロジェクト履歴の任意のポイントを選択し、そのオブジェクトのSHA-1名を &lt;code&gt;.git/refs/heads/&lt;/code&gt; 下のファイルに書き込むだけで、いつでも新しいブランチを作成できます。任意のファイル名（および実際にはサブディレクトリ）を使用できますが、 &quot;通常の&quot;ブランチは &lt;code&gt;master&lt;/code&gt; と呼ばれています。ただし、これは単なる慣例であり、強制するものはありません。</target>
        </trans-unit>
        <trans-unit id="28fdfbc805da6922683f26cc12f785c6a111b6ce" translate="yes" xml:space="preserve">
          <source>You can choose to provide the name of a file in &lt;code&gt;$GIT_DIR/branches&lt;/code&gt;. The URL in this file will be used to access the repository. This file should have the following format:</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/branches&lt;/code&gt; ファイルの名前を指定することを選択できます。このファイルのURLは、リポジトリへのアクセスに使用されます。このファイルの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="184c3e9bbc8e0af36908329654dfda91364d6a99" translate="yes" xml:space="preserve">
          <source>You can choose to provide the name of a file in &lt;code&gt;$GIT_DIR/remotes&lt;/code&gt;. The URL in this file will be used to access the repository. The refspec in this file will be used as default when you do not provide a refspec on the command line. This file should have the following format:</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/remotes&lt;/code&gt; ファイルの名前を指定することを選択できます。このファイルのURLは、リポジトリへのアクセスに使用されます。このファイルのrefspecは、コマンドラインでrefspecを指定しない場合のデフォルトとして使用されます。このファイルの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a92f2a4a63c6c2d142357d1e5947af0b6de272f3" translate="yes" xml:space="preserve">
          <source>You can choose to provide the name of a remote which you had previously configured using &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt;, &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; or even by a manual edit to the &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file. The URL of this remote will be used to access the repository. The refspec of this remote will be used by default when you do not provide a refspec on the command line. The entry in the config file would appear like this:</source>
          <target state="translated">&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]&lt;/a&gt;、&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;使用して、または &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイルを手動で編集して、以前に構成したリモートの名前を提供することを選択できます。このリモートのURLは、リポジトリへのアクセスに使用されます。コマンドラインでrefspecを指定しない場合、このリモートのrefspecがデフォルトで使用されます。構成ファイルのエントリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="d377d9322805f2d9d1e87d74e556de9916d572ec" translate="yes" xml:space="preserve">
          <source>You can choose whether you want to trust the index file entirely (using the &lt;code&gt;--cached&lt;/code&gt; flag) or ask the diff logic to show any files that don&amp;rsquo;t match the stat state as being &quot;tentatively changed&quot;. Both of these operations are very useful indeed.</source>
          <target state="translated">（ &lt;code&gt;--cached&lt;/code&gt; フラグを使用して）インデックスファイルを完全に信頼するか、統計ロジックに一致しないファイルを「一時的に変更された」ものとして表示するように差分ロジックに要求するかを選択できます。これらの操作はどちらも非常に便利です。</target>
        </trans-unit>
        <trans-unit id="7c0716128ee4fbd827cb316e0652131c44810ab6" translate="yes" xml:space="preserve">
          <source>You can configure gitweb to only list and allow viewing of the explicitly exported repositories, via &lt;code&gt;$export_ok&lt;/code&gt; variable in gitweb config file; see &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt; manpage. If it evaluates to true, gitweb shows repositories only if this file named by &lt;code&gt;$export_ok&lt;/code&gt; exists in its object database (if directory has the magic file named &lt;code&gt;$export_ok&lt;/code&gt;).</source>
          <target state="translated">gitweb設定ファイルの &lt;code&gt;$export_ok&lt;/code&gt; 変数を使用して、gitwebを設定して明示的にエクスポートされたリポジトリの表示のみを許可できます。&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]の&lt;/a&gt;マンページを参照してください。trueと評価された場合、gitwebは &lt;code&gt;$export_ok&lt;/code&gt; 指定されたこのファイルがオブジェクトデータベースに存在する場合にのみリポジトリを表示します（ディレクトリに &lt;code&gt;$export_ok&lt;/code&gt; という名前のマジックファイルがある場合）。</target>
        </trans-unit>
        <trans-unit id="03a65df391294815ab470e62357c9e62de1fcfb2" translate="yes" xml:space="preserve">
          <source>You can configure individual repositories shown in gitweb by creating file in the &lt;code&gt;GIT_DIR&lt;/code&gt; of Git repository, or by setting some repo configuration variable (in &lt;code&gt;GIT_DIR/config&lt;/code&gt;, see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">Gitリポジトリーの &lt;code&gt;GIT_DIR&lt;/code&gt; にファイルを作成するか、リポジトリー構成変数（ &lt;code&gt;GIT_DIR/config&lt;/code&gt; で&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）を設定して、gitwebに表示される個々のリポジトリーを構成できます。</target>
        </trans-unit>
        <trans-unit id="45321feeff0945f0a2ba053e8ab969c82cc417c8" translate="yes" xml:space="preserve">
          <source>You can configure the database backend with the following configuration variables:</source>
          <target state="translated">データベースのバックエンドは、以下の構成変数で構成できます。</target>
        </trans-unit>
        <trans-unit id="d268b7f609741cf4701b8230b6d95314deb17a7a" translate="yes" xml:space="preserve">
          <source>You can create a new commit that undoes whatever was done by the old commit. This is the correct thing if your mistake has already been made public.</source>
          <target state="translated">古いコミットで行ったことを元に戻す新しいコミットを作成することができます。自分のミスがすでに公開されている場合は、これが正しいです。</target>
        </trans-unit>
        <trans-unit id="d8a9d4babf707e6fca47541eba4fa0b4e8c8edd2" translate="yes" xml:space="preserve">
          <source>You can customize the rules that &lt;code&gt;git diff --word-diff&lt;/code&gt; uses to split words in a line, by specifying an appropriate regular expression in the &quot;diff.*.wordRegex&quot; configuration variable. For example, in TeX a backslash followed by a sequence of letters forms a command, but several such commands can be run together without intervening whitespace. To separate them, use a regular expression in your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">「diff。*。wordRegex」構成変数で適切な正規表現を指定することにより、 &lt;code&gt;git diff --word-diff&lt;/code&gt; が単語を1行に分割するために使用するルールをカスタマイズできます。たとえば、TeXでは、バックスラッシュとそれに続く一連の文字がコマンドを形成しますが、そのようないくつかのコマンドは、空白を介在させることなく一緒に実行できます。それらを分離するには、次のように &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）で正規表現を使用します。</target>
        </trans-unit>
        <trans-unit id="38bcfec4c9f80337cd439b12b7afb0a63bb0fcb7" translate="yes" xml:space="preserve">
          <source>You can declare that a filter turns a content that by itself is unusable into a usable content by setting the filter.&amp;lt;driver&amp;gt;.required configuration variable to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">filter。&amp;lt;driver&amp;gt; .required構成変数を &lt;code&gt;true&lt;/code&gt; に設定することにより、フィルター自体が使用できないコンテンツを使用可能なコンテンツに変換することを宣言できます。</target>
        </trans-unit>
        <trans-unit id="d7aeeb9d27bdf323aad4937a225d2c2d1d7d6f4b" translate="yes" xml:space="preserve">
          <source>You can easily create such a branch with Git using interactive rebase.</source>
          <target state="translated">このようなブランチは、インタラクティブなリベースを使えば、Gitで簡単に作成することができます。</target>
        </trans-unit>
        <trans-unit id="2f7816df4cc860a9cfdb50146ff125e3acb46178" translate="yes" xml:space="preserve">
          <source>You can enforce finer grained permissions using update hooks. See &lt;a href=&quot;https://git-scm.com/docs/howto/update-hook-example&quot;&gt;Controlling access to branches using update hooks&lt;/a&gt;.</source>
          <target state="translated">更新フックを使用して、よりきめ細かい権限を適用できます。&lt;a href=&quot;https://git-scm.com/docs/howto/update-hook-example&quot;&gt;更新フックを使用したブランチへのアクセスの制御を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="dca6628a0b53b9b002cd44ea35104ed275c53c21" translate="yes" xml:space="preserve">
          <source>You can examine one of those dangling commits with, for example,</source>
          <target state="translated">ぶら下がっているコミットの一つは、例えば、次のような方法で調べることができます。</target>
        </trans-unit>
        <trans-unit id="4807484ba96d5012055b128c8602211fd418a27a" translate="yes" xml:space="preserve">
          <source>You can examine such index state with &lt;code&gt;git ls-files --unmerged&lt;/code&gt; command. An example:</source>
          <target state="translated">このようなインデックスの状態は、 &lt;code&gt;git ls-files --unmerged&lt;/code&gt; コマンドで確認できます。例：</target>
        </trans-unit>
        <trans-unit id="b5f066a300ab7fb920ca504e5ef4559d46dabfb5" translate="yes" xml:space="preserve">
          <source>You can examine the data represented in the object database and the index with various helper tools. For every object, you can use &lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file[1]&lt;/a&gt; to examine details about the object:</source>
          <target state="translated">さまざまなヘルパーツールを使用して、オブジェクトデータベースとインデックスで表されるデータを調べることができます。すべてのオブジェクトについて、&lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file [1]&lt;/a&gt;を使用してオブジェクトの詳細を調べることができます。</target>
        </trans-unit>
        <trans-unit id="fd093df539bb25e8d4c6b75d7c53e29317d7deb5" translate="yes" xml:space="preserve">
          <source>You can explicitly provide a full path to the tool by setting the configuration variable &lt;code&gt;difftool.&amp;lt;tool&amp;gt;.path&lt;/code&gt;. For example, you can configure the absolute path to kdiff3 by setting &lt;code&gt;difftool.kdiff3.path&lt;/code&gt;. Otherwise, &lt;code&gt;git difftool&lt;/code&gt; assumes the tool is available in PATH.</source>
          <target state="translated">構成変数 &lt;code&gt;difftool.&amp;lt;tool&amp;gt;.path&lt;/code&gt; 設定することにより、ツールへの完全パスを明示的に提供できます。たとえば、 &lt;code&gt;difftool.kdiff3.path&lt;/code&gt; を設定することにより、kdiff3への絶対パスを構成できます。それ以外の場合、 &lt;code&gt;git difftool&lt;/code&gt; は、ツールがPATHで使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="146074b490cdd862abeb41d866c18f9aaa225cf8" translate="yes" xml:space="preserve">
          <source>You can explicitly provide a full path to the tool by setting the configuration variable &lt;code&gt;mergetool.&amp;lt;tool&amp;gt;.path&lt;/code&gt;. For example, you can configure the absolute path to kdiff3 by setting &lt;code&gt;mergetool.kdiff3.path&lt;/code&gt;. Otherwise, &lt;code&gt;git mergetool&lt;/code&gt; assumes the tool is available in PATH.</source>
          <target state="translated">構成変数 &lt;code&gt;mergetool.&amp;lt;tool&amp;gt;.path&lt;/code&gt; 設定することにより、ツールへの完全パスを明示的に提供できます。たとえば、 &lt;code&gt;mergetool.kdiff3.path&lt;/code&gt; を設定することにより、kdiff3への絶対パスを構成できます。それ以外の場合、 &lt;code&gt;git mergetool&lt;/code&gt; は、ツールがPATHで使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="1d73514fe413b4199a0b5fc2096f965b3e1620ee" translate="yes" xml:space="preserve">
          <source>You can explicitly provide a full path to your preferred man viewer by setting the configuration variable &lt;code&gt;man.&amp;lt;tool&amp;gt;.path&lt;/code&gt;. For example, you can configure the absolute path to konqueror by setting &lt;code&gt;man.konqueror.path&lt;/code&gt;. Otherwise, &lt;code&gt;git help&lt;/code&gt; assumes the tool is available in PATH.</source>
          <target state="translated">構成変数 &lt;code&gt;man.&amp;lt;tool&amp;gt;.path&lt;/code&gt; 設定することで、優先manビューアへのフルパスを明示的に提供できます。たとえば、 &lt;code&gt;man.konqueror.path&lt;/code&gt; を設定することで、konquerorへの絶対パスを設定できます。それ以外の場合、 &lt;code&gt;git help&lt;/code&gt; は、ツールがPATHで使用できると想定します。</target>
        </trans-unit>
        <trans-unit id="11d166169fafafa437c100a2b764012cf5981ced" translate="yes" xml:space="preserve">
          <source>You can focus your efforts to check at a few points (for example rc and beta releases) that all the T test cases pass for all the N configurations. And when some tests don&amp;rsquo;t pass you can use &quot;git bisect&quot; (or better &quot;git bisect run&quot;). So you should perform roughly:</source>
          <target state="translated">すべてのTテストケースがすべてのN構成に合格することをいくつかのポイント（たとえば、rcおよびベータリリース）で確認することに集中できます。また、一部のテストに合格しない場合は、「git bisect」（またはより適切な「git bisect run」）を使用できます。したがって、大まかに実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="59d0d873078b4f91b40c2ee1e2770f185d430915" translate="yes" xml:space="preserve">
          <source>You can further cut down the number of trials, if you know what part of the tree is involved in the problem you are tracking down, by specifying path parameters when issuing the &lt;code&gt;bisect start&lt;/code&gt; command:</source>
          <target state="translated">&lt;code&gt;bisect start&lt;/code&gt; コマンドを発行するときにパスパラメータを指定することで、追跡している問題にツリーのどの部分が関係しているかがわかっている場合、試行回数をさらに減らすことができます。</target>
        </trans-unit>
        <trans-unit id="e5857d2949fb11d516cd50de71765499d023b3f6" translate="yes" xml:space="preserve">
          <source>You can generate diffs between any two versions using &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;を使用して、任意の2つのバージョン間の差分を生成できます。</target>
        </trans-unit>
        <trans-unit id="98e4a2c67e91124741c5ae666b50315da705ecdc" translate="yes" xml:space="preserve">
          <source>You can generate the projects list index file using the project_index action (the &lt;code&gt;TXT&lt;/code&gt; link on projects list page) directly from gitweb; see also &quot;Generating projects list using gitweb&quot; section below.</source>
          <target state="translated">gitwebから直接project_indexアクション（プロジェクトリストページの &lt;code&gt;TXT&lt;/code&gt; リンク）を使用して、プロジェクトリストインデックスファイルを生成できます。以下の「gitwebを使用したプロジェクトリストの生成」セクションもご覧ください。</target>
        </trans-unit>
        <trans-unit id="5b042e446e3f9ebd4b31fc02aac55f5c329ead7e" translate="yes" xml:space="preserve">
          <source>You can get a list of all available encodings on your platform with the following command:</source>
          <target state="translated">以下のコマンドで、プラットフォーム上で利用可能なすべてのエンコーディングのリストを取得できます。</target>
        </trans-unit>
        <trans-unit id="3d921181a0df868b1892f0a3e234a9c29e516883" translate="yes" xml:space="preserve">
          <source>You can get just the old (respectively new) term with &lt;code&gt;git bisect terms
--term-old&lt;/code&gt; or &lt;code&gt;git bisect terms --term-good&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git bisect terms --term-old&lt;/code&gt; または &lt;code&gt;git bisect terms --term-good&lt;/code&gt; を使用すると、古い（それぞれ新しい）用語のみを取得できます。</target>
        </trans-unit>
        <trans-unit id="41b9643f0720517e2c1772471e0c09d5c46b9644" translate="yes" xml:space="preserve">
          <source>You can give the &lt;code&gt;-m&lt;/code&gt; flag to the command, which would try a three-way merge:</source>
          <target state="translated">あなたは与えることができ &lt;code&gt;-m&lt;/code&gt; 3方向マージをしようとコマンドにフラグ：</target>
        </trans-unit>
        <trans-unit id="36617ae8104572554e1e13e9574934aea0623eb3" translate="yes" xml:space="preserve">
          <source>You can go back and modify the old commit. You should never do this if you have already made the history public; Git does not normally expect the &quot;history&quot; of a project to change, and cannot correctly perform repeated merges from a branch that has had its history changed.</source>
          <target state="translated">古いコミットに戻って修正することができます。Git は通常プロジェクトの &quot;履歴&quot; が変わることを期待していませんし、履歴が変更されたブランチから繰り返しマージを行うことはできません。</target>
        </trans-unit>
        <trans-unit id="427cec7db1c8d9c41ec669de64df63aacc49a26f" translate="yes" xml:space="preserve">
          <source>You can grow a new branch from any commit. For example, switch to &quot;HEAD~3&quot; and create branch &quot;fixup&quot;:</source>
          <target state="translated">任意のコミットから新しいブランチを成長させることができます。例えば、&quot;HEAD~3&quot; に切り替えて &quot;fixup&quot; というブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="8abddb96169bb94a7080d5c82ed5cac7b229954a" translate="yes" xml:space="preserve">
          <source>You can have a mixture of files show up as &quot;has been updated&quot; and &quot;is still dirty in the working directory&quot; together. You can always tell which file is in which state, since the &quot;has been updated&quot; ones show a valid sha1, and the &quot;not in sync with the index&quot; ones will always have the special all-zero sha1.</source>
          <target state="translated">更新されている &quot;と &quot;作業ディレクトリにまだダーティなまま &quot;のファイルを混在して表示させることができます。更新されている &quot;ファイルは有効な sha1 を示し、&quot;インデックスと同期していない &quot;ファイルは常にすべてゼロの特別な sha1 を持っているので、どのファイルがどの状態にあるかを常に知ることができます。</target>
        </trans-unit>
        <trans-unit id="ae3f7bca446e950bd716349b25ee5d05aaee6a26" translate="yes" xml:space="preserve">
          <source>You can include a config file from another by setting the special &lt;code&gt;include.path&lt;/code&gt; (or &lt;code&gt;includeIf.*.path&lt;/code&gt;) variable to the name of the file to be included. The variable takes a pathname as its value, and is subject to tilde expansion. These variables can be given multiple times.</source>
          <target state="translated">特別な &lt;code&gt;include.path&lt;/code&gt; （または &lt;code&gt;includeIf.*.path&lt;/code&gt; ）変数を含めるファイルの名前に設定することで、別の設定ファイルを含めることができます。変数はその値としてパス名を取り、チルダ展開の対象となります。これらの変数は複数回指定できます。</target>
        </trans-unit>
        <trans-unit id="5145f6f36a43ec5e98537ca833d15e8282538fcf" translate="yes" xml:space="preserve">
          <source>You can include a config file from another conditionally by setting a &lt;code&gt;includeIf.&amp;lt;condition&amp;gt;.path&lt;/code&gt; variable to the name of the file to be included.</source>
          <target state="translated">&lt;code&gt;includeIf.&amp;lt;condition&amp;gt;.path&lt;/code&gt; 変数を含めるファイルの名前に設定することにより、別の条件付きの構成ファイルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="509dfc228243cbfccb732c55df31d8f926c42b85" translate="yes" xml:space="preserve">
          <source>You can include other configuration file using read_config_file() subroutine. For example, one might want to put gitweb configuration related to access control for viewing repositories via Gitolite (one of Git repository management tools) in a separate file, e.g. in &lt;code&gt;/etc/gitweb-gitolite.conf&lt;/code&gt;. To include it, put</source>
          <target state="translated">read_config_file（）サブルーチンを使用して、他の構成ファイルを組み込むことができます。たとえば、Gitolite（Gitリポジトリ管理ツールの1つ）を介してリポジトリを表示するためのアクセス制御に関連するgitweb構成を、 &lt;code&gt;/etc/gitweb-gitolite.conf&lt;/code&gt; などの別のファイルに配置したい場合があります。それを含めるには、</target>
        </trans-unit>
        <trans-unit id="645452c6d997e8f480a9efb060142f580408b9f7" translate="yes" xml:space="preserve">
          <source>You can make a different change on the master branch:</source>
          <target state="translated">マスターブランチで別の変更を行うことができます。</target>
        </trans-unit>
        <trans-unit id="9d56811ee77d2943d64ee7741c452578a4d84979" translate="yes" xml:space="preserve">
          <source>You can make interesting things happen to a repository every time you push into it, by setting up &lt;code&gt;hooks&lt;/code&gt; there. See documentation for &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt;.</source>
          <target state="translated">リポジトリに &lt;code&gt;hooks&lt;/code&gt; 設定することで、リポジトリにプッシュするたびに興味深いことが起こります。&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="31caee42f233cd83de2778af5287eb406c23a1ef" translate="yes" xml:space="preserve">
          <source>You can make sure &lt;code&gt;git show-branch&lt;/code&gt; matches the state before those two &lt;code&gt;git merge&lt;/code&gt; you just did. Then, instead of running two &lt;code&gt;git merge&lt;/code&gt; commands in a row, you would merge these two branch heads (this is known as &lt;code&gt;making an Octopus&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;git show-branch&lt;/code&gt; &lt;code&gt;git merge&lt;/code&gt; 、先ほど行った2つのgitマージの前の状態と一致することを確認できます。次に、2つの &lt;code&gt;git merge&lt;/code&gt; コマンドを続けて実行する代わりに、これらの2つのブランチヘッドをマージします（これは &lt;code&gt;making an Octopus&lt;/code&gt; と呼ばれます）。</target>
        </trans-unit>
        <trans-unit id="9f748b043bbe97de82ec4f7b6a5308c58b703d36" translate="yes" xml:space="preserve">
          <source>You can make the server use the end-of-line conversion attributes to set the &lt;code&gt;-k&lt;/code&gt; modes for files by setting the &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; config variable. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for more information about end-of-line conversion.</source>
          <target state="translated">&lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; 構成変数を設定することにより、サーバーで行末変換属性を使用してファイルの &lt;code&gt;-k&lt;/code&gt; モードを設定できます。&lt;a href=&quot;gitattributes&quot;&gt;行末変換の&lt;/a&gt;詳細については、gitattributes [5]を参照してください。</target>
        </trans-unit>
        <trans-unit id="015443f769a79760c1933372fa244563a6a25aba" translate="yes" xml:space="preserve">
          <source>You can omit having to type return here, by setting the configuration variable &lt;code&gt;interactive.singleKey&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">設定変数 &lt;code&gt;interactive.singleKey&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定することで、ここでreturnを入力する必要を省くことができます。</target>
        </trans-unit>
        <trans-unit id="358c29af25eb707e9507c2c41ba2c41fddac22f4" translate="yes" xml:space="preserve">
          <source>You can override these rules either by command-line options or by environment variables. The &lt;code&gt;--global&lt;/code&gt;, &lt;code&gt;--system&lt;/code&gt; and &lt;code&gt;--worktree&lt;/code&gt; options will limit the file used to the global, system-wide or per-worktree file respectively. The &lt;code&gt;GIT_CONFIG&lt;/code&gt; environment variable has a similar effect, but you can specify any filename you want.</source>
          <target state="translated">これらのルールは、コマンドラインオプションまたは環境変数によって上書きできます。 &lt;code&gt;--global&lt;/code&gt; 、 &lt;code&gt;--system&lt;/code&gt; と &lt;code&gt;--worktree&lt;/code&gt; オプションはそれぞれグローバル、システム全体またはあたりworktreeファイルに使用されるファイルを制限します。 &lt;code&gt;GIT_CONFIG&lt;/code&gt; の環境変数は、同様の効果を持っていますが、あなたが望む任意のファイル名を指定することができます。</target>
        </trans-unit>
        <trans-unit id="b9256a8bfff0f4e1e2098927e9ff118ae66b3eab" translate="yes" xml:space="preserve">
          <source>You can perform &quot;git pull&quot;, resolve potential conflicts, and &quot;git push&quot; the result. A &quot;git pull&quot; will create a merge commit C between commits A and B.</source>
          <target state="translated">git pull」を実行し、潜在的なコンフリクトを解決し、結果を「git push」することができます。git pull」を実行すると、コミットAとコミットBの間にマージコミットCが作成されます。</target>
        </trans-unit>
        <trans-unit id="189a9ed33e189223869b33620d09d0f720bf3fe1" translate="yes" xml:space="preserve">
          <source>You can provide options via the credential.helper configuration variable (this example drops the cache time to 5 minutes):</source>
          <target state="translated">credential.helper設定変数を介してオプションを提供することができます(この例ではキャッシュ時間を5分に短縮しています)。</target>
        </trans-unit>
        <trans-unit id="82656460f1d1171626ca7a2547e75d0458741fd5" translate="yes" xml:space="preserve">
          <source>You can query/set/replace/unset options with this command. The name is actually the section and the key separated by a dot, and the value will be escaped.</source>
          <target state="translated">このコマンドでオプションの問い合わせ/設定/置換/アンセットを行うことができます。名前は実際にはセクションとキーをドットで区切ったもので、値はエスケープされます。</target>
        </trans-unit>
        <trans-unit id="10e463ee2669848fa9bb9fc90b4474d38bbf73be" translate="yes" xml:space="preserve">
          <source>You can rejoin two diverging branches of development using &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;を使用して、分岐した2つの開発ブランチに再度参加できます。</target>
        </trans-unit>
        <trans-unit id="3e4277417393477fbeb632e41395d74e0a0e4169" translate="yes" xml:space="preserve">
          <source>You can repack this private repository whenever you feel like.</source>
          <target state="translated">気が向いたときに、このプライベートリポジトリをリパックすることができます。</target>
        </trans-unit>
        <trans-unit id="3425cb44f3c2a0393cb24a6806cf1648e47fe578" translate="yes" xml:space="preserve">
          <source>You can repeat steps 2-4 multiple times to break the original code into any number of commits.</source>
          <target state="translated">ステップ 2-4 を複数回繰り返すことで、元のコードを任意の数のコミットに分割することができます。</target>
        </trans-unit>
        <trans-unit id="f016259f2ce9ae7193e573b7fa2135698ca39f54" translate="yes" xml:space="preserve">
          <source>You can rewrite the commit log messages using &lt;code&gt;--msg-filter&lt;/code&gt;. For example, &lt;code&gt;git svn-id&lt;/code&gt; strings in a repository created by &lt;code&gt;git svn&lt;/code&gt; can be removed this way:</source>
          <target state="translated">&lt;code&gt;--msg-filter&lt;/code&gt; を使用して、コミットログメッセージを書き換えることができます。例えば、 &lt;code&gt;git svn-id&lt;/code&gt; によって作成されたリポジトリ内の文字列 &lt;code&gt;git svn&lt;/code&gt; この方法で除去することができます。</target>
        </trans-unit>
        <trans-unit id="6928e91b0b4a87a6f0188b338ec935fa803e932d" translate="yes" xml:space="preserve">
          <source>You can run &lt;code&gt;git-bundle verify&lt;/code&gt; to see if you can extract from a bundle that was created with a basis:</source>
          <target state="translated">&lt;code&gt;git-bundle verify&lt;/code&gt; を実行して、ベースを使用して作成されたバンドルから抽出できるかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="28f57e6715a38d45260ef8d226913fe9d5e46420" translate="yes" xml:space="preserve">
          <source>You can run &lt;code&gt;gitk --all&lt;/code&gt; again to see how the commit ancestry looks like, or run &lt;code&gt;show-branch&lt;/code&gt;, which tells you this.</source>
          <target state="translated">もう一度 &lt;code&gt;gitk --all&lt;/code&gt; を実行して、コミットの祖先がどのように見えるかを確認するか、 &lt;code&gt;show-branch&lt;/code&gt; を実行してこれを通知できます。</target>
        </trans-unit>
        <trans-unit id="ee22a2dcf21325c45ae74e5933824496ebc88dee" translate="yes" xml:space="preserve">
          <source>You can save space and make Git faster by moving these loose objects in to a &quot;pack file&quot;, which stores a group of objects in an efficient compressed format; the details of how pack files are formatted can be found in &lt;a href=&quot;pack-format&quot;&gt;pack format&lt;/a&gt;.</source>
          <target state="translated">これらのルーズオブジェクトを「パックファイル」に移動することで、スペースを節約し、Gitをより高速にできます。このパックファイルには、オブジェクトのグループを効率的な圧縮形式で格納します。パックファイルのフォーマット方法の詳細はで見つけることができる&lt;a href=&quot;pack-format&quot;&gt;パック形式&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="923ef556c5ea1d367a9ceb952e817561488d6f46" translate="yes" xml:space="preserve">
          <source>You can see easily that the above is a rename.</source>
          <target state="translated">上記がリネームであることがすぐにわかります。</target>
        </trans-unit>
        <trans-unit id="5724c58e846fc905ad55d8bc9c332033225407c5" translate="yes" xml:space="preserve">
          <source>You can set this to &lt;code&gt;link&lt;/code&gt;, in which case a hardlink followed by a delete of the source are used to make sure that object creation will not overwrite existing objects.</source>
          <target state="translated">これを &lt;code&gt;link&lt;/code&gt; に設定できます。この場合、ソースの削除が続くハードリンクを使用して、オブジェクトの作成によって既存のオブジェクトが上書きされないようにします。</target>
        </trans-unit>
        <trans-unit id="02df8661fe031a54ab42701feedaa37cd7c87875" translate="yes" xml:space="preserve">
          <source>You can setup one single value (single entry/item in this list) at build time by setting the &lt;code&gt;GITWEB_BASE_URL&lt;/code&gt; build-time configuration variable. By default it is set to (), i.e. an empty list. This means that gitweb would not try to create project URL (to fetch) from project name.</source>
          <target state="translated">&lt;code&gt;GITWEB_BASE_URL&lt;/code&gt; ビルド時構成変数を設定することにより、ビルド時に単一の値（このリストの単一のエントリー/項目）をセットアップできます。デフォルトでは（）、つまり空のリストに設定されています。これは、gitwebがプロジェクト名から（フェッチするために）プロジェクトURLを作成しようとしないことを意味します。</target>
        </trans-unit>
        <trans-unit id="af5fba33ca90f8278cecf2701efca5c8b71085ca" translate="yes" xml:space="preserve">
          <source>You can specify a list of allowed directories. If no directories are given, all are allowed. This is an additional restriction, gitcvs access still needs to be enabled by the &lt;code&gt;gitcvs.enabled&lt;/code&gt; config option unless &lt;code&gt;--export-all&lt;/code&gt; was given, too.</source>
          <target state="translated">許可されたディレクトリのリストを指定できます。ディレクトリを指定しない場合は、すべて許可されます。これは追加の制限です。--export &lt;code&gt;--export-all&lt;/code&gt; も指定されていない限り、 &lt;code&gt;gitcvs.enabled&lt;/code&gt; 構成オプションでgitcvsアクセスを有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a2f1a86c57fcd513fcca4d9c2bf5f81069f36bf3" translate="yes" xml:space="preserve">
          <source>You can specify extra mail header lines to be added to each message, defaults for the subject prefix and file suffix, number patches when outputting more than one patch, add &quot;To:&quot; or &quot;Cc:&quot; headers, configure attachments, change the patch output directory, and sign off patches with configuration variables.</source>
          <target state="translated">各メッセージに追加するメールヘッダ行の指定、件名のプレフィックスとファイルサフィックスのデフォルト、複数のパッチを出力する際のパッチの数、&quot;To:&quot; や &quot;Cc:&quot; ヘッダの追加、添付ファイルの設定、パッチの出力ディレクトリの変更、設定変数を使ったパッチのサインオフなどができます。</target>
        </trans-unit>
        <trans-unit id="c33dd2cd2261f81cbd0fc492df4e16b1e747c25d" translate="yes" xml:space="preserve">
          <source>You can specify the information shown for each object by using a custom &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt;. The &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; is copied literally to stdout for each object, with placeholders of the form &lt;code&gt;%(atom)&lt;/code&gt; expanded, followed by a newline. The available atoms are:</source>
          <target state="translated">カスタム &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; を使用して、各オブジェクトに表示される情報を指定できます。 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; 形式のプレースホルダと、オブジェクトごとに標準出力に文字通りコピーされ &lt;code&gt;%(atom)&lt;/code&gt; 改行に続く拡張します、。利用可能なアトムは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5a94d83b2aa4f52ca10b82e1786cdc28d9f55e56" translate="yes" xml:space="preserve">
          <source>You can tell Git to ignore certain files by creating a file called &lt;code&gt;.gitignore&lt;/code&gt; in the top level of your working directory, with contents such as:</source>
          <target state="translated">作業ディレクトリの最上位に &lt;code&gt;.gitignore&lt;/code&gt; というファイルを作成し、次のような内容で特定のファイルを無視するようにGitに指示できます。</target>
        </trans-unit>
        <trans-unit id="491f06c247008ffc2db5fcd9f930c35d5e25a466" translate="yes" xml:space="preserve">
          <source>You can tell Git to split the Git internal information from the directory that it tracks, but we&amp;rsquo;ll ignore that for now: it&amp;rsquo;s not how normal projects work, and it&amp;rsquo;s really only meant for special uses. So the mental model of &quot;the Git information is always tied directly to the working tree that it describes&quot; may not be technically 100% accurate, but it&amp;rsquo;s a good model for all normal use.</source>
          <target state="translated">追跡するディレクトリからGitの内部情報を分割するようにGitに指示することもできますが、ここでは無視します。これは通常のプロジェクトの動作方法ではなく、特別な使用のみを目的としています。したがって、「Git情報は常に、Git情報が記述する作業ツリーに直接結び付いている」というメンタルモデルは、技術的に100％正確ではないかもしれませんが、すべての通常の使用に適したモデルです。</target>
        </trans-unit>
        <trans-unit id="eba2ddb51d288f0b3a9988b4f1ccbdcde132a1f4" translate="yes" xml:space="preserve">
          <source>You can test whether the filesystem supports that with the &lt;code&gt;--test-untracked-cache&lt;/code&gt; option. The &lt;code&gt;--untracked-cache&lt;/code&gt; option used to implicitly perform that test in older versions of Git, but that&amp;rsquo;s no longer the case.</source>
          <target state="translated">&lt;code&gt;--test-untracked-cache&lt;/code&gt; オプションを使用すると、ファイルシステムがそれをサポートしているかどうかをテストできます。 &lt;code&gt;--untracked-cache&lt;/code&gt; 暗黙的に使用したオプションは、Gitリポジトリの古いバージョンでは、テストを実行していないが、それはもはやケースです。</target>
        </trans-unit>
        <trans-unit id="33337304817f97abbb584fa2c7541a14abb9bfcd" translate="yes" xml:space="preserve">
          <source>You can then fix the conflicts during the rebase. Presumably you have not published your topic other than by mail, so rebasing it is not a problem.</source>
          <target state="translated">その後、リベース中にコンフリクトを修正してください。おそらく、メール以外でトピックを公開していないので、リベースしても問題ありません。</target>
        </trans-unit>
        <trans-unit id="d6b74e3d43432e56c49f83bf0e8c1bc1b7ac50b8" translate="yes" xml:space="preserve">
          <source>You can then import these into your mail client and send them by hand. However, if you have a lot to send at once, you may prefer to use the &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt; script to automate the process. Consult the mailing list for your project first to determine their requirements for submitting patches.</source>
          <target state="translated">次に、これらをメールクライアントにインポートして、手動で送信できます。ただし、一度に大量に送信する必要がある場合は、&lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt;スクリプトを使用してプロセスを自動化することをお勧めします。最初にプロジェクトのメーリングリストを参照して、パッチを提出するための要件を確認してください。</target>
        </trans-unit>
        <trans-unit id="ad2194dc994cc556c2451e6a9d4c256f90b5afd4" translate="yes" xml:space="preserve">
          <source>You can then transplant the old &lt;code&gt;subsystem..topic&lt;/code&gt; to the new tip by saying (for the reflog case, and assuming you are on &lt;code&gt;topic&lt;/code&gt; already):</source>
          <target state="translated">次に、次のように発言することで、古い &lt;code&gt;subsystem..topic&lt;/code&gt; を新しいヒントに移植できます（reflogの場合、 &lt;code&gt;topic&lt;/code&gt; すでに参加していると想定しています）。</target>
        </trans-unit>
        <trans-unit id="b5bb69809c9820257d5f27c5ec379a4130c453d8" translate="yes" xml:space="preserve">
          <source>You can think of this as a set operation. Commits given on the command line form a set of commits that are reachable from any of them, and then commits reachable from any of the ones given with &lt;code&gt;^&lt;/code&gt; in front are subtracted from that set. The remaining commits are what comes out in the command&amp;rsquo;s output. Various other options and paths parameters can be used to further limit the result.</source>
          <target state="translated">これは集合演算と考えることができます。コマンドラインで指定されたコミットは、それらのいずれからも到達可能なコミットのセットを形成し、次に、先頭に &lt;code&gt;^&lt;/code&gt; が付いたものから到達可能なコミットがそのセットから差し引かれます。残りのコミットは、コマンドの出力に表示されるものです。その他のさまざまなオプションとパスパラメータを使用して、結果をさらに制限できます。</target>
        </trans-unit>
        <trans-unit id="497fe81f829587b397446cebabae5d6848f111c9" translate="yes" xml:space="preserve">
          <source>You can think of this as a set operation. Commits reachable from any of the commits given on the command line form a set, and then commits reachable from any of the ones given with &lt;code&gt;^&lt;/code&gt; in front are subtracted from that set. The remaining commits are what comes out in the command&amp;rsquo;s output. Various other options and paths parameters can be used to further limit the result.</source>
          <target state="translated">これは集合演算と考えることができます。コマンドラインで指定されたコミットのいずれかから到達可能なコミットがセットを形成し、次に &lt;code&gt;^&lt;/code&gt; で指定されたコミットのいずれかから到達可能なコミットが前にそのセットから差し引かれます。残りのコミットは、コマンドの出力に出力されるものです。他のさまざまなオプションとパスパラメータを使用して、結果をさらに制限できます。</target>
        </trans-unit>
        <trans-unit id="eacfd2b96f144de251fd3721b44d6ad9ca988b86" translate="yes" xml:space="preserve">
          <source>You can try running &lt;code&gt;find .git/objects -type f&lt;/code&gt; before and after you run &lt;code&gt;git prune-packed&lt;/code&gt; if you are curious. Also &lt;code&gt;git
count-objects&lt;/code&gt; would tell you how many unpacked objects are in your repository and how much space they are consuming.</source>
          <target state="translated">興味があれば、 &lt;code&gt;git prune-packed&lt;/code&gt; を実行する前後に &lt;code&gt;find .git/objects -type f&lt;/code&gt; を実行してみてください。また、 &lt;code&gt;git count-objects&lt;/code&gt; は、リポジトリにアンパックされたオブジェクトの数と、それらが消費しているスペースの量を示します。</target>
        </trans-unit>
        <trans-unit id="78c0fba98badb6e25ce1949ee53cb8839b8be51a" translate="yes" xml:space="preserve">
          <source>You can update the shared repository with your changes by first committing your changes, and then using the &lt;code&gt;git push&lt;/code&gt; command:</source>
          <target state="translated">最初に変更をコミットし、次に &lt;code&gt;git push&lt;/code&gt; コマンドを使用することで、変更を共有リポジトリに反映できます。</target>
        </trans-unit>
        <trans-unit id="fe24364fca4da5268b93a1c7c864762589bec5d4" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; to examine the contents of a blob; take, for example, the blob in the entry for &lt;code&gt;COPYING&lt;/code&gt; from the tree above:</source>
          <target state="translated">&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;を使用して、BLOBの内容を調べることができます。たとえば、上のツリーから &lt;code&gt;COPYING&lt;/code&gt; のエントリのblobを取得します。</target>
        </trans-unit>
        <trans-unit id="cdee252fbf6b663369bb36f7a81711483c778043" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;git stash push --keep-index&lt;/code&gt; when you want to make two or more commits out of the changes in the work tree, and you want to test each change before committing:</source>
          <target state="translated">作業ツリーの変更から2つ以上のコミットを行い、コミットする前に各変更をテストする場合は、 &lt;code&gt;git stash push --keep-index&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="b954fc6ff3f193031cbeca4547760f3425491805" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;git stash&lt;/code&gt; to simplify the above, like this:</source>
          <target state="translated">次のように、 &lt;code&gt;git stash&lt;/code&gt; を使用して上記を簡略化できます。</target>
        </trans-unit>
        <trans-unit id="c482710749f3dcad6cbdc9701b2eb8b0d7f62e6a" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;stable-1&lt;/code&gt; to refer to the commit 1b2e1d63ff.</source>
          <target state="translated">&lt;code&gt;stable-1&lt;/code&gt; を使用して、コミット1b2e1d63ffを参照できます。</target>
        </trans-unit>
        <trans-unit id="783e49ef6897108ce62c504df5bb1071160ba897" translate="yes" xml:space="preserve">
          <source>You can use a basis based on time:</source>
          <target state="translated">時間を基準にした根拠を使うことができます。</target>
        </trans-unit>
        <trans-unit id="0dcaab83279bcfe9c2e3dbaa6b4f0d035029ab31" translate="yes" xml:space="preserve">
          <source>You can use a tag that is present in both:</source>
          <target state="translated">両方に存在するタグを使用することができます。</target>
        </trans-unit>
        <trans-unit id="0967772702daca79ec55cd9be52c70fe75848751" translate="yes" xml:space="preserve">
          <source>You can use different &lt;code&gt;&amp;lt;action&amp;gt;&lt;/code&gt; values to control this behavior:</source>
          <target state="translated">さまざまな &lt;code&gt;&amp;lt;action&amp;gt;&lt;/code&gt; 値を使用して、この動作を制御できます。</target>
        </trans-unit>
        <trans-unit id="72733e82f897a2af21fcfc3df3447e66ece75165" translate="yes" xml:space="preserve">
          <source>You can use it as a human-readable bundle replacement (see &lt;a href=&quot;git-bundle&quot;&gt;git-bundle[1]&lt;/a&gt;), or as a format that can be edited before being fed to &lt;code&gt;git fast-import&lt;/code&gt; in order to do history rewrites (an ability relied on by tools like &lt;code&gt;git filter-repo&lt;/code&gt;).</source>
          <target state="translated">人間が読めるバンドルの置き換え（&lt;a href=&quot;git-bundle&quot;&gt;git-bundle [1]を&lt;/a&gt;参照）として、または履歴の書き換えを行うために &lt;code&gt;git fast-import&lt;/code&gt; にフィードする前に編集できる形式（ツールに依存する機能）として使用できます。以下のような &lt;code&gt;git filter-repo&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6b34e82e0ff80209e7866272f371ddd1420b0f13" translate="yes" xml:space="preserve">
          <source>You can use mod_perl with gitweb. You must install Apache::Registry (for mod_perl 1.x) or ModPerl::Registry (for mod_perl 2.x) to enable this support.</source>
          <target state="translated">gitweb で mod_perl を使うことができます。このサポートを有効にするには、Apache::Registry (mod_perl 1.x 用)または ModPerl::Registry (mod_perl 2.x 用)をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="625924bfa2e6c050ea9730ca7a0edb6cfce2bfdc" translate="yes" xml:space="preserve">
          <source>You can use notes to add annotations with information that was not available at the time a commit was written.</source>
          <target state="translated">コミットが書かれた時点では利用できなかった情報で注釈を追加するためにノートを利用することができます。</target>
        </trans-unit>
        <trans-unit id="0bbbcd5b5890880e82d452d584e7cf77013dabac" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;@&lt;/code&gt; construct with an empty ref part to get at a reflog entry of the current branch. For example, if you are on branch &lt;code&gt;blabla&lt;/code&gt; then &lt;code&gt;@{1}&lt;/code&gt; means the same as &lt;code&gt;blabla@{1}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; 構文を空のrefパーツとともに使用して、現在のブランチのreflogエントリを取得できます。たとえば、ブランチ &lt;code&gt;blabla&lt;/code&gt; を使用している場合、 &lt;code&gt;@{1}&lt;/code&gt; は &lt;code&gt;blabla@{1}&lt;/code&gt; と同じ意味になります。</target>
        </trans-unit>
        <trans-unit id="bd3a4b2dd2cada66b7023aa9fae3c933422c9fcc" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;@{-N}&lt;/code&gt; syntax to refer to the N-th last branch/commit checked out using &quot;git checkout&quot; operation. You may also specify &lt;code&gt;-&lt;/code&gt; which is synonymous to &lt;code&gt;@{-1}&lt;/code&gt;.</source>
          <target state="translated">あなたは使用することができます &lt;code&gt;@{-N}&lt;/code&gt; 「gitのチェックアウト」操作を使用してチェックアウトしたコミット/ N番目の最後のブランチを参照するように構文を。 &lt;code&gt;@{-1}&lt;/code&gt; と同義の &lt;code&gt;-&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="e21f11f93a4b8bdb963de3cd700b58b5db33242a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;@{-N}&lt;/code&gt; syntax to refer to the N-th last branch/commit switched to using &quot;git switch&quot; or &quot;git checkout&quot; operation. You may also specify &lt;code&gt;-&lt;/code&gt; which is synonymous to &lt;code&gt;@{-1}&lt;/code&gt;. This is often used to switch quickly between two branches, or to undo a branch switch by mistake.</source>
          <target state="translated">&lt;code&gt;@{-N}&lt;/code&gt; 構文を使用すると、「git switch」または「git checkout」操作を使用して切り替えられた最後のN番目のブランチ/コミットを参照できます。 &lt;code&gt;@{-1}&lt;/code&gt; と同義の &lt;code&gt;-&lt;/code&gt; を指定することもできます。これは、2つのブランチ間をすばやく切り替えるため、または誤ってブランチの切り替えを元に戻すためによく使用されます。</target>
        </trans-unit>
        <trans-unit id="736fc09a09a7b16017fd49ac75e258e953294134" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;gitweb.owner&lt;/code&gt; repository configuration variable to set repository&amp;rsquo;s owner. It is displayed in the project list and summary page.</source>
          <target state="translated">&lt;code&gt;gitweb.owner&lt;/code&gt; リポジトリ設定変数を使用して、リポジトリの所有者を設定できます。プロジェクトリストと概要ページに表示されます。</target>
        </trans-unit>
        <trans-unit id="b3762dc0cf78ebbd7cf935ac045ade59a2e3acbf" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;htpasswd&lt;/code&gt; facility that comes with Apache to make these files, but Apache&amp;rsquo;s MD5 crypt method differs from the one used by most C library&amp;rsquo;s crypt() function, so don&amp;rsquo;t use the -m option.</source>
          <target state="translated">Apacheに付属の &lt;code&gt;htpasswd&lt;/code&gt; 機能を使用してこれらのファイルを作成できますが、ApacheのMD5 cryptメソッドは、ほとんどのCライブラリのcrypt（）関数で使用されるメソッドとは異なるため、-mオプションを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="80aa1363be3995d4ec384e59561a0e7a0903c070" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;map&lt;/code&gt; convenience function in this filter, and other convenience functions, too. For example, calling &lt;code&gt;skip_commit &quot;$@&quot;&lt;/code&gt; will leave out the current commit (but not its changes! If you want that, use &lt;code&gt;git rebase&lt;/code&gt; instead).</source>
          <target state="translated">このフィルターでは、 &lt;code&gt;map&lt;/code&gt; の便利な関数やその他の便利な関数も使用できます。たとえば、 &lt;code&gt;skip_commit &quot;$@&quot;&lt;/code&gt; を呼び出すと、現在のコミットが除外されます（ただし、変更は含まれません！必要に応じて、代わりに &lt;code&gt;git rebase&lt;/code&gt; を使用してください）。</target>
        </trans-unit>
        <trans-unit id="c32abff787b36e9c877031d224291d8c643f61f1" translate="yes" xml:space="preserve">
          <source>You can use the following files in repository:</source>
          <target state="translated">リポジトリには以下のファイルがあります。</target>
        </trans-unit>
        <trans-unit id="b6c6eac74692734c5ec1dc3c689d37b0eb0dcea6" translate="yes" xml:space="preserve">
          <source>You can use the number of commits:</source>
          <target state="translated">コミット数を使うことができます。</target>
        </trans-unit>
        <trans-unit id="4a928f707b340dd3df65a93fa7f9942c5a65d9b2" translate="yes" xml:space="preserve">
          <source>You can very easily automatically bisect broken builds using something like:</source>
          <target state="translated">以下のようなものを使えば、壊れたビルドを自動的に簡単に二分することができます。</target>
        </trans-unit>
        <trans-unit id="77487b0c89edd8fd842e99d65a1b39d2c6b378f5" translate="yes" xml:space="preserve">
          <source>You can work through the conflict with a number of tools:</source>
          <target state="translated">いくつかのツールを使って葛藤を乗り越えていくことができます。</target>
        </trans-unit>
        <trans-unit id="918d78d55a9c451b1a86101242b3194591c9e6cc" translate="yes" xml:space="preserve">
          <source>You can write the mandatory option parameter to an option as a separate word on the command line. That means that all the following uses work:</source>
          <target state="translated">必須のオプションパラメータを、コマンドライン上で別の単語としてオプションに書き込むことができます。つまり、以下の使用法がすべて機能するということです。</target>
        </trans-unit>
        <trans-unit id="03d917937bc98856220155e739ac2f8752cca599" translate="yes" xml:space="preserve">
          <source>You can write your own custom helpers to interface with any system in which you keep credentials.</source>
          <target state="translated">独自のカスタムヘルパーを作成して、資格情報を保持している任意のシステムとのインタフェースを取ることができます。</target>
        </trans-unit>
        <trans-unit id="d7f91f3a076bca347349424f4008dca0a1518c15" translate="yes" xml:space="preserve">
          <source>You can write your own custom helpers to interface with any system in which you keep credentials. See credential.h for details.</source>
          <target state="translated">独自のカスタムヘルパーを書いて、クレデンシャルを保持している任意のシステムとインターフェースをとることができます。詳細は credential.h を参照してください。</target>
        </trans-unit>
        <trans-unit id="c06b90a2f16de670e5df5d7464445ae0f28559f2" translate="yes" xml:space="preserve">
          <source>You could be using the &lt;code&gt;objects/info/alternates&lt;/code&gt; or &lt;code&gt;$GIT_ALTERNATE_OBJECT_DIRECTORIES&lt;/code&gt; mechanisms to &lt;code&gt;borrow&lt;/code&gt; objects from other object stores. A repository with this kind of incomplete object store is not suitable to be published for use with dumb transports but otherwise is OK as long as &lt;code&gt;objects/info/alternates&lt;/code&gt; points at the object stores it borrows from.</source>
          <target state="translated">&lt;code&gt;objects/info/alternates&lt;/code&gt; または &lt;code&gt;$GIT_ALTERNATE_OBJECT_DIRECTORIES&lt;/code&gt; メカニズムを使用し &lt;code&gt;borrow&lt;/code&gt; 、他のオブジェクトストアからオブジェクトを借用することができます。この種の不完全なオブジェクトストアを含むリポジトリは、ダムトランスポートで使用するために公開するのには適していませんが、 &lt;code&gt;objects/info/alternates&lt;/code&gt; 借用するオブジェクトストアを指している限り、問題ありません。</target>
        </trans-unit>
        <trans-unit id="e2e5ecc00e320fd7f95c1d7def9e5cd07e7e5d74" translate="yes" xml:space="preserve">
          <source>You could do without using any branches at all, by keeping as many local repositories as you would like to have branches, and merging between them with &lt;em&gt;git pull&lt;/em&gt;, just like you merge between branches. The advantage of this approach is that it lets you keep a set of files for each &lt;code&gt;branch&lt;/code&gt; checked out and you may find it easier to switch back and forth if you juggle multiple lines of development simultaneously. Of course, you will pay the price of more disk usage to hold multiple working trees, but disk space is cheap these days.</source>
          <target state="translated">ブランチを必要な数だけローカルリポジトリに保持し、ブランチ間でマージするのと同じように&lt;em&gt;git pull&lt;/em&gt;でそれらをマージすることにより、ブランチをまったく使用せずに実行できます。このアプローチの利点は、 &lt;code&gt;branch&lt;/code&gt; ごとに一連のファイルをチェックアウトしたままにしておくことができ、複数の開発行を同時に処理する場合に切り替えを簡単にできることです。もちろん、複数の作業ツリーを保持するためにディスク使用量を増やす代償を払うことになりますが、最近のディスク容量は安価です。</target>
        </trans-unit>
        <trans-unit id="8ff03510fc9dfa2f41199478909f4845fc0f0bb6" translate="yes" xml:space="preserve">
          <source>You could have an incomplete but locally usable repository by creating a shallow clone. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;.</source>
          <target state="translated">浅いクローンを作成することで、不完全ではあるがローカルで使用可能なリポジトリを作成できます。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f736fa76fc678c4f130db13f45faf6b48f41687a" translate="yes" xml:space="preserve">
          <source>You could just visually inspect the commits since e05db0fd:</source>
          <target state="translated">e05db0fd 以降のコミットを目視で確認することができます。</target>
        </trans-unit>
        <trans-unit id="0d78b2a8d8354041e789d882f2348db69275bdcd" translate="yes" xml:space="preserve">
          <source>You could omit &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;, in which case the command degenerates to &quot;check out the current branch&quot;, which is a glorified no-op with rather expensive side-effects to show only the tracking information, if exists, for the current branch.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; を省略できます。その場合、コマンドは縮退して「現在のブランチをチェックアウト」します。これは、現在のブランチの追跡情報（存在する場合）のみを表示するというかなり高価な副作用を伴う、栄光のある何もしません。</target>
        </trans-unit>
        <trans-unit id="7c5b22847ee058ce78c26cbc63e773fbbc9499cd" translate="yes" xml:space="preserve">
          <source>You create a commit object by giving it the tree that describes the state at the time of the commit, and a list of parents:</source>
          <target state="translated">コミット時の状態を記述したツリーと親のリストを与えてコミットオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="0fca09140e6ecd8df23b487785db8ea6f6692c80" translate="yes" xml:space="preserve">
          <source>You do not want any end-of-line conversions applied to, nor textual diffs produced for, any binary file you track. You would need to specify e.g.</source>
          <target state="translated">追跡するバイナリファイルには、行末変換を適用したり、テキストの差分を生成したりしたくありません。以下のように指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="3b6ec2c54535f15330b4b3b431cf4481da43a55b" translate="yes" xml:space="preserve">
          <source>You do random edits, without running &lt;code&gt;git update-index&lt;/code&gt;. And then you notice that the tip of your &quot;upstream&quot; tree has advanced since you pulled from him:</source>
          <target state="translated">&lt;code&gt;git update-index&lt;/code&gt; を実行せずにランダムな編集を行います。そして、あなたは彼から引っ張ってからあなたの「上流」ツリーの先端が進んだことに気づきます：</target>
        </trans-unit>
        <trans-unit id="96b7f9c5e1f885ad6155a2dabe0351e9e08cd246" translate="yes" xml:space="preserve">
          <source>You do your real work in your working tree that has your primary repository hanging under it as its &lt;code&gt;.git&lt;/code&gt; subdirectory. You &lt;strong&gt;could&lt;/strong&gt; make that repository accessible remotely and ask people to pull from it, but in practice that is not the way things are usually done. A recommended way is to have a public repository, make it reachable by other people, and when the changes you made in your primary working tree are in good shape, update the public repository from it. This is often called &lt;code&gt;pushing&lt;/code&gt;.</source>
          <target state="translated">実際の作業は、プライマリリポジトリが &lt;code&gt;.git&lt;/code&gt; サブディレクトリとしてぶら下がっている作業ツリーで行います。そのリポジトリにリモートでアクセスできるようにして、そこからプルするように人々に依頼すること&lt;strong&gt;もでき&lt;/strong&gt;ますが、実際には、それは通常行われている方法ではありません。推奨される方法は、パブリックリポジトリを用意し、他の人がアクセスできるようにし、プライマリ作業ツリーで行った変更が適切な状態になったら、そこからパブリックリポジトリを更新することです。これはしばしば &lt;code&gt;pushing&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="0911499c26fd93762ba87b20e89843bed2558fd8" translate="yes" xml:space="preserve">
          <source>You have made some commits, but realize they were premature to be in the &lt;code&gt;master&lt;/code&gt; branch. You want to continue polishing them in a topic branch, so create &lt;code&gt;topic/wip&lt;/code&gt; branch off of the current &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">あなたはいくつかのコミットを行いましたが、それらが &lt;code&gt;master&lt;/code&gt; ブランチに入るのは時期尚早であることに気づきました。トピックブランチでそれらを磨き続けたいので、現在の &lt;code&gt;HEAD&lt;/code&gt; から &lt;code&gt;topic/wip&lt;/code&gt; ブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="9321ccbae87a4bc4f97065bb17cb67a1a81520be" translate="yes" xml:space="preserve">
          <source>You have now created your first Git repository. Of course, since it&amp;rsquo;s empty, that&amp;rsquo;s not very useful, so let&amp;rsquo;s start populating it with data.</source>
          <target state="translated">これで最初のGitリポジトリが作成されました。もちろん、空なのでそれはあまり役に立ちませんので、データを入力してみましょう。</target>
        </trans-unit>
        <trans-unit id="d177c25ea329a8110bbd819e0cb66c6b6619b0d7" translate="yes" xml:space="preserve">
          <source>You have now successfully copied somebody else&amp;rsquo;s (mine) remote repository, and checked it out.</source>
          <target state="translated">これで、他の誰かの（私の）リモートリポジトリが正常にコピーされ、チェックアウトされました。</target>
        </trans-unit>
        <trans-unit id="3cc6b09871d23a7d903d56d9d6eb61d9c29d1dd4" translate="yes" xml:space="preserve">
          <source>You have performed no merges into mywork, so it is just a simple linear sequence of patches on top of &lt;code&gt;origin&lt;/code&gt;:</source>
          <target state="translated">myworkへのマージは実行していないため、これは &lt;code&gt;origin&lt;/code&gt; の上にあるパッチの単純な線形シーケンスです。</target>
        </trans-unit>
        <trans-unit id="2f8744f866557cd48a608818edcb46f21bfb3d75" translate="yes" xml:space="preserve">
          <source>You have to run &lt;code&gt;git submodule update&lt;/code&gt; after &lt;code&gt;git pull&lt;/code&gt; if you want to update submodules, too.</source>
          <target state="translated">&lt;code&gt;git submodule update&lt;/code&gt; したい場合は、 &lt;code&gt;git pull&lt;/code&gt; の後にgit submodule updateを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="f82b6e7678c4aeade044d41684916154b148e08d" translate="yes" xml:space="preserve">
          <source>You haven&amp;rsquo;t specified any nodes as heads so it won&amp;rsquo;t be possible to differentiate between un-parented commits and root nodes.</source>
          <target state="translated">ヘッドとしてノードを指定していないため、親のないコミットとルートノードを区別できません。</target>
        </trans-unit>
        <trans-unit id="60617aeef2563268db523c5fdc5a619452e83d26" translate="yes" xml:space="preserve">
          <source>You may also add new content that does not exist in the patch; simply add new lines, each starting with &quot;+&quot;. The addition will appear reverted in the working tree.</source>
          <target state="translated">パッチには存在しない新しいコンテンツを追加することもできます。追加された内容は作業ツリーに戻されて表示されます。</target>
        </trans-unit>
        <trans-unit id="ef502914f7e8ab4571571ef4343614d654bb655c" translate="yes" xml:space="preserve">
          <source>You may also have third-party helpers installed; search for &lt;code&gt;credential-*&lt;/code&gt; in the output of &lt;code&gt;git help -a&lt;/code&gt;, and consult the documentation of individual helpers. Once you have selected a helper, you can tell Git to use it by putting its name into the credential.helper variable.</source>
          <target state="translated">サードパーティのヘルパーをインストールすることもできます。 &lt;code&gt;git help -a&lt;/code&gt; の出力で &lt;code&gt;credential-*&lt;/code&gt; を検索し、個々のヘルパーのドキュメントを参照してください。ヘルパーを選択したら、その名前をcredential.helper変数に入れて、Gitに使用するように指示できます。</target>
        </trans-unit>
        <trans-unit id="f2298abd2d14c4384844acf0edbfaf0baea1ecae" translate="yes" xml:space="preserve">
          <source>You may also include a &lt;code&gt;!&lt;/code&gt; in front of the ref name to negate the entry, explicitly exposing it, even if an earlier entry marked it as hidden. If you have multiple hideRefs values, later entries override earlier ones (and entries in more-specific config files override less-specific ones).</source>
          <target state="translated">また、 &lt;code&gt;!&lt;/code&gt; 以前のエントリが非表示としてマークした場合でも、ref名の前でエントリを無効にし、明示的に公開します。複数のhideRefs値がある場合、後のエントリは前のエントリをオーバーライドします（より具体的な構成ファイルのエントリは、それほど具体的でないものをオーバーライドします）。</target>
        </trans-unit>
        <trans-unit id="ea31f49a09c0b721c12c5805f99a1757f98a096f" translate="yes" xml:space="preserve">
          <source>You may also use &lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool[1]&lt;/a&gt;, which lets you merge the unmerged files using external tools such as Emacs or kdiff3.</source>
          <target state="translated">&lt;a href=&quot;git-mergetool&quot;&gt;git-mergetool [1]を&lt;/a&gt;使用することもできます。これにより、Emacsやkdiff3などの外部ツールを使用して、マージされていないファイルをマージできます。</target>
        </trans-unit>
        <trans-unit id="9adc4f69fd1939534db6a41ec486285df53ebd63" translate="yes" xml:space="preserve">
          <source>You may execute several commands by either using one instance of &lt;code&gt;--exec&lt;/code&gt; with several commands:</source>
          <target state="translated">複数のコマンドで &lt;code&gt;--exec&lt;/code&gt; の 1つのインスタンスを使用することにより、複数のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="a70c5e0fed390964e6d887a35161883ab1754024" translate="yes" xml:space="preserve">
          <source>You may find this helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to &quot;revert the reversion&quot; (see the &lt;a href=&quot;https://git-scm.com/docs/howto/revert-a-faulty-merge&quot;&gt;revert-a-faulty-merge How-To&lt;/a&gt; for details).</source>
          <target state="translated">このオプションは、トピックブランチのマージを元に戻した後に役立つ場合があります。このオプションは、トピックブランチを新しいコミットで再作成するため、「元に戻す」を必要とせずに正常に再マージできます（&lt;a href=&quot;https://git-scm.com/docs/howto/revert-a-faulty-merge&quot;&gt;revert-a-&lt;/a&gt; faulty -mergeのハウツーを参照）。詳細）。</target>
        </trans-unit>
        <trans-unit id="08631c52a6efa8d7c45c6edcb816f877829615bc" translate="yes" xml:space="preserve">
          <source>You may force &lt;code&gt;git push&lt;/code&gt; to perform the update anyway by preceding the branch name with a plus sign:</source>
          <target state="translated">ブランチ名の前にプラス記号を付けることで、 &lt;code&gt;git push&lt;/code&gt; で強制的に更新を実行できます。</target>
        </trans-unit>
        <trans-unit id="ae2bd0ef4c886d9dfce1ee8146a7755d847ffcc2" translate="yes" xml:space="preserve">
          <source>You may often find that during a bisect session you want to have temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or &quot;revision that does not have this commit needs this patch applied to work around another problem this bisection is not interested in&quot;) applied to the revision being tested.</source>
          <target state="translated">バイセクションのセッション中に、一時的な修正(例えば、ヘッダファイルの中の#define DEBUG 0/#define DEBUG 1/や、「このコミットを持たないリビジョンは、このバイセクションが興味のない別の問題を回避するために、このパッチを適用する必要がある」など)をテスト対象のリビジョンに適用したいと思うことがよくあるでしょう。</target>
        </trans-unit>
        <trans-unit id="014dba50ebab24a63a38baad57ed8364492c1d37" translate="yes" xml:space="preserve">
          <source>You may override individual configuration parameters when running any git command by using the &lt;code&gt;-c&lt;/code&gt; option. See &lt;a href=&quot;git&quot;&gt;git[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; オプションを使用してgitコマンドを実行するときに、個々の構成パラメーターをオーバーライドできます。詳細については、&lt;a href=&quot;git&quot;&gt;git [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ac5fdcda86efd0f875c444e1e9c4b64fbcccd8a8" translate="yes" xml:space="preserve">
          <source>You may specify configuration in your .git/config</source>
          <target state="translated">設定は .git/config で指定することができます。</target>
        </trans-unit>
        <trans-unit id="13fb0fac683620e44c1d9b40bc74efe99d0db2f0" translate="yes" xml:space="preserve">
          <source>You may still choose to publish branches whose history is rewritten, and it may be useful for others to be able to fetch those branches in order to examine or test them, but they should not attempt to pull such branches into their own work.</source>
          <target state="translated">歴史が書き換えられたブランチを公開することもできますし、他の人がそのブランチを調べたりテストしたりするのに役立つかもしれませんが、そのようなブランチを自分の作品の中に引き込もうとしてはいけません。</target>
        </trans-unit>
        <trans-unit id="eb01db138b0fd8c4f790bf23de91d970f6b3f25c" translate="yes" xml:space="preserve">
          <source>You may want to use &lt;code&gt;sslVerify=false&lt;/code&gt; while troubleshooting, if you suspect that the reason you are having trouble connecting is because the certificate you use at the private server &lt;code&gt;example.com&lt;/code&gt; you are trying to set up (or have set up) may not be verified correctly.</source>
          <target state="translated">接続に問題があるのは、プライベートサーバー &lt;code&gt;example.com&lt;/code&gt; で使用している証明書が原因であると思われる場合は、トラブルシューティング中に &lt;code&gt;sslVerify=false&lt;/code&gt; を使用することをお勧めします。これは、セットアップしようとしている（またはセットアップした）がそうではない可能性があるためです。正しく検証されました。</target>
        </trans-unit>
        <trans-unit id="594c958b8686511065ebf30dd08d761eb22eafab" translate="yes" xml:space="preserve">
          <source>You might need to instead use: &lt;code&gt;folder = &quot;[Google Mail]/Drafts&quot;&lt;/code&gt; if you get an error that the &quot;Folder doesn&amp;rsquo;t exist&quot;.</source>
          <target state="translated">「フォルダが存在しません」というエラーが表示された場合は、代わりに &lt;code&gt;folder = &quot;[Google Mail]/Drafts&quot;&lt;/code&gt; する必要があります。</target>
        </trans-unit>
        <trans-unit id="2cb3e9e45a2fe07905a833e4999cf989715a0ad3" translate="yes" xml:space="preserve">
          <source>You might need to instead use: folder = &quot;[Google Mail]/Drafts&quot; if you get an error that the &quot;Folder doesn&amp;rsquo;t exist&quot;.</source>
          <target state="translated">「フォルダが存在しない」というエラーが発生した場合は、代わりにfolder = &quot;[Google Mail] / Drafts&quot;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ce52beb4e545845637d5d5a0a1bc64e60b253c82" translate="yes" xml:space="preserve">
          <source>You might want to build on one of these remote-tracking branches on a branch of your own, just as you would for a tag:</source>
          <target state="translated">タグの場合と同じように、これらのリモートトラッキングブランチのいずれかを自分のブランチにビルドしたいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="d0620c25fa90dc1aefb86ac91dfbd9e4eb8b29d0" translate="yes" xml:space="preserve">
          <source>You might want to recreate merge commits, e.g. if you have a history like this:</source>
          <target state="translated">このような履歴がある場合など、マージコミットを作り直したほうがいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="76dbf6258421c615799bec755123a1d09c6ae993" translate="yes" xml:space="preserve">
          <source>You need to push the new tag to a public Git server (see &quot;DISTRIBUTED WORKFLOWS&quot; below). This makes the tag available to others tracking your project. The push could also trigger a post-update hook to perform release-related items such as building release tarballs and preformatted documentation pages.</source>
          <target state="translated">新しいタグを公開の Git サーバーにプッシュする必要があります (後述の &quot;DISTRIBUTED WORKFLOWS&quot; を参照ください)。これにより、プロジェクトを追跡している他の人がそのタグを利用できるようになります。このプッシュは、リリース関連のフックをトリガーにして、リリース用のタルボールを作ったり、フォーマット済みのドキュメントページを作成したりといったリリース関連の作業を行うこともできます。</target>
        </trans-unit>
        <trans-unit id="23c2bb7cb1fc9b6f4a240d36b5b4f0b94079730d" translate="yes" xml:space="preserve">
          <source>You need to set the configuration variable &lt;code&gt;rerere.enabled&lt;/code&gt; in order to enable this command.</source>
          <target state="translated">このコマンドを有効にするには、構成変数 &lt;code&gt;rerere.enabled&lt;/code&gt; を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="beb1062efd31de3a255af22760556d9dc5fafa01" translate="yes" xml:space="preserve">
          <source>You normally only do signed tags for major releases or things like that, while the light-weight tags are useful for any marking you want to do &amp;mdash; any time you decide that you want to remember a certain point, just create a private tag for it, and you have a nice symbolic name for the state at that point.</source>
          <target state="translated">通常、メジャーリリースまたはそのようなものに対してのみ署名付きタグを実行しますが、軽量タグは、実行するすべてのマーキングに役立ちます。特定のポイントを覚えておきたい場合は、プライベートタグを作成するだけです。 、その時点での状態のシンボリック名がわかります。</target>
        </trans-unit>
        <trans-unit id="0eafb62c845e9f30a39264ada6b686e1d1ebb7b8" translate="yes" xml:space="preserve">
          <source>You often interact with the same remote repository by regularly and repeatedly fetching from it. In order to keep track of the progress of such a remote repository, &lt;code&gt;git fetch&lt;/code&gt; allows you to configure &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; configuration variables.</source>
          <target state="translated">定期的に繰り返しフェッチすることにより、同じリモートリポジトリとやり取りすることがよくあります。このようなリモートリポジトリの進行状況を追跡するために、 &lt;code&gt;git fetch&lt;/code&gt; では、 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 構成変数を構成できます。</target>
        </trans-unit>
        <trans-unit id="0b67cab4bffb98d3ad72ff6748f9f8b98887d9f3" translate="yes" xml:space="preserve">
          <source>You probably don&amp;rsquo;t want to invoke this command directly; it is meant to be used as a credential helper by other parts of Git. See &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; or &lt;code&gt;EXAMPLES&lt;/code&gt; below.</source>
          <target state="translated">このコマンドを直接呼び出したくないでしょう。Gitの他の部分で資格情報ヘルパーとして使用されることを意図しています。参照&lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]&lt;/a&gt;または &lt;code&gt;EXAMPLES&lt;/code&gt; 以下。</target>
        </trans-unit>
        <trans-unit id="467e6fc50e0615f651de6ffbcc6e0f17ecbae432" translate="yes" xml:space="preserve">
          <source>You probably don&amp;rsquo;t want to invoke this command directly; it is meant to be used as a credential helper by other parts of git. See &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; or &lt;code&gt;EXAMPLES&lt;/code&gt; below.</source>
          <target state="translated">このコマンドを直接呼び出したくないでしょう。gitの他の部分で資格情報ヘルパーとして使用されることを意図しています。参照&lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]&lt;/a&gt;または &lt;code&gt;EXAMPLES&lt;/code&gt; 以下。</target>
        </trans-unit>
        <trans-unit id="c924d93ebd8e89f99e14509235b47dec1acfaa5d" translate="yes" xml:space="preserve">
          <source>You read a &quot;tree&quot; file from the object database, and use that to populate (and overwrite&amp;mdash;​don&amp;rsquo;t do this if your index contains any unsaved state that you might want to restore later!) your current index. Normal operation is just</source>
          <target state="translated">オブジェクトデータベースから「ツリー」ファイルを読み取り、それを使用して現在のインデックスにデータを入力します（上書きします。保存していない状態がインデックスに含まれている場合は、これを行わないでください！）。通常の操作は</target>
        </trans-unit>
        <trans-unit id="e01bf60bb2a8e848b7516e87eb6405fb0e476f7b" translate="yes" xml:space="preserve">
          <source>You really filtered all refs: use &lt;code&gt;--tag-name-filter cat -- --all&lt;/code&gt; when calling git-filter-branch.</source>
          <target state="translated">あなたは本当にすべての参照をフィルタリングしました：git-filter-branchを呼び出すときに &lt;code&gt;--tag-name-filter cat -- --all&lt;/code&gt; allを使用してください。</target>
        </trans-unit>
        <trans-unit id="0cb205f517a67a8e523ed9cfa8681dc8f8d7b0ce" translate="yes" xml:space="preserve">
          <source>You really removed all variants of a filename, if a blob was moved over its lifetime. &lt;code&gt;git log --name-only --follow --all -- filename&lt;/code&gt; can help you find renames.</source>
          <target state="translated">blobが存続期間中に移動された場合、ファイル名のすべてのバリアントを本当に削除しました。 &lt;code&gt;git log --name-only --follow --all -- filename&lt;/code&gt; は、名前の変更に役立ちます。</target>
        </trans-unit>
        <trans-unit id="a347f016fee70b8901448b2a81ecd1980ba100a9" translate="yes" xml:space="preserve">
          <source>You see, Git is actually the best tool to find out about the source of Git itself!</source>
          <target state="translated">実はGitは、Git自体のソースを調べるのに最適なツールなんですよね!</target>
        </trans-unit>
        <trans-unit id="2f7c7430f5ab3ddee895946cce58e0edcbc9b3f3" translate="yes" xml:space="preserve">
          <source>You should &lt;strong&gt;never&lt;/strong&gt; do any work of your own on the branches that are created by &lt;code&gt;git cvsimport&lt;/code&gt;. By default initial import will create and populate a &quot;master&quot; branch from the CVS repository&amp;rsquo;s main branch which you&amp;rsquo;re free to work with; after that, you need to &lt;code&gt;git merge&lt;/code&gt; incremental imports, or any CVS branches, yourself. It is advisable to specify a named remote via -r to separate and protect the incoming branches.</source>
          <target state="translated">&lt;code&gt;git cvsimport&lt;/code&gt; によって作成されたブランチで独自の作業を行うことは&lt;strong&gt;でき&lt;/strong&gt;ません。デフォルトでは、最初のインポートにより、CVSリポジトリのメインブランチから「マスター」ブランチが作成されて、自由に操作できます。その後、増分インポートまたは任意のCVSブランチを自分で &lt;code&gt;git merge&lt;/code&gt; する必要があります。着信ブランチを分離して保護するには、-rを介して名前付きリモートを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ac5b50c688e69b32b2a523ca6520323d9259e65e" translate="yes" xml:space="preserve">
          <source>You should consider using &lt;code&gt;dcommit&lt;/code&gt; instead of this command. Commit specified commit or tree objects to SVN. This relies on your imported fetch data being up to date. This makes absolutely no attempts to do patching when committing to SVN, it simply overwrites files with those specified in the tree or commit. All merging is assumed to have taken place independently of &lt;code&gt;git svn&lt;/code&gt; functions.</source>
          <target state="translated">このコマンドの代わりに &lt;code&gt;dcommit&lt;/code&gt; の使用を検討する必要があります。指定されたコミットまたはツリーオブジェクトをSVNにコミットします。これは、インポートされたフェッチデータが最新であることを前提としています。これは、SVNにコミットするときにパッチを適用しようとする試みを絶対に行わず、ツリーまたはコミットで指定されたファイルでファイルを上書きするだけです。すべてのマージは &lt;code&gt;git svn&lt;/code&gt; 関数とは無関係に行われたと見なされます。</target>
        </trans-unit>
        <trans-unit id="f0db0149a7a61b2b34d3de583889773851c606fb" translate="yes" xml:space="preserve">
          <source>You should now compile the checked-out version and test it. If that version works correctly, type</source>
          <target state="translated">チェックアウトしたバージョンをコンパイルしてテストしてください。そのバージョンが正常に動作する場合は</target>
        </trans-unit>
        <trans-unit id="4ce522d2b57e2c5b1484c387e3121e7cf3c762ef" translate="yes" xml:space="preserve">
          <source>You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like bumping release/version name would be acceptable.</source>
          <target state="translated">このオプションを悪用して、実質的な変更をマージコミットの中にこっそり入れるのは控えた方が良いでしょう。リリース名やバージョン名をバンプするような小さな修正でも良いでしょう。</target>
        </trans-unit>
        <trans-unit id="de1993c72b3b1ad3dd18c76738408f9f041af6eb" translate="yes" xml:space="preserve">
          <source>You should understand the implications of rewriting history if you amend a commit that has already been published. (See the &quot;RECOVERING FROM UPSTREAM REBASE&quot; section in &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;.)</source>
          <target state="translated">すでに公開されているコミットを修正する場合は、履歴を書き換えることの影響を理解する必要があります。（&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]の&lt;/a&gt;「UPSREAM REBASEからの復旧」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="a5048e0c5c1221139fe969fc6db15713d2b83eb5" translate="yes" xml:space="preserve">
          <source>You should understand the implications of using &lt;code&gt;git rebase&lt;/code&gt; on a repository that you share. See also RECOVERING FROM UPSTREAM REBASE below.</source>
          <target state="translated">共有するリポジトリで &lt;code&gt;git rebase&lt;/code&gt; を使用することの影響を理解する必要があります。以下のUPSTREAM REBASEからのリカバリーも参照してください。</target>
        </trans-unit>
        <trans-unit id="7550fee71eb33261ce4427a0e3743a34c95d7107" translate="yes" xml:space="preserve">
          <source>You should work through &lt;a href=&quot;gittutorial&quot;&gt;gittutorial[7]&lt;/a&gt; before reading this tutorial.</source>
          <target state="translated">このチュートリアルを読む前に、&lt;a href=&quot;gittutorial&quot;&gt;gittutorial [7]&lt;/a&gt;に目を通してください。</target>
        </trans-unit>
        <trans-unit id="33b464d633d5d3d359d8c081bd1ef24a08ba23d1" translate="yes" xml:space="preserve">
          <source>You then transfer the bundle to the other machine to replace /home/me/tmp/file.bundle, and pull from it.</source>
          <target state="translated">そして、/home/me/tmp/file.bundleを別のマシンに転送して、/home/me/tmp/file.bundleを入れ替えて、そこから引っ張ってきます。</target>
        </trans-unit>
        <trans-unit id="98122f0a874f3f8b610fdbc33b228a3b5afee64a" translate="yes" xml:space="preserve">
          <source>You update your working directory from the index by &quot;checking out&quot; files. This is not a very common operation, since normally you&amp;rsquo;d just keep your files updated, and rather than write to your working directory, you&amp;rsquo;d tell the index files about the changes in your working directory (i.e. &lt;code&gt;git update-index&lt;/code&gt;).</source>
          <target state="translated">ファイルを「チェックアウト」することにより、インデックスから作業ディレクトリを更新します。これはあまり一般的な操作ではありません。通常はファイルを更新したままにし、作業ディレクトリに書き込むのではなく、作業ディレクトリの変更についてインデックスファイルに通知します（つまり、 &lt;code&gt;git update-index&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="57134770b9c7f61c90927970f67f3d2eceaa4a12" translate="yes" xml:space="preserve">
          <source>You will continue to do your day-to-day work in your personal repository, but periodically &quot;push&quot; changes from your personal repository into your public repository, allowing other developers to pull from that repository. So the flow of changes, in a situation where there is one other developer with a public repository, looks like this:</source>
          <target state="translated">あなたは個人リポジトリで日々の作業を続けますが、定期的に個人リポジトリからパブリックリポジトリに変更を「プッシュ」し、他の開発者がそのリポジトリからプルできるようにします。つまり、パブリックリポジトリを持つ他の開発者が一人いる状況での変更の流れは次のようになります。</target>
        </trans-unit>
        <trans-unit id="8876e4496883cded62698bb08d4c1d5f289e1dee" translate="yes" xml:space="preserve">
          <source>You will see both of these things throughout the code.</source>
          <target state="translated">これらの両方のことをコード全体で見ることができます。</target>
        </trans-unit>
        <trans-unit id="4dda56fbfc3230573e73ab526d0f70db698497a1" translate="yes" xml:space="preserve">
          <source>You will see informational messages on dangling objects. They are objects that still exist in the repository but are no longer referenced by any of your branches, and can (and will) be removed after a while with &lt;code&gt;gc&lt;/code&gt;. You can run &lt;code&gt;git fsck --no-dangling&lt;/code&gt; to suppress these messages, and still view real errors.</source>
          <target state="translated">ダングリングオブジェクトに関する情報メッセージが表示されます。これらはまだリポジトリに存在するオブジェクトですが、どのブランチからも参照されなくなり、しばらくすると &lt;code&gt;gc&lt;/code&gt; を使用して削除できます（削除されます）。 &lt;code&gt;git fsck --no-dangling&lt;/code&gt; を実行してこれらのメッセージを抑制し、実際のエラーを表示できます。</target>
        </trans-unit>
        <trans-unit id="f2fc4e070409aa778dc2444037511e0ef4801d3d" translate="yes" xml:space="preserve">
          <source>You will see two files, &lt;code&gt;pack-*.pack&lt;/code&gt; and &lt;code&gt;pack-*.idx&lt;/code&gt;, in &lt;code&gt;.git/objects/pack&lt;/code&gt; directory. They are closely related to each other, and if you ever copy them by hand to a different repository for whatever reason, you should make sure you copy them together. The former holds all the data from the objects in the pack, and the latter holds the index for random access.</source>
          <target state="translated">あなたは、2つのファイルが表示されます &lt;code&gt;pack-*.pack&lt;/code&gt; と &lt;code&gt;pack-*.idx&lt;/code&gt; で、 &lt;code&gt;.git/objects/pack&lt;/code&gt; ディレクトリを。これらは互いに密接に関連しており、何らかの理由で手動で別のリポジトリにコピーした場合は、それらを一緒にコピーするようにしてください。前者はパック内のオブジェクトからのすべてのデータを保持し、後者はランダムアクセスのインデックスを保持します。</target>
        </trans-unit>
        <trans-unit id="266addba668945d927bfdfb63b85369114140000" translate="yes" xml:space="preserve">
          <source>You will still have to tell people by other means, such as mail. (Git provides the &lt;a href=&quot;git-request-pull&quot;&gt;git-request-pull[1]&lt;/a&gt; to send preformatted pull requests to upstream maintainers to simplify this task.)</source>
          <target state="translated">それでも、メールなどの他の方法で人々に伝える必要があります。（Gitは&lt;a href=&quot;git-request-pull&quot;&gt;git-request-pull [1]&lt;/a&gt;を提供して、このタスクを簡略化するために、事前にフォーマットされたプル要求を上流のメンテナーに送信します。）</target>
        </trans-unit>
        <trans-unit id="67a2c97a3fe15102ccbc39363d071f9caa744775" translate="yes" xml:space="preserve">
          <source>You would normally use &lt;code&gt;git merge-index&lt;/code&gt; with supplied &lt;code&gt;git merge-one-file&lt;/code&gt; to do this last step. The script updates the files in the working tree as it merges each path and at the end of a successful merge.</source>
          <target state="translated">通常、この最後の手順を実行するには、提供されている &lt;code&gt;git merge-one-file&lt;/code&gt; で &lt;code&gt;git merge-index&lt;/code&gt; を使用します。スクリプトは、各パスをマージするとき、および正常なマージの最後に、作業ツリー内のファイルを更新します。</target>
        </trans-unit>
        <trans-unit id="acf5d70c570af359d1fc1b3db4b2e1cb44907ec4" translate="yes" xml:space="preserve">
          <source>You wouldn&amp;rsquo;t need to ever change it in gitweb config file.</source>
          <target state="translated">gitweb設定ファイルで変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="065eff42d50778a1002dd0b7a890143f4063288e" translate="yes" xml:space="preserve">
          <source>You write your current index file to a &quot;tree&quot; object with the program</source>
          <target state="translated">現在のインデックスファイルを「ツリー」オブジェクトに書き出します。</target>
        </trans-unit>
        <trans-unit id="49012e7b5c219e4c44033d7ce0ec88b78d68a780" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ve now initialized the working directory&amp;mdash;​you may notice a new directory created, named &quot;.git&quot;.</source>
          <target state="translated">これで作業ディレクトリが初期化されました。「.git」という名前の新しいディレクトリが作成されていることに気付くでしょう。</target>
        </trans-unit>
        <trans-unit id="8e4b96aa3f69a0a980be2d48bd9eb2298bc44f3c" translate="yes" xml:space="preserve">
          <source>You&amp;rsquo;ve now made your first real Git commit. And if you&amp;rsquo;re interested in looking at what &lt;code&gt;git commit&lt;/code&gt; really does, feel free to investigate: it&amp;rsquo;s a few very simple shell scripts to generate the helpful (?) commit message headers, and a few one-liners that actually do the commit itself (&lt;code&gt;git commit&lt;/code&gt;).</source>
          <target state="translated">これで、最初の実際のGitコミットが完了しました。そして、あなたが &lt;code&gt;git commit&lt;/code&gt; が実際に何をしているのかに興味があるなら、自由に調査してください：それは、有用な（？）コミットメッセージヘッダーを生成するいくつかの非常にシンプルなシェルスクリプトと、実際にコミット自体を行ういくつかのワンライナーです（ &lt;code&gt;git commit&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="6fd65e242e5023949f1979a313cb8892375303bf" translate="yes" xml:space="preserve">
          <source>Your &quot;public repository&quot; is now ready to accept your changes. Come back to the machine you have your private repository. From there, run this command:</source>
          <target state="translated">これであなたの「パブリックリポジトリ」は変更を受け入れる準備ができました。プライベートリポジトリを持っているマシンに戻ってください。そこから、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="77f5c1536424041eff5dddce9b9dc699480c5921" translate="yes" xml:space="preserve">
          <source>Your private repository&amp;rsquo;s Git directory is usually &lt;code&gt;.git&lt;/code&gt;, but your public repository is often named after the project name, i.e. &lt;code&gt;&amp;lt;project&amp;gt;.git&lt;/code&gt;. Let&amp;rsquo;s create such a public repository for project &lt;code&gt;my-git&lt;/code&gt;. After logging into the remote machine, create an empty directory:</source>
          <target state="translated">プライベートリポジトリのGitディレクトリは通常 &lt;code&gt;.git&lt;/code&gt; ですが、パブリックリポジトリの名前は多くの場合、プロジェクト名（ &lt;code&gt;&amp;lt;project&amp;gt;.git&lt;/code&gt; など)に基づいています。プロジェクト &lt;code&gt;my-git&lt;/code&gt; のそのようなパブリックリポジトリを作成してみましょう。リモートマシンにログインした後、空のディレクトリを作成します。</target>
        </trans-unit>
        <trans-unit id="b96e6decf426a8986abe42a514d0d538e2f36071" translate="yes" xml:space="preserve">
          <source>Your work tree is still based on your HEAD ($JC), but you have some edits since. Three-way merge makes sure that you have not added or modified index entries since $JC, and if you haven&amp;rsquo;t, then does the right thing. So with the following sequence:</source>
          <target state="translated">作業ツリーはまだHEAD（$ JC）に基づいていますが、それ以降の編集があります。3者間マージは、$ JC以降にインデックスエントリを追加または変更していないことを確認します。追加していない場合は、正しいことを行います。したがって、次のシーケンスで：</target>
        </trans-unit>
        <trans-unit id="8ff2148494456dea5c056275d6718302d7ecd982" translate="yes" xml:space="preserve">
          <source>Zero or more &lt;code&gt;filemodify&lt;/code&gt;, &lt;code&gt;filedelete&lt;/code&gt;, &lt;code&gt;filecopy&lt;/code&gt;, &lt;code&gt;filerename&lt;/code&gt;, &lt;code&gt;filedeleteall&lt;/code&gt; and &lt;code&gt;notemodify&lt;/code&gt; commands may be included to update the contents of the branch prior to creating the commit. These commands may be supplied in any order. However it is recommended that a &lt;code&gt;filedeleteall&lt;/code&gt; command precede all &lt;code&gt;filemodify&lt;/code&gt;, &lt;code&gt;filecopy&lt;/code&gt;, &lt;code&gt;filerename&lt;/code&gt; and &lt;code&gt;notemodify&lt;/code&gt; commands in the same commit, as &lt;code&gt;filedeleteall&lt;/code&gt; wipes the branch clean (see below).</source>
          <target state="translated">ゼロ以上の &lt;code&gt;filemodify&lt;/code&gt; 、 &lt;code&gt;filedelete&lt;/code&gt; 、 &lt;code&gt;filecopy&lt;/code&gt; 、 &lt;code&gt;filerename&lt;/code&gt; 、 &lt;code&gt;filedeleteall&lt;/code&gt; 、および &lt;code&gt;notemodify&lt;/code&gt; コマンドを含めて、コミットを作成する前にブランチの内容を更新できます。これらのコマンドは任意の順序で指定できます。ただし、 &lt;code&gt;filerename&lt;/code&gt; はブランチを &lt;code&gt;filedeleteall&lt;/code&gt; 消去するため（以下を参照）、同じコミット内ですべての &lt;code&gt;filemodify&lt;/code&gt; 、 &lt;code&gt;filecopy&lt;/code&gt; 、filerename、および &lt;code&gt;notemodify&lt;/code&gt; コマンドの前に &lt;code&gt;filedeleteall&lt;/code&gt; コマンドを実行することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="480b45cead8c71eaa647209c97491be4a36ea289" translate="yes" xml:space="preserve">
          <source>Zero or more protocol options may be entered after the last &lt;code&gt;push&lt;/code&gt; command, before the batch&amp;rsquo;s terminating blank line.</source>
          <target state="translated">最後の &lt;code&gt;push&lt;/code&gt; コマンドの後、バッチの終了空白行の前に、0個以上のプロトコルオプションを入力できます。</target>
        </trans-unit>
        <trans-unit id="fbdec3db39874b3b5b75476184662777ddc44fd6" translate="yes" xml:space="preserve">
          <source>[&amp;lt;git-rev-list-args&amp;gt;&amp;hellip;​]</source>
          <target state="translated">[&amp;lt;git-rev-list-args&amp;gt;&amp;hellip;​]</target>
        </trans-unit>
        <trans-unit id="b3a075bbccfeeb4bedba2aca4addb159d1acee3d" translate="yes" xml:space="preserve">
          <source>[&amp;lt;path&amp;gt;&amp;hellip;​]</source>
          <target state="translated">[&amp;lt;path&amp;gt;&amp;hellip;​]</target>
        </trans-unit>
        <trans-unit id="d31c8b5c3af548ff2d95f4e227ea28f0f9277441" translate="yes" xml:space="preserve">
          <source>[&amp;lt;refname&amp;gt;&amp;hellip;​]</source>
          <target state="translated">[&amp;lt;refname&amp;gt;&amp;hellip;​]</target>
        </trans-unit>
        <trans-unit id="e961d55ee5b355694495464c07c86f7fba23e9a9" translate="yes" xml:space="preserve">
          <source>[--] &amp;lt;path&amp;gt;&amp;hellip;​</source>
          <target state="translated">[-] &amp;lt;パス&amp;gt;&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="1eb3d578c1f910d18345d8eb23a781efa2f8d23d" translate="yes" xml:space="preserve">
          <source>[0] &lt;a href=&quot;https://bugs.chromium.org/p/git/issues/detail?id=6&quot;&gt;https://bugs.chromium.org/p/git/issues/detail?id=6&lt;/a&gt; Chromium work item for: Multi-Pack Index (MIDX)</source>
          <target state="translated">[0] &lt;a href=&quot;https://bugs.chromium.org/p/git/issues/detail?id=6&quot;&gt;https://bugs.chromium.org/p/git/issues/detail?id=6&lt;/a&gt; Chromium作業項目：マルチパックインデックス（MIDX）</target>
        </trans-unit>
        <trans-unit id="25a96ba2d3b7a7d8ee2c18075362c090194ac1d0" translate="yes" xml:space="preserve">
          <source>[1] &lt;a href=&quot;https://lore.kernel.org/git/20180107181459.222909-1-dstolee@microsoft.com/&quot;&gt;https://lore.kernel.org/git/20180107181459.222909-1-dstolee@microsoft.com/&lt;/a&gt; An earlier RFC for the multi-pack-index feature</source>
          <target state="translated">[1] &lt;a href=&quot;https://lore.kernel.org/git/20180107181459.222909-1-dstolee@microsoft.com/&quot;&gt;https://lore.kernel.org/git/20180107181459.222909-1-dstolee@microsoft.com/&lt;/a&gt; multi-pack-index機能の以前のRFC</target>
        </trans-unit>
        <trans-unit id="347fffb72e72a788a9461ff2e246ae61494e14d7" translate="yes" xml:space="preserve">
          <source>[2] &lt;a href=&quot;https://lore.kernel.org/git/alpine.DEB.2.20.1803091557510.23109@alexmv-linux/&quot;&gt;https://lore.kernel.org/git/alpine.DEB.2.20.1803091557510.23109@alexmv-linux/&lt;/a&gt; Git Merge 2018 Contributor&amp;rsquo;s summit notes (includes discussion of MIDX)</source>
          <target state="translated">[2] &lt;a href=&quot;https://lore.kernel.org/git/alpine.DEB.2.20.1803091557510.23109@alexmv-linux/&quot;&gt;https://lore.kernel.org/git/alpine.DEB.2.20.1803091557510.23109@alexmv-linux/&lt;/a&gt; Git Merge 2018コントリビューターのサミットノート（MIDXの説明を含む）</target>
        </trans-unit>
        <trans-unit id="feea73f842c5a1ec74b307b98128568bae22544a" translate="yes" xml:space="preserve">
          <source>[DEPRECATED: use &lt;code&gt;--rebase-merges&lt;/code&gt; instead] Recreate merge commits instead of flattening the history by replaying commits a merge commit introduces. Merge conflict resolutions or manual amendments to merge commits are not preserved.</source>
          <target state="translated">[ &lt;code&gt;--rebase-merges&lt;/code&gt; ：代わりに--rebase-mergesを使用してください ]マージコミットが導入したコミットを再生して履歴を平坦化する代わりに、マージコミットを再作成します。マージ競合解決またはマージコミットの手動修正は保持されません。</target>
        </trans-unit>
        <trans-unit id="a59f280e0e654176579fad979c6b2390d4560b5d" translate="yes" xml:space="preserve">
          <source>[EXPERIMENTAL] Set to &lt;code&gt;true&lt;/code&gt; to use the experimental built-in implementation of the interactive version of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; instead of the Perl script version. Is &lt;code&gt;false&lt;/code&gt; by default.</source>
          <target state="translated">[EXPERIMENTAL] Perlスクリプトバージョンの代わりに&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;のインタラクティブバージョンの実験的な組み込み実装を使用するには、 &lt;code&gt;true&lt;/code&gt; に設定します。デフォルトでは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f8205d704abeeab8758bae84f0f9eac80a6c4899" translate="yes" xml:space="preserve">
          <source>[NOTE] &lt;code&gt;git rerere&lt;/code&gt; relies on the conflict markers in the file to detect the conflict. If the file already contains lines that look the same as lines with conflict markers, &lt;code&gt;git rerere&lt;/code&gt; may fail to record a conflict resolution. To work around this, the &lt;code&gt;conflict-marker-size&lt;/code&gt; setting in &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; can be used.</source>
          <target state="translated">[注意] &lt;code&gt;git rerere&lt;/code&gt; はファイル内の競合マーカーに依存して競合を検出します。ファイルに競合マーカーのある行と同じように見える行がすでに含まれている場合、 &lt;code&gt;git rerere&lt;/code&gt; は競合解決の記録に失敗する場合があります。これを回避するには、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;の &lt;code&gt;conflict-marker-size&lt;/code&gt; 設定を使用できます。</target>
        </trans-unit>
        <trans-unit id="ac4bc8630c3c03bfd813e3fe5057d1c466974ce5" translate="yes" xml:space="preserve">
          <source>[[[1]]] &lt;a href=&quot;https://www.nist.gov/sites/default/files/documents/director/planning/report02-3.pdf&quot;&gt;&lt;em&gt;The Economic Impacts of Inadequate Infratructure for Software Testing&lt;/em&gt;. Nist Planning Report 02-3&lt;/a&gt;, see Executive Summary and Chapter 8.</source>
          <target state="translated">[[[1]]] &lt;a href=&quot;https://www.nist.gov/sites/default/files/documents/director/planning/report02-3.pdf&quot;&gt;&lt;em&gt;ソフトウェアテストのための不十分なインフラストラクチャの経済的影響&lt;/em&gt;。Nist計画レポート02-3&lt;/a&gt;、エグゼクティブサマリーおよび第8章を参照してください。</target>
        </trans-unit>
        <trans-unit id="e5f919a0494a6ccb56ff39496ebf8651f04232d2" translate="yes" xml:space="preserve">
          <source>[[[2]]] &lt;a href=&quot;http://www.oracle.com/technetwork/java/codeconvtoc-136057.html&quot;&gt;&lt;em&gt;Code Conventions for the Java Programming Language&lt;/em&gt;. Sun Microsystems.&lt;/a&gt;</source>
          <target state="translated">[[[2]]] &lt;a href=&quot;http://www.oracle.com/technetwork/java/codeconvtoc-136057.html&quot;&gt;&lt;em&gt;Javaプログラミング言語のコード規約&lt;/em&gt;。Sun Microsystems。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de6da26d7d92c3d4bdee11d004d96506e88a1b00" translate="yes" xml:space="preserve">
          <source>[[[3]]] &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_maintenance&quot;&gt;&lt;em&gt;Software maintenance&lt;/em&gt;. Wikipedia.&lt;/a&gt;</source>
          <target state="translated">[[[3]]] &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_maintenance&quot;&gt;&lt;em&gt;ソフトウェアのメンテナンス&lt;/em&gt;。ウィキペディア。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a21dac2771422b1ce396ac7103119df3289ef40d" translate="yes" xml:space="preserve">
          <source>[[[4]]] &lt;a href=&quot;https://lore.kernel.org/git/7vps5xsbwp.fsf_-_@assigned-by-dhcp.cox.net/&quot;&gt;Junio C Hamano. &lt;em&gt;Automated bisect success story&lt;/em&gt;.&lt;/a&gt;</source>
          <target state="translated">[[[4]]] &lt;a href=&quot;https://lore.kernel.org/git/7vps5xsbwp.fsf_-_@assigned-by-dhcp.cox.net/&quot;&gt;ジュニオC浜野。&lt;em&gt;自動化された二分サクセスストーリー&lt;/em&gt;。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="06e39006ce98590e4632510795aafbc71a8d5177" translate="yes" xml:space="preserve">
          <source>[[[5]]] &lt;a href=&quot;https://lwn.net/Articles/317154/&quot;&gt;Christian Couder. &lt;em&gt;Fully automated bisecting with &quot;git bisect run&quot;&lt;/em&gt;. LWN.net.&lt;/a&gt;</source>
          <target state="translated">[[[5]]] &lt;a href=&quot;https://lwn.net/Articles/317154/&quot;&gt;クリスチャンクーダー。&lt;em&gt;「git bisect run」による完全に自動化された二分&lt;/em&gt;。LWN.net。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a12b60ab9e79fee2e4613d666532029fdb7e1f4d" translate="yes" xml:space="preserve">
          <source>[[[6]]] &lt;a href=&quot;https://lwn.net/Articles/277872/&quot;&gt;Jonathan Corbet. &lt;em&gt;Bisection divides users and developers&lt;/em&gt;. LWN.net.&lt;/a&gt;</source>
          <target state="translated">[[[6]]] &lt;a href=&quot;https://lwn.net/Articles/277872/&quot;&gt;ジョナサン・コルベット。&lt;em&gt;Bisectionはユーザーと開発者を分割し​​ます&lt;/em&gt;。LWN.net。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fb3a1d698c871451809a03759d2052ad730db3fa" translate="yes" xml:space="preserve">
          <source>[[[7]]] &lt;a href=&quot;https://lore.kernel.org/lkml/20071207113734.GA14598@elte.hu/&quot;&gt;Ingo Molnar. &lt;em&gt;Re: BUG 2.6.23-rc3 can&amp;rsquo;t see sd partitions on Alpha&lt;/em&gt;. Linux-kernel mailing list.&lt;/a&gt;</source>
          <target state="translated">[[[7]]] &lt;a href=&quot;https://lore.kernel.org/lkml/20071207113734.GA14598@elte.hu/&quot;&gt;インゴモルナー。&lt;em&gt;再：バグ2.6.23-rc3はAlphaのsdパーティションを見ることができません&lt;/em&gt;。Linux-kernelメーリングリスト。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="91adb50bf54c20a1b51a7a5bd4f97f72154e309d" translate="yes" xml:space="preserve">
          <source>[[[8]]] &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-bisect.html&quot;&gt;Junio C Hamano and the git-list. &lt;em&gt;git-bisect(1) Manual Page&lt;/em&gt;. Linux Kernel Archives.&lt;/a&gt;</source>
          <target state="translated">[[[8]]] &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-bisect.html&quot;&gt;Junio C Hamanoとgit-list。&lt;em&gt;git-bisect（1）マニュアルページ&lt;/em&gt;。Linuxカーネルアーカイブ。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="62e3bcbb19b635de003c473322577e0da443bd26" translate="yes" xml:space="preserve">
          <source>[[[9]]] &lt;a href=&quot;https://github.com/Ealdwulf/bbchop&quot;&gt;Ealdwulf. &lt;em&gt;bbchop&lt;/em&gt;. GitHub.&lt;/a&gt;</source>
          <target state="translated">[[[9]]] &lt;a href=&quot;https://github.com/Ealdwulf/bbchop&quot;&gt;Ealdwulf。&lt;em&gt;bbchop&lt;/em&gt;。GitHub。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4720dfbb1b4c30f403e79c3ea73865f0f4c5faef" translate="yes" xml:space="preserve">
          <source>[user@]host.xz:/~[user]/path/to/repo.git/</source>
          <target state="translated">[user@]host.xz:/~[user]/path/to/repo.git/</target>
        </trans-unit>
        <trans-unit id="5995beae7c11faa4cc7064555dea6942a8fa3779" translate="yes" xml:space="preserve">
          <source>[user@]host.xz:path/to/repo.git/</source>
          <target state="translated">[user@]host.xz:path/to/repo.git/</target>
        </trans-unit>
        <trans-unit id="8bc9eff643c5f26b1d25ab8fdf5a5ddc87d11ead" translate="yes" xml:space="preserve">
          <source>\0 line termination on output and do not quote filenames. See OUTPUT FORMAT below for more information.</source>
          <target state="translated">\ 0出力の行終端。ファイル名を引用しません。詳細については、以下の出力フォーマットを参照してください。</target>
        </trans-unit>
        <trans-unit id="d0b23d6e6728ae49ec5909ad48b79671e7245999" translate="yes" xml:space="preserve">
          <source>\0 line termination on output and do not quote filenames. See OUTPUT below for more information.</source>
          <target state="translated">\ 0出力の行終端。ファイル名を引用しません。詳細については、以下の出力を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec441d8e621550cb4deb96e2b1ad67311ed0768f" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;&amp;lt;project&amp;gt;.git&lt;/code&gt; directory that is a &lt;code&gt;bare&lt;/code&gt; repository (i.e. without its own working tree), that is typically used for exchanging histories with others by pushing into it and fetching from it.</source>
          <target state="translated">&lt;code&gt;&amp;lt;project&amp;gt;.git&lt;/code&gt; あるディレクトリ &lt;code&gt;bare&lt;/code&gt; リポジトリ（すなわち、自身の作業ツリーなし）一般的に、それに押し、そこからフェッチすることで、他の人と歴史を交換するために使用されます、。</target>
        </trans-unit>
        <trans-unit id="ea844fb65222d001b2e2f561d577c3d6a932db4a" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;.git&lt;/code&gt; directory at the root of the working tree;</source>
          <target state="translated">作業ツリーのルートにある &lt;code&gt;.git&lt;/code&gt; ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="f0d4bf33608fee8383e25a39f62fec37be3db742" translate="yes" xml:space="preserve">
          <source>a &lt;code&gt;lot&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lot&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc234069c4e3ee03ef8f7670cb491ed5411b65b6" translate="yes" xml:space="preserve">
          <source>a NUL (only exists if renamed/copied);</source>
          <target state="translated">NUL (名前を変更/コピーした場合にのみ存在する)。</target>
        </trans-unit>
        <trans-unit id="079f5a842faae1ecf0933e998354e66093295bb8" translate="yes" xml:space="preserve">
          <source>a NUL.</source>
          <target state="translated">a NUL.</target>
        </trans-unit>
        <trans-unit id="e9278592288a5c5c028d9d1d04c2201af670c4f7" translate="yes" xml:space="preserve">
          <source>a URL like &quot;git://example.org/path/to/repo.git&quot; will be rewritten to &quot;ssh://example.org/path/to/repo.git&quot; for pushes, but pulls will still use the original URL.</source>
          <target state="translated">のような URL は &quot;git://example.org/path/to/repo.git&quot; に書き換えられますが、push の場合は &quot;ssh://example.org/path/to/repo.git&quot; に書き換えられますが、pull の場合は元の URL を使用します。</target>
        </trans-unit>
        <trans-unit id="96a7d2b2a7356a40bc207f3d1e0038c9f743ef8f" translate="yes" xml:space="preserve">
          <source>a URL like &quot;work:repo.git&quot; or like &quot;host.xz:/path/to/repo.git&quot; will be rewritten in any context that takes a URL to be &quot;git://git.host.xz/repo.git&quot;.</source>
          <target state="translated">work:repo.git」のようなURLや「host.xz:/path/to/repo.git」のようなURLは、「git://git.host.xz/repo.git」というURLを取るようなコンテキストでは書き換えられてしまいます。</target>
        </trans-unit>
        <trans-unit id="da90a472a42edab28f6103dd507b377a59e39919" translate="yes" xml:space="preserve">
          <source>a colon.</source>
          <target state="translated">コロンです。</target>
        </trans-unit>
        <trans-unit id="07112c294a121f7cc6ed6654ce50e53f206b098f" translate="yes" xml:space="preserve">
          <source>a comment describing this commit.</source>
          <target state="translated">このコミットを記述するコメント。</target>
        </trans-unit>
        <trans-unit id="6fd45c543fb44740f3ae2218676d1d2f809372d6" translate="yes" xml:space="preserve">
          <source>a committer: The name of the person who actually created the commit, with the date it was done. This may be different from the author, for example, if the author was someone who wrote a patch and emailed it to the person who used it to create the commit.</source>
          <target state="translated">コミッターのことです。コミットを実際に作成した人の名前で、そのコミットが行われた日付が記載されています。これは作成者とは異なる場合があります。例えば、作成者がパッチを書いてそれを使ってコミットを作成した人にメールで送った場合などです。</target>
        </trans-unit>
        <trans-unit id="475363380919fa9dad3daaa5151af4a7ecf7fe63" translate="yes" xml:space="preserve">
          <source>a file called &lt;code&gt;HEAD&lt;/code&gt;, that has &lt;code&gt;ref: refs/heads/master&lt;/code&gt; in it. This is similar to a symbolic link and points at &lt;code&gt;refs/heads/master&lt;/code&gt; relative to the &lt;code&gt;HEAD&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; というファイルで、 &lt;code&gt;ref: refs/heads/master&lt;/code&gt; れています。これはシンボリックリンクに似ており、 &lt;code&gt;HEAD&lt;/code&gt; ファイルに対して &lt;code&gt;refs/heads/master&lt;/code&gt; を指します。</target>
        </trans-unit>
        <trans-unit id="956892125b0edbb5f2b693d0431acccf4dd5c1cd" translate="yes" xml:space="preserve">
          <source>a file in the &lt;code&gt;$GIT_DIR/branches&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/branches&lt;/code&gt; ディレクトリ内のファイル。</target>
        </trans-unit>
        <trans-unit id="7a8f92bb4f6fe9e686ed78d483dc8804c1d0837c" translate="yes" xml:space="preserve">
          <source>a file in the &lt;code&gt;$GIT_DIR/remotes&lt;/code&gt; directory, or</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/remotes&lt;/code&gt; ディレクトリ内のファイル、または</target>
        </trans-unit>
        <trans-unit id="6fb331171394d95fbb7a35c4b995f2a83f23618c" translate="yes" xml:space="preserve">
          <source>a file that has &lt;code&gt;any&lt;/code&gt; difference what-so-ever in the three trees will stay as separate entries in the index. It&amp;rsquo;s up to &quot;porcelain policy&quot; to determine how to remove the non-0 stages, and insert a merged version.</source>
          <target state="translated">持つファイル &lt;code&gt;any&lt;/code&gt; 3本の木に何-SO-これまでの違いは、インデックス内の別のエントリとしてご利用いただけます。0以外のステージを削除し、マージされたバージョンを挿入する方法を決定するのは、「磁器ポリシー」次第です。</target>
        </trans-unit>
        <trans-unit id="fcb1d336b0be584d8054e8f7d63b3480aea0ee1d" translate="yes" xml:space="preserve">
          <source>a function called &lt;code&gt;cmd_&amp;lt;bla&amp;gt;&lt;/code&gt;, typically defined in &lt;code&gt;builtin/&amp;lt;bla.c&amp;gt;&lt;/code&gt; (note that older versions of Git used to have it in &lt;code&gt;builtin-&amp;lt;bla&amp;gt;.c&lt;/code&gt; instead), and declared in &lt;code&gt;builtin.h&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cmd_&amp;lt;bla&amp;gt;&lt;/code&gt; と呼ばれる関数。通常は &lt;code&gt;builtin/&amp;lt;bla.c&amp;gt;&lt;/code&gt; で定義され（以前のバージョンのGitはそれを &lt;code&gt;builtin-&amp;lt;bla&amp;gt;.c&lt;/code&gt; で使用していたことに注意してください）、 &lt;code&gt;builtin.h&lt;/code&gt; で宣言されています。</target>
        </trans-unit>
        <trans-unit id="d20b77e1575c57d2803f17741070661ffe1f7923" translate="yes" xml:space="preserve">
          <source>a line that begins with &quot;Index: &quot;</source>
          <target state="translated">で始まる行を指定します。&quot;</target>
        </trans-unit>
        <trans-unit id="eac485dbe3dc8258452b85ab1fdc03917425590f" translate="yes" xml:space="preserve">
          <source>a line that begins with &quot;diff -&quot;, or</source>
          <target state="translated">diff -&quot; で始まる行、または</target>
        </trans-unit>
        <trans-unit id="8cb077e79c6b205418cec26b6f4930fe1ae56b3b" translate="yes" xml:space="preserve">
          <source>a newline.</source>
          <target state="translated">改行します。</target>
        </trans-unit>
        <trans-unit id="678e3fa85625ddb634df3223f890cd55081ea7cd" translate="yes" xml:space="preserve">
          <source>a raw &lt;code&gt;%&lt;/code&gt;</source>
          <target state="translated">生の &lt;code&gt;%&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6a839de3aabe2c207992e1add851477714b9c5e" translate="yes" xml:space="preserve">
          <source>a remote in the Git configuration file: &lt;code&gt;$GIT_DIR/config&lt;/code&gt;,</source>
          <target state="translated">Git構成ファイル内のリモート： &lt;code&gt;$GIT_DIR/config&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="f9af7071efb1bd7dd22ebf85f05d8810442b8586" translate="yes" xml:space="preserve">
          <source>a space between time and time zone</source>
          <target state="translated">時空間</target>
        </trans-unit>
        <trans-unit id="65b604e2f985f7317d6866f6730d409a3832783e" translate="yes" xml:space="preserve">
          <source>a space instead of the &lt;code&gt;T&lt;/code&gt; date/time delimiter</source>
          <target state="translated">&lt;code&gt;T&lt;/code&gt; 日付/時刻区切り文字の代わりにスペース</target>
        </trans-unit>
        <trans-unit id="5bc00ebd3440c4f401b07128f1c136e115562dd8" translate="yes" xml:space="preserve">
          <source>a space.</source>
          <target state="translated">スペース。</target>
        </trans-unit>
        <trans-unit id="97a7ee5f8a960df69981e9527fa176cfdf9705cf" translate="yes" xml:space="preserve">
          <source>a subdirectory called &lt;code&gt;objects&lt;/code&gt;, which will contain all the objects of your project. You should never have any real reason to look at the objects directly, but you might want to know that these objects are what contains all the real &lt;code&gt;data&lt;/code&gt; in your repository.</source>
          <target state="translated">プロジェクトのすべてのオブジェクトを含む、 &lt;code&gt;objects&lt;/code&gt; というサブディレクトリ。オブジェクトを直接見る本当の理由はありませんが、これらのオブジェクトがリポジトリ内のすべての実際の &lt;code&gt;data&lt;/code&gt; 含んでいることを知りたい場合があります。</target>
        </trans-unit>
        <trans-unit id="045a27e5aab449465c7a517674ebf98a06438921" translate="yes" xml:space="preserve">
          <source>a subdirectory called &lt;code&gt;refs&lt;/code&gt;, which contains references to objects.</source>
          <target state="translated">オブジェクトへの参照を含む &lt;code&gt;refs&lt;/code&gt; と呼ばれるサブディレクトリ。</target>
        </trans-unit>
        <trans-unit id="03097f133fc01ec710880af30fddc9a8cd7c34db" translate="yes" xml:space="preserve">
          <source>a tab or a NUL when &lt;code&gt;-z&lt;/code&gt; option is used.</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; オプションが使用されている場合はタブまたはNUL 。</target>
        </trans-unit>
        <trans-unit id="9346da07fb77dd97b82dc62a47eb3edc36d2b7a0" translate="yes" xml:space="preserve">
          <source>a tab or a NUL when &lt;code&gt;-z&lt;/code&gt; option is used; only exists for C or R.</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; オプションを使用する場合はタブまたはNUL 。CまたはRにのみ存在します。</target>
        </trans-unit>
        <trans-unit id="c40734bc76bdc997f13a3bade66db88cc0dc137e" translate="yes" xml:space="preserve">
          <source>a tab;</source>
          <target state="translated">タブを使用しています。</target>
        </trans-unit>
        <trans-unit id="19150edbe2f84d3c01f8f24ddf7de6b06a212def" translate="yes" xml:space="preserve">
          <source>a tree: The SHA-1 name of a tree object (as defined below), representing the contents of a directory at a certain point in time.</source>
          <target state="translated">ツリー。ツリーオブジェクトの SHA-1 名 (以下に定義)で、ある時点でのディレクトリの内容を表します。</target>
        </trans-unit>
        <trans-unit id="013edfaa8480f23dc64a9a565714902a0f70e19a" translate="yes" xml:space="preserve">
          <source>a valid head &lt;code&gt;name&lt;/code&gt; (i.e. a &lt;code&gt;refs/heads/&amp;lt;head&amp;gt;&lt;/code&gt; reference).</source>
          <target state="translated">有効なヘッド &lt;code&gt;name&lt;/code&gt; （つまり、 &lt;code&gt;refs/heads/&amp;lt;head&amp;gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="c3796b26d9f35f82d5c7ba0548ce633809586698" translate="yes" xml:space="preserve">
          <source>a valid tag &lt;code&gt;name&lt;/code&gt; (i.e. a &lt;code&gt;refs/tags/&amp;lt;tag&amp;gt;&lt;/code&gt; reference).</source>
          <target state="translated">有効なタグ &lt;code&gt;name&lt;/code&gt; （つまり、 &lt;code&gt;refs/tags/&amp;lt;tag&amp;gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="fdbf716e8cd4fd3ff778984618bbe33ffeee814c" translate="yes" xml:space="preserve">
          <source>a) are ancestor of the &quot;bad&quot; commit (including the &quot;bad&quot; commit itself), b) are not ancestor of a &quot;good&quot; commit (excluding the &quot;good&quot; commits).</source>
          <target state="translated">a)は「悪い」コミットの祖先であり(「悪い」コミット自体を含む)、b)は「良い」コミットの祖先ではない(「良い」コミットを除く)。</target>
        </trans-unit>
        <trans-unit id="8682c02d1bc4bfce128a794497013605d86c32b6" translate="yes" xml:space="preserve">
          <source>a) regular use</source>
          <target state="translated">常用</target>
        </trans-unit>
        <trans-unit id="4ff2759bc14568ced83be0be38a4abafea668a32" translate="yes" xml:space="preserve">
          <source>abbreviated commit hash</source>
          <target state="translated">省略形コミットハッシュ</target>
        </trans-unit>
        <trans-unit id="83baab4c4f5445b3450e34e24f8066fea1ac11f2" translate="yes" xml:space="preserve">
          <source>abbreviated parent hashes</source>
          <target state="translated">省略された親ハッシュ</target>
        </trans-unit>
        <trans-unit id="33579b1cb5338205dc784843012a5c0a9e8cacae" translate="yes" xml:space="preserve">
          <source>abbreviated tree hash</source>
          <target state="translated">略木ハッシュ</target>
        </trans-unit>
        <trans-unit id="b61646f016483b318b49a910668a966b6ce09ede" translate="yes" xml:space="preserve">
          <source>abort</source>
          <target state="translated">abort</target>
        </trans-unit>
        <trans-unit id="832e60dfe198126ed45442b9d54f0a366515eefc" translate="yes" xml:space="preserve">
          <source>absorbgitdirs</source>
          <target state="translated">absorbgitdirs</target>
        </trans-unit>
        <trans-unit id="f412f21dd1d844e9ed4c1cbd73b06dc725c5d8bd" translate="yes" xml:space="preserve">
          <source>access method (one of &quot;ext&quot; or &quot;pserver&quot;)</source>
          <target state="translated">アクセスメソッド</target>
        </trans-unit>
        <trans-unit id="34eb4c4ef005207e8b8f916b9f1fffacccd6945e" translate="yes" xml:space="preserve">
          <source>action</source>
          <target state="translated">action</target>
        </trans-unit>
        <trans-unit id="326b426f9ac7a96ed6baf62f8838565416d27df8" translate="yes" xml:space="preserve">
          <source>actions</source>
          <target state="translated">actions</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="6d8bcdb6bdc1c6a236c5092142b208eb67008cee" translate="yes" xml:space="preserve">
          <source>add &amp;lt;path&amp;gt; [&amp;lt;commit-ish&amp;gt;]</source>
          <target state="translated">&amp;lt;path&amp;gt; [&amp;lt;commit-ish&amp;gt;]を追加</target>
        </trans-unit>
        <trans-unit id="89052c7d90a34c914815c621a3c8abaf890dfcb5" translate="yes" xml:space="preserve">
          <source>add [-b &amp;lt;branch&amp;gt;] [-f|--force] [--name &amp;lt;name&amp;gt;] [--reference &amp;lt;repository&amp;gt;] [--depth &amp;lt;depth&amp;gt;] [--] &amp;lt;repository&amp;gt; [&amp;lt;path&amp;gt;]</source>
          <target state="translated">add [-b &amp;lt;branch&amp;gt;] [-f | --force] [--name &amp;lt;name&amp;gt;] [--reference &amp;lt;repository&amp;gt;] [--depth &amp;lt;depth&amp;gt;] [-] &amp;lt;repository&amp;gt; [&amp;lt;path &amp;gt;]</target>
        </trans-unit>
        <trans-unit id="96b545065b00a5b7501087e2c1e93926449febd5" translate="yes" xml:space="preserve">
          <source>add a missing &lt;code&gt;\n&lt;/code&gt; to the last line if necessary.</source>
          <target state="translated">必要に応じて、不足している &lt;code&gt;\n&lt;/code&gt; を最後の行に追加します。</target>
        </trans-unit>
        <trans-unit id="90bc127779a3e8fd8565532d33e4a134cd45f11d" translate="yes" xml:space="preserve">
          <source>add everything under the current directory.</source>
          <target state="translated">カレントディレクトリの下にすべてを追加します。</target>
        </trans-unit>
        <trans-unit id="cb81f0f2d76a3c8759a19442b315f5c3a72e8b01" translate="yes" xml:space="preserve">
          <source>add untracked</source>
          <target state="translated">追い出す</target>
        </trans-unit>
        <trans-unit id="c22e3f3bd42e15a0bc002a5cba9cb2e9cb547df3" translate="yes" xml:space="preserve">
          <source>add.ignore-errors (deprecated)</source>
          <target state="translated">add.ignore-errors (非推奨)</target>
        </trans-unit>
        <trans-unit id="0d6211d85b6c5ebebd00bc700587b97d87d96f79" translate="yes" xml:space="preserve">
          <source>add.ignoreErrors</source>
          <target state="translated">add.ignoreErrors</target>
        </trans-unit>
        <trans-unit id="47d07ea3a984d5f17b8a52280b424c7e874d91e2" translate="yes" xml:space="preserve">
          <source>add.interactive.useBuiltin</source>
          <target state="translated">add.interactive.useBuiltin</target>
        </trans-unit>
        <trans-unit id="e441bfa1c3e8c860d35d02080c0d58234a3dc31b" translate="yes" xml:space="preserve">
          <source>addEmbeddedRepo</source>
          <target state="translated">addEmbeddedRepo</target>
        </trans-unit>
        <trans-unit id="5fba0af68b4dc6017c79ff69ba4b3844f76b2dc5" translate="yes" xml:space="preserve">
          <source>addEmptyPathspec</source>
          <target state="translated">addEmptyPathspec</target>
        </trans-unit>
        <trans-unit id="a9b80c1de3c9ac007c7c119f277608c2e2a51269" translate="yes" xml:space="preserve">
          <source>addIgnoredFile</source>
          <target state="translated">addIgnoredFile</target>
        </trans-unit>
        <trans-unit id="ceb99972d01848a4af9e45ab5cd53f0d9ea700b4" translate="yes" xml:space="preserve">
          <source>added content</source>
          <target state="translated">追加コンテンツ</target>
        </trans-unit>
        <trans-unit id="782f82176de20dd76d4373d2acfc3406073964ff" translate="yes" xml:space="preserve">
          <source>adding context (&quot; &quot;) or removal (&quot;-&quot;) lines</source>
          <target state="translated">コンテキストの追加 (&quot; &quot;)または削除 (&quot;-&quot;)行</target>
        </trans-unit>
        <trans-unit id="39de4cfc4c6e6827c5f11475b89460e1b545a7f9" translate="yes" xml:space="preserve">
          <source>adds the following to &lt;code&gt;.git/config&lt;/code&gt;:</source>
          <target state="translated">以下を &lt;code&gt;.git/config&lt;/code&gt; に追加します：</target>
        </trans-unit>
        <trans-unit id="f6acb502d3f3dcf967568ec1f1f05756c7001015" translate="yes" xml:space="preserve">
          <source>advice.*</source>
          <target state="translated">advice.*</target>
        </trans-unit>
        <trans-unit id="0608c4054662dd902e1314f7e450e3eaa81c1143" translate="yes" xml:space="preserve">
          <source>agent</source>
          <target state="translated">agent</target>
        </trans-unit>
        <trans-unit id="dc642557f3a1ed15b666c3bf8c010e9d1bceffe0" translate="yes" xml:space="preserve">
          <source>alias.*</source>
          <target state="translated">alias.*</target>
        </trans-unit>
        <trans-unit id="16f3bac085c702b24dd56dd8fdf474c5d21e6639" translate="yes" xml:space="preserve">
          <source>alice and cindy can push into master, only bob can push into doc-update. david is the release manager and is the only person who can create and push version tags.</source>
          <target state="translated">alice と cindy は master にプッシュできますが、doc-update にプッシュできるのは bob だけです。</target>
        </trans-unit>
        <trans-unit id="ae21c64a87f6bb0b8e16e55c48be4cc638d7bd3f" translate="yes" xml:space="preserve">
          <source>align</source>
          <target state="translated">align</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="29702e41afdcf565d852a6355913f10360a2f8b0" translate="yes" xml:space="preserve">
          <source>all parent object ids</source>
          <target state="translated">すべての親オブジェクトのID</target>
        </trans-unit>
        <trans-unit id="6664a4a284b9aeecc837369fce6272fe3547f795" translate="yes" xml:space="preserve">
          <source>allow-indentation-change</source>
          <target state="translated">allow-indentation-change</target>
        </trans-unit>
        <trans-unit id="890c8ad25c4c255f4dda7bba71ccde4b6eb54f1a" translate="yes" xml:space="preserve">
          <source>allows you to browse any commits from the last 2 weeks of commits that modified files under the &quot;drivers&quot; directory. (Note: you can adjust gitk&amp;rsquo;s fonts by holding down the control key while pressing &quot;-&quot; or &quot;+&quot;.)</source>
          <target state="translated">「drivers」ディレクトリの下のファイルを変更したコミットの過去2週間のコミットを参照できます。（注：Ctrlキーを押しながら「-」または「+」を押すと、gitkのフォントを調整できます。）</target>
        </trans-unit>
        <trans-unit id="8733169fb7d8912aa579031eed0a4b26ef5718fe" translate="yes" xml:space="preserve">
          <source>alternate object database</source>
          <target state="translated">代替オブジェクトデータベース</target>
        </trans-unit>
        <trans-unit id="385d97ddc2cf0f165b1e517e2de9a74c662d0d92" translate="yes" xml:space="preserve">
          <source>alternate: absolute path of alternate object databases; may appear multiple times, one line per path. Note that if the path contains non-printable characters, it may be surrounded by double-quotes and contain C-style backslashed escape sequences.</source>
          <target state="translated">alternate:代替オブジェクトデータベースの絶対パス。パスに印刷不可能な文字が含まれている場合は、ダブルクォートで囲まれ、Cスタイルのバックスラッシュ付きエスケープシーケンスが含まれている可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="459a9aeba984b09598ccfb2133b8ae65d179153d" translate="yes" xml:space="preserve">
          <source>although the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the &lt;code&gt;&amp;lt;remote SHA-1&amp;gt;&lt;/code&gt; will be 40 &lt;code&gt;0&lt;/code&gt;. If a ref is to be deleted, the &lt;code&gt;&amp;lt;local ref&amp;gt;&lt;/code&gt; will be supplied as &lt;code&gt;(delete)&lt;/code&gt; and the &lt;code&gt;&amp;lt;local
SHA-1&amp;gt;&lt;/code&gt; will be 40 &lt;code&gt;0&lt;/code&gt;. If the local commit was specified by something other than a name which could be expanded (such as &lt;code&gt;HEAD~&lt;/code&gt;, or a SHA-1) it will be supplied as it was originally given.</source>
          <target state="translated">完全な40文字のSHA-1が提供されます。外部参照がまだ存在しない場合、 &lt;code&gt;&amp;lt;remote SHA-1&amp;gt;&lt;/code&gt; は40 &lt;code&gt;0&lt;/code&gt; になります。refを削除する場合、 &lt;code&gt;&amp;lt;local ref&amp;gt;&lt;/code&gt; は &lt;code&gt;(delete)&lt;/code&gt; として提供され、 &lt;code&gt;&amp;lt;local SHA-1&amp;gt;&lt;/code&gt; は40 &lt;code&gt;0&lt;/code&gt; になります。ローカルコミットが、拡張可能な名前（ &lt;code&gt;HEAD~&lt;/code&gt; やSHA-1など）以外のもので指定された場合、最初に指定されたとおりに提供されます。</target>
        </trans-unit>
        <trans-unit id="b16bb5afab4c1802eaeada40ac59f4ec78c01be8" translate="yes" xml:space="preserve">
          <source>always show in columns</source>
          <target state="translated">列をなす</target>
        </trans-unit>
        <trans-unit id="b0c4ba6a734338f8b0a5e21fcbb05d3afcd198af" translate="yes" xml:space="preserve">
          <source>always shows the difference between the HEAD and the index file&amp;mdash;​this is what you&amp;rsquo;d commit if you created the commit now&amp;mdash;​and that</source>
          <target state="translated">HEADとインデックスファイルの違いを常に表示します。これは、今すぐコミットを作成した場合にコミットするものです。</target>
        </trans-unit>
        <trans-unit id="96e8155732e8324ae26f64d4516eb6fe696ac84f" translate="yes" xml:space="preserve">
          <source>am</source>
          <target state="translated">am</target>
        </trans-unit>
        <trans-unit id="400226a3b8758d7d662c424a478d16cceecd29ed" translate="yes" xml:space="preserve">
          <source>am.keepcr</source>
          <target state="translated">am.keepcr</target>
        </trans-unit>
        <trans-unit id="80b11664f9cdc0c4da5b2cf9cbae91e78f24cb5f" translate="yes" xml:space="preserve">
          <source>am.threeWay</source>
          <target state="translated">am.threeWay</target>
        </trans-unit>
        <trans-unit id="d9de89ed653daadc282d17fa341547ccd80f5e0c" translate="yes" xml:space="preserve">
          <source>amWorkDir</source>
          <target state="translated">amWorkDir</target>
        </trans-unit>
        <trans-unit id="b1cc99b811681fb579eeabe4a14a5e1ec1bab455" translate="yes" xml:space="preserve">
          <source>amend the previous commit, adding all your new changes, using your original message.</source>
          <target state="translated">前のコミットを修正し、元のメッセージを使って新しい変更点をすべて追加します。</target>
        </trans-unit>
        <trans-unit id="461152b367e8ab9740fb2e9ee2da4d7175e9e2a2" translate="yes" xml:space="preserve">
          <source>an LF or a NUL when &lt;code&gt;-z&lt;/code&gt; option is used, to terminate the record.</source>
          <target state="translated">&lt;code&gt;-z&lt;/code&gt; オプションを使用してレコードを終了する場合のLFまたはNUL 。</target>
        </trans-unit>
        <trans-unit id="75eada615f3da2b986734d58bb672366de760679" translate="yes" xml:space="preserve">
          <source>an author: The name of the person responsible for this change, together with its date.</source>
          <target state="translated">作成者。この変更の責任者の名前と日付。</target>
        </trans-unit>
        <trans-unit id="b441fe44ea3ab3bff759abb792c8a7f4c7974b0c" translate="yes" xml:space="preserve">
          <source>an entry in &lt;code&gt;BUILTIN_OBJECTS&lt;/code&gt; in the &lt;code&gt;Makefile&lt;/code&gt;.</source>
          <target state="translated">エントリ &lt;code&gt;BUILTIN_OBJECTS&lt;/code&gt; で &lt;code&gt;Makefile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d25597e1ded62863dd59e418a49b42af285a609" translate="yes" xml:space="preserve">
          <source>an entry in the &lt;code&gt;commands[]&lt;/code&gt; array in &lt;code&gt;git.c&lt;/code&gt;, and</source>
          <target state="translated">エントリ &lt;code&gt;commands[]&lt;/code&gt; の配列 &lt;code&gt;git.c&lt;/code&gt; 、及び</target>
        </trans-unit>
        <trans-unit id="5037f82b8aa7002eda9aed7d8c0898525bc2f00d" translate="yes" xml:space="preserve">
          <source>and Git will continue applying the rest of the patches.</source>
          <target state="translated">とGitが残りのパッチを適用し続けます。</target>
        </trans-unit>
        <trans-unit id="b3b2e45f7b37ac14dc28b61e29aee3c419229fda" translate="yes" xml:space="preserve">
          <source>and Git will create the commit for you and continue applying the remaining patches from the mailbox.</source>
          <target state="translated">とGitがコミットを作成し、メールボックスから残りのパッチを適用し続けます。</target>
        </trans-unit>
        <trans-unit id="7067f391e9f25da3da4a562c780b468101adb659" translate="yes" xml:space="preserve">
          <source>and Git will prompt you for a commit message and then create the new commit. Check to make sure it looks like what you expected with</source>
          <target state="translated">を実行すると、Git がコミットメッセージを要求してきて、新しいコミットが作成されます。で期待したものと同じように見えるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="11bda7867b55ea900931dbe2ab8c87a36a0443d9" translate="yes" xml:space="preserve">
          <source>and bundle topic branches still cooking.</source>
          <target state="translated">とバンドルトピックブランチはまだ調理中です。</target>
        </trans-unit>
        <trans-unit id="06675e26cc6f5bedf7b0e9b9d71e33fb64fa4ef8" translate="yes" xml:space="preserve">
          <source>and email them.</source>
          <target state="translated">とメールしてみてください。</target>
        </trans-unit>
        <trans-unit id="d5d63b233efdc161b2104f0e091d210beeb2fe60" translate="yes" xml:space="preserve">
          <source>and hack away. The equivalent of &lt;code&gt;cvs update&lt;/code&gt; is</source>
          <target state="translated">そしてハックアウェイ。 &lt;code&gt;cvs update&lt;/code&gt; に相当するものは</target>
        </trans-unit>
        <trans-unit id="d4b59596148297f0688711ac4f92721dbc18215b" translate="yes" xml:space="preserve">
          <source>and if it detects that the file &quot;file0&quot; is completely rewritten, it changes it to:</source>
          <target state="translated">で、「file0」というファイルが完全に書き換えられたことを検知したら、それを変更します。</target>
        </trans-unit>
        <trans-unit id="e1426704be98b9dd3d938c5a6a31b3fe4ee9a995" translate="yes" xml:space="preserve">
          <source>and in fact a lot of the common Git command combinations can be scripted with the &lt;code&gt;git xyz&lt;/code&gt; interfaces. You can learn things by just looking at what the various git scripts do. For example, &lt;code&gt;git reset&lt;/code&gt; used to be the above two lines implemented in &lt;code&gt;git reset&lt;/code&gt;, but some things like &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt; are slightly more complex scripts around the basic Git commands.</source>
          <target state="translated">実際、一般的なGitコマンドの組み合わせの多くは、 &lt;code&gt;git xyz&lt;/code&gt; インターフェースでスクリプト化できます。さまざまなgitスクリプトの機能を確認するだけで学習できます。たとえば、以前は &lt;code&gt;git reset&lt;/code&gt; が上記の2行で &lt;code&gt;git reset&lt;/code&gt; に実装されていましたが、 &lt;code&gt;git status&lt;/code&gt; や &lt;code&gt;git commit&lt;/code&gt; などは、基本的なGitコマンドの周りのスクリプトが少し複雑です。</target>
        </trans-unit>
        <trans-unit id="c2f880dab39040d1bcbb6d73323cfccc9f1141f6" translate="yes" xml:space="preserve">
          <source>and it is assumed unchanged.</source>
          <target state="translated">であり、変化しないと仮定しています。</target>
        </trans-unit>
        <trans-unit id="6fdb49363e42ba495e98dac786aceef7ea588734" translate="yes" xml:space="preserve">
          <source>and it will be gone. There&amp;rsquo;s no external repository, and there&amp;rsquo;s no history outside the project you created.</source>
          <target state="translated">そしてそれはなくなります。外部レポジトリはなく、作成したプロジェクト以外の履歴はありません。</target>
        </trans-unit>
        <trans-unit id="14be792a7fbd836c220980afe820c5835c201a25" translate="yes" xml:space="preserve">
          <source>and it would create the new branch &lt;code&gt;mybranch&lt;/code&gt; at the earlier commit, and check out the state at that time.</source>
          <target state="translated">以前のコミットで新しいブランチ &lt;code&gt;mybranch&lt;/code&gt; を作成し、その時の状態をチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="fb7e74a8bf932246eae1a7c59b5aab5d50647a84" translate="yes" xml:space="preserve">
          <source>and its path_info based equivalent</source>
          <target state="translated">と同等の path_info ベースの</target>
        </trans-unit>
        <trans-unit id="a6415488fda4ace1ca3739dceaaf3db60a5dafcb" translate="yes" xml:space="preserve">
          <source>and just looked for the sha of the missing object (4b9458b) in that whole thing. It&amp;rsquo;s up to you&amp;mdash;​Git does &lt;strong&gt;have&lt;/strong&gt; a lot of information, it is just missing one particular blob version.</source>
          <target state="translated">そして、その全体で欠落しているオブジェクト（4b9458b）のshaを探しました。それはないyou-がGitリポジトリまでだ&lt;strong&gt;持っている&lt;/strong&gt;、それだけで一つの特定のブロブのバージョンが欠落している、多くの情報を。</target>
        </trans-unit>
        <trans-unit id="eb603cb6e80c68fe39b18e84f04c311f5ab01061" translate="yes" xml:space="preserve">
          <source>and make the shared repository writable by the group.</source>
          <target state="translated">を作成し、共有リポジトリをグループから書き込み可能にします。</target>
        </trans-unit>
        <trans-unit id="40981e3225f4d7efce8a1f1ac883a144a32ed884" translate="yes" xml:space="preserve">
          <source>and once you&amp;rsquo;re happy with your manual merge, just do a</source>
          <target state="translated">手動でのマージに満足したら、ただ</target>
        </trans-unit>
        <trans-unit id="f6523905096e4cb79385536bede182fe1d21d437" translate="yes" xml:space="preserve">
          <source>and optionally give a branch-name for the remote end as a second argument.</source>
          <target state="translated">オプションでリモートエンドのブランチ名を第二引数に指定します。</target>
        </trans-unit>
        <trans-unit id="1f7c0eb7c2d3e76709e99a0799e2c00adb5d4360" translate="yes" xml:space="preserve">
          <source>and running &lt;code&gt;git config section.Subsection.key value2&lt;/code&gt; will result in</source>
          <target state="translated">そして &lt;code&gt;git config section.Subsection.key value2&lt;/code&gt; を実行すると、</target>
        </trans-unit>
        <trans-unit id="b8d13d365846b56f54fcde0e313df5ef17ad9601" translate="yes" xml:space="preserve">
          <source>and see two files:</source>
          <target state="translated">と2つのファイルを見る。</target>
        </trans-unit>
        <trans-unit id="1846440a645e968f28127df0e1b2bcc1010c9293" translate="yes" xml:space="preserve">
          <source>and that is what higher level &lt;code&gt;git merge -s resolve&lt;/code&gt; is implemented with.</source>
          <target state="translated">そして、それはより高いレベルの &lt;code&gt;git merge -s resolve&lt;/code&gt; が実装されているものです。</target>
        </trans-unit>
        <trans-unit id="dbbcc5be724df383b84cd8c32e02ab45353e6975" translate="yes" xml:space="preserve">
          <source>and the &quot;parent&quot; object refers to the previous commit:</source>
          <target state="translated">で、&quot;parent &quot;オブジェクトは前のコミットを参照します。</target>
        </trans-unit>
        <trans-unit id="4982e2ffe4444f7d8ccaa2ccbbc307cc4fa3f8c7" translate="yes" xml:space="preserve">
          <source>and the contents of the deleted file fileX is similar enough to the contents of the created file file0, then rename detection merges these filepairs and creates:</source>
          <target state="translated">であり、削除されたファイルfileXの内容が作成されたファイルfile0の内容と十分に類似している場合、リネーム検出はこれらのファイルペアをマージして作成します。</target>
        </trans-unit>
        <trans-unit id="3cf2f14796ecd3906febf042b64b0f6c0a0234bc" translate="yes" xml:space="preserve">
          <source>and the contents of these files is just the compressed data plus a header identifying their length and their type. The type is either a blob, a tree, a commit, or a tag.</source>
          <target state="translated">で、これらのファイルの内容は、圧縮されたデータと、その長さとタイプを識別するヘッダだけです。タイプは blob、tree、commit、tag のいずれかです。</target>
        </trans-unit>
        <trans-unit id="97b7ea8f565fdb4b8f72207a4543ec3a6beb2426" translate="yes" xml:space="preserve">
          <source>and the new object name to be stored in the ref.</source>
          <target state="translated">と ref に格納される新しいオブジェクト名を指定します。</target>
        </trans-unit>
        <trans-unit id="06596f8fbe14d561db35acf97529690afeae6531" translate="yes" xml:space="preserve">
          <source>and the result of &lt;code&gt;git merge-base A M&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;. Commit &lt;code&gt;2&lt;/code&gt; is also a common ancestor between &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;, but &lt;code&gt;1&lt;/code&gt; is a better common ancestor, because &lt;code&gt;2&lt;/code&gt; is an ancestor of &lt;code&gt;1&lt;/code&gt;. Hence, &lt;code&gt;2&lt;/code&gt; is not a merge base.</source>
          <target state="translated">&lt;code&gt;git merge-base A M&lt;/code&gt; の結果は &lt;code&gt;1&lt;/code&gt; です。コミット &lt;code&gt;2&lt;/code&gt; も &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;M&lt;/code&gt; の間の共通の祖先ですが、 &lt;code&gt;2&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; の祖先であるため、 &lt;code&gt;1&lt;/code&gt; の方がより一般的な祖先です。したがって、 &lt;code&gt;2&lt;/code&gt; はマージベースではありません。</target>
        </trans-unit>
        <trans-unit id="bf29b3f3be3e9d8f538aa9b7974f9c3a714fd3f2" translate="yes" xml:space="preserve">
          <source>and then annotate the change between the commit and its parents, using &lt;code&gt;commit^!&lt;/code&gt; notation:</source>
          <target state="translated">次に、 &lt;code&gt;commit^!&lt;/code&gt; を使用して、コミットとその親の間の変更に注釈を付けます。表記：</target>
        </trans-unit>
        <trans-unit id="3d8806f072cf60f02c7512a460d821442ce16fa0" translate="yes" xml:space="preserve">
          <source>and then giving the reason for the commit on stdin (either through redirection from a pipe or file, or by just typing it at the tty).</source>
          <target state="translated">そして、コミットの理由を標準入力で指定します (パイプやファイルからのリダイレクト、または tty で入力することで)。</target>
        </trans-unit>
        <trans-unit id="2fd91a322e9e060ddc98865e40de279b845a572c" translate="yes" xml:space="preserve">
          <source>and then he just cut-and-pastes the output commands after verifying that they look OK.</source>
          <target state="translated">そして、出力コマンドが問題なく見えることを確認した後、カットアンドペーストするだけです。</target>
        </trans-unit>
        <trans-unit id="b658ed87bd1868d8fc441785cf7c93c3c281001b" translate="yes" xml:space="preserve">
          <source>and then moving BFC after BBC and squashing it.</source>
          <target state="translated">で、BBCの後にBFCを移動させて潰す。</target>
        </trans-unit>
        <trans-unit id="339c37a1cbc67af9c8927014dc829b0049bb4b31" translate="yes" xml:space="preserve">
          <source>and then untar the new code in the working tree. Alternately you could &lt;code&gt;rsync&lt;/code&gt; the changes into the working tree.</source>
          <target state="translated">作業ツリーの新しいコードを解凍します。あるいは、変更を作業ツリーに &lt;code&gt;rsync&lt;/code&gt; することもできます。</target>
        </trans-unit>
        <trans-unit id="617666725e1b9f6239b44390652378dd9926ce18" translate="yes" xml:space="preserve">
          <source>and these are evaluated in this order.</source>
          <target state="translated">と、これらを順に評価していきます。</target>
        </trans-unit>
        <trans-unit id="9adeb030984d30c37dccabf36290b3a5065c7248" translate="yes" xml:space="preserve">
          <source>and they&amp;rsquo;ll be gone. (You should only run &lt;code&gt;git prune&lt;/code&gt; on a quiescent repository&amp;mdash;​it&amp;rsquo;s kind of like doing a filesystem fsck recovery: you don&amp;rsquo;t want to do that while the filesystem is mounted. &lt;code&gt;git prune&lt;/code&gt; is designed not to cause any harm in such cases of concurrent accesses to a repository but you might receive confusing or scary messages.)</source>
          <target state="translated">そして、彼らは消えてしまいます。（ &lt;code&gt;git prune&lt;/code&gt; は静止リポジトリでのみ実行する必要があります。これは、ファイルシステムのfsckリカバリを実行するようなものです：ファイルシステムがマウントされている間は実行したくないのです &lt;code&gt;git prune&lt;/code&gt; は、このような場合に害を及ぼさないように設計されていますリポジトリへの同時アクセス。ただし、混乱または恐ろしいメッセージが表示される場合があります。）</target>
        </trans-unit>
        <trans-unit id="cd197c11bb84be1a5bb09ba9b42e3b50427dcfec" translate="yes" xml:space="preserve">
          <source>and this will just output the name of the resulting tree, in this case (if you have done exactly as I&amp;rsquo;ve described) it should be</source>
          <target state="translated">そして、これは結果のツリーの名前を出力するだけです。この場合（私が説明したとおりに実行した場合）、それは</target>
        </trans-unit>
        <trans-unit id="b1af0fa00d023b5f61dc1f79856e5725ea01dd35" translate="yes" xml:space="preserve">
          <source>and thus it is really quite easy to parse for some line- and word-oriented parser (which should be quite natural for most scripting languages).</source>
          <target state="translated">このように、行や単語指向のパーサでは非常に簡単にパースできます (ほとんどのスクリプト言語では自然なことです)。</target>
        </trans-unit>
        <trans-unit id="66cee198375e167a1653a383c43e2bb725e3ca7a" translate="yes" xml:space="preserve">
          <source>and use the &quot;linus&quot; keyword with &lt;code&gt;git pull&lt;/code&gt; instead of the full URL.</source>
          <target state="translated">完全なURLの代わりに &lt;code&gt;git pull&lt;/code&gt; で「linus」キーワードを使用します。</target>
        </trans-unit>
        <trans-unit id="d296b286b6d11f02bc95ddc0eea6f99abc87487a" translate="yes" xml:space="preserve">
          <source>and you can now, since you told Git about the previous state of &lt;code&gt;hello&lt;/code&gt;, ask Git what has changed in the tree compared to your old index, using the &lt;code&gt;git diff-files&lt;/code&gt; command:</source>
          <target state="translated">Gitに以前の &lt;code&gt;hello&lt;/code&gt; の状態を伝えたので、 &lt;code&gt;git diff-files&lt;/code&gt; コマンドを使用して、古いインデックスと比較してツリーで何が変更されたかをGitに尋ねます。</target>
        </trans-unit>
        <trans-unit id="c22810b9d38d8e650ac736b5ccfb992ea7f0787f" translate="yes" xml:space="preserve">
          <source>and you have now told Git to track those two files.</source>
          <target state="translated">そして、あなたはこの二つのファイルを追跡するように Git に指示しました。</target>
        </trans-unit>
        <trans-unit id="7078b738b08f05f21971cffe5f9577bcab9aaf44" translate="yes" xml:space="preserve">
          <source>and you will end up with an index with all of the &amp;lt;tree1&amp;gt; entries in &quot;stage1&quot;, all of the &amp;lt;tree2&amp;gt; entries in &quot;stage2&quot; and all of the &amp;lt;tree3&amp;gt; entries in &quot;stage3&quot;. When performing a merge of another branch into the current branch, we use the common ancestor tree as &amp;lt;tree1&amp;gt;, the current branch head as &amp;lt;tree2&amp;gt;, and the other branch head as &amp;lt;tree3&amp;gt;.</source>
          <target state="translated">そして、「stage1」のすべての&amp;lt;tree1&amp;gt;エントリ、「stage2」のすべての&amp;lt;tree2&amp;gt;エントリ、および「stage3」のすべての&amp;lt;tree3&amp;gt;エントリを含むインデックスが作成されます。別のブランチを現在のブランチにマージする場合、共通の祖先ツリーを&amp;lt;tree1&amp;gt;、現在のブランチヘッドを&amp;lt;tree2&amp;gt;、他のブランチヘッドを&amp;lt;tree3&amp;gt;として使用します。</target>
        </trans-unit>
        <trans-unit id="17b48e857b44d8864349e98c537796214a8362f4" translate="yes" xml:space="preserve">
          <source>and your index file will now be equivalent to the tree that you saved earlier. However, that is only your 'index' file: your working directory contents have not been modified.</source>
          <target state="translated">をクリックすると、インデックスファイルは以前に保存したツリーと同等のものになります。しかし、これは 'index' ファイルだけです。</target>
        </trans-unit>
        <trans-unit id="9f158fb3a1f2423d0104e077166f5b26c8204522" translate="yes" xml:space="preserve">
          <source>and your index file will now be equivalent to the tree that you saved earlier. However, that is only your &lt;code&gt;index&lt;/code&gt; file: your working directory contents have not been modified.</source>
          <target state="translated">これで、インデックスファイルは以前に保存したツリーと同等になります。ただし、これは &lt;code&gt;index&lt;/code&gt; ファイルのみです。作業ディレクトリの内容は変更されていません。</target>
        </trans-unit>
        <trans-unit id="f7df7a4e50a38db45b495588bed9a4abd67c32fe" translate="yes" xml:space="preserve">
          <source>and your repository is good again!</source>
          <target state="translated">そして、あなたのリポジトリは再び良いです</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="86c8af583af4d12d1e63765efb1b3cf2c23eb581" translate="yes" xml:space="preserve">
          <source>any external helpers are named by their protocol (e.g., use &lt;code&gt;hg&lt;/code&gt; to allow the &lt;code&gt;git-remote-hg&lt;/code&gt; helper)</source>
          <target state="translated">すべての外部ヘルパーは、そのプロトコルによって名前が付けられています（たとえば、 &lt;code&gt;git-remote-hg&lt;/code&gt; ヘルパーを許可するには &lt;code&gt;hg&lt;/code&gt; を使用します）</target>
        </trans-unit>
        <trans-unit id="8fe566b6d0fcd9f8f079b9cbd5dff1c192d0bda1" translate="yes" xml:space="preserve">
          <source>any path matches itself</source>
          <target state="translated">どのパスもそれ自身に一致する</target>
        </trans-unit>
        <trans-unit id="951f5c774520ac2d893d49506bb03ddb31fc70a0" translate="yes" xml:space="preserve">
          <source>api index</source>
          <target state="translated">アピインデックス</target>
        </trans-unit>
        <trans-unit id="1ac3324252e6efe491b8f90f3588d4cd0cfc38d7" translate="yes" xml:space="preserve">
          <source>api trace2</source>
          <target state="translated">エーピーアイトレースツー</target>
        </trans-unit>
        <trans-unit id="37f7547fef4fd60a7d07405e2e68e608cab796d3" translate="yes" xml:space="preserve">
          <source>api-trace2</source>
          <target state="translated">api-trace2</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="69f45da1683c501696ebfa086d25192af3807dc6" translate="yes" xml:space="preserve">
          <source>apply</source>
          <target state="translated">apply</target>
        </trans-unit>
        <trans-unit id="0c2fcb1d034ab205423e1d7ec6d29da9bf89a06b" translate="yes" xml:space="preserve">
          <source>apply [--index] [-q|--quiet] [&amp;lt;stash&amp;gt;]</source>
          <target state="translated">適用[--index] [-q | --quiet] [&amp;lt;stash&amp;gt;]</target>
        </trans-unit>
        <trans-unit id="41e3e8c05614ede7d2046024aa32acb852d9e90a" translate="yes" xml:space="preserve">
          <source>apply backend: When applying a patch, ignore changes in whitespace in context lines. Unfortunately, this means that if the &quot;old&quot; lines being replaced by the patch differ only in whitespace from the existing file, you will get a merge conflict instead of a successful patch application.</source>
          <target state="translated">を適用します。パッチを適用する際には、コンテキスト行の空白の変更を無視します。残念なことに、パッチによって置き換えられる &quot;古い &quot;行が既存のファイルとホワイトスペースが異なるだけで、パッチの適用が成功する代わりにマージの競合が発生することを意味します。</target>
        </trans-unit>
        <trans-unit id="03c563ce0a13a71f68c4323807b8df4dc3dd3653" translate="yes" xml:space="preserve">
          <source>apply the change that would be shown by &lt;code&gt;git show topic^&lt;/code&gt;. In this example, the patch does not apply cleanly, so information about the conflict is written to the index and working tree and no new commit results.</source>
          <target state="translated">&lt;code&gt;git show topic^&lt;/code&gt; 表示される変更を適用します。この例では、パッチは正しく適用されないため、競合に関する情報がインデックスと作業ツリーに書き込まれ、新しいコミット結果はありません。</target>
        </trans-unit>
        <trans-unit id="07666f4e66bd4bf8ab64d3029da991c3b016c0f9" translate="yes" xml:space="preserve">
          <source>apply them, interactively, with your sign-offs.</source>
          <target state="translated">サインオフを使って、対話的に適用してください。</target>
        </trans-unit>
        <trans-unit id="c778c31b66fdb0077c39c1643484bc80e939a6ef" translate="yes" xml:space="preserve">
          <source>apply.ignoreWhitespace</source>
          <target state="translated">apply.ignoreWhitespace</target>
        </trans-unit>
        <trans-unit id="3828727a8ed2b41298eb944c27d30c630bbaecf8" translate="yes" xml:space="preserve">
          <source>apply.whitespace</source>
          <target state="translated">apply.whitespace</target>
        </trans-unit>
        <trans-unit id="e90a34fe73108d3def10c8aa75dd41cf4b8df564" translate="yes" xml:space="preserve">
          <source>applypatch-msg</source>
          <target state="translated">applypatch-msg</target>
        </trans-unit>
        <trans-unit id="6edf8749a5d3dba0628223b6880e8abfb4f10d76" translate="yes" xml:space="preserve">
          <source>araxis</source>
          <target state="translated">araxis</target>
        </trans-unit>
        <trans-unit id="8c4f0e515d3499448f3629d033cf224f688edc27" translate="yes" xml:space="preserve">
          <source>arbitrary shell command that takes a single argument (the sha1 of the commit recorded in the superproject) is executed. When &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; is set to &lt;code&gt;!command&lt;/code&gt;, the remainder after the exclamation mark is the custom command.</source>
          <target state="translated">単一の引数（スーパープロジェクトに記録されたコミットのsha1）を取る任意のシェルコマンドが実行されます。とき &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; に設定されている &lt;code&gt;!command&lt;/code&gt; 、感嘆符の後に残りの部分は、カスタムコマンドです。</target>
        </trans-unit>
        <trans-unit id="ebfb55f4432b592119a10592e4f26272cc72359e" translate="yes" xml:space="preserve">
          <source>archive</source>
          <target state="translated">archive</target>
        </trans-unit>
        <trans-unit id="02ffa0b70f36225abe68ab3c5392918d20ddbb24" translate="yes" xml:space="preserve">
          <source>are files GIT_EXTERNAL_DIFF can use to read the contents of &amp;lt;old|new&amp;gt;,</source>
          <target state="translated">GIT_EXTERNAL_DIFFが&amp;lt;old | new&amp;gt;の内容を読み取るために使用できるファイルです。</target>
        </trans-unit>
        <trans-unit id="f04207e23f9202de330ee8bdec5f2a1b205be329" translate="yes" xml:space="preserve">
          <source>are incompatible with the following options:</source>
          <target state="translated">は以下のオプションと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="bf5659661ce871a6788ee6b1bec9770f7f549075" translate="yes" xml:space="preserve">
          <source>are roughly equivalent.</source>
          <target state="translated">はほぼ等価です。</target>
        </trans-unit>
        <trans-unit id="bfc0acfc5f4a94969ee2f529469c80db6f5db191" translate="yes" xml:space="preserve">
          <source>are the 40-hexdigit SHA-1 hashes,</source>
          <target state="translated">は40桁のSHA-1ハッシュです。</target>
        </trans-unit>
        <trans-unit id="377a5f0a9c724f4b4e656d090beb28e896803b78" translate="yes" xml:space="preserve">
          <source>are the octal representation of the file modes.</source>
          <target state="translated">はファイルモードの8進数表現です。</target>
        </trans-unit>
        <trans-unit id="536f158f6dfd529865dcb865a97bb16804e34d70" translate="yes" xml:space="preserve">
          <source>arguments</source>
          <target state="translated">arguments</target>
        </trans-unit>
        <trans-unit id="d73d25bb51bc0192ff2858618720527615dee66a" translate="yes" xml:space="preserve">
          <source>arrange &lt;code&gt;git push&lt;/code&gt; to push all local branches to their corresponding branch of the mothership machine.</source>
          <target state="translated">&lt;code&gt;git push&lt;/code&gt; を調整して、すべてのローカルブランチをマザーシップマシンの対応するブランチにプッシュします。</target>
        </trans-unit>
        <trans-unit id="7dc74bb7dc6b2238e853c884d0d310e31daffb87" translate="yes" xml:space="preserve">
          <source>as long as the shared repository does not have any branches other than &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">共有リポジトリに &lt;code&gt;master&lt;/code&gt; 以外のブランチがない限り。</target>
        </trans-unit>
        <trans-unit id="cb2841c784dffc3f3e69b38c87cb3ad64f719624" translate="yes" xml:space="preserve">
          <source>as they are probably more user specific than repository specific. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for more information about this.</source>
          <target state="translated">おそらくリポジトリ固有ではなくユーザー固有であるためです。詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec09624f8bf140a91e574552f4201e093095f93f" translate="yes" xml:space="preserve">
          <source>ask each</source>
          <target state="translated">訊き合う</target>
        </trans-unit>
        <trans-unit id="a4da794aacaf85856a7722c9d864566d302089fc" translate="yes" xml:space="preserve">
          <source>at this point the two branches have diverged, with different changes made in each. To merge the changes made in experimental into master, run</source>
          <target state="translated">この時点で二つのブランチは分岐しており、それぞれに異なる変更が加えられています。experimental で行った変更を master にマージするには、次のように実行します。</target>
        </trans-unit>
        <trans-unit id="56cb56551e60df919190b545acc4efd3487df2da" translate="yes" xml:space="preserve">
          <source>at-open-brace &lt;code&gt;@{&lt;/code&gt; is used as a notation to access a reflog entry.</source>
          <target state="translated">at-open-brace &lt;code&gt;@{&lt;/code&gt; は、reflogエントリにアクセスするための表記として使用されます。</target>
        </trans-unit>
        <trans-unit id="c6f57180e462a4f1e9de24fbe811cfb2c24a0cf9" translate="yes" xml:space="preserve">
          <source>atom</source>
          <target state="translated">atom</target>
        </trans-unit>
        <trans-unit id="fc88c6b3cc380853de27e44642207df9743ff63d" translate="yes" xml:space="preserve">
          <source>attr</source>
          <target state="translated">attr</target>
        </trans-unit>
        <trans-unit id="c0357eb71b4a8821fe200d8b8eb01baef86fac5a" translate="yes" xml:space="preserve">
          <source>author date (format respects --date= option)</source>
          <target state="translated">著者の日付 (書式は --date=オプションを尊重します)</target>
        </trans-unit>
        <trans-unit id="2a06a73ff8fc368a2739a3e178ba7f2389794fbb" translate="yes" xml:space="preserve">
          <source>author date, ISO 8601-like format</source>
          <target state="translated">著者日付、ISO 8601のような形式</target>
        </trans-unit>
        <trans-unit id="242b07f5f5075eaa7fd5b51606a9b4162ff6c885" translate="yes" xml:space="preserve">
          <source>author date, RFC2822 style</source>
          <target state="translated">作者の日付、RFC2822スタイル</target>
        </trans-unit>
        <trans-unit id="203f076a8dfae351b5cbfcddc2f39e2529b4ab40" translate="yes" xml:space="preserve">
          <source>author date, UNIX timestamp</source>
          <target state="translated">作者の日付、UNIXタイムスタンプ</target>
        </trans-unit>
        <trans-unit id="5b659229f527fa360f4003ca474cb9646e5df53b" translate="yes" xml:space="preserve">
          <source>author date, relative</source>
          <target state="translated">著者の日付、相対的な</target>
        </trans-unit>
        <trans-unit id="d04a676256ca4278418fc83a6c6099b60b59d9c4" translate="yes" xml:space="preserve">
          <source>author date, short format (&lt;code&gt;YYYY-MM-DD&lt;/code&gt;)</source>
          <target state="translated">作成者の日付、短い形式（ &lt;code&gt;YYYY-MM-DD&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ca050c864ebffd969007968bf223faf21875eae7" translate="yes" xml:space="preserve">
          <source>author date, strict ISO 8601 format</source>
          <target state="translated">著者の日付、厳格なISO 8601形式</target>
        </trans-unit>
        <trans-unit id="7ddbfb879a548122c7fc198acb1c1b2f4c9b9921" translate="yes" xml:space="preserve">
          <source>author email</source>
          <target state="translated">オーサーメール</target>
        </trans-unit>
        <trans-unit id="8edafcfb5bfb68f54b13aeb0dafbb6187a753701" translate="yes" xml:space="preserve">
          <source>author email (respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">著者のメール（.mailmapを尊重して、&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="83daf4aca33631f2eb4acd6a25a656b0af3f5ee2" translate="yes" xml:space="preserve">
          <source>author email local-part (the part before the &lt;code&gt;@&lt;/code&gt; sign)</source>
          <target state="translated">作成者のメールのローカル部分（ &lt;code&gt;@&lt;/code&gt; 記号の前の部分）</target>
        </trans-unit>
        <trans-unit id="5d4130a7bcbeec5d4a298b1e471f17266d9c3b2a" translate="yes" xml:space="preserve">
          <source>author local-part (see &lt;code&gt;%al&lt;/code&gt;) respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">.mailmapを尊重する作者local-part（ &lt;code&gt;%al&lt;/code&gt; を参照）、&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="a38923d0b44faf2fd760ba1064fa8cccf3161910" translate="yes" xml:space="preserve">
          <source>author local-part (see &lt;code&gt;%cl&lt;/code&gt;) respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">.mailmapを尊重する作者local-part（ &lt;code&gt;%cl&lt;/code&gt; を参照）、&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="c377e3db13b17a5dec490aa3f6ac58e35bd02ae8" translate="yes" xml:space="preserve">
          <source>author name</source>
          <target state="translated">作者名</target>
        </trans-unit>
        <trans-unit id="bd2cf54c8d8427c36e72436dee6f5edfa55f4e21" translate="yes" xml:space="preserve">
          <source>author name (respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">著者名（.mailmapを尊重して、&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="aa42d4b548d53eeb1e514e0662eb0b64c3782193" translate="yes" xml:space="preserve">
          <source>author name, email and date</source>
          <target state="translated">著者名、メールアドレス、日付</target>
        </trans-unit>
        <trans-unit id="d00ed3c485ca1a6ad6088b1642369eb27039d0b8" translate="yes" xml:space="preserve">
          <source>author.email</source>
          <target state="translated">author.email</target>
        </trans-unit>
        <trans-unit id="290b3c3f6920221191e3db343ad6fbf3a2f939e8" translate="yes" xml:space="preserve">
          <source>author.name</source>
          <target state="translated">author.name</target>
        </trans-unit>
        <trans-unit id="9c3bb49ffea1144231cbe02d904b8d9018744e9d" translate="yes" xml:space="preserve">
          <source>avatar</source>
          <target state="translated">avatar</target>
        </trans-unit>
        <trans-unit id="0bb01d8924d6b902321a6c09d5c0a45ab1342655" translate="yes" xml:space="preserve">
          <source>b) independent fixup</source>
          <target state="translated">b)独立した固定</target>
        </trans-unit>
        <trans-unit id="aeca33ec4bf9a7bd6b90cc303f5a8ac32af312c1" translate="yes" xml:space="preserve">
          <source>backport a critical fix.</source>
          <target state="translated">重要な修正をバックポートしました。</target>
        </trans-unit>
        <trans-unit id="fe676f1ea27d4114d62d0b88a9999860d1c162c1" translate="yes" xml:space="preserve">
          <source>bare repository</source>
          <target state="translated">ベアリポジトリ</target>
        </trans-unit>
        <trans-unit id="e95c0d71e5a737bfc209f7013e45e233a7480a96" translate="yes" xml:space="preserve">
          <source>base-name</source>
          <target state="translated">base-name</target>
        </trans-unit>
        <trans-unit id="5b2505039ac5af9e197f5dad04113906a9cf9a2a" translate="yes" xml:space="preserve">
          <source>bc</source>
          <target state="translated">bc</target>
        </trans-unit>
        <trans-unit id="3c2369c6416caa1993808240594282dd4fcb95c1" translate="yes" xml:space="preserve">
          <source>bc3</source>
          <target state="translated">bc3</target>
        </trans-unit>
        <trans-unit id="b7c7d5d4b182d06d7f89fcb3d277474733c67444" translate="yes" xml:space="preserve">
          <source>be quiet if files exist or are not in the index</source>
          <target state="translated">ファイルが存在するか、インデックスにない場合は静かにする</target>
        </trans-unit>
        <trans-unit id="bfa1cf02635b780783c9853aaca57e1c719e79ad" translate="yes" xml:space="preserve">
          <source>because the hostnames differ. Nor would it match &lt;code&gt;foo.example.com&lt;/code&gt;; Git compares hostnames exactly, without considering whether two hosts are part of the same domain. Likewise, a config entry for &lt;code&gt;http://example.com&lt;/code&gt; would not match: Git compares the protocols exactly.</source>
          <target state="translated">ホスト名が異なるためです。 &lt;code&gt;foo.example.com&lt;/code&gt; にも一致しません。Gitは、2つのホストが同じドメインに属しているかどうかを考慮せずに、ホスト名を正確に比較します。同様に、 &lt;code&gt;http://example.com&lt;/code&gt; ：//example.comの構成エントリは一致しません。Gitはプロトコルを正確に比較します。</target>
        </trans-unit>
        <trans-unit id="bd766456dd7d080025c5f2a3029a29c2bb5419ef" translate="yes" xml:space="preserve">
          <source>because the hostnames differ. Nor would it match &lt;code&gt;foo.example.com&lt;/code&gt;; Git compares hostnames exactly, without considering whether two hosts are part of the same domain. Likewise, a config entry for &lt;code&gt;http://example.com&lt;/code&gt; would not match: Git compares the protocols exactly. However, you may use wildcards in the domain name and other pattern matching techniques as with the &lt;code&gt;http.&amp;lt;url&amp;gt;.*&lt;/code&gt; options.</source>
          <target state="translated">ホスト名が異なるためです。また、 &lt;code&gt;foo.example.com&lt;/code&gt; とも一致しません。Gitは、2つのホストが同じドメインの一部であるかどうかを考慮せずに、ホスト名を正確に比較します。同様に、 &lt;code&gt;http://example.com&lt;/code&gt; ：//example.comの構成エントリは一致しません。Gitはプロトコルを正確に比較します。ただし、 &lt;code&gt;http.&amp;lt;url&amp;gt;.*&lt;/code&gt; オプションと同様に、ドメイン名やその他のパタ​​ーンマッチング手法でワイルドカードを使用できます。</target>
        </trans-unit>
        <trans-unit id="c02ceb78ff4863ee1a75d232c4f53af56b182ec9" translate="yes" xml:space="preserve">
          <source>becomes:</source>
          <target state="translated">becomes:</target>
        </trans-unit>
        <trans-unit id="7e57cfe843145135aee1f4d0d63ceb7842093712" translate="yes" xml:space="preserve">
          <source>binary</source>
          <target state="translated">binary</target>
        </trans-unit>
        <trans-unit id="fc5afa849d013727d8acf30682a03a891f7aca7e" translate="yes" xml:space="preserve">
          <source>bisect</source>
          <target state="translated">bisect</target>
        </trans-unit>
        <trans-unit id="e04a67a1c220ec3759550df9a963521323148d66" translate="yes" xml:space="preserve">
          <source>blame</source>
          <target state="translated">blame</target>
        </trans-unit>
        <trans-unit id="72092ff956b5b07bf4d598501177651a9897b3f1" translate="yes" xml:space="preserve">
          <source>blame.blankBoundary</source>
          <target state="translated">blame.blankBoundary</target>
        </trans-unit>
        <trans-unit id="2862b4a0ea76b67385f8581e3bd4cf75e32e65d0" translate="yes" xml:space="preserve">
          <source>blame.coloring</source>
          <target state="translated">blame.coloring</target>
        </trans-unit>
        <trans-unit id="c55af0af464fc28e395cedf375c27ed38ea08dd7" translate="yes" xml:space="preserve">
          <source>blame.date</source>
          <target state="translated">blame.date</target>
        </trans-unit>
        <trans-unit id="574525f7353221a33787a1a7d1232b7faf51b9bb" translate="yes" xml:space="preserve">
          <source>blame.ignoreRevsFile</source>
          <target state="translated">blame.ignoreRevsFile</target>
        </trans-unit>
        <trans-unit id="8d9e3a327869e356dde043a93aea128672ec4a32" translate="yes" xml:space="preserve">
          <source>blame.markIgnoredLines</source>
          <target state="translated">blame.markIgnoredLines</target>
        </trans-unit>
        <trans-unit id="96c64bfbb0487dbb1fe121cc068a07b1b6f2001d" translate="yes" xml:space="preserve">
          <source>blame.markUnblamables</source>
          <target state="translated">blame.markUnblamables</target>
        </trans-unit>
        <trans-unit id="244ba240ca074db6d0f0d4bb8de34505a6383151" translate="yes" xml:space="preserve">
          <source>blame.showEmail</source>
          <target state="translated">blame.showEmail</target>
        </trans-unit>
        <trans-unit id="f2560ddc149bc689a9eb1559b1e046e4885feda7" translate="yes" xml:space="preserve">
          <source>blame.showRoot</source>
          <target state="translated">blame.showRoot</target>
        </trans-unit>
        <trans-unit id="3bc20f9fcb1740f5d09c92cd6bf8bd32d164c6ae" translate="yes" xml:space="preserve">
          <source>blame_incremental</source>
          <target state="translated">blame_incremental</target>
        </trans-unit>
        <trans-unit id="0fd0bcfb44f83e7d5ac7a8922578276b9af48746" translate="yes" xml:space="preserve">
          <source>blob</source>
          <target state="translated">blob</target>
        </trans-unit>
        <trans-unit id="815675cd53e5196255182a0fd392e03df0fcd193" translate="yes" xml:space="preserve">
          <source>blob object</source>
          <target state="translated">ブロブオブジェクト</target>
        </trans-unit>
        <trans-unit id="751eae742e521df559ef7ed559fa3259d5b09b0d" translate="yes" xml:space="preserve">
          <source>blob_plain</source>
          <target state="translated">blob_plain</target>
        </trans-unit>
        <trans-unit id="c06f874d67ebcdd1994d59e3867ceb303b9b6698" translate="yes" xml:space="preserve">
          <source>blobdiff</source>
          <target state="translated">blobdiff</target>
        </trans-unit>
        <trans-unit id="f7d5b2b95861daea9933ef0a243f733bbc79235e" translate="yes" xml:space="preserve">
          <source>blocks</source>
          <target state="translated">blocks</target>
        </trans-unit>
        <trans-unit id="02083f4579e08a612425c0c1a17ee47add783b94" translate="yes" xml:space="preserve">
          <source>body</source>
          <target state="translated">body</target>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="f6edb368393f0758009b3afd170f648a63e11385" translate="yes" xml:space="preserve">
          <source>both &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are merge-bases of A and B. Neither one is better than the other (both are &lt;code&gt;best&lt;/code&gt; merge bases). When the &lt;code&gt;--all&lt;/code&gt; option is not given, it is unspecified which best one is output.</source>
          <target state="translated">両方の &lt;code&gt;1&lt;/code&gt; および &lt;code&gt;2&lt;/code&gt; は、 AとBのマージ塩基でないどちらもが（両方が他方より優れている &lt;code&gt;best&lt;/code&gt; のマージ塩基）。 &lt;code&gt;--all&lt;/code&gt; オプションが指定されていない場合、どの最良のものが出力されるかは指定されていません。</target>
        </trans-unit>
        <trans-unit id="ab885ad5b5ecb443f904caddcf71de38ec2ad4fc" translate="yes" xml:space="preserve">
          <source>both from a symlink following standpoint &lt;strong&gt;and&lt;/strong&gt; an error checking standpoint. The &quot;refs/&quot; rule for symlinks means that symlinks that point to &quot;outside&quot; the tree are safe: they&amp;rsquo;ll be followed for reading but not for writing (so we&amp;rsquo;ll never write through a ref symlink to some other tree, if you have copied a whole archive by creating a symlink tree).</source>
          <target state="translated">シンボリックリンクの観点&lt;strong&gt;と&lt;/strong&gt;エラーチェックの観点の両方から。シンボリックリンクの「refs /」ルールは、ツリーの「外側」を指すシンボリックリンクが安全であることを意味します。それらは読み取りでは追跡されますが、書き込みでは追跡されません（したがって、他のツリーへのrefシンボリックリンクを介して書き込むことはありません。シンボリックリンクツリーを作成してアーカイブ全体をコピーしました）。</target>
        </trans-unit>
        <trans-unit id="10d735e581f1e2505cd69675691925490e447c44" translate="yes" xml:space="preserve">
          <source>branch</source>
          <target state="translated">branch</target>
        </trans-unit>
        <trans-unit id="d9ebdce6e5eb5490d2736b1657cb3bbdff2a24c8" translate="yes" xml:space="preserve">
          <source>branch &amp;lt;branchname&amp;gt; [&amp;lt;stash&amp;gt;]</source>
          <target state="translated">ブランチ&amp;lt;branchname&amp;gt; [&amp;lt;stash&amp;gt;]</target>
        </trans-unit>
        <trans-unit id="4d89d47c3496bed1c997cfd4749bbb345956b062" translate="yes" xml:space="preserve">
          <source>branch name: refers to the commit at the head of the given branch</source>
          <target state="translated">ブランチ名:指定したブランチの先頭のコミットを指します。</target>
        </trans-unit>
        <trans-unit id="7cf9cb4f1f0d11974da193a921ad56188af0dbfb" translate="yes" xml:space="preserve">
          <source>branch.&amp;lt;name&amp;gt;.description</source>
          <target state="translated">branch.&amp;lt;name&amp;gt;.description</target>
        </trans-unit>
        <trans-unit id="c972b8f442dc56f76ff5821861f38f9df9f740a2" translate="yes" xml:space="preserve">
          <source>branch.&amp;lt;name&amp;gt;.merge</source>
          <target state="translated">branch.&amp;lt;name&amp;gt;.merge</target>
        </trans-unit>
        <trans-unit id="12b705785a619a7af3091b413cd10bc5f913cd36" translate="yes" xml:space="preserve">
          <source>branch.&amp;lt;name&amp;gt;.mergeOptions</source>
          <target state="translated">branch.&amp;lt;name&amp;gt;.mergeOptions</target>
        </trans-unit>
        <trans-unit id="e3044fee5f265c567fa94779be6a4b05485a2ef5" translate="yes" xml:space="preserve">
          <source>branch.&amp;lt;name&amp;gt;.pushRemote</source>
          <target state="translated">branch.&amp;lt;name&amp;gt;.pushRemote</target>
        </trans-unit>
        <trans-unit id="089608ebf4ab438938386db74054dd0539e68174" translate="yes" xml:space="preserve">
          <source>branch.&amp;lt;name&amp;gt;.rebase</source>
          <target state="translated">branch.&amp;lt;name&amp;gt;.rebase</target>
        </trans-unit>
        <trans-unit id="ae2da89c53e9406d5454991c9de79d2701626513" translate="yes" xml:space="preserve">
          <source>branch.&amp;lt;name&amp;gt;.remote</source>
          <target state="translated">branch.&amp;lt;name&amp;gt;.remote</target>
        </trans-unit>
        <trans-unit id="c1beb4d53b0941d5b69587d5619ae40af0e82fb0" translate="yes" xml:space="preserve">
          <source>branch.autoSetupMerge</source>
          <target state="translated">branch.autoSetupMerge</target>
        </trans-unit>
        <trans-unit id="a348d9eb171112632f68ea4fa0280f35b7af36d9" translate="yes" xml:space="preserve">
          <source>branch.autoSetupRebase</source>
          <target state="translated">branch.autoSetupRebase</target>
        </trans-unit>
        <trans-unit id="c4907ecf78c64eedfc547e343a00efb0d648c80c" translate="yes" xml:space="preserve">
          <source>branch.sort</source>
          <target state="translated">branch.sort</target>
        </trans-unit>
        <trans-unit id="52a9ce4a0d3c21f1c0c5dc576930fbb59ad74018" translate="yes" xml:space="preserve">
          <source>branches</source>
          <target state="translated">branches</target>
        </trans-unit>
        <trans-unit id="ef98362b8a6b0c8cd804b0d227aa1ffeaba89786" translate="yes" xml:space="preserve">
          <source>browser</source>
          <target state="translated">browser</target>
        </trans-unit>
        <trans-unit id="d7b49d5666ac0fe3243cf929f3fbea5d40512cc5" translate="yes" xml:space="preserve">
          <source>browser.&amp;lt;tool&amp;gt;.cmd</source>
          <target state="translated">browser.&amp;lt;tool&amp;gt;.cmd</target>
        </trans-unit>
        <trans-unit id="1afa7a8068dc2826b24730832089e6b8ae806f4d" translate="yes" xml:space="preserve">
          <source>browser.&amp;lt;tool&amp;gt;.path</source>
          <target state="translated">browser.&amp;lt;tool&amp;gt;.path</target>
        </trans-unit>
        <trans-unit id="ce3731defbdc7875cff0c020e900192d6b65542c" translate="yes" xml:space="preserve">
          <source>bugreport</source>
          <target state="translated">bugreport</target>
        </trans-unit>
        <trans-unit id="26a194e96e2873f688a8836d3ee9bd5e7be08547" translate="yes" xml:space="preserve">
          <source>built-in values (some set during build stage),</source>
          <target state="translated">ビルトイン値(ビルド段階で設定されたものもあります)。</target>
        </trans-unit>
        <trans-unit id="7581496de8d7f905da83e60fe5216caab582c109" translate="yes" xml:space="preserve">
          <source>bumping format version numbers of individual data files (e.g., index, packfiles, etc). This restricts the incompatibilities only to those files.</source>
          <target state="translated">個々のデータファイル (インデックスやパックファイルなど)のフォーマットのバージョン番号をバンプします。これにより、非互換性があるのはそれらのファイルのみに制限されます。</target>
        </trans-unit>
        <trans-unit id="d59795de8a4d83834e525b589b2bb0c12e4542c1" translate="yes" xml:space="preserve">
          <source>bundle</source>
          <target state="translated">bundle</target>
        </trans-unit>
        <trans-unit id="c8bebbf42f3ec7d29b62f6981d42b56fa9e07016" translate="yes" xml:space="preserve">
          <source>but can be used to amend a merge commit.</source>
          <target state="translated">を使用してマージコミットを修正することができます。</target>
        </trans-unit>
        <trans-unit id="e0e9a8eb5c66f16a9e8325bbfe07678355605d3b" translate="yes" xml:space="preserve">
          <source>but if $REV is empty, the commit object name from master will be printed.</source>
          <target state="translated">しかし、$REVが空の場合はマスターからのコミットオブジェクト名が表示されます。</target>
        </trans-unit>
        <trans-unit id="d086642ebaf2071be1a4671ed3801412d03ee7ac" translate="yes" xml:space="preserve">
          <source>but that may become cumbersome, when you have many attributes. Using macro attributes, you can define an attribute that, when set, also sets or unsets a number of other attributes at the same time. The system knows a built-in macro attribute, &lt;code&gt;binary&lt;/code&gt;:</source>
          <target state="translated">しかし、多くの属性を持っている場合は、面倒になる可能性があります。マクロ属性を使用して、属性を定義すると、設定時に、他のいくつかの属性も同時に設定または設定解除できます。システムは組み込みのマクロ属性 &lt;code&gt;binary&lt;/code&gt; を認識しています。</target>
        </trans-unit>
        <trans-unit id="b354ac610248436418f0a768b2a238f599b63512" translate="yes" xml:space="preserve">
          <source>but that may sometimes help you guess which tags might come after the given commit.</source>
          <target state="translated">しかし、これは与えられたコミットの後にどのタグが来るかを推測するのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="481514e03c29bd6e6c21bcf330cca66f7a8e5e03" translate="yes" xml:space="preserve">
          <source>but the command invocation was &lt;code&gt;git diff-files myfile&lt;/code&gt;, then the junkfile entry would be removed from the list because only &quot;myfile&quot; is under consideration.</source>
          <target state="translated">しかし、コマンドの呼び出しは &lt;code&gt;git diff-files myfile&lt;/code&gt; でした。「myfile」のみが考慮されているため、ジャンクファイルのエントリはリストから削除されます。</target>
        </trans-unit>
        <trans-unit id="9a4d92b29b4ea9cb527dbdd917995ee8e6390c1d" translate="yes" xml:space="preserve">
          <source>but this time instead of immediately making the commit, let&amp;rsquo;s take an intermediate step, and ask for diffs along the way to keep track of what&amp;rsquo;s happening:</source>
          <target state="translated">今回はすぐにコミットするのではなく、中間のステップを実行して、何が起こっているのかを追跡するために、途中で差分を要求します。</target>
        </trans-unit>
        <trans-unit id="4a4c509be280ffc999d52daf10f3af16adbf10ad" translate="yes" xml:space="preserve">
          <source>but to avoid common mistakes with filename globbing etc., the command will not normally add totally new entries or remove old entries, i.e. it will normally just update existing cache entries.</source>
          <target state="translated">しかし、ファイル名のグロブ化などでよくある間違いを避けるために、コマンドは通常は全く新しいエントリを追加したり古いエントリを削除したりしません。</target>
        </trans-unit>
        <trans-unit id="0c8f2a0a85b88cfa647434356130399dff07d5d7" translate="yes" xml:space="preserve">
          <source>but with the algorithm used by git bisect we get:</source>
          <target state="translated">しかし、git bisect で使われているアルゴリズムを使うと、次のようになります。</target>
        </trans-unit>
        <trans-unit id="08885cdf79de4806bc91b025b32f3b00703dcf8c" translate="yes" xml:space="preserve">
          <source>by listing files as arguments to the &lt;code&gt;commit&lt;/code&gt; command (without --interactive or --patch switch), in which case the commit will ignore changes staged in the index, and instead record the current content of the listed files (which must already be known to Git);</source>
          <target state="translated">&lt;code&gt;commit&lt;/code&gt; コマンドへの引数としてファイルを一覧表示することにより（--interactiveまたは--patchスイッチなし）、その場合、コミットはインデックスにステージングされた変更を無視し、代わりに一覧表示されたファイルの現在の内容を記録します（これは既知である必要があります） Gitへ）;</target>
        </trans-unit>
        <trans-unit id="3836fcf09d79e41b99edac70e256133efc12bff7" translate="yes" xml:space="preserve">
          <source>by moving the &quot;pick 4&quot; line will result in the following history:</source>
          <target state="translated">pick 4」の行を移動させることで、以下のような履歴になります。</target>
        </trans-unit>
        <trans-unit id="906ba5e6f6707165a9878468ec60f33a2ff34b96" translate="yes" xml:space="preserve">
          <source>by using &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to incrementally &quot;add&quot; changes to the index before using the &lt;code&gt;commit&lt;/code&gt; command (Note: even modified files must be &quot;added&quot;);</source>
          <target state="translated">使用して&lt;a href=&quot;git-add&quot;&gt;のgit-ADD [1]を&lt;/a&gt;増分的に使用する前に、インデックスへの変更を「追加」 &lt;code&gt;commit&lt;/code&gt; コマンドを（注：さえ変更されたファイルが「追加」されなければなりません）。</target>
        </trans-unit>
        <trans-unit id="e48f31443a096bff3238667996c3f171f13b5f0c" translate="yes" xml:space="preserve">
          <source>by using &lt;a href=&quot;git-rm&quot;&gt;git-rm[1]&lt;/a&gt; to remove files from the working tree and the index, again before using the &lt;code&gt;commit&lt;/code&gt; command;</source>
          <target state="translated">使用して&lt;a href=&quot;git-rm&quot;&gt;のgit-RM [1]を&lt;/a&gt;再び使用する前に、作業ツリーとインデックスからファイルを削除するために &lt;code&gt;commit&lt;/code&gt; コマンドを。</target>
        </trans-unit>
        <trans-unit id="093a3f97e95959ebe22524ee0ce832b0babc748b" translate="yes" xml:space="preserve">
          <source>by using the --interactive or --patch switches with the &lt;code&gt;commit&lt;/code&gt; command to decide one by one which files or hunks should be part of the commit in addition to contents in the index, before finalizing the operation. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate these modes.</source>
          <target state="translated">操作を完了する前に、 &lt;code&gt;commit&lt;/code&gt; コマンドで--interactiveまたは--patchスイッチを使用して、インデックスの内容に加えて、コミットの一部となるファイルまたはハンクを1つずつ決定します。これらのモードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="4834ad1b53b94300bc089b00aaeed76c52aebbcd" translate="yes" xml:space="preserve">
          <source>by using the -a switch with the &lt;code&gt;commit&lt;/code&gt; command to automatically &quot;add&quot; changes from all known files (i.e. all files that are already listed in the index) and to automatically &quot;rm&quot; files in the index that have been removed from the working tree, and then perform the actual commit;</source>
          <target state="translated">-aスイッチを &lt;code&gt;commit&lt;/code&gt; コマンドで使用して、すべての既知のファイル（つまり、すでにインデックスにリストされているすべてのファイル）からの変更を自動的に「追加」し、作業ツリーから削除されたインデックス内のファイルを自動的に「rm」します。 、次に実際のコミットを実行します。</target>
        </trans-unit>
        <trans-unit id="b03592806efabfeeb709f5a70a7c172669b00538" translate="yes" xml:space="preserve">
          <source>cache</source>
          <target state="translated">cache</target>
        </trans-unit>
        <trans-unit id="0c93713c1e43fccf897b7b4f02e822c65d557fdf" translate="yes" xml:space="preserve">
          <source>cached</source>
          <target state="translated">cached</target>
        </trans-unit>
        <trans-unit id="9eafea1e818b36cfe83084dbfcee79ccb268deb8" translate="yes" xml:space="preserve">
          <source>cancel the cherry-pick. In other words, return to the pre-cherry-pick state, preserving any local modifications you had in the working tree.</source>
          <target state="translated">チェリーピックをキャンセルします。言い換えれば、チェリーピック前の状態に戻り、作業ツリーにあったローカルな変更を保存します。</target>
        </trans-unit>
        <trans-unit id="21ca164274e6e0b587a5c99674b651b198887373" translate="yes" xml:space="preserve">
          <source>cat-blob</source>
          <target state="translated">cat-blob</target>
        </trans-unit>
        <trans-unit id="1b0b597309b09f88e890e96ee25a4239e209bcc6" translate="yes" xml:space="preserve">
          <source>cat-blob-fd</source>
          <target state="translated">cat-blob-fd</target>
        </trans-unit>
        <trans-unit id="1b860f3f13df1c0a7cb167ae98ab823bd793ef37" translate="yes" xml:space="preserve">
          <source>cat-file</source>
          <target state="translated">cat-file</target>
        </trans-unit>
        <trans-unit id="6bdc4dd4748a2bfb630e761b44a4eee74e5812c1" translate="yes" xml:space="preserve">
          <source>category (or &lt;code&gt;gitweb.category&lt;/code&gt;)</source>
          <target state="translated">カテゴリー（または &lt;code&gt;gitweb.category&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d027a2f7150c9c1d54212c981331ced097d02521" translate="yes" xml:space="preserve">
          <source>cd_to_toplevel</source>
          <target state="translated">cd_to_toplevel</target>
        </trans-unit>
        <trans-unit id="2cf64e447b84b497b2491b7af072a229eefe2651" translate="yes" xml:space="preserve">
          <source>chain</source>
          <target state="translated">chain</target>
        </trans-unit>
        <trans-unit id="eea15bfc0410c3d01d0daf4a8e336e46da972ca0" translate="yes" xml:space="preserve">
          <source>changeset</source>
          <target state="translated">changeset</target>
        </trans-unit>
        <trans-unit id="60863ff2c00bd434be8f30a313cc6bf530d01628" translate="yes" xml:space="preserve">
          <source>check the branch names in an external repository (if not known).</source>
          <target state="translated">外部リポジトリにあるブランチ名をチェックします (わからない場合)。</target>
        </trans-unit>
        <trans-unit id="1f1c087ebd5ee9330247a27b3cb5e1c3309d1b49" translate="yes" xml:space="preserve">
          <source>check-ignore</source>
          <target state="translated">check-ignore</target>
        </trans-unit>
        <trans-unit id="d5491e7e7124a22dd73fa746ba129c59f9dc6d5d" translate="yes" xml:space="preserve">
          <source>checkout</source>
          <target state="translated">checkout</target>
        </trans-unit>
        <trans-unit id="f1d6e05726e233a2ab8de16435d659a28a2e35a7" translate="yes" xml:space="preserve">
          <source>checkout a new branch &lt;code&gt;mine&lt;/code&gt; from master.</source>
          <target state="translated">マスターから新しいブランチ &lt;code&gt;mine&lt;/code&gt; チェックアウトします。</target>
        </trans-unit>
        <trans-unit id="baa127da3b2e7bb80d470a5c5b3ed484fc3ecffa" translate="yes" xml:space="preserve">
          <source>checkout-index</source>
          <target state="translated">checkout-index</target>
        </trans-unit>
        <trans-unit id="77ccc4847f3f5995981f07a9aaa766d505e363d0" translate="yes" xml:space="preserve">
          <source>checkout.defaultRemote</source>
          <target state="translated">checkout.defaultRemote</target>
        </trans-unit>
        <trans-unit id="7993ca6fc917dfcd7447613538a9f2529705f4e5" translate="yes" xml:space="preserve">
          <source>checkoutAmbiguousRemoteBranchName</source>
          <target state="translated">checkoutAmbiguousRemoteBranchName</target>
        </trans-unit>
        <trans-unit id="9c92181fd5e68d410f28e18265218b8c3a8a1b78" translate="yes" xml:space="preserve">
          <source>checks if the current directory is within the working tree of the repository, and otherwise dies.</source>
          <target state="translated">はカレントディレクトリがリポジトリの作業ツリー内にあるかどうかをチェックし、そうでなければ終了します。</target>
        </trans-unit>
        <trans-unit id="2e41d31ec807e404264bdbe4cf0898e0675b3d63" translate="yes" xml:space="preserve">
          <source>checks if the working tree associated with the repository exists, and otherwise dies. Often done before calling cd_to_toplevel, which is impossible to do if there is no working tree.</source>
          <target state="translated">はリポジトリに関連付けられた作業木が存在するかどうかをチェックし、そうでなければ終了します。多くの場合、cd_to_toplevel を呼び出す前に行われますが、これは作業ツリーがない場合には不可能です。</target>
        </trans-unit>
        <trans-unit id="6ce38e1ed1561eb51f91bed4e5b8b42001fa1cda" translate="yes" xml:space="preserve">
          <source>checks out all files in the index. Cannot be used together with explicit filenames.</source>
          <target state="translated">インデックス内のすべてのファイルをチェックアウトします。明示的なファイル名との併用はできません。</target>
        </trans-unit>
        <trans-unit id="b095764396dd7603ab632901ad86334026f5e97f" translate="yes" xml:space="preserve">
          <source>checks out an older version. Continue like this, telling Git at each stage whether the version it gives you is good or bad, and notice that the number of revisions left to test is cut approximately in half each time.</source>
          <target state="translated">は古いバージョンをチェックアウトします。このように続けて、各段階でGitにバージョンの良し悪しを伝えていきます。</target>
        </trans-unit>
        <trans-unit id="9d48ee970ac151e88a06bd52df27d444e45a115f" translate="yes" xml:space="preserve">
          <source>checks that the working tree and index associated with the repository have no uncommitted changes to tracked files. Otherwise it emits an error message of the form &lt;code&gt;Cannot
&amp;lt;action&amp;gt;: &amp;lt;reason&amp;gt;. &amp;lt;hint&amp;gt;&lt;/code&gt;, and dies. Example:</source>
          <target state="translated">リポジトリに関連付けられている作業ツリーとインデックスに、追跡されているファイルへのコミットされていない変更がないことを確認します。それ以外の場合は、 &lt;code&gt;Cannot &amp;lt;action&amp;gt;: &amp;lt;reason&amp;gt;. &amp;lt;hint&amp;gt;&lt;/code&gt; という形式のエラーメッセージが出力されます。&amp;lt;ヒント&amp;gt;、そして死ぬ。例：</target>
        </trans-unit>
        <trans-unit id="fde288e73fa35b620c1d091cd10bc2b4ef783b38" translate="yes" xml:space="preserve">
          <source>cherry-pick</source>
          <target state="translated">cherry-pick</target>
        </trans-unit>
        <trans-unit id="4d3ec7cec131af0636c8c4eb3ed9fad46bbbd8fe" translate="yes" xml:space="preserve">
          <source>cherry-picking</source>
          <target state="translated">cherry-picking</target>
        </trans-unit>
        <trans-unit id="a1aab85a96cc8931c6cead1715bf9f08fbd159e1" translate="yes" xml:space="preserve">
          <source>citool</source>
          <target state="translated">citool</target>
        </trans-unit>
        <trans-unit id="6a1cec45eaf37b34e1b1d89130d7746fe4006346" translate="yes" xml:space="preserve">
          <source>clean</source>
          <target state="translated">clean</target>
        </trans-unit>
        <trans-unit id="6191f3c6c1156403f2abec74131f05962f1abaa8" translate="yes" xml:space="preserve">
          <source>clean.requireForce</source>
          <target state="translated">clean.requireForce</target>
        </trans-unit>
        <trans-unit id="168cbb2ea52b9e34d271accecfa7d7951e948a99" translate="yes" xml:space="preserve">
          <source>clear</source>
          <target state="translated">clear</target>
        </trans-unit>
        <trans-unit id="5e0072329d5085c5bc5c23c2fa873dd42900958b" translate="yes" xml:space="preserve">
          <source>clone</source>
          <target state="translated">clone</target>
        </trans-unit>
        <trans-unit id="65b7b2d52a3b114f58dca240d43da422bee2212d" translate="yes" xml:space="preserve">
          <source>clone sets these configuration variables by default. It arranges &lt;code&gt;git pull&lt;/code&gt; to fetch and store the branches of mothership machine to local &lt;code&gt;remotes/origin/*&lt;/code&gt; remote-tracking branches.</source>
          <target state="translated">cloneは、デフォルトでこれらの構成変数を設定します。これは、配置 &lt;code&gt;git pull&lt;/code&gt; ローカルに母船マシンの枝を取得し、保存するために &lt;code&gt;remotes/origin/*&lt;/code&gt; リモート追跡の枝。</target>
        </trans-unit>
        <trans-unit id="b0039cf0af8bf144bcdb5512b615336fbd740a49" translate="yes" xml:space="preserve">
          <source>cloneurl (or multiple-valued &lt;code&gt;gitweb.url&lt;/code&gt;)</source>
          <target state="translated">cloneurl（または複数値の &lt;code&gt;gitweb.url&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ada0de0751f70d1f9286c0a71669d799d3961206" translate="yes" xml:space="preserve">
          <source>codecompare</source>
          <target state="translated">codecompare</target>
        </trans-unit>
        <trans-unit id="d2cff126ddc906e1a4a856fa830eddaf46fcb2f4" translate="yes" xml:space="preserve">
          <source>collapse multiple consecutive empty lines into one empty line</source>
          <target state="translated">複数の連続した空行を1つの空行に折りたたむ</target>
        </trans-unit>
        <trans-unit id="6dd0fe8001145bec4a12d0e22da711c4970d000b" translate="yes" xml:space="preserve">
          <source>color</source>
          <target state="translated">color</target>
        </trans-unit>
        <trans-unit id="a5c6de6e1d6a5426c3f20e289bee4cb63cd9b46d" translate="yes" xml:space="preserve">
          <source>color specification, as described under Values in the &quot;CONFIGURATION FILE&quot; section of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. By default, colors are shown only when enabled for log output (by &lt;code&gt;color.diff&lt;/code&gt;, &lt;code&gt;color.ui&lt;/code&gt;, or &lt;code&gt;--color&lt;/code&gt;, and respecting the &lt;code&gt;auto&lt;/code&gt; settings of the former if we are going to a terminal). &lt;code&gt;%C(auto,...)&lt;/code&gt; is accepted as a historical synonym for the default (e.g., &lt;code&gt;%C(auto,red)&lt;/code&gt;). Specifying &lt;code&gt;%C(always,...)&lt;/code&gt; will show the colors even when color is not otherwise enabled (though consider just using &lt;code&gt;--color=always&lt;/code&gt; to enable color for the whole output, including this format and anything else git might color). &lt;code&gt;auto&lt;/code&gt; alone (i.e. &lt;code&gt;%C(auto)&lt;/code&gt;) will turn on auto coloring on the next placeholders until the color is switched again.</source>
          <target state="translated">&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の「CONFIGURATION FILE」セクションの「値」で説明されている色指定。デフォルトでは、色はログ出力が有効になっている場合にのみ表示されます（ &lt;code&gt;color.diff&lt;/code&gt; 、 &lt;code&gt;color.ui&lt;/code&gt; 、または &lt;code&gt;--color&lt;/code&gt; で、端末に行く場合は前者の &lt;code&gt;auto&lt;/code&gt; 設定を尊重します）。 &lt;code&gt;%C(auto,...)&lt;/code&gt; は、デフォルトの履歴の同義語として受け入れられます（例： &lt;code&gt;%C(auto,red)&lt;/code&gt; ）。 &lt;code&gt;%C(always,...)&lt;/code&gt; を指定すると、色が有効になっていない場合でも色が表示されます（ただし、 &lt;code&gt;--color=always&lt;/code&gt; を使用して、出力全体の色を有効にすることを検討してください。 &lt;code&gt;auto&lt;/code&gt; 単独（つまり、 &lt;code&gt;%C(auto)&lt;/code&gt; ）は、色が再び切り替わるまで、次のプレースホルダーの自動カラーリングをオンにします。</target>
        </trans-unit>
        <trans-unit id="a4f66bcbf0c2d907db9d73e18998c425a594621e" translate="yes" xml:space="preserve">
          <source>color.advice</source>
          <target state="translated">color.advice</target>
        </trans-unit>
        <trans-unit id="8c847b9d6812ac606092130570e37493e972ad8a" translate="yes" xml:space="preserve">
          <source>color.advice.hint</source>
          <target state="translated">color.advice.hint</target>
        </trans-unit>
        <trans-unit id="46ab34863195debec0a658a6884ce1958a8721f8" translate="yes" xml:space="preserve">
          <source>color.blame.highlightRecent</source>
          <target state="translated">color.blame.highlightRecent</target>
        </trans-unit>
        <trans-unit id="cf152df8d71a4044f40941cffe12b4c5947d84c6" translate="yes" xml:space="preserve">
          <source>color.blame.repeatedLines</source>
          <target state="translated">color.blame.repeatedLines</target>
        </trans-unit>
        <trans-unit id="8ab572aa07e705b6cbb5dc02e6cc07d1c537adb5" translate="yes" xml:space="preserve">
          <source>color.branch</source>
          <target state="translated">color.branch</target>
        </trans-unit>
        <trans-unit id="ca9ef171160b4af8190637b4572026e1b567c98a" translate="yes" xml:space="preserve">
          <source>color.branch.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.branch.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="ce3eb96e296266263902a69bbdcb71f2305cb04d" translate="yes" xml:space="preserve">
          <source>color.decorate.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.decorate.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="afd9432dd61dede344700077be0856defef90c96" translate="yes" xml:space="preserve">
          <source>color.diff</source>
          <target state="translated">color.diff</target>
        </trans-unit>
        <trans-unit id="f6c051574f795381da2ac0bc58ffe0019036f226" translate="yes" xml:space="preserve">
          <source>color.diff.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.diff.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="92611cb178c25cb2a36a185c2d51eb34ec21f182" translate="yes" xml:space="preserve">
          <source>color.grep</source>
          <target state="translated">color.grep</target>
        </trans-unit>
        <trans-unit id="514f2bfe2d4e52955ecf7c8018e222f3399098ca" translate="yes" xml:space="preserve">
          <source>color.grep.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.grep.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2a6e9053b32a43b99b387012d73632508c2e585a" translate="yes" xml:space="preserve">
          <source>color.interactive</source>
          <target state="translated">color.interactive</target>
        </trans-unit>
        <trans-unit id="dd02e0dce40f7d7025a402d431583fd14b053a0f" translate="yes" xml:space="preserve">
          <source>color.interactive.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.interactive.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="51223f4d2a0db29c55b88b1aeefff0292cdf6915" translate="yes" xml:space="preserve">
          <source>color.pager</source>
          <target state="translated">color.pager</target>
        </trans-unit>
        <trans-unit id="9b6681d65a863ea874b86fa52e01bfe3a595ea9a" translate="yes" xml:space="preserve">
          <source>color.push</source>
          <target state="translated">color.push</target>
        </trans-unit>
        <trans-unit id="b164c55f58675071e9cc9c95ff7b93fae5239027" translate="yes" xml:space="preserve">
          <source>color.push.error</source>
          <target state="translated">color.push.error</target>
        </trans-unit>
        <trans-unit id="98fcc11a52aacdf315198d4d4e4c73a28e373706" translate="yes" xml:space="preserve">
          <source>color.remote</source>
          <target state="translated">color.remote</target>
        </trans-unit>
        <trans-unit id="728bf4bb2acf8b14851df1659204bac06ad3e826" translate="yes" xml:space="preserve">
          <source>color.remote.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.remote.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="cec9a5d09364bac15b42aabefa1d59f823f18bfe" translate="yes" xml:space="preserve">
          <source>color.showBranch</source>
          <target state="translated">color.showBranch</target>
        </trans-unit>
        <trans-unit id="5a6ac8de37cf8168f8e5d06954ae5809fe56b89f" translate="yes" xml:space="preserve">
          <source>color.status</source>
          <target state="translated">color.status</target>
        </trans-unit>
        <trans-unit id="76d5d5b91d9c8c6f4146d4786abd38fba73cb8f1" translate="yes" xml:space="preserve">
          <source>color.status.&amp;lt;slot&amp;gt;</source>
          <target state="translated">color.status.&amp;lt;slot&amp;gt;</target>
        </trans-unit>
        <trans-unit id="80d84e4a7a0e5b95050721eadf882873b302ba7e" translate="yes" xml:space="preserve">
          <source>color.transport</source>
          <target state="translated">color.transport</target>
        </trans-unit>
        <trans-unit id="72794fc97d8f3ec7db3dfc403237c35a36aeaacb" translate="yes" xml:space="preserve">
          <source>color.transport.rejected</source>
          <target state="translated">color.transport.rejected</target>
        </trans-unit>
        <trans-unit id="b327cc71473f7b15958c2ca3afbaf48055055624" translate="yes" xml:space="preserve">
          <source>color.ui</source>
          <target state="translated">color.ui</target>
        </trans-unit>
        <trans-unit id="6a3280550b4541e0235c265f15531724dee59cd5" translate="yes" xml:space="preserve">
          <source>column number prefix (when using &lt;code&gt;--column&lt;/code&gt;)</source>
          <target state="translated">列番号の接頭辞（ &lt;code&gt;--column&lt;/code&gt; を使用する場合）</target>
        </trans-unit>
        <trans-unit id="c5890d10003df2a43476a1180736e1e1030ff815" translate="yes" xml:space="preserve">
          <source>column.branch</source>
          <target state="translated">column.branch</target>
        </trans-unit>
        <trans-unit id="e8f121be29b911a026f886fc824308ecf7947782" translate="yes" xml:space="preserve">
          <source>column.clean</source>
          <target state="translated">column.clean</target>
        </trans-unit>
        <trans-unit id="33c615ada2e68c61afdfea0f6120b1a5b6c93248" translate="yes" xml:space="preserve">
          <source>column.status</source>
          <target state="translated">column.status</target>
        </trans-unit>
        <trans-unit id="53ce35d568828be63293c7c5d7a6eafbdbfffa49" translate="yes" xml:space="preserve">
          <source>column.tag</source>
          <target state="translated">column.tag</target>
        </trans-unit>
        <trans-unit id="ce07ea7bd627b242f5db709af62203d11c193687" translate="yes" xml:space="preserve">
          <source>column.ui</source>
          <target state="translated">column.ui</target>
        </trans-unit>
        <trans-unit id="c58211681f40d646f5440d87f36886f169b2c9c1" translate="yes" xml:space="preserve">
          <source>combines the changes of README.my and README.upstream since README, tries to merge them and writes the result into README.my.</source>
          <target state="translated">は、README以降のREADME.myとREADME.upstreamの変更点を結合し、マージを試み、その結果をREADME.myに書き込みます。</target>
        </trans-unit>
        <trans-unit id="4015b57a143aec5156fd1444a017a32137a3fd0f" translate="yes" xml:space="preserve">
          <source>commit</source>
          <target state="translated">commit</target>
        </trans-unit>
        <trans-unit id="a20c1ba85a902224a4242c5fac3cf8823109dde0" translate="yes" xml:space="preserve">
          <source>commit both the fix and the test script (and if needed more tests)</source>
          <target state="translated">修正とテストスクリプトの両方をコミットする (必要であればさらにテストを行う)</target>
        </trans-unit>
        <trans-unit id="6580b73ccd362d85f009b4182f9b6e3a1a45517f" translate="yes" xml:space="preserve">
          <source>commit everything, as you have tested, with your sign-off.</source>
          <target state="translated">テストした通りに、すべてをコミットして、サインオフしてください。</target>
        </trans-unit>
        <trans-unit id="38bf3efcbb1dfb31c6a31456605ce997aa62c82f" translate="yes" xml:space="preserve">
          <source>commit hash</source>
          <target state="translated">コミットハッシュ</target>
        </trans-unit>
        <trans-unit id="70dc53d067727e567991b5dab66575a545189059" translate="yes" xml:space="preserve">
          <source>commit it</source>
          <target state="translated">託す</target>
        </trans-unit>
        <trans-unit id="7a11f783dc4b27c4f34550101a10a1fbab125f40" translate="yes" xml:space="preserve">
          <source>commit notes</source>
          <target state="translated">コミットノート</target>
        </trans-unit>
        <trans-unit id="0f423768892497ee49fd3cb7600685fc4d09048c" translate="yes" xml:space="preserve">
          <source>commit object</source>
          <target state="translated">コミットオブジェクト</target>
        </trans-unit>
        <trans-unit id="5c67584c6aef7f60be2cf36e26f15487e559041f" translate="yes" xml:space="preserve">
          <source>commit that index file as an object.</source>
          <target state="translated">そのインデックスファイルをオブジェクトとしてコミットします。</target>
        </trans-unit>
        <trans-unit id="f4ec1cf234ecdc6f98beeaea1274fe5c7f90347c" translate="yes" xml:space="preserve">
          <source>commit-id</source>
          <target state="translated">commit-id</target>
        </trans-unit>
        <trans-unit id="4bd4b8d3421333ea6d9a947b7cd9b2b7570006f8" translate="yes" xml:space="preserve">
          <source>commit-ish (also committish)</source>
          <target state="translated">コミットっぽい</target>
        </trans-unit>
        <trans-unit id="372e62e534ba58042964b6d46f900d1269ad921a" translate="yes" xml:space="preserve">
          <source>commit-msg</source>
          <target state="translated">commit-msg</target>
        </trans-unit>
        <trans-unit id="32f7e2c5b9e2776ff3de9e4a4c7b40027ac07e6b" translate="yes" xml:space="preserve">
          <source>commit-tree</source>
          <target state="translated">commit-tree</target>
        </trans-unit>
        <trans-unit id="f7963c5ab805426035c4f355fca23569d4f94fee" translate="yes" xml:space="preserve">
          <source>commit.cleanup</source>
          <target state="translated">commit.cleanup</target>
        </trans-unit>
        <trans-unit id="020eadfa132922a19589b8940de3d55c7ad15b7e" translate="yes" xml:space="preserve">
          <source>commit.gpgSign</source>
          <target state="translated">commit.gpgSign</target>
        </trans-unit>
        <trans-unit id="c1535e56d29950554365b98e35e0a2d2eb47b6f4" translate="yes" xml:space="preserve">
          <source>commit.status</source>
          <target state="translated">commit.status</target>
        </trans-unit>
        <trans-unit id="7e06eb9aa3509a950be20e8801458fb96ccf01b4" translate="yes" xml:space="preserve">
          <source>commit.template</source>
          <target state="translated">commit.template</target>
        </trans-unit>
        <trans-unit id="d26331c03d01ab6a22a800c032ca5206385bdad3" translate="yes" xml:space="preserve">
          <source>commit.verbose</source>
          <target state="translated">commit.verbose</target>
        </trans-unit>
        <trans-unit id="842f694cfa34540e61e4d3e66074dc2583876642" translate="yes" xml:space="preserve">
          <source>commitBeforeMerge</source>
          <target state="translated">commitBeforeMerge</target>
        </trans-unit>
        <trans-unit id="44d39bc019950029d2a2ff7a963a53eb0dae5c30" translate="yes" xml:space="preserve">
          <source>commitGraph.maxNewFilters</source>
          <target state="translated">commitGraph.maxNewFilters</target>
        </trans-unit>
        <trans-unit id="c6e59a77d77689677a93594a362f163573f2fcda" translate="yes" xml:space="preserve">
          <source>commitGraph.readChangedPaths</source>
          <target state="translated">commitGraph.readChangedPaths</target>
        </trans-unit>
        <trans-unit id="11899850251b5eb2e2933d99a09b9473953d4bae" translate="yes" xml:space="preserve">
          <source>commitdiff</source>
          <target state="translated">commitdiff</target>
        </trans-unit>
        <trans-unit id="47c67b823023966d5c5f6d31ef3dde438e9aadd0" translate="yes" xml:space="preserve">
          <source>committer date (format respects --date= option)</source>
          <target state="translated">コミッターの日付 (書式は --date=オプションに従います)</target>
        </trans-unit>
        <trans-unit id="b33ebef2805c5fbecc85c249d8af56796e04e86b" translate="yes" xml:space="preserve">
          <source>committer date, ISO 8601-like format</source>
          <target state="translated">コミッター日付、ISO 8601のような形式</target>
        </trans-unit>
        <trans-unit id="20fac00746eee2b30cbddfb09a32bdcad53536ce" translate="yes" xml:space="preserve">
          <source>committer date, RFC2822 style</source>
          <target state="translated">コミッターの日付、RFC2822スタイル</target>
        </trans-unit>
        <trans-unit id="eaa3fa71f9bbea1fd2e4449f0b787ea2bba704c0" translate="yes" xml:space="preserve">
          <source>committer date, UNIX timestamp</source>
          <target state="translated">コミッターの日付、UNIX のタイムスタンプ</target>
        </trans-unit>
        <trans-unit id="e274fed9dd7f0b695abc2963b57577b07be7d3f4" translate="yes" xml:space="preserve">
          <source>committer date, relative</source>
          <target state="translated">コミット者日付、相対</target>
        </trans-unit>
        <trans-unit id="9cca7c26cf1623076f47819bbb93ef1c4f5dfa9d" translate="yes" xml:space="preserve">
          <source>committer date, short format (&lt;code&gt;YYYY-MM-DD&lt;/code&gt;)</source>
          <target state="translated">コミッターの日付、短い形式（ &lt;code&gt;YYYY-MM-DD&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="38c2b1fe5227fe0e97bf53953858478de9bfbf54" translate="yes" xml:space="preserve">
          <source>committer date, strict ISO 8601 format</source>
          <target state="translated">コミット者の日付、厳格な ISO 8601 フォーマット</target>
        </trans-unit>
        <trans-unit id="8d1dd1aaeec98cb4c29903139710faa936f162fc" translate="yes" xml:space="preserve">
          <source>committer email</source>
          <target state="translated">コミッターメール</target>
        </trans-unit>
        <trans-unit id="3a646c1c98a5273e8815f227e2a4ea9e4cde8f76" translate="yes" xml:space="preserve">
          <source>committer email (respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">コミッターのメール（.mailmapを尊重して、&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="015580d96472da2ef6d8a31aff2978ebd41bee50" translate="yes" xml:space="preserve">
          <source>committer email local-part (the part before the &lt;code&gt;@&lt;/code&gt; sign)</source>
          <target state="translated">コミッターメールローカル部分（ &lt;code&gt;@&lt;/code&gt; 記号の前の部分）</target>
        </trans-unit>
        <trans-unit id="609e3a6e421d4825e34e38a674d27ee78e3ef040" translate="yes" xml:space="preserve">
          <source>committer local-part (see &lt;code&gt;%cl&lt;/code&gt;) respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">.mailmapを尊重するコミッターlocal-part（ &lt;code&gt;%cl&lt;/code&gt; を参照）。git &lt;a href=&quot;git-shortlog&quot;&gt;-shortlog[1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="2974d417745d222f91fff9082897848e8aea4153" translate="yes" xml:space="preserve">
          <source>committer name</source>
          <target state="translated">コミット者名</target>
        </trans-unit>
        <trans-unit id="bb221237e1d999483cc86d764075a461647b96a9" translate="yes" xml:space="preserve">
          <source>committer name (respecting .mailmap, see &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; or &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;)</source>
          <target state="translated">コミッター名（.mailmapを尊重して、&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;または&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="5abd489d572a61c526a8d49b278ebc85d271b5fc" translate="yes" xml:space="preserve">
          <source>committer name and email and the commit time.</source>
          <target state="translated">コミット者の名前とメールアドレス、コミット時間を指定します。</target>
        </trans-unit>
        <trans-unit id="1657e420cf0201abacf9cdc3136193554606a781" translate="yes" xml:space="preserve">
          <source>committer.email</source>
          <target state="translated">committer.email</target>
        </trans-unit>
        <trans-unit id="417126b9b708ab67689edbca082dae92d085b8b3" translate="yes" xml:space="preserve">
          <source>committer.name</source>
          <target state="translated">committer.name</target>
        </trans-unit>
        <trans-unit id="94c8c21d08740f5da9eaa38d1f175c592692f0d1" translate="yes" xml:space="preserve">
          <source>common</source>
          <target state="translated">common</target>
        </trans-unit>
        <trans-unit id="f60111fa92796b3aa267dd6bd3296c767d442dae" translate="yes" xml:space="preserve">
          <source>common system-wide configuration file (defaults to &lt;code&gt;/etc/gitweb-common.conf&lt;/code&gt;),</source>
          <target state="translated">共通のシステム全体の構成ファイル（デフォルトは &lt;code&gt;/etc/gitweb-common.conf&lt;/code&gt; ）、</target>
        </trans-unit>
        <trans-unit id="2de94ce58ba8f4292ce3f108fdd961fdc028ec5f" translate="yes" xml:space="preserve">
          <source>commondir</source>
          <target state="translated">commondir</target>
        </trans-unit>
        <trans-unit id="4a865a3883220011a983b6bf7b561ea819ef64df" translate="yes" xml:space="preserve">
          <source>compares a (c)ommit and the (i)ndex;</source>
          <target state="translated">は、(c)ommitと(i)ndexを比較します。</target>
        </trans-unit>
        <trans-unit id="b37837e3f8529c64742c38018b1bdcb4dd0b9cfa" translate="yes" xml:space="preserve">
          <source>compares a (c)ommit and the (w)ork tree;</source>
          <target state="translated">オミットとオークの木を比較してみましょう。</target>
        </trans-unit>
        <trans-unit id="75cfb85191fb68e32f895381943a5f43a2293526" translate="yes" xml:space="preserve">
          <source>compares an (o)bject and a (w)ork tree entity;</source>
          <target state="translated">は,(o)オブジェクトと(w)オークの木実体を比較します.</target>
        </trans-unit>
        <trans-unit id="e1e73207352b3690623d8228d0e4745441f558d2" translate="yes" xml:space="preserve">
          <source>compares the &amp;lt;tree-ish&amp;gt; and the files on the filesystem.</source>
          <target state="translated">&amp;lt;tree-ish&amp;gt;とファイルシステム上のファイルを比較します。</target>
        </trans-unit>
        <trans-unit id="1798907f080fa317b12590de2174f117f4901f72" translate="yes" xml:space="preserve">
          <source>compares the &amp;lt;tree-ish&amp;gt; and the index.</source>
          <target state="translated">&amp;lt;tree-ish&amp;gt;とインデックスを比較します。</target>
        </trans-unit>
        <trans-unit id="02be68d024d50b1d246f0e832552c33da5fd685a" translate="yes" xml:space="preserve">
          <source>compares the (i)ndex and the (w)ork tree;</source>
          <target state="translated">(i)ndexと(w)orkツリーを比較します。</target>
        </trans-unit>
        <trans-unit id="a20897a0ce7de6a657164250c440919d9fa64d1f" translate="yes" xml:space="preserve">
          <source>compares the index and the files on the filesystem.</source>
          <target state="translated">インデックスとファイルシステム上のファイルを比較します。</target>
        </trans-unit>
        <trans-unit id="a70f2d21c29dbe161583247fd9fe30a73e793b09" translate="yes" xml:space="preserve">
          <source>compares the trees named by the two arguments.</source>
          <target state="translated">は、2つの引数で指定された木を比較します。</target>
        </trans-unit>
        <trans-unit id="e83536d8d09abd0f54c435ffc83d5c65aa8a3377" translate="yes" xml:space="preserve">
          <source>compares two non-git things (1) and (2).</source>
          <target state="translated">ギットしないものを2つ(1)と(2)を比較しています。</target>
        </trans-unit>
        <trans-unit id="809948dcfa8a97cd21a12fe2461b3e125556f1f7" translate="yes" xml:space="preserve">
          <source>completion.commands</source>
          <target state="translated">completion.commands</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="4adee727fe2662299c984011920419deadc8fc0b" translate="yes" xml:space="preserve">
          <source>config.worktree</source>
          <target state="translated">config.worktree</target>
        </trans-unit>
        <trans-unit id="45b8d5aa10dc50038a6b05d6c0044f98b5efac43" translate="yes" xml:space="preserve">
          <source>contain an empty directory component (e.g. &lt;code&gt;foo//bar&lt;/code&gt; is invalid),</source>
          <target state="translated">空のディレクトリコンポーネントが含まれている（例： &lt;code&gt;foo//bar&lt;/code&gt; は無効）</target>
        </trans-unit>
        <trans-unit id="4397f461de61e8aae143911e30e46e78f1021881" translate="yes" xml:space="preserve">
          <source>contain the special component &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;..&lt;/code&gt; (e.g. &lt;code&gt;foo/./bar&lt;/code&gt; and &lt;code&gt;foo/../bar&lt;/code&gt; are invalid).</source>
          <target state="translated">特別なコンポーネントが含まれています &lt;code&gt;.&lt;/code&gt; または &lt;code&gt;..&lt;/code&gt; （例： &lt;code&gt;foo/./bar&lt;/code&gt; および &lt;code&gt;foo/../bar&lt;/code&gt; は無効です）。</target>
        </trans-unit>
        <trans-unit id="7f82eaad3a65c9a817883e0946ba88f718561f76" translate="yes" xml:space="preserve">
          <source>contents:body</source>
          <target state="translated">contents:body</target>
        </trans-unit>
        <trans-unit id="004dd66ad61e821af675cee252b7cf444eeb2d67" translate="yes" xml:space="preserve">
          <source>contents:lines=N</source>
          <target state="translated">contents:lines=N</target>
        </trans-unit>
        <trans-unit id="9572f562015a5752e28b3bebea5fc2361d498ee9" translate="yes" xml:space="preserve">
          <source>contents:signature</source>
          <target state="translated">contents:signature</target>
        </trans-unit>
        <trans-unit id="df79a028903d27b28275b3e0c005205fc18b2272" translate="yes" xml:space="preserve">
          <source>contents:size</source>
          <target state="translated">contents:size</target>
        </trans-unit>
        <trans-unit id="396a924c6f0f2438b86784921e7cb965c470675c" translate="yes" xml:space="preserve">
          <source>contents:subject</source>
          <target state="translated">contents:subject</target>
        </trans-unit>
        <trans-unit id="f84e2e2dadd87384fb55f25886926b777e8378f1" translate="yes" xml:space="preserve">
          <source>copy</source>
          <target state="translated">copy</target>
        </trans-unit>
        <trans-unit id="753880bea3766d101203faa8107d6b67662465f8" translate="yes" xml:space="preserve">
          <source>core Git</source>
          <target state="translated">コアギット</target>
        </trans-unit>
        <trans-unit id="cf2d457e7a43e7426ddc47f76a9a6a7862183c7f" translate="yes" xml:space="preserve">
          <source>core.abbrev</source>
          <target state="translated">core.abbrev</target>
        </trans-unit>
        <trans-unit id="959fa572026ec7a54a390cc12640898021a8d459" translate="yes" xml:space="preserve">
          <source>core.alternateRefsCommand</source>
          <target state="translated">core.alternateRefsCommand</target>
        </trans-unit>
        <trans-unit id="e33e687b217d932d15db39ed3050e1eb6acebe2b" translate="yes" xml:space="preserve">
          <source>core.alternateRefsPrefixes</source>
          <target state="translated">core.alternateRefsPrefixes</target>
        </trans-unit>
        <trans-unit id="8747276de34b700df1f943508c526a7183b4382b" translate="yes" xml:space="preserve">
          <source>core.askPass</source>
          <target state="translated">core.askPass</target>
        </trans-unit>
        <trans-unit id="985f595a65856adf06e0d3727b9aa6d13d9bf0f5" translate="yes" xml:space="preserve">
          <source>core.attributesFile</source>
          <target state="translated">core.attributesFile</target>
        </trans-unit>
        <trans-unit id="49d03e7330b6e6834b0a025eedf65f8789e6990f" translate="yes" xml:space="preserve">
          <source>core.autocrlf</source>
          <target state="translated">core.autocrlf</target>
        </trans-unit>
        <trans-unit id="41aced0e74b0f50ce3a863767e79c3dd95ced461" translate="yes" xml:space="preserve">
          <source>core.bare</source>
          <target state="translated">core.bare</target>
        </trans-unit>
        <trans-unit id="e288a05acad90cd62bdd35f16c2a74d2557da279" translate="yes" xml:space="preserve">
          <source>core.bigFileThreshold</source>
          <target state="translated">core.bigFileThreshold</target>
        </trans-unit>
        <trans-unit id="e40dc171f8c4201fcef997f8636d083827fd949c" translate="yes" xml:space="preserve">
          <source>core.checkRoundtripEncoding</source>
          <target state="translated">core.checkRoundtripEncoding</target>
        </trans-unit>
        <trans-unit id="087127ab1831a336ef5240c21330fb2f36d9a946" translate="yes" xml:space="preserve">
          <source>core.checkStat</source>
          <target state="translated">core.checkStat</target>
        </trans-unit>
        <trans-unit id="1f1aecebe341370b39e0fe9bece7db072d077803" translate="yes" xml:space="preserve">
          <source>core.commentChar</source>
          <target state="translated">core.commentChar</target>
        </trans-unit>
        <trans-unit id="6293d76f079a22e101e9bbf0baf6730ca74b9427" translate="yes" xml:space="preserve">
          <source>core.commitGraph</source>
          <target state="translated">core.commitGraph</target>
        </trans-unit>
        <trans-unit id="e8ce765916fbdaddaa7a32d9823ac3b895946aa3" translate="yes" xml:space="preserve">
          <source>core.compression</source>
          <target state="translated">core.compression</target>
        </trans-unit>
        <trans-unit id="69cec95e6eb16824ff7029c2f93a5f99d71e16aa" translate="yes" xml:space="preserve">
          <source>core.createObject</source>
          <target state="translated">core.createObject</target>
        </trans-unit>
        <trans-unit id="534532c82bb99a6e0bad1813625f951c19e3c12d" translate="yes" xml:space="preserve">
          <source>core.deltaBaseCacheLimit</source>
          <target state="translated">core.deltaBaseCacheLimit</target>
        </trans-unit>
        <trans-unit id="0df34be9da8577613d1baca7046b4ca05d06153b" translate="yes" xml:space="preserve">
          <source>core.editor</source>
          <target state="translated">core.editor</target>
        </trans-unit>
        <trans-unit id="45c390c885689ee572751a71343608f4da4baeb7" translate="yes" xml:space="preserve">
          <source>core.eol</source>
          <target state="translated">core.eol</target>
        </trans-unit>
        <trans-unit id="32132012be16a2aa8a584c5ca4848dab015b488d" translate="yes" xml:space="preserve">
          <source>core.excludesFile</source>
          <target state="translated">core.excludesFile</target>
        </trans-unit>
        <trans-unit id="9b550b8dedcdb6800c0224a979a3661b8d152782" translate="yes" xml:space="preserve">
          <source>core.fileMode</source>
          <target state="translated">core.fileMode</target>
        </trans-unit>
        <trans-unit id="05296f59a987a41149b85944096536bc976f3c93" translate="yes" xml:space="preserve">
          <source>core.filesRefLockTimeout</source>
          <target state="translated">core.filesRefLockTimeout</target>
        </trans-unit>
        <trans-unit id="a4ffde9710c513e0f386df441cf13371496d640f" translate="yes" xml:space="preserve">
          <source>core.fsmonitor</source>
          <target state="translated">core.fsmonitor</target>
        </trans-unit>
        <trans-unit id="b2761238696c7f67eed665d8a1e8214b9e4c0c9c" translate="yes" xml:space="preserve">
          <source>core.fsmonitorHookVersion</source>
          <target state="translated">core.fsmonitorHookVersion</target>
        </trans-unit>
        <trans-unit id="64c886772472a78d6c3811a927de267d4b589a96" translate="yes" xml:space="preserve">
          <source>core.fsyncObjectFiles</source>
          <target state="translated">core.fsyncObjectFiles</target>
        </trans-unit>
        <trans-unit id="a9ced9da30cdcb8a77e1dddcf9ffddef755d646b" translate="yes" xml:space="preserve">
          <source>core.gitProxy</source>
          <target state="translated">core.gitProxy</target>
        </trans-unit>
        <trans-unit id="66ebcf3992ed3efd9fcd27129f808916fddc9e92" translate="yes" xml:space="preserve">
          <source>core.hideDotFiles</source>
          <target state="translated">core.hideDotFiles</target>
        </trans-unit>
        <trans-unit id="ca95d87902e9e0a13b358de2f6c3174a24e741cc" translate="yes" xml:space="preserve">
          <source>core.hooksPath</source>
          <target state="translated">core.hooksPath</target>
        </trans-unit>
        <trans-unit id="3480cdcecea2adb7a9d9c9137541b53446cd2d14" translate="yes" xml:space="preserve">
          <source>core.ignoreCase</source>
          <target state="translated">core.ignoreCase</target>
        </trans-unit>
        <trans-unit id="4d45bf4e4383961083ebc5904242284e51c51b32" translate="yes" xml:space="preserve">
          <source>core.ignoreStat</source>
          <target state="translated">core.ignoreStat</target>
        </trans-unit>
        <trans-unit id="5a4abf6f4fdfa67755a470108e5997c5ba1e60cd" translate="yes" xml:space="preserve">
          <source>core.logAllRefUpdates</source>
          <target state="translated">core.logAllRefUpdates</target>
        </trans-unit>
        <trans-unit id="bf566f6f5a72af0bbdf49e11b4d0ab0a36d4feb4" translate="yes" xml:space="preserve">
          <source>core.looseCompression</source>
          <target state="translated">core.looseCompression</target>
        </trans-unit>
        <trans-unit id="4dc00883effd961e2b3388ee13eda97e227a1f0f" translate="yes" xml:space="preserve">
          <source>core.multiPackIndex</source>
          <target state="translated">core.multiPackIndex</target>
        </trans-unit>
        <trans-unit id="411fa7fa4424e8bc70d80fa2582efc8afa88cede" translate="yes" xml:space="preserve">
          <source>core.notesRef</source>
          <target state="translated">core.notesRef</target>
        </trans-unit>
        <trans-unit id="5ba4b1e12fc45c4ab2cb8689ed7aea827bc7fc35" translate="yes" xml:space="preserve">
          <source>core.packedGitLimit</source>
          <target state="translated">core.packedGitLimit</target>
        </trans-unit>
        <trans-unit id="977d9f503ba50c99fdbf73b0c1e4daec7d1141ee" translate="yes" xml:space="preserve">
          <source>core.packedGitWindowSize</source>
          <target state="translated">core.packedGitWindowSize</target>
        </trans-unit>
        <trans-unit id="542fd696a3aacac0b7dc3a9cdbe129fc8a34021c" translate="yes" xml:space="preserve">
          <source>core.packedRefsTimeout</source>
          <target state="translated">core.packedRefsTimeout</target>
        </trans-unit>
        <trans-unit id="7d09a05b657fb56dce310f9c91322125e34df242" translate="yes" xml:space="preserve">
          <source>core.pager</source>
          <target state="translated">core.pager</target>
        </trans-unit>
        <trans-unit id="2bb8a01b99a9f4829fd68a0a514f72fed85849a2" translate="yes" xml:space="preserve">
          <source>core.precomposeUnicode</source>
          <target state="translated">core.precomposeUnicode</target>
        </trans-unit>
        <trans-unit id="7f7681a0f982fe07fb3e3e0a4a1cbf0ac6578ab6" translate="yes" xml:space="preserve">
          <source>core.preferSymlinkRefs</source>
          <target state="translated">core.preferSymlinkRefs</target>
        </trans-unit>
        <trans-unit id="b40d6114f528e1b12e69abf2bc8c8a1e1e0729a1" translate="yes" xml:space="preserve">
          <source>core.preloadIndex</source>
          <target state="translated">core.preloadIndex</target>
        </trans-unit>
        <trans-unit id="d3884090559963254921436275cc7910424beeaa" translate="yes" xml:space="preserve">
          <source>core.protectHFS</source>
          <target state="translated">core.protectHFS</target>
        </trans-unit>
        <trans-unit id="2b6e49157831a2fd7cc374aed4b8e3fcfe9a65cc" translate="yes" xml:space="preserve">
          <source>core.protectNTFS</source>
          <target state="translated">core.protectNTFS</target>
        </trans-unit>
        <trans-unit id="b7aa334c221baeac993f8dfab5a01de5f55246c5" translate="yes" xml:space="preserve">
          <source>core.quotePath</source>
          <target state="translated">core.quotePath</target>
        </trans-unit>
        <trans-unit id="03339150599c8de471a17c6acbe60398b29d423b" translate="yes" xml:space="preserve">
          <source>core.repositoryFormatVersion</source>
          <target state="translated">core.repositoryFormatVersion</target>
        </trans-unit>
        <trans-unit id="affcdeb4b4ce60fafd53e206d623606a5e5478c1" translate="yes" xml:space="preserve">
          <source>core.restrictinheritedhandles</source>
          <target state="translated">core.restrictinheritedhandles</target>
        </trans-unit>
        <trans-unit id="648cabb503e5fa7696f73461722da70b9f497bb3" translate="yes" xml:space="preserve">
          <source>core.safecrlf</source>
          <target state="translated">core.safecrlf</target>
        </trans-unit>
        <trans-unit id="041606f3c0e6886da1433d0087f69fb92d8084c1" translate="yes" xml:space="preserve">
          <source>core.sharedRepository</source>
          <target state="translated">core.sharedRepository</target>
        </trans-unit>
        <trans-unit id="23ff5bba90ce061198d5e3ffc841a43fbb70cec6" translate="yes" xml:space="preserve">
          <source>core.sparseCheckout</source>
          <target state="translated">core.sparseCheckout</target>
        </trans-unit>
        <trans-unit id="18ca82d3256618e136b9c3dce7e7b8cbe92e10ca" translate="yes" xml:space="preserve">
          <source>core.sparseCheckoutCone</source>
          <target state="translated">core.sparseCheckoutCone</target>
        </trans-unit>
        <trans-unit id="34de7b3533f8a473368f31e9c9d471a47de937d8" translate="yes" xml:space="preserve">
          <source>core.splitIndex</source>
          <target state="translated">core.splitIndex</target>
        </trans-unit>
        <trans-unit id="e93900ed78f99070ecf58770317ad13ec69ebdb9" translate="yes" xml:space="preserve">
          <source>core.sshCommand</source>
          <target state="translated">core.sshCommand</target>
        </trans-unit>
        <trans-unit id="ecef62dcf909d9b3b8008c85744589fe969d6e8c" translate="yes" xml:space="preserve">
          <source>core.symlinks</source>
          <target state="translated">core.symlinks</target>
        </trans-unit>
        <trans-unit id="3543db8c28952b3c897e97d6802bfb4b20a29f0c" translate="yes" xml:space="preserve">
          <source>core.trustctime</source>
          <target state="translated">core.trustctime</target>
        </trans-unit>
        <trans-unit id="e86e3acca3c2b5a8a428d5e913a3c20e6a8702f3" translate="yes" xml:space="preserve">
          <source>core.unsetenvvars</source>
          <target state="translated">core.unsetenvvars</target>
        </trans-unit>
        <trans-unit id="80e48caf217388fbd4f5f02d89e4cbe9ca2c0411" translate="yes" xml:space="preserve">
          <source>core.untrackedCache</source>
          <target state="translated">core.untrackedCache</target>
        </trans-unit>
        <trans-unit id="30eb2028c48e825c8972323ceb5f2720a28cb1a4" translate="yes" xml:space="preserve">
          <source>core.useReplaceRefs</source>
          <target state="translated">core.useReplaceRefs</target>
        </trans-unit>
        <trans-unit id="79f3ab5bc823c093f6caec9ad2bfd91cd1ecc66f" translate="yes" xml:space="preserve">
          <source>core.warnAmbiguousRefs</source>
          <target state="translated">core.warnAmbiguousRefs</target>
        </trans-unit>
        <trans-unit id="8035c328e586f1ddd34491be18e332e06245400a" translate="yes" xml:space="preserve">
          <source>core.whitespace</source>
          <target state="translated">core.whitespace</target>
        </trans-unit>
        <trans-unit id="42d3882207da2f1b2f766aa2038286367d209134" translate="yes" xml:space="preserve">
          <source>core.worktree</source>
          <target state="translated">core.worktree</target>
        </trans-unit>
        <trans-unit id="54e5d8d2fde10ff9ed2d854151648ef7ea276424" translate="yes" xml:space="preserve">
          <source>count-objects</source>
          <target state="translated">count-objects</target>
        </trans-unit>
        <trans-unit id="1f1b8fb0c26d2f97cf91a600eee3651686523a54" translate="yes" xml:space="preserve">
          <source>count: the number of loose objects</source>
          <target state="translated">count:ルーズオブジェクトの数</target>
        </trans-unit>
        <trans-unit id="9b7c68a918b17eb053809b198d7c9abfc142f30a" translate="yes" xml:space="preserve">
          <source>create</source>
          <target state="translated">create</target>
        </trans-unit>
        <trans-unit id="a8a783c8e8d5a2d764d09f23941a70af82a68926" translate="yes" xml:space="preserve">
          <source>create [options] &amp;lt;file&amp;gt; &amp;lt;git-rev-list-args&amp;gt;</source>
          <target state="translated">作成[オプション] &amp;lt;ファイル&amp;gt; &amp;lt;git-rev-list-args&amp;gt;</target>
        </trans-unit>
        <trans-unit id="a898c3bab873d4c64f82ded72f74751a576962d7" translate="yes" xml:space="preserve">
          <source>create a new branch &lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt; referencing &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt;, and check it out.</source>
          <target state="translated">&lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; を参照する新しいブランチ &lt;code&gt;&amp;lt;new&amp;gt;&lt;/code&gt; を作成し、チェックアウトします。</target>
        </trans-unit>
        <trans-unit id="2ec8a8a26d58d8e3ee0942abe268f42f92be4034" translate="yes" xml:space="preserve">
          <source>create a new branch named &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;, referencing &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt;, which may be specified any way you like, including using a branch name or a tag name.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; という名前の新しいブランチを作成し、 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; を参照します。ブランチ名やタグ名の使用など、好きな方法で指定できます。</target>
        </trans-unit>
        <trans-unit id="51140d4c076694cbb659019fe0cefe5beceea402" translate="yes" xml:space="preserve">
          <source>create a new branch named &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;, referencing the same point in history as the current branch.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; という名前の新しいブランチを作成し、現在のブランチと同じ履歴ポイントを参照します。</target>
        </trans-unit>
        <trans-unit id="b076b7781ba9692a9725f8363bc2b545e61793ca" translate="yes" xml:space="preserve">
          <source>create a new topic branch.</source>
          <target state="translated">新しいトピックブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="187986ac8c2db8ed95278b39dffb6ad5292dbdbb" translate="yes" xml:space="preserve">
          <source>create a private branch based on a well known (but somewhat behind) tag.</source>
          <target state="translated">よく知られている (しかしやや後ろにある)タグに基づいてプライベートブランチを作成します。</target>
        </trans-unit>
        <trans-unit id="2acb56aff24c2a5c989226a06af1695579ccf6ea" translate="yes" xml:space="preserve">
          <source>create a signed tag.</source>
          <target state="translated">署名付きタグを作成します。</target>
        </trans-unit>
        <trans-unit id="7389c4f321260703fe1b7e54968834b25c9f4479" translate="yes" xml:space="preserve">
          <source>create topic branch as needed and apply, again with sign-offs.</source>
          <target state="translated">必要に応じてトピックブランチを作成して適用します。</target>
        </trans-unit>
        <trans-unit id="4ecc2ef111c576a677976da0784792e85675361c" translate="yes" xml:space="preserve">
          <source>create_virtual_base</source>
          <target state="translated">create_virtual_base</target>
        </trans-unit>
        <trans-unit id="4ebb9962b36526d09c78d0036ae93adf9be65bb8" translate="yes" xml:space="preserve">
          <source>creates a new branch &lt;code&gt;foo&lt;/code&gt;, which refers to commit &lt;code&gt;f&lt;/code&gt;, and then updates &lt;code&gt;HEAD&lt;/code&gt; to refer to branch &lt;code&gt;foo&lt;/code&gt;. In other words, we&amp;rsquo;ll no longer be in detached &lt;code&gt;HEAD&lt;/code&gt; state after this command.</source>
          <target state="translated">新しいブランチの作成 &lt;code&gt;foo&lt;/code&gt; のコミットを指し、 &lt;code&gt;f&lt;/code&gt; は、その後、更新 &lt;code&gt;HEAD&lt;/code&gt; を分岐を参照するために &lt;code&gt;foo&lt;/code&gt; という。つまり、このコマンドの実行後はデタッチされた &lt;code&gt;HEAD&lt;/code&gt; 状態にはなりません。</target>
        </trans-unit>
        <trans-unit id="a2780f5a5ae6b5c97641f872834c2cb4d320d58a" translate="yes" xml:space="preserve">
          <source>creates a new tag &lt;code&gt;foo&lt;/code&gt;, which refers to commit &lt;code&gt;f&lt;/code&gt;, leaving &lt;code&gt;HEAD&lt;/code&gt; detached.</source>
          <target state="translated">新しいタグを作成 &lt;code&gt;foo&lt;/code&gt; のコミットを指し、 &lt;code&gt;f&lt;/code&gt; 残し、 &lt;code&gt;HEAD&lt;/code&gt; デタッチを。</target>
        </trans-unit>
        <trans-unit id="a57e6b47e2a17463754373ddfae9e8d12eafb7f1" translate="yes" xml:space="preserve">
          <source>credential.&amp;lt;url&amp;gt;.*</source>
          <target state="translated">credential.&amp;lt;url&amp;gt;.*</target>
        </trans-unit>
        <trans-unit id="f1a609951f4c2b322a1db183ee7a7012be55b9c5" translate="yes" xml:space="preserve">
          <source>credential.helper</source>
          <target state="translated">credential.helper</target>
        </trans-unit>
        <trans-unit id="bca119ff50602816772dd2a73dfaa6eb8e0f9d85" translate="yes" xml:space="preserve">
          <source>credential.useHttpPath</source>
          <target state="translated">credential.useHttpPath</target>
        </trans-unit>
        <trans-unit id="deb46e03a8fd122d820256e55cd3990b2283558e" translate="yes" xml:space="preserve">
          <source>credential.username</source>
          <target state="translated">credential.username</target>
        </trans-unit>
        <trans-unit id="146c12f7287e0d749211abe1d0e06d591f31ab67" translate="yes" xml:space="preserve">
          <source>credentialCache.ignoreSIGHUP</source>
          <target state="translated">credentialCache.ignoreSIGHUP</target>
        </trans-unit>
        <trans-unit id="5e084be34d9cae64271f7da4c667c3655b7c7e2b" translate="yes" xml:space="preserve">
          <source>custom command</source>
          <target state="translated">カスタムコマンド</target>
        </trans-unit>
        <trans-unit id="9ebf0f6534e0ecb2ebc0f3a751992712eb4613ba" translate="yes" xml:space="preserve">
          <source>cvs2git (part of cvs2svn), &lt;code&gt;http://subversion.apache.org/&lt;/code&gt;</source>
          <target state="translated">cvs2git（cvs2svnの一部）、 &lt;code&gt;http://subversion.apache.org/&lt;/code&gt; //subversion.apache.org/</target>
        </trans-unit>
        <trans-unit id="f43e99b19c6164c2e4a665306629741686b4ce5f" translate="yes" xml:space="preserve">
          <source>cvsexportcommit.cvsdir</source>
          <target state="translated">cvsexportcommit.cvsdir</target>
        </trans-unit>
        <trans-unit id="4eb7a17655440a77cf067e6d109036a13dfa5100" translate="yes" xml:space="preserve">
          <source>daemon</source>
          <target state="translated">daemon</target>
        </trans-unit>
        <trans-unit id="e94d5484c16090a3e6a43ed503b6bea30fc975cf" translate="yes" xml:space="preserve">
          <source>dangling &amp;lt;type&amp;gt; &amp;lt;object&amp;gt;</source>
          <target state="translated">ぶら下がり&amp;lt;type&amp;gt; &amp;lt;object&amp;gt;</target>
        </trans-unit>
        <trans-unit id="e0c1aa7fe06eb7c60d97afffb45c61c3a246186f" translate="yes" xml:space="preserve">
          <source>dangling object</source>
          <target state="translated">ぶら下がり物</target>
        </trans-unit>
        <trans-unit id="a710350f8f7e9f1cf8e2244f994dbced90cfa77e" translate="yes" xml:space="preserve">
          <source>date-format</source>
          <target state="translated">date-format</target>
        </trans-unit>
        <trans-unit id="7505d64a54e061b7acd54ccd58b49dc43500b635" translate="yes" xml:space="preserve">
          <source>default</source>
          <target state="translated">default</target>
        </trans-unit>
        <trans-unit id="796bbc8375f4407bde99e8ccd19980e271be2818" translate="yes" xml:space="preserve">
          <source>deinit [-f|--force] (--all|[--] &amp;lt;path&amp;gt;&amp;hellip;​)</source>
          <target state="translated">deinit [-f | --force]（--all | [-] &amp;lt;path&amp;gt;&amp;hellip;）</target>
        </trans-unit>
        <trans-unit id="9485989ff514b5106b7738850fd73c23e8c1e3f7" translate="yes" xml:space="preserve">
          <source>delete</source>
          <target state="translated">delete</target>
        </trans-unit>
        <trans-unit id="1de1d8f7b6ce28448c7c654857cfbcf4eb2a487c" translate="yes" xml:space="preserve">
          <source>delete the branch &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; irrespective of its merged status.</source>
          <target state="translated">マージされたステータスに関係なく、ブランチ &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="ee032bd4cb79a16b41a9cddaa6801aa39ad00d69" translate="yes" xml:space="preserve">
          <source>delete the branch &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;; if the branch is not fully merged in its upstream branch or contained in the current branch, this command will fail with a warning.</source>
          <target state="translated">ブランチを削除する &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; ; ブランチが上流のブランチに完全にマージされていないか、現在のブランチに含まれていない場合、このコマンドは失敗し、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="860bd09ca701b7eefc6bffda982580c223ef997b" translate="yes" xml:space="preserve">
          <source>deleting context or removal lines</source>
          <target state="translated">文脈削除行</target>
        </trans-unit>
        <trans-unit id="c8879b695b81cf545d60b18c91cdfb8806b36522" translate="yes" xml:space="preserve">
          <source>deltabase</source>
          <target state="translated">deltabase</target>
        </trans-unit>
        <trans-unit id="d27e9e35c8b1a62a6240ab9f98d5fced70539520" translate="yes" xml:space="preserve">
          <source>deltawalker</source>
          <target state="translated">deltawalker</target>
        </trans-unit>
        <trans-unit id="dbc3503fab0104483514b05f547b64029db5e57c" translate="yes" xml:space="preserve">
          <source>describe</source>
          <target state="translated">describe</target>
        </trans-unit>
        <trans-unit id="ed59ca2a7cc7e281e5bde10bab226dd9168fa10c" translate="yes" xml:space="preserve">
          <source>description (or &lt;code&gt;gitweb.description&lt;/code&gt;)</source>
          <target state="translated">説明（または &lt;code&gt;gitweb.description&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ac1ce32f2ed519a514236b9d0b38fe3cf2658a8b" translate="yes" xml:space="preserve">
          <source>detached HEAD</source>
          <target state="translated">デタッチドヘッド</target>
        </trans-unit>
        <trans-unit id="75205c21546c14079be2a62786e02d33b07e187b" translate="yes" xml:space="preserve">
          <source>detachedHead</source>
          <target state="translated">detachedHead</target>
        </trans-unit>
        <trans-unit id="8f595011a3953aff6b7fb36fe731811b418b47b0" translate="yes" xml:space="preserve">
          <source>die</source>
          <target state="translated">die</target>
        </trans-unit>
        <trans-unit id="884997f14fc1c1d69600d809d03fc588ba3a30b0" translate="yes" xml:space="preserve">
          <source>die with the usage message.</source>
          <target state="translated">は、使用法のメッセージとともに死ぬ。</target>
        </trans-unit>
        <trans-unit id="75a0ee1ba911f2f5199177dfd31808a12511bbdc" translate="yes" xml:space="preserve">
          <source>diff</source>
          <target state="translated">diff</target>
        </trans-unit>
        <trans-unit id="aec63b21c7ff7719699fd2311e4f5955f8100284" translate="yes" xml:space="preserve">
          <source>diff(1), &lt;a href=&quot;git-difftool&quot;&gt;git-difftool[1]&lt;/a&gt;, &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore[7]&lt;/a&gt;, &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;, &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;</source>
          <target state="translated">diff（1）、&lt;a href=&quot;git-difftool&quot;&gt;git-difftool [1]&lt;/a&gt;、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;、&lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore [7]&lt;/a&gt;、&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;、&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7baf889d118863654abfc71095ed4b73fb9cc08" translate="yes" xml:space="preserve">
          <source>diff(1), &lt;a href=&quot;git-difftool&quot;&gt;git-difftool[1]&lt;/a&gt;, &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore[7]&lt;/a&gt;, &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;, &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;, &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt;</source>
          <target state="translated">diff（1）、&lt;a href=&quot;git-difftool&quot;&gt;git-difftool [1]&lt;/a&gt;、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;、&lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore [7]&lt;/a&gt;、&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;、&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]&lt;/a&gt;、&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="274926922d975d8638e23e8b6937fee0ace1f2ff" translate="yes" xml:space="preserve">
          <source>diff-algorithm=[patience|minimal|histogram|myers]</source>
          <target state="translated">diff-algorithm=[patience|minimal|histogram|myers]</target>
        </trans-unit>
        <trans-unit id="dc444c758109146345f9f5bfd883892188e6a3fc" translate="yes" xml:space="preserve">
          <source>diff-index</source>
          <target state="translated">diff-index</target>
        </trans-unit>
        <trans-unit id="4250edb32c8b97105f57b5a5eab36d48f7b1949b" translate="yes" xml:space="preserve">
          <source>diff.&amp;lt;driver&amp;gt;.binary</source>
          <target state="translated">diff.&amp;lt;driver&amp;gt;.binary</target>
        </trans-unit>
        <trans-unit id="d49144cceb4a510ce4eff54a03fb58d928e50c49" translate="yes" xml:space="preserve">
          <source>diff.&amp;lt;driver&amp;gt;.cachetextconv</source>
          <target state="translated">diff.&amp;lt;driver&amp;gt;.cachetextconv</target>
        </trans-unit>
        <trans-unit id="7ebd2638a9921e5e179343b4427fc869a06f2204" translate="yes" xml:space="preserve">
          <source>diff.&amp;lt;driver&amp;gt;.command</source>
          <target state="translated">diff.&amp;lt;driver&amp;gt;.command</target>
        </trans-unit>
        <trans-unit id="61d06fdfc5aa3502d4b6a108e48a59fce26c6af2" translate="yes" xml:space="preserve">
          <source>diff.&amp;lt;driver&amp;gt;.textconv</source>
          <target state="translated">diff.&amp;lt;driver&amp;gt;.textconv</target>
        </trans-unit>
        <trans-unit id="ead4540609df4e51a37712a575abec00dc7e55b2" translate="yes" xml:space="preserve">
          <source>diff.&amp;lt;driver&amp;gt;.wordRegex</source>
          <target state="translated">diff.&amp;lt;driver&amp;gt;.wordRegex</target>
        </trans-unit>
        <trans-unit id="588167e2d54a806f940bc95d7efb7d86bfb75066" translate="yes" xml:space="preserve">
          <source>diff.&amp;lt;driver&amp;gt;.xfuncname</source>
          <target state="translated">diff.&amp;lt;driver&amp;gt;.xfuncname</target>
        </trans-unit>
        <trans-unit id="1aa3404f7e2e71cad7f5ed988403e8543a3c69da" translate="yes" xml:space="preserve">
          <source>diff.algorithm</source>
          <target state="translated">diff.algorithm</target>
        </trans-unit>
        <trans-unit id="0f8247f3bb857074064263268e6668bc675b886b" translate="yes" xml:space="preserve">
          <source>diff.autoRefreshIndex</source>
          <target state="translated">diff.autoRefreshIndex</target>
        </trans-unit>
        <trans-unit id="bf1e6527ec1ecc87c9aa892e1d248e935b08af96" translate="yes" xml:space="preserve">
          <source>diff.colorMoved</source>
          <target state="translated">diff.colorMoved</target>
        </trans-unit>
        <trans-unit id="17f5cafc5e8e284a925693c37b5e6cf682892ea2" translate="yes" xml:space="preserve">
          <source>diff.colorMovedWS</source>
          <target state="translated">diff.colorMovedWS</target>
        </trans-unit>
        <trans-unit id="be88a0a0926f0ec0095677f97e7ad676290b3606" translate="yes" xml:space="preserve">
          <source>diff.context</source>
          <target state="translated">diff.context</target>
        </trans-unit>
        <trans-unit id="504e46e3b7d5dfac355ed7626600d0b5de3ec8b1" translate="yes" xml:space="preserve">
          <source>diff.dirstat</source>
          <target state="translated">diff.dirstat</target>
        </trans-unit>
        <trans-unit id="f504a39405787fdfe57c004f1eb6cc3e0a445e22" translate="yes" xml:space="preserve">
          <source>diff.external</source>
          <target state="translated">diff.external</target>
        </trans-unit>
        <trans-unit id="724df5839bd28c42c831c8e74afe774a8b74cca2" translate="yes" xml:space="preserve">
          <source>diff.guitool</source>
          <target state="translated">diff.guitool</target>
        </trans-unit>
        <trans-unit id="78a8a530a7ec63e351c3937d0ea3e9c7b5c53bf6" translate="yes" xml:space="preserve">
          <source>diff.ignoreSubmodules</source>
          <target state="translated">diff.ignoreSubmodules</target>
        </trans-unit>
        <trans-unit id="2f87c8a57b25ea0080655c45cbc2964d86105934" translate="yes" xml:space="preserve">
          <source>diff.indentHeuristic</source>
          <target state="translated">diff.indentHeuristic</target>
        </trans-unit>
        <trans-unit id="6725f50766e063a286c387dfae2b760b7179eada" translate="yes" xml:space="preserve">
          <source>diff.interHunkContext</source>
          <target state="translated">diff.interHunkContext</target>
        </trans-unit>
        <trans-unit id="464cb39ab3bdafc5444bd68bf755682212470cc3" translate="yes" xml:space="preserve">
          <source>diff.mnemonicPrefix</source>
          <target state="translated">diff.mnemonicPrefix</target>
        </trans-unit>
        <trans-unit id="cdb032dcff9da1664b3a256e37700fe12cc96893" translate="yes" xml:space="preserve">
          <source>diff.noprefix</source>
          <target state="translated">diff.noprefix</target>
        </trans-unit>
        <trans-unit id="6c317017d113fddeae67f71ba0f6777e2b5871bb" translate="yes" xml:space="preserve">
          <source>diff.orderFile</source>
          <target state="translated">diff.orderFile</target>
        </trans-unit>
        <trans-unit id="a4d75f933b8d2d14f171e5e121ccc6333839f72b" translate="yes" xml:space="preserve">
          <source>diff.relative</source>
          <target state="translated">diff.relative</target>
        </trans-unit>
        <trans-unit id="62b4f867480cadbda91ca883571c3f0f4636ec5e" translate="yes" xml:space="preserve">
          <source>diff.renameLimit</source>
          <target state="translated">diff.renameLimit</target>
        </trans-unit>
        <trans-unit id="288ec59a707ad0e05ddeff32c90f0931bfa1abf6" translate="yes" xml:space="preserve">
          <source>diff.renames</source>
          <target state="translated">diff.renames</target>
        </trans-unit>
        <trans-unit id="ee391988a16ac1f7ecbd358f95c72fc4f48a9afb" translate="yes" xml:space="preserve">
          <source>diff.statGraphWidth</source>
          <target state="translated">diff.statGraphWidth</target>
        </trans-unit>
        <trans-unit id="385c04e351b4e623ba3a9fe788dcf29ec4558e41" translate="yes" xml:space="preserve">
          <source>diff.submodule</source>
          <target state="translated">diff.submodule</target>
        </trans-unit>
        <trans-unit id="afc54bc32125efd47622a9cab44636c5c6e922af" translate="yes" xml:space="preserve">
          <source>diff.suppressBlankEmpty</source>
          <target state="translated">diff.suppressBlankEmpty</target>
        </trans-unit>
        <trans-unit id="c19a767aeb832dda13c39ec76dc85ad7aee82efe" translate="yes" xml:space="preserve">
          <source>diff.tool</source>
          <target state="translated">diff.tool</target>
        </trans-unit>
        <trans-unit id="35dfdde1514e0e8beec0bc8558ccf4666f63c900" translate="yes" xml:space="preserve">
          <source>diff.wordRegex</source>
          <target state="translated">diff.wordRegex</target>
        </trans-unit>
        <trans-unit id="2e6f5f0361c86bf9ad2e357af0ffe5f130cf4d79" translate="yes" xml:space="preserve">
          <source>diff.wsErrorHighlight</source>
          <target state="translated">diff.wsErrorHighlight</target>
        </trans-unit>
        <trans-unit id="c6f1c4ebb1620fc2ac6d14ccb0aadb5ab259dc0c" translate="yes" xml:space="preserve">
          <source>diffcore-break</source>
          <target state="translated">diffcore-break</target>
        </trans-unit>
        <trans-unit id="b028ee38bbcbeeb7238e3bfd063237adeeba443a" translate="yes" xml:space="preserve">
          <source>diffcore-merge-broken</source>
          <target state="translated">diffcore-merge-broken</target>
        </trans-unit>
        <trans-unit id="db71223480c667aaa4574a26ad978574030dda8d" translate="yes" xml:space="preserve">
          <source>diffcore-order</source>
          <target state="translated">diffcore-order</target>
        </trans-unit>
        <trans-unit id="467c165cac1b0ba18ec8b5f79dedd2da85446437" translate="yes" xml:space="preserve">
          <source>diffcore-pickaxe</source>
          <target state="translated">diffcore-pickaxe</target>
        </trans-unit>
        <trans-unit id="6187904d774523191d18782a391f12275e67f3f6" translate="yes" xml:space="preserve">
          <source>diffcore-rename</source>
          <target state="translated">diffcore-rename</target>
        </trans-unit>
        <trans-unit id="f6300b5e173bb665f89b10ef769cbcd18db00e97" translate="yes" xml:space="preserve">
          <source>diffmerge</source>
          <target state="translated">diffmerge</target>
        </trans-unit>
        <trans-unit id="dfc45b9be8469f19a2b40b78d2350e275d971b41" translate="yes" xml:space="preserve">
          <source>difftool</source>
          <target state="translated">difftool</target>
        </trans-unit>
        <trans-unit id="144e9a5ad6d7b5676b4c5767c1e25ae3105559ea" translate="yes" xml:space="preserve">
          <source>difftool.&amp;lt;tool&amp;gt;.cmd</source>
          <target state="translated">difftool.&amp;lt;tool&amp;gt;.cmd</target>
        </trans-unit>
        <trans-unit id="a28c931a5c78d115db5afdc9d340ea605d7adf13" translate="yes" xml:space="preserve">
          <source>difftool.&amp;lt;tool&amp;gt;.path</source>
          <target state="translated">difftool.&amp;lt;tool&amp;gt;.path</target>
        </trans-unit>
        <trans-unit id="44894935c65135499020223eb3dca0286170b476" translate="yes" xml:space="preserve">
          <source>difftool.prompt</source>
          <target state="translated">difftool.prompt</target>
        </trans-unit>
        <trans-unit id="ff525f598fd509121274a14ac2fbfcc4f4088c02" translate="yes" xml:space="preserve">
          <source>difftool.trustExitCode</source>
          <target state="translated">difftool.trustExitCode</target>
        </trans-unit>
        <trans-unit id="68c1822a6b21b21d1582cf96e31c25f769027db0" translate="yes" xml:space="preserve">
          <source>diffuse</source>
          <target state="translated">diffuse</target>
        </trans-unit>
        <trans-unit id="d59e9acd29cb5ef98e7898689890a7079d11aba0" translate="yes" xml:space="preserve">
          <source>dimmed-zebra</source>
          <target state="translated">dimmed-zebra</target>
        </trans-unit>
        <trans-unit id="8d392f56d616a516ceabb82ed8906418bce4647d" translate="yes" xml:space="preserve">
          <source>directory</source>
          <target state="translated">directory</target>
        </trans-unit>
        <trans-unit id="33797be57bc3b248fc5bfafd60af55a61787ce85" translate="yes" xml:space="preserve">
          <source>dirty</source>
          <target state="translated">dirty</target>
        </trans-unit>
        <trans-unit id="9c5133a04600b8ce7520ccf8d3ffb307df06156d" translate="yes" xml:space="preserve">
          <source>display the trailers of the body as interpreted by &lt;a href=&quot;git-interpret-trailers&quot;&gt;git-interpret-trailers[1]&lt;/a&gt;. The &lt;code&gt;trailers&lt;/code&gt; string may be followed by a colon and zero or more comma-separated options:</source>
          <target state="translated">&lt;a href=&quot;git-interpret-trailers&quot;&gt;git-interpret-trailers [1]&lt;/a&gt;によって解釈されるように、本文のトレーラーを表示します。 &lt;code&gt;trailers&lt;/code&gt; 文字列は、結腸及びゼロ以上のカンマで区切られたオプションが続いてもよいです。</target>
        </trans-unit>
        <trans-unit id="d36ef8813bcb9b9bf679b7af99e6a1c56b310918" translate="yes" xml:space="preserve">
          <source>displayed as repository owner, preferably full name, or email, or both</source>
          <target state="translated">リポジトリの所有者として表示されます。</target>
        </trans-unit>
        <trans-unit id="8e6362104fa1f26faa92fbbf61d423a1671922aa" translate="yes" xml:space="preserve">
          <source>do not consider the on-disk file at all</source>
          <target state="translated">ディスク上のファイルを全く考慮しない</target>
        </trans-unit>
        <trans-unit id="e5fd9cfe0e8039111d54b588e77b2bb0cad41c3a" translate="yes" xml:space="preserve">
          <source>done</source>
          <target state="translated">done</target>
        </trans-unit>
        <trans-unit id="8106f0273274bf1355fb25f86c12166c7db5a680" translate="yes" xml:space="preserve">
          <source>drop [-q|--quiet] [&amp;lt;stash&amp;gt;]</source>
          <target state="translated">ドロップ[-q | --quiet] [&amp;lt;stash&amp;gt;]</target>
        </trans-unit>
        <trans-unit id="c4d01c9966dec002308719ba67feccf138a76bbf" translate="yes" xml:space="preserve">
          <source>e.g. those using: &lt;code&gt;$ git push/pull ssh://host.xz/pub/scm/project&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;$ git push/pull ssh://host.xz/pub/scm/project&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="054950f0be331d1dfaea2966ac925611fede3ef2" translate="yes" xml:space="preserve">
          <source>e.g: &lt;code&gt;void trace2_child_start(struct child_process *cmd)&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;void trace2_child_start(struct child_process *cmd)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="24d5501e7a7d473740d7a940309daf5454362989" translate="yes" xml:space="preserve">
          <source>e.g: &lt;code&gt;void trace2_thread_start(const char *thread_name)&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;void trace2_thread_start(const char *thread_name)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e52e25ac96e1d66591fa10b6bb147d974edb8fd9" translate="yes" xml:space="preserve">
          <source>ecmerge</source>
          <target state="translated">ecmerge</target>
        </trans-unit>
        <trans-unit id="9ead47a82a0d25985f22f10651d1f93b3abba317" translate="yes" xml:space="preserve">
          <source>edit</source>
          <target state="translated">edit</target>
        </trans-unit>
        <trans-unit id="f50ee013a90f77e88dab49109ac0f01191487f60" translate="yes" xml:space="preserve">
          <source>either per-instance configuration file (defaults to &lt;code&gt;gitweb_config.perl&lt;/code&gt; in the same directory as the installed gitweb), or if it does not exists then fallback system-wide configuration file (defaults to &lt;code&gt;/etc/gitweb.conf&lt;/code&gt;).</source>
          <target state="translated">いずれかのインスタンスごとの設定ファイル（デフォルト &lt;code&gt;gitweb_config.perl&lt;/code&gt; 設置gitwebと同じディレクトリに）、またはそれは、次いで、（デフォルトのフォールバックシステム全体の設定ファイルが存在しない場合 &lt;code&gt;/etc/gitweb.conf&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="053b84dedd551a21a9522c8b2a33970481edc307" translate="yes" xml:space="preserve">
          <source>emerge</source>
          <target state="translated">emerge</target>
        </trans-unit>
        <trans-unit id="14a9dc09e10179b15beaf94c0aed53904ace0336" translate="yes" xml:space="preserve">
          <source>encoding</source>
          <target state="translated">encoding</target>
        </trans-unit>
        <trans-unit id="57b54923aa1434283222d0eaa56f70e38ad84ac8" translate="yes" xml:space="preserve">
          <source>end with a directory separator (e.g. &lt;code&gt;foo/&lt;/code&gt; is invalid),</source>
          <target state="translated">ディレクトリ区切り文字で終了します（例： &lt;code&gt;foo/&lt;/code&gt; は無効です）。</target>
        </trans-unit>
        <trans-unit id="9de133ff4f5a5221c7e34904f52bc66b8ea1d389" translate="yes" xml:space="preserve">
          <source>eval_gettext</source>
          <target state="translated">eval_gettext</target>
        </trans-unit>
        <trans-unit id="5c37fe1cd392af8581c87c9ebad09ddefde4ca30" translate="yes" xml:space="preserve">
          <source>even after you edit it.</source>
          <target state="translated">編集しても</target>
        </trans-unit>
        <trans-unit id="a22dcc09943359cdcbf27e44706eaae877265da0" translate="yes" xml:space="preserve">
          <source>even if you succeed at the map-deletes-for-renames chicanery, you still technically violate backward compatibility because users are allowed to filter files in ways that depend upon topology of commits instead of filtering solely based on file contents or names (though this has not been observed in the wild).</source>
          <target state="translated">たとえ map-deletes-for-renames の奇抜さに成功したとしても、技術的には下位互換性に違反していることになります。</target>
        </trans-unit>
        <trans-unit id="61567b5963537d3e4c116e4e243b4d8668030d1a" translate="yes" xml:space="preserve">
          <source>evil merge</source>
          <target state="translated">あくごうごう</target>
        </trans-unit>
        <trans-unit id="1c311d013c6a2d19d11baf9941fcc2b0a7d2d78b" translate="yes" xml:space="preserve">
          <source>examdiff</source>
          <target state="translated">examdiff</target>
        </trans-unit>
        <trans-unit id="f3acce247faff36de39e9ee2f7d244c87ceed765" translate="yes" xml:space="preserve">
          <source>exclude</source>
          <target state="translated">exclude</target>
        </trans-unit>
        <trans-unit id="ab0133e2c5bb9344897f46dbe599f473d2c31692" translate="yes" xml:space="preserve">
          <source>exit after emitting the supplied error message to the standard error stream.</source>
          <target state="translated">は、供給されたエラーメッセージを標準エラーストリームに出力した後に終了します。</target>
        </trans-unit>
        <trans-unit id="06be2e47c93881b7e52c1e4e523459cc32ab0586" translate="yes" xml:space="preserve">
          <source>expect dangling commits - potential heads - due to lack of head information</source>
          <target state="translated">頭の情報が不足しているため、ぶら下がっているコミットを期待しています。</target>
        </trans-unit>
        <trans-unit id="20dda04ba85cc1d159e6c80f0473186d495ab0ca" translate="yes" xml:space="preserve">
          <source>expire</source>
          <target state="translated">expire</target>
        </trans-unit>
        <trans-unit id="f7b19a0813089b1f90306d291e49f7515586da63" translate="yes" xml:space="preserve">
          <source>export-ignore</source>
          <target state="translated">export-ignore</target>
        </trans-unit>
        <trans-unit id="c1c2115506d8681f0210e690b02b4309ccb2ee21" translate="yes" xml:space="preserve">
          <source>export-marks</source>
          <target state="translated">export-marks</target>
        </trans-unit>
        <trans-unit id="2ba613856b9cafe749b57a17fef7a035a5812808" translate="yes" xml:space="preserve">
          <source>export-subst</source>
          <target state="translated">export-subst</target>
        </trans-unit>
        <trans-unit id="26a55f8417100d8005c5698cbb7603aee8a068d7" translate="yes" xml:space="preserve">
          <source>extensions.objectFormat</source>
          <target state="translated">extensions.objectFormat</target>
        </trans-unit>
        <trans-unit id="7af7d180ad22fa7d636048be33daa6a7746de1e0" translate="yes" xml:space="preserve">
          <source>extra-branch-refs</source>
          <target state="translated">extra-branch-refs</target>
        </trans-unit>
        <trans-unit id="76cd4aef6e64ad9f67b4b64d624d8aa6b4973edb" translate="yes" xml:space="preserve">
          <source>extract patches from your branch, relative to master,</source>
          <target state="translated">ブランチからパッチを抽出します。</target>
        </trans-unit>
        <trans-unit id="7cb6efb98ba5972a9b5090dc2e517fe14d12cb04" translate="yes" xml:space="preserve">
          <source>false</source>
          <target state="translated">false</target>
        </trans-unit>
        <trans-unit id="21402ad97461d38b808636cb78d9cfb77a2900e2" translate="yes" xml:space="preserve">
          <source>fast-forward</source>
          <target state="translated">fast-forward</target>
        </trans-unit>
        <trans-unit id="bf93355b600cea9a1cf6ef1bf6513662965d8af7" translate="yes" xml:space="preserve">
          <source>fast-import</source>
          <target state="translated">fast-import</target>
        </trans-unit>
        <trans-unit id="be8bc29ad5542fc6804e84b6b43ad749090bf42a" translate="yes" xml:space="preserve">
          <source>fast-import accepts several commands to update the current repository and control the current import process. More detailed discussion (with examples) of each command follows later.</source>
          <target state="translated">fast-import は、現在のリポジトリを更新し、現在のインポートプロセスを制御するためのいくつかのコマンドを受け付けます。各コマンドの詳細な説明(例を挙げて)は後述します。</target>
        </trans-unit>
        <trans-unit id="7c20b6055ba0411d2c493a20017542051064924a" translate="yes" xml:space="preserve">
          <source>fast-import automatically moves active branches to inactive status based on a simple least-recently-used algorithm. The LRU chain is updated on each &lt;code&gt;commit&lt;/code&gt; command. The maximum number of active branches can be increased or decreased on the command line with --active-branches=.</source>
          <target state="translated">fast-importは、最も最近使用されていない単純なアルゴリズムに基づいて、アクティブなブランチを自動的に非アクティブなステータスに移動します。LRUチェーンは、 &lt;code&gt;commit&lt;/code&gt; コマンドごとに更新されます。アクティブなブランチの最大数は、コマンドラインで--active-branches =を使用して増減できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
