<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="41ba3127797e7497aaa54b06768281c0f54c0178" translate="yes" xml:space="preserve">
          <source>Show the working tree status</source>
          <target state="translated">作業木の状態を表示する</target>
        </trans-unit>
        <trans-unit id="4be15cef7828db991e29f252f2096ac52eaa87a1" translate="yes" xml:space="preserve">
          <source>Show three-way merge without touching index</source>
          <target state="translated">インデックスをタッチせずに三元マージを表示</target>
        </trans-unit>
        <trans-unit id="c011e03eeb56d943a760cc013e6f2e4eb1d425c0" translate="yes" xml:space="preserve">
          <source>Show tree entries even when going to recurse them. Has no effect if &lt;code&gt;-r&lt;/code&gt; was not passed. &lt;code&gt;-d&lt;/code&gt; implies &lt;code&gt;-t&lt;/code&gt;.</source>
          <target state="translated">再帰する場合でもツリーのエントリを表示します。 &lt;code&gt;-r&lt;/code&gt; が渡されなかった場合は効果がありません。 &lt;code&gt;-d&lt;/code&gt; は &lt;code&gt;-t&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="0ebf2c3da3729666fcca774c5c0088e26b46bc94" translate="yes" xml:space="preserve">
          <source>Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes the commit has. Note that this diff output doesn&amp;rsquo;t have its lines prefixed with &lt;code&gt;#&lt;/code&gt;. This diff will not be a part of the commit message. See the &lt;code&gt;commit.verbose&lt;/code&gt; configuration variable in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">HEADコミットとコミットメッセージテンプレートの下部にコミットされる内容との統一された差分を表示して、ユーザーがコミットにどのような変更を加えたかを思い出させることで、ユーザーがコミットを説明できるようにします。このdiff出力には、行の先頭に &lt;code&gt;#&lt;/code&gt; が付いていないことに注意してください。この差分はコミットメッセージの一部にはなりません。&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の &lt;code&gt;commit.verbose&lt;/code&gt; 設定変数を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ec5cbecb883dc178104f40a9f6290a06e20fc1c" translate="yes" xml:space="preserve">
          <source>Show uniquely abbreviated commit object as fallback.</source>
          <target state="translated">一意に省略されたコミットオブジェクトをフォールバックとして表示します。</target>
        </trans-unit>
        <trans-unit id="10c7ca24c353332c5b887c6b6a1d6dd7a457b5d5" translate="yes" xml:space="preserve">
          <source>Show unmerged files in the output (forces --stage)</source>
          <target state="translated">マージされていないファイルを出力に表示 (強制 --stage)</target>
        </trans-unit>
        <trans-unit id="b5d593f0c18fdb91296748ca1fac373587b954d6" translate="yes" xml:space="preserve">
          <source>Show untracked files.</source>
          <target state="translated">追跡されていないファイルを表示します。</target>
        </trans-unit>
        <trans-unit id="26b08d61663ae392b69c5a69245f4edf21293755" translate="yes" xml:space="preserve">
          <source>Show various types of objects</source>
          <target state="translated">様々な種類のオブジェクトを表示</target>
        </trans-unit>
        <trans-unit id="21c5bff92d5285947c85ec0c1484f22db009a919" translate="yes" xml:space="preserve">
          <source>Show what revision and author last modified each line of a file</source>
          <target state="translated">ファイルの各行を最終的に修正したリビジョンと作者を表示する</target>
        </trans-unit>
        <trans-unit id="966d3662ec6148441d1b868ba18110f8156c9e7e" translate="yes" xml:space="preserve">
          <source>Show what revision and author last modified each line of a file. The output of this mode is format-compatible with the output of &amp;lsquo;svn blame&amp;rsquo; by default. Like the SVN blame command, local uncommitted changes in the working tree are ignored; the version of the file in the HEAD revision is annotated. Unknown arguments are passed directly to &lt;code&gt;git blame&lt;/code&gt;.</source>
          <target state="translated">ファイルの各行を最後に変更したリビジョンと作成者を表示します。このモードの出力は、デフォルトで「svn blame」の出力とフォーマット互換です。SVN blameコマンドと同様に、作業ツリー内のローカルのコミットされていない変更は無視されます。HEADリビジョンのファイルのバージョンに注釈が付けられます。不明な引数は直接 &lt;code&gt;git blame&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="bf9833b3864a606f143f671880d0d7c492524c3a" translate="yes" xml:space="preserve">
          <source>Show what would be done and clean files interactively. See &amp;ldquo;Interactive mode&amp;rdquo; for details.</source>
          <target state="translated">何が行われるかを示し、ファイルをインタラクティブにクリーンアップします。詳細については、「インタラクティブモード」を参照してください。</target>
        </trans-unit>
        <trans-unit id="df9413d989d45b2c0aaf57aba32e9c05293cab52" translate="yes" xml:space="preserve">
          <source>Show what would be done, without making any changes.</source>
          <target state="translated">何も変更を加えずに、何をするかを表示します。</target>
        </trans-unit>
        <trans-unit id="596b94f13704cef1df2f70e0b5afc140a351ff74" translate="yes" xml:space="preserve">
          <source>Show whole function as context lines for each change. The function names are determined in the same way as &lt;code&gt;git diff&lt;/code&gt; works out patch hunk headers (see &lt;code&gt;Defining a custom hunk-header&lt;/code&gt; in &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt;).</source>
          <target state="translated">関数全体を各変更のコンテキスト行として表示します。関数名は、 &lt;code&gt;git diff&lt;/code&gt; がパッチハンクヘッダーを処理するのと同じ方法で決定されます（&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;での &lt;code&gt;Defining a custom hunk-header&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="be4ca0a0825cd627301347d0b898edf805764f04" translate="yes" xml:space="preserve">
          <source>Show whole surrounding functions of changes.</source>
          <target state="translated">変更の周囲の機能全体を表示します。</target>
        </trans-unit>
        <trans-unit id="468ba140a3b94d2f9cd6ef93cfa9cab1327c9537" translate="yes" xml:space="preserve">
          <source>Show words as &lt;code&gt;[-removed-]&lt;/code&gt; and &lt;code&gt;{+added+}&lt;/code&gt;. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</source>
          <target state="translated">単語を &lt;code&gt;[-removed-]&lt;/code&gt; および &lt;code&gt;{+added+}&lt;/code&gt; として表示します。区切り文字が入力に含まれていてもエスケープしようとしないため、出力があいまいになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="853a8e226495d515cddaf8f8812833ecd070bbe7" translate="yes" xml:space="preserve">
          <source>Showing commits unique to a given branch</source>
          <target state="translated">指定されたブランチに固有のコミットの表示</target>
        </trans-unit>
        <trans-unit id="96ca3a302ef6077a82014da5f00857782e6cb86a" translate="yes" xml:space="preserve">
          <source>Shown when &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; gives up trying to guess based on the source and destination refs what remote ref namespace the source belongs in, but where we can still suggest that the user push to either refs/heads/* or refs/tags/* based on the type of the source object.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;がソースと宛先の参照に基づいて推測を試みるのをやめたときに、ソースが属しているリモート参照名前空間を示しますが、ユーザーがrefs / heads / *またはrefs / tagsにプッシュすることを提案できます/ *ソースオブジェクトのタイプに基づきます。</target>
        </trans-unit>
        <trans-unit id="732728a3dd494eca2577139ba51741f23db676b1" translate="yes" xml:space="preserve">
          <source>Shown when &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; rejects a forced update of a branch when its remote-tracking ref has updates that we do not have locally.</source>
          <target state="translated">リモートトラッキング参照にローカルにない更新がある場合に、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;がブランチの強制更新を拒否したときに表示されます。</target>
        </trans-unit>
        <trans-unit id="75d7e8b680f4e534527cb3c486bef0af3659328c" translate="yes" xml:space="preserve">
          <source>Shown when &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; rejects an update that does not qualify for fast-forwarding (e.g., a tag.)</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;が早送りに適さない更新（タグなど）を拒否したときに表示されます。</target>
        </trans-unit>
        <trans-unit id="3a0a872703503f071b91634941e8be2dc5533cd1" translate="yes" xml:space="preserve">
          <source>Shown when &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; rejects an update that tries to overwrite a remote ref that points at an object that is not a commit-ish, or make the remote ref point at an object that is not a commit-ish.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;が、コミットっぽくないオブジェクトを指すリモート参照を上書きしようとしたり、コミットっぽくないオブジェクトをリモート参照にしたりする更新を拒否したときに表示されます。</target>
        </trans-unit>
        <trans-unit id="3b4c04c7663321c0bb15512a5590b839a243ed3d" translate="yes" xml:space="preserve">
          <source>Shown when &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; rejects an update that tries to overwrite a remote ref that points at an object we do not have.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;が、持っていないオブジェクトを指すリモート参照を上書きしようとする更新を拒否したときに表示されます。</target>
        </trans-unit>
        <trans-unit id="78b784f23e7ef12a1020b996b898b9ff902a30e8" translate="yes" xml:space="preserve">
          <source>Shown when &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; computes the ahead/behind counts for a local ref compared to its remote tracking ref, and that calculation takes longer than expected. Will not appear if &lt;code&gt;status.aheadBehind&lt;/code&gt; is false or the option &lt;code&gt;--no-ahead-behind&lt;/code&gt; is given.</source>
          <target state="translated">場合示さ&lt;a href=&quot;git-status&quot;&gt;gitのステータス[1]は&lt;/a&gt;、そのリモートトラッキングrefに比べてローカルREFのためにカウント背後/前方を計算し、その計算が予想以上かかります。 &lt;code&gt;status.aheadBehind&lt;/code&gt; がfalseの場合、またはオプション &lt;code&gt;--no-ahead-behind&lt;/code&gt; が指定されている場合は表示されません。</target>
        </trans-unit>
        <trans-unit id="d338c5b596db1d1f3b4bc876559fe0665e8ac5fb" translate="yes" xml:space="preserve">
          <source>Shows &amp;lt;n&amp;gt; most recent ref-log entries for the given ref. If &amp;lt;base&amp;gt; is given, &amp;lt;n&amp;gt; entries going back from that entry. &amp;lt;base&amp;gt; can be specified as count or date. When no explicit &amp;lt;ref&amp;gt; parameter is given, it defaults to the current branch (or &lt;code&gt;HEAD&lt;/code&gt; if it is detached).</source>
          <target state="translated">指定されたrefの最新のref-logエントリを&amp;lt;n&amp;gt;件表示します。&amp;lt;base&amp;gt;が指定されている場合、そのエントリから戻る&amp;lt;n&amp;gt;エントリ。&amp;lt;base&amp;gt;は、カウントまたは日付として指定できます。明示的な&amp;lt;ref&amp;gt;パラメータが指定されていない場合、デフォルトで現在のブランチ（またはデタッチされている場合は &lt;code&gt;HEAD&lt;/code&gt; ）に設定されます。</target>
        </trans-unit>
        <trans-unit id="145d28125d096ddf08f1e26c4d9787f99dd5cc7e" translate="yes" xml:space="preserve">
          <source>Shows all commits that are in any of local branches but not in any of remote-tracking branches for &lt;code&gt;origin&lt;/code&gt; (what you have that origin doesn&amp;rsquo;t).</source>
          <target state="translated">ローカルブランチのいずれかにあるが、 &lt;code&gt;origin&lt;/code&gt; リモート追跡ブランチにはないすべてのコミットを表示します（オリジンが持っていないもの）。</target>
        </trans-unit>
        <trans-unit id="c51c52f011be107f5e19468bb7f02daf26af2024" translate="yes" xml:space="preserve">
          <source>Shows all commits that are in local master but not in any remote repository master branches.</source>
          <target state="translated">ローカルマスターにあるコミットで、リモートリポジトリのマスターブランチにはないコミットをすべて表示します。</target>
        </trans-unit>
        <trans-unit id="10371d1293071dacd448b9fdd202c3afd277b14e" translate="yes" xml:space="preserve">
          <source>Shows commit logs and diff output each commit introduces.</source>
          <target state="translated">各コミットが導入したコミットログと差分出力を表示します。</target>
        </trans-unit>
        <trans-unit id="476dac31e594be06f217fa896bee0115d58f6b4c" translate="yes" xml:space="preserve">
          <source>Shows history of the file or directory in a given repository path, starting from given revision (defaults to HEAD, i.e. default branch).</source>
          <target state="translated">指定されたリポジトリパス内のファイルやディレクトリの履歴を、指定されたリビジョンから表示します(デフォルトは HEAD、つまりデフォルトのブランチ)。</target>
        </trans-unit>
        <trans-unit id="952b827e77460f64206eeaa3be7cd6994665a085" translate="yes" xml:space="preserve">
          <source>Shows how the function &lt;code&gt;main()&lt;/code&gt; in the file &lt;code&gt;main.c&lt;/code&gt; evolved over time.</source>
          <target state="translated">ファイル &lt;code&gt;main.c&lt;/code&gt; の関数 &lt;code&gt;main()&lt;/code&gt; が時間とともにどのように進化したかを示します。</target>
        </trans-unit>
        <trans-unit id="ce9fdc182e7532561a25c9e84afbf603141702a1" translate="yes" xml:space="preserve">
          <source>Shows information about a file or directory similar to what &amp;lsquo;svn info&amp;rsquo; provides. Does not currently support a -r/--revision argument. Use the --url option to output only the value of the &lt;code&gt;URL:&lt;/code&gt; field.</source>
          <target state="translated">「svn info」が提供するものと同様のファイルまたはディレクトリに関する情報を表示します。現在-r /-revision引数をサポートしていません。--urlオプションを使用して、 &lt;code&gt;URL:&lt;/code&gt; フィールドの値のみを出力します。</target>
        </trans-unit>
        <trans-unit id="ca1b824d0d56099189f69630ad24bacce78fa10f" translate="yes" xml:space="preserve">
          <source>Shows information about a specific commit in a repository. The &lt;code&gt;commit&lt;/code&gt; view shows information about commit in more detail, the &lt;code&gt;commitdiff&lt;/code&gt; action shows changeset for given commit.</source>
          <target state="translated">リポジトリ内の特定のコミットに関する情報を表示します。 &lt;code&gt;commit&lt;/code&gt; ビュー番組を情報は、およそ、より詳細にコミット &lt;code&gt;commitdiff&lt;/code&gt; のコミット特定のアクションショーのチェンジセットを。</target>
        </trans-unit>
        <trans-unit id="ab228fa7c7d65eb09f46d0e73fe8d72b79bc229a" translate="yes" xml:space="preserve">
          <source>Shows log information (commit message or just commit subject) for a given branch (starting from given revision).</source>
          <target state="translated">指定されたブランチのログ情報 (コミットメッセージまたはコミット件名のみ)を表示します (指定されたリビジョンから始まります)。</target>
        </trans-unit>
        <trans-unit id="a3433f3c29ab88ea9167add81dd6a17e06d4de7e" translate="yes" xml:space="preserve">
          <source>Shows one or more objects (blobs, trees, tags and commits).</source>
          <target state="translated">1つ以上のオブジェクト(ブロブ、ツリー、タグ、コミット)を表示します。</target>
        </trans-unit>
        <trans-unit id="c89f1cda347c61bcda5c7bb78673af53b8dae0ad" translate="yes" xml:space="preserve">
          <source>Shows only commits that are NOT on the first branch given. This helps track topic branches by hiding any commit that is already in the main line of development. When given &quot;git show-branch --topics master topic1 topic2&quot;, this will show the revisions given by &quot;git rev-list ^master topic1 topic2&quot;</source>
          <target state="translated">最初に指定したブランチにないコミットのみを表示します。これは、すでに開発のメインラインにあるコミットを隠すことでトピックブランチを追跡するのに役立ちます。git show-branch --topics master topic1 topic2&quot; と指定すると、&quot;git rev-list ^master topic1 topic2&quot; で指定したリビジョンを表示します。</target>
        </trans-unit>
        <trans-unit id="ad855617a566df1f282b86f94f82b5d862a150d3" translate="yes" xml:space="preserve">
          <source>Shows the Subversion externals. Use -r/--revision to specify a specific revision.</source>
          <target state="translated">Subversion の外観を表示します。特定のリビジョンを指定するには -r/--revision を使用します。</target>
        </trans-unit>
        <trans-unit id="71ee8b01832959c514dd0597fe4e33b8eee16c88" translate="yes" xml:space="preserve">
          <source>Shows the blame (also called annotation) information for a file. On a per line basis it shows the revision in which that line was last changed and the user that committed the change. The incremental version (which if configured is used automatically when JavaScript is enabled) uses Ajax to incrementally add blame info to the contents of given file.</source>
          <target state="translated">ファイルの注釈(注釈とも呼ばれる)情報を表示します。行単位で、その行が最後に変更されたリビジョンと、変更をコミットしたユーザーを表示します。インクリメンタルバージョン (設定されている場合、JavaScript が有効なときに自動的に使用されます)は、Ajax を使用して、与えられたファイルの内容に注釈情報をインクリメンタルに追加します。</target>
        </trans-unit>
        <trans-unit id="048347ade13621e5b8c85cb1ac7da77939e1ffa9" translate="yes" xml:space="preserve">
          <source>Shows the commit ancestry graph starting from the commits named with &amp;lt;rev&amp;gt;s or &amp;lt;glob&amp;gt;s (or all refs under refs/heads and/or refs/tags) semi-visually.</source>
          <target state="translated">&amp;lt;rev&amp;gt;または&amp;lt;glob&amp;gt;（またはrefs / headsおよび/またはrefs / tagsの下のすべての参照）で名前が付けられたコミットから始まるコミット先祖グラフを半視覚的に表示します。</target>
        </trans-unit>
        <trans-unit id="d974b70c2c30c4540e25d821a52ee3e8a89faf35" translate="yes" xml:space="preserve">
          <source>Shows the commit logs.</source>
          <target state="translated">コミットログを表示します。</target>
        </trans-unit>
        <trans-unit id="afa4aeeb0e59c57a072646fb612e51228d9e8ce5" translate="yes" xml:space="preserve">
          <source>Shows the commits that changed &lt;code&gt;builtin/rev-list.c&lt;/code&gt;, including those commits that occurred before the file was given its present name.</source>
          <target state="translated">&lt;code&gt;builtin/rev-list.c&lt;/code&gt; を変更したコミットを表示します。ファイルに現在の名前が付けられる前に発生したコミットも含まれます。</target>
        </trans-unit>
        <trans-unit id="0d2116a149d849234c7b09c554d651b4894474fc" translate="yes" xml:space="preserve">
          <source>Shows the contents of the file &lt;code&gt;Documentation/README&lt;/code&gt; as they were current in the 10th last commit of the branch &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">ファイル &lt;code&gt;Documentation/README&lt;/code&gt; の内容が、 &lt;code&gt;next&lt;/code&gt; のブランチの最後の10番目のコミットで最新であったときに表示されます。</target>
        </trans-unit>
        <trans-unit id="ccc9b587b1ac64f4516513aa59159ddedbb8a45f" translate="yes" xml:space="preserve">
          <source>Shows the difference between two revisions of the same file.</source>
          <target state="translated">同じファイルの2つのリビジョンの違いを表示します。</target>
        </trans-unit>
        <trans-unit id="8c5916992e873dd9df6491dab9446ed99d2ca43b" translate="yes" xml:space="preserve">
          <source>Shows the files and directories in a given repository path, at given revision. This is default command if no action is specified in the URL, and path is given.</source>
          <target state="translated">指定されたリポジトリパス内のファイルとディレクトリを、指定されたリビジョンで表示します。URL にアクションを指定せず、パスを指定した場合のデフォルトのコマンドです。</target>
        </trans-unit>
        <trans-unit id="890a038d1a0efbf86457550ddb0f94462d132854" translate="yes" xml:space="preserve">
          <source>Shows the history including change diffs, but only from the &amp;ldquo;main branch&amp;rdquo; perspective, skipping commits that come from merged branches, and showing full diffs of changes introduced by the merges. This makes sense only when following a strict policy of merging all topic branches when staying on a single integration branch.</source>
          <target state="translated">変更の差分を含む履歴を表示しますが、「メインブランチ」の観点からのみ、マージされたブランチからのコミットをスキップし、マージによって導入された変更の完全な差分を表示します。これは、単一の統合ブランチにとどまるときにすべてのトピックブランチをマージするという厳密なポリシーに従う場合にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="a6e093f4d97154b146a36fee068be195950aadfd" translate="yes" xml:space="preserve">
          <source>Shows the subject of the commit pointed to by the tag &lt;code&gt;v1.0.0&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;v1.0.0&lt;/code&gt; が指すコミットの件名を表示します。</target>
        </trans-unit>
        <trans-unit id="9b44c59ff3bc267fd7a4cbc7d7224ea23d69056e" translate="yes" xml:space="preserve">
          <source>Shows the tag &lt;code&gt;v1.0.0&lt;/code&gt;, along with the object the tags points at.</source>
          <target state="translated">タグ &lt;code&gt;v1.0.0&lt;/code&gt; と、タグが指すオブジェクトを表示します。</target>
        </trans-unit>
        <trans-unit id="092526538596a5fe7b0994948947cb6672086546" translate="yes" xml:space="preserve">
          <source>Shows the tree pointed to by the tag &lt;code&gt;v1.0.0&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;v1.0.0&lt;/code&gt; が指すツリーを表示します。</target>
        </trans-unit>
        <trans-unit id="436f07afaaab4f38cb1e7cf08118570b5794b7ea" translate="yes" xml:space="preserve">
          <source>Side note: Unfortunately, people tend to fixate on the written-in-shell aspect and periodically ask if git-filter-branch could be rewritten in another language to fix the performance issues. Not only does that ignore the bigger intrinsic problems with the design, it&amp;rsquo;d help less than you&amp;rsquo;d expect: if git-filter-branch itself were not shell, then the convenience functions (map(), skip_commit(), etc) and the &lt;code&gt;--setup&lt;/code&gt; argument could no longer be executed once at the beginning of the program but would instead need to be prepended to every user filter (and thus re-executed with every commit).</source>
          <target state="translated">補足：残念ながら、人々はシェルで書かれた側面に固執し、パフォーマンスの問題を修正するためにgit-filter-branchを別の言語で書き換えられるかどうかを定期的に尋ねる傾向があります。これは、設計に伴うより大きな固有の問題を無視するだけでなく、期待よりも役立つでしょう：git-filter-branch自体がシェルでない場合、便利な関数（map（）、skip_commit（）など）そして &lt;code&gt;--setup&lt;/code&gt; 引数は、もはやプログラムの先頭で一度に実行することはできなかったが、代わりに、すべてのユーザフィルタの前に追加される（したがって、すべてをコミット再実行）必要があります。</target>
        </trans-unit>
        <trans-unit id="5a31cdd9cba3408afdcd7a253a0ac442839b0979" translate="yes" xml:space="preserve">
          <source>Side note: it may be possible to do step 2 with about:config and the following settings but no one&amp;rsquo;s tried yet.</source>
          <target state="translated">補足：about：configと以下の設定でステップ2を実行できる可能性がありますが、まだ誰も試していません。</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="ff3ca843a6395cdc7d40686539d66fc535a8aaed" translate="yes" xml:space="preserve">
          <source>Signals the end of options; the rest of the parameters are &amp;lt;pathspec&amp;gt; limiters.</source>
          <target state="translated">オプションの終了を通知します。残りのパラメーターは&amp;lt;pathspec&amp;gt;リミッターです。</target>
        </trans-unit>
        <trans-unit id="221dd464fe44b38e2417a0ae6570e07534a3d7ea" translate="yes" xml:space="preserve">
          <source>Signing annotated tags during import from within fast-import is not supported. Trying to include your own PGP/GPG signature is not recommended, as the frontend does not (easily) have access to the complete set of bytes which normally goes into such a signature. If signing is required, create lightweight tags from within fast-import with &lt;code&gt;reset&lt;/code&gt;, then create the annotated versions of those tags offline with the standard &lt;code&gt;git tag&lt;/code&gt; process.</source>
          <target state="translated">高速インポート内からのインポート中の注釈付きタグへの署名はサポートされていません。フロントエンドが（簡単に）通常はこのような署名に入るバイトの完全なセットにアクセスできないため、独自のPGP / GPG署名を含めることはお勧めしません。署名が必要な場合は、 &lt;code&gt;reset&lt;/code&gt; を使用してfast-import内から軽量タグを作成し、標準の &lt;code&gt;git tag&lt;/code&gt; プロセスを使用して、これらのタグの注釈付きバージョンをオフラインで作成します。</target>
        </trans-unit>
        <trans-unit id="e73ba37a846fd05171a6c58829f1ab0aa4e069d7" translate="yes" xml:space="preserve">
          <source>Silently overwrite ignored files from the merge result. This is the default behavior. Use &lt;code&gt;--no-overwrite-ignore&lt;/code&gt; to abort.</source>
          <target state="translated">無視したファイルをマージ結果からサイレントに上書きします。これがデフォルトの動作です。中止 &lt;code&gt;--no-overwrite-ignore&lt;/code&gt; 、-no-overwrite-ignoreを使用します。</target>
        </trans-unit>
        <trans-unit id="a7ca941070a3e177fd03230132f7162630714492" translate="yes" xml:space="preserve">
          <source>Silently overwrite ignored files when switching branches. This is the default behavior. Use &lt;code&gt;--no-overwrite-ignore&lt;/code&gt; to abort the operation when the new branch contains ignored files.</source>
          <target state="translated">ブランチを切り替えるときに無視されたファイルをサイレントに上書きします。これがデフォルトの動作です。新しいブランチに無視されたファイルが含まれている場合、操作を中止するには &lt;code&gt;--no-overwrite-ignore&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ffd6334e8fa69c33df5ff56f9d3009483e17a61e" translate="yes" xml:space="preserve">
          <source>Similar to --depth, except it specifies the number of commits from the current shallow boundary instead of from the tip of each remote branch history.</source>
          <target state="translated">depth と似ていますが、リモートブランチ履歴の先端からではなく、現在の浅い境界からのコミット数を指定します。</target>
        </trans-unit>
        <trans-unit id="16434785e2f2781f48016d9fab6f521e71729a0f" translate="yes" xml:space="preserve">
          <source>Similar to -u. But when re-coding, the charset specified here is used instead of the one specified by i18n.commitencoding or UTF-8.</source>
          <target state="translated">uと似ています。ただし、リコーディングの際には、i18n.commitencodingやUTF-8で指定された文字セットではなく、ここで指定された文字セットが使用されます。</target>
        </trans-unit>
        <trans-unit id="35df8b1f29f7a7b94cf0adfb128190781a631c4c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--create&lt;/code&gt; except that if &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; already exists, it will be reset to &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt;. This is a convenient shortcut for:</source>
          <target state="translated">&lt;code&gt;--create&lt;/code&gt; と同じですが、 &lt;code&gt;&amp;lt;new-branch&amp;gt;&lt;/code&gt; がすでに存在する場合は、 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; にリセットされます。これは次の場合の便利なショートカットです。</target>
        </trans-unit>
        <trans-unit id="a329dc4873c426988eca07322671d0e252450f5a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--file&lt;/code&gt; but use the given blob instead of a file. E.g. you can use &lt;code&gt;master:.gitmodules&lt;/code&gt; to read values from the file &lt;code&gt;.gitmodules&lt;/code&gt; in the master branch. See &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for a more complete list of ways to spell blob names.</source>
          <target state="translated">&lt;code&gt;--file&lt;/code&gt; に似ていますが、ファイルの代わりに指定されたblobを使用します。たとえば、 &lt;code&gt;master:.gitmodules&lt;/code&gt; を使用して、masterブランチの &lt;code&gt;.gitmodules&lt;/code&gt; ファイルから値を読み取ることができます。blob名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt;「リビジョンの指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="96ae9e148f9a848728ba835436ff9b06a051bf18" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--local&lt;/code&gt; except that &lt;code&gt;.git/config.worktree&lt;/code&gt; is read from or written to if &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is present. If not it&amp;rsquo;s the same as &lt;code&gt;--local&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extensions.worktreeConfig&lt;/code&gt; が存在する場合に &lt;code&gt;.git/config.worktree&lt;/code&gt; が読み書きされることを除いて、 &lt;code&gt;--local&lt;/code&gt; と同様です。そうでない場合は &lt;code&gt;--local&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="9921875dc5f741363cc389c12f0a866da77aa3f9" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--objects-edge&lt;/code&gt;, but it tries harder to find excluded commits at the cost of increased time. This is used instead of &lt;code&gt;--objects-edge&lt;/code&gt; to build &amp;ldquo;thin&amp;rdquo; packs for shallow repositories.</source>
          <target state="translated">&lt;code&gt;--objects-edge&lt;/code&gt; に似ていますが、時間の増加を犠牲にして、除外されたコミットを見つけるのが難しくなります。これは、 &lt;code&gt;--objects-edge&lt;/code&gt; 代わりに使用され、浅いリポジトリ用の「シン」パックを構築します。</target>
        </trans-unit>
        <trans-unit id="827a1dc116e1ce95f15ed3122df77ff565d151ab" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--objects&lt;/code&gt;, but also print the IDs of excluded commits prefixed with a &amp;ldquo;-&amp;rdquo; character. This is used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; to build a &amp;ldquo;thin&amp;rdquo; pack, which records objects in deltified form based on objects contained in these excluded commits to reduce network traffic.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; に似ていますが、先頭に「-」文字が付いた除外されたコミットのIDも出力します。これは&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt;によって使用され、「シン」パックを構築します。このパックは、これらの除外されたコミットに含まれるオブジェクトに基づいて、オブジェクトを詳細化された形式で記録し、ネットワークトラフィックを削減します。</target>
        </trans-unit>
        <trans-unit id="92613f50c8128533a943f904d4fab448ede98701" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--show-origin&lt;/code&gt; in that it augments the output of all queried config options with the scope of that value (local, global, system, command).</source>
          <target state="translated">&lt;code&gt;--show-origin&lt;/code&gt; と同様に、クエリされたすべての構成オプションの出力を、その値のスコープ（ローカル、グローバル、システム、コマンド）で拡張します。</target>
        </trans-unit>
        <trans-unit id="db4263bd2603c01331f2d853a8cad6132476aed7" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--stat&lt;/code&gt;, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two &lt;code&gt;-&lt;/code&gt; instead of saying &lt;code&gt;0 0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--stat&lt;/code&gt; に似ていますが、追加された行と削除された行の数を10進表記で示し、パス名を省略せずに示します。バイナリファイルの場合は、2を出力 &lt;code&gt;-&lt;/code&gt; の代わりに言っ &lt;code&gt;0 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="507e19add19af137dd267ca439cffb2e494aaec7" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;--stat&lt;/code&gt;, but shows the number of added and deleted lines in decimal notation and the pathname without abbreviation, to make it more machine friendly. For binary files, outputs two &lt;code&gt;-&lt;/code&gt; instead of saying &lt;code&gt;0 0&lt;/code&gt;. Turns off &quot;apply&quot;.</source>
          <target state="translated">&lt;code&gt;--stat&lt;/code&gt; に似ていますが、追加された行と削除された行の数を10進表記で示し、パス名を省略形なしで示します。バイナリファイルの場合は、2を出力 &lt;code&gt;-&lt;/code&gt; の代わりに言っ &lt;code&gt;0 0&lt;/code&gt; 。「適用」をオフにします。</target>
        </trans-unit>
        <trans-unit id="cebb3f179c2f7afdfbf89dc9db3668db1b27ceee" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;-t&lt;/code&gt;, but use lowercase letters for files that are marked as &lt;code&gt;assume unchanged&lt;/code&gt; (see &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; に似ていますが、 &lt;code&gt;assume unchanged&lt;/code&gt; されないと見なされるようにマークされているファイルには小文字を使用します（&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c8a85313dff4970a1ca58c4ac403a9e5f1e1fd26" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;-t&lt;/code&gt;, but use lowercase letters for files that are marked as &lt;code&gt;fsmonitor valid&lt;/code&gt; (see &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;-t&lt;/code&gt; に似ていますが、 &lt;code&gt;fsmonitor valid&lt;/code&gt; としてマークされているファイルには小文字を使用します（&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d753bc37a0732c319a3b637b8b9f6c853acf890c" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;list&lt;/code&gt;, except that it is used if and only if the caller wants to the resulting ref list to prepare push commands. A helper supporting both push and fetch can use this to distinguish for which operation the output of &lt;code&gt;list&lt;/code&gt; is going to be used, possibly reducing the amount of work that needs to be performed.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; に似ていますが、呼び出し元が結果の参照リストにプッシュコマンドを準備する場合にのみ使用されます。プッシュとフェッチの両方をサポートするヘルパーは、これを使用して、 &lt;code&gt;list&lt;/code&gt; の出力が使用される予定の操作を区別できます。これにより、実行する必要のある作業の量を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="d877d80bc2ddec8772b0999fdcc01984ec807892" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;zebra&lt;/code&gt;, but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting. &lt;code&gt;dimmed_zebra&lt;/code&gt; is a deprecated synonym.</source>
          <target state="translated">&lt;code&gt;zebra&lt;/code&gt; に似ていますが、移動したコードの不要な部分の追加の調光が実行されます。隣接する2つのブロックの境界線は興味深いものと見なされ、残りは興味深いものではありません。 &lt;code&gt;dimmed_zebra&lt;/code&gt; は非推奨の同義語です。</target>
        </trans-unit>
        <trans-unit id="bf8bcfbd909889dac33d6d2f89b63bfd39d6ccea" translate="yes" xml:space="preserve">
          <source>Similar to Git&amp;rsquo;s &lt;code&gt;remote.&amp;lt;name&amp;gt;.pushurl&lt;/code&gt;, this key is designed to be used in cases where &lt;code&gt;url&lt;/code&gt; points to an SVN repository via a read-only transport, to provide an alternate read/write transport. It is assumed that both keys point to the same repository. Unlike &lt;code&gt;commiturl&lt;/code&gt;, &lt;code&gt;pushurl&lt;/code&gt; is a base path. If either &lt;code&gt;commiturl&lt;/code&gt; or &lt;code&gt;pushurl&lt;/code&gt; could be used, &lt;code&gt;commiturl&lt;/code&gt; takes precedence.</source>
          <target state="translated">Gitの &lt;code&gt;remote.&amp;lt;name&amp;gt;.pushurl&lt;/code&gt; と同様に、このキーは、 &lt;code&gt;url&lt;/code&gt; が読み取り専用トランスポートを介してSVNリポジトリを指す場合に使用され、代替の読み取り/書き込みトランスポートを提供するように設計されています。両方のキーが同じリポジトリを指していると想定されています。 &lt;code&gt;commiturl&lt;/code&gt; とは異なり、 &lt;code&gt;pushurl&lt;/code&gt; は基本パスです。 &lt;code&gt;commiturl&lt;/code&gt; または &lt;code&gt;pushurl&lt;/code&gt; のいずれかを使用できる場合は、 &lt;code&gt;commiturl&lt;/code&gt; が優先されます。</target>
        </trans-unit>
        <trans-unit id="91682fd49c343f959bbb6403f6f6863feba84482" translate="yes" xml:space="preserve">
          <source>Similar to above:</source>
          <target state="translated">上記に似ています。</target>
        </trans-unit>
        <trans-unit id="e5c2486b9a7763634d7231fd9214964f9084de7d" translate="yes" xml:space="preserve">
          <source>Similar to the above, but Apache can be used to return static files that are stored on disk. On many systems this may be more efficient as Apache can ask the kernel to copy the file contents from the file system directly to the network:</source>
          <target state="translated">上記に似ていますが、Apache はディスクに保存されている静的なファイルを返すのに使うことができます。多くのシステムでは、ファイルシステムからネットワークに直接ファイルの内容を コピーするようにカーネルに要求できるので、これはより効率的かもしれません。</target>
        </trans-unit>
        <trans-unit id="e5d7cb2c6d73b9150cefdf2e64e945bbe4a78cee" translate="yes" xml:space="preserve">
          <source>Similar to the apply backend, by default the merge backend drops commits that become empty unless -i/--interactive is specified (in which case it stops and asks the user what to do). The merge backend also has an --empty={drop,keep,ask} option for changing the behavior of handling commits that become empty.</source>
          <target state="translated">apply バックエンドと同様に、デフォルトでは -i/--interactive が指定されていない限り、空になったコミットを削除します (その場合は停止してユーザに何をすべきかを尋ねます)。また、マージバックエンドには --empty={drop,keep,ask}オプションがあり、空になったコミットを処理する際の動作を変更することができます。</target>
        </trans-unit>
        <trans-unit id="1d010174e63754716183c2af28e1291061e29078" translate="yes" xml:space="preserve">
          <source>Similar to the useSvmProps option; this is for users of the svnsync(1) command distributed with SVN 1.4.x and later.</source>
          <target state="translated">useSvmProps オプションに似ています。これは SVN 1.4.x 以降で配布されている svnsync(1)コマンドのユーザのためのものです。</target>
        </trans-unit>
        <trans-unit id="742718eb04c74d19e18742babbe16ee5d5955f76" translate="yes" xml:space="preserve">
          <source>Similar to the useSvmProps option; this is for users who need to remap the UUID manually. This may be useful in situations where the original UUID is not available via either useSvmProps or useSvnsyncProps.</source>
          <target state="translated">useSvmPropsオプションと同様に、これはUUIDを手動でリマップする必要があるユーザーのためのものです。これは、useSvmPropsまたはuseSvnsyncPropsのいずれかで元のUUIDが利用できない状況で有用かもしれません。</target>
        </trans-unit>
        <trans-unit id="2b4ceb453e6bfcacc89ab013230d146d7c2efc84" translate="yes" xml:space="preserve">
          <source>Similar to two-line header for traditional &lt;code&gt;unified&lt;/code&gt; diff format, &lt;code&gt;/dev/null&lt;/code&gt; is used to signal created or deleted files.</source>
          <target state="translated">従来の &lt;code&gt;unified&lt;/code&gt; diff形式の2行ヘッダーと同様に、 &lt;code&gt;/dev/null&lt;/code&gt; は、作成または削除されたファイルを通知するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9acea96e7cbe682e6caa9d2b57eedce27f5ebab4" translate="yes" xml:space="preserve">
          <source>Similarly, for a maintenance release, &lt;code&gt;maint&lt;/code&gt; is tracking the commits to be released. Therefore, in the steps above simply tag and push &lt;code&gt;maint&lt;/code&gt; rather than &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">同様に、メンテナンスリリースの場合、 &lt;code&gt;maint&lt;/code&gt; はリリースされるコミットを追跡しています。したがって、上記の手順では、 &lt;code&gt;master&lt;/code&gt; ではなく &lt;code&gt;maint&lt;/code&gt; にタグを付けてプッシュするだけです。</target>
        </trans-unit>
        <trans-unit id="8638660115fa0755b6d41e0f65af85c161534425" translate="yes" xml:space="preserve">
          <source>Similarly, if a linked working tree is moved without using &lt;code&gt;git worktree
move&lt;/code&gt;, the main working tree (or bare repository) will be unable to locate it. Running &lt;code&gt;repair&lt;/code&gt; within the recently-moved working tree will reestablish the connection. If multiple linked working trees are moved, running &lt;code&gt;repair&lt;/code&gt; from any working tree with each tree&amp;rsquo;s new &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; as an argument, will reestablish the connection to all the specified paths.</source>
          <target state="translated">同様に、リンクされた作業ツリーが &lt;code&gt;git worktree move&lt;/code&gt; を使用せずに移動された場合、メインの作業ツリー（またはベアリポジトリ）はそれを見つけることができません。最近移動した作業ツリー内で &lt;code&gt;repair&lt;/code&gt; 実行すると、接続が再確立されます。複数のリンクされた作業ツリーが移動された場合、各ツリーの新しい &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; を引数として、任意の作業ツリーから &lt;code&gt;repair&lt;/code&gt; を実行すると、指定されたすべてのパスへの接続が再確立されます。</target>
        </trans-unit>
        <trans-unit id="7f4a6323889bb06df07efb39ac02d863fb790808" translate="yes" xml:space="preserve">
          <source>Similarly, no more helpers will be consulted once both username and password had been provided.</source>
          <target state="translated">同様に、ユーザ名とパスワードの両方が提供された後は、これ以上のヘルパーの相談はありません。</target>
        </trans-unit>
        <trans-unit id="f0c6b86e38dcc0fc8a2626ab2d3596fb5907fb83" translate="yes" xml:space="preserve">
          <source>Similarly, storing binary dependencies (e.g., shared libraries or JAR files) or build products in the repository is generally not recommended. Dependencies and build products are best stored on an artifact or package server with only references, URLs, and hashes stored in the repository.</source>
          <target state="translated">同様に、バイナリの依存関係(共有ライブラリや JAR ファイルなど)やビルド製品をリポジトリに保存することは一般的には推奨されません。依存関係やビルド製品は、アーティファクトサーバやパッケージサーバに保存し、リポジトリには参照、URL、ハッシュのみを保存するのがベストです。</target>
        </trans-unit>
        <trans-unit id="c8cf6e3fc26d2562fdbc09f3e09e2deb878c7a85" translate="yes" xml:space="preserve">
          <source>Similarly, when moving files around, one can find that filenames with non-ascii or special characters end up in a different directory, one that includes a double quote character. (This is technically the same issue as above with quoting, but perhaps an interesting different way that it can and has manifested as a problem.)</source>
          <target state="translated">同様に、ファイルを移動させるときに、非 ASCII 文字や特殊文字を含むファイル名が、 ダブルクォート文字を含む別のディレクトリで終わってしまうことがあります (これは技術的には上記の引用符の問題と同じですが、 おそらく興味深い別の方法で問題が発生する可能性があります。(これは技術的には上記の引用符の問題と同じですが、おそらく興味深い別の方法で問題が発生する可能性があり、問題として顕在化しています)</target>
        </trans-unit>
        <trans-unit id="47fa1a83138cf11ea34d19a92cc77db11eb4b97c" translate="yes" xml:space="preserve">
          <source>Similarly, when the &quot;recursive&quot; merge strategy runs, and finds that there are criss-cross merges and thus more than one merge base (which is fairly unusual, but it does happen), it will generate one temporary midway tree (or possibly even more, if you had lots of criss-crossing merges and more than two merge bases) as a temporary internal merge base, and again, those are real objects, but the end result will not end up pointing to them, so they end up &quot;dangling&quot; in your repository.</source>
          <target state="translated">同様に、「再帰的」なマージ戦略を実行して、交差するマージがあり、その結果複数のマージベースがあることを発見した場合 (これはかなり珍しいことですが、実際には起こります)、一時的な内部マージベースとして、一時的な中間ツリーを生成します (交差するマージがたくさんあり、2つ以上のマージベースがある場合は、それ以上になる可能性もあります)。</target>
        </trans-unit>
        <trans-unit id="50765cb4cf598285ffabcacb2eda47bdf85bbc67" translate="yes" xml:space="preserve">
          <source>Similarly, you need only trust the SHA-1 name of a top-level tree object to trust the contents of the entire directory that it refers to, and if you receive the SHA-1 name of a commit from a trusted source, then you can easily verify the entire history of commits reachable through parents of that commit, and all of those contents of the trees referred to by those commits.</source>
          <target state="translated">同様に、トップレベルのツリーオブジェクトのSHA-1名を信頼するだけで、それが参照しているディレクトリ全体の内容を信頼することができ、信頼できるソースからコミットのSHA-1名を受け取った場合、そのコミットの親を介して到達可能なコミットの履歴全体と、そのコミットが参照しているツリーのそれらの内容のすべてを簡単に検証することができます。</target>
        </trans-unit>
        <trans-unit id="35267477ddadd32e54d2580eaf5f6347904aefaa" translate="yes" xml:space="preserve">
          <source>Simple UNIX mbox splitter program</source>
          <target state="translated">シンプルな UNIX mbox スプリッタープログラム</target>
        </trans-unit>
        <trans-unit id="e6081dd40a736a561294c958c5f476bf808af40b" translate="yes" xml:space="preserve">
          <source>Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it prunes some side branches if the end result is the same (i.e. merging branches with the same content)</source>
          <target state="translated">履歴をツリーの最終状態を説明する最も単純な履歴に単純化します。最終的な結果が同じであれば、いくつかの側枝を刈り込んでしまうため、最もシンプルになります(同じ内容の枝をマージするなど)。</target>
        </trans-unit>
        <trans-unit id="7d47a55c52a010c445880763e4c0c53ec8d956ef" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;dcommit&lt;/code&gt; uses rebase internally, any Git branches you &lt;code&gt;git push&lt;/code&gt; to before &lt;code&gt;dcommit&lt;/code&gt; on will require forcing an overwrite of the existing ref on the remote repository. This is generally considered bad practice, see the &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; documentation for details.</source>
          <target state="translated">以来 &lt;code&gt;dcommit&lt;/code&gt; 用途あなたは、内部で任意のGitのブランチをリベース &lt;code&gt;git push&lt;/code&gt; 前に &lt;code&gt;dcommit&lt;/code&gt; リモートリポジトリ上の既存のREFの上書きを強制する必要があります上。これは一般に悪い習慣と考えられています。詳細は&lt;a href=&quot;git-push&quot;&gt;git-push [1]の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d3cbf9539838f097e44d7366548fff10dd5a4bb6" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;git fast-import&lt;/code&gt; cannot tag trees, you will not be able to export the linux.git repository completely, as it contains a tag referencing a tree instead of a commit.</source>
          <target state="translated">以来、 &lt;code&gt;git fast-import&lt;/code&gt; できないタグの木ではなくコミットのツリーを参照するタグが含まれているとして、あなたは、完全にlinux.gitリポジトリをエクスポートすることはできません。</target>
        </trans-unit>
        <trans-unit id="e8a0aceddf81ac41c98d5a8bdbe00960df868272" translate="yes" xml:space="preserve">
          <source>Since every developer&amp;rsquo;s repository has the same complete copy of the project history, no repository is special, and it is trivial for another developer to take over maintenance of a project, either by mutual agreement, or because a maintainer becomes unresponsive or difficult to work with.</source>
          <target state="translated">すべての開発者のリポジトリにはプロジェクト履歴の同じ完​​全なコピーがあるため、特別なリポジトリはなく、他の開発者が相互の合意によって、または保守担当者が応答しなくなったり、作業が困難になったりするために、プロジェクトの保守を引き継ぐことは簡単です。 。</target>
        </trans-unit>
        <trans-unit id="ff45ae2cc9973e736a0612a33b064d4efb949c7a" translate="yes" xml:space="preserve">
          <source>Since keeping up-to-date with both branches and tags on the remote is a common use-case the &lt;code&gt;--prune-tags&lt;/code&gt; option can be supplied along with &lt;code&gt;--prune&lt;/code&gt; to prune local tags that don&amp;rsquo;t exist on the remote, and force-update those tags that differ. Tag pruning can also be enabled with &lt;code&gt;fetch.pruneTags&lt;/code&gt; or &lt;code&gt;remote.&amp;lt;name&amp;gt;.pruneTags&lt;/code&gt; in the config. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">リモートのブランチとタグの両方を最新の状態に保つことは一般的なユースケースであるため、 &lt;code&gt;--prune-tags&lt;/code&gt; オプションを &lt;code&gt;--prune&lt;/code&gt; と一緒に指定して、リモートに存在しないローカルタグをプルーニングできます。異なるタグを強制的に更新します。タグのプルーニングは、設定の &lt;code&gt;fetch.pruneTags&lt;/code&gt; または &lt;code&gt;remote.&amp;lt;name&amp;gt;.pruneTags&lt;/code&gt; でも有効にできます。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0932a869e1657064106036f8682ab82f7b34c539" translate="yes" xml:space="preserve">
          <source>Since object names are computed the same way in every repository, the same content stored in two repositories will always be stored under the same name.</source>
          <target state="translated">オブジェクト名はどのリポジトリでも同じように計算されるので、2つのリポジトリに保存されている同じコンテンツは常に同じ名前で保存されます。</target>
        </trans-unit>
        <trans-unit id="bea459735363a6dcc4076e4ad600cb49ce5e1876" translate="yes" xml:space="preserve">
          <source>Since submodules may have unpushed changes or untracked files, removing them could result in data loss. Thus, changing sparse inclusion/exclusion rules will not cause an already checked out submodule to be removed from the working copy. Said another way, just as &lt;code&gt;checkout&lt;/code&gt; will not cause submodules to be automatically removed or initialized even when switching between branches that remove or add submodules, using &lt;code&gt;sparse-checkout&lt;/code&gt; to reduce or expand the scope of &quot;interesting&quot; files will not cause submodules to be automatically deinitialized or initialized either.</source>
          <target state="translated">サブモジュールにはプッシュされていない変更または追跡されていないファイルがある可能性があるため、それらを削除するとデータが失われる可能性があります。したがって、スパース包含/除外ルールを変更しても、すでにチェックアウトされているサブモジュールが作業コピーから削除されることはありません。別の言い方をすれば、サブモジュールを削除または追加するブランチを切り替えても、 &lt;code&gt;checkout&lt;/code&gt; によってサブモジュールが自動的に削除または初期化されないのと同様に、 &lt;code&gt;sparse-checkout&lt;/code&gt; を使用して「対象」ファイルの範囲を縮小または拡大しても、サブモジュールは自動的に削除されません。非初期化または初期化されています。</target>
        </trans-unit>
        <trans-unit id="c6783a475fdc4e2463b00ffd216c9d8a1b41c5ce" translate="yes" xml:space="preserve">
          <source>Since the blob is entirely defined by its data, if two files in a directory tree (or in multiple different versions of the repository) have the same contents, they will share the same blob object. The object is totally independent of its location in the directory tree, and renaming a file does not change the object that file is associated with.</source>
          <target state="translated">ブロブはデータによって完全に定義されるので、ディレクトリツリー内の2つのファイル(またはリポジトリの複数の異なるバージョンのファイル)が同じ内容を持っている場合、同じブロブオブジェクトを共有します。オブジェクトはディレクトリツリー内での位置に完全に依存せず、ファイル名を変更してもそのファイルに関連付けられているオブジェクトは変わりません。</target>
        </trans-unit>
        <trans-unit id="a3fb22d6e6da288d244e8acdd9955bf43f0ad8d0" translate="yes" xml:space="preserve">
          <source>Since the current state of closing.txt is cached in the index file, it is listed as &quot;Changes to be committed&quot;. Since file.txt has changes in the working directory that aren&amp;rsquo;t reflected in the index, it is marked &quot;changed but not updated&quot;. At this point, running &quot;git commit&quot; would create a commit that added closing.txt (with its new contents), but that didn&amp;rsquo;t modify file.txt.</source>
          <target state="translated">close.txtの現在の状態はインデックスファイルにキャッシュされているため、「コミットされる変更」としてリストされます。file.txtには作業ディレクトリで変更があり、インデックスには反映されないため、「変更されていますが更新されていません」とマークされています。この時点で、「git commit」を実行すると、coming.txtが（新しい内容とともに）追加されますが、file.txtは変更されませんでした。</target>
        </trans-unit>
        <trans-unit id="78b19ba60aba5b2f618c3990a75d2fca7411595a" translate="yes" xml:space="preserve">
          <source>Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and useSvmProps options all affect the metadata generated and used by &lt;code&gt;git svn&lt;/code&gt;; they &lt;strong&gt;must&lt;/strong&gt; be set in the configuration file before any history is imported and these settings should never be changed once they are set.</source>
          <target state="translated">noMetadata、rewriteRoot、rewriteUUID、useSvnsyncPropsおよびuseSvmPropsオプションはすべて、 &lt;code&gt;git svn&lt;/code&gt; によって生成および使用されるメタデータに影響します。彼らは&lt;strong&gt;必要があります&lt;/strong&gt;任意の履歴をインポートする前に、設定ファイルで設定され、それらが設定されると、これらの設定を変更すべきではありません。</target>
        </trans-unit>
        <trans-unit id="6c0fcca9337c1cb048efaf57760c6fdc1a7b6b6f" translate="yes" xml:space="preserve">
          <source>Singe line category of a project, used to group projects if &lt;code&gt;$projects_list_group_categories&lt;/code&gt; is enabled. By default (file and configuration variable absent), uncategorized projects are put in the &lt;code&gt;$project_list_default_category&lt;/code&gt; category. You can use the &lt;code&gt;gitweb.category&lt;/code&gt; repo configuration variable, but the file takes precedence.</source>
          <target state="translated">&lt;code&gt;$projects_list_group_categories&lt;/code&gt; が有効な場合にプロジェクトをグループ化するために使用される、プロジェクトの単線カテゴリ。デフォルトでは（ファイルおよび構成変数が存在しない）、未分類のプロジェクトは &lt;code&gt;$project_list_default_category&lt;/code&gt; カテゴリーに配置されます。 &lt;code&gt;gitweb.category&lt;/code&gt; repo構成変数を使用できますが、ファイルが優先されます。</target>
        </trans-unit>
        <trans-unit id="1622ee3a3548a98ace63f4a1f20c802cbd3d6865" translate="yes" xml:space="preserve">
          <source>Single Tree Merge</source>
          <target state="translated">シングル ツリー マージ</target>
        </trans-unit>
        <trans-unit id="68fe6fe857d1a576bbea2c5ba543ec91391124bd" translate="yes" xml:space="preserve">
          <source>Single URL for gitweb and for fetching</source>
          <target state="translated">gitweb と取得用の単一 URL</target>
        </trans-unit>
        <trans-unit id="c63aa67778ae9fde52963fd98eabefccd9f535ba" translate="yes" xml:space="preserve">
          <source>Size of the Git repository: In its current form Git scales up poorly for large repositories containing content that is not compressed by delta computation between trees. For example, you can use submodules to hold large binary assets and these repositories can be shallowly cloned such that you do not have a large history locally.</source>
          <target state="translated">Git リポジトリのサイズ。現在の形では、ツリー間のデルタ計算で圧縮されていないコンテンツを含む大規模なリポジトリでは、Git のスケールアップは不十分です。たとえば、大きなバイナリ資産を保持するためにサブモジュールを使用することができますが、これらのリポジトリはローカルに大きな履歴を持たないように浅くクローンすることができます。</target>
        </trans-unit>
        <trans-unit id="109e0b1e1d08be0f664fabdbefc14a841a52fd41" translate="yes" xml:space="preserve">
          <source>Skip &quot;branches&quot; and &quot;tags&quot; of first level directories</source>
          <target state="translated">第一階層ディレクトリの「ブランチ」と「タグ」をスキップする</target>
        </trans-unit>
        <trans-unit id="89ac85d0525bb0b20e17b8b50eb25e661e2c2664" translate="yes" xml:space="preserve">
          <source>Skip &quot;doc*&quot; directory for every fetch</source>
          <target state="translated">フェッチごとに &quot;doc*&quot; ディレクトリをスキップする</target>
        </trans-unit>
        <trans-unit id="160b3d2c26cf27627f75b323f1f2f273b38eb0f3" translate="yes" xml:space="preserve">
          <source>Skip &lt;code&gt;number&lt;/code&gt; commits before starting to show the commit output.</source>
          <target state="translated">コミット出力の表示を開始する前に、 &lt;code&gt;number&lt;/code&gt; コミットをスキップします。</target>
        </trans-unit>
        <trans-unit id="143f0d9f0b5891b48ad38fad90174c475ab3d608" translate="yes" xml:space="preserve">
          <source>Skip algorithm</source>
          <target state="translated">スキップアルゴリズム</target>
        </trans-unit>
        <trans-unit id="fd9da89bf39cfad867f423a79c66781ba5934141" translate="yes" xml:space="preserve">
          <source>Skip algorithm discussed</source>
          <target state="translated">議論されているスキップアルゴリズム</target>
        </trans-unit>
        <trans-unit id="e6458f822412c73c4c309bd3d568b1a062547077" translate="yes" xml:space="preserve">
          <source>Skip and remove all lines starting with comment character (default &lt;code&gt;#&lt;/code&gt;).</source>
          <target state="translated">コメント文字で始まるすべての行をスキップして削除します（デフォルト &lt;code&gt;#&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="8d0905b7d9c2aadf471da8a0572104f192b6463b" translate="yes" xml:space="preserve">
          <source>Skip move or rename actions which would lead to an error condition. An error happens when a source is neither existing nor controlled by Git, or when it would overwrite an existing file unless &lt;code&gt;-f&lt;/code&gt; is given.</source>
          <target state="translated">エラー状態につながる移動または名前変更アクションをスキップします。エラーが発生するのは、ソースが存在しないか、Gitによって制御されていない場合、または &lt;code&gt;-f&lt;/code&gt; が指定されていない限り、既存のファイルを上書きする場合です。</target>
        </trans-unit>
        <trans-unit id="93791f01919fc21e7203f6ad13249cb4adbabc2c" translate="yes" xml:space="preserve">
          <source>Skip output of blob objects and instead refer to blobs via their original SHA-1 hash. This is useful when rewriting the directory structure or history of a repository without touching the contents of individual files. Note that the resulting stream can only be used by a repository which already contains the necessary objects.</source>
          <target state="translated">blob オブジェクトの出力をスキップし、代わりに元の SHA-1 ハッシュを介して blob を参照します。これは、個々のファイルの内容に触れることなく、リポジトリのディレクトリ構造や履歴を書き換える場合に便利です。結果として得られるストリームは、必要なオブジェクトを既に含んでいるリポジトリでのみ使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3704502c09a46589e3fc638d0b7431bdbfb4de69" translate="yes" xml:space="preserve">
          <source>Skip paths matching the regex.</source>
          <target state="translated">正規表現にマッチするパスをスキップします。</target>
        </trans-unit>
        <trans-unit id="8024d787464bdc42cf9e1692fcecd2225427e388" translate="yes" xml:space="preserve">
          <source>Skip the current commit and continue with the rest of the sequence.</source>
          <target state="translated">現在のコミットをスキップして、残りのシーケンスを続行します。</target>
        </trans-unit>
        <trans-unit id="8b89cae0a7a7a1a500c597f44f79f240ec0b9f01" translate="yes" xml:space="preserve">
          <source>Skip the current patch. This is only meaningful when restarting an aborted patch.</source>
          <target state="translated">現在のパッチをスキップします。これは、中断されたパッチを再起動するときにのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="37f2142ef251b529e2961f797b73a85bc8215244" translate="yes" xml:space="preserve">
          <source>Skip the first &amp;lt;nn&amp;gt; numbers, for example if -f3 is specified, start the numbering with 0004.</source>
          <target state="translated">最初の&amp;lt;nn&amp;gt;番号をスキップします。たとえば、-f3が指定されている場合、番号は0004から始めます。</target>
        </trans-unit>
        <trans-unit id="53b34cae8fb29a9d928b4eaf4c1d1171200a7cd2" translate="yes" xml:space="preserve">
          <source>Skip untracked files matching pattern. Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS below for more information.</source>
          <target state="translated">パターンに一致するトラックされていないファイルをスキップします。patternはシェルのワイルドカードパターンであることに注意してください。詳細については、下記の「パターンを除外する」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5c514bc7b54c5d446f341bd390aa604bcfe7a779" translate="yes" xml:space="preserve">
          <source>Skip-worktree bit</source>
          <target state="translated">スキップワークツリービット</target>
        </trans-unit>
        <trans-unit id="1c6f4418b45f18f2276258a670ff4fb3ee82370c" translate="yes" xml:space="preserve">
          <source>Skip-worktree bit can be defined in one (long) sentence: When reading an entry, if it is marked as skip-worktree, then Git pretends its working directory version is up to date and read the index version instead.</source>
          <target state="translated">スキップワークツリービットは、ひとつの(長い)文で定義できます。あるエントリを読み込む際に、それが skip-worktree とマークされていると、Git は作業ディレクトリのバージョンを最新のものとみなし、代わりにインデックスのバージョンを読み込みます。</target>
        </trans-unit>
        <trans-unit id="497781ce21708a17d4e26d12bd089a723d673b06" translate="yes" xml:space="preserve">
          <source>So &quot;git bisect&quot; is designed to help find a &quot;first bad commit&quot;. And to be as efficient as possible, it tries to perform a binary search.</source>
          <target state="translated">つまり、&quot;git bisect&quot; は &quot;最初の悪いコミット&quot; を見つけるのに役立つように設計されているということです。そして、可能な限り効率的にするために、バイナリ検索を実行しようとします。</target>
        </trans-unit>
        <trans-unit id="2f63b69e28337cf529c035b03d9daaf28859996c" translate="yes" xml:space="preserve">
          <source>So &lt;code&gt;git diff&lt;/code&gt; is comparing against something other than the head. The thing that it&amp;rsquo;s comparing against is actually the index file, which is stored in .git/index in a binary format, but whose contents we can examine with ls-files:</source>
          <target state="translated">したがって、 &lt;code&gt;git diff&lt;/code&gt; は、ヘッド以外のものと比較しています。比較対象となるのは、実際にはバイナリファイルの.git / indexに格納されているインデックスファイルですが、その内容はls-filesで確認できます。</target>
        </trans-unit>
        <trans-unit id="87fbbf25154de6df0238ad0568533ed6007a8d44" translate="yes" xml:space="preserve">
          <source>So a good work-flow should be designed around the above points. That is making bisecting easier, more useful and standard.</source>
          <target state="translated">ですから、良いワークフローは上記の点を中心に設計されるべきです。それは、二分法をより簡単に、より便利に、より標準的にすることです。</target>
        </trans-unit>
        <trans-unit id="fe9010d034fcf65a3dd663b44598da34c322ed58" translate="yes" xml:space="preserve">
          <source>So be careful when using this with a refspec like &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt;, or any other refspec which might map references from multiple remotes to the same local namespace.</source>
          <target state="translated">したがって、これを &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; のようなrefspec 、または複数のリモートからの参照を同じローカル名前空間にマップする可能性のあるその他のrefspecで使用する場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="2b170fc73b3dfabca43a4cde5eef61bd350b47e1" translate="yes" xml:space="preserve">
          <source>So by default &lt;code&gt;git commit&lt;/code&gt; uses the index to create the commit, not the working tree; the &quot;-a&quot; option to commit tells it to first update the index with all changes in the working tree.</source>
          <target state="translated">したがって、デフォルトでは &lt;code&gt;git commit&lt;/code&gt; は作業ツリーではなくインデックスを使用してコミットを作成します。コミットする &quot;-a&quot;オプションは、作業ツリー内のすべての変更でインデックスを最初に更新するように指示します。</target>
        </trans-unit>
        <trans-unit id="f86c14eb732dcf1c0bad37f2fc6a2cc528890e0c" translate="yes" xml:space="preserve">
          <source>So doing a &lt;code&gt;git diff-index --cached&lt;/code&gt; is basically very useful when you are asking yourself &quot;what have I already marked for being committed, and what&amp;rsquo;s the difference to a previous tree&quot;.</source>
          <target state="translated">したがって、 &lt;code&gt;git diff-index --cached&lt;/code&gt; を実行することは、「コミット済みとしてすでにマークされているもの、および以前のツリーとの違いは何か」と自問している場合、基本的に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d45f632df019622532eb259f26fdc9a9f2411148" translate="yes" xml:space="preserve">
          <source>So for example when &lt;code&gt;--thread&lt;/code&gt; and &lt;code&gt;--no-chain-reply-to&lt;/code&gt; are specified, the second and subsequent patches will be replies to the first one like in the illustration below where &lt;code&gt;[PATCH v2 0/3]&lt;/code&gt; is in reply to &lt;code&gt;[PATCH 0/2]&lt;/code&gt;:</source>
          <target state="translated">したがって、たとえば &lt;code&gt;--thread&lt;/code&gt; と &lt;code&gt;--no-chain-reply-to&lt;/code&gt; が指定されている場合、2番目以降のパッチは、 &lt;code&gt;[PATCH v2 0/3]&lt;/code&gt; が &lt;code&gt;[PATCH 0/2]&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="8dac83a478835c1820a1dc8da47f73a69f302106" translate="yes" xml:space="preserve">
          <source>So git bisect is unconditional goodness - and feel free to quote that ;-)</source>
          <target state="translated">ということで、git bisectは無条件の善良さですね。)</target>
        </trans-unit>
        <trans-unit id="9a21b5de38126daf9f68802ae918237cb622de11" translate="yes" xml:space="preserve">
          <source>So if there is no bad merge base, the bisection process continues as usual after this step.</source>
          <target state="translated">そのため、悪いマージベースがない場合は、このステップの後も通常通りに二等化処理を継続します。</target>
        </trans-unit>
        <trans-unit id="d61ad44b1ad1935830d69abe827279c6ac721854" translate="yes" xml:space="preserve">
          <source>So if we could just &quot;replace&quot; Z by Z' when we bisect, then we would not need to add anything to a script. It would just work for anyone in the project sharing the special branches and the replacements.</source>
          <target state="translated">ですから、もし二等分するときにZをZ'に「置き換える」ことができれば、スクリプトに何も追加する必要はないでしょう。それは、特別な分岐と置換を共有しているプロジェクトの誰にでも使えるようになるでしょう。</target>
        </trans-unit>
        <trans-unit id="6be137f4b3e3bebc88bcbf9a9fd9420c4009228f" translate="yes" xml:space="preserve">
          <source>So if you know how to create test cases and how to bisect, you will be subject to a virtuous circle:</source>
          <target state="translated">そのため、テストケースの作り方や二分法を知っていれば、好循環の対象になります。</target>
        </trans-unit>
        <trans-unit id="b28d1446f9340641647b1bfa92704042d040df77" translate="yes" xml:space="preserve">
          <source>So if you used &quot;git bisect skip&quot; (or the run script exited with special code 125) you could get a result like this:</source>
          <target state="translated">つまり、&quot;git bisect skip&quot; を使用した場合 (あるいは実行スクリプトが特別なコード 125 で終了した場合)は、次のような結果が得られるということです。</target>
        </trans-unit>
        <trans-unit id="edcb1ada2530409c42369421497ba8e78619bff1" translate="yes" xml:space="preserve">
          <source>So in the above example the best bisection point is commit C.</source>
          <target state="translated">そのため、上記の例では、最適な二等分点はコミットCとなります。</target>
        </trans-unit>
        <trans-unit id="6fdeecf50af4098d1933aa89ebcede0a8177561f" translate="yes" xml:space="preserve">
          <source>So in the end this means that to find the best bisection commits we should maximize the function:</source>
          <target state="translated">つまり、これは最終的には、最良の二分割コミットを見つけるためには、関数を最大化すべきだということを意味しています。</target>
        </trans-unit>
        <trans-unit id="58a2f1d134fdcd7a3743e88aa224e9253e6fbd42" translate="yes" xml:space="preserve">
          <source>So it is a fact that commits near an untestable commit have a high probability of being untestable themselves. And the best bisection commits are often found together too (due to the bisection algorithm).</source>
          <target state="translated">つまり、テスト不可能なコミットの近くにあるコミットは、それ自体がテスト不可能な確率が高いということです。そして、最高の二分法コミットも一緒に見つかることがよくあります (二分法アルゴリズムによる)。</target>
        </trans-unit>
        <trans-unit id="aa016e179ca75d2a0eb71de197505264fa3225e9" translate="yes" xml:space="preserve">
          <source>So now we know how Git uses the object database to represent a project&amp;rsquo;s history:</source>
          <target state="translated">これで、Gitがオブジェクトデータベースを使用してプロジェクトの履歴を表す方法がわかりました。</target>
        </trans-unit>
        <trans-unit id="ce2a816c8c6bc197cebf7da353940391ec82e2e3" translate="yes" xml:space="preserve">
          <source>So now you know that the missing blob was the data for a file named &lt;code&gt;myfile&lt;/code&gt;. And chances are you can also identify the directory&amp;mdash;​let&amp;rsquo;s say it&amp;rsquo;s in &lt;code&gt;somedirectory&lt;/code&gt;. If you&amp;rsquo;re lucky the missing copy might be the same as the copy you have checked out in your working tree at &lt;code&gt;somedirectory/myfile&lt;/code&gt;; you can test whether that&amp;rsquo;s right with &lt;a href=&quot;git-hash-object&quot;&gt;git-hash-object[1]&lt;/a&gt;:</source>
          <target state="translated">これで、欠落しているblobが &lt;code&gt;myfile&lt;/code&gt; という名前のファイルのデータであることがわかりました。また、ディレクトリを特定できる可能性もあります。たとえば、それが &lt;code&gt;somedirectory&lt;/code&gt; にあるとします。運が &lt;code&gt;somedirectory/myfile&lt;/code&gt; ば、失われたコピーは、作業ディレクトリのsomedirectory / myfileでチェックアウトしたコピーと同じになる可能性があります。&lt;a href=&quot;git-hash-object&quot;&gt;git-hash-object [1]を使用&lt;/a&gt;して、それが正しいかどうかをテストできます。</target>
        </trans-unit>
        <trans-unit id="02795e1f800cead1112ee5200f5eaf14f8868f55" translate="yes" xml:space="preserve">
          <source>So of course it&amp;rsquo;s much better as it&amp;rsquo;s O(N * T) vs O(N * T * M) if you would test everything after each commit.</source>
          <target state="translated">もちろん、各コミット後にすべてをテストする場合は、O（N * T）とO（N * T * M）の方がはるかに優れています。</target>
        </trans-unit>
        <trans-unit id="bf839044c5c4761411ba28111f62e6182a819140" translate="yes" xml:space="preserve">
          <source>So only the W and B commits will be kept. Because commits X and Y will have been removed by rules a) and b) respectively, and because commits G are removed by rule b) too.</source>
          <target state="translated">つまり、W と B のコミットだけが保持されることになります。なぜなら、X と Y のコミットはそれぞれルール a)と b)によって削除され、G のコミットもルール b)によって削除されるからです。</target>
        </trans-unit>
        <trans-unit id="2adeb678ade18152fba70f98a363a63cf540c6c1" translate="yes" xml:space="preserve">
          <source>So regressions are fought all the time by developers, and indeed it is well known that bugs should be fixed as soon as possible, so as soon as they are found. That&amp;rsquo;s why it is interesting to have good tools for this purpose.</source>
          <target state="translated">そのため、開発者は常に退行と戦っています。実際、バグが見つかったらすぐに修正する必要があることはよく知られています。そのため、この目的のための優れたツールがあるのは興味深いことです。</target>
        </trans-unit>
        <trans-unit id="e3329398bcdff474dec989568418215901207762" translate="yes" xml:space="preserve">
          <source>So test suites and &quot;git bisect&quot; are complementary tools that are very powerful and efficient when used together.</source>
          <target state="translated">つまり、テストスイートと &quot;git bisect&quot; は補完的なツールであり、一緒に使うと非常に強力で効率的なものになります。</target>
        </trans-unit>
        <trans-unit id="af6a5f3f7d1b778946d7ea3d80d407ba283ecbfd" translate="yes" xml:space="preserve">
          <source>So the algorithm used by &quot;git bisect&quot; to find the best bisection commit when there are no skipped commits is the following:</source>
          <target state="translated">そこで、「git bisect」がスキップされたコミットがないときに最適なバイセクションコミットを見つけるために使っているアルゴリズムは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d52372a3732a9693c38928f4af80ece55caba390" translate="yes" xml:space="preserve">
          <source>So the current algorithm seems to be the best possible given what we initially supposed.</source>
          <target state="translated">だから、現在のアルゴリズムは、我々が最初に想定していたことを考えると、可能な限り最高のものであるように思われる。</target>
        </trans-unit>
        <trans-unit id="ff070bb5b96ce6bdea0ee7e21e6149356aab622c" translate="yes" xml:space="preserve">
          <source>So the ideal is usually to produce a series of patches such that:</source>
          <target state="translated">だから、理想は通常、そのような一連のパッチを生成することです。</target>
        </trans-unit>
        <trans-unit id="a9929fd0a7cc637ffed9aa6825e45ac8df015448" translate="yes" xml:space="preserve">
          <source>So to help people find commits that introduce a &quot;bad&quot; behavior, the &quot;git bisect&quot; set of commands was invented. And it follows of course that in &quot;git bisect&quot; parlance, commits where the &quot;interesting behavior&quot; is present are called &quot;bad&quot; commits, while other commits are called &quot;good&quot; commits. And a commit that introduce the behavior we are interested in is called a &quot;first bad commit&quot;. Note that there could be more than one &quot;first bad commit&quot; in the commit space we are searching.</source>
          <target state="translated">そこで、「悪い」動作を導入しているコミットを見つけやすくするために &quot;git bisect&quot; というコマンドが考案されました。git bisect&quot; の用語では、&quot;興味深い挙動 &quot;があるコミットを &quot;bad&quot; コミットと呼び、それ以外のコミットを &quot;good&quot; コミットと呼ぶことになります。そして、私たちが興味を持っている挙動を導入したコミットを &quot;最初の悪いコミット&quot; と呼びます。なお、検索しているコミット空間には複数の「最初の不良コミット」が存在する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="15c2cfea7209fe12c9a7f928eefdf57e7efd00f9" translate="yes" xml:space="preserve">
          <source>So to introduce some real trust in the system, the only thing you need to do is to digitally sign just 'one' special note, which includes the name of a top-level commit. Your digital signature shows others that you trust that commit, and the immutability of the history of commits tells others that they can trust the whole history.</source>
          <target state="translated">ですから、システムに真の信頼を導入するために必要なことは、トップレベルのコミット名を含む「一つ」の特別なメモにデジタル署名をすることだけです。あなたのデジタル署名は、あなたがそのコミットを信頼していることを他の人に示し、コミットの歴史の不変性は、他の人に歴史全体を信頼できることを伝えます。</target>
        </trans-unit>
        <trans-unit id="30ae77f4affa991e80efc3f102be0a94e3ede52f" translate="yes" xml:space="preserve">
          <source>So to introduce some real trust in the system, the only thing you need to do is to digitally sign just &lt;code&gt;one&lt;/code&gt; special note, which includes the name of a top-level commit. Your digital signature shows others that you trust that commit, and the immutability of the history of commits tells others that they can trust the whole history.</source>
          <target state="translated">したがって、システムに実際の信頼を導入するには、トップレベルのコミットの名前を含む &lt;code&gt;one&lt;/code&gt; 特別なメモにデジタル署名するだけです。あなたのデジタル署名は、あなたがそのコミットを信頼していることを他の人に示し、コミットの履歴の不変性は、他の人が履歴全体を信頼できることを示します。</target>
        </trans-unit>
        <trans-unit id="909741d50394835646e0e74eaab338b4f855de2e" translate="yes" xml:space="preserve">
          <source>So to populate the index with the two files you just created, you can do</source>
          <target state="translated">そこで、先ほど作成した2つのファイルでインデックスを作成するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="f597f374b45ae15a5bbfbd431d1e5af284187139" translate="yes" xml:space="preserve">
          <source>So using a PRNG with a bias to favor commits away from the good and bad commits looked like a good choice.</source>
          <target state="translated">そのため、良いコミットと悪いコミットから離れてコミットを有利にするためにバイアスのかかったPRNGを使用することは良い選択のように見えました。</target>
        </trans-unit>
        <trans-unit id="1d3965fc903eee9b8f55d2c4363ff10ff9b5318f" translate="yes" xml:space="preserve">
          <source>So very soon it will not be possible to completely test everything.</source>
          <target state="translated">だから、すぐにすべてを完全にテストすることはできません。</target>
        </trans-unit>
        <trans-unit id="c734302804af13b8fb3578fee7c8a382eab7f492" translate="yes" xml:space="preserve">
          <source>So we chose G, H, K or L as the best bisection point, which is better than F. Because if for example L is bad, then we will know not only that L, M and N are bad but also that G, H, I and J are not the first bad commit (since we suppose that there is only one first bad commit and it must be an ancestor of L).</source>
          <target state="translated">というのは、例えばLが悪いとすると、L,M,Nが悪いだけでなく、G,H,I,Jが最初の悪いコミットではないことがわかるからです(最初の悪いコミットは1つしかないと仮定しているので、Lの祖先でなければなりません)。</target>
        </trans-unit>
        <trans-unit id="52135537297d21de1e1bab64c3c62387485ffd7b" translate="yes" xml:space="preserve">
          <source>So we would be left with only:</source>
          <target state="translated">そうすると、私たちに残されたのは</target>
        </trans-unit>
        <trans-unit id="9a854aba22b6e93e9800490c72e201394edc5390" translate="yes" xml:space="preserve">
          <source>So what are the tools used to fight regressions? They are nearly the same as those used to fight regular bugs. The only specific tools are test suites and tools similar as &quot;git bisect&quot;.</source>
          <target state="translated">退行と戦うために使われるツールは何ですか?これらのツールは、通常のバグ対策に使われるものとほぼ同じです。特定のツールはテストスイートと &quot;git bisect&quot; に似たツールだけです。</target>
        </trans-unit>
        <trans-unit id="17175b38ddc3adc987023ab7708e71618fdb213f" translate="yes" xml:space="preserve">
          <source>So what our &lt;code&gt;git add&lt;/code&gt; did was store a new blob and then put a reference to it in the index file. If we modify the file again, we&amp;rsquo;ll see that the new modifications are reflected in the &lt;code&gt;git diff&lt;/code&gt; output:</source>
          <target state="translated">したがって、 &lt;code&gt;git add&lt;/code&gt; が行ったのは、新しいblobを格納してから、それへの参照をインデックスファイルに配置することでした。ファイルを再度変更すると、新しい変更が &lt;code&gt;git diff&lt;/code&gt; 出力に反映されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="c52a5d49814c75f968644da3c05f28677f66e5d9" translate="yes" xml:space="preserve">
          <source>So when a commit is marked as &quot;bad&quot; we know we can remove all the commits in the graph except those that are ancestors of the new &quot;bad&quot; commit. This means that:</source>
          <target state="translated">つまり、あるコミットが「悪い」とマークされたとき、新しい「悪い」コミットの祖先であるコミットを除いて、グラフ上のすべてのコミットを削除することができるということです。これは以下のことを意味します。</target>
        </trans-unit>
        <trans-unit id="2ab9a98e063e3527611545f584f2c39a22096906" translate="yes" xml:space="preserve">
          <source>So, look into &lt;code&gt;builtin/cat-file.c&lt;/code&gt;, search for &lt;code&gt;cmd_cat_file()&lt;/code&gt; and look what it does.</source>
          <target state="translated">そのため、 &lt;code&gt;builtin/cat-file.c&lt;/code&gt; &lt;code&gt;cmd_cat_file()&lt;/code&gt; を調べ、cmd_cat_file（）を検索して、それが何をするかを確認します。</target>
        </trans-unit>
        <trans-unit id="190b1ee6ab5b81f82f0d76cf355df1a21f43d2e3" translate="yes" xml:space="preserve">
          <source>So, think about something which you are interested in, say, &quot;how can I access a blob just knowing the object name of it?&quot;. The first step is to find a Git command with which you can do it. In this example, it is either &lt;code&gt;git show&lt;/code&gt; or &lt;code&gt;git cat-file&lt;/code&gt;.</source>
          <target state="translated">それで、たとえば、「オブジェクト名を知っているだけでblobにアクセスするにはどうすればよいですか？」など、興味のあることを考えてください。最初のステップは、それを実行できるGitコマンドを見つけることです。この例では、それは &lt;code&gt;git show&lt;/code&gt; または &lt;code&gt;git cat-file&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1efaef427fd5b515b3e304fc27457e91eec84a25" translate="yes" xml:space="preserve">
          <source>So, we can use somebody else&amp;rsquo;s work from a remote repository, but how can &lt;strong&gt;you&lt;/strong&gt; prepare a repository to let other people pull from it?</source>
          <target state="translated">それで、リモートリポジトリから他の誰かの作業を使用できますが、他の人がそこからプルできるようにリポジトリを準備するにはどうすればよい&lt;strong&gt;です&lt;/strong&gt;か？</target>
        </trans-unit>
        <trans-unit id="1d69dd0a510947edc4fb12eee97c080f4a377f68" translate="yes" xml:space="preserve">
          <source>Software bugs, or errors, are so prevalent and so detrimental that they cost the U.S. economy an estimated $59.5 billion annually, or about 0.6 percent of the gross domestic product, according to a newly released study commissioned by the Department of Commerce&amp;rsquo;s National Institute of Standards and Technology (NIST). At the national level, over half of the costs are borne by software users and the remainder by software developers/vendors. The study also found that, although all errors cannot be removed, more than a third of these costs, or an estimated $22.2 billion, could be eliminated by an improved testing infrastructure that enables earlier and more effective identification and removal of software defects. These are the savings associated with finding an increased percentage (but not 100 percent) of errors closer to the development stages in which they are introduced. Currently, over half of all errors are not found until &quot;downstream&quot; in the development process or during post-sale software use.</source>
          <target state="translated">商務省の国立標準研究所が委託した新たに発表された調査によると、ソフトウェアのバグまたはエラーは非常に蔓延しており、米国経済に年間推定595億ドル、または国内総生産の約0.6％のコストがかかるほど有害ですとテクノロジー（NIST）。国レベルでは、コストの半分以上はソフトウェアユーザーが負担し、残りはソフトウェア開発者/ベンダーが負担します。この調査では、すべてのエラーを取り除くことはできませんが、これらのコストの3分の1、つまり推定222億ドルを、ソフトウェアの欠陥をより効果的かつ早期に特定して取り除くことができる改良されたテストインフラストラクチャによって排除できることもわかりました。これらは、エラーが導入された開発段階に近いエラーの増加したパーセンテージ（100％ではない）を見つけることに関連する節約です。現在、すべてのエラーの半分以上は、開発プロセスの「ダウンストリーム」または販売後のソフトウェアの使用中に見つかるまで見つかりません。</target>
        </trans-unit>
        <trans-unit id="f90a777e081dbed9d193d82399cc2e3159bf44a3" translate="yes" xml:space="preserve">
          <source>Software developers already spend approximately 80 percent of development costs on identifying and correcting defects, and yet few products of any type other than software are shipped with such high levels of errors.</source>
          <target state="translated">ソフトウェア開発者は、すでに開発コストの約80%を欠陥の特定と修正に費やしていますが、ソフトウェア以外のどのタイプの製品でも、このような高いレベルのエラーを抱えて出荷されているものはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="b27e803e858c897a720eecea15e5bd37677e07bf" translate="yes" xml:space="preserve">
          <source>Some Git commands take options that are only used for plumbing or that are deprecated, and such options are hidden from the default usage. This option gives the full list of options.</source>
          <target state="translated">Git コマンドの中には、配管にしか使われていないオプションや非推奨のオプションを取るものがあり、そのようなオプションはデフォルトの使用法から隠されています。このオプションは、オプションの完全なリストを表示します。</target>
        </trans-unit>
        <trans-unit id="987ad55498ef51019e6595f32f9ee9a10fb74d21" translate="yes" xml:space="preserve">
          <source>Some actions require or allow to specify two revisions, and sometimes even two pathnames. In most general form such path_info (component) based gitweb URL looks like this:</source>
          <target state="translated">アクションによっては、ふたつのリビジョンを指定する必要があったり、許可したりするものもあります。最も一般的な形では、path_info (component)ベースの gitweb URL は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4e1994dd201b175192ea5080be05071ba824a420" translate="yes" xml:space="preserve">
          <source>Some atoms like %(align) and %(if) always require a matching %(end). We call them &quot;opening atoms&quot; and sometimes denote them as %($open).</source>
          <target state="translated">(align)や %(if)のようないくつかのアトムは、常に一致する %(end)を必要とします。これらを &quot;オープニング・アトム&quot; と呼び、%($open)と表記することもあります。</target>
        </trans-unit>
        <trans-unit id="b05a87bd0e5e1c61140759ab02c7e9f3bf4a2773" translate="yes" xml:space="preserve">
          <source>Some basic familiarity with Git is required. Having gone through &lt;a href=&quot;gittutorial&quot;&gt;gittutorial[7]&lt;/a&gt; and &lt;a href=&quot;gitglossary&quot;&gt;gitglossary[7]&lt;/a&gt; should be sufficient.</source>
          <target state="translated">Gitの基本的な知識が必要です。経た&lt;a href=&quot;gittutorial&quot;&gt;gittutorial [7]&lt;/a&gt;と&lt;a href=&quot;gitglossary&quot;&gt;gitglossary [7]&lt;/a&gt;十分なものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="61fa4c6dc6ae1d559b0a8be1b0de50848c850d66" translate="yes" xml:space="preserve">
          <source>Some changes are so trivial that it is not necessary to create a separate branch and then merge into each of the test and release branches. For these changes, just apply directly to the &lt;code&gt;release&lt;/code&gt; branch, and then merge that into the &lt;code&gt;test&lt;/code&gt; branch.</source>
          <target state="translated">一部の変更は非常に簡単なので、個別のブランチを作成してから、テストブランチとリリースブランチのそれぞれにマージする必要はありません。これらの変更については、 &lt;code&gt;release&lt;/code&gt; ブランチに直接適用し、それを &lt;code&gt;test&lt;/code&gt; ブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="59b18808ec08d9ea8408e805bbd7fa2f7edcfa73" translate="yes" xml:space="preserve">
          <source>Some commands (e.g. svn and http interfaces) that interactively ask for a password can be told to use an external program given via the value of this variable. Can be overridden by the &lt;code&gt;GIT_ASKPASS&lt;/code&gt; environment variable. If not set, fall back to the value of the &lt;code&gt;SSH_ASKPASS&lt;/code&gt; environment variable or, failing that, a simple password prompt. The external program shall be given a suitable prompt as command-line argument and write the password on its STDOUT.</source>
          <target state="translated">パスワードを対話的に要求するいくつかのコマンド（svnやhttpインターフェースなど）は、この変数の値を介して与えられた外部プログラムを使用するように指示できます。 &lt;code&gt;GIT_ASKPASS&lt;/code&gt; 環境変数によってオーバーライドできます。設定されていない場合は、 &lt;code&gt;SSH_ASKPASS&lt;/code&gt; 環境変数の値にフォールバックするか、失敗した場合は単純なパスワードプロンプトを表示します。外部プログラムには、コマンドライン引数として適切なプロンプトが与えられ、そのSTDOUTにパスワードが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="c2234711ff3c27c62e0fc4ab53a0833622d8f13d" translate="yes" xml:space="preserve">
          <source>Some configuration variables control the way the &lt;code&gt;--trailer&lt;/code&gt; arguments are applied to each commit message and the way any existing trailer in the commit message is changed. They also make it possible to automatically add some trailers.</source>
          <target state="translated">一部の構成変数は、 &lt;code&gt;--trailer&lt;/code&gt; 引数が各コミットメッセージに適用される方法と、コミットメッセージ内の既存のトレーラーが変更される方法を制御します。また、一部のトレーラーを自動的に追加することもできます。</target>
        </trans-unit>
        <trans-unit id="938be1fd3d7f894aaa8fcd897f4e95cd6aacc1b6" translate="yes" xml:space="preserve">
          <source>Some configuration variables have their default values (embedded in the CGI script) set during building gitweb &amp;mdash; if that is the case, this fact is put in their description. See gitweb&amp;rsquo;s &lt;code&gt;INSTALL&lt;/code&gt; file for instructions on building and installing gitweb.</source>
          <target state="translated">一部の構成変数には、gitwebのビルド中にデフォルト値（CGIスクリプトに埋め込まれている）が設定されています&amp;mdash;その場合、このことは説明に記載されています。gitwebのビルドとインストールの手順については、gitwebの &lt;code&gt;INSTALL&lt;/code&gt; ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="0d66e22fd5f2bbbc188c5b064782bc9e186f6b28" translate="yes" xml:space="preserve">
          <source>Some email servers (e.g. smtp.163.com) limit the number emails to be sent per session (connection) and this will lead to a failure when sending many messages. With this option, send-email will disconnect after sending $&amp;lt;num&amp;gt; messages and wait for a few seconds (see --relogin-delay) and reconnect, to work around such a limit. You may want to use some form of credential helper to avoid having to retype your password every time this happens. Defaults to the &lt;code&gt;sendemail.smtpBatchSize&lt;/code&gt; configuration variable.</source>
          <target state="translated">一部の電子メールサーバー（たとえば、smtp.163.com）は、セッション（接続）ごとに送信される電子メールの数を制限します。これにより、多くのメッセージを送信するときにエラーが発生します。このオプションを使用すると、send-emailは$ &amp;lt;num&amp;gt;メッセージの送信後に切断し、数秒待って（--relogin-delayを参照）、再接続して、このような制限を回避します。これが発生するたびにパスワードを再入力する必要がないように、何らかの形式の資格情報ヘルパーを使用することをお勧めします。デフォルトは &lt;code&gt;sendemail.smtpBatchSize&lt;/code&gt; 構成変数です。</target>
        </trans-unit>
        <trans-unit id="92168eb294cb53195c326d7cdc472c76b820a62e" translate="yes" xml:space="preserve">
          <source>Some features cannot be overridden per project. For those features the structure of appropriate &lt;code&gt;%feature&lt;/code&gt; hash element has a simpler form:</source>
          <target state="translated">一部の機能はプロジェクトごとにオーバーライドできません。これらの機能の場合、適切な &lt;code&gt;%feature&lt;/code&gt; ハッシュ要素の構造はより単純な形式になります。</target>
        </trans-unit>
        <trans-unit id="7345fdef7f54471f79d673ac02c80817717e5d21" translate="yes" xml:space="preserve">
          <source>Some filesystems lose the executable bit when a file that is marked as executable is checked out, or checks out a non-executable file with executable bit on. &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; probe the filesystem to see if it handles the executable bit correctly and this variable is automatically set as necessary.</source>
          <target state="translated">一部のファイルシステムでは、実行可能としてマークされているファイルがチェックアウトされるか、実行可能ビットがオンになっている非実行可能ファイルをチェックアウトすると、実行可能ビットが失われます。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;は、ファイルシステムを調べて、実行可能ビットを正しく処理し、この変数が必要に応じて自動的に設定されるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="1c65f795a263fd4e4ffc8fd7edc082e1bb01009b" translate="yes" xml:space="preserve">
          <source>Some filters will generate empty commits that leave the tree untouched. This option instructs git-filter-branch to remove such commits if they have exactly one or zero non-pruned parents; merge commits will therefore remain intact. This option cannot be used together with &lt;code&gt;--commit-filter&lt;/code&gt;, though the same effect can be achieved by using the provided &lt;code&gt;git_commit_non_empty_tree&lt;/code&gt; function in a commit filter.</source>
          <target state="translated">一部のフィルターは、ツリーをそのままにしておく空のコミットを生成します。このオプションは、git-filter-branchに、剪定されていない親が1つまたはゼロの場合にそのようなコミットを削除するように指示します。したがって、マージコミットはそのまま残ります。このオプションを &lt;code&gt;--commit-filter&lt;/code&gt; と一緒に使用することはできませんが、コミットフィルターで提供されている &lt;code&gt;git_commit_non_empty_tree&lt;/code&gt; 関数を使用することで同じ効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="172ca906089028fc890c646e25bab698db638084" translate="yes" xml:space="preserve">
          <source>Some functions have a &lt;code&gt;_fl()&lt;/code&gt; suffix to indicate that they take &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;line-number&lt;/code&gt; arguments.</source>
          <target state="translated">一部の関数には、 &lt;code&gt;file&lt;/code&gt; と &lt;code&gt;line-number&lt;/code&gt; 引数を取ることを示す &lt;code&gt;_fl()&lt;/code&gt; サフィックスがあります。</target>
        </trans-unit>
        <trans-unit id="cf5b41401ecbf41c583b9f31bc11f9978bf853cb" translate="yes" xml:space="preserve">
          <source>Some functions have a &lt;code&gt;_printf_fl()&lt;/code&gt; suffix to indicate that they also take a varargs argument.</source>
          <target state="translated">一部の関数には、varargs引数も受け取ることを示す &lt;code&gt;_printf_fl()&lt;/code&gt; サフィックスがあります。</target>
        </trans-unit>
        <trans-unit id="c20fab9f2e759692fa04bbce7cef5cc908557231" translate="yes" xml:space="preserve">
          <source>Some functions have a &lt;code&gt;_va_fl()&lt;/code&gt; suffix to indicate that they also take a &lt;code&gt;va_list&lt;/code&gt; argument.</source>
          <target state="translated">一部の関数には、 &lt;code&gt;va_list&lt;/code&gt; 引数も受け取ることを示す &lt;code&gt;_va_fl()&lt;/code&gt; サフィックスがあります。</target>
        </trans-unit>
        <trans-unit id="eba90c7cd2e8efb76a00a6ef6fd10ba0e6c2d355" translate="yes" xml:space="preserve">
          <source>Some improvements to the algorithms inside &quot;git bisect&quot; are possible and some new features could help in some cases, but overall &quot;git bisect&quot; works already very well, is used a lot, and is already very useful. To back up that last claim, let&amp;rsquo;s give the final word to Ingo Molnar when he was asked by the author how much time does he think &quot;git bisect&quot; saves him when he uses it:</source>
          <target state="translated">「git bisect」内のアルゴリズムにはいくつかの改善が可能であり、いくつかの新機能が役立つ場合もありますが、全体的な「git bisect」はすでに非常にうまく機能しており、多く使用されており、すでに非常に便利です。最後の主張を裏付けるために、著者から「git bisect」を使用することでどれだけの時間を節約できると彼が尋ねたときに、Ingo Molnarに最後の言葉を与えましょう。</target>
        </trans-unit>
        <trans-unit id="051a4238025a126fd35cea3d27808e1a33c19d81" translate="yes" xml:space="preserve">
          <source>Some key/value pairs are common to all events and some are event-specific.</source>
          <target state="translated">キーと値のペアの中には、すべてのイベントに共通するものと、イベント固有のものがあります。</target>
        </trans-unit>
        <trans-unit id="171887e25dc7a6bd359791fb5478731797724aa1" translate="yes" xml:space="preserve">
          <source>Some malformed strings may be accepted as valid dates. In some of these cases Git will still be able to obtain the correct date from the malformed string. There are also some types of malformed strings which Git will parse wrong, and yet consider valid. Seriously malformed strings will be rejected.</source>
          <target state="translated">不正な文字列の中には、有効な日付として受け入れられるものもあります。このような場合でも、Git は不正な文字列から正しい日付を取得することができます。また、不正な文字列の中には、Git が誤って解析しても有効だと判断するものもあります。真面目に不正な文字列は却下されます。</target>
        </trans-unit>
        <trans-unit id="783d5fee630f867a836aab31a09a1120dfa61932" translate="yes" xml:space="preserve">
          <source>Some more interesting work has been done in the upstream project, and &lt;code&gt;origin&lt;/code&gt; has advanced:</source>
          <target state="translated">アップストリームプロジェクトでさらに興味深い作業が行われ、 &lt;code&gt;origin&lt;/code&gt; が進んでいます。</target>
        </trans-unit>
        <trans-unit id="f3d95fe16308405a40d9c1590f99de534764e169" translate="yes" xml:space="preserve">
          <source>Some old repositories have tags without a tagger. The fast-import protocol was pretty strict about that, and did not allow that. So fake a tagger to be able to fast-import the output.</source>
          <target state="translated">古いリポジトリの中には、タガーなしでタグを持っているものがあります。fast-importプロトコルはそれについてかなり厳しく、それを許可していませんでした。そこで、出力を高速インポートできるようにタガーを偽装します。</target>
        </trans-unit>
        <trans-unit id="5f1322ce775635ebc0b366d585bc7dbdc07c75d2" translate="yes" xml:space="preserve">
          <source>Some optional features and policies</source>
          <target state="translated">いくつかのオプション機能とポリシー</target>
        </trans-unit>
        <trans-unit id="184f39eeceeacf637176614462d419ff5408c775" translate="yes" xml:space="preserve">
          <source>Some other SCM systems let the user create a tag from multiple files which are not from the same commit/changeset. Or to create tags which are a subset of the files available in the repository.</source>
          <target state="translated">他のSCMシステムでは、同じコミット/チェンジセットからではない複数のファイルからタグを作成することができます。また、リポジトリで利用可能なファイルのサブセットからタグを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="e0986df979670ad50493b8dd4aeecf085f900c18" translate="yes" xml:space="preserve">
          <source>Some other commands that also work on files in the working tree and/or in the index can take &lt;code&gt;--staged&lt;/code&gt; and/or &lt;code&gt;--worktree&lt;/code&gt;.</source>
          <target state="translated">作業ツリー内および/またはインデックス内のファイルでも機能する他のいくつかのコマンドは、-- &lt;code&gt;--staged&lt;/code&gt; および/または &lt;code&gt;--worktree&lt;/code&gt; を取ることができます。</target>
        </trans-unit>
        <trans-unit id="5e825ac68d84922615f20a915d3c1eb9e9c71680" translate="yes" xml:space="preserve">
          <source>Some placeholders may depend on other options given to the revision traversal engine. For example, the &lt;code&gt;%g*&lt;/code&gt; reflog options will insert an empty string unless we are traversing reflog entries (e.g., by &lt;code&gt;git log -g&lt;/code&gt;). The &lt;code&gt;%d&lt;/code&gt; and &lt;code&gt;%D&lt;/code&gt; placeholders will use the &quot;short&quot; decoration format if &lt;code&gt;--decorate&lt;/code&gt; was not already provided on the command line.</source>
          <target state="translated">一部のプレースホルダーは、リビジョントラバーサルエンジンに与えられた他のオプションに依存している場合があります。たとえば、 &lt;code&gt;%g*&lt;/code&gt; log * reflogオプションは、reflogエントリをトラバースしない限り（たとえば、 &lt;code&gt;git log -g&lt;/code&gt; によって）、空の文字列を挿入します。 &lt;code&gt;%d&lt;/code&gt; と &lt;code&gt;%D&lt;/code&gt; プレースホルダ場合は「短い」の装飾形式を使用します &lt;code&gt;--decorate&lt;/code&gt; が既にコマンドラインで提供されていませんでした。</target>
        </trans-unit>
        <trans-unit id="b90f1a06edbdea1cb1ea924bb534bf207be4c8cd" translate="yes" xml:space="preserve">
          <source>Some special diff options allow diffing the working directory against any of these stages:</source>
          <target state="translated">いくつかの特別な diff オプションでは、これらのステージのいずれかに対して作業ディレクトリを diff することができます。</target>
        </trans-unit>
        <trans-unit id="379a99bc56f81a74676a3582df5345ad077361ae" translate="yes" xml:space="preserve">
          <source>Some workflows require that one or more branches of development on one machine be replicated on another machine, but the two machines cannot be directly connected, and therefore the interactive Git protocols (git, ssh, http) cannot be used.</source>
          <target state="translated">ワークフローによっては、1台のマシン上で1つ以上の開発ブランチを別のマシン上で複製する必要がありますが、2台のマシンを直接接続することはできないので、インタラクティブな Git プロトコル (git,ssh,http)を使うことはできません。</target>
        </trans-unit>
        <trans-unit id="4efa70b7553b32aea10bdaaf89e5cdb60eb1465e" translate="yes" xml:space="preserve">
          <source>Somebody asks you to pull, and the changes sound worthy of merging.</source>
          <target state="translated">誰かがあなたに引っ張ってくれと頼まれて、その変更は合併する価値があるように聞こえる。</target>
        </trans-unit>
        <trans-unit id="75bb6efa7b5bca1608dd13b1f00b4537d22f7537" translate="yes" xml:space="preserve">
          <source>Somebody hands you a copy of a file, and asks which commits modified a file such that it contained the given content either before or after the commit. You can find out with this:</source>
          <target state="translated">誰かがあなたにファイルのコピーを渡して、どのコミットがコミットの前か後かに与えられた内容を含むようにファイルを変更したかを尋ねてきます。これで調べることができます。</target>
        </trans-unit>
        <trans-unit id="7ef51555538cdc5f80247933eec8146e7de62402" translate="yes" xml:space="preserve">
          <source>Someone can do a history rewrite, realize they messed up, restore from the backups in refs/original/, and then redo their git-filter-branch command. (The backup in refs/original/ is not a real backup; it dereferences tags first.)</source>
          <target state="translated">履歴の書き換えをして、失敗したことに気づいて refs/original/のバックアップからリストアして、git-filter-branch コマンドをやり直すことができる人がいるかもしれません。(refs/original/のバックアップは本当のバックアップではありません。)</target>
        </trans-unit>
        <trans-unit id="8b7568eaac49251d7ecfa53edc4f2d50e2427376" translate="yes" xml:space="preserve">
          <source>Someone can have a set of &quot;working and tested filters&quot; which they document or provide to a coworker, who then runs them on a different OS where the same commands are not working/tested (some examples in the git-filter-branch manpage are also affected by this). BSD vs. GNU userland differences can really bite. If lucky, error messages are spewed. But just as likely, the commands either don&amp;rsquo;t do the filtering requested, or silently corrupt by making some unwanted change. The unwanted change may only affect a few commits, so it&amp;rsquo;s not necessarily obvious either. (The fact that problems won&amp;rsquo;t necessarily be obvious means they are likely to go unnoticed until the rewritten history is in use for quite a while, at which point it&amp;rsquo;s really hard to justify another flag-day for another rewrite.)</source>
          <target state="translated">誰かがドキュメント化したり、同僚に提供した一連の「動作およびテスト済みフィルター」を持つことができ、同じコマンドが動作/テストされていない別のOSでそれらを実行します（git-filter-branchのマンページの例には、これも影響を受けます）。 BSDとGNUのユーザーランドの違いは実際にかみ合う可能性があります。運がよければ、エラーメッセージが表示されます。しかし、可能性としては、コマンドが要求されたフィルタリングを実行しないか、不要な変更を加えることによってサイレントに破損します。不要な変更は少数のコミットにのみ影響を与える可能性があるため、必ずしも明らかではありません。 （問題が必ずしも明白ではないという事実は、書き換えられた履歴がしばらく使用されるまで気付かれない可能性が高いことを意味します。その時点で、別の書き換えのために別のフラグ日を正当化することは本当に困難です。）</target>
        </trans-unit>
        <trans-unit id="f6f28be0bc03c39873befbc10c61feb3cd6f09d9" translate="yes" xml:space="preserve">
          <source>Sometime later when enough time has passed and testing done, you can pull the same branch into the &lt;code&gt;release&lt;/code&gt; tree ready to go upstream. This is where you see the value of keeping each patch (or patch series) in its own branch. It means that the patches can be moved into the &lt;code&gt;release&lt;/code&gt; tree in any order.</source>
          <target state="translated">しばらくして十分な時間が経過し、テストが完了したら、同じブランチを &lt;code&gt;release&lt;/code&gt; ツリーにプルして、アップストリームに進む準備ができています。ここで、各パッチ（またはパッチシリーズ）を独自のブランチに保持することの価値を確認できます。つまり、パッチは任意の順序で &lt;code&gt;release&lt;/code&gt; ツリーに移動できます。</target>
        </trans-unit>
        <trans-unit id="f3de282e58de418da244c9ed4c8dec9bb8a8937a" translate="yes" xml:space="preserve">
          <source>Sometimes it happens that the current state cannot be tested, for example if it does not compile because there was a bug preventing it at that time. This is what the special exit code 125 is for. It tells &quot;git bisect run&quot; that the current commit should be marked as untestable and that another one should be chosen and checked out.</source>
          <target state="translated">その時にバグがあってコンパイルできなかったなど、現在の状態をテストできないことが時々あります。これが、特別な終了コード 125 です。これは &quot;git bisect run&quot; に、現在のコミットをテスト不可能とマークし、別のコミットを選択してチェックアウトするよう指示します。</target>
        </trans-unit>
        <trans-unit id="ab0983c0f5d9e7bd28c3834685713747f93c2919" translate="yes" xml:space="preserve">
          <source>Sometimes it is desirable to see the diff of a text-converted version of some binary files. For example, a word processor document can be converted to an ASCII text representation, and the diff of the text shown. Even though this conversion loses some information, the resulting diff is useful for human viewing (but cannot be applied directly).</source>
          <target state="translated">いくつかのバイナリファイルのテキスト変換されたバージョンのdiffを見ることが望ましい場合があります。例えば、ワープロ文書をASCIIテキスト表現に変換し、表示されたテキストの差分を見ることができます。この変換ではいくつかの情報が失われますが、結果として得られる差分は人間が見るのに便利です(ただし、直接適用することはできません)。</target>
        </trans-unit>
        <trans-unit id="a66c6ccc61eb22dbd8fb180270521a352bb26eb7" translate="yes" xml:space="preserve">
          <source>Sometimes the thing fixed in b.2. cannot be amended to the not-quite perfect commit it fixes, because that commit is buried deeply in a patch series. That is exactly what interactive rebase is for: use it after plenty of &quot;a&quot;s and &quot;b&quot;s, by rearranging and editing commits, and squashing multiple commits into one.</source>
          <target state="translated">b.2.で修正したものを、それが修正した完全ではないコミットに修正できないことがあります。インタラクティブリベースはまさにそのためにあるのです:たくさんの &quot;a&quot; や &quot;b&quot; を修正した後に、コミットを並べ替えたり編集したり、複数のコミットを一つにまとめたりすることで、この機能を使います。</target>
        </trans-unit>
        <trans-unit id="7d8c42c4820860471a909b97a129a9232304c94a" translate="yes" xml:space="preserve">
          <source>Sometimes what you want instead is a set of patches; for this you can use &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;:</source>
          <target state="translated">代わりに、一連のパッチが必要な場合があります。これには&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="abb396ee2420ccad29c3b6a0f48213b60cfe8e4f" translate="yes" xml:space="preserve">
          <source>Sometimes you are not looking for the commit that introduced a breakage, but rather for a commit that caused a change between some other &quot;old&quot; state and &quot;new&quot; state. For example, you might be looking for the commit that introduced a particular fix. Or you might be looking for the first commit in which the source-code filenames were finally all converted to your company&amp;rsquo;s naming standard. Or whatever.</source>
          <target state="translated">場合によっては、破損を引き起こしたコミットではなく、他の「古い」状態と「新しい」状態の間に変化を引き起こしたコミットを探していることがあります。たとえば、特定の修正を導入したコミットを探している場合があります。または、ソースコードのファイル名が最終的にすべて会社の命名基準に変換された最初のコミットを探しているかもしれません。または何でも。</target>
        </trans-unit>
        <trans-unit id="709d16fb784b306222cc9b75f2da6965fd037ce9" translate="yes" xml:space="preserve">
          <source>Sometimes you are only interested in parts of the history, for example the commits modifying a particular &amp;lt;path&amp;gt;. But there are two parts of &lt;code&gt;History Simplification&lt;/code&gt;, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history.</source>
          <target state="translated">たとえば、特定の&amp;lt;path&amp;gt;を変更するコミットなど、履歴の一部のみに関心がある場合があります。しかし、そこの2つの部分です &lt;code&gt;History Simplification&lt;/code&gt; 、一部のコミットを選択しているが、他方は歴史を簡素化する様々な戦略があるので、それを行う方法です。</target>
        </trans-unit>
        <trans-unit id="3329bd14db714a1ebe54846da15c65686d4c297b" translate="yes" xml:space="preserve">
          <source>Sometimes you may wish to create a new branch &lt;code&gt;without&lt;/code&gt; actually checking it out and switching to it. If so, just use the command</source>
          <target state="translated">実際にチェックアウトして切り替え &lt;code&gt;without&lt;/code&gt; に、新しいブランチを作成したい場合があります。その場合は、次のコマンドを使用してください</target>
        </trans-unit>
        <trans-unit id="9e0d77cc540587abb285618787352fd870a1def8" translate="yes" xml:space="preserve">
          <source>Sometimes you want to edit a commit deeper in your history. One approach is to use &lt;code&gt;git format-patch&lt;/code&gt; to create a series of patches and then reset the state to before the patches:</source>
          <target state="translated">場合によっては、履歴のより深いコミットを編集したいことがあります。1つのアプローチは、 &lt;code&gt;git format-patch&lt;/code&gt; を使用して一連のパッチを作成し、パッチの前の状態にリセットすることです。</target>
        </trans-unit>
        <trans-unit id="17cc71829facf5cb6a6b321a2cbf6c64d2bc06da" translate="yes" xml:space="preserve">
          <source>Sometimes you would need to override a setting of an attribute for a path to &lt;code&gt;Unspecified&lt;/code&gt; state. This can be done by listing the name of the attribute prefixed with an exclamation point &lt;code&gt;!&lt;/code&gt;.</source>
          <target state="translated">場合によっては、パスの属性の設定を未 &lt;code&gt;Unspecified&lt;/code&gt; 状態にオーバーライドする必要があります。これは、感嘆符が前に付いた属性の名前をリストすることで実行できます &lt;code&gt;!&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18f66cee3089e3b2788a7d42c7fbfe71e8e6eab6" translate="yes" xml:space="preserve">
          <source>Sometimes, more than one builtin is contained in one source file. For example, &lt;code&gt;cmd_whatchanged()&lt;/code&gt; and &lt;code&gt;cmd_log()&lt;/code&gt; both reside in &lt;code&gt;builtin/log.c&lt;/code&gt;, since they share quite a bit of code. In that case, the commands which are &lt;code&gt;not&lt;/code&gt; named like the &lt;code&gt;.c&lt;/code&gt; file in which they live have to be listed in &lt;code&gt;BUILT_INS&lt;/code&gt; in the &lt;code&gt;Makefile&lt;/code&gt;.</source>
          <target state="translated">1つのソースファイルに複数の組み込みが含まれている場合があります。たとえば、 &lt;code&gt;cmd_whatchanged()&lt;/code&gt; と &lt;code&gt;cmd_log()&lt;/code&gt; は、かなりのコードを共有しているため、どちらも &lt;code&gt;builtin/log.c&lt;/code&gt; にあります。その場合、それらが &lt;code&gt;not&lt;/code&gt; する &lt;code&gt;.c&lt;/code&gt; ファイルのように名前が付けられていないコマンドは、 &lt;code&gt;Makefile&lt;/code&gt; の &lt;code&gt;BUILT_INS&lt;/code&gt; にリストされている必要があります。</target>
        </trans-unit>
        <trans-unit id="59356e5b6f2fcc25a08169f8960c8b579beeb31f" translate="yes" xml:space="preserve">
          <source>Sometimes, you do not know where to look for a feature. In many such cases, it helps to search through the output of &lt;code&gt;git log&lt;/code&gt;, and then &lt;code&gt;git show&lt;/code&gt; the corresponding commit.</source>
          <target state="translated">機能を探す場所がわからない場合があります。そのような多くの場合、 &lt;code&gt;git log&lt;/code&gt; の出力を検索してから、対応するコミットを &lt;code&gt;git show&lt;/code&gt; すると役立ちます。</target>
        </trans-unit>
        <trans-unit id="94a8d6cf12f26243dde0f5140dd4760ee8881bb4" translate="yes" xml:space="preserve">
          <source>Sort based on the key given. Prefix &lt;code&gt;-&lt;/code&gt; to sort in descending order of the value. Supports &quot;version:refname&quot; or &quot;v:refname&quot; (tag names are treated as versions). The &quot;version:refname&quot; sort order can also be affected by the &quot;versionsort.suffix&quot; configuration variable. See &lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref[1]&lt;/a&gt; for more sort options, but be aware keys like &lt;code&gt;committerdate&lt;/code&gt; that require access to the objects themselves will not work for refs whose objects have not yet been fetched from the remote, and will give a &lt;code&gt;missing object&lt;/code&gt; error.</source>
          <target state="translated">指定されたキーに基づいてソートします。接頭辞 &lt;code&gt;-&lt;/code&gt; 値の降順でソートします。 &quot;version：refname&quot;または &quot;v：refname&quot;をサポートします（タグ名はバージョンとして扱われます）。 「version：refname」のソート順は、「versionsort.suffix」構成変数の影響を受ける場合もあります。その他の並べ替えオプションについては&lt;a href=&quot;git-for-each-ref&quot;&gt;git-for-each-ref [1]&lt;/a&gt;を参照してください。ただし、オブジェクト自体へのアクセスを必要とする &lt;code&gt;committerdate&lt;/code&gt; などのキーは、オブジェクトがまだリモートからフェッチされていない参照には機能せず、 &lt;code&gt;missing object&lt;/code&gt; エラー。</target>
        </trans-unit>
        <trans-unit id="4f8164295fbfdf007f932844e4ac7576dc2d1ee2" translate="yes" xml:space="preserve">
          <source>Sort based on the key given. Prefix &lt;code&gt;-&lt;/code&gt; to sort in descending order of the value. You may use the --sort=&amp;lt;key&amp;gt; option multiple times, in which case the last key becomes the primary key. Also supports &quot;version:refname&quot; or &quot;v:refname&quot; (tag names are treated as versions). The &quot;version:refname&quot; sort order can also be affected by the &quot;versionsort.suffix&quot; configuration variable. The keys supported are the same as those in &lt;code&gt;git for-each-ref&lt;/code&gt;. Sort order defaults to the value configured for the &lt;code&gt;tag.sort&lt;/code&gt; variable if it exists, or lexicographic order otherwise. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">指定されたキーに基づいてソートします。接頭辞 &lt;code&gt;-&lt;/code&gt; 値の降順でソートします。 --sort = &amp;lt;key&amp;gt;オプションを複数回使用できます。その場合、最後のキーが主キーになります。 「version：refname」または「v：refname」もサポートします（タグ名はバージョンとして扱われます）。 「version：refname」のソート順は、「versionsort.suffix」構成変数の影響を受ける場合もあります。サポートされるキーは &lt;code&gt;git for-each-ref&lt;/code&gt; のものと同じです。ソート順は、デフォルトで &lt;code&gt;tag.sort&lt;/code&gt; 変数に構成されている値に設定されます（存在する場合）。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="235c15477db9421be496a9bdb61ee9fe5440e8e8" translate="yes" xml:space="preserve">
          <source>Sort based on the key given. Prefix &lt;code&gt;-&lt;/code&gt; to sort in descending order of the value. You may use the --sort=&amp;lt;key&amp;gt; option multiple times, in which case the last key becomes the primary key. The keys supported are the same as those in &lt;code&gt;git
for-each-ref&lt;/code&gt;. Sort order defaults to the value configured for the &lt;code&gt;branch.sort&lt;/code&gt; variable if exists, or to sorting based on the full refname (including &lt;code&gt;refs/...&lt;/code&gt; prefix). This lists detached HEAD (if present) first, then local branches and finally remote-tracking branches. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">指定されたキーに基づいてソートします。接頭辞 &lt;code&gt;-&lt;/code&gt; 値の降順でソートします。 --sort = &amp;lt;key&amp;gt;オプションを複数回使用できます。その場合、最後のキーが主キーになります。サポートされるキーは &lt;code&gt;git for-each-ref&lt;/code&gt; ものと同じです。ソート順のデフォルトは、存在する場合は &lt;code&gt;branch.sort&lt;/code&gt; 変数に設定された値、または完全なrefname（ &lt;code&gt;refs/...&lt;/code&gt; プレフィックスを含む）に基づくソートになります。これは、デタッチされたHEAD（存在する場合）を最初にリストし、次にローカルブランチ、最後にリモート追跡ブランチをリストします。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5f1523e64bd22fd24a21f855bbd22c50e1efc550" translate="yes" xml:space="preserve">
          <source>Sort commits by date when possible.</source>
          <target state="translated">可能であればコミットを日付順に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="2c6b9826784b28663433b0a6dc2f2674e6b29a9a" translate="yes" xml:space="preserve">
          <source>Sort output according to the number of commits per author instead of author alphabetic order.</source>
          <target state="translated">著者のアルファベット順ではなく、著者ごとのコミット数に応じて出力をソートします。</target>
        </trans-unit>
        <trans-unit id="97d057704ff7369f19e3dfc333c10a22925317f1" translate="yes" xml:space="preserve">
          <source>Sorting and filtering branches are case insensitive.</source>
          <target state="translated">ブランチのソートとフィルタリングは大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="5ce7d777697e6536cabaa9eaf03abf69552dd696" translate="yes" xml:space="preserve">
          <source>Sorting and filtering refs are case insensitive.</source>
          <target state="translated">参照のソートとフィルタリングは、大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="9d38ff15fbd7490d8843677184f9c7afbcdf73ce" translate="yes" xml:space="preserve">
          <source>Sorting and filtering tags are case insensitive.</source>
          <target state="translated">ソートやフィルタリングのタグは大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="74d012567bc749743b2f7f680471d74e8b0444d4" translate="yes" xml:space="preserve">
          <source>Source code management (tool).</source>
          <target state="translated">ソースコード管理(ツール)。</target>
        </trans-unit>
        <trans-unit id="36b1651cdc36dfe13b6c0271ea5052804f0ae0c9" translate="yes" xml:space="preserve">
          <source>Sparse checkout</source>
          <target state="translated">まばらなチェックアウト</target>
        </trans-unit>
        <trans-unit id="7aaf15f27eda1de7eaf7b123729519d3afe58336" translate="yes" xml:space="preserve">
          <source>Specifically, the following are removed until none of them remain:</source>
          <target state="translated">具体的には、以下のようなものを1つも残らないまで削除します。</target>
        </trans-unit>
        <trans-unit id="6fb30b05a9f660538f592f3613160c9d3d393240" translate="yes" xml:space="preserve">
          <source>Specified branch is an ancestor of the remote HEAD</source>
          <target state="translated">指定されたブランチは、リモート HEAD の祖先です。</target>
        </trans-unit>
        <trans-unit id="095f9fffc528a2b593b5d023d80910beab9fba54" translate="yes" xml:space="preserve">
          <source>Specified branch resolves to an object that exists locally</source>
          <target state="translated">指定されたブランチは、ローカルに存在するオブジェクトに解決します。</target>
        </trans-unit>
        <trans-unit id="aa507335de58b83c95563636f96d43ebd2769930" translate="yes" xml:space="preserve">
          <source>Specifies a minimum trust level for signature verification. If this option is unset, then signature verification for merge operations require a key with at least &lt;code&gt;marginal&lt;/code&gt; trust. Other operations that perform signature verification require a key with at least &lt;code&gt;undefined&lt;/code&gt; trust. Setting this option overrides the required trust-level for all operations. Supported values, in increasing order of significance:</source>
          <target state="translated">署名検証の最小信頼レベルを指定します。このオプションが設定されていない場合、マージ操作の署名検証には、少なくとも &lt;code&gt;marginal&lt;/code&gt; 信頼を持つキーが必要です。署名検証を実行する他の操作には、少なくとも &lt;code&gt;undefined&lt;/code&gt; 信頼を持つキーが必要です。このオプションを設定すると、すべての操作に必要な信頼レベルが上書きされます。重要度の高い順にサポートされる値：</target>
        </trans-unit>
        <trans-unit id="8bd7d2d739debb36a1057aa4a730675102718bfe" translate="yes" xml:space="preserve">
          <source>Specifies a port different from the default port (SMTP servers typically listen to smtp port 25, but may also listen to submission port 587, or the common SSL smtp port 465); symbolic port names (e.g. &quot;submission&quot; instead of 587) are also accepted. The port can also be set with the &lt;code&gt;sendemail.smtpServerPort&lt;/code&gt; configuration variable.</source>
          <target state="translated">デフォルトポートとは異なるポートを指定します（SMTPサーバーは通常、smtpポート25をリッスンしますが、送信ポート587または一般的なSSL smtpポート465もリッスンする場合があります）。シンボリックポート名（たとえば、587の代わりに「送信」）も受け入れられます。ポートは、 &lt;code&gt;sendemail.smtpServerPort&lt;/code&gt; 構成変数を使用して設定することもできます。</target>
        </trans-unit>
        <trans-unit id="07c63275a8584ac825542ccb56fd0f5b3bf25b5a" translate="yes" xml:space="preserve">
          <source>Specifies compression level for newly-compressed data in the generated pack. If not specified, pack compression level is determined first by pack.compression, then by core.compression, and defaults to -1, the zlib default, if neither is set. Add --no-reuse-object if you want to force a uniform compression level on all data no matter the source.</source>
          <target state="translated">生成されたパック内で新たに圧縮されたデータの圧縮レベルを指定します。指定しない場合、パックの圧縮レベルは最初に pack.compression、次に core.compression で決定され、どちらも設定されていない場合は zlib のデフォルトである -1 がデフォルトとなります。ソースに関係なく、すべてのデータに一様な圧縮レベルを強制的に適用したい場合は --no-reuse-object を追加してください。</target>
        </trans-unit>
        <trans-unit id="2e586cba19f8fbc5a10baac47fbd5c9e37781d67" translate="yes" xml:space="preserve">
          <source>Specifies how a merge is handled when the merged-in history is already a descendant of the current history. &lt;code&gt;--ff&lt;/code&gt; is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the &lt;code&gt;refs/tags/&lt;/code&gt; hierarchy, in which case &lt;code&gt;--no-ff&lt;/code&gt; is assumed.</source>
          <target state="translated">マージされた履歴が既に現在の履歴の子孫である場合のマージの処理方法を指定します。 &lt;code&gt;--ff&lt;/code&gt; は、 &lt;code&gt;refs/tags/&lt;/code&gt; 階層の本来の場所に格納されていない注釈付き（および場合によっては署名済み）のタグをマージしない限り、デフォルトです。その場合、-no &lt;code&gt;--no-ff&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="1e4cfa4b695628b655fba3d437b2ed50df8c7399" translate="yes" xml:space="preserve">
          <source>Specifies how many context lines should be used in calls to diff made by the &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;. The default is &quot;5&quot;.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]に&lt;/a&gt;よるdiffの呼び出しで使用するコンテキスト行の数を指定します。デフォルトは「5」です。</target>
        </trans-unit>
        <trans-unit id="ee05d66bfede680eae8d8ce792188074b5498ff4" translate="yes" xml:space="preserve">
          <source>Specifies how many submodules are fetched/cloned at the same time. A positive integer allows up to that number of submodules fetched in parallel. A value of 0 will give some reasonable default. If unset, it defaults to 1.</source>
          <target state="translated">同時に何個のサブモジュールをフェッチ/クローニングするかを指定します。正の整数を指定すると、同時にフェッチされるサブモジュールの数を指定することができます。0を指定すると、ある程度のデフォルト値が設定されます。未設定の場合、デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="316fa49ea084b12859b1b97d79b0376bed50442d" translate="yes" xml:space="preserve">
          <source>Specifies how the submodules obtain alternates when submodules are cloned. Possible values are &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;superproject&lt;/code&gt;. By default &lt;code&gt;no&lt;/code&gt; is assumed, which doesn&amp;rsquo;t add references. When the value is set to &lt;code&gt;superproject&lt;/code&gt; the submodule to be cloned computes its alternates location relative to the superprojects alternate.</source>
          <target state="translated">サブモジュールの複製時にサブモジュールが代替を取得する方法を指定します。可能な値は &lt;code&gt;no&lt;/code&gt; 、 &lt;code&gt;superproject&lt;/code&gt; です。デフォルトでは &lt;code&gt;no&lt;/code&gt; が想定され、参照は追加されません。値が &lt;code&gt;superproject&lt;/code&gt; 設定されている場合、複製されるサブモジュールは、スーパープロジェクトの代替に関連する代替の場所を計算します。</target>
        </trans-unit>
        <trans-unit id="b31fc36154a26e26a1c078ebba51ee8a4995b30b" translate="yes" xml:space="preserve">
          <source>Specifies how to treat errors with the alternates for a submodule as computed via &lt;code&gt;submodule.alternateLocation&lt;/code&gt;. Possible values are &lt;code&gt;ignore&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;die&lt;/code&gt;. Default is &lt;code&gt;die&lt;/code&gt;. Note that if set to &lt;code&gt;ignore&lt;/code&gt; or &lt;code&gt;info&lt;/code&gt;, and if there is an error with the computed alternate, the clone proceeds as if no alternate was specified.</source>
          <target state="translated">経由して計算されたサブモジュールのために交互にエラーを処理する方法を指定し &lt;code&gt;submodule.alternateLocation&lt;/code&gt; 。可能な値は、 &lt;code&gt;ignore&lt;/code&gt; 、 &lt;code&gt;info&lt;/code&gt; 、 &lt;code&gt;die&lt;/code&gt; です。デフォルトは &lt;code&gt;die&lt;/code&gt; です。 &lt;code&gt;ignore&lt;/code&gt; または &lt;code&gt;info&lt;/code&gt; に設定されていて、計算された代替にエラーがある場合、クローンは代替が指定されていないかのように続行することに注意してください。</target>
        </trans-unit>
        <trans-unit id="d91861558c562fdeaaf804d5a6651390fea90d33" translate="yes" xml:space="preserve">
          <source>Specifies if commands recurse into submodules by default. This applies to all commands that have a &lt;code&gt;--recurse-submodules&lt;/code&gt; option (&lt;code&gt;checkout&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;pull&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;read-tree&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, &lt;code&gt;restore&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt;) except &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;ls-files&lt;/code&gt;. Defaults to false. When set to true, it can be deactivated via the &lt;code&gt;--no-recurse-submodules&lt;/code&gt; option. Note that some Git commands lacking this option may call some of the above commands affected by &lt;code&gt;submodule.recurse&lt;/code&gt;; for instance &lt;code&gt;git remote update&lt;/code&gt; will call &lt;code&gt;git fetch&lt;/code&gt; but does not have a &lt;code&gt;--no-recurse-submodules&lt;/code&gt; option. For these commands a workaround is to temporarily change the configuration value by using &lt;code&gt;git -c submodule.recurse=0&lt;/code&gt;.</source>
          <target state="translated">コマンドがデフォルトでサブモジュールに再帰するかどうかを指定します。これは、 &lt;code&gt;clone&lt;/code&gt; &lt;code&gt;ls-files&lt;/code&gt; とls-filesを除き、 &lt;code&gt;--recurse-submodules&lt;/code&gt; オプション（ &lt;code&gt;checkout&lt;/code&gt; 、 &lt;code&gt;fetch&lt;/code&gt; 、 &lt;code&gt;grep&lt;/code&gt; 、 &lt;code&gt;pull&lt;/code&gt; 、 &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;read-tree&lt;/code&gt; 、 &lt;code&gt;reset&lt;/code&gt; 、 &lt;code&gt;restore&lt;/code&gt; 、 &lt;code&gt;switch&lt;/code&gt; ）を持つすべてのコマンドに適用されます。デフォルトはfalseです。 trueに設定すると、 &lt;code&gt;--no-recurse-submodules&lt;/code&gt; オプションを使用して非アクティブ化できます。このオプションがない一部のGitコマンドは、 &lt;code&gt;submodule.recurse&lt;/code&gt; の影響を受ける上記のコマンドの一部を呼び出す可能性があることに注意してください。例えば &lt;code&gt;git remote update&lt;/code&gt; 呼び出されます &lt;code&gt;git fetch&lt;/code&gt; が、持っていない &lt;code&gt;--no-recurse-submodules&lt;/code&gt; オプションを選択します。これらのコマンドの回避策は、 &lt;code&gt;git -c submodule.recurse=0&lt;/code&gt; を使用して構成値を一時的に変更することです。</target>
        </trans-unit>
        <trans-unit id="be724c0999a6ad4178618a1619dc5ee566f604f6" translate="yes" xml:space="preserve">
          <source>Specifies if commands recurse into submodules by default. This applies to all commands that have a &lt;code&gt;--recurse-submodules&lt;/code&gt; option, except &lt;code&gt;clone&lt;/code&gt;. Defaults to false.</source>
          <target state="translated">コマンドがデフォルトでサブモジュールに再帰するかどうかを指定します。これは、 &lt;code&gt;--recurse-submodules&lt;/code&gt; オプションを持つすべてのコマンドに適用されます。ただし、 &lt;code&gt;clone&lt;/code&gt; は除きます。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="521e20e338253b67c65fe5992b9e53ef105e078a" translate="yes" xml:space="preserve">
          <source>Specifies intentionally untracked files to ignore</source>
          <target state="translated">無視する意図的にトラックされていないファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="4a0da697fa597c14275c00dd14541ab0c3dfd994" translate="yes" xml:space="preserve">
          <source>Specifies the Fully Qualified Domain Name (FQDN) used in the HELO/EHLO command to the SMTP server. Some servers require the FQDN to match your IP address. If not set, git send-email attempts to determine your FQDN automatically. Default is the value of &lt;code&gt;sendemail.smtpDomain&lt;/code&gt;.</source>
          <target state="translated">SMTPサーバーへのHELO / EHLOコマンドで使用される完全修飾ドメイン名（FQDN）を指定します。一部のサーバーでは、IPアドレスと一致するFQDNが必要です。設定されていない場合、git send-emailはFQDNを自動的に決定しようとします。デフォルトは &lt;code&gt;sendemail.smtpDomain&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="5037aaf03dca1f2f538183f1496bfc2b7e1efabf" translate="yes" xml:space="preserve">
          <source>Specifies the default encoding to use for displaying of file contents in &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt; and &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt;. It can be overridden by setting the &lt;code&gt;encoding&lt;/code&gt; attribute for relevant files (see &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt;). If this option is not set, the tools default to the locale encoding.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt;および&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;でファイルの内容を表示するために使用するデフォルトのエンコーディングを指定します。これは、関連ファイルの &lt;code&gt;encoding&lt;/code&gt; 属性を設定することでオーバーライドできます（&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]を&lt;/a&gt;参照）。このオプションが設定されていない場合、ツールはデフォルトでロケールエンコーディングになります。</target>
        </trans-unit>
        <trans-unit id="9702444fd012da98ed5d8ff9c395c187404df9d9" translate="yes" xml:space="preserve">
          <source>Specifies the default value for the &lt;code&gt;--max-new-filters&lt;/code&gt; option of &lt;code&gt;git
commit-graph write&lt;/code&gt; (c.f., &lt;a href=&quot;git-commit-graph&quot;&gt;git-commit-graph[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;git commit-graph write&lt;/code&gt; の &lt;code&gt;--max-new-filters&lt;/code&gt; オプションのデフォルト値を指定します（cf、&lt;a href=&quot;git-commit-graph&quot;&gt;git-commit-graph [1]&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="8d7b044fb5611f2bdd400a7d800ea730223f6289" translate="yes" xml:space="preserve">
          <source>Specifies the dictionary used for spell checking commit messages in the &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;. When set to &quot;none&quot; spell checking is turned off.</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]で&lt;/a&gt;コミットメッセージのスペルチェックに使用する辞書を指定します。「なし」に設定すると、スペルチェックがオフになります。</target>
        </trans-unit>
        <trans-unit id="d083f984efe9263940e7d58fa993a7931f1dd65f" translate="yes" xml:space="preserve">
          <source>Specifies the encoding used to output author names and commit summaries. Setting it to &lt;code&gt;none&lt;/code&gt; makes blame output unconverted data. For more information see the discussion about encoding in the &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; manual page.</source>
          <target state="translated">著者名の出力と要約のコミットに使用されるエンコーディングを指定します。 &lt;code&gt;none&lt;/code&gt; に設定すると、blame出力は変換されないデータになります。詳細については、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;マニュアルページのエンコーディングに関する説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="a27599ead22294e56acfe0afc5fbf545479773f2" translate="yes" xml:space="preserve">
          <source>Specifies the format used to output dates in &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;. If unset the iso format is used. For supported values, see the discussion of the &lt;code&gt;--date&lt;/code&gt; option at &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]で&lt;/a&gt;日付を出力するために使用される形式を指定します。未設定の場合は、iso形式が使用されます。サポートされている値については、&lt;a href=&quot;git-log&quot;&gt;git-log [1]の&lt;/a&gt; &lt;code&gt;--date&lt;/code&gt; オプションの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="08d91dd5a7053d3bafb0000dd55ac78c15731e93" translate="yes" xml:space="preserve">
          <source>Specifies the format used to output dates. If --date is not provided, the value of the blame.date config variable is used. If the blame.date config variable is also not set, the iso format is used. For supported values, see the discussion of the --date option at &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">日付の出力に使用される形式を指定します。--dateが指定されていない場合、blame.date構成変数の値が使用されます。blame.date構成変数も設定されていない場合は、iso形式が使用されます。サポートされている値については、&lt;a href=&quot;git-log&quot;&gt;git-log [1]の&lt;/a&gt; --dateオプションの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="08b582fd23612321f471de0a5131383c71313dc1" translate="yes" xml:space="preserve">
          <source>Specifies the general prompt string to display at the top of the dialog, before subsections for &lt;code&gt;argPrompt&lt;/code&gt; and &lt;code&gt;revPrompt&lt;/code&gt;. The default value includes the actual command.</source>
          <target state="translated">&lt;code&gt;argPrompt&lt;/code&gt; および &lt;code&gt;revPrompt&lt;/code&gt; のサブセクションの前に、ダイアログの上部に表示する一般的なプロンプト文字列を指定します。デフォルト値には実際のコマンドが含まれています。</target>
        </trans-unit>
        <trans-unit id="a9e526c09a4c4719d9406e0b96ea75a516e14797" translate="yes" xml:space="preserve">
          <source>Specifies the maximal number of fetch operations to be run in parallel at a time (submodules, or remotes when the &lt;code&gt;--multiple&lt;/code&gt; option of &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; is in effect).</source>
          <target state="translated">一度に並行して実行するフェッチ操作の最大数を指定します（サブモジュール、または&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;の &lt;code&gt;--multiple&lt;/code&gt; オプションが有効な場合はリモート）。</target>
        </trans-unit>
        <trans-unit id="841aeff1992a5e30906fb04c48bd487428f81ede" translate="yes" xml:space="preserve">
          <source>Specifies the number of threads to spawn when loading the index. This is meant to reduce index load time on multiprocessor machines. Specifying 0 or &lt;code&gt;true&lt;/code&gt; will cause Git to auto-detect the number of CPU&amp;rsquo;s and set the number of threads accordingly. Specifying 1 or &lt;code&gt;false&lt;/code&gt; will disable multithreading. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">インデックスのロード時に生成されるスレッドの数を指定します。これは、マルチプロセッサマシンでのインデックスの読み込み時間を短縮するためのものです。0または &lt;code&gt;true&lt;/code&gt; を指定すると、GitはCPUの数を自動検出し、それに応じてスレッドの数を設定します。1または &lt;code&gt;false&lt;/code&gt; を指定すると、マルチスレッドが無効になります。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1edc546a8b44445b5552ac6cb04ae2f0f6c55a7" translate="yes" xml:space="preserve">
          <source>Specifies the number of threads to spawn when resolving deltas. This requires that index-pack be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU&amp;rsquo;s and use maximum 3 threads.</source>
          <target state="translated">デルタを解決するときに生成するスレッドの数を指定します。これには、index-packをpthreadでコンパイルする必要があります。そうでない場合、このオプションは警告とともに無視されます。これは、マルチプロセッサマシンでのパッキング時間を短縮するためのものです。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗算されます。 0を指定すると、GitはCPUの数を自動検出し、最大3つのスレッドを使用します。</target>
        </trans-unit>
        <trans-unit id="62a88cce2e4d60d8d3773b73f0efea252799f6cf" translate="yes" xml:space="preserve">
          <source>Specifies the number of threads to spawn when searching for best delta matches. This requires that &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU&amp;rsquo;s and set the number of threads accordingly.</source>
          <target state="translated">最良のデルタ一致を検索するときに生成するスレッドの数を指定します。これには、&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]&lt;/a&gt;をpthreadでコンパイルする必要があります。コンパイルしない場合、このオプションは警告とともに無視されます。これは、マルチプロセッサマシンでのパッキング時間を短縮するためのものです。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗算されます。 0を指定すると、GitはCPUの数を自動検出し、それに応じてスレッドの数を設定します。</target>
        </trans-unit>
        <trans-unit id="b8f98a607312c9ba066372345125a9cb60221982" translate="yes" xml:space="preserve">
          <source>Specifies the number of threads to spawn when searching for best delta matches. This requires that pack-objects be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU&amp;rsquo;s and set the number of threads accordingly.</source>
          <target state="translated">最良のデルタ一致を検索するときに生成するスレッドの数を指定します。これには、pack-objectsをpthreadでコンパイルする必要があります。そうでない場合、このオプションは警告とともに無視されます。これは、マルチプロセッサマシンでのパッキング時間を短縮するためのものです。ただし、デルタ検索ウィンドウに必要なメモリ量は、スレッド数で乗算されます。0を指定すると、GitはCPUの数を自動検出し、それに応じてスレッドの数を設定します。</target>
        </trans-unit>
        <trans-unit id="a17b7410705517c5284c60d4c1158e205890521a" translate="yes" xml:space="preserve">
          <source>Specifies the number of times to retry a p4 command (notably, &lt;code&gt;p4 sync&lt;/code&gt;) if the network times out. The default value is 3. Set the value to 0 to disable retries or if your p4 version does not support retries (pre 2012.2).</source>
          <target state="translated">ネットワークがタイムアウトした場合に、p4コマンド（特に、 &lt;code&gt;p4 sync&lt;/code&gt; ）を再試行する回数を指定します。デフォルト値は3です。再試行を無効にするには、値を0に設定します。または、p4バージョンが再試行をサポートしていない場合（2012.2より前）。</target>
        </trans-unit>
        <trans-unit id="0ebc03abb12118370c422382dc91c5979f3d39ba" translate="yes" xml:space="preserve">
          <source>Specifies the pathname to the file that contains patterns to describe paths that are not meant to be tracked, in addition to &lt;code&gt;.gitignore&lt;/code&gt; (per-directory) and &lt;code&gt;.git/info/exclude&lt;/code&gt;. Defaults to &lt;code&gt;$XDG_CONFIG_HOME/git/ignore&lt;/code&gt;. If &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; is either not set or empty, &lt;code&gt;$HOME/.config/git/ignore&lt;/code&gt; is used instead. See &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; （ディレクトリごと）と &lt;code&gt;.git/info/exclude&lt;/code&gt; に加えて、追跡対象ではないパスを記述するパターンを含むファイルへのパス名を指定します。デフォルトは &lt;code&gt;$XDG_CONFIG_HOME/git/ignore&lt;/code&gt; です。場合は &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; セットまたは空にされていない、 &lt;code&gt;$HOME/.config/git/ignore&lt;/code&gt; 代わりに使用されます。&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d124e54be4e690b62098ac284ac76a08ab37106b" translate="yes" xml:space="preserve">
          <source>Specifies the radius of history context in days to show in &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; for the selected commit, when the &lt;code&gt;Show History
Context&lt;/code&gt; menu item is invoked from &lt;code&gt;git gui blame&lt;/code&gt;. If this variable is set to zero, the whole history is shown.</source>
          <target state="translated">&lt;code&gt;git gui blame&lt;/code&gt; から&lt;a href=&quot;gitk&quot;&gt;[ &lt;/a&gt; &lt;code&gt;Show History Context&lt;/code&gt; 表示]メニュー項目が呼び出されたときに、選択したコミットのgitk [1]に表示する履歴コンテキストの半径を日数で指定します。この変数をゼロに設定すると、履歴全体が表示されます。</target>
        </trans-unit>
        <trans-unit id="f11e5547d2e0c72dd049c0935b29638a6ee69cf3" translate="yes" xml:space="preserve">
          <source>Specifies the shell command line to execute when the corresponding item of the &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;&lt;code&gt;Tools&lt;/code&gt; menu is invoked. This option is mandatory for every tool. The command is executed from the root of the working directory, and in the environment it receives the name of the tool as &lt;code&gt;GIT_GUITOOL&lt;/code&gt;, the name of the currently selected file as &lt;code&gt;FILENAME&lt;/code&gt;, and the name of the current branch as &lt;code&gt;CUR_BRANCH&lt;/code&gt; (if the head is detached, &lt;code&gt;CUR_BRANCH&lt;/code&gt; is empty).</source>
          <target state="translated">&lt;a href=&quot;git-gui&quot;&gt;git-gui [1] &lt;/a&gt; &lt;code&gt;Tools&lt;/code&gt; メニューの対応する項目が呼び出されたときに実行するシェルコマンドラインを指定します。このオプションは、すべてのツールで必須です。コマンドは作業ディレクトリのルートから実行され、環境では、ツールの名前として &lt;code&gt;GIT_GUITOOL&lt;/code&gt; 、現在選択されているファイルの名前として &lt;code&gt;FILENAME&lt;/code&gt; 、現在のブランチの名前として &lt;code&gt;CUR_BRANCH&lt;/code&gt; （ヘッドがデタッチ、 &lt;code&gt;CUR_BRANCH&lt;/code&gt; は空です）。</target>
        </trans-unit>
        <trans-unit id="b9843bcfef468e8924053c3490935a52737f70b4" translate="yes" xml:space="preserve">
          <source>Specifies the threshold to use in &lt;code&gt;git gui blame&lt;/code&gt; original location detection, measured in alphanumeric characters. See the &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt; manual for more information on copy detection.</source>
          <target state="translated">&lt;code&gt;git gui blame&lt;/code&gt; の元の場所の検出で使用するしきい値を英数字で測定して指定します。コピー検出の詳細については、&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]&lt;/a&gt;マニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="35d941c623037130ce3eda15ee67700140f974b9" translate="yes" xml:space="preserve">
          <source>Specifies the title to use for the prompt dialog. The default is the tool name.</source>
          <target state="translated">プロンプトダイアログに使用するタイトルを指定します。デフォルトはツール名です。</target>
        </trans-unit>
        <trans-unit id="52c4a2a4dc795a08ca1c6e643c489de2ec8bd5e5" translate="yes" xml:space="preserve">
          <source>Specifies whether the index file should include an &quot;End Of Index Entry&quot; section. This reduces index load time on multiprocessor machines but produces a message &quot;ignoring EOIE extension&quot; when reading the index using Git versions before 2.20. Defaults to &lt;code&gt;true&lt;/code&gt; if index.threads has been explicitly enabled, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">インデックスファイルに「インデックスエントリの終了」セクションを含めるかどうかを指定します。これにより、マルチプロセッサマシンでのインデックスの読み込み時間が短縮されますが、2.20より前のGitバージョンを使用してインデックスを読み取ると、「EOIE拡張を無視しています」というメッセージが表示されます。index.threadsが明示的に有効になっている場合、デフォルトは &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="525e2825828b98c76d10ccc05a720012cdd9968e" translate="yes" xml:space="preserve">
          <source>Specifies whether the index file should include an &quot;Index Entry Offset Table&quot; section. This reduces index load time on multiprocessor machines but produces a message &quot;ignoring IEOT extension&quot; when reading the index using Git versions before 2.20. Defaults to &lt;code&gt;true&lt;/code&gt; if index.threads has been explicitly enabled, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">インデックスファイルに「インデックスエントリオフセットテーブル」セクションを含めるかどうかを指定します。これにより、マルチプロセッサマシンでのインデックスの読み込み時間が短縮されますが、2.20より前のGitバージョンを使用してインデックスを読み取ると、「IEOT拡張を無視する」というメッセージが表示されます。index.threadsが明示的に有効になっている場合、デフォルトは &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8fdd8a31fc755f041d294b5f0a76be847216c212" translate="yes" xml:space="preserve">
          <source>Specifies which key format to use when signing with &lt;code&gt;--gpg-sign&lt;/code&gt;. Default is &quot;openpgp&quot; and another possible value is &quot;x509&quot;.</source>
          <target state="translated">&lt;code&gt;--gpg-sign&lt;/code&gt; で署名するときに使用するキー形式を指定します。デフォルトは「openpgp」で、別の可能な値は「x509」です。</target>
        </trans-unit>
        <trans-unit id="53399059f89e05e568d5d0da51714e4798f56246" translate="yes" xml:space="preserve">
          <source>Specifies which refs to fetch and which local refs to update. When no &amp;lt;refspec&amp;gt;s appear on the command line, the refs to fetch are read from &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; variables instead (see &lt;a href=&quot;#CRTB&quot;&gt;CONFIGURED REMOTE-TRACKING BRANCHES&lt;/a&gt; below).</source>
          <target state="translated">フェッチする参照と更新するローカル参照を指定します。コマンドラインに&amp;lt;refspec&amp;gt;が表示されない場合、フェッチする参照は、代わりに &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 変数から読み取られます（下記の&lt;a href=&quot;#CRTB&quot;&gt;構成されたリモートトラッキングブランチを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="60264eae7c0d99030432a57153dd31a20ae2e753" translate="yes" xml:space="preserve">
          <source>Specifies which refs to fetch and which local refs to update. When no &amp;lt;refspec&amp;gt;s appear on the command line, the refs to fetch are read from &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; variables instead (see &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;).</source>
          <target state="translated">フェッチする参照と更新するローカル参照を指定します。コマンドラインに&amp;lt;refspec&amp;gt;が表示されない場合、フェッチする参照は、代わりに &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 変数から読み取られます（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1874860df7878b35e35c3f03f4fe16310c6f5c2f" translate="yes" xml:space="preserve">
          <source>Specifies which refs to fetch and which local refs to update. When no &amp;lt;refspec&amp;gt;s appear on the command line, the refs to fetch are read from &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; variables instead (see the section &quot;CONFIGURED REMOTE-TRACKING BRANCHES&quot; in &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;).</source>
          <target state="translated">フェッチする参照と更新するローカル参照を指定します。コマンドラインに&amp;lt;refspec&amp;gt;が表示されない場合、フェッチするrefは代わりに &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 変数から読み取られます（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]の&lt;/a&gt;「CONFIGUREDREMOTE-TRACKINGBRANCHES」のセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="12c5a4fe1da6e3ddd052994379342b3963b9ece6" translate="yes" xml:space="preserve">
          <source>Specify a &quot;Bcc:&quot; value for each email. Default is the value of &lt;code&gt;sendemail.bcc&lt;/code&gt;.</source>
          <target state="translated">各メールの「Bcc：」値を指定します。デフォルトは &lt;code&gt;sendemail.bcc&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="490afafb9292b82bc6ff88488dc739661601f0fb" translate="yes" xml:space="preserve">
          <source>Specify a (&amp;lt;token&amp;gt;, &amp;lt;value&amp;gt;) pair that should be applied as a trailer to the input messages. See the description of this command.</source>
          <target state="translated">入力メッセージのトレーラーとして適用される（&amp;lt;token&amp;gt;、&amp;lt;value&amp;gt;）ペアを指定します。このコマンドの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="fda787c4a6303bd8c4899e47b2fd75ed69b102b2" translate="yes" xml:space="preserve">
          <source>Specify a comma separate list of common whitespace problems to notice in the same format as the &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable.</source>
          <target state="translated">一般的な空白の問題のコンマ区切りのリストを、 &lt;code&gt;core.whitespace&lt;/code&gt; 構成変数と同じ形式で指定します。</target>
        </trans-unit>
        <trans-unit id="f01423252b19025369d9eaeaea940daec72c630e" translate="yes" xml:space="preserve">
          <source>Specify a command to execute once per patch file which should generate patch file specific &quot;Cc:&quot; entries. Output of this command must be single email address per line. Default is the value of &lt;code&gt;sendemail.ccCmd&lt;/code&gt; configuration value.</source>
          <target state="translated">パッチファイル固有の「Cc：」エントリを生成するパッチファイルごとに1回実行するコマンドを指定します。このコマンドの出力は、1行に1つのメールアドレスである必要があります。デフォルトは &lt;code&gt;sendemail.ccCmd&lt;/code&gt; 構成値の値です。</target>
        </trans-unit>
        <trans-unit id="8a69aa64125bc041f34a0988fcc820e93ea1cefe" translate="yes" xml:space="preserve">
          <source>Specify a command to execute once per patch file which should generate patch file specific &quot;To:&quot; entries. Output of this command must be single email address per line. Default is the value of &lt;code&gt;sendemail.tocmd&lt;/code&gt; configuration value.</source>
          <target state="translated">パッチファイル固有の「To：」エントリを生成するパッチファイルごとに1回実行するコマンドを指定します。このコマンドの出力は、1行に1つのメールアドレスである必要があります。デフォルトは &lt;code&gt;sendemail.tocmd&lt;/code&gt; 構成値の値です。</target>
        </trans-unit>
        <trans-unit id="f6cbbfb6d081efa8553064ef51812c93149ccd37" translate="yes" xml:space="preserve">
          <source>Specify a custom command for viewing diffs. &lt;code&gt;git-difftool&lt;/code&gt; ignores the configured defaults and runs &lt;code&gt;$command $LOCAL $REMOTE&lt;/code&gt; when this option is specified. Additionally, &lt;code&gt;$BASE&lt;/code&gt; is set in the environment.</source>
          <target state="translated">差分を表示するためのカスタムコマンドを指定します。 &lt;code&gt;git-difftool&lt;/code&gt; は、このオプションが指定されている場合、構成されたデフォルトを無視し、 &lt;code&gt;$command $LOCAL $REMOTE&lt;/code&gt; を実行します。さらに、 &lt;code&gt;$BASE&lt;/code&gt; が環境に設定されます。</target>
        </trans-unit>
        <trans-unit id="f8f61e37f968bf27d42f1bb30c54e88a19aa0b4c" translate="yes" xml:space="preserve">
          <source>Specify a starting &quot;Cc:&quot; value for each email. Default is the value of &lt;code&gt;sendemail.cc&lt;/code&gt;.</source>
          <target state="translated">各電子メールの開始 &quot;Cc：&quot;値を指定します。デフォルトは &lt;code&gt;sendemail.cc&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="d751165243a07b0d8cf01d157a40d624e1274cc2" translate="yes" xml:space="preserve">
          <source>Specify a web browser that may be used by some commands. Currently only &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; and &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt; may use it.</source>
          <target state="translated">一部のコマンドで使用できるWebブラウザーを指定します。現在、&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;と&lt;a href=&quot;git-help&quot;&gt;git-help [1]のみ&lt;/a&gt;が使用できます。</target>
        </trans-unit>
        <trans-unit id="3184d8ec3f5fc0c7b49c79eaaa392759be7aeb74" translate="yes" xml:space="preserve">
          <source>Specify an additional category of recipients to suppress the auto-cc of:</source>
          <target state="translated">自動CCを抑制する受信者の追加カテゴリを指定します。</target>
        </trans-unit>
        <trans-unit id="853dca472e65277cdebf40417680870445848b28" translate="yes" xml:space="preserve">
          <source>Specify an alternate suffix for the bugreport name, to create a file named &lt;code&gt;git-bugreport-&amp;lt;formatted suffix&amp;gt;&lt;/code&gt;. This should take the form of a strftime(3) format string; the current local time will be used.</source>
          <target state="translated">バグレポート名の代替サフィックスを指定して、 &lt;code&gt;git-bugreport-&amp;lt;formatted suffix&amp;gt;&lt;/code&gt; という名前のファイルを作成します。これは、strftime（3）フォーマット文字列の形式をとる必要があります。現在の現地時間が使用されます。</target>
        </trans-unit>
        <trans-unit id="6c3bb30f438f4e33cf02f17fe7e170959d2a5bad" translate="yes" xml:space="preserve">
          <source>Specify an external helper to be called when a username or password credential is needed; the helper may consult external storage to avoid prompting the user for the credentials. Note that multiple helpers may be defined. See &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; for details.</source>
          <target state="translated">ユーザー名またはパスワードの資格情報が必要なときに呼び出される外部ヘルパーを指定します。ヘルパーは外部ストレージを調べて、ユーザーに資格情報を要求しないようにすることができます。複数のヘルパーを定義できることに注意してください。詳細については、&lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5898b8f989a6a4118fc60032ee65af46c3876839" translate="yes" xml:space="preserve">
          <source>Specify an external helper to be called when a username or password credential is needed; the helper may consult external storage to avoid prompting the user for the credentials. This is normally the name of a credential helper with possible arguments, but may also be an absolute path with arguments or, if preceded by &lt;code&gt;!&lt;/code&gt;, shell commands.</source>
          <target state="translated">ユーザー名またはパスワードの資格情報が必要なときに呼び出される外部ヘルパーを指定します。ヘルパーは、ユーザーに資格情報の入力を求めないように、外部ストレージを参照する場合があります。これは通常、可能な引数を持つ資格情報ヘルパーの名前ですが、引数を持つ絶対パス、または前に &lt;code&gt;!&lt;/code&gt; が付いている場合は絶対パスの場合もあります。、シェルコマンド。</target>
        </trans-unit>
        <trans-unit id="88abf188bf279fdc57952e5f78070fe3d6b977d1" translate="yes" xml:space="preserve">
          <source>Specify an island name which gets to have its objects be packed first. This creates a kind of pseudo-pack at the front of one pack, so that the objects from the specified island are hopefully faster to copy into any pack that should be served to a user requesting these objects. In practice this means that the island specified should likely correspond to what is the most commonly cloned in the repo. See also &quot;DELTA ISLANDS&quot; in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">オブジェクトを最初にパックするアイランド名を指定します。これにより、1つのパックの前面に一種の疑似パックが作成されるため、指定されたアイランドからのオブジェクトは、これらのオブジェクトを要求するユーザーに提供する必要があるパックにコピーする方が高速です。実際には、これは、指定されたアイランドがレポで最も一般的にクローンされるものに対応する可能性があることを意味します。&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]の&lt;/a&gt;「DELTA ISLANDS」も参照してください。</target>
        </trans-unit>
        <trans-unit id="4f4ddca39682ecb94c54d4e5428623a9fabd67c0" translate="yes" xml:space="preserve">
          <source>Specify any of the options listed under OPTIONS that do not change stream semantic to suit the frontend&amp;rsquo;s needs. This command is optional and is not needed to perform an import.</source>
          <target state="translated">フロントエンドのニーズに合わせてストリームの意味を変更しないオプションの下にリストされているオプションを指定します。このコマンドはオプションであり、インポートの実行には必要ありません。</target>
        </trans-unit>
        <trans-unit id="126df40ac6c274763f2820bec126088754eb50a7" translate="yes" xml:space="preserve">
          <source>Specify authenticate method for authentication with IMAP server. If Git was built with the NO_CURL option, or if your curl version is older than 7.34.0, or if you&amp;rsquo;re running git-imap-send with the &lt;code&gt;--no-curl&lt;/code&gt; option, the only supported method is &lt;code&gt;CRAM-MD5&lt;/code&gt;. If this is not set then &lt;code&gt;git imap-send&lt;/code&gt; uses the basic IMAP plaintext LOGIN command.</source>
          <target state="translated">IMAPサーバーでの認証の認証方法を指定します。GitがNO_CURLオプションを使用してビルドされた場合、またはcurlのバージョンが7.34.0より古い場合、またはgit-imap-sendを &lt;code&gt;--no-curl&lt;/code&gt; オプションを指定して実行している場合、サポートされている唯一の方法は &lt;code&gt;CRAM-MD5&lt;/code&gt; です。これが設定されていない場合、 &lt;code&gt;git imap-send&lt;/code&gt; は基本的なIMAP平文LOGINコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="db15aaae21c1056154eef62ce5f5cbd5e82beaa7" translate="yes" xml:space="preserve">
          <source>Specify encoding of compose message. Default is the value of the &lt;code&gt;sendemail.composeencoding&lt;/code&gt;; if that is unspecified, UTF-8 is assumed.</source>
          <target state="translated">作成メッセージのエンコーディングを指定します。デフォルトは &lt;code&gt;sendemail.composeencoding&lt;/code&gt; の値です。それが指定されていない場合、UTF-8が想定されます。</target>
        </trans-unit>
        <trans-unit id="bb2c4dacdd5136c6abef6fcc4de5e9c24a473010" translate="yes" xml:space="preserve">
          <source>Specify how differences in submodules are shown. When specifying &lt;code&gt;--submodule=short&lt;/code&gt; the &lt;code&gt;short&lt;/code&gt; format is used. This format just shows the names of the commits at the beginning and end of the range. When &lt;code&gt;--submodule&lt;/code&gt; or &lt;code&gt;--submodule=log&lt;/code&gt; is specified, the &lt;code&gt;log&lt;/code&gt; format is used. This format lists the commits in the range like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;&lt;code&gt;summary&lt;/code&gt; does. When &lt;code&gt;--submodule=diff&lt;/code&gt; is specified, the &lt;code&gt;diff&lt;/code&gt; format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to &lt;code&gt;diff.submodule&lt;/code&gt; or the &lt;code&gt;short&lt;/code&gt; format if the config option is unset.</source>
          <target state="translated">サブモジュールの違いの表示方法を指定します。 &lt;code&gt;--submodule=short&lt;/code&gt; を指定すると、 &lt;code&gt;short&lt;/code&gt; 形式が使用されます。このフォーマットは、範囲の最初と最後のコミットの名前を表示するだけです。場合 &lt;code&gt;--submodule&lt;/code&gt; 又は &lt;code&gt;--submodule=log&lt;/code&gt; 指定され、 &lt;code&gt;log&lt;/code&gt; フォーマットが使用されます。このフォーマットは、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1] &lt;/a&gt; &lt;code&gt;summary&lt;/code&gt; のように範囲内のコミットをリストします。場合 &lt;code&gt;--submodule=diff&lt;/code&gt; 指定され、 &lt;code&gt;diff&lt;/code&gt; 形式が使用されています。このフォーマットは、コミット範囲間のサブモジュールの内容の変更のインライン差分を示しています。デフォルトは &lt;code&gt;diff.submodule&lt;/code&gt; または &lt;code&gt;short&lt;/code&gt; configオプションが設定されていない場合はフォーマットします。</target>
        </trans-unit>
        <trans-unit id="e212f603460a2824026571f0244622b2735e495f" translate="yes" xml:space="preserve">
          <source>Specify how multiple patterns are combined using Boolean expressions. &lt;code&gt;--or&lt;/code&gt; is the default operator. &lt;code&gt;--and&lt;/code&gt; has higher precedence than &lt;code&gt;--or&lt;/code&gt;. &lt;code&gt;-e&lt;/code&gt; has to be used for all patterns.</source>
          <target state="translated">ブール式を使用して複数のパターンを組み合わせる方法を指定します。 &lt;code&gt;--or&lt;/code&gt; デフォルトの演算子です。 &lt;code&gt;--and&lt;/code&gt; &lt;code&gt;--or&lt;/code&gt; 。よりも優先されます。 &lt;code&gt;-e&lt;/code&gt; はすべてのパターンに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ffbe8c6ac43df98980b6107e62dec3dfa7156507" translate="yes" xml:space="preserve">
          <source>Specify how to handle &lt;code&gt;encoding&lt;/code&gt; header in commit objects. When asking to &lt;code&gt;abort&lt;/code&gt; (which is the default), this program will die when encountering such a commit object. With &lt;code&gt;yes&lt;/code&gt;, the commit message will be re-encoded into UTF-8. With &lt;code&gt;no&lt;/code&gt;, the original encoding will be preserved.</source>
          <target state="translated">コミットオブジェクトの &lt;code&gt;encoding&lt;/code&gt; ヘッダーの処理方法を指定します。 &lt;code&gt;abort&lt;/code&gt; を要求する場合（デフォルト）、このプログラムは、そのようなコミットオブジェクトに遭遇すると終了します。 &lt;code&gt;yes&lt;/code&gt; 、コミットメッセージはUTF-8に再エンコードされます。では &lt;code&gt;no&lt;/code&gt; 、元のエンコードは保存されません。</target>
        </trans-unit>
        <trans-unit id="37815a435af244972cccaee7f12b140bf366ab25" translate="yes" xml:space="preserve">
          <source>Specify how to handle signed tags. Since any transformation after the export can change the tag names (which can also happen when excluding revisions) the signatures will not match.</source>
          <target state="translated">署名付きタグの扱い方を指定します。エクスポート後の変換でタグ名が変更される可能性があるので(リビジョンを除く場合にも起こりうる)、署名は一致しません。</target>
        </trans-unit>
        <trans-unit id="2e5b9b1beb3e649edbd3450c18f18cbc2b0b3c2a" translate="yes" xml:space="preserve">
          <source>Specify how to handle tags whose tagged object is filtered out. Since revisions and files to export can be limited by path, tagged objects may be filtered completely.</source>
          <target state="translated">タグ付きオブジェクトがフィルタリングされたタグの扱い方を指定します。リビジョンやエクスポートするファイルはパスで制限できるので、タグ付けされたオブジェクトは完全にフィルタリングされている場合もあります。</target>
        </trans-unit>
        <trans-unit id="58a10039b2ffb00f4c15d28cf7a59fdf8252b1ba" translate="yes" xml:space="preserve">
          <source>Specify layout mode. See configuration variable column.ui for option syntax in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">レイアウトモードを指定します。&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt;オプション構文については、構成変数column.uiを参照してください。</target>
        </trans-unit>
        <trans-unit id="cd9fc5283ae0d7709eafb7d7c044a946ec4a926f" translate="yes" xml:space="preserve">
          <source>Specify submit behavior when a conflict with p4 is found, as per --conflict. The default behavior is &lt;code&gt;ask&lt;/code&gt;.</source>
          <target state="translated">--conflictに従って、p4との競合が検出されたときの送信動作を指定します。デフォルトの動作は &lt;code&gt;ask&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6b47b0eac1308c340a251aaa9bc02b368f9e6ec9" translate="yes" xml:space="preserve">
          <source>Specify that the Git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. When specified, the config variable &quot;core.sharedRepository&quot; is set so that files and directories under &lt;code&gt;$GIT_DIR&lt;/code&gt; are created with the requested permissions. When not specified, Git will use permissions reported by umask(2).</source>
          <target state="translated">Gitリポジトリを複数のユーザー間で共有することを指定します。これにより、同じグループに属するユーザーがそのリポジトリにプッシュすることができます。指定すると、構成変数 &quot;core.sharedRepository&quot;が設定され、 &lt;code&gt;$GIT_DIR&lt;/code&gt; 下のファイルとディレクトリが要求された権限で作成されます。指定しない場合、Gitはumask（2）によって報告された権限を使用します。</target>
        </trans-unit>
        <trans-unit id="553f83584ef890feb9fc0a5fa486ad4027a85d31" translate="yes" xml:space="preserve">
          <source>Specify that the p4 client spec should be used to identify p4 depot paths of interest. This is equivalent to specifying the option &lt;code&gt;--use-client-spec&lt;/code&gt;. See the &quot;CLIENT SPEC&quot; section above. This variable is a boolean, not the name of a p4 client.</source>
          <target state="translated">対象のp4デポパスを識別するためにp4クライアント仕様を使用する必要があることを指定します。これは、オプション &lt;code&gt;--use-client-spec&lt;/code&gt; を指定することと同じです。上記の「クライアント仕様」セクションを参照してください。この変数はブール値であり、p4クライアントの名前ではありません。</target>
        </trans-unit>
        <trans-unit id="ee45839e9a36541472b0e6b0c79bb025ae2d044b" translate="yes" xml:space="preserve">
          <source>Specify the SVN username to perform the commit as. This option overrides the &lt;code&gt;username&lt;/code&gt; configuration property.</source>
          <target state="translated">コミットを実行するSVNユーザー名を指定します。このオプションは、 &lt;code&gt;username&lt;/code&gt; 構成プロパティーをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="ce5445a596c457d8087a3ba95eb2c606f830762e" translate="yes" xml:space="preserve">
          <source>Specify the [svn-remote &quot;&amp;lt;remote name&amp;gt;&quot;] section to use, this allows SVN multiple repositories to be tracked. Default: &quot;svn&quot;</source>
          <target state="translated">使用する[svn-remote &quot;&amp;lt;remote name&amp;gt;&quot;]セクションを指定すると、SVNの複数のリポジトリを追跡できます。デフォルト： &quot;svn&quot;</target>
        </trans-unit>
        <trans-unit id="9617526476bf00e3e1b98443975d22edd359d482" translate="yes" xml:space="preserve">
          <source>Specify the address where replies from recipients should go to. Use this if replies to messages should go to another address than what is specified with the --from parameter.</source>
          <target state="translated">受信者からの返信の宛先を指定します。メッセージへの返信が --from パラメータで指定したものとは別のアドレスに行く場合に使用します。</target>
        </trans-unit>
        <trans-unit id="ee03a68cf221fcf3ea580414a042d4bf2bb9f1e8" translate="yes" xml:space="preserve">
          <source>Specify the browser that will be used to display help in the &lt;code&gt;web&lt;/code&gt; format. See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;.</source>
          <target state="translated">ヘルプを &lt;code&gt;web&lt;/code&gt; 形式で表示するために使用するブラウザーを指定します。&lt;a href=&quot;git-help&quot;&gt;git-help [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="70ff10aa9e9d4bf715e29b8e032ab68c07b42b92" translate="yes" xml:space="preserve">
          <source>Specify the bundle version. Version 2 is the older format and can only be used with SHA-1 repositories; the newer version 3 contains capabilities that permit extensions. The default is the oldest supported format, based on the hash algorithm in use.</source>
          <target state="translated">バンドルのバージョンを指定します。バージョン 2 は古いフォーマットで、SHA-1 リポジトリでのみ使用できます。デフォルトは、使用されているハッシュアルゴリズムに基づいて、サポートされている最も古い形式です。</target>
        </trans-unit>
        <trans-unit id="8aa86dc00b5d1ada804b541ee50aabffe17fa3ad" translate="yes" xml:space="preserve">
          <source>Specify the character used to indicate new, old or context lines in the generated patch. Normally they are &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt; and ' ' respectively.</source>
          <target state="translated">生成されたパッチの新しい行、古い行、またはコンテキスト行を示すために使用される文字を指定します。通常、それらはそれぞれ &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、および ''です。</target>
        </trans-unit>
        <trans-unit id="966a510a55d7cdd1c3c8b5ab55defa7916878e77" translate="yes" xml:space="preserve">
          <source>Specify the command to invoke the specified browser. The specified command is evaluated in shell with the URLs passed as arguments. (See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt;.)</source>
          <target state="translated">指定したブラウザを起動するコマンドを指定してください。指定されたコマンドは、引数として渡されたURLを使用してシェルで評価されます。（&lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse [1]を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="cb636a61044a94ec71c2c0e48db959f09a640e28" translate="yes" xml:space="preserve">
          <source>Specify the command to invoke the specified browser. The specified command is evaluated in shell with the URLs passed as arguments. (See git-web{litdd}browse[1].)</source>
          <target state="translated">指定したブラウザを起動するコマンドを指定します。指定したコマンドは、引数として渡された URL をシェルで評価します (git-web{litdd}browse[1]を参照ください)。(git-web{litdd}browse[1]を参照ください)。</target>
        </trans-unit>
        <trans-unit id="f8ec599a595d519e45f7089bd76b8eb2f0cf86d7" translate="yes" xml:space="preserve">
          <source>Specify the command to invoke the specified diff tool.</source>
          <target state="translated">指定したdiffツールを起動するコマンドを指定します。</target>
        </trans-unit>
        <trans-unit id="045550ad84d88752a76cca9657a08fe5f6314875" translate="yes" xml:space="preserve">
          <source>Specify the command to invoke the specified diff tool. The specified command is evaluated in shell with the following variables available: &lt;code&gt;LOCAL&lt;/code&gt; is set to the name of the temporary file containing the contents of the diff pre-image and &lt;code&gt;REMOTE&lt;/code&gt; is set to the name of the temporary file containing the contents of the diff post-image.</source>
          <target state="translated">コマンドを指定して、指定したdiffツールを呼び出します。指定されたコマンドは、次の変数を使用してシェルで評価されます &lt;code&gt;LOCAL&lt;/code&gt; は、差分プリイメージのコンテンツを含む一時ファイルの名前に設定され、 &lt;code&gt;REMOTE&lt;/code&gt; は、差分ポストのコンテンツを含む一時ファイルの名前に設定されます。 -画像。</target>
        </trans-unit>
        <trans-unit id="a4e7d7e1334d2dbe270d234d60ef8777bddd17c9" translate="yes" xml:space="preserve">
          <source>Specify the command to invoke the specified man viewer. The specified command is evaluated in shell with the man page passed as argument. (See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;.)</source>
          <target state="translated">指定されたmanビューアを呼び出すコマンドを指定します。指定されたコマンドは、引数として渡されるmanページを使用してシェルで評価されます。（&lt;a href=&quot;git-help&quot;&gt;git-help [1]を&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="3a2ff684c7c448a4b91310593e49dad0e76d3118" translate="yes" xml:space="preserve">
          <source>Specify the command to invoke the specified merge tool. The specified command is evaluated in shell with the following variables available: &lt;code&gt;BASE&lt;/code&gt; is the name of a temporary file containing the common base of the files to be merged, if available; &lt;code&gt;LOCAL&lt;/code&gt; is the name of a temporary file containing the contents of the file on the current branch; &lt;code&gt;REMOTE&lt;/code&gt; is the name of a temporary file containing the contents of the file from the branch being merged; &lt;code&gt;MERGED&lt;/code&gt; contains the name of the file to which the merge tool should write the results of a successful merge.</source>
          <target state="translated">指定したマージツールを呼び出すコマンドを指定します。指定されたコマンドは、次の変数を使用してシェルで評価されます &lt;code&gt;BASE&lt;/code&gt; は、マージされるファイルの共通ベースを含む一時ファイルの名前です（使用可能な場合）。 &lt;code&gt;LOCAL&lt;/code&gt; は、現在のブランチ上のファイルの内容を含む一時ファイルの名前です。 &lt;code&gt;REMOTE&lt;/code&gt; は、マージされるブランチからのファイルのコンテンツを含む一時ファイルの名前です。 &lt;code&gt;MERGED&lt;/code&gt; には、マージツールが成功したマージの結果を書き込むファイルの名前が含まれています。</target>
        </trans-unit>
        <trans-unit id="6a0cfc4c034bf82c50504b5853ea3a2048b66aa0" translate="yes" xml:space="preserve">
          <source>Specify the default pack index version. Valid values are 1 for legacy pack index used by Git versions prior to 1.5.2, and 2 for the new pack index with capabilities for packs larger than 4 GB as well as proper protection against the repacking of corrupted packs. Version 2 is the default. Note that version 2 is enforced and this config option ignored whenever the corresponding pack is larger than 2 GB.</source>
          <target state="translated">デフォルトのパックインデックスのバージョンを指定します。有効な値は、1.5.2 より前のバージョンの Git で使用されていたレガシーなパックインデックスを表す 1 と、4 GB を超えるパックに対応し、破損したパックの再パックを防ぐための適切な保護機能を持つ新しいパックインデックスを表す 2 です。バージョン 2 がデフォルトです。バージョン 2 が適用され、対応するパックが 2 GB を超える場合はこの設定オプションは無視されることに注意しましょう。</target>
        </trans-unit>
        <trans-unit id="237b5a9487d0a4c4f3b292963fb14ac9431d7354" translate="yes" xml:space="preserve">
          <source>Specify the directory from which templates will be copied. (See the &quot;TEMPLATE DIRECTORY&quot; section of &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt;.)</source>
          <target state="translated">テンプレートのコピー元のディレクトリを指定します。（&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;の「TEMPLATE DIRECTORY」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="9e017dab9e6089dc4c6b8916eff9198d29b5fa5a" translate="yes" xml:space="preserve">
          <source>Specify the directory from which templates will be used. (See the &quot;TEMPLATE DIRECTORY&quot; section below.)</source>
          <target state="translated">テンプレートを使用するディレクトリを指定します。(後述の「TEMPLATE DIRECTORY」のセクションを参照)。</target>
        </trans-unit>
        <trans-unit id="10fbc8bd7f7f67034717ffef3bdc652592011a96" translate="yes" xml:space="preserve">
          <source>Specify the directory from which templates will be used; (See the &quot;TEMPLATE DIRECTORY&quot; section of &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt;.)</source>
          <target state="translated">テンプレートを使用するディレクトリを指定します。（&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;の「TEMPLATE DIRECTORY」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="6d06560706961e8be925ad5b0c5ec94cdc91c729" translate="yes" xml:space="preserve">
          <source>Specify the encryption to use, either &lt;code&gt;ssl&lt;/code&gt; or &lt;code&gt;tls&lt;/code&gt;. Any other value reverts to plain SMTP. Default is the value of &lt;code&gt;sendemail.smtpEncryption&lt;/code&gt;.</source>
          <target state="translated">使用する暗号化を &lt;code&gt;ssl&lt;/code&gt; または &lt;code&gt;tls&lt;/code&gt; のいずれかで指定します。その他の値はプレーンSMTPに戻ります。デフォルトは &lt;code&gt;sendemail.smtpEncryption&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="4d476f2efa135b04b0d382124ae1d7eb2f09baec" translate="yes" xml:space="preserve">
          <source>Specify the envelope sender used to send the emails. This is useful if your default address is not the address that is subscribed to a list. In order to use the &lt;code&gt;From&lt;/code&gt; address, set the value to &quot;auto&quot;. If you use the sendmail binary, you must have suitable privileges for the -f parameter. Default is the value of the &lt;code&gt;sendemail.envelopeSender&lt;/code&gt; configuration variable; if that is unspecified, choosing the envelope sender is left to your MTA.</source>
          <target state="translated">電子メールの送信に使用されるエンベロープ送信者を指定します。これは、デフォルトのアドレスがリストに登録されているアドレスではない場合に役立ちます。 &lt;code&gt;From&lt;/code&gt; アドレスを使用するには、値を「auto」に設定します。 sendmailバイナリーを使用する場合、-fパラメーターに対する適切な特権が必要です。デフォルトは &lt;code&gt;sendemail.envelopeSender&lt;/code&gt; 構成変数の値です。それが指定されていない場合、エンベロープ送信者の選択はMTAに委ねられます。</target>
        </trans-unit>
        <trans-unit id="57154856f70bd26e9f32c73474da174dbb6a71bf" translate="yes" xml:space="preserve">
          <source>Specify the format in which differences in submodules are shown. The &quot;short&quot; format just shows the names of the commits at the beginning and end of the range. The &quot;log&quot; format lists the commits in the range like &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;&lt;code&gt;summary&lt;/code&gt; does. The &quot;diff&quot; format shows an inline diff of the changed contents of the submodule. Defaults to &quot;short&quot;.</source>
          <target state="translated">サブモジュールの違いが表示される形式を指定します。「短い」形式は、範囲の最初と最後のコミットの名前を表示するだけです。「ログ」フォーマットは、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1] &lt;/a&gt; &lt;code&gt;summary&lt;/code&gt; ように、範囲内のコミットをリストします。「diff」フォーマットは、サブモジュールの変更されたコンテンツのインラインdiffを示します。デフォルトは「short」です。</target>
        </trans-unit>
        <trans-unit id="ee4e54ea6641c26749f683e2086f11110bfcb031" translate="yes" xml:space="preserve">
          <source>Specify the full path of &lt;code&gt;git-upload-pack&lt;/code&gt; on the remote host. This allows listing references from repositories accessed via SSH and where the SSH daemon does not use the PATH configured by the user.</source>
          <target state="translated">リモートホストの &lt;code&gt;git-upload-pack&lt;/code&gt; の完全パスを指定します。これにより、SSH経由でアクセスされ、SSHデーモンがユーザーが設定したPATHを使用しないリポジトリからの参照を一覧表示できます。</target>
        </trans-unit>
        <trans-unit id="06ad205dd66ffad363b165c748636d60b7e9ddfc" translate="yes" xml:space="preserve">
          <source>Specify the given object format (hash algorithm) for the index file. The valid values are &lt;code&gt;sha1&lt;/code&gt; and (if enabled) &lt;code&gt;sha256&lt;/code&gt;. The default is the algorithm for the current repository (set by &lt;code&gt;extensions.objectFormat&lt;/code&gt;), or &lt;code&gt;sha1&lt;/code&gt; if no value is set or outside a repository..</source>
          <target state="translated">インデックスファイルに指定されたオブジェクト形式（ハッシュアルゴリズム）を指定します。有効な値は &lt;code&gt;sha1&lt;/code&gt; および（有効な場合） &lt;code&gt;sha256&lt;/code&gt; です。デフォルトは、現在のリポジトリのアルゴリズム（ &lt;code&gt;extensions.objectFormat&lt;/code&gt; で設定）、または値が設定されていないかリポジトリの外部にある場合は &lt;code&gt;sha1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2b5df638fbdbefd14fe565482082a779d66f41cb" translate="yes" xml:space="preserve">
          <source>Specify the given object format (hash algorithm) for the pack. The valid values are &lt;code&gt;sha1&lt;/code&gt; and (if enabled) &lt;code&gt;sha256&lt;/code&gt;. The default is the algorithm for the current repository (set by &lt;code&gt;extensions.objectFormat&lt;/code&gt;), or &lt;code&gt;sha1&lt;/code&gt; if no value is set or outside a repository.</source>
          <target state="translated">パックに指定されたオブジェクト形式（ハッシュアルゴリズム）を指定します。有効な値は &lt;code&gt;sha1&lt;/code&gt; および（有効な場合） &lt;code&gt;sha256&lt;/code&gt; です。デフォルトは、現在のリポジトリのアルゴリズム（ &lt;code&gt;extensions.objectFormat&lt;/code&gt; で設定）、または値が設定されていないかリポジトリの外部にある場合は &lt;code&gt;sha1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="14a57f9547f120982212f828efa3a309472cc768" translate="yes" xml:space="preserve">
          <source>Specify the given object format (hash algorithm) for the repository. The valid values are &lt;code&gt;sha1&lt;/code&gt; and (if enabled) &lt;code&gt;sha256&lt;/code&gt;. &lt;code&gt;sha1&lt;/code&gt; is the default.</source>
          <target state="translated">リポジトリに指定されたオブジェクト形式（ハッシュアルゴリズム）を指定します。有効な値は &lt;code&gt;sha1&lt;/code&gt; および（有効な場合） &lt;code&gt;sha256&lt;/code&gt; です。 &lt;code&gt;sha1&lt;/code&gt; がデフォルトです。</target>
        </trans-unit>
        <trans-unit id="642e4180256fc24e29fea6cad40cadddb83843bb" translate="yes" xml:space="preserve">
          <source>Specify the hash algorithm to use. The acceptable values are &lt;code&gt;sha1&lt;/code&gt; and &lt;code&gt;sha256&lt;/code&gt;. If not specified, &lt;code&gt;sha1&lt;/code&gt; is assumed. It is an error to specify this key unless &lt;code&gt;core.repositoryFormatVersion&lt;/code&gt; is 1.</source>
          <target state="translated">使用するハッシュアルゴリズムを指定します。許容値は &lt;code&gt;sha1&lt;/code&gt; と &lt;code&gt;sha256&lt;/code&gt; です。指定しない場合、 &lt;code&gt;sha1&lt;/code&gt; が想定されます。 &lt;code&gt;core.repositoryFormatVersion&lt;/code&gt; が1でない限り、このキーを指定するとエラーになります。</target>
        </trans-unit>
        <trans-unit id="e05f34f2b12543d24deddf183d7f5563e4746b8d" translate="yes" xml:space="preserve">
          <source>Specify the initial subject of the email thread. Only necessary if --compose is also set. If --compose is not set, this will be prompted for.</source>
          <target state="translated">メールスレッドの最初の件名を指定します。composeも設定されている場合のみ必要です。composeが設定されていない場合は、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="7f0e894272a77fe6a04290fbdb329a63eb87bf76" translate="yes" xml:space="preserve">
          <source>Specify the layout when list items in &lt;code&gt;git clean -i&lt;/code&gt;, which always shows files and directories in columns. See &lt;code&gt;column.ui&lt;/code&gt; for details.</source>
          <target state="translated">リストアイテムのレイアウトを &lt;code&gt;git clean -i&lt;/code&gt; で指定します。これは常にファイルとディレクトリを列で表示します。詳細については、 &lt;code&gt;column.ui&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f7208179bdf36d6bc3e9b1d1f4f91288e1356b3f" translate="yes" xml:space="preserve">
          <source>Specify the location of the CVS checkout to use for the export. This option does not require GIT_DIR to be set before execution if the current directory is within a Git repository. The default is the value of &lt;code&gt;cvsexportcommit.cvsdir&lt;/code&gt;.</source>
          <target state="translated">エクスポートに使用するCVSチェックアウトの場所を指定します。現在のディレクトリがGitリポジトリ内にある場合、このオプションでは実行前にGIT_DIRを設定する必要はありません。デフォルトは &lt;code&gt;cvsexportcommit.cvsdir&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="4c1271576d0edb7f1f0d6c8d0d3f48964a9bd30e" translate="yes" xml:space="preserve">
          <source>Specify the most recent revision to keep. All later revisions are discarded.</source>
          <target state="translated">保存する最新のリビジョンを指定します。それ以降のリビジョンはすべて破棄されます。</target>
        </trans-unit>
        <trans-unit id="dbfd748a4216557f92920425eee493e6f587b7d2" translate="yes" xml:space="preserve">
          <source>Specify the name of a CVS checkout using the -w switch or execute it from the root of the CVS working copy. In the latter case GIT_DIR must be defined. See examples below.</source>
          <target state="translated">wスイッチでCVSチェックアウトの名前を指定するか、CVS作業コピーのルートから実行します。後者の場合はgit_dirを定義する必要があります。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f5685351080bbe842e1b77f6e72d7f56e71124e" translate="yes" xml:space="preserve">
          <source>Specify the path where the HTML documentation resides. File system paths and URLs are supported. HTML pages will be prefixed with this path when help is displayed in the &lt;code&gt;web&lt;/code&gt; format. This defaults to the documentation path of your Git installation.</source>
          <target state="translated">HTMLドキュメントが存在するパスを指定します。ファイルシステムのパスとURLがサポートされています。ヘルプが &lt;code&gt;web&lt;/code&gt; 形式で表示される場合、HTMLページの前にこのパスが付けられます。デフォルトでは、Gitインストールのドキュメントパスになります。</target>
        </trans-unit>
        <trans-unit id="3939c032cc21518f83cfc7e855a79944401164b0" translate="yes" xml:space="preserve">
          <source>Specify the pathname of a file to use as the template for new commit messages.</source>
          <target state="translated">新しいコミットメッセージのテンプレートとして使用するファイルのパス名を指定します。</target>
        </trans-unit>
        <trans-unit id="626310e55266a25c38521d0786f942652add8252" translate="yes" xml:space="preserve">
          <source>Specify the primary recipient of the emails generated. Generally, this will be the upstream maintainer of the project involved. Default is the value of the &lt;code&gt;sendemail.to&lt;/code&gt; configuration value; if that is unspecified, and --to-cmd is not specified, this will be prompted for.</source>
          <target state="translated">生成される電子メールの主な受信者を指定します。通常、これは関係するプロジェクトの上流のメンテナです。デフォルトは &lt;code&gt;sendemail.to&lt;/code&gt; 構成値の値です。これが指定されておらず、-to-cmdが指定されていない場合は、プロンプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="904cbddb8fe90053f040a40b660f937c8ee221c5" translate="yes" xml:space="preserve">
          <source>Specify the program that will be used to browse your working repository in gitweb. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">gitwebで作業リポジトリを参照するために使用されるプログラムを指定します。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="87648a4a4b9f3684c45dea895b93d3728e0b89f7" translate="yes" xml:space="preserve">
          <source>Specify the programs that may be used to display help in the &lt;code&gt;man&lt;/code&gt; format. See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;.</source>
          <target state="translated">ヘルプの表示に使用できるプログラムを &lt;code&gt;man&lt;/code&gt; 形式で指定します。&lt;a href=&quot;git-help&quot;&gt;git-help [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c051775f78daae77408669a949bcd688ddbd949c" translate="yes" xml:space="preserve">
          <source>Specify the restore location. If neither option is specified, by default the working tree is restored. Specifying &lt;code&gt;--staged&lt;/code&gt; will only restore the index. Specifying both restores both.</source>
          <target state="translated">復元場所を指定します。どちらのオプションも指定されていない場合、デフォルトで作業ツリーが復元されます。 &lt;code&gt;--staged&lt;/code&gt; を指定すると、インデックスのみが復元されます。両方を指定すると、両方が復元されます。</target>
        </trans-unit>
        <trans-unit id="95b7f682630cddb98a68355ef07c41860159997c" translate="yes" xml:space="preserve">
          <source>Specify the sender of the emails. If not specified on the command line, the value of the &lt;code&gt;sendemail.from&lt;/code&gt; configuration option is used. If neither the command-line option nor &lt;code&gt;sendemail.from&lt;/code&gt; are set, then the user will be prompted for the value. The default for the prompt will be the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not set, as returned by &quot;git var -l&quot;.</source>
          <target state="translated">メールの送信者を指定します。コマンドラインで指定しない場合、 &lt;code&gt;sendemail.from&lt;/code&gt; 構成オプションの値が使用されます。コマンドラインオプションも &lt;code&gt;sendemail.from&lt;/code&gt; も設定されていない場合、ユーザーは値の入力を求められます。プロンプトのデフォルトは、GIT_AUTHOR_IDENTの値、または設定されていない場合はGIT_COMMITTER_IDENTであり、「git var -l」によって返されます。</target>
        </trans-unit>
        <trans-unit id="8cba2f98ceccc0dae91e3c30287bb75513f4e951" translate="yes" xml:space="preserve">
          <source>Specify the style in which conflicted hunks are written out to working tree files upon merge. The default is &quot;merge&quot;, which shows a &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; conflict marker, changes made by one side, a &lt;code&gt;=======&lt;/code&gt; marker, changes made by the other side, and then a &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; marker. An alternate style, &quot;diff3&quot;, adds a &lt;code&gt;|||||||&lt;/code&gt; marker and the original text before the &lt;code&gt;=======&lt;/code&gt; marker.</source>
          <target state="translated">競合するハンクがマージ時に作業ツリーファイルに書き出されるスタイルを指定します。デフォルトを示す「マージ」さ &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; 競合マーカーは、片側、によって行われた変更 &lt;code&gt;=======&lt;/code&gt; マーカー、反対側によって行われ、その後変化 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; マーカー。代替スタイル「diff3」は、 &lt;code&gt;|||||||&lt;/code&gt; を追加しますマーカーと &lt;code&gt;=======&lt;/code&gt; マーカーの前の元のテキスト。</target>
        </trans-unit>
        <trans-unit id="d1c5be6270e8c898e52c9ccc68e940ca06ec404b" translate="yes" xml:space="preserve">
          <source>Specify the system that is used for large (binary) files. Please note that large file systems do not support the &lt;code&gt;git p4 submit&lt;/code&gt; command. Only Git LFS is implemented right now (see &lt;a href=&quot;https://git-lfs.github.com/&quot;&gt;https://git-lfs.github.com/&lt;/a&gt; for more information). Download and install the Git LFS command line extension to use this option and configure it like this:</source>
          <target state="translated">大きな（バイナリ）ファイルに使用するシステムを指定します。大きなファイルシステムは &lt;code&gt;git p4 submit&lt;/code&gt; コマンドをサポートしないことに注意してください。現在、Git LFSのみが実装されています（詳細については、&lt;a href=&quot;https://git-lfs.github.com/&quot;&gt;https：//git-lfs.github.com/&lt;/a&gt;を参照してください）。このオプションを使用するには、Git LFSコマンドライン拡張機能をダウンロードしてインストールし、次のように構成します。</target>
        </trans-unit>
        <trans-unit id="d0eef78fea38d4df295115dcb10e8e7ee7e56973" translate="yes" xml:space="preserve">
          <source>Specify the terminal width. By default &lt;code&gt;git column&lt;/code&gt; will detect the terminal width, or fall back to 80 if it is unable to do so.</source>
          <target state="translated">端子幅を指定してください デフォルトでは、 &lt;code&gt;git column&lt;/code&gt; はターミナルの幅を検出するか、検出できない場合は80にフォールバックします。</target>
        </trans-unit>
        <trans-unit id="724bb2755b4bad5b8b472dcd4850810c5212797c" translate="yes" xml:space="preserve">
          <source>Specify the transfer encoding to be used to send the message over SMTP. 7bit will fail upon encountering a non-ASCII message. quoted-printable can be useful when the repository contains files that contain carriage returns, but makes the raw patch email file (as saved from a MUA) much harder to inspect manually. base64 is even more fool proof, but also even more opaque. auto will use 8bit when possible, and quoted-printable otherwise.</source>
          <target state="translated">SMTP 経由でメッセージを送信する際に使用する転送エンコーディングを指定します。7bitは非ASCIIメッセージに遭遇したときに失敗します。 quoted-printableは、リポジトリにキャリッジリターンを含むファイルが含まれている場合に便利ですが、生のパッチメールファイル(MUAから保存されたもの)を手動で検査するのがはるかに困難になります。</target>
        </trans-unit>
        <trans-unit id="9612f0c17aac603d9a46ca6cb5d976f3bf4c5bf3" translate="yes" xml:space="preserve">
          <source>Specify the type (default: &quot;blob&quot;).</source>
          <target state="translated">タイプを指定します(デフォルトは &quot;blob&quot;)。</target>
        </trans-unit>
        <trans-unit id="13769f1d436d268baed7051a7c066221785b088a" translate="yes" xml:space="preserve">
          <source>Specify the type of dates the frontend will supply to fast-import within &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;committer&lt;/code&gt; and &lt;code&gt;tagger&lt;/code&gt; commands. See &amp;ldquo;Date Formats&amp;rdquo; below for details about which formats are supported, and their syntax.</source>
          <target state="translated">フロントエンドが &lt;code&gt;author&lt;/code&gt; 、 &lt;code&gt;committer&lt;/code&gt; 、 &lt;code&gt;tagger&lt;/code&gt; コマンド内の高速インポートに提供する日付のタイプを指定します。サポートされている形式とその構文の詳細については、以下の「日付形式」を参照してください。</target>
        </trans-unit>
        <trans-unit id="19ebff060f03d17e125a48bf86da29f25cd1bf35" translate="yes" xml:space="preserve">
          <source>Specify the version with which new index files should be initialized. This does not affect existing repositories. If &lt;code&gt;feature.manyFiles&lt;/code&gt; is enabled, then the default is 4.</source>
          <target state="translated">新しいインデックスファイルを初期化するバージョンを指定します。これは既存のリポジトリには影響しません。 &lt;code&gt;feature.manyFiles&lt;/code&gt; が有効な場合、デフォルトは4です。</target>
        </trans-unit>
        <trans-unit id="1dcaca1644c579ca7480d7fe912a3d5f89533d59" translate="yes" xml:space="preserve">
          <source>Specify what action will be performed when there is already at least one trailer with the same &amp;lt;token&amp;gt; in the message. A setting provided with &lt;code&gt;--if-exists&lt;/code&gt; overrides all configuration variables and applies to all &lt;code&gt;--trailer&lt;/code&gt; options until the next occurrence of &lt;code&gt;--if-exists&lt;/code&gt; or &lt;code&gt;--no-if-exists&lt;/code&gt;. Possible actions are &lt;code&gt;addIfDifferent&lt;/code&gt;, &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; and &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">メッセージに同じ&amp;lt;token&amp;gt;を持つトレーラがすでに少なくとも1つある場合に実行されるアクションを指定します。 &lt;code&gt;--if-exists&lt;/code&gt; で提供される設定は、すべての構成変数を上書きし、次に &lt;code&gt;--if-exists&lt;/code&gt; または &lt;code&gt;--no-if-exists&lt;/code&gt; が出現するまで、すべての &lt;code&gt;--trailer&lt;/code&gt; オプションに適用されます。可能なアクションは、 &lt;code&gt;addIfDifferent&lt;/code&gt; 、 &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;replace&lt;/code&gt; 、および &lt;code&gt;doNothing&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0811642f4a0657e779f7ae4b567538044cd6208f" translate="yes" xml:space="preserve">
          <source>Specify what action will be performed when there is no other trailer with the same &amp;lt;token&amp;gt; in the message. A setting provided with &lt;code&gt;--if-missing&lt;/code&gt; overrides all configuration variables and applies to all &lt;code&gt;--trailer&lt;/code&gt; options until the next occurrence of &lt;code&gt;--if-missing&lt;/code&gt; or &lt;code&gt;--no-if-missing&lt;/code&gt;. Possible actions are &lt;code&gt;doNothing&lt;/code&gt; or &lt;code&gt;add&lt;/code&gt;.</source>
          <target state="translated">メッセージに同じ&amp;lt;token&amp;gt;を持つトレーラーが他にない場合に実行されるアクションを指定します。 &lt;code&gt;--if-missing&lt;/code&gt; で提供される設定は、すべての構成変数を上書きし、次に &lt;code&gt;--if-missing&lt;/code&gt; または &lt;code&gt;--no-if-missing&lt;/code&gt; が出現するまで、すべての &lt;code&gt;--trailer&lt;/code&gt; オプションに適用されます。可能なアクションは &lt;code&gt;doNothing&lt;/code&gt; または &lt;code&gt;add&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4d686969af43bc9772a0a2bdde0f0d6918dfd1d4" translate="yes" xml:space="preserve">
          <source>Specify what destination ref to update with what source object. The format of a &amp;lt;refspec&amp;gt; parameter is an optional plus &lt;code&gt;+&lt;/code&gt;, followed by the source object &amp;lt;src&amp;gt;, followed by a colon &lt;code&gt;:&lt;/code&gt;, followed by the destination ref &amp;lt;dst&amp;gt;.</source>
          <target state="translated">どのソースオブジェクトでどの宛先参照を更新するかを指定します。&amp;lt;refspec&amp;gt;パラメータの形式は、オプションのプラス &lt;code&gt;+&lt;/code&gt; 、ソースオブジェクト&amp;lt;src&amp;gt;、コロン &lt;code&gt;:&lt;/code&gt; 、宛先ref &amp;lt;dst&amp;gt;の順です。</target>
        </trans-unit>
        <trans-unit id="6138b51fead99efbf1d6930137f2b387251ef604" translate="yes" xml:space="preserve">
          <source>Specify where all new trailers will be added. A setting provided with &lt;code&gt;--where&lt;/code&gt; overrides all configuration variables and applies to all &lt;code&gt;--trailer&lt;/code&gt; options until the next occurrence of &lt;code&gt;--where&lt;/code&gt; or &lt;code&gt;--no-where&lt;/code&gt;. Possible values are &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt; or &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="translated">すべての新しいトレーラーを追加する場所を指定します。 &lt;code&gt;--where&lt;/code&gt; で提供される設定は、すべての構成変数をオーバーライドし、次に &lt;code&gt;--where&lt;/code&gt; または &lt;code&gt;--no-where&lt;/code&gt; が出現するまで、すべての &lt;code&gt;--trailer&lt;/code&gt; オプションに適用されます。可能な値は &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;before&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; 、または &lt;code&gt;start&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9446eb9819e4ea522bac17e494630aff8d54bebb" translate="yes" xml:space="preserve">
          <source>Specify whether supported commands should output in columns. This variable consists of a list of tokens separated by spaces or commas:</source>
          <target state="translated">サポートされているコマンドを列で出力するかどうかを指定します。この変数は、スペースまたはカンマで区切られたトークンのリストで構成されます。</target>
        </trans-unit>
        <trans-unit id="c44825f076cf0385d99447ca6f9388f9e5d821d6" translate="yes" xml:space="preserve">
          <source>Specify whether to output branch listing in &lt;code&gt;git branch&lt;/code&gt; in columns. See &lt;code&gt;column.ui&lt;/code&gt; for details.</source>
          <target state="translated">列の &lt;code&gt;git branch&lt;/code&gt; にブランチ一覧を出力するかどうかを指定します。詳細については、 &lt;code&gt;column.ui&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb8ddb4258375ad9322849684e1d07ab6e005bcd" translate="yes" xml:space="preserve">
          <source>Specify whether to output tag listing in &lt;code&gt;git tag&lt;/code&gt; in columns. See &lt;code&gt;column.ui&lt;/code&gt; for details.</source>
          <target state="translated">列の &lt;code&gt;git tag&lt;/code&gt; にタグ一覧を出力するかどうかを指定します。詳細については、 &lt;code&gt;column.ui&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7607c69174b01d1bb15ae17f25fe8a2d96f9d58f" translate="yes" xml:space="preserve">
          <source>Specify whether to output untracked files in &lt;code&gt;git status&lt;/code&gt; in columns. See &lt;code&gt;column.ui&lt;/code&gt; for details.</source>
          <target state="translated">列に &lt;code&gt;git status&lt;/code&gt; 追跡されていないファイルを出力するかどうかを指定します。詳細については、 &lt;code&gt;column.ui&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="339267ba6eec9ae3e501f35791863aebe871608d" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;--no-force-if-includes&lt;/code&gt; disables this behavior.</source>
          <target state="translated">&lt;code&gt;--no-force-if-includes&lt;/code&gt; を指定すると、この動作が無効になります。</target>
        </trans-unit>
        <trans-unit id="b984e35657451690beb2903dd3dd6390cb372f55" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;--no-symlinks&lt;/code&gt; instructs &lt;code&gt;git difftool&lt;/code&gt; to create copies instead. &lt;code&gt;--no-symlinks&lt;/code&gt; is the default on Windows.</source>
          <target state="translated">&lt;code&gt;--no-symlinks&lt;/code&gt; を指定すると、代わりにコピーを作成するように &lt;code&gt;git difftool&lt;/code&gt; に指示します。 &lt;code&gt;--no-symlinks&lt;/code&gt; がWindowsのデフォルトです。</target>
        </trans-unit>
        <trans-unit id="3b6b4914f3cbc4ad3df641c0c4177b0ed1427ac9" translate="yes" xml:space="preserve">
          <source>Specifying &lt;code&gt;-b&lt;/code&gt; causes a new branch to be created as if &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; were called and then checked out. In this case you can use the &lt;code&gt;--track&lt;/code&gt; or &lt;code&gt;--no-track&lt;/code&gt; options, which will be passed to &lt;code&gt;git branch&lt;/code&gt;. As a convenience, &lt;code&gt;--track&lt;/code&gt; without &lt;code&gt;-b&lt;/code&gt; implies branch creation; see the description of &lt;code&gt;--track&lt;/code&gt; below.</source>
          <target state="translated">&lt;code&gt;-b&lt;/code&gt; を指定すると、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;が呼び出されてからチェックアウトされたかのように、新しいブランチが作成されます。この場合、 &lt;code&gt;git branch&lt;/code&gt; 渡される &lt;code&gt;--track&lt;/code&gt; または &lt;code&gt;--no-track&lt;/code&gt; オプションを使用できます。便宜上、 &lt;code&gt;-b&lt;/code&gt; なしの &lt;code&gt;--track&lt;/code&gt; はブランチの作成を意味します。以下の &lt;code&gt;--track&lt;/code&gt; の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="3d1224dfe57ea23830be77ce6389d9ea1f14e370" translate="yes" xml:space="preserve">
          <source>Specifying ranges</source>
          <target state="translated">範囲の指定</target>
        </trans-unit>
        <trans-unit id="c7c8ec2e47baa0d09987a0c4d6001b20abaaf2b4" translate="yes" xml:space="preserve">
          <source>Specifying references</source>
          <target state="translated">リファレンスの指定</target>
        </trans-unit>
        <trans-unit id="393f3ea7b8cd86c4b234c1534e51343677169802" translate="yes" xml:space="preserve">
          <source>Specifying revisions</source>
          <target state="translated">リビジョンの指定</target>
        </trans-unit>
        <trans-unit id="313d53ccb2201ad1fa56898f5e4fcf52a12b8cf8" translate="yes" xml:space="preserve">
          <source>Specifying revisions and ranges for Git</source>
          <target state="translated">Git のリビジョンと範囲を指定する</target>
        </trans-unit>
        <trans-unit id="3c37f7a18e7a3b3fd20a0b124dbe1485c84e7ed4" translate="yes" xml:space="preserve">
          <source>Specifying several revisions means the set of commits reachable from any of the given commits.</source>
          <target state="translated">複数のリビジョンを指定することは、与えられたコミットのいずれかから到達可能なコミットのセットを意味します。</target>
        </trans-unit>
        <trans-unit id="b0e60ddbfcfcb7ed6ee3dbb9222a892aaa26a36d" translate="yes" xml:space="preserve">
          <source>Specifying the location of the &quot;.git&quot; directory using this option (or &lt;code&gt;GIT_DIR&lt;/code&gt; environment variable) turns off the repository discovery that tries to find a directory with &quot;.git&quot; subdirectory (which is how the repository and the top-level of the working tree are discovered), and tells Git that you are at the top level of the working tree. If you are not at the top-level directory of the working tree, you should tell Git where the top-level of the working tree is, with the &lt;code&gt;--work-tree=&amp;lt;path&amp;gt;&lt;/code&gt; option (or &lt;code&gt;GIT_WORK_TREE&lt;/code&gt; environment variable)</source>
          <target state="translated">このオプション（または &lt;code&gt;GIT_DIR&lt;/code&gt; 環境変数）を使用して「.git」ディレクトリの場所を指定すると、「。git」サブディレクトリ（リポジトリと作業の最上位レベル）を持つディレクトリを検索しようとするリポジトリ検出がオフになります。ツリーが発見されました）、Gitに作業ツリーのトップレベルにいることを伝えます。作業ツリーの最上位ディレクトリにいない場合は、 &lt;code&gt;GIT_WORK_TREE&lt;/code&gt; &lt;code&gt;--work-tree=&amp;lt;path&amp;gt;&lt;/code&gt; オプション（またはGIT_WORK_TREE環境変数）を使用して、作業ツリーの最上位がどこにあるかをGitに通知する必要があります。</target>
        </trans-unit>
        <trans-unit id="c12054d536cbd9889e1a4db4d75b48d8a7f03cd2" translate="yes" xml:space="preserve">
          <source>Specifying the refs</source>
          <target state="translated">リファレンスの指定</target>
        </trans-unit>
        <trans-unit id="31f2abfdb1a3e7bab64495f843d089d388ea45e0" translate="yes" xml:space="preserve">
          <source>Spend extra cycles to find renames, copies and complete rewrites (very expensive).</source>
          <target state="translated">リネーム、コピー、完全な書き換えを見つけるために余分なサイクルを費やす(非常に高価)。</target>
        </trans-unit>
        <trans-unit id="6b695c34f0798ffd5026fe42cf041af8a841d861" translate="yes" xml:space="preserve">
          <source>Spend extra time to make sure the smallest possible diff is produced.</source>
          <target state="translated">余分な時間をかけて、可能な限り小さなデフを作るようにしましょう。</target>
        </trans-unit>
        <trans-unit id="8622c4dc8f748203e018cc0d2ec4e20b07c9830d" translate="yes" xml:space="preserve">
          <source>Split a commit apart into a sequence of commits</source>
          <target state="translated">コミットを一連のコミットに分割する</target>
        </trans-unit>
        <trans-unit id="9da7a78d6cd0199fb3cad874edd1ba683b830e12" translate="yes" xml:space="preserve">
          <source>Split index</source>
          <target state="translated">スプリットインデックス</target>
        </trans-unit>
        <trans-unit id="704e5487b89b9b30fcd9e576ab8763e642a1b938" translate="yes" xml:space="preserve">
          <source>Splits a mbox file or a Maildir into a list of files: &quot;0001&quot; &quot;0002&quot; .. in the specified directory so you can process them further from there.</source>
          <target state="translated">mboxファイルやMaildirをファイルのリストに分割します。0001&quot; &quot;0001&quot; &quot;0002&quot; ...を指定したディレクトリにあるファイルのリストに分割することで、そこからさらに処理することができます。</target>
        </trans-unit>
        <trans-unit id="30bc5e98fc4346f828d1d387cd6e1c89bab7df56" translate="yes" xml:space="preserve">
          <source>Splits mail messages in a mailbox into commit log message, authorship information and patches, and applies them to the current branch.</source>
          <target state="translated">メールボックス内のメールメッセージをコミットログメッセージ、オーサリング情報、パッチに分割し、現在のブランチに適用します。</target>
        </trans-unit>
        <trans-unit id="05a6d55bcdcfd4539a8e45cc0dd3c2f28f1895ad" translate="yes" xml:space="preserve">
          <source>Splitting a (logically single) project into multiple repositories and tying them back together. This can be used to overcome current limitations of Git&amp;rsquo;s implementation to have finer grained access:</source>
          <target state="translated">（論理的に単一の）プロジェクトを複数のリポジトリーに分割し、それらを結合します。これを使用して、Gitの実装の現在の制限を克服し、よりきめ細かいアクセスを行うことができます。</target>
        </trans-unit>
        <trans-unit id="dca5d29240b446b8bdd6f26fb0b4e46cb995769f" translate="yes" xml:space="preserve">
          <source>Splitting commits</source>
          <target state="translated">コミットの分割</target>
        </trans-unit>
        <trans-unit id="ab83ac1fcfed8f50260b11e517c47e9b533419b5" translate="yes" xml:space="preserve">
          <source>Splitting the CVS log into patch sets is done by &lt;code&gt;cvsps&lt;/code&gt;. At least version 2.1 is required.</source>
          <target state="translated">CVSログをパッチセットに分割するには、 &lt;code&gt;cvsps&lt;/code&gt; を使用します。少なくともバージョン2.1が必要です。</target>
        </trans-unit>
        <trans-unit id="a74a609811ea3b4041281496e2aa5c500ba6558b" translate="yes" xml:space="preserve">
          <source>Sq-quote</source>
          <target state="translated">Sq-quote</target>
        </trans-unit>
        <trans-unit id="d3e10219341e654fff6647b0dadeaeaf0534cae6" translate="yes" xml:space="preserve">
          <source>Squelch the progress indicator.</source>
          <target state="translated">進捗状況の表示をスクエルチします。</target>
        </trans-unit>
        <trans-unit id="56175f21751e04201e148f2612c700747850548a" translate="yes" xml:space="preserve">
          <source>Start &lt;code&gt;git gui&lt;/code&gt; and arrange to make exactly one commit before exiting and returning to the shell. The interface is limited to only commit actions, slightly reducing the application&amp;rsquo;s startup time and simplifying the menubar.</source>
          <target state="translated">&lt;code&gt;git gui&lt;/code&gt; を起動し、シェルを終了してシェルに戻る前に、1回だけコミットするように調整します。インターフェイスはコミットアクションのみに制限され、アプリケーションの起動時間をわずかに短縮し、メニューバーを簡素化します。</target>
        </trans-unit>
        <trans-unit id="1ad6edca0ad31761798d28bd8f2bcba01ec6ebde" translate="yes" xml:space="preserve">
          <source>Start a blame viewer on the specified file on the given version (or working directory if not specified).</source>
          <target state="translated">指定されたバージョン(指定されていない場合は作業ディレクトリ)で指定されたファイル上で blame ビューアを起動します。</target>
        </trans-unit>
        <trans-unit id="27818282f52d064df23dffafcd6a743ee7870fc8" translate="yes" xml:space="preserve">
          <source>Start a new Git repository for an existing code base</source>
          <target state="translated">既存のコードベースに対して新しい Git リポジトリを開始する</target>
        </trans-unit>
        <trans-unit id="dbad6a143691392b17e55eedf5d0cc7e518343d6" translate="yes" xml:space="preserve">
          <source>Start a transaction. In contrast to a non-transactional session, a transaction will automatically abort if the session ends without an explicit commit.</source>
          <target state="translated">トランザクションを開始します。非トランザクション型のセッションとは対照的に、明示的なコミットを行わずにセッションが終了した場合、トランザクションは自動的に終了します。</target>
        </trans-unit>
        <trans-unit id="6c5dfb3420a1367f99c30e1b35e7bdbb889d1205" translate="yes" xml:space="preserve">
          <source>Start a transaction. In contrast to a non-transactional session, a transaction will automatically abort if the session ends without an explicit commit. This command may create a new empty transaction when the current one has been committed or aborted already.</source>
          <target state="translated">トランザクションを開始します。非トランザクションのセッションとは対照的に、トランザクションは明示的なコミットなしにセッションが終了すると自動的に終了します。このコマンドは、現在のトランザクションがコミットされているか、すでにアボートされている場合に、新しい空のトランザクションを作成することができます。</target>
        </trans-unit>
        <trans-unit id="749535e22d531edd1c6d9e666c57e169bc2a2908" translate="yes" xml:space="preserve">
          <source>Start a tree browser showing all files in the specified commit. Files selected through the browser are opened in the blame viewer.</source>
          <target state="translated">指定されたコミット内のすべてのファイルを表示するツリーブラウザを起動します。ブラウザで選択されたファイルは blame ビューアで開かれます。</target>
        </trans-unit>
        <trans-unit id="4f65c13509b4c270214524b3ab095bad926fc4e3" translate="yes" xml:space="preserve">
          <source>Start an interactive rebase with &lt;code&gt;git rebase -i &amp;lt;commit&amp;gt;^&lt;/code&gt;, where &amp;lt;commit&amp;gt; is the commit you want to split. In fact, any commit range will do, as long as it contains that commit.</source>
          <target state="translated">&lt;code&gt;git rebase -i &amp;lt;commit&amp;gt;^&lt;/code&gt; でインタラクティブなリベースを開始します。ここで、&amp;lt;commit&amp;gt;は分割するコミットです。実際、そのコミットが含まれている限り、どのコミット範囲でも問題ありません。</target>
        </trans-unit>
        <trans-unit id="e89944344f3db8073a18706746155c852e5164e1" translate="yes" xml:space="preserve">
          <source>Start cleaning files and directories, and then quit.</source>
          <target state="translated">ファイルやディレクトリのクリーニングを開始し、終了します。</target>
        </trans-unit>
        <trans-unit id="b87ef51ca99e7074691b94843e801ff9544539ca" translate="yes" xml:space="preserve">
          <source>Start development from a known tag</source>
          <target state="translated">既知のタグから開発を開始</target>
        </trans-unit>
        <trans-unit id="57f8f31bd16af3371648ce77ae5076e70d2a7e21" translate="yes" xml:space="preserve">
          <source>Start it with the last commit you want to retain as-is:</source>
          <target state="translated">そのまま保持したい最後のコミットから開始します。</target>
        </trans-unit>
        <trans-unit id="2deb883b26612605cc58ed80bbd657e3f5419b69" translate="yes" xml:space="preserve">
          <source>Start numbering the patches at &amp;lt;n&amp;gt; instead of 1.</source>
          <target state="translated">1ではなく&amp;lt;n&amp;gt;からパッチの番号付けを開始します。</target>
        </trans-unit>
        <trans-unit id="f25f51b92f6dabcbe2c2bbe2f01c2d471018dd10" translate="yes" xml:space="preserve">
          <source>Start off with just creating any random files that you want to maintain in your Git repository. We&amp;rsquo;ll start off with a few bad examples, just to get a feel for how this works:</source>
          <target state="translated">まず、Gitリポジトリで維持したいランダムファイルを作成します。これがどのように機能するかを理解するために、いくつかの悪い例から始めます。</target>
        </trans-unit>
        <trans-unit id="b174f856568aac4ebedeecc136cb3af25d3888bc" translate="yes" xml:space="preserve">
          <source>Start running maintenance on the current repository. This performs the same config updates as the &lt;code&gt;register&lt;/code&gt; subcommand, then updates the background scheduler to run &lt;code&gt;git maintenance run --scheduled&lt;/code&gt; on an hourly basis.</source>
          <target state="translated">現在のリポジトリでメンテナンスの実行を開始します。これにより、 &lt;code&gt;register&lt;/code&gt; サブコマンドと同じ構成の更新が実行され、バックグラウンドスケジューラが更新されて、1時間ごとに &lt;code&gt;git maintenance run --scheduled&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="93ea699c6796ebb7b82a3a5927dc702e8f1a7316" translate="yes" xml:space="preserve">
          <source>Start the httpd instance and exit. Regenerate configuration files as necessary for spawning a new instance.</source>
          <target state="translated">httpd インスタンスを起動して終了します。新しいインスタンスを生成するために必要な設定ファイルを再生成します。</target>
        </trans-unit>
        <trans-unit id="4e8cde71c6f29e3b4dc0142edc8a7bdf1a0bc89b" translate="yes" xml:space="preserve">
          <source>Start the stream with a &lt;code&gt;feature done&lt;/code&gt; stanza, and terminate it with a &lt;code&gt;done&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;feature done&lt;/code&gt; スタンザでストリームを開始し、 &lt;code&gt;done&lt;/code&gt; コマンドでストリームを終了します。</target>
        </trans-unit>
        <trans-unit id="96e592387dc94e730df0ef669b5a78ed012d4c94" translate="yes" xml:space="preserve">
          <source>Starting a bisection</source>
          <target state="translated">二分法の開始</target>
        </trans-unit>
        <trans-unit id="b8f1956c80187223247d01b968f642bf0007a014" translate="yes" xml:space="preserve">
          <source>Starting point at which to create the new commits. If the --onto option is not specified, the starting point is &amp;lt;upstream&amp;gt;. May be any valid commit, and not just an existing branch name.</source>
          <target state="translated">新しいコミットを作成する開始点。--ontoオプションが指定されていない場合、開始点は&amp;lt;upstream&amp;gt;です。既存のブランチ名だけでなく、任意の有効なコミットである可能性があります。</target>
        </trans-unit>
        <trans-unit id="b2a5514cb8b0c290a6aeca31b2e191aff35672b1" translate="yes" xml:space="preserve">
          <source>Stash the changes in a dirty working directory away</source>
          <target state="translated">汚れた作業ディレクトリに変更点を隠しておく</target>
        </trans-unit>
        <trans-unit id="9b5a6df7ffb5f85d09cbb9082f2a407aa81ca866" translate="yes" xml:space="preserve">
          <source>State directories: The two backends keep their state in different directories under .git/</source>
          <target state="translated">状態のディレクトリ。2 つのバックエンドは、その状態を .git/以下の異なるディレクトリに保持します。</target>
        </trans-unit>
        <trans-unit id="abb935cbc47e1b75159f277e4b22bfc5de7bbee9" translate="yes" xml:space="preserve">
          <source>Static configuration of usernames for a given authentication context.</source>
          <target state="translated">指定された認証コンテキスト用のユーザ名の静的な設定。</target>
        </trans-unit>
        <trans-unit id="20520ab082263228efd3ab7ffc11e41906666da4" translate="yes" xml:space="preserve">
          <source>Status letters C and R are always followed by a score (denoting the percentage of similarity between the source and target of the move or copy). Status letter M may be followed by a score (denoting the percentage of dissimilarity) for file rewrites.</source>
          <target state="translated">ステータスレターCとRの後には常にスコアが続きます(移動またはコピーのソースとターゲットの間の類似性のパーセンテージを示す)。ファイルの書き換えでは、ステータス文字Mの後にスコア(非類似性の割合を示す)が続くことがあります。</target>
        </trans-unit>
        <trans-unit id="5910dfc64a273edb8d032604ca6d54bef3bf2f4e" translate="yes" xml:space="preserve">
          <source>Stop the httpd instance and exit. This does not generate any of the configuration files for spawning a new instance, nor does it close the browser.</source>
          <target state="translated">httpd インスタンスを停止して終了します。これは、新しいインスタンスを生成するための設定ファイルを生成したり、ブラウザを閉じたりすることはありません。</target>
        </trans-unit>
        <trans-unit id="12d3bab755f474b20ad13c1ab918e01e5f4eb7c4" translate="yes" xml:space="preserve">
          <source>Stop when a given path disappears from the tree.</source>
          <target state="translated">与えられたパスが木から消えたときに停止します。</target>
        </trans-unit>
        <trans-unit id="7363904e3ee0fd364e644f2e1b28c12dd383e027" translate="yes" xml:space="preserve">
          <source>Storage format</source>
          <target state="translated">保存形式</target>
        </trans-unit>
        <trans-unit id="9ff8274c9fcae633894b9e7ab1c37fd6e74f1f7a" translate="yes" xml:space="preserve">
          <source>Store Git commit times in the local time zone instead of UTC. This makes &lt;code&gt;git log&lt;/code&gt; (even without --date=local) show the same times that &lt;code&gt;svn log&lt;/code&gt; would in the local time zone.</source>
          <target state="translated">Gitコミット時刻をUTCではなくローカルタイムゾーンに保存します。これにより、 &lt;code&gt;git log&lt;/code&gt; （--date = localなしでも）が、 &lt;code&gt;svn log&lt;/code&gt; がローカルタイムゾーンで表示するのと同じ時間を表示します。</target>
        </trans-unit>
        <trans-unit id="c403801561a0441c1d742dd0499050f55d110cd9" translate="yes" xml:space="preserve">
          <source>Store a given stash created via &lt;code&gt;git stash create&lt;/code&gt; (which is a dangling merge commit) in the stash ref, updating the stash reflog. This is intended to be useful for scripts. It is probably not the command you want to use; see &quot;push&quot; above.</source>
          <target state="translated">&lt;code&gt;git stash create&lt;/code&gt; （ダングリングマージコミット）で作成された特定のstashをstash refに保存し、stash reflogを更新します。これはスクリプトで役立つことを意図しています。おそらく、使用したいコマンドではありません。上記の「プッシュ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b41300dc42c243e3949e2ecb7a4c10aea769103e" translate="yes" xml:space="preserve">
          <source>Store credentials indefinitely on disk. See &lt;a href=&quot;git-credential-store&quot;&gt;git-credential-store[1]&lt;/a&gt; for details.</source>
          <target state="translated">資格情報を無期限にディスクに保存します。詳細については、&lt;a href=&quot;git-credential-store&quot;&gt;git-credential-store [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="03384c8a5477964f7bc214ed7cbcde0772bb7755" translate="yes" xml:space="preserve">
          <source>Store the credential, if applicable to the helper.</source>
          <target state="translated">ヘルパーに該当する場合は、クレデンシャルを格納します。</target>
        </trans-unit>
        <trans-unit id="5597429620f06451a38a8e17b35a345310b01123" translate="yes" xml:space="preserve">
          <source>Store the fetched branch into a local branch before merging into the current branch:</source>
          <target state="translated">現在のブランチにマージする前に、取得したブランチをローカルブランチに保存します。</target>
        </trans-unit>
        <trans-unit id="687760eb98a14d7d5a6fbbba834cf9ccaaf83ea1" translate="yes" xml:space="preserve">
          <source>Store the files instead of deflating them.</source>
          <target state="translated">ファイルをデフレさせるのではなく、保存します。</target>
        </trans-unit>
        <trans-unit id="1512a579e2c05cbf63724a7c8d50327696297b00" translate="yes" xml:space="preserve">
          <source>Stores a set of &quot;objects&quot;, and an individual &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt; is identified by its &lt;a href=&quot;#def_object_name&quot;&gt;object name&lt;/a&gt;. The objects usually live in &lt;code&gt;$GIT_DIR/objects/&lt;/code&gt;.</source>
          <target state="translated">「オブジェクト」のセットを格納し、個々の&lt;a href=&quot;#def_object&quot;&gt;オブジェクト&lt;/a&gt;はその&lt;a href=&quot;#def_object_name&quot;&gt;オブジェクト名&lt;/a&gt;によって識別されます。オブジェクトは通常 &lt;code&gt;$GIT_DIR/objects/&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c6349a625008b244d26dbb9000ad7480816812a5" translate="yes" xml:space="preserve">
          <source>Stores shorthands for URL and default refnames for use when interacting with remote repositories via &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; commands. See the REMOTES section in &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; for details. This mechanism is legacy and not likely to be found in modern repositories. This directory is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/remotes&quot; will be used instead.</source>
          <target state="translated">&lt;code&gt;git fetch&lt;/code&gt; 、 &lt;code&gt;git pull&lt;/code&gt; 、および &lt;code&gt;git push&lt;/code&gt; コマンドを介してリモートリポジトリとやり取りするときに使用するURLとデフォルトの参照名の省略形を格納します。詳細については、&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;のREMOTESセクションを参照してください。このメカニズムはレガシーであり、最近のリポジトリには見られないでしょう。$ GIT_COMMON_DIRが設定されており、代わりに「$ GIT_COMMON_DIR / remotes」が使用される場合、このディレクトリは無視されます。</target>
        </trans-unit>
        <trans-unit id="39f2d5fc66110ba4ba0f8069c43a058a9f84529f" translate="yes" xml:space="preserve">
          <source>Storing multiple repositories as namespaces of a single repository avoids storing duplicate copies of the same objects, such as when storing multiple branches of the same source. The alternates mechanism provides similar support for avoiding duplicates, but alternates do not prevent duplication between new objects added to the repositories without ongoing maintenance, while namespaces do.</source>
          <target state="translated">複数のリポジトリを一つのリポジトリの名前空間として保存することで、同じソースの複数のブランチを保存する場合のように、同じオブジェクトの重複を避けることができます。オルタネート機構は重複を避けるために同様のサポートを提供しますが、名前空間が重複を防ぐのに対し、オルタネートは継続的なメンテナンスなしにリポジトリに追加された新しいオブジェクト間の重複を防ぐことはできません。</target>
        </trans-unit>
        <trans-unit id="ca1c76454e0d7e7718b023221d2b0aad3d2a1aba" translate="yes" xml:space="preserve">
          <source>Stream Comments</source>
          <target state="translated">ストリームコメント</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="5ab8d5b6efb1646dea2e4ea7d3282e3cb65c24cb" translate="yes" xml:space="preserve">
          <source>String to be printed at the beginning of each line.</source>
          <target state="translated">各行の先頭に印刷される文字列。</target>
        </trans-unit>
        <trans-unit id="382f9b3217a7726b3a52ca62702799f6d5434b48" translate="yes" xml:space="preserve">
          <source>String to be printed at the end of each line, including newline character.</source>
          <target state="translated">改行文字を含む、各行の末尾に印刷する文字列。</target>
        </trans-unit>
        <trans-unit id="ae0208ff14e492381101b38c4426143fc9d98dd6" translate="yes" xml:space="preserve">
          <source>String(s) &lt;code&gt;receive-pack&lt;/code&gt; and &lt;code&gt;upload-pack&lt;/code&gt; use to decide which refs to omit from their initial advertisements. Use more than one definition to specify multiple prefix strings. A ref that is under the hierarchies listed in the value of this variable is excluded, and is hidden when responding to &lt;code&gt;git push&lt;/code&gt; or &lt;code&gt;git
fetch&lt;/code&gt;. See &lt;code&gt;receive.hideRefs&lt;/code&gt; and &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; for program-specific versions of this config.</source>
          <target state="translated">文字列 &lt;code&gt;receive-pack&lt;/code&gt; および &lt;code&gt;upload-pack&lt;/code&gt; を使用して、最初の通知から除外する参照を決定します。複数の定義を使用して、複数のプレフィックス文字列を指定します。この変数の値にリストされている階層の下にある参照は除外され、 &lt;code&gt;git push&lt;/code&gt; または &lt;code&gt;git fetch&lt;/code&gt; に応答するときに非表示になります。参照 &lt;code&gt;receive.hideRefs&lt;/code&gt; と &lt;code&gt;uploadpack.hideRefs&lt;/code&gt; この設定のプログラム固有のバージョンの。</target>
        </trans-unit>
        <trans-unit id="dd5fa82aac351e4a1096fc62004ba110d66fe810" translate="yes" xml:space="preserve">
          <source>Strip leading and trailing empty lines, trailing whitespace, commentary and collapse consecutive empty lines.</source>
          <target state="translated">先頭の空行と末尾の空行、末尾の空白、コメント、連続する空行の折り返しを取り除く。</target>
        </trans-unit>
        <trans-unit id="7c8cf84261f17414d41a19324152deb0638ecb13" translate="yes" xml:space="preserve">
          <source>Subcommands</source>
          <target state="translated">Subcommands</target>
        </trans-unit>
        <trans-unit id="2dacf65959849884a011f36f76a04eebea94c5ea" translate="yes" xml:space="preserve">
          <source>Submit</source>
          <target state="translated">Submit</target>
        </trans-unit>
        <trans-unit id="f3de51d87e152838b373a65e626718325c16a058" translate="yes" xml:space="preserve">
          <source>Submit only the specified commit or range of commits, instead of the full list of changes that are in the current Git branch.</source>
          <target state="translated">現在の Git ブランチにある変更の一覧ではなく、指定したコミットや範囲のコミットのみを提出します。</target>
        </trans-unit>
        <trans-unit id="08c8f65685b697a18634ff4dd66ae0c7b7f8944c" translate="yes" xml:space="preserve">
          <source>Submit options</source>
          <target state="translated">オプションの提出</target>
        </trans-unit>
        <trans-unit id="3e96d88de40c1b4ce507f5624d2a7a2ae94fe14f" translate="yes" xml:space="preserve">
          <source>Submit variables</source>
          <target state="translated">変数の提出</target>
        </trans-unit>
        <trans-unit id="0213e9a40d8de329179170c49c9f0b36b9c8f25d" translate="yes" xml:space="preserve">
          <source>Submit your commits back to p4:</source>
          <target state="translated">コミットを p4 に戻してください。</target>
        </trans-unit>
        <trans-unit id="45b948a665e37752fe7a51975e7be3fc7f05181f" translate="yes" xml:space="preserve">
          <source>Submitting changes from a Git repository back to the p4 repository requires a separate p4 client workspace. This should be specified using the &lt;code&gt;P4CLIENT&lt;/code&gt; environment variable or the Git configuration variable &lt;code&gt;git-p4.client&lt;/code&gt;. The p4 client must exist, but the client root will be created and populated if it does not already exist.</source>
          <target state="translated">Gitリポジトリからp4リポジトリに変更を送信するには、個別のp4クライアントワークスペースが必要です。これは、 &lt;code&gt;P4CLIENT&lt;/code&gt; 環境変数またはGit構成変数 &lt;code&gt;git-p4.client&lt;/code&gt; を使用して指定する必要があります。p4クライアントは存在する必要がありますが、まだ存在しない場合は、クライアントルートが作成され、データが入力されます。</target>
        </trans-unit>
        <trans-unit id="6fdf0bad4a57f28ad8887a6fe4e3d9618491f48f" translate="yes" xml:space="preserve">
          <source>Submitting patches to a project</source>
          <target state="translated">プロジェクトへのパッチの提出</target>
        </trans-unit>
        <trans-unit id="d2d7b7a6dabf5680ef6fc53443124ea60acd88af" translate="yes" xml:space="preserve">
          <source>Submitting requires a p4 client, which is not in the same location as the Git repository. Patches are applied, one at a time, to this p4 client and submitted from there.</source>
          <target state="translated">送信にはp4クライアントが必要ですが、これはGitリポジトリと同じ場所にはありません。パッチはこの p4 クライアントに一度に一つずつ適用され、そこから提出されます。</target>
        </trans-unit>
        <trans-unit id="81d7b2b94000dc76db42f2c130ed58771103b34d" translate="yes" xml:space="preserve">
          <source>Submodule Rewriting</source>
          <target state="translated">サブモジュールの書き換え</target>
        </trans-unit>
        <trans-unit id="e107551e51d7866e29fbfac7f1a9d70e892a1c9c" translate="yes" xml:space="preserve">
          <source>Submodule operations can be configured using the following mechanisms (from highest to lowest precedence):</source>
          <target state="translated">サブモジュールの操作は、以下の仕組みで設定することができます(優先順位の高いものから順に)。</target>
        </trans-unit>
        <trans-unit id="12d390f8025584ad2ceb29d8156199827eb766f2" translate="yes" xml:space="preserve">
          <source>Submodules</source>
          <target state="translated">Submodules</target>
        </trans-unit>
        <trans-unit id="8b3b72a48d6b77673f309811c21a1f34bda69f2a" translate="yes" xml:space="preserve">
          <source>Submodules are initialized and cloned using their default settings. This is equivalent to running &lt;code&gt;git submodule update --init --recursive &amp;lt;pathspec&amp;gt;&lt;/code&gt; immediately after the clone is finished. This option is ignored if the cloned repository does not have a worktree/checkout (i.e. if any of &lt;code&gt;--no-checkout&lt;/code&gt;/&lt;code&gt;-n&lt;/code&gt;, &lt;code&gt;--bare&lt;/code&gt;, or &lt;code&gt;--mirror&lt;/code&gt; is given)</source>
          <target state="translated">サブモジュールは、デフォルト設定を使用して初期化および複製されます。これは、クローンが完了した直後に &lt;code&gt;git submodule update --init --recursive &amp;lt;pathspec&amp;gt;&lt;/code&gt; を実行するのと同じです。クローンされたリポジトリにワークツリー/チェックアウトがない場合（つまり、 &lt;code&gt;--no-checkout&lt;/code&gt; &lt;code&gt;--bare&lt;/code&gt; -checkout / &lt;code&gt;-n&lt;/code&gt; 、-- bare、または &lt;code&gt;--mirror&lt;/code&gt; のいずれかが指定されている場合）、このオプションは無視されます</target>
        </trans-unit>
        <trans-unit id="f0558d8aae211aae78435cf5f18fbee56b357b16" translate="yes" xml:space="preserve">
          <source>Submodules can be used for at least two different use cases:</source>
          <target state="translated">サブモジュールは、少なくとも2つの異なるユースケースで使用することができます。</target>
        </trans-unit>
        <trans-unit id="2a4ac6e80eae220504fcac25436c9a1e818ef8b5" translate="yes" xml:space="preserve">
          <source>Submodules can take the following forms:</source>
          <target state="translated">サブモジュールは以下の形式をとることができます。</target>
        </trans-unit>
        <trans-unit id="8ee6b51df0a5b53ba35723ec36f91cb14154873c" translate="yes" xml:space="preserve">
          <source>Submodules have more state and instead report M the submodule has a different HEAD than recorded in the index m the submodule has modified content ? the submodule has untracked files since modified content or untracked files in a submodule cannot be added via &lt;code&gt;git add&lt;/code&gt; in the superproject to prepare a commit.</source>
          <target state="translated">サブモジュールにはより多くの状態があり、代わりにMを報告します。サブモジュールは、インデックスに記録されたものとは異なるHEADを持っています。サブプロジェクト内の変更されたコンテンツまたは追跡されていないファイルをスーパープロジェクトの &lt;code&gt;git add&lt;/code&gt; を介して追加してコミットを準備できないため、サブモジュールに追跡されていないファイルがあります。</target>
        </trans-unit>
        <trans-unit id="a0210b026ef5dd9e5a7bf71f7146151a0e187886" translate="yes" xml:space="preserve">
          <source>Subprocess behavior</source>
          <target state="translated">サブプロセスの動作</target>
        </trans-unit>
        <trans-unit id="2a03a02ecd76c4aa6d233be9ed15c5b8f09cfe2e" translate="yes" xml:space="preserve">
          <source>Subsection names are case sensitive and can contain any characters except newline and the null byte. Doublequote &lt;code&gt;&quot;&lt;/code&gt; and backslash can be included by escaping them as &lt;code&gt;\&quot;&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt;, respectively. Backslashes preceding other characters are dropped when reading; for example, &lt;code&gt;\t&lt;/code&gt; is read as &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;\0&lt;/code&gt; is read as &lt;code&gt;0&lt;/code&gt; Section headers cannot span multiple lines. Variables may belong directly to a section or to a given subsection. You can have &lt;code&gt;[section]&lt;/code&gt; if you have &lt;code&gt;[section &quot;subsection&quot;]&lt;/code&gt;, but you don&amp;rsquo;t need to.</source>
          <target state="translated">サブセクション名は大文字と小文字が区別され、改行とnullバイト以外の任意の文字を含めることができます。二重引用符 &lt;code&gt;&quot;&lt;/code&gt; とバックスラッシュは、それぞれ &lt;code&gt;\&quot;&lt;/code&gt; と &lt;code&gt;\\&lt;/code&gt; としてエスケープすることで含めることができます。他の文字の前のバックスラッシュは読み取り時に削除されます。例えば、 &lt;code&gt;\t&lt;/code&gt; として読み出され &lt;code&gt;t&lt;/code&gt; 及び &lt;code&gt;\0&lt;/code&gt; として読み出される &lt;code&gt;0&lt;/code&gt; セクションヘッダが複数行にまたがることができません。変数は、セクションまたは特定のサブセクションに直接属している場合があります。 &lt;code&gt;[section &quot;subsection&quot;]&lt;/code&gt; がある場合は &lt;code&gt;[section]&lt;/code&gt; を使用できますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="99e9a313960d39fea11c6c21bc5f471c5ed54f4e" translate="yes" xml:space="preserve">
          <source>Subsequent requests are then made directly to the service &lt;code&gt;$GIT_URL/git-upload-pack&lt;/code&gt;. (This works the same for git-receive-pack).</source>
          <target state="translated">その後のリクエストは、サービス &lt;code&gt;$GIT_URL/git-upload-pack&lt;/code&gt; に対して直接行われます。（これはgit-receive-packと同じように機能します）。</target>
        </trans-unit>
        <trans-unit id="ecd7815bae661c84db8b72f60f38c2e3bca8ef1f" translate="yes" xml:space="preserve">
          <source>Subsequent updates to branches always create new files under &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory hierarchy.</source>
          <target state="translated">その後のブランチの更新では、常に &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリ階層の下に新しいファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="b2bf2538aec79c0d5fa040a786e252ac3772aa80" translate="yes" xml:space="preserve">
          <source>Substitute the character &quot;/&quot; in branch names with &amp;lt;subst&amp;gt;</source>
          <target state="translated">ブランチ名の文字「/」を&amp;lt;subst&amp;gt;に置き換えます</target>
        </trans-unit>
        <trans-unit id="d44c96fa5a053386ed38d9e6a7cca3107588bf57" translate="yes" xml:space="preserve">
          <source>Successful execution (a zero exit status) of this hook does not ensure the ref will actually be updated, it is only a prerequisite. As such it is not a good idea to send notices (e.g. email) from this hook. Consider using the post-receive hook instead.</source>
          <target state="translated">このフックの実行に成功した(終了ステータスがゼロになった)からといって、 refが実際に更新されることを保証するものではありません。そのため、このフックから通知(例えば電子メール)を送るのは良い考えではありません。代わりに post-receive フックを使うことを検討してください。</target>
        </trans-unit>
        <trans-unit id="52bf3100936199d5e28b505c941092c719fac3ba" translate="yes" xml:space="preserve">
          <source>Such a shell command can be specified by starting the option value with an exclamation point. If your password or token were stored in the &lt;code&gt;GIT_TOKEN&lt;/code&gt;, you could run the following command to set your credential helper:</source>
          <target state="translated">このようなシェルコマンドは、オプション値を感嘆符で開始することで指定できます。パスワードまたはトークンが &lt;code&gt;GIT_TOKEN&lt;/code&gt; に保存されている場合は、次のコマンドを実行して資格情報ヘルパーを設定できます。</target>
        </trans-unit>
        <trans-unit id="0454547376d4a4928bbfee6331b7c2a9fb4a2161" translate="yes" xml:space="preserve">
          <source>Such duplicates are generally frowned upon because they clutter up history, making it harder to follow. To clean things up, you need to transplant the commits on &lt;code&gt;topic&lt;/code&gt; to the new &lt;code&gt;subsystem&lt;/code&gt; tip, i.e., rebase &lt;code&gt;topic&lt;/code&gt;. This becomes a ripple effect: anyone downstream from &lt;code&gt;topic&lt;/code&gt; is forced to rebase too, and so on!</source>
          <target state="translated">このような複製は、履歴が乱雑になり、追跡が困難になるため、一般的には嫌われます。クリーンアップするには、 &lt;code&gt;topic&lt;/code&gt; のコミットを新しい &lt;code&gt;subsystem&lt;/code&gt; ヒント、つまりrebase &lt;code&gt;topic&lt;/code&gt; に移植する必要があります。これは波及効果になります。 &lt;code&gt;topic&lt;/code&gt; 下流にいる誰もがリベースを余儀なくされます。</target>
        </trans-unit>
        <trans-unit id="8866d8895f273e182aecc88b4155660c1e2db399" translate="yes" xml:space="preserve">
          <source>Summarize &lt;code&gt;git log&lt;/code&gt; output</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; 出力の要約</target>
        </trans-unit>
        <trans-unit id="ec1e3fb20faac142815eb47774b44cb84610e827" translate="yes" xml:space="preserve">
          <source>Summarizes &lt;code&gt;git log&lt;/code&gt; output in a format suitable for inclusion in release announcements. Each commit will be grouped by author and title.</source>
          <target state="translated">リリースアナウンスに含めるのに適した形式で &lt;code&gt;git log&lt;/code&gt; 出力を要約します。各コミットは作者とタイトルでグループ化されます。</target>
        </trans-unit>
        <trans-unit id="5c7562d8e87120565b992b08061dcfabc4f3c861" translate="yes" xml:space="preserve">
          <source>Supplies raw data (for use as blob/file content, commit messages, or annotated tag messages) to fast-import. Data can be supplied using an exact byte count or delimited with a terminating line. Real frontends intended for production-quality conversions should always use the exact byte count format, as it is more robust and performs better. The delimited format is intended primarily for testing fast-import.</source>
          <target state="translated">生データ (ブロブ/ファイルの内容、コミットメッセージ、または注釈付きタグメッセージとして使用するため)を提供して高速インポートします。データは、正確なバイト数を使用して供給するか、終端行で区切って供給することができます。実運用品質の変換を目的とした実際のフロントエンドでは、より堅牢でパフォーマンスが良いため、常に正確なバイト数形式を使用する必要があります。区切り形式は、主に高速インポートをテストするためのものです。</target>
        </trans-unit>
        <trans-unit id="e8dbb2eeb155ce2917c101c99bacbd864a5c427e" translate="yes" xml:space="preserve">
          <source>Support for these types of regular expressions is an optional compile-time dependency. If Git wasn&amp;rsquo;t compiled with support for them providing this option will cause it to die.</source>
          <target state="translated">これらのタイプの正規表現のサポートは、コンパイル時のオプションの依存関係です。Gitがそれらをサポートするようにコンパイルされていなかった場合、このオプションを指定するとGitが停止します。</target>
        </trans-unit>
        <trans-unit id="8e97694d704a0343a9b684d493f12b44246fec5f" translate="yes" xml:space="preserve">
          <source>Support for this command is mandatory.</source>
          <target state="translated">このコマンドのサポートは必須です。</target>
        </trans-unit>
        <trans-unit id="e1b49c8e0d2e923baa9b1bdde89fd2d2c159197a" translate="yes" xml:space="preserve">
          <source>Supported commands: &lt;code&gt;connect&lt;/code&gt;.</source>
          <target state="translated">サポートされるコマンド： &lt;code&gt;connect&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f0b920ef57768d484ba1cc526d81f954a574c57f" translate="yes" xml:space="preserve">
          <source>Supported commands: &lt;code&gt;list for-push&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;.</source>
          <target state="translated">サポートされるコマンド： &lt;code&gt;list for-push&lt;/code&gt; 、 &lt;code&gt;export&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72ec6998fb5b35dff686188df85ab0e3ad151b49" translate="yes" xml:space="preserve">
          <source>Supported commands: &lt;code&gt;list for-push&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;.</source>
          <target state="translated">サポートされるコマンド： &lt;code&gt;list for-push&lt;/code&gt; 、 &lt;code&gt;push&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5829938d9cd5455d30d44c2ed56081b81ad0e8b1" translate="yes" xml:space="preserve">
          <source>Supported commands: &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;.</source>
          <target state="translated">サポートされているコマンド： &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;fetch&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4005d18cc0bff6da83fb1c69518c92481df2684" translate="yes" xml:space="preserve">
          <source>Supported commands: &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">サポートされているコマンド： &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;import&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff15abbc5988387a102f85b87106fa0f9a061a4c" translate="yes" xml:space="preserve">
          <source>Supported commands: &lt;code&gt;stateless-connect&lt;/code&gt;.</source>
          <target state="translated">サポートされるコマンド： &lt;code&gt;stateless-connect&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d7833eb7ee78a4c26a83fcc81c3d2e9095611eb" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;connect&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;connect&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="3a93883be31e9529a29debf1107a5749f91adad7" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;export&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;export &quot;機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="18465219e925f5ab7417753a2928593ca3f010cd" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;fetch&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;fetch&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="6b3f007fcd47faeaf9e41420b8dd45804e011830" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;fetch&quot; or &quot;import&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;fetch&quot; または &quot;import&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="4aca0b5526d05a696e7b36938ee6f6c5a0ea9ae4" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;import&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;import &quot;機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="e7ddf6d69b0131cf639e3107da22aa777a2105a4" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;option&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;option&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="c098533fa12e5c25ff58bd90a0ea089d5ecbd91f" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;push&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;push&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="fb7b526ef7e22c9e1afe23a10d0bc8d29b1f28b6" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;push&quot; or &quot;export&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;push&quot; または &quot;export&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="b4c51ee5ffb300c10c9d8c4078d940f537159814" translate="yes" xml:space="preserve">
          <source>Supported if the helper has the &quot;stateless-connect&quot; capability.</source>
          <target state="translated">ヘルパーが &quot;stateless-connect&quot; 機能を持っている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="05ab661bd504730c5b7114057d0bdfc9f5d779d8" translate="yes" xml:space="preserve">
          <source>Supports file additions, removals, and commits that affect binary files.</source>
          <target state="translated">バイナリファイルに影響を与えるファイルの追加、削除、コミットをサポートします。</target>
        </trans-unit>
        <trans-unit id="837f71448f49e2e0d9f370a0f4924a3332c3ce70" translate="yes" xml:space="preserve">
          <source>Suppose a shared repository is set up in /pub/repo.git on the host foo.com. Then as an individual committer you can clone the shared repository over ssh with:</source>
          <target state="translated">foo.com というホスト上の /pub/repo.git に共有リポジトリが設定されているとします。そうすると、個人のコミッターとして ssh で共有リポジトリをクローンすることができます。</target>
        </trans-unit>
        <trans-unit id="776b1e3e664257166a794955fe1e330d0ed23c81" translate="yes" xml:space="preserve">
          <source>Suppose further that the two development lines merge cleanly at C, so no conflict resolution is required.</source>
          <target state="translated">さらに、2つの開発ラインがCできれいに合流したと仮定します。</target>
        </trans-unit>
        <trans-unit id="e8f9a38765e97d2341920d57addc2939bc25d7eb" translate="yes" xml:space="preserve">
          <source>Suppose that Alice has started a new project with a Git repository in /home/alice/project, and that Bob, who has a home directory on the same machine, wants to contribute.</source>
          <target state="translated">アリスが/home/alice/projectにGitリポジトリを持って新しいプロジェクトを立ち上げ、同じマシンにホームディレクトリを持っているボブが貢献したいと思ったとします。</target>
        </trans-unit>
        <trans-unit id="f0185bb1f9b382ec2ad8024131a049405c5d0a74" translate="yes" xml:space="preserve">
          <source>Suppose that in the meantime on the lower line of development somebody adds a new calling site for that function at commit Y. The commits from Z leading to B all assume the old semantics of that function and the callers and the callee are consistent with each other. There is no bug at B, either.</source>
          <target state="translated">Z から B に至るまでのコミットはすべてその関数の古いセマンティクスを前提としており、呼び出し元と着呼元はお互いに整合性が取れています。B にもバグはありません。</target>
        </trans-unit>
        <trans-unit id="391a0e24d7cf4e807cbdc6c67d247a126500a7a1" translate="yes" xml:space="preserve">
          <source>Suppose that on the upper line of development, the meaning of one of the functions that exists at Z is changed at commit X. The commits from Z leading to A change both the function&amp;rsquo;s implementation and all calling sites that exist at Z, as well as new calling sites they add, to be consistent. There is no bug at A.</source>
          <target state="translated">開発の上の行で、Zに存在する関数の1つの意味がコミットXで変更されたとします。AにつながるZからのコミットは、関数の実装とZに存在するすべての呼び出しサイトの両方を変更します。一貫性を保つために、彼らが追加した新しい通話サイト。Aにバグはありません。</target>
        </trans-unit>
        <trans-unit id="4264938eda486beabd24f72d431c53e3aa7556fd" translate="yes" xml:space="preserve">
          <source>Suppose that you create a branch &lt;code&gt;mywork&lt;/code&gt; on a remote-tracking branch &lt;code&gt;origin&lt;/code&gt;, and create some commits on top of it:</source>
          <target state="translated">リモート追跡ブランチ &lt;code&gt;origin&lt;/code&gt; にブランチ &lt;code&gt;mywork&lt;/code&gt; を作成し、その上にいくつかのコミットを作成するとします。</target>
        </trans-unit>
        <trans-unit id="3c9c906e2a1276113a369eaaabf56387154b9496" translate="yes" xml:space="preserve">
          <source>Suppose that you have created lots of logically separate changes and committed them together. Then, later you decide that it might be better to have each logical chunk associated with its own commit. You can use git reset to rewind history without changing the contents of your local files, and then successively use &lt;code&gt;git add -p&lt;/code&gt; to interactively select which hunks to include into each commit, using &lt;code&gt;git commit -c&lt;/code&gt; to pre-populate the commit message.</source>
          <target state="translated">論理的に分離された多くの変更を作成し、それらをまとめてコミットしたとします。次に、後で、各論理チャンクを独自のコミットに関連付ける方がよいと判断しました。git resetを使用してローカルファイルの内容を変更せずに履歴を巻き戻し、次に &lt;code&gt;git add -p&lt;/code&gt; を使用して対話的に各ハンクに含めるハンクを選択し、 &lt;code&gt;git commit -c&lt;/code&gt; を使用してコミットメッセージを事前に入力できます。</target>
        </trans-unit>
        <trans-unit id="02fbd8fc87f2a350a49d8620ee0b30d4bf4e4abd" translate="yes" xml:space="preserve">
          <source>Suppose version 2.6.18 of your project worked, but the version at &quot;master&quot; crashes. Sometimes the best way to find the cause of such a regression is to perform a brute-force search through the project&amp;rsquo;s history to find the particular commit that caused the problem. The &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; command can help you do this:</source>
          <target state="translated">プロジェクトのバージョン2.6.18は機能したが、「マスター」のバージョンがクラッシュしたとします。このような回帰の原因を見つける最良の方法は、プロジェクトの履歴をブルートフォース検索して、問題の原因となった特定のコミットを見つけることです。&lt;a href=&quot;git-bisect&quot;&gt;git -二分[1]&lt;/a&gt;コマンドを使用すると、この操作を行うことができます。</target>
        </trans-unit>
        <trans-unit id="fe43e13972d777424e11db2803667e644671ba7d" translate="yes" xml:space="preserve">
          <source>Suppose you are a contributor to a large project, and you want to add a complicated feature, and to present it to the other developers in a way that makes it easy for them to read your changes, verify that they are correct, and understand why you made each change.</source>
          <target state="translated">あなたが大きなプロジェクトのコントリビューターで、複雑な機能を追加して、他の開発者があなたの変更を読み、それが正しいかどうかを確認し、なぜあなたがそれぞれの変更を行ったのかを理解しやすくする方法でそれを他の開発者に提示したいとします。</target>
        </trans-unit>
        <trans-unit id="3acc0c164272600e31526ab46c74892c1aa07162" translate="yes" xml:space="preserve">
          <source>Suppose you are interrupted by an urgent fix request while you are in the middle of a large change. The files in your working tree are not in any shape to be committed yet, but you need to get to the other branch for a quick bugfix.</source>
          <target state="translated">大きな変更を行っている最中に、緊急の修正要求があったとしましょう。作業ツリーのファイルはまだコミットできる状態ではありませんが、他のブランチに行って迅速なバグフィックスを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="206336da1c56023f89c7e12354f95287caca26a2" translate="yes" xml:space="preserve">
          <source>Suppose you are working on something and you commit it, and then you continue working a bit more, but now you think that what you have in your working tree should be in another branch that has nothing to do with what you committed previously. You can start a new branch and reset it while keeping the changes in your working tree.</source>
          <target state="translated">何か作業をしていて、それをコミットした後、もう少し作業を続けたとします。新しいブランチを開始して、作業ツリーの変更を維持したままリセットすることができます。</target>
        </trans-unit>
        <trans-unit id="25caa4df3e00bbf0c1bcbf48ca3bbcb805b36ab6" translate="yes" xml:space="preserve">
          <source>Suppose you have added a file to your index, but later decide you do not want to add it to your commit. You can remove the file from the index while keeping your changes with git reset.</source>
          <target state="translated">あるファイルをインデックスに追加したものの、後になってそれをコミットに追加したくないと思ったとしましょう。git reset で変更を維持したままインデックスからファイルを削除することができます。</target>
        </trans-unit>
        <trans-unit id="9419c8de1f4e3152ef10e8d631b17a6a8c4bb66f" translate="yes" xml:space="preserve">
          <source>Suppose you know that the commit e05db0fd fixed a certain problem. You&amp;rsquo;d like to find the earliest tagged release that contains that fix.</source>
          <target state="translated">コミットe05db0fdが特定の問題を修正したことを知っているとします。その修正を含むタグ付きの最も古いリリースを見つけたいと思います。</target>
        </trans-unit>
        <trans-unit id="c40ef08f6cb59edadae067c6870364980c310ebf" translate="yes" xml:space="preserve">
          <source>Suppose you specified &lt;code&gt;foo&lt;/code&gt; as the &amp;lt;paths&amp;gt;. We shall call commits that modify &lt;code&gt;foo&lt;/code&gt; !TREESAME, and the rest TREESAME. (In a diff filtered for &lt;code&gt;foo&lt;/code&gt;, they look different and equal, respectively.)</source>
          <target state="translated">&amp;lt;paths&amp;gt;として &lt;code&gt;foo&lt;/code&gt; を指定したとします。 &lt;code&gt;foo&lt;/code&gt; ！TREESAME、および残りのTREESAME を変更するコミットを呼び出します。（ &lt;code&gt;foo&lt;/code&gt; でフィルタリングされたdiff では、それぞれ異なって見えます。）</target>
        </trans-unit>
        <trans-unit id="cb2a200ea83c58efe22ad112266f5c75d08a4a2e" translate="yes" xml:space="preserve">
          <source>Suppose you want to check whether two branches point at the same point in history.</source>
          <target state="translated">2つの枝が歴史上の同じ点を指しているかどうかを確認したいとします。</target>
        </trans-unit>
        <trans-unit id="a4ad635bf26628e292f1bfd04aa9f0a4ae18d146" translate="yes" xml:space="preserve">
          <source>Suppose you want to know how many commits you&amp;rsquo;ve made on &lt;code&gt;mybranch&lt;/code&gt; since it diverged from &lt;code&gt;origin&lt;/code&gt;:</source>
          <target state="translated">あなたが上で行ったどのように多くのコミットを知りたいと仮定 &lt;code&gt;mybranch&lt;/code&gt; それはから分岐するので &lt;code&gt;origin&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="f9ddeae1484388d5dab75e34df1cfd67e52a3e70" translate="yes" xml:space="preserve">
          <source>Suppose you want to rebase the side branch starting at &quot;A&quot; to &quot;Q&quot;. Make sure that the current HEAD is &quot;B&quot;, and call</source>
          <target state="translated">A&quot; から始まるサイドブランチを &quot;Q&quot; にリベースしたいとします。現在のHEADが &quot;B &quot;であることを確認して</target>
        </trans-unit>
        <trans-unit id="b5613771383533c24d3d428fdc1ae60e9fd438c4" translate="yes" xml:space="preserve">
          <source>Suppose you want to remove a file (containing confidential information or copyright violation) from all commits:</source>
          <target state="translated">あるファイル(機密情報を含むものや著作権違反のもの)をすべてのコミットから削除したいとします。</target>
        </trans-unit>
        <trans-unit id="ff7d0768a57dca637d6eab253f0d487ae1222161" translate="yes" xml:space="preserve">
          <source>Suppose you would like to see all the commits reachable from the branch head named &lt;code&gt;master&lt;/code&gt; but not from any other head in your repository.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; というブランチヘッドから到達可能なすべてのコミットを表示したいが、リポジトリ内の他のヘッドからは到達させたくないとします。</target>
        </trans-unit>
        <trans-unit id="9946995b81548e47df6c8b8392c1840733fdb964" translate="yes" xml:space="preserve">
          <source>Suppress all output, including the listing of updated refs, unless an error occurs. Progress is not reported to the standard error stream.</source>
          <target state="translated">エラーが発生しない限り、更新された参照先のリストを含むすべての出力を抑制します。進捗状況は標準エラーストリームには報告されません。</target>
        </trans-unit>
        <trans-unit id="c4b3a6cd7a8560fe90c65c121ee87d36135f6602" translate="yes" xml:space="preserve">
          <source>Suppress all progress reports.</source>
          <target state="translated">すべての進捗報告を抑制します。</target>
        </trans-unit>
        <trans-unit id="a819bd2ff05cd55161823638237268e190be312a" translate="yes" xml:space="preserve">
          <source>Suppress commit description and provide a commit count summary only.</source>
          <target state="translated">コミットの記述を抑制し、コミット数のサマリーのみを提供します。</target>
        </trans-unit>
        <trans-unit id="e799a643bdb9c82fda51c43573cb85b70de9e54e" translate="yes" xml:space="preserve">
          <source>Suppress commit summary message.</source>
          <target state="translated">コミットサマリーメッセージを抑制します。</target>
        </trans-unit>
        <trans-unit id="1a696049e271af3ebf56a00bfbec639053a19da0" translate="yes" xml:space="preserve">
          <source>Suppress diff output. Useful for commands like &lt;code&gt;git show&lt;/code&gt; that show the patch by default, or to cancel the effect of &lt;code&gt;--patch&lt;/code&gt;.</source>
          <target state="translated">差分出力を抑制します。デフォルトでパッチを表示する &lt;code&gt;git show&lt;/code&gt; などのコマンド、または &lt;code&gt;--patch&lt;/code&gt; の効果をキャンセルするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="93e56a37493c6ba4434b0b6ea5eb008e9221a320" translate="yes" xml:space="preserve">
          <source>Suppress the author name and timestamp from the output.</source>
          <target state="translated">出力から著者名とタイムスタンプを出力しないようにします。</target>
        </trans-unit>
        <trans-unit id="f43798729bfff9f209d330c349626cb5165ac751" translate="yes" xml:space="preserve">
          <source>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</source>
          <target state="translated">2つの入力を入れ替えます。つまり、インデックスやディスク上のファイルとツリーの内容の違いを表示します。</target>
        </trans-unit>
        <trans-unit id="e5e55f7f46ad773b6efc6aca47e818298efdba7d" translate="yes" xml:space="preserve">
          <source>Switch branches</source>
          <target state="translated">枝の切り替え</target>
        </trans-unit>
        <trans-unit id="c1c3479fb48988243819a9ed632d7db49472e85a" translate="yes" xml:space="preserve">
          <source>Switch branches or restore working tree files</source>
          <target state="translated">ブランチを切り替えたり、作業中のツリーファイルを復元したりする</target>
        </trans-unit>
        <trans-unit id="dfdb03e90173f2e2bacd7c02f01c4407ebc5e4a7" translate="yes" xml:space="preserve">
          <source>Switch to &lt;code&gt;topic/wip&lt;/code&gt; branch and keep working.</source>
          <target state="translated">&lt;code&gt;topic/wip&lt;/code&gt; ブランチに切り替えて作業を続けます。</target>
        </trans-unit>
        <trans-unit id="376cbb6cbd05a4fda1d6b5e220f115dcce8e44f1" translate="yes" xml:space="preserve">
          <source>Switch to a commit for inspection and discardable experiments. See the &quot;DETACHED HEAD&quot; section in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; for details.</source>
          <target state="translated">検査と破棄可能な実験のコミットに切り替えます。詳細については、&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;の「DETACHED HEAD」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="0362a7c9eb4dad56855ff5dd55a91d5b93e6f9c7" translate="yes" xml:space="preserve">
          <source>Switch to a specified branch. The working tree and the index are updated to match the branch. All new commits will be added to the tip of this branch.</source>
          <target state="translated">指定したブランチに切り替えます。ブランチに合わせて作業ツリーとインデックスが更新されます。新しいコミットはすべてこのブランチの先端に追加されます。</target>
        </trans-unit>
        <trans-unit id="c4a37023c84f04e66def4788394f47d95de02383" translate="yes" xml:space="preserve">
          <source>Switching branches does not require a clean index and working tree (i.e. no differences compared to &lt;code&gt;HEAD&lt;/code&gt;). The operation is aborted however if the operation leads to loss of local changes, unless told otherwise with &lt;code&gt;--discard-changes&lt;/code&gt; or &lt;code&gt;--merge&lt;/code&gt;.</source>
          <target state="translated">ブランチの切り替えには、クリーンなインデックスと作業ツリーは必要ありません（つまり、 &lt;code&gt;HEAD&lt;/code&gt; と比較して違いはありません）。ただし、 &lt;code&gt;--discard-changes&lt;/code&gt; または &lt;code&gt;--merge&lt;/code&gt; で特に指示されていない限り、操作によってローカルの変更が失われる場合、操作は中止されます。</target>
        </trans-unit>
        <trans-unit id="2a44d54fe8d0fbe571632defb5e0f0bfcb635688" translate="yes" xml:space="preserve">
          <source>Symbolic identifiers</source>
          <target state="translated">シンボリック識別子</target>
        </trans-unit>
        <trans-unit id="edf50a81800d6af816fa28268463b4a137a670b4" translate="yes" xml:space="preserve">
          <source>Symbolic reference: instead of containing the &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; id itself, it is of the format 'ref: refs/some/thing' and when referenced, it recursively dereferences to this reference. '&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;' is a prime example of a symref. Symbolic references are manipulated with the &lt;a href=&quot;git-symbolic-ref&quot;&gt;git-symbolic-ref[1]&lt;/a&gt; command.</source>
          <target state="translated">シンボリック参照：&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; ID自体を含める代わりに、「ref：refs / some / thing」という形式であり、参照されると、この参照を再帰的に逆参照します。' &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; 'はsymrefの代表的な例です。シンボリック参照は&lt;a href=&quot;git-symbolic-ref&quot;&gt;git-symbolic-ref [1]&lt;/a&gt;コマンドで操作されます。</target>
        </trans-unit>
        <trans-unit id="6dc4afea6b4b62629fc3af96ff8aeb71d81ce355" translate="yes" xml:space="preserve">
          <source>Symbolic reference: instead of containing the &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; id itself, it is of the format &lt;code&gt;ref: refs/some/thing&lt;/code&gt; and when referenced, it recursively dereferences to this reference. &lt;code&gt;&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;&lt;/code&gt; is a prime example of a symref. Symbolic references are manipulated with the &lt;a href=&quot;git-symbolic-ref&quot;&gt;git-symbolic-ref[1]&lt;/a&gt; command.</source>
          <target state="translated">シンボリック参照：&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; ID自体を含むのではなく、 &lt;code&gt;ref: refs/some/thing&lt;/code&gt; という形式であり、参照されると、この参照を再帰的に逆参照します。 &lt;code&gt;&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;&lt;/code&gt; はsymrefの代表的な例です。シンボリック参照は&lt;a href=&quot;git-symbolic-ref&quot;&gt;git-symbolic-ref [1]&lt;/a&gt;コマンドで操作されます。</target>
        </trans-unit>
        <trans-unit id="7d980e6b3e0dc3c2265b8f39aea640f21a2c26c7" translate="yes" xml:space="preserve">
          <source>Symlinks in &lt;code&gt;$GIT_DIR&lt;/code&gt; are not resolved before matching.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR&lt;/code&gt; シンボリックリンクは、一致する前に解決されません。</target>
        </trans-unit>
        <trans-unit id="905f63092ff26517a7aa8083857b3c8af9707002" translate="yes" xml:space="preserve">
          <source>Sync</source>
          <target state="translated">Sync</target>
        </trans-unit>
        <trans-unit id="1cafa24e02c13e63ccc749c8cc50c089372b01c9" translate="yes" xml:space="preserve">
          <source>Sync options</source>
          <target state="translated">同期オプション</target>
        </trans-unit>
        <trans-unit id="a05ba5351cf72e05a13ed22352248517859a3ce9" translate="yes" xml:space="preserve">
          <source>Synchronizes submodules' remote URL configuration setting to the value specified in &lt;code&gt;.gitmodules&lt;/code&gt;. It will only affect those submodules which already have a URL entry in .git/config (that is the case when they are initialized or freshly added). This is useful when submodule URLs change upstream and you need to update your local repositories accordingly.</source>
          <target state="translated">サブモジュールのリモートURL構成設定を &lt;code&gt;.gitmodules&lt;/code&gt; で指定された値に同期させます。これは、すでに.git / configにURLエントリがあるサブモジュールにのみ影響します（初期化または新たに追加された場合）。これは、サブモジュールのURLが上流で変更され、それに応じてローカルリポジトリを更新する必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3ac8d1a1aa5500a3e968826312a150affc9dc46d" translate="yes" xml:space="preserve">
          <source>Syncing repositories</source>
          <target state="translated">リポジトリの同期</target>
        </trans-unit>
        <trans-unit id="566e604d58292e23d183e78e39f3823e9b42de23" translate="yes" xml:space="preserve">
          <source>Synonym for --dirstat=cumulative</source>
          <target state="translated">dirstat=累積の同義語</target>
        </trans-unit>
        <trans-unit id="f1c4d35b0c03f286600f7fb27eae33fe27989165" translate="yes" xml:space="preserve">
          <source>Synonym for --dirstat=files,param1,param2&amp;hellip;​</source>
          <target state="translated">--dirstat = files、param1、param2&amp;hellip;の同義語</target>
        </trans-unit>
        <trans-unit id="030318e98e2891ff258d5f1c486159aabe2ec3cd" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;a href=&quot;#def_commit&quot;&gt;commit&lt;/a&gt; (the noun).</source>
          <target state="translated">&lt;a href=&quot;#def_commit&quot;&gt;commitの&lt;/a&gt;同義語（名詞）。</target>
        </trans-unit>
        <trans-unit id="98387ba9809590c01ed4197e28a198c994b76d39" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;a href=&quot;#def_object_name&quot;&gt;object name&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_object_name&quot;&gt;オブジェクト名の&lt;/a&gt;同義語。</target>
        </trans-unit>
        <trans-unit id="05205baafaafa5f371ceb6761f66c9a9092bfca8" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt; (for arch people).</source>
          <target state="translated">&lt;a href=&quot;#def_repository&quot;&gt;リポジトリの&lt;/a&gt;同義語（アーチの人々向け）。</target>
        </trans-unit>
        <trans-unit id="bd983733ce10be3d6383ba3ae94c790c5998f587" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;--date=relative&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--date=relative&lt;/code&gt; の同義語。</target>
        </trans-unit>
        <trans-unit id="7204033ad0a3ce5a123aa68893dbb1ec2d44eb7f" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;-p --raw&lt;/code&gt;.</source>
          <target state="translated">同義語 &lt;code&gt;-p --raw&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e2c85a45d4841ec1bc0daa5da30d63888f50f751" translate="yes" xml:space="preserve">
          <source>Synonym for &lt;code&gt;-p --stat&lt;/code&gt;.</source>
          <target state="translated">同義語 &lt;code&gt;-p --stat&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4826ecc5c9ae249b105cc0f800bf317e1bf3ce71" translate="yes" xml:space="preserve">
          <source>Synonym to &lt;code&gt;--more=-1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--more=-1&lt;/code&gt; の同義語</target>
        </trans-unit>
        <trans-unit id="375d34b627071e9b56cd3502d59bf963af19d37c" translate="yes" xml:space="preserve">
          <source>Synonym to &lt;code&gt;merge.log&lt;/code&gt;; this is deprecated and will be removed in the future.</source>
          <target state="translated">シノニム &lt;code&gt;merge.log&lt;/code&gt; 。これは非推奨であり、将来削除される予定です。</target>
        </trans-unit>
        <trans-unit id="d87db41828b59d9f281eb9d60b0fac7e88c656b9" translate="yes" xml:space="preserve">
          <source>Synonyms to --log and --no-log; these are deprecated and will be removed in the future.</source>
          <target state="translated">log と --no-log の同義語です。</target>
        </trans-unit>
        <trans-unit id="c9c7aa6b4fd156059c823cdabeac32daf66bec16" translate="yes" xml:space="preserve">
          <source>Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.</source>
          <target state="translated">これらは非推奨であり、将来的には削除される予定です。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="121e826ad7717bacfd25c6cf738291790df9e550" translate="yes" xml:space="preserve">
          <source>Syntax is compatible with the file used by &lt;code&gt;git cvsimport&lt;/code&gt; but an empty email address can be supplied with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">構文は &lt;code&gt;git cvsimport&lt;/code&gt; で使用されるファイルと互換性がありますが、 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で空のメールアドレスを指定できます。</target>
        </trans-unit>
        <trans-unit id="bd2d182068c3eb81ead850c75865e8ae2f054c99" translate="yes" xml:space="preserve">
          <source>System-wide configuration file.</source>
          <target state="translated">システム全体の設定ファイル。</target>
        </trans-unit>
        <trans-unit id="bb78aa3d24f5df42764064db56cde78ca1a563d8" translate="yes" xml:space="preserve">
          <source>T: change in the type of the file</source>
          <target state="translated">T:ファイルの種類の変更</target>
        </trans-unit>
        <trans-unit id="a5e95b00d8bbc7641f64bca05aef94e0873eb866" translate="yes" xml:space="preserve">
          <source>THIS COMMAND IS EXPERIMENTAL. ITS BEHAVIOR, AND THE BEHAVIOR OF OTHER COMMANDS IN THE PRESENCE OF SPARSE-CHECKOUTS, WILL LIKELY CHANGE IN THE FUTURE.</source>
          <target state="translated">このコマンドは経験的なものです。その動作、およびスパーズチェックアウトが存在する場合の他のコマンドの動作は、将来的に変更される可能性がある。</target>
        </trans-unit>
        <trans-unit id="9667ca46bdeede85b6c2fc52e7779cc06938e375" translate="yes" xml:space="preserve">
          <source>THIS COMMAND IS EXPERIMENTAL. THE BEHAVIOR MAY CHANGE.</source>
          <target state="translated">このコマンドは経験的なものです。動作が変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="da2da317615483c79a5e32887ba14bbfd135afb2" translate="yes" xml:space="preserve">
          <source>THIS OPTION IS EXPERIMENTAL! SHA-256 support is experimental and still in an early stage. A SHA-256 repository will in general not be able to share work with &quot;regular&quot; SHA-1 repositories. It should be assumed that, e.g., Git internal file formats in relation to SHA-256 repositories may change in backwards-incompatible ways. Only use &lt;code&gt;--object-format=sha256&lt;/code&gt; for testing purposes.</source>
          <target state="translated">このオプションは実験的なものです！ SHA-256のサポートは実験的なものであり、まだ初期段階です。 SHA-256リポジトリは、通常、「通常の」SHA-1リポジトリと作業を共有できません。たとえば、SHA-256リポジトリに関連するGit内部ファイル形式は、下位互換性のない方法で変更される可能性があると想定する必要があります。テスト目的でのみ &lt;code&gt;--object-format=sha256&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="667949023cc3f454cb0d70e83c52143e1650458d" translate="yes" xml:space="preserve">
          <source>TRAILER:</source>
          <target state="translated">TRAILER:</target>
        </trans-unit>
        <trans-unit id="a2ba9a257606db8185ab32e1350e244ce43cc422" translate="yes" xml:space="preserve">
          <source>Tag Object</source>
          <target state="translated">タグオブジェクト</target>
        </trans-unit>
        <trans-unit id="cb8b1e1903f812d19eec6ff05583389fd13d1603" translate="yes" xml:space="preserve">
          <source>Tag format</source>
          <target state="translated">タグ形式</target>
        </trans-unit>
        <trans-unit id="7e41343aeba4393f005c76977eda409bbd77862f" translate="yes" xml:space="preserve">
          <source>Tag names are automatically prefixed with &lt;code&gt;refs/tags/&lt;/code&gt; when stored in Git, so importing the CVS branch symbol &lt;code&gt;RELENG-1_0-FINAL&lt;/code&gt; would use just &lt;code&gt;RELENG-1_0-FINAL&lt;/code&gt; for &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, and fast-import will write the corresponding ref as &lt;code&gt;refs/tags/RELENG-1_0-FINAL&lt;/code&gt;.</source>
          <target state="translated">タグ名は自動的に接頭辞が付いてい &lt;code&gt;refs/tags/&lt;/code&gt; ので、CVSのブランチシンボルをインポートし、Gitリポジトリに保存されている &lt;code&gt;RELENG-1_0-FINAL&lt;/code&gt; ちょうど使用する &lt;code&gt;RELENG-1_0-FINAL&lt;/code&gt; のための &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; 、および高速インポートは、対応するREF書き込みます &lt;code&gt;refs/tags/RELENG-1_0-FINAL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e6fe4e0ae7885e683d9ee3f683c218e6902b977" translate="yes" xml:space="preserve">
          <source>Tag objects (created with &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-u&lt;/code&gt;) are called &quot;annotated&quot; tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a &quot;lightweight&quot; tag is simply a name for an object (usually a commit object).</source>
          <target state="translated">タグオブジェクト（ &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-s&lt;/code&gt; 、または &lt;code&gt;-u&lt;/code&gt; で作成）は「注釈付き」タグと呼ばれます。作成日、タガーの名前と電子メール、タグ付けメッセージ、およびオプションのGnuPG署名が含まれています。一方、「軽量」タグは、単にオブジェクト（通常はコミットオブジェクト）の名前です。</target>
        </trans-unit>
        <trans-unit id="71ea1d47718752d76e2ffd9d2603ad43ca73b3c9" translate="yes" xml:space="preserve">
          <source>Tagging a version</source>
          <target state="translated">バージョンのタグ付け</target>
        </trans-unit>
        <trans-unit id="637cc41ee731974198f97641d9bdfb130460784b" translate="yes" xml:space="preserve">
          <source>Tags are expected to always point at the same version of a project, while heads are expected to advance as development progresses.</source>
          <target state="translated">タグは常に同じバージョンのプロジェクトを指すことが予想され、ヘッドは開発が進むにつれて進むことが予想されます。</target>
        </trans-unit>
        <trans-unit id="888bc919d88641f62426fddc6b7cfc9f6452b8d3" translate="yes" xml:space="preserve">
          <source>Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit.</source>
          <target state="translated">既存のコミットオブジェクトを取得し、コミットを作成する際にログメッセージとオーサリング情報(タイムスタンプを含む)を再利用します。</target>
        </trans-unit>
        <trans-unit id="69d5f1e03c82cbcd587369170c6624b0cf043d55" translate="yes" xml:space="preserve">
          <source>Take the commit message from the given file. This option disables the &lt;code&gt;--edit&lt;/code&gt; option.</source>
          <target state="translated">指定されたファイルからコミットメッセージを取得します。このオプションは &lt;code&gt;--edit&lt;/code&gt; オプションを無効にします。</target>
        </trans-unit>
        <trans-unit id="55362ac1695784c6e28770360066065f70c4271a" translate="yes" xml:space="preserve">
          <source>Take the commit message from the given file. Use &lt;code&gt;-&lt;/code&gt; to read the message from the standard input.</source>
          <target state="translated">指定されたファイルからコミットメッセージを取得します。 &lt;code&gt;-&lt;/code&gt; を使用して、標準入力からメッセージを読み取ります。</target>
        </trans-unit>
        <trans-unit id="e36d4d8811a867676a670c71431af6f45b8cdbfc" translate="yes" xml:space="preserve">
          <source>Take the configuration from the given file instead of .git/config. Using the &quot;--global&quot; option forces this to ~/.gitconfig. Using the &quot;--system&quot; option forces this to $(prefix)/etc/gitconfig.</source>
          <target state="translated">.git/config の代わりに、指定したファイルから設定を取得します。global&quot; オプションを使うと ~/.gitconfig になります。-system&quot; オプションを使うと、$(prefix)/etc/gitconfig になります。</target>
        </trans-unit>
        <trans-unit id="29a57524801de08e4acaf7aa5d5fef7d3a95fdaf" translate="yes" xml:space="preserve">
          <source>Take the given blob object (for example, another note) as the note message. (Use &lt;code&gt;git notes copy &amp;lt;object&amp;gt;&lt;/code&gt; instead to copy notes between objects.)</source>
          <target state="translated">指定されたblobオブジェクト（たとえば、別のメモ）をメモメッセージとして受け取ります。（ &lt;code&gt;git notes copy &amp;lt;object&amp;gt;&lt;/code&gt; 間でノートをコピーするには、代わりにgit notes copy &amp;lt;object&amp;gt;を使用してください。）</target>
        </trans-unit>
        <trans-unit id="d362e00efeb54e4840d9ea63f1d18d0cce50b4f2" translate="yes" xml:space="preserve">
          <source>Take the list of merged objects from &amp;lt;file&amp;gt; instead of stdin.</source>
          <target state="translated">stdinの代わりに&amp;lt;file&amp;gt;からマージされたオブジェクトのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="85714dc37d705ec3059aca2b86357cf12078cff0" translate="yes" xml:space="preserve">
          <source>Take the list of refs from stdin, one per line. If there are refs specified on the command line in addition to this option, then the refs from stdin are processed after those on the command line.</source>
          <target state="translated">標準入力からの参照のリストを、1行に1つずつ取得します。このオプションの他にコマンドラインで指定された refs がある場合、標準入力からの refs はコマンドラインのものよりも後に処理されます。</target>
        </trans-unit>
        <trans-unit id="e793a474854bfcd7a2387829ec157d014acaec34" translate="yes" xml:space="preserve">
          <source>Take the note message from the given file. Use &lt;code&gt;-&lt;/code&gt; to read the note message from the standard input. Lines starting with &lt;code&gt;#&lt;/code&gt; and empty lines other than a single line between paragraphs will be stripped out.</source>
          <target state="translated">指定されたファイルからメモメッセージを取得します。 &lt;code&gt;-&lt;/code&gt; を使用して、標準入力からノートメッセージを読み取ります。 &lt;code&gt;#&lt;/code&gt; で始まる行と、段落間の1行以外の空の行は削除されます。</target>
        </trans-unit>
        <trans-unit id="b415454b3e57aca4cd9775be68c013d0b1cba35f" translate="yes" xml:space="preserve">
          <source>Take the tag message from the given file. Use &lt;code&gt;-&lt;/code&gt; to read the message from the standard input. Implies &lt;code&gt;-a&lt;/code&gt; if none of &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-s&lt;/code&gt;, or &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; is given.</source>
          <target state="translated">指定されたファイルからタグメッセージを取得します。 &lt;code&gt;-&lt;/code&gt; を使用して、標準入力からメッセージを読み取ります。意味 &lt;code&gt;-a&lt;/code&gt; をのどれ場合 &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-s&lt;/code&gt; 、または &lt;code&gt;-u &amp;lt;keyid&amp;gt;&lt;/code&gt; 与えられていません。</target>
        </trans-unit>
        <trans-unit id="437fabd9a3b90a4e3feee997e0efd394e0e18037" translate="yes" xml:space="preserve">
          <source>Take the version from the current branch as the tentative merge result, and declare that the merge has conflicts. This is suitable for binary files that do not have a well-defined merge semantics.</source>
          <target state="translated">現在のブランチのバージョンを暫定的なマージ結果として受け取り、マージに競合があることを宣言します。これは、十分に定義されたマージセマンティクスを持たないバイナリファイルに適しています。</target>
        </trans-unit>
        <trans-unit id="8adfe6e8bfbfb71c863cfc8d3c7f83de8a17ccfc" translate="yes" xml:space="preserve">
          <source>Takes the list of merged objects on stdin and produces a suitable commit message to be used for the merge commit, usually to be passed as the &lt;code&gt;&amp;lt;merge-message&amp;gt;&lt;/code&gt; argument of &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">stdinでマージされたオブジェクトのリストを取得し、マージコミットに使用される適切なコミットメッセージを生成します。通常は &lt;code&gt;git merge&lt;/code&gt; の &lt;code&gt;&amp;lt;merge-message&amp;gt;&lt;/code&gt; 引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="a792b2d24cbb9bea552de7c52e443e6ec570f86e" translate="yes" xml:space="preserve">
          <source>Takes the patches given on the command line and emails them out. Patches can be specified as files, directories (which will send all files in the directory), or directly as a revision list. In the last case, any format accepted by &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; can be passed to git send-email.</source>
          <target state="translated">コマンドラインで指定されたパッチを取得してメールで送信します。パッチは、ファイル、ディレクトリ（ディレクトリ内のすべてのファイルを送信する）、または直接リビジョンリストとして指定できます。最後のケースでは、&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]で&lt;/a&gt;受け入れられる任意のフォーマットをgit send-emailに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="6a0ff7754ecf08c3c8186e018764aeb2fd2691af" translate="yes" xml:space="preserve">
          <source>Talk to the IMAP server using git&amp;rsquo;s own IMAP routines instead of using libcurl. Ignored if Git was built with the NO_OPENSSL option set.</source>
          <target state="translated">libcurlを使用する代わりに、git独自のIMAPルーチンを使用してIMAPサーバーと通信します。GitがNO_OPENSSLオプションを設定してビルドされた場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="8452733fe9983e27bdd86ccd2806b4879b9eed76" translate="yes" xml:space="preserve">
          <source>Target of the home link on the top of all pages (the first part of view &quot;breadcrumbs&quot;). By default it is set to the absolute URI of a current page (to the value of &lt;code&gt;$my_uri&lt;/code&gt; variable, or to &quot;/&quot; if &lt;code&gt;$my_uri&lt;/code&gt; is undefined or is an empty string).</source>
          <target state="translated">すべてのページの上部にあるホームリンクのターゲット（ビューの最初の部分は「パンくずリスト」）。デフォルトでは、現在のページの絶対URI（ &lt;code&gt;$my_uri&lt;/code&gt; 変数の値、または &lt;code&gt;$my_uri&lt;/code&gt; が未定義または空の文字列の場合は「/」）に設定されます。</target>
        </trans-unit>
        <trans-unit id="b83c8f8bfe5de4730b897d69d4046995d166efe4" translate="yes" xml:space="preserve">
          <source>Targets are defined using a VTable allowing easy extension to other formats in the future. This might be used to define a binary format, for example.</source>
          <target state="translated">ターゲットは、将来的に他のフォーマットに簡単に拡張できるように、VTable を使用して定義されます。これは、例えばバイナリ形式を定義するために使用されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="b51ba0493561f3b3deddd8211a5a385cd8601db7" translate="yes" xml:space="preserve">
          <source>Technical discussion</source>
          <target state="translated">技術的な議論</target>
        </trans-unit>
        <trans-unit id="7d2e519ddfe0c57b9b7de69eeaa388f193a9848e" translate="yes" xml:space="preserve">
          <source>Tell Git that canonical representation of files in the repository has changed over time (e.g. earlier commits record text files with CRLF line endings, but recent ones use LF line endings). In such a repository, Git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts. For more information, see section &quot;Merging branches with differing checkin/checkout attributes&quot; in &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt;.</source>
          <target state="translated">リポジトリ内のファイルの正規表現が時間の経過とともに変更されたことをGitに伝えます（たとえば、以前のコミットはCRLF行末のレコードテキストファイルをコミットしますが、最近のものはLF行末を使用します）。このようなリポジトリでは、Gitは、コミットで記録されたデータを正規の形式に変換してから、マージを実行して不要な競合を減らすことができます。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]の&lt;/a&gt;セクション「異なるチェックイン/チェックアウト属性を持つブランチのマージ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5b3a0f2444b1d5713e25e3bc88878530e280cdf" translate="yes" xml:space="preserve">
          <source>Tell Git to use it.</source>
          <target state="translated">Gitに使うように伝えます。</target>
        </trans-unit>
        <trans-unit id="bebd78f164bb96ec184a42572b9740f676dbf149" translate="yes" xml:space="preserve">
          <source>Tell cvsexportcommit that the current working directory is not only a Git checkout, but also the CVS checkout. Therefore, Git will reset the working directory to the parent commit before proceeding.</source>
          <target state="translated">cvsexportcommit に、現在の作業ディレクトリは Git のチェックアウトだけでなく CVS のチェックアウトでもあることを伝えます。そのため、Git は先に進む前に作業ディレクトリを親コミットにリセットします。</target>
        </trans-unit>
        <trans-unit id="ccc8867e7c10f12bec70f18c0ebdd4b98ffcfd5b" translate="yes" xml:space="preserve">
          <source>Tell git-credential-cache&amp;mdash;​daemon to ignore SIGHUP, instead of quitting.</source>
          <target state="translated">git-credential-cache&amp;mdash;デーモンに終了せずにSIGHUPを無視するように指示します。</target>
        </trans-unit>
        <trans-unit id="500ee09ba16068aaf0936f5ee6b5ef58c4f8bd06" translate="yes" xml:space="preserve">
          <source>Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.</source>
          <target state="translated">変更や削除されたファイルを自動的にステージするようにコマンドを伝えますが、Git に伝えていない新しいファイルは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="a69e5b7ab968a315154a9d1fd7cf0d147021841a" translate="yes" xml:space="preserve">
          <source>Telling Git about your changes.</source>
          <target state="translated">Git に変更点を伝える</target>
        </trans-unit>
        <trans-unit id="52aedbe077c84f7c253f79171da85dc15b08fdf7" translate="yes" xml:space="preserve">
          <source>Telling Git your name</source>
          <target state="translated">Git に自分の名前を伝える</target>
        </trans-unit>
        <trans-unit id="47964a2a2b9ba19cb7edfe94ae99ae894e487ad7" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;git add&lt;/code&gt; to continue adding files when some files cannot be added due to indexing errors. Equivalent to the &lt;code&gt;--ignore-errors&lt;/code&gt; option of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt;. &lt;code&gt;add.ignore-errors&lt;/code&gt; is deprecated, as it does not follow the usual naming convention for configuration variables.</source>
          <target state="translated">インデックス作成エラーのために一部のファイルを追加できない場合、 &lt;code&gt;git add&lt;/code&gt; にファイルの追加を続行するように指示します。&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の &lt;code&gt;--ignore-errors&lt;/code&gt; オプションと同等です。 &lt;code&gt;add.ignore-errors&lt;/code&gt; は、構成変数の通常の命名規則に従っていないため、推奨されていません。</target>
        </trans-unit>
        <trans-unit id="e23c71acb4f3fb6cc5e3124fdbba41789615dcfa" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;git apply&lt;/code&gt; how to handle whitespaces, in the same way as the &lt;code&gt;--whitespace&lt;/code&gt; option. See &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;.</source>
          <target state="translated">指示します &lt;code&gt;git apply&lt;/code&gt; と同じように、空白をどのように扱うか &lt;code&gt;--whitespace&lt;/code&gt; オプション。&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1b4fd4c56fbd55fd6a4b61da1b1b25feb1363cb0" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;git branch&lt;/code&gt;, &lt;code&gt;git switch&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; to set up new branches so that &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt; will appropriately merge from the starting point branch. Note that even if this option is not set, this behavior can be chosen per-branch using the &lt;code&gt;--track&lt;/code&gt; and &lt;code&gt;--no-track&lt;/code&gt; options. The valid settings are: &lt;code&gt;false&lt;/code&gt; &amp;mdash; no automatic setup is done; &lt;code&gt;true&lt;/code&gt; &amp;mdash; automatic setup is done when the starting point is a remote-tracking branch; &lt;code&gt;always&lt;/code&gt; &amp;mdash; automatic setup is done when the starting point is either a local branch or remote-tracking branch. This option defaults to true.</source>
          <target state="translated">伝えます &lt;code&gt;git branch&lt;/code&gt; 、 &lt;code&gt;git switch&lt;/code&gt; と &lt;code&gt;git checkout&lt;/code&gt; するように、新たな支店を設定するには&lt;a href=&quot;git-pull&quot;&gt;gitのプル[1]が&lt;/a&gt;適切に開始点のブランチからマージします。このオプションが設定されていなくても、この動作は &lt;code&gt;--track&lt;/code&gt; および &lt;code&gt;--no-track&lt;/code&gt; オプションを使用してブランチごとに選択できることに注意してください。有効な設定は次のとおりです &lt;code&gt;false&lt;/code&gt; &amp;mdash;自動セットアップは行われません。 &lt;code&gt;true&lt;/code&gt; &amp;mdash;開始点がリモート追跡ブランチの場合、自動セットアップが行われます。 &lt;code&gt;always&lt;/code&gt; &amp;mdash;開始点がローカルブランチまたはリモートトラッキングブランチの場合、自動セットアップが行われます。このオプションのデフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="33792c2c707e004799933a452c481ccd3dd6df72" translate="yes" xml:space="preserve">
          <source>Tells &lt;code&gt;merge-recursive&lt;/code&gt; to use a different diff algorithm, which can help avoid mismerges that occur due to unimportant matching lines (such as braces from distinct functions). See also &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--diff-algorithm&lt;/code&gt;.</source>
          <target state="translated">伝え &lt;code&gt;merge-recursive&lt;/code&gt; （例えば、別個の機能からブレースなどの）重要でないマッチング線による発生を避けるmismergesを助けることができる異なる差分アルゴリズムを、使用します。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1] &lt;/a&gt; &lt;code&gt;--diff-algorithm&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="322e9bf79fc78c188017b38cca0390d8ca24df83" translate="yes" xml:space="preserve">
          <source>Tells Git if the executable bit of files in the working tree is to be honored.</source>
          <target state="translated">作業ツリー内のファイルの実行可能ビットを優先するかどうかを Git に知らせます。</target>
        </trans-unit>
        <trans-unit id="e732c8317ebf66ceb1e3db1424bc67bd01187e09" translate="yes" xml:space="preserve">
          <source>Template directory</source>
          <target state="translated">テンプレートディレクトリ</target>
        </trans-unit>
        <trans-unit id="ab43df8613b6388c0548cc8be9da228db8e98898" translate="yes" xml:space="preserve">
          <source>Temporarily setting aside work in progress</source>
          <target state="translated">仕掛品を一時的に置いておくこと</target>
        </trans-unit>
        <trans-unit id="8e2754fc91f29834706af71cfa26258d56805769" translate="yes" xml:space="preserve">
          <source>Temporary files</source>
          <target state="translated">一時ファイル</target>
        </trans-unit>
        <trans-unit id="9c01e9143498ee202aefdfaa27172587b4069975" translate="yes" xml:space="preserve">
          <source>Terminate entries with NUL, instead of LF. This implies the &lt;code&gt;--porcelain=v1&lt;/code&gt; output format if no other format is given.</source>
          <target state="translated">LFではなくNULでエントリを終了します。他の形式が指定されていない場合、これは &lt;code&gt;--porcelain=v1&lt;/code&gt; 出力形式を意味します。</target>
        </trans-unit>
        <trans-unit id="07c6a191135373ac9d2aee0a3bde3b658792a63e" translate="yes" xml:space="preserve">
          <source>Terminate with error if there is no &lt;code&gt;done&lt;/code&gt; command at the end of the stream. This option might be useful for detecting errors that cause the frontend to terminate before it has started to write a stream.</source>
          <target state="translated">ストリームの最後に &lt;code&gt;done&lt;/code&gt; コマンドがない場合は、エラーで終了します。このオプションは、ストリームの書き込みを開始する前にフロントエンドを終了させるエラーを検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="cf10c8624337ce67bcf480537830a31a54a327a5" translate="yes" xml:space="preserve">
          <source>Test suites are very nice. But when they are used alone, they are supposed to be used so that all the tests are checked after each commit. This means that they are not very efficient, because many tests are run for no interesting result, and they suffer from combinatorial explosion.</source>
          <target state="translated">テストスイートはとても良いものです。しかし、テストスイートを単独で使用する場合は、各コミットの後にすべてのテストをチェックするように使用することになっています。これは、多くのテストを実行しても面白い結果が得られず、組み合わせの爆発に悩まされるため、あまり効率的ではないということを意味します。</target>
        </trans-unit>
        <trans-unit id="c7039b793911c3e74e0619b364427be7bb23668d" translate="yes" xml:space="preserve">
          <source>Testing has been done using both the CLI CVS client, and the Eclipse CVS plugin. Most functionality works fine with both of these clients.</source>
          <target state="translated">CLI CVS クライアントと Eclipse CVS プラグインの両方を使ってテストしました。ほとんどの機能は、これらのクライアントの両方で正常に動作します。</target>
        </trans-unit>
        <trans-unit id="499b8eda34fd3ef3837b1d2448aadbb6279371d8" translate="yes" xml:space="preserve">
          <source>Testing partial commits</source>
          <target state="translated">部分的なコミットのテスト</target>
        </trans-unit>
        <trans-unit id="c5dcd73cdfef43c79255820898dee98a4377a12f" translate="yes" xml:space="preserve">
          <source>Text editor for use by Git commands. The value is meant to be interpreted by the shell when it is used. Examples: &lt;code&gt;~/bin/vi&lt;/code&gt;, &lt;code&gt;$SOME_ENVIRONMENT_VARIABLE&lt;/code&gt;, &lt;code&gt;&quot;C:\Program Files\Vim\gvim.exe&quot;
--nofork&lt;/code&gt;. The order of preference is the &lt;code&gt;$GIT_EDITOR&lt;/code&gt; environment variable, then &lt;code&gt;core.editor&lt;/code&gt; configuration, then &lt;code&gt;$VISUAL&lt;/code&gt;, then &lt;code&gt;$EDITOR&lt;/code&gt;, and then the default chosen at compile time, which is usually &lt;code&gt;vi&lt;/code&gt;.</source>
          <target state="translated">Gitコマンドで使用するテキストエディター。この値は、使用時にシェルによって解釈されることを意図しています。例： &lt;code&gt;~/bin/vi&lt;/code&gt; 、 &lt;code&gt;$SOME_ENVIRONMENT_VARIABLE&lt;/code&gt; 、 &lt;code&gt;&quot;C:\Program Files\Vim\gvim.exe&quot; --nofork&lt;/code&gt; 。優先順位は、 &lt;code&gt;$GIT_EDITOR&lt;/code&gt; 環境変数、次に &lt;code&gt;core.editor&lt;/code&gt; 構成、次に &lt;code&gt;$VISUAL&lt;/code&gt; 、次に &lt;code&gt;$EDITOR&lt;/code&gt; 、そしてコンパイル時に選択されたデフォルト（通常は &lt;code&gt;vi&lt;/code&gt; )です。</target>
        </trans-unit>
        <trans-unit id="016aa532b4e9fa7fee1cc89b5c6aa348edd44f21" translate="yes" xml:space="preserve">
          <source>Text editor used by &lt;code&gt;git rebase -i&lt;/code&gt; for editing the rebase instruction file. The value is meant to be interpreted by the shell when it is used. It can be overridden by the &lt;code&gt;GIT_SEQUENCE_EDITOR&lt;/code&gt; environment variable. When not configured the default commit message editor is used instead.</source>
          <target state="translated">&lt;code&gt;git rebase -i&lt;/code&gt; がリベース指示ファイルを編集するために使用するテキストエディター。この値は、使用時にシェルによって解釈されることを意図しています。 &lt;code&gt;GIT_SEQUENCE_EDITOR&lt;/code&gt; 環境変数によって上書きできます。設定されていない場合、デフォルトのコミットメッセージエディタが代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="a8fe9598336f37cb9328ca8052e59b151a7933de" translate="yes" xml:space="preserve">
          <source>Text viewer for use by Git commands (e.g., &lt;code&gt;less&lt;/code&gt;). The value is meant to be interpreted by the shell. The order of preference is the &lt;code&gt;$GIT_PAGER&lt;/code&gt; environment variable, then &lt;code&gt;core.pager&lt;/code&gt; configuration, then &lt;code&gt;$PAGER&lt;/code&gt;, and then the default chosen at compile time (usually &lt;code&gt;less&lt;/code&gt;).</source>
          <target state="translated">Gitコマンド（ &lt;code&gt;less&lt;/code&gt; など）で使用するテキストビューア。この値は、シェルによって解釈されることを意図しています。優先順位は、 &lt;code&gt;$GIT_PAGER&lt;/code&gt; 環境変数、次に &lt;code&gt;core.pager&lt;/code&gt; 構成、次に &lt;code&gt;$PAGER&lt;/code&gt; 、そしてコンパイル時に選択されたデフォルト（通常 &lt;code&gt;less&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="0bd1b0b7ad0ea4fe7d508b463e4e610ef00887b1" translate="yes" xml:space="preserve">
          <source>That is, a pattern followed by an attributes list, separated by whitespaces. Leading and trailing whitespaces are ignored. Lines that begin with &lt;code&gt;#&lt;/code&gt; are ignored. Patterns that begin with a double quote are quoted in C style. When the pattern matches the path in question, the attributes listed on the line are given to the path.</source>
          <target state="translated">つまり、パターンの後に空白で区切られた属性リストが続きます。先頭と末尾の空白は無視されます。 &lt;code&gt;#&lt;/code&gt; で始まる行は無視されます。二重引用符で始まるパターンは、Cスタイルで引用されます。パターンが問題のパスと一致すると、行にリストされている属性がパスに与えられます。</target>
        </trans-unit>
        <trans-unit id="a2ed6bb3b9b6e451ccc6f660ef58cfb1d5aab73c" translate="yes" xml:space="preserve">
          <source>That is, from left to right:</source>
          <target state="translated">つまり、左から右へ。</target>
        </trans-unit>
        <trans-unit id="8f093c96f9e4fd62eb55be18fd622f6079c4aad2" translate="yes" xml:space="preserve">
          <source>That is, from the left to the right:</source>
          <target state="translated">つまり、左から右へ。</target>
        </trans-unit>
        <trans-unit id="11e8a09abfceb997eddb8423e1781ebd95db28e7" translate="yes" xml:space="preserve">
          <source>That is:</source>
          <target state="translated">それは</target>
        </trans-unit>
        <trans-unit id="aa54aa26ef67ef77a7b5a4203a2f21478483f336" translate="yes" xml:space="preserve">
          <source>That means that even if you offer only read access (e.g. by using the pserver method), &lt;code&gt;git-cvsserver&lt;/code&gt; should have write access to the database to work reliably (otherwise you need to make sure that the database is up to date any time &lt;code&gt;git-cvsserver&lt;/code&gt; is executed).</source>
          <target state="translated">つまり、（pserverメソッドを使用するなどして）読み取りアクセスのみを提供した場合でも、 &lt;code&gt;git-cvsserver&lt;/code&gt; は確実に機能するためにデータベースへの書き込みアクセス権を持っている必要があります（それ以外の場合は、データベースが &lt;code&gt;git-cvsserver&lt;/code&gt; 最新であることを確認する必要がありますgit- cvsserverが実行されます）。</target>
        </trans-unit>
        <trans-unit id="452813997abf32b7a81b495ef3287ae8cfa66246" translate="yes" xml:space="preserve">
          <source>That means that if you do a &lt;code&gt;git read-tree -m &amp;lt;newtree&amp;gt;&lt;/code&gt; followed by a &lt;code&gt;git checkout-index -f -u -a&lt;/code&gt;, the &lt;code&gt;git checkout-index&lt;/code&gt; only checks out the stuff that really changed.</source>
          <target state="translated">つまり、 &lt;code&gt;git read-tree -m &amp;lt;newtree&amp;gt;&lt;/code&gt; に続けて &lt;code&gt;git checkout-index -f -u -a&lt;/code&gt; を実行すると、 &lt;code&gt;git checkout-index&lt;/code&gt; は実際に変更されたものだけをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="a1aaaec20914cfb53973b0431f384394f0c406ca" translate="yes" xml:space="preserve">
          <source>That puts the heads and tags for each fork in their own island (named &quot;1234&quot; or similar), and the pull refs for each go into their own &quot;1234-pull&quot;.</source>
          <target state="translated">これにより、各フォークのヘッドとタグはそれぞれの島(&quot;1234 &quot;などの名前)に置かれ、それぞれのプルリファレンスはそれぞれの &quot;1234-pull &quot;に置かれます。</target>
        </trans-unit>
        <trans-unit id="767670eb6ab18d660b358046eb00166f0a64fef3" translate="yes" xml:space="preserve">
          <source>That will produce the diff between the tips of the two branches. If you&amp;rsquo;d prefer to find the diff from their common ancestor to test, you can use three dots instead of two:</source>
          <target state="translated">これにより、2つの枝の先端の間に差異が生じます。テストする共通の祖先との違いを見つけたい場合は、2つではなく3つのドットを使用できます。</target>
        </trans-unit>
        <trans-unit id="2ab4548e0b841bbace5e0a92c23778ab654224e3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why the &quot;git replace&quot; command was created. Technically it stores replacements &quot;refs&quot; in the &quot;refs/replace/&quot; hierarchy. These &quot;refs&quot; are like branches (that are stored in &quot;refs/heads/&quot;) or tags (that are stored in &quot;refs/tags&quot;), and that means that they can automatically be shared like branches or tags among developers.</source>
          <target state="translated">そのため、「git replace」コマンドが作成されました。技術的には、「refs / replace /」階層に置換「refs」を格納します。これらの「参照」は、ブランチ（「参照/ヘッド/」に格納されている）またはタグ（「参照/タグ」に格納されている）のようなものであり、開発者間でブランチまたはタグのように自動的に共有できることを意味します。</target>
        </trans-unit>
        <trans-unit id="e7f78784e12fead6a14f302d919d7dfe2a02b05b" translate="yes" xml:space="preserve">
          <source>The &quot;child_class&quot; field is a rough classification, such as &quot;editor&quot;, &quot;pager&quot;, &quot;transport/*&quot;, and &quot;hook&quot;. Unclassified children are classified with &quot;?&quot;.</source>
          <target state="translated">child_class」欄は、「エディタ」「ページャー」「トランスポート/*」「フック」などの大まかな分類です。未分類の子は「?</target>
        </trans-unit>
        <trans-unit id="fe5496d60fae83b54bfa30bb265cd284e395a597" translate="yes" xml:space="preserve">
          <source>The &quot;child_id&quot; field can be used to match this child_start with the corresponding child_exit event.</source>
          <target state="translated">child_id &quot;フィールドは、このchild_startと対応するchild_exitイベントを一致させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="2ee1a593683be8a9c62bf7139373ea713a6461c3" translate="yes" xml:space="preserve">
          <source>The &quot;commit&quot; object links a physical state of a tree with a description of how we got there and why. Use the &lt;code&gt;--pretty=raw&lt;/code&gt; option to &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; or &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; to examine your favorite commit:</source>
          <target state="translated">「コミット」オブジェクトは、ツリーの物理的な状態と、そこに到達した方法とその理由の説明をリンクします。使用 &lt;code&gt;--pretty=raw&lt;/code&gt; にオプションを&lt;a href=&quot;git-show&quot;&gt;[1]にgit-ショー&lt;/a&gt;や&lt;a href=&quot;git-log&quot;&gt;[1] gitのログ&lt;/a&gt;あなたのお気に入りはコミット検討します：</target>
        </trans-unit>
        <trans-unit id="6db6601ce62b96f9f8fba54efac9ee5967a731f4" translate="yes" xml:space="preserve">
          <source>The &quot;default&quot; value consists of a list of triplets in the form &lt;code&gt;(&quot;&amp;lt;label&amp;gt;&quot;, &quot;&amp;lt;link&amp;gt;&quot;, &quot;&amp;lt;position&amp;gt;&quot;)&lt;/code&gt; where &quot;position&quot; is the label after which to insert the link, &quot;link&quot; is a format string where &lt;code&gt;%n&lt;/code&gt; expands to the project name, &lt;code&gt;%f&lt;/code&gt; to the project path within the filesystem (i.e. &quot;$projectroot/$project&quot;), &lt;code&gt;%h&lt;/code&gt; to the current hash ('h' gitweb parameter) and &lt;code&gt;%b&lt;/code&gt; to the current hash base ('hb' gitweb parameter); &lt;code&gt;%%&lt;/code&gt; expands to '%'.</source>
          <target state="translated">「デフォルト」の値は、 &lt;code&gt;(&quot;&amp;lt;label&amp;gt;&quot;, &quot;&amp;lt;link&amp;gt;&quot;, &quot;&amp;lt;position&amp;gt;&quot;)&lt;/code&gt; の形式のトリプレットのリストで構成されます。ここで、「position」は、リンク「link」を挿入するラベルです。書式文字列であり、 &lt;code&gt;%n&lt;/code&gt; プロジェクト名に展開され、 &lt;code&gt;%f&lt;/code&gt; ファイルシステム内のプロジェクトパスに（すなわち、「$ projectroot / $プロジェクト」）、 &lt;code&gt;%h&lt;/code&gt; の現在のハッシュ（「H」gitwebパラメータ）及び &lt;code&gt;%b&lt;/code&gt; へ現在のハッシュベース（ 'hb' gitwebパラメーター）; &lt;code&gt;%%&lt;/code&gt; は「％」に展開されます。</target>
        </trans-unit>
        <trans-unit id="a92a8477d5d97d17f1c481b90522235992b0aec5" translate="yes" xml:space="preserve">
          <source>The &quot;delete&quot; subcommand deletes single entries from the reflog. Its argument must be an &lt;code&gt;exact&lt;/code&gt; entry (e.g. &quot;&lt;code&gt;git reflog delete
master@{2}&lt;/code&gt;&quot;). This subcommand is also typically not used directly by end users.</source>
          <target state="translated">&quot;delete&quot;サブコマンドは、reflogから単一のエントリを削除します。引数は &lt;code&gt;exact&lt;/code&gt; エントリでなければなりません（例： &quot; &lt;code&gt;git reflog delete master@{2}&lt;/code&gt; &quot;）。このサブコマンドは、通常、エンドユーザーが直接使用することもありません。</target>
        </trans-unit>
        <trans-unit id="15cc724d6cfbdaca681c81ec6b39527ea7ba3e75" translate="yes" xml:space="preserve">
          <source>The &quot;downwards graduation&quot; discussed above cannot be done by actually merging downwards, however, since that would merge &lt;code&gt;all&lt;/code&gt; changes on the unstable branch into the stable one. Hence the following:</source>
          <target state="translated">上記の「下向きの卒業」は、実際には下向きにマージすることでは実行できません。これは、不安定なブランチの &lt;code&gt;all&lt;/code&gt; 変更を安定したブランチにマージするためです。したがって、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4b681909e4d1085f8faa13044f43a355b4e9ca0a" translate="yes" xml:space="preserve">
          <source>The &quot;exec&quot; command launches the command in a shell (the one specified in &lt;code&gt;$SHELL&lt;/code&gt;, or the default shell if &lt;code&gt;$SHELL&lt;/code&gt; is not set), so you can use shell features (like &quot;cd&quot;, &quot;&amp;gt;&quot;, &quot;;&quot; &amp;hellip;​). The command is run from the root of the working tree.</source>
          <target state="translated">「exec」コマンドは、シェル（ &lt;code&gt;$SHELL&lt;/code&gt; で指定されたもの、または &lt;code&gt;$SHELL&lt;/code&gt; が設定されていない場合はデフォルトのシェル）でコマンドを起動するため、シェル機能（「cd」、「&amp;gt;」、「;」など）を使用できます。 &amp;hellip;）。コマンドは作業ツリーのルートから実行されます。</target>
        </trans-unit>
        <trans-unit id="3e27bb28ac33a3ed0da91ec19b0543d1741f2754" translate="yes" xml:space="preserve">
          <source>The &quot;exec_id&quot; field is a command-unique id and is only useful if the &lt;code&gt;exec()&lt;/code&gt; fails and a corresponding exec_result event is generated.</source>
          <target state="translated">「exec_id」フィールドはコマンド固有のIDであり、 &lt;code&gt;exec()&lt;/code&gt; が失敗し、対応するexec_resultイベントが生成された場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="111dec81403753e6a7d49025386f92b4f5a7ce80" translate="yes" xml:space="preserve">
          <source>The &quot;exists&quot; subcommand checks whether a ref has a reflog. It exits with zero status if the reflog exists, and non-zero status if it does not.</source>
          <target state="translated">exists &quot;サブコマンドは、refがreflogを持っているかどうかをチェックします。reflogが存在する場合は0の状態で終了し、存在しない場合は0以外の状態で終了します。</target>
        </trans-unit>
        <trans-unit id="b084a3a2964fff409a1c4bd5eaf3ff2af985bb46" translate="yes" xml:space="preserve">
          <source>The &quot;experimental&quot; branch is the one you just created, and the &quot;master&quot; branch is a default branch that was created for you automatically. The asterisk marks the branch you are currently on; type</source>
          <target state="translated">experimental&quot; ブランチは作成したばかりのブランチで、&quot;master&quot; ブランチは自動的に作成されたデフォルトのブランチです。アスタリスクは現在のブランチを示しています。</target>
        </trans-unit>
        <trans-unit id="8a5c55e5646a8a6620c2e2207d5f34af5eadc4f2" translate="yes" xml:space="preserve">
          <source>The &quot;expire&quot; subcommand prunes older reflog entries. Entries older than &lt;code&gt;expire&lt;/code&gt; time, or entries older than &lt;code&gt;expire-unreachable&lt;/code&gt; time and not reachable from the current tip, are removed from the reflog. This is typically not used directly by end users &amp;mdash; instead, see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;.</source>
          <target state="translated">「expire」サブコマンドは、古いreflogエントリーを整理します。 &lt;code&gt;expire&lt;/code&gt; よりも古いエントリ、または &lt;code&gt;expire-unreachable&lt;/code&gt; 時間よりも古く、現在のヒントから到達できないエントリは、reflogから削除されます。これは通常、エンドユーザーが直接使用することはありません。代わりに&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51ddfbdb206861a134ce9d36a0cd6f8dcb912a92" translate="yes" xml:space="preserve">
          <source>The &quot;extent of changes&quot; parameter can be tweaked from the default 80% (that is, unless more than 80% of the original material is deleted, the broken pairs are merged back into a single modification) by giving a second number to -B option, like these:</source>
          <target state="translated">変更の範囲」パラメータは、デフォルトの80%から微調整することができます (つまり、元の素材の80%以上が削除されない限り、壊れたペアは1つの変更にマージされます)。</target>
        </trans-unit>
        <trans-unit id="4be913eb74285fc0f11c845775de3706d8e8ac4f" translate="yes" xml:space="preserve">
          <source>The &quot;git-diff-tree&quot; command begins its output by printing the hash of what is being compared. After that, all the commands print one output line per changed file.</source>
          <target state="translated">git-diff-tree&quot; コマンドは、比較対象のハッシュを出力することで出力を開始します。その後、すべてのコマンドは変更されたファイルごとに一行ずつ出力します。</target>
        </trans-unit>
        <trans-unit id="14e841537fdff67ebd6d58e11774065ab0f0ebfa" translate="yes" xml:space="preserve">
          <source>The &quot;indent&quot; filter is well-behaved in this regard: it will not modify input that is already correctly indented. In this case, the lack of a smudge filter means that the clean filter &lt;code&gt;must&lt;/code&gt; accept its own output without modifying it.</source>
          <target state="translated">「インデント」フィルターは、この点で適切に動作します。既に正しくインデントされている入力は変更されません。この場合、スマッジフィルターが &lt;code&gt;must&lt;/code&gt; ため、クリーンフィルターは変更せずに独自の出力を受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="2a9f18fc49cc181471bfbc97a47a88e9bcc1179f" translate="yes" xml:space="preserve">
          <source>The &quot;index&quot; holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after making any changes to the working tree, and before running the commit command, you must use the &lt;code&gt;add&lt;/code&gt; command to add any new or modified files to the index.</source>
          <target state="translated">「インデックス」は作業ツリーの内容のスナップショットを保持し、次のコミットの内容として取得されるのはこのスナップショットです。したがって、作業ツリーに変更を加えた後、commitコマンドを実行する前に、 &lt;code&gt;add&lt;/code&gt; コマンドを使用して、新しいファイルまたは変更されたファイルをインデックスに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b5b86b50febe55839cf4e73fade50a78b6b0a0e" translate="yes" xml:space="preserve">
          <source>The &quot;master&quot; branch that was created at the time you cloned is a copy of the HEAD in the repository that you cloned from. That repository may also have had other branches, though, and your local repository keeps branches which track each of those remote branches, called remote-tracking branches, which you can view using the &lt;code&gt;-r&lt;/code&gt; option to &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;:</source>
          <target state="translated">クローンを作成したときに作成された「マスター」ブランチは、クローンを作成したリポジトリ内のHEADのコピーです。ただし、そのリポジトリには他のブランチもある可能性があります。ローカルリポジトリには、リモートトラッキングブランチと呼ばれるそれらのリモートブランチのそれぞれを追跡するブランチが保持されます。これは&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]の&lt;/a&gt; &lt;code&gt;-r&lt;/code&gt; オプションを使用して表示できます。</target>
        </trans-unit>
        <trans-unit id="b0e05ae2162ea2794c2d7383fd67bd0eb622aa45" translate="yes" xml:space="preserve">
          <source>The &quot;name&quot; field is an arbitrary string to describe the command mode. For example, checkout can checkout a branch or an individual file. And these variations typically have different performance characteristics that are not comparable.</source>
          <target state="translated">name」フィールドは、コマンドモードを記述するための任意の文字列である。例えば、checkoutはブランチをチェックアウトしたり、個々のファイルをチェックアウトしたりすることができます。そして、これらのバリエーションは、一般的には比較できない異なるパフォーマンス特性を持っています。</target>
        </trans-unit>
        <trans-unit id="dd5002fa5ace7f79f3506e0a4b77fdeff5bda038" translate="yes" xml:space="preserve">
          <source>The &quot;non-cached&quot; mode takes a different approach, and is potentially the more useful of the two in that what it does can&amp;rsquo;t be emulated with a &lt;code&gt;git write-tree&lt;/code&gt; + &lt;code&gt;git diff-tree&lt;/code&gt;. Thus that&amp;rsquo;s the default mode. The non-cached version asks the question:</source>
          <target state="translated">「非キャッシュ」モードは異なるアプローチをとり、2つの方法のうち、 &lt;code&gt;git write-tree&lt;/code&gt; + &lt;code&gt;git diff-tree&lt;/code&gt; でエミュレートできないという点で、2つの方法の中でより有用である可能性があります。したがって、これがデフォルトのモードです。キャッシュされていないバージョンは質問をします：</target>
        </trans-unit>
        <trans-unit id="fb600e178320a3e93fbf20a6c6f69b12e2843e17" translate="yes" xml:space="preserve">
          <source>The &quot;pull&quot; command thus performs two operations: it fetches changes from a remote branch, then merges them into the current branch.</source>
          <target state="translated">つまり、リモートブランチから変更を取得し、現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="70b3edc9504f2665b7793306c4b0a620ef20dadb" translate="yes" xml:space="preserve">
          <source>The &quot;remote&quot; repository that is destination of a push operation. This parameter can be either a URL (see the section &lt;a href=&quot;#URLS&quot;&gt;GIT URLS&lt;/a&gt; below) or the name of a remote (see the section &lt;a href=&quot;#REMOTES&quot;&gt;REMOTES&lt;/a&gt; below).</source>
          <target state="translated">プッシュ操作の宛先である「リモート」リポジトリ。このパラメータは、のいずれかとすることができるURL（セクションを参照&lt;a href=&quot;#URLS&quot;&gt;GITのURL&lt;/a&gt;またはリモートの名前（セクションは下記参照）を&lt;a href=&quot;#REMOTES&quot;&gt;リモコン&lt;/a&gt;以下）。</target>
        </trans-unit>
        <trans-unit id="0610be2d46404a8f9561c2512c45bc2650bc2b77" translate="yes" xml:space="preserve">
          <source>The &quot;remote&quot; repository that is the source of a fetch or pull operation. This parameter can be either a URL (see the section &lt;a href=&quot;#URLS&quot;&gt;GIT URLS&lt;/a&gt; below) or the name of a remote (see the section &lt;a href=&quot;#REMOTES&quot;&gt;REMOTES&lt;/a&gt; below).</source>
          <target state="translated">フェッチまたはプル操作のソースである「リモート」リポジトリ。このパラメータは、のいずれかとすることができるURL（セクションを参照&lt;a href=&quot;#URLS&quot;&gt;GITのURL&lt;/a&gt;またはリモートの名前（セクションは下記参照）を&lt;a href=&quot;#REMOTES&quot;&gt;リモコン&lt;/a&gt;以下）。</target>
        </trans-unit>
        <trans-unit id="672e385879e10047919cb534a388204453fa9b9b" translate="yes" xml:space="preserve">
          <source>The &quot;remote&quot; repository to query. This parameter can be either a URL or the name of a remote (see the GIT URLS and REMOTES sections of &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;).</source>
          <target state="translated">照会する「リモート」リポジトリ。このパラメーターは、URLまたはリモートの名前のいずれかです（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;のGIT URLSおよびREMOTESセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="c6967bbb137406cb4cb1860aeca604a66e63b551" translate="yes" xml:space="preserve">
          <source>The &quot;show&quot; subcommand (which is also the default, in the absence of any subcommands) shows the log of the reference provided in the command-line (or &lt;code&gt;HEAD&lt;/code&gt;, by default). The reflog covers all recent actions, and in addition the &lt;code&gt;HEAD&lt;/code&gt; reflog records branch switching. &lt;code&gt;git reflog show&lt;/code&gt; is an alias for &lt;code&gt;git log -g --abbrev-commit
--pretty=oneline&lt;/code&gt;; see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; for more information.</source>
          <target state="translated">「show」サブコマンド（サブコマンドがない場合はデフォルトでもあります）は、コマンドライン（またはデフォルトでは &lt;code&gt;HEAD&lt;/code&gt; ）で提供された参照のログを表示します。reflogは最近のすべてのアクションをカバーし、さらに &lt;code&gt;HEAD&lt;/code&gt; reflogはブランチの切り替えを記録します。 &lt;code&gt;git reflog show&lt;/code&gt; は &lt;code&gt;git log -g --abbrev-commit --pretty=oneline&lt;/code&gt; です。詳細については、&lt;a href=&quot;git-log&quot;&gt;git-log [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f44e4ac17ec1a545f86623659c266196a2646a2" translate="yes" xml:space="preserve">
          <source>The &quot;status&quot; command is a useful way to get a quick summary of the situation:</source>
          <target state="translated">&quot;status &quot;コマンドは、状況を簡単にまとめるのに便利なコマンドです。</target>
        </trans-unit>
        <trans-unit id="97877392fd9cfcae446bf7fdee6a5be7af0d7e1e" translate="yes" xml:space="preserve">
          <source>The &quot;tar.gz&quot; and &quot;tgz&quot; formats are defined automatically and default to &lt;code&gt;gzip -cn&lt;/code&gt;. You may override them with custom commands.</source>
          <target state="translated">「tar.gz」および「tgz」形式は自動的に定義され、デフォルトは &lt;code&gt;gzip -cn&lt;/code&gt; です。カスタムコマンドでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="de5a671425f0a835fc1aa7cc9c82d529d93b1856" translate="yes" xml:space="preserve">
          <source>The &quot;tree&quot; object here refers to the new state of the tree:</source>
          <target state="translated">ここでいう「木」オブジェクトとは、木の新しい状態を指します。</target>
        </trans-unit>
        <trans-unit id="e01253337b76bf7642cbcef035c48eb0188a2f7d" translate="yes" xml:space="preserve">
          <source>The &quot;value&quot; field may be an integer or a string.</source>
          <target state="translated">値」フィールドは整数または文字列である。</target>
        </trans-unit>
        <trans-unit id="38b8f4a1de6f86897b3e2a50acc4b0dda41fe280" translate="yes" xml:space="preserve">
          <source>The &amp;lt;dataref&amp;gt; represents the blob, tree, or commit object at &amp;lt;path&amp;gt; and can be used in later &lt;code&gt;get-mark&lt;/code&gt;, &lt;code&gt;cat-blob&lt;/code&gt;, &lt;code&gt;filemodify&lt;/code&gt;, or &lt;code&gt;ls&lt;/code&gt; commands.</source>
          <target state="translated">&amp;lt;dataref&amp;gt;は、&amp;lt;path&amp;gt;のblob、tree、またはcommitオブジェクトを表し、後の &lt;code&gt;get-mark&lt;/code&gt; 、 &lt;code&gt;cat-blob&lt;/code&gt; 、 &lt;code&gt;filemodify&lt;/code&gt; 、または &lt;code&gt;ls&lt;/code&gt; コマンドで使用できます。</target>
        </trans-unit>
        <trans-unit id="118ecd88d0a05a5c1cb4a877b8fac543b0b9ad8d" translate="yes" xml:space="preserve">
          <source>The &amp;lt;dst&amp;gt; tells which ref on the remote side is updated with this push. Arbitrary expressions cannot be used here, an actual ref must be named. If &lt;code&gt;git push [&amp;lt;repository&amp;gt;]&lt;/code&gt; without any &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; argument is set to update some ref at the destination with &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; with &lt;code&gt;remote.&amp;lt;repository&amp;gt;.push&lt;/code&gt; configuration variable, &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; part can be omitted&amp;mdash;​such a push will update a ref that &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; normally updates without any &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; on the command line. Otherwise, missing &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; means to update the same ref as the &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&amp;lt;dst&amp;gt;は、リモート側のどの参照がこのプッシュで更新されるかを示します。ここでは任意の式は使用できません。実際の参照を指定する必要があります。もし &lt;code&gt;git push [&amp;lt;repository&amp;gt;]&lt;/code&gt; 任意なし &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; 引数を持つ先にいくつかの参考文献を更新するように設定されている &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; と &lt;code&gt;remote.&amp;lt;repository&amp;gt;.push&lt;/code&gt; コンフィグレーション変数、 &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; 部分はomitted-可能なA pushは、コマンドラインで &lt;code&gt;&amp;lt;refspec&amp;gt;&lt;/code&gt; なしで通常 &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; が更新する参照を更新します。それ以外の場合、 &lt;code&gt;:&amp;lt;dst&amp;gt;&lt;/code&gt; がないと、 &lt;code&gt;&amp;lt;src&amp;gt;&lt;/code&gt; と同じ参照が更新されます。</target>
        </trans-unit>
        <trans-unit id="a11f746174b65907575be3c7e94b2869a6db53ed" translate="yes" xml:space="preserve">
          <source>The &amp;lt;feature&amp;gt; part of the command may be any one of the following:</source>
          <target state="translated">コマンドの&amp;lt;feature&amp;gt;部分は、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="12c10723a00c71e41369dc4ab439f9bc656fc9a7" translate="yes" xml:space="preserve">
          <source>The &amp;lt;file&amp;gt; list given to the command can be exact pathnames, file glob patterns, or leading directory names. The command removes only the paths that are known to Git. Giving the name of a file that you have not told Git about does not remove that file.</source>
          <target state="translated">コマンドに指定する&amp;lt;file&amp;gt;リストには、正確なパス名、ファイルグロブパターン、または先頭のディレクトリ名を指定できます。このコマンドは、Gitが認識しているパスのみを削除します。Gitについて知らせていないファイルの名前を指定しても、そのファイルは削除されません。</target>
        </trans-unit>
        <trans-unit id="d9a9d78d51370431396c79c2da7d525a4215ec53" translate="yes" xml:space="preserve">
          <source>The &amp;lt;paths&amp;gt; parameters, when given, are used to limit the diff to the named paths (you can give directory names and get diff for all files under them).</source>
          <target state="translated">&amp;lt;paths&amp;gt;パラメータを指定すると、diffを名前付きパスに制限するために使用されます（ディレクトリ名を指定して、その下のすべてのファイルのdiffを取得できます）。</target>
        </trans-unit>
        <trans-unit id="be0e9224a3c31468000ef31d0ee2d41289501c7f" translate="yes" xml:space="preserve">
          <source>The &amp;lt;src&amp;gt; is often the name of the branch you would want to push, but it can be any arbitrary &quot;SHA-1 expression&quot;, such as &lt;code&gt;master~4&lt;/code&gt; or &lt;code&gt;HEAD&lt;/code&gt; (see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;).</source>
          <target state="translated">&amp;lt;SRC&amp;gt;多くの場合、あなたがプッシュしたいブランチの名前ですが、それは以下のような任意の「SHA-1の発現」とすることができる &lt;code&gt;master~4&lt;/code&gt; または &lt;code&gt;HEAD&lt;/code&gt; （参照&lt;a href=&quot;gitrevisions&quot;&gt;[7] gitrevisionsを&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="94b79c58bc3ec3bceec3b732165a2a52f94063c6" translate="yes" xml:space="preserve">
          <source>The &amp;lt;type&amp;gt; object &amp;lt;object&amp;gt;, is present in the database but never &lt;code&gt;directly&lt;/code&gt; used. A dangling commit could be a root node.</source>
          <target state="translated">&amp;lt;type&amp;gt;オブジェクト&amp;lt;object&amp;gt;はデータベースに存在しますが、 &lt;code&gt;directly&lt;/code&gt; 使用されることはありません。ダングリングコミットはルートノードになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c165697ba8df58634f80c6f82752d5afcdee5578" translate="yes" xml:space="preserve">
          <source>The &amp;lt;type&amp;gt; object &amp;lt;object&amp;gt;, is referred to but isn&amp;rsquo;t present in the database.</source>
          <target state="translated">&amp;lt;type&amp;gt;オブジェクト&amp;lt;object&amp;gt;は参照されていますが、データベースに存在しません。</target>
        </trans-unit>
        <trans-unit id="5e6573bf54036812f2655d363c6262b69c0dca40" translate="yes" xml:space="preserve">
          <source>The &amp;lt;type&amp;gt; object &amp;lt;object&amp;gt;, isn&amp;rsquo;t actually referred to directly or indirectly in any of the trees or commits seen. This can mean that there&amp;rsquo;s another root node that you&amp;rsquo;re not specifying or that the tree is corrupt. If you haven&amp;rsquo;t missed a root node then you might as well delete unreachable nodes since they can&amp;rsquo;t be used.</source>
          <target state="translated">&amp;lt;type&amp;gt;オブジェクト&amp;lt;object&amp;gt;は、実際には、ツリーやコミットの中で直接または間接的に参照されることはありません。これは、指定していない別のルートノードがあるか、ツリーが壊れていることを意味します。ルートノードを見逃していない場合は、到達できないノードは使用できないため、削除することもできます。</target>
        </trans-unit>
        <trans-unit id="afa0888330a84b7e0fff615f1c9b8a57ecf94505" translate="yes" xml:space="preserve">
          <source>The 'git sh-i18n scriptlet is designed to be sourced (using &lt;code&gt;.&lt;/code&gt;) by Git&amp;rsquo;s porcelain programs implemented in shell script. It provides wrappers for the GNU &lt;code&gt;gettext&lt;/code&gt; and &lt;code&gt;eval_gettext&lt;/code&gt; functions accessible through the &lt;code&gt;gettext.sh&lt;/code&gt; script, and provides pass-through fallbacks on systems without GNU gettext.</source>
          <target state="translated">'git sh-i18nスクリプトレットは、シェルスクリプトで実装されたGitの磁器プログラムによって（ &lt;code&gt;.&lt;/code&gt; を使用して）供給されるように設計されています。これは、 &lt;code&gt;gettext.sh&lt;/code&gt; スクリプトを介してアクセス可能なGNU &lt;code&gt;gettext&lt;/code&gt; および &lt;code&gt;eval_gettext&lt;/code&gt; 関数のラッパーを提供し、GNU gettextのないシステムでパススルーフォールバックを提供します。</target>
        </trans-unit>
        <trans-unit id="75c51ca5866a2731f86888419b9fb61d16567aec" translate="yes" xml:space="preserve">
          <source>The (fully qualified) refname from which to show notes when showing commit messages. The value of this variable can be set to a glob, in which case notes from all matching refs will be shown. You may also specify this configuration variable several times. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.</source>
          <target state="translated">コミットメッセージを表示する際にノートを表示するための (完全修飾された)refname。この変数の値は glob に設定することができ、その場合、マッチするすべての refs のノートが表示されます。この設定変数を複数回指定することもできます。存在しない refs に対しては警告が発行されますが、どの refs にもマッチしない glob は静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="1e4ce979f13cefaaddaddc6c3ce47e1170286daa" translate="yes" xml:space="preserve">
          <source>The (possibly remote) repository to clone from. See the &lt;a href=&quot;#URLS&quot;&gt;GIT URLS&lt;/a&gt; section below for more information on specifying repositories.</source>
          <target state="translated">クローン元の（おそらくリモートの）リポジトリ。リポジトリの指定の詳細については、下記の&lt;a href=&quot;#URLS&quot;&gt;GIT URLの&lt;/a&gt;セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="0958323d0ba18cc1a0d938e257756d1659d52ec9" translate="yes" xml:space="preserve">
          <source>The --exclude-existing form is a filter that does the inverse. It reads refs from stdin, one ref per line, and shows those that don&amp;rsquo;t exist in the local repository.</source>
          <target state="translated">--exclude-existingフォームは、その逆を行うフィルターです。stdinからrefを1行に1つ読み取り、ローカルリポジトリに存在しないものを表示します。</target>
        </trans-unit>
        <trans-unit id="dba5b453028e9c1f44e735e38e787a98b0046edc" translate="yes" xml:space="preserve">
          <source>The --no-signoff option can be used to countermand an earlier --signoff option on the command line.</source>
          <target state="translated">no-signoff オプションは、コマンドラインで以前の -signoff オプションを無効にするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="a043107d8410def266c54e81fdffaefcdaf6dd4c" translate="yes" xml:space="preserve">
          <source>The --smtp-server-option option must be repeated for each option you want to pass to the server. Likewise, different lines in the configuration files must be used for each option.</source>
          <target state="translated">smtp-server-option オプションは、サーバに渡したいオプションごとに繰り返し指定する必要があります。同様に、設定ファイルの中ではオプションごとに異なる行を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b478196a2fb02489b622996c5ea9b31713647e4d" translate="yes" xml:space="preserve">
          <source>The .git location may be auto-discovered, or come from &lt;code&gt;$GIT_DIR&lt;/code&gt; environment variable. If the repository is auto discovered via a .git file (e.g. from submodules, or a linked worktree), the .git location would be the final location where the .git directory is, not where the .git file is.</source>
          <target state="translated">.gitの場所は自動検出されるか、 &lt;code&gt;$GIT_DIR&lt;/code&gt; 環境変数から取得されます。リポジトリが.gitファイルを介して自動検出される場合（サブモジュールやリンクされたワークツリーなどから）、. gitの場所は、.gitファイルがある場所ではなく、.gitディレクトリがある最終的な場所になります。</target>
        </trans-unit>
        <trans-unit id="489d70f8c8831a28cdf6bb81a4079dab3fec8b7e" translate="yes" xml:space="preserve">
          <source>The 40-hex object name of the object.</source>
          <target state="translated">40 ヘックスのオブジェクト名。</target>
        </trans-unit>
        <trans-unit id="edba0bac58d4604af8b0ccc3234ca39328b25c20" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-archive&quot;&gt;git-archive[1]&lt;/a&gt; command can create a tar or zip archive from any version of a project; for example:</source>
          <target state="translated">&lt;a href=&quot;git-archive&quot;&gt;gitのアーカイブ[1]&lt;/a&gt;コマンドプロジェクトのいずれかのバージョンからtarやzipアーカイブを作成することができます。例えば：</target>
        </trans-unit>
        <trans-unit id="8ff01ddb94fa5e45588517f77b5eb76be2068bf4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; command correctly handles history that includes merge commits. However, when the commit that it finds is a merge commit, the user may need to work harder than usual to figure out why that commit introduced a problem.</source>
          <target state="translated">&lt;a href=&quot;git-bisect&quot;&gt;git -二分[1]&lt;/a&gt;コマンドが正しくマージコミットを含んで歴史を扱います。ただし、見つかったコミットがマージコミットである場合、そのコミットが問題を引き起こした理由を解明するために、ユーザーは通常よりも一生懸命作業する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="a1047413b5c194a852bce97f1a7a5b5c064c8f0a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file[1]&lt;/a&gt; command can show the contents of any object, though the higher-level &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; is usually more useful.</source>
          <target state="translated">&lt;a href=&quot;git-cat-file&quot;&gt;gitの-CAT-ファイル[1]&lt;/a&gt;コマンドは、上位も、任意のオブジェクトの内容を表示することができる&lt;a href=&quot;git-show&quot;&gt;のgit -ショー[1]&lt;/a&gt;通常、より有用です。</target>
        </trans-unit>
        <trans-unit id="0ea75322cb21a3c3c8fac48d1e6228de3fae3cce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; command allows constructing commits with arbitrary parents and trees.</source>
          <target state="translated">&lt;a href=&quot;git-commit-tree&quot;&gt;gitのコミットツリーは、[1]&lt;/a&gt;コマンドは、任意の両親や木でコミットを構築することができます。</target>
        </trans-unit>
        <trans-unit id="efc26cd7227657520a6926ebb23db38544c357a6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-describe&quot;&gt;git-describe[1]&lt;/a&gt; command does the opposite, naming the revision using a tag on which the given commit is based:</source>
          <target state="translated">&lt;a href=&quot;git-describe&quot;&gt;Gitは、記述[1]&lt;/a&gt;コマンドは、所与のベースコミットれたタグを使用してリビジョンを命名、反対のことを行います。</target>
        </trans-unit>
        <trans-unit id="9903942bbbf43f525c7cf036d25898c86f9d9d7c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-fsck&quot;&gt;git-fsck[1]&lt;/a&gt; command runs a number of self-consistency checks on the repository, and reports on any problems. This may take some time.</source>
          <target state="translated">&lt;a href=&quot;git-fsck&quot;&gt;git - fsckは[1]&lt;/a&gt;コマンドは、リポジトリ上の自己整合性チェックの数を実行し、任意の問題に関するレポート。これには時間がかかる場合があります。</target>
        </trans-unit>
        <trans-unit id="ff835519b77a7ea3e8c99474cee535ec38ab3bd6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-fsck&quot;&gt;git-fsck[1]&lt;/a&gt; command will sometimes complain about dangling objects. They are not a problem.</source>
          <target state="translated">&lt;a href=&quot;git-fsck&quot;&gt;git -のfsck [1]&lt;/a&gt;コマンド時にはオブジェクトをダングリング文句を言うでしょう。それらは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="d818a9097a56e35195bf0f4a41317be4c1298cc7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt; command performs packing, pruning, and more for you, so is normally the only high-level command you need.</source>
          <target state="translated">&lt;a href=&quot;git-gc&quot;&gt;git-gcが[1]&lt;/a&gt;コマンドを実行するには、梱包剪定、そしてより多くのあなたのために、あなたが必要とするだけで、高レベルのコマンドは、通常です。</target>
        </trans-unit>
        <trans-unit id="7674cbc9fda493edc257e040882a4d3b2fee5da7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; command provides a simple way to start browsing the repository using gitweb. The default server when using instaweb is lighttpd.</source>
          <target state="translated">&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;コマンドgitwebを使用してリポジトリをブラウズ開始する簡単な方法を提供します。instawebを使用する場合のデフォルトのサーバーはlighttpdです。</target>
        </trans-unit>
        <trans-unit id="3d865565a2d1aab8d65d5524c33990e3ecd5eee4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; and &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; commands also provide special help for merges:</source>
          <target state="translated">&lt;a href=&quot;git-log&quot;&gt;gitのログ[1]&lt;/a&gt;と&lt;a href=&quot;gitk&quot;&gt;gitkは、[1]&lt;/a&gt;コマンドは、マージのための特別な支援を提供します。</target>
        </trans-unit>
        <trans-unit id="869571e8bf360d23843fed69fde509a99aec51ce" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; command can show lists of commits. On its own, it shows all commits reachable from the parent commit; but you can also make more specific requests:</source>
          <target state="translated">&lt;a href=&quot;git-log&quot;&gt;gitのログ[1]&lt;/a&gt;コマンドはコミットの一覧を表示することができます。単独では、親コミットから到達可能なすべてのコミットが表示されます。ただし、より具体的なリクエストを行うこともできます。</target>
        </trans-unit>
        <trans-unit id="49730fd39b9c73a554b2cce254c7d8e26a1047e1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-rev-parse&quot;&gt;git-rev-parse[1]&lt;/a&gt; command is a low-level command that is occasionally useful for translating some name for a commit to the object name for that commit:</source>
          <target state="translated">&lt;a href=&quot;git-rev-parse&quot;&gt;gitの-REV-解析[1]&lt;/a&gt;コマンドコミットそのため、オブジェクト名にコミットするためのいくつかの名前を変換する時々有用である低レベルのコマンドです。</target>
        </trans-unit>
        <trans-unit id="d0ac1c8438cdf91fddee2ad5a2dd381f720a6756" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; command is available since Git 1.5.3. Users with Git 1.5.2 can look up the submodule commits in the repository and manually check them out; earlier versions won&amp;rsquo;t recognize the submodules at all.</source>
          <target state="translated">&lt;a href=&quot;git-submodule&quot;&gt;git -サブモジュール[1]&lt;/a&gt;コマンドのGit 1.5.3以降で使用可能です。Git 1.5.2を使用しているユーザーは、リポジトリでサブモジュールのコミットを検索して、手動でチェックアウトできます。以前のバージョンはサブモジュールをまったく認識しません。</target>
        </trans-unit>
        <trans-unit id="8ffc16af4f4197ccdbaaceb3fe6721dcc4562d83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt; command updates the index with information from the working directory. You generally update the index information by just specifying the filename you want to update, like so:</source>
          <target state="translated">&lt;a href=&quot;git-update-index&quot;&gt;gitの更新インデックス[1]&lt;/a&gt;コマンドは、作業ディレクトリからの情報を用いてインデックスを更新します。通常、次のように、更新するファイル名を指定するだけでインデックス情報を更新します。</target>
        </trans-unit>
        <trans-unit id="0eb5eb47b21a25e2f8cbcad63d82e49ed7b46c03" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/newren/git-filter-repo/&quot;&gt;git filter-repo&lt;/a&gt; tool is an alternative to git-filter-branch which does not suffer from these performance problems or the safety problems (mentioned below). For those with existing tooling which relies upon git-filter-branch, &lt;code&gt;git filter-repo&lt;/code&gt; also provides &lt;a href=&quot;https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely&quot;&gt;filter-lamely&lt;/a&gt;, a drop-in git-filter-branch replacement (with a few caveats). While filter-lamely suffers from all the same safety issues as git-filter-branch, it at least ameliorates the performance issues a little.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/newren/git-filter-repo/&quot;&gt;gitのフィルタ-レポ&lt;/a&gt;ツールは、これらのパフォーマンスの問題や安全性の問題（下記）に罹患していないgitのフィルタ分岐に代わるものです。git-filter-branchに依存する既存のツールを使用している場合、 &lt;code&gt;git filter-repo&lt;/code&gt; は、&lt;a href=&quot;https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely&quot;&gt;filter-lamely&lt;/a&gt;、ドロップインgit-filter-branchの代替品も提供します（いくつかの注意点があります）。filter-lamelyは、git-filter-branchと同じ安全性の問題に悩まされていますが、少なくともパフォーマンスの問題を少し改善します。</target>
        </trans-unit>
        <trans-unit id="20874526426e66810d4174f5227a378a8de7e91c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/newren/git-filter-repo/&quot;&gt;git filter-repo&lt;/a&gt; tool is an alternative to git-filter-branch which does not suffer from these performance problems or the safety problems (mentioned below). For those with existing tooling which relies upon git-filter-branch, &lt;code&gt;git repo-filter&lt;/code&gt; also provides &lt;a href=&quot;https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely&quot;&gt;filter-lamely&lt;/a&gt;, a drop-in git-filter-branch replacement (with a few caveats). While filter-lamely suffers from all the same safety issues as git-filter-branch, it at least ameliorates the performance issues a little.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/newren/git-filter-repo/&quot;&gt;gitのフィルタ-レポ&lt;/a&gt;ツールは、これらのパフォーマンスの問題や安全性の問題（下記）に罹患していないgitのフィルタ分岐に代わるものです。git-filter-branchに依存している既存のツールを使用しているユーザーのために、 &lt;code&gt;git repo-filter&lt;/code&gt; は&lt;a href=&quot;https://github.com/newren/git-filter-repo/blob/master/contrib/filter-repo-demos/filter-lamely&quot;&gt;filter-lamely&lt;/a&gt;のドロップインgit-filter-branch置換（いくつかの注意事項があります）も提供します。filter-lameはgit-filter-branchと同じ安全上の問題を抱えていますが、少なくともパフォーマンスの問題は少しは改善されます。</target>
        </trans-unit>
        <trans-unit id="ad21d56fce6cdd39ef4f92ed0708902d059eaafc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;user-manual&quot;&gt;Git User&amp;rsquo;s Manual&lt;/a&gt; provides a more comprehensive introduction to Git.</source>
          <target state="translated">&lt;a href=&quot;user-manual&quot;&gt;Gitのユーザーズマニュアルには、&lt;/a&gt; Gitリポジトリへのより包括的な紹介しています。</target>
        </trans-unit>
        <trans-unit id="89c784f1b1d17488cfe361d4581fd69d6d34303d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;user-manual#git-concepts&quot;&gt;Git concepts chapter of the user-manual&lt;/a&gt; and &lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial[7]&lt;/a&gt; both provide introductions to the underlying Git architecture.</source>
          <target state="translated">&lt;a href=&quot;user-manual#git-concepts&quot;&gt;user-manual&lt;/a&gt;と&lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial [7]&lt;/a&gt;のGitコンセプトの章はどちらも、基礎となるGitアーキテクチャの概要を提供しています。</target>
        </trans-unit>
        <trans-unit id="5f7a0a0ce9975de955e97678d53d0386ebf8b091" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; file is used to define the skip-worktree reference bitmap. When Git updates the working directory, it updates the skip-worktree bits in the index based on this file. The files matching the patterns in the file will appear in the working directory, and the rest will not.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/info/sparse-checkout&lt;/code&gt; ファイルはスキップworktree基準ビットマップを定義するために使用されます。Gitが作業ディレクトリを更新すると、このファイルに基づいて、インデックス内のskip-worktreeビットが更新されます。ファイル内のパターンに一致するファイルは作業ディレクトリに表示され、残りは表示されません。</target>
        </trans-unit>
        <trans-unit id="18927ccc4077efc9fa00280f487bf7ea52068011" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; part of the command may contain any sequence of bytes that does not contain &lt;code&gt;LF&lt;/code&gt;. The &lt;code&gt;LF&lt;/code&gt; after the command is optional. Callers may wish to process the output through a tool such as sed to remove the leading part of the line, for example:</source>
          <target state="translated">コマンドの &lt;code&gt;&amp;lt;any&amp;gt;&lt;/code&gt; 部分には、 &lt;code&gt;LF&lt;/code&gt; を含まないバイトシーケンスを含めることができます。コマンドの後の &lt;code&gt;LF&lt;/code&gt; はオプションです。呼び出し元は、sedなどのツールを使用して出力を処理して、行の先頭部分を削除することができます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="38ecaff497a30523addb0d68ac2f3ff7d62121ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; can be a mark reference (&lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt;) or the full 40-byte SHA-1 of a Git tag, commit, or tree object, preexisting or waiting to be written. The path is relative to the top level of the tree named by &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; （マーク基準とすることができる &lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt; 既存または書き込まれるのを待っている）、または完全なGitのタグの40バイトのSHA-1、コミット、またはツリーオブジェクト。パスは、 &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; で指定されたツリーの最上位に相対的です。</target>
        </trans-unit>
        <trans-unit id="df9429d81584e26f1a55e7eff78d6952383c6adf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; can be either a mark reference (&lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt;) set previously or a full 40-byte SHA-1 of a Git blob, preexisting or ready to be written.</source>
          <target state="translated">&lt;code&gt;&amp;lt;dataref&amp;gt;&lt;/code&gt; （マーク基準のいずれかとすることができる &lt;code&gt;:&amp;lt;idnum&amp;gt;&lt;/code&gt; ）セット以前に又は完全40バイトのSHA-1 Gitのブロブの、既存または書き込みの準備ができ。</target>
        </trans-unit>
        <trans-unit id="d38490ce2af2d9b14b21e7e25c13d2a1c79c408e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; part of the command may contain any of the options listed in the OPTIONS section that do not change import semantics, without the leading &lt;code&gt;--&lt;/code&gt; and is treated in the same way.</source>
          <target state="translated">&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; コマンドの一部を招くことなく、インポートの意味を変更しないOPTIONS]セクションに記載されているオプションのいずれかを含むことができ &lt;code&gt;--&lt;/code&gt; と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="73cfe0e2f7b7cccff976b7e355044194793ceedb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;pushurl&amp;gt;&lt;/code&gt; is used for pushes only. It is optional and defaults to &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;pushurl&amp;gt;&lt;/code&gt; だけプッシュするために使用されています。これはオプションであり、デフォルトは &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="226bf97de37dae89426f4bcaf2c8464c2aaac4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;rev&amp;gt;^-[&amp;lt;n&amp;gt;]&lt;/code&gt; notation includes &lt;code&gt;&amp;lt;rev&amp;gt;&lt;/code&gt; but excludes the &amp;lt;n&amp;gt;th parent (i.e. a shorthand for &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;..&amp;lt;rev&amp;gt;&lt;/code&gt;), with &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; = 1 if not given. This is typically useful for merge commits where you can just pass &lt;code&gt;&amp;lt;commit&amp;gt;^-&lt;/code&gt; to get all the commits in the branch that was merged in merge commit &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; (including &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; itself).</source>
          <target state="translated">&lt;code&gt;&amp;lt;rev&amp;gt;^-[&amp;lt;n&amp;gt;]&lt;/code&gt; の表記は &lt;code&gt;&amp;lt;rev&amp;gt;&lt;/code&gt; しかし除外&amp;lt;N&amp;gt;番目の親（すなわちA速記のための &lt;code&gt;&amp;lt;rev&amp;gt;^&amp;lt;n&amp;gt;..&amp;lt;rev&amp;gt;&lt;/code&gt; で &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; = 1の場合与えられていません。これは通常、 &lt;code&gt;&amp;lt;commit&amp;gt;^-&lt;/code&gt; を渡すだけで、マージコミット &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; にマージされたブランチ内のすべてのコミット（ &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 自体を含む）を取得できるマージコミットに役立ちます。</target>
        </trans-unit>
        <trans-unit id="382c52b269a126869d3f5e611e50db349c01a555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--&lt;/code&gt; is just a good idea when you know the rest will be filenames; it will prevent problems with a filename of, for example, &lt;code&gt;-a&lt;/code&gt;. Using &lt;code&gt;--&lt;/code&gt; is probably a good policy in scripts.</source>
          <target state="translated">&lt;code&gt;--&lt;/code&gt; あなたは残りの部分は、ファイル名になります知っているときだけで良いアイデアです。これにより、たとえば &lt;code&gt;-a&lt;/code&gt; などのファイル名の問題が回避されます。 &lt;code&gt;--&lt;/code&gt; を使用することは、スクリプトではおそらく良い方針です。</target>
        </trans-unit>
        <trans-unit id="1a7c2f7d5b7ec8386e86076d812d974232af3082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--cached&lt;/code&gt; option is used to ask a command that usually works on files in the working tree to &lt;strong&gt;only&lt;/strong&gt; work with the index. For example, &lt;code&gt;git grep&lt;/code&gt;, when used without a commit to specify from which commit to look for strings in, usually works on files in the working tree, but with the &lt;code&gt;--cached&lt;/code&gt; option, it looks for strings in the index.</source>
          <target state="translated">&lt;code&gt;--cached&lt;/code&gt; オプションは、通常の作業ツリーのファイル上で動作コマンド尋ねるために使用される&lt;strong&gt;唯一の&lt;/strong&gt;インデックスに仕事を。たとえば、 &lt;code&gt;git grep&lt;/code&gt; は、コミットなしで使用して文字列を検索するコミットを指定すると、通常は作業ツリー内のファイルで機能しますが、-- &lt;code&gt;--cached&lt;/code&gt; オプションを使用すると、インデックス内の文字列を検索します。</target>
        </trans-unit>
        <trans-unit id="93eb90d6c0bfdb16dcadbf4c72d38d80f8bf4451" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--dry-run&lt;/code&gt; option can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters (options and paths).</source>
          <target state="translated">&lt;code&gt;--dry-run&lt;/code&gt; オプションは、次のパラメータ（オプションとパス）の同じセットを与えることによって、コミットするための上記のいずれかに含まれているものの概要を得るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="45e26263ba79c46b47e35a4fe67d4d8f33b37e0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--env-filter&lt;/code&gt; option can be used to modify committer and/or author identity. For example, if you found out that your commits have the wrong identity due to a misconfigured user.email, you can make a correction, before publishing the project, like this:</source>
          <target state="translated">&lt;code&gt;--env-filter&lt;/code&gt; オプションは、コミッター、および/または著者のIDを変更するために使用することができます。たとえば、user.emailの設定が誤っているためにコミットのIDが間違っていることがわかった場合は、プロジェクトを公開する前に、次のように修正できます。</target>
        </trans-unit>
        <trans-unit id="b4b7635118d0a90fb277012f2d96d5181b61e4f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--index&lt;/code&gt; option is used to ask a command that usually works on files in the working tree to &lt;strong&gt;also&lt;/strong&gt; affect the index. For example, &lt;code&gt;git stash apply&lt;/code&gt; usually merges changes recorded in a stash entry to the working tree, but with the &lt;code&gt;--index&lt;/code&gt; option, it also merges changes to the index as well.</source>
          <target state="translated">&lt;code&gt;--index&lt;/code&gt; オプションは通常する作業ツリーのファイル上で動作するコマンド尋ねるために使用されて&lt;strong&gt;も&lt;/strong&gt;、インデックスに影響を及ぼします。たとえば、 &lt;code&gt;git stash apply&lt;/code&gt; は通常、stashエントリに記録された変更を作業ツリーに &lt;code&gt;--index&lt;/code&gt; ますが、-indexオプションを使用すると、変更もインデックスにマージされます。</target>
        </trans-unit>
        <trans-unit id="f5e672ca7275921f27bc57abfee8498efa38d837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--numstat&lt;/code&gt; option gives the diffstat(1) information but is designed for easier machine consumption. An entry in &lt;code&gt;--numstat&lt;/code&gt; output looks like this:</source>
          <target state="translated">&lt;code&gt;--numstat&lt;/code&gt; オプションはdiffstat（1）情報を提供しますが、簡単に機械の消費のために設計されています。 &lt;code&gt;--numstat&lt;/code&gt; 出力のエントリは次のようになります。</target>
        </trans-unit>
        <trans-unit id="824224d8413c92cfa07b10a7d5f109653a254225" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--patch&lt;/code&gt; option implies &lt;code&gt;--keep-index&lt;/code&gt;. You can use &lt;code&gt;--no-keep-index&lt;/code&gt; to override this.</source>
          <target state="translated">&lt;code&gt;--patch&lt;/code&gt; オプションは意味 &lt;code&gt;--keep-index&lt;/code&gt; 。 &lt;code&gt;--no-keep-index&lt;/code&gt; を使用してこれを上書きできます。</target>
        </trans-unit>
        <trans-unit id="cd53bf0606653a9e38fc2f67928f722d519b8437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--prune-tags&lt;/code&gt; option is equivalent to having &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; declared in the refspecs of the remote. This can lead to some seemingly strange interactions:</source>
          <target state="translated">&lt;code&gt;--prune-tags&lt;/code&gt; オプションが持つと同等です &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; リモートのrefspecsで宣言されました。これにより、一見奇妙な相互作用が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="eedbb7a82985c4671f5041c09553972a9225fc17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--rebase-merges&lt;/code&gt; mode is similar in spirit to the deprecated &lt;code&gt;--preserve-merges&lt;/code&gt; but works with interactive rebases, where commits can be reordered, inserted and dropped at will.</source>
          <target state="translated">&lt;code&gt;--rebase-merges&lt;/code&gt; モードは、非推奨と精神に類似している &lt;code&gt;--preserve-merges&lt;/code&gt; が、コミットは、並べ替え挿入及び随意にドロップできるインタラクティブリベース、で動作します。</target>
        </trans-unit>
        <trans-unit id="8061f1189be4b513311a10997c4e6fc449baeaf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--simplify-by-decoration&lt;/code&gt; option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line. All other commits are marked as TREESAME (subject to be simplified away).</source>
          <target state="translated">&lt;code&gt;--simplify-by-decoration&lt;/code&gt; オプションを使用すると、タグによって参照されていないコミットを省略することにより、歴史のトポロジーの唯一の全体像を表示することができます。コミットは、（1）それらがタグによって参照されている場合、または（2）コマンドラインで指定されたパスの内容が変更されている場合、！TREESAME（つまり、上記の履歴簡略化ルールの後に保持される）としてマークされます。他のすべてのコミットはTREESAMEとしてマークされます（簡略化される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="16b8753fdc735c82bb8e4b4e3197e33fe132b018" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--summary&lt;/code&gt; option describes newly added, deleted, renamed and copied files. The &lt;code&gt;--stat&lt;/code&gt; option adds diffstat(1) graph to the output. These options can be combined with other options, such as &lt;code&gt;-p&lt;/code&gt;, and are meant for human consumption.</source>
          <target state="translated">&lt;code&gt;--summary&lt;/code&gt; オプションが新たに追加、削除、ファイルの名前を変更してコピーについて説明します。 &lt;code&gt;--stat&lt;/code&gt; オプションは、出力にdiffstat（1）グラフが追加されます。これらのオプションは、 &lt;code&gt;-p&lt;/code&gt; などの他のオプションと組み合わせることができ、人間が使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="629d4eddaa3e0be951f311129548061d6a37661e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--threads&lt;/code&gt; option (and the grep.threads configuration) will be ignored when &lt;code&gt;--open-files-in-pager&lt;/code&gt; is used, forcing a single-threaded execution.</source>
          <target state="translated">&lt;code&gt;--threads&lt;/code&gt; の際にオプション（およびgrep.threads構成）は無視されます &lt;code&gt;--open-files-in-pager&lt;/code&gt; シングルスレッドの実行を強制的に、使用されています。</target>
        </trans-unit>
        <trans-unit id="2fb3a538afbb18a8ca912f0cecf9a31cb6701775" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; option instructs &lt;code&gt;git config&lt;/code&gt; to ensure that incoming and outgoing values are canonicalize-able under the given &amp;lt;type&amp;gt;. If no &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; is given, no canonicalization will be performed. Callers may unset an existing &lt;code&gt;--type&lt;/code&gt; specifier with &lt;code&gt;--no-type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; オプションを指示 &lt;code&gt;git config&lt;/code&gt; 着信および発信の値が与えられた&amp;lt;タイプ&amp;gt;下カノニカル化-できることを確実にします。何場合 &lt;code&gt;--type=&amp;lt;type&amp;gt;&lt;/code&gt; 与えられていない、何の正規化は行われません。呼び出し元は、既存の &lt;code&gt;--type&lt;/code&gt; 指定子を &lt;code&gt;--no-type&lt;/code&gt; で設定解除できます。</target>
        </trans-unit>
        <trans-unit id="0c9422891d35819a54a8ef0ba6d7016d122547ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-M&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt; options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</source>
          <target state="translated">&lt;code&gt;-M&lt;/code&gt; および &lt;code&gt;-C&lt;/code&gt; オプションは、ターゲットコピー/ N電位リネームの数である処理時間はO（n ^ 2）を必要とします。このオプションは、名前変更/コピーターゲットの数が指定した数を超えた場合に、名前変更/コピー検出が実行されないようにします。</target>
        </trans-unit>
        <trans-unit id="73fff0c26b859dbfe915afb814a50fa7bc541c41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-C&lt;/code&gt; options have the exact same semantics as &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt;, except instead of the branch being renamed it along with its config and reflog will be copied to a new name.</source>
          <target state="translated">&lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-C&lt;/code&gt; オプションはまったく同じ意味論持ち &lt;code&gt;-m&lt;/code&gt; と &lt;code&gt;-M&lt;/code&gt; を新しい名前にコピーされますその設定とREFLOGと一緒にそれを名前を変更した分岐されるのではなく、場合を除き、。</target>
        </trans-unit>
        <trans-unit id="89a7df63322c3f15984d17c0e2db0a5d71e95aa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-m&lt;/code&gt; and &lt;code&gt;-F&lt;/code&gt; options can be given any number of times, in any order. The commit log message will be composed in the order in which the options are given.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; と &lt;code&gt;-F&lt;/code&gt; オプションは任意の順序で、任意の回数を与えることができます。コミットログメッセージは、オプションが指定された順序で作成されます。</target>
        </trans-unit>
        <trans-unit id="f4502e6a26132411ed2e9fd1c43849a487e5e5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-m&lt;/code&gt; option is mutually exclusive with &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt;, and &lt;code&gt;-F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; オプションは相互に排他的である &lt;code&gt;-c&lt;/code&gt; 、 &lt;code&gt;-C&lt;/code&gt; 、および &lt;code&gt;-F&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38779d2c15d6e090718b82e6af2f8c359ec976d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.git-credentials&lt;/code&gt; file is stored in plaintext. Each credential is stored on its own line as a URL like:</source>
          <target state="translated">&lt;code&gt;.git-credentials&lt;/code&gt; ファイルが平文で保存されています。各資格情報は、次のようなURLとして独自の行に保存されます。</target>
        </trans-unit>
        <trans-unit id="905c63d14654cde00625cb5e82c7038bc34ea94e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitmodules&lt;/code&gt; file inside the superproject. A project usually uses this file to suggest defaults for the upstream collection of repositories for the mapping that is required between a submodule&amp;rsquo;s name and its path.</source>
          <target state="translated">スーパー &lt;code&gt;.gitmodules&lt;/code&gt; 内の.gitmodulesファイル。プロジェクトは通常、このファイルを使用して、サブモジュールの名前とそのパスの間に必要なマッピングのために、リポジトリの上流コレクションのデフォルトを提案します。</target>
        </trans-unit>
        <trans-unit id="0bb4fdb786947245a90430b5697a0e9422df1d21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.gitmodules&lt;/code&gt; file, located in the top-level directory of a Git working tree, is a text file with a syntax matching the requirements of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; の Gitの作業ツリーの最上位ディレクトリにあるファイルは、要件に一致する構文を使用してテキストファイルで&lt;a href=&quot;git-config&quot;&gt;のgit-configと[1] &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d5324d8792f18dd9ac59490b336e09b1bd43353e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.mailmap&lt;/code&gt; feature is used to coalesce together commits by the same person in the shortlog, where their name and/or email address was spelled differently.</source>
          <target state="translated">&lt;code&gt;.mailmap&lt;/code&gt; 機能は、自分の名前および/または電子メールアドレスが異なって綴られたshortlogで同じ人によって合体一緒にコミットするために使用されます。</target>
        </trans-unit>
        <trans-unit id="73c3a5a96a8a6a48d412facd438733454a4a63a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; ref is set to point at the commit that introduced the change that is difficult to apply.</source>
          <target state="translated">&lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; の refは適用することは困難であるの変化を導入することをコミット時点に設定されています。</target>
        </trans-unit>
        <trans-unit id="df208c183263acdaf73c0a978db9f5c35380bc6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; environment variables and the &lt;code&gt;--date&lt;/code&gt; option support the following date formats:</source>
          <target state="translated">&lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; の環境変数と &lt;code&gt;--date&lt;/code&gt; オプションのサポート次の日付形式：</target>
        </trans-unit>
        <trans-unit id="ad08232602558aa9979e8ccc7bf4df9612b12ec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; environment variables support the following date formats:</source>
          <target state="translated">&lt;code&gt;GIT_AUTHOR_DATE&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_DATE&lt;/code&gt; の環境変数は次の日付形式をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9c24e5e1da9f8726ec7abe4516a017b9495c2fe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_HTTP_EXPORT_ALL&lt;/code&gt; environmental variable may be passed to &lt;code&gt;git-http-backend&lt;/code&gt; to bypass the check for the &quot;git-daemon-export-ok&quot; file in each repository before allowing export of that repository.</source>
          <target state="translated">&lt;code&gt;GIT_HTTP_EXPORT_ALL&lt;/code&gt; 環境変数をに渡すことができる &lt;code&gt;git-http-backend&lt;/code&gt; そのリポジトリのエクスポートを許可する前に、各リポジトリに「gitのデーモン・輸出-OK」ファイルのチェックのバイパスへ。</target>
        </trans-unit>
        <trans-unit id="387cfeb550226cfd9e601b1b72a83920c3f36040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_HTTP_MAX_REQUEST_BUFFER&lt;/code&gt; environment variable (or the &lt;code&gt;http.maxRequestBuffer&lt;/code&gt; config variable) may be set to change the largest ref negotiation request that git will handle during a fetch; any fetch requiring a larger buffer will not succeed. This value should not normally need to be changed, but may be helpful if you are fetching from a repository with an extremely large number of refs. The value can be specified with a unit (e.g., &lt;code&gt;100M&lt;/code&gt; for 100 megabytes). The default is 10 megabytes.</source>
          <target state="translated">&lt;code&gt;GIT_HTTP_MAX_REQUEST_BUFFER&lt;/code&gt; の環境変数（または &lt;code&gt;http.maxRequestBuffer&lt;/code&gt; 設定変数）はgitのフェッチ中に処理することを最大のrefのネゴシエーション要求を変更するように設定することができます。より大きなバッファを必要とするフェッチは成功しません。通常、この値を変更する必要はありませんが、非常に多数の参照を持つリポジトリからフェッチする場合に役立つことがあります。値は単位で指定できます（100 MBの場合は &lt;code&gt;100M&lt;/code&gt; など）。デフォルトは10メガバイトです。</target>
        </trans-unit>
        <trans-unit id="166eca4501cd90cd3b21f8df969c5ee397d12242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_NO_REPLACE_OBJECTS&lt;/code&gt; environment variable can be set to achieve the same effect as the &lt;code&gt;--no-replace-objects&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;GIT_NO_REPLACE_OBJECTS&lt;/code&gt; の環境変数は、同じ効果を達成するように設定することができ &lt;code&gt;--no-replace-objects&lt;/code&gt; オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="8bee9745a8d6377da5f35089625008b4042f0f35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GIT_PUSH_CERT*&lt;/code&gt; environment variables can be inspected, just as in &lt;code&gt;pre-receive&lt;/code&gt; hook, after accepting a signed push.</source>
          <target state="translated">&lt;code&gt;GIT_PUSH_CERT*&lt;/code&gt; 環境変数は、ちょうどのように、検査することができる &lt;code&gt;pre-receive&lt;/code&gt; 署名プッシュを受け入れた後、フック。</target>
        </trans-unit>
        <trans-unit id="8bc6550bd201f7a8ce8611abf35f278e4b89d03c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HEAD&lt;/code&gt; pointer stays the same.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; のポインタは同じままです。</target>
        </trans-unit>
        <trans-unit id="652c0cf20ffd72216eb399a1f559569365b85933" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after &lt;code&gt;&amp;lt;delim&amp;gt; LF&lt;/code&gt; is optional (it used to be required).</source>
          <target state="translated">&lt;code&gt;LF&lt;/code&gt; 後 &lt;code&gt;&amp;lt;delim&amp;gt; LF&lt;/code&gt; （それが必要とされるために使用される）は任意です。</target>
        </trans-unit>
        <trans-unit id="c1bff9f88ec1fe482fd273291dfad27de492749b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; is optional (it used to be required) but recommended. Always including it makes debugging a fast-import stream easier as the next command always starts in column 0 of the next line, even if &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; did not end with an &lt;code&gt;LF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; の後の &lt;code&gt;LF&lt;/code&gt; はオプションです（以前は必須でした）が推奨されます。 &lt;code&gt;&amp;lt;raw&amp;gt;&lt;/code&gt; が &lt;code&gt;LF&lt;/code&gt; で終わっていなくても、次のコマンドは常に次の行の列0から始まるため、常に含めることで、高速インポートストリームのデバッグが容易になります。</target>
        </trans-unit>
        <trans-unit id="ec7a854b1a4c70ca562f0584186eed412906ec8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after the command is optional (it used to be required).</source>
          <target state="translated">コマンドの後の &lt;code&gt;LF&lt;/code&gt; はオプションです（以前は必須でした）。</target>
        </trans-unit>
        <trans-unit id="9a136595a2c2895a25e4571b5fe242dd49c2174e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LF&lt;/code&gt; after the command is optional (it used to be required). Note that for reasons of backward compatibility, if the commit ends with a &lt;code&gt;data&lt;/code&gt; command (i.e. it has no &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;filemodify&lt;/code&gt;, &lt;code&gt;filedelete&lt;/code&gt;, &lt;code&gt;filecopy&lt;/code&gt;, &lt;code&gt;filerename&lt;/code&gt;, &lt;code&gt;filedeleteall&lt;/code&gt; or &lt;code&gt;notemodify&lt;/code&gt; commands) then two &lt;code&gt;LF&lt;/code&gt; commands may appear at the end of the command instead of just one.</source>
          <target state="translated">コマンドの後の &lt;code&gt;LF&lt;/code&gt; はオプションです（以前は必須でした）。下位互換性の理由から、コミットが &lt;code&gt;data&lt;/code&gt; コマンドで終了する場合（つまり、 &lt;code&gt;from&lt;/code&gt; 、 &lt;code&gt;merge&lt;/code&gt; 、 &lt;code&gt;filemodify&lt;/code&gt; 、 &lt;code&gt;filedelete&lt;/code&gt; 、 &lt;code&gt;filecopy&lt;/code&gt; 、 &lt;code&gt;filerename&lt;/code&gt; 、 &lt;code&gt;filedeleteall&lt;/code&gt; 、または &lt;code&gt;notemodify&lt;/code&gt; コマンドがない場合）、コマンドの最後に2つの &lt;code&gt;LF&lt;/code&gt; コマンドが表示される場合があります。 1つではなく。</target>
        </trans-unit>
        <trans-unit id="6afb1837ee3e8f65249dcb4905156711b603dd19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MERGE_HEAD&lt;/code&gt; ref is set to point to the other branch head.</source>
          <target state="translated">&lt;code&gt;MERGE_HEAD&lt;/code&gt; の refは、他のブランチヘッドを指すように設定されています。</target>
        </trans-unit>
        <trans-unit id="4dcd07a8427d3cae73e7340717a2be5da78b122e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^0&lt;/code&gt; suffix is necessary as fast-import does not permit a branch to start from itself, and the branch is created in memory before the &lt;code&gt;from&lt;/code&gt; command is even read from the input. Adding &lt;code&gt;^0&lt;/code&gt; will force fast-import to resolve the commit through Git&amp;rsquo;s revision parsing library, rather than its internal branch table, thereby loading in the existing value of the branch.</source>
          <target state="translated">&lt;code&gt;^0&lt;/code&gt; 高速インポートは、それ自体から開始する枝を許可しない、と分岐が前にメモリ内に作成されるようサフィックスが必要です &lt;code&gt;from&lt;/code&gt; 、コマンドも、入力から読み込まれます。 &lt;code&gt;^0&lt;/code&gt; を追加すると、内部インポートテーブルではなく、Gitのリビジョン解析ライブラリを介して高速インポートがコミットを解決し、ブランチの既存の値をロードします。</target>
        </trans-unit>
        <trans-unit id="675155c0bc0c9682b02ea7dc72c6fe717f8d57df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^r1 r2&lt;/code&gt; set operation appears so often that there is a shorthand for it. When you have two commits &lt;code&gt;r1&lt;/code&gt; and &lt;code&gt;r2&lt;/code&gt; (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by &lt;code&gt;^r1 r2&lt;/code&gt; and it can be written as &lt;code&gt;r1..r2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^r1 r2&lt;/code&gt; 集合演算は、それほど頻繁にそれのための速記があることが表示されます。2つのコミット &lt;code&gt;r1&lt;/code&gt; と &lt;code&gt;r2&lt;/code&gt; （上記の改訂の説明で説明されている構文に従って名前が付けられている）がある場合、 &lt;code&gt;^r1 r2&lt;/code&gt; によってr1から到達可能なコミットを除いて、r2から到達可能なコミットを要求でき、 &lt;code&gt;r1..r2&lt;/code&gt; として書き込むことができます。 .r2。</target>
        </trans-unit>
        <trans-unit id="c300333c575f956c2060e4236a825e5a15abf118" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;a/&lt;/code&gt; and &lt;code&gt;b/&lt;/code&gt; filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, &lt;code&gt;/dev/null&lt;/code&gt; is &lt;code&gt;not&lt;/code&gt; used in place of the &lt;code&gt;a/&lt;/code&gt; or &lt;code&gt;b/&lt;/code&gt; filenames.</source>
          <target state="translated">&lt;code&gt;a/&lt;/code&gt; 及び &lt;code&gt;b/&lt;/code&gt; 名前変更/コピーが関与しなければ、ファイル名は同じです。特に、作成または削除の場合でも、 &lt;code&gt;a/&lt;/code&gt; または &lt;code&gt;b/&lt;/code&gt; ファイル名の代わりに &lt;code&gt;/dev/null&lt;/code&gt; は使用され &lt;code&gt;not&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49bd789d4ba6e2342461dc4954bea6426d4910cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;author.name&lt;/code&gt; and &lt;code&gt;committer.name&lt;/code&gt; and their corresponding email options override &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; if set and are overridden themselves by the environment variables.</source>
          <target state="translated">&lt;code&gt;author.name&lt;/code&gt; と &lt;code&gt;committer.name&lt;/code&gt; とそれに対応する電子メールオプションのオーバーライド &lt;code&gt;user.name&lt;/code&gt; と &lt;code&gt;user.email&lt;/code&gt; 設定されている場合や、環境変数によって自分自身を上書きしています。</target>
        </trans-unit>
        <trans-unit id="eab33dae66d0744b7d6024e6ba0526d3cbdb099d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;base commit&lt;/code&gt; is shown as &quot;base-commit: &quot; followed by the 40-hex of the commit object name. A &lt;code&gt;prerequisite patch&lt;/code&gt; is shown as &quot;prerequisite-patch-id: &quot; followed by the 40-hex &lt;code&gt;patch id&lt;/code&gt;, which can be obtained by passing the patch through the &lt;code&gt;git patch-id --stable&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;base commit&lt;/code&gt; コミットオブジェクト名の40進続く：「ベースコミット」として示されています。 &lt;code&gt;prerequisite patch&lt;/code&gt; 40進続く：「前提パッチ-ID」として示されている &lt;code&gt;patch id&lt;/code&gt; を介してパッチを通過させることによって得ることができ、 &lt;code&gt;git patch-id --stable&lt;/code&gt; コマンド。</target>
        </trans-unit>
        <trans-unit id="4310c66d08d5e3db5f29a0976c449ecfedbc1c27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;category&lt;/code&gt; field may be used in a future enhancement to do category-based filtering.</source>
          <target state="translated">&lt;code&gt;category&lt;/code&gt; フィールドは、カテゴリベースのフィルタリングを行うために、将来の拡張に使用することができます。</target>
        </trans-unit>
        <trans-unit id="957c03f80393df2f84f209da8b3d5d5b6c66e351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;commit walkers&lt;/code&gt; are sometimes also called &lt;code&gt;dumb transports&lt;/code&gt;, because they do not require any Git aware smart server like Git Native transport does. Any stock HTTP server that does not even support directory index would suffice. But you must prepare your repository with &lt;code&gt;git update-server-info&lt;/code&gt; to help dumb transport downloaders.</source>
          <target state="translated">&lt;code&gt;commit walkers&lt;/code&gt; 時々も呼ばれている &lt;code&gt;dumb transports&lt;/code&gt; Gitのネイティブトランスポートがないように、彼らは任意のGitの意識スマートサーバーを必要としないので、。ディレクトリインデックスをサポートしていない標準のHTTPサーバーで十分です。ただし、トランスポートダウンローダーの機能を低下させるには、 &lt;code&gt;git update-server-info&lt;/code&gt; を使用してリポジトリを準備する必要があります。</target>
        </trans-unit>
        <trans-unit id="57e6853fd5f38ab3b9956fdbd165ff0d3edf841f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;commit-graph&lt;/code&gt; job updates the &lt;code&gt;commit-graph&lt;/code&gt; files incrementally, then verifies that the written data is correct. The incremental write is safe to run alongside concurrent Git processes since it will not expire &lt;code&gt;.graph&lt;/code&gt; files that were in the previous &lt;code&gt;commit-graph-chain&lt;/code&gt; file. They will be deleted by a later run based on the expiration delay.</source>
          <target state="translated">&lt;code&gt;commit-graph&lt;/code&gt; ジョブが更新 &lt;code&gt;commit-graph&lt;/code&gt; 書き込まれたデータが正しいことを確認し、その後、漸増ファイルを。インクリメンタル書き込みは、前の &lt;code&gt;commit-graph-chain&lt;/code&gt; ファイルにあった &lt;code&gt;.graph&lt;/code&gt; ファイルを期限切れにしないため、同時Gitプロセスと一緒に実行しても安全です。それらは、有効期限の遅延に基づいて、後の実行で削除されます。</target>
        </trans-unit>
        <trans-unit id="16292719b3497b67052d324a828a5bf607c10cb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;committer&lt;/code&gt; command indicates who made this commit, and when they made it.</source>
          <target state="translated">&lt;code&gt;committer&lt;/code&gt; コマンドは、このコミット作られ、そして、彼らはそれを作ったとき、誰を示しています。</target>
        </trans-unit>
        <trans-unit id="7e0ffba56fb259ff8ccb9999d0c02587815b0675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable allows you to define what &lt;code&gt;diff&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; should consider whitespace errors for all paths in the project (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). This attribute gives you finer control per path.</source>
          <target state="translated">&lt;code&gt;core.whitespace&lt;/code&gt; の設定変数は、あなたは何を定義することを可能にする &lt;code&gt;diff&lt;/code&gt; と &lt;code&gt;apply&lt;/code&gt; （参照プロジェクト内のすべてのパスのための空白の誤差を考慮すべきで&lt;a href=&quot;git-config&quot;&gt;はgit-config設定[1] &lt;/a&gt;）。この属性により、パスごとに細かく制御できます。</target>
        </trans-unit>
        <trans-unit id="87733ffb501fc648521ef5d05fe00a159aefa171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;credential.helper&lt;/code&gt; configuration option can also take an arbitrary shell command that produces the credential protocol on standard output. This is useful when passing credentials into a container, for example.</source>
          <target state="translated">&lt;code&gt;credential.helper&lt;/code&gt; の構成オプションは、標準出力に資格プロトコルを生成する任意のシェルコマンドを取ることができます。これは、たとえば、資格情報をコンテナに渡すときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c4cf312c5837f50305786c4fff7bd921da0df1e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; command following &lt;code&gt;committer&lt;/code&gt; must supply the commit message (see below for &lt;code&gt;data&lt;/code&gt; command syntax). To import an empty commit message use a 0 length data. Commit messages are free-form and are not interpreted by Git. Currently they must be encoded in UTF-8, as fast-import does not permit other encodings to be specified.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 次のコマンド &lt;code&gt;committer&lt;/code&gt; メッセージ（下記参照コミット供給しなければならない &lt;code&gt;data&lt;/code&gt; コマンドの構文を）。空のコミットメッセージをインポートするには、長さ0のデータを使用します。コミットメッセージは自由形式であり、Gitによって解釈されません。現在、高速インポートでは他のエンコーディングを指定できないため、UTF-8でエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="fe1dcaff1f205cb554cce0caa7f556f5b3750431" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; command following &lt;code&gt;tagger&lt;/code&gt; must supply the annotated tag message (see below for &lt;code&gt;data&lt;/code&gt; command syntax). To import an empty tag message use a 0 length data. Tag messages are free-form and are not interpreted by Git. Currently they must be encoded in UTF-8, as fast-import does not permit other encodings to be specified.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 次のコマンド &lt;code&gt;tagger&lt;/code&gt; （下記参照注釈付きタグ・メッセージを供給しなければならない &lt;code&gt;data&lt;/code&gt; コマンド構文）。空のタグメッセージをインポートするには、長さ0のデータを使用します。タグメッセージは自由形式で、Gitによって解釈されません。現在、高速インポートでは他のエンコーディングを指定できないため、UTF-8でエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="463a929e2c19b7bbf028008ad9aa5a5763e6cf66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;export-marks&lt;/code&gt; and &lt;code&gt;import-marks&lt;/code&gt; capabilities, if specified, affect this command in so far as they are passed on to &lt;code&gt;git fast-export&lt;/code&gt;, which then will load/store a table of marks for local objects. This can be used to implement for incremental operations.</source>
          <target state="translated">&lt;code&gt;export-marks&lt;/code&gt; および &lt;code&gt;import-marks&lt;/code&gt; する上での機能は、指定された場合、これまでのところ、彼らが渡されるように、このコマンドには影響を与え &lt;code&gt;git fast-export&lt;/code&gt; その後、ロード/ローカル・オブジェクトのためのマークのテーブルを格納します。これは、増分操作の実装に使用できます。</target>
        </trans-unit>
        <trans-unit id="b29369cc7c91f799f3a98b04ce067ccee4eaff48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra-info&lt;/code&gt; is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any &lt;code&gt;extra-info&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extra-info&lt;/code&gt; 再度コマンドに依存します。空の場合、先行するSPも省略されます。現在、コマンドは &lt;code&gt;extra-info&lt;/code&gt; 渡しません。</target>
        </trans-unit>
        <trans-unit id="42c3cfeeb6fb7d3b809e4b2424ab05b633a62a10" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with &lt;code&gt;%n&lt;/code&gt; instead of &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; の形式は、あなたが示ししたい情報を指定することができます。これは、 &lt;code&gt;\n&lt;/code&gt; ではなく &lt;code&gt;%n&lt;/code&gt; を使用して改行を取得することを除いて、printf形式と少し似ています。</target>
        </trans-unit>
        <trans-unit id="6d12446e6ba50613ffa6591e4d86ab902d5b116f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; command is the same as in the &lt;code&gt;commit&lt;/code&gt; command; see above for details.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; コマンドは同様である &lt;code&gt;commit&lt;/code&gt; コマンド。詳細は上記をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d9bc1ff5b134d7635edcea3cd4e631a291483167" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt; command is used to specify the commit to initialize this branch from. This revision will be the first ancestor of the new commit. The state of the tree built at this commit will begin with the state at the &lt;code&gt;from&lt;/code&gt; commit, and be altered by the content modifications in this commit.</source>
          <target state="translated">&lt;code&gt;from&lt;/code&gt; コマンドがからこのブランチを初期化するためにコミットを指定するために使用されます。このリビジョンは、新しいコミットの最初の祖先になります。このコミットで構築されたツリーの状態は、 &lt;code&gt;from&lt;/code&gt; コミットの状態から始まり、このコミットの内容変更によって変更されます。</target>
        </trans-unit>
        <trans-unit id="75dab416c6ca16533650ccb3bdbb6f1c8c80e31e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git add&lt;/code&gt; command will not add ignored files by default. If any ignored files were explicitly specified on the command line, &lt;code&gt;git add&lt;/code&gt; will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored. The &lt;code&gt;git add&lt;/code&gt; command can be used to add ignored files with the &lt;code&gt;-f&lt;/code&gt; (force) option.</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; コマンドは、デフォルトで無視されたファイルを追加しません。無視されたファイルがコマンドラインで明示的に指定されている場合、 &lt;code&gt;git add&lt;/code&gt; は無視されたファイルのリストで失敗します。ディレクトリの再帰によって到達した無視されたファイル、またはGitによって実行されたファイル名のグロビング（シェルの前にグロブを引用）は、黙って無視されます。 &lt;code&gt;git add&lt;/code&gt; コマンドは無視してファイルを追加するために使用することができ &lt;code&gt;-f&lt;/code&gt; （force）オプション。</target>
        </trans-unit>
        <trans-unit id="9bd7293224a598d82d7fb9b059bf233156e9f91a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git bundle&lt;/code&gt; command packages objects and references in an archive at the originating machine, which can then be imported into another repository using &lt;code&gt;git fetch&lt;/code&gt;, &lt;code&gt;git pull&lt;/code&gt;, or &lt;code&gt;git clone&lt;/code&gt;, after moving the archive by some means (e.g., by sneakernet).</source>
          <target state="translated">&lt;code&gt;git bundle&lt;/code&gt; し、別の使用してリポジトリにインポートすることができ、発信機でアーカイブ内のコマンドパッケージオブジェクトと参照、 &lt;code&gt;git fetch&lt;/code&gt; 、 &lt;code&gt;git pull&lt;/code&gt; 、または &lt;code&gt;git clone&lt;/code&gt; （スニーカーネットによって、例えば）何らかの手段でアーカイブを移動した後、。</target>
        </trans-unit>
        <trans-unit id="3d9620664b0c9d56c3287a812c3ff6b6d1c8717f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git diff-*&lt;/code&gt; family works by first comparing two sets of files:</source>
          <target state="translated">&lt;code&gt;git diff-*&lt;/code&gt; 最初のファイルの2セットを比較することにより、家族の作品：</target>
        </trans-unit>
        <trans-unit id="597ca1f538bf6e2f60b9e6f9e15d7129efb080fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git fetch&lt;/code&gt; operation always stores the head of the last fetched branch in FETCH_HEAD. For example, if you run &lt;code&gt;git fetch&lt;/code&gt; without specifying a local branch as the target of the operation</source>
          <target state="translated">&lt;code&gt;git fetch&lt;/code&gt; 操作が常にFETCH_HEADの最後のフェッチされた枝の頭を格納します。たとえば、ローカルブランチを操作のターゲットとして指定せずに &lt;code&gt;git fetch&lt;/code&gt; を実行した場合</target>
        </trans-unit>
        <trans-unit id="f809c0db2fabe1b716a044f1ae315c3eafe27e59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git fmt-merge-msg&lt;/code&gt; command can be used to give a good default for automated &lt;code&gt;git merge&lt;/code&gt; invocations. The automated message can include the branch description.</source>
          <target state="translated">&lt;code&gt;git fmt-merge-msg&lt;/code&gt; コマンドは、自動化のための適切なデフォルト与えるために使用することができます &lt;code&gt;git merge&lt;/code&gt; 呼び出しを。自動メッセージには、ブランチの説明を含めることができます。</target>
        </trans-unit>
        <trans-unit id="dae50540309298598631c32bc4ba09615f81ee1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git gc --auto&lt;/code&gt; command will run the &lt;code&gt;pre-auto-gc&lt;/code&gt; hook. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;git gc --auto&lt;/code&gt; コマンドが実行され &lt;code&gt;pre-auto-gc&lt;/code&gt; フックを。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cfc7fc175318cd6dff60f69f9572984dc7656815" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git grep&lt;/code&gt; command can search for strings in any version of your project, so</source>
          <target state="translated">&lt;code&gt;git grep&lt;/code&gt; ののコマンドは、そう、あなたのプロジェクトのいずれかのバージョンの文字列を検索することができます</target>
        </trans-unit>
        <trans-unit id="10370106ed757f0fcfa619078db112558b3f4b4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git log&lt;/code&gt; command has a weakness: it must present commits in a list. When the history has lines of development that diverged and then merged back together, the order in which &lt;code&gt;git log&lt;/code&gt; presents those commits is meaningless.</source>
          <target state="translated">&lt;code&gt;git log&lt;/code&gt; コマンドは弱点があります。それは、リスト内のコミットを提示しなければなりません。履歴に分岐してから再びマージされた開発ラインがある場合、 &lt;code&gt;git log&lt;/code&gt; がそれらのコミットを表示する順序は意味がありません。</target>
        </trans-unit>
        <trans-unit id="5c380959946a83eda94454025f0a10c3629cc163" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git maintenance&lt;/code&gt; command is designed to simplify the repository maintenance patterns while minimizing user wait time during Git commands. A variety of configuration options are available to allow customizing this process. The default maintenance options focus on operations that complete quickly, even on large repositories.</source>
          <target state="translated">&lt;code&gt;git maintenance&lt;/code&gt; コマンドがGitのコマンド中にユーザの待ち時間を最小限に抑えながら、リポジトリの保守パターンを簡素化するために設計されています。このプロセスをカスタマイズできるように、さまざまな構成オプションを利用できます。デフォルトのメンテナンスオプションは、大規模なリポジトリであっても、迅速に完了する操作に重点を置いています。</target>
        </trans-unit>
        <trans-unit id="00ff38dfc73bcfa62c1ff676ccda2e6392a71376" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git maintenance&lt;/code&gt; command provides flexibility for how to optimize the Git repository.</source>
          <target state="translated">&lt;code&gt;git maintenance&lt;/code&gt; コマンドがGitリポジトリを最適化する方法のための柔軟性を提供します。</target>
        </trans-unit>
        <trans-unit id="2918fcbf92a1ba7da67f920488e3f1571c6c776d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git pull&lt;/code&gt; command can also be given &lt;code&gt;.&lt;/code&gt; as the &quot;remote&quot; repository, in which case it just merges in a branch from the current repository; so the commands</source>
          <target state="translated">&lt;code&gt;git pull&lt;/code&gt; コマンドも与えることができます &lt;code&gt;.&lt;/code&gt; 「リモート」リポジトリとして。この場合、現在のリポジトリからのブランチにマージされます。だからコマンド</target>
        </trans-unit>
        <trans-unit id="ae6be494d942d11be1fef84bf75e14340e42ba70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git sh-setup&lt;/code&gt; scriptlet is designed to be sourced (using &lt;code&gt;.&lt;/code&gt;) by other shell scripts to set up some variables pointing at the normal Git directories and a few helper shell functions.</source>
          <target state="translated">&lt;code&gt;git sh-setup&lt;/code&gt; スクリプトレットは、（使用して供給されるように設計されている &lt;code&gt;.&lt;/code&gt; 通常のGitのディレクトリといくつかのヘルパーシェル関数を指していくつかの変数を設定するには、他のシェルスクリプトによって）。</target>
        </trans-unit>
        <trans-unit id="b8d00251834fb59fdb3aac3b6b6d2fd6617d8c54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git status&lt;/code&gt; command can be used to obtain a summary of which files have changes that are staged for the next commit.</source>
          <target state="translated">&lt;code&gt;git status&lt;/code&gt; コマンドは、ファイルは次のコミットのために上演された変更を持っているの概要を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1114dd8f20b27292636eee44dbca10b695a7e192" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git submodule add &amp;lt;repo&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt; command does a couple of things:</source>
          <target state="translated">&lt;code&gt;git submodule add &amp;lt;repo&amp;gt; &amp;lt;path&amp;gt;&lt;/code&gt; コマンドを物事のカップルを行います。</target>
        </trans-unit>
        <trans-unit id="851ad3692f8ce86e89fabf82d757953cfb293665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git svn log&lt;/code&gt; command will not work on repositories using this, either. Using this conflicts with the &lt;code&gt;useSvmProps&lt;/code&gt; option for (hopefully) obvious reasons.</source>
          <target state="translated">&lt;code&gt;git svn log&lt;/code&gt; コマンドはどちらか、これを使用してリポジトリでは動作しません。これを使用すると、（うまくいけば）明白な理由で &lt;code&gt;useSvmProps&lt;/code&gt; オプションと競合します。</target>
        </trans-unit>
        <trans-unit id="54f2e5960f99dce6a894019f61b5f183cfaf541a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git switch&lt;/code&gt; command normally expects a branch head, but will also accept an arbitrary commit when invoked with --detach; for example, you can check out the commit referenced by a tag:</source>
          <target state="translated">&lt;code&gt;git switch&lt;/code&gt; コマンドが正常に分岐頭を期待するだけでなく、--detachで呼び出されたときに、任意のコミットを受け付けます。たとえば、タグで参照されているコミットをチェックアウトできます。</target>
        </trans-unit>
        <trans-unit id="5df4353714e03396f22186d308b555d9fc45aa0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git unpack-objects&lt;/code&gt; command can read the packed archive and expand the objects contained in the pack into &quot;one-file one-object&quot; format; this is typically done by the smart-pull commands when a pack is created on-the-fly for efficient network transport by their peers.</source>
          <target state="translated">&lt;code&gt;git unpack-objects&lt;/code&gt; コマンドがパックされたアーカイブを読んで、オブジェクトは「1ファイル1 -オブジェクト」形式にパックに含まれている拡張することができます。これは通常、ピアによる効率的なネットワーク転送のためにオンザフライでパックが作成されるときに、スマートプルコマンドによって実行されます。</target>
        </trans-unit>
        <trans-unit id="472b18d3af19081ec08acbffb4a8b9828ded3de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git write-tree&lt;/code&gt; command refuses to write a nonsensical tree, and it will complain about unmerged entries if it sees a single entry that is not stage 0.</source>
          <target state="translated">&lt;code&gt;git write-tree&lt;/code&gt; コマンドは、無意味な木を書くことを拒否し、それがステージ0ではない単一のエントリを見ればそれがマージされていないエントリが文句を言うでしょう。</target>
        </trans-unit>
        <trans-unit id="57ed6fd41631cf164adf8f1a5f87022b80e95155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;git-fetch&lt;/code&gt; command, with no arguments, will update all of the remote-tracking branches to the latest version found in the original repository. It will not touch any of your own branches&amp;mdash;​not even the &quot;master&quot; branch that was created for you on clone.</source>
          <target state="translated">引数なしの &lt;code&gt;git-fetch&lt;/code&gt; コマンドは、すべてのリモート追跡ブランチを元のリポジトリにある最新バージョンに更新します。クローンで作成された「マスター」ブランチでさえ、独自のブランチには影響しません。</target>
        </trans-unit>
        <trans-unit id="b7a1f970e8485b643b6fd9d3ee5bf5ec87b44b17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gitlink&lt;/code&gt; entry contains the object name of the commit that the superproject expects the submodule&amp;rsquo;s working directory to be at.</source>
          <target state="translated">&lt;code&gt;gitlink&lt;/code&gt; エントリは、親プロジェクトは、サブモジュールの作業ディレクトリがであることを期待しているコミットのオブジェクト名が含まれています。</target>
        </trans-unit>
        <trans-unit id="59421f1cfeaef33b3d6dfff512008a45b2069f51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help.browser&lt;/code&gt;, &lt;code&gt;web.browser&lt;/code&gt; and &lt;code&gt;browser.&amp;lt;tool&amp;gt;.path&lt;/code&gt; will also be checked if the &lt;code&gt;web&lt;/code&gt; format is chosen (either by command-line option or configuration variable). See &lt;code&gt;-w|--web&lt;/code&gt; in the OPTIONS section above and &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;help.browser&lt;/code&gt; 、 &lt;code&gt;web.browser&lt;/code&gt; および &lt;code&gt;browser.&amp;lt;tool&amp;gt;.path&lt;/code&gt; 場合もチェックされる &lt;code&gt;web&lt;/code&gt; フォーマットは（コマンドラインオプションまたは構成変数のいずれかによって）選択されています。参照してください &lt;code&gt;-w|--web&lt;/code&gt; 上記とOPTIONSセクションで&lt;a href=&quot;git-web--browse&quot;&gt;-閲覧[1]のgit-ウェブを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20a22a2e8dd656430183eebd26fcd541802b3980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help.browser&lt;/code&gt;, &lt;code&gt;web.browser&lt;/code&gt; and &lt;code&gt;browser.&amp;lt;tool&amp;gt;.path&lt;/code&gt; will also be checked if the &lt;code&gt;web&lt;/code&gt; format is chosen (either by command-line option or configuration variable). See &lt;code&gt;-w|--web&lt;/code&gt; in the OPTIONS section above and git-web{litdd}browse[1].</source>
          <target state="translated">&lt;code&gt;help.browser&lt;/code&gt; 、 &lt;code&gt;web.browser&lt;/code&gt; および &lt;code&gt;browser.&amp;lt;tool&amp;gt;.path&lt;/code&gt; 場合もチェックされる &lt;code&gt;web&lt;/code&gt; フォーマットは（コマンドラインオプションまたは構成変数のいずれかによって）選択されています。参照 &lt;code&gt;-w|--web&lt;/code&gt; とgitのウェブ{litdd}参照]上記[1] OPTIONSセクションです。</target>
        </trans-unit>
        <trans-unit id="d643b3df461bdc6854f7d047b7c0264699b4e1d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;includeIf&lt;/code&gt; sections allow you to include config directives from another source. These sections behave identically to each other with the exception that &lt;code&gt;includeIf&lt;/code&gt; sections may be ignored if their condition does not evaluate to true; see &quot;Conditional includes&quot; below.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; と &lt;code&gt;includeIf&lt;/code&gt; のセクションでは、別のソースからの設定ディレクティブを含めることができます。これらのセクションは、条件がtrueと評価されない場合に &lt;code&gt;includeIf&lt;/code&gt; セクションが無視されることを除いて、互いに同じように動作します。以下の「条件付きインクルード」を参照してください。</target>
        </trans-unit>
        <trans-unit id="a487e4b33c7059a362fff4a5ad146cea89086e35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;incremental-repack&lt;/code&gt; job repacks the object directory using the &lt;code&gt;multi-pack-index&lt;/code&gt; feature. In order to prevent race conditions with concurrent Git commands, it follows a two-step process. First, it calls &lt;code&gt;git multi-pack-index expire&lt;/code&gt; to delete pack-files unreferenced by the &lt;code&gt;multi-pack-index&lt;/code&gt; file. Second, it calls &lt;code&gt;git multi-pack-index repack&lt;/code&gt; to select several small pack-files and repack them into a bigger one, and then update the &lt;code&gt;multi-pack-index&lt;/code&gt; entries that refer to the small pack-files to refer to the new pack-file. This prepares those small pack-files for deletion upon the next run of &lt;code&gt;git multi-pack-index expire&lt;/code&gt;. The selection of the small pack-files is such that the expected size of the big pack-file is at least the batch size; see the &lt;code&gt;--batch-size&lt;/code&gt; option for the &lt;code&gt;repack&lt;/code&gt; subcommand in &lt;a href=&quot;git-multi-pack-index&quot;&gt;git-multi-pack-index[1]&lt;/a&gt;. The default batch-size is zero, which is a special case that attempts to repack all pack-files into a single pack-file.</source>
          <target state="translated">&lt;code&gt;incremental-repack&lt;/code&gt; ジョブが使用してオブジェクトディレクトリをrepacks &lt;code&gt;multi-pack-index&lt;/code&gt; 機能を。同時Gitコマンドによる競合状態を防ぐために、2段階のプロセスに従います。まず、 &lt;code&gt;git multi-pack-index expire&lt;/code&gt; を呼び出して、 &lt;code&gt;multi-pack-index&lt;/code&gt; ファイルによって参照されていないpack-fileを削除します。次に、 &lt;code&gt;git multi-pack-index repack&lt;/code&gt; を呼び出して、いくつかの小さなパックファイルを選択し、それらを大きなパックファイルに再 &lt;code&gt;multi-pack-index&lt;/code&gt; から、小さなパックファイルを参照するmulti-pack-indexエントリを更新して、新しいパックを参照します。 -ファイル。これにより、 &lt;code&gt;git multi-pack-index expire&lt;/code&gt; 次回の実行時に削除できるように、これらの小さなパックファイルが準備されます。。小さいパックファイルの選択は、大きいパックファイルの予想サイズが少なくともバッチサイズになるように行われます。参照 &lt;code&gt;--batch-size&lt;/code&gt; のオプション &lt;code&gt;repack&lt;/code&gt; 中にサブコマンド&lt;a href=&quot;git-multi-pack-index&quot;&gt;のgit-マルチパックインデックス[1] &lt;/a&gt;。デフォルトのバッチサイズはゼロです。これは、すべてのパックファイルを単一のパックファイルに再パックしようとする特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="25df8c5531688eabec317d8bad065a9bd5755f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label&lt;/code&gt; command associates a label with the current HEAD when that command is executed. These labels are created as worktree-local refs (&lt;code&gt;refs/rewritten/&amp;lt;label&amp;gt;&lt;/code&gt;) that will be deleted when the rebase finishes. That way, rebase operations in multiple worktrees linked to the same repository do not interfere with one another. If the &lt;code&gt;label&lt;/code&gt; command fails, it is rescheduled immediately, with a helpful message how to proceed.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; そのコマンドが実行されたときにコマンドを実行すると、現在のHEADとラベルを関連付けます。これらのラベルは、リベースが完了すると削除されるワークツリーローカル参照（ &lt;code&gt;refs/rewritten/&amp;lt;label&amp;gt;&lt;/code&gt; ）として作成されます。このようにして、同じリポジトリにリンクされた複数のワークツリーでのリベース操作は互いに干渉しません。場合は &lt;code&gt;label&lt;/code&gt; コマンドが失敗し、処理方法、それは有用なメッセージで、すぐに再スケジュールされます。</target>
        </trans-unit>
        <trans-unit id="fcbbe57ad1bbeeeea536166f770fc1a1a385d28e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list&lt;/code&gt; command may produce a list of key-value pairs. The following keys are defined.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; コマンドは、キーと値のペアのリストを生成することができます。以下のキーが定義されています。</target>
        </trans-unit>
        <trans-unit id="a21f07c748b4f824d325c5d844a166616c79a19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list&lt;/code&gt; command produces a list of refs in which each ref may be followed by a list of attributes. The following ref list attributes are defined.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; コマンドは、各REF属性のリストが続いてもよいした参考文献のリストを生成します。次の参照リスト属性が定義されています。</target>
        </trans-unit>
        <trans-unit id="6043952fda08c25ccc481f9a80740c9002ea5cf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loose-objects&lt;/code&gt; job cleans up loose objects and places them into pack-files. In order to prevent race conditions with concurrent Git commands, it follows a two-step process. First, it deletes any loose objects that already exist in a pack-file; concurrent Git processes will examine the pack-file for the object data instead of the loose object. Second, it creates a new pack-file (starting with &quot;loose-&quot;) containing a batch of loose objects. The batch size is limited to 50 thousand objects to prevent the job from taking too long on a repository with many loose objects. The &lt;code&gt;gc&lt;/code&gt; task writes unreachable objects as loose objects to be cleaned up by a later step only if they are not re-added to a pack-file; for this reason it is not advisable to enable both the &lt;code&gt;loose-objects&lt;/code&gt; and &lt;code&gt;gc&lt;/code&gt; tasks at the same time.</source>
          <target state="translated">&lt;code&gt;loose-objects&lt;/code&gt; 緩いオブジェクトアップジョブクリーンにし、パックファイルに配置します。同時Gitコマンドによる競合状態を防ぐために、2段階のプロセスに従います。まず、パックファイルにすでに存在するルーズオブジェクトを削除します。並行Gitプロセスは、緩いオブジェクトではなく、オブジェクトデータのパックファイルを調べます。次に、ルーズオブジェクトのバッチを含む新しいパックファイル（「loose-」で始まる）を作成します。バッチサイズは5万オブジェクトに制限されており、多くの緩いオブジェクトがあるリポジトリでジョブに時間がかかりすぎるのを防ぎます。 &lt;code&gt;gc&lt;/code&gt; 緩いオブジェクトは、後の工程でクリーンアップするようタスクは、それらがパックファイルに追加し再されていない場合にのみ、到達不能オブジェクトを書き込みます。このため、両方の &lt;code&gt;loose-objects&lt;/code&gt; を有効にすることはお勧めできません。と &lt;code&gt;gc&lt;/code&gt; タスクを同時に。</target>
        </trans-unit>
        <trans-unit id="a1948673e2dc6e9b36baf9466260194608388c73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ls&lt;/code&gt; command can also be used where a &lt;code&gt;filemodify&lt;/code&gt; directive can appear, allowing it to be used in the middle of a commit.</source>
          <target state="translated">&lt;code&gt;ls&lt;/code&gt; コマンドも場合に使用することができます &lt;code&gt;filemodify&lt;/code&gt; ディレクティブは、それがコミットの途中で使用することができるように、表示されます。</target>
        </trans-unit>
        <trans-unit id="9f751fdc4139000f76be8c4b7f0362d024d6ccd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maint&lt;/code&gt; branch should now be fast-forwarded to the newly released code so that maintenance fixes can be tracked for the current release:</source>
          <target state="translated">&lt;code&gt;maint&lt;/code&gt; メンテナンスフィックスは現在のリリースのために追跡できるように枝は、新しくリリースされたコードを早送りする必要があります：</target>
        </trans-unit>
        <trans-unit id="3d08be0d91fe4ba76005ea415ec8dd980a19baaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;man.viewer&lt;/code&gt; configuration variable will be checked if the &lt;code&gt;man&lt;/code&gt; format is chosen. The following values are currently supported:</source>
          <target state="translated">&lt;code&gt;man.viewer&lt;/code&gt; の場合は設定変数がチェックされます &lt;code&gt;man&lt;/code&gt; 形式が選択されています。現在、次の値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="4d99fda454f21ad231a7b020da5a33fbc1590dfe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;master&lt;/code&gt; branch is supposed to be a superset of &lt;code&gt;maint&lt;/code&gt;. If this condition does not hold, then &lt;code&gt;maint&lt;/code&gt; contains some commits that are not included on &lt;code&gt;master&lt;/code&gt;. The fixes represented by those commits will therefore not be included in your feature release.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; ブランチはのスーパーセットであると考えられる &lt;code&gt;maint&lt;/code&gt; 。この条件が満たされない場合、 &lt;code&gt;maint&lt;/code&gt; には、 &lt;code&gt;master&lt;/code&gt; に含まれていないいくつかのコミットが含まれています。したがって、これらのコミットで表される修正は、機能リリースに含まれません。</target>
        </trans-unit>
        <trans-unit id="60a9438818e32daade34327aac8510a028d0a280" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge.*.driver&lt;/code&gt; variable&amp;rsquo;s value is used to construct a command to run to merge ancestor&amp;rsquo;s version (&lt;code&gt;%O&lt;/code&gt;), current version (&lt;code&gt;%A&lt;/code&gt;) and the other branches' version (&lt;code&gt;%B&lt;/code&gt;). These three tokens are replaced with the names of temporary files that hold the contents of these versions when the command line is built. Additionally, %L will be replaced with the conflict marker size (see below).</source>
          <target state="translated">&lt;code&gt;merge.*.driver&lt;/code&gt; 変数の値は、先祖のバージョン（マージするために実行するコマンド構築するために使用され &lt;code&gt;%O&lt;/code&gt; ）、現在のバージョン（ &lt;code&gt;%A&lt;/code&gt; ）と他のブランチバージョン（ &lt;code&gt;%B&lt;/code&gt; を）。これらの3つのトークンは、コマンドラインのビルド時にこれらのバージョンの内容を保持する一時ファイルの名前に置き換えられます。さらに、％Lは競合マーカーのサイズに置き換えられます（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8135860bcb3c213dc65a79f9d59c1c4cf76a9b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge.*.name&lt;/code&gt; variable gives the driver a human-readable name.</source>
          <target state="translated">&lt;code&gt;merge.*.name&lt;/code&gt; 変数には、ドライバーに人間可読な名前を与えます。</target>
        </trans-unit>
        <trans-unit id="531f58358e8d95bd1e04306b8f06edec09e06aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge.*.recursive&lt;/code&gt; variable specifies what other merge driver to use when the merge driver is called for an internal merge between common ancestors, when there are more than one. When left unspecified, the driver itself is used for both internal merge and the final merge.</source>
          <target state="translated">&lt;code&gt;merge.*.recursive&lt;/code&gt; マージドライバが1個以下がある場合には、共通の祖先との間の内部のマージのために呼び出されたときに、マージ・ドライバが使用するために、他のどのような変数を指定します。指定しない場合、ドライバー自体が内部マージと最終マージの両方に使用されます。</target>
        </trans-unit>
        <trans-unit id="0e9e9f9df980dcf05008ee310843fafb365f76e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;merge&lt;/code&gt; command will merge the specified revision(s) into whatever is HEAD at that time. With &lt;code&gt;-C &amp;lt;original-commit&amp;gt;&lt;/code&gt;, the commit message of the specified merge commit will be used. When the &lt;code&gt;-C&lt;/code&gt; is changed to a lower-case &lt;code&gt;-c&lt;/code&gt;, the message will be opened in an editor after a successful merge so that the user can edit the message.</source>
          <target state="translated">&lt;code&gt;merge&lt;/code&gt; コマンドは、その時点でHEADが何であれに指定されたリビジョン（複数可）をマージします。 &lt;code&gt;-C &amp;lt;original-commit&amp;gt;&lt;/code&gt; 、指定されたマージのコミットメッセージをコミット使用されます。とき &lt;code&gt;-C&lt;/code&gt; が小文字に変更され &lt;code&gt;-c&lt;/code&gt; ユーザーがメッセージを編集できるように、メッセージが成功し、マージした後、エディタで開かれます。</target>
        </trans-unit>
        <trans-unit id="103d9db55b62f87264ea4e2293c619e5e886c09f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode &amp;lt;mode&amp;gt;,&amp;lt;mode&amp;gt;..&amp;lt;mode&amp;gt;&lt;/code&gt; line appears only if at least one of the &amp;lt;mode&amp;gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &amp;lt;tree-ish&amp;gt; and are not used by combined diff format.</source>
          <target state="translated">&lt;code&gt;mode &amp;lt;mode&amp;gt;,&amp;lt;mode&amp;gt;..&amp;lt;mode&amp;gt;&lt;/code&gt; の行は、&amp;lt;モード&amp;gt;の少なくとも一方が休みと異なっている場合にのみ表示されます。検出されたコンテンツの移動（名前の変更とコピーの検出）に関する情報を含む拡張ヘッダーは、2つの&amp;lt;tree-ish&amp;gt;のdiffで機能するように設計されており、diff形式の組み合わせでは使用されません。</target>
        </trans-unit>
        <trans-unit id="2bdce5756dcfa3f7f3ee04d8a9aa0f072d4148cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-changelist&lt;/code&gt; hook is executed after the changelist message has been edited by the user. It can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes a single parameter, the name of the file that holds the proposed changelist text. Exiting with a non-zero status causes the command to abort.</source>
          <target state="translated">&lt;code&gt;p4-changelist&lt;/code&gt; チェンジメッセージはユーザによって編集された後、フックが実行されます。 &lt;code&gt;--no-verify&lt;/code&gt; オプションを使用してバイパスできます。提案されたチェンジリストテキストを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、コマンドは中止されます。</target>
        </trans-unit>
        <trans-unit id="faca035b6e964f3e1a2e62a14bd12a5a551dfc56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-post-changelist&lt;/code&gt; hook is invoked after the submit has successfully occured in P4. It takes no parameters and is meant primarily for notification and cannot affect the outcome of the git p4 submit action.</source>
          <target state="translated">&lt;code&gt;p4-post-changelist&lt;/code&gt; フックが正常にP4で発生した提出後に呼び出されます。パラメータを必要とせず、主に通知を目的としており、gitp4送信アクションの結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="548bbc8c1c0a7906deaf13e9ebab02c10ef8f504" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-post-changelist&lt;/code&gt; hook is invoked after the submit has successfully occurred in P4. It takes no parameters and is meant primarily for notification and cannot affect the outcome of the git p4 submit action.</source>
          <target state="translated">&lt;code&gt;p4-post-changelist&lt;/code&gt; 提出が正常にP4で発生した後にフックが呼び出されます。パラメータを必要とせず、主に通知を目的としており、gitp4送信アクションの結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="245bf1c27c1e24c16ea60d971116c678983044e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-pre-submit&lt;/code&gt; hook is executed if it exists and is executable. The hook takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevents &lt;code&gt;git-p4 submit&lt;/code&gt; from launching.</source>
          <target state="translated">&lt;code&gt;p4-pre-submit&lt;/code&gt; 、それが存在し、実行可能な場合フックが実行されます。フックはパラメーターを取りませんが、標準入力からは何も取りません。このスクリプトからゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。</target>
        </trans-unit>
        <trans-unit id="5b18899976ae8ddf5fa851e0121915b85076d95b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-pre-submit&lt;/code&gt; hook is executed if it exists and is executable. The hook takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevents &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. It can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; command line option.</source>
          <target state="translated">&lt;code&gt;p4-pre-submit&lt;/code&gt; 、それが存在し、実行可能な場合フックが実行されます。フックはパラメータを受け取らず、標準入力からも何も受け取りません。このスクリプトをゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。 &lt;code&gt;--no-verify&lt;/code&gt; コマンドラインオプションを使用してバイパスできます。</target>
        </trans-unit>
        <trans-unit id="7d1a28ab3e2441205f479d6f2df8ea0d456e98e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;p4-prepare-changelist&lt;/code&gt; hook is executed right after preparing the default changelist message and before the editor is started. It takes one parameter, the name of the file that contains the changelist text. Exiting with a non-zero status from the script will abort the process.</source>
          <target state="translated">&lt;code&gt;p4-prepare-changelist&lt;/code&gt; フックは右のデフォルトチェンジメッセージを準備した後、エディタが起動される前に実行されます。変更リストのテキストを含むファイルの名前という1つのパラメーターを取ります。スクリプトをゼロ以外のステータスで終了すると、プロセスが中止されます。</target>
        </trans-unit>
        <trans-unit id="55ac82e7ce6eab5b9d775518541be1b358e64d26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;post-update&lt;/code&gt; hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The &lt;a href=&quot;#post-receive&quot;&gt;&lt;em&gt;post-receive&lt;/em&gt;&lt;/a&gt; hook does get both original and updated values of the refs. You might consider it instead if you need them.</source>
          <target state="translated">&lt;code&gt;post-update&lt;/code&gt; それはold..newログインを行うために貧しい場所で、フックがプッシュされたヘッドで何を伝えることができますが、それは彼らの元と更新された値が何であるかを知りません。&lt;a href=&quot;#post-receive&quot;&gt;&lt;em&gt;ポスト受ける&lt;/em&gt;&lt;/a&gt;フックは、引用文献の両方の元と更新された値を取得ありません。それらが必要な場合は、代わりに検討することができます。</target>
        </trans-unit>
        <trans-unit id="7b1878af31d43f94d962552d8195f8f92835c4ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pre-receive&lt;/code&gt; hook MUST NOT update any refs to point to quarantined objects. Other programs accessing the repository will not be able to see the objects (and if the pre-receive hook fails, those refs would become corrupted). For safety, any ref updates from within &lt;code&gt;pre-receive&lt;/code&gt; are automatically rejected.</source>
          <target state="translated">&lt;code&gt;pre-receive&lt;/code&gt; フックは、隔離されたオブジェクトを指すようにすべての引用文献をアップデートしてはいけません。リポジトリにアクセスする他のプログラムはオブジェクトを表示できません（事前受信フックが失敗した場合、それらの参照は破損します）。安全のため、 &lt;code&gt;pre-receive&lt;/code&gt; 内からの参照更新はすべて自動的に拒否されます。</target>
        </trans-unit>
        <trans-unit id="99b94c570c1df1ebad0373a1bf1d41698acbbe49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefetch&lt;/code&gt; task updates the object directory with the latest objects from all registered remotes. For each remote, a &lt;code&gt;git fetch&lt;/code&gt; command is run. The refmap is custom to avoid updating local or remote branches (those in &lt;code&gt;refs/heads&lt;/code&gt; or &lt;code&gt;refs/remotes&lt;/code&gt;). Instead, the remote refs are stored in &lt;code&gt;refs/prefetch/&amp;lt;remote&amp;gt;/&lt;/code&gt;. Also, tags are not updated.</source>
          <target state="translated">&lt;code&gt;prefetch&lt;/code&gt; タスクが登録されているすべてのリモコンからの最新のオブジェクトとオブジェクトディレクトリを更新します。リモートごとに、 &lt;code&gt;git fetch&lt;/code&gt; コマンドが実行されます。refmapは、ローカルブランチまたはリモートブランチ（ &lt;code&gt;refs/heads&lt;/code&gt; または &lt;code&gt;refs/remotes&lt;/code&gt; 内のブランチ）の更新を回避するためのカスタムです。代わりに、リモート参照は &lt;code&gt;refs/prefetch/&amp;lt;remote&amp;gt;/&lt;/code&gt; に保存されます。また、タグは更新されません。</target>
        </trans-unit>
        <trans-unit id="eb98cabc50bf16dce560817c25a1c4d64601cce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pu&lt;/code&gt; branch will be updated even if it does not fast-forward, because it is prefixed with a plus sign; &lt;code&gt;tmp&lt;/code&gt; will not be.</source>
          <target state="translated">&lt;code&gt;pu&lt;/code&gt; それはプラス記号が付いているので、ブランチは、それは早送りしない場合であっても更新されます。 &lt;code&gt;tmp&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="d5f7235d0f9a5c833ca324eff7dc4ec19b6e7285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pull&lt;/code&gt; command knows where to get updates from because of certain configuration variables that were set by the first &lt;code&gt;git clone&lt;/code&gt; command; see &lt;code&gt;git config -l&lt;/code&gt; and the &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; man page for details.</source>
          <target state="translated">&lt;code&gt;pull&lt;/code&gt; コマンドがあるため最初で設定された特定の構成変数のから更新プログラムを取得する場所を知っている &lt;code&gt;git clone&lt;/code&gt; コマンド。詳細については、 &lt;code&gt;git config -l&lt;/code&gt; および&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt;マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9716ab4c9bb8eabfdb4d2f2052c2761838dfc4ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r1^!&lt;/code&gt; notation includes commit &lt;code&gt;r1&lt;/code&gt; but excludes all of its parents. By itself, this notation denotes the single commit &lt;code&gt;r1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1^!&lt;/code&gt; 表記にはコミット &lt;code&gt;r1&lt;/code&gt; が含まれますが、その親はすべて除外されます。単独では、この表記は単一のコミット &lt;code&gt;r1&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="ec7b0d87246117fbc7ede1e9fb5e445953432dc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r1^@&lt;/code&gt; notation means all parents of &lt;code&gt;r1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r1^@&lt;/code&gt; 表記は、すべての親を意味 &lt;code&gt;r1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="906a6c33616cfaeeffbd4277ee44152fa9cd28f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;raw&lt;/code&gt; format shows the entire commit exactly as stored in the commit object. Notably, the hashes are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and &lt;code&gt;parents&lt;/code&gt; information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with &lt;code&gt;git log --raw&lt;/code&gt;. To get full object names in a raw diff format, use &lt;code&gt;--no-abbrev&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;raw&lt;/code&gt; フォーマットショー全体はコミットオブジェクトに格納されているとおりにコミット。特に、ハッシュは--abbrevまたは--no-abbrevが使用されているかどうかに関係なく完全に表示され、 &lt;code&gt;parents&lt;/code&gt; 情報は、接木または履歴の単純化を考慮せずに、真の親コミットを示します。この形式はコミットの表示方法に影響しますが、たとえば &lt;code&gt;git log --raw&lt;/code&gt; を使用して差分を表示する方法には影響しないことに注意してください。完全なオブジェクト名を未加工のdiff形式で取得するには、 &lt;code&gt;--no-abbrev&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3e2ae08cd51826a72547a4936e1fee7033d540d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;recursive&lt;/code&gt; strategy can take the following options:</source>
          <target state="translated">&lt;code&gt;recursive&lt;/code&gt; 戦略は、次のオプションを取ることができます。</target>
        </trans-unit>
        <trans-unit id="2274cd304e0d47984767afeee4d877ca51fbdd54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refs/heads/*&lt;/code&gt; namespace will only accept commit objects, and updates only if they can be fast-forwarded.</source>
          <target state="translated">&lt;code&gt;refs/heads/*&lt;/code&gt; 名前空間には、オブジェクトのみをコミット受け入れ、彼らは早送りすることができた場合にのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="73d202d810478ee27aec0a92a74e6cf7efe8db45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refs/tags/*&lt;/code&gt; namespace will accept any kind of object (as commits, trees and blobs can be tagged), and any updates to them will be rejected.</source>
          <target state="translated">&lt;code&gt;refs/tags/*&lt;/code&gt; （コミット、木々や塊をタグ付けすることができますように）名前空間には、任意の種類のオブジェクトを受け入れますし、それらへの更新は拒否されます。</target>
        </trans-unit>
        <trans-unit id="5e33461f3097b7e2978ea28d8c31efc6ebcd9fc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;register&lt;/code&gt; subcomand will also set the &lt;code&gt;maintenance.strategy&lt;/code&gt; config value to &lt;code&gt;incremental&lt;/code&gt;, if this value is not previously set. The &lt;code&gt;incremental&lt;/code&gt; strategy uses the following schedule for each maintenance task:</source>
          <target state="translated">&lt;code&gt;register&lt;/code&gt; subcomandも設定されます &lt;code&gt;maintenance.strategy&lt;/code&gt; に設定値を &lt;code&gt;incremental&lt;/code&gt; この値があらかじめ設定されていない場合、。 &lt;code&gt;incremental&lt;/code&gt; 戦略は、各メンテナンス作業のため、以下のスケジュールを使用しています：</target>
        </trans-unit>
        <trans-unit id="8f1fa8b6ca43d585bbef39f492a9db57e9ecc9a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; command can also be used to create lightweight (non-annotated) tags. For example:</source>
          <target state="translated">また、 &lt;code&gt;reset&lt;/code&gt; コマンドを使用して、軽量（注釈なし）タグを作成することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="bd2e909f258c6aa58fa07c5acaee67caeb1da10e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; command resets the HEAD, index and worktree to the specified revision. It is similar to an &lt;code&gt;exec git reset --hard &amp;lt;label&amp;gt;&lt;/code&gt;, but refuses to overwrite untracked files. If the &lt;code&gt;reset&lt;/code&gt; command fails, it is rescheduled immediately, with a helpful message how to edit the todo list (this typically happens when a &lt;code&gt;reset&lt;/code&gt; command was inserted into the todo list manually and contains a typo).</source>
          <target state="translated">&lt;code&gt;reset&lt;/code&gt; コマンドは、指定されたリビジョンにHEAD、インデックスとworktreeをリセットします。これは &lt;code&gt;exec git reset --hard &amp;lt;label&amp;gt;&lt;/code&gt; に似ていますが、追跡されていないファイルの上書きを拒否します。場合は &lt;code&gt;reset&lt;/code&gt; コマンドが失敗し、それは（これは通常時に起こるToDoリストを編集する方法役立つメッセージを表示して、すぐに再スケジュールされた &lt;code&gt;reset&lt;/code&gt; コマンドを手動でToDoリストに挿入し、タイプミスが含まれています）。</target>
        </trans-unit>
        <trans-unit id="f2c26b231ec380ef2e111ace64d683b597b18aa2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;seen&lt;/code&gt; branch will be updated even if it does not fast-forward, because it is prefixed with a plus sign; &lt;code&gt;tmp&lt;/code&gt; will not be.</source>
          <target state="translated">&lt;code&gt;seen&lt;/code&gt; 、それがプラス記号が付いているので、ブランチは、それは早送りしない場合であっても更新されます。 &lt;code&gt;tmp&lt;/code&gt; はなりません。</target>
        </trans-unit>
        <trans-unit id="06cca2918a8a255dfff1d384369e4d4195e47f51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shortlog&lt;/code&gt; view is more compact; it shows one commit per line.</source>
          <target state="translated">&lt;code&gt;shortlog&lt;/code&gt; ビューは、よりコンパクトです。1行に1つのコミットが表示されます。</target>
        </trans-unit>
        <trans-unit id="49d7635e517e74681985e2d5acfe0d3faa2b57eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tagger&lt;/code&gt; command uses the same format as &lt;code&gt;committer&lt;/code&gt; within &lt;code&gt;commit&lt;/code&gt;; again see above for details.</source>
          <target state="translated">&lt;code&gt;tagger&lt;/code&gt; コマンドと同じフォーマットを使用 &lt;code&gt;committer&lt;/code&gt; 以内に &lt;code&gt;commit&lt;/code&gt; 。詳細については、上記を再度参照してください。</target>
        </trans-unit>
        <trans-unit id="c5d1574573f9cb9deb3517e06eb81c31c726f5b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;textconv&lt;/code&gt; config option is used to define a program for performing such a conversion. The program should take a single argument, the name of a file to convert, and produce the resulting text on stdout.</source>
          <target state="translated">&lt;code&gt;textconv&lt;/code&gt; 設定オプションは、A変換を行うためのプログラムを定義するために使用されます。プログラムは、単一の引数、つまり変換するファイルの名前を取り、結果のテキストをstdoutに生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a024de933cb7ecb7f2684cd23c20dd59cced4c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tformat:&lt;/code&gt; format works exactly like &lt;code&gt;format:&lt;/code&gt;, except that it provides &quot;terminator&quot; semantics instead of &quot;separator&quot; semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the &quot;oneline&quot; format does. For example:</source>
          <target state="translated">&lt;code&gt;tformat:&lt;/code&gt; フォーマットは、正確に同じように動作し &lt;code&gt;format:&lt;/code&gt; 、それは代わりに「区切り」の意味の「ターミネーター」のセマンティクスを提供することを除いて。つまり、各コミットには、エントリの間に置かれたセパレータではなく、メッセージターミネータ文字（通常は改行）が追加されます。つまり、1行形式の最後のエントリは、「1行」形式と同様に、新しい行で適切に終了します。例えば：</target>
        </trans-unit>
        <trans-unit id="df62988b77ac61a631e6a3bd598e4269b439619e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; variables determine what ends up in the &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;committer&lt;/code&gt; field of commit objects. If you need the &lt;code&gt;author&lt;/code&gt; or &lt;code&gt;committer&lt;/code&gt; to be different, the &lt;code&gt;author.name&lt;/code&gt;, &lt;code&gt;author.email&lt;/code&gt;, &lt;code&gt;committer.name&lt;/code&gt; or &lt;code&gt;committer.email&lt;/code&gt; variables can be set. Also, all of these can be overridden by the &lt;code&gt;GIT_AUTHOR_NAME&lt;/code&gt;, &lt;code&gt;GIT_AUTHOR_EMAIL&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_NAME&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_EMAIL&lt;/code&gt; and &lt;code&gt;EMAIL&lt;/code&gt; environment variables.</source>
          <target state="translated">&lt;code&gt;user.name&lt;/code&gt; と &lt;code&gt;user.email&lt;/code&gt; 変数は、で終わるかを判断 &lt;code&gt;author&lt;/code&gt; と &lt;code&gt;committer&lt;/code&gt; コミットオブジェクトのフィールドです。作成 &lt;code&gt;author&lt;/code&gt; または &lt;code&gt;committer&lt;/code&gt; を異ならせる必要がある場合は、 &lt;code&gt;author.name&lt;/code&gt; 、 &lt;code&gt;author.email&lt;/code&gt; 、 &lt;code&gt;committer.name&lt;/code&gt; 、または &lt;code&gt;committer.email&lt;/code&gt; 変数を設定できます。また、これらはすべて、 &lt;code&gt;GIT_AUTHOR_NAME&lt;/code&gt; 、 &lt;code&gt;GIT_AUTHOR_EMAIL&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_NAME&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_EMAIL&lt;/code&gt; 、および &lt;code&gt;EMAIL&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="52696bbc1bd35a1c1c6d78b6535a11990db3bb34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; variables determine what ends up in the &lt;code&gt;author&lt;/code&gt; and &lt;code&gt;committer&lt;/code&gt; field of commit objects. If you need the &lt;code&gt;author&lt;/code&gt; or &lt;code&gt;committer&lt;/code&gt; to be different, the &lt;code&gt;author.name&lt;/code&gt;, &lt;code&gt;author.email&lt;/code&gt;, &lt;code&gt;committer.name&lt;/code&gt; or &lt;code&gt;committer.email&lt;/code&gt; variables can be set. Also, all of these can be overridden by the &lt;code&gt;GIT_AUTHOR_NAME&lt;/code&gt;, &lt;code&gt;GIT_AUTHOR_EMAIL&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_NAME&lt;/code&gt;, &lt;code&gt;GIT_COMMITTER_EMAIL&lt;/code&gt; and &lt;code&gt;EMAIL&lt;/code&gt; environment variables. See &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;user.name&lt;/code&gt; と &lt;code&gt;user.email&lt;/code&gt; 変数は、で終わるかを判断 &lt;code&gt;author&lt;/code&gt; と &lt;code&gt;committer&lt;/code&gt; コミットオブジェクトのフィールドです。 &lt;code&gt;author&lt;/code&gt; または &lt;code&gt;committer&lt;/code&gt; を異なるものにする必要がある場合は、 &lt;code&gt;author.name&lt;/code&gt; 、 &lt;code&gt;author.email&lt;/code&gt; 、 &lt;code&gt;committer.name&lt;/code&gt; 、または &lt;code&gt;committer.email&lt;/code&gt; 変数を設定できます。また、これらすべては &lt;code&gt;GIT_AUTHOR_NAME&lt;/code&gt; 、 &lt;code&gt;GIT_AUTHOR_EMAIL&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_NAME&lt;/code&gt; 、 &lt;code&gt;GIT_COMMITTER_EMAIL&lt;/code&gt; 、および &lt;code&gt;EMAIL&lt;/code&gt; 環境変数によってオーバーライドできます。&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]を&lt;/a&gt;参照してください 詳細については。</target>
        </trans-unit>
        <trans-unit id="e856d2a5737e8a442522cf9dc045cf46da5c837d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;worktree list&lt;/code&gt; command has two output formats. The default format shows the details on a single line with columns. For example:</source>
          <target state="translated">&lt;code&gt;worktree list&lt;/code&gt; コマンドは、2つの出力形式があります。デフォルトの形式では、詳細が1行に列で表示されます。例えば：</target>
        </trans-unit>
        <trans-unit id="16ffcc56d5f44fe2ccdfd792b9ad74a964b837f9" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;&amp;hellip;​&lt;/em&gt; (three-dot) Symmetric Difference Notation</source>
          <target state="translated">&lt;em&gt;...&lt;/em&gt;（3ドット）対称差表記</target>
        </trans-unit>
        <trans-unit id="3ca01d997f3f16d56fc54554bfe9b469c32c5dff" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;..&lt;/em&gt; (two-dot) Range Notation</source>
          <target state="translated">&lt;em&gt;...&lt;/em&gt;（2点）範囲表記</target>
        </trans-unit>
        <trans-unit id="28292c9406d9116658f021a9e7e686e22523649d" translate="yes" xml:space="preserve">
          <source>The C rewrite is first included with Git version 2.22 (and Git for Windows version 2.19). This option serves as an escape hatch to re-enable the legacy version in case any bugs are found in the rewrite. This option and the shell script version of &lt;a href=&quot;git-stash&quot;&gt;git-stash[1]&lt;/a&gt; will be removed in some future release.</source>
          <target state="translated">Cの書き換えは、最初にGitバージョン2.22（およびGit for Windowsバージョン2.19）に含まれています。このオプションは、書き換えでバグが見つかった場合にレガシーバージョンを再度有効にするエスケープハッチとして機能します。このオプションと&lt;a href=&quot;git-stash&quot;&gt;git-stash [1]&lt;/a&gt;のシェルスクリプトバージョンは、将来のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="dbe462d7e2f126482bf0dec3d004def2c9c89bb6" translate="yes" xml:space="preserve">
          <source>The CVS module you want to import. Relative to &amp;lt;CVSROOT&amp;gt;. If not given, &lt;code&gt;git cvsimport&lt;/code&gt; tries to read it from &lt;code&gt;CVS/Repository&lt;/code&gt;.</source>
          <target state="translated">インポートするCVSモジュール。&amp;lt;CVSROOT&amp;gt;に対して。指定しない場合、 &lt;code&gt;git cvsimport&lt;/code&gt; は &lt;code&gt;CVS/Repository&lt;/code&gt; からの読み取りを試みます。</target>
        </trans-unit>
        <trans-unit id="d9fdb00c7bf3f2937ed399ea5a7eb5783533387f" translate="yes" xml:space="preserve">
          <source>The Event Format Target</source>
          <target state="translated">イベントフォーマットのターゲット</target>
        </trans-unit>
        <trans-unit id="91f31eeacecff37ec38db2aff37269235d7422bb" translate="yes" xml:space="preserve">
          <source>The GIT_TRACE_&amp;lt;key&amp;gt; mechanism allows each &amp;lt;key&amp;gt; to write to a different file (in addition to just stderr).</source>
          <target state="translated">GIT_TRACE_ &amp;lt;key&amp;gt;メカニズムにより、各&amp;lt;key&amp;gt;は（stderrだけでなく）異なるファイルに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="eb9c24f633d0777727caf33c8ede260c0246d232" translate="yes" xml:space="preserve">
          <source>The GPG key ID of the key that signed the push certificate.</source>
          <target state="translated">プッシュ証明書に署名した鍵のGPG鍵ID。</target>
        </trans-unit>
        <trans-unit id="7fd047e9e0dcddc0ec24d2bfa4a8d0b4477b60c4" translate="yes" xml:space="preserve">
          <source>The Git Repository</source>
          <target state="translated">Git リポジトリ</target>
        </trans-unit>
        <trans-unit id="ec69c4a3fd32f0743df23ab218ec13475fdae8cc" translate="yes" xml:space="preserve">
          <source>The Git configuration file contains a number of variables that affect the Git commands' behavior. The files &lt;code&gt;.git/config&lt;/code&gt; and optionally &lt;code&gt;config.worktree&lt;/code&gt; (see &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; below) in each repository are used to store the configuration for that repository, and &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; is used to store a per-user configuration as fallback values for the &lt;code&gt;.git/config&lt;/code&gt; file. The file &lt;code&gt;/etc/gitconfig&lt;/code&gt; can be used to store a system-wide default configuration.</source>
          <target state="translated">Git構成ファイルには、Gitコマンドの動作に影響を与えるいくつかの変数が含まれています。各リポジトリのファイル &lt;code&gt;.git/config&lt;/code&gt; およびオプションで &lt;code&gt;config.worktree&lt;/code&gt; （ &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; を参照）は、そのリポジトリの構成を保存するために使用され、 &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; は、ユーザーごとの構成をフォールバック値として保存するために使用されます &lt;code&gt;.git/config&lt;/code&gt; ファイル。ファイル &lt;code&gt;/etc/gitconfig&lt;/code&gt; を使用して、システム全体のデフォルト設定を保存できます。</target>
        </trans-unit>
        <trans-unit id="57dbf68c8f67f403d793ac43faa2e8d1a6fb8f3b" translate="yes" xml:space="preserve">
          <source>The Git configuration file contains a number of variables that affect the Git commands' behavior. The files &lt;code&gt;.git/config&lt;/code&gt; and optionally &lt;code&gt;config.worktree&lt;/code&gt; (see the &quot;CONFIGURATION FILE&quot; section of &lt;a href=&quot;git-worktree&quot;&gt;git-worktree[1]&lt;/a&gt;) in each repository are used to store the configuration for that repository, and &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; is used to store a per-user configuration as fallback values for the &lt;code&gt;.git/config&lt;/code&gt; file. The file &lt;code&gt;/etc/gitconfig&lt;/code&gt; can be used to store a system-wide default configuration.</source>
          <target state="translated">Git構成ファイルには、Gitコマンドの動作に影響を与えるいくつかの変数が含まれています。各リポジトリのファイル &lt;code&gt;.git/config&lt;/code&gt; およびオプションで &lt;code&gt;config.worktree&lt;/code&gt; （&lt;a href=&quot;git-worktree&quot;&gt;git-worktree [1]&lt;/a&gt;の「CONFIGURATIONFILE」セクションを参照）は、そのリポジトリの構成を格納するために使用され、 &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; は格納するために使用されます &lt;code&gt;.git/config&lt;/code&gt; ファイルのフォールバック値としてのユーザーごとの構成。ファイル &lt;code&gt;/etc/gitconfig&lt;/code&gt; を使用して、システム全体のデフォルト構成を保存できます。</target>
        </trans-unit>
        <trans-unit id="c4676de1f2b8af7673ad60d0d802fc7e29d8da30" translate="yes" xml:space="preserve">
          <source>The Git object directory contains a &lt;code&gt;pack&lt;/code&gt; directory containing packfiles (with suffix &quot;.pack&quot;) and pack-indexes (with suffix &quot;.idx&quot;). The pack-indexes provide a way to lookup objects and navigate to their offset within the pack, but these must come in pairs with the packfiles. This pairing depends on the file names, as the pack-index differs only in suffix with its pack- file. While the pack-indexes provide fast lookup per packfile, this performance degrades as the number of packfiles increases, because abbreviations need to inspect every packfile and we are more likely to have a miss on our most-recently-used packfile. For some large repositories, repacking into a single packfile is not feasible due to storage space or excessive repack times.</source>
          <target state="translated">Gitオブジェクトディレクトリには、packfiles（接尾辞 &quot;.pack&quot;）とpack-indexes（接尾辞 &quot;.idx&quot;）を含む &lt;code&gt;pack&lt;/code&gt; ディレクトリが含まれています。 pack-indexesは、オブジェクトをルックアップしてパック内のオブジェクトのオフセットに移動する方法を提供しますが、これらはパックファイルとペアである必要があります。 pack-indexは、pack-ファイルのサフィックスのみが異なるため、このペアリングはファイル名に依存します。 pack-indexはpackfileごとの高速ルックアップを提供しますが、省略形はすべてのpackfileを検査する必要があり、最も最近使用されたpackfileを見逃す可能性が高いため、packfileの数が増えると、このパフォーマンスは低下します。大規模なリポジトリーの場合、単一のpackfileに再パックすることは、ストレージ・スペースまたは過度の再パック時間のために実行できません。</target>
        </trans-unit>
        <trans-unit id="a2329c4ac9f08d776040ac221ffa562b7323c3f6" translate="yes" xml:space="preserve">
          <source>The Git protocol gives better performance and reliability, but on a host with a web server set up, HTTP exports may be simpler to set up.</source>
          <target state="translated">Git プロトコルはパフォーマンスと信頼性を向上させますが、ウェブサーバーが設定されているホストでは、HTTP エクスポートの方が簡単に設定できるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1179b23d825b14c0a26acd1779bd21e4b7a2880e" translate="yes" xml:space="preserve">
          <source>The Git remote to import this CVS repository into. Moves all CVS branches into remotes/&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt; akin to the way &lt;code&gt;git clone&lt;/code&gt; uses &lt;code&gt;origin&lt;/code&gt; by default.</source>
          <target state="translated">このCVSリポジトリをインポートするGitリモート。 &lt;code&gt;git clone&lt;/code&gt; がデフォルトで &lt;code&gt;origin&lt;/code&gt; を使用する方法と同様に、すべてのCVSブランチをremotes / &amp;lt;remote&amp;gt; / &amp;lt;branch&amp;gt;に移動します。</target>
        </trans-unit>
        <trans-unit id="bd47eb27f30e04cbdc75cd21789edadd8836d3bb" translate="yes" xml:space="preserve">
          <source>The Git repository browser</source>
          <target state="translated">Git リポジトリブラウザ</target>
        </trans-unit>
        <trans-unit id="076055123196294023f50dc3852a8243be06956f" translate="yes" xml:space="preserve">
          <source>The Git repository browser. Shows branches, commit history and file differences. gitk is the utility started by &lt;code&gt;git gui&lt;/code&gt;'s Repository Visualize actions.</source>
          <target state="translated">Gitリポジトリブラウザー。ブランチ、コミット履歴、ファイルの違いを表示します。gitkは、 &lt;code&gt;git gui&lt;/code&gt; のリポジトリの視覚化アクションによって起動されるユーティリティです。</target>
        </trans-unit>
        <trans-unit id="703dfd23887a83d4329e915dd0bcbd7608c6b6a7" translate="yes" xml:space="preserve">
          <source>The Git repository to import to. If the directory doesn&amp;rsquo;t exist, it will be created. Default is the current directory.</source>
          <target state="translated">インポートするGitリポジトリ。ディレクトリが存在しない場合は作成されます。デフォルトは現在のディレクトリです。</target>
        </trans-unit>
        <trans-unit id="6970e04ce98d2b4a3b2c6e8de2880e4a745e2c4f" translate="yes" xml:space="preserve">
          <source>The HEAD then refers to the SHA-1 of the commit instead of to a branch, and git branch shows that you are no longer on a branch:</source>
          <target state="translated">そしてheadはブランチではなくコミットのSHA-1を参照し、git branchはあなたがブランチではなくなったことを示しています。</target>
        </trans-unit>
        <trans-unit id="895d60d2bce01273de11df4a950c78fe3184bcf0" translate="yes" xml:space="preserve">
          <source>The HTTP USER_AGENT string presented to an HTTP server. The default value represents the version of the client Git such as git/1.7.1. This option allows you to override this value to a more common value such as Mozilla/4.0. This may be necessary, for instance, if connecting through a firewall that restricts HTTP connections to a set of common USER_AGENT strings (but not including those like git/1.7.1). Can be overridden by the &lt;code&gt;GIT_HTTP_USER_AGENT&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPサーバーに提示されるHTTP USER_AGENT文字列。デフォルト値はgit / 1.7.1などのクライアントGitのバージョンを表します。このオプションを使用すると、この値をMozilla / 4.0などのより一般的な値に上書きできます。これは、たとえば、HTTP接続を一連の一般的なUSER_AGENT文字列（ただし、git / 1.7.1などは含まない）に制限するファイアウォールを介して接続する場合に必要になることがあります。 &lt;code&gt;GIT_HTTP_USER_AGENT&lt;/code&gt; 環境変数によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="00aa9820c66c0255936f6c8707aec2ad36a5c140" translate="yes" xml:space="preserve">
          <source>The HTTP daemon command-line that will be executed. Command-line options may be specified here, and the configuration file will be added at the end of the command-line. Currently apache2, lighttpd, mongoose, plackup, python and webrick are supported. (Default: lighttpd)</source>
          <target state="translated">実行される HTTP デーモンのコマンドライン。ここにコマンドラインオプションを指定すると、コマンドラインの最後に設定ファイルが追加されます。現在のところ apache2,lighttpd,mongoose,plackup,python,webrick がサポートされています。(デフォルト:lighttpd)</target>
        </trans-unit>
        <trans-unit id="adee6c32cf5372a9cc214e1cabc3f604f4a421cf" translate="yes" xml:space="preserve">
          <source>The HTTP daemon command-line to start gitweb on your working repository. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">作業リポジトリでgitwebを起動するためのHTTPデーモンコマンドライン。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a20118bebd861685578a19065b0fb24ab670ec89" translate="yes" xml:space="preserve">
          <source>The MIDX file format uses a chunk-based approach (similar to the commit-graph file) that allows optional data to be added.</source>
          <target state="translated">MIDXファイルフォーマットは、チャンクベースのアプローチ(commit-graphファイルに似ています)を使用しており、オプションのデータを追加することができます。</target>
        </trans-unit>
        <trans-unit id="64e372cd9f501c41226d338629f4adfe7884c507" translate="yes" xml:space="preserve">
          <source>The MIDX is stored in a file named &lt;code&gt;multi-pack-index&lt;/code&gt; in the .git/objects/pack directory. This could be stored in the pack directory of an alternate. It refers only to packfiles in that same directory.</source>
          <target state="translated">MIDXは、.git / objects / packディレクトリの &lt;code&gt;multi-pack-index&lt;/code&gt; という名前のファイルに保存されます。これは、代替のパックディレクトリに保存できます。同じディレクトリ内のパックファイルのみを参照します。</target>
        </trans-unit>
        <trans-unit id="be240040a2b303919e9f8b3f8c55bd2d4b871823" translate="yes" xml:space="preserve">
          <source>The MIDX keeps only one record per object ID. If an object appears in multiple packfiles, then the MIDX selects the copy in the most- recently modified packfile.</source>
          <target state="translated">MIDX はオブジェクト ID あたりのレコードを一つだけ保持します。あるオブジェクトが複数のパックファイルに含まれている場合、MIDX は最近変更されたパックファイルのコピーを選択します。</target>
        </trans-unit>
        <trans-unit id="d248ab48f510e2fbd4b16391dc71868ce2bb9eb7" translate="yes" xml:space="preserve">
          <source>The MUA corrupted your patch; &quot;am&quot; would complain that the patch does not apply. Look in the .git/rebase-apply/ subdirectory and see what &lt;code&gt;patch&lt;/code&gt; file contains and check for the common corruption patterns mentioned above.</source>
          <target state="translated">MUAがパッチを破壊しました。「am」はパッチが適用されないと不満を言うでしょう。.git / rebase-apply /サブディレクトリを見て、 &lt;code&gt;patch&lt;/code&gt; ファイルに含まれるものを確認し、上記の一般的な破損パターンを確認します。</target>
        </trans-unit>
        <trans-unit id="dcfedffa2e791a211c838c6711816e41fded8f05" translate="yes" xml:space="preserve">
          <source>The Normal Format Target</source>
          <target state="translated">通常のフォーマットターゲット</target>
        </trans-unit>
        <trans-unit id="500d32200a061b0c3eb8acb59a37b1ba3087273e" translate="yes" xml:space="preserve">
          <source>The Object Database</source>
          <target state="translated">オブジェクトデータベース</target>
        </trans-unit>
        <trans-unit id="b3b387e6e23160b9001074a3b231e88c333277a0" translate="yes" xml:space="preserve">
          <source>The PERF target is intended for interactive performance analysis during development and is quite noisy.</source>
          <target state="translated">PERFターゲットは、開発中のインタラクティブなパフォーマンス解析を目的としており、かなりノイズが多いです。</target>
        </trans-unit>
        <trans-unit id="716ba6c2a540215443944eab8349af10087e97bb" translate="yes" xml:space="preserve">
          <source>The Performance Format Target</source>
          <target state="translated">パフォーマンスフォーマットのターゲット</target>
        </trans-unit>
        <trans-unit id="ca04878afc5a61720c26b830b963e827e884a4f1" translate="yes" xml:space="preserve">
          <source>The SSL version to use when negotiating an SSL connection, if you want to force the default. The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the &lt;code&gt;CURLOPT_SSL_VERSION&lt;/code&gt; option; see the libcurl documentation for more details on the format of this option and for the ssl version supported. Actually the possible values of this option are:</source>
          <target state="translated">デフォルトを強制したい場合に、SSL接続のネゴシエーション時に使用するSSLバージョン。使用可能なデフォルトのバージョンは、libcurlがNSSとOpenSSLのどちらに対して構築されたか、および使用中の暗号ライブラリの特定の構成によって異なります。内部的には、これは &lt;code&gt;CURLOPT_SSL_VERSION&lt;/code&gt; オプションを設定します。このオプションの形式とサポートされているsslバージョンの詳細については、libcurlのドキュメントを参照してください。実際には、このオプションの可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="018a79839a5b69e87551f5d2d8901721b830b6f5" translate="yes" xml:space="preserve">
          <source>The SSL version to use when negotiating an SSL connection, if you want to force the default. The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the &lt;code&gt;CURLOPT_SSL_VERSION&lt;/code&gt; option; see the libcurl documentation for more details on the format of this option and for the ssl version supported. Currently the possible values of this option are:</source>
          <target state="translated">デフォルトを強制する場合に、SSL接続をネゴシエートするときに使用するSSLバージョン。使用可能なデフォルトバージョンは、libcurlがNSSまたはOpenSSLのどちらに対してビルドされたか、および使用中の暗号ライブラリの特定の構成によって異なります。内部的には、これにより &lt;code&gt;CURLOPT_SSL_VERSION&lt;/code&gt; オプションが設定されます。このオプションの形式とサポートされているSSLバージョンの詳細については、libcurlのドキュメントを参照してください。現在、このオプションの可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6c8d77384dcf5927fceefc0c82e6aa35599c0a0b" translate="yes" xml:space="preserve">
          <source>The Trace2 API can be used to print debug, performance, and telemetry information to stderr or a file. The Trace2 feature is inactive unless explicitly enabled by enabling one or more Trace2 Targets.</source>
          <target state="translated">Trace2 API を使用して、デバッグ、パフォーマンス、テレメトリ情報を stderr またはファイルに出力することができます。Trace2 機能は、1 つ以上の Trace2 Targets を有効にして明示的に有効にしない限り、非アクティブです。</target>
        </trans-unit>
        <trans-unit id="6bdbd91221731e97e635f28174406bd894d81047" translate="yes" xml:space="preserve">
          <source>The Trace2 API defines a set of high-level messages with known fields, such as (&lt;code&gt;start&lt;/code&gt;: &lt;code&gt;argv&lt;/code&gt;) and (&lt;code&gt;exit&lt;/code&gt;: {&lt;code&gt;exit-code&lt;/code&gt;, &lt;code&gt;elapsed-time&lt;/code&gt;}).</source>
          <target state="translated">Trace2 APIは、（ &lt;code&gt;start&lt;/code&gt; ： &lt;code&gt;argv&lt;/code&gt; ）や（ &lt;code&gt;exit&lt;/code&gt; ：{ &lt;code&gt;exit-code&lt;/code&gt; 、 &lt;code&gt;elapsed-time&lt;/code&gt; }）などの既知のフィールドを持つ一連の高レベルメッセージを定義します。</target>
        </trans-unit>
        <trans-unit id="c8d932fd39b46f7d652bfdd2be6511ab09fc4671" translate="yes" xml:space="preserve">
          <source>The Trace2 API is intended to replace the existing (Trace1) printf-style tracing provided by the existing &lt;code&gt;GIT_TRACE&lt;/code&gt; and &lt;code&gt;GIT_TRACE_PERFORMANCE&lt;/code&gt; facilities. During initial implementation, Trace2 and Trace1 may operate in parallel.</source>
          <target state="translated">Trace2 APIは、既存の &lt;code&gt;GIT_TRACE&lt;/code&gt; および &lt;code&gt;GIT_TRACE_PERFORMANCE&lt;/code&gt; 機能によって提供される既存の（Trace1）printfスタイルのトレースを置き換えることを目的としています。初期実装中、Trace2とTrace1は並行して動作します。</target>
        </trans-unit>
        <trans-unit id="a5397d7e9698d7ad87ff097450bf8a8e1a772416" translate="yes" xml:space="preserve">
          <source>The Trace2 code also defines a set of private functions and data types in the &lt;code&gt;trace2/&lt;/code&gt; directory. These symbols are prefixed with &lt;code&gt;tr2_&lt;/code&gt; and should only be used by functions in &lt;code&gt;trace2.c&lt;/code&gt;.</source>
          <target state="translated">Trace2コードは、 &lt;code&gt;trace2/&lt;/code&gt; ディレクトリにプライベート関数とデータ型のセットも定義します。これらのシンボルには接頭辞 &lt;code&gt;tr2_&lt;/code&gt; が付いており、trace2.cの関数でのみ使用する必要が &lt;code&gt;trace2.c&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8e231fe7d9a0eb53151c1a418399ded2fd9db9e8" translate="yes" xml:space="preserve">
          <source>The URL for a submodule. This variable is copied from the .gitmodules file to the git config via &lt;code&gt;git submodule init&lt;/code&gt;. The user can change the configured URL before obtaining the submodule via &lt;code&gt;git submodule update&lt;/code&gt;. If neither submodule.&amp;lt;name&amp;gt;.active or submodule.active are set, the presence of this variable is used as a fallback to indicate whether the submodule is of interest to git commands. See &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">サブモジュールのURL。この変数は、 &lt;code&gt;git submodule init&lt;/code&gt; を介して.gitmodulesファイルからgit configにコピーされます。ユーザーは、 &lt;code&gt;git submodule update&lt;/code&gt; を介してサブモジュールを取得する前に、構成されたURLを変更できます。 submodule。&amp;lt;name&amp;gt; .activeもsubmodule.activeも設定されていない場合、この変数の存在は、サブモジュールがgitコマンドに関係があるかどうかを示すフォールバックとして使用されます。詳細については、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="307f8458b88cd1196dc3047eb250fdb8e3348b46" translate="yes" xml:space="preserve">
          <source>The URL of a remote repository. See &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt; or &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">リモートリポジトリのURL。&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;または&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="92c06c873fe7803ddcdb456ba837dbd24d10b389" translate="yes" xml:space="preserve">
          <source>The URL to the remote repository.</source>
          <target state="translated">リモートリポジトリへのURLです。</target>
        </trans-unit>
        <trans-unit id="846d99295948de526a5621f0a520c5a9a78af747" translate="yes" xml:space="preserve">
          <source>The Workflow</source>
          <target state="translated">ワークフロー</target>
        </trans-unit>
        <trans-unit id="91d8165377483e9123ecf4a3d5455b3b1999d185" translate="yes" xml:space="preserve">
          <source>The above can also be written as simply</source>
          <target state="translated">上記のように単純に書くこともできます。</target>
        </trans-unit>
        <trans-unit id="13c712cb6756cc53fb3407886d0503d18cb537c0" translate="yes" xml:space="preserve">
          <source>The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace, unless the branch.&amp;lt;name&amp;gt;.fetch option is used to specify a non-default refspec.</source>
          <target state="translated">上記のコマンドは、branch。&amp;lt;name&amp;gt; .fetchオプションを使用してデフォルト以外のrefspecを指定しない限り、リモートrefs / heads /ネームスペースからすべてのブランチをコピーし、ローカルrefs / remotes / origin /ネームスペースに保存します。</target>
        </trans-unit>
        <trans-unit id="61e1efd32cbb415eea7b734b98558317a6d1aac3" translate="yes" xml:space="preserve">
          <source>The above command would change the origin repository to</source>
          <target state="translated">上記のコマンドは、オリジンのリポジトリを</target>
        </trans-unit>
        <trans-unit id="cc504649b9359e7717badcdf0f10e04d6127c3a0" translate="yes" xml:space="preserve">
          <source>The above configuration expects your public repositories to live under &lt;code&gt;/pub/git&lt;/code&gt; and will serve them as &lt;code&gt;http://git.domain.org/dir-under-pub-git&lt;/code&gt;, both as clonable Git URL and as browseable gitweb interface. If you then start your &lt;a href=&quot;git-daemon&quot;&gt;git-daemon[1]&lt;/a&gt; with &lt;code&gt;--base-path=/pub/git --export-all&lt;/code&gt; then you can even use the &lt;code&gt;git://&lt;/code&gt; URL with exactly the same path.</source>
          <target state="translated">上記の構成では、パブリックリポジトリが &lt;code&gt;/pub/git&lt;/code&gt; の下にあることが想定されており、 &lt;code&gt;http://git.domain.org/dir-under-pub-git&lt;/code&gt; ：//git.domain.org/dir-under-pub-gitとして、クローン可能なGit URLとブラウズ可能なgitwebインターフェースの両方として機能します。次に&lt;a href=&quot;git-daemon&quot;&gt;git-daemon [1]&lt;/a&gt;を &lt;code&gt;--base-path=/pub/git --export-all&lt;/code&gt; で開始すると、 &lt;code&gt;git://&lt;/code&gt; URLをまったく同じパスで使用することもできます。</target>
        </trans-unit>
        <trans-unit id="baa5f35656f9b3f3ba646932132fa97233a197b9" translate="yes" xml:space="preserve">
          <source>The above is all you need to know to resolve a simple merge. But Git also provides more information to help resolve conflicts:</source>
          <target state="translated">単純なマージを解決するために知っておくべきことは以上です。しかし、Git は競合の解決に役立つ情報も提供しています。</target>
        </trans-unit>
        <trans-unit id="70fce3bc08ea4ed40bcc99c52f88c26bd24f0b87" translate="yes" xml:space="preserve">
          <source>The above is the description of a Git merge at the lowest level, to help you understand what conceptually happens under the hood. In practice, nobody, not even Git itself, runs &lt;code&gt;git cat-file&lt;/code&gt; three times for this. There is a &lt;code&gt;git merge-index&lt;/code&gt; program that extracts the stages to temporary files and calls a &quot;merge&quot; script on it:</source>
          <target state="translated">上記は、最下位レベルでのGitマージの説明であり、概念的に内部で何が起こるかを理解するのに役立ちます。実際には、Gitでさえも、誰も &lt;code&gt;git cat-file&lt;/code&gt; を 3回実行していない。あり &lt;code&gt;git merge-index&lt;/code&gt; プログラムは、一時ファイルに抽出段階ということと、その上に「マージ」のスクリプトを呼び出します。</target>
        </trans-unit>
        <trans-unit id="eb77c0d462477bf4637c28037a03befbbf605c33" translate="yes" xml:space="preserve">
          <source>The absolute path to the worktree in which the ref is checked out, if it is checked out in any linked worktree. Empty string otherwise.</source>
          <target state="translated">リンクされたワークツリーでチェックアウトされている場合、参照がチェックアウトされているワークツリーへの絶対パスを指定します。それ以外の場合は空文字列。</target>
        </trans-unit>
        <trans-unit id="76cd9fb4bfcc53cf44ccfea4ed1923acc958405e" translate="yes" xml:space="preserve">
          <source>The accepted attributes are &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;dim&lt;/code&gt;, &lt;code&gt;ul&lt;/code&gt;, &lt;code&gt;blink&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, and &lt;code&gt;strike&lt;/code&gt; (for crossed-out or &quot;strikethrough&quot; letters). The position of any attributes with respect to the colors (before, after, or in between), doesn&amp;rsquo;t matter. Specific attributes may be turned off by prefixing them with &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;no-&lt;/code&gt; (e.g., &lt;code&gt;noreverse&lt;/code&gt;, &lt;code&gt;no-ul&lt;/code&gt;, etc).</source>
          <target state="translated">受け入れられた属性は、 &lt;code&gt;bold&lt;/code&gt; 、 &lt;code&gt;dim&lt;/code&gt; 、 &lt;code&gt;ul&lt;/code&gt; 、 &lt;code&gt;blink&lt;/code&gt; 、 &lt;code&gt;reverse&lt;/code&gt; 、 &lt;code&gt;italic&lt;/code&gt; 、および &lt;code&gt;strike&lt;/code&gt; （アウト交差または「取り消し線」の文字のため）。色に関する属性の位置（前、後、または中間）は関係ありません。特定の属性は、それらに接頭辞 &lt;code&gt;no&lt;/code&gt; または &lt;code&gt;no-&lt;/code&gt; を付けてオフにすることができます（たとえば、 &lt;code&gt;noreverse&lt;/code&gt; 、 &lt;code&gt;no-ul&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="0bb8a69a5cde6b982a60a95e4956ebdf1a59fa5f" translate="yes" xml:space="preserve">
          <source>The accepted patterns in the cone pattern set are:</source>
          <target state="translated">コーンパターンセットで受け入れられているパターンは、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ec26e1bb6d1ddd903fea6ea4b1aec39f9a4bdff7" translate="yes" xml:space="preserve">
          <source>The action of fixing up manually what a failed automatic &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; left behind.</source>
          <target state="translated">失敗した自動&lt;a href=&quot;#def_merge&quot;&gt;マージが&lt;/a&gt;残したものを手動で修正するアクション。</target>
        </trans-unit>
        <trans-unit id="91929f919cdca3ddad9711d4446a1108e24ab05c" translate="yes" xml:space="preserve">
          <source>The action of updating all or part of the &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt; with a &lt;a href=&quot;#def_tree_object&quot;&gt;tree object&lt;/a&gt; or &lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt; from the &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt;, and updating the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; and &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; if the whole working tree has been pointed at a new &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;.</source>
          <target state="translated">全部または一部の更新のアクション&lt;a href=&quot;#def_working_tree&quot;&gt;作業ツリー&lt;/a&gt;と&lt;a href=&quot;#def_tree_object&quot;&gt;ツリーオブジェクト&lt;/a&gt;または&lt;a href=&quot;#def_blob_object&quot;&gt;BLOB&lt;/a&gt;から&lt;a href=&quot;#def_object_database&quot;&gt;オブジェクトデータベース&lt;/a&gt;、および更新&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;と&lt;a href=&quot;#def_HEAD&quot;&gt;HEADの&lt;/a&gt;全作業ツリーが新しいで指摘されている場合は&lt;a href=&quot;#def_branch&quot;&gt;、分岐&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bf91c6dac7e4978798d8310657f124dd799f4bf4" translate="yes" xml:space="preserve">
          <source>The action that will be run. Defaults to &lt;code&gt;projects_list&lt;/code&gt; if repo is not set, and to &lt;code&gt;summary&lt;/code&gt; otherwise.</source>
          <target state="translated">実行されるアクション。リポジトリが設定されていない場合、デフォルトで &lt;code&gt;projects_list&lt;/code&gt; になり、それ以外の場合は &lt;code&gt;summary&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e262b52287502541a33fa85d5cf2fdae897da448" translate="yes" xml:space="preserve">
          <source>The active branch LRU, when coupled with the filename string pool and lazy loading of subtrees, allows fast-import to efficiently import projects with 2,000+ branches and 45,114+ files in a very limited memory footprint (less than 2.7 MiB per active branch).</source>
          <target state="translated">アクティブブランチの LRU は、ファイル名の文字列プールとサブツリーの遅延ロードと組み合わせることで、2,000 以上のブランチと 45,114 以上のファイルを持つプロジェクトを、非常に限られたメモリフットプリント(アクティブブランチあたり 2.7 MiB 以下)で効率的に高速インポートすることができます。</target>
        </trans-unit>
        <trans-unit id="5b37048d4139b83b97c29aa7a22d2da66c283ae2" translate="yes" xml:space="preserve">
          <source>The actual configuration line should be on one line.</source>
          <target state="translated">実際の設定行は1行にしてください。</target>
        </trans-unit>
        <trans-unit id="b70c0ba474f3173fff896ac2745af10a69e6cc3b" translate="yes" xml:space="preserve">
          <source>The additional AliasMatch makes it so that</source>
          <target state="translated">エイリアスマッチを追加することで</target>
        </trans-unit>
        <trans-unit id="d6139a3bd26979c3a7767519a48aa9c385b73634" translate="yes" xml:space="preserve">
          <source>The advantage of doing this is that the history of &lt;code&gt;next&lt;/code&gt; will be clean. For example, some topics merged into &lt;code&gt;next&lt;/code&gt; may have initially looked promising, but were later found to be undesirable or premature. In such a case, the topic is reverted out of &lt;code&gt;next&lt;/code&gt; but the fact remains in the history that it was once merged and reverted. By recreating &lt;code&gt;next&lt;/code&gt;, you give another incarnation of such topics a clean slate to retry, and a feature release is a good point in history to do so.</source>
          <target state="translated">これを行う利点は、 &lt;code&gt;next&lt;/code&gt; の履歴がクリーンになることです。たとえば、 &lt;code&gt;next&lt;/code&gt; トピックにマージされた一部のトピックは、最初は有望に見えたかもしれませんが、後で望ましくないか、時期尚早であることが判明しました。そのような場合、トピックは &lt;code&gt;next&lt;/code&gt; トピックに戻されますが、一度マージされて戻されたという事実は履歴に残ります。 &lt;code&gt;next&lt;/code&gt; を再作成することにより、そのようなトピックの別の具体化を再試行するための白紙の状態にして、機能リリースはそうするための歴史の良いポイントです。</target>
        </trans-unit>
        <trans-unit id="2f1746fed6139a8489ee3d916322bdcbeb17e684" translate="yes" xml:space="preserve">
          <source>The advantage of using an external diff command is flexibility. You are not bound to find line-oriented changes, nor is it necessary for the output to resemble unified diff. You are free to locate and report changes in the most appropriate way for your data format.</source>
          <target state="translated">外部の diff コマンドを使用する利点は柔軟性です。ライン指向の変更を見つける必要はありませんし、出力が統一されたdiffに似ている必要もありません。データ形式に最も適した方法で変更を見つけて報告することができます。</target>
        </trans-unit>
        <trans-unit id="37f935f00ace4f7aca8e441adbbf1abe0704a83a" translate="yes" xml:space="preserve">
          <source>The am backend drops any &quot;empty&quot; commits, regardless of whether the commit started empty (had no changes relative to its parent to start with) or ended empty (all changes were already applied upstream in other commits).</source>
          <target state="translated">am バックエンドは、そのコミットが空の状態で始まった (親からの相対的な変更がない)か、空の状態で終わった (すべての変更が他のコミットの上流ですでに適用されていた)かにかかわらず、&quot;空の&quot; コミットを削除します。</target>
        </trans-unit>
        <trans-unit id="dca841501c279516ee09991304a0c48e7701d81e" translate="yes" xml:space="preserve">
          <source>The apply backend has not traditionally called the post-commit hook, while the merge backend has. Both have called the post-checkout hook, though the merge backend has squelched its output. Further, both backends only call the post-checkout hook with the starting point commit of the rebase, not the intermediate commits nor the final commit. In each case, the calling of these hooks was by accident of implementation rather than by design (both backends were originally implemented as shell scripts and happened to invoke other commands like &lt;code&gt;git checkout&lt;/code&gt; or &lt;code&gt;git commit&lt;/code&gt; that would call the hooks). Both backends should have the same behavior, though it is not entirely clear which, if any, is correct. We will likely make rebase stop calling either of these hooks in the future.</source>
          <target state="translated">アプライバックエンドは従来、ポストコミットフックを呼び出していませんでしたが、マージバックエンドは呼び出しています。マージバックエンドがその出力を圧縮しましたが、両方ともチェックアウト後のフックを呼び出しました。さらに、両方のバックエンドは、中間コミットや最終コミットではなく、リベースの開始点コミットでチェックアウト後フックを呼び出すだけです。それぞれのケースにおいて、これらのフックの呼び出しは、（両方のバックエンドは、もともとシェルスクリプトとして実装など、他のコマンドを呼び出すために起こった実装のではなく、デザインによって偶然だった &lt;code&gt;git checkout&lt;/code&gt; または &lt;code&gt;git commit&lt;/code&gt; フックを呼ぶようなことを）。どちらが正しいかは完全には明らかではありませんが、両方のバックエンドの動作は同じである必要があります。将来的には、リベースがこれらのフックのいずれかを呼び出すのを停止する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2d847a3833f639a38bf6461e5e337a484ba4ec15" translate="yes" xml:space="preserve">
          <source>The apply backend has safety problems with an ill-timed interrupt; if the user presses Ctrl-C at the wrong time to try to abort the rebase, the rebase can enter a state where it cannot be aborted with a subsequent &lt;code&gt;git rebase --abort&lt;/code&gt;. The merge backend does not appear to suffer from the same shortcoming. (See &lt;a href=&quot;https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/&quot;&gt;https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/&lt;/a&gt; for details.)</source>
          <target state="translated">適用バックエンドには、タイミングの悪い割り込みによる安全上の問題があります。ユーザーが間違ったタイミングでCtrl-Cを押してリベースを中止しようとすると、リベースは、後続の &lt;code&gt;git rebase --abort&lt;/code&gt; で中止できない状態になる可能性があります。マージバックエンドは、同じ欠点に悩まされているようには見えません。（詳細については、&lt;a href=&quot;https://lore.kernel.org/git/20200207132152.GC2868@szeder.dev/&quot;&gt;https：//lore.kernel.org/git/20200207132152.GC2868@szeder.dev/&lt;/a&gt;を参照してください。）</target>
        </trans-unit>
        <trans-unit id="dee2d136841d9fd2b1d297f54743df3833db5f0a" translate="yes" xml:space="preserve">
          <source>The apply backend unfortunately drops intentionally empty commits, i.e. commits that started empty, though these are rare in practice. It also drops commits that become empty and has no option for controlling this behavior.</source>
          <target state="translated">apply バックエンドは残念ながら意図的に空のコミットを削除します。また、空になったコミットも削除してしまい、この動作を制御するオプションはありません。</target>
        </trans-unit>
        <trans-unit id="589a509b2859f73d9f2a04b58c811ba95394014f" translate="yes" xml:space="preserve">
          <source>The apply backend works by creating a sequence of patches (by calling &lt;code&gt;format-patch&lt;/code&gt; internally), and then applying the patches in sequence (calling &lt;code&gt;am&lt;/code&gt; internally). Patches are composed of multiple hunks, each with line numbers, a context region, and the actual changes. The line numbers have to be taken with some fuzz, since the other side will likely have inserted or deleted lines earlier in the file. The context region is meant to help find how to adjust the line numbers in order to apply the changes to the right lines. However, if multiple areas of the code have the same surrounding lines of context, the wrong one can be picked. There are real-world cases where this has caused commits to be reapplied incorrectly with no conflicts reported. Setting diff.context to a larger value may prevent such types of problems, but increases the chance of spurious conflicts (since it will require more lines of matching context to apply).</source>
          <target state="translated">アプライバックエンドは、パッチのシーケンスを作成し（ &lt;code&gt;format-patch&lt;/code&gt; を内部的に呼び出すことにより）、次にパッチを順番に適用することによって機能します（ &lt;code&gt;am&lt;/code&gt; を呼び出す）内部的に）。パッチは複数のハンクで構成され、それぞれに行番号、コンテキストリージョン、および実際の変更が含まれています。反対側がファイルの前半で行を挿入または削除した可能性があるため、行番号は多少のあいまいさを伴って取得する必要があります。コンテキスト領域は、変更を適切な行に適用するために行番号を調整する方法を見つけるのに役立つことを目的としています。ただし、コードの複数の領域に同じ周囲のコンテキスト行がある場合、間違ったものが選択される可能性があります。これにより、競合が報告されずにコミットが誤って再適用されるという実際のケースがあります。 diff.contextをより大きな値に設定すると、このようなタイプの問題を防ぐことができますが、誤った競合の可能性が高くなります（適用するには、一致するコンテキストの行が増えるため）。</target>
        </trans-unit>
        <trans-unit id="013053835d145f0cc494db8211a188c9999bae09" translate="yes" xml:space="preserve">
          <source>The area where a pair of conflicting changes happened is marked with markers &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;=======&lt;/code&gt;, and &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. The part before the &lt;code&gt;=======&lt;/code&gt; is typically your side, and the part afterwards is typically their side.</source>
          <target state="translated">競合する変更のペアが起こった領域は、マーカーでマークされ &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;=======&lt;/code&gt; 、そして &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;=======&lt;/code&gt; の前の部分は通常あなたの側であり、その後の部分は通常彼らの側です。</target>
        </trans-unit>
        <trans-unit id="bbce7a566319a0fa5122538fad84df16b94a33f3" translate="yes" xml:space="preserve">
          <source>The argument to this option may be a glob on ref names, a ref, or the (possibly abbreviated) SHA-1 of a commit. Specifying a glob is equivalent to specifying this option multiple times, one for each matching ref name.</source>
          <target state="translated">このオプションの引数には、ref 名のグロブ、ref、またはコミットの (省略された)SHA-1 を指定することができます。glob を指定することは、このオプションを複数回指定することと同等です。</target>
        </trans-unit>
        <trans-unit id="6083c463b2a8fa637d23cd99c59e9746cb6a7539" translate="yes" xml:space="preserve">
          <source>The attribute &lt;code&gt;diff&lt;/code&gt; affects how Git generates diffs for particular files. It can tell Git whether to generate a textual patch for the path or to treat the path as a binary file. It can also affect what line is shown on the hunk header &lt;code&gt;@@ -k,l +n,m @@&lt;/code&gt; line, tell Git to use an external command to generate the diff, or ask Git to convert binary files to a text format before generating the diff.</source>
          <target state="translated">属性 &lt;code&gt;diff&lt;/code&gt; は、Gitが特定のファイルのdiffを生成する方法に影響します。パスのテキストパッチを生成するか、パスをバイナリファイルとして扱うかをGitに指示できます。また、ハンクヘッダー &lt;code&gt;@@ -k,l +n,m @@&lt;/code&gt; 行に表示される行に影響を与える、Gitに外部コマンドを使用してdiffを生成する、またはバイナリファイルをテキスト形式に変換するようにGitに要求する差分を生成します。</target>
        </trans-unit>
        <trans-unit id="e3fef41e3a691b83ea57e915fd492f173e96b0ec" translate="yes" xml:space="preserve">
          <source>The attribute &lt;code&gt;merge&lt;/code&gt; affects how three versions of a file are merged when a file-level merge is necessary during &lt;code&gt;git merge&lt;/code&gt;, and other commands such as &lt;code&gt;git revert&lt;/code&gt; and &lt;code&gt;git cherry-pick&lt;/code&gt;.</source>
          <target state="translated">属性の &lt;code&gt;merge&lt;/code&gt; は、 &lt;code&gt;git merge&lt;/code&gt; 、および &lt;code&gt;git revert&lt;/code&gt; や &lt;code&gt;git cherry-pick&lt;/code&gt; などの他のコマンド中にファイルレベルのマージが必要な場合に、ファイルの3つのバージョンがどのようにマージされるかに影響します。</target>
        </trans-unit>
        <trans-unit id="2fe7b4a122d21c0258f6159b6aeead7d915c58b4" translate="yes" xml:space="preserve">
          <source>The attributes allow a fine-grained control, how the line endings are converted. Here is an example that will make Git normalize .txt, .vcproj and .sh files, ensure that .vcproj files have CRLF and .sh files have LF in the working directory, and prevent .jpg files from being normalized regardless of their content.</source>
          <target state="translated">属性は、行末をどのように変換するかを細かく制御することができます。次の例は、Git が .txt、.vcproj、.sh ファイルを正規化し、.vcproj ファイルが CRLF、.sh ファイルが作業ディレクトリに LF を持つようにし、.jpg ファイルが内容に関係なく正規化されないようにするものです。</target>
        </trans-unit>
        <trans-unit id="d53ffa6d811b54f0c7bdf879ab5abd1f6c7675e8" translate="yes" xml:space="preserve">
          <source>The author and committer names are by convention some form of a personal name (that is, the name by which other humans refer to you), although Git does not enforce or require any particular form. Arbitrary Unicode may be used, subject to the constraints listed above. This name has no effect on authentication; for that, see the &lt;code&gt;credential.username&lt;/code&gt; variable in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">作者とコミッターの名前は、慣例により、何らかの形式の個人名（つまり、他の人間があなたを参照する名前）ですが、Gitは特定の形式を強制または要求しません。上記の制約に従って、任意のUnicodeを使用できます。この名前は認証には影響しません。そのためには、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の &lt;code&gt;credential.username&lt;/code&gt; 変数を参照してください。</target>
        </trans-unit>
        <trans-unit id="0849ab3d36b0ce6d3f6183dc21f6e83ad1520176" translate="yes" xml:space="preserve">
          <source>The author name and email address to use when no author information can be found in the patch description.</source>
          <target state="translated">パッチの説明に作者情報がない場合に使用する作者名とメールアドレス。</target>
        </trans-unit>
        <trans-unit id="b012a2641006f12bad01716515743698d7deabe2" translate="yes" xml:space="preserve">
          <source>The author of a piece of code.</source>
          <target state="translated">コードの一部の作者。</target>
        </trans-unit>
        <trans-unit id="147440e8e5aa984c82659720dc655a2dca5add95" translate="yes" xml:space="preserve">
          <source>The backend process sets GIT_COMMITTER_NAME to &lt;code&gt;$REMOTE_USER&lt;/code&gt; and GIT_COMMITTER_EMAIL to &lt;code&gt;${REMOTE_USER}@http.${REMOTE_ADDR}&lt;/code&gt;, ensuring that any reflogs created by &lt;code&gt;git-receive-pack&lt;/code&gt; contain some identifying information of the remote user who performed the push.</source>
          <target state="translated">バックエンドプロセスは、GIT_COMMITTER_NAMEを &lt;code&gt;$REMOTE_USER&lt;/code&gt; 設定し、GIT_COMMITTER_EMAILを &lt;code&gt;${REMOTE_USER}@http.${REMOTE_ADDR}&lt;/code&gt; に設定して、 &lt;code&gt;git-receive-pack&lt;/code&gt; によって作成されたreflogに、プッシュを実行したリモートユーザーの識別情報が含まれるようにします。</target>
        </trans-unit>
        <trans-unit id="6488cea0d1ed89be90f43d74ec74b5b3ce12a473" translate="yes" xml:space="preserve">
          <source>The background maintenance schedule runs &lt;code&gt;git maintenance run&lt;/code&gt; processes on an hourly basis. Each run executes the &quot;hourly&quot; tasks. At midnight, that process also executes the &quot;daily&quot; tasks. At midnight on the first day of the week, that process also executes the &quot;weekly&quot; tasks. A single process iterates over each registered repository, performing the scheduled tasks for that frequency. Depending on the number of registered repositories and their sizes, this process may take longer than an hour. In this case, multiple &lt;code&gt;git maintenance run&lt;/code&gt; commands may run on the same repository at the same time, colliding on the object database lock. This results in one of the two tasks not running.</source>
          <target state="translated">バックグラウンドメンテナンススケジュールは、1時間ごとに &lt;code&gt;git maintenance run&lt;/code&gt; プロセスを実行します。実行するたびに、「毎時」のタスクが実行されます。深夜に、そのプロセスは「毎日の」タスクも実行します。週の最初の日の深夜に、そのプロセスは「毎週」のタスクも実行します。単一のプロセスが登録された各リポジトリを反復処理し、その頻度でスケジュールされたタスクを実行します。登録されているリポジトリの数とそのサイズによっては、このプロセスに1時間以上かかる場合があります。この場合、複数の &lt;code&gt;git maintenance run&lt;/code&gt; コマンドが同じリポジトリで同時に実行され、オブジェクトデータベースのロックに衝突する可能性があります。これにより、2つのタスクのいずれかが実行されなくなります。</target>
        </trans-unit>
        <trans-unit id="21e5e59ef58a1f64125adda00de18248644f6705" translate="yes" xml:space="preserve">
          <source>The base object could also be deltified if it&amp;rsquo;s in the same pack. Ref-delta can also refer to an object outside the pack (i.e. the so-called &quot;thin pack&quot;). When stored on disk however, the pack should be self contained to avoid cyclic dependency.</source>
          <target state="translated">同じオブジェクトに含まれている場合、ベースオブジェクトもデリティファイされる可能性があります。Ref-deltaは、パック外のオブジェクト（つまり、いわゆる「シンパック」）を参照することもできます。ただし、ディスクに格納する場合、循環依存を回避するためにパックは自己完結型である必要があります。</target>
        </trans-unit>
        <trans-unit id="1877d075d52f12eee201f2607da0c072a35f24bc" translate="yes" xml:space="preserve">
          <source>The base tree information block is used for maintainers or third party testers to know the exact state the patch series applies to. It consists of the &lt;code&gt;base commit&lt;/code&gt;, which is a well-known commit that is part of the stable part of the project history everybody else works off of, and zero or more &lt;code&gt;prerequisite patches&lt;/code&gt;, which are well-known patches in flight that is not yet part of the &lt;code&gt;base commit&lt;/code&gt; that need to be applied on top of &lt;code&gt;base commit&lt;/code&gt; in topological order before the patches can be applied.</source>
          <target state="translated">ベースツリー情報ブロックは、メンテナーまたはサードパーティのテスターがパッチシリーズが適用される正確な状態を知るために使用されます。それは、他の誰もが作業するプロジェクト履歴の安定した部分の一部であるよく知られた &lt;code&gt;base commit&lt;/code&gt; である基本コミットと、まだ実行されていない進行中のよく知られたパッチであるゼロ以上の &lt;code&gt;prerequisite patches&lt;/code&gt; で構成されますパッチを適用する前に、トポロジー順に &lt;code&gt;base commit&lt;/code&gt; 上に適用する必要がある &lt;code&gt;base commit&lt;/code&gt; 一部。</target>
        </trans-unit>
        <trans-unit id="dc39b1b9637026dfb15dfa743421fbe1dc2277e7" translate="yes" xml:space="preserve">
          <source>The basic colors accepted are &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt; and &lt;code&gt;white&lt;/code&gt;. The first color given is the foreground; the second is the background.</source>
          <target state="translated">受け入れられる基本色は、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;black&lt;/code&gt; 、 &lt;code&gt;red&lt;/code&gt; 、 &lt;code&gt;green&lt;/code&gt; 、 &lt;code&gt;yellow&lt;/code&gt; 、 &lt;code&gt;blue&lt;/code&gt; 、 &lt;code&gt;magenta&lt;/code&gt; 、 &lt;code&gt;cyan&lt;/code&gt; 、 &lt;code&gt;white&lt;/code&gt; です。与えられた最初の色は前景です。2番目は背景です。</target>
        </trans-unit>
        <trans-unit id="7566284af8c415df7ee8fe07fa92e83ad558993b" translate="yes" xml:space="preserve">
          <source>The basic colors accepted are &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt; and &lt;code&gt;white&lt;/code&gt;. The first color given is the foreground; the second is the background. All the basic colors except &lt;code&gt;normal&lt;/code&gt; have a bright variant that can be specified by prefixing the color with &lt;code&gt;bright&lt;/code&gt;, like &lt;code&gt;brightred&lt;/code&gt;.</source>
          <target state="translated">受け入れられる基本色は、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;black&lt;/code&gt; 、 &lt;code&gt;red&lt;/code&gt; 、 &lt;code&gt;green&lt;/code&gt; 、 &lt;code&gt;yellow&lt;/code&gt; 、 &lt;code&gt;blue&lt;/code&gt; 、 &lt;code&gt;magenta&lt;/code&gt; 、 &lt;code&gt;cyan&lt;/code&gt; 、 &lt;code&gt;white&lt;/code&gt; です。与えられた最初の色は前景です。2番目は背景です。 &lt;code&gt;normal&lt;/code&gt; を除くすべての基本色には、 &lt;code&gt;brightred&lt;/code&gt; のように、色の前に &lt;code&gt;bright&lt;/code&gt; を付けることで指定できる明るいバリアントがあります。</target>
        </trans-unit>
        <trans-unit id="440eb92d2667463744ad365910f079c5b0c24b8b" translate="yes" xml:space="preserve">
          <source>The basic colors accepted are &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt; and &lt;code&gt;white&lt;/code&gt;. The first color given is the foreground; the second is the background. All the basic colors except &lt;code&gt;normal&lt;/code&gt; have a bright variant that can be speficied by prefixing the color with &lt;code&gt;bright&lt;/code&gt;, like &lt;code&gt;brightred&lt;/code&gt;.</source>
          <target state="translated">受け入れられる基本色は、 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;black&lt;/code&gt; 、 &lt;code&gt;red&lt;/code&gt; 、 &lt;code&gt;green&lt;/code&gt; 、 &lt;code&gt;yellow&lt;/code&gt; 、 &lt;code&gt;blue&lt;/code&gt; 、 &lt;code&gt;magenta&lt;/code&gt; 、 &lt;code&gt;cyan&lt;/code&gt; 、 &lt;code&gt;white&lt;/code&gt; です。与えられた最初の色は前景です。2番目は背景です。除くすべての基本色 &lt;code&gt;normal&lt;/code&gt; で色を付けることによってspeficiedすることができ、明るいバリアント持って &lt;code&gt;bright&lt;/code&gt; ように、 &lt;code&gt;brightred&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d4e1b119ab89bbecfc6f0f5d854268dcecbb088f" translate="yes" xml:space="preserve">
          <source>The basic form described in DESCRIPTION with a Git directory, a working directory, a &lt;code&gt;gitlink&lt;/code&gt;, and a &lt;code&gt;.gitmodules&lt;/code&gt; entry.</source>
          <target state="translated">「Gitディレクトリ」、「作業ディレクトリ」、「 &lt;code&gt;gitlink&lt;/code&gt; 」、および「 &lt;code&gt;.gitmodules&lt;/code&gt; 」エントリを含む「説明」で説明されている基本的な形式。</target>
        </trans-unit>
        <trans-unit id="b21f7863c055f0aa6938a038ffa25acf7017fe84" translate="yes" xml:space="preserve">
          <source>The basic greedy diff algorithm. Currently, this is the default.</source>
          <target state="translated">基本的な貪欲な差分アルゴリズムです。現在のところ、これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="ebbd31d9dd00322abaa4bb83a8b03f787c70d43c" translate="yes" xml:space="preserve">
          <source>The basic requirements:</source>
          <target state="translated">基本的な要件です。</target>
        </trans-unit>
        <trans-unit id="675f96a5f033def81701bda4e874ec2fbad8a388" translate="yes" xml:space="preserve">
          <source>The below documentation is the same as what&amp;rsquo;s found in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;:</source>
          <target state="translated">以下のドキュメントは&lt;a href=&quot;git-config&quot;&gt;git-config [1]にある&lt;/a&gt;ものと同じです：</target>
        </trans-unit>
        <trans-unit id="f55762f9996c39bda184001319965b733714f313" translate="yes" xml:space="preserve">
          <source>The best way to get one is by using the &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; command to download a copy of an existing repository. If you don&amp;rsquo;t already have a project in mind, here are some interesting examples:</source>
          <target state="translated">これを取得する最良の方法は、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;コマンドを使用して既存のリポジトリのコピーをダウンロードすることです。まだプロジェクトを考えていない場合は、興味深い例をいくつか示します。</target>
        </trans-unit>
        <trans-unit id="e2b6c88cac94cf24687d4ba9657759c1ab28582a" translate="yes" xml:space="preserve">
          <source>The best way to see how this works is using the &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; command; running gitk now on a Git repository and looking for merge commits will help understand how Git organizes history.</source>
          <target state="translated">これがどのように機能するかを確認する最良の方法は、&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;コマンドを使用することです。Gitリポジトリでgitkを実行してマージコミットを探すと、Gitが履歴を整理する方法を理解するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="8130ad227eb2e1ffe8f116dc4280c5919bb4cd97" translate="yes" xml:space="preserve">
          <source>The branch &lt;code&gt;test&lt;/code&gt; is short for &lt;code&gt;refs/heads/test&lt;/code&gt;.</source>
          <target state="translated">ブランチ &lt;code&gt;test&lt;/code&gt; は &lt;code&gt;refs/heads/test&lt;/code&gt; の略です。</target>
        </trans-unit>
        <trans-unit id="420b2dd61e4562065a5bd273fcdbaecde70d1742" translate="yes" xml:space="preserve">
          <source>The branch LRU builtin to fast-import tends to behave very well, and the cost of activating an inactive branch is so low that bouncing around between branches has virtually no impact on import performance.</source>
          <target state="translated">fast-import に組み込まれたブランチ LRU は非常にうまく動作する傾向があり、非アクティブなブランチをアクティブにするコストは非常に低く、ブランチ間を行き来してもインポートのパフォーマンスにはほとんど影響を与えません。</target>
        </trans-unit>
        <trans-unit id="58be5b6cbe7d7c0a923608fe1415c68702e2aa84" translate="yes" xml:space="preserve">
          <source>The chain of operation</source>
          <target state="translated">動作の連鎖</target>
        </trans-unit>
        <trans-unit id="cb0b83bdafd60672fc0fb681d6c09ff33adfb7dc" translate="yes" xml:space="preserve">
          <source>The changes are still visible in the submodule&amp;rsquo;s reflog.</source>
          <target state="translated">変更は引き続きサブモジュールのreflogに表示されます。</target>
        </trans-unit>
        <trans-unit id="e18a17400a7fdeb34351715eb209f43bb56b69d6" translate="yes" xml:space="preserve">
          <source>The clone command creates a new directory named after the project (&lt;code&gt;git&lt;/code&gt; or &lt;code&gt;linux&lt;/code&gt; in the examples above). After you cd into this directory, you will see that it contains a copy of the project files, called the &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt;, together with a special top-level directory named &lt;code&gt;.git&lt;/code&gt;, which contains all the information about the history of the project.</source>
          <target state="translated">cloneコマンドは、プロジェクトにちなんだ名前の新しいディレクトリを作成します（上記の例では &lt;code&gt;git&lt;/code&gt; または &lt;code&gt;linux&lt;/code&gt; ）。このディレクトリにcd すると、「&lt;a href=&quot;#def_working_tree&quot;&gt;作業ツリー&lt;/a&gt;」と呼ばれるプロジェクトファイルのコピーと、プロジェクトの履歴に関するすべての情報を含む &lt;code&gt;.git&lt;/code&gt; という名前の特別な最上位ディレクトリが含まれていることがわかります。</target>
        </trans-unit>
        <trans-unit id="9b1ff6b6614bf65ff7cf18fa7ac8ca0c73c31da4" translate="yes" xml:space="preserve">
          <source>The command &lt;code&gt;git commit -a&lt;/code&gt; first looks at your working tree, notices that you have modified hello.c and removed goodbye.c, and performs necessary &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git rm&lt;/code&gt; for you.</source>
          <target state="translated">コマンド &lt;code&gt;git commit -a&lt;/code&gt; は最初に作業ツリーを調べ、hello.cを変更してgoodbye.cを削除したことを確認し、必要な &lt;code&gt;git add&lt;/code&gt; と &lt;code&gt;git rm&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="95cb34ce247ae47a8a7d5a122ee875bb99decb40" translate="yes" xml:space="preserve">
          <source>The command allows for creation and fast-forwarding of sha1 refs (heads/tags) on the remote end (strictly speaking, it is the local end &lt;code&gt;git-receive-pack&lt;/code&gt; runs, but to the user who is sitting at the send-pack end, it is updating the remote. Confused?)</source>
          <target state="translated">このコマンドを使用すると、リモートエンド（厳密に言えば、ローカルエンド &lt;code&gt;git-receive-pack&lt;/code&gt; が実行されますが、送信パックエンドに座っているユーザー）でのsha1参照（ヘッド/タグ）の作成と早送りが可能になります。、リモートを更新しています。混乱していますか？）</target>
        </trans-unit>
        <trans-unit id="2b42e9d45bef456324952e5870d272017a1a991c" translate="yes" xml:space="preserve">
          <source>The command also looks at &lt;code&gt;core.trustctime&lt;/code&gt; configuration variable. It can be useful when the inode change time is regularly modified by something outside Git (file system crawlers and backup systems use ctime for marking files processed) (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.trustctime&lt;/code&gt; 構成変数も調べます。iノードの変更時刻がGit外の何かによって定期的に変更される場合に役立ちます（ファイルシステムクローラーとバックアップシステムは、処理されたファイルをマークするためにctimeを使用します）（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b2d2a0a5d3ee3b745ff8e27d667799782d3fee27" translate="yes" xml:space="preserve">
          <source>The command by default does not allow an update that is not a fast-forward to prevent such loss of history.</source>
          <target state="translated">このような履歴の消失を防ぐために、デフォルトでは早送りではない更新を許可していません。</target>
        </trans-unit>
        <trans-unit id="57bd298a9fbda93bedda739fa9a93ffd1fbe53dd" translate="yes" xml:space="preserve">
          <source>The command by default packs all tags and refs that are already packed, and leaves other refs alone. This is because branches are expected to be actively developed and packing their tips does not help performance. This option causes branch tips to be packed as well. Useful for a repository with many branches of historical interests.</source>
          <target state="translated">このコマンドはデフォルトでは、すでにパックされているすべてのタグと ref をパックし、他の ref は放置します。これは、ブランチが積極的に開発されることが期待されているため、ブランチのヒントをパックしてもパフォーマンスを向上させることができないからです。このオプションを指定すると、ブランチのヒントもパックされます。歴史的に興味のあるブランチがたくさんあるリポジトリに便利です。</target>
        </trans-unit>
        <trans-unit id="affc62639786f9435bc3e40b781bdaefab9bf88f" translate="yes" xml:space="preserve">
          <source>The command can also be used to restore the content in the index with &lt;code&gt;--staged&lt;/code&gt;, or restore both the working tree and the index with &lt;code&gt;--staged --worktree&lt;/code&gt;.</source>
          <target state="translated">このコマンドを使用して、-- &lt;code&gt;--staged&lt;/code&gt; 使用してインデックスのコンテンツを復元したり、-- staged --worktreeを使用して作業ツリーとインデックスの両方を復元したりすることも &lt;code&gt;--staged --worktree&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="033264e01f6eaf7651e64aee25dc83cea3397f0e" translate="yes" xml:space="preserve">
          <source>The command finds the most recent tag that is reachable from a commit. If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the number of additional commits on top of the tagged object and the abbreviated object name of the most recent commit. The result is a &quot;human-readable&quot; object name which can also be used to identify the commit to other git commands.</source>
          <target state="translated">このコマンドは、コミットから到達可能な最新のタグを見つけます。タグがコミットを指している場合は、そのタグのみを表示します。そうでない場合は、タグ名にタグ付きオブジェクトの上に追加のコミット数と、最新のコミットの省略形のオブジェクト名を付加します。この結果、「人間が読める」オブジェクト名となり、他の git コマンドでそのコミットを識別するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="3ab56fbe7068ffbc29e1e09d644dcd93a3d4ced5" translate="yes" xml:space="preserve">
          <source>The command honors &lt;code&gt;color.status&lt;/code&gt; (or &lt;code&gt;status.color&lt;/code&gt; &amp;mdash; they mean the same thing and the latter is kept for backward compatibility) and &lt;code&gt;color.status.&amp;lt;slot&amp;gt;&lt;/code&gt; configuration variables to colorize its output.</source>
          <target state="translated">コマンドは &lt;code&gt;color.status&lt;/code&gt; （または &lt;code&gt;status.color&lt;/code&gt; &amp;mdash;同じことを意味し、後者は下位互換性のために保持されます）および &lt;code&gt;color.status.&amp;lt;slot&amp;gt;&lt;/code&gt; 構成変数を尊重して出力を色分けします。</target>
        </trans-unit>
        <trans-unit id="426f574eb4223ad0c1806f2471b371a9ce2ce62b" translate="yes" xml:space="preserve">
          <source>The command honors &lt;code&gt;core.filemode&lt;/code&gt; configuration variable. If your repository is on a filesystem whose executable bits are unreliable, this should be set to &lt;code&gt;false&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). This causes the command to ignore differences in file modes recorded in the index and the file mode on the filesystem if they differ only on executable bit. On such an unfortunate filesystem, you may need to use &lt;code&gt;git update-index --chmod=&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.filemode&lt;/code&gt; 構成変数を受け入れます。リポジトリが実行可能ビットが信頼できないファイルシステム上にある場合は、これを &lt;code&gt;false&lt;/code&gt; に設定する必要があります（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。これにより、コマンドは、インデックスに記録されたファイルモードと、ファイルシステム上のファイルモードの違いが実行ビットのみ異なる場合、それらを無視します。そのような不幸なファイルシステムでは、 &lt;code&gt;git update-index --chmod=&lt;/code&gt; を使用する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="1c1fbeab69cdf1a35e381ef7eff39e0ef873ae8e" translate="yes" xml:space="preserve">
          <source>The command is kept primarily for historical reasons; fingers of many people who learned Git long before &lt;code&gt;git log&lt;/code&gt; was invented by reading Linux kernel mailing list are trained to type it.</source>
          <target state="translated">コマンドは主に歴史的な理由で保持されます。Linuxカーネルのメーリングリストを読んで &lt;code&gt;git log&lt;/code&gt; が生まれるずっと前にGitを学んだ多くの人の指は、それを入力するように訓練されています。</target>
        </trans-unit>
        <trans-unit id="078766939aed50311c1dcee68ff982a08734592e" translate="yes" xml:space="preserve">
          <source>The command line for those commands that support taking submodules as part of their pathspecs. Most commands have a boolean flag &lt;code&gt;--recurse-submodules&lt;/code&gt; which specify whether to recurse into submodules. Examples are &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;checkout&lt;/code&gt;. Some commands take enums, such as &lt;code&gt;fetch&lt;/code&gt; and &lt;code&gt;push&lt;/code&gt;, where you can specify how submodules are affected.</source>
          <target state="translated">パス指定の一部としてサブモジュールを取得することをサポートするコマンドのコマンドライン。ほとんどのコマンドにはブールフラグ &lt;code&gt;--recurse-submodules&lt;/code&gt; があり、サブモジュールに再帰するかどうかを指定します。例としては、 &lt;code&gt;grep&lt;/code&gt; と &lt;code&gt;checkout&lt;/code&gt; があります。 &lt;code&gt;fetch&lt;/code&gt; や &lt;code&gt;push&lt;/code&gt; などの一部のコマンドは列挙型を取り、サブモジュールへの影響を指定できます。</target>
        </trans-unit>
        <trans-unit id="0c67f633874ba0fbe1af2a193c1c589167c2ab4d" translate="yes" xml:space="preserve">
          <source>The command looks at &lt;code&gt;core.ignorestat&lt;/code&gt; configuration variable. See &lt;code&gt;Using &quot;assume unchanged&quot; bit&lt;/code&gt; section above.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.ignorestat&lt;/code&gt; 構成変数を調べます。上記の &lt;code&gt;Using &quot;assume unchanged&quot; bit&lt;/code&gt; セクションの使用を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f7f0d79e587cabe73eebce8a6424fb5cae3c144" translate="yes" xml:space="preserve">
          <source>The command looks at &lt;code&gt;core.ignorestat&lt;/code&gt; configuration variable. When this is true, paths updated with &lt;code&gt;git update-index paths...&lt;/code&gt; and paths updated with other Git commands that update both index and working tree (e.g. &lt;code&gt;git apply --index&lt;/code&gt;, &lt;code&gt;git checkout-index -u&lt;/code&gt;, and &lt;code&gt;git read-tree -u&lt;/code&gt;) are automatically marked as &quot;assume unchanged&quot;. Note that &quot;assume unchanged&quot; bit is &lt;strong&gt;not&lt;/strong&gt; set if &lt;code&gt;git update-index --refresh&lt;/code&gt; finds the working tree file matches the index (use &lt;code&gt;git update-index --really-refresh&lt;/code&gt; if you want to mark them as &quot;assume unchanged&quot;).</source>
          <target state="translated">このコマンドは、 &lt;code&gt;core.ignorestat&lt;/code&gt; 構成変数を調べます。これがtrueの場合、 &lt;code&gt;git update-index paths...&lt;/code&gt; で更新されたパスと、インデックスと作業ツリーの両方を更新する他のGitコマンドで更新されたパス（例： &lt;code&gt;git apply --index&lt;/code&gt; 、 &lt;code&gt;git checkout-index -u&lt;/code&gt; 、および &lt;code&gt;git read-tree -u&lt;/code&gt; ）は自動的に「変更されていない」とマークされます。 &lt;code&gt;git update-index --refresh&lt;/code&gt; が作業ツリーファイルがインデックスと一致する場合、「変更しない」ビットは設定され&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください（「変更しない」とマークしたい場合は、 &lt;code&gt;git update-index --really-refresh&lt;/code&gt; を使用してください）。</target>
        </trans-unit>
        <trans-unit id="719021beca97cba355f40567331ed4531fab91cd" translate="yes" xml:space="preserve">
          <source>The command loop shows the list of subcommands available, and gives a prompt &quot;What now&amp;gt; &quot;. In general, when the prompt ends with a single &lt;code&gt;&amp;gt;&lt;/code&gt;, you can pick only one of the choices given and type return, like this:</source>
          <target state="translated">コマンドループは、使用可能なサブコマンドのリストを表示し、プロンプト「What now&amp;gt;」を表示します。一般に、プロンプトが単一の &lt;code&gt;&amp;gt;&lt;/code&gt; で終了する場合、次のように、指定された選択肢の1つだけを選択してreturnを入力できます。</target>
        </trans-unit>
        <trans-unit id="653e31d7d7203bdc451cd54eed957012f41434d3" translate="yes" xml:space="preserve">
          <source>The command refuses to process new mailboxes until the current operation is finished, so if you decide to start over from scratch, run &lt;code&gt;git am --abort&lt;/code&gt; before running the command with mailbox names.</source>
          <target state="translated">コマンドは現在の操作が完了するまで新しいメールボックスの処理を拒否するため、最初からやり直す場合は、メールボックス名を指定してコマンドを実行する前に &lt;code&gt;git am --abort&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="024617064e80c5362385868f7a76ff908e5b8451" translate="yes" xml:space="preserve">
          <source>The command removes only the paths that are known to Git.</source>
          <target state="translated">このコマンドは、Git が知っているパスのみを削除します。</target>
        </trans-unit>
        <trans-unit id="ddc41d8aed51eb71b1c7af7000815eb2a4b359d3" translate="yes" xml:space="preserve">
          <source>The command stream is terminated by a blank line. In some cases (indicated in the documentation of the relevant commands), this blank line is followed by a payload in some other protocol (e.g., the pack protocol), while in others it indicates the end of input.</source>
          <target state="translated">コマンドストリームは空行で終了します。いくつかの場合(関連するコマンドのドキュメントで示されている)では、この空白行の後に他のプロトコル(例えば、パックプロトコル)のペイロードが続くが、他の場合は入力の終了を示す。</target>
        </trans-unit>
        <trans-unit id="9f45aa4005fcc34aa135332c57403a61747c3270" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; command to control what is shown and how, and options applicable to the &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; command to control how the changes each commit introduces are shown.</source>
          <target state="translated">このコマンドは、&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;コマンドに適用可能なオプションを使用して、表示される内容と方法を制御し、&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt;コマンドに適用可能なオプションを使用して、各コミットによって導入される変更の表示方法を制御します。</target>
        </trans-unit>
        <trans-unit id="d1cdce0d3b2e7df2146074a7208b9f02c1bab1a7" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;code&gt;git diff-tree&lt;/code&gt; command to control how the changes the commit introduces are shown.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git diff-tree&lt;/code&gt; コマンドに適用可能なオプションを使用して、コミットによって導入される変更の表示方法を制御します。</target>
        </trans-unit>
        <trans-unit id="35fc48f2de1638c3a16917e24656f5cccec37735" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;code&gt;git log&lt;/code&gt; command to control what is shown and how. See &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git log&lt;/code&gt; コマンドに適用可能なオプションを使用して、表示される内容と方法を制御します。&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="704cfc598be528aca39957bda30b48a4e32947ac" translate="yes" xml:space="preserve">
          <source>The command takes options applicable to the &lt;code&gt;git rev-list&lt;/code&gt; command to control what is shown and how, and options applicable to the &lt;code&gt;git diff-*&lt;/code&gt; commands to control how the changes each commit introduces are shown.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git rev-list&lt;/code&gt; コマンドに適用可能なオプションを使用して、表示内容と方法を制御します。また、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドに適用可能なオプションを使用して、各コミットが導入する変更の表示方法を制御します。</target>
        </trans-unit>
        <trans-unit id="05dd6533643357a7eb4c0a33aa8aafdf86be046c" translate="yes" xml:space="preserve">
          <source>The command takes various subcommands, and different options depending on the subcommand:</source>
          <target state="translated">コマンドは様々なサブコマンドを取り、サブコマンドによって異なるオプションを取ります。</target>
        </trans-unit>
        <trans-unit id="5dfb0879d1b00c6726b4c473489aecee6c7360c1" translate="yes" xml:space="preserve">
          <source>The command that the diff driver should call to generate the text-converted version of a file. The result of the conversion is used to generate a human-readable diff. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">ファイルのテキスト変換されたバージョンを生成するためにdiffドライバーが呼び出すコマンド。変換の結果は、人間が読める差分を生成するために使用されます。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="76561fd073c2b7875043b506e4a6c918bbf27fef" translate="yes" xml:space="preserve">
          <source>The command usually removes loose refs under &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; hierarchy after packing them. This option tells it not to.</source>
          <target state="translated">コマンドは通常、 &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; 階層の下にある緩い参照をパックした後、それらを削除します。このオプションはそうしないように指示します。</target>
        </trans-unit>
        <trans-unit id="77170493947dd63f2044149c05ae4eb27dc0d118" translate="yes" xml:space="preserve">
          <source>The command usually shows percentage progress. This flag suppresses it.</source>
          <target state="translated">このコマンドは通常、進捗状況をパーセンテージで表示します。このフラグはそれを抑制します。</target>
        </trans-unit>
        <trans-unit id="3df5350b5d92a4c7df677ed19aeefaf4fd05338a" translate="yes" xml:space="preserve">
          <source>The command which is used to convert the content of a blob object to a worktree file upon checkout. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">チェックアウト時にblobオブジェクトのコンテンツをワークツリーファイルに変換するために使用されるコマンド。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e78c7e2042e4de22f48dc29ab38867e1c8242106" translate="yes" xml:space="preserve">
          <source>The command which is used to convert the content of a worktree file to a blob upon checkin. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">チェックイン時にワークツリーファイルのコンテンツをblobに変換するために使用されるコマンド。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6711f072ffccd6a7948d8fcfc289d0284bd97d1" translate="yes" xml:space="preserve">
          <source>The command will only rewrite the &lt;code&gt;positive&lt;/code&gt; refs mentioned in the command line (e.g. if you pass &lt;code&gt;a..b&lt;/code&gt;, only &lt;code&gt;b&lt;/code&gt; will be rewritten). If you specify no filters, the commits will be recommitted without any changes, which would normally have no effect. Nevertheless, this may be useful in the future for compensating for some Git bugs or such, therefore such a usage is permitted.</source>
          <target state="translated">コマンドは、コマンドラインで指定された &lt;code&gt;positive&lt;/code&gt; 参照のみを書き換えます（たとえば、 &lt;code&gt;a..b&lt;/code&gt; を渡した場合、 &lt;code&gt;b&lt;/code&gt; のみが書き換えられます）。フィルターを指定しない場合、コミットは変更なしで再コミットされますが、通常は効果がありません。それでも、これは将来、いくつかのGitバグなどを補うために役立つ可能性があるため、そのような使用が許可されます。</target>
        </trans-unit>
        <trans-unit id="6c1d44a42d537aa236fa8b0c18f8ebc1e0d665b8" translate="yes" xml:space="preserve">
          <source>The command writes the commit object name of the common ancestor to the standard output, so we captured its output to a variable, because we will be using it in the next step. By the way, the common ancestor commit is the &quot;Initial commit&quot; commit in this case. You can tell it by:</source>
          <target state="translated">コマンドは共通祖先のコミットオブジェクト名を標準出力に書き出していますので、次のステップで使うことになるので、その出力を変数に取り込んでいます。ちなみに、共通の先祖のコミットは、この場合は「イニシャルコミット」のコミットになります。でわかるようになっています。</target>
        </trans-unit>
        <trans-unit id="277f50b8984fb8f1e24e58a015e232c719b0136b" translate="yes" xml:space="preserve">
          <source>The command&amp;rsquo;s second form creates a new branch head named &amp;lt;branchname&amp;gt; which points to the current &lt;code&gt;HEAD&lt;/code&gt;, or &amp;lt;start-point&amp;gt; if given. As a special case, for &amp;lt;start-point&amp;gt;, you may use &lt;code&gt;&quot;A...B&quot;&lt;/code&gt; as a shortcut for the merge base of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; if there is exactly one merge base. You can leave out at most one of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;, in which case it defaults to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">コマンドの2番目の形式は、現在の &lt;code&gt;HEAD&lt;/code&gt; または指定されている場合は&amp;lt;start-point&amp;gt; を指す&amp;lt;branchname&amp;gt;という名前の新しいブランチヘッドを作成します。特殊なケースとして、&amp;lt;start-point&amp;gt;の場合、マージベースが1つしかない場合は、 &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; のマージベースのショートカットとして &lt;code&gt;&quot;A...B&quot;&lt;/code&gt; を使用できます。 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; のいずれかを &lt;code&gt;HEAD&lt;/code&gt; ます。その場合、デフォルトでHEADになります。</target>
        </trans-unit>
        <trans-unit id="0384db43c537c0cba33bbce02fa39c058435bd6c" translate="yes" xml:space="preserve">
          <source>The command-line flag --exclude-from=&amp;lt;file&amp;gt; specifies a file containing a list of patterns. Patterns are ordered in the same order they appear in the file.</source>
          <target state="translated">コマンドラインフラグ--exclude-from = &amp;lt;file&amp;gt;は、パターンのリストを含むファイルを指定します。パターンは、ファイルに表示されるのと同じ順序で並べられます。</target>
        </trans-unit>
        <trans-unit id="84de3c7a7b3ba54b91bb57a464ea60b526231897" translate="yes" xml:space="preserve">
          <source>The command-line flag --exclude-per-directory=&amp;lt;name&amp;gt; specifies a name of the file in each directory &lt;code&gt;git ls-files&lt;/code&gt; examines, normally &lt;code&gt;.gitignore&lt;/code&gt;. Files in deeper directories take precedence. Patterns are ordered in the same order they appear in the files.</source>
          <target state="translated">コマンドラインフラグ--exclude-per-directory = &amp;lt;name&amp;gt;は、 &lt;code&gt;git ls-files&lt;/code&gt; が検査する各ディレクトリ内のファイルの名前を指定します。通常は &lt;code&gt;.gitignore&lt;/code&gt; です。深いディレクトリにあるファイルが優先されます。パターンは、ファイルに表示されるのと同じ順序で並べられます。</target>
        </trans-unit>
        <trans-unit id="de25d36c95ea6a374c3001c57d5c8bbae6052f57" translate="yes" xml:space="preserve">
          <source>The command-line flag --exclude=&amp;lt;pattern&amp;gt; specifies a single pattern. Patterns are ordered in the same order they appear in the command line.</source>
          <target state="translated">コマンドラインフラグ--exclude = &amp;lt;pattern&amp;gt;は、単一のパターンを指定します。パターンは、コマンドラインに表示されるのと同じ順序で並べられます。</target>
        </trans-unit>
        <trans-unit id="57163e2560363b464673a4a43dc95a7ad9f9ef3b" translate="yes" xml:space="preserve">
          <source>The commit &quot;D&quot; is called a &quot;merge base&quot; for branch &quot;main&quot; and &quot;dev&quot; because it&amp;rsquo;s the best common ancestor for these branches for a merge.</source>
          <target state="translated">コミット「D」は、ブランチ「main」と「dev」の「マージベース」と呼ばれます。これは、マージのこれらのブランチの最も一般的な祖先であるためです。</target>
        </trans-unit>
        <trans-unit id="f185c14cbc82f3e4dae044b7f66a7608424887fa" translate="yes" xml:space="preserve">
          <source>The commit author name is taken from the &quot;From: &quot; line of the message, and commit author date is taken from the &quot;Date: &quot; line of the message. The &quot;Subject: &quot; line is used as the title of the commit, after stripping common prefix &quot;[PATCH &amp;lt;anything&amp;gt;]&quot;. The &quot;Subject: &quot; line is supposed to concisely describe what the commit is about in one line of text.</source>
          <target state="translated">コミット作成者名はメッセージの「From：」行から取得され、コミット作成者の日付はメッセージの「Date：」行から取得されます。&quot;Subject：&quot;行は、共通の接頭辞 &quot;[PATCH &amp;lt;anything&amp;gt;]&quot;を取り除いた後、コミットのタイトルとして使用されます。「件名：」行は、1行のテキストでコミットの内容を簡潔に説明することになっています。</target>
        </trans-unit>
        <trans-unit id="2f12acdb07fb960bc2fd1e07b27cc4a2b35ad054" translate="yes" xml:space="preserve">
          <source>The commit list format can be changed by setting the configuration option rebase.instructionFormat. A customized instruction format will automatically have the long commit hash prepended to the format.</source>
          <target state="translated">コミットリストのフォーマットは、設定オプション rebase.instructionFormat を設定することで変更できます。カスタマイズされた命令フォーマットは、フォーマットの前に長いコミットハッシュが自動的に付加されます。</target>
        </trans-unit>
        <trans-unit id="56b4186deed0365516ca63a760921d1d85d5abd6" translate="yes" xml:space="preserve">
          <source>The commit log message extracted from e-mail, usually except the title line which comes from e-mail Subject.</source>
          <target state="translated">電子メールから抽出されたコミットログメッセージで、通常は電子メールの件名から来るタイトル行を除いたものです。</target>
        </trans-unit>
        <trans-unit id="448543278984728d32d400e55fc12701ecc9668d" translate="yes" xml:space="preserve">
          <source>The commit log message, author name and author email are taken from the e-mail, and after minimally decoding MIME transfer encoding, re-coded in the charset specified by i18n.commitencoding (defaulting to UTF-8) by transliterating them. This used to be optional but now it is the default.</source>
          <target state="translated">コミットログメッセージ、著者名、著者メールアドレスをメールから取得し、MIME転送エンコーディングを最小限にデコードした後、i18n.commitencodingで指定された文字セットで再エンコードします(デフォルトはUTF-8)。これは以前はオプションでしたが、現在はデフォルトになっています。</target>
        </trans-unit>
        <trans-unit id="682ec5a16062666d3ac4c15995f4c320f0569ce3" translate="yes" xml:space="preserve">
          <source>The commit message is formed by the title taken from the &quot;Subject: &quot;, a blank line and the body of the message up to where the patch begins. Excess whitespace at the end of each line is automatically stripped.</source>
          <target state="translated">コミットメッセージは &quot;Subject.&quot;から取ったタイトル、空白行、そしてパッチが始まるところまでの本文で構成されます。各行の最後にある過剰な空白は自動的に取り除かれます。</target>
        </trans-unit>
        <trans-unit id="9d14a63335261988fcede52b815289c8a87983a5" translate="yes" xml:space="preserve">
          <source>The commit message is supplied either directly with the &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-F&lt;/code&gt; option, or indirectly from the tag or commit when the second tree-ish denotes such an object, or it is requested by invoking an editor (see &lt;code&gt;--edit&lt;/code&gt; option below).</source>
          <target state="translated">コミットメッセージは、 &lt;code&gt;-m&lt;/code&gt; または &lt;code&gt;-F&lt;/code&gt; オプションを使用して直接提供されるか、2番目のツリーがそのようなオブジェクトを示す場合、タグまたはコミットから間接的に &lt;code&gt;--edit&lt;/code&gt; ます。 。</target>
        </trans-unit>
        <trans-unit id="50413d61f19e8e0d39eb4098c01c599c7c407f25" translate="yes" xml:space="preserve">
          <source>The commit object names shown above would be different for you, but they should match the HEAD commit object names of your repositories. You can check it by running &lt;code&gt;git ls-remote ../a&lt;/code&gt;.</source>
          <target state="translated">上記のコミットオブジェクト名は異なる場合がありますが、リポジトリのHEADコミットオブジェクト名と一致する必要があります。 &lt;code&gt;git ls-remote ../a&lt;/code&gt; を実行して確認できます。</target>
        </trans-unit>
        <trans-unit id="8b7bb35b4ae403135d95400938252724b91ca0d2" translate="yes" xml:space="preserve">
          <source>The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in &lt;code&gt;X&lt;/code&gt; and we are outputting in &lt;code&gt;X&lt;/code&gt;, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.</source>
          <target state="translated">commitオブジェクトは、ログメッセージに使用されたエンコードをエンコードヘッダーに記録します。このオプションを使用して、ユーザーが希望するエンコーディングでコミットログメッセージを再コーディングするようにコマンドに指示できます。非配管コマンドの場合、これはデフォルトでUTF-8になります。オブジェクトが &lt;code&gt;X&lt;/code&gt; でエンコードされていると主張し、 &lt;code&gt;X&lt;/code&gt; で出力している場合は、オブジェクトをそのまま出力します。つまり、元のコミットの無効なシーケンスが出力にコピーされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a40378090f508382eab3e21e0b4382b3bab0ad4" translate="yes" xml:space="preserve">
          <source>The commit, equivalent to what other systems call a &quot;changeset&quot; or &quot;version&quot;, represents a step in the project&amp;rsquo;s history, and each parent represents an immediately preceding step. Commits with more than one parent represent merges of independent lines of development.</source>
          <target state="translated">他のシステムが「変更セット」または「バージョン」と呼ぶものと同等のコミットは、プロジェクトの履歴のステップを表し、各親は直前のステップを表します。複数の親を持つコミットは、独立した開発ラインのマージを表します。</target>
        </trans-unit>
        <trans-unit id="7d3d64efc4f4511458592fa6c8a58dcfb8579da7" translate="yes" xml:space="preserve">
          <source>The commits are guaranteed to be listed in the order that they were processed by rebase.</source>
          <target state="translated">コミットは rebase で処理された順に表示されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="00a94582df69c83885533dbdc944c957c3a549e0" translate="yes" xml:space="preserve">
          <source>The commits marked with &lt;code&gt;*&lt;/code&gt; touch the same area in the same file; you need to resolve the conflicts when creating the commit marked with &lt;code&gt;+&lt;/code&gt;. Then you can test the result to make sure your work-in-progress still works with what is in the latest master.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; でマークされたコミットは、同じファイルの同じ領域をタッチします。 &lt;code&gt;+&lt;/code&gt; でマークされたコミットを作成するときに競合を解決する必要があります。次に、結果をテストして、進行中の作業が最新のマスターにあるもので引き続き機能することを確認できます。</target>
        </trans-unit>
        <trans-unit id="a3fd88845d0ae86224cb7a800b3122f1cf56cb03" translate="yes" xml:space="preserve">
          <source>The commits that were previously saved into the temporary area are then reapplied to the current branch, one by one, in order. Note that any commits in HEAD which introduce the same textual changes as a commit in HEAD..&amp;lt;upstream&amp;gt; are omitted (i.e., a patch already accepted upstream with a different commit message or timestamp will be skipped).</source>
          <target state="translated">以前に一時領域に保存されたコミットは、現在のブランチに1つずつ順番に再適用されます。 HEAD .. &amp;lt;upstream&amp;gt;でのコミットと同じテキストの変更を導入するHEADでのコミットは省略されることに注意してください（つまり、別のコミットメッセージまたはタイムスタンプで上流ですでに受け入れられているパッチはスキップされます）。</target>
        </trans-unit>
        <trans-unit id="18d247bf08e46b2d89a403ce14a86d7b99503646" translate="yes" xml:space="preserve">
          <source>The complete message in a commit and tag object is &lt;code&gt;contents&lt;/code&gt;. Its first line is &lt;code&gt;contents:subject&lt;/code&gt;, where subject is the concatenation of all lines of the commit message up to the first blank line. The next line is &lt;code&gt;contents:body&lt;/code&gt;, where body is all of the lines after the first blank line. The optional GPG signature is &lt;code&gt;contents:signature&lt;/code&gt;. The first &lt;code&gt;N&lt;/code&gt; lines of the message is obtained using &lt;code&gt;contents:lines=N&lt;/code&gt;. Additionally, the trailers as interpreted by &lt;a href=&quot;git-interpret-trailers&quot;&gt;git-interpret-trailers[1]&lt;/a&gt; are obtained as &lt;code&gt;trailers&lt;/code&gt; (or by using the historical alias &lt;code&gt;contents:trailers&lt;/code&gt;). Non-trailer lines from the trailer block can be omitted with &lt;code&gt;trailers:only&lt;/code&gt;. Whitespace-continuations can be removed from trailers so that each trailer appears on a line by itself with its full content with &lt;code&gt;trailers:unfold&lt;/code&gt;. Both can be used together as &lt;code&gt;trailers:unfold,only&lt;/code&gt;.</source>
          <target state="translated">commitおよびtagオブジェクトの完全なメッセージは、 &lt;code&gt;contents&lt;/code&gt; です。その最初の行は &lt;code&gt;contents:subject&lt;/code&gt; であり、subjectは最初の空白行までのコミットメッセージのすべての行の連結です。次の行は &lt;code&gt;contents:body&lt;/code&gt; で、bodyは最初の空白行の後のすべての行です。オプションのGPG署名は、 &lt;code&gt;contents:signature&lt;/code&gt; です。メッセージの最初の &lt;code&gt;N&lt;/code&gt; 行は、 &lt;code&gt;contents:lines=N&lt;/code&gt; を使用して取得されます。また、トレーラーはによって解釈されるよう&lt;a href=&quot;git-interpret-trailers&quot;&gt;にgit-解釈トレイラー[1]&lt;/a&gt;として得られる &lt;code&gt;trailers&lt;/code&gt; （または履歴別名使用して &lt;code&gt;contents:trailers&lt;/code&gt; ）。トレーラーブロックからの非トレーラー行は、 &lt;code&gt;trailers:only&lt;/code&gt; で省略できます。空白の継続はトレーラーから削除できるため、各トレーラーは単独で1行に表示され、完全なコンテンツは &lt;code&gt;trailers:unfold&lt;/code&gt; で表示されます。両方を &lt;code&gt;trailers:unfold,only&lt;/code&gt; として一緒に使用できます：unfold、only。</target>
        </trans-unit>
        <trans-unit id="0cfefd9783776d68186cc88921bf5543257f8ee9" translate="yes" xml:space="preserve">
          <source>The complete series produces the same end result as your own (probably much messier!) development process did.</source>
          <target state="translated">このシリーズは、あなた自身の開発プロセスと同じ結果をもたらします(おそらく、より多くのメッシーな!)。</target>
        </trans-unit>
        <trans-unit id="94ed81b46eb91e159691e77d6f1f3c669ea0f93b" translate="yes" xml:space="preserve">
          <source>The condition starts with a keyword followed by a colon and some data whose format and meaning depends on the keyword. Supported keywords are:</source>
          <target state="translated">条件は、キーワードから始まり、その後にコロンと、キーワードに依存した形式と意味を持つデータが続きます。サポートされているキーワードは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b796e8b15faa41177d638a7b320c951a662a1b91" translate="yes" xml:space="preserve">
          <source>The config settings that start with &lt;code&gt;feature.&lt;/code&gt; modify the defaults of a group of other config settings. These groups are created by the Git developer community as recommended defaults and are subject to change. In particular, new config options may be added with different defaults.</source>
          <target state="translated">&lt;code&gt;feature.&lt;/code&gt; で始まる構成設定。他の構成設定のグループのデフォルトを変更します。これらのグループは、推奨されるデフォルトとしてGit開発者コミュニティによって作成され、変更される可能性があります。特に、新しい設定オプションが異なるデフォルトで追加される場合があります。</target>
        </trans-unit>
        <trans-unit id="0fd18e355006d4a8cb0ab9547d6ae9db29a772ac" translate="yes" xml:space="preserve">
          <source>The config variable &lt;code&gt;ssh.variant&lt;/code&gt; can be set to override this detection. Valid values are &lt;code&gt;ssh&lt;/code&gt; (to use OpenSSH options), &lt;code&gt;plink&lt;/code&gt;, &lt;code&gt;putty&lt;/code&gt;, &lt;code&gt;tortoiseplink&lt;/code&gt;, &lt;code&gt;simple&lt;/code&gt; (no options except the host and remote command). The default auto-detection can be explicitly requested using the value &lt;code&gt;auto&lt;/code&gt;. Any other value is treated as &lt;code&gt;ssh&lt;/code&gt;. This setting can also be overridden via the environment variable &lt;code&gt;GIT_SSH_VARIANT&lt;/code&gt;.</source>
          <target state="translated">構成変数 &lt;code&gt;ssh.variant&lt;/code&gt; を設定して、この検出をオーバーライドできます。有効な値は、 &lt;code&gt;ssh&lt;/code&gt; （OpenSSHオプションを使用するため）、 &lt;code&gt;plink&lt;/code&gt; 、 &lt;code&gt;putty&lt;/code&gt; 、 &lt;code&gt;tortoiseplink&lt;/code&gt; 、 &lt;code&gt;simple&lt;/code&gt; （ホストとリモートコマンド以外のオプションなし）です。デフォルトの自動検出は、値 &lt;code&gt;auto&lt;/code&gt; を使用して明示的に要求できます。その他の値は &lt;code&gt;ssh&lt;/code&gt; として扱われます。この設定は、環境変数 &lt;code&gt;GIT_SSH_VARIANT&lt;/code&gt; を使用してオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="82dcb1f42fdd78b7a73229a297c6923dd8af63df" translate="yes" xml:space="preserve">
          <source>The configuration file &lt;code&gt;$GIT_DIR/config&lt;/code&gt; in the superproject. Git only recurses into active submodules (see &quot;ACTIVE SUBMODULES&quot; section below).</source>
          <target state="translated">スーパー &lt;code&gt;$GIT_DIR/config&lt;/code&gt; の構成ファイル$ GIT_DIR / config。Gitはアクティブなサブモジュールにのみ再帰します（以下の「アクティブなサブモジュール」セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="774734ca6d9570e50bffe1b21770dfa34405f67a" translate="yes" xml:space="preserve">
          <source>The configuration file is used to override the default settings that were built into gitweb at the time the &lt;code&gt;gitweb.cgi&lt;/code&gt; script was generated.</source>
          <target state="translated">構成ファイルは、 &lt;code&gt;gitweb.cgi&lt;/code&gt; スクリプトの生成時にgitwebに組み込まれたデフォルト設定を上書きするために使用されます。</target>
        </trans-unit>
        <trans-unit id="b47107ae705aecdb184ade3561dff30a01436bf4" translate="yes" xml:space="preserve">
          <source>The configuration inside the submodule. This includes &lt;code&gt;$GIT_DIR/config&lt;/code&gt; in the submodule, but also settings in the tree such as a &lt;code&gt;.gitattributes&lt;/code&gt; or &lt;code&gt;.gitignore&lt;/code&gt; files that specify behavior of commands inside the submodule.</source>
          <target state="translated">サブモジュール内の構成。これには、 &lt;code&gt;$GIT_DIR/config&lt;/code&gt; サブモジュールではなく、のようなツリーの設定 &lt;code&gt;.gitattributes&lt;/code&gt; または &lt;code&gt;.gitignore&lt;/code&gt; サブモジュール内のコマンドの動作を指定したファイルを。</target>
        </trans-unit>
        <trans-unit id="9f6d6d393008f1bcb3935ac97c688c0c97bcd837" translate="yes" xml:space="preserve">
          <source>The configuration of submodules</source>
          <target state="translated">サブモジュールの構成</target>
        </trans-unit>
        <trans-unit id="386a88f6456b2a92a88834767dd0b8e7846f5609" translate="yes" xml:space="preserve">
          <source>The configuration variables &lt;code&gt;$projects_list_group_categories&lt;/code&gt; and &lt;code&gt;$project_list_default_category&lt;/code&gt; are described in &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;</source>
          <target state="translated">構成変数 &lt;code&gt;$projects_list_group_categories&lt;/code&gt; および &lt;code&gt;$project_list_default_category&lt;/code&gt; は&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]に&lt;/a&gt;記述されています</target>
        </trans-unit>
        <trans-unit id="7bf08d06e6b6627f964eab6068d66314f0702240" translate="yes" xml:space="preserve">
          <source>The configuration variables are used by both the Git plumbing and the porcelains. The variables are divided into sections, wherein the fully qualified variable name of the variable itself is the last dot-separated segment and the section name is everything before the last dot. The variable names are case-insensitive, allow only alphanumeric characters and &lt;code&gt;-&lt;/code&gt;, and must start with an alphabetic character. Some variables may appear multiple times; we say then that the variable is multivalued.</source>
          <target state="translated">構成変数は、Git配管と磁器の両方で使用されます。変数はセクションに分割されます。変数自体の完全修飾変数名は最後のドット区切りセグメントであり、セクション名は最後のドットの前のすべてです。変数名は大文字と小文字を区別せず、英数字と &lt;code&gt;-&lt;/code&gt; のみを使用でき、アルファベット文字で始まる必要があります。一部の変数は複数回現れることがあります。その場合、変数は多値であると言います。</target>
        </trans-unit>
        <trans-unit id="9ba005fddfd40c1aca4a3afcc24f0bfe0be0d141" translate="yes" xml:space="preserve">
          <source>The configuration variables described below configure some of gitweb links: their target and their look (text or image), and where to find page prerequisites (stylesheet, favicon, images, scripts). Usually they are left at their default values, with the possible exception of &lt;code&gt;@stylesheets&lt;/code&gt; variable.</source>
          <target state="translated">以下で説明する構成変数は、いくつかのgitwebリンクを構成します：ターゲットとその外観（テキストまたは画像）、およびページの前提条件を見つける場所（スタイルシート、ファビコン、画像、スクリプト）。通常、 &lt;code&gt;@stylesheets&lt;/code&gt; 変数を除いて、デフォルト値のままにします。</target>
        </trans-unit>
        <trans-unit id="352cabf788111a2af3c96521f974380812252a38" translate="yes" xml:space="preserve">
          <source>The configuration variables described below control how gitweb finds Git repositories, and how repositories are displayed and accessed.</source>
          <target state="translated">以下に説明する設定変数は、gitweb が Git リポジトリを見つける方法や、リポジトリの表示やアクセス方法を制御します。</target>
        </trans-unit>
        <trans-unit id="3f43fd6b4f50ff73ead39001e9e7b24eaf91129d" translate="yes" xml:space="preserve">
          <source>The construct &lt;code&gt;@{-&amp;lt;n&amp;gt;}&lt;/code&gt; means the &amp;lt;n&amp;gt;th branch/commit checked out before the current one.</source>
          <target state="translated">構成要素 &lt;code&gt;@{-&amp;lt;n&amp;gt;}&lt;/code&gt; は、現在のブランチ/コミットの前にチェックアウトされた&amp;lt;n&amp;gt;番目のブランチ/コミットを意味します。</target>
        </trans-unit>
        <trans-unit id="532c17d263ea0447251201d507a716aaf6f28f2e" translate="yes" xml:space="preserve">
          <source>The content to be committed can be specified in several ways:</source>
          <target state="translated">コミットする内容はいくつかの方法で指定できます。</target>
        </trans-unit>
        <trans-unit id="a3c1db69a05b050bddfd156a5df9e51b55df4af8" translate="yes" xml:space="preserve">
          <source>The contents of the actual line is output after the above header, prefixed by a TAB. This is to allow adding more header elements later.</source>
          <target state="translated">実際の行の内容は、上記のヘッダの後にTABを先頭にして出力されます。これは、後からさらにヘッダ要素を追加できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="07ff8c430a66890255703acd59c46fb9590b9dc8" translate="yes" xml:space="preserve">
          <source>The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.</source>
          <target state="translated">blob オブジェクトの内容は、解釈されないバイト列です。コアレベルでのエンコーディング変換はありません。</target>
        </trans-unit>
        <trans-unit id="1b5efb2fc6b2c2f5d21112887ebec33fa1322cd1" translate="yes" xml:space="preserve">
          <source>The contents of the included file are inserted immediately, as if they had been found at the location of the include directive. If the value of the variable is a relative path, the path is considered to be relative to the configuration file in which the include directive was found. See below for examples.</source>
          <target state="translated">インクルードされたファイルの内容は、あたかもインクルード指示文の場所で見つかったかのように、すぐに挿入されます。変数の値が相対パスの場合、そのパスは include ディレクティブが見つかった設定ファイルからの相対パスとみなされます。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="8e2acace54c1bc95e05b068c1615156bf7369b0d" translate="yes" xml:space="preserve">
          <source>The core Git is often called &quot;plumbing&quot;, with the prettier user interfaces on top of it called &quot;porcelain&quot;. You may not want to use the plumbing directly very often, but it can be good to know what the plumbing does when the porcelain isn&amp;rsquo;t flushing.</source>
          <target state="translated">コアGitは「配管」と呼ばれることが多く、その上に「磁器」と呼ばれるよりきれいなユーザーインターフェイスがあります。配管をあまり頻繁に使用する必要はないかもしれませんが、磁器が洗い流されていないときに配管が何をするかを知ることは良いことです。</target>
        </trans-unit>
        <trans-unit id="bdff9728a51893f686262a6a471251953f8ca49c" translate="yes" xml:space="preserve">
          <source>The core.multiPackIndex config setting must be on to consume MIDX files.</source>
          <target state="translated">MIDXファイルを消費するためには、core.multiPackIndex設定がオンになっている必要があります。</target>
        </trans-unit>
        <trans-unit id="4fd34d18ba310e6b91e875c3fcf517fe13b68829" translate="yes" xml:space="preserve">
          <source>The cost matrix is populated thusly: for each pair of commits, both diffs are generated and the &quot;diff of diffs&quot; is generated, with 3 context lines, then the number of lines in that diff is used as cost.</source>
          <target state="translated">コスト行列は次のようにして生成されます:コミットの各ペアに対して、両方の diff が生成され、3 つのコンテキスト行を持つ「diff の diff」が生成され、その diff の行数がコストとして使用されます。</target>
        </trans-unit>
        <trans-unit id="588bd7a488f6b8b596aae7dca46a3809b4412eb0" translate="yes" xml:space="preserve">
          <source>The cost of an edge &lt;code&gt;o--C&lt;/code&gt; is the size of &lt;code&gt;C&lt;/code&gt;'s diff, modified by a fudge factor that should be smaller than 100%. The cost of an edge &lt;code&gt;o--o&lt;/code&gt; is free. The fudge factor is necessary because even if &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; have nothing in common, they may still share a few empty lines and such, possibly making the assignment &lt;code&gt;1--C&lt;/code&gt;, &lt;code&gt;o--o&lt;/code&gt; slightly cheaper than &lt;code&gt;1--o&lt;/code&gt;, &lt;code&gt;o--C&lt;/code&gt; even if &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; have nothing in common. With the fudge factor we require a much larger common part to consider patches as corresponding.</source>
          <target state="translated">エッジ &lt;code&gt;o--C&lt;/code&gt; のコストは &lt;code&gt;C&lt;/code&gt; のdiffのサイズであり、ファッジファクターによって100％より小さくする必要があります。エッジ &lt;code&gt;o--o&lt;/code&gt; のコストは無料です。 &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;C&lt;/code&gt; に共通点がない場合でも、ファッジファクターが必要です。これらの行はいくつかの空行などを共有している可能性があるため、割り当てが &lt;code&gt;1--C&lt;/code&gt; 、 &lt;code&gt;o--o&lt;/code&gt; の方が &lt;code&gt;1--o&lt;/code&gt; 、 &lt;code&gt;o--C&lt;/code&gt; よりも少し安くなる可能性があります。-C &lt;code&gt;1&lt;/code&gt; と &lt;code&gt;C&lt;/code&gt; に共通点がない場合でも。ファッジファクターでは、パッチを対応するものと見なすために、より大きな共通部分が必要です。</target>
        </trans-unit>
        <trans-unit id="4d1179f527fe5d2769266ab8147ad92b0a56c021" translate="yes" xml:space="preserve">
          <source>The credential is split into a set of named attributes, with one attribute per line. Each attribute is specified by a key-value pair, separated by an &lt;code&gt;=&lt;/code&gt; (equals) sign, followed by a newline.</source>
          <target state="translated">資格情報は、1行に1つの属性を持つ、名前付き属性のセットに分割されます。各属性は、 &lt;code&gt;=&lt;/code&gt; （等号）記号とそれに続く改行で区切られたキーと値のペアで指定されます。</target>
        </trans-unit>
        <trans-unit id="1995b336f91a29b5d0cf1cb6bf6d7c2407fa802c" translate="yes" xml:space="preserve">
          <source>The credential is split into a set of named attributes, with one attribute per line. Each attribute is specified by a key-value pair, separated by an &lt;code&gt;=&lt;/code&gt; (equals) sign, followed by a newline. The key may contain any bytes except &lt;code&gt;=&lt;/code&gt;, newline, or NUL. The value may contain any bytes except newline or NUL. In both cases, all bytes are treated as-is (i.e., there is no quoting, and one cannot transmit a value with newline or NUL in it). The list of attributes is terminated by a blank line or end-of-file. Git understands the following attributes:</source>
          <target state="translated">資格情報は、名前付き属性のセットに分割され、1行に1つの属性があります。各属性は、 &lt;code&gt;=&lt;/code&gt; （等号）記号で区切られたキーと値のペアで指定され、その後に改行が続きます。キーには、 &lt;code&gt;=&lt;/code&gt; 、改行、NUL 以外のバイトを含めることができます。値には、改行またはNUL以外のバイトを含めることができます。どちらの場合も、すべてのバイトはそのまま扱われます（つまり、引用符はなく、改行またはNULを含む値を送信することはできません）。属性のリストは、空白行またはファイルの終わりで終了します。Gitは次の属性を理解します。</target>
        </trans-unit>
        <trans-unit id="332163de0b53725f6a8fdbb5dfbee2d72f5e952f" translate="yes" xml:space="preserve">
          <source>The credential&amp;rsquo;s password, if we are asking it to be stored.</source>
          <target state="translated">資格情報のパスワード（保存するように要求されている場合）。</target>
        </trans-unit>
        <trans-unit id="b2af82f2f4002bb109eae365a3025f169b56089c" translate="yes" xml:space="preserve">
          <source>The credential&amp;rsquo;s username, if we already have one (e.g., from a URL, from the user, or from a previously run helper).</source>
          <target state="translated">クレデンシャルのユーザー名（すでに持っている場合）（たとえば、URLから、ユーザーから、または以前に実行されたヘルパーから）。</target>
        </trans-unit>
        <trans-unit id="4208e146b9bfac727faabb9820edc29c027631a0" translate="yes" xml:space="preserve">
          <source>The credential&amp;rsquo;s username, if we already have one (e.g., from a URL, the configuration, the user, or from a previously run helper).</source>
          <target state="translated">資格情報のユーザー名（すでに持っている場合）（たとえば、URL、構成、ユーザー、または以前に実行したヘルパーから）。</target>
        </trans-unit>
        <trans-unit id="327d8af868005c380ff04a569542ec1ad381deca" translate="yes" xml:space="preserve">
          <source>The current &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;. In more detail: Your &lt;a href=&quot;#def_working_tree&quot;&gt;working tree&lt;/a&gt; is normally derived from the state of the tree referred to by HEAD. HEAD is a reference to one of the &lt;a href=&quot;#def_head&quot;&gt;heads&lt;/a&gt; in your repository, except when using a &lt;a href=&quot;#def_detached_HEAD&quot;&gt;detached HEAD&lt;/a&gt;, in which case it directly references an arbitrary commit.</source>
          <target state="translated">現在の&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。詳細：&lt;a href=&quot;#def_working_tree&quot;&gt;作業ツリー&lt;/a&gt;は通常、HEADによって参照されるツリーの状態から派生します。HEADは、リポジトリ内の&lt;a href=&quot;#def_head&quot;&gt;ヘッドの&lt;/a&gt; 1つへの参照です。ただし、&lt;a href=&quot;#def_detached_HEAD&quot;&gt;分離されたHEAD&lt;/a&gt;を使用する場合は除きます。この場合、任意のコミットを直接参照します。</target>
        </trans-unit>
        <trans-unit id="6a22129f9e2c1c598b41ac7718060a19c57ba2df" translate="yes" xml:space="preserve">
          <source>The current branch and &lt;code&gt;HEAD&lt;/code&gt; pointer stay at the last commit successfully made.</source>
          <target state="translated">現在のブランチと &lt;code&gt;HEAD&lt;/code&gt; ポインタは、正常に行われた最後のコミットに留まります。</target>
        </trans-unit>
        <trans-unit id="0f49d1c21e2564ca60f22933641a619ec1965bd6" translate="yes" xml:space="preserve">
          <source>The current branch is reset to &amp;lt;upstream&amp;gt;, or &amp;lt;newbase&amp;gt; if the --onto option was supplied. This has the exact same effect as &lt;code&gt;git reset --hard &amp;lt;upstream&amp;gt;&lt;/code&gt; (or &amp;lt;newbase&amp;gt;). ORIG_HEAD is set to point at the tip of the branch before the reset.</source>
          <target state="translated">現在のブランチは、&amp;lt;upstream&amp;gt;、または--ontoオプションが指定されている場合は&amp;lt;newbase&amp;gt;にリセットされます。これは &lt;code&gt;git reset --hard &amp;lt;upstream&amp;gt;&lt;/code&gt; （または&amp;lt;newbase&amp;gt;）とまったく同じ効果があります。ORIG_HEADは、リセット前にブランチの先端を指すように設定されています。</target>
        </trans-unit>
        <trans-unit id="485fe33a04a6d00e71aec5bce139a108011107ac" translate="yes" xml:space="preserve">
          <source>The current command-line parameters used for each variant are as follows:</source>
          <target state="translated">各バリアントで使用されている現在のコマンドラインパラメータは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f1d20a076d93bfe14eb345a4d54fe76b72904bc4" translate="yes" xml:space="preserve">
          <source>The current index and work tree is derived from $H, but the user may have local changes in them since $H.</source>
          <target state="translated">現在のインデックスとワークツリーは $H から派生していますが、ユーザーは $H 以降でローカルに変更を加えている可能性があります。</target>
        </trans-unit>
        <trans-unit id="7bc299cda3bedfdcbabc4a6883d29c81bf74d5df" translate="yes" xml:space="preserve">
          <source>The current index file for the repository. It is usually not found in a bare repository.</source>
          <target state="translated">リポジトリの現在のインデックスファイル。通常、むき出しのリポジトリにはありません。</target>
        </trans-unit>
        <trans-unit id="6561295b83003ebae9a9c6ca19e06cdfe7bf9b70" translate="yes" xml:space="preserve">
          <source>The currently defined format versions are:</source>
          <target state="translated">現在定義されているフォーマットのバージョンは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="66a8472981ef80b1cce56bd59cf5f4d97c11f9f9" translate="yes" xml:space="preserve">
          <source>The currently supported hooks are described below.</source>
          <target state="translated">現在サポートされているフックは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8715361e5840de7b556e67eacf990927a206b328" translate="yes" xml:space="preserve">
          <source>The custom diff driver command. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">カスタムdiffドライバーコマンド。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e530b24daf8e53e45f57000d6a6174670a1f6d2" translate="yes" xml:space="preserve">
          <source>The data content for the file has not been supplied yet. The frontend wants to supply it as part of this modify command.</source>
          <target state="translated">ファイルのデータ内容はまだ提供されていません。フロントエンドはこの修正コマンドの一部として提供したいと考えています。</target>
        </trans-unit>
        <trans-unit id="f92713104ec45ad60b839fa902e6ffedd1e05a41" translate="yes" xml:space="preserve">
          <source>The data content for the file was already supplied by a prior &lt;code&gt;blob&lt;/code&gt; command. The frontend just needs to connect it.</source>
          <target state="translated">ファイルのデータコンテンツは、以前の &lt;code&gt;blob&lt;/code&gt; コマンドによって既に提供されています。フロントエンドは接続するだけです。</target>
        </trans-unit>
        <trans-unit id="abeb69d3d4bae2cc1a5a16e58850f1c93c17369b" translate="yes" xml:space="preserve">
          <source>The data content for the note has not been supplied yet. The frontend wants to supply it as part of this modify command.</source>
          <target state="translated">ノートのデータ内容はまだ提供されていません。フロントエンドはこの修正コマンドの一部として提供したいと考えています。</target>
        </trans-unit>
        <trans-unit id="81c47d0a0bfa5328ac109608aa42a36ac0ca6a45" translate="yes" xml:space="preserve">
          <source>The data content for the note was already supplied by a prior &lt;code&gt;blob&lt;/code&gt; command. The frontend just needs to connect it to the commit that is to be annotated.</source>
          <target state="translated">メモのデータコンテンツは、以前の &lt;code&gt;blob&lt;/code&gt; コマンドによって既に提供されています。フロントエンドは、注釈を付けるコミットに接続するだけです。</target>
        </trans-unit>
        <trans-unit id="d1c68865b9a230a071410342b903f7a0e48271ba" translate="yes" xml:space="preserve">
          <source>The data that follows the keyword &lt;code&gt;gitdir:&lt;/code&gt; is used as a glob pattern. If the location of the .git directory matches the pattern, the include condition is met.</source>
          <target state="translated">キーワード &lt;code&gt;gitdir:&lt;/code&gt; に続くデータは、グロブパターンとして使用されます。.gitディレクトリの場所がパターンと一致する場合、インクルード条件が満たされます。</target>
        </trans-unit>
        <trans-unit id="c1597312d460a92e79d09c37c305ec85acdf7d09" translate="yes" xml:space="preserve">
          <source>The data that follows the keyword &lt;code&gt;onbranch:&lt;/code&gt; is taken to be a pattern with standard globbing wildcards and two additional ones, &lt;code&gt;**/&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;, that can match multiple path components. If we are in a worktree where the name of the branch that is currently checked out matches the pattern, the include condition is met.</source>
          <target state="translated">キーワード &lt;code&gt;onbranch:&lt;/code&gt; に続くデータは、標準のグロビングワイルドカードと、複数のパスコンポーネントに一致する2つの追加 &lt;code&gt;**/&lt;/code&gt; および &lt;code&gt;/**&lt;/code&gt; を持つパターンと見なされます。現在チェックアウトされているブランチの名前がパターンと一致するワークツリーにいる場合、包含条件が満たされます。</target>
        </trans-unit>
        <trans-unit id="7c053d7b296d35ca64db938819dea858103dc6da" translate="yes" xml:space="preserve">
          <source>The data transfer of the packfile is always multiplexed, using the same semantics of the &lt;code&gt;side-band-64k&lt;/code&gt; capability from protocol version 1. This means that each packet, during the packfile data stream, is made up of a leading 4-byte pkt-line length (typical of the pkt-line format), followed by a 1-byte stream code, followed by the actual data.</source>
          <target state="translated">packfileのデータ転送は、プロトコルバージョン1 の &lt;code&gt;side-band-64k&lt;/code&gt; 機能と同じセマンティクスを使用して常に多重化されます。つまり、packfileデータストリーム中の各パケットは、先頭の4バイトのパケットから構成されます。行の長さ（通常、pkt-line形式）、1バイトのストリームコード、実際のデータが続きます。</target>
        </trans-unit>
        <trans-unit id="c2900c14cd751c2ba06b33eb8d53cbdb905b94a4" translate="yes" xml:space="preserve">
          <source>The database cannot be reliably regenerated in a consistent form after the branch it is tracking has changed. Example: For merged branches, &lt;code&gt;git-cvsserver&lt;/code&gt; only tracks one branch of development, and after a &lt;code&gt;git merge&lt;/code&gt; an incrementally updated database may track a different branch than a database regenerated from scratch, causing inconsistent CVS revision numbers. &lt;code&gt;git-cvsserver&lt;/code&gt; has no way of knowing which branch it would have picked if it had been run incrementally pre-merge. So if you have to fully or partially (from old backup) regenerate the database, you should be suspicious of pre-existing CVS sandboxes.</source>
          <target state="translated">追跡しているブランチが変更された後、データベースを一貫した形式で確実に再生成することはできません。例：マージされたブランチの場合、 &lt;code&gt;git-cvsserver&lt;/code&gt; は開発の1つのブランチのみを追跡します。git &lt;code&gt;git merge&lt;/code&gt; 後、増分更新されたデータベースは、最初から再生成されたデータベースとは異なるブランチを追跡し、一貫性のないCVSリビジョン番号を引き起こす可能性があります。 &lt;code&gt;git-cvsserver&lt;/code&gt; は、マージ前に段階的に実行された場合、どのブランチを選択したかを知る方法がありません。そのため、データベースを完全または部分的に（古いバックアップから）再生成する必要がある場合は、既存のCVSサンドボックスに疑いがあるはずです。</target>
        </trans-unit>
        <trans-unit id="44d2a77b29a1133933d2693560e181324cc0bf34" translate="yes" xml:space="preserve">
          <source>The database has an object whose hash doesn&amp;rsquo;t match the object database value. This indicates a serious data integrity problem.</source>
          <target state="translated">データベースには、ハッシュがオブジェクトデータベースの値と一致しないオブジェクトがあります。これは、深刻なデータ整合性の問題を示しています。</target>
        </trans-unit>
        <trans-unit id="9944b3cc77c01bf0f8e3a227e6281fac295bdf59" translate="yes" xml:space="preserve">
          <source>The date used for the author identity when creating commit or tag objects, or when writing reflogs. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for valid formats.</source>
          <target state="translated">コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに作成者IDに使用される日付。有効な形式については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ab2821bcf3a61c45db1fdab7123e1f2d0deeb254" translate="yes" xml:space="preserve">
          <source>The date used for the committer identity when creating commit or tag objects, or when writing reflogs. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for valid formats.</source>
          <target state="translated">コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、コミッターIDに使用される日付。有効な形式については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="28234e35fb4524e90d740d3154dc66c02cb1f7a2" translate="yes" xml:space="preserve">
          <source>The default &amp;lt;ref&amp;gt; is &quot;master&quot;.</source>
          <target state="translated">デフォルトの&amp;lt;ref&amp;gt;は「マスター」です。</target>
        </trans-unit>
        <trans-unit id="c033f0ddddff0b7a496ef058316bfe1c29b59dcb" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.&amp;lt;name&amp;gt;.remote and branch.&amp;lt;name&amp;gt;.merge. If the upstream branch of 'A' is 'origin/B' sometimes we say &quot;'A' is tracking 'origin/B'&quot;.</source>
          <target state="translated">問題のブランチにマージされる（または問題のブランチがリベースされる）デフォルトの&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。これは、branch。&amp;lt;name&amp;gt; .remoteおよびbranch。&amp;lt;name&amp;gt; .mergeを介して構成されます。'A'の上流ブランチが 'origin / B'の場合、「 'A'は 'origin / B'を追跡している」と言うことがあります。</target>
        </trans-unit>
        <trans-unit id="0e2c938aad423666052c9b862a31c7bd282b15cb" translate="yes" xml:space="preserve">
          <source>The default &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.&amp;lt;name&amp;gt;.remote and branch.&amp;lt;name&amp;gt;.merge. If the upstream branch of &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;origin/B&lt;/code&gt; sometimes we say &quot;&lt;code&gt;A&lt;/code&gt; is tracking &lt;code&gt;origin/B&lt;/code&gt;&quot;.</source>
          <target state="translated">問題のブランチにマージされる（または問題のブランチがリベースされる）デフォルトの&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。これは、branch。&amp;lt;name&amp;gt; .remoteおよびbranch。&amp;lt;name&amp;gt; .mergeを介して構成されます。 &lt;code&gt;A&lt;/code&gt; の上流ブランチが &lt;code&gt;origin/B&lt;/code&gt; である場合、「 &lt;code&gt;A&lt;/code&gt; は &lt;code&gt;origin/B&lt;/code&gt; を追跡している」と言うことがあります。</target>
        </trans-unit>
        <trans-unit id="2a57474834373f0012a2eee4dc03542456f6b683" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;applypatch-msg&lt;/code&gt; hook, when enabled, runs the &lt;code&gt;commit-msg&lt;/code&gt; hook, if the latter is enabled.</source>
          <target state="translated">デフォルトの &lt;code&gt;applypatch-msg&lt;/code&gt; フックを有効にすると、後者が有効になっている場合に &lt;code&gt;commit-msg&lt;/code&gt; フックが実行されます。</target>
        </trans-unit>
        <trans-unit id="1004092b458b148233da1997202a081689268a8e" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;commit-msg&lt;/code&gt; hook, when enabled, detects duplicate &quot;Signed-off-by&quot; lines, and aborts the commit if one is found.</source>
          <target state="translated">デフォルトの &lt;code&gt;commit-msg&lt;/code&gt; フックは、有効になっている場合、重複する「Signed-off-by」行を検出し、見つかった場合はコミットを中止します。</target>
        </trans-unit>
        <trans-unit id="ec637f4377b8067b441e5ba8f9153d34270f7f0f" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;commit-msg&lt;/code&gt; hook, when enabled, detects duplicate &lt;code&gt;Signed-off-by&lt;/code&gt; trailers, and aborts the commit if one is found.</source>
          <target state="translated">デフォルトの &lt;code&gt;commit-msg&lt;/code&gt; フックを有効にすると、 &lt;code&gt;Signed-off-by&lt;/code&gt; トレーラーの重複が検出され、見つかった場合はコミットが中止されます。</target>
        </trans-unit>
        <trans-unit id="54e7a2ab7a7ead4c100931e31ff4408636c3868d" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;post-receive&lt;/code&gt; hook is empty, but there is a sample script &lt;code&gt;post-receive-email&lt;/code&gt; provided in the &lt;code&gt;contrib/hooks&lt;/code&gt; directory in Git distribution, which implements sending commit emails.</source>
          <target state="translated">デフォルトの &lt;code&gt;post-receive&lt;/code&gt; フックは空ですが、Gitディストリビューションの &lt;code&gt;contrib/hooks&lt;/code&gt; ディレクトリにサンプルスクリプト &lt;code&gt;post-receive-email&lt;/code&gt; があり、コミットメールの送信を実装しています。</target>
        </trans-unit>
        <trans-unit id="a71e842d9eb90ca6731ba585809c1f8c19eb80f6" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-applypatch&lt;/code&gt; hook, when enabled, runs the &lt;code&gt;pre-commit&lt;/code&gt; hook, if the latter is enabled.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-applypatch&lt;/code&gt; フックが有効になっている場合、後者が有効になっていると、 &lt;code&gt;pre-commit&lt;/code&gt; フックが実行されます。</target>
        </trans-unit>
        <trans-unit id="b4266565542333c335464dc9285134a4a9b31011" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-commit&lt;/code&gt; hook, when enabled&amp;mdash;​and with the &lt;code&gt;hooks.allownonascii&lt;/code&gt; config option unset or set to false&amp;mdash;​prevents the use of non-ASCII filenames.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-commit&lt;/code&gt; フックが有効になっている場合（および &lt;code&gt;hooks.allownonascii&lt;/code&gt; 構成オプションが未設定またはfalseに設定されている場合）は、非ASCIIファイル名の使用を防止します。</target>
        </trans-unit>
        <trans-unit id="c591fe93d0021a0c7991225b1a062c31f35ddd16" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-commit&lt;/code&gt; hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-commit&lt;/code&gt; フックは、有効になっている場合、末尾に空白がある行の導入をキャッチし、そのような行が見つかるとコミットを中止します。</target>
        </trans-unit>
        <trans-unit id="5c24125124251d23fec260bbe8f20bf4ce1ae496" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;pre-merge-commit&lt;/code&gt; hook, when enabled, runs the &lt;code&gt;pre-commit&lt;/code&gt; hook, if the latter is enabled.</source>
          <target state="translated">デフォルトの &lt;code&gt;pre-merge-commit&lt;/code&gt; フックが有効になっている場合、後者が有効になっていると、 &lt;code&gt;pre-commit&lt;/code&gt; フックが実行されます。</target>
        </trans-unit>
        <trans-unit id="c0f0841a2790ebd8e4684a32dafde265e2735139" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;update&lt;/code&gt; hook, when enabled&amp;mdash;​and with &lt;code&gt;hooks.allowunannotated&lt;/code&gt; config option unset or set to false&amp;mdash;​prevents unannotated tags to be pushed.</source>
          <target state="translated">デフォルトの &lt;code&gt;update&lt;/code&gt; フックが有効になっている場合（および &lt;code&gt;hooks.allowunannotated&lt;/code&gt; 構成オプションが設定されていないかfalseに設定されている場合）は、注釈のないタグがプッシュされるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="d309c8d9323df973a9380612e8ce1c6c75650d93" translate="yes" xml:space="preserve">
          <source>The default behavior can be set via the &lt;code&gt;checkout.guess&lt;/code&gt; configuration variable.</source>
          <target state="translated">デフォルトの動作は、 &lt;code&gt;checkout.guess&lt;/code&gt; 構成変数を介して設定できます。</target>
        </trans-unit>
        <trans-unit id="e99caaee535fa5770d85355802dd91eb002c650f" translate="yes" xml:space="preserve">
          <source>The default behavior of this command when no &amp;lt;refspec&amp;gt; is given can be configured by setting the &lt;code&gt;push&lt;/code&gt; option of the remote, or the &lt;code&gt;push.default&lt;/code&gt; configuration variable.</source>
          <target state="translated">&amp;lt;refspec&amp;gt;が指定されていない場合のこのコマンドのデフォルトの動作は、リモートの &lt;code&gt;push&lt;/code&gt; オプションまたは &lt;code&gt;push.default&lt;/code&gt; 構成変数を設定することで構成できます。</target>
        </trans-unit>
        <trans-unit id="04fb2222b71daf513a74198926f20b6eb1c65e53" translate="yes" xml:space="preserve">
          <source>The default can be changed by the &lt;code&gt;commit.cleanup&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">デフォルトは &lt;code&gt;commit.cleanup&lt;/code&gt; 設定変数で変更できます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6d2b951210087bf6a12979c879cea7654da192ce" translate="yes" xml:space="preserve">
          <source>The default can be changed using the status.showUntrackedFiles configuration variable documented in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">デフォルトは、&lt;a href=&quot;git-config&quot;&gt;git-config [1]に&lt;/a&gt;記載されているstatus.showUntrackedFiles構成変数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="f4804356dda86c0d39019920e2a204580a3348e0" translate="yes" xml:space="preserve">
          <source>The default configuration with no configuration file at all may work perfectly well for some installations. Still, a configuration file is useful for customizing or tweaking the behavior of gitweb in many ways, and some optional features will not be present unless explicitly enabled using the configurable &lt;code&gt;%features&lt;/code&gt; variable (see also &quot;Configuring gitweb features&quot; section below).</source>
          <target state="translated">構成ファイルがまったくないデフォルト構成は、一部のインストールでは完全に機能する場合があります。それでも、構成ファイルはgitwebの動作をさまざまな方法でカスタマイズまたは調整するのに役立ちます。一部のオプション機能は、構成可能な &lt;code&gt;%features&lt;/code&gt; 変数を使用して明示的に有効にしない限り存在しません（以下の「gitweb機能の構成」セクションも参照）。</target>
        </trans-unit>
        <trans-unit id="ba35598baf99b4759b4ac8e8e152046ad84f4f70" translate="yes" xml:space="preserve">
          <source>The default destination is &lt;code&gt;syslog&lt;/code&gt; if &lt;code&gt;--inetd&lt;/code&gt; or &lt;code&gt;--detach&lt;/code&gt; is specified, otherwise &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--inetd&lt;/code&gt; または &lt;code&gt;--detach&lt;/code&gt; が指定されている場合のデフォルトの宛先は &lt;code&gt;syslog&lt;/code&gt; で、それ以外の場合は &lt;code&gt;stderr&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="08a91820da4ab8ff0557091a83e78baf95e62cbc" translate="yes" xml:space="preserve">
          <source>The default development &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;. Whenever you create a Git &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;, a branch named &quot;master&quot; is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required.</source>
          <target state="translated">デフォルトの開発&lt;a href=&quot;#def_branch&quot;&gt;ブランチ&lt;/a&gt;。Git &lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;を作成すると、「マスター」という名前のブランチが作成され、アクティブなブランチになります。ほとんどの場合、これにはローカル開発が含まれますが、これは純粋に慣例によるものであり、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="9cfb0587d78b80316db2bf990e0689e616d2c4e9" translate="yes" xml:space="preserve">
          <source>The default diff tool to use when &lt;code&gt;--gui&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;--gui&lt;/code&gt; が指定されている場合に使用するデフォルトのdiffツール。</target>
        </trans-unit>
        <trans-unit id="2106f60990b064f5f08c291bb6d584e30eb4aef6" translate="yes" xml:space="preserve">
          <source>The default diff tool to use.</source>
          <target state="translated">使用するデフォルトの差分ツール。</target>
        </trans-unit>
        <trans-unit id="ef7818a768aaedb1852c90af2f69c6d87d81a9be" translate="yes" xml:space="preserve">
          <source>The default for format-patch is to output a signature containing the Git version number. Use this variable to change that default. Set this variable to the empty string (&quot;&quot;) to suppress signature generation.</source>
          <target state="translated">format-patch のデフォルトでは、Git のバージョン番号を含むシグネチャを出力します。この変数を使用してデフォルトを変更します。この変数に空文字列 (&quot;&quot;)を設定すると、シグネチャの生成を抑制します。</target>
        </trans-unit>
        <trans-unit id="04f69f6bfbe685cc6892bfe73707b968c4b7e627" translate="yes" xml:space="preserve">
          <source>The default for format-patch is to output files with the &lt;code&gt;[PATCH]&lt;/code&gt; subject prefix. Use this variable to change that prefix.</source>
          <target state="translated">format-patchのデフォルトは、 &lt;code&gt;[PATCH]&lt;/code&gt; 件名接頭辞が付いたファイルを出力することです。この変数を使用して、その接頭辞を変更します。</target>
        </trans-unit>
        <trans-unit id="9305a301a407a477c0982cd809ad589540305e9b" translate="yes" xml:space="preserve">
          <source>The default for format-patch is to output files with the suffix &lt;code&gt;.patch&lt;/code&gt;. Use this variable to change that suffix (make sure to include the dot if you want it).</source>
          <target state="translated">format-patchのデフォルトは、拡張子が &lt;code&gt;.patch&lt;/code&gt; のファイルを出力することです。この変数を使用して、そのサフィックスを変更します（必要に応じて、必ずドットを含めてください）。</target>
        </trans-unit>
        <trans-unit id="82f6ff06915abbfaa5bafadf3e71c6515eea8a49" translate="yes" xml:space="preserve">
          <source>The default for the patch directory is patches or the value of the &lt;code&gt;$QUILT_PATCHES&lt;/code&gt; environment variable.</source>
          <target state="translated">パッチディレクトリのデフォルトは、 &lt;code&gt;$QUILT_PATCHES&lt;/code&gt; または$ QUILT_PATCHES環境変数の値です。</target>
        </trans-unit>
        <trans-unit id="63e417c4ba57abb65259188be896bb91267bad84" translate="yes" xml:space="preserve">
          <source>The default for the series file is &amp;lt;patches&amp;gt;/series or the value of the &lt;code&gt;$QUILT_SERIES&lt;/code&gt; environment variable.</source>
          <target state="translated">シリーズファイルのデフォルトは、&amp;lt;patches&amp;gt; / seriesまたは &lt;code&gt;$QUILT_SERIES&lt;/code&gt; 環境変数の値です。</target>
        </trans-unit>
        <trans-unit id="43b413a4d69c795f1a4cc6e5069d43aa254cba9e" translate="yes" xml:space="preserve">
          <source>The default format does not show what the original said in the conflicting area. You cannot tell how many lines are deleted and replaced with Barbie&amp;rsquo;s remark on your side. The only thing you can tell is that your side wants to say it is hard and you&amp;rsquo;d prefer to go shopping, while the other side wants to claim it is easy.</source>
          <target state="translated">デフォルトの形式では、競合する領域でオリジナルが言ったことを示していません。何行削除され、あなたの側のバービーの発言に置き換えられたかはわかりません。あなたが言える唯一のことは、あなたの側がそれが難しいと言いたいとあなたが買い物に行きたいと思っている一方で、反対側はそれが簡単だと主張したいということです。</target>
        </trans-unit>
        <trans-unit id="2c9ac4b5e02925d5a2242fa228d32b0af91d581b" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;--no-notes&lt;/code&gt;, unless the &lt;code&gt;format.notes&lt;/code&gt; configuration is set.</source>
          <target state="translated">&lt;code&gt;format.notes&lt;/code&gt; 構成が設定されていない限り、デフォルトは &lt;code&gt;--no-notes&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e210eb7dbec89858b8e72d64e2d379a9aada6a48" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;--no-thread&lt;/code&gt;, unless the &lt;code&gt;format.thread&lt;/code&gt; configuration is set. If &lt;code&gt;--thread&lt;/code&gt; is specified without a style, it defaults to the style specified by &lt;code&gt;format.thread&lt;/code&gt; if any, or else &lt;code&gt;shallow&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format.thread&lt;/code&gt; 構成が設定されていない限り、デフォルトは &lt;code&gt;--no-thread&lt;/code&gt; です。場合 &lt;code&gt;--thread&lt;/code&gt; がで指定されたスタイルにスタイルなしで指定され、それがデフォルト &lt;code&gt;format.thread&lt;/code&gt; あれば、または他の &lt;code&gt;shallow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9abe1131612b105426f13be17707662aa8662d23" translate="yes" xml:space="preserve">
          <source>The default is false, except &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; will probe and set core.ignoreCase true if appropriate when the repository is created.</source>
          <target state="translated">デフォルトはfalseです。ただし、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;は、リポジトリの作成時に適切であれば、core.ignoreCaseをプローブしてtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="fcf73b7882b6e3d265136d0071b137412decce56" translate="yes" xml:space="preserve">
          <source>The default is not to print any annotation lines. If no number is given to &lt;code&gt;-n&lt;/code&gt;, only the first line is printed. If the tag is not annotated, the commit message is displayed instead.</source>
          <target state="translated">デフォルトでは、注釈行は印刷されません。 &lt;code&gt;-n&lt;/code&gt; に番号が指定されていない場合、最初の行のみが出力されます。タグに注釈が付けられていない場合は、代わりにコミットメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="19baf950afb8f746e54b7299adf6fbd6966f659a" translate="yes" xml:space="preserve">
          <source>The default is to diff against our branch (-2) and the cleanly resolved paths. The option -0 can be given to omit diff output for unmerged entries and just show &quot;Unmerged&quot;.</source>
          <target state="translated">デフォルトでは、ブランチ (-2)とクリーンに解決されたパスに対して diff を出力します。オプション -0 を指定すると、マージされていないエントリの diff 出力を省略し、&quot;Unmerged&quot; のみを表示することができます。</target>
        </trans-unit>
        <trans-unit id="70f152ab57d660d365ae81763277f72b2d86f307" translate="yes" xml:space="preserve">
          <source>The default is true (when core.filemode is not specified in the config file).</source>
          <target state="translated">デフォルトは true です (設定ファイルに core.filemode が指定されていない場合)。</target>
        </trans-unit>
        <trans-unit id="03228e9bc81b32ffbccac2430f1d794dd7591d2a" translate="yes" xml:space="preserve">
          <source>The default is true, except &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; or &lt;a href=&quot;git-init&quot;&gt;git-init[1]&lt;/a&gt; will probe and set core.symlinks false if appropriate when the repository is created.</source>
          <target state="translated">デフォルトはtrueですが、リポジトリの作成時に&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;または&lt;a href=&quot;git-init&quot;&gt;git-init [1]&lt;/a&gt;が適切な場合にcore.symlinksをプローブしてfalseを設定します。</target>
        </trans-unit>
        <trans-unit id="72445c1104c1c11ef748913a9c6e570e5a73c947" translate="yes" xml:space="preserve">
          <source>The default location of the CVS checkout to use for the export.</source>
          <target state="translated">エクスポートに使用するCVSチェックアウトのデフォルトの場所です。</target>
        </trans-unit>
        <trans-unit id="116262510e324641581bf8e5fe54c44cc1ec58f5" translate="yes" xml:space="preserve">
          <source>The default merge strategy to use when pulling a single branch.</source>
          <target state="translated">単一のブランチをプルする際に使用するデフォルトのマージ戦略。</target>
        </trans-unit>
        <trans-unit id="a808540aa8de08b00cb350dbc14ab54e33fa8faf" translate="yes" xml:space="preserve">
          <source>The default merge strategy to use when pulling multiple branches at once.</source>
          <target state="translated">複数のブランチを一度に引っ張る際に使用するデフォルトのマージ戦略。</target>
        </trans-unit>
        <trans-unit id="e2e648395119cc70a2e9e998b6f3d4c60294fc12" translate="yes" xml:space="preserve">
          <source>The default mode for format-patch to determine which parts of the cover letter will be populated using the branch&amp;rsquo;s description. See the &lt;code&gt;--cover-from-description&lt;/code&gt; option in &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt;.</source>
          <target state="translated">ブランチの説明を使用してカバーレターのどの部分に入力するかを決定するformat-patchのデフォルトモード。&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;の &lt;code&gt;--cover-from-description&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="063faead523251f77be0529092965c3429cc8003" translate="yes" xml:space="preserve">
          <source>The default module path for &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt; to use instead of /usr/lib/apache2/modules. Only used if httpd is Apache.</source>
          <target state="translated">/ usr / lib / apache2 / modulesの代わりに使用する&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt;のデフォルトのモジュールパス。httpdがApacheの場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="91f8aff2bf27bb7f60525104a4a75d78c7ffe52b" translate="yes" xml:space="preserve">
          <source>The default notes merge strategy is &quot;manual&quot;, which checks out conflicting notes in a special work tree for resolving notes conflicts (&lt;code&gt;.git/NOTES_MERGE_WORKTREE&lt;/code&gt;), and instructs the user to resolve the conflicts in that work tree. When done, the user can either finalize the merge with &lt;code&gt;git notes merge --commit&lt;/code&gt;, or abort the merge with &lt;code&gt;git notes merge --abort&lt;/code&gt;.</source>
          <target state="translated">デフォルトのメモ統合戦略は「手動」で、メモの競合を解決するために特別な作業ツリー（ &lt;code&gt;.git/NOTES_MERGE_WORKTREE&lt;/code&gt; ）で競合するメモをチェックアウトし、ユーザーにその作業ツリーの競合を解決するように指示します。完了したら、ユーザーは &lt;code&gt;git notes merge --commit&lt;/code&gt; を使用してマージを終了するか、git notes merge --abortを使用してマージを中止 &lt;code&gt;git notes merge --abort&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d49acb565d9b642605b0a997d7ebc3213ecdde25" translate="yes" xml:space="preserve">
          <source>The default pretty format for log/show/whatchanged command, See &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;, &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt;, &lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged[1]&lt;/a&gt;.</source>
          <target state="translated">log / show / whatchangedコマンドのデフォルトのprettyフォーマット。git &lt;a href=&quot;git-log&quot;&gt;-log [1]&lt;/a&gt;、&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;、&lt;a href=&quot;git-whatchanged&quot;&gt;git-whatchanged [1]を参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c642123af45071133c151f29614b42c5bfc1ffac" translate="yes" xml:space="preserve">
          <source>The default program to execute on the remote side when fetching. See option --upload-pack of &lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack[1]&lt;/a&gt;.</source>
          <target state="translated">フェッチ時にリモート側で実行するデフォルトのプログラム。&lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack [1]の&lt;/a&gt;オプション--upload-packを参照してください。</target>
        </trans-unit>
        <trans-unit id="02bc1378d0d05db5e7ff2ca7062e80f4098e5579" translate="yes" xml:space="preserve">
          <source>The default program to execute on the remote side when pushing. See option --receive-pack of &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">プッシュ時にリモート側で実行するデフォルトのプログラム。&lt;a href=&quot;git-push&quot;&gt;git-push [1]の&lt;/a&gt;オプション--receive-packを参照してください。</target>
        </trans-unit>
        <trans-unit id="1520b8813a02e6817b17665a2200c8c1eb73489c" translate="yes" xml:space="preserve">
          <source>The default remote is the remote of the remote-tracking branch of the current branch. If no such remote-tracking branch exists or the HEAD is detached, &quot;origin&quot; is assumed to be the default remote. If the superproject doesn&amp;rsquo;t have a default remote configured the superproject is its own authoritative upstream and the current working directory is used instead.</source>
          <target state="translated">デフォルトのリモートは、現在のブランチのリモート追跡ブランチのリモートです。そのようなリモート追跡ブランチが存在しないか、HEADが切り離されている場合、「origin」がデフォルトのリモートであると見なされます。スーパープロジェクトにデフォルトのリモートが設定されていない場合、スーパープロジェクトはそれ自体が権威のある上流であり、代わりに現在の作業ディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="0d78370864f4fde80869e4efb080139612c8d161" translate="yes" xml:space="preserve">
          <source>The default set of &quot;refspec&quot; for &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;. See &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;の「refspec」のデフォルトセット。&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6e7461b63dbe3a9bd4be74e77260f6121d70becf" translate="yes" xml:space="preserve">
          <source>The default set of &quot;refspec&quot; for &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;の「refspec」のデフォルトセット。&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9b1d55965a766c32086046542d13a0c5cafb5d20" translate="yes" xml:space="preserve">
          <source>The default set of branches for &lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch[1]&lt;/a&gt;. See &lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch [1]&lt;/a&gt;のデフォルトのブランチセット。&lt;a href=&quot;git-show-branch&quot;&gt;git-show-branch [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8f8a6ecfdcb232e0e35afa31c75a9bb76e3ba014" translate="yes" xml:space="preserve">
          <source>The default template directory includes some directory structure, suggested &quot;exclude patterns&quot; (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), and sample hook files.</source>
          <target state="translated">デフォルトのテンプレートディレクトリには、いくつかのディレクトリ構造、推奨される「除外パターン」（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）、およびサンプルフックファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="5c5dda91be7317473d73b4f4f28156d762d8905f" translate="yes" xml:space="preserve">
          <source>The default threading style for &lt;code&gt;git format-patch&lt;/code&gt;. Can be a boolean value, or &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;deep&lt;/code&gt;. &lt;code&gt;shallow&lt;/code&gt; threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the &lt;code&gt;--in-reply-to&lt;/code&gt;, and the first patch mail, in this order. &lt;code&gt;deep&lt;/code&gt; threading makes every mail a reply to the previous one. A true boolean value is the same as &lt;code&gt;shallow&lt;/code&gt;, and a false value disables threading.</source>
          <target state="translated">&lt;code&gt;git format-patch&lt;/code&gt; のデフォルトのスレッドスタイル。ブール値、または &lt;code&gt;shallow&lt;/code&gt; または &lt;code&gt;deep&lt;/code&gt; ことができます。 &lt;code&gt;shallow&lt;/code&gt; スレッドは、すべてのメールをシリーズのヘッドへの返信にします。ヘッドは、カバーレター、 &lt;code&gt;--in-reply-to&lt;/code&gt; in -reply-to、および最初のパッチメールからこの順序で選択されます。 &lt;code&gt;deep&lt;/code&gt; スレッドは、すべてのメールを前のメールへの返信にします。 trueのブール値は、 &lt;code&gt;shallow&lt;/code&gt; と同じであり、falseの値はスレッド化を無効にします。</target>
        </trans-unit>
        <trans-unit id="0eb7f832f6b33a6020eb8629fee287c4b15b4801" translate="yes" xml:space="preserve">
          <source>The default upstream &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;. Most projects have at least one upstream project which they track. By default 'origin' is used for that purpose. New upstream updates will be fetched into &lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;remote-tracking branches&lt;/a&gt; named origin/name-of-upstream-branch, which you can see using &lt;code&gt;git branch -r&lt;/code&gt;.</source>
          <target state="translated">デフォルトの上流&lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;。ほとんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、そのために「origin」が使用されます。新しいアップストリーム更新は、origin / name-of-upstream-branchという名前の&lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;リモート追跡ブランチに&lt;/a&gt;フェッチされます。これは &lt;code&gt;git branch -r&lt;/code&gt; を使用して確認できます。</target>
        </trans-unit>
        <trans-unit id="4f838be44da45fd1828d0b46b391485ccd56187e" translate="yes" xml:space="preserve">
          <source>The default upstream &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;. Most projects have at least one upstream project which they track. By default &lt;code&gt;origin&lt;/code&gt; is used for that purpose. New upstream updates will be fetched into &lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;remote-tracking branches&lt;/a&gt; named origin/name-of-upstream-branch, which you can see using &lt;code&gt;git branch -r&lt;/code&gt;.</source>
          <target state="translated">デフォルトの上流&lt;a href=&quot;#def_repository&quot;&gt;リポジトリ&lt;/a&gt;。ほとんどのプロジェクトには、追跡する上流プロジェクトが少なくとも1つあります。デフォルトでは、そのために &lt;code&gt;origin&lt;/code&gt; が使用されます。新しいアップストリーム更新は、origin / name-of-upstream-branchという名前の&lt;a href=&quot;#def_remote_tracking_branch&quot;&gt;リモート追跡ブランチに&lt;/a&gt;フェッチされます。これは &lt;code&gt;git branch -r&lt;/code&gt; を使用して確認できます。</target>
        </trans-unit>
        <trans-unit id="66087a54aa582dff2f539d6f92ec2461ac3012fd" translate="yes" xml:space="preserve">
          <source>The default value for --window is 10 and --depth is 50. The maximum depth is 4095.</source>
          <target state="translated">windowのデフォルト値は10、--depthは50です。最大深度は4095です。</target>
        </trans-unit>
        <trans-unit id="90d3816cdd271ff4f563d74700f0c34c9ae7702c" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;$projectroot&lt;/code&gt; is &lt;code&gt;/pub/git&lt;/code&gt;. You can change it during building gitweb via &lt;code&gt;GITWEB_PROJECTROOT&lt;/code&gt; build configuration variable.</source>
          <target state="translated">&lt;code&gt;$projectroot&lt;/code&gt; のデフォルト値は &lt;code&gt;/pub/git&lt;/code&gt; です。 &lt;code&gt;GITWEB_PROJECTROOT&lt;/code&gt; ビルド構成変数を使用して、gitwebのビルド中に変更できます。</target>
        </trans-unit>
        <trans-unit id="78bcbc1a976cbafa1db494161487aec966c7436d" translate="yes" xml:space="preserve">
          <source>The default value is either &lt;code&gt;static/gitweb.js&lt;/code&gt;, or &lt;code&gt;static/gitweb.min.js&lt;/code&gt; if the &lt;code&gt;JSMIN&lt;/code&gt; build variable was defined, i.e. if JavaScript minifier was used at build time. &lt;strong&gt;Note&lt;/strong&gt; that this single file is generated from multiple individual JavaScript &quot;modules&quot;.</source>
          <target state="translated">&lt;code&gt;JSMIN&lt;/code&gt; ビルド変数が定義されている場合、つまりビルド時にJavaScriptミニファイアが使用されている場合、デフォルト値は &lt;code&gt;static/gitweb.js&lt;/code&gt; または &lt;code&gt;static/gitweb.min.js&lt;/code&gt; のいずれかです。この単一のファイルは、複数の個別のJavaScript「モジュール」から生成されることに&lt;strong&gt;注意し&lt;/strong&gt;て&lt;strong&gt;ください&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="88fcf9aad2af8490af6dabfabbb5732019a6c8e1" translate="yes" xml:space="preserve">
          <source>The default value of this variable is determined by the &lt;code&gt;GITWEB_LIST&lt;/code&gt; makefile variable at installation time. If this variable is empty, gitweb will fall back to scanning the &lt;code&gt;$projectroot&lt;/code&gt; directory for repositories.</source>
          <target state="translated">この変数のデフォルト値は、インストール時に &lt;code&gt;GITWEB_LIST&lt;/code&gt; makefile変数によって決定されます。この変数が空の場合、gitwebは &lt;code&gt;$projectroot&lt;/code&gt; projectroot ディレクトリのリポジトリのスキャンにフォールバックします。</target>
        </trans-unit>
        <trans-unit id="da622b41696b803144c5254aad9443c84211d515" translate="yes" xml:space="preserve">
          <source>The default value of this variable is determined by the build-time configuration variable &lt;code&gt;GITWEB_PROJECT_MAXDEPTH&lt;/code&gt;, which defaults to 2007.</source>
          <target state="translated">この変数のデフォルト値は、ビルド時の構成変数 &lt;code&gt;GITWEB_PROJECT_MAXDEPTH&lt;/code&gt; によって決定されます。デフォルトは2007です。</target>
        </trans-unit>
        <trans-unit id="777a0a86855d35a436d0a0e990f3b787a636cb43" translate="yes" xml:space="preserve">
          <source>The defined extensions are:</source>
          <target state="translated">定義された拡張子は</target>
        </trans-unit>
        <trans-unit id="2309a4e043845fb6e7e786e69af3d5ed57221f3f" translate="yes" xml:space="preserve">
          <source>The definition of a diff driver is done in &lt;code&gt;gitconfig&lt;/code&gt;, not &lt;code&gt;gitattributes&lt;/code&gt; file, so strictly speaking this manual page is a wrong place to talk about it. However&amp;hellip;​</source>
          <target state="translated">差分ドライバの定義がで行われ &lt;code&gt;gitconfig&lt;/code&gt; ない、 &lt;code&gt;gitattributes&lt;/code&gt; ので、厳密には、このマニュアルページを言えば、ファイルは、それについての話に間違った場所です。しかし&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="05fbc211f0bbdc85a5cbba915fe02006f8119e9e" translate="yes" xml:space="preserve">
          <source>The definition of a merge driver is done in the &lt;code&gt;.git/config&lt;/code&gt; file, not in the &lt;code&gt;gitattributes&lt;/code&gt; file, so strictly speaking this manual page is a wrong place to talk about it. However&amp;hellip;​</source>
          <target state="translated">マージドライバーの定義は &lt;code&gt;gitattributes&lt;/code&gt; ファイルではなく &lt;code&gt;.git/config&lt;/code&gt; ファイルで行われるため、厳密に言えば、このマニュアルページはそれについて話すのに間違った場所です。しかし&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="096c7fcd9c9053c9edd8c72ca9c95b04e65c3409" translate="yes" xml:space="preserve">
          <source>The deletion removes the superproject&amp;rsquo;s tracking data, which are both the &lt;code&gt;gitlink&lt;/code&gt; entry and the section in the &lt;code&gt;.gitmodules&lt;/code&gt; file. The submodule&amp;rsquo;s working directory is removed from the file system, but the Git directory is kept around as it to make it possible to checkout past commits without requiring fetching from another repository.</source>
          <target state="translated">削除すると、スーパー &lt;code&gt;gitlink&lt;/code&gt; の追跡データが削除されます。これは、gitlinkエントリと &lt;code&gt;.gitmodules&lt;/code&gt; ファイルのセクションの両方です。サブモジュールの作業ディレクトリはファイルシステムから削除されますが、Gitディレクトリは別のリポジトリからフェッチすることなく過去のコミットをチェックアウトできるようにするために残されています。</target>
        </trans-unit>
        <trans-unit id="c4fe2a741691af413a8b078592b8e6a937844e84" translate="yes" xml:space="preserve">
          <source>The delta data is a sequence of instructions to reconstruct an object from the base object. If the base object is deltified, it must be converted to canonical form first. Each instruction appends more and more data to the target object until it&amp;rsquo;s complete. There are two supported instructions so far: one for copy a byte range from the source object and one for inserting new data embedded in the instruction itself.</source>
          <target state="translated">デルタデータは、ベースオブジェクトからオブジェクトを再構築するための一連の命令です。基本オブジェクトがデリート化されている場合は、最初に標準形式に変換する必要があります。各命令は、完了するまで、より多くのデータをターゲットオブジェクトに追加します。これまでにサポートされている2つの命令があります。1つはソースオブジェクトからバイト範囲をコピーするためのもので、もう1つは命令自体に埋め込まれた新しいデータを挿入するためのものです。</target>
        </trans-unit>
        <trans-unit id="892bc72de2972bd5305c51b8962327a3cfb2518f" translate="yes" xml:space="preserve">
          <source>The depth parameter used in the delta compression algorithm used by &lt;code&gt;git gc --aggressive&lt;/code&gt;. This defaults to 50, which is the default for the &lt;code&gt;--depth&lt;/code&gt; option when &lt;code&gt;--aggressive&lt;/code&gt; isn&amp;rsquo;t in use.</source>
          <target state="translated">&lt;code&gt;git gc --aggressive&lt;/code&gt; で使用されるデルタ圧縮アルゴリズムで使用される深度パラメーター。これはデフォルトで50です。これは、 &lt;code&gt;--aggressive&lt;/code&gt; が使用されていない場合の &lt;code&gt;--depth&lt;/code&gt; オプションのデフォルトです。</target>
        </trans-unit>
        <trans-unit id="71588492154c20723b86643e523c1d2b33771cc9" translate="yes" xml:space="preserve">
          <source>The design of fast-import allows it to import large projects in a minimum amount of memory usage and processing time. Assuming the frontend is able to keep up with fast-import and feed it a constant stream of data, import times for projects holding 10+ years of history and containing 100,000+ individual commits are generally completed in just 1-2 hours on quite modest (~$2,000 USD) hardware.</source>
          <target state="translated">fast-import の設計により、大規模なプロジェクトを最小限のメモリ使用量と処理時間でインポートすることができます。フロントエンドが fast-import に追いつき、一定のデータストリームを供給することができると仮定すると、10年以上の歴史を持ち、10万以上の個別のコミットを含むプロジェクトのインポート時間は、通常、非常に控えめな (~2,000ドル)ハードウェアでは、わずか1-2時間で完了します。</target>
        </trans-unit>
        <trans-unit id="cfd00b61765196c337cd6805a450f0ea641f8da0" translate="yes" xml:space="preserve">
          <source>The details of the credential will be provided on the helper&amp;rsquo;s stdin stream. The exact format is the same as the input/output format of the &lt;code&gt;git credential&lt;/code&gt; plumbing command (see the section &lt;code&gt;INPUT/OUTPUT
FORMAT&lt;/code&gt; in &lt;a href=&quot;git-credential&quot;&gt;git-credential[1]&lt;/a&gt; for a detailed specification).</source>
          <target state="translated">資格情報の詳細は、ヘルパーのstdinストリームで提供されます。正確な形式は、 &lt;code&gt;git credential&lt;/code&gt; plumbingコマンドの入力/出力形式と同じです（詳細な仕様については、&lt;a href=&quot;git-credential&quot;&gt;git-credential [1]の「&lt;/a&gt; &lt;code&gt;INPUT/OUTPUT FORMAT&lt;/code&gt; セクションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="c420d947d2d5939e423cde725977f1dbb1cf946b" translate="yes" xml:space="preserve">
          <source>The developer might want to rebase those commits to a newer &lt;code&gt;master&lt;/code&gt; while keeping the branch topology, for example when the first topic branch is expected to be integrated into &lt;code&gt;master&lt;/code&gt; much earlier than the second one, say, to resolve merge conflicts with changes to the DownloadButton class that made it into &lt;code&gt;master&lt;/code&gt;.</source>
          <target state="translated">開発者は、たとえば、最初のトピックブランチが2番目のブランチよりもはるかに早く &lt;code&gt;master&lt;/code&gt; に統合されることが予想される場合、たとえば、DownloadButtonへの変更によるマージの競合を解決するために、ブランチトポロジを維持しながら、これらのコミットを新しい &lt;code&gt;master&lt;/code&gt; にリベースすることができます。それを &lt;code&gt;master&lt;/code&gt; にしたクラス。</target>
        </trans-unit>
        <trans-unit id="38adb1a4eb1052b4c27e8f4f4a52ae35ba0619ad" translate="yes" xml:space="preserve">
          <source>The diff above shows the differences between the working-tree version of file.txt and the stage 2 and stage 3 versions. So instead of preceding each line by a single &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;, it now uses two columns: the first column is used for differences between the first parent and the working directory copy, and the second for differences between the second parent and the working directory copy. (See the &quot;COMBINED DIFF FORMAT&quot; section of &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt; for a details of the format.)</source>
          <target state="translated">上記の差分は、file.txtの作業ツリーバージョンとステージ2およびステージ3バージョンの違いを示しています。したがって、各行の前に単一の &lt;code&gt;+&lt;/code&gt; または &lt;code&gt;-&lt;/code&gt; を付ける代わりに、2つの列を使用します。最初の列は最初の親と作業ディレクトリのコピーの違いに使用され、2番目の列は2番目の親と作業ディレクトリのコピーの違いに使用されます。 （形式の詳細については、&lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1]&lt;/a&gt;の「COMBINED DIFF FORMAT」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="330f16adb7b4cb162abae538c3471400c6f3dfa4" translate="yes" xml:space="preserve">
          <source>The diff commands &lt;code&gt;git diff-index&lt;/code&gt;, &lt;code&gt;git diff-files&lt;/code&gt;, and &lt;code&gt;git diff-tree&lt;/code&gt; can be told to manipulate differences they find in unconventional ways before showing &lt;code&gt;diff&lt;/code&gt; output. The manipulation is collectively called &quot;diffcore transformation&quot;. This short note describes what they are and how to use them to produce &lt;code&gt;diff&lt;/code&gt; output that is easier to understand than the conventional kind.</source>
          <target state="translated">diffコマンド &lt;code&gt;git diff-index&lt;/code&gt; 、 &lt;code&gt;git diff-files&lt;/code&gt; 、および &lt;code&gt;git diff-tree&lt;/code&gt; は、 &lt;code&gt;diff&lt;/code&gt; 出力を表示する前に、従来とは異なる方法で見つけた違いを操作するように指示できます。この操作を総称して「diffcore変換」と呼びます。この短いメモでは、それらの概要と、それらを使用して、従来の種類よりも理解しやすい &lt;code&gt;diff&lt;/code&gt; 出力を生成する方法について説明します。</target>
        </trans-unit>
        <trans-unit id="4e50a3e21215031cd44c450ab91735643c2d6198" translate="yes" xml:space="preserve">
          <source>The diffcore mechanism is fed a list of such comparison results (each of which is called &quot;filepair&quot;, although at this point each of them talks about a single file), and transforms such a list into another list. There are currently 5 such transformations:</source>
          <target state="translated">diffcore メカニズムは、このような比較結果のリスト (それぞれを &quot;filepair&quot; と呼びますが、この時点ではそれぞれが単一のファイルについて話しています)を与えられ、そのようなリストを別のリストに変換します。現在、このような変換は5つあります。</target>
        </trans-unit>
        <trans-unit id="5ccc68add0025f283e287a514f59373a91910067" translate="yes" xml:space="preserve">
          <source>The directory holding the sha1 objects is missing.</source>
          <target state="translated">sha1 オブジェクトを格納しているディレクトリがありません。</target>
        </trans-unit>
        <trans-unit id="3e56ce3070b6d1fe8bc11b5262f83540c8411c39" translate="yes" xml:space="preserve">
          <source>The directory to find the quilt patches.</source>
          <target state="translated">キルトパッチを探すディレクトリ。</target>
        </trans-unit>
        <trans-unit id="238b3f49c4473bd1c995d19f9ef691e0ca16752f" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is to use a credential helper via the &lt;code&gt;credential.helper&lt;/code&gt; configuration. Most systems provide a standard choice to integrate with the system credential manager. For example, Git for Windows provides the &lt;code&gt;wincred&lt;/code&gt; credential manager, macOS has the &lt;code&gt;osxkeychain&lt;/code&gt; credential manager, and Unix systems with a standard desktop environment can use the &lt;code&gt;libsecret&lt;/code&gt; credential manager. All of these store credentials in an encrypted store to keep your passwords or tokens secure.</source>
          <target state="translated">これを行う最も簡単な方法は、 &lt;code&gt;credential.helper&lt;/code&gt; 構成を介して資格情報ヘルパーを使用することです。ほとんどのシステムは、システム資格情報マネージャーと統合するための標準的な選択肢を提供します。たとえば、Windows用のGitは提供 &lt;code&gt;wincred&lt;/code&gt; のMacOSがあり、資格証明マネージャを &lt;code&gt;osxkeychain&lt;/code&gt; 資格証明マネージャを、標準のデスクトップ環境とUNIXシステムでは使用することができます &lt;code&gt;libsecret&lt;/code&gt; 資格証明マネージャを。これらはすべて、パスワードまたはトークンを安全に保つために暗号化されたストアに資格情報を保存します。</target>
        </trans-unit>
        <trans-unit id="0bb0f16c4fefb50922eb2b1990a8580cecff19f2" translate="yes" xml:space="preserve">
          <source>The easiest way to do this is with:</source>
          <target state="translated">一番簡単なのはwithです。</target>
        </trans-unit>
        <trans-unit id="114ebd710b84299f5cb327f93e8be01e979eae23" translate="yes" xml:space="preserve">
          <source>The easy case</source>
          <target state="translated">簡単なケース</target>
        </trans-unit>
        <trans-unit id="ae6685a0ed898fdf61a802d261028cc9079a0958" translate="yes" xml:space="preserve">
          <source>The editor used to edit the commit log message will be chosen from the &lt;code&gt;GIT_EDITOR&lt;/code&gt; environment variable, the core.editor configuration variable, the &lt;code&gt;VISUAL&lt;/code&gt; environment variable, or the &lt;code&gt;EDITOR&lt;/code&gt; environment variable (in that order). See &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; for details.</source>
          <target state="translated">コミットログメッセージの編集に使用されるエディターは、 &lt;code&gt;GIT_EDITOR&lt;/code&gt; 環境変数、core.editor構成変数、 &lt;code&gt;VISUAL&lt;/code&gt; 環境変数、または &lt;code&gt;EDITOR&lt;/code&gt; 環境変数（この順序で）から選択されます。詳細は&lt;a href=&quot;git-var&quot;&gt;git-var [1]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="0e4dbd523803a96213d55b1fc234d8888f00a89f" translate="yes" xml:space="preserve">
          <source>The effect of the &lt;code&gt;git add&lt;/code&gt; was to add one entry to the index file:</source>
          <target state="translated">&lt;code&gt;git add&lt;/code&gt; の効果は、インデックスファイルに1つのエントリを追加することでした。</target>
        </trans-unit>
        <trans-unit id="8c668b981ec948c02063906a293d8a4332dec951" translate="yes" xml:space="preserve">
          <source>The effect of this is best shown by way of comparing to &lt;code&gt;--full-history&lt;/code&gt; with parent rewriting. The example turns into:</source>
          <target state="translated">この効果は、親の書き換えを &lt;code&gt;--full-history&lt;/code&gt; と比較することで最もよく示されます。例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f01b79da1b24a8459870505ceabc7acd5dc253cb" translate="yes" xml:space="preserve">
          <source>The effective value of &quot;core.notesRef&quot; (possibly overridden by GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.</source>
          <target state="translated">また、&quot;core.notesRef &quot;の有効な値(おそらくGIT_NOTES_REFでオーバーライドされる)は、暗黙のうちに表示されるリファレンスのリストに追加されています。</target>
        </trans-unit>
        <trans-unit id="47170c140110158e7cecc3842f11a773c4cf2ae7" translate="yes" xml:space="preserve">
          <source>The effects of this are mostly persistent, e.g. when packs and loose objects are coalesced into one another pack the existing deltas in that pack might get re-used, but there are also various cases where we might pick a sub-optimal delta from a newer pack instead.</source>
          <target state="translated">例えば、パックとルーズオブジェクトを別のパックに合体させると、そのパックの既存のデルタが再利用されるかもしれませんが、代わりに新しいパックの中から最適でないデルタを選択する場合もあります。</target>
        </trans-unit>
        <trans-unit id="bf28d97f6ba9304b5153752f84c8628b03d2d10b" translate="yes" xml:space="preserve">
          <source>The email address used in the author and committer identities if no other relevant environment variable or configuration setting has been set.</source>
          <target state="translated">他に関連する環境変数や設定が設定されていない場合は、著者およびコミッターのアイデンティティで使用される電子メールアドレスを指定します。</target>
        </trans-unit>
        <trans-unit id="92e306fa99dcf31c1372828d693f49a0c8b3dc6a" translate="yes" xml:space="preserve">
          <source>The email address used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the &lt;code&gt;user.email&lt;/code&gt; and &lt;code&gt;author.email&lt;/code&gt; configuration settings.</source>
          <target state="translated">コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、作成者IDで使用される電子メールアドレス。 &lt;code&gt;user.email&lt;/code&gt; および &lt;code&gt;author.email&lt;/code&gt; の構成設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="7e46e2a5bb8fdd59d614c9b7aa9560522ab90daa" translate="yes" xml:space="preserve">
          <source>The email address used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the &lt;code&gt;user.email&lt;/code&gt; and &lt;code&gt;committer.email&lt;/code&gt; configuration settings.</source>
          <target state="translated">コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、作成者IDで使用される電子メールアドレス。 &lt;code&gt;user.email&lt;/code&gt; および &lt;code&gt;committer.email&lt;/code&gt; の構成設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="e05ce4cdee1f111bdf6e1a5c14e6220d9920c4e2" translate="yes" xml:space="preserve">
          <source>The equivalence test is based on the diff, after removing whitespace and line numbers. git-cherry therefore detects when commits have been &quot;copied&quot; by means of &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;, &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; or &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;.</source>
          <target state="translated">等価性テストは、空白と行番号を削除した後のdiffに基づいています。したがって、git-cherryは、コミットが&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt;、&lt;a href=&quot;git-am&quot;&gt;git-am [1]、&lt;/a&gt;または&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;によって「コピー」されたことを検出します。</target>
        </trans-unit>
        <trans-unit id="1c5c570f3616a5224dd6e91327ceb211453e9ddc" translate="yes" xml:space="preserve">
          <source>The error event may be emitted more than once. The format string allows post-processors to group errors by type without worrying about specific error arguments.</source>
          <target state="translated">エラーイベントは、複数回放出される可能性があります。このフォーマット文字列は、ポストプロセッサが特定のエラー引数を気にすることなく、エラーをタイプ別にグループ化することを可能にします。</target>
        </trans-unit>
        <trans-unit id="2c5c3dbbaebe5825bdfa9c22deed2d10f337e86e" translate="yes" xml:space="preserve">
          <source>The event format target is a JSON-based format of event data suitable for telemetry analysis. This format is enabled with the &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; environment variable or the &lt;code&gt;trace2.eventTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">イベント形式ターゲットは、テレメトリ分析に適したJSONベースのイベントデータ形式です。この形式は、 &lt;code&gt;GIT_TRACE2_EVENT&lt;/code&gt; 環境変数または &lt;code&gt;trace2.eventTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="bb53cc945a6f48ddfeb31dcd9983e9640d488cf9" translate="yes" xml:space="preserve">
          <source>The ever-versatile &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; command can also be used to examine tree objects, but &lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree[1]&lt;/a&gt; will give you more details:</source>
          <target state="translated">汎用性の高い&lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt;コマンドを使用してツリーオブジェクトを調べることもできますが、&lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree [1]で&lt;/a&gt;詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="2cae5c144ae6a6f552f7dcee7bbaf0209258a3bd" translate="yes" xml:space="preserve">
          <source>The example configuration presented here is guaranteed to be backwards and forward compatible.</source>
          <target state="translated">ここで紹介する構成例は、前後互換性が保証されています。</target>
        </trans-unit>
        <trans-unit id="a825d1fa42cf64b4befab7c11786e411935cba6b" translate="yes" xml:space="preserve">
          <source>The examples in this FAQ assume a standard POSIX shell, like &lt;code&gt;bash&lt;/code&gt; or &lt;code&gt;dash&lt;/code&gt;, and a user, A U Thor, who has the account &lt;code&gt;author&lt;/code&gt; on the hosting provider &lt;code&gt;git.example.org&lt;/code&gt;.</source>
          <target state="translated">このFAQの例では、 &lt;code&gt;bash&lt;/code&gt; や &lt;code&gt;dash&lt;/code&gt; などの標準のPOSIXシェルと、ホスティングプロバイダー &lt;code&gt;git.example.org&lt;/code&gt; にアカウント作成 &lt;code&gt;author&lt;/code&gt; がいるユーザーAUThorを想定しています。</target>
        </trans-unit>
        <trans-unit id="77578078110fe9093d1036dd58aeebc2db7df1b8" translate="yes" xml:space="preserve">
          <source>The exit code from this hook invocation is ignored, however a non-zero exit code will generate an error message.</source>
          <target state="translated">このフック呼び出しの終了コードは無視されますが、0 以外の終了コードはエラーメッセージを生成します。</target>
        </trans-unit>
        <trans-unit id="1e405cb397afa437170eea29059b03dcf97426f6" translate="yes" xml:space="preserve">
          <source>The exit code from this hook invocation is ignored; the only thing left for &lt;code&gt;git-receive-pack&lt;/code&gt; to do at that point is to exit itself anyway.</source>
          <target state="translated">このフック呼び出しからの終了コードは無視されます。その時点で &lt;code&gt;git-receive-pack&lt;/code&gt; に残された唯一のことは、とにかくそれ自体を終了することです。</target>
        </trans-unit>
        <trans-unit id="5a81c04e486b5c66b0be7554a6e91773cfd1a9a9" translate="yes" xml:space="preserve">
          <source>The exit status determines whether git will use the data from the hook to limit its search. On error, it will fall back to verifying all files and folders.</source>
          <target state="translated">exit status は、git がフックのデータを使って検索を制限するかどうかを決定します。エラーの場合は、すべてのファイルやフォルダの検証に戻ります。</target>
        </trans-unit>
        <trans-unit id="bfebe1cb22dde824ad5950ca41e165ed720dc31c" translate="yes" xml:space="preserve">
          <source>The exit status of the hook is ignored for any state except for the &quot;prepared&quot; state. In the &quot;prepared&quot; state, a non-zero exit status will cause the transaction to be aborted. The hook will not be called with &quot;aborted&quot; state in that case.</source>
          <target state="translated">フックの終了ステータスは、&quot;prepared &quot;ステート以外のどのステートでも無視されます。&quot;prepared &quot;状態では、終了ステータスが0でない場合、トランザクションは中止されます。その場合、フックは &quot;aborted &quot;状態では呼び出されません。</target>
        </trans-unit>
        <trans-unit id="863cf74b97781c15eaa4bf39c81be105821817bd" translate="yes" xml:space="preserve">
          <source>The exit value of this program is negative on error, and the number of conflicts otherwise (truncated to 127 if there are more than that many conflicts). If the merge was clean, the exit value is 0.</source>
          <target state="translated">このプログラムの終了値は、エラーの場合は負の値、それ以外の場合はコンフリクトの数を表します (コンフリクトがそれ以上ある場合は 127 に切り捨てられます)。マージがクリーンな場合、終了値は 0 です。</target>
        </trans-unit>
        <trans-unit id="600e0ed5040d09634bf101b6adc431e3349d2258" translate="yes" xml:space="preserve">
          <source>The expected use case of this is to write supporting explanation for the commit that does not belong to the commit log message proper, and include it with the patch submission. While one can simply write these explanations after &lt;code&gt;format-patch&lt;/code&gt; has run but before sending, keeping them as Git notes allows them to be maintained between versions of the patch series (but see the discussion of the &lt;code&gt;notes.rewrite&lt;/code&gt; configuration options in &lt;a href=&quot;git-notes&quot;&gt;git-notes[1]&lt;/a&gt; to use this workflow).</source>
          <target state="translated">これの予想される使用例は、適切なコミットログメッセージに属さないコミットのサポート説明を記述し、それをパッチ送信に含めることです。一つは、単に後にこれらの説明を書くことができますが &lt;code&gt;format-patch&lt;/code&gt; 実行しているが、送信Gitのノートとして、それらを維持する前に、パッチシリーズのバージョン間で維持することができます（ただし、の議論を参照 &lt;code&gt;notes.rewrite&lt;/code&gt; に設定オプションを&lt;a href=&quot;git-notes&quot;&gt;[gitの-ノート1]&lt;/a&gt;このワークフローを使用します）。</target>
        </trans-unit>
        <trans-unit id="7c7921a0c6ea4cec42a427f589011997d35e15f9" translate="yes" xml:space="preserve">
          <source>The external command can optionally write a single line to its standard output to be sent to the requestor as an error message when it declines the service.</source>
          <target state="translated">外部コマンドは、サービスを拒否するときにエラーメッセージとしてリクエスト側に送信されるように、標準出力に1行書くことができます。</target>
        </trans-unit>
        <trans-unit id="34c4f9db557882c9df4177a31e00a543de8934c9" translate="yes" xml:space="preserve">
          <source>The extra &lt;code&gt;NUL&lt;/code&gt; before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to &lt;code&gt;NUL&lt;/code&gt; would yield the pathname, but if that is &lt;code&gt;NUL&lt;/code&gt;, the record will show two paths.</source>
          <target state="translated">名前が変更された場合のプリイメージパスの前の追加の &lt;code&gt;NUL&lt;/code&gt; は、出力を読み取るスクリプトが、読み取られている現在のレコードが単一パスレコードであるか名前変更/コピーレコードであるかを先読みせずに通知できるようにするためです。追加および削除された行を読み取った後、 &lt;code&gt;NUL&lt;/code&gt; まで読み取るとパス名が得られますが、それが &lt;code&gt;NUL&lt;/code&gt; の場合、レコードには2つのパスが表示されます。</target>
        </trans-unit>
        <trans-unit id="1b54438722ed3844a0702f9ed09c56d6aef28ee2" translate="yes" xml:space="preserve">
          <source>The fast-import backend itself can import into an empty repository (one that has already been initialized by &lt;code&gt;git init&lt;/code&gt;) or incrementally update an existing populated repository. Whether or not incremental imports are supported from a particular foreign source depends on the frontend program in use.</source>
          <target state="translated">高速インポートバックエンド自体は、空のリポジトリ（すでに &lt;code&gt;git init&lt;/code&gt; によって初期化されているもの）にインポートするか、既存の設定済みリポジトリを段階的に更新できます。特定の外部ソースからの増分インポートがサポートされているかどうかは、使用しているフロントエンドプログラムによって異なります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
