<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="3dfacf796b68e98a60c628fed43445479dc82ce1" translate="yes" xml:space="preserve">
          <source>The fast-import mechanism used by &lt;code&gt;git p4&lt;/code&gt; creates one pack file for each invocation of &lt;code&gt;git p4 sync&lt;/code&gt;. Normally, Git garbage compression (&lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;) automatically compresses these to fewer pack files, but explicit invocation of &lt;code&gt;git repack -adf&lt;/code&gt; may improve performance.</source>
          <target state="translated">&lt;code&gt;git p4&lt;/code&gt; で使用される高速インポートメカニズムは、 &lt;code&gt;git p4 sync&lt;/code&gt; の呼び出しごとに1つのパックファイルを作成します。通常、Gitガベージ圧縮（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt;）はこれらを自動的に圧縮してパックファイルを減らしますが、 &lt;code&gt;git repack -adf&lt;/code&gt; を明示的に呼び出すとパフォーマンスが向上する場合があります。</target>
        </trans-unit>
        <trans-unit id="53e903dc94674f5b365dd31d16a6c2e334c714e3" translate="yes" xml:space="preserve">
          <source>The fetch and push protocols are not designed to prevent one side from stealing data from the other repository that was not intended to be shared. If you have private data that you need to protect from a malicious peer, your best option is to store it in another repository. This applies to both clients and servers. In particular, namespaces on a server are not effective for read access control; you should only grant read access to a namespace to clients that you would trust with read access to the entire repository.</source>
          <target state="translated">フェッチとプッシュのプロトコルは、一方の側が共有することを意図していない他方のリポジトリからデータを盗むことを防ぐために設計されたものではありません。悪意のあるピアから保護する必要のあるプライベートデータがある場合、最善の選択肢は別のリポジトリに保存することです。これはクライアントとサーバの両方に当てはまります。特に、サーバー上のネームスペースは読み取りアクセス制御には効果的ではありません。リポジトリ全体への読み取りアクセスを信頼できるクライアントにのみ、ネームスペースへの読み取りアクセスを許可すべきです。</target>
        </trans-unit>
        <trans-unit id="648bf821f46e9909499e1fbac0dd96a1ab871eb7" translate="yes" xml:space="preserve">
          <source>The fields (including the &lt;code&gt;-&amp;gt;&lt;/code&gt;) are separated from each other by a single space. If a filename contains whitespace or other nonprintable characters, that field will be quoted in the manner of a C string literal: surrounded by ASCII double quote (34) characters, and with interior special characters backslash-escaped.</source>
          <target state="translated">フィールド（ &lt;code&gt;-&amp;gt;&lt;/code&gt; を含む）は、1つのスペースで互いに分離されます。ファイル名に空白またはその他の印刷不可能な文字が含まれている場合、そのフィールドはC文字列リテラルのように引用符で囲まれます。ASCII二重引用符（34）文字で囲まれ、内部の特殊文字はバックスラッシュでエスケープされます。</target>
        </trans-unit>
        <trans-unit id="3994e582754827987cb1dab035b29a73b90c4b3e" translate="yes" xml:space="preserve">
          <source>The file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are case-insensitive. Only alphanumeric characters, &lt;code&gt;-&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; are allowed in section names. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable.</source>
          <target state="translated">ファイルはセクションと変数で構成されています。セクションは角括弧で囲まれたセクション名で始まり、次のセクションが始まるまで続きます。セクション名は大文字と小文字を区別しません。英数字のみ &lt;code&gt;-&lt;/code&gt; および &lt;code&gt;.&lt;/code&gt; セクション名で使用できます。各変数はいくつかのセクションに属している必要があります。つまり、変数の最初の設定の前にセクションヘッダーがなければなりません。</target>
        </trans-unit>
        <trans-unit id="b77694751b662ffffe51a33dc2cd7f9b8be897f4" translate="yes" xml:space="preserve">
          <source>The file contains one subsection per submodule, and the subsection value is the name of the submodule. The name is set to the path where the submodule has been added unless it was customized with the &lt;code&gt;--name&lt;/code&gt; option of &lt;code&gt;git submodule add&lt;/code&gt;. Each submodule section also contains the following required keys:</source>
          <target state="translated">ファイルにはサブモジュールごとに1つのサブセクションが含まれ、サブセクションの値はサブモジュールの名前です。 &lt;code&gt;git submodule add&lt;/code&gt; の &lt;code&gt;--name&lt;/code&gt; オプションでカスタマイズされていない限り、名前はサブモジュールが追加されたパスに設定されます。各サブモジュールセクションには、次の必須キーも含まれています。</target>
        </trans-unit>
        <trans-unit id="d7d8ebbce919f993c68a8bac80b9fbb16d92024e" translate="yes" xml:space="preserve">
          <source>The file format includes parameters for the object ID hash function, so a future change of hash algorithm does not require a change in format.</source>
          <target state="translated">ファイル形式にはオブジェクトIDハッシュ関数のパラメータが含まれているため、将来的にハッシュアルゴリズムを変更しても形式を変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1bb6e340dc566db02505e0c4003761a9d85c40c1" translate="yes" xml:space="preserve">
          <source>The file is concluded with a trailer:</source>
          <target state="translated">ファイルは予告編で締めくくられています。</target>
        </trans-unit>
        <trans-unit id="996f5fbcdb16f7d7ee85c3a6ae77d46a1781884a" translate="yes" xml:space="preserve">
          <source>The file parameters can point at the user&amp;rsquo;s working file (e.g. &lt;code&gt;new-file&lt;/code&gt; in &quot;git-diff-files&quot;), &lt;code&gt;/dev/null&lt;/code&gt; (e.g. &lt;code&gt;old-file&lt;/code&gt; when a new file is added), or a temporary file (e.g. &lt;code&gt;old-file&lt;/code&gt; in the index). &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; should not worry about unlinking the temporary file --- it is removed when &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; exits.</source>
          <target state="translated">ファイルパラメータは、ユーザーの作業ファイル（「git-diff-files」の &lt;code&gt;new-file&lt;/code&gt; など）、 &lt;code&gt;/dev/null&lt;/code&gt; （たとえば、新しいファイルが追加されたときの &lt;code&gt;old-file&lt;/code&gt; ）、または一時ファイル（たとえば &lt;code&gt;old-file&lt;/code&gt; インデックス内のファイル）。 &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; は一時ファイルのリンク解除について心配する必要はありません--- &lt;code&gt;GIT_EXTERNAL_DIFF&lt;/code&gt; が終了すると削除されます。</target>
        </trans-unit>
        <trans-unit id="b979e5d416845ad4db7c29ab613bf67d05d7d448" translate="yes" xml:space="preserve">
          <source>The files are read in the order given above, with last value found taking precedence over values read earlier. When multiple values are taken then all values of a key from all files will be used.</source>
          <target state="translated">ファイルは上記の順序で読み込まれ、最後に見つかった値が以前に読み込まれた値よりも優先されます。複数の値を取得した場合は、すべてのファイルからキーのすべての値が使用されます。</target>
        </trans-unit>
        <trans-unit id="22cd650e22be9431ebec70f16e27f0954b25a243" translate="yes" xml:space="preserve">
          <source>The files to read the patch from. &lt;code&gt;-&lt;/code&gt; can be used to read from the standard input.</source>
          <target state="translated">パッチを読み込むファイル。 &lt;code&gt;-&lt;/code&gt; 標準入力から読み取るために使用できます。</target>
        </trans-unit>
        <trans-unit id="fc839d554b73db3187cb52551b31c221d5647965" translate="yes" xml:space="preserve">
          <source>The filter is expected to respond with a list of &quot;key=value&quot; pairs terminated with a flush packet. If the filter does not experience problems then the list must contain a &quot;success&quot; status. Right after these packets the filter is expected to send the content in zero or more pkt-line packets and a flush packet at the end. Finally, a second list of &quot;key=value&quot; pairs terminated with a flush packet is expected. The filter can change the status in the second list or keep the status as is with an empty list. Please note that the empty list must be terminated with a flush packet regardless.</source>
          <target state="translated">フィルタはフラッシュパケットで終わる &quot;key=value&quot; ペアのリストで応答することが期待されます。もしフィルタに問題がなければ、リストには &quot;success&quot; ステータスが含まれていなければなりません。これらのパケットの直後に、フィルタは 0 個以上の pkt-line パケットで内容を送り、最後にフラッシュパケットを送ることが期待されます。最後に、フラッシュパケットで終わる &quot;key=value&quot; ペアの二番目のリストが期待されます。フィルタは 2 番目のリストの状態を変更したり、 空のリストで状態を維持したりすることができます。空のリストは、どのような場合でもフラッシュパケットで終了しなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="48c7b9e769ad1a8ac7a03d8a91befba4e1dc75d4" translate="yes" xml:space="preserve">
          <source>The filter that will be applied when fetching from this promisor remote.</source>
          <target state="translated">このプロミスリモートからの取得時に適用されるフィルタ。</target>
        </trans-unit>
        <trans-unit id="67e1cbcd0bc26ca591869ec55e18981d4a05f31d" translate="yes" xml:space="preserve">
          <source>The filters are applied in the order as listed below. The &amp;lt;command&amp;gt; argument is always evaluated in the shell context using the &lt;code&gt;eval&lt;/code&gt; command (with the notable exception of the commit filter, for technical reasons). Prior to that, the &lt;code&gt;$GIT_COMMIT&lt;/code&gt; environment variable will be set to contain the id of the commit being rewritten. Also, GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, and GIT_COMMITTER_DATE are taken from the current commit and exported to the environment, in order to affect the author and committer identities of the replacement commit created by &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; after the filters have run.</source>
          <target state="translated">フィルターは、以下にリストされている順序で適用されます。 &amp;lt;command&amp;gt;引数は、常に &lt;code&gt;eval&lt;/code&gt; コマンドを使用してシェルコンテキストで評価されます（技術的な理由により、コミットフィルターの注目すべき例外を除きます）。その前に、 &lt;code&gt;$GIT_COMMIT&lt;/code&gt; 環境変数は、書き換えられるコミットのIDを含むように設定されます。また、GIT_AUTHOR_NAME、GIT_AUTHOR_EMAIL、GIT_AUTHOR_DATE、GIT_COMMITTER_NAME、GIT_COMMITTER_EMAIL、およびGIT_COMMITTER_DATEは、現在からコミット取られ、環境にエクスポート、交換の作者とコミッタのアイデンティティに影響を与えるためにによって作成されたコミットされている&lt;a href=&quot;git-commit-tree&quot;&gt;gitのコミットツリー[1]&lt;/a&gt;後フィルターが実行されました。</target>
        </trans-unit>
        <trans-unit id="96e6a8e11c595c66ed126e7ed94498b41b8ef74c" translate="yes" xml:space="preserve">
          <source>The final &quot;/&quot; is important. The exported name is literally just prefixed with the specified string. Contrast this with the following example.</source>
          <target state="translated">最後の「/」は重要です。エクスポートされた名前は文字通り、指定された文字列の前に付けられているだけです。これを次の例と対比してみましょう。</target>
        </trans-unit>
        <trans-unit id="5e71083855686454b686d549c1aa754044d9c24f" translate="yes" xml:space="preserve">
          <source>The final result will be a series of commits, one for each patch in the original mailbox, with authorship and commit log message each taken from the message containing each patch.</source>
          <target state="translated">最終的な結果は、元のメールボックスにある各パッチごとにコミットが行われ、それぞれのパッチを含むメッセージから作者とコミットログメッセージが取得されます。</target>
        </trans-unit>
        <trans-unit id="d06dc79919ba8d7d4e32bae22586b9e61ea6ab90" translate="yes" xml:space="preserve">
          <source>The first &quot;git bisect&quot; subcommand to use is &quot;git bisect start&quot; to start the search. Then bounds must be set to limit the commit space. This is done usually by giving one &quot;bad&quot; and at least one &quot;good&quot; commit. They can be passed in the initial call to &quot;git bisect start&quot; like this:</source>
          <target state="translated">最初に使う &quot;git bisect &quot;サブコマンドは &quot;git bisect start &quot;で検索を開始します。次に、コミットスペースを制限するために境界線を設定しなければなりません。これは通常 &quot;bad&quot; コミットと &quot;good&quot; コミットを少なくともひとつずつ与えることで行われます。これらは、&quot;git bisect start&quot; の最初のコールで次のように渡すことができます。</target>
        </trans-unit>
        <trans-unit id="7d24667b8a3af4ae680279e90e5939ecc7d57754" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;N&lt;/code&gt; lines of the message.</source>
          <target state="translated">メッセージの最初の &lt;code&gt;N&lt;/code&gt; 行。</target>
        </trans-unit>
        <trans-unit id="3dd96cc8c67fe6f3794e1faadfc16d4e75778490" translate="yes" xml:space="preserve">
          <source>The first argument, &lt;code&gt;origin&lt;/code&gt;, just tells Git to fetch from the repository you originally cloned from. The second argument tells Git to fetch the branch named &lt;code&gt;todo&lt;/code&gt; from the remote repository, and to store it locally under the name &lt;code&gt;refs/heads/my-todo-work&lt;/code&gt;.</source>
          <target state="translated">最初の引数 &lt;code&gt;origin&lt;/code&gt; は、最初にクローンを作成したリポジトリからフェッチするようにGitに指示するだけです。2番目の引数は、リモートリポジトリから &lt;code&gt;todo&lt;/code&gt; という名前のブランチをフェッチし、 &lt;code&gt;refs/heads/my-todo-work&lt;/code&gt; という名前でローカルに保存するようにGitに指示します。</target>
        </trans-unit>
        <trans-unit id="81bbac8df429c9294b949507806676c0327c9227" translate="yes" xml:space="preserve">
          <source>The first character given by this option will be the default character used when another separator is not specified in the config for this trailer.</source>
          <target state="translated">このオプションで与えられた最初の文字は、このトレイラーの設定で他の区切り文字が指定されていない場合に使用されるデフォルトの文字となります。</target>
        </trans-unit>
        <trans-unit id="39b9ae2f52daae0742c9cd959c54a342268035c6" translate="yes" xml:space="preserve">
          <source>The first command fetches the &lt;code&gt;maint&lt;/code&gt; branch from the repository at &lt;code&gt;git://git.kernel.org/pub/scm/git/git.git&lt;/code&gt; and the second command uses &lt;code&gt;FETCH_HEAD&lt;/code&gt; to examine the branch with &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;. The fetched objects will eventually be removed by git&amp;rsquo;s built-in housekeeping (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;).</source>
          <target state="translated">最初のコマンドは &lt;code&gt;git://git.kernel.org/pub/scm/git/git.git&lt;/code&gt; のリポジトリから &lt;code&gt;maint&lt;/code&gt; ブランチをフェッチし、2番目のコマンドは &lt;code&gt;FETCH_HEAD&lt;/code&gt; を使用して&lt;a href=&quot;git-log&quot;&gt;git-log [1]で&lt;/a&gt;ブランチを調べます。フェッチされたオブジェクトは、最終的にはgitの組み込みのハウスキーピングによって削除されます（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fc54aa6f7f46c36afb224191ab9ce02506aa2fd9" translate="yes" xml:space="preserve">
          <source>The first defense against such problems is backups. You can back up a Git directory using clone, or just using cp, tar, or any other backup mechanism.</source>
          <target state="translated">このような問題に対する最初の防御策はバックアップです。cloneを使ってGitディレクトリをバックアップしたり、cpやtarなどのバックアップ機構を使ってバックアップしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="eb17679ed2c14d3eecb0f1bd83c98beea1f4bea4" translate="yes" xml:space="preserve">
          <source>The first format is what gets used when &lt;code&gt;--stage&lt;/code&gt; is omitted or is not &lt;code&gt;--stage=all&lt;/code&gt;. The field tempname is the temporary file name holding the file content and path is the tracked path name in the index. Only the requested entries are output.</source>
          <target state="translated">最初の形式は、-- &lt;code&gt;--stage&lt;/code&gt; が省略されているか、-- &lt;code&gt;--stage=all&lt;/code&gt; ない場合に使用される形式です。tempnameフィールドはファイルの内容を保持する一時ファイル名で、pathはインデックス内の追跡されたパス名です。要求されたエントリのみが出力されます。</target>
        </trans-unit>
        <trans-unit id="e7e26fcb00a95d796be86027e9776fd349443123" translate="yes" xml:space="preserve">
          <source>The first is simple and appropriate if you do not have secure storage available for a password. It is generally configured by adding this to your config:</source>
          <target state="translated">最初のものはシンプルで、パスワードのために利用可能なセキュアなストレージがない場合には適切です。これは一般的には設定にこれを追加することで設定されます。</target>
        </trans-unit>
        <trans-unit id="51f664b1e28dce07dd2c1ef3f2cc4ddb005556f4" translate="yes" xml:space="preserve">
          <source>The first issue is performance. Unlike any previous option, the &lt;code&gt;--simplify-merges&lt;/code&gt; option requires walking the entire commit history before returning a single result. This can make the option difficult to use for very large repositories.</source>
          <target state="translated">最初の問題はパフォーマンスです。以前のオプションとは異なり、 &lt;code&gt;--simplify-merges&lt;/code&gt; オプションでは、単一の結果を返す前にコミット履歴全体をウォークする必要があります。これにより、非常に大規模なリポジトリでオプションを使用することが困難になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="561e4f0c34cc864db97b2078e570c6b7cf2ee83d" translate="yes" xml:space="preserve">
          <source>The first line of the input feeds 0 as the mode to remove the path; the SHA-1 does not matter as long as it is well formatted. Then the second and third line feeds stage 1 and stage 2 entries for that path. After the above, we would end up with this:</source>
          <target state="translated">入力の最初の行は、パスを削除するモードとして 0 をフィードします。そして2行目と3行目には、そのパスのステージ1とステージ2のエントリが入力されます。以上のようにすると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="d7a467221d570ce5d2e2454d168c252049fa7e64" translate="yes" xml:space="preserve">
          <source>The first number is the number of objects which are kept in individual files. The second is the amount of space taken up by those &quot;loose&quot; objects.</source>
          <target state="translated">最初の数字は、個々のファイルに保存されているオブジェクトの数です。2 番目は、それらの「ゆるい」オブジェクトによって占有されるスペースの量です。</target>
        </trans-unit>
        <trans-unit id="a3a16231598a15324fe96a0d30a2003f1c762045" translate="yes" xml:space="preserve">
          <source>The first paragraph of the message, which typically is a single line, is taken as the &quot;subject&quot; of the commit or the tag message. Instead of &lt;code&gt;contents:subject&lt;/code&gt;, field &lt;code&gt;subject&lt;/code&gt; can also be used to obtain same results. &lt;code&gt;:sanitize&lt;/code&gt; can be appended to &lt;code&gt;subject&lt;/code&gt; for subject line suitable for filename.</source>
          <target state="translated">メッセージの最初の段落（通常は1行）は、コミットまたはタグメッセージの「件名」と見なされます。代わりの &lt;code&gt;contents:subject&lt;/code&gt; フィールド &lt;code&gt;subject&lt;/code&gt; また、同じ結果を得るために使用することができます。 &lt;code&gt;:sanitize&lt;/code&gt; は、ファイル名に適した &lt;code&gt;subject&lt;/code&gt; に追加できます。</target>
        </trans-unit>
        <trans-unit id="1517f019c895db91a3158888218e464c0e667ed4" translate="yes" xml:space="preserve">
          <source>The first parameter passed to the hook is the indicator for the working directory being updated. &quot;1&quot; meaning working directory was updated or &quot;0&quot; when the working directory was not updated.</source>
          <target state="translated">フックに渡される最初のパラメータは、作業ディレクトリが更新されたかどうかの指標です。&quot;1&quot; は作業ディレクトリが更新されたことを意味し、&quot;0&quot; は作業ディレクトリが更新されなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="69f4b05a4b19ebccc10062a19a78b72d37ff6b60" translate="yes" xml:space="preserve">
          <source>The first rule takes precedence in the case of a single &amp;lt;commit&amp;gt;. To apply the second rule, i.e., format everything since the beginning of history up until &amp;lt;commit&amp;gt;, use the &lt;code&gt;--root&lt;/code&gt; option: &lt;code&gt;git format-patch
--root &amp;lt;commit&amp;gt;&lt;/code&gt;. If you want to format only &amp;lt;commit&amp;gt; itself, you can do this with &lt;code&gt;git format-patch -1 &amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">1つの&amp;lt;commit&amp;gt;の場合、最初のルールが優先されます。2番目のルールを適用するには、つまり、履歴の最初から&amp;lt;commit&amp;gt;までのすべてをフォーマットするには、-- &lt;code&gt;--root&lt;/code&gt; オプションを使用します： &lt;code&gt;git format-patch --root &amp;lt;commit&amp;gt;&lt;/code&gt; 。&amp;lt;commit&amp;gt;自体のみをフォーマットする場合は、 &lt;code&gt;git format-patch -1 &amp;lt;commit&amp;gt;&lt;/code&gt; を使用してこれを行うことができます。</target>
        </trans-unit>
        <trans-unit id="088dfc95ab36375e45956a12e0a84d20b54cd1e3" translate="yes" xml:space="preserve">
          <source>The first step is trivial: when you want to tell Git about any changes to your working tree, you use the &lt;code&gt;git update-index&lt;/code&gt; program. That program normally just takes a list of filenames you want to update, but to avoid trivial mistakes, it refuses to add new entries to the index (or remove existing ones) unless you explicitly tell it that you&amp;rsquo;re adding a new entry with the &lt;code&gt;--add&lt;/code&gt; flag (or removing an entry with the &lt;code&gt;--remove&lt;/code&gt;) flag.</source>
          <target state="translated">最初のステップは簡単です。作業ツリーの変更についてGitに伝えたい場合は、 &lt;code&gt;git update-index&lt;/code&gt; プログラムを使用します。そのプログラムは通常、更新したいファイル名のリストを取得するだけですが、些細な間違いを避けるために、新しいエントリを追加することを明示的に指定しない限り、インデックスへの新しいエントリの追加（または既存のエントリの削除）を拒否します。 &lt;code&gt;--add&lt;/code&gt; フラグ（または &lt;code&gt;--remove&lt;/code&gt; を使用してエントリを削除）フラグ。</target>
        </trans-unit>
        <trans-unit id="a1763915dd6826ebefd6dfcb3fd9fb79e61ff2f7" translate="yes" xml:space="preserve">
          <source>The first time that a commit shows up in the stream, it has various other information about it printed out with a one-word tag at the beginning of each line describing the extra commit information (author, email, committer, dates, summary, etc.).</source>
          <target state="translated">コミットが最初にストリームに表示されたときには、そのコミットに関するさまざまな情報が印刷され、各行の先頭には、追加のコミット情報 (作者、メールアドレス、コミット者、日付、サマリーなど)を記述したワンワードのタグが付けられます。</target>
        </trans-unit>
        <trans-unit id="33e2d00ff1c333999b37d340bc5ae3e8a3bfd826" translate="yes" xml:space="preserve">
          <source>The first time you run it, you will be prompted for your credentials. Enter the app-specific or your regular password as appropriate. If you have credential helper configured (see &lt;a href=&quot;git-credential&quot;&gt;git-credential[1]&lt;/a&gt;), the password will be saved in the credential store so you won&amp;rsquo;t have to type it the next time.</source>
          <target state="translated">初めて実行すると、資格情報の入力を求められます。必要に応じて、アプリ固有のパスワードまたは通常のパスワードを入力します。資格情報ヘルパーを構成している場合（&lt;a href=&quot;git-credential&quot;&gt;git-credential [1]を&lt;/a&gt;参照）、パスワードは資格情報ストアに保存されるため、次回入力する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1c77b9db9c00c5ba7e83e0fb24758e48237c23ee" translate="yes" xml:space="preserve">
          <source>The first two lines indicate that it is showing the two branches with the titles of their top-of-the-tree commits, you are currently on &lt;code&gt;master&lt;/code&gt; branch (notice the asterisk &lt;code&gt;*&lt;/code&gt; character), and the first column for the later output lines is used to show commits contained in the &lt;code&gt;master&lt;/code&gt; branch, and the second column for the &lt;code&gt;mybranch&lt;/code&gt; branch. Three commits are shown along with their titles. All of them have non blank characters in the first column (&lt;code&gt;*&lt;/code&gt; shows an ordinary commit on the current branch, &lt;code&gt;-&lt;/code&gt; is a merge commit), which means they are now part of the &lt;code&gt;master&lt;/code&gt; branch. Only the &quot;Some work&quot; commit has the plus &lt;code&gt;+&lt;/code&gt; character in the second column, because &lt;code&gt;mybranch&lt;/code&gt; has not been merged to incorporate these commits from the master branch. The string inside brackets before the commit log message is a short name you can use to name the commit. In the above example, &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;mybranch&lt;/code&gt; are branch heads. &lt;code&gt;master^&lt;/code&gt; is the first parent of &lt;code&gt;master&lt;/code&gt; branch head. Please see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; if you want to see more complex cases.</source>
          <target state="translated">最初の2行は、ツリーの最上位のコミットのタイトルが付いた2つのブランチが表示されており、現在 &lt;code&gt;master&lt;/code&gt; ブランチ（アスタリスク &lt;code&gt;*&lt;/code&gt; 文字に注意）にあり、以降の出力行の最初の列が &lt;code&gt;master&lt;/code&gt; ブランチに含まれるコミットと、 &lt;code&gt;mybranch&lt;/code&gt; ブランチの2番目の列を表示するために使用されます。 3つのコミットとそのタイトルが表示されます。それらのすべては、最初の列に空白以外の文字が含まれています（ &lt;code&gt;*&lt;/code&gt; は現在のブランチでの通常のコミットを示し、 &lt;code&gt;-&lt;/code&gt; マージコミットです）。つまり、これらは現在 &lt;code&gt;master&lt;/code&gt; ブランチの一部です。 「一部の作業」のコミットのみにプラス &lt;code&gt;+&lt;/code&gt; &lt;code&gt;mybranch&lt;/code&gt; はマスターブランチからのこれらのコミットを組み込むためにマージされていないため、2番目の列の文字。コミットログメッセージの前の括弧内の文字列は、コミットに名前を付けるために使用できる短い名前です。上記の例では、 &lt;code&gt;master&lt;/code&gt; と &lt;code&gt;mybranch&lt;/code&gt; はブランチヘッドです。 &lt;code&gt;master^&lt;/code&gt; は、 &lt;code&gt;master&lt;/code&gt; ブランチヘッドの最初の親です。より複雑なケースを見たい場合は、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="6b2c923c8cb34a6329089d3ed63e2b76d6f7ceed" translate="yes" xml:space="preserve">
          <source>The folder to drop the mails into, which is typically the Drafts folder. For example: &quot;INBOX.Drafts&quot;, &quot;INBOX/Drafts&quot; or &quot;[Gmail]/Drafts&quot;. Required.</source>
          <target state="translated">メールをドロップするフォルダ、通常は Drafts フォルダです。例:&quot;INBOX.Drafts&quot;、&quot;INBOX/Drafts&quot;、または&quot;[Gmail]/Drafts&quot;。&quot;INBOX.Drafts&quot;、&quot;INBOX/Drafts&quot;、または&quot;[Gmail]/Drafts&quot;。必須。</target>
        </trans-unit>
        <trans-unit id="396ef1fe12b6dc07f4e5a4f66f87333df9fb56e3" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;update&lt;/code&gt; procedures are only available via the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; configuration variable:</source>
          <target state="translated">以下の &lt;code&gt;update&lt;/code&gt; 手順は、 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.update&lt;/code&gt; 構成変数を介してのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="109e44e80a38f6553ddae4455bbabc5ec0d98180" translate="yes" xml:space="preserve">
          <source>The following Thunderbird extensions are needed: AboutConfig from &lt;a href=&quot;http://aboutconfig.mozdev.org/&quot;&gt;http://aboutconfig.mozdev.org/&lt;/a&gt; and External Editor from &lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;amp;pg=8&quot;&gt;http://globs.org/articles.php?lng=en&amp;amp;pg=8&lt;/a&gt;</source>
          <target state="translated">次のThunderbird拡張機能が必要です：&lt;a href=&quot;http://aboutconfig.mozdev.org/&quot;&gt;http&lt;/a&gt; ://aboutconfig.mozdev.org/のAboutConfig および&lt;a href=&quot;http://globs.org/articles.php?lng=en&amp;amp;pg=8&quot;&gt;http://globs.org/articles.php?lng=en&amp;amp;pg=8の&lt;/a&gt; External Editor</target>
        </trans-unit>
        <trans-unit id="f6722fafbaf6d78a6b809eec36e0605e28b20857" translate="yes" xml:space="preserve">
          <source>The following are helper commands used by the above; end users typically do not use them directly.</source>
          <target state="translated">以下は上記で使用されるヘルパーコマンドであり、エンドユーザは通常直接使用しません。</target>
        </trans-unit>
        <trans-unit id="e785808b3cacaeabb63607758cc61e3471a646e6" translate="yes" xml:space="preserve">
          <source>The following browsers (or commands) are currently supported:</source>
          <target state="translated">現在、以下のブラウザ(またはコマンド)がサポートされています。</target>
        </trans-unit>
        <trans-unit id="7e10909a1942dd56a826033bd880f2f38314517d" translate="yes" xml:space="preserve">
          <source>The following command switches to the &quot;master&quot; branch:</source>
          <target state="translated">以下のコマンドで「master」ブランチに切り替えます。</target>
        </trans-unit>
        <trans-unit id="7a4f4c25f3029fcde1d4a38239fa9b13c5887156" translate="yes" xml:space="preserve">
          <source>The following command-line options change import semantics and may therefore not be passed as option:</source>
          <target state="translated">以下のコマンドラインオプションは、インポートのセマンティクスを変更するので、オプションとして渡せない場合があります。</target>
        </trans-unit>
        <trans-unit id="932cde1c301ce345d40b274a1f81ff3e5be711e6" translate="yes" xml:space="preserve">
          <source>The following command-specific comments apply:</source>
          <target state="translated">以下のコマンド固有のコメントが適用されます。</target>
        </trans-unit>
        <trans-unit id="d6f2de10386ef19748ad0fa0931b3359b3969227" translate="yes" xml:space="preserve">
          <source>The following config settings can be used to modify &lt;code&gt;git p4&lt;/code&gt; behavior. They all are in the &lt;code&gt;git-p4&lt;/code&gt; section.</source>
          <target state="translated">次の構成設定を使用して、 &lt;code&gt;git p4&lt;/code&gt; の動作を変更できます。それらはすべて &lt;code&gt;git-p4&lt;/code&gt; セクションにあります。</target>
        </trans-unit>
        <trans-unit id="f68ee79cc1f0c0e26a0c766d89a6823644298bab" translate="yes" xml:space="preserve">
          <source>The following configuration variables tell gitweb where to find files. The values of these variables are paths on the filesystem.</source>
          <target state="translated">以下の設定変数は、gitweb がどこでファイルを見つけるかを指定します。これらの変数の値は、ファイルシステム上のパスとなります。</target>
        </trans-unit>
        <trans-unit id="446ebc694e2441273405a78869483ed3506272c8" translate="yes" xml:space="preserve">
          <source>The following date formats are supported. A frontend should select the format it will use for this import by passing the format name in the --date-format=&amp;lt;fmt&amp;gt; command-line option.</source>
          <target state="translated">次の日付形式がサポートされています。フロントエンドは--date-format = &amp;lt;fmt&amp;gt;コマンドラインオプションでフォーマット名を渡すことにより、このインポートに使用するフォーマットを選択する必要があります。</target>
        </trans-unit>
        <trans-unit id="e77a52167245e31f57d9305063355588365e98e5" translate="yes" xml:space="preserve">
          <source>The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that move objects and references between repositories.</source>
          <target state="translated">以下の説明では、低レベルのコマンドを、オブジェクトを操作するコマンド(リポジトリ、インデックス、作業ツリー内)、オブジェクトを照会したり比較したりするコマンド、オブジェクトや参照をリポジトリ間で移動するコマンドに分けて説明します。</target>
        </trans-unit>
        <trans-unit id="0ccfcc7705084a20c6fb8eba32c2c2f3d02467cc" translate="yes" xml:space="preserve">
          <source>The following documentation pages are guides about Git concepts.</source>
          <target state="translated">以下のドキュメントページは、Git の概念に関するガイドです。</target>
        </trans-unit>
        <trans-unit id="8ce90b7b29314319d9c33a8b52e106d84ec9670f" translate="yes" xml:space="preserve">
          <source>The following escape sequences (beside &lt;code&gt;\&quot;&lt;/code&gt; and &lt;code&gt;\\&lt;/code&gt;) are recognized: &lt;code&gt;\n&lt;/code&gt; for newline character (NL), &lt;code&gt;\t&lt;/code&gt; for horizontal tabulation (HT, TAB) and &lt;code&gt;\b&lt;/code&gt; for backspace (BS). Other char escape sequences (including octal escape sequences) are invalid.</source>
          <target state="translated">次のエスケープシーケンス（ &lt;code&gt;\&quot;&lt;/code&gt; および &lt;code&gt;\\&lt;/code&gt; の横）が認識されます： &lt;code&gt;\n&lt;/code&gt; は改行文字（NL）、 &lt;code&gt;\t&lt;/code&gt; は水平集計（HT、TAB）、および &lt;code&gt;\b&lt;/code&gt; はバックスペース（BS）。その他の文字エスケープシーケンス（8進数を含む）エスケープシーケンス）は無効です。</target>
        </trans-unit>
        <trans-unit id="11e92a0ce8b123a34278f747bf61153deb05c5a4" translate="yes" xml:space="preserve">
          <source>The following example shows three branches, &quot;master&quot;, &quot;fixes&quot; and &quot;mhf&quot;:</source>
          <target state="translated">以下の例では、&quot;master&quot;、&quot;fixs&quot;、&quot;mhf &quot;の3つのブランチを表示しています。</target>
        </trans-unit>
        <trans-unit id="4297ab330b843af6f1af2259ff9a055a87b6bf37" translate="yes" xml:space="preserve">
          <source>The following features from &amp;lsquo;svn log&amp;rsquo; are supported:</source>
          <target state="translated">「svn log」の次の機能がサポートされています。</target>
        </trans-unit>
        <trans-unit id="9b96392c24cd31061920293e2fd2511a8543969f" translate="yes" xml:space="preserve">
          <source>The following flags further affect the behavior when comparing commits (but not trees).</source>
          <target state="translated">以下のフラグは、コミットを比較する際の動作にさらに影響を与えます (ツリーではなく)。</target>
        </trans-unit>
        <trans-unit id="c98119f1eba9806e1383e47ef0aa9d751dbdff13" translate="yes" xml:space="preserve">
          <source>The following format are available:</source>
          <target state="translated">以下のような形式があります。</target>
        </trans-unit>
        <trans-unit id="7e633b53438db1ba002f1e1e7fca5cd2fc86227f" translate="yes" xml:space="preserve">
          <source>The following information is captured automatically:</source>
          <target state="translated">以下の情報が自動的に取り込まれます。</target>
        </trans-unit>
        <trans-unit id="f25c21591a2ca83e23e48f87144d8a587685473b" translate="yes" xml:space="preserve">
          <source>The following information is requested from the user:</source>
          <target state="translated">利用者の方には、以下のような情報を求めています。</target>
        </trans-unit>
        <trans-unit id="5f08fc55d496958a337ddcb6a67febfb89f85554" translate="yes" xml:space="preserve">
          <source>The following key/value pairs are common to all events:</source>
          <target state="translated">以下のキー/値のペアは、すべてのイベントで共通です。</target>
        </trans-unit>
        <trans-unit id="0a5e5ff367236dbd6bf5580d5af5e71ae090b770" translate="yes" xml:space="preserve">
          <source>The following options affect the way the simplification is performed:</source>
          <target state="translated">以下のオプションは、単純化の実行方法に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="d99d5d2882d3fb95fadc56a0416699f5b886386d" translate="yes" xml:space="preserve">
          <source>The following options are available in either location:</source>
          <target state="translated">どちらの場所でも以下のようなオプションがあります。</target>
        </trans-unit>
        <trans-unit id="6e9dd1ef0925dcf9e09b1e6e501e8d0360e77eba" translate="yes" xml:space="preserve">
          <source>The following options are defined and (under suitable circumstances) set by Git if the remote helper has the &lt;code&gt;option&lt;/code&gt; capability.</source>
          <target state="translated">リモートヘルパーに &lt;code&gt;option&lt;/code&gt; 機能がある場合、以下のオプションが定義され、（適切な状況下で）Gitによって設定されます。</target>
        </trans-unit>
        <trans-unit id="ad97d4ffb6c58a93bf3193a5402926d11d214aa1" translate="yes" xml:space="preserve">
          <source>The following options select the commits to be shown:</source>
          <target state="translated">次のオプションは、表示するコミットを選択します。</target>
        </trans-unit>
        <trans-unit id="04bd1c24e8e494894e5123ce96e6c123a135b194" translate="yes" xml:space="preserve">
          <source>The following options:</source>
          <target state="translated">以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="7b3b3b2ba3a3d71942fecd2cbccdbee3fd847246" translate="yes" xml:space="preserve">
          <source>The following sequence attempts to backport a patch, bails out because the code the patch applies to has changed too much, and then tries again, this time exercising more care about matching up context lines.</source>
          <target state="translated">以下のシーケンスは、パッチをバックポートしようとし、パッチが適用されたコードがあまりにも変更されたために失敗し、その後、再度、コンテキスト行のマッチングに注意を払って試しています。</target>
        </trans-unit>
        <trans-unit id="0fb6c7c3c1a2e6361aa6d0f3ddafd309ebc6378c" translate="yes" xml:space="preserve">
          <source>The following sequence checks out the &lt;code&gt;master&lt;/code&gt; branch, reverts the &lt;code&gt;Makefile&lt;/code&gt; to two revisions back, deletes &lt;code&gt;hello.c&lt;/code&gt; by mistake, and gets it back from the index.</source>
          <target state="translated">次のシーケンスは、 &lt;code&gt;master&lt;/code&gt; ブランチをチェックアウトし、 &lt;code&gt;Makefile&lt;/code&gt; を2つのリビジョンに戻し、誤って &lt;code&gt;hello.c&lt;/code&gt; を削除し、インデックスから取得します。</target>
        </trans-unit>
        <trans-unit id="b8a40037f7e020ad1f156eb7f08942ca8112c080" translate="yes" xml:space="preserve">
          <source>The following sequence switches to the &lt;code&gt;master&lt;/code&gt; branch, reverts the &lt;code&gt;Makefile&lt;/code&gt; to two revisions back, deletes hello.c by mistake, and gets it back from the index.</source>
          <target state="translated">次のシーケンスは、 &lt;code&gt;master&lt;/code&gt; ブランチに切り替え、 &lt;code&gt;Makefile&lt;/code&gt; を2つのリビジョンに戻し、誤ってhello.cを削除し、インデックスから取得します。</target>
        </trans-unit>
        <trans-unit id="75477915a08ed3777518303fe3302c5a880167a8" translate="yes" xml:space="preserve">
          <source>The following sequences have a special meaning:</source>
          <target state="translated">以下のシーケンスには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="b07d72a39fdd44876a293ab8f917fa6a1014bd8c" translate="yes" xml:space="preserve">
          <source>The following subcommands are available:</source>
          <target state="translated">以下のサブコマンドが利用できます。</target>
        </trans-unit>
        <trans-unit id="55332124e1bbf00265c49abce68b19cb8696bb39" translate="yes" xml:space="preserve">
          <source>The following syntaxes may be used with them:</source>
          <target state="translated">以下の構文を使用することができます。</target>
        </trans-unit>
        <trans-unit id="f9c489d8b69bf82a63ff4a237dd2bd772b8fb351" translate="yes" xml:space="preserve">
          <source>The following tables show what happens when there are unmerged entries:</source>
          <target state="translated">以下の表は、マージされていないエントリがある場合に何が起こるかを示しています。</target>
        </trans-unit>
        <trans-unit id="3cc98c85c7406728df501340aea8c7fdc3f04d78" translate="yes" xml:space="preserve">
          <source>The following tips and tricks have been collected from various users of fast-import, and are offered here as suggestions.</source>
          <target state="translated">以下のヒントは、ファストインポートの様々なユーザーから集められたもので、ここでは提案として提供されています。</target>
        </trans-unit>
        <trans-unit id="177a564b8e3982405afb3b516ab4bbb5063d1ee7" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=blob:limit=&amp;lt;n&amp;gt;[kmg]&lt;/code&gt; omits blobs larger than n bytes or units. n may be zero. The suffixes k, m, and g can be used to name units in KiB, MiB, or GiB. For example, &lt;code&gt;blob:limit=1k&lt;/code&gt; is the same as &lt;code&gt;blob:limit=1024&lt;/code&gt;.</source>
          <target state="translated">フォーム &lt;code&gt;--filter=blob:limit=&amp;lt;n&amp;gt;[kmg]&lt;/code&gt; 省いブロブバイト単位Nより大きい。nはゼロでもかまいません。サフィックスk、m、およびgを使用して、KiB、MiB、またはGiBで単位を指定できます。たとえば、 &lt;code&gt;blob:limit=1k&lt;/code&gt; は &lt;code&gt;blob:limit=1024&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="94349f8d4383b34d05a696da3b05af67f12eec03" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=blob:none&lt;/code&gt; omits all blobs.</source>
          <target state="translated">&lt;code&gt;--filter=blob:none&lt;/code&gt; の形式では、すべてのblobが省略されます。</target>
        </trans-unit>
        <trans-unit id="39c705af761382dd23f074438f9b0e646bf492af" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=combine:&amp;lt;filter1&amp;gt;+&amp;lt;filter2&amp;gt;+&amp;hellip;​&amp;lt;filterN&amp;gt;&lt;/code&gt; can also be used to combined several filters, but this is harder than just repeating the &lt;code&gt;--filter&lt;/code&gt; flag and is usually not necessary. Filters are joined by &lt;code&gt;+&lt;/code&gt; and individual filters are %-encoded (i.e. URL-encoded). Besides the &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;%&lt;/code&gt; characters, the following characters are reserved and also must be encoded: &lt;code&gt;~!@#$^&amp;amp;*()[]{}\;&quot;,&amp;lt;&amp;gt;?&lt;/code&gt;&lt;code&gt;'`&lt;/code&gt; as well as all characters with ASCII code &amp;lt;= &lt;code&gt;0x20&lt;/code&gt;, which includes space and newline.</source>
          <target state="translated">フォーム &lt;code&gt;--filter=combine:&amp;lt;filter1&amp;gt;+&amp;lt;filter2&amp;gt;+&amp;hellip;​&amp;lt;filterN&amp;gt;&lt;/code&gt; もを組み合わせたいくつかのフィルタに使用されるが、これは難しい単なる繰り返し以上であることができる &lt;code&gt;--filter&lt;/code&gt; フラグを、通常は必要ありません。フィルターは &lt;code&gt;+&lt;/code&gt; で結合され、個々のフィルターは％エンコード（つまり、URLエンコード）されます。ほかに &lt;code&gt;+&lt;/code&gt; および &lt;code&gt;%&lt;/code&gt; 文字、次の文字は予約されており、また、エンコードする必要があります &lt;code&gt;~!@#$^&amp;amp;*()[]{}\;&quot;,&amp;lt;&amp;gt;?&lt;/code&gt; &lt;code&gt;'`&lt;/code&gt; だけでなく、すべての文字をASCIIコードで&amp;lt; = &lt;code&gt;0x20&lt;/code&gt; 。スペースと改行を含みます。</target>
        </trans-unit>
        <trans-unit id="d52505ec75878146eb9054dceb4728d58b485513" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=sparse:oid=&amp;lt;blob-ish&amp;gt;&lt;/code&gt; uses a sparse-checkout specification contained in the blob (or blob-expression) &lt;code&gt;&amp;lt;blob-ish&amp;gt;&lt;/code&gt; to omit blobs that would not be not required for a sparse checkout on the requested refs.</source>
          <target state="translated">&lt;code&gt;--filter=sparse:oid=&amp;lt;blob-ish&amp;gt;&lt;/code&gt; の形式は、ブロブ（またはブロブ式） &lt;code&gt;&amp;lt;blob-ish&amp;gt;&lt;/code&gt; に含まれるスパースチェックアウト仕様を使用して、スパースチェックアウトに不要なブロブを省略します。要求された参照。</target>
        </trans-unit>
        <trans-unit id="ef46a11218e9457b2745a05e86c211527bd23b7c" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--filter=tree:&amp;lt;depth&amp;gt;&lt;/code&gt; omits all blobs and trees whose depth from the root tree is &amp;gt;= &amp;lt;depth&amp;gt; (minimum depth if an object is located at multiple depths in the commits traversed). &amp;lt;depth&amp;gt;=0 will not include any trees or blobs unless included explicitly in the command-line (or standard input when --stdin is used). &amp;lt;depth&amp;gt;=1 will include only the tree and blobs which are referenced directly by a commit reachable from &amp;lt;commit&amp;gt; or an explicitly-given object. &amp;lt;depth&amp;gt;=2 is like &amp;lt;depth&amp;gt;=1 while also including trees and blobs one more level removed from an explicitly-given commit or tree.</source>
          <target state="translated">&lt;code&gt;--filter=tree:&amp;lt;depth&amp;gt;&lt;/code&gt; の形式では、ルートツリーからの深度が&amp;gt; = &amp;lt;depth&amp;gt;であるすべてのblobとツリーが省略されます（オブジェクトがトラバースされたコミットの複数の深度にある場合の最小深度）。 &amp;lt;depth&amp;gt; = 0は、コマンドライン（または--stdinが使用されている場合は標準入力）に明示的に含まれていない限り、ツリーやブロブを含みません。 &amp;lt;depth&amp;gt; = 1には、&amp;lt;commit&amp;gt;から到達可能なコミットまたは明示的に指定されたオブジェクトによって直接参照されるツリーとblobのみが含まれます。 &amp;lt;depth&amp;gt; = 2は&amp;lt;depth&amp;gt; = 1に似ていますが、明示的に指定されたコミットまたはツリーから削除されたもう1つのレベルのツリーとブロブも含まれます。</target>
        </trans-unit>
        <trans-unit id="143c72f9a0abe1adb065cd1c00c0271a08c274c4" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-any&lt;/code&gt; will allow object traversal to continue if a missing object is encountered. Missing objects will silently be omitted from the results.</source>
          <target state="translated">&lt;code&gt;--missing=allow-any&lt;/code&gt; の形式を使用すると、見つからないオブジェクトが検出された場合でもオブジェクトトラバーサルを続行できます。欠落しているオブジェクトは、通知なしで結果から除外されます。</target>
        </trans-unit>
        <trans-unit id="bdde6c336c8ea83ffd865ad36b93358c59c8c01f" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-any&lt;/code&gt; will allow object traversal to continue if a missing object is encountered. No fetch of a missing object will occur. Missing objects will silently be omitted from the results.</source>
          <target state="translated">&lt;code&gt;--missing=allow-any&lt;/code&gt; の形式を使用すると、欠落しているオブジェクトが検出された場合でも、オブジェクトの走査を続行できます。欠落しているオブジェクトのフェッチは発生しません。欠落しているオブジェクトは、結果から黙って省略されます。</target>
        </trans-unit>
        <trans-unit id="4ac33b80327bef1bf98d899063defe39f6edf744" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. No fetch of a missing object will occur. An unexpected missing object will raise an error.</source>
          <target state="translated">&lt;code&gt;--missing=allow-promisor&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、EXPECTED promisorが欠落しているオブジェクトに対してのみ、オブジェクトの走査を続行できます。欠落しているオブジェクトのフェッチは発生しません。予期しないオブジェクトの欠落により、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="280716e3ccf86616960848b089fdadef81ba797d" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing object will raise an error.</source>
          <target state="translated">&lt;code&gt;--missing=allow-promisor&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、EXPECTED promisor行方不明オブジェクトに対してのみオブジェクトトラバーサルを続行できます。予期しないオブジェクトがないと、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="563d9e750d01dbe920d57035d16bed3d91b9aea6" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=allow-promisor&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will only allow object traversal to continue for EXPECTED promisor missing objects. Unexpected missing objects will raise an error.</source>
          <target state="translated">&lt;code&gt;--missing=allow-promisor&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、EXPECTED promisor行方不明オブジェクトに対してのみオブジェクトトラバーサルを続行できます。予期しない欠落オブジェクトがあると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="85974afd39adff2510445a34b40c988ae3340623" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that pack-objects stop with an error if a missing object is encountered. If the repository is a partial clone, an attempt to fetch missing objects will be made before declaring them missing. This is the default action.</source>
          <target state="translated">&lt;code&gt;--missing=error&lt;/code&gt; の形式は、欠落しているオブジェクトが検出された場合に、pack-objectsがエラーで停止することを要求します。リポジトリが部分クローンの場合、欠落していると宣言する前に、欠落しているオブジェクトをフェッチしようとします。これがデフォルトのアクションです。</target>
        </trans-unit>
        <trans-unit id="28c618ed732782b866de4c7dcf716daa2ac64119" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that pack-objects stop with an error if a missing object is encountered. This is the default action.</source>
          <target state="translated">&lt;code&gt;--missing=error&lt;/code&gt; の形式は、オブジェクトが見つからない場合にpack-objectsをエラーで停止するように要求します。これがデフォルトのアクションです。</target>
        </trans-unit>
        <trans-unit id="2ed32158adb2f2f236ac5307d5ba7c30f0630796" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=error&lt;/code&gt; requests that rev-list stop with an error if a missing object is encountered. This is the default action.</source>
          <target state="translated">&lt;code&gt;--missing=error&lt;/code&gt; の形式は、見つからないオブジェクトが検出された場合にrev-listがエラーで停止することを要求します。これがデフォルトのアクションです。</target>
        </trans-unit>
        <trans-unit id="67e4b67693941fe412533d5210bde2a413de8fb1" translate="yes" xml:space="preserve">
          <source>The form &lt;code&gt;--missing=print&lt;/code&gt; is like &lt;code&gt;allow-any&lt;/code&gt;, but will also print a list of the missing objects. Object IDs are prefixed with a &amp;ldquo;?&amp;rdquo; character.</source>
          <target state="translated">&lt;code&gt;--missing=print&lt;/code&gt; の形式は &lt;code&gt;allow-any&lt;/code&gt; に似ていますが、欠落しているオブジェクトのリストも出力します。オブジェクトIDの前には「？」キャラクター。</target>
        </trans-unit>
        <trans-unit id="09994cb2384da5eddbe0ae0a9a1ceca76d8c8bcc" translate="yes" xml:space="preserve">
          <source>The format of a &amp;lt;refspec&amp;gt; parameter is an optional plus &lt;code&gt;+&lt;/code&gt;, followed by the source &amp;lt;src&amp;gt;, followed by a colon &lt;code&gt;:&lt;/code&gt;, followed by the destination ref &amp;lt;dst&amp;gt;. The colon can be omitted when &amp;lt;dst&amp;gt; is empty. &amp;lt;src&amp;gt; is typically a ref, but it can also be a fully spelled hex object name.</source>
          <target state="translated">&amp;lt;refspec&amp;gt;パラメータの形式は、オプションのプラス &lt;code&gt;+&lt;/code&gt; 、ソース&amp;lt;src&amp;gt;、コロン &lt;code&gt;:&lt;/code&gt; 、宛先ref &amp;lt;dst&amp;gt;の順です。&amp;lt;dst&amp;gt;が空の場合は、コロンを省略できます。&amp;lt;src&amp;gt;は通常、refですが、完全なスペルの16進数オブジェクト名にすることもできます。</target>
        </trans-unit>
        <trans-unit id="05c09db4c870e826391cf6ebde5a8cc33d2791f6" translate="yes" xml:space="preserve">
          <source>The format of these files is username followed by the encrypted password, for example:</source>
          <target state="translated">これらのファイルの形式は、例えば、ユーザ名の後に暗号化されたパスワードが続きます。</target>
        </trans-unit>
        <trans-unit id="65670970ee487305077ce344ca1fb6c36a889cee" translate="yes" xml:space="preserve">
          <source>The former lets your shell expand the fileglob, and you are asking the dot-C files in your working tree to be overwritten with the version in the index. The latter passes the &lt;code&gt;*.c&lt;/code&gt; to Git, and you are asking the paths in the index that match the pattern to be checked out to your working tree. After running &lt;code&gt;git add hello.c; rm hello.c&lt;/code&gt;, you will &lt;code&gt;not&lt;/code&gt; see &lt;code&gt;hello.c&lt;/code&gt; in your working tree with the former, but with the latter you will.</source>
          <target state="translated">前者はシェルがfileglobを拡張できるようにし、作業ツリー内のドットCファイルをインデックス内のバージョンで上書きするように要求しています。後者は &lt;code&gt;*.c&lt;/code&gt; をGitに渡し、チェックアウトするパターンに一致するインデックス内のパスを作業ツリーに要求します。 &lt;code&gt;git add hello.c; rm hello.c&lt;/code&gt; 実行した後、hello.cを追加します。 rm hello.cの場合、前者では作業ツリーに &lt;code&gt;hello.c&lt;/code&gt; &lt;code&gt;not&lt;/code&gt; 表示されませんが、後者では表示されます。</target>
        </trans-unit>
        <trans-unit id="b363974f459c2a2b237a919650aa9dc9f75161d2" translate="yes" xml:space="preserve">
          <source>The frontend must specify the number of bytes of data.</source>
          <target state="translated">フロントエンドでは、データのバイト数を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="23957db0f038e6b4263285c2923ad6ce72a805ca" translate="yes" xml:space="preserve">
          <source>The full SHA-1 object name (40-byte hexadecimal string), or a leading substring that is unique within the repository. E.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.</source>
          <target state="translated">完全な SHA-1 オブジェクト名 (40 バイトの 16 進数文字列)、またはリポジトリ内で一意な先頭の部分文字列。例えば dae86e1950b1277e545cee180551750029cfe735 と dae86e は、リポジトリ内に dae86e で始まるオブジェクト名を持つ他のオブジェクトが存在しない場合、同じコミットオブジェクトの名前を付けます。</target>
        </trans-unit>
        <trans-unit id="ce332106cb9361add9aaf31aea030a425aeed7be" translate="yes" xml:space="preserve">
          <source>The full name is occasionally useful if, for example, there ever exists a tag and a branch with the same name.</source>
          <target state="translated">フルネームは、例えばタグとブランチが同じ名前で存在する場合などに便利です。</target>
        </trans-unit>
        <trans-unit id="d24187cae372eb76b2a26570ccfd9def8c8abdf6" translate="yes" xml:space="preserve">
          <source>The full pattern set allows for arbitrary pattern matches and complicated inclusion/exclusion rules. These can result in O(N*M) pattern matches when updating the index, where N is the number of patterns and M is the number of paths in the index. To combat this performance issue, a more restricted pattern set is allowed when &lt;code&gt;core.spareCheckoutCone&lt;/code&gt; is enabled.</source>
          <target state="translated">完全なパターンセットにより、任意のパターンマッチと複雑な包含/除外ルールが可能になります。これらにより、インデックスの更新時にO（N * M）パターンが一致する可能性があります。Nはパターンの数、Mはインデックス内のパスの数です。このパフォーマンスの問題に対処するために、 &lt;code&gt;core.spareCheckoutCone&lt;/code&gt; が有効になっている場合は、より制限されたパターンセットを使用できます。</target>
        </trans-unit>
        <trans-unit id="271f7ad4b6b86f815e34a99cf6372d6f7edf455d" translate="yes" xml:space="preserve">
          <source>The full pattern set allows for arbitrary pattern matches and complicated inclusion/exclusion rules. These can result in O(N*M) pattern matches when updating the index, where N is the number of patterns and M is the number of paths in the index. To combat this performance issue, a more restricted pattern set is allowed when &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; is enabled.</source>
          <target state="translated">完全なパターンセットにより、任意のパターンの一致と複雑な包含/除外ルールが可能になります。これらにより、インデックスを更新するときにO（N * M）パターンが一致する可能性があります。ここで、Nはパターンの数、Mはインデックス内のパスの数です。このパフォーマンスの問題に対処するために、 &lt;code&gt;core.sparseCheckoutCone&lt;/code&gt; が有効になっている場合は、より制限されたパターンセットが許可されます。</target>
        </trans-unit>
        <trans-unit id="6d3e98918a57498bee35c9ef416c5932bb448c1f" translate="yes" xml:space="preserve">
          <source>The full syntax for a p4 view is documented in &lt;code&gt;p4 help views&lt;/code&gt;. &lt;code&gt;git p4&lt;/code&gt; knows only a subset of the view syntax. It understands multi-line mappings, overlays with &lt;code&gt;+&lt;/code&gt;, exclusions with &lt;code&gt;-&lt;/code&gt; and double-quotes around whitespace. Of the possible wildcards, &lt;code&gt;git p4&lt;/code&gt; only handles &lt;code&gt;&amp;hellip;​&lt;/code&gt;, and only when it is at the end of the path. &lt;code&gt;git p4&lt;/code&gt; will complain if it encounters an unhandled wildcard.</source>
          <target state="translated">p4ビューの完全な構文は、 &lt;code&gt;p4 help views&lt;/code&gt; 記載されています。 &lt;code&gt;git p4&lt;/code&gt; はビュー構文のサブセットのみを認識します。複数行のマッピング、 &lt;code&gt;+&lt;/code&gt; を使用したオーバーレイ、 &lt;code&gt;-&lt;/code&gt; を使用した除外、および空白を囲む二重引用符を認識します。可能なワイルドカードの、 &lt;code&gt;git p4&lt;/code&gt; だけハンドル &lt;code&gt;&amp;hellip;​&lt;/code&gt; 、それはパスの最後にある場合にのみ。 &lt;code&gt;git p4&lt;/code&gt; は、未処理のワイルドカードに遭遇すると文句を言います。</target>
        </trans-unit>
        <trans-unit id="18d1519c9cf5420b92be3f082cd6f0aa89c3d260" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;skip_commit&lt;/code&gt; is defined as follows:</source>
          <target state="translated">関数 &lt;code&gt;skip_commit&lt;/code&gt; は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="af7dd50b5e9b3d3ec2ae519f399794527002dc23" translate="yes" xml:space="preserve">
          <source>The functions defined by the Trace2 API are declared and documented in &lt;code&gt;trace2.h&lt;/code&gt;. It defines the API functions and wrapper macros for Trace2.</source>
          <target state="translated">Trace2 APIによって定義された関数は、trace2.hで宣言および文書化されてい &lt;code&gt;trace2.h&lt;/code&gt; 。Trace2のAPI関数とラッパーマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="e5521fd46bed9d589b56b651d5f3ef04e9a3b2a8" translate="yes" xml:space="preserve">
          <source>The future of bisecting</source>
          <target state="translated">二分法の未来</target>
        </trans-unit>
        <trans-unit id="2aa4427c10c7d5c13ef7bbb9898f5fea28090dd1" translate="yes" xml:space="preserve">
          <source>The general idea is this: we generate a cost matrix between the commits in both commit ranges, then solve the least-cost assignment.</source>
          <target state="translated">一般的な考え方は次のとおりです:両コミット範囲のコミット間のコスト行列を生成し、最小コスト代入を解きます。</target>
        </trans-unit>
        <trans-unit id="0339eef2339eb8367ea8564b9ff6721cd9dea407" translate="yes" xml:space="preserve">
          <source>The git commit is created relative to the current origin revision (HEAD by default). A parent commit is created based on the origin, and then the unshelve commit is created based on that.</source>
          <target state="translated">git コミットは、現在のオリジンリビジョン (デフォルトでは HEAD)からの相対的なものとして作成されます。親コミットはオリジンをもとに作成され、それをもとに unshelve コミットが作成されます。</target>
        </trans-unit>
        <trans-unit id="a5bbcd1beb35762403be84a14e62e0a4eb5d5226" translate="yes" xml:space="preserve">
          <source>The git object database</source>
          <target state="translated">git オブジェクトデータベース</target>
        </trans-unit>
        <trans-unit id="80d403b9b878573aec88e9c705123dc6feedf769" translate="yes" xml:space="preserve">
          <source>The gitweb CGI script for viewing Git repositories over the web uses a perl script fragment as its configuration file. You can set variables using &quot;&lt;code&gt;our $variable = value&lt;/code&gt;&quot;; text from a &quot;#&quot; character until the end of a line is ignored. See &lt;strong&gt;perlsyn&lt;/strong&gt;(1) for details.</source>
          <target state="translated">ウェブ上でGitリポジトリを表示するためのgitweb CGIスクリプトは、設定ファイルとしてperlスクリプトフラグメントを使用します。&quot; &lt;code&gt;our $variable = value&lt;/code&gt; &quot;; を使用して変数を設定できます。「＃」文字から行末までのテキストは無視されます。詳細は&lt;strong&gt;perlsyn&lt;/strong&gt;（1）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a1a6c42c76028a67bf39dd75b77a2307812be731" translate="yes" xml:space="preserve">
          <source>The gitweb cgi script provides users an easy way to browse your project&amp;rsquo;s revisions, file contents and logs without having to install Git. Features like RSS/Atom feeds and blame/annotation details may optionally be enabled.</source>
          <target state="translated">gitweb cgiスクリプトを使用すると、Gitをインストールしなくても、プロジェクトのリビジョン、ファイルの内容、ログを簡単に参照できます。RSS / Atomフィードや非難/注釈の詳細などの機能は、オプションで有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="eefcb42be74db518327d9c82beb9a165d884846e" translate="yes" xml:space="preserve">
          <source>The gitweb features that are configurable via &lt;code&gt;%feature&lt;/code&gt; hash are listed below. This should be a complete list, but ultimately the authoritative and complete list is in gitweb.cgi source code, with features described in the comments.</source>
          <target state="translated">&lt;code&gt;%feature&lt;/code&gt; ハッシュを介して構成可能なgitweb機能を以下に示します。これは完全なリストである必要がありますが、最終的には信頼できる完全なリストがgitweb.cgiソースコードにあり、コメントで機能が説明されています。</target>
        </trans-unit>
        <trans-unit id="bee84a897df9efb668b9aee969a1e660ed8af0a4" translate="yes" xml:space="preserve">
          <source>The gitweb.extraBranchRefs is actually a multi-valued configuration variable, so following example is also correct and the result is the same as of the snippet above:</source>
          <target state="translated">gitweb.extraBranchRefsは実際には多値の設定変数なので、以下の例も正しく、上のスニペットと同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="ab9a5e4603e46ba18e0a4c5efe881c7ac8def35b" translate="yes" xml:space="preserve">
          <source>The given URL is recorded into &lt;code&gt;.gitmodules&lt;/code&gt; for use by subsequent users cloning the superproject. If the URL is given relative to the superproject&amp;rsquo;s repository, the presumption is the superproject and submodule repositories will be kept together in the same relative location, and only the superproject&amp;rsquo;s URL needs to be provided. git-submodule will correctly locate the submodule using the relative URL in &lt;code&gt;.gitmodules&lt;/code&gt;.</source>
          <target state="translated">指定されたURLは &lt;code&gt;.gitmodules&lt;/code&gt; に記録され、スーパープロジェクトを複製する後続のユーザーが使用できます。スーパープロジェクトのリポジトリを基準にURLが指定されている場合、スーパープロジェクトであると推定され、サブモジュールリポジトリは同じ相対場所にまとめられ、スーパープロジェクトのURLのみを指定する必要があります。git-submoduleは &lt;code&gt;.gitmodules&lt;/code&gt; の相対URLを使用してサブモジュールを正しく配置します。</target>
        </trans-unit>
        <trans-unit id="1190edfebfe2406cf333713a0e461379865b033f" translate="yes" xml:space="preserve">
          <source>The goal of this tutorial is to introduce two fundamental pieces of Git&amp;rsquo;s architecture&amp;mdash;​the object database and the index file&amp;mdash;​and to provide the reader with everything necessary to understand the rest of the Git documentation.</source>
          <target state="translated">このチュートリアルの目的は、Gitのアーキテクチャの2つの基本的な部分、つまりオブジェクトデータベースとインデックスファイルを紹介し、Gitの残りのドキュメントを理解するために必要なすべてを読者に提供することです。</target>
        </trans-unit>
        <trans-unit id="880a291c14c1099392ebdd9b73ec08c93b7220d1" translate="yes" xml:space="preserve">
          <source>The hard case</source>
          <target state="translated">ハードケース</target>
        </trans-unit>
        <trans-unit id="71b4cfb50bd8944708a6926991c13ef0bfbac07d" translate="yes" xml:space="preserve">
          <source>The hashes are 40 hex characters long. When Git upgrades to a new hash algorithm, this might need to be updated. (It should match whatever index-pack outputs after &quot;pack\t&quot; or &quot;keep\t&quot;.</source>
          <target state="translated">ハッシュは40文字の16進数です。Git が新しいハッシュアルゴリズムにアップグレードしたら、これを更新する必要があるかもしれません。(これは、&quot;pack\t&quot; や &quot;keep\t&quot; の後に index-pack が出力するものと一致するはずです。</target>
        </trans-unit>
        <trans-unit id="7d2a187748caf680c0e66173f60176ec60ea02ab" translate="yes" xml:space="preserve">
          <source>The header consists of 256 4-byte network byte order integers. N-th entry of this table records the number of objects in the corresponding pack, the first byte of whose object name is less than or equal to N. This is called the &lt;code&gt;first-level fan-out&lt;/code&gt; table.</source>
          <target state="translated">ヘッダーは、256の4バイトネットワークバイトオーダー整数で構成されます。このテーブルのN番目のエントリは、対応するパック内のオブジェクトの数を記録します。そのオブジェクトの最初のバイトはN以下です。これは、 &lt;code&gt;first-level fan-out&lt;/code&gt; テーブルと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="0e2dd021a6a8dc94bfb40a62a04904f17b8f1dab" translate="yes" xml:space="preserve">
          <source>The header is followed by number of object entries, each of which looks like this:</source>
          <target state="translated">ヘッダの後にはオブジェクトエントリの数が続き、それぞれが以下のようになります。</target>
        </trans-unit>
        <trans-unit id="10743ced5c1563e940127b440ba806235a399ac8" translate="yes" xml:space="preserve">
          <source>The header is followed by sorted 24-byte entries, one entry per object in the pack. Each entry is:</source>
          <target state="translated">ヘッダの後には、ソートされた24バイトのエントリが続き、パック内のオブジェクトごとに1つのエントリが続きます。各エントリは</target>
        </trans-unit>
        <trans-unit id="03910dca7f1c0af7f3d0e6986f455aceaec86f05" translate="yes" xml:space="preserve">
          <source>The header of the email is configurable via command-line options. If not specified on the command line, the user will be prompted with a ReadLine enabled interface to provide the necessary information.</source>
          <target state="translated">電子メールのヘッダーは、コマンドラインオプションで設定できます。コマンドラインで指定されていない場合、ユーザーは必要な情報を提供するために、ReadLineを有効にしたインターフェイスでプロンプトを表示します。</target>
        </trans-unit>
        <trans-unit id="53d28fdf80ee055eff1005765033449c285d4f79" translate="yes" xml:space="preserve">
          <source>The hook always runs after the automatic note copying (see &quot;notes.rewrite.&amp;lt;command&amp;gt;&quot; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) has happened, and thus has access to these notes.</source>
          <target state="translated">このフックは、ノートの自動コピー（&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt;「notes.rewrite。&amp;lt;command&amp;gt;」を参照）が発生した後に常に実行されるため、これらのノートにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="55997df4465d2b793292e1300e70ff2f9e1a3588" translate="yes" xml:space="preserve">
          <source>The hook executes once for each ref to be updated, and takes three parameters:</source>
          <target state="translated">フックは更新される各参照に対して1回実行され、3つのパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="7918f32150a1e75fa34aeef2474d601c36b3a718" translate="yes" xml:space="preserve">
          <source>The hook is allowed to edit the changelist file and can be used to normalize the text into some project standard format. It can also be used to refuse the Submit after inspect the message file.</source>
          <target state="translated">このフックは変更リストファイルを編集することができ、テキストを何らかのプロジェクト標準フォーマットに正規化するために使うことができます。また、メッセージファイルを検査した後にSubmitを拒否するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="6422fdbff7a8b80abf6e11b9c756369981239875" translate="yes" xml:space="preserve">
          <source>The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.</source>
          <target state="translated">このフックは、メッセージファイルをその場で編集することを許可しており、メッセージを何らかのプロジェクト標準のフォーマットに正規化するために使うことができます。また、メッセージファイルを検査した後にコミットを拒否するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="7dd8785c8f6fdd3a8a45999afa9f773631b556f1" translate="yes" xml:space="preserve">
          <source>The hook receives a list of the rewritten commits on stdin, in the format</source>
          <target state="translated">フックは書き換えられたコミットのリストを標準入力で受け取ります。</target>
        </trans-unit>
        <trans-unit id="ffb0d43685532aa46e893849969758ab23367451" translate="yes" xml:space="preserve">
          <source>The hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.</source>
          <target state="translated">フックは、現在のブランチの先端が更新されるコミットを受け取ります。このプッシュを拒否するために、0 以外のステータスで終了することができます (その場合、インデックスや作業ツリーを変更してはいけません)。あるいは、現在のブランチの先端が新しいコミットに更新されたときに、作業ツリーとインデックスに必要な変更を加えて、それらを望ましい状態にすることができます。</target>
        </trans-unit>
        <trans-unit id="6e0236cadc345b5114c4c6984e7438ed153e1f2f" translate="yes" xml:space="preserve">
          <source>The hook should exit with non-zero status if it wants to disallow updating the named ref. Otherwise it should exit with zero.</source>
          <target state="translated">指定された ref の更新を許可しないようにしたい場合は、フックは 0 以外のステータスで終了しなければなりません。そうでない場合はゼロで終了しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9739d79c49b82b53238e48aeefee9c342d93a499" translate="yes" xml:space="preserve">
          <source>The hook should output to stdout the list of all files in the working directory that may have changed since the requested time. The logic should be inclusive so that it does not miss any potential changes. The paths should be relative to the root of the working directory and be separated by a single NUL.</source>
          <target state="translated">このフックは、要求された時刻以降に変更された可能性のある作業ディレクトリ内のすべてのファイルのリストを標準出力に出力しなければなりません。潜在的な変更を見逃さないように、ロジックは包括的でなければなりません。パスは作業ディレクトリのルートからの相対パスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="726cd696e8b088103d80193483306d60860caef4" translate="yes" xml:space="preserve">
          <source>The hook takes exactly one argument, which is the current state the given reference transaction is in:</source>
          <target state="translated">フックは正確には1つの引数を取り、それは与えられた参照トランザクションが存在する現在の状態です。</target>
        </trans-unit>
        <trans-unit id="022998a9843b7be307eb2d587f13704cf2ce86bd" translate="yes" xml:space="preserve">
          <source>The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:</source>
          <target state="translated">履歴A---Qの水平線を各マージの最初の親とします。コミットは</target>
        </trans-unit>
        <trans-unit id="41f47ff55448de90533c1d6461f6a54aa470a338" translate="yes" xml:space="preserve">
          <source>The human-readable name used in the author identity when creating commit or tag objects, or when writing reflogs. Overrides the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;author.name&lt;/code&gt; configuration settings.</source>
          <target state="translated">コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、作成者IDで使用される人間が読める名前。 &lt;code&gt;user.name&lt;/code&gt; および &lt;code&gt;author.name&lt;/code&gt; の構成設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="65a50b3e42cc3505776fea766e525fbf7e68884e" translate="yes" xml:space="preserve">
          <source>The human-readable name used in the committer identity when creating commit or tag objects, or when writing reflogs. Overrides the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;committer.name&lt;/code&gt; configuration settings.</source>
          <target state="translated">コミットオブジェクトまたはタグオブジェクトを作成するとき、またはreflogを書き込むときに、コミッターIDで使用される人間が読める名前。 &lt;code&gt;user.name&lt;/code&gt; および &lt;code&gt;committer.name&lt;/code&gt; の構成設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="bdf0ebdfb4273a6fce7952dfa28834b6e411cd7f" translate="yes" xml:space="preserve">
          <source>The hypothetical proxy command entries actually have a postfix to discern what URL they apply to. Here is how to change the entry for kernel.org to &quot;ssh&quot;.</source>
          <target state="translated">仮想的なプロキシコマンドのエントリは、実際にはどの URL に適用されるかを識別するために接頭辞を持っています。以下は kernel.org のエントリを &quot;ssh&quot; に変更する方法です。</target>
        </trans-unit>
        <trans-unit id="4399284bfb632a08cce3f3533db563320f49af23" translate="yes" xml:space="preserve">
          <source>The id of a tree object to diff against.</source>
          <target state="translated">対抗するツリーオブジェクトのID。</target>
        </trans-unit>
        <trans-unit id="0505b9e9f78e78efa1c8b76bc422638cba05b1b7" translate="yes" xml:space="preserve">
          <source>The id of a tree object.</source>
          <target state="translated">ツリーオブジェクトのid。</target>
        </trans-unit>
        <trans-unit id="2e60e84271eec03fd28b067b32c84bb5fbe76999" translate="yes" xml:space="preserve">
          <source>The id of the tree object(s) to be read/merged.</source>
          <target state="translated">読み込んだりマージしたりするツリーオブジェクトのID。</target>
        </trans-unit>
        <trans-unit id="fb9074ec22bab96e3e97d4855db9bfaed224187c" translate="yes" xml:space="preserve">
          <source>The idea is that every 3 test for example, &quot;git bisect&quot; could ask the user to test a commit that has already been found to be &quot;good&quot; or &quot;bad&quot; (because one of its descendants or one of its ancestors has been found to be &quot;good&quot; or &quot;bad&quot; respectively). If it happens that a commit has been previously incorrectly classified then the bisection can be aborted early, hopefully before too many mistakes have been made. Then the user will have to look at what happened and then restart the bisection using a fixed bisect log.</source>
          <target state="translated">これは、たとえば &quot;git bisect&quot; は、3 回のテストごとに &quot;good&quot; あるいは &quot;bad&quot; と判定されたコミットをテストするようにユーザーに依頼するというものです (子孫や先祖の誰かがそれぞれ &quot;good&quot; あるいは &quot;bad&quot; と判定されているからです)。もし、あるコミットが以前に誤って分類されていた場合は、うまくいけば多くの間違いが起こる前に、早い段階でバイセクションを中止することができます。そうすれば、ユーザは何が起こったのかを確認してから、固定されたバイセクションログを使ってバイセクションを再起動しなければなりません。</target>
        </trans-unit>
        <trans-unit id="b3a07b8c786a1b03697e9ded467b22cd2ece1ab4" translate="yes" xml:space="preserve">
          <source>The idea is to manually tell &lt;code&gt;git rebase&lt;/code&gt; &quot;where the old &lt;code&gt;subsystem&lt;/code&gt; ended and your &lt;code&gt;topic&lt;/code&gt; began&quot;, that is, what the old merge base between them was. You will have to find a way to name the last commit of the old &lt;code&gt;subsystem&lt;/code&gt;, for example:</source>
          <target state="translated">アイデアは &lt;code&gt;git rebase&lt;/code&gt; に手動で「古い &lt;code&gt;subsystem&lt;/code&gt; 終了し、 &lt;code&gt;topic&lt;/code&gt; が始まった場所」、つまり、それらの間の古いマージベースが何であったかを伝えることです。古い &lt;code&gt;subsystem&lt;/code&gt; 最後のコミットに名前を付ける方法を見つける必要があります。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="1ff2a3a30d68d12ef6b058f357f43e3bd9cd4f0f" translate="yes" xml:space="preserve">
          <source>The idx files to verify.</source>
          <target state="translated">検証するidxファイル。</target>
        </trans-unit>
        <trans-unit id="fd29bd486dc43b124e6d98a808e18b86c2905ae4" translate="yes" xml:space="preserve">
          <source>The import checks out from CVS every revision of every file. Reportedly cvsimport can average some twenty revisions per second, so for a medium-sized project this should not take more than a couple of minutes. Larger projects or remote repositories may take longer.</source>
          <target state="translated">インポートは、すべてのファイルのすべてのリビジョンを CVS からチェックアウトします。報告によると、cvsimport は毎秒平均 20 件のリビジョンをチェックしますので、中規模のプロジェクトでは数分もかかりません。大規模なプロジェクトやリモートリポジトリでは、もっと時間がかかるかもしれません。</target>
        </trans-unit>
        <trans-unit id="69f04e00f7076b8b130e67c7134e53f7f1076bf2" translate="yes" xml:space="preserve">
          <source>The import is incremental, so if you call it again next month it will fetch any CVS updates that have been made in the meantime. For this to work, you must not modify the imported branches; instead, create new branches for your own changes, and merge in the imported branches as necessary.</source>
          <target state="translated">インポートは増分的に行われますので、来月もう一度呼び出せば、その間に行われた CVS の更新があればそれを取得します。その代わり、あなた自身の変更のために新しいブランチを作成し、必要に応じてインポートされたブランチをマージしてください。</target>
        </trans-unit>
        <trans-unit id="807035ab1f5be4f0cb3563dc9b49740571ca0fa4" translate="yes" xml:space="preserve">
          <source>The index</source>
          <target state="translated">インデックス</target>
        </trans-unit>
        <trans-unit id="4284ed429265f3c1afc30e4fc09197d88352698c" translate="yes" xml:space="preserve">
          <source>The index and the working tree are adjusted as if you had previously run &lt;code&gt;git checkout &amp;lt;start_point&amp;gt;&lt;/code&gt;. This allows you to start a new history that records a set of paths similar to &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; by easily running &lt;code&gt;git commit -a&lt;/code&gt; to make the root commit.</source>
          <target state="translated">以前に &lt;code&gt;git checkout &amp;lt;start_point&amp;gt;&lt;/code&gt; を実行した場合と同様に、インデックスと作業ツリーが調整されます。これにより、簡単に &lt;code&gt;git commit -a&lt;/code&gt; を実行してルートコミットを実行することにより、 &lt;code&gt;&amp;lt;start_point&amp;gt;&lt;/code&gt; と同様の一連のパスを記録する新しい履歴を開始できます。</target>
        </trans-unit>
        <trans-unit id="0818281aa21612fb5fa362015c64c5645d861084" translate="yes" xml:space="preserve">
          <source>The index contains all the information necessary to generate a single (uniquely determined) tree object.</source>
          <target state="translated">インデックスには、単一の(一意に決定された)ツリーオブジェクトを生成するために必要なすべての情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="3d9fb9e020c0d003a42d72f87f16ba2ba38226e6" translate="yes" xml:space="preserve">
          <source>The index enables fast comparisons between the tree object it defines and the working tree.</source>
          <target state="translated">このインデックスは、定義したツリーオブジェクトと作業ツリーとの高速な比較を可能にします。</target>
        </trans-unit>
        <trans-unit id="eb65460c6179ccddcd4479166e9da44d8f5c40d8" translate="yes" xml:space="preserve">
          <source>The index file</source>
          <target state="translated">インデックスファイル</target>
        </trans-unit>
        <trans-unit id="181ab401ce7a15640077d5cb413c24fc6eb6a97e" translate="yes" xml:space="preserve">
          <source>The index file is a cache of the state of a directory tree, used to create commits, check out working directories, and hold the various trees involved in a merge.</source>
          <target state="translated">インデックスファイルはディレクトリツリーの状態をキャッシュしたもので、コミットを作成したり、作業ディレクトリをチェックアウトしたり、マージに関わる様々なツリーを保持したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="a98935eae61bfe66b9928e790965f624bf2f8b5b" translate="yes" xml:space="preserve">
          <source>The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The blob object represents the contents of the file as of the head of the current branch. The attributes (last modified time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree can be found by comparing these attributes. The index may be updated with new content, and new commits may be created from the content stored in the index.</source>
          <target state="translated">インデックスファイルは、すべてのパスのリストと、パスごとに blob オブジェクトと属性のセットで初期化されます。blob オブジェクトは、現在のブランチの先頭のファイルの内容を表します。属性 (最終更新時刻、サイズなど)は、作業ツリー内の対応するファイルから取得します。作業ツリーのその後の変更点は、これらの属性を比較することで見つけることができます。インデックスは新しいコンテンツで更新され、インデックスに格納されたコンテンツから新しいコミットが作成されることがあります。</target>
        </trans-unit>
        <trans-unit id="803387e9a63472a3287bdc2446032cf6e023e1d9" translate="yes" xml:space="preserve">
          <source>The index is a binary file (generally kept in &lt;code&gt;.git/index&lt;/code&gt;) containing a sorted list of path names, each with permissions and the SHA-1 of a blob object; &lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files[1]&lt;/a&gt; can show you the contents of the index:</source>
          <target state="translated">インデックスは、パス名のソートされたリストを含むバイナリファイル（通常は &lt;code&gt;.git/index&lt;/code&gt; に保持されます）であり、それぞれに権限とblobオブジェクトのSHA-1が付いています。&lt;a href=&quot;git-ls-files&quot;&gt;git-ls-files [1]&lt;/a&gt;はインデックスの内容を表示できます：</target>
        </trans-unit>
        <trans-unit id="a9316182499a37d7c3626ac01aa8aab4c013b473" translate="yes" xml:space="preserve">
          <source>The index is also capable of storing multiple entries (called &quot;stages&quot;) for a given pathname. These stages are used to hold the various unmerged version of a file when a merge is in progress.</source>
          <target state="translated">インデックスは、与えられたパス名に対して複数のエントリ (「ステージ」と呼ばれる)を格納することもできます。これらのステージは、マージが行われているときに、マージされていないファイルの様々なバージョンを保持するために使用されます。</target>
        </trans-unit>
        <trans-unit id="188f5a2d7cb942916f4771a1884b995e88b4142c" translate="yes" xml:space="preserve">
          <source>The index is thus a sort of temporary staging area, which is filled with a tree which you are in the process of working on.</source>
          <target state="translated">インデックスはこのように、作業中のツリーで埋め尽くされた一時的な演出エリアのようなものです。</target>
        </trans-unit>
        <trans-unit id="272f4c7f98ef3d0d8ac3fea3ee0b1455507c7b6c" translate="yes" xml:space="preserve">
          <source>The index is updated after successful completion, but the change must still be committed.</source>
          <target state="translated">インデックスは正常終了後に更新されますが、変更はまだコミットされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="aaf3f3d73cad6f7ed8d83d0912688100fa696756" translate="yes" xml:space="preserve">
          <source>The index line includes the blob object names before and after the change. The &amp;lt;mode&amp;gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</source>
          <target state="translated">インデックス行には、変更前後のblobオブジェクト名が含まれています。&amp;lt;mode&amp;gt;は、ファイルモードが変更されない場合に含まれます。それ以外の場合、別々の行は古いモードと新しいモードを示します。</target>
        </trans-unit>
        <trans-unit id="0c2192b5aebec33a414387c35e4e32f7ffc2561e" translate="yes" xml:space="preserve">
          <source>The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using &lt;code&gt;-f&lt;/code&gt; will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using &lt;code&gt;--ours&lt;/code&gt; or &lt;code&gt;--theirs&lt;/code&gt;. With &lt;code&gt;-m&lt;/code&gt;, changes made to the working tree file can be discarded to re-create the original conflicted merge result.</source>
          <target state="translated">以前にマージが失敗したため、インデックスにはマージされていないエントリが含まれている可能性があります。デフォルトでは、そのようなエントリをインデックスからチェックアウトしようとすると、チェックアウト操作は失敗し、何もチェックアウトされません。 &lt;code&gt;-f&lt;/code&gt; を使用すると、これらのマージされていないエントリは無視されます。 &lt;code&gt;--ours&lt;/code&gt; または &lt;code&gt;--theirs&lt;/code&gt; を使用して、マージの特定の側のコンテンツをインデックスからチェックアウトできます。 &lt;code&gt;-m&lt;/code&gt; 、ワーキングツリーのファイルに加えられた変更は、再作成し、元の競合のマージ結果を破棄することができます。</target>
        </trans-unit>
        <trans-unit id="4d0d51f29d49355316c3cef38c96a8eb5dfc2a8a" translate="yes" xml:space="preserve">
          <source>The index must be in a fully merged state.</source>
          <target state="translated">インデックスは完全にマージされた状態でなければなりません。</target>
        </trans-unit>
        <trans-unit id="76af7fc7918327fcfae98949c1f8a57aa6273691" translate="yes" xml:space="preserve">
          <source>The information &lt;code&gt;git rerere&lt;/code&gt; records is also used when running &lt;code&gt;git rebase&lt;/code&gt;. After blowing away the test merge and continuing development on the topic branch:</source>
          <target state="translated">&lt;code&gt;git rerere&lt;/code&gt; レコードの情報は、 &lt;code&gt;git rebase&lt;/code&gt; の実行時にも使用されます。テストマージを吹き飛ばしてトピックブランチの開発を継続した後：</target>
        </trans-unit>
        <trans-unit id="15901a24c7f8cf8a87522005a6e5af387df87a55" translate="yes" xml:space="preserve">
          <source>The information regarding a particular file, stored in the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;. An index entry can be unmerged, if a &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; was started, but not yet finished (i.e. if the index contains multiple versions of that file).</source>
          <target state="translated">&lt;a href=&quot;#def_index&quot;&gt;インデックス&lt;/a&gt;に保存されている特定のファイルに関する情報。&lt;a href=&quot;#def_merge&quot;&gt;マージ&lt;/a&gt;が開始されたが、まだ完了していない場合（つまり、インデックスにそのファイルの複数のバージョンが含まれている場合）、インデックスエントリをマージ解除できます。</target>
        </trans-unit>
        <trans-unit id="e1b41d54924f3d005ef481db0b83a44bcb5b9a26" translate="yes" xml:space="preserve">
          <source>The initial &lt;code&gt;git svn clone&lt;/code&gt; can be quite time-consuming (especially for large Subversion repositories). If multiple people (or one person with multiple machines) want to use &lt;code&gt;git svn&lt;/code&gt; to interact with the same Subversion repository, you can do the initial &lt;code&gt;git svn clone&lt;/code&gt; to a repository on a server and have each person clone that repository with &lt;code&gt;git clone&lt;/code&gt;:</source>
          <target state="translated">最初の &lt;code&gt;git svn clone&lt;/code&gt; は非常に時間がかかる可能性があります（特に大規模なSubversionリポジトリの場合）。複数の人（または複数のマシンを持つ1人）が &lt;code&gt;git svn&lt;/code&gt; を使用して同じSubversionリポジトリとやり取りしたい場合は、最初の &lt;code&gt;git svn clone&lt;/code&gt; をサーバー上のリポジトリに行い、各人に &lt;code&gt;git clone&lt;/code&gt; を使用してそのリポジトリをクローンさせることができます。</target>
        </trans-unit>
        <trans-unit id="086eba2d4da1f4350d7506d860bddbb6a3656718" translate="yes" xml:space="preserve">
          <source>The initial clone may be time-consuming for a large project, but you will only need to clone once.</source>
          <target state="translated">大きなプロジェクトの場合、最初のクローンは時間がかかるかもしれませんが、クローンは1回で済みます。</target>
        </trans-unit>
        <trans-unit id="de40e4660568a286f9924fcf84aa107b9295fcd9" translate="yes" xml:space="preserve">
          <source>The initial revision lays the foundation for almost everything Git has today, but is small enough to read in one sitting.</source>
          <target state="translated">初版は現在のGitのほぼすべての基礎を築いていますが、一度に読むには十分な大きさです。</target>
        </trans-unit>
        <trans-unit id="c62040180edff3420ed3a70f2f1e520bccaa26ac" translate="yes" xml:space="preserve">
          <source>The insane thing. You really want to call the new version &quot;X&quot; too, &lt;code&gt;even though&lt;/code&gt; others have already seen the old one. So just use &lt;code&gt;git tag -f&lt;/code&gt; again, as if you hadn&amp;rsquo;t already published the old one.</source>
          <target state="translated">非常識なこと。他の人がすでに古いバージョンを見ているに &lt;code&gt;even though&lt;/code&gt; 、あなたは本当に新しいバージョンも &quot;X&quot;と呼びたいと思っています。したがって、古い &lt;code&gt;git tag -f&lt;/code&gt; まだ公開していないかのように、もう一度git tag -fを使用します。</target>
        </trans-unit>
        <trans-unit id="861707a12241605e66eb9230fb32f3c54a08448e" translate="yes" xml:space="preserve">
          <source>The intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below.</source>
          <target state="translated">このオプションの意図は、適用するパッチの行を選んで選択したり、ステージングする行の内容を変更したりすることです。これは、対話的なハンクセレクタを使うよりも素早く、より柔軟にできます。しかし、自分自身を混乱させ、インデックスに適用されないパッチを作成することは簡単です。以下のパッチの編集を参照してください。</target>
        </trans-unit>
        <trans-unit id="44c76b656c6ccb35aba2b96c920b5e782121a3bc" translate="yes" xml:space="preserve">
          <source>The interactive backend drops commits by default that started empty and halts if it hits a commit that ended up empty. The &lt;code&gt;--keep-empty&lt;/code&gt; option exists for the interactive backend to allow it to keep commits that started empty.</source>
          <target state="translated">インタラクティブなバックエンドは、デフォルトでは空で始まったコミットを削除し、空になったコミットに到達すると停止します。 &lt;code&gt;--keep-empty&lt;/code&gt; オプションは、それが空の開始コミットを維持できるようにするために、対話型バックエンドのために存在します。</target>
        </trans-unit>
        <trans-unit id="c4d1b3aab1a5f39909af0bdb9766437575ff6138" translate="yes" xml:space="preserve">
          <source>The interactive mode is meant for this type of workflow:</source>
          <target state="translated">インタラクティブモードは、このタイプのワークフローのためのものです。</target>
        </trans-unit>
        <trans-unit id="bed5d62a356c4ef72d5d10899b110555c8810a69" translate="yes" xml:space="preserve">
          <source>The interactive rebase command was originally designed to handle individual patch series. As such, it makes sense to exclude merge commits from the todo list, as the developer may have merged the then-current &lt;code&gt;master&lt;/code&gt; while working on the branch, only to rebase all the commits onto &lt;code&gt;master&lt;/code&gt; eventually (skipping the merge commits).</source>
          <target state="translated">インタラクティブなrebaseコマンドは元々、個々のパッチシリーズを処理するために設計されました。そのため、開発者がブランチで作業中に当時の &lt;code&gt;master&lt;/code&gt; をマージし、最終的にすべてのコミットを &lt;code&gt;master&lt;/code&gt; にリベースする（マージコミットをスキップする）ため、マージコミットをtodoリストから除外することは理にかなっています。</target>
        </trans-unit>
        <trans-unit id="54aff08446e09f30da133e329eb3f3646033c66c" translate="yes" xml:space="preserve">
          <source>The interactive rebase will stop when a command fails (i.e. exits with non-0 status) to give you an opportunity to fix the problem. You can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;.</source>
          <target state="translated">コマンドが失敗すると（つまり、0以外のステータスで終了すると）、インタラクティブなリベースは停止し、問題を修正する機会が与えられます。 &lt;code&gt;git rebase --continue&lt;/code&gt; を続行できます。</target>
        </trans-unit>
        <trans-unit id="5a7f537099e4a0d8d8faba9c5e743d565b88b9dd" translate="yes" xml:space="preserve">
          <source>The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.</source>
          <target state="translated">これらの低レベルコマンドのインターフェイス(入力、出力、オプションのセット、セマンティクス)は、Porcelain レベルのコマンドよりもはるかに安定しています。一方、Porcelain コマンドのインターフェイスは、エンドユーザエクスペリエンスを向上させるために変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bf907bc1bbd0905aa866d8781057341315704641" translate="yes" xml:space="preserve">
          <source>The internal block size to use when converting a revision specifier such as &lt;code&gt;@all&lt;/code&gt; into a list of specific change numbers. Instead of using a single call to &lt;code&gt;p4 changes&lt;/code&gt; to find the full list of changes for the conversion, there are a sequence of calls to &lt;code&gt;p4 changes -m&lt;/code&gt;, each of which requests one block of changes of the given size. The default block size is 500, which should usually be suitable.</source>
          <target state="translated">&lt;code&gt;@all&lt;/code&gt; などのリビジョン指定子を特定の変更番号のリストに変換するときに使用する内部ブロックサイズ。 &lt;code&gt;p4 changes&lt;/code&gt; への単一の呼び出しを使用して変換の変更の完全なリストを見つける代わりに、それぞれが指定されたサイズの1ブロックの変更を要求する、 &lt;code&gt;p4 changes -m&lt;/code&gt; への一連の呼び出しがあります。デフォルトのブロックサイズは500で、通常はこれで十分です。</target>
        </trans-unit>
        <trans-unit id="b58ee91a98701b75ecd0edc6713c67b3efbc3330" translate="yes" xml:space="preserve">
          <source>The internals are documented in the &lt;a href=&quot;api-index&quot;&gt;Git API documentation&lt;/a&gt;.</source>
          <target state="translated">内部については、&lt;a href=&quot;api-index&quot;&gt;Git APIドキュメントに&lt;/a&gt;記載されています。</target>
        </trans-unit>
        <trans-unit id="52e0ef5f6de2b43e809ff876c18bbee69e575471" translate="yes" xml:space="preserve">
          <source>The key may contain any bytes except &lt;code&gt;=&lt;/code&gt;, newline, or NUL. The value may contain any bytes except newline or NUL.</source>
          <target state="translated">キーには、 &lt;code&gt;=&lt;/code&gt; 、改行、またはNUL以外の任意のバイトを含めることができます。値には、改行またはNUL以外の任意のバイトを含めることができます。</target>
        </trans-unit>
        <trans-unit id="051387312310d89e1f2cd1a7644ba37793a94a7c" translate="yes" xml:space="preserve">
          <source>The known attack vectors are as follows:</source>
          <target state="translated">既知の攻撃ベクトルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d0880a7ce92ec68d75b7997f1b8b330766294029" translate="yes" xml:space="preserve">
          <source>The lack of a central group of &quot;committers&quot; means there is less need for formal decisions about who is &quot;in&quot; and who is &quot;out&quot;.</source>
          <target state="translated">コミッター」という中心的なグループがないということは、誰が「入っている」のか、誰が「出ている」のかを正式に決定する必要性が少ないということです。</target>
        </trans-unit>
        <trans-unit id="d217f82f775261a888c8090d4fd57de90a2943db" translate="yes" xml:space="preserve">
          <source>The last diff is empty, but no new commits have been made, and the head still doesn&amp;rsquo;t contain the new line:</source>
          <target state="translated">最後の差分は空ですが、新しいコミットは行われておらず、ヘッドにはまだ新しい行が含まれていません。</target>
        </trans-unit>
        <trans-unit id="fc6ae42476a6037281df209d5a37adfb042c084d" translate="yes" xml:space="preserve">
          <source>The last three commits (&lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;HEAD^&lt;/code&gt;, and &lt;code&gt;HEAD~2&lt;/code&gt;) were bad and you do not want to ever see them again. Do &lt;strong&gt;not&lt;/strong&gt; do this if you have already given these commits to somebody else. (See the &quot;RECOVERING FROM UPSTREAM REBASE&quot; section in &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; for the implications of doing so.)</source>
          <target state="translated">最後の3つのコミット（ &lt;code&gt;HEAD&lt;/code&gt; 、 &lt;code&gt;HEAD^&lt;/code&gt; 、および &lt;code&gt;HEAD~2&lt;/code&gt; ）は悪かったので、二度と見たくありません。ん&lt;strong&gt;ではない&lt;/strong&gt;すでに他の誰かにこれらのコミットを与えている場合は、これを行います。 （その影響については、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]の&lt;/a&gt;「UPSREAM REBASEからの復旧」セクションをご覧ください。）</target>
        </trans-unit>
        <trans-unit id="9b2685798225cd4befed46a027cdbd30eb245ee2" translate="yes" xml:space="preserve">
          <source>The latest stash you created is stored in &lt;code&gt;refs/stash&lt;/code&gt;; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e.g. &lt;code&gt;stash@{0}&lt;/code&gt; is the most recently created stash, &lt;code&gt;stash@{1}&lt;/code&gt; is the one before it, &lt;code&gt;stash@{2.hours.ago}&lt;/code&gt; is also possible). Stashes may also be referenced by specifying just the stash index (e.g. the integer &lt;code&gt;n&lt;/code&gt; is equivalent to &lt;code&gt;stash@{n}&lt;/code&gt;).</source>
          <target state="translated">作成した最新のスタッシュは &lt;code&gt;refs/stash&lt;/code&gt; に保存されます。古いスタッシュはこの参照のreflogにあり、通常のreflog構文を使用して名前を付けることができます（たとえば、 &lt;code&gt;stash@{0}&lt;/code&gt; は最後に作成されたスタッシュ、 &lt;code&gt;stash@{1}&lt;/code&gt; はその前の &lt;code&gt;stash@{2.hours.ago}&lt;/code&gt; 、stash @ { 2.hours .ago}も可能です）。スタッシュは、スタッシュインデックスのみを指定して参照することもできます（たとえば、整数 &lt;code&gt;n&lt;/code&gt; は &lt;code&gt;stash@{n}&lt;/code&gt; と同等です）。</target>
        </trans-unit>
        <trans-unit id="8bb7601b8118e6905d96f76a29452df6bc2ae98e" translate="yes" xml:space="preserve">
          <source>The latter is not available by default, unless configured.</source>
          <target state="translated">後者は、設定されていない限り、デフォルトでは利用できません。</target>
        </trans-unit>
        <trans-unit id="9096be046e467fbce79d2a6fe63b310a7a8be174" translate="yes" xml:space="preserve">
          <source>The latter use of the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; values can be overridden by giving the &lt;code&gt;--refmap=&amp;lt;refspec&amp;gt;&lt;/code&gt; parameter(s) on the command line.</source>
          <target state="translated">後者の &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; 値の使用は、コマンドラインで &lt;code&gt;--refmap=&amp;lt;refspec&amp;gt;&lt;/code&gt; パラメータを指定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="63c1787cad9f454d5a2a74665dcae083a7a8328f" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, for git-credential-store to retry when trying to lock the credentials file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1s).</source>
          <target state="translated">認証ファイルをロックしようとしたときに git-credential-store が再試行する時間の長さをミリ秒単位で指定します。値 0 はリトライしないことを意味し、-1 は無期限にリトライすることを意味します。デフォルトは 1000 です (つまり、1 秒間リトライします)。</target>
        </trans-unit>
        <trans-unit id="55ffd562f6b8b4abf7958d261df418cb81ead100" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, to retry when trying to lock an individual reference. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms).</source>
          <target state="translated">個々の参照をロックしようとするときに再試行する時間をミリ秒単位で指定します。値 0 はリトライしないことを意味し、-1 は無期限にリトライすることを意味します。デフォルトは 100 です (つまり、100ms の間リトライします)。</target>
        </trans-unit>
        <trans-unit id="68a6d4f84896f5fe182696f59cffd1c668106a0a" translate="yes" xml:space="preserve">
          <source>The length of time, in milliseconds, to retry when trying to lock the &lt;code&gt;packed-refs&lt;/code&gt; file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second).</source>
          <target state="translated">&lt;code&gt;packed-refs&lt;/code&gt; ファイルをロックしようとしたときに再試行する時間（ミリ秒単位）。値0は、再試行しないことを意味します。-1は無期限に試行することを意味します。デフォルトは1000です（つまり、1秒間再試行します）。</target>
        </trans-unit>
        <trans-unit id="fff6cc41c6311b04938a1f36a103054a2f1d2e11" translate="yes" xml:space="preserve">
          <source>The list above is ordered by decreasing precedence; a URL that matches a config key&amp;rsquo;s path is preferred to one that matches its user name. For example, if the URL is &lt;code&gt;https://user@example.com/foo/bar&lt;/code&gt; a config key match of &lt;code&gt;https://example.com/foo&lt;/code&gt; will be preferred over a config key match of &lt;code&gt;https://user@example.com&lt;/code&gt;.</source>
          <target state="translated">上記のリストは、優先順位が高い順に並べられています。構成キーのパスと一致するURLは、ユーザー名と一致するURLよりも優先されます。例えば、URLがある場合 &lt;code&gt;https://user@example.com/foo/bar&lt;/code&gt; のA設定キーマッチ &lt;code&gt;https://example.com/foo&lt;/code&gt; はの設定キーの一致よりも優先されます &lt;code&gt;https://user@example.com&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34cf6a4a25da733f5b8366288a8f31ad385fa0ee" translate="yes" xml:space="preserve">
          <source>The list of identifiers, and other information, of the objects in a &lt;a href=&quot;#def_pack&quot;&gt;pack&lt;/a&gt;, to assist in efficiently accessing the contents of a pack.</source>
          <target state="translated">&lt;a href=&quot;#def_pack&quot;&gt;パック&lt;/a&gt;のオブジェクトに効率的にアクセスするのに役立つ、パック内のオブジェクトの識別子とその他の情報のリスト。</target>
        </trans-unit>
        <trans-unit id="58413b6422259538de8b3cfc5351841a4fb3ade2" translate="yes" xml:space="preserve">
          <source>The list of mailbox files to read patches from. If you do not supply this argument, the command reads from the standard input. If you supply directories, they will be treated as Maildirs.</source>
          <target state="translated">パッチを読み込むメールボックスファイルのリスト。この引数を指定しなかった場合、コマンドは標準入力から読み込みます。ディレクトリを指定した場合、それらは Maildirs として扱われます。</target>
        </trans-unit>
        <trans-unit id="811a0eecf6c6689902c9fc1e00fe667f20b10132" translate="yes" xml:space="preserve">
          <source>The list of remotes which are fetched by &quot;git remote update &amp;lt;group&amp;gt;&quot;. See &lt;a href=&quot;git-remote&quot;&gt;git-remote[1]&lt;/a&gt;.</source>
          <target state="translated">「git remote update &amp;lt;group&amp;gt;」によって取得されるリモートのリスト。&lt;a href=&quot;git-remote&quot;&gt;git-remote [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3aadf5969931435dfd81a576572d271c1b7df1e4" translate="yes" xml:space="preserve">
          <source>The list you get with &quot;ls&quot; :-)</source>
          <target state="translated">ls&quot; で取得したリスト :-)</target>
        </trans-unit>
        <trans-unit id="2d5bfecbee3eeb5c71f69bd43de88bc34222a07d" translate="yes" xml:space="preserve">
          <source>The local offset is specified by &lt;code&gt;&amp;lt;offutc&amp;gt;&lt;/code&gt; as a positive or negative offset from UTC. For example EST (which is 5 hours behind UTC) would be expressed in &lt;code&gt;&amp;lt;tz&amp;gt;&lt;/code&gt; by &amp;ldquo;-0500&amp;rdquo; while UTC is &amp;ldquo;+0000&amp;rdquo;. The local offset does not affect &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;; it is used only as an advisement to help formatting routines display the timestamp.</source>
          <target state="translated">ローカルオフセットは、UTCからの正または負のオフセットとして &lt;code&gt;&amp;lt;offutc&amp;gt;&lt;/code&gt; で指定されます。たとえば、EST（UTCより5時間遅い）は、UTCが「+0000」であるのに対し、「 &lt;code&gt;&amp;lt;tz&amp;gt;&lt;/code&gt; 」では「-0500」で表されます。ローカルオフセットは &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; には影響しません。これは、フォーマットルーチンがタイムスタンプを表示するのに役立つアドバイスとしてのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="ab508d82c7d8a4545e2bb32ec9ec4fb2386a14cb" translate="yes" xml:space="preserve">
          <source>The location of an augmenting mailmap file. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself. See &lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog[1]&lt;/a&gt; and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt;.</source>
          <target state="translated">拡張メールマップファイルの場所。リポジトリのルートにあるデフォルトのメールマップが最初にロードされ、次にこの変数が指すメールマップファイルがロードされます。メールマップファイルの場所は、リポジトリサブディレクトリか、リポジトリ自体の外のどこかにあります。&lt;a href=&quot;git-shortlog&quot;&gt;git-shortlog [1]&lt;/a&gt;と&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d3bb0979c637e06c575b3f731f106ded5d4b916f" translate="yes" xml:space="preserve">
          <source>The location of per-instance and system-wide configuration files can be overridden using the following environment variables:</source>
          <target state="translated">インスタンス単位の設定ファイルとシステム全体の設定ファイルの場所は、以下の環境変数を使用して上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="9446c1e5cce4b2ece4fc10ff79540962e21c6551" translate="yes" xml:space="preserve">
          <source>The magic word &lt;code&gt;top&lt;/code&gt; (magic signature: &lt;code&gt;/&lt;/code&gt;) makes the pattern match from the root of the working tree, even when you are running the command from inside a subdirectory.</source>
          <target state="translated">マジックワード &lt;code&gt;top&lt;/code&gt; （マジックシグネチャ： &lt;code&gt;/&lt;/code&gt; ）は、サブディレクトリ内からコマンドを実行している場合でも、作業ツリーのルートからパターンを一致させます。</target>
        </trans-unit>
        <trans-unit id="64ba77ac0581cbecc6b691422d0c5681817b2387" translate="yes" xml:space="preserve">
          <source>The main command loop has 6 subcommands (plus help and quit).</source>
          <target state="translated">メインコマンドループには、6つのサブコマンド(+ヘルプと終了)があります。</target>
        </trans-unit>
        <trans-unit id="0b0bee129956915b1cb776d4190a01b55932ed3c" translate="yes" xml:space="preserve">
          <source>The main command loop has 6 subcommands.</source>
          <target state="translated">メインコマンドループには6つのサブコマンドがあります。</target>
        </trans-unit>
        <trans-unit id="821ddd85eba2b4bc6e95a82521b10b32287622db" translate="yes" xml:space="preserve">
          <source>The main trunk is stored in the Git branch named &lt;code&gt;origin&lt;/code&gt;, and additional CVS branches are stored in Git branches with the same names. The most recent version of the main trunk is also left checked out on the &lt;code&gt;master&lt;/code&gt; branch, so you can start adding your own changes right away.</source>
          <target state="translated">メイントランクは &lt;code&gt;origin&lt;/code&gt; という名前のGitブランチに保存され、追加のCVSブランチは同じ名前のGitブランチに保存されます。メイントランクの最新バージョンも &lt;code&gt;master&lt;/code&gt; ブランチでチェックアウトされたままなので、すぐに独自の変更を追加できます。</target>
        </trans-unit>
        <trans-unit id="f31023370321849385c22bc8ae521136bfffac45" translate="yes" xml:space="preserve">
          <source>The mapping of file names from the p4 depot path to Git, by default, involves removing the entire depot path. With this option, the full p4 depot path is retained in Git. For example, path &lt;code&gt;//depot/main/foo/bar.c&lt;/code&gt;, when imported from &lt;code&gt;//depot/main/&lt;/code&gt;, becomes &lt;code&gt;foo/bar.c&lt;/code&gt;. With &lt;code&gt;--keep-path&lt;/code&gt;, the Git path is instead &lt;code&gt;depot/main/foo/bar.c&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、p4デポパスからGitへのファイル名のマッピングには、デポパス全体の削除が含まれます。このオプションを使用すると、完全なp4デポパスがGitに保持されます。たとえば、パス &lt;code&gt;//depot/main/foo/bar.c&lt;/code&gt; は、 &lt;code&gt;//depot/main/&lt;/code&gt; からインポートされると、 &lt;code&gt;foo/bar.c&lt;/code&gt; になります。 &lt;code&gt;--keep-path&lt;/code&gt; 、Gitのパスではなく、ある &lt;code&gt;depot/main/foo/bar.c&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="696795b724c116f40755fe0ffd2f815f95c8f529" translate="yes" xml:space="preserve">
          <source>The mark command is optional here as some frontends have chosen to generate the Git SHA-1 for the blob on their own, and feed that directly to &lt;code&gt;commit&lt;/code&gt;. This is typically more work than it&amp;rsquo;s worth however, as marks are inexpensive to store and easy to use.</source>
          <target state="translated">一部のフロントエンドがBLOBのGit SHA-1を独自に生成し、直接フィードして &lt;code&gt;commit&lt;/code&gt; することを選択しているため、ここではmarkコマンドはオプションです。マークは保存するのに費用がかからず、使いやすいので、通常、これは価値があるよりも多くの作業です。</target>
        </trans-unit>
        <trans-unit id="154d6f76415eae422478f55f25c1ddb853a4e1ab" translate="yes" xml:space="preserve">
          <source>The maximum delta depth used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no maximum depth is given on the command line. Defaults to 50. Maximum value is 4095.</source>
          <target state="translated">コマンドラインで最大深度が指定されていない場合に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]が&lt;/a&gt;使用する最大デルタ深度。デフォルトは50です。最大値は4095です。</target>
        </trans-unit>
        <trans-unit id="95e6e1cf49a26e9f67b2825bc0bd39addf27373a" translate="yes" xml:space="preserve">
          <source>The maximum length of the output filenames generated by the &lt;code&gt;format-patch&lt;/code&gt; command; defaults to 64. Can be overridden by the &lt;code&gt;--filename-max-length=&amp;lt;n&amp;gt;&lt;/code&gt; command line option.</source>
          <target state="translated">&lt;code&gt;format-patch&lt;/code&gt; コマンドによって生成される出力ファイル名の最大長。デフォルトは64です &lt;code&gt;--filename-max-length=&amp;lt;n&amp;gt;&lt;/code&gt; コマンドラインオプションで上書きできます。</target>
        </trans-unit>
        <trans-unit id="9325da9117f9b4afd884e4f7e837bf9ca641172e" translate="yes" xml:space="preserve">
          <source>The maximum memory in bytes used for caching deltas in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; before writing them out to a pack. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping. A value of 0 means no limit. The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB.</source>
          <target state="translated">&lt;a href=&quot;git-pack-objects&quot;&gt;パック&lt;/a&gt;に書き込む前にgit-pack-objects [1]でデルタをキャッシュするために使用されるバイト単位の最大メモリ。このキャッシュは、すべてのオブジェクトに最適な一致が見つかると、最終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズを高速化するために使用されます。ただし、メモリが不足しているマシンで大規模なリポジトリを再パックすると、特にこのキャッシュがシステムをスワッピングにプッシュする場合は、これによって悪影響を受ける可能性があります。値0は、制限がないことを意味します。最小サイズの1バイトを使用して、このキャッシュを実質的に無効にすることができます。デフォルトは256 MiBです。</target>
        </trans-unit>
        <trans-unit id="a0015a1c1a155cb39bc99dd58a785f6e45fb6909" translate="yes" xml:space="preserve">
          <source>The maximum size of a delta, that is cached in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000. Maximum value is 65535.</source>
          <target state="translated">&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]に&lt;/a&gt;キャッシュされるデルタの最大サイズ。このキャッシュは、すべてのオブジェクトに最適な一致が見つかると、最終的なデルタ結果を再計算する必要がないため、オブジェクトの書き込みフェーズを高速化するために使用されます。デフォルトは1000です。最大値は65535です。</target>
        </trans-unit>
        <trans-unit id="d2696797b76aad16406d56dd354feaf085869327" translate="yes" xml:space="preserve">
          <source>The maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected. It can be overridden by the &lt;code&gt;--max-pack-size&lt;/code&gt; option of &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;. Reaching this limit results in the creation of multiple packfiles; which in turn prevents bitmaps from being created. The minimum size allowed is limited to 1 MiB. The default is unlimited. Common unit suffixes of &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, or &lt;code&gt;g&lt;/code&gt; are supported.</source>
          <target state="translated">パックの最大サイズ。この設定は、再パッキング時のファイルへのパッキングにのみ影響します。つまり、git：//プロトコルは影響を受けません。&lt;a href=&quot;git-repack&quot;&gt;git- &lt;/a&gt; &lt;code&gt;--max-pack-size&lt;/code&gt; [1]の--max-pack-sizeオプションでオーバーライドできます。この制限に達すると、複数のパックファイルが作成されます。これにより、ビットマップが作成されなくなります。許可される最小サイズは1 MiBに制限されています。デフォルトは無制限です。 &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;m&lt;/code&gt; 、または &lt;code&gt;g&lt;/code&gt; の共通の単位サフィックスがサポートされています。</target>
        </trans-unit>
        <trans-unit id="bb8ed32c533714ca4a8bb85ec574c3c5791f3a2f" translate="yes" xml:space="preserve">
          <source>The maximum size of memory that is consumed by each thread in &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; for pack window memory when no limit is given on the command line. The value can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. When left unconfigured (or set explicitly to 0), there will be no limit.</source>
          <target state="translated">コマンドラインで制限が指定されていない場合にパックウィンドウメモリ用に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]の&lt;/a&gt;各スレッドによって消費されるメモリの最大サイズ。値の末尾には、「k」、「m」、または「g」を付けることができます。未構成のままにした場合（または明示的に0に設定した場合）、制限はありません。</target>
        </trans-unit>
        <trans-unit id="565cc584b68c5b675a716ec7daae7fd9f3343784" translate="yes" xml:space="preserve">
          <source>The meaning of each part of feature configuration is described below:</source>
          <target state="translated">以下、機能構成の各部の意味を説明する。</target>
        </trans-unit>
        <trans-unit id="9c067af8c6826c60723d70b61f19783aa20b528e" translate="yes" xml:space="preserve">
          <source>The merge backend keeps intentionally empty commits by default (though with -i they are marked as empty in the todo list editor, or they can be dropped automatically with --no-keep-empty).</source>
          <target state="translated">マージバックエンドはデフォルトで意図的に空のコミットを保持します (ただし、-i を指定すると TODO リストエディタでは空のコミットとしてマークされ、 --no-keep-empty を指定すると自動的に削除されます)。</target>
        </trans-unit>
        <trans-unit id="35e3581a01e860cba15921ad7e00a74542d34f54" translate="yes" xml:space="preserve">
          <source>The merge backend works with a full copy of each relevant file, insulating it from these types of problems.</source>
          <target state="translated">マージバックエンドは、各関連ファイルの完全なコピーを使用して動作し、このような問題を回避します。</target>
        </trans-unit>
        <trans-unit id="d2c94b31b25e0c09828d4438bdd636247e16e902" translate="yes" xml:space="preserve">
          <source>The merge backend works with the full commits on both sides of history and thus has no such limitations.</source>
          <target state="translated">マージバックエンドは、履歴の両側の完全なコミットで動作するため、そのような制限はありません。</target>
        </trans-unit>
        <trans-unit id="657f593653b8985b76ea363799992d9ccd8552d1" translate="yes" xml:space="preserve">
          <source>The merge driver can learn the pathname in which the merged result will be stored via placeholder &lt;code&gt;%P&lt;/code&gt;.</source>
          <target state="translated">マージドライバーは、マージされた結果がプレースホルダー &lt;code&gt;%P&lt;/code&gt; を介して格納されるパス名を学習できます。</target>
        </trans-unit>
        <trans-unit id="3a4ee88dc1fd419e5903b5a6b97383e8c2a1fab9" translate="yes" xml:space="preserve">
          <source>The merge driver is expected to leave the result of the merge in the file named with &lt;code&gt;%A&lt;/code&gt; by overwriting it, and exit with zero status if it managed to merge them cleanly, or non-zero if there were conflicts.</source>
          <target state="translated">マージドライバは、 &lt;code&gt;%A&lt;/code&gt; という名前のファイルに上書きすることでマージの結果を残し、正常にマージできた場合はゼロステータスで、競合があった場合はゼロ以外で終了することが期待されています。</target>
        </trans-unit>
        <trans-unit id="d39522f0982abae4a359335f63ed088d0f4a4c4e" translate="yes" xml:space="preserve">
          <source>The merge mechanism (&lt;code&gt;git merge&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; commands) allows the backend &lt;code&gt;merge strategies&lt;/code&gt; to be chosen with &lt;code&gt;-s&lt;/code&gt; option. Some strategies can also take their own options, which can be passed by giving &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; arguments to &lt;code&gt;git merge&lt;/code&gt; and/or &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">マージメカニズム（ &lt;code&gt;git merge&lt;/code&gt; および &lt;code&gt;git pull&lt;/code&gt; コマンド）では、 &lt;code&gt;-s&lt;/code&gt; オプションを使用してバックエンド &lt;code&gt;merge strategies&lt;/code&gt; を選択できます。一部の戦略では独自のオプションを使用することもできます。これらのオプションは、 &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; 引数を &lt;code&gt;git merge&lt;/code&gt; や &lt;code&gt;git pull&lt;/code&gt; に渡すことで渡すことができます。</target>
        </trans-unit>
        <trans-unit id="fa594438c3581495b74bb79c047cb66382bd8b0d" translate="yes" xml:space="preserve">
          <source>The merge workflow works by copying branches between upstream and downstream. Upstream can merge contributions into the official history; downstream base their work on the official history.</source>
          <target state="translated">マージワークフローは、上流と下流の間でブランチをコピーすることで動作します。上流では投稿を公式の履歴にマージすることができ、下流では公式の履歴に基づいて作業を行います。</target>
        </trans-unit>
        <trans-unit id="1df107645dfce75dc8613a8a0f6007cf8381d780" translate="yes" xml:space="preserve">
          <source>The merge-base command finds a common ancestor of the given commits, and always returns one or the other in the case where one is a descendant of the other; so the above output shows that e05db0fd actually is an ancestor of v1.5.0-rc1.</source>
          <target state="translated">merge-base コマンドは、与えられたコミットの共通の祖先を見つけ、一方が他方の子孫である場合は常に一方か他方を返します。</target>
        </trans-unit>
        <trans-unit id="91d3bf0b3d356085e2e60914fc9a13ad2e2b8ebf" translate="yes" xml:space="preserve">
          <source>The message in a commit or a tag object is &lt;code&gt;contents&lt;/code&gt;, from which &lt;code&gt;contents:&amp;lt;part&amp;gt;&lt;/code&gt; can be used to extract various parts out of:</source>
          <target state="translated">コミットまたはタグオブジェクトのメッセージは &lt;code&gt;contents&lt;/code&gt; であり、そこから &lt;code&gt;contents:&amp;lt;part&amp;gt;&lt;/code&gt; を使用して以下からさまざまな部分を抽出できます。</target>
        </trans-unit>
        <trans-unit id="19f5c4372c6fc154ead993a9f4b5a82da922524d" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt; and command line with &lt;code&gt;-m&lt;/code&gt; are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; を使用してファイルから取得したメッセージと &lt;code&gt;-m&lt;/code&gt; を使用してコマンドラインを取得したメッセージは、通常、変更されていないタグメッセージとして使用されます。このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。</target>
        </trans-unit>
        <trans-unit id="1e2b72f6afed427d21f4e345d320e470730d82f9" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt;, command line with &lt;code&gt;-m&lt;/code&gt;, and from commit object with &lt;code&gt;-C&lt;/code&gt; are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; を使用してファイルから、 &lt;code&gt;-m&lt;/code&gt; を使用してコマンドラインから、および &lt;code&gt;-C&lt;/code&gt; を使用してコミットオブジェクトから取得したメッセージは、通常、変更されていないコミットログメッセージとして使用されます。このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。</target>
        </trans-unit>
        <trans-unit id="ae16f65784862fd6e529b736650355763df13327" translate="yes" xml:space="preserve">
          <source>The method by which a submodule is updated by &lt;code&gt;git submodule update&lt;/code&gt;, which is the only affected command, others such as &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; are unaffected. It exists for historical reasons, when &lt;code&gt;git submodule&lt;/code&gt; was the only command to interact with submodules; settings like &lt;code&gt;submodule.active&lt;/code&gt; and &lt;code&gt;pull.rebase&lt;/code&gt; are more specific. It is populated by &lt;code&gt;git submodule init&lt;/code&gt; from the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file. See description of &lt;code&gt;update&lt;/code&gt; command in &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;.</source>
          <target state="translated">影響を受ける唯一のコマンドである &lt;code&gt;git submodule update&lt;/code&gt; によってサブモジュールが更新される方法。他の &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; などは影響を受けません。これは、 &lt;code&gt;git submodule&lt;/code&gt; がサブモジュールと対話する唯一のコマンドであった歴史的な理由で存在します。 &lt;code&gt;submodule.active&lt;/code&gt; や &lt;code&gt;pull.rebase&lt;/code&gt; などの設定はより具体的です。&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルから &lt;code&gt;git submodule init&lt;/code&gt; によって読み込まれます。&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;の &lt;code&gt;update&lt;/code&gt; コマンドの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="04ef06b50b9899f38b1e5f5c81eb00396b6d2328" translate="yes" xml:space="preserve">
          <source>The mode parameter is optional (defaults to &lt;code&gt;all&lt;/code&gt;), and is used to specify the handling of untracked files; when -u is not used, the default is &lt;code&gt;normal&lt;/code&gt;, i.e. show untracked files and directories.</source>
          <target state="translated">modeパラメータはオプションであり（デフォルトは &lt;code&gt;all&lt;/code&gt; ）、追跡されていないファイルの処理を指定するために使用されます。-uを使用しない場合、デフォルトは &lt;code&gt;normal&lt;/code&gt; です。つまり、追跡されていないファイルとディレクトリが表示されます。</target>
        </trans-unit>
        <trans-unit id="daee71f2e966cf5f390a0401b9f0381f1242178c" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of ignored files. It is optional: it defaults to &lt;code&gt;traditional&lt;/code&gt;.</source>
          <target state="translated">modeパラメータは、無視されたファイルの処理を指定するために使用されます。これはオプションである：それはデフォルト &lt;code&gt;traditional&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="789771a80f50eaf70002a855307c4e88ea3d25bd" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of untracked files. It is optional: it defaults to &lt;code&gt;all&lt;/code&gt;, and if specified, it must be stuck to the option (e.g. &lt;code&gt;-uno&lt;/code&gt;, but not &lt;code&gt;-u no&lt;/code&gt;).</source>
          <target state="translated">modeパラメータは、追跡されていないファイルの処理を指定するために使用されます。これはオプションです。デフォルトは &lt;code&gt;all&lt;/code&gt; で、指定する場合はオプションに &lt;code&gt;-uno&lt;/code&gt; する必要があります（例：-uno、ただし &lt;code&gt;-u no&lt;/code&gt; ではない）。</target>
        </trans-unit>
        <trans-unit id="d56062b3fd6eee94e49e5896b7d127ee25df01a1" translate="yes" xml:space="preserve">
          <source>The modifications stashed away by this command can be listed with &lt;code&gt;git stash list&lt;/code&gt;, inspected with &lt;code&gt;git stash show&lt;/code&gt;, and restored (potentially on top of a different commit) with &lt;code&gt;git stash apply&lt;/code&gt;. Calling &lt;code&gt;git stash&lt;/code&gt; without any arguments is equivalent to &lt;code&gt;git stash push&lt;/code&gt;. A stash is by default listed as &quot;WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;​&quot;, but you can give a more descriptive message on the command line when you create one.</source>
          <target state="translated">このコマンドによって隠された変更は、 &lt;code&gt;git stash list&lt;/code&gt; で一覧 &lt;code&gt;git stash show&lt;/code&gt; 、git stash showで検査され、 &lt;code&gt;git stash apply&lt;/code&gt; で復元される可能性があります（別のコミットの上にある）。引数なしで &lt;code&gt;git stash&lt;/code&gt; を呼び出すことは、 &lt;code&gt;git stash push&lt;/code&gt; と同等です。 stashはデフォルトで「WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;」としてリストされますが、作成時にコマンドラインでより詳細なメッセージを表示できます。</target>
        </trans-unit>
        <trans-unit id="e06fa83026ee56ec3b62a659fa5a44c6e4e4728d" translate="yes" xml:space="preserve">
          <source>The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)</source>
          <target state="translated">モジュールのパス (httpd が Apache の場合のみ必要)。(デフォルト:/usr/lib/apache2/modules)</target>
        </trans-unit>
        <trans-unit id="08ed4170506fa174e84f549a0e3f26086c486529" translate="yes" xml:space="preserve">
          <source>The more complex forms are:</source>
          <target state="translated">より複雑な形になっています。</target>
        </trans-unit>
        <trans-unit id="7d735293dee944ca58932a7261110828d307c793" translate="yes" xml:space="preserve">
          <source>The most common cause of dangling objects is that you&amp;rsquo;ve rebased a branch, or you have pulled from somebody else who rebased a branch&amp;mdash;​see &lt;a href=&quot;#cleaning-up-history&quot;&gt;Rewriting history and maintaining patch series&lt;/a&gt;. In that case, the old head of the original branch still exists, as does everything it pointed to. The branch pointer itself just doesn&amp;rsquo;t, since you replaced it with another one.</source>
          <target state="translated">ぶら下がっているオブジェクトの最も一般的な原因は、ブランチをリベースしたか、ブランチをリベースした他の誰かからプルしたことです。&lt;a href=&quot;#cleaning-up-history&quot;&gt;履歴の書き換えとパッチシリーズの維持を&lt;/a&gt;参照してください。その場合、元のブランチの古いヘッドが存在し、それが指すすべてのものが存在します。ブランチポインター自体は、別のものに置き換えたため、実際にはありません。</target>
        </trans-unit>
        <trans-unit id="8bc143dd44c89f63596943262174b04211332773" translate="yes" xml:space="preserve">
          <source>The multi-pack-index (MIDX for short) stores a list of objects and their offsets into multiple packfiles. It contains:</source>
          <target state="translated">multi-pack-index (略して MIDX)は、オブジェクトのリストとそのオフセットを複数のパックファイルに格納します。これには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="4ca15f678a55a1443f2d701a54958e45ad8a0235" translate="yes" xml:space="preserve">
          <source>The multi-pack-index allows many packfiles, especially in a context where repacking is expensive (such as a very large repo), or unexpected maintenance time is unacceptable (such as a high-demand build machine). However, the multi-pack-index needs to be rewritten in full every time. We can extend the format to be incremental, so writes are fast. By storing a small &quot;tip&quot; multi-pack-index that points to large &quot;base&quot; MIDX files, we can keep writes fast while still reducing the number of binary searches required for object lookups.</source>
          <target state="translated">multi-pack-indexを使うと、特にリパックにコストがかかるような文脈(非常に大きなレポなど)や、予期せぬメンテナンス時間が許容できないような文脈(需要の高いビルドマシンなど)では、多くのパックファイルを使用することが可能になります。しかし、マルチパックインデックスは毎回フルに書き換える必要があります。そこで、フォーマットをインクリメンタルに拡張することで、書き込みが高速になります。大きな &quot;ベース &quot;MIDXファイルを指す小さな &quot;tip &quot;マルチパックインデックスを格納することで、オブジェクトの検索に必要なバイナリ検索の数を減らしつつ、書き込みを高速に保つことができます。</target>
        </trans-unit>
        <trans-unit id="d98c840529f1ab7c2fa3df48a823219f4ff9a17e" translate="yes" xml:space="preserve">
          <source>The multi-pack-index files refer to multiple pack-files and loose objects.</source>
          <target state="translated">マルチパックインデックスファイルは、複数のパックファイルとルーズオブジェクトを参照しています。</target>
        </trans-unit>
        <trans-unit id="1e0c8af9211e361d1a35789c37df84247f7ae9ac" translate="yes" xml:space="preserve">
          <source>The name and the e-mail address of the owner of the key that signed the push certificate.</source>
          <target state="translated">プッシュ証明書に署名した鍵の所有者の名前とメールアドレス。</target>
        </trans-unit>
        <trans-unit id="2551d22d5e60fb51293e5ef827d3f2d640624d55" translate="yes" xml:space="preserve">
          <source>The name of a commit at which to start the new branch; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details. Defaults to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">新しいブランチを開始するコミットの名前。詳細は&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;をご覧ください。デフォルトは &lt;code&gt;HEAD&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0efd5464958e1be85e38672256be6f6e17bc462a" translate="yes" xml:space="preserve">
          <source>The name of a local ref which can be considered &amp;ldquo;upstream&amp;rdquo; from the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; in the same way as &lt;code&gt;refname&lt;/code&gt; above. Additionally respects &lt;code&gt;:track&lt;/code&gt; to show &quot;[ahead N, behind M]&quot; and &lt;code&gt;:trackshort&lt;/code&gt; to show the terse version: &quot;&amp;gt;&quot; (ahead), &quot;&amp;lt;&quot; (behind), &quot;&amp;lt;&amp;gt;&quot; (ahead and behind), or &quot;=&quot; (in sync). &lt;code&gt;:track&lt;/code&gt; also prints &quot;[gone]&quot; whenever unknown upstream ref is encountered. Append &lt;code&gt;:track,nobracket&lt;/code&gt; to show tracking information without brackets (i.e &quot;ahead N, behind M&quot;).</source>
          <target state="translated">表示された参照の「上流」と見なすことができるローカル参照の名前。点 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; と &lt;code&gt;:rstrip&lt;/code&gt; と同様に &lt;code&gt;refname&lt;/code&gt; 上記。さらに &lt;code&gt;:track&lt;/code&gt; は &quot;[ahead N、behind M]&quot; を表示し、 &lt;code&gt;:trackshort&lt;/code&gt; は簡潔なバージョンを表示します： &quot;&amp;gt;&quot;（ahead）、 &quot;&amp;lt;&quot;（behind）、 &quot;&amp;lt;&amp;gt;&quot;（ahead and behind）、または &quot; = &quot;（同期中）。 &lt;code&gt;:track&lt;/code&gt; はまた、不明なアップストリームの参照に遭遇するたびに &quot;[gone]&quot;を出力します。追加 &lt;code&gt;:track,nobracket&lt;/code&gt; 括弧なしで追跡情報を表示する（すなわち、「先にM背後N」）。</target>
        </trans-unit>
        <trans-unit id="285243cf13ade280f7038dfb92bbdaa7d26dec36" translate="yes" xml:space="preserve">
          <source>The name of a local ref which represents the &lt;code&gt;@{push}&lt;/code&gt; location for the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt;, &lt;code&gt;:rstrip&lt;/code&gt;, &lt;code&gt;:track&lt;/code&gt;, &lt;code&gt;:trackshort&lt;/code&gt;, &lt;code&gt;:remotename&lt;/code&gt;, and &lt;code&gt;:remoteref&lt;/code&gt; options as &lt;code&gt;upstream&lt;/code&gt; does. Produces an empty string if no &lt;code&gt;@{push}&lt;/code&gt; ref is configured.</source>
          <target state="translated">表示された参照の &lt;code&gt;@{push}&lt;/code&gt; 位置を表すローカル参照の名前。尊重 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; 、 &lt;code&gt;:rstrip&lt;/code&gt; 、 &lt;code&gt;:track&lt;/code&gt; 、 &lt;code&gt;:trackshort&lt;/code&gt; 、 &lt;code&gt;:remotename&lt;/code&gt; 、および &lt;code&gt;:remoteref&lt;/code&gt; オプションとして &lt;code&gt;upstream&lt;/code&gt; ありません。 &lt;code&gt;@{push}&lt;/code&gt; 参照が構成されていない場合、空の文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="25973fbcb02049e23787d52ffa23363b0665166c" translate="yes" xml:space="preserve">
          <source>The name of a new directory to clone into. The &quot;humanish&quot; part of the source repository is used if no directory is explicitly given (&lt;code&gt;repo&lt;/code&gt; for &lt;code&gt;/path/to/repo.git&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; for &lt;code&gt;host.xz:foo/.git&lt;/code&gt;). Cloning into an existing directory is only allowed if the directory is empty.</source>
          <target state="translated">クローンを作成する新しいディレクトリの名前。ディレクトリが明示的に指定されていない場合、ソース・リポジトリの「humanish」部分が使用される（ &lt;code&gt;repo&lt;/code&gt; 用 &lt;code&gt;/path/to/repo.git&lt;/code&gt; および &lt;code&gt;foo&lt;/code&gt; のため &lt;code&gt;host.xz:foo/.git&lt;/code&gt; ）。既存のディレクトリへのクローン作成は、ディレクトリが空の場合にのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="3c836d4cc86fbcc3a897aa8fab973465c40a1899" translate="yes" xml:space="preserve">
          <source>The name of an existing branch already in fast-import&amp;rsquo;s internal branch table. If fast-import doesn&amp;rsquo;t know the name, it&amp;rsquo;s treated as a SHA-1 expression.</source>
          <target state="translated">高速インポートの内部ブランチテーブルに既に存在する既存のブランチの名前。高速インポートで名前がわからない場合は、SHA-1式として扱われます。</target>
        </trans-unit>
        <trans-unit id="c21a579b2f8550495cd7f286a4f77b45b3df2f6e" translate="yes" xml:space="preserve">
          <source>The name of an existing branch to rename.</source>
          <target state="translated">名前を変更する既存のブランチの名前。</target>
        </trans-unit>
        <trans-unit id="b35cfa9e6735c6918643ac8769ab4e5dd81020f0" translate="yes" xml:space="preserve">
          <source>The name of an external credential helper, and any associated options. If the helper name is not an absolute path, then the string &lt;code&gt;git
credential-&lt;/code&gt; is prepended. The resulting string is executed by the shell (so, for example, setting this to &lt;code&gt;foo --option=bar&lt;/code&gt; will execute &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; via the shell. See the manual of specific helpers for examples of their use.</source>
          <target state="translated">外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が絶対パスでない場合、文字列 &lt;code&gt;git credential-&lt;/code&gt; が先頭に追加されます。結果の文字列はシェルによって実行されます（たとえば、これを &lt;code&gt;foo --option=bar&lt;/code&gt; に設定すると、シェルを介して &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; が実行されます。使用例については、特定のヘルパーのマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7efaaad02f8c0d5eaaddaa5b6f8a8113410c8ef1" translate="yes" xml:space="preserve">
          <source>The name of one of the following can be used instead of a URL as &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; 引数として、URLの代わりに次のいずれかの名前を使用できます。</target>
        </trans-unit>
        <trans-unit id="f54520854ea19fafb55997c9840c558f7f80fed9" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the object that is replaced. The content of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the replacement object.</source>
          <target state="translated">&lt;code&gt;replace&lt;/code&gt; 参照の名前は、置換されるオブジェクトのSHA-1です。 &lt;code&gt;replace&lt;/code&gt; 参照の内容は、置換オブジェクトのSHA-1です。</target>
        </trans-unit>
        <trans-unit id="117daad0c937bbfd67b26eaa98382dde664a6203" translate="yes" xml:space="preserve">
          <source>The name of the branch to create or delete. The new branch name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a branch name.</source>
          <target state="translated">作成または削除するブランチの名前。新しいブランチ名は、&lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]で&lt;/a&gt;定義されたすべてのチェックに合格する必要があります。これらのチェックの一部は、ブランチ名で許可される文字を制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="f40b450a4e1f94bf798289a960712dae0a6f632b" translate="yes" xml:space="preserve">
          <source>The name of the client can be given to &lt;code&gt;git p4&lt;/code&gt; in multiple ways. The variable &lt;code&gt;git-p4.client&lt;/code&gt; takes precedence if it exists. Otherwise, normal p4 mechanisms of determining the client are used: environment variable &lt;code&gt;P4CLIENT&lt;/code&gt;, a file referenced by &lt;code&gt;P4CONFIG&lt;/code&gt;, or the local host name.</source>
          <target state="translated">クライアントの名前は &lt;code&gt;git p4&lt;/code&gt; に複数の方法で指定できます。変数 &lt;code&gt;git-p4.client&lt;/code&gt; が存在する場合は、それが優先されます。それ以外の場合は、クライアントを決定する通常のp4メカニズムが使用されます：環境変数 &lt;code&gt;P4CLIENT&lt;/code&gt; 、 &lt;code&gt;P4CONFIG&lt;/code&gt; によって参照されるファイル、またはローカルホスト名。</target>
        </trans-unit>
        <trans-unit id="d25f4900ca4ac26428c337fc8a49a0fffaa87baa" translate="yes" xml:space="preserve">
          <source>The name of the current branch is stored in .git/HEAD.</source>
          <target state="translated">現在のブランチの名前は.git/headに格納されています。</target>
        </trans-unit>
        <trans-unit id="9192c74ec25457f29baaadaeb1d2b767ba20ddac" translate="yes" xml:space="preserve">
          <source>The name of the local ref being pushed, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the local ref is omitted.</source>
          <target state="translated">プッシュされるローカル参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。削除の場合、ローカル参照の名前は省略されます。</target>
        </trans-unit>
        <trans-unit id="61c75d700127b0c70d569d247bca51622e343006" translate="yes" xml:space="preserve">
          <source>The name of the local ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">更新されるローカルrefの名前から &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。</target>
        </trans-unit>
        <trans-unit id="40299b8374a45bc90296f421fddf5763cb8c6908" translate="yes" xml:space="preserve">
          <source>The name of the object to show. For a more complete list of ways to spell object names, see the &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">表示するオブジェクトの名前。オブジェクト名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;の「リビジョンの指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="15cfdda92a704493f44c3f6bda85fdb4fe25cc87" translate="yes" xml:space="preserve">
          <source>The name of the ref (the part after $GIT_DIR/). For a non-ambiguous short name of the ref append &lt;code&gt;:short&lt;/code&gt;. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode. If &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; (&lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt;) is appended, strips &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; slash-separated path components from the front (back) of the refname (e.g. &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). If &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is a negative number, strip as many path components as necessary from the specified end to leave &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; path components (e.g. &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;tags/foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). When the ref does not have enough components, the result becomes an empty string if stripping with positive &amp;lt;N&amp;gt;, or it becomes the full refname if stripping with negative &amp;lt;N&amp;gt;. Neither is an error.</source>
          <target state="translated">参照の名前（$ GIT_DIR /の後の部分）。 refの明確な短い名前の場合は、 &lt;code&gt;:short&lt;/code&gt; を追加します。オプションcore.warnAmbiguousRefsは、厳密な略語モードを選択するために使用されます。もし &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; （ &lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt; ）追加され、ストリップ &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; もしrefnameの前面（背面）からスラッシュで区切られたパスの成分（例えば &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; オン &lt;code&gt;refs/tags/foo&lt;/code&gt; &lt;code&gt;foo&lt;/code&gt; および &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; オン &lt;code&gt;refs/tags/foo&lt;/code&gt; に &lt;code&gt;refs&lt;/code&gt; ）。場合 &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; は残すために、指定された端部から必要な数のパス成分として負の数、ストリップである &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; パスコンポーネント（たとえば、 &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; は &lt;code&gt;refs/tags/foo&lt;/code&gt; を &lt;code&gt;tags/foo&lt;/code&gt; に &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; 、％（refname：rstrip = -1）は &lt;code&gt;refs/tags/foo&lt;/code&gt; を &lt;code&gt;refs&lt;/code&gt; に変換します）。refに十分なコンポーネントがない場合、正の&amp;lt;N&amp;gt;で削除すると結果は空の文字列になり、負の&amp;lt;N&amp;gt;で削除すると完全なrefnameになります。どちらもエラーではありません。</target>
        </trans-unit>
        <trans-unit id="d3667dc69f3d60260150d30873ae903291e9c610" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being fetched from, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the remote ref is &quot;(none)&quot;.</source>
          <target state="translated">フェッチされるリモートrefの名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。削除の場合、リモート参照の名前は「（なし）」です。</target>
        </trans-unit>
        <trans-unit id="f1e1380262032f81dbdd04e4a724dd0dac2f66a0" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">更新されるリモート参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。</target>
        </trans-unit>
        <trans-unit id="4541cb8cb079b50ad15e3d46e62cd66b37316e42" translate="yes" xml:space="preserve">
          <source>The name of the remote to create when cloning a repository. Defaults to &lt;code&gt;origin&lt;/code&gt;, and can be overridden by passing the &lt;code&gt;--origin&lt;/code&gt; command-line option to &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;.</source>
          <target state="translated">リポジトリのクローンを作成するときに作成するリモートの名前。デフォルトは &lt;code&gt;origin&lt;/code&gt; であり、 &lt;code&gt;--origin&lt;/code&gt; コマンドラインオプションを&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]に&lt;/a&gt;渡すことでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="cf1208454bdf4c7c5a0ab602103e6dd838ca212a" translate="yes" xml:space="preserve">
          <source>The name of the repository in gitweb is the path to its &lt;code&gt;$GIT_DIR&lt;/code&gt; (its object database) relative to &lt;code&gt;$projectroot&lt;/code&gt;. Therefore the repository $repo can be found at &quot;$projectroot/$repo&quot;.</source>
          <target state="translated">gitwebでリポジトリの名前は、そのパスである &lt;code&gt;$GIT_DIR&lt;/code&gt; に対して（そのオブジェクトデータベース） &lt;code&gt;$projectroot&lt;/code&gt; 。したがって、リポジトリ$ repoは &quot;$ projectroot / $ repo&quot;にあります。</target>
        </trans-unit>
        <trans-unit id="1b6cc45302b6351d18e813818cde0845c0a5a22a" translate="yes" xml:space="preserve">
          <source>The name of the tag to create, delete, or describe. The new tag name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a tag name.</source>
          <target state="translated">作成、削除、または説明するタグの名前。新しいタグ名は、&lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]で&lt;/a&gt;定義されたすべてのチェックに合格する必要があります。これらのチェックの一部は、タグ名で許可される文字を制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="964fd80a7ebc3b646125e059ac3c7f8c3a22061f" translate="yes" xml:space="preserve">
          <source>The named branches will be interpreted as if specified with the &lt;code&gt;-t&lt;/code&gt; option on the &lt;code&gt;git remote add&lt;/code&gt; command line.</source>
          <target state="translated">名前付きブランチは、 &lt;code&gt;git remote add&lt;/code&gt; コマンドラインの &lt;code&gt;-t&lt;/code&gt; オプションで指定されているかのように解釈されます。</target>
        </trans-unit>
        <trans-unit id="a7226417649eb7c8f42ca4934a290033c08aad1c" translate="yes" xml:space="preserve">
          <source>The names of objects to show (defaults to &lt;code&gt;HEAD&lt;/code&gt;). For a more complete list of ways to spell object names, see &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">表示するオブジェクトの名前（デフォルトは &lt;code&gt;HEAD&lt;/code&gt; ）。オブジェクト名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt;「改訂の指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="df439b2df93c9264d2652e8aa379f62f3b6ab5ac" translate="yes" xml:space="preserve">
          <source>The names of refs that are fetched, together with the object names they point at, are written to &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt;. This information may be used by scripts or other git commands, such as &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">フェッチされた参照の名前は、参照先のオブジェクト名とともに、 &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; に書き込まれます。この情報は、スクリプトまたは他のgitコマンド（&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;など）で使用できます。</target>
        </trans-unit>
        <trans-unit id="1b9c4b549f992b26edb42d00411780a65661d81d" translate="yes" xml:space="preserve">
          <source>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</source>
          <target state="translated">ネイティブトランスポート (つまり git://URL)は認証を行わないので、安全ではないネットワーク上では注意して使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="86d32cda4c46d201605240981feec896fb3daceb" translate="yes" xml:space="preserve">
          <source>The new branch head will point to this commit. It may be given as a branch name, a commit-id, or a tag. If this option is omitted, the current HEAD will be used instead.</source>
          <target state="translated">新しいブランチの先頭はこのコミットを指します。ブランチ名、commit-id、タグのいずれかを指定します。このオプションを省略した場合は、現在の HEAD が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="597e47a48a8bd8b3528838dd5cebedeb7b241f60" translate="yes" xml:space="preserve">
          <source>The new name for an existing branch. The same restrictions as for &amp;lt;branchname&amp;gt; apply.</source>
          <target state="translated">既存のブランチの新しい名前。&amp;lt;branchname&amp;gt;と同じ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="05a068e20a6ba11ea4fd1dbaef65a93e78041978" translate="yes" xml:space="preserve">
          <source>The new stash entry records the modified states only for the files that match the pathspec. The index entries and working tree files are then rolled back to the state in HEAD only for these files, too, leaving files that do not match the pathspec intact.</source>
          <target state="translated">新しいスタッシュエントリは、パス仕様にマッチしたファイルに対してのみ、変更された状態を記録します。インデックスエントリと作業ツリーファイルは、パス仕様にマッチしないファイルをそのままにして、これらのファイルだけがHEADの状態にロールバックされます。</target>
        </trans-unit>
        <trans-unit id="ade318097a09c67b5bdaa6c1344cf2a281d7cac8" translate="yes" xml:space="preserve">
          <source>The next parameter is the pattern. This option has to be used for patterns starting with &lt;code&gt;-&lt;/code&gt; and should be used in scripts passing user input to grep. Multiple patterns are combined by &lt;code&gt;or&lt;/code&gt;.</source>
          <target state="translated">次のパラメーターはパターンです。このオプションは &lt;code&gt;-&lt;/code&gt; で始まるパターンに使用する必要があり、ユーザー入力をgrepに渡すスクリプトで使用する必要があります。 &lt;code&gt;or&lt;/code&gt; 複数のパターンを組み合わせます。</target>
        </trans-unit>
        <trans-unit id="00f28e3b882b5553d45ceeb08082d3dcda522dd0" translate="yes" xml:space="preserve">
          <source>The next step of merging is to merge these three versions of the file, using 3-way merge. This is done by giving &lt;code&gt;git merge-one-file&lt;/code&gt; command as one of the arguments to &lt;code&gt;git merge-index&lt;/code&gt; command:</source>
          <target state="translated">マージの次のステップは、3方向マージを使用して、これらの3つのバージョンのファイルをマージすることです。これを行うには、 &lt;code&gt;git merge-one-file&lt;/code&gt; コマンドを &lt;code&gt;git merge-index&lt;/code&gt; コマンドの引数の1つとして指定します。</target>
        </trans-unit>
        <trans-unit id="c203649e7405cacf1f66f3229b4d864ccf1b5f34" translate="yes" xml:space="preserve">
          <source>The nonce string the process asked the signer to include in the push certificate. If this does not match the value recorded on the &quot;nonce&quot; header in the push certificate, it may indicate that the certificate is a valid one that is being replayed from a separate &quot;git push&quot; session.</source>
          <target state="translated">プロセスが署名者にプッシュ証明書に含めるよう求めた nonce 文字列。これがプッシュ証明書の &quot;nonce&quot; ヘッダに記録された値と一致しない場合は、その証明書が別の &quot;git push&quot; セッションで再生されたものであることを示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="a81eae6f204563324e9f0299e6e5a18af11339c2" translate="yes" xml:space="preserve">
          <source>The normal format target is a tradition printf format and similar to GIT_TRACE format. This format is enabled with the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable or the &lt;code&gt;trace2.normalTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">通常のフォーマットターゲットは従来のprintfフォーマットであり、GIT_TRACEフォーマットに類似しています。この形式は、 &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数または &lt;code&gt;trace2.normalTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="08867837836724d3f4c3cfbd7d03fa5d964eec62" translate="yes" xml:space="preserve">
          <source>The number of additional commits is the number of commits which would be displayed by &quot;git log v1.0.4..parent&quot;. The hash suffix is &quot;-g&quot; + unambiguous abbreviation for the tip commit of parent (which was &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt;). The &quot;g&quot; prefix stands for &quot;git&quot; and is used to allow describing the version of a software depending on the SCM the software is managed with. This is useful in an environment where people may use different SCMs.</source>
          <target state="translated">追加のコミットの数は、「git log v1.0.4..parent」によって表示されるコミットの数です。ハッシュサフィックスは、 &quot;-g&quot; +親のチップコミットの明確な略語（ &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt; でした）です。&quot;g&quot;プレフィックスは &quot;git&quot;を表し、ソフトウェアが管理されているSCMに応じて、ソフトウェアのバージョンを説明するために使用されます。これは、人々が異なるSCMを使用する可能性がある環境で役立ちます。</target>
        </trans-unit>
        <trans-unit id="83386653d6009935020ea78a4c28a793cc5fa198" translate="yes" xml:space="preserve">
          <source>The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1.</source>
          <target state="translated">リクエストにまたがって保持する curl セッションの数 (スロットにまたがってカウントされる)。http_cleanup()が起動されるまでは、curl_easy_cleanup()で終了しません。USE_CURL_MULTI が定義されていない場合、この値は 1 に制限されます。 デフォルトは 1 です。</target>
        </trans-unit>
        <trans-unit id="eb593ed0188a165abaa2fc9b58825ac993fcfa11" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">指定しない場合のデフォルトは diff.renameLimit の値です。この設定は、リネーム検出をオフにした場合には何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="b49ca7e6ecad75b8cf0b0ec3dcf469e017a13140" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection in &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; and &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. Defaults to the value of diff.renameLimit.</source>
          <target state="translated">&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;と&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]で&lt;/a&gt;名前変更の検出を実行するときに考慮するファイルの数。デフォルトはdiff.renameLimitの値です。</target>
        </trans-unit>
        <trans-unit id="62caddb975571c60931b3e5e41910f9ec3dfea6e" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing the copy/rename detection; equivalent to the &lt;code&gt;git diff&lt;/code&gt; option &lt;code&gt;-l&lt;/code&gt;. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">コピー/名前変更の検出を実行するときに考慮するファイルの数。 &lt;code&gt;git diff&lt;/code&gt; オプション &lt;code&gt;-l&lt;/code&gt; と同等です。名前の変更の検出がオフになっている場合、この設定は効果がありません。</target>
        </trans-unit>
        <trans-unit id="f40a726880d5eda55c8da498a0add02c8ea2a7b1" translate="yes" xml:space="preserve">
          <source>The number of push options given on the command line of &lt;code&gt;git push --push-option=...&lt;/code&gt; can be read from the environment variable &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt;, and the options themselves are found in &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt;, &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt;,&amp;hellip;​ If it is negotiated to not use the push options phase, the environment variables will not be set. If the client selects to use push options, but doesn&amp;rsquo;t transmit any, the count variable will be set to zero, &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git push --push-option=...&lt;/code&gt; のコマンドラインで指定されたプッシュオプションの数は、環境変数 &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt; から読み取ることができ、オプション自体は &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt; 、 &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt; にあります...交渉されていない場合プッシュオプションフェーズを使用すると、環境変数は設定されません。クライアントがプッシュオプションを使用することを選択したが、何も送信しない場合、カウント変数はゼロ（ &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt; )に設定されます。</target>
        </trans-unit>
        <trans-unit id="c5ad10bd3ab58adc794f2122271c46d58529bef4" translate="yes" xml:space="preserve">
          <source>The number of spaces between columns. One space by default.</source>
          <target state="translated">列と列の間のスペースの数。デフォルトではスペースは1つです。</target>
        </trans-unit>
        <trans-unit id="911462b0802b22317c5a57a0a0510dbf0c397a66" translate="yes" xml:space="preserve">
          <source>The number of submodules fetched at the same time. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">同時にフェッチされたサブモジュールの数。デフォルトは &lt;code&gt;submodule.fetchJobs&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="34de3b8749bfae0c14ff8d34783f05c9920748b5" translate="yes" xml:space="preserve">
          <source>The object can be a blob or a submodule commit. It implies the &lt;code&gt;-t&lt;/code&gt; option in &lt;code&gt;git-log&lt;/code&gt; to also find trees.</source>
          <target state="translated">オブジェクトはblobまたはサブモジュールコミットにすることができます。これは、 &lt;code&gt;git-log&lt;/code&gt; で &lt;code&gt;-t&lt;/code&gt; オプションを使用してツリーも検索することを意味します。</target>
        </trans-unit>
        <trans-unit id="2794f5933199b4937a09c41b8d049f6b88620c25" translate="yes" xml:space="preserve">
          <source>The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of parent commits.</source>
          <target state="translated">オブジェクトデータベースには、主に 3 つのタイプのオブジェクトが含まれています。ファイルデータを保持する blob、ディレクトリ階層を構築するために blob や他のツリーを指す tree、そしてそれぞれが 1 つのツリーといくつかの数の親コミットを参照する commits です。</target>
        </trans-unit>
        <trans-unit id="b5ea163b65a2243d9fc238d7c50700c517adc350" translate="yes" xml:space="preserve">
          <source>The object database is the rather elegant system used to store the history of your project&amp;mdash;​files, directories, and commits.</source>
          <target state="translated">オブジェクトデータベースは、プロジェクトの履歴（ファイル、ディレクトリ、コミット）を保存するために使用されるかなり洗練されたシステムです。</target>
        </trans-unit>
        <trans-unit id="db080c7937810b605e4381605a2e18077b89e3c0" translate="yes" xml:space="preserve">
          <source>The object name (aka SHA-1). For a non-ambiguous abbreviation of the object name append &lt;code&gt;:short&lt;/code&gt;. For an abbreviation of the object name with desired length append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt;, where the minimum length is MINIMUM_ABBREV. The length may be exceeded to ensure unique object names.</source>
          <target state="translated">オブジェクト名（別名SHA-1）。オブジェクト名の明確な省略形の場合は、 &lt;code&gt;:short&lt;/code&gt; を追加します。必要な長さのオブジェクト名の省略形の場合、append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt; 。最小長はMINIMUM_ABBREVです。一意のオブジェクト名を確保するために、長さを超える場合があります。</target>
        </trans-unit>
        <trans-unit id="b335d1a75376848bee9affb50a6203b316fcc02d" translate="yes" xml:space="preserve">
          <source>The object referenced by &amp;lt;src&amp;gt; is used to update the &amp;lt;dst&amp;gt; reference on the remote side. Whether this is allowed depends on where in &lt;code&gt;refs/*&lt;/code&gt; the &amp;lt;dst&amp;gt; reference lives as described in detail below, in those sections &quot;update&quot; means any modifications except deletes, which as noted after the next few sections are treated differently.</source>
          <target state="translated">&amp;lt;src&amp;gt;によって参照されるオブジェクトは、リモート側の&amp;lt;dst&amp;gt;参照を更新するために使用されます。これが許可されるかどうかは、 &lt;code&gt;refs/*&lt;/code&gt; のどこに&amp;lt;dst&amp;gt;参照が存在するかによって異なります。これらのセクションでは、「更新」とは、削除以外のすべての変更を意味します。</target>
        </trans-unit>
        <trans-unit id="afdbad7acf93ca3457880eb431fd58ab07141e11" translate="yes" xml:space="preserve">
          <source>The object table is actually a hashtable keyed on the object name (the unique SHA-1). This storage configuration allows fast-import to reuse an existing or already written object and avoid writing duplicates to the output packfile. Duplicate blobs are surprisingly common in an import, typically due to branch merges in the source.</source>
          <target state="translated">オブジェクトテーブルは、実際にはオブジェクト名(一意のSHA-1)をキーにしたハッシュテーブルです。このストレージ構成により、fast-importでは既存または既に書き込まれたオブジェクトを再利用し、出力パックファイルへの重複書き込みを回避することができます。重複したブロブはインポートでは驚くほどよく見られますが、これは一般的にソースのブランチマージが原因です。</target>
        </trans-unit>
        <trans-unit id="0b16e9c4d73790474d293fcd4d96547c235d7d1f" translate="yes" xml:space="preserve">
          <source>The object that the new tag will refer to, usually a commit. Defaults to HEAD.</source>
          <target state="translated">新しいタグが参照するオブジェクト、通常はコミット。デフォルトは HEAD です。</target>
        </trans-unit>
        <trans-unit id="5468420c6f62137502c6bb00574138b237765047" translate="yes" xml:space="preserve">
          <source>The object type may be a blob, representing the contents of a file, or another tree, representing the contents of a subdirectory. Since trees and blobs, like all other objects, are named by the SHA-1 hash of their contents, two trees have the same SHA-1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical. This allows Git to quickly determine the differences between two related tree objects, since it can ignore any entries with identical object names.</source>
          <target state="translated">オブジェクトタイプは、ファイルの内容を表すブロブであったり、サブディレクトリの内容を表す別のツリーであったりします。ツリーや blob は、他のすべてのオブジェクトと同様に内容の SHA-1 ハッシュによって名前が付けられるので、二つのツリーが同じ SHA-1 名を持つのは、その内容 (再帰的に、すべてのサブディレクトリの内容を含む)が同一である場合に限られます。これにより、Git は同じオブジェクト名のエントリを無視することができるので、関連する二つのツリーオブジェクト間の違いを素早く判断することができます。</target>
        </trans-unit>
        <trans-unit id="abf9c48e6cb6157bcc4ecdd7fbfd1167ee2a4bc5" translate="yes" xml:space="preserve">
          <source>The object types in some more detail:</source>
          <target state="translated">オブジェクトの種類をもう少し詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="1aa11fdf087f0d8d0d32eb67b923b0efa29ecf46" translate="yes" xml:space="preserve">
          <source>The objects are output in the order in which they are found in the index file, which should be (in a correctly constructed file) sorted by object id.</source>
          <target state="translated">オブジェクトはインデックスファイルの中で見つかった順番で出力されますが、これは(正しく構築されたファイルでは)オブジェクトIDでソートされているはずです。</target>
        </trans-unit>
        <trans-unit id="113c9617d3615ff46d1de3788621403d384bc970" translate="yes" xml:space="preserve">
          <source>The official repository of the &lt;code&gt;git gui&lt;/code&gt; project can be found at:</source>
          <target state="translated">&lt;code&gt;git gui&lt;/code&gt; プロジェクトの公式リポジトリは次の場所にあります。</target>
        </trans-unit>
        <trans-unit id="d2925f4342d92a06228b4eeddfbffd0ada540f91" translate="yes" xml:space="preserve">
          <source>The one commit in this list that is not related to CMake may very well have been motivated by working on fixing all those bugs introduced by switching to CMake, but it addresses a different concern. To split this branch into two topic branches, the todo list could be edited like this:</source>
          <target state="translated">このリストの中で CMake に関連していないコミットは、CMake への切り替えによって導入されたすべてのバグを修正する作業をすることによって動機づけられたものかもしれませんが、それは別の懸念事項に対応しています。このブランチを 2 つのトピックブランチに分割するには、todo リストを次のように編集します。</target>
        </trans-unit>
        <trans-unit id="680930999bd0e3bf9880124c135a89bca3a329f3" translate="yes" xml:space="preserve">
          <source>The oneline descriptions are purely for your pleasure; &lt;code&gt;git rebase&lt;/code&gt; will not look at them but at the commit names (&quot;deadbee&quot; and &quot;fa1afe1&quot; in this example), so do not delete or edit the names.</source>
          <target state="translated">onelineの説明は、純粋にあなたの喜びのためのものです。 &lt;code&gt;git rebase&lt;/code&gt; はそれらを調べませんが、コミット名（この例では「deadbee」と「fa1afe1」）を見るので、名前を削除または編集しないでください。</target>
        </trans-unit>
        <trans-unit id="b174b5f513a45da66bee660cec63368b38af2a1f" translate="yes" xml:space="preserve">
          <source>The only difference between this command and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt; is that they use slightly different output formats, and this command exists only for backward compatibility to support existing scripts, and provide a more familiar command name for people coming from other SCM systems.</source>
          <target state="translated">このコマンドと&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]&lt;/a&gt;の唯一の違いは、わずかに異なる出力形式を使用することです。このコマンドは、既存のスクリプトをサポートするための下位互換性のためにのみ存在し、他のSCMシステムから来た人々により馴染みのあるコマンド名を提供します。</target>
        </trans-unit>
        <trans-unit id="82fa629da6adc18439c1d9295d8f644e8391fd9b" translate="yes" xml:space="preserve">
          <source>The only safe place to make these changes is on the remote repository (i.e., the Git server), usually in the &lt;code&gt;pre-receive&lt;/code&gt; hook or in a continuous integration (CI) system. These are the locations in which policy can be enforced effectively.</source>
          <target state="translated">これらの変更を行うための唯一の安全な場所は、リモートリポジトリ（つまり、Gitサーバー）、通常は &lt;code&gt;pre-receive&lt;/code&gt; フックまたは継続的インテグレーション（CI）システムです。これらは、ポリシーを効果的に実施できる場所です。</target>
        </trans-unit>
        <trans-unit id="90482aceb580582ec33d188b8fb1bca29f8136a1" translate="yes" xml:space="preserve">
          <source>The option can have the following values, defaulting to &lt;code&gt;group&lt;/code&gt; if no value is given:</source>
          <target state="translated">オプションには次の値を指定できます。値を指定しない場合、デフォルトで &lt;code&gt;group&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="72a352b7174eb63582b749d1295b267e0dae9887" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;limit&amp;gt; is useful in cases where your topic is based on other work that is not in upstream. Expanding on the previous example, this might look like:</source>
          <target state="translated">オプションの&amp;lt;limit&amp;gt;は、トピックが上流にない他の作業に基づいている場合に役立ちます。前の例を拡張すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4136e1c0c625091f77db10ec0b76e55e39fdb1b6" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;style&amp;gt; argument can be either &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;deep&lt;/code&gt;. &lt;code&gt;shallow&lt;/code&gt; threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the &lt;code&gt;--in-reply-to&lt;/code&gt;, and the first patch mail, in this order. &lt;code&gt;deep&lt;/code&gt; threading makes every mail a reply to the previous one.</source>
          <target state="translated">オプションの&amp;lt;style&amp;gt;引数は、 &lt;code&gt;shallow&lt;/code&gt; または &lt;code&gt;deep&lt;/code&gt; です。 &lt;code&gt;shallow&lt;/code&gt; スレッドは、すべてのメールをシリーズのヘッドへの返信にします。ヘッドは、カバーレター、 &lt;code&gt;--in-reply-to&lt;/code&gt; in -reply-to、および最初のパッチメールからこの順序で選択されます。 &lt;code&gt;deep&lt;/code&gt; スレッドは、すべてのメールを前のメールへの返信にします。</target>
        </trans-unit>
        <trans-unit id="3dd98bdacd886ba292b303baaba2ecefebed8bab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; command indicates the encoding of the commit message. Most commits are UTF-8 and the encoding is omitted, but this allows importing commit messages into git without first reencoding them.</source>
          <target state="translated">オプションの &lt;code&gt;encoding&lt;/code&gt; コマンドは、コミットメッセージのエンコーディングを示します。ほとんどのコミットはUTF-8であり、エンコードは省略されていますが、これにより、コミットメッセージを最初に再エンコードせずにgitにインポートできます。</target>
        </trans-unit>
        <trans-unit id="f1f596d4ea27770161ef3ea6df226eac8321e34f" translate="yes" xml:space="preserve">
          <source>The optional GPG signature of the tag.</source>
          <target state="translated">タグのオプションのGPG署名。</target>
        </trans-unit>
        <trans-unit id="b0ae75c1b10bf71d7e20ef9926e29585fa74a2e0" translate="yes" xml:space="preserve">
          <source>The optional argument &amp;lt;path&amp;gt; is the relative location for the cloned submodule to exist in the superproject. If &amp;lt;path&amp;gt; is not given, the canonical part of the source repository is used (&quot;repo&quot; for &quot;/path/to/repo.git&quot; and &quot;foo&quot; for &quot;host.xz:foo/.git&quot;). If &amp;lt;path&amp;gt; exists and is already a valid Git repository, then it is staged for commit without cloning. The &amp;lt;path&amp;gt; is also used as the submodule&amp;rsquo;s logical name in its configuration entries unless &lt;code&gt;--name&lt;/code&gt; is used to specify a logical name.</source>
          <target state="translated">オプションの引数&amp;lt;path&amp;gt;は、スーパープロジェクトに存在するクローンサブモジュールの相対場所です。 &amp;lt;path&amp;gt;が指定されていない場合、ソースリポジトリの正規部分が使用されます（ &quot;/path/to/repo.git&quot;の場合は &quot;repo&quot;、 &quot;host.xz：foo / .git&quot;の場合は &quot;foo&quot;）。 &amp;lt;path&amp;gt;が存在し、すでに有効なGitリポジトリである場合は、複製せずにコミットするためにステージングされます。 &lt;code&gt;--name&lt;/code&gt; を使用して論理名を指定しない限り、&amp;lt;path&amp;gt;は、その構成エントリでサブモジュールの論理名としても使用されます。</target>
        </trans-unit>
        <trans-unit id="476c5c2c4870d6be72c4d31b42e1450136c51807" translate="yes" xml:space="preserve">
          <source>The optional configuration variable &lt;code&gt;core.excludesFile&lt;/code&gt; indicates a path to a file containing patterns of file names to exclude, similar to &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;. Patterns in the exclude file are used in addition to those in &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;.</source>
          <target state="translated">オプションの構成変数 &lt;code&gt;core.excludesFile&lt;/code&gt; は、 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; と同様に、除外するファイル名のパターンを含むファイルへのパスを示します。 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; パターンに加えて、除外ファイルのパターンが使用されます。</target>
        </trans-unit>
        <trans-unit id="ad80c43bd988ae6e6061dfab8a056d2afaee7691" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;--contains&lt;/code&gt;, &lt;code&gt;--no-contains&lt;/code&gt;, &lt;code&gt;--merged&lt;/code&gt; and &lt;code&gt;--no-merged&lt;/code&gt; serve four related but different purposes:</source>
          <target state="translated">オプション &lt;code&gt;--contains&lt;/code&gt; 、 &lt;code&gt;--no-contains&lt;/code&gt; no -contains、-- &lt;code&gt;--merged&lt;/code&gt; 、および &lt;code&gt;--no-merged&lt;/code&gt; は、4つの関連する異なる目的を果たします。</target>
        </trans-unit>
        <trans-unit id="081a3bdc8213b4774c97cebf32978af69c3476cb" translate="yes" xml:space="preserve">
          <source>The order of stages 1, 2 and 3 (hence the order of three &amp;lt;tree-ish&amp;gt; command-line arguments) are significant when you start a 3-way merge with an index file that is already populated. Here is an outline of how the algorithm works:</source>
          <target state="translated">ステージ1、2、3の順序（したがって、3つの&amp;lt;tree-ish&amp;gt;コマンドライン引数の順序）は、すでに入力されているインデックスファイルで3方向マージを開始するときに重要です。アルゴリズムの仕組みの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3fb57cf5101f783ba73fc6eba17ed42ef2940627" translate="yes" xml:space="preserve">
          <source>The order of the flags used to matter, but not anymore.</source>
          <target state="translated">以前は旗の順番が重要だったが、今は違う。</target>
        </trans-unit>
        <trans-unit id="32a54a6aa8ff67e3d76c47c6fabd2affc1e5cbb5" translate="yes" xml:space="preserve">
          <source>The origin of lines is automatically followed across whole-file renames (currently there is no option to turn the rename-following off). To follow lines moved from one file to another, or to follow lines that were copied and pasted from another file, etc., see the &lt;code&gt;-C&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt; options.</source>
          <target state="translated">行の起点は、ファイル全体の名前変更全体で自動的に追跡されます（現在、名前変更フォローをオフにするオプションはありません）。あるファイルから別のファイルに移動した行を追跡したり、別のファイルからコピーして貼り付けた行を追跡したりするには、 &lt;code&gt;-C&lt;/code&gt; および &lt;code&gt;-M&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b66619a4ae8f145d6aac4431781b08d6ac86597a" translate="yes" xml:space="preserve">
          <source>The origin revision can be changed with the &quot;--origin&quot; option.</source>
          <target state="translated">オリジンリビジョンは&quot;--origin &quot;オプションで変更できます。</target>
        </trans-unit>
        <trans-unit id="617fe8d1d55cfe9ccc09f76fcfa190410b239da3" translate="yes" xml:space="preserve">
          <source>The original format used by Greg Kroah-Hartman&amp;rsquo;s &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; script</source>
          <target state="translated">Greg Kroah-Hartmanの &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; スクリプトで使用される元の形式</target>
        </trans-unit>
        <trans-unit id="a7a5cdcdcd4d6fcaaf02e53acebd8443c9b015da" translate="yes" xml:space="preserve">
          <source>The original job of &lt;code&gt;git rev-parse&lt;/code&gt; is now taken by the function &lt;code&gt;setup_revisions()&lt;/code&gt;, which parses the revisions and the common command-line options for the revision walker. This information is stored in the struct &lt;code&gt;rev_info&lt;/code&gt; for later consumption. You can do your own command-line option parsing after calling &lt;code&gt;setup_revisions()&lt;/code&gt;. After that, you have to call &lt;code&gt;prepare_revision_walk()&lt;/code&gt; for initialization, and then you can get the commits one by one with the function &lt;code&gt;get_revision()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rev-parse&lt;/code&gt; の元のジョブは現在、関数 &lt;code&gt;setup_revisions()&lt;/code&gt; によって行われ、リビジョンとリビジョンウォーカーの一般的なコマンドラインオプションを解析します。この情報は、後で使用できるように &lt;code&gt;rev_info&lt;/code&gt; に格納されます。 &lt;code&gt;setup_revisions()&lt;/code&gt; を呼び出した後、独自のコマンドラインオプション解析を行うことができます。その後、初期化のために &lt;code&gt;prepare_revision_walk()&lt;/code&gt; を呼び出す必要があります。その後、関数 &lt;code&gt;get_revision()&lt;/code&gt; を使用してコミットを1つずつ取得できます。</target>
        </trans-unit>
        <trans-unit id="4c9da327e28b59015cec84abd98a33aec635328d" translate="yes" xml:space="preserve">
          <source>The original tags are not deleted, but can be overwritten; use &quot;--tag-name-filter cat&quot; to simply update the tags. In this case, be very careful and make sure you have the old tags backed up in case the conversion has run afoul.</source>
          <target state="translated">元のタグは削除されませんが、上書きすることができます;&quot;--tag-name-filter cat &quot;を使用して、単純にタグを更新します。この場合、非常に注意して、変換が失敗した場合に備えて古いタグをバックアップしておくことを確認してください。</target>
        </trans-unit>
        <trans-unit id="6c2cf73d4477ea65ac2368f08dedbcc07c9eafb4" translate="yes" xml:space="preserve">
          <source>The other nice thing with test suites, is that when you have one, you already know how to test for bad behavior. So you can use this knowledge to create a new test case for &quot;git bisect&quot; when it appears that there is a regression. So it will be easier to bisect the bug and fix it. And then you can add the test case you just created to your test suite.</source>
          <target state="translated">テストスイートのもうひとつの良いところは、テストスイートを持っているときには、悪い動作をテストする方法をすでに知っているということです。その知識を使って、リグレッションが発生したときに &quot;git bisect&quot; 用の新しいテストケースを作成することができます。そうすれば、バグをbisectして修正するのが簡単になります。そして、作成したテストケースをテストスイートに追加することができます。</target>
        </trans-unit>
        <trans-unit id="94bda500b4b5c47f0218909469e6ab7f1eee52b6" translate="yes" xml:space="preserve">
          <source>The other way to drive the bisection process is to tell &quot;git bisect&quot; to launch a script or command at each bisection step to know if the current commit is &quot;good&quot; or &quot;bad&quot;. To do that, we use the &quot;git bisect run&quot; command. For example:</source>
          <target state="translated">もうひとつのバイセクション処理を駆動させる方法は、&quot;git bisect&quot; にバイセクションの各ステップでスクリプトやコマンドを起動させ、現在のコミットが &quot;good&quot; か &quot;bad&quot; かを知るように指示することです。そのためには、&quot;git bisect run&quot; コマンドを使います。例えば、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="013b9f528101f55f667633859403afae697697c4" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable (see below). If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">出力形式は、マシンが解析できるように変更されています（以下を参照）。 &lt;code&gt;--stdin&lt;/code&gt; も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="4ebdc78d172a0b82e38a898aa2ae716344def4d5" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable. If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">出力形式は、マシンが解析できるように変更されています。 &lt;code&gt;--stdin&lt;/code&gt; も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="885a3d9b027501a3f7ddd2554d827f984cacfcf5" translate="yes" xml:space="preserve">
          <source>The output format is similar to the Porcelain format, but it does not contain the actual lines from the file that is being annotated.</source>
          <target state="translated">出力フォーマットは Porcelain フォーマットに似ていますが、注釈を付けようとしているファイルの実際の行は含まれていません。</target>
        </trans-unit>
        <trans-unit id="16ca2e6d144e9c4d47f91cfe57ded6c4b6f874af" translate="yes" xml:space="preserve">
          <source>The output from this command is designed to be used as a commit template comment. The default, long format, is designed to be human readable, verbose and descriptive. Its contents and format are subject to change at any time.</source>
          <target state="translated">このコマンドの出力は、コミットテンプレートのコメントとして使用するように設計されています。デフォルトの長いフォーマットは、人間が読みやすく、冗長で説明的なものになるように設計されています。その内容と形式はいつでも変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="467b04ab4f0f42e5eb4db50995625d7a06a04bbc" translate="yes" xml:space="preserve">
          <source>The output is in the format: &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">出力は、 &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt; という形式です。</target>
        </trans-unit>
        <trans-unit id="297e105083265b9b5df9c784faa30006468bc5fd" translate="yes" xml:space="preserve">
          <source>The output is of the form: &amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</source>
          <target state="translated">出力の形式は次のとおりです。&amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</target>
        </trans-unit>
        <trans-unit id="00d47eecfb8e7c432b9a2a4461da0aa0b0a14445" translate="yes" xml:space="preserve">
          <source>The output is the new tag&amp;rsquo;s &amp;lt;object&amp;gt; identifier.</source>
          <target state="translated">出力は、新しいタグの&amp;lt;object&amp;gt;識別子です。</target>
        </trans-unit>
        <trans-unit id="c209f5f99a30592095be06f60778bfc6143218e8" translate="yes" xml:space="preserve">
          <source>The output of &quot;git fetch&quot; depends on the transport method used; this section describes the output when fetching over the Git protocol (either locally or via ssh) and Smart HTTP protocol.</source>
          <target state="translated">ここでは、Git プロトコル (ローカルまたは ssh 経由)および Smart HTTP プロトコルでフェッチした場合の出力について説明します。</target>
        </trans-unit>
        <trans-unit id="249df455a76d6d8a4ee813f24ba8c68836888f67" translate="yes" xml:space="preserve">
          <source>The output of &quot;git push&quot; depends on the transport method used; this section describes the output when pushing over the Git protocol (either locally or via ssh).</source>
          <target state="translated">git push&quot; の出力は、使用するトランスポート方法に依存します。ここでは、Git プロトコルでプッシュしたときの出力について説明します (ローカルでも ssh 経由でも)。</target>
        </trans-unit>
        <trans-unit id="2012a50a7ce95c41c81b087cc42352c50e07741b" translate="yes" xml:space="preserve">
          <source>The output of ls-refs is as follows:</source>
          <target state="translated">ls-refs の出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c9897264787fe814346af61567793268dae2ec95" translate="yes" xml:space="preserve">
          <source>The output of the &lt;code&gt;range-diff&lt;/code&gt; command is subject to change. It is intended to be human-readable porcelain output, not something that can be used across versions of Git to get a textually stable &lt;code&gt;range-diff&lt;/code&gt; (as opposed to something like the &lt;code&gt;--stable&lt;/code&gt; option to &lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id[1]&lt;/a&gt;). There&amp;rsquo;s also no equivalent of &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt; for &lt;code&gt;range-diff&lt;/code&gt;, the output is not intended to be machine-readable.</source>
          <target state="translated">&lt;code&gt;range-diff&lt;/code&gt; コマンドの出力は変更される可能性があります。人間が読める磁器の出力であることが意図されており、Gitのバージョン間でテキスト的に安定した &lt;code&gt;range-diff&lt;/code&gt; を取得するために使用できるものではありません（&lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id [1]&lt;/a&gt;の &lt;code&gt;--stable&lt;/code&gt; オプションのようなものとは対照的） 。のは同等もありません&lt;a href=&quot;git-apply&quot;&gt;[1]-適用のgit&lt;/a&gt;のための &lt;code&gt;range-diff&lt;/code&gt; 、出力は機械可読であることを意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="acccdb81223db3ebfe60a727e12d9a4ed87719fe" translate="yes" xml:space="preserve">
          <source>The output order is determined by the order of glob patterns in &amp;lt;orderfile&amp;gt;. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.</source>
          <target state="translated">出力順序は、&amp;lt;orderfile&amp;gt;内のglobパターンの順序によって決まります。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターン（最初ではない）に一致するパス名を持つすべてのファイルが次に出力されます。すべてのパターンに一致しないパス名を持つすべてのファイルは、ファイルの最後に暗黙的なすべて一致パターンがあるかのように、最後に出力されます。複数のパス名が同じランクを持っている場合（それらは同じパターンに一致しますが、以前のパターンには一致しません）、互いに対するそれらの出力順序は通常の順序です。</target>
        </trans-unit>
        <trans-unit id="70ec2e58d64c53608a589a3f892a41e430e23c0e" translate="yes" xml:space="preserve">
          <source>The overall time needed to compute this algorithm is the time needed to compute n+m commit diffs and then n*m diffs of patches, plus the time needed to compute the least-cost assignment between n and m diffs. Git uses an implementation of the Jonker-Volgenant algorithm to solve the assignment problem, which has cubic runtime complexity. The matching found in this case will look like this:</source>
          <target state="translated">このアルゴリズムを計算するのに必要な全体的な時間は、n+m 個のコミット差分を計算してから n*m 個のパッチ差分を計算するのに必要な時間に加えて、n 個の差分と m 個の差分の間で最小コストの代入を計算するのに必要な時間を加えたものです。Git はこの代入問題を解くために Jonker-Volgenant アルゴリズムの実装を使用しています。この場合に見つかったマッチングは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f8c05a901b25f6434301621f82a267dcb0caae54" translate="yes" xml:space="preserve">
          <source>The p4 changes will be created as the user invoking &lt;code&gt;git p4 submit&lt;/code&gt;. The &lt;code&gt;--preserve-user&lt;/code&gt; option will cause ownership to be modified according to the author of the Git commit. This option requires admin privileges in p4, which can be granted using &lt;code&gt;p4 protect&lt;/code&gt;.</source>
          <target state="translated">ユーザーが &lt;code&gt;git p4 submit&lt;/code&gt; を呼び出すと、p4の変更が作成されます。 &lt;code&gt;--preserve-user&lt;/code&gt; オプションは、コミットのGitの作者によると、所有権が変更されます。このオプションには、p4での管理者権限が必要です。これは、 &lt;code&gt;p4 protect&lt;/code&gt; を使用して付与できます。</target>
        </trans-unit>
        <trans-unit id="bc53387773cbb38b899a330a03a788e5288eab48" translate="yes" xml:space="preserve">
          <source>The p4 client specification is maintained with the &lt;code&gt;p4 client&lt;/code&gt; command and contains among other fields, a View that specifies how the depot is mapped into the client repository. The &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; commands can consult the client spec when given the &lt;code&gt;--use-client-spec&lt;/code&gt; option or when the useClientSpec variable is true. After &lt;code&gt;git p4 clone&lt;/code&gt;, the useClientSpec variable is automatically set in the repository configuration file. This allows future &lt;code&gt;git p4 submit&lt;/code&gt; commands to work properly; the submit command looks only at the variable and does not have a command-line option.</source>
          <target state="translated">p4 client仕様は &lt;code&gt;p4 client&lt;/code&gt; コマンドで維持され、他のフィールドの中で、デポがクライアントリポジトリにどのようにマップされるかを指定するビューを含みます。 &lt;code&gt;clone&lt;/code&gt; と &lt;code&gt;sync&lt;/code&gt; 与えられたときのコマンドは、クライアントの仕様に相談することができます &lt;code&gt;--use-client-spec&lt;/code&gt; オプションまたはときuseClientSpec変数が真であるが。後 &lt;code&gt;git p4 clone&lt;/code&gt; 、useClientSpec変数は自動的にリポジトリの設定ファイルに設定されています。これにより、将来の &lt;code&gt;git p4 submit&lt;/code&gt; コマンドが正しく機能するようになります。 submitコマンドは変数のみを調べ、コマンドラインオプションはありません。</target>
        </trans-unit>
        <trans-unit id="9fec68b06723905b09b9270262e6a13c1b490876" translate="yes" xml:space="preserve">
          <source>The p4 depot path argument to &lt;code&gt;git p4 sync&lt;/code&gt; and &lt;code&gt;git p4 clone&lt;/code&gt; can be one or more space-separated p4 depot paths, with an optional p4 revision specifier on the end:</source>
          <target state="translated">&lt;code&gt;git p4 sync&lt;/code&gt; および &lt;code&gt;git p4 clone&lt;/code&gt; のp4デポパス引数は、スペースで区切られた1つ以上のp4デポパスにすることができ、最後にオプションのp4リビジョン指定子を使用できます。</target>
        </trans-unit>
        <trans-unit id="d877dea1de89fdb5a15efd47a5debfe5403b96f4" translate="yes" xml:space="preserve">
          <source>The pack-indexes (.idx files) remain in the pack directory so we can delete the MIDX file, set core.midx to false, or downgrade without any loss of information.</source>
          <target state="translated">パックディレクトリにはパックインデックス(.idxファイル)が残っているので、MIDXファイルを削除したり、core.midxをfalseにしたり、ダウングレードしても情報を失うことはありません。</target>
        </trans-unit>
        <trans-unit id="933f30be1e83e4fe09dc8528b693f5b5a75f065d" translate="yes" xml:space="preserve">
          <source>The packed archive format (.pack) is designed to be self-contained so that it can be unpacked without any further information. Therefore, each object that a delta depends upon must be present within the pack.</source>
          <target state="translated">パックされたアーカイブフォーマット(.pack)は、それ以上の情報がなくても解凍できるように、自己完結型に設計されています。したがって、デルタが依存する各オブジェクトはパック内に存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="75cd7427877d4a48fded775aaaba114771e37304" translate="yes" xml:space="preserve">
          <source>The packfile(s) created by fast-import do not encourage good disk access patterns. This is caused by fast-import writing the data in the order it is received on standard input, while Git typically organizes data within packfiles to make the most recent (current tip) data appear before historical data. Git also clusters commits together, speeding up revision traversal through better cache locality.</source>
          <target state="translated">fast-import で作成されたパックファイルは、ディスクアクセスのパターンが良くありません。これは、fast-import が標準入力で受け取った順にデータを書き込むのに対し、Git は一般的にパックファイル内でデータを整理し、最新の (現在の)データが過去のデータの前に表示されるようにしているためです。また、Git はコミットをまとめてクラスター化し、キャッシュの位置関係を改善することでリビジョンの移動を高速化しています。</target>
        </trans-unit>
        <trans-unit id="73715b9a828b5f7ca9623cd366d376d487c8e126" translate="yes" xml:space="preserve">
          <source>The partial clone feature records special &quot;promisor&quot; packs that may point to objects that are not stored locally, but available on request to a server. The multi-pack-index does not currently track these promisor packs.</source>
          <target state="translated">パーシャルクローン機能は、ローカルに保存されていないが、サーバーへのリクエストに応じて利用可能なオブジェクトを指す可能性のある特別な「プロミザ」パックを記録します。multi-pack-indexは現在、これらのプロモーターパックを追跡していません。</target>
        </trans-unit>
        <trans-unit id="608e992a19f0287b5b2e4cbdc92416d882bd253c" translate="yes" xml:space="preserve">
          <source>The password to use when logging in to the server.</source>
          <target state="translated">サーバーにログインする際に使用するパスワードです。</target>
        </trans-unit>
        <trans-unit id="f899bc9ba76fee3c960f01f1f955c5a4bf020e98" translate="yes" xml:space="preserve">
          <source>The patch extracted from e-mail.</source>
          <target state="translated">メールから抽出したパッチ。</target>
        </trans-unit>
        <trans-unit id="621265bbad5d0651c63283720f8a5ccddfdeeb61" translate="yes" xml:space="preserve">
          <source>The patch is expected to be inline, directly following the message. Any line that is of the form:</source>
          <target state="translated">パッチは、メッセージの直後にあるインラインであることが期待されます。形式のものであれば、どの行でも</target>
        </trans-unit>
        <trans-unit id="eedf9ed2547b7a76bcd6fb69785bf954af8d224f" translate="yes" xml:space="preserve">
          <source>The patch itself does not apply cleanly. That is &lt;code&gt;bad&lt;/code&gt; but does not have much to do with your MUA. You might want to rebase the patch with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; before regenerating it in this case.</source>
          <target state="translated">パッチ自体はきれいに適用されません。それは &lt;code&gt;bad&lt;/code&gt; ことですが、MUAとはあまり関係がありません。この場合、パッチを再生成する前に、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]を使用&lt;/a&gt;してパッチをリベースすることができます。</target>
        </trans-unit>
        <trans-unit id="c9ecbf09d9172bac5285d567a6e1031058a01024" translate="yes" xml:space="preserve">
          <source>The patch produced by &lt;code&gt;git format-patch&lt;/code&gt; is in UNIX mailbox format, with a fixed &quot;magic&quot; time stamp to indicate that the file is output from format-patch rather than a real mailbox, like so:</source>
          <target state="translated">&lt;code&gt;git format-patch&lt;/code&gt; によって生成されたパッチはUNIXメールボックス形式であり、ファイルが実際のメールボックスではなくformat-patchから出力されることを示すために、次のように「マジック」タイムスタンプが固定されています。</target>
        </trans-unit>
        <trans-unit id="7072603eb0a607d061c366f3e4a9cba6cffbd377" translate="yes" xml:space="preserve">
          <source>The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the &quot;DESCRIPTION&quot; section of &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;).</source>
          <target state="translated">パスは絶対パスでも相対パスでもかまいません。相対パスは、フックが実行されるディレクトリからの相対パスと見なされます（&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;の「説明」セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="6ccace0f35f0f4e5cab0e8cffbdf924135579b2e" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;false&quot;; this is specified by listing the name of the attribute prefixed with a dash &lt;code&gt;-&lt;/code&gt; in the attribute list.</source>
          <target state="translated">パスには、特別な値「false」の属性があります。これは、属性リストにダッシュ &lt;code&gt;-&lt;/code&gt; が前に付いた属性の名前をリストすることによって指定されます。</target>
        </trans-unit>
        <trans-unit id="96cc920a42ed7b296307f756480841c1366430ee" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;true&quot;; this is specified by listing only the name of the attribute in the attribute list.</source>
          <target state="translated">パスは特別な値 &quot;true &quot;を持つ属性を持っています;これは、属性リストに属性名のみをリストアップすることで指定されます。</target>
        </trans-unit>
        <trans-unit id="f3d259c7dde8e69cba5e131da2dcac58054c5102" translate="yes" xml:space="preserve">
          <source>The path has the attribute with specified string value; this is specified by listing the name of the attribute followed by an equal sign &lt;code&gt;=&lt;/code&gt; and its value in the attribute list.</source>
          <target state="translated">パスには、指定された文字列値を持つ属性があります。これは、属性名の後に等号 &lt;code&gt;=&lt;/code&gt; とその値を属性リストにリストすることによって指定されます。</target>
        </trans-unit>
        <trans-unit id="9a89a340b481b20bfabef5b1bcb5482c1e173e57" translate="yes" xml:space="preserve">
          <source>The path to a list of object names (i.e. one unabbreviated SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. On versions of Git 2.20 and later comments (&lt;code&gt;#&lt;/code&gt;), empty lines, and any leading and trailing whitespace is ignored. Everything but a SHA-1 per line will error out on older versions.</source>
          <target state="translated">致命的ではない方法で壊れていることがわかっているため無視する必要があるオブジェクト名のリスト（つまり、1行に1つの省略されていないSHA-1）へのパス。Git 2.20以降のバージョンのコメント（ &lt;code&gt;#&lt;/code&gt; ）では、空の行、および先頭と末尾の空白は無視されます。古いバージョンでは、1行あたりのSHA-1以外はすべてエラーになります。</target>
        </trans-unit>
        <trans-unit id="66bacdcfb6546645ce51a1173beecea036fe198b" translate="yes" xml:space="preserve">
          <source>The path to higher software quality is significantly improved software testing.</source>
          <target state="translated">ソフトウェアの品質向上への道は、ソフトウェアのテストを大幅に改善しています。</target>
        </trans-unit>
        <trans-unit id="a62f8e77f19dbb91947274f4224d3b2000deceef" translate="yes" xml:space="preserve">
          <source>The path with which the credential will be used. E.g., for accessing a remote https repository, this will be the repository&amp;rsquo;s path on the server.</source>
          <target state="translated">資格情報が使用されるパス。たとえば、リモートhttpsリポジトリにアクセスする場合、これはサーバー上のリポジトリのパスになります。</target>
        </trans-unit>
        <trans-unit id="75a6542b84624c1ec2a2753cb02bac2dc12deb38" translate="yes" xml:space="preserve">
          <source>The path within the &amp;lt;repository&amp;gt; that the action is performed on, for those actions that require it.</source>
          <target state="translated">アクションが実行される&amp;lt;repository&amp;gt;内のパス。</target>
        </trans-unit>
        <trans-unit id="42c5355b2496aa717e00373f3c96e2614e271309" translate="yes" xml:space="preserve">
          <source>The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see &lt;code&gt;curl(1)&lt;/code&gt;). NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set.</source>
          <target state="translated">以前に保存されたcookie行を含むファイルのパス名。サーバーと一致する場合、Git httpセッションで使用する必要があります。Cookieを読み取るファイルのファイル形式は、プレーンHTTPヘッダーまたはNetscape / Mozilla Cookieファイル形式である必要があります（ &lt;code&gt;curl(1)&lt;/code&gt; を参照）。http.cookieFileで指定されたファイルは、http.saveCookiesが設定されていない限り、入力としてのみ使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7529cc524422963391df3cb62b329f757e09e898" translate="yes" xml:space="preserve">
          <source>The pathname of a file that stores a client certificate to use to authenticate with an HTTPS proxy. Can be overridden by the &lt;code&gt;GIT_PROXY_SSL_CERT&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPSプロキシでの認証に使用するクライアント証明書を格納するファイルのパス名。 &lt;code&gt;GIT_PROXY_SSL_CERT&lt;/code&gt; 環境変数でオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="5cd72157b1a828f8662a88c728954dfe8fd532c2" translate="yes" xml:space="preserve">
          <source>The pathname of a file that stores a private key to use to authenticate with an HTTPS proxy. Can be overridden by the &lt;code&gt;GIT_PROXY_SSL_KEY&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPSプロキシでの認証に使用する秘密鍵を格納するファイルのパス名。 &lt;code&gt;GIT_PROXY_SSL_KEY&lt;/code&gt; 環境変数でオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="cdb891f79fbec881d22446bf8cf74ef0a3e451e0" translate="yes" xml:space="preserve">
          <source>The paths mentioned in the output, unlike many other Git commands, are made relative to the current directory if you are working in a subdirectory (this is on purpose, to help cutting and pasting). See the status.relativePaths config option below.</source>
          <target state="translated">出力に記載されているパスは、他の多くの Git コマンドとは異なり、サブディレクトリで作業をしている場合はカレントディレクトリからの相対パスになります (これは、カットアンドペーストを容易にするためです)。以下の status.relativePaths 設定オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae851010ea42ad696931dec57e7a58d6d0655b81" translate="yes" xml:space="preserve">
          <source>The pathspecs are used to limit the world diff operates in. They remove the filepairs outside the specified sets of pathnames. E.g. If the input set of filepairs included:</source>
          <target state="translated">pathspecs は diff が動作する世界を制限するために使用されます。指定されたパス名のセットの外にあるファイルペアを削除します。例えば、入力ファイルペアが含まれている場合。</target>
        </trans-unit>
        <trans-unit id="a35fe6e03b5cf8e686f61a60362e87d3cf937722" translate="yes" xml:space="preserve">
          <source>The pattern &quot;foo/*&quot;, matches &quot;foo/test.json&quot; (a regular file), &quot;foo/bar&quot; (a directory), but it does not match &quot;foo/bar/hello.c&quot; (a regular file), as the asterisk in the pattern does not match &quot;bar/hello.c&quot; which has a slash in it.</source>
          <target state="translated">パターン &quot;foo/*&quot; は、&quot;foo/test.json&quot; (通常のファイル)、&quot;foo/bar&quot; (ディレクトリ)にマッチしますが、&quot;foo/bar/hello.c&quot; (通常のファイル)にはマッチしません。</target>
        </trans-unit>
        <trans-unit id="472a6ff8d8e6e0153adf76e5ad83f89df7215b9f" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;doc/frotz&lt;/code&gt; and &lt;code&gt;/doc/frotz&lt;/code&gt; have the same effect in any &lt;code&gt;.gitignore&lt;/code&gt; file. In other words, a leading slash is not relevant if there is already a middle slash in the pattern.</source>
          <target state="translated">パターン &lt;code&gt;doc/frotz&lt;/code&gt; および &lt;code&gt;/doc/frotz&lt;/code&gt; は、どの &lt;code&gt;.gitignore&lt;/code&gt; ファイルでも同じ効果があります。つまり、パターンの途中にスラッシュがすでにある場合は、先頭のスラッシュは関係ありません。</target>
        </trans-unit>
        <trans-unit id="7f3e3da749b8fed6cc11585c7aa5dbe77eee53ad" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;foo/&lt;/code&gt; will match a directory &lt;code&gt;foo&lt;/code&gt; and paths underneath it, but will not match a regular file or a symbolic link &lt;code&gt;foo&lt;/code&gt; (this is consistent with the way how pathspec works in general in Git)</source>
          <target state="translated">パターン &lt;code&gt;foo/&lt;/code&gt; は、ディレクトリ &lt;code&gt;foo&lt;/code&gt; およびその下のパスに一致しますが、通常のファイルまたはシンボリックリンク &lt;code&gt;foo&lt;/code&gt; には一致しません（これは、Gitでのpathspecの一般的な動作方法と一致しています）</target>
        </trans-unit>
        <trans-unit id="32166ee916b00891724c1bd52223b5e1e2d10da0" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;hello.*&lt;/code&gt; matches any file or folder whose name begins with &lt;code&gt;hello&lt;/code&gt;. If one wants to restrict this only to the directory and not in its subdirectories, one can prepend the pattern with a slash, i.e. &lt;code&gt;/hello.*&lt;/code&gt;; the pattern now matches &lt;code&gt;hello.txt&lt;/code&gt;, &lt;code&gt;hello.c&lt;/code&gt; but not &lt;code&gt;a/hello.java&lt;/code&gt;.</source>
          <target state="translated">パターン &lt;code&gt;hello.*&lt;/code&gt; 、名前が &lt;code&gt;hello&lt;/code&gt; で始まるすべてのファイルまたはフォルダーに一致します。これをサブディレクトリではなくディレクトリのみに制限したい場合は、パターンの前にスラッシュを &lt;code&gt;/hello.*&lt;/code&gt; ことができます。つまり、/hello . *です。パターンは &lt;code&gt;hello.txt&lt;/code&gt; 、 &lt;code&gt;hello.c&lt;/code&gt; に一致しますが、 &lt;code&gt;a/hello.java&lt;/code&gt; には一致しません。</target>
        </trans-unit>
        <trans-unit id="b35cb663783a3682a66157f3dc9fd508efdfceba" translate="yes" xml:space="preserve">
          <source>The pattern can contain standard globbing wildcards and two additional ones, &lt;code&gt;**/&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;, that can match multiple path components. Please refer to &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt; for details. For convenience:</source>
          <target state="translated">パターンには、標準のグロビングワイルドカードと、複数のパスコンポーネントに一致する2つの追加の &lt;code&gt;**/&lt;/code&gt; および &lt;code&gt;/**&lt;/code&gt; を含めることができます。詳細は&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;を参照してください。便宜上：</target>
        </trans-unit>
        <trans-unit id="ae88d32c3f9079756948f2fdc8ae4c4c2e834b93" translate="yes" xml:space="preserve">
          <source>The patterns given should not begin with &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, or &lt;code&gt;refs/remotes&lt;/code&gt; when applied to &lt;code&gt;--branches&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt;, or &lt;code&gt;--remotes&lt;/code&gt;, respectively, and they must begin with &lt;code&gt;refs/&lt;/code&gt; when applied to &lt;code&gt;--glob&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt;. If a trailing &lt;code&gt;/*&lt;/code&gt; is intended, it must be given explicitly.</source>
          <target state="translated">指定されたパターンは、それぞれ &lt;code&gt;--branches&lt;/code&gt; 、-- &lt;code&gt;--tags&lt;/code&gt; 、または &lt;code&gt;--remotes&lt;/code&gt; に適用される場合、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、または &lt;code&gt;refs/remotes&lt;/code&gt; で始まる必要がなく、-- &lt;code&gt;--glob&lt;/code&gt; に適用される場合は &lt;code&gt;refs/&lt;/code&gt; 始まる必要がありますまたは &lt;code&gt;--all&lt;/code&gt; 。末尾の &lt;code&gt;/*&lt;/code&gt; が意図されている場合は、明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="86b0de7f6b1176e8c07c5aaa523447c3abd4915b" translate="yes" xml:space="preserve">
          <source>The performance format target (PERF) is a column-based format to replace GIT_TRACE_PERFORMANCE and is suitable for development and testing, possibly to complement tools like gprof. This format is enabled with the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable or the &lt;code&gt;trace2.perfTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">パフォーマンスフォーマットターゲット（PERF）は、GIT_TRACE_PERFORMANCEに代わる列ベースのフォーマットであり、おそらくgprofなどのツールを補完するための開発およびテストに適しています。この形式は、 &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; 環境変数または &lt;code&gt;trace2.perfTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="506071bbd9d0908b14e8f015ca1b0ff23e4ec21e" translate="yes" xml:space="preserve">
          <source>The performance of git-filter-branch is glacially slow; its design makes it impossible for a backward-compatible implementation to ever be fast:</source>
          <target state="translated">git-filter-branch のパフォーマンスは氷河のように遅く、その設計上、下位互換性のある実装を高速にすることは不可能です。</target>
        </trans-unit>
        <trans-unit id="d698b970e30734158c98cc5647b57a259a47bb36" translate="yes" xml:space="preserve">
          <source>The person who put a piece of code into Git.</source>
          <target state="translated">Gitにコードの一部を入れた人。</target>
        </trans-unit>
        <trans-unit id="81b84527afb0ae2e697e75bbd7638af25fa12741" translate="yes" xml:space="preserve">
          <source>The pickaxe search is described in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; (the description of &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; option, which refers to pickaxe entry in &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore[7]&lt;/a&gt; for more details).</source>
          <target state="translated">つるはし検索は&lt;a href=&quot;git-log&quot;&gt;git-log [1]で&lt;/a&gt;説明されています（詳細については&lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore [7]の&lt;/a&gt;つるはしエントリを参照する &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; オプションの説明）。</target>
        </trans-unit>
        <trans-unit id="525e6a0e6ee3d9fa31ab39c46532aa0c693111e1" translate="yes" xml:space="preserve">
          <source>The placeholders are:</source>
          <target state="translated">プレースホルダは</target>
        </trans-unit>
        <trans-unit id="1651136b42ed906ec527c0b5bb6ead2e015774c3" translate="yes" xml:space="preserve">
          <source>The point of this helper is to reduce the number of times you must type your username or password. For example:</source>
          <target state="translated">このヘルパーのポイントは、ユーザー名やパスワードを入力する回数を減らすことです。例えば</target>
        </trans-unit>
        <trans-unit id="c89cea9d29e269d3d21a2bb103d39e43b1e539d2" translate="yes" xml:space="preserve">
          <source>The porcelain format</source>
          <target state="translated">磁器の形式</target>
        </trans-unit>
        <trans-unit id="26e08a1995b67cc0010521ba6bed170106483645" translate="yes" xml:space="preserve">
          <source>The porcelain format generally suppresses commit information that has already been seen. For example, two lines that are blamed to the same commit will both be shown, but the details for that commit will be shown only once. This is more efficient, but may require more state be kept by the reader. The &lt;code&gt;--line-porcelain&lt;/code&gt; option can be used to output full commit information for each line, allowing simpler (but less efficient) usage like:</source>
          <target state="translated">磁器フォーマットは、一般に、すでに見られているコミット情報を抑制します。たとえば、同じコミットのせいである2行が両方とも表示されますが、そのコミットの詳細は1回だけ表示されます。これはより効率的ですが、より多くの状態をリーダーが保持する必要がある場合があります。 &lt;code&gt;--line-porcelain&lt;/code&gt; オプションのような単純な（しかし低効率）使用を可能にする、フルライン毎にコミット情報を出力するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="20c54b7279b5d1b2be6928d44083be1fd00dfbb8" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are only present if and only if the value is true. The first attribute of a worktree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="translated">磁器の形式には、属性ごとに1つの線があります。属性は、1つのスペースで区切られたラベルと値とともにリストされます。ブール属性（ &lt;code&gt;bare&lt;/code&gt; や &lt;code&gt;detached&lt;/code&gt; など）はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。ワークツリーの最初の属性は常に &lt;code&gt;worktree&lt;/code&gt; で、空の行はレコードの終わりを示します。例えば：</target>
        </trans-unit>
        <trans-unit id="d78141a7bccc3a1873780a422f8d41a19ce92e1b" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are present only if the value is true. The first attribute of a working tree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="translated">磁器のフォーマットには、属性ごとに1行あります。属性は、単一のスペースで区切られたラベルと値でリストされます。ブール属性（ &lt;code&gt;bare&lt;/code&gt; や &lt;code&gt;detached&lt;/code&gt; など）はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。作業ツリーの最初の属性は常に &lt;code&gt;worktree&lt;/code&gt; であり、空の行はレコードの終わりを示します。例えば：</target>
        </trans-unit>
        <trans-unit id="a362940b066b853917862099c8e9ab263cba72b1" translate="yes" xml:space="preserve">
          <source>The port number to bind the gitweb httpd to. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">gitweb httpdをバインドするポート番号。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0cecf31c324042fa16f4839249194885b3982bae" translate="yes" xml:space="preserve">
          <source>The port number to bind the httpd to. (Default: 1234)</source>
          <target state="translated">httpd をバインドするポート番号。(デフォルト:1234)</target>
        </trans-unit>
        <trans-unit id="735bfd35b5b101e4c116696c3cd1ebf6bc58faa9" translate="yes" xml:space="preserve">
          <source>The possible options are:</source>
          <target state="translated">考えられる選択肢は</target>
        </trans-unit>
        <trans-unit id="8bc0e360ec6eefb74bc5a1aed65f13e846b6d915" translate="yes" xml:space="preserve">
          <source>The preferred strategy for rolling out a version bump (whether whole repository or for a single file) is to teach git to read the new format, and allow writing the new format with a config switch or command line option (for experimentation or for those who do not care about backwards compatibility with older gits). Then after a long period to allow the reading capability to become common, we may switch to writing the new format by default.</source>
          <target state="translated">バージョンバンプを(リポジトリ全体であろうとひとつのファイルであろうと)展開する際の好ましい方法は、git に新しいフォーマットを読み込ませることを教えて、新しいフォーマットを書き込めるようにすることです(実験用、あるいは古い gits との下位互換性を気にしない人のために)。そして、長い期間をかけて読み込み機能が一般的になるようにした後で、新しいフォーマットをデフォルトで書くように切り替えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="adf8f6f66c16d1ab5dcd5c39342b75931e439ba4" translate="yes" xml:space="preserve">
          <source>The prefix ability basically makes it trivial to use &lt;code&gt;git checkout-index&lt;/code&gt; as an &quot;export as tree&quot; function. Just read the desired tree into the index, and do:</source>
          <target state="translated">プレフィックス機能により、基本的には &lt;code&gt;git checkout-index&lt;/code&gt; を「ツリーとしてエクスポート」機能として使用するのが簡単になります。目的のツリーをインデックスに読み込んで、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0f1fc4f35ab6b79f4468bd7525c0542dc9193da5" translate="yes" xml:space="preserve">
          <source>The previously introduced &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; is just a wrapper for &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">以前に導入された&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;は、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]の&lt;/a&gt;単なるラッパーです。</target>
        </trans-unit>
        <trans-unit id="675ae216ecd575fef2e1ffa9eadeda52bdab6e90" translate="yes" xml:space="preserve">
          <source>The primary problem with rewriting the history of a branch has to do with merging. Suppose somebody fetches your branch and merges it into their branch, with a result something like this:</source>
          <target state="translated">ブランチの履歴を書き換える際の主な問題は、マージに関係しています。誰かがあなたのブランチを取得して自分のブランチにマージしたとしましょう。</target>
        </trans-unit>
        <trans-unit id="ff3dc4a94f1f540e3dd725f6eef6c2d405d85a87" translate="yes" xml:space="preserve">
          <source>The primary tool we&amp;rsquo;ve been using to create commits is &lt;code&gt;git-commit
-a&lt;/code&gt;, which creates a commit including every change you&amp;rsquo;ve made to your working tree. But what if you want to commit changes only to certain files? Or only certain changes to certain files?</source>
          <target state="translated">コミットの作成に使用している主なツールは &lt;code&gt;git-commit -a&lt;/code&gt; 、作業ツリーに加えたすべての変更を含むコミットを作成します。しかし、特定のファイルのみに変更をコミットしたい場合はどうでしょうか？または特定のファイルへの特定の変更のみですか？</target>
        </trans-unit>
        <trans-unit id="bc32172ebad82b3a8531284b76fc91d0e2655fc8" translate="yes" xml:space="preserve">
          <source>The protection it offers over &lt;code&gt;--force&lt;/code&gt; is ensuring that subsequent changes your work wasn&amp;rsquo;t based on aren&amp;rsquo;t clobbered, but this is trivially defeated if some background process is updating refs in the background. We don&amp;rsquo;t have anything except the remote tracking info to go by as a heuristic for refs you&amp;rsquo;re expected to have seen &amp;amp; are willing to clobber.</source>
          <target state="translated">&lt;code&gt;--force&lt;/code&gt; を介して提供する保護は、作業のベースになっていない後続の変更が破棄されないことを保証しますが、バックグラウンドプロセスがバックグラウンドで参照を更新している場合、これは簡単に無効になります。私たちは、あなたが見たはずであり、そしてより大まかに進んでいると思われる参照のヒューリスティックとして、リモート追跡情報以外に何も持っていません。</target>
        </trans-unit>
        <trans-unit id="c8ef7004934ae749808b9e22322b2c11275f98e4" translate="yes" xml:space="preserve">
          <source>The protocol names currently used by git are:</source>
          <target state="translated">現在gitで使われているプロトコル名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="19913c2c5a680884fd5ab271ea84dfe92e10bf53" translate="yes" xml:space="preserve">
          <source>The protocol over which the credential will be used (e.g., &lt;code&gt;https&lt;/code&gt;).</source>
          <target state="translated">資格情報が使用されるプロトコル（例： &lt;code&gt;https&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="27c53e4d1c63b3496c93b1976851fe0522937712" translate="yes" xml:space="preserve">
          <source>The provided options must not contain a NUL or LF character.</source>
          <target state="translated">提供されるオプションには、NUL または LF 文字を含んではいけません。</target>
        </trans-unit>
        <trans-unit id="5fb1f43ddd5fc4b8ac18d086f82e6f88c9ed5855" translate="yes" xml:space="preserve">
          <source>The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.</source>
          <target state="translated">gitignore files の目的は、Git によって追跡されていない特定のファイルが追跡されないようにすることです。</target>
        </trans-unit>
        <trans-unit id="a2b9675d20ab3c1e80e15b296d660914f6ea2131" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not suppressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.</source>
          <target state="translated">フックの目的は、メッセージファイルを適切に編集することであり、 &lt;code&gt;--no-verify&lt;/code&gt; オプションによって抑制されません。ゼロ以外の終了は、フックの失敗を意味し、コミットを中止します。pre-commitフックの代わりとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="96e3995f595001b3f723f5fc30a3546a03e6b50b" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not supressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. This hook is called even if &lt;code&gt;--prepare-p4-only&lt;/code&gt; is set.</source>
          <target state="translated">フックの目的は、メッセージファイルを所定の場所で編集することであり、 &lt;code&gt;--no-verify&lt;/code&gt; オプションによって抑制されることはありません。このフックは、 &lt;code&gt;--prepare-p4-only&lt;/code&gt; が設定されている場合でも呼び出されます。</target>
        </trans-unit>
        <trans-unit id="383a661ab7ffdec395082f1f22f245f53263885b" translate="yes" xml:space="preserve">
          <source>The push URL of a remote repository. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">リモートリポジトリのプッシュURL。&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8cd29a2b80ae7f4721c7a9c69324052af609357" translate="yes" xml:space="preserve">
          <source>The push done by the other person updated the branch that used to point at commit X to point at commit A. It is a fast-forward.</source>
          <target state="translated">相手が行ったプッシュは、コミットXを指していたブランチをコミットAを指していたブランチに更新したものです。</target>
        </trans-unit>
        <trans-unit id="79a20eedac198c71849aef6d1fe1606ea1ee319f" translate="yes" xml:space="preserve">
          <source>The quilt series file.</source>
          <target state="translated">キルトシリーズのファイルです。</target>
        </trans-unit>
        <trans-unit id="eb2f9ed5ec284eab8396a9b582f3da5582d364ca" translate="yes" xml:space="preserve">
          <source>The raw output format from &quot;git-diff-index&quot;, &quot;git-diff-tree&quot;, &quot;git-diff-files&quot; and &quot;git diff --raw&quot; are very similar.</source>
          <target state="translated">git-diff-index」、「git-diff-tree」、「git-diff-files」、「git diff --raw」の生の出力形式は非常によく似ています。</target>
        </trans-unit>
        <trans-unit id="a6ab1028c44c2d54846a9217b4a7ad959d178f38" translate="yes" xml:space="preserve">
          <source>The reachability bitmap is currently paired directly with a single packfile, using the pack-order as the object order to hopefully compress the bitmaps well using run-length encoding. This could be extended to pair a reachability bitmap with a multi-pack-index. If the multi-pack-index is extended to store a &quot;stable object order&quot; (a function Order(hash) = integer that is constant for a given hash, even as the multi-pack-index is updated) then a reachability bitmap could point to a multi-pack-index and be updated independently.</source>
          <target state="translated">リーチャビリティビットマップは現在、単一のパックファイルと直接ペアリングされており、パックオーダーをオブジェクトオーダーとして使用することで、ランレングスエンコーディングを使用してビットマップをうまく圧縮できることを期待している。これを拡張して、リーチャビリティ・ビットマップとマルチパックインデックスをペアにすることができる。multi-pack-index を拡張して「安定したオブジェクト順序」(関数 Order(hash)=整数で、multi-pack-index が更新されても、与えられたハッシュに対して一定である)を格納するようにすれば、リーチャビリティビットマップは multi-pack-index を指し示し、独立して更新することができるようになる。</target>
        </trans-unit>
        <trans-unit id="0aca04dff2f76e52dde4dcdd1542bfe4e1470100" translate="yes" xml:space="preserve">
          <source>The reason fast-import uses &lt;code&gt;:&lt;/code&gt; to denote a mark reference is this character is not legal in a Git branch name. The leading &lt;code&gt;:&lt;/code&gt; makes it easy to distinguish between the mark 42 (&lt;code&gt;:42&lt;/code&gt;) and the branch 42 (&lt;code&gt;42&lt;/code&gt; or &lt;code&gt;refs/heads/42&lt;/code&gt;), or an abbreviated SHA-1 which happened to consist only of base-10 digits.</source>
          <target state="translated">fast-importが使用する理由 &lt;code&gt;:&lt;/code&gt; マーク参照を示すために、この文字はGitブランチ名では無効です。先頭 &lt;code&gt;:&lt;/code&gt; は、マーク42（ &lt;code&gt;:42&lt;/code&gt; ）とブランチ42（ &lt;code&gt;42&lt;/code&gt; または &lt;code&gt;refs/heads/42&lt;/code&gt; ）、またはたまたま10桁のみで構成される省略されたSHA-1を簡単に区別できるようにします。</target>
        </trans-unit>
        <trans-unit id="1aba410e8fcfe74102eea2fcf73898889acee3ed" translate="yes" xml:space="preserve">
          <source>The reason it doesn&amp;rsquo;t error out when provided without &lt;code&gt;--prune&lt;/code&gt; or its config versions is for flexibility of the configured versions, and to maintain a 1=1 mapping between what the command line flags do, and what the configuration versions do.</source>
          <target state="translated">&lt;code&gt;--prune&lt;/code&gt; またはその構成バージョンなしで提供された場合にエラーにならない理由は、構成されたバージョンの柔軟性と、コマンドラインフラグの機能と構成バージョンの機能との間の1 = 1マッピングを維持するためです。</target>
        </trans-unit>
        <trans-unit id="b2defd752d90b2a93e28eb3efe0e516f3fc264fc" translate="yes" xml:space="preserve">
          <source>The rebase will stop where &lt;code&gt;pick&lt;/code&gt; has been replaced with &lt;code&gt;edit&lt;/code&gt; or when a step in the list fails to mechanically resolve conflicts and needs your help. When you are done editing and/or resolving conflicts you can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;. If you decide that things are getting too hairy, you can always bail out with &lt;code&gt;git rebase
--abort&lt;/code&gt;. Even after the rebase is complete, you can still recover the original branch by using the &lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;.</source>
          <target state="translated">リベースは、 &lt;code&gt;pick&lt;/code&gt; が &lt;code&gt;edit&lt;/code&gt; 置き換えられた場合、またはリスト内のステップが競合を機械的に解決できず、支援が必要な場合に停止します。競合の編集や解決が完了したら、 &lt;code&gt;git rebase --continue&lt;/code&gt; を続行できます。物事が毛むくじゃらしすぎていると判断した場合は、いつでも &lt;code&gt;git rebase --abort&lt;/code&gt; 救済できます。リベースが完了した後でも、&lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;を使用して元のブランチを回復できます。</target>
        </trans-unit>
        <trans-unit id="939cf091c711a461fc7775d9278b48a4457f30c1" translate="yes" xml:space="preserve">
          <source>The ref namespace is hierarchical. Different subhierarchies are used for different purposes (e.g. the &lt;code&gt;refs/heads/&lt;/code&gt; hierarchy is used to represent local branches).</source>
          <target state="translated">ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます（たとえば、 &lt;code&gt;refs/heads/&lt;/code&gt; 階層はローカルブランチを表すために使用されます）。</target>
        </trans-unit>
        <trans-unit id="d11d2f57237e560f1ae2f7da112ae694568b2d78" translate="yes" xml:space="preserve">
          <source>The ref which the given symbolic ref refers to. If not a symbolic ref, nothing is printed. Respects the &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; options in the same way as &lt;code&gt;refname&lt;/code&gt; above.</source>
          <target state="translated">指定されたシンボリック参照が参照する参照。シンボリック参照でない場合、何も出力されません。上記の &lt;code&gt;refname&lt;/code&gt; と同じ方法で、 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; 、および &lt;code&gt;:rstrip&lt;/code&gt; オプションを尊重します。</target>
        </trans-unit>
        <trans-unit id="09256802b46aa557905f47df9fc0a1148d341199" translate="yes" xml:space="preserve">
          <source>The reflogs are kept by default for 30 days, after which they may be pruned. See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt; and &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt; to learn how to control this pruning, and see the &quot;SPECIFYING REVISIONS&quot; section of &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for details.</source>
          <target state="translated">reflogはデフォルトで30日間保持され、その後、整理されます。このプルーニングの制御方法については、&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt;と&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt;を参照してください。詳細については、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;の「リビジョンの指定」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="29e87ce112fa8f38582e71025c0e3c162626939f" translate="yes" xml:space="preserve">
          <source>The refname parameter is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 arguments are the object names for the refname before and after the update. Note that the hook is called before the refname is updated, so either sha1-old is 0{40} (meaning there is no such ref yet), or it should match what is recorded in refname.</source>
          <target state="translated">refname パラメータは $GIT_DIR からの相対的なものです;例えば、マスターヘッドの場合は &quot;refs/heads/master&quot; となります。二つの sha1 引数は、更新前と更新後の refname のオブジェクト名です。フックは refname が更新される前に呼ばれることに注意してください。(まだそのような ref が存在しないことを意味します)、または refname に記録されているものと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="21810fe3549bedbdcfb85519d93701f4c1ec8042" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs that were created will have sha1-old equal to 0{40}, while refs that were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">refname の値は $GIT_DIR からの相対的なもので、例えばマスターヘッドの場合は &quot;refs/heads/master&quot; となります。各 refname の前にある二つの sha1 値は、更新前と更新後の refname のオブジェクト名です。作成されたrefはsha1-oldが0{40}になり、削除されたrefはsha1-newが0{40}になります。</target>
        </trans-unit>
        <trans-unit id="f7cd6bb7198b77eda24e90f3bdabb1a4fb56aeb0" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs to be created will have sha1-old equal to 0{40}, while refs to be deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">refname の値は $GIT_DIR からの相対的なもので、例えばマスターヘッドの場合は &quot;refs/heads/master&quot; となります。各 refname の前にある二つの sha1 値は、更新前と更新後の refname のオブジェクト名です。作成されるRefはsha1-oldが0{40}で、削除されるRefはsha1-newが0{40}で、それ以外の場合はsha1-oldとsha1-newがリポジトリ内で有効なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="efb922792d6081ee214f4a8e1d665108721507f6" translate="yes" xml:space="preserve">
          <source>The refs are using the given hash algorithm. This keyword is only used if the server and client both support the object-format extension.</source>
          <target state="translated">refs は、与えられたハッシュアルゴリズムを使用しています。このキーワードは、サーバとクライアントの両方が object-format 拡張機能をサポートしている場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="ce26e3499eea5a4c24942a8e072b3a9539557d0b" translate="yes" xml:space="preserve">
          <source>The regex can also be set via a diff driver or configuration option, see &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; or &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</source>
          <target state="translated">正規表現は、diffドライバーまたは構成オプションを介して設定することもできます&lt;a href=&quot;gitattributes&quot;&gt;。gitattributes [5]&lt;/a&gt;または&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。明示的に指定すると、diffドライバーや構成設定が上書きされます。差分ドライバーは構成設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="db9cbae31eee7dd0453a2f75d2431a49c7ce5a43" translate="yes" xml:space="preserve">
          <source>The regex must capture the source branch name in $1.</source>
          <target state="translated">正規表現は、ソースブランチ名を$1でキャプチャする必要があります。</target>
        </trans-unit>
        <trans-unit id="2f22e3781909efae9d373f9fa46942441b8a264c" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">差分ドライバーがハンクヘッダーを認識するために使用する正規表現。組み込みパターンを使用することもできます。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4211f7342bdc098f581fc9d7939f84dc24cd9689" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to split words in a line. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">diffドライバが単語を行に分割するために使用する正規表現。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aa527c60a8440b01958ab1ade21254172db5c938" translate="yes" xml:space="preserve">
          <source>The remainder of the commit or the tag message that follows the &quot;subject&quot;.</source>
          <target state="translated">コミットの残りの部分、または &quot;subject &quot;の後に続くタグメッセージ。</target>
        </trans-unit>
        <trans-unit id="f0619f2eb83a7faf485cba23bd4bbef8fb0cb4dd" translate="yes" xml:space="preserve">
          <source>The remainder of the line, after stripping the spaces, is used as the help associated to the option.</source>
          <target state="translated">行の残りの部分は、空白を取り除いた後に、 そのオプションに関連するヘルプとして使われます。</target>
        </trans-unit>
        <trans-unit id="19c5350e9da63f63a8abbccc7168a03dfd13ebac" translate="yes" xml:space="preserve">
          <source>The remaining features cannot be overridden on a per project basis.</source>
          <target state="translated">残りの機能は、プロジェクトごとに上書きすることはできません。</target>
        </trans-unit>
        <trans-unit id="303228bfc99fc67a561e0782dc3e0ceb08c259bb" translate="yes" xml:space="preserve">
          <source>The remote branch name for a submodule, used by &lt;code&gt;git submodule
update --remote&lt;/code&gt;. Set this option to override the value found in the &lt;code&gt;.gitmodules&lt;/code&gt; file. See &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;git submodule update --remote&lt;/code&gt; で使用されるサブモジュールのリモートブランチ名。このオプションを設定して、 &lt;code&gt;.gitmodules&lt;/code&gt; ファイルにある値をオーバーライドします。詳細については、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fdf928f1cd746e7574e5e26895f63052b9e3300" translate="yes" xml:space="preserve">
          <source>The remote configuration is achieved using the &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables. (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">リモート構成は、 &lt;code&gt;remote.origin.url&lt;/code&gt; および &lt;code&gt;remote.origin.fetch&lt;/code&gt; 構成変数を使用して実現されます。（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e7b65b070cfabceee72964f903404025034f8258" translate="yes" xml:space="preserve">
          <source>The remote end did not report the successful update of the ref, perhaps because of a temporary error on the remote side, a break in the network connection, or other transient error.</source>
          <target state="translated">リモート側での一時的なエラー、ネットワーク接続の切断、またはその他の過渡的なエラーのためか、リモート側が ref の更新に成功したことを報告しませんでした。</target>
        </trans-unit>
        <trans-unit id="53c927a78ca0c11dc61a2c100f0e02c446d49374" translate="yes" xml:space="preserve">
          <source>The remote end refused the update. Usually caused by a hook on the remote side, or because the remote repository has one of the following safety options in effect: &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; (for pushes to the checked out branch), &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; (for forced non-fast-forward updates), &lt;code&gt;receive.denyDeletes&lt;/code&gt; or &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt;. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">リモートエンドが更新を拒否しました。通常、リモート側のフック、またはリモートリポジトリに次の安全オプションのいずれかが有効になっていることが原因で発生します： &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; （チェックアウトされたブランチへのプッシュの場合）、 &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; （強制的な非早送り更新の場合） ）、 &lt;code&gt;receive.denyDeletes&lt;/code&gt; または &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt; 。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9422d899b3eadda77c8387091e37d96facb6c2f" translate="yes" xml:space="preserve">
          <source>The remote heads to update from. This is relative to $GIT_DIR (e.g. &quot;HEAD&quot;, &quot;refs/heads/master&quot;). When unspecified, update from all heads the remote side has.</source>
          <target state="translated">更新元となるリモートのヘッド。これは $GIT_DIR からの相対的なものです (例:&quot;HEAD&quot;,&quot;refs/heads/master&quot;)。指定しない場合は、リモート側が持っているすべてのヘッドから更新します。</target>
        </trans-unit>
        <trans-unit id="0419c5b470511fe246bdc207ab1f44978b5929c7" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential.</source>
          <target state="translated">ネットワーク クレデンシャルのリモート ホスト名。</target>
        </trans-unit>
        <trans-unit id="2acecc1c91d3ba6caf56ecf7245b62c949c434da" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential. This includes the port number if one was specified (e.g., &quot;example.com:8088&quot;).</source>
          <target state="translated">ネットワーク信任状のリモートホスト名。これには、ポート番号が指定されている場合はポート番号が含まれます (例:「example.com:8088」)。</target>
        </trans-unit>
        <trans-unit id="a7632b9807699f7e6cd146f3dd66e0428b068933" translate="yes" xml:space="preserve">
          <source>The remote ref that matches &amp;lt;src&amp;gt; is fetched, and if &amp;lt;dst&amp;gt; is not an empty string, an attempt is made to update the local ref that matches it.</source>
          <target state="translated">&amp;lt;src&amp;gt;に一致するリモート参照がフェッチされ、&amp;lt;dst&amp;gt;が空の文字列でない場合は、それに一致するローカル参照を更新しようとします。</target>
        </trans-unit>
        <trans-unit id="282ef7eedc5a5bdee9740e04ed8375ea205f3da3" translate="yes" xml:space="preserve">
          <source>The remote refs to update.</source>
          <target state="translated">更新するリモートレファレンス。</target>
        </trans-unit>
        <trans-unit id="1126548b6dd0a73d0e4b3cf8a47f765ced5296ec" translate="yes" xml:space="preserve">
          <source>The remote to push to by default. Overrides &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; for all branches, and is overridden by &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; for specific branches.</source>
          <target state="translated">デフォルトでプッシュするリモート。オーバーライドの &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; すべての分岐のための、およびによって上書きされる &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; 特定の分岐のため。</target>
        </trans-unit>
        <trans-unit id="69cc315a656a6408b19c28c1250214347094ab33" translate="yes" xml:space="preserve">
          <source>The replaced object and the replacement object must be of the same type. This restriction can be bypassed using &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">置換されるオブジェクトと置換オブジェクトは同じタイプである必要があります。この制限は、 &lt;code&gt;-f&lt;/code&gt; を使用して回避できます。</target>
        </trans-unit>
        <trans-unit id="1ad56792b1c232c0733d7ad92a2a6edfcbfd7d1e" translate="yes" xml:space="preserve">
          <source>The report does not tell you anything about lines which have been deleted or replaced; you need to use a tool such as &lt;code&gt;git diff&lt;/code&gt; or the &quot;pickaxe&quot; interface briefly mentioned in the following paragraph.</source>
          <target state="translated">レポートは、削除または置換された行については何も通知しません。 &lt;code&gt;git diff&lt;/code&gt; や次の段落で簡単に説明する「pickaxe」インターフェースなどのツールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4fd8af335028abdc88c8957e63b788cd43e89cc" translate="yes" xml:space="preserve">
          <source>The report of the commands of this hook should have the same order as the input. The exit status of the &lt;code&gt;proc-receive&lt;/code&gt; hook only determines the success or failure of the group of commands sent to it, unless atomic push is in use.</source>
          <target state="translated">このフックのコマンドのレポートは、入力と同じ順序である必要があります。 &lt;code&gt;proc-receive&lt;/code&gt; フックの終了ステータスは、アトミックプッシュが使用されていない限り、送信されたコマンドのグループの成功または失敗のみを決定します。</target>
        </trans-unit>
        <trans-unit id="2c986c29f6ffa22f2a8c706bbb75b7aeb4461294" translate="yes" xml:space="preserve">
          <source>The repository URL to be pulled from.</source>
          <target state="translated">プルアウトするリポジトリのURL。</target>
        </trans-unit>
        <trans-unit id="944d2d5ccd37faa608b4a3dce165543a5adf2fbf" translate="yes" xml:space="preserve">
          <source>The repository the action will be performed on.</source>
          <target state="translated">アクションが実行されるリポジトリ。</target>
        </trans-unit>
        <trans-unit id="0e7c4601cfd7634812fd5318d08d4f529fb59bef" translate="yes" xml:space="preserve">
          <source>The repository to get a tar archive from.</source>
          <target state="translated">tar アーカイブを取得するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="bc81f7623489d466e462d3597d8dc6ebd3c462a1" translate="yes" xml:space="preserve">
          <source>The repository to sync from.</source>
          <target state="translated">同期するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="3d7b45c15d44961366710f29c0592cfbaf8293a2" translate="yes" xml:space="preserve">
          <source>The repository to sync into.</source>
          <target state="translated">同期するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="85a32286326310d42bba4488de0fbceb84f9845b" translate="yes" xml:space="preserve">
          <source>The repository to update.</source>
          <target state="translated">更新するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="15ea4cb9c0b7ca59bf54604e4e274c258d2ab5d8" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; の応答は、区切りパケット（0001）で区切られたいくつかのセクションに分割され、各セクションはセクションヘッダーで始まります。</target>
        </trans-unit>
        <trans-unit id="f5a3baabdc3717b14a2e7f02d6a5a2eab21baf8b" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header. Most sections are sent only when the packfile is sent.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; の応答は、区切り文字パケット（0001）で区切られたいくつかのセクションに分割され、各セクションはセクションヘッダーで始まります。ほとんどのセクションは、packfileが送信されたときにのみ送信されます。</target>
        </trans-unit>
        <trans-unit id="4f1a001f6b3f7c16917c0e0241e976b8717f870a" translate="yes" xml:space="preserve">
          <source>The rest of the documentation discusses &lt;code&gt;fsck.*&lt;/code&gt; for brevity, but the same applies for the corresponding &lt;code&gt;receive.fsck.*&lt;/code&gt; and &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt;. variables.</source>
          <target state="translated">ドキュメントの残りの部分では、簡潔にするために &lt;code&gt;fsck.*&lt;/code&gt; について説明しますが、対応する &lt;code&gt;receive.fsck.*&lt;/code&gt; と &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt; も同じことが当てはまります。変数。</target>
        </trans-unit>
        <trans-unit id="ac10b74ced74e00c661f52e9250a42f47fd6add4" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, because &lt;code&gt;2&lt;/code&gt; is the best common ancestor of all commits.</source>
          <target state="translated">&lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; の結果は &lt;code&gt;2&lt;/code&gt; です。これは、 &lt;code&gt;2&lt;/code&gt; がすべてのコミットの最も一般的な祖先であるためです。</target>
        </trans-unit>
        <trans-unit id="1e8fa948e18ddfaa21178042cd566eaada7aae80" translate="yes" xml:space="preserve">
          <source>The result of comparison is passed from these commands to what is internally called &quot;diffcore&quot;, in a format similar to what is output when the -p option is not used. E.g.</source>
          <target state="translated">比較結果は、これらのコマンドから内部的に &quot;diffcore&quot; と呼ばれるものに渡されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d6478eddd3e6be6e1f0703d8450a597d1ea3dfe6" translate="yes" xml:space="preserve">
          <source>The result of such a bisection would be that we would find that H is the first bad commit, when in fact it&amp;rsquo;s B. So that would be wrong!</source>
          <target state="translated">そのような二等分の結果、実際にはBであるのに、Hが最初の不良コミットであることがわかります。</target>
        </trans-unit>
        <trans-unit id="9ed4c9f58d5e6595458ce4cb4952fdfe7c07ce9b" translate="yes" xml:space="preserve">
          <source>The resulting command then has an &quot;operation&quot; argument appended to it (see below for details), and the result is executed by the shell.</source>
          <target state="translated">結果のコマンドには「操作」引数が付加され(詳細は後述)、その結果がシェルによって実行されます。</target>
        </trans-unit>
        <trans-unit id="baad8b31b0f95aa1296c5c88ad34816424f2926e" translate="yes" xml:space="preserve">
          <source>The resulting directory proj.git contains a &quot;bare&quot; git repository&amp;mdash;​it is just the contents of the &lt;code&gt;.git&lt;/code&gt; directory, without any files checked out around it.</source>
          <target state="translated">結果のディレクトリproj.gitには「ベア」gitリポジトリが含まれています。これは &lt;code&gt;.git&lt;/code&gt; ディレクトリのコンテンツにすぎず、周りにチェックアウトされているファイルはありません。</target>
        </trans-unit>
        <trans-unit id="31dc4b206e7be8ca9a78c4871cc58f03a5340e5b" translate="yes" xml:space="preserve">
          <source>The revision data is appended to the file if it already exists, for use when doing incremental imports.</source>
          <target state="translated">リビジョンデータは、インクリメンタルインポートを行う際に使用するために、ファイルが既に存在する場合にはそのファイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="0ca811b30547ebe29846859e95a6c9147e8141b4" translate="yes" xml:space="preserve">
          <source>The rewrite rule guarantees that existing static files will be properly served, whereas any other URL will be passed to gitweb as PATH_INFO parameter.</source>
          <target state="translated">この書き換えルールは、既存の静的ファイルが適切に処理されることを保証します。</target>
        </trans-unit>
        <trans-unit id="7511d9248c0671ec876d283606ae9df0bea2f6b2" translate="yes" xml:space="preserve">
          <source>The ripple effect of a &quot;hard case&quot; recovery is especially bad: &lt;code&gt;everyone&lt;/code&gt; downstream from &lt;code&gt;topic&lt;/code&gt; will now have to perform a &quot;hard case&quot; recovery too!</source>
          <target state="translated">「ハードケース」リカバリの波及効果は特に悪いです。 &lt;code&gt;topic&lt;/code&gt; 下流にいる &lt;code&gt;everyone&lt;/code&gt; が「ハードケース」リカバリも実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="93d5c7537e241865d860131eb6d72edc95c9d772" translate="yes" xml:space="preserve">
          <source>The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported. If not given, &lt;code&gt;git cvsimport&lt;/code&gt; will try to read it from &lt;code&gt;CVS/Root&lt;/code&gt;. If no such file exists, it checks for the &lt;code&gt;CVSROOT&lt;/code&gt; environment variable.</source>
          <target state="translated">CVSアーカイブのルート。ローカル（単純なパス）またはリモートの場合があります。現在、：local：、：ext：、：pserver：アクセスメソッドのみがサポートされています。指定しない場合、 &lt;code&gt;git cvsimport&lt;/code&gt; は &lt;code&gt;CVS/Root&lt;/code&gt; から読み取ろうとします。そのようなファイルが存在しない場合は、 &lt;code&gt;CVSROOT&lt;/code&gt; 環境変数をチェックします。</target>
        </trans-unit>
        <trans-unit id="df41fdf293aec02e3dee1ead27003284471a1181" translate="yes" xml:space="preserve">
          <source>The root of the tree can be represented by an empty string as &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ツリーのルートは、 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; のように空の文字列で表すことができます。</target>
        </trans-unit>
        <trans-unit id="557dc21e01559e09224bc25bcbd6a672b4e3d883" translate="yes" xml:space="preserve">
          <source>The rule to determine which remote branch to merge after fetching is a bit involved, in order not to break backward compatibility.</source>
          <target state="translated">フェッチ後にどのリモートブランチをマージするかを決めるルールは、下位互換性を壊さないようにするために少し複雑です。</target>
        </trans-unit>
        <trans-unit id="bbff5506f0bff9eed6d1a29f80ce8f838449bb56" translate="yes" xml:space="preserve">
          <source>The rules by which the pattern matches paths are the same as in &lt;code&gt;.gitignore&lt;/code&gt; files (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), with a few exceptions:</source>
          <target state="translated">パターンがパスに一致するルールは、いくつかの例外を除いて、 &lt;code&gt;.gitignore&lt;/code&gt; ファイル（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）と同じです。</target>
        </trans-unit>
        <trans-unit id="579e7c08387accae89723ba13e3ec53145837232" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;--merge&lt;/code&gt; option above, but changes the way the conflicting hunks are presented, overriding the &lt;code&gt;merge.conflictStyle&lt;/code&gt; configuration variable. Possible values are &quot;merge&quot; (default) and &quot;diff3&quot; (in addition to what is shown by &quot;merge&quot; style, shows the original contents).</source>
          <target state="translated">上記の &lt;code&gt;--merge&lt;/code&gt; オプションと同じですが、競合するハンクの表示方法を変更し、 &lt;code&gt;merge.conflictStyle&lt;/code&gt; 構成変数を上書きします。可能な値は「merge」（デフォルト）と「diff3」です（「merge」スタイルで表示されるものに加えて、元のコンテンツを表示します）。</target>
        </trans-unit>
        <trans-unit id="1a11cc7f94381fe2de07d484775d2914bf62d241" translate="yes" xml:space="preserve">
          <source>The same as the previous one:</source>
          <target state="translated">と同じです。</target>
        </trans-unit>
        <trans-unit id="ebdfbbadd1b4e3e4d3c390aed297730072348592" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;pu&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;pu&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="translated">&lt;code&gt;pu&lt;/code&gt; についても、同じ巻き戻しと再構築のプロセスを実行できます。上記のように、 &lt;code&gt;pu&lt;/code&gt; は使い捨てブランチであるため、公表は必要ありません。</target>
        </trans-unit>
        <trans-unit id="982acf1816c2fb0e10e67de1c939cdcea16cc699" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;seen&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;seen&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="translated">同じ巻き戻しと再構築のプロセスが &lt;code&gt;seen&lt;/code&gt; ように続くかもしれません。上記のように、 &lt;code&gt;seen&lt;/code&gt; は使い捨てのブランチであるため、公の発表は必要ありません。</target>
        </trans-unit>
        <trans-unit id="30d931302d20c8d2d3f4d29cdb99720d08f56244" translate="yes" xml:space="preserve">
          <source>The same trailer as a v1 pack file:</source>
          <target state="translated">v1パックファイルと同じトレーラー。</target>
        </trans-unit>
        <trans-unit id="ef6e4cd5de79a2002e4df69090fc16d7024fe532" translate="yes" xml:space="preserve">
          <source>The sample &lt;code&gt;prepare-commit-msg&lt;/code&gt; hook that comes with Git removes the help message found in the commented portion of the commit template.</source>
          <target state="translated">Gitに付属 &lt;code&gt;prepare-commit-msg&lt;/code&gt; サンプルのprepare-commit-msgフックは、コミットテンプレートのコメント部分にあるヘルプメッセージを削除します。</target>
        </trans-unit>
        <trans-unit id="0814a224cf6ffffca90b05b46ffd264f8d62f600" translate="yes" xml:space="preserve">
          <source>The sample hooks are all disabled by default. To enable one of the sample hooks rename it by removing its &lt;code&gt;.sample&lt;/code&gt; suffix.</source>
          <target state="translated">デフォルトでは、サンプルフックはすべて無効になっています。サンプルフックの1つを有効にするには、 &lt;code&gt;.sample&lt;/code&gt; サフィックスを削除して名前を変更します。</target>
        </trans-unit>
        <trans-unit id="ee2f5fb52849fdcd69a62a399938c4c71ec4e36c" translate="yes" xml:space="preserve">
          <source>The sane thing. Just admit you screwed up, and use a different name. Others have already seen one tag-name, and if you keep the same name, you may be in the situation that two people both have &quot;version X&quot;, but they actually have &lt;code&gt;different&lt;/code&gt; &quot;X&quot;'s. So just call it &quot;X.1&quot; and be done with it.</source>
          <target state="translated">正気なこと。失敗したことを認め、別の名前を使用してください。他の人はすでに1つのタグ名を見たことがあります。同じ名前を保持している場合、2人のユーザーが両方とも「バージョンX」を持っているが、実際には「X」が &lt;code&gt;different&lt;/code&gt; という状況にあるかもしれません。だからそれを「X.1」と呼んでそれで終わりです。</target>
        </trans-unit>
        <trans-unit id="16a78cd21b6c709f016f4a17d2a1069e970db97c" translate="yes" xml:space="preserve">
          <source>The script expects you to provide the key roots where it can start the import from an &lt;code&gt;initial import&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt; type of Arch commit. It will follow and import new branches within the provided roots.</source>
          <target state="translated">スクリプトは、 &lt;code&gt;initial import&lt;/code&gt; またはArchタイプの &lt;code&gt;tag&lt;/code&gt; タイプからインポートを開始できるキールートを提供することを期待しています。提供されたルート内の新しいブランチをたどってインポートします。</target>
        </trans-unit>
        <trans-unit id="793ca81ee99913a2e3edc7ca33209f79549422e8" translate="yes" xml:space="preserve">
          <source>The scriptlet sets &lt;code&gt;GIT_DIR&lt;/code&gt; and &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; shell variables, but does &lt;strong&gt;not&lt;/strong&gt; export them to the environment.</source>
          <target state="translated">スクリプトレットは &lt;code&gt;GIT_DIR&lt;/code&gt; および &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; シェル変数を設定しますが、それらを環境にエクスポートしませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8b53f7beee61a37b0174ea389f5f36080ff3c1b7" translate="yes" xml:space="preserve">
          <source>The second .gitignore prevents Git from ignoring &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt;.</source>
          <target state="translated">2番目の.gitignoreは、Gitが &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt; を無視しないようにします。</target>
        </trans-unit>
        <trans-unit id="fc737587a80c0c07a4fffd3646c479ff0f86cddd" translate="yes" xml:space="preserve">
          <source>The second example demonstrates that you can abbreviate the object name to only the first several hexadecimal digits in most places.</source>
          <target state="translated">2 番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の 16 進数だけに省略できることを示しています。</target>
        </trans-unit>
        <trans-unit id="2890a9def3fff903603dee47b68cd9b5af108707" translate="yes" xml:space="preserve">
          <source>The second format is what gets used when &lt;code&gt;--stage=all&lt;/code&gt;. The three stage temporary fields (stage1temp, stage2temp, stage3temp) list the name of the temporary file if there is a stage entry in the index or &lt;code&gt;.&lt;/code&gt; if there is no stage entry. Paths which only have a stage 0 entry will always be omitted from the output.</source>
          <target state="translated">2番目の形式は、-- &lt;code&gt;--stage=all&lt;/code&gt; 場合に使用される形式です。 3つのステージの一時フィールド（stage1temp、stage2temp、stage3temp）には、インデックスまたはにステージエントリがある場合、一時ファイルの名前がリストされます &lt;code&gt;.&lt;/code&gt; ステージエントリがない場合。ステージ0エントリのみを持つパスは、常に出力から除外されます。</target>
        </trans-unit>
        <trans-unit id="8a6f107e4f2dc8b17455f1349e940becb9fc3a6b" translate="yes" xml:space="preserve">
          <source>The second issue is one of auditing. When many contributors are working on the same repository, it is important which merge commits introduced a change into an important branch. The problematic merge &lt;code&gt;R&lt;/code&gt; above is not likely to be the merge commit that was used to merge into an important branch. Instead, the merge &lt;code&gt;N&lt;/code&gt; was used to merge &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; into the important branch. This commit may have information about why the change &lt;code&gt;X&lt;/code&gt; came to override the changes from &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; in its commit message.</source>
          <target state="translated">2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ &lt;code&gt;R&lt;/code&gt; は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。代わりに、マージ &lt;code&gt;N&lt;/code&gt; を使用して &lt;code&gt;R&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; を重要なブランチにマージしました。このコミットには、変更 &lt;code&gt;X&lt;/code&gt; がコミットメッセージの &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; からの変更をオーバーライドするようになった理由に関する情報が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="86b87f951d8d8be1a02da6e062a3489256945d73" translate="yes" xml:space="preserve">
          <source>The second parameter passed to the hook is the indicator for whether or not the index was updated and the skip-worktree bit could have changed. &quot;1&quot; meaning skip-worktree bits could have been updated and &quot;0&quot; meaning they were not.</source>
          <target state="translated">フックに渡される 2 番目のパラメータは、インデックスが更新されたかどうかとスキップワークツリービットが変更されたかどうかの指標です。&quot;1&quot; はスキップワークツリービットが更新された可能性があることを意味し、&quot;0&quot; は更新されなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="b730007914036d9f0fb3ba6052d64853bae216ae" translate="yes" xml:space="preserve">
          <source>The second syntax (&quot;&lt;code&gt;git merge --abort&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts. &lt;code&gt;git merge --abort&lt;/code&gt; will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), &lt;code&gt;git merge --abort&lt;/code&gt; will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:</source>
          <target state="translated">2番目の構文（ &quot; &lt;code&gt;git merge --abort&lt;/code&gt; &quot;）は、マージによって競合が発生した後にのみ実行できます。 &lt;code&gt;git merge --abort&lt;/code&gt; は、マージプロセスを中止し、マージ前の状態を再構築しようとします。ただし、マージの開始時にコミットされていない変更があった場合（特に、マージの開始後にそれらの変更がさらに変更された場合）、 &lt;code&gt;git merge --abort&lt;/code&gt; は、元の（マージ前の）変更を再構築できない場合があります。したがって：</target>
        </trans-unit>
        <trans-unit id="1f7dcee78b5872602756cd0d868ad6253db301fe" translate="yes" xml:space="preserve">
          <source>The second transformation in the chain is diffcore-break, and is controlled by the -B option to the &lt;code&gt;git diff-*&lt;/code&gt; commands. This is used to detect a filepair that represents &quot;complete rewrite&quot; and break such filepair into two filepairs that represent delete and create. E.g. If the input contained this filepair:</source>
          <target state="translated">チェーンの2番目の変換はdiffcore-breakであり、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Bオプションによって制御されます。これは、「完全な書き換え」を表すファイルペアを検出し、そのようなファイルペアを、削除と作成を表す2つのファイルペアに分割するために使用されます。たとえば、入力にこのファイルペアが含まれていた場合：</target>
        </trans-unit>
        <trans-unit id="5aa738048a0181b9705365955bd04c18156f9d33" translate="yes" xml:space="preserve">
          <source>The section &lt;code&gt;submodule.foo.*&lt;/code&gt; in the &lt;code&gt;.gitmodules&lt;/code&gt; file gives additional hints to Git&amp;rsquo;s porcelain layer. For example, the &lt;code&gt;submodule.foo.url&lt;/code&gt; setting specifies where to obtain the submodule.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; ファイルのセクション &lt;code&gt;submodule.foo.*&lt;/code&gt; は、Gitの磁器層に追加のヒントを与えます。たとえば、 &lt;code&gt;submodule.foo.url&lt;/code&gt; 設定は、サブモジュールを取得する場所を指定します。</target>
        </trans-unit>
        <trans-unit id="addff8a92e5ddb901ae8a38330bc2dcce4be9fbb" translate="yes" xml:space="preserve">
          <source>The section or key is invalid (ret=1),</source>
          <target state="translated">セクションまたはキーが無効です(ret=1)。</target>
        </trans-unit>
        <trans-unit id="463ba2454fad2719570e32271a038c3acce699a7" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any &quot;unshallow&quot; lines for anything which the client has not indicated was shallow as a part of its request.</source>
          <target state="translated">サーバーは、クライアントがリクエストの一部として浅いことを示さなかったものに 対して、「浅くない」行を送ってはならない[MUST NOT]。</target>
        </trans-unit>
        <trans-unit id="d868af4cbdec034778f61defdf53e9a4307fd341" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any refs which were not requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">サーバーは、 &lt;code&gt;want-ref&lt;/code&gt; 行を使用して要求されなかった参照を送信してはなりません（MUST NOT）。</target>
        </trans-unit>
        <trans-unit id="446930d87bed0e82e29e329dd081708ba37057c2" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;agent=X&lt;/code&gt;) to notify the client that the server is running version &lt;code&gt;X&lt;/code&gt;. The client may optionally send its own agent string by including the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;Y&lt;/code&gt; (in the form &lt;code&gt;agent=Y&lt;/code&gt;) in its request to the server (but it MUST NOT do so if the server did not advertise the agent capability). The &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; strings may contain any printable ASCII characters except space (i.e., the byte range 32 &amp;lt; x &amp;lt; 127), and are typically of the form &quot;package/version&quot; (e.g., &quot;git/1.8.3.1&quot;). The agent strings are purely informative for statistics and debugging purposes, and MUST NOT be used to programmatically assume the presence or absence of particular features.</source>
          <target state="translated">サーバーは、値 &lt;code&gt;X&lt;/code&gt; （ &lt;code&gt;agent=X&lt;/code&gt; の形式）で &lt;code&gt;agent&lt;/code&gt; 機能を通知して、サーバーがバージョン &lt;code&gt;X&lt;/code&gt; を実行していることをクライアントに通知できます。クライアントは、オプションで、サーバーへのリクエストに値 &lt;code&gt;Y&lt;/code&gt; （ &lt;code&gt;agent=Y&lt;/code&gt; の形式）の &lt;code&gt;agent&lt;/code&gt; 機能を含めることにより、独自のエージェント文字列を送信できます（ただし、サーバーがエージェント機能をアドバタイズしなかった場合は送信しないでください）。 &lt;code&gt;X&lt;/code&gt; と &lt;code&gt;Y&lt;/code&gt; 文字列には、スペース以外の印刷可能なASCII文字（つまり、バイト範囲32 &amp;lt;x &amp;lt;127）を含めることができ、通常は &quot;package / version&quot;（たとえば、 &quot;git / 1.8.3.1&quot;）の形式です。エージェント文字列は、統計とデバッグの目的で純粋に情報を提供するものであり、特定の機能の有無をプログラムで仮定するために使用してはなりません。</target>
        </trans-unit>
        <trans-unit id="5d8f08f3df19bb2371d7bbd09e4f22512a514d87" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;object-format&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;object-format=X&lt;/code&gt;) to notify the client that the server is able to deal with objects using hash algorithm X. If not specified, the server is assumed to only handle SHA-1. If the client would like to use a hash algorithm other than SHA-1, it should specify its object-format string.</source>
          <target state="translated">サーバーは、値 &lt;code&gt;X&lt;/code&gt; （ &lt;code&gt;object-format=X&lt;/code&gt; の形式）でオブジェクト &lt;code&gt;object-format&lt;/code&gt; 機能をアドバタイズして、サーバーがハッシュアルゴリズムXを使用してオブジェクトを処理できることをクライアントに通知できます。指定されていない場合、サーバーは次のように想定されます。 SHA-1のみを処理します。クライアントがSHA-1以外のハッシュアルゴリズムを使用する場合は、オブジェクト形式の文字列を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="89c71d3c4f66b93dbf4d80cac3ad0ba90c74cbf8" translate="yes" xml:space="preserve">
          <source>The server may advertise a session ID that can be used to identify this process across multiple requests. The client may advertise its own session ID back to the server as well.</source>
          <target state="translated">サーバーは、複数のリクエストにわたってこのプロセスを識別するために使用できる セッションIDをアドバタイズしてもよい。クライアントはそれ自身のセッションIDをサーバに広告することができます。</target>
        </trans-unit>
        <trans-unit id="5dbb8fc2dd2ef1317864e26b0a2f75da26a1d7f0" translate="yes" xml:space="preserve">
          <source>The server sends a &quot;shallow obj-id&quot; line for each commit whose parents will not be sent in the following packfile.</source>
          <target state="translated">サーバは、以下のpackfileで親が送信されないコミットごとに「浅いobj-id」の行を送信します。</target>
        </trans-unit>
        <trans-unit id="15cbc52acb55c8a437e7a9fc2cb2ebb8c994afc3" translate="yes" xml:space="preserve">
          <source>The server sends an &quot;unshallow obj-id&quot; line for each commit which the client has indicated is shallow, but is no longer shallow as a result of the fetch (due to its parents being sent in the following packfile).</source>
          <target state="translated">サーバは、クライアントが浅いと指摘した各コミットに対して、&quot;unshallow obj-id&quot; 行を送信します。</target>
        </trans-unit>
        <trans-unit id="3f482eecb5e3fca563243c0419eece540e0582ac" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;ACK obj-id&quot; for all of the object ids sent as have lines which are common.</source>
          <target state="translated">サーバは、共通の行を持つように送信された全てのオブジェクトIDに対して、&quot;ACK obj-id &quot;で応答します。</target>
        </trans-unit>
        <trans-unit id="543a974b0aa8c62d541ca2830198235b945cc003" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;NAK&quot; if none of the object ids sent as have lines were common.</source>
          <target state="translated">have行として送られたオブジェクトIDが共通のものがなかった場合、サーバは &quot;NAK &quot;で応答します。</target>
        </trans-unit>
        <trans-unit id="568256da628f1737b5310a22de9a07629ce73e0d" translate="yes" xml:space="preserve">
          <source>The server will respond with a &quot;ready&quot; line indicating that the server has found an acceptable common base and is ready to make and send a packfile (which will be found in the packfile section of the same response)</source>
          <target state="translated">サーバは &quot;ready&quot; という行で応答し、サーバが許容可能な共通ベースを見つけたことを示し、パックファイルを作成して送信する準備ができていることを示します (これは同じ応答の packfile セクションにあります)。</target>
        </trans-unit>
        <trans-unit id="69ff3eec8c55e5a8095ea13f51e31e429dc845d6" translate="yes" xml:space="preserve">
          <source>The server will send a ref listing (&quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;) for each reference requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">サーバーは、 &lt;code&gt;want-ref&lt;/code&gt; 行を使用して要求された各参照の参照リスト（ &quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;）を送信します。</target>
        </trans-unit>
        <trans-unit id="afb7e2ac1ca268d29d3dabe65a1485bc3c99ebf1" translate="yes" xml:space="preserve">
          <source>The server will then check to ensure that the client&amp;rsquo;s request is comprised of a valid command as well as valid capabilities which were advertised. If the request is valid the server will then execute the command. A server MUST wait till it has received the client&amp;rsquo;s entire request before issuing a response. The format of the response is determined by the command being executed, but in all cases a flush-pkt indicates the end of the response.</source>
          <target state="translated">次に、サーバーは、クライアントのリクエストが、アドバタイズされた有効なコマンドと有効な機能で構成されていることを確認します。リクエストが有効な場合、サーバーはコマンドを実行します。サーバーは、応答を発行する前に、クライアントの要求全体を受信するまで待機する必要があります。応答の形式は、実行されるコマンドによって決まりますが、すべての場合において、flush-pktは応答の終わりを示します。</target>
        </trans-unit>
        <trans-unit id="537b1e0777fad4eaaafbf4ccf5940ab37b1e2ed6" translate="yes" xml:space="preserve">
          <source>The shared index part, to be referenced by $GIT_DIR/index and other temporary index files. Only valid in split index mode.</source>
          <target state="translated">共有インデックス部分で、$GIT_DIR/index や他の一時インデックスファイルから参照されます。スプリットインデックスモードでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="d11a14c0103fd18e1ebb96bcb7251e0f8abbce80" translate="yes" xml:space="preserve">
          <source>The shift magic first throws away the tree id and then the -p parameters. Note that this handles merges properly! In case Darl committed a merge between P1 and P2, it will be propagated properly and all children of the merge will become merge commits with P1,P2 as their parents instead of the merge commit.</source>
          <target state="translated">シフトマジックでは、最初にツリー ID を捨て、次に -p パラメータを捨てます。これはマージを適切に処理することに注意してください! Darl が P1 と P2 の間でマージをコミットした場合、それは適切に伝搬され、すべてのマージの子はマージコミットの代わりに P1,P2 を親としてマージコミットになります。</target>
        </trans-unit>
        <trans-unit id="e33b2d8b27401f604cb70ad4d214df90a2abf20c" translate="yes" xml:space="preserve">
          <source>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</source>
          <target state="translated">類似度指数は変更されていない行の割合、非類似度指数は変更された行の割合です。これは切り捨てられた整数で、その後にパーセント記号が続きます。このように、類似度インデックスの値100%は、2つの等しいファイルのために予約されており、100%の非類似度は、古いファイルの行が新しいファイルに入っていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="09f0c715250f8ac9e78727d6768d66502facff83" translate="yes" xml:space="preserve">
          <source>The simplest commit to find is the HEAD commit, which we can find from .git/HEAD:</source>
          <target state="translated">最も簡単なコミットは HEAD コミットで、.git/HEAD から見つけることができます。</target>
        </trans-unit>
        <trans-unit id="938f800e1b465bd0f07eb377492ba2456bfbed2c" translate="yes" xml:space="preserve">
          <source>The simplest way to do this is using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and ssh; to update the remote branch named &lt;code&gt;master&lt;/code&gt; with the latest state of your branch named &lt;code&gt;master&lt;/code&gt;, run</source>
          <target state="translated">これを行う最も簡単な方法は、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;とsshを使用することです。名前のリモートブランチ更新する &lt;code&gt;master&lt;/code&gt; 名前付きブランチの最新の状態を持つ &lt;code&gt;master&lt;/code&gt; 、実行を</target>
        </trans-unit>
        <trans-unit id="a5eba655ac4b55a1106bdc6c6dbf2b0d1ad04c8a" translate="yes" xml:space="preserve">
          <source>The simplest way to mark a file as binary is to unset the diff attribute in the &lt;code&gt;.gitattributes&lt;/code&gt; file:</source>
          <target state="translated">ファイルをバイナリとしてマークする最も簡単な方法は、 &lt;code&gt;.gitattributes&lt;/code&gt; ファイルのdiff属性を設定解除することです。</target>
        </trans-unit>
        <trans-unit id="0f95b7ebe5f42d4f0766af1eda2b35efa6854fa9" translate="yes" xml:space="preserve">
          <source>The size in bytes of the commit or tag message.</source>
          <target state="translated">コミットまたはタグメッセージのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="99bb329f9f9a76ae9c81982693e8d5911709e87c" translate="yes" xml:space="preserve">
          <source>The size of the object (the same as &lt;code&gt;git cat-file -s&lt;/code&gt; reports). Append &lt;code&gt;:disk&lt;/code&gt; to get the size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">オブジェクトのサイズ（ &lt;code&gt;git cat-file -s&lt;/code&gt; reports と同じ）。 &lt;code&gt;:disk&lt;/code&gt; を追加して、オブジェクトがディスク上で占めるサイズをバイト単位で取得します。以下の「 &lt;code&gt;CAVEATS&lt;/code&gt; セクションのディスク上のサイズに関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="3527fa64b6fd749102c379b2fd96b0df5cd454cb" translate="yes" xml:space="preserve">
          <source>The size of the window used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no window size is given on the command line. Defaults to 10.</source>
          <target state="translated">使用されるウィンドウのサイズ&lt;a href=&quot;git-pack-objects&quot;&gt;のgit-パックオブジェクト[1]&lt;/a&gt;ないウィンドウサイズはコマンドラインで与えられていない場合。デフォルトは10です。</target>
        </trans-unit>
        <trans-unit id="2372575566ae8c805d7580bdcbad6da1c4463611" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the object (the same as &lt;code&gt;cat-file -s&lt;/code&gt; reports).</source>
          <target state="translated">オブジェクトのサイズ（バイト単位）（ &lt;code&gt;cat-file -s&lt;/code&gt; レポートと同じ）。</target>
        </trans-unit>
        <trans-unit id="43c333a5a6bd3bca8b34d5163a7aa7b6d79d2d40" translate="yes" xml:space="preserve">
          <source>The size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">オブジェクトがディスク上で占めるサイズ（バイト単位）。以下の「 &lt;code&gt;CAVEATS&lt;/code&gt; セクションのディスク上のサイズに関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d544171c06a9cb39c4059f830c0a8558d3922c9" translate="yes" xml:space="preserve">
          <source>The slash &lt;code&gt;/&lt;/code&gt; is used as the directory separator. Separators may occur at the beginning, middle or end of the &lt;code&gt;.gitignore&lt;/code&gt; search pattern.</source>
          <target state="translated">スラッシュ &lt;code&gt;/&lt;/code&gt; は、ディレクトリー区切り文字として使用されます。区切り &lt;code&gt;.gitignore&lt;/code&gt; は、.gitignore検索パターンの最初、中間、または最後に出現する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e18b2266f1b1b9062e466bd05dd697dc8d44c68f" translate="yes" xml:space="preserve">
          <source>The smaller the changes in your commit, the most effective &quot;git bisect&quot; will be. And you will probably need &quot;git bisect&quot; less in the first place, as small changes are easier to review even if they are only reviewed by the committer.</source>
          <target state="translated">コミットの変更点が小さければ小さいほど、&quot;git bisect&quot; は最も効果的です。また、小さな変更はコミット者だけがレビューしてもレビューしやすいので、そもそも &quot;git bisect &quot;の必要性は低くなるでしょう。</target>
        </trans-unit>
        <trans-unit id="0dab2fe7462a5d0c0b797d08e789dbaaf7bfa1df" translate="yes" xml:space="preserve">
          <source>The smart HTTP server, &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt;, will pass GIT_NAMESPACE through to the backend programs; see &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt; for sample configuration to expose repository namespaces as repositories.</source>
          <target state="translated">スマートHTTPサーバー&lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]は&lt;/a&gt;、GIT_NAMESPACEをバックエンドプログラムに渡します。リポジトリの名前空間をリポジトリとして公開するための設定例については、&lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ee3be6f644f850e9ae409b580b74ced862493f8" translate="yes" xml:space="preserve">
          <source>The solution, of course, is to make a merge that we can undo: merge into a throw-away branch.</source>
          <target state="translated">解決策は、もちろん、元に戻せるようなマージをすることです。</target>
        </trans-unit>
        <trans-unit id="8a1117f540255f9a5dcffa1baa25558f77657b0e" translate="yes" xml:space="preserve">
          <source>The special case of restarting an incremental import from the current branch value should be written as:</source>
          <target state="translated">現在のブランチ値からインクリメンタルインポートを再開するという特殊なケースは、次のように書くべきです。</target>
        </trans-unit>
        <trans-unit id="3599d1b8b89ee48d0b633dcff9041c57284c3251" translate="yes" xml:space="preserve">
          <source>The special exit code 125 should be used when the current source code cannot be tested. If the script exits with this code, the current revision will be skipped (see &lt;code&gt;git bisect skip&lt;/code&gt; above). 125 was chosen as the highest sensible value to use for this purpose, because 126 and 127 are used by POSIX shells to signal specific error status (127 is for command not found, 126 is for command found but not executable&amp;mdash;​these details do not matter, as they are normal errors in the script, as far as &lt;code&gt;bisect run&lt;/code&gt; is concerned).</source>
          <target state="translated">現在のソースコードをテストできない場合は、特別な終了コード125を使用する必要があります。スクリプトがこのコードで終了した場合、現在のリビジョンはスキップされます（上記の &lt;code&gt;git bisect skip&lt;/code&gt; を参照）。 126と127はPOSIXシェルによって特定のエラーステータスを通知するために使用されるため、125はこの目的で使用する最高の賢明な値として選択されました（127はコマンドが見つからないことを示し、126はコマンドが見つかりましたが実行可能ではありません。これらの詳細はありません。問題は、 &lt;code&gt;bisect run&lt;/code&gt; に関する限り、スクリプトの通常のエラーであるためです。</target>
        </trans-unit>
        <trans-unit id="60ac8fe2a99f998c150bb7d9adc8dfbeed95a10d" translate="yes" xml:space="preserve">
          <source>The special null SHA-1 (40 zeros) specifies that the branch is to be removed.</source>
          <target state="translated">特殊なヌル SHA-1 (40 ゼロ)は、ブランチが削除されることを指定します。</target>
        </trans-unit>
        <trans-unit id="a4c2fa6682338e4d7c45557107add1984be0213c" translate="yes" xml:space="preserve">
          <source>The special refspec &lt;code&gt;:&lt;/code&gt; (or &lt;code&gt;+:&lt;/code&gt; to allow non-fast-forward updates) directs Git to push &quot;matching&quot; branches: for every branch that exists on the local side, the remote side is updated if a branch of the same name already exists on the remote side.</source>
          <target state="translated">特別なrefspec &lt;code&gt;:&lt;/code&gt; (または &lt;code&gt;+:&lt;/code&gt; 早送り以外の更新を可能にする）は、Gitに「一致する」ブランチをプッシュするように指示します。ローカル側に存在するすべてのブランチについて、同じ名前のブランチがすでに存在する場合、リモート側が更新されますリモート側。</target>
        </trans-unit>
        <trans-unit id="f2f702d2704e1b64279419d712ca4460c3b7f78e" translate="yes" xml:space="preserve">
          <source>The special string &lt;code&gt;none&lt;/code&gt; can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains.</source>
          <target state="translated">特別な文字列 &lt;code&gt;none&lt;/code&gt; をプロキシコマンドとして使用して、特定のドメインパターンにプロキシを使用しないことを指定できます。これは、ファイアウォールの内側にあるサーバーをプロキシーの使用から除外するのに役立ちますが、デフォルトでは外部ドメインの共通プロキシーになります。</target>
        </trans-unit>
        <trans-unit id="65b859a3a4528b4a1eebafeebe9d2d28ac0eb085" translate="yes" xml:space="preserve">
          <source>The special symbol &quot;HEAD&quot; can always be used to refer to the current branch. In fact, Git uses a file named &lt;code&gt;HEAD&lt;/code&gt; in the &lt;code&gt;.git&lt;/code&gt; directory to remember which branch is current:</source>
          <target state="translated">特殊記号「HEAD」は、常に現在のブランチを参照するために使用できます。実際には、Gitは使用していますという名前のファイル &lt;code&gt;HEAD&lt;/code&gt; 内 &lt;code&gt;.git&lt;/code&gt; 電流である枝を覚えておくディレクトリを：</target>
        </trans-unit>
        <trans-unit id="54b91d851f1b23aa70b29c0e74d2c28879b6de30" translate="yes" xml:space="preserve">
          <source>The ssh and git protocols additionally support ~username expansion:</source>
          <target state="translated">ssh と git プロトコルはさらに ~username の拡張をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ac6c6d73b5f6b7c3cef28dfe32da61495601bd7c" translate="yes" xml:space="preserve">
          <source>The standard actions are:</source>
          <target state="translated">標準的な行動です。</target>
        </trans-unit>
        <trans-unit id="a72f515f06e2719cd062e161d9ed80a61b68c92f" translate="yes" xml:space="preserve">
          <source>The standard email format as described by RFC 2822, for example &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt;.</source>
          <target state="translated">RFC 2822で規定されている標準の電子メール形式（例： &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8128f4cfe82d86e129a0094608260664c3bb1ba3" translate="yes" xml:space="preserve">
          <source>The standard helper program to use with git-merge-index</source>
          <target state="translated">git-merge-index で使う標準のヘルパープログラム。</target>
        </trans-unit>
        <trans-unit id="4d34b021b617aa2bf3f93982ac428b041f085fbe" translate="yes" xml:space="preserve">
          <source>The starting point for the new branch. Specifying a &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; allows you to create a branch based on some other point in history than where HEAD currently points. (Or, in the case of &lt;code&gt;--detach&lt;/code&gt;, allows you to inspect and detach from some other point.)</source>
          <target state="translated">新しいブランチの開始点。 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; を指定すると、HEADが現在ポイントしている場所以外の、履歴内の別のポイントに基づいてブランチを作成できます。（または、ある場合には &lt;code&gt;--detach&lt;/code&gt; 、あなたが検査し、他のいくつかのポイントから切り離すことができます。）</target>
        </trans-unit>
        <trans-unit id="ca9ba47b83a1def4d8a6c769f2e642f061d5236a" translate="yes" xml:space="preserve">
          <source>The status of GPG verification of the push certificate, using the same mnemonic as used in &lt;code&gt;%G?&lt;/code&gt; format of &lt;code&gt;git log&lt;/code&gt; family of commands (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;%G?&lt;/code&gt; 使用されているのと同じニーモニックを使用した、プッシュ証明書のGPG検証のステータス？コマンドの &lt;code&gt;git log&lt;/code&gt; ファミリの形式（&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c902748a09ab505851b0b39809c60f3db2027be9" translate="yes" xml:space="preserve">
          <source>The status of the fetch is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">フェッチのステータスは表形式で出力され、各行は単一の ref のステータスを表します。各行の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7729563c964ef73ba71f39abfa320766ac0cea33" translate="yes" xml:space="preserve">
          <source>The status of the push is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">プッシュのステータスは表形式で出力され、各行は 1 つの ref のステータスを表します。各行の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e939f21e3282d453b1398071feb25115360b90b4" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if --porcelain or --verbose option is used.</source>
          <target state="translated">最新のリファレンスの状態は --porcelain または --verbose オプションが使用されている場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="0ebfa7ce02ec5605e425e0cd98062f5bbd8f2510" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if the --verbose option is used.</source>
          <target state="translated">verboseオプションが使用されている場合にのみ、最新のRefの状態が表示されます。</target>
        </trans-unit>
        <trans-unit id="a97643bd561fabe3d136679e4752cb73667ec062" translate="yes" xml:space="preserve">
          <source>The structured objects can further have their structure and connectivity to other objects verified. This is generally done with the &lt;code&gt;git fsck&lt;/code&gt; program, which generates a full dependency graph of all objects, and verifies their internal consistency (in addition to just verifying their superficial consistency through the hash).</source>
          <target state="translated">構造化オブジェクトはさらに、その構造と他のオブジェクトへの接続を検証することができます。これは一般的に &lt;code&gt;git fsck&lt;/code&gt; プログラムで行われ、すべてのオブジェクトの完全な依存関係グラフが生成され、内部の一貫性が確認されます（ハッシュによる表面的な一貫性の確認に加えて）。</target>
        </trans-unit>
        <trans-unit id="af4ab93b8907c3bc82033e90c4bc6eedaac09e1c" translate="yes" xml:space="preserve">
          <source>The submit process invokes the editor before each p4 change is submitted. If this setting is true, though, the editing step is skipped.</source>
          <target state="translated">送信処理は、p4 の各変更が送信される前にエディタを起動します。しかし、この設定がtrueの場合、編集ステップはスキップされます。</target>
        </trans-unit>
        <trans-unit id="72386229ffdfc0f6ba847ccdd7620fcafabeae30" translate="yes" xml:space="preserve">
          <source>The submodule directories are there, but they&amp;rsquo;re empty:</source>
          <target state="translated">サブモジュールディレクトリはありますが、空です。</target>
        </trans-unit>
        <trans-unit id="802b1c9a36cac97c548242e11fe5baa3275576f0" translate="yes" xml:space="preserve">
          <source>The submodule will never be considered modified (but will nonetheless show up in the output of status and commit when it has been staged).</source>
          <target state="translated">このサブモジュールが変更されたとみなされることはありません (ただし、ステージされたときには status や commit の出力に表示されます)。</target>
        </trans-unit>
        <trans-unit id="7180d60887d97b6ca57dd91c2b86681f019ca631" translate="yes" xml:space="preserve">
          <source>The submodule&amp;rsquo;s &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file would come into play when running &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; in the superproject, as this would check if the submodule has any changes not published to any remote. The remotes are configured in the submodule as usual in the &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file.</source>
          <target state="translated">スーパー &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; を実行すると、サブモジュールの &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイルが機能します。これにより、サブモジュールにリモートに公開されていない変更があるかどうかが確認されます。 &lt;code&gt;$GIT_DIR/config&lt;/code&gt; は、通常どおり$ GIT_DIR / configファイルのサブモジュールで構成されます。</target>
        </trans-unit>
        <trans-unit id="2a87578b15befa74b2d27eca3216884ceb35493c" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{push}&lt;/code&gt; reports the branch &quot;where we would push to&quot; if &lt;code&gt;git push&lt;/code&gt; were run while &lt;code&gt;branchname&lt;/code&gt; was checked out (or the current &lt;code&gt;HEAD&lt;/code&gt; if no branchname is specified). Since our push destination is in a remote repository, of course, we report the local tracking branch that corresponds to that branch (i.e., something in &lt;code&gt;refs/remotes/&lt;/code&gt;).</source>
          <target state="translated">サフィックス &lt;code&gt;@{push}&lt;/code&gt; は、ブランチ &lt;code&gt;branchname&lt;/code&gt; がチェックアウトされているときに &lt;code&gt;git push&lt;/code&gt; が実行された場合（「ブランチ名が指定されていない場合は現在の &lt;code&gt;HEAD&lt;/code&gt; 」）、「プッシュ先」のブランチを報告します。プッシュ先はリモートリポジトリにあるため、もちろん、そのブランチに対応するローカルトラッキングブランチ（つまり、 &lt;code&gt;refs/remotes/&lt;/code&gt; ）を報告します。</target>
        </trans-unit>
        <trans-unit id="c10fd9c6c93e1de11dbe32978aa15d853b4103fb" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{upstream}&lt;/code&gt; to a branchname (short form &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt;) refers to the branch that the branch specified by branchname is set to build on top of (configured with &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;). A missing branchname defaults to the current one. These suffixes are also accepted when spelled in uppercase, and they mean the same thing no matter the case.</source>
          <target state="translated">ブランチ名のサフィックス &lt;code&gt;@{upstream}&lt;/code&gt; （省略形 &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt; ）は、branchnameで指定されたブランチが（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; および &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; 構成されて）構築するように設定されているブランチを指します。 &amp;lt;名前&amp;gt; .merge）。欠落しているブランチ名はデフォルトで現在の名前になります。これらのサフィックスは、大文字のスペルでも受け入れられ、大文字と小文字が同じであることを意味します。</target>
        </trans-unit>
        <trans-unit id="35fca7d90e0c51050df5863335fd96cb674d847a" translate="yes" xml:space="preserve">
          <source>The symlink will either be absolute (beginning with a /), or relative to the tree root. For instance, if dir/link points to ../../foo, then &amp;lt;symlink&amp;gt; will be ../foo. &amp;lt;size&amp;gt; is the size of the symlink in bytes.</source>
          <target state="translated">シンボリックリンクは、絶対（/で始まる）、またはツリーのルートに対して相対的です。たとえば、dir / linkが../../fooを指している場合、&amp;lt;symlink&amp;gt;は../fooになります。&amp;lt;size&amp;gt;は、バイト単位のシンボリックリンクのサイズです。</target>
        </trans-unit>
        <trans-unit id="1e32c77f2578ce3c979cd217827d9aa3c6897be9" translate="yes" xml:space="preserve">
          <source>The syntax is fairly flexible and permissive; whitespaces are mostly ignored. The &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; characters begin comments to the end of line, blank lines are ignored.</source>
          <target state="translated">構文はかなり柔軟で寛容です。空白はほとんど無視されます。 &lt;code&gt;#&lt;/code&gt; と &lt;code&gt;;&lt;/code&gt; 文字はコメントを行末まで開始し、空白行は無視されます。</target>
        </trans-unit>
        <trans-unit id="e9a240786337cb206c43c416821000b9a6721022" translate="yes" xml:space="preserve">
          <source>The syntax of the configuration files is that of Perl, since these files are handled by sourcing them as fragments of Perl code (the language that gitweb itself is written in). Variables are typically set using the &lt;code&gt;our&lt;/code&gt; qualifier (as in &quot;&lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt;&quot;) to avoid syntax errors if a new version of gitweb no longer uses a variable and therefore stops declaring it.</source>
          <target state="translated">構成ファイルの構文はPerlの構文です。これらのファイルは、Perlコード（gitweb自体が記述されている言語）のフラグメントとしてソースによって処理されるためです。変数は通常 &lt;code&gt;our&lt;/code&gt; 修飾子を使用して設定され（「 &lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt; 」のように）、新しいバージョンのgitwebが変数を使用しなくなったために宣言を停止した場合の構文エラーを回避します。</target>
        </trans-unit>
        <trans-unit id="85d5722bf15562fb833fe3c8f580a92fe2e2d3db" translate="yes" xml:space="preserve">
          <source>The tables below show what happens when running:</source>
          <target state="translated">以下の表は、実行時に何が起こるかを示しています。</target>
        </trans-unit>
        <trans-unit id="0ab961c529e0da6916842ede03d74fc7b0e0f90e" translate="yes" xml:space="preserve">
          <source>The tag &lt;code&gt;v2.6.18&lt;/code&gt; is short for &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;v2.6.18&lt;/code&gt; は &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt; の略です。</target>
        </trans-unit>
        <trans-unit id="e5173af0305c1d6df2de24b7ea317c256f65109e" translate="yes" xml:space="preserve">
          <source>The template directory will be one of the following (in order):</source>
          <target state="translated">テンプレートディレクトリは以下のいずれかになります(順不同)。</target>
        </trans-unit>
        <trans-unit id="45d4fdaf8fe9ac583ec50051c8f5eb8c944a1ec1" translate="yes" xml:space="preserve">
          <source>The term &lt;a href=&quot;#def_pickaxe&quot;&gt;pickaxe&lt;/a&gt; refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the &lt;code&gt;--pickaxe-all&lt;/code&gt; option, it can be used to view the full &lt;a href=&quot;#def_changeset&quot;&gt;changeset&lt;/a&gt; that introduced or removed, say, a particular line of text. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_pickaxe&quot;&gt;ピッケル&lt;/a&gt;という用語は、指定されたテキスト文字列を追加または削除する変更を選択するのに役立つdiffcoreルーチンのオプションを指します。 &lt;code&gt;--pickaxe-all&lt;/code&gt; オプション、完全な表示するために使用することができ&lt;a href=&quot;#def_changeset&quot;&gt;チェンジ&lt;/a&gt;導入または削除、と言うことを、テキストの特定の行を。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d2ba0595fa8d197d8c3640c03007e070ceba5b47" translate="yes" xml:space="preserve">
          <source>The text conversion is generally a one-way conversion; in this example, we lose the actual image contents and focus just on the text data. This means that diffs generated by textconv are &lt;em&gt;not&lt;/em&gt; suitable for applying. For this reason, only &lt;code&gt;git diff&lt;/code&gt; and the &lt;code&gt;git log&lt;/code&gt; family of commands (i.e., log, whatchanged, show) will perform text conversion. &lt;code&gt;git
format-patch&lt;/code&gt; will never generate this output. If you want to send somebody a text-converted diff of a binary file (e.g., because it quickly conveys the changes you have made), you should generate it separately and send it as a comment &lt;em&gt;in addition to&lt;/em&gt; the usual binary diff that you might send.</source>
          <target state="translated">テキスト変換は通常、一方向の変換です。この例では、実際の画像コンテンツが失われ、テキストデータだけに焦点が当てられます。つまり、textconvによって生成されたdiffは適用に適して&lt;em&gt;いません&lt;/em&gt;。このため、テキスト変換を実行するのは、 &lt;code&gt;git diff&lt;/code&gt; および &lt;code&gt;git log&lt;/code&gt; ファミリーのコマンド（つまり、log、whatchanged、show）だけです。 &lt;code&gt;git format-patch&lt;/code&gt; がこの出力を生成することはありません。バイナリファイルのテキスト変換された差分を誰かに送信する場合（たとえば、行った変更をすばやく伝えるため）、それを個別に生成&lt;em&gt;し&lt;/em&gt;、通常のバイナリ差分&lt;em&gt;に加えて&lt;/em&gt;コメントとして送信する必要があります。送信します。</target>
        </trans-unit>
        <trans-unit id="eb234a21c48fd769b7576108683d04bf29f253cb" translate="yes" xml:space="preserve">
          <source>The third syntax (&quot;&lt;code&gt;git merge --continue&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts.</source>
          <target state="translated">3番目の構文（ &quot; &lt;code&gt;git merge --continue&lt;/code&gt; &quot;）は、マージによって競合が発生した後にのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="a25be90a41e318ce76ddb9737f9c1a04e1e950e3" translate="yes" xml:space="preserve">
          <source>The time between the first rc release and the final release is supposed to be used to test rc versions and fight bugs and especially regressions. And this time is more than 80% of the release cycle time. But this is not the end of the fight yet, as of course it continues after the release.</source>
          <target state="translated">最初の rc リリースから最終リリースまでの時間は、rc のバージョンをテストし、バグと戦い、特にリグレッションと戦うために使われることになっています。そして、この時間はリリースサイクル時間の80%以上を占めています。しかし、リリース後ももちろん続いているので、これでまだ戦いが終わったわけではありません。</target>
        </trans-unit>
        <trans-unit id="75271c1b7d85cdfdc3bad04249d4464b9c292a44" translate="yes" xml:space="preserve">
          <source>The time of the change is specified by &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; using the date format that was selected by the --date-format=&amp;lt;fmt&amp;gt; command-line option. See &amp;ldquo;Date Formats&amp;rdquo; above for the set of supported formats, and their syntax.</source>
          <target state="translated">変更の時刻は、-date-format = &amp;lt;fmt&amp;gt;コマンドラインオプションで選択された日付形式を使用して、 &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; で指定されます。サポートされている形式のセットとその構文については、上記の「日付形式」を参照してください。</target>
        </trans-unit>
        <trans-unit id="05b9a4ac37ff05623171d65150ac27013efa2fa0" translate="yes" xml:space="preserve">
          <source>The time of the event is specified by &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; as the number of seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII decimal integer.</source>
          <target state="translated">イベントの時間は、UNIXエポック（1970年1月1日午前0時）からの秒数として &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; で指定され、ASCII 10進整数として書き込まれます。</target>
        </trans-unit>
        <trans-unit id="e85bdfa8e02113c7aa36696add629ec632f05440" translate="yes" xml:space="preserve">
          <source>The todo list presented by the deprecated &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; does not represent the topology of the revision graph (use &lt;code&gt;--rebase-merges&lt;/code&gt; instead). Editing commits and rewording their commit messages should work fine, but attempts to reorder commits tend to produce counterintuitive results. Use &lt;code&gt;--rebase-merges&lt;/code&gt; in such scenarios instead.</source>
          <target state="translated">非推奨の &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; によって表示されるtodoリストは、リビジョングラフのトポロジを表していません（代わりに &lt;code&gt;--rebase-merges&lt;/code&gt; を使用してください）。コミットの編集とコミットメッセージの言い換えは問題なく機能するはずですが、コミットの順序を変更しようとすると、直感に反する結果が生じる傾向があります。代わりに、そのようなシナリオでは &lt;code&gt;--rebase-merges&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="0f8166907df228eb9266d7566c3cde991d9d39bd" translate="yes" xml:space="preserve">
          <source>The total number of paths.</source>
          <target state="translated">パスの総数です。</target>
        </trans-unit>
        <trans-unit id="46c0269533706ef03961ed4548e480cdcfd7a84a" translate="yes" xml:space="preserve">
          <source>The trailer records 20-byte SHA-1 checksum of all of the above.</source>
          <target state="translated">トレーラーには、上記のすべての20バイトのSHA-1チェックサムが記録されています。</target>
        </trans-unit>
        <trans-unit id="b9ae27ef547547fea9cd9f5b91bb86a4c8f93238" translate="yes" xml:space="preserve">
          <source>The trailer records a pack checksum of all of the above.</source>
          <target state="translated">トレーラーには上記の全てのパックチェックサムが記録されています。</target>
        </trans-unit>
        <trans-unit id="9380254df0eb0e126f55d72177d625190ab23928" translate="yes" xml:space="preserve">
          <source>The transmission of the packfile begins immediately after the section header</source>
          <target state="translated">パックファイルの送信は、セクションヘッダの直後に開始されます。</target>
        </trans-unit>
        <trans-unit id="de285c430d2e1f897693d7ccc23434e1a3a5c103" translate="yes" xml:space="preserve">
          <source>The tree object is the tree we examined first, and this commit is unusual in that it lacks any parent.</source>
          <target state="translated">ツリーオブジェクトは最初に調べたツリーであり、このコミットは親がいないという珍しいものです。</target>
        </trans-unit>
        <trans-unit id="9178b43dc9b2907a6afd7a3693f2c6894ec0ecd9" translate="yes" xml:space="preserve">
          <source>The tree of actual checked out files. The working tree normally contains the contents of the &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; commit&amp;rsquo;s tree, plus any local changes that you have made but not yet committed.</source>
          <target state="translated">実際にチェックアウトされたファイルのツリー。作業ツリーには通常、&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;コミットのツリーの内容と、加えたがまだコミットされていないローカル変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="26b5c7d70f82997ceabb111adeeb911e4d89a340" translate="yes" xml:space="preserve">
          <source>The tree or commit to produce an archive for.</source>
          <target state="translated">アーカイブを生成するためのツリーまたはコミット。</target>
        </trans-unit>
        <trans-unit id="90f78952a054862b4ed6d79982e2eab2fc081a24" translate="yes" xml:space="preserve">
          <source>The twist is that if some file doesn&amp;rsquo;t match the index, we don&amp;rsquo;t have a backing store thing for it, and we use the magic &quot;all-zero&quot; sha1 to show that. So let&amp;rsquo;s say that you have edited &lt;code&gt;kernel/sched.c&lt;/code&gt;, but have not actually done a &lt;code&gt;git update-index&lt;/code&gt; on it yet - there is no &quot;object&quot; associated with the new state, and you get:</source>
          <target state="translated">ツイストは、一部のファイルがインデックスと一致しない場合、そのバッキングストアがないため、魔法の「すべてゼロ」のsha1を使用してそれを示すことです。では、 &lt;code&gt;kernel/sched.c&lt;/code&gt; を編集したが、実際にはまだ &lt;code&gt;git update-index&lt;/code&gt; を実行していないとしましょう。新しい状態に関連付けられた「オブジェクト」はなく、次のようになります。</target>
        </trans-unit>
        <trans-unit id="43d0ee9ad50c1c3c133c4c2ff3f216463ab119aa" translate="yes" xml:space="preserve">
          <source>The two options can be specified together to ask a command to work on both the index and the working tree.</source>
          <target state="translated">この2つのオプションを一緒に指定すると、インデックスと作業ツリーの両方で動作するようにコマンドを指定することができます。</target>
        </trans-unit>
        <trans-unit id="293c342524c5d665ec090c34f37c73d153be74d5" translate="yes" xml:space="preserve">
          <source>The type of the object (&lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;).</source>
          <target state="translated">オブジェクトのタイプ（ &lt;code&gt;blob&lt;/code&gt; 、 &lt;code&gt;tree&lt;/code&gt; 、 &lt;code&gt;commit&lt;/code&gt; 、 &lt;code&gt;tag&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="35ca6d49608b210b7cf8be4b86261fa4bd55e249" translate="yes" xml:space="preserve">
          <source>The type of the object (the same as &lt;code&gt;cat-file -t&lt;/code&gt; reports).</source>
          <target state="translated">オブジェクトのタイプ（ &lt;code&gt;cat-file -t&lt;/code&gt; レポートと同じ）。</target>
        </trans-unit>
        <trans-unit id="a4f9324e934e3998d2ea50e9e2c5152c5cb8ca76" translate="yes" xml:space="preserve">
          <source>The typical usage is to set just the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; variables; the other options are provided for more complex use cases.</source>
          <target state="translated">一般的な使用法は、 &lt;code&gt;user.name&lt;/code&gt; 変数と &lt;code&gt;user.email&lt;/code&gt; 変数のみを設定することです。他のオプションは、より複雑なユースケースのために提供されています。</target>
        </trans-unit>
        <trans-unit id="4785efb96aaa5561500dccbb8420f79e52290b85" translate="yes" xml:space="preserve">
          <source>The underlying Git plumbing tools, such as &lt;code&gt;git ls-files&lt;/code&gt; and &lt;code&gt;git read-tree&lt;/code&gt;, read &lt;code&gt;gitignore&lt;/code&gt; patterns specified by command-line options, or from files specified by command-line options. Higher-level Git tools, such as &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git add&lt;/code&gt;, use patterns from the sources specified above.</source>
          <target state="translated">&lt;code&gt;git ls-files&lt;/code&gt; や &lt;code&gt;git read-tree&lt;/code&gt; などの基盤となるGit配管ツールは、コマンドラインオプションで指定された &lt;code&gt;gitignore&lt;/code&gt; パターンを読み取るか、コマンドラインオプションで指定されたファイルから読み取ります。 &lt;code&gt;git status&lt;/code&gt; や &lt;code&gt;git add&lt;/code&gt; などの高レベルのGitツールは、上記で指定されたソースのパターンを使用します。</target>
        </trans-unit>
        <trans-unit id="c7717dd458d0c51efaa12d77d8ac91e6b1b7952a" translate="yes" xml:space="preserve">
          <source>The unique identifier of an &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;. The object name is usually represented by a 40 character hexadecimal string. Also colloquially called &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_object&quot;&gt;オブジェクト&lt;/a&gt;の一意の識別子。オブジェクト名は通常、40文字の16進文字列で表されます。口語的に&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="190c2fffcaa0444f677f39ee7f8533684a0964b1" translate="yes" xml:space="preserve">
          <source>The unit of storage in Git. It is uniquely identified by the &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; of its contents. Consequently, an object cannot be changed.</source>
          <target state="translated">Gitでのストレージの単位。コンテンツの&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;によって一意に識別されます。したがって、オブジェクトは変更できません。</target>
        </trans-unit>
        <trans-unit id="39871fae2a5575ced5627a5aed0eb792e4c6cc2e" translate="yes" xml:space="preserve">
          <source>The untracked cache extension can be enabled by the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">追跡されないキャッシュ拡張機能は、 &lt;code&gt;core.untrackedCache&lt;/code&gt; 構成変数（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）ます。</target>
        </trans-unit>
        <trans-unit id="cc7260429a75073116cdc4eb67dbd95326cbd29d" translate="yes" xml:space="preserve">
          <source>The upstream project is expected to have the commit named by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and the output asks it to integrate the changes you made since that commit, up to the commit named by &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;, by visiting the repository named by &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">上流プロジェクトには &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; で指定されたコミットがあると予想され、出力には、そのコミット以降に加えられた変更を、 &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; という名前のリポジトリにアクセス &amp;lt;end&amp;gt;ます。</target>
        </trans-unit>
        <trans-unit id="90c1df21766dd92e926e4168cc9d516f756c7832" translate="yes" xml:space="preserve">
          <source>The upstream reference is generally &lt;code&gt;refs/remotes/p4/master&lt;/code&gt;, but can be overridden using the &lt;code&gt;--origin=&lt;/code&gt; command-line option.</source>
          <target state="translated">上流のリファレンスは一般的に &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; ですが、-- &lt;code&gt;--origin=&lt;/code&gt; コマンドラインオプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="26e6d639f86a47deca57ab3911edaae9c5141f38" translate="yes" xml:space="preserve">
          <source>The user wants to fast-forward to $M.</source>
          <target state="translated">ユーザーは$Mに早送りしたいと思っています。</target>
        </trans-unit>
        <trans-unit id="6df61c6f9e257fdbf1ce4a60fb1d73b618d329ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s color.status configuration is not respected; color will always be off.</source>
          <target state="translated">ユーザーのcolor.status設定は尊重されません。色は常にオフになります。</target>
        </trans-unit>
        <trans-unit id="ab6a20b222f27dba657bc91ae7970effd7a690ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s status.relativePaths configuration is not respected; paths shown will always be relative to the repository root.</source>
          <target state="translated">ユーザーのstatus.relativePaths構成は考慮されません。表示されるパスは、常にリポジトリルートからの相対パスになります。</target>
        </trans-unit>
        <trans-unit id="20126eaca194f3ace1deaba2aaa4133e6326b674" translate="yes" xml:space="preserve">
          <source>The user-provided shell commands will likely involve a pipeline of commands, resulting in the creation of many processes per commit. Creating and running another process takes a widely varying amount of time between operating systems, but on any platform it is very slow relative to invoking a function.</source>
          <target state="translated">ユーザーが提供するシェルコマンドには、コマンドのパイプラインが含まれている可能性が高く、その結果、コミットごとに多くのプロセスが作成されます。別のプロセスを作成して実行するのにかかる時間はオペレーティングシステムによって大きく異なりますが、どのプラットフォームでも関数を呼び出すのに比べて非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="b70cc2efdcbaf68bada34e0550746a0012d52bae" translate="yes" xml:space="preserve">
          <source>The username to use when logging in to the server.</source>
          <target state="translated">サーバーにログインする際に使用するユーザー名。</target>
        </trans-unit>
        <trans-unit id="ed02ee3239772cb9dc0f4dbf65c91bd756125cc7" translate="yes" xml:space="preserve">
          <source>The usual way to deal with this is to use &lt;code&gt;git revert&lt;/code&gt;. This preserves the history that the original change was made and was a valuable contribution, but also introduces a new commit that undoes those changes because the original had a problem. The commit message of the revert indicates the commit which was reverted and is usually edited to include an explanation as to why the revert was made.</source>
          <target state="translated">これに対処する通常の方法は、 &lt;code&gt;git revert&lt;/code&gt; を使用することです。これにより、元の変更が行われ、貴重な貢献であったという履歴が保持されますが、元の変更に問題があったためにそれらの変更を元に戻す新しいコミットも導入されます。復帰のコミットメッセージは、復帰されたコミットを示し、通常、復帰が行われた理由に関する説明を含むように編集されます。</target>
        </trans-unit>
        <trans-unit id="46c33e134557b27ccb1a85349808f80ba518bd84" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;add&lt;/code&gt; (this is the default) and &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">このオプションの有効な値は、 &lt;code&gt;add&lt;/code&gt; （これがデフォルトです）と &lt;code&gt;doNothing&lt;/code&gt; です。です。</target>
        </trans-unit>
        <trans-unit id="17a990c606d2e2e22a8f755a1f843b57ef2f5ef2" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; (this is the default), &lt;code&gt;addIfDifferent&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">このオプションの有効な値は、 &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; （これがデフォルトです）、 &lt;code&gt;addIfDifferent&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;replace&lt;/code&gt; 、または &lt;code&gt;doNothing&lt;/code&gt; です。です。</target>
        </trans-unit>
        <trans-unit id="505e929c5c3b27eed17b03a2625718de5c7f7031" translate="yes" xml:space="preserve">
          <source>The value for a variable that takes a color is a list of colors (at most two, one for foreground and one for background) and attributes (as many as you want), separated by spaces.</source>
          <target state="translated">色を取る変数の値は、スペースで区切られた色(最大でも2つ、前景用と背景用に1つずつ)と属性(必要な数だけ)のリストです。</target>
        </trans-unit>
        <trans-unit id="e1d242fc18797a443a86ba553d48e3f3cae01e9a" translate="yes" xml:space="preserve">
          <source>The value for many variables that specify various sizes can be suffixed with &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;,&amp;hellip;​ to mean &quot;scale the number by 1024&quot;, &quot;by 1024x1024&quot;, etc.</source>
          <target state="translated">さまざまなサイズを指定する多くの変数の値の末尾に &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;M&lt;/code&gt; 、&amp;hellip;を付けると、「1024で数値をスケーリング」、「1024x1024で」などの意味になります。</target>
        </trans-unit>
        <trans-unit id="f1dedc58ec3c676ad597a786553123421e517365" translate="yes" xml:space="preserve">
          <source>The value is a list of three values: a default time zone (for if the client hasn&amp;rsquo;t selected some other time zone and saved it in a cookie), a name of cookie where to store selected time zone, and a CSS class used to mark up dates for manipulation. If you want to turn this feature off, set &quot;default&quot; to empty list: &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">値は3つの値のリストです。デフォルトのタイムゾーン（クライアントが他のタイムゾーンを選択しておらず、Cookieに保存していない場合）、選択したタイムゾーンを保存するCookieの名前、使用するCSSクラス操作の日付をマークアップします。この機能をオフにする場合は、「デフォルト」を空のリストに設定します。 &lt;code&gt;[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0462ada8e80b752f4ecad69fb2563ec0b8b930aa" translate="yes" xml:space="preserve">
          <source>The value of 'default' is a list of names of snapshot formats, defined in &lt;code&gt;%known_snapshot_formats&lt;/code&gt; hash, that you wish to offer. Supported formats include &quot;tgz&quot;, &quot;tbz2&quot;, &quot;txz&quot; (gzip/bzip2/xz compressed tar archive) and &quot;zip&quot;; please consult gitweb sources for a definitive list. By default only &quot;tgz&quot; is offered.</source>
          <target state="translated">'default'の値は、 &lt;code&gt;%known_snapshot_formats&lt;/code&gt; で定義されているスナップショット形式の名前のリストです。ハッシュで、提供する。サポートされる形式には、「tgz」、「tbz2」、「txz」（gzip / bzip2 / xz圧縮tarアーカイブ）、「zip」が含まれます。明確なリストについては、gitwebソースを参照してください。デフォルトでは「tgz」のみが提供されます。</target>
        </trans-unit>
        <trans-unit id="c34b53e9a12553098df9adad4c30762484ffde18" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; must be a valid refname in Git and therefore may contain forward slashes. As &lt;code&gt;LF&lt;/code&gt; is not valid in a Git refname, no quoting or escaping syntax is supported here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; の値はGitで有効なrefnameである必要があるため、スラッシュを含めることができます。 &lt;code&gt;LF&lt;/code&gt; として Gitのもしrefnameでは有効ではありません、何の引用またはエスケープ構文は、ここでサポートされていません。</target>
        </trans-unit>
        <trans-unit id="8b5a30f586808b1827fdb8f433a15c6c9d49f6ba" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; must be in canonical form. That is it must not:</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; の値は、正規の形式でなければなりません。それはそれであってはなりません：</target>
        </trans-unit>
        <trans-unit id="dfb2ec984e9987b1b930824861a3abbf3e4aa29f" translate="yes" xml:space="preserve">
          <source>The value of this attribute specifies the character encoding that should be used by GUI tools (e.g. &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; and &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;) to display the contents of the relevant file. Note that due to performance considerations &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; does not use this attribute unless you manually enable per-file encodings in its options.</source>
          <target state="translated">この属性の値は、関連ファイルのコンテンツを表示するためにGUIツール（たとえば&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;や&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt;）が使用する文字エンコーディングを指定します。オプションでファイルごとのエンコーディングを手動で有効にしない限り、&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;はパフォーマンスを考慮してこの属性を使用しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4bdcd2a8dee01aee6c5f0f23e7e10ac25985aae6" translate="yes" xml:space="preserve">
          <source>The value of this key is the name of the promisor remote.</source>
          <target state="translated">このキーの値は、プロバイザリモートの名前です。</target>
        </trans-unit>
        <trans-unit id="49e3be97b83e2e2d47823db7b33592c5066364cc" translate="yes" xml:space="preserve">
          <source>The version parameter is used to specify the format version. This is optional and defaults to the original version &lt;code&gt;v1&lt;/code&gt; format.</source>
          <target state="translated">versionパラメータは、フォーマットバージョンを指定するために使用されます。これはオプションであり、デフォルトで元のバージョン &lt;code&gt;v1&lt;/code&gt; 形式になります。</target>
        </trans-unit>
        <trans-unit id="a720bc9826a296e909d26ea1e1addd2076945090" translate="yes" xml:space="preserve">
          <source>The victim sends &quot;have&quot; lines advertising the IDs of objects it has that are not explicitly intended to be shared but can be used to optimize the transfer if the peer also has them. The attacker chooses an object ID X to steal and sends a ref to X, but isn&amp;rsquo;t required to send the content of X because the victim already has it. Now the victim believes that the attacker has X, and it sends the content of X back to the attacker later. (This attack is most straightforward for a client to perform on a server, by creating a ref to X in the namespace the client has access to and then fetching it. The most likely way for a server to perform it on a client is to &quot;merge&quot; X into a public branch and hope that the user does additional work on this branch and pushes it back to the server without noticing the merge.)</source>
          <target state="translated">犠牲者は、共有することを明示的に意図されていないオブジェクトのIDをアドバタイズする「have」行を送信しますが、ピアがそれらを持っている場合は転送を最適化するために使用できます。攻撃者は盗むオブジェクトID Xを選択し、Xに参照を送信しますが、被害者がすでに持っているため、Xのコンテンツを送信する必要はありません。これで被害者は攻撃者がXを持っていると信じ、Xの内容を後で攻撃者に送り返します。 （この攻撃は、クライアントがアクセスできるネームスペースにXへの参照を作成してからフェッチすることにより、クライアントがサーバーで実行するのが最も簡単です。サーバーがクライアントで実行する可能性が最も高い方法は、 &quot;マージ &quot;Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュすることを期待します。）</target>
        </trans-unit>
        <trans-unit id="bad569f9e07003c7e9ba90b91ff6d5e2d3ebab92" translate="yes" xml:space="preserve">
          <source>The virtual host configuration (in Apache configuration file) should look like this:</source>
          <target state="translated">(Apache の設定ファイルの)バーチャルホストの設定は以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="6258db9fdd3beac891e6dcfd7dedb19764ce413e" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;git update-index&lt;/code&gt; handles files it is told about can be modified using the various options:</source>
          <target state="translated">道 &lt;code&gt;git update-index&lt;/code&gt; ハンドルファイルは、それが様々なオプションを使用して変更することができますについて語られています：</target>
        </trans-unit>
        <trans-unit id="5fe1a87d113fe93088f754b0185b7bc1cb985816" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using a configuration variable passed with the -c (or --config) command-line option, or the &lt;code&gt;web.browser&lt;/code&gt; configuration variable if the former is not used.</source>
          <target state="translated">Webブラウザーは、-c（または--config）コマンドラインオプションで &lt;code&gt;web.browser&lt;/code&gt; 構成変数、または前者が使用されていない場合はweb.browser構成変数を使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="ae6c5b18c0fd18e4f577ab3723eb5808f05d9f12" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web--browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt; for more information about this.</source>
          <target state="translated">Webブラウザは、構成変数の使用して指定することができ &lt;code&gt;help.browser&lt;/code&gt; 、または &lt;code&gt;web.browser&lt;/code&gt; を前者が設定されていない場合。これらの構成変数のいずれも設定されていない場合、 &lt;code&gt;git web--browse&lt;/code&gt; ヘルパースクリプト（ &lt;code&gt;git help&lt;/code&gt; によって呼び出されます）が適切なデフォルトを選択します。詳細については、&lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc2adc08265063993fb836b81a622f1e26249d55" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See git-web{litdd}browse[1] for more information about this.</source>
          <target state="translated">Webブラウザは、構成変数の使用して指定することができ &lt;code&gt;help.browser&lt;/code&gt; 、または &lt;code&gt;web.browser&lt;/code&gt; を前者が設定されていない場合。これらの構成変数が設定されていない場合、 &lt;code&gt;git web{litdd}browse&lt;/code&gt; ヘルパースクリプト（ &lt;code&gt;git help&lt;/code&gt; によって呼び出されます）が適切なデフォルトを選択します。これについての詳細は、git-web {litdd} browse [1]を参照してください。</target>
        </trans-unit>
        <trans-unit id="d52f23a775c5f3aadffb0193202482a8a4b8d0b1" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web--browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt; for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="translated">gitwebページを表示するために使用する必要があるWebブラウザー。これは、gitweb &lt;code&gt;git web--browse&lt;/code&gt; ヘルパースクリプトにgitwebインスタンスのURLとともに渡されます。詳細については、&lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse [1]&lt;/a&gt;を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="c38f40c77930468f76ac59e3f127231f37c11803" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See git-web{litdd}browse[1] for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="translated">gitwebページの表示に使用する必要があるWebブラウザー。これは、gitwebインスタンスのURLとともに &lt;code&gt;git web{litdd}browse&lt;/code&gt; ヘルパースクリプトに渡されます。これについての詳細は、git-web {litdd} browse [1]を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="c7492cc5fa9e9927a227312bd1f1ea85a3766cb5" translate="yes" xml:space="preserve">
          <source>The width (in characters) of the &quot;Description&quot; column of the projects list. Longer descriptions will be truncated (trying to cut at word boundary); the full description is available in the &lt;code&gt;title&lt;/code&gt; attribute (usually shown on mouseover). The default is 25, which might be too small if you use long project descriptions.</source>
          <target state="translated">プロジェクトリストの[説明]列の幅（文字数）。長い説明は切り捨てられます（単語の境界でカットしようとします）。完全な説明は、 &lt;code&gt;title&lt;/code&gt; 属性で利用できます（通常はマウスオーバーで表示されます）。デフォルトは25ですが、長いプロジェクトの説明を使用する場合は小さすぎる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2a9553b8b798d28f6c8fd9f09980f5b7959498e9" translate="yes" xml:space="preserve">
          <source>The window size parameter used in the delta compression algorithm used by &lt;code&gt;git gc --aggressive&lt;/code&gt;. This defaults to 250, which is a much more aggressive window size than the default &lt;code&gt;--window&lt;/code&gt; of 10.</source>
          <target state="translated">&lt;code&gt;git gc --aggressive&lt;/code&gt; で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメーター。デフォルトは250です。これは、デフォルトの &lt;code&gt;--window&lt;/code&gt; である10 よりもはるかに積極的なウィンドウサイズです。</target>
        </trans-unit>
        <trans-unit id="046739930d5e8946cdceaf820a70c4ac9ebc8d51" translate="yes" xml:space="preserve">
          <source>The working directory then reflects the contents that the project had when it was tagged v2.6.13, and &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; shows two branches, with an asterisk marking the currently checked-out branch:</source>
          <target state="translated">作業ディレクトリは、v2.6.13のタグが付けられたときのプロジェクトの内容を反映し、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;は2つのブランチを示し、アスタリスクは現在チェックアウトされているブランチを示しています。</target>
        </trans-unit>
        <trans-unit id="c76d23bfcb6d4a63fd96acda23f8bee068090518" translate="yes" xml:space="preserve">
          <source>The worktree list command has two output formats. The default format shows the details on a single line with columns. For example:</source>
          <target state="translated">ワークツリーリストコマンドには2つの出力フォーマットがあります。デフォルトのフォーマットでは、詳細を1行に列で表示します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ecaf7c5f30215b083ffbd406549425a7d1040c7d" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git merge topic&lt;/code&gt;&quot; will replay the changes made on the &lt;code&gt;topic&lt;/code&gt; branch since it diverged from &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt;, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">次に、「 &lt;code&gt;git merge topic&lt;/code&gt; 」は、 &lt;code&gt;topic&lt;/code&gt; ブランチに加えられた変更を &lt;code&gt;master&lt;/code&gt; （つまり &lt;code&gt;E&lt;/code&gt; ）から現在のコミット（ &lt;code&gt;C&lt;/code&gt; ）の上に &lt;code&gt;master&lt;/code&gt; まで分岐してから、その結果を新しいコミットに名前とともに記録します。 2つの親コミットと、変更を説明するユーザーからのログメッセージ。</target>
        </trans-unit>
        <trans-unit id="f3bf49c80f1bf671798b336ee7a6337eb982b2bc" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git pull&lt;/code&gt;&quot; will fetch and replay the changes from the remote &lt;code&gt;master&lt;/code&gt; branch since it diverged from the local &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt; and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">そして、「 &lt;code&gt;git pull&lt;/code&gt; 」リモートからの変更フェッチし、再生します &lt;code&gt;master&lt;/code&gt; は、ローカルから分岐するので枝を &lt;code&gt;master&lt;/code&gt; （すなわち、 &lt;code&gt;E&lt;/code&gt; ）の電流が（コミットするまで &lt;code&gt;C&lt;/code&gt; の上に） &lt;code&gt;master&lt;/code&gt; と新しい一緒にコミットして結果を記録します2つの親コミットの名前と、変更を説明するユーザーからのログメッセージ。</target>
        </trans-unit>
        <trans-unit id="44f92500b7ae9560ae64e2f2fc4f1af900d3ff26" translate="yes" xml:space="preserve">
          <source>Then &quot;git bisect&quot; will checkout a commit of its choosing and ask the user to test it, like this:</source>
          <target state="translated">そうすると、&quot;git bisect&quot; は自分で選んだコミットをチェックアウトして、次のようにユーザーにテストを依頼します。</target>
        </trans-unit>
        <trans-unit id="e1ef052a3cd59f805d0ae45d1b9033a6a2faaa95" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;git bisect&lt;/code&gt; will respond with something like</source>
          <target state="translated">その後、 &lt;code&gt;git bisect&lt;/code&gt; は次のような応答を返します</target>
        </trans-unit>
        <trans-unit id="307236a389d15c9e88cc574f3c2b3a0314992840" translate="yes" xml:space="preserve">
          <source>Then compile and test the chosen revision, and afterwards mark the revision as good or bad in the usual manner.</source>
          <target state="translated">その後、選択したリビジョンをコンパイルしてテストし、その後、通常の方法でリビジョンの良し悪しをマークします。</target>
        </trans-unit>
        <trans-unit id="876e252bd62eb2a97f748800c6625b2b00ccfdec" translate="yes" xml:space="preserve">
          <source>Then confirm that the bug persists in a repository created from that stream (many bugs will not, as they really do depend on the exact repository contents):</source>
          <target state="translated">そして、そのストリームから作成されたリポジトリにバグが残っていることを確認してください (多くのバグは正確なリポジトリの内容に依存しているため、バグが残っていないことが多いです)。</target>
        </trans-unit>
        <trans-unit id="87463a5d117dae6022935ddfd68f09bfbb9b0943" translate="yes" xml:space="preserve">
          <source>Then create the following script to get list of project in the format suitable for GITWEB_LIST build configuration variable (or &lt;code&gt;$projects_list&lt;/code&gt; variable in gitweb config):</source>
          <target state="translated">次に、次のスクリプトを作成して、GITWEB_LISTビルド構成変数（またはgitweb configの &lt;code&gt;$projects_list&lt;/code&gt; 変数）に適した形式でプロジェクトのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="b5a742d8577423cd13ed5705b5290de27ff73949" translate="yes" xml:space="preserve">
          <source>Then fixup &quot;master&quot; with &lt;code&gt;git rebase&lt;/code&gt;. Do NOT use &lt;code&gt;git merge&lt;/code&gt; or your history will not be compatible with a future &lt;code&gt;dcommit&lt;/code&gt;!</source>
          <target state="translated">次に &lt;code&gt;git rebase&lt;/code&gt; で「マスター」を修正します。 &lt;code&gt;git merge&lt;/code&gt; を使用しないでください。使用すると、履歴が将来の &lt;code&gt;dcommit&lt;/code&gt; と互換性がなくなります。</target>
        </trans-unit>
        <trans-unit id="78318329e21f0014f75ba54a708b1f46ad0d023c" translate="yes" xml:space="preserve">
          <source>Then it compares the new skip-worktree value with the previous one. If skip-worktree turns from set to unset, it will add the corresponding file back. If it turns from unset to set, that file will be removed.</source>
          <target state="translated">そして、新しいskip-worktreeの値を以前の値と比較します。skip-worktreeがセットからアンセットになった場合は、対応するファイルを元に戻します。セットされていない状態からセットされている状態になった場合、そのファイルは削除されます。</target>
        </trans-unit>
        <trans-unit id="5e9c59419a3e5d8568740259a39319d49129c624" translate="yes" xml:space="preserve">
          <source>Then it examines &lt;code&gt;.gitattributes&lt;/code&gt; (which is in the parent directory), and finds that the first line matches, but &lt;code&gt;t/.gitattributes&lt;/code&gt; file already decided how &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; attributes should be given to this path, so it leaves &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; unset. Attribute &lt;code&gt;baz&lt;/code&gt; is set.</source>
          <target state="translated">次に、それは（親ディレクトリにある） &lt;code&gt;.gitattributes&lt;/code&gt; を調べ、最初の行が一致することを &lt;code&gt;t/.gitattributes&lt;/code&gt; ますが、t / .gitattributesファイルは、このパスに &lt;code&gt;merge&lt;/code&gt; 、 &lt;code&gt;foo&lt;/code&gt; 、および &lt;code&gt;bar&lt;/code&gt; 属性をどのように指定するかをすでに決定しているため、 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; を残します未設定。属性 &lt;code&gt;baz&lt;/code&gt; が設定されています。</target>
        </trans-unit>
        <trans-unit id="1100f313a3d209e54bf3bc725a364711886dbfc4" translate="yes" xml:space="preserve">
          <source>Then modify, reorder, or eliminate patches as needed before applying them again with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;:</source>
          <target state="translated">次に、必要に応じてパッチを変更、並べ替え、または削除してから、&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;を使用して再度適用します。</target>
        </trans-unit>
        <trans-unit id="cd43ef848f2d3c4afb2a44ae28c2a413397c1d96" translate="yes" xml:space="preserve">
          <source>Then provide your password via the pserver method, for example:</source>
          <target state="translated">次に、pserver メソッドを使ってパスワードを入力します。</target>
        </trans-unit>
        <trans-unit id="a774f276f116b48d127c0c1418ef7aa2fe46b49b" translate="yes" xml:space="preserve">
          <source>Then simplify each commit &lt;code&gt;C&lt;/code&gt; to its replacement &lt;code&gt;C'&lt;/code&gt; in the final history according to the following rules:</source>
          <target state="translated">次に、次のルールに従って、各コミット &lt;code&gt;C&lt;/code&gt; を最終履歴の置換 &lt;code&gt;C'&lt;/code&gt; に簡略化します。</target>
        </trans-unit>
        <trans-unit id="2f5d7fdcf8fcb013dcf3c597507de91a5cb0f77d" translate="yes" xml:space="preserve">
          <source>Then simply fork your topic branches from the stable remotes as explained earlier.</source>
          <target state="translated">次に、先ほど説明したように、安定したリモートからトピックのブランチをフォークします。</target>
        </trans-unit>
        <trans-unit id="b19a7b2e2b2e2252f0564256c9b87915d5db46d3" translate="yes" xml:space="preserve">
          <source>Then suppose you modify the last three commits:</source>
          <target state="translated">そして、最後の3つのコミットを修正したとします。</target>
        </trans-unit>
        <trans-unit id="e69e2e34d497710c4127a780d2a5ed5c7d7fac83" translate="yes" xml:space="preserve">
          <source>Then there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.</source>
          <target state="translated">小さいリポジトリを手に入れるには2つの方法があります。より安全な方法はクローンを作ることです。</target>
        </trans-unit>
        <trans-unit id="5c871054b486e3acaf28dc409c1ab3e693b4fc90" translate="yes" xml:space="preserve">
          <source>Then this &lt;code&gt;git p4 clone&lt;/code&gt; command:</source>
          <target state="translated">次に、この &lt;code&gt;git p4 clone&lt;/code&gt; コマンド：</target>
        </trans-unit>
        <trans-unit id="db9b57b987ef397bc0b191d278e31ed2d827cb0a" translate="yes" xml:space="preserve">
          <source>Then you can disable sparse checkout. Sparse checkout support in &lt;code&gt;git read-tree&lt;/code&gt; and similar commands is disabled by default. You need to turn &lt;code&gt;core.sparseCheckout&lt;/code&gt; on in order to have sparse checkout support.</source>
          <target state="translated">次に、スパースチェックアウトを無効にできます。 &lt;code&gt;git read-tree&lt;/code&gt; および同様のコマンドでのスパースチェックアウトのサポートは、デフォルトでは無効になっています。スパースチェックアウトをサポートするには、 &lt;code&gt;core.sparseCheckout&lt;/code&gt; をオンにする必要があります。</target>
        </trans-unit>
        <trans-unit id="87a33f516a8ffec885e906dbb29e388a5f30ada0" translate="yes" xml:space="preserve">
          <source>Then you can pull and merge, leaving &lt;code&gt;frotz.c&lt;/code&gt; and &lt;code&gt;filfre.c&lt;/code&gt; changes still in the working tree.</source>
          <target state="translated">次に、プルしてマージし、作業ツリーに &lt;code&gt;frotz.c&lt;/code&gt; と &lt;code&gt;filfre.c&lt;/code&gt; の変更を残します。</target>
        </trans-unit>
        <trans-unit id="fa280cd97c17d646b4ce0e60bbbcb27953b34fb3" translate="yes" xml:space="preserve">
          <source>Then you can push both the test and release trees using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;:</source>
          <target state="translated">次に、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;を使用して、テストツリーとリリースツリーの両方をプッシュできます。</target>
        </trans-unit>
        <trans-unit id="9015e54306232b9477b76c544780cb6cb29e184c" translate="yes" xml:space="preserve">
          <source>Then you might want a &lt;code&gt;.mailmap&lt;/code&gt; file that looks like:</source>
          <target state="translated">次に、次のような &lt;code&gt;.mailmap&lt;/code&gt; ファイルが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="bdefcc2b7f4d341c71ca424367a0164c209ac375" translate="yes" xml:space="preserve">
          <source>Then you transfer file.bundle to the target machine B. Because this bundle does not require any existing object to be extracted, you can create a new repository on machine B by cloning from it:</source>
          <target state="translated">そして、対象のマシンBにfile.bundleを転送します。このbundleは既存のオブジェクトを抽出する必要がないので、マシンBにクローンして新しいリポジトリを作成することができます。</target>
        </trans-unit>
        <trans-unit id="e826c3727c0c79aa7b30f2352881ef1c5a35f171" translate="yes" xml:space="preserve">
          <source>Then you would define a &quot;filter.indent.clean&quot; and &quot;filter.indent.smudge&quot; configuration in your .git/config to specify a pair of commands to modify the contents of C programs when the source files are checked in (&quot;clean&quot; is run) and checked out (no change is made because the command is &quot;cat&quot;).</source>
          <target state="translated">そして、.git/config で &quot;filter.indent.clean&quot; と &quot;filter.indent.smudge&quot; の設定を定義し、ソースファイルがチェックインされたとき(&quot;clean&quot; を実行したとき)とチェックアウトされたとき (コマンドが &quot;cat&quot; なので変更はありません)に C プログラムの内容を変更するコマンドのペアを指定します。</target>
        </trans-unit>
        <trans-unit id="c6308f4c83137c8ddf705f0b33927bc3a2a2d3bf" translate="yes" xml:space="preserve">
          <source>Then, make that directory into a Git repository by running &lt;code&gt;git init&lt;/code&gt;, but this time, since its name is not the usual &lt;code&gt;.git&lt;/code&gt;, we do things slightly differently:</source>
          <target state="translated">次に、 &lt;code&gt;git init&lt;/code&gt; を実行して、そのディレクトリをGitリポジトリーに作成しますが、今回は、その名前が通常の &lt;code&gt;.git&lt;/code&gt; ではないため、処理が少し異なります。</target>
        </trans-unit>
        <trans-unit id="4d45e0228f3dfbda52666260c02f45c435d7f13c" translate="yes" xml:space="preserve">
          <source>Then, use &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; and &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; instead of &lt;code&gt;git bisect good&lt;/code&gt; and &lt;code&gt;git bisect bad&lt;/code&gt; to mark commits.</source>
          <target state="translated">次に、コミットをマークするために &lt;code&gt;git bisect good&lt;/code&gt; および &lt;code&gt;git bisect bad&lt;/code&gt; の代わりに &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; および &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4891bcd6061a60561c6585b63258de3d0b8b270b" translate="yes" xml:space="preserve">
          <source>Then, you can adjust your push URL to use &lt;code&gt;git@example_author&lt;/code&gt; or &lt;code&gt;git@example_committer&lt;/code&gt; instead of &lt;code&gt;git@example.org&lt;/code&gt; (e.g., &lt;code&gt;git remote set-url
git@example_author:org1/project1.git&lt;/code&gt;).</source>
          <target state="translated">次に、プッシュURLを調整して、 &lt;code&gt;git@example_committer&lt;/code&gt; &lt;code&gt;git@example.org&lt;/code&gt; 代わりに &lt;code&gt;git@example_author&lt;/code&gt; またはgit @ example_committerを使用できます（例： &lt;code&gt;git remote set-url git@example_author:org1/project1.git&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b100177b4f5d14520d5631ccbd2bc2ff52393e78" translate="yes" xml:space="preserve">
          <source>Then, you run this command:</source>
          <target state="translated">そして、このコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ebbdc2314a6104dc9178c4c9ed7835ad78f84727" translate="yes" xml:space="preserve">
          <source>Then, you would define a &quot;diff.tex.xfuncname&quot; configuration to specify a regular expression that matches a line that you would want to appear as the hunk header &quot;TEXT&quot;. Add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">次に、「diff.tex.xfuncname」構成を定義して、ハンクヘッダー「TEXT」として表示する行に一致する正規表現を指定します。次のように、セクションを &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）に追加します。</target>
        </trans-unit>
        <trans-unit id="8d94c9456285c171a8f18dcac7b76fd1fccc9ff4" translate="yes" xml:space="preserve">
          <source>There are (number of parents + 1) &lt;code&gt;@&lt;/code&gt; characters in the chunk header for combined diff format.</source>
          <target state="translated">結合されたdiff形式のチャンクヘッダーには（親の数+ 1） &lt;code&gt;@&lt;/code&gt; 文字があります。</target>
        </trans-unit>
        <trans-unit id="f7e9cf96a6ce9ed5c513750352c4736c076b5145" translate="yes" xml:space="preserve">
          <source>There are CPP wrapper macros and ifdefs to hide most of these details. See &lt;code&gt;trace2.h&lt;/code&gt; for more details. The following discussion will only describe the simplified forms.</source>
          <target state="translated">これらの詳細のほとんどを非表示にするCPPラッパーマクロとifdefsがあります。詳細については、 &lt;code&gt;trace2.h&lt;/code&gt; を参照してください。以下の説明では、簡略化された形式についてのみ説明します。</target>
        </trans-unit>
        <trans-unit id="e4287f1e47cb2bfc1b9e5f25165aef43ceec9d6c" translate="yes" xml:space="preserve">
          <source>There are a few built-in low-level merge drivers defined that can be asked for via the &lt;code&gt;merge&lt;/code&gt; attribute.</source>
          <target state="translated">いくつかの組み込みの低レベルマージドライバーが定義されており、それらは &lt;code&gt;merge&lt;/code&gt; 属性を介して要求できます。</target>
        </trans-unit>
        <trans-unit id="12f3989319ea3c0cba3d029a62ee2c306fd0616b" translate="yes" xml:space="preserve">
          <source>There are a few built-in patterns to make this easier, and &lt;code&gt;tex&lt;/code&gt; is one of them, so you do not have to write the above in your configuration file (you still need to enable this with the attribute mechanism, via &lt;code&gt;.gitattributes&lt;/code&gt;). The following built in patterns are available:</source>
          <target state="translated">これを簡単にする組み込みパターンがいくつかあり、 &lt;code&gt;tex&lt;/code&gt; はその1つなので、構成ファイルに上記を書き込む必要はありません（ &lt;code&gt;.gitattributes&lt;/code&gt; を介して、属性メカニズムでこれを有効にする必要があります）。次の組み込みパターンを使用できます。</target>
        </trans-unit>
        <trans-unit id="336d04ab3583042f88f12edf2d051324b94f62a0" translate="yes" xml:space="preserve">
          <source>There are a few issues to resolve before we can completely switch to Trace2.</source>
          <target state="translated">Trace2に完全に切り替える前に、いくつかの問題を解決する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8e0813ee0029806de1de3d5b367acd9c0a0d07d" translate="yes" xml:space="preserve">
          <source>There are a few more behavioral differences that most folks would probably consider inconsequential but which are mentioned for completeness:</source>
          <target state="translated">ほとんどの人がおそらく取るに足らないことを考慮するだろうが、完全性のために言及されている行動の違いがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f553cccafe9fdfa62552e6e1af4be573be245c47" translate="yes" xml:space="preserve">
          <source>There are a few special-purpose refs that do not begin with &lt;code&gt;refs/&lt;/code&gt;. The most notable example is &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refs/&lt;/code&gt; 始まらない特殊用途の参照がいくつかあります。最も注目すべき例は &lt;code&gt;HEAD&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc9f53378dabd08666f7e5c5af2a717dbbd37e28" translate="yes" xml:space="preserve">
          <source>There are a number of factors which affect how much memory fast-import requires to perform an import. Like critical sections of core Git, fast-import uses its own memory allocators to amortize any overheads associated with malloc. In practice fast-import tends to amortize any malloc overheads to 0, due to its use of large block allocations.</source>
          <target state="translated">fast-import がインポートを実行するために必要なメモリ量には、いくつかの要因があります。コアとなる Git の重要な部分と同様に、fast-import は独自のメモリアロケータを使用して malloc に関連するオーバーヘッドを償却します。実際のところ、fast-import は大規模なブロックアロケーションを使用しているため、malloc のオーバーヘッドはすべて 0 になる傾向にあります。</target>
        </trans-unit>
        <trans-unit id="e0b2b532209e8b05d8ee20f67e782301986fd65a" translate="yes" xml:space="preserve">
          <source>There are also cases where existing indexes written by git versions before 2.17 will reference directories that don&amp;rsquo;t exist anymore, potentially causing many &quot;could not open directory&quot; warnings to be printed on &quot;git status&quot;. These are new warnings for existing issues that were previously silently discarded.</source>
          <target state="translated">2.17より前のgitバージョンで記述された既存のインデックスが、存在しないディレクトリを参照する場合もあり、「git status」に「ディレクトリを開けませんでした」という警告が表示される可能性があります。これらは、以前は黙って破棄されていた既存の問題に対する新しい警告です。</target>
        </trans-unit>
        <trans-unit id="aec0acb7fb7522f7c5da2df9b13975842cb9d1be" translate="yes" xml:space="preserve">
          <source>There are also more complex operations that can be performed. But beware that because the patch is applied only to the index and not the working tree, the working tree will appear to &quot;undo&quot; the change in the index. For example, introducing a new line into the index that is in neither the HEAD nor the working tree will stage the new line for commit, but the line will appear to be reverted in the working tree.</source>
          <target state="translated">もっと複雑な操作を行うこともできます。しかし、パッチはインデックスにのみ適用され、作業ツリーには適用されないので、作業ツリーはインデックスの変更を「元に戻す」ように見えることに注意してください。例えば、HEAD にも作業ツリーにもない新しい行をインデックスに導入すると、その行はコミットのためにステージされますが、その行は作業ツリーでは元に戻されているように見えます。</target>
        </trans-unit>
        <trans-unit id="a266660a35cd18470141c43d8a3ffa2b3074c06a" translate="yes" xml:space="preserve">
          <source>There are also other situations that cause dangling objects. For example, a &quot;dangling blob&quot; may arise because you did a &lt;code&gt;git add&lt;/code&gt; of a file, but then, before you actually committed it and made it part of the bigger picture, you changed something else in that file and committed that &lt;strong&gt;updated&lt;/strong&gt; thing&amp;mdash;​the old state that you added originally ends up not being pointed to by any commit or tree, so it&amp;rsquo;s now a dangling blob object.</source>
          <target state="translated">ぶら下がりオブジェクトを引き起こす他の状況もあります。例えば、「ダングリングブロブは、」あなたがしたので、発生する可能性 &lt;code&gt;git add&lt;/code&gt; あなたが実際にそれをコミットし、それより大きな絵の一部なさ前に、そのファイルのを、しかし、あなたはそのファイルに何かを変更していることをコミット&lt;strong&gt;更新します&lt;/strong&gt; thing-元々追加した古い状態は、コミットやツリーによってポイントされないため、ぶら下がっているblobオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="232088d916b340ecad3098c72c2ebccbe30b76e5" translate="yes" xml:space="preserve">
          <source>There are also several operations which should be avoided entirely, as they will make the patch impossible to apply:</source>
          <target state="translated">また、パッチを貼ることが不可能になるので、完全に避けるべき操作もいくつかあります。</target>
        </trans-unit>
        <trans-unit id="eeb0752be9462c9bd2e54575f2023419e06b3d3b" translate="yes" xml:space="preserve">
          <source>There are also ways to automate the bisecting process if you have a test script that can tell a good from a bad commit. See &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; for more information about this and other &lt;code&gt;git
bisect&lt;/code&gt; features.</source>
          <target state="translated">悪いコミットから良いことを伝えることができるテストスクリプトがある場合、二分するプロセスを自動化する方法もあります。これと他の &lt;code&gt;git bisect&lt;/code&gt; 機能の詳細については、&lt;a href=&quot;git-bisect&quot;&gt;git-bisect [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="753d0dde7d0dbacd496fb113e3e96e5ea6d9494d" translate="yes" xml:space="preserve">
          <source>There are four different types of objects: &quot;blob&quot;, &quot;tree&quot;, &quot;commit&quot;, and &quot;tag&quot;.</source>
          <target state="translated">オブジェクトには4つの種類があります。&quot;blob」「tree」「commit」「tag」です。</target>
        </trans-unit>
        <trans-unit id="a3d0232ce28c94288cf502f722ca216e09b8c5b1" translate="yes" xml:space="preserve">
          <source>There are implementations of Git that do not leave usable values in some fields (e.g. JGit); by excluding these fields from the comparison, the &lt;code&gt;minimal&lt;/code&gt; mode may help interoperability when the same repository is used by these other systems at the same time.</source>
          <target state="translated">一部のフィールド（JGitなど）に使用可能な値を残さないGitの実装があります。これらのフィールドを比較から除外することにより、 &lt;code&gt;minimal&lt;/code&gt; モードは、同じリポジトリがこれらの他のシステムによって同時に使用される場合の相互運用性に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ac26d523869587e187089ca0cfe8dfa88bde0428" translate="yes" xml:space="preserve">
          <source>There are many more; see the &quot;SPECIFYING REVISIONS&quot; section of the &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; man page for the complete list of ways to name revisions. Some examples:</source>
          <target state="translated">他にもたくさんあります。リビジョンに名前を付ける方法の完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt; manページの「SPECIFYING REVISIONS」セクションを参照してください。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="caa64d4f477bb9cc6ae8b8763c8d93ec4bfb0cef" translate="yes" xml:space="preserve">
          <source>There are no facilities for helping users find what unwanted crud they should delete, which means they are much more likely to have incomplete or partial cleanups that sometimes result in confusion and people wasting time trying to understand. (For example, folks tend to just look for big files to delete instead of big directories or extensions, and once they do so, then sometime later folks using the new repository who are going through history will notice a build artifact directory that has some files but not others, or a cache of dependencies (node_modules or similar) which couldn&amp;rsquo;t have ever been functional since it&amp;rsquo;s missing some files.)</source>
          <target state="translated">ユーザーが削除する必要のある不要なクラッドを見つけるための機能はありません。つまり、不完全または部分的なクリーンアップが行われる可能性が高く、混乱を招き、理解に時間を費やすことになります。（たとえば、人々は大きなディレクトリや拡張機能の代わりに削除する大きなファイルを探す傾向があり、そうすると、後で新しいリポジトリを使用して履歴を調べている人々は、いくつかのファイルを持つビルドアーティファクトディレクトリに気付くでしょう他のものではなく、依存関係のキャッシュ（node_modulesなど）もあり、一部のファイルが見つからないため機能することができませんでした。）</target>
        </trans-unit>
        <trans-unit id="ce4a9f9a1026ea763732ff998a2bcfb7b60f26ca" translate="yes" xml:space="preserve">
          <source>There are no public Trace2 data structures.</source>
          <target state="translated">公開されているTrace2のデータ構造はありません。</target>
        </trans-unit>
        <trans-unit id="5a1dbdef2a9d4fcde2fec24ad984bfc7ec6f3aa2" translate="yes" xml:space="preserve">
          <source>There are numerous other tools, such as StGit, which exist for the purpose of maintaining a patch series. These are outside of the scope of this manual.</source>
          <target state="translated">StGit のような、パッチシリーズを維持するためのツールは他にも数多く存在します。これらはこのマニュアルの範囲外です。</target>
        </trans-unit>
        <trans-unit id="306721e74c73edf4b4a1c2554be600724c25d3f0" translate="yes" xml:space="preserve">
          <source>There are other estimates saying that 80% of the cost related to software is about maintenance &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="translated">ソフトウェアに関連するコストの80％はメンテナンスに関するものであると言っている他の推定があります&lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7eccee0caa41472aded0ea349d3d3fa4831b32ab" translate="yes" xml:space="preserve">
          <source>There are other real-world examples of using update and post-update hooks found in the Documentation/howto directory.</source>
          <target state="translated">他にも、Documentation/howtoディレクトリにある更新フックや更新後フックを使用する実例があります。</target>
        </trans-unit>
        <trans-unit id="ddc4304f0c733f93eaa36c71971b210be6c86baa" translate="yes" xml:space="preserve">
          <source>There are several built-in formats, and you can define additional formats by setting a pretty.&amp;lt;name&amp;gt; config option to either another format name, or a &lt;code&gt;format:&lt;/code&gt; string, as described below (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). Here are the details of the built-in formats:</source>
          <target state="translated">いくつかの組み込み形式があり、pretty。&amp;lt;name&amp;gt;構成オプションを別の形式名または &lt;code&gt;format:&lt;/code&gt; 文字列に設定することで、追加の形式を定義できます（以下で説明します（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。組み込みフォーマットの詳細は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="172e083c83bf7e6cbde177805c61722f6bdc0777" translate="yes" xml:space="preserve">
          <source>There are some numbers about bugs in general, like a NIST study in 2002 &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; that said:</source>
          <target state="translated">2002年のNISTの調査&lt;a href=&quot;#1&quot;&gt;[1]の&lt;/a&gt;ように、一般的にバグについていくつかの数値があります。</target>
        </trans-unit>
        <trans-unit id="1a73feb2f257a54073e6e874ef78ceeefd47d29e" translate="yes" xml:space="preserve">
          <source>There are some subtle differences how the backends behave.</source>
          <target state="translated">バックエンドの挙動には微妙な違いがあります。</target>
        </trans-unit>
        <trans-unit id="a41ebe77f2eb54fbd4f30714a2e14c8c1d436ea0" translate="yes" xml:space="preserve">
          <source>There are three commands with similar names: &lt;code&gt;git reset&lt;/code&gt;, &lt;code&gt;git restore&lt;/code&gt; and &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">同じような名前の3つのコマンドがあります： &lt;code&gt;git reset&lt;/code&gt; 、 &lt;code&gt;git restore&lt;/code&gt; 、 &lt;code&gt;git revert&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="27e17ed315eeb27fa67bd10d3870c4d2deb8a92d" translate="yes" xml:space="preserve">
          <source>There are three different approaches: use an add-on to turn off line wraps, configure Thunderbird to not mangle patches, or use an external editor to keep Thunderbird from mangling the patches.</source>
          <target state="translated">3つの異なるアプローチがあります:アドオンを使用してラインラップをオフにする、Thunderbird がパッチをつぶさないように設定する、外部エディタを使用して Thunderbird がパッチをつぶさないようにする、です。</target>
        </trans-unit>
        <trans-unit id="8c553f5839a8296a42918c5ea6f6a2fcca19fa49" translate="yes" xml:space="preserve">
          <source>There are three main tools that can be used for this:</source>
          <target state="translated">そのためのツールは大きく分けて3つあります。</target>
        </trans-unit>
        <trans-unit id="86e24f426735724adb9ab7ea59c461905251e8e9" translate="yes" xml:space="preserve">
          <source>There are three ways to specify which refs to update on the remote end.</source>
          <target state="translated">リモート側で更新する参照を指定する方法は3つあります。</target>
        </trans-unit>
        <trans-unit id="5544b2d42620b4375dbc730230171fe04b9f972b" translate="yes" xml:space="preserve">
          <source>There are two different types of capabilities: normal capabilities, which can be used to convey information or alter the behavior of a request, and commands, which are the core actions that a client wants to perform (fetch, push, etc).</source>
          <target state="translated">能力には2つの異なるタイプがあります:情報を伝えたりリクエストの動作を変更したりするために使われる通常の能力と、クライアントが実行したいコアアクション(フェッチやプッシュなど)であるコマンドです。</target>
        </trans-unit>
        <trans-unit id="c2015c03c4c8786233c499c7815e06c17100a16b" translate="yes" xml:space="preserve">
          <source>There are two formats accepted for patch files:</source>
          <target state="translated">パッチファイルには2つのフォーマットがあります。</target>
        </trans-unit>
        <trans-unit id="9b5e9b84c7e0cf0cc62bfad7ffc7f5a42847bbc1" translate="yes" xml:space="preserve">
          <source>There are two kinds of fixes, discussed in the following subsections:</source>
          <target state="translated">修正には2種類あり、以下のサブセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="afe3df249e404830655fd820b0b8e96397ac9183" translate="yes" xml:space="preserve">
          <source>There are two main tools that can be used to include changes from one branch on another: &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; and &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;.</source>
          <target state="translated">あるブランチから別のブランチへの変更を含めるために使用できる2つの主要なツールがあります：&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;と&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1432c9def859812f2dcccb492cbe2b422538cffb" translate="yes" xml:space="preserve">
          <source>There are two ways to specify which commits to operate on.</source>
          <target state="translated">どのコミットを操作するかを指定するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="04a6eae6f43fc050171fa2270096884eaba0fee3" translate="yes" xml:space="preserve">
          <source>There is a difference between listing multiple &amp;lt;refspec&amp;gt; directly on &lt;em&gt;git pull&lt;/em&gt; command line and having multiple &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; entries in your configuration for a &amp;lt;repository&amp;gt; and running a &lt;em&gt;git pull&lt;/em&gt; command without any explicit &amp;lt;refspec&amp;gt; parameters. &amp;lt;refspec&amp;gt;s listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote ref, &lt;em&gt;git pull&lt;/em&gt; will create an Octopus merge. On the other hand, if you do not list any explicit &amp;lt;refspec&amp;gt; parameter on the command line, &lt;em&gt;git pull&lt;/em&gt; will fetch all the &amp;lt;refspec&amp;gt;s it finds in the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; configuration and merge only the first &amp;lt;refspec&amp;gt; found into the current branch. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one-go by fetching more than one is often useful.</source>
          <target state="translated">&lt;em&gt;git pull&lt;/em&gt;コマンドラインで複数の&amp;lt;refspec&amp;gt;を直接一覧表示することと、&amp;lt;repository&amp;gt;の構成に複数の &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; エントリを指定することと、明示的な&amp;lt;refspec&amp;gt;パラメーターなしで&lt;em&gt;git pull&lt;/em&gt;コマンドを実行することには違いがあります。コマンドラインで明示的にリストされた&amp;lt;refspec&amp;gt;は、フェッチ後に常に現在のブランチにマージされます。言い換えると、複数のリモート参照をリストする場合、&lt;em&gt;git pull&lt;/em&gt;はOctopusマージを作成します。一方、コマンドラインで明示的な&amp;lt;refspec&amp;gt;パラメーターを指定しない場合、&lt;em&gt;git pull&lt;/em&gt;は、 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; で見つかったすべての&amp;lt;refspec&amp;gt;をフェッチします。&amp;lt;repository&amp;gt; .fetch構成し、最初の&amp;lt;refspec&amp;gt;のみを現在のブランチにマージします。これは、リモート参照からタコを作成することはめったに行われないためです。一方、複数のリモートヘッドを1つ以上フェッチすることにより、複数のリモートヘッドを1度に追跡することは便利です。</target>
        </trans-unit>
        <trans-unit id="08d27e369ae02f07111163548604defe0fd7ba02" translate="yes" xml:space="preserve">
          <source>There is a fourth official branch that is used slightly differently:</source>
          <target state="translated">4つ目の公式支部があり、少しずつ使い分けています。</target>
        </trans-unit>
        <trans-unit id="3ab0818052937d36eff9b5a2767bc99b339b1151" translate="yes" xml:space="preserve">
          <source>There is a script in contrib/thunderbird-patch-inline which can help you include patches with Thunderbird in an easy way. To use it, do the steps above and then use the script as the external editor.</source>
          <target state="translated">contrib/thunderbird-patch-inlineにスクリプトがあり、Thunderbirdのパッチを簡単な方法で含めるのに役立ちます。これを使用するには、上記の手順を行い、スクリプトを外部エディタとして使用してください。</target>
        </trans-unit>
        <trans-unit id="1232149fc68bcd969b013f8dcdb8f804dc24a0d6" translate="yes" xml:space="preserve">
          <source>There is a tradeoff of course: merges require a more careful branch management. The following subsections discuss the important points.</source>
          <target state="translated">もちろんトレードオフもあります:合併には、より慎重な支店管理が必要です。以下のサブセクションでは、重要なポイントについて説明します。</target>
        </trans-unit>
        <trans-unit id="dad64266cc32a47cdf74ec10317455f91f86159c" translate="yes" xml:space="preserve">
          <source>There is already a project called BBChop created by Ealdwulf Wuffinga on Github that does something like that using Bayesian Search Theory &lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;:</source>
          <target state="translated">Eitwulf WuffingaによってGithubに作成されたBBChopと呼ばれるプロジェクトがすでにあり、ベイジアン検索理論を使用してそのようなことをしています&lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="72c8cb7314c2d9e687a4188f4607320887a3abaf" translate="yes" xml:space="preserve">
          <source>There is also a deprecated &lt;code&gt;[section.subsection]&lt;/code&gt; syntax. With this syntax, the subsection name is converted to lower-case and is also compared case sensitively. These subsection names follow the same restrictions as section names.</source>
          <target state="translated">非推奨の &lt;code&gt;[section.subsection]&lt;/code&gt; 構文もあります。この構文では、サブセクション名は小文字に変換され、大文字と小文字を区別して比較されます。これらのサブセクション名は、セクション名と同じ制限に従います。</target>
        </trans-unit>
        <trans-unit id="562a7aac41f0a6a2b8bd94c80ba1df49ae8c2861" translate="yes" xml:space="preserve">
          <source>There is also an alternate -z format recommended for machine parsing. In that format, the status field is the same, but some other things change. First, the &lt;code&gt;-&amp;gt;&lt;/code&gt; is omitted from rename entries and the field order is reversed (e.g &lt;code&gt;from -&amp;gt; to&lt;/code&gt; becomes &lt;code&gt;to from&lt;/code&gt;). Second, a NUL (ASCII 0) follows each filename, replacing space as a field separator and the terminating newline (but a space still separates the status field from the first filename). Third, filenames containing special characters are not specially formatted; no quoting or backslash-escaping is performed.</source>
          <target state="translated">マシンの解析に推奨される代替の-z形式もあります。その形式では、ステータスフィールドは同じですが、他のいくつかが変更されます。まず、 &lt;code&gt;-&amp;gt;&lt;/code&gt; （例えば名前変更エントリから省略され、フィールドの順序を逆にする &lt;code&gt;from -&amp;gt; to&lt;/code&gt; なり &lt;code&gt;to from&lt;/code&gt; ）。次に、NUL（ASCII 0）が各ファイル名の後に続き、フィールド区切り文字と終了改行としてスペースを置き換えます（ただし、スペースは最初のファイル名からステータスフィールドを分離します）。3番目に、特殊文字を含むファイル名は特別にフォーマットされていません。引用やバックスラッシュエスケープは実行されません。</target>
        </trans-unit>
        <trans-unit id="23b53316aea0dd64f8f21ea0eae539235bf45a74" translate="yes" xml:space="preserve">
          <source>There is also an option to sort by versions, this can be done by using the fieldname &lt;code&gt;version:refname&lt;/code&gt; or its alias &lt;code&gt;v:refname&lt;/code&gt;.</source>
          <target state="translated">バージョンでソートするオプションもあります。これは、フィールド名 &lt;code&gt;version:refname&lt;/code&gt; またはそのエイリアス &lt;code&gt;v:refname&lt;/code&gt; を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="490f0c7223e032436f3ed74187899d6766a21bb5" translate="yes" xml:space="preserve">
          <source>There is another common situation where you may encounter non-fast-forward rejection when you try to push, and it is possible even when you are pushing into a repository nobody else pushes into. After you push commit A yourself (in the first picture in this section), replace it with &quot;git commit --amend&quot; to produce commit B, and you try to push it out, because forgot that you have pushed A out already. In such a case, and only if you are certain that nobody in the meantime fetched your earlier commit A (and started building on top of it), you can run &quot;git push --force&quot; to overwrite it. In other words, &quot;git push --force&quot; is a method reserved for a case where you do mean to lose history.</source>
          <target state="translated">もうひとつ、プッシュしようとすると非フォワード拒否に遭遇するというよくある状況がありますが、これは誰もプッシュしていないリポジトリにプッシュしている場合でも起こりうることです。コミット A を自分でプッシュした後 (このセクションの最初の画像)、それを &quot;git commit --amend&quot; に置き換えてコミット B を生成し、プッシュしようとしたときに、すでに A をプッシュしたことを忘れていたためにプッシュアウトしようとしたとしましょう。このような場合、そしてその間に誰もあなたの以前のコミット A をフェッチしていない (そしてその上でビルドを開始している)という確信がある場合に限り、&quot;git push --force&quot; を実行してそれを上書きすることができます。言い換えれば、&quot;git push --force&quot; は履歴をなくしたいときのために予約されたメソッドです。</target>
        </trans-unit>
        <trans-unit id="8a8fda27a5ab0014e2c03663c10e41e5858f14f1" translate="yes" xml:space="preserve">
          <source>There is another simplification mode available:</source>
          <target state="translated">もう一つの簡略化モードがあります。</target>
        </trans-unit>
        <trans-unit id="76938def2c927fda8d1c815e17291d57380d4a8a" translate="yes" xml:space="preserve">
          <source>There is another tweak in the bisection algorithm that has not been described in the &quot;bisection algorithm&quot; above.</source>
          <target state="translated">上の「二分法アルゴリズム」では説明されていないもう一つの微調整があります。</target>
        </trans-unit>
        <trans-unit id="6cd697be600e420b39bb68cc6d967c4ceca70af4" translate="yes" xml:space="preserve">
          <source>There is no option for &lt;code&gt;git rm&lt;/code&gt; to remove from the index only the paths that have disappeared from the filesystem. However, depending on the use case, there are several ways that can be done.</source>
          <target state="translated">&lt;code&gt;git rm&lt;/code&gt; がファイルシステムから消えたパスのみをインデックスから削除するオプションはありません。ただし、ユースケースに応じて、実行できるいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="60bcaa98facce6fa9b4916fcb4556840549eaf70" translate="yes" xml:space="preserve">
          <source>There is no other restriction on the replaced and replacement objects. Merge commits can be replaced by non-merge commits and vice versa.</source>
          <target state="translated">置換オブジェクトと置換オブジェクトには他に制限はありません。マージコミットは非マージコミットで置き換えることができ、その逆も可能です。</target>
        </trans-unit>
        <trans-unit id="5b920fe2651a1acef3f4de11b5f87d418bf37e32" translate="yes" xml:space="preserve">
          <source>There is now a new commit &lt;code&gt;e&lt;/code&gt;, but it is referenced only by &lt;code&gt;HEAD&lt;/code&gt;. We can of course add yet another commit in this state:</source>
          <target state="translated">現在、新しいコミット &lt;code&gt;e&lt;/code&gt; がありますが、それは &lt;code&gt;HEAD&lt;/code&gt; によってのみ参照されます。もちろん、この状態でさらに別のコミットを追加できます。</target>
        </trans-unit>
        <trans-unit id="e84a3494173a3e4e1765afc114a7bb8588db5e4e" translate="yes" xml:space="preserve">
          <source>There is one special case not mentioned above, which is treated differently. Normally, a merge results in a merge commit, with two parents, one pointing at each of the two lines of development that were merged.</source>
          <target state="translated">上記では触れられていない特別なケースがありますが、これは別の扱いになります。通常、マージの結果はマージコミットとなります。</target>
        </trans-unit>
        <trans-unit id="9c233ac02212216497063926a3cd425b73c1b106" translate="yes" xml:space="preserve">
          <source>There may be other problems when using &lt;code&gt;git rev-list&lt;/code&gt; related to pending objects.</source>
          <target state="translated">保留中のオブジェクトに関連する &lt;code&gt;git rev-list&lt;/code&gt; を使用すると、他の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3cc97d3b58e95d007d294ed252208117b7ea36ad" translate="yes" xml:space="preserve">
          <source>There was a discussion at one point on the linux kernel mailing list of whether it was ok to always ask end user to bisect, and very good points were made to support the point of view that it is ok.</source>
          <target state="translated">linuxカーネルのメーリングリストでは、エンドユーザに常に二分するように頼んでもいいのかという議論がありました。</target>
        </trans-unit>
        <trans-unit id="e31f2056d77b9761665b1e39804c963e7c7e3f73" translate="yes" xml:space="preserve">
          <source>Therefore if the refspec for the remote includes e.g. &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt;, or you manually run e.g. &lt;code&gt;git fetch
--prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; it won&amp;rsquo;t be stale remote tracking branches that are deleted, but any local tag that doesn&amp;rsquo;t exist on the remote.</source>
          <target state="translated">したがって、リモートのrefspecに &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; などが含まれている場合、または手動で実行した場合（例： &lt;code&gt;git fetch --prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; 、 '削除された古いリモート追跡ブランチであるが、リモートに存在しないローカルタグ。</target>
        </trans-unit>
        <trans-unit id="22e33781a4f63d74c967572b3d2d5742f6f5b3cf" translate="yes" xml:space="preserve">
          <source>These are applied in sequence. The set of filepairs &lt;code&gt;git diff-*&lt;/code&gt; commands find are used as the input to diffcore-break, and the output from diffcore-break is used as the input to the next transformation. The final result is then passed to the output routine and generates either diff-raw format (see Output format sections of the manual for &lt;code&gt;git diff-*&lt;/code&gt; commands) or diff-patch format.</source>
          <target state="translated">これらは順番に適用されます。 &lt;code&gt;git diff-*&lt;/code&gt; コマンドが見つけるファイルペアのセットはdiffcore -breakへの入力として使用され、diffcore-breakからの出力は次の変換への入力として使用されます。次に、最終結果が出力ルーチンに渡され、diff-raw形式（マニュアルの &lt;code&gt;git diff-*&lt;/code&gt; コマンドの出力形式のセクションを参照）またはdiff-patch形式のいずれかが生成されます。</target>
        </trans-unit>
        <trans-unit id="5e4c5d2d8cb413a7bc102a12d4b32266eb5dffbd" translate="yes" xml:space="preserve">
          <source>These are concerned with describing the specific Git command after the command line, config, and environment are inspected. e.g: &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt;, &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt;.</source>
          <target state="translated">これらは、コマンドライン、構成、および環境が検査された後の特定のGitコマンドの説明に関係しています。例： &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt; 、 &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd918e1aed68e545e545890a5d457bd39124acbb" translate="yes" xml:space="preserve">
          <source>These are concerned with recording performance data over regions or spans of code. e.g: &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt;.</source>
          <target state="translated">これらは、リージョンまたはコードのスパンにわたるパフォーマンスデータの記録に関係しています。例： &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10ea7c6e4b3ea51596f6b19ba236a57b5e812041" translate="yes" xml:space="preserve">
          <source>These are concerned with the lifetime of the overall git process. e.g: &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt;, &lt;code&gt;void trace2_initialize()&lt;/code&gt;, &lt;code&gt;int trace2_is_enabled()&lt;/code&gt;, &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt;.</source>
          <target state="translated">これらは、gitプロセス全体の存続期間に関係しています。例： &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt; 、 &lt;code&gt;void trace2_initialize()&lt;/code&gt; 、 &lt;code&gt;int trace2_is_enabled()&lt;/code&gt; 、 &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dce3473c941e3b3b27a31ac8449a2f1991a75d0" translate="yes" xml:space="preserve">
          <source>These are concerned with the various spawned child processes, including shell scripts, git commands, editors, pagers, and hooks.</source>
          <target state="translated">これらは、シェルスクリプト、git コマンド、エディタ、ページャー、フックなど、さまざまな子プロセスをスポーンすることに関係しています。</target>
        </trans-unit>
        <trans-unit id="64d6caf87f558c78a882445d71ea9cd47be32d78" translate="yes" xml:space="preserve">
          <source>These are internal helper commands used by other commands; end users typically do not use them directly.</source>
          <target state="translated">これらは他のコマンドで使用される内部ヘルパーコマンドです。</target>
        </trans-unit>
        <trans-unit id="14e40973cf60a547a4fee511ff95c4f84a31a06f" translate="yes" xml:space="preserve">
          <source>These are only used with the &lt;code&gt;dcommit&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt; commands.</source>
          <target state="translated">これらは、 &lt;code&gt;dcommit&lt;/code&gt; コマンドと &lt;code&gt;rebase&lt;/code&gt; コマンドでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1f4226446a769c76931ca392e2a09f31777b3654" translate="yes" xml:space="preserve">
          <source>These are optional command-line options for init. Each of these flags can point to a relative repository path (--tags=project/tags) or a full url (--tags=https://foo.org/project/tags). You can specify more than one --tags and/or --branches options, in case your Subversion repository places tags or branches under multiple paths. The option --stdlayout is a shorthand way of setting trunk,tags,branches as the relative paths, which is the Subversion default. If any of the other options are given as well, they take precedence.</source>
          <target state="translated">これらはinitのオプションのコマンドラインオプションです。これらのフラグはそれぞれ、相対的なリポジトリのパス (--tags=project/tags)または完全な URL (--tags=https://foo.org/project/tags)を指すことができます。タグやブランチを複数のパスの下に配置している Subversion リポジトリの場合に備えて、--tags や --branches オプションを複数指定することができます。オプション --stdlayout は、トランク、タグ、ブランチを相対パスとして設定する略式な方法で、これは Subversion のデフォルトです。他のオプションを指定した場合は、それらが優先されます。</target>
        </trans-unit>
        <trans-unit id="ef89fe03d8c6b725e4e01a5ddca75169500d3912" translate="yes" xml:space="preserve">
          <source>These attributes affect how the contents stored in the repository are copied to the working tree files when commands such as &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; run. They also affect how Git stores the contents you prepare in the working tree in the repository upon &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">これらの属性は、 &lt;code&gt;git switch&lt;/code&gt; 、 &lt;code&gt;git checkout&lt;/code&gt; 、 &lt;code&gt;git merge&lt;/code&gt; などのコマンドを実行したときに、リポジトリに格納されているコンテンツが作業ツリーファイルにコピーされる方法に影響を与えます。また、 &lt;code&gt;git add&lt;/code&gt; および &lt;code&gt;git commit&lt;/code&gt; の際に、リポジトリの作業ツリーに準備したコンテンツをGitがどのように保存するかに影響します。</target>
        </trans-unit>
        <trans-unit id="1e36f59cc4fba5296689c97860f8ef3c808cbf54" translate="yes" xml:space="preserve">
          <source>These can be easily kept up to date using &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">これらは&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;を使用して簡単に最新に保つことができます。</target>
        </trans-unit>
        <trans-unit id="d8f5a662d30248028e58618a9cb324b38272bbd8" translate="yes" xml:space="preserve">
          <source>These commands all compare two sets of things; what is compared differs:</source>
          <target state="translated">これらのコマンドはすべて、2つのセットを比較します。</target>
        </trans-unit>
        <trans-unit id="6e07bfec6529e0e8049d6a168dde51eb0ed55268" translate="yes" xml:space="preserve">
          <source>These commands are to interact with foreign SCM and with other people via patch over e-mail.</source>
          <target state="translated">これらのコマンドは、海外のSCMとパッチを使ってメールでやりとりするためのものです。</target>
        </trans-unit>
        <trans-unit id="8e87e31fbdfcc66d2844293591fb44e9bb68be03" translate="yes" xml:space="preserve">
          <source>These config values are loaded from system, global, and local Git config, as available. If &lt;code&gt;git for-each-repo&lt;/code&gt; is run in a directory that is not a Git repository, then only the system and global config is used.</source>
          <target state="translated">これらの構成値は、利用可能な場合、システム、グローバル、およびローカルのGit構成からロードされます。場合 &lt;code&gt;git for-each-repo&lt;/code&gt; Gitのリポジトリではないディレクトリで実行され、その後、システムおよびグローバル設定のみが使用されています。</target>
        </trans-unit>
        <trans-unit id="008c5282b165f202ade67dc870d3522a81a841bd" translate="yes" xml:space="preserve">
          <source>These configuration variables control &lt;code&gt;internal&lt;/code&gt; gitweb behavior.</source>
          <target state="translated">これらの構成変数は &lt;code&gt;internal&lt;/code&gt; gitwebの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="94d243826a65ff43f06f691e3b2f877746c8e3a7" translate="yes" xml:space="preserve">
          <source>These configurations enable two things. First, each unix user (&lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt;) of the server will be able to browse through gitweb Git repositories found in &lt;code&gt;~/public_git/&lt;/code&gt; with the following url:</source>
          <target state="translated">これらの構成により、2つのことが可能になります。まず、サーバーの各UNIXユーザー（ &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; ）は、 &lt;code&gt;~/public_git/&lt;/code&gt; にあるgitweb Gitリポジトリを次のURLで閲覧できます。</target>
        </trans-unit>
        <trans-unit id="3c188c162ef90ed4e72b2204b53fd7bbdf63ed82" translate="yes" xml:space="preserve">
          <source>These environment variables apply to &lt;code&gt;all&lt;/code&gt; core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.</source>
          <target state="translated">これらの環境変数は、 &lt;code&gt;all&lt;/code&gt; コアGitコマンドに適用されます。Nb：Gitの上にあるSCMSによってそれらが使用/オーバーライドされる可能性があることに注意する必要があります。外部のフロントエンドを使用する場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="e4a9928c908043039dae5cc89a184941db222aba" translate="yes" xml:space="preserve">
          <source>These exclude patterns come from these places, in order:</source>
          <target state="translated">これらの除外パターンは、順番に、これらの場所から来ています。</target>
        </trans-unit>
        <trans-unit id="75ad982aca6a7add80092ae27820348741497d7e" translate="yes" xml:space="preserve">
          <source>These flag are passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch.</source>
          <target state="translated">これらのフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; プログラム（&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）に渡されます。</target>
        </trans-unit>
        <trans-unit id="a66ecfa5cef3d43b11b6332452dde3bc34998a82" translate="yes" xml:space="preserve">
          <source>These flags are passed to &lt;code&gt;git am&lt;/code&gt; to easily change the dates of the rebased commits (see &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;).</source>
          <target state="translated">これらのフラグは &lt;code&gt;git am&lt;/code&gt; に渡され、リベースされたコミットの日付を簡単に変更できます（&lt;a href=&quot;git-am&quot;&gt;git-am [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6f1d3498209d5426cb1c8295c9947466ac12cab4" translate="yes" xml:space="preserve">
          <source>These flags are passed to the &lt;code&gt;git apply&lt;/code&gt; (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) program that applies the patch.</source>
          <target state="translated">これらのフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; （&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）プログラムに渡されます。</target>
        </trans-unit>
        <trans-unit id="17c5d825c714d7f669df648adc8ffa3b9865aa3a" translate="yes" xml:space="preserve">
          <source>These forms reset the index entries for all paths that match the &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; to their state at &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt;. (It does not affect the working tree or the current branch.)</source>
          <target state="translated">これらのフォームは、 &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; に一致するすべてのパスのインデックスエントリを &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; の状態にリセットします。（作業ツリーや現在のブランチには影響しません。）</target>
        </trans-unit>
        <trans-unit id="84dfe82e69639d7dd0490e18b4061edc5e5f61bb" translate="yes" xml:space="preserve">
          <source>These general best practices are very helpful if you bisect often.</source>
          <target state="translated">これらの一般的なベストプラクティスは、あなたが頻繁に二分する場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="db63350c8a27af092cfd256119dcf34d87e7125f" translate="yes" xml:space="preserve">
          <source>These instructions use the &lt;code&gt;git-cvsimport&lt;/code&gt; script which ships with git, but other importers may provide better results. See the note in &lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport[1]&lt;/a&gt; for other options.</source>
          <target state="translated">これらの手順では、 &lt;code&gt;git-cvsimport&lt;/code&gt; するgit-cvsimportスクリプトを使用していますが、他のインポーターがより良い結果を提供する場合があります。その他のオプションについては、&lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport [1]&lt;/a&gt;のメモを参照してください。</target>
        </trans-unit>
        <trans-unit id="4de4cd9ec9920076e498bf4f8c01b7cc0e7335b0" translate="yes" xml:space="preserve">
          <source>These messages are concerned with Git thread usage.</source>
          <target state="translated">これらのメッセージは、Git スレッドの使用に関するものです。</target>
        </trans-unit>
        <trans-unit id="b8e5bd243ffdab655773f15dbcfc0554b819902f" translate="yes" xml:space="preserve">
          <source>These options are deprecated. Use the above --notes/--no-notes options instead.</source>
          <target state="translated">これらのオプションは非推奨です。代わりに上記の --notes/--no-notes オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="894173daf027c82b1254f620d2cbbddacd04b7fd" translate="yes" xml:space="preserve">
          <source>These options are ignored for historical reasons.</source>
          <target state="translated">これらのオプションは歴史的な理由から無視されています。</target>
        </trans-unit>
        <trans-unit id="0608f735748e7710136ac2ca4b1a8fc7f8d0f8a8" translate="yes" xml:space="preserve">
          <source>These options are mostly targeted for packing of Git repositories.</source>
          <target state="translated">これらのオプションは主に Git リポジトリのパッキングを対象としています。</target>
        </trans-unit>
        <trans-unit id="44fc7c2eb5b5d3f683db2d8973767b7defab9c76" translate="yes" xml:space="preserve">
          <source>These options are passed to &lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack[1]&lt;/a&gt;. A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is &lt;code&gt;--thin&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは&lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack [1]に&lt;/a&gt;渡されます。シン転送では、送信者と受信者が同じオブジェクトの多くを共有している場合、送信されるデータの量が大幅に減少します。デフォルトは &lt;code&gt;--thin&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="38ddfaeebf99ab2e211259f05e2350cca6be519d" translate="yes" xml:space="preserve">
          <source>These options are primarily useful when converting a repository from one hash algorithm to another; without them, fast-import will fail if it encounters a submodule because it has no way of writing the object ID into the new hash algorithm.</source>
          <target state="translated">これらのオプションは、リポジトリをあるハッシュアルゴリズムから別のハッシュアルゴリズムに変換するときに主に便利です。 これらのオプションがないと、オブジェクトIDを新しいハッシュアルゴリズムに書き込む方法がないため、サブモジュールに遭遇したときにfast-importが失敗してしまいます。</target>
        </trans-unit>
        <trans-unit id="0c86ff6978b6c3146e6796c4f36abf160da0176d" translate="yes" xml:space="preserve">
          <source>These options can be used in an initial &lt;code&gt;clone&lt;/code&gt;, along with the &lt;code&gt;sync&lt;/code&gt; options described above.</source>
          <target state="translated">これらのオプションは、前述の &lt;code&gt;sync&lt;/code&gt; オプションとともに、初期 &lt;code&gt;clone&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="0ade32a888d52a4ba127b2e5cb51121d4b067e67" translate="yes" xml:space="preserve">
          <source>These options can be used in the initial &lt;code&gt;clone&lt;/code&gt; as well as in subsequent &lt;code&gt;sync&lt;/code&gt; operations.</source>
          <target state="translated">これらのオプションは、最初の &lt;code&gt;clone&lt;/code&gt; と後続の &lt;code&gt;sync&lt;/code&gt; 操作で使用できます。</target>
        </trans-unit>
        <trans-unit id="3f45787718e6c314237aec0cf2c5e63156df92c4" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 rebase&lt;/code&gt; behavior.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;git p4 rebase&lt;/code&gt; の動作を変更するために使用できます。</target>
        </trans-unit>
        <trans-unit id="046bf3cadb648529c8cbf517d3ba66246fc697fc" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 submit&lt;/code&gt; behavior.</source>
          <target state="translated">これらのオプションを使用して、 &lt;code&gt;git p4 submit&lt;/code&gt; 動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="5bf9264c3d2f29d27aed45b38db366aee6362601" translate="yes" xml:space="preserve">
          <source>These options control layout (defaults to &lt;code&gt;column&lt;/code&gt;). Setting any of these implies &lt;code&gt;always&lt;/code&gt; if none of &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt; are specified.</source>
          <target state="translated">これらのオプションはレイアウトを制御します（デフォルトは &lt;code&gt;column&lt;/code&gt; です）。これらのいずれかを設定することを意味し &lt;code&gt;always&lt;/code&gt; のどれ場合は &lt;code&gt;always&lt;/code&gt; 、 &lt;code&gt;never&lt;/code&gt; 、または &lt;code&gt;auto&lt;/code&gt; が指定されていません。</target>
        </trans-unit>
        <trans-unit id="510a1cbefb424a60db8479a49dd55a0966d6d945" translate="yes" xml:space="preserve">
          <source>These options control when the feature should be enabled (defaults to &lt;code&gt;never&lt;/code&gt;):</source>
          <target state="translated">これらのオプションは、機能を有効にするタイミングを制御します（デフォルトは &lt;code&gt;never&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="931e215644554fa9404627a014bfd3cf51399ea5" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.splitIndex&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;core.splitIndex&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は、次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されるためです。</target>
        </trans-unit>
        <trans-unit id="932e8c22c29966222600cac9510425979eeabd1c" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;core.untrackedCache&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は、次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されるためです。</target>
        </trans-unit>
        <trans-unit id="ff7024be4fc3bd9a63ff1aab42e5c2f33080a5ad" translate="yes" xml:space="preserve">
          <source>These parameters can also be set individually with &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt;, &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; and &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これらのパラメーターは、-- &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt; 、-- &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; および &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt; を使用して個別に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="25d97f197e2ad468ea791c831ca2e71054c4e207" translate="yes" xml:space="preserve">
          <source>These remote-tracking references can be deleted as a one-off with either of:</source>
          <target state="translated">これらのリモートトラッキング参照は、以下のいずれかの方法で一度に削除することができます。</target>
        </trans-unit>
        <trans-unit id="4994737bcfd88cfa54486bc85e99d5152416b798" translate="yes" xml:space="preserve">
          <source>These rules make it easy for shell script based tools to parse reference names, pathname expansion by the shell when a reference name is used unquoted (by mistake), and also avoid ambiguities in certain reference name expressions (see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;):</source>
          <target state="translated">これらのルールにより、シェルスクリプトベースのツールが参照名を解析しやすくなり、参照名が引用符なしで（誤って）使用された場合のシェルによるパス名展開、および特定の参照名式のあいまいさを回避できます（&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d2d3b8bc5c27c38dddb2f7c9e54b52668c820483" translate="yes" xml:space="preserve">
          <source>These services can be enabled/disabled using the per-repository configuration file:</source>
          <target state="translated">これらのサービスは、リポジトリごとの設定ファイルを使用して有効化/無効化することができます。</target>
        </trans-unit>
        <trans-unit id="11be9ffec744e4c727f505822229118ed50ca097" translate="yes" xml:space="preserve">
          <source>These services can be globally enabled/disabled using the command-line options of this command. If finer-grained control is desired (e.g. to allow &lt;code&gt;git archive&lt;/code&gt; to be run against only in a few selected repositories the daemon serves), the per-repository configuration file can be used to enable or disable them.</source>
          <target state="translated">これらのサービスは、このコマンドのコマンドラインオプションを使用してグローバルに有効/無効にすることができます。より細かい制御が必要な場合（たとえば、デーモンが提供するいくつかの選択されたリポジトリでのみ &lt;code&gt;git archive&lt;/code&gt; を実行できるようにする場合）、リポジトリごとの構成ファイルを使用してそれらを有効または無効にできます。</target>
        </trans-unit>
        <trans-unit id="70e4323eda62161a4a47cb9a1d65be89828fd66d" translate="yes" xml:space="preserve">
          <source>These settings help tools pick the right format for output such as patches and result in files being checked out in the appropriate line ending for the platform.</source>
          <target state="translated">これらの設定は、ツールがパッチなどの出力に適したフォーマットを選択するのに役立ち、その結果、ファイルがプラットフォームに適した行末でチェックアウトされるようになります。</target>
        </trans-unit>
        <trans-unit id="6e7a1043f71fa1813c0b5e398e97710f483944d9" translate="yes" xml:space="preserve">
          <source>These things may exist in a Git repository.</source>
          <target state="translated">これらのものはGitリポジトリに存在している可能性があります。</target>
        </trans-unit>
        <trans-unit id="b5c7f688db050c92cfc9bb2aa9d676e52849ec7b" translate="yes" xml:space="preserve">
          <source>These three branches all forked from a common commit, [master], whose commit message is &quot;Add 'git show-branch'&quot;. The &quot;fixes&quot; branch adds one commit &quot;Introduce &quot;reset type&quot; flag to &quot;git reset&quot;&quot;. The &quot;mhf&quot; branch adds many other commits. The current branch is &quot;master&quot;.</source>
          <target state="translated">これら 3 つのブランチはすべて共通のコミット [master]からフォークされたもので、そのコミットメッセージは &quot;Add 'git show-branch'&quot; となっています。そのコミットメッセージは &quot;Add 'git show-branch'&quot; です。mhf&quot; ブランチは他にもたくさんのコミットを追加しています。現在のブランチは &quot;master&quot; です。</target>
        </trans-unit>
        <trans-unit id="c6204a9318b7a0526e46b8696b2eb378d52ecf11" translate="yes" xml:space="preserve">
          <source>These two filters behave differently, and by default, a filter is taken as the former, massaging the contents into more convenient shape. A missing filter driver definition in the config, or a filter driver that exits with a non-zero status, is not an error but makes the filter a no-op passthru.</source>
          <target state="translated">これら 2 つのフィルタの振る舞いは異なり、デフォルトではフィルタは前者として扱われ、内容をより便利な形に整形します。設定にフィルタドライバの定義がない場合や、ゼロではない状態で終了するフィルタドライバはエラーではありませんが、そのフィルタは無操作パススルーになります。</target>
        </trans-unit>
        <trans-unit id="e20e46dc24b79b5218925e423850545226b0898e" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">これら 2 つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を用いてどのように保存されるかに影響を与えます。まずオブジェクトは内部的にタイプ、サイズ、オプションとして名前でソートされ、 --window 内の他のオブジェクトと比較され、デルタ圧縮を使用することでスペースを節約できるかどうかが確認されます。--あまり深くしすぎるとアンパッカー側のパフォーマンスに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="de212a952b72f4cd05af023bbd056fa8307c4a9f" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within &lt;code&gt;--window&lt;/code&gt; to see if using delta compression saves space. &lt;code&gt;--depth&lt;/code&gt; limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">これらの2つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を使用して格納される方法に影響します。オブジェクトは最初にタイプ、サイズ、オプションで名前で内部的にソートされ、デルタ圧縮を使用してスペースを節約できるかどうかを確認するために &lt;code&gt;--window&lt;/code&gt; 内の他のオブジェクトと比較されます。 &lt;code&gt;--depth&lt;/code&gt; は最大デルタ深度を制限します。必要以上の深さにすると、アンパッカー側のパフォーマンスに影響します。デルタデータは、必要なオブジェクトに到達するまで何度も適用する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="6a0bfaec1ca5ad5a0f6710f22f7b4b78eecfef67" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except the former implies --local option.</source>
          <target state="translated">これら2つの構文は、前者が--localオプションを意味することを除けば、ほぼ同等です。</target>
        </trans-unit>
        <trans-unit id="9270307e15adf00d482cdebd8e068750f310bc87" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; for details.</source>
          <target state="translated">これらの2つの構文は、前者が--localオプションを暗黙指定している場合を除いて、ほとんど同じです。詳細については、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="469e074d32a553c54f69af6603803ffbfd2e6dda" translate="yes" xml:space="preserve">
          <source>These types of entries are generally created as a result of using &lt;code&gt;git
commit --amend&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner, which is why the default is more aggressive than &lt;code&gt;gc.reflogExpire&lt;/code&gt;.</source>
          <target state="translated">これらのタイプのエントリは通常、 &lt;code&gt;git commit --amend&lt;/code&gt; または &lt;code&gt;git rebase&lt;/code&gt; を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは &lt;code&gt;gc.reflogExpire&lt;/code&gt; よりも積極的です。</target>
        </trans-unit>
        <trans-unit id="99a10a0726ee032ba80815c05eceb6d5a6ab2aa8" translate="yes" xml:space="preserve">
          <source>These variables control various optional help messages designed to aid new users. All &lt;code&gt;advice.*&lt;/code&gt; variables default to &lt;code&gt;true&lt;/code&gt;, and you can tell Git that you do not need help by setting these to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">これらの変数は、新しいユーザーを支援するために設計されたさまざまなオプションのヘルプメッセージを制御します。すべての &lt;code&gt;advice.*&lt;/code&gt; 変数はデフォルトで &lt;code&gt;true&lt;/code&gt; に設定されており、これらを &lt;code&gt;false&lt;/code&gt; に設定することで、Gitにヘルプが不要であることを伝えることができます。</target>
        </trans-unit>
        <trans-unit id="289bbff1e27f0cf157d5208bbfcb9f369ecc1504" translate="yes" xml:space="preserve">
          <source>These variables obviate the need for command-line options in some circumstances, allowing easier restricted usage through git-shell.</source>
          <target state="translated">これらの変数を使用することで、状況によってはコマンドラインオプションが不要になり、git-shell での使用をより簡単に制限できるようになります。</target>
        </trans-unit>
        <trans-unit id="48d5c4b33cae3d35014b5a5e266ea897c2a18c9f" translate="yes" xml:space="preserve">
          <source>These will display all commits which exist only on HEAD or on MERGE_HEAD, and which touch an unmerged file.</source>
          <target state="translated">これらのコミットは、HEAD または MERGE_HEAD にのみ存在し、マージされていないファイルに触れているすべてのコミットを表示します。</target>
        </trans-unit>
        <trans-unit id="e9ab0d9bdf3f35b7d6ece2d3bc65f4fbb38bad38" translate="yes" xml:space="preserve">
          <source>They are both passed directly to &lt;code&gt;git diff-tree&lt;/code&gt;; see &lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree[1]&lt;/a&gt; for more information.</source>
          <target state="translated">どちらも直接 &lt;code&gt;git diff-tree&lt;/code&gt; に渡されます。詳細については、&lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="afa16f632fa562fed5a34ad41431101aacb568d7" translate="yes" xml:space="preserve">
          <source>They can include slash &lt;code&gt;/&lt;/code&gt; for hierarchical (directory) grouping, but no slash-separated component can begin with a dot &lt;code&gt;.&lt;/code&gt; or end with the sequence &lt;code&gt;.lock&lt;/code&gt;.</source>
          <target state="translated">階層（ディレクトリ）のグループ化のためにスラッシュ &lt;code&gt;/&lt;/code&gt; を含めることができますが、スラッシュで区切られたコンポーネントをドットで始めることはできません &lt;code&gt;.&lt;/code&gt; または、シーケンス &lt;code&gt;.lock&lt;/code&gt; で終わります。</target>
        </trans-unit>
        <trans-unit id="48a933f433abac80f2e0e41b240081f7a399893c" translate="yes" xml:space="preserve">
          <source>They cannot be the single character &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">単一文字 &lt;code&gt;@&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="c798a840110b095cd0c31cb10cad16c17f5292dd" translate="yes" xml:space="preserve">
          <source>They cannot begin or end with a slash &lt;code&gt;/&lt;/code&gt; or contain multiple consecutive slashes (see the &lt;code&gt;--normalize&lt;/code&gt; option below for an exception to this rule)</source>
          <target state="translated">スラッシュで開始または終了することはできません &lt;code&gt;/&lt;/code&gt; または連続する複数のスラッシュを含めることはできません（このルールの例外については、以下の &lt;code&gt;--normalize&lt;/code&gt; オプションを参照してください）</target>
        </trans-unit>
        <trans-unit id="794c847c2b033448497ba9e6f46f59b7325ccd69" translate="yes" xml:space="preserve">
          <source>They cannot contain a &lt;code&gt;\&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="c4cf89d0a711867dbdfa498e7e6b80fb04c020f3" translate="yes" xml:space="preserve">
          <source>They cannot contain a sequence &lt;code&gt;@{&lt;/code&gt;.</source>
          <target state="translated">シーケンス &lt;code&gt;@{&lt;/code&gt; 含めることはできません。</target>
        </trans-unit>
        <trans-unit id="c781dcfcbfa7c545717cc72f3f25ac7fba039fd7" translate="yes" xml:space="preserve">
          <source>They cannot end with a dot &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">ドットで終わることはできません &lt;code&gt;.&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdf3c698f8591838633d63d5550c41009f5d53bb" translate="yes" xml:space="preserve">
          <source>They cannot have ASCII control characters (i.e. bytes whose values are lower than \040, or \177 &lt;code&gt;DEL&lt;/code&gt;), space, tilde &lt;code&gt;~&lt;/code&gt;, caret &lt;code&gt;^&lt;/code&gt;, or colon &lt;code&gt;:&lt;/code&gt; anywhere.</source>
          <target state="translated">ASCII制御文字（つまり、値が\ 040または\ 177 &lt;code&gt;DEL&lt;/code&gt; 未満のバイト）、スペース、チルド &lt;code&gt;~&lt;/code&gt; 、キャレット &lt;code&gt;^&lt;/code&gt; 、またはコロン &lt;code&gt;:&lt;/code&gt; はどこにも含めることができません。</target>
        </trans-unit>
        <trans-unit id="9fa9a35ba99f055f59e5fb0fc3903845af8141d1" translate="yes" xml:space="preserve">
          <source>They cannot have question-mark &lt;code&gt;?&lt;/code&gt;, asterisk &lt;code&gt;*&lt;/code&gt;, or open bracket &lt;code&gt;[&lt;/code&gt; anywhere. See the &lt;code&gt;--refspec-pattern&lt;/code&gt; option below for an exception to this rule.</source>
          <target state="translated">疑問符を付けることはできません &lt;code&gt;?&lt;/code&gt; 、アスタリスク &lt;code&gt;*&lt;/code&gt; 、または開き角かっこ &lt;code&gt;[&lt;/code&gt; どこでも。このルールの例外については、以下の &lt;code&gt;--refspec-pattern&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="07233de88d34b821d099ea14e09099281360fa3d" translate="yes" xml:space="preserve">
          <source>They cannot have two consecutive dots &lt;code&gt;..&lt;/code&gt; anywhere.</source>
          <target state="translated">彼らは、2つの連続したドットを持つことができません &lt;code&gt;..&lt;/code&gt; .どこでも。</target>
        </trans-unit>
        <trans-unit id="08cc7b3818b658e36c5e9a0a0fcefabb2c9bd5ce" translate="yes" xml:space="preserve">
          <source>They must contain at least one &lt;code&gt;/&lt;/code&gt;. This enforces the presence of a category like &lt;code&gt;heads/&lt;/code&gt;, &lt;code&gt;tags/&lt;/code&gt; etc. but the actual names are not restricted. If the &lt;code&gt;--allow-onelevel&lt;/code&gt; option is used, this rule is waived.</source>
          <target state="translated">少なくとも1つ &lt;code&gt;/&lt;/code&gt; を含める必要があります。これにより、 &lt;code&gt;heads/&lt;/code&gt; 、 &lt;code&gt;tags/&lt;/code&gt; などのカテゴリの存在が強制されますが、実際の名前は制限されません。場合 &lt;code&gt;--allow-onelevel&lt;/code&gt; ですオプションが使用され、このルールが免除されます。</target>
        </trans-unit>
        <trans-unit id="9c66e1086c1b783565f285e9f8d345796e4a920b" translate="yes" xml:space="preserve">
          <source>Things get more complicated if the &lt;code&gt;subsystem&lt;/code&gt; changes do not exactly correspond to the ones before the rebase.</source>
          <target state="translated">&lt;code&gt;subsystem&lt;/code&gt; 変更がリベース前の変更と正確に対応していない場合、状況はさらに複雑になります。</target>
        </trans-unit>
        <trans-unit id="877bd5e347693a4c90610529b809f198ae203a8a" translate="yes" xml:space="preserve">
          <source>Think about how to create a clear chapter dependency graph that will allow people to get to important topics without necessarily reading everything in between.</source>
          <target state="translated">必ずしも間にあるものをすべて読まなくても、重要なトピックにたどり着けるような、わかりやすい章の依存関係グラフの作り方を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="5f03012af2a22f62503c31e1e064eb23ddd2be46" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;key&lt;/code&gt; will be used instead of &amp;lt;token&amp;gt; in the trailer. At the end of this key, a separator can appear and then some space characters. By default the only valid separator is &lt;code&gt;:&lt;/code&gt;, but this can be changed using the &lt;code&gt;trailer.separators&lt;/code&gt; config variable.</source>
          <target state="translated">この &lt;code&gt;key&lt;/code&gt; は、トレーラーで&amp;lt;token&amp;gt;の代わりに使用されます。このキーの最後に、セパレータが表示され、その後にいくつかのスペース文字が表示されます。デフォルトでは、有効なセパレーターは &lt;code&gt;:&lt;/code&gt; のみですが、これは、 &lt;code&gt;trailer.separators&lt;/code&gt; 構成変数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="9ed9ef222233001104259cd6ab7e0ea2e028dedb" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;merge&lt;/code&gt; can also be done by &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt;, like this:</source>
          <target state="translated">この &lt;code&gt;merge&lt;/code&gt; は、次のように &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt; することでも実行できます。</target>
        </trans-unit>
        <trans-unit id="0007248c88629a35b9fa8e1cf4c8fdf299191526" translate="yes" xml:space="preserve">
          <source>This accepts all options that &lt;code&gt;git svn fetch&lt;/code&gt; and &lt;code&gt;git rebase&lt;/code&gt; accept. However, &lt;code&gt;--fetch-all&lt;/code&gt; only fetches from the current [svn-remote], and not all [svn-remote] definitions.</source>
          <target state="translated">これは &lt;code&gt;git svn fetch&lt;/code&gt; と &lt;code&gt;git rebase&lt;/code&gt; が受け入れるすべてのオプションを受け入れます。ただし、 &lt;code&gt;--fetch-all&lt;/code&gt; は現在の[svn-remote]からのみフェッチし、すべての[svn-remote]定義からはフェッチしません。</target>
        </trans-unit>
        <trans-unit id="c118365ba0290d763b2d4e635fbfbb09d23e73e6" translate="yes" xml:space="preserve">
          <source>This action is disabled by default for performance reasons.</source>
          <target state="translated">このアクションは、パフォーマンス上の理由からデフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="692de83ae64c152ace96a6b22c40c6c7b5256f5f" translate="yes" xml:space="preserve">
          <source>This adds a link titled &quot;graphiclog&quot; after the &quot;summary&quot; link, leading to &lt;code&gt;git-browser&lt;/code&gt; script, passing &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; as a query parameter.</source>
          <target state="translated">これにより、「summary」リンクの後に「graphiclog」というタイトルのリンクが追加され、 &lt;code&gt;git-browser&lt;/code&gt; スクリプトにつながり、クエリパラメータとして &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="9647e1f610a9d28b74cedc3ffa625f5d98628ec8" translate="yes" xml:space="preserve">
          <source>This algorithm extends the patience algorithm to &quot;support low-occurrence common elements&quot;.</source>
          <target state="translated">このアルゴリズムは、忍耐アルゴリズムを拡張して「低頻度の共通要素をサポート」するものです。</target>
        </trans-unit>
        <trans-unit id="5f9e4d22cfa1bc9f924abb0f51a443db2655b318" translate="yes" xml:space="preserve">
          <source>This allows &lt;code&gt;git svn&lt;/code&gt; to re-map repository URLs and UUIDs from mirrors created using SVN::Mirror (or svk) for metadata.</source>
          <target state="translated">これにより、 &lt;code&gt;git svn&lt;/code&gt; はメタデータのSVN :: Mirror（またはsvk）を使用して作成されたミラーからリポジトリURLとUUIDを再マッピングできます。</target>
        </trans-unit>
        <trans-unit id="cb552885bcd7df779f362e35a229c9d935657c60" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause skipping of all matching paths from checkout from SVN. The &lt;code&gt;--ignore-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository.</source>
          <target state="translated">これにより、SVNからのチェックアウトから一致するすべてのパスをスキップするPerl正規表現を指定できます。 &lt;code&gt;--ignore-paths&lt;/code&gt; オプションは、すべてのために一致している必要があり &lt;code&gt;fetch&lt;/code&gt; （自動起因するフェッチを含む &lt;code&gt;clone&lt;/code&gt; 、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 所定のリポジトリに、など）。</target>
        </trans-unit>
        <trans-unit id="bf5d12ceb1111e8b06bd58f3985472091a1cae12" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause the inclusion of only matching paths from checkout from SVN. The &lt;code&gt;--include-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository. &lt;code&gt;--ignore-paths&lt;/code&gt; takes precedence over &lt;code&gt;--include-paths&lt;/code&gt;.</source>
          <target state="translated">これにより、SVNからのチェックアウトから一致するパスのみを含めるPerl正規表現を指定できます。 &lt;code&gt;--include-paths&lt;/code&gt; オプションは、すべてのために一致している必要があり &lt;code&gt;fetch&lt;/code&gt; （自動起因するフェッチを含む &lt;code&gt;clone&lt;/code&gt; 、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 所定のリポジトリに、など）。 &lt;code&gt;--ignore-paths&lt;/code&gt; は--include-pathsよりも優先され &lt;code&gt;--include-paths&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c68f089f9144bc4bdc1d710532bfa75a569d11ed" translate="yes" xml:space="preserve">
          <source>This allows one to specify a prefix which is prepended to the names of remotes if trunk/branches/tags are specified. The prefix does not automatically include a trailing slash, so be sure you include one in the argument if that is what you want. If --branches/-b is specified, the prefix must include a trailing slash. Setting a prefix (with a trailing slash) is strongly encouraged in any case, as your SVN-tracking refs will then be located at &quot;refs/remotes/$prefix/&lt;strong&gt;&quot;, which is compatible with Git&amp;rsquo;s own remote-tracking ref layout (refs/remotes/$remote/&lt;/strong&gt;). Setting a prefix is also useful if you wish to track multiple projects that share a common repository. By default, the prefix is set to &lt;code&gt;origin/&lt;/code&gt;.</source>
          <target state="translated">これにより、トランク/ブランチ/タグが指定されている場合に、リモートの名前の前に付加されるプレフィックスを指定できます。接頭辞には自動的に末尾のスラッシュが含まれないため、必要な場合は引数にスラッシュを含めてください。 --branches / -bが指定されている場合、プレフィックスには末尾にスラッシュを含める必要があります。 SVNトラッキング参照は、&lt;strong&gt;Gitの独自のリモート追跡参照レイアウト（参照/ remotes / $ remote /&lt;/strong&gt;）。共通のリポジトリを共有する複数のプロジェクトを追跡する場合にも、プレフィックスを設定すると便利です。デフォルトでは、プレフィックスは &lt;code&gt;origin/&lt;/code&gt; 設定されています。</target>
        </trans-unit>
        <trans-unit id="99b10fdeae941de841a9ac73e39b7c06fcc2d978" translate="yes" xml:space="preserve">
          <source>This allows revision ranges for partial/cauterized history to be supported. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported.</source>
          <target state="translated">これにより、部分的に/焼灼された履歴のリビジョン範囲をサポートすることができます。NUMBER、$NUMBER1:$NUMBER2 (数値範囲)、$NUMBER:HEAD、およびBASE:$NUMBERはすべてサポートされています。</target>
        </trans-unit>
        <trans-unit id="f18b167effc162d347deb782b83eab22ac73f014" translate="yes" xml:space="preserve">
          <source>This allows users to create repositories from alternate URLs. For example, an administrator could run &lt;code&gt;git svn&lt;/code&gt; on the server locally (accessing via file://) but wish to distribute the repository with a public http:// or svn:// URL in the metadata so users of it will see the public URL.</source>
          <target state="translated">これにより、ユーザーは代替URLからリポジトリを作成できます。たとえば、管理者はサーバー上で &lt;code&gt;git svn&lt;/code&gt; をローカルに（file：//経由でアクセスして）実行できますが、メタデータにhttp：//またはsvn：//のパブリックURLを付けてリポジトリを配布して、ユーザーに表示されるようにします。パブリックURL。</target>
        </trans-unit>
        <trans-unit id="86c4c002dbb35b192dee2247feadc27722ad842a" translate="yes" xml:space="preserve">
          <source>This application is a CVS emulation layer for Git.</source>
          <target state="translated">このアプリケーションはGitのCVSエミュレーションレイヤーです。</target>
        </trans-unit>
        <trans-unit id="8feea1468fa1fae814e84f89aca492fad30e5da4" translate="yes" xml:space="preserve">
          <source>This applies modifications from a hot-fix branch before each test run, e.g. in case your build or test environment changed so that older revisions may need a fix which newer ones have already. (Make sure the hot-fix branch is based off a commit which is contained in all revisions which you are bisecting, so that the merge does not pull in too much, or use &lt;code&gt;git cherry-pick&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt;.)</source>
          <target state="translated">これは、たとえば、ビルドまたはテスト環境が変更されて古いリビジョンが新しいリビジョンにすでにある修正を必要とする場合など、各テスト実行の前にホットフィックスブランチからの変更を適用します。（ホットフィックスブランチが、二分割しているすべてのリビジョンに含まれているコミットに基づいていることを確認してください。マージがあまり引き込まれないようにするか、 &lt;code&gt;git merge&lt;/code&gt; ではなく &lt;code&gt;git cherry-pick&lt;/code&gt; を使用してください。）</target>
        </trans-unit>
        <trans-unit id="889d1277201779cf18582f69129975a9bf60d357" translate="yes" xml:space="preserve">
          <source>This applies to files added to the source branch &lt;strong&gt;after&lt;/strong&gt; a daughter branch was created: if previously no commit was made on the daughter branch they will erroneously be added to the daughter branch in git.</source>
          <target state="translated">これは、ドーターブランチの作成&lt;strong&gt;後に&lt;/strong&gt;ソースブランチ&lt;strong&gt;に&lt;/strong&gt;追加されたファイルに適用されます。以前にドーターブランチでコミットが行われなかった場合、gitのドーターブランチに誤って追加されます。</target>
        </trans-unit>
        <trans-unit id="cd519f993fc33ca56b2cb882b0ae5ba8b983012d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead it sets the vhost field in the git:// service request (to rest of the argument). Default is not to send vhost in such request (if sent).</source>
          <target state="translated">この引数は &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; に渡されません。代わりに、git：//サービス要求のvhostフィールドを設定します（残りの引数に）。デフォルトでは、そのようなリクエストでvhostを送信しません（送信された場合）。</target>
        </trans-unit>
        <trans-unit id="9535ee34f2074fa8e689413e0518f1d3faf71e7d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead, it will cause the helper to start by sending git:// service requests to the remote side with the service field set to an appropriate value and the repository field set to rest of the argument. Default is not to send such a request.</source>
          <target state="translated">この引数は &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; に渡されません。代わりに、サービスフィールドを適切な値に設定し、リポジトリフィールドを残りの引数に設定して、git：//サービスリクエストをリモート側に送信することで、ヘルパーを開始します。デフォルトでは、このようなリクエストは送信されません。</target>
        </trans-unit>
        <trans-unit id="b50cd8ffcdc46b4b68ae7776a2b00f1d1183b6dd" translate="yes" xml:space="preserve">
          <source>This asks for all the history reachable from the given commit but not from any branch, tag, or other reference. If you decide it&amp;rsquo;s something you want, you can always create a new reference to it, e.g.,</source>
          <target state="translated">これは、ブランチ、タグ、またはその他の参照からではなく、特定のコミットから到達可能なすべての履歴を要求します。あなたがそれがあなたが望むものであると決定した場合、あなたはいつでもそれへの新しい参照を作成することができます、例えば、</target>
        </trans-unit>
        <trans-unit id="7efa4dea1c9da210003e0c08e382eb543f66cbf7" translate="yes" xml:space="preserve">
          <source>This attribute controls the length of conflict markers left in the work tree file during a conflicted merge. Only setting to the value to a positive integer has any meaningful effect.</source>
          <target state="translated">この属性は、競合したマージ時にワークツリーファイルに残される競合マーカーの長さを制御します。この値を正の整数に設定した場合のみ、意味のある効果があります。</target>
        </trans-unit>
        <trans-unit id="4caef1788f338fb02906a32b34bfb366a7539a3a" translate="yes" xml:space="preserve">
          <source>This attribute enables and controls end-of-line normalization. When a text file is normalized, its line endings are converted to LF in the repository. To control what line ending style is used in the working directory, use the &lt;code&gt;eol&lt;/code&gt; attribute for a single file and the &lt;code&gt;core.eol&lt;/code&gt; configuration variable for all text files. Note that setting &lt;code&gt;core.autocrlf&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; overrides &lt;code&gt;core.eol&lt;/code&gt; (see the definitions of those options in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">この属性は、行末の正規化を有効にして制御します。テキストファイルが正規化されると、その行末はリポジトリでLFに変換されます。作業ディレクトリで使用される行末スタイルを制御するには、単一ファイルに &lt;code&gt;eol&lt;/code&gt; 属性を使用し、すべてのテキストファイルに &lt;code&gt;core.eol&lt;/code&gt; 構成変数を使用します。設定することを注意 &lt;code&gt;core.autocrlf&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;input&lt;/code&gt; オーバーライド &lt;code&gt;core.eol&lt;/code&gt; （にこれらのオプションの定義を参照&lt;a href=&quot;git-config&quot;&gt;のgit -設定[1] &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9abb1dada669f4b282e87943eaa4c10d9676f824" translate="yes" xml:space="preserve">
          <source>This attribute sets a specific line-ending style to be used in the working directory. It enables end-of-line conversion without any content checks, effectively setting the &lt;code&gt;text&lt;/code&gt; attribute. Note that setting this attribute on paths which are in the index with CRLF line endings may make the paths to be considered dirty. Adding the path to the index again will normalize the line endings in the index.</source>
          <target state="translated">この属性は、作業ディレクトリで使用される特定の行末スタイルを設定します。コンテンツのチェックなしで行末の変換が可能になり、効果的に &lt;code&gt;text&lt;/code&gt; 属性を設定します。CRLF行末のインデックスにあるパスにこの属性を設定すると、パスがダーティと見なされる場合があります。インデックスへのパスを再度追加すると、インデックスの行末が正規化されます。</target>
        </trans-unit>
        <trans-unit id="a95f413f93d421b5f0b609911f7201baca2aa2de" translate="yes" xml:space="preserve">
          <source>This automatically updates the rev_map if needed (see &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; in the FILES section below for details).</source>
          <target state="translated">これにより、必要に応じてrev_mapが自動的に更新されます（詳細については、以下の「ファイル」セクションの &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="5ef9fc28040a2d8ac737cc9e8915d682487174d5" translate="yes" xml:space="preserve">
          <source>This avoids touching the disk, but removes the additional file. Your project may prefer to adopt a naming convention, such as all-lowercase names, to avoid this problem from occurring again; such a convention can be checked using a &lt;code&gt;pre-receive&lt;/code&gt; hook or as part of a continuous integration (CI) system.</source>
          <target state="translated">これにより、ディスクへの接触は回避されますが、追加のファイルは削除されます。プロジェクトでは、この問題が再発しないように、すべて小文字の名前などの命名規則を採用することをお勧めします。このような規則は、 &lt;code&gt;pre-receive&lt;/code&gt; フックを使用して、または継続的インテグレーション（CI）システムの一部として確認できます。</target>
        </trans-unit>
        <trans-unit id="756e07e0622c048ffb322b306c002b3fe742a463" translate="yes" xml:space="preserve">
          <source>This behavior can be suppressed with the &lt;code&gt;--no-ff&lt;/code&gt; option.</source>
          <target state="translated">この動作は &lt;code&gt;--no-ff&lt;/code&gt; オプションで抑制できます。</target>
        </trans-unit>
        <trans-unit id="8ad430bc747d1916521d538bf94c1847176c4231" translate="yes" xml:space="preserve">
          <source>This behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to &lt;code&gt;false&lt;/code&gt; if you want &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git branch&lt;/code&gt; to always behave as if &lt;code&gt;--no-track&lt;/code&gt; were given. Set it to &lt;code&gt;always&lt;/code&gt; if you want this behavior when the start-point is either a local or remote-tracking branch.</source>
          <target state="translated">この動作は、開始点がリモート追跡ブランチである場合のデフォルトです。branch.autoSetupMergeのコンフィギュレーション変数を設定し &lt;code&gt;false&lt;/code&gt; したい場合は &lt;code&gt;git switch&lt;/code&gt; 、 &lt;code&gt;git checkout&lt;/code&gt; と &lt;code&gt;git branch&lt;/code&gt; あるかのように常に動作するように &lt;code&gt;--no-track&lt;/code&gt; 与えられました。開始点がローカルまたはリモート追跡ブランチであるときにこの動作が必要な場合は、 &lt;code&gt;always&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="a57c8928c46f18c8586890f640bdaceff3225ce7" translate="yes" xml:space="preserve">
          <source>This boolean config option controls whether some commands run &lt;code&gt;git maintenance run --auto&lt;/code&gt; after doing their normal work. Defaults to true.</source>
          <target state="translated">このブール構成オプションは、一部のコマンドが通常の作業を行った後に &lt;code&gt;git maintenance run --auto&lt;/code&gt; 実行するかどうかを制御します。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="02d843a8479501e1f56c84b63bc83f8438d9dc3a" translate="yes" xml:space="preserve">
          <source>This boolean config option controls whether the maintenance task with name &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; is run when no &lt;code&gt;--task&lt;/code&gt; option is specified to &lt;code&gt;git maintenance run&lt;/code&gt;. These config values are ignored if a &lt;code&gt;--task&lt;/code&gt; option exists. By default, only &lt;code&gt;maintenance.gc.enabled&lt;/code&gt; is true.</source>
          <target state="translated">このブール &lt;code&gt;--task&lt;/code&gt; オプションは、 &lt;code&gt;git maintenance run&lt;/code&gt; Maintenancerunに--taskオプションが指定されていない場合に &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; という名前のメンテナンスタスクを実行するかどうかを制御します。 &lt;code&gt;--task&lt;/code&gt; オプションが存在する場合、これらの構成値は無視されます。デフォルトでは、 &lt;code&gt;maintenance.gc.enabled&lt;/code&gt; のみがtrueです。</target>
        </trans-unit>
        <trans-unit id="e589ab09a449c7cf7000e50f249deca2b148281c" translate="yes" xml:space="preserve">
          <source>This boolean will enable &lt;code&gt;fsync()&lt;/code&gt; when writing object files.</source>
          <target state="translated">このブール値は、オブジェクトファイルを書き込むときに &lt;code&gt;fsync()&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="2a9d8bb8cd3e4996e1654fca8257ad2030d24d70" translate="yes" xml:space="preserve">
          <source>This breakage is of course most of the time unrelated to the breakage we are trying to locate in the commit graph. But it prevents us to know if the interesting &quot;bad behavior&quot; is present or not.</source>
          <target state="translated">このブレークエイジは、もちろんほとんどの場合、コミットグラフの中で見つけようとしているブレークエイジとは無関係です。しかし、これでは興味深い「悪い動作」が存在するかどうかを知ることができません。</target>
        </trans-unit>
        <trans-unit id="1a7656b1b8b17aa91ea330f8fbedd0a75097faed" translate="yes" xml:space="preserve">
          <source>This bug has also been shown to affect non-symlink cases of replacing a directory with a file when it comes to the internal structures of the untracked cache, but no case has been reported where this resulted in wrong &quot;git status&quot; output.</source>
          <target state="translated">このバグは、トラックされていないキャッシュの内部構造に関連して、ディレクトリをファイルに置き換えた場合にも影響を与えることが示されていますが、これが原因で誤った &quot;git status&quot; 出力になったケースは報告されていません。</target>
        </trans-unit>
        <trans-unit id="bbb14e9c1a32bd1658d34b41d317e78fe3e2cf7e" translate="yes" xml:space="preserve">
          <source>This cache is meant to speed up commands that involve determining untracked files such as &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">このキャッシュは、 &lt;code&gt;git status&lt;/code&gt; などの追跡されていないファイルの特定を含むコマンドを高速化するためのものです。</target>
        </trans-unit>
        <trans-unit id="5e9291bab46bd7ea7a2a21b7e8d51146482ff7a6" translate="yes" xml:space="preserve">
          <source>This calculates the same as &lt;code&gt;--bisect&lt;/code&gt;, except that refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used, and except that this outputs text ready to be eval&amp;rsquo;ed by the shell. These lines will assign the name of the midpoint revision to the variable &lt;code&gt;bisect_rev&lt;/code&gt;, and the expected number of commits to be tested after &lt;code&gt;bisect_rev&lt;/code&gt; is tested to &lt;code&gt;bisect_nr&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be good to &lt;code&gt;bisect_good&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be bad to &lt;code&gt;bisect_bad&lt;/code&gt;, and the number of commits we are bisecting right now to &lt;code&gt;bisect_all&lt;/code&gt;.</source>
          <target state="translated">これは、-- &lt;code&gt;--bisect&lt;/code&gt; と同じように計算されますが、 &lt;code&gt;refs/bisect/&lt;/code&gt; 内のrefが使用されないこと、およびシェルによって評価される準備ができているテキストを出力することを除きます。これらの行は、変数への中間点の改正の名前が割り当てられます &lt;code&gt;bisect_rev&lt;/code&gt; 後に試験すること、およびコミット数の期待値を &lt;code&gt;bisect_rev&lt;/code&gt; をするためにテストされる &lt;code&gt;bisect_nr&lt;/code&gt; 場合コミット数の期待値をテストするために、 &lt;code&gt;bisect_rev&lt;/code&gt; はに良いことが判明 &lt;code&gt;bisect_good&lt;/code&gt; 、 &lt;code&gt;bisect_rev&lt;/code&gt; が &lt;code&gt;bisect_bad&lt;/code&gt; に対して悪いことが判明した場合にテストされると予想されるコミットの数、および現在 &lt;code&gt;bisect_all&lt;/code&gt; に対して二分しているコミットの数。</target>
        </trans-unit>
        <trans-unit id="7d3cf717b036e3b0e81df34e24d7ea082a035f6a" translate="yes" xml:space="preserve">
          <source>This can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost.</source>
          <target state="translated">これにより、fetch を実行しているときに部分的なミラーを作成することができますが、履歴がスキップされて失われるので、一般的にはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="636e119b451b3bd7ccaf26b7d43733789f26ed19" translate="yes" xml:space="preserve">
          <source>This can also be set up as the default behaviour by using the &lt;code&gt;worktree.guessRemote&lt;/code&gt; config option.</source>
          <target state="translated">これは、 &lt;code&gt;worktree.guessRemote&lt;/code&gt; 構成オプションを使用して、デフォルトの動作として設定することもできます。</target>
        </trans-unit>
        <trans-unit id="fa409f68e80081ea9a669e9f13a5d077543254ef" translate="yes" xml:space="preserve">
          <source>This can be &lt;code&gt;end&lt;/code&gt;, which is the default, &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;.</source>
          <target state="translated">これは、デフォルトである &lt;code&gt;end&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;before&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="0de02388f102cf8ff32d10ea0ea1542e4435ae39" translate="yes" xml:space="preserve">
          <source>This can be any options that the archiver backend understands. See next section.</source>
          <target state="translated">これは、アーカイバーバックエンドが理解する任意のオプションを指定することができます。次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ebe928ea2c46867d2d30a22aa44b6d209b60b27" translate="yes" xml:space="preserve">
          <source>This can be combined with the gitweb configuration:</source>
          <target state="translated">gitwebの設定と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="3e2aafd0fe68d162abd0214f2c4dbcf97a317242" translate="yes" xml:space="preserve">
          <source>This can be enabled by default with the configuration option mailinfo.scissors.</source>
          <target state="translated">これは、設定オプションmailinfo.scissorsでデフォルトで有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="90b17ef61d05f77323fefc823815f1b4d0ca5c24" translate="yes" xml:space="preserve">
          <source>This can be set to a comma-separated list of strings. When a curl trace is enabled (see &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; above), whenever a &quot;Cookies:&quot; header sent by the client is dumped, values of cookies whose key is in that list (case-sensitive) are redacted.</source>
          <target state="translated">これは、文字列のコンマ区切りリストに設定できます。カールトレースが有効になっている場合（上記の &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; を参照）、クライアントから送信された「Cookies：」ヘッダーがダンプされるたびに、そのリストにキーがある（大文字と小文字が区別される）Cookieの値が編集されます。</target>
        </trans-unit>
        <trans-unit id="3d49143ca76086473ec42d2280fe45285788984b" translate="yes" xml:space="preserve">
          <source>This can be used to color the metadata of a blame line depending on age of the line.</source>
          <target state="translated">これを利用して、年齢に応じて非難ラインのメタデータに色をつけることができます。</target>
        </trans-unit>
        <trans-unit id="0f9fdab39f98d82a2bdc74c13a484288c9af48d4" translate="yes" xml:space="preserve">
          <source>This can be used to convert arguments to a command run in a subdirectory so that they can still be used after moving to the top-level of the repository. For example:</source>
          <target state="translated">これは、サブディレクトリで実行されるコマンドの引数を変換して、リポジトリのトップレベルに移動した後でも使用できるようにするために使用できます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7c4f04c6d6345aed6141f4d5502d056991a7840c" translate="yes" xml:space="preserve">
          <source>This can be used when you want to include further changes to the merge, or want to write your own merge commit message.</source>
          <target state="translated">これは、マージにさらに変更を加えたい場合や、独自のマージコミットメッセージを書きたい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="14d1ead4268c0c0f3315fceadadaf2f291770d82" translate="yes" xml:space="preserve">
          <source>This can be used with the &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; commands.</source>
          <target state="translated">これは、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 、 &lt;code&gt;branch&lt;/code&gt; 、および &lt;code&gt;tag&lt;/code&gt; コマンドで使用できます。</target>
        </trans-unit>
        <trans-unit id="9067f207a93cdcf6d90b3183367a4ae6097c31d6" translate="yes" xml:space="preserve">
          <source>This can be useful when you want to publish the tree from a commit without exposing its full history. You might want to do this to publish an open source branch of a project whose current tree is &quot;clean&quot;, but whose full history contains proprietary or otherwise encumbered bits of code.</source>
          <target state="translated">これは、コミットしたツリーの全履歴を公開せずに公開したい場合に便利です。現在のツリーが &quot;クリーン&quot; であるプロジェクトのオープンソースブランチを公開したい場合に便利ですが、その全履歴にはプロプライエタリなコードが含まれていたり、それ以外のコードが含まれていたりします。</target>
        </trans-unit>
        <trans-unit id="4ddcbb1d5b5e22f922e078b6b0d84fe1dcc0409b" translate="yes" xml:space="preserve">
          <source>This can happen, for example, if you:</source>
          <target state="translated">これは、例えば、あなたの場合に起こることがあります。</target>
        </trans-unit>
        <trans-unit id="9140f80526c6eb06ff98ed4abf5c0d2e07067266" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</source>
          <target state="translated">これは、3 者間マージアルゴリズムを使用して、2 つのヘッド (すなわち、現在のブランチとプルした別のブランチ)を解決することができます。これは、クリスクロスマージの曖昧さを注意深く検出しようとするもので、一般的には安全で高速と考えられています。</target>
        </trans-unit>
        <trans-unit id="10679b433b60fbaff0452d6d903b314fee5164d2" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames, but currently cannot make use of detected copies. This is the default merge strategy when pulling or merging one branch.</source>
          <target state="translated">これは、3 者間マージアルゴリズムを使用して 2 つのヘッドのみを解決することができます。3 者間マージに使用できる共通の祖先が複数ある場合、共通の祖先のマージされたツリーを作成し、それを 3 者間マージの参照ツリーとして使用します。これは、Linux 2.6 カーネルの開発履歴から取得した実際のマージコミットをテストした結果、誤マージを引き起こすことなく、マージの競合が少なくなることが報告されています。さらに、これはリネームを含むマージを検出して処理することができますが、現在のところ検出されたコピーを利用することはできません。これは、ひとつのブランチを引っ張ったりマージしたりするときのデフォルトのマージ戦略です。</target>
        </trans-unit>
        <trans-unit id="2cac39aeb86961e1363f7613dfed0033661ab943" translate="yes" xml:space="preserve">
          <source>This can speed up operations like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git status&lt;/code&gt; especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO&amp;rsquo;s. Defaults to true.</source>
          <target state="translated">これにより、特にキャッシングセマンティクスが弱く、IOレイテンシが比較的高いNFSなどのファイルシステムで、 &lt;code&gt;git diff&lt;/code&gt; や &lt;code&gt;git status&lt;/code&gt; などの操作を高速化できます。有効にすると、Gitはファイルシステムデータと並行してインデックス比較を行い、IOの重複を許可します。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="9202266152fd1a0a2194149286bebd74fe30a95c" translate="yes" xml:space="preserve">
          <source>This capability can be advertised multiple times. The first applicable refspec takes precedence. The left-hand of refspecs advertised with this capability must cover all refs reported by the list command. If no &lt;code&gt;refspec&lt;/code&gt; capability is advertised, there is an implied &lt;code&gt;refspec *:*&lt;/code&gt;.</source>
          <target state="translated">この機能は複数回アドバタイズできます。最初の適用可能なrefspecが優先されます。この機能でアドバタイズされるrefspecの左側は、listコマンドによって報告されるすべての参照をカバーする必要があります。 &lt;code&gt;refspec&lt;/code&gt; 機能がアドバタイズされていない場合、暗黙の &lt;code&gt;refspec *:*&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="561397ab0857a5bada65e17ac4aabd661a6939b5" translate="yes" xml:space="preserve">
          <source>This chapter covers internal details of the Git implementation which probably only Git developers need to understand.</source>
          <target state="translated">この章では、おそらくGit開発者だけが理解する必要があるであろうGitの実装の内部的な詳細を扱います。</target>
        </trans-unit>
        <trans-unit id="9301665301f3e50c4417122a8411be226ea5b235" translate="yes" xml:space="preserve">
          <source>This command always gets all objects. Historically, there were three options &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt; for choosing which objects to download. They are now silently ignored.</source>
          <target state="translated">このコマンドは常にすべてのオブジェクトを取得します。歴史的に、ダウンロードするオブジェクトを選択するための3つのオプション &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-c&lt;/code&gt; 、および &lt;code&gt;-t&lt;/code&gt; がありました。彼らは今黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="5b8a59dc9ca3a3d6f247d36df5fb54708fa69494" translate="yes" xml:space="preserve">
          <source>This command applies the patch but does not create a commit. Use &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; to create commits from patches generated by &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; and/or received by email.</source>
          <target state="translated">このコマンドはパッチを適用しますが、コミットは作成しません。使用&lt;a href=&quot;git-am&quot;&gt;のgit-AM [1]&lt;/a&gt;によって生成されたパッチからのコミットを作成するには、&lt;a href=&quot;git-format-patch&quot;&gt;gitのフォーマット-パッチ[1]&lt;/a&gt;および/または電子メールで受け取りました。</target>
        </trans-unit>
        <trans-unit id="1f849e1e7df08a5bb28860e4715d22e12f5d5d20" translate="yes" xml:space="preserve">
          <source>This command assists the developer in this process by recording conflicted automerge results and corresponding hand resolve results on the initial manual merge, and applying previously recorded hand resolutions to their corresponding automerge results.</source>
          <target state="translated">このコマンドは、最初の手動マージで競合するオートマージ結果と対応するハンド解決結果を記録し、以前に記録したハンド解決を対応するオートマージ結果に適用することで、このプロセスの開発者を支援します。</target>
        </trans-unit>
        <trans-unit id="b823d02fd766a4ae4b81090ce369454e7da568d6" translate="yes" xml:space="preserve">
          <source>This command caches credentials in memory for use by future Git programs. The stored credentials never touch the disk, and are forgotten after a configurable timeout. The cache is accessible over a Unix domain socket, restricted to the current user by filesystem permissions.</source>
          <target state="translated">このコマンドは、将来の Git プログラムで使用するための認証情報をメモリにキャッシュします。保存された認証情報はディスクに触れることはなく、設定したタイムアウト後に忘れ去られます。キャッシュへのアクセスは、Unix ドメインソケットを介して行います。</target>
        </trans-unit>
        <trans-unit id="4784337d21599fe7fcfddcd79392d8470207170e" translate="yes" xml:space="preserve">
          <source>This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run &lt;code&gt;git add&lt;/code&gt; again to add the new content to the index.</source>
          <target state="translated">このコマンドは、コミット前に複数回実行できます。addコマンドの実行時に、指定されたファイルのコンテンツのみが追加されます。後続の変更を次のコミットに含める場合は、 &lt;code&gt;git add&lt;/code&gt; を再度実行して、新しいコンテンツをインデックスに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c286ab165ab2a31532b621372beb627366820ec4" translate="yes" xml:space="preserve">
          <source>This command can be used where a &lt;code&gt;filemodify&lt;/code&gt; directive can appear, allowing it to be used in the middle of a commit. For a &lt;code&gt;filemodify&lt;/code&gt; using an inline directive, it can also appear right before the &lt;code&gt;data&lt;/code&gt; directive.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;filemodify&lt;/code&gt; ディレクティブを表示できる場所で使用できるため、コミットの途中で使用できます。インラインディレクティブを使用した &lt;code&gt;filemodify&lt;/code&gt; の場合は、 &lt;code&gt;data&lt;/code&gt; ディレクティブの直前に置くこともできます。</target>
        </trans-unit>
        <trans-unit id="74e4352fd2289d447be4133ac0e6d68d162428a6" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;applypatch-msg&lt;/code&gt;, &lt;code&gt;pre-applypatch&lt;/code&gt;, and &lt;code&gt;post-applypatch&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;applypatch-msg&lt;/code&gt; 、 &lt;code&gt;pre-applypatch&lt;/code&gt; 、および &lt;code&gt;post-applypatch&lt;/code&gt; フックを実行できます。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2e5610ce87e5d01d8f8246892b4f05f886b6ad5a" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;commit-msg&lt;/code&gt;, &lt;code&gt;prepare-commit-msg&lt;/code&gt;, &lt;code&gt;pre-commit&lt;/code&gt;, &lt;code&gt;post-commit&lt;/code&gt; and &lt;code&gt;post-rewrite&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;commit-msg&lt;/code&gt; 、 &lt;code&gt;prepare-commit-msg&lt;/code&gt; 、 &lt;code&gt;pre-commit&lt;/code&gt; 、 &lt;code&gt;post-commit&lt;/code&gt; および &lt;code&gt;post-rewrite&lt;/code&gt; フックを実行できます。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ba8d48bf258fdf0b61e4a3a7667022fd45b3e45" translate="yes" xml:space="preserve">
          <source>This command creates an empty Git repository - basically a &lt;code&gt;.git&lt;/code&gt; directory with subdirectories for &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, and template files. An initial &lt;code&gt;HEAD&lt;/code&gt; file that references the HEAD of the master branch is also created.</source>
          <target state="translated">このコマンドは、空のGitリポジトリを作成します-基本的に、 &lt;code&gt;objects&lt;/code&gt; 、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、およびテンプレートファイルのサブディレクトリを持つ &lt;code&gt;.git&lt;/code&gt; ディレクトリ。masterブランチのHEADを参照する最初の &lt;code&gt;HEAD&lt;/code&gt; ファイルも作成されます。</target>
        </trans-unit>
        <trans-unit id="283a3a39e231f6367045f912a15047dc4264c5e0" translate="yes" xml:space="preserve">
          <source>This command creates an empty Git repository - basically a &lt;code&gt;.git&lt;/code&gt; directory with subdirectories for &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, and template files. An initial branch without any commits will be created (see the &lt;code&gt;--initial-branch&lt;/code&gt; option below for its name).</source>
          <target state="translated">このコマンドは、空のGitリポジトリを作成します。基本的には、 &lt;code&gt;objects&lt;/code&gt; 、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、およびテンプレートファイルのサブディレクトリを持つ &lt;code&gt;.git&lt;/code&gt; ディレクトリです。コミットのない初期ブランチが作成されます（名前については、以下の &lt;code&gt;--initial-branch&lt;/code&gt; オプションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="f52be87adec196973421cd7319ee0f98c1860983" translate="yes" xml:space="preserve">
          <source>This command degenerates to download everything to complete the asked refs from the remote side when the local side does not have a common ancestor commit.</source>
          <target state="translated">このコマンドは、ローカル側に共通の祖先コミットがない場合に、リモート側から要求された refs を完了するためにすべてのものをダウンロードするように退化します。</target>
        </trans-unit>
        <trans-unit id="194b70091800ec19021441e8c1778ca9e02b53d5" translate="yes" xml:space="preserve">
          <source>This command ensures that the changes in the experimental branch are already in the current branch.</source>
          <target state="translated">このコマンドは、実験ブランチの変更がすでに現在のブランチにあることを保証します。</target>
        </trans-unit>
        <trans-unit id="1b788d383418fe8b134f7630991a2d6359c7dd7c" translate="yes" xml:space="preserve">
          <source>This command finds new changes in p4 and imports them as Git commits.</source>
          <target state="translated">このコマンドは、p4 の新しい変更点を見つけ、それを Git コミットとしてインポートします。</target>
        </trans-unit>
        <trans-unit id="4b11fc8efec3bd343a83e9f1aa4620a514b9ab8e" translate="yes" xml:space="preserve">
          <source>This command formats the lines of its standard input into a table with multiple columns. Each input line occupies one cell of the table. It is used internally by other git commands to format output into columns.</source>
          <target state="translated">このコマンドは、標準入力の行を複数の列を持つテーブルにフォーマットします。各入力行はテーブルのひとつのセルを占有します。これは、他の git コマンドで内部的に使用され、出力をカラムに整形するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ade7fdc971ed1f0936fb8fbff7bb1574367ca37b" translate="yes" xml:space="preserve">
          <source>This command is extremely useful if the frontend does not know (or does not care to know) what files are currently on the branch, and therefore cannot generate the proper &lt;code&gt;filedelete&lt;/code&gt; commands to update the content.</source>
          <target state="translated">このコマンドは、フロントエンドが現在ブランチ上にあるファイルを知らない（または知らない）場合に非常に役立ちます。そのため、コンテンツを更新するための適切な &lt;code&gt;filedelete&lt;/code&gt; コマンドを生成できません。</target>
        </trans-unit>
        <trans-unit id="5f45dc9e63088b4d8e620891decbfdd6655de376" translate="yes" xml:space="preserve">
          <source>This command is intended mostly for internal use by scripts automatically invoking &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、主に &lt;code&gt;git merge&lt;/code&gt; を自動的に呼び出すスクリプトによる内部使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="3710225b15829bc8cbeb92895b81ff709286e645" translate="yes" xml:space="preserve">
          <source>This command is recursive by default.</source>
          <target state="translated">このコマンドは、デフォルトでは再帰的です。</target>
        </trans-unit>
        <trans-unit id="6e8668d616c8790cb8d71e8720597de54ced7850" translate="yes" xml:space="preserve">
          <source>This command is used to combine all objects that do not currently reside in a &quot;pack&quot;, into a pack. It can also be used to re-organize existing packs into a single, more efficient pack.</source>
          <target state="translated">このコマンドは、現在 &quot;pack &quot;に存在しないすべてのオブジェクトを1つのpackにまとめるために使用します。また、既存のパックを一つの効率的なパックに再編成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="e7cbc44be580e3c1734536d3564c4b9dc7e501fa" translate="yes" xml:space="preserve">
          <source>This command is used to solve the storage and performance problem by storing the refs in a single file, &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt;. When a ref is missing from the traditional &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory hierarchy, it is looked up in this file and used if found.</source>
          <target state="translated">このコマンドは、単一のファイル &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; 格納することにより、ストレージとパフォーマンスの問題を解決するために使用されます。refが従来の &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリ階層から欠落している場合、このファイルで参照が検索され、見つかった場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="43f707239bbecf8d6bf96bbdb4b367abb8fd5357" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git archive&lt;/code&gt; side, and the program pair is meant to be used to get an archive from a remote repository.</source>
          <target state="translated">このコマンドは通常、エンドユーザーが直接呼び出すことはありません。プロトコルのUIは &lt;code&gt;git archive&lt;/code&gt; 側にあり、プログラムのペアはリモートリポジトリからアーカイブを取得するために使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="17d67b43408b7b4804e33e1e3b79dc1fbf03af1b" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git fetch-pack&lt;/code&gt; side, and the program pair is meant to be used to pull updates from a remote repository. For push operations, see &lt;code&gt;git send-pack&lt;/code&gt;.</source>
          <target state="translated">このコマンドは通常、エンドユーザーが直接呼び出すことはありません。プロトコルのUIは &lt;code&gt;git fetch-pack&lt;/code&gt; 側にあり、プログラムペアはリモートリポジトリから更新をプルするために使用されることを意図しています。プッシュ操作については、 &lt;code&gt;git send-pack&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="36ac8b84f92c3cf141e5ae101adcc45178aae4c7" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git send-pack&lt;/code&gt; side, and the program pair is meant to be used to push updates to remote repository. For pull operations, see &lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは通常、エンドユーザーが直接呼び出すことはありません。プロトコルのUIは &lt;code&gt;git send-pack&lt;/code&gt; 側にあり、プログラムペアはリモートリポジトリに更新をプッシュするために使用されることを意図しています。プル操作については、&lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack [1]を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f8cac5b996748b602d2e8f0cf9273cee3d1c4d80" translate="yes" xml:space="preserve">
          <source>This command lets you check that intermediate commits are compilable. The todo list becomes like that:</source>
          <target state="translated">このコマンドを使うと、中間コミットがコンパイル可能かどうかを確認できます。Todoリストはこのようになります。</target>
        </trans-unit>
        <trans-unit id="56bca57be11add071b8aeae38f6a28f443105856" translate="yes" xml:space="preserve">
          <source>This command manages the information recorded in the reflogs.</source>
          <target state="translated">このコマンドは、リブログに記録された情報を管理します。</target>
        </trans-unit>
        <trans-unit id="7c7ebb85111dd101dc1c2782f6e5cbc235a39c44" translate="yes" xml:space="preserve">
          <source>This command provides a way to interact with p4 repositories using Git.</source>
          <target state="translated">このコマンドは、Git を使って p4 リポジトリを操作する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="637c92f99feb8b30861eeaee2e3273c64a9b5351" translate="yes" xml:space="preserve">
          <source>This command reads some patches or commit messages from either the &amp;lt;file&amp;gt; arguments or the standard input if no &amp;lt;file&amp;gt; is specified. If &lt;code&gt;--parse&lt;/code&gt; is specified, the output consists of the parsed trailers.</source>
          <target state="translated">このコマンドは、&amp;lt;file&amp;gt;が指定されていない場合、&amp;lt;file&amp;gt;引数または標準入力からパッチまたはコミットメッセージを読み取ります。場合 &lt;code&gt;--parse&lt;/code&gt; が指定され、出力が解析されたトレーラーで構成されています。</target>
        </trans-unit>
        <trans-unit id="a38646d64359b52991af1358c674765acf2c0c11" translate="yes" xml:space="preserve">
          <source>This command should not list any commits. Otherwise, check out &lt;code&gt;master&lt;/code&gt; and merge &lt;code&gt;maint&lt;/code&gt; into it.</source>
          <target state="translated">このコマンドはコミットをリストするべきではありません。それ以外の場合は、 &lt;code&gt;master&lt;/code&gt; をチェックアウトし、 &lt;code&gt;maint&lt;/code&gt; をそれにマージします。</target>
        </trans-unit>
        <trans-unit id="6a853b09f1818b9d32f936bd42aa8a84af13b068" translate="yes" xml:space="preserve">
          <source>This command shows the differences between two versions of a patch series, or more generally, two commit ranges (ignoring merge commits).</source>
          <target state="translated">このコマンドは、パッチシリーズの2つのバージョン、より一般的には2つのコミット範囲(マージコミットを無視して)の違いを表示します。</target>
        </trans-unit>
        <trans-unit id="852903a68075d19a47d4520af94edde77996207f" translate="yes" xml:space="preserve">
          <source>This command stores credentials indefinitely on disk for use by future Git programs.</source>
          <target state="translated">このコマンドは、将来の Git プログラムで使用するための認証情報をディスク上に無期限に保存します。</target>
        </trans-unit>
        <trans-unit id="d143bf10d727fe2f5d0639ed85e199dd448d8bd2" translate="yes" xml:space="preserve">
          <source>This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.</source>
          <target state="translated">このコマンドは、作業ツリーで見つかった現在の内容を用いてインデックスを更新し、 次のコミットに向けてステージングされた内容を準備します。通常は、既存のパスの現在の内容を全体として追加しますが、オプションによっては、作業ツリーファイルに加えられた変更の一部だけを追加したり、作業ツリーに存在しないパスを削除したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="61eacd31ecbd262bdcbed11d9c6103318919d1be" translate="yes" xml:space="preserve">
          <source>This command uploads a mailbox generated with &lt;code&gt;git format-patch&lt;/code&gt; into an IMAP drafts folder. This allows patches to be sent as other email is when using mail clients that cannot read mailbox files directly. The command also works with any general mailbox in which emails have the fields &quot;From&quot;, &quot;Date&quot;, and &quot;Subject&quot; in that order.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git format-patch&lt;/code&gt; で生成されたメールボックスをIMAP下書きフォルダーにアップロードします。これにより、メールボックスファイルを直接読み取ることができないメールクライアントを使用している場合に、他のメールと同様にパッチを送信できます。このコマンドは、メールのフィールドが「From」、「Date」、「Subject」の順になっている一般的なメールボックスでも機能します。</target>
        </trans-unit>
        <trans-unit id="a3bcbdfcf8f3a072ac23f24cf310648f9691fb70" translate="yes" xml:space="preserve">
          <source>This command uses a binary search algorithm to find which commit in your project&amp;rsquo;s history introduced a bug. You use it by first telling it a &quot;bad&quot; commit that is known to contain the bug, and a &quot;good&quot; commit that is known to be before the bug was introduced. Then &lt;code&gt;git
bisect&lt;/code&gt; picks a commit between those two endpoints and asks you whether the selected commit is &quot;good&quot; or &quot;bad&quot;. It continues narrowing down the range until it finds the exact commit that introduced the change.</source>
          <target state="translated">このコマンドは、バイナリ検索アルゴリズムを使用して、プロジェクトの履歴でバグが発生したコミットを見つけます。まず、バグが含まれていることがわかっている「悪い」コミットと、バグが導入される前にわかっている「良い」コミットを伝えることによって、それを使用します。次に、 &lt;code&gt;git bisect&lt;/code&gt; が2つのエンドポイント間のコミットを選択し、選択したコミットが「良い」か「悪い」かを尋ねます。変更をもたらした正確なコミットが見つかるまで、範囲を絞り込み続けます。</target>
        </trans-unit>
        <trans-unit id="097f8af4b6f26b418927a5ca4b24d71746b1f843" translate="yes" xml:space="preserve">
          <source>This command uses the &lt;code&gt;diff.color.*&lt;/code&gt; and &lt;code&gt;pager.range-diff&lt;/code&gt; settings (the latter is on by default). See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;diff.color.*&lt;/code&gt; および &lt;code&gt;pager.range-diff&lt;/code&gt; 設定を使用します（後者はデフォルトでオンです）。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="03bab6a03561ee7ff2e9bf92505bcdd5322bfb51" translate="yes" xml:space="preserve">
          <source>This command will fail with non-zero status upon error. Some exit codes are:</source>
          <target state="translated">このコマンドはエラー時にゼロ以外のステータスで失敗します。いくつかの終了コードがあります。</target>
        </trans-unit>
        <trans-unit id="7ed6af6e5518c122d94f4b8fea824fc7938bd5aa" translate="yes" xml:space="preserve">
          <source>This command will fetch changes from the remote branches to your remote-tracking branches &lt;code&gt;origin/*&lt;/code&gt;, and merge the default branch into the current branch.</source>
          <target state="translated">このコマンドは、リモートブランチからリモートトラッキングブランチ &lt;code&gt;origin/*&lt;/code&gt; への変更をフェッチし、デフォルトのブランチを現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="99c24081605f25434a1fa0a51df82045bf4b7763" translate="yes" xml:space="preserve">
          <source>This command will save your changes away to the &lt;code&gt;stash&lt;/code&gt;, and reset your working tree and the index to match the tip of your current branch. Then you can make your fix as usual.</source>
          <target state="translated">このコマンドは、変更を &lt;code&gt;stash&lt;/code&gt; に保存し、現在のブランチの先端に一致するように作業ツリーとインデックスをリセットします。その後、通常どおり修正を行うことができます。</target>
        </trans-unit>
        <trans-unit id="cb41b9bb98cbe715b8d6c0b50eb0b52309cdc91a" translate="yes" xml:space="preserve">
          <source>This commit will get blown away so a throw-away log message is OK.</source>
          <target state="translated">このコミットは吹き飛ばされてしまうので、投げやりなログメッセージでOKです。</target>
        </trans-unit>
        <trans-unit id="068d7057b3017084327709c3e61c2e224fb2a5f6" translate="yes" xml:space="preserve">
          <source>This commits all other changes in the index.</source>
          <target state="translated">これはインデックス内の他のすべての変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="1d649ab8ff53024e7549864469811ccee0abf2e7" translate="yes" xml:space="preserve">
          <source>This commits your first edits in &lt;code&gt;branch1&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;branch1&lt;/code&gt; での最初の編集がコミットされます。</target>
        </trans-unit>
        <trans-unit id="8bc13c84a009ea0d6abb173ac6100dc00ae7606a" translate="yes" xml:space="preserve">
          <source>This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way &lt;code&gt;diff-tree&lt;/code&gt; shows a merge commit with these flags.</source>
          <target state="translated">これは、ステージ2（私たちのブランチ）、ステージ3（それらのブランチ）、および作業ツリーファイルを比較し、 &lt;code&gt;diff-tree&lt;/code&gt; がこれらのフラグを使用したマージコミットを示すのと同様に、結合されたdiffを出力します。</target>
        </trans-unit>
        <trans-unit id="d3fe164a17e549b712f12743eb90dc676fb8455c" translate="yes" xml:space="preserve">
          <source>This computation involves traversing all the reachable objects, i.e. it has the same cost as &lt;code&gt;git prune&lt;/code&gt;. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn&amp;rsquo;t protect objects referred to by reflogs.</source>
          <target state="translated">この計算には、到達可能なすべてのオブジェクトのトラバースが含まれます。つまり、 &lt;code&gt;git prune&lt;/code&gt; と同じコストです。これは主に、reflogによって参照されるオブジェクトを保護していなかった古いバージョンのGitを使用したガベージコレクションによって引き起こされる破損を修正することを目的としています。</target>
        </trans-unit>
        <trans-unit id="241f3360b1ffda93090a6212a837542c91b1e09e" translate="yes" xml:space="preserve">
          <source>This config option controls whether or not the given &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; runs during a &lt;code&gt;git maintenance run --schedule=&amp;lt;frequency&amp;gt;&lt;/code&gt; command. The value must be one of &quot;hourly&quot;, &quot;daily&quot;, or &quot;weekly&quot;.</source>
          <target state="translated">この設定オプションは、指定された &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; が &lt;code&gt;git maintenance run --schedule=&amp;lt;frequency&amp;gt;&lt;/code&gt; コマンド中に実行されるかどうかを制御します。値は、「毎時」、「毎日」、または「毎週」のいずれかである必要があります。</target>
        </trans-unit>
        <trans-unit id="9e7c3905269f2318ce8a27a07b91b053d9dd7129" translate="yes" xml:space="preserve">
          <source>This configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple &lt;code&gt;--[no-]notes[=]&lt;/code&gt; options passed in. That is, a value of &lt;code&gt;true&lt;/code&gt; will show the default notes, a value of &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; will also show notes from that notes ref and a value of &lt;code&gt;false&lt;/code&gt; will negate previous configurations and not show notes.</source>
          <target state="translated">この構成を複数回指定して、複数のノート参照を含めることができます。その場合、渡された複数の &lt;code&gt;--[no-]notes[=]&lt;/code&gt; オプションと同様に動作します。つまり、 &lt;code&gt;true&lt;/code&gt; の値はデフォルトのノートを表示し、 &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; の値はそのノートのノートも表示しますrefと値 &lt;code&gt;false&lt;/code&gt; は、以前の構成を無効にし、メモを表示しません。</target>
        </trans-unit>
        <trans-unit id="0675827ca8d724102e17a053585b958058551f3d" translate="yes" xml:space="preserve">
          <source>This configuration doesn&amp;rsquo;t have any effect on authenticating to remote services; for that, see &lt;code&gt;credential.username&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この構成は、リモートサービスへの認証には影響しません。そのためには、&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt; &lt;code&gt;credential.username&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e6aa4372bde5e931f9e4e006e5a3cd0aea5ccf17" translate="yes" xml:space="preserve">
          <source>This configuration is used in two ways:</source>
          <target state="translated">この設定は2つの方法で使用されます。</target>
        </trans-unit>
        <trans-unit id="06f31556dacb48424e7a1be662dd26364f785ce9" translate="yes" xml:space="preserve">
          <source>This configuration variable is useful in cases where you&amp;rsquo;d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an &lt;code&gt;init.templateDir&lt;/code&gt; where you&amp;rsquo;ve changed default hooks.</source>
          <target state="translated">この構成変数は、Gitフックをリポジトリごとに構成する代わりに一元的に構成する場合、またはデフォルトのフックを変更した &lt;code&gt;init.templateDir&lt;/code&gt; を使用するより柔軟で一元化された代替手段として役立ちます。 。</target>
        </trans-unit>
        <trans-unit id="eed4a11499740f4bb5f61d3ce7354c5409f33bf3" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. It can be set by the &lt;code&gt;diff.colorMovedWS&lt;/code&gt; configuration setting. These modes can be given as a comma separated list:</source>
          <target state="translated">&lt;code&gt;--color-moved&lt;/code&gt; の移動検出を実行するときに空白が無視される方法を構成します。それはで設定することができ &lt;code&gt;diff.colorMovedWS&lt;/code&gt; 構成設定。これらのモードは、コンマ区切りのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="9b4ea1fd788cef298d939e77017eddec04b80461" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. These modes can be given as a comma separated list:</source>
          <target state="translated">&lt;code&gt;--color-moved&lt;/code&gt; の移動検出を実行するときに空白が無視される方法を構成します。これらのモードは、コンマ区切りのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="77030a3f3e0bddf7aada34bc0939552bc0993e3c" translate="yes" xml:space="preserve">
          <source>This counts the number of unpacked object files and disk space consumed by them, to help you decide when it is a good time to repack.</source>
          <target state="translated">これは、アンパックされたオブジェクトファイルの数と、それらによって消費されたディスク容量をカウントし、再パックするのに適した時期を決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3e67b0f2a3d6f811dcdec6a80edd2cc8d01b0b6b" translate="yes" xml:space="preserve">
          <source>This creates a &quot;lightweight&quot; tag. If you would also like to include a comment with the tag, and possibly sign it cryptographically, then you should create a tag object instead; see the &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; man page for details.</source>
          <target state="translated">これにより、「軽量」タグが作成されます。タグ付きのコメントも含め、暗号化して署名したい場合は、代わりにタグオブジェクトを作成する必要があります。詳細は&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]の&lt;/a&gt; manページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="687e61032de29ec5a828bf99d3854a432acd2a82" translate="yes" xml:space="preserve">
          <source>This creates a new directory &quot;myrepo&quot; containing a clone of Alice&amp;rsquo;s repository. The clone is on an equal footing with the original project, possessing its own copy of the original project&amp;rsquo;s history.</source>
          <target state="translated">これにより、Aliceのリポジトリのクローンを含む新しいディレクトリ「myrepo」が作成されます。クローンは元のプロジェクトと同じ立場にあり、元のプロジェクトの履歴の独自のコピーを持っています。</target>
        </trans-unit>
        <trans-unit id="c2fd84fc2fa04021fed2cadb8707ca64b05a22fb" translate="yes" xml:space="preserve">
          <source>This creates a single &quot;pack file&quot; in .git/objects/pack/ containing all currently unpacked objects. You can then run</source>
          <target state="translated">これにより、.git/objects/pack/にひとつの &quot;pack ファイル&quot; が作成され、現在アンパックされているすべてのオブジェクトが含まれます。これを実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="bf43931e74b20a3da5197ed923f890fe71d72016" translate="yes" xml:space="preserve">
          <source>This default configuration is achieved by creating references to the remote branch heads under &lt;code&gt;refs/remotes/origin&lt;/code&gt; and by initializing &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables.</source>
          <target state="translated">このデフォルト構成は、 &lt;code&gt;refs/remotes/origin&lt;/code&gt; の下にリモートブランチヘッドへの参照を作成し、 &lt;code&gt;remote.origin.url&lt;/code&gt; および &lt;code&gt;remote.origin.fetch&lt;/code&gt; 構成変数を初期化することによって実現されます。</target>
        </trans-unit>
        <trans-unit id="984768ad68337dfe2b0015e657c9f4f069afabc8" translate="yes" xml:space="preserve">
          <source>This defines two submodules, &lt;code&gt;libfoo&lt;/code&gt; and &lt;code&gt;libbar&lt;/code&gt;. These are expected to be checked out in the paths &lt;code&gt;include/foo&lt;/code&gt; and &lt;code&gt;include/bar&lt;/code&gt;, and for both submodules a URL is specified which can be used for cloning the submodules.</source>
          <target state="translated">これは、二つのサブモジュール、定義 &lt;code&gt;libfoo&lt;/code&gt; と &lt;code&gt;libbar&lt;/code&gt; を。これらはパス &lt;code&gt;include/foo&lt;/code&gt; および &lt;code&gt;include/bar&lt;/code&gt; でチェックアウトされることが期待されており、両方のサブモジュールに対して、サブモジュールのクローン作成に使用できるURLが指定されています。</target>
        </trans-unit>
        <trans-unit id="57db5304522b1070a0df1071ce5df5d38ea7d002" translate="yes" xml:space="preserve">
          <source>This describes how Tony Luck uses Git in his role as maintainer of the IA64 architecture for the Linux kernel.</source>
          <target state="translated">LinuxカーネルのIA64アーキテクチャのメンテナとしてTony LuckがどのようにGitを使っているかを説明しています。</target>
        </trans-unit>
        <trans-unit id="c9e275f2996b22cd4415c594fae8f08a0dfe70e8" translate="yes" xml:space="preserve">
          <source>This determines the coloring scheme to be applied to blame output. It can be &lt;code&gt;repeatedLines&lt;/code&gt;, &lt;code&gt;highlightRecent&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt; which is the default.</source>
          <target state="translated">これにより、非難出力に適用される配色が決まります。それはすることができ &lt;code&gt;repeatedLines&lt;/code&gt; 、 &lt;code&gt;highlightRecent&lt;/code&gt; 、または &lt;code&gt;none&lt;/code&gt; デフォルトです。</target>
        </trans-unit>
        <trans-unit id="56ee29b22f07db9306c3380b74b5b0180828e415" translate="yes" xml:space="preserve">
          <source>This directory is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/objects&quot; will be used instead.</source>
          <target state="translated">GIT_COMMON_DIRが設定されている場合、このディレクトリは無視され、代わりに&quot;$GIT_COMMON_DIR/objects &quot;が使用されます。</target>
        </trans-unit>
        <trans-unit id="2072b137cd96280de0e098678b51f23a76dcd0dc" translate="yes" xml:space="preserve">
          <source>This disables potentially expensive checks to workaround broken symlinks checked into SVN by broken clients. Set this option to &quot;false&quot; if you track a SVN repository with many empty blobs that are not symlinks. This option may be changed while &lt;code&gt;git svn&lt;/code&gt; is running and take effect on the next revision fetched. If unset, &lt;code&gt;git svn&lt;/code&gt; assumes this option to be &quot;true&quot;.</source>
          <target state="translated">これにより、壊れたクライアントによってSVNにチェックインされた壊れたシンボリックリンクを回避するために、コストがかかる可能性のあるチェックが無効になります。シンボリックリンクではない空のblobが多数あるSVNリポジトリを追跡する場合は、このオプションを「false」に設定します。このオプションは &lt;code&gt;git svn&lt;/code&gt; の実行中に変更され、フェッチされた次のリビジョンで有効になります。設定されていない場合、 &lt;code&gt;git svn&lt;/code&gt; はこのオプションを「true」と見なします。</target>
        </trans-unit>
        <trans-unit id="006e62625e60aabc7f31fa591f6f9b4a3bd2a878" translate="yes" xml:space="preserve">
          <source>This document attempts to write down and motivate some of the workflow elements used for &lt;code&gt;git.git&lt;/code&gt; itself. Many ideas apply in general, though the full workflow is rarely required for smaller projects with fewer people involved.</source>
          <target state="translated">このドキュメントは、 &lt;code&gt;git.git&lt;/code&gt; 自体に使用されるワークフロー要素のいくつかを書き留めて動機づけることを試みます。一般に多くのアイデアが当てはまりますが、関係する人が少ない小規模なプロジェクトでは、完全なワークフローが必要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="8cd9193645885514540ac19f3167f508bebca422" translate="yes" xml:space="preserve">
          <source>This document presents a specification for a version 2 of Git&amp;rsquo;s wire protocol. Protocol v2 will improve upon v1 in the following ways:</source>
          <target state="translated">このドキュメントは、Gitのワイヤプロトコルのバージョン2の仕様を示しています。プロトコルv2は、v1を次のように改善します。</target>
        </trans-unit>
        <trans-unit id="46bd1a26c48d1772be26d3d869cc4b6544004ea1" translate="yes" xml:space="preserve">
          <source>This document shows the &quot;raw&quot; syntax as seen by git. The shell and other UIs might require additional quoting to protect special characters and to avoid word splitting.</source>
          <target state="translated">このドキュメントでは、git から見た &quot;生の&quot; 構文を示しています。シェルやその他の UI では、特殊文字を保護したり単語の分割を避けるために追加のクォートが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a76f8971dde9f8810b677765aca0d70490d9f8fa" translate="yes" xml:space="preserve">
          <source>This document will serve as the master list for extensions. Any implementation wishing to define a new extension should make a note of it here, in order to claim the name.</source>
          <target state="translated">このドキュメントは拡張機能のマスターリストとして機能します。新しい拡張機能を定義したい実装は、その名前を主張するためにここにメモしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="d24a591988945bec7d040b25bd5a37c73014bcf3" translate="yes" xml:space="preserve">
          <source>This does not affect &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; or the &lt;code&gt;git-diff-*&lt;/code&gt; plumbing commands. Can be overridden on the command line with the &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; option.</source>
          <target state="translated">これは&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;または &lt;code&gt;git-diff-*&lt;/code&gt; plumbingコマンドには影響しません。コマンドラインで &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; オプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="99af460532d2c9f72e65ed17f7464c8aa563e1f4" translate="yes" xml:space="preserve">
          <source>This does not force normalization of text files, but does ensure that text files that you introduce to the repository have their line endings normalized to LF when they are added, and that files that are already normalized in the repository stay normalized.</source>
          <target state="translated">これはテキストファイルの正規化を強制するものではありませんが、リポジトリに導入するテキストファイルが追加されたときに行末がLFに正規化され、リポジトリで既に正規化されているファイルは正規化されたままであることを保証します。</target>
        </trans-unit>
        <trans-unit id="257328db317fb853114a41f8430f87cd826d08a0" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t interfere with interoperating with the Subversion repository you cloned from, but if you wish for your local Git repository to be able to interoperate with someone else&amp;rsquo;s local Git repository, either don&amp;rsquo;t use this option or you should both use it in the same local time zone.</source>
          <target state="translated">これは、クローン元のSubversionリポジトリとの相互運用には影響しませんが、ローカルGitリポジトリを他の誰かのローカルGitリポジトリと相互運用できるようにする場合は、このオプションを使用しないか、両方で使用する必要があります。同じローカルタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="45497ef8f3614492732f059c04bc30af3c6593e9" translate="yes" xml:space="preserve">
          <source>This effectively runs &lt;code&gt;add --interactive&lt;/code&gt;, but bypasses the initial command menu and directly jumps to the &lt;code&gt;patch&lt;/code&gt; subcommand. See &amp;ldquo;Interactive mode&amp;rdquo; for details.</source>
          <target state="translated">これは効果的に &lt;code&gt;add --interactive&lt;/code&gt; を実行しますが、初期コマンドメニューをバイパスし、直接 &lt;code&gt;patch&lt;/code&gt; サブコマンドにジャンプします。詳細については、「インタラクティブモード」を参照してください。</target>
        </trans-unit>
        <trans-unit id="53c54ba0465bbf9916ac436659dbf61aedb86156" translate="yes" xml:space="preserve">
          <source>This enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">これにより、親の書き換えが可能になります。上記の &lt;code&gt;History Simplification&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="ccdf590466d01d04dcf6da8ad6a6bec9f02c4d8e" translate="yes" xml:space="preserve">
          <source>This environment allows the specification of an alternate index file. If not specified, the default of &lt;code&gt;$GIT_DIR/index&lt;/code&gt; is used.</source>
          <target state="translated">この環境では、代替インデックスファイルを指定できます。指定しない場合、デフォルトの &lt;code&gt;$GIT_DIR/index&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="2abd55a6650395bf249165e2f6568e98ab14958c" translate="yes" xml:space="preserve">
          <source>This environment variable allows the specification of an index version for new repositories. It won&amp;rsquo;t affect existing index files. By default index file version 2 or 3 is used. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt; for more information.</source>
          <target state="translated">この環境変数を使用すると、新しいリポジトリのインデックスバージョンを指定できます。既存のインデックスファイルには影響しません。デフォルトでは、インデックスファイルバージョン2または3が使用されます。詳細については、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2763e4fc7ba1973ac90184c067d20f9d0fda70a8" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$EDITOR&lt;/code&gt; and &lt;code&gt;$VISUAL&lt;/code&gt;. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; and the &lt;code&gt;core.editor&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は、 &lt;code&gt;$EDITOR&lt;/code&gt; および &lt;code&gt;$VISUAL&lt;/code&gt; オーバーライドします。これは、対話モードでエディターを起動するときに、いくつかのGitコマンドで使用されます。&lt;a href=&quot;git-var&quot;&gt;git-var [1]&lt;/a&gt;および&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt; &lt;code&gt;core.editor&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="ddbc158f0dcc3c8ea52494b42fbb66d15e06e460" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$PAGER&lt;/code&gt;. If it is set to an empty string or to the value &quot;cat&quot;, Git will not launch a pager. See also the &lt;code&gt;core.pager&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は &lt;code&gt;$PAGER&lt;/code&gt; オーバーライドします。空の文字列または値「cat」に設定されている場合、Gitはポケットベルを起動しません。&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の &lt;code&gt;core.pager&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="f82f561bc1110497edce7ce36b1651b7ef0d8603" translate="yes" xml:space="preserve">
          <source>This environment variable overrides the configured Git editor when editing the todo list of an interactive rebase. See also &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; and the &lt;code&gt;sequence.editor&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は、インタラクティブリベースのToDoリストを編集するときに、構成されたGitエディターをオーバーライドします。&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;および&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt; &lt;code&gt;sequence.editor&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="85b43d9b9e3f28d79e0c1169949e722bd8f10c35" translate="yes" xml:space="preserve">
          <source>This environment variable overrides the configured Git editor when editing the todo list of an interactive rebase. See also linkit::git-rebase[1] and the &lt;code&gt;sequence.editor&lt;/code&gt; option in linkit::git-config[1].</source>
          <target state="translated">この環境変数は、インタラクティブリベースのToDoリストを編集するときに、構成されたGitエディターをオーバーライドします。linkit :: git-rebase [1]およびlinkit :: git-config [1]の &lt;code&gt;sequence.editor&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="25ea93764f52eb3dcc477c86398962bd9bbded98" translate="yes" xml:space="preserve">
          <source>This event contains the command name for this git process and the hierarchy of commands from parent git processes.</source>
          <target state="translated">このイベントには、この git プロセスのコマンド名と親 git プロセスからのコマンドの階層が含まれます。</target>
        </trans-unit>
        <trans-unit id="f5d9f72db5c7ffa9776d5c71964338d54a2515a4" translate="yes" xml:space="preserve">
          <source>This event contains the complete argv received by main().</source>
          <target state="translated">このイベントには、main()が受信した完全な argv が含まれます。</target>
        </trans-unit>
        <trans-unit id="2a4c1f111536d47e2687ea692bfe5bd399b4307d" translate="yes" xml:space="preserve">
          <source>This event contains the discovered full path of the git executable (on platforms that are configured to resolve it).</source>
          <target state="translated">このイベントには、発見された git 実行ファイルのフルパスが含まれます (これを解決するように設定されているプラットフォームでは)。</target>
        </trans-unit>
        <trans-unit id="c8af8dbf59abf700f44d6449c7c951b54692bd2e" translate="yes" xml:space="preserve">
          <source>This event defines a repo-id and associates it with the root of the worktree.</source>
          <target state="translated">このイベントはレポIDを定義し、ワークツリーのルートに関連付けます。</target>
        </trans-unit>
        <trans-unit id="efbcacd1a490c688869fdd46397140e75919d7ab" translate="yes" xml:space="preserve">
          <source>This event describes a child process that is about to be spawned.</source>
          <target state="translated">このイベントは、スポーンされようとしている子プロセスを記述します。</target>
        </trans-unit>
        <trans-unit id="8c8f935852467fd7c3b46787d77518dc3611a986" translate="yes" xml:space="preserve">
          <source>This event gives the version of the executable and the EVENT format. It should always be the first event in a trace session. The EVENT format version will be incremented if new event types are added, if existing fields are removed, or if there are significant changes in interpretation of existing events or fields. Smaller changes, such as adding a new field to an existing event, will not require an increment to the EVENT format version.</source>
          <target state="translated">このイベントは、実行ファイルのバージョンと EVENT のフォーマットを提供します。これは常にトレースセッションの最初のイベントでなければなりません。新しいイベントタイプが追加されたり、既存のフィールドが削除されたり、既存のイベントやフィールドの解釈に重大な変更があった場合、EVENT フォーマットのバージョンはインクリメントされます。既存のイベントに新しいフィールドを追加するなどの小さな変更は、EVENT フォーマットのバージョンをインクリメントする必要はありません。</target>
        </trans-unit>
        <trans-unit id="7ea085d0e611d87af89c62af2b70656c0016dc7e" translate="yes" xml:space="preserve">
          <source>This event is emitted by the Trace2 &lt;code&gt;atexit&lt;/code&gt; routine during final shutdown. It should be the last event emitted by the process.</source>
          <target state="translated">このイベントは、最後のシャットダウン中にTrace2 &lt;code&gt;atexit&lt;/code&gt; ルーチンによって発行されます。これは、プロセスによって発行された最後のイベントである必要があります。</target>
        </trans-unit>
        <trans-unit id="0b20979b7d0436896a9e4dd619b31c2f047cbd64" translate="yes" xml:space="preserve">
          <source>This event is emitted when git calls &lt;code&gt;exit()&lt;/code&gt;.</source>
          <target state="translated">このイベントは、gitが &lt;code&gt;exit()&lt;/code&gt; を呼び出したときに発生します。</target>
        </trans-unit>
        <trans-unit id="b7857843019d5043272d37ee889b33f311c45158" translate="yes" xml:space="preserve">
          <source>This event is emitted when one of the &lt;code&gt;error()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, &lt;code&gt;warning()&lt;/code&gt;, or &lt;code&gt;usage()&lt;/code&gt; functions are called.</source>
          <target state="translated">このイベントは、 &lt;code&gt;error()&lt;/code&gt; 、 &lt;code&gt;die()&lt;/code&gt; 、 &lt;code&gt;warning()&lt;/code&gt; 、または &lt;code&gt;usage()&lt;/code&gt; 関数のいずれかが呼び出されたときに発行されます。</target>
        </trans-unit>
        <trans-unit id="9c63cb7135e802e553dc499a675da732d4f96c3a" translate="yes" xml:space="preserve">
          <source>This event is emitted when one of the &lt;code&gt;error()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, or &lt;code&gt;usage()&lt;/code&gt; functions are called.</source>
          <target state="translated">このイベントは、 &lt;code&gt;error()&lt;/code&gt; 、 &lt;code&gt;die()&lt;/code&gt; 、または &lt;code&gt;usage()&lt;/code&gt; 関数のいずれかが呼び出されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="ebb8b872e605289564f67171a3133d84781ab210" translate="yes" xml:space="preserve">
          <source>This event is emitted when the program is terminated by a user signal. Depending on the platform, the signal event may prevent the &quot;atexit&quot; event from being generated.</source>
          <target state="translated">このイベントは、ユーザ信号によってプログラムが終了したときに発生します。プラットフォームによっては、シグナルイベントによって &quot;atexit &quot;イベントが発生しなくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="2ca8802f12c75856c4e7ea399ac7a1939e2a37eb" translate="yes" xml:space="preserve">
          <source>This event is generated after the current process has returned from the waitpid() and collected the exit information from the child.</source>
          <target state="translated">このイベントは、現在のプロセスが waitpid()から戻り、子プロセスの終了情報を収集した後に生成されます。</target>
        </trans-unit>
        <trans-unit id="9fe6d803410a7d3a5cd4bc2114534352d230200b" translate="yes" xml:space="preserve">
          <source>This event is generated before git attempts to &lt;code&gt;exec()&lt;/code&gt; another command rather than starting a child process.</source>
          <target state="translated">このイベントは、git が子プロセスを開始するのではなく、別のコマンドを &lt;code&gt;exec()&lt;/code&gt; する前に生成されます。</target>
        </trans-unit>
        <trans-unit id="93caa8939f471f1240286ec30c6905ef3996f20e" translate="yes" xml:space="preserve">
          <source>This event is generated if the &lt;code&gt;exec()&lt;/code&gt; fails and control returns to the current git command.</source>
          <target state="translated">このイベントは、 &lt;code&gt;exec()&lt;/code&gt; が失敗し、制御が現在のgitコマンドに戻った場合に生成されます。</target>
        </trans-unit>
        <trans-unit id="15a0b5629f08a42566247fd3e8af69adc717eef8" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter, such as a config setting, command-line flag, or environment variable.</source>
          <target state="translated">このイベントは、コンフィグ設定、コマンドラインフラグ、環境変数などのグローバルパラメータをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="814427d239ec02f31ac7bf0fb913766e18bfb53e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter.</source>
          <target state="translated">このイベントは、グローバルパラメータをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="54b6cc61590e1e0eba249cc8ddd71ddff154355b" translate="yes" xml:space="preserve">
          <source>This event is generated to log a pre-formatted JSON string containing structured data.</source>
          <target state="translated">このイベントは、構造化データを含む事前にフォーマットされた JSON 文字列をログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="0ee97bbcf1fde0cf306363257efe6b7de578045e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a thread- and region-local key/value pair.</source>
          <target state="translated">このイベントは、スレッドとリージョンローカルのキー/値のペアをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="4caa8d05330c9e1126d8391705e312b0d8975d63" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread exits. It is generated from &lt;strong&gt;within&lt;/strong&gt; the thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">このイベントは、スレッドの終了時に生成されます。スレッドのthread-proc &lt;strong&gt;内&lt;/strong&gt;から生成され&lt;strong&gt;ます&lt;/strong&gt;（TLSのため）。</target>
        </trans-unit>
        <trans-unit id="eba565beaf1b2269c764c147f5196869afe38bce" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread is started. It is generated from &lt;strong&gt;within&lt;/strong&gt; the new thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">このイベントは、スレッドの開始時に生成されます。新しいスレッドのthread-proc &lt;strong&gt;内&lt;/strong&gt;から生成され&lt;strong&gt;ます&lt;/strong&gt;（TLSのため）。</target>
        </trans-unit>
        <trans-unit id="1684fe3e3862662b36c1dfb0c9bb20558e1f338a" translate="yes" xml:space="preserve">
          <source>This event is generated when entering a region.</source>
          <target state="translated">このイベントは、地域に入ったときに発生します。</target>
        </trans-unit>
        <trans-unit id="809d72e4f54bac6c7054af4e990fa8c97e8c764d" translate="yes" xml:space="preserve">
          <source>This event is generated when leaving a region.</source>
          <target state="translated">このイベントはリージョンを離れるときに発生します。</target>
        </trans-unit>
        <trans-unit id="1e6a7368deeb7ec580313fc82400f1c12d17672a" translate="yes" xml:space="preserve">
          <source>This event is present when an alias is expanded.</source>
          <target state="translated">このイベントはエイリアスが展開されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="bca802363ffa9599d9e13df71e2f62ec1454e32f" translate="yes" xml:space="preserve">
          <source>This event is written to the git-trace2-discard sentinel file if there are too many files in the target trace directory (see the trace2.maxFiles config option).</source>
          <target state="translated">このイベントは、ターゲットのトレースディレクトリにファイルが多すぎる場合に git-trace2-discard sentinel ファイルに書き込まれます (trace2.maxFiles 設定オプションを参照ください)。</target>
        </trans-unit>
        <trans-unit id="8c2ad60a0d9356a6e908b18056fbac1c2b1d4129" translate="yes" xml:space="preserve">
          <source>This event, when present, describes the command variant This event may be emitted more than once.</source>
          <target state="translated">このイベントが存在する場合、このイベントはコマンドバリアントを記述します。 このイベントは複数回発行される可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e7d09cee878b03064fb9d9484c73f3f00225826" translate="yes" xml:space="preserve">
          <source>This example also shows that thread names are assigned in a racy manner as each thread starts and allocates TLS storage.</source>
          <target state="translated">この例でも、各スレッドが起動してTLSストレージを確保する際に、スレッド名がキビキビと割り当てられていることがわかります。</target>
        </trans-unit>
        <trans-unit id="e296b28f1fcad64b66f85f9abe931f54fc5fbde0" translate="yes" xml:space="preserve">
          <source>This example imports a new remote &quot;p4/proj2&quot; into an existing Git repository:</source>
          <target state="translated">この例では、新しいリモートの「p4/proj2」を既存のGitリポジトリにインポートしています。</target>
        </trans-unit>
        <trans-unit id="7cbbc9fac80d3f9e05217d26ad6f34ea5097abe6" translate="yes" xml:space="preserve">
          <source>This example shows that the index contained 3552 entries.</source>
          <target state="translated">この例は、インデックスに3552個のエントリが含まれていることを示しています。</target>
        </trans-unit>
        <trans-unit id="af5672891a1be21669d22b688901415e2cf060c3" translate="yes" xml:space="preserve">
          <source>This expands to the object name of the delta base for the given object, if it is stored as a delta. Otherwise it expands to the null object name (all zeroes).</source>
          <target state="translated">これは、与えられたオブジェクトのデルタベースがデルタとして格納されている場合、そのオブジェクト名に展開されます。そうでない場合は、ヌルのオブジェクト名(すべてゼロ)に展開されます。</target>
        </trans-unit>
        <trans-unit id="1a642986ccbacca12888668bff4ca6d3b1007b62" translate="yes" xml:space="preserve">
          <source>This explanation comes for &quot;free&quot; because there was no change. Similarly &lt;code&gt;C&lt;/code&gt; could be explained using &lt;code&gt;1&lt;/code&gt;, but that comes at some cost c&amp;gt;0 because of the modification:</source>
          <target state="translated">変更がなかったため、この説明は「無料」で行われます。同様に、 &lt;code&gt;C&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; を使用して説明できますが、変更のためにc&amp;gt; 0のコストがかかります。</target>
        </trans-unit>
        <trans-unit id="86a0b58a904e042293eb0ea80455653f123e7d4e" translate="yes" xml:space="preserve">
          <source>This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents.</source>
          <target state="translated">この拡張フォーマットは、名前の変更やコピー検出がアクティブな場合に便利で、異なる親でファイルの元の名前を見ることができます。</target>
        </trans-unit>
        <trans-unit id="fc95481325c82bdecdaa23291b735168b05af418" translate="yes" xml:space="preserve">
          <source>This extension does not change git&amp;rsquo;s behavior at all. It is useful only for testing format-1 compatibility.</source>
          <target state="translated">この拡張機能は、gitの動作をまったく変更しません。これは、フォーマット1の互換性をテストする場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="24a20ccff9f7f9f91cdf61fb876086b44fc5be61" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis by setting repository&amp;rsquo;s &lt;code&gt;gitweb.pickaxe&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.pickaxe&lt;/code&gt; 構成変数（ブール値）を設定することにより、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="3fcd9d965aa29d51e3ab01e56c522e086b7f545b" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.avatar&lt;/code&gt; configuration variable.</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.avatar&lt;/code&gt; 構成変数を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="da6908103a49ae5e820a33c13aadd5dfdd3e67a7" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.blame&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.blame&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="1d6d167abae14ab18966eab440f954ed6085f29c" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.grep&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.grep&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="dd4f802848cf6cbdc7682aeefb00472f2c444c9e" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.highlight&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.highlight&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="a8e82652b1c51e397e7f1e31621e9084d5611fda" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.patches&lt;/code&gt; configuration variable (integer).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.patches&lt;/code&gt; 構成変数（整数）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="a0528d6fc23cb2716835712f44b5daf955251062" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.remote_heads&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.remote_heads&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="58b983175f59d7aad97dac71b32251a2f4a8c4a0" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.showSizes&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.showSizes&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="ee33afe943a28f48529ed67cc410ad185ea09f23" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.snapshot&lt;/code&gt; configuration variable, which contains a comma separated list of formats or &quot;none&quot; to disable snapshots. Unknown values are ignored.</source>
          <target state="translated">この機能は、リポジトリーの &lt;code&gt;gitweb.snapshot&lt;/code&gt; 構成変数を介してリポジトリーごとに構成できます。これには、フォーマットのコンマ区切りリスト、またはスナップショットを無効にする「なし」が含まれています。不明な値は無視されます。</target>
        </trans-unit>
        <trans-unit id="c2467a6f49bad0810d0f5e1c4a51888ceb4f5b0f" translate="yes" xml:space="preserve">
          <source>This feature can be configured on per-repository basis after setting $feature{&lt;code&gt;extra-branch-refs&lt;/code&gt;}{&lt;code&gt;override&lt;/code&gt;} to true, via repository&amp;rsquo;s &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; configuration variable, which contains a space separated list of refs. An example:</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; 構成変数を介して$ feature { &lt;code&gt;extra-branch-refs&lt;/code&gt; } { &lt;code&gt;override&lt;/code&gt; }をtrue に設定した後、リポジトリごとに構成できます。例：</target>
        </trans-unit>
        <trans-unit id="83b4612ad81d70c9ed8920a4b451b69b8c3ee080" translate="yes" xml:space="preserve">
          <source>This feature is intended to speed up git operations for repos that have large working directories.</source>
          <target state="translated">この機能は、大きな作業ディレクトリを持つreposのgit操作を高速化することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6b24b487d6d9654020073f6754733ecc051175ad" translate="yes" xml:space="preserve">
          <source>This feature is semi-deprecated. For scripting purpose, &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--porcelain&lt;/code&gt; and &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; are almost always superior alternatives, and users should look at &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--short&lt;/code&gt; or &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; for more user-friendly alternatives.</source>
          <target state="translated">この機能は半非推奨です。スクリプト作成の目的では、&lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--porcelain&lt;/code&gt; と&lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1] &lt;/a&gt; &lt;code&gt;--name-status&lt;/code&gt; はほとんど常に優れた代替手段であり、ユーザーは&lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--short&lt;/code&gt; または&lt;a href=&quot;git-diff&quot;&gt;git-を&lt;/a&gt;確認する必要がありますdiff [1] &lt;code&gt;--name-status&lt;/code&gt; は、よりユーザーフレンドリーな代替手段です。</target>
        </trans-unit>
        <trans-unit id="0861edc399d3214fad2ecef2c8c7d8f9e28b4564" translate="yes" xml:space="preserve">
          <source>This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.</source>
          <target state="translated">この機能は、コミット者のメールアドレスが無効な場合など、初期のコミットでエラーが発生していても安全に無視できる場合に、確立されたプロジェクトを受け入れる場合に便利です。注意:この設定では、破損したオブジェクトをスキップすることはできません。</target>
        </trans-unit>
        <trans-unit id="5474f37d061902594342fbe38be401770ea2769f" translate="yes" xml:space="preserve">
          <source>This feature works by recording the mtime of the working tree directories and then omitting reading directories and stat calls against files in those directories whose mtime hasn&amp;rsquo;t changed. For this to work the underlying operating system and file system must change the &lt;code&gt;st_mtime&lt;/code&gt; field of directories if files in the directory are added, modified or deleted.</source>
          <target state="translated">この機能は、作業ツリーディレクトリのmtimeを記録し、ディレクトリの読み取りと、mtimeが変更されていないディレクトリ内のファイルに対するstat呼び出しを省略して機能します。これが機能するには、ディレクトリ内のファイルが追加、変更、または削除された場合、基盤となるオペレーティングシステムとファイルシステムでディレクトリの &lt;code&gt;st_mtime&lt;/code&gt; フィールドを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef2541ade640bd800921de0e87cda6dd56d4d5f6" translate="yes" xml:space="preserve">
          <source>This fetches revisions from the SVN parent of the current HEAD and rebases the current (uncommitted to SVN) work against it.</source>
          <target state="translated">これは、現在のHEADのSVN親からリビジョンを取得し、それに対して現在の(SVNにコミットされていない)作業をリベースします。</target>
        </trans-unit>
        <trans-unit id="e6f84c5c8c6a08793025b9538660cbd1c1faa637" translate="yes" xml:space="preserve">
          <source>This file contains the commit message of a commit in progress. If &lt;code&gt;git commit&lt;/code&gt; exits due to an error before creating a commit, any commit message that has been provided by the user (e.g., in an editor session) will be available in this file, but will be overwritten by the next invocation of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">このファイルには、進行中のコミットのコミットメッセージが含まれています。 &lt;code&gt;git commit&lt;/code&gt; 作成する前にエラーのためにgit commitが終了した場合、ユーザーによって（たとえば、エディターセッションで）提供されたコミットメッセージはこのファイルで使用できますが、次の &lt;code&gt;git commit&lt;/code&gt; の呼び出しによって上書きされます。</target>
        </trans-unit>
        <trans-unit id="2063696fd909d95d720efff6859f2846f7a33789" translate="yes" xml:space="preserve">
          <source>This file helps dumb transports discover what refs are available in this repository. If the repository is published for dumb transports, this file should be regenerated by &lt;code&gt;git update-server-info&lt;/code&gt; every time a tag or branch is created or modified. This is normally done from the &lt;code&gt;hooks/update&lt;/code&gt; hook, which is run by the &lt;code&gt;git-receive-pack&lt;/code&gt; command when you &lt;code&gt;git push&lt;/code&gt; into the repository.</source>
          <target state="translated">このファイルは、ダムトランスポートがこのリポジトリで使用可能な参照を検出するのに役立ちます。ダムトランスポート用にリポジトリが公開されている場合、タグまたはブランチが作成または変更されるたびに、このファイルは &lt;code&gt;git update-server-info&lt;/code&gt; によって再生成される必要があります。これは通常、 &lt;code&gt;hooks/update&lt;/code&gt; フックから行われます。これは、リポジトリに &lt;code&gt;git push&lt;/code&gt; するときに &lt;code&gt;git-receive-pack&lt;/code&gt; コマンドによって実行されます。</target>
        </trans-unit>
        <trans-unit id="3487083c7b98c66e39acc8f940f40c0e9ceac88f" translate="yes" xml:space="preserve">
          <source>This file is to help dumb transports discover what packs are available in this object store. Whenever a pack is added or removed, &lt;code&gt;git update-server-info&lt;/code&gt; should be run to keep this file up to date if the repository is published for dumb transports. &lt;code&gt;git repack&lt;/code&gt; does this by default.</source>
          <target state="translated">このファイルは、ダムトランスポートがこのオブジェクトストアで利用可能なパックを検出するのに役立ちます。パックが追加または削除されるたびに、リポジトリがダムトランスポート用に公開されている場合は、 &lt;code&gt;git update-server-info&lt;/code&gt; を実行してこのファイルを最新の状態に保つ必要があります。 &lt;code&gt;git repack&lt;/code&gt; はデフォルトでこれを行います。</target>
        </trans-unit>
        <trans-unit id="cbe65e34529f44f10bf3c4bc531b3ef1a1689dfb" translate="yes" xml:space="preserve">
          <source>This file mainly serves as the mapping between the name and path of submodules in the superproject, such that the submodule&amp;rsquo;s Git directory can be located.</source>
          <target state="translated">このファイルは主に、スーパーモジュール内のサブモジュールの名前とパス間のマッピングとして機能し、サブモジュールのGitディレクトリを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="071050e2544b6fc3703fb63508bbfdc9243b46ab" translate="yes" xml:space="preserve">
          <source>This file records URLs to alternate object stores that this object store borrows objects from, to be used when the repository is fetched over HTTP.</source>
          <target state="translated">このファイルは、このオブジェクトストアがオブジェクトを借用している代替オブジェクトストアへの URL を記録し、リポジトリを HTTP で取得する際に使用します。</target>
        </trans-unit>
        <trans-unit id="cc3397ff622f0d4d27f532099612807583041388" translate="yes" xml:space="preserve">
          <source>This file records fake commit ancestry information, to pretend the set of parents a commit has is different from how the commit was actually created. One record per line describes a commit and its fake parents by listing their 40-byte hexadecimal object names separated by a space and terminated by a newline.</source>
          <target state="translated">このファイルは、あるコミットの親のセットが実際に作成されたものとは異なるものであるかのように見せかけるために、偽のコミットの祖先情報を記録します。1 行に 1 つの記録で、コミットとその偽の親について、スペースで区切られた 40 バイトの 16 進数のオブジェクト名をリストアップし、改行で終わります。</target>
        </trans-unit>
        <trans-unit id="1873ba1c652fc3e8dae8a41ecd45dff2c995baaf" translate="yes" xml:space="preserve">
          <source>This file records paths to alternate object stores that this object store borrows objects from, one pathname per line. Note that not only native Git tools use it locally, but the HTTP fetcher also tries to use it remotely; this will usually work if you have relative paths (relative to the object database, not to the repository!) in your alternates file, but it will not work if you use absolute paths unless the absolute path in filesystem and web URL is the same. See also &lt;code&gt;objects/info/http-alternates&lt;/code&gt;.</source>
          <target state="translated">このファイルは、このオブジェクトストアがオブジェクトを借用する代替オブジェクトストアへのパスを1行に1つのパス名で記録します。ネイティブのGitツールがローカルで使用するだけでなく、HTTPフェッチャーもリモートで使用することに注意してください。これは通常、代替ファイルに相対パス（リポジトリではなくオブジェクトデータベースへの相対パス）がある場合は機能しますが、ファイルシステムとWeb URLの絶対パスが同じでない限り、絶対パスを使用する場合は機能しません。 &lt;code&gt;objects/info/http-alternates&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="517ab2689bb34239adf0b92ebb2a70e736956866" translate="yes" xml:space="preserve">
          <source>This file stores sparse checkout patterns. See also: &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree[1]&lt;/a&gt;.</source>
          <target state="translated">このファイルは、スパースチェックアウトパターンを格納します。&lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree [1]&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="39e8ca5394d81b30bccd145a749de9346fba2480" translate="yes" xml:space="preserve">
          <source>This file uses the following format:</source>
          <target state="translated">このファイルは以下の形式を使用しています。</target>
        </trans-unit>
        <trans-unit id="53c1d1d0fe83b95fe57b9ac9f6f59413589df721" translate="yes" xml:space="preserve">
          <source>This file, by convention among Porcelains, stores the exclude pattern list. &lt;code&gt;.gitignore&lt;/code&gt; is the per-directory ignore file. &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt; and &lt;code&gt;git clean&lt;/code&gt; look at it but the core Git commands do not look at it. See also: &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;.</source>
          <target state="translated">このファイルは、磁器間の規約により、除外パターンリストを格納します。 &lt;code&gt;.gitignore&lt;/code&gt; は、ディレクトリごとの無視ファイルです。 &lt;code&gt;git status&lt;/code&gt; 、 &lt;code&gt;git add&lt;/code&gt; 、 &lt;code&gt;git rm&lt;/code&gt; 、および &lt;code&gt;git clean&lt;/code&gt; はそれを調べますが、コアGitコマンドはそれを調べません。&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="d8956b9fdca3244ff8cd9467aefdc82ab275d878" translate="yes" xml:space="preserve">
          <source>This filter may be used if you only need to modify the environment in which the commit will be performed. Specifically, you might want to rewrite the author/committer name/email/time environment variables (see &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; for details).</source>
          <target state="translated">このフィルターは、コミットが実行される環境のみを変更する必要がある場合に使用できます。具体的には、作成者/コミッター名/メール/時間の環境変数を書き換えることができます（詳細については、&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="1f7d9b6979d573a6d61c7fc37aef6ce7f09ba079" translate="yes" xml:space="preserve">
          <source>This flag causes &lt;code&gt;git diff-tree --stdin&lt;/code&gt; to also show the commit message before the differences.</source>
          <target state="translated">このフラグにより​​、 &lt;code&gt;git diff-tree --stdin&lt;/code&gt; は、差分の前にコミットメッセージも表示します。</target>
        </trans-unit>
        <trans-unit id="f18c1480999d4a64a19b051751a1dfdb3d01c394" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a local pack that has a .keep file to be ignored, even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、.keep ファイルを持つローカルパック内のオブジェクトを無視します。</target>
        </trans-unit>
        <trans-unit id="3b2c5aa43d85ae95c70f7126e1a8d471a0247285" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a pack to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、既にパックされているオブジェクトを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="936ccdd465b71c76f59e3d7929f0e31e3a24c431" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in the given pack to be ignored, even if it would have otherwise been packed. &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; is the pack file name without leading directory (e.g. &lt;code&gt;pack-123.pack&lt;/code&gt;). The option could be specified multiple times to keep multiple packs.</source>
          <target state="translated">このフラグを使用すると、指定されたパックにすでに含まれているオブジェクトであっても、すでに指定されたパックにあるオブジェクトは無視されます。 &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; は、先頭のディレクトリを除いたパックファイル名です（例： &lt;code&gt;pack-123.pack&lt;/code&gt; ）。このオプションを複数回指定して、複数のパックを保持できます。</target>
        </trans-unit>
        <trans-unit id="9fad47cb9db9729fbeb177e82626a6322dbefd6c" translate="yes" xml:space="preserve">
          <source>This flag causes an object that is borrowed from an alternate object store to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、別のオブジェクトストアから借りてきたオブジェクトを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="97fddffea713eaa9774ecf695b0619f959916c25" translate="yes" xml:space="preserve">
          <source>This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when -c or --cc are specified, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).</source>
          <target state="translated">このフラグは、(マージコミットで使用される)結合された diff に、すべての親からのファイル名をリストアップさせます。このため、このフラグは -c または --cc が指定された場合にのみ有効で、ファイル名の変更が検出された場合 (つまり、リネームやコピーの検出が要求された場合)にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="7d04699c745135d6f14712a3d65005478838c3a7" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one &amp;lt;tree-ish&amp;gt;, or &lt;code&gt;--stdin&lt;/code&gt;). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the &lt;code&gt;-m&lt;/code&gt; option does). Furthermore, it lists only files which were modified from all parents.</source>
          <target state="translated">このフラグは、マージコミットの表示方法を変更します（つまり、コマンドに1つの&amp;lt;tree-ish&amp;gt;または &lt;code&gt;--stdin&lt;/code&gt; が指定されている場合にのみ役立ちます）。これは、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からマージ結果への違いを同時に示します（ &lt;code&gt;-m&lt;/code&gt; オプションの機能です）。さらに、すべての親から変更されたファイルのみがリストされます。</target>
        </trans-unit>
        <trans-unit id="0d503f20848f4e1ff6c5e78038f4bce28f3422a3" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit patch is displayed, in a similar way to the &lt;code&gt;-c&lt;/code&gt; option. It implies the &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options and further compresses the patch output by omitting uninteresting hunks whose the contents in the parents have only two variants and the merge result picks one of them without modification. When all hunks are uninteresting, the commit itself and the commit log message is not shown, just like in any other &quot;empty diff&quot; case.</source>
          <target state="translated">このフラグは、 &lt;code&gt;-c&lt;/code&gt; オプションと同様に、マージコミットパッチの表示方法を変更します。これは &lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-p&lt;/code&gt; オプションを意味し、親のコンテンツに2つのバリアントしかない興味のないハンクを省略してパッチ出力をさらに圧縮し、マージ結果は変更せずにそれらの1つを選択します。他の「空の差分」の場合と同様に、すべてのハンクが興味を持たない場合、コミット自体とコミットログメッセージは表示されません。</target>
        </trans-unit>
        <trans-unit id="4835250d6cbee97633146544cd1896afcc631099" translate="yes" xml:space="preserve">
          <source>This flag disables these checks, and can cause the remote repository to lose commits; use it with care.</source>
          <target state="translated">このフラグはこれらのチェックを無効にし、リモートリポジトリのコミットを失う可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc5f19786a1b0eda7705eaaa80c372612ab5d782" translate="yes" xml:space="preserve">
          <source>This flag implies the &lt;code&gt;-c&lt;/code&gt; option and further compresses the patch output by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification.</source>
          <target state="translated">このフラグは &lt;code&gt;-c&lt;/code&gt; オプションを意味し、親のコンテンツに2つのバリアントしかない興味のないハンクを省略してパッチ出力をさらに圧縮し、マージ結果は変更なしでそれらの1つを選択します。</target>
        </trans-unit>
        <trans-unit id="03d7872e2a4e991418dc3ea26303b414cb645f27" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch. Implies --apply.</source>
          <target state="translated">このフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; プログラム（&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）に渡されます。--applyを意味します。</target>
        </trans-unit>
        <trans-unit id="6c9f2e241df42ed566896490c4c1723461343597" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git log&lt;/code&gt; program (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;) that generates the patches.</source>
          <target state="translated">このフラグは、パッチを生成する &lt;code&gt;git log&lt;/code&gt; プログラム（&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照）に渡されます。</target>
        </trans-unit>
        <trans-unit id="7d74132f018d1e29c74648fc0cf6690a80cd700b" translate="yes" xml:space="preserve">
          <source>This flag makes the command not to report its progress on the standard error stream.</source>
          <target state="translated">このフラグは、コマンドの進行状況を標準エラーストリームに報告しないようにします。</target>
        </trans-unit>
        <trans-unit id="c7300f914a6246e85c4558f9e03e3ac6bd2957c2" translate="yes" xml:space="preserve">
          <source>This flag makes the merge commits show the full diff like regular commits; for each merge parent, a separate log entry and diff is generated. An exception is that only diff against the first parent is shown when &lt;code&gt;--first-parent&lt;/code&gt; option is given; in that case, the output represents the changes the merge brought &lt;code&gt;into&lt;/code&gt; the then-current branch.</source>
          <target state="translated">このフラグは、マージコミットに通常のコミットと同様に完全な差分を表示させます。マージの親ごとに、個別のログエントリと差分が生成されます。例外は、 &lt;code&gt;--first-parent&lt;/code&gt; オプションが指定されている場合、最初の親との差分のみが表示されることです。その場合には、出力がもたらしたマージ変更表し &lt;code&gt;into&lt;/code&gt; 、その後、現在のブランチを。</target>
        </trans-unit>
        <trans-unit id="824f1a5cbd322eac2edc9b61691e0afb5fb06c7c" translate="yes" xml:space="preserve">
          <source>This flag tells the command not to reuse existing object data at all, including non deltified object, forcing recompression of everything. This implies --no-reuse-delta. Useful only in the obscure case where wholesale enforcement of a different compression level on the packed data is desired.</source>
          <target state="translated">このフラグは、デルタ化されていないオブジェクトを含め、既存のオブジェクトデータを一切再利用しないように指示し、すべてのオブジェクトの再圧縮を強制します。これは --no-reuse-delta を意味します。パックされたデータに別の圧縮レベルを強制的に適用したいというような曖昧な場合にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="e554d11fed47fbadc588fbbd426a692640350799" translate="yes" xml:space="preserve">
          <source>This form can only be used in the middle of a &lt;code&gt;commit&lt;/code&gt;. The path names a directory entry within fast-import&amp;rsquo;s active commit. The path must be quoted in this case.</source>
          <target state="translated">この形式は、 &lt;code&gt;commit&lt;/code&gt; 途中でのみ使用できます。パスは、高速インポートのアクティブなコミット内のディレクトリエントリを指定します。この場合、パスは引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="55cd46dfe4dc47146eb359f16ba2ab6440f5d33b" translate="yes" xml:space="preserve">
          <source>This form is to compare the given two paths on the filesystem. You can omit the &lt;code&gt;--no-index&lt;/code&gt; option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git. This form implies &lt;code&gt;--exit-code&lt;/code&gt;.</source>
          <target state="translated">このフォームは、ファイルシステム上の指定された2つのパスを比較するためのものです。Gitによって制御されている作業ツリーでコマンドを実行し、少なくとも1つのパスが作業ツリーの外を指している場合、またはGitによって制御されている作業ツリーの外でコマンドを実行する場合は、 &lt;code&gt;--no-index&lt;/code&gt; オプションを省略できます。この形式は &lt;code&gt;--exit-code&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="1a36c2e6e9bf305ffd5ef7a7e4c453ac93dfb865" translate="yes" xml:space="preserve">
          <source>This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &quot;git diff A...B&quot; is equivalent to &quot;git diff $(git merge-base A B) B&quot;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.</source>
          <target state="translated">このフォームは、両方の&amp;lt;commit&amp;gt;の共通の祖先から始まり、2番目の&amp;lt;commit&amp;gt;を含むブランチまでの変更を表示するためのものです。「git diff A ... B」は「git diff $（git merge-base AB）B」と同等です。&amp;lt;commit&amp;gt;のいずれかを省略できます。これは、代わりにHEADを使用するのと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="1c4bbf16a9eb9be23dc9fab9fed4d09670912ec0" translate="yes" xml:space="preserve">
          <source>This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &lt;code&gt;git diff A...B&lt;/code&gt; is equivalent to &lt;code&gt;git diff $(git merge-base A B) B&lt;/code&gt;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.</source>
          <target state="translated">このフォームは、両方の&amp;lt;commit&amp;gt;の共通の祖先から開始して、2番目の&amp;lt;commit&amp;gt;を含むブランチの変更を表示するためのものです。 &lt;code&gt;git diff A...B&lt;/code&gt; は、 &lt;code&gt;git diff $(git merge-base A B) B&lt;/code&gt; と同等です。&amp;lt;commit&amp;gt;のいずれかを省略できます。これは、代わりにHEADを使用するのと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="18011d68a19f669179582c8652eaff17f583329f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.</source>
          <target state="translated">このフォームは、名前付きの&amp;lt;commit&amp;gt;に関連して作業ツリーに加えた変更を表示するためのものです。HEADを使用して最新のコミットと比較するか、ブランチ名を使用して別のブランチの先端と比較できます。</target>
        </trans-unit>
        <trans-unit id="0c3233dc5774a7d1fc399a8b304cc732bba72d9f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you &lt;code&gt;could&lt;/code&gt; tell Git to further add to the index but you still haven&amp;rsquo;t. You can stage these changes by using &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt;.</source>
          <target state="translated">このフォームは、インデックス（次のコミットのステージング領域）に対して行った変更を表示するためのものです。言い換えれば、Gitにインデックスにさらに追加するように伝えることが &lt;code&gt;could&lt;/code&gt; 違いですが、まだ違います。これらの変更は、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;を使用してステージングできます。</target>
        </trans-unit>
        <trans-unit id="ee8e76f95895702db36db495b0e53027904973c9" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you staged for the next commit relative to the named &amp;lt;commit&amp;gt;. Typically you would want comparison with the latest commit, so if you do not give &amp;lt;commit&amp;gt;, it defaults to HEAD. If HEAD does not exist (e.g. unborn branches) and &amp;lt;commit&amp;gt; is not given, it shows all staged changes. --staged is a synonym of --cached.</source>
          <target state="translated">このフォームは、名前付きの&amp;lt;commit&amp;gt;に関連する次のコミットのためにステージングした変更を表示するためのものです。通常、最新のコミットとの比較が必要になるため、&amp;lt;commit&amp;gt;を指定しない場合、デフォルトでHEADになります。HEADが存在せず（たとえば、胎児のブランチ）、&amp;lt;commit&amp;gt;が指定されていない場合、すべての段階的な変更が表示されます。--stagedは--cachedの同義語です。</target>
        </trans-unit>
        <trans-unit id="51dda6a69f38e64f972e32a62549822542d75887" translate="yes" xml:space="preserve">
          <source>This form is to view the differences between the raw contents of two blob objects.</source>
          <target state="translated">本実施形態では、2つのブロブオブジェクトの生の内容の違いを表示する。</target>
        </trans-unit>
        <trans-unit id="df8ee2cb26426eddf11d55337361b04a2e3c04bb" translate="yes" xml:space="preserve">
          <source>This form is to view the results of a merge commit. The first listed &amp;lt;commit&amp;gt; must be the merge itself; the remaining two or more commits should be its parents. A convenient way to produce the desired set of revisions is to use the &lt;code&gt;^@&lt;/code&gt; suffix. For instance, if &lt;code&gt;master&lt;/code&gt; names a merge commit, &lt;code&gt;git diff master
master^@&lt;/code&gt; gives the same combined diff as &lt;code&gt;git show master&lt;/code&gt;.</source>
          <target state="translated">このフォームは、マージコミットの結果を表示するためのものです。最初にリストされている&amp;lt;commit&amp;gt;は、マージ自体である必要があります。残りの2つ以上のコミットはその親である必要があります。必要なリビジョンのセットを作成する便利な方法は、 &lt;code&gt;^@&lt;/code&gt; サフィックスを使用することです。場合例えば、 &lt;code&gt;master&lt;/code&gt; 名マージコミット、 &lt;code&gt;git diff master master^@&lt;/code&gt; 同じ組み合わせの差分与え &lt;code&gt;git show master&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3140d31a73de32a89eb697f18f04aa202d7a5d8e" translate="yes" xml:space="preserve">
          <source>This form is to view the results of a merge commit. The first listed &amp;lt;commit&amp;gt; must be the merge itself; the remaining two or more commits should be its parents. A convenient way to produce the desired set of revisions is to use the ^@ suffix. For instance, if &lt;code&gt;master&lt;/code&gt; names a merge commit, &lt;code&gt;git diff master
master^@&lt;/code&gt; gives the same combined diff as &lt;code&gt;git show master&lt;/code&gt;.</source>
          <target state="translated">このフォームは、マージコミットの結果を表示するためのものです。最初にリストされている&amp;lt;commit&amp;gt;は、マージ自体である必要があります。残りの2つ以上のコミットはその親である必要があります。必要なリビジョンのセットを作成する便利な方法は、^ @サフィックスを使用することです。場合例えば、 &lt;code&gt;master&lt;/code&gt; 名マージコミット、 &lt;code&gt;git diff master master^@&lt;/code&gt; 同じ組み合わせの差分与え &lt;code&gt;git show master&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="395d78419362cad7438eb6eae46785d35953f019" translate="yes" xml:space="preserve">
          <source>This form resets the current branch head to &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; and possibly updates the index (resetting it to the tree of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;) and the working tree depending on &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is omitted, defaults to &lt;code&gt;--mixed&lt;/code&gt;. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; must be one of the following:</source>
          <target state="translated">このフォームは、現在のブランチヘッドを &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; にリセットし、インデックスを更新（ &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; のツリーにリセット）し、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に応じて作業ツリーを更新します。場合は &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に、デフォルトでは省略されて &lt;code&gt;--mixed&lt;/code&gt; を。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; 次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="90bcd35d4969f3a90ba2bd18f27a5c6eb93f333b" translate="yes" xml:space="preserve">
          <source>This form will use the first line matching the given POSIX regex. If &amp;lt;start&amp;gt; is a regex, it will search from the end of the previous &lt;code&gt;-L&lt;/code&gt; range, if any, otherwise from the start of file. If &amp;lt;start&amp;gt; is &amp;ldquo;^/regex/&amp;rdquo;, it will search from the start of file. If &amp;lt;end&amp;gt; is a regex, it will search starting at the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">このフォームは、指定されたPOSIX正規表現に一致する最初の行を使用します。&amp;lt;start&amp;gt;が正規表現の場合、前の &lt;code&gt;-L&lt;/code&gt; 範囲がある場合は最後から検索し、そうでない場合はファイルの先頭から検索します。&amp;lt;start&amp;gt;が「^ / regex /」の場合、ファイルの先頭から検索します。&amp;lt;end&amp;gt;が正規表現の場合、&amp;lt;start&amp;gt;で指定された行から検索を開始します。</target>
        </trans-unit>
        <trans-unit id="215f3a05528763c5f39e5365947941ffab5eacc1" translate="yes" xml:space="preserve">
          <source>This form will use the first line matching the given POSIX regex. If &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is a regex, it will search from the end of the previous &lt;code&gt;-L&lt;/code&gt; range, if any, otherwise from the start of file. If &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; is &lt;code&gt;^/regex/&lt;/code&gt;, it will search from the start of file. If &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; is a regex, it will search starting at the line given by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このフォームは、指定されたPOSIX正規表現に一致する最初の行を使用します。 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; が正規表現の場合、前の &lt;code&gt;-L&lt;/code&gt; 範囲の終わりから検索します。そうでない場合は、ファイルの先頭から検索します。場合は &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; です &lt;code&gt;^/regex/&lt;/code&gt; 、それはファイルの先頭から検索します。 &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; が正規表現の場合、 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; で指定された行から検索します。</target>
        </trans-unit>
        <trans-unit id="b42c261dd1828c15332725a480fa7095bcc76b2a" translate="yes" xml:space="preserve">
          <source>This format expects the first line of the file to contain the &quot;Cc:&quot; value and the &quot;Subject:&quot; of the message as the second line.</source>
          <target state="translated">このフォーマットでは、ファイルの1行目に &quot;Cc:&quot;の値を、2行目にメッセージの &quot;Subject:&quot;を含むことを想定しています。</target>
        </trans-unit>
        <trans-unit id="105520fc7842a24e43537a27759a074335828eb6" translate="yes" xml:space="preserve">
          <source>This format is identical to version &lt;code&gt;0&lt;/code&gt;, with the following exceptions:</source>
          <target state="translated">この形式はバージョン &lt;code&gt;0&lt;/code&gt; と同じですが、次の例外があります。</target>
        </trans-unit>
        <trans-unit id="fd22347e6ce1cebbfe9140a8d5df54f1132eb3e9" translate="yes" xml:space="preserve">
          <source>This format is no longer produced by any Git command, but is and will continue to be supported by &lt;code&gt;update-index --index-info&lt;/code&gt;.</source>
          <target state="translated">この形式は、Gitコマンドによって生成されなくなりましたが、 &lt;code&gt;update-index --index-info&lt;/code&gt; によって引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="e1e42b99834dd201113f33eae88b5856f686096e" translate="yes" xml:space="preserve">
          <source>This format is to put higher order stages into the index file and matches &lt;code&gt;git ls-files --stage&lt;/code&gt; output.</source>
          <target state="translated">このフォーマットは、より高次のステージをインデックスファイルに入れ、 &lt;code&gt;git ls-files --stage&lt;/code&gt; の出力と一致させます。</target>
        </trans-unit>
        <trans-unit id="483caba3e82677e09e2d521ebba75089a90ce09e" translate="yes" xml:space="preserve">
          <source>This format is to stuff &lt;code&gt;git ls-tree&lt;/code&gt; output into the index.</source>
          <target state="translated">このフォーマットは、 &lt;code&gt;git ls-tree&lt;/code&gt; 出力をインデックスに詰め込むためのものです。</target>
        </trans-unit>
        <trans-unit id="078ec0cba6df63b2f2fc0bbcd069e250ea13b628" translate="yes" xml:space="preserve">
          <source>This format is used to refer to another commit in a commit message and is the same as &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt;. By default, the date is formatted with &lt;code&gt;--date=short&lt;/code&gt; unless another &lt;code&gt;--date&lt;/code&gt; option is explicitly specified. As with any &lt;code&gt;format:&lt;/code&gt; with format placeholders, its output is not affected by other options like &lt;code&gt;--decorate&lt;/code&gt; and &lt;code&gt;--walk-reflogs&lt;/code&gt;.</source>
          <target state="translated">このフォーマットは、コミットメッセージで別のコミットを参照するために使用され、-- &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt; と同じです。デフォルトでは、別の &lt;code&gt;--date&lt;/code&gt; オプションが明示的に指定されていない限り、日付は &lt;code&gt;--date=short&lt;/code&gt; でフォーマットされます。他の &lt;code&gt;format:&lt;/code&gt; と同様に、フォーマットプレースホルダーを使用すると、その出力は &lt;code&gt;--decorate&lt;/code&gt; や &lt;code&gt;--walk-reflogs&lt;/code&gt; などの他のオプションの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="742c78626a467f269e89b016f43c5e1a7be4cd88" translate="yes" xml:space="preserve">
          <source>This gets rid of the &lt;code&gt;git-svn-id:&lt;/code&gt; lines at the end of every commit.</source>
          <target state="translated">これにより、すべてのコミットの最後に &lt;code&gt;git-svn-id:&lt;/code&gt; 行が削除されます。</target>
        </trans-unit>
        <trans-unit id="2acaf36aea784a80df7509fcb8e38355c645c5a7" translate="yes" xml:space="preserve">
          <source>This gives a very controlled flow of fixes. If you notice that you have applied a fix to e.g. &lt;code&gt;master&lt;/code&gt; that is also required in &lt;code&gt;maint&lt;/code&gt;, you will need to cherry-pick it (using &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;) downwards. This will happen a few times and is nothing to worry about unless you do it very frequently.</source>
          <target state="translated">これにより、修正のフローが非常に制御されます。 &lt;code&gt;maint&lt;/code&gt; でも必要な修正を &lt;code&gt;master&lt;/code&gt; などに適用したことに気付いた場合は、（&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]を使用して&lt;/a&gt;）チェリーピックする必要があります。これは数回発生し、頻繁に実行しない限り、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1f3884c08aac0f5d8941c7814b274c9743619a33" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase had conflicts, or used &lt;code&gt;--interactive&lt;/code&gt; to omit, edit, squash, or fixup commits; or if the upstream used one of &lt;code&gt;commit --amend&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, or a full history rewriting command like &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;&lt;code&gt;filter-repo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;subsystem&lt;/code&gt; リベースに競合がある場合、または &lt;code&gt;--interactive&lt;/code&gt; を使用してコミットを省略、編集、スカッシュ、または修正する場合に発生します。または、アップストリームが &lt;code&gt;commit --amend&lt;/code&gt; 、 &lt;code&gt;reset&lt;/code&gt; 、または&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt; &lt;code&gt;filter-repo&lt;/code&gt; の&lt;/a&gt;ような完全な履歴書き換えコマンドのいずれかを使用した場合。</target>
        </trans-unit>
        <trans-unit id="53ac63807fcdbfc7e050fb3151d6b086f2e9a274" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase was a simple rebase and had no conflicts.</source>
          <target state="translated">これは、 &lt;code&gt;subsystem&lt;/code&gt; リベースが単純なリベースであり、競合がなかった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="d414984e9f8d7bfd782c8f2da36b80bcd80ea28e" translate="yes" xml:space="preserve">
          <source>This has a few user-visible effects and caveats:</source>
          <target state="translated">これにはいくつかのユーザー目線の効果と注意点があります。</target>
        </trans-unit>
        <trans-unit id="1c876a37c9c7633e47e1a6a38b1f16f75e32a3ed" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt;, and lets you add untracked paths to the index.</source>
          <target state="translated">これには &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;revert&lt;/code&gt; と非常によく似たUIがあり、追跡されていないパスをインデックスに追加できます。</target>
        </trans-unit>
        <trans-unit id="33280cb105ee3b71902ce7b15c9592fd52f73e30" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt;, and the staged information for selected paths are reverted to that of the HEAD version. Reverting new paths makes them untracked.</source>
          <target state="translated">これは &lt;code&gt;update&lt;/code&gt; と非常によく似たUIを持ち、選択されたパスのステージングされた情報はHEADバージョンのものに戻ります。新しいパスを元に戻すと、追跡されなくなります。</target>
        </trans-unit>
        <trans-unit id="4d4512b846dcedcc9cf4704e69eaeda15e1830db" translate="yes" xml:space="preserve">
          <source>This has been requested by some kernel developers because some bugs called sporadic bugs do not appear in all the kernel builds because they are very dependent on the compiler output.</source>
          <target state="translated">これは、散発的バグと呼ばれるいくつかのバグがコンパイラの出力に非常に依存しているため、すべてのカーネルビルドには表示されないという理由で、いくつかのカーネル開発者から要望がありました。</target>
        </trans-unit>
        <trans-unit id="b93781d2b5ee24d7b760545bc5177eb80e4c3e22" translate="yes" xml:space="preserve">
          <source>This has the advantage that it will be saved in your &lt;code&gt;CVS/Root&lt;/code&gt; files and you don&amp;rsquo;t need to worry about always setting the correct environment variable. SSH users restricted to &lt;code&gt;git-shell&lt;/code&gt; don&amp;rsquo;t need to override the default with CVS_SERVER (and shouldn&amp;rsquo;t) as &lt;code&gt;git-shell&lt;/code&gt; understands &lt;code&gt;cvs&lt;/code&gt; to mean &lt;code&gt;git-cvsserver&lt;/code&gt; and pretends that the other end runs the real &lt;code&gt;cvs&lt;/code&gt; better.</source>
          <target state="translated">これには、 &lt;code&gt;CVS/Root&lt;/code&gt; ファイルに保存され、常に正しい環境変数を設定することを心配する必要がないという利点があります。制限SSHユーザー &lt;code&gt;git-shell&lt;/code&gt; CVS_SERVERでデフォルトをオーバーライドする必要があります（とすべきでない）していないよう &lt;code&gt;git-shell&lt;/code&gt; 理解 &lt;code&gt;cvs&lt;/code&gt; 平均へ &lt;code&gt;git-cvsserver&lt;/code&gt; 、他端が本当実行されることをふり &lt;code&gt;cvs&lt;/code&gt; 良くします。</target>
        </trans-unit>
        <trans-unit id="f27a3b2d1e595dbb21c1b28424b4a89305bcf439" translate="yes" xml:space="preserve">
          <source>This has two implications:</source>
          <target state="translated">これには2つの意味合いがあります。</target>
        </trans-unit>
        <trans-unit id="a2d38b5ae6dea81df64d435d13a5c9c9c6e43a8c" translate="yes" xml:space="preserve">
          <source>This header line is followed by the following information at least once for each commit:</source>
          <target state="translated">このヘッダ行の後には、コミットごとに少なくとも1回、以下の情報が続きます。</target>
        </trans-unit>
        <trans-unit id="aac19de1c954c0a5c2aba42bf1f288afbf74cabf" translate="yes" xml:space="preserve">
          <source>This helper uses specified file descriptors to connect to a remote Git server. This is not meant for end users but for programs and scripts calling git fetch, push or archive.</source>
          <target state="translated">このヘルパーは、指定したファイル記述子を使用してリモートの Git サーバーに接続します。これはエンドユーザー向けではなく、git fetch や push あるいは archive をコールするプログラムやスクリプト向けのものです。</target>
        </trans-unit>
        <trans-unit id="eafdc2cefff4153e88df550a24ce4b00606582ea" translate="yes" xml:space="preserve">
          <source>This hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.</source>
          <target state="translated">このフックは、対応するプレコミットフックと組み合わせて使用することで、作業ツリーに関連付けられたあらゆる形式のメタデータ(例:パーミッション/所有権、ACLSなど)を保存および復元することができます。この方法の例については、contrib/hooks/setgitperms.perlを参照してください。</target>
        </trans-unit>
        <trans-unit id="9fae8c19d5ced3830760d386f8db3473a746ea76" translate="yes" xml:space="preserve">
          <source>This hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.</source>
          <target state="translated">このフックは、リポジトリの妥当性チェックを行ったり、前のHEADと異なる場合は自動表示したり、作業ディレクトリのメタデータプロパティを設定したりするために使われます。</target>
        </trans-unit>
        <trans-unit id="89a247d66f7dd9fd927ac160899ee7ad4eefe257" translate="yes" xml:space="preserve">
          <source>This hook can be used to prevent &lt;code&gt;forced&lt;/code&gt; update on certain refs by making sure that the object name is a commit object that is a descendant of the commit object named by the old object name. That is, to enforce a &quot;fast-forward only&quot; policy.</source>
          <target state="translated">このフックを使用して、オブジェクト名が古いオブジェクト名で指定されたコミットオブジェクトの子孫であるコミットオブジェクトであることを確認することにより、特定の参照での &lt;code&gt;forced&lt;/code&gt; 更新を防ぐことができます。つまり、「早送りのみ」のポリシーを適用します。</target>
        </trans-unit>
        <trans-unit id="e2b4b08b5c7d529703ac2e4609fae5478174d015" translate="yes" xml:space="preserve">
          <source>This hook can be used, for example, to run &lt;code&gt;git update-server-info&lt;/code&gt; if the repository is packed and is served via a dumb transport.</source>
          <target state="translated">このフックは、たとえば、リポジトリがパックされ、ダムトランスポートを介して提供される場合に &lt;code&gt;git update-server-info&lt;/code&gt; を実行するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ec8359ca4fe68868d4a094d214fa5c736b07b686" translate="yes" xml:space="preserve">
          <source>This hook does not affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;, as it is called after the real work is done.</source>
          <target state="translated">このフックは、実際の作業が完了した後に呼び出される &lt;code&gt;git receive-pack&lt;/code&gt; 、git receive-packの結果には影響しません。</target>
        </trans-unit>
        <trans-unit id="4f1494681f56d1e644fae421a13f75381d1bf104" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but for each ref to be updated it receives on standard input a line of the format:</source>
          <target state="translated">このフックは受信操作に対して一度だけ実行されます。引数を取りませんが、更新される各 ref に対して、標準入力でフォーマットの行を受け取ります。</target>
        </trans-unit>
        <trans-unit id="1c705c0b531046d9558421e4543f9aca35624390" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but gets the same information as the &lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;pre-receive&lt;/em&gt;&lt;/a&gt; hook does on its standard input.</source>
          <target state="translated">このフックは、受信操作に対して1回実行されます。引数はありませんが、&lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;事前受信&lt;/em&gt;&lt;/a&gt;フックが標準入力で行うのと同じ情報を取得します。</target>
        </trans-unit>
        <trans-unit id="98f6b796f54de07e8019b94d0f551840c498ad05" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but uses a pkt-line format protocol to communicate with &lt;code&gt;receive-pack&lt;/code&gt; to read commands, push-options and send results. In the following example for the protocol, the letter &lt;code&gt;S&lt;/code&gt; stands for &lt;code&gt;receive-pack&lt;/code&gt; and the letter &lt;code&gt;H&lt;/code&gt; stands for this hook.</source>
          <target state="translated">このフックは、受信操作に対して1回実行されます。引数は取りませんが、pkt-line形式のプロトコルを使用して &lt;code&gt;receive-pack&lt;/code&gt; と通信し、コマンド、プッシュオプションを読み取り、結果を送信します。次のプロトコルの例では、文字 &lt;code&gt;S&lt;/code&gt; は &lt;code&gt;receive-pack&lt;/code&gt; を表し、文字 &lt;code&gt;H&lt;/code&gt; はこのフックを表します。</target>
        </trans-unit>
        <trans-unit id="8f404b0d7afced029532dd1c0ce00c69033fa119" translate="yes" xml:space="preserve">
          <source>This hook is called before any refname is updated and before any fast-forward checks are performed.</source>
          <target state="translated">このフックは refname が更新され、早送りチェックが実行される前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6f4d4e6bc9f3d3e90e8224d9cc9d15607a5f159d" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;によって呼び出され、プッシュが行われないようにするために使用できます。フックは、宛先リモートの名前と場所を提供する2つのパラメーターで呼び出されます。名前付きリモートが使用されていない場合、両方の値は同じになります。</target>
        </trans-unit>
        <trans-unit id="b761c5f63f99b7c22c6e4ca4e1bd741b6a19c509" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;によって呼び出され、ブランチがリベースされるのを防ぐために使用できます。フックは1つまたは2つのパラメーターで呼び出すことができます。最初のパラメータは、シリーズが分岐した上流です。2番目のパラメーターはリベースされるブランチであり、現在のブランチをリベースする場合は設定されません。</target>
        </trans-unit>
        <trans-unit id="fc84f5afc2cc3712fb061152c42b83b5432e2d28" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes &lt;code&gt;git am&lt;/code&gt; to abort before applying the patch.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。これは、提案されたコミットログメッセージを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、パッチを適用する前に &lt;code&gt;git am&lt;/code&gt; が中止されます。</target>
        </trans-unit>
        <trans-unit id="109f1251e93ab76b92d28a05e1f40ca3ae3e2435" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied and a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。これはパラメーターを取りません。パッチが適用されてコミットが行われた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="31dd1042d3a6d88015bf6a789db56141bf61f664" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。パラメータを取らず、パッチが適用された後、コミットが行われる前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4126a7ec7eb0a54d9b99d1f389fd70ce96c40950" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; and &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;および&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これは、提案されたコミットログメッセージを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="977ece26ae3c0446a7497462b09e90162737d6ca" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; right after preparing the default log message, and before the editor is started.</source>
          <target state="translated">このフックは、デフォルトのログメッセージを準備した直後、エディタが起動する前に&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2ae25bad855fc10ca5e955357c713cdbb31a472c" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git commit&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これはパラメーターを取りません。提案されたコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトからゼロ以外のステータスで終了すると、コミットを作成する前に &lt;code&gt;git commit&lt;/code&gt; コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="21226463d529e8f7d5082c27401d959f905ec4d1" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. It takes no parameters, and is invoked after a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出されます。これはパラメーターをとらず、コミットが行われた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0a4097349c79cead9de93e647cb9ba47cbed7c91" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked after the merge has been carried out successfully and before obtaining the proposed commit log message to make a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git merge&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これはパラメーターをとらず、マージが正常に実行された後、提案されたコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトからゼロ以外のステータスで終了すると、コミットを作成する前に &lt;code&gt;git merge&lt;/code&gt; コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="de911dadfd0a4abc2b13baa4ccbc2ae0aca9f055" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, which happens when a &lt;code&gt;git pull&lt;/code&gt; is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of &lt;code&gt;git merge&lt;/code&gt; and is not executed, if the merge failed due to conflicts.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出されます。これは、ローカルリポジトリで &lt;code&gt;git pull&lt;/code&gt; が行われたときに発生します。フックは単一のパラメーター、つまり、実行中のマージがスカッシュマージであったかどうかを指定するステータスフラグを取ります。競合が原因でマージが失敗した場合、このフックは &lt;code&gt;git merge&lt;/code&gt; の結果に影響を与えることはできず、実行されません。</target>
        </trans-unit>
        <trans-unit id="76961cafe28e294daa6f1b287a02eb4fe4bf07aa" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; configuration variable is set to &lt;code&gt;updateInstead&lt;/code&gt;. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.</source>
          <target state="translated">このフックは、&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;が &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新したとき、およびpushが現在チェックアウトされているブランチと &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; 構成変数を更新しようとしたときに呼び出されます。 &lt;code&gt;updateInstead&lt;/code&gt; に設定されています。作業ツリーとリモートリポジトリのインデックスに現在チェックアウトされているコミットとの違いがある場合、デフォルトではこのようなプッシュは拒否されます。作業ツリーとインデックスの両方が現在のコミットに一致すると、新しくプッシュされたブランチの先端に一致するように更新されます。このフックは、デフォルトの動作をオーバーライドするために使用されます。</target>
        </trans-unit>
        <trans-unit id="5a56dac625f1205849f2b5f6e3619a708d3ea48e" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.</source>
          <target state="translated">このフックは、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新するときに&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。すべての参照が更新された後、リモートリポジトリで1回実行されます。</target>
        </trans-unit>
        <trans-unit id="390ce0821ef413eec43c389641cce2dfc9687135" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before starting to update refs on the remote repository, the pre-receive hook is invoked. Its exit status determines the success or failure of the update.</source>
          <target state="translated">このフックは、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新するときに&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。リモートリポジトリの参照の更新を開始する直前に、事前受信フックが呼び出されます。その終了ステータスは、更新の成功または失敗を決定します。</target>
        </trans-unit>
        <trans-unit id="f508c67d780c6e440d114ab5a4809e8db15887c6" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before updating the ref on the remote repository, the update hook is invoked. Its exit status determines the success or failure of the ref update.</source>
          <target state="translated">このフックは、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新するときに&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。リモートリポジトリのrefを更新する直前に、更新フックが呼び出されます。その終了ステータスは、参照更新の成功または失敗を決定します。</target>
        </trans-unit>
        <trans-unit id="c165f7e2051fecf641e46f5c29ee35090d7d5f24" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt;. If the server has set the multi-valued config variable &lt;code&gt;receive.procReceiveRefs&lt;/code&gt;, and the commands sent to &lt;code&gt;receive-pack&lt;/code&gt; have matching reference names, these commands will be executed by this hook, instead of by the internal &lt;code&gt;execute_commands()&lt;/code&gt; function. This hook is responsible for updating the relevant references and reporting the results back to &lt;code&gt;receive-pack&lt;/code&gt;.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。サーバーが複数値の構成変数 &lt;code&gt;receive.procReceiveRefs&lt;/code&gt; を設定し、 &lt;code&gt;receive-pack&lt;/code&gt; に送信されるコマンドの参照名が一致する場合、これらのコマンドは、内部の &lt;code&gt;execute_commands()&lt;/code&gt; 関数ではなく、このフックによって実行されます。このフックは、関連する参照を更新し、結果を &lt;code&gt;receive-pack&lt;/code&gt; に報告する役割を果たします。</target>
        </trans-unit>
        <trans-unit id="c94fc31562e49c2e1f57905c2984b3787d6eb579" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes &lt;code&gt;git send-email&lt;/code&gt; to abort before sending any e-mails.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt;によって呼び出されます。これは、送信される電子メールを保持するファイルの名前という単一のパラメーターを取ります。0以外のステータスで終了すると、 &lt;code&gt;git send-email&lt;/code&gt; を送信する前にgit send-emailが中止されます。</target>
        </trans-unit>
        <trans-unit id="898dc345a1faef7e78cc6f07a48d416762cf9e72" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git gc --auto&lt;/code&gt; (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;). It takes no parameter, and exiting with non-zero status from this script causes the &lt;code&gt;git gc --auto&lt;/code&gt; to abort.</source>
          <target state="translated">このフックは &lt;code&gt;git gc --auto&lt;/code&gt; によって呼び出されます（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照）。これはパラメーターを取り &lt;code&gt;git gc --auto&lt;/code&gt; このスクリプトからゼロ以外のステータスで終了すると、git gc --autoが異常終了します。</target>
        </trans-unit>
        <trans-unit id="536d2f256146b81297af8f05d9ee07d3c788ff56" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;.</source>
          <target state="translated">このフックは、 &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="db96373c38bd1df6e078c9fa2b6d9e050d469bb3" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. It can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; command line option. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="translated">このフックは、 &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。パラメータや標準入力からの入力はありません。このスクリプトをゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。 &lt;code&gt;--no-verify&lt;/code&gt; コマンドラインオプションを使用してバイパスできます。詳細については、 &lt;code&gt;git-p4 submit --help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="fa504b80ab7d4ab7fd02bb1c09f7267f7ffd0b87" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="translated">このフックは &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。これは、パラメーターを取りませんが、標準入力からは何も取りません。このスクリプトからゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。詳細については、 &lt;code&gt;git-p4 submit --help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="e343164b203dd1de0ba3f9a30c792df16e0f19da" translate="yes" xml:space="preserve">
          <source>This hook is invoked by any Git command that performs reference updates. It executes whenever a reference transaction is prepared, committed or aborted and may thus get called multiple times.</source>
          <target state="translated">このフックは、参照の更新を行う Git コマンドで呼び出されます。このフックは、参照トランザクションが準備されたりコミットされたり中断されたりするたびに実行され、何度もコールされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e8569f58a670ba9d05dfd0c2191295df64e04e73" translate="yes" xml:space="preserve">
          <source>This hook is invoked by commands that rewrite commits (&lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; when called with &lt;code&gt;--amend&lt;/code&gt; and &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;; however, full-history (re)writing tools like &lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import[1]&lt;/a&gt; or &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; typically do not call it!). Its first argument denotes the command it was invoked by: currently one of &lt;code&gt;amend&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;. Further command-dependent arguments may be passed in the future.</source>
          <target state="translated">このフックは、コミットを書き換えるコマンド（&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を &lt;code&gt;--amend&lt;/code&gt; および&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;で呼び出すと呼び出されますが、&lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import [1]&lt;/a&gt;または&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt;は通常それを呼び出さない！）。最初の引数は、それが呼び出されたコマンドを示します。現在は、 &lt;code&gt;amend&lt;/code&gt; または &lt;code&gt;rebase&lt;/code&gt; のいずれかです。今後、コマンドに依存する引数がさらに渡される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8c8dde02f7fe4fac23930e917fd59c1d03fbfa8b" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;, other than that the hook&amp;rsquo;s exit status becomes the exit status of these two commands.</source>
          <target state="translated">このフックは、ワークツリーを更新した後に&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;または&lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt;が実行されたときに呼び出されます。フックには、前のHEADの参照、新しいHEADの参照（変更されている場合と変更されていない場合があります）、およびチェックアウトがブランチチェックアウト（ブランチの変更、フラグ= 1）であるかどうかを示すフラグの3つのパラメーターが与えられます。ファイルのチェックアウト（インデックスからファイルを取得、flag = 0）。このフックはの結果に影響を与えることができない &lt;code&gt;git switch&lt;/code&gt; や &lt;code&gt;git checkout&lt;/code&gt; フックの終了ステータスは、これら2つのコマンドの終了ステータスになっていること以外に、。</target>
        </trans-unit>
        <trans-unit id="7b20b75526e2af7ef8179932e884a838f68429b3" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;.</source>
          <target state="translated">このフックは、ワークツリーの更新後に&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;または&lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt;が実行されたときに呼び出されます。フックには3つのパラメーターが指定されています。前のHEADの参照、新しいHEADの参照（変更されている場合と変更されていない場合がある）、およびチェックアウトがブランチチェックアウトであったかどうかを示すフラグ（ブランチの変更、フラグ= 1）またはファイルのチェックアウト（インデックスからファイルを取得、flag = 0）。このフックは &lt;code&gt;git switch&lt;/code&gt; または &lt;code&gt;git checkout&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="fd3ae42761b9b86d30d029aa1493872ff1533f42" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; or &lt;code&gt;.git/hooks/fsmonitor-watchmanv2&lt;/code&gt; depending on the version of the hook to use.</source>
          <target state="translated">このフックは、使用するフックのバージョンに応じて、構成オプション &lt;code&gt;core.fsmonitor&lt;/code&gt; が &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; または &lt;code&gt;.git/hooks/fsmonitor-watchmanv2&lt;/code&gt; に設定されている場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7b0692c459d4a723afc690b678a8556c7e5d3814" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt;. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.</source>
          <target state="translated">このフックは、設定オプション &lt;code&gt;core.fsmonitor&lt;/code&gt; が &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; に設定されている場合に呼び出されます。バージョン（現在は1）と、1970年1月1日の午前0時からの経過ナノ秒単位の時間という2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="1ea8190ee0fad5a3aca31c578a724c322c0d57cb" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the index is written in read-cache.c do_write_locked_index.</source>
          <target state="translated">このフックは、read-cache.c do_write_locked_indexにインデックスが書き込まれたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bbcd7cc3d137fc9e83cb037a7ffe28a3a104cf5b" translate="yes" xml:space="preserve">
          <source>This hook is invoked with the environment variable &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; if the command will not bring up an editor to modify the commit message.</source>
          <target state="translated">このフックは環境変数 &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; 呼び出されます。コマンドがコミットメッセージを変更するためのエディターを起動しない場合。</target>
        </trans-unit>
        <trans-unit id="ddc7ece9286909c0de44abe41d5a762b67552ed5" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git am&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="448e187d53f17c70cda00f92a3ee55c4bde07472" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git commit&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="08260832c28c95684a1993d7203db5c6a733006a" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git receive-pack&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="f1b9eafafbdf014b8c082347223fc7e3e439cd3c" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. In addition to the list of revision arguments read from the standard input, pretend as if all refs under &lt;code&gt;refs/&lt;/code&gt; are specified to be included.</source>
          <target state="translated">これは &lt;code&gt;--revs&lt;/code&gt; を意味します。標準入力から読み取られたリビジョン引数のリストに加えて、 &lt;code&gt;refs/&lt;/code&gt; 下のすべてのref が含まれるように指定されているかのように見せかけます。</target>
        </trans-unit>
        <trans-unit id="00f6fe101136dac1c604175fe5bf787266d15317" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. When processing the list of revision arguments read from the standard input, limit the objects packed to those that are not already packed.</source>
          <target state="translated">これは &lt;code&gt;--revs&lt;/code&gt; を意味します。標準入力から読み取られたリビジョン引数のリストを処理する場合、パックされるオブジェクトを、まだパックされていないオブジェクトに制限します。</target>
        </trans-unit>
        <trans-unit id="23abf25dbec44cc1a257bc71a457bb760d4a79eb" translate="yes" xml:space="preserve">
          <source>This implies the &lt;code&gt;--topo-order&lt;/code&gt; option by default, but the &lt;code&gt;--date-order&lt;/code&gt; option may also be specified.</source>
          <target state="translated">これが意味 &lt;code&gt;--topo-order&lt;/code&gt; デフォルトでオプションを、しかし &lt;code&gt;--date-order&lt;/code&gt; オプションも指定することができます。</target>
        </trans-unit>
        <trans-unit id="9bafb6d097d43ca4ccca730edb887425acfba8b5" translate="yes" xml:space="preserve">
          <source>This imports the specified depot into &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; in an existing Git repository. The &lt;code&gt;--branch&lt;/code&gt; option can be used to specify a different branch to be used for the p4 content.</source>
          <target state="translated">これにより、指定したデポが既存のGitリポジトリの &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; にインポートされます。 &lt;code&gt;--branch&lt;/code&gt; オプションは、p4のコンテンツに使用される別のブランチを指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="5a7c7788d041aa1a2f51fc279f1f6f7da23ae666" translate="yes" xml:space="preserve">
          <source>This indicates that the helper is able to interact with the remote side using an explicit hash algorithm extension.</source>
          <target state="translated">これは、ヘルパーが明示的なハッシュアルゴリズム拡張を使用してリモート側と対話できることを示しています。</target>
        </trans-unit>
        <trans-unit id="505428074ae07b004fad59f4eaeb272274ac2c6b" translate="yes" xml:space="preserve">
          <source>This information can be used to determine what commit was the tip of a branch &quot;2 days ago&quot;.</source>
          <target state="translated">この情報から、どのコミットが「2日前」のブランチの先端だったのかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="86187244d1368864bf6af8ccb054656e32b6a58b" translate="yes" xml:space="preserve">
          <source>This instructs git svn to recode pathnames to a given encoding. It can be used by windows users and by those who work in non-utf8 locales to avoid corrupted file names with non-ASCII characters. Valid encodings are the ones supported by Perl&amp;rsquo;s Encode module.</source>
          <target state="translated">これはgit svnにパス名を指定されたエンコーディングに再コード化するように指示します。これは、Windowsユーザーおよび非utf8ロケールで作業するユーザーが非ASCII文字を含むファイル名の破損を回避するために使用できます。有効なエンコーディングは、PerlのEncodeモジュールでサポートされているものです。</target>
        </trans-unit>
        <trans-unit id="956c7627c61d83f78ef967d8ba93fedd722fb328" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;commit-graph&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;commit-graph&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of reachable commits that are not in the commit-graph file is at least the value of &lt;code&gt;maintenance.commit-graph.auto&lt;/code&gt;. The default value is 100.</source>
          <target state="translated">この整数構成オプションは、 &lt;code&gt;git maintenance run --auto&lt;/code&gt; 一部として &lt;code&gt;commit-graph&lt;/code&gt; タスクを実行する頻度を制御します。ゼロの場合、 &lt;code&gt;commit-graph&lt;/code&gt; タスクは &lt;code&gt;--auto&lt;/code&gt; オプションを指定して実行されません。負の値を指定すると、タスクは毎回実行されます。それ以外の場合、正の値は、commit-graphファイルにない到達可能なコミットの数が少なくとも &lt;code&gt;maintenance.commit-graph.auto&lt;/code&gt; の値であるときにコマンドを実行する必要があることを意味します。デフォルト値は100です。</target>
        </trans-unit>
        <trans-unit id="e64a7c2d6ae98d20c277e94177b42af973cafce0" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;incremental-repack&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;incremental-repack&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of pack-files not in the multi-pack-index is at least the value of &lt;code&gt;maintenance.incremental-repack.auto&lt;/code&gt;. The default value is 10.</source>
          <target state="translated">この整数構成オプションは、 &lt;code&gt;git maintenance run --auto&lt;/code&gt; 一部として &lt;code&gt;incremental-repack&lt;/code&gt; タスクを実行する頻度を制御します。ゼロの場合、 &lt;code&gt;incremental-repack&lt;/code&gt; タスクは &lt;code&gt;--auto&lt;/code&gt; オプションを指定して実行されません。負の値を指定すると、タスクは毎回実行されます。それ以外の場合、正の値は、multi-pack-indexにないpack-fileの数が少なくとも &lt;code&gt;maintenance.incremental-repack.auto&lt;/code&gt; の値であるときにコマンドを実行する必要があることを意味します。デフォルト値は10です。</target>
        </trans-unit>
        <trans-unit id="61993927f5b7a85ff06e34daa416caf3ce7cbe39" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;loose-objects&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;loose-objects&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of loose objects is at least the value of &lt;code&gt;maintenance.loose-objects.auto&lt;/code&gt;. The default value is 100.</source>
          <target state="translated">この整数構成オプションは、 &lt;code&gt;loose-objects&lt;/code&gt; タスクを &lt;code&gt;git maintenance run --auto&lt;/code&gt; 一部として実行する頻度を制御します。ゼロの場合、 &lt;code&gt;loose-objects&lt;/code&gt; タスクは &lt;code&gt;--auto&lt;/code&gt; オプションを指定して実行されません。負の値を指定すると、タスクは毎回実行されます。それ以外の場合、正の値は、ルーズオブジェクトの数が少なくとも &lt;code&gt;maintenance.loose-objects.auto&lt;/code&gt; の値であるときにコマンドを実行する必要があることを意味します。デフォルト値は100です。</target>
        </trans-unit>
        <trans-unit id="0909b4167b1b6cfc93db8cafdc74248d3901c792" translate="yes" xml:space="preserve">
          <source>This is a deprecated synonym for &lt;code&gt;repack.writeBitmaps&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;repack.writeBitmaps&lt;/code&gt; の非推奨の同義語です。</target>
        </trans-unit>
        <trans-unit id="0663f3ff3f5e643bb58ee19e6a44fd14680c40d5" translate="yes" xml:space="preserve">
          <source>This is a login shell for SSH accounts to provide restricted Git access. It permits execution only of server-side Git commands implementing the pull/push functionality, plus custom commands present in a subdirectory named &lt;code&gt;git-shell-commands&lt;/code&gt; in the user&amp;rsquo;s home directory.</source>
          <target state="translated">これは、SSHアカウント用のログインシェルであり、制限されたGitアクセスを提供します。プル/プッシュ機能を実装するサーバー側のGit &lt;code&gt;git-shell-commands&lt;/code&gt; と、ユーザーのホームディレクトリのgit-shell-commandsという名前のサブディレクトリにあるカスタムコマンドの実行のみを許可します。</target>
        </trans-unit>
        <trans-unit id="bb9b1700493e02e1c42808252a2a81a90b07f06f" translate="yes" xml:space="preserve">
          <source>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</source>
          <target state="translated">これは、修正された再帰的な戦略です。木AとBをマージするとき、BがAのサブツリーに対応する場合、Bはまず、同じレベルの木を読むのではなく、Aの木構造に一致するように調整されます。この調整は共通の祖先木に対しても行われます。</target>
        </trans-unit>
        <trans-unit id="9ebc5555eb7976dd79439890cefef50e4fca7252" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable that defines reference prefixes to match the commands in &lt;code&gt;receive-pack&lt;/code&gt;. Commands matching the prefixes will be executed by an external hook &quot;proc-receive&quot;, instead of the internal &lt;code&gt;execute_commands&lt;/code&gt; function. If this variable is not defined, the &quot;proc-receive&quot; hook will never be used, and all commands will be executed by the internal &lt;code&gt;execute_commands&lt;/code&gt; function.</source>
          <target state="translated">これは、 &lt;code&gt;receive-pack&lt;/code&gt; 内のコマンドに一致する参照プレフィックスを定義する複数値の変数です。プレフィックスに一致するコマンドは、内部の &lt;code&gt;execute_commands&lt;/code&gt; 関数ではなく、外部フック「proc-receive」によって実行されます。この変数が定義されていない場合、「proc-receive」フックは使用されず、すべてのコマンドは内部の &lt;code&gt;execute_commands&lt;/code&gt; 関数によって実行されます。</target>
        </trans-unit>
        <trans-unit id="94478372a5a22fcace1286299ca604a903c0373f" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. &lt;code&gt;.git/config&lt;/code&gt; in a repository) to clear the values inherited from a lower priority configuration files (e.g. &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;).</source>
          <target state="translated">これは複数の値を持つ変数であり、空の値を優先度の高い設定ファイル（リポジトリの &lt;code&gt;.git/config&lt;/code&gt; など)で使用して、優先度の低い設定ファイル（ &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ）から継承した値をクリアできます。。</target>
        </trans-unit>
        <trans-unit id="9800795b0feafe785919ba7eb03d901a5af98b6d" translate="yes" xml:space="preserve">
          <source>This is a potentially &lt;em&gt;dangerous&lt;/em&gt; mode of operation. It rewrites history, which does not bode well when you published that history already. Do &lt;strong&gt;not&lt;/strong&gt; use this option unless you have read &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; carefully.</source>
          <target state="translated">これは潜在的に&lt;em&gt;危険な&lt;/em&gt;操作モードです。それは歴史を書き直しますが、あなたがすでにその歴史を公開したとき、それは良い前兆ではありません。&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]を&lt;/a&gt;注意深く読んでいない限り、このオプションを使用し&lt;strong&gt;ないで&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="7393bcbfeab09d874001a82423e807bb091915e9" translate="yes" xml:space="preserve">
          <source>This is a quick summary of the major commands; the previous chapters explain how these work in more detail.</source>
          <target state="translated">これは主なコマンドの簡単な要約で、前の章では、これらのコマンドがどのように動作するかをより詳細に説明しています。</target>
        </trans-unit>
        <trans-unit id="e6b70a1472f7c00669a56c92197ed227d5be5866" translate="yes" xml:space="preserve">
          <source>This is a shorthand for &quot;--pretty=oneline --abbrev-commit&quot; used together.</source>
          <target state="translated">これは、&quot;--pretty=oneline --abbrev-commit &quot;と一緒に使われる速記法です。</target>
        </trans-unit>
        <trans-unit id="18c84bcba1b16c1ac1cf14d08c1c68d27e4599a1" translate="yes" xml:space="preserve">
          <source>This is a total waste of time and effort on a filesystem that orders data writes properly, but can be useful for filesystems that do not use journalling (traditional UNIX filesystems) or that only journal metadata and not file contents (OS X&amp;rsquo;s HFS+, or Linux ext3 with &quot;data=writeback&quot;).</source>
          <target state="translated">これは、データの書き込みを適切に順序付けるファイルシステムで時間と労力を浪費することですが、ジャーナリングを使用しないファイルシステム（従来のUNIXファイルシステム）またはジャーナルのメタデータのみを使用し、ファイルの内容を使用しない（OS XのHFS +、またはLinux） 「data = writeback」を使用したext3）。</target>
        </trans-unit>
        <trans-unit id="554ab63db8a74b017dac093a21d0557d821484db" translate="yes" xml:space="preserve">
          <source>This is a toy format. The current time and time zone of this system is always copied into the identity string at the time it is being created by fast-import. There is no way to specify a different time or time zone.</source>
          <target state="translated">これはおもちゃのフォーマットです。このシステムの現在の時刻とタイムゾーンは、fast-importで作成されている時点で常にID文字列にコピーされています。別の時間帯やタイムゾーンを指定する方法はありません。</target>
        </trans-unit>
        <trans-unit id="bc30d84517d5f02b55a3811eba6ffba9e6c0e4f0" translate="yes" xml:space="preserve">
          <source>This is a work in progress.</source>
          <target state="translated">これは作業中のものです。</target>
        </trans-unit>
        <trans-unit id="cdf94d586f4e34dd4d9c37fe3a3dd3a90ee94301" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;--group=committer&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;--group=committer&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="3e77feb91313add3d7aff3491329020f7cd2b88e" translate="yes" xml:space="preserve">
          <source>This is an easy way to check out a particular version without having to make up a name for the new branch. You can still create a new branch (or tag) for this version later if you decide to.</source>
          <target state="translated">これは、新しいブランチの名前を作らなくても、特定のバージョンをチェックアウトするための簡単な方法です。このバージョン用の新しいブランチ (またはタグ)を後で作成することができます。</target>
        </trans-unit>
        <trans-unit id="86d03a90949a936d437c536daea902a3352ca567" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;rebase&lt;/code&gt; is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as &lt;code&gt;ours&lt;/code&gt; (i.e. &quot;our shared canonical history&quot;), while what you did on your side branch as &lt;code&gt;theirs&lt;/code&gt; (i.e. &quot;one contributor&amp;rsquo;s work on top of it&quot;).</source>
          <target state="translated">これは、 &lt;code&gt;rebase&lt;/code&gt; がリモートでの履歴を共有の標準的なものとして扱い、リベースしているブランチで行われた作業を統合されるサードパーティの作業として扱い、一時的に役割を引き受けるワークフローで使用されるためですリベース中の正規履歴のキーパーの。正規の歴史の番人として、あなたにリモートからの履歴を表示する必要が &lt;code&gt;ours&lt;/code&gt; 、あなたの側枝に何をしたかしながら、（つまり、「私たちの共有正規の歴史」）として &lt;code&gt;theirs&lt;/code&gt; （すなわち、「その上に1つの貢献の仕事」 ）。</target>
        </trans-unit>
        <trans-unit id="95a20fc02bc3cd4094f682df1ea1f755e327d688" translate="yes" xml:space="preserve">
          <source>This is called a &lt;code&gt;hunk header&lt;/code&gt;. The &quot;TEXT&quot; portion is by default a line that begins with an alphabet, an underscore or a dollar sign; this matches what GNU &lt;code&gt;diff -p&lt;/code&gt; output uses. This default selection however is not suited for some contents, and you can use a customized pattern to make a selection.</source>
          <target state="translated">これは、 &lt;code&gt;hunk header&lt;/code&gt; と呼ばれます。「テキスト」の部分は、デフォルトでは、アルファベット、アンダースコア、またはドル記号で始まる行です。これは、GNU &lt;code&gt;diff -p&lt;/code&gt; 出力が使用するものと一致します。ただし、このデフォルトの選択は一部のコンテンツには適しておらず、カスタマイズされたパターンを使用して選択を行うことができます。</target>
        </trans-unit>
        <trans-unit id="85de32d717921314245903361d4033db93188253" translate="yes" xml:space="preserve">
          <source>This is default name of common system-wide configuration file.</source>
          <target state="translated">これは、システム全体に共通の設定ファイルのデフォルト名です。</target>
        </trans-unit>
        <trans-unit id="8fabc38be889239efec56b25dba57afb3b308b5b" translate="yes" xml:space="preserve">
          <source>This is default name of fallback system-wide configuration file. This file is used only if per-instance configuration variable is not found.</source>
          <target state="translated">これはフォールバックシステム全体の設定ファイルのデフォルト名です。このファイルは、インスタンスごとの設定変数が見つからない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e13cac7eff842df90d7031a70a4150ab3a8cdbc2" translate="yes" xml:space="preserve">
          <source>This is default name of per-instance configuration file. The format of this file is described above.</source>
          <target state="translated">これは、インスタンス単位の設定ファイルのデフォルト名です。このファイルのフォーマットは上述の通りです。</target>
        </trans-unit>
        <trans-unit id="2ac99b50de3702f5d543e44c6b1ddc55b08d7471" translate="yes" xml:space="preserve">
          <source>This is designed to be as compact as possible.</source>
          <target state="translated">できるだけコンパクトになるように設計されています。</target>
        </trans-unit>
        <trans-unit id="2fb3b65e8bdaca2feb11f7bb139eec49acdf4051" translate="yes" xml:space="preserve">
          <source>This is done to avoid disrupting the remote-tracking branches. The end users expect these refs to stay unmoved unless they initiate a fetch. With prefetch task, however, the objects necessary to complete a later real fetch would already be obtained, so the real fetch would go faster. In the ideal case, it will just become an update to a bunch of remote-tracking branches without any object transfer.</source>
          <target state="translated">これはリモートトラッキングブランチの混乱を避けるために行われます。エンドユーザは、これらの参照がフェッチを開始しない限り動かないことを期待しています。しかし、プリフェッチタスクを使うと、後で実際のフェッチを完了するために必要なオブジェクトはすでに取得されているので、実際のフェッチはより速くなります。理想的なケースでは、オブジェクトを転送することなく、リモートトラッキングブランチの束への更新になるだけです。</target>
        </trans-unit>
        <trans-unit id="d4d30dfd1772dd73a7b51cd065bd14037d1044bf" translate="yes" xml:space="preserve">
          <source>This is done to prevent you from losing your work-in-progress changes, and mixing your random changes in an unrelated merge commit. To illustrate, suppose you start from what has been committed last to your repository:</source>
          <target state="translated">これは、進行中の変更を失ったり、無関係なマージコミットにランダムな変更が混ざったりするのを防ぐためです。説明するために、リポジトリに最後にコミットされたものから始めるとします。</target>
        </trans-unit>
        <trans-unit id="c5483036881ec5a0c568843866e403149495194d" translate="yes" xml:space="preserve">
          <source>This is how you read a blob (actually, not only a blob, but any type of object). To know how the function &lt;code&gt;read_object_with_reference()&lt;/code&gt; actually works, find the source code for it (something like &lt;code&gt;git grep
read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; in the Git repository), and read the source.</source>
          <target state="translated">これは、ブロブ（実際にはブロブだけでなく、あらゆるタイプのオブジェクト）を読み取る方法です。関数 &lt;code&gt;read_object_with_reference()&lt;/code&gt; が実際にどのように機能するかを知るには、そのソースコード（Gitリポジトリの &lt;code&gt;git grep read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; ）を見つけてソースを読み取ります。</target>
        </trans-unit>
        <trans-unit id="d94f65e687e225292db2cabccebd8f5b3adaa1d5" translate="yes" xml:space="preserve">
          <source>This is ideally suited for read-only updates, i.e., pulling from Git repositories.</source>
          <target state="translated">これは、読み取り専用の更新、つまり Git リポジトリからの引っ張り出しに最適です。</target>
        </trans-unit>
        <trans-unit id="4f74abb17322f51c4e08c52446429282a69cbb4c" translate="yes" xml:space="preserve">
          <source>This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset.</source>
          <target state="translated">これは、テストスイートでのみ使用することを意図しています。これにより、生成されたパックインデックスのバージョンを強制的に変更したり、 指定したオフセットよりも上に位置するオブジェクトに対して 64 ビットのインデックスエントリを強制的に追加したりすることができます。</target>
        </trans-unit>
        <trans-unit id="8180429180a5d33dfa16e7d2805d2ac9f53f061d" translate="yes" xml:space="preserve">
          <source>This is just to get you into the groove for the most libified part of Git: the revision walker.</source>
          <target state="translated">これは、Git の最も解放された部分であるリビジョンウォーカーのためのものです。</target>
        </trans-unit>
        <trans-unit id="dce30f3fbb0be29025f159d55505215087cce86b" translate="yes" xml:space="preserve">
          <source>This is known to &lt;code&gt;range-diff&lt;/code&gt; as &quot;dual coloring&quot;. Use &lt;code&gt;--no-dual-color&lt;/code&gt; to revert to color all lines according to the outer diff markers (and completely ignore the inner diff when it comes to color).</source>
          <target state="translated">これは&quot;dual coloring&quot;として &lt;code&gt;range-diff&lt;/code&gt; として知られています。 &lt;code&gt;--no-dual-color&lt;/code&gt; を使用して、外側のdiffマーカーに従ってすべての線の色を元に戻します（色に関しては、内側のdiffを完全に無視します）。</target>
        </trans-unit>
        <trans-unit id="51ecbd5eaeeeee461a4969f3b0cb27dc975ebc23" translate="yes" xml:space="preserve">
          <source>This is made much worse if many files have to be fixed to resolve conflicts. That&amp;rsquo;s why such merges are called &quot;evil merges&quot;. They can make regressions very difficult to track down. It can even be misleading to know the first bad commit if it happens to be such a merge, because people might think that the bug comes from bad conflict resolution when it comes from a semantic change in one branch.</source>
          <target state="translated">競合を解決するために多くのファイルを修正する必要がある場合、これはさらに悪化します。そのため、このようなマージは「悪のマージ」と呼ばれます。彼らは回帰を追跡することを非常に困難にすることができます。1つのブランチでのセマンティックの変更に起因するバグは、不適切な競合の解決によるものであると人々が考える可能性があるため、このようなマージである場合、最初の不良コミットを知ることは誤解を招く可能性さえあります。</target>
        </trans-unit>
        <trans-unit id="2742189647afc1dbda2e1e2ecc6c9303cbb2d70b" translate="yes" xml:space="preserve">
          <source>This is meant to be used by higher level scripts to compute merge results outside of the index, and stuff the results back into the index. For this reason, the output from the command omits entries that match the &amp;lt;branch1&amp;gt; tree.</source>
          <target state="translated">これは、より高いレベルのスクリプトがインデックス外のマージ結果を計算し、結果をインデックスに詰め込むために使用されることを意図しています。このため、コマンドからの出力では、&amp;lt;branch1&amp;gt;ツリーに一致するエントリが省略されています。</target>
        </trans-unit>
        <trans-unit id="9ccf843e585a34e60ae505f61685a10813c9c88a" translate="yes" xml:space="preserve">
          <source>This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before &quot;reset&quot;.</source>
          <target state="translated">これは、コミットした内容が不完全であったことを思い出したときや、コミットメッセージのスペルを間違えたとき、あるいはその両方の場合によく行われます。作業ツリーを &quot;reset&quot; 前の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="efff48b2c5bed4c5ab6435b6d058280a53664967" translate="yes" xml:space="preserve">
          <source>This is not a command the end user would want to run. Ever. This documentation is meant for people who are studying the Porcelain-ish scripts and/or are writing new ones.</source>
          <target state="translated">これはエンドユーザーが実行したいコマンドではありません。絶対に。このドキュメントは、Porcelain-ishなスクリプトを研究している人や、新しいスクリプトを書いている人のためのものです。</target>
        </trans-unit>
        <trans-unit id="1a7ca68cf192059586c364ba5f318ecdbeb3a963" translate="yes" xml:space="preserve">
          <source>This is not a command the end user would want to run. Ever. This documentation is meant for people who are studying the plumbing scripts and/or are writing new ones.</source>
          <target state="translated">これはエンドユーザーが実行したいコマンドではありません。絶対に。このドキュメントは、配管スクリプトを勉強している人や新しいスクリプトを書いている人のためのものです。</target>
        </trans-unit>
        <trans-unit id="4c9e09ba77ce1340a426d6ae669add42a4fe4542" translate="yes" xml:space="preserve">
          <source>This is not a real filter executed for each commit but a one time setup just before the loop. Therefore no commit-specific variables are defined yet. Functions or variables defined here can be used or modified in the following filter steps except the commit filter, for technical reasons.</source>
          <target state="translated">これはコミットごとに実行されるフィルタではなく、ループの直前に一度だけ設定されるものです。したがって、コミット固有の変数はまだ定義されていません。ここで定義されている関数や変数は、技術的な理由から、コミットフィルタ以外の以下のフィルタステップで使用したり変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="ad1d1c10cd51125ef48d021d8c7283be0413a66d" translate="yes" xml:space="preserve">
          <source>This is not hard to understand, as soon as you realize that Git simply never knows (or cares) about files that it is not told about explicitly. Git will never go &lt;strong&gt;looking&lt;/strong&gt; for files to compare, it expects you to tell it what the files are, and that&amp;rsquo;s what the index is there for.</source>
          <target state="translated">これは、Gitが明示的に通知されていないファイルについて単に知らない（または気にしない）だけだと気づいたらすぐに理解できます。Gitは比較するファイルを&lt;strong&gt;探し&lt;/strong&gt;に行くことは決してありません。ファイルが何であるかを教えてくれることを期待し、それがインデックスの目的です。</target>
        </trans-unit>
        <trans-unit id="0273358cae89a5a683cca4bca340f2d1ab3cc600" translate="yes" xml:space="preserve">
          <source>This is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with &lt;code&gt;-&lt;/code&gt; will remove it from the existing list.</source>
          <target state="translated">これは、完了したコマンドのリストにコマンドを追加または削除するためにgit-completion.bashによってのみ使用されます。通常、磁器コマンドといくつかの選択コマンドのみが完了します。この変数には、スペースで区切ってコマンドを追加できます。コマンドの前に &lt;code&gt;-&lt;/code&gt; を付けると、既存のリストから削除されます。</target>
        </trans-unit>
        <trans-unit id="fcaf558e1ca35a6c93dcb363081455cef6ced8a0" translate="yes" xml:space="preserve">
          <source>This is only valid for &amp;lt;end&amp;gt; and will specify a number of lines before or after the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">これは&amp;lt;end&amp;gt;にのみ有効で、&amp;lt;start&amp;gt;で指定された行の前後の行数を指定します。</target>
        </trans-unit>
        <trans-unit id="3d1897f588ce3866d7bd11a61c4f52eb7dec72ee" translate="yes" xml:space="preserve">
          <source>This is only valid for &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; and will specify a number of lines before or after the line given by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; に対してのみ有効であり、 &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; で指定された行の前後の行数を指定します。</target>
        </trans-unit>
        <trans-unit id="1b0501180252ff128dca83458515deca695a7ecc" translate="yes" xml:space="preserve">
          <source>This is optional and is only searched when &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is present in $GIT_DIR/config.</source>
          <target state="translated">これはオプションであり、 &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; が$ GIT_DIR / configにある場合にのみ検索されます。</target>
        </trans-unit>
        <trans-unit id="4306207006bf4fdd2134f4efea5f0d698d2c1f81" translate="yes" xml:space="preserve">
          <source>This is particularly true when passing in diff options. Currently some options like &lt;code&gt;--stat&lt;/code&gt; can, as an emergent effect, produce output that&amp;rsquo;s quite useless in the context of &lt;code&gt;range-diff&lt;/code&gt;. Future versions of &lt;code&gt;range-diff&lt;/code&gt; may learn to interpret such options in a manner specific to &lt;code&gt;range-diff&lt;/code&gt; (e.g. for &lt;code&gt;--stat&lt;/code&gt; producing human-readable output which summarizes how the diffstat changed).</source>
          <target state="translated">これは、diffオプションを渡すときに特に当てはまります。現在、-- &lt;code&gt;--stat&lt;/code&gt; ようないくつかのオプションは、緊急効果として、 &lt;code&gt;range-diff&lt;/code&gt; のコンテキストではまったく役に立たない出力を生成する可能性があります。 &lt;code&gt;range-diff&lt;/code&gt; の将来のバージョンでは、そのようなオプションを &lt;code&gt;range-diff&lt;/code&gt; に固有の方法で解釈することを学習する可能性があります（たとえば、 &lt;code&gt;--stat&lt;/code&gt; がdiffstatの変更方法を要約する人間が読める出力を生成する場合）。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
