<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="35e3581a01e860cba15921ad7e00a74542d34f54" translate="yes" xml:space="preserve">
          <source>The merge backend works with a full copy of each relevant file, insulating it from these types of problems.</source>
          <target state="translated">マージバックエンドは、各関連ファイルの完全なコピーを使用して動作し、このような問題を回避します。</target>
        </trans-unit>
        <trans-unit id="d2c94b31b25e0c09828d4438bdd636247e16e902" translate="yes" xml:space="preserve">
          <source>The merge backend works with the full commits on both sides of history and thus has no such limitations.</source>
          <target state="translated">マージバックエンドは、履歴の両側の完全なコミットで動作するため、そのような制限はありません。</target>
        </trans-unit>
        <trans-unit id="657f593653b8985b76ea363799992d9ccd8552d1" translate="yes" xml:space="preserve">
          <source>The merge driver can learn the pathname in which the merged result will be stored via placeholder &lt;code&gt;%P&lt;/code&gt;.</source>
          <target state="translated">マージドライバーは、マージされた結果がプレースホルダー &lt;code&gt;%P&lt;/code&gt; を介して格納されるパス名を学習できます。</target>
        </trans-unit>
        <trans-unit id="3a4ee88dc1fd419e5903b5a6b97383e8c2a1fab9" translate="yes" xml:space="preserve">
          <source>The merge driver is expected to leave the result of the merge in the file named with &lt;code&gt;%A&lt;/code&gt; by overwriting it, and exit with zero status if it managed to merge them cleanly, or non-zero if there were conflicts.</source>
          <target state="translated">マージドライバは、 &lt;code&gt;%A&lt;/code&gt; という名前のファイルに上書きすることでマージの結果を残し、正常にマージできた場合はゼロステータスで、競合があった場合はゼロ以外で終了することが期待されています。</target>
        </trans-unit>
        <trans-unit id="d39522f0982abae4a359335f63ed088d0f4a4c4e" translate="yes" xml:space="preserve">
          <source>The merge mechanism (&lt;code&gt;git merge&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt; commands) allows the backend &lt;code&gt;merge strategies&lt;/code&gt; to be chosen with &lt;code&gt;-s&lt;/code&gt; option. Some strategies can also take their own options, which can be passed by giving &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; arguments to &lt;code&gt;git merge&lt;/code&gt; and/or &lt;code&gt;git pull&lt;/code&gt;.</source>
          <target state="translated">マージメカニズム（ &lt;code&gt;git merge&lt;/code&gt; および &lt;code&gt;git pull&lt;/code&gt; コマンド）では、 &lt;code&gt;-s&lt;/code&gt; オプションを使用してバックエンド &lt;code&gt;merge strategies&lt;/code&gt; を選択できます。一部の戦略では独自のオプションを使用することもできます。これらのオプションは、 &lt;code&gt;-X&amp;lt;option&amp;gt;&lt;/code&gt; 引数を &lt;code&gt;git merge&lt;/code&gt; や &lt;code&gt;git pull&lt;/code&gt; に渡すことで渡すことができます。</target>
        </trans-unit>
        <trans-unit id="fa594438c3581495b74bb79c047cb66382bd8b0d" translate="yes" xml:space="preserve">
          <source>The merge workflow works by copying branches between upstream and downstream. Upstream can merge contributions into the official history; downstream base their work on the official history.</source>
          <target state="translated">マージワークフローは、上流と下流の間でブランチをコピーすることで動作します。上流では投稿を公式の履歴にマージすることができ、下流では公式の履歴に基づいて作業を行います。</target>
        </trans-unit>
        <trans-unit id="1df107645dfce75dc8613a8a0f6007cf8381d780" translate="yes" xml:space="preserve">
          <source>The merge-base command finds a common ancestor of the given commits, and always returns one or the other in the case where one is a descendant of the other; so the above output shows that e05db0fd actually is an ancestor of v1.5.0-rc1.</source>
          <target state="translated">merge-base コマンドは、与えられたコミットの共通の祖先を見つけ、一方が他方の子孫である場合は常に一方か他方を返します。</target>
        </trans-unit>
        <trans-unit id="91d3bf0b3d356085e2e60914fc9a13ad2e2b8ebf" translate="yes" xml:space="preserve">
          <source>The message in a commit or a tag object is &lt;code&gt;contents&lt;/code&gt;, from which &lt;code&gt;contents:&amp;lt;part&amp;gt;&lt;/code&gt; can be used to extract various parts out of:</source>
          <target state="translated">コミットまたはタグオブジェクトのメッセージは &lt;code&gt;contents&lt;/code&gt; であり、そこから &lt;code&gt;contents:&amp;lt;part&amp;gt;&lt;/code&gt; を使用して以下からさまざまな部分を抽出できます。</target>
        </trans-unit>
        <trans-unit id="19f5c4372c6fc154ead993a9f4b5a82da922524d" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt; and command line with &lt;code&gt;-m&lt;/code&gt; are usually used as the tag message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; を使用してファイルから取得したメッセージと &lt;code&gt;-m&lt;/code&gt; を使用してコマンドラインを取得したメッセージは、通常、変更されていないタグメッセージとして使用されます。このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。</target>
        </trans-unit>
        <trans-unit id="1e2b72f6afed427d21f4e345d320e470730d82f9" translate="yes" xml:space="preserve">
          <source>The message taken from file with &lt;code&gt;-F&lt;/code&gt;, command line with &lt;code&gt;-m&lt;/code&gt;, and from commit object with &lt;code&gt;-C&lt;/code&gt; are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.</source>
          <target state="translated">&lt;code&gt;-F&lt;/code&gt; を使用してファイルから、 &lt;code&gt;-m&lt;/code&gt; を使用してコマンドラインから、および &lt;code&gt;-C&lt;/code&gt; を使用してコミットオブジェクトから取得したメッセージは、通常、変更されていないコミットログメッセージとして使用されます。このオプションを使用すると、これらのソースから取得したメッセージをさらに編集できます。</target>
        </trans-unit>
        <trans-unit id="ae16f65784862fd6e529b736650355763df13327" translate="yes" xml:space="preserve">
          <source>The method by which a submodule is updated by &lt;code&gt;git submodule update&lt;/code&gt;, which is the only affected command, others such as &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; are unaffected. It exists for historical reasons, when &lt;code&gt;git submodule&lt;/code&gt; was the only command to interact with submodules; settings like &lt;code&gt;submodule.active&lt;/code&gt; and &lt;code&gt;pull.rebase&lt;/code&gt; are more specific. It is populated by &lt;code&gt;git submodule init&lt;/code&gt; from the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file. See description of &lt;code&gt;update&lt;/code&gt; command in &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt;.</source>
          <target state="translated">影響を受ける唯一のコマンドである &lt;code&gt;git submodule update&lt;/code&gt; によってサブモジュールが更新される方法。他の &lt;code&gt;git checkout --recurse-submodules&lt;/code&gt; などは影響を受けません。これは、 &lt;code&gt;git submodule&lt;/code&gt; がサブモジュールと対話する唯一のコマンドであった歴史的な理由で存在します。 &lt;code&gt;submodule.active&lt;/code&gt; や &lt;code&gt;pull.rebase&lt;/code&gt; などの設定はより具体的です。&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルから &lt;code&gt;git submodule init&lt;/code&gt; によって読み込まれます。&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;の &lt;code&gt;update&lt;/code&gt; コマンドの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="04ef06b50b9899f38b1e5f5c81eb00396b6d2328" translate="yes" xml:space="preserve">
          <source>The mode parameter is optional (defaults to &lt;code&gt;all&lt;/code&gt;), and is used to specify the handling of untracked files; when -u is not used, the default is &lt;code&gt;normal&lt;/code&gt;, i.e. show untracked files and directories.</source>
          <target state="translated">modeパラメータはオプションであり（デフォルトは &lt;code&gt;all&lt;/code&gt; ）、追跡されていないファイルの処理を指定するために使用されます。-uを使用しない場合、デフォルトは &lt;code&gt;normal&lt;/code&gt; です。つまり、追跡されていないファイルとディレクトリが表示されます。</target>
        </trans-unit>
        <trans-unit id="daee71f2e966cf5f390a0401b9f0381f1242178c" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of ignored files. It is optional: it defaults to &lt;code&gt;traditional&lt;/code&gt;.</source>
          <target state="translated">modeパラメータは、無視されたファイルの処理を指定するために使用されます。これはオプションである：それはデフォルト &lt;code&gt;traditional&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="789771a80f50eaf70002a855307c4e88ea3d25bd" translate="yes" xml:space="preserve">
          <source>The mode parameter is used to specify the handling of untracked files. It is optional: it defaults to &lt;code&gt;all&lt;/code&gt;, and if specified, it must be stuck to the option (e.g. &lt;code&gt;-uno&lt;/code&gt;, but not &lt;code&gt;-u no&lt;/code&gt;).</source>
          <target state="translated">modeパラメータは、追跡されていないファイルの処理を指定するために使用されます。これはオプションです。デフォルトは &lt;code&gt;all&lt;/code&gt; で、指定する場合はオプションに &lt;code&gt;-uno&lt;/code&gt; する必要があります（例：-uno、ただし &lt;code&gt;-u no&lt;/code&gt; ではない）。</target>
        </trans-unit>
        <trans-unit id="d56062b3fd6eee94e49e5896b7d127ee25df01a1" translate="yes" xml:space="preserve">
          <source>The modifications stashed away by this command can be listed with &lt;code&gt;git stash list&lt;/code&gt;, inspected with &lt;code&gt;git stash show&lt;/code&gt;, and restored (potentially on top of a different commit) with &lt;code&gt;git stash apply&lt;/code&gt;. Calling &lt;code&gt;git stash&lt;/code&gt; without any arguments is equivalent to &lt;code&gt;git stash push&lt;/code&gt;. A stash is by default listed as &quot;WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;​&quot;, but you can give a more descriptive message on the command line when you create one.</source>
          <target state="translated">このコマンドによって隠された変更は、 &lt;code&gt;git stash list&lt;/code&gt; で一覧 &lt;code&gt;git stash show&lt;/code&gt; 、git stash showで検査され、 &lt;code&gt;git stash apply&lt;/code&gt; で復元される可能性があります（別のコミットの上にある）。引数なしで &lt;code&gt;git stash&lt;/code&gt; を呼び出すことは、 &lt;code&gt;git stash push&lt;/code&gt; と同等です。 stashはデフォルトで「WIP on &lt;code&gt;branchname&lt;/code&gt; &amp;hellip;」としてリストされますが、作成時にコマンドラインでより詳細なメッセージを表示できます。</target>
        </trans-unit>
        <trans-unit id="e06fa83026ee56ec3b62a659fa5a44c6e4e4728d" translate="yes" xml:space="preserve">
          <source>The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)</source>
          <target state="translated">モジュールのパス (httpd が Apache の場合のみ必要)。(デフォルト:/usr/lib/apache2/modules)</target>
        </trans-unit>
        <trans-unit id="08ed4170506fa174e84f549a0e3f26086c486529" translate="yes" xml:space="preserve">
          <source>The more complex forms are:</source>
          <target state="translated">より複雑な形になっています。</target>
        </trans-unit>
        <trans-unit id="7d735293dee944ca58932a7261110828d307c793" translate="yes" xml:space="preserve">
          <source>The most common cause of dangling objects is that you&amp;rsquo;ve rebased a branch, or you have pulled from somebody else who rebased a branch&amp;mdash;​see &lt;a href=&quot;#cleaning-up-history&quot;&gt;Rewriting history and maintaining patch series&lt;/a&gt;. In that case, the old head of the original branch still exists, as does everything it pointed to. The branch pointer itself just doesn&amp;rsquo;t, since you replaced it with another one.</source>
          <target state="translated">ぶら下がっているオブジェクトの最も一般的な原因は、ブランチをリベースしたか、ブランチをリベースした他の誰かからプルしたことです。&lt;a href=&quot;#cleaning-up-history&quot;&gt;履歴の書き換えとパッチシリーズの維持を&lt;/a&gt;参照してください。その場合、元のブランチの古いヘッドが存在し、それが指すすべてのものが存在します。ブランチポインター自体は、別のものに置き換えたため、実際にはありません。</target>
        </trans-unit>
        <trans-unit id="8bc143dd44c89f63596943262174b04211332773" translate="yes" xml:space="preserve">
          <source>The multi-pack-index (MIDX for short) stores a list of objects and their offsets into multiple packfiles. It contains:</source>
          <target state="translated">multi-pack-index (略して MIDX)は、オブジェクトのリストとそのオフセットを複数のパックファイルに格納します。これには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="4ca15f678a55a1443f2d701a54958e45ad8a0235" translate="yes" xml:space="preserve">
          <source>The multi-pack-index allows many packfiles, especially in a context where repacking is expensive (such as a very large repo), or unexpected maintenance time is unacceptable (such as a high-demand build machine). However, the multi-pack-index needs to be rewritten in full every time. We can extend the format to be incremental, so writes are fast. By storing a small &quot;tip&quot; multi-pack-index that points to large &quot;base&quot; MIDX files, we can keep writes fast while still reducing the number of binary searches required for object lookups.</source>
          <target state="translated">multi-pack-indexを使うと、特にリパックにコストがかかるような文脈(非常に大きなレポなど)や、予期せぬメンテナンス時間が許容できないような文脈(需要の高いビルドマシンなど)では、多くのパックファイルを使用することが可能になります。しかし、マルチパックインデックスは毎回フルに書き換える必要があります。そこで、フォーマットをインクリメンタルに拡張することで、書き込みが高速になります。大きな &quot;ベース &quot;MIDXファイルを指す小さな &quot;tip &quot;マルチパックインデックスを格納することで、オブジェクトの検索に必要なバイナリ検索の数を減らしつつ、書き込みを高速に保つことができます。</target>
        </trans-unit>
        <trans-unit id="d98c840529f1ab7c2fa3df48a823219f4ff9a17e" translate="yes" xml:space="preserve">
          <source>The multi-pack-index files refer to multiple pack-files and loose objects.</source>
          <target state="translated">マルチパックインデックスファイルは、複数のパックファイルとルーズオブジェクトを参照しています。</target>
        </trans-unit>
        <trans-unit id="1e0c8af9211e361d1a35789c37df84247f7ae9ac" translate="yes" xml:space="preserve">
          <source>The name and the e-mail address of the owner of the key that signed the push certificate.</source>
          <target state="translated">プッシュ証明書に署名した鍵の所有者の名前とメールアドレス。</target>
        </trans-unit>
        <trans-unit id="2551d22d5e60fb51293e5ef827d3f2d640624d55" translate="yes" xml:space="preserve">
          <source>The name of a commit at which to start the new branch; see &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; for details. Defaults to &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">新しいブランチを開始するコミットの名前。詳細は&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;をご覧ください。デフォルトは &lt;code&gt;HEAD&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0efd5464958e1be85e38672256be6f6e17bc462a" translate="yes" xml:space="preserve">
          <source>The name of a local ref which can be considered &amp;ldquo;upstream&amp;rdquo; from the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; in the same way as &lt;code&gt;refname&lt;/code&gt; above. Additionally respects &lt;code&gt;:track&lt;/code&gt; to show &quot;[ahead N, behind M]&quot; and &lt;code&gt;:trackshort&lt;/code&gt; to show the terse version: &quot;&amp;gt;&quot; (ahead), &quot;&amp;lt;&quot; (behind), &quot;&amp;lt;&amp;gt;&quot; (ahead and behind), or &quot;=&quot; (in sync). &lt;code&gt;:track&lt;/code&gt; also prints &quot;[gone]&quot; whenever unknown upstream ref is encountered. Append &lt;code&gt;:track,nobracket&lt;/code&gt; to show tracking information without brackets (i.e &quot;ahead N, behind M&quot;).</source>
          <target state="translated">表示された参照の「上流」と見なすことができるローカル参照の名前。点 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; と &lt;code&gt;:rstrip&lt;/code&gt; と同様に &lt;code&gt;refname&lt;/code&gt; 上記。さらに &lt;code&gt;:track&lt;/code&gt; は &quot;[ahead N、behind M]&quot; を表示し、 &lt;code&gt;:trackshort&lt;/code&gt; は簡潔なバージョンを表示します： &quot;&amp;gt;&quot;（ahead）、 &quot;&amp;lt;&quot;（behind）、 &quot;&amp;lt;&amp;gt;&quot;（ahead and behind）、または &quot; = &quot;（同期中）。 &lt;code&gt;:track&lt;/code&gt; はまた、不明なアップストリームの参照に遭遇するたびに &quot;[gone]&quot;を出力します。追加 &lt;code&gt;:track,nobracket&lt;/code&gt; 括弧なしで追跡情報を表示する（すなわち、「先にM背後N」）。</target>
        </trans-unit>
        <trans-unit id="285243cf13ade280f7038dfb92bbdaa7d26dec36" translate="yes" xml:space="preserve">
          <source>The name of a local ref which represents the &lt;code&gt;@{push}&lt;/code&gt; location for the displayed ref. Respects &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt;, &lt;code&gt;:rstrip&lt;/code&gt;, &lt;code&gt;:track&lt;/code&gt;, &lt;code&gt;:trackshort&lt;/code&gt;, &lt;code&gt;:remotename&lt;/code&gt;, and &lt;code&gt;:remoteref&lt;/code&gt; options as &lt;code&gt;upstream&lt;/code&gt; does. Produces an empty string if no &lt;code&gt;@{push}&lt;/code&gt; ref is configured.</source>
          <target state="translated">表示された参照の &lt;code&gt;@{push}&lt;/code&gt; 位置を表すローカル参照の名前。尊重 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; 、 &lt;code&gt;:rstrip&lt;/code&gt; 、 &lt;code&gt;:track&lt;/code&gt; 、 &lt;code&gt;:trackshort&lt;/code&gt; 、 &lt;code&gt;:remotename&lt;/code&gt; 、および &lt;code&gt;:remoteref&lt;/code&gt; オプションとして &lt;code&gt;upstream&lt;/code&gt; ありません。 &lt;code&gt;@{push}&lt;/code&gt; 参照が構成されていない場合、空の文字列を生成します。</target>
        </trans-unit>
        <trans-unit id="25973fbcb02049e23787d52ffa23363b0665166c" translate="yes" xml:space="preserve">
          <source>The name of a new directory to clone into. The &quot;humanish&quot; part of the source repository is used if no directory is explicitly given (&lt;code&gt;repo&lt;/code&gt; for &lt;code&gt;/path/to/repo.git&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; for &lt;code&gt;host.xz:foo/.git&lt;/code&gt;). Cloning into an existing directory is only allowed if the directory is empty.</source>
          <target state="translated">クローンを作成する新しいディレクトリの名前。ディレクトリが明示的に指定されていない場合、ソース・リポジトリの「humanish」部分が使用される（ &lt;code&gt;repo&lt;/code&gt; 用 &lt;code&gt;/path/to/repo.git&lt;/code&gt; および &lt;code&gt;foo&lt;/code&gt; のため &lt;code&gt;host.xz:foo/.git&lt;/code&gt; ）。既存のディレクトリへのクローン作成は、ディレクトリが空の場合にのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="3c836d4cc86fbcc3a897aa8fab973465c40a1899" translate="yes" xml:space="preserve">
          <source>The name of an existing branch already in fast-import&amp;rsquo;s internal branch table. If fast-import doesn&amp;rsquo;t know the name, it&amp;rsquo;s treated as a SHA-1 expression.</source>
          <target state="translated">高速インポートの内部ブランチテーブルに既に存在する既存のブランチの名前。高速インポートで名前がわからない場合は、SHA-1式として扱われます。</target>
        </trans-unit>
        <trans-unit id="c21a579b2f8550495cd7f286a4f77b45b3df2f6e" translate="yes" xml:space="preserve">
          <source>The name of an existing branch to rename.</source>
          <target state="translated">名前を変更する既存のブランチの名前。</target>
        </trans-unit>
        <trans-unit id="b35cfa9e6735c6918643ac8769ab4e5dd81020f0" translate="yes" xml:space="preserve">
          <source>The name of an external credential helper, and any associated options. If the helper name is not an absolute path, then the string &lt;code&gt;git
credential-&lt;/code&gt; is prepended. The resulting string is executed by the shell (so, for example, setting this to &lt;code&gt;foo --option=bar&lt;/code&gt; will execute &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; via the shell. See the manual of specific helpers for examples of their use.</source>
          <target state="translated">外部資格情報ヘルパーの名前、および関連するオプション。ヘルパー名が絶対パスでない場合、文字列 &lt;code&gt;git credential-&lt;/code&gt; が先頭に追加されます。結果の文字列はシェルによって実行されます（たとえば、これを &lt;code&gt;foo --option=bar&lt;/code&gt; に設定すると、シェルを介して &lt;code&gt;git credential-foo --option=bar&lt;/code&gt; が実行されます。使用例については、特定のヘルパーのマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="7efaaad02f8c0d5eaaddaa5b6f8a8113410c8ef1" translate="yes" xml:space="preserve">
          <source>The name of one of the following can be used instead of a URL as &lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; argument:</source>
          <target state="translated">&lt;code&gt;&amp;lt;repository&amp;gt;&lt;/code&gt; 引数として、URLの代わりに次のいずれかの名前を使用できます。</target>
        </trans-unit>
        <trans-unit id="f54520854ea19fafb55997c9840c558f7f80fed9" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the object that is replaced. The content of the &lt;code&gt;replace&lt;/code&gt; reference is the SHA-1 of the replacement object.</source>
          <target state="translated">&lt;code&gt;replace&lt;/code&gt; 参照の名前は、置換されるオブジェクトのSHA-1です。 &lt;code&gt;replace&lt;/code&gt; 参照の内容は、置換オブジェクトのSHA-1です。</target>
        </trans-unit>
        <trans-unit id="117daad0c937bbfd67b26eaa98382dde664a6203" translate="yes" xml:space="preserve">
          <source>The name of the branch to create or delete. The new branch name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a branch name.</source>
          <target state="translated">作成または削除するブランチの名前。新しいブランチ名は、&lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]で&lt;/a&gt;定義されたすべてのチェックに合格する必要があります。これらのチェックの一部は、ブランチ名で許可される文字を制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="f40b450a4e1f94bf798289a960712dae0a6f632b" translate="yes" xml:space="preserve">
          <source>The name of the client can be given to &lt;code&gt;git p4&lt;/code&gt; in multiple ways. The variable &lt;code&gt;git-p4.client&lt;/code&gt; takes precedence if it exists. Otherwise, normal p4 mechanisms of determining the client are used: environment variable &lt;code&gt;P4CLIENT&lt;/code&gt;, a file referenced by &lt;code&gt;P4CONFIG&lt;/code&gt;, or the local host name.</source>
          <target state="translated">クライアントの名前は &lt;code&gt;git p4&lt;/code&gt; に複数の方法で指定できます。変数 &lt;code&gt;git-p4.client&lt;/code&gt; が存在する場合は、それが優先されます。それ以外の場合は、クライアントを決定する通常のp4メカニズムが使用されます：環境変数 &lt;code&gt;P4CLIENT&lt;/code&gt; 、 &lt;code&gt;P4CONFIG&lt;/code&gt; によって参照されるファイル、またはローカルホスト名。</target>
        </trans-unit>
        <trans-unit id="d25f4900ca4ac26428c337fc8a49a0fffaa87baa" translate="yes" xml:space="preserve">
          <source>The name of the current branch is stored in .git/HEAD.</source>
          <target state="translated">現在のブランチの名前は.git/headに格納されています。</target>
        </trans-unit>
        <trans-unit id="9192c74ec25457f29baaadaeb1d2b767ba20ddac" translate="yes" xml:space="preserve">
          <source>The name of the local ref being pushed, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the local ref is omitted.</source>
          <target state="translated">プッシュされるローカル参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。削除の場合、ローカル参照の名前は省略されます。</target>
        </trans-unit>
        <trans-unit id="61c75d700127b0c70d569d247bca51622e343006" translate="yes" xml:space="preserve">
          <source>The name of the local ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">更新されるローカルrefの名前から &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。</target>
        </trans-unit>
        <trans-unit id="40299b8374a45bc90296f421fddf5763cb8c6908" translate="yes" xml:space="preserve">
          <source>The name of the object to show. For a more complete list of ways to spell object names, see the &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">表示するオブジェクトの名前。オブジェクト名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;の「リビジョンの指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="15cfdda92a704493f44c3f6bda85fdb4fe25cc87" translate="yes" xml:space="preserve">
          <source>The name of the ref (the part after $GIT_DIR/). For a non-ambiguous short name of the ref append &lt;code&gt;:short&lt;/code&gt;. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode. If &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; (&lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt;) is appended, strips &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; slash-separated path components from the front (back) of the refname (e.g. &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). If &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; is a negative number, strip as many path components as necessary from the specified end to leave &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; path components (e.g. &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;tags/foo&lt;/code&gt; and &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; turns &lt;code&gt;refs/tags/foo&lt;/code&gt; into &lt;code&gt;refs&lt;/code&gt;). When the ref does not have enough components, the result becomes an empty string if stripping with positive &amp;lt;N&amp;gt;, or it becomes the full refname if stripping with negative &amp;lt;N&amp;gt;. Neither is an error.</source>
          <target state="translated">参照の名前（$ GIT_DIR /の後の部分）。 refの明確な短い名前の場合は、 &lt;code&gt;:short&lt;/code&gt; を追加します。オプションcore.warnAmbiguousRefsは、厳密な略語モードを選択するために使用されます。もし &lt;code&gt;lstrip=&amp;lt;N&amp;gt;&lt;/code&gt; （ &lt;code&gt;rstrip=&amp;lt;N&amp;gt;&lt;/code&gt; ）追加され、ストリップ &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; もしrefnameの前面（背面）からスラッシュで区切られたパスの成分（例えば &lt;code&gt;%(refname:lstrip=2)&lt;/code&gt; オン &lt;code&gt;refs/tags/foo&lt;/code&gt; &lt;code&gt;foo&lt;/code&gt; および &lt;code&gt;%(refname:rstrip=2)&lt;/code&gt; オン &lt;code&gt;refs/tags/foo&lt;/code&gt; に &lt;code&gt;refs&lt;/code&gt; ）。場合 &lt;code&gt;&amp;lt;N&amp;gt;&lt;/code&gt; は残すために、指定された端部から必要な数のパス成分として負の数、ストリップである &lt;code&gt;-&amp;lt;N&amp;gt;&lt;/code&gt; パスコンポーネント（たとえば、 &lt;code&gt;%(refname:lstrip=-2)&lt;/code&gt; は &lt;code&gt;refs/tags/foo&lt;/code&gt; を &lt;code&gt;tags/foo&lt;/code&gt; に &lt;code&gt;%(refname:rstrip=-1)&lt;/code&gt; 、％（refname：rstrip = -1）は &lt;code&gt;refs/tags/foo&lt;/code&gt; を &lt;code&gt;refs&lt;/code&gt; に変換します）。refに十分なコンポーネントがない場合、正の&amp;lt;N&amp;gt;で削除すると結果は空の文字列になり、負の&amp;lt;N&amp;gt;で削除すると完全なrefnameになります。どちらもエラーではありません。</target>
        </trans-unit>
        <trans-unit id="d3667dc69f3d60260150d30873ae903291e9c610" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being fetched from, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix. In the case of deletion, the name of the remote ref is &quot;(none)&quot;.</source>
          <target state="translated">フェッチされるリモートrefの名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。削除の場合、リモート参照の名前は「（なし）」です。</target>
        </trans-unit>
        <trans-unit id="f1e1380262032f81dbdd04e4a724dd0dac2f66a0" translate="yes" xml:space="preserve">
          <source>The name of the remote ref being updated, minus its &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; prefix.</source>
          <target state="translated">更新されるリモート参照の名前から、その &lt;code&gt;refs/&amp;lt;type&amp;gt;/&lt;/code&gt; プレフィックスを除いたもの。</target>
        </trans-unit>
        <trans-unit id="cf1208454bdf4c7c5a0ab602103e6dd838ca212a" translate="yes" xml:space="preserve">
          <source>The name of the repository in gitweb is the path to its &lt;code&gt;$GIT_DIR&lt;/code&gt; (its object database) relative to &lt;code&gt;$projectroot&lt;/code&gt;. Therefore the repository $repo can be found at &quot;$projectroot/$repo&quot;.</source>
          <target state="translated">gitwebでリポジトリの名前は、そのパスである &lt;code&gt;$GIT_DIR&lt;/code&gt; に対して（そのオブジェクトデータベース） &lt;code&gt;$projectroot&lt;/code&gt; 。したがって、リポジトリ$ repoは &quot;$ projectroot / $ repo&quot;にあります。</target>
        </trans-unit>
        <trans-unit id="1b6cc45302b6351d18e813818cde0845c0a5a22a" translate="yes" xml:space="preserve">
          <source>The name of the tag to create, delete, or describe. The new tag name must pass all checks defined by &lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format[1]&lt;/a&gt;. Some of these checks may restrict the characters allowed in a tag name.</source>
          <target state="translated">作成、削除、または説明するタグの名前。新しいタグ名は、&lt;a href=&quot;git-check-ref-format&quot;&gt;git-check-ref-format [1]で&lt;/a&gt;定義されたすべてのチェックに合格する必要があります。これらのチェックの一部は、タグ名で許可される文字を制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="964fd80a7ebc3b646125e059ac3c7f8c3a22061f" translate="yes" xml:space="preserve">
          <source>The named branches will be interpreted as if specified with the &lt;code&gt;-t&lt;/code&gt; option on the &lt;code&gt;git remote add&lt;/code&gt; command line.</source>
          <target state="translated">名前付きブランチは、 &lt;code&gt;git remote add&lt;/code&gt; コマンドラインの &lt;code&gt;-t&lt;/code&gt; オプションで指定されているかのように解釈されます。</target>
        </trans-unit>
        <trans-unit id="a7226417649eb7c8f42ca4934a290033c08aad1c" translate="yes" xml:space="preserve">
          <source>The names of objects to show (defaults to &lt;code&gt;HEAD&lt;/code&gt;). For a more complete list of ways to spell object names, see &quot;SPECIFYING REVISIONS&quot; section in &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;.</source>
          <target state="translated">表示するオブジェクトの名前（デフォルトは &lt;code&gt;HEAD&lt;/code&gt; ）。オブジェクト名を綴る方法のより完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt;「改訂の指定」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="df439b2df93c9264d2652e8aa379f62f3b6ab5ac" translate="yes" xml:space="preserve">
          <source>The names of refs that are fetched, together with the object names they point at, are written to &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt;. This information may be used by scripts or other git commands, such as &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">フェッチされた参照の名前は、参照先のオブジェクト名とともに、 &lt;code&gt;.git/FETCH_HEAD&lt;/code&gt; に書き込まれます。この情報は、スクリプトまたは他のgitコマンド（&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;など）で使用できます。</target>
        </trans-unit>
        <trans-unit id="1b9c4b549f992b26edb42d00411780a65661d81d" translate="yes" xml:space="preserve">
          <source>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</source>
          <target state="translated">ネイティブトランスポート (つまり git://URL)は認証を行わないので、安全ではないネットワーク上では注意して使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="86d32cda4c46d201605240981feec896fb3daceb" translate="yes" xml:space="preserve">
          <source>The new branch head will point to this commit. It may be given as a branch name, a commit-id, or a tag. If this option is omitted, the current HEAD will be used instead.</source>
          <target state="translated">新しいブランチの先頭はこのコミットを指します。ブランチ名、commit-id、タグのいずれかを指定します。このオプションを省略した場合は、現在の HEAD が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="597e47a48a8bd8b3528838dd5cebedeb7b241f60" translate="yes" xml:space="preserve">
          <source>The new name for an existing branch. The same restrictions as for &amp;lt;branchname&amp;gt; apply.</source>
          <target state="translated">既存のブランチの新しい名前。&amp;lt;branchname&amp;gt;と同じ制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="05a068e20a6ba11ea4fd1dbaef65a93e78041978" translate="yes" xml:space="preserve">
          <source>The new stash entry records the modified states only for the files that match the pathspec. The index entries and working tree files are then rolled back to the state in HEAD only for these files, too, leaving files that do not match the pathspec intact.</source>
          <target state="translated">新しいスタッシュエントリは、パス仕様にマッチしたファイルに対してのみ、変更された状態を記録します。インデックスエントリと作業ツリーファイルは、パス仕様にマッチしないファイルをそのままにして、これらのファイルだけがHEADの状態にロールバックされます。</target>
        </trans-unit>
        <trans-unit id="ade318097a09c67b5bdaa6c1344cf2a281d7cac8" translate="yes" xml:space="preserve">
          <source>The next parameter is the pattern. This option has to be used for patterns starting with &lt;code&gt;-&lt;/code&gt; and should be used in scripts passing user input to grep. Multiple patterns are combined by &lt;code&gt;or&lt;/code&gt;.</source>
          <target state="translated">次のパラメーターはパターンです。このオプションは &lt;code&gt;-&lt;/code&gt; で始まるパターンに使用する必要があり、ユーザー入力をgrepに渡すスクリプトで使用する必要があります。 &lt;code&gt;or&lt;/code&gt; 複数のパターンを組み合わせます。</target>
        </trans-unit>
        <trans-unit id="00f28e3b882b5553d45ceeb08082d3dcda522dd0" translate="yes" xml:space="preserve">
          <source>The next step of merging is to merge these three versions of the file, using 3-way merge. This is done by giving &lt;code&gt;git merge-one-file&lt;/code&gt; command as one of the arguments to &lt;code&gt;git merge-index&lt;/code&gt; command:</source>
          <target state="translated">マージの次のステップは、3方向マージを使用して、これらの3つのバージョンのファイルをマージすることです。これを行うには、 &lt;code&gt;git merge-one-file&lt;/code&gt; コマンドを &lt;code&gt;git merge-index&lt;/code&gt; コマンドの引数の1つとして指定します。</target>
        </trans-unit>
        <trans-unit id="c203649e7405cacf1f66f3229b4d864ccf1b5f34" translate="yes" xml:space="preserve">
          <source>The nonce string the process asked the signer to include in the push certificate. If this does not match the value recorded on the &quot;nonce&quot; header in the push certificate, it may indicate that the certificate is a valid one that is being replayed from a separate &quot;git push&quot; session.</source>
          <target state="translated">プロセスが署名者にプッシュ証明書に含めるよう求めた nonce 文字列。これがプッシュ証明書の &quot;nonce&quot; ヘッダに記録された値と一致しない場合は、その証明書が別の &quot;git push&quot; セッションで再生されたものであることを示している可能性があります。</target>
        </trans-unit>
        <trans-unit id="a81eae6f204563324e9f0299e6e5a18af11339c2" translate="yes" xml:space="preserve">
          <source>The normal format target is a tradition printf format and similar to GIT_TRACE format. This format is enabled with the &lt;code&gt;GIT_TRACE2&lt;/code&gt; environment variable or the &lt;code&gt;trace2.normalTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">通常のフォーマットターゲットは従来のprintfフォーマットであり、GIT_TRACEフォーマットに類似しています。この形式は、 &lt;code&gt;GIT_TRACE2&lt;/code&gt; 環境変数または &lt;code&gt;trace2.normalTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="08867837836724d3f4c3cfbd7d03fa5d964eec62" translate="yes" xml:space="preserve">
          <source>The number of additional commits is the number of commits which would be displayed by &quot;git log v1.0.4..parent&quot;. The hash suffix is &quot;-g&quot; + unambiguous abbreviation for the tip commit of parent (which was &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt;). The &quot;g&quot; prefix stands for &quot;git&quot; and is used to allow describing the version of a software depending on the SCM the software is managed with. This is useful in an environment where people may use different SCMs.</source>
          <target state="translated">追加のコミットの数は、「git log v1.0.4..parent」によって表示されるコミットの数です。ハッシュサフィックスは、 &quot;-g&quot; +親のチップコミットの明確な略語（ &lt;code&gt;2414721b194453f058079d897d13c4e377f92dc6&lt;/code&gt; でした）です。&quot;g&quot;プレフィックスは &quot;git&quot;を表し、ソフトウェアが管理されているSCMに応じて、ソフトウェアのバージョンを説明するために使用されます。これは、人々が異なるSCMを使用する可能性がある環境で役立ちます。</target>
        </trans-unit>
        <trans-unit id="83386653d6009935020ea78a4c28a793cc5fa198" translate="yes" xml:space="preserve">
          <source>The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1.</source>
          <target state="translated">リクエストにまたがって保持する curl セッションの数 (スロットにまたがってカウントされる)。http_cleanup()が起動されるまでは、curl_easy_cleanup()で終了しません。USE_CURL_MULTI が定義されていない場合、この値は 1 に制限されます。 デフォルトは 1 です。</target>
        </trans-unit>
        <trans-unit id="eb593ed0188a165abaa2fc9b58825ac993fcfa11" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">指定しない場合のデフォルトは diff.renameLimit の値です。この設定は、リネーム検出をオフにした場合には何の影響もありません。</target>
        </trans-unit>
        <trans-unit id="b49ca7e6ecad75b8cf0b0ec3dcf469e017a13140" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing rename detection in &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt; and &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. Defaults to the value of diff.renameLimit.</source>
          <target state="translated">&lt;a href=&quot;git-status&quot;&gt;git-status [1]&lt;/a&gt;と&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]で&lt;/a&gt;名前変更の検出を実行するときに考慮するファイルの数。デフォルトはdiff.renameLimitの値です。</target>
        </trans-unit>
        <trans-unit id="62caddb975571c60931b3e5e41910f9ec3dfea6e" translate="yes" xml:space="preserve">
          <source>The number of files to consider when performing the copy/rename detection; equivalent to the &lt;code&gt;git diff&lt;/code&gt; option &lt;code&gt;-l&lt;/code&gt;. This setting has no effect if rename detection is turned off.</source>
          <target state="translated">コピー/名前変更の検出を実行するときに考慮するファイルの数。 &lt;code&gt;git diff&lt;/code&gt; オプション &lt;code&gt;-l&lt;/code&gt; と同等です。名前の変更の検出がオフになっている場合、この設定は効果がありません。</target>
        </trans-unit>
        <trans-unit id="f40a726880d5eda55c8da498a0add02c8ea2a7b1" translate="yes" xml:space="preserve">
          <source>The number of push options given on the command line of &lt;code&gt;git push --push-option=...&lt;/code&gt; can be read from the environment variable &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt;, and the options themselves are found in &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt;, &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt;,&amp;hellip;​ If it is negotiated to not use the push options phase, the environment variables will not be set. If the client selects to use push options, but doesn&amp;rsquo;t transmit any, the count variable will be set to zero, &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git push --push-option=...&lt;/code&gt; のコマンドラインで指定されたプッシュオプションの数は、環境変数 &lt;code&gt;GIT_PUSH_OPTION_COUNT&lt;/code&gt; から読み取ることができ、オプション自体は &lt;code&gt;GIT_PUSH_OPTION_0&lt;/code&gt; 、 &lt;code&gt;GIT_PUSH_OPTION_1&lt;/code&gt; にあります...交渉されていない場合プッシュオプションフェーズを使用すると、環境変数は設定されません。クライアントがプッシュオプションを使用することを選択したが、何も送信しない場合、カウント変数はゼロ（ &lt;code&gt;GIT_PUSH_OPTION_COUNT=0&lt;/code&gt; )に設定されます。</target>
        </trans-unit>
        <trans-unit id="c5ad10bd3ab58adc794f2122271c46d58529bef4" translate="yes" xml:space="preserve">
          <source>The number of spaces between columns. One space by default.</source>
          <target state="translated">列と列の間のスペースの数。デフォルトではスペースは1つです。</target>
        </trans-unit>
        <trans-unit id="911462b0802b22317c5a57a0a0510dbf0c397a66" translate="yes" xml:space="preserve">
          <source>The number of submodules fetched at the same time. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">同時にフェッチされたサブモジュールの数。デフォルトは &lt;code&gt;submodule.fetchJobs&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="34de3b8749bfae0c14ff8d34783f05c9920748b5" translate="yes" xml:space="preserve">
          <source>The object can be a blob or a submodule commit. It implies the &lt;code&gt;-t&lt;/code&gt; option in &lt;code&gt;git-log&lt;/code&gt; to also find trees.</source>
          <target state="translated">オブジェクトはblobまたはサブモジュールコミットにすることができます。これは、 &lt;code&gt;git-log&lt;/code&gt; で &lt;code&gt;-t&lt;/code&gt; オプションを使用してツリーも検索することを意味します。</target>
        </trans-unit>
        <trans-unit id="2794f5933199b4937a09c41b8d049f6b88620c25" translate="yes" xml:space="preserve">
          <source>The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of parent commits.</source>
          <target state="translated">オブジェクトデータベースには、主に 3 つのタイプのオブジェクトが含まれています。ファイルデータを保持する blob、ディレクトリ階層を構築するために blob や他のツリーを指す tree、そしてそれぞれが 1 つのツリーといくつかの数の親コミットを参照する commits です。</target>
        </trans-unit>
        <trans-unit id="b5ea163b65a2243d9fc238d7c50700c517adc350" translate="yes" xml:space="preserve">
          <source>The object database is the rather elegant system used to store the history of your project&amp;mdash;​files, directories, and commits.</source>
          <target state="translated">オブジェクトデータベースは、プロジェクトの履歴（ファイル、ディレクトリ、コミット）を保存するために使用されるかなり洗練されたシステムです。</target>
        </trans-unit>
        <trans-unit id="db080c7937810b605e4381605a2e18077b89e3c0" translate="yes" xml:space="preserve">
          <source>The object name (aka SHA-1). For a non-ambiguous abbreviation of the object name append &lt;code&gt;:short&lt;/code&gt;. For an abbreviation of the object name with desired length append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt;, where the minimum length is MINIMUM_ABBREV. The length may be exceeded to ensure unique object names.</source>
          <target state="translated">オブジェクト名（別名SHA-1）。オブジェクト名の明確な省略形の場合は、 &lt;code&gt;:short&lt;/code&gt; を追加します。必要な長さのオブジェクト名の省略形の場合、append &lt;code&gt;:short=&amp;lt;length&amp;gt;&lt;/code&gt; 。最小長はMINIMUM_ABBREVです。一意のオブジェクト名を確保するために、長さを超える場合があります。</target>
        </trans-unit>
        <trans-unit id="b335d1a75376848bee9affb50a6203b316fcc02d" translate="yes" xml:space="preserve">
          <source>The object referenced by &amp;lt;src&amp;gt; is used to update the &amp;lt;dst&amp;gt; reference on the remote side. Whether this is allowed depends on where in &lt;code&gt;refs/*&lt;/code&gt; the &amp;lt;dst&amp;gt; reference lives as described in detail below, in those sections &quot;update&quot; means any modifications except deletes, which as noted after the next few sections are treated differently.</source>
          <target state="translated">&amp;lt;src&amp;gt;によって参照されるオブジェクトは、リモート側の&amp;lt;dst&amp;gt;参照を更新するために使用されます。これが許可されるかどうかは、 &lt;code&gt;refs/*&lt;/code&gt; のどこに&amp;lt;dst&amp;gt;参照が存在するかによって異なります。これらのセクションでは、「更新」とは、削除以外のすべての変更を意味します。</target>
        </trans-unit>
        <trans-unit id="afdbad7acf93ca3457880eb431fd58ab07141e11" translate="yes" xml:space="preserve">
          <source>The object table is actually a hashtable keyed on the object name (the unique SHA-1). This storage configuration allows fast-import to reuse an existing or already written object and avoid writing duplicates to the output packfile. Duplicate blobs are surprisingly common in an import, typically due to branch merges in the source.</source>
          <target state="translated">オブジェクトテーブルは、実際にはオブジェクト名(一意のSHA-1)をキーにしたハッシュテーブルです。このストレージ構成により、fast-importでは既存または既に書き込まれたオブジェクトを再利用し、出力パックファイルへの重複書き込みを回避することができます。重複したブロブはインポートでは驚くほどよく見られますが、これは一般的にソースのブランチマージが原因です。</target>
        </trans-unit>
        <trans-unit id="0b16e9c4d73790474d293fcd4d96547c235d7d1f" translate="yes" xml:space="preserve">
          <source>The object that the new tag will refer to, usually a commit. Defaults to HEAD.</source>
          <target state="translated">新しいタグが参照するオブジェクト、通常はコミット。デフォルトは HEAD です。</target>
        </trans-unit>
        <trans-unit id="5468420c6f62137502c6bb00574138b237765047" translate="yes" xml:space="preserve">
          <source>The object type may be a blob, representing the contents of a file, or another tree, representing the contents of a subdirectory. Since trees and blobs, like all other objects, are named by the SHA-1 hash of their contents, two trees have the same SHA-1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical. This allows Git to quickly determine the differences between two related tree objects, since it can ignore any entries with identical object names.</source>
          <target state="translated">オブジェクトタイプは、ファイルの内容を表すブロブであったり、サブディレクトリの内容を表す別のツリーであったりします。ツリーや blob は、他のすべてのオブジェクトと同様に内容の SHA-1 ハッシュによって名前が付けられるので、二つのツリーが同じ SHA-1 名を持つのは、その内容 (再帰的に、すべてのサブディレクトリの内容を含む)が同一である場合に限られます。これにより、Git は同じオブジェクト名のエントリを無視することができるので、関連する二つのツリーオブジェクト間の違いを素早く判断することができます。</target>
        </trans-unit>
        <trans-unit id="abf9c48e6cb6157bcc4ecdd7fbfd1167ee2a4bc5" translate="yes" xml:space="preserve">
          <source>The object types in some more detail:</source>
          <target state="translated">オブジェクトの種類をもう少し詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="1aa11fdf087f0d8d0d32eb67b923b0efa29ecf46" translate="yes" xml:space="preserve">
          <source>The objects are output in the order in which they are found in the index file, which should be (in a correctly constructed file) sorted by object id.</source>
          <target state="translated">オブジェクトはインデックスファイルの中で見つかった順番で出力されますが、これは(正しく構築されたファイルでは)オブジェクトIDでソートされているはずです。</target>
        </trans-unit>
        <trans-unit id="113c9617d3615ff46d1de3788621403d384bc970" translate="yes" xml:space="preserve">
          <source>The official repository of the &lt;code&gt;git gui&lt;/code&gt; project can be found at:</source>
          <target state="translated">&lt;code&gt;git gui&lt;/code&gt; プロジェクトの公式リポジトリは次の場所にあります。</target>
        </trans-unit>
        <trans-unit id="d2925f4342d92a06228b4eeddfbffd0ada540f91" translate="yes" xml:space="preserve">
          <source>The one commit in this list that is not related to CMake may very well have been motivated by working on fixing all those bugs introduced by switching to CMake, but it addresses a different concern. To split this branch into two topic branches, the todo list could be edited like this:</source>
          <target state="translated">このリストの中で CMake に関連していないコミットは、CMake への切り替えによって導入されたすべてのバグを修正する作業をすることによって動機づけられたものかもしれませんが、それは別の懸念事項に対応しています。このブランチを 2 つのトピックブランチに分割するには、todo リストを次のように編集します。</target>
        </trans-unit>
        <trans-unit id="680930999bd0e3bf9880124c135a89bca3a329f3" translate="yes" xml:space="preserve">
          <source>The oneline descriptions are purely for your pleasure; &lt;code&gt;git rebase&lt;/code&gt; will not look at them but at the commit names (&quot;deadbee&quot; and &quot;fa1afe1&quot; in this example), so do not delete or edit the names.</source>
          <target state="translated">onelineの説明は、純粋にあなたの喜びのためのものです。 &lt;code&gt;git rebase&lt;/code&gt; はそれらを調べませんが、コミット名（この例では「deadbee」と「fa1afe1」）を見るので、名前を削除または編集しないでください。</target>
        </trans-unit>
        <trans-unit id="b174b5f513a45da66bee660cec63368b38af2a1f" translate="yes" xml:space="preserve">
          <source>The only difference between this command and &lt;a href=&quot;git-blame&quot;&gt;git-blame[1]&lt;/a&gt; is that they use slightly different output formats, and this command exists only for backward compatibility to support existing scripts, and provide a more familiar command name for people coming from other SCM systems.</source>
          <target state="translated">このコマンドと&lt;a href=&quot;git-blame&quot;&gt;git-blame [1]&lt;/a&gt;の唯一の違いは、わずかに異なる出力形式を使用することです。このコマンドは、既存のスクリプトをサポートするための下位互換性のためにのみ存在し、他のSCMシステムから来た人々により馴染みのあるコマンド名を提供します。</target>
        </trans-unit>
        <trans-unit id="90482aceb580582ec33d188b8fb1bca29f8136a1" translate="yes" xml:space="preserve">
          <source>The option can have the following values, defaulting to &lt;code&gt;group&lt;/code&gt; if no value is given:</source>
          <target state="translated">オプションには次の値を指定できます。値を指定しない場合、デフォルトで &lt;code&gt;group&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="72a352b7174eb63582b749d1295b267e0dae9887" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;limit&amp;gt; is useful in cases where your topic is based on other work that is not in upstream. Expanding on the previous example, this might look like:</source>
          <target state="translated">オプションの&amp;lt;limit&amp;gt;は、トピックが上流にない他の作業に基づいている場合に役立ちます。前の例を拡張すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="4136e1c0c625091f77db10ec0b76e55e39fdb1b6" translate="yes" xml:space="preserve">
          <source>The optional &amp;lt;style&amp;gt; argument can be either &lt;code&gt;shallow&lt;/code&gt; or &lt;code&gt;deep&lt;/code&gt;. &lt;code&gt;shallow&lt;/code&gt; threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the &lt;code&gt;--in-reply-to&lt;/code&gt;, and the first patch mail, in this order. &lt;code&gt;deep&lt;/code&gt; threading makes every mail a reply to the previous one.</source>
          <target state="translated">オプションの&amp;lt;style&amp;gt;引数は、 &lt;code&gt;shallow&lt;/code&gt; または &lt;code&gt;deep&lt;/code&gt; です。 &lt;code&gt;shallow&lt;/code&gt; スレッドは、すべてのメールをシリーズのヘッドへの返信にします。ヘッドは、カバーレター、 &lt;code&gt;--in-reply-to&lt;/code&gt; in -reply-to、および最初のパッチメールからこの順序で選択されます。 &lt;code&gt;deep&lt;/code&gt; スレッドは、すべてのメールを前のメールへの返信にします。</target>
        </trans-unit>
        <trans-unit id="3dd98bdacd886ba292b303baaba2ecefebed8bab" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;encoding&lt;/code&gt; command indicates the encoding of the commit message. Most commits are UTF-8 and the encoding is omitted, but this allows importing commit messages into git without first reencoding them.</source>
          <target state="translated">オプションの &lt;code&gt;encoding&lt;/code&gt; コマンドは、コミットメッセージのエンコーディングを示します。ほとんどのコミットはUTF-8であり、エンコードは省略されていますが、これにより、コミットメッセージを最初に再エンコードせずにgitにインポートできます。</target>
        </trans-unit>
        <trans-unit id="f1f596d4ea27770161ef3ea6df226eac8321e34f" translate="yes" xml:space="preserve">
          <source>The optional GPG signature of the tag.</source>
          <target state="translated">タグのオプションのGPG署名。</target>
        </trans-unit>
        <trans-unit id="b0ae75c1b10bf71d7e20ef9926e29585fa74a2e0" translate="yes" xml:space="preserve">
          <source>The optional argument &amp;lt;path&amp;gt; is the relative location for the cloned submodule to exist in the superproject. If &amp;lt;path&amp;gt; is not given, the canonical part of the source repository is used (&quot;repo&quot; for &quot;/path/to/repo.git&quot; and &quot;foo&quot; for &quot;host.xz:foo/.git&quot;). If &amp;lt;path&amp;gt; exists and is already a valid Git repository, then it is staged for commit without cloning. The &amp;lt;path&amp;gt; is also used as the submodule&amp;rsquo;s logical name in its configuration entries unless &lt;code&gt;--name&lt;/code&gt; is used to specify a logical name.</source>
          <target state="translated">オプションの引数&amp;lt;path&amp;gt;は、スーパープロジェクトに存在するクローンサブモジュールの相対場所です。 &amp;lt;path&amp;gt;が指定されていない場合、ソースリポジトリの正規部分が使用されます（ &quot;/path/to/repo.git&quot;の場合は &quot;repo&quot;、 &quot;host.xz：foo / .git&quot;の場合は &quot;foo&quot;）。 &amp;lt;path&amp;gt;が存在し、すでに有効なGitリポジトリである場合は、複製せずにコミットするためにステージングされます。 &lt;code&gt;--name&lt;/code&gt; を使用して論理名を指定しない限り、&amp;lt;path&amp;gt;は、その構成エントリでサブモジュールの論理名としても使用されます。</target>
        </trans-unit>
        <trans-unit id="476c5c2c4870d6be72c4d31b42e1450136c51807" translate="yes" xml:space="preserve">
          <source>The optional configuration variable &lt;code&gt;core.excludesFile&lt;/code&gt; indicates a path to a file containing patterns of file names to exclude, similar to &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;. Patterns in the exclude file are used in addition to those in &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;.</source>
          <target state="translated">オプションの構成変数 &lt;code&gt;core.excludesFile&lt;/code&gt; は、 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; と同様に、除外するファイル名のパターンを含むファイルへのパスを示します。 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; パターンに加えて、除外ファイルのパターンが使用されます。</target>
        </trans-unit>
        <trans-unit id="ad80c43bd988ae6e6061dfab8a056d2afaee7691" translate="yes" xml:space="preserve">
          <source>The options &lt;code&gt;--contains&lt;/code&gt;, &lt;code&gt;--no-contains&lt;/code&gt;, &lt;code&gt;--merged&lt;/code&gt; and &lt;code&gt;--no-merged&lt;/code&gt; serve four related but different purposes:</source>
          <target state="translated">オプション &lt;code&gt;--contains&lt;/code&gt; 、 &lt;code&gt;--no-contains&lt;/code&gt; no -contains、-- &lt;code&gt;--merged&lt;/code&gt; 、および &lt;code&gt;--no-merged&lt;/code&gt; は、4つの関連する異なる目的を果たします。</target>
        </trans-unit>
        <trans-unit id="081a3bdc8213b4774c97cebf32978af69c3476cb" translate="yes" xml:space="preserve">
          <source>The order of stages 1, 2 and 3 (hence the order of three &amp;lt;tree-ish&amp;gt; command-line arguments) are significant when you start a 3-way merge with an index file that is already populated. Here is an outline of how the algorithm works:</source>
          <target state="translated">ステージ1、2、3の順序（したがって、3つの&amp;lt;tree-ish&amp;gt;コマンドライン引数の順序）は、すでに入力されているインデックスファイルで3方向マージを開始するときに重要です。アルゴリズムの仕組みの概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3fb57cf5101f783ba73fc6eba17ed42ef2940627" translate="yes" xml:space="preserve">
          <source>The order of the flags used to matter, but not anymore.</source>
          <target state="translated">以前は旗の順番が重要だったが、今は違う。</target>
        </trans-unit>
        <trans-unit id="32a54a6aa8ff67e3d76c47c6fabd2affc1e5cbb5" translate="yes" xml:space="preserve">
          <source>The origin of lines is automatically followed across whole-file renames (currently there is no option to turn the rename-following off). To follow lines moved from one file to another, or to follow lines that were copied and pasted from another file, etc., see the &lt;code&gt;-C&lt;/code&gt; and &lt;code&gt;-M&lt;/code&gt; options.</source>
          <target state="translated">行の起点は、ファイル全体の名前変更全体で自動的に追跡されます（現在、名前変更フォローをオフにするオプションはありません）。あるファイルから別のファイルに移動した行を追跡したり、別のファイルからコピーして貼り付けた行を追跡したりするには、 &lt;code&gt;-C&lt;/code&gt; および &lt;code&gt;-M&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b66619a4ae8f145d6aac4431781b08d6ac86597a" translate="yes" xml:space="preserve">
          <source>The origin revision can be changed with the &quot;--origin&quot; option.</source>
          <target state="translated">オリジンリビジョンは&quot;--origin &quot;オプションで変更できます。</target>
        </trans-unit>
        <trans-unit id="617fe8d1d55cfe9ccc09f76fcfa190410b239da3" translate="yes" xml:space="preserve">
          <source>The original format used by Greg Kroah-Hartman&amp;rsquo;s &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; script</source>
          <target state="translated">Greg Kroah-Hartmanの &lt;code&gt;send_lots_of_email.pl&lt;/code&gt; スクリプトで使用される元の形式</target>
        </trans-unit>
        <trans-unit id="a7a5cdcdcd4d6fcaaf02e53acebd8443c9b015da" translate="yes" xml:space="preserve">
          <source>The original job of &lt;code&gt;git rev-parse&lt;/code&gt; is now taken by the function &lt;code&gt;setup_revisions()&lt;/code&gt;, which parses the revisions and the common command-line options for the revision walker. This information is stored in the struct &lt;code&gt;rev_info&lt;/code&gt; for later consumption. You can do your own command-line option parsing after calling &lt;code&gt;setup_revisions()&lt;/code&gt;. After that, you have to call &lt;code&gt;prepare_revision_walk()&lt;/code&gt; for initialization, and then you can get the commits one by one with the function &lt;code&gt;get_revision()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;git rev-parse&lt;/code&gt; の元のジョブは現在、関数 &lt;code&gt;setup_revisions()&lt;/code&gt; によって行われ、リビジョンとリビジョンウォーカーの一般的なコマンドラインオプションを解析します。この情報は、後で使用できるように &lt;code&gt;rev_info&lt;/code&gt; に格納されます。 &lt;code&gt;setup_revisions()&lt;/code&gt; を呼び出した後、独自のコマンドラインオプション解析を行うことができます。その後、初期化のために &lt;code&gt;prepare_revision_walk()&lt;/code&gt; を呼び出す必要があります。その後、関数 &lt;code&gt;get_revision()&lt;/code&gt; を使用してコミットを1つずつ取得できます。</target>
        </trans-unit>
        <trans-unit id="4c9da327e28b59015cec84abd98a33aec635328d" translate="yes" xml:space="preserve">
          <source>The original tags are not deleted, but can be overwritten; use &quot;--tag-name-filter cat&quot; to simply update the tags. In this case, be very careful and make sure you have the old tags backed up in case the conversion has run afoul.</source>
          <target state="translated">元のタグは削除されませんが、上書きすることができます;&quot;--tag-name-filter cat &quot;を使用して、単純にタグを更新します。この場合、非常に注意して、変換が失敗した場合に備えて古いタグをバックアップしておくことを確認してください。</target>
        </trans-unit>
        <trans-unit id="6c2cf73d4477ea65ac2368f08dedbcc07c9eafb4" translate="yes" xml:space="preserve">
          <source>The other nice thing with test suites, is that when you have one, you already know how to test for bad behavior. So you can use this knowledge to create a new test case for &quot;git bisect&quot; when it appears that there is a regression. So it will be easier to bisect the bug and fix it. And then you can add the test case you just created to your test suite.</source>
          <target state="translated">テストスイートのもうひとつの良いところは、テストスイートを持っているときには、悪い動作をテストする方法をすでに知っているということです。その知識を使って、リグレッションが発生したときに &quot;git bisect&quot; 用の新しいテストケースを作成することができます。そうすれば、バグをbisectして修正するのが簡単になります。そして、作成したテストケースをテストスイートに追加することができます。</target>
        </trans-unit>
        <trans-unit id="94bda500b4b5c47f0218909469e6ab7f1eee52b6" translate="yes" xml:space="preserve">
          <source>The other way to drive the bisection process is to tell &quot;git bisect&quot; to launch a script or command at each bisection step to know if the current commit is &quot;good&quot; or &quot;bad&quot;. To do that, we use the &quot;git bisect run&quot; command. For example:</source>
          <target state="translated">もうひとつのバイセクション処理を駆動させる方法は、&quot;git bisect&quot; にバイセクションの各ステップでスクリプトやコマンドを起動させ、現在のコミットが &quot;good&quot; か &quot;bad&quot; かを知るように指示することです。そのためには、&quot;git bisect run&quot; コマンドを使います。例えば、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="013b9f528101f55f667633859403afae697697c4" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable (see below). If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">出力形式は、マシンが解析できるように変更されています（以下を参照）。 &lt;code&gt;--stdin&lt;/code&gt; も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="4ebdc78d172a0b82e38a898aa2ae716344def4d5" translate="yes" xml:space="preserve">
          <source>The output format is modified to be machine-parsable. If &lt;code&gt;--stdin&lt;/code&gt; is also given, input paths are separated with a NUL character instead of a linefeed character.</source>
          <target state="translated">出力形式は、マシンが解析できるように変更されています。 &lt;code&gt;--stdin&lt;/code&gt; も指定されている場合、入力パスは改行文字ではなくNUL文字で区切られます。</target>
        </trans-unit>
        <trans-unit id="885a3d9b027501a3f7ddd2554d827f984cacfcf5" translate="yes" xml:space="preserve">
          <source>The output format is similar to the Porcelain format, but it does not contain the actual lines from the file that is being annotated.</source>
          <target state="translated">出力フォーマットは Porcelain フォーマットに似ていますが、注釈を付けようとしているファイルの実際の行は含まれていません。</target>
        </trans-unit>
        <trans-unit id="16ca2e6d144e9c4d47f91cfe57ded6c4b6f874af" translate="yes" xml:space="preserve">
          <source>The output from this command is designed to be used as a commit template comment. The default, long format, is designed to be human readable, verbose and descriptive. Its contents and format are subject to change at any time.</source>
          <target state="translated">このコマンドの出力は、コミットテンプレートのコメントとして使用するように設計されています。デフォルトの長いフォーマットは、人間が読みやすく、冗長で説明的なものになるように設計されています。その内容と形式はいつでも変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="467b04ab4f0f42e5eb4db50995625d7a06a04bbc" translate="yes" xml:space="preserve">
          <source>The output is in the format: &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">出力は、 &lt;code&gt;&amp;lt;SHA-1 ID&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;reference name&amp;gt;&lt;/code&gt; という形式です。</target>
        </trans-unit>
        <trans-unit id="297e105083265b9b5df9c784faa30006468bc5fd" translate="yes" xml:space="preserve">
          <source>The output is of the form: &amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</source>
          <target state="translated">出力の形式は次のとおりです。&amp;lt;path&amp;gt; COLON SP &amp;lt;attribute&amp;gt; COLON SP &amp;lt;info&amp;gt; LF</target>
        </trans-unit>
        <trans-unit id="00d47eecfb8e7c432b9a2a4461da0aa0b0a14445" translate="yes" xml:space="preserve">
          <source>The output is the new tag&amp;rsquo;s &amp;lt;object&amp;gt; identifier.</source>
          <target state="translated">出力は、新しいタグの&amp;lt;object&amp;gt;識別子です。</target>
        </trans-unit>
        <trans-unit id="c209f5f99a30592095be06f60778bfc6143218e8" translate="yes" xml:space="preserve">
          <source>The output of &quot;git fetch&quot; depends on the transport method used; this section describes the output when fetching over the Git protocol (either locally or via ssh) and Smart HTTP protocol.</source>
          <target state="translated">ここでは、Git プロトコル (ローカルまたは ssh 経由)および Smart HTTP プロトコルでフェッチした場合の出力について説明します。</target>
        </trans-unit>
        <trans-unit id="249df455a76d6d8a4ee813f24ba8c68836888f67" translate="yes" xml:space="preserve">
          <source>The output of &quot;git push&quot; depends on the transport method used; this section describes the output when pushing over the Git protocol (either locally or via ssh).</source>
          <target state="translated">git push&quot; の出力は、使用するトランスポート方法に依存します。ここでは、Git プロトコルでプッシュしたときの出力について説明します (ローカルでも ssh 経由でも)。</target>
        </trans-unit>
        <trans-unit id="2012a50a7ce95c41c81b087cc42352c50e07741b" translate="yes" xml:space="preserve">
          <source>The output of ls-refs is as follows:</source>
          <target state="translated">ls-refs の出力は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c9897264787fe814346af61567793268dae2ec95" translate="yes" xml:space="preserve">
          <source>The output of the &lt;code&gt;range-diff&lt;/code&gt; command is subject to change. It is intended to be human-readable porcelain output, not something that can be used across versions of Git to get a textually stable &lt;code&gt;range-diff&lt;/code&gt; (as opposed to something like the &lt;code&gt;--stable&lt;/code&gt; option to &lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id[1]&lt;/a&gt;). There&amp;rsquo;s also no equivalent of &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt; for &lt;code&gt;range-diff&lt;/code&gt;, the output is not intended to be machine-readable.</source>
          <target state="translated">&lt;code&gt;range-diff&lt;/code&gt; コマンドの出力は変更される可能性があります。人間が読める磁器の出力であることが意図されており、Gitのバージョン間でテキスト的に安定した &lt;code&gt;range-diff&lt;/code&gt; を取得するために使用できるものではありません（&lt;a href=&quot;git-patch-id&quot;&gt;git-patch-id [1]&lt;/a&gt;の &lt;code&gt;--stable&lt;/code&gt; オプションのようなものとは対照的） 。のは同等もありません&lt;a href=&quot;git-apply&quot;&gt;[1]-適用のgit&lt;/a&gt;のための &lt;code&gt;range-diff&lt;/code&gt; 、出力は機械可読であることを意図したものではありません。</target>
        </trans-unit>
        <trans-unit id="acccdb81223db3ebfe60a727e12d9a4ed87719fe" translate="yes" xml:space="preserve">
          <source>The output order is determined by the order of glob patterns in &amp;lt;orderfile&amp;gt;. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order.</source>
          <target state="translated">出力順序は、&amp;lt;orderfile&amp;gt;内のglobパターンの順序によって決まります。最初のパターンに一致するパス名を持つすべてのファイルが最初に出力され、2番目のパターン（最初ではない）に一致するパス名を持つすべてのファイルが次に出力されます。すべてのパターンに一致しないパス名を持つすべてのファイルは、ファイルの最後に暗黙的なすべて一致パターンがあるかのように、最後に出力されます。複数のパス名が同じランクを持っている場合（それらは同じパターンに一致しますが、以前のパターンには一致しません）、互いに対するそれらの出力順序は通常の順序です。</target>
        </trans-unit>
        <trans-unit id="70ec2e58d64c53608a589a3f892a41e430e23c0e" translate="yes" xml:space="preserve">
          <source>The overall time needed to compute this algorithm is the time needed to compute n+m commit diffs and then n*m diffs of patches, plus the time needed to compute the least-cost assignment between n and m diffs. Git uses an implementation of the Jonker-Volgenant algorithm to solve the assignment problem, which has cubic runtime complexity. The matching found in this case will look like this:</source>
          <target state="translated">このアルゴリズムを計算するのに必要な全体的な時間は、n+m 個のコミット差分を計算してから n*m 個のパッチ差分を計算するのに必要な時間に加えて、n 個の差分と m 個の差分の間で最小コストの代入を計算するのに必要な時間を加えたものです。Git はこの代入問題を解くために Jonker-Volgenant アルゴリズムの実装を使用しています。この場合に見つかったマッチングは次のようになります。</target>
        </trans-unit>
        <trans-unit id="f8c05a901b25f6434301621f82a267dcb0caae54" translate="yes" xml:space="preserve">
          <source>The p4 changes will be created as the user invoking &lt;code&gt;git p4 submit&lt;/code&gt;. The &lt;code&gt;--preserve-user&lt;/code&gt; option will cause ownership to be modified according to the author of the Git commit. This option requires admin privileges in p4, which can be granted using &lt;code&gt;p4 protect&lt;/code&gt;.</source>
          <target state="translated">ユーザーが &lt;code&gt;git p4 submit&lt;/code&gt; を呼び出すと、p4の変更が作成されます。 &lt;code&gt;--preserve-user&lt;/code&gt; オプションは、コミットのGitの作者によると、所有権が変更されます。このオプションには、p4での管理者権限が必要です。これは、 &lt;code&gt;p4 protect&lt;/code&gt; を使用して付与できます。</target>
        </trans-unit>
        <trans-unit id="bc53387773cbb38b899a330a03a788e5288eab48" translate="yes" xml:space="preserve">
          <source>The p4 client specification is maintained with the &lt;code&gt;p4 client&lt;/code&gt; command and contains among other fields, a View that specifies how the depot is mapped into the client repository. The &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;sync&lt;/code&gt; commands can consult the client spec when given the &lt;code&gt;--use-client-spec&lt;/code&gt; option or when the useClientSpec variable is true. After &lt;code&gt;git p4 clone&lt;/code&gt;, the useClientSpec variable is automatically set in the repository configuration file. This allows future &lt;code&gt;git p4 submit&lt;/code&gt; commands to work properly; the submit command looks only at the variable and does not have a command-line option.</source>
          <target state="translated">p4 client仕様は &lt;code&gt;p4 client&lt;/code&gt; コマンドで維持され、他のフィールドの中で、デポがクライアントリポジトリにどのようにマップされるかを指定するビューを含みます。 &lt;code&gt;clone&lt;/code&gt; と &lt;code&gt;sync&lt;/code&gt; 与えられたときのコマンドは、クライアントの仕様に相談することができます &lt;code&gt;--use-client-spec&lt;/code&gt; オプションまたはときuseClientSpec変数が真であるが。後 &lt;code&gt;git p4 clone&lt;/code&gt; 、useClientSpec変数は自動的にリポジトリの設定ファイルに設定されています。これにより、将来の &lt;code&gt;git p4 submit&lt;/code&gt; コマンドが正しく機能するようになります。 submitコマンドは変数のみを調べ、コマンドラインオプションはありません。</target>
        </trans-unit>
        <trans-unit id="9fec68b06723905b09b9270262e6a13c1b490876" translate="yes" xml:space="preserve">
          <source>The p4 depot path argument to &lt;code&gt;git p4 sync&lt;/code&gt; and &lt;code&gt;git p4 clone&lt;/code&gt; can be one or more space-separated p4 depot paths, with an optional p4 revision specifier on the end:</source>
          <target state="translated">&lt;code&gt;git p4 sync&lt;/code&gt; および &lt;code&gt;git p4 clone&lt;/code&gt; のp4デポパス引数は、スペースで区切られた1つ以上のp4デポパスにすることができ、最後にオプションのp4リビジョン指定子を使用できます。</target>
        </trans-unit>
        <trans-unit id="d877dea1de89fdb5a15efd47a5debfe5403b96f4" translate="yes" xml:space="preserve">
          <source>The pack-indexes (.idx files) remain in the pack directory so we can delete the MIDX file, set core.midx to false, or downgrade without any loss of information.</source>
          <target state="translated">パックディレクトリにはパックインデックス(.idxファイル)が残っているので、MIDXファイルを削除したり、core.midxをfalseにしたり、ダウングレードしても情報を失うことはありません。</target>
        </trans-unit>
        <trans-unit id="933f30be1e83e4fe09dc8528b693f5b5a75f065d" translate="yes" xml:space="preserve">
          <source>The packed archive format (.pack) is designed to be self-contained so that it can be unpacked without any further information. Therefore, each object that a delta depends upon must be present within the pack.</source>
          <target state="translated">パックされたアーカイブフォーマット(.pack)は、それ以上の情報がなくても解凍できるように、自己完結型に設計されています。したがって、デルタが依存する各オブジェクトはパック内に存在しなければなりません。</target>
        </trans-unit>
        <trans-unit id="75cd7427877d4a48fded775aaaba114771e37304" translate="yes" xml:space="preserve">
          <source>The packfile(s) created by fast-import do not encourage good disk access patterns. This is caused by fast-import writing the data in the order it is received on standard input, while Git typically organizes data within packfiles to make the most recent (current tip) data appear before historical data. Git also clusters commits together, speeding up revision traversal through better cache locality.</source>
          <target state="translated">fast-import で作成されたパックファイルは、ディスクアクセスのパターンが良くありません。これは、fast-import が標準入力で受け取った順にデータを書き込むのに対し、Git は一般的にパックファイル内でデータを整理し、最新の (現在の)データが過去のデータの前に表示されるようにしているためです。また、Git はコミットをまとめてクラスター化し、キャッシュの位置関係を改善することでリビジョンの移動を高速化しています。</target>
        </trans-unit>
        <trans-unit id="73715b9a828b5f7ca9623cd366d376d487c8e126" translate="yes" xml:space="preserve">
          <source>The partial clone feature records special &quot;promisor&quot; packs that may point to objects that are not stored locally, but available on request to a server. The multi-pack-index does not currently track these promisor packs.</source>
          <target state="translated">パーシャルクローン機能は、ローカルに保存されていないが、サーバーへのリクエストに応じて利用可能なオブジェクトを指す可能性のある特別な「プロミザ」パックを記録します。multi-pack-indexは現在、これらのプロモーターパックを追跡していません。</target>
        </trans-unit>
        <trans-unit id="608e992a19f0287b5b2e4cbdc92416d882bd253c" translate="yes" xml:space="preserve">
          <source>The password to use when logging in to the server.</source>
          <target state="translated">サーバーにログインする際に使用するパスワードです。</target>
        </trans-unit>
        <trans-unit id="f899bc9ba76fee3c960f01f1f955c5a4bf020e98" translate="yes" xml:space="preserve">
          <source>The patch extracted from e-mail.</source>
          <target state="translated">メールから抽出したパッチ。</target>
        </trans-unit>
        <trans-unit id="621265bbad5d0651c63283720f8a5ccddfdeeb61" translate="yes" xml:space="preserve">
          <source>The patch is expected to be inline, directly following the message. Any line that is of the form:</source>
          <target state="translated">パッチは、メッセージの直後にあるインラインであることが期待されます。形式のものであれば、どの行でも</target>
        </trans-unit>
        <trans-unit id="eedf9ed2547b7a76bcd6fb69785bf954af8d224f" translate="yes" xml:space="preserve">
          <source>The patch itself does not apply cleanly. That is &lt;code&gt;bad&lt;/code&gt; but does not have much to do with your MUA. You might want to rebase the patch with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; before regenerating it in this case.</source>
          <target state="translated">パッチ自体はきれいに適用されません。それは &lt;code&gt;bad&lt;/code&gt; ことですが、MUAとはあまり関係がありません。この場合、パッチを再生成する前に、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]を使用&lt;/a&gt;してパッチをリベースすることができます。</target>
        </trans-unit>
        <trans-unit id="c9ecbf09d9172bac5285d567a6e1031058a01024" translate="yes" xml:space="preserve">
          <source>The patch produced by &lt;code&gt;git format-patch&lt;/code&gt; is in UNIX mailbox format, with a fixed &quot;magic&quot; time stamp to indicate that the file is output from format-patch rather than a real mailbox, like so:</source>
          <target state="translated">&lt;code&gt;git format-patch&lt;/code&gt; によって生成されたパッチはUNIXメールボックス形式であり、ファイルが実際のメールボックスではなくformat-patchから出力されることを示すために、次のように「マジック」タイムスタンプが固定されています。</target>
        </trans-unit>
        <trans-unit id="7072603eb0a607d061c366f3e4a9cba6cffbd377" translate="yes" xml:space="preserve">
          <source>The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the &quot;DESCRIPTION&quot; section of &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;).</source>
          <target state="translated">パスは絶対パスでも相対パスでもかまいません。相対パスは、フックが実行されるディレクトリからの相対パスと見なされます（&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;の「説明」セクションを参照）。</target>
        </trans-unit>
        <trans-unit id="6ccace0f35f0f4e5cab0e8cffbdf924135579b2e" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;false&quot;; this is specified by listing the name of the attribute prefixed with a dash &lt;code&gt;-&lt;/code&gt; in the attribute list.</source>
          <target state="translated">パスには、特別な値「false」の属性があります。これは、属性リストにダッシュ &lt;code&gt;-&lt;/code&gt; が前に付いた属性の名前をリストすることによって指定されます。</target>
        </trans-unit>
        <trans-unit id="96cc920a42ed7b296307f756480841c1366430ee" translate="yes" xml:space="preserve">
          <source>The path has the attribute with special value &quot;true&quot;; this is specified by listing only the name of the attribute in the attribute list.</source>
          <target state="translated">パスは特別な値 &quot;true &quot;を持つ属性を持っています;これは、属性リストに属性名のみをリストアップすることで指定されます。</target>
        </trans-unit>
        <trans-unit id="f3d259c7dde8e69cba5e131da2dcac58054c5102" translate="yes" xml:space="preserve">
          <source>The path has the attribute with specified string value; this is specified by listing the name of the attribute followed by an equal sign &lt;code&gt;=&lt;/code&gt; and its value in the attribute list.</source>
          <target state="translated">パスには、指定された文字列値を持つ属性があります。これは、属性名の後に等号 &lt;code&gt;=&lt;/code&gt; とその値を属性リストにリストすることによって指定されます。</target>
        </trans-unit>
        <trans-unit id="9a89a340b481b20bfabef5b1bcb5482c1e173e57" translate="yes" xml:space="preserve">
          <source>The path to a list of object names (i.e. one unabbreviated SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. On versions of Git 2.20 and later comments (&lt;code&gt;#&lt;/code&gt;), empty lines, and any leading and trailing whitespace is ignored. Everything but a SHA-1 per line will error out on older versions.</source>
          <target state="translated">致命的ではない方法で壊れていることがわかっているため無視する必要があるオブジェクト名のリスト（つまり、1行に1つの省略されていないSHA-1）へのパス。Git 2.20以降のバージョンのコメント（ &lt;code&gt;#&lt;/code&gt; ）では、空の行、および先頭と末尾の空白は無視されます。古いバージョンでは、1行あたりのSHA-1以外はすべてエラーになります。</target>
        </trans-unit>
        <trans-unit id="66bacdcfb6546645ce51a1173beecea036fe198b" translate="yes" xml:space="preserve">
          <source>The path to higher software quality is significantly improved software testing.</source>
          <target state="translated">ソフトウェアの品質向上への道は、ソフトウェアのテストを大幅に改善しています。</target>
        </trans-unit>
        <trans-unit id="a62f8e77f19dbb91947274f4224d3b2000deceef" translate="yes" xml:space="preserve">
          <source>The path with which the credential will be used. E.g., for accessing a remote https repository, this will be the repository&amp;rsquo;s path on the server.</source>
          <target state="translated">資格情報が使用されるパス。たとえば、リモートhttpsリポジトリにアクセスする場合、これはサーバー上のリポジトリのパスになります。</target>
        </trans-unit>
        <trans-unit id="75a6542b84624c1ec2a2753cb02bac2dc12deb38" translate="yes" xml:space="preserve">
          <source>The path within the &amp;lt;repository&amp;gt; that the action is performed on, for those actions that require it.</source>
          <target state="translated">アクションが実行される&amp;lt;repository&amp;gt;内のパス。</target>
        </trans-unit>
        <trans-unit id="42c5355b2496aa717e00373f3c96e2614e271309" translate="yes" xml:space="preserve">
          <source>The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see &lt;code&gt;curl(1)&lt;/code&gt;). NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set.</source>
          <target state="translated">以前に保存されたcookie行を含むファイルのパス名。サーバーと一致する場合、Git httpセッションで使用する必要があります。Cookieを読み取るファイルのファイル形式は、プレーンHTTPヘッダーまたはNetscape / Mozilla Cookieファイル形式である必要があります（ &lt;code&gt;curl(1)&lt;/code&gt; を参照）。http.cookieFileで指定されたファイルは、http.saveCookiesが設定されていない限り、入力としてのみ使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7529cc524422963391df3cb62b329f757e09e898" translate="yes" xml:space="preserve">
          <source>The pathname of a file that stores a client certificate to use to authenticate with an HTTPS proxy. Can be overridden by the &lt;code&gt;GIT_PROXY_SSL_CERT&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPSプロキシでの認証に使用するクライアント証明書を格納するファイルのパス名。 &lt;code&gt;GIT_PROXY_SSL_CERT&lt;/code&gt; 環境変数でオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="5cd72157b1a828f8662a88c728954dfe8fd532c2" translate="yes" xml:space="preserve">
          <source>The pathname of a file that stores a private key to use to authenticate with an HTTPS proxy. Can be overridden by the &lt;code&gt;GIT_PROXY_SSL_KEY&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPSプロキシでの認証に使用する秘密鍵を格納するファイルのパス名。 &lt;code&gt;GIT_PROXY_SSL_KEY&lt;/code&gt; 環境変数でオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="cdb891f79fbec881d22446bf8cf74ef0a3e451e0" translate="yes" xml:space="preserve">
          <source>The paths mentioned in the output, unlike many other Git commands, are made relative to the current directory if you are working in a subdirectory (this is on purpose, to help cutting and pasting). See the status.relativePaths config option below.</source>
          <target state="translated">出力に記載されているパスは、他の多くの Git コマンドとは異なり、サブディレクトリで作業をしている場合はカレントディレクトリからの相対パスになります (これは、カットアンドペーストを容易にするためです)。以下の status.relativePaths 設定オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="ae851010ea42ad696931dec57e7a58d6d0655b81" translate="yes" xml:space="preserve">
          <source>The pathspecs are used to limit the world diff operates in. They remove the filepairs outside the specified sets of pathnames. E.g. If the input set of filepairs included:</source>
          <target state="translated">pathspecs は diff が動作する世界を制限するために使用されます。指定されたパス名のセットの外にあるファイルペアを削除します。例えば、入力ファイルペアが含まれている場合。</target>
        </trans-unit>
        <trans-unit id="a35fe6e03b5cf8e686f61a60362e87d3cf937722" translate="yes" xml:space="preserve">
          <source>The pattern &quot;foo/*&quot;, matches &quot;foo/test.json&quot; (a regular file), &quot;foo/bar&quot; (a directory), but it does not match &quot;foo/bar/hello.c&quot; (a regular file), as the asterisk in the pattern does not match &quot;bar/hello.c&quot; which has a slash in it.</source>
          <target state="translated">パターン &quot;foo/*&quot; は、&quot;foo/test.json&quot; (通常のファイル)、&quot;foo/bar&quot; (ディレクトリ)にマッチしますが、&quot;foo/bar/hello.c&quot; (通常のファイル)にはマッチしません。</target>
        </trans-unit>
        <trans-unit id="472a6ff8d8e6e0153adf76e5ad83f89df7215b9f" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;doc/frotz&lt;/code&gt; and &lt;code&gt;/doc/frotz&lt;/code&gt; have the same effect in any &lt;code&gt;.gitignore&lt;/code&gt; file. In other words, a leading slash is not relevant if there is already a middle slash in the pattern.</source>
          <target state="translated">パターン &lt;code&gt;doc/frotz&lt;/code&gt; および &lt;code&gt;/doc/frotz&lt;/code&gt; は、どの &lt;code&gt;.gitignore&lt;/code&gt; ファイルでも同じ効果があります。つまり、パターンの途中にスラッシュがすでにある場合は、先頭のスラッシュは関係ありません。</target>
        </trans-unit>
        <trans-unit id="7f3e3da749b8fed6cc11585c7aa5dbe77eee53ad" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;foo/&lt;/code&gt; will match a directory &lt;code&gt;foo&lt;/code&gt; and paths underneath it, but will not match a regular file or a symbolic link &lt;code&gt;foo&lt;/code&gt; (this is consistent with the way how pathspec works in general in Git)</source>
          <target state="translated">パターン &lt;code&gt;foo/&lt;/code&gt; は、ディレクトリ &lt;code&gt;foo&lt;/code&gt; およびその下のパスに一致しますが、通常のファイルまたはシンボリックリンク &lt;code&gt;foo&lt;/code&gt; には一致しません（これは、Gitでのpathspecの一般的な動作方法と一致しています）</target>
        </trans-unit>
        <trans-unit id="32166ee916b00891724c1bd52223b5e1e2d10da0" translate="yes" xml:space="preserve">
          <source>The pattern &lt;code&gt;hello.*&lt;/code&gt; matches any file or folder whose name begins with &lt;code&gt;hello&lt;/code&gt;. If one wants to restrict this only to the directory and not in its subdirectories, one can prepend the pattern with a slash, i.e. &lt;code&gt;/hello.*&lt;/code&gt;; the pattern now matches &lt;code&gt;hello.txt&lt;/code&gt;, &lt;code&gt;hello.c&lt;/code&gt; but not &lt;code&gt;a/hello.java&lt;/code&gt;.</source>
          <target state="translated">パターン &lt;code&gt;hello.*&lt;/code&gt; 、名前が &lt;code&gt;hello&lt;/code&gt; で始まるすべてのファイルまたはフォルダーに一致します。これをサブディレクトリではなくディレクトリのみに制限したい場合は、パターンの前にスラッシュを &lt;code&gt;/hello.*&lt;/code&gt; ことができます。つまり、/hello . *です。パターンは &lt;code&gt;hello.txt&lt;/code&gt; 、 &lt;code&gt;hello.c&lt;/code&gt; に一致しますが、 &lt;code&gt;a/hello.java&lt;/code&gt; には一致しません。</target>
        </trans-unit>
        <trans-unit id="b35cb663783a3682a66157f3dc9fd508efdfceba" translate="yes" xml:space="preserve">
          <source>The pattern can contain standard globbing wildcards and two additional ones, &lt;code&gt;**/&lt;/code&gt; and &lt;code&gt;/**&lt;/code&gt;, that can match multiple path components. Please refer to &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt; for details. For convenience:</source>
          <target state="translated">パターンには、標準のグロビングワイルドカードと、複数のパスコンポーネントに一致する2つの追加の &lt;code&gt;**/&lt;/code&gt; および &lt;code&gt;/**&lt;/code&gt; を含めることができます。詳細は&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;を参照してください。便宜上：</target>
        </trans-unit>
        <trans-unit id="ae88d32c3f9079756948f2fdc8ae4c4c2e834b93" translate="yes" xml:space="preserve">
          <source>The patterns given should not begin with &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, or &lt;code&gt;refs/remotes&lt;/code&gt; when applied to &lt;code&gt;--branches&lt;/code&gt;, &lt;code&gt;--tags&lt;/code&gt;, or &lt;code&gt;--remotes&lt;/code&gt;, respectively, and they must begin with &lt;code&gt;refs/&lt;/code&gt; when applied to &lt;code&gt;--glob&lt;/code&gt; or &lt;code&gt;--all&lt;/code&gt;. If a trailing &lt;code&gt;/*&lt;/code&gt; is intended, it must be given explicitly.</source>
          <target state="translated">指定されたパターンは、それぞれ &lt;code&gt;--branches&lt;/code&gt; 、-- &lt;code&gt;--tags&lt;/code&gt; 、または &lt;code&gt;--remotes&lt;/code&gt; に適用される場合、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、または &lt;code&gt;refs/remotes&lt;/code&gt; で始まる必要がなく、-- &lt;code&gt;--glob&lt;/code&gt; に適用される場合は &lt;code&gt;refs/&lt;/code&gt; 始まる必要がありますまたは &lt;code&gt;--all&lt;/code&gt; 。末尾の &lt;code&gt;/*&lt;/code&gt; が意図されている場合は、明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="86b0de7f6b1176e8c07c5aaa523447c3abd4915b" translate="yes" xml:space="preserve">
          <source>The performance format target (PERF) is a column-based format to replace GIT_TRACE_PERFORMANCE and is suitable for development and testing, possibly to complement tools like gprof. This format is enabled with the &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; environment variable or the &lt;code&gt;trace2.perfTarget&lt;/code&gt; system or global config setting.</source>
          <target state="translated">パフォーマンスフォーマットターゲット（PERF）は、GIT_TRACE_PERFORMANCEに代わる列ベースのフォーマットであり、おそらくgprofなどのツールを補完するための開発およびテストに適しています。この形式は、 &lt;code&gt;GIT_TRACE2_PERF&lt;/code&gt; 環境変数または &lt;code&gt;trace2.perfTarget&lt;/code&gt; システムまたはグローバル構成設定で有効になります。</target>
        </trans-unit>
        <trans-unit id="506071bbd9d0908b14e8f015ca1b0ff23e4ec21e" translate="yes" xml:space="preserve">
          <source>The performance of git-filter-branch is glacially slow; its design makes it impossible for a backward-compatible implementation to ever be fast:</source>
          <target state="translated">git-filter-branch のパフォーマンスは氷河のように遅く、その設計上、下位互換性のある実装を高速にすることは不可能です。</target>
        </trans-unit>
        <trans-unit id="d698b970e30734158c98cc5647b57a259a47bb36" translate="yes" xml:space="preserve">
          <source>The person who put a piece of code into Git.</source>
          <target state="translated">Gitにコードの一部を入れた人。</target>
        </trans-unit>
        <trans-unit id="81b84527afb0ae2e697e75bbd7638af25fa12741" translate="yes" xml:space="preserve">
          <source>The pickaxe search is described in &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; (the description of &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; option, which refers to pickaxe entry in &lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore[7]&lt;/a&gt; for more details).</source>
          <target state="translated">つるはし検索は&lt;a href=&quot;git-log&quot;&gt;git-log [1]で&lt;/a&gt;説明されています（詳細については&lt;a href=&quot;gitdiffcore&quot;&gt;gitdiffcore [7]の&lt;/a&gt;つるはしエントリを参照する &lt;code&gt;-S&amp;lt;string&amp;gt;&lt;/code&gt; オプションの説明）。</target>
        </trans-unit>
        <trans-unit id="525e6a0e6ee3d9fa31ab39c46532aa0c693111e1" translate="yes" xml:space="preserve">
          <source>The placeholders are:</source>
          <target state="translated">プレースホルダは</target>
        </trans-unit>
        <trans-unit id="1651136b42ed906ec527c0b5bb6ead2e015774c3" translate="yes" xml:space="preserve">
          <source>The point of this helper is to reduce the number of times you must type your username or password. For example:</source>
          <target state="translated">このヘルパーのポイントは、ユーザー名やパスワードを入力する回数を減らすことです。例えば</target>
        </trans-unit>
        <trans-unit id="c89cea9d29e269d3d21a2bb103d39e43b1e539d2" translate="yes" xml:space="preserve">
          <source>The porcelain format</source>
          <target state="translated">磁器の形式</target>
        </trans-unit>
        <trans-unit id="26e08a1995b67cc0010521ba6bed170106483645" translate="yes" xml:space="preserve">
          <source>The porcelain format generally suppresses commit information that has already been seen. For example, two lines that are blamed to the same commit will both be shown, but the details for that commit will be shown only once. This is more efficient, but may require more state be kept by the reader. The &lt;code&gt;--line-porcelain&lt;/code&gt; option can be used to output full commit information for each line, allowing simpler (but less efficient) usage like:</source>
          <target state="translated">磁器フォーマットは、一般に、すでに見られているコミット情報を抑制します。たとえば、同じコミットのせいである2行が両方とも表示されますが、そのコミットの詳細は1回だけ表示されます。これはより効率的ですが、より多くの状態をリーダーが保持する必要がある場合があります。 &lt;code&gt;--line-porcelain&lt;/code&gt; オプションのような単純な（しかし低効率）使用を可能にする、フルライン毎にコミット情報を出力するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="20c54b7279b5d1b2be6928d44083be1fd00dfbb8" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are only present if and only if the value is true. The first attribute of a worktree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="translated">磁器の形式には、属性ごとに1つの線があります。属性は、1つのスペースで区切られたラベルと値とともにリストされます。ブール属性（ &lt;code&gt;bare&lt;/code&gt; や &lt;code&gt;detached&lt;/code&gt; など）はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。ワークツリーの最初の属性は常に &lt;code&gt;worktree&lt;/code&gt; で、空の行はレコードの終わりを示します。例えば：</target>
        </trans-unit>
        <trans-unit id="d78141a7bccc3a1873780a422f8d41a19ce92e1b" translate="yes" xml:space="preserve">
          <source>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like &lt;code&gt;bare&lt;/code&gt; and &lt;code&gt;detached&lt;/code&gt;) are listed as a label only, and are present only if the value is true. The first attribute of a working tree is always &lt;code&gt;worktree&lt;/code&gt;, an empty line indicates the end of the record. For example:</source>
          <target state="translated">磁器のフォーマットには、属性ごとに1行あります。属性は、単一のスペースで区切られたラベルと値でリストされます。ブール属性（ &lt;code&gt;bare&lt;/code&gt; や &lt;code&gt;detached&lt;/code&gt; など）はラベルとしてのみリストされ、値がtrueの場合にのみ存在します。作業ツリーの最初の属性は常に &lt;code&gt;worktree&lt;/code&gt; であり、空の行はレコードの終わりを示します。例えば：</target>
        </trans-unit>
        <trans-unit id="a362940b066b853917862099c8e9ab263cba72b1" translate="yes" xml:space="preserve">
          <source>The port number to bind the gitweb httpd to. See &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;.</source>
          <target state="translated">gitweb httpdをバインドするポート番号。&lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0cecf31c324042fa16f4839249194885b3982bae" translate="yes" xml:space="preserve">
          <source>The port number to bind the httpd to. (Default: 1234)</source>
          <target state="translated">httpd をバインドするポート番号。(デフォルト:1234)</target>
        </trans-unit>
        <trans-unit id="735bfd35b5b101e4c116696c3cd1ebf6bc58faa9" translate="yes" xml:space="preserve">
          <source>The possible options are:</source>
          <target state="translated">考えられる選択肢は</target>
        </trans-unit>
        <trans-unit id="8bc0e360ec6eefb74bc5a1aed65f13e846b6d915" translate="yes" xml:space="preserve">
          <source>The preferred strategy for rolling out a version bump (whether whole repository or for a single file) is to teach git to read the new format, and allow writing the new format with a config switch or command line option (for experimentation or for those who do not care about backwards compatibility with older gits). Then after a long period to allow the reading capability to become common, we may switch to writing the new format by default.</source>
          <target state="translated">バージョンバンプを(リポジトリ全体であろうとひとつのファイルであろうと)展開する際の好ましい方法は、git に新しいフォーマットを読み込ませることを教えて、新しいフォーマットを書き込めるようにすることです(実験用、あるいは古い gits との下位互換性を気にしない人のために)。そして、長い期間をかけて読み込み機能が一般的になるようにした後で、新しいフォーマットをデフォルトで書くように切り替えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="adf8f6f66c16d1ab5dcd5c39342b75931e439ba4" translate="yes" xml:space="preserve">
          <source>The prefix ability basically makes it trivial to use &lt;code&gt;git checkout-index&lt;/code&gt; as an &quot;export as tree&quot; function. Just read the desired tree into the index, and do:</source>
          <target state="translated">プレフィックス機能により、基本的には &lt;code&gt;git checkout-index&lt;/code&gt; を「ツリーとしてエクスポート」機能として使用するのが簡単になります。目的のツリーをインデックスに読み込んで、次のようにします。</target>
        </trans-unit>
        <trans-unit id="0f1fc4f35ab6b79f4468bd7525c0542dc9193da5" translate="yes" xml:space="preserve">
          <source>The previously introduced &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; is just a wrapper for &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">以前に導入された&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;は、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]の&lt;/a&gt;単なるラッパーです。</target>
        </trans-unit>
        <trans-unit id="675ae216ecd575fef2e1ffa9eadeda52bdab6e90" translate="yes" xml:space="preserve">
          <source>The primary problem with rewriting the history of a branch has to do with merging. Suppose somebody fetches your branch and merges it into their branch, with a result something like this:</source>
          <target state="translated">ブランチの履歴を書き換える際の主な問題は、マージに関係しています。誰かがあなたのブランチを取得して自分のブランチにマージしたとしましょう。</target>
        </trans-unit>
        <trans-unit id="ff3dc4a94f1f540e3dd725f6eef6c2d405d85a87" translate="yes" xml:space="preserve">
          <source>The primary tool we&amp;rsquo;ve been using to create commits is &lt;code&gt;git-commit
-a&lt;/code&gt;, which creates a commit including every change you&amp;rsquo;ve made to your working tree. But what if you want to commit changes only to certain files? Or only certain changes to certain files?</source>
          <target state="translated">コミットの作成に使用している主なツールは &lt;code&gt;git-commit -a&lt;/code&gt; 、作業ツリーに加えたすべての変更を含むコミットを作成します。しかし、特定のファイルのみに変更をコミットしたい場合はどうでしょうか？または特定のファイルへの特定の変更のみですか？</target>
        </trans-unit>
        <trans-unit id="bc32172ebad82b3a8531284b76fc91d0e2655fc8" translate="yes" xml:space="preserve">
          <source>The protection it offers over &lt;code&gt;--force&lt;/code&gt; is ensuring that subsequent changes your work wasn&amp;rsquo;t based on aren&amp;rsquo;t clobbered, but this is trivially defeated if some background process is updating refs in the background. We don&amp;rsquo;t have anything except the remote tracking info to go by as a heuristic for refs you&amp;rsquo;re expected to have seen &amp;amp; are willing to clobber.</source>
          <target state="translated">&lt;code&gt;--force&lt;/code&gt; を介して提供する保護は、作業のベースになっていない後続の変更が破棄されないことを保証しますが、バックグラウンドプロセスがバックグラウンドで参照を更新している場合、これは簡単に無効になります。私たちは、あなたが見たはずであり、そしてより大まかに進んでいると思われる参照のヒューリスティックとして、リモート追跡情報以外に何も持っていません。</target>
        </trans-unit>
        <trans-unit id="c8ef7004934ae749808b9e22322b2c11275f98e4" translate="yes" xml:space="preserve">
          <source>The protocol names currently used by git are:</source>
          <target state="translated">現在gitで使われているプロトコル名は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="19913c2c5a680884fd5ab271ea84dfe92e10bf53" translate="yes" xml:space="preserve">
          <source>The protocol over which the credential will be used (e.g., &lt;code&gt;https&lt;/code&gt;).</source>
          <target state="translated">資格情報が使用されるプロトコル（例： &lt;code&gt;https&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="27c53e4d1c63b3496c93b1976851fe0522937712" translate="yes" xml:space="preserve">
          <source>The provided options must not contain a NUL or LF character.</source>
          <target state="translated">提供されるオプションには、NUL または LF 文字を含んではいけません。</target>
        </trans-unit>
        <trans-unit id="5fb1f43ddd5fc4b8ac18d086f82e6f88c9ed5855" translate="yes" xml:space="preserve">
          <source>The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.</source>
          <target state="translated">gitignore files の目的は、Git によって追跡されていない特定のファイルが追跡されないようにすることです。</target>
        </trans-unit>
        <trans-unit id="a2b9675d20ab3c1e80e15b296d660914f6ea2131" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not suppressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.</source>
          <target state="translated">フックの目的は、メッセージファイルを適切に編集することであり、 &lt;code&gt;--no-verify&lt;/code&gt; オプションによって抑制されません。ゼロ以外の終了は、フックの失敗を意味し、コミットを中止します。pre-commitフックの代わりとして使用しないでください。</target>
        </trans-unit>
        <trans-unit id="96e3995f595001b3f723f5fc30a3546a03e6b50b" translate="yes" xml:space="preserve">
          <source>The purpose of the hook is to edit the message file in place, and it is not supressed by the &lt;code&gt;--no-verify&lt;/code&gt; option. This hook is called even if &lt;code&gt;--prepare-p4-only&lt;/code&gt; is set.</source>
          <target state="translated">フックの目的は、メッセージファイルを所定の場所で編集することであり、 &lt;code&gt;--no-verify&lt;/code&gt; オプションによって抑制されることはありません。このフックは、 &lt;code&gt;--prepare-p4-only&lt;/code&gt; が設定されている場合でも呼び出されます。</target>
        </trans-unit>
        <trans-unit id="383a661ab7ffdec395082f1f22f245f53263885b" translate="yes" xml:space="preserve">
          <source>The push URL of a remote repository. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;.</source>
          <target state="translated">リモートリポジトリのプッシュURL。&lt;a href=&quot;git-push&quot;&gt;git-push [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e8cd29a2b80ae7f4721c7a9c69324052af609357" translate="yes" xml:space="preserve">
          <source>The push done by the other person updated the branch that used to point at commit X to point at commit A. It is a fast-forward.</source>
          <target state="translated">相手が行ったプッシュは、コミットXを指していたブランチをコミットAを指していたブランチに更新したものです。</target>
        </trans-unit>
        <trans-unit id="79a20eedac198c71849aef6d1fe1606ea1ee319f" translate="yes" xml:space="preserve">
          <source>The quilt series file.</source>
          <target state="translated">キルトシリーズのファイルです。</target>
        </trans-unit>
        <trans-unit id="eb2f9ed5ec284eab8396a9b582f3da5582d364ca" translate="yes" xml:space="preserve">
          <source>The raw output format from &quot;git-diff-index&quot;, &quot;git-diff-tree&quot;, &quot;git-diff-files&quot; and &quot;git diff --raw&quot; are very similar.</source>
          <target state="translated">git-diff-index」、「git-diff-tree」、「git-diff-files」、「git diff --raw」の生の出力形式は非常によく似ています。</target>
        </trans-unit>
        <trans-unit id="a6ab1028c44c2d54846a9217b4a7ad959d178f38" translate="yes" xml:space="preserve">
          <source>The reachability bitmap is currently paired directly with a single packfile, using the pack-order as the object order to hopefully compress the bitmaps well using run-length encoding. This could be extended to pair a reachability bitmap with a multi-pack-index. If the multi-pack-index is extended to store a &quot;stable object order&quot; (a function Order(hash) = integer that is constant for a given hash, even as the multi-pack-index is updated) then a reachability bitmap could point to a multi-pack-index and be updated independently.</source>
          <target state="translated">リーチャビリティビットマップは現在、単一のパックファイルと直接ペアリングされており、パックオーダーをオブジェクトオーダーとして使用することで、ランレングスエンコーディングを使用してビットマップをうまく圧縮できることを期待している。これを拡張して、リーチャビリティ・ビットマップとマルチパックインデックスをペアにすることができる。multi-pack-index を拡張して「安定したオブジェクト順序」(関数 Order(hash)=整数で、multi-pack-index が更新されても、与えられたハッシュに対して一定である)を格納するようにすれば、リーチャビリティビットマップは multi-pack-index を指し示し、独立して更新することができるようになる。</target>
        </trans-unit>
        <trans-unit id="0aca04dff2f76e52dde4dcdd1542bfe4e1470100" translate="yes" xml:space="preserve">
          <source>The reason fast-import uses &lt;code&gt;:&lt;/code&gt; to denote a mark reference is this character is not legal in a Git branch name. The leading &lt;code&gt;:&lt;/code&gt; makes it easy to distinguish between the mark 42 (&lt;code&gt;:42&lt;/code&gt;) and the branch 42 (&lt;code&gt;42&lt;/code&gt; or &lt;code&gt;refs/heads/42&lt;/code&gt;), or an abbreviated SHA-1 which happened to consist only of base-10 digits.</source>
          <target state="translated">fast-importが使用する理由 &lt;code&gt;:&lt;/code&gt; マーク参照を示すために、この文字はGitブランチ名では無効です。先頭 &lt;code&gt;:&lt;/code&gt; は、マーク42（ &lt;code&gt;:42&lt;/code&gt; ）とブランチ42（ &lt;code&gt;42&lt;/code&gt; または &lt;code&gt;refs/heads/42&lt;/code&gt; ）、またはたまたま10桁のみで構成される省略されたSHA-1を簡単に区別できるようにします。</target>
        </trans-unit>
        <trans-unit id="1aba410e8fcfe74102eea2fcf73898889acee3ed" translate="yes" xml:space="preserve">
          <source>The reason it doesn&amp;rsquo;t error out when provided without &lt;code&gt;--prune&lt;/code&gt; or its config versions is for flexibility of the configured versions, and to maintain a 1=1 mapping between what the command line flags do, and what the configuration versions do.</source>
          <target state="translated">&lt;code&gt;--prune&lt;/code&gt; またはその構成バージョンなしで提供された場合にエラーにならない理由は、構成されたバージョンの柔軟性と、コマンドラインフラグの機能と構成バージョンの機能との間の1 = 1マッピングを維持するためです。</target>
        </trans-unit>
        <trans-unit id="b2defd752d90b2a93e28eb3efe0e516f3fc264fc" translate="yes" xml:space="preserve">
          <source>The rebase will stop where &lt;code&gt;pick&lt;/code&gt; has been replaced with &lt;code&gt;edit&lt;/code&gt; or when a step in the list fails to mechanically resolve conflicts and needs your help. When you are done editing and/or resolving conflicts you can continue with &lt;code&gt;git rebase --continue&lt;/code&gt;. If you decide that things are getting too hairy, you can always bail out with &lt;code&gt;git rebase
--abort&lt;/code&gt;. Even after the rebase is complete, you can still recover the original branch by using the &lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;.</source>
          <target state="translated">リベースは、 &lt;code&gt;pick&lt;/code&gt; が &lt;code&gt;edit&lt;/code&gt; 置き換えられた場合、またはリスト内のステップが競合を機械的に解決できず、支援が必要な場合に停止します。競合の編集や解決が完了したら、 &lt;code&gt;git rebase --continue&lt;/code&gt; を続行できます。物事が毛むくじゃらしすぎていると判断した場合は、いつでも &lt;code&gt;git rebase --abort&lt;/code&gt; 救済できます。リベースが完了した後でも、&lt;a href=&quot;#reflogs&quot;&gt;reflog&lt;/a&gt;を使用して元のブランチを回復できます。</target>
        </trans-unit>
        <trans-unit id="939cf091c711a461fc7775d9278b48a4457f30c1" translate="yes" xml:space="preserve">
          <source>The ref namespace is hierarchical. Different subhierarchies are used for different purposes (e.g. the &lt;code&gt;refs/heads/&lt;/code&gt; hierarchy is used to represent local branches).</source>
          <target state="translated">ref名前空間は階層的です。さまざまなサブ階層がさまざまな目的で使用されます（たとえば、 &lt;code&gt;refs/heads/&lt;/code&gt; 階層はローカルブランチを表すために使用されます）。</target>
        </trans-unit>
        <trans-unit id="d11d2f57237e560f1ae2f7da112ae694568b2d78" translate="yes" xml:space="preserve">
          <source>The ref which the given symbolic ref refers to. If not a symbolic ref, nothing is printed. Respects the &lt;code&gt;:short&lt;/code&gt;, &lt;code&gt;:lstrip&lt;/code&gt; and &lt;code&gt;:rstrip&lt;/code&gt; options in the same way as &lt;code&gt;refname&lt;/code&gt; above.</source>
          <target state="translated">指定されたシンボリック参照が参照する参照。シンボリック参照でない場合、何も出力されません。上記の &lt;code&gt;refname&lt;/code&gt; と同じ方法で、 &lt;code&gt;:short&lt;/code&gt; 、 &lt;code&gt;:lstrip&lt;/code&gt; 、および &lt;code&gt;:rstrip&lt;/code&gt; オプションを尊重します。</target>
        </trans-unit>
        <trans-unit id="09256802b46aa557905f47df9fc0a1148d341199" translate="yes" xml:space="preserve">
          <source>The reflogs are kept by default for 30 days, after which they may be pruned. See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt; and &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt; to learn how to control this pruning, and see the &quot;SPECIFYING REVISIONS&quot; section of &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for details.</source>
          <target state="translated">reflogはデフォルトで30日間保持され、その後、整理されます。このプルーニングの制御方法については、&lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt;と&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]&lt;/a&gt;を参照してください。詳細については、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt;の「リビジョンの指定」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="29e87ce112fa8f38582e71025c0e3c162626939f" translate="yes" xml:space="preserve">
          <source>The refname parameter is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 arguments are the object names for the refname before and after the update. Note that the hook is called before the refname is updated, so either sha1-old is 0{40} (meaning there is no such ref yet), or it should match what is recorded in refname.</source>
          <target state="translated">refname パラメータは $GIT_DIR からの相対的なものです;例えば、マスターヘッドの場合は &quot;refs/heads/master&quot; となります。二つの sha1 引数は、更新前と更新後の refname のオブジェクト名です。フックは refname が更新される前に呼ばれることに注意してください。(まだそのような ref が存在しないことを意味します)、または refname に記録されているものと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="21810fe3549bedbdcfb85519d93701f4c1ec8042" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs that were created will have sha1-old equal to 0{40}, while refs that were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">refname の値は $GIT_DIR からの相対的なもので、例えばマスターヘッドの場合は &quot;refs/heads/master&quot; となります。各 refname の前にある二つの sha1 値は、更新前と更新後の refname のオブジェクト名です。作成されたrefはsha1-oldが0{40}になり、削除されたrefはsha1-newが0{40}になります。</target>
        </trans-unit>
        <trans-unit id="f7cd6bb7198b77eda24e90f3bdabb1a4fb56aeb0" translate="yes" xml:space="preserve">
          <source>The refname value is relative to $GIT_DIR; e.g. for the master head this is &quot;refs/heads/master&quot;. The two sha1 values before each refname are the object names for the refname before and after the update. Refs to be created will have sha1-old equal to 0{40}, while refs to be deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</source>
          <target state="translated">refname の値は $GIT_DIR からの相対的なもので、例えばマスターヘッドの場合は &quot;refs/heads/master&quot; となります。各 refname の前にある二つの sha1 値は、更新前と更新後の refname のオブジェクト名です。作成されるRefはsha1-oldが0{40}で、削除されるRefはsha1-newが0{40}で、それ以外の場合はsha1-oldとsha1-newがリポジトリ内で有効なオブジェクトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="efb922792d6081ee214f4a8e1d665108721507f6" translate="yes" xml:space="preserve">
          <source>The refs are using the given hash algorithm. This keyword is only used if the server and client both support the object-format extension.</source>
          <target state="translated">refs は、与えられたハッシュアルゴリズムを使用しています。このキーワードは、サーバとクライアントの両方が object-format 拡張機能をサポートしている場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="ce26e3499eea5a4c24942a8e072b3a9539557d0b" translate="yes" xml:space="preserve">
          <source>The regex can also be set via a diff driver or configuration option, see &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; or &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</source>
          <target state="translated">正規表現は、diffドライバーまたは構成オプションを介して設定することもできます&lt;a href=&quot;gitattributes&quot;&gt;。gitattributes [5]&lt;/a&gt;または&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。明示的に指定すると、diffドライバーや構成設定が上書きされます。差分ドライバーは構成設定をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="db9cbae31eee7dd0453a2f75d2431a49c7ce5a43" translate="yes" xml:space="preserve">
          <source>The regex must capture the source branch name in $1.</source>
          <target state="translated">正規表現は、ソースブランチ名を$1でキャプチャする必要があります。</target>
        </trans-unit>
        <trans-unit id="2f22e3781909efae9d373f9fa46942441b8a264c" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">差分ドライバーがハンクヘッダーを認識するために使用する正規表現。組み込みパターンを使用することもできます。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4211f7342bdc098f581fc9d7939f84dc24cd9689" translate="yes" xml:space="preserve">
          <source>The regular expression that the diff driver should use to split words in a line. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">diffドライバが単語を行に分割するために使用する正規表現。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="aa527c60a8440b01958ab1ade21254172db5c938" translate="yes" xml:space="preserve">
          <source>The remainder of the commit or the tag message that follows the &quot;subject&quot;.</source>
          <target state="translated">コミットの残りの部分、または &quot;subject &quot;の後に続くタグメッセージ。</target>
        </trans-unit>
        <trans-unit id="f0619f2eb83a7faf485cba23bd4bbef8fb0cb4dd" translate="yes" xml:space="preserve">
          <source>The remainder of the line, after stripping the spaces, is used as the help associated to the option.</source>
          <target state="translated">行の残りの部分は、空白を取り除いた後に、 そのオプションに関連するヘルプとして使われます。</target>
        </trans-unit>
        <trans-unit id="19c5350e9da63f63a8abbccc7168a03dfd13ebac" translate="yes" xml:space="preserve">
          <source>The remaining features cannot be overridden on a per project basis.</source>
          <target state="translated">残りの機能は、プロジェクトごとに上書きすることはできません。</target>
        </trans-unit>
        <trans-unit id="303228bfc99fc67a561e0782dc3e0ceb08c259bb" translate="yes" xml:space="preserve">
          <source>The remote branch name for a submodule, used by &lt;code&gt;git submodule
update --remote&lt;/code&gt;. Set this option to override the value found in the &lt;code&gt;.gitmodules&lt;/code&gt; file. See &lt;a href=&quot;git-submodule&quot;&gt;git-submodule[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;git submodule update --remote&lt;/code&gt; で使用されるサブモジュールのリモートブランチ名。このオプションを設定して、 &lt;code&gt;.gitmodules&lt;/code&gt; ファイルにある値をオーバーライドします。詳細については、&lt;a href=&quot;git-submodule&quot;&gt;git-submodule [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fdf928f1cd746e7574e5e26895f63052b9e3300" translate="yes" xml:space="preserve">
          <source>The remote configuration is achieved using the &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables. (See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">リモート構成は、 &lt;code&gt;remote.origin.url&lt;/code&gt; および &lt;code&gt;remote.origin.fetch&lt;/code&gt; 構成変数を使用して実現されます。（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="e7b65b070cfabceee72964f903404025034f8258" translate="yes" xml:space="preserve">
          <source>The remote end did not report the successful update of the ref, perhaps because of a temporary error on the remote side, a break in the network connection, or other transient error.</source>
          <target state="translated">リモート側での一時的なエラー、ネットワーク接続の切断、またはその他の過渡的なエラーのためか、リモート側が ref の更新に成功したことを報告しませんでした。</target>
        </trans-unit>
        <trans-unit id="53c927a78ca0c11dc61a2c100f0e02c446d49374" translate="yes" xml:space="preserve">
          <source>The remote end refused the update. Usually caused by a hook on the remote side, or because the remote repository has one of the following safety options in effect: &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; (for pushes to the checked out branch), &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; (for forced non-fast-forward updates), &lt;code&gt;receive.denyDeletes&lt;/code&gt; or &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt;. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">リモートエンドが更新を拒否しました。通常、リモート側のフック、またはリモートリポジトリに次の安全オプションのいずれかが有効になっていることが原因で発生します： &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; （チェックアウトされたブランチへのプッシュの場合）、 &lt;code&gt;receive.denyNonFastForwards&lt;/code&gt; （強制的な非早送り更新の場合） ）、 &lt;code&gt;receive.denyDeletes&lt;/code&gt; または &lt;code&gt;receive.denyDeleteCurrent&lt;/code&gt; 。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c9422d899b3eadda77c8387091e37d96facb6c2f" translate="yes" xml:space="preserve">
          <source>The remote heads to update from. This is relative to $GIT_DIR (e.g. &quot;HEAD&quot;, &quot;refs/heads/master&quot;). When unspecified, update from all heads the remote side has.</source>
          <target state="translated">更新元となるリモートのヘッド。これは $GIT_DIR からの相対的なものです (例:&quot;HEAD&quot;,&quot;refs/heads/master&quot;)。指定しない場合は、リモート側が持っているすべてのヘッドから更新します。</target>
        </trans-unit>
        <trans-unit id="0419c5b470511fe246bdc207ab1f44978b5929c7" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential.</source>
          <target state="translated">ネットワーク クレデンシャルのリモート ホスト名。</target>
        </trans-unit>
        <trans-unit id="2acecc1c91d3ba6caf56ecf7245b62c949c434da" translate="yes" xml:space="preserve">
          <source>The remote hostname for a network credential. This includes the port number if one was specified (e.g., &quot;example.com:8088&quot;).</source>
          <target state="translated">ネットワーク信任状のリモートホスト名。これには、ポート番号が指定されている場合はポート番号が含まれます (例:「example.com:8088」)。</target>
        </trans-unit>
        <trans-unit id="a7632b9807699f7e6cd146f3dd66e0428b068933" translate="yes" xml:space="preserve">
          <source>The remote ref that matches &amp;lt;src&amp;gt; is fetched, and if &amp;lt;dst&amp;gt; is not an empty string, an attempt is made to update the local ref that matches it.</source>
          <target state="translated">&amp;lt;src&amp;gt;に一致するリモート参照がフェッチされ、&amp;lt;dst&amp;gt;が空の文字列でない場合は、それに一致するローカル参照を更新しようとします。</target>
        </trans-unit>
        <trans-unit id="282ef7eedc5a5bdee9740e04ed8375ea205f3da3" translate="yes" xml:space="preserve">
          <source>The remote refs to update.</source>
          <target state="translated">更新するリモートレファレンス。</target>
        </trans-unit>
        <trans-unit id="1126548b6dd0a73d0e4b3cf8a47f765ced5296ec" translate="yes" xml:space="preserve">
          <source>The remote to push to by default. Overrides &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; for all branches, and is overridden by &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; for specific branches.</source>
          <target state="translated">デフォルトでプッシュするリモート。オーバーライドの &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; すべての分岐のための、およびによって上書きされる &lt;code&gt;branch.&amp;lt;name&amp;gt;.pushRemote&lt;/code&gt; 特定の分岐のため。</target>
        </trans-unit>
        <trans-unit id="69cc315a656a6408b19c28c1250214347094ab33" translate="yes" xml:space="preserve">
          <source>The replaced object and the replacement object must be of the same type. This restriction can be bypassed using &lt;code&gt;-f&lt;/code&gt;.</source>
          <target state="translated">置換されるオブジェクトと置換オブジェクトは同じタイプである必要があります。この制限は、 &lt;code&gt;-f&lt;/code&gt; を使用して回避できます。</target>
        </trans-unit>
        <trans-unit id="1ad56792b1c232c0733d7ad92a2a6edfcbfd7d1e" translate="yes" xml:space="preserve">
          <source>The report does not tell you anything about lines which have been deleted or replaced; you need to use a tool such as &lt;code&gt;git diff&lt;/code&gt; or the &quot;pickaxe&quot; interface briefly mentioned in the following paragraph.</source>
          <target state="translated">レポートは、削除または置換された行については何も通知しません。 &lt;code&gt;git diff&lt;/code&gt; や次の段落で簡単に説明する「pickaxe」インターフェースなどのツールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4fd8af335028abdc88c8957e63b788cd43e89cc" translate="yes" xml:space="preserve">
          <source>The report of the commands of this hook should have the same order as the input. The exit status of the &lt;code&gt;proc-receive&lt;/code&gt; hook only determines the success or failure of the group of commands sent to it, unless atomic push is in use.</source>
          <target state="translated">このフックのコマンドのレポートは、入力と同じ順序である必要があります。 &lt;code&gt;proc-receive&lt;/code&gt; フックの終了ステータスは、アトミックプッシュが使用されていない限り、送信されたコマンドのグループの成功または失敗のみを決定します。</target>
        </trans-unit>
        <trans-unit id="2c986c29f6ffa22f2a8c706bbb75b7aeb4461294" translate="yes" xml:space="preserve">
          <source>The repository URL to be pulled from.</source>
          <target state="translated">プルアウトするリポジトリのURL。</target>
        </trans-unit>
        <trans-unit id="944d2d5ccd37faa608b4a3dce165543a5adf2fbf" translate="yes" xml:space="preserve">
          <source>The repository the action will be performed on.</source>
          <target state="translated">アクションが実行されるリポジトリ。</target>
        </trans-unit>
        <trans-unit id="0e7c4601cfd7634812fd5318d08d4f529fb59bef" translate="yes" xml:space="preserve">
          <source>The repository to get a tar archive from.</source>
          <target state="translated">tar アーカイブを取得するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="bc81f7623489d466e462d3597d8dc6ebd3c462a1" translate="yes" xml:space="preserve">
          <source>The repository to sync from.</source>
          <target state="translated">同期するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="3d7b45c15d44961366710f29c0592cfbaf8293a2" translate="yes" xml:space="preserve">
          <source>The repository to sync into.</source>
          <target state="translated">同期するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="85a32286326310d42bba4488de0fbceb84f9845b" translate="yes" xml:space="preserve">
          <source>The repository to update.</source>
          <target state="translated">更新するリポジトリ。</target>
        </trans-unit>
        <trans-unit id="15ea4cb9c0b7ca59bf54604e4e274c258d2ab5d8" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; の応答は、区切りパケット（0001）で区切られたいくつかのセクションに分割され、各セクションはセクションヘッダーで始まります。</target>
        </trans-unit>
        <trans-unit id="f5a3baabdc3717b14a2e7f02d6a5a2eab21baf8b" translate="yes" xml:space="preserve">
          <source>The response of &lt;code&gt;fetch&lt;/code&gt; is broken into a number of sections separated by delimiter packets (0001), with each section beginning with its section header. Most sections are sent only when the packfile is sent.</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; の応答は、区切り文字パケット（0001）で区切られたいくつかのセクションに分割され、各セクションはセクションヘッダーで始まります。ほとんどのセクションは、packfileが送信されたときにのみ送信されます。</target>
        </trans-unit>
        <trans-unit id="4f1a001f6b3f7c16917c0e0241e976b8717f870a" translate="yes" xml:space="preserve">
          <source>The rest of the documentation discusses &lt;code&gt;fsck.*&lt;/code&gt; for brevity, but the same applies for the corresponding &lt;code&gt;receive.fsck.*&lt;/code&gt; and &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt;. variables.</source>
          <target state="translated">ドキュメントの残りの部分では、簡潔にするために &lt;code&gt;fsck.*&lt;/code&gt; について説明しますが、対応する &lt;code&gt;receive.fsck.*&lt;/code&gt; と &lt;code&gt;fetch.&amp;lt;msg-id&amp;gt;.*&lt;/code&gt; も同じことが当てはまります。変数。</target>
        </trans-unit>
        <trans-unit id="ac10b74ced74e00c661f52e9250a42f47fd6add4" translate="yes" xml:space="preserve">
          <source>The result of &lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, because &lt;code&gt;2&lt;/code&gt; is the best common ancestor of all commits.</source>
          <target state="translated">&lt;code&gt;git merge-base --octopus A B C&lt;/code&gt; の結果は &lt;code&gt;2&lt;/code&gt; です。これは、 &lt;code&gt;2&lt;/code&gt; がすべてのコミットの最も一般的な祖先であるためです。</target>
        </trans-unit>
        <trans-unit id="1e8fa948e18ddfaa21178042cd566eaada7aae80" translate="yes" xml:space="preserve">
          <source>The result of comparison is passed from these commands to what is internally called &quot;diffcore&quot;, in a format similar to what is output when the -p option is not used. E.g.</source>
          <target state="translated">比較結果は、これらのコマンドから内部的に &quot;diffcore&quot; と呼ばれるものに渡されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="d6478eddd3e6be6e1f0703d8450a597d1ea3dfe6" translate="yes" xml:space="preserve">
          <source>The result of such a bisection would be that we would find that H is the first bad commit, when in fact it&amp;rsquo;s B. So that would be wrong!</source>
          <target state="translated">そのような二等分の結果、実際にはBであるのに、Hが最初の不良コミットであることがわかります。</target>
        </trans-unit>
        <trans-unit id="9ed4c9f58d5e6595458ce4cb4952fdfe7c07ce9b" translate="yes" xml:space="preserve">
          <source>The resulting command then has an &quot;operation&quot; argument appended to it (see below for details), and the result is executed by the shell.</source>
          <target state="translated">結果のコマンドには「操作」引数が付加され(詳細は後述)、その結果がシェルによって実行されます。</target>
        </trans-unit>
        <trans-unit id="baad8b31b0f95aa1296c5c88ad34816424f2926e" translate="yes" xml:space="preserve">
          <source>The resulting directory proj.git contains a &quot;bare&quot; git repository&amp;mdash;​it is just the contents of the &lt;code&gt;.git&lt;/code&gt; directory, without any files checked out around it.</source>
          <target state="translated">結果のディレクトリproj.gitには「ベア」gitリポジトリが含まれています。これは &lt;code&gt;.git&lt;/code&gt; ディレクトリのコンテンツにすぎず、周りにチェックアウトされているファイルはありません。</target>
        </trans-unit>
        <trans-unit id="31dc4b206e7be8ca9a78c4871cc58f03a5340e5b" translate="yes" xml:space="preserve">
          <source>The revision data is appended to the file if it already exists, for use when doing incremental imports.</source>
          <target state="translated">リビジョンデータは、インクリメンタルインポートを行う際に使用するために、ファイルが既に存在する場合にはそのファイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="0ca811b30547ebe29846859e95a6c9147e8141b4" translate="yes" xml:space="preserve">
          <source>The rewrite rule guarantees that existing static files will be properly served, whereas any other URL will be passed to gitweb as PATH_INFO parameter.</source>
          <target state="translated">この書き換えルールは、既存の静的ファイルが適切に処理されることを保証します。</target>
        </trans-unit>
        <trans-unit id="7511d9248c0671ec876d283606ae9df0bea2f6b2" translate="yes" xml:space="preserve">
          <source>The ripple effect of a &quot;hard case&quot; recovery is especially bad: &lt;code&gt;everyone&lt;/code&gt; downstream from &lt;code&gt;topic&lt;/code&gt; will now have to perform a &quot;hard case&quot; recovery too!</source>
          <target state="translated">「ハードケース」リカバリの波及効果は特に悪いです。 &lt;code&gt;topic&lt;/code&gt; 下流にいる &lt;code&gt;everyone&lt;/code&gt; が「ハードケース」リカバリも実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="93d5c7537e241865d860131eb6d72edc95c9d772" translate="yes" xml:space="preserve">
          <source>The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported. If not given, &lt;code&gt;git cvsimport&lt;/code&gt; will try to read it from &lt;code&gt;CVS/Root&lt;/code&gt;. If no such file exists, it checks for the &lt;code&gt;CVSROOT&lt;/code&gt; environment variable.</source>
          <target state="translated">CVSアーカイブのルート。ローカル（単純なパス）またはリモートの場合があります。現在、：local：、：ext：、：pserver：アクセスメソッドのみがサポートされています。指定しない場合、 &lt;code&gt;git cvsimport&lt;/code&gt; は &lt;code&gt;CVS/Root&lt;/code&gt; から読み取ろうとします。そのようなファイルが存在しない場合は、 &lt;code&gt;CVSROOT&lt;/code&gt; 環境変数をチェックします。</target>
        </trans-unit>
        <trans-unit id="df41fdf293aec02e3dee1ead27003284471a1181" translate="yes" xml:space="preserve">
          <source>The root of the tree can be represented by an empty string as &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">ツリーのルートは、 &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; のように空の文字列で表すことができます。</target>
        </trans-unit>
        <trans-unit id="557dc21e01559e09224bc25bcbd6a672b4e3d883" translate="yes" xml:space="preserve">
          <source>The rule to determine which remote branch to merge after fetching is a bit involved, in order not to break backward compatibility.</source>
          <target state="translated">フェッチ後にどのリモートブランチをマージするかを決めるルールは、下位互換性を壊さないようにするために少し複雑です。</target>
        </trans-unit>
        <trans-unit id="bbff5506f0bff9eed6d1a29f80ce8f838449bb56" translate="yes" xml:space="preserve">
          <source>The rules by which the pattern matches paths are the same as in &lt;code&gt;.gitignore&lt;/code&gt; files (see &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;), with a few exceptions:</source>
          <target state="translated">パターンがパスに一致するルールは、いくつかの例外を除いて、 &lt;code&gt;.gitignore&lt;/code&gt; ファイル（&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]を&lt;/a&gt;参照）と同じです。</target>
        </trans-unit>
        <trans-unit id="579e7c08387accae89723ba13e3ec53145837232" translate="yes" xml:space="preserve">
          <source>The same as &lt;code&gt;--merge&lt;/code&gt; option above, but changes the way the conflicting hunks are presented, overriding the &lt;code&gt;merge.conflictStyle&lt;/code&gt; configuration variable. Possible values are &quot;merge&quot; (default) and &quot;diff3&quot; (in addition to what is shown by &quot;merge&quot; style, shows the original contents).</source>
          <target state="translated">上記の &lt;code&gt;--merge&lt;/code&gt; オプションと同じですが、競合するハンクの表示方法を変更し、 &lt;code&gt;merge.conflictStyle&lt;/code&gt; 構成変数を上書きします。可能な値は「merge」（デフォルト）と「diff3」です（「merge」スタイルで表示されるものに加えて、元のコンテンツを表示します）。</target>
        </trans-unit>
        <trans-unit id="1a11cc7f94381fe2de07d484775d2914bf62d241" translate="yes" xml:space="preserve">
          <source>The same as the previous one:</source>
          <target state="translated">と同じです。</target>
        </trans-unit>
        <trans-unit id="ebdfbbadd1b4e3e4d3c390aed297730072348592" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;pu&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;pu&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="translated">&lt;code&gt;pu&lt;/code&gt; についても、同じ巻き戻しと再構築のプロセスを実行できます。上記のように、 &lt;code&gt;pu&lt;/code&gt; は使い捨てブランチであるため、公表は必要ありません。</target>
        </trans-unit>
        <trans-unit id="982acf1816c2fb0e10e67de1c939cdcea16cc699" translate="yes" xml:space="preserve">
          <source>The same rewind and rebuild process may be followed for &lt;code&gt;seen&lt;/code&gt;. A public announcement is not necessary since &lt;code&gt;seen&lt;/code&gt; is a throw-away branch, as described above.</source>
          <target state="translated">同じ巻き戻しと再構築のプロセスが &lt;code&gt;seen&lt;/code&gt; ように続くかもしれません。上記のように、 &lt;code&gt;seen&lt;/code&gt; は使い捨てのブランチであるため、公の発表は必要ありません。</target>
        </trans-unit>
        <trans-unit id="30d931302d20c8d2d3f4d29cdb99720d08f56244" translate="yes" xml:space="preserve">
          <source>The same trailer as a v1 pack file:</source>
          <target state="translated">v1パックファイルと同じトレーラー。</target>
        </trans-unit>
        <trans-unit id="ef6e4cd5de79a2002e4df69090fc16d7024fe532" translate="yes" xml:space="preserve">
          <source>The sample &lt;code&gt;prepare-commit-msg&lt;/code&gt; hook that comes with Git removes the help message found in the commented portion of the commit template.</source>
          <target state="translated">Gitに付属 &lt;code&gt;prepare-commit-msg&lt;/code&gt; サンプルのprepare-commit-msgフックは、コミットテンプレートのコメント部分にあるヘルプメッセージを削除します。</target>
        </trans-unit>
        <trans-unit id="0814a224cf6ffffca90b05b46ffd264f8d62f600" translate="yes" xml:space="preserve">
          <source>The sample hooks are all disabled by default. To enable one of the sample hooks rename it by removing its &lt;code&gt;.sample&lt;/code&gt; suffix.</source>
          <target state="translated">デフォルトでは、サンプルフックはすべて無効になっています。サンプルフックの1つを有効にするには、 &lt;code&gt;.sample&lt;/code&gt; サフィックスを削除して名前を変更します。</target>
        </trans-unit>
        <trans-unit id="ee2f5fb52849fdcd69a62a399938c4c71ec4e36c" translate="yes" xml:space="preserve">
          <source>The sane thing. Just admit you screwed up, and use a different name. Others have already seen one tag-name, and if you keep the same name, you may be in the situation that two people both have &quot;version X&quot;, but they actually have &lt;code&gt;different&lt;/code&gt; &quot;X&quot;'s. So just call it &quot;X.1&quot; and be done with it.</source>
          <target state="translated">正気なこと。失敗したことを認め、別の名前を使用してください。他の人はすでに1つのタグ名を見たことがあります。同じ名前を保持している場合、2人のユーザーが両方とも「バージョンX」を持っているが、実際には「X」が &lt;code&gt;different&lt;/code&gt; という状況にあるかもしれません。だからそれを「X.1」と呼んでそれで終わりです。</target>
        </trans-unit>
        <trans-unit id="16a78cd21b6c709f016f4a17d2a1069e970db97c" translate="yes" xml:space="preserve">
          <source>The script expects you to provide the key roots where it can start the import from an &lt;code&gt;initial import&lt;/code&gt; or &lt;code&gt;tag&lt;/code&gt; type of Arch commit. It will follow and import new branches within the provided roots.</source>
          <target state="translated">スクリプトは、 &lt;code&gt;initial import&lt;/code&gt; またはArchタイプの &lt;code&gt;tag&lt;/code&gt; タイプからインポートを開始できるキールートを提供することを期待しています。提供されたルート内の新しいブランチをたどってインポートします。</target>
        </trans-unit>
        <trans-unit id="793ca81ee99913a2e3edc7ca33209f79549422e8" translate="yes" xml:space="preserve">
          <source>The scriptlet sets &lt;code&gt;GIT_DIR&lt;/code&gt; and &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; shell variables, but does &lt;strong&gt;not&lt;/strong&gt; export them to the environment.</source>
          <target state="translated">スクリプトレットは &lt;code&gt;GIT_DIR&lt;/code&gt; および &lt;code&gt;GIT_OBJECT_DIRECTORY&lt;/code&gt; シェル変数を設定しますが、それらを環境にエクスポートしませ&lt;strong&gt;ん&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8b53f7beee61a37b0174ea389f5f36080ff3c1b7" translate="yes" xml:space="preserve">
          <source>The second .gitignore prevents Git from ignoring &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt;.</source>
          <target state="translated">2番目の.gitignoreは、Gitが &lt;code&gt;arch/foo/kernel/vmlinux.lds.S&lt;/code&gt; を無視しないようにします。</target>
        </trans-unit>
        <trans-unit id="fc737587a80c0c07a4fffd3646c479ff0f86cddd" translate="yes" xml:space="preserve">
          <source>The second example demonstrates that you can abbreviate the object name to only the first several hexadecimal digits in most places.</source>
          <target state="translated">2 番目の例は、ほとんどの場所でオブジェクト名を最初の数桁の 16 進数だけに省略できることを示しています。</target>
        </trans-unit>
        <trans-unit id="2890a9def3fff903603dee47b68cd9b5af108707" translate="yes" xml:space="preserve">
          <source>The second format is what gets used when &lt;code&gt;--stage=all&lt;/code&gt;. The three stage temporary fields (stage1temp, stage2temp, stage3temp) list the name of the temporary file if there is a stage entry in the index or &lt;code&gt;.&lt;/code&gt; if there is no stage entry. Paths which only have a stage 0 entry will always be omitted from the output.</source>
          <target state="translated">2番目の形式は、-- &lt;code&gt;--stage=all&lt;/code&gt; 場合に使用される形式です。 3つのステージの一時フィールド（stage1temp、stage2temp、stage3temp）には、インデックスまたはにステージエントリがある場合、一時ファイルの名前がリストされます &lt;code&gt;.&lt;/code&gt; ステージエントリがない場合。ステージ0エントリのみを持つパスは、常に出力から除外されます。</target>
        </trans-unit>
        <trans-unit id="8a6f107e4f2dc8b17455f1349e940becb9fc3a6b" translate="yes" xml:space="preserve">
          <source>The second issue is one of auditing. When many contributors are working on the same repository, it is important which merge commits introduced a change into an important branch. The problematic merge &lt;code&gt;R&lt;/code&gt; above is not likely to be the merge commit that was used to merge into an important branch. Instead, the merge &lt;code&gt;N&lt;/code&gt; was used to merge &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;X&lt;/code&gt; into the important branch. This commit may have information about why the change &lt;code&gt;X&lt;/code&gt; came to override the changes from &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; in its commit message.</source>
          <target state="translated">2番目の問題は監査の1つです。多くの寄稿者が同じリポジトリで作業している場合、どのマージコミットが重要なブランチに変更を導入したかが重要です。上記の問題のあるマージ &lt;code&gt;R&lt;/code&gt; は、重要なブランチにマージするために使用されたマージコミットではない可能性があります。代わりに、マージ &lt;code&gt;N&lt;/code&gt; を使用して &lt;code&gt;R&lt;/code&gt; と &lt;code&gt;X&lt;/code&gt; を重要なブランチにマージしました。このコミットには、変更 &lt;code&gt;X&lt;/code&gt; がコミットメッセージの &lt;code&gt;A&lt;/code&gt; および &lt;code&gt;B&lt;/code&gt; からの変更をオーバーライドするようになった理由に関する情報が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="86b87f951d8d8be1a02da6e062a3489256945d73" translate="yes" xml:space="preserve">
          <source>The second parameter passed to the hook is the indicator for whether or not the index was updated and the skip-worktree bit could have changed. &quot;1&quot; meaning skip-worktree bits could have been updated and &quot;0&quot; meaning they were not.</source>
          <target state="translated">フックに渡される 2 番目のパラメータは、インデックスが更新されたかどうかとスキップワークツリービットが変更されたかどうかの指標です。&quot;1&quot; はスキップワークツリービットが更新された可能性があることを意味し、&quot;0&quot; は更新されなかったことを意味します。</target>
        </trans-unit>
        <trans-unit id="b730007914036d9f0fb3ba6052d64853bae216ae" translate="yes" xml:space="preserve">
          <source>The second syntax (&quot;&lt;code&gt;git merge --abort&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts. &lt;code&gt;git merge --abort&lt;/code&gt; will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), &lt;code&gt;git merge --abort&lt;/code&gt; will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:</source>
          <target state="translated">2番目の構文（ &quot; &lt;code&gt;git merge --abort&lt;/code&gt; &quot;）は、マージによって競合が発生した後にのみ実行できます。 &lt;code&gt;git merge --abort&lt;/code&gt; は、マージプロセスを中止し、マージ前の状態を再構築しようとします。ただし、マージの開始時にコミットされていない変更があった場合（特に、マージの開始後にそれらの変更がさらに変更された場合）、 &lt;code&gt;git merge --abort&lt;/code&gt; は、元の（マージ前の）変更を再構築できない場合があります。したがって：</target>
        </trans-unit>
        <trans-unit id="1f7dcee78b5872602756cd0d868ad6253db301fe" translate="yes" xml:space="preserve">
          <source>The second transformation in the chain is diffcore-break, and is controlled by the -B option to the &lt;code&gt;git diff-*&lt;/code&gt; commands. This is used to detect a filepair that represents &quot;complete rewrite&quot; and break such filepair into two filepairs that represent delete and create. E.g. If the input contained this filepair:</source>
          <target state="translated">チェーンの2番目の変換はdiffcore-breakであり、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Bオプションによって制御されます。これは、「完全な書き換え」を表すファイルペアを検出し、そのようなファイルペアを、削除と作成を表す2つのファイルペアに分割するために使用されます。たとえば、入力にこのファイルペアが含まれていた場合：</target>
        </trans-unit>
        <trans-unit id="5aa738048a0181b9705365955bd04c18156f9d33" translate="yes" xml:space="preserve">
          <source>The section &lt;code&gt;submodule.foo.*&lt;/code&gt; in the &lt;code&gt;.gitmodules&lt;/code&gt; file gives additional hints to Git&amp;rsquo;s porcelain layer. For example, the &lt;code&gt;submodule.foo.url&lt;/code&gt; setting specifies where to obtain the submodule.</source>
          <target state="translated">&lt;code&gt;.gitmodules&lt;/code&gt; ファイルのセクション &lt;code&gt;submodule.foo.*&lt;/code&gt; は、Gitの磁器層に追加のヒントを与えます。たとえば、 &lt;code&gt;submodule.foo.url&lt;/code&gt; 設定は、サブモジュールを取得する場所を指定します。</target>
        </trans-unit>
        <trans-unit id="addff8a92e5ddb901ae8a38330bc2dcce4be9fbb" translate="yes" xml:space="preserve">
          <source>The section or key is invalid (ret=1),</source>
          <target state="translated">セクションまたはキーが無効です(ret=1)。</target>
        </trans-unit>
        <trans-unit id="463ba2454fad2719570e32271a038c3acce699a7" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any &quot;unshallow&quot; lines for anything which the client has not indicated was shallow as a part of its request.</source>
          <target state="translated">サーバーは、クライアントがリクエストの一部として浅いことを示さなかったものに 対して、「浅くない」行を送ってはならない[MUST NOT]。</target>
        </trans-unit>
        <trans-unit id="d868af4cbdec034778f61defdf53e9a4307fd341" translate="yes" xml:space="preserve">
          <source>The server MUST NOT send any refs which were not requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">サーバーは、 &lt;code&gt;want-ref&lt;/code&gt; 行を使用して要求されなかった参照を送信してはなりません（MUST NOT）。</target>
        </trans-unit>
        <trans-unit id="446930d87bed0e82e29e329dd081708ba37057c2" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;agent=X&lt;/code&gt;) to notify the client that the server is running version &lt;code&gt;X&lt;/code&gt;. The client may optionally send its own agent string by including the &lt;code&gt;agent&lt;/code&gt; capability with a value &lt;code&gt;Y&lt;/code&gt; (in the form &lt;code&gt;agent=Y&lt;/code&gt;) in its request to the server (but it MUST NOT do so if the server did not advertise the agent capability). The &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; strings may contain any printable ASCII characters except space (i.e., the byte range 32 &amp;lt; x &amp;lt; 127), and are typically of the form &quot;package/version&quot; (e.g., &quot;git/1.8.3.1&quot;). The agent strings are purely informative for statistics and debugging purposes, and MUST NOT be used to programmatically assume the presence or absence of particular features.</source>
          <target state="translated">サーバーは、値 &lt;code&gt;X&lt;/code&gt; （ &lt;code&gt;agent=X&lt;/code&gt; の形式）で &lt;code&gt;agent&lt;/code&gt; 機能を通知して、サーバーがバージョン &lt;code&gt;X&lt;/code&gt; を実行していることをクライアントに通知できます。クライアントは、オプションで、サーバーへのリクエストに値 &lt;code&gt;Y&lt;/code&gt; （ &lt;code&gt;agent=Y&lt;/code&gt; の形式）の &lt;code&gt;agent&lt;/code&gt; 機能を含めることにより、独自のエージェント文字列を送信できます（ただし、サーバーがエージェント機能をアドバタイズしなかった場合は送信しないでください）。 &lt;code&gt;X&lt;/code&gt; と &lt;code&gt;Y&lt;/code&gt; 文字列には、スペース以外の印刷可能なASCII文字（つまり、バイト範囲32 &amp;lt;x &amp;lt;127）を含めることができ、通常は &quot;package / version&quot;（たとえば、 &quot;git / 1.8.3.1&quot;）の形式です。エージェント文字列は、統計とデバッグの目的で純粋に情報を提供するものであり、特定の機能の有無をプログラムで仮定するために使用してはなりません。</target>
        </trans-unit>
        <trans-unit id="5d8f08f3df19bb2371d7bbd09e4f22512a514d87" translate="yes" xml:space="preserve">
          <source>The server can advertise the &lt;code&gt;object-format&lt;/code&gt; capability with a value &lt;code&gt;X&lt;/code&gt; (in the form &lt;code&gt;object-format=X&lt;/code&gt;) to notify the client that the server is able to deal with objects using hash algorithm X. If not specified, the server is assumed to only handle SHA-1. If the client would like to use a hash algorithm other than SHA-1, it should specify its object-format string.</source>
          <target state="translated">サーバーは、値 &lt;code&gt;X&lt;/code&gt; （ &lt;code&gt;object-format=X&lt;/code&gt; の形式）でオブジェクト &lt;code&gt;object-format&lt;/code&gt; 機能をアドバタイズして、サーバーがハッシュアルゴリズムXを使用してオブジェクトを処理できることをクライアントに通知できます。指定されていない場合、サーバーは次のように想定されます。 SHA-1のみを処理します。クライアントがSHA-1以外のハッシュアルゴリズムを使用する場合は、オブジェクト形式の文字列を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5dbb8fc2dd2ef1317864e26b0a2f75da26a1d7f0" translate="yes" xml:space="preserve">
          <source>The server sends a &quot;shallow obj-id&quot; line for each commit whose parents will not be sent in the following packfile.</source>
          <target state="translated">サーバは、以下のpackfileで親が送信されないコミットごとに「浅いobj-id」の行を送信します。</target>
        </trans-unit>
        <trans-unit id="15cbc52acb55c8a437e7a9fc2cb2ebb8c994afc3" translate="yes" xml:space="preserve">
          <source>The server sends an &quot;unshallow obj-id&quot; line for each commit which the client has indicated is shallow, but is no longer shallow as a result of the fetch (due to its parents being sent in the following packfile).</source>
          <target state="translated">サーバは、クライアントが浅いと指摘した各コミットに対して、&quot;unshallow obj-id&quot; 行を送信します。</target>
        </trans-unit>
        <trans-unit id="3f482eecb5e3fca563243c0419eece540e0582ac" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;ACK obj-id&quot; for all of the object ids sent as have lines which are common.</source>
          <target state="translated">サーバは、共通の行を持つように送信された全てのオブジェクトIDに対して、&quot;ACK obj-id &quot;で応答します。</target>
        </trans-unit>
        <trans-unit id="543a974b0aa8c62d541ca2830198235b945cc003" translate="yes" xml:space="preserve">
          <source>The server will respond with &quot;NAK&quot; if none of the object ids sent as have lines were common.</source>
          <target state="translated">have行として送られたオブジェクトIDが共通のものがなかった場合、サーバは &quot;NAK &quot;で応答します。</target>
        </trans-unit>
        <trans-unit id="568256da628f1737b5310a22de9a07629ce73e0d" translate="yes" xml:space="preserve">
          <source>The server will respond with a &quot;ready&quot; line indicating that the server has found an acceptable common base and is ready to make and send a packfile (which will be found in the packfile section of the same response)</source>
          <target state="translated">サーバは &quot;ready&quot; という行で応答し、サーバが許容可能な共通ベースを見つけたことを示し、パックファイルを作成して送信する準備ができていることを示します (これは同じ応答の packfile セクションにあります)。</target>
        </trans-unit>
        <trans-unit id="69ff3eec8c55e5a8095ea13f51e31e429dc845d6" translate="yes" xml:space="preserve">
          <source>The server will send a ref listing (&quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;) for each reference requested using &lt;code&gt;want-ref&lt;/code&gt; lines.</source>
          <target state="translated">サーバーは、 &lt;code&gt;want-ref&lt;/code&gt; 行を使用して要求された各参照の参照リスト（ &quot;&amp;lt;oid&amp;gt; &amp;lt;refname&amp;gt;&quot;）を送信します。</target>
        </trans-unit>
        <trans-unit id="afb7e2ac1ca268d29d3dabe65a1485bc3c99ebf1" translate="yes" xml:space="preserve">
          <source>The server will then check to ensure that the client&amp;rsquo;s request is comprised of a valid command as well as valid capabilities which were advertised. If the request is valid the server will then execute the command. A server MUST wait till it has received the client&amp;rsquo;s entire request before issuing a response. The format of the response is determined by the command being executed, but in all cases a flush-pkt indicates the end of the response.</source>
          <target state="translated">次に、サーバーは、クライアントのリクエストが、アドバタイズされた有効なコマンドと有効な機能で構成されていることを確認します。リクエストが有効な場合、サーバーはコマンドを実行します。サーバーは、応答を発行する前に、クライアントの要求全体を受信するまで待機する必要があります。応答の形式は、実行されるコマンドによって決まりますが、すべての場合において、flush-pktは応答の終わりを示します。</target>
        </trans-unit>
        <trans-unit id="537b1e0777fad4eaaafbf4ccf5940ab37b1e2ed6" translate="yes" xml:space="preserve">
          <source>The shared index part, to be referenced by $GIT_DIR/index and other temporary index files. Only valid in split index mode.</source>
          <target state="translated">共有インデックス部分で、$GIT_DIR/index や他の一時インデックスファイルから参照されます。スプリットインデックスモードでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="d11a14c0103fd18e1ebb96bcb7251e0f8abbce80" translate="yes" xml:space="preserve">
          <source>The shift magic first throws away the tree id and then the -p parameters. Note that this handles merges properly! In case Darl committed a merge between P1 and P2, it will be propagated properly and all children of the merge will become merge commits with P1,P2 as their parents instead of the merge commit.</source>
          <target state="translated">シフトマジックでは、最初にツリー ID を捨て、次に -p パラメータを捨てます。これはマージを適切に処理することに注意してください! Darl が P1 と P2 の間でマージをコミットした場合、それは適切に伝搬され、すべてのマージの子はマージコミットの代わりに P1,P2 を親としてマージコミットになります。</target>
        </trans-unit>
        <trans-unit id="e33b2d8b27401f604cb70ad4d214df90a2abf20c" translate="yes" xml:space="preserve">
          <source>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</source>
          <target state="translated">類似度指数は変更されていない行の割合、非類似度指数は変更された行の割合です。これは切り捨てられた整数で、その後にパーセント記号が続きます。このように、類似度インデックスの値100%は、2つの等しいファイルのために予約されており、100%の非類似度は、古いファイルの行が新しいファイルに入っていないことを意味します。</target>
        </trans-unit>
        <trans-unit id="09f0c715250f8ac9e78727d6768d66502facff83" translate="yes" xml:space="preserve">
          <source>The simplest commit to find is the HEAD commit, which we can find from .git/HEAD:</source>
          <target state="translated">最も簡単なコミットは HEAD コミットで、.git/HEAD から見つけることができます。</target>
        </trans-unit>
        <trans-unit id="938f800e1b465bd0f07eb377492ba2456bfbed2c" translate="yes" xml:space="preserve">
          <source>The simplest way to do this is using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and ssh; to update the remote branch named &lt;code&gt;master&lt;/code&gt; with the latest state of your branch named &lt;code&gt;master&lt;/code&gt;, run</source>
          <target state="translated">これを行う最も簡単な方法は、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;とsshを使用することです。名前のリモートブランチ更新する &lt;code&gt;master&lt;/code&gt; 名前付きブランチの最新の状態を持つ &lt;code&gt;master&lt;/code&gt; 、実行を</target>
        </trans-unit>
        <trans-unit id="a5eba655ac4b55a1106bdc6c6dbf2b0d1ad04c8a" translate="yes" xml:space="preserve">
          <source>The simplest way to mark a file as binary is to unset the diff attribute in the &lt;code&gt;.gitattributes&lt;/code&gt; file:</source>
          <target state="translated">ファイルをバイナリとしてマークする最も簡単な方法は、 &lt;code&gt;.gitattributes&lt;/code&gt; ファイルのdiff属性を設定解除することです。</target>
        </trans-unit>
        <trans-unit id="0f95b7ebe5f42d4f0766af1eda2b35efa6854fa9" translate="yes" xml:space="preserve">
          <source>The size in bytes of the commit or tag message.</source>
          <target state="translated">コミットまたはタグメッセージのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="99bb329f9f9a76ae9c81982693e8d5911709e87c" translate="yes" xml:space="preserve">
          <source>The size of the object (the same as &lt;code&gt;git cat-file -s&lt;/code&gt; reports). Append &lt;code&gt;:disk&lt;/code&gt; to get the size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">オブジェクトのサイズ（ &lt;code&gt;git cat-file -s&lt;/code&gt; reports と同じ）。 &lt;code&gt;:disk&lt;/code&gt; を追加して、オブジェクトがディスク上で占めるサイズをバイト単位で取得します。以下の「 &lt;code&gt;CAVEATS&lt;/code&gt; セクションのディスク上のサイズに関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="3527fa64b6fd749102c379b2fd96b0df5cd454cb" translate="yes" xml:space="preserve">
          <source>The size of the window used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; when no window size is given on the command line. Defaults to 10.</source>
          <target state="translated">使用されるウィンドウのサイズ&lt;a href=&quot;git-pack-objects&quot;&gt;のgit-パックオブジェクト[1]&lt;/a&gt;ないウィンドウサイズはコマンドラインで与えられていない場合。デフォルトは10です。</target>
        </trans-unit>
        <trans-unit id="2372575566ae8c805d7580bdcbad6da1c4463611" translate="yes" xml:space="preserve">
          <source>The size, in bytes, of the object (the same as &lt;code&gt;cat-file -s&lt;/code&gt; reports).</source>
          <target state="translated">オブジェクトのサイズ（バイト単位）（ &lt;code&gt;cat-file -s&lt;/code&gt; レポートと同じ）。</target>
        </trans-unit>
        <trans-unit id="43c333a5a6bd3bca8b34d5163a7aa7b6d79d2d40" translate="yes" xml:space="preserve">
          <source>The size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the &lt;code&gt;CAVEATS&lt;/code&gt; section below.</source>
          <target state="translated">オブジェクトがディスク上で占めるサイズ（バイト単位）。以下の「 &lt;code&gt;CAVEATS&lt;/code&gt; セクションのディスク上のサイズに関する注意を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d544171c06a9cb39c4059f830c0a8558d3922c9" translate="yes" xml:space="preserve">
          <source>The slash &lt;code&gt;/&lt;/code&gt; is used as the directory separator. Separators may occur at the beginning, middle or end of the &lt;code&gt;.gitignore&lt;/code&gt; search pattern.</source>
          <target state="translated">スラッシュ &lt;code&gt;/&lt;/code&gt; は、ディレクトリー区切り文字として使用されます。区切り &lt;code&gt;.gitignore&lt;/code&gt; は、.gitignore検索パターンの最初、中間、または最後に出現する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e18b2266f1b1b9062e466bd05dd697dc8d44c68f" translate="yes" xml:space="preserve">
          <source>The smaller the changes in your commit, the most effective &quot;git bisect&quot; will be. And you will probably need &quot;git bisect&quot; less in the first place, as small changes are easier to review even if they are only reviewed by the committer.</source>
          <target state="translated">コミットの変更点が小さければ小さいほど、&quot;git bisect&quot; は最も効果的です。また、小さな変更はコミット者だけがレビューしてもレビューしやすいので、そもそも &quot;git bisect &quot;の必要性は低くなるでしょう。</target>
        </trans-unit>
        <trans-unit id="0dab2fe7462a5d0c0b797d08e789dbaaf7bfa1df" translate="yes" xml:space="preserve">
          <source>The smart HTTP server, &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt;, will pass GIT_NAMESPACE through to the backend programs; see &lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend[1]&lt;/a&gt; for sample configuration to expose repository namespaces as repositories.</source>
          <target state="translated">スマートHTTPサーバー&lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]は&lt;/a&gt;、GIT_NAMESPACEをバックエンドプログラムに渡します。リポジトリの名前空間をリポジトリとして公開するための設定例については、&lt;a href=&quot;git-http-backend&quot;&gt;git-http-backend [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ee3be6f644f850e9ae409b580b74ced862493f8" translate="yes" xml:space="preserve">
          <source>The solution, of course, is to make a merge that we can undo: merge into a throw-away branch.</source>
          <target state="translated">解決策は、もちろん、元に戻せるようなマージをすることです。</target>
        </trans-unit>
        <trans-unit id="8a1117f540255f9a5dcffa1baa25558f77657b0e" translate="yes" xml:space="preserve">
          <source>The special case of restarting an incremental import from the current branch value should be written as:</source>
          <target state="translated">現在のブランチ値からインクリメンタルインポートを再開するという特殊なケースは、次のように書くべきです。</target>
        </trans-unit>
        <trans-unit id="3599d1b8b89ee48d0b633dcff9041c57284c3251" translate="yes" xml:space="preserve">
          <source>The special exit code 125 should be used when the current source code cannot be tested. If the script exits with this code, the current revision will be skipped (see &lt;code&gt;git bisect skip&lt;/code&gt; above). 125 was chosen as the highest sensible value to use for this purpose, because 126 and 127 are used by POSIX shells to signal specific error status (127 is for command not found, 126 is for command found but not executable&amp;mdash;​these details do not matter, as they are normal errors in the script, as far as &lt;code&gt;bisect run&lt;/code&gt; is concerned).</source>
          <target state="translated">現在のソースコードをテストできない場合は、特別な終了コード125を使用する必要があります。スクリプトがこのコードで終了した場合、現在のリビジョンはスキップされます（上記の &lt;code&gt;git bisect skip&lt;/code&gt; を参照）。 126と127はPOSIXシェルによって特定のエラーステータスを通知するために使用されるため、125はこの目的で使用する最高の賢明な値として選択されました（127はコマンドが見つからないことを示し、126はコマンドが見つかりましたが実行可能ではありません。これらの詳細はありません。問題は、 &lt;code&gt;bisect run&lt;/code&gt; に関する限り、スクリプトの通常のエラーであるためです。</target>
        </trans-unit>
        <trans-unit id="60ac8fe2a99f998c150bb7d9adc8dfbeed95a10d" translate="yes" xml:space="preserve">
          <source>The special null SHA-1 (40 zeros) specifies that the branch is to be removed.</source>
          <target state="translated">特殊なヌル SHA-1 (40 ゼロ)は、ブランチが削除されることを指定します。</target>
        </trans-unit>
        <trans-unit id="a4c2fa6682338e4d7c45557107add1984be0213c" translate="yes" xml:space="preserve">
          <source>The special refspec &lt;code&gt;:&lt;/code&gt; (or &lt;code&gt;+:&lt;/code&gt; to allow non-fast-forward updates) directs Git to push &quot;matching&quot; branches: for every branch that exists on the local side, the remote side is updated if a branch of the same name already exists on the remote side.</source>
          <target state="translated">特別なrefspec &lt;code&gt;:&lt;/code&gt; (または &lt;code&gt;+:&lt;/code&gt; 早送り以外の更新を可能にする）は、Gitに「一致する」ブランチをプッシュするように指示します。ローカル側に存在するすべてのブランチについて、同じ名前のブランチがすでに存在する場合、リモート側が更新されますリモート側。</target>
        </trans-unit>
        <trans-unit id="f2f702d2704e1b64279419d712ca4460c3b7f78e" translate="yes" xml:space="preserve">
          <source>The special string &lt;code&gt;none&lt;/code&gt; can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains.</source>
          <target state="translated">特別な文字列 &lt;code&gt;none&lt;/code&gt; をプロキシコマンドとして使用して、特定のドメインパターンにプロキシを使用しないことを指定できます。これは、ファイアウォールの内側にあるサーバーをプロキシーの使用から除外するのに役立ちますが、デフォルトでは外部ドメインの共通プロキシーになります。</target>
        </trans-unit>
        <trans-unit id="65b859a3a4528b4a1eebafeebe9d2d28ac0eb085" translate="yes" xml:space="preserve">
          <source>The special symbol &quot;HEAD&quot; can always be used to refer to the current branch. In fact, Git uses a file named &lt;code&gt;HEAD&lt;/code&gt; in the &lt;code&gt;.git&lt;/code&gt; directory to remember which branch is current:</source>
          <target state="translated">特殊記号「HEAD」は、常に現在のブランチを参照するために使用できます。実際には、Gitは使用していますという名前のファイル &lt;code&gt;HEAD&lt;/code&gt; 内 &lt;code&gt;.git&lt;/code&gt; 電流である枝を覚えておくディレクトリを：</target>
        </trans-unit>
        <trans-unit id="54b91d851f1b23aa70b29c0e74d2c28879b6de30" translate="yes" xml:space="preserve">
          <source>The ssh and git protocols additionally support ~username expansion:</source>
          <target state="translated">ssh と git プロトコルはさらに ~username の拡張をサポートしています。</target>
        </trans-unit>
        <trans-unit id="ac6c6d73b5f6b7c3cef28dfe32da61495601bd7c" translate="yes" xml:space="preserve">
          <source>The standard actions are:</source>
          <target state="translated">標準的な行動です。</target>
        </trans-unit>
        <trans-unit id="a72f515f06e2719cd062e161d9ed80a61b68c92f" translate="yes" xml:space="preserve">
          <source>The standard email format as described by RFC 2822, for example &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt;.</source>
          <target state="translated">RFC 2822で規定されている標準の電子メール形式（例： &lt;code&gt;Thu, 07 Apr 2005 22:13:13 +0200&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8128f4cfe82d86e129a0094608260664c3bb1ba3" translate="yes" xml:space="preserve">
          <source>The standard helper program to use with git-merge-index</source>
          <target state="translated">git-merge-index で使う標準のヘルパープログラム。</target>
        </trans-unit>
        <trans-unit id="4d34b021b617aa2bf3f93982ac428b041f085fbe" translate="yes" xml:space="preserve">
          <source>The starting point for the new branch. Specifying a &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; allows you to create a branch based on some other point in history than where HEAD currently points. (Or, in the case of &lt;code&gt;--detach&lt;/code&gt;, allows you to inspect and detach from some other point.)</source>
          <target state="translated">新しいブランチの開始点。 &lt;code&gt;&amp;lt;start-point&amp;gt;&lt;/code&gt; を指定すると、HEADが現在ポイントしている場所以外の、履歴内の別のポイントに基づいてブランチを作成できます。（または、ある場合には &lt;code&gt;--detach&lt;/code&gt; 、あなたが検査し、他のいくつかのポイントから切り離すことができます。）</target>
        </trans-unit>
        <trans-unit id="ca9ba47b83a1def4d8a6c769f2e642f061d5236a" translate="yes" xml:space="preserve">
          <source>The status of GPG verification of the push certificate, using the same mnemonic as used in &lt;code&gt;%G?&lt;/code&gt; format of &lt;code&gt;git log&lt;/code&gt; family of commands (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;%G?&lt;/code&gt; 使用されているのと同じニーモニックを使用した、プッシュ証明書のGPG検証のステータス？コマンドの &lt;code&gt;git log&lt;/code&gt; ファミリの形式（&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c902748a09ab505851b0b39809c60f3db2027be9" translate="yes" xml:space="preserve">
          <source>The status of the fetch is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">フェッチのステータスは表形式で出力され、各行は単一の ref のステータスを表します。各行の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7729563c964ef73ba71f39abfa320766ac0cea33" translate="yes" xml:space="preserve">
          <source>The status of the push is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</source>
          <target state="translated">プッシュのステータスは表形式で出力され、各行は 1 つの ref のステータスを表します。各行の形式は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e939f21e3282d453b1398071feb25115360b90b4" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if --porcelain or --verbose option is used.</source>
          <target state="translated">最新のリファレンスの状態は --porcelain または --verbose オプションが使用されている場合にのみ表示されます。</target>
        </trans-unit>
        <trans-unit id="0ebfa7ce02ec5605e425e0cd98062f5bbd8f2510" translate="yes" xml:space="preserve">
          <source>The status of up-to-date refs is shown only if the --verbose option is used.</source>
          <target state="translated">verboseオプションが使用されている場合にのみ、最新のRefの状態が表示されます。</target>
        </trans-unit>
        <trans-unit id="a97643bd561fabe3d136679e4752cb73667ec062" translate="yes" xml:space="preserve">
          <source>The structured objects can further have their structure and connectivity to other objects verified. This is generally done with the &lt;code&gt;git fsck&lt;/code&gt; program, which generates a full dependency graph of all objects, and verifies their internal consistency (in addition to just verifying their superficial consistency through the hash).</source>
          <target state="translated">構造化オブジェクトはさらに、その構造と他のオブジェクトへの接続を検証することができます。これは一般的に &lt;code&gt;git fsck&lt;/code&gt; プログラムで行われ、すべてのオブジェクトの完全な依存関係グラフが生成され、内部の一貫性が確認されます（ハッシュによる表面的な一貫性の確認に加えて）。</target>
        </trans-unit>
        <trans-unit id="af4ab93b8907c3bc82033e90c4bc6eedaac09e1c" translate="yes" xml:space="preserve">
          <source>The submit process invokes the editor before each p4 change is submitted. If this setting is true, though, the editing step is skipped.</source>
          <target state="translated">送信処理は、p4 の各変更が送信される前にエディタを起動します。しかし、この設定がtrueの場合、編集ステップはスキップされます。</target>
        </trans-unit>
        <trans-unit id="72386229ffdfc0f6ba847ccdd7620fcafabeae30" translate="yes" xml:space="preserve">
          <source>The submodule directories are there, but they&amp;rsquo;re empty:</source>
          <target state="translated">サブモジュールディレクトリはありますが、空です。</target>
        </trans-unit>
        <trans-unit id="802b1c9a36cac97c548242e11fe5baa3275576f0" translate="yes" xml:space="preserve">
          <source>The submodule will never be considered modified (but will nonetheless show up in the output of status and commit when it has been staged).</source>
          <target state="translated">このサブモジュールが変更されたとみなされることはありません (ただし、ステージされたときには status や commit の出力に表示されます)。</target>
        </trans-unit>
        <trans-unit id="7180d60887d97b6ca57dd91c2b86681f019ca631" translate="yes" xml:space="preserve">
          <source>The submodule&amp;rsquo;s &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file would come into play when running &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; in the superproject, as this would check if the submodule has any changes not published to any remote. The remotes are configured in the submodule as usual in the &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file.</source>
          <target state="translated">スーパー &lt;code&gt;git push --recurse-submodules=check&lt;/code&gt; を実行すると、サブモジュールの &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイルが機能します。これにより、サブモジュールにリモートに公開されていない変更があるかどうかが確認されます。 &lt;code&gt;$GIT_DIR/config&lt;/code&gt; は、通常どおり$ GIT_DIR / configファイルのサブモジュールで構成されます。</target>
        </trans-unit>
        <trans-unit id="2a87578b15befa74b2d27eca3216884ceb35493c" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{push}&lt;/code&gt; reports the branch &quot;where we would push to&quot; if &lt;code&gt;git push&lt;/code&gt; were run while &lt;code&gt;branchname&lt;/code&gt; was checked out (or the current &lt;code&gt;HEAD&lt;/code&gt; if no branchname is specified). Since our push destination is in a remote repository, of course, we report the local tracking branch that corresponds to that branch (i.e., something in &lt;code&gt;refs/remotes/&lt;/code&gt;).</source>
          <target state="translated">サフィックス &lt;code&gt;@{push}&lt;/code&gt; は、ブランチ &lt;code&gt;branchname&lt;/code&gt; がチェックアウトされているときに &lt;code&gt;git push&lt;/code&gt; が実行された場合（「ブランチ名が指定されていない場合は現在の &lt;code&gt;HEAD&lt;/code&gt; 」）、「プッシュ先」のブランチを報告します。プッシュ先はリモートリポジトリにあるため、もちろん、そのブランチに対応するローカルトラッキングブランチ（つまり、 &lt;code&gt;refs/remotes/&lt;/code&gt; ）を報告します。</target>
        </trans-unit>
        <trans-unit id="c10fd9c6c93e1de11dbe32978aa15d853b4103fb" translate="yes" xml:space="preserve">
          <source>The suffix &lt;code&gt;@{upstream}&lt;/code&gt; to a branchname (short form &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt;) refers to the branch that the branch specified by branchname is set to build on top of (configured with &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt;). A missing branchname defaults to the current one. These suffixes are also accepted when spelled in uppercase, and they mean the same thing no matter the case.</source>
          <target state="translated">ブランチ名のサフィックス &lt;code&gt;@{upstream}&lt;/code&gt; （省略形 &lt;code&gt;&amp;lt;branchname&amp;gt;@{u}&lt;/code&gt; ）は、branchnameで指定されたブランチが（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; および &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; 構成されて）構築するように設定されているブランチを指します。 &amp;lt;名前&amp;gt; .merge）。欠落しているブランチ名はデフォルトで現在の名前になります。これらのサフィックスは、大文字のスペルでも受け入れられ、大文字と小文字が同じであることを意味します。</target>
        </trans-unit>
        <trans-unit id="35fca7d90e0c51050df5863335fd96cb674d847a" translate="yes" xml:space="preserve">
          <source>The symlink will either be absolute (beginning with a /), or relative to the tree root. For instance, if dir/link points to ../../foo, then &amp;lt;symlink&amp;gt; will be ../foo. &amp;lt;size&amp;gt; is the size of the symlink in bytes.</source>
          <target state="translated">シンボリックリンクは、絶対（/で始まる）、またはツリーのルートに対して相対的です。たとえば、dir / linkが../../fooを指している場合、&amp;lt;symlink&amp;gt;は../fooになります。&amp;lt;size&amp;gt;は、バイト単位のシンボリックリンクのサイズです。</target>
        </trans-unit>
        <trans-unit id="1e32c77f2578ce3c979cd217827d9aa3c6897be9" translate="yes" xml:space="preserve">
          <source>The syntax is fairly flexible and permissive; whitespaces are mostly ignored. The &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; characters begin comments to the end of line, blank lines are ignored.</source>
          <target state="translated">構文はかなり柔軟で寛容です。空白はほとんど無視されます。 &lt;code&gt;#&lt;/code&gt; と &lt;code&gt;;&lt;/code&gt; 文字はコメントを行末まで開始し、空白行は無視されます。</target>
        </trans-unit>
        <trans-unit id="e9a240786337cb206c43c416821000b9a6721022" translate="yes" xml:space="preserve">
          <source>The syntax of the configuration files is that of Perl, since these files are handled by sourcing them as fragments of Perl code (the language that gitweb itself is written in). Variables are typically set using the &lt;code&gt;our&lt;/code&gt; qualifier (as in &quot;&lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt;&quot;) to avoid syntax errors if a new version of gitweb no longer uses a variable and therefore stops declaring it.</source>
          <target state="translated">構成ファイルの構文はPerlの構文です。これらのファイルは、Perlコード（gitweb自体が記述されている言語）のフラグメントとしてソースによって処理されるためです。変数は通常 &lt;code&gt;our&lt;/code&gt; 修飾子を使用して設定され（「 &lt;code&gt;our $variable = &amp;lt;value&amp;gt;;&lt;/code&gt; 」のように）、新しいバージョンのgitwebが変数を使用しなくなったために宣言を停止した場合の構文エラーを回避します。</target>
        </trans-unit>
        <trans-unit id="85d5722bf15562fb833fe3c8f580a92fe2e2d3db" translate="yes" xml:space="preserve">
          <source>The tables below show what happens when running:</source>
          <target state="translated">以下の表は、実行時に何が起こるかを示しています。</target>
        </trans-unit>
        <trans-unit id="0ab961c529e0da6916842ede03d74fc7b0e0f90e" translate="yes" xml:space="preserve">
          <source>The tag &lt;code&gt;v2.6.18&lt;/code&gt; is short for &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;v2.6.18&lt;/code&gt; は &lt;code&gt;refs/tags/v2.6.18&lt;/code&gt; の略です。</target>
        </trans-unit>
        <trans-unit id="e5173af0305c1d6df2de24b7ea317c256f65109e" translate="yes" xml:space="preserve">
          <source>The template directory will be one of the following (in order):</source>
          <target state="translated">テンプレートディレクトリは以下のいずれかになります(順不同)。</target>
        </trans-unit>
        <trans-unit id="45d4fdaf8fe9ac583ec50051c8f5eb8c944a1ec1" translate="yes" xml:space="preserve">
          <source>The term &lt;a href=&quot;#def_pickaxe&quot;&gt;pickaxe&lt;/a&gt; refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the &lt;code&gt;--pickaxe-all&lt;/code&gt; option, it can be used to view the full &lt;a href=&quot;#def_changeset&quot;&gt;changeset&lt;/a&gt; that introduced or removed, say, a particular line of text. See &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_pickaxe&quot;&gt;ピッケル&lt;/a&gt;という用語は、指定されたテキスト文字列を追加または削除する変更を選択するのに役立つdiffcoreルーチンのオプションを指します。 &lt;code&gt;--pickaxe-all&lt;/code&gt; オプション、完全な表示するために使用することができ&lt;a href=&quot;#def_changeset&quot;&gt;チェンジ&lt;/a&gt;導入または削除、と言うことを、テキストの特定の行を。&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d2ba0595fa8d197d8c3640c03007e070ceba5b47" translate="yes" xml:space="preserve">
          <source>The text conversion is generally a one-way conversion; in this example, we lose the actual image contents and focus just on the text data. This means that diffs generated by textconv are &lt;em&gt;not&lt;/em&gt; suitable for applying. For this reason, only &lt;code&gt;git diff&lt;/code&gt; and the &lt;code&gt;git log&lt;/code&gt; family of commands (i.e., log, whatchanged, show) will perform text conversion. &lt;code&gt;git
format-patch&lt;/code&gt; will never generate this output. If you want to send somebody a text-converted diff of a binary file (e.g., because it quickly conveys the changes you have made), you should generate it separately and send it as a comment &lt;em&gt;in addition to&lt;/em&gt; the usual binary diff that you might send.</source>
          <target state="translated">テキスト変換は通常、一方向の変換です。この例では、実際の画像コンテンツが失われ、テキストデータだけに焦点が当てられます。つまり、textconvによって生成されたdiffは適用に適して&lt;em&gt;いません&lt;/em&gt;。このため、テキスト変換を実行するのは、 &lt;code&gt;git diff&lt;/code&gt; および &lt;code&gt;git log&lt;/code&gt; ファミリーのコマンド（つまり、log、whatchanged、show）だけです。 &lt;code&gt;git format-patch&lt;/code&gt; がこの出力を生成することはありません。バイナリファイルのテキスト変換された差分を誰かに送信する場合（たとえば、行った変更をすばやく伝えるため）、それを個別に生成&lt;em&gt;し&lt;/em&gt;、通常のバイナリ差分&lt;em&gt;に加えて&lt;/em&gt;コメントとして送信する必要があります。送信します。</target>
        </trans-unit>
        <trans-unit id="eb234a21c48fd769b7576108683d04bf29f253cb" translate="yes" xml:space="preserve">
          <source>The third syntax (&quot;&lt;code&gt;git merge --continue&lt;/code&gt;&quot;) can only be run after the merge has resulted in conflicts.</source>
          <target state="translated">3番目の構文（ &quot; &lt;code&gt;git merge --continue&lt;/code&gt; &quot;）は、マージによって競合が発生した後にのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="a25be90a41e318ce76ddb9737f9c1a04e1e950e3" translate="yes" xml:space="preserve">
          <source>The time between the first rc release and the final release is supposed to be used to test rc versions and fight bugs and especially regressions. And this time is more than 80% of the release cycle time. But this is not the end of the fight yet, as of course it continues after the release.</source>
          <target state="translated">最初の rc リリースから最終リリースまでの時間は、rc のバージョンをテストし、バグと戦い、特にリグレッションと戦うために使われることになっています。そして、この時間はリリースサイクル時間の80%以上を占めています。しかし、リリース後ももちろん続いているので、これでまだ戦いが終わったわけではありません。</target>
        </trans-unit>
        <trans-unit id="75271c1b7d85cdfdc3bad04249d4464b9c292a44" translate="yes" xml:space="preserve">
          <source>The time of the change is specified by &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; using the date format that was selected by the --date-format=&amp;lt;fmt&amp;gt; command-line option. See &amp;ldquo;Date Formats&amp;rdquo; above for the set of supported formats, and their syntax.</source>
          <target state="translated">変更の時刻は、-date-format = &amp;lt;fmt&amp;gt;コマンドラインオプションで選択された日付形式を使用して、 &lt;code&gt;&amp;lt;when&amp;gt;&lt;/code&gt; で指定されます。サポートされている形式のセットとその構文については、上記の「日付形式」を参照してください。</target>
        </trans-unit>
        <trans-unit id="05b9a4ac37ff05623171d65150ac27013efa2fa0" translate="yes" xml:space="preserve">
          <source>The time of the event is specified by &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; as the number of seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII decimal integer.</source>
          <target state="translated">イベントの時間は、UNIXエポック（1970年1月1日午前0時）からの秒数として &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; で指定され、ASCII 10進整数として書き込まれます。</target>
        </trans-unit>
        <trans-unit id="e85bdfa8e02113c7aa36696add629ec632f05440" translate="yes" xml:space="preserve">
          <source>The todo list presented by the deprecated &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; does not represent the topology of the revision graph (use &lt;code&gt;--rebase-merges&lt;/code&gt; instead). Editing commits and rewording their commit messages should work fine, but attempts to reorder commits tend to produce counterintuitive results. Use &lt;code&gt;--rebase-merges&lt;/code&gt; in such scenarios instead.</source>
          <target state="translated">非推奨の &lt;code&gt;--preserve-merges --interactive&lt;/code&gt; によって表示されるtodoリストは、リビジョングラフのトポロジを表していません（代わりに &lt;code&gt;--rebase-merges&lt;/code&gt; を使用してください）。コミットの編集とコミットメッセージの言い換えは問題なく機能するはずですが、コミットの順序を変更しようとすると、直感に反する結果が生じる傾向があります。代わりに、そのようなシナリオでは &lt;code&gt;--rebase-merges&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="0f8166907df228eb9266d7566c3cde991d9d39bd" translate="yes" xml:space="preserve">
          <source>The total number of paths.</source>
          <target state="translated">パスの総数です。</target>
        </trans-unit>
        <trans-unit id="46c0269533706ef03961ed4548e480cdcfd7a84a" translate="yes" xml:space="preserve">
          <source>The trailer records 20-byte SHA-1 checksum of all of the above.</source>
          <target state="translated">トレーラーには、上記のすべての20バイトのSHA-1チェックサムが記録されています。</target>
        </trans-unit>
        <trans-unit id="b9ae27ef547547fea9cd9f5b91bb86a4c8f93238" translate="yes" xml:space="preserve">
          <source>The trailer records a pack checksum of all of the above.</source>
          <target state="translated">トレーラーには上記の全てのパックチェックサムが記録されています。</target>
        </trans-unit>
        <trans-unit id="9380254df0eb0e126f55d72177d625190ab23928" translate="yes" xml:space="preserve">
          <source>The transmission of the packfile begins immediately after the section header</source>
          <target state="translated">パックファイルの送信は、セクションヘッダの直後に開始されます。</target>
        </trans-unit>
        <trans-unit id="de285c430d2e1f897693d7ccc23434e1a3a5c103" translate="yes" xml:space="preserve">
          <source>The tree object is the tree we examined first, and this commit is unusual in that it lacks any parent.</source>
          <target state="translated">ツリーオブジェクトは最初に調べたツリーであり、このコミットは親がいないという珍しいものです。</target>
        </trans-unit>
        <trans-unit id="9178b43dc9b2907a6afd7a3693f2c6894ec0ecd9" translate="yes" xml:space="preserve">
          <source>The tree of actual checked out files. The working tree normally contains the contents of the &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; commit&amp;rsquo;s tree, plus any local changes that you have made but not yet committed.</source>
          <target state="translated">実際にチェックアウトされたファイルのツリー。作業ツリーには通常、&lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt;コミットのツリーの内容と、加えたがまだコミットされていないローカル変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="26b5c7d70f82997ceabb111adeeb911e4d89a340" translate="yes" xml:space="preserve">
          <source>The tree or commit to produce an archive for.</source>
          <target state="translated">アーカイブを生成するためのツリーまたはコミット。</target>
        </trans-unit>
        <trans-unit id="90f78952a054862b4ed6d79982e2eab2fc081a24" translate="yes" xml:space="preserve">
          <source>The twist is that if some file doesn&amp;rsquo;t match the index, we don&amp;rsquo;t have a backing store thing for it, and we use the magic &quot;all-zero&quot; sha1 to show that. So let&amp;rsquo;s say that you have edited &lt;code&gt;kernel/sched.c&lt;/code&gt;, but have not actually done a &lt;code&gt;git update-index&lt;/code&gt; on it yet - there is no &quot;object&quot; associated with the new state, and you get:</source>
          <target state="translated">ツイストは、一部のファイルがインデックスと一致しない場合、そのバッキングストアがないため、魔法の「すべてゼロ」のsha1を使用してそれを示すことです。では、 &lt;code&gt;kernel/sched.c&lt;/code&gt; を編集したが、実際にはまだ &lt;code&gt;git update-index&lt;/code&gt; を実行していないとしましょう。新しい状態に関連付けられた「オブジェクト」はなく、次のようになります。</target>
        </trans-unit>
        <trans-unit id="43d0ee9ad50c1c3c133c4c2ff3f216463ab119aa" translate="yes" xml:space="preserve">
          <source>The two options can be specified together to ask a command to work on both the index and the working tree.</source>
          <target state="translated">この2つのオプションを一緒に指定すると、インデックスと作業ツリーの両方で動作するようにコマンドを指定することができます。</target>
        </trans-unit>
        <trans-unit id="293c342524c5d665ec090c34f37c73d153be74d5" translate="yes" xml:space="preserve">
          <source>The type of the object (&lt;code&gt;blob&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;).</source>
          <target state="translated">オブジェクトのタイプ（ &lt;code&gt;blob&lt;/code&gt; 、 &lt;code&gt;tree&lt;/code&gt; 、 &lt;code&gt;commit&lt;/code&gt; 、 &lt;code&gt;tag&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="35ca6d49608b210b7cf8be4b86261fa4bd55e249" translate="yes" xml:space="preserve">
          <source>The type of the object (the same as &lt;code&gt;cat-file -t&lt;/code&gt; reports).</source>
          <target state="translated">オブジェクトのタイプ（ &lt;code&gt;cat-file -t&lt;/code&gt; レポートと同じ）。</target>
        </trans-unit>
        <trans-unit id="a4f9324e934e3998d2ea50e9e2c5152c5cb8ca76" translate="yes" xml:space="preserve">
          <source>The typical usage is to set just the &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; variables; the other options are provided for more complex use cases.</source>
          <target state="translated">一般的な使用法は、 &lt;code&gt;user.name&lt;/code&gt; 変数と &lt;code&gt;user.email&lt;/code&gt; 変数のみを設定することです。他のオプションは、より複雑なユースケースのために提供されています。</target>
        </trans-unit>
        <trans-unit id="4785efb96aaa5561500dccbb8420f79e52290b85" translate="yes" xml:space="preserve">
          <source>The underlying Git plumbing tools, such as &lt;code&gt;git ls-files&lt;/code&gt; and &lt;code&gt;git read-tree&lt;/code&gt;, read &lt;code&gt;gitignore&lt;/code&gt; patterns specified by command-line options, or from files specified by command-line options. Higher-level Git tools, such as &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git add&lt;/code&gt;, use patterns from the sources specified above.</source>
          <target state="translated">&lt;code&gt;git ls-files&lt;/code&gt; や &lt;code&gt;git read-tree&lt;/code&gt; などの基盤となるGit配管ツールは、コマンドラインオプションで指定された &lt;code&gt;gitignore&lt;/code&gt; パターンを読み取るか、コマンドラインオプションで指定されたファイルから読み取ります。 &lt;code&gt;git status&lt;/code&gt; や &lt;code&gt;git add&lt;/code&gt; などの高レベルのGitツールは、上記で指定されたソースのパターンを使用します。</target>
        </trans-unit>
        <trans-unit id="c7717dd458d0c51efaa12d77d8ac91e6b1b7952a" translate="yes" xml:space="preserve">
          <source>The unique identifier of an &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;. The object name is usually represented by a 40 character hexadecimal string. Also colloquially called &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_object&quot;&gt;オブジェクト&lt;/a&gt;の一意の識別子。オブジェクト名は通常、40文字の16進文字列で表されます。口語的に&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="190c2fffcaa0444f677f39ee7f8533684a0964b1" translate="yes" xml:space="preserve">
          <source>The unit of storage in Git. It is uniquely identified by the &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; of its contents. Consequently, an object cannot be changed.</source>
          <target state="translated">Gitでのストレージの単位。コンテンツの&lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt;によって一意に識別されます。したがって、オブジェクトは変更できません。</target>
        </trans-unit>
        <trans-unit id="39871fae2a5575ced5627a5aed0eb792e4c6cc2e" translate="yes" xml:space="preserve">
          <source>The untracked cache extension can be enabled by the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">追跡されないキャッシュ拡張機能は、 &lt;code&gt;core.untrackedCache&lt;/code&gt; 構成変数（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）ます。</target>
        </trans-unit>
        <trans-unit id="cc7260429a75073116cdc4eb67dbd95326cbd29d" translate="yes" xml:space="preserve">
          <source>The upstream project is expected to have the commit named by &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; and the output asks it to integrate the changes you made since that commit, up to the commit named by &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt;, by visiting the repository named by &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">上流プロジェクトには &lt;code&gt;&amp;lt;start&amp;gt;&lt;/code&gt; で指定されたコミットがあると予想され、出力には、そのコミット以降に加えられた変更を、 &lt;code&gt;&amp;lt;end&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;url&amp;gt;&lt;/code&gt; という名前のリポジトリにアクセス &amp;lt;end&amp;gt;ます。</target>
        </trans-unit>
        <trans-unit id="90c1df21766dd92e926e4168cc9d516f756c7832" translate="yes" xml:space="preserve">
          <source>The upstream reference is generally &lt;code&gt;refs/remotes/p4/master&lt;/code&gt;, but can be overridden using the &lt;code&gt;--origin=&lt;/code&gt; command-line option.</source>
          <target state="translated">上流のリファレンスは一般的に &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; ですが、-- &lt;code&gt;--origin=&lt;/code&gt; コマンドラインオプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="26e6d639f86a47deca57ab3911edaae9c5141f38" translate="yes" xml:space="preserve">
          <source>The user wants to fast-forward to $M.</source>
          <target state="translated">ユーザーは$Mに早送りしたいと思っています。</target>
        </trans-unit>
        <trans-unit id="6df61c6f9e257fdbf1ce4a60fb1d73b618d329ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s color.status configuration is not respected; color will always be off.</source>
          <target state="translated">ユーザーのcolor.status設定は尊重されません。色は常にオフになります。</target>
        </trans-unit>
        <trans-unit id="ab6a20b222f27dba657bc91ae7970effd7a690ca" translate="yes" xml:space="preserve">
          <source>The user&amp;rsquo;s status.relativePaths configuration is not respected; paths shown will always be relative to the repository root.</source>
          <target state="translated">ユーザーのstatus.relativePaths構成は考慮されません。表示されるパスは、常にリポジトリルートからの相対パスになります。</target>
        </trans-unit>
        <trans-unit id="20126eaca194f3ace1deaba2aaa4133e6326b674" translate="yes" xml:space="preserve">
          <source>The user-provided shell commands will likely involve a pipeline of commands, resulting in the creation of many processes per commit. Creating and running another process takes a widely varying amount of time between operating systems, but on any platform it is very slow relative to invoking a function.</source>
          <target state="translated">ユーザーが提供するシェルコマンドには、コマンドのパイプラインが含まれている可能性が高く、その結果、コミットごとに多くのプロセスが作成されます。別のプロセスを作成して実行するのにかかる時間はオペレーティングシステムによって大きく異なりますが、どのプラットフォームでも関数を呼び出すのに比べて非常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="b70cc2efdcbaf68bada34e0550746a0012d52bae" translate="yes" xml:space="preserve">
          <source>The username to use when logging in to the server.</source>
          <target state="translated">サーバーにログインする際に使用するユーザー名。</target>
        </trans-unit>
        <trans-unit id="46c33e134557b27ccb1a85349808f80ba518bd84" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;add&lt;/code&gt; (this is the default) and &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">このオプションの有効な値は、 &lt;code&gt;add&lt;/code&gt; （これがデフォルトです）と &lt;code&gt;doNothing&lt;/code&gt; です。です。</target>
        </trans-unit>
        <trans-unit id="17a990c606d2e2e22a8f755a1f843b57ef2f5ef2" translate="yes" xml:space="preserve">
          <source>The valid values for this option are: &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; (this is the default), &lt;code&gt;addIfDifferent&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; or &lt;code&gt;doNothing&lt;/code&gt;.</source>
          <target state="translated">このオプションの有効な値は、 &lt;code&gt;addIfDifferentNeighbor&lt;/code&gt; （これがデフォルトです）、 &lt;code&gt;addIfDifferent&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;replace&lt;/code&gt; 、または &lt;code&gt;doNothing&lt;/code&gt; です。です。</target>
        </trans-unit>
        <trans-unit id="505e929c5c3b27eed17b03a2625718de5c7f7031" translate="yes" xml:space="preserve">
          <source>The value for a variable that takes a color is a list of colors (at most two, one for foreground and one for background) and attributes (as many as you want), separated by spaces.</source>
          <target state="translated">色を取る変数の値は、スペースで区切られた色(最大でも2つ、前景用と背景用に1つずつ)と属性(必要な数だけ)のリストです。</target>
        </trans-unit>
        <trans-unit id="e1d242fc18797a443a86ba553d48e3f3cae01e9a" translate="yes" xml:space="preserve">
          <source>The value for many variables that specify various sizes can be suffixed with &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;M&lt;/code&gt;,&amp;hellip;​ to mean &quot;scale the number by 1024&quot;, &quot;by 1024x1024&quot;, etc.</source>
          <target state="translated">さまざまなサイズを指定する多くの変数の値の末尾に &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;M&lt;/code&gt; 、&amp;hellip;を付けると、「1024で数値をスケーリング」、「1024x1024で」などの意味になります。</target>
        </trans-unit>
        <trans-unit id="f1dedc58ec3c676ad597a786553123421e517365" translate="yes" xml:space="preserve">
          <source>The value is a list of three values: a default time zone (for if the client hasn&amp;rsquo;t selected some other time zone and saved it in a cookie), a name of cookie where to store selected time zone, and a CSS class used to mark up dates for manipulation. If you want to turn this feature off, set &quot;default&quot; to empty list: &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">値は3つの値のリストです。デフォルトのタイムゾーン（クライアントが他のタイムゾーンを選択しておらず、Cookieに保存していない場合）、選択したタイムゾーンを保存するCookieの名前、使用するCSSクラス操作の日付をマークアップします。この機能をオフにする場合は、「デフォルト」を空のリストに設定します。 &lt;code&gt;[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0462ada8e80b752f4ecad69fb2563ec0b8b930aa" translate="yes" xml:space="preserve">
          <source>The value of 'default' is a list of names of snapshot formats, defined in &lt;code&gt;%known_snapshot_formats&lt;/code&gt; hash, that you wish to offer. Supported formats include &quot;tgz&quot;, &quot;tbz2&quot;, &quot;txz&quot; (gzip/bzip2/xz compressed tar archive) and &quot;zip&quot;; please consult gitweb sources for a definitive list. By default only &quot;tgz&quot; is offered.</source>
          <target state="translated">'default'の値は、 &lt;code&gt;%known_snapshot_formats&lt;/code&gt; で定義されているスナップショット形式の名前のリストです。ハッシュで、提供する。サポートされる形式には、「tgz」、「tbz2」、「txz」（gzip / bzip2 / xz圧縮tarアーカイブ）、「zip」が含まれます。明確なリストについては、gitwebソースを参照してください。デフォルトでは「tgz」のみが提供されます。</target>
        </trans-unit>
        <trans-unit id="c34b53e9a12553098df9adad4c30762484ffde18" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; must be a valid refname in Git and therefore may contain forward slashes. As &lt;code&gt;LF&lt;/code&gt; is not valid in a Git refname, no quoting or escaping syntax is supported here.</source>
          <target state="translated">&lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; の値はGitで有効なrefnameである必要があるため、スラッシュを含めることができます。 &lt;code&gt;LF&lt;/code&gt; として Gitのもしrefnameでは有効ではありません、何の引用またはエスケープ構文は、ここでサポートされていません。</target>
        </trans-unit>
        <trans-unit id="8b5a30f586808b1827fdb8f433a15c6c9d49f6ba" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; must be in canonical form. That is it must not:</source>
          <target state="translated">&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; の値は、正規の形式でなければなりません。それはそれであってはなりません：</target>
        </trans-unit>
        <trans-unit id="dfb2ec984e9987b1b930824861a3abbf3e4aa29f" translate="yes" xml:space="preserve">
          <source>The value of this attribute specifies the character encoding that should be used by GUI tools (e.g. &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; and &lt;a href=&quot;git-gui&quot;&gt;git-gui[1]&lt;/a&gt;) to display the contents of the relevant file. Note that due to performance considerations &lt;a href=&quot;gitk&quot;&gt;gitk[1]&lt;/a&gt; does not use this attribute unless you manually enable per-file encodings in its options.</source>
          <target state="translated">この属性の値は、関連ファイルのコンテンツを表示するためにGUIツール（たとえば&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;や&lt;a href=&quot;git-gui&quot;&gt;git-gui [1]&lt;/a&gt;）が使用する文字エンコーディングを指定します。オプションでファイルごとのエンコーディングを手動で有効にしない限り、&lt;a href=&quot;gitk&quot;&gt;gitk [1]&lt;/a&gt;はパフォーマンスを考慮してこの属性を使用しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4bdcd2a8dee01aee6c5f0f23e7e10ac25985aae6" translate="yes" xml:space="preserve">
          <source>The value of this key is the name of the promisor remote.</source>
          <target state="translated">このキーの値は、プロバイザリモートの名前です。</target>
        </trans-unit>
        <trans-unit id="49e3be97b83e2e2d47823db7b33592c5066364cc" translate="yes" xml:space="preserve">
          <source>The version parameter is used to specify the format version. This is optional and defaults to the original version &lt;code&gt;v1&lt;/code&gt; format.</source>
          <target state="translated">versionパラメータは、フォーマットバージョンを指定するために使用されます。これはオプションであり、デフォルトで元のバージョン &lt;code&gt;v1&lt;/code&gt; 形式になります。</target>
        </trans-unit>
        <trans-unit id="a720bc9826a296e909d26ea1e1addd2076945090" translate="yes" xml:space="preserve">
          <source>The victim sends &quot;have&quot; lines advertising the IDs of objects it has that are not explicitly intended to be shared but can be used to optimize the transfer if the peer also has them. The attacker chooses an object ID X to steal and sends a ref to X, but isn&amp;rsquo;t required to send the content of X because the victim already has it. Now the victim believes that the attacker has X, and it sends the content of X back to the attacker later. (This attack is most straightforward for a client to perform on a server, by creating a ref to X in the namespace the client has access to and then fetching it. The most likely way for a server to perform it on a client is to &quot;merge&quot; X into a public branch and hope that the user does additional work on this branch and pushes it back to the server without noticing the merge.)</source>
          <target state="translated">犠牲者は、共有することを明示的に意図されていないオブジェクトのIDをアドバタイズする「have」行を送信しますが、ピアがそれらを持っている場合は転送を最適化するために使用できます。攻撃者は盗むオブジェクトID Xを選択し、Xに参照を送信しますが、被害者がすでに持っているため、Xのコンテンツを送信する必要はありません。これで被害者は攻撃者がXを持っていると信じ、Xの内容を後で攻撃者に送り返します。 （この攻撃は、クライアントがアクセスできるネームスペースにXへの参照を作成してからフェッチすることにより、クライアントがサーバーで実行するのが最も簡単です。サーバーがクライアントで実行する可能性が最も高い方法は、 &quot;マージ &quot;Xをパブリックブランチにマージし、ユーザーがこのブランチで追加の作業を行い、マージに気付かずにサーバーにプッシュすることを期待します。）</target>
        </trans-unit>
        <trans-unit id="bad569f9e07003c7e9ba90b91ff6d5e2d3ebab92" translate="yes" xml:space="preserve">
          <source>The virtual host configuration (in Apache configuration file) should look like this:</source>
          <target state="translated">(Apache の設定ファイルの)バーチャルホストの設定は以下のようになっているはずです。</target>
        </trans-unit>
        <trans-unit id="6258db9fdd3beac891e6dcfd7dedb19764ce413e" translate="yes" xml:space="preserve">
          <source>The way &lt;code&gt;git update-index&lt;/code&gt; handles files it is told about can be modified using the various options:</source>
          <target state="translated">道 &lt;code&gt;git update-index&lt;/code&gt; ハンドルファイルは、それが様々なオプションを使用して変更することができますについて語られています：</target>
        </trans-unit>
        <trans-unit id="ae6c5b18c0fd18e4f577ab3723eb5808f05d9f12" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web--browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt; for more information about this.</source>
          <target state="translated">Webブラウザは、構成変数の使用して指定することができ &lt;code&gt;help.browser&lt;/code&gt; 、または &lt;code&gt;web.browser&lt;/code&gt; を前者が設定されていない場合。これらの構成変数のいずれも設定されていない場合、 &lt;code&gt;git web--browse&lt;/code&gt; ヘルパースクリプト（ &lt;code&gt;git help&lt;/code&gt; によって呼び出されます）が適切なデフォルトを選択します。詳細については、&lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc2adc08265063993fb836b81a622f1e26249d55" translate="yes" xml:space="preserve">
          <source>The web browser can be specified using the configuration variable &lt;code&gt;help.browser&lt;/code&gt;, or &lt;code&gt;web.browser&lt;/code&gt; if the former is not set. If none of these config variables is set, the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script (called by &lt;code&gt;git help&lt;/code&gt;) will pick a suitable default. See git-web{litdd}browse[1] for more information about this.</source>
          <target state="translated">Webブラウザは、構成変数の使用して指定することができ &lt;code&gt;help.browser&lt;/code&gt; 、または &lt;code&gt;web.browser&lt;/code&gt; を前者が設定されていない場合。これらの構成変数が設定されていない場合、 &lt;code&gt;git web{litdd}browse&lt;/code&gt; ヘルパースクリプト（ &lt;code&gt;git help&lt;/code&gt; によって呼び出されます）が適切なデフォルトを選択します。これについての詳細は、git-web {litdd} browse [1]を参照してください。</target>
        </trans-unit>
        <trans-unit id="d52f23a775c5f3aadffb0193202482a8a4b8d0b1" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web--browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See &lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse[1]&lt;/a&gt; for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="translated">gitwebページを表示するために使用する必要があるWebブラウザー。これは、gitweb &lt;code&gt;git web--browse&lt;/code&gt; ヘルパースクリプトにgitwebインスタンスのURLとともに渡されます。詳細については、&lt;a href=&quot;git-web--browse&quot;&gt;git-web--browse [1]&lt;/a&gt;を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="c38f40c77930468f76ac59e3f127231f37c11803" translate="yes" xml:space="preserve">
          <source>The web browser that should be used to view the gitweb page. This will be passed to the &lt;code&gt;git web{litdd}browse&lt;/code&gt; helper script along with the URL of the gitweb instance. See git-web{litdd}browse[1] for more information about this. If the script fails, the URL will be printed to stdout.</source>
          <target state="translated">gitwebページの表示に使用する必要があるWebブラウザー。これは、gitwebインスタンスのURLとともに &lt;code&gt;git web{litdd}browse&lt;/code&gt; ヘルパースクリプトに渡されます。これについての詳細は、git-web {litdd} browse [1]を参照してください。スクリプトが失敗した場合、URLはstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="c7492cc5fa9e9927a227312bd1f1ea85a3766cb5" translate="yes" xml:space="preserve">
          <source>The width (in characters) of the &quot;Description&quot; column of the projects list. Longer descriptions will be truncated (trying to cut at word boundary); the full description is available in the &lt;code&gt;title&lt;/code&gt; attribute (usually shown on mouseover). The default is 25, which might be too small if you use long project descriptions.</source>
          <target state="translated">プロジェクトリストの[説明]列の幅（文字数）。長い説明は切り捨てられます（単語の境界でカットしようとします）。完全な説明は、 &lt;code&gt;title&lt;/code&gt; 属性で利用できます（通常はマウスオーバーで表示されます）。デフォルトは25ですが、長いプロジェクトの説明を使用する場合は小さすぎる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2a9553b8b798d28f6c8fd9f09980f5b7959498e9" translate="yes" xml:space="preserve">
          <source>The window size parameter used in the delta compression algorithm used by &lt;code&gt;git gc --aggressive&lt;/code&gt;. This defaults to 250, which is a much more aggressive window size than the default &lt;code&gt;--window&lt;/code&gt; of 10.</source>
          <target state="translated">&lt;code&gt;git gc --aggressive&lt;/code&gt; で使用されるデルタ圧縮アルゴリズムで使用されるウィンドウサイズパラメーター。デフォルトは250です。これは、デフォルトの &lt;code&gt;--window&lt;/code&gt; である10 よりもはるかに積極的なウィンドウサイズです。</target>
        </trans-unit>
        <trans-unit id="046739930d5e8946cdceaf820a70c4ac9ebc8d51" translate="yes" xml:space="preserve">
          <source>The working directory then reflects the contents that the project had when it was tagged v2.6.13, and &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt; shows two branches, with an asterisk marking the currently checked-out branch:</source>
          <target state="translated">作業ディレクトリは、v2.6.13のタグが付けられたときのプロジェクトの内容を反映し、&lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt;は2つのブランチを示し、アスタリスクは現在チェックアウトされているブランチを示しています。</target>
        </trans-unit>
        <trans-unit id="c76d23bfcb6d4a63fd96acda23f8bee068090518" translate="yes" xml:space="preserve">
          <source>The worktree list command has two output formats. The default format shows the details on a single line with columns. For example:</source>
          <target state="translated">ワークツリーリストコマンドには2つの出力フォーマットがあります。デフォルトのフォーマットでは、詳細を1行に列で表示します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="ecaf7c5f30215b083ffbd406549425a7d1040c7d" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git merge topic&lt;/code&gt;&quot; will replay the changes made on the &lt;code&gt;topic&lt;/code&gt; branch since it diverged from &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt;, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">次に、「 &lt;code&gt;git merge topic&lt;/code&gt; 」は、 &lt;code&gt;topic&lt;/code&gt; ブランチに加えられた変更を &lt;code&gt;master&lt;/code&gt; （つまり &lt;code&gt;E&lt;/code&gt; ）から現在のコミット（ &lt;code&gt;C&lt;/code&gt; ）の上に &lt;code&gt;master&lt;/code&gt; まで分岐してから、その結果を新しいコミットに名前とともに記録します。 2つの親コミットと、変更を説明するユーザーからのログメッセージ。</target>
        </trans-unit>
        <trans-unit id="f3bf49c80f1bf671798b336ee7a6337eb982b2bc" translate="yes" xml:space="preserve">
          <source>Then &quot;&lt;code&gt;git pull&lt;/code&gt;&quot; will fetch and replay the changes from the remote &lt;code&gt;master&lt;/code&gt; branch since it diverged from the local &lt;code&gt;master&lt;/code&gt; (i.e., &lt;code&gt;E&lt;/code&gt;) until its current commit (&lt;code&gt;C&lt;/code&gt;) on top of &lt;code&gt;master&lt;/code&gt; and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</source>
          <target state="translated">そして、「 &lt;code&gt;git pull&lt;/code&gt; 」リモートからの変更フェッチし、再生します &lt;code&gt;master&lt;/code&gt; は、ローカルから分岐するので枝を &lt;code&gt;master&lt;/code&gt; （すなわち、 &lt;code&gt;E&lt;/code&gt; ）の電流が（コミットするまで &lt;code&gt;C&lt;/code&gt; の上に） &lt;code&gt;master&lt;/code&gt; と新しい一緒にコミットして結果を記録します2つの親コミットの名前と、変更を説明するユーザーからのログメッセージ。</target>
        </trans-unit>
        <trans-unit id="44f92500b7ae9560ae64e2f2fc4f1af900d3ff26" translate="yes" xml:space="preserve">
          <source>Then &quot;git bisect&quot; will checkout a commit of its choosing and ask the user to test it, like this:</source>
          <target state="translated">そうすると、&quot;git bisect&quot; は自分で選んだコミットをチェックアウトして、次のようにユーザーにテストを依頼します。</target>
        </trans-unit>
        <trans-unit id="e1ef052a3cd59f805d0ae45d1b9033a6a2faaa95" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;git bisect&lt;/code&gt; will respond with something like</source>
          <target state="translated">その後、 &lt;code&gt;git bisect&lt;/code&gt; は次のような応答を返します</target>
        </trans-unit>
        <trans-unit id="307236a389d15c9e88cc574f3c2b3a0314992840" translate="yes" xml:space="preserve">
          <source>Then compile and test the chosen revision, and afterwards mark the revision as good or bad in the usual manner.</source>
          <target state="translated">その後、選択したリビジョンをコンパイルしてテストし、その後、通常の方法でリビジョンの良し悪しをマークします。</target>
        </trans-unit>
        <trans-unit id="876e252bd62eb2a97f748800c6625b2b00ccfdec" translate="yes" xml:space="preserve">
          <source>Then confirm that the bug persists in a repository created from that stream (many bugs will not, as they really do depend on the exact repository contents):</source>
          <target state="translated">そして、そのストリームから作成されたリポジトリにバグが残っていることを確認してください (多くのバグは正確なリポジトリの内容に依存しているため、バグが残っていないことが多いです)。</target>
        </trans-unit>
        <trans-unit id="87463a5d117dae6022935ddfd68f09bfbb9b0943" translate="yes" xml:space="preserve">
          <source>Then create the following script to get list of project in the format suitable for GITWEB_LIST build configuration variable (or &lt;code&gt;$projects_list&lt;/code&gt; variable in gitweb config):</source>
          <target state="translated">次に、次のスクリプトを作成して、GITWEB_LISTビルド構成変数（またはgitweb configの &lt;code&gt;$projects_list&lt;/code&gt; 変数）に適した形式でプロジェクトのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="b5a742d8577423cd13ed5705b5290de27ff73949" translate="yes" xml:space="preserve">
          <source>Then fixup &quot;master&quot; with &lt;code&gt;git rebase&lt;/code&gt;. Do NOT use &lt;code&gt;git merge&lt;/code&gt; or your history will not be compatible with a future &lt;code&gt;dcommit&lt;/code&gt;!</source>
          <target state="translated">次に &lt;code&gt;git rebase&lt;/code&gt; で「マスター」を修正します。 &lt;code&gt;git merge&lt;/code&gt; を使用しないでください。使用すると、履歴が将来の &lt;code&gt;dcommit&lt;/code&gt; と互換性がなくなります。</target>
        </trans-unit>
        <trans-unit id="78318329e21f0014f75ba54a708b1f46ad0d023c" translate="yes" xml:space="preserve">
          <source>Then it compares the new skip-worktree value with the previous one. If skip-worktree turns from set to unset, it will add the corresponding file back. If it turns from unset to set, that file will be removed.</source>
          <target state="translated">そして、新しいskip-worktreeの値を以前の値と比較します。skip-worktreeがセットからアンセットになった場合は、対応するファイルを元に戻します。セットされていない状態からセットされている状態になった場合、そのファイルは削除されます。</target>
        </trans-unit>
        <trans-unit id="5e9c59419a3e5d8568740259a39319d49129c624" translate="yes" xml:space="preserve">
          <source>Then it examines &lt;code&gt;.gitattributes&lt;/code&gt; (which is in the parent directory), and finds that the first line matches, but &lt;code&gt;t/.gitattributes&lt;/code&gt; file already decided how &lt;code&gt;merge&lt;/code&gt;, &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; attributes should be given to this path, so it leaves &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; unset. Attribute &lt;code&gt;baz&lt;/code&gt; is set.</source>
          <target state="translated">次に、それは（親ディレクトリにある） &lt;code&gt;.gitattributes&lt;/code&gt; を調べ、最初の行が一致することを &lt;code&gt;t/.gitattributes&lt;/code&gt; ますが、t / .gitattributesファイルは、このパスに &lt;code&gt;merge&lt;/code&gt; 、 &lt;code&gt;foo&lt;/code&gt; 、および &lt;code&gt;bar&lt;/code&gt; 属性をどのように指定するかをすでに決定しているため、 &lt;code&gt;foo&lt;/code&gt; と &lt;code&gt;bar&lt;/code&gt; を残します未設定。属性 &lt;code&gt;baz&lt;/code&gt; が設定されています。</target>
        </trans-unit>
        <trans-unit id="1100f313a3d209e54bf3bc725a364711886dbfc4" translate="yes" xml:space="preserve">
          <source>Then modify, reorder, or eliminate patches as needed before applying them again with &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;:</source>
          <target state="translated">次に、必要に応じてパッチを変更、並べ替え、または削除してから、&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;を使用して再度適用します。</target>
        </trans-unit>
        <trans-unit id="cd43ef848f2d3c4afb2a44ae28c2a413397c1d96" translate="yes" xml:space="preserve">
          <source>Then provide your password via the pserver method, for example:</source>
          <target state="translated">次に、pserver メソッドを使ってパスワードを入力します。</target>
        </trans-unit>
        <trans-unit id="a774f276f116b48d127c0c1418ef7aa2fe46b49b" translate="yes" xml:space="preserve">
          <source>Then simplify each commit &lt;code&gt;C&lt;/code&gt; to its replacement &lt;code&gt;C'&lt;/code&gt; in the final history according to the following rules:</source>
          <target state="translated">次に、次のルールに従って、各コミット &lt;code&gt;C&lt;/code&gt; を最終履歴の置換 &lt;code&gt;C'&lt;/code&gt; に簡略化します。</target>
        </trans-unit>
        <trans-unit id="2f5d7fdcf8fcb013dcf3c597507de91a5cb0f77d" translate="yes" xml:space="preserve">
          <source>Then simply fork your topic branches from the stable remotes as explained earlier.</source>
          <target state="translated">次に、先ほど説明したように、安定したリモートからトピックのブランチをフォークします。</target>
        </trans-unit>
        <trans-unit id="b19a7b2e2b2e2252f0564256c9b87915d5db46d3" translate="yes" xml:space="preserve">
          <source>Then suppose you modify the last three commits:</source>
          <target state="translated">そして、最後の3つのコミットを修正したとします。</target>
        </trans-unit>
        <trans-unit id="e69e2e34d497710c4127a780d2a5ed5c7d7fac83" translate="yes" xml:space="preserve">
          <source>Then there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.</source>
          <target state="translated">小さいリポジトリを手に入れるには2つの方法があります。より安全な方法はクローンを作ることです。</target>
        </trans-unit>
        <trans-unit id="5c871054b486e3acaf28dc409c1ab3e693b4fc90" translate="yes" xml:space="preserve">
          <source>Then this &lt;code&gt;git p4 clone&lt;/code&gt; command:</source>
          <target state="translated">次に、この &lt;code&gt;git p4 clone&lt;/code&gt; コマンド：</target>
        </trans-unit>
        <trans-unit id="db9b57b987ef397bc0b191d278e31ed2d827cb0a" translate="yes" xml:space="preserve">
          <source>Then you can disable sparse checkout. Sparse checkout support in &lt;code&gt;git read-tree&lt;/code&gt; and similar commands is disabled by default. You need to turn &lt;code&gt;core.sparseCheckout&lt;/code&gt; on in order to have sparse checkout support.</source>
          <target state="translated">次に、スパースチェックアウトを無効にできます。 &lt;code&gt;git read-tree&lt;/code&gt; および同様のコマンドでのスパースチェックアウトのサポートは、デフォルトでは無効になっています。スパースチェックアウトをサポートするには、 &lt;code&gt;core.sparseCheckout&lt;/code&gt; をオンにする必要があります。</target>
        </trans-unit>
        <trans-unit id="87a33f516a8ffec885e906dbb29e388a5f30ada0" translate="yes" xml:space="preserve">
          <source>Then you can pull and merge, leaving &lt;code&gt;frotz.c&lt;/code&gt; and &lt;code&gt;filfre.c&lt;/code&gt; changes still in the working tree.</source>
          <target state="translated">次に、プルしてマージし、作業ツリーに &lt;code&gt;frotz.c&lt;/code&gt; と &lt;code&gt;filfre.c&lt;/code&gt; の変更を残します。</target>
        </trans-unit>
        <trans-unit id="fa280cd97c17d646b4ce0e60bbbcb27953b34fb3" translate="yes" xml:space="preserve">
          <source>Then you can push both the test and release trees using &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt;:</source>
          <target state="translated">次に、&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;を使用して、テストツリーとリリースツリーの両方をプッシュできます。</target>
        </trans-unit>
        <trans-unit id="9015e54306232b9477b76c544780cb6cb29e184c" translate="yes" xml:space="preserve">
          <source>Then you might want a &lt;code&gt;.mailmap&lt;/code&gt; file that looks like:</source>
          <target state="translated">次に、次のような &lt;code&gt;.mailmap&lt;/code&gt; ファイルが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="bdefcc2b7f4d341c71ca424367a0164c209ac375" translate="yes" xml:space="preserve">
          <source>Then you transfer file.bundle to the target machine B. Because this bundle does not require any existing object to be extracted, you can create a new repository on machine B by cloning from it:</source>
          <target state="translated">そして、対象のマシンBにfile.bundleを転送します。このbundleは既存のオブジェクトを抽出する必要がないので、マシンBにクローンして新しいリポジトリを作成することができます。</target>
        </trans-unit>
        <trans-unit id="e826c3727c0c79aa7b30f2352881ef1c5a35f171" translate="yes" xml:space="preserve">
          <source>Then you would define a &quot;filter.indent.clean&quot; and &quot;filter.indent.smudge&quot; configuration in your .git/config to specify a pair of commands to modify the contents of C programs when the source files are checked in (&quot;clean&quot; is run) and checked out (no change is made because the command is &quot;cat&quot;).</source>
          <target state="translated">そして、.git/config で &quot;filter.indent.clean&quot; と &quot;filter.indent.smudge&quot; の設定を定義し、ソースファイルがチェックインされたとき(&quot;clean&quot; を実行したとき)とチェックアウトされたとき (コマンドが &quot;cat&quot; なので変更はありません)に C プログラムの内容を変更するコマンドのペアを指定します。</target>
        </trans-unit>
        <trans-unit id="c6308f4c83137c8ddf705f0b33927bc3a2a2d3bf" translate="yes" xml:space="preserve">
          <source>Then, make that directory into a Git repository by running &lt;code&gt;git init&lt;/code&gt;, but this time, since its name is not the usual &lt;code&gt;.git&lt;/code&gt;, we do things slightly differently:</source>
          <target state="translated">次に、 &lt;code&gt;git init&lt;/code&gt; を実行して、そのディレクトリをGitリポジトリーに作成しますが、今回は、その名前が通常の &lt;code&gt;.git&lt;/code&gt; ではないため、処理が少し異なります。</target>
        </trans-unit>
        <trans-unit id="4d45e0228f3dfbda52666260c02f45c435d7f13c" translate="yes" xml:space="preserve">
          <source>Then, use &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; and &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; instead of &lt;code&gt;git bisect good&lt;/code&gt; and &lt;code&gt;git bisect bad&lt;/code&gt; to mark commits.</source>
          <target state="translated">次に、コミットをマークするために &lt;code&gt;git bisect good&lt;/code&gt; および &lt;code&gt;git bisect bad&lt;/code&gt; の代わりに &lt;code&gt;git bisect &amp;lt;term-old&amp;gt;&lt;/code&gt; および &lt;code&gt;git bisect &amp;lt;term-new&amp;gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b100177b4f5d14520d5631ccbd2bc2ff52393e78" translate="yes" xml:space="preserve">
          <source>Then, you run this command:</source>
          <target state="translated">そして、このコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="ebbdc2314a6104dc9178c4c9ed7835ad78f84727" translate="yes" xml:space="preserve">
          <source>Then, you would define a &quot;diff.tex.xfuncname&quot; configuration to specify a regular expression that matches a line that you would want to appear as the hunk header &quot;TEXT&quot;. Add a section to your &lt;code&gt;$GIT_DIR/config&lt;/code&gt; file (or &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; file) like this:</source>
          <target state="translated">次に、「diff.tex.xfuncname」構成を定義して、ハンクヘッダー「TEXT」として表示する行に一致する正規表現を指定します。次のように、セクションを &lt;code&gt;$GIT_DIR/config&lt;/code&gt; ファイル（または &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ファイル）に追加します。</target>
        </trans-unit>
        <trans-unit id="8d94c9456285c171a8f18dcac7b76fd1fccc9ff4" translate="yes" xml:space="preserve">
          <source>There are (number of parents + 1) &lt;code&gt;@&lt;/code&gt; characters in the chunk header for combined diff format.</source>
          <target state="translated">結合されたdiff形式のチャンクヘッダーには（親の数+ 1） &lt;code&gt;@&lt;/code&gt; 文字があります。</target>
        </trans-unit>
        <trans-unit id="f7e9cf96a6ce9ed5c513750352c4736c076b5145" translate="yes" xml:space="preserve">
          <source>There are CPP wrapper macros and ifdefs to hide most of these details. See &lt;code&gt;trace2.h&lt;/code&gt; for more details. The following discussion will only describe the simplified forms.</source>
          <target state="translated">これらの詳細のほとんどを非表示にするCPPラッパーマクロとifdefsがあります。詳細については、 &lt;code&gt;trace2.h&lt;/code&gt; を参照してください。以下の説明では、簡略化された形式についてのみ説明します。</target>
        </trans-unit>
        <trans-unit id="e4287f1e47cb2bfc1b9e5f25165aef43ceec9d6c" translate="yes" xml:space="preserve">
          <source>There are a few built-in low-level merge drivers defined that can be asked for via the &lt;code&gt;merge&lt;/code&gt; attribute.</source>
          <target state="translated">いくつかの組み込みの低レベルマージドライバーが定義されており、それらは &lt;code&gt;merge&lt;/code&gt; 属性を介して要求できます。</target>
        </trans-unit>
        <trans-unit id="12f3989319ea3c0cba3d029a62ee2c306fd0616b" translate="yes" xml:space="preserve">
          <source>There are a few built-in patterns to make this easier, and &lt;code&gt;tex&lt;/code&gt; is one of them, so you do not have to write the above in your configuration file (you still need to enable this with the attribute mechanism, via &lt;code&gt;.gitattributes&lt;/code&gt;). The following built in patterns are available:</source>
          <target state="translated">これを簡単にする組み込みパターンがいくつかあり、 &lt;code&gt;tex&lt;/code&gt; はその1つなので、構成ファイルに上記を書き込む必要はありません（ &lt;code&gt;.gitattributes&lt;/code&gt; を介して、属性メカニズムでこれを有効にする必要があります）。次の組み込みパターンを使用できます。</target>
        </trans-unit>
        <trans-unit id="336d04ab3583042f88f12edf2d051324b94f62a0" translate="yes" xml:space="preserve">
          <source>There are a few issues to resolve before we can completely switch to Trace2.</source>
          <target state="translated">Trace2に完全に切り替える前に、いくつかの問題を解決する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8e0813ee0029806de1de3d5b367acd9c0a0d07d" translate="yes" xml:space="preserve">
          <source>There are a few more behavioral differences that most folks would probably consider inconsequential but which are mentioned for completeness:</source>
          <target state="translated">ほとんどの人がおそらく取るに足らないことを考慮するだろうが、完全性のために言及されている行動の違いがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f553cccafe9fdfa62552e6e1af4be573be245c47" translate="yes" xml:space="preserve">
          <source>There are a few special-purpose refs that do not begin with &lt;code&gt;refs/&lt;/code&gt;. The most notable example is &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refs/&lt;/code&gt; 始まらない特殊用途の参照がいくつかあります。最も注目すべき例は &lt;code&gt;HEAD&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc9f53378dabd08666f7e5c5af2a717dbbd37e28" translate="yes" xml:space="preserve">
          <source>There are a number of factors which affect how much memory fast-import requires to perform an import. Like critical sections of core Git, fast-import uses its own memory allocators to amortize any overheads associated with malloc. In practice fast-import tends to amortize any malloc overheads to 0, due to its use of large block allocations.</source>
          <target state="translated">fast-import がインポートを実行するために必要なメモリ量には、いくつかの要因があります。コアとなる Git の重要な部分と同様に、fast-import は独自のメモリアロケータを使用して malloc に関連するオーバーヘッドを償却します。実際のところ、fast-import は大規模なブロックアロケーションを使用しているため、malloc のオーバーヘッドはすべて 0 になる傾向にあります。</target>
        </trans-unit>
        <trans-unit id="e0b2b532209e8b05d8ee20f67e782301986fd65a" translate="yes" xml:space="preserve">
          <source>There are also cases where existing indexes written by git versions before 2.17 will reference directories that don&amp;rsquo;t exist anymore, potentially causing many &quot;could not open directory&quot; warnings to be printed on &quot;git status&quot;. These are new warnings for existing issues that were previously silently discarded.</source>
          <target state="translated">2.17より前のgitバージョンで記述された既存のインデックスが、存在しないディレクトリを参照する場合もあり、「git status」に「ディレクトリを開けませんでした」という警告が表示される可能性があります。これらは、以前は黙って破棄されていた既存の問題に対する新しい警告です。</target>
        </trans-unit>
        <trans-unit id="aec0acb7fb7522f7c5da2df9b13975842cb9d1be" translate="yes" xml:space="preserve">
          <source>There are also more complex operations that can be performed. But beware that because the patch is applied only to the index and not the working tree, the working tree will appear to &quot;undo&quot; the change in the index. For example, introducing a new line into the index that is in neither the HEAD nor the working tree will stage the new line for commit, but the line will appear to be reverted in the working tree.</source>
          <target state="translated">もっと複雑な操作を行うこともできます。しかし、パッチはインデックスにのみ適用され、作業ツリーには適用されないので、作業ツリーはインデックスの変更を「元に戻す」ように見えることに注意してください。例えば、HEAD にも作業ツリーにもない新しい行をインデックスに導入すると、その行はコミットのためにステージされますが、その行は作業ツリーでは元に戻されているように見えます。</target>
        </trans-unit>
        <trans-unit id="a266660a35cd18470141c43d8a3ffa2b3074c06a" translate="yes" xml:space="preserve">
          <source>There are also other situations that cause dangling objects. For example, a &quot;dangling blob&quot; may arise because you did a &lt;code&gt;git add&lt;/code&gt; of a file, but then, before you actually committed it and made it part of the bigger picture, you changed something else in that file and committed that &lt;strong&gt;updated&lt;/strong&gt; thing&amp;mdash;​the old state that you added originally ends up not being pointed to by any commit or tree, so it&amp;rsquo;s now a dangling blob object.</source>
          <target state="translated">ぶら下がりオブジェクトを引き起こす他の状況もあります。例えば、「ダングリングブロブは、」あなたがしたので、発生する可能性 &lt;code&gt;git add&lt;/code&gt; あなたが実際にそれをコミットし、それより大きな絵の一部なさ前に、そのファイルのを、しかし、あなたはそのファイルに何かを変更していることをコミット&lt;strong&gt;更新します&lt;/strong&gt; thing-元々追加した古い状態は、コミットやツリーによってポイントされないため、ぶら下がっているblobオブジェクトになります。</target>
        </trans-unit>
        <trans-unit id="232088d916b340ecad3098c72c2ebccbe30b76e5" translate="yes" xml:space="preserve">
          <source>There are also several operations which should be avoided entirely, as they will make the patch impossible to apply:</source>
          <target state="translated">また、パッチを貼ることが不可能になるので、完全に避けるべき操作もいくつかあります。</target>
        </trans-unit>
        <trans-unit id="eeb0752be9462c9bd2e54575f2023419e06b3d3b" translate="yes" xml:space="preserve">
          <source>There are also ways to automate the bisecting process if you have a test script that can tell a good from a bad commit. See &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; for more information about this and other &lt;code&gt;git
bisect&lt;/code&gt; features.</source>
          <target state="translated">悪いコミットから良いことを伝えることができるテストスクリプトがある場合、二分するプロセスを自動化する方法もあります。これと他の &lt;code&gt;git bisect&lt;/code&gt; 機能の詳細については、&lt;a href=&quot;git-bisect&quot;&gt;git-bisect [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="753d0dde7d0dbacd496fb113e3e96e5ea6d9494d" translate="yes" xml:space="preserve">
          <source>There are four different types of objects: &quot;blob&quot;, &quot;tree&quot;, &quot;commit&quot;, and &quot;tag&quot;.</source>
          <target state="translated">オブジェクトには4つの種類があります。&quot;blob」「tree」「commit」「tag」です。</target>
        </trans-unit>
        <trans-unit id="a3d0232ce28c94288cf502f722ca216e09b8c5b1" translate="yes" xml:space="preserve">
          <source>There are implementations of Git that do not leave usable values in some fields (e.g. JGit); by excluding these fields from the comparison, the &lt;code&gt;minimal&lt;/code&gt; mode may help interoperability when the same repository is used by these other systems at the same time.</source>
          <target state="translated">一部のフィールド（JGitなど）に使用可能な値を残さないGitの実装があります。これらのフィールドを比較から除外することにより、 &lt;code&gt;minimal&lt;/code&gt; モードは、同じリポジトリがこれらの他のシステムによって同時に使用される場合の相互運用性に役立ちます。</target>
        </trans-unit>
        <trans-unit id="ac26d523869587e187089ca0cfe8dfa88bde0428" translate="yes" xml:space="preserve">
          <source>There are many more; see the &quot;SPECIFYING REVISIONS&quot; section of the &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; man page for the complete list of ways to name revisions. Some examples:</source>
          <target state="translated">他にもたくさんあります。リビジョンに名前を付ける方法の完全なリストについては、&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]の&lt;/a&gt; manページの「SPECIFYING REVISIONS」セクションを参照してください。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="caa64d4f477bb9cc6ae8b8763c8d93ec4bfb0cef" translate="yes" xml:space="preserve">
          <source>There are no facilities for helping users find what unwanted crud they should delete, which means they are much more likely to have incomplete or partial cleanups that sometimes result in confusion and people wasting time trying to understand. (For example, folks tend to just look for big files to delete instead of big directories or extensions, and once they do so, then sometime later folks using the new repository who are going through history will notice a build artifact directory that has some files but not others, or a cache of dependencies (node_modules or similar) which couldn&amp;rsquo;t have ever been functional since it&amp;rsquo;s missing some files.)</source>
          <target state="translated">ユーザーが削除する必要のある不要なクラッドを見つけるための機能はありません。つまり、不完全または部分的なクリーンアップが行われる可能性が高く、混乱を招き、理解に時間を費やすことになります。（たとえば、人々は大きなディレクトリや拡張機能の代わりに削除する大きなファイルを探す傾向があり、そうすると、後で新しいリポジトリを使用して履歴を調べている人々は、いくつかのファイルを持つビルドアーティファクトディレクトリに気付くでしょう他のものではなく、依存関係のキャッシュ（node_modulesなど）もあり、一部のファイルが見つからないため機能することができませんでした。）</target>
        </trans-unit>
        <trans-unit id="ce4a9f9a1026ea763732ff998a2bcfb7b60f26ca" translate="yes" xml:space="preserve">
          <source>There are no public Trace2 data structures.</source>
          <target state="translated">公開されているTrace2のデータ構造はありません。</target>
        </trans-unit>
        <trans-unit id="5a1dbdef2a9d4fcde2fec24ad984bfc7ec6f3aa2" translate="yes" xml:space="preserve">
          <source>There are numerous other tools, such as StGit, which exist for the purpose of maintaining a patch series. These are outside of the scope of this manual.</source>
          <target state="translated">StGit のような、パッチシリーズを維持するためのツールは他にも数多く存在します。これらはこのマニュアルの範囲外です。</target>
        </trans-unit>
        <trans-unit id="306721e74c73edf4b4a1c2554be600724c25d3f0" translate="yes" xml:space="preserve">
          <source>There are other estimates saying that 80% of the cost related to software is about maintenance &lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="translated">ソフトウェアに関連するコストの80％はメンテナンスに関するものであると言っている他の推定があります&lt;a href=&quot;#2&quot;&gt;[2]&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7eccee0caa41472aded0ea349d3d3fa4831b32ab" translate="yes" xml:space="preserve">
          <source>There are other real-world examples of using update and post-update hooks found in the Documentation/howto directory.</source>
          <target state="translated">他にも、Documentation/howtoディレクトリにある更新フックや更新後フックを使用する実例があります。</target>
        </trans-unit>
        <trans-unit id="ddc4304f0c733f93eaa36c71971b210be6c86baa" translate="yes" xml:space="preserve">
          <source>There are several built-in formats, and you can define additional formats by setting a pretty.&amp;lt;name&amp;gt; config option to either another format name, or a &lt;code&gt;format:&lt;/code&gt; string, as described below (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). Here are the details of the built-in formats:</source>
          <target state="translated">いくつかの組み込み形式があり、pretty。&amp;lt;name&amp;gt;構成オプションを別の形式名または &lt;code&gt;format:&lt;/code&gt; 文字列に設定することで、追加の形式を定義できます（以下で説明します（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。組み込みフォーマットの詳細は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="172e083c83bf7e6cbde177805c61722f6bdc0777" translate="yes" xml:space="preserve">
          <source>There are some numbers about bugs in general, like a NIST study in 2002 &lt;a href=&quot;#1&quot;&gt;[1]&lt;/a&gt; that said:</source>
          <target state="translated">2002年のNISTの調査&lt;a href=&quot;#1&quot;&gt;[1]の&lt;/a&gt;ように、一般的にバグについていくつかの数値があります。</target>
        </trans-unit>
        <trans-unit id="1a73feb2f257a54073e6e874ef78ceeefd47d29e" translate="yes" xml:space="preserve">
          <source>There are some subtle differences how the backends behave.</source>
          <target state="translated">バックエンドの挙動には微妙な違いがあります。</target>
        </trans-unit>
        <trans-unit id="a41ebe77f2eb54fbd4f30714a2e14c8c1d436ea0" translate="yes" xml:space="preserve">
          <source>There are three commands with similar names: &lt;code&gt;git reset&lt;/code&gt;, &lt;code&gt;git restore&lt;/code&gt; and &lt;code&gt;git revert&lt;/code&gt;.</source>
          <target state="translated">同じような名前の3つのコマンドがあります： &lt;code&gt;git reset&lt;/code&gt; 、 &lt;code&gt;git restore&lt;/code&gt; 、 &lt;code&gt;git revert&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="27e17ed315eeb27fa67bd10d3870c4d2deb8a92d" translate="yes" xml:space="preserve">
          <source>There are three different approaches: use an add-on to turn off line wraps, configure Thunderbird to not mangle patches, or use an external editor to keep Thunderbird from mangling the patches.</source>
          <target state="translated">3つの異なるアプローチがあります:アドオンを使用してラインラップをオフにする、Thunderbird がパッチをつぶさないように設定する、外部エディタを使用して Thunderbird がパッチをつぶさないようにする、です。</target>
        </trans-unit>
        <trans-unit id="8c553f5839a8296a42918c5ea6f6a2fcca19fa49" translate="yes" xml:space="preserve">
          <source>There are three main tools that can be used for this:</source>
          <target state="translated">そのためのツールは大きく分けて3つあります。</target>
        </trans-unit>
        <trans-unit id="86e24f426735724adb9ab7ea59c461905251e8e9" translate="yes" xml:space="preserve">
          <source>There are three ways to specify which refs to update on the remote end.</source>
          <target state="translated">リモート側で更新する参照を指定する方法は3つあります。</target>
        </trans-unit>
        <trans-unit id="5544b2d42620b4375dbc730230171fe04b9f972b" translate="yes" xml:space="preserve">
          <source>There are two different types of capabilities: normal capabilities, which can be used to convey information or alter the behavior of a request, and commands, which are the core actions that a client wants to perform (fetch, push, etc).</source>
          <target state="translated">能力には2つの異なるタイプがあります:情報を伝えたりリクエストの動作を変更したりするために使われる通常の能力と、クライアントが実行したいコアアクション(フェッチやプッシュなど)であるコマンドです。</target>
        </trans-unit>
        <trans-unit id="c2015c03c4c8786233c499c7815e06c17100a16b" translate="yes" xml:space="preserve">
          <source>There are two formats accepted for patch files:</source>
          <target state="translated">パッチファイルには2つのフォーマットがあります。</target>
        </trans-unit>
        <trans-unit id="9b5e9b84c7e0cf0cc62bfad7ffc7f5a42847bbc1" translate="yes" xml:space="preserve">
          <source>There are two kinds of fixes, discussed in the following subsections:</source>
          <target state="translated">修正には2種類あり、以下のサブセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="afe3df249e404830655fd820b0b8e96397ac9183" translate="yes" xml:space="preserve">
          <source>There are two main tools that can be used to include changes from one branch on another: &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; and &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;.</source>
          <target state="translated">あるブランチから別のブランチへの変更を含めるために使用できる2つの主要なツールがあります：&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;と&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="1432c9def859812f2dcccb492cbe2b422538cffb" translate="yes" xml:space="preserve">
          <source>There are two ways to specify which commits to operate on.</source>
          <target state="translated">どのコミットを操作するかを指定するには、2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="04a6eae6f43fc050171fa2270096884eaba0fee3" translate="yes" xml:space="preserve">
          <source>There is a difference between listing multiple &amp;lt;refspec&amp;gt; directly on &lt;em&gt;git pull&lt;/em&gt; command line and having multiple &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; entries in your configuration for a &amp;lt;repository&amp;gt; and running a &lt;em&gt;git pull&lt;/em&gt; command without any explicit &amp;lt;refspec&amp;gt; parameters. &amp;lt;refspec&amp;gt;s listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote ref, &lt;em&gt;git pull&lt;/em&gt; will create an Octopus merge. On the other hand, if you do not list any explicit &amp;lt;refspec&amp;gt; parameter on the command line, &lt;em&gt;git pull&lt;/em&gt; will fetch all the &amp;lt;refspec&amp;gt;s it finds in the &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; configuration and merge only the first &amp;lt;refspec&amp;gt; found into the current branch. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one-go by fetching more than one is often useful.</source>
          <target state="translated">&lt;em&gt;git pull&lt;/em&gt;コマンドラインで複数の&amp;lt;refspec&amp;gt;を直接一覧表示することと、&amp;lt;repository&amp;gt;の構成に複数の &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; エントリを指定することと、明示的な&amp;lt;refspec&amp;gt;パラメーターなしで&lt;em&gt;git pull&lt;/em&gt;コマンドを実行することには違いがあります。コマンドラインで明示的にリストされた&amp;lt;refspec&amp;gt;は、フェッチ後に常に現在のブランチにマージされます。言い換えると、複数のリモート参照をリストする場合、&lt;em&gt;git pull&lt;/em&gt;はOctopusマージを作成します。一方、コマンドラインで明示的な&amp;lt;refspec&amp;gt;パラメーターを指定しない場合、&lt;em&gt;git pull&lt;/em&gt;は、 &lt;code&gt;remote.&amp;lt;repository&amp;gt;.fetch&lt;/code&gt; で見つかったすべての&amp;lt;refspec&amp;gt;をフェッチします。&amp;lt;repository&amp;gt; .fetch構成し、最初の&amp;lt;refspec&amp;gt;のみを現在のブランチにマージします。これは、リモート参照からタコを作成することはめったに行われないためです。一方、複数のリモートヘッドを1つ以上フェッチすることにより、複数のリモートヘッドを1度に追跡することは便利です。</target>
        </trans-unit>
        <trans-unit id="08d27e369ae02f07111163548604defe0fd7ba02" translate="yes" xml:space="preserve">
          <source>There is a fourth official branch that is used slightly differently:</source>
          <target state="translated">4つ目の公式支部があり、少しずつ使い分けています。</target>
        </trans-unit>
        <trans-unit id="3ab0818052937d36eff9b5a2767bc99b339b1151" translate="yes" xml:space="preserve">
          <source>There is a script in contrib/thunderbird-patch-inline which can help you include patches with Thunderbird in an easy way. To use it, do the steps above and then use the script as the external editor.</source>
          <target state="translated">contrib/thunderbird-patch-inlineにスクリプトがあり、Thunderbirdのパッチを簡単な方法で含めるのに役立ちます。これを使用するには、上記の手順を行い、スクリプトを外部エディタとして使用してください。</target>
        </trans-unit>
        <trans-unit id="1232149fc68bcd969b013f8dcdb8f804dc24a0d6" translate="yes" xml:space="preserve">
          <source>There is a tradeoff of course: merges require a more careful branch management. The following subsections discuss the important points.</source>
          <target state="translated">もちろんトレードオフもあります:合併には、より慎重な支店管理が必要です。以下のサブセクションでは、重要なポイントについて説明します。</target>
        </trans-unit>
        <trans-unit id="dad64266cc32a47cdf74ec10317455f91f86159c" translate="yes" xml:space="preserve">
          <source>There is already a project called BBChop created by Ealdwulf Wuffinga on Github that does something like that using Bayesian Search Theory &lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;:</source>
          <target state="translated">Eitwulf WuffingaによってGithubに作成されたBBChopと呼ばれるプロジェクトがすでにあり、ベイジアン検索理論を使用してそのようなことをしています&lt;a href=&quot;#9&quot;&gt;[9]&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="72c8cb7314c2d9e687a4188f4607320887a3abaf" translate="yes" xml:space="preserve">
          <source>There is also a deprecated &lt;code&gt;[section.subsection]&lt;/code&gt; syntax. With this syntax, the subsection name is converted to lower-case and is also compared case sensitively. These subsection names follow the same restrictions as section names.</source>
          <target state="translated">非推奨の &lt;code&gt;[section.subsection]&lt;/code&gt; 構文もあります。この構文では、サブセクション名は小文字に変換され、大文字と小文字を区別して比較されます。これらのサブセクション名は、セクション名と同じ制限に従います。</target>
        </trans-unit>
        <trans-unit id="562a7aac41f0a6a2b8bd94c80ba1df49ae8c2861" translate="yes" xml:space="preserve">
          <source>There is also an alternate -z format recommended for machine parsing. In that format, the status field is the same, but some other things change. First, the &lt;code&gt;-&amp;gt;&lt;/code&gt; is omitted from rename entries and the field order is reversed (e.g &lt;code&gt;from -&amp;gt; to&lt;/code&gt; becomes &lt;code&gt;to from&lt;/code&gt;). Second, a NUL (ASCII 0) follows each filename, replacing space as a field separator and the terminating newline (but a space still separates the status field from the first filename). Third, filenames containing special characters are not specially formatted; no quoting or backslash-escaping is performed.</source>
          <target state="translated">マシンの解析に推奨される代替の-z形式もあります。その形式では、ステータスフィールドは同じですが、他のいくつかが変更されます。まず、 &lt;code&gt;-&amp;gt;&lt;/code&gt; （例えば名前変更エントリから省略され、フィールドの順序を逆にする &lt;code&gt;from -&amp;gt; to&lt;/code&gt; なり &lt;code&gt;to from&lt;/code&gt; ）。次に、NUL（ASCII 0）が各ファイル名の後に続き、フィールド区切り文字と終了改行としてスペースを置き換えます（ただし、スペースは最初のファイル名からステータスフィールドを分離します）。3番目に、特殊文字を含むファイル名は特別にフォーマットされていません。引用やバックスラッシュエスケープは実行されません。</target>
        </trans-unit>
        <trans-unit id="23b53316aea0dd64f8f21ea0eae539235bf45a74" translate="yes" xml:space="preserve">
          <source>There is also an option to sort by versions, this can be done by using the fieldname &lt;code&gt;version:refname&lt;/code&gt; or its alias &lt;code&gt;v:refname&lt;/code&gt;.</source>
          <target state="translated">バージョンでソートするオプションもあります。これは、フィールド名 &lt;code&gt;version:refname&lt;/code&gt; またはそのエイリアス &lt;code&gt;v:refname&lt;/code&gt; を使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="490f0c7223e032436f3ed74187899d6766a21bb5" translate="yes" xml:space="preserve">
          <source>There is another common situation where you may encounter non-fast-forward rejection when you try to push, and it is possible even when you are pushing into a repository nobody else pushes into. After you push commit A yourself (in the first picture in this section), replace it with &quot;git commit --amend&quot; to produce commit B, and you try to push it out, because forgot that you have pushed A out already. In such a case, and only if you are certain that nobody in the meantime fetched your earlier commit A (and started building on top of it), you can run &quot;git push --force&quot; to overwrite it. In other words, &quot;git push --force&quot; is a method reserved for a case where you do mean to lose history.</source>
          <target state="translated">もうひとつ、プッシュしようとすると非フォワード拒否に遭遇するというよくある状況がありますが、これは誰もプッシュしていないリポジトリにプッシュしている場合でも起こりうることです。コミット A を自分でプッシュした後 (このセクションの最初の画像)、それを &quot;git commit --amend&quot; に置き換えてコミット B を生成し、プッシュしようとしたときに、すでに A をプッシュしたことを忘れていたためにプッシュアウトしようとしたとしましょう。このような場合、そしてその間に誰もあなたの以前のコミット A をフェッチしていない (そしてその上でビルドを開始している)という確信がある場合に限り、&quot;git push --force&quot; を実行してそれを上書きすることができます。言い換えれば、&quot;git push --force&quot; は履歴をなくしたいときのために予約されたメソッドです。</target>
        </trans-unit>
        <trans-unit id="8a8fda27a5ab0014e2c03663c10e41e5858f14f1" translate="yes" xml:space="preserve">
          <source>There is another simplification mode available:</source>
          <target state="translated">もう一つの簡略化モードがあります。</target>
        </trans-unit>
        <trans-unit id="76938def2c927fda8d1c815e17291d57380d4a8a" translate="yes" xml:space="preserve">
          <source>There is another tweak in the bisection algorithm that has not been described in the &quot;bisection algorithm&quot; above.</source>
          <target state="translated">上の「二分法アルゴリズム」では説明されていないもう一つの微調整があります。</target>
        </trans-unit>
        <trans-unit id="6cd697be600e420b39bb68cc6d967c4ceca70af4" translate="yes" xml:space="preserve">
          <source>There is no option for &lt;code&gt;git rm&lt;/code&gt; to remove from the index only the paths that have disappeared from the filesystem. However, depending on the use case, there are several ways that can be done.</source>
          <target state="translated">&lt;code&gt;git rm&lt;/code&gt; がファイルシステムから消えたパスのみをインデックスから削除するオプションはありません。ただし、ユースケースに応じて、実行できるいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="60bcaa98facce6fa9b4916fcb4556840549eaf70" translate="yes" xml:space="preserve">
          <source>There is no other restriction on the replaced and replacement objects. Merge commits can be replaced by non-merge commits and vice versa.</source>
          <target state="translated">置換オブジェクトと置換オブジェクトには他に制限はありません。マージコミットは非マージコミットで置き換えることができ、その逆も可能です。</target>
        </trans-unit>
        <trans-unit id="5b920fe2651a1acef3f4de11b5f87d418bf37e32" translate="yes" xml:space="preserve">
          <source>There is now a new commit &lt;code&gt;e&lt;/code&gt;, but it is referenced only by &lt;code&gt;HEAD&lt;/code&gt;. We can of course add yet another commit in this state:</source>
          <target state="translated">現在、新しいコミット &lt;code&gt;e&lt;/code&gt; がありますが、それは &lt;code&gt;HEAD&lt;/code&gt; によってのみ参照されます。もちろん、この状態でさらに別のコミットを追加できます。</target>
        </trans-unit>
        <trans-unit id="e84a3494173a3e4e1765afc114a7bb8588db5e4e" translate="yes" xml:space="preserve">
          <source>There is one special case not mentioned above, which is treated differently. Normally, a merge results in a merge commit, with two parents, one pointing at each of the two lines of development that were merged.</source>
          <target state="translated">上記では触れられていない特別なケースがありますが、これは別の扱いになります。通常、マージの結果はマージコミットとなります。</target>
        </trans-unit>
        <trans-unit id="9c233ac02212216497063926a3cd425b73c1b106" translate="yes" xml:space="preserve">
          <source>There may be other problems when using &lt;code&gt;git rev-list&lt;/code&gt; related to pending objects.</source>
          <target state="translated">保留中のオブジェクトに関連する &lt;code&gt;git rev-list&lt;/code&gt; を使用すると、他の問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3cc97d3b58e95d007d294ed252208117b7ea36ad" translate="yes" xml:space="preserve">
          <source>There was a discussion at one point on the linux kernel mailing list of whether it was ok to always ask end user to bisect, and very good points were made to support the point of view that it is ok.</source>
          <target state="translated">linuxカーネルのメーリングリストでは、エンドユーザに常に二分するように頼んでもいいのかという議論がありました。</target>
        </trans-unit>
        <trans-unit id="e31f2056d77b9761665b1e39804c963e7c7e3f73" translate="yes" xml:space="preserve">
          <source>Therefore if the refspec for the remote includes e.g. &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt;, or you manually run e.g. &lt;code&gt;git fetch
--prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; it won&amp;rsquo;t be stale remote tracking branches that are deleted, but any local tag that doesn&amp;rsquo;t exist on the remote.</source>
          <target state="translated">したがって、リモートのrefspecに &lt;code&gt;refs/tags/*:refs/tags/*&lt;/code&gt; などが含まれている場合、または手動で実行した場合（例： &lt;code&gt;git fetch --prune &amp;lt;name&amp;gt; &quot;refs/tags/*:refs/tags/*&quot;&lt;/code&gt; 、 '削除された古いリモート追跡ブランチであるが、リモートに存在しないローカルタグ。</target>
        </trans-unit>
        <trans-unit id="22e33781a4f63d74c967572b3d2d5742f6f5b3cf" translate="yes" xml:space="preserve">
          <source>These are applied in sequence. The set of filepairs &lt;code&gt;git diff-*&lt;/code&gt; commands find are used as the input to diffcore-break, and the output from diffcore-break is used as the input to the next transformation. The final result is then passed to the output routine and generates either diff-raw format (see Output format sections of the manual for &lt;code&gt;git diff-*&lt;/code&gt; commands) or diff-patch format.</source>
          <target state="translated">これらは順番に適用されます。 &lt;code&gt;git diff-*&lt;/code&gt; コマンドが見つけるファイルペアのセットはdiffcore -breakへの入力として使用され、diffcore-breakからの出力は次の変換への入力として使用されます。次に、最終結果が出力ルーチンに渡され、diff-raw形式（マニュアルの &lt;code&gt;git diff-*&lt;/code&gt; コマンドの出力形式のセクションを参照）またはdiff-patch形式のいずれかが生成されます。</target>
        </trans-unit>
        <trans-unit id="5e4c5d2d8cb413a7bc102a12d4b32266eb5dffbd" translate="yes" xml:space="preserve">
          <source>These are concerned with describing the specific Git command after the command line, config, and environment are inspected. e.g: &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt;, &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt;.</source>
          <target state="translated">これらは、コマンドライン、構成、および環境が検査された後の特定のGitコマンドの説明に関係しています。例： &lt;code&gt;void trace2_cmd_name(const char *name)&lt;/code&gt; 、 &lt;code&gt;void trace2_cmd_mode(const char *mode)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd918e1aed68e545e545890a5d457bd39124acbb" translate="yes" xml:space="preserve">
          <source>These are concerned with recording performance data over regions or spans of code. e.g: &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt;.</source>
          <target state="translated">これらは、リージョンまたはコードのスパンにわたるパフォーマンスデータの記録に関係しています。例： &lt;code&gt;void trace2_region_enter(const char *category, const char *label, const struct repository *repo)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10ea7c6e4b3ea51596f6b19ba236a57b5e812041" translate="yes" xml:space="preserve">
          <source>These are concerned with the lifetime of the overall git process. e.g: &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt;, &lt;code&gt;void trace2_initialize()&lt;/code&gt;, &lt;code&gt;int trace2_is_enabled()&lt;/code&gt;, &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt;.</source>
          <target state="translated">これらは、gitプロセス全体の存続期間に関係しています。例： &lt;code&gt;void trace2_initialize_clock()&lt;/code&gt; 、 &lt;code&gt;void trace2_initialize()&lt;/code&gt; 、 &lt;code&gt;int trace2_is_enabled()&lt;/code&gt; 、 &lt;code&gt;void trace2_cmd_start(int argc, const char **argv)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3dce3473c941e3b3b27a31ac8449a2f1991a75d0" translate="yes" xml:space="preserve">
          <source>These are concerned with the various spawned child processes, including shell scripts, git commands, editors, pagers, and hooks.</source>
          <target state="translated">これらは、シェルスクリプト、git コマンド、エディタ、ページャー、フックなど、さまざまな子プロセスをスポーンすることに関係しています。</target>
        </trans-unit>
        <trans-unit id="64d6caf87f558c78a882445d71ea9cd47be32d78" translate="yes" xml:space="preserve">
          <source>These are internal helper commands used by other commands; end users typically do not use them directly.</source>
          <target state="translated">これらは他のコマンドで使用される内部ヘルパーコマンドです。</target>
        </trans-unit>
        <trans-unit id="14e40973cf60a547a4fee511ff95c4f84a31a06f" translate="yes" xml:space="preserve">
          <source>These are only used with the &lt;code&gt;dcommit&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt; commands.</source>
          <target state="translated">これらは、 &lt;code&gt;dcommit&lt;/code&gt; コマンドと &lt;code&gt;rebase&lt;/code&gt; コマンドでのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="1f4226446a769c76931ca392e2a09f31777b3654" translate="yes" xml:space="preserve">
          <source>These are optional command-line options for init. Each of these flags can point to a relative repository path (--tags=project/tags) or a full url (--tags=https://foo.org/project/tags). You can specify more than one --tags and/or --branches options, in case your Subversion repository places tags or branches under multiple paths. The option --stdlayout is a shorthand way of setting trunk,tags,branches as the relative paths, which is the Subversion default. If any of the other options are given as well, they take precedence.</source>
          <target state="translated">これらはinitのオプションのコマンドラインオプションです。これらのフラグはそれぞれ、相対的なリポジトリのパス (--tags=project/tags)または完全な URL (--tags=https://foo.org/project/tags)を指すことができます。タグやブランチを複数のパスの下に配置している Subversion リポジトリの場合に備えて、--tags や --branches オプションを複数指定することができます。オプション --stdlayout は、トランク、タグ、ブランチを相対パスとして設定する略式な方法で、これは Subversion のデフォルトです。他のオプションを指定した場合は、それらが優先されます。</target>
        </trans-unit>
        <trans-unit id="ef89fe03d8c6b725e4e01a5ddca75169500d3912" translate="yes" xml:space="preserve">
          <source>These attributes affect how the contents stored in the repository are copied to the working tree files when commands such as &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git merge&lt;/code&gt; run. They also affect how Git stores the contents you prepare in the working tree in the repository upon &lt;code&gt;git add&lt;/code&gt; and &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">これらの属性は、 &lt;code&gt;git switch&lt;/code&gt; 、 &lt;code&gt;git checkout&lt;/code&gt; 、 &lt;code&gt;git merge&lt;/code&gt; などのコマンドを実行したときに、リポジトリに格納されているコンテンツが作業ツリーファイルにコピーされる方法に影響を与えます。また、 &lt;code&gt;git add&lt;/code&gt; および &lt;code&gt;git commit&lt;/code&gt; の際に、リポジトリの作業ツリーに準備したコンテンツをGitがどのように保存するかに影響します。</target>
        </trans-unit>
        <trans-unit id="1e36f59cc4fba5296689c97860f8ef3c808cbf54" translate="yes" xml:space="preserve">
          <source>These can be easily kept up to date using &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">これらは&lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt;を使用して簡単に最新に保つことができます。</target>
        </trans-unit>
        <trans-unit id="d8f5a662d30248028e58618a9cb324b38272bbd8" translate="yes" xml:space="preserve">
          <source>These commands all compare two sets of things; what is compared differs:</source>
          <target state="translated">これらのコマンドはすべて、2つのセットを比較します。</target>
        </trans-unit>
        <trans-unit id="6e07bfec6529e0e8049d6a168dde51eb0ed55268" translate="yes" xml:space="preserve">
          <source>These commands are to interact with foreign SCM and with other people via patch over e-mail.</source>
          <target state="translated">これらのコマンドは、海外のSCMとパッチを使ってメールでやりとりするためのものです。</target>
        </trans-unit>
        <trans-unit id="008c5282b165f202ade67dc870d3522a81a841bd" translate="yes" xml:space="preserve">
          <source>These configuration variables control &lt;code&gt;internal&lt;/code&gt; gitweb behavior.</source>
          <target state="translated">これらの構成変数は &lt;code&gt;internal&lt;/code&gt; gitwebの動作を制御します。</target>
        </trans-unit>
        <trans-unit id="94d243826a65ff43f06f691e3b2f877746c8e3a7" translate="yes" xml:space="preserve">
          <source>These configurations enable two things. First, each unix user (&lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt;) of the server will be able to browse through gitweb Git repositories found in &lt;code&gt;~/public_git/&lt;/code&gt; with the following url:</source>
          <target state="translated">これらの構成により、2つのことが可能になります。まず、サーバーの各UNIXユーザー（ &lt;code&gt;&amp;lt;user&amp;gt;&lt;/code&gt; ）は、 &lt;code&gt;~/public_git/&lt;/code&gt; にあるgitweb Gitリポジトリを次のURLで閲覧できます。</target>
        </trans-unit>
        <trans-unit id="3c188c162ef90ed4e72b2204b53fd7bbdf63ed82" translate="yes" xml:space="preserve">
          <source>These environment variables apply to &lt;code&gt;all&lt;/code&gt; core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.</source>
          <target state="translated">これらの環境変数は、 &lt;code&gt;all&lt;/code&gt; コアGitコマンドに適用されます。Nb：Gitの上にあるSCMSによってそれらが使用/オーバーライドされる可能性があることに注意する必要があります。外部のフロントエンドを使用する場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="e4a9928c908043039dae5cc89a184941db222aba" translate="yes" xml:space="preserve">
          <source>These exclude patterns come from these places, in order:</source>
          <target state="translated">これらの除外パターンは、順番に、これらの場所から来ています。</target>
        </trans-unit>
        <trans-unit id="75ad982aca6a7add80092ae27820348741497d7e" translate="yes" xml:space="preserve">
          <source>These flag are passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch.</source>
          <target state="translated">これらのフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; プログラム（&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）に渡されます。</target>
        </trans-unit>
        <trans-unit id="a66ecfa5cef3d43b11b6332452dde3bc34998a82" translate="yes" xml:space="preserve">
          <source>These flags are passed to &lt;code&gt;git am&lt;/code&gt; to easily change the dates of the rebased commits (see &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;).</source>
          <target state="translated">これらのフラグは &lt;code&gt;git am&lt;/code&gt; に渡され、リベースされたコミットの日付を簡単に変更できます（&lt;a href=&quot;git-am&quot;&gt;git-am [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="6f1d3498209d5426cb1c8295c9947466ac12cab4" translate="yes" xml:space="preserve">
          <source>These flags are passed to the &lt;code&gt;git apply&lt;/code&gt; (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) program that applies the patch.</source>
          <target state="translated">これらのフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; （&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）プログラムに渡されます。</target>
        </trans-unit>
        <trans-unit id="17c5d825c714d7f669df648adc8ffa3b9865aa3a" translate="yes" xml:space="preserve">
          <source>These forms reset the index entries for all paths that match the &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; to their state at &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt;. (It does not affect the working tree or the current branch.)</source>
          <target state="translated">これらのフォームは、 &lt;code&gt;&amp;lt;pathspec&amp;gt;&lt;/code&gt; に一致するすべてのパスのインデックスエントリを &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; の状態にリセットします。（作業ツリーや現在のブランチには影響しません。）</target>
        </trans-unit>
        <trans-unit id="84dfe82e69639d7dd0490e18b4061edc5e5f61bb" translate="yes" xml:space="preserve">
          <source>These general best practices are very helpful if you bisect often.</source>
          <target state="translated">これらの一般的なベストプラクティスは、あなたが頻繁に二分する場合に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="db63350c8a27af092cfd256119dcf34d87e7125f" translate="yes" xml:space="preserve">
          <source>These instructions use the &lt;code&gt;git-cvsimport&lt;/code&gt; script which ships with git, but other importers may provide better results. See the note in &lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport[1]&lt;/a&gt; for other options.</source>
          <target state="translated">これらの手順では、 &lt;code&gt;git-cvsimport&lt;/code&gt; するgit-cvsimportスクリプトを使用していますが、他のインポーターがより良い結果を提供する場合があります。その他のオプションについては、&lt;a href=&quot;git-cvsimport&quot;&gt;git-cvsimport [1]&lt;/a&gt;のメモを参照してください。</target>
        </trans-unit>
        <trans-unit id="4de4cd9ec9920076e498bf4f8c01b7cc0e7335b0" translate="yes" xml:space="preserve">
          <source>These messages are concerned with Git thread usage.</source>
          <target state="translated">これらのメッセージは、Git スレッドの使用に関するものです。</target>
        </trans-unit>
        <trans-unit id="b8e5bd243ffdab655773f15dbcfc0554b819902f" translate="yes" xml:space="preserve">
          <source>These options are deprecated. Use the above --notes/--no-notes options instead.</source>
          <target state="translated">これらのオプションは非推奨です。代わりに上記の --notes/--no-notes オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="894173daf027c82b1254f620d2cbbddacd04b7fd" translate="yes" xml:space="preserve">
          <source>These options are ignored for historical reasons.</source>
          <target state="translated">これらのオプションは歴史的な理由から無視されています。</target>
        </trans-unit>
        <trans-unit id="0608f735748e7710136ac2ca4b1a8fc7f8d0f8a8" translate="yes" xml:space="preserve">
          <source>These options are mostly targeted for packing of Git repositories.</source>
          <target state="translated">これらのオプションは主に Git リポジトリのパッキングを対象としています。</target>
        </trans-unit>
        <trans-unit id="44fc7c2eb5b5d3f683db2d8973767b7defab9c76" translate="yes" xml:space="preserve">
          <source>These options are passed to &lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack[1]&lt;/a&gt;. A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is &lt;code&gt;--thin&lt;/code&gt;.</source>
          <target state="translated">これらのオプションは&lt;a href=&quot;git-send-pack&quot;&gt;git-send-pack [1]に&lt;/a&gt;渡されます。シン転送では、送信者と受信者が同じオブジェクトの多くを共有している場合、送信されるデータの量が大幅に減少します。デフォルトは &lt;code&gt;--thin&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="38ddfaeebf99ab2e211259f05e2350cca6be519d" translate="yes" xml:space="preserve">
          <source>These options are primarily useful when converting a repository from one hash algorithm to another; without them, fast-import will fail if it encounters a submodule because it has no way of writing the object ID into the new hash algorithm.</source>
          <target state="translated">これらのオプションは、リポジトリをあるハッシュアルゴリズムから別のハッシュアルゴリズムに変換するときに主に便利です。 これらのオプションがないと、オブジェクトIDを新しいハッシュアルゴリズムに書き込む方法がないため、サブモジュールに遭遇したときにfast-importが失敗してしまいます。</target>
        </trans-unit>
        <trans-unit id="0c86ff6978b6c3146e6796c4f36abf160da0176d" translate="yes" xml:space="preserve">
          <source>These options can be used in an initial &lt;code&gt;clone&lt;/code&gt;, along with the &lt;code&gt;sync&lt;/code&gt; options described above.</source>
          <target state="translated">これらのオプションは、前述の &lt;code&gt;sync&lt;/code&gt; オプションとともに、初期 &lt;code&gt;clone&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="0ade32a888d52a4ba127b2e5cb51121d4b067e67" translate="yes" xml:space="preserve">
          <source>These options can be used in the initial &lt;code&gt;clone&lt;/code&gt; as well as in subsequent &lt;code&gt;sync&lt;/code&gt; operations.</source>
          <target state="translated">これらのオプションは、最初の &lt;code&gt;clone&lt;/code&gt; と後続の &lt;code&gt;sync&lt;/code&gt; 操作で使用できます。</target>
        </trans-unit>
        <trans-unit id="3f45787718e6c314237aec0cf2c5e63156df92c4" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 rebase&lt;/code&gt; behavior.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;git p4 rebase&lt;/code&gt; の動作を変更するために使用できます。</target>
        </trans-unit>
        <trans-unit id="046bf3cadb648529c8cbf517d3ba66246fc697fc" translate="yes" xml:space="preserve">
          <source>These options can be used to modify &lt;code&gt;git p4 submit&lt;/code&gt; behavior.</source>
          <target state="translated">これらのオプションを使用して、 &lt;code&gt;git p4 submit&lt;/code&gt; 動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="5bf9264c3d2f29d27aed45b38db366aee6362601" translate="yes" xml:space="preserve">
          <source>These options control layout (defaults to &lt;code&gt;column&lt;/code&gt;). Setting any of these implies &lt;code&gt;always&lt;/code&gt; if none of &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;never&lt;/code&gt;, or &lt;code&gt;auto&lt;/code&gt; are specified.</source>
          <target state="translated">これらのオプションはレイアウトを制御します（デフォルトは &lt;code&gt;column&lt;/code&gt; です）。これらのいずれかを設定することを意味し &lt;code&gt;always&lt;/code&gt; のどれ場合は &lt;code&gt;always&lt;/code&gt; 、 &lt;code&gt;never&lt;/code&gt; 、または &lt;code&gt;auto&lt;/code&gt; が指定されていません。</target>
        </trans-unit>
        <trans-unit id="510a1cbefb424a60db8479a49dd55a0966d6d945" translate="yes" xml:space="preserve">
          <source>These options control when the feature should be enabled (defaults to &lt;code&gt;never&lt;/code&gt;):</source>
          <target state="translated">これらのオプションは、機能を有効にするタイミングを制御します（デフォルトは &lt;code&gt;never&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="931e215644554fa9404627a014bfd3cf51399ea5" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.splitIndex&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;core.splitIndex&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は、次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されるためです。</target>
        </trans-unit>
        <trans-unit id="932e8c22c29966222600cac9510425979eeabd1c" translate="yes" xml:space="preserve">
          <source>These options take effect whatever the value of the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</source>
          <target state="translated">これらのオプションは、 &lt;code&gt;core.untrackedCache&lt;/code&gt; 構成変数の値が何であっても有効です（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。ただし、変更が構成された値に対して行われると警告が発行されます。構成された値は、次にインデックスが読み取られたときに有効になり、これによりオプションの意図した効果が削除されるためです。</target>
        </trans-unit>
        <trans-unit id="ff7024be4fc3bd9a63ff1aab42e5c2f33080a5ad" translate="yes" xml:space="preserve">
          <source>These parameters can also be set individually with &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt;, &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; and &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">これらのパラメーターは、-- &lt;code&gt;--stat-width=&amp;lt;width&amp;gt;&lt;/code&gt; 、-- &lt;code&gt;--stat-name-width=&amp;lt;name-width&amp;gt;&lt;/code&gt; および &lt;code&gt;--stat-count=&amp;lt;count&amp;gt;&lt;/code&gt; を使用して個別に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="25d97f197e2ad468ea791c831ca2e71054c4e207" translate="yes" xml:space="preserve">
          <source>These remote-tracking references can be deleted as a one-off with either of:</source>
          <target state="translated">これらのリモートトラッキング参照は、以下のいずれかの方法で一度に削除することができます。</target>
        </trans-unit>
        <trans-unit id="4994737bcfd88cfa54486bc85e99d5152416b798" translate="yes" xml:space="preserve">
          <source>These rules make it easy for shell script based tools to parse reference names, pathname expansion by the shell when a reference name is used unquoted (by mistake), and also avoid ambiguities in certain reference name expressions (see &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt;):</source>
          <target state="translated">これらのルールにより、シェルスクリプトベースのツールが参照名を解析しやすくなり、参照名が引用符なしで（誤って）使用された場合のシェルによるパス名展開、および特定の参照名式のあいまいさを回避できます（&lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d2d3b8bc5c27c38dddb2f7c9e54b52668c820483" translate="yes" xml:space="preserve">
          <source>These services can be enabled/disabled using the per-repository configuration file:</source>
          <target state="translated">これらのサービスは、リポジトリごとの設定ファイルを使用して有効化/無効化することができます。</target>
        </trans-unit>
        <trans-unit id="11be9ffec744e4c727f505822229118ed50ca097" translate="yes" xml:space="preserve">
          <source>These services can be globally enabled/disabled using the command-line options of this command. If finer-grained control is desired (e.g. to allow &lt;code&gt;git archive&lt;/code&gt; to be run against only in a few selected repositories the daemon serves), the per-repository configuration file can be used to enable or disable them.</source>
          <target state="translated">これらのサービスは、このコマンドのコマンドラインオプションを使用してグローバルに有効/無効にすることができます。より細かい制御が必要な場合（たとえば、デーモンが提供するいくつかの選択されたリポジトリでのみ &lt;code&gt;git archive&lt;/code&gt; を実行できるようにする場合）、リポジトリごとの構成ファイルを使用してそれらを有効または無効にできます。</target>
        </trans-unit>
        <trans-unit id="6e7a1043f71fa1813c0b5e398e97710f483944d9" translate="yes" xml:space="preserve">
          <source>These things may exist in a Git repository.</source>
          <target state="translated">これらのものはGitリポジトリに存在している可能性があります。</target>
        </trans-unit>
        <trans-unit id="b5c7f688db050c92cfc9bb2aa9d676e52849ec7b" translate="yes" xml:space="preserve">
          <source>These three branches all forked from a common commit, [master], whose commit message is &quot;Add 'git show-branch'&quot;. The &quot;fixes&quot; branch adds one commit &quot;Introduce &quot;reset type&quot; flag to &quot;git reset&quot;&quot;. The &quot;mhf&quot; branch adds many other commits. The current branch is &quot;master&quot;.</source>
          <target state="translated">これら 3 つのブランチはすべて共通のコミット [master]からフォークされたもので、そのコミットメッセージは &quot;Add 'git show-branch'&quot; となっています。そのコミットメッセージは &quot;Add 'git show-branch'&quot; です。mhf&quot; ブランチは他にもたくさんのコミットを追加しています。現在のブランチは &quot;master&quot; です。</target>
        </trans-unit>
        <trans-unit id="c6204a9318b7a0526e46b8696b2eb378d52ecf11" translate="yes" xml:space="preserve">
          <source>These two filters behave differently, and by default, a filter is taken as the former, massaging the contents into more convenient shape. A missing filter driver definition in the config, or a filter driver that exits with a non-zero status, is not an error but makes the filter a no-op passthru.</source>
          <target state="translated">これら 2 つのフィルタの振る舞いは異なり、デフォルトではフィルタは前者として扱われ、内容をより便利な形に整形します。設定にフィルタドライバの定義がない場合や、ゼロではない状態で終了するフィルタドライバはエラーではありませんが、そのフィルタは無操作パススルーになります。</target>
        </trans-unit>
        <trans-unit id="e20e46dc24b79b5218925e423850545226b0898e" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">これら 2 つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を用いてどのように保存されるかに影響を与えます。まずオブジェクトは内部的にタイプ、サイズ、オプションとして名前でソートされ、 --window 内の他のオブジェクトと比較され、デルタ圧縮を使用することでスペースを節約できるかどうかが確認されます。--あまり深くしすぎるとアンパッカー側のパフォーマンスに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="de212a952b72f4cd05af023bbd056fa8307c4a9f" translate="yes" xml:space="preserve">
          <source>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within &lt;code&gt;--window&lt;/code&gt; to see if using delta compression saves space. &lt;code&gt;--depth&lt;/code&gt; limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object.</source>
          <target state="translated">これらの2つのオプションは、パックに含まれるオブジェクトがデルタ圧縮を使用して格納される方法に影響します。オブジェクトは最初にタイプ、サイズ、オプションで名前で内部的にソートされ、デルタ圧縮を使用してスペースを節約できるかどうかを確認するために &lt;code&gt;--window&lt;/code&gt; 内の他のオブジェクトと比較されます。 &lt;code&gt;--depth&lt;/code&gt; は最大デルタ深度を制限します。必要以上の深さにすると、アンパッカー側のパフォーマンスに影響します。デルタデータは、必要なオブジェクトに到達するまで何度も適用する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="6a0bfaec1ca5ad5a0f6710f22f7b4b78eecfef67" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except the former implies --local option.</source>
          <target state="translated">これら2つの構文は、前者が--localオプションを意味することを除けば、ほぼ同等です。</target>
        </trans-unit>
        <trans-unit id="9270307e15adf00d482cdebd8e068750f310bc87" translate="yes" xml:space="preserve">
          <source>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; for details.</source>
          <target state="translated">これらの2つの構文は、前者が--localオプションを暗黙指定している場合を除いて、ほとんど同じです。詳細については、&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="469e074d32a553c54f69af6603803ffbfd2e6dda" translate="yes" xml:space="preserve">
          <source>These types of entries are generally created as a result of using &lt;code&gt;git
commit --amend&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner, which is why the default is more aggressive than &lt;code&gt;gc.reflogExpire&lt;/code&gt;.</source>
          <target state="translated">これらのタイプのエントリは通常、 &lt;code&gt;git commit --amend&lt;/code&gt; または &lt;code&gt;git rebase&lt;/code&gt; を使用した結果として作成され、修正またはリベースが発生する前のコミットです。これらの変更は現在のプロジェクトの一部ではないため、ほとんどのユーザーはそれらをより早く期限切れにしたいと思うでしょう。そのため、デフォルトは &lt;code&gt;gc.reflogExpire&lt;/code&gt; よりも積極的です。</target>
        </trans-unit>
        <trans-unit id="99a10a0726ee032ba80815c05eceb6d5a6ab2aa8" translate="yes" xml:space="preserve">
          <source>These variables control various optional help messages designed to aid new users. All &lt;code&gt;advice.*&lt;/code&gt; variables default to &lt;code&gt;true&lt;/code&gt;, and you can tell Git that you do not need help by setting these to &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="translated">これらの変数は、新しいユーザーを支援するために設計されたさまざまなオプションのヘルプメッセージを制御します。すべての &lt;code&gt;advice.*&lt;/code&gt; 変数はデフォルトで &lt;code&gt;true&lt;/code&gt; に設定されており、これらを &lt;code&gt;false&lt;/code&gt; に設定することで、Gitにヘルプが不要であることを伝えることができます。</target>
        </trans-unit>
        <trans-unit id="289bbff1e27f0cf157d5208bbfcb9f369ecc1504" translate="yes" xml:space="preserve">
          <source>These variables obviate the need for command-line options in some circumstances, allowing easier restricted usage through git-shell.</source>
          <target state="translated">これらの変数を使用することで、状況によってはコマンドラインオプションが不要になり、git-shell での使用をより簡単に制限できるようになります。</target>
        </trans-unit>
        <trans-unit id="48d5c4b33cae3d35014b5a5e266ea897c2a18c9f" translate="yes" xml:space="preserve">
          <source>These will display all commits which exist only on HEAD or on MERGE_HEAD, and which touch an unmerged file.</source>
          <target state="translated">これらのコミットは、HEAD または MERGE_HEAD にのみ存在し、マージされていないファイルに触れているすべてのコミットを表示します。</target>
        </trans-unit>
        <trans-unit id="e9ab0d9bdf3f35b7d6ece2d3bc65f4fbb38bad38" translate="yes" xml:space="preserve">
          <source>They are both passed directly to &lt;code&gt;git diff-tree&lt;/code&gt;; see &lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree[1]&lt;/a&gt; for more information.</source>
          <target state="translated">どちらも直接 &lt;code&gt;git diff-tree&lt;/code&gt; に渡されます。詳細については、&lt;a href=&quot;git-diff-tree&quot;&gt;git-diff-tree [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="afa16f632fa562fed5a34ad41431101aacb568d7" translate="yes" xml:space="preserve">
          <source>They can include slash &lt;code&gt;/&lt;/code&gt; for hierarchical (directory) grouping, but no slash-separated component can begin with a dot &lt;code&gt;.&lt;/code&gt; or end with the sequence &lt;code&gt;.lock&lt;/code&gt;.</source>
          <target state="translated">階層（ディレクトリ）のグループ化のためにスラッシュ &lt;code&gt;/&lt;/code&gt; を含めることができますが、スラッシュで区切られたコンポーネントをドットで始めることはできません &lt;code&gt;.&lt;/code&gt; または、シーケンス &lt;code&gt;.lock&lt;/code&gt; で終わります。</target>
        </trans-unit>
        <trans-unit id="48a933f433abac80f2e0e41b240081f7a399893c" translate="yes" xml:space="preserve">
          <source>They cannot be the single character &lt;code&gt;@&lt;/code&gt;.</source>
          <target state="translated">単一文字 &lt;code&gt;@&lt;/code&gt; にすることはできません。</target>
        </trans-unit>
        <trans-unit id="c798a840110b095cd0c31cb10cad16c17f5292dd" translate="yes" xml:space="preserve">
          <source>They cannot begin or end with a slash &lt;code&gt;/&lt;/code&gt; or contain multiple consecutive slashes (see the &lt;code&gt;--normalize&lt;/code&gt; option below for an exception to this rule)</source>
          <target state="translated">スラッシュで開始または終了することはできません &lt;code&gt;/&lt;/code&gt; または連続する複数のスラッシュを含めることはできません（このルールの例外については、以下の &lt;code&gt;--normalize&lt;/code&gt; オプションを参照してください）</target>
        </trans-unit>
        <trans-unit id="794c847c2b033448497ba9e6f46f59b7325ccd69" translate="yes" xml:space="preserve">
          <source>They cannot contain a &lt;code&gt;\&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\&lt;/code&gt; を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="c4cf89d0a711867dbdfa498e7e6b80fb04c020f3" translate="yes" xml:space="preserve">
          <source>They cannot contain a sequence &lt;code&gt;@{&lt;/code&gt;.</source>
          <target state="translated">シーケンス &lt;code&gt;@{&lt;/code&gt; 含めることはできません。</target>
        </trans-unit>
        <trans-unit id="c781dcfcbfa7c545717cc72f3f25ac7fba039fd7" translate="yes" xml:space="preserve">
          <source>They cannot end with a dot &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">ドットで終わることはできません &lt;code&gt;.&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdf3c698f8591838633d63d5550c41009f5d53bb" translate="yes" xml:space="preserve">
          <source>They cannot have ASCII control characters (i.e. bytes whose values are lower than \040, or \177 &lt;code&gt;DEL&lt;/code&gt;), space, tilde &lt;code&gt;~&lt;/code&gt;, caret &lt;code&gt;^&lt;/code&gt;, or colon &lt;code&gt;:&lt;/code&gt; anywhere.</source>
          <target state="translated">ASCII制御文字（つまり、値が\ 040または\ 177 &lt;code&gt;DEL&lt;/code&gt; 未満のバイト）、スペース、チルド &lt;code&gt;~&lt;/code&gt; 、キャレット &lt;code&gt;^&lt;/code&gt; 、またはコロン &lt;code&gt;:&lt;/code&gt; はどこにも含めることができません。</target>
        </trans-unit>
        <trans-unit id="9fa9a35ba99f055f59e5fb0fc3903845af8141d1" translate="yes" xml:space="preserve">
          <source>They cannot have question-mark &lt;code&gt;?&lt;/code&gt;, asterisk &lt;code&gt;*&lt;/code&gt;, or open bracket &lt;code&gt;[&lt;/code&gt; anywhere. See the &lt;code&gt;--refspec-pattern&lt;/code&gt; option below for an exception to this rule.</source>
          <target state="translated">疑問符を付けることはできません &lt;code&gt;?&lt;/code&gt; 、アスタリスク &lt;code&gt;*&lt;/code&gt; 、または開き角かっこ &lt;code&gt;[&lt;/code&gt; どこでも。このルールの例外については、以下の &lt;code&gt;--refspec-pattern&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="07233de88d34b821d099ea14e09099281360fa3d" translate="yes" xml:space="preserve">
          <source>They cannot have two consecutive dots &lt;code&gt;..&lt;/code&gt; anywhere.</source>
          <target state="translated">彼らは、2つの連続したドットを持つことができません &lt;code&gt;..&lt;/code&gt; .どこでも。</target>
        </trans-unit>
        <trans-unit id="08cc7b3818b658e36c5e9a0a0fcefabb2c9bd5ce" translate="yes" xml:space="preserve">
          <source>They must contain at least one &lt;code&gt;/&lt;/code&gt;. This enforces the presence of a category like &lt;code&gt;heads/&lt;/code&gt;, &lt;code&gt;tags/&lt;/code&gt; etc. but the actual names are not restricted. If the &lt;code&gt;--allow-onelevel&lt;/code&gt; option is used, this rule is waived.</source>
          <target state="translated">少なくとも1つ &lt;code&gt;/&lt;/code&gt; を含める必要があります。これにより、 &lt;code&gt;heads/&lt;/code&gt; 、 &lt;code&gt;tags/&lt;/code&gt; などのカテゴリの存在が強制されますが、実際の名前は制限されません。場合 &lt;code&gt;--allow-onelevel&lt;/code&gt; ですオプションが使用され、このルールが免除されます。</target>
        </trans-unit>
        <trans-unit id="9c66e1086c1b783565f285e9f8d345796e4a920b" translate="yes" xml:space="preserve">
          <source>Things get more complicated if the &lt;code&gt;subsystem&lt;/code&gt; changes do not exactly correspond to the ones before the rebase.</source>
          <target state="translated">&lt;code&gt;subsystem&lt;/code&gt; 変更がリベース前の変更と正確に対応していない場合、状況はさらに複雑になります。</target>
        </trans-unit>
        <trans-unit id="877bd5e347693a4c90610529b809f198ae203a8a" translate="yes" xml:space="preserve">
          <source>Think about how to create a clear chapter dependency graph that will allow people to get to important topics without necessarily reading everything in between.</source>
          <target state="translated">必ずしも間にあるものをすべて読まなくても、重要なトピックにたどり着けるような、わかりやすい章の依存関係グラフの作り方を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="5f03012af2a22f62503c31e1e064eb23ddd2be46" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;key&lt;/code&gt; will be used instead of &amp;lt;token&amp;gt; in the trailer. At the end of this key, a separator can appear and then some space characters. By default the only valid separator is &lt;code&gt;:&lt;/code&gt;, but this can be changed using the &lt;code&gt;trailer.separators&lt;/code&gt; config variable.</source>
          <target state="translated">この &lt;code&gt;key&lt;/code&gt; は、トレーラーで&amp;lt;token&amp;gt;の代わりに使用されます。このキーの最後に、セパレータが表示され、その後にいくつかのスペース文字が表示されます。デフォルトでは、有効なセパレーターは &lt;code&gt;:&lt;/code&gt; のみですが、これは、 &lt;code&gt;trailer.separators&lt;/code&gt; 構成変数を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="9ed9ef222233001104259cd6ab7e0ea2e028dedb" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;merge&lt;/code&gt; can also be done by &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt;, like this:</source>
          <target state="translated">この &lt;code&gt;merge&lt;/code&gt; は、次のように &lt;code&gt;pulling from her own remote-tracking branch&lt;/code&gt; することでも実行できます。</target>
        </trans-unit>
        <trans-unit id="0007248c88629a35b9fa8e1cf4c8fdf299191526" translate="yes" xml:space="preserve">
          <source>This accepts all options that &lt;code&gt;git svn fetch&lt;/code&gt; and &lt;code&gt;git rebase&lt;/code&gt; accept. However, &lt;code&gt;--fetch-all&lt;/code&gt; only fetches from the current [svn-remote], and not all [svn-remote] definitions.</source>
          <target state="translated">これは &lt;code&gt;git svn fetch&lt;/code&gt; と &lt;code&gt;git rebase&lt;/code&gt; が受け入れるすべてのオプションを受け入れます。ただし、 &lt;code&gt;--fetch-all&lt;/code&gt; は現在の[svn-remote]からのみフェッチし、すべての[svn-remote]定義からはフェッチしません。</target>
        </trans-unit>
        <trans-unit id="c118365ba0290d763b2d4e635fbfbb09d23e73e6" translate="yes" xml:space="preserve">
          <source>This action is disabled by default for performance reasons.</source>
          <target state="translated">このアクションは、パフォーマンス上の理由からデフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="692de83ae64c152ace96a6b22c40c6c7b5256f5f" translate="yes" xml:space="preserve">
          <source>This adds a link titled &quot;graphiclog&quot; after the &quot;summary&quot; link, leading to &lt;code&gt;git-browser&lt;/code&gt; script, passing &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; as a query parameter.</source>
          <target state="translated">これにより、「summary」リンクの後に「graphiclog」というタイトルのリンクが追加され、 &lt;code&gt;git-browser&lt;/code&gt; スクリプトにつながり、クエリパラメータとして &lt;code&gt;r=&amp;lt;project&amp;gt;&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="9647e1f610a9d28b74cedc3ffa625f5d98628ec8" translate="yes" xml:space="preserve">
          <source>This algorithm extends the patience algorithm to &quot;support low-occurrence common elements&quot;.</source>
          <target state="translated">このアルゴリズムは、忍耐アルゴリズムを拡張して「低頻度の共通要素をサポート」するものです。</target>
        </trans-unit>
        <trans-unit id="5f9e4d22cfa1bc9f924abb0f51a443db2655b318" translate="yes" xml:space="preserve">
          <source>This allows &lt;code&gt;git svn&lt;/code&gt; to re-map repository URLs and UUIDs from mirrors created using SVN::Mirror (or svk) for metadata.</source>
          <target state="translated">これにより、 &lt;code&gt;git svn&lt;/code&gt; はメタデータのSVN :: Mirror（またはsvk）を使用して作成されたミラーからリポジトリURLとUUIDを再マッピングできます。</target>
        </trans-unit>
        <trans-unit id="cb552885bcd7df779f362e35a229c9d935657c60" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause skipping of all matching paths from checkout from SVN. The &lt;code&gt;--ignore-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository.</source>
          <target state="translated">これにより、SVNからのチェックアウトから一致するすべてのパスをスキップするPerl正規表現を指定できます。 &lt;code&gt;--ignore-paths&lt;/code&gt; オプションは、すべてのために一致している必要があり &lt;code&gt;fetch&lt;/code&gt; （自動起因するフェッチを含む &lt;code&gt;clone&lt;/code&gt; 、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 所定のリポジトリに、など）。</target>
        </trans-unit>
        <trans-unit id="bf5d12ceb1111e8b06bd58f3985472091a1cae12" translate="yes" xml:space="preserve">
          <source>This allows one to specify a Perl regular expression that will cause the inclusion of only matching paths from checkout from SVN. The &lt;code&gt;--include-paths&lt;/code&gt; option should match for every &lt;code&gt;fetch&lt;/code&gt; (including automatic fetches due to &lt;code&gt;clone&lt;/code&gt;, &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, etc) on a given repository. &lt;code&gt;--ignore-paths&lt;/code&gt; takes precedence over &lt;code&gt;--include-paths&lt;/code&gt;.</source>
          <target state="translated">これにより、SVNからのチェックアウトから一致するパスのみを含めるPerl正規表現を指定できます。 &lt;code&gt;--include-paths&lt;/code&gt; オプションは、すべてのために一致している必要があり &lt;code&gt;fetch&lt;/code&gt; （自動起因するフェッチを含む &lt;code&gt;clone&lt;/code&gt; 、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 所定のリポジトリに、など）。 &lt;code&gt;--ignore-paths&lt;/code&gt; は--include-pathsよりも優先され &lt;code&gt;--include-paths&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c68f089f9144bc4bdc1d710532bfa75a569d11ed" translate="yes" xml:space="preserve">
          <source>This allows one to specify a prefix which is prepended to the names of remotes if trunk/branches/tags are specified. The prefix does not automatically include a trailing slash, so be sure you include one in the argument if that is what you want. If --branches/-b is specified, the prefix must include a trailing slash. Setting a prefix (with a trailing slash) is strongly encouraged in any case, as your SVN-tracking refs will then be located at &quot;refs/remotes/$prefix/&lt;strong&gt;&quot;, which is compatible with Git&amp;rsquo;s own remote-tracking ref layout (refs/remotes/$remote/&lt;/strong&gt;). Setting a prefix is also useful if you wish to track multiple projects that share a common repository. By default, the prefix is set to &lt;code&gt;origin/&lt;/code&gt;.</source>
          <target state="translated">これにより、トランク/ブランチ/タグが指定されている場合に、リモートの名前の前に付加されるプレフィックスを指定できます。接頭辞には自動的に末尾のスラッシュが含まれないため、必要な場合は引数にスラッシュを含めてください。 --branches / -bが指定されている場合、プレフィックスには末尾にスラッシュを含める必要があります。 SVNトラッキング参照は、&lt;strong&gt;Gitの独自のリモート追跡参照レイアウト（参照/ remotes / $ remote /&lt;/strong&gt;）。共通のリポジトリを共有する複数のプロジェクトを追跡する場合にも、プレフィックスを設定すると便利です。デフォルトでは、プレフィックスは &lt;code&gt;origin/&lt;/code&gt; 設定されています。</target>
        </trans-unit>
        <trans-unit id="99b10fdeae941de841a9ac73e39b7c06fcc2d978" translate="yes" xml:space="preserve">
          <source>This allows revision ranges for partial/cauterized history to be supported. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported.</source>
          <target state="translated">これにより、部分的に/焼灼された履歴のリビジョン範囲をサポートすることができます。NUMBER、$NUMBER1:$NUMBER2 (数値範囲)、$NUMBER:HEAD、およびBASE:$NUMBERはすべてサポートされています。</target>
        </trans-unit>
        <trans-unit id="f18b167effc162d347deb782b83eab22ac73f014" translate="yes" xml:space="preserve">
          <source>This allows users to create repositories from alternate URLs. For example, an administrator could run &lt;code&gt;git svn&lt;/code&gt; on the server locally (accessing via file://) but wish to distribute the repository with a public http:// or svn:// URL in the metadata so users of it will see the public URL.</source>
          <target state="translated">これにより、ユーザーは代替URLからリポジトリを作成できます。たとえば、管理者はサーバー上で &lt;code&gt;git svn&lt;/code&gt; をローカルに（file：//経由でアクセスして）実行できますが、メタデータにhttp：//またはsvn：//のパブリックURLを付けてリポジトリを配布して、ユーザーに表示されるようにします。パブリックURL。</target>
        </trans-unit>
        <trans-unit id="86c4c002dbb35b192dee2247feadc27722ad842a" translate="yes" xml:space="preserve">
          <source>This application is a CVS emulation layer for Git.</source>
          <target state="translated">このアプリケーションはGitのCVSエミュレーションレイヤーです。</target>
        </trans-unit>
        <trans-unit id="8feea1468fa1fae814e84f89aca492fad30e5da4" translate="yes" xml:space="preserve">
          <source>This applies modifications from a hot-fix branch before each test run, e.g. in case your build or test environment changed so that older revisions may need a fix which newer ones have already. (Make sure the hot-fix branch is based off a commit which is contained in all revisions which you are bisecting, so that the merge does not pull in too much, or use &lt;code&gt;git cherry-pick&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt;.)</source>
          <target state="translated">これは、たとえば、ビルドまたはテスト環境が変更されて古いリビジョンが新しいリビジョンにすでにある修正を必要とする場合など、各テスト実行の前にホットフィックスブランチからの変更を適用します。（ホットフィックスブランチが、二分割しているすべてのリビジョンに含まれているコミットに基づいていることを確認してください。マージがあまり引き込まれないようにするか、 &lt;code&gt;git merge&lt;/code&gt; ではなく &lt;code&gt;git cherry-pick&lt;/code&gt; を使用してください。）</target>
        </trans-unit>
        <trans-unit id="889d1277201779cf18582f69129975a9bf60d357" translate="yes" xml:space="preserve">
          <source>This applies to files added to the source branch &lt;strong&gt;after&lt;/strong&gt; a daughter branch was created: if previously no commit was made on the daughter branch they will erroneously be added to the daughter branch in git.</source>
          <target state="translated">これは、ドーターブランチの作成&lt;strong&gt;後に&lt;/strong&gt;ソースブランチ&lt;strong&gt;に&lt;/strong&gt;追加されたファイルに適用されます。以前にドーターブランチでコミットが行われなかった場合、gitのドーターブランチに誤って追加されます。</target>
        </trans-unit>
        <trans-unit id="cd519f993fc33ca56b2cb882b0ae5ba8b983012d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead it sets the vhost field in the git:// service request (to rest of the argument). Default is not to send vhost in such request (if sent).</source>
          <target state="translated">この引数は &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; に渡されません。代わりに、git：//サービス要求のvhostフィールドを設定します（残りの引数に）。デフォルトでは、そのようなリクエストでvhostを送信しません（送信された場合）。</target>
        </trans-unit>
        <trans-unit id="9535ee34f2074fa8e689413e0518f1d3faf71e7d" translate="yes" xml:space="preserve">
          <source>This argument will not be passed to &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;. Instead, it will cause the helper to start by sending git:// service requests to the remote side with the service field set to an appropriate value and the repository field set to rest of the argument. Default is not to send such a request.</source>
          <target state="translated">この引数は &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; に渡されません。代わりに、サービスフィールドを適切な値に設定し、リポジトリフィールドを残りの引数に設定して、git：//サービスリクエストをリモート側に送信することで、ヘルパーを開始します。デフォルトでは、このようなリクエストは送信されません。</target>
        </trans-unit>
        <trans-unit id="b50cd8ffcdc46b4b68ae7776a2b00f1d1183b6dd" translate="yes" xml:space="preserve">
          <source>This asks for all the history reachable from the given commit but not from any branch, tag, or other reference. If you decide it&amp;rsquo;s something you want, you can always create a new reference to it, e.g.,</source>
          <target state="translated">これは、ブランチ、タグ、またはその他の参照からではなく、特定のコミットから到達可能なすべての履歴を要求します。あなたがそれがあなたが望むものであると決定した場合、あなたはいつでもそれへの新しい参照を作成することができます、例えば、</target>
        </trans-unit>
        <trans-unit id="7efa4dea1c9da210003e0c08e382eb543f66cbf7" translate="yes" xml:space="preserve">
          <source>This attribute controls the length of conflict markers left in the work tree file during a conflicted merge. Only setting to the value to a positive integer has any meaningful effect.</source>
          <target state="translated">この属性は、競合したマージ時にワークツリーファイルに残される競合マーカーの長さを制御します。この値を正の整数に設定した場合のみ、意味のある効果があります。</target>
        </trans-unit>
        <trans-unit id="4caef1788f338fb02906a32b34bfb366a7539a3a" translate="yes" xml:space="preserve">
          <source>This attribute enables and controls end-of-line normalization. When a text file is normalized, its line endings are converted to LF in the repository. To control what line ending style is used in the working directory, use the &lt;code&gt;eol&lt;/code&gt; attribute for a single file and the &lt;code&gt;core.eol&lt;/code&gt; configuration variable for all text files. Note that setting &lt;code&gt;core.autocrlf&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;input&lt;/code&gt; overrides &lt;code&gt;core.eol&lt;/code&gt; (see the definitions of those options in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">この属性は、行末の正規化を有効にして制御します。テキストファイルが正規化されると、その行末はリポジトリでLFに変換されます。作業ディレクトリで使用される行末スタイルを制御するには、単一ファイルに &lt;code&gt;eol&lt;/code&gt; 属性を使用し、すべてのテキストファイルに &lt;code&gt;core.eol&lt;/code&gt; 構成変数を使用します。設定することを注意 &lt;code&gt;core.autocrlf&lt;/code&gt; に &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;input&lt;/code&gt; オーバーライド &lt;code&gt;core.eol&lt;/code&gt; （にこれらのオプションの定義を参照&lt;a href=&quot;git-config&quot;&gt;のgit -設定[1] &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="9abb1dada669f4b282e87943eaa4c10d9676f824" translate="yes" xml:space="preserve">
          <source>This attribute sets a specific line-ending style to be used in the working directory. It enables end-of-line conversion without any content checks, effectively setting the &lt;code&gt;text&lt;/code&gt; attribute. Note that setting this attribute on paths which are in the index with CRLF line endings may make the paths to be considered dirty. Adding the path to the index again will normalize the line endings in the index.</source>
          <target state="translated">この属性は、作業ディレクトリで使用される特定の行末スタイルを設定します。コンテンツのチェックなしで行末の変換が可能になり、効果的に &lt;code&gt;text&lt;/code&gt; 属性を設定します。CRLF行末のインデックスにあるパスにこの属性を設定すると、パスがダーティと見なされる場合があります。インデックスへのパスを再度追加すると、インデックスの行末が正規化されます。</target>
        </trans-unit>
        <trans-unit id="a95f413f93d421b5f0b609911f7201baca2aa2de" translate="yes" xml:space="preserve">
          <source>This automatically updates the rev_map if needed (see &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; in the FILES section below for details).</source>
          <target state="translated">これにより、必要に応じてrev_mapが自動的に更新されます（詳細については、以下の「ファイル」セクションの &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="756e07e0622c048ffb322b306c002b3fe742a463" translate="yes" xml:space="preserve">
          <source>This behavior can be suppressed with the &lt;code&gt;--no-ff&lt;/code&gt; option.</source>
          <target state="translated">この動作は &lt;code&gt;--no-ff&lt;/code&gt; オプションで抑制できます。</target>
        </trans-unit>
        <trans-unit id="8ad430bc747d1916521d538bf94c1847176c4231" translate="yes" xml:space="preserve">
          <source>This behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to &lt;code&gt;false&lt;/code&gt; if you want &lt;code&gt;git switch&lt;/code&gt;, &lt;code&gt;git checkout&lt;/code&gt; and &lt;code&gt;git branch&lt;/code&gt; to always behave as if &lt;code&gt;--no-track&lt;/code&gt; were given. Set it to &lt;code&gt;always&lt;/code&gt; if you want this behavior when the start-point is either a local or remote-tracking branch.</source>
          <target state="translated">この動作は、開始点がリモート追跡ブランチである場合のデフォルトです。branch.autoSetupMergeのコンフィギュレーション変数を設定し &lt;code&gt;false&lt;/code&gt; したい場合は &lt;code&gt;git switch&lt;/code&gt; 、 &lt;code&gt;git checkout&lt;/code&gt; と &lt;code&gt;git branch&lt;/code&gt; あるかのように常に動作するように &lt;code&gt;--no-track&lt;/code&gt; 与えられました。開始点がローカルまたはリモート追跡ブランチであるときにこの動作が必要な場合は、 &lt;code&gt;always&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="02d843a8479501e1f56c84b63bc83f8438d9dc3a" translate="yes" xml:space="preserve">
          <source>This boolean config option controls whether the maintenance task with name &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; is run when no &lt;code&gt;--task&lt;/code&gt; option is specified to &lt;code&gt;git maintenance run&lt;/code&gt;. These config values are ignored if a &lt;code&gt;--task&lt;/code&gt; option exists. By default, only &lt;code&gt;maintenance.gc.enabled&lt;/code&gt; is true.</source>
          <target state="translated">このブール &lt;code&gt;--task&lt;/code&gt; オプションは、 &lt;code&gt;git maintenance run&lt;/code&gt; Maintenancerunに--taskオプションが指定されていない場合に &lt;code&gt;&amp;lt;task&amp;gt;&lt;/code&gt; という名前のメンテナンスタスクを実行するかどうかを制御します。 &lt;code&gt;--task&lt;/code&gt; オプションが存在する場合、これらの構成値は無視されます。デフォルトでは、 &lt;code&gt;maintenance.gc.enabled&lt;/code&gt; のみがtrueです。</target>
        </trans-unit>
        <trans-unit id="e589ab09a449c7cf7000e50f249deca2b148281c" translate="yes" xml:space="preserve">
          <source>This boolean will enable &lt;code&gt;fsync()&lt;/code&gt; when writing object files.</source>
          <target state="translated">このブール値は、オブジェクトファイルを書き込むときに &lt;code&gt;fsync()&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="2a9d8bb8cd3e4996e1654fca8257ad2030d24d70" translate="yes" xml:space="preserve">
          <source>This breakage is of course most of the time unrelated to the breakage we are trying to locate in the commit graph. But it prevents us to know if the interesting &quot;bad behavior&quot; is present or not.</source>
          <target state="translated">このブレークエイジは、もちろんほとんどの場合、コミットグラフの中で見つけようとしているブレークエイジとは無関係です。しかし、これでは興味深い「悪い動作」が存在するかどうかを知ることができません。</target>
        </trans-unit>
        <trans-unit id="1a7656b1b8b17aa91ea330f8fbedd0a75097faed" translate="yes" xml:space="preserve">
          <source>This bug has also been shown to affect non-symlink cases of replacing a directory with a file when it comes to the internal structures of the untracked cache, but no case has been reported where this resulted in wrong &quot;git status&quot; output.</source>
          <target state="translated">このバグは、トラックされていないキャッシュの内部構造に関連して、ディレクトリをファイルに置き換えた場合にも影響を与えることが示されていますが、これが原因で誤った &quot;git status&quot; 出力になったケースは報告されていません。</target>
        </trans-unit>
        <trans-unit id="bbb14e9c1a32bd1658d34b41d317e78fe3e2cf7e" translate="yes" xml:space="preserve">
          <source>This cache is meant to speed up commands that involve determining untracked files such as &lt;code&gt;git status&lt;/code&gt;.</source>
          <target state="translated">このキャッシュは、 &lt;code&gt;git status&lt;/code&gt; などの追跡されていないファイルの特定を含むコマンドを高速化するためのものです。</target>
        </trans-unit>
        <trans-unit id="5e9291bab46bd7ea7a2a21b7e8d51146482ff7a6" translate="yes" xml:space="preserve">
          <source>This calculates the same as &lt;code&gt;--bisect&lt;/code&gt;, except that refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used, and except that this outputs text ready to be eval&amp;rsquo;ed by the shell. These lines will assign the name of the midpoint revision to the variable &lt;code&gt;bisect_rev&lt;/code&gt;, and the expected number of commits to be tested after &lt;code&gt;bisect_rev&lt;/code&gt; is tested to &lt;code&gt;bisect_nr&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be good to &lt;code&gt;bisect_good&lt;/code&gt;, the expected number of commits to be tested if &lt;code&gt;bisect_rev&lt;/code&gt; turns out to be bad to &lt;code&gt;bisect_bad&lt;/code&gt;, and the number of commits we are bisecting right now to &lt;code&gt;bisect_all&lt;/code&gt;.</source>
          <target state="translated">これは、-- &lt;code&gt;--bisect&lt;/code&gt; と同じように計算されますが、 &lt;code&gt;refs/bisect/&lt;/code&gt; 内のrefが使用されないこと、およびシェルによって評価される準備ができているテキストを出力することを除きます。これらの行は、変数への中間点の改正の名前が割り当てられます &lt;code&gt;bisect_rev&lt;/code&gt; 後に試験すること、およびコミット数の期待値を &lt;code&gt;bisect_rev&lt;/code&gt; をするためにテストされる &lt;code&gt;bisect_nr&lt;/code&gt; 場合コミット数の期待値をテストするために、 &lt;code&gt;bisect_rev&lt;/code&gt; はに良いことが判明 &lt;code&gt;bisect_good&lt;/code&gt; 、 &lt;code&gt;bisect_rev&lt;/code&gt; が &lt;code&gt;bisect_bad&lt;/code&gt; に対して悪いことが判明した場合にテストされると予想されるコミットの数、および現在 &lt;code&gt;bisect_all&lt;/code&gt; に対して二分しているコミットの数。</target>
        </trans-unit>
        <trans-unit id="7d3cf717b036e3b0e81df34e24d7ea082a035f6a" translate="yes" xml:space="preserve">
          <source>This can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost.</source>
          <target state="translated">これにより、fetch を実行しているときに部分的なミラーを作成することができますが、履歴がスキップされて失われるので、一般的にはお勧めできません。</target>
        </trans-unit>
        <trans-unit id="636e119b451b3bd7ccaf26b7d43733789f26ed19" translate="yes" xml:space="preserve">
          <source>This can also be set up as the default behaviour by using the &lt;code&gt;worktree.guessRemote&lt;/code&gt; config option.</source>
          <target state="translated">これは、 &lt;code&gt;worktree.guessRemote&lt;/code&gt; 構成オプションを使用して、デフォルトの動作として設定することもできます。</target>
        </trans-unit>
        <trans-unit id="fa409f68e80081ea9a669e9f13a5d077543254ef" translate="yes" xml:space="preserve">
          <source>This can be &lt;code&gt;end&lt;/code&gt;, which is the default, &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt; or &lt;code&gt;before&lt;/code&gt;.</source>
          <target state="translated">これは、デフォルトである &lt;code&gt;end&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;after&lt;/code&gt; 、 &lt;code&gt;before&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="0de02388f102cf8ff32d10ea0ea1542e4435ae39" translate="yes" xml:space="preserve">
          <source>This can be any options that the archiver backend understands. See next section.</source>
          <target state="translated">これは、アーカイバーバックエンドが理解する任意のオプションを指定することができます。次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ebe928ea2c46867d2d30a22aa44b6d209b60b27" translate="yes" xml:space="preserve">
          <source>This can be combined with the gitweb configuration:</source>
          <target state="translated">gitwebの設定と組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="3e2aafd0fe68d162abd0214f2c4dbcf97a317242" translate="yes" xml:space="preserve">
          <source>This can be enabled by default with the configuration option mailinfo.scissors.</source>
          <target state="translated">これは、設定オプションmailinfo.scissorsでデフォルトで有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="90b17ef61d05f77323fefc823815f1b4d0ca5c24" translate="yes" xml:space="preserve">
          <source>This can be set to a comma-separated list of strings. When a curl trace is enabled (see &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; above), whenever a &quot;Cookies:&quot; header sent by the client is dumped, values of cookies whose key is in that list (case-sensitive) are redacted.</source>
          <target state="translated">これは、文字列のコンマ区切りリストに設定できます。カールトレースが有効になっている場合（上記の &lt;code&gt;GIT_TRACE_CURL&lt;/code&gt; を参照）、クライアントから送信された「Cookies：」ヘッダーがダンプされるたびに、そのリストにキーがある（大文字と小文字が区別される）Cookieの値が編集されます。</target>
        </trans-unit>
        <trans-unit id="3d49143ca76086473ec42d2280fe45285788984b" translate="yes" xml:space="preserve">
          <source>This can be used to color the metadata of a blame line depending on age of the line.</source>
          <target state="translated">これを利用して、年齢に応じて非難ラインのメタデータに色をつけることができます。</target>
        </trans-unit>
        <trans-unit id="0f9fdab39f98d82a2bdc74c13a484288c9af48d4" translate="yes" xml:space="preserve">
          <source>This can be used to convert arguments to a command run in a subdirectory so that they can still be used after moving to the top-level of the repository. For example:</source>
          <target state="translated">これは、サブディレクトリで実行されるコマンドの引数を変換して、リポジトリのトップレベルに移動した後でも使用できるようにするために使用できます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7c4f04c6d6345aed6141f4d5502d056991a7840c" translate="yes" xml:space="preserve">
          <source>This can be used when you want to include further changes to the merge, or want to write your own merge commit message.</source>
          <target state="translated">これは、マージにさらに変更を加えたい場合や、独自のマージコミットメッセージを書きたい場合に使用します。</target>
        </trans-unit>
        <trans-unit id="14d1ead4268c0c0f3315fceadadaf2f291770d82" translate="yes" xml:space="preserve">
          <source>This can be used with the &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;rebase&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt; and &lt;code&gt;tag&lt;/code&gt; commands.</source>
          <target state="translated">これは、 &lt;code&gt;dcommit&lt;/code&gt; 、 &lt;code&gt;rebase&lt;/code&gt; 、 &lt;code&gt;branch&lt;/code&gt; 、および &lt;code&gt;tag&lt;/code&gt; コマンドで使用できます。</target>
        </trans-unit>
        <trans-unit id="9067f207a93cdcf6d90b3183367a4ae6097c31d6" translate="yes" xml:space="preserve">
          <source>This can be useful when you want to publish the tree from a commit without exposing its full history. You might want to do this to publish an open source branch of a project whose current tree is &quot;clean&quot;, but whose full history contains proprietary or otherwise encumbered bits of code.</source>
          <target state="translated">これは、コミットしたツリーの全履歴を公開せずに公開したい場合に便利です。現在のツリーが &quot;クリーン&quot; であるプロジェクトのオープンソースブランチを公開したい場合に便利ですが、その全履歴にはプロプライエタリなコードが含まれていたり、それ以外のコードが含まれていたりします。</target>
        </trans-unit>
        <trans-unit id="4ddcbb1d5b5e22f922e078b6b0d84fe1dcc0409b" translate="yes" xml:space="preserve">
          <source>This can happen, for example, if you:</source>
          <target state="translated">これは、例えば、あなたの場合に起こることがあります。</target>
        </trans-unit>
        <trans-unit id="9140f80526c6eb06ff98ed4abf5c0d2e07067266" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</source>
          <target state="translated">これは、3 者間マージアルゴリズムを使用して、2 つのヘッド (すなわち、現在のブランチとプルした別のブランチ)を解決することができます。これは、クリスクロスマージの曖昧さを注意深く検出しようとするもので、一般的には安全で高速と考えられています。</target>
        </trans-unit>
        <trans-unit id="10679b433b60fbaff0452d6d903b314fee5164d2" translate="yes" xml:space="preserve">
          <source>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames, but currently cannot make use of detected copies. This is the default merge strategy when pulling or merging one branch.</source>
          <target state="translated">これは、3 者間マージアルゴリズムを使用して 2 つのヘッドのみを解決することができます。3 者間マージに使用できる共通の祖先が複数ある場合、共通の祖先のマージされたツリーを作成し、それを 3 者間マージの参照ツリーとして使用します。これは、Linux 2.6 カーネルの開発履歴から取得した実際のマージコミットをテストした結果、誤マージを引き起こすことなく、マージの競合が少なくなることが報告されています。さらに、これはリネームを含むマージを検出して処理することができますが、現在のところ検出されたコピーを利用することはできません。これは、ひとつのブランチを引っ張ったりマージしたりするときのデフォルトのマージ戦略です。</target>
        </trans-unit>
        <trans-unit id="2cac39aeb86961e1363f7613dfed0033661ab943" translate="yes" xml:space="preserve">
          <source>This can speed up operations like &lt;code&gt;git diff&lt;/code&gt; and &lt;code&gt;git status&lt;/code&gt; especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO&amp;rsquo;s. Defaults to true.</source>
          <target state="translated">これにより、特にキャッシングセマンティクスが弱く、IOレイテンシが比較的高いNFSなどのファイルシステムで、 &lt;code&gt;git diff&lt;/code&gt; や &lt;code&gt;git status&lt;/code&gt; などの操作を高速化できます。有効にすると、Gitはファイルシステムデータと並行してインデックス比較を行い、IOの重複を許可します。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="9202266152fd1a0a2194149286bebd74fe30a95c" translate="yes" xml:space="preserve">
          <source>This capability can be advertised multiple times. The first applicable refspec takes precedence. The left-hand of refspecs advertised with this capability must cover all refs reported by the list command. If no &lt;code&gt;refspec&lt;/code&gt; capability is advertised, there is an implied &lt;code&gt;refspec *:*&lt;/code&gt;.</source>
          <target state="translated">この機能は複数回アドバタイズできます。最初の適用可能なrefspecが優先されます。この機能でアドバタイズされるrefspecの左側は、listコマンドによって報告されるすべての参照をカバーする必要があります。 &lt;code&gt;refspec&lt;/code&gt; 機能がアドバタイズされていない場合、暗黙の &lt;code&gt;refspec *:*&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="561397ab0857a5bada65e17ac4aabd661a6939b5" translate="yes" xml:space="preserve">
          <source>This chapter covers internal details of the Git implementation which probably only Git developers need to understand.</source>
          <target state="translated">この章では、おそらくGit開発者だけが理解する必要があるであろうGitの実装の内部的な詳細を扱います。</target>
        </trans-unit>
        <trans-unit id="9301665301f3e50c4417122a8411be226ea5b235" translate="yes" xml:space="preserve">
          <source>This command always gets all objects. Historically, there were three options &lt;code&gt;-a&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-t&lt;/code&gt; for choosing which objects to download. They are now silently ignored.</source>
          <target state="translated">このコマンドは常にすべてのオブジェクトを取得します。歴史的に、ダウンロードするオブジェクトを選択するための3つのオプション &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-c&lt;/code&gt; 、および &lt;code&gt;-t&lt;/code&gt; がありました。彼らは今黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="5b8a59dc9ca3a3d6f247d36df5fb54708fa69494" translate="yes" xml:space="preserve">
          <source>This command applies the patch but does not create a commit. Use &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; to create commits from patches generated by &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; and/or received by email.</source>
          <target state="translated">このコマンドはパッチを適用しますが、コミットは作成しません。使用&lt;a href=&quot;git-am&quot;&gt;のgit-AM [1]&lt;/a&gt;によって生成されたパッチからのコミットを作成するには、&lt;a href=&quot;git-format-patch&quot;&gt;gitのフォーマット-パッチ[1]&lt;/a&gt;および/または電子メールで受け取りました。</target>
        </trans-unit>
        <trans-unit id="1f849e1e7df08a5bb28860e4715d22e12f5d5d20" translate="yes" xml:space="preserve">
          <source>This command assists the developer in this process by recording conflicted automerge results and corresponding hand resolve results on the initial manual merge, and applying previously recorded hand resolutions to their corresponding automerge results.</source>
          <target state="translated">このコマンドは、最初の手動マージで競合するオートマージ結果と対応するハンド解決結果を記録し、以前に記録したハンド解決を対応するオートマージ結果に適用することで、このプロセスの開発者を支援します。</target>
        </trans-unit>
        <trans-unit id="b823d02fd766a4ae4b81090ce369454e7da568d6" translate="yes" xml:space="preserve">
          <source>This command caches credentials in memory for use by future Git programs. The stored credentials never touch the disk, and are forgotten after a configurable timeout. The cache is accessible over a Unix domain socket, restricted to the current user by filesystem permissions.</source>
          <target state="translated">このコマンドは、将来の Git プログラムで使用するための認証情報をメモリにキャッシュします。保存された認証情報はディスクに触れることはなく、設定したタイムアウト後に忘れ去られます。キャッシュへのアクセスは、Unix ドメインソケットを介して行います。</target>
        </trans-unit>
        <trans-unit id="4784337d21599fe7fcfddcd79392d8470207170e" translate="yes" xml:space="preserve">
          <source>This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run &lt;code&gt;git add&lt;/code&gt; again to add the new content to the index.</source>
          <target state="translated">このコマンドは、コミット前に複数回実行できます。addコマンドの実行時に、指定されたファイルのコンテンツのみが追加されます。後続の変更を次のコミットに含める場合は、 &lt;code&gt;git add&lt;/code&gt; を再度実行して、新しいコンテンツをインデックスに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="c286ab165ab2a31532b621372beb627366820ec4" translate="yes" xml:space="preserve">
          <source>This command can be used where a &lt;code&gt;filemodify&lt;/code&gt; directive can appear, allowing it to be used in the middle of a commit. For a &lt;code&gt;filemodify&lt;/code&gt; using an inline directive, it can also appear right before the &lt;code&gt;data&lt;/code&gt; directive.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;filemodify&lt;/code&gt; ディレクティブを表示できる場所で使用できるため、コミットの途中で使用できます。インラインディレクティブを使用した &lt;code&gt;filemodify&lt;/code&gt; の場合は、 &lt;code&gt;data&lt;/code&gt; ディレクティブの直前に置くこともできます。</target>
        </trans-unit>
        <trans-unit id="74e4352fd2289d447be4133ac0e6d68d162428a6" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;applypatch-msg&lt;/code&gt;, &lt;code&gt;pre-applypatch&lt;/code&gt;, and &lt;code&gt;post-applypatch&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;applypatch-msg&lt;/code&gt; 、 &lt;code&gt;pre-applypatch&lt;/code&gt; 、および &lt;code&gt;post-applypatch&lt;/code&gt; フックを実行できます。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2e5610ce87e5d01d8f8246892b4f05f886b6ad5a" translate="yes" xml:space="preserve">
          <source>This command can run &lt;code&gt;commit-msg&lt;/code&gt;, &lt;code&gt;prepare-commit-msg&lt;/code&gt;, &lt;code&gt;pre-commit&lt;/code&gt;, &lt;code&gt;post-commit&lt;/code&gt; and &lt;code&gt;post-rewrite&lt;/code&gt; hooks. See &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more information.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;commit-msg&lt;/code&gt; 、 &lt;code&gt;prepare-commit-msg&lt;/code&gt; 、 &lt;code&gt;pre-commit&lt;/code&gt; 、 &lt;code&gt;post-commit&lt;/code&gt; および &lt;code&gt;post-rewrite&lt;/code&gt; フックを実行できます。詳細については、&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ba8d48bf258fdf0b61e4a3a7667022fd45b3e45" translate="yes" xml:space="preserve">
          <source>This command creates an empty Git repository - basically a &lt;code&gt;.git&lt;/code&gt; directory with subdirectories for &lt;code&gt;objects&lt;/code&gt;, &lt;code&gt;refs/heads&lt;/code&gt;, &lt;code&gt;refs/tags&lt;/code&gt;, and template files. An initial &lt;code&gt;HEAD&lt;/code&gt; file that references the HEAD of the master branch is also created.</source>
          <target state="translated">このコマンドは、空のGitリポジトリを作成します-基本的に、 &lt;code&gt;objects&lt;/code&gt; 、 &lt;code&gt;refs/heads&lt;/code&gt; 、 &lt;code&gt;refs/tags&lt;/code&gt; 、およびテンプレートファイルのサブディレクトリを持つ &lt;code&gt;.git&lt;/code&gt; ディレクトリ。masterブランチのHEADを参照する最初の &lt;code&gt;HEAD&lt;/code&gt; ファイルも作成されます。</target>
        </trans-unit>
        <trans-unit id="f52be87adec196973421cd7319ee0f98c1860983" translate="yes" xml:space="preserve">
          <source>This command degenerates to download everything to complete the asked refs from the remote side when the local side does not have a common ancestor commit.</source>
          <target state="translated">このコマンドは、ローカル側に共通の祖先コミットがない場合に、リモート側から要求された refs を完了するためにすべてのものをダウンロードするように退化します。</target>
        </trans-unit>
        <trans-unit id="194b70091800ec19021441e8c1778ca9e02b53d5" translate="yes" xml:space="preserve">
          <source>This command ensures that the changes in the experimental branch are already in the current branch.</source>
          <target state="translated">このコマンドは、実験ブランチの変更がすでに現在のブランチにあることを保証します。</target>
        </trans-unit>
        <trans-unit id="1b788d383418fe8b134f7630991a2d6359c7dd7c" translate="yes" xml:space="preserve">
          <source>This command finds new changes in p4 and imports them as Git commits.</source>
          <target state="translated">このコマンドは、p4 の新しい変更点を見つけ、それを Git コミットとしてインポートします。</target>
        </trans-unit>
        <trans-unit id="4b11fc8efec3bd343a83e9f1aa4620a514b9ab8e" translate="yes" xml:space="preserve">
          <source>This command formats the lines of its standard input into a table with multiple columns. Each input line occupies one cell of the table. It is used internally by other git commands to format output into columns.</source>
          <target state="translated">このコマンドは、標準入力の行を複数の列を持つテーブルにフォーマットします。各入力行はテーブルのひとつのセルを占有します。これは、他の git コマンドで内部的に使用され、出力をカラムに整形するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ade7fdc971ed1f0936fb8fbff7bb1574367ca37b" translate="yes" xml:space="preserve">
          <source>This command is extremely useful if the frontend does not know (or does not care to know) what files are currently on the branch, and therefore cannot generate the proper &lt;code&gt;filedelete&lt;/code&gt; commands to update the content.</source>
          <target state="translated">このコマンドは、フロントエンドが現在ブランチ上にあるファイルを知らない（または知らない）場合に非常に役立ちます。そのため、コンテンツを更新するための適切な &lt;code&gt;filedelete&lt;/code&gt; コマンドを生成できません。</target>
        </trans-unit>
        <trans-unit id="5f45dc9e63088b4d8e620891decbfdd6655de376" translate="yes" xml:space="preserve">
          <source>This command is intended mostly for internal use by scripts automatically invoking &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">このコマンドは、主に &lt;code&gt;git merge&lt;/code&gt; を自動的に呼び出すスクリプトによる内部使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="3710225b15829bc8cbeb92895b81ff709286e645" translate="yes" xml:space="preserve">
          <source>This command is recursive by default.</source>
          <target state="translated">このコマンドは、デフォルトでは再帰的です。</target>
        </trans-unit>
        <trans-unit id="6e8668d616c8790cb8d71e8720597de54ced7850" translate="yes" xml:space="preserve">
          <source>This command is used to combine all objects that do not currently reside in a &quot;pack&quot;, into a pack. It can also be used to re-organize existing packs into a single, more efficient pack.</source>
          <target state="translated">このコマンドは、現在 &quot;pack &quot;に存在しないすべてのオブジェクトを1つのpackにまとめるために使用します。また、既存のパックを一つの効率的なパックに再編成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="e7cbc44be580e3c1734536d3564c4b9dc7e501fa" translate="yes" xml:space="preserve">
          <source>This command is used to solve the storage and performance problem by storing the refs in a single file, &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt;. When a ref is missing from the traditional &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory hierarchy, it is looked up in this file and used if found.</source>
          <target state="translated">このコマンドは、単一のファイル &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; 格納することにより、ストレージとパフォーマンスの問題を解決するために使用されます。refが従来の &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; ディレクトリ階層から欠落している場合、このファイルで参照が検索され、見つかった場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="43f707239bbecf8d6bf96bbdb4b367abb8fd5357" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git archive&lt;/code&gt; side, and the program pair is meant to be used to get an archive from a remote repository.</source>
          <target state="translated">このコマンドは通常、エンドユーザーが直接呼び出すことはありません。プロトコルのUIは &lt;code&gt;git archive&lt;/code&gt; 側にあり、プログラムのペアはリモートリポジトリからアーカイブを取得するために使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="17d67b43408b7b4804e33e1e3b79dc1fbf03af1b" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git fetch-pack&lt;/code&gt; side, and the program pair is meant to be used to pull updates from a remote repository. For push operations, see &lt;code&gt;git send-pack&lt;/code&gt;.</source>
          <target state="translated">このコマンドは通常、エンドユーザーが直接呼び出すことはありません。プロトコルのUIは &lt;code&gt;git fetch-pack&lt;/code&gt; 側にあり、プログラムペアはリモートリポジトリから更新をプルするために使用されることを意図しています。プッシュ操作については、 &lt;code&gt;git send-pack&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="36ac8b84f92c3cf141e5ae101adcc45178aae4c7" translate="yes" xml:space="preserve">
          <source>This command is usually not invoked directly by the end user. The UI for the protocol is on the &lt;code&gt;git send-pack&lt;/code&gt; side, and the program pair is meant to be used to push updates to remote repository. For pull operations, see &lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは通常、エンドユーザーが直接呼び出すことはありません。プロトコルのUIは &lt;code&gt;git send-pack&lt;/code&gt; 側にあり、プログラムペアはリモートリポジトリに更新をプッシュするために使用されることを意図しています。プル操作については、&lt;a href=&quot;git-fetch-pack&quot;&gt;git-fetch-pack [1]を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f8cac5b996748b602d2e8f0cf9273cee3d1c4d80" translate="yes" xml:space="preserve">
          <source>This command lets you check that intermediate commits are compilable. The todo list becomes like that:</source>
          <target state="translated">このコマンドを使うと、中間コミットがコンパイル可能かどうかを確認できます。Todoリストはこのようになります。</target>
        </trans-unit>
        <trans-unit id="56bca57be11add071b8aeae38f6a28f443105856" translate="yes" xml:space="preserve">
          <source>This command manages the information recorded in the reflogs.</source>
          <target state="translated">このコマンドは、リブログに記録された情報を管理します。</target>
        </trans-unit>
        <trans-unit id="7c7ebb85111dd101dc1c2782f6e5cbc235a39c44" translate="yes" xml:space="preserve">
          <source>This command provides a way to interact with p4 repositories using Git.</source>
          <target state="translated">このコマンドは、Git を使って p4 リポジトリを操作する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="637c92f99feb8b30861eeaee2e3273c64a9b5351" translate="yes" xml:space="preserve">
          <source>This command reads some patches or commit messages from either the &amp;lt;file&amp;gt; arguments or the standard input if no &amp;lt;file&amp;gt; is specified. If &lt;code&gt;--parse&lt;/code&gt; is specified, the output consists of the parsed trailers.</source>
          <target state="translated">このコマンドは、&amp;lt;file&amp;gt;が指定されていない場合、&amp;lt;file&amp;gt;引数または標準入力からパッチまたはコミットメッセージを読み取ります。場合 &lt;code&gt;--parse&lt;/code&gt; が指定され、出力が解析されたトレーラーで構成されています。</target>
        </trans-unit>
        <trans-unit id="a38646d64359b52991af1358c674765acf2c0c11" translate="yes" xml:space="preserve">
          <source>This command should not list any commits. Otherwise, check out &lt;code&gt;master&lt;/code&gt; and merge &lt;code&gt;maint&lt;/code&gt; into it.</source>
          <target state="translated">このコマンドはコミットをリストするべきではありません。それ以外の場合は、 &lt;code&gt;master&lt;/code&gt; をチェックアウトし、 &lt;code&gt;maint&lt;/code&gt; をそれにマージします。</target>
        </trans-unit>
        <trans-unit id="6a853b09f1818b9d32f936bd42aa8a84af13b068" translate="yes" xml:space="preserve">
          <source>This command shows the differences between two versions of a patch series, or more generally, two commit ranges (ignoring merge commits).</source>
          <target state="translated">このコマンドは、パッチシリーズの2つのバージョン、より一般的には2つのコミット範囲(マージコミットを無視して)の違いを表示します。</target>
        </trans-unit>
        <trans-unit id="852903a68075d19a47d4520af94edde77996207f" translate="yes" xml:space="preserve">
          <source>This command stores credentials indefinitely on disk for use by future Git programs.</source>
          <target state="translated">このコマンドは、将来の Git プログラムで使用するための認証情報をディスク上に無期限に保存します。</target>
        </trans-unit>
        <trans-unit id="d143bf10d727fe2f5d0639ed85e199dd448d8bd2" translate="yes" xml:space="preserve">
          <source>This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.</source>
          <target state="translated">このコマンドは、作業ツリーで見つかった現在の内容を用いてインデックスを更新し、 次のコミットに向けてステージングされた内容を準備します。通常は、既存のパスの現在の内容を全体として追加しますが、オプションによっては、作業ツリーファイルに加えられた変更の一部だけを追加したり、作業ツリーに存在しないパスを削除したりすることもできます。</target>
        </trans-unit>
        <trans-unit id="61eacd31ecbd262bdcbed11d9c6103318919d1be" translate="yes" xml:space="preserve">
          <source>This command uploads a mailbox generated with &lt;code&gt;git format-patch&lt;/code&gt; into an IMAP drafts folder. This allows patches to be sent as other email is when using mail clients that cannot read mailbox files directly. The command also works with any general mailbox in which emails have the fields &quot;From&quot;, &quot;Date&quot;, and &quot;Subject&quot; in that order.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;git format-patch&lt;/code&gt; で生成されたメールボックスをIMAP下書きフォルダーにアップロードします。これにより、メールボックスファイルを直接読み取ることができないメールクライアントを使用している場合に、他のメールと同様にパッチを送信できます。このコマンドは、メールのフィールドが「From」、「Date」、「Subject」の順になっている一般的なメールボックスでも機能します。</target>
        </trans-unit>
        <trans-unit id="a3bcbdfcf8f3a072ac23f24cf310648f9691fb70" translate="yes" xml:space="preserve">
          <source>This command uses a binary search algorithm to find which commit in your project&amp;rsquo;s history introduced a bug. You use it by first telling it a &quot;bad&quot; commit that is known to contain the bug, and a &quot;good&quot; commit that is known to be before the bug was introduced. Then &lt;code&gt;git
bisect&lt;/code&gt; picks a commit between those two endpoints and asks you whether the selected commit is &quot;good&quot; or &quot;bad&quot;. It continues narrowing down the range until it finds the exact commit that introduced the change.</source>
          <target state="translated">このコマンドは、バイナリ検索アルゴリズムを使用して、プロジェクトの履歴でバグが発生したコミットを見つけます。まず、バグが含まれていることがわかっている「悪い」コミットと、バグが導入される前にわかっている「良い」コミットを伝えることによって、それを使用します。次に、 &lt;code&gt;git bisect&lt;/code&gt; が2つのエンドポイント間のコミットを選択し、選択したコミットが「良い」か「悪い」かを尋ねます。変更をもたらした正確なコミットが見つかるまで、範囲を絞り込み続けます。</target>
        </trans-unit>
        <trans-unit id="097f8af4b6f26b418927a5ca4b24d71746b1f843" translate="yes" xml:space="preserve">
          <source>This command uses the &lt;code&gt;diff.color.*&lt;/code&gt; and &lt;code&gt;pager.range-diff&lt;/code&gt; settings (the latter is on by default). See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">このコマンドは、 &lt;code&gt;diff.color.*&lt;/code&gt; および &lt;code&gt;pager.range-diff&lt;/code&gt; 設定を使用します（後者はデフォルトでオンです）。&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="03bab6a03561ee7ff2e9bf92505bcdd5322bfb51" translate="yes" xml:space="preserve">
          <source>This command will fail with non-zero status upon error. Some exit codes are:</source>
          <target state="translated">このコマンドはエラー時にゼロ以外のステータスで失敗します。いくつかの終了コードがあります。</target>
        </trans-unit>
        <trans-unit id="7ed6af6e5518c122d94f4b8fea824fc7938bd5aa" translate="yes" xml:space="preserve">
          <source>This command will fetch changes from the remote branches to your remote-tracking branches &lt;code&gt;origin/*&lt;/code&gt;, and merge the default branch into the current branch.</source>
          <target state="translated">このコマンドは、リモートブランチからリモートトラッキングブランチ &lt;code&gt;origin/*&lt;/code&gt; への変更をフェッチし、デフォルトのブランチを現在のブランチにマージします。</target>
        </trans-unit>
        <trans-unit id="99c24081605f25434a1fa0a51df82045bf4b7763" translate="yes" xml:space="preserve">
          <source>This command will save your changes away to the &lt;code&gt;stash&lt;/code&gt;, and reset your working tree and the index to match the tip of your current branch. Then you can make your fix as usual.</source>
          <target state="translated">このコマンドは、変更を &lt;code&gt;stash&lt;/code&gt; に保存し、現在のブランチの先端に一致するように作業ツリーとインデックスをリセットします。その後、通常どおり修正を行うことができます。</target>
        </trans-unit>
        <trans-unit id="cb41b9bb98cbe715b8d6c0b50eb0b52309cdc91a" translate="yes" xml:space="preserve">
          <source>This commit will get blown away so a throw-away log message is OK.</source>
          <target state="translated">このコミットは吹き飛ばされてしまうので、投げやりなログメッセージでOKです。</target>
        </trans-unit>
        <trans-unit id="068d7057b3017084327709c3e61c2e224fb2a5f6" translate="yes" xml:space="preserve">
          <source>This commits all other changes in the index.</source>
          <target state="translated">これはインデックス内の他のすべての変更をコミットします。</target>
        </trans-unit>
        <trans-unit id="1d649ab8ff53024e7549864469811ccee0abf2e7" translate="yes" xml:space="preserve">
          <source>This commits your first edits in &lt;code&gt;branch1&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;branch1&lt;/code&gt; での最初の編集がコミットされます。</target>
        </trans-unit>
        <trans-unit id="8bc13c84a009ea0d6abb173ac6100dc00ae7606a" translate="yes" xml:space="preserve">
          <source>This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way &lt;code&gt;diff-tree&lt;/code&gt; shows a merge commit with these flags.</source>
          <target state="translated">これは、ステージ2（私たちのブランチ）、ステージ3（それらのブランチ）、および作業ツリーファイルを比較し、 &lt;code&gt;diff-tree&lt;/code&gt; がこれらのフラグを使用したマージコミットを示すのと同様に、結合されたdiffを出力します。</target>
        </trans-unit>
        <trans-unit id="d3fe164a17e549b712f12743eb90dc676fb8455c" translate="yes" xml:space="preserve">
          <source>This computation involves traversing all the reachable objects, i.e. it has the same cost as &lt;code&gt;git prune&lt;/code&gt;. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn&amp;rsquo;t protect objects referred to by reflogs.</source>
          <target state="translated">この計算には、到達可能なすべてのオブジェクトのトラバースが含まれます。つまり、 &lt;code&gt;git prune&lt;/code&gt; と同じコストです。これは主に、reflogによって参照されるオブジェクトを保護していなかった古いバージョンのGitを使用したガベージコレクションによって引き起こされる破損を修正することを目的としています。</target>
        </trans-unit>
        <trans-unit id="9e7c3905269f2318ce8a27a07b91b053d9dd7129" translate="yes" xml:space="preserve">
          <source>This configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple &lt;code&gt;--[no-]notes[=]&lt;/code&gt; options passed in. That is, a value of &lt;code&gt;true&lt;/code&gt; will show the default notes, a value of &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; will also show notes from that notes ref and a value of &lt;code&gt;false&lt;/code&gt; will negate previous configurations and not show notes.</source>
          <target state="translated">この構成を複数回指定して、複数のノート参照を含めることができます。その場合、渡された複数の &lt;code&gt;--[no-]notes[=]&lt;/code&gt; オプションと同様に動作します。つまり、 &lt;code&gt;true&lt;/code&gt; の値はデフォルトのノートを表示し、 &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt; の値はそのノートのノートも表示しますrefと値 &lt;code&gt;false&lt;/code&gt; は、以前の構成を無効にし、メモを表示しません。</target>
        </trans-unit>
        <trans-unit id="e6aa4372bde5e931f9e4e006e5a3cd0aea5ccf17" translate="yes" xml:space="preserve">
          <source>This configuration is used in two ways:</source>
          <target state="translated">この設定は2つの方法で使用されます。</target>
        </trans-unit>
        <trans-unit id="06f31556dacb48424e7a1be662dd26364f785ce9" translate="yes" xml:space="preserve">
          <source>This configuration variable is useful in cases where you&amp;rsquo;d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an &lt;code&gt;init.templateDir&lt;/code&gt; where you&amp;rsquo;ve changed default hooks.</source>
          <target state="translated">この構成変数は、Gitフックをリポジトリごとに構成する代わりに一元的に構成する場合、またはデフォルトのフックを変更した &lt;code&gt;init.templateDir&lt;/code&gt; を使用するより柔軟で一元化された代替手段として役立ちます。 。</target>
        </trans-unit>
        <trans-unit id="eed4a11499740f4bb5f61d3ce7354c5409f33bf3" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. It can be set by the &lt;code&gt;diff.colorMovedWS&lt;/code&gt; configuration setting. These modes can be given as a comma separated list:</source>
          <target state="translated">&lt;code&gt;--color-moved&lt;/code&gt; の移動検出を実行するときに空白が無視される方法を構成します。それはで設定することができ &lt;code&gt;diff.colorMovedWS&lt;/code&gt; 構成設定。これらのモードは、コンマ区切りのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="9b4ea1fd788cef298d939e77017eddec04b80461" translate="yes" xml:space="preserve">
          <source>This configures how whitespace is ignored when performing the move detection for &lt;code&gt;--color-moved&lt;/code&gt;. These modes can be given as a comma separated list:</source>
          <target state="translated">&lt;code&gt;--color-moved&lt;/code&gt; の移動検出を実行するときに空白が無視される方法を構成します。これらのモードは、コンマ区切りのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="77030a3f3e0bddf7aada34bc0939552bc0993e3c" translate="yes" xml:space="preserve">
          <source>This counts the number of unpacked object files and disk space consumed by them, to help you decide when it is a good time to repack.</source>
          <target state="translated">これは、アンパックされたオブジェクトファイルの数と、それらによって消費されたディスク容量をカウントし、再パックするのに適した時期を決定するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3e67b0f2a3d6f811dcdec6a80edd2cc8d01b0b6b" translate="yes" xml:space="preserve">
          <source>This creates a &quot;lightweight&quot; tag. If you would also like to include a comment with the tag, and possibly sign it cryptographically, then you should create a tag object instead; see the &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; man page for details.</source>
          <target state="translated">これにより、「軽量」タグが作成されます。タグ付きのコメントも含め、暗号化して署名したい場合は、代わりにタグオブジェクトを作成する必要があります。詳細は&lt;a href=&quot;git-tag&quot;&gt;git-tag [1]の&lt;/a&gt; manページをご覧ください。</target>
        </trans-unit>
        <trans-unit id="687e61032de29ec5a828bf99d3854a432acd2a82" translate="yes" xml:space="preserve">
          <source>This creates a new directory &quot;myrepo&quot; containing a clone of Alice&amp;rsquo;s repository. The clone is on an equal footing with the original project, possessing its own copy of the original project&amp;rsquo;s history.</source>
          <target state="translated">これにより、Aliceのリポジトリのクローンを含む新しいディレクトリ「myrepo」が作成されます。クローンは元のプロジェクトと同じ立場にあり、元のプロジェクトの履歴の独自のコピーを持っています。</target>
        </trans-unit>
        <trans-unit id="c2fd84fc2fa04021fed2cadb8707ca64b05a22fb" translate="yes" xml:space="preserve">
          <source>This creates a single &quot;pack file&quot; in .git/objects/pack/ containing all currently unpacked objects. You can then run</source>
          <target state="translated">これにより、.git/objects/pack/にひとつの &quot;pack ファイル&quot; が作成され、現在アンパックされているすべてのオブジェクトが含まれます。これを実行するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="bf43931e74b20a3da5197ed923f890fe71d72016" translate="yes" xml:space="preserve">
          <source>This default configuration is achieved by creating references to the remote branch heads under &lt;code&gt;refs/remotes/origin&lt;/code&gt; and by initializing &lt;code&gt;remote.origin.url&lt;/code&gt; and &lt;code&gt;remote.origin.fetch&lt;/code&gt; configuration variables.</source>
          <target state="translated">このデフォルト構成は、 &lt;code&gt;refs/remotes/origin&lt;/code&gt; の下にリモートブランチヘッドへの参照を作成し、 &lt;code&gt;remote.origin.url&lt;/code&gt; および &lt;code&gt;remote.origin.fetch&lt;/code&gt; 構成変数を初期化することによって実現されます。</target>
        </trans-unit>
        <trans-unit id="984768ad68337dfe2b0015e657c9f4f069afabc8" translate="yes" xml:space="preserve">
          <source>This defines two submodules, &lt;code&gt;libfoo&lt;/code&gt; and &lt;code&gt;libbar&lt;/code&gt;. These are expected to be checked out in the paths &lt;code&gt;include/foo&lt;/code&gt; and &lt;code&gt;include/bar&lt;/code&gt;, and for both submodules a URL is specified which can be used for cloning the submodules.</source>
          <target state="translated">これは、二つのサブモジュール、定義 &lt;code&gt;libfoo&lt;/code&gt; と &lt;code&gt;libbar&lt;/code&gt; を。これらはパス &lt;code&gt;include/foo&lt;/code&gt; および &lt;code&gt;include/bar&lt;/code&gt; でチェックアウトされることが期待されており、両方のサブモジュールに対して、サブモジュールのクローン作成に使用できるURLが指定されています。</target>
        </trans-unit>
        <trans-unit id="57db5304522b1070a0df1071ce5df5d38ea7d002" translate="yes" xml:space="preserve">
          <source>This describes how Tony Luck uses Git in his role as maintainer of the IA64 architecture for the Linux kernel.</source>
          <target state="translated">LinuxカーネルのIA64アーキテクチャのメンテナとしてTony LuckがどのようにGitを使っているかを説明しています。</target>
        </trans-unit>
        <trans-unit id="c9e275f2996b22cd4415c594fae8f08a0dfe70e8" translate="yes" xml:space="preserve">
          <source>This determines the coloring scheme to be applied to blame output. It can be &lt;code&gt;repeatedLines&lt;/code&gt;, &lt;code&gt;highlightRecent&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt; which is the default.</source>
          <target state="translated">これにより、非難出力に適用される配色が決まります。それはすることができ &lt;code&gt;repeatedLines&lt;/code&gt; 、 &lt;code&gt;highlightRecent&lt;/code&gt; 、または &lt;code&gt;none&lt;/code&gt; デフォルトです。</target>
        </trans-unit>
        <trans-unit id="56ee29b22f07db9306c3380b74b5b0180828e415" translate="yes" xml:space="preserve">
          <source>This directory is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/objects&quot; will be used instead.</source>
          <target state="translated">GIT_COMMON_DIRが設定されている場合、このディレクトリは無視され、代わりに&quot;$GIT_COMMON_DIR/objects &quot;が使用されます。</target>
        </trans-unit>
        <trans-unit id="2072b137cd96280de0e098678b51f23a76dcd0dc" translate="yes" xml:space="preserve">
          <source>This disables potentially expensive checks to workaround broken symlinks checked into SVN by broken clients. Set this option to &quot;false&quot; if you track a SVN repository with many empty blobs that are not symlinks. This option may be changed while &lt;code&gt;git svn&lt;/code&gt; is running and take effect on the next revision fetched. If unset, &lt;code&gt;git svn&lt;/code&gt; assumes this option to be &quot;true&quot;.</source>
          <target state="translated">これにより、壊れたクライアントによってSVNにチェックインされた壊れたシンボリックリンクを回避するために、コストがかかる可能性のあるチェックが無効になります。シンボリックリンクではない空のblobが多数あるSVNリポジトリを追跡する場合は、このオプションを「false」に設定します。このオプションは &lt;code&gt;git svn&lt;/code&gt; の実行中に変更され、フェッチされた次のリビジョンで有効になります。設定されていない場合、 &lt;code&gt;git svn&lt;/code&gt; はこのオプションを「true」と見なします。</target>
        </trans-unit>
        <trans-unit id="006e62625e60aabc7f31fa591f6f9b4a3bd2a878" translate="yes" xml:space="preserve">
          <source>This document attempts to write down and motivate some of the workflow elements used for &lt;code&gt;git.git&lt;/code&gt; itself. Many ideas apply in general, though the full workflow is rarely required for smaller projects with fewer people involved.</source>
          <target state="translated">このドキュメントは、 &lt;code&gt;git.git&lt;/code&gt; 自体に使用されるワークフロー要素のいくつかを書き留めて動機づけることを試みます。一般に多くのアイデアが当てはまりますが、関係する人が少ない小規模なプロジェクトでは、完全なワークフローが必要になることはほとんどありません。</target>
        </trans-unit>
        <trans-unit id="8cd9193645885514540ac19f3167f508bebca422" translate="yes" xml:space="preserve">
          <source>This document presents a specification for a version 2 of Git&amp;rsquo;s wire protocol. Protocol v2 will improve upon v1 in the following ways:</source>
          <target state="translated">このドキュメントは、Gitのワイヤプロトコルのバージョン2の仕様を示しています。プロトコルv2は、v1を次のように改善します。</target>
        </trans-unit>
        <trans-unit id="46bd1a26c48d1772be26d3d869cc4b6544004ea1" translate="yes" xml:space="preserve">
          <source>This document shows the &quot;raw&quot; syntax as seen by git. The shell and other UIs might require additional quoting to protect special characters and to avoid word splitting.</source>
          <target state="translated">このドキュメントでは、git から見た &quot;生の&quot; 構文を示しています。シェルやその他の UI では、特殊文字を保護したり単語の分割を避けるために追加のクォートが必要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a76f8971dde9f8810b677765aca0d70490d9f8fa" translate="yes" xml:space="preserve">
          <source>This document will serve as the master list for extensions. Any implementation wishing to define a new extension should make a note of it here, in order to claim the name.</source>
          <target state="translated">このドキュメントは拡張機能のマスターリストとして機能します。新しい拡張機能を定義したい実装は、その名前を主張するためにここにメモしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="d24a591988945bec7d040b25bd5a37c73014bcf3" translate="yes" xml:space="preserve">
          <source>This does not affect &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; or the &lt;code&gt;git-diff-*&lt;/code&gt; plumbing commands. Can be overridden on the command line with the &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; option.</source>
          <target state="translated">これは&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]&lt;/a&gt;または &lt;code&gt;git-diff-*&lt;/code&gt; plumbingコマンドには影響しません。コマンドラインで &lt;code&gt;--color[=&amp;lt;when&amp;gt;]&lt;/code&gt; オプションを使用してオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="99af460532d2c9f72e65ed17f7464c8aa563e1f4" translate="yes" xml:space="preserve">
          <source>This does not force normalization of text files, but does ensure that text files that you introduce to the repository have their line endings normalized to LF when they are added, and that files that are already normalized in the repository stay normalized.</source>
          <target state="translated">これはテキストファイルの正規化を強制するものではありませんが、リポジトリに導入するテキストファイルが追加されたときに行末がLFに正規化され、リポジトリで既に正規化されているファイルは正規化されたままであることを保証します。</target>
        </trans-unit>
        <trans-unit id="257328db317fb853114a41f8430f87cd826d08a0" translate="yes" xml:space="preserve">
          <source>This doesn&amp;rsquo;t interfere with interoperating with the Subversion repository you cloned from, but if you wish for your local Git repository to be able to interoperate with someone else&amp;rsquo;s local Git repository, either don&amp;rsquo;t use this option or you should both use it in the same local time zone.</source>
          <target state="translated">これは、クローン元のSubversionリポジトリとの相互運用には影響しませんが、ローカルGitリポジトリを他の誰かのローカルGitリポジトリと相互運用できるようにする場合は、このオプションを使用しないか、両方で使用する必要があります。同じローカルタイムゾーン。</target>
        </trans-unit>
        <trans-unit id="45497ef8f3614492732f059c04bc30af3c6593e9" translate="yes" xml:space="preserve">
          <source>This effectively runs &lt;code&gt;add --interactive&lt;/code&gt;, but bypasses the initial command menu and directly jumps to the &lt;code&gt;patch&lt;/code&gt; subcommand. See &amp;ldquo;Interactive mode&amp;rdquo; for details.</source>
          <target state="translated">これは効果的に &lt;code&gt;add --interactive&lt;/code&gt; を実行しますが、初期コマンドメニューをバイパスし、直接 &lt;code&gt;patch&lt;/code&gt; サブコマンドにジャンプします。詳細については、「インタラクティブモード」を参照してください。</target>
        </trans-unit>
        <trans-unit id="53c54ba0465bbf9916ac436659dbf61aedb86156" translate="yes" xml:space="preserve">
          <source>This enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">これにより、親の書き換えが可能になります。上記の &lt;code&gt;History Simplification&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="ccdf590466d01d04dcf6da8ad6a6bec9f02c4d8e" translate="yes" xml:space="preserve">
          <source>This environment allows the specification of an alternate index file. If not specified, the default of &lt;code&gt;$GIT_DIR/index&lt;/code&gt; is used.</source>
          <target state="translated">この環境では、代替インデックスファイルを指定できます。指定しない場合、デフォルトの &lt;code&gt;$GIT_DIR/index&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="2abd55a6650395bf249165e2f6568e98ab14958c" translate="yes" xml:space="preserve">
          <source>This environment variable allows the specification of an index version for new repositories. It won&amp;rsquo;t affect existing index files. By default index file version 2 or 3 is used. See &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt; for more information.</source>
          <target state="translated">この環境変数を使用すると、新しいリポジトリのインデックスバージョンを指定できます。既存のインデックスファイルには影響しません。デフォルトでは、インデックスファイルバージョン2または3が使用されます。詳細については、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2763e4fc7ba1973ac90184c067d20f9d0fda70a8" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$EDITOR&lt;/code&gt; and &lt;code&gt;$VISUAL&lt;/code&gt;. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also &lt;a href=&quot;git-var&quot;&gt;git-var[1]&lt;/a&gt; and the &lt;code&gt;core.editor&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は、 &lt;code&gt;$EDITOR&lt;/code&gt; および &lt;code&gt;$VISUAL&lt;/code&gt; オーバーライドします。これは、対話モードでエディターを起動するときに、いくつかのGitコマンドで使用されます。&lt;a href=&quot;git-var&quot;&gt;git-var [1]&lt;/a&gt;および&lt;a href=&quot;git-config&quot;&gt;git-config [1]の&lt;/a&gt; &lt;code&gt;core.editor&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="ddbc158f0dcc3c8ea52494b42fbb66d15e06e460" translate="yes" xml:space="preserve">
          <source>This environment variable overrides &lt;code&gt;$PAGER&lt;/code&gt;. If it is set to an empty string or to the value &quot;cat&quot;, Git will not launch a pager. See also the &lt;code&gt;core.pager&lt;/code&gt; option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">この環境変数は &lt;code&gt;$PAGER&lt;/code&gt; オーバーライドします。空の文字列または値「cat」に設定されている場合、Gitはポケットベルを起動しません。&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の &lt;code&gt;core.pager&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="85b43d9b9e3f28d79e0c1169949e722bd8f10c35" translate="yes" xml:space="preserve">
          <source>This environment variable overrides the configured Git editor when editing the todo list of an interactive rebase. See also linkit::git-rebase[1] and the &lt;code&gt;sequence.editor&lt;/code&gt; option in linkit::git-config[1].</source>
          <target state="translated">この環境変数は、インタラクティブリベースのToDoリストを編集するときに、構成されたGitエディターをオーバーライドします。linkit :: git-rebase [1]およびlinkit :: git-config [1]の &lt;code&gt;sequence.editor&lt;/code&gt; オプションも参照してください。</target>
        </trans-unit>
        <trans-unit id="25ea93764f52eb3dcc477c86398962bd9bbded98" translate="yes" xml:space="preserve">
          <source>This event contains the command name for this git process and the hierarchy of commands from parent git processes.</source>
          <target state="translated">このイベントには、この git プロセスのコマンド名と親 git プロセスからのコマンドの階層が含まれます。</target>
        </trans-unit>
        <trans-unit id="f5d9f72db5c7ffa9776d5c71964338d54a2515a4" translate="yes" xml:space="preserve">
          <source>This event contains the complete argv received by main().</source>
          <target state="translated">このイベントには、main()が受信した完全な argv が含まれます。</target>
        </trans-unit>
        <trans-unit id="2a4c1f111536d47e2687ea692bfe5bd399b4307d" translate="yes" xml:space="preserve">
          <source>This event contains the discovered full path of the git executable (on platforms that are configured to resolve it).</source>
          <target state="translated">このイベントには、発見された git 実行ファイルのフルパスが含まれます (これを解決するように設定されているプラットフォームでは)。</target>
        </trans-unit>
        <trans-unit id="c8af8dbf59abf700f44d6449c7c951b54692bd2e" translate="yes" xml:space="preserve">
          <source>This event defines a repo-id and associates it with the root of the worktree.</source>
          <target state="translated">このイベントはレポIDを定義し、ワークツリーのルートに関連付けます。</target>
        </trans-unit>
        <trans-unit id="efbcacd1a490c688869fdd46397140e75919d7ab" translate="yes" xml:space="preserve">
          <source>This event describes a child process that is about to be spawned.</source>
          <target state="translated">このイベントは、スポーンされようとしている子プロセスを記述します。</target>
        </trans-unit>
        <trans-unit id="8c8f935852467fd7c3b46787d77518dc3611a986" translate="yes" xml:space="preserve">
          <source>This event gives the version of the executable and the EVENT format. It should always be the first event in a trace session. The EVENT format version will be incremented if new event types are added, if existing fields are removed, or if there are significant changes in interpretation of existing events or fields. Smaller changes, such as adding a new field to an existing event, will not require an increment to the EVENT format version.</source>
          <target state="translated">このイベントは、実行ファイルのバージョンと EVENT のフォーマットを提供します。これは常にトレースセッションの最初のイベントでなければなりません。新しいイベントタイプが追加されたり、既存のフィールドが削除されたり、既存のイベントやフィールドの解釈に重大な変更があった場合、EVENT フォーマットのバージョンはインクリメントされます。既存のイベントに新しいフィールドを追加するなどの小さな変更は、EVENT フォーマットのバージョンをインクリメントする必要はありません。</target>
        </trans-unit>
        <trans-unit id="7ea085d0e611d87af89c62af2b70656c0016dc7e" translate="yes" xml:space="preserve">
          <source>This event is emitted by the Trace2 &lt;code&gt;atexit&lt;/code&gt; routine during final shutdown. It should be the last event emitted by the process.</source>
          <target state="translated">このイベントは、最後のシャットダウン中にTrace2 &lt;code&gt;atexit&lt;/code&gt; ルーチンによって発行されます。これは、プロセスによって発行された最後のイベントである必要があります。</target>
        </trans-unit>
        <trans-unit id="0b20979b7d0436896a9e4dd619b31c2f047cbd64" translate="yes" xml:space="preserve">
          <source>This event is emitted when git calls &lt;code&gt;exit()&lt;/code&gt;.</source>
          <target state="translated">このイベントは、gitが &lt;code&gt;exit()&lt;/code&gt; を呼び出したときに発生します。</target>
        </trans-unit>
        <trans-unit id="9c63cb7135e802e553dc499a675da732d4f96c3a" translate="yes" xml:space="preserve">
          <source>This event is emitted when one of the &lt;code&gt;error()&lt;/code&gt;, &lt;code&gt;die()&lt;/code&gt;, or &lt;code&gt;usage()&lt;/code&gt; functions are called.</source>
          <target state="translated">このイベントは、 &lt;code&gt;error()&lt;/code&gt; 、 &lt;code&gt;die()&lt;/code&gt; 、または &lt;code&gt;usage()&lt;/code&gt; 関数のいずれかが呼び出されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="ebb8b872e605289564f67171a3133d84781ab210" translate="yes" xml:space="preserve">
          <source>This event is emitted when the program is terminated by a user signal. Depending on the platform, the signal event may prevent the &quot;atexit&quot; event from being generated.</source>
          <target state="translated">このイベントは、ユーザ信号によってプログラムが終了したときに発生します。プラットフォームによっては、シグナルイベントによって &quot;atexit &quot;イベントが発生しなくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="2ca8802f12c75856c4e7ea399ac7a1939e2a37eb" translate="yes" xml:space="preserve">
          <source>This event is generated after the current process has returned from the waitpid() and collected the exit information from the child.</source>
          <target state="translated">このイベントは、現在のプロセスが waitpid()から戻り、子プロセスの終了情報を収集した後に生成されます。</target>
        </trans-unit>
        <trans-unit id="9fe6d803410a7d3a5cd4bc2114534352d230200b" translate="yes" xml:space="preserve">
          <source>This event is generated before git attempts to &lt;code&gt;exec()&lt;/code&gt; another command rather than starting a child process.</source>
          <target state="translated">このイベントは、git が子プロセスを開始するのではなく、別のコマンドを &lt;code&gt;exec()&lt;/code&gt; する前に生成されます。</target>
        </trans-unit>
        <trans-unit id="93caa8939f471f1240286ec30c6905ef3996f20e" translate="yes" xml:space="preserve">
          <source>This event is generated if the &lt;code&gt;exec()&lt;/code&gt; fails and control returns to the current git command.</source>
          <target state="translated">このイベントは、 &lt;code&gt;exec()&lt;/code&gt; が失敗し、制御が現在のgitコマンドに戻った場合に生成されます。</target>
        </trans-unit>
        <trans-unit id="15a0b5629f08a42566247fd3e8af69adc717eef8" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter, such as a config setting, command-line flag, or environment variable.</source>
          <target state="translated">このイベントは、コンフィグ設定、コマンドラインフラグ、環境変数などのグローバルパラメータをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="814427d239ec02f31ac7bf0fb913766e18bfb53e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a global parameter.</source>
          <target state="translated">このイベントは、グローバルパラメータをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="54b6cc61590e1e0eba249cc8ddd71ddff154355b" translate="yes" xml:space="preserve">
          <source>This event is generated to log a pre-formatted JSON string containing structured data.</source>
          <target state="translated">このイベントは、構造化データを含む事前にフォーマットされた JSON 文字列をログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="0ee97bbcf1fde0cf306363257efe6b7de578045e" translate="yes" xml:space="preserve">
          <source>This event is generated to log a thread- and region-local key/value pair.</source>
          <target state="translated">このイベントは、スレッドとリージョンローカルのキー/値のペアをログに記録するために生成されます。</target>
        </trans-unit>
        <trans-unit id="4caa8d05330c9e1126d8391705e312b0d8975d63" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread exits. It is generated from &lt;strong&gt;within&lt;/strong&gt; the thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">このイベントは、スレッドの終了時に生成されます。スレッドのthread-proc &lt;strong&gt;内&lt;/strong&gt;から生成され&lt;strong&gt;ます&lt;/strong&gt;（TLSのため）。</target>
        </trans-unit>
        <trans-unit id="eba565beaf1b2269c764c147f5196869afe38bce" translate="yes" xml:space="preserve">
          <source>This event is generated when a thread is started. It is generated from &lt;strong&gt;within&lt;/strong&gt; the new thread&amp;rsquo;s thread-proc (for TLS reasons).</source>
          <target state="translated">このイベントは、スレッドの開始時に生成されます。新しいスレッドのthread-proc &lt;strong&gt;内&lt;/strong&gt;から生成され&lt;strong&gt;ます&lt;/strong&gt;（TLSのため）。</target>
        </trans-unit>
        <trans-unit id="1684fe3e3862662b36c1dfb0c9bb20558e1f338a" translate="yes" xml:space="preserve">
          <source>This event is generated when entering a region.</source>
          <target state="translated">このイベントは、地域に入ったときに発生します。</target>
        </trans-unit>
        <trans-unit id="809d72e4f54bac6c7054af4e990fa8c97e8c764d" translate="yes" xml:space="preserve">
          <source>This event is generated when leaving a region.</source>
          <target state="translated">このイベントはリージョンを離れるときに発生します。</target>
        </trans-unit>
        <trans-unit id="1e6a7368deeb7ec580313fc82400f1c12d17672a" translate="yes" xml:space="preserve">
          <source>This event is present when an alias is expanded.</source>
          <target state="translated">このイベントはエイリアスが展開されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="bca802363ffa9599d9e13df71e2f62ec1454e32f" translate="yes" xml:space="preserve">
          <source>This event is written to the git-trace2-discard sentinel file if there are too many files in the target trace directory (see the trace2.maxFiles config option).</source>
          <target state="translated">このイベントは、ターゲットのトレースディレクトリにファイルが多すぎる場合に git-trace2-discard sentinel ファイルに書き込まれます (trace2.maxFiles 設定オプションを参照ください)。</target>
        </trans-unit>
        <trans-unit id="8c2ad60a0d9356a6e908b18056fbac1c2b1d4129" translate="yes" xml:space="preserve">
          <source>This event, when present, describes the command variant This event may be emitted more than once.</source>
          <target state="translated">このイベントが存在する場合、このイベントはコマンドバリアントを記述します。 このイベントは複数回発行される可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e7d09cee878b03064fb9d9484c73f3f00225826" translate="yes" xml:space="preserve">
          <source>This example also shows that thread names are assigned in a racy manner as each thread starts and allocates TLS storage.</source>
          <target state="translated">この例でも、各スレッドが起動してTLSストレージを確保する際に、スレッド名がキビキビと割り当てられていることがわかります。</target>
        </trans-unit>
        <trans-unit id="e296b28f1fcad64b66f85f9abe931f54fc5fbde0" translate="yes" xml:space="preserve">
          <source>This example imports a new remote &quot;p4/proj2&quot; into an existing Git repository:</source>
          <target state="translated">この例では、新しいリモートの「p4/proj2」を既存のGitリポジトリにインポートしています。</target>
        </trans-unit>
        <trans-unit id="7cbbc9fac80d3f9e05217d26ad6f34ea5097abe6" translate="yes" xml:space="preserve">
          <source>This example shows that the index contained 3552 entries.</source>
          <target state="translated">この例は、インデックスに3552個のエントリが含まれていることを示しています。</target>
        </trans-unit>
        <trans-unit id="af5672891a1be21669d22b688901415e2cf060c3" translate="yes" xml:space="preserve">
          <source>This expands to the object name of the delta base for the given object, if it is stored as a delta. Otherwise it expands to the null object name (all zeroes).</source>
          <target state="translated">これは、与えられたオブジェクトのデルタベースがデルタとして格納されている場合、そのオブジェクト名に展開されます。そうでない場合は、ヌルのオブジェクト名(すべてゼロ)に展開されます。</target>
        </trans-unit>
        <trans-unit id="1a642986ccbacca12888668bff4ca6d3b1007b62" translate="yes" xml:space="preserve">
          <source>This explanation comes for &quot;free&quot; because there was no change. Similarly &lt;code&gt;C&lt;/code&gt; could be explained using &lt;code&gt;1&lt;/code&gt;, but that comes at some cost c&amp;gt;0 because of the modification:</source>
          <target state="translated">変更がなかったため、この説明は「無料」で行われます。同様に、 &lt;code&gt;C&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; を使用して説明できますが、変更のためにc&amp;gt; 0のコストがかかります。</target>
        </trans-unit>
        <trans-unit id="86a0b58a904e042293eb0ea80455653f123e7d4e" translate="yes" xml:space="preserve">
          <source>This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents.</source>
          <target state="translated">この拡張フォーマットは、名前の変更やコピー検出がアクティブな場合に便利で、異なる親でファイルの元の名前を見ることができます。</target>
        </trans-unit>
        <trans-unit id="fc95481325c82bdecdaa23291b735168b05af418" translate="yes" xml:space="preserve">
          <source>This extension does not change git&amp;rsquo;s behavior at all. It is useful only for testing format-1 compatibility.</source>
          <target state="translated">この拡張機能は、gitの動作をまったく変更しません。これは、フォーマット1の互換性をテストする場合にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="24a20ccff9f7f9f91cdf61fb876086b44fc5be61" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis by setting repository&amp;rsquo;s &lt;code&gt;gitweb.pickaxe&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.pickaxe&lt;/code&gt; 構成変数（ブール値）を設定することにより、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="3fcd9d965aa29d51e3ab01e56c522e086b7f545b" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.avatar&lt;/code&gt; configuration variable.</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.avatar&lt;/code&gt; 構成変数を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="da6908103a49ae5e820a33c13aadd5dfdd3e67a7" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.blame&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.blame&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="1d6d167abae14ab18966eab440f954ed6085f29c" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.grep&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.grep&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="dd4f802848cf6cbdc7682aeefb00472f2c444c9e" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.highlight&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.highlight&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="a8e82652b1c51e397e7f1e31621e9084d5611fda" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.patches&lt;/code&gt; configuration variable (integer).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.patches&lt;/code&gt; 構成変数（整数）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="a0528d6fc23cb2716835712f44b5daf955251062" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.remote_heads&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.remote_heads&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="58b983175f59d7aad97dac71b32251a2f4a8c4a0" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.showSizes&lt;/code&gt; configuration variable (boolean).</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.showSizes&lt;/code&gt; 構成変数（ブール値）を使用して、リポジトリごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="ee33afe943a28f48529ed67cc410ad185ea09f23" translate="yes" xml:space="preserve">
          <source>This feature can be configured on a per-repository basis via repository&amp;rsquo;s &lt;code&gt;gitweb.snapshot&lt;/code&gt; configuration variable, which contains a comma separated list of formats or &quot;none&quot; to disable snapshots. Unknown values are ignored.</source>
          <target state="translated">この機能は、リポジトリーの &lt;code&gt;gitweb.snapshot&lt;/code&gt; 構成変数を介してリポジトリーごとに構成できます。これには、フォーマットのコンマ区切りリスト、またはスナップショットを無効にする「なし」が含まれています。不明な値は無視されます。</target>
        </trans-unit>
        <trans-unit id="c2467a6f49bad0810d0f5e1c4a51888ceb4f5b0f" translate="yes" xml:space="preserve">
          <source>This feature can be configured on per-repository basis after setting $feature{&lt;code&gt;extra-branch-refs&lt;/code&gt;}{&lt;code&gt;override&lt;/code&gt;} to true, via repository&amp;rsquo;s &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; configuration variable, which contains a space separated list of refs. An example:</source>
          <target state="translated">この機能は、リポジトリの &lt;code&gt;gitweb.extraBranchRefs&lt;/code&gt; 構成変数を介して$ feature { &lt;code&gt;extra-branch-refs&lt;/code&gt; } { &lt;code&gt;override&lt;/code&gt; }をtrue に設定した後、リポジトリごとに構成できます。例：</target>
        </trans-unit>
        <trans-unit id="83b4612ad81d70c9ed8920a4b451b69b8c3ee080" translate="yes" xml:space="preserve">
          <source>This feature is intended to speed up git operations for repos that have large working directories.</source>
          <target state="translated">この機能は、大きな作業ディレクトリを持つreposのgit操作を高速化することを目的としています。</target>
        </trans-unit>
        <trans-unit id="6b24b487d6d9654020073f6754733ecc051175ad" translate="yes" xml:space="preserve">
          <source>This feature is semi-deprecated. For scripting purpose, &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--porcelain&lt;/code&gt; and &lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; are almost always superior alternatives, and users should look at &lt;a href=&quot;git-status&quot;&gt;git-status[1]&lt;/a&gt;&lt;code&gt;--short&lt;/code&gt; or &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;&lt;code&gt;--name-status&lt;/code&gt; for more user-friendly alternatives.</source>
          <target state="translated">この機能は半非推奨です。スクリプト作成の目的では、&lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--porcelain&lt;/code&gt; と&lt;a href=&quot;git-diff-files&quot;&gt;git-diff-files [1] &lt;/a&gt; &lt;code&gt;--name-status&lt;/code&gt; はほとんど常に優れた代替手段であり、ユーザーは&lt;a href=&quot;git-status&quot;&gt;git-status [1] &lt;/a&gt; &lt;code&gt;--short&lt;/code&gt; または&lt;a href=&quot;git-diff&quot;&gt;git-を&lt;/a&gt;確認する必要がありますdiff [1] &lt;code&gt;--name-status&lt;/code&gt; は、よりユーザーフレンドリーな代替手段です。</target>
        </trans-unit>
        <trans-unit id="0861edc399d3214fad2ecef2c8c7d8f9e28b4564" translate="yes" xml:space="preserve">
          <source>This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.</source>
          <target state="translated">この機能は、コミット者のメールアドレスが無効な場合など、初期のコミットでエラーが発生していても安全に無視できる場合に、確立されたプロジェクトを受け入れる場合に便利です。注意:この設定では、破損したオブジェクトをスキップすることはできません。</target>
        </trans-unit>
        <trans-unit id="5474f37d061902594342fbe38be401770ea2769f" translate="yes" xml:space="preserve">
          <source>This feature works by recording the mtime of the working tree directories and then omitting reading directories and stat calls against files in those directories whose mtime hasn&amp;rsquo;t changed. For this to work the underlying operating system and file system must change the &lt;code&gt;st_mtime&lt;/code&gt; field of directories if files in the directory are added, modified or deleted.</source>
          <target state="translated">この機能は、作業ツリーディレクトリのmtimeを記録し、ディレクトリの読み取りと、mtimeが変更されていないディレクトリ内のファイルに対するstat呼び出しを省略して機能します。これが機能するには、ディレクトリ内のファイルが追加、変更、または削除された場合、基盤となるオペレーティングシステムとファイルシステムでディレクトリの &lt;code&gt;st_mtime&lt;/code&gt; フィールドを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="ef2541ade640bd800921de0e87cda6dd56d4d5f6" translate="yes" xml:space="preserve">
          <source>This fetches revisions from the SVN parent of the current HEAD and rebases the current (uncommitted to SVN) work against it.</source>
          <target state="translated">これは、現在のHEADのSVN親からリビジョンを取得し、それに対して現在の(SVNにコミットされていない)作業をリベースします。</target>
        </trans-unit>
        <trans-unit id="e6f84c5c8c6a08793025b9538660cbd1c1faa637" translate="yes" xml:space="preserve">
          <source>This file contains the commit message of a commit in progress. If &lt;code&gt;git commit&lt;/code&gt; exits due to an error before creating a commit, any commit message that has been provided by the user (e.g., in an editor session) will be available in this file, but will be overwritten by the next invocation of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">このファイルには、進行中のコミットのコミットメッセージが含まれています。 &lt;code&gt;git commit&lt;/code&gt; 作成する前にエラーのためにgit commitが終了した場合、ユーザーによって（たとえば、エディターセッションで）提供されたコミットメッセージはこのファイルで使用できますが、次の &lt;code&gt;git commit&lt;/code&gt; の呼び出しによって上書きされます。</target>
        </trans-unit>
        <trans-unit id="2063696fd909d95d720efff6859f2846f7a33789" translate="yes" xml:space="preserve">
          <source>This file helps dumb transports discover what refs are available in this repository. If the repository is published for dumb transports, this file should be regenerated by &lt;code&gt;git update-server-info&lt;/code&gt; every time a tag or branch is created or modified. This is normally done from the &lt;code&gt;hooks/update&lt;/code&gt; hook, which is run by the &lt;code&gt;git-receive-pack&lt;/code&gt; command when you &lt;code&gt;git push&lt;/code&gt; into the repository.</source>
          <target state="translated">このファイルは、ダムトランスポートがこのリポジトリで使用可能な参照を検出するのに役立ちます。ダムトランスポート用にリポジトリが公開されている場合、タグまたはブランチが作成または変更されるたびに、このファイルは &lt;code&gt;git update-server-info&lt;/code&gt; によって再生成される必要があります。これは通常、 &lt;code&gt;hooks/update&lt;/code&gt; フックから行われます。これは、リポジトリに &lt;code&gt;git push&lt;/code&gt; するときに &lt;code&gt;git-receive-pack&lt;/code&gt; コマンドによって実行されます。</target>
        </trans-unit>
        <trans-unit id="3487083c7b98c66e39acc8f940f40c0e9ceac88f" translate="yes" xml:space="preserve">
          <source>This file is to help dumb transports discover what packs are available in this object store. Whenever a pack is added or removed, &lt;code&gt;git update-server-info&lt;/code&gt; should be run to keep this file up to date if the repository is published for dumb transports. &lt;code&gt;git repack&lt;/code&gt; does this by default.</source>
          <target state="translated">このファイルは、ダムトランスポートがこのオブジェクトストアで利用可能なパックを検出するのに役立ちます。パックが追加または削除されるたびに、リポジトリがダムトランスポート用に公開されている場合は、 &lt;code&gt;git update-server-info&lt;/code&gt; を実行してこのファイルを最新の状態に保つ必要があります。 &lt;code&gt;git repack&lt;/code&gt; はデフォルトでこれを行います。</target>
        </trans-unit>
        <trans-unit id="cbe65e34529f44f10bf3c4bc531b3ef1a1689dfb" translate="yes" xml:space="preserve">
          <source>This file mainly serves as the mapping between the name and path of submodules in the superproject, such that the submodule&amp;rsquo;s Git directory can be located.</source>
          <target state="translated">このファイルは主に、スーパーモジュール内のサブモジュールの名前とパス間のマッピングとして機能し、サブモジュールのGitディレクトリを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="071050e2544b6fc3703fb63508bbfdc9243b46ab" translate="yes" xml:space="preserve">
          <source>This file records URLs to alternate object stores that this object store borrows objects from, to be used when the repository is fetched over HTTP.</source>
          <target state="translated">このファイルは、このオブジェクトストアがオブジェクトを借用している代替オブジェクトストアへの URL を記録し、リポジトリを HTTP で取得する際に使用します。</target>
        </trans-unit>
        <trans-unit id="cc3397ff622f0d4d27f532099612807583041388" translate="yes" xml:space="preserve">
          <source>This file records fake commit ancestry information, to pretend the set of parents a commit has is different from how the commit was actually created. One record per line describes a commit and its fake parents by listing their 40-byte hexadecimal object names separated by a space and terminated by a newline.</source>
          <target state="translated">このファイルは、あるコミットの親のセットが実際に作成されたものとは異なるものであるかのように見せかけるために、偽のコミットの祖先情報を記録します。1 行に 1 つの記録で、コミットとその偽の親について、スペースで区切られた 40 バイトの 16 進数のオブジェクト名をリストアップし、改行で終わります。</target>
        </trans-unit>
        <trans-unit id="1873ba1c652fc3e8dae8a41ecd45dff2c995baaf" translate="yes" xml:space="preserve">
          <source>This file records paths to alternate object stores that this object store borrows objects from, one pathname per line. Note that not only native Git tools use it locally, but the HTTP fetcher also tries to use it remotely; this will usually work if you have relative paths (relative to the object database, not to the repository!) in your alternates file, but it will not work if you use absolute paths unless the absolute path in filesystem and web URL is the same. See also &lt;code&gt;objects/info/http-alternates&lt;/code&gt;.</source>
          <target state="translated">このファイルは、このオブジェクトストアがオブジェクトを借用する代替オブジェクトストアへのパスを1行に1つのパス名で記録します。ネイティブのGitツールがローカルで使用するだけでなく、HTTPフェッチャーもリモートで使用することに注意してください。これは通常、代替ファイルに相対パス（リポジトリではなくオブジェクトデータベースへの相対パス）がある場合は機能しますが、ファイルシステムとWeb URLの絶対パスが同じでない限り、絶対パスを使用する場合は機能しません。 &lt;code&gt;objects/info/http-alternates&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="517ab2689bb34239adf0b92ebb2a70e736956866" translate="yes" xml:space="preserve">
          <source>This file stores sparse checkout patterns. See also: &lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree[1]&lt;/a&gt;.</source>
          <target state="translated">このファイルは、スパースチェックアウトパターンを格納します。&lt;a href=&quot;git-read-tree&quot;&gt;git-read-tree [1]&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="39e8ca5394d81b30bccd145a749de9346fba2480" translate="yes" xml:space="preserve">
          <source>This file uses the following format:</source>
          <target state="translated">このファイルは以下の形式を使用しています。</target>
        </trans-unit>
        <trans-unit id="53c1d1d0fe83b95fe57b9ac9f6f59413589df721" translate="yes" xml:space="preserve">
          <source>This file, by convention among Porcelains, stores the exclude pattern list. &lt;code&gt;.gitignore&lt;/code&gt; is the per-directory ignore file. &lt;code&gt;git status&lt;/code&gt;, &lt;code&gt;git add&lt;/code&gt;, &lt;code&gt;git rm&lt;/code&gt; and &lt;code&gt;git clean&lt;/code&gt; look at it but the core Git commands do not look at it. See also: &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;.</source>
          <target state="translated">このファイルは、磁器間の規約により、除外パターンリストを格納します。 &lt;code&gt;.gitignore&lt;/code&gt; は、ディレクトリごとの無視ファイルです。 &lt;code&gt;git status&lt;/code&gt; 、 &lt;code&gt;git add&lt;/code&gt; 、 &lt;code&gt;git rm&lt;/code&gt; 、および &lt;code&gt;git clean&lt;/code&gt; はそれを調べますが、コアGitコマンドはそれを調べません。&lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt;もご覧ください。</target>
        </trans-unit>
        <trans-unit id="d8956b9fdca3244ff8cd9467aefdc82ab275d878" translate="yes" xml:space="preserve">
          <source>This filter may be used if you only need to modify the environment in which the commit will be performed. Specifically, you might want to rewrite the author/committer name/email/time environment variables (see &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt; for details).</source>
          <target state="translated">このフィルターは、コミットが実行される環境のみを変更する必要がある場合に使用できます。具体的には、作成者/コミッター名/メール/時間の環境変数を書き換えることができます（詳細については、&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="1f7d9b6979d573a6d61c7fc37aef6ce7f09ba079" translate="yes" xml:space="preserve">
          <source>This flag causes &lt;code&gt;git diff-tree --stdin&lt;/code&gt; to also show the commit message before the differences.</source>
          <target state="translated">このフラグにより​​、 &lt;code&gt;git diff-tree --stdin&lt;/code&gt; は、差分の前にコミットメッセージも表示します。</target>
        </trans-unit>
        <trans-unit id="f18c1480999d4a64a19b051751a1dfdb3d01c394" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a local pack that has a .keep file to be ignored, even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、.keep ファイルを持つローカルパック内のオブジェクトを無視します。</target>
        </trans-unit>
        <trans-unit id="3b2c5aa43d85ae95c70f7126e1a8d471a0247285" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in a pack to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、既にパックされているオブジェクトを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="936ccdd465b71c76f59e3d7929f0e31e3a24c431" translate="yes" xml:space="preserve">
          <source>This flag causes an object already in the given pack to be ignored, even if it would have otherwise been packed. &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; is the pack file name without leading directory (e.g. &lt;code&gt;pack-123.pack&lt;/code&gt;). The option could be specified multiple times to keep multiple packs.</source>
          <target state="translated">このフラグを使用すると、指定されたパックにすでに含まれているオブジェクトであっても、すでに指定されたパックにあるオブジェクトは無視されます。 &lt;code&gt;&amp;lt;pack-name&amp;gt;&lt;/code&gt; は、先頭のディレクトリを除いたパックファイル名です（例： &lt;code&gt;pack-123.pack&lt;/code&gt; ）。このオプションを複数回指定して、複数のパックを保持できます。</target>
        </trans-unit>
        <trans-unit id="9fad47cb9db9729fbeb177e82626a6322dbefd6c" translate="yes" xml:space="preserve">
          <source>This flag causes an object that is borrowed from an alternate object store to be ignored even if it would have otherwise been packed.</source>
          <target state="translated">このフラグは、別のオブジェクトストアから借りてきたオブジェクトを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="97fddffea713eaa9774ecf695b0619f959916c25" translate="yes" xml:space="preserve">
          <source>This flag causes combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when -c or --cc are specified, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested).</source>
          <target state="translated">このフラグは、(マージコミットで使用される)結合された diff に、すべての親からのファイル名をリストアップさせます。このため、このフラグは -c または --cc が指定された場合にのみ有効で、ファイル名の変更が検出された場合 (つまり、リネームやコピーの検出が要求された場合)にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="7d04699c745135d6f14712a3d65005478838c3a7" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one &amp;lt;tree-ish&amp;gt;, or &lt;code&gt;--stdin&lt;/code&gt;). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the &lt;code&gt;-m&lt;/code&gt; option does). Furthermore, it lists only files which were modified from all parents.</source>
          <target state="translated">このフラグは、マージコミットの表示方法を変更します（つまり、コマンドに1つの&amp;lt;tree-ish&amp;gt;または &lt;code&gt;--stdin&lt;/code&gt; が指定されている場合にのみ役立ちます）。これは、親と結果のペアごとの差分を一度に1つずつ表示するのではなく、各親からマージ結果への違いを同時に示します（ &lt;code&gt;-m&lt;/code&gt; オプションの機能です）。さらに、すべての親から変更されたファイルのみがリストされます。</target>
        </trans-unit>
        <trans-unit id="0d503f20848f4e1ff6c5e78038f4bce28f3422a3" translate="yes" xml:space="preserve">
          <source>This flag changes the way a merge commit patch is displayed, in a similar way to the &lt;code&gt;-c&lt;/code&gt; option. It implies the &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-p&lt;/code&gt; options and further compresses the patch output by omitting uninteresting hunks whose the contents in the parents have only two variants and the merge result picks one of them without modification. When all hunks are uninteresting, the commit itself and the commit log message is not shown, just like in any other &quot;empty diff&quot; case.</source>
          <target state="translated">このフラグは、 &lt;code&gt;-c&lt;/code&gt; オプションと同様に、マージコミットパッチの表示方法を変更します。これは &lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-p&lt;/code&gt; オプションを意味し、親のコンテンツに2つのバリアントしかない興味のないハンクを省略してパッチ出力をさらに圧縮し、マージ結果は変更せずにそれらの1つを選択します。他の「空の差分」の場合と同様に、すべてのハンクが興味を持たない場合、コミット自体とコミットログメッセージは表示されません。</target>
        </trans-unit>
        <trans-unit id="4835250d6cbee97633146544cd1896afcc631099" translate="yes" xml:space="preserve">
          <source>This flag disables these checks, and can cause the remote repository to lose commits; use it with care.</source>
          <target state="translated">このフラグはこれらのチェックを無効にし、リモートリポジトリのコミットを失う可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc5f19786a1b0eda7705eaaa80c372612ab5d782" translate="yes" xml:space="preserve">
          <source>This flag implies the &lt;code&gt;-c&lt;/code&gt; option and further compresses the patch output by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification.</source>
          <target state="translated">このフラグは &lt;code&gt;-c&lt;/code&gt; オプションを意味し、親のコンテンツに2つのバリアントしかない興味のないハンクを省略してパッチ出力をさらに圧縮し、マージ結果は変更なしでそれらの1つを選択します。</target>
        </trans-unit>
        <trans-unit id="03d7872e2a4e991418dc3ea26303b414cb645f27" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git apply&lt;/code&gt; program (see &lt;a href=&quot;git-apply&quot;&gt;git-apply[1]&lt;/a&gt;) that applies the patch. Implies --apply.</source>
          <target state="translated">このフラグは、パッチを適用する &lt;code&gt;git apply&lt;/code&gt; プログラム（&lt;a href=&quot;git-apply&quot;&gt;git-apply [1]を&lt;/a&gt;参照）に渡されます。--applyを意味します。</target>
        </trans-unit>
        <trans-unit id="6c9f2e241df42ed566896490c4c1723461343597" translate="yes" xml:space="preserve">
          <source>This flag is passed to the &lt;code&gt;git log&lt;/code&gt; program (see &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt;) that generates the patches.</source>
          <target state="translated">このフラグは、パッチを生成する &lt;code&gt;git log&lt;/code&gt; プログラム（&lt;a href=&quot;git-log&quot;&gt;git-log [1]を&lt;/a&gt;参照）に渡されます。</target>
        </trans-unit>
        <trans-unit id="7d74132f018d1e29c74648fc0cf6690a80cd700b" translate="yes" xml:space="preserve">
          <source>This flag makes the command not to report its progress on the standard error stream.</source>
          <target state="translated">このフラグは、コマンドの進行状況を標準エラーストリームに報告しないようにします。</target>
        </trans-unit>
        <trans-unit id="c7300f914a6246e85c4558f9e03e3ac6bd2957c2" translate="yes" xml:space="preserve">
          <source>This flag makes the merge commits show the full diff like regular commits; for each merge parent, a separate log entry and diff is generated. An exception is that only diff against the first parent is shown when &lt;code&gt;--first-parent&lt;/code&gt; option is given; in that case, the output represents the changes the merge brought &lt;code&gt;into&lt;/code&gt; the then-current branch.</source>
          <target state="translated">このフラグは、マージコミットに通常のコミットと同様に完全な差分を表示させます。マージの親ごとに、個別のログエントリと差分が生成されます。例外は、 &lt;code&gt;--first-parent&lt;/code&gt; オプションが指定されている場合、最初の親との差分のみが表示されることです。その場合には、出力がもたらしたマージ変更表し &lt;code&gt;into&lt;/code&gt; 、その後、現在のブランチを。</target>
        </trans-unit>
        <trans-unit id="824f1a5cbd322eac2edc9b61691e0afb5fb06c7c" translate="yes" xml:space="preserve">
          <source>This flag tells the command not to reuse existing object data at all, including non deltified object, forcing recompression of everything. This implies --no-reuse-delta. Useful only in the obscure case where wholesale enforcement of a different compression level on the packed data is desired.</source>
          <target state="translated">このフラグは、デルタ化されていないオブジェクトを含め、既存のオブジェクトデータを一切再利用しないように指示し、すべてのオブジェクトの再圧縮を強制します。これは --no-reuse-delta を意味します。パックされたデータに別の圧縮レベルを強制的に適用したいというような曖昧な場合にのみ有用です。</target>
        </trans-unit>
        <trans-unit id="e554d11fed47fbadc588fbbd426a692640350799" translate="yes" xml:space="preserve">
          <source>This form can only be used in the middle of a &lt;code&gt;commit&lt;/code&gt;. The path names a directory entry within fast-import&amp;rsquo;s active commit. The path must be quoted in this case.</source>
          <target state="translated">この形式は、 &lt;code&gt;commit&lt;/code&gt; 途中でのみ使用できます。パスは、高速インポートのアクティブなコミット内のディレクトリエントリを指定します。この場合、パスは引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="55cd46dfe4dc47146eb359f16ba2ab6440f5d33b" translate="yes" xml:space="preserve">
          <source>This form is to compare the given two paths on the filesystem. You can omit the &lt;code&gt;--no-index&lt;/code&gt; option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git. This form implies &lt;code&gt;--exit-code&lt;/code&gt;.</source>
          <target state="translated">このフォームは、ファイルシステム上の指定された2つのパスを比較するためのものです。Gitによって制御されている作業ツリーでコマンドを実行し、少なくとも1つのパスが作業ツリーの外を指している場合、またはGitによって制御されている作業ツリーの外でコマンドを実行する場合は、 &lt;code&gt;--no-index&lt;/code&gt; オプションを省略できます。この形式は &lt;code&gt;--exit-code&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="1a36c2e6e9bf305ffd5ef7a7e4c453ac93dfb865" translate="yes" xml:space="preserve">
          <source>This form is to view the changes on the branch containing and up to the second &amp;lt;commit&amp;gt;, starting at a common ancestor of both &amp;lt;commit&amp;gt;. &quot;git diff A...B&quot; is equivalent to &quot;git diff $(git merge-base A B) B&quot;. You can omit any one of &amp;lt;commit&amp;gt;, which has the same effect as using HEAD instead.</source>
          <target state="translated">このフォームは、両方の&amp;lt;commit&amp;gt;の共通の祖先から始まり、2番目の&amp;lt;commit&amp;gt;を含むブランチまでの変更を表示するためのものです。「git diff A ... B」は「git diff $（git merge-base AB）B」と同等です。&amp;lt;commit&amp;gt;のいずれかを省略できます。これは、代わりにHEADを使用するのと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="18011d68a19f669179582c8652eaff17f583329f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you have in your working tree relative to the named &amp;lt;commit&amp;gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.</source>
          <target state="translated">このフォームは、名前付きの&amp;lt;commit&amp;gt;に関連して作業ツリーに加えた変更を表示するためのものです。HEADを使用して最新のコミットと比較するか、ブランチ名を使用して別のブランチの先端と比較できます。</target>
        </trans-unit>
        <trans-unit id="0c3233dc5774a7d1fc399a8b304cc732bba72d9f" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you &lt;code&gt;could&lt;/code&gt; tell Git to further add to the index but you still haven&amp;rsquo;t. You can stage these changes by using &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt;.</source>
          <target state="translated">このフォームは、インデックス（次のコミットのステージング領域）に対して行った変更を表示するためのものです。言い換えれば、Gitにインデックスにさらに追加するように伝えることが &lt;code&gt;could&lt;/code&gt; 違いですが、まだ違います。これらの変更は、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;を使用してステージングできます。</target>
        </trans-unit>
        <trans-unit id="ee8e76f95895702db36db495b0e53027904973c9" translate="yes" xml:space="preserve">
          <source>This form is to view the changes you staged for the next commit relative to the named &amp;lt;commit&amp;gt;. Typically you would want comparison with the latest commit, so if you do not give &amp;lt;commit&amp;gt;, it defaults to HEAD. If HEAD does not exist (e.g. unborn branches) and &amp;lt;commit&amp;gt; is not given, it shows all staged changes. --staged is a synonym of --cached.</source>
          <target state="translated">このフォームは、名前付きの&amp;lt;commit&amp;gt;に関連する次のコミットのためにステージングした変更を表示するためのものです。通常、最新のコミットとの比較が必要になるため、&amp;lt;commit&amp;gt;を指定しない場合、デフォルトでHEADになります。HEADが存在せず（たとえば、胎児のブランチ）、&amp;lt;commit&amp;gt;が指定されていない場合、すべての段階的な変更が表示されます。--stagedは--cachedの同義語です。</target>
        </trans-unit>
        <trans-unit id="51dda6a69f38e64f972e32a62549822542d75887" translate="yes" xml:space="preserve">
          <source>This form is to view the differences between the raw contents of two blob objects.</source>
          <target state="translated">本実施形態では、2つのブロブオブジェクトの生の内容の違いを表示する。</target>
        </trans-unit>
        <trans-unit id="3140d31a73de32a89eb697f18f04aa202d7a5d8e" translate="yes" xml:space="preserve">
          <source>This form is to view the results of a merge commit. The first listed &amp;lt;commit&amp;gt; must be the merge itself; the remaining two or more commits should be its parents. A convenient way to produce the desired set of revisions is to use the ^@ suffix. For instance, if &lt;code&gt;master&lt;/code&gt; names a merge commit, &lt;code&gt;git diff master
master^@&lt;/code&gt; gives the same combined diff as &lt;code&gt;git show master&lt;/code&gt;.</source>
          <target state="translated">このフォームは、マージコミットの結果を表示するためのものです。最初にリストされている&amp;lt;commit&amp;gt;は、マージ自体である必要があります。残りの2つ以上のコミットはその親である必要があります。必要なリビジョンのセットを作成する便利な方法は、^ @サフィックスを使用することです。場合例えば、 &lt;code&gt;master&lt;/code&gt; 名マージコミット、 &lt;code&gt;git diff master master^@&lt;/code&gt; 同じ組み合わせの差分与え &lt;code&gt;git show master&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="395d78419362cad7438eb6eae46785d35953f019" translate="yes" xml:space="preserve">
          <source>This form resets the current branch head to &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; and possibly updates the index (resetting it to the tree of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;) and the working tree depending on &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is omitted, defaults to &lt;code&gt;--mixed&lt;/code&gt;. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; must be one of the following:</source>
          <target state="translated">このフォームは、現在のブランチヘッドを &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; にリセットし、インデックスを更新（ &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; のツリーにリセット）し、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に応じて作業ツリーを更新します。場合は &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に、デフォルトでは省略されて &lt;code&gt;--mixed&lt;/code&gt; を。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; 次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="90bcd35d4969f3a90ba2bd18f27a5c6eb93f333b" translate="yes" xml:space="preserve">
          <source>This form will use the first line matching the given POSIX regex. If &amp;lt;start&amp;gt; is a regex, it will search from the end of the previous &lt;code&gt;-L&lt;/code&gt; range, if any, otherwise from the start of file. If &amp;lt;start&amp;gt; is &amp;ldquo;^/regex/&amp;rdquo;, it will search from the start of file. If &amp;lt;end&amp;gt; is a regex, it will search starting at the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">このフォームは、指定されたPOSIX正規表現に一致する最初の行を使用します。&amp;lt;start&amp;gt;が正規表現の場合、前の &lt;code&gt;-L&lt;/code&gt; 範囲がある場合は最後から検索し、そうでない場合はファイルの先頭から検索します。&amp;lt;start&amp;gt;が「^ / regex /」の場合、ファイルの先頭から検索します。&amp;lt;end&amp;gt;が正規表現の場合、&amp;lt;start&amp;gt;で指定された行から検索を開始します。</target>
        </trans-unit>
        <trans-unit id="b42c261dd1828c15332725a480fa7095bcc76b2a" translate="yes" xml:space="preserve">
          <source>This format expects the first line of the file to contain the &quot;Cc:&quot; value and the &quot;Subject:&quot; of the message as the second line.</source>
          <target state="translated">このフォーマットでは、ファイルの1行目に &quot;Cc:&quot;の値を、2行目にメッセージの &quot;Subject:&quot;を含むことを想定しています。</target>
        </trans-unit>
        <trans-unit id="105520fc7842a24e43537a27759a074335828eb6" translate="yes" xml:space="preserve">
          <source>This format is identical to version &lt;code&gt;0&lt;/code&gt;, with the following exceptions:</source>
          <target state="translated">この形式はバージョン &lt;code&gt;0&lt;/code&gt; と同じですが、次の例外があります。</target>
        </trans-unit>
        <trans-unit id="fd22347e6ce1cebbfe9140a8d5df54f1132eb3e9" translate="yes" xml:space="preserve">
          <source>This format is no longer produced by any Git command, but is and will continue to be supported by &lt;code&gt;update-index --index-info&lt;/code&gt;.</source>
          <target state="translated">この形式は、Gitコマンドによって生成されなくなりましたが、 &lt;code&gt;update-index --index-info&lt;/code&gt; によって引き続きサポートされます。</target>
        </trans-unit>
        <trans-unit id="e1e42b99834dd201113f33eae88b5856f686096e" translate="yes" xml:space="preserve">
          <source>This format is to put higher order stages into the index file and matches &lt;code&gt;git ls-files --stage&lt;/code&gt; output.</source>
          <target state="translated">このフォーマットは、より高次のステージをインデックスファイルに入れ、 &lt;code&gt;git ls-files --stage&lt;/code&gt; の出力と一致させます。</target>
        </trans-unit>
        <trans-unit id="483caba3e82677e09e2d521ebba75089a90ce09e" translate="yes" xml:space="preserve">
          <source>This format is to stuff &lt;code&gt;git ls-tree&lt;/code&gt; output into the index.</source>
          <target state="translated">このフォーマットは、 &lt;code&gt;git ls-tree&lt;/code&gt; 出力をインデックスに詰め込むためのものです。</target>
        </trans-unit>
        <trans-unit id="078ec0cba6df63b2f2fc0bbcd069e250ea13b628" translate="yes" xml:space="preserve">
          <source>This format is used to refer to another commit in a commit message and is the same as &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt;. By default, the date is formatted with &lt;code&gt;--date=short&lt;/code&gt; unless another &lt;code&gt;--date&lt;/code&gt; option is explicitly specified. As with any &lt;code&gt;format:&lt;/code&gt; with format placeholders, its output is not affected by other options like &lt;code&gt;--decorate&lt;/code&gt; and &lt;code&gt;--walk-reflogs&lt;/code&gt;.</source>
          <target state="translated">このフォーマットは、コミットメッセージで別のコミットを参照するために使用され、-- &lt;code&gt;--pretty='format:%C(auto)%h (%s, %ad)'&lt;/code&gt; と同じです。デフォルトでは、別の &lt;code&gt;--date&lt;/code&gt; オプションが明示的に指定されていない限り、日付は &lt;code&gt;--date=short&lt;/code&gt; でフォーマットされます。他の &lt;code&gt;format:&lt;/code&gt; と同様に、フォーマットプレースホルダーを使用すると、その出力は &lt;code&gt;--decorate&lt;/code&gt; や &lt;code&gt;--walk-reflogs&lt;/code&gt; などの他のオプションの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="742c78626a467f269e89b016f43c5e1a7be4cd88" translate="yes" xml:space="preserve">
          <source>This gets rid of the &lt;code&gt;git-svn-id:&lt;/code&gt; lines at the end of every commit.</source>
          <target state="translated">これにより、すべてのコミットの最後に &lt;code&gt;git-svn-id:&lt;/code&gt; 行が削除されます。</target>
        </trans-unit>
        <trans-unit id="2acaf36aea784a80df7509fcb8e38355c645c5a7" translate="yes" xml:space="preserve">
          <source>This gives a very controlled flow of fixes. If you notice that you have applied a fix to e.g. &lt;code&gt;master&lt;/code&gt; that is also required in &lt;code&gt;maint&lt;/code&gt;, you will need to cherry-pick it (using &lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick[1]&lt;/a&gt;) downwards. This will happen a few times and is nothing to worry about unless you do it very frequently.</source>
          <target state="translated">これにより、修正のフローが非常に制御されます。 &lt;code&gt;maint&lt;/code&gt; でも必要な修正を &lt;code&gt;master&lt;/code&gt; などに適用したことに気付いた場合は、（&lt;a href=&quot;git-cherry-pick&quot;&gt;git-cherry-pick [1]を使用して&lt;/a&gt;）チェリーピックする必要があります。これは数回発生し、頻繁に実行しない限り、心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="1f3884c08aac0f5d8941c7814b274c9743619a33" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase had conflicts, or used &lt;code&gt;--interactive&lt;/code&gt; to omit, edit, squash, or fixup commits; or if the upstream used one of &lt;code&gt;commit --amend&lt;/code&gt;, &lt;code&gt;reset&lt;/code&gt;, or a full history rewriting command like &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;&lt;code&gt;filter-repo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;subsystem&lt;/code&gt; リベースに競合がある場合、または &lt;code&gt;--interactive&lt;/code&gt; を使用してコミットを省略、編集、スカッシュ、または修正する場合に発生します。または、アップストリームが &lt;code&gt;commit --amend&lt;/code&gt; 、 &lt;code&gt;reset&lt;/code&gt; 、または&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt; &lt;code&gt;filter-repo&lt;/code&gt; の&lt;/a&gt;ような完全な履歴書き換えコマンドのいずれかを使用した場合。</target>
        </trans-unit>
        <trans-unit id="53ac63807fcdbfc7e050fb3151d6b086f2e9a274" translate="yes" xml:space="preserve">
          <source>This happens if the &lt;code&gt;subsystem&lt;/code&gt; rebase was a simple rebase and had no conflicts.</source>
          <target state="translated">これは、 &lt;code&gt;subsystem&lt;/code&gt; リベースが単純なリベースであり、競合がなかった場合に発生します。</target>
        </trans-unit>
        <trans-unit id="d414984e9f8d7bfd782c8f2da36b80bcd80ea28e" translate="yes" xml:space="preserve">
          <source>This has a few user-visible effects and caveats:</source>
          <target state="translated">これにはいくつかのユーザー目線の効果と注意点があります。</target>
        </trans-unit>
        <trans-unit id="1c876a37c9c7633e47e1a6a38b1f16f75e32a3ed" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;revert&lt;/code&gt;, and lets you add untracked paths to the index.</source>
          <target state="translated">これには &lt;code&gt;update&lt;/code&gt; と &lt;code&gt;revert&lt;/code&gt; と非常によく似たUIがあり、追跡されていないパスをインデックスに追加できます。</target>
        </trans-unit>
        <trans-unit id="33280cb105ee3b71902ce7b15c9592fd52f73e30" translate="yes" xml:space="preserve">
          <source>This has a very similar UI to &lt;code&gt;update&lt;/code&gt;, and the staged information for selected paths are reverted to that of the HEAD version. Reverting new paths makes them untracked.</source>
          <target state="translated">これは &lt;code&gt;update&lt;/code&gt; と非常によく似たUIを持ち、選択されたパスのステージングされた情報はHEADバージョンのものに戻ります。新しいパスを元に戻すと、追跡されなくなります。</target>
        </trans-unit>
        <trans-unit id="4d4512b846dcedcc9cf4704e69eaeda15e1830db" translate="yes" xml:space="preserve">
          <source>This has been requested by some kernel developers because some bugs called sporadic bugs do not appear in all the kernel builds because they are very dependent on the compiler output.</source>
          <target state="translated">これは、散発的バグと呼ばれるいくつかのバグがコンパイラの出力に非常に依存しているため、すべてのカーネルビルドには表示されないという理由で、いくつかのカーネル開発者から要望がありました。</target>
        </trans-unit>
        <trans-unit id="b93781d2b5ee24d7b760545bc5177eb80e4c3e22" translate="yes" xml:space="preserve">
          <source>This has the advantage that it will be saved in your &lt;code&gt;CVS/Root&lt;/code&gt; files and you don&amp;rsquo;t need to worry about always setting the correct environment variable. SSH users restricted to &lt;code&gt;git-shell&lt;/code&gt; don&amp;rsquo;t need to override the default with CVS_SERVER (and shouldn&amp;rsquo;t) as &lt;code&gt;git-shell&lt;/code&gt; understands &lt;code&gt;cvs&lt;/code&gt; to mean &lt;code&gt;git-cvsserver&lt;/code&gt; and pretends that the other end runs the real &lt;code&gt;cvs&lt;/code&gt; better.</source>
          <target state="translated">これには、 &lt;code&gt;CVS/Root&lt;/code&gt; ファイルに保存され、常に正しい環境変数を設定することを心配する必要がないという利点があります。制限SSHユーザー &lt;code&gt;git-shell&lt;/code&gt; CVS_SERVERでデフォルトをオーバーライドする必要があります（とすべきでない）していないよう &lt;code&gt;git-shell&lt;/code&gt; 理解 &lt;code&gt;cvs&lt;/code&gt; 平均へ &lt;code&gt;git-cvsserver&lt;/code&gt; 、他端が本当実行されることをふり &lt;code&gt;cvs&lt;/code&gt; 良くします。</target>
        </trans-unit>
        <trans-unit id="f27a3b2d1e595dbb21c1b28424b4a89305bcf439" translate="yes" xml:space="preserve">
          <source>This has two implications:</source>
          <target state="translated">これには2つの意味合いがあります。</target>
        </trans-unit>
        <trans-unit id="a2d38b5ae6dea81df64d435d13a5c9c9c6e43a8c" translate="yes" xml:space="preserve">
          <source>This header line is followed by the following information at least once for each commit:</source>
          <target state="translated">このヘッダ行の後には、コミットごとに少なくとも1回、以下の情報が続きます。</target>
        </trans-unit>
        <trans-unit id="aac19de1c954c0a5c2aba42bf1f288afbf74cabf" translate="yes" xml:space="preserve">
          <source>This helper uses specified file descriptors to connect to a remote Git server. This is not meant for end users but for programs and scripts calling git fetch, push or archive.</source>
          <target state="translated">このヘルパーは、指定したファイル記述子を使用してリモートの Git サーバーに接続します。これはエンドユーザー向けではなく、git fetch や push あるいは archive をコールするプログラムやスクリプト向けのものです。</target>
        </trans-unit>
        <trans-unit id="eafdc2cefff4153e88df550a24ce4b00606582ea" translate="yes" xml:space="preserve">
          <source>This hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.</source>
          <target state="translated">このフックは、対応するプレコミットフックと組み合わせて使用することで、作業ツリーに関連付けられたあらゆる形式のメタデータ(例:パーミッション/所有権、ACLSなど)を保存および復元することができます。この方法の例については、contrib/hooks/setgitperms.perlを参照してください。</target>
        </trans-unit>
        <trans-unit id="9fae8c19d5ced3830760d386f8db3473a746ea76" translate="yes" xml:space="preserve">
          <source>This hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.</source>
          <target state="translated">このフックは、リポジトリの妥当性チェックを行ったり、前のHEADと異なる場合は自動表示したり、作業ディレクトリのメタデータプロパティを設定したりするために使われます。</target>
        </trans-unit>
        <trans-unit id="89a247d66f7dd9fd927ac160899ee7ad4eefe257" translate="yes" xml:space="preserve">
          <source>This hook can be used to prevent &lt;code&gt;forced&lt;/code&gt; update on certain refs by making sure that the object name is a commit object that is a descendant of the commit object named by the old object name. That is, to enforce a &quot;fast-forward only&quot; policy.</source>
          <target state="translated">このフックを使用して、オブジェクト名が古いオブジェクト名で指定されたコミットオブジェクトの子孫であるコミットオブジェクトであることを確認することにより、特定の参照での &lt;code&gt;forced&lt;/code&gt; 更新を防ぐことができます。つまり、「早送りのみ」のポリシーを適用します。</target>
        </trans-unit>
        <trans-unit id="e2b4b08b5c7d529703ac2e4609fae5478174d015" translate="yes" xml:space="preserve">
          <source>This hook can be used, for example, to run &lt;code&gt;git update-server-info&lt;/code&gt; if the repository is packed and is served via a dumb transport.</source>
          <target state="translated">このフックは、たとえば、リポジトリがパックされ、ダムトランスポートを介して提供される場合に &lt;code&gt;git update-server-info&lt;/code&gt; を実行するために使用できます。</target>
        </trans-unit>
        <trans-unit id="ec8359ca4fe68868d4a094d214fa5c736b07b686" translate="yes" xml:space="preserve">
          <source>This hook does not affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;, as it is called after the real work is done.</source>
          <target state="translated">このフックは、実際の作業が完了した後に呼び出される &lt;code&gt;git receive-pack&lt;/code&gt; 、git receive-packの結果には影響しません。</target>
        </trans-unit>
        <trans-unit id="4f1494681f56d1e644fae421a13f75381d1bf104" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but for each ref to be updated it receives on standard input a line of the format:</source>
          <target state="translated">このフックは受信操作に対して一度だけ実行されます。引数を取りませんが、更新される各 ref に対して、標準入力でフォーマットの行を受け取ります。</target>
        </trans-unit>
        <trans-unit id="1c705c0b531046d9558421e4543f9aca35624390" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but gets the same information as the &lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;pre-receive&lt;/em&gt;&lt;/a&gt; hook does on its standard input.</source>
          <target state="translated">このフックは、受信操作に対して1回実行されます。引数はありませんが、&lt;a href=&quot;#pre-receive&quot;&gt;&lt;em&gt;事前受信&lt;/em&gt;&lt;/a&gt;フックが標準入力で行うのと同じ情報を取得します。</target>
        </trans-unit>
        <trans-unit id="98f6b796f54de07e8019b94d0f551840c498ad05" translate="yes" xml:space="preserve">
          <source>This hook executes once for the receive operation. It takes no arguments, but uses a pkt-line format protocol to communicate with &lt;code&gt;receive-pack&lt;/code&gt; to read commands, push-options and send results. In the following example for the protocol, the letter &lt;code&gt;S&lt;/code&gt; stands for &lt;code&gt;receive-pack&lt;/code&gt; and the letter &lt;code&gt;H&lt;/code&gt; stands for this hook.</source>
          <target state="translated">このフックは、受信操作に対して1回実行されます。引数は取りませんが、pkt-line形式のプロトコルを使用して &lt;code&gt;receive-pack&lt;/code&gt; と通信し、コマンド、プッシュオプションを読み取り、結果を送信します。次のプロトコルの例では、文字 &lt;code&gt;S&lt;/code&gt; は &lt;code&gt;receive-pack&lt;/code&gt; を表し、文字 &lt;code&gt;H&lt;/code&gt; はこのフックを表します。</target>
        </trans-unit>
        <trans-unit id="8f404b0d7afced029532dd1c0ce00c69033fa119" translate="yes" xml:space="preserve">
          <source>This hook is called before any refname is updated and before any fast-forward checks are performed.</source>
          <target state="translated">このフックは refname が更新され、早送りチェックが実行される前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6f4d4e6bc9f3d3e90e8224d9cc9d15607a5f159d" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt;によって呼び出され、プッシュが行われないようにするために使用できます。フックは、宛先リモートの名前と場所を提供する2つのパラメーターで呼び出されます。名前付きリモートが使用されていない場合、両方の値は同じになります。</target>
        </trans-unit>
        <trans-unit id="b761c5f63f99b7c22c6e4ca4e1bd741b6a19c509" translate="yes" xml:space="preserve">
          <source>This hook is called by &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;によって呼び出され、ブランチがリベースされるのを防ぐために使用できます。フックは1つまたは2つのパラメーターで呼び出すことができます。最初のパラメータは、シリーズが分岐した上流です。2番目のパラメーターはリベースされるブランチであり、現在のブランチをリベースする場合は設定されません。</target>
        </trans-unit>
        <trans-unit id="fc84f5afc2cc3712fb061152c42b83b5432e2d28" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes &lt;code&gt;git am&lt;/code&gt; to abort before applying the patch.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。これは、提案されたコミットログメッセージを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、パッチを適用する前に &lt;code&gt;git am&lt;/code&gt; が中止されます。</target>
        </trans-unit>
        <trans-unit id="109f1251e93ab76b92d28a05e1f40ca3ae3e2435" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied and a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。これはパラメーターを取りません。パッチが適用されてコミットが行われた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="31dd1042d3a6d88015bf6a789db56141bf61f664" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt;. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt;によって呼び出されます。パラメータを取らず、パッチが適用された後、コミットが行われる前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4126a7ec7eb0a54d9b99d1f389fd70ce96c40950" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; and &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the command to abort.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;および&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これは、提案されたコミットログメッセージを保持するファイルの名前という単一のパラメーターを取ります。ゼロ以外のステータスで終了すると、コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="977ece26ae3c0446a7497462b09e90162737d6ca" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; right after preparing the default log message, and before the editor is started.</source>
          <target state="translated">このフックは、デフォルトのログメッセージを準備した直後、エディタが起動する前に&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2ae25bad855fc10ca5e955357c713cdbb31a472c" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git commit&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これはパラメーターを取りません。提案されたコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトからゼロ以外のステータスで終了すると、コミットを作成する前に &lt;code&gt;git commit&lt;/code&gt; コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="21226463d529e8f7d5082c27401d959f905ec4d1" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt;. It takes no parameters, and is invoked after a commit is made.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;によって呼び出されます。これはパラメーターをとらず、コミットが行われた後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0a4097349c79cead9de93e647cb9ba47cbed7c91" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, and can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; option. It takes no parameters, and is invoked after the merge has been carried out successfully and before obtaining the proposed commit log message to make a commit. Exiting with a non-zero status from this script causes the &lt;code&gt;git merge&lt;/code&gt; command to abort before creating a commit.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出され、-- &lt;code&gt;--no-verify&lt;/code&gt; オプションでバイパスできます。これはパラメーターをとらず、マージが正常に実行された後、提案されたコミットログメッセージを取得してコミットする前に呼び出されます。このスクリプトからゼロ以外のステータスで終了すると、コミットを作成する前に &lt;code&gt;git merge&lt;/code&gt; コマンドが中止されます。</target>
        </trans-unit>
        <trans-unit id="de911dadfd0a4abc2b13baa4ccbc2ae0aca9f055" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt;, which happens when a &lt;code&gt;git pull&lt;/code&gt; is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of &lt;code&gt;git merge&lt;/code&gt; and is not executed, if the merge failed due to conflicts.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt;によって呼び出されます。これは、ローカルリポジトリで &lt;code&gt;git pull&lt;/code&gt; が行われたときに発生します。フックは単一のパラメーター、つまり、実行中のマージがスカッシュマージであったかどうかを指定するステータスフラグを取ります。競合が原因でマージが失敗した場合、このフックは &lt;code&gt;git merge&lt;/code&gt; の結果に影響を与えることはできず、実行されません。</target>
        </trans-unit>
        <trans-unit id="76961cafe28e294daa6f1b287a02eb4fe4bf07aa" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository, and when the push tries to update the branch that is currently checked out and the &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; configuration variable is set to &lt;code&gt;updateInstead&lt;/code&gt;. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.</source>
          <target state="translated">このフックは、&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;が &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新したとき、およびpushが現在チェックアウトされているブランチと &lt;code&gt;receive.denyCurrentBranch&lt;/code&gt; 構成変数を更新しようとしたときに呼び出されます。 &lt;code&gt;updateInstead&lt;/code&gt; に設定されています。作業ツリーとリモートリポジトリのインデックスに現在チェックアウトされているコミットとの違いがある場合、デフォルトではこのようなプッシュは拒否されます。作業ツリーとインデックスの両方が現在のコミットに一致すると、新しくプッシュされたブランチの先端に一致するように更新されます。このフックは、デフォルトの動作をオーバーライドするために使用されます。</target>
        </trans-unit>
        <trans-unit id="5a56dac625f1205849f2b5f6e3619a708d3ea48e" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. It executes on the remote repository once after all the refs have been updated.</source>
          <target state="translated">このフックは、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新するときに&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。すべての参照が更新された後、リモートリポジトリで1回実行されます。</target>
        </trans-unit>
        <trans-unit id="390ce0821ef413eec43c389641cce2dfc9687135" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before starting to update refs on the remote repository, the pre-receive hook is invoked. Its exit status determines the success or failure of the update.</source>
          <target state="translated">このフックは、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新するときに&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。リモートリポジトリの参照の更新を開始する直前に、事前受信フックが呼び出されます。その終了ステータスは、更新の成功または失敗を決定します。</target>
        </trans-unit>
        <trans-unit id="f508c67d780c6e440d114ab5a4809e8db15887c6" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt; when it reacts to &lt;code&gt;git push&lt;/code&gt; and updates reference(s) in its repository. Just before updating the ref on the remote repository, the update hook is invoked. Its exit status determines the success or failure of the ref update.</source>
          <target state="translated">このフックは、 &lt;code&gt;git push&lt;/code&gt; に反応してリポジトリ内の参照を更新するときに&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。リモートリポジトリのrefを更新する直前に、更新フックが呼び出されます。その終了ステータスは、参照更新の成功または失敗を決定します。</target>
        </trans-unit>
        <trans-unit id="c165f7e2051fecf641e46f5c29ee35090d7d5f24" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt;. If the server has set the multi-valued config variable &lt;code&gt;receive.procReceiveRefs&lt;/code&gt;, and the commands sent to &lt;code&gt;receive-pack&lt;/code&gt; have matching reference names, these commands will be executed by this hook, instead of by the internal &lt;code&gt;execute_commands()&lt;/code&gt; function. This hook is responsible for updating the relevant references and reporting the results back to &lt;code&gt;receive-pack&lt;/code&gt;.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]&lt;/a&gt;によって呼び出されます。サーバーが複数値の構成変数 &lt;code&gt;receive.procReceiveRefs&lt;/code&gt; を設定し、 &lt;code&gt;receive-pack&lt;/code&gt; に送信されるコマンドの参照名が一致する場合、これらのコマンドは、内部の &lt;code&gt;execute_commands()&lt;/code&gt; 関数ではなく、このフックによって実行されます。このフックは、関連する参照を更新し、結果を &lt;code&gt;receive-pack&lt;/code&gt; に報告する役割を果たします。</target>
        </trans-unit>
        <trans-unit id="c94fc31562e49c2e1f57905c2984b3787d6eb579" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt;. It takes a single parameter, the name of the file that holds the e-mail to be sent. Exiting with a non-zero status causes &lt;code&gt;git send-email&lt;/code&gt; to abort before sending any e-mails.</source>
          <target state="translated">このフックは&lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt;によって呼び出されます。これは、送信される電子メールを保持するファイルの名前という単一のパラメーターを取ります。0以外のステータスで終了すると、 &lt;code&gt;git send-email&lt;/code&gt; を送信する前にgit send-emailが中止されます。</target>
        </trans-unit>
        <trans-unit id="898dc345a1faef7e78cc6f07a48d416762cf9e72" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git gc --auto&lt;/code&gt; (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;). It takes no parameter, and exiting with non-zero status from this script causes the &lt;code&gt;git gc --auto&lt;/code&gt; to abort.</source>
          <target state="translated">このフックは &lt;code&gt;git gc --auto&lt;/code&gt; によって呼び出されます（&lt;a href=&quot;git-gc&quot;&gt;git-gc [1]を&lt;/a&gt;参照）。これはパラメーターを取り &lt;code&gt;git gc --auto&lt;/code&gt; このスクリプトからゼロ以外のステータスで終了すると、git gc --autoが異常終了します。</target>
        </trans-unit>
        <trans-unit id="536d2f256146b81297af8f05d9ee07d3c788ff56" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;.</source>
          <target state="translated">このフックは、 &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="db96373c38bd1df6e078c9fa2b6d9e050d469bb3" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. It can be bypassed with the &lt;code&gt;--no-verify&lt;/code&gt; command line option. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="translated">このフックは、 &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。パラメータや標準入力からの入力はありません。このスクリプトをゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。 &lt;code&gt;--no-verify&lt;/code&gt; コマンドラインオプションを使用してバイパスできます。詳細については、 &lt;code&gt;git-p4 submit --help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="fa504b80ab7d4ab7fd02bb1c09f7267f7ffd0b87" translate="yes" xml:space="preserve">
          <source>This hook is invoked by &lt;code&gt;git-p4 submit&lt;/code&gt;. It takes no parameters and nothing from standard input. Exiting with non-zero status from this script prevent &lt;code&gt;git-p4 submit&lt;/code&gt; from launching. Run &lt;code&gt;git-p4 submit --help&lt;/code&gt; for details.</source>
          <target state="translated">このフックは &lt;code&gt;git-p4 submit&lt;/code&gt; によって呼び出されます。これは、パラメーターを取りませんが、標準入力からは何も取りません。このスクリプトからゼロ以外のステータスで終了すると、 &lt;code&gt;git-p4 submit&lt;/code&gt; が起動しなくなります。詳細については、 &lt;code&gt;git-p4 submit --help&lt;/code&gt; を実行してください。</target>
        </trans-unit>
        <trans-unit id="e343164b203dd1de0ba3f9a30c792df16e0f19da" translate="yes" xml:space="preserve">
          <source>This hook is invoked by any Git command that performs reference updates. It executes whenever a reference transaction is prepared, committed or aborted and may thus get called multiple times.</source>
          <target state="translated">このフックは、参照の更新を行う Git コマンドで呼び出されます。このフックは、参照トランザクションが準備されたりコミットされたり中断されたりするたびに実行され、何度もコールされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e8569f58a670ba9d05dfd0c2191295df64e04e73" translate="yes" xml:space="preserve">
          <source>This hook is invoked by commands that rewrite commits (&lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; when called with &lt;code&gt;--amend&lt;/code&gt; and &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;; however, full-history (re)writing tools like &lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import[1]&lt;/a&gt; or &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; typically do not call it!). Its first argument denotes the command it was invoked by: currently one of &lt;code&gt;amend&lt;/code&gt; or &lt;code&gt;rebase&lt;/code&gt;. Further command-dependent arguments may be passed in the future.</source>
          <target state="translated">このフックは、コミットを書き換えるコマンド（&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を &lt;code&gt;--amend&lt;/code&gt; および&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]&lt;/a&gt;で呼び出すと呼び出されますが、&lt;a href=&quot;git-fast-import&quot;&gt;git-fast-import [1]&lt;/a&gt;または&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt;は通常それを呼び出さない！）。最初の引数は、それが呼び出されたコマンドを示します。現在は、 &lt;code&gt;amend&lt;/code&gt; または &lt;code&gt;rebase&lt;/code&gt; のいずれかです。今後、コマンドに依存する引数がさらに渡される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8c8dde02f7fe4fac23930e917fd59c1d03fbfa8b" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;, other than that the hook&amp;rsquo;s exit status becomes the exit status of these two commands.</source>
          <target state="translated">このフックは、ワークツリーを更新した後に&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;または&lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt;が実行されたときに呼び出されます。フックには、前のHEADの参照、新しいHEADの参照（変更されている場合と変更されていない場合があります）、およびチェックアウトがブランチチェックアウト（ブランチの変更、フラグ= 1）であるかどうかを示すフラグの3つのパラメーターが与えられます。ファイルのチェックアウト（インデックスからファイルを取得、flag = 0）。このフックはの結果に影響を与えることができない &lt;code&gt;git switch&lt;/code&gt; や &lt;code&gt;git checkout&lt;/code&gt; フックの終了ステータスは、これら2つのコマンドの終了ステータスになっていること以外に、。</target>
        </trans-unit>
        <trans-unit id="7b20b75526e2af7ef8179932e884a838f68429b3" translate="yes" xml:space="preserve">
          <source>This hook is invoked when a &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; or &lt;a href=&quot;git-switch&quot;&gt;git-switch[1]&lt;/a&gt; is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of &lt;code&gt;git switch&lt;/code&gt; or &lt;code&gt;git checkout&lt;/code&gt;.</source>
          <target state="translated">このフックは、ワークツリーの更新後に&lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt;または&lt;a href=&quot;git-switch&quot;&gt;git-switch [1]&lt;/a&gt;が実行されたときに呼び出されます。フックには3つのパラメーターが指定されています。前のHEADの参照、新しいHEADの参照（変更されている場合と変更されていない場合がある）、およびチェックアウトがブランチチェックアウトであったかどうかを示すフラグ（ブランチの変更、フラグ= 1）またはファイルのチェックアウト（インデックスからファイルを取得、flag = 0）。このフックは &lt;code&gt;git switch&lt;/code&gt; または &lt;code&gt;git checkout&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="fd3ae42761b9b86d30d029aa1493872ff1533f42" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; or &lt;code&gt;.git/hooks/fsmonitor-watchmanv2&lt;/code&gt; depending on the version of the hook to use.</source>
          <target state="translated">このフックは、使用するフックのバージョンに応じて、構成オプション &lt;code&gt;core.fsmonitor&lt;/code&gt; が &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; または &lt;code&gt;.git/hooks/fsmonitor-watchmanv2&lt;/code&gt; に設定されている場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7b0692c459d4a723afc690b678a8556c7e5d3814" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the configuration option &lt;code&gt;core.fsmonitor&lt;/code&gt; is set to &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt;. It takes two arguments, a version (currently 1) and the time in elapsed nanoseconds since midnight, January 1, 1970.</source>
          <target state="translated">このフックは、設定オプション &lt;code&gt;core.fsmonitor&lt;/code&gt; が &lt;code&gt;.git/hooks/fsmonitor-watchman&lt;/code&gt; に設定されている場合に呼び出されます。バージョン（現在は1）と、1970年1月1日の午前0時からの経過ナノ秒単位の時間という2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="1ea8190ee0fad5a3aca31c578a724c322c0d57cb" translate="yes" xml:space="preserve">
          <source>This hook is invoked when the index is written in read-cache.c do_write_locked_index.</source>
          <target state="translated">このフックは、read-cache.c do_write_locked_indexにインデックスが書き込まれたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bbcd7cc3d137fc9e83cb037a7ffe28a3a104cf5b" translate="yes" xml:space="preserve">
          <source>This hook is invoked with the environment variable &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; if the command will not bring up an editor to modify the commit message.</source>
          <target state="translated">このフックは環境変数 &lt;code&gt;GIT_EDITOR=:&lt;/code&gt; 呼び出されます。コマンドがコミットメッセージを変更するためのエディターを起動しない場合。</target>
        </trans-unit>
        <trans-unit id="ddc7ece9286909c0de44abe41d5a762b67552ed5" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git am&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="448e187d53f17c70cda00f92a3ee55c4bde07472" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git commit&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git commit&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="08260832c28c95684a1993d7203db5c6a733006a" translate="yes" xml:space="preserve">
          <source>This hook is meant primarily for notification, and cannot affect the outcome of &lt;code&gt;git receive-pack&lt;/code&gt;.</source>
          <target state="translated">このフックは主に通知用であり、 &lt;code&gt;git receive-pack&lt;/code&gt; の結果に影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="f1b9eafafbdf014b8c082347223fc7e3e439cd3c" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. In addition to the list of revision arguments read from the standard input, pretend as if all refs under &lt;code&gt;refs/&lt;/code&gt; are specified to be included.</source>
          <target state="translated">これは &lt;code&gt;--revs&lt;/code&gt; を意味します。標準入力から読み取られたリビジョン引数のリストに加えて、 &lt;code&gt;refs/&lt;/code&gt; 下のすべてのref が含まれるように指定されているかのように見せかけます。</target>
        </trans-unit>
        <trans-unit id="00f6fe101136dac1c604175fe5bf787266d15317" translate="yes" xml:space="preserve">
          <source>This implies &lt;code&gt;--revs&lt;/code&gt;. When processing the list of revision arguments read from the standard input, limit the objects packed to those that are not already packed.</source>
          <target state="translated">これは &lt;code&gt;--revs&lt;/code&gt; を意味します。標準入力から読み取られたリビジョン引数のリストを処理する場合、パックされるオブジェクトを、まだパックされていないオブジェクトに制限します。</target>
        </trans-unit>
        <trans-unit id="23abf25dbec44cc1a257bc71a457bb760d4a79eb" translate="yes" xml:space="preserve">
          <source>This implies the &lt;code&gt;--topo-order&lt;/code&gt; option by default, but the &lt;code&gt;--date-order&lt;/code&gt; option may also be specified.</source>
          <target state="translated">これが意味 &lt;code&gt;--topo-order&lt;/code&gt; デフォルトでオプションを、しかし &lt;code&gt;--date-order&lt;/code&gt; オプションも指定することができます。</target>
        </trans-unit>
        <trans-unit id="9bafb6d097d43ca4ccca730edb887425acfba8b5" translate="yes" xml:space="preserve">
          <source>This imports the specified depot into &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; in an existing Git repository. The &lt;code&gt;--branch&lt;/code&gt; option can be used to specify a different branch to be used for the p4 content.</source>
          <target state="translated">これにより、指定したデポが既存のGitリポジトリの &lt;code&gt;refs/remotes/p4/master&lt;/code&gt; にインポートされます。 &lt;code&gt;--branch&lt;/code&gt; オプションは、p4のコンテンツに使用される別のブランチを指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="5a7c7788d041aa1a2f51fc279f1f6f7da23ae666" translate="yes" xml:space="preserve">
          <source>This indicates that the helper is able to interact with the remote side using an explicit hash algorithm extension.</source>
          <target state="translated">これは、ヘルパーが明示的なハッシュアルゴリズム拡張を使用してリモート側と対話できることを示しています。</target>
        </trans-unit>
        <trans-unit id="505428074ae07b004fad59f4eaeb272274ac2c6b" translate="yes" xml:space="preserve">
          <source>This information can be used to determine what commit was the tip of a branch &quot;2 days ago&quot;.</source>
          <target state="translated">この情報から、どのコミットが「2日前」のブランチの先端だったのかを判断することができます。</target>
        </trans-unit>
        <trans-unit id="86187244d1368864bf6af8ccb054656e32b6a58b" translate="yes" xml:space="preserve">
          <source>This instructs git svn to recode pathnames to a given encoding. It can be used by windows users and by those who work in non-utf8 locales to avoid corrupted file names with non-ASCII characters. Valid encodings are the ones supported by Perl&amp;rsquo;s Encode module.</source>
          <target state="translated">これはgit svnにパス名を指定されたエンコーディングに再コード化するように指示します。これは、Windowsユーザーおよび非utf8ロケールで作業するユーザーが非ASCII文字を含むファイル名の破損を回避するために使用できます。有効なエンコーディングは、PerlのEncodeモジュールでサポートされているものです。</target>
        </trans-unit>
        <trans-unit id="956c7627c61d83f78ef967d8ba93fedd722fb328" translate="yes" xml:space="preserve">
          <source>This integer config option controls how often the &lt;code&gt;commit-graph&lt;/code&gt; task should be run as part of &lt;code&gt;git maintenance run --auto&lt;/code&gt;. If zero, then the &lt;code&gt;commit-graph&lt;/code&gt; task will not run with the &lt;code&gt;--auto&lt;/code&gt; option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of reachable commits that are not in the commit-graph file is at least the value of &lt;code&gt;maintenance.commit-graph.auto&lt;/code&gt;. The default value is 100.</source>
          <target state="translated">この整数構成オプションは、 &lt;code&gt;git maintenance run --auto&lt;/code&gt; 一部として &lt;code&gt;commit-graph&lt;/code&gt; タスクを実行する頻度を制御します。ゼロの場合、 &lt;code&gt;commit-graph&lt;/code&gt; タスクは &lt;code&gt;--auto&lt;/code&gt; オプションを指定して実行されません。負の値を指定すると、タスクは毎回実行されます。それ以外の場合、正の値は、commit-graphファイルにない到達可能なコミットの数が少なくとも &lt;code&gt;maintenance.commit-graph.auto&lt;/code&gt; の値であるときにコマンドを実行する必要があることを意味します。デフォルト値は100です。</target>
        </trans-unit>
        <trans-unit id="0909b4167b1b6cfc93db8cafdc74248d3901c792" translate="yes" xml:space="preserve">
          <source>This is a deprecated synonym for &lt;code&gt;repack.writeBitmaps&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;repack.writeBitmaps&lt;/code&gt; の非推奨の同義語です。</target>
        </trans-unit>
        <trans-unit id="0663f3ff3f5e643bb58ee19e6a44fd14680c40d5" translate="yes" xml:space="preserve">
          <source>This is a login shell for SSH accounts to provide restricted Git access. It permits execution only of server-side Git commands implementing the pull/push functionality, plus custom commands present in a subdirectory named &lt;code&gt;git-shell-commands&lt;/code&gt; in the user&amp;rsquo;s home directory.</source>
          <target state="translated">これは、SSHアカウント用のログインシェルであり、制限されたGitアクセスを提供します。プル/プッシュ機能を実装するサーバー側のGit &lt;code&gt;git-shell-commands&lt;/code&gt; と、ユーザーのホームディレクトリのgit-shell-commandsという名前のサブディレクトリにあるカスタムコマンドの実行のみを許可します。</target>
        </trans-unit>
        <trans-unit id="bb9b1700493e02e1c42808252a2a81a90b07f06f" translate="yes" xml:space="preserve">
          <source>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</source>
          <target state="translated">これは、修正された再帰的な戦略です。木AとBをマージするとき、BがAのサブツリーに対応する場合、Bはまず、同じレベルの木を読むのではなく、Aの木構造に一致するように調整されます。この調整は共通の祖先木に対しても行われます。</target>
        </trans-unit>
        <trans-unit id="9ebc5555eb7976dd79439890cefef50e4fca7252" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable that defines reference prefixes to match the commands in &lt;code&gt;receive-pack&lt;/code&gt;. Commands matching the prefixes will be executed by an external hook &quot;proc-receive&quot;, instead of the internal &lt;code&gt;execute_commands&lt;/code&gt; function. If this variable is not defined, the &quot;proc-receive&quot; hook will never be used, and all commands will be executed by the internal &lt;code&gt;execute_commands&lt;/code&gt; function.</source>
          <target state="translated">これは、 &lt;code&gt;receive-pack&lt;/code&gt; 内のコマンドに一致する参照プレフィックスを定義する複数値の変数です。プレフィックスに一致するコマンドは、内部の &lt;code&gt;execute_commands&lt;/code&gt; 関数ではなく、外部フック「proc-receive」によって実行されます。この変数が定義されていない場合、「proc-receive」フックは使用されず、すべてのコマンドは内部の &lt;code&gt;execute_commands&lt;/code&gt; 関数によって実行されます。</target>
        </trans-unit>
        <trans-unit id="94478372a5a22fcace1286299ca604a903c0373f" translate="yes" xml:space="preserve">
          <source>This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. &lt;code&gt;.git/config&lt;/code&gt; in a repository) to clear the values inherited from a lower priority configuration files (e.g. &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;).</source>
          <target state="translated">これは複数の値を持つ変数であり、空の値を優先度の高い設定ファイル（リポジトリの &lt;code&gt;.git/config&lt;/code&gt; など)で使用して、優先度の低い設定ファイル（ &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; ）から継承した値をクリアできます。。</target>
        </trans-unit>
        <trans-unit id="9800795b0feafe785919ba7eb03d901a5af98b6d" translate="yes" xml:space="preserve">
          <source>This is a potentially &lt;em&gt;dangerous&lt;/em&gt; mode of operation. It rewrites history, which does not bode well when you published that history already. Do &lt;strong&gt;not&lt;/strong&gt; use this option unless you have read &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt; carefully.</source>
          <target state="translated">これは潜在的に&lt;em&gt;危険な&lt;/em&gt;操作モードです。それは歴史を書き直しますが、あなたがすでにその歴史を公開したとき、それは良い前兆ではありません。&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]を&lt;/a&gt;注意深く読んでいない限り、このオプションを使用し&lt;strong&gt;ないで&lt;/strong&gt;ください。</target>
        </trans-unit>
        <trans-unit id="7393bcbfeab09d874001a82423e807bb091915e9" translate="yes" xml:space="preserve">
          <source>This is a quick summary of the major commands; the previous chapters explain how these work in more detail.</source>
          <target state="translated">これは主なコマンドの簡単な要約で、前の章では、これらのコマンドがどのように動作するかをより詳細に説明しています。</target>
        </trans-unit>
        <trans-unit id="e6b70a1472f7c00669a56c92197ed227d5be5866" translate="yes" xml:space="preserve">
          <source>This is a shorthand for &quot;--pretty=oneline --abbrev-commit&quot; used together.</source>
          <target state="translated">これは、&quot;--pretty=oneline --abbrev-commit &quot;と一緒に使われる速記法です。</target>
        </trans-unit>
        <trans-unit id="18c84bcba1b16c1ac1cf14d08c1c68d27e4599a1" translate="yes" xml:space="preserve">
          <source>This is a total waste of time and effort on a filesystem that orders data writes properly, but can be useful for filesystems that do not use journalling (traditional UNIX filesystems) or that only journal metadata and not file contents (OS X&amp;rsquo;s HFS+, or Linux ext3 with &quot;data=writeback&quot;).</source>
          <target state="translated">これは、データの書き込みを適切に順序付けるファイルシステムで時間と労力を浪費することですが、ジャーナリングを使用しないファイルシステム（従来のUNIXファイルシステム）またはジャーナルのメタデータのみを使用し、ファイルの内容を使用しない（OS XのHFS +、またはLinux） 「data = writeback」を使用したext3）。</target>
        </trans-unit>
        <trans-unit id="554ab63db8a74b017dac093a21d0557d821484db" translate="yes" xml:space="preserve">
          <source>This is a toy format. The current time and time zone of this system is always copied into the identity string at the time it is being created by fast-import. There is no way to specify a different time or time zone.</source>
          <target state="translated">これはおもちゃのフォーマットです。このシステムの現在の時刻とタイムゾーンは、fast-importで作成されている時点で常にID文字列にコピーされています。別の時間帯やタイムゾーンを指定する方法はありません。</target>
        </trans-unit>
        <trans-unit id="bc30d84517d5f02b55a3811eba6ffba9e6c0e4f0" translate="yes" xml:space="preserve">
          <source>This is a work in progress.</source>
          <target state="translated">これは作業中のものです。</target>
        </trans-unit>
        <trans-unit id="cdf94d586f4e34dd4d9c37fe3a3dd3a90ee94301" translate="yes" xml:space="preserve">
          <source>This is an alias for &lt;code&gt;--group=committer&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;--group=committer&lt;/code&gt; のエイリアスです。</target>
        </trans-unit>
        <trans-unit id="3e77feb91313add3d7aff3491329020f7cd2b88e" translate="yes" xml:space="preserve">
          <source>This is an easy way to check out a particular version without having to make up a name for the new branch. You can still create a new branch (or tag) for this version later if you decide to.</source>
          <target state="translated">これは、新しいブランチの名前を作らなくても、特定のバージョンをチェックアウトするための簡単な方法です。このバージョン用の新しいブランチ (またはタグ)を後で作成することができます。</target>
        </trans-unit>
        <trans-unit id="86d03a90949a936d437c536daea902a3352ca567" translate="yes" xml:space="preserve">
          <source>This is because &lt;code&gt;rebase&lt;/code&gt; is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as &lt;code&gt;ours&lt;/code&gt; (i.e. &quot;our shared canonical history&quot;), while what you did on your side branch as &lt;code&gt;theirs&lt;/code&gt; (i.e. &quot;one contributor&amp;rsquo;s work on top of it&quot;).</source>
          <target state="translated">これは、 &lt;code&gt;rebase&lt;/code&gt; がリモートでの履歴を共有の標準的なものとして扱い、リベースしているブランチで行われた作業を統合されるサードパーティの作業として扱い、一時的に役割を引き受けるワークフローで使用されるためですリベース中の正規履歴のキーパーの。正規の歴史の番人として、あなたにリモートからの履歴を表示する必要が &lt;code&gt;ours&lt;/code&gt; 、あなたの側枝に何をしたかしながら、（つまり、「私たちの共有正規の歴史」）として &lt;code&gt;theirs&lt;/code&gt; （すなわち、「その上に1つの貢献の仕事」 ）。</target>
        </trans-unit>
        <trans-unit id="95a20fc02bc3cd4094f682df1ea1f755e327d688" translate="yes" xml:space="preserve">
          <source>This is called a &lt;code&gt;hunk header&lt;/code&gt;. The &quot;TEXT&quot; portion is by default a line that begins with an alphabet, an underscore or a dollar sign; this matches what GNU &lt;code&gt;diff -p&lt;/code&gt; output uses. This default selection however is not suited for some contents, and you can use a customized pattern to make a selection.</source>
          <target state="translated">これは、 &lt;code&gt;hunk header&lt;/code&gt; と呼ばれます。「テキスト」の部分は、デフォルトでは、アルファベット、アンダースコア、またはドル記号で始まる行です。これは、GNU &lt;code&gt;diff -p&lt;/code&gt; 出力が使用するものと一致します。ただし、このデフォルトの選択は一部のコンテンツには適しておらず、カスタマイズされたパターンを使用して選択を行うことができます。</target>
        </trans-unit>
        <trans-unit id="85de32d717921314245903361d4033db93188253" translate="yes" xml:space="preserve">
          <source>This is default name of common system-wide configuration file.</source>
          <target state="translated">これは、システム全体に共通の設定ファイルのデフォルト名です。</target>
        </trans-unit>
        <trans-unit id="8fabc38be889239efec56b25dba57afb3b308b5b" translate="yes" xml:space="preserve">
          <source>This is default name of fallback system-wide configuration file. This file is used only if per-instance configuration variable is not found.</source>
          <target state="translated">これはフォールバックシステム全体の設定ファイルのデフォルト名です。このファイルは、インスタンスごとの設定変数が見つからない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e13cac7eff842df90d7031a70a4150ab3a8cdbc2" translate="yes" xml:space="preserve">
          <source>This is default name of per-instance configuration file. The format of this file is described above.</source>
          <target state="translated">これは、インスタンス単位の設定ファイルのデフォルト名です。このファイルのフォーマットは上述の通りです。</target>
        </trans-unit>
        <trans-unit id="2ac99b50de3702f5d543e44c6b1ddc55b08d7471" translate="yes" xml:space="preserve">
          <source>This is designed to be as compact as possible.</source>
          <target state="translated">できるだけコンパクトになるように設計されています。</target>
        </trans-unit>
        <trans-unit id="d4d30dfd1772dd73a7b51cd065bd14037d1044bf" translate="yes" xml:space="preserve">
          <source>This is done to prevent you from losing your work-in-progress changes, and mixing your random changes in an unrelated merge commit. To illustrate, suppose you start from what has been committed last to your repository:</source>
          <target state="translated">これは、進行中の変更を失ったり、無関係なマージコミットにランダムな変更が混ざったりするのを防ぐためです。説明するために、リポジトリに最後にコミットされたものから始めるとします。</target>
        </trans-unit>
        <trans-unit id="c5483036881ec5a0c568843866e403149495194d" translate="yes" xml:space="preserve">
          <source>This is how you read a blob (actually, not only a blob, but any type of object). To know how the function &lt;code&gt;read_object_with_reference()&lt;/code&gt; actually works, find the source code for it (something like &lt;code&gt;git grep
read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; in the Git repository), and read the source.</source>
          <target state="translated">これは、ブロブ（実際にはブロブだけでなく、あらゆるタイプのオブジェクト）を読み取る方法です。関数 &lt;code&gt;read_object_with_reference()&lt;/code&gt; が実際にどのように機能するかを知るには、そのソースコード（Gitリポジトリの &lt;code&gt;git grep read_object_with | grep &quot;:[a-z]&quot;&lt;/code&gt; ）を見つけてソースを読み取ります。</target>
        </trans-unit>
        <trans-unit id="d94f65e687e225292db2cabccebd8f5b3adaa1d5" translate="yes" xml:space="preserve">
          <source>This is ideally suited for read-only updates, i.e., pulling from Git repositories.</source>
          <target state="translated">これは、読み取り専用の更新、つまり Git リポジトリからの引っ張り出しに最適です。</target>
        </trans-unit>
        <trans-unit id="4f74abb17322f51c4e08c52446429282a69cbb4c" translate="yes" xml:space="preserve">
          <source>This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset.</source>
          <target state="translated">これは、テストスイートでのみ使用することを意図しています。これにより、生成されたパックインデックスのバージョンを強制的に変更したり、 指定したオフセットよりも上に位置するオブジェクトに対して 64 ビットのインデックスエントリを強制的に追加したりすることができます。</target>
        </trans-unit>
        <trans-unit id="8180429180a5d33dfa16e7d2805d2ac9f53f061d" translate="yes" xml:space="preserve">
          <source>This is just to get you into the groove for the most libified part of Git: the revision walker.</source>
          <target state="translated">これは、Git の最も解放された部分であるリビジョンウォーカーのためのものです。</target>
        </trans-unit>
        <trans-unit id="dce30f3fbb0be29025f159d55505215087cce86b" translate="yes" xml:space="preserve">
          <source>This is known to &lt;code&gt;range-diff&lt;/code&gt; as &quot;dual coloring&quot;. Use &lt;code&gt;--no-dual-color&lt;/code&gt; to revert to color all lines according to the outer diff markers (and completely ignore the inner diff when it comes to color).</source>
          <target state="translated">これは&quot;dual coloring&quot;として &lt;code&gt;range-diff&lt;/code&gt; として知られています。 &lt;code&gt;--no-dual-color&lt;/code&gt; を使用して、外側のdiffマーカーに従ってすべての線の色を元に戻します（色に関しては、内側のdiffを完全に無視します）。</target>
        </trans-unit>
        <trans-unit id="51ecbd5eaeeeee461a4969f3b0cb27dc975ebc23" translate="yes" xml:space="preserve">
          <source>This is made much worse if many files have to be fixed to resolve conflicts. That&amp;rsquo;s why such merges are called &quot;evil merges&quot;. They can make regressions very difficult to track down. It can even be misleading to know the first bad commit if it happens to be such a merge, because people might think that the bug comes from bad conflict resolution when it comes from a semantic change in one branch.</source>
          <target state="translated">競合を解決するために多くのファイルを修正する必要がある場合、これはさらに悪化します。そのため、このようなマージは「悪のマージ」と呼ばれます。彼らは回帰を追跡することを非常に困難にすることができます。1つのブランチでのセマンティックの変更に起因するバグは、不適切な競合の解決によるものであると人々が考える可能性があるため、このようなマージである場合、最初の不良コミットを知ることは誤解を招く可能性さえあります。</target>
        </trans-unit>
        <trans-unit id="2742189647afc1dbda2e1e2ecc6c9303cbb2d70b" translate="yes" xml:space="preserve">
          <source>This is meant to be used by higher level scripts to compute merge results outside of the index, and stuff the results back into the index. For this reason, the output from the command omits entries that match the &amp;lt;branch1&amp;gt; tree.</source>
          <target state="translated">これは、より高いレベルのスクリプトがインデックス外のマージ結果を計算し、結果をインデックスに詰め込むために使用されることを意図しています。このため、コマンドからの出力では、&amp;lt;branch1&amp;gt;ツリーに一致するエントリが省略されています。</target>
        </trans-unit>
        <trans-unit id="9ccf843e585a34e60ae505f61685a10813c9c88a" translate="yes" xml:space="preserve">
          <source>This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before &quot;reset&quot;.</source>
          <target state="translated">これは、コミットした内容が不完全であったことを思い出したときや、コミットメッセージのスペルを間違えたとき、あるいはその両方の場合によく行われます。作業ツリーを &quot;reset&quot; 前の状態に戻します。</target>
        </trans-unit>
        <trans-unit id="efff48b2c5bed4c5ab6435b6d058280a53664967" translate="yes" xml:space="preserve">
          <source>This is not a command the end user would want to run. Ever. This documentation is meant for people who are studying the Porcelain-ish scripts and/or are writing new ones.</source>
          <target state="translated">これはエンドユーザーが実行したいコマンドではありません。絶対に。このドキュメントは、Porcelain-ishなスクリプトを研究している人や、新しいスクリプトを書いている人のためのものです。</target>
        </trans-unit>
        <trans-unit id="4c9e09ba77ce1340a426d6ae669add42a4fe4542" translate="yes" xml:space="preserve">
          <source>This is not a real filter executed for each commit but a one time setup just before the loop. Therefore no commit-specific variables are defined yet. Functions or variables defined here can be used or modified in the following filter steps except the commit filter, for technical reasons.</source>
          <target state="translated">これはコミットごとに実行されるフィルタではなく、ループの直前に一度だけ設定されるものです。したがって、コミット固有の変数はまだ定義されていません。ここで定義されている関数や変数は、技術的な理由から、コミットフィルタ以外の以下のフィルタステップで使用したり変更したりすることができます。</target>
        </trans-unit>
        <trans-unit id="ad1d1c10cd51125ef48d021d8c7283be0413a66d" translate="yes" xml:space="preserve">
          <source>This is not hard to understand, as soon as you realize that Git simply never knows (or cares) about files that it is not told about explicitly. Git will never go &lt;strong&gt;looking&lt;/strong&gt; for files to compare, it expects you to tell it what the files are, and that&amp;rsquo;s what the index is there for.</source>
          <target state="translated">これは、Gitが明示的に通知されていないファイルについて単に知らない（または気にしない）だけだと気づいたらすぐに理解できます。Gitは比較するファイルを&lt;strong&gt;探し&lt;/strong&gt;に行くことは決してありません。ファイルが何であるかを教えてくれることを期待し、それがインデックスの目的です。</target>
        </trans-unit>
        <trans-unit id="0273358cae89a5a683cca4bca340f2d1ab3cc600" translate="yes" xml:space="preserve">
          <source>This is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with &lt;code&gt;-&lt;/code&gt; will remove it from the existing list.</source>
          <target state="translated">これは、完了したコマンドのリストにコマンドを追加または削除するためにgit-completion.bashによってのみ使用されます。通常、磁器コマンドといくつかの選択コマンドのみが完了します。この変数には、スペースで区切ってコマンドを追加できます。コマンドの前に &lt;code&gt;-&lt;/code&gt; を付けると、既存のリストから削除されます。</target>
        </trans-unit>
        <trans-unit id="fcaf558e1ca35a6c93dcb363081455cef6ced8a0" translate="yes" xml:space="preserve">
          <source>This is only valid for &amp;lt;end&amp;gt; and will specify a number of lines before or after the line given by &amp;lt;start&amp;gt;.</source>
          <target state="translated">これは&amp;lt;end&amp;gt;にのみ有効で、&amp;lt;start&amp;gt;で指定された行の前後の行数を指定します。</target>
        </trans-unit>
        <trans-unit id="1b0501180252ff128dca83458515deca695a7ecc" translate="yes" xml:space="preserve">
          <source>This is optional and is only searched when &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; is present in $GIT_DIR/config.</source>
          <target state="translated">これはオプションであり、 &lt;code&gt;extensions.worktreeConfig&lt;/code&gt; が$ GIT_DIR / configにある場合にのみ検索されます。</target>
        </trans-unit>
        <trans-unit id="4306207006bf4fdd2134f4efea5f0d698d2c1f81" translate="yes" xml:space="preserve">
          <source>This is particularly true when passing in diff options. Currently some options like &lt;code&gt;--stat&lt;/code&gt; can, as an emergent effect, produce output that&amp;rsquo;s quite useless in the context of &lt;code&gt;range-diff&lt;/code&gt;. Future versions of &lt;code&gt;range-diff&lt;/code&gt; may learn to interpret such options in a manner specific to &lt;code&gt;range-diff&lt;/code&gt; (e.g. for &lt;code&gt;--stat&lt;/code&gt; producing human-readable output which summarizes how the diffstat changed).</source>
          <target state="translated">これは、diffオプションを渡すときに特に当てはまります。現在、-- &lt;code&gt;--stat&lt;/code&gt; ようないくつかのオプションは、緊急効果として、 &lt;code&gt;range-diff&lt;/code&gt; のコンテキストではまったく役に立たない出力を生成する可能性があります。 &lt;code&gt;range-diff&lt;/code&gt; の将来のバージョンでは、そのようなオプションを &lt;code&gt;range-diff&lt;/code&gt; に固有の方法で解釈することを学習する可能性があります（たとえば、 &lt;code&gt;--stat&lt;/code&gt; がdiffstatの変更方法を要約する人間が読める出力を生成する場合）。</target>
        </trans-unit>
        <trans-unit id="c2dfec9fbb580524d9c87ce7e3303a7b47cc295d" translate="yes" xml:space="preserve">
          <source>This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging.</source>
          <target state="translated">これは、転送中の報告をスクエルチするために基礎となる git-fetch と、マージ中の出力をスクエルチするために基礎となる git-merge の両方に渡されます。</target>
        </trans-unit>
        <trans-unit id="3d17e8f742373c8bbf1871e58142a3d3c4b1c09b" translate="yes" xml:space="preserve">
          <source>This is per-repository enhancement / version of global prefix-based &lt;code&gt;@git_base_url_list&lt;/code&gt; gitweb configuration variable (see &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;).</source>
          <target state="translated">これは、リポジトリごとの拡張/グローバルプレフィックスベースの &lt;code&gt;@git_base_url_list&lt;/code&gt; gitweb構成変数のバージョンです（&lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a7bcc6783fe2c533eb40b84879a83d32f4d95dc9" translate="yes" xml:space="preserve">
          <source>This is similar to --symbolic, but it omits input that are not refs (i.e. branch or tag names; or more explicitly disambiguating &quot;heads/master&quot; form, when you want to name the &quot;master&quot; branch when there is an unfortunately named tag &quot;master&quot;), and show them as full refnames (e.g. &quot;refs/heads/master&quot;).</source>
          <target state="translated">これは -symbolic と似ていますが、refs ではない入力(すなわちブランチ名やタグ名;より明示的に &quot;head/master&quot; の形式を曖昧にするために、不幸にも &quot;master&quot; という名前のタグがある場合に &quot;master&quot; ブランチに名前を付けたい場合など)を省略し、完全な refnames (例えば &quot;refs/heads/master&quot;)として表示します。</target>
        </trans-unit>
        <trans-unit id="4cae7dda407705febf1be1d8f0d77956238a429a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;info/grafts&lt;/code&gt; but is internally used and maintained by shallow clone mechanism. See &lt;code&gt;--depth&lt;/code&gt; option to &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; and &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;. This file is ignored if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/shallow&quot; will be used instead.</source>
          <target state="translated">これは &lt;code&gt;info/grafts&lt;/code&gt; に似ていますが、内部的に使用され、浅いクローンメカニズムによって維持されます。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;および&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]の&lt;/a&gt; &lt;code&gt;--depth&lt;/code&gt; オプションを参照してください。$ GIT_COMMON_DIRが設定されており、代わりに「$ GIT_COMMON_DIR / shallow」が使用される場合、このファイルは無視されます。</target>
        </trans-unit>
        <trans-unit id="44c5e44a5b0e8e88feba4a9ab4b3411e28cf0521" translate="yes" xml:space="preserve">
          <source>This is similar to the previous mode, but lets you use the interactive interface to show the &quot;diff&quot; output and choose which hunks to use in the result. See below for the description of &lt;code&gt;--patch&lt;/code&gt; option.</source>
          <target state="translated">これは前のモードと似ていますが、インタラクティブインターフェイスを使用して「diff」出力を表示し、結果で使用するハンクを選択できます。 &lt;code&gt;--patch&lt;/code&gt; オプションの説明については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="6d4677f97f18bb53a7088b838331f1fec5e57df8" translate="yes" xml:space="preserve">
          <source>This is synonymous to the earlier form (without the &quot;..&quot;) for viewing the changes between two arbitrary &amp;lt;commit&amp;gt;. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.</source>
          <target state="translated">これは、2つの任意の&amp;lt;commit&amp;gt;間の変更を表示するための以前の形式（「..」なし）と同義です。片側の&amp;lt;commit&amp;gt;を省略すると、代わりにHEADを使用した場合と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="4054020991b3f63ee43241d99b871a192e5f7888" translate="yes" xml:space="preserve">
          <source>This is synonymous to the previous form. If &amp;lt;commit&amp;gt; on one side is omitted, it will have the same effect as using HEAD instead.</source>
          <target state="translated">これは前のフォームと同義です。一方の&amp;lt;commit&amp;gt;を省略すると、代わりにHEADを使用した場合と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="75478eb48b06b2098532610f52369c54c5a35766" translate="yes" xml:space="preserve">
          <source>This is the Git native format and is &lt;code&gt;&amp;lt;time&amp;gt; SP &amp;lt;offutc&amp;gt;&lt;/code&gt;. It is also fast-import&amp;rsquo;s default format, if --date-format was not specified.</source>
          <target state="translated">これはGitネイティブ形式であり、 &lt;code&gt;&amp;lt;time&amp;gt; SP &amp;lt;offutc&amp;gt;&lt;/code&gt; です。--date-formatが指定されていない場合、これはfast-importのデフォルト形式でもあります。</target>
        </trans-unit>
        <trans-unit id="6bd79ba5c8340a61cc49527317aae865e2230698" translate="yes" xml:space="preserve">
          <source>This is the filter for performing the commit. If this filter is specified, it will be called instead of the &lt;code&gt;git commit-tree&lt;/code&gt; command, with arguments of the form &quot;&amp;lt;TREE_ID&amp;gt; [(-p &amp;lt;PARENT_COMMIT_ID&amp;gt;)&amp;hellip;​]&quot; and the log message on stdin. The commit id is expected on stdout.</source>
          <target state="translated">これは、コミットを実行するためのフィルターです。このフィルターを指定すると、「&amp;lt;TREE_ID&amp;gt; [（-p &amp;lt;PARENT_COMMIT_ID&amp;gt;）&amp;hellip;]」という形式の引数とstdinのログメッセージを使用して、 &lt;code&gt;git commit-tree&lt;/code&gt; コマンドの代わりに呼び出されます。コミットIDはstdoutで予期されています。</target>
        </trans-unit>
        <trans-unit id="ab02ed108f018595c9832dcfce47c6a593278667" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting tag names. When passed, it will be called for every tag ref that points to a rewritten object (or to a tag object which points to a rewritten object). The original tag name is passed via standard input, and the new tag name is expected on standard output.</source>
          <target state="translated">これは、タグ名を書き換えるためのフィルタです。渡されると、書き換えられたオブジェクトを指す(または書き換えられたオブジェクトを指すタグオブジェクトを指す)タグrefごとに呼び出されます。元のタグ名は標準入力で渡され、標準出力では新しいタグ名が期待されます。</target>
        </trans-unit>
        <trans-unit id="ec46b5cef98509f43f653471ea24de2e709b0b36" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the commit messages. The argument is evaluated in the shell with the original commit message on standard input; its standard output is used as the new commit message.</source>
          <target state="translated">これはコミットメッセージを書き換えるためのフィルタです。引数は、標準入力の元のコミットメッセージとともにシェルで評価され、その標準出力が新しいコミットメッセージとして使用されます。</target>
        </trans-unit>
        <trans-unit id="baaf77805fbcb910ae11f451b39d9e38daaa6669" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the commit&amp;rsquo;s parent list. It will receive the parent string on stdin and shall output the new parent string on stdout. The parent string is in the format described in &lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree[1]&lt;/a&gt;: empty for the initial commit, &quot;-p parent&quot; for a normal commit and &quot;-p parent1 -p parent2 -p parent3 &amp;hellip;​&quot; for a merge commit.</source>
          <target state="translated">これは、コミットの親リストを書き換えるためのフィルターです。stdinで親文字列を受け取り、stdoutで新しい親文字列を出力します。親文字列は&lt;a href=&quot;git-commit-tree&quot;&gt;git-commit-tree [1]で&lt;/a&gt;説明されている形式です。最初のコミットの場合は空、通常のコミットの場合は「-p parent」、マージの場合は「-p parent1 -p parent2 -p parent3&amp;hellip;」コミット。</target>
        </trans-unit>
        <trans-unit id="ed6796eee1e84719fc79503aec05a2585b0a98ee" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the index. It is similar to the tree filter but does not check out the tree, which makes it much faster. Frequently used with &lt;code&gt;git rm --cached
--ignore-unmatch ...&lt;/code&gt;, see EXAMPLES below. For hairy cases, see &lt;a href=&quot;git-update-index&quot;&gt;git-update-index[1]&lt;/a&gt;.</source>
          <target state="translated">インデックスを書き換えるためのフィルターです。これはツリーフィルターに似ていますが、ツリーをチェックアウトしないため、処理速度が大幅に向上します。 &lt;code&gt;git rm --cached --ignore-unmatch ...&lt;/code&gt; で頻繁に使用されます。以下の例を参照してください。毛深いケースについては、&lt;a href=&quot;git-update-index&quot;&gt;git-update-index [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="84464b13412e29584cb64fc663c003212ddd470c" translate="yes" xml:space="preserve">
          <source>This is the filter for rewriting the tree and its contents. The argument is evaluated in shell with the working directory set to the root of the checked out tree. The new tree is then used as-is (new files are auto-added, disappeared files are auto-removed - neither .gitignore files nor any other ignore rules &lt;strong&gt;HAVE ANY EFFECT&lt;/strong&gt;!).</source>
          <target state="translated">これは、ツリーとその内容を書き換えるためのフィルターです。引数はシェルで評価され、作業ディレクトリはチェックアウトされたツリーのルートに設定されます。新しいツリーは、（ - .gitignoreファイルや他でもないが、ルールは無視し、新しいファイルは、自動的に追加されたファイルは自動削除されている姿を消し、そのまま使用されて&lt;strong&gt;何の効果もあり&lt;/strong&gt;！）。</target>
        </trans-unit>
        <trans-unit id="ac6e8f6a01875184858c8585102e8f6aa273aee7" translate="yes" xml:space="preserve">
          <source>This is the format defined by the initial version of git, including but not limited to the format of the repository directory, the repository configuration file, and the object and ref storage. Specifying the complete behavior of git is beyond the scope of this document.</source>
          <target state="translated">これは、git の初期バージョンで定義された形式で、リポジトリディレクトリの形式、リポジトリ設定ファイルの形式、オブジェクトや ref の保存方法などが含まれますが、これらに限定されません。git の完全な動作を指定することは、このドキュメントの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="53064adeec7c86c12f0de7129be2018180dbdde8" translate="yes" xml:space="preserve">
          <source>This is the instruction format to copy a byte range from the source object. It encodes the offset to copy from and the number of bytes to copy. Offset and size are in little-endian order.</source>
          <target state="translated">コピー元のオブジェクトからバイト範囲をコピーする命令形式です。コピー元のオフセットとコピーするバイト数をエンコードします。オフセットとサイズはリトルエンディアン順です。</target>
        </trans-unit>
        <trans-unit id="7c56810b4cb2a212f096564a869dc50ed111eb3c" translate="yes" xml:space="preserve">
          <source>This is the instruction reserved for future expansion.</source>
          <target state="translated">これは将来の拡張のために予約された命令です。</target>
        </trans-unit>
        <trans-unit id="2ac15a186ae4c1add6605d649b034295db99bef1" translate="yes" xml:space="preserve">
          <source>This is the instruction to construct target object without the base object. The following data is appended to the target object. The first seven bits of the first octet determines the size of data in bytes. The size must be non-zero.</source>
          <target state="translated">ベースとなるオブジェクトを持たずにターゲットオブジェクトを構築する命令です。ターゲットオブジェクトには次のデータが付加されます。最初のオクテットの最初の7ビットは、データのサイズをバイト単位で決定します。サイズは0以外でなければなりません。</target>
        </trans-unit>
        <trans-unit id="109ca8035c1b87bb820c08a28a9de7b34fde1bb6" translate="yes" xml:space="preserve">
          <source>This is the opposite of &lt;code&gt;ours&lt;/code&gt;; note that, unlike &lt;code&gt;ours&lt;/code&gt;, there is no &lt;code&gt;theirs&lt;/code&gt; merge strategy to confuse this merge option with.</source>
          <target state="translated">これは &lt;code&gt;ours&lt;/code&gt; の反対です。 &lt;code&gt;ours&lt;/code&gt; とは異なり、このマージオプションを混同する &lt;code&gt;theirs&lt;/code&gt; マージ戦略がないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a470bc42a7932d13fef06a087064186d12eef547" translate="yes" xml:space="preserve">
          <source>This is the preferred method.</source>
          <target state="translated">これが好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="d5ae5cf60359e7831f40d915d7567f63dc115a19" translate="yes" xml:space="preserve">
          <source>This is the same &lt;code&gt;git read-tree&lt;/code&gt; command we have already seen, but it takes three trees, unlike previous examples. This reads the contents of each tree into different &lt;code&gt;stage&lt;/code&gt; in the index file (the first tree goes to stage 1, the second to stage 2, etc.). After reading three trees into three stages, the paths that are the same in all three stages are &lt;code&gt;collapsed&lt;/code&gt; into stage 0. Also paths that are the same in two of three stages are collapsed into stage 0, taking the SHA-1 from either stage 2 or stage 3, whichever is different from stage 1 (i.e. only one side changed from the common ancestor).</source>
          <target state="translated">これはすでに見た &lt;code&gt;git read-tree&lt;/code&gt; コマンドと同じですが、前の例とは異なり、3つのツリーが必要です。これにより、各ツリーの内容がインデックスファイルの異なる &lt;code&gt;stage&lt;/code&gt; に読み込まれます（最初のツリーはステージ1に、2番目のツリーはステージ2に、など）。3つのツリーを3つのステージに読み込んだ後、3つのステージすべてで同じパスがステージ0に &lt;code&gt;collapsed&lt;/code&gt; れます。また、3つのステージのうち2つで同じパスがステージ0に折りたたまれ、SHA-1がいずれかのステージ2から取得されますまたはステージ3、つまりステージ1とは異なる方（つまり、共通の祖先から片側のみが変更された場合）。</target>
        </trans-unit>
        <trans-unit id="d9a78198f4c718b4aad0f141375d5823cd8e39e3" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;gitdir&lt;/code&gt; except that matching is done case-insensitively (e.g. on case-insensitive file systems)</source>
          <target state="translated">これは &lt;code&gt;gitdir&lt;/code&gt; と同じですが、照合は大文字と小文字を区別せずに行われます（たとえば、大文字と小文字を区別しないファイルシステム）。</target>
        </trans-unit>
        <trans-unit id="6d8ef8c3ff85a1d3362ff60dea809d4867db08e2" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;raw&lt;/code&gt; except that no sanity checks on the numeric epoch and local offset are performed. This can be useful when trying to filter or import an existing history with e.g. bogus timezone values.</source>
          <target state="translated">これは、数値エポックとローカルオフセットのサニティチェックが実行されないことを除いて、 &lt;code&gt;raw&lt;/code&gt; と同じです。これは、偽のタイムゾーン値などを使用して既存の履歴をフィルタリングまたはインポートしようとする場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3d8eaa3e252f616f4794342341d2f4ec065a52c7" translate="yes" xml:space="preserve">
          <source>This is the standard email format as described by RFC 2822.</source>
          <target state="translated">これは、RFC 2822に記載されている標準的な電子メールフォーマットです。</target>
        </trans-unit>
        <trans-unit id="b1825adadaae31865a7ba56f02eeaa58bb1a595e" translate="yes" xml:space="preserve">
          <source>This is the standard helper program to use with &lt;code&gt;git merge-index&lt;/code&gt; to resolve a merge after the trivial merge done with &lt;code&gt;git read-tree -m&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git read-tree -m&lt;/code&gt; を使用して簡単なマージを行った後、 &lt;code&gt;git merge-index&lt;/code&gt; を使用してマージを解決する標準のヘルパープログラムです。</target>
        </trans-unit>
        <trans-unit id="f4605ef17a6ae238fb7ad1359ce2fc3809a170d2" translate="yes" xml:space="preserve">
          <source>This is the state of the index file and the working file after &lt;code&gt;git merge&lt;/code&gt; returns control back to you, leaving the conflicting merge for you to resolve. Notice that the path &lt;code&gt;hello&lt;/code&gt; is still unmerged, and what you see with &lt;code&gt;git diff&lt;/code&gt; at this point is differences since stage 2 (i.e. your version).</source>
          <target state="translated">これは、 &lt;code&gt;git merge&lt;/code&gt; が制御をユーザーに戻した後のインデックスファイルと作業ファイルの状態であり、競合するマージは解決する必要があります。パス &lt;code&gt;hello&lt;/code&gt; はまだマージされておらず、この時点で &lt;code&gt;git diff&lt;/code&gt; で表示されるのは、ステージ2（つまり、バージョン）以降の違いです。</target>
        </trans-unit>
        <trans-unit id="885013fc19184ff3f87757857452f6badc7e664c" translate="yes" xml:space="preserve">
          <source>This is to emulate &lt;code&gt;git fetch&lt;/code&gt; run on the &lt;code&gt;mothership&lt;/code&gt; using &lt;code&gt;git
push&lt;/code&gt; that is run in the opposite direction in order to integrate the work done on &lt;code&gt;satellite&lt;/code&gt;, and is often necessary when you can only make connection in one way (i.e. satellite can ssh into mothership but mothership cannot initiate connection to satellite because the latter is behind a firewall or does not run sshd).</source>
          <target state="translated">これは、 &lt;code&gt;satellite&lt;/code&gt; で行われた作業を統合するために反対方向に実行される &lt;code&gt;git push&lt;/code&gt; を使用して、 &lt;code&gt;mothership&lt;/code&gt; &lt;code&gt;git fetch&lt;/code&gt; run をエミュレートするものであり、一方向でしか接続できない場合（つまり、サテライトが母船にsshできる場合）に必要です。ただし、後者はファイアウォールの背後にあるか、sshdを実行していないため、母艦は衛星への接続を開始できません。</target>
        </trans-unit>
        <trans-unit id="a0fbffa526980249cc459b3697ae082d2fb16d12" translate="yes" xml:space="preserve">
          <source>This is to view the changes between two arbitrary &amp;lt;commit&amp;gt;.</source>
          <target state="translated">これは、2つの任意の&amp;lt;commit&amp;gt;間の変更を表示するためのものです。</target>
        </trans-unit>
        <trans-unit id="2ccd3734f230a6bccf87e0841ef19acfd1763ec7" translate="yes" xml:space="preserve">
          <source>This is used if &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; does not resolve the correct &lt;code&gt;-kb&lt;/code&gt; mode to use. If true, all unresolved files are sent to the client in mode &lt;code&gt;-kb&lt;/code&gt;. This causes the client to treat them as binary files, which suppresses any newline munging it otherwise might do. Alternatively, if it is set to &quot;guess&quot;, then the contents of the file are examined to decide if it is binary, similar to &lt;code&gt;core.autocrlf&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;gitcvs.usecrlfattr&lt;/code&gt; が使用する正しい &lt;code&gt;-kb&lt;/code&gt; モードを解決しない場合に使用されます。trueの場合、すべての未解決のファイルはモード &lt;code&gt;-kb&lt;/code&gt; でクライアントに送信されます。これにより、クライアントはそれらをバイナリファイルとして処理します。これにより、改行を改ざんしないようにすることができます。または、「guess」に設定されている場合、ファイルの内容が調べられ、 &lt;code&gt;core.autocrlf&lt;/code&gt; と同様に、それがバイナリかどうかが判断されます。</target>
        </trans-unit>
        <trans-unit id="414b7e001678a67515e35206eca5b23ff617a9b6" translate="yes" xml:space="preserve">
          <source>This is used to avoid unnecessary false hits when &lt;code&gt;git diff-files&lt;/code&gt; is run after &lt;code&gt;git read-tree&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git read-tree&lt;/code&gt; の後に &lt;code&gt;git diff-files&lt;/code&gt; を実行するときに不要な誤ヒットを回避するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1756049aad8be96bbdbe029ae5b31f810c9534b0" translate="yes" xml:space="preserve">
          <source>This is used to imply --all-progress whenever progress display is activated. Unlike --all-progress this flag doesn&amp;rsquo;t actually force any progress display by itself.</source>
          <target state="translated">これは、進行状況の表示がアクティブになっているときは常に--all-progressを意味します。--all-progressとは異なり、このフラグは実際にはそれ自体で進行状況の表示を強制しません。</target>
        </trans-unit>
        <trans-unit id="fa389947911fb92b7cae5947eac62679e5095362" translate="yes" xml:space="preserve">
          <source>This is used to reorder the filepairs according to the user&amp;rsquo;s (or project&amp;rsquo;s) taste, and is controlled by the -O option to the &lt;code&gt;git diff-*&lt;/code&gt; commands.</source>
          <target state="translated">これは、ユーザー（またはプロジェクト）の好みに応じてファイルペアを並べ替えるために使用され、 &lt;code&gt;git diff-*&lt;/code&gt; コマンドの-Oオプションによって制御されます。</target>
        </trans-unit>
        <trans-unit id="e4698ff07eb1e8e63a5c87a4e409437aeb77e0b4" translate="yes" xml:space="preserve">
          <source>This is useful because it makes it easy to choose a good commit to test when you want to avoid to test some of them for some reason (they may not compile for example).</source>
          <target state="translated">これは、何らかの理由で一部のテストを避けたい場合(例えばコンパイルされない可能性がある)に、テストするのに適したコミットを簡単に選択できるので便利です。</target>
        </trans-unit>
        <trans-unit id="8b37ac2c46d9c49011957ba8051eb182f97c074f" translate="yes" xml:space="preserve">
          <source>This is useful if F and G were flawed in some way, or should not be part of topicA. Note that the argument to --onto and the &amp;lt;upstream&amp;gt; parameter can be any valid commit-ish.</source>
          <target state="translated">これは、FとGに何らかの欠陥がある場合、またはtopicAの一部ではない場合に役立ちます。--ontoへの引数と&amp;lt;upstream&amp;gt;パラメータは、任意の有効なcommit-ishにすることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5add7a300e88f092e0ef1b21363222f3ece44ad7" translate="yes" xml:space="preserve">
          <source>This is useful if remote side is git:// server accessed over some tunnel.</source>
          <target state="translated">これは、リモート側が何らかのトンネルを経由して git://サーバーにアクセスしている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="d562e00428aacff2db14167eb0ecbc7ee7ea6370" translate="yes" xml:space="preserve">
          <source>This is useful if the branch on which you ran &lt;code&gt;git stash push&lt;/code&gt; has changed enough that &lt;code&gt;git stash apply&lt;/code&gt; fails due to conflicts. Since the stash entry is applied on top of the commit that was HEAD at the time &lt;code&gt;git stash&lt;/code&gt; was run, it restores the originally stashed state with no conflicts.</source>
          <target state="translated">これは、 &lt;code&gt;git stash push&lt;/code&gt; を実行したブランチが変更され、競合のために &lt;code&gt;git stash apply&lt;/code&gt; が失敗した場合に役立ちます。stashエントリは、 &lt;code&gt;git stash&lt;/code&gt; が実行されたときにHEADだったコミットの上に適用されるため、競合することなく、元のstash状態が復元されます。</target>
        </trans-unit>
        <trans-unit id="30fcffaf45041b08cc97af9d1fa76a9ba0b33fa3" translate="yes" xml:space="preserve">
          <source>This is useful if you want to begin your message in a discussion thread with comments and suggestions on the message you are responding to, and to conclude it with a patch submission, separating the discussion and the beginning of the proposed commit log message with a scissors line.</source>
          <target state="translated">これは、ディスカッションスレッドでメッセージを開始して、応答しているメッセージへのコメントや提案でメッセージを始め、最後にパッチの投稿で締めくくりたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="f93051fa336df47ab5f519702120e3efac9cd277" translate="yes" xml:space="preserve">
          <source>This is useful on systems where lstat() calls are very slow, such as CIFS/Microsoft Windows.</source>
          <target state="translated">これは、CIFS/Microsoft Windows のように lstat()の呼び出しが非常に遅いシステムで有用です。</target>
        </trans-unit>
        <trans-unit id="6b9439a13a0f6c5a19da94d77f92d4a1ee7e5be6" translate="yes" xml:space="preserve">
          <source>This is useful when cherry-picking more than one commits' effect to your index in a row.</source>
          <target state="translated">これは、複数のコミットの効果を自分のインデックスに一列に並べてチェリーピックするときに便利です。</target>
        </trans-unit>
        <trans-unit id="ccb566ca825959d19feaead9d9434de1315351a7" translate="yes" xml:space="preserve">
          <source>This is useful when reverting more than one commits' effect to your index in a row.</source>
          <target state="translated">これは、複数のコミットの効果を一行にまとめてインデックスに戻す場合に便利です。</target>
        </trans-unit>
        <trans-unit id="a6b3b2938023c6383383af34a5efd6428edcf530" translate="yes" xml:space="preserve">
          <source>This is useful when topicB does not depend on topicA.</source>
          <target state="translated">これは、トピックBがトピックAに依存しない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="804a7dc8302db74d34102cb378738f0047ef1777" translate="yes" xml:space="preserve">
          <source>This is usually not what an end user wants to run directly. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; instead.</source>
          <target state="translated">これは通常、エンドユーザーが直接実行したいものではありません。代わりに&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="81deedcd021f1608f9f91f70a15e2349e22a39d7" translate="yes" xml:space="preserve">
          <source>This is what &lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch[1]&lt;/a&gt; generates. Most headers and MIME formatting are ignored.</source>
          <target state="translated">これは&lt;a href=&quot;git-format-patch&quot;&gt;git-format-patch [1]が&lt;/a&gt;生成するものです。ほとんどのヘッダーとMIME形式は無視されます。</target>
        </trans-unit>
        <trans-unit id="ca6a5c0a1684e36bc50c3e68cfccb9e6ebf59a4b" translate="yes" xml:space="preserve">
          <source>This is what causes Git to track the remote&amp;rsquo;s branches; you may modify or delete these configuration options by editing &lt;code&gt;.git/config&lt;/code&gt; with a text editor. (See the &quot;CONFIGURATION FILE&quot; section of &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.)</source>
          <target state="translated">これが、Gitがリモートのブランチを追跡する原因になります。テキストエディタで &lt;code&gt;.git/config&lt;/code&gt; を編集して、これらの構成オプションを変更または削除できます。（詳細については、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;の「CONFIGURATION FILE」セクションを参照してください。）</target>
        </trans-unit>
        <trans-unit id="e49010e0ec73f433e7f19c2db7cbfd7081066732" translate="yes" xml:space="preserve">
          <source>This is why it is a bad idea to just chose the next best unskipped bisection commit when the first one has been skipped.</source>
          <target state="translated">だからこそ、最初にスキップされたときに、スキップされていない次善のバイセクションコミットを選んだだけではダメなのです。</target>
        </trans-unit>
        <trans-unit id="b49b41d6b66c63a0b41c3cd8eb53b02ecb1e28e6" translate="yes" xml:space="preserve">
          <source>This leaves a copy of &lt;code&gt;next&lt;/code&gt; temporarily in FETCH_HEAD, and updates the remote-tracking branch &lt;code&gt;origin/next&lt;/code&gt;. The same can be done by invoking fetch and merge:</source>
          <target state="translated">これにより、 &lt;code&gt;next&lt;/code&gt; のコピーが一時的にFETCH_HEADに残り、リモートトラッキングブランチの &lt;code&gt;origin/next&lt;/code&gt; が更新されます。フェッチとマージを呼び出すことで同じことができます。</target>
        </trans-unit>
        <trans-unit id="51722bee7db4c41cee14b92ba092db0dce132718" translate="yes" xml:space="preserve">
          <source>This leaves a copy of &lt;code&gt;next&lt;/code&gt; temporarily in FETCH_HEAD, but does not update any remote-tracking branches. Using remote-tracking branches, the same can be done by invoking fetch and merge:</source>
          <target state="translated">これにより、 &lt;code&gt;next&lt;/code&gt; のコピーが一時的にFETCH_HEADに残りますが、リモート追跡ブランチは更新されません。リモート追跡ブランチを使用して、フェッチとマージを呼び出すことで同じことができます。</target>
        </trans-unit>
        <trans-unit id="8d3c273456c213d2f0eef245650834ea18d26a16" translate="yes" xml:space="preserve">
          <source>This lets you choose one path out of a &lt;code&gt;status&lt;/code&gt; like selection. After choosing the path, it presents the diff between the index and the working tree file and asks you if you want to stage the change of each hunk. You can select one of the following options and type return:</source>
          <target state="translated">これにより、選択などの &lt;code&gt;status&lt;/code&gt; から1つのパスを選択できます。パスを選択すると、インデックスと作業ツリーファイルの差分が表示され、各ハンクの変更をステージングするかどうかを尋ねられます。次のオプションのいずれかを選択して、returnと入力できます。</target>
        </trans-unit>
        <trans-unit id="060b46ed6fd409fbf360157d2f3c13ff3dcd2220" translate="yes" xml:space="preserve">
          <source>This lets you quit without do cleaning.</source>
          <target state="translated">これで掃除をしなくても辞めることができます。</target>
        </trans-unit>
        <trans-unit id="aa41c7db3702739cc1b230bda0b83b675d7b2671" translate="yes" xml:space="preserve">
          <source>This lets you review what will be committed (i.e. between HEAD and index).</source>
          <target state="translated">これにより、何がコミットされるかを確認することができます(つまり、HEADとインデックスの間)。</target>
        </trans-unit>
        <trans-unit id="ca3fd0a1256c2900c49910f1d037599eb216d4ff" translate="yes" xml:space="preserve">
          <source>This list should contain the URI of gitweb&amp;rsquo;s standard stylesheet. The default URI of gitweb stylesheet can be set at build time using the &lt;code&gt;GITWEB_CSS&lt;/code&gt; makefile variable. Its default value is &lt;code&gt;static/gitweb.css&lt;/code&gt; (or &lt;code&gt;static/gitweb.min.css&lt;/code&gt; if the &lt;code&gt;CSSMIN&lt;/code&gt; variable is defined, i.e. if CSS minifier is used during build).</source>
          <target state="translated">このリストには、gitwebの標準スタイルシートのURIが含まれている必要があります。gitwebスタイルシートのデフォルトURIは、ビルド時に &lt;code&gt;GITWEB_CSS&lt;/code&gt; makefile変数を使用して設定できます。デフォルト値は &lt;code&gt;static/gitweb.css&lt;/code&gt; （または、 &lt;code&gt;CSSMIN&lt;/code&gt; 変数が定義されている場合、つまりビルド中にCSS minifierが使用されている場合は &lt;code&gt;static/gitweb.min.css&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="87db555786bcad0bd342abfeced795a76cdcb852" translate="yes" xml:space="preserve">
          <source>This lists the commits reachable from the previous version of the &lt;code&gt;master&lt;/code&gt; branch head. This syntax can be used with any Git command that accepts a commit, not just with &lt;code&gt;git log&lt;/code&gt;. Some other examples:</source>
          <target state="translated">これは、以前のバージョンの &lt;code&gt;master&lt;/code&gt; ブランチヘッドから到達可能なコミットを一覧表示します。この構文は、 &lt;code&gt;git log&lt;/code&gt; だけでなく、コミットを受け入れるすべてのGitコマンドで使用できます。その他の例：</target>
        </trans-unit>
        <trans-unit id="9d19ff56a7106ea2437dd5210773dc60fd2828eb" translate="yes" xml:space="preserve">
          <source>This looks up the &amp;lt;file&amp;gt;(s) in the index and, if there are any merge entries, passes the SHA-1 hash for those files as arguments 1, 2, 3 (empty argument if no file), and &amp;lt;file&amp;gt; as argument 4. File modes for the three files are passed as arguments 5, 6 and 7.</source>
          <target state="translated">これはインデックス内の&amp;lt;file&amp;gt;を検索し、マージエントリがある場合は、それらのファイルのSHA-1ハッシュを引数1、2、3（ファイルがない場合は空の引数）、および&amp;lt;file&amp;gt;として渡します3つのファイルのファイルモードは、引数5、6、7として渡されます。</target>
        </trans-unit>
        <trans-unit id="6790f45ac4b6ed7e77775e3a5dfba68fc876105d" translate="yes" xml:space="preserve">
          <source>This makes a commit that records the modification to &lt;code&gt;Makefile&lt;/code&gt;. The changes staged for &lt;code&gt;hello.c&lt;/code&gt; and &lt;code&gt;hello.h&lt;/code&gt; are not included in the resulting commit. However, their changes are not lost &amp;mdash; they are still staged and merely held back. After the above sequence, if you do:</source>
          <target state="translated">これにより、 &lt;code&gt;Makefile&lt;/code&gt; への変更を記録するコミットが行われます。 &lt;code&gt;hello.c&lt;/code&gt; および &lt;code&gt;hello.h&lt;/code&gt; に対してステージングされた変更は、結果のコミットには含まれません。ただし、それらの変更は失われません&amp;mdash;それらはまだステージングされ、単に保留されます。上記のシーケンスの後、次の操作を行った場合：</target>
        </trans-unit>
        <trans-unit id="c23316330a20f8d3e00d74e273bc6ee3d02efbd7" translate="yes" xml:space="preserve">
          <source>This makes a new branch called &lt;code&gt;other&lt;/code&gt; from &lt;code&gt;master~5..master&lt;/code&gt; (i.e. if &lt;code&gt;master&lt;/code&gt; has linear history, it will take the last 5 commits).</source>
          <target state="translated">これにより、 &lt;code&gt;master~5..master&lt;/code&gt; から &lt;code&gt;other&lt;/code&gt; と呼ばれる新しいブランチが作成されます（つまり、 &lt;code&gt;master&lt;/code&gt; に線形履歴がある場合、最後の5回のコミットが行われます）。</target>
        </trans-unit>
        <trans-unit id="b0ade35fb815795f98a8b6354752858acd9e1cfa" translate="yes" xml:space="preserve">
          <source>This makes sure that only the key/value pair for kernel.org is replaced.</source>
          <target state="translated">これにより、kernel.org のキーと値のペアだけが置換されることを確認します。</target>
        </trans-unit>
        <trans-unit id="2d726c732ca5f310160366fecc16a8d1ede4f94c" translate="yes" xml:space="preserve">
          <source>This manual describes the convention used throughout Git CLI.</source>
          <target state="translated">このマニュアルでは、Git CLI全体で使用される規約について説明しています。</target>
        </trans-unit>
        <trans-unit id="40982f6c18ca56554ec412b18ace4f012d6c51fa" translate="yes" xml:space="preserve">
          <source>This manual is designed to be readable by someone with basic UNIX command-line skills, but no previous knowledge of Git.</source>
          <target state="translated">本書は、基本的な UNIX コマンドラインのスキルはあるが、Git の知識がない人でも読めるように設計されています。</target>
        </trans-unit>
        <trans-unit id="1b4c4400f56ace6af78ca50c928fe7f5cfe13be6" translate="yes" xml:space="preserve">
          <source>This manual page describes only the most frequently used options.</source>
          <target state="translated">このマニュアルページでは、最もよく使用されるオプションのみを説明しています。</target>
        </trans-unit>
        <trans-unit id="c74c8f67468f674a4bbb6cadbdb326520214aafb" translate="yes" xml:space="preserve">
          <source>This manual page describes only the most frequently used options. See &lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list[1]&lt;/a&gt; for a complete list.</source>
          <target state="translated">このマニュアルページでは、最も頻繁に使用されるオプションのみを説明しています。完全なリストについては、&lt;a href=&quot;git-rev-list&quot;&gt;git-rev-list [1]&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="78fbc8bf0be13ddc4f9bce27ee4dc19783022a2b" translate="yes" xml:space="preserve">
          <source>This means &quot;show everything that is reachable from either one, but exclude anything that is reachable from both of them&quot;.</source>
          <target state="translated">これは、「どちらか一方から届くものはすべて表示するが、両方から届くものは除外する」という意味です。</target>
        </trans-unit>
        <trans-unit id="9f4c07f14694007bf95dcdb96bbfc3991db01ef3" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;git reset &amp;lt;pathspec&amp;gt;&lt;/code&gt; is the opposite of &lt;code&gt;git add
&amp;lt;pathspec&amp;gt;&lt;/code&gt;. This command is equivalent to &lt;code&gt;git restore [--source=&amp;lt;tree-ish&amp;gt;] --staged &amp;lt;pathspec&amp;gt;...&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;git reset &amp;lt;pathspec&amp;gt;&lt;/code&gt; が &lt;code&gt;git add &amp;lt;pathspec&amp;gt;&lt;/code&gt; 反対であることを意味します。このコマンドは &lt;code&gt;git restore [--source=&amp;lt;tree-ish&amp;gt;] --staged &amp;lt;pathspec&amp;gt;...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="138908f8222de2b4daf75b57b97dc896b1845167" translate="yes" xml:space="preserve">
          <source>This means that &lt;code&gt;git reset -p&lt;/code&gt; is the opposite of &lt;code&gt;git add -p&lt;/code&gt;, i.e. you can use it to selectively reset hunks. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">これは &lt;code&gt;git reset -p&lt;/code&gt; が &lt;code&gt;git add -p&lt;/code&gt; の逆であることを意味します。つまり、これを使用してハンクを選択的にリセットできます。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="9c231d7cedbd657513f91f60869397c2bef2f37d" translate="yes" xml:space="preserve">
          <source>This means that it is often &quot;cheaper&quot; if QA people or end users can do it.</source>
          <target state="translated">つまり、QAの人やエンドユーザーができれば「安く」なることが多いということです。</target>
        </trans-unit>
        <trans-unit id="0ff1dc064f7e1f4d0872498ac05a21ade168adc9" translate="yes" xml:space="preserve">
          <source>This means that test suites are good to prevent some bugs from being committed and they are also quite good to tell you that you have some bugs. But they are not so good to tell you where some bugs have been introduced. To tell you that efficiently, git bisect is needed.</source>
          <target state="translated">つまり、テストスイートはいくつかのバグがコミットされるのを防ぐためには良いものであり、いくつかのバグがあることを伝えるためにはかなり良いものです。しかし、どこにいくつかのバグが混入しているかを伝えるのにはあまり向いていません。それを効率よく伝えるために必要なのが git bisect です。</target>
        </trans-unit>
        <trans-unit id="388b9571e5f1264e3be3a08ce2827efedebdef31" translate="yes" xml:space="preserve">
          <source>This means that the best bisection commits are the commits where the following function is maximum:</source>
          <target state="translated">つまり、以下の関数が最大となるコミットが最良の二等分コミットとなります。</target>
        </trans-unit>
        <trans-unit id="597961da0012b9cd684792dccd1c7471e5687e9f" translate="yes" xml:space="preserve">
          <source>This means that the trimmed &amp;lt;token&amp;gt; and &amp;lt;value&amp;gt; will be separated by &lt;code&gt;': '&lt;/code&gt; (one colon followed by one space).</source>
          <target state="translated">これは、トリムされた&amp;lt;token&amp;gt;と&amp;lt;value&amp;gt;が &lt;code&gt;': '&lt;/code&gt; （1つのコロンと1つのスペース）で区切られることを意味します。</target>
        </trans-unit>
        <trans-unit id="38ea5711a664516b71bd0eeea932fd8ac8d7c412" translate="yes" xml:space="preserve">
          <source>This means that we get rid of the uninteresting commits in the DAG.</source>
          <target state="translated">これは、DAG内の興味のないコミットを取り除くことを意味します。</target>
        </trans-unit>
        <trans-unit id="2454a8b57cbe01726a67b284a671cd468ecfe3a7" translate="yes" xml:space="preserve">
          <source>This means that you can do</source>
          <target state="translated">ということは、以下のことができるということです。</target>
        </trans-unit>
        <trans-unit id="4bfb7f09c9f4811c3630d40fb2caf5f3310e564e" translate="yes" xml:space="preserve">
          <source>This means that you can use &lt;code&gt;git checkout -p&lt;/code&gt; to selectively discard edits from your current working tree. See the &amp;ldquo;Interactive Mode&amp;rdquo; section of &lt;a href=&quot;git-add&quot;&gt;git-add[1]&lt;/a&gt; to learn how to operate the &lt;code&gt;--patch&lt;/code&gt; mode.</source>
          <target state="translated">つまり、 &lt;code&gt;git checkout -p&lt;/code&gt; を使用して、現在の作業ツリーから編集内容を選択的に破棄できます。 &lt;code&gt;--patch&lt;/code&gt; モードの操作方法については、&lt;a href=&quot;git-add&quot;&gt;git-add [1]&lt;/a&gt;の「インタラクティブモード」セクションをご覧ください。</target>
        </trans-unit>
        <trans-unit id="2db1fd51873ef2a0afca87fc61387f5a8891e2a5" translate="yes" xml:space="preserve">
          <source>This merges the changes from Bob&amp;rsquo;s &quot;master&quot; branch into Alice&amp;rsquo;s current branch. If Alice has made her own changes in the meantime, then she may need to manually fix any conflicts.</source>
          <target state="translated">これにより、ボブの「マスター」ブランチからの変更がアリスの現在のブランチにマージされます。その間にアリスが自分で変更を加えた場合は、競合を手動で修正する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="cff3569519105ed116111cf73b4d626e89a75fc2" translate="yes" xml:space="preserve">
          <source>This merges the file listing in the directory cache index with the actual working directory list, and shows different combinations of the two.</source>
          <target state="translated">これは、ディレクトリキャッシュインデックスのファイルリストと実際の作業ディレクトリリストをマージし、2つの異なる組み合わせを表示します。</target>
        </trans-unit>
        <trans-unit id="e550f0e6cba8953c27a9638529775caa0627f8ed" translate="yes" xml:space="preserve">
          <source>This might not be what you expect, i.e. you want to prune remote &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, but also explicitly fetch tags from it, so when you fetch from it you delete all your local tags, most of which may not have come from the &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; remote in the first place.</source>
          <target state="translated">これは期待したものとは異なる可能性があります。つまり、リモート &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; をプルーニングするだけでなく、明示的にタグをフェッチするため、そこからフェッチすると、すべてのローカルタグが削除されます。ほとんどのタグは &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; そもそもリモート。</target>
        </trans-unit>
        <trans-unit id="c165a1bf0e23a30271149315bd9959512cec8cbc" translate="yes" xml:space="preserve">
          <source>This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get</source>
          <target state="translated">このモードはデフォルトとは異なる点があります:マージの親のいずれかに対して TREESAME であっても、常にすべての親に従うという点です。マージの複数の側にコミットが含まれていたとしても、これはマージ自体がそうであることを意味するものではありません! 例では</target>
        </trans-unit>
        <trans-unit id="06118fd3f101fa40f7bcb707d4305013c9a74e7d" translate="yes" xml:space="preserve">
          <source>This mode has become the default in Git 2.0.</source>
          <target state="translated">このモードはGit 2.0ではデフォルトとなっています。</target>
        </trans-unit>
        <trans-unit id="9c35450959e8c97cb733c60205966cdb68e529c7" translate="yes" xml:space="preserve">
          <source>This mode is designed for repositories with very large indexes, and aims at reducing the time it takes to repeatedly write these indexes.</source>
          <target state="translated">このモードは非常に大きなインデックスを持つリポジトリのために設計されており、これらのインデックスの繰り返し書き込みにかかる時間を短縮することを目的としています。</target>
        </trans-unit>
        <trans-unit id="660380648a3de0733323135a33a60c0126cae6f8" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to dump the internal marks table to &amp;lt;file&amp;gt; when complete. For details, read up on &lt;code&gt;--export-marks=&amp;lt;file&amp;gt;&lt;/code&gt; in &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、完了時に内部マークテーブルを&amp;lt;file&amp;gt;にダンプするようにGitに指示します。詳細については、&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]の&lt;/a&gt; &lt;code&gt;--export-marks=&amp;lt;file&amp;gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="59a5d5693433000c28979c8002984ee295ddd735" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to load the marks specified in &amp;lt;file&amp;gt; before processing any input. For details, read up on &lt;code&gt;--import-marks=&amp;lt;file&amp;gt;&lt;/code&gt; in &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、入力を処理する前に&amp;lt;file&amp;gt;で指定されたマークをロードするようにGitに指示します。詳細については、&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]の&lt;/a&gt; &lt;code&gt;--import-marks=&amp;lt;file&amp;gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="29cca50076d9ab0c1672949be9f5cf285333ce65" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;export&lt;/code&gt; capability, instructing Git to pass &lt;code&gt;--signed-tags=verbatim&lt;/code&gt; to &lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export[1]&lt;/a&gt;. In the absence of this capability, Git will use &lt;code&gt;--signed-tags=warn-strip&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;export&lt;/code&gt; 機能が変更され、Gitに &lt;code&gt;--signed-tags=verbatim&lt;/code&gt; を&lt;a href=&quot;git-fast-export&quot;&gt;git-fast-export [1]&lt;/a&gt;に渡すように指示されます。この機能がない場合、Gitは &lt;code&gt;--signed-tags=warn-strip&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1cd76e4b36f80f26235450d81c7340212de49a9e" translate="yes" xml:space="preserve">
          <source>This modifies the &lt;code&gt;import&lt;/code&gt; capability. The fast-import commands &lt;code&gt;cat-blob&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; can be used by remote-helpers to retrieve information about blobs and trees that already exist in fast-import&amp;rsquo;s memory. This requires a channel from fast-import to the remote-helper. If it is advertised in addition to &quot;import&quot;, Git establishes a pipe from fast-import to the remote-helper&amp;rsquo;s stdin. It follows that Git and fast-import are both connected to the remote-helper&amp;rsquo;s stdin. Because Git can send multiple commands to the remote-helper it is required that helpers that use &lt;code&gt;bidi-import&lt;/code&gt; buffer all &lt;code&gt;import&lt;/code&gt; commands of a batch before sending data to fast-import. This is to prevent mixing commands and fast-import responses on the helper&amp;rsquo;s stdin.</source>
          <target state="translated">これにより、 &lt;code&gt;import&lt;/code&gt; 機能が変更されます。高速インポートコマンド &lt;code&gt;cat-blob&lt;/code&gt; および &lt;code&gt;ls&lt;/code&gt; をリモートヘルパーが使用して、高速インポートのメモリにすでに存在するblobおよびツリーに関する情報を取得できます。これには、高速インポートからリモートヘルパーへのチャネルが必要です。「インポート」に加えてアドバタイズされる場合、Gitは高速インポートからリモートヘルパーのstdinへのパイプを確立します。したがって、Gitとfast-importはどちらもリモートヘルパーのstdinに接続されています。Gitはリモートヘルパーに複数のコマンドを送信できるため、 &lt;code&gt;bidi-import&lt;/code&gt; を使用するヘルパーがすべての &lt;code&gt;import&lt;/code&gt; バッファーする必要がありますデータを高速インポートに送信する前のバッチのコマンド。これは、ヘルパーの標準入力でコマンドと高速インポート応答が混在するのを防ぐためです。</target>
        </trans-unit>
        <trans-unit id="18b230f7b58b67f5f52143b1696b5514cecb3bd1" translate="yes" xml:space="preserve">
          <source>This operation is safe even if Alice has uncommitted local changes. The range notation &quot;HEAD..FETCH_HEAD&quot; means &quot;show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD&quot;. Alice already knows everything that leads to her current state (HEAD), and reviews what Bob has in his state (FETCH_HEAD) that she has not seen with this command.</source>
          <target state="translated">この操作は、アリスがローカルの変更をコミットしていない場合でも安全です。範囲表記「head...fetch_head」は、「fetch_headから到達可能なものはすべて表示するが、headから到達可能なものは除外する」という意味です。アリスはすでに自分の現在の状態(head)につながるものはすべて知っていて、このコマンドで見ていないボブの状態(fetch_head)にあるものを見直しています。</target>
        </trans-unit>
        <trans-unit id="4d6058894e90e81912f089323abaddf6ff7286d2" translate="yes" xml:space="preserve">
          <source>This option affects options that expect path name like &lt;code&gt;--git-dir&lt;/code&gt; and &lt;code&gt;--work-tree&lt;/code&gt; in that their interpretations of the path names would be made relative to the working directory caused by the &lt;code&gt;-C&lt;/code&gt; option. For example the following invocations are equivalent:</source>
          <target state="translated">このオプションは、 &lt;code&gt;--git-dir&lt;/code&gt; や &lt;code&gt;--work-tree&lt;/code&gt; などのパス名を期待するオプションに影響を与えます。つまり、パス名の解釈は、 &lt;code&gt;-C&lt;/code&gt; オプションによって引き起こされる作業ディレクトリに対して相対的になります。たとえば、次の呼び出しは同等です。</target>
        </trans-unit>
        <trans-unit id="2b42f3dc9742d00737d912066dfd2008f4af0874" translate="yes" xml:space="preserve">
          <source>This option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no other people did anything to the ref. It is like taking a &quot;lease&quot; on the ref without explicitly locking it, and the remote ref is updated only if the &quot;lease&quot; is still valid.</source>
          <target state="translated">このオプションを使用すると、更新する履歴がリベースした履歴であり、置き換えたい履歴であることを想定していると言うことができます。リモートの ref が指定したコミットをまだ指している場合、他の人がその ref に何かをしたわけではないことを確認することができます。これは、明示的にロックしないで ref に &quot;リース&quot; を取るようなもので、リモート ref は &quot;リース&quot; がまだ有効な場合にのみ更新されます。</target>
        </trans-unit>
        <trans-unit id="a3080455c3c310acd65dd25e9f3c439906791e33" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-commit and commit-msg hooks. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、pre-commitおよびcommit-msgフックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ae0cb95b3299088da58c88ea10fd24e68d20bac1" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-merge and commit-msg hooks. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、マージ前およびcommit-msgフックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="22c10b3b137f37c4d219034c9b73126392cd066c" translate="yes" xml:space="preserve">
          <source>This option bypasses the pre-rebase hook. See also &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、リベース前フックをバイパスします。&lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="8e7eb09891c6b3b929ffed676724fa916ce9b73e" translate="yes" xml:space="preserve">
          <source>This option can be either set to a boolean value or to &lt;code&gt;on-demand&lt;/code&gt;. Setting it to a boolean changes the behavior of fetch and pull to unconditionally recurse into submodules when set to true or to not recurse at all when set to false. When set to &lt;code&gt;on-demand&lt;/code&gt; (the default value), fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule&amp;rsquo;s reference.</source>
          <target state="translated">このオプションは、ブール値または &lt;code&gt;on-demand&lt;/code&gt; に設定できます。これをブール値に設定すると、フェッチおよびプルの動作が変更され、trueに設定されている場合は無条件にサブモジュールに再帰するか、falseに設定されている場合はまったく再帰されません。 &lt;code&gt;on-demand&lt;/code&gt; （デフォルト値）に設定されている場合、フェッチとプルは、スーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときにのみ、設定されたサブモジュールに再帰します。</target>
        </trans-unit>
        <trans-unit id="5d7a21f2665910c78fd7ff132552ce53899e84c0" translate="yes" xml:space="preserve">
          <source>This option can be used along with &lt;code&gt;--bisect-vars&lt;/code&gt;, in this case, after all the sorted commit objects, there will be the same text as if &lt;code&gt;--bisect-vars&lt;/code&gt; had been used alone.</source>
          <target state="translated">このオプションは &lt;code&gt;--bisect-vars&lt;/code&gt; と一緒に使用できます。この場合、ソートされたすべてのコミットオブジェクトの後に、 &lt;code&gt;--bisect-vars&lt;/code&gt; が単独で使用された場合と同じテキストが表示されます。</target>
        </trans-unit>
        <trans-unit id="93ff5c11faab29c493dcd0eb330b2a514a09e43b" translate="yes" xml:space="preserve">
          <source>This option can be used several times to provide several detection regexes.</source>
          <target state="translated">このオプションは、複数回使用して複数の検出正規表現を提供することができます。</target>
        </trans-unit>
        <trans-unit id="a9be17765d99ef763e2665079651c5e7b4e1ceec" translate="yes" xml:space="preserve">
          <source>This option can be used to control recursive fetching of this submodule. If this option is also present in the submodules entry in .git/config of the superproject, the setting there will override the one found in .gitmodules. Both settings can be overridden on the command line by using the &quot;--[no-]recurse-submodules&quot; option to &quot;git fetch&quot; and &quot;git pull&quot;.</source>
          <target state="translated">このオプションを使用すると、このサブモジュールの再帰的な取得を制御することができます。このオプションがスーパープロジェクトの .git/config の submodules エントリにもある場合は、その設定が .gitmodules の設定を上書きします。どちらの設定も、コマンドラインで &quot;git fetch&quot; と &quot;git pull&quot; に &quot;--[no-]recurse-submodules&quot; オプションを指定することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="4813ba4c4b012e94932c2c7e77e5d37eb750ee7d" translate="yes" xml:space="preserve">
          <source>This option can be used to control recursive fetching of this submodule. It can be overridden by using the --[no-]recurse-submodules command-line option to &quot;git fetch&quot; and &quot;git pull&quot;. This setting will override that from in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file.</source>
          <target state="translated">このオプションは、このサブモジュールの再帰的なフェッチを制御するために使用できます。「git fetch」と「git pull」に-[no-] recurse-submodulesコマンドラインオプションを使用することで、オーバーライドできます。この設定は、&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;ファイルの設定を上書きします。</target>
        </trans-unit>
        <trans-unit id="dc1c2b92ebab0226490f8de8ccd94e6df6f7955b" translate="yes" xml:space="preserve">
          <source>This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).</source>
          <target state="translated">このオプションを使うと、コマンドラインオプションをファイルの一覧から切り離すことができます (ファイル名がコマンドラインオプションと間違われている場合に便利です)。</target>
        </trans-unit>
        <trans-unit id="792e2c6acea003d2f54070521de0f6b1fb530a29" translate="yes" xml:space="preserve">
          <source>This option can be used to specify a shell command that will be called to automatically add or modify a trailer with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションを使用して、指定された&amp;lt;token&amp;gt;でトレーラーを自動的に追加または変更するために呼び出されるシェルコマンドを指定できます。</target>
        </trans-unit>
        <trans-unit id="3870831de784b5f9a3b27254aee6ab6f7a036b72" translate="yes" xml:space="preserve">
          <source>This option can only be used for one-shot imports as &lt;code&gt;git svn&lt;/code&gt; will not be able to fetch again without metadata. Additionally, if you lose your &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; files, &lt;code&gt;git svn&lt;/code&gt; will not be able to rebuild them.</source>
          <target state="translated">&lt;code&gt;git svn&lt;/code&gt; はメタデータなしでは再度フェッチできないため、このオプションはワンショットインポートにのみ使用できます。さらに、 &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; ファイルを紛失すると、 &lt;code&gt;git svn&lt;/code&gt; はそれらを再構築できなくなります。</target>
        </trans-unit>
        <trans-unit id="7745929fdc4d071dfa2f069450065a35fb03a357" translate="yes" xml:space="preserve">
          <source>This option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not.</source>
          <target state="translated">このオプションは --dry-run と一緒に使用することができます。このオプションを使用することで、ユーザは与えられたファイルがワークツリーに既に存在するかどうかに関わらず、無視されるかどうかをチェックすることができます。</target>
        </trans-unit>
        <trans-unit id="2cd2090b6cd931e9fb6990b800f11805da77a460" translate="yes" xml:space="preserve">
          <source>This option cannot (currently) be used unless &lt;code&gt;--batch&lt;/code&gt; or &lt;code&gt;--batch-check&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;--batch&lt;/code&gt; または &lt;code&gt;--batch-check&lt;/code&gt; を使用しない限り、このオプションは（現在）使用できません。</target>
        </trans-unit>
        <trans-unit id="0bf834f696ae0c2ea43d0e8666eab0cbfdcf28f1" translate="yes" xml:space="preserve">
          <source>This option cannot be used with --stdin.</source>
          <target state="translated">このオプションは --stdin とは併用できません。</target>
        </trans-unit>
        <trans-unit id="882762ef26e2279478bc78603a1e7faf56dec8c3" translate="yes" xml:space="preserve">
          <source>This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to &lt;code&gt;no&lt;/code&gt; or to unconditionally recurse into all populated submodules when set to &lt;code&gt;yes&lt;/code&gt;, which is the default when this option is used without any value. Use &lt;code&gt;on-demand&lt;/code&gt; to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule&amp;rsquo;s reference to a commit that isn&amp;rsquo;t already in the local submodule clone.</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットもフェッチする必要があるかどうか、またどのような条件下でフェッチするかを制御します。これをブールオプションとして使用して、 &lt;code&gt;no&lt;/code&gt; に設定すると再帰を完全に無効にするか、 &lt;code&gt;yes&lt;/code&gt; に設定すると無条件にすべての入力済みサブモジュールに再帰します。これは、このオプションを値なしで使用した場合のデフォルトです。 &lt;code&gt;on-demand&lt;/code&gt; を使用して、スーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときに、ローカルサブモジュールクローンにまだないコミットへのサブモジュールへの再帰のみを行います。</target>
        </trans-unit>
        <trans-unit id="402f84a0bd330441925cd57436b80c9379eb3ea0" translate="yes" xml:space="preserve">
          <source>This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to &lt;code&gt;no&lt;/code&gt; or to unconditionally recurse into all populated submodules when set to &lt;code&gt;yes&lt;/code&gt;, which is the default when this option is used without any value. Use &lt;code&gt;on-demand&lt;/code&gt; to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule&amp;rsquo;s reference to a commit that isn&amp;rsquo;t already in the local submodule clone. By default, &lt;code&gt;on-demand&lt;/code&gt; is used, unless &lt;code&gt;fetch.recurseSubmodules&lt;/code&gt; is set (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットもフェッチするかどうか、およびどのような条件でフェッチするかを制御します。これはブールオプションとして使用でき、 &lt;code&gt;no&lt;/code&gt; に設定すると再帰を完全に無効にしたり、 &lt;code&gt;yes&lt;/code&gt; に設定するとすべての入力済みサブモジュールに無条件に再帰します。これはこのオプションを値なしで使用した場合のデフォルトです。スーパープロジェクトが、ローカルサブモジュールクローンにまだ存在しないコミットへのサブモジュールの参照を更新するコミットを取得する場合にのみ、 &lt;code&gt;on-demand&lt;/code&gt; を使用して、入力されたサブモジュールに再帰します。デフォルトでは、 &lt;code&gt;fetch.recurseSubmodules&lt;/code&gt; が設定されていない限り、 &lt;code&gt;on-demand&lt;/code&gt; が使用されます（&lt;a href=&quot;git-config&quot;&gt;git-config [1]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="69bffdffaf64305a520ea61fd7a4110a4c5bf981" translate="yes" xml:space="preserve">
          <source>This option controls if new commits of all populated submodules should be fetched and updated, too (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたすべてのサブモジュールの新しいコミットもフェッチして更新する必要があるかどうかを制御します（&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8666b4e7aa19effada757acd8dc6a366796aecc5" translate="yes" xml:space="preserve">
          <source>This option controls if new commits of populated submodules should be fetched, and if the working trees of active submodules should be updated, too (see &lt;a href=&quot;git-fetch&quot;&gt;git-fetch[1]&lt;/a&gt;, &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">このオプションは、入力されたサブモジュールの新しいコミットをフェッチするかどうか、およびアクティブなサブモジュールの作業ツリーも更新するかどうかを制御します（&lt;a href=&quot;git-fetch&quot;&gt;git-fetch [1]&lt;/a&gt;、&lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt;、および&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="99e48667fde8ec2632838629a22c3bc7308b3012" translate="yes" xml:space="preserve">
          <source>This option controls whether &lt;code&gt;git fetch&lt;/code&gt; (and the underlying fetch in &lt;code&gt;git pull&lt;/code&gt;) will recursively fetch into populated submodules. This option can be set either to a boolean value or to &lt;code&gt;on-demand&lt;/code&gt;. Setting it to a boolean changes the behavior of fetch and pull to recurse unconditionally into submodules when set to true or to not recurse at all when set to false. When set to &lt;code&gt;on-demand&lt;/code&gt;, fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule&amp;rsquo;s reference. Defaults to &lt;code&gt;on-demand&lt;/code&gt;, or to the value of &lt;code&gt;submodule.recurse&lt;/code&gt; if set.</source>
          <target state="translated">このオプションは、 &lt;code&gt;git fetch&lt;/code&gt; （および &lt;code&gt;git pull&lt;/code&gt; の基になるフェッチ）が入力されたサブモジュールに再帰的にフェッチするかどうかを制御します。このオプションは、ブール値または &lt;code&gt;on-demand&lt;/code&gt; いずれかに設定できます。ブール値に設定すると、フェッチとプルの動作が変更され、trueに設定されている場合は無条件にサブモジュールに再帰し、falseに設定されている場合はまったく再帰しません。 &lt;code&gt;on-demand&lt;/code&gt; 設定されている場合、フェッチとプルは、スーパープロジェクトがサブモジュールの参照を更新するコミットを取得したときにのみ、入力されたサブモジュールに再帰します。デフォルトは &lt;code&gt;on-demand&lt;/code&gt; 、または設定されている場合は &lt;code&gt;submodule.recurse&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="30828ff428cc76245c5c17e5cbd61f4d3413d1c5" translate="yes" xml:space="preserve">
          <source>This option determines how the commit message will be cleaned up before being passed on to the commit machinery. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for more details. In particular, if the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is given a value of &lt;code&gt;scissors&lt;/code&gt;, scissors will be appended to &lt;code&gt;MERGE_MSG&lt;/code&gt; before being passed on in the case of a conflict.</source>
          <target state="translated">このオプションは、コミットメッセージがコミット機構に渡される前にクリーンアップされる方法を決定します。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。特に、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に &lt;code&gt;scissors&lt;/code&gt; の値が指定されている場合、競合が発生した場合に渡される前に &lt;code&gt;MERGE_MSG&lt;/code&gt; にscissorsが追加されます。</target>
        </trans-unit>
        <trans-unit id="286a93d0042817a6190102b1bfcb5df866579bac" translate="yes" xml:space="preserve">
          <source>This option determines how the merge message will be cleaned up before committing. See &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for more details. In addition, if the &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; is given a value of &lt;code&gt;scissors&lt;/code&gt;, scissors will be appended to &lt;code&gt;MERGE_MSG&lt;/code&gt; before being passed on to the commit machinery in the case of a merge conflict.</source>
          <target state="translated">このオプションは、コミットメッセージをコミットする前にクリーンアップする方法を決定します。詳細については、&lt;a href=&quot;git-commit&quot;&gt;git-commit [1]&lt;/a&gt;を参照してください。さらに、 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; に &lt;code&gt;scissors&lt;/code&gt; の値が指定されている場合、マージの競合が発生した場合、はさみが &lt;code&gt;MERGE_MSG&lt;/code&gt; に追加されてからコミット機構に渡されます。</target>
        </trans-unit>
        <trans-unit id="4d1960d5d8472d2a194e5ec10acd8959326f748a" translate="yes" xml:space="preserve">
          <source>This option determines how the supplied commit message should be cleaned up before committing. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; can be &lt;code&gt;strip&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt;, &lt;code&gt;verbatim&lt;/code&gt;, &lt;code&gt;scissors&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">このオプションは、提供されるコミットメッセージをコミットする前にクリーンアップする方法を決定します。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; することができ &lt;code&gt;strip&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; 、 &lt;code&gt;verbatim&lt;/code&gt; 、 &lt;code&gt;scissors&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5dab8a93409f72b36d8b46ab64625d688725721" translate="yes" xml:space="preserve">
          <source>This option does not (currently) work correctly when an object in the index is specified (e.g. &lt;code&gt;:link&lt;/code&gt; instead of &lt;code&gt;HEAD:link&lt;/code&gt;) rather than one in the tree.</source>
          <target state="translated">インデックス内のオブジェクトが（例えば、指定された場合、このオプションは正しくありません（現在は）作業を行います &lt;code&gt;:link&lt;/code&gt; の代わり &lt;code&gt;HEAD:link&lt;/code&gt; ではなく、ツリー内の1。）</target>
        </trans-unit>
        <trans-unit id="d9ea124fbd7a15594b4c6836d821b0c2d1f565c3" translate="yes" xml:space="preserve">
          <source>This option forces conflicting hunks to be auto-resolved cleanly by favoring &lt;code&gt;our&lt;/code&gt; version. Changes from the other tree that do not conflict with our side are reflected in the merge result. For a binary file, the entire contents are taken from our side.</source>
          <target state="translated">このオプションは &lt;code&gt;our&lt;/code&gt; バージョンを優先することで、競合するハンクを強制的に完全に自動解決します。私たちの側と競合しない他のツリーからの変更は、マージ結果に反映されます。バイナリファイルの場合、コンテンツ全体が私たちの側から取得されます。</target>
        </trans-unit>
        <trans-unit id="03e43ead906b5a3ebd0febb15138c0f0fef70180" translate="yes" xml:space="preserve">
          <source>This option identifies the file status with the following tags (followed by a space) at the start of each line:</source>
          <target state="translated">このオプションは、各行の先頭に以下のタグ(後にスペース)を付けてファイルの状態を識別します。</target>
        </trans-unit>
        <trans-unit id="11f1817b2bcb9580d82cb7eff477a970ee3352b6" translate="yes" xml:space="preserve">
          <source>This option is NOT recommended as it makes it difficult to track down old references to SVN revision numbers in existing documentation, bug reports, and archives. If you plan to eventually migrate from SVN to Git and are certain about dropping SVN history, consider &lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repo&lt;/a&gt; instead. filter-repo also allows reformatting of metadata for ease-of-reading and rewriting authorship info for non-&quot;svn.authorsFile&quot; users.</source>
          <target state="translated">このオプションは、既存のドキュメント、バグレポート、およびアーカイブでSVNリビジョン番号への古い参照を追跡することが困難になるため、お勧めしません。最終的にSVNからGitに移行する予定で、SVN履歴の削除が確実な場合は、代わりに&lt;a href=&quot;https://github.com/newren/git-filter-repo&quot;&gt;git-filter-repoを&lt;/a&gt;検討してください。filter-repoでは、メタデータを再フォーマットして、「svn.authorsFile」以外のユーザーの作成者情報を読みやすくしたり書き換えたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="78790ec840bc0471b6e620b0edc9dccd8cb32215" translate="yes" xml:space="preserve">
          <source>This option is a more advanced form of &lt;code&gt;subtree&lt;/code&gt; strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.</source>
          <target state="translated">このオプションは、 &lt;code&gt;subtree&lt;/code&gt; 戦略のより高度な形式です。この戦略では、マージ時に2つのツリーをシフトして互いに一致させる必要がある方法を推測します。代わりに、2つのツリーの形状を一致させるために、指定されたパスにプレフィックスが付けられます（または最初から削除されます）。</target>
        </trans-unit>
        <trans-unit id="7e1a0662099548eacf19f027d973ae52cc900bb4" translate="yes" xml:space="preserve">
          <source>This option is deprecated in favour of &lt;code&gt;git stash push&lt;/code&gt;. It differs from &quot;stash push&quot; in that it cannot take pathspec. Instead, all non-option arguments are concatenated to form the stash message.</source>
          <target state="translated">このオプションは廃止され、 &lt;code&gt;git stash push&lt;/code&gt; が採用されました。パススペックをとることができないという点で「スタッシュプッシュ」とは異なります。代わりに、オプション以外のすべての引数が連結されて、隠しメッセージが形成されます。</target>
        </trans-unit>
        <trans-unit id="4caf0764823caa06aa3cb192d447e797c84f9905" translate="yes" xml:space="preserve">
          <source>This option is deprecated in favour of &lt;code&gt;git stash push&lt;/code&gt;. It differs from &quot;stash push&quot; in that it cannot take pathspecs. Instead, all non-option arguments are concatenated to form the stash message.</source>
          <target state="translated">このオプションは &lt;code&gt;git stash push&lt;/code&gt; のために廃止されました。パススペックを取得できないという点で「スタッシュプッシュ」とは異なります。代わりに、すべての非オプション引数が連結されてstashメッセージが形成されます。</target>
        </trans-unit>
        <trans-unit id="c02fef4ae69460732c7c3bd405bb6c17f43ad119" translate="yes" xml:space="preserve">
          <source>This option is equivalent to the &amp;lt;repository&amp;gt; argument. If both are specified, the command-line argument takes precedence.</source>
          <target state="translated">このオプションは、&amp;lt;repository&amp;gt;引数と同等です。両方を指定した場合は、コマンドライン引数が優先されます。</target>
        </trans-unit>
        <trans-unit id="b7fdcf9707bc99b530bc435f0d474fdd1738b42d" translate="yes" xml:space="preserve">
          <source>This option is implicitly supplied if any other list-like option such as &lt;code&gt;--contains&lt;/code&gt; is provided. See the documentation for each of those options for details.</source>
          <target state="translated">&lt;code&gt;--contains&lt;/code&gt; などの他のリスト形式のオプションが提供されている場合、このオプションは暗黙的に提供されます。詳細については、これらの各オプションのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="710c94d6943c052c3ce9d72b355d1824bacce0cd" translate="yes" xml:space="preserve">
          <source>This option is only applicable in non-verbose mode.</source>
          <target state="translated">このオプションは、非言語モードでのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="4cc49fd28601407189cb758fe5a41d5aaf8777ac" translate="yes" xml:space="preserve">
          <source>This option is only applicable when listing tags without annotation lines.</source>
          <target state="translated">このオプションは、注釈行のないタグをリストアップする場合にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="ac28aa5e8f93911465d1aaa74ae4db50de2f286b" translate="yes" xml:space="preserve">
          <source>This option is only relevant if we are tracking branches (using one of the repository layout options --trunk, --tags, --branches, --stdlayout). For each tracked branch, try to find out where its revision was copied from, and set a suitable parent in the first Git commit for the branch. This is especially helpful when we&amp;rsquo;re tracking a directory that has been moved around within the repository. If this feature is disabled, the branches created by &lt;code&gt;git svn&lt;/code&gt; will all be linear and not share any history, meaning that there will be no information on where branches were branched off or merged. However, following long/convoluted histories can take a long time, so disabling this feature may speed up the cloning process. This feature is enabled by default, use --no-follow-parent to disable it.</source>
          <target state="translated">このオプションは、ブランチを追跡している場合にのみ関連します（リポジトリレイアウトオプション--trunk、-tags、-branches、-stdlayoutのいずれかを使用）。追跡されたブランチごとに、そのリビジョンのコピー元を見つけて、ブランチの最初のGitコミットに適切な親を設定します。これは、リポジトリ内で移動されたディレクトリを追跡する場合に特に役立ちます。この機能が無効になっている場合、 &lt;code&gt;git svn&lt;/code&gt; によって作成されたブランチはすべて線形であり、履歴を共有しません。つまり、ブランチが分岐またはマージされた場所に関する情報はありません。ただし、長い/複雑な履歴をたどると時間がかかる場合があるため、この機能を無効にすると、クローン作成プロセスが高速化する場合があります。この機能はデフォルトで有効になっています。無効にするには--no-follow-parentを使用します。</target>
        </trans-unit>
        <trans-unit id="e12fdc170000781ad1c58dbca132db57e3472f94" translate="yes" xml:space="preserve">
          <source>This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.</source>
          <target state="translated">このオプションは、Git の Mac OS の実装でのみ使用されます。core.precomposeUnicode=true の場合、Git は Mac OS で行われたファイル名の unicode 分解を元に戻します。これは、Mac OS と Linux や Windows の間でリポジトリを共有するときに便利です。(Git for Windows 1.7.10 以降、もしくは cygwin 1.7 以下の Git が必要です)。falseにすると、ファイル名はGitによって完全に透過的に処理され、古いバージョンのGitとの下位互換性があります。</target>
        </trans-unit>
        <trans-unit id="f6656985205e20f496a0b3074744f80ac096af4d" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;apply&lt;/code&gt; 、 &lt;code&gt;branch&lt;/code&gt; 、 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;show&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="ec6b30f54355307a9689dd1f0d561ef40fa56b3b" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;store&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;apply&lt;/code&gt; 、 &lt;code&gt;drop&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;push&lt;/code&gt; 、 &lt;code&gt;save&lt;/code&gt; 、 &lt;code&gt;store&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="ca1fe023113c04188594b141d1e29c7346f8a146" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;pop&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;pop&lt;/code&gt; および &lt;code&gt;apply&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="14a31933c42436b9e91daec147e769ddb8e06d57" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt; commands.</source>
          <target state="translated">このオプションは、 &lt;code&gt;push&lt;/code&gt; コマンドと &lt;code&gt;save&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="1938ed399d7f045d62945a278113dd2db5e4506d" translate="yes" xml:space="preserve">
          <source>This option is only valid for &lt;code&gt;push&lt;/code&gt; command.</source>
          <target state="translated">このオプションは、 &lt;code&gt;push&lt;/code&gt; コマンドにのみ有効です。</target>
        </trans-unit>
        <trans-unit id="488a5b3855b8742f267f0b39339ad03e677bc10e" translate="yes" xml:space="preserve">
          <source>This option is only valid for add and update commands. Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">このオプションは、追加および更新コマンドに対してのみ有効です。q が指定されていない限り、標準エラーストリームが端末に接続されている場合、デフォルトで進行状況が標準エラーストリームに報告される。このフラグは、標準エラーストリームが端末に接続されていない場合でも、進行状況を強制的に報告する。</target>
        </trans-unit>
        <trans-unit id="564be2665790d0ee7a744865d472382d1cf20497" translate="yes" xml:space="preserve">
          <source>This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt; command.</source>
          <target state="translated">このオプションは、追加および更新コマンドに対してのみ有効です。これらのコマンドは、リモートリポジトリのクローンを作成する必要がある場合があります。この場合、このオプションは&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]&lt;/a&gt;コマンドに渡されます。</target>
        </trans-unit>
        <trans-unit id="1175e1719609394666bffaa81ec16b8052e4a6b8" translate="yes" xml:space="preserve">
          <source>This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule.</source>
          <target state="translated">このオプションは、add、deinit、update コマンドでのみ有効です。add を実行している場合は、無視されているサブモジュールのパスを追加できるようにします。deinit を実行している場合は、サブモジュールの作業ツリーがローカルの変更を含んでいても削除されます。update を実行している場合 (チェックアウト手続きでのみ有効です)、別のコミットに切り替える際にはサブモジュール内のローカルな変更を捨てます。</target>
        </trans-unit>
        <trans-unit id="2de8d442aa39a274aaa4b758d62aa7d0adb622e3" translate="yes" xml:space="preserve">
          <source>This option is only valid for foreach, update, status and sync commands. Traverse submodules recursively. The operation is performed not only in the submodules of the current repo, but also in any nested submodules inside those submodules (and so on).</source>
          <target state="translated">このオプションは、foreach、update、status、syncコマンドに対してのみ有効です。サブモジュールを再帰的にトラバースします。この操作は現在のレポのサブモジュールだけでなく、それらのサブモジュールの中にあるネストしたサブモジュールも含めて実行されます(など)。</target>
        </trans-unit>
        <trans-unit id="d01c54f91ad08eb6d9511d7549b500d6b89b1500" translate="yes" xml:space="preserve">
          <source>This option is only valid for status and summary commands. These commands typically use the commit found in the submodule HEAD, but with this option, the commit stored in the index is used instead.</source>
          <target state="translated">このオプションは、ステータスコマンドとサマリーコマンドに対してのみ有効です。これらのコマンドは通常、サブモジュールの HEAD にあるコミットを使用しますが、 このオプションを指定すると、代わりにインデックスに格納されているコミットが使用されます。</target>
        </trans-unit>
        <trans-unit id="7ba21174d5319ba108a98df185e2c79d000e199b" translate="yes" xml:space="preserve">
          <source>This option is only valid for the add command. It sets the submodule&amp;rsquo;s name to the given string instead of defaulting to its path. The name must be valid as a directory name and may not end with a &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">このオプションは、addコマンドに対してのみ有効です。デフォルトのパスではなく、サブモジュールの名前を指定された文字列に設定します。名前はディレクトリ名として有効である必要があり、 &lt;code&gt;/&lt;/code&gt; で終わらないでください。</target>
        </trans-unit>
        <trans-unit id="87ff71824f0ae07bd73763f995cf49d0ad4b94cd" translate="yes" xml:space="preserve">
          <source>This option is only valid for the deinit command. Unregister all submodules in the working tree.</source>
          <target state="translated">このオプションはdeinitコマンドでのみ有効です。作業ツリーのすべてのサブモジュールの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="f24783ef5194da88d7aca04af04dd4876a0ce3ed" translate="yes" xml:space="preserve">
          <source>This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules.</source>
          <target state="translated">このオプションは summary コマンドでのみ有効です。サマリーのサイズ (合計で表示されるコミット数)を制限します。0を指定するとサマリーは無効になります。負の数は無制限(デフォルト)を意味します。この制限は変更されたサブモジュールにのみ適用されます。追加/削除/タイプ変更されたサブモジュールのサイズは常に1に制限されます。</target>
        </trans-unit>
        <trans-unit id="ba7d2b303205764476dea6127f5143ab027381fd" translate="yes" xml:space="preserve">
          <source>This option is only valid for the summary command. This command compares the commit in the index with that in the submodule HEAD when this option is used.</source>
          <target state="translated">このオプションは summary コマンドでのみ有効です。このオプションを使用すると、このコマンドはインデックス内のコミットとサブモジュールの HEAD 内のコミットを比較します。</target>
        </trans-unit>
        <trans-unit id="0329e613a2d579c43cf813e4dcb872eed327d20c" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Checkout the commit recorded in the superproject on a detached HEAD in the submodule. This is the default behavior, the main use of this option is to override &lt;code&gt;submodule.$name.update&lt;/code&gt; when set to a value other than &lt;code&gt;checkout&lt;/code&gt;. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is either not explicitly set or set to &lt;code&gt;checkout&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパーモジュールに記録されたコミットを、サブモジュールの分離されたHEADでチェックアウトします。これはデフォルトの動作です &lt;code&gt;submodule.$name.update&lt;/code&gt; このオプションの主な用途は、 &lt;code&gt;checkout&lt;/code&gt; 以外の値に設定されている場合にsubmodule。$ name.updateをオーバーライドすることです。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が明示的に設定されていないか、または &lt;code&gt;checkout&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="7988d8bd0ba82c9f133c5f7cc525c2236228f253" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Clone new submodules in parallel with as many jobs. Defaults to the &lt;code&gt;submodule.fetchJobs&lt;/code&gt; option.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。新しいサブモジュールを同じ数のジョブと並行して複製します。デフォルトは &lt;code&gt;submodule.fetchJobs&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="d378f847e736854044b7df06d860154da6a30cd4" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Clone only one branch during update: HEAD or one specified by --branch.</source>
          <target state="translated">このオプションは update コマンドでのみ有効です。更新時には、HEADまたは--branchで指定されたブランチを1つだけクローンします。</target>
        </trans-unit>
        <trans-unit id="de5e49243a4037b1b14e7038956130dc87de6d4f" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Don&amp;rsquo;t fetch new objects from the remote site.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。リモートサイトから新しいオブジェクトをフェッチしないでください。</target>
        </trans-unit>
        <trans-unit id="f13e740e91a73f0a2574eefa11fc263894a39d8c" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Initialize all submodules for which &quot;git submodule init&quot; has not been called so far before updating.</source>
          <target state="translated">このオプションは update コマンドでのみ有効です。これまでのところ &quot;git submodule init&quot; が呼ばれていないすべてのサブモジュールを、更新前に初期化します。</target>
        </trans-unit>
        <trans-unit id="78bb9a5b0867074719f5c17324b183ac216eed4e" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Instead of using the superproject&amp;rsquo;s recorded SHA-1 to update the submodule, use the status of the submodule&amp;rsquo;s remote-tracking branch. The remote used is branch&amp;rsquo;s remote (&lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt;), defaulting to &lt;code&gt;origin&lt;/code&gt;. The remote branch used defaults to &lt;code&gt;master&lt;/code&gt;, but the branch name may be overridden by setting the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; option in either &lt;code&gt;.gitmodules&lt;/code&gt; or &lt;code&gt;.git/config&lt;/code&gt; (with &lt;code&gt;.git/config&lt;/code&gt; taking precedence).</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパープロジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに、サブモジュールのリモート追跡ブランチのステータスを使用します。使用されるリモートはブランチのリモート（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; ）で、デフォルトは &lt;code&gt;origin&lt;/code&gt; です。リモートブランチはデフォルトで &lt;code&gt;master&lt;/code&gt; を使用しましたが、ブランチ名は、 &lt;code&gt;.gitmodules&lt;/code&gt; または &lt;code&gt;.git/config&lt;/code&gt; （ &lt;code&gt;.git/config&lt;/code&gt; を優先）のいずれかで &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; オプションを設定することでオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="71febe80653ad4c9e80be61d4ea3dbe9011e0741" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Instead of using the superproject&amp;rsquo;s recorded SHA-1 to update the submodule, use the status of the submodule&amp;rsquo;s remote-tracking branch. The remote used is branch&amp;rsquo;s remote (&lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt;), defaulting to &lt;code&gt;origin&lt;/code&gt;. The remote branch used defaults to the remote &lt;code&gt;HEAD&lt;/code&gt;, but the branch name may be overridden by setting the &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; option in either &lt;code&gt;.gitmodules&lt;/code&gt; or &lt;code&gt;.git/config&lt;/code&gt; (with &lt;code&gt;.git/config&lt;/code&gt; taking precedence).</source>
          <target state="translated">このオプションは、updateコマンドにのみ有効です。スーパープロジェクトの記録されたSHA-1を使用してサブモジュールを更新する代わりに、サブモジュールのリモート追跡ブランチのステータスを使用します。使用されるリモートはブランチのリモート（ &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; ）であり、デフォルトは &lt;code&gt;origin&lt;/code&gt; です。使用されるリモートブランチのデフォルトはリモート &lt;code&gt;HEAD&lt;/code&gt; ですが、ブランチ名は、 &lt;code&gt;.gitmodules&lt;/code&gt; または &lt;code&gt;.git/config&lt;/code&gt; のいずれかで &lt;code&gt;submodule.&amp;lt;name&amp;gt;.branch&lt;/code&gt; オプションを設定することでオーバーライドできます（ &lt;code&gt;.git/config&lt;/code&gt; が優先されます）。</target>
        </trans-unit>
        <trans-unit id="c3d36d21960733622c3c4d0c9b1d02dde186ab4d" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Merge the commit recorded in the superproject into the current branch of the submodule. If this option is given, the submodule&amp;rsquo;s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve the resulting conflicts within the submodule with the usual conflict resolution tools. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is set to &lt;code&gt;merge&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパープロジェクトに記録されたコミットをサブモジュールの現在のブランチにマージします。このオプションを指定すると、サブモジュールのHEADは切り離されません。マージの失敗がこのプロセスを妨げる場合、通常の競合解決ツールを使用して、サブモジュール内で発生する競合を解決する必要があります。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が &lt;code&gt;merge&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="24320b0a3d3cc55ac6e67c5111e4d5b2024f7768" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. Rebase the current branch onto the commit recorded in the superproject. If this option is given, the submodule&amp;rsquo;s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve these failures with &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;. If the key &lt;code&gt;submodule.$name.update&lt;/code&gt; is set to &lt;code&gt;rebase&lt;/code&gt;, this option is implicit.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。スーパープロジェクトに記録されたコミットに現在のブランチをリベースします。このオプションを指定すると、サブモジュールのHEADは切り離されません。マージの失敗がこのプロセスを妨げる場合、&lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]で&lt;/a&gt;これらの失敗を解決する必要があります。キー &lt;code&gt;submodule.$name.update&lt;/code&gt; が &lt;code&gt;rebase&lt;/code&gt; に設定されている場合、このオプションは暗黙的です。</target>
        </trans-unit>
        <trans-unit id="7010a654e778ac0c1da27a5e658bfb8f3af2d2b7" translate="yes" xml:space="preserve">
          <source>This option is only valid for the update command. The initial clone of a submodule will use the recommended &lt;code&gt;submodule.&amp;lt;name&amp;gt;.shallow&lt;/code&gt; as provided by the &lt;code&gt;.gitmodules&lt;/code&gt; file by default. To ignore the suggestions use &lt;code&gt;--no-recommend-shallow&lt;/code&gt;.</source>
          <target state="translated">このオプションはupdateコマンドに対してのみ有効です。サブモジュールの最初のクローンは、デフォルトで &lt;code&gt;.gitmodules&lt;/code&gt; ファイルによって提供される推奨 &lt;code&gt;submodule.&amp;lt;name&amp;gt;.shallow&lt;/code&gt; を使用します。提案を無視するには、 &lt;code&gt;--no-recommend-shallow&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e6d7b3753dd95003bf8a5d9061fa7c1fb4ce2aaa" translate="yes" xml:space="preserve">
          <source>This option is only valid when &quot;--rebase&quot; is used.</source>
          <target state="translated">このオプションは、&quot;--rebase &quot;を使用した場合のみ有効である。</target>
        </trans-unit>
        <trans-unit id="98847da95477508a8a5d1e566e92d9a686be8a10" translate="yes" xml:space="preserve">
          <source>This option is particularly useful in avoiding false positives when a merged branch contained broken or non-buildable commits, but the merge itself was OK.</source>
          <target state="translated">このオプションは、マージされたブランチに壊れたコミットやビルド不可能なコミットが含まれていても、マージ自体は問題なかった場合に誤検出を避けるために特に有用です。</target>
        </trans-unit>
        <trans-unit id="f287cb1cbdf50b2a99b97c922a7a8e625bb0e374" translate="yes" xml:space="preserve">
          <source>This option is passed through to &lt;code&gt;git pack-objects&lt;/code&gt;.</source>
          <target state="translated">このオプションは &lt;code&gt;git pack-objects&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="4fbc055bad10c535a2fe42cbab527b95ac43fb4e" translate="yes" xml:space="preserve">
          <source>This option is primarily to help users who are used to older versions of Git, whose &quot;git add &amp;lt;pathspec&amp;gt;&amp;hellip;​&quot; was a synonym for &quot;git add --no-all &amp;lt;pathspec&amp;gt;&amp;hellip;​&quot;, i.e. ignored removed files.</source>
          <target state="translated">このオプションは主に、「git add &amp;lt;pathspec&amp;gt;&amp;hellip;」が「git add --no-all &amp;lt;pathspec&amp;gt;&amp;hellip;」の同義語である古いバージョンのGitに慣れているユーザー、つまり削除されたファイルを無視するユーザーを支援するためのものです。</target>
        </trans-unit>
        <trans-unit id="b78fb9017b343dcaa9f7e76e34c0b6aead88f71f" translate="yes" xml:space="preserve">
          <source>This option is similar to &lt;code&gt;--topo-order&lt;/code&gt; in the sense that no parent comes before all of its children, but otherwise commits are ordered according to their commit date.</source>
          <target state="translated">このオプションは、すべての子の前に親がないという意味では &lt;code&gt;--topo-order&lt;/code&gt; に似ていますが、それ以外の場合、コミットはコミット日に従って順序付けられます。</target>
        </trans-unit>
        <trans-unit id="45355afb761a7570eab836899016e010dbbaff37" translate="yes" xml:space="preserve">
          <source>This option is used internally to temporarily provide a non-negative default value for the --recurse-submodules option. All other methods of configuring fetch&amp;rsquo;s submodule recursion (such as settings in &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; and &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) override this option, as does specifying --[no-]recurse-submodules directly.</source>
          <target state="translated">このオプションは、-recurse-submodulesオプションに負でないデフォルト値を一時的に提供するために内部的に使用されます。-[no-] recurse-submodulesを直接指定するのと同様に、フェッチのサブモジュール再帰を構成する他のすべての方法（&lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt;や&lt;a href=&quot;git-config&quot;&gt;git-config [1]の設定など&lt;/a&gt;）は、このオプションをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="37e6c888c3b366c4018908c683d3076036665dbd" translate="yes" xml:space="preserve">
          <source>This option is useful in the case where one is developing a feature on top of an upstream branch. While the feature is being worked on, the upstream branch may advance and it may not be the best idea to keep rebasing on top of the upstream but to keep the base commit as-is.</source>
          <target state="translated">このオプションは、上流ブランチの上で機能を開発している場合に便利です。機能を開発している間は、上流のブランチが進むかもしれないので、上流のブランチの上でリベースを続けるのは最良のアイデアではないかもしれませんが、 ベースのコミットはそのままにしておきましょう。</target>
        </trans-unit>
        <trans-unit id="df85f593fd6f7620dd8216482ba39599038d6eaa" translate="yes" xml:space="preserve">
          <source>This option is valid for add and update commands. Create a &lt;code&gt;shallow&lt;/code&gt; clone with a history truncated to the specified number of revisions. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;</source>
          <target state="translated">このオプションは、追加および更新コマンドに有効です。指定したリビジョン数に切り捨てられた履歴を持つ &lt;code&gt;shallow&lt;/code&gt; クローンを作成します。&lt;a href=&quot;git-clone&quot;&gt;git-clone [1]を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="ebd5b9556122446be4baef760f1327190ef9a1e0" translate="yes" xml:space="preserve">
          <source>This option makes it possible to choose what action will be performed when there is already at least one trailer with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">このオプションを使用すると、メッセージに同じ&amp;lt;token&amp;gt;を持つトレーラがすでに少なくとも1つある場合に実行するアクションを選択できます。</target>
        </trans-unit>
        <trans-unit id="ccc070d377579e85f01a8bc02ef61c868f5331ee" translate="yes" xml:space="preserve">
          <source>This option makes it possible to choose what action will be performed when there is not yet any trailer with the same &amp;lt;token&amp;gt; in the message.</source>
          <target state="translated">このオプションを使用すると、メッセージ内に同じ&amp;lt;token&amp;gt;を持つトレーラーがまだない場合に実行するアクションを選択できます。</target>
        </trans-unit>
        <trans-unit id="f87ac9b403a45c29acabaf374d53994925318884" translate="yes" xml:space="preserve">
          <source>This option may be given up to three times, and specifies labels to be used in place of the corresponding file names in conflict reports. That is, &lt;code&gt;git merge-file -L x -L y -L z a b c&lt;/code&gt; generates output that looks like it came from files x, y and z instead of from files a, b and c.</source>
          <target state="translated">このオプションは3回まで指定でき、競合レポートで対応するファイル名の代わりに使用するラベルを指定します。つまり、 &lt;code&gt;git merge-file -L x -L y -L z a b c&lt;/code&gt; は、ファイルa、b、cではなく、ファイルx、y、zからの出力を生成します。</target>
        </trans-unit>
        <trans-unit id="e631233708c2bfee4790b72e1f69b49f86a6c1ad" translate="yes" xml:space="preserve">
          <source>This option may be specified more than once.</source>
          <target state="translated">このオプションは複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="ad4bbf67e7b293924d5786bf652c9c00512dbaee" translate="yes" xml:space="preserve">
          <source>This option may be specified more than once; if so, Git will report commits reachable from any of the given commits.</source>
          <target state="translated">このオプションは複数回指定することができます。その場合、Git は指定したコミットのいずれかから到達可能なコミットを報告します。</target>
        </trans-unit>
        <trans-unit id="02516672facfbf5a7b264eba6cd92c5455d92d79" translate="yes" xml:space="preserve">
          <source>This option may be specified multiple times.</source>
          <target state="translated">このオプションは複数回指定することができます。</target>
        </trans-unit>
        <trans-unit id="b397b665066a62a5850aaf1e8487dea9e6d48e99" translate="yes" xml:space="preserve">
          <source>This option may be useful if you have CVS revision numbers stored in commit messages, bug-tracking systems, email archives, and the like.</source>
          <target state="translated">このオプションは、コミットメッセージやバグ追跡システム、電子メールアーカイブなどに CVS リビジョン番号が保存されている場合に便利です。</target>
        </trans-unit>
        <trans-unit id="5f0fddd7193d3e6d239ce8fc4bc7fc077dbf4105" translate="yes" xml:space="preserve">
          <source>This option may be useful when the test you would perform in each step does not require a checked out tree.</source>
          <target state="translated">このオプションは、各ステップで実行するテストがチェックアウトされたツリーを必要としない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="17ca02a4d5f28c7e8971b8d1a382a0b6bcfa0d17" translate="yes" xml:space="preserve">
          <source>This option overrides this restriction if the current value of the remote ref is the expected value. &quot;git push&quot; fails otherwise.</source>
          <target state="translated">このオプションは、リモート ref の現在の値が期待値である場合にこの制限を上書きします。&quot;git push&quot; は失敗します。</target>
        </trans-unit>
        <trans-unit id="8d166b9e59f19f7598d41e509f594cbcbd0ac7f1" translate="yes" xml:space="preserve">
          <source>This option provides an additional limit on top of &lt;code&gt;--window&lt;/code&gt;; the window size will dynamically scale down so as to not take up more than &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. &lt;code&gt;--window-memory=0&lt;/code&gt; makes memory usage unlimited. The default is taken from the &lt;code&gt;pack.windowMemory&lt;/code&gt; configuration variable.</source>
          <target state="translated">このオプションは、-- &lt;code&gt;--window&lt;/code&gt; 加えて追加の制限を提供します。ウィンドウサイズはメモリ内で &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在するリポジトリで、大きなウィンドウでメモリ不足にならないようにする一方で、小さなオブジェクトで大きなウィンドウを利用できる場合に役立ちます。サイズの末尾には「k」、「m」、または「g」を付けることができます。 &lt;code&gt;--window-memory=0&lt;/code&gt; は、メモリ使用量を無制限にします。デフォルトは、 &lt;code&gt;pack.windowMemory&lt;/code&gt; 構成変数から取得されます。</target>
        </trans-unit>
        <trans-unit id="b37ac455915a6998f49ecb85f682ef29dfba0c63" translate="yes" xml:space="preserve">
          <source>This option provides an additional limit on top of &lt;code&gt;--window&lt;/code&gt;; the window size will dynamically scale down so as to not take up more than &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with &quot;k&quot;, &quot;m&quot;, or &quot;g&quot;. &lt;code&gt;--window-memory=0&lt;/code&gt; makes memory usage unlimited. The default is taken from the &lt;code&gt;pack.windowMemory&lt;/code&gt; configuration variable. Note that the actual memory usage will be the limit multiplied by the number of threads used by &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">このオプションは、-- &lt;code&gt;--window&lt;/code&gt; 加えて追加の制限を提供します。ウィンドウサイズはメモリ内で &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; バイトを超えないように動的に縮小されます。これは、大きなオブジェクトと小さなオブジェクトが混在するリポジトリで、大きなウィンドウでメモリ不足にならないようにする一方で、小さなオブジェクトで大きなウィンドウを利用できる場合に役立ちます。サイズの末尾には「k」、「m」、または「g」を付けることができます。 &lt;code&gt;--window-memory=0&lt;/code&gt; は、メモリ使用量を無制限にします。デフォルトは、 &lt;code&gt;pack.windowMemory&lt;/code&gt; 構成変数から取得されます。実際のメモリ使用量は、制限に&lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]が&lt;/a&gt;使用するスレッド数を掛けたものになることに注意してください。</target>
        </trans-unit>
        <trans-unit id="16a6b7273f3cccefcfa42e33a667c568aaee0875" translate="yes" xml:space="preserve">
          <source>This option sets how the tag message is cleaned up. The &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; can be one of &lt;code&gt;verbatim&lt;/code&gt;, &lt;code&gt;whitespace&lt;/code&gt; and &lt;code&gt;strip&lt;/code&gt;. The &lt;code&gt;strip&lt;/code&gt; mode is default. The &lt;code&gt;verbatim&lt;/code&gt; mode does not change message at all, &lt;code&gt;whitespace&lt;/code&gt; removes just leading/trailing whitespace lines and &lt;code&gt;strip&lt;/code&gt; removes both whitespace and commentary.</source>
          <target state="translated">このオプションは、タグメッセージのクリーンアップ方法を設定します。 &lt;code&gt;&amp;lt;mode&amp;gt;&lt;/code&gt; のいずれかを指定でき &lt;code&gt;verbatim&lt;/code&gt; 、 &lt;code&gt;whitespace&lt;/code&gt; と &lt;code&gt;strip&lt;/code&gt; 。 &lt;code&gt;strip&lt;/code&gt; モードがデフォルトです。 &lt;code&gt;verbatim&lt;/code&gt; モードでは、すべてのメッセージを変更しない &lt;code&gt;whitespace&lt;/code&gt; だけ/大手行と空白末尾削除し &lt;code&gt;strip&lt;/code&gt; 空白や解説の両方を削除します。</target>
        </trans-unit>
        <trans-unit id="1c04622cab5eac3fe5e20d1c189be97d2000ad23" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.ifexists&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.ifexists&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="de59f6641e33166f78c75c60b985eacdf1d2a0ea" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.ifmissing&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.ifmissing&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのそのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="6b156d8c8a67e1eaa9c71b8c4e454e308c17c450" translate="yes" xml:space="preserve">
          <source>This option takes the same values as the &lt;code&gt;trailer.where&lt;/code&gt; configuration variable and it overrides what is specified by that option for trailers with the specified &amp;lt;token&amp;gt;.</source>
          <target state="translated">このオプションは、 &lt;code&gt;trailer.where&lt;/code&gt; 構成変数と同じ値を取り、指定された&amp;lt;token&amp;gt;を持つトレーラーのそのオプションで指定されたものをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="7df9ff293572a5c1527bce59783d9544419daa5b" translate="yes" xml:space="preserve">
          <source>This option tells where a new trailer will be added.</source>
          <target state="translated">このオプションは、新しいトレーラーが追加される場所を指定します。</target>
        </trans-unit>
        <trans-unit id="b36c69b0196d300061790058cdc0665affb9915e" translate="yes" xml:space="preserve">
          <source>This option tells which characters are recognized as trailer separators. By default only &lt;code&gt;:&lt;/code&gt; is recognized as a trailer separator, except that &lt;code&gt;=&lt;/code&gt; is always accepted on the command line for compatibility with other git commands.</source>
          <target state="translated">このオプションは、トレーラセパレータとして認識される文字を示します。デフォルトでは、 &lt;code&gt;:&lt;/code&gt; のみがトレーラーセパレーターとして認識されますが、他のgitコマンドとの互換性のために &lt;code&gt;=&lt;/code&gt; はコマンドラインで常に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="d89b4c86a97ff8d1caa3cc84d59173003c0040dc" translate="yes" xml:space="preserve">
          <source>This option will cause fast-export to issue a &quot;deleteall&quot; directive for each commit followed by a full list of all files in the commit (as opposed to just listing the files which are different from the commit&amp;rsquo;s first parent).</source>
          <target state="translated">このオプションを使用すると、fast-exportは各コミットに対して「deleteall」ディレクティブを発行し、その後にコミット内のすべてのファイルの完全なリストが続きます（コミットの最初の親とは異なるファイルをリストするだけではありません）。</target>
        </trans-unit>
        <trans-unit id="f143abcfc92e5721db51d7183ec9951b417133b6" translate="yes" xml:space="preserve">
          <source>This option will cause git-svn to attempt to automatically populate the svn:mergeinfo property in the SVN repository when possible. Currently, this can only be done when dcommitting non-fast-forward merges where all parents but the first have already been pushed into SVN.</source>
          <target state="translated">このオプションを指定すると、git-svn は可能な限り自動的に svn:mergeinfo プロパティを SVN リポジトリに埋めようとします。現在のところ、これが可能なのは、最初の親を除くすべての親がすでに SVN にプッシュされている、fast-forward ではないマージを dcommitting しているときだけです。</target>
        </trans-unit>
        <trans-unit id="06697c041d5aacbd598da12e9917cf43b1b799c5" translate="yes" xml:space="preserve">
          <source>This option will cause the mapping from old to new objects to be loaded from named branch upon startup and saved as a new commit to that branch upon exit, enabling incremental of large trees. If &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; does not exist it will be created.</source>
          <target state="translated">このオプションにより、古いオブジェクトから新しいオブジェクトへのマッピングが、起動時に名前付きブランチからロードされ、終了時にそのブランチへの新しいコミットとして保存され、大きなツリーの増分が可能になります。場合 &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 存在しない、それが作成されます。</target>
        </trans-unit>
        <trans-unit id="dac1adaa75a920f5808dd15e4e9468c4b8319529" translate="yes" xml:space="preserve">
          <source>This output format is compatible with what &lt;code&gt;--index-info --stdin&lt;/code&gt; of &lt;code&gt;git update-index&lt;/code&gt; expects.</source>
          <target state="translated">この出力形式は、 &lt;code&gt;git update-index&lt;/code&gt; の &lt;code&gt;--index-info --stdin&lt;/code&gt; が期待するものと互換性があります。</target>
        </trans-unit>
        <trans-unit id="9b61a138f7f673e2e13a43bac58e20e6d27091cc" translate="yes" xml:space="preserve">
          <source>This outputs all the commit objects between the included and excluded commits, ordered by their distance to the included and excluded commits. Refs in &lt;code&gt;refs/bisect/&lt;/code&gt; are not used. The farthest from them is displayed first. (This is the only one displayed by &lt;code&gt;--bisect&lt;/code&gt;.)</source>
          <target state="translated">これにより、包含および除外されたコミット間のすべてのコミットオブジェクトが、包含および除外されたコミットまでの距離順に並べられて出力されます。中に参考文献 &lt;code&gt;refs/bisect/&lt;/code&gt; 使用されていません。それらから最も遠いものが最初に表示されます。（これは &lt;code&gt;--bisect&lt;/code&gt; で表示される唯一のものです。）</target>
        </trans-unit>
        <trans-unit id="c6b16b352aa83127a9d9220754dcd31555c3879e" translate="yes" xml:space="preserve">
          <source>This outputs something like this (the actual commit object names would be different)</source>
          <target state="translated">これは以下のようなものを出力します (実際のコミットオブジェクト名は異なるでしょう)。</target>
        </trans-unit>
        <trans-unit id="05fcf2a461c52cf42967559d01dbd73ffe108135" translate="yes" xml:space="preserve">
          <source>This overrides a previous &lt;code&gt;-g&lt;/code&gt; or &lt;code&gt;--gui&lt;/code&gt; setting and reads the default merge tool will be read from the configured &lt;code&gt;merge.tool&lt;/code&gt; variable.</source>
          <target state="translated">これにより、以前の &lt;code&gt;-g&lt;/code&gt; または &lt;code&gt;--gui&lt;/code&gt; 設定が上書きされ、デフォルトのマージツールが読み取られ、構成 &lt;code&gt;merge.tool&lt;/code&gt; 変数から読み取られます。</target>
        </trans-unit>
        <trans-unit id="cf7619d964802ced013b07a7c34a4262a7e0e3f4" translate="yes" xml:space="preserve">
          <source>This page can be displayed with &lt;code&gt;git help help&lt;/code&gt; or &lt;code&gt;git help --help&lt;/code&gt;</source>
          <target state="translated">このページは、 &lt;code&gt;git help help&lt;/code&gt; または &lt;code&gt;git help --help&lt;/code&gt; で表示できます。</target>
        </trans-unit>
        <trans-unit id="d990ef47ac594dcb10bc55890ec7a6963b3ffaed" translate="yes" xml:space="preserve">
          <source>This particular format is supplied as it&amp;rsquo;s short to implement and may be useful to a process that wants to create a new commit right now, without needing to use a working directory or &lt;code&gt;git update-index&lt;/code&gt;.</source>
          <target state="translated">この特定の形式は、実装するのが短いため提供されており、作業ディレクトリや &lt;code&gt;git update-index&lt;/code&gt; を使用する必要なく、新しいコミットを今すぐ作成したいプロセスに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="3ace4cf0777df858ca1c6440d5cccb2ed6637934" translate="yes" xml:space="preserve">
          <source>This prints the name of a commit they are both based on. You should now look up the tree objects of those commits, which you can easily do with</source>
          <target state="translated">これは、両者のベースとなっているコミットの名前を表示します。これらのコミットのツリーオブジェクトを調べなければなりません。</target>
        </trans-unit>
        <trans-unit id="65ce33f2a6f411ae54de75d77a4a5c5e2663fba3" translate="yes" xml:space="preserve">
          <source>This program computes which packs in your repository are redundant. The output is suitable for piping to &lt;code&gt;xargs rm&lt;/code&gt; if you are in the root of the repository.</source>
          <target state="translated">このプログラムは、リポジトリ内のどのパックが冗長であるかを計算します。リポジトリのルートにいる場合、出力は &lt;code&gt;xargs rm&lt;/code&gt; へのパイプに適しています。</target>
        </trans-unit>
        <trans-unit id="9dec60739fdc5804a4abedc6cf66847493211890" translate="yes" xml:space="preserve">
          <source>This program dumps the given revisions in a form suitable to be piped into &lt;code&gt;git fast-import&lt;/code&gt;.</source>
          <target state="translated">このプログラムは、指定されたリビジョンを &lt;code&gt;git fast-import&lt;/code&gt; にパイプするのに適した形式でダンプします。</target>
        </trans-unit>
        <trans-unit id="21943cdf9cd81593906492b86163eaa305da0be9" translate="yes" xml:space="preserve">
          <source>This program is usually not what the end user wants to run directly. Most end users want to use one of the existing frontend programs, which parses a specific type of foreign source and feeds the contents stored there to &lt;code&gt;git fast-import&lt;/code&gt;.</source>
          <target state="translated">このプログラムは通常、エンドユーザーが直接実行したいものではありません。ほとんどのエンドユーザーは、既存のフロントエンドプログラムの1つを使用したいと考えています。このプログラムは、特定の種類の外部ソースを解析し、そこに格納されているコンテンツを &lt;code&gt;git fast-import&lt;/code&gt; にフィードします。</target>
        </trans-unit>
        <trans-unit id="17acfb3fc2cc80c07ee41f3eeadca000eefd6ee0" translate="yes" xml:space="preserve">
          <source>This program searches the &lt;code&gt;$GIT_OBJECT_DIRECTORY&lt;/code&gt; for all objects that currently exist in a pack file as well as the independent object directories.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;$GIT_OBJECT_DIRECTORY&lt;/code&gt; を検索して、現在パックファイルに存在するすべてのオブジェクトと、独立したオブジェクトディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="a85a25d731117b0f9fdffb50b50cd41a205c14dd" translate="yes" xml:space="preserve">
          <source>This public repository could further be mirrored, and that is how Git repositories at &lt;code&gt;kernel.org&lt;/code&gt; are managed.</source>
          <target state="translated">このパブリックリポジトリはさらにミラーリングすることができます。これが、 &lt;code&gt;kernel.org&lt;/code&gt; の Gitリポジトリを管理する方法です。</target>
        </trans-unit>
        <trans-unit id="3f74cf126c451b6a68e67763c97a8253f485453b" translate="yes" xml:space="preserve">
          <source>This puts a Git archive of the named CVS module in the directory &amp;lt;destination&amp;gt;, which will be created if necessary.</source>
          <target state="translated">これにより、指定したCVSモジュールのGitアーカイブがディレクトリ&amp;lt;destination&amp;gt;に配置され、必要に応じて作成されます。</target>
        </trans-unit>
        <trans-unit id="8831ce4f64ae931ef68e9c4eb0b8a48320fea478" translate="yes" xml:space="preserve">
          <source>This rebase can be performed using the &lt;code&gt;--rebase-merges&lt;/code&gt; option. It will generate a todo list looking like this:</source>
          <target state="translated">このリベースは &lt;code&gt;--rebase-merges&lt;/code&gt; オプションを使用して実行できます。次のようなToDoリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="5e2dd779ca9f11c05d6bae58c7d8a031f404dc72" translate="yes" xml:space="preserve">
          <source>This ref is unchanged since the last import or fetch, although the helper cannot necessarily determine what value that produced.</source>
          <target state="translated">この参照は最後のインポートやフェッチから変更されていませんが、ヘルパーはそれがどのような値を生成したかを決定することはできません。</target>
        </trans-unit>
        <trans-unit id="0e48a6f59fc5d06bf39a026582c3a2674a30ee86" translate="yes" xml:space="preserve">
          <source>This remote helper is transparently used by Git when you use commands such as &quot;git fetch &amp;lt;URL&amp;gt;&quot;, &quot;git clone &amp;lt;URL&amp;gt;&quot;, , &quot;git push &amp;lt;URL&amp;gt;&quot; or &quot;git remote add &amp;lt;nick&amp;gt; &amp;lt;URL&amp;gt;&quot;, where &amp;lt;URL&amp;gt; begins with &lt;code&gt;ext::&lt;/code&gt;. Examples:</source>
          <target state="translated">このリモートヘルパーは、「git fetch &amp;lt;URL&amp;gt;」、「git clone &amp;lt;URL&amp;gt;」、「git push &amp;lt;URL&amp;gt;」、「git remote add &amp;lt;nick&amp;gt; &amp;lt;URL&amp;gt;」などのコマンドを使用すると、Gitによって透過的に使用されます。ここで、&amp;lt;URL&amp;gt;は &lt;code&gt;ext::&lt;/code&gt; 始まります。例：</target>
        </trans-unit>
        <trans-unit id="76e69f76fb018209940d2bd178b055119cc99cef" translate="yes" xml:space="preserve">
          <source>This remote helper uses the specified &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; to connect to a remote Git server.</source>
          <target state="translated">このリモートヘルパーは、指定された &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt; を使用してリモートGitサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="08f3058ad626936f077bcdb5101be9917b27eae0" translate="yes" xml:space="preserve">
          <source>This removes the &lt;code&gt;WIP&lt;/code&gt; commit from the commit history, and sets your working tree to the state just before you made that snapshot.</source>
          <target state="translated">これにより、コミット履歴から &lt;code&gt;WIP&lt;/code&gt; コミットが削除され、作業ツリーがそのスナップショットを作成する直前の状態に設定されます。</target>
        </trans-unit>
        <trans-unit id="6cde691b95501235edce70baf30f3d475a6f05af" translate="yes" xml:space="preserve">
          <source>This removes the file from the index while keeping it in the working directory.</source>
          <target state="translated">これは、作業ディレクトリにファイルを保持したままインデックスからファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="f2e99bc05d5874bb5e940e93689126e6c4aa347e" translate="yes" xml:space="preserve">
          <source>This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the &lt;code&gt;recursive&lt;/code&gt; merge strategy.</source>
          <target state="translated">これは任意の数のヘッドを解決しますが、マージの結果のツリーは常に現在のブランチヘッドのツリーであり、他のすべてのブランチからのすべての変更を事実上無視します。これは、サイドブランチの古い開発履歴を置き換えるために使用されることを意図しています。これは、 &lt;code&gt;recursive&lt;/code&gt; マージ戦略の-Xoursオプションとは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="053dd73bd0ed92de95c5b132a1b4a0308f96cd04" translate="yes" xml:space="preserve">
          <source>This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.</source>
          <target state="translated">これは、2 つ以上のヘッドを持つケースを解決しますが、手動での解決が必要な複雑なマージは行いません。これは、主にトピックブランチのヘッドをまとめて使用することを目的としています。これは、複数のブランチを引っ張ったりマージしたりする場合のデフォルトのマージ方法です。</target>
        </trans-unit>
        <trans-unit id="e1337ea8d65ee53d09143c99f1f587dd31c2d238" translate="yes" xml:space="preserve">
          <source>This results in:</source>
          <target state="translated">これは結果的に</target>
        </trans-unit>
        <trans-unit id="a3acfff86d0ac3c7e1c1af7dc1decad57125efa5" translate="yes" xml:space="preserve">
          <source>This runs &lt;code&gt;git fsck --unreachable&lt;/code&gt; using all the refs available in &lt;code&gt;refs/&lt;/code&gt;, optionally with additional set of objects specified on the command line, and prunes all unpacked objects unreachable from any of these head objects from the object database. In addition, it prunes the unpacked objects that are also found in packs by running &lt;code&gt;git prune-packed&lt;/code&gt;. It also removes entries from .git/shallow that are not reachable by any ref.</source>
          <target state="translated">これは &lt;code&gt;refs/&lt;/code&gt; で利用可能なすべての参照を使用して &lt;code&gt;git fsck --unreachable&lt;/code&gt; を実行し、オプションでコマンドラインで追加のオブジェクトセットを指定して、オブジェクトデータベースからこれらのヘッドオブジェクトのいずれからも到達できないアンパックされたすべてのオブジェクトをプルーニングします。さらに、 &lt;code&gt;git prune-packed&lt;/code&gt; を実行して、パックにも含まれているアンパックされたオブジェクトを整理します。また、どの参照からも到達できないエントリを.git / shallowから削除します。</target>
        </trans-unit>
        <trans-unit id="66bb2cd044765c7338efb3b55d3b51e463e22970" translate="yes" xml:space="preserve">
          <source>This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge. This option is meant to be used when merging branches with different clean filters or end-of-line normalization rules. See &quot;Merging branches with differing checkin/checkout attributes&quot; in &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">これは、3者間マージを解決するときに、ファイルの3つのステージすべての仮想チェックアウトとチェックインを実行します。このオプションは、ブランチをさまざまなクリーンフィルターまたは行末の正規化ルールとマージするときに使用することを目的としています。詳細については、&lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]の&lt;/a&gt;「異なるチェックイン/チェックアウト属性を持つブランチのマージ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d37cfee1983b15d675f4e1a4163b8c978a492421" translate="yes" xml:space="preserve">
          <source>This says &quot;include everything in root, but nothing two levels below root.&quot;</source>
          <target state="translated">これは、&quot;ルートにはすべてのものを含むが、ルートより2つ下のレベルのものは含まない &quot;と書いてあります。</target>
        </trans-unit>
        <trans-unit id="b3bd580b61f2b6d754a6c049f07ff919549d1439" translate="yes" xml:space="preserve">
          <source>This says &quot;include everything in root, but nothing two levels below root.&quot; If we then add the folder &lt;code&gt;A/B/C&lt;/code&gt; as a recursive pattern, the folders &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;A/B&lt;/code&gt; are added as parent patterns. The resulting sparse-checkout file is now</source>
          <target state="translated">これは、「すべてをルートに含めるが、ルートの2つ下のレベルは含めない」ことを意味します。その後、フォルダー &lt;code&gt;A/B/C&lt;/code&gt; を再帰パターンとして追加 &lt;code&gt;A&lt;/code&gt; と、フォルダーAと &lt;code&gt;A/B&lt;/code&gt; が親パターンとして追加されます。結果のスパースチェックアウトファイルは</target>
        </trans-unit>
        <trans-unit id="9f2fcd6a73ae4ce542d08fc5e7f799314e8e80fc" translate="yes" xml:space="preserve">
          <source>This script can be passed to &quot;git bisect run&quot; to find the commit that introduced a performance regression:</source>
          <target state="translated">このスクリプトを &quot;git bisect run&quot; に渡すことで、パフォーマンスの低下をもたらしたコミットを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="72c86095923977328df35910b245e776428b840b" translate="yes" xml:space="preserve">
          <source>This script is included in various scripts to supply routines to parse files under $GIT_DIR/remotes/ and $GIT_DIR/branches/ and configuration variables that are related to fetching, pulling and pushing.</source>
          <target state="translated">このスクリプトは、$GIT_DIR/remotes/および$GIT_DIR/branches/以下のファイルをパースするルーチンと、フェッチ、プル、プッシュに関連する設定変数を提供するための様々なスクリプトに含まれています。</target>
        </trans-unit>
        <trans-unit id="a405ee4e7ff4cc67a738558081388543481850c0" translate="yes" xml:space="preserve">
          <source>This section can also be used by those who respond to &lt;code&gt;git
request-pull&lt;/code&gt; or pull-request on GitHub (www.github.com) to integrate the work of others into their history. A sub-area lieutenant for a repository will act both as a participant and as an integrator.</source>
          <target state="translated">このセクションは、GitHub（www.github.com）で &lt;code&gt;git request-pull&lt;/code&gt; またはpull-requestに応答して他のユーザーの作業を履歴に統合する場合にも使用できます。リポジトリのサブエリア代理は、参加者とインテグレータの両方として機能します。</target>
        </trans-unit>
        <trans-unit id="53af582e47690e9820cb012bdcbccf97b8def7d3" translate="yes" xml:space="preserve">
          <source>This section explains how to configure some common webservers to run gitweb. In all cases, &lt;code&gt;/path/to/gitweb&lt;/code&gt; in the examples is the directory you ran installed gitweb in, and contains &lt;code&gt;gitweb_config.perl&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、gitwebを実行するようにいくつかの一般的なWebサーバーを構成する方法について説明します。すべての場合において、例の &lt;code&gt;/path/to/gitweb&lt;/code&gt; は、実行したgitwebがインストールされているディレクトリであり、gitweb_config.perlが含まれてい &lt;code&gt;gitweb_config.perl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79c0f1f15a38eae1b5cc2a5e381bfbc844ef9486" translate="yes" xml:space="preserve">
          <source>This section is only included if a packfile section is also included in the response.</source>
          <target state="translated">このセクションは、パックファイルセクションが応答にも含まれている場合にのみ含まれます。</target>
        </trans-unit>
        <trans-unit id="f3cd5eb5a3885e012dabb05171cc566728c1791b" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git archive --remote&lt;/code&gt;. It is disabled by default, but a repository can enable it by setting &lt;code&gt;daemon.uploadarch&lt;/code&gt; configuration item to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git archive --remote&lt;/code&gt; を提供します。デフォルトでは無効になっていますが、リポジトリは &lt;code&gt;daemon.uploadarch&lt;/code&gt; 設定項目を &lt;code&gt;true&lt;/code&gt; に設定することで有効にできます。</target>
        </trans-unit>
        <trans-unit id="a1fc9be9532fca80163bd11748e3553d0b5b85a4" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients. It is enabled by default, but a repository can disable it by setting &lt;code&gt;daemon.uploadpack&lt;/code&gt; configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これはデフォルトで有効になっていますが、リポジトリーは、 &lt;code&gt;daemon.uploadpack&lt;/code&gt; 構成項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ce507c3877f92fc6c1de609ca683d1e2a4e1b26f" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git fetch-pack&lt;/code&gt; and &lt;code&gt;git ls-remote&lt;/code&gt; clients. It is enabled by default, but a repository can disable it by setting this configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git fetch-pack&lt;/code&gt; および &lt;code&gt;git ls-remote&lt;/code&gt; クライアントにサービスを提供します。これはデフォルトで有効になっていますが、リポジトリはこの設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="f25bae0e6df9b1b4a76a588d485b17d422e56c18" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git send-pack&lt;/code&gt; clients, allowing anonymous push. It is disabled by default, as there is &lt;code&gt;no&lt;/code&gt; authentication in the protocol (in other words, anybody can push anything into the repository, including removal of refs). This is solely meant for a closed LAN setting where everybody is friendly. This service can be enabled by setting &lt;code&gt;daemon.receivepack&lt;/code&gt; configuration item to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git send-pack&lt;/code&gt; クライアントにサービスを提供し、匿名のプッシュを許可します。プロトコルには認証が &lt;code&gt;no&lt;/code&gt; 、デフォルトでは無効になっています（つまり、参照の削除を含め、誰でもリポジトリに何かをプッシュできます）。これは、誰もが親しみやすい閉鎖的なLAN設定のためだけのものです。このサービスを有効にするには、 &lt;code&gt;daemon.receivepack&lt;/code&gt; 構成アイテムを &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="6b2859849402fde4d51ffe73c129c97d00cb6083" translate="yes" xml:space="preserve">
          <source>This serves &lt;code&gt;git send-pack&lt;/code&gt; clients, allowing push. It is disabled by default for anonymous users, and enabled by default for users authenticated by the web server. It can be disabled by setting this item to &lt;code&gt;false&lt;/code&gt;, or enabled for all users, including anonymous users, by setting it to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;git send-pack&lt;/code&gt; クライアントにサービスを提供し、プッシュを許可します。匿名ユーザーの場合はデフォルトで無効になり、Webサーバーで認証されたユーザーの場合はデフォルトで有効になります。この項目を &lt;code&gt;false&lt;/code&gt; に設定して無効にするか、 &lt;code&gt;true&lt;/code&gt; に設定して匿名ユーザーを含むすべてのユーザーに対して有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="1d789007e515492a9cc42830b12a07ff1db6d084" translate="yes" xml:space="preserve">
          <source>This serves Git clients older than version 1.6.6 that are unable to use the upload pack service. When enabled, clients are able to read any file within the repository, including objects that are no longer reachable from a branch but are still present. It is enabled by default, but a repository can disable it by setting this configuration item to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">これは、アップロードパックサービスを使用できないバージョン1.6.6より古いGitクライアントにサービスを提供します。有効にすると、クライアントは、ブランチから到達できなくなってもまだ存在しているオブジェクトを含め、リポジトリ内の任意のファイルを読み取ることができます。これはデフォルトで有効になっていますが、リポジトリはこの設定項目を &lt;code&gt;false&lt;/code&gt; に設定することで無効にできます。</target>
        </trans-unit>
        <trans-unit id="5456200c93d8963943eca093573a9d8938a4ea5f" translate="yes" xml:space="preserve">
          <source>This sets GIT_SVN_ID (instead of using the environment). This allows the user to override the default refname to fetch from when tracking a single URL. The &lt;code&gt;log&lt;/code&gt; and &lt;code&gt;dcommit&lt;/code&gt; commands no longer require this switch as an argument.</source>
          <target state="translated">これにより、（環境を使用する代わりに）GIT_SVN_IDが設定されます。これにより、ユーザーは、単一のURLを追跡するときに取得するデフォルトの参照名を上書きできます。 &lt;code&gt;log&lt;/code&gt; と &lt;code&gt;dcommit&lt;/code&gt; コマンドは、もはや引数としてこのスイッチを必要としません。</target>
        </trans-unit>
        <trans-unit id="acb244d7aa46a820614aa10decb4464bc8ecabb6" translate="yes" xml:space="preserve">
          <source>This setting can be disabled by the &lt;code&gt;--no-notes&lt;/code&gt; option, overridden by the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable, and overridden by the &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; option.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; &lt;code&gt;--no-notes&lt;/code&gt; オプションで無効にしたり、GIT_NOTES_DISPLAY_REF環境変数でオーバーライドしたり、 &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; オプションでオーバーライドしたりできます。</target>
        </trans-unit>
        <trans-unit id="a8f435ef26eec94bd5c23846a74c0f4d57a87c8f" translate="yes" xml:space="preserve">
          <source>This setting can be overridden by passing the &lt;code&gt;--strategy&lt;/code&gt; option.</source>
          <target state="translated">この設定は &lt;code&gt;--strategy&lt;/code&gt; オプションを渡すことで上書きできます。</target>
        </trans-unit>
        <trans-unit id="5d273f23cd160340c4f9b3fbc5a088c0fc2c32be" translate="yes" xml:space="preserve">
          <source>This setting can be overridden by the &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; environment variable.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_REF&lt;/code&gt; 環境変数によって上書きできます。</target>
        </trans-unit>
        <trans-unit id="b28435a905552ea063d5203034696b428fdc0b87" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; environment variable, which must be a colon separated list of refs or globs.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_DISPLAY_REF&lt;/code&gt; 環境変数で上書きできます。これは、コロンで区切られた参照またはグロブのリストである必要があります。</target>
        </trans-unit>
        <trans-unit id="45473aa6b3903d5487aab6b473bcf528e266cdec" translate="yes" xml:space="preserve">
          <source>This setting can be overridden with the &lt;code&gt;GIT_NOTES_REWRITE_MODE&lt;/code&gt; environment variable.</source>
          <target state="translated">この設定は、 &lt;code&gt;GIT_NOTES_REWRITE_MODE&lt;/code&gt; 環境変数で上書きできます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
