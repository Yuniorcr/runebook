<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="phpunit">
    <body>
      <group id="phpunit">
        <trans-unit id="9faae7d97dd101c5c4854c8b4b608d689915ad64" translate="yes" xml:space="preserve">
          <source>&quot;Behind the scenes&quot;, PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;code&gt;createMock()&lt;/code&gt; method is used.</source>
          <target state="translated">&quot;장면 뒤&quot;에서 PHPUnit은 &lt;code&gt;createMock()&lt;/code&gt; 메소드가 사용될 때 원하는 동작을 구현하는 새로운 PHP 클래스를 자동으로 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="0ff50c2d9bad6a19669320fe722ccd4651d7db08" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2005&amp;ndash;2017 Sebastian Bergmann</source>
          <target state="translated">&amp;copy; 2005&amp;ndash;2017 세바스찬 베르그 만</target>
        </trans-unit>
        <trans-unit id="7b4a2846afffc9e2af3f9f49a50af2a5b747529b" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2005&amp;ndash;2020 Sebastian Bergmann</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883d394cf5552b923ae438c816023f23617d64f1" translate="yes" xml:space="preserve">
          <source>&amp;hellip; TBD &amp;hellip;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5be81007cd25f9ae62329ce035a6fa6daf56aee" translate="yes" xml:space="preserve">
          <source>&amp;ldquo;Behind the scenes&amp;rdquo;, PHPUnit automatically generates a new PHP class that implements the desired behavior when the &lt;code&gt;createStub()&lt;/code&gt; method is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddc938477d0949800e53719fa87ca04c26764df" translate="yes" xml:space="preserve">
          <source>--Adrian Kuhn et. al.</source>
          <target state="translated">--Adrian Kuhn et. 알.</target>
        </trans-unit>
        <trans-unit id="c05df6c3d27484ddb78ca31cf80cac112e86fc79" translate="yes" xml:space="preserve">
          <source>--Benjamin Smedberg</source>
          <target state="translated">-벤자민 스 메드 버그</target>
        </trans-unit>
        <trans-unit id="606dd837ef05345781226967e14e5d978286cb6f" translate="yes" xml:space="preserve">
          <source>--Erich Gamma</source>
          <target state="translated">-에리히 감마</target>
        </trans-unit>
        <trans-unit id="d36c6f933e5fabc86e0071e09f13e781dd9f48c4" translate="yes" xml:space="preserve">
          <source>--Gerard Meszaros</source>
          <target state="translated">-제라드 메사 로스</target>
        </trans-unit>
        <trans-unit id="7e83b9998dcf9952734c55bf24eb54ccb6d1c6ad" translate="yes" xml:space="preserve">
          <source>--Martin Fowler</source>
          <target state="translated">-마틴 파울러</target>
        </trans-unit>
        <trans-unit id="75ce643118d3002dd6d89b954f38210766bbf796" translate="yes" xml:space="preserve">
          <source>--Wikipedia</source>
          <target state="translated">--Wikipedia</target>
        </trans-unit>
        <trans-unit id="9795c52a2fbf529d1c81e157968515d93687b947" translate="yes" xml:space="preserve">
          <source>--bootstrap</source>
          <target state="translated">--bootstrap</target>
        </trans-unit>
        <trans-unit id="be47431f312b6f6d62822dfb8821a043abd67158" translate="yes" xml:space="preserve">
          <source>--colors</source>
          <target state="translated">--colors</target>
        </trans-unit>
        <trans-unit id="5ff4b83cc328130aae35496b4ef5c28dd22f5f3c" translate="yes" xml:space="preserve">
          <source>--columns</source>
          <target state="translated">--columns</target>
        </trans-unit>
        <trans-unit id="6005ec244d89010db1549a3990b5b0f04eae838d" translate="yes" xml:space="preserve">
          <source>--configuration, -c</source>
          <target state="translated">--configuration, -c</target>
        </trans-unit>
        <trans-unit id="9e8124239e5a73938f915f618ba43b15d38d52e9" translate="yes" xml:space="preserve">
          <source>--coverage-clover</source>
          <target state="translated">--coverage-clover</target>
        </trans-unit>
        <trans-unit id="8bef1dbaa2586a3e3a1522d0dc291e8a396675db" translate="yes" xml:space="preserve">
          <source>--coverage-crap4j</source>
          <target state="translated">--coverage-crap4j</target>
        </trans-unit>
        <trans-unit id="924f757454550180e8c4fe6357fd4f9d97c13799" translate="yes" xml:space="preserve">
          <source>--coverage-html</source>
          <target state="translated">--coverage-html</target>
        </trans-unit>
        <trans-unit id="e70b7a859338d6330b0353d14622d5fe99d544b5" translate="yes" xml:space="preserve">
          <source>--coverage-php</source>
          <target state="translated">--coverage-php</target>
        </trans-unit>
        <trans-unit id="a47f4e9f9f1eb6ce04756c06c47410a80d4516b8" translate="yes" xml:space="preserve">
          <source>--coverage-text</source>
          <target state="translated">--coverage-text</target>
        </trans-unit>
        <trans-unit id="1dd0c962581e2b33496ec055436f8c0f509503a3" translate="yes" xml:space="preserve">
          <source>--debug</source>
          <target state="translated">--debug</target>
        </trans-unit>
        <trans-unit id="7a8e9ccc5cf17a6f91213c98b1bacb6600fbbd84" translate="yes" xml:space="preserve">
          <source>--disallow-test-output</source>
          <target state="translated">--disallow-test-output</target>
        </trans-unit>
        <trans-unit id="58b7a977f2bad3cd51906fd465295b96f6c161a8" translate="yes" xml:space="preserve">
          <source>--disallow-todo-tests</source>
          <target state="translated">--disallow-todo-tests</target>
        </trans-unit>
        <trans-unit id="fec7fae7b7753774415a18f7177ce7cc24928404" translate="yes" xml:space="preserve">
          <source>--enforce-time-limit</source>
          <target state="translated">--enforce-time-limit</target>
        </trans-unit>
        <trans-unit id="0565090c915f8071f7370df31ed6785b83124474" translate="yes" xml:space="preserve">
          <source>--exclude-group</source>
          <target state="translated">--exclude-group</target>
        </trans-unit>
        <trans-unit id="aada6fc7f15481dfefa29579baed612d0ebc6236" translate="yes" xml:space="preserve">
          <source>--filter</source>
          <target state="translated">--filter</target>
        </trans-unit>
        <trans-unit id="6f8e603ca69dbd92335a018a1d44f2b8393b8826" translate="yes" xml:space="preserve">
          <source>--group</source>
          <target state="translated">--group</target>
        </trans-unit>
        <trans-unit id="8db2d08e8ca64eb291c8c566c42da1a5bac7d84a" translate="yes" xml:space="preserve">
          <source>--include-path</source>
          <target state="translated">--include-path</target>
        </trans-unit>
        <trans-unit id="a8365d50cba7bdbab8fffc2a81ed208b7ad2b3d2" translate="yes" xml:space="preserve">
          <source>--list-groups</source>
          <target state="translated">--list-groups</target>
        </trans-unit>
        <trans-unit id="384e088dc75c5f9823bc7b36fe7c58129c3a3afa" translate="yes" xml:space="preserve">
          <source>--loader</source>
          <target state="translated">--loader</target>
        </trans-unit>
        <trans-unit id="eecad2ef381d03482545302946ef52c7c5d2be7a" translate="yes" xml:space="preserve">
          <source>--log-junit</source>
          <target state="translated">--log-junit</target>
        </trans-unit>
        <trans-unit id="5b120092ab1c8d006fff6b4280e071de987b6577" translate="yes" xml:space="preserve">
          <source>--no-configuration</source>
          <target state="translated">--no-configuration</target>
        </trans-unit>
        <trans-unit id="0217a5ed451a9d2ca8c68d01abb67407067b59f4" translate="yes" xml:space="preserve">
          <source>--no-globals-backup</source>
          <target state="translated">--no-globals-backup</target>
        </trans-unit>
        <trans-unit id="323fdcc86c16474d8f2b214619d9f785bc0addd2" translate="yes" xml:space="preserve">
          <source>--printer</source>
          <target state="translated">--printer</target>
        </trans-unit>
        <trans-unit id="fbe3a902b6c2657e7d30f346db846f9aa7f1731b" translate="yes" xml:space="preserve">
          <source>--process-isolation</source>
          <target state="translated">--process-isolation</target>
        </trans-unit>
        <trans-unit id="5013682fd37fc483a899069ddc6fb8362b53f441" translate="yes" xml:space="preserve">
          <source>--repeat</source>
          <target state="translated">--repeat</target>
        </trans-unit>
        <trans-unit id="a2d008c2bd5ffb543ea5b206d28d261e7c33061d" translate="yes" xml:space="preserve">
          <source>--report-useless-tests</source>
          <target state="translated">--report-useless-tests</target>
        </trans-unit>
        <trans-unit id="4c459633968f11521fb11493001615cfefcfd4a5" translate="yes" xml:space="preserve">
          <source>--static-backup</source>
          <target state="translated">--static-backup</target>
        </trans-unit>
        <trans-unit id="920071048f6e061bb0f343e803978da9feecc6f6" translate="yes" xml:space="preserve">
          <source>--stderr</source>
          <target state="translated">--stderr</target>
        </trans-unit>
        <trans-unit id="66d6b3c83fbf51d9a09a16e53cf6f37a619db66d" translate="yes" xml:space="preserve">
          <source>--stop-on-error</source>
          <target state="translated">--stop-on-error</target>
        </trans-unit>
        <trans-unit id="121c88513f2cc6e6d79575274450724ba4e96548" translate="yes" xml:space="preserve">
          <source>--stop-on-failure</source>
          <target state="translated">--stop-on-failure</target>
        </trans-unit>
        <trans-unit id="adf6d769537915389dd2428edff2c7f3bec1b8e3" translate="yes" xml:space="preserve">
          <source>--stop-on-incomplete</source>
          <target state="translated">--stop-on-incomplete</target>
        </trans-unit>
        <trans-unit id="5b7dcff292b08d3abf3bf96a19b04328df360c19" translate="yes" xml:space="preserve">
          <source>--stop-on-risky</source>
          <target state="translated">--stop-on-risky</target>
        </trans-unit>
        <trans-unit id="6eef24d8097a4c9b83a254b32210753e462430dd" translate="yes" xml:space="preserve">
          <source>--stop-on-skipped</source>
          <target state="translated">--stop-on-skipped</target>
        </trans-unit>
        <trans-unit id="4ac0250da2c3bdd27876bd8e80d6116f95cd208e" translate="yes" xml:space="preserve">
          <source>--strict-coverage</source>
          <target state="translated">--strict-coverage</target>
        </trans-unit>
        <trans-unit id="b1a80170653d260fc91fa199d3e2670d9fb9c864" translate="yes" xml:space="preserve">
          <source>--strict-global-state</source>
          <target state="translated">--strict-global-state</target>
        </trans-unit>
        <trans-unit id="5ee130a9f09395a4d77e950fb41695e59d31d11f" translate="yes" xml:space="preserve">
          <source>--test-suffix</source>
          <target state="translated">--test-suffix</target>
        </trans-unit>
        <trans-unit id="ffbdc1eccb9915a8437ee7cfcfcf450b1455389f" translate="yes" xml:space="preserve">
          <source>--testdox</source>
          <target state="translated">--testdox</target>
        </trans-unit>
        <trans-unit id="3d458d01117c3aba6a53b4067e812f2f588e3c61" translate="yes" xml:space="preserve">
          <source>--testdox-html and --testdox-text</source>
          <target state="translated">--testdox-html 및 --testdox-text</target>
        </trans-unit>
        <trans-unit id="bef553f4df8c136a10975bb7362c5b76e520bfcc" translate="yes" xml:space="preserve">
          <source>--testsuite</source>
          <target state="translated">--testsuite</target>
        </trans-unit>
        <trans-unit id="f2860556708260c3603c4f244db1aa03e85301b6" translate="yes" xml:space="preserve">
          <source>--verbose</source>
          <target state="translated">--verbose</target>
        </trans-unit>
        <trans-unit id="d5537351313df4188977a7d2a773daedb94d0b26" translate="yes" xml:space="preserve">
          <source>-d</source>
          <target state="translated">-d</target>
        </trans-unit>
        <trans-unit id="58558703177c4b63101d579b915d993032b51522" translate="yes" xml:space="preserve">
          <source>/path/to/my/test.phpt</source>
          <target state="translated">/path/to/my/test.phpt</target>
        </trans-unit>
        <trans-unit id="259873ae3ab1ee1e4856e7359643deaf94e2d23a" translate="yes" xml:space="preserve">
          <source>1. Assertions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffce6937e131ab5346767169dd1cf44aa53c4e30" translate="yes" xml:space="preserve">
          <source>1. Clean-Up Database</source>
          <target state="translated">1. 정리 데이터베이스</target>
        </trans-unit>
        <trans-unit id="6d7a499a91b06f3cae2dd724e47148b77ccf4de6" translate="yes" xml:space="preserve">
          <source>1. Installing PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd565a8dcef074b6c92871ceb8118d58a79626f" translate="yes" xml:space="preserve">
          <source>10. Extending PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724e49e3cb4debbdc221e03a3249ee42a825332a" translate="yes" xml:space="preserve">
          <source>2. Annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ba0bee3b45c15523f0f6483f69b2998f367f2a5" translate="yes" xml:space="preserve">
          <source>2. Set up fixture</source>
          <target state="translated">2. 정착물 설정</target>
        </trans-unit>
        <trans-unit id="1b9deb5bd46ff8feec21226b09b67ed95e7c8d4b" translate="yes" xml:space="preserve">
          <source>2. Writing Tests for PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aad82d0481f6e0ec683b2def96e4f8730efac53" translate="yes" xml:space="preserve">
          <source>3&amp;ndash;5. Run Test, Verify outcome and Teardown</source>
          <target state="translated">3&amp;ndash;5. 테스트 실행, 결과 확인 및 테어 다운</target>
        </trans-unit>
        <trans-unit id="9a646361c96ecb040615047af737eb343a62ba97" translate="yes" xml:space="preserve">
          <source>3. The Command-Line Test Runner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9eaaa976dffb46593d2ae33032b2f8e68e7cc54" translate="yes" xml:space="preserve">
          <source>3. The XML Configuration File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74d077c66f7b078ea1f7fff84b28dcaf42eb9fa" translate="yes" xml:space="preserve">
          <source>4. Bibliography</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e27ce8d4da29963b02425f33f2fb64b5f6753b" translate="yes" xml:space="preserve">
          <source>4. Fixtures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186c1361e3a40e6f5639e5bed9acf1b24602d422" translate="yes" xml:space="preserve">
          <source>5. Copyright</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd534ef855b7777cb51222230d496cd414a1995b" translate="yes" xml:space="preserve">
          <source>5. Organizing Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07e9c32cee7c1418b784445c8618d2a5c4544c89" translate="yes" xml:space="preserve">
          <source>6. Risky Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183cc186495d0338c837f114c1282166b5ff3996" translate="yes" xml:space="preserve">
          <source>7. Incomplete and Skipped Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc67949e9fc9945ac84d4a85c086f136f5f09dbd" translate="yes" xml:space="preserve">
          <source>8. Test Doubles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94addc3384b009b53f3a29eb51abcc07cf6f80e" translate="yes" xml:space="preserve">
          <source>9. Code Coverage Analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a79f5ef26d25de561c06b0388ef18c588871c69" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#appendixes-annotations-covers-tables-annotations&quot;&gt;Table 2.2&lt;/a&gt; shows the syntax of the &lt;code&gt;@covers&lt;/code&gt; annotation. The section &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-specifying-covered-parts&quot;&gt;Specifying Covered Code Parts&lt;/a&gt; provides longer examples for using the annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e67e0d547d7392565ac22a0ca83e6a5ad5747796" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#appendixes-assertions-assertthat-tables-constraints&quot;&gt;Table 1.1&lt;/a&gt; shows the available &lt;code&gt;PHPUnit\Framework\Constraint&lt;/code&gt; classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828993db0fdf047da72c573795d4876ab1dfe361" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#extending-phpunit-examples-istrue-php&quot;&gt;Example 10.2&lt;/a&gt; shows how &lt;code&gt;PHPUnit\Framework\Constraint\IsTrue&lt;/code&gt; extends the abstract base class for matcher objects (or constraints), &lt;code&gt;PHPUnit\Framework\Constraint&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb49004f394176f5a796405d84322c62ed514152" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#extending-phpunit-examples-testrunnerconfigurableextension&quot;&gt;Example 10.4&lt;/a&gt; shows an example how to make an extension configurable, by adding an &lt;code&gt;__constructor()&lt;/code&gt; definition to the extension class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad2f7275460595bd253613dafbafc5b4db49aba6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#extending-phpunit-examples-testrunnerextension&quot;&gt;Example 10.3&lt;/a&gt; shows an example for an extension implementing &lt;code&gt;BeforeFirstTestHook&lt;/code&gt; and &lt;code&gt;AfterLastTestHook&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40c86a27f117a57b848217807866612b4b90c6e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#fixtures-sharing-fixture-examples-databasetest-php&quot;&gt;Example 4.3&lt;/a&gt; uses the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; and &lt;code&gt;tearDownAfterClass()&lt;/code&gt; template methods to connect to the database before the test case class&amp;rsquo; first test and to disconnect from the database after the last test of the test case, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be504f97297382c1bb64f1e6a217f1dcb0bc5ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-incomplete-tests-examples-sampletest-php&quot;&gt;Example 7.1&lt;/a&gt; shows a test case class, &lt;code&gt;SampleTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testSomething()&lt;/code&gt;. By calling the convenience method &lt;code&gt;markTestIncomplete()&lt;/code&gt; (which automatically raises an &lt;code&gt;PHPUnit\Framework\IncompleteTestError&lt;/code&gt; exception) in the test method, we mark the test as being incomplete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11d034164990ad20ade0be7b2ec39e7087c8e340" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-incomplete-tests-tables-api&quot;&gt;Table 7.1&lt;/a&gt; shows the API for marking tests as incomplete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6ddd8e37361f3e93f828da4c7b255db1b01645" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-skipped-tests-tables-api&quot;&gt;Table 7.2&lt;/a&gt; shows the API for skipping tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacd3f441046d7d4ec1a0629c52e202cfe2d4762" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#incomplete-and-skipped-tests-skipping-tests-examples-databasetest-php&quot;&gt;Example 7.2&lt;/a&gt; shows a test case class, &lt;code&gt;DatabaseTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testConnection()&lt;/code&gt;. In the test case class&amp;rsquo; &lt;code&gt;setUp()&lt;/code&gt; template method we check whether the MySQLi extension is available and use the &lt;code&gt;markTestSkipped()&lt;/code&gt; method to skip the test if it is not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afa1de058ff4f178a20d7beb29a15c413a1b0095" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-mock-objects-examples-subjecttest-php&quot;&gt;Example 8.12&lt;/a&gt; shows how to use a mock object to test the interaction between &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa9a3449dc4338872ad10ba22962196ab726361" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-stubbing-and-mocking-web-services-examples-googletest-php&quot;&gt;Example 8.20&lt;/a&gt; shows how &lt;code&gt;getMockFromWsdl()&lt;/code&gt; can be used to stub, for example, the web service described in &lt;code&gt;GoogleSearch.wsdl&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f43698b1218c4c5d69e6b4cfafef1d520be42c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-stubs-examples-stubtest-php&quot;&gt;Example 8.2&lt;/a&gt; shows how to stub method calls and set up return values. We first use the &lt;code&gt;createStub()&lt;/code&gt; method that is provided by the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class to set up a stub object that looks like an object of &lt;code&gt;SomeClass&lt;/code&gt; (&lt;a href=&quot;#test-doubles-stubs-examples-someclass-php&quot;&gt;Example 8.1&lt;/a&gt;). We then use the &lt;a href=&quot;http://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent Interface&lt;/a&gt; that PHPUnit provides to specify the behavior for the stub. In essence, this means that you do not need to create several temporary objects and wire them together afterwards. Instead, you chain method calls as shown in the example. This leads to more readable and &amp;ldquo;fluent&amp;rdquo; code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583d03835d675c3fe696e9e8efae3543cc10dc49" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#test-doubles-stubs-examples-stubtest2-php&quot;&gt;Example 8.4&lt;/a&gt; shows an example of how to use the Mock Builder&amp;rsquo;s fluent interface to configure the creation of the test double. The configuration of this test double uses the same best practice defaults used by &lt;code&gt;createStub()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea7b5fb0ab4d60dd2e247093c36dfff484eec505" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-examples-stacktest-php&quot;&gt;Example 2.1&lt;/a&gt; shows how we can write tests using PHPUnit that exercise PHP&amp;rsquo;s array operations. The example introduces the basic conventions and steps for writing tests with PHPUnit:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06eb70f0282d22016f2d9f201a56987e564a33f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-examples-stacktest2-php&quot;&gt;Example 2.2&lt;/a&gt; shows how to use the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies between test methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6d2850de915e06ba48e0cb8f1b76f5c3215c9b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-exceptions-examples-exceptiontest-php&quot;&gt;Example 2.11&lt;/a&gt; shows how to use the &lt;code&gt;expectException()&lt;/code&gt; method to test whether an exception is thrown by the code under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e34fa5996f9d4f13b84f23b5f77e359a36e9a2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-output-examples-outputtest-php&quot;&gt;Example 2.14&lt;/a&gt; shows how to use the &lt;code&gt;expectOutputString()&lt;/code&gt; method to set the expected output. If this expected output is not generated, the test will be counted as a failure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cefa3e906221c35de0f59ffa6d96fe374f2325c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#writing-tests-for-phpunit-output-tables-api&quot;&gt;Table 2.1&lt;/a&gt; shows the methods provided for testing output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="400bead44abe445625fb9e120cc82ddba25b1794" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers.tables.annotations&quot;&gt;Table B.1&lt;/a&gt; shows the syntax of the &lt;code&gt;@covers&lt;/code&gt; annotation.</source>
          <target state="translated">&lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers.tables.annotations&quot;&gt;표 B.1&lt;/a&gt; 은 &lt;code&gt;@covers&lt;/code&gt; 주석 의 구문을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="96b99aea2b8f4159d96dccf7c334a91fe38bb117" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;Table A.1&lt;/a&gt; shows the available &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; classes.</source>
          <target state="translated">&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;Table A.1&lt;/a&gt; 은 사용 가능한 &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; 클래스를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9949a159fde58347b713cb0c24400bde07d9b99e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;Table A.1&lt;/a&gt; shows the constraints that can be applied to method arguments and &lt;a href=&quot;test-doubles#test-doubles.mock-objects.tables.matchers&quot;&gt;Table 9.1&lt;/a&gt; shows the matchers that are available to specify the number of invocations.</source>
          <target state="translated">&lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.tables.constraints&quot;&gt;Table A.1&lt;/a&gt; 은 메서드 인수에 적용 할 수있는 제약 조건을 보여주고 &lt;a href=&quot;test-doubles#test-doubles.mock-objects.tables.matchers&quot;&gt;Table 9.1&lt;/a&gt; 은 호출 수를 지정하는 데 사용할 수있는 matcher를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="01382814f3f35f633c50f93774f66908827742e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;assertions#appendixes-assertions-assertthat-tables-constraints&quot;&gt;Constraints&lt;/a&gt; shows the constraints that can be applied to method arguments and &lt;a href=&quot;#test-doubles-mock-objects-tables-matchers&quot;&gt;Table 8.1&lt;/a&gt; shows the matchers that are available to specify the number of invocations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5f615e429410d6139d0ac49579a7958b1432ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-invoicetest-php&quot;&gt;Example 9.2&lt;/a&gt; shows another example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba52a5e798bbf3762fa09b4a6224533185f103e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.BaseTestListener.php&quot;&gt;Example 14.4&lt;/a&gt; shows how to subclass the &lt;code&gt;PHPUnit_Framework_BaseTestListener&lt;/code&gt; abstract class, which lets you specify only the interface methods that are interesting for your use case, while providing empty implementations for all the others.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.BaseTestListener.php&quot;&gt;Example 14.4&lt;/a&gt; 는 &lt;code&gt;PHPUnit_Framework_BaseTestListener&lt;/code&gt; 추상 클래스 를 서브 클래 싱하는 방법을 보여줍니다.이 클래스는 유스 케이스에 흥미로운 인터페이스 메소드 만 지정할 수 있으며 다른 모든 메소드에는 빈 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0df2507ee06827206bc891bcb7276bce87da0aa6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.DataDrivenTest.php&quot;&gt;Example 14.6&lt;/a&gt; shows a data-driven test case class that compares values from a file with Comma-Separated Values (CSV). Each line of such a file looks like &lt;code&gt;foo;bar&lt;/code&gt;, where the first value is the one we expect and the second value is the actual one.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.DataDrivenTest.php&quot;&gt;Example 14.6&lt;/a&gt; 에서는 파일의 값을 쉼표로 구분 된 값 (CSV)과 비교하는 데이터 기반 테스트 사례 클래스를 보여줍니다. 이러한 파일의 각 줄은 &lt;code&gt;foo;bar&lt;/code&gt; 와 같습니다 . 여기서 첫 번째 값은 예상 값이고 두 번째 값은 실제 값입니다.</target>
        </trans-unit>
        <trans-unit id="1a3ad1f9bee117a90baf475798b6c4c3e2bc8629" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.IsTrue.php&quot;&gt;Example 14.2&lt;/a&gt; shows how &lt;code&gt;PHPUnit_Framework_Constraint_IsTrue&lt;/code&gt; extends the abstract base class for matcher objects (or constraints), &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.IsTrue.php&quot;&gt;Example 14.2&lt;/a&gt; 는 &lt;code&gt;PHPUnit_Framework_Constraint_IsTrue&lt;/code&gt; 가 matcher 객체 (또는 제약 조건), &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; 에 대한 추상 기본 클래스를 확장하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="4f9f7e9327c5ce728de8a6a032b634bd961a9686" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.RepeatedTest.php&quot;&gt;Example 14.5&lt;/a&gt; shows a cut-down version of the &lt;code&gt;PHPUnit_Extensions_RepeatedTest&lt;/code&gt; test decorator that illustrates how to write your own test decorators.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.RepeatedTest.php&quot;&gt;Example 14.5&lt;/a&gt; 는 자신 만의 테스트 데코레이터를 작성하는 방법을 보여주는 &lt;code&gt;PHPUnit_Extensions_RepeatedTest&lt;/code&gt; 테스트 데코레이터 의 컷 다운 버전을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="701445c885626a9ec7f22372c6954721fa1e2093" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.SimpleTestListener.php&quot;&gt;Example 14.3&lt;/a&gt; shows a simple implementation of the &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;extending-phpunit#extending-phpunit.examples.SimpleTestListener.php&quot;&gt;Example 14.3&lt;/a&gt; 은 &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; 인터페이스 의 간단한 구현을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="1eef8f9d75c4c39951ce80221bfb0c1dcccbca89" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;fixtures#fixtures.sharing-fixture.examples.DatabaseTest.php&quot;&gt;Example 4.3&lt;/a&gt; uses the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; and &lt;code&gt;tearDownAfterClass()&lt;/code&gt; template methods to connect to the database before the test case class' first test and to disconnect from the database after the last test of the test case, respectively.</source>
          <target state="translated">&lt;a href=&quot;fixtures#fixtures.sharing-fixture.examples.DatabaseTest.php&quot;&gt;Example 4.3&lt;/a&gt; 에서는 &lt;code&gt;setUpBeforeClass()&lt;/code&gt; 및 &lt;code&gt;tearDownAfterClass()&lt;/code&gt; 템플릿 메서드를 사용하여 테스트 사례 클래스의 첫 번째 테스트 전에 데이터베이스에 연결하고 테스트 사례의 마지막 테스트 후 데이터베이스에서 각각 연결을 끊습니다.</target>
        </trans-unit>
        <trans-unit id="ce8b529086276a39b8df23d392e07715ac6642a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;It is hard to test code that uses singletons.&lt;/a&gt; The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test&amp;rsquo;s change to a global variable might break another test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86336897eaca88febd7550b5fabd5bc39dfd8811" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;It is hard to test code that uses singletons.&lt;/a&gt; The same is true for code that uses global variables. Typically, the code you want to test is coupled strongly with a global variable and you cannot control its creation. An additional problem is the fact that one test's change to a global variable might break another test.</source>
          <target state="translated">&lt;a href=&quot;http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html&quot;&gt;싱글 톤을 사용하는 코드를 테스트하기는 어렵습니다. &lt;/a&gt;전역 변수를 사용하는 코드도 마찬가지입니다. 일반적으로 테스트하려는 코드는 전역 변수와 강력하게 결합되어 생성을 제어 할 수 없습니다. 추가 문제는 하나의 테스트에서 전역 변수로 변경하면 다른 테스트가 중단 될 수 있다는 사실입니다.</target>
        </trans-unit>
        <trans-unit id="9bb623e1edf9e0b385958e60c2f4efef5c9b37a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; or &lt;a href=&quot;http://www.ezcomponents.org&quot;&gt;eZ Components&lt;/a&gt; have powerful tools that allow you to create the database schema from pre-defined datastructures. However, these have to be hooked into the PHPUnit extension to allow an automatic database re-creation before the complete test-suite is run.</source>
          <target state="translated">&lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; 또는 &lt;a href=&quot;http://www.ezcomponents.org&quot;&gt;eZ Components&lt;/a&gt; 에는 사전 정의 된 데이터 구조에서 데이터베이스 스키마를 작성할 수있는 강력한 도구가 있습니다. 그러나 완전한 테스트 스위트가 실행되기 전에 자동 데이터베이스 재 작성을 허용하려면 PHPUnit 확장에 연결해야합니다.</target>
        </trans-unit>
        <trans-unit id="2132bb8453bef97cac038b235074aef42ad6b6c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/mikey179/vfsStream&quot;&gt;vfsStream&lt;/a&gt; is a &lt;a href=&quot;http://www.php.net/streams&quot;&gt;stream wrapper&lt;/a&gt; for a &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_file_system&quot;&gt;virtual filesystem&lt;/a&gt; that may be helpful in unit tests to mock the real filesystem.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mikey179/vfsStream&quot;&gt;vfsStream&lt;/a&gt; 은 실제 파일 시스템을 조롱하기 위해 단위 테스트에 도움이 될 수 있는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Virtual_file_system&quot;&gt;가상 파일 시스템&lt;/a&gt; 의 &lt;a href=&quot;http://www.php.net/streams&quot;&gt;스트림 래퍼&lt;/a&gt; 입니다 .</target>
        </trans-unit>
        <trans-unit id="63fbd44146f7be0cdd87a45688f44659aa82d4d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/phpspec/prophecy&quot;&gt;Prophecy&lt;/a&gt; is a &quot;highly opinionated yet very powerful and flexible PHP object mocking framework. Though initially it was created to fulfil phpspec2 needs, it is flexible enough to be used inside any testing framework out there with minimal effort&quot;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/phpspec/prophecy&quot;&gt;Prophecy&lt;/a&gt; 는 &quot;높은 평가를 받았지만 매우 강력하고 유연한 PHP 객체 모의 프레임 워크입니다. 처음에 phpspec2 요구를 충족시키기 위해 만들어졌지만 최소한의 노력으로 모든 테스트 프레임 워크 내부에서 사용할 수있을 정도로 유연합니다&quot;.</target>
        </trans-unit>
        <trans-unit id="2d245a824da804374ae99dd6339be7c84a371074" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php&quot;&gt;Example 7.1&lt;/a&gt; shows a test case class, &lt;code&gt;SampleTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testSomething()&lt;/code&gt;. By calling the convenience method &lt;code&gt;markTestIncomplete()&lt;/code&gt; (which automatically raises an &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; exception) in the test method, we mark the test as being incomplete.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.examples.SampleTest.php&quot;&gt;Example 7.1&lt;/a&gt; 은 하나의 테스트 메소드 &lt;code&gt;testSomething()&lt;/code&gt; 을 포함 하는 테스트 케이스 클래스 &lt;code&gt;SampleTest&lt;/code&gt; 를 보여줍니다 . 테스트 메소드에서 편의 메소드 &lt;code&gt;markTestIncomplete()&lt;/code&gt; ( &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; 예외 를 자동으로 발생) 를 호출하여 테스트가 불완전한 것으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e1826ba7ad67aff343a5faebb33c2d11a0bdac0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.tables.api&quot;&gt;Table 7.1&lt;/a&gt; shows the API for marking tests as incomplete.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.incomplete-tests.tables.api&quot;&gt;표 7.1&lt;/a&gt; 은 테스트를 불완전한 것으로 표시하기위한 API를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7d28b22b87435b82016377e72a600e1635d51ec9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipped-tests.tables.api&quot;&gt;Table 7.2&lt;/a&gt; shows the API for skipping tests.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipped-tests.tables.api&quot;&gt;표 7.2&lt;/a&gt; 는 테스트 생략을위한 API를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d201a110ac700dfc5f308da8a1e8ae0633a211c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php&quot;&gt;Example 7.2&lt;/a&gt; shows a test case class, &lt;code&gt;DatabaseTest&lt;/code&gt;, that contains one test method, &lt;code&gt;testConnection()&lt;/code&gt;. In the test case class' &lt;code&gt;setUp()&lt;/code&gt; template method we check whether the MySQLi extension is available and use the &lt;code&gt;markTestSkipped()&lt;/code&gt; method to skip the test if it is not.</source>
          <target state="translated">&lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.skipping-tests.examples.DatabaseTest.php&quot;&gt;Example 7.2&lt;/a&gt; 에서는 테스트 메소드 &lt;code&gt;testConnection()&lt;/code&gt; 을 포함 하는 테스트 케이스 클래스 &lt;code&gt;DatabaseTest&lt;/code&gt; 를 보여줍니다 . 테스트 케이스 클래스의 &lt;code&gt;setUp()&lt;/code&gt; 템플릿 메소드에서 MySQLi 확장을 사용할 수 있는지 확인 하고 테스트가없는 경우 &lt;code&gt;markTestSkipped()&lt;/code&gt; 메소드를 사용하여 테스트를 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="c278bd42534e6f3761c4fb83d65f18b57516d69f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SubjectTest.php&quot;&gt;Example 9.11&lt;/a&gt; shows how to use a mock object to test the interaction between &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; objects.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SubjectTest.php&quot;&gt;Example 9.11&lt;/a&gt; 에서는 모의 객체를 사용하여 &lt;code&gt;Subject&lt;/code&gt; 와 &lt;code&gt;Observer&lt;/code&gt; 객체 간의 상호 작용을 테스트하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9f5e6b01ac27f3606c3512b1b0134558a0afa53c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.Example.php&quot;&gt;Example 9.21&lt;/a&gt; shows a class that interacts with the filesystem.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.Example.php&quot;&gt;Example 9.21&lt;/a&gt; 은 파일 시스템과 상호 작용하는 클래스를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d1bd895ee7e2bd6f88fd27735788cb0161b36b4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest2.php&quot;&gt;Example 9.23&lt;/a&gt; shows how vfsStream can be used to mock the filesystem in a test for a class that interacts with the filesystem.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest2.php&quot;&gt;Example 9.23&lt;/a&gt; 에서는 파일 시스템과 상호 작용하는 클래스에 대한 테스트에서 vfsStream을 사용하여 파일 시스템을 모방하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="726c00627ea79327903a64f70862a4c154732aca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php&quot;&gt;Example 9.20&lt;/a&gt; shows how &lt;code&gt;getMockFromWsdl()&lt;/code&gt; can be used to stub, for example, the web service described in &lt;code&gt;GoogleSearch.wsdl&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.stubbing-and-mocking-web-services.examples.GoogleTest.php&quot;&gt;Example 9.20&lt;/a&gt; 에서는 &lt;code&gt;getMockFromWsdl()&lt;/code&gt; 을 사용하여 예를 들어 &lt;code&gt;GoogleSearch.wsdl&lt;/code&gt; 에 설명 된 웹 서비스를 스텁 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="fe2599f429265ec1f48e01bff9b3997f782265ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest.php&quot;&gt;Example 9.2&lt;/a&gt; shows how to stub method calls and set up return values. We first use the &lt;code&gt;createMock()&lt;/code&gt; method that is provided by the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class to set up a stub object that looks like an object of &lt;code&gt;SomeClass&lt;/code&gt; (&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.SomeClass.php&quot;&gt;Example 9.1&lt;/a&gt;). We then use the &lt;a href=&quot;http://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent Interface&lt;/a&gt; that PHPUnit provides to specify the behavior for the stub. In essence, this means that you do not need to create several temporary objects and wire them together afterwards. Instead, you chain method calls as shown in the example. This leads to more readable and &quot;fluent&quot; code.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest.php&quot;&gt;Example 9.2&lt;/a&gt; 에서는 메서드 호출을 스텁하고 반환 값을 설정하는 방법을 보여줍니다. 먼저 &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 클래스에서 제공 하는 &lt;code&gt;createMock()&lt;/code&gt; 메소드를 사용하여 &lt;code&gt;SomeClass&lt;/code&gt; 의 객체처럼 보이는 스텁 객체를 설정합니다 ( &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.SomeClass.php&quot;&gt;Example 9.1&lt;/a&gt; ). 그런 다음 PHPUnit이 제공 하는 &lt;a href=&quot;http://martinfowler.com/bliki/FluentInterface.html&quot;&gt;Fluent Interface&lt;/a&gt; 를 사용 하여 스텁의 동작을 지정합니다. 본질적으로 이것은 여러 개의 임시 객체를 생성 한 후 나중에 함께 연결할 필요가 없음을 의미합니다. 대신 예제와 같이 메서드 호출을 연결합니다. 이는 더 읽기 쉽고 &quot;유창한&quot;코드로 이어집니다.</target>
        </trans-unit>
        <trans-unit id="fdec3d27a3fec8bb29afbc225b2b3f26d37fdad2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest2.php&quot;&gt;Example 9.3&lt;/a&gt; shows an example of how to use the Mock Builder's fluent interface to configure the creation of the test double. The configuration of this test double uses the same best practice defaults used by &lt;code&gt;createMock()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest2.php&quot;&gt;Example 9.3&lt;/a&gt; 은 Mock Builder의 유창한 인터페이스를 사용하여 테스트 이중 작성을 구성하는 방법의 예를 보여줍니다. 이 테스트의 구성은 &lt;code&gt;createMock()&lt;/code&gt; 과 동일한 모범 사례 기본값을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="f0fdd7bb5f13f0c494d1d907e04f44612ea555be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;Example 2.1&lt;/a&gt; shows how we can write tests using PHPUnit that exercise PHP's array operations. The example introduces the basic conventions and steps for writing tests with PHPUnit:</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;Example 2.1&lt;/a&gt; 은 PHP의 배열 연산을 수행하는 PHPUnit을 사용하여 테스트를 작성하는 방법을 보여줍니다. 이 예제는 PHPUnit으로 테스트를 작성하기위한 기본 규칙과 단계를 소개합니다.</target>
        </trans-unit>
        <trans-unit id="359ad03cd33ea3f0237215f3237a0d28f3ed3d0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; shows how to use the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies between test methods.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; 에서는 &lt;code&gt;@depends&lt;/code&gt; 주석 을 사용하여 테스트 방법 간의 종속성을 표현 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="4ab799e7a2b4e63b7aa3b29b7e55e0547b74eb53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;Example 2.10&lt;/a&gt; shows how to use the &lt;code&gt;@expectedException&lt;/code&gt; annotation to test whether an exception is thrown inside the tested code.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;Example 2.10&lt;/a&gt; 에서는 &lt;code&gt;@expectedException&lt;/code&gt; 주석 을 사용 하여 테스트 된 코드 내에 예외가 발생하는지 테스트 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="3db03ff4f91d80905689b39bb4fc989d8442106b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;Example 2.10&lt;/a&gt; shows how to use the &lt;code&gt;expectException()&lt;/code&gt; method to test whether an exception is thrown by the code under test.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest.php&quot;&gt;Example 2.10&lt;/a&gt; 에서는 &lt;code&gt;expectException()&lt;/code&gt; 메서드를 사용하여 테스트중인 코드에서 예외가 발생하는지 테스트 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e51cfb5b7b55d680fe69e0d95d4bfc08247a9251" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.examples.OutputTest.php&quot;&gt;Example 2.14&lt;/a&gt; shows how to use the &lt;code&gt;expectOutputString()&lt;/code&gt; method to set the expected output. If this expected output is not generated, the test will be counted as a failure.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.examples.OutputTest.php&quot;&gt;Example 2.14&lt;/a&gt; 에서는 &lt;code&gt;expectOutputString()&lt;/code&gt; 메서드를 사용하여 예상 출력을 설정하는 방법을 보여줍니다 . 이 예상 출력이 생성되지 않으면 테스트는 실패로 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="134bf484e4328e79b0968392690a79c166c2804d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.tables.api&quot;&gt;Table 2.1&lt;/a&gt; shows the methods provided for testing output</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.output.tables.api&quot;&gt;표 2.1&lt;/a&gt; 은 출력 테스트를 위해 제공된 방법을 보여줍니다</target>
        </trans-unit>
        <trans-unit id="eb230f1e3a75c3c7d52f3cbd795e62ab7dc807a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$isNativeType&lt;/code&gt; is a flag used to indicate whether &lt;code&gt;$type&lt;/code&gt; is a native PHP type or not.</source>
          <target state="translated">&lt;code&gt;$isNativeType&lt;/code&gt; 은 &lt;code&gt;$type&lt;/code&gt; 이 기본 PHP 유형 인지 여부를 나타내는 데 사용되는 플래그 입니다.</target>
        </trans-unit>
        <trans-unit id="985752e98e8ebfa1c25bb9f1c27f0b2e2a9f7fed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;$strict&lt;/code&gt; is a flag used to compare the identity of objects within arrays.</source>
          <target state="translated">&lt;code&gt;$strict&lt;/code&gt; 는 배열 내 객체의 아이덴티티를 비교하는 데 사용되는 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="c22eaa1832553a53e81d6d0b17d6cb75beb3f912" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%%&lt;/code&gt;: A literal percent character: &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a7055c0e1b2e715a5c4635ee5f8d7d07eb6f964" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%A&lt;/code&gt;: Zero or more of anything (character or white space) including the end of line character.</source>
          <target state="translated">&lt;code&gt;%A&lt;/code&gt; : 줄 끝 문자를 포함하여 0 개 이상 (문자 또는 공백).</target>
        </trans-unit>
        <trans-unit id="e1bfb206b34ee37df38fdb749aaf435d92ce032f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%S&lt;/code&gt;: Zero or more of anything (character or white space) except the end of line character.</source>
          <target state="translated">&lt;code&gt;%S&lt;/code&gt; : 줄 끝 문자를 제외한 0 개 이상의 문자 (문자 또는 공백).</target>
        </trans-unit>
        <trans-unit id="be3ae59d595f914251b1af954bd09e132e6903c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%a&lt;/code&gt;: One or more of anything (character or white space) including the end of line character.</source>
          <target state="translated">&lt;code&gt;%a&lt;/code&gt; : 줄 끝 문자를 포함하여 하나 이상의 문자 (문자 또는 공백)입니다.</target>
        </trans-unit>
        <trans-unit id="c206735814f18cab60142f65517a50ab64445369" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%c&lt;/code&gt;: A single character of any sort.</source>
          <target state="translated">&lt;code&gt;%c&lt;/code&gt; : 모든 종류의 단일 문자.</target>
        </trans-unit>
        <trans-unit id="3a2904925b315905ca693c6969cc8a858e26dc8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%d&lt;/code&gt;: An unsigned integer value, for example &lt;code&gt;123456&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; : 부호없는 정수 값입니다 (예 : &lt;code&gt;123456&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="903ddf94e3e1018a58899d7bc47e040cbdc5b4ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%e&lt;/code&gt;: Represents a directory separator, for example &lt;code&gt;/&lt;/code&gt; on Linux.</source>
          <target state="translated">&lt;code&gt;%e&lt;/code&gt; : 디렉토리 구분자를 나타냅니다 (예 &lt;code&gt;/&lt;/code&gt; Linux의 경우).</target>
        </trans-unit>
        <trans-unit id="39776cad8c4c047484fbad07339d3ca76206a327" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%f&lt;/code&gt;: A floating point number, for example: &lt;code&gt;3.142&lt;/code&gt;, &lt;code&gt;-3.142&lt;/code&gt;, &lt;code&gt;3.142E-10&lt;/code&gt;, &lt;code&gt;3.142e+10&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%f&lt;/code&gt; : 부동 소수점 수, 예를 들어 &lt;code&gt;3.142&lt;/code&gt; , &lt;code&gt;-3.142&lt;/code&gt; , &lt;code&gt;3.142E-10&lt;/code&gt; , &lt;code&gt;3.142e+10&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="325fbfdf57e039539f65f261ea12e6f03f67e915" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%i&lt;/code&gt;: A signed integer value, for example &lt;code&gt;+3142&lt;/code&gt;, &lt;code&gt;-3142&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%i&lt;/code&gt; : 부호있는 정수 값입니다 (예 : &lt;code&gt;+3142&lt;/code&gt; , &lt;code&gt;-3142&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="9a25ea68137637e4f05cba3e9b87822f1a2b9f0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%s&lt;/code&gt;: One or more of anything (character or white space) except the end of line character.</source>
          <target state="translated">&lt;code&gt;%s&lt;/code&gt; : 줄 끝을 제외한 하나 이상의 문자 (문자 또는 공백)입니다.</target>
        </trans-unit>
        <trans-unit id="b32c295e30c2d2d5506f0da5a7b0a9556a195a0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%w&lt;/code&gt;: Zero or more white space characters.</source>
          <target state="translated">&lt;code&gt;%w&lt;/code&gt; : 0 개 이상의 공백 문자.</target>
        </trans-unit>
        <trans-unit id="9a5509a69f7a8c04ca77a3a4ec92a36fc1c544e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;%x&lt;/code&gt;: One or more hexadecimal character. That is, characters in the range &lt;code&gt;0-9&lt;/code&gt;, &lt;code&gt;a-f&lt;/code&gt;, &lt;code&gt;A-F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;%x&lt;/code&gt; : 하나 이상의 16 진 문자. 즉, &lt;code&gt;0-9&lt;/code&gt; , &lt;code&gt;a-f&lt;/code&gt; , &lt;code&gt;A-F&lt;/code&gt; 범위의 문자입니다 .</target>
        </trans-unit>
        <trans-unit id="6d31ecb27f0a60862ee1d94acc0188eaf1f6db8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;double&amp;gt;&lt;/code&gt; (float)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec90394b7b372e345a30922584e00510b8daee4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--configuration&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7f033cfaa2592a65485295e5079042a128669f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;--testdox-html&lt;/code&gt; and &lt;code&gt;--testdox-text&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10782fd661980bc9ce314f87356cde3c69b7d6e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@backupStaticAttributes&lt;/code&gt; is limited by PHP internals and may cause unintended static values to persist and leak into subsequent tests in some circumstances.</source>
          <target state="translated">&lt;code&gt;@backupStaticAttributes&lt;/code&gt; 는 PHP 내부에 의해 제한되며 의도하지 않은 정적 값이 지속되어 일부 상황에서 후속 테스트로 누출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a14bc888efd2c67db09e844b893b7308bac42a8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ::functionName&lt;/code&gt; (recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ba0de90f7169aa147537a4b318a939d3c2067e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName&amp;lt;extended&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb63d563c2aa57bf3effc552494fb9b26684a41e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;!private&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198fc2dddd2256eecaf4f72a0e95f56aed808e94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;!protected&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120c08f2b51ba434136abd75b676e6541d1bbe42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;!public&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4275424fabfbb8d57c7d82c4a94ff1b0133bab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;private&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1ebfead053f930254482fc631dab28c72ac6a08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;protected&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38756ced59a18678e23c8a4ebcdfc0b0566903e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::&amp;lt;public&amp;gt;&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac0d1e561d46acd3267948d728ed797d4170d90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName::methodName&lt;/code&gt; (not recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2518b7a065badbc0f2a92ddc4dbedc1bcf2da282" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@covers ClassName&lt;/code&gt; (recommended)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46e030ab26fc956072ba38ba2880bbfa69ed07c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ClassTest&lt;/code&gt; inherits (most of the time) from &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ClassTest&lt;/code&gt; 는 &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 에서 (대부분의 경우) 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="9b14a7c551535274e88626822ef803f739244731" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PHPUnit\Framework\Error\Notice&lt;/code&gt; and &lt;code&gt;PHPUnit\Framework\Error\Warning&lt;/code&gt; represent PHP notices and warnings, respectively.</source>
          <target state="translated">&lt;code&gt;PHPUnit\Framework\Error\Notice&lt;/code&gt; 및 &lt;code&gt;PHPUnit\Framework\Error\Warning&lt;/code&gt; 은 각각 PHP 알림 및 경고를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bdfa6831a4431c2cf93508b6b8f416e713ec7fe0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnitTest&lt;/code&gt; must be either a class that inherits from &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; or a class that provides a &lt;code&gt;public static suite()&lt;/code&gt; method which returns a &lt;code&gt;PHPUnit\Framework\Test&lt;/code&gt; object, for example an instance of the &lt;code&gt;PHPUnit\Framework\TestSuite&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c05893ecd2cc5c581315b0349cb385d0014ef56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UnitTest&lt;/code&gt; must be either a class that inherits from &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; or a class that provides a &lt;code&gt;public static suite()&lt;/code&gt; method which returns a &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; object, for example an instance of the &lt;code&gt;PHPUnit_Framework_TestSuite&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;UnitTest&lt;/code&gt; 는 &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 에서 상속 하는 클래스이거나 &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; 객체 를 반환하는 &lt;code&gt;public static suite()&lt;/code&gt; 메서드를 제공하는 클래스 여야 합니다 (예 : &lt;code&gt;PHPUnit_Framework_TestSuite&lt;/code&gt; 클래스 의 인스턴스) .</target>
        </trans-unit>
        <trans-unit id="53fb70feb14360a663d7de962160fe7ea1f2aba3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always&lt;/code&gt;: always displays colors in the output even when the current terminal doesn&amp;rsquo;t supports colors, or when the output is piped to a command or redirected to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f35cd18864425486ede52e8fbfffc78b8b5bbe6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;always&lt;/code&gt;: always displays colors in the output even when the current terminal doesn't supports colors, or when the output is piped to a command or redirected to a file.</source>
          <target state="translated">&lt;code&gt;always&lt;/code&gt; : 현재 터미널이 색상을 지원하지 않거나 출력이 명령으로 파이프되거나 파일로 리디렉션되는 경우에도 항상 출력에 색상을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8e10801b97ea178ffe9ebc40f83f7426b259b0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertArrayNotHasKey()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertArrayNotHasKey()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="3182610acb9ad1518997f10e1437ad08ce458865" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeContains()&lt;/code&gt; and &lt;code&gt;assertAttributeNotContains()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the haystack.</source>
          <target state="translated">&lt;code&gt;assertAttributeContains()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotContains()&lt;/code&gt; 는 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 건초 더미로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="7cd76ed554f63a3a5ee3ef21e29e6b2999050da6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeContainsOnly()&lt;/code&gt; and &lt;code&gt;assertAttributeNotContainsOnly()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the haystack.</source>
          <target state="translated">&lt;code&gt;assertAttributeContainsOnly()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotContainsOnly()&lt;/code&gt; 는 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 건초 더미로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="e8b505c9ec62b2cf97e603bf91fe55b445c00a41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeEmpty()&lt;/code&gt; and &lt;code&gt;assertAttributeNotEmpty()&lt;/code&gt; are convenience wrappers that can be applied to a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object.</source>
          <target state="translated">&lt;code&gt;assertAttributeEmpty()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotEmpty()&lt;/code&gt; 는 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성에 적용 할 수있는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="74aca865727b49024da70bd2a2a52a3743f9c0e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeEquals()&lt;/code&gt; and &lt;code&gt;assertAttributeNotEquals()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeEquals()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotEquals()&lt;/code&gt; 는 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 실제 값으로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="2ed7c1f1034bce8677abb3b919d7ed7951a70037" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeGreaterThan()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeGreaterThan()&lt;/code&gt; 은 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 실제 값으로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="312a7f88b9869f38933e96139da919ce30e72268" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeGreaterThanOrEqual()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeGreaterThanOrEqual()&lt;/code&gt; 은 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 실제 값으로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="80e395c2fd99e40222d4731c97b34156aa074ef1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeInstanceOf()&lt;/code&gt; and &lt;code&gt;assertAttributeNotInstanceOf()&lt;/code&gt; are convenience wrappers that can be applied to a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object.</source>
          <target state="translated">&lt;code&gt;assertAttributeInstanceOf()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotInstanceOf()&lt;/code&gt; 는 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성에 적용 할 수있는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="e7b1c9e2b1d75b071c01745bb535bd1cf463affd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeInternalType()&lt;/code&gt; and &lt;code&gt;assertAttributeNotInternalType()&lt;/code&gt; are convenience wrappers that can be applied to a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object.</source>
          <target state="translated">&lt;code&gt;assertAttributeInternalType()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotInternalType()&lt;/code&gt; 은 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성에 적용 할 수있는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="ff2dff4c9aa55daf2999c05681cd2c84e0e00046" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeLessThan()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeLessThan()&lt;/code&gt; 은 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 실제 값으로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="a5677cb688aa179877244b5f5792b3195074e83e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeLessThanOrEqual()&lt;/code&gt; is a convenience wrapper that uses a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeLessThanOrEqual()&lt;/code&gt; 은 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 실제 값으로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="d800800e24ffa93110e7f0655bccbad295e4a236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertAttributeSame()&lt;/code&gt; and &lt;code&gt;assertAttributeNotSame()&lt;/code&gt; are convenience wrappers that use a &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt; attribute of a class or object as the actual value.</source>
          <target state="translated">&lt;code&gt;assertAttributeSame()&lt;/code&gt; 및 &lt;code&gt;assertAttributeNotSame()&lt;/code&gt; 은 클래스 또는 객체 의 &lt;code&gt;public&lt;/code&gt; , &lt;code&gt;protected&lt;/code&gt; 또는 &lt;code&gt;private&lt;/code&gt; 속성을 실제 값으로 사용하는 편의 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="cc05a8dfaf1f09c77579598b393c3a0e9525dabf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertClassNotHasAttribute()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertClassNotHasAttribute()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="f08ecd00f88650de2540cca34fa8551bddaaeec4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertClassNotHasStaticAttribute()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertClassNotHasStaticAttribute()&lt;/code&gt; 는이 어설 션과 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ab8229b4672d83d56602367b6a86b66fc93d6af7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryDoesNotExist()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a233626c406f1088cb17c902a24481c6ea2b5b7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryIsNotReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db81efc60d2a4f9b8dfccb19537b68f81972f00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryIsNotWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683074b42f8be2e6cdf1a5591d47de9ad12e3941" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryNotExists()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertDirectoryNotExists()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="b96f7dfcde671122ec1d426b5302f01a53e92abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryNotIsReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertDirectoryNotIsReadable()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="a1667a948c5776b069eef0d33e6bd61c8b91aec7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDirectoryNotIsWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertDirectoryNotIsWritable()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="2576db4d491d8f635b69e4e05dae98e9e680d4d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertDoesNotMatchRegularExpression()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a141f0dd471f6396a8dfae9cf1c6082da6fa3d48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileDoesNotExist()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e1f3acd2aa277942a01fac62040296267d2e21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileIsNotReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffe8fbba1ebb0bf7aa873308693d8243812ebee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileIsNotWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5daaaca60778cba5a28ceab2f74d6e3b6d86848" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotEquals()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotEquals()&lt;/code&gt; 는이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="24875222dcfdfac3ad56e3c8dff89f1702c3cc05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotExists()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotExists()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="8d601549d604f302c65a09e4a239d28ef68dd0c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotIsReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotIsReadable()&lt;/code&gt; 은이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="776056cc088802e93a3c9d205377185e228a53f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFileNotIsWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFileNotIsWritable()&lt;/code&gt; 은이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="00840b05dcb5f7ba398768c7028fc58f4530983c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertFinite()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertFinite()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="7e403617391380ff2e0cbb0b2ee8d4fbad6d7920" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotArray()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699976691508d8d712ad04f3ac684930c201b04e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotBool()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb97132d07c0c0e8af6c50ebd336e7f0bb47309b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotCallable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1ff45d396dbdb817d8036411643b2bb36161e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotFloat()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc370a1441055dcb31dc15952c442b150f1bd8c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotInt()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fce0bdda942a747076517f467012f8d2047922" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotIterable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97c59c3ba73b5b2c8e7b219fbc595d5f7c2f784" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotNumeric()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b44162a5b29d0bee52ca67319efa67ff11a7589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotObject()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6425791931152df4d5944e1e873ba4c3a3b91d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a620cac14f856fa95973cb3370e6f5b078977212" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotResource()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="972558acad02727ccdacc9ea4077cf35f5b951d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotScalar()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f124736dfa369b8bcafa691b4bae857ae7c1ef6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotString()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997793440fed28fb8cdc9ee8ed8b97fe8a5205d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertIsNotWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f6f2cfba10126e7283d47346a4576163d1e4668" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotContains()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotContains()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="b538e8dadc2fcb733c1f56bcaf312d9972be5fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotContainsOnly()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotContainsOnly()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="4b084a0805ec4a43d503c426fcb21b45731682e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotCount()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotCount()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="130fbf9009b833f6a184f9d23f8105a0e8908e8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEmpty()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotEmpty()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="e48a82acd387b8eb11c27c4bd413773d70d650c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEquals()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotEquals()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="5e437eafa32689de8f11e2c8b9cd2b40554bdd4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEqualsCanonicalizing()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd338deb17fa78f4e088b2b6fed06ea31c06bf7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEqualsIgnoringCase()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a27347ed2919316cf10f8024a5cb1d7fbdd37e39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotEqualsWithDelta()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782aa3e21f2fe8d6ec668675df3367b5183a34ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotFalse()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotFalse()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="74071d81ef3376a587180f4bf10cce5927fb4b09" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotInstanceOf()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotInstanceOf()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="6820099b88275d81c65649d552aca3175f046abe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotInternalType()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotInternalType()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="2352fe2ffa92b884d44f8c60940699effaad41aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotIsReadable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotIsReadable()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="4ebb0ad55d9290825f6d201e4153ef12cc1ec063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotIsWritable()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotIsWritable()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="e8a0a868267d654ee0a04ced68556ce3ef202d14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotNull()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotNull()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="a1af83e72b05671dbd9470c9f6b966981de87fac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotRegExp()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotRegExp()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="4f6cb3f36af1c4a92d2159e602a0ad2b0a7237fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotSame()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotSame()&lt;/code&gt; 은이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="ba3007c16403ff7c20e6009663895380c927d759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertNotTrue()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertNotTrue()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e6bd1c331daecab854447e861f97f9eb5cbbc25a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertObjectNotHasAttribute()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertObjectNotHasAttribute()&lt;/code&gt; 는이 주장의 역수이며 동일한 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="863ce03a3c24ebc46c290963c5a1bb32e7dde83d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringEndsNotWith()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringEndsNotWith()&lt;/code&gt; 는이 어설 션의 역수이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0bb2358246d3e073ceda4be1cc7e31f4d4b7d87e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotContainsString()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304b401b01f517fbbb0637e667fd1e7ba78f4283" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotContainsStringIgnoringCase()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a1fe5bc5dabfc19a7684c352191dff38d95c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotEqualsFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringNotEqualsFile()&lt;/code&gt; 은이 어설 션과 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0a46b9abcdf908c4c47fc3d9f49444619e09e46c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotMatchesFormat()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringNotMatchesFormat()&lt;/code&gt; 은이 어설 션의 역수이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="720daa17c33654dd0b7e9172e4bf22c8f877cd74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringNotMatchesFormatFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringNotMatchesFormatFile()&lt;/code&gt; 은이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1c079ae8933bc457ca440db2e0db984d14bd4d67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertStringStartsNotWith()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertStringStartsNotWith()&lt;/code&gt; 는이 어설 션의 역수이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="811ad5be353f51c600dc39d63a8e44a57e82924c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertXmlFileNotEqualsXmlFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertXmlFileNotEqualsXmlFile()&lt;/code&gt; 은이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="269893af258500629fde7e2dca9ed0223505b421" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertXmlStringNotEqualsXmlFile()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertXmlStringNotEqualsXmlFile()&lt;/code&gt; 은이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="00f496344b531e39ae89c39497b22124c57fe8b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertXmlStringNotEqualsXmlString()&lt;/code&gt; is the inverse of this assertion and takes the same arguments.</source>
          <target state="translated">&lt;code&gt;assertXmlStringNotEqualsXmlString()&lt;/code&gt; 은이 어설 션의 반대이며 동일한 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="65a337696d0f921935b79ef09ecdd52839ffac73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt;: displays colors in the output unless the current terminal doesn&amp;rsquo;t supports colors, or if the output is piped to a command or redirected to a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15dbea9c537e19f81e4a604cde50ce161a48fb3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt;: displays colors in the output unless the current terminal doesn't supports colors, or if the output is piped to a command or redirected to a file.</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; : 현재 터미널이 색상을 지원하지 않거나 출력이 명령으로 파이프되거나 파일로 리디렉션되지 않으면 출력에 색상을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="520035ac612091f134a660e4b438f4fa48d2db39" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableAutoload()&lt;/code&gt; can be used to disable &lt;code&gt;__autoload()&lt;/code&gt; during the generation of the test double class.</source>
          <target state="translated">&lt;code&gt;disableAutoload()&lt;/code&gt; 는 테스트 이중 클래스 생성 중에 &lt;code&gt;__autoload()&lt;/code&gt; 를 비활성화하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="81df9f8352bbfa45b8855925e4b8e7d875847bdd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalClone()&lt;/code&gt; can be used to disable the call to the original class&amp;rsquo; clone constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd777ad903c50182fe780736b2819b6fedd1677" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalClone()&lt;/code&gt; can be used to disable the call to the original class' clone constructor.</source>
          <target state="translated">&lt;code&gt;disableOriginalClone()&lt;/code&gt; 을 사용하여 원래 클래스의 복제 생성자에 대한 호출을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="62de16c0034b4343a54ae5fff3266a93b15ef7ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalConstructor()&lt;/code&gt; can be used to disable the call to the original class&amp;rsquo; constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6017cb39e51b6a2c2238978001df423dbfc182df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disableOriginalConstructor()&lt;/code&gt; can be used to disable the call to the original class' constructor.</source>
          <target state="translated">&lt;code&gt;disableOriginalConstructor()&lt;/code&gt; 를 사용하여 원래 클래스의 생성자에 대한 호출을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b70c5eb2081f5a47a9afe5f5fa7c744b49e4846b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;highLowerBound&lt;/code&gt;: Minimum coverage percentage to be considered &quot;highly&quot; covered.</source>
          <target state="translated">&lt;code&gt;highLowerBound&lt;/code&gt; : &quot;높은&quot;적용 대상으로 간주되는 최소 적용 비율.</target>
        </trans-unit>
        <trans-unit id="345de912d741ae2901125590814503e5e0128a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includeUncoveredFilesInCodeCoverageReport=&quot;false&quot;&lt;/code&gt; means that only files that have at least one line of executed code are included in the code coverage report</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e09f17b37046bb6a71e520a45e22f50b7f6c75c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includeUncoveredFilesInCodeCoverageReport=&quot;true&quot;&lt;/code&gt; (default) means that all files are included in the code coverage report even if not a single line of code of such a file is executed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c4775c04fddb2e4640c7a8a886b30b12fc2174" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lowUpperBound&lt;/code&gt;: Maximum coverage percentage to be considered &quot;lowly&quot; covered.</source>
          <target state="translated">&lt;code&gt;lowUpperBound&lt;/code&gt; : &quot;낮은&quot;범위로 간주되는 최대 범위 백분율입니다.</target>
        </trans-unit>
        <trans-unit id="233810acae7da9ce813495fb1d8962756b9f84e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;never&lt;/code&gt;: never displays colors in the output. This is the default value when &lt;code&gt;--colors&lt;/code&gt; option is not used.</source>
          <target state="translated">&lt;code&gt;never&lt;/code&gt; : 출력에 색상을 표시하지 않습니다. &lt;code&gt;--colors&lt;/code&gt; 옵션을 사용하지 않을 경우의 기본값 입니다.</target>
        </trans-unit>
        <trans-unit id="0525a43b0eb19f944a175ef63d5865118a1c34fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processUncoveredFilesForCodeCoverageReport=&quot;false&quot;&lt;/code&gt; (default) means that a file that has no executed lines of code will be added to the code coverage report (if &lt;code&gt;includeUncoveredFilesInCodeCoverageReport=&quot;true&quot;&lt;/code&gt; is set) but it will not be loaded by PHPUnit and it will therefore not be analysed for correct executable lines of code information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8a0f341d76c06325a8fadf1aee66b9c8676e973" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;processUncoveredFilesForCodeCoverageReport=&quot;true&quot;&lt;/code&gt; means that a file that has no executed lines of code will be loaded by PHPUnit so that it can be analysed for correct executable lines of code information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f779e0cae552262a203c44839f630e44c0e553b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setConstructorArgs(array $args)&lt;/code&gt; can be called to provide a parameter array that is passed to the original class&amp;rsquo; constructor (which is not replaced with a dummy implementation by default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d6097856b759592af70fe4090fc82532271188" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setConstructorArgs(array $args)&lt;/code&gt; can be called to provide a parameter array that is passed to the original class' constructor (which is not replaced with a dummy implementation by default).</source>
          <target state="translated">&lt;code&gt;setConstructorArgs(array $args)&lt;/code&gt; 를 호출하여 원래 클래스의 생성자 (기본적으로 더미 구현으로 대체되지 않음)에 전달되는 매개 변수 배열을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b72117b49da66fe44ec63a4e44e41c6973dc04aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setMethods(array $methods)&lt;/code&gt; can be called on the Mock Builder object to specify the methods that are to be replaced with a configurable test double. The behavior of the other methods is not changed. If you call &lt;code&gt;setMethods(null)&lt;/code&gt;, then no methods will be replaced.</source>
          <target state="translated">&lt;code&gt;setMethods(array $methods)&lt;/code&gt; Mock Builder 객체에서 setMethods (array $ methods) 를 호출하여 구성 가능한 테스트 double로 대체 할 메소드를 지정할 수 있습니다. 다른 방법의 동작은 변경되지 않습니다. &lt;code&gt;setMethods(null)&lt;/code&gt; 를 호출하면 메소드가 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5678cab86ad63bb332198d47de840564f59877e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setMethodsExcept(array $methods)&lt;/code&gt; can be called on the Mock Builder object to specify the methods that will not be replaced with a configurable test double while replacing all other public methods. This works inverse to &lt;code&gt;setMethods()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c472cd19adb8f363c860c74103cf248c02c17802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setMockClassName($name)&lt;/code&gt; can be used to specify a class name for the generated test double class.</source>
          <target state="translated">&lt;code&gt;setMockClassName($name)&lt;/code&gt; 을 사용하여 생성 된 테스트 이중 클래스의 클래스 이름을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f296ae305b8d83a60a530356f27145c14ed36f53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; are nicely symmetrical in theory but not in practice. In practice, you only need to implement &lt;code&gt;tearDown()&lt;/code&gt; if you have allocated external resources like files or sockets in &lt;code&gt;setUp()&lt;/code&gt;. If your &lt;code&gt;setUp()&lt;/code&gt; just creates plain PHP objects, you can generally ignore &lt;code&gt;tearDown()&lt;/code&gt;. However, if you create many objects in your &lt;code&gt;setUp()&lt;/code&gt;, you might want to &lt;code&gt;unset()&lt;/code&gt; the variables pointing to those objects in your &lt;code&gt;tearDown()&lt;/code&gt; so they can be garbage collected. The garbage collection of test case objects is not predictable.</source>
          <target state="translated">&lt;code&gt;setUp()&lt;/code&gt; 및 &lt;code&gt;tearDown()&lt;/code&gt; 은 이론 상으로는 대칭이지만 실제로는 아닙니다. 실제로 &lt;code&gt;setUp()&lt;/code&gt; 에서 파일이나 소켓과 같은 외부 리소스를 할당 한 경우 &lt;code&gt;tearDown()&lt;/code&gt; 만 구현하면됩니다 . &lt;code&gt;setUp()&lt;/code&gt; 이 일반 PHP 객체 만 생성하는 경우 일반적으로 &lt;code&gt;tearDown()&lt;/code&gt; 무시할 수 있습니다 . 그러나 &lt;code&gt;setUp()&lt;/code&gt; 에서 많은 객체를 만드는 경우 &lt;code&gt;tearDown()&lt;/code&gt; 에서 해당 객체를 가리키는 변수 를 &lt;code&gt;unset()&lt;/code&gt; 하여 가비지 수집 될 수 있습니다. 테스트 케이스 오브젝트의 가비지 콜렉션은 예측할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="684edb995e4a9e953126870698a2ff1bc6dad159" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;showOnlySummary&lt;/code&gt;: Show only the summary in &lt;code&gt;--coverage-text&lt;/code&gt; output.</source>
          <target state="translated">&lt;code&gt;showOnlySummary&lt;/code&gt; : &lt;code&gt;--coverage-text&lt;/code&gt; 출력에 요약 만 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="02ae999441e6bf7caccdafb80af40e451ac18852" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;showUncoveredFiles&lt;/code&gt;: Show all whitelisted files in &lt;code&gt;--coverage-text&lt;/code&gt; output not just the ones with coverage information.</source>
          <target state="translated">&lt;code&gt;showUncoveredFiles&lt;/code&gt; : 범위 정보가있는 파일이 &lt;code&gt;--coverage-text&lt;/code&gt; 출력 에 모든 허용 된 파일을 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="5f21163d21b61db9729d14c904c6a41bb8e60113" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Adrian Kuhn et. al.&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ba42479616651ef75120b19ab83f0068142f44" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Branch Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c5cff3b294e12e6945e01c7a6a0faefa31df4f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Change Risk Anti-Patterns (CRAP) Index&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e27319dd7b8472b33a05c78517bf923194864015" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Class and Trait Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b1868df1cc489c784279135dd4ac83da83a8bdc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Function and Method Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0776592dbec737750a192f08668367de3d534f2a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Gerard Meszaros&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad23924e992514cdcb89dbbcd194730305a5cb8b" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Line Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bcb5cd8eedd46b8d9dc4eb0ff8da0666fa5e3ab" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Martin Fowler&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3eff5ef7de8cec28e3b2868009666414cf2abc" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note:&lt;/em&gt; By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See &lt;a href=&quot;#appendixes-annotations-preserveglobalstate&quot;&gt;@preserveGlobalState&lt;/a&gt; for information on how to fix this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d5485a8269bb7882c4acc18e873236190fa018" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Path Coverage&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabeae1899281243cdbe0ea23624047341751efa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Wikipedia&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;Wikipedia&lt;/em&gt;:</target>
        </trans-unit>
        <trans-unit id="537d41abe9dbf1d0b273e2a178fd342c6342b21a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.1: Using the &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 11.1 : &lt;code&gt;@codeCoverageIgnore&lt;/code&gt; , &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; 및 &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; 주석 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72cbc68e23f4a82cfeced2a240129550116dfdbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.2: Tests that specify which method they want to cover&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 11.2 : 어떤 방법을 적용할지 지정하는 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f7a5d070b9cbae1838d876503630249b371429c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.3: A test that specifies that no method should be covered&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 11.3 : 어떤 방법도 다루지 않도록 지정하는 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ad49bf718b9d6f625052daacd200b6be823f55a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 11.4: &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 11.4 : &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2fa3ece13f1ff0d4f3e53ef837c5b73daca78f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.1: The assertTrue() and isTrue() methods of the PHPUnit_Framework_Assert class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 14.1 : PHPUnit_Framework_Assert 클래스의 assertTrue () 및 isTrue () 메소드&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1bef79bd75eb8052b443998707f35f0cfc26e31e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.2: The PHPUnit_Framework_Constraint_IsTrue class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 14.2 : PHPUnit_Framework_Constraint_IsTrue 클래스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e1ecb25cab9200b2fed805e9e4f613976938779a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.3: A simple test listener&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 14.3 : 간단한 테스트 리스너&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f90bea85d5817e2684d07072fe0dc81078fcf25b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.4: Using base test listener&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 14.4 : 기본 테스트 리스너 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b107a4d8c5adf85e55d5031ecfb91b6e037c001c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.5: The RepeatedTest Decorator&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 14.5 : 반복 테스트 데코레이터&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b9dd539894f797d9470a8a989f318cb0e215012" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 14.6: A data-driven test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 14.6 : 데이터 중심 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc7de11596287f3fe1e4a799aefcb9025efbb4a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.10: Using the expectException() method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 2.10 : expectException () 메소드 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="337afeeccc3738c06739ff4fe61a1c64aa4af129" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.11: Using the @expectedException annotation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.11 : @expectedException 주석 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6bb460199f586cdb20439b27a3e98efb679efca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.12: Expecting a PHP error using @expectedException&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.12 : @expectedException을 사용한 PHP 오류 예상&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7faeb7f4d9eec3424fc00df1ac0ba48691238cbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.13: Testing return values of code that uses PHP Errors&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 2.13 : PHP 오류를 사용하는 코드의 리턴 값 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="04f43c6f50b9392fe9e946e38855de0bad3d8a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.14: Testing the output of a function or method&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.14 : 함수 또는 메소드의 출력 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="927ff2f4752e4bbf12c6f979fefb10a0cc458eb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.15: Error output generated when an array comparison fails&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 2.15 : 배열 비교가 실패 할 때 생성되는 오류 출력&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="394f78d7977c5f42f9e5aa7dc1bdfdf9bea25234" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.16: Error output when an array comparison of an long array fails&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 2.16 : 긴 배열의 배열 비교에 실패하면 오류 출력&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48ad1147fa974a907f46fc6da0507c6939eeb710" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.17: Edge case in the diff generation when using weak comparison&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.17 : 약한 비교를 사용할 때 diff 생성의 에지 사례&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db2c202f8a7ceafb8842395ad0f7bfdda98a82da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.1: Testing array operations with PHPUnit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.1 : PHPUnit으로 배열 연산 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e70f647a3e8d31b38c4a3c7c77c1638e415cd2f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.2: Using the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.2 : &lt;code&gt;@depends&lt;/code&gt; 주석을 사용하여 종속성 표현&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e794399369b4a28bcd673bc685cbe65b5c72241" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.3: Exploiting the dependencies between tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.3 : 테스트 간의 종속성 활용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="84b32656807bfcd79defca5658b4eec92c93e7db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.4: Test with multiple dependencies&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 2.4 : 여러 종속성으로 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="675b82b7889718bdf4851e702175fbf646548eb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.5: Using a data provider that returns an array of arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.5 : 배열의 배열을 반환하는 데이터 공급자 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ff9014e6a8fb68ce5aa03f4b962067a3561d362" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.6: Using a data provider with named datasets&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.6 : 이름이 지정된 데이터 세트와 함께 데이터 공급자 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c0c19de488ddbcb5471fdeae5c1f131669c14956" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.7: Using a data provider that returns an Iterator object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 2.7 : Iterator 객체를 반환하는 데이터 공급자 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29fec3696b6a3d4c91a9b064e7221978ad0b6bf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.8: The CsvFileIterator class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.8 : CsvFileIterator 클래스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15889b69d267da75713d32917bb01f7d025060a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 2.9: Combination of @depends and @dataProvider in same test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 2.9 : 동일한 테스트에서 @depends와 @dataProvider의 조합&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35a54136a480d5f2bd8d3ba5ae80da0abf1eb3d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3.1: Named data sets&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 3.1 : 명명 된 데이터 세트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4c4712ccd3b91951deb1495104ba1fee3a6d0bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3.2: Filter pattern examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 3.2 : 필터 패턴 예&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2adbadc30448bb7e13412741dc21a78ff7cb5d67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 3.3: Filter shortcuts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 3.3 : 필터 단축키&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28420c079c0546fe91a6c76ad2ef4edbe9aea8ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4.1: Using setUp() to create the stack fixture&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 4.1 : setUp ()을 사용하여 스택 픽스쳐 생성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="66405829cf50723ce873087dc4fbfe8b4fbb2b45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4.2: Example showing all template methods available&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 4.2 : 사용 가능한 모든 템플릿 방법을 보여주는 예&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="889e05537ca67b263a7e192829d4ade2fc3a9c39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 4.3: Sharing fixture between the tests of a test suite&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 4.3 : 테스트 스위트의 테스트 사이에 조명기 공유&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db31aaa3ce4fec73841ad205ae08eb96e683cdd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 5.1: Composing a Test Suite Using XML Configuration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 5.1 : XML 구성을 사용하여 테스트 스위트 작성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="430f86c80b2a34dba9b8c9bb1bc2277674e50454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 5.2: Composing a Test Suite Using XML Configuration&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 5.2 : XML 구성을 사용하여 테스트 스위트 작성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74c6ad4e58b81e34d3db0b636a83cc3e577027e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7.1: Marking a test as incomplete&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 7.1 : 테스트를 불완전한 것으로 표시&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6afa59578278a136a15fd1473194207543b3058a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7.2: Skipping a test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 7.2 : 테스트 건너 뛰기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e50e5736235ea48077c8c73f8497e437fcd14807" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 7.3: Skipping test cases using @requires&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 7.3 : @requires를 사용하여 테스트 사례 건너 뛰기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="085ea4c7550502ac08f2175fa82a4ee0dc514ce7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.10: The Subject and Observer classes that are part of the System under Test (SUT)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 9.10 : 테스트 대상 시스템 (SUT)의 일부인 Subject 및 Observer 클래스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6460feaa3f38622fa91697ee7c9d2ebfe2f00d15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.11: Testing that a method gets called once and with a specified argument&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.11 : 메소드가 한 번만 호출되고 지정된 인수로 호출되는지 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="353a1360153e4cf19222eeb7f8ba79844c1c3383" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.12: Testing that a method gets called with a number of arguments constrained in different ways&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 9.12 : 메소드가 여러 가지 방식으로 제한된 여러 인수로 호출되는지 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12b886f498ea6d9029d077070b8ba0d69dd21bb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.13: Testing that a method gets called two times with specific arguments.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.13 : 메소드가 특정 인수로 두 번 호출되는지 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2624606e44e41c5efe561b8f0a6458b95b7b5ab6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.14: More complex argument verification&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.14 :보다 복잡한 인수 검증&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0268f76a36e7955edeed8dccc135c4ac704d2a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.15: Testing that a method gets called once and with the identical object as was passed&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.15 : 메소드가 한 번 호출되고 전달 된 것과 동일한 객체로 호출되는지 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86033dafd39d155720c5b901233ecea83731e941" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.16: Create a mock object with cloning parameters enabled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 9.16 : 복제 매개 변수가 활성화 된 모의 객체 만들기&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ca81fd8525be90f6266bcf992c75e4925d0cc223" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.17: Testing that a method gets called once and with a specified argument&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.17 : 메소드가 한 번만 호출되고 지정된 인수로 호출되는지 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="48a15ce2f8ba0a4c99bb791fd151bd462b880706" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.18: Testing the concrete methods of a trait&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.18 : 특성의 구체적인 방법 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aae9477a5e8a50fda46adb8298db2457813e8a95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.19: Testing the concrete methods of an abstract class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.19 : 추상 클래스의 구체적인 메소드 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="75479324e4f179170960ee5a3b658f5ef31808aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.1: The class we want to stub&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 9.1 : 스텁하려는 클래스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a2f0259d0cd3cb442d1c277f595880cca08f18b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.20: Stubbing a web service&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예 9.20 : 웹 서비스 스터 빙&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee81e8a22fab8689786b4a21f6320cb7b92b2ea2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.21: A class that interacts with the filesystem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.21 : 파일 시스템과 상호 작용하는 클래스&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="70709b740f2581cd1ddf604c1fd89fa554b910b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.22: Testing a class that interacts with the filesystem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.22 : 파일 시스템과 상호 작용하는 클래스 테스트&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cde04a4be9eff8b8de163b549e58543825c3cd8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.23: Mocking the filesystem in a test for a class that interacts with the filesystem&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.23 : 파일 시스템과 상호 작용하는 클래스에 대한 테스트에서 파일 시스템 모의&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0e2b766c5228e9c9d82c3fb22cd072edafe7492" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.2: Stubbing a method call to return a fixed value&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 9.2 : 고정 된 값을 반환하기 위해 메서드 호출 스텁&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1b4beb20954dd0b305f33d6f4589bb0f81cac82f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.3: Using the Mock Builder API can be used to configure the generated test double class&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.3 : Mock Builder API 사용을 사용하여 생성 된 테스트 이중 클래스 구성&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="966926fb83f586d3e4503b4a5e6c838b904b7ea7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.4: Stubbing a method call to return one of the arguments&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 9.4 : 인수 중 하나를 반환하기 위해 메서드 호출 스텁&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dcf331f22ea094ec036a841f0511a70f753a5ecc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.5: Stubbing a method call to return a reference to the stub object&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 9.5 : 스텁 객체에 대한 참조를 반환하기위한 메소드 호출 스텁&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d8eca1ff7f8c31190dcac901a213678ceebc9a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.6: Stubbing a method call to return the value from a map&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.6 : 맵에서 값을 반환하기 위해 메소드 호출 스텁&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20b3cbf4a57b2957caa6f2aa617ccb971fe0600e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.7: Stubbing a method call to return a value from a callback&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example 9.7 : 콜백에서 값을 반환하기 위해 메서드 호출 스텁&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="444e902b7a4373bb0f4d717694130a016fe448cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.8: Stubbing a method call to return a list of values in the specified order&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.8 : 메소드 호출을 스텁하여 지정된 순서로 값 목록을 리턴&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ab0ad4c5599f681eb352b9f40b734f07d3c047d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example 9.9: Stubbing a method call to throw an exception&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 9.9 : 메소드 호출을 스터 빙하여 예외 발생&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e410312dcda80a29e47c9962e467c45d8ac4e34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.10: Usage of assertCount()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.10 : assertCount () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da5c55653ca59b9463fb56677a0b1787658723b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.11: Usage of assertDirectoryExists()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.11 : assertDirectoryExists () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62ac7540a8ed7db60a9771f39cfd688b8b7665f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.12: Usage of assertDirectoryIsReadable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.12 : assertDirectoryIsReadable () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4662e75e0f6a5b72cac519644eff3602bd89e385" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.13: Usage of assertDirectoryIsWritable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.13 : assertDirectoryIsWritable () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e52b6914360e55e8f9cc18c53997a6ba66a6b15c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.14: Usage of assertEmpty()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.14 : assertEmpty () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f672fcbb4be1c8a30e0914a7811807054db0feb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.15: Usage of assertEqualXMLStructure()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.15 : assertEqualXMLStructure () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="975fe0608c6b3b281fde9d558378a80d2129ca67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.16: Usage of assertEquals()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.16 : assertEquals () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dde707e9204065bb47c735bc75350e22dd22cf9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.17: Usage of assertEquals() with floats&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.17 : float와 함께 assertEquals () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e64aa93d946e4b9bfca36e6bf493cba2c83914d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.18: Usage of assertEquals() with DOMDocument objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.18 : DOMDocument 객체와 함께 assertEquals () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0dbaf6e509c59f254971460ac393b890530bd61e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.19: Usage of assertEquals() with objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.19 : 객체와 함께 assertEquals () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c31bfc73aea152f8ea0c5d8eadc8e968b4789f33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.1: Usage of assertArrayHasKey()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.1 : assertArrayHasKey () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15e7ef5c3f4f01252f938d794cabb6b6e0e328e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.20: Usage of assertEquals() with arrays&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.20 : 배열과 함께 assertEquals () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b96eac1a539e742e131c6bd02ac5f1e4b2c6208" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.21: Usage of assertFalse()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.21 : assertFalse () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b34a0bd8428075f26f036de71389433f21410b76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.22: Usage of assertFileEquals()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.22 : assertFileEquals () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3906ba05593c0cdea7e0915d24e05a1608c85d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.23: Usage of assertFileExists()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.23 : assertFileExists () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e3c5cbe33cf28106f312197f107b9461a7fcf02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.24: Usage of assertFileIsReadable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.24 : assertFileIsReadable () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffe3f2e0d160bcbc1e3da17a32e4143f59601866" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.25: Usage of assertFileIsWritable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.25 : assertFileIsWritable () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3813bdc3781298f6c0bd8f56f27728780b698b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.26: Usage of assertGreaterThan()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.26 : assertGreaterThan () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="145795ec14bb262aeef168d45b1b8ca1d3d9d4b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.27: Usage of assertGreaterThanOrEqual()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.27 : assertGreaterThanOrEqual () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2934090b34180c1e36e6cf02de359ba026f6684d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.28: Usage of assertInfinite()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.28 : assertInfinite () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4cf9ad79e50a9cb2caeb17f83ad1fb2f03eb0fc4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.29: Usage of assertInstanceOf()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.29 : assertInstanceOf () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1d4d585cc23c436cf6de8a3743f9fff09675629" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.2: Usage of assertClassHasAttribute()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.2 : assertClassHasAttribute () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ee4399a90f29d16e53c2599dc09ed1abb9029df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.30: Usage of assertInternalType()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.30 : assertInternalType () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6fe9b37a3a7649f1b3c39e5c871f511db1a69e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.31: Usage of assertIsReadable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.31 : assertIsReadable () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5f0caa3f0c007ccda832ff2e6f901bcf24ccff2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.32: Usage of assertIsWritable()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.32 : assertIsWritable () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d9e1415c8f246cc599a9a889df744a1ea9c4afea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.33: Usage of assertJsonFileEqualsJsonFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.33 : assertJsonFileEqualsJsonFile () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02f6b658745529afa0c06127da1310716a22e0e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.34: Usage of assertJsonStringEqualsJsonFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.34 : assertJsonStringEqualsJsonFile () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa0c51af090f452757ac365b8c23c2ee603dbbfb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.35: Usage of assertJsonStringEqualsJsonString()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.35 : assertJsonStringEqualsJsonString () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0054e1ef183a9e075849472e0d4f93e968a0630c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.36: Usage of assertLessThan()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.36 : assertLessThan () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa30fd8be5f35796399708bf5d2d7a66346c0f43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.37: Usage of assertLessThanOrEqual()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.37 : assertLessThanOrEqual () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3acbf10effb60d96d7eb9c4996742e7ea52d7b02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.38: Usage of assertNan()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.38 : assertNan () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7747bc525af8da35664d51724a247c41be09b3d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.39: Usage of assertNull()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.39 : assertNull () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f80756c63468915680f1b50c7c12246bcb07ad9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.3: Usage of assertArraySubset()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.3 : assertArraySubset () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc15016a5440ea5b2743fbb1c33cec2f16270b9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.40: Usage of assertObjectHasAttribute()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.40 : assertObjectHasAttribute () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dff3bd64d56f30da1fdebab0131c3fd16f814ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.41: Usage of assertRegExp()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.41 : assertRegExp () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c7354915ab2413413e130ef0aab14fc9495a9ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.42: Usage of assertStringMatchesFormat()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.42 : assertStringMatchesFormat () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3a2b9c61eee627e5dc1d053e968ee3c83d4481b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.43: Usage of assertStringMatchesFormatFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.43 : assertStringMatchesFormatFile () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2820324d97d3b483b9722c7986852ebed8a1a10f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.44: Usage of assertSame()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.44 : assertSame () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27c830a0acc3c2414579c526195cb14e469b0613" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.45: Usage of assertSame() with objects&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.45 : 객체와 함께 assertSame () 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02a5eff84afe7d9c78bc6eb4a81936e4067d2eb8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.46: Usage of assertStringEndsWith()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.46 : assertStringEndsWith () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0154f6a484ab546365b94b7005f98a1fdf2911ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.47: Usage of assertStringEqualsFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.47 : assertStringEqualsFile () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="53275d60898fdc2c1138cbbd1cf9e3b720e447da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.48: Usage of assertStringStartsWith()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.48 : assertStringStartsWith () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4b1f22d0855542a9d01057914b5e2bdc86fcadc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.49: Usage of assertThat()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.49 : assertThat () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="28a84c2171dd608bc366b9d75254dc16ff1a6b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.4: Usage of assertClassHasStaticAttribute()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.4 : assertClassHasStaticAttribute () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="458a3c8c4060d0316b44082fbbec69403e3b1260" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.50: Usage of assertTrue()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.50 : assertTrue () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a34a2d47d40eff400d4355618bd4240c3bce27f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.51: Usage of assertXmlFileEqualsXmlFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.51 : assertXmlFileEqualsXmlFile () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc33ebce62eef496820b06632463d8e2109abddc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.52: Usage of assertXmlStringEqualsXmlFile()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.52 : assertXmlStringEqualsXmlFile () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d4e18e1dcbd81f0461109943b3db45c0dbd9b342" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.53: Usage of assertXmlStringEqualsXmlString()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.53 : assertXmlStringEqualsXmlString () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af7ad99dd26e50663c62bffc7aaa3f073f8fbe67" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.5: Usage of assertContains()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.5 : assertContains () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="596ee04219444986f41d1e415c972f4f7f506081" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.6: Usage of assertContains()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.6 : assertContains () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="13669e023b1824a325563fc89d66ba03f55cc6f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.7: Usage of assertContains() with $ignoreCase&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.7 : $ ignoreCase와 함께 assertContains () 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ac4b1d8cbfae3af57cc82b68a6a7d79e5208ef2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.8: Usage of assertContainsOnly()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.8 : assertContainsOnly () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80d7cb0b817f5beec307aba4c4d0236f8a21ecfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example A.9: Usage of assertContainsOnlyInstancesOf()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 A.9 : assertContainsOnlyInstancesOf () 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e7650b0e8c05d5ef97fbdf23514d65ac454afb01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example B.1: Using @coversDefaultClass to shorten annotations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;예제 B.1 : @coversDefaultClass를 사용하여 주석 단축&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="073210a00d5fa45bd9df8274c4dd2535c9be8f29" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you upload PHPUnit to a webserver then your deployment process is broken. On a more general note, if your&lt;/strong&gt;&lt;code&gt;vendor&lt;/code&gt;&lt;strong&gt;directory is publicly accessible on your webserver then your deployment process is also broken.&lt;/strong&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66aa927b841af8df3a63737dbc16a05e9ddd1a9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; You cannot use both exclude and include column filtering on the same table, only on different ones. Plus it is only possible to either white- or blacklist tables, not both of them.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; 동일한 테이블에서 제외 및 포함 열 필터링을 모두 사용할 수는 없으며 다른 테이블에서만 사용할 수 있습니다. 또한 테이블을 화이트리스트 또는 블랙리스트로만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b87a15bfa1b58872f114180bc75b59c194920677" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; By default, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. See &lt;a href=&quot;appendixes.annotations#appendixes.annotations.preserveGlobalState&quot;&gt;the section called &amp;ldquo;@preserveGlobalState&amp;rdquo;&lt;/a&gt; for information on how to fix this.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 기본적으로 PHPUnit은 상위 프로세스의 모든 전역을 직렬화하고 하위 프로세스에서 직렬화를 해제하여 상위 프로세스에서 전역 상태를 유지하려고합니다. 부모 프로세스에 직렬화 할 수없는 전역이 포함 된 경우 문제가 발생할 수 있습니다. 이 문제를 해결하는 방법에 대한 정보 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.preserveGlobalState&quot;&gt;는&amp;ldquo;@preserveGlobalState&amp;rdquo;섹션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a9d5848d35fc2622b4d7b23219382b545f9e7a06" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 2.1. Methods for testing output&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 2.1. 출력 테스트 방법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a89720e839260a52342ef4a94f7b862594dcaf83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 7.1. API for Incomplete Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 7.1. 불완전한 테스트를위한 API&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4fb857dbab5f2ea34038ce911b3fc490dd1162e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 7.2. API for Skipping Tests&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 7.2. 테스트 건너 뛰기를위한 API&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4bbb8cad9580045ba301953f1b21d33e5f5c245" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 7.3. Possible @requires usages&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 7.3. 가능한 @ 필요 사용법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c0748eb24691eb17b6ca9df3288c1a5f9b53cb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table 9.1. Matchers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 9.1. 매처&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3cbaf389f90efbe04d952bc290a7728446d8c030" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table A.1. Constraints&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 A.1. 제약&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d90a265485244059468af81342d0e68c2f6ed844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table B.1. Annotations for specifying which methods are covered by a test&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;표 B.1. 테스트에 포함되는 방법을 지정하기위한 주석&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2699d1c02b4ea0cbb6563ef868b78a8c8a882e12" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What is a Fixture?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;정착물이란 무엇입니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51da0ac1fccf633acd01ec4e660cec7a9e944c11" translate="yes" xml:space="preserve">
          <source>@after</source>
          <target state="translated">@after</target>
        </trans-unit>
        <trans-unit id="eef9279e1a9d0164589382778d6f18b8b94a377f" translate="yes" xml:space="preserve">
          <source>@afterClass</source>
          <target state="translated">@afterClass</target>
        </trans-unit>
        <trans-unit id="b08cced4776283da785202f5e6d9dd80b243deaf" translate="yes" xml:space="preserve">
          <source>@author</source>
          <target state="translated">@author</target>
        </trans-unit>
        <trans-unit id="1ea579ab15beb61d0bcb4210f3099841f91835d3" translate="yes" xml:space="preserve">
          <source>@backupGlobals</source>
          <target state="translated">@backupGlobals</target>
        </trans-unit>
        <trans-unit id="9b117699b179c399a73fde79e709cdb114ce33cf" translate="yes" xml:space="preserve">
          <source>@backupStaticAttributes</source>
          <target state="translated">@backupStaticAttributes</target>
        </trans-unit>
        <trans-unit id="70b9df4b287ab4e833df221716fa991965d7422f" translate="yes" xml:space="preserve">
          <source>@before</source>
          <target state="translated">@before</target>
        </trans-unit>
        <trans-unit id="b36d2c154f66e9ebade5bed9bc3bb2642fa1616f" translate="yes" xml:space="preserve">
          <source>@beforeClass</source>
          <target state="translated">@beforeClass</target>
        </trans-unit>
        <trans-unit id="6c7c02caca2893e30191e36734cfead82ad3b0e6" translate="yes" xml:space="preserve">
          <source>@codeCoverageIgnore*</source>
          <target state="translated">@codeCoverageIgnore*</target>
        </trans-unit>
        <trans-unit id="eb3c1c50649fa034560002fbdf35fd6a4ac3473e" translate="yes" xml:space="preserve">
          <source>@covers</source>
          <target state="translated">@covers</target>
        </trans-unit>
        <trans-unit id="5853aba9457f169c8dd4e672c90c1d241a65ae43" translate="yes" xml:space="preserve">
          <source>@coversDefaultClass</source>
          <target state="translated">@coversDefaultClass</target>
        </trans-unit>
        <trans-unit id="9588cf2d07a92a9464729a382f542ed02b1705b3" translate="yes" xml:space="preserve">
          <source>@coversNothing</source>
          <target state="translated">@coversNothing</target>
        </trans-unit>
        <trans-unit id="839d622467804554eea76f2beb4520670fc2ca6d" translate="yes" xml:space="preserve">
          <source>@dataProvider</source>
          <target state="translated">@dataProvider</target>
        </trans-unit>
        <trans-unit id="94d8b80d80517c3257d9f20cbac36b81fedf378e" translate="yes" xml:space="preserve">
          <source>@depends</source>
          <target state="translated">@depends</target>
        </trans-unit>
        <trans-unit id="2c427dd45bd3a13a66fccedef92e49c0b8eda30b" translate="yes" xml:space="preserve">
          <source>@doesNotPerformAssertions</source>
          <target state="translated">@doesNotPerformAssertions</target>
        </trans-unit>
        <trans-unit id="2e1ff92e3578dd7901644f6db945d221b5ed1f98" translate="yes" xml:space="preserve">
          <source>@expectedException</source>
          <target state="translated">@expectedException</target>
        </trans-unit>
        <trans-unit id="21d721c654a9d3db3d6e722922ae65eeda48d566" translate="yes" xml:space="preserve">
          <source>@expectedExceptionCode</source>
          <target state="translated">@expectedExceptionCode</target>
        </trans-unit>
        <trans-unit id="ec58c45d6034e1cdfc35f781f34bb42b74f3066a" translate="yes" xml:space="preserve">
          <source>@expectedExceptionMessage</source>
          <target state="translated">@expectedExceptionMessage</target>
        </trans-unit>
        <trans-unit id="be1c50f6c30b95242acb8cbb1553e3e553daa646" translate="yes" xml:space="preserve">
          <source>@expectedExceptionMessageRegExp</source>
          <target state="translated">@expectedExceptionMessageRegExp</target>
        </trans-unit>
        <trans-unit id="c77112aa45ef7f201f2f327cfc23617979163387" translate="yes" xml:space="preserve">
          <source>@group</source>
          <target state="translated">@group</target>
        </trans-unit>
        <trans-unit id="5587692fda860004ad973f85238abc153fd6931b" translate="yes" xml:space="preserve">
          <source>@large</source>
          <target state="translated">@large</target>
        </trans-unit>
        <trans-unit id="f8feb4eb116cc7094e32370c1fefe8d96217f639" translate="yes" xml:space="preserve">
          <source>@medium</source>
          <target state="translated">@medium</target>
        </trans-unit>
        <trans-unit id="12fe6e2e9f2c461eca3144e9178b41d314d7d8c7" translate="yes" xml:space="preserve">
          <source>@preserveGlobalState</source>
          <target state="translated">@preserveGlobalState</target>
        </trans-unit>
        <trans-unit id="2eecd823a7ca0fb7891bca567711b65be2e71039" translate="yes" xml:space="preserve">
          <source>@requires</source>
          <target state="translated">@requires</target>
        </trans-unit>
        <trans-unit id="4cdb22e630ac6752cf8f0c4f0103c87c5f55ba90" translate="yes" xml:space="preserve">
          <source>@requires OS Linux</source>
          <target state="translated">@ OS Linux가 필요합니다</target>
        </trans-unit>
        <trans-unit id="bdc783d23000d16909cca6ef7e0ec861afb042c2" translate="yes" xml:space="preserve">
          <source>@requires OS WIN32|WINNT</source>
          <target state="translated">@ OS WIN32가 필요합니다. | WINNT</target>
        </trans-unit>
        <trans-unit id="2b3533527c52377b63529d3b13717f02b5ebf6dd" translate="yes" xml:space="preserve">
          <source>@requires OSFAMILY Solaris</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74c6629c86efb61875369a0bf36d5bb5ac9d0f0" translate="yes" xml:space="preserve">
          <source>@requires OSFAMILY Windows</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f1b06ac02ba337ba5da659544bc2bfb035625c" translate="yes" xml:space="preserve">
          <source>@requires PHP &amp;gt;= 7.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5eda49db975d974a65b119d4fa5ecb62d2e8569" translate="yes" xml:space="preserve">
          <source>@requires PHP 5.3.3</source>
          <target state="translated">@는 PHP 5.3.3 필요</target>
        </trans-unit>
        <trans-unit id="84d5bc547790cdfca901bebf63549d063a2fa920" translate="yes" xml:space="preserve">
          <source>@requires PHP 7.1-dev</source>
          <target state="translated">@는 PHP 7.1-dev 필요</target>
        </trans-unit>
        <trans-unit id="fb1774faa93f273647b365cad8726dad1182ef7f" translate="yes" xml:space="preserve">
          <source>@requires PHP 7.1.20</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e2a498540d29b74e5709f103e0f51cd111c690" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit &amp;lt; 8</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41a84282d4fcdefa50fb2b42304164d166e76a7e" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit 3.6.3</source>
          <target state="translated">@PHPUnit 3.6.3 필요</target>
        </trans-unit>
        <trans-unit id="bf836d538f3f0531ef8e5874c228f034e5573cc1" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit 4.6</source>
          <target state="translated">@PHPUnit 4.6 필요</target>
        </trans-unit>
        <trans-unit id="a9c0a8006f235bbab4c7adef5741f8ecbebc0f72" translate="yes" xml:space="preserve">
          <source>@requires PHPUnit 7.3.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0c7b57a34438d4a040fd02c874adf2c6b4e8c0" translate="yes" xml:space="preserve">
          <source>@requires extension mysqli</source>
          <target state="translated">@ 확장 mysqli 필요</target>
        </trans-unit>
        <trans-unit id="22ebbb8522e61c6294e6e82b0e2b7fd1b2544088" translate="yes" xml:space="preserve">
          <source>@requires extension redis &amp;gt;= 2.2.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31c39b916a7d2a02f4779b40538f5f2a90d35a97" translate="yes" xml:space="preserve">
          <source>@requires extension redis 2.2.0</source>
          <target state="translated">@ 확장명 redis 2.2.0 필요</target>
        </trans-unit>
        <trans-unit id="992301fe011b880b365bf0d13406d7770c8304f8" translate="yes" xml:space="preserve">
          <source>@requires function ReflectionMethod::setAccessible</source>
          <target state="translated">@ 함수 ReflectionMethod :: setAccessible 필요</target>
        </trans-unit>
        <trans-unit id="2583539f5d19f5f90413b83f0ed40c89365ef937" translate="yes" xml:space="preserve">
          <source>@requires function imap_open</source>
          <target state="translated">@imap_open 함수가 필요합니다</target>
        </trans-unit>
        <trans-unit id="7925a78d610d25b7a884488b7fa7c303d626375f" translate="yes" xml:space="preserve">
          <source>@runInSeparateProcess</source>
          <target state="translated">@runInSeparateProcess</target>
        </trans-unit>
        <trans-unit id="a71b3e90026751695df553604d49f5b67117db53" translate="yes" xml:space="preserve">
          <source>@runTestsInSeparateProcesses</source>
          <target state="translated">@runTestsInSeparateProcesses</target>
        </trans-unit>
        <trans-unit id="b15a3e44fa587476d9f569f614f161718d9f425b" translate="yes" xml:space="preserve">
          <source>@small</source>
          <target state="translated">@small</target>
        </trans-unit>
        <trans-unit id="bd2ccff7430fd392cf27f2c3cc394f784e2232f6" translate="yes" xml:space="preserve">
          <source>@test</source>
          <target state="translated">@test</target>
        </trans-unit>
        <trans-unit id="3758f4fc55edda2c777b77832aa789c923c19bfe" translate="yes" xml:space="preserve">
          <source>@testWith</source>
          <target state="translated">@testWith</target>
        </trans-unit>
        <trans-unit id="d757d33fb5ba9b2880a44a9bc5cc88422f37d8f2" translate="yes" xml:space="preserve">
          <source>@testdox</source>
          <target state="translated">@testdox</target>
        </trans-unit>
        <trans-unit id="c34a78ebd8571dab0d7392cee3bbf594637f2ce6" translate="yes" xml:space="preserve">
          <source>@ticket</source>
          <target state="translated">@ticket</target>
        </trans-unit>
        <trans-unit id="c8166c254ebb7f136d18982b3353e78cc615af25" translate="yes" xml:space="preserve">
          <source>@uses</source>
          <target state="translated">@uses</target>
        </trans-unit>
        <trans-unit id="bd38f8da2615fd4ce69bc44606dbb7ba4303d469" translate="yes" xml:space="preserve">
          <source>A &quot;bootstrap&quot; PHP file that is run before the tests.</source>
          <target state="translated">테스트 전에 실행되는 &quot;부트 스트랩&quot;PHP 파일</target>
        </trans-unit>
        <trans-unit id="b11c581ce7917127817a72c8269dcd7f99c49a52" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;bootstrap&amp;rdquo; PHP file that is run before the tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d73be34f9585bdc839dda049e516f732db5334" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&amp;lt;testsuite&amp;gt;&lt;/code&gt; element must have a &lt;code&gt;name&lt;/code&gt; attribute and may have one or more &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; child elements that configure directories and/or files, respectively, that should be searched for tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fe4de63745284e6ccb7b180c62dde2b5c5529f" translate="yes" xml:space="preserve">
          <source>A PHP DataSet has obvious advantages over all the other file-based datasets:</source>
          <target state="translated">PHP DataSet은 다른 모든 파일 기반 데이터 셋에 비해 확실한 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2cc0a4098a413d65c205891e90d2e0f34f9d949" translate="yes" xml:space="preserve">
          <source>A central concept of PHPUnit's Database Extension are DataSets and DataTables. You should try to understand this simple concept to master database testing with PHPUnit. The DataSet and DataTable are an abstraction layer around your database tables, rows and columns. A simple API hides the underlying database contents in an object structure, which can also be implemented by other non-database sources.</source>
          <target state="translated">PHPUnit의 데이터베이스 확장의 핵심 개념은 DataSet과 DataTable입니다. PHPUnit으로 데이터베이스 테스트를 마스터하려면이 간단한 개념을 이해해야합니다. DataSet 및 DataTable은 데이터베이스 테이블, 행 및 열 주위의 추상화 계층입니다. 간단한 API는 기본이 아닌 데이터베이스 내용을 객체 구조로 숨기며 다른 비 데이터베이스 소스로 구현할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b9c466f16b0f5f8a7262bc98a8bd1d3f37da6bc" translate="yes" xml:space="preserve">
          <source>A common question, especially from developers new to PHPUnit, is whether using &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;, for instance, is &quot;the right way&quot; to invoke an assertion. The short answer is: there is no right way. And there is no wrong way, either. It is a matter of personal preference.</source>
          <target state="translated">특히 PHPUnit을 처음 접하는 개발자들에게 일반적인 질문은 &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; 또는 &lt;code&gt;self::assertTrue()&lt;/code&gt; 를 사용하는 것이 어설 션을 호출하는 &quot;올바른 방법&quot;인지에 대한 것입니다. 짧은 대답은 올바른 방법이 없다는 것입니다. 그리고 잘못된 길도 없습니다. 개인적인 취향의 문제입니다.</target>
        </trans-unit>
        <trans-unit id="dc0344e9f82e7d92286b2b64e1e890407936cef8" translate="yes" xml:space="preserve">
          <source>A common question, especially from developers new to PHPUnit, is whether using &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;, for instance, is &amp;ldquo;the right way&amp;rdquo; to invoke an assertion. The short answer is: there is no right way. And there is no wrong way, either. It is a matter of personal preference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce940dc93f69307efa6648bad3ae55fc78c1b01" translate="yes" xml:space="preserve">
          <source>A complete list of possibilities and examples can be found at &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests-requires-tables-api&quot;&gt;Possible @requires usages&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="881acaaeaf80f46271da9620d6c9f77b3e887eac" translate="yes" xml:space="preserve">
          <source>A complete list of possibilities and examples can be found at &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.requires.tables.api&quot;&gt;Table 7.3&lt;/a&gt;</source>
          <target state="translated">가능성과 예의 전체 목록은 &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests.requires.tables.api&quot;&gt;표 7.3에 나와 있습니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b9f5037806635c8da7cf25ff7b7b5be88d00106e" translate="yes" xml:space="preserve">
          <source>A consumer is a test method that depends on one or more producers and their return values.</source>
          <target state="translated">소비자는 하나 이상의 생산자와 반환 값에 따라 달라지는 테스트 방법입니다.</target>
        </trans-unit>
        <trans-unit id="87bc3e8d56e3576276d336c4a3bf6c980298be30" translate="yes" xml:space="preserve">
          <source>A data provider method must be &lt;code&gt;public&lt;/code&gt; and either return an array of arrays or an object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments.</source>
          <target state="translated">데이터 제공자 메소드는 &lt;code&gt;public&lt;/code&gt; 이어야하며 &lt;code&gt;Iterator&lt;/code&gt; 배열 또는 반복자 인터페이스 를 구현하고 각 반복 단계마다 배열을 생성하는 오브젝트의 배열을 리턴 해야합니다 . 컬렉션의 일부인 각 배열에 대해 배열의 내용을 인수로하여 테스트 메소드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e0d64528687f619a62dbbc84308c8f617fa79ee4" translate="yes" xml:space="preserve">
          <source>A data set consists of one or many elements. To define a data set with multiple elements, define each element in a separate line. Each element of the data set must be an array defined in JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cad2307db6b9c400a642024bfb42e597e930b0ef" translate="yes" xml:space="preserve">
          <source>A doc comment in PHP must start with &lt;code&gt;/**&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt;. Annotations in any other style of comment will be ignored.</source>
          <target state="translated">PHP의 문서 주석은 &lt;code&gt;/**&lt;/code&gt; 로 시작 하고 &lt;code&gt;*/&lt;/code&gt; 로 끝나야 합니다. 다른 스타일의 주석은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="fc8287b85560cce71af927479091e1fe87da5236" translate="yes" xml:space="preserve">
          <source>A drawback of this approach is that we have no control over the order in which the tests are run. This can lead to problems with regard to test dependencies, see &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-test-dependencies&quot;&gt;Test Dependencies&lt;/a&gt;. In the next section you will see how you can make the test execution order explicit by using the XML configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd541708c4fd27e803dc828564f00ecf3458d4b8" translate="yes" xml:space="preserve">
          <source>A drawback of this approach is that we have no control over the order in which the tests are run. This can lead to problems with regard to test dependencies, see &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies&quot;&gt;the section called &amp;ldquo;Test Dependencies&amp;rdquo;&lt;/a&gt;. In the next section you will see how you can make the test execution order explicit by using the XML configuration file.</source>
          <target state="translated">이 방법의 단점은 테스트 실행 순서를 제어 할 수 없다는 것입니다. 이로 인해 테스트 종속성과 관련된 문제가 발생할 수 있습니다 . &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies&quot;&gt;&quot;테스트 종속성&quot;섹션을&lt;/a&gt; 참조하십시오 . 다음 섹션에서는 XML 구성 파일을 사용하여 테스트 실행 순서를 명시 적으로 만드는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="7809ae599295b4dd632a11320a1f45ab8ec8c88f" translate="yes" xml:space="preserve">
          <source>A fixture describes the initial state your application and database are in when you execute a test.</source>
          <target state="translated">조명기는 테스트를 실행할 때 응용 프로그램과 데이터베이스의 초기 상태를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fdd2b82e21f85df0f3ae4eeab236d6f44282531f" translate="yes" xml:space="preserve">
          <source>A global variable &lt;code&gt;$foo = 'bar';&lt;/code&gt; is stored as &lt;code&gt;$GLOBALS['foo'] = 'bar';&lt;/code&gt;.</source>
          <target state="translated">전역 변수 &lt;code&gt;$foo = 'bar';&lt;/code&gt; &lt;code&gt;$GLOBALS['foo'] = 'bar';&lt;/code&gt; 로 저장됩니다 . .</target>
        </trans-unit>
        <trans-unit id="6c6abca3eabc3075164e1273782032e88ce6fc58" translate="yes" xml:space="preserve">
          <source>A good example of a fixture that makes sense to share across several tests is a database connection: you log into the database once and reuse the database connection instead of creating a new connection for each test. This makes your tests run faster.</source>
          <target state="translated">여러 테스트에서 공유하는 것이 좋은 조명기의 좋은 예는 데이터베이스 연결입니다. 데이터베이스에 한 번 로그인 한 다음 각 테스트에 대해 새 연결을 만드는 대신 데이터베이스 연결을 다시 사용하십시오. 이렇게하면 테스트가 더 빨리 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="4667d071c3dac07a47cfa5cffc291f6e73e132e5" translate="yes" xml:space="preserve">
          <source>A method with name &lt;code&gt;$method&lt;/code&gt; must exist on the &lt;code&gt;$actual&lt;/code&gt; object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9ad2bd541722a94b4a67310fdbfeba1c136d7c5" translate="yes" xml:space="preserve">
          <source>A producer is a test method that yields its unit under test as return value.</source>
          <target state="translated">생산자는 테스트중인 단위를 반환 값으로 산출하는 테스트 방법입니다.</target>
        </trans-unit>
        <trans-unit id="8e6f4cf7fffc73d4e7408e5c1d91cde257740414" translate="yes" xml:space="preserve">
          <source>A regexp matching &lt;a href=&quot;http://php.net/manual/en/reserved.constants.php#constant.php-os&quot;&gt;PHP_OS&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/reserved.constants.php#constant.php-os&quot;&gt;PHP_OS와&lt;/a&gt; 일치하는 정규 표현식</target>
        </trans-unit>
        <trans-unit id="600aabf9b87f60ff54c35cb779f359c079d9842c" translate="yes" xml:space="preserve">
          <source>A regexp matching &lt;a href=&quot;https://www.php.net/manual/en/reserved.constants.php#constant.php-os&quot;&gt;PHP_OS&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779505ea2e787ef60c25b732ac7ebee50d45a2d6" translate="yes" xml:space="preserve">
          <source>A simpler alternative to setting up a callback method may be to specify a list of desired return values. You can do this with the &lt;code&gt;onConsecutiveCalls()&lt;/code&gt; method. See &lt;a href=&quot;#test-doubles-stubs-examples-stubtest7-php&quot;&gt;Example 8.9&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94edd608d6f115d9df0299e3359fe07c53829de8" translate="yes" xml:space="preserve">
          <source>A simpler alternative to setting up a callback method may be to specify a list of desired return values. You can do this with the &lt;code&gt;onConsecutiveCalls()&lt;/code&gt; method. See &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest7.php&quot;&gt;Example 9.8&lt;/a&gt; for an example.</source>
          <target state="translated">콜백 메소드를 설정하는보다 간단한 대안은 원하는 반환 값 목록을 지정하는 것입니다. &lt;code&gt;onConsecutiveCalls()&lt;/code&gt; 메소드를 사용하여 이를 수행 할 수 있습니다 . &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest7.php&quot;&gt;예는 예 9.8&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d9defe78836483213d5fcf93968970a4622e6d1" translate="yes" xml:space="preserve">
          <source>A table is also represented by the following interface:</source>
          <target state="translated">테이블은 또한 다음 인터페이스로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="6df2a99c06dcb440a325fdd8286ea0c2a923de8b" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@large&lt;/code&gt; will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForLargeTests&lt;/code&gt; attribute in the &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f8c420b8b61a63466acecb0a6e794694162b04" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@large&lt;/code&gt; will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForLargeTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">&lt;code&gt;@large&lt;/code&gt; 로 주석이 달린 테스트 는 실행하는 데 60 초 이상 걸리면 실패합니다. 이 제한 시간은 XML 구성 파일 의 &lt;code&gt;timeoutForLargeTests&lt;/code&gt; 속성을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0dca38740172f19f41c60f049eb9804c07d8318" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@medium&lt;/code&gt; will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForMediumTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">&lt;code&gt;@medium&lt;/code&gt; 으로 주석이 달린 테스트 는 실행하는 데 10 초 이상 걸리면 실패합니다. 이 제한 시간은 XML 구성 파일 의 &lt;code&gt;timeoutForMediumTests&lt;/code&gt; 속성을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af849cab2e533581291de611e36dd2cdbff8aaef" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@medium&lt;/code&gt; will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForMediumTests&lt;/code&gt; attribute in the configuration &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821e7b788ee16c7a06aa9b34a401b2b2589eca6c" translate="yes" xml:space="preserve">
          <source>A test annotated with &lt;code&gt;@small&lt;/code&gt; will fail if it takes longer than 1 second to execute. This timeout is configurable via the &lt;code&gt;timeoutForSmallTests&lt;/code&gt; attribute in the &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef80ef17fc5a4b1d7abfe0e64e4fa918e225ad84" translate="yes" xml:space="preserve">
          <source>A test can be tagged as belonging to one or more groups using the &lt;code&gt;@group&lt;/code&gt; annotation like this</source>
          <target state="translated">다음 과 같이 &lt;code&gt;@group&lt;/code&gt; 주석을 사용하여 테스트에 하나 이상의 그룹에 속하는 것으로 태그를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e86986342fad073dbad7d712faaab7d085f0a3f" translate="yes" xml:space="preserve">
          <source>A test may have more than one &lt;code&gt;@depends&lt;/code&gt; annotation. PHPUnit does not change the order in which tests are executed, you have to ensure that the dependencies of a test can actually be met before the test is run.</source>
          <target state="translated">테스트에는 둘 이상의 &lt;code&gt;@depends&lt;/code&gt; 주석 이있을 수 있습니다 . PHPUnit은 테스트 실행 순서를 변경하지 않으므로 테스트를 실행하기 전에 테스트의 종속성이 실제로 충족 될 수 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="51e4deafef7f62319d5ddb7e9da275eecd586eed" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method (&lt;code&gt;additionProvider()&lt;/code&gt; in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;Example 2.5&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="translated">테스트 방법은 임의의 인수를 허용 할 수 있습니다. 이 인수는 데이터 제공자 메소드 ( &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;예 2.5의 &lt;/a&gt; &lt;code&gt;additionProvider()&lt;/code&gt; 에 의해 제공됩니다 . 사용될 데이터 제공자 메소드는 &lt;code&gt;@dataProvider&lt;/code&gt; 어노테이션을 사용하여 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="671dba06ced306515f4a13da3ef267812d9ecc75" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by a data provider method (&lt;code&gt;provider()&lt;/code&gt; in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;Example 2.5&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="translated">테스트 방법은 임의의 인수를 허용 할 수 있습니다. 이 인수는 데이터 제공자 메소드 ( &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DataTest.php&quot;&gt;예 2.5의 &lt;/a&gt; &lt;code&gt;provider()&lt;/code&gt; 에 의해 제공됩니다 . 사용될 데이터 제공자 메소드는 &lt;code&gt;@dataProvider&lt;/code&gt; 어노테이션을 사용하여 지정 됩니다.</target>
        </trans-unit>
        <trans-unit id="2bf3e9b493b37ef620d22203e70956a50b9d18fc" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (&lt;code&gt;additionProvider()&lt;/code&gt; in &lt;a href=&quot;#writing-tests-for-phpunit-data-providers-examples-datatest-php&quot;&gt;Example 2.5&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3c06ef0cf08328b364d68a2ec37651075f84095" translate="yes" xml:space="preserve">
          <source>A test method can accept arbitrary arguments. These arguments are to be provided by one or more data provider methods (&lt;code&gt;provider()&lt;/code&gt; in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers-examples-datatest-php&quot;&gt;Using a data provider that returns an array of arrays&lt;/a&gt;). The data provider method to be used is specified using the &lt;code&gt;@dataProvider&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6251fd3e2668fd6fad90f7b9a7f3f187dd31a98b" translate="yes" xml:space="preserve">
          <source>A test that does not perform an assertion will be marked as risky when this check is enabled. Expectations on mock objects count as an assertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edb072bd6f310b4f9022e694353efc0c9bd55208" translate="yes" xml:space="preserve">
          <source>A test that does not perform an assertion will be marked as risky when this check is enabled. Expectations on mock objects or annotations such as &lt;code&gt;@expectedException&lt;/code&gt; count as an assertion.</source>
          <target state="translated">이 검사가 활성화되면 어설 션을 수행하지 않는 테스트는 위험한 것으로 표시됩니다. 모의 객체 또는 &lt;code&gt;@expectedException&lt;/code&gt; 과 같은 주석에 대한 기대 는 어설 션으로 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="86ceceb320681a7883f4791702c4f6dff9b072c4" translate="yes" xml:space="preserve">
          <source>A test that emits output will fail in strict mode.</source>
          <target state="translated">엄격 모드에서는 출력을 내보내는 테스트가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="31af49b1f7286bf4c1d516a41d1cadbc83ef2401" translate="yes" xml:space="preserve">
          <source>A test that emits output, for instance by invoking &lt;code&gt;print&lt;/code&gt; in either the test code or the tested code, will be marked as risky when this check is enabled.</source>
          <target state="translated">예를 들어 테스트 코드 또는 테스트 된 코드에서 &lt;code&gt;print&lt;/code&gt; 를 호출하여 출력을 내보내는 테스트는 이 확인을 활성화하면 위험으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="229a3ab640cdc06fd12e52e688b3cdd1b01636ee" translate="yes" xml:space="preserve">
          <source>A test that emits output, for instance by invoking print in either the test code or the tested code, will be marked as risky when this check is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda6dde946e10b867b2d0a93222eb709263b939e" translate="yes" xml:space="preserve">
          <source>A test that has been skipped is denoted by an &lt;code&gt;S&lt;/code&gt; in the output of the PHPUnit command-line test runner, as shown in the following example:</source>
          <target state="translated">건너 뛴 테스트는 다음 예제와 같이 PHPUnit 명령 행 테스트 실행기 출력에서 &lt;code&gt;S&lt;/code&gt; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="e66a819741880101484dd8e351d7b20b57454af4" translate="yes" xml:space="preserve">
          <source>A test that has more than one &lt;code&gt;@depends&lt;/code&gt; annotation will get a fixture from the first producer as the first argument, a fixture from the second producer as the second argument, and so on. See &lt;a href=&quot;#writing-tests-for-phpunit-examples-multipledependencies-php&quot;&gt;Example 2.4&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1f03337962460f29f571536b5cd0bb7fe5bb92" translate="yes" xml:space="preserve">
          <source>A test that has more than one &lt;code&gt;@depends&lt;/code&gt; annotation will get a fixture from the first producer as the first argument, a fixture from the second producer as the second argument, and so on. See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.MultipleDependencies.php&quot;&gt;Example 2.4&lt;/a&gt;</source>
          <target state="translated">둘 이상의 &lt;code&gt;@depends&lt;/code&gt; 주석이 있는 테스트 는 첫 번째 생산자로부터 첫 번째 인수로 고정구를, 두 번째 생산자에서 두 번째 인수로 고정구 등을 가져옵니다. 실시 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.MultipleDependencies.php&quot;&gt;예 2.4&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="59e3c0958c12eda58f6ec62c99b7cb984ce628e2" translate="yes" xml:space="preserve">
          <source>A test that is annotated with &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; and executes code that is not listed using a &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; or &lt;a href=&quot;annotations#appendixes-annotations-uses&quot;&gt;@uses&lt;/a&gt; annotation will be marked as risky when this check is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e402e1062e2da2deb0b60194c07ecce012b544fe" translate="yes" xml:space="preserve">
          <source>A test that is annotated with &lt;code&gt;@covers&lt;/code&gt; and executes code that is not listed using a &lt;code&gt;@covers&lt;/code&gt; or &lt;code&gt;@uses&lt;/code&gt; annotation will be marked as risky when this check is enabled.</source>
          <target state="translated">&lt;code&gt;@covers&lt;/code&gt; 로 주석을 달고 &lt;code&gt;@covers&lt;/code&gt; 또는 &lt;code&gt;@uses&lt;/code&gt; 주석을 사용하여 나열되지 않은 코드를 실행 하는 테스트는 이 확인을 활성화하면 위험으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bdebb184bcf44955f83278fe9a6f20ee4973c4b7" translate="yes" xml:space="preserve">
          <source>A test that is not annotated with &lt;code&gt;@medium&lt;/code&gt; or &lt;code&gt;@large&lt;/code&gt; will be treated as if it were annotated with &lt;code&gt;@small&lt;/code&gt;. A small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the &lt;code&gt;timeoutForSmallTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">주석되지 않은 시험 &lt;code&gt;@medium&lt;/code&gt; 또는 &lt;code&gt;@large&lt;/code&gt; 는 이 주석 것처럼 처리됩니다 &lt;code&gt;@small&lt;/code&gt; . 실행하는 데 1 초 이상 걸리면 작은 테스트가 실패합니다. 이 제한 시간은 XML 구성 파일 의 &lt;code&gt;timeoutForSmallTests&lt;/code&gt; 속성을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9d2246fcc3545816519ed19451da77cf6e38996" translate="yes" xml:space="preserve">
          <source>A time limit can be enforced for the execution of a test if the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and the &lt;code&gt;pcntl&lt;/code&gt; extension is available. The enforcing of this time limit can be enabled by using the &lt;code&gt;--enforce-time-limit&lt;/code&gt; option on the &lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; or by setting &lt;code&gt;enforceTimeLimit=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92186c74c6ed2a2426731489bf9bcf1fc3984a05" translate="yes" xml:space="preserve">
          <source>A time limit can be enforced for the execution of a test if the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and the &lt;code&gt;pcntl&lt;/code&gt; extension is available. The enforcing of this time limit can be enabled by using the &lt;code&gt;--enforce-time-limit&lt;/code&gt; option on the commandline or by setting &lt;code&gt;beStrictAboutTestSize=&quot;true&quot;&lt;/code&gt; in PHPUnit's XML configuration file.</source>
          <target state="translated">&lt;code&gt;PHP_Invoker&lt;/code&gt; 패키지가 설치되고 &lt;code&gt;pcntl&lt;/code&gt; 확장이 사용 가능한 경우 테스트 실행에 시간 제한을 적용 할 수 있습니다. 이 시간 제한 적용은 명령 줄 에서 &lt;code&gt;--enforce-time-limit&lt;/code&gt; 옵션을 사용하거나 PHPUnit의 XML 구성 파일에서 &lt;code&gt;beStrictAboutTestSize=&quot;true&quot;&lt;/code&gt; 를 설정 하여 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="35d12a7dc46fb6451a2bb640e4a1c9f6957db27f" translate="yes" xml:space="preserve">
          <source>A utility class for invoking callables with a timeout. This package is required to enforce test timeouts in strict mode.</source>
          <target state="translated">시간 초과로 콜 러블을 호출하기위한 유틸리티 클래스입니다. 이 패키지는 엄격 모드에서 테스트 시간 초과를 적용하는 데 필요합니다.</target>
        </trans-unit>
        <trans-unit id="030bb20623fb579952c8b1090c90b671688fd022" translate="yes" xml:space="preserve">
          <source>A workflow for database assertions in your tests then consists of three simple steps:</source>
          <target state="translated">테스트에서 데이터베이스 어설 션에 대한 워크 플로는 다음 세 가지 간단한 단계로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="d8ffd49feb9935f7e9eb80f2c14e79dad9a0b8f7" translate="yes" xml:space="preserve">
          <source>Accepts a list of elements of types, which are then used to configure individual extensions. The arguments are passed to the extension class&amp;rsquo; &lt;code&gt;__constructor&lt;/code&gt; method in the order they are defined in the configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251021416b971ab79364875e47130a9488c9d09b" translate="yes" xml:space="preserve">
          <source>Accessing the Test Connection you can automatically create a DataSet that consists of all the tables with their content in the database specified as second parameter to the Connections Factory method.</source>
          <target state="translated">테스트 연결에 액세스하면 Connections Factory 메소드에 대한 두 번째 매개 변수로 지정된 데이터베이스의 컨텐츠가있는 모든 테이블로 구성된 DataSet을 자동으로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85fc02247691552165f4f2cd3743c74ed11ba737" translate="yes" xml:space="preserve">
          <source>Add a (development-time) dependency on &lt;code&gt;phpunit/phpunit&lt;/code&gt; to your project&amp;rsquo;s &lt;code&gt;composer.json&lt;/code&gt; file if you use &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; to manage the dependencies of your project:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0c808d07d2cb8ce95017587554acf4491b7bd36" translate="yes" xml:space="preserve">
          <source>Adding a table just by name is an implicit way to define the data-table with the following query:</source>
          <target state="translated">이름만으로 테이블을 추가하는 것은 다음 쿼리로 데이터 테이블을 정의하는 암시 적 방법입니다.</target>
        </trans-unit>
        <trans-unit id="4d705e897f0dc7e07a973b1ee2f827c351764e98" translate="yes" xml:space="preserve">
          <source>Additional options that are not available as command-line options are:</source>
          <target state="translated">명령 행 옵션으로 사용할 수없는 추가 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b989424c2ac5f9904e7c5edb378dc2e7a030f601" translate="yes" xml:space="preserve">
          <source>Additionally you have to realize that the database is essentially a global input variable to your code. Two tests in your test suite could run against the same database, possibly reusing data multiple times. Failures in one test can easily affect the result of the following tests making your testing experience very difficult. The previously mentioned cleanup step is of major importance to solve the &amp;ldquo;database is a global input&amp;rdquo; problem.</source>
          <target state="translated">또한 데이터베이스는 기본적으로 코드에 대한 전역 입력 변수라는 것을 알아야합니다. 테스트 스위트의 두 테스트는 동일한 데이터베이스에 대해 실행될 수 있으며 데이터를 여러 번 재사용 할 수 있습니다. 한 번의 테스트 실패는 다음 테스트 결과에 쉽게 영향을 미쳐 테스트 경험을 매우 어렵게 만듭니다. 앞에서 언급 한 정리 단계는 &quot;데이터베이스는 전역 입력&quot;문제를 해결하는 데 매우 중요합니다.</target>
        </trans-unit>
        <trans-unit id="d902466810f937d060914e2d70d7ec4ada1b74f6" translate="yes" xml:space="preserve">
          <source>After the database is reset and loaded with its initial state the actual test is executed by PHPUnit. This part of the test code does not require awareness of the Database Extension at all, you can go on and test whatever you like with your code.</source>
          <target state="translated">데이터베이스가 재설정되고 초기 상태로로드 된 후 실제 테스트는 PHPUnit에 의해 실행됩니다. 테스트 코드의이 부분은 데이터베이스 확장에 대한 인식이 전혀 필요하지 않으므로 코드로 원하는 것을 계속 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f1f3af0134958c3701dcdff53fac7c23aa6be82" translate="yes" xml:space="preserve">
          <source>Agile Documentation</source>
          <target state="translated">민첩한 문서</target>
        </trans-unit>
        <trans-unit id="8f87d2a3a2ffbd36f9ed4721a4f33588f19cbf00" translate="yes" xml:space="preserve">
          <source>Agile Documentation can be used to document the assumptions you make about the external packages that you use in your project. When you use an external package, you are exposed to the risks that the package will not behave as you expect, and that future versions of the package will change in subtle ways that will break your code, without you knowing it. You can address these risks by writing a test every time you make an assumption. If your test succeeds, your assumption is valid. If you document all your assumptions with tests, future releases of the external package will be no cause for concern: if the tests succeed, your system should continue working.</source>
          <target state="translated">Agile Documentation을 사용하여 프로젝트에서 사용하는 외부 패키지에 대한 가정을 문서화 할 수 있습니다. 외부 패키지를 사용하면 패키지가 예상대로 작동하지 않을 위험에 노출되며, 향후 패키지 버전은 사용자 모르게 코드를 손상시키는 미묘한 방식으로 변경 될 수 있습니다. 가정 할 때마다 테스트를 작성하여 이러한 위험을 해결할 수 있습니다. 테스트에 성공하면 가정이 유효합니다. 테스트를 통해 모든 가정을 문서화하는 경우 향후 외부 패키지 릴리스는 걱정할 필요가 없습니다. 테스트가 성공하면 시스템이 계속 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="4729c9a351f46bbb612df85877762615144f4a26" translate="yes" xml:space="preserve">
          <source>All data providers are executed before both the call to the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; static method and the first call to the &lt;code&gt;setUp()&lt;/code&gt; method. Because of that you can&amp;rsquo;t access any variables you create there from within a data provider. This is required in order for PHPUnit to be able to compute the total number of tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24d956ff0787e8fa46a1cbd039fd05f428f328a" translate="yes" xml:space="preserve">
          <source>All data providers are executed before both the call to the &lt;code&gt;setUpBeforeClass&lt;/code&gt; static method and the first call to the &lt;code&gt;setUp&lt;/code&gt; method. Because of that you can't access any variables you create there from within a data provider. This is required in order for PHPUnit to be able to compute the total number of tests.</source>
          <target state="translated">모든 데이터 제공자는 &lt;code&gt;setUpBeforeClass&lt;/code&gt; 정적 메소드에 대한 호출과 &lt;code&gt;setUp&lt;/code&gt; 메소드에 대한 첫 번째 호출 모두 전에 실행 됩니다. 이 때문에 데이터 공급자 내에서 생성 한 변수에 액세스 할 수 없습니다. PHPUnit이 총 테스트 수를 계산할 수 있도록하기 위해 필요합니다.</target>
        </trans-unit>
        <trans-unit id="eaef68fd343a420a4c9c8b395e968d9ab2f7bc86" translate="yes" xml:space="preserve">
          <source>All official releases of code distributed by the PHPUnit Project are signed by the release manager for the release. PGP signatures and SHA1 hashes are available for verification on &lt;a href=&quot;https://phar.phpunit.de/&quot;&gt;phar.phpunit.de&lt;/a&gt;.</source>
          <target state="translated">PHPUnit 프로젝트에 의해 배포 된 모든 공식 코드 릴리스는 릴리스 관리자가 릴리스에 서명합니다. &lt;a href=&quot;https://phar.phpunit.de/&quot;&gt;Phar&lt;/a&gt; 서명 및 SHA1 해시는 phar.phpunit.de 에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1bfbb69aa2c5442a36ef06527ecc622eb138867" translate="yes" xml:space="preserve">
          <source>All official releases of code distributed by the PHPUnit Project are signed by the release manager for the release. PGP signatures and SHA256 hashes are available for verification on &lt;a href=&quot;https://phar.phpunit.de/&quot;&gt;phar.phpunit.de&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa00ad560013bb6da49b999ea951e7f5a8632e5c" translate="yes" xml:space="preserve">
          <source>All unit tests run correctly.</source>
          <target state="translated">모든 단위 테스트가 올바르게 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="90a6a03e0c094a86de1c97c71e87474bb968c195" translate="yes" xml:space="preserve">
          <source>Alternatively, the agile documentation can be generated in HTML or plain text format and written to a file using the &lt;code&gt;--testdox-html&lt;/code&gt; and &lt;code&gt;--testdox-text&lt;/code&gt; arguments.</source>
          <target state="translated">또는 민첩한 문서를 HTML 또는 일반 텍스트 형식으로 생성하고 &lt;code&gt;--testdox-html&lt;/code&gt; 및 &lt;code&gt;--testdox-text&lt;/code&gt; 인수를 사용하여 파일에 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e40f26b50ad19935744e0cdc1a2de4f033096c53" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use YAML dataset for the guestbook example:</source>
          <target state="translated">또는 방명록 예제에 YAML 데이터 세트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="315af3c153b92914eadb98c57a342c67624b5cdc" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;@expectedException&lt;/code&gt;, &lt;code&gt;@expectedExceptionCode&lt;/code&gt;, &lt;code&gt;@expectedExceptionMessage&lt;/code&gt;, and &lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt; annotations to set up expectations for exceptions raised by the code under test. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php&quot;&gt;Example 2.11&lt;/a&gt; shows an example.</source>
          <target state="translated">또는 &lt;code&gt;@expectedException&lt;/code&gt; , &lt;code&gt;@expectedExceptionCode&lt;/code&gt; , &lt;code&gt;@expectedExceptionMessage&lt;/code&gt; 및 &lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt; 주석을 사용하여 테스트중인 코드에서 발생한 예외에 대한 기대치를 설정할 수 있습니다. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ExceptionTest2.php&quot;&gt;예 2.11&lt;/a&gt; 은 예를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="9b20a442c95350efe028e5aa6031a89d987a4d1d" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method&amp;rsquo;s docblock to mark it as a test method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341988a6c9b5702f02140fb3bed1b4fc93feadd3" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method's docblock to mark it as a test method.</source>
          <target state="translated">또는 메소드의 docblock에서 &lt;code&gt;@test&lt;/code&gt; 어노테이션을 사용하여 테스트 메소드로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5084de858cfba2f5e49ebef591cabe71eeea0e28" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the stub yourself and improve your design along the way. Widely used resources are accessed through a single fa&amp;ccedil;ade, so you can easily replace the resource with the stub. For example, instead of having direct database calls scattered throughout the code, you have a single &lt;code&gt;Database&lt;/code&gt; object, an implementor of the &lt;code&gt;IDatabase&lt;/code&gt; interface. Then, you can create a stub implementation of &lt;code&gt;IDatabase&lt;/code&gt; and use it for your tests. You can even create an option for running the tests with the stub database or the real database, so you can use your tests for both local testing during development and integration testing with the real database.</source>
          <target state="translated">또는 스텁을 직접 작성하고 디자인을 향상시킬 수 있습니다. 널리 사용되는 리소스는 단일 파사드를 통해 액세스되므로 리소스를 스텁으로 쉽게 바꿀 수 있습니다. 예를 들어, 코드 전체에 직접 데이터베이스 호출을 분산시키는 대신 &lt;code&gt;IDatabase&lt;/code&gt; 인터페이스 의 구현 자인 단일 &lt;code&gt;Database&lt;/code&gt; 오브젝트가 있습니다. 그런 다음 &lt;code&gt;IDatabase&lt;/code&gt; 의 스텁 구현을 작성 하여 테스트에 사용할 수 있습니다. 스텁 데이터베이스 또는 실제 데이터베이스로 테스트를 실행하기위한 옵션을 작성할 수도 있으므로 개발 중에 로컬 테스트와 실제 데이터베이스와의 통합 테스트에 모두 테스트를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b28c8008adce1dc88665da369db4139375a5a67" translate="yes" xml:space="preserve">
          <source>Alternatively, you can write the stub yourself and improve your design along the way. Widely used resources are accessed through a single fa&amp;ccedil;ade, so you can replace the resource with the stub. For example, instead of having direct database calls scattered throughout the code, you have a single &lt;code&gt;Database&lt;/code&gt; object, an implementor of the &lt;code&gt;IDatabase&lt;/code&gt; interface. Then, you can create a stub implementation of &lt;code&gt;IDatabase&lt;/code&gt; and use it for your tests. You can even create an option for running the tests with the stub database or the real database, so you can use your tests for both local testing during development and integration testing with the real database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a9c3fe6e543c49b380dc2d74013a76e7a379c1" translate="yes" xml:space="preserve">
          <source>Am I required to use PDO in my application for the Database Extension to work?</source>
          <target state="translated">데이터베이스 확장이 작동하려면 응용 프로그램에서 PDO를 사용해야합니까?</target>
        </trans-unit>
        <trans-unit id="66a5afe4d6fe67e2daf35e73d91669871d4a61d4" translate="yes" xml:space="preserve">
          <source>An annotation is a special form of syntactic metadata that can be added to the source code of some programming languages. While PHP has no dedicated language feature for annotating source code, the usage of tags such as &lt;code&gt;@annotation arguments&lt;/code&gt; in a documentation block has been established in the PHP community to annotate source code. In PHP documentation blocks are reflective: they can be accessed through the Reflection API&amp;rsquo;s &lt;code&gt;getDocComment()&lt;/code&gt; method on the function, class, method, and attribute level. Applications such as PHPUnit use this information at runtime to configure their behaviour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852c4f19f8b44b0b90fe06e8b12f22127c8dc374" translate="yes" xml:space="preserve">
          <source>An annotation is a special form of syntactic metadata that can be added to the source code of some programming languages. While PHP has no dedicated language feature for annotating source code, the usage of tags such as &lt;code&gt;@annotation arguments&lt;/code&gt; in a documentation block has been established in the PHP community to annotate source code. In PHP documentation blocks are reflective: they can be accessed through the Reflection API's &lt;code&gt;getDocComment()&lt;/code&gt; method on the function, class, method, and attribute level. Applications such as PHPUnit use this information at runtime to configure their behaviour.</source>
          <target state="translated">주석은 일부 프로그래밍 언어의 소스 코드에 추가 할 수있는 특수한 형태의 구문 메타 데이터입니다. PHP에는 소스 코드에 주석을 달기위한 전용 언어 기능이 없지만 PHP 커뮤니티에서 문서 블록에 &lt;code&gt;@annotation arguments&lt;/code&gt; 와 같은 태그를 사용 하여 소스 코드에 주석을 달았습니다. PHP 문서에서 블록은 반사적입니다. 함수, 클래스, 메소드 및 속성 레벨 에서 Reflection API의 &lt;code&gt;getDocComment()&lt;/code&gt; 메소드를 통해 액세스 할 수 있습니다 . PHPUnit과 같은 응용 프로그램은 런타임에이 정보를 사용하여 동작을 구성합니다.</target>
        </trans-unit>
        <trans-unit id="253fcad13584a93785c1425f5afec5813ce1edd3" translate="yes" xml:space="preserve">
          <source>An array of column-names of the table, ordered by their appearance in the result-set.</source>
          <target state="translated">결과 집합에 표시되는 순서대로 테이블의 열 이름 배열입니다.</target>
        </trans-unit>
        <trans-unit id="1359c099ea01abfcb07df2261c8388ffa9ef100d" translate="yes" xml:space="preserve">
          <source>An array of the primary-key columns.</source>
          <target state="translated">기본 키 열의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="2054754d639ef3322047c5e1e5f32d3452f886dc" translate="yes" xml:space="preserve">
          <source>An incomplete test is denoted by an &lt;code&gt;I&lt;/code&gt; in the output of the PHPUnit command-line test runner, as shown in the following example:</source>
          <target state="translated">불완전한 테스트는 다음 예제와 같이 PHPUnit 명령 행 테스트 실행기의 출력에서 &lt;code&gt;I&lt;/code&gt; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="1d227c9b737af7387586a8a80d5b7cd620e23406" translate="yes" xml:space="preserve">
          <source>An object representation in JSON will be converted into an associative array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3b78b64190965365f72568ffbe049d4ba32c22" translate="yes" xml:space="preserve">
          <source>Annotation</source>
          <target state="translated">Annotation</target>
        </trans-unit>
        <trans-unit id="74dc68d72e7c6f05cb32f3c5f38a50a1624e1e2a" translate="yes" xml:space="preserve">
          <source>Annotations</source>
          <target state="translated">Annotations</target>
        </trans-unit>
        <trans-unit id="7e1638d3363efdfbe5466eef1db2d2342c31fe3e" translate="yes" xml:space="preserve">
          <source>Another example</source>
          <target state="translated">다른 예시</target>
        </trans-unit>
        <trans-unit id="b7900e9d12a26991b8b19bfcb6a66a6070c45e8b" translate="yes" xml:space="preserve">
          <source>Another file-based dataset is based on CSV files. Each table of the dataset is represented as a single CSV file. For our guestbook example we would define a guestbook-table.csv file:</source>
          <target state="translated">다른 파일 기반 데이터 세트는 CSV 파일을 기반으로합니다. 데이터 세트의 각 테이블은 단일 CSV 파일로 표시됩니다. 방명록 예제에서는 guestbook-table.csv 파일을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="41ed47350162588d6eeb471d1f899bab61e40ae8" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;https://www.php.net/manual/en/reserved.constants.php#constant.php-os-family&quot;&gt;OS family&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8812a383fa62bd4212581ad1a6fac29d6424e14f" translate="yes" xml:space="preserve">
          <source>Any PHP version identifier</source>
          <target state="translated">모든 PHP 버전 식별자</target>
        </trans-unit>
        <trans-unit id="57196286dbc53fa8522aceeb126dd0622fb3b97e" translate="yes" xml:space="preserve">
          <source>Any PHP version identifier along with an optional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f098d828b6863d6311eaee378fd646853b417d67" translate="yes" xml:space="preserve">
          <source>Any PHPUnit version identifier</source>
          <target state="translated">모든 PHPUnit 버전 식별자</target>
        </trans-unit>
        <trans-unit id="5f80153ab6887c9b3c62023afebce36ba4812d58" translate="yes" xml:space="preserve">
          <source>Any PHPUnit version identifier along with an optional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab8746210bd4969f739e4720404b6ce9b9ff256d" translate="yes" xml:space="preserve">
          <source>Any attacker can create a public key and upload it to the public key servers. They can then create a malicious release signed by this fake key. Then, if you tried to verify the signature of this corrupt release, it would succeed because the key was not the &quot;real&quot; key. Therefore, you need to validate the authenticity of this key. Validating the authenticity of a public key, however, is outside the scope of this documentation.</source>
          <target state="translated">모든 공격자는 공개 키를 만들어 공개 키 서버에 업로드 할 수 있습니다. 그런 다음이 가짜 키로 서명 된 악의적 인 릴리스를 만들 수 있습니다. 그런 다음이 손상된 릴리스의 서명을 확인하려고하면 키가 &quot;실제&quot;키가 아니기 때문에 성공합니다. 따라서이 키의 진위 여부를 확인해야합니다. 그러나 공개 키의 신뢰성을 검증하는 것은이 문서의 범위를 벗어납니다.</target>
        </trans-unit>
        <trans-unit id="862bc5e0bb4b4f2843d7c27030639a4862cd8d6c" translate="yes" xml:space="preserve">
          <source>Any attacker can create a public key and upload it to the public key servers. They can then create a malicious release signed by this fake key. Then, if you tried to verify the signature of this corrupt release, it would succeed because the key was not the &amp;ldquo;real&amp;rdquo; key. Therefore, you need to validate the authenticity of this key. Validating the authenticity of a public key, however, is outside the scope of this documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0281036f5b2ed678588a68cc4bd8474bf98b6f0" translate="yes" xml:space="preserve">
          <source>Any defined &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; has a name and requires a definition of all the columns with their names. It can contain zero or any positive number of nested &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; elements. Defining no &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; element means the table is empty. The &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; tags have to be specified in the order of the previously given &lt;code&gt;&amp;lt;column&amp;gt;&lt;/code&gt; elements. The &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; tag obviously means that the value is NULL.</source>
          <target state="translated">정의 된 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 에는 이름이 있으며 이름이있는 모든 열의 정의가 필요합니다. 0 개 또는 양수의 중첩 &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; 요소를 포함 할 수 있습니다 . &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; 요소를 정의하지 않으면 테이블이 비어 있음을 의미합니다. &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; 태그를 가지고 이전에 소정의 순서로 지정 될 &lt;code&gt;&amp;lt;column&amp;gt;&lt;/code&gt; 요소. &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; 태그는 분명 NULL 값을 의미한다.</target>
        </trans-unit>
        <trans-unit id="5b82bd9f1b3b8a177b8a674dc8cdfed69ee652d4" translate="yes" xml:space="preserve">
          <source>Any extension name along with an optional version identifier</source>
          <target state="translated">선택적 버전 식별자와 함께 모든 확장명</target>
        </trans-unit>
        <trans-unit id="6b6ced9c448b1d1cec7e0ba94d3f1534feba644e" translate="yes" xml:space="preserve">
          <source>Any extension name along with an optional version identifier and optional operator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202a521cd27996b3976f115836fdf65fe00c1518" translate="yes" xml:space="preserve">
          <source>Any valid parameter to &lt;a href=&quot;http://php.net/function_exists&quot;&gt;function_exists&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;http://php.net/function_exists&quot;&gt;function_exists에&lt;/a&gt; 유효한 매개 변수</target>
        </trans-unit>
        <trans-unit id="0c6cf8ce791072d0b4b154779d6656664a360e64" translate="yes" xml:space="preserve">
          <source>Any valid parameter to &lt;a href=&quot;https://www.php.net/function_exists&quot;&gt;function_exists&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4201332a1de6b052dff93d0d5eb4c2369d11f231" translate="yes" xml:space="preserve">
          <source>Append &lt;strong&gt;&lt;code&gt;;C:\bin&lt;/code&gt;&lt;/strong&gt; to your &lt;code&gt;PATH&lt;/code&gt; environment variable (&lt;a href=&quot;http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7&quot;&gt;related help&lt;/a&gt;)</source>
          <target state="translated">추가] &lt;strong&gt; &lt;code&gt;;C:\bin&lt;/code&gt; &lt;/strong&gt; 귀하에 대한 &lt;code&gt;PATH&lt;/code&gt; 의 환경 변수 ( &lt;a href=&quot;http://stackoverflow.com/questions/6318156/adding-python-path-on-windows-7&quot;&gt;관련 지원&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f3f60044b06335eb6c4230e3c39f5e0218445878" translate="yes" xml:space="preserve">
          <source>Appendix</source>
          <target state="translated">Appendix</target>
        </trans-unit>
        <trans-unit id="bf9447567ff6d4b18bca46071957ec2f6263d3ab" translate="yes" xml:space="preserve">
          <source>Array DataSet</source>
          <target state="translated">배열 데이터 셋</target>
        </trans-unit>
        <trans-unit id="937321f965f4720fc6ee97de3632a48b758c09ac" translate="yes" xml:space="preserve">
          <source>As an alternative to prefixing your test method names with &lt;code&gt;test&lt;/code&gt;, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method&amp;rsquo;s DocBlock to mark it as a test method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3770b95d81f58fc6bbac36f8a809cbe7e5c34080" translate="yes" xml:space="preserve">
          <source>As an alternative to prefixing your test method names with &lt;code&gt;test&lt;/code&gt;, you can use the &lt;code&gt;@test&lt;/code&gt; annotation in a method's DocBlock to mark it as a test method.</source>
          <target state="translated">당신의 시험 방법 이름을 접두어로하는 대신 &lt;code&gt;test&lt;/code&gt; , 당신은 사용할 수 있습니다 &lt;code&gt;@test&lt;/code&gt; 시험 방법으로 표시하는 방법의 DocBlock에 주석을.</target>
        </trans-unit>
        <trans-unit id="6eef4dd88de363a0c4fb7b0fc8a495ae6dfdd156" translate="yes" xml:space="preserve">
          <source>As mentioned in the beginning, when the defaults used by the &lt;code&gt;createMock()&lt;/code&gt; method to generate the test double do not match your needs then you can use the &lt;code&gt;getMockBuilder($type)&lt;/code&gt; method to customize the test double generation using a fluent interface. Here is a list of methods provided by the Mock Builder:</source>
          <target state="translated">처음에 언급했듯이 &lt;code&gt;createMock()&lt;/code&gt; 메소드가 테스트 double을 생성하기 위해 사용하는 기본값이 사용자 요구와 일치하지 않는 경우, &lt;code&gt;getMockBuilder($type)&lt;/code&gt; 메소드를 사용하여 유창한 인터페이스를 사용하여 테스트 double 생성을 사용자 정의 할 수 있습니다. 다음은 Mock Builder에서 제공하는 메소드 목록입니다.</target>
        </trans-unit>
        <trans-unit id="a276921b082a7d510448d0fb6792f16b07b6029f" translate="yes" xml:space="preserve">
          <source>As mentioned in the beginning, when the defaults used by the &lt;code&gt;createStub()&lt;/code&gt; and &lt;code&gt;createMock()&lt;/code&gt; methods to generate the test double do not match your needs then you can use the &lt;code&gt;getMockBuilder($type)&lt;/code&gt; method to customize the test double generation using a fluent interface. Here is a list of methods provided by the Mock Builder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7afc21b944effb12f3a6b0afd14387c7955a5a" translate="yes" xml:space="preserve">
          <source>As of version 6, PHPUnit does not perform this backup and restore operation for global and super-global variables by default anymore. It can be activated by using the &lt;code&gt;--globals-backup&lt;/code&gt; option or setting &lt;code&gt;backupGlobals=&quot;true&quot;&lt;/code&gt; in the XML configuration file.</source>
          <target state="translated">버전 6부터 PHPUnit은 더 이상 기본적으로 전역 및 수퍼 전역 변수에 대해이 백업 및 복원 작업을 수행하지 않습니다. &lt;code&gt;--globals-backup&lt;/code&gt; 옵션을 사용하거나 XML 구성 파일에서 &lt;code&gt;backupGlobals=&quot;true&quot;&lt;/code&gt; 를 설정 하여 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2464c4fd85a2dbd13ef8511120a3a540d5e05729" translate="yes" xml:space="preserve">
          <source>As with any external resource, there might be intermittent problems with the filesystem. This makes tests interacting with it flaky.</source>
          <target state="translated">외부 자원과 마찬가지로 파일 시스템에 간헐적 인 문제가있을 수 있습니다. 이로 인해 테스트와 상호 작용이 불안정 해집니다.</target>
        </trans-unit>
        <trans-unit id="6d4fa0bca965d62ca9ed015c05c5a6528e12dba4" translate="yes" xml:space="preserve">
          <source>Assert that both dataset representations equal each other.</source>
          <target state="translated">두 데이터 세트 표현이 서로 동일해야합니다.</target>
        </trans-unit>
        <trans-unit id="e87ceb796f38a8355c99301397b3b789f95fc5f3" translate="yes" xml:space="preserve">
          <source>Asserting the Result of a Query</source>
          <target state="translated">쿼리 결과 확인</target>
        </trans-unit>
        <trans-unit id="e0de99efdab9879cb1fac820862ddc7437d1a5d5" translate="yes" xml:space="preserve">
          <source>Asserting the Row-Count of a Table</source>
          <target state="translated">테이블의 행 개수 확인</target>
        </trans-unit>
        <trans-unit id="2b03042fd9f4e1e52697c91ff9183126f4b19ec6" translate="yes" xml:space="preserve">
          <source>Asserting the State of Multiple Tables</source>
          <target state="translated">여러 테이블의 상태 확인</target>
        </trans-unit>
        <trans-unit id="79d6cfb09ed036b02081a46e02d41c86cf2399a0" translate="yes" xml:space="preserve">
          <source>Asserting the State of a Table</source>
          <target state="translated">테이블 상태 확인</target>
        </trans-unit>
        <trans-unit id="49bf55dc112eb3597726ba8ecf785a4fae4cbce0" translate="yes" xml:space="preserve">
          <source>Assertions</source>
          <target state="translated">Assertions</target>
        </trans-unit>
        <trans-unit id="f1bf366d42e0229bf6d4b3edf41db4f9538281ef" translate="yes" xml:space="preserve">
          <source>Assertions are not the only use-case for the DataSet and DataTable in PHPUnit's Database Extension. As shown in the previous section they also describe the initial contents of a database. You are forced to define a fixture dataset by the Database TestCase, which is then used to:</source>
          <target state="translated">어설 션은 PHPUnit의 데이터베이스 확장에서 DataSet 및 DataTable의 유일한 유스 케이스가 아닙니다. 이전 섹션에서 볼 수 있듯이 데이터베이스의 초기 내용도 설명합니다. Database TestCase에 의해 조명기 데이터 셋을 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="d8b22a126536a94f7271f4f919ee514eaac36010" translate="yes" xml:space="preserve">
          <source>At this point, the signature is good, but we don&amp;rsquo;t trust this key. A good signature means that the file has not been tampered. However, due to the nature of public key cryptography, you need to additionally verify that key &lt;code&gt;6372C20A&lt;/code&gt; was created by the real Sebastian Bergmann.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d9dceb7f7654b542fdc74944219f3914fdcb50" translate="yes" xml:space="preserve">
          <source>At this point, the signature is good, but we don't trust this key. A good signature means that the file has not been tampered. However, due to the nature of public key cryptography, you need to additionally verify that key &lt;code&gt;6372C20A&lt;/code&gt; was created by the real Sebastian Bergmann.</source>
          <target state="translated">현재 서명은 양호하지만이 키를 신뢰하지 않습니다. 서명이 양호하면 파일이 변경되지 않았 음을 나타냅니다. 그러나 공개 키 암호화의 특성으로 인해 실제 Sebastian Bergmann 이 키 &lt;code&gt;6372C20A&lt;/code&gt; 를 생성 했는지 추가로 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="102ab26c0b6ce1d570f35a764d3e3eae3676d7fa" translate="yes" xml:space="preserve">
          <source>Authoring testcases is a good impetus for developers to discover edge cases.</source>
          <target state="translated">테스트 케이스 작성은 개발자가 엣지 케이스를 발견 할 수있는 좋은 자극입니다.</target>
        </trans-unit>
        <trans-unit id="a00759e708ac4ff3149178d9b2c17659377bd6d7" translate="yes" xml:space="preserve">
          <source>Available Implementations</source>
          <target state="translated">사용 가능한 구현</target>
        </trans-unit>
        <trans-unit id="a8cd6dfda30d7101d6cf0b9c53adfc21f1274ba4" translate="yes" xml:space="preserve">
          <source>Available types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b64917807919bbe1a2f44370b6efc51fc2644f" translate="yes" xml:space="preserve">
          <source>Backup and restore static attributes of user-defined classes. See &lt;a href=&quot;fixtures#fixtures-global-state&quot;&gt;Global State&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb9d583bbdce037700a053683db4c06c7b88d2e" translate="yes" xml:space="preserve">
          <source>Backup and restore static attributes of user-defined classes. See &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;the section called &amp;ldquo;Global State&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">사용자 정의 클래스의 정적 속성 백업 및 복원 자세한 내용 &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;은&amp;ldquo;전역 상태&amp;rdquo;섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aa7b047baa705c024141336e0e92c68d670b5604" translate="yes" xml:space="preserve">
          <source>Be strict about global state manipulation. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">전역 상태 조작에 대해 엄격해야합니다. 자세한 내용은 &lt;a href=&quot;risky-tests&quot;&gt;6 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="64e42c06ade41c6cf8060f6526a0fe806d9bf5e5" translate="yes" xml:space="preserve">
          <source>Be strict about global state manipulation. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16be2cc2536c34cd2b66eb8201c73e49a5fd5304" translate="yes" xml:space="preserve">
          <source>Be strict about output during tests. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">테스트 중 출력에 대해 엄격해야합니다. 자세한 내용은 &lt;a href=&quot;risky-tests&quot;&gt;6 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4f51f0848252faed154544ae7f636cb8249bb290" translate="yes" xml:space="preserve">
          <source>Be strict about output during tests. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="233f564bb864da6c2f4f1dcdd1c42579bd6186e1" translate="yes" xml:space="preserve">
          <source>Be strict about tests that do not test anything. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">아무것도 테스트하지 않는 테스트에 대해서는 엄격해야합니다. 자세한 내용은 &lt;a href=&quot;risky-tests&quot;&gt;6 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0d5175435dded13bde8e17a64afabab1658372aa" translate="yes" xml:space="preserve">
          <source>Be strict about unintentionally covered code. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">의도하지 않은 코드에 대해서는 엄격해야합니다. 자세한 내용은 &lt;a href=&quot;risky-tests&quot;&gt;6 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c0a8bc0f40ab34962627180602075eca25a2444d" translate="yes" xml:space="preserve">
          <source>Be strict about unintentionally covered code. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe17b188c73f92a9b8e061dc5d48621c480ea26" translate="yes" xml:space="preserve">
          <source>Because many database APIs such as PDO, MySQLi or OCI8 are cumbersome to use and verbose in writing doing these steps manually is an absolute nightmare.</source>
          <target state="translated">PDO, MySQLi 또는 OCI8과 같은 많은 데이터베이스 API는 이러한 단계를 수동으로 수행하는 데 사용하기 쉽고 장황하기 때문에 절대 악몽입니다.</target>
        </trans-unit>
        <trans-unit id="f1805d5bad6b774978606ece8d755933a9bf3f2e" translate="yes" xml:space="preserve">
          <source>Because we are interested in verifying that a method is called, and which arguments it is called with, we introduce the &lt;code&gt;expects()&lt;/code&gt; and &lt;code&gt;with()&lt;/code&gt; methods to specify how this interaction should look.</source>
          <target state="translated">우리는 메소드가 호출되고 어떤 인수로 호출되는지 확인하는 데 관심이 있기 때문에 &lt;code&gt;expects()&lt;/code&gt; 및 &lt;code&gt;with()&lt;/code&gt; 메소드를 도입 하여이 상호 작용의 모양을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="722f11d8fee150e9bf65da73c8a69a84c7c381d7" translate="yes" xml:space="preserve">
          <source>Besides global variables, static attributes of classes are also part of the global state.</source>
          <target state="translated">전역 변수 외에도 클래스의 정적 속성도 전역 상태의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="7f37c6e32d7b2929f55a3ad3107c60a236c6a625" translate="yes" xml:space="preserve">
          <source>Beware of Foreign Keys</source>
          <target state="translated">외래 키에주의</target>
        </trans-unit>
        <trans-unit id="4e3bc8166f95c8cfbf9974109ef1f40875e4921e" translate="yes" xml:space="preserve">
          <source>Branch Coverage</source>
          <target state="translated">지점 범위</target>
        </trans-unit>
        <trans-unit id="2509ecf6c5d5f6f1c1752c29a50c44106afb117f" translate="yes" xml:space="preserve">
          <source>By default, PHPUnit converts PHP errors, warnings, and notices that are triggered during the execution of a test to an exception. Among other benefits, this makes it possible to expect that a PHP error, warning, or notice is triggered in a test as shown in &lt;a href=&quot;#writing-tests-for-phpunit-exceptions-examples-errortest-php&quot;&gt;Example 2.12&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c161d48e04e2d5977a9e5b686b5234e12fccb49" translate="yes" xml:space="preserve">
          <source>By default, PHPUnit converts PHP errors, warnings, and notices that are triggered during the execution of a test to an exception. Using these exceptions, you can, for instance, expect a test to trigger a PHP error as shown in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ErrorTest.php&quot;&gt;Example 2.12&lt;/a&gt;.</source>
          <target state="translated">기본적으로 PHPUnit은 테스트 실행 중 트리거 된 PHP 오류, 경고 및 알림을 예외로 변환합니다. 예를 들어 이러한 예외를 사용하면 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions.examples.ErrorTest.php&quot;&gt;Example 2.12에&lt;/a&gt; 표시된대로 테스트에서 PHP 오류를 트리거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11257faa21f16d2e72299eff79f2aa247bb84bec" translate="yes" xml:space="preserve">
          <source>By default, PHPUnit will install an error handler that converts the following errors to exceptions:</source>
          <target state="translated">기본적으로 PHPUnit은 다음 오류를 예외로 변환하는 오류 처리기를 설치합니다.</target>
        </trans-unit>
        <trans-unit id="2c692da9c2870c9957cb7f5226bd16f28e5d17c8" translate="yes" xml:space="preserve">
          <source>By default, all methods of the original class are replaced with a dummy implementation that just returns &lt;code&gt;null&lt;/code&gt; (without calling the original method). Using the &lt;code&gt;will($this-&amp;gt;returnValue())&lt;/code&gt; method, for instance, you can configure these dummy implementations to return a value when called.</source>
          <target state="translated">기본적으로 원래 클래스의 모든 메서드 는 원래 메서드를 호출하지 않고 &lt;code&gt;null&lt;/code&gt; 을 반환하는 더미 구현으로 대체됩니다 . 예를 들어 &lt;code&gt;will($this-&amp;gt;returnValue())&lt;/code&gt; 메소드를 사용하면 이러한 더미 구현이 호출 될 때 값을 리턴하도록 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2a5f74e5d6d0b6672d704030abe22968305b0e3" translate="yes" xml:space="preserve">
          <source>By default, all methods of the original class are replaced with a dummy implementation that returns &lt;code&gt;null&lt;/code&gt; (without calling the original method). Using the &lt;code&gt;will($this-&amp;gt;returnValue())&lt;/code&gt; method, for instance, you can configure these dummy implementations to return a value when called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cd20f5ce944c3ed6fa7e581f9272ef32d1fb3d8" translate="yes" xml:space="preserve">
          <source>By default, environment variables are not overwritten if they exist already. To force overwriting existing variables, use the &lt;code&gt;force&lt;/code&gt; attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91528078b205c0edc4076b9f056cb2b3ee26b9e" translate="yes" xml:space="preserve">
          <source>By using stubs (see the chapter on &quot;Mock Objects&quot;, earlier in this book), you can further decouple yourself from the supplier: The job of the supplier is to make the tests run with the real implementation of the package. Your job is to make the tests run for your own code. Until such time as you have the real implementation of the supplied package, you use stub objects. Following this approach, the two teams can develop independently.</source>
          <target state="translated">스텁을 사용하여 (이 책 앞부분의 &quot;모의 객체&quot;장 참조) 공급 업체와의 연결을 해제 할 수 있습니다. 공급 업체의 임무는 실제 패키지 구현으로 테스트를 실행하는 것입니다. 당신의 임무는 자신의 코드에 대해 테스트를 실행하는 것입니다. 제공된 패키지를 실제로 구현할 때까지는 스텁 객체를 사용합니다. 이 접근법에 따라 두 팀은 독립적으로 개발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4597b679075018ece70ba1999e5d15c1cd90747" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;--static-backup&lt;/code&gt; option or setting &lt;code&gt;backupStaticAttributes=&quot;true&quot;&lt;/code&gt; in the XML configuration file, this isolation can be extended to static attributes of classes.</source>
          <target state="translated">사용하여 &lt;code&gt;--static-backup&lt;/code&gt; 옵션 또는 설정 &lt;code&gt;backupStaticAttributes=&quot;true&quot;&lt;/code&gt; XML 구성 파일에서,이 격리 클래스의 정적 속성을 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9001ab23e14040af523a496ea073d94c8e9a5e7" translate="yes" xml:space="preserve">
          <source>CSV DataSet</source>
          <target state="translated">CSV 데이터 세트</target>
        </trans-unit>
        <trans-unit id="a20d991b9a7d2172c934a6d6553e9b1e52e6e2f0" translate="yes" xml:space="preserve">
          <source>Change Risk Anti-Patterns (CRAP) Index</source>
          <target state="translated">CRAP (위험 리스크 패턴 방지) 지수 변경</target>
        </trans-unit>
        <trans-unit id="9571a1b5aaa83789b8f0adcf05ec1485c335a4ae" translate="yes" xml:space="preserve">
          <source>Class and Trait Coverage</source>
          <target state="translated">직업과 특질</target>
        </trans-unit>
        <trans-unit id="191da32810366886e531d88da3e30b3dd791a185" translate="yes" xml:space="preserve">
          <source>Cleanup the database for each new test</source>
          <target state="translated">새로운 테스트마다 데이터베이스 정리</target>
        </trans-unit>
        <trans-unit id="8e86e562959da84d3b442c12a994da14aae649ab" translate="yes" xml:space="preserve">
          <source>Code Coverage (TEXT)</source>
          <target state="translated">코드 적용 범위 (TEXT)</target>
        </trans-unit>
        <trans-unit id="fd0309588c48a9458645834e17a45a55c79e0814" translate="yes" xml:space="preserve">
          <source>Code Coverage (XML)</source>
          <target state="translated">코드 범위 (XML)</target>
        </trans-unit>
        <trans-unit id="6262efd9fea7435d42691a4f59d7486a8516311a" translate="yes" xml:space="preserve">
          <source>Code Coverage Analysis</source>
          <target state="translated">코드 범위 분석</target>
        </trans-unit>
        <trans-unit id="109c194e8ddfc5467663fb7063689470b656f9b0" translate="yes" xml:space="preserve">
          <source>Code Coverage will only be recorded for tests that use the &lt;code&gt;@covers&lt;/code&gt; annotation documented in &lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers&quot;&gt;the section called &amp;ldquo;@covers&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">Code Coverage는 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers&quot;&gt;&amp;ldquo;@covers&amp;rdquo;섹션에&lt;/a&gt; 설명 된 &lt;code&gt;@covers&lt;/code&gt; 주석 을 사용하는 테스트에 대해서만 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="6992fa9278bee711bf80b67568573f9b15601d10" translate="yes" xml:space="preserve">
          <source>Command-Line Options</source>
          <target state="translated">명령 줄 옵션</target>
        </trans-unit>
        <trans-unit id="10c35d71ded7545a87321c94b9da10ed95f1480d" translate="yes" xml:space="preserve">
          <source>Composer</source>
          <target state="translated">Composer</target>
        </trans-unit>
        <trans-unit id="18ac7197c985ca458fec03af27692f2080276f90" translate="yes" xml:space="preserve">
          <source>Composing a Test Suite Using XML Configuration</source>
          <target state="translated">XML 구성을 사용하여 테스트 스위트 작성</target>
        </trans-unit>
        <trans-unit id="26dcaab39efc0af61b5a54784f29c09025599629" translate="yes" xml:space="preserve">
          <source>Composing a Test Suite Using the Filesystem</source>
          <target state="translated">파일 시스템을 사용하여 테스트 스위트 작성</target>
        </trans-unit>
        <trans-unit id="4ca8358ce846f9321c7815bad4e78f1a31c9e21a" translate="yes" xml:space="preserve">
          <source>Composite DataSet</source>
          <target state="translated">복합 데이터 세트</target>
        </trans-unit>
        <trans-unit id="c5fdb502ae4c60b4b1e6f35555661f3f185ef0ed" translate="yes" xml:space="preserve">
          <source>Configuration of a PHPUnit Database TestCase</source>
          <target state="translated">PHPUnit 데이터베이스 테스트 케이스 구성</target>
        </trans-unit>
        <trans-unit id="50070f2f57145b8351a714da1d1885af70824651" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in Clover XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d895bd23836df108105b8b10423e52be1ff4387" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in Crap4J XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="456dda4f3e960bc6b73cbe1f798e1f83c315dfcb" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in HTML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32e457793dbc3b6493a174d8c0503d8fa9da26a" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in PHP format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff70f9edf30ff1a5d3665bac135f8cbe7628c02f" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in PHPUnit XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27eade7d55d5e35b2d31a1edc22f246e60fa5701" translate="yes" xml:space="preserve">
          <source>Configures a code coverage report in text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a91bff6aa4dd47a549a7d1ddbbe24b2555316ffb" translate="yes" xml:space="preserve">
          <source>Configures a directory and its sub-directories for inclusion in or exclusion from code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bffc9592ee4afef2432f64ea77e4a38e1042db3" translate="yes" xml:space="preserve">
          <source>Configures a file for inclusion in or exclusion from code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37267e7128f55ae8b2cf12e6887b2313244ae443" translate="yes" xml:space="preserve">
          <source>Configures a filter based on the version of the PHP runtime that is used to run the current PHPUnit process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c63eb7fb7f9521d8ec70b7e3d22a38e05b006d8d" translate="yes" xml:space="preserve">
          <source>Configures a prefix-based filter that is applied to the names of files in the directory and its sub-directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="098ae3a76a3d007b25c5d52f1837d5707bb5334c" translate="yes" xml:space="preserve">
          <source>Configures a set of files to be excluded from code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0681420092a2c09635daf925a26a2369e2c4946" translate="yes" xml:space="preserve">
          <source>Configures a set of files to be included in code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e14021ba7f269bf8438ca8a2761fc6566d871e33" translate="yes" xml:space="preserve">
          <source>Configures a suffix-based filter that is applied to the names of files in the directory and its sub-directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50954d932e6030aae29906a3137930287d76ff91" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in JUnit XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66c6d7b23011bb95fb1a5468668198c941bd1237" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TeamCity format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f97742fbc6c6e05876e8a33880f556d5acce54" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TestDox HTML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1c7d91b76f2924cd2182d7a2fdfbed333ee1fe" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TestDox XML format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad2fd592aab6b80277996690fa1d75ff3c0b239" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in TestDox text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec5a9f2336fe917096ea88c90a70ab9ff81b97c" translate="yes" xml:space="preserve">
          <source>Configures a test result logfile in text format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d583aa228010f8419e92206b70f45640531e9ea" translate="yes" xml:space="preserve">
          <source>Configures the code coverage reports to be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="905e13d9f63138b7badb773408fdb466ebf67f60" translate="yes" xml:space="preserve">
          <source>Configures the comparison operator to be used with &lt;code&gt;version_compare()&lt;/code&gt; for the filter based on the version of the PHP runtime that is used to run the current PHPUnit process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9d223d1fdc3cf34d33c8c5aa7d57d65d52d27d9" translate="yes" xml:space="preserve">
          <source>Configuring extensions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="50001f9d78216a0a85921eef17995c8d318636a5" translate="yes" xml:space="preserve">
          <source>Constraint that accepts any input value.</source>
          <target state="translated">모든 입력 값을 허용하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="4e6210ea23254aaa526e46b20d4f1e439700cfc5" translate="yes" xml:space="preserve">
          <source>Constraint that applies another constraint to an attribute of a class or an object.</source>
          <target state="translated">클래스 또는 객체의 속성에 다른 제약 조건을 적용하는 제약 조건입니다.</target>
        </trans-unit>
        <trans-unit id="7d4d530b6e26d1bc514703574b4fe44a672ef8c6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that one value is identical to another.</source>
          <target state="translated">한 값이 다른 값과 동일하다고 주장하는 구속 조건.</target>
        </trans-unit>
        <trans-unit id="cdc8c5ef1c3efc2f6d96188eaf73c9fc90fcc297" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface contains a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c423c9279d9f7f46c38c5eb334dd62b2c431e8" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface contains only instances of a given classname.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73cdafeaba7f31169bf9de943c04e32ce0e1f723" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface contains only values of a given type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8489f5b8a6cf46cf41cdc94c9d60d80320a3c0dc" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface it is evaluated for contains a given value.</source>
          <target state="translated">평가 되는 &lt;code&gt;Iterator&lt;/code&gt; 인터페이스 를 구현 하는 &lt;code&gt;array&lt;/code&gt; 또는 객체 에 지정된 값이 포함되어 있다고 가정하는 제약 조건입니다 .</target>
        </trans-unit>
        <trans-unit id="a808ba53c7f5b5f7e7507aa5e2933b73b456e88f" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface it is evaluated for contains only instances of a given classname.</source>
          <target state="translated">평가 된 &lt;code&gt;Iterator&lt;/code&gt; 인터페이스 를 구현 하는 &lt;code&gt;array&lt;/code&gt; 또는 객체 에 지정된 클래스 이름의 인스턴스 만 포함 한다고 주장하는 제약 조건 .</target>
        </trans-unit>
        <trans-unit id="1b426fcce667db53f80625e45f1e0d86646360c9" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the &lt;code&gt;array&lt;/code&gt; or object that implements the &lt;code&gt;Iterator&lt;/code&gt; interface it is evaluated for contains only values of a given type.</source>
          <target state="translated">평가 되는 &lt;code&gt;Iterator&lt;/code&gt; 인터페이스 를 구현 하는 &lt;code&gt;array&lt;/code&gt; 또는 객체 에 지정된 유형의 값만 포함되어 있다고 주장하는 제약 조건 .</target>
        </trans-unit>
        <trans-unit id="51e8574b69ff2ab15c41d534f535e5fd1292345c" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the array has a given key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bf9fd455e4c3abf0665a514397dde000596a18e" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the array it is evaluated for has a given key.</source>
          <target state="translated">평가되는 배열에 주어진 키가 있다고 주장하는 제약 조건.</target>
        </trans-unit>
        <trans-unit id="e168c7abb687ebecf2902eb4cef589db616997dc" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class has a given attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76898f41b0ce3fd134055aa1dfffe20d555209ec" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class has a given static attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="052b0facafadc0abde4f8ee97ca7fde579f68367" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class it is evaluated for has a given attribute.</source>
          <target state="translated">평가 된 클래스에 주어진 속성이 있다고 주장하는 제약 조건.</target>
        </trans-unit>
        <trans-unit id="74e8677f3682374b6b80d897055ffa4570301653" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the class it is evaluated for has a given static attribute.</source>
          <target state="translated">평가 된 클래스에 지정된 정적 속성이 있다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="4d5aef36030547db118bb0594fdb85ac7ee78def" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object has a given attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de32a43a328f94f0947efe515a9945325efceff" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object is an instance of a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9591dc696fa21696db24a5165e346bc02a5be7a6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object it is evaluated for has a given attribute.</source>
          <target state="translated">평가 된 오브젝트에 주어진 속성이 있다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="bc990e0033562cfe45213748a6673bbdd08e08b6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the object it is evaluated for is an instance of a given class.</source>
          <target state="translated">평가되는 객체가 주어진 클래스의 인스턴스라고 주장하는 구속 조건.</target>
        </trans-unit>
        <trans-unit id="9354f519e9f89d0a24dd5eb820abd92c465c6e48" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string contains a given string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181730831f59ecf621e638dadedb1a4bb82c5b86" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string ends with a given suffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc0f38e8b7f88b4cdce062bd0dde7f98c3f2f39" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for contains a given string.</source>
          <target state="translated">평가 된 문자열에 주어진 문자열이 포함되어 있다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="ecd7a3101d309c7a0cbc87ecf8d41e0ef6607cb8" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for ends with a given suffix.</source>
          <target state="translated">평가되는 문자열이 주어진 접미사로 끝나는 것을 주장하는 제약 조건.</target>
        </trans-unit>
        <trans-unit id="8379ef8dad533bba7cd5881bd20ccb6ec8d8f2c7" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for matches a regular expression.</source>
          <target state="translated">평가되는 문자열이 정규식과 일치한다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="5ee3bdf51efb4aaf9e4c8df59ccbee07552935f9" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string it is evaluated for starts with a given prefix.</source>
          <target state="translated">평가되는 문자열이 주어진 접두사로 시작한다고 주장하는 구속 조건입니다.</target>
        </trans-unit>
        <trans-unit id="dc81493a96f0d15abd198f0aca59b17d092bc157" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string matches a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48b7c4a9574a48c67e500732fbd4c3414077b45d" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the string starts with a given prefix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8ded3c4d7602421be70e736df9eb20eaca4207" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16e55554ddc8971d3cc4574161ba445796ee5f30" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886d3fc9c2b6f51aad3e2f060a5c095eb2bacda6" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13a7aaf7488fc37e11c97fa50ed17a3856953e2" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is greater than a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b3965a5150b5917a2abce1668eda520ecfd27e" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is greater than or equal to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f0311999d499b454a53afb001f7dd3d0657be16" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is of a specified type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c9f80e32ec5caff3de16f3469e5c7cf27832157" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is smaller than a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007b1931e910ba4ba7894df8246c17de55a5e482" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value is smaller than or equal to a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde68b2b72f28b01cebe5e3f49e2960ea0d472e2" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is greater than a given value.</source>
          <target state="translated">평가되는 값이 주어진 값보다 크다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="bc7a3dfb3651592ef5af091770a447209686042a" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is greater than or equal to a given value.</source>
          <target state="translated">평가되는 값이 주어진 값보다 크거나 같다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="6ec99e9d6498c7b86c0088d7bbc9807445794b57" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is of a specified type.</source>
          <target state="translated">평가되는 값이 지정된 유형임을 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="856797eba2302f8840c2e2e592a74e6c26f64e35" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is smaller than a given value.</source>
          <target state="translated">평가되는 값이 주어진 값보다 작다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="6195c587e282711b239a44ffb0377363bdc39063" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated for is smaller than or equal to a given value.</source>
          <target state="translated">평가되는 값이 주어진 값보다 작거나 같다고 주장하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="ccf8766ba266eb797bf44971dfd17e81dfd01d65" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">평가 된 값이 &lt;code&gt;false&lt;/code&gt; 임을 주장하는 제한 조건 .</target>
        </trans-unit>
        <trans-unit id="bae29eedcdbb9c2c7fe9cbe4952c8e43f398d1bd" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">평가되는 값이 &lt;code&gt;null&lt;/code&gt; 이라고 주장하는 제약 조건 .</target>
        </trans-unit>
        <trans-unit id="1bb1b421117f06662712afe83ea4a47af30ac641" translate="yes" xml:space="preserve">
          <source>Constraint that asserts that the value it is evaluated is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">평가 된 값이 &lt;code&gt;true&lt;/code&gt; 임을 주장하는 제한 조건 .</target>
        </trans-unit>
        <trans-unit id="542e3814006c1ad2918ab57a2a6317461e8888fc" translate="yes" xml:space="preserve">
          <source>Constraint that checks if a value is equal to an attribute of a class or of an object.</source>
          <target state="translated">값이 클래스 또는 객체의 속성과 같은지 확인하는 제약 조건입니다.</target>
        </trans-unit>
        <trans-unit id="d4e212c9e6f5b2f83c794ce2774061b9bed22540" translate="yes" xml:space="preserve">
          <source>Constraint that checks if one value is equal to another.</source>
          <target state="translated">한 값이 다른 값과 같은지 확인하는 제약 조건입니다.</target>
        </trans-unit>
        <trans-unit id="dba210d9fcdb94b1b16c54ee8d3ee6eddad1c8f2" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the directory exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="163a7e8ab37f1c587d7356e2485a5e7490ebb768" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the directory that it is evaluated for exists.</source>
          <target state="translated">평가되는 디렉토리가 존재하는지 점검하는 제한 조건.</target>
        </trans-unit>
        <trans-unit id="4781f669062e4259978e292b1efaa10acdf764f9" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0af0937e60c236c9ca28fcac0d3492eabf2067a7" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) is readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa6d3492ea422313136ee8878e1afb246a142508" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) is writable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bcd32f6e04b798f950eba813a06c4290d62d187" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) that it is evaluated for exists.</source>
          <target state="translated">평가 된 파일 (이름)이 존재하는지 확인하는 제약 조건입니다.</target>
        </trans-unit>
        <trans-unit id="8add62ad08a232c6da5f779048e460f56b9b0c30" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) that it is evaluated for is readable.</source>
          <target state="translated">평가 된 파일 (이름)을 읽을 수 있는지 확인하는 제약 조건입니다.</target>
        </trans-unit>
        <trans-unit id="9191db07dfcd01e4cc5309b818514ada07f3fb85" translate="yes" xml:space="preserve">
          <source>Constraint that checks if the file(name) that it is evaluated for is writable.</source>
          <target state="translated">평가 된 파일 (이름)이 쓰기 가능한지 확인하는 제약 조건입니다.</target>
        </trans-unit>
        <trans-unit id="e416e43f493dc03bd7f45d55965a398e7052a174" translate="yes" xml:space="preserve">
          <source>Contents:</source>
          <target state="translated">Contents:</target>
        </trans-unit>
        <trans-unit id="39624edef87575d027eafcfae5eedc2c3ae43865" translate="yes" xml:space="preserve">
          <source>Create a directory for PHP binaries; e.g., &lt;code&gt;C:\bin&lt;/code&gt;</source>
          <target state="translated">PHP 바이너리를위한 디렉토리를 만드십시오; 예 &lt;code&gt;C:\bin&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="817f0806cd622cbd94df178eb512c1d433e5d609" translate="yes" xml:space="preserve">
          <source>Create a wrapping batch script (results in &lt;code&gt;C:\bin\phpunit.cmd&lt;/code&gt;):</source>
          <target state="translated">랩핑 배치 스크립트를 작성하십시오 ( &lt;code&gt;C:\bin\phpunit.cmd&lt;/code&gt; 결과 ).</target>
        </trans-unit>
        <trans-unit id="0b9fb3a610b937165a8b67771454b580d7f1fa46" translate="yes" xml:space="preserve">
          <source>Cross-Team Tests</source>
          <target state="translated">팀 간 테스트</target>
        </trans-unit>
        <trans-unit id="00df88cb6a2b4d4554b24a2f1b7f28f318ee884a" translate="yes" xml:space="preserve">
          <source>Data Providers</source>
          <target state="translated">데이터 제공 업체</target>
        </trans-unit>
        <trans-unit id="2494fdba194cdad3eca4fd349fc2fa398ef6874e" translate="yes" xml:space="preserve">
          <source>DataSet Filter</source>
          <target state="translated">데이터 세트 필터</target>
        </trans-unit>
        <trans-unit id="4a0db487f867f26b9f02146d10dd03702fb1dfb6" translate="yes" xml:space="preserve">
          <source>Database (DB) Dataset</source>
          <target state="translated">데이터베이스 (DB) 데이터 세트</target>
        </trans-unit>
        <trans-unit id="f6f4eb236a59b4e21eeb9b7cd6bc75392515a91d" translate="yes" xml:space="preserve">
          <source>Database Assertions API</source>
          <target state="translated">데이터베이스 어설 션 API</target>
        </trans-unit>
        <trans-unit id="4db0ec9a89645d47708b06e3ba733a19aedfaff7" translate="yes" xml:space="preserve">
          <source>Database Testing</source>
          <target state="translated">데이터베이스 테스팅</target>
        </trans-unit>
        <trans-unit id="95a67d8c418447fa80e67876d3350cbdfb7bc894" translate="yes" xml:space="preserve">
          <source>DbUnit</source>
          <target state="translated">DbUnit</target>
        </trans-unit>
        <trans-unit id="2eacecba2b6676133b7c3099f8e05aa4c9f88632" translate="yes" xml:space="preserve">
          <source>DbUnit currently supports MySQL, PostgreSQL, Oracle and SQLite. Through &lt;a href=&quot;http://framework.zend.com&quot;&gt;Zend Framework&lt;/a&gt; or &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; integrations it has access to other database systems such as IBM DB2 or Microsoft SQL Server.</source>
          <target state="translated">DbUnit은 현재 MySQL, PostgreSQL, Oracle 및 SQLite를 지원합니다. &lt;a href=&quot;http://framework.zend.com&quot;&gt;Zend Framework&lt;/a&gt; 또는 &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; 통합을 통해 IBM DB2 또는 Microsoft SQL Server와 같은 다른 데이터베이스 시스템에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fb4d858eb59af0cf2ac6c6bc2f21cacee80142f" translate="yes" xml:space="preserve">
          <source>DbUnit helps to simplify all these problems with database testing in an elegant way.</source>
          <target state="translated">DbUnit은 데이터베이스 테스트와 관련된 모든 문제를 우아한 방식으로 단순화합니다.</target>
        </trans-unit>
        <trans-unit id="41660197d49bbee961cc2ee835fc41fa87b7c176" translate="yes" xml:space="preserve">
          <source>DbUnit port for PHP/PHPUnit to support database interaction testing.</source>
          <target state="translated">데이터베이스 상호 작용 테스트를 지원하기위한 PHP / PHPUnit 용 DbUnit 포트.</target>
        </trans-unit>
        <trans-unit id="119c0e62f44a97995bbf31f033e4d32a26b3822e" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;PHPUnit\Runner\StandardTestSuiteLoader&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfa9a199d8f96898f03a3b3be1f53ae93919e5e9" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;PHPUnit\TextUI\ResultPrinter&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab41c51dc772ae84d83b15e5bb89666d74ed74c" translate="yes" xml:space="preserve">
          <source>Defines the number of columns to use for progress output. If &lt;code&gt;max&lt;/code&gt; is defined as value, the number of columns will be maximum of the current terminal.</source>
          <target state="translated">진행률 출력에 사용할 열 수를 정의합니다. &lt;code&gt;max&lt;/code&gt; 가 value로 정의 되면 열 수는 현재 터미널의 최대 값입니다.</target>
        </trans-unit>
        <trans-unit id="e1f3c96de9d54f40b90ee611d510c3ee3e3a5fd4" translate="yes" xml:space="preserve">
          <source>Delete all the rows from the tables specified in the dataset.</source>
          <target state="translated">데이터 세트에 지정된 테이블에서 모든 행을 삭제하십시오.</target>
        </trans-unit>
        <trans-unit id="86629ba9311cf16a077010c2c75bda057654fd46" translate="yes" xml:space="preserve">
          <source>Depending on the implementation different approaches are taken to add table instances to a dataset. For example, tables are added internally during construction from the source file in all file-based datasets such as &lt;code&gt;YamlDataSet&lt;/code&gt;, &lt;code&gt;XmlDataSet&lt;/code&gt; or &lt;code&gt;FlatXmlDataSet&lt;/code&gt;.</source>
          <target state="translated">구현에 따라 테이블 인스턴스를 데이터 세트에 추가하기 위해 다른 접근 방식이 사용됩니다. 예를 들어, 테이블은 &lt;code&gt;YamlDataSet&lt;/code&gt; , &lt;code&gt;XmlDataSet&lt;/code&gt; 또는 &lt;code&gt;FlatXmlDataSet&lt;/code&gt; 와 같은 모든 파일 기반 데이터 세트의 소스 파일에서 구성 중에 내부적으로 추가 됩니다.</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="700768afde1d60bbab4d98ccf8920e71757472d1" translate="yes" xml:space="preserve">
          <source>Differences in casing are ignored for the comparison of &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82ce0c7386ae1202b18632fe7001058a0c2c47e" translate="yes" xml:space="preserve">
          <source>Differences in casing are ignored when &lt;code&gt;$needle&lt;/code&gt; is searched for in &lt;code&gt;$haystack&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f2def23a82e4efe95d1eee254cb6840339ebe01" translate="yes" xml:space="preserve">
          <source>Difficulties in Database Testing</source>
          <target state="translated">데이터베이스 테스트의 어려움</target>
        </trans-unit>
        <trans-unit id="1768eb13b20e61b603bbfdc1db37cfbca982fb32" translate="yes" xml:space="preserve">
          <source>Do not backup and restore $GLOBALS. See &lt;a href=&quot;fixtures#fixtures-global-state&quot;&gt;Global State&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260139da2a03c1f22636f63c87db02afa2f82465" translate="yes" xml:space="preserve">
          <source>Do not backup and restore $GLOBALS. See &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;the section called &amp;ldquo;Global State&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">$ GLOBALS를 백업 및 복원하지 마십시오. 자세한 내용 &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;은&amp;ldquo;전역 상태&amp;rdquo;섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="76d908c920c5c6d057c2480db4c2c6ade3a08e7d" translate="yes" xml:space="preserve">
          <source>Do not do this. Instead, you should use either the XML or the YAML DataSets.</source>
          <target state="translated">이러지 마십시오. 대신 XML 또는 YAML DataSet을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c413ec5a88f4f3186b6f6e9984e155bcb69459cc" translate="yes" xml:space="preserve">
          <source>Do not report tests that do not test anything. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43e0204699e9877d332d5922c8469d8761315998" translate="yes" xml:space="preserve">
          <source>Does not execute tests which have the &lt;code&gt;@todo&lt;/code&gt; annotation in its docblock.</source>
          <target state="translated">docblock에 &lt;code&gt;@todo&lt;/code&gt; 주석 이있는 테스트는 실행하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="80c843ad6252c9c4db64e6ae6724482806e582dc" translate="yes" xml:space="preserve">
          <source>Download &lt;a href=&quot;https://phar.phpunit.de/phpunit-6.5.phar&quot;&gt;https://phar.phpunit.de/phpunit-6.5.phar&lt;/a&gt; and save the file as &lt;code&gt;C:\bin\phpunit.phar&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://phar.phpunit.de/phpunit-6.5.phar&quot;&gt;https://phar.phpunit.de/phpunit-6.5.phar를&lt;/a&gt; 다운로드 하고 파일을 &lt;code&gt;C:\bin\phpunit.phar&lt;/code&gt; 로 저장하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b1623968400e05a655a543ef3805a09e7117b9d" translate="yes" xml:space="preserve">
          <source>During Debugging</source>
          <target state="translated">디버깅 중</target>
        </trans-unit>
        <trans-unit id="e96f998164eb81aa2499a25cd6e6045a3c4f1d61" translate="yes" xml:space="preserve">
          <source>During Development</source>
          <target state="translated">개발 중</target>
        </trans-unit>
        <trans-unit id="80435cf1bd512f35f5703e0465d70245411bf663" translate="yes" xml:space="preserve">
          <source>During Fixture SetUp PHPUnit's Database Extension inserts the rows into the database in the order they are specified in your fixture. If your database schema uses foreign keys this means you have to specify the tables in an order that does not cause foreign key constraints to fail.</source>
          <target state="translated">Fixture 설정 중 PHPUnit의 Database Extension은 행을 조명기에 지정된 순서대로 데이터베이스에 삽입합니다. 데이터베이스 스키마가 외래 키를 사용하는 경우 외래 키 제약 조건이 실패하지 않는 순서로 테이블을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="e0184adedf913b076626646d3f52c3b49c39ad6d" translate="yes" xml:space="preserve">
          <source>E</source>
          <target state="translated">E</target>
        </trans-unit>
        <trans-unit id="64463c26bf558b8868be567f32ae6ec7d5d9eba8" translate="yes" xml:space="preserve">
          <source>Each &amp;ldquo;hook&amp;rdquo;, meaning each of the interfaces listed above, represents an event that can occur while the tests are being executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438362069101577b0546516b8b4f20896a111e6f" translate="yes" xml:space="preserve">
          <source>Edge Cases</source>
          <target state="translated">가장자리 케이스</target>
        </trans-unit>
        <trans-unit id="c6733d2b92d7770bb88a12c0c1edfd4c3f203cc3" translate="yes" xml:space="preserve">
          <source>Edge cases</source>
          <target state="translated">가장자리 케이스</target>
        </trans-unit>
        <trans-unit id="a8d91493e5607c6018e4dcda6c8b451499546fe4" translate="yes" xml:space="preserve">
          <source>Edition for PHPUnit 9.5. Updated on Dec 09, 2020.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f33c80bf4cce037f7ef0854890004807487e5f3" translate="yes" xml:space="preserve">
          <source>Either put the PHAR of the specific PHPUnit version you need in your project&amp;rsquo;s &lt;code&gt;tools&lt;/code&gt; directory (which should be managed by PHIVE) or depend on the specific PHPUnit version you need in your project&amp;rsquo;s &lt;code&gt;composer.json&lt;/code&gt; if you use Composer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e2d7b451c279180bac14fcac5eeee2a4ddaa0c" translate="yes" xml:space="preserve">
          <source>Enforce time limit based on test size. See &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt; for details.</source>
          <target state="translated">테스트 크기에 따라 시간 제한을 시행하십시오. 자세한 내용은 &lt;a href=&quot;risky-tests&quot;&gt;6 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="47f323a055a55f6479ff729491a0be397dc81cec" translate="yes" xml:space="preserve">
          <source>Enforce time limit based on test size. See &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c846504ac5660ebbbf0b9419ca3e1f96e04978aa" translate="yes" xml:space="preserve">
          <source>Error output</source>
          <target state="translated">에러 출력</target>
        </trans-unit>
        <trans-unit id="5492c1411feba23d43dd09d4a080d1d32e553a28" translate="yes" xml:space="preserve">
          <source>Example 1.1 Usage of assertArrayHasKey()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318828cda718a6605fc435ee61e9ff9e1c68e40a" translate="yes" xml:space="preserve">
          <source>Example 1.10 Usage of assertDirectoryExists()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c19c7667cdc117c30aef891283da7773777262" translate="yes" xml:space="preserve">
          <source>Example 1.11 Usage of assertDirectoryIsReadable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a39efa54bb40cc668be2417a9d99e6c66abbfb" translate="yes" xml:space="preserve">
          <source>Example 1.12 Usage of assertDirectoryIsWritable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1499017477b5773c2196a0eecfe51e30079e6d" translate="yes" xml:space="preserve">
          <source>Example 1.13 Usage of assertEmpty()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30fd23e15fc60cc3707bce019c080f02214090c" translate="yes" xml:space="preserve">
          <source>Example 1.14 Usage of assertEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1edafbf74d5be5f82e9333d6e8a2139488c5710" translate="yes" xml:space="preserve">
          <source>Example 1.15 Usage of assertEquals() with DOMDocument objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3031187820b74c6642d1ad0dc96aa1b2832f145d" translate="yes" xml:space="preserve">
          <source>Example 1.16 Usage of assertEquals() with objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b912dfd6624859734660bfca2df0ebda9a22e3f" translate="yes" xml:space="preserve">
          <source>Example 1.17 Usage of assertEquals() with arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc526cfe3e0546912841197c4e486b8068ef6090" translate="yes" xml:space="preserve">
          <source>Example 1.18 Usage of assertEqualsCanonicalizing()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6c1e2b67e32d5cc8f894a7611957ca8aec83c56" translate="yes" xml:space="preserve">
          <source>Example 1.19 Usage of assertEqualsIgnoringCase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb639c6ff1e5afe0c4123847902a339d85fd8d7" translate="yes" xml:space="preserve">
          <source>Example 1.2 Usage of assertClassHasAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb21a14145b9889ae46145a2d0b38505e4e09e1" translate="yes" xml:space="preserve">
          <source>Example 1.20 Usage of assertEqualsWithDelta()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d03cd56103d852e9a6123cd856f2c978f15bd8" translate="yes" xml:space="preserve">
          <source>Example 1.21 Usage of assertObjectEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="654ac6abe4e393ef5d960071881b7a655d7fd1bf" translate="yes" xml:space="preserve">
          <source>Example 1.22 Email value object with equals() method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec52e1208dd269fffaf550a0dcfa5c1d435b5fc4" translate="yes" xml:space="preserve">
          <source>Example 1.23 Usage of assertFalse()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac840e7ee54a4c6b288868e88dade5390a35c067" translate="yes" xml:space="preserve">
          <source>Example 1.24 Usage of assertFileEquals()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c90068096454a690bddc01d5fbb7d8fdcbe914d" translate="yes" xml:space="preserve">
          <source>Example 1.25 Usage of assertFileExists()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ade821d58c90e84139bc606550da0f361bf4866" translate="yes" xml:space="preserve">
          <source>Example 1.26 Usage of assertFileIsReadable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec48fbd7c8f08e66d47182e17a03ea1cf76ebdd" translate="yes" xml:space="preserve">
          <source>Example 1.27 Usage of assertFileIsWritable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c771d1b15a812f33898e50de5a561e707817dd5d" translate="yes" xml:space="preserve">
          <source>Example 1.28 Usage of assertGreaterThan()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1b1c991568c6f4188e63d78fef985df8e7fa151" translate="yes" xml:space="preserve">
          <source>Example 1.29 Usage of assertGreaterThanOrEqual()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757f05b1846c3c2796371842fb5521460c57f8c3" translate="yes" xml:space="preserve">
          <source>Example 1.3 Usage of assertClassHasStaticAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c19d6adae1f8a5b6214a10c1ded609f561165d9" translate="yes" xml:space="preserve">
          <source>Example 1.30 Usage of assertInfinite()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa321bfdb1f366db19128f3a272f999b4ee5cde" translate="yes" xml:space="preserve">
          <source>Example 1.31 Usage of assertInstanceOf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e86a4c073e598eb53e49d64ed4e3517e893393" translate="yes" xml:space="preserve">
          <source>Example 1.32 Usage of assertIsArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66716f249be6d13dcb40e8d0e6becbb569de7c20" translate="yes" xml:space="preserve">
          <source>Example 1.33 Usage of assertIsBool()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc50712fea73528f65be628a5b515d64ceefa0e8" translate="yes" xml:space="preserve">
          <source>Example 1.34 Usage of assertIsCallable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94dcaaacc78cd298a23dd287bcfb7618572ba3a" translate="yes" xml:space="preserve">
          <source>Example 1.35 Usage of assertIsFloat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14992960d85f5ec4955035c4bf8489f1483e08bb" translate="yes" xml:space="preserve">
          <source>Example 1.36 Usage of assertIsInt()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6812126c8fa267c474b770473d4c8691bf8a4e82" translate="yes" xml:space="preserve">
          <source>Example 1.37 Usage of assertIsIterable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90827a1fcdbac761000c8d2c4be2f800c51d1267" translate="yes" xml:space="preserve">
          <source>Example 1.38 Usage of assertIsNumeric()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fa9d69e5c51d84e6965a1f921487697628a4bf" translate="yes" xml:space="preserve">
          <source>Example 1.39 Usage of assertIsObject()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbecff588af88faca4b3098d12a04270fca9efd" translate="yes" xml:space="preserve">
          <source>Example 1.4 Usage of assertContains()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae1bd22acf628833e99702e5098b050a1ab69bf" translate="yes" xml:space="preserve">
          <source>Example 1.40 Usage of assertIsResource()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f11953d897da4a72749a2b067421e896b1ea7f6" translate="yes" xml:space="preserve">
          <source>Example 1.41 Usage of assertIsScalar()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b755536475b6652383a59ce86f5b85185fab5327" translate="yes" xml:space="preserve">
          <source>Example 1.42 Usage of assertIsString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f20d21d0c0ebbd1eb862e3dd92c7b360c503126" translate="yes" xml:space="preserve">
          <source>Example 1.43 Usage of assertIsReadable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df972e199fd726220b9cfa23822be49deca71ffb" translate="yes" xml:space="preserve">
          <source>Example 1.44 Usage of assertIsWritable()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cfe35ffa7cd790f1996cced89069d58731b7b49" translate="yes" xml:space="preserve">
          <source>Example 1.45 Usage of assertJsonFileEqualsJsonFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0326b076deb9d248054c494ae8f41fdc00e19f2e" translate="yes" xml:space="preserve">
          <source>Example 1.46 Usage of assertJsonStringEqualsJsonFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="762d7d659f99e5bd61dd91bb9b16551f23b5be77" translate="yes" xml:space="preserve">
          <source>Example 1.47 Usage of assertJsonStringEqualsJsonString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a6e18af030da23d078b66111567a63251849fa" translate="yes" xml:space="preserve">
          <source>Example 1.48 Usage of assertLessThan()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8230dc9a2970390a86cbcc8f5e58992bc27579ec" translate="yes" xml:space="preserve">
          <source>Example 1.49 Usage of assertLessThanOrEqual()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567a05a667d060bc5b46f3663087c819de0e5d63" translate="yes" xml:space="preserve">
          <source>Example 1.5 Usage of assertStringContainsString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e296c3946013fbbae334d73cb54d68bb2fe889e0" translate="yes" xml:space="preserve">
          <source>Example 1.50 Usage of assertNan()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed337485f76940fdb8a438b378fa5b10fe8efd59" translate="yes" xml:space="preserve">
          <source>Example 1.51 Usage of assertNull()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2508c500f4acbc69ec8b2ac79c6c077b8477f367" translate="yes" xml:space="preserve">
          <source>Example 1.52 Usage of assertObjectHasAttribute()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f8502fd6dddcb73b932add9ffe84379f2db081" translate="yes" xml:space="preserve">
          <source>Example 1.53 Usage of assertMatchesRegularExpression()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6d9c2bd718f20e0f88dd1e65f914b4628d03ca1" translate="yes" xml:space="preserve">
          <source>Example 1.54 Usage of assertStringMatchesFormat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d994b3d50de925fec5f158dd123a02c43b4d0008" translate="yes" xml:space="preserve">
          <source>Example 1.55 Usage of assertStringMatchesFormatFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a8455ee38873b8d652b169363dd47d63514a770" translate="yes" xml:space="preserve">
          <source>Example 1.56 Usage of assertSame()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5199fd30376f4d3c35fd61c4e2b616af9d05185e" translate="yes" xml:space="preserve">
          <source>Example 1.57 Usage of assertSame() with objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a81c00b1ed7fe31156625695eb748bf9fd933d8" translate="yes" xml:space="preserve">
          <source>Example 1.58 Usage of assertStringEndsWith()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2305a70e417e900fc2f37163fb70edf154c632" translate="yes" xml:space="preserve">
          <source>Example 1.59 Usage of assertStringEqualsFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5863eb958381b08dd851f407321c3c125e71d762" translate="yes" xml:space="preserve">
          <source>Example 1.6 Usage of assertStringContainsStringIgnoringCase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcfd248b4cd6d8645e5533086ae5a76ba2f50c2" translate="yes" xml:space="preserve">
          <source>Example 1.60 Usage of assertStringStartsWith()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f61afc6ae3f01948b0f8861f621765760b7ebf11" translate="yes" xml:space="preserve">
          <source>Example 1.61 Usage of assertThat()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306ac817fe57211331d4ca96f04a595a1e62c412" translate="yes" xml:space="preserve">
          <source>Example 1.62 Usage of assertTrue()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2bd77f9b88f356878a96794d9ed891b2082a9e1" translate="yes" xml:space="preserve">
          <source>Example 1.63 Usage of assertXmlFileEqualsXmlFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd13546eff876baca50ab270667279bf249f4686" translate="yes" xml:space="preserve">
          <source>Example 1.64 Usage of assertXmlStringEqualsXmlFile()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf9d5a6b68b625cba591d7503f712339a98909e" translate="yes" xml:space="preserve">
          <source>Example 1.65 Usage of assertXmlStringEqualsXmlString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf909bed5e0178bdde91b9e5c42b0fe04649b0d" translate="yes" xml:space="preserve">
          <source>Example 1.7 Usage of assertContainsOnly()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6302465360b7c1944d077cfad11984a5c6fbd7f" translate="yes" xml:space="preserve">
          <source>Example 1.8 Usage of assertContainsOnlyInstancesOf()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ae1fd657d7da96a4fba830bf30736639af99ce" translate="yes" xml:space="preserve">
          <source>Example 1.9 Usage of assertCount()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567c7be47dd45b7357153e9c767a5143659b15e6" translate="yes" xml:space="preserve">
          <source>Example 10.1 The assertTrue() and isTrue() methods of the PHPUnit\Framework\Assert class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987fc3834c482e631070e4af334dc3663dd70835" translate="yes" xml:space="preserve">
          <source>Example 10.2 The PHPUnit\FrameworkConstraint\IsTrue class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966abcc763f95688a8d04a79c72b56aee1c595c3" translate="yes" xml:space="preserve">
          <source>Example 10.3 TestRunner Extension Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7928e776529ee81e7f07badedd9bb7201e6db323" translate="yes" xml:space="preserve">
          <source>Example 10.4 TestRunner Extension with constructor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c60afbbd7e9e0d97fdaec059fba2edf963df4c8" translate="yes" xml:space="preserve">
          <source>Example 10.5 TestRunner Extension configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee07167af5a3a771aebafa986967c3045870ca0b" translate="yes" xml:space="preserve">
          <source>Example 2.1 Testing array operations with PHPUnit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee0490480d82f2300ea3b44072e586ea4ef19c" translate="yes" xml:space="preserve">
          <source>Example 2.10 Using multiple data providers for a single test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b86cb2fb58314f9016ecab3d717fa5c6702950" translate="yes" xml:space="preserve">
          <source>Example 2.11 Using the expectException() method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e986a4815e66a584a92bc2186e7dfafd45df97a7" translate="yes" xml:space="preserve">
          <source>Example 2.12 Expecting PHP errors, warnings, and notices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15051b1c2ad8169c7d0d0e9e1b3598fc0de72536" translate="yes" xml:space="preserve">
          <source>Example 2.13 Testing return values of code that uses PHP Errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4096a576c846919cc1592ae4d56b3b4384afe501" translate="yes" xml:space="preserve">
          <source>Example 2.14 Testing the output of a function or method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66500dca342e43629cf89d6d8339d2d6217af8df" translate="yes" xml:space="preserve">
          <source>Example 2.15 Error output generated when an array comparison fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1aab23014975f882a9b775f47afcf4295f2a32" translate="yes" xml:space="preserve">
          <source>Example 2.16 Error output when an array comparison of an long array fails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fa17ef6c383c697fb7686e984c60812c4909b5" translate="yes" xml:space="preserve">
          <source>Example 2.17 Edge case in the diff generation when using weak comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c52d81530a1e646bfb523ad0486a02957620c214" translate="yes" xml:space="preserve">
          <source>Example 2.18 Using @coversDefaultClass to shorten annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e79802c91d217df7aa8e80214cf89ade54d775a" translate="yes" xml:space="preserve">
          <source>Example 2.2 Using the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74bd98a6fc1f930335225f0d7631d0178d77420a" translate="yes" xml:space="preserve">
          <source>Example 2.3 Exploiting the dependencies between tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8232fa5f5d295c58ac6bf94007c8cebf62e9c9" translate="yes" xml:space="preserve">
          <source>Example 2.4 Test with multiple dependencies</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624175fb83c7fe1a39f1375fa1ad591b2734721c" translate="yes" xml:space="preserve">
          <source>Example 2.5 Using a data provider that returns an array of arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d44c49e3115a20bacb266f17e5953bad3e1639" translate="yes" xml:space="preserve">
          <source>Example 2.6 Using a data provider with named datasets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbc2a06f239100677ef420058b22d3f39f9bee8" translate="yes" xml:space="preserve">
          <source>Example 2.7 Using a data provider that returns an Iterator object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64494331bfc327af8967dc5aaf94dbc47457e50" translate="yes" xml:space="preserve">
          <source>Example 2.8 The CsvFileIterator class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="531a2d13925087aaa8f70054b0ec709ea3346036" translate="yes" xml:space="preserve">
          <source>Example 2.9 Combination of @depends and @dataProvider in same test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8130a6f55c653a50e1bcf43b411230ecd0845b75" translate="yes" xml:space="preserve">
          <source>Example 3.1 Named data sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94d898c5394eae5b7282e419790186318efa491c" translate="yes" xml:space="preserve">
          <source>Example 3.2 Filter pattern examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9763ef3dbc83eb751512be2bcc4c7894090375bc" translate="yes" xml:space="preserve">
          <source>Example 3.3 Filter shortcuts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578f345b9e6462001c09d9562d06e27ef23d56f5" translate="yes" xml:space="preserve">
          <source>Example 4.1 Using setUp() to create the stack fixture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63796a42a089c8db7f7ffe99acc467685fd8021" translate="yes" xml:space="preserve">
          <source>Example 4.2 Example showing all template methods available</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="382eee522100f9f72017be67ff1d4877074188e5" translate="yes" xml:space="preserve">
          <source>Example 4.3 Sharing fixture between the tests of a test suite</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="395bcdf070469d1482c51dcac30f25b88c255f3b" translate="yes" xml:space="preserve">
          <source>Example 5.1 Composing a Test Suite Using XML Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8326b5008ad173cac118e51d0f4cc437cf311925" translate="yes" xml:space="preserve">
          <source>Example 5.2 Composing a Test Suite Using XML Configuration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540780f7de5fed1f663b3bfbb89422752ea822d9" translate="yes" xml:space="preserve">
          <source>Example 7.1 Marking a test as incomplete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc9bd6ed28e73a380d4f35e1542a85abe90cee3" translate="yes" xml:space="preserve">
          <source>Example 7.2 Skipping a test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce76d1425f9fa6a6ca783ab37160286b66970be" translate="yes" xml:space="preserve">
          <source>Example 7.3 Skipping test cases using @requires</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d113fe84d4df2562cad512618b64806eff99a45" translate="yes" xml:space="preserve">
          <source>Example 8.1 The class we want to stub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66d4e1e98b8e7ee6d2e4825df42b3bb831bd71f" translate="yes" xml:space="preserve">
          <source>Example 8.10 Stubbing a method call to throw an exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63f04204e320286aa1718c503e7de206f681f8e" translate="yes" xml:space="preserve">
          <source>Example 8.11 The Subject and Observer classes that are part of the System under Test (SUT)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac655ba9b6cb1d7ddbf97c84e2297b3a1148d0f1" translate="yes" xml:space="preserve">
          <source>Example 8.12 Testing that a method gets called once and with a specified argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40cd08b10fa6faacbfdb65c4ca74409acd7abdee" translate="yes" xml:space="preserve">
          <source>Example 8.13 Testing that a method gets called with a number of arguments constrained in different ways</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3dbca0d8c986162c4bda6b41babea16ea09ae2" translate="yes" xml:space="preserve">
          <source>Example 8.14 Testing that a method gets called two times with specific arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0f5c3bc36338b2c035104b2d3257db1cad48ec" translate="yes" xml:space="preserve">
          <source>Example 8.15 More complex argument verification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d9c668803ee63587a162a09917b0bee39a8ab4" translate="yes" xml:space="preserve">
          <source>Example 8.16 Testing that a method gets called once and with the identical object as was passed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c7b39b3a7a701f19a5352be0f18af47e80ad41d" translate="yes" xml:space="preserve">
          <source>Example 8.17 Create a mock object with cloning parameters enabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c47b567718163b1a7e8f4799eed52bf2d978c1" translate="yes" xml:space="preserve">
          <source>Example 8.18 Testing the concrete methods of a trait</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa02babb08498435c1d6c04055ae3dbe8cb9acb" translate="yes" xml:space="preserve">
          <source>Example 8.19 Testing the concrete methods of an abstract class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd781c5735a01e6668f29b40f0a98e337f04334" translate="yes" xml:space="preserve">
          <source>Example 8.2 Stubbing a method call to return a fixed value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862ca92ab49efd13f35bc0690b809f9be0574ffc" translate="yes" xml:space="preserve">
          <source>Example 8.20 Stubbing a web service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c4c3c6260b906b029f23cbb7b86c3a0d5326b2" translate="yes" xml:space="preserve">
          <source>Example 8.3 A method with a return type declaration</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a616ed4d86c152bba343c033ac9ab2a047635c" translate="yes" xml:space="preserve">
          <source>Example 8.4 Using the Mock Builder API can be used to configure the generated test double class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c889e9493d9aa581ca61eae8ce74fc4e071087c6" translate="yes" xml:space="preserve">
          <source>Example 8.5 Stubbing a method call to return one of the arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68f25e03af30859ac8c7b393217ada0158bbdb0" translate="yes" xml:space="preserve">
          <source>Example 8.6 Stubbing a method call to return a reference to the stub object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8f55147001915fa14a20101a746b3288ffbde4" translate="yes" xml:space="preserve">
          <source>Example 8.7 Stubbing a method call to return the value from a map</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bde66ea8963a29d83097bdab7480dad4ee742016" translate="yes" xml:space="preserve">
          <source>Example 8.8 Stubbing a method call to return a value from a callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050146964dd4efc3626b4ae33b47663f177578c8" translate="yes" xml:space="preserve">
          <source>Example 8.9 Stubbing a method call to return a list of values in the specified order</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ca4a601e1110695cbe601ce66a83fe65324d36" translate="yes" xml:space="preserve">
          <source>Example 9.1 Using the &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8304274192b51d154c4735a205200dd77c2981d" translate="yes" xml:space="preserve">
          <source>Example 9.2 Test class that specifies which class it wants to cover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff9cb2955c8dcabfe434647fde445fc1663ed9c6" translate="yes" xml:space="preserve">
          <source>Example 9.3 Tests that specify which method they want to cover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6113a8dc86303eebd893a02a0dc8380331f29b37" translate="yes" xml:space="preserve">
          <source>Example 9.4 A test that specifies that no method should be covered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="3ea2566653ce0694e6d57d3fe04b5dbc1af61f97" translate="yes" xml:space="preserve">
          <source>Except the &lt;code&gt;getTableMetaData()&lt;/code&gt; method it is pretty self-explainatory. The used methods are all required for the different assertions of the Database Extension that are explained in the next chapter. The &lt;code&gt;getTableMetaData()&lt;/code&gt; method has to return an implementation of the &lt;code&gt;PHPUnit_Extensions_Database_DataSet_ITableMetaData&lt;/code&gt; interface, which describes the structure of the table. It holds information on:</source>
          <target state="translated">&lt;code&gt;getTableMetaData()&lt;/code&gt; 메소드를 제외하고 는 매우 자명하다. 사용 된 방법은 모두 다음 장에서 설명하는 데이터베이스 확장의 다양한 주장에 필요합니다. &lt;code&gt;getTableMetaData()&lt;/code&gt; 메소드는 구현 반환한다 &lt;code&gt;PHPUnit_Extensions_Database_DataSet_ITableMetaData&lt;/code&gt; 의 테이블 구조를 설명 인터페이스. 다음에 대한 정보를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="770df1f8633dffd0edf718b42eb81db61ca30bec" translate="yes" xml:space="preserve">
          <source>Exclude tests from the specified group(s). A test can be tagged as belonging to a group using the &lt;code&gt;@group&lt;/code&gt; annotation.</source>
          <target state="translated">지정된 그룹에서 테스트를 제외합니다. &lt;code&gt;@group&lt;/code&gt; 주석을 사용하여 테스트에 그룹에 속하는 것으로 태그를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3630ab1e31db75331ab1cf37f7073a7ecee09016" translate="yes" xml:space="preserve">
          <source>Exercise System Under Test</source>
          <target state="translated">테스트중인 운동 시스템</target>
        </trans-unit>
        <trans-unit id="a1858ef355e7a8449dcbbcc84f64813a7e1aff06" translate="yes" xml:space="preserve">
          <source>Extending PHPUnit</source>
          <target state="translated">PHPUnit 확장</target>
        </trans-unit>
        <trans-unit id="8c99474522441d20e2b163ce9d9023c234cc714c" translate="yes" xml:space="preserve">
          <source>Extending the TestRunner</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="0bbfd584fb747cbb9a272d510af4388bea096b90" translate="yes" xml:space="preserve">
          <source>File-Based DataSets and DataTables</source>
          <target state="translated">파일 기반 데이터 세트 및 데이터 테이블</target>
        </trans-unit>
        <trans-unit id="201ca61ce9540d60ffeb8acdab6deb417ea449f6" translate="yes" xml:space="preserve">
          <source>Filter and Composition DataSets and DataTables</source>
          <target state="translated">필터 및 컴포지션 데이터 세트 및 데이터 테이블</target>
        </trans-unit>
        <trans-unit id="fe2a5bdae4158b697b4e224f7e7fb6eb9b284926" translate="yes" xml:space="preserve">
          <source>Find the smallest-scale demonstration of the defect in the code. For example, if a number appears incorrectly in an output, find the object that is computing that number.</source>
          <target state="translated">코드에서 가장 작은 결함의 데모를 찾으십시오. 예를 들어, 출력에 숫자가 잘못 나타나면 해당 숫자를 계산하는 개체를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="95cc26d1918cfecfdf281a35429271d7cd0d04b2" translate="yes" xml:space="preserve">
          <source>Finding the smallest reliable reproduction of the defect gives you the opportunity to really examine the cause of the defect. The test you write will improve the chances that when you fix the defect, you really fix it, because the new test reduces the likelihood of undoing the fix with future code changes. All the tests you wrote before reduce the likelihood of inadvertently causing a different problem.</source>
          <target state="translated">결함의 가장 신뢰할만한 재생산을 찾으면 결함의 원인을 실제로 조사 할 수 있습니다. 새 테스트를 수행하면 향후 코드 변경으로 수정 프로그램을 취소 할 가능성이 줄어들 기 때문에 작성하는 테스트를 통해 결함을 수정할 때 실제로 문제를 해결할 가능성이 높아집니다. 전에 작성한 모든 테스트는 실수로 다른 문제를 일으킬 가능성을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="92485f498c9ab6631e7eab0dca46127bb1c8da76" translate="yes" xml:space="preserve">
          <source>Fix the defect.</source>
          <target state="translated">결함을 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="93a9d4b62c49df4936d5f701755ab05d3a9187a5" translate="yes" xml:space="preserve">
          <source>Fixtures</source>
          <target state="translated">Fixtures</target>
        </trans-unit>
        <trans-unit id="3332c295f8e8f620d384fafcb9ec318fc39b426e" translate="yes" xml:space="preserve">
          <source>Flat XML DataSet</source>
          <target state="translated">플랫 XML 데이터 세트</target>
        </trans-unit>
        <trans-unit id="64ee171d419a298fa39e6e1e0b31d1e4797bade8" translate="yes" xml:space="preserve">
          <source>For Cygwin and/or MingW32 (e.g., TortoiseGit) shell environments, you may skip step 5. above, simply save the file as &lt;code&gt;phpunit&lt;/code&gt; (without &lt;code&gt;.phar&lt;/code&gt; extension), and make it executable via &lt;strong&gt;&lt;code&gt;chmod 775 phpunit&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">Cygwin 및 / 또는 MingW32 (예 : TortoiseGit) 셸 환경의 경우 위의 5 단계를 건너 뛰고 파일을 &lt;code&gt;phpunit&lt;/code&gt; ( &lt;code&gt;.phar&lt;/code&gt; 확장자 없이) 으로 저장 한 다음 &lt;strong&gt; &lt;code&gt;chmod 775 phpunit&lt;/code&gt; 을&lt;/strong&gt; 통해 실행 가능하게 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="70386763ab8d33e1e77b4fe208a01efdccc84a3a" translate="yes" xml:space="preserve">
          <source>For a testing tool the Database Extension surely provides some assertions that you can use to verify the current state of the database, tables and the row-count of tables. This section describes this functionality in detail:</source>
          <target state="translated">테스트 도구의 경우 데이터베이스 확장은 데이터베이스, 테이블 및 행 수 테이블의 현재 상태를 확인하는 데 사용할 수있는 몇 가지 어설 션을 제공합니다. 이 섹션에서는이 기능에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="358d57de4f1b6c901bf71c27de34c6c97e396562" translate="yes" xml:space="preserve">
          <source>For database assertions you do not only need the file-based datasets but also a Query/SQL based Dataset that contains the actual contents of the database. This is where the Query DataSet shines:</source>
          <target state="translated">데이터베이스 어설 션의 경우 파일 기반 데이터 세트뿐만 아니라 데이터베이스의 실제 내용을 포함하는 Query / SQL 기반 데이터 세트도 필요합니다. 이것은 Query DataSet이 빛나는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="bc50634a6fcbff4b5b48e340941236351620a10b" translate="yes" xml:space="preserve">
          <source>For each test run, the PHPUnit command-line tool prints one character to indicate progress:</source>
          <target state="translated">각 테스트 실행에 대해 PHPUnit 명령 행 도구는 하나의 문자를 인쇄하여 진행률을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d71e6fd97876b29e66fd850bb51a630c8711a082" translate="yes" xml:space="preserve">
          <source>For more fine-grained control of which tests to run we can use the &lt;code&gt;--filter&lt;/code&gt; option:</source>
          <target state="translated">실행할 테스트를보다 세밀하게 제어하려면 &lt;code&gt;--filter&lt;/code&gt; 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="39ddf4b1466d48ae6e5e0c73a43696a29c0a89de" translate="yes" xml:space="preserve">
          <source>For most people it just &quot;feels right&quot; to use &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; because the test method is invoked on a test object. The fact that the assertion methods are declared &lt;code&gt;static&lt;/code&gt; allows for (re)using them outside the scope of a test object. Lastly, the global function wrappers allow developers to type less characters (&lt;code&gt;assertTrue()&lt;/code&gt; instead of &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;).</source>
          <target state="translated">대부분의 사람들에게는 테스트 메소드가 테스트 객체에서 호출되기 때문에 &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; 를 사용하는 것이 &quot;느낌&quot; 입니다. 어설 션 메서드가 &lt;code&gt;static&lt;/code&gt; 으로 선언되어 있기 때문에 테스트 개체의 범위를 벗어나서 다시 사용할 수 있습니다. 마지막으로, 전역 함수 래퍼는 개발자가 적은 문자를 입력 할 수 있도록 ( &lt;code&gt;assertTrue()&lt;/code&gt; 대신 &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; 또는 &lt;code&gt;self::assertTrue()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="293020854997b69b715df1a3b888fa741294054f" translate="yes" xml:space="preserve">
          <source>For most people it just &amp;ldquo;feels right&amp;rdquo; to use &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; because the test method is invoked on a test object. The fact that the assertion methods are declared static allows for (re)using them outside the scope of a test object. Lastly, the global function wrappers allow developers to type less characters (&lt;code&gt;assertTrue()&lt;/code&gt; instead of &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a93e1f7b0539b8bd1c147e5148e28b4aec6999dc" translate="yes" xml:space="preserve">
          <source>For sure you can assert the state of multiple tables at once and compare a query dataset against a file based dataset. There are two different ways for DataSet assertions.</source>
          <target state="translated">여러 테이블의 상태를 한 번에 어설 션하고 쿼리 데이터 세트를 파일 기반 데이터 세트와 비교할 수 있습니다. DataSet 어설 션에는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7581ef1768b37d9a3b3d9ddbc26b072dd03f105" translate="yes" xml:space="preserve">
          <source>For the implementation we only need to know that the &lt;code&gt;getDataSet()&lt;/code&gt; method is called once during &lt;code&gt;setUp()&lt;/code&gt; to retrieve the fixture data-set and insert it into the database. In the example we are using a factory method &lt;code&gt;createFlatXMLDataSet($filename)&lt;/code&gt; that represents a data-set through an XML representation.</source>
          <target state="translated">구현을 위해 &lt;code&gt;setUp()&lt;/code&gt; 동안 &lt;code&gt;getDataSet()&lt;/code&gt; 메소드가 한 번만 호출 되어 조명기 데이터 세트를 검색하고이를 데이터베이스에 삽입해야합니다. 이 예에서는 XML 표현을 통해 데이터 세트를 나타내는 팩토리 메소드 &lt;code&gt;createFlatXMLDataSet($filename)&lt;/code&gt; 을 사용하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbffca81d098fd870b543af78231e4f60826f736" translate="yes" xml:space="preserve">
          <source>For this dataset like the Flat XML, CSV and YAML DataSets the keys of the first specified row define the table's column names, in the previous case this would be &amp;ldquo;id&amp;rdquo;, &amp;ldquo;content&amp;rdquo;, &amp;ldquo;user&amp;rdquo; and &amp;ldquo;created&amp;rdquo;.</source>
          <target state="translated">플랫 XML, CSV 및 YAML 데이터 세트와 같은이 데이터 세트의 경우, 첫 번째로 지정된 행의 키는 테이블의 열 이름을 정의합니다. 이전의 경우 &quot;id&quot;, &quot;content&quot;, &quot;user&quot;및 &quot;created&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="a5a19dc13362750c10f68df1dd834e11bf65f8cc" translate="yes" xml:space="preserve">
          <source>For this we would define a Query Table instance which derives its content from a table name and SQL query and compare it to a File/Array Based Data Set:</source>
          <target state="translated">이를 위해 테이블 ​​이름과 SQL 쿼리에서 내용을 가져 와서 파일 / 배열 기반 데이터 세트와 비교하는 쿼리 테이블 인스턴스를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="bd747da5259284d2cedb37053bd801f7b944711d" translate="yes" xml:space="preserve">
          <source>For unit tests, it is recommended to explicitly reset the values of static properties under test in your &lt;code&gt;setUp()&lt;/code&gt; code instead (and ideally also &lt;code&gt;tearDown()&lt;/code&gt;, so as to not affect subsequently executed tests).</source>
          <target state="translated">단위 테스트의 경우 &lt;code&gt;setUp()&lt;/code&gt; 코드 에서 테스트중인 정적 속성 값을 명시 적으로 재설정하는 것이 좋습니다 (그리고 이후에 실행되는 테스트에 영향을 미치지 않도록 &lt;code&gt;tearDown()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="30a304b89f8f0e7a0c80d1209f819caa780f5296" translate="yes" xml:space="preserve">
          <source>For usage see &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-ignoring-code-blocks&quot;&gt;Ignoring Code Blocks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a9df4069ac400c2d109b68e5b4456b6afaab8d" translate="yes" xml:space="preserve">
          <source>For usage see &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks&quot;&gt;the section called &amp;ldquo;Ignoring Code Blocks&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">사용법은 &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks&quot;&gt;&quot;코드 블록 무시&quot;섹션을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d790b402d79ac1a723c790313bcd679999474630" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions</source>
          <target state="translated">자주 묻는 질문</target>
        </trans-unit>
        <trans-unit id="c98befcd898eff0b605321b27bb399012a9d5265" translate="yes" xml:space="preserve">
          <source>From the previous example it isn't obvious how you would specify an empty table. You can insert a tag with no attributes with the name of the empty table. A flat xml file for an empty guestbook table would then look like:</source>
          <target state="translated">이전 예에서 빈 테이블을 지정하는 방법은 명확하지 않습니다. 빈 테이블 이름을 가진 속성이없는 태그를 삽입 할 수 있습니다. 빈 방명록 테이블의 플랫 XML 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3658f45ce7f57006c8c898d7115d875a1892a62f" translate="yes" xml:space="preserve">
          <source>From the previous implementation example you can easily see that &lt;code&gt;getConnection()&lt;/code&gt; method is pretty static and could be re-used in different database test-cases. Additionally to keep performance of your tests good and database overhead low you can refactor the code a little bit to get a generic abstract test case for your application, which still allows you to specify a different data-fixture for each test case:</source>
          <target state="translated">이전 구현 예제에서 &lt;code&gt;getConnection()&lt;/code&gt; 메소드가 매우 정적이며 다른 데이터베이스 테스트 사례에서 재사용 될 수 있음을 쉽게 알 수 있습니다. 또한 테스트 성능을 높이고 데이터베이스 오버 헤드를 낮게 유지하려면 응용 프로그램에 대한 일반적인 추상 테스트 사례를 얻기 위해 코드를 약간 리팩터링하여 각 테스트 사례에 대해 서로 다른 데이터 픽스처를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7103f32996791d81c07b880df51f63fb7efbeb1e" translate="yes" xml:space="preserve">
          <source>Function and Method Coverage</source>
          <target state="translated">기능 및 방법 범위</target>
        </trans-unit>
        <trans-unit id="c7e38653a6e140e92ba1c0bf192d2218936503be" translate="yes" xml:space="preserve">
          <source>Functionality that needs to be stubbed out tends to cluster in the same object, improving cohesion. By presenting the functionality with a single, coherent interface you reduce the coupling with the rest of the system.</source>
          <target state="translated">스텁 아웃해야하는 기능은 동일한 오브젝트에 클러스터링되어 응집력을 향상시키는 경향이 있습니다. 기능을 단일의 일관된 인터페이스로 제공함으로써 나머지 시스템과의 연결을 줄입니다.</target>
        </trans-unit>
        <trans-unit id="c0e178550d27591dd2562c653403feba847334ca" translate="yes" xml:space="preserve">
          <source>Furthermore, by setting &lt;code&gt;forceCoversAnnotation=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;, a test can be marked as risky when it does not have a &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9631509e271525944995d61d9a9f34acf70b46" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in Crap4j format. See &lt;a href=&quot;code-coverage-analysis&quot;&gt;Chapter 11&lt;/a&gt; for more details.</source>
          <target state="translated">Crap4j 형식으로 코드 적용 범위 보고서를 생성합니다. 자세한 내용은 &lt;a href=&quot;code-coverage-analysis&quot;&gt;11 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9a1c70f85eb0863f9df6d218056e0515d35f8f14" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in Crap4j format. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis&quot;&gt;Code Coverage Analysis&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3185a35e75c541690322766b482041aeacf100ac" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in HTML format. See &lt;a href=&quot;code-coverage-analysis&quot;&gt;Chapter 11&lt;/a&gt; for more details.</source>
          <target state="translated">HTML 형식으로 코드 적용 범위 보고서를 생성합니다. 자세한 내용은 &lt;a href=&quot;code-coverage-analysis&quot;&gt;11 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d0cfa20936577a91d0c0cebfdd5b63b5a3db5c98" translate="yes" xml:space="preserve">
          <source>Generates a code coverage report in HTML format. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis&quot;&gt;Code Coverage Analysis&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bf20e0c81c75c9aac4ebaf3bdcd48974733f329" translate="yes" xml:space="preserve">
          <source>Generates a logfile in JUnit XML format for the tests run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e098b5ef3534ae0cb9c286aff4d09cef71267866" translate="yes" xml:space="preserve">
          <source>Generates a logfile in JUnit XML format for the tests run. See &lt;a href=&quot;logging&quot;&gt;Chapter 13&lt;/a&gt; for more details.</source>
          <target state="translated">테스트 실행을 위해 JUnit XML 형식으로 로그 파일을 생성합니다. 자세한 내용은 &lt;a href=&quot;logging&quot;&gt;13 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5cf7b510b41d640ab50cccaa741e5086adfc4fcc" translate="yes" xml:space="preserve">
          <source>Generates a logfile in XML format with the code coverage information for the tests run. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis&quot;&gt;Code Coverage Analysis&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="572e6ba8aa2a04346fc25a224e65fcd01dbbf924" translate="yes" xml:space="preserve">
          <source>Generates a logfile in XML format with the code coverage information for the tests run. See &lt;a href=&quot;logging&quot;&gt;Chapter 13&lt;/a&gt; for more details.</source>
          <target state="translated">테스트 실행을위한 코드 적용 정보와 함께 XML 형식의 로그 파일을 생성합니다. 자세한 내용은 &lt;a href=&quot;logging&quot;&gt;13 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b0bb8ee15e0052f1672309322ad96d2e0bf3b0f3" translate="yes" xml:space="preserve">
          <source>Generates a logfile or command-line output in human readable format with the code coverage information for the tests run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="120b433d53bc0a72f26c3733f540baeb400a273a" translate="yes" xml:space="preserve">
          <source>Generates a logfile or command-line output in human readable format with the code coverage information for the tests run. See &lt;a href=&quot;logging&quot;&gt;Chapter 13&lt;/a&gt; for more details.</source>
          <target state="translated">테스트 실행에 대한 코드 적용 정보와 함께 사람이 읽을 수있는 형식으로 로그 파일 또는 명령 줄 출력을 생성합니다. 자세한 내용은 &lt;a href=&quot;logging&quot;&gt;13 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f6839b90572decae58c2523809931ce56f4124ef" translate="yes" xml:space="preserve">
          <source>Generates a serialized PHP_CodeCoverage object with the code coverage information.</source>
          <target state="translated">코드 적용 범위 정보를 사용하여 직렬화 된 PHP_CodeCoverage 객체를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ba7694da27ff9ce350069439b3ff356b7bd7f4eb" translate="yes" xml:space="preserve">
          <source>Generates agile documentation in HTML or plain text format for the tests that are run (see &lt;a href=&quot;#textui-testdox&quot;&gt;TestDox&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a11f6ba99849cd72ef9d1e45842a5bf19ec2b2" translate="yes" xml:space="preserve">
          <source>Generates agile documentation in HTML or plain text format for the tests that are run. See &lt;a href=&quot;other-uses-for-tests&quot;&gt;Chapter 12&lt;/a&gt; for more details.</source>
          <target state="translated">실행되는 테스트를 위해 민첩한 문서를 HTML 또는 일반 텍스트 형식으로 생성합니다. 자세한 내용은 &lt;a href=&quot;other-uses-for-tests&quot;&gt;12 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="da88f522cd773e024da59e8948cf250b52e5ae81" translate="yes" xml:space="preserve">
          <source>Gerard Meszaros introduces the concept of Test Doubles in &lt;a href=&quot;https://phpunit.de/manual/6.5/en/appendixes.bibliography.html#Meszaros2007&quot;&gt;[&lt;abbr&gt;Meszaros2007&lt;/abbr&gt;]&lt;/a&gt; like this:</source>
          <target state="translated">Gerard Meszaros는 다음 과 같이 &lt;a href=&quot;https://phpunit.de/manual/6.5/en/appendixes.bibliography.html#Meszaros2007&quot;&gt;[ &lt;abbr&gt;Meszaros2007&lt;/abbr&gt; ]&lt;/a&gt; 에서 Test Doubles의 개념을 소개합니다 .</target>
        </trans-unit>
        <trans-unit id="de735362e31b44665b1951d877d3454b7b4c20fc" translate="yes" xml:space="preserve">
          <source>Gerard Meszaros introduces the concept of Test Doubles in &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/bibliography.html#appendixes-bibliography&quot;&gt;Meszaros2007&lt;/a&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79d9dd84806ecd269733dc617ebba164de3b982" translate="yes" xml:space="preserve">
          <source>Get the actual output.</source>
          <target state="translated">실제 출력을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="2a102f27f850350772f2e44ae41ae0c25df0de90" translate="yes" xml:space="preserve">
          <source>Global Installation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ce8e321806dbb3b91df4ce336400b327d82b05" translate="yes" xml:space="preserve">
          <source>Global State</source>
          <target state="translated">글로벌 상태</target>
        </trans-unit>
        <trans-unit id="6db8769e25f079e1b93e7ec6d9ebcb793e8faed0" translate="yes" xml:space="preserve">
          <source>Global State Manipulation</source>
          <target state="translated">글로벌 상태 조작</target>
        </trans-unit>
        <trans-unit id="3022594e64a661bec9c59577c103f3853fe781d6" translate="yes" xml:space="preserve">
          <source>Globally installing the PHAR involves the same procedure as manually &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#installation-windows&quot;&gt; installing Composer on Windows&lt;/a&gt;:</source>
          <target state="translated">PHAR을 전체적으로 설치하려면 &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md#installation-windows&quot;&gt;Windows에 Composer를&lt;/a&gt; 수동으로 설치 하는 것과 동일한 절차가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="ae9629f4ebb82c6331c0809fa9a0e54b00e578e6" translate="yes" xml:space="preserve">
          <source>Groups</source>
          <target state="translated">Groups</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="4a42c56ed588bcd1cb141bc3c54b1b03ddb143ef" translate="yes" xml:space="preserve">
          <source>Here is an example: suppose we want to test that the correct method, &lt;code&gt;update()&lt;/code&gt; in our example, is called on an object that observes another object. &lt;a href=&quot;#test-doubles-mock-objects-examples-sut-php&quot;&gt;Example 8.11&lt;/a&gt; shows the code for the &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; classes that are part of the System under Test (SUT).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f595162ce0086d2d33baf504dce935bad604a997" translate="yes" xml:space="preserve">
          <source>Here is an example: suppose we want to test that the correct method, &lt;code&gt;update()&lt;/code&gt; in our example, is called on an object that observes another object. &lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SUT.php&quot;&gt;Example 9.10&lt;/a&gt; shows the code for the &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; classes that are part of the System under Test (SUT).</source>
          <target state="translated">예를 들면 다음과 같습니다. 예에서 올바른 메소드 &lt;code&gt;update()&lt;/code&gt; 가 다른 객체를 관찰하는 객체에서 호출되는지 테스트한다고 가정 합니다. &lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SUT.php&quot;&gt;Example 9.10&lt;/a&gt; 에서는 테스트 대상 시스템 (SUT)의 일부인 &lt;code&gt;Subject&lt;/code&gt; 및 &lt;code&gt;Observer&lt;/code&gt; 클래스 의 코드를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="75970f5f5e8a12ff465817a52bc2d692711f3cf6" translate="yes" xml:space="preserve">
          <source>How to handle NULL with Flat XML / CSV Datasets?</source>
          <target state="translated">플랫 XML / CSV 데이터 세트로 NULL을 처리하는 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="a86a8e509ab919435206aa74ab6531e614525d23" translate="yes" xml:space="preserve">
          <source>However, this simplicity comes at a cost.</source>
          <target state="translated">그러나이 단순성에는 비용이 듭니다.</target>
        </trans-unit>
        <trans-unit id="8598878bcc389c550580e1685122de2391b8fd19" translate="yes" xml:space="preserve">
          <source>Human readable code coverage output for the command-line or a text file. The aim of this output format is to provide a quick coverage overview while working on a small set of classes. For bigger projects this output can be useful to get an quick overview of the projects coverage or when used with the &lt;code&gt;--filter&lt;/code&gt; functionality. When used from the command-line by writing to &lt;code&gt;php://stdout&lt;/code&gt; this will honor the &lt;code&gt;--colors&lt;/code&gt; setting. Writing to standard out is the default option when used from the command-line. By default this will only show files that have at least one covered line. This can only be changed via the &lt;code&gt;showUncoveredFiles&lt;/code&gt; xml configuration option. See &lt;a href=&quot;appendixes.configuration#appendixes.configuration.logging&quot;&gt;the section called &amp;ldquo;Logging&amp;rdquo;&lt;/a&gt;. By default all files and their coverage status are shown in the detailed report. This can be changed via the &lt;code&gt;showOnlySummary&lt;/code&gt; xml configuration option.</source>
          <target state="translated">명령 행 또는 텍스트 파일에 대한 사람이 읽을 수있는 코드 적용 범위 출력. 이 출력 형식의 목표는 작은 클래스 집합에서 작업하는 동안 빠른 범위의 개요를 제공하는 것입니다. 더 큰 프로젝트의 경우이 출력은 프로젝트 적용 범위에 대한 빠른 개요를 얻거나 &lt;code&gt;--filter&lt;/code&gt; 기능 과 함께 사용될 때 유용 할 수 있습니다 . 명령 행에서 &lt;code&gt;php://stdout&lt;/code&gt; 에 &lt;code&gt;--colors&lt;/code&gt; 설정 이 적용됩니다 . 명령 줄에서 표준 출력을 쓰는 것이 기본 옵션입니다. 기본적으로 이것은 최소한 한 줄이있는 파일 만 표시합니다. &lt;code&gt;showUncoveredFiles&lt;/code&gt; xml 구성 옵션을 통해서만 변경할 수 있습니다 . &lt;a href=&quot;appendixes.configuration#appendixes.configuration.logging&quot;&gt;&quot;로깅&quot;섹션을&lt;/a&gt; 참조하십시오. 기본적으로 모든 파일 및 해당 범위는 상세 보고서에 표시됩니다. &lt;code&gt;showOnlySummary&lt;/code&gt; xml 구성 옵션을 통해 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="7ed71515389bdb63144c64218f911e743a672670" translate="yes" xml:space="preserve">
          <source>I have been talking about NULL problems with the Flat XML and CSV DataSet, but there is a slightly complicated workaround to get both types of datasets working with NULLs.</source>
          <target state="translated">플랫 XML 및 CSV DataSet의 NULL 문제에 대해 이야기했지만 NULL을 사용하여 두 유형의 데이터 세트를 모두 얻는 약간 복잡한 해결 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e42d59f779165bfae84871f5d75d21fbcb5efae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;$ignoreCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the test will be case insensitive.</source>
          <target state="translated">경우 &lt;code&gt;$ignoreCase&lt;/code&gt; 있다 &lt;code&gt;true&lt;/code&gt; , 테스트 사례를 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="3d1d7fd58245c912c18b07610675b35c98651ba1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;max&lt;/code&gt; is defined as value, the number of columns will be maximum of the current terminal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd72b3f16a9d32f2c52191f553d8f3c9fc87ac88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;phpunit.xml&lt;/code&gt; or &lt;code&gt;phpunit.xml.dist&lt;/code&gt; (in that order) exist in the current working directory and &lt;code&gt;--configuration&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; used, the configuration will be automatically read from that file.</source>
          <target state="translated">경우 &lt;code&gt;phpunit.xml&lt;/code&gt; 또는 &lt;code&gt;phpunit.xml.dist&lt;/code&gt; (순서대로)가 현재 작업 디렉토리에 존재 &lt;code&gt;--configuration&lt;/code&gt; 가 되어 &lt;em&gt;있지&lt;/em&gt; 사용, 구성은 자동으로 해당 파일에서 읽습니다.</target>
        </trans-unit>
        <trans-unit id="f621727cd3d398e99068e06d884d0dd1da8c3c58" translate="yes" xml:space="preserve">
          <source>If a directory is specified and if &lt;code&gt;phpunit.xml&lt;/code&gt; or &lt;code&gt;phpunit.xml.dist&lt;/code&gt; (in that order) exists in this directory, the configuration will be automatically read from that file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46f6e7d0af7b5472168e1dc63f268f81356c79e" translate="yes" xml:space="preserve">
          <source>If a method is specificed with the &lt;code&gt;@covers&lt;/code&gt; annotation, only the referenced method will be considered as covered, but not methods called by this method. Hence, when a covered method is refactored using the &lt;em&gt;extract method&lt;/em&gt; refactoring, corresponding &lt;code&gt;@covers&lt;/code&gt; annotations need to be added. This is the reason it is recommended to use this annotation with class scope, not with method scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550243a4dac3a46bc4cdbe3e99fc05a40939e76f" translate="yes" xml:space="preserve">
          <source>If any of the aforementioned assumptions is not fulfilled or if &lt;code&gt;$actual-&amp;gt;$method($expected)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; then the assertion fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a617c8c9df3b8c8e8c129c4fab09b14a75ea97b" translate="yes" xml:space="preserve">
          <source>If provided, only the code coverage information for the specified method(s) will be considered.</source>
          <target state="translated">제공된 경우 지정된 방법에 대한 코드 적용 범위 정보 만 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="16fbee1a240e265dd28348d43eb2f90ad271aeb9" translate="yes" xml:space="preserve">
          <source>If provided, this effectively filters the code coverage report to include executed code from the referenced code parts only. This will make sure that code is only marked as covered if there are dedicated tests for it, but not if it used indirectly by the tests for a different class, thus avoiding false positives for code coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0345e64a0eaada7c41a65b899f96e3da82fe38f2" translate="yes" xml:space="preserve">
          <source>If the &lt;a href=&quot;http://suhosin.org/&quot;&gt;Suhosin&lt;/a&gt; extension is enabled, you need to allow execution of PHARs in your &lt;code&gt;php.ini&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://suhosin.org/&quot;&gt;Suhosin&lt;/a&gt; 확장이 활성화 된 경우 &lt;code&gt;php.ini&lt;/code&gt; 에서 PHAR 실행을 허용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ac3a78e2d26a1c0ae66509db29835c500490f815" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and strict mode is enabled, a large test will fail if it takes longer than 60 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForLargeTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">는 IF &lt;code&gt;PHP_Invoker&lt;/code&gt; 의 패키지가 설치 엄격한 모드가 활성화가 실행 이상 60 초 이상 걸리는 경우, 많은 테스트가 실패합니다. 이 제한 시간은 XML 구성 파일 의 &lt;code&gt;timeoutForLargeTests&lt;/code&gt; 속성을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6cb2208bcb217745f45255e0078c63ac7056759" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and strict mode is enabled, a medium test will fail if it takes longer than 10 seconds to execute. This timeout is configurable via the &lt;code&gt;timeoutForMediumTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">는 IF &lt;code&gt;PHP_Invoker&lt;/code&gt; 의 패키지가 설치 엄격한 모드가 활성화가 실행 이상 10 초 이상 걸리는 경우, 중간 테스트가 실패합니다. 이 제한 시간은 XML 구성 파일 의 &lt;code&gt;timeoutForMediumTests&lt;/code&gt; 속성을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44fbf358d83a47ca53327acca05d9da3470befaa" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PHP_Invoker&lt;/code&gt; package is installed and strict mode is enabled, a small test will fail if it takes longer than 1 second to execute. This timeout is configurable via the &lt;code&gt;timeoutForSmallTests&lt;/code&gt; attribute in the XML configuration file.</source>
          <target state="translated">는 IF &lt;code&gt;PHP_Invoker&lt;/code&gt; 의 패키지가 설치되어 있고 엄격 모드가 활성화되어 그것을 실행하기 위해 1 초 이상 걸리는 경우, 소정의 테스트가 실패합니다. 이 제한 시간은 XML 구성 파일 의 &lt;code&gt;timeoutForSmallTests&lt;/code&gt; 속성을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0609a2d5f42f47439532b5cd30ffb5a21ada8900" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;setUp()&lt;/code&gt; code differs only slightly, move the code that differs from the &lt;code&gt;setUp()&lt;/code&gt; code to the test method.</source>
          <target state="translated">IF로 &lt;code&gt;setUp()&lt;/code&gt; 의 코드는 약간 다른 코드를 이동 그 상이한 &lt;code&gt;setUp()&lt;/code&gt; 시험 방법 코드.</target>
        </trans-unit>
        <trans-unit id="5121934d7f5c0a3adc26a221cbc43fd23d8a1c7a" translate="yes" xml:space="preserve">
          <source>If the original class does declare a method named &quot;method&quot; then &lt;code&gt;$stub-&amp;gt;expects($this-&amp;gt;any())-&amp;gt;method('doSomething')-&amp;gt;willReturn('foo');&lt;/code&gt; has to be used.</source>
          <target state="translated">원래 클래스가 &quot;method&quot;라는 이름의 메소드를 선언하면 &lt;code&gt;$stub-&amp;gt;expects($this-&amp;gt;any())-&amp;gt;method('doSomething')-&amp;gt;willReturn('foo');&lt;/code&gt; 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="cd2ba1a32e33246b08c107d01283251a128f41fa" translate="yes" xml:space="preserve">
          <source>If the original class does declare a method named &amp;ldquo;method&amp;rdquo; then &lt;code&gt;$stub-&amp;gt;expects($this-&amp;gt;any())-&amp;gt;method('doSomething')-&amp;gt;willReturn('foo');&lt;/code&gt; has to be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84d0556e2a16d0aa9825512c60fc21691883ca1" translate="yes" xml:space="preserve">
          <source>If time limits based on test size are enforced then this attribute sets the timeout for all tests marked as &lt;code&gt;@large&lt;/code&gt;. If a test does not complete within its configured timeout, it will fail.</source>
          <target state="translated">테스트 크기를 기반으로 시간 제한이 적용되면이 속성은 &lt;code&gt;@large&lt;/code&gt; 로 표시된 모든 테스트의 시간 제한을 설정합니다 . 구성된 제한 시간 내에 테스트가 완료되지 않으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="2e9544d555087c4c3f04a3dca6e739bcbe05444d" translate="yes" xml:space="preserve">
          <source>If time limits based on test size are enforced then this attribute sets the timeout for all tests marked as &lt;code&gt;@medium&lt;/code&gt;. If a test does not complete within its configured timeout, it will fail.</source>
          <target state="translated">테스트 크기를 기반으로 시간 제한이 적용되면이 속성은 &lt;code&gt;@medium&lt;/code&gt; 으로 표시된 모든 테스트의 시간 제한을 설정합니다 . 구성된 제한 시간 내에 테스트가 완료되지 않으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="3c5029c91ea76171dc581bb8b0d82b4558885116" translate="yes" xml:space="preserve">
          <source>If time limits based on test size are enforced then this attribute sets the timeout for all tests not marked as &lt;code&gt;@medium&lt;/code&gt; or &lt;code&gt;@large&lt;/code&gt;. If a test does not complete within its configured timeout, it will fail.</source>
          <target state="translated">테스트 크기에 따라 시간 제한이 적용되는 경우이 속성은 &lt;code&gt;@medium&lt;/code&gt; 또는 &lt;code&gt;@large&lt;/code&gt; 로 표시되지 않은 모든 테스트에 대한 시간 제한을 설정합니다 . 구성된 제한 시간 내에 테스트가 완료되지 않으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="91913332c589f394086f4eae495d036987c318e3" translate="yes" xml:space="preserve">
          <source>If we think of a successful test as a green light and a test failure as a red light, we need an additional yellow light to mark a test as being incomplete or not yet implemented. &lt;code&gt;PHPUnit\Framework\IncompleteTest&lt;/code&gt; is a marker interface for marking an exception that is raised by a test method as the result of the test being incomplete or currently not implemented. &lt;code&gt;PHPUnit\Framework\IncompleteTestError&lt;/code&gt; is the standard implementation of this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40578e362327852b16f5d4e030f28f17c713a9fe" translate="yes" xml:space="preserve">
          <source>If we think of a successful test as a green light and a test failure as a red light, we need an additional yellow light to mark a test as being incomplete or not yet implemented. &lt;code&gt;PHPUnit_Framework_IncompleteTest&lt;/code&gt; is a marker interface for marking an exception that is raised by a test method as the result of the test being incomplete or currently not implemented. &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; is the standard implementation of this interface.</source>
          <target state="translated">성공적인 테스트를 녹색으로, 테스트 실패를 빨간색으로 생각하면 테스트가 불완전하거나 아직 구현되지 않은 것으로 표시하려면 추가 노란색 표시등이 필요합니다. &lt;code&gt;PHPUnit_Framework_IncompleteTest&lt;/code&gt; 는 테스트가 불완전하거나 현재 구현되지 않은 결과로 테스트 메소드에 의해 발생 된 예외를 표시하기위한 마커 인터페이스입니다. &lt;code&gt;PHPUnit_Framework_IncompleteTestError&lt;/code&gt; 는이 인터페이스의 표준 구현입니다.</target>
        </trans-unit>
        <trans-unit id="0b04a7ef50b6705ad3387a4f49771792bfba8b04" translate="yes" xml:space="preserve">
          <source>If you are using a persistent database (not Sqlite Memory) you can easily setup the database once with tools such as phpMyAdmin for MySQL and re-use the database for every test-run.</source>
          <target state="translated">Sqlite Memory가 아닌 영구 데이터베이스를 사용하는 경우 MySQL 용 phpMyAdmin과 같은 도구를 사용하여 데이터베이스를 한 번 쉽게 설정하고 모든 테스트 실행에 데이터베이스를 재사용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc3988d73ceead5f5ff094949488d455a4cd3b0e" translate="yes" xml:space="preserve">
          <source>If you are using libraries such as &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; or &lt;a href=&quot;http://www.propelorm.org/&quot;&gt;Propel&lt;/a&gt; you can use their APIs to create the database schema you need once before you run the tests. You can utilize &lt;a href=&quot;textui&quot;&gt;PHPUnit's Bootstrap and Configuration&lt;/a&gt; capabilities to execute this code whenever your tests are run.</source>
          <target state="translated">&lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2&lt;/a&gt; 또는 &lt;a href=&quot;http://www.propelorm.org/&quot;&gt;Propel&lt;/a&gt; 과 같은 라이브러리 를 사용하는 경우 API를 사용하여 테스트를 실행하기 전에 한 번 필요한 데이터베이스 스키마를 작성할 수 있습니다. 당신이 활용할 수 &lt;a href=&quot;textui&quot;&gt;phpunit을의 부트 스트랩 및 구성&lt;/a&gt; 하여 테스트를 실행할 때마다이 코드를 실행하는 능력을.</target>
        </trans-unit>
        <trans-unit id="fbd85995d88d253da9b429709df5718e51c7a7fb" translate="yes" xml:space="preserve">
          <source>If you are using syntax that doesn&amp;rsquo;t compile with a certain PHP Version look into the xml configuration for version dependent includes in &lt;a href=&quot;configuration#appendixes-configuration-testsuites&quot;&gt;The &amp;lt;testsuites&amp;gt; Element&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c6baffee6d2afcf8aad5989d826d5f98b0ba6e" translate="yes" xml:space="preserve">
          <source>If you are using syntax that doesn't compile with a certain PHP Version look into the xml configuration for version dependent includes in &lt;a href=&quot;appendixes.configuration#appendixes.configuration.testsuites&quot;&gt;the section called &amp;ldquo;Test Suites&amp;rdquo;&lt;/a&gt;</source>
          <target state="translated">특정 PHP 버전으로 컴파일되지 않는 구문을 사용하는 경우 &lt;a href=&quot;appendixes.configuration#appendixes.configuration.testsuites&quot;&gt;&quot;Test Suites&quot;섹션&lt;/a&gt; 에서 버전 종속 포함에 대한 xml 구성을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="e717ed3c78962a5ce2dbe7d70c1ff5e204120cc9" translate="yes" xml:space="preserve">
          <source>If you do not cache the PDO instance that is created from the TestCase &lt;code&gt;getConnection()&lt;/code&gt; method the number of connections to the database is increasing by one or more with each database test. With default configuration MySql only allows 100 concurrent connections other vendors also have maximum connection limits.</source>
          <target state="translated">TestCase &lt;code&gt;getConnection()&lt;/code&gt; 메소드 에서 작성된 PDO 인스턴스를 캐시하지 않으면 각 데이터베이스 테스트마다 데이터베이스에 대한 연결 수가 하나 이상 증가합니다. 기본 구성 MySql은 100 개의 동시 연결 만 허용하며 다른 공급 업체도 최대 연결 제한을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="da878ab70f17adab2b85d7401b55fa3e66d4072d" translate="yes" xml:space="preserve">
          <source>If you have a large fixture file you can use the DataSet Filter for white- and blacklisting of tables and columns that should be contained in a sub-dataset. This is especially handy in combination with the DB DataSet to filter the columns of the datasets.</source>
          <target state="translated">대형 조명기 파일이있는 경우 하위 데이터 세트에 포함되어야하는 테이블 및 열의 화이트리스트 및 블랙리스트에 DataSet 필터를 사용할 수 있습니다. 이는 특히 데이터 세트의 열을 필터링하기 위해 DB DataSet과 함께 사용하면 편리합니다.</target>
        </trans-unit>
        <trans-unit id="64e2b42af8dc866525a76f701d68a4d8cf78c96b" translate="yes" xml:space="preserve">
          <source>If you point the PHPUnit command-line test runner to a directory it will look for &lt;code&gt;*Test.php&lt;/code&gt; files.</source>
          <target state="translated">PHPUnit 명령 행 테스트 실행기를 디렉토리로 지정하면 &lt;code&gt;*Test.php&lt;/code&gt; 파일을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="5827cbac02873879d9e8ea8099af725de1cf16d7" translate="yes" xml:space="preserve">
          <source>If you really have a different &lt;code&gt;setUp()&lt;/code&gt;, you need a different test case class. Name the class after the difference in the setup.</source>
          <target state="translated">실제로 다른 &lt;code&gt;setUp()&lt;/code&gt; 이있는 경우 다른 테스트 케이스 클래스가 필요합니다. 설정이 다른 클래스 이름을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="5b90716b4b0e370349e18d41ffbff134abfd1578" translate="yes" xml:space="preserve">
          <source>If you see a warning while running tests that no code coverage driver is available, it means that you are using the PHP CLI binary (&lt;code&gt;php&lt;/code&gt;) and do not have Xdebug or PCOV loaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cdbe429ed87d0561a5f734b7867eb47dd59f0d4" translate="yes" xml:space="preserve">
          <source>If you want to test code that works with the Database Extension the setup is a bit more complex and you have to extend a different abstract TestCase requiring you to implement two abstract methods &lt;code&gt;getConnection()&lt;/code&gt; and &lt;code&gt;getDataSet()&lt;/code&gt;:</source>
          <target state="translated">데이터베이스 확장에서 작동하는 코드를 테스트하려면 설정이 약간 더 복잡하며 두 가지 추상 메소드 &lt;code&gt;getConnection()&lt;/code&gt; 및 &lt;code&gt;getDataSet()&lt;/code&gt; 을 구현해야하는 다른 추상 TestCase를 확장해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c15b85d3817c8daaaab47b428469c731db4aaf35" translate="yes" xml:space="preserve">
          <source>Ignore &lt;code&gt;phpunit.xml&lt;/code&gt; and &lt;code&gt;phpunit.xml.dist&lt;/code&gt; from the current working directory.</source>
          <target state="translated">현재 작업 디렉토리에서 &lt;code&gt;phpunit.xml&lt;/code&gt; 및 &lt;code&gt;phpunit.xml.dist&lt;/code&gt; 를 무시하십시오 .</target>
        </trans-unit>
        <trans-unit id="4e7559a55f03ec686890f2a5897c5f4df6589215" translate="yes" xml:space="preserve">
          <source>Ignoring Code Blocks</source>
          <target state="translated">코드 블록 무시</target>
        </trans-unit>
        <trans-unit id="deb86d630d630ac5071c48d0c476de5ac4321ebb" translate="yes" xml:space="preserve">
          <source>Implement PHPUnit\Framework\TestListener</source>
          <target state="translated">PHPUnit \ Framework \ TestListener 구현</target>
        </trans-unit>
        <trans-unit id="ca47b573b6c80926ed96a90308b4003c14ec693e" translate="yes" xml:space="preserve">
          <source>Implement PHPUnit_Framework_Test</source>
          <target state="translated">PHPUnit_Framework_Test 구현</target>
        </trans-unit>
        <trans-unit id="f5636383a86a651af0a3108cbfd54aa4831d4020" translate="yes" xml:space="preserve">
          <source>Implementing getConnection()</source>
          <target state="translated">getConnection () 구현</target>
        </trans-unit>
        <trans-unit id="77cc9d484d61150479874ce69058d89a72be1ca4" translate="yes" xml:space="preserve">
          <source>Implementing getDataSet()</source>
          <target state="translated">getDataSet () 구현</target>
        </trans-unit>
        <trans-unit id="ecaae61d95472fc3adc8b9f4f5398b1f333f15c8" translate="yes" xml:space="preserve">
          <source>Implementing your own DataSets/DataTables</source>
          <target state="translated">자신의 DataSet / DataTable 구현</target>
        </trans-unit>
        <trans-unit id="459e887ffcfbbb00dfb17877abcff53963e09b14" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;appendixes.configuration#appendixes.configuration.test-listeners&quot;&gt;the section called &amp;ldquo;Test Listeners&amp;rdquo;&lt;/a&gt; you can see how to configure PHPUnit to attach your test listener to the test execution.</source>
          <target state="translated">에서 &lt;a href=&quot;appendixes.configuration#appendixes.configuration.test-listeners&quot;&gt;&quot;테스트 리스너&quot;라는 섹션&lt;/a&gt; 에는 테스트 실행에 테스트 수신기를 연결하는 방법을 구성 phpunit을에 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6908d49e1a05d95a7f17fd675e4c97d258560dcd" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest-php&quot;&gt;Testing array operations with PHPUnit&lt;/a&gt;, the fixture was the array that is stored in the &lt;code&gt;$stack&lt;/code&gt; variable. Most of the time, though, the fixture will be more complex than a simple array, and the amount of code needed to set it up will grow accordingly. The actual content of the test gets lost in the noise of setting up the fixture. This problem gets even worse when you write several tests with similar fixtures. Without some help from the testing framework, we would have to duplicate the code that sets up the fixture for each test we write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1cc5e2aa9dfbd8d819d58c00f1c31314e983c48" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest2-php&quot;&gt;Using the @depends annotation to express dependencies&lt;/a&gt; we used the producer-consumer relationship between tests to share a fixture. This is not always desired or even possible. &lt;a href=&quot;#fixtures-examples-stacktest-php&quot;&gt;Example 4.1&lt;/a&gt; shows how we can write the tests of the &lt;code&gt;StackTest&lt;/code&gt; in such a way that not the fixture itself is reused but the code that creates it. First we declare the instance variable, &lt;code&gt;$stack&lt;/code&gt;, that we are going to use instead of a method-local variable. Then we put the creation of the &lt;code&gt;array&lt;/code&gt; fixture into the &lt;code&gt;setUp()&lt;/code&gt; method. Finally, we remove the redundant code from the test methods and use the newly introduced instance variable, &lt;code&gt;$this-&amp;gt;stack&lt;/code&gt;, instead of the method-local variable &lt;code&gt;$stack&lt;/code&gt; with the &lt;code&gt;assertSame()&lt;/code&gt; assertion method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58667d806dfe51819803613bafd29cc27fbccc15" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;Example 2.1&lt;/a&gt;, the fixture was simply the array that is stored in the &lt;code&gt;$stack&lt;/code&gt; variable. Most of the time, though, the fixture will be more complex than a simple array, and the amount of code needed to set it up will grow accordingly. The actual content of the test gets lost in the noise of setting up the fixture. This problem gets even worse when you write several tests with similar fixtures. Without some help from the testing framework, we would have to duplicate the code that sets up the fixture for each test we write.</source>
          <target state="translated">에서는 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest.php&quot;&gt;예 2.1&lt;/a&gt; , 고정구에 기억되는 배열 단순히이었다 &lt;code&gt;$stack&lt;/code&gt; 변수. 그러나 대부분의 경우 조명기는 단순한 배열보다 복잡하며이를 설정하는 데 필요한 코드의 양이 증가합니다. 고정 장치를 설치하는 소음으로 인해 테스트의 실제 내용이 손실됩니다. 유사한 고정구로 여러 테스트를 작성하면이 문제가 더욱 악화됩니다. 테스트 프레임 워크의 도움이 없다면 우리가 작성하는 각 테스트에 대한 조명기를 설정하는 코드를 복제해야합니다.</target>
        </trans-unit>
        <trans-unit id="14decf5c3b38532c40295f8ca2e1e20860268459" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; we used the producer-consumer relationship between tests to share a fixture. This is not always desired or even possible. &lt;a href=&quot;fixtures#fixtures.examples.StackTest.php&quot;&gt;Example 4.1&lt;/a&gt; shows how we can write the tests of the &lt;code&gt;StackTest&lt;/code&gt; in such a way that not the fixture itself is reused but the code that creates it. First we declare the instance variable, &lt;code&gt;$stack&lt;/code&gt;, that we are going to use instead of a method-local variable. Then we put the creation of the &lt;code&gt;array&lt;/code&gt; fixture into the &lt;code&gt;setUp()&lt;/code&gt; method. Finally, we remove the redundant code from the test methods and use the newly introduced instance variable, &lt;code&gt;$this-&amp;gt;stack&lt;/code&gt;, instead of the method-local variable &lt;code&gt;$stack&lt;/code&gt; with the &lt;code&gt;assertEquals()&lt;/code&gt; assertion method.</source>
          <target state="translated">&lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; 에서는 테스트 간의 생산자-소비자 관계를 사용하여 조명기를 공유했습니다. 이것이 항상 바람직하거나 가능한 것은 아닙니다. &lt;a href=&quot;fixtures#fixtures.examples.StackTest.php&quot;&gt;Example 4.1&lt;/a&gt; 에서는 조명기 자체를 재사용하지 않고 그것을 생성하는 코드로 &lt;code&gt;StackTest&lt;/code&gt; 의 테스트를 작성하는 방법을 보여줍니다 . 먼저 메소드 로컬 변수 대신 사용할 인스턴스 변수 &lt;code&gt;$stack&lt;/code&gt; 을 선언합니다 . 그런 다음 &lt;code&gt;array&lt;/code&gt; 픽스쳐 생성을 &lt;code&gt;setUp()&lt;/code&gt; 메소드에 넣습니다 . 마지막으로 테스트 메소드에서 중복 코드를 제거하고 메소드 로컬 변수 &lt;code&gt;$stack&lt;/code&gt; 대신 새로 도입 된 인스턴스 변수 &lt;code&gt;$this-&amp;gt;stack&lt;/code&gt; 을 사용 합니다. &lt;code&gt;assertEquals()&lt;/code&gt; 어설 션 메소드.</target>
        </trans-unit>
        <trans-unit id="53ca303e4e625f4364d66677865c67cf67682aa8" translate="yes" xml:space="preserve">
          <source>In PHP, global variables work like this:</source>
          <target state="translated">PHP에서 전역 변수는 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="0cc202b4587b64cc286a81dca083c1e300a547ed" translate="yes" xml:space="preserve">
          <source>In addition to being helpful for persons reading the code, this annotation is useful in strict coverage mode where unintentionally covered code will cause a test to fail. See &lt;a href=&quot;risky-tests#risky-tests-unintentionally-covered-code&quot;&gt;Unintentionally Covered Code&lt;/a&gt; for more information regarding strict coverage mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d1a7ad9ae49b9a17a8a02e051be1c0430991d33" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;expectException()&lt;/code&gt; method the &lt;code&gt;expectExceptionCode()&lt;/code&gt;, &lt;code&gt;expectExceptionMessage()&lt;/code&gt;, and &lt;code&gt;expectExceptionMessageMatches()&lt;/code&gt; methods exist to set up expectations for exceptions raised by the code under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902150882163cc266a5339209c00c212034c0a32" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;expectException()&lt;/code&gt; method the &lt;code&gt;expectExceptionCode()&lt;/code&gt;, &lt;code&gt;expectExceptionMessage()&lt;/code&gt;, and &lt;code&gt;expectExceptionMessageRegExp()&lt;/code&gt; methods exist to set up expectations for exceptions raised by the code under test.</source>
          <target state="translated">또한받는 &lt;code&gt;expectException()&lt;/code&gt; 메소드 &lt;code&gt;expectExceptionCode()&lt;/code&gt; , &lt;code&gt;expectExceptionMessage()&lt;/code&gt; 및 &lt;code&gt;expectExceptionMessageRegExp()&lt;/code&gt; 메소드는 테스트중인 코드 예외 발생에 대한 기대를 설정하기 위해 존재한다.</target>
        </trans-unit>
        <trans-unit id="a72bf60563517809d7a57f673ba7d377c4d69933" translate="yes" xml:space="preserve">
          <source>In addition to the above methods it is also possible to use the &lt;code&gt;@requires&lt;/code&gt; annotation to express common preconditions for a test case.</source>
          <target state="translated">위의 방법 외에도 &lt;code&gt;@requires&lt;/code&gt; 어노테이션을 사용하여 테스트 케이스의 공통 전제 조건을 표현할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d8668ef60f9a27aa3e62b60579dab49b9f0f5ab3" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;setUpBeforeClass()&lt;/code&gt; and &lt;code&gt;tearDownAfterClass()&lt;/code&gt; template methods are called before the first test of the test case class is run and after the last test of the test case class is run, respectively.</source>
          <target state="translated">또한 &lt;code&gt;setUpBeforeClass()&lt;/code&gt; 및 &lt;code&gt;tearDownAfterClass()&lt;/code&gt; 템플리트 메소드는 테스트 케이스 클래스의 첫 번째 테스트가 실행되기 전에 그리고 테스트 케이스 클래스의 마지막 테스트가 각각 실행 된 후에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2f2cf1ecf2d71da437d5f329c42e22a00bea44cc" translate="yes" xml:space="preserve">
          <source>In computer science, code coverage is a measure used to describe the degree to which the source code of a program is tested by a particular test suite. A program with high code coverage has been more thoroughly tested and has a lower chance of containing software bugs than a program with low code coverage.</source>
          <target state="translated">컴퓨터 과학에서 코드 범위는 특정 테스트 스위트에서 프로그램의 소스 코드를 테스트하는 정도를 설명하는 데 사용되는 측정입니다. 코드 범위가 높은 프로그램은 코드 범위가 낮은 프로그램보다 철저하게 테스트되었으며 소프트웨어 버그가 포함될 가능성이 낮습니다.</target>
        </trans-unit>
        <trans-unit id="b201af5837dcdc4f4092522e3ce93c594110f1f4" translate="yes" xml:space="preserve">
          <source>In conclusion I can only advise using the Flat XML datasets if you do not need NULL values.</source>
          <target state="translated">결론적으로 NULL 값이 필요하지 않은 경우 Flat XML 데이터 세트를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7e1e7b3fff10585a108be2959c6f038d1de47ebf" translate="yes" xml:space="preserve">
          <source>In fact, you can even use global function wrappers such as &lt;code&gt;assertTrue()&lt;/code&gt; in any context (including classes that extend &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt;) when you (manually) include the &lt;code&gt;src/Framework/Assert/Functions.php&lt;/code&gt; sourcecode file that comes with PHPUnit.</source>
          <target state="translated">사실, &lt;code&gt;src/Framework/Assert/Functions.php&lt;/code&gt; 소스 코드 파일을 수동으로 포함 할 때 어떤 컨텍스트 (예 : &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 확장 클래스 포함 &lt;code&gt;assertTrue()&lt;/code&gt; 에서 assertTrue () 와 같은 전역 함수 래퍼를 사용할 수도 있습니다. PHPUnit.</target>
        </trans-unit>
        <trans-unit id="37df62d41354e44aa49e4f8f928a9bf608f06008" translate="yes" xml:space="preserve">
          <source>In his book on xUnit Test Patterns Gerard Meszaros lists the four stages of a unit-test:</source>
          <target state="translated">xUnit 테스트 패턴에 관한 그의 저서에서 Gerard Meszaros는 단위 테스트의 네 단계를 열거합니다.</target>
        </trans-unit>
        <trans-unit id="71fb338773577ce2f9c8cf729c583dd2c69c27b2" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; methods we have to ensure that the directory does not exist before and after the test.</source>
          <target state="translated">에서 &lt;code&gt;setUp()&lt;/code&gt; 과 &lt;code&gt;tearDown()&lt;/code&gt; 메소드 우리는 디렉토리가 시험 전후에 존재하지 않도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="9f0652f424e9df01292afb2d15b61255dcc2f58f" translate="yes" xml:space="preserve">
          <source>In the example above, the first test, &lt;code&gt;testEmpty()&lt;/code&gt;, creates a new array and asserts that it is empty. The test then returns the fixture as its result. The second test, &lt;code&gt;testPush()&lt;/code&gt;, depends on &lt;code&gt;testEmpty()&lt;/code&gt; and is passed the result of that depended-upon test as its argument. Finally, &lt;code&gt;testPop()&lt;/code&gt; depends upon &lt;code&gt;testPush()&lt;/code&gt;.</source>
          <target state="translated">위의 예제에서 첫 번째 테스트 인 &lt;code&gt;testEmpty()&lt;/code&gt; 는 새 배열을 만들고 비어 있다고 주장합니다. 그런 다음 테스트는 조명기를 결과로 반환합니다. 두 번째 시험 &lt;code&gt;testPush()&lt;/code&gt; 에 의존 &lt;code&gt;testEmpty()&lt;/code&gt; , 그 결과를 전달에 의존-인수로 시험. 마지막으로, &lt;code&gt;testPop()&lt;/code&gt; 에 의존 &lt;code&gt;testPush()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9cacc17f261dfb01db3af8321341b873020e7e15" translate="yes" xml:space="preserve">
          <source>In the example above, the tests from the &lt;code&gt;tests/unit&lt;/code&gt; directory are only added to the test suite if the PHP version is at least 8.0.0. The &lt;code&gt;phpVersionOperator&lt;/code&gt; attribute is optional and defaults to &lt;code&gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a109e63335a97e1bff05a59cbc5beb4e798419b3" translate="yes" xml:space="preserve">
          <source>In the example shown above, the &lt;code&gt;C::m()&lt;/code&gt; method has a return type declaration indicating that this method returns an object of type &lt;code&gt;D&lt;/code&gt;. When a test double for &lt;code&gt;C&lt;/code&gt; is created and no return value is configured for &lt;code&gt;m()&lt;/code&gt; using &lt;code&gt;willReturn()&lt;/code&gt; (see above), for instance, then when &lt;code&gt;m()&lt;/code&gt; is invoked PHPUnit will automatically create a test double for &lt;code&gt;D&lt;/code&gt; to be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abf16e328dca5730f6d1c2465370767be498d73" translate="yes" xml:space="preserve">
          <source>In the examples so far we have been returning simple values using &lt;code&gt;willReturn($value)&lt;/code&gt;. This short syntax is the same as &lt;code&gt;will($this-&amp;gt;returnValue($value))&lt;/code&gt;. We can use variations on this longer syntax to achieve more complex stubbing behaviour.</source>
          <target state="translated">지금까지의 예제에서는 &lt;code&gt;willReturn($value)&lt;/code&gt; 사용하여 간단한 값을 반환했습니다 . 이 짧은 구문은 &lt;code&gt;will($this-&amp;gt;returnValue($value))&lt;/code&gt; 합니다. 이 더 긴 구문에 변형을 사용하여 더 복잡한 스터 빙 동작을 달성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5244528626be773ff2f80cfc1621e8ff798d77ca" translate="yes" xml:space="preserve">
          <source>In the previous example we create an in-memory Sqlite connection and pass it to the &lt;code&gt;createDefaultDBConnection&lt;/code&gt; method which wraps the PDO instance and the second parameter (the database-name) in a very simple abstraction layer for database connections of the type &lt;code&gt;PHPUnit_Extensions_Database_DB_IDatabaseConnection&lt;/code&gt;.</source>
          <target state="translated">이전 예제에서 우리는 인 메모리 Sqlite 연결을 생성하고이를 &lt;code&gt;PHPUnit_Extensions_Database_DB_IDatabaseConnection&lt;/code&gt; 유형의 데이터베이스 연결을 위해 매우 간단한 추상화 계층에서 PDO 인스턴스와 두 번째 매개 변수 (database-name)를 랩핑 하는 &lt;code&gt;createDefaultDBConnection&lt;/code&gt; 메소드에 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="5b5250c5bfb9b04e27c80e7e691b6846638f95be" translate="yes" xml:space="preserve">
          <source>In the scope of a function or method, you may access the global variable &lt;code&gt;$foo&lt;/code&gt; by either directly accessing &lt;code&gt;$GLOBALS['foo']&lt;/code&gt; or by using &lt;code&gt;global $foo;&lt;/code&gt; to create a local variable with a reference to the global variable.</source>
          <target state="translated">함수 또는 메소드의 범위에서 &lt;code&gt;$GLOBALS['foo']&lt;/code&gt; 직접 액세스 하거나 &lt;code&gt;global $foo;&lt;/code&gt; 를 사용하여 전역 변수 &lt;code&gt;$foo&lt;/code&gt; 에 액세스 할 수 있습니다 . 전역 변수를 참조하여 지역 변수를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="10ef912533cbdf9835d2d66bd0c9841fce5c9258" translate="yes" xml:space="preserve">
          <source>In this case the second entry is posted anonymously. However, this leads to a serious problem with column recognition. During dataset equality assertions each dataset has to specify what columns a table holds. If an attribute is NULL for all the rows of a data-table, how would the Database Extension know that the column should be part of the table?</source>
          <target state="translated">이 경우 두 번째 항목이 익명으로 게시됩니다. 그러나 이로 인해 열 인식에 심각한 문제가 발생합니다. 데이터 집합 동일성 어설 션 동안 각 데이터 집합은 테이블이 보유하는 열을 지정해야합니다. 데이터 테이블의 모든 행에 대해 속성이 NULL 인 경우 데이터베이스 확장은 열이 테이블의 일부 여야한다는 것을 어떻게 알 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="059342034707d18c7809b882a57ba7cdcd0d4f6d" translate="yes" xml:space="preserve">
          <source>In this chapter you will learn all about PHPUnit&amp;rsquo;s code coverage functionality that provides an insight into what parts of the production code are executed when the tests are run. It makes use of the &lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage&quot;&gt;php-code-coverage&lt;/a&gt; component, which in turn leverages the code coverage functionality provided by the &lt;a href=&quot;https://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; or &lt;a href=&quot;https://github.com/krakjoe/pcov&quot;&gt;PCOV&lt;/a&gt; extensions for PHP or by &lt;a href=&quot;https://www.php.net/manual/en/book.phpdbg.php&quot;&gt;PHPDBG&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06e9e6c18e73984c7902792c482ba21277c13d7" translate="yes" xml:space="preserve">
          <source>In this chapter you will learn all about PHPUnit's code coverage functionality that provides an insight into what parts of the production code are executed when the tests are run. It makes use of the &lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage&quot;&gt;PHP_CodeCoverage&lt;/a&gt; component, which in turn leverages the code coverage functionality provided by the &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; extension for PHP.</source>
          <target state="translated">이 장에서는 테스트가 실행될 때 프로덕션 코드의 어떤 부분이 실행되는지에 대한 통찰력을 제공하는 PHPUnit의 코드 적용 기능에 대해 모두 배웁니다. 그것은 사용하게 &lt;a href=&quot;https://github.com/sebastianbergmann/php-code-coverage&quot;&gt;PHP_CodeCoverage의&lt;/a&gt; 회전에 의해 제공되는 코드 검사 기능을 활용하여 구성 요소, &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug는의&lt;/a&gt; PHP에 대한 확장.</target>
        </trans-unit>
        <trans-unit id="1d9f3225aee3bc235926c60166a963f1a0ecc8ca" translate="yes" xml:space="preserve">
          <source>In this example only one of the array values differs and the other values are shown to provide context on where the error occurred.</source>
          <target state="translated">이 예에서는 배열 값 중 하나만 다르고 다른 값은 오류가 발생한 위치에 대한 컨텍스트를 제공하도록 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bbc5c2aa39abe9475cebea0eb1018adc45506e0b" translate="yes" xml:space="preserve">
          <source>In this example the difference in the first index between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;'1'&lt;/code&gt; is reported even though &lt;code&gt;assertEquals()&lt;/code&gt; considers the values as a match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15b4accfaa967bde7b380d158497e5eb028526d" translate="yes" xml:space="preserve">
          <source>In this example the difference in the first index between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;'1'&lt;/code&gt; is reported even though assertEquals considers the values as a match.</source>
          <target state="translated">이 예에서는 assertEquals가 값을 일치하는 것으로 간주하더라도 &lt;code&gt;1&lt;/code&gt; 과 &lt;code&gt;'1'&lt;/code&gt; 사이의 첫 번째 인덱스 차이 가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="7bbd27931ac56240ceed04ae20ef350f16f93c1f" translate="yes" xml:space="preserve">
          <source>In turn, if you specify only a subset of the table columns in the Flat XML dataset all the omitted values are set to their default values. This will lead to errors if one of the omitted columns is defined as &amp;ldquo;NOT NULL DEFAULT NULL&amp;rdquo;.</source>
          <target state="translated">또한 플랫 XML 데이터 세트에서 테이블 열의 서브 세트 만 지정하면 생략 된 모든 값이 기본값으로 설정됩니다. 생략 된 열 중 하나가 &quot;NOT NULL DEFAULT NULL&quot;로 정의 된 경우 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="42e70faea283110f3781aa15c02bcf5a1401b5ba" translate="yes" xml:space="preserve">
          <source>In your test use a special assertion called &lt;code&gt;assertDataSetsEqual()&lt;/code&gt; for verification purposes, however, this is entirely optional. This feature will be explained in the section &amp;ldquo;Database Assertions&amp;rdquo;.</source>
          <target state="translated">테스트 에서 검증 목적으로 &lt;code&gt;assertDataSetsEqual()&lt;/code&gt; 이라는 특수 어설 션을 사용 하지만 이는 전적으로 선택 사항입니다. 이 기능은&amp;ldquo;데이터베이스 어설 션&amp;rdquo;섹션에서 설명합니다.</target>
        </trans-unit>
        <trans-unit id="3304d1c592fa3c165cec41f7252abbeea911ace8" translate="yes" xml:space="preserve">
          <source>Including Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be7d301fd25bcde01562b91d2a5806ac84e156c2" translate="yes" xml:space="preserve">
          <source>Incomplete Tests</source>
          <target state="translated">불완전한 테스트</target>
        </trans-unit>
        <trans-unit id="70770c735255bb6dc6cb7565fb84de6440371c15" translate="yes" xml:space="preserve">
          <source>Incomplete and Skipped Tests</source>
          <target state="translated">불완전하고 건너 뛴 테스트</target>
        </trans-unit>
        <trans-unit id="0df3ba3bcc5b6b38249ab44a3542a6757b785b93" translate="yes" xml:space="preserve">
          <source>Indicates that a test should be run in a separate PHP process.</source>
          <target state="translated">테스트가 별도의 PHP 프로세스에서 실행되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9437ffff72a85ee18d9dfa0bfb75630a99d55592" translate="yes" xml:space="preserve">
          <source>Indicates that all tests in a test class should be run in a separate PHP process.</source>
          <target state="translated">테스트 클래스의 모든 테스트는 별도의 PHP 프로세스에서 실행되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="80bc394d0a79d7263f0202f63a6e0e689c57c595" translate="yes" xml:space="preserve">
          <source>Inserting the rows required for the test into these tables</source>
          <target state="translated">테스트에 필요한 행을이 테이블에 삽입</target>
        </trans-unit>
        <trans-unit id="7c67da56927c1201f863fd1a29ccbd173201dd65" translate="yes" xml:space="preserve">
          <source>Inside the test methods, assertion methods such as &lt;code&gt;assertEquals()&lt;/code&gt; (see &lt;a href=&quot;appendixes.assertions&quot;&gt;Appendix A&lt;/a&gt;) are used to assert that an actual value matches an expected value.</source>
          <target state="translated">테스트 메소드 내에서 &lt;code&gt;assertEquals()&lt;/code&gt; ( &lt;a href=&quot;appendixes.assertions&quot;&gt;부록 A&lt;/a&gt; 참조 ) 와 같은 어설 션 메소드 는 실제 값이 예상 값과 일치하는지 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42c0c6d5e7556d06ca25047a9c6cd56b4fd170d6" translate="yes" xml:space="preserve">
          <source>Inside the test methods, assertion methods such as &lt;code&gt;assertSame()&lt;/code&gt; (see &lt;a href=&quot;assertions#appendixes-assertions&quot;&gt;Assertions&lt;/a&gt;) are used to assert that an actual value matches an expected value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37dc4e9fc83d7de94ca8bd5d1c15f633ad61c811" translate="yes" xml:space="preserve">
          <source>Installing PHPUnit</source>
          <target state="translated">PHPUnit 설치</target>
        </trans-unit>
        <trans-unit id="006fb3d6eebcc50a7aabb67b8cea8dce1f78144d" translate="yes" xml:space="preserve">
          <source>Instead of implementing a method for use with &lt;code&gt;@dataProvider&lt;/code&gt;, you can define a data set using the &lt;code&gt;@testWith&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ef3518ad2b1fd553d4352aa3348ce56ffaabfb" translate="yes" xml:space="preserve">
          <source>Instead of returning a value, a stubbed method can also raise an exception. &lt;a href=&quot;#test-doubles-stubs-examples-stubtest8-php&quot;&gt;Example 8.10&lt;/a&gt; shows how to use &lt;code&gt;throwException()&lt;/code&gt; to do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337fd037cee63389be2aef1c79a8a8956a173d45" translate="yes" xml:space="preserve">
          <source>Instead of returning a value, a stubbed method can also raise an exception. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest8.php&quot;&gt;Example 9.9&lt;/a&gt; shows how to use &lt;code&gt;throwException()&lt;/code&gt; to do this.</source>
          <target state="translated">스텁 된 메소드는 값을 리턴하는 대신 예외를 발생시킬 수 있습니다. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest8.php&quot;&gt;Example 9.9&lt;/a&gt; 에서는 &lt;code&gt;throwException()&lt;/code&gt; 을 사용 하여이를 수행 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="0f1d12a7b7f1bf6db918d10619e94104edd44a3d" translate="yes" xml:space="preserve">
          <source>Instead, PHPUnit should be managed as a project-local dependency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45279b4cd769444df64537dbe9cceeddaef726b8" translate="yes" xml:space="preserve">
          <source>It cannot be emphasized enough that sharing fixtures between tests reduces the value of the tests. The underlying design problem is that objects are not loosely coupled. You will achieve better results solving the underlying design problem and then writing tests using stubs (see &lt;a href=&quot;test-doubles&quot;&gt;Chapter 9&lt;/a&gt;), than by creating dependencies between tests at runtime and ignoring the opportunity to improve your design.</source>
          <target state="translated">테스트간에 고정구를 공유하면 테스트의 가치가 줄어드는 것으로 충분히 강조 할 수 없습니다. 근본적인 디자인 문제는 객체가 느슨하게 결합되지 않는다는 것입니다. 런타임시 테스트간에 종속성을 생성하고 디자인을 개선 할 수있는 기회를 무시하는 것보다 기본 디자인 문제를 해결 한 다음 스텁을 사용하여 테스트를 작성하는 ( &lt;a href=&quot;test-doubles&quot;&gt;9 장&lt;/a&gt; 참조 ) 더 나은 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a6b069f9fb4355a738054ac663530de852e2d12" translate="yes" xml:space="preserve">
          <source>It cannot be emphasized enough that sharing fixtures between tests reduces the value of the tests. The underlying design problem is that objects are not loosely coupled. You will achieve better results solving the underlying design problem and then writing tests using stubs (see &lt;a href=&quot;test-doubles#test-doubles&quot;&gt;Test Doubles&lt;/a&gt;), than by creating dependencies between tests at runtime and ignoring the opportunity to improve your design.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="609d23c8505e45bc7e6836ff6d4c8355e4ab0679" translate="yes" xml:space="preserve">
          <source>It is a bad practice to use &lt;code&gt;assertEquals()&lt;/code&gt; (and its inverse, &lt;code&gt;assertNotEquals()&lt;/code&gt;) on objects without registering a custom comparator that customizes how objects are compared. Unfortunately, though, implementing custom comparators for each and every object you want to assert in your tests is inconvenient at best.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="287bab143ee6d6de8b35998c615282d36015cbef" translate="yes" xml:space="preserve">
          <source>It is a common practice to make the PHAR executable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="236b7fb3a5e06343ca0a21b8a74c3a457895df0c" translate="yes" xml:space="preserve">
          <source>It is also possible to specify that a test should not cover &lt;em&gt;any&lt;/em&gt; method by using the &lt;code&gt;@coversNothing&lt;/code&gt; annotation (see &lt;a href=&quot;annotations#appendixes-annotations-coversnothing&quot;&gt;@coversNothing&lt;/a&gt;). This can be helpful when writing integration tests to make sure you only generate code coverage with unit tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b0045a682ab642862c8c3942ba0d4c4394807e1" translate="yes" xml:space="preserve">
          <source>It is also possible to specify that a test should not cover &lt;em&gt;any&lt;/em&gt; method by using the &lt;code&gt;@coversNothing&lt;/code&gt; annotation (see &lt;a href=&quot;appendixes.annotations#appendixes.annotations.coversNothing&quot;&gt;the section called &amp;ldquo;@coversNothing&amp;rdquo;&lt;/a&gt;). This can be helpful when writing integration tests to make sure you only generate code coverage with unit tests.</source>
          <target state="translated">&lt;code&gt;@coversNothing&lt;/code&gt; 어노테이션 을 사용하여 테스트가 메소드를 포함 &lt;em&gt;하지&lt;/em&gt; 않도록 지정할 수도 있습니다 ( &lt;a href=&quot;appendixes.annotations#appendixes.annotations.coversNothing&quot;&gt;&quot;@coversNothing&quot;섹션&lt;/a&gt; 참조 ). 이는 단위 테스트로 코드 적용 범위 만 생성하도록 통합 테스트를 작성할 때 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3313cdedfd3f8d3e23f9f66942bcfb3c63071005" translate="yes" xml:space="preserve">
          <source>It is mandatory to configure a &lt;em&gt;whitelist&lt;/em&gt; for telling PHPUnit which sourcecode files to include in the code coverage report. This can either be done using the &lt;code&gt;--whitelist&lt;/code&gt; commandline option or via the configuration file (see &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;the section called &amp;ldquo;Whitelisting Files for Code Coverage&amp;rdquo;&lt;/a&gt;).</source>
          <target state="translated">코드 커버리지 보고서에 포함 할 소스 코드 파일을 PHPUnit에 알리기 위한 &lt;em&gt;화이트리스트&lt;/em&gt; 를 구성해야합니다 . &lt;code&gt;--whitelist&lt;/code&gt; 명령 줄 옵션을 사용하거나 구성 파일을 사용하여 수행 할 수 있습니다 ( &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;&amp;ldquo;코드 적용을위한 파일 허용 목록&amp;rdquo;섹션&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="9732e0a3b70a6c05cecd69f0f5f9e1cacf1c2a83" translate="yes" xml:space="preserve">
          <source>It is mandatory to configure a filter for telling PHPUnit which sourcecode files to include in the code coverage report. This can either be done using the &lt;code&gt;--coverage-filter&lt;/code&gt;&lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; option or via the configuration file (see &lt;a href=&quot;configuration#appendixes-configuration-coverage-include&quot;&gt;The &amp;lt;include&amp;gt; Element&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd08a074839cd0e707325227ff3b7036784b670c" translate="yes" xml:space="preserve">
          <source>It is often helpful to check if a table contains a specific amount of rows. You can easily achieve this without additional glue code using the Connection API. Say we wanted to check that after insertion of a row into our guestbook we not only have the two initial entries that have accompanied us in all the previous examples, but a third one:</source>
          <target state="translated">테이블에 특정 양의 행이 포함되어 있는지 확인하는 것이 종종 도움이됩니다. Connection API를 사용하여 추가 글루 코드없이 쉽게 달성 할 수 있습니다. 방명록에 행을 삽입 한 후 앞의 모든 예에서 두 가지 초기 항목뿐만 아니라 세 번째 항목이 있는지 확인하고 싶다고 가정 해보십시오.</target>
        </trans-unit>
        <trans-unit id="a0ba411c3c191416be02d15477cd0197e81935a0" translate="yes" xml:space="preserve">
          <source>It may be prudent to create a shell script to manage PHPUnit installation that verifies the GnuPG signature before running your test suite. For example:</source>
          <target state="translated">테스트 스위트를 실행하기 전에 GnuPG 서명을 확인하는 PHPUnit 설치를 관리하기위한 쉘 스크립트를 작성하는 것이 현명 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4382dafeb88d92e645f4cdd85b25e0a82f82d1b4" translate="yes" xml:space="preserve">
          <source>It processes all classes that are declared at the time a test starts, not only the test class itself. It only applies to static class properties, not static variables within functions.</source>
          <target state="translated">테스트 클래스 자체뿐만 아니라 테스트가 시작될 때 선언 된 모든 클래스를 처리합니다. 함수 내 정적 변수가 아닌 정적 클래스 속성에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="18d66eebd5fbfaf6eadbc566cff4e9e38d18f776" translate="yes" xml:space="preserve">
          <source>Let us take a look at the agile documentation generated for a &lt;code&gt;BankAccount&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;BankAccount&lt;/code&gt; 클래스에 대해 생성 된 민첩한 문서를 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="d6c5cc8cb7edffef1145a26dba0e420dc3f5b2a2" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s take a look at the command-line test runner&amp;rsquo;s options in the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9269e498b8067da9bc3ff0b277d90c6a1647eb84" translate="yes" xml:space="preserve">
          <source>Let's take a look at the command-line test runner's options in the following code:</source>
          <target state="translated">다음 코드에서 명령 행 테스트 실행기의 옵션을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="23445c8041a703ab60b3722a8f0af3b2b56c11e3" translate="yes" xml:space="preserve">
          <source>Lets take a look at the test suite of the &lt;a href=&quot;http://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann/money&lt;/a&gt; library. Looking at this project&amp;rsquo;s directory structure, we see that the test case classes in the &lt;code&gt;tests&lt;/code&gt; directory mirror the package and class structure of the System Under Test (SUT) in the &lt;code&gt;src&lt;/code&gt; directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9263badbd240c1f1879c25bba8d7d26d297acb3e" translate="yes" xml:space="preserve">
          <source>Lets take a look at the test suite of the &lt;a href=&quot;http://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann/money&lt;/a&gt; library. Looking at this project's directory structure, we see that the test case classes in the &lt;code&gt;tests&lt;/code&gt; directory mirror the package and class structure of the System Under Test (SUT) in the &lt;code&gt;src&lt;/code&gt; directory:</source>
          <target state="translated">&lt;a href=&quot;http://github.com/sebastianbergmann/money/&quot;&gt;sebastianbergmann / money&lt;/a&gt; 라이브러리 의 테스트 스위트를 살펴 보겠습니다 . 이 프로젝트의 디렉토리 구조를 살펴보면, &lt;code&gt;tests&lt;/code&gt; 디렉토리 의 테스트 케이스 클래스 가 &lt;code&gt;src&lt;/code&gt; 디렉토리 에있는 테스트 대상 시스템 (SUT)의 패키지 및 클래스 구조를 반영 함을 알 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f39e8b9b8efea94fecc83043ad120c1c32a555d" translate="yes" xml:space="preserve">
          <source>Licensed under the Creative Commons Attribution 3.0 Unported License.</source>
          <target state="translated">Creative Commons Attribution 3.0 Unported License에 따라 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="71e5533db97f794cd7929c06bdabeb78e26920ca" translate="yes" xml:space="preserve">
          <source>Limitation: Automatic verification of expectations</source>
          <target state="translated">제한 사항 : 기대치 자동 확인</target>
        </trans-unit>
        <trans-unit id="a023518cefcc455d090c645033757118928f81c3" translate="yes" xml:space="preserve">
          <source>Limitation: Methods named &quot;method&quot;</source>
          <target state="translated">제한 사항 : &quot;method&quot;라는 메소드</target>
        </trans-unit>
        <trans-unit id="94e974866dd0117d5ee5dc18eceee5e01cefb020" translate="yes" xml:space="preserve">
          <source>Limitation: Methods named &amp;ldquo;method&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="960be94318775d8f6e5f185a13d88c42aa39a01f" translate="yes" xml:space="preserve">
          <source>Limitation: final, private, and static methods</source>
          <target state="translated">제한 사항 : 최종, 개인 및 정적 메소드</target>
        </trans-unit>
        <trans-unit id="620ee66f3cb761f277d81f735fde1764b8fc1a38" translate="yes" xml:space="preserve">
          <source>Line Coverage</source>
          <target state="translated">라인 범위</target>
        </trans-unit>
        <trans-unit id="1b2689ec5483c6e1cd2bf126e0f927a72b911c8a" translate="yes" xml:space="preserve">
          <source>List available test groups.</source>
          <target state="translated">사용 가능한 테스트 그룹을 나열하십시오.</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="109b4017ee11f0a03112a188ef1036525a53b900" translate="yes" xml:space="preserve">
          <source>Logical AND.</source>
          <target state="translated">논리 AND.</target>
        </trans-unit>
        <trans-unit id="4438cc4a0ab4f5f373d93285cd0729e947339a6c" translate="yes" xml:space="preserve">
          <source>Logical NOT.</source>
          <target state="translated">논리적 NOT.</target>
        </trans-unit>
        <trans-unit id="07dfdb18def1b141fb32dd8352fb998a138625d3" translate="yes" xml:space="preserve">
          <source>Logical OR.</source>
          <target state="translated">논리 OR.</target>
        </trans-unit>
        <trans-unit id="19864bb51d5ab73176b5b4491f11be6e836bcdce" translate="yes" xml:space="preserve">
          <source>Logical XOR.</source>
          <target state="translated">논리 XOR</target>
        </trans-unit>
        <trans-unit id="249fcdff9a41d923f454969935e006889e30cf2c" translate="yes" xml:space="preserve">
          <source>Make sure you have the PHP extension &lt;code&gt;pdo&lt;/code&gt; and database specific extensions such as &lt;code&gt;pdo_mysql&lt;/code&gt; installed. Otherwise the examples shown below will not work.</source>
          <target state="translated">PHP 확장 &lt;code&gt;pdo&lt;/code&gt; 및 &lt;code&gt;pdo_mysql&lt;/code&gt; 과 같은 데이터베이스 특정 확장이 설치되어 있는지 확인하십시오 . 그렇지 않으면 아래에 표시된 예제가 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d31bf2f6d625ceecd6527a9833f6c2c28f94b54" translate="yes" xml:space="preserve">
          <source>Manually verifying the authenticity and integrity of a PHPUnit PHAR using GPG is tedious. This is why PHIVE, the PHAR Installation and Verification Environment, was created. You can learn about PHIVE on its &lt;a href=&quot;https://phar.io/&quot;&gt;website&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be344718d0d1ba60ff76beb79b17414a6e8fa614" translate="yes" xml:space="preserve">
          <source>Many beginner and intermediate unit testing examples in any programming language suggest that it is perfectly easy to test your application's logic with simple tests. For database-centric applications this is far away from the reality. Start using WordPress, TYPO3 or Symfony with Doctrine or Propel, for example, and you will easily experience considerable problems with PHPUnit: just because the database is so tightly coupled to these libraries.</source>
          <target state="translated">모든 프로그래밍 언어의 초급 및 중급 단위 테스트 예제는 간단한 테스트를 통해 응용 프로그램의 논리를 완벽하게 테스트 할 수 있음을 제안합니다. 데이터베이스 중심 애플리케이션의 경우 현실과 거리가 멀다. 예를 들어 Doctrine 또는 Propel과 함께 WordPress, TYPO3 또는 Symfony를 사용하기 시작하면 데이터베이스가 이러한 라이브러리에 매우 밀접하게 연결되어 있기 때문에 PHPUnit에서 상당한 문제를 쉽게 경험할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d930f43e92f1db17bf6472556887a67461af11f1" translate="yes" xml:space="preserve">
          <source>Marks the current test as incomplete using &lt;code&gt;$message&lt;/code&gt; as an explanatory message.</source>
          <target state="translated">&lt;code&gt;$message&lt;/code&gt; 를 설명 메시지로 사용하여 현재 테스트가 완료되지 않은 것으로 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="23759901ddbc9da02d7e5172d246a36adb990ed4" translate="yes" xml:space="preserve">
          <source>Marks the current test as incomplete.</source>
          <target state="translated">현재 테스트를 불완전한 것으로 표시합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
