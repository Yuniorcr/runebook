<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="phpunit">
    <body>
      <group id="phpunit">
        <trans-unit id="0834c2f1f0aac1f1716e292bcbc16a120c23ed6f" translate="yes" xml:space="preserve">
          <source>Marks the current test as skipped using &lt;code&gt;$message&lt;/code&gt; as an explanatory message.</source>
          <target state="translated">&lt;code&gt;$message&lt;/code&gt; 를 설명 메시지로 사용하여 현재 테스트를 건너 뛴 것으로 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="fdc3dac1a5688d504fafe6e63f4bebd84b6d2736" translate="yes" xml:space="preserve">
          <source>Marks the current test as skipped.</source>
          <target state="translated">현재 테스트를 건너 뛴 것으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="836f70fd7d82393c2699b8755613486047b49b3c" translate="yes" xml:space="preserve">
          <source>Matcher</source>
          <target state="translated">Matcher</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="88306943fea7e76f9cd57cae0ea6d8b32d2e8434" translate="yes" xml:space="preserve">
          <source>Method</source>
          <target state="translated">Method</target>
        </trans-unit>
        <trans-unit id="607b425901e9136d2ffa37e4cec98ea81601d312" translate="yes" xml:space="preserve">
          <source>Mock Objects</source>
          <target state="translated">모의 객체</target>
        </trans-unit>
        <trans-unit id="d4fa210c46684ae2702c307452165549fb1bea55" translate="yes" xml:space="preserve">
          <source>Mocking Traits and Abstract Classes</source>
          <target state="translated">조롱 속성과 추상 클래스</target>
        </trans-unit>
        <trans-unit id="4e5a47b3d7702fd44c158059d205df922e8abfd2" translate="yes" xml:space="preserve">
          <source>Mocking the Filesystem</source>
          <target state="translated">파일 시스템 조롱</target>
        </trans-unit>
        <trans-unit id="1f7949d4ee91359460471cc2a9ab4ba454f1eba0" translate="yes" xml:space="preserve">
          <source>More complex assertions can be formulated using the &lt;code&gt;PHPUnit\Framework\Constraint&lt;/code&gt; classes. They can be evaluated using the &lt;code&gt;assertThat()&lt;/code&gt; method. &lt;a href=&quot;#appendixes-assertions-assertthat-example&quot;&gt;Example 1.61&lt;/a&gt; shows how the &lt;code&gt;logicalNot()&lt;/code&gt; and &lt;code&gt;equalTo()&lt;/code&gt; constraints can be used to express the same assertion as &lt;code&gt;assertNotEquals()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e242a25a18542f296703991379eeb2809fe5996" translate="yes" xml:space="preserve">
          <source>More complex assertions can be formulated using the &lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; classes. They can be evaluated using the &lt;code&gt;assertThat()&lt;/code&gt; method. &lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.example&quot;&gt;Example A.49&lt;/a&gt; shows how the &lt;code&gt;logicalNot()&lt;/code&gt; and &lt;code&gt;equalTo()&lt;/code&gt; constraints can be used to express the same assertion as &lt;code&gt;assertNotEquals()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PHPUnit_Framework_Constraint&lt;/code&gt; 클래스를 사용하여 더 복잡한 어설 션을 공식화 할 수 있습니다 . &lt;code&gt;assertThat()&lt;/code&gt; 메소드를 사용하여 평가할 수 있습니다 . &lt;a href=&quot;appendixes.assertions#appendixes.assertions.assertThat.example&quot;&gt;Example A.49&lt;/a&gt; 에서는 &lt;code&gt;logicalNot()&lt;/code&gt; 및 &lt;code&gt;equalTo()&lt;/code&gt; 제약 조건을 사용하여 &lt;code&gt;assertNotEquals()&lt;/code&gt; 와 동일한 어설 션을 표현하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="54184964137f49b8ce205dde3d468495fdd1cd90" translate="yes" xml:space="preserve">
          <source>More setUp() than tearDown()</source>
          <target state="translated">tearDown ()보다 더 많은 setUp ()</target>
        </trans-unit>
        <trans-unit id="5b7dd78b7622d3256924b8fa67884d9d6a364770" translate="yes" xml:space="preserve">
          <source>More specialized comparisons are used for specific argument types for &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt;, see below.</source>
          <target state="translated">&lt;code&gt;$expected&lt;/code&gt; 및 &lt;code&gt;$actual&lt;/code&gt; 특정 인수 유형에 대해보다 전문적인 비교가 사용됩니다 ( 아래 참조).</target>
        </trans-unit>
        <trans-unit id="7e0b97669d11883c70ca1d6c831840b8d0c6db11" translate="yes" xml:space="preserve">
          <source>MySQL XML DataSet</source>
          <target state="translated">MySQL XML 데이터 셋</target>
        </trans-unit>
        <trans-unit id="e5e493522134e6514878526f0a208fcabaaf676e" translate="yes" xml:space="preserve">
          <source>No, PDO is only required for the fixture clean- and set-up and for assertions. You can use whatever database abstraction you want inside your own code.</source>
          <target state="translated">아니오, PDO는 고정구 청소 및 설정 및 어설 션에만 필요합니다. 자신의 코드 내에서 원하는 데이터베이스 추상화를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc9a56db05a59cade262414e414bdb58ff701b90" translate="yes" xml:space="preserve">
          <source>No, PHPUnit requires all database objects to be available when the suite is started. The Database, tables, sequences, triggers and views have to be created before you run the test suite.</source>
          <target state="translated">아닙니다. PHPUnit은 스위트가 시작될 때 모든 데이터베이스 객체를 사용할 수 있어야합니다. 테스트 스위트를 실행하기 전에 데이터베이스, 테이블, 시퀀스, 트리거 및 뷰를 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2b90307b2c5b85bd86677d29a6c59a8c105547f" translate="yes" xml:space="preserve">
          <source>Not all tests can be run in every environment. Consider, for instance, a database abstraction layer that has several drivers for the different database systems it supports. The tests for the MySQL driver can of course only be run if a MySQL server is available.</source>
          <target state="translated">모든 환경에서 모든 테스트를 실행할 수있는 것은 아닙니다. 예를 들어, 지원하는 다른 데이터베이스 시스템에 대한 여러 드라이버가있는 데이터베이스 추상화 계층을 고려하십시오. MySQL 드라이버에 대한 테스트는 물론 MySQL 서버가 사용 가능한 경우에만 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1317169e78545dd95082d40e97e5c40688dfef5" translate="yes" xml:space="preserve">
          <source>Not all tests can be run in every environment. Consider, for instance, a database abstraction layer that has several drivers for the different database systems it supports. The tests for the MySQL driver can only be run if a MySQL server is available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="02b74cfdc96a2867073a8f8c85b54723dc79eaba" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;expectExceptionMessage()&lt;/code&gt; asserts that the &lt;code&gt;$actual&lt;/code&gt; message contains the &lt;code&gt;$expected&lt;/code&gt; message and does not perform an exact string comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f18258ff587bb762420d05f4d4ccf0c2c9f2a78" translate="yes" xml:space="preserve">
          <source>Now we have received a public key for an entity known as &quot;Sebastian Bergmann &amp;lt;sb@sebastian-bergmann.de&amp;gt;&quot;. However, we have no way of verifying this key was created by the person known as Sebastian Bergmann. But, let's try to verify the release signature again.</source>
          <target state="translated">이제 &quot;Sebastian Bergmann &amp;lt;sb@sebastian-bergmann.de&amp;gt;&quot;로 알려진 엔터티의 공개 키를 받았습니다. 그러나이 키가 Sebastian Bergmann으로 알려진 사람에 의해 생성되었는지 확인하는 방법은 없습니다. 그러나 릴리스 서명을 다시 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="302a6063bf3e3040066d1f24debdf7c100096e38" translate="yes" xml:space="preserve">
          <source>Now we have received a public key for an entity known as &amp;ldquo;Sebastian Bergmann &amp;lt;&lt;a href=&quot;mailto:sb%40sebastian-bergmann.de&quot;&gt;sb@sebastian-bergmann.de&lt;/a&gt;&amp;gt;&amp;rdquo;. However, we have no way of verifying this key was created by the person known as Sebastian Bergmann. But, let&amp;rsquo;s try to verify the release signature again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e739b615539f89d64a9ebca10039c09a3635d5c" translate="yes" xml:space="preserve">
          <source>Now we have to write the &lt;em&gt;expectedBook.xml&lt;/em&gt; Flat XML file for this assertion:</source>
          <target state="translated">이제이 어설 션에 대해 &lt;em&gt;expectedBook.xml&lt;/em&gt; 플랫 XML 파일 을 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="934a05bfd7e02cb96be24c39e10595689188cb24" translate="yes" xml:space="preserve">
          <source>Objects of some classes (e.g., &lt;code&gt;PDO&lt;/code&gt;) cannot be serialized and the backup operation will break when such an object is stored e.g. in the &lt;code&gt;$GLOBALS&lt;/code&gt; array.</source>
          <target state="translated">일부 클래스 (예 : &lt;code&gt;PDO&lt;/code&gt; )의 오브젝트는 직렬화 할 수 없으며 이러한 오브젝트가 &lt;code&gt;$GLOBALS&lt;/code&gt; 배열 에 저장되면 백업 조작이 중단됩니다 .</target>
        </trans-unit>
        <trans-unit id="977a2dd8b93738347b2ceac837b2b373064723a2" translate="yes" xml:space="preserve">
          <source>Once you get used to writing automated tests, you will likely discover more uses for tests. Here are some examples.</source>
          <target state="translated">자동화 된 테스트 작성에 익숙해지면 테스트 용도가 더 늘어날 것입니다. 여기 몇 가지 예가 있어요.</target>
        </trans-unit>
        <trans-unit id="94d0f9b6abbef8485d14875215a50c0a31c5c1b9" translate="yes" xml:space="preserve">
          <source>One of the goals of PHPUnit is that tests should be composable: we want to be able to run any number or combination of tests together, for instance all tests for the whole project, or the tests for all classes of a component that is part of the project, or just the tests for a single class.</source>
          <target state="translated">PHPUnit의 목표 중 하나는 테스트를 구성 할 수 있어야한다는 것입니다. 예를 들어 전체 프로젝트에 대한 모든 테스트 또는 일부 구성 요소의 모든 클래스에 대한 테스트와 같이 여러 가지 또는 여러 테스트 조합을 함께 실행할 수 있기를 원합니다. 프로젝트 또는 단일 클래스에 대한 테스트.</target>
        </trans-unit>
        <trans-unit id="f6aa24334bfb11b6919d07c1533ad334a8eaa7cd" translate="yes" xml:space="preserve">
          <source>One of the most time-consuming parts of writing tests is writing the code to set the world up in a known state and then return it to its original state when the test is complete. This known state is called the &lt;em&gt;fixture&lt;/em&gt; of the test.</source>
          <target state="translated">테스트 작성에서 가장 시간이 많이 걸리는 부분 중 하나는 코드를 작성하여 알려진 상태로 세계를 설정 한 다음 테스트가 완료되면 원래 상태로 되 돌리는 것입니다. 이 알려진 상태를 테스트 의 &lt;em&gt;치구&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="3785473c2e417009fcc8adf2345e2c232c1b6106" translate="yes" xml:space="preserve">
          <source>Only mock objects generated within the scope of a test will be verified automatically by PHPUnit. Mock objects generated in data providers, for instance, or injected into the test using the &lt;code&gt;@depends&lt;/code&gt; annotation will not be verified automatically by PHPUnit.</source>
          <target state="translated">테스트 범위 내에서 생성 된 모의 객체 만 PHPUnit에 의해 자동으로 확인됩니다. 예를 들어 데이터 제공자에서 생성되거나 &lt;code&gt;@depends&lt;/code&gt; 주석을 사용하여 테스트에 주입 된 모의 객체는 PHPUnit에 의해 자동으로 확인되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="07d6453ac923f01ee84bea30b298d0c67564330e" translate="yes" xml:space="preserve">
          <source>Only runs tests from the specified group(s). A test can be tagged as belonging to a group using the &lt;code&gt;@group&lt;/code&gt; annotation.</source>
          <target state="translated">지정된 그룹에서만 테스트를 실행합니다. &lt;code&gt;@group&lt;/code&gt; 주석을 사용하여 테스트에 그룹에 속하는 것으로 태그를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="55778e6fd904e3673a84e3bfae8be1fb0687d70c" translate="yes" xml:space="preserve">
          <source>Only runs tests whose name matches the given regular expression pattern. If the pattern is not enclosed in delimiters, PHPUnit will enclose the pattern in &lt;code&gt;/&lt;/code&gt; delimiters.</source>
          <target state="translated">주어진 정규식 패턴과 이름이 일치하는 테스트 만 실행합니다. 패턴이 분리 문자로 묶이지 않은 경우, PHPUnit은 &lt;code&gt;/&lt;/code&gt; 분리 문자로 패턴을 묶습니다 .</target>
        </trans-unit>
        <trans-unit id="63690d34b7f9e1463eabfc40418e8059caa98c67" translate="yes" xml:space="preserve">
          <source>Only runs the test suite whose name matches the given pattern.</source>
          <target state="translated">이름이 주어진 패턴과 일치하는 테스트 스위트 만 실행합니다.</target>
        </trans-unit>
        <trans-unit id="7bcc398b4cfdc6466f7524bf87377284eec34f49" translate="yes" xml:space="preserve">
          <source>Only search for test files with specified suffix(es).</source>
          <target state="translated">지정된 접미사가있는 테스트 파일 만 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="0e2a157c1af6da51b45ec5dae657d1b3806d67fc" translate="yes" xml:space="preserve">
          <source>Opcode Coverage</source>
          <target state="translated">오피 코드 범위</target>
        </trans-unit>
        <trans-unit id="b48bd1fbcc22a896d98ad77f3a741b6b8b452f61" translate="yes" xml:space="preserve">
          <source>Open a command line (e.g., press &lt;strong&gt;Windows&lt;/strong&gt;+&lt;strong&gt;R&lt;/strong&gt; &amp;raquo; type &lt;strong&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/strong&gt; &amp;raquo; &lt;strong&gt;ENTER&lt;/strong&gt;)</source>
          <target state="translated">명령 행을 엽니 다 (예 : &lt;strong&gt;Windows&lt;/strong&gt; + &lt;strong&gt;R&lt;/strong&gt; &amp;raquo; &lt;strong&gt; &lt;code&gt;cmd&lt;/code&gt; 입력&lt;/strong&gt; &amp;gt; &lt;strong&gt;ENTER&lt;/strong&gt; )</target>
        </trans-unit>
        <trans-unit id="3fa08c21e1f16fca09ef1167d8bf4c93c5637fe8" translate="yes" xml:space="preserve">
          <source>Open a new command line and confirm that you can execute PHPUnit from any path:</source>
          <target state="translated">새로운 명령 행을 열고 어떤 경로에서나 PHPUnit을 실행할 수 있는지 확인하십시오 :</target>
        </trans-unit>
        <trans-unit id="0b49469465e885468461a55e87c1951d54b869ed" translate="yes" xml:space="preserve">
          <source>Optional packages</source>
          <target state="translated">선택적 패키지</target>
        </trans-unit>
        <trans-unit id="93eedf8db419535b067dc63bc13e46b7f9079bb7" translate="yes" xml:space="preserve">
          <source>Optionally print to &lt;code&gt;STDERR&lt;/code&gt; instead of &lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="translated">선택적 으로 &lt;code&gt;STDOUT&lt;/code&gt; 대신 &lt;code&gt;STDERR&lt;/code&gt; 로 인쇄하십시오 .</target>
        </trans-unit>
        <trans-unit id="e6a354dd4daa36d8bed8f1f0b56e3ea067509163" translate="yes" xml:space="preserve">
          <source>Optionally, all whitelisted files can be added to the code coverage report by setting &lt;code&gt;addUncoveredFilesFromWhitelist=&quot;true&quot;&lt;/code&gt; in your PHPUnit configuration (see &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;the section called &amp;ldquo;Whitelisting Files for Code Coverage&amp;rdquo;&lt;/a&gt;). This allows the inclusion of files that are not tested yet at all. If you want to get information about which lines of such an uncovered file are executable, for instance, you also need to set &lt;code&gt;processUncoveredFilesFromWhitelist=&quot;true&quot;&lt;/code&gt; in your PHPUnit configuration (see &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;the section called &amp;ldquo;Whitelisting Files for Code Coverage&amp;rdquo;&lt;/a&gt;).</source>
          <target state="translated">선택적으로, PHPUnit 구성에서 &lt;code&gt;addUncoveredFilesFromWhitelist=&quot;true&quot;&lt;/code&gt; 를 설정하여 모든 허용 된 파일을 코드 적용 범위 보고서에 추가 할 수 있습니다 ( &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;&amp;ldquo;코드 적용 범위의 파일 허용 목록&amp;rdquo;섹션&lt;/a&gt; 참조 ). 아직 테스트하지 않은 파일을 포함 할 수 있습니다. 예를 들어, 이러한 발견되지 않은 파일의 어떤 행이 실행 &lt;code&gt;processUncoveredFilesFromWhitelist=&quot;true&quot;&lt;/code&gt; 에 대한 정보를 얻으 려면 PHPUnit 구성에서 processUncoveredFilesFromWhitelist = &quot;true&quot; 를 설정해야 합니다 ( &lt;a href=&quot;appendixes.configuration#appendixes.configuration.whitelisting-files&quot;&gt;&amp;ldquo;코드 적용을위한 파일 허용 목록&amp;rdquo;섹션&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="aedce62afc39c753c6d4febed491f439e356aa0d" translate="yes" xml:space="preserve">
          <source>Organizing Tests</source>
          <target state="translated">테스트 구성</target>
        </trans-unit>
        <trans-unit id="11fb3c6f3266acb304814fc7de555028d0cd4e0b" translate="yes" xml:space="preserve">
          <source>Other Uses for Tests</source>
          <target state="translated">시험을위한 다른 용도</target>
        </trans-unit>
        <trans-unit id="4feb618a89e34dd77a913063ec353aa76de81daa" translate="yes" xml:space="preserve">
          <source>Output During Test Execution</source>
          <target state="translated">테스트 실행 중 출력</target>
        </trans-unit>
        <trans-unit id="e8b0d7d3a8310982775ef561d75edeab3c4e3ebe" translate="yes" xml:space="preserve">
          <source>Output debug information such as the name of a test when its execution starts.</source>
          <target state="translated">테스트 시작시 테스트 이름과 같은 디버그 정보를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="ac22e97935e58a934e761573bd1553610da608d5" translate="yes" xml:space="preserve">
          <source>Output more verbose information, for instance the names of tests that were incomplete or have been skipped.</source>
          <target state="translated">불완전하거나 건너 뛴 테스트 이름과 같은보다 자세한 정보를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="acfed08e09bba7e326e398b851412548479c3579" translate="yes" xml:space="preserve">
          <source>Overall, integrated unit testing makes the cost and risk of any individual change smaller. It will allow the project to make [...] major architectural improvements [...] quickly and confidently.</source>
          <target state="translated">전반적으로 통합 된 단위 테스트를 통해 개별 변경의 비용과 위험이 줄어 듭니다. 그것은 프로젝트가 [...] 주요 건축 개선을 [...] 신속하고 자신있게 할 수있게 해줄 것입니다.</target>
        </trans-unit>
        <trans-unit id="4717dd8f5dcc1b50f1331d0b6f8035aa6e3baa8f" translate="yes" xml:space="preserve">
          <source>PHP Archive (PHAR)</source>
          <target state="translated">PHP 아카이브 (PHAR)</target>
        </trans-unit>
        <trans-unit id="764faf4bf6b2119b1d6cb008e81ff65fff16698d" translate="yes" xml:space="preserve">
          <source>PHP Arrays can obviously handle &lt;code&gt;NULL&lt;/code&gt; values.</source>
          <target state="translated">PHP 배열은 분명히 &lt;code&gt;NULL&lt;/code&gt; 값을 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="56b0142d37c776dfefed44f494060fb9bc0d52af" translate="yes" xml:space="preserve">
          <source>PHP&amp;rsquo;s &lt;code&gt;error_reporting&lt;/code&gt; runtime configuration can limit which errors PHPUnit will convert to exceptions. If you are having issues with this feature, be sure PHP is not configured to suppress the type of error you are interested in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9cd1c53eff46a933eb5f52645a29cabbaeab710" translate="yes" xml:space="preserve">
          <source>PHP's &lt;code&gt;error_reporting&lt;/code&gt; runtime configuration can limit which errors PHPUnit will convert to exceptions. If you are having issues with this feature, be sure PHP is not configured to suppress the type of errors you're testing.</source>
          <target state="translated">PHP의 &lt;code&gt;error_reporting&lt;/code&gt; 런타임 구성은 PHPUnit이 예외로 변환 할 오류를 제한 할 수 있습니다. 이 기능에 문제가있는 경우 테스트중인 오류 유형을 억제하도록 PHP가 구성되어 있지 않은지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4d5496118db6229e0d92fed1f34901c2df580a1a" translate="yes" xml:space="preserve">
          <source>PHPUnit</source>
          <target state="translated">PHPUnit</target>
        </trans-unit>
        <trans-unit id="47af5b3ac5246a1d0d93deff7752d5a3978fd7d8" translate="yes" xml:space="preserve">
          <source>PHPUnit 6.5 requires PHP 7; using the latest version of PHP is highly recommended.</source>
          <target state="translated">PHPUnit 6.5에는 PHP 7이 필요합니다. 최신 버전의 PHP를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5b5daf01ab4a0c62a950fa31fadcc69df616e5a6" translate="yes" xml:space="preserve">
          <source>PHPUnit 9.5 requires PHP 7.3; using the latest version of PHP is highly recommended.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512692343f51cf159d3403438dcc74d047ffce99" translate="yes" xml:space="preserve">
          <source>PHPUnit Manual</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84db6c858fc1bf84fbdeb4f0e9d08d271b7892bd" translate="yes" xml:space="preserve">
          <source>PHPUnit also requires the &lt;a href=&quot;http://php.net/manual/en/pcre.installation.php&quot;&gt;pcre&lt;/a&gt;, &lt;a href=&quot;http://php.net/manual/en/reflection.installation.php&quot;&gt;reflection&lt;/a&gt;, and &lt;a href=&quot;http://php.net/manual/en/spl.installation.php&quot;&gt;spl&lt;/a&gt; extensions. These standard extensions are enabled by default and cannot be disabled without patching PHP&amp;rsquo;s build system and/or C sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992bb499e1d5a191503e3acc232859347d5cd1a6" translate="yes" xml:space="preserve">
          <source>PHPUnit also requires the &lt;a href=&quot;http://php.net/manual/en/pcre.installation.php&quot;&gt;pcre&lt;/a&gt;, &lt;a href=&quot;http://php.net/manual/en/reflection.installation.php&quot;&gt;reflection&lt;/a&gt;, and &lt;a href=&quot;http://php.net/manual/en/spl.installation.php&quot;&gt;spl&lt;/a&gt; extensions. These standard extensions are enabled by default and cannot be disabled without patching PHP's build system and/or C sources.</source>
          <target state="translated">PHPUnit에는 &lt;a href=&quot;http://php.net/manual/en/pcre.installation.php&quot;&gt;pcre&lt;/a&gt; , &lt;a href=&quot;http://php.net/manual/en/reflection.installation.php&quot;&gt;reflection&lt;/a&gt; 및 &lt;a href=&quot;http://php.net/manual/en/spl.installation.php&quot;&gt;spl&lt;/a&gt; 확장 도 필요합니다 . 이 표준 확장은 기본적으로 활성화되어 있으며 PHP의 빌드 시스템 및 / 또는 C 소스를 패치하지 않으면 비활성화 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="49f9cc016f91ee80263973d6726c7b6dea9f76b5" translate="yes" xml:space="preserve">
          <source>PHPUnit assumes that the database schema with all its tables, triggers, sequences and views is created before a test is run. This means you as developer have to make sure that the database is correctly setup before running the suite.</source>
          <target state="translated">PHPUnit은 모든 테이블, 트리거, 시퀀스 및 뷰가있는 데이터베이스 스키마가 테스트가 실행되기 전에 생성되었다고 가정합니다. 즉, 개발자는 제품군을 실행하기 전에 데이터베이스가 올바르게 설정되어 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="8594c49b19d010ef897e2f081751f61f599cc069" translate="yes" xml:space="preserve">
          <source>PHPUnit can be extended in various ways to make the writing of tests easier and customize the feedback you get from running tests. Here are common starting points to extend PHPUnit.</source>
          <target state="translated">PHPUnit은 다양한 방법으로 확장되어 테스트 작성을 더 쉽게하고 테스트 실행에서 얻은 피드백을 사용자 정의 할 수 있습니다. 다음은 PHPUnit을 확장하기위한 일반적인 시작점입니다.</target>
        </trans-unit>
        <trans-unit id="b8126fb16757e1d8b03a7ba887314a3bc6f1e3fa" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about output during tests. This check can be enabled by using the &lt;code&gt;--disallow-test-output&lt;/code&gt; option on the &lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; or by setting &lt;code&gt;beStrictAboutOutputDuringTests=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fc11ccb5655256bf345f33ea0ad2cfd1e06c9ba" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about output during tests. This check can be enabled by using the &lt;code&gt;--disallow-test-output&lt;/code&gt; option on the commandline or by setting &lt;code&gt;beStrictAboutOutputDuringTests=&quot;true&quot;&lt;/code&gt; in PHPUnit's XML configuration file.</source>
          <target state="translated">PHPUnit은 테스트 중 출력에 대해 엄격 할 수 있습니다. 이 검사는 명령 줄 에서 &lt;code&gt;--disallow-test-output&lt;/code&gt; 옵션을 사용하거나 PHPUnit의 XML 구성 파일에서 &lt;code&gt;beStrictAboutOutputDuringTests=&quot;true&quot;&lt;/code&gt; 를 설정 하여 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="efd9237e6e3e36412a2ebcb13fbf8ed0b8137bb3" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about tests that do not test anything. This check can be enabled by using the &lt;code&gt;--report-useless-tests&lt;/code&gt; option on the commandline or by setting &lt;code&gt;beStrictAboutTestsThatDoNotTestAnything=&quot;true&quot;&lt;/code&gt; in PHPUnit's XML configuration file.</source>
          <target state="translated">PHPUnit은 아무것도 테스트하지 않는 테스트에 대해 엄격 할 수 있습니다. 이 검사는 명령 줄 에서 &lt;code&gt;--report-useless-tests&lt;/code&gt; 옵션을 사용하거나 PHPUnit의 XML 구성 파일에서 &lt;code&gt;beStrictAboutTestsThatDoNotTestAnything=&quot;true&quot;&lt;/code&gt; 를 설정 하여 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c02bf9b7be3d91ac4e60e6ca3d9b6b83a58885d8" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about tests that manipulate global state. This check can be enabled by using the &lt;code&gt;--strict-global-state&lt;/code&gt; option on the &lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; or by setting &lt;code&gt;beStrictAboutChangesToGlobalState=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fda123a31a241b7f985e26c0537929b335f0812" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about tests that manipulate global state. This check can be enabled by using the &lt;code&gt;--strict-global-state&lt;/code&gt; option on the commandline or by setting &lt;code&gt;beStrictAboutChangesToGlobalState=&quot;true&quot;&lt;/code&gt; in PHPUnit's XML configuration file.</source>
          <target state="translated">PHPUnit은 전역 상태를 조작하는 테스트에 대해 엄격 할 수 있습니다. 이 검사는 명령 줄 에서 &lt;code&gt;--strict-global-state&lt;/code&gt; 옵션을 사용하거나 PHPUnit의 XML 구성 파일에서 &lt;code&gt;beStrictAboutChangesToGlobalState=&quot;true&quot;&lt;/code&gt; 를 설정 하여 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d3df8f453b0b1e78f98f12d29de4ee61206276bf" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about unintentionally covered code. This check can be enabled by using the &lt;code&gt;--strict-coverage&lt;/code&gt; option on the &lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; or by setting &lt;code&gt;beStrictAboutCoversAnnotation=&quot;true&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fdb7d9e3a7db699728f83d0afcce3d4c3b9254" translate="yes" xml:space="preserve">
          <source>PHPUnit can be strict about unintentionally covered code. This check can be enabled by using the &lt;code&gt;--strict-coverage&lt;/code&gt; option on the commandline or by setting &lt;code&gt;checkForUnintentionallyCoveredCode=&quot;true&quot;&lt;/code&gt; in PHPUnit's XML configuration file.</source>
          <target state="translated">PHPUnit은 의도하지 않은 코드에 대해 엄격 할 수 있습니다. 이 검사는 명령 행 에서 &lt;code&gt;--strict-coverage&lt;/code&gt; 옵션을 사용 하거나 PHPUnit의 XML 구성 파일에서 &lt;code&gt;checkForUnintentionallyCoveredCode=&quot;true&quot;&lt;/code&gt; 를 설정 하여 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b19978e96fe381e362a6d6086a674d932b1b9aa" translate="yes" xml:space="preserve">
          <source>PHPUnit can generate an HTML-based code coverage report as well as XML-based logfiles with code coverage information in various formats (Clover, Crap4J, PHPUnit). Code coverage information can also be reported as text (and printed to STDOUT) and exported as PHP code for further processing.</source>
          <target state="translated">PHPUnit은 다양한 형식 (Clover, Crap4J, PHPUnit)의 코드 적용 정보를 가진 XML 기반 로그 파일뿐만 아니라 HTML 기반 코드 적용 보고서를 생성 할 수 있습니다. 코드 적용 범위 정보는 텍스트로보고 (및 STDOUT으로 인쇄)하여 추가 처리를 위해 PHP 코드로 내보낼 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="42100b59815e56cf993a9b667aadefd97d791e0f" translate="yes" xml:space="preserve">
          <source>PHPUnit can optionally backup all global and super-global variables before each test and restore this backup after each test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8db6b699cc6ffeab218229462d9dfd935f148e" translate="yes" xml:space="preserve">
          <source>PHPUnit can optionally backup all static attributes in all declared classes before each test and restore this backup after each test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b60ac4b3e6abda0fb0b33ae8b62675bbcfba6d53" translate="yes" xml:space="preserve">
          <source>PHPUnit can perform the additional checks documented below while it executes the tests.</source>
          <target state="translated">PHPUnit은 테스트를 실행하는 동안 아래에 설명 된 추가 검사를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecb8675789febf27cbd002a388bcb0d4b15c7e2f" translate="yes" xml:space="preserve">
          <source>PHPUnit can produce several types of logfiles.</source>
          <target state="translated">PHPUnit은 여러 유형의 로그 파일을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13d7aa477a15e4b4b96b7e12126c6a1df41d9932" translate="yes" xml:space="preserve">
          <source>PHPUnit distinguishes between &lt;em&gt;failures&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt;. A failure is a violated PHPUnit assertion such as a failing &lt;code&gt;assertEquals()&lt;/code&gt; call. An error is an unexpected exception or a PHP error. Sometimes this distinction proves useful since errors tend to be easier to fix than failures. If you have a big list of problems, it is best to tackle the errors first and see if you have any failures left when they are all fixed.</source>
          <target state="translated">PHPUnit은 &lt;em&gt;실패&lt;/em&gt; 와 &lt;em&gt;오류를&lt;/em&gt; 구별 &lt;em&gt;합니다&lt;/em&gt; . 실패는 실패한 &lt;code&gt;assertEquals()&lt;/code&gt; 호출 과 같은 위반 된 PHPUnit 어설 션 입니다. 오류는 예기치 않은 예외 또는 PHP 오류입니다. 오류보다는 오류를 수정하는 것이 더 쉬운 경향이 있기 때문에 때때로 이러한 구별이 유용합니다. 큰 문제 목록이있는 경우 먼저 오류를 해결하고 오류가 모두 수정되었을 때 남아있는 오류가 있는지 확인하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3deaf19154fa9055545119d0dabc01a6deed21bd" translate="yes" xml:space="preserve">
          <source>PHPUnit distinguishes between &lt;em&gt;failures&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt;. A failure is a violated PHPUnit assertion such as a failing &lt;code&gt;assertSame()&lt;/code&gt; call. An error is an unexpected exception or a PHP error. Sometimes this distinction proves useful since errors tend to be easier to fix than failures. If you have a big list of problems, it is best to tackle the errors first and see if you have any failures left when they are all fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7812a3d505b57601956afc9b0cad78cc287161" translate="yes" xml:space="preserve">
          <source>PHPUnit has built-in support for using Prophecy to create test doubles. &lt;a href=&quot;test-doubles#test-doubles.prophecy.examples.SubjectTest.php&quot;&gt;Example 9.17&lt;/a&gt; shows how the same test shown in &lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SubjectTest.php&quot;&gt;Example 9.11&lt;/a&gt; can be expressed using Prophecy's philosophy of prophecies and revelations:</source>
          <target state="translated">PHPUnit은 Prophecy를 사용하여 테스트 복식을 만들 수있는 기능을 내장하고 있습니다. &lt;a href=&quot;test-doubles#test-doubles.prophecy.examples.SubjectTest.php&quot;&gt;Example 9.17&lt;/a&gt; 은 예언의 예언과 계시에 대한 철학을 사용하여 &lt;a href=&quot;test-doubles#test-doubles.mock-objects.examples.SubjectTest.php&quot;&gt;Example 9.11에&lt;/a&gt; 표시된 동일한 시험을 어떻게 표현할 수 있는지 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="3579642f826e7959becaf7566fa4f98ff641f8cf" translate="yes" xml:space="preserve">
          <source>PHPUnit is a framework for writing as well as a commandline tool for running tests. Writing and running tests is a development-time activity. There is no reason why PHPUnit should be installed on a webserver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3849f7bdc83cb1c356f89ac66469aea0bb4568" translate="yes" xml:space="preserve">
          <source>PHPUnit is by default strict about tests that do not test anything. This check can be disabled by using the &lt;code&gt;--dont-report-useless-tests&lt;/code&gt; option on the &lt;a href=&quot;textui#textui-clioptions&quot;&gt;command line&lt;/a&gt; or by setting &lt;code&gt;beStrictAboutTestsThatDoNotTestAnything=&quot;false&quot;&lt;/code&gt; in PHPUnit&amp;rsquo;s &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9bb1f8cfbaa25bdfaaa7032eb1276fe1623ca4" translate="yes" xml:space="preserve">
          <source>PHPUnit requires the &lt;a href=&quot;http://php.net/manual/en/dom.setup.php&quot;&gt;dom&lt;/a&gt; and &lt;a href=&quot;http://php.net/manual/en/json.installation.php&quot;&gt;json&lt;/a&gt; extensions, which are normally enabled by default.</source>
          <target state="translated">PHPUnit에는 &lt;a href=&quot;http://php.net/manual/en/dom.setup.php&quot;&gt;dom&lt;/a&gt; 및 &lt;a href=&quot;http://php.net/manual/en/json.installation.php&quot;&gt;json&lt;/a&gt; 확장자 가 필요하며 일반적으로 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e4843be44169e2be99b8274cd80bb04fade4208" translate="yes" xml:space="preserve">
          <source>PHPUnit ships with one concrete test decorator: &lt;code&gt;PHPUnit_Extensions_RepeatedTest&lt;/code&gt;. It is used to run a test repeatedly and only count it as a success if all iterations are successful.</source>
          <target state="translated">PHPUnit은 하나의 구체적인 테스트 데코레이터 ( &lt;code&gt;PHPUnit_Extensions_RepeatedTest&lt;/code&gt; ) 와 함께 제공됩니다 . 테스트를 반복적으로 실행하는 데 사용되며 모든 반복이 성공한 경우에만 성공으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="d73279acefc705840d31280dc94ebfe8b9021b58" translate="yes" xml:space="preserve">
          <source>PHPUnit supports different ways of organizing tests and composing them into a test suite. This chapter shows the most commonly used approaches.</source>
          <target state="translated">PHPUnit은 테스트를 구성하고 테스트 스위트로 구성하는 다양한 방법을 지원합니다. 이 장에서는 가장 일반적으로 사용되는 접근 방식을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e66b75ac2c64c2bd5a57fa295a45b239cadd72f6" translate="yes" xml:space="preserve">
          <source>PHPUnit supports sharing the setup code. Before a test method is run, a template method called &lt;code&gt;setUp()&lt;/code&gt; is invoked. &lt;code&gt;setUp()&lt;/code&gt; is where you create the objects against which you will test. Once the test method has finished running, whether it succeeded or failed, another template method called &lt;code&gt;tearDown()&lt;/code&gt; is invoked. &lt;code&gt;tearDown()&lt;/code&gt; is where you clean up the objects against which you tested.</source>
          <target state="translated">PHPUnit은 설정 코드 공유를 지원합니다. 테스트 메소드를 실행하기 전에 &lt;code&gt;setUp()&lt;/code&gt; 이라는 템플리트 메소드 가 호출됩니다. &lt;code&gt;setUp()&lt;/code&gt; 은 테스트 할 객체를 만드는 곳입니다. 테스트 메소드의 실행이 완료되면 (성공 또는 실패 여부 &lt;code&gt;tearDown()&lt;/code&gt; 이라는 다른 템플리트 메소드 가 호출됩니다. &lt;code&gt;tearDown()&lt;/code&gt; 은 테스트 한 객체를 정리하는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="d9d368e9a2646997d15f98c01eafec9716710e0d" translate="yes" xml:space="preserve">
          <source>PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers.</source>
          <target state="translated">PHPUnit은 테스트 메소드 사이의 명시 적 종속성 선언을 지원합니다. 이러한 종속성은 테스트 방법이 실행되는 순서를 정의하지 않지만 생산자가 테스트 픽스처 인스턴스를 리턴하여 종속 소비자에게 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="382050e1ccd96c3d65fa1b04221d6cb2de13b970" translate="yes" xml:space="preserve">
          <source>PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-examples-stacktest2-php&quot;&gt;Using the @depends annotation to express dependencies&lt;/a&gt; shows how to use the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies between test methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7036b5999c37aa3c4dcf7df35638cd63a316ba4c" translate="yes" xml:space="preserve">
          <source>PHPUnit supports the declaration of explicit dependencies between test methods. Such dependencies do not define the order in which the test methods are to be executed but they allow the returning of an instance of the test fixture by a producer and passing it to the dependent consumers. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; shows how to use the &lt;code&gt;@depends&lt;/code&gt; annotation to express dependencies between test methods.</source>
          <target state="translated">PHPUnit은 테스트 메소드 사이의 명시 적 종속성 선언을 지원합니다. 이러한 종속성은 테스트 방법이 실행되는 순서를 정의하지 않지만 생산자가 테스트 픽스처 인스턴스를 리턴하여 종속 소비자에게 전달할 수 있습니다. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.StackTest2.php&quot;&gt;Example 2.2&lt;/a&gt; 에서는 &lt;code&gt;@depends&lt;/code&gt; 주석 을 사용하여 테스트 방법 간의 종속성을 표현 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="30be616e52c1cae88130b3407f9ca3c5b010ecbf" translate="yes" xml:space="preserve">
          <source>PHPUnit will then iterate over all the fixture rows specified and insert them into their respective tables.</source>
          <target state="translated">그런 다음 PHPUnit은 지정된 모든 조명기 행을 반복하여 해당 테이블에 삽입합니다.</target>
        </trans-unit>
        <trans-unit id="2dd23956efc07cdf875abba7ad9aefabfe0407ca" translate="yes" xml:space="preserve">
          <source>PHPUnit&amp;rsquo;s TestDox functionality looks at a test class and all the test method names and converts them from camel case (or snake_case) PHP names to sentences: &lt;code&gt;testBalanceIsInitiallyZero()&lt;/code&gt; (or &lt;code&gt;test_balance_is_initially_zero()&lt;/code&gt; becomes &amp;ldquo;Balance is initially zero&amp;rdquo;. If there are several test methods whose names only differ in a suffix of one or more digits, such as &lt;code&gt;testBalanceCannotBecomeNegative()&lt;/code&gt; and &lt;code&gt;testBalanceCannotBecomeNegative2()&lt;/code&gt;, the sentence &amp;ldquo;Balance cannot become negative&amp;rdquo; will appear only once, assuming that all of these tests succeed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ed8b9fbdfe9c33cd579ac9679c493cbf2d06bd" translate="yes" xml:space="preserve">
          <source>PHPUnit&amp;rsquo;s XML configuration file (&lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;The XML Configuration File&lt;/a&gt;) can also be used to compose a test suite. &lt;a href=&quot;#organizing-tests-xml-configuration-examples-phpunit-xml&quot;&gt;Example 5.1&lt;/a&gt; shows a minimal &lt;code&gt;phpunit.xml&lt;/code&gt; file that will add all &lt;code&gt;*Test&lt;/code&gt; classes that are found in &lt;code&gt;*Test.php&lt;/code&gt; files when the &lt;code&gt;tests&lt;/code&gt; directory is recursively traversed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0538080aada159f279a90ff4b48ea4da319a65" translate="yes" xml:space="preserve">
          <source>PHPUnit&amp;rsquo;s assertions are implemented in &lt;code&gt;PHPUnit\Framework\Assert&lt;/code&gt;. &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; inherits from &lt;code&gt;PHPUnit\Framework\Assert&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e6fa848db2b1f2559cc836fa5da9ba820aebce" translate="yes" xml:space="preserve">
          <source>PHPUnit&amp;rsquo;s test runner can be extended by registering objects that implement one or more of the following interfaces:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccaa641eb92b86295c258151a89945da47f94912" translate="yes" xml:space="preserve">
          <source>PHPUnit's TestDox functionality looks at a test class and all the test method names and converts them from camel case PHP names to sentences: &lt;code&gt;testBalanceIsInitiallyZero()&lt;/code&gt; becomes &quot;Balance is initially zero&quot;. If there are several test methods whose names only differ in a suffix of one or more digits, such as &lt;code&gt;testBalanceCannotBecomeNegative()&lt;/code&gt; and &lt;code&gt;testBalanceCannotBecomeNegative2()&lt;/code&gt;, the sentence &quot;Balance cannot become negative&quot; will appear only once, assuming that all of these tests succeed.</source>
          <target state="translated">PHPUnit의 TestDox 기능은 테스트 클래스와 모든 테스트 메소드 이름을보고 낙타 경우 PHP 이름에서 문장으로 변환합니다. &lt;code&gt;testBalanceIsInitiallyZero()&lt;/code&gt; 는 &quot;Balance is initial zero&quot;가됩니다. 다음과 같이 하나 이상의 숫자 접미사 만 다른 이름의 테스트 방법이 여러 개인 경우 &lt;code&gt;testBalanceCannotBecomeNegative()&lt;/code&gt; 및 &lt;code&gt;testBalanceCannotBecomeNegative2()&lt;/code&gt; 모든 테스트가 성공한 것으로 가정하면 &quot;Balance cannot be negative&quot;라는 문장이 한 번만 나타납니다.</target>
        </trans-unit>
        <trans-unit id="b4b3896838639f9ea4c1a9e66ed41e43020e6522" translate="yes" xml:space="preserve">
          <source>PHPUnit's XML configuration file (&lt;a href=&quot;appendixes.configuration&quot;&gt;Appendix C&lt;/a&gt;) can also be used to compose a test suite. &lt;a href=&quot;organizing-tests#organizing-tests.xml-configuration.examples.phpunit.xml&quot;&gt;Example 5.1&lt;/a&gt; shows a minimal &lt;code&gt;phpunit.xml&lt;/code&gt; file that will add all &lt;code&gt;*Test&lt;/code&gt; classes that are found in &lt;code&gt;*Test.php&lt;/code&gt; files when the &lt;code&gt;tests&lt;/code&gt; directory is recursively traversed.</source>
          <target state="translated">PHPUnit의 XML 구성 파일 ( &lt;a href=&quot;appendixes.configuration&quot;&gt;부록 C&lt;/a&gt; )을 사용하여 테스트 스위트를 구성 할 수도 있습니다. &lt;a href=&quot;organizing-tests#organizing-tests.xml-configuration.examples.phpunit.xml&quot;&gt;Example 5.1&lt;/a&gt; 에서는 &lt;code&gt;*Test.php&lt;/code&gt; 에 있는 모든 &lt;code&gt;*Test&lt;/code&gt; 클래스를 추가 하는 최소 &lt;code&gt;phpunit.xml&lt;/code&gt; 파일을 보여줍니다. &lt;code&gt;tests&lt;/code&gt; 디렉토리가 재귀 적으로 순회 할 때 파일에 .</target>
        </trans-unit>
        <trans-unit id="642242ac6fa7671cd1fd676ad61a21f76365acc5" translate="yes" xml:space="preserve">
          <source>PHPUnit's assertions are implemented in &lt;code&gt;PHPUnit\Framework\Assert&lt;/code&gt;. &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; inherits from &lt;code&gt;PHPUnit\Framework\Assert&lt;/code&gt;.</source>
          <target state="translated">PHPUnit의 주장은 &lt;code&gt;PHPUnit\Framework\Assert&lt;/code&gt; 에서 구현됩니다 . &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 상속 &lt;code&gt;PHPUnit\Framework\Assert&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="10c8b08404629e3bfc3eaef683dacdad13b23def" translate="yes" xml:space="preserve">
          <source>PHP_Invoker</source>
          <target state="translated">PHP_Invoker</target>
        </trans-unit>
        <trans-unit id="ae14dcfd433df221dcfe3839211be3fe2d8f236d" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;coverage&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e924c37dcf7f96e3e1f3ed9a8832e8ebbea57bf2" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;extension&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b62e3a4ad7ada0204c1a9aaf05b789f5866fa35" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;extensions&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34c0a007643c9dc835b8908eb2e43b1fb42d783" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;listeners&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a14604d34d3a5748ff29fce537428f69edcadc6" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;logging&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0900bd4b801b3093d840cbb521085d649a496f3" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;php&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71130d1b747c27e772f3a6739bf521d5e3476428" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;phpunit&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf6312dafa3ef4b79e66c699a308edade7330d2f" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;report&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d882ed0a179c5fa33fa113de2b6d5cf08b96dc8" translate="yes" xml:space="preserve">
          <source>Parent element: &lt;code&gt;&amp;lt;testsuites&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee6a6dbc03bd410bdccd56f5d909414453f052b" translate="yes" xml:space="preserve">
          <source>Parent elements: &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;exclude&amp;gt;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c34c1c4e7c8a3b5308b03440edb97d29e6ea7c" translate="yes" xml:space="preserve">
          <source>Path Coverage</source>
          <target state="translated">경로 범위</target>
        </trans-unit>
        <trans-unit id="2866e7f21fa8136a118911840a2dbbd4b29fd193" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;createStub()&lt;/code&gt; will automatically and recursively stub return values based on a method&amp;rsquo;s return type. Consider the example shown below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c2eb731ef7ecae18e3b833d644119ba59d97d0" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;final&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; methods cannot be stubbed or mocked. They are ignored by PHPUnit's test double functionality and retain their original behavior.</source>
          <target state="translated">유의하시기 바랍니다 &lt;code&gt;final&lt;/code&gt; , &lt;code&gt;private&lt;/code&gt; 및 &lt;code&gt;static&lt;/code&gt; 방법은 스텁 또는 조롱 할 수 없습니다. PHPUnit의 테스트 이중 기능에 의해 무시되며 원래 동작을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="00c687b4522edd4a3a7f0ddb209b6f7d0b312307" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;final&lt;/code&gt;, &lt;code&gt;private&lt;/code&gt;, and &lt;code&gt;static&lt;/code&gt; methods cannot be stubbed or mocked. They are ignored by PHPUnit&amp;rsquo;s test double functionality and retain their original behavior except for &lt;code&gt;static&lt;/code&gt; methods that will be replaced by a method throwing a &lt;code&gt;\PHPUnit\Framework\MockObject\BadMethodCallException&lt;/code&gt; exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cce8276942c167a0ba507e23418aab2d6e7152" translate="yes" xml:space="preserve">
          <source>Please note that as of 4.8, options can be put after the argument(s).</source>
          <target state="translated">4.8부터는 인수 뒤에 옵션을 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2600f5d88a355c4d2af5b6828f3727ef7b4b5fe" translate="yes" xml:space="preserve">
          <source>Please note that if you upload PHPUnit to a webserver &amp;ldquo;bad things&amp;rdquo; may happen. &lt;a href=&quot;https://thephp.cc/news/2020/02/phpunit-a-security-risk&quot;&gt;You have been warned.&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d98377ffa7a808149f245a868268d2f1cef4d290" translate="yes" xml:space="preserve">
          <source>Please note that it is not recommended to install PHPUnit globally, as &lt;code&gt;/usr/bin/phpunit&lt;/code&gt; or &lt;code&gt;/usr/local/bin/phpunit&lt;/code&gt;, for instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc3a4e281c1e2dc2dd268bf7b27a8ab0041694a4" translate="yes" xml:space="preserve">
          <source>Please note that options can be put after the argument(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d47a9345cc3b234d6fd3ded43bda6cef43983ca2" translate="yes" xml:space="preserve">
          <source>Please note that the &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; interface is deprecated and will be removed in the future. TestRunner extensions should be used instead of test listeners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc987c3847d269216981968d96d231ed7378ed3d" translate="yes" xml:space="preserve">
          <source>Please note that the loading of sourcecode files that is performed when &lt;code&gt;processUncoveredFilesForCodeCoverageReport=&quot;true&quot;&lt;/code&gt; is set can cause problems when a sourcecode file contains code outside the scope of a class or function, for instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2161be476a34b4fa1c186502eb712160d2e21020" translate="yes" xml:space="preserve">
          <source>Please note that the loading of sourcecode files that is performed when &lt;code&gt;processUncoveredFilesFromWhitelist=&quot;true&quot;&lt;/code&gt; is set can cause problems when a sourcecode file contains code outside the scope of a class or function, for instance.</source>
          <target state="translated">&lt;code&gt;processUncoveredFilesFromWhitelist=&quot;true&quot;&lt;/code&gt; 일 때 수행되는 소스 코드 파일로드 로 설정된 에 클래스 또는 함수 범위 밖의 코드가 포함 된 경우 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1b51b3ad00673230d746bfce4703a438a87a81e" translate="yes" xml:space="preserve">
          <source>Please note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this is not required for the annotation to work correctly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cc24eaa33396ec86dfabcc9fd8cd90be22b41ff" translate="yes" xml:space="preserve">
          <source>Please note that this annotation requires a fully-qualified class name (FQCN). To make this more obvious to the reader, it is recommended to use a leading backslash (even if this not required for the annotation to work correctly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efd2fb61a56474b542ff9e4dd9ae121d97995936" translate="yes" xml:space="preserve">
          <source>Please note that this functionality is only available when the tokenizer and Xdebug extensions are installed.</source>
          <target state="translated">이 기능은 토크 나이저 및 Xdebug 확장이 설치된 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b092b192a4d648e172b4a375b0666e778cde5015" translate="yes" xml:space="preserve">
          <source>Please note:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2756409bf8359021e00553a9df70e7dfc844e3c" translate="yes" xml:space="preserve">
          <source>Please read &quot;&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&quot; to understand why &lt;code&gt;$delta&lt;/code&gt; is neccessary.</source>
          <target state="translated">왜 &lt;code&gt;$delta&lt;/code&gt; 인지 이해하려면 &quot; &lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;모든 컴퓨터 과학자가 부동 소수점 산술에 대해 알아야 할 사항&lt;/a&gt; &quot;을 읽으십시오 가 .</target>
        </trans-unit>
        <trans-unit id="bada76dc741d1853eb8c11e6912e390099e80601" translate="yes" xml:space="preserve">
          <source>Please read &amp;ldquo;&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt;&amp;rdquo; to understand why &lt;code&gt;$delta&lt;/code&gt; is necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6658d27b4ed3038a0b084c0d666cea8e96205eaa" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;textui&quot;&gt;Chapter 3&lt;/a&gt; for a list of commandline switches that control code coverage functionality as well as &lt;a href=&quot;appendixes.configuration#appendixes.configuration.logging&quot;&gt;the section called &amp;ldquo;Logging&amp;rdquo;&lt;/a&gt; for the relevant configuration settings.</source>
          <target state="translated">코드 구성 기능을 제어하는 ​​명령 줄 스위치 목록과 관련 구성 설정에 대한 &lt;a href=&quot;appendixes.configuration#appendixes.configuration.logging&quot;&gt;&quot;로깅&quot;섹션에&lt;/a&gt; 대해서는 &lt;a href=&quot;textui&quot;&gt;3 장을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="66853a18180239ac24433e4a76cfac9a746e039a" translate="yes" xml:space="preserve">
          <source>Please refer to &lt;a href=&quot;textui#textui&quot;&gt;The Command-Line Test Runner&lt;/a&gt; for a list of command line switches that control code coverage functionality as well as &lt;a href=&quot;configuration#appendixes-configuration-logging&quot;&gt;The &amp;lt;logging&amp;gt; Element&lt;/a&gt; for the relevant configuration settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4828f48560fa76f63e10dc490953ebeab6ac6ea4" translate="yes" xml:space="preserve">
          <source>Please refer to the &lt;a href=&quot;https://github.com/phpspec/prophecy#how-to-use-it&quot;&gt;documentation&lt;/a&gt; for Prophecy for further details on how to create, configure, and use stubs, spies, and mocks using this alternative test double framework.</source>
          <target state="translated">이 대체 테스트 이중 프레임 워크를 사용하여 스텁, 스파이 및 목을 생성, 구성 및 사용하는 방법에 대한 자세한 내용은 Prophecy &lt;a href=&quot;https://github.com/phpspec/prophecy#how-to-use-it&quot;&gt;설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="263105526b2fba43b9e8d5b96765a97bb30eea9a" translate="yes" xml:space="preserve">
          <source>Possible Values</source>
          <target state="translated">가능한 값</target>
        </trans-unit>
        <trans-unit id="627f72b844547bdb669cc5f9c64305e0259023af" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;'&amp;lt;'&lt;/code&gt;, &lt;code&gt;'lt'&lt;/code&gt;, &lt;code&gt;'&amp;lt;='&lt;/code&gt;, &lt;code&gt;'le'&lt;/code&gt;, &lt;code&gt;'&amp;gt;'&lt;/code&gt;, &lt;code&gt;'gt'&lt;/code&gt;, &lt;code&gt;'&amp;gt;='&lt;/code&gt;, &lt;code&gt;'ge'&lt;/code&gt;, &lt;code&gt;'=='&lt;/code&gt;, &lt;code&gt;'='&lt;/code&gt;, &lt;code&gt;'eq'&lt;/code&gt;, &lt;code&gt;'!='&lt;/code&gt;, &lt;code&gt;'&amp;lt;&amp;gt;'&lt;/code&gt;, &lt;code&gt;'ne'&lt;/code&gt; (default: &lt;code&gt;'&amp;gt;='&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3eb31b4f5974a4ca396807b2632904087ce0a8c" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;defects&lt;/code&gt;, &lt;code&gt;depends&lt;/code&gt;, &lt;code&gt;no-depends&lt;/code&gt;, &lt;code&gt;duration&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83178aa2f76796fd6b0c224b92a3ff7a449ef8c7" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43675467edc2bf4e4fbe3d1af7b2ce15210c150" translate="yes" xml:space="preserve">
          <source>Possible values: &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944ccde8d5bc0272b51d020f33cfecb45e20a3ef" translate="yes" xml:space="preserve">
          <source>Possible values: integer (default: &lt;code&gt;0&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5198dc0c8f0f3eeeecd54391efbe73645b848fd4" translate="yes" xml:space="preserve">
          <source>Possible values: integer (default: &lt;code&gt;10&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54d0b31f3a299ea631a176644237a8899155d36" translate="yes" xml:space="preserve">
          <source>Possible values: integer (default: &lt;code&gt;1&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72260f5bc0605c52e4e4b6d385f194ac9c60c226" translate="yes" xml:space="preserve">
          <source>Possible values: integer (default: &lt;code&gt;50&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee1592823bd7c02d4f9c7a4a6f80dcafdaf2ba4" translate="yes" xml:space="preserve">
          <source>Possible values: integer (default: &lt;code&gt;60&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08642d9c6a21f8b010ad42534a77abe2fbeabe11" translate="yes" xml:space="preserve">
          <source>Possible values: integer (default: &lt;code&gt;90&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6928519e0594e532b811fd0950c853682ebbcfd3" translate="yes" xml:space="preserve">
          <source>Possible values: integer or string &lt;code&gt;max&lt;/code&gt; (default: &lt;code&gt;80&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe3a978816b8d9861b621d6d594db415de64920" translate="yes" xml:space="preserve">
          <source>Possible values: string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2844da84955771906a0d877b1cf119363b1f5cab" translate="yes" xml:space="preserve">
          <source>Possible values: string (default: &lt;code&gt;'.php'&lt;/code&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1643f819018f87137c3f300ebd0256bcad315bfb" translate="yes" xml:space="preserve">
          <source>Prepend PHP&amp;rsquo;s &lt;code&gt;include_path&lt;/code&gt; with given path(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3be7ddab7fc072c083b8c17fdd9d76611bec0037" translate="yes" xml:space="preserve">
          <source>Prepend PHP's &lt;code&gt;include_path&lt;/code&gt; with given path(s).</source>
          <target state="translated">주어진 경로에 PHP의 &lt;code&gt;include_path&lt;/code&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7077ef011107ae207735c11aa0ba355ba18a6cfb" translate="yes" xml:space="preserve">
          <source>Prevents a test that performs no assertions from being considered risky.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="150192029460dbce4ee668d8d30fa47c25d3420d" translate="yes" xml:space="preserve">
          <source>Printed when an assertion fails while running the test method.</source>
          <target state="translated">테스트 방법을 실행하는 동안 어설 션이 실패하면 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="4fe14f961fb1067a3cf5bb2c6557173ac8ba1e78" translate="yes" xml:space="preserve">
          <source>Printed when an error occurs while running the test method.</source>
          <target state="translated">테스트 방법을 실행하는 동안 오류가 발생하면 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="f26a19962fbcc0ead8ef5d2b0673010d4f29374d" translate="yes" xml:space="preserve">
          <source>Printed when the test has been marked as risky (see &lt;a href=&quot;risky-tests&quot;&gt;Chapter 6&lt;/a&gt;).</source>
          <target state="translated">테스트가 위험하다고 표시되면 인쇄합니다 ( &lt;a href=&quot;risky-tests&quot;&gt;6 장&lt;/a&gt; 참조). ).</target>
        </trans-unit>
        <trans-unit id="93e9251c0ea7b915da35461bad6a48bd181ec7b3" translate="yes" xml:space="preserve">
          <source>Printed when the test has been marked as risky (see &lt;a href=&quot;risky-tests#risky-tests&quot;&gt;Risky Tests&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db0fe64ebd78347ce8fd394c7ea1f2f32ca4046" translate="yes" xml:space="preserve">
          <source>Printed when the test has been skipped (see &lt;a href=&quot;incomplete-and-skipped-tests&quot;&gt;Chapter 7&lt;/a&gt;).</source>
          <target state="translated">테스트를 건너 뛰었을 때 인쇄됩니다 ( &lt;a href=&quot;incomplete-and-skipped-tests&quot;&gt;7 장&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="b128c3bc86184964c7326fbec61d3f912cb1991f" translate="yes" xml:space="preserve">
          <source>Printed when the test has been skipped (see &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests&quot;&gt;Incomplete and Skipped Tests&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ba802335d8720b55472d99964e18ef93d939db" translate="yes" xml:space="preserve">
          <source>Printed when the test is marked as being incomplete or not yet implemented (see &lt;a href=&quot;incomplete-and-skipped-tests&quot;&gt;Chapter 7&lt;/a&gt;).</source>
          <target state="translated">테스트가 불완전하거나 아직 구현되지 않은 것으로 표시 될 때 인쇄됩니다 ( &lt;a href=&quot;incomplete-and-skipped-tests&quot;&gt;7 장&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="afc107612a45afb7a4ddc7ccaa1a4243d312909e" translate="yes" xml:space="preserve">
          <source>Printed when the test is marked as being incomplete or not yet implemented (see &lt;a href=&quot;incomplete-and-skipped-tests#incomplete-and-skipped-tests&quot;&gt;Incomplete and Skipped Tests&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba2d6f772530a3465e1a5aec7c5f04c3e6c8b703" translate="yes" xml:space="preserve">
          <source>Printed when the test succeeds.</source>
          <target state="translated">테스트가 성공하면 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="ee44cac8f855d68a2c27e1a224b35d85d0c3736a" translate="yes" xml:space="preserve">
          <source>Prior to PHPUnit 7.0 (due to a bug in the annotation parsing), using the &lt;code&gt;@testdox&lt;/code&gt; annotation also activated the behaviour of the &lt;code&gt;@test&lt;/code&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84e5ab64b778c615157d90ad3f9f29cd40ffc1f9" translate="yes" xml:space="preserve">
          <source>Prior to version 6, by default, PHPUnit ran your tests in a way where changes to global and super-global variables (&lt;code&gt;$GLOBALS&lt;/code&gt;, &lt;code&gt;$_ENV&lt;/code&gt;, &lt;code&gt;$_POST&lt;/code&gt;, &lt;code&gt;$_GET&lt;/code&gt;, &lt;code&gt;$_COOKIE&lt;/code&gt;, &lt;code&gt;$_SERVER&lt;/code&gt;, &lt;code&gt;$_FILES&lt;/code&gt;, &lt;code&gt;$_REQUEST&lt;/code&gt;) do not affect other tests.</source>
          <target state="translated">버전 6 이전에는 기본적으로 PHPUnit이 전역 및 수퍼 전역 변수 ( &lt;code&gt;$GLOBALS&lt;/code&gt; , &lt;code&gt;$_ENV&lt;/code&gt; , &lt;code&gt;$_POST&lt;/code&gt; , &lt;code&gt;$_GET&lt;/code&gt; , &lt;code&gt;$_COOKIE&lt;/code&gt; , &lt;code&gt;$_SERVER&lt;/code&gt; , &lt;code&gt;$_FILES&lt;/code&gt; , &lt;code&gt;$_REQUEST&lt;/code&gt; )를 변경하는 방식으로 테스트를 실행했습니다. 다른 테스트에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4efddacca78f222cece1de9ff5fbca133f4da905" translate="yes" xml:space="preserve">
          <source>Probably the easiest way to compose a test suite is to keep all test case source files in a test directory. PHPUnit can automatically discover and run the tests by recursively traversing the test directory.</source>
          <target state="translated">테스트 스위트를 작성하는 가장 쉬운 방법은 모든 테스트 케이스 소스 파일을 테스트 디렉토리에 유지하는 것입니다. PHPUnit은 테스트 디렉토리를 재귀 적으로 탐색하여 테스트를 자동으로 발견하고 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5a78511945d75d09c26b4c1fb8f05de45a20ece" translate="yes" xml:space="preserve">
          <source>Prophecy</source>
          <target state="translated">Prophecy</target>
        </trans-unit>
        <trans-unit id="70722b664c73140bc8771071166d7ea92ac45976" translate="yes" xml:space="preserve">
          <source>Query (SQL) DataSet</source>
          <target state="translated">쿼리 (SQL) 데이터 세트</target>
        </trans-unit>
        <trans-unit id="e52aa5d69f53e18e5cd9d9467eb939c9e5ded38d" translate="yes" xml:space="preserve">
          <source>Query-Based DataSet and DataTable</source>
          <target state="translated">쿼리 기반 DataSet 및 DataTable</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="20e73682efd2091a4887f17fa4949bf07aafee27" translate="yes" xml:space="preserve">
          <source>Read configuration from XML file. See &lt;a href=&quot;appendixes.configuration&quot;&gt;Appendix C&lt;/a&gt; for more details.</source>
          <target state="translated">XML 파일에서 구성을 읽습니다. 자세한 내용은 &lt;a href=&quot;appendixes.configuration&quot;&gt;부록 C&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0f977f593e654834e8c8cef2e9cbdfa12c4c3985" translate="yes" xml:space="preserve">
          <source>Read configuration from XML file. See &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;The XML Configuration File&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5286ff79ed1a8f09b862c3acf5ef3b28a86d14d" translate="yes" xml:space="preserve">
          <source>Remember: all configuration is optional, so make sure your extension either has sane defaults in place, or that it disables itself in case configuration is missing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="975633d28e1a4ad6918a2b49a61299f7d37d4c0f" translate="yes" xml:space="preserve">
          <source>Repeatedly runs the test(s) the specified number of times.</source>
          <target state="translated">지정된 횟수만큼 테스트를 반복해서 실행합니다.</target>
        </trans-unit>
        <trans-unit id="5e1798b999b27ffc3f0e8ab26077abe1c4ce1348" translate="yes" xml:space="preserve">
          <source>Replacement DataSet</source>
          <target state="translated">교체 데이터 세트</target>
        </trans-unit>
        <trans-unit id="924d60e08dd4b24f08914a73aec4205064256fb5" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not an instance of &lt;code&gt;$expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actual&lt;/code&gt; 이 &lt;code&gt;$expected&lt;/code&gt; 의 인스턴스가 아닌 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="078b6f1f4540c3e45b087d08c5adc83e41e64dbb" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not empty.</source>
          <target state="translated">&lt;code&gt;$actual&lt;/code&gt; 이 비어 있지 않은 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="3ebd5be0d370d789dfa7b8ed701271e072a75af6" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not equal to &lt;code&gt;$expected&lt;/code&gt; according to &lt;code&gt;$actual-&amp;gt;$method($expected)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7ba7eceebb89f5bbf23541075b06e1bb34f753" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of the &lt;code&gt;$expected&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;$actual&lt;/code&gt; 이 &lt;code&gt;$expected&lt;/code&gt; 유형 이 아닌 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="07e12aad9feb2586dc29ee64b90cfd09a3655ec9" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b2ffea450862a117b0d5b8d32c8a83f69b72be8" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;bool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cabc1b9d89adb68145d548b98fde0356f162f86" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;callable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="709258a65b8c96c0b4c8ba2e243191c0480503d1" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="923b8e36f921759e2f99839444ec9482c6a8f286" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf1d51be05e96143358c9611508003ec16912836" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;iterable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29433e49c92445602d930fcabf3c19bcbf3e6a20" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;numeric&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18e14627bc060222a7c550f407567efcb441e9db" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e65dc0190a2bc6d9f6dbfe0e237c18e87db9d1c2" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;resource&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a632d0af23c6a6d2c830608de71779c6e96d81eb" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;scalar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce936450261d1bf60a2c1a6ade911729c641c43" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$actual&lt;/code&gt; is not of type &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e98152f787fdc1d0324cb8c223b67bfb99d763e" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$array&lt;/code&gt; does not contains the &lt;code&gt;$subset&lt;/code&gt;.</source>
          <target state="translated">식별 오류 보고서 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$array&lt;/code&gt; 포함하지 않는 &lt;code&gt;$subset&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="71b557ccbaaa7a51c075e4c7db2b8f7650bb97fb" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$array&lt;/code&gt; does not have the &lt;code&gt;$key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$array&lt;/code&gt; 에 &lt;code&gt;$key&lt;/code&gt; 가없는 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="6ca0da1ed1e84c5868f60ccdb6b56ce8feaacc8c" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$className::attributeName&lt;/code&gt; does not exist.</source>
          <target state="translated">&lt;code&gt;$className::attributeName&lt;/code&gt; 이없는 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고 합니다.</target>
        </trans-unit>
        <trans-unit id="c536140963660bee37cdd72ecd663108753ca977" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$condition&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$condition&lt;/code&gt; 이 &lt;code&gt;false&lt;/code&gt; 인 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="9c4115d702d6b98e99ec860f0cf95a6db164937a" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$condition&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$condition&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 인 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고 합니다 .</target>
        </trans-unit>
        <trans-unit id="cc513ca9b015cd5814feb284d42c9cf0de0dc6ad" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$haystack&lt;/code&gt; does not contain only instances of class &lt;code&gt;$classname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$haystack&lt;/code&gt; &lt;code&gt;$classname&lt;/code&gt; 클래스의 인스턴스 만 포함되지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="84fce04f62fd1599677eb73f158abf8b48b05502" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$haystack&lt;/code&gt; does not contain only variables of type &lt;code&gt;$type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$haystack&lt;/code&gt; &lt;code&gt;$type&lt;/code&gt; 변수 만 포함되어 있지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="544c20f0a7531533ccce89905d21173c44ed1b1d" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$needle&lt;/code&gt; is not a substring of &lt;code&gt;$haystack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$needle&lt;/code&gt; 이 &lt;code&gt;$haystack&lt;/code&gt; 의 하위 문자열이 아닌 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="2a7b429e45d29e7cb3ea9b762d8a855e23e9fbec" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$needle&lt;/code&gt; is not an element of &lt;code&gt;$haystack&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$needle&lt;/code&gt; 이 &lt;code&gt;$haystack&lt;/code&gt; 의 요소가 아닌 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="393d7b82ac901e2af8038b1136b0b11b10a85319" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$object-&amp;gt;attributeName&lt;/code&gt; does not exist.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$object-&amp;gt;attributeName&lt;/code&gt; 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="85c71af7ea8b76e35c12e41078b128f762f10ca6" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$string&lt;/code&gt; does not match the regular expression &lt;code&gt;$pattern&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$string&lt;/code&gt; 정규 표현식과 일치하지 않는 &lt;code&gt;$pattern&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb4ffc898d3720877e919bb23475e7ba888c3340" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$variable&lt;/code&gt; is not &lt;code&gt;INF&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$variable&lt;/code&gt; 이 &lt;code&gt;INF&lt;/code&gt; 가 아닌 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="cd91aa05bc44e856d110d48bd4789ed9a4a768c2" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$variable&lt;/code&gt; is not &lt;code&gt;NAN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$variable&lt;/code&gt; 이 &lt;code&gt;NAN&lt;/code&gt; 이 아닌 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="8ed3c7fcdfb61a066fbc49285d66021d4dae0700" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if &lt;code&gt;$variable&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$variable&lt;/code&gt; 이 &lt;code&gt;null&lt;/code&gt; 이 아닌 경우 $ &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="77bd044d100c1c700543142b3889b9173e9bfc46" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the &lt;code&gt;$string&lt;/code&gt; does not end with &lt;code&gt;$suffix&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$string&lt;/code&gt; 로 끝나지 않습니다 &lt;code&gt;$suffix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="086c5446b0c9a38d2f1efa12475b396fb1662835" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the &lt;code&gt;$string&lt;/code&gt; does not match the &lt;code&gt;$format&lt;/code&gt; string.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$string&lt;/code&gt; 일치하지 않는 &lt;code&gt;$format&lt;/code&gt; 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="98a6fedabadddcb1108120c9c73eea5c20be0198" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the &lt;code&gt;$string&lt;/code&gt; does not match the contents of the &lt;code&gt;$formatFile&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$string&lt;/code&gt; 의 내용과 일치하지 않는 &lt;code&gt;$formatFile&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="512f125df8f2a6988a4771105eac7f4ba79b7c84" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the &lt;code&gt;$string&lt;/code&gt; does not start with &lt;code&gt;$prefix&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$string&lt;/code&gt; 로 시작하지 않는 &lt;code&gt;$prefix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="09fe110a6d6c6c2a812045f5bd6440b3a1463256" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the &lt;code&gt;$value&lt;/code&gt; does not match the &lt;code&gt;$constraint&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 경우 &lt;code&gt;$value&lt;/code&gt; 일치하지 않는 &lt;code&gt;$constraint&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ccd61efef40fa853ff83fe68aa0c12747d495b5" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the XML Structure of the DOMElement in &lt;code&gt;$actualElement&lt;/code&gt; is not equal to the XML structure of the DOMElement in &lt;code&gt;$expectedElement&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actualElement&lt;/code&gt; 에있는 DOMElement의 XML 구조가 &lt;code&gt;$expectedElement&lt;/code&gt; 에있는 DOMElement의 XML 구조와 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별되는 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="8b04410d5387cb65b81bca62b943471ef8469184" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the XML document in &lt;code&gt;$actualFile&lt;/code&gt; is not equal to the XML document in &lt;code&gt;$expectedFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actualFile&lt;/code&gt; 의 XML 문서가 &lt;code&gt;$expectedFile&lt;/code&gt; 의 XML 문서와 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="3a0182ffc5d9d017d2da8255c3dba2d70ccc072d" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the XML document in &lt;code&gt;$actualXml&lt;/code&gt; is not equal to the XML document in &lt;code&gt;$expectedFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actualXml&lt;/code&gt; 의 XML 문서가 &lt;code&gt;$expectedFile&lt;/code&gt; 의 XML 문서와 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="bafb755a1c4add06ae87ccaf6e2df8b223ddbe53" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the XML document in &lt;code&gt;$actualXml&lt;/code&gt; is not equal to the XML document in &lt;code&gt;$expectedXml&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actualXml&lt;/code&gt; 의 XML 문서가 &lt;code&gt;$expectedXml&lt;/code&gt; 의 XML 문서와 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="d025364684667f27bece52895d5765de417089a2" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the absolute difference between &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; is greater than &lt;code&gt;$delta&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f0506454d65d919a993273bfd9571e82e69672" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the directory specified by &lt;code&gt;$directory&lt;/code&gt; does not exist.</source>
          <target state="translated">&lt;code&gt;$message&lt;/code&gt; directory로 지정된 &lt;code&gt;$directory&lt;/code&gt; 가 존재하지 않으면 $ message로 식별 된 오류를보고 합니다.</target>
        </trans-unit>
        <trans-unit id="ee8a7057ce8765a935dce603cc59a7a46fbe2605" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the directory specified by &lt;code&gt;$directory&lt;/code&gt; is not a directory or is not readable.</source>
          <target state="translated">&lt;code&gt;$message&lt;/code&gt; directory로 지정된 &lt;code&gt;$directory&lt;/code&gt; 가 디렉토리 가 아니거나 읽을 수없는 경우 $ message로 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="728690575b113a8f02350e19c80190f39d052b0f" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the directory specified by &lt;code&gt;$directory&lt;/code&gt; is not a directory or is not writable.</source>
          <target state="translated">&lt;code&gt;$message&lt;/code&gt; directory로 지정된 &lt;code&gt;$directory&lt;/code&gt; 가 디렉토리 가 아니거나 쓰기 가능하지 않은 경우 $ message로 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="3e47f4fd26dcfcba2f73efbe449d34308cbd9660" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file or directory specified by &lt;code&gt;$filename&lt;/code&gt; is not readable.</source>
          <target state="translated">&lt;code&gt;$filename&lt;/code&gt; 지정된 파일 또는 디렉토리를 읽을 수없는 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="38e7d275b237baccf1b03689f9d23f16fd05893d" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file or directory specified by &lt;code&gt;$filename&lt;/code&gt; is not writable.</source>
          <target state="translated">&lt;code&gt;$filename&lt;/code&gt; 지정된 파일 또는 디렉토리 가 쓰기 가능하지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="55d77040434efa3c373e4945df883a1b2bd7a62c" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file specified by &lt;code&gt;$expected&lt;/code&gt; does not have the same contents as the file specified by &lt;code&gt;$actual&lt;/code&gt;.</source>
          <target state="translated">식별 오류 보고서 &lt;code&gt;$message&lt;/code&gt; 에 지정된 파일 경우 &lt;code&gt;$expected&lt;/code&gt; 에 의해 지정된 파일과 같은 내용이없는 &lt;code&gt;$actual&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="578fda8dc395bb88e540b77eb87fa3d87feaee2e" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file specified by &lt;code&gt;$expectedFile&lt;/code&gt; does not have &lt;code&gt;$actualString&lt;/code&gt; as its contents.</source>
          <target state="translated">&lt;code&gt;$expectedFile&lt;/code&gt; 의해 지정된 파일에 &lt;code&gt;$actualString&lt;/code&gt; 이없는 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="d56ad30ea8d3b9f96fc5c8079f620d3ccc615a3d" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file specified by &lt;code&gt;$filename&lt;/code&gt; does not exist.</source>
          <target state="translated">&lt;code&gt;$filename&lt;/code&gt; 지정된 파일 이 존재하지 않으면 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고 합니다.</target>
        </trans-unit>
        <trans-unit id="dc6ad2067d9ad0155aac5f3d8f47da9b0222c496" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file specified by &lt;code&gt;$filename&lt;/code&gt; is not a file or is not readable.</source>
          <target state="translated">&lt;code&gt;$filename&lt;/code&gt; 지정된 파일 이 파일 이 아니거나 읽을 수없는 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="8291b2b0cf203b6fa6838f2cea8f26063a7a8fe3" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the file specified by &lt;code&gt;$filename&lt;/code&gt; is not a file or is not writable.</source>
          <target state="translated">&lt;code&gt;$filename&lt;/code&gt; 지정된 파일 이 파일 이 아니거나 쓰기 가능하지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="c12e7387d4c761afca3a9b2ec974011f6be4a1bb" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the number of elements in &lt;code&gt;$haystack&lt;/code&gt; is not &lt;code&gt;$expectedCount&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$haystack&lt;/code&gt; 의 요소 수가 &lt;code&gt;$expectedCount&lt;/code&gt; 가 아닌 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="4080ea0d678b62f44b472ec5e7403a733c8e1fa6" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the two arrays &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are not equal.</source>
          <target state="translated">두 배열 &lt;code&gt;$expected&lt;/code&gt; 와 &lt;code&gt;$actual&lt;/code&gt; 이 같지 않으면 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="3d8646043332e6a5cd233d90272cf36235d5e92a" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the two floats &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are not within &lt;code&gt;$delta&lt;/code&gt; of each other.</source>
          <target state="translated">두 float &lt;code&gt;$expected&lt;/code&gt; 및 &lt;code&gt;$actual&lt;/code&gt; 이 서로 &lt;code&gt;$delta&lt;/code&gt; 내에 있지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="3da6ee2026204bec6dccdab9369e1994df40126f" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the two objects &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; do not have equal attribute values.</source>
          <target state="translated">&lt;code&gt;$expected&lt;/code&gt; 및 &lt;code&gt;$actual&lt;/code&gt; 두 개체의 속성 값이 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고 합니다.</target>
        </trans-unit>
        <trans-unit id="8e21322034d6fc096afb08f79236b5d692c36720" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the two variables &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are not equal.</source>
          <target state="translated">&lt;code&gt;$expected&lt;/code&gt; 및 &lt;code&gt;$actual&lt;/code&gt; 두 변수 가 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="3cab7e45c1bddba8d5529fea8d75b1a303fc5364" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the two variables &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; do not have the same type and value.</source>
          <target state="translated">&lt;code&gt;$expected&lt;/code&gt; 및 &lt;code&gt;$actual&lt;/code&gt; 두 변수의 유형 및 값이 동일하지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="c94723b2b18047d8e062213732cd10179f2b5dd9" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the two variables &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; do not reference the same object.</source>
          <target state="translated">&lt;code&gt;$expected&lt;/code&gt; 및 &lt;code&gt;$actual&lt;/code&gt; 두 변수 가 동일한 오브젝트를 참조하지 않는 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고 합니다.</target>
        </trans-unit>
        <trans-unit id="7f9cc3596d6c933da5ee9e94ff2d469a2a40040e" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the uncommented canonical form of the XML documents represented by the two DOMDocument objects &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are not equal.</source>
          <target state="translated">두 개의 DOMDocument 객체 &lt;code&gt;$expected&lt;/code&gt; 와 &lt;code&gt;$actual&lt;/code&gt; 이 나타내는 주석 처리되지 않은 표준 형식의 XML 문서 가 같지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별되는 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="1249882186142435ead5e58f83c6c8abd0c19b9c" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actual&lt;/code&gt; is not greater than or equal to the value of &lt;code&gt;$expected&lt;/code&gt;.</source>
          <target state="translated">식별 오류 보고서 &lt;code&gt;$message&lt;/code&gt; 의 값 경우 &lt;code&gt;$actual&lt;/code&gt; 또는의 값과 동일한보다 크지 않은 &lt;code&gt;$expected&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="595e08c23860647d89901bf9ab8b92336d0f4ffc" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actual&lt;/code&gt; is not greater than the value of &lt;code&gt;$expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actual&lt;/code&gt; 값이 &lt;code&gt;$expected&lt;/code&gt; 값보다 크지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="a6c765fa2d55705025d2762d524409fb5bb50e0a" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actual&lt;/code&gt; is not less than or equal to the value of &lt;code&gt;$expected&lt;/code&gt;.</source>
          <target state="translated">식별 오류 보고서 &lt;code&gt;$message&lt;/code&gt; 의 값 경우 &lt;code&gt;$actual&lt;/code&gt; 없습니다보다 작거나의 값과 동일한 &lt;code&gt;$expected&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ca0ba5a5b58e0585cdb6e1d5e525814facce853" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actual&lt;/code&gt; is not less than the value of &lt;code&gt;$expected&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$actual&lt;/code&gt; 값이 &lt;code&gt;$expected&lt;/code&gt; 값보다 작지 않은 경우 &lt;code&gt;$message&lt;/code&gt; 식별 된 오류를보고합니다 .</target>
        </trans-unit>
        <trans-unit id="82b463264dc29bb4729bf93137c08b11700af714" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actualFile&lt;/code&gt; does not match the value of &lt;code&gt;$expectedFile&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 의 값 경우 &lt;code&gt;$actualFile&lt;/code&gt; 의 값과 일치하지 않는 &lt;code&gt;$expectedFile&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="301162802aecaaf8f22c346674fe7f0608bb7436" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actualJson&lt;/code&gt; does not match the value of &lt;code&gt;$expectedFile&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 의 값 경우 &lt;code&gt;$actualJson&lt;/code&gt; 의 값과 일치하지 않는 &lt;code&gt;$expectedFile&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18c0ccdc644f837b1a01f2132c19dc72f470bf4b" translate="yes" xml:space="preserve">
          <source>Reports an error identified by &lt;code&gt;$message&lt;/code&gt; if the value of &lt;code&gt;$actualJson&lt;/code&gt; does not match the value of &lt;code&gt;$expectedJson&lt;/code&gt;.</source>
          <target state="translated">식별 오류보고 &lt;code&gt;$message&lt;/code&gt; 의 값 경우 &lt;code&gt;$actualJson&lt;/code&gt; 의 값과 일치하지 않는 &lt;code&gt;$expectedJson&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dd616ff006ed7c07c758a188e4ec92b362086afe" translate="yes" xml:space="preserve">
          <source>Reports the test progress as agile documentation. See &lt;a href=&quot;other-uses-for-tests&quot;&gt;Chapter 12&lt;/a&gt; for more details.</source>
          <target state="translated">테스트 진행 상황을 민첩한 문서로보고합니다. 자세한 내용은 &lt;a href=&quot;other-uses-for-tests&quot;&gt;12 장&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="de8d936c88e1863800bd8466f0faec889f494042" translate="yes" xml:space="preserve">
          <source>Reports the test progress in TestDox format (see &lt;a href=&quot;#textui-testdox&quot;&gt;TestDox&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a428f93ec07a73d726f8bd037ecacfaaf8b044" translate="yes" xml:space="preserve">
          <source>Requirements</source>
          <target state="translated">Requirements</target>
        </trans-unit>
        <trans-unit id="16b5504af778e6e22e6ab413c83558c38de90649" translate="yes" xml:space="preserve">
          <source>Returns a matcher that matches when the method it is evaluated for is executed at least once.</source>
          <target state="translated">평가 된 메소드가 최소한 한 번 실행될 때 일치하는 일치자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="120bdc611a5f0e858f90bdbbdc837cc8ceefa27e" translate="yes" xml:space="preserve">
          <source>Returns a matcher that matches when the method it is evaluated for is executed exactly &lt;code&gt;$count&lt;/code&gt; times.</source>
          <target state="translated">평가 된 메소드가 정확히 &lt;code&gt;$count&lt;/code&gt; 번 실행될 때 일치하는 matcher를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="838806f90a6f476915e02b7e79b86fd52d6a8d70" translate="yes" xml:space="preserve">
          <source>Returns a matcher that matches when the method it is evaluated for is executed exactly once.</source>
          <target state="translated">평가 된 메소드가 정확히 한 번 실행될 때 일치하는 일치자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c9911566320eae9c09315f2b84265dd9c69b6476" translate="yes" xml:space="preserve">
          <source>Returns a matcher that matches when the method it is evaluated for is executed zero or more times.</source>
          <target state="translated">평가 된 메소드가 0 회 이상 실행될 때 일치하는 매처를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="53bab2e7ba0f0396fc0a45e50a1614e9f6fafc8d" translate="yes" xml:space="preserve">
          <source>Returns a matcher that matches when the method it is evaluated for is invoked at the given &lt;code&gt;$index&lt;/code&gt;.</source>
          <target state="translated">평가 된 메소드가 주어진 &lt;code&gt;$index&lt;/code&gt; 에서 호출 될 때 일치하는 matcher를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="27915c6e84224125fe3978046e491501197d9c16" translate="yes" xml:space="preserve">
          <source>Returns a matcher that matches when the method it is evaluated for is never executed.</source>
          <target state="translated">평가 된 메소드가 실행되지 않을 때 일치하는 일치자를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="dc2fb7e0371dfd1aabb9f9a7a640ddddc336ee2d" translate="yes" xml:space="preserve">
          <source>Risky Tests</source>
          <target state="translated">위험한 테스트</target>
        </trans-unit>
        <trans-unit id="4490c75530f1d398bb9ab74d4a61cad83d14483b" translate="yes" xml:space="preserve">
          <source>Run each test in a separate PHP process.</source>
          <target state="translated">별도의 PHP 프로세스에서 각 테스트를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="5332dfc5aecd6edc7ed9f2a7c823bd3465a3c11c" translate="yes" xml:space="preserve">
          <source>Runs the tests that are provided by the class &lt;code&gt;UnitTest&lt;/code&gt;. This class is expected to be declared in the &lt;code&gt;UnitTest.php&lt;/code&gt; sourcefile.</source>
          <target state="translated">&lt;code&gt;UnitTest&lt;/code&gt; 클래스에서 제공하는 테스트를 실행합니다 . 이 클래스는 &lt;code&gt;UnitTest.php&lt;/code&gt; 소스 파일에 선언되어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="eedb7be5dad5b95a566c703f452bd8d531fca9e0" translate="yes" xml:space="preserve">
          <source>Runs the tests that are provided by the class &lt;code&gt;UnitTest&lt;/code&gt;. This class is expected to be declared in the specified sourcefile.</source>
          <target state="translated">&lt;code&gt;UnitTest&lt;/code&gt; 클래스에서 제공하는 테스트를 실행합니다 . 이 클래스는 지정된 소스 파일에서 선언 될 것으로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="02aa629c8b16cd17a44f3a0efec2feed43937642" translate="yes" xml:space="preserve">
          <source>S</source>
          <target state="translated">S</target>
        </trans-unit>
        <trans-unit id="531764600c776e25cb023fb3e2bdba0530fd3705" translate="yes" xml:space="preserve">
          <source>Sebastian Bergmann</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe670253cdc3d62fdd264692dc57385ab7b5973" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#textui-examples-filter-patterns&quot;&gt;Example 3.2&lt;/a&gt; for examples of valid filter patterns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e32fc164770ff6ee0c1dd58074994a2f8d1043" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#textui-examples-filter-shortcuts&quot;&gt;Example 3.3&lt;/a&gt; for some additional shortcuts that are available for matching data providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a2b0e82e311143e9d911ff3b60f31074d1cca43" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;configuration#appendixes-configuration-extensions&quot;&gt;The &amp;lt;extensions&amp;gt; Element&lt;/a&gt; for details on how to register extensions in PHPUnit&amp;rsquo;s XML configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6443e79f7ce086ba41d829f4766ba52443f9b7f4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;configuration#appendixes-configuration-extensions-extension-arguments&quot;&gt;The &amp;lt;arguments&amp;gt; Element&lt;/a&gt; for details on how to use the &lt;code&gt;arguments&lt;/code&gt; configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffd1d656881256994f1765ad2328a503c15c17e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fixtures#fixtures-global-state&quot;&gt;Global State&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7448f49a86217992e83be8ae862c71eb04326979" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;the section called &amp;ldquo;Global State&amp;rdquo;&lt;/a&gt; for details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;fixtures#fixtures.global-state&quot;&gt;은&amp;ldquo;전역 상태&amp;rdquo;섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c6c88373f803589d4c186591993ac23e9561abe1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;textui#textui.examples.filter-patterns&quot;&gt;Example 3.2&lt;/a&gt; for examples of valid filter patterns.</source>
          <target state="translated">유효한 필터 패턴의 예는 &lt;a href=&quot;textui#textui.examples.filter-patterns&quot;&gt;예 3.2&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="100fb61de51efc9275e7d2ec6b05cdbb1fc3dc64" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;textui#textui.examples.filter-shortcuts&quot;&gt;Example 3.3&lt;/a&gt; for some additional shortcuts that are available for matching data providers.</source>
          <target state="translated">일치하는 데이터 공급자에 사용할 수있는 몇 가지 추가 바로 가기는 &lt;a href=&quot;textui#textui.examples.filter-shortcuts&quot;&gt;예 3.3&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6af4cd776126f4cbad3e79a2ce037bdcc2e2a77f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers&quot;&gt;Data Providers&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26859028ece706bb86bdde0b1cbed6e647d70979" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-data-providers&quot;&gt;Data Providers&lt;/a&gt; to learn more about passing a set of data to a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33376a418bc378efc8cb6c7f7b51362893bd5de" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit-test-dependencies&quot;&gt;Test Dependencies&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fddb9a07b73cffc561de86d1fff40bac094034ef" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers&quot;&gt;the section called &amp;ldquo;Data Providers&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers&quot;&gt;은&amp;ldquo;데이터 제공 업체&amp;rdquo;섹션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="de013037158c2f66306c3e726607540db1c032aa" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions&quot;&gt;the section called &amp;ldquo;Testing Exceptions&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.exceptions&quot;&gt;은&amp;ldquo;예외 테스트&amp;rdquo;&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ddc31a0eb2b6c484c3524060686335a03d03c165" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies&quot;&gt;the section called &amp;ldquo;Test Dependencies&amp;rdquo;&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.test-dependencies&quot;&gt;은&amp;ldquo;테스트 종속성&amp;rdquo;&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8de526126d0146c132ea71d5dd16bbe19241f244" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to disable this feature.</source>
          <target state="translated">설정 &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; 에 &lt;code&gt;false&lt;/code&gt; 이 기능을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="0323214292a03803b261425be4f52ad8e8737fe2" translate="yes" xml:space="preserve">
          <source>Set up fixture</source>
          <target state="translated">정착물 설정</target>
        </trans-unit>
        <trans-unit id="9447b4135080653abd2e9ad8db0727ace2cc20d3" translate="yes" xml:space="preserve">
          <source>Set up the expectation that the output is equal to an &lt;code&gt;$expectedString&lt;/code&gt;.</source>
          <target state="translated">출력이 &lt;code&gt;$expectedString&lt;/code&gt; 과 동일하다는 기대치를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="160dd02da00e824892e1e71a6b95a3a491a4b93d" translate="yes" xml:space="preserve">
          <source>Set up the expectation that the output matches a &lt;code&gt;$regularExpression&lt;/code&gt;.</source>
          <target state="translated">출력이 &lt;code&gt;$regularExpression&lt;/code&gt; 과 일치 할 것으로 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="6695262513b33f70308e32dac54d5fbc52e2a308" translate="yes" xml:space="preserve">
          <source>Sets the value of the given PHP configuration option.</source>
          <target state="translated">주어진 PHP 구성 옵션의 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0ee05ccfc38559f342a17e0fe4c74bf30a5dd845" translate="yes" xml:space="preserve">
          <source>Sets up a callback that is used to, for instance, normalize the actual output.</source>
          <target state="translated">예를 들어 실제 출력을 정규화하는 데 사용되는 콜백을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7c0f524205032e28bf5996cd4e347c13ca5df8e2" translate="yes" xml:space="preserve">
          <source>Setting PHP INI settings, Constants and Global Variables</source>
          <target state="translated">PHP INI 설정, 상수 및 전역 변수 설정</target>
        </trans-unit>
        <trans-unit id="dfef7651bee340fb2e3dc046136845c86b43482c" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;$backupGlobalsBlacklist&lt;/code&gt; property inside e.g. the &lt;code&gt;setUp()&lt;/code&gt; method has no effect.</source>
          <target state="translated">&lt;code&gt;setUp()&lt;/code&gt; 메서드와 같이 &lt;code&gt;$backupGlobalsBlacklist&lt;/code&gt; 속성을 설정해 도 아무 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="4dc7cd78f12b47c47bdbca3c58f61b7905f4eb97" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;$backupGlobalsExcludeList&lt;/code&gt; property inside e.g. the &lt;code&gt;setUp()&lt;/code&gt; method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f858090d3e7f11e031c74e8319ce049ee3d6c29" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;$backupStaticAttributesBlacklist&lt;/code&gt; property inside e.g. the &lt;code&gt;setUp()&lt;/code&gt; method has no effect.</source>
          <target state="translated">&lt;code&gt;setUp()&lt;/code&gt; 메소드와 같이 &lt;code&gt;$backupStaticAttributesBlacklist&lt;/code&gt; 속성을 설정해 도 아무 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="da31fed034799e38eaba9b5870e978906505b080" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;$backupStaticAttributesExcludeList&lt;/code&gt; property inside e.g. the &lt;code&gt;setUp()&lt;/code&gt; method has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cce9e3fe005c24f82ba7f7c90a1ea850bb9f24a" translate="yes" xml:space="preserve">
          <source>Setting this attribute to &lt;code&gt;false&lt;/code&gt; is equivalent to using the &lt;code&gt;--colors=never&lt;/code&gt; CLI option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47db6540045b49655bd90245b88cb8e8a86f503b" translate="yes" xml:space="preserve">
          <source>Setting this attribute to &lt;code&gt;true&lt;/code&gt; is equivalent to using the &lt;code&gt;--colors=auto&lt;/code&gt; CLI option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d2656321a5a293de452fde10bbd00c1468df69" translate="yes" xml:space="preserve">
          <source>Sharing Fixture</source>
          <target state="translated">비품 공유</target>
        </trans-unit>
        <trans-unit id="48f0b087d596a91559cda64289d67bfa8dbf2790" translate="yes" xml:space="preserve">
          <source>Similarily, if &lt;code&gt;m&lt;/code&gt; had a return type declaration for a scalar type then a return value such as &lt;code&gt;0&lt;/code&gt; (for &lt;code&gt;int&lt;/code&gt;), &lt;code&gt;0.0&lt;/code&gt; (for &lt;code&gt;float&lt;/code&gt;), or &lt;code&gt;[]&lt;/code&gt; (for &lt;code&gt;array&lt;/code&gt;) would be generated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0c16dbc955b14c2425a814443ff6af2c70b2ff" translate="yes" xml:space="preserve">
          <source>Simply add a (development-time) dependency on &lt;code&gt;phpunit/phpunit&lt;/code&gt; to your project's &lt;code&gt;composer.json&lt;/code&gt; file if you use &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; to manage the dependencies of your project:</source>
          <target state="translated">&lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; 를 사용 하여 프로젝트의 종속성을 관리하는 경우 &lt;code&gt;phpunit/phpunit&lt;/code&gt; 에 대한 (개발 시간) 종속성을 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 파일 에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="1d4b4c5b6c9707bf9214b1cba58ee5615b528385" translate="yes" xml:space="preserve">
          <source>Simply add a dependency on &lt;code&gt;mikey179/vfsStream&lt;/code&gt; to your project's &lt;code&gt;composer.json&lt;/code&gt; file if you use &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; to manage the dependencies of your project. Here is a minimal example of a &lt;code&gt;composer.json&lt;/code&gt; file that just defines a development-time dependency on PHPUnit 4.6 and vfsStream:</source>
          <target state="translated">&lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; 를 사용 하여 프로젝트의 종속성을 관리하는 경우 &lt;code&gt;mikey179/vfsStream&lt;/code&gt; 에 대한 종속성을 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 파일 에 추가하기 만하면 됩니다. 다음은 PHPUnit 4.6 및 vfsStream에 대한 개발 시간 종속성을 정의하는 &lt;code&gt;composer.json&lt;/code&gt; 파일 의 최소 ​​예입니다 .</target>
        </trans-unit>
        <trans-unit id="8f0f366cccf3bf1ccdf95ff96c358d6ed87801e2" translate="yes" xml:space="preserve">
          <source>Since each test completely cleans the database you are not even required to re-create the database for each test-run. A permanently available database works perfectly.</source>
          <target state="translated">각 테스트는 데이터베이스를 완전히 정리하므로 테스트 실행마다 데이터베이스를 다시 만들 필요조차 없습니다. 영구적으로 사용 가능한 데이터베이스가 완벽하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="9a559e46e82b636d9ce68b3f4bf619caaf155ab7" translate="yes" xml:space="preserve">
          <source>Since the filesystem operations do not operate on the real filesystem anymore, cleanup operations in a &lt;code&gt;tearDown()&lt;/code&gt; method are no longer required.</source>
          <target state="translated">파일 시스템 작업이 더 이상 실제 파일 시스템에서 작동하지 않으므로 &lt;code&gt;tearDown()&lt;/code&gt; 메서드의 정리 작업 이 더 이상 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="48b985aa9defb1014767284f29442091a4b1f8f6" translate="yes" xml:space="preserve">
          <source>Since there is always a first test that runs against the database you do not know exactly if there is already data in the tables. PHPUnit will execute a TRUNCATE against all the tables you specified to reset their status to empty.</source>
          <target state="translated">데이터베이스에 대해 실행되는 첫 번째 테스트가 항상 있기 때문에 이미 테이블에 데이터가 있는지 정확하게 알 수 없습니다. PHPUnit은 지정된 모든 테이블에 대해 TRUNCATE를 실행하여 상태를 비 웁니다.</target>
        </trans-unit>
        <trans-unit id="9b9e30605cb93848800cb16fd2160fc8c4661110" translate="yes" xml:space="preserve">
          <source>Skipping Tests</source>
          <target state="translated">테스트 건너 뛰기</target>
        </trans-unit>
        <trans-unit id="01c53dd387a7008f94c8928fbdcf90905f57e52a" translate="yes" xml:space="preserve">
          <source>Skipping Tests using @requires</source>
          <target state="translated">@requires를 사용하여 테스트 건너 뛰기</target>
        </trans-unit>
        <trans-unit id="2122aebb6bf94dd0e5179b7fcfb3524929a168a0" translate="yes" xml:space="preserve">
          <source>Software Metrics for Code Coverage</source>
          <target state="translated">코드 범위에 대한 소프트웨어 메트릭</target>
        </trans-unit>
        <trans-unit id="889758f3af7c324b70421a258b74a8bf92644ba1" translate="yes" xml:space="preserve">
          <source>Sometimes a stubbed method should return different values depending on a predefined list of arguments. You can use &lt;code&gt;returnValueMap()&lt;/code&gt; to create a map that associates arguments with corresponding return values. See &lt;a href=&quot;#test-doubles-stubs-examples-stubtest5-php&quot;&gt;Example 8.7&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7dada32df447612e3a066daedbf70cc04ef15e6" translate="yes" xml:space="preserve">
          <source>Sometimes a stubbed method should return different values depending on a predefined list of arguments. You can use &lt;code&gt;returnValueMap()&lt;/code&gt; to create a map that associates arguments with corresponding return values. See &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest5.php&quot;&gt;Example 9.6&lt;/a&gt; for an example.</source>
          <target state="translated">때때로 스텁 된 메소드는 사전 정의 된 인수 목록에 따라 다른 값을 리턴해야합니다. &lt;code&gt;returnValueMap()&lt;/code&gt; 을 사용하여 인수를 해당 반환 값과 연결하는 맵을 만들 수 있습니다 . &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest5.php&quot;&gt;예는 예 9.6&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e8a6a73c794d5c2f69ba8ea31755213bf290e926" translate="yes" xml:space="preserve">
          <source>Sometimes it is just plain hard to test the system under test (SUT) because it depends on other components that cannot be used in the test environment. This could be because they aren&amp;rsquo;t available, they will not return the results needed for the test or because executing them would have undesirable side effects. In other cases, our test strategy requires us to have more control or visibility of the internal behavior of the SUT.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b237baf52124722804b7ce34390751ccffbc4334" translate="yes" xml:space="preserve">
          <source>Sometimes it is just plain hard to test the system under test (SUT) because it depends on other components that cannot be used in the test environment. This could be because they aren't available, they will not return the results needed for the test or because executing them would have undesirable side effects. In other cases, our test strategy requires us to have more control or visibility of the internal behavior of the SUT.</source>
          <target state="translated">테스트 환경에서 사용할 수없는 다른 구성 요소에 의존하기 때문에 테스트 대상 시스템 (SUT)을 테스트하기가 어려운 경우가 있습니다. 사용 불가능하거나 테스트에 필요한 결과를 반환하지 않거나 실행시 바람직하지 않은 부작용이있을 수 있습니다. 다른 경우에는 테스트 전략에 따라 SUT의 내부 동작에 대한 제어 또는 가시성이 높아져야합니다.</target>
        </trans-unit>
        <trans-unit id="dc68851fae68ce39e29663a9544d2ef1c9e62cf9" translate="yes" xml:space="preserve">
          <source>Sometimes you have blocks of code that you cannot test and that you may want to ignore during code coverage analysis. PHPUnit lets you do this using the &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations as shown in &lt;a href=&quot;#code-coverage-analysis-ignoring-code-blocks-examples-sample-php&quot;&gt;Example 9.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc7e0be92362d6ab972d3a0cc8c56a413712ea4" translate="yes" xml:space="preserve">
          <source>Sometimes you have blocks of code that you cannot test and that you may want to ignore during code coverage analysis. PHPUnit lets you do this using the &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations as shown in &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks.examples.Sample.php&quot;&gt;Example 11.1&lt;/a&gt;.</source>
          <target state="translated">때로는 테스트 할 수없고 코드 범위 분석 중에 무시할 수있는 코드 블록이 있습니다. PHPUnit은 &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.ignoring-code-blocks.examples.Sample.php&quot;&gt;Example 11.1&lt;/a&gt; 과 같이 &lt;code&gt;@codeCoverageIgnore&lt;/code&gt; , &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; 및 &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; 어노테이션을 사용하여 이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="57724334772dfd11f76ce837572f96abaf56a198" translate="yes" xml:space="preserve">
          <source>Sometimes you want to assert that the execution of a method, for instance, generates an expected output (via &lt;code&gt;echo&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;, for example). The &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class uses PHP&amp;rsquo;s &lt;a href=&quot;http://www.php.net/manual/en/ref.outcontrol.php&quot;&gt;Output Buffering&lt;/a&gt; feature to provide the functionality that is necessary for this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f004dcdd1b53cb8a142518c657d636752efa4edf" translate="yes" xml:space="preserve">
          <source>Sometimes you want to assert that the execution of a method, for instance, generates an expected output (via &lt;code&gt;echo&lt;/code&gt; or &lt;code&gt;print&lt;/code&gt;, for example). The &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class uses PHP's &lt;a href=&quot;http://www.php.net/manual/en/ref.outcontrol.php&quot;&gt;Output Buffering&lt;/a&gt; feature to provide the functionality that is necessary for this.</source>
          <target state="translated">예를 들어, 메소드의 실행이 예를 들어 &lt;code&gt;echo&lt;/code&gt; 또는 &lt;code&gt;print&lt;/code&gt; 등을 통해 예상되는 출력을 생성한다고 주장하기를 원할 때가 있습니다 . &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 클래스는 PHP의 사용 &lt;a href=&quot;http://www.php.net/manual/en/ref.outcontrol.php&quot;&gt;출력 버퍼링&lt;/a&gt; 이 필요합니다 기능을 제공하는 기능을.</target>
        </trans-unit>
        <trans-unit id="947027be32b60a8732729f813d638fc3b6223233" translate="yes" xml:space="preserve">
          <source>Sometimes you want to return one of the arguments of a method call (unchanged) as the result of a stubbed method call. &lt;a href=&quot;#test-doubles-stubs-examples-stubtest3-php&quot;&gt;Example 8.5&lt;/a&gt; shows how you can achieve this using &lt;code&gt;returnArgument()&lt;/code&gt; instead of &lt;code&gt;returnValue()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01ce7eb42c1dfd947d2feaf63974766480fbad0" translate="yes" xml:space="preserve">
          <source>Sometimes you want to return one of the arguments of a method call (unchanged) as the result of a stubbed method call. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest3.php&quot;&gt;Example 9.4&lt;/a&gt; shows how you can achieve this using &lt;code&gt;returnArgument()&lt;/code&gt; instead of &lt;code&gt;returnValue()&lt;/code&gt;.</source>
          <target state="translated">스텁 된 메소드 호출의 결과로 메소드 호출 (변경되지 않은)의 인수 중 하나를 리턴하려는 경우가 있습니다. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest3.php&quot;&gt;Example 9.4&lt;/a&gt; 에서는 &lt;code&gt;returnValue()&lt;/code&gt; 대신 &lt;code&gt;returnArgument()&lt;/code&gt; 를 사용하여 이를 수행하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="572909ffc6603da2d488956ee0cf668396c497be" translate="yes" xml:space="preserve">
          <source>Specifies an alternative description used when generating the agile documentation sentences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b943e40ca8b8962535e7b639cf420c561a9720" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all methods of a given class and its parent class(es).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc9deeadb9733df2d5139f77fac6b7bb3790766" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all methods of a given class that are not private.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14db3cffd5fa0ecb24c0c617d34cf83e169bdac2" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all methods of a given class that are not protected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f592ef5a4e959fc6006813a2b32000fd2faef03d" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all methods of a given class that are not public.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64f2c5598e00ffa4e55fdf1bcfda44bf7487145" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all methods of a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b66e8de7b8ba694bedf044d94bc059858ff34bd6" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all private methods of a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf93cfb9230eccc73ee76c4de6db6b412951d737" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all protected methods of a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fc96175a9dd39088ba20dc9ced965ed4973258" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers all public methods of a given class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c996271ae7ea7cbca14f4750a8133fae4a300ef5" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers the specified global function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="747dfb71c626dbded20ce18439ce17a6fc69d31b" translate="yes" xml:space="preserve">
          <source>Specifies that the annotated test method covers the specified method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a8522512521cd6bbb2ba6838fd137db5d0b90c4" translate="yes" xml:space="preserve">
          <source>Specifies the &lt;code&gt;PHPUnit\Runner\TestSuiteLoader&lt;/code&gt; implementation to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a256b72d28e9dc0ae291b39cd90018ef934dd727" translate="yes" xml:space="preserve">
          <source>Specifies the &lt;code&gt;PHPUnit_Runner_TestSuiteLoader&lt;/code&gt; implementation to use.</source>
          <target state="translated">사용할 &lt;code&gt;PHPUnit_Runner_TestSuiteLoader&lt;/code&gt; 구현을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="783a395d499fcb5444bbfb933871f9c20e3cee6b" translate="yes" xml:space="preserve">
          <source>Specifies the result printer to use. The printer class must extend &lt;code&gt;PHPUnit\Util\Printer&lt;/code&gt; and implement the &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3ed3a080dc26fa96f085a819c4f579cd64af33" translate="yes" xml:space="preserve">
          <source>Specifies the result printer to use. The printer class must extend &lt;code&gt;PHPUnit_Util_Printer&lt;/code&gt; and implement the &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; interface.</source>
          <target state="translated">사용할 결과 프린터를 지정합니다. 프린터 클래스는 &lt;code&gt;PHPUnit_Util_Printer&lt;/code&gt; 를 확장 하고 &lt;code&gt;PHPUnit\Framework\TestListener&lt;/code&gt; 인터페이스를 구현 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ed727bba739e8581316eab50b5f960c359a4cbe7" translate="yes" xml:space="preserve">
          <source>Specify one or more tables in your database by table name (actual dataset)</source>
          <target state="translated">데이터베이스에서 테이블 이름 (실제 데이터 세트)으로 하나 이상의 테이블을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="192e805e289c654000897a49602f0f87a9106b59" translate="yes" xml:space="preserve">
          <source>Specify the expected dataset in your preferred format (YAML, XML, ..)</source>
          <target state="translated">원하는 형식으로 원하는 데이터 세트를 지정하십시오 (YAML, XML, ..)</target>
        </trans-unit>
        <trans-unit id="4ae42301d536a8378600e878b848c0a18a46458a" translate="yes" xml:space="preserve">
          <source>Specifying Covered Code Parts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="152c38cebb53cb3cfce38c3ec2bae340b7eee4aa" translate="yes" xml:space="preserve">
          <source>Specifying Covered Methods</source>
          <target state="translated">적용되는 방법 지정</target>
        </trans-unit>
        <trans-unit id="ae66f9e53b94aa1d926ef1fe9f0b13ca45b0afcf" translate="yes" xml:space="preserve">
          <source>Static vs. Non-Static Usage of Assertion Methods</source>
          <target state="translated">어설 션 방법의 정적 및 비 정적 사용법</target>
        </trans-unit>
        <trans-unit id="fa5e66805e285bd033c817b0caa08e69f5c57bbe" translate="yes" xml:space="preserve">
          <source>Stop execution upon first error or failure.</source>
          <target state="translated">첫 번째 오류 또는 실패시 실행을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="62b9c1c735c341daae5e08a4bb2c16603d724f6e" translate="yes" xml:space="preserve">
          <source>Stop execution upon first error.</source>
          <target state="translated">첫 번째 오류 발생시 실행을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="37fe4a1127ce0fceff431a3ea857b60d5f207460" translate="yes" xml:space="preserve">
          <source>Stop execution upon first incomplete test.</source>
          <target state="translated">불완전한 첫 테스트에서 실행을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="7676f1a62b448fd392d7c5f653745c97268f89df" translate="yes" xml:space="preserve">
          <source>Stop execution upon first risky test.</source>
          <target state="translated">첫 번째 위험한 테스트에서 실행을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="faf6c0967380807a3610b25a54293422a6f2f059" translate="yes" xml:space="preserve">
          <source>Stop execution upon first skipped test.</source>
          <target state="translated">처음 건너 뛴 테스트에서 실행을 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="d368e8bc583521944131c688e267d5d16c878524" translate="yes" xml:space="preserve">
          <source>Stubbing and Mocking Web Services</source>
          <target state="translated">웹 서비스 스터 빙 및 조롱</target>
        </trans-unit>
        <trans-unit id="3107408a50c756bdc03dcf7d5aed6d74eb0c9e3e" translate="yes" xml:space="preserve">
          <source>Stubs</source>
          <target state="translated">Stubs</target>
        </trans-unit>
        <trans-unit id="130a26082452b602de072ae244a14d7c656d4205" translate="yes" xml:space="preserve">
          <source>Subclass PHPUnit\Framework\TestCase</source>
          <target state="translated">서브 클래스 PHPUnit \ Framework \ TestCase</target>
        </trans-unit>
        <trans-unit id="ad01c5f01996376e20d26c236754d61c656c65b9" translate="yes" xml:space="preserve">
          <source>Subclass PHPUnit_Extensions_TestDecorator</source>
          <target state="translated">서브 클래스 PHPUnit_Extensions_TestDecorator</target>
        </trans-unit>
        <trans-unit id="c7acd44159798a4d30afd05442f60a36487a3d9d" translate="yes" xml:space="preserve">
          <source>Super-global variables are built-in variables that are always available in all scopes.</source>
          <target state="translated">수퍼 글로벌 변수는 모든 범위에서 항상 사용 가능한 내장 변수입니다.</target>
        </trans-unit>
        <trans-unit id="5823fd46abd94efb287392a640ac7d2b2dfd49dd" translate="yes" xml:space="preserve">
          <source>Supported Vendors for Database Testing</source>
          <target state="translated">데이터베이스 테스트를 위해 지원되는 공급 업체</target>
        </trans-unit>
        <trans-unit id="751497c7a111ae783226a5c51a2252147106327d" translate="yes" xml:space="preserve">
          <source>Table 1.1 Constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20441380e2e00a65f819c14c0ba2e7ffd49070c1" translate="yes" xml:space="preserve">
          <source>Table 2.1 Methods for testing output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b475f5a043222840a1c2e9286ab4fd8ca098fbb6" translate="yes" xml:space="preserve">
          <source>Table 2.2 Annotations for specifying which methods are covered by a test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a605760e7d3883e2c9226c63d51c3684a477c78" translate="yes" xml:space="preserve">
          <source>Table 7.1 API for Incomplete Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb54e43e0ab341c856d4e09eb9933f2d9abb37f" translate="yes" xml:space="preserve">
          <source>Table 7.2 API for Skipping Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de760843ce8e32c78b51faf77090fc5d0d9b1850" translate="yes" xml:space="preserve">
          <source>Table 7.3 Possible @requires usages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75f735f731154e5d080f667c9eb09d49a952fc61" translate="yes" xml:space="preserve">
          <source>Table 8.1 Matchers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b28e087c84f9486e767387a394931771cdb6eca" translate="yes" xml:space="preserve">
          <source>Teardown</source>
          <target state="translated">Teardown</target>
        </trans-unit>
        <trans-unit id="36dd5675667d3929fbc53aebd125834b78fd5711" translate="yes" xml:space="preserve">
          <source>Test Dependencies</source>
          <target state="translated">테스트 종속성</target>
        </trans-unit>
        <trans-unit id="8ca46ef63a3cf34638b522cfdf607fca7e78d4c0" translate="yes" xml:space="preserve">
          <source>Test Doubles</source>
          <target state="translated">테스트 복식</target>
        </trans-unit>
        <trans-unit id="60fabbf6eed3616b6ab797cab1b4dbb8648f3e66" translate="yes" xml:space="preserve">
          <source>Test Execution Timeout</source>
          <target state="translated">테스트 실행 시간 초과</target>
        </trans-unit>
        <trans-unit id="dddb3d7341ecdc71821fdf432eeb7abfba4bc948" translate="yes" xml:space="preserve">
          <source>Test Listeners</source>
          <target state="translated">테스트 리스너</target>
        </trans-unit>
        <trans-unit id="98ade78abe5775e572703302a9d9af51436a6b7a" translate="yes" xml:space="preserve">
          <source>Test Results (XML)</source>
          <target state="translated">테스트 결과 (XML)</target>
        </trans-unit>
        <trans-unit id="d5a326813d73a0152b05ec653cd778de1de65124" translate="yes" xml:space="preserve">
          <source>Test Suites</source>
          <target state="translated">테스트 스위트</target>
        </trans-unit>
        <trans-unit id="37733d7d69cdf89090c38da2a4832f20c9e04c2d" translate="yes" xml:space="preserve">
          <source>Test code should be as short and precise as possible for several reasons:</source>
          <target state="translated">테스트 코드는 여러 가지 이유로 가능한 짧고 정확해야합니다.</target>
        </trans-unit>
        <trans-unit id="30f86836586153a2344122ec13684c9be72236d8" translate="yes" xml:space="preserve">
          <source>TestDox</source>
          <target state="translated">TestDox</target>
        </trans-unit>
        <trans-unit id="30271fdd4bbccc7ac4a8a31a93f85e22eadae576" translate="yes" xml:space="preserve">
          <source>TestNamespace\TestCaseClass::testMethod</source>
          <target state="translated">TestNamespace\TestCaseClass::testMethod</target>
        </trans-unit>
        <trans-unit id="47b97dc2236a95b7bf474f628fbbfc6afc41ba53" translate="yes" xml:space="preserve">
          <source>TestNamespace\TestCaseClass::testMethod with data set &quot;my named data&quot;</source>
          <target state="translated">데이터 세트가 &quot;my named data&quot;인 TestNamespace \ TestCaseClass :: testMethod</target>
        </trans-unit>
        <trans-unit id="1486df7a08312babc0ab0c36aaed3a196db1f90c" translate="yes" xml:space="preserve">
          <source>TestNamespace\TestCaseClass::testMethod with data set #0</source>
          <target state="translated">데이터 세트가 # 0 인 TestNamespace \ TestCaseClass :: testMethod</target>
        </trans-unit>
        <trans-unit id="40515ef277ef1a89e8fe08934c46dea0238f7ade" translate="yes" xml:space="preserve">
          <source>Testing Exceptions</source>
          <target state="translated">예외 테스트</target>
        </trans-unit>
        <trans-unit id="eb9bc6f37773b470b19307a114b1e5643bc2c22f" translate="yes" xml:space="preserve">
          <source>Testing Output</source>
          <target state="translated">테스트 출력</target>
        </trans-unit>
        <trans-unit id="f379bf7dbb840672dcd72036531284a2dc880805" translate="yes" xml:space="preserve">
          <source>Testing PHP Errors</source>
          <target state="translated">PHP 오류 테스트</target>
        </trans-unit>
        <trans-unit id="ab3b4488f78be97f38374aa3d4c6d6ca4ca4c906" translate="yes" xml:space="preserve">
          <source>Testing PHP Errors, Warnings, and Notices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac78d923414adf5446f250b21421f16d2ecace7" translate="yes" xml:space="preserve">
          <source>Testing Practices</source>
          <target state="translated">테스트 관행</target>
        </trans-unit>
        <trans-unit id="12ca4d589bcd08a7949ab4709614718f1e7b0490" translate="yes" xml:space="preserve">
          <source>Testing gives code authors and reviewers confidence that patches produce the correct results.</source>
          <target state="translated">테스트는 코드 작성자와 검토 자에게 패치가 올바른 결과를 생성한다는 확신을줍니다.</target>
        </trans-unit>
        <trans-unit id="985b343175dcc48aa07596ccb6a17f731a90eeeb" translate="yes" xml:space="preserve">
          <source>Testing provides a good way to catch regressions quickly, and to make sure that no regression will be repeated twice.</source>
          <target state="translated">테스트는 회귀를 빠르게 포착하고 회귀가 두 번 반복되지 않도록하는 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="3a7d907119da653effcca1ec7c2406dbd8273d84" translate="yes" xml:space="preserve">
          <source>Testing the database requires you to hook into at least the setup and teardown to clean-up and write the required fixture data into your tables. However, the database extension has good reason to revert the four stages in a database test to resemble the following workflow that is executed for each single test:</source>
          <target state="translated">데이터베이스를 테스트하려면 필요한 픽스처 데이터를 정리하고 테이블에 기록하기 위해 최소한 설정 및 해제에 연결해야합니다. 그러나 데이터베이스 확장은 데이터베이스 테스트에서 4 가지 단계를 되돌려 각 단일 테스트에 대해 실행되는 다음 워크 플로우와 유사해야합니다.</target>
        </trans-unit>
        <trans-unit id="e889f827f82246ecd04ad1861bc93af8e3385c3f" translate="yes" xml:space="preserve">
          <source>Tests can be selected for execution based on groups using the &lt;code&gt;--group&lt;/code&gt; and &lt;code&gt;--exclude-group&lt;/code&gt; options of the command-line test runner or using the respective directives of the XML configuration file.</source>
          <target state="translated">명령 줄 테스트 실행기 의 &lt;code&gt;--group&lt;/code&gt; 및 &lt;code&gt;--exclude-group&lt;/code&gt; 옵션을 사용하거나 XML 구성 파일의 해당 지시문을 사용하여 그룹을 기반으로 실행할 테스트를 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ff8ccced5d49268612f4e12fecd13a3c0ea42964" translate="yes" xml:space="preserve">
          <source>Tests need to be explicitly annotated by either &lt;code&gt;@small&lt;/code&gt;, &lt;code&gt;@medium&lt;/code&gt;, or &lt;code&gt;@large&lt;/code&gt; to enable run time limits.</source>
          <target state="translated">시험은 명시 적 중 하나에 의해 주석 될 필요가 &lt;code&gt;@small&lt;/code&gt; , &lt;code&gt;@medium&lt;/code&gt; , 또는 &lt;code&gt;@large&lt;/code&gt; 실행 시간 제한을 가능하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32b7add19944464840ed23bf15f0db5e22d1c19d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://php.net/manual/en/phar.installation.php&quot;&gt;phar&lt;/a&gt; extension is required for using PHP Archives (PHAR).</source>
          <target state="translated">&lt;a href=&quot;http://php.net/manual/en/phar.installation.php&quot;&gt;의 Phar&lt;/a&gt; 연장 PHP 아카이브 (의 Phar)를 사용하기 위해 필요하다.</target>
        </trans-unit>
        <trans-unit id="10757842c7f604407097f8e09324720d9e126fa7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;Doctrine 2 project&lt;/a&gt;'s test suite, for example, currently has a test suite of about 1000 tests where nearly half of them accesses the database and still runs in 15 seconds against a MySQL database on a standard desktop computer.</source>
          <target state="translated">&lt;a href=&quot;http://www.doctrine-project.org&quot;&gt;교리 2 프로젝트&lt;/a&gt; 의 테스트 스위트는, 예를 들어, 현재 거의 절반 그들의 표준 데스크톱 컴퓨터에 MySQL 데이터베이스에 대한 15초에서 실행 여전히 데이터베이스에 액세스 1000에 대한 테스트의 테스트 스위트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="07934fde393c219cfc48b588b42c8f8ae9441980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$GLOBALS&lt;/code&gt; variable is a so-called &lt;em&gt;super-global&lt;/em&gt; variable.</source>
          <target state="translated">&lt;code&gt;$GLOBALS&lt;/code&gt; 변수는 이른바 &lt;em&gt;슈퍼 글로벌&lt;/em&gt; 변수입니다.</target>
        </trans-unit>
        <trans-unit id="d1bebee9626af32056db87fd96fa537b9aeebe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$expected&lt;/code&gt; object must be compatible with this declared type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933793c342aa1368517d8339c85bc25b1e2cd10e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$index&lt;/code&gt; parameter for the &lt;code&gt;at()&lt;/code&gt; matcher refers to the index, starting at zero, in &lt;em&gt;all method invocations&lt;/em&gt; for a given mock object. Exercise caution when using this matcher as it can lead to brittle tests which are too closely tied to specific implementation details.</source>
          <target state="translated">&lt;code&gt;at()&lt;/code&gt; 매처 의 &lt;code&gt;$index&lt;/code&gt; 매개 변수 는 주어진 모의 객체에 대한 &lt;em&gt;모든 메소드 호출&lt;/em&gt; 에서 0부터 시작하는 색인을 참조 합니다. 이 매처를 사용할 때는 특정 구현 세부 사항과 너무 밀접하게 연관된 취성 테스트를 초래할 수 있으므로주의하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f5d8adc102d09cef0f4e53edc494cc4388b86fc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;arguments&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85d7f414d4d515b85680ec9205c34778d385e9cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;arguments&amp;gt;&lt;/code&gt; element can be used to configure a single &lt;code&gt;&amp;lt;extension&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b4d1a1ab721c2807e3a78c89d44b649bbe89f57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;clover&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a026763819b08dc2c037f2497da04ec3ddf2f7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="139e2f1477b9fb915d899186769d4573432b0b96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;cookie&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b66eb292708ca40288508eb22856962200914e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;coverage&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3de955cba5e2a8dde3ba033eccea3d6d363ea0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;coverage&amp;gt;&lt;/code&gt; element and its children can be used to configure code coverage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9211f20fa709963065670d3fb38a757251926054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;crap4j&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b523eb6d6e800b3f4620615081d8a51ba5ab6ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;directory&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513644a7c2022044009c43861919c312cc8862d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;env&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffeccc4d27786864bd736dcc1bd63e23543226b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;exclude&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4093aa6b0afa20d5cdd871a180509fff7f29a265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;extension&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b1595bf3b4128181b814e619caa909dda60680" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;extensions&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="540b2b02c5b4e49dba08617edd027f6dd651ed7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;extensions&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;extension&amp;gt;&lt;/code&gt; children can be used to register test runner extensions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb60d0cdfb15155297a1801fa10b8489776b318e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72390b01283e5418626f23b66ba13e9f2f8b1dc5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;files&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="900d34630e1c1ed1e4b46aec6e78885aa098fd75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;filter&amp;gt;&lt;/code&gt; element and its children can be used to configure the whitelist for the code coverage reporting.</source>
          <target state="translated">&lt;code&gt;&amp;lt;filter&amp;gt;&lt;/code&gt; 요소와 어린이는 코드 커버리지보고를위한 화이트리스트를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3959c668deb0e146b9b754e28152bdcd7a10ac0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;get&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9e6fb8ccd6d14ccfba4eb79c3c0c3c04b805c0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;groups&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7889cebb07ad03a7434e59e176e1cda83779008" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;groups&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;exclude&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;group&amp;gt;&lt;/code&gt; children can be used to select groups of tests marked with the &lt;code&gt;@group&lt;/code&gt; annotation (documented in &lt;a href=&quot;annotations#appendixes-annotations-group&quot;&gt;@group&lt;/a&gt;) that should (not) be run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d91061b9543b9732b944bf26bfd640c76cd336b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;groups&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;exclude&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;group&amp;gt;&lt;/code&gt; children can be used to select groups of tests marked with the &lt;code&gt;@group&lt;/code&gt; annotation (documented in &lt;a href=&quot;appendixes.annotations#appendixes.annotations.group&quot;&gt;the section called &amp;ldquo;@group&amp;rdquo;&lt;/a&gt;) that should (not) be run.</source>
          <target state="translated">&lt;code&gt;&amp;lt;groups&amp;gt;&lt;/code&gt; 요소와 &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;exclude&amp;gt;&lt;/code&gt; , 그리고 &lt;code&gt;&amp;lt;group&amp;gt;&lt;/code&gt; 아이들이 표시된 테스트 그룹을 선택할 수 있습니다 &lt;code&gt;@group&lt;/code&gt; 의 (에 설명 주석 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.group&quot;&gt;&quot;@group&quot;라는 섹션을&lt;/a&gt; )해야한다 (안) 달려라.</target>
        </trans-unit>
        <trans-unit id="5a161a715347d23f919215fd6c6d19534e86dca1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0984b3ee5da0b663058897e0a56b7e526be6a573" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;include&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d30684f0bfc64aae3a8c583760b7e28836f122e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;includePath&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e02dbbe54c9eedad87c37f5799ecad58254e292" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;ini&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0667ca34eca0f2d97ffa721e32563608b34fc651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;junit&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ec6aa3075fdccb3819205d7291d08aafe998911" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;listener&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7884d396c363230f0255ab01d1d4231b6e2d6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;listeners&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508a8036917f62abd4cc4fa2acf1622b228ad0df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;listeners&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;listener&amp;gt;&lt;/code&gt; children can be used to attach additional test listeners to the test execution.</source>
          <target state="translated">&lt;code&gt;&amp;lt;listeners&amp;gt;&lt;/code&gt; 요소와 &lt;code&gt;&amp;lt;listener&amp;gt;&lt;/code&gt; 아이들은 테스트 실행에 추가 테스트 리스너를 연결하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="98fe5b5fb16640c3633cca41c468197217e10904" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;logging&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="313f204e5017217c537dcdd0d4f6816442884103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;logging&amp;gt;&lt;/code&gt; element and its &lt;code&gt;&amp;lt;log&amp;gt;&lt;/code&gt; children can be used to configure the logging of the test execution.</source>
          <target state="translated">&lt;code&gt;&amp;lt;logging&amp;gt;&lt;/code&gt; 요소와 &lt;code&gt;&amp;lt;log&amp;gt;&lt;/code&gt; 아이들은 테스트 실행의 로깅을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2b76701000bbe3dfb78191de450b144dce12713" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;logging&amp;gt;&lt;/code&gt; element and its children can be used to configure the logging of the test execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa8c820126f2d8c8104019e2dc9b714290aa550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;php&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3c5961dfdad9711e235937fd66a0701353fed3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;php&amp;gt;&lt;/code&gt; element and its children can be used to configure PHP settings, constants, and global variables. It can also be used to prepend the &lt;code&gt;include_path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;php&amp;gt;&lt;/code&gt; 요소와 아이들은 PHP를 구성 설정, 상수 및 글로벌 변수에 사용할 수 있습니다. &lt;code&gt;include_path&lt;/code&gt; 앞에 붙일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4e978b01c22c1c05f4c679e7ec109c7ad14b6385" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;phpunit&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22ccaf3b469277806a92ba947c74e3a3936479b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;post&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3c9cf46314637dac9b05b9be5c41003f3419d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;report&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56bf347231b8da63f449d4a6faf0d29b19ae2d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;request&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a37f1f6edbe3be428764a888d2e80f98598417" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;server&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93d989b950ac436ae297cafcd6c49a06eaece600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;teamcity&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85064f796c95ad6a78c851ba76779a62d1a292bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testdoxGroups&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2526f58806fb5fb94c05ef7bceb4bc561d1011f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testdoxHtml&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fef5a31ef2a15792f26f1b2437bda07b3c7782" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testdoxText&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a55cb0a1d7b022203a0609dc030c0fef974014ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testdoxXml&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd6d2e3e98ee678998194175e24029b381a1109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testsuite&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="379515331e5e059292c29cfd3f4a3f68e9562bcb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testsuites&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471072cbaacaef945753828f7bf3fd63fd5c3688" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;testsuites&amp;gt;&lt;/code&gt; element and its one or more &lt;code&gt;&amp;lt;testsuite&amp;gt;&lt;/code&gt; children can be used to compose a test suite out of test suites and test cases.</source>
          <target state="translated">&lt;code&gt;&amp;lt;testsuites&amp;gt;&lt;/code&gt; 요소와 하나 이상의 &lt;code&gt;&amp;lt;testsuite&amp;gt;&lt;/code&gt; 아이들이 테스트 스위트 및 테스트 케이스의 테스트 스위트를 구성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97525d089b9d8b12517446f4cad5c456077b53ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;text&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="997269fbe41e52adce4e979708337b4af77dc7b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;var&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bce82e98b1f0541a998c4e4b21f6e82ac50341c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;xml&amp;gt;&lt;/code&gt; Element</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0f2e6cb3c3ed4592b98ae36d959efb58d2bcaef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@after&lt;/code&gt; annotation can be used to specify methods that should be called after each test method in a test case class.</source>
          <target state="translated">&lt;code&gt;@after&lt;/code&gt; 주석은 테스트 케이스 클래스의 각 시험 방법 다음에 호출되어야한다 방법을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a162271f9e4bdef938cc564e86bd86d787976f52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@afterClass&lt;/code&gt; annotation can be used to specify static methods that should be called after all test methods in a test class have been run to clean up shared fixtures.</source>
          <target state="translated">&lt;code&gt;@afterClass&lt;/code&gt; 주석은 테스트 클래스의 모든 테스트 방법 공유 비품을 정리하기 위해 실행 한 후 호출 할 필요가 정적 메서드를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d5caad0c6940190832666cca3c8613895d1f7be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; and &lt;code&gt;@ticket&lt;/code&gt; annotations are aliases for &lt;code&gt;@group&lt;/code&gt; allowing to filter tests based on their authors or their ticket identifiers, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a808a6856cca81e00781e3d0145b28340c89d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; annotation is an alias for &lt;code&gt;@group&lt;/code&gt; allowing to filter tests based on their authors.</source>
          <target state="translated">&lt;code&gt;@author&lt;/code&gt; 의 주석의 별칭입니다 &lt;code&gt;@group&lt;/code&gt; 그 저자에 따라 필터를 테스트 할 수 있도록.</target>
        </trans-unit>
        <trans-unit id="51f2d2562271278b5c58d3e5b7a0ca62fcd5995d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; annotation is an alias for the &lt;code&gt;@group&lt;/code&gt; annotation (see &lt;a href=&quot;#appendixes-annotations-group&quot;&gt;@group&lt;/a&gt;) and allows to filter tests based on their authors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab93cce524c64c8c632f83591bb039aa994f8643" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@author&lt;/code&gt; annotation is an alias for the &lt;code&gt;@group&lt;/code&gt; annotation (see &lt;a href=&quot;appendixes.annotations#appendixes.annotations.group&quot;&gt;the section called &amp;ldquo;@group&amp;rdquo;&lt;/a&gt;) and allows to filter tests based on their authors.</source>
          <target state="translated">&lt;code&gt;@author&lt;/code&gt; 의 주석은의 별칭입니다 &lt;code&gt;@group&lt;/code&gt; 의 주석 (참조 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.group&quot;&gt;&quot;@group&quot;라는 섹션&lt;/a&gt; )과 그 저자에 따라 필터를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5355fe2c7eaba8c6fa6b863fc6b3a81d64434ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupGlobals enabled&lt;/code&gt; annotation can be used on the class level to enable this operation for all tests of a test case class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f59f39d78da9339335a72d059e2194688170bc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupGlobals&lt;/code&gt; annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:</source>
          <target state="translated">&lt;code&gt;@backupGlobals&lt;/code&gt; 의 주석도 시험 방법 레벨에서 사용할 수 있습니다. 이를 통해 백업 및 복원 작업을 세밀하게 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f73b1cac0ada1b79c5a82b4a40b641c7e6e28ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupGlobals&lt;/code&gt; annotation that is discussed in &lt;a href=&quot;annotations#appendixes-annotations-backupglobals&quot;&gt;@backupGlobals&lt;/a&gt; can be used to control the backup and restore operations for global variables. Alternatively, you can provide a list of global variables that are to be excluded from the backup and restore operations like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfd210adf12fc299a71ecbf43a76ffdefd36f21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupGlobals&lt;/code&gt; annotation that is discussed in &lt;a href=&quot;appendixes.annotations#appendixes.annotations.backupGlobals&quot;&gt;the section called &amp;ldquo;@backupGlobals&amp;rdquo;&lt;/a&gt; can be used to control the backup and restore operations for global variables. Alternatively, you can provide a blacklist of global variables that are to be excluded from the backup and restore operations like this</source>
          <target state="translated">&lt;a href=&quot;appendixes.annotations#appendixes.annotations.backupGlobals&quot;&gt;&amp;ldquo;@backupGlobals&amp;rdquo;섹션&lt;/a&gt; 에서 설명 하는 &lt;code&gt;@backupGlobals&lt;/code&gt; 주석을 사용하여 전역 변수의 백업 및 복원 작업을 제어 할 수 있습니다. 또는 다음과 같이 백업 및 복원 작업에서 제외 할 전역 변수의 블랙리스트를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8aabc701b483ff1bf4ae7d33581dbc921d989cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupStaticAttributes enabled&lt;/code&gt; annotation can be used on the class level to enable this operation for all tests of a test case class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a12032f574f8340a5d34941ffb8a5e2e58eec1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupStaticAttributes&lt;/code&gt; annotation can also be used on the test method level. This allows for a fine-grained configuration of the backup and restore operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ec7678d5fde9d523c43ff7ed92bec70ef81921" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupStaticAttributes&lt;/code&gt; annotation can be used to back up all static property values in all declared classes before each test and restore them afterwards. It may be used at the test case class or test method level:</source>
          <target state="translated">&lt;code&gt;@backupStaticAttributes&lt;/code&gt; 의 주석은 각 테스트 이전에 선언 된 모든 클래스의 모든 정적 속성 값을 백업하고 나중에 복원 할 수 있습니다. 테스트 케이스 클래스 또는 테스트 방법 레벨에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8de10976b05707f0abe075ca4badec8aa6ca4932" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupStaticAttributes&lt;/code&gt; annotation discussed in &lt;a href=&quot;annotations#appendixes-annotations-backupstaticattributes&quot;&gt;@backupStaticAttributes&lt;/a&gt; can be used to back up all static property values in all declared classes before each test and restore them afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b6fb8e3e3e474c65b7fb22f9f01b5ad3b92c87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupStaticAttributes&lt;/code&gt; annotation discussed in &lt;a href=&quot;appendixes.annotations#appendixes.annotations.backupStaticAttributes&quot;&gt;the section called &amp;ldquo;@backupStaticAttributes&amp;rdquo;&lt;/a&gt; can be used to back up all static property values in all declared classes before each test and restore them afterwards.</source>
          <target state="translated">&lt;code&gt;@backupStaticAttributes&lt;/code&gt; 의 에서 논의 주석 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.backupStaticAttributes&quot;&gt;&quot;@backupStaticAttributes&quot;라는 섹션은&lt;/a&gt; 각각의 시험 이전에 선언 된 모든 클래스의 모든 정적 속성 값을 백업하고 나중에 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3920f5f1e423ff6183e12f236771ab74b374a287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@backupStaticAttributes&lt;/code&gt; operation is executed before a test method, but only if it is enabled. If a static value was changed by a previously executed test that did not have &lt;code&gt;@backupStaticAttributes&lt;/code&gt; enabled, then that value will be backed up and restored &amp;mdash; not the originally declared default value. PHP does not record the originally declared default value of any static variable.</source>
          <target state="translated">&lt;code&gt;@backupStaticAttributes&lt;/code&gt; 의 동작은 시험 방법 전에 실행되지만 활성화 된 경우에만. &lt;code&gt;@backupStaticAttributes&lt;/code&gt; 가 활성화 되지 않은 이전에 실행 된 테스트에 의해 정적 값이 변경된 경우 해당 값은 원래 선언 된 기본값이 아니라 백업 및 복원됩니다. PHP는 원래 선언 된 정적 변수의 기본값을 기록하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="10135c7a0d20a7937f2ca7b201399b947fdd7b37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@before&lt;/code&gt; annotation can be used to specify methods that should be called before each test method in a test case class.</source>
          <target state="translated">&lt;code&gt;@before&lt;/code&gt; 주석은 테스트 케이스 클래스의 각 시험 방법 전에 호출되어야한다 방법을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22f032c688f84c9415d233752d94e06e178f4dc7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@beforeClass&lt;/code&gt; annotation can be used to specify static methods that should be called before any test methods in a test class are run to set up shared fixtures.</source>
          <target state="translated">&lt;code&gt;@beforeClass&lt;/code&gt; 주석은 테스트 클래스의 모든 테스트 방법 공유 비품을 설정하기 위해 실행되기 전에 호출되어야 정적 메소드를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5173a7aa46cf8222c1771ba4036ebe556abeb571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@codeCoverageIgnore&lt;/code&gt;, &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; and &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; annotations can be used to exclude lines of code from the coverage analysis.</source>
          <target state="translated">&lt;code&gt;@codeCoverageIgnore&lt;/code&gt; , &lt;code&gt;@codeCoverageIgnoreStart&lt;/code&gt; 및 &lt;code&gt;@codeCoverageIgnoreEnd&lt;/code&gt; 주석은 커버리지 분석에서 코드 라인을 제외 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f4dccfa8c4078240d93bb5b8f4bfd5e02da68ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@covers&lt;/code&gt; annotation (see &lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers.tables.annotations&quot;&gt;Table B.1&lt;/a&gt;) can be used in the test code to specify which method(s) a test method wants to test. If provided, only the code coverage information for the specified method(s) will be considered. &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php&quot;&gt;Example 11.2&lt;/a&gt; shows an example.</source>
          <target state="translated">&lt;code&gt;@covers&lt;/code&gt; 의 주석 (참조 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.covers.tables.annotations&quot;&gt;표 B.1을&lt;/a&gt; 시험 방법은 시험하고자하는 방법 (들)을 지정하는 테스트 코드에서 사용할 수 있습니다). 제공된 경우 지정된 방법에 대한 코드 적용 범위 정보 만 고려됩니다. &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.specifying-covered-methods.examples.BankAccountTest.php&quot;&gt;예 11.2&lt;/a&gt; 는 예를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ac729957f906a0a3292ad278583ef930e5882286" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@covers&lt;/code&gt; annotation (see the &lt;a href=&quot;annotations#appendixes-annotations-covers-tables-annotations&quot;&gt;annotation documentation&lt;/a&gt;) can be used in the test code to specify which code parts a test class (or test method) wants to test. If provided, this effectively filters the code coverage report to include executed code from the referenced code parts only. &lt;a href=&quot;#code-coverage-analysis-specifying-covered-parts-examples-invoicetest-php&quot;&gt;Example 9.2&lt;/a&gt; shows an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c854a797757c5c72b7f476a61b00450a49709e5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@covers&lt;/code&gt; annotation can be used in the test code to specify which method(s) a test method wants to test:</source>
          <target state="translated">&lt;code&gt;@covers&lt;/code&gt; 의 주석이 시험 방법은 시험하고자하는 방법 (들)을 지정하는 테스트 코드에서 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="263eeaa1068dd2b60b1aff2507472a565a6563cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@covers&lt;/code&gt; annotation can be used in the test code to specify which parts of the code it is supposed to test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d5bcf722de818e864a17135f1cda5c2861ecb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@coversDefaultClass&lt;/code&gt; annotation can be used to specify a default namespace or class name. That way long names don&amp;rsquo;t need to be repeated for every &lt;code&gt;@covers&lt;/code&gt; annotation. See &lt;a href=&quot;#appendixes-annotations-examples-coversdefaultclasstest-php&quot;&gt;Example 2.18&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c7409635f4aa8c2cdbaefef11ccc2ab0594b5fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@coversDefaultClass&lt;/code&gt; annotation can be used to specify a default namespace or class name. That way long names don't need to be repeated for every &lt;code&gt;@covers&lt;/code&gt; annotation. See &lt;a href=&quot;appendixes.annotations#appendixes.annotations.examples.CoversDefaultClassTest.php&quot;&gt;Example B.1&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@coversDefaultClass&lt;/code&gt; 의 주석은 기본 네임 스페이스 또는 클래스 이름을 지정하는 데 사용할 수 있습니다. 이렇게하면 모든 &lt;code&gt;@covers&lt;/code&gt; 주석에 긴 이름을 반복 할 필요가 없습니다 . &lt;a href=&quot;appendixes.annotations#appendixes.annotations.examples.CoversDefaultClassTest.php&quot;&gt;예 B.1&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="eeb6e1ced584fa86dc65ef7258086b6713ab60c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@coversNothing&lt;/code&gt; annotation can be used in the test code to specify that no code coverage information will be recorded for the annotated test case.</source>
          <target state="translated">&lt;code&gt;@coversNothing&lt;/code&gt; 주석에는 코드 커버리지 정보는 주석 테스트 케이스에 대한 기록되지 않도록 지정하려면 테스트 코드에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0d0d6147c40563f5255921b01f59f4ca39cb8d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@expectedExceptionCode&lt;/code&gt; annotation, in conjunction with the &lt;code&gt;@expectedException&lt;/code&gt; allows making assertions on the error code of a thrown exception thus being able to narrow down a specific exception.</source>
          <target state="translated">&lt;code&gt;@expectedExceptionCode&lt;/code&gt; 의 과 함께 주석, &lt;code&gt;@expectedException&lt;/code&gt; 는 따라서 특정 예외를 좁힐 수있는 던져진 예외의 오류 코드에 주장을 허용한다.</target>
        </trans-unit>
        <trans-unit id="42cfa1ee7a5b14f768050b2cf0fc9bc927b3fa13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@expectedExceptionMessage&lt;/code&gt; annotation works similar to &lt;code&gt;@expectedExceptionCode&lt;/code&gt; as it lets you make an assertion on the error message of an exception.</source>
          <target state="translated">&lt;code&gt;@expectedExceptionMessage&lt;/code&gt; 의 주석과 유사한 작동 &lt;code&gt;@expectedExceptionCode&lt;/code&gt; 당신이 예외의 오류 메시지에 대한 주장을 할 수있다.</target>
        </trans-unit>
        <trans-unit id="f77bbeb5a691bb9a118361c3456593c3f1bb6c18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@group&lt;/code&gt; annotation can also be provided for the test class. It is then &amp;ldquo;inherited&amp;rdquo; to all test methods of that test class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24520f213fda3f1ebc22a27c479f3e5c535c923" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@large&lt;/code&gt; annotation is an alias for &lt;code&gt;@group large&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@large&lt;/code&gt; 의 주석의 별칭입니다 &lt;code&gt;@group large&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="524eb1bc8010ceada6555f13e7c804f3587a642d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@medium&lt;/code&gt; annotation is an alias for &lt;code&gt;@group medium&lt;/code&gt;. A medium test must not depend on a test marked as &lt;code&gt;@large&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@medium&lt;/code&gt; 의 주석의 별칭입니다 &lt;code&gt;@group medium&lt;/code&gt; . 중간 테스트는 &lt;code&gt;@large&lt;/code&gt; 로 표시된 테스트에 의존해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="4210cf68e7cb5df0f98805f63b23b53972d17352" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@requires&lt;/code&gt; annotation can be used to skip tests when common preconditions, like the PHP Version or installed extensions, are not met.</source>
          <target state="translated">&lt;code&gt;@requires&lt;/code&gt; 의 주석이 공통의 전제 조건이의 PHP 버전 또는 설치 확장처럼, 충족되지 않을 경우 검사를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cb7ee1473f0e238baa8ff4a6c666e91bf98b5223" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@small&lt;/code&gt; annotation is an alias for &lt;code&gt;@group small&lt;/code&gt;. A small test must not depend on a test marked as &lt;code&gt;@medium&lt;/code&gt; or &lt;code&gt;@large&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@small&lt;/code&gt; 의 주석의 별칭입니다 &lt;code&gt;@group small&lt;/code&gt; . 소규모 테스트는 &lt;code&gt;@medium&lt;/code&gt; 또는 &lt;code&gt;@large&lt;/code&gt; 로 표시된 테스트에 의존해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="113b22af4757ffbaa002d75245aa5c9551e44f03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@testdox&lt;/code&gt; annotation can be applied to both test classes and test methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23006a05e112e97e8c2c14998e0740d6e6fe6c20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@ticket&lt;/code&gt; annotation is an alias for the &lt;code&gt;@group&lt;/code&gt; annotation (see &lt;a href=&quot;#appendixes-annotations-group&quot;&gt;@group&lt;/a&gt;) and allows to filter tests based on their ticket ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6086125621e0aa93a949eb49f9321713c29988a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@uses&lt;/code&gt; annotation specifies code which will be executed by a test, but is not intended to be covered by the test. A good example is a value object which is necessary for testing a unit of code.</source>
          <target state="translated">&lt;code&gt;@uses&lt;/code&gt; 의 시험에 의해 실행되지만 것은 아니다 주석 지정 코드는 테스트에 포함된다. 좋은 예는 코드 단위를 테스트하는 데 필요한 값 객체입니다.</target>
        </trans-unit>
        <trans-unit id="950a91e85f37ddff185d1991094f06b46387ef0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; interface is narrow and easy to implement. You can write an implementation of &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; that is simpler than &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; and that runs &lt;em&gt;data-driven tests&lt;/em&gt;, for instance.</source>
          <target state="translated">&lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; 의 인터페이스는 좁고 쉽게 구현할 수 있습니다. 예를 들어 &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 보다 단순 하고 &lt;em&gt;데이터 기반 테스트&lt;/em&gt; 를 실행 하는 &lt;code&gt;PHPUnit_Framework_Test&lt;/code&gt; 구현을 작성할 수 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b2806aabdd2075a7be4e0eb43f87acbd50744245" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backupGlobals&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a6bb8965b1b9a387a7d5253a5ff448520e3fbf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backupStaticAttributes&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567cd19e29d4989123449ac19fa1da7872a2fdf4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beStrictAboutChangesToGlobalState&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9ecc6840c306734f1777df3e560bb989db07b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beStrictAboutCoversAnnotation&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b1e8045ec95634ace5f6be5de73858e9310fef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beStrictAboutOutputDuringTests&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a47ca47c7de1a0cf290b28fe269bb54a2b40ef2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beStrictAboutResourceUsageDuringSmallTests&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988155402bb99ab1499d2afa6f3b6f716413ab47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beStrictAboutTestsThatDoNotTestAnything&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622f0797651b789451925da28b5c0c10ee839b64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beStrictAboutTodoAnnotatedTests&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef122e74195d257c0dff4cb738c729fcd8948a09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bootstrap&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462f87cc4d17b77108db0b42ea3103c8ba47f175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cacheDirectory&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf011e1a2d60db916cc824ffd3c3ec690d91ea75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cacheResult&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86aaa27ecbbc3c63792e8cd6bcc4f7ed07ef1a28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cacheResultFile&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a904bd1e6e4187e27f5d2c16c87c9d1acffd7d99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback()&lt;/code&gt; constraint can be used for more complex argument verification. This constraint takes a PHP callback as its only argument. The PHP callback will receive the argument to be verified as its only argument and should return &lt;code&gt;true&lt;/code&gt; if the argument passes verification and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;callback()&lt;/code&gt; 제약은 더 복잡한 인수 검증을 위해 사용할 수 있습니다. 이 제약 조건은 PHP 콜백을 유일한 인수로 사용합니다. PHP 콜백은 검증 할 인수를 유일한 인수로 받고 인수가 검증을 통과하면 &lt;code&gt;true&lt;/code&gt; 를, 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="c22982bb12832a934501b5fdcd323dd7d514fd32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;colors&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5911241cc61e8de3d4fc71d000a87043ba1d2e3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;columns&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36197eb6e5d1b40e36ce25ce96e7c7bba04954f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convertDeprecationsToExceptions&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="525887d70ad7df118b0305c1e7a8e685bdf6671c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d6639f672e9b78e3a12de1197b5bc983d3fcc91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convertNoticesToExceptions&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c588f6b1a540dd849ac4b418dbf6e2ef3183012" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convertWarningsToExceptions&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202c3266ea8ba4fabd9b5b814eb0b0b73004584c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createDataSet()&lt;/code&gt; method creates a Database (DB) DataSet as described in the DataSet implementations section.</source>
          <target state="translated">&lt;code&gt;createDataSet()&lt;/code&gt; 데이터 세트 구현 부에 기재된 방법은, 데이터베이스 (DB) 데이터 세트를 생성한다.</target>
        </trans-unit>
        <trans-unit id="96cb14a32952593c11cf3798c4f36e2246dfc5bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMock($type)&lt;/code&gt; and &lt;code&gt;getMockBuilder($type)&lt;/code&gt; methods provided by PHPUnit can be used in a test to automatically generate an object that can act as a test double for the specified original type (interface or class name). This test double object can be used in every context where an object of the original type is expected or required.</source>
          <target state="translated">&lt;code&gt;createMock($type)&lt;/code&gt; 및 &lt;code&gt;getMockBuilder($type)&lt;/code&gt; phpunit을 제공하는 방법에 의해 자동적으로 원래 지정된 유형 (인터페이스 또는 클래스 명)에 대해 두 번 테스트로서 작용할 수있는 객체를 생성하는 시험에 사용될 수있다. 이 테스트 이중 오브젝트는 원래 유형의 오브젝트가 예상되거나 필요한 모든 컨텍스트에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe3df3bd94e0dd3a8f67ab7980e647c17ba25535" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMock($type)&lt;/code&gt; method immediately returns a test double object for the specified type (interface or class). The creation of this test double is performed using best practice defaults (the &lt;code&gt;__construct()&lt;/code&gt; and &lt;code&gt;__clone()&lt;/code&gt; methods of the original class are not executed) and the arguments passed to a method of the test double will not be cloned. If these defaults are not what you need then you can use the &lt;code&gt;getMockBuilder($type)&lt;/code&gt; method to customize the test double generation using a fluent interface.</source>
          <target state="translated">&lt;code&gt;createMock($type)&lt;/code&gt; 방법은 즉시 지정된 유형 (인터페이스 또는 클래스)에 대한 테스트를 두 번 개체를 반환합니다. 이 테스트 이중 작성은 우수 사례 기본값 ( 원래 클래스 의 &lt;code&gt;__construct()&lt;/code&gt; 및 &lt;code&gt;__clone()&lt;/code&gt; 메소드는 실행되지 않음)을 사용하여 수행되며 테스트 이중 메소드에 전달 된 인수는 복제되지 않습니다. 이러한 기본값이 필요하지 않은 경우 &lt;code&gt;getMockBuilder($type)&lt;/code&gt; 메소드를 사용하여 유창한 인터페이스를 사용하여 테스트 이중 생성을 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc2e07998e9233b8a77ed3de3cb46e852c1a6d70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createQueryTable()&lt;/code&gt; method can be used to create instances of a QueryTable, give them a result name and SQL query. This is a handy method when it comes to result/table assertions as will be shown in the next section on the Database Assertions API.</source>
          <target state="translated">&lt;code&gt;createQueryTable()&lt;/code&gt; 메소드가하는 쿼리 테이블의 인스턴스를 생성 그들에게 결과 이름과 SQL 쿼리를 제공 할 수 있습니다. 이는 데이터베이스 어설 션 API의 다음 섹션에 표시 될 결과 / 테이블 어설 션과 관련하여 편리한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="1a219763425a3d65811d326e358ef0a293807136" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createStub($type)&lt;/code&gt; and &lt;code&gt;createMock($type)&lt;/code&gt; method immediately return a test double object for the specified type (interface or class). The creation of this test double is performed using best practice defaults. The &lt;code&gt;__construct()&lt;/code&gt; and &lt;code&gt;__clone()&lt;/code&gt; methods of the original class are not executed and the arguments passed to a method of the test double will not be cloned. If these defaults are not what you need then you can use the &lt;code&gt;getMockBuilder($type)&lt;/code&gt; method to customize the test double generation using a fluent interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1160e6917bce9c01de2cf3a226961e6b3640d7e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createStub($type)&lt;/code&gt;, &lt;code&gt;createMock($type)&lt;/code&gt;, and &lt;code&gt;getMockBuilder($type)&lt;/code&gt; methods provided by PHPUnit can be used in a test to automatically generate an object that can act as a test double for the specified original type (interface or class name). This test double object can be used in every context where an object of the original type is expected or required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c956c5c236bfe28c383d81306ce420213b7d3fd3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultTestSuite&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ab37ebb6c2f04105b910efd6ef7b729adfb250" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defaultTimeLimit&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d79e69f61c471ef0d8069b26b1a08381b9619b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disableCodeCoverageIgnore&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7c9be8fdb63f731b7b9df9544e3e9b2762fc1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;enforceTimeLimit&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11a473ec1d5942b627dbb76cbb191e916b951e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executionOrder&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2dfbf59e6a778540f1553023f7445bbf40c9bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extensionsDirectory&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="974a0ded37a283561785045424bd2137c846630a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failOnRisky&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f36b5118febb6f8ab9074b3e2eda3ae81daf4b6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failOnWarning&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd14303b7554dcf857ef09aaccef0be59f55757" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forceCoversAnnotation&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bc71c2321b4100a158a657c32ddea3e71dcda9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getDataSet()&lt;/code&gt; method defines how the initial state of the database should look before each test is executed. The state of a database is abstracted through the concepts DataSet and DataTable both being represented by the interfaces &lt;code&gt;PHPUnit_Extensions_Database_DataSet_IDataSet&lt;/code&gt; and &lt;code&gt;PHPUnit_Extensions_Database_DataSet_IDataTable&lt;/code&gt;. The next section will describe in detail how these concepts work and what the benefits are for using them in database testing.</source>
          <target state="translated">&lt;code&gt;getDataSet()&lt;/code&gt; 데이터베이스의 초기 상태는 각 시험 전에 보는 방법을 방법을 정의가 실행됩니다. 데이터베이스의 상태는 DataSet 및 DataTable 개념을 통해 추상화되어 &lt;code&gt;PHPUnit_Extensions_Database_DataSet_IDataSet&lt;/code&gt; 및 &lt;code&gt;PHPUnit_Extensions_Database_DataSet_IDataTable&lt;/code&gt; 인터페이스로 표시됩니다 . 다음 섹션에서는 이러한 개념의 작동 방식과 데이터베이스 테스트에서 이러한 개념을 사용할 때의 이점에 대해 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4f04f73e70a7e0224c4bca069e8af15aaa70a3e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMockForAbstractClass()&lt;/code&gt; method returns a mock object for an abstract class. All abstract methods of the given abstract class are mocked. This allows for testing the concrete methods of an abstract class.</source>
          <target state="translated">&lt;code&gt;getMockForAbstractClass()&lt;/code&gt; 메소드는 추상 클래스에 대한 모의 개체를 반환합니다. 주어진 추상 클래스의 모든 추상 메소드가 조롱됩니다. 이를 통해 추상 클래스의 구체적인 메소드를 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f67ec389a5cdc252d240635ac2ffeb2b8c82052b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getMockForTrait()&lt;/code&gt; method returns a mock object that uses a specified trait. All abstract methods of the given trait are mocked. This allows for testing the concrete methods of a trait.</source>
          <target state="translated">&lt;code&gt;getMockForTrait()&lt;/code&gt; 메소드가 리턴 지정된 특성을 사용하는 모의 객체입니다. 주어진 특성의 모든 추상적 방법이 조롱됩니다. 이를 통해 특성의 구체적인 방법을 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48e220439ed3e811cc4b8b3597fca597ab896d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getRowCount()&lt;/code&gt; method is a convienent way to access the number of rows in a table, optionally filtered by an additional where clause. This can be used with a simple equality assertion:</source>
          <target state="translated">&lt;code&gt;getRowCount()&lt;/code&gt; 메소드 테이블의 행의 수를 액세스하는 방법이다 convienent 임의로 WHERE 절을 추가로 여과 하였다. 간단한 등식 어설 션과 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb9253503ca36e3101ee997995d5ea48b828dd46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;highLowerBound&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d748b767852740cae62a577fcbb0d28924fa74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreDeprecatedCodeUnits&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d10e8727e1b15195cecc9fad6f29b1b5a2949cd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includeUncoveredFiles&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15968e8fa003d770ad62787e9c0c7cc647c9a856" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;includeUncoveredFilesInCodeCoverageReport&lt;/code&gt; and &lt;code&gt;processUncoveredFilesForCodeCoverageReport&lt;/code&gt; configuration settings are available to configure how the filter is used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e399a1148c56ae6e7da13b8ec9a2b7f75881b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lowUpperBound&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3829ccfd52529ef8a2b57cfa4b7ffa3ed5c7326" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lowUpperBound&lt;/code&gt;, &lt;code&gt;highLowerBound&lt;/code&gt;, &lt;code&gt;logIncompleteSkipped&lt;/code&gt; and &lt;code&gt;showUncoveredFiles&lt;/code&gt; attributes have no equivalent TextUI test runner option.</source>
          <target state="translated">&lt;code&gt;lowUpperBound&lt;/code&gt; , &lt;code&gt;highLowerBound&lt;/code&gt; , &lt;code&gt;logIncompleteSkipped&lt;/code&gt; 및 &lt;code&gt;showUncoveredFiles&lt;/code&gt; 의 속성은 동등한의 TextUI 테스트 러너 옵션이 없습니다.</target>
        </trans-unit>
        <trans-unit id="a84e0ddfce6d8fac2a648aba3944c482d6a50c6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;noInteraction&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26005d50c32b94d8284fe08e783d9eace0653e12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputDirectory&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e9b4f659d1a5668154d634b9359730ba6f142c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputFile&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc80819bc93141cf7752d5b04851a4e908d4d8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pathCoverage&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae46bd8e1f9a74aa1cad05187251aebfa909d6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phpVersion&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e9dbc3a2e38551ad5bd38d507b606801f8ef17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phpVersionOperator&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c293b7026d2e277660bfa6a863309870c93f5b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phpVersionOperator&lt;/code&gt; attribute is optional and defaults to &lt;code&gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;phpVersionOperator&lt;/code&gt; 의 속성에 대한 옵션 및 기본값입니다 &lt;code&gt;&amp;gt;=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8964e868e9c0a547be837c143cb616f4d8e49025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefix&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5de79adfc7b957d96460def11a970779e5834f88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printerClass&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f731e330a8828cc4113b07aac745c4d9b0e3e7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printerFile&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="549dc88c6601a3f7757a2bd144793c3525f5a7f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;processIsolation&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="810d2b295d6bebfca04b0e897d8113027be7e293" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;processUncoveredFiles&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fadc8b365824a54cc4e32009048dd50597deb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registerMockObjectsFromTestArgumentsRecursively&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93730400a35af591313b1536374d34695623f29b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;resolveDependencies&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7476852fc924dadd65680a4e603fdd34b773f9e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reverseDefectList&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1c42bbe39027f596994d55f5371b020447fb26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setUp()&lt;/code&gt; and &lt;code&gt;tearDown()&lt;/code&gt; template methods are run once for each test method (and on fresh instances) of the test case class.</source>
          <target state="translated">&lt;code&gt;setUp()&lt;/code&gt; 과 &lt;code&gt;tearDown()&lt;/code&gt; 템플릿 방법은 테스트 케이스 클래스의 각 시험 방법 (신선한 인스턴스)에 대해 한 번만 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="d4465cfdf878a9d7cc978eb54e3ccd40c384edc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showOnlySummary&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91bd7fa688e72bda9f96bcc6bf500adab7d2d34b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;showUncoveredFiles&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76eeb0af4f633513138f6861f4ff5cb553c77b89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stderr&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251f22f902626f685ea218acdb6a3b5d94e1015d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnDefect&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d46bcc017cca6f402e2130b60849530eae2c081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnError&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6e01839a55810fe834ef31c78460272a6ee17c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnFailure&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447ac5e96e770e8fa9383ef3a63b06dddbb2f3e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnIncomplete&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="447c5a8d430c3cfa3a2507e44637fa9a61acaadd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnRisky&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73bc41c60b419e8e992e9ccd498eca942f6eb254" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnSkipped&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e7bc5ddf67c7edbe9801792dbb934e98146e66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopOnWarning&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26e066d7999c22ee2b224c2cd87d8bbc2a39f1ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;suffix&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f51eb15f8d9dc8d0b0b7e4d924804c8ab3e1d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;testSuiteLoaderClass&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba7f291056e873dd89654fc5ae6f0b7dab64bda9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;testSuiteLoaderFile&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3ac3c76f01c6e00d8b6f28a84bf318aa3c6955" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;testdox&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655248e6dde756d7ba34a978a7e98a5200152abc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;threshold&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adbbaa9c6e0e59eee59ed6f865bb6a936b13cc11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeoutForLargeTests&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a901c2aad7c2927ea72d12d0c96f5cd6241df171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeoutForMediumTests&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ac98aec59f5ac0b54915f20ddd8de0d9bdefc9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeoutForSmallTests&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597064602c435ded44f39d4a658b2ca4c0c257ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbose&lt;/code&gt; Attribute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2167d6d82afdb47925fad8788a0e668991e223fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with()&lt;/code&gt; method can take any number of arguments, corresponding to the number of arguments to the method being mocked. You can specify more advanced constraints on the method&amp;rsquo;s arguments than a simple match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d88da73ee25b6088aca5a4fc663aee5ac38ae7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;with()&lt;/code&gt; method can take any number of arguments, corresponding to the number of arguments to the method being mocked. You can specify more advanced constraints on the method's arguments than a simple match.</source>
          <target state="translated">&lt;code&gt;with()&lt;/code&gt; 메소드는 메소드 조롱 인자의 수에 대응하는 인수의 수를 취할 수있다. 간단한 일치보다 메소드의 인수에 대한 고급 제한 조건을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5535c5ea12f13f6f61c70b489f55f06b3dab0790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;withConsecutive()&lt;/code&gt; method can take any number of arrays of arguments, depending on the calls you want to test against. Each array is a list of constraints corresponding to the arguments of the method being mocked, like in &lt;code&gt;with()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;withConsecutive()&lt;/code&gt; 메서드를 사용하면에 대한 테스트 할 호출에 따라 인수의 배열의 수를 취할 수 있습니다. 각 배열은 &lt;code&gt;with()&lt;/code&gt; 같이 조롱되는 메서드의 인수에 해당하는 제약 조건의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="3289d1d490b1211a24481f134ba229a757161fb7" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Branch Coverage&lt;/em&gt; software metric measures whether the boolean expression of each control structure evaluated to both &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; while running the test suite.</source>
          <target state="translated">&lt;em&gt;지점 범위의&lt;/em&gt; 각 제어 구조의 부울 식을 모두 평가 여부 소프트웨어 메트릭 측정 &lt;code&gt;true&lt;/code&gt; 과 &lt;code&gt;false&lt;/code&gt; 테스트 스위트를 실행하는 동안.</target>
        </trans-unit>
        <trans-unit id="75bd0043f046af43dc02c072fc47f32549185e42" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Change Risk Anti-Patterns (CRAP) Index&lt;/em&gt; is calculated based on the cyclomatic complexity and code coverage of a unit of code. Code that is not too complex and has an adequate test coverage will have a low CRAP index. The CRAP index can be lowered by writing tests and by refactoring the code to lower its complexity.</source>
          <target state="translated">&lt;em&gt;변경 위험 방지 패턴은 (뽑는) 지수는&lt;/em&gt; 코드 단위의 복잡성을 코드 커버리지를 기반으로 계산됩니다. 너무 복잡하지 않고 테스트 범위가 적절한 코드는 CRAP 지수가 낮습니다. CRAP 인덱스는 테스트를 작성하고 코드를 리팩터링하여 복잡성을 낮추면 낮아질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ca5e556ff470862978361c3f8a4a70ed0418b08" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Class and Trait Coverage&lt;/em&gt; software metric measures whether each method of a class or trait is covered. PHP_CodeCoverage only considers a class or trait as covered when all of its methods are covered.</source>
          <target state="translated">&lt;em&gt;클래스 및 형질 범위의&lt;/em&gt; 소프트웨어 메트릭 측정은 클래스 또는 특성의 각 방법이 포함되어 있는지 여부를 확인합니다. PHP_CodeCoverage는 모든 메소드가 포함 된 경우 클래스 또는 특성 만 적용되는 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="0acc8cb2d484ac8e4e537a49be11097acf609490" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Class and Trait Coverage&lt;/em&gt; software metric measures whether each method of a class or trait is covered. php-code-coverage only considers a class or trait as covered when all of its methods are covered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="317ecab3860fdcb769ef4c8135514ad36813753b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Function and Method Coverage&lt;/em&gt; software metric measures whether each function or method has been invoked. PHP_CodeCoverage only considers a function or method as covered when all of its executable lines are covered.</source>
          <target state="translated">&lt;em&gt;기능 및 방법 커버리지&lt;/em&gt; 소프트웨어 각 기능 또는 메소드가 호출되었는지 측정 방법. PHP_CodeCoverage는 모든 실행 가능 라인이 포함 된 경우에만 기능 또는 메소드를 적용한 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="ddad547e9b0b52afcaa8962c6473cfb9b9419811" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Function and Method Coverage&lt;/em&gt; software metric measures whether each function or method has been invoked. php-code-coverage only considers a function or method as covered when all of its executable lines are covered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e00b27ed3c8c9e3c913f3e009024ad23ce299a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Line Coverage&lt;/em&gt; software metric measures whether each executable line was executed.</source>
          <target state="translated">&lt;em&gt;라인 범위의&lt;/em&gt; 소프트웨어를 각 실행 라인이 실행되었는지 여부를 메트릭 측정합니다.</target>
        </trans-unit>
        <trans-unit id="740d442f8ae7c1731b89853b522e0965ad3cb227" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Opcode Coverage&lt;/em&gt; software metric measures whether each opcode of a function or method has been executed while running the test suite. A line of code usually compiles into more than one opcode. Line Coverage regards a line of code as covered as soon as one of its opcodes is executed.</source>
          <target state="translated">&lt;em&gt;연산 코드 커버리지&lt;/em&gt; 소프트웨어 테스트 세트를 실행하는 동안 또는 기능에있어서의 각 연산 코드가 실행되었는지 여부를 측정 방안. 코드 줄은 일반적으로 둘 이상의 opcode로 컴파일됩니다. Line Coverage는 opcode 중 하나가 실행 되 자마자 적용되는 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="5ae5f41e411de482807718cc752c2300661c9307" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Opcode Coverage&lt;/em&gt;, &lt;em&gt;Branch Coverage&lt;/em&gt;, and &lt;em&gt;Path Coverage&lt;/em&gt; software metrics are not yet supported by PHP_CodeCoverage.</source>
          <target state="translated">&lt;em&gt;연산 코드 커버리지&lt;/em&gt; , &lt;em&gt;분기 커버리지&lt;/em&gt; 및 &lt;em&gt;경로 커버리지&lt;/em&gt; 소프트웨어 메트릭은 아직 PHP_CodeCoverage에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="44ceda66b28187bce309b90da1080641efa0ff7d" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;Path Coverage&lt;/em&gt; software metric measures whether each of the possible execution paths in a function or method has been followed while running the test suite. An execution path is a unique sequence of branches from the entry of the function or method to its exit.</source>
          <target state="translated">&lt;em&gt;경로 커버리지&lt;/em&gt; 소프트웨어 테스트 세트를 실행하는 동안 함수 또는 방법에서 실행 가능한 경로들의 각각은 다음되었는지 측정 방법. 실행 경로는 함수 또는 메소드의 입력에서 종료까지 고유 한 분기 순서입니다.</target>
        </trans-unit>
        <trans-unit id="8e5ac66657c2e1ac2e74cd490e2d0c91dab1ab5f" translate="yes" xml:space="preserve">
          <source>The Command-Line Test Runner</source>
          <target state="translated">커맨드 라인 테스트 러너</target>
        </trans-unit>
        <trans-unit id="89643cbcfec4ebddcde9f596d3f447b152bceb0f" translate="yes" xml:space="preserve">
          <source>The Connection API</source>
          <target state="translated">연결 API</target>
        </trans-unit>
        <trans-unit id="417947145a9ca2e6538cafe6cf0228fbb8fba1a8" translate="yes" xml:space="preserve">
          <source>The DbUnit extension considerably simplifies the setup of a database for testing purposes and allows you to verify the contents of a database after performing a series of operations.</source>
          <target state="translated">DbUnit 확장은 테스트 목적으로 데이터베이스 설정을 상당히 단순화하고 일련의 작업을 수행 한 후 데이터베이스의 내용을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ed4b1d3c8a171e3ca862c0ebeb60eab6f5c4ed4" translate="yes" xml:space="preserve">
          <source>The PHPUnit PHAR can be used immediately after download:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99595fb95da146c7d10826cba92b99d6fe65f8f" translate="yes" xml:space="preserve">
          <source>The PHPUnit command-line test runner can be invoked through the &lt;code&gt;phpunit&lt;/code&gt; command. The following code shows how to run tests with the PHPUnit command-line test runner:</source>
          <target state="translated">PHPUnit 명령 줄 테스트 러너는 &lt;code&gt;phpunit&lt;/code&gt; 명령을 통해 호출 할 수 있습니다 . 다음 코드는 PHPUnit 명령 줄 테스트 러너로 테스트를 실행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="310f3619cb946a7ab9e348b5998a338fe3b10370" translate="yes" xml:space="preserve">
          <source>The Replacement DataSet is a decorator for an existing dataset and allows you to replace values in any column of the dataset by another replacement value. To get our guestbook example working with NULL values we specify the file like:</source>
          <target state="translated">대체 데이터 세트는 기존 데이터 세트의 데코레이터이며 데이터 세트의 모든 열에있는 값을 다른 대체 값으로 바꿀 수 있습니다. NULL 값으로 작동하는 방명록 예제를 얻으려면 다음과 같이 파일을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="cb8dd646d83fb42929349206c9708f6415294d73" translate="yes" xml:space="preserve">
          <source>The SubSection &amp;ldquo;Use your own Abstract Database TestCase&amp;rdquo; shows how you can prevent this error from happening by using a single cached PDO instance in all your tests.</source>
          <target state="translated">하위 섹션&amp;ldquo;자체 추상 데이터베이스 테스트 사례 사용&amp;rdquo;은 모든 테스트에서 단일 캐시 된 PDO 인스턴스를 사용하여이 오류가 발생하지 않도록하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="764e63549ba7f657590ece0d4d401c1b245a0bd7" translate="yes" xml:space="preserve">
          <source>The XML Configuration File</source>
          <target state="translated">XML 구성 파일</target>
        </trans-unit>
        <trans-unit id="228b64dad9196904d05e4eb0ba453e6bcd25efa6" translate="yes" xml:space="preserve">
          <source>The XML configuration above corresponds to attaching the &lt;code&gt;$listener&lt;/code&gt; object (see below) to the test execution:</source>
          <target state="translated">위의 XML 구성은 &lt;code&gt;$listener&lt;/code&gt; 객체 (아래 참조)를 테스트 실행 에 연결하는 것에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="75818fb49b97cd4fd720df8caad421d4191360b0" translate="yes" xml:space="preserve">
          <source>The XML configuration above corresponds to invoking the TextUI test runner with the following options:</source>
          <target state="translated">위의 XML 구성은 다음 옵션을 사용하여 TextUI 테스트 러너를 호출하는 것에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="a4645a5b0cde6fb40a868281ef35b5ba30a3f1b2" translate="yes" xml:space="preserve">
          <source>The XML configuration above corresponds to the default behaviour of the TextUI test runner documented in &lt;a href=&quot;textui#textui.clioptions&quot;&gt;the section called &amp;ldquo;Command-Line Options&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">위의 XML 구성 &lt;a href=&quot;textui#textui.clioptions&quot;&gt;은&amp;ldquo;명령 줄 옵션&amp;rdquo;섹션에&lt;/a&gt; 문서화 된 TextUI 테스트 러너의 기본 동작에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="0d2c27092bc84d0565c7e4b1a8daf95e5cded85f" translate="yes" xml:space="preserve">
          <source>The XML configuration above corresponds to the following PHP code:</source>
          <target state="translated">위의 XML 구성은 다음 PHP 코드에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="26031d42845eb0f16ff5084563b8951b2dd38d1d" translate="yes" xml:space="preserve">
          <source>The XML format for code coverage information logging produced by PHPUnit is loosely based upon the one used by &lt;a href=&quot;http://www.atlassian.com/software/clover/&quot;&gt; Clover&lt;/a&gt;. The following example shows the XML logfile generated for the tests in &lt;code&gt;BankAccountTest&lt;/code&gt;:</source>
          <target state="translated">PHPUnit에 의해 생성 된 코드 커버리지 정보 로깅을위한 XML 형식은 &lt;a href=&quot;http://www.atlassian.com/software/clover/&quot;&gt;Clover가&lt;/a&gt; 사용하는 형식을 기반으로합니다 . 다음 예제는 &lt;code&gt;BankAccountTest&lt;/code&gt; 에서 테스트를 위해 생성 된 XML 로그 파일을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="cbbdb971258a9c2f1b86b907f07edc9b999f5295" translate="yes" xml:space="preserve">
          <source>The XML logfile for test results produced by PHPUnit is based upon the one used by the &lt;a href=&quot;http://ant.apache.org/manual/Tasks/junit.html&quot;&gt;JUnit task for Apache Ant&lt;/a&gt;. The following example shows the XML logfile generated for the tests in &lt;code&gt;ArrayTest&lt;/code&gt;:</source>
          <target state="translated">PHPUnit에 의해 생성 된 테스트 결과에 대한 XML 로그 파일 &lt;a href=&quot;http://ant.apache.org/manual/Tasks/junit.html&quot;&gt;은 Apache Ant&lt;/a&gt; 에 대한 JUnit 태스크에서 사용 된 것을 기반으로합니다 . 다음 예제는 &lt;code&gt;ArrayTest&lt;/code&gt; 에서 테스트를 위해 생성 된 XML 로그 파일을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="43cb67b01c7336c045798c5c8b1b7bd84b8e98e2" translate="yes" xml:space="preserve">
          <source>The YAML Dataset has no factory method on the Database TestCase currently, so you have to instantiate it manually:</source>
          <target state="translated">YAML Dataset에는 현재 Database TestCase에 팩토리 메소드가 없으므로 수동으로 인스턴스화해야합니다.</target>
        </trans-unit>
        <trans-unit id="4001c71f53f3a420ee4920e20a8d4d5f7c188336" translate="yes" xml:space="preserve">
          <source>The adjusted &lt;em&gt;expectedBook.xml&lt;/em&gt; Flat XML file would probably have to look like the following to make the assertion pass:</source>
          <target state="translated">조정 된 &lt;em&gt;expectedBook.xml&lt;/em&gt; 플랫 XML 파일은 어설 션을 전달하기 위해 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="817fd37fa940844c93a3db87cceac4f92613aaed" translate="yes" xml:space="preserve">
          <source>The annotation can be used on the class and the method level and will override any &lt;code&gt;@covers&lt;/code&gt; tags.</source>
          <target state="translated">주석은 클래스 및 메서드 수준에서 사용할 수 있으며 &lt;code&gt;@covers&lt;/code&gt; 태그를 재정의 합니다.</target>
        </trans-unit>
        <trans-unit id="17ecf26b1f7c08e938f420330b7a07a5cffda992" translate="yes" xml:space="preserve">
          <source>The approach above has several drawbacks:</source>
          <target state="translated">위의 접근법에는 몇 가지 단점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c4fa902af70096427ee6125f242501b4715270b" translate="yes" xml:space="preserve">
          <source>The assertion methods are declared &lt;code&gt;static&lt;/code&gt; and can be invoked from any context using &lt;code&gt;PHPUnit\Framework\Assert::assertTrue()&lt;/code&gt;, for instance, or using &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;, for instance, in a class that extends &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt;.</source>
          <target state="translated">어설 션 메소드는 &lt;code&gt;static&lt;/code&gt; 으로 선언 되며 &lt;code&gt;PHPUnit\Framework\Assert::assertTrue()&lt;/code&gt; 사용하거나 &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; 또는 &lt;code&gt;self::assertTrue()&lt;/code&gt; 사용하여 모든 컨텍스트에서 호출 할 수 있습니다 . &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 를 확장하는 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="a374bb3f1d3a96ca1dadaa42e0c5e269cbb6c310" translate="yes" xml:space="preserve">
          <source>The assertion methods are declared static and can be invoked from any context using &lt;code&gt;PHPUnit\Framework\Assert::assertTrue()&lt;/code&gt;, for instance, or using &lt;code&gt;$this-&amp;gt;assertTrue()&lt;/code&gt; or &lt;code&gt;self::assertTrue()&lt;/code&gt;, for instance, in a class that extends &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt;. You can even use global function wrappers such as &lt;code&gt;assertTrue()&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f647813f91102b97725ba0cca72a2a6e9d8543d3" translate="yes" xml:space="preserve">
          <source>The attributes of the &lt;code&gt;&amp;lt;phpunit&amp;gt;&lt;/code&gt; element can be used to configure PHPUnit's core functionality.</source>
          <target state="translated">&lt;code&gt;&amp;lt;phpunit&amp;gt;&lt;/code&gt; 요소 의 속성은 PHPUnit의 핵심 기능을 구성하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbb02dc0eb9f8e41a7f3640cc611093c964c82cd" translate="yes" xml:space="preserve">
          <source>The backup and restore operations for global variables and static class attributes use &lt;code&gt;serialize()&lt;/code&gt; and &lt;code&gt;unserialize()&lt;/code&gt;.</source>
          <target state="translated">글로벌 변수 및 정적 클래스 속성에 대한 백업 및 복원 조작은 &lt;code&gt;serialize()&lt;/code&gt; 및 &lt;code&gt;unserialize()&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="e8318516d8bdf70614287e943186b66b21ec6b45" translate="yes" xml:space="preserve">
          <source>The backup and restore operations for global variables can be completely disabled for all tests of a test case class like this</source>
          <target state="translated">전역 변수에 대한 백업 및 복원 작업은 다음과 같은 테스트 사례 클래스의 모든 테스트에 대해 완전히 비활성화 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="89c1027002c8332ef0ed4348559458328c542f5a" translate="yes" xml:space="preserve">
          <source>The code communicates its design principles.</source>
          <target state="translated">코드는 설계 원칙을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="d84402f7d03f44642669bf3b37df6d2c1d3ac5f2" translate="yes" xml:space="preserve">
          <source>The code contains no redundancies.</source>
          <target state="translated">코드에는 중복성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="db2f2a3034f57717bc2ab060d56ccb8d8d2918c0" translate="yes" xml:space="preserve">
          <source>The code contains the minimal number of classes and methods.</source>
          <target state="translated">이 코드에는 최소한의 클래스와 메서드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8f23824cc6c02b711fa422bddac9ca6317e27df" translate="yes" xml:space="preserve">
          <source>The code coverage report feature requires the &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; (2.5.0 or later) and &lt;a href=&quot;http://php.net/manual/en/tokenizer.installation.php&quot;&gt;tokenizer&lt;/a&gt; extensions. Generating XML reports requires the &lt;a href=&quot;http://php.net/manual/en/xmlwriter.installation.php&quot;&gt;xmlwriter&lt;/a&gt; extension.</source>
          <target state="translated">코드 적용 범위 보고서 기능에는 &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; (2.5.0 이상) 및 &lt;a href=&quot;http://php.net/manual/en/tokenizer.installation.php&quot;&gt;토크 나이저&lt;/a&gt; 확장이 필요합니다. XML 보고서를 생성하려면 &lt;a href=&quot;http://php.net/manual/en/xmlwriter.installation.php&quot;&gt;xmlwriter&lt;/a&gt; 확장이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="9daf001126c4dbbe446af2cd2fd90f31ac62d00a" translate="yes" xml:space="preserve">
          <source>The code coverage report feature requires the &lt;a href=&quot;http://xdebug.org/&quot;&gt;Xdebug&lt;/a&gt; (2.7.0 or later) and &lt;a href=&quot;http://php.net/manual/en/tokenizer.installation.php&quot;&gt;tokenizer&lt;/a&gt; extensions. Generating XML reports requires the &lt;a href=&quot;http://php.net/manual/en/xmlwriter.installation.php&quot;&gt;xmlwriter&lt;/a&gt; extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae886aff1d4bb7e4623342172c7ee9379e47e356" translate="yes" xml:space="preserve">
          <source>The composite DataSet is very useful for aggregating several already existing datasets into a single dataset. When several datasets contain the same table the rows are appended in the specified order. For example if we have two datasets &lt;em&gt;fixture1.xml&lt;/em&gt;:</source>
          <target state="translated">복합 데이터 세트는 기존의 여러 데이터 세트를 단일 데이터 세트로 집계하는 데 매우 유용합니다. 여러 데이터 세트에 동일한 테이블이 포함되어 있으면 지정된 순서대로 행이 추가됩니다. 예를 들어 &lt;em&gt;fixture1.xml&lt;/em&gt; 데이터 세트가 두 &lt;em&gt;개인 경우&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="b6332451e113db2f61123065b0944d013cdb7178" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are canonicalized before they are compared. For instance, when the two variables &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are arrays, then these arrays are sorted before they are compared. When &lt;code&gt;$expected&lt;/code&gt; and &lt;code&gt;$actual&lt;/code&gt; are objects, each object is converted to an array containing all private, protected and public attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4a2061ea6a7410c1f0c4b56781ca6ed4e1dbbb" translate="yes" xml:space="preserve">
          <source>The database schema and tables</source>
          <target state="translated">데이터베이스 스키마 및 테이블</target>
        </trans-unit>
        <trans-unit id="938c178311bb0af6c0d6c5bbea93006d94f5a118" translate="yes" xml:space="preserve">
          <source>The default test name format is the equivalent of using the &lt;code&gt;__METHOD__&lt;/code&gt; magic constant inside the test method.</source>
          <target state="translated">기본 테스트 이름 형식은 테스트 방법 내에서 &lt;code&gt;__METHOD__&lt;/code&gt; 매직 상수 를 사용하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="fafe91c1607582fae45ed3f634a7cb69a22ee918" translate="yes" xml:space="preserve">
          <source>The directory to which the HTML report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d65667e89ae4a8477b23a7658764d200f15b9142" translate="yes" xml:space="preserve">
          <source>The directory to which the PHPUnit XML report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bbc1742ec52ef9710087147de4efd64844996a4" translate="yes" xml:space="preserve">
          <source>The easiest way to obtain PHPUnit is to download a &lt;a href=&quot;http://php.net/phar&quot;&gt;PHP Archive (PHAR)&lt;/a&gt; that has all required (as well as some optional) dependencies of PHPUnit bundled in a single file.</source>
          <target state="translated">PHPUnit을 얻는 가장 쉬운 방법 은 단일 파일에 번들로 제공되는 PHPUnit의 모든 필수 (선택적) 종속성을 가진 &lt;a href=&quot;http://php.net/phar&quot;&gt;PHP Archive (PHAR)&lt;/a&gt; 를 다운로드하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="5018197e76b03a766a932461be93a33603fe42cb" translate="yes" xml:space="preserve">
          <source>The effort of implementing the &lt;code&gt;assertTrue()&lt;/code&gt; and &lt;code&gt;isTrue()&lt;/code&gt; methods as well as the &lt;code&gt;PHPUnit\Framework\Constraint\IsTrue&lt;/code&gt; class yields the benefit that &lt;code&gt;assertThat()&lt;/code&gt; automatically takes care of evaluating the assertion and bookkeeping tasks such as counting it for statistics. Furthermore, the &lt;code&gt;isTrue()&lt;/code&gt; method can be used as a matcher when configuring mock objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c175c5291b428595e01b5b97f7fd89a34ff5ba" translate="yes" xml:space="preserve">
          <source>The effort of implementing the &lt;code&gt;assertTrue()&lt;/code&gt; and &lt;code&gt;isTrue()&lt;/code&gt; methods as well as the &lt;code&gt;PHPUnit_Framework_Constraint_IsTrue&lt;/code&gt; class yields the benefit that &lt;code&gt;assertThat()&lt;/code&gt; automatically takes care of evaluating the assertion and bookkeeping tasks such as counting it for statistics. Furthermore, the &lt;code&gt;isTrue()&lt;/code&gt; method can be used as a matcher when configuring mock objects.</source>
          <target state="translated">이행의 노력 &lt;code&gt;assertTrue()&lt;/code&gt; 및 &lt;code&gt;isTrue()&lt;/code&gt; 아니라 한 방법을 &lt;code&gt;PHPUnit_Framework_Constraint_IsTrue&lt;/code&gt; 의 클래스는 그 혜택을 얻을 수 &lt;code&gt;assertThat()&lt;/code&gt; 자동으로 주장을 평가하고 이러한 통계를 계산하는 등의 작업을 부기을 처리한다. 또한 모의 객체를 구성 할 때 &lt;code&gt;isTrue()&lt;/code&gt; 메소드를 매 처로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10dfb122a8e8abb204758c4d444cf935f173050e" translate="yes" xml:space="preserve">
          <source>The example below shows all template methods that are available in a test case class.</source>
          <target state="translated">아래 예제는 테스트 케이스 클래스에서 사용 가능한 모든 템플리트 메소드를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="ebc8411fbb68b74b80f8a4d104ff20348cb03f71" translate="yes" xml:space="preserve">
          <source>The example shown above instructs PHPUnit to include all sourcecode files with &lt;code&gt;.php&lt;/code&gt; suffix in the &lt;code&gt;src&lt;/code&gt; directory and its sub-directories in the code coverage report but exclude all files with &lt;code&gt;.php&lt;/code&gt; suffix in the &lt;code&gt;src/generated&lt;/code&gt; directory and its sub-directories as well as the &lt;code&gt;src/autoload.php&lt;/code&gt; file from the code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63246d15bea0ca120fc3f58fa644be33610c9fb6" translate="yes" xml:space="preserve">
          <source>The example shown above instructs PHPUnit to include all sourcecode files with &lt;code&gt;.php&lt;/code&gt; suffix in the &lt;code&gt;src&lt;/code&gt; directory and its sub-directories in the code coverage report(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8311f6f84172594e6fbf042315b5e7a17f3f4a5f" translate="yes" xml:space="preserve">
          <source>The example shown above is equivalent to invoking the PHPUnit test runner with &lt;code&gt;--group name --exclude-group name&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0191eb48825e581046f69f441455b1b4dd7a313" translate="yes" xml:space="preserve">
          <source>The example shown above only works when the original class does not declare a method named &quot;method&quot;.</source>
          <target state="translated">위에 표시된 예제는 원래 클래스가 &quot;method&quot;라는 메소드를 선언하지 않은 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ffb54c8c4bc00f61d91c6e8d8f2f2b0c794f3f1d" translate="yes" xml:space="preserve">
          <source>The example shown above only works when the original class does not declare a method named &amp;ldquo;method&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542526476171f549cd63c1b482aa12e5ac2e2c5e" translate="yes" xml:space="preserve">
          <source>The expected message can also be specified as a regular expression using the &lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt; annotation. This is helpful for situations where a substring is not adequate for matching a given message.</source>
          <target state="translated">&lt;code&gt;@expectedExceptionMessageRegExp&lt;/code&gt; 주석을 사용하여 예상 메시지를 정규식으로 지정할 수도 있습니다 . 이는 하위 문자열이 주어진 메시지와 일치하기에 적합하지 않은 상황에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3a988d61a0751672aaafde2cf98f863f01cffc3d" translate="yes" xml:space="preserve">
          <source>The expected message can be a substring of the exception Message. This can be useful to only assert that a certain name or parameter that was passed in shows up in the exception and not fixate the whole exception message in the test.</source>
          <target state="translated">예상되는 메시지는 예외 메시지의 하위 문자열 일 수 있습니다. 전달 된 특정 이름 또는 매개 변수가 예외에 표시되고 테스트에서 전체 예외 메시지를 수정하지 않는 경우에만 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebe13980050e37eb551b1982f2385ded3cf3de2c" translate="yes" xml:space="preserve">
          <source>The file to which the Clover XML report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5fc43d6d222cc5003a30f3da2202f1d98ae5d0" translate="yes" xml:space="preserve">
          <source>The file to which the Crap4J XML report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c4b2cec2fa3106843007d86aacb255be48143fe" translate="yes" xml:space="preserve">
          <source>The file to which the PHP report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71e631337b068928ccec535693f2c65e78fb0afc" translate="yes" xml:space="preserve">
          <source>The file to which the test result logfile in JUnit XML format is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6110c246be6b3b6e339bc5a9f084886d7d04320" translate="yes" xml:space="preserve">
          <source>The file to which the test result logfile in TeamCity format is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="940fe62d5126d406da7447b21c13af111be86c93" translate="yes" xml:space="preserve">
          <source>The file to which the test result logfile in TestDox HTML format is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7835b9e6be87a867b2d2b81f64eab840fc82037f" translate="yes" xml:space="preserve">
          <source>The file to which the test result logfile in TestDox XML format is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80cbc40e557b8f251839fa97c86f6e14fbb025fb" translate="yes" xml:space="preserve">
          <source>The file to which the test result logfile in TestDox text format is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643df4100d25cdf8eb10f709950767408cd68c96" translate="yes" xml:space="preserve">
          <source>The file to which the test result logfile in text format is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f79f747698176a4ee3fc9b29e27a3e5b2c36786" translate="yes" xml:space="preserve">
          <source>The file to which the text report is written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b14c86bca44a30a200c1de590f23e890b125bbd6" translate="yes" xml:space="preserve">
          <source>The file-based datasets and tables are generally used for the initial fixture and to describe the expected state of the database.</source>
          <target state="translated">파일 기반 데이터 세트 및 테이블은 일반적으로 초기 설비 및 데이터베이스의 예상 상태를 설명하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="626cef57956337081074e02c6e5a1eb0b1936d64" translate="yes" xml:space="preserve">
          <source>The flat xml dataset makes a crucial assumption now, defining that the attributes on the first defined row of a table define the columns of this table. In the previous example this would mean &amp;ldquo;id&amp;rdquo;, &amp;ldquo;content&amp;rdquo;, &amp;ldquo;user&amp;rdquo; and &amp;ldquo;created&amp;rdquo; are columns of the guestbook table. For the second row where &amp;ldquo;user&amp;rdquo; is not defined a NULL would be inserted into the database.</source>
          <target state="translated">플랫 XML 데이터 세트는 이제 테이블의 첫 번째 정의 된 행의 속성이이 테이블의 열을 정의하도록 정의하면서 중요한 가정을합니다. 앞의 예에서 이것은&amp;ldquo;id&amp;rdquo;,&amp;ldquo;content&amp;rdquo;,&amp;ldquo;user&amp;rdquo;및&amp;ldquo;created&amp;rdquo;는 방명록 테이블의 열을 의미합니다. &quot;user&quot;가 정의되지 않은 두 번째 행의 경우 데이터베이스에 NULL이 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="a3c4d50b1b8ad776f60daad1e986542d26adb9dc" translate="yes" xml:space="preserve">
          <source>The following XML logfile was generated for two tests, &lt;code&gt;testFailure&lt;/code&gt; and &lt;code&gt;testError&lt;/code&gt;, of a test case class named &lt;code&gt;FailureErrorTest&lt;/code&gt; and shows how failures and errors are denoted.</source>
          <target state="translated">다음 XML 로그 파일은이 테스트를 위해 생성 된 &lt;code&gt;testFailure&lt;/code&gt; 및 &lt;code&gt;testError&lt;/code&gt; 라는 이름의 테스트 케이스 클래스의, &lt;code&gt;FailureErrorTest&lt;/code&gt; 실패와 오류가 표시되는 방법과 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8790de6b6ffc9899c041f8b3c0b1bc83bcb28c65" translate="yes" xml:space="preserve">
          <source>The following conditions will help you to improve the code and design of your project, while using unit tests to verify that the refactoring's transformation steps are, indeed, behavior-preserving and do not introduce errors:</source>
          <target state="translated">다음 조건은 단위 테스트를 사용하여 리팩토링의 변환 단계가 실제로 동작을 유지하며 오류가 발생하지 않는지 확인하기 위해 프로젝트를 코드와 디자인을 개선하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="7a14c0051ef28625d055434f6e70e2ba5f30d65d" translate="yes" xml:space="preserve">
          <source>The following example details how release verification works. We start by downloading &lt;code&gt;phpunit.phar&lt;/code&gt; as well as its detached PGP signature &lt;code&gt;phpunit.phar.asc&lt;/code&gt;:</source>
          <target state="translated">다음 예는 릴리스 확인 작동 방식을 자세히 설명합니다. 우리는 &lt;code&gt;phpunit.phar&lt;/code&gt; 와 분리 된 PGP 서명 &lt;code&gt;phpunit.phar.asc&lt;/code&gt; 를 다운로드하여 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="fd363f999dbfcfe8860ed9a825fc223bb6f8583a" translate="yes" xml:space="preserve">
          <source>The following operators are supported for PHP, PHPUnit, and extension version constraints: &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35faa202fa98bac6b163bda1061d6c07f0da8283" translate="yes" xml:space="preserve">
          <source>The following optional packages are available:</source>
          <target state="translated">다음과 같은 선택적 패키지를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1d21520321aef45cd8063336744f6a70f080fc19" translate="yes" xml:space="preserve">
          <source>The format string may contain the following placeholders:</source>
          <target state="translated">형식 문자열에는 다음 자리 표시자가 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36fcd5239234f2eeefa02f5f9cf6be3da555413c" translate="yes" xml:space="preserve">
          <source>The four stages of a database test</source>
          <target state="translated">데이터베이스 테스트의 4 단계</target>
        </trans-unit>
        <trans-unit id="c6fd0d0f64f815eb09cc16a7d9bb07a3cf94e58b" translate="yes" xml:space="preserve">
          <source>The handling of NULL values with the flat xml dataset is tedious. A NULL value is different than an empty string value in almost any database (Oracle being an exception), something that is difficult to describe in the flat xml format. You can represent a NULL's value by omitting the attribute from the row specification. If our guestbook would allow anonymous entries represented by a NULL value in the user column, a hypothetical state of the guestbook table could look like:</source>
          <target state="translated">플랫 xml 데이터 세트로 NULL 값을 처리하는 것은 번거 롭습니다. NULL 값은 거의 모든 데이터베이스에서 빈 문자열 값과 다릅니다 (Oracle은 예외 임). 플랫 XML 형식으로 설명하기 어려운 것입니다. 행 스펙에서 속성을 생략하여 NULL 값을 나타낼 수 있습니다. 방명록에서 사용자 열에 NULL 값으로 표시되는 익명 항목을 허용하면 방명록 테이블의 가상 상태는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="57bd8c8c92de2670f3777436235ea33e685a33c0" translate="yes" xml:space="preserve">
          <source>The ignored lines of code (marked as ignored using the annotations) are counted as executed (if they are executable) and will not be highlighted.</source>
          <target state="translated">무시 된 코드 행 (주석을 사용하여 무시 된 것으로 표시됨)은 실행 된 것으로 간주되며 (실행 가능한 경우) 강조 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3370507adda7508de3877d98fe776d61a3d785b1" translate="yes" xml:space="preserve">
          <source>The implementation for this Array DataSet is simple and straightforward:</source>
          <target state="translated">이 Array DataSet의 구현은 간단하고 간단합니다.</target>
        </trans-unit>
        <trans-unit id="910b25c748bfce9bd36982494ff829905c45729b" translate="yes" xml:space="preserve">
          <source>The lower bound of what should be considered &amp;ldquo;high coverage&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d375f2576760126ca8bf052abe92ae70eef0b705" translate="yes" xml:space="preserve">
          <source>The method must accept exactly one argument</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="368bf9bf7ea184e002829fd5e6450dba3c436ece" translate="yes" xml:space="preserve">
          <source>The method must have a declared &lt;code&gt;bool&lt;/code&gt; return type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80356cf45180bbaca54f22c4ac08c0fd96e4782f" translate="yes" xml:space="preserve">
          <source>The method you want to test executes a rather large JOIN operation and uses the data to calculate some important results.</source>
          <target state="translated">테스트하려는 메소드는 다소 큰 JOIN 조작을 실행하고 데이터를 사용하여 중요한 결과를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="75562a28741b6a3b377647f6a9875c41d10505ab" translate="yes" xml:space="preserve">
          <source>The most common dataset is called Flat XML. It is a very simple xml format where a tag inside the root node &lt;code&gt;&amp;lt;dataset&amp;gt;&lt;/code&gt; represents exactly one row in the database. The tags name equals the table to insert the row into and an attribute represents the column. An example for a simple guestbook application could look like this:</source>
          <target state="translated">가장 일반적인 데이터 집합을 Flat XML이라고합니다. 루트 노드 &lt;code&gt;&amp;lt;dataset&amp;gt;&lt;/code&gt; 내의 태그 가 데이터베이스에서 정확히 하나의 행을 나타내는 매우 간단한 xml 형식 입니다. 태그 이름은 행을 삽입 할 테이블과 같고 속성은 열을 나타냅니다. 간단한 방명록 응용 프로그램의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="639459b72517d7801e18b01e6e5da098e53e0d84" translate="yes" xml:space="preserve">
          <source>The most common use case for custom comparators are Value Objects. These objects usually have an &lt;code&gt;equals(self $other): bool&lt;/code&gt; method (or a method just like that but with a different name) for comparing two instances of the Value Object&amp;rsquo;s type. &lt;code&gt;assertObjectEquals()&lt;/code&gt; makes custom comparison of objects convenient for this common use case:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34dd41ead40b9f2efcae6427399d721238a1e269" translate="yes" xml:space="preserve">
          <source>The order in which tests are executed can be made explicit:</source>
          <target state="translated">테스트 실행 순서는 다음과 같이 명시 적으로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f88ff1143bb2afe4c9685e63990ed885ac6ab25c" translate="yes" xml:space="preserve">
          <source>The possibility to run the database tests against different database targets easily is very important if you are developing on the development machine. If several developers run the database tests against the same database connection you can easily experience test-failures because of race-conditions.</source>
          <target state="translated">개발 머신에서 개발하는 경우 다른 데이터베이스 대상에 대해 데이터베이스 테스트를 쉽게 실행할 수있는 가능성이 매우 중요합니다. 여러 개발자가 동일한 데이터베이스 연결에 대해 데이터베이스 테스트를 실행하면 경쟁 조건으로 인해 테스트 실패가 쉽게 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c8681aef2412cda92eb8cb83b9d88d626b61f48" translate="yes" xml:space="preserve">
          <source>The practice of replacing an object with a test double that (optionally) returns configured return values is referred to as &lt;em&gt;stubbing&lt;/em&gt;. You can use a &lt;em&gt;stub&lt;/em&gt; to &quot;replace a real component on which the SUT depends so that the test has a control point for the indirect inputs of the SUT. This allows the test to force the SUT down paths it might not otherwise execute&quot;.</source>
          <target state="translated">구성된 리턴 값을 (선택적으로) 리턴하는 테스트 double로 오브젝트를 바꾸는 관행을 &lt;em&gt;stubbing&lt;/em&gt; 이라고합니다 . &lt;em&gt;스텁&lt;/em&gt; 을 사용 하여 &quot;SUT가 의존하는 실제 구성 요소를 대체하여 테스트에 SUT의 간접 입력에 대한 제어점을 갖도록 할 수 있습니다. 이렇게하면 테스트에서 SUT의 다운 경로를 강제로 실행할 수 있습니다.&quot;</target>
        </trans-unit>
        <trans-unit id="ae7dad6ad9e9e0744913a3a2bddaead09ebf3d07" translate="yes" xml:space="preserve">
          <source>The practice of replacing an object with a test double that (optionally) returns configured return values is referred to as &lt;em&gt;stubbing&lt;/em&gt;. You can use a &lt;em&gt;stub&lt;/em&gt; to &amp;ldquo;replace a real component on which the SUT depends so that the test has a control point for the indirect inputs of the SUT. This allows the test to force the SUT down paths it might not otherwise execute&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54b5071b0361e07844192796d42ced7a7792cb89" translate="yes" xml:space="preserve">
          <source>The practice of replacing an object with a test double that verifies expectations, for instance asserting that a method has been called, is referred to as &lt;em&gt;mocking&lt;/em&gt;.</source>
          <target state="translated">예를 들어 메소드가 호출되었다고 주장하는 것과 같이 기대치를 검증하는 테스트 이중으로 오브젝트를 바꾸는 관행을 &lt;em&gt;조롱&lt;/em&gt; 이라고합니다 .</target>
        </trans-unit>
        <trans-unit id="17efd3eb9497510cc6dd62322c3bbd3ae8f134f7" translate="yes" xml:space="preserve">
          <source>The previous assertion is helpful, but we surely want to check the actual contents of the table to verify that all the values were written into the correct columns. This can be achieved by a table assertion.</source>
          <target state="translated">이전 어설 션은 도움이되지만 테이블의 실제 내용을 확인하여 모든 값이 올바른 열에 기록되었는지 확인해야합니다. 이것은 테이블 명제에 의해 달성 될 수있다.</target>
        </trans-unit>
        <trans-unit id="cc09ba1ece3dc97d6701bd1bdc67d51487577aff" translate="yes" xml:space="preserve">
          <source>The public interface is used internally by the &lt;code&gt;assertDataSetsEqual()&lt;/code&gt; assertion on the Database TestCase to check for dataset quality. From the &lt;code&gt;IteratorAggregate&lt;/code&gt; interface the IDataSet inherits the &lt;code&gt;getIterator()&lt;/code&gt; method to iterate over all tables of the dataset. The reverse iterator allows PHPUnit to truncate tables opposite the order they were created to satisfy foreign key constraints.</source>
          <target state="translated">공용 인터페이스는 데이터베이스 TestCase 의 &lt;code&gt;assertDataSetsEqual()&lt;/code&gt; 어설 션에서 내부적으로 사용 되어 데이터 세트 품질을 검사합니다. 로부터 &lt;code&gt;IteratorAggregate&lt;/code&gt; IDataSet 인터페이스 상속 &lt;code&gt;getIterator()&lt;/code&gt; 데이터 세트의 모든 테이블을 반복하는 방법을. 역 반복자를 사용하면 PHPUnit은 외래 키 제약 조건을 충족시키기 위해 작성된 순서와 반대되는 테이블을자를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="030da757e389a28a0de9ae1d0922fb0b60ac245c" translate="yes" xml:space="preserve">
          <source>The respective parameter must have a declared type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21bb118bcf37992474e6a634e350e7ab89ce4d3c" translate="yes" xml:space="preserve">
          <source>The return value yielded by a producer is passed &quot;as-is&quot; to its consumers by default. This means that when a producer returns an object, a reference to that object is passed to the consumers. When a copy should be used instead of a reference, then &lt;code&gt;@depends clone&lt;/code&gt; should be used instead of &lt;code&gt;@depends&lt;/code&gt;.</source>
          <target state="translated">생산자가 산출 한 반환 값은 기본적으로 소비자에게 &quot;있는 그대로&quot;전달됩니다. 즉, 생산자가 개체를 반환하면 해당 개체에 대한 참조가 소비자에게 전달됩니다. 카피 대신 기준으로 표기하면 다음 &lt;code&gt;@depends clone&lt;/code&gt; 대신 표기 &lt;code&gt;@depends&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f665cf55cbc0cfd1598b8218cdee8c349e824eb9" translate="yes" xml:space="preserve">
          <source>The return value yielded by a producer is passed &amp;ldquo;as-is&amp;rdquo; to its consumers by default. This means that when a producer returns an object, a reference to that object is passed to the consumers. Instead of a reference either (a) a (deep) copy via &lt;code&gt;@depends clone&lt;/code&gt;, or (b) a (normal shallow) clone (based on PHP keyword &lt;code&gt;clone&lt;/code&gt;) via &lt;code&gt;@depends shallowClone&lt;/code&gt; are possible too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ed433389df6f1aa848b4e229268e91f4753c9c" translate="yes" xml:space="preserve">
          <source>The same applies to static properties of classes that were newly loaded/declared within a test. They cannot be reset to their originally declared default value after the test, since that value is unknown. Whichever value is set will leak into subsequent tests.</source>
          <target state="translated">테스트 내에서 새로로드 / 선언 된 클래스의 정적 속성에도 동일하게 적용됩니다. 해당 값을 알 수 없으므로 테스트 후 원래 선언 된 기본값으로 재설정 할 수 없습니다. 어떤 값을 설정하든 후속 테스트에 누출됩니다.</target>
        </trans-unit>
        <trans-unit id="387f8e603eee1f6b84a5322a6f58a36b175c81ac" translate="yes" xml:space="preserve">
          <source>The section &amp;ldquo;Using the Database Connection&amp;rdquo; explains the API of this interface and how you can make the best use of it.</source>
          <target state="translated">&amp;ldquo;데이터베이스 연결 사용&amp;rdquo;절에서는이 인터페이스의 API와이를 최대한 활용하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="386cf0125afd518facf71323bdce056937c4e37c" translate="yes" xml:space="preserve">
          <source>The section on Database Assertions will show some more details on how to make use of the Query DataSet.</source>
          <target state="translated">데이터베이스 어설 션 섹션에는 쿼리 데이터 세트를 사용하는 방법에 대한 자세한 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="704a8533261013b9e955453ca24e3993417cc2f0" translate="yes" xml:space="preserve">
          <source>The standard test suite loader will look for the sourcefile in the current working directory and in each directory that is specified in PHP&amp;rsquo;s &lt;code&gt;include_path&lt;/code&gt; configuration directive. A class name such as &lt;code&gt;Project_Package_Class&lt;/code&gt; is mapped to the source filename &lt;code&gt;Project/Package/Class.php&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcec9c3dbffecbdff28b777b0cab9c16c4bc9ddf" translate="yes" xml:space="preserve">
          <source>The standard test suite loader will look for the sourcefile in the current working directory and in each directory that is specified in PHP's &lt;code&gt;include_path&lt;/code&gt; configuration directive. A class name such as &lt;code&gt;Project_Package_Class&lt;/code&gt; is mapped to the source filename &lt;code&gt;Project/Package/Class.php&lt;/code&gt;.</source>
          <target state="translated">표준 테스트 스위트 로더는 현재 작업 디렉토리와 PHP의 &lt;code&gt;include_path&lt;/code&gt; 구성 지시문에 지정된 각 디렉토리에서 소스 파일을 찾습니다 . &lt;code&gt;Project_Package_Class&lt;/code&gt; 와 같은 클래스 이름 은 소스 파일 이름 &lt;code&gt;Project/Package/Class.php&lt;/code&gt; 에 매핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="160f10ea7fc57fe909fba6e6b874175626aac209" translate="yes" xml:space="preserve">
          <source>The table name</source>
          <target state="translated">테이블 이름</target>
        </trans-unit>
        <trans-unit id="496c4d74cbcf8bad3b09189b642e3f9fa335dd1f" translate="yes" xml:space="preserve">
          <source>The test itself is more concise.</source>
          <target state="translated">테스트 자체가 더 간결합니다.</target>
        </trans-unit>
        <trans-unit id="d732cc0f6a73ef9cc4f9019b5cbb997d5650b9f4" translate="yes" xml:space="preserve">
          <source>The test name for a PHPT test is the filesystem path.</source>
          <target state="translated">PHPT 테스트의 테스트 이름은 파일 시스템 경로입니다.</target>
        </trans-unit>
        <trans-unit id="1949cf215f75c47db940619879605780b278b8ce" translate="yes" xml:space="preserve">
          <source>The test names to match will be in one of the following formats:</source>
          <target state="translated">일치하는 테스트 이름은 다음 형식 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="b7b998caa8ea272cf8d8918c703fe68bbfdb84fa" translate="yes" xml:space="preserve">
          <source>The tests are public methods that are named &lt;code&gt;test*&lt;/code&gt;.</source>
          <target state="translated">테스트는 &lt;code&gt;test*&lt;/code&gt; 라는 공개 메소드입니다 .</target>
        </trans-unit>
        <trans-unit id="067e0acd96063588549c1264f3135b20895c6ea9" translate="yes" xml:space="preserve">
          <source>The tests for a class &lt;code&gt;Class&lt;/code&gt; go into a class &lt;code&gt;ClassTest&lt;/code&gt;.</source>
          <target state="translated">클래스 &lt;code&gt;Class&lt;/code&gt; 에 대한 테스트는 &lt;code&gt;ClassTest&lt;/code&gt; 클래스 로 들어 갑니다 .</target>
        </trans-unit>
        <trans-unit id="437db73904dc79ea7233ea20c436d9401ae81870" translate="yes" xml:space="preserve">
          <source>The upper bound of what should be considered &amp;ldquo;low coverage&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d0a3d3993a84844e9e3c508fe8766adbac3485" translate="yes" xml:space="preserve">
          <source>There are few good reasons to share fixtures between tests, but in most cases the need to share a fixture between tests stems from an unresolved design problem.</source>
          <target state="translated">테스트간에 픽스쳐를 공유해야하는 이유는 거의 없지만 대부분의 경우 테스트간에 픽스쳐를 공유해야 할 필요성은 해결되지 않은 설계 문제에서 비롯됩니다.</target>
        </trans-unit>
        <trans-unit id="992e15c23b7d890dda0fdc37581bff07bbc38563" translate="yes" xml:space="preserve">
          <source>There are several means to achieve this pre-condition to database testing.</source>
          <target state="translated">데이터베이스 테스트를위한이 사전 조건을 달성하기위한 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac1a8b3fe1b0f81c33c92ba4dbe72abc0fd463fe" translate="yes" xml:space="preserve">
          <source>There are three different types of datasets/datatables:</source>
          <target state="translated">세 가지 유형의 데이터 세트 / 데이터 테이블이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1528ac79f82c0177f97b41a721280907ad0e8f63" translate="yes" xml:space="preserve">
          <source>There are three interesting methods on the Connection interface which has to be returned from the &lt;code&gt;getConnection()&lt;/code&gt; method on the Database TestCase:</source>
          <target state="translated">Connection 인터페이스 에는 데이터베이스 TestCase 의 &lt;code&gt;getConnection()&lt;/code&gt; 메소드에서 리턴 해야하는 3 가지 흥미로운 메소드가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6cdf1278a971e0beb06b88d9568dcedafe9fcea" translate="yes" xml:space="preserve">
          <source>There are three possible values for this option:</source>
          <target state="translated">이 옵션에는 세 가지 가능한 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad75b53f50d95ecf15ca76e50d41d37cf4c24576" translate="yes" xml:space="preserve">
          <source>There is a good reason why all the examples on unit testing do not include interactions with the database: these kind of tests are both complex to setup and maintain. While testing against your database you need to take care of the following variables:</source>
          <target state="translated">단위 테스트에 대한 모든 예제에 데이터베이스와의 상호 작용이 포함되지 않는 이유는 충분합니다. 이러한 종류의 테스트는 설정 및 유지 관리가 복잡합니다. 데이터베이스를 테스트하는 동안 다음 변수를 관리해야합니다.</target>
        </trans-unit>
        <trans-unit id="46fbee926b7a97f002f834163ac5262ffd44ff81" translate="yes" xml:space="preserve">
          <source>There is another more structured XML dataset, which is a bit more verbose to write but avoids the NULL problems of the Flat XML dataset. Inside the root node &lt;code&gt;&amp;lt;dataset&amp;gt;&lt;/code&gt; you can specify &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;column&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; tags. An equivalent dataset to the previously defined Guestbook Flat XML looks like:</source>
          <target state="translated">좀 더 구조화 된 XML 데이터 세트가 있는데, 이는 좀 더 장황하지만 Flat XML 데이터 세트의 NULL 문제를 피합니다. 루트 노드 &lt;code&gt;&amp;lt;dataset&amp;gt;&lt;/code&gt; 내에서 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;column&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;row&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;null /&amp;gt;&lt;/code&gt; 태그를 지정할 수 있습니다 . 이전에 정의 된 방명록 플랫 XML과 동등한 데이터 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de8637931631873f6bca7dcced76c5f1a3e3e4a9" translate="yes" xml:space="preserve">
          <source>There is no Array based DataSet in PHPUnit's Database Extension (yet), but we can implement our own easily. Our guestbook example should look like:</source>
          <target state="translated">PHPUnit의 데이터베이스 확장 (아직)에는 배열 기반의 DataSet이 없지만 자체 구현은 쉽습니다. 방명록 예제는 다음과 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="57bb6b85e5611494208d3bb53e4fa8c13adb2482" translate="yes" xml:space="preserve">
          <source>This abstraction is necessary to compare the actual contents of a database against the expected contents. Expectations can be represented as XML, YAML, CSV files or PHP array for example. The DataSet and DataTable interfaces enable the comparison of these conceptually different sources, emulating relational database storage in a semantically similar approach.</source>
          <target state="translated">이 추상화는 데이터베이스의 실제 내용과 예상 내용을 비교하는 데 필요합니다. 예를 들어 XML, YAML, CSV 파일 또는 PHP 배열로 예상을 표시 할 수 있습니다. DataSet 및 DataTable 인터페이스를 사용하면 개념적으로 다른 소스를 비교하여 의미 적으로 유사한 접근 방식으로 관계형 데이터베이스 스토리지를 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25116ebad8a41f136461b16b04daeb57e9faff46" translate="yes" xml:space="preserve">
          <source>This annotation can be added to the docblock of the test class or the individual test methods. The recommended way is to add the annotation to the docblock of the test class, not to the docblock of the test methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2643748a6d22c79a16e93e5ebc98c26e631756" translate="yes" xml:space="preserve">
          <source>This annotation is especially useful in strict coverage mode where unintentionally covered code will cause a test to fail. See &lt;a href=&quot;risky-tests#risky-tests.unintentionally-covered-code&quot;&gt;the section called &amp;ldquo;Unintentionally Covered Code&amp;rdquo;&lt;/a&gt; for more information regarding strict coverage mode.</source>
          <target state="translated">이 주석은 의도하지 않은 코드로 인해 테스트가 실패하는 엄격한 범위 모드에서 특히 유용합니다. 참조 &lt;a href=&quot;risky-tests#risky-tests.unintentionally-covered-code&quot;&gt;&quot;실수로 적용 코드&quot;라는 섹션&lt;/a&gt; 엄격한 적용 모드에 대한 자세한 정보를.</target>
        </trans-unit>
        <trans-unit id="fdda88234f3ad6d83643ee78909fd84e6f7765bc" translate="yes" xml:space="preserve">
          <source>This appendix lists the various assertion methods that are available.</source>
          <target state="translated">이 부록에는 사용 가능한 다양한 어설 션 방법이 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="13feb49855231d6be908a7feeaf57e1daa24472d" translate="yes" xml:space="preserve">
          <source>This appendix shows all the varieties of annotations supported by PHPUnit.</source>
          <target state="translated">이 부록은 PHPUnit에서 지원하는 모든 종류의 주석을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b98d13b9412fe4d25d8a37a20f86d7dba2004c97" translate="yes" xml:space="preserve">
          <source>This assertion would only pass on exactly one second of the universe though, on &lt;em&gt;2010&amp;ndash;05&amp;ndash;01 21:47:08&lt;/em&gt;. Dates pose a special problem to database testing and we can circumvent the failure by omitting the &amp;ldquo;created&amp;rdquo; column from the assertion.</source>
          <target state="translated">이 주장은 &lt;em&gt;2010&amp;ndash;05&amp;ndash;01 21:47:08&lt;/em&gt; 에 정확히 1 초의 우주를 통과 할 것 입니다. 날짜는 데이터베이스 테스트에 특별한 문제를 야기하며 어설 션에서 &quot;만든&quot;열을 생략하여 실패를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72a59897716fb5d23d8fac3b8ea8bd39bbee50cd" translate="yes" xml:space="preserve">
          <source>This attribute can be used to configure the path to the sourcecode file that declares the class configured with &lt;code&gt;printerClass&lt;/code&gt; in case that class cannot be autoloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234ba9a016d5e55d77225f0e8f60dca30ffeee48" translate="yes" xml:space="preserve">
          <source>This attribute can be used to configure the path to the sourcecode file that declares the class configured with &lt;code&gt;testSuiteLoaderClass&lt;/code&gt; in case that class cannot be autoloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6bc90c1baa7d35b24700463066c8157101b203" translate="yes" xml:space="preserve">
          <source>This attribute configures the bootstrap script that is loaded before the tests are executed. This script usually only registers the autoloader callback that is used to load the code under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db445d63709c616ea3d4034e9fde55a65d83f62" translate="yes" xml:space="preserve">
          <source>This attribute configures the caching of test results. This caching is required for certain other features to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174752ec93c064f71528d7ea3302aa2a6c415586" translate="yes" xml:space="preserve">
          <source>This attribute configures the default time limit (in seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de2310026db62914016919e01cc5b456738d59c" translate="yes" xml:space="preserve">
          <source>This attribute configures the file in which the test result cache (see above) is stored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3789c9bdb612c1a8791257e08d4d32750716a323" translate="yes" xml:space="preserve">
          <source>This attribute configures the name of a class that either is &lt;code&gt;PHPUnit\TextUI\ResultPrinter&lt;/code&gt; or that extends &lt;code&gt;PHPUnit\TextUI\ResultPrinter&lt;/code&gt;. An object of this class is used to print progress and test results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb451945d93ced5474bf666529675fce2c92156" translate="yes" xml:space="preserve">
          <source>This attribute configures the name of a class that implements the &lt;code&gt;PHPUnit\Runner\TestSuiteLoader&lt;/code&gt; interface. An object of this class is used to load the test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a5db4c52db8d074f75f0fa2991697e1e150bcc" translate="yes" xml:space="preserve">
          <source>This attribute configures the name of the default test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d58a8d7c74d6a17acae5421960d5e536edc5b5b5" translate="yes" xml:space="preserve">
          <source>This attribute configures the number of columns to use for progress output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0231a8ce8f04908b5b38026f8ccc1ae472337a" translate="yes" xml:space="preserve">
          <source>This attribute configures the order in which tests are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b9ae5b1fdced1482fe7163b4730a60a38a9f60" translate="yes" xml:space="preserve">
          <source>This attribute configures the time limit for tests annotated with &lt;code&gt;@large&lt;/code&gt; (in seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c962e34c7f8b9ef4f513923e827df3fe1c28f98" translate="yes" xml:space="preserve">
          <source>This attribute configures the time limit for tests annotated with &lt;code&gt;@medium&lt;/code&gt; (in seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b58aee1d48780550d5c018491c60a4f3931f5de" translate="yes" xml:space="preserve">
          <source>This attribute configures the time limit for tests annotated with &lt;code&gt;@small&lt;/code&gt; (in seconds).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01e12570f324a523540ff92c3a7e526909424acb" translate="yes" xml:space="preserve">
          <source>This attribute configures this operation for all tests. This configuration can be overridden using the &lt;code&gt;@backupGlobals&lt;/code&gt; annotation on the test case class and test method level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd8e23c598d2e43be6bffaceea62e148341e03db" translate="yes" xml:space="preserve">
          <source>This attribute configures this operation for all tests. This configuration can be overridden using the &lt;code&gt;@backupStaticAttributes&lt;/code&gt; annotation on the test case class and test method level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285afe027743ccde5994ed70ac7577fbc50a1ea5" translate="yes" xml:space="preserve">
          <source>This attribute configures whether &lt;code&gt;E_DEPRECATED&lt;/code&gt; and &lt;code&gt;E_USER_DEPRECATED&lt;/code&gt; events triggered by the code under test are converted to an exception (and mark the test as error).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05306eaaf4252e0a0e404d3fd2037f4c2a2e350b" translate="yes" xml:space="preserve">
          <source>This attribute configures whether &lt;code&gt;E_ERROR&lt;/code&gt; and &lt;code&gt;E_USER_ERROR&lt;/code&gt; events triggered by the code under test are converted to an exception (and mark the test as error).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4c2011928590d2d0bfc99ab711530d492bebef6" translate="yes" xml:space="preserve">
          <source>This attribute configures whether &lt;code&gt;E_STRICT&lt;/code&gt;, &lt;code&gt;E_NOTICE&lt;/code&gt;, and &lt;code&gt;E_USER_NOTICE&lt;/code&gt; events triggered by the code under test are converted to an exception (and mark the test as error).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8f76535fa7fb5fe82b908a18985e2a73401c241" translate="yes" xml:space="preserve">
          <source>This attribute configures whether &lt;code&gt;E_WARNING&lt;/code&gt; and &lt;code&gt;E_USER_WARNING&lt;/code&gt; events triggered by the code under test are converted to an exception (and mark the test as error).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c977dc2e346129dd914eca957cc85839df7b22bc" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should mark a test as risky when global state is manipulated by the code under test (or the test code).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9497eaf5a132d499f4c8599c99dfa3cd5b50c654" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should mark a test as risky when it executes code that is not specified using &lt;code&gt;@covers&lt;/code&gt; or &lt;code&gt;@uses&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267340514f03fa6a49e93dbfa1d6bca9bdc7da2a" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should mark a test as risky when it is annotated with &lt;code&gt;@todo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acb312ffad8b03679900a8db1958fe51f5c81d7" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should mark a test as risky when no assertions are performed (expectations are also considered).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423318a4e35a6fb84d857c91541087d0f295278a" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should mark a test as risky when the code under test (or the test code) prints output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9ca8a88235ba14fed56bc49c8cadb14f0c2ce24" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should mark a test that is annotated with &lt;code&gt;@small&lt;/code&gt; as risky when it invokes a PHP built-in function or method that operates on &lt;code&gt;resource&lt;/code&gt; variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f67cc398288b02c520217c74f741cf8a8cd3c65" translate="yes" xml:space="preserve">
          <source>This attribute configures whether PHPUnit should print its output to &lt;code&gt;stderr&lt;/code&gt; instead of &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4499370ea459b59e6382a7cb139c8826a6dc994d" translate="yes" xml:space="preserve">
          <source>This attribute configures whether a test will be marked as risky (see &lt;a href=&quot;risky-tests#risky-tests-unintentionally-covered-code&quot;&gt;Unintentionally Covered Code&lt;/a&gt;) when it does not have a &lt;a href=&quot;annotations#appendixes-annotations-covers&quot;&gt;@covers&lt;/a&gt; annotation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b422c96cecbb12bdf7358cfb970a7b5a266234" translate="yes" xml:space="preserve">
          <source>This attribute configures whether arrays and object graphs that are passed from one test to another using the &lt;code&gt;@depends&lt;/code&gt; annotation should be recursively scanned for mock objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1de6ac51ff2786b963dac114dbe17052acc605" translate="yes" xml:space="preserve">
          <source>This attribute configures whether code units annotated with &lt;code&gt;@deprecated&lt;/code&gt; should be ignored from code coverage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74aef2549a19bcda915692b343d67dc61784b845" translate="yes" xml:space="preserve">
          <source>This attribute configures whether colors are used in PHPUnit&amp;rsquo;s output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="505e512a5a3938a8b1849537f686a9c8916896b8" translate="yes" xml:space="preserve">
          <source>This attribute configures whether dependencies between tests (expressed using the &lt;code&gt;@depends&lt;/code&gt; annotation) should be resolved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be2764b178f37fa467c470d376a3b103d887ba1" translate="yes" xml:space="preserve">
          <source>This attribute configures whether each test should be run in a separate PHP process for increased isolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6faba6e955517c3f0ee4576db5dd9cf298d5260d" translate="yes" xml:space="preserve">
          <source>This attribute configures whether more verbose output should be printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c6ae4da49ea6a2085173ce0197a64006f57a26" translate="yes" xml:space="preserve">
          <source>This attribute configures whether progress should be animated when TestDox format is used, for instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c8ccf27b594fe1cbe62f24d66a1eec9f68f406" translate="yes" xml:space="preserve">
          <source>This attribute configures whether tests that are not successful should be printed in reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d9c541461b86ffa4817629471df465bc8725b9" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the &lt;code&gt;@codeCoverageIgnore*&lt;/code&gt; annotations should be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e03b50b79af48eef09563d1a42ec3df1f30fb45" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the PHPUnit test runner should exit with a shell exit code that indicates failure when all tests are successful but there are tests that had warnings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455d6da85987edd5a48bac9853eec7b3722d5825" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the PHPUnit test runner should exit with a shell exit code that indicates failure when all tests are successful but there are tests that were marked as risky.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a269dc2f6a037298a75301a12a8e6df4135063" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the output should be printed in TestDox format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74ba5feda080cde0f73bd3c6645012c3a4bc18c8" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with a status &amp;ldquo;error&amp;rdquo;, &amp;ldquo;failure&amp;rdquo;, &amp;ldquo;risky&amp;rdquo; or &amp;ldquo;warning&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed336334fec4bbfecd31440b05e59dd9b9bff53a" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with status &amp;ldquo;error&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee230267e6efaca29706d6a3372f19ff8170bef" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with status &amp;ldquo;failure&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b860b0861d498f7b572e0c2a3888eb5727719c1b" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with status &amp;ldquo;incomplete&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2db02f6e8153e4652cdce5cdd9d278b5eb08bb9" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with status &amp;ldquo;risky&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="488053c090a589bea8f4bc8fb6fbf14dc11b21ba" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with status &amp;ldquo;skipped&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deecc237dc7728c4a490714713bc3d0952522be" translate="yes" xml:space="preserve">
          <source>This attribute configures whether the test suite execution should be stopped after the first test finished with status &amp;ldquo;warning&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d1f4d9682235126ebf2e383519b38ede1f369a" translate="yes" xml:space="preserve">
          <source>This attribute configures whether time limits should be enforced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c627d36215900d2af0f7536181a274d5d028599" translate="yes" xml:space="preserve">
          <source>This can be used for integration testing. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis-specifying-covered-parts-examples-guestbookintegrationtest-php&quot;&gt;A test that specifies that no method should be covered&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c251df74abf3228a7572f227758053c8d51e7776" translate="yes" xml:space="preserve">
          <source>This can be used for integration testing. See &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php&quot;&gt;Example 11.3&lt;/a&gt; for an example.</source>
          <target state="translated">이것은 통합 테스트에 사용될 수 있습니다. &lt;a href=&quot;code-coverage-analysis#code-coverage-analysis.specifying-covered-methods.examples.GuestbookIntegrationTest.php&quot;&gt;예는 예 11.3&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c1224c28b68da2c5ae6c3fe58a9994bba70d6a87" translate="yes" xml:space="preserve">
          <source>This element can be used to prepend a path to the &lt;code&gt;include_path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62b57354854ad6be26a8ccabac6bfd487aa91e14" translate="yes" xml:space="preserve">
          <source>This element can be used to set a PHP configuration setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0aa5ac8528f0633c0f8da652561b7f225ff94c" translate="yes" xml:space="preserve">
          <source>This element can be used to set a global constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4460a8e7c5c9c63d3f916e7067cfc64d3254143" translate="yes" xml:space="preserve">
          <source>This element can be used to set a global variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc968047d97eb2428e5937006168106b912893f6" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_COOKIE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3862ea8a56a3d3b07e233910ec338ba6b5f9f4e9" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_ENV&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922f28f2eb12458f5e229bc72091d6b287d7a67c" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_FILES&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ebf4c2c4a11428d7ee99d5282212ba96b0b2cc8" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_GET&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41bc7deb165078dec9af90fd83f4d16c302b1a3" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_POST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e52a51b15ae5f4a0c29d8ca5b2ac8523782febb" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_REQUEST&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db9160d9a689e3c98bbb3086a8f20a074a99788" translate="yes" xml:space="preserve">
          <source>This element can be used to set a value in the super-global array &lt;code&gt;$_SERVER&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef95a0f2f1c8dddd6937931854a71005e02282f" translate="yes" xml:space="preserve">
          <source>This element is the root for one or more &lt;code&gt;&amp;lt;testsuite&amp;gt;&lt;/code&gt; elements that are used to configure the tests that are to be executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbebb60844250b8630bc0f5677253e70f0f871eb" translate="yes" xml:space="preserve">
          <source>This file can be used in your Database TestCase by calling the &lt;code&gt;createMySQLXMLDataSet($filename)&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;createMySQLXMLDataSet($filename)&lt;/code&gt; 메소드 를 호출 하여이 파일을 데이터베이스 TestCase에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0214e1ec5357308c35f9d649038202b86ff070b0" translate="yes" xml:space="preserve">
          <source>This has several advantages:</source>
          <target state="translated">여기에는 몇 가지 장점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="23cbd4cfaac0639512f842e62964bb192515290f" translate="yes" xml:space="preserve">
          <source>This has the database connection hardcoded in the PDO connection though. PHPUnit has another awesome feature that could make this testcase even more generic. If you use the &lt;a href=&quot;appendixes.configuration#appendixes.configuration.php-ini-constants-variables&quot;&gt;XML Configuration&lt;/a&gt; you could make the database connection configurable per test-run. First let's create a &amp;ldquo;phpunit.xml&amp;rdquo; file in our tests/ directory of the application that looks like:</source>
          <target state="translated">이것은 데이터베이스 연결이 PDO 연결에 하드 코딩되어 있습니다. PHPUnit에는이 테스트 케이스를보다 일반적인 것으로 만들 수있는 또 다른 멋진 기능이 있습니다. &lt;a href=&quot;appendixes.configuration#appendixes.configuration.php-ini-constants-variables&quot;&gt;XML 구성&lt;/a&gt; 을 사용하는 경우 테스트 실행마다 데이터베이스 연결을 구성 할 수 있습니다. 먼저 다음과 같은 응용 프로그램의 tests / 디렉토리에&amp;ldquo;phpunit.xml&amp;rdquo;파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6405333adb9b984030af95505c191ef40852e101" translate="yes" xml:space="preserve">
          <source>This interface also has an assertion that checks if two instances of Table Metadata equal each other, which is used by the data-set equality assertion.</source>
          <target state="translated">이 인터페이스에는 테이블 메타 데이터의 두 인스턴스가 서로 같은지 확인하는 어설 션이 있으며 이는 데이터 세트 등식 어설 션에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20da57f85fd84eecf18489dd0dc006c2edbf48fc" translate="yes" xml:space="preserve">
          <source>This is obviously easy to write. Here &lt;code&gt;&amp;lt;guestbook&amp;gt;&lt;/code&gt; is the table name where two rows are inserted into each with four columns &amp;ldquo;id&amp;rdquo;, &amp;ldquo;content&amp;rdquo;, &amp;ldquo;user&amp;rdquo; and &amp;ldquo;created&amp;rdquo; with their respective values.</source>
          <target state="translated">이것은 분명히 쓰기 쉽다. 여기서 &lt;code&gt;&amp;lt;guestbook&amp;gt;&lt;/code&gt; 은 4 개의 열 &quot;id&quot;, &quot;content&quot;, &quot;user&quot;및 &quot;created&quot;를 각각 2 개의 행에 각각 삽입 한 테이블 이름입니다.</target>
        </trans-unit>
        <trans-unit id="785aef8ff808a171464fc55bb5c25972e90ae8ac" translate="yes" xml:space="preserve">
          <source>This is simple, convient AND it solves the NULL issue that the similar Flat XML dataset has. A NULL in YAML is just the column name without no value specified. An empty string is specified as &lt;code&gt;column1: &quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">이것은 간단하고 확실하며 유사한 Flat XML 데이터 세트의 NULL 문제를 해결합니다. YAML의 NULL은 값이 지정되지 않은 열 이름 일뿐입니다. 빈 문자열은 &lt;code&gt;column1: &quot;&quot;&lt;/code&gt; 로 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="2780fab7e8a832639b40ac03a385d4a0a85c6b82" translate="yes" xml:space="preserve">
          <source>This new XML format is specific to the &lt;a href=&quot;http://www.mysql.com&quot;&gt;MySQL database server&lt;/a&gt;. Support for it was added in PHPUnit 3.5. Files in this format can be generated using the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/mysqldump.html&quot;&gt;&lt;code&gt;mysqldump&lt;/code&gt;&lt;/a&gt; utility. Unlike CSV datasets, which &lt;code&gt;mysqldump&lt;/code&gt; also supports, a single file in this XML format can contain data for multiple tables. You can create a file in this format by invoking &lt;code&gt;mysqldump&lt;/code&gt; like so:</source>
          <target state="translated">이 새로운 XML 형식은 &lt;a href=&quot;http://www.mysql.com&quot;&gt;MySQL 데이터베이스 서버&lt;/a&gt; 에만 적용됩니다 . PHPUnit 3.5에 대한 지원이 추가되었습니다. 이 형식의 파일은 &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/mysqldump.html&quot;&gt; &lt;code&gt;mysqldump&lt;/code&gt; &lt;/a&gt; 유틸리티를 사용하여 생성 할 수 있습니다 . &lt;code&gt;mysqldump&lt;/code&gt; 도 지원 하는 CSV 데이터 셋과 달리이 XML 형식의 단일 파일에는 여러 테이블에 대한 데이터가 포함될 수 있습니다. 다음 과 같이 &lt;code&gt;mysqldump&lt;/code&gt; 를 호출하여이 형식으로 파일을 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bed147e67c86fed1996330f07ba68b2072f80879" translate="yes" xml:space="preserve">
          <source>This only happens when using &lt;code&gt;assertEquals()&lt;/code&gt; or other &amp;lsquo;weak&amp;rsquo; comparison functions on arrays or objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b5902742491789dd48ddafc8ad0e2cee7d86e18" translate="yes" xml:space="preserve">
          <source>This only happens when using assertEquals or other 'weak' comparison functions on arrays or objects.</source>
          <target state="translated">이것은 배열이나 객체에 assertEquals 또는 다른 '약한'비교 함수를 사용할 때만 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c226405ade73b18110ff28485c3ef78d7e4fee09" translate="yes" xml:space="preserve">
          <source>This package is included in the PHAR distribution of PHPUnit. It can be installed via Composer using the following command:</source>
          <target state="translated">이 패키지는 PHPUnit의 PHAR 배포에 포함되어 있습니다. 다음 명령을 사용하여 Composer를 통해 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a4eb86935408edfd9cdaf6c1159bbe2483db04d" translate="yes" xml:space="preserve">
          <source>This package is not included in the PHAR distribution of PHPUnit. It can be installed via Composer using the following command:</source>
          <target state="translated">이 패키지는 PHPUnit의 PHAR 배포에 포함되어 있지 않습니다. 다음 명령을 사용하여 Composer를 통해 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed32c14262af065016892351d1725e08847322bd" translate="yes" xml:space="preserve">
          <source>This section shows noteworthy edge cases that lead to confusing code coverage information.</source>
          <target state="translated">이 섹션에서는 혼동되는 코드 적용 정보로 이어지는 주목할만한 에지 사례를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3105a004b2b3492c8b19b64d14b9c753375ffbe6" translate="yes" xml:space="preserve">
          <source>This work is licensed under the Creative Commons Attribution 3.0 Unported License.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f18bd25f7016bf109727e49a5c12fd82ded0bf" translate="yes" xml:space="preserve">
          <source>Tip: Use your own Abstract Database TestCase</source>
          <target state="translated">팁 : 고유 한 추상 데이터베이스 TestCase 사용</target>
        </trans-unit>
        <trans-unit id="731838b2c0adf2a7be75156ee0f58af256ad9c1e" translate="yes" xml:space="preserve">
          <source>To allow the clean-up and fixture loading functionalities to work the PHPUnit Database Extension requires access to a database connection abstracted across vendors through the PDO library. It is important to note that your application does not need to be based on PDO to use PHPUnit's database extension, the connection is merely used for the clean-up and fixture setup.</source>
          <target state="translated">클린업 및 픽스처 로딩 기능이 작동하도록하려면 PHPUnit Database Extension은 PDO 라이브러리를 통해 공급 업체간에 추상화 된 데이터베이스 연결에 액세스해야합니다. PHPUnit의 데이터베이스 확장을 사용하기 위해 응용 프로그램이 PDO를 기반으로 할 필요는 없으며 연결은 정리 및 고정 설정에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="152b45fae7ec210e936a1c79aa3f6b701092acea" translate="yes" xml:space="preserve">
          <source>To ease testing and reduce duplication a shortcut can be used to specify a class constant as an &lt;code&gt;@expectedExceptionCode&lt;/code&gt; using the &quot;&lt;code&gt;@expectedExceptionCode ClassName::CONST&lt;/code&gt;&quot; syntax.</source>
          <target state="translated">테스트를 용이하게하고 중복을 줄이려면 &quot; &lt;code&gt;@expectedExceptionCode ClassName::CONST&lt;/code&gt; &quot;구문 을 사용하여 클래스 상수를 &lt;code&gt;@expectedExceptionCode&lt;/code&gt; 로 지정하는 바로 가기를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c4dce95019cf5594b670c989434c5c4b98fd6660" translate="yes" xml:space="preserve">
          <source>To ease testing and reduce duplication a shortcut can be used to specify a class constant as an &lt;code&gt;@expectedExceptionMessage&lt;/code&gt; using the &quot;&lt;code&gt;@expectedExceptionMessage ClassName::CONST&lt;/code&gt;&quot; syntax. A sample can be found in &lt;a href=&quot;appendixes.annotations#appendixes.annotations.expectedExceptionCode&quot;&gt;the section called &amp;ldquo;@expectedExceptionCode&amp;rdquo;&lt;/a&gt;.</source>
          <target state="translated">테스트를 쉽게하고 중복을 줄이려면 바로 가기를 사용하여 &quot; &lt;code&gt;@expectedExceptionMessage ClassName::CONST&lt;/code&gt; &quot;구문 을 사용하여 클래스 상수를 &lt;code&gt;@expectedExceptionMessage&lt;/code&gt; 로 지정할 수 있습니다 . 샘플은 &lt;a href=&quot;appendixes.annotations#appendixes.annotations.expectedExceptionCode&quot;&gt;&amp;ldquo;@expectedExceptionCode&amp;rdquo;섹션&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="46429fc498e1292e82c066711078712dae0c4db7" translate="yes" xml:space="preserve">
          <source>To globally install the PHAR:</source>
          <target state="translated">PHAR을 전체적으로 설치하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="5830b3435b63402a3f16f1acee025a965ad4c0d3" translate="yes" xml:space="preserve">
          <source>To input configuration to the extension via XML, the XML configuration file&amp;rsquo;s &lt;code&gt;extensions&lt;/code&gt; section needs to be updated to have configuration values, as shown in &lt;a href=&quot;#extending-phpunit-examples-testrunnerconfigurableextensionconfig&quot;&gt;Example 10.5&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29f12d91262a1047abe3ae52eb44c453728e8337" translate="yes" xml:space="preserve">
          <source>To localize defects, we want our attention to be focussed on relevant failing tests. This is why PHPUnit skips the execution of a test when a depended-upon test has failed. This improves defect localization by exploiting the dependencies between tests as shown in &lt;a href=&quot;#writing-tests-for-phpunit-examples-dependencyfailuretest-php&quot;&gt;Example 2.3&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1347127258552b53b73162c50d7f9e4500fe52bf" translate="yes" xml:space="preserve">
          <source>To quickly localize defects, we want our attention to be focussed on relevant failing tests. This is why PHPUnit skips the execution of a test when a depended-upon test has failed. This improves defect localization by exploiting the dependencies between tests as shown in &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.DependencyFailureTest.php&quot;&gt;Example 2.3&lt;/a&gt;.</source>
          <target state="translated">결함을 신속하게 지역화하기 위해 관련 실패한 테스트에주의를 기울이고 싶습니다. 의존성 테스트에 실패한 경우 PHPUnit이 테스트 실행을 건너 뜁니다. 이는 &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.examples.DependencyFailureTest.php&quot;&gt;예제 2.3에&lt;/a&gt; 표시된 것처럼 테스트 간의 종속성을 이용하여 결함 위치를 개선 합니다.</target>
        </trans-unit>
        <trans-unit id="052b76b68cfe966c5c79708451eba5f9546bf80c" translate="yes" xml:space="preserve">
          <source>To run all tests for the library we just need to point the PHPUnit command-line test runner to the test directory:</source>
          <target state="translated">라이브러리에 대한 모든 테스트를 실행하려면 PHPUnit 명령 행 테스트 실행기를 테스트 디렉토리로 지정하기 만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="090d6f7b8618d0d398d13e961b0a567f58fe4565" translate="yes" xml:space="preserve">
          <source>To run all tests for the library we need to point the PHPUnit command-line test runner to the test directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e4be0289df3e2278e103388cf01e3bf0475b366" translate="yes" xml:space="preserve">
          <source>To run only the tests that are declared in the &lt;code&gt;CurrencyTest&lt;/code&gt; test case class in &lt;code&gt;tests/CurrencyTest.php&lt;/code&gt; we can use the following command:</source>
          <target state="translated">&lt;code&gt;tests/CurrencyTest.php&lt;/code&gt; 의 &lt;code&gt;CurrencyTest&lt;/code&gt; 테스트 사례 클래스에 선언 된 테스트 만 실행하려면 다음 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d64a1d49dd9450667397fb8d14be275acf13de5" translate="yes" xml:space="preserve">
          <source>To run the test suite, use the the &lt;code&gt;--testsuite&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e15ac0a18971f18a613cffe43a3b94b3764c0f3f" translate="yes" xml:space="preserve">
          <source>To understand the internals of DataSets and DataTables, lets have a look at the interface of a DataSet. You can skip this part if you do not plan to implement your own DataSet or DataTable.</source>
          <target state="translated">DataSet 및 DataTable의 내부를 이해하려면 DataSet의 인터페이스를 살펴 보겠습니다. 자체 DataSet 또는 DataTable을 구현하지 않으려는 경우이 부분을 건너 뛸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af2e4c2ebedd7493808b9a8ce1195a0b6c4f8fbe" translate="yes" xml:space="preserve">
          <source>To use the Flat XML dataset effectively when NULL values are relevant the first row of each table must not contain any NULL value and only successive rows are allowed to omit attributes. This can be awkward, since the order of the rows is a relevant factor for database assertions.</source>
          <target state="translated">NULL 값이 관련 될 때 Flat XML 데이터 세트를 효과적으로 사용하려면 각 테이블의 첫 번째 행에 NULL 값이 없어야하며 연속 행만 속성을 생략 할 수 있습니다. 행의 순서는 데이터베이스 어설 션과 관련이 있기 때문에 어색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="c02237c7b02e4b8fe882d91039fd1e35d3cabc4f" translate="yes" xml:space="preserve">
          <source>Typically, in a project that is developed using an agile process, such as Extreme Programming, the documentation cannot keep up with the frequent changes to the project's design and code. Extreme Programming demands &lt;em&gt;collective code ownership&lt;/em&gt;, so all developers need to know how the entire system works. If you are disciplined enough to consequently use &quot;speaking names&quot; for your tests that describe what a class should do, you can use PHPUnit's TestDox functionality to generate automated documentation for your project based on its tests. This documentation gives developers an overview of what each class of the project is supposed to do.</source>
          <target state="translated">일반적으로 익스트림 프로그래밍과 같은 민첩한 프로세스를 사용하여 개발 된 프로젝트에서 문서는 프로젝트의 디자인 및 코드에 대한 빈번한 변경을 따라갈 수 없습니다. Extreme Programming은 &lt;em&gt;공동 코드 소유권을&lt;/em&gt; 요구 하므로 모든 개발자는 전체 시스템의 작동 방식을 알아야합니다. 클래스가해야 할 일을 설명하는 테스트에 &quot;말하는 이름&quot;을 사용하기에 충분히 훈련 된 경우, PHPUnit의 TestDox 기능을 사용하여 테스트를 기반으로 프로젝트에 대한 자동화 된 문서를 생성 할 수 있습니다. 이 문서는 개발자에게 프로젝트의 각 클래스가 수행해야 할 작업에 대한 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b39fccec73003cdda9f4e39a9b8d1f79c5bd35c2" translate="yes" xml:space="preserve">
          <source>Understanding DataSets and DataTables</source>
          <target state="translated">데이터 세트 및 데이터 테이블 이해</target>
        </trans-unit>
        <trans-unit id="473a1a7ba7d5c6d4f91d2db14aa02df3adf85bc4" translate="yes" xml:space="preserve">
          <source>Unintentionally Covered Code</source>
          <target state="translated">의도하지 않은 코드</target>
        </trans-unit>
        <trans-unit id="c16d5f07f74e355b21d87741daea434449781182" translate="yes" xml:space="preserve">
          <source>Unit Tests are primarily written as a good practice to help developers identify and fix bugs, to refactor code and to serve as documentation for a unit of software under test. To achieve these benefits, unit tests ideally should cover all the possible paths in a program. One unit test usually covers one specific path in one function or method. However a test method is not necessarily an encapsulated, independent entity. Often there are implicit dependencies between test methods, hidden in the implementation scenario of a test.</source>
          <target state="translated">단위 테스트는 주로 개발자가 버그를 식별 및 수정하고, 코드를 리팩터링하고, 테스트중인 소프트웨어 단위에 대한 문서로 사용하는 데 유용한 모범 사례로 작성되었습니다. 이러한 이점을 달성하려면 단위 테스트는 프로그램의 모든 가능한 경로를 이상적으로 다루어야합니다. 하나의 단위 테스트는 일반적으로 하나의 기능 또는 방법으로 하나의 특정 경로를 포함합니다. 그러나 테스트 방법이 반드시 캡슐화 된 독립 엔티티 일 필요는 없습니다. 종종 테스트의 구현 시나리오에 숨겨진 테스트 방법 사이에 암시 적 종속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fa47641d8db125127eb4e59fac4adb4c27367ef" translate="yes" xml:space="preserve">
          <source>Unit testing offers many advantages:</source>
          <target state="translated">단위 테스트는 많은 장점을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="445aba2719a870b6e92645a8ccd5a419539809d0" translate="yes" xml:space="preserve">
          <source>Unit tests provide working examples for how to use an API and can significantly aid documentation efforts.</source>
          <target state="translated">단위 테스트는 API 사용 방법에 대한 실제 예제를 제공하며 문서 작업에 큰 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e78d1e8d58204a4228725045ba5ff0aba05d455b" translate="yes" xml:space="preserve">
          <source>Use colors in output. On Windows, use &lt;a href=&quot;https://github.com/adoxa/ansicon&quot;&gt;ANSICON&lt;/a&gt; or &lt;a href=&quot;https://github.com/Maximus5/ConEmu&quot;&gt;ConEmu&lt;/a&gt;.</source>
          <target state="translated">출력에 색상을 사용하십시오. Windows에서는 &lt;a href=&quot;https://github.com/adoxa/ansicon&quot;&gt;ANSICON&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/Maximus5/ConEmu&quot;&gt;ConEmu를&lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="3573b4a4a51e4a7fdce706f212629595077148d5" translate="yes" xml:space="preserve">
          <source>Useless Tests</source>
          <target state="translated">쓸모없는 테스트</target>
        </trans-unit>
        <trans-unit id="d7548e7169ace6467b1c4023d4a71b3fa1642ded" translate="yes" xml:space="preserve">
          <source>Using multiple values is possible. These need to be separated by &lt;code&gt;,&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="927f9977ea2ebafd827eafa66188862aacda3031" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;phpVersion&lt;/code&gt; and &lt;code&gt;phpVersionOperator&lt;/code&gt; attributes, a required PHP version can be specified. The example below will only add the &lt;code&gt;/path/to/*Test.php&lt;/code&gt; files and &lt;code&gt;/path/to/MyTest.php&lt;/code&gt; file if the PHP version is at least 5.3.0.</source>
          <target state="translated">은 Using &lt;code&gt;phpVersion&lt;/code&gt; 을 하고 &lt;code&gt;phpVersionOperator&lt;/code&gt; 이 속성 필요한 PHP 버전을 지정할 수 있습니다. 아래 예제 는 PHP 버전이 5.3.0 이상인 경우 &lt;code&gt;/path/to/*Test.php&lt;/code&gt; 파일과 &lt;code&gt;/path/to/MyTest.php&lt;/code&gt; 파일 만 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="26449b0826bb7a02f35aa468ff05f2b8aaa0094c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;phpVersion&lt;/code&gt; and &lt;code&gt;phpVersionOperator&lt;/code&gt; attributes, a required PHP version can be specified:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f6b359741e89cdab7e53453eda4e764da26b20" translate="yes" xml:space="preserve">
          <source>Using the Composite DataSet we can aggregate both fixture files:</source>
          <target state="translated">Composite DataSet을 사용하여 두 조명기 파일을 집계 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="7a4b7a6f06e90f419c8119bdaffc00c67e2166ae" translate="yes" xml:space="preserve">
          <source>Usually when using PHPUnit your testcases would extend the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class in the following way:</source>
          <target state="translated">일반적으로 PHPUnit을 사용할 때 테스트 케이스는 다음과 같은 방법으로 &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 클래스를 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="4fba657a2566a29bb2eae7ad600ea97c18865719" translate="yes" xml:space="preserve">
          <source>Variations</source>
          <target state="translated">Variations</target>
        </trans-unit>
        <trans-unit id="a5d747bbb33afd9305aaffa5bfd0514ceefd9a15" translate="yes" xml:space="preserve">
          <source>Various software metrics exist to measure code coverage:</source>
          <target state="translated">코드 범위를 측정하기위한 다양한 소프트웨어 메트릭이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d8089893a67ec03da73e4b81bfbe04d0d61b65c" translate="yes" xml:space="preserve">
          <source>Verify outcome</source>
          <target state="translated">결과 확인</target>
        </trans-unit>
        <trans-unit id="968a2dc859429ff332a18fe4f68d1bc3f083b912" translate="yes" xml:space="preserve">
          <source>Verify that you can reproduce the defect.</source>
          <target state="translated">결함을 재현 할 수 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="515bca6bd8d57e897b38ffb481f512e10f333f1b" translate="yes" xml:space="preserve">
          <source>Verifying PHPUnit PHAR Releases</source>
          <target state="translated">PHPUnit PHAR 릴리즈 확인</target>
        </trans-unit>
        <trans-unit id="87f6c76b8a2c217f0b522b06bb568e49150522f6" translate="yes" xml:space="preserve">
          <source>Verifying the state of the database after your test has run</source>
          <target state="translated">테스트 실행 후 데이터베이스 상태 확인</target>
        </trans-unit>
        <trans-unit id="ea225c3777756c899e5beac56ead359dfc690949" translate="yes" xml:space="preserve">
          <source>Versions are compared using PHP&amp;rsquo;s &lt;a href=&quot;https://www.php.net/version_compare&quot;&gt;version_compare&lt;/a&gt; function. Among other things, this means that the &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;==&lt;/code&gt; operator can only be used with complete &lt;code&gt;X.Y.Z&lt;/code&gt; version numbers and that just &lt;code&gt;X.Y&lt;/code&gt; will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4226ba146a6442cd5b7bc379dce83e15dc118e1f" translate="yes" xml:space="preserve">
          <source>We can now modify our test-case to look like:</source>
          <target state="translated">이제 테스트 케이스를 다음과 같이 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c74a1403765c15c77c1fa571bc693a220acc9037" translate="yes" xml:space="preserve">
          <source>We can now run the database test suite using different configurations from the command-line interface:</source>
          <target state="translated">이제 명령 행 인터페이스와 다른 구성을 사용하여 데이터베이스 테스트 스위트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b21b52b04520b644cf0f1fc215000617879b9c8" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t have the release manager&amp;rsquo;s public key (&lt;code&gt;6372C20A&lt;/code&gt;) in our local system. In order to proceed with the verification we need to retrieve the release manager&amp;rsquo;s public key from a key server. One such server is &lt;code&gt;pgp.uni-mainz.de&lt;/code&gt;. The public key servers are linked together, so you should be able to connect to any key server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bc92c8ed3137ce5da83bf715f291250acbaa082" translate="yes" xml:space="preserve">
          <source>We don't have the release manager's public key (&lt;code&gt;6372C20A&lt;/code&gt;) in our local system. In order to proceed with the verification we need to retrieve the release manager's public key from a key server. One such server is &lt;code&gt;pgp.uni-mainz.de&lt;/code&gt;. The public key servers are linked together, so you should be able to connect to any key server.</source>
          <target state="translated">로컬 시스템에 릴리스 관리자의 공개 키 ( &lt;code&gt;6372C20A&lt;/code&gt; ) 가 없습니다 . 확인을 진행하려면 키 서버에서 릴리스 관리자의 공개 키를 검색해야합니다. 그러한 서버 중 하나는 &lt;code&gt;pgp.uni-mainz.de&lt;/code&gt; 입니다. 공개 키 서버는 서로 연결되어 있으므로 모든 키 서버에 연결할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="cd4d8f22f33f5d3ca426103163030e842ca48713" translate="yes" xml:space="preserve">
          <source>We first use the &lt;code&gt;createMock()&lt;/code&gt; method that is provided by the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class to set up a mock object for the &lt;code&gt;Observer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d95e979c279f198d114fc1ef2d6062fa2c6b5d1c" translate="yes" xml:space="preserve">
          <source>We first use the &lt;code&gt;getMockBuilder()&lt;/code&gt; method that is provided by the &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; class to set up a mock object for the &lt;code&gt;Observer&lt;/code&gt;. Since we give an array as the second (optional) parameter for the &lt;code&gt;getMock()&lt;/code&gt; method, only the &lt;code&gt;update()&lt;/code&gt; method of the &lt;code&gt;Observer&lt;/code&gt; class is replaced by a mock implementation.</source>
          <target state="translated">먼저 &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 클래스에서 제공 하는 &lt;code&gt;getMockBuilder()&lt;/code&gt; 메소드 를 사용하여 &lt;code&gt;Observer&lt;/code&gt; 의 모의 객체를 설정합니다 . &lt;code&gt;getMock()&lt;/code&gt; 메소드 의 두 번째 (선택적) 매개 변수로 배열을 제공하므로 &lt;code&gt;Observer&lt;/code&gt; 클래스 의 &lt;code&gt;update()&lt;/code&gt; 메소드 만 모의 구현으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="fe05c08006ff0a8ce21d34d52ae92caedbb9b25e" translate="yes" xml:space="preserve">
          <source>We have to fix up the Query Table call:</source>
          <target state="translated">쿼리 테이블 호출을 수정해야합니다.</target>
        </trans-unit>
        <trans-unit id="3b17a72d479f56ce5347129ab513ff650e8232b2" translate="yes" xml:space="preserve">
          <source>We then wrap the Flat XML DataSet into a Replacement DataSet:</source>
          <target state="translated">그런 다음 Flat XML DataSet을 대체 DataSet으로 래핑합니다.</target>
        </trans-unit>
        <trans-unit id="dc386149087ac76552404444ad67da830bfb5651" translate="yes" xml:space="preserve">
          <source>We want to verify PHPUnit&amp;rsquo;s PHP Archive (&lt;code&gt;phpunit-x.y.phar&lt;/code&gt;) against its detached signature (&lt;code&gt;phpunit-x.y.phar.asc&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6521e2d9cf4c4b8c30cee3301b63ec6b1f151d3e" translate="yes" xml:space="preserve">
          <source>We want to verify PHPUnit's PHP Archive (&lt;code&gt;phpunit.phar&lt;/code&gt;) against its detached signature (&lt;code&gt;phpunit.phar.asc&lt;/code&gt;):</source>
          <target state="translated">분리 된 서명 ( &lt;code&gt;phpunit.phar.asc&lt;/code&gt; ) 에 대해 PHPUnit의 PHP 아카이브 ( &lt;code&gt;phpunit.phar&lt;/code&gt; ) 를 확인하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="08ec43f3df96cefc50ab04e118d795825023e071" translate="yes" xml:space="preserve">
          <source>Webserver</source>
          <target state="translated">Webserver</target>
        </trans-unit>
        <trans-unit id="7912e65563f990d380c3a7b1fe9013f351937498" translate="yes" xml:space="preserve">
          <source>What PHPUnit cannot help you with is the fact that database tests are very slow compared to tests not using the database. Depending on how large the interactions with your database are your tests could run a considerable amount of time. However, if you keep the amount of data used for each test small and try to test as much code using non-database tests you can easily get away in under a minute even for large test suites.</source>
          <target state="translated">PHPUnit이 도울 수없는 것은 데이터베이스를 사용하지 않는 테스트에 비해 데이터베이스 테스트가 매우 느리다는 것입니다. 데이터베이스와의 상호 작용이 얼마나 큰지에 따라 테스트가 상당한 시간 동안 실행될 수 있습니다. 그러나 각 테스트에 사용되는 데이터 양을 작게 유지하고 비 데이터베이스 테스트를 사용하여 많은 코드를 테스트하려고하면 대규모 테스트 스위트에서도 1 분 안에 쉽게 벗어날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad378f1367aa73f06a572f140feae837a7657f59" translate="yes" xml:space="preserve">
          <source>What about the Database Schema (DDL)?</source>
          <target state="translated">데이터베이스 스키마 (DDL)는 어떻습니까?</target>
        </trans-unit>
        <trans-unit id="115684ae5a4f0ea9d4f32a8dae7dc26e1ca72887" translate="yes" xml:space="preserve">
          <source>What can I do, when I get a &amp;ldquo;Too much Connections&amp;rdquo; Error?</source>
          <target state="translated">&quot;너무 많은 연결&quot;오류가 발생하면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="5c83e4a9267735ea2a8a452869dd4e283f9096fa" translate="yes" xml:space="preserve">
          <source>What happens when you have two tests with slightly different setups? There are two possibilities:</source>
          <target state="translated">약간 다른 설정으로 두 가지 테스트를 수행하면 어떻게됩니까? 두 가지 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="93725b738940b2c0445b887a973d77f12a3a4b3e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--colors&lt;/code&gt; is used without any value, &lt;code&gt;auto&lt;/code&gt; is the chosen value.</source>
          <target state="translated">값없이 &lt;code&gt;--colors&lt;/code&gt; 를 사용 하면 &lt;code&gt;auto&lt;/code&gt; 가 선택된 값입니다.</target>
        </trans-unit>
        <trans-unit id="ff78fb67cdcbe6f7a992e23cd36e18068200b853" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;phpunit.phar&lt;/code&gt; is used then this attribute may be used to configure a directory from which all &lt;code&gt;*.phar&lt;/code&gt; files will be loaded as extensions for the PHPUnit test runner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c52d1e14412e2cdd24581efb9b8f0c8a891a49" translate="yes" xml:space="preserve">
          <source>When a comparison fails PHPUnit creates textual representations of the input values and compares those. Due to that implementation a diff might show more problems than actually exist.</source>
          <target state="translated">비교가 실패하면 PHPUnit은 입력 값의 텍스트 표현을 작성하고이를 비교합니다. 그 구현으로 인해 diff는 실제로 존재하는 것보다 더 많은 문제를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d7b2b56c3bb7baccf57768f31f22cba6408cce1" translate="yes" xml:space="preserve">
          <source>When a test depends on a test that uses data providers, the depending test will be executed when the test it depends upon is successful for at least one data set. The result of a test that uses data providers cannot be injected into a depending test.</source>
          <target state="translated">테스트가 데이터 공급자를 사용하는 테스트에 의존하는 경우 종속 테스트는 하나 이상의 데이터 세트에 대한 테스트가 성공할 때 실행됩니다. 데이터 공급자를 사용하는 테스트 결과는 종속 테스트에 주입 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d708fdf0d4e99be64a7752b817e49ef3cd1ca3e3" translate="yes" xml:space="preserve">
          <source>When a test has a data provider that uses named sets, each iteration of the data gets the current name appended to the end of the default test name. See &lt;a href=&quot;#textui-examples-testcaseclass-php&quot;&gt;Example 3.1&lt;/a&gt; for an example of named data sets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83186dd5b2868bce96efb067330d4ec7fd33e75" translate="yes" xml:space="preserve">
          <source>When a test has a data provider that uses named sets, each iteration of the data gets the current name appended to the end of the default test name. See &lt;a href=&quot;textui#textui.examples.TestCaseClass.php&quot;&gt;Example 3.1&lt;/a&gt; for an example of named data sets.</source>
          <target state="translated">테스트에 명명 된 집합을 사용하는 데이터 공급자가있는 경우 데이터를 반복 할 때마다 기본 테스트 이름 끝에 현재 이름이 추가됩니다. 명명 된 데이터 세트의 예는 &lt;a href=&quot;textui#textui.examples.TestCaseClass.php&quot;&gt;Example 3.1&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a8d2ea27a9b8d141da38c928ee1911dac9633b2" translate="yes" xml:space="preserve">
          <source>When a test has a data provider, each iteration of the data gets the current index appended to the end of the default test name.</source>
          <target state="translated">테스트에 데이터 공급자가 있으면 각 데이터 반복마다 기본 테스트 이름 끝에 현재 색인이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="928de2897eb690b5e2463dfe5714db6ab366857d" translate="yes" xml:space="preserve">
          <source>When a test is run in a separate process, PHPUnit will attempt to preserve the global state from the parent process by serializing all globals in the parent process and unserializing them in the child process. This can cause problems if the parent process contains globals that are not serializable. To fix this, you can prevent PHPUnit from preserving global state with the &lt;code&gt;@preserveGlobalState&lt;/code&gt; annotation.</source>
          <target state="translated">테스트가 별도의 프로세스에서 실행될 때, PHPUnit은 상위 프로세스의 모든 글로벌을 직렬화하고 하위 프로세스에서 직렬화를 해제함으로써 상위 프로세스에서 글로벌 상태를 보존하려고 시도합니다. 부모 프로세스에 직렬화 할 수없는 전역이 포함 된 경우 문제가 발생할 수 있습니다. 이 문제를 해결하기 위해 &lt;code&gt;@preserveGlobalState&lt;/code&gt; 주석을 사용하여 PHPUnit이 전역 상태를 유지하지 못하게 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="405c880b47d0a413832ae143bb4db686fdbf556f" translate="yes" xml:space="preserve">
          <source>When a test receives input from both a &lt;code&gt;@dataProvider&lt;/code&gt; method and from one or more tests it &lt;code&gt;@depends&lt;/code&gt; on, the arguments from the data provider will come before the ones from depended-upon tests. The arguments from depended-upon tests will be the same for each data set. See &lt;a href=&quot;#writing-tests-for-phpunit-data-providers-examples-dependencyanddataprovidercombo-php&quot;&gt;Example 2.9&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5087899f9ddca43147b61cf42ce219f784ed6d6" translate="yes" xml:space="preserve">
          <source>When a test receives input from both a &lt;code&gt;@dataProvider&lt;/code&gt; method and from one or more tests it &lt;code&gt;@depends&lt;/code&gt; on, the arguments from the data provider will come before the ones from depended-upon tests. The arguments from depended-upon tests will be the same for each data set. See &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php&quot;&gt;Example 2.9&lt;/a&gt;</source>
          <target state="translated">테스트가 &lt;code&gt;@dataProvider&lt;/code&gt; 메서드와 @ 의존 하는 하나 이상의 테스트에서 입력을 받으면 데이터 공급자의 인수가 &lt;code&gt;@depends&lt;/code&gt; 테스트 의 인수보다 우선합니다. 의존 테스트의 인수는 각 데이터 세트마다 동일합니다. &lt;a href=&quot;writing-tests-for-phpunit#writing-tests-for-phpunit.data-providers.examples.DependencyAndDataProviderCombo.php&quot;&gt;예 2.9&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="41134dd831aeb0bb5259a2f5a6831f7e865c793d" translate="yes" xml:space="preserve">
          <source>When code coverage data is collected and processed, static code analysis is performed to improve reasoning about the covered code. This is an expensive operation, whose result can be cached. When the &lt;code&gt;cacheDirectory&lt;/code&gt; attribute is set, static analysis results will be cached in the specified directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f39ec370243fced00c1b53d74960cd74dab84f5" translate="yes" xml:space="preserve">
          <source>When invoked as shown above, the PHPUnit command-line test runner will look for a &lt;code&gt;ArrayTest.php&lt;/code&gt; sourcefile in the current working directory, load it, and expect to find a &lt;code&gt;ArrayTest&lt;/code&gt; test case class. It will then execute the tests of that class.</source>
          <target state="translated">위에 표시된대로 PHPUnit 명령 행 테스트 실행기는 현재 작업 디렉토리에서 &lt;code&gt;ArrayTest.php&lt;/code&gt; 소스 파일을 찾아서로드하고 &lt;code&gt;ArrayTest&lt;/code&gt; 테스트 케이스 클래스 를 찾을 것으로 예상합니다 . 그런 다음 해당 클래스의 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="24ddded31577eb2fac163a711cb7805b9371aa09" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;false&lt;/code&gt;, only line coverage data will be collected, processed, and reported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8c257df4624e54c7d61c98bf07c4bfb68faef2" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;false&lt;/code&gt;, the error handler installed by &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; will not convert &lt;code&gt;E_NOTICE&lt;/code&gt;, &lt;code&gt;E_USER_NOTICE&lt;/code&gt;, or &lt;code&gt;E_STRICT&lt;/code&gt; errors to exceptions.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정되면 &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; 에 의해 설치된 오류 핸들러 는 &lt;code&gt;E_NOTICE&lt;/code&gt; , &lt;code&gt;E_USER_NOTICE&lt;/code&gt; 또는 &lt;code&gt;E_STRICT&lt;/code&gt; 오류를 예외 로 변환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="002a6f78e7e4d71c9647e3e9d3f68886ae01fde9" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;false&lt;/code&gt;, the error handler installed by &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; will not convert &lt;code&gt;E_WARNING&lt;/code&gt; or &lt;code&gt;E_USER_WARNING&lt;/code&gt; errors to exceptions.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정되면 &lt;code&gt;convertErrorsToExceptions&lt;/code&gt; 에 의해 설치된 오류 핸들러 는 &lt;code&gt;E_WARNING&lt;/code&gt; 또는 &lt;code&gt;E_USER_WARNING&lt;/code&gt; 오류를 예외 로 변환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="78fefefb2e1ebb856757b90963dd4bdef481d50e" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, all sourcecode files that are configured to be considered for code coverage analysis will be included in the code coverage report(s). This includes sourcecode files that are not executed while the tests are running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4926a1890c4829263d1f39d309c8169b2865a845" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, all sourcecode files that are configured to be considered for code coverage analysis will be processed. This includes sourcecode files that are not executed while the tests are running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d68efc50944e9b615c4e6ed47916965e9a5cea" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, line coverage, branch coverage, and path coverage data will be collected, processed, and reported. This requires a code coverage driver that supports path coverage. Path Coverage is currently only implemented by Xdebug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7762f87faf35f317348e26044ac8f9c8f7f7e8b1" translate="yes" xml:space="preserve">
          <source>When testing a fluent interface, it is sometimes useful to have a stubbed method return a reference to the stubbed object. &lt;a href=&quot;#test-doubles-stubs-examples-stubtest4-php&quot;&gt;Example 8.6&lt;/a&gt; shows how you can use &lt;code&gt;returnSelf()&lt;/code&gt; to achieve this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2924e217edcd774dc23569abb58a9b2d78ee16dc" translate="yes" xml:space="preserve">
          <source>When testing a fluent interface, it is sometimes useful to have a stubbed method return a reference to the stubbed object. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest4.php&quot;&gt;Example 9.5&lt;/a&gt; shows how you can use &lt;code&gt;returnSelf()&lt;/code&gt; to achieve this.</source>
          <target state="translated">유창한 인터페이스를 테스트 할 때 스텁 된 메소드가 스텁 된 오브젝트에 대한 참조를 리턴하도록하는 것이 유용한 경우가 있습니다. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest4.php&quot;&gt;Example 9.5&lt;/a&gt; 에서는 &lt;code&gt;returnSelf()&lt;/code&gt; 를 사용하여 이를 수행 하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="87b982bd5efbe2cd01a6dcc7b3fcc25e026e7b8c" translate="yes" xml:space="preserve">
          <source>When testing code that uses PHP built-in functions such as &lt;code&gt;fopen()&lt;/code&gt; that may trigger errors it can sometimes be useful to use error suppression while testing. This allows you to check the return values by suppressing notices that would lead to an exception raised by PHPUnit&amp;rsquo;s error handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ea43a722b4accbde6ee894dec3f96eb881f12e" translate="yes" xml:space="preserve">
          <source>When testing that relies on php functions that trigger errors like &lt;code&gt;fopen&lt;/code&gt; it can sometimes be useful to use error suppression while testing. This allows you to check the return values by suppressing notices that would lead to a phpunit &lt;code&gt;PHPUnit\Framework\Error\Notice&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fopen&lt;/code&gt; 과 같은 오류를 유발하는 PHP 함수 를 사용하는 테스트는 테스트 중에 오류 억제를 사용하는 것이 유용 할 수 있습니다. 이를 통해 phpunit &lt;code&gt;PHPUnit\Framework\Error\Notice&lt;/code&gt; 이어질 수있는 알림을 억제하여 반환 값을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b17827b6e3f6202e1bb3973dbef0491f95f413f" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;forceCoversAnnotation&lt;/code&gt; configuration option in the &lt;a href=&quot;configuration#appendixes-configuration&quot;&gt;configuration file&lt;/a&gt; is set to &lt;code&gt;true&lt;/code&gt;, every test method needs to have an associated &lt;code&gt;@covers&lt;/code&gt; annotation (either on the test class or the individual test method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990bfb73867024d395d16a9cdf248f1795bbe0cb" translate="yes" xml:space="preserve">
          <source>When the first guestbook entry is deleted from the dataset only &amp;ldquo;id&amp;rdquo;, &amp;ldquo;content&amp;rdquo; and &amp;ldquo;created&amp;rdquo; would be columns of the guestbook table, since &amp;ldquo;user&amp;rdquo; is not specified.</source>
          <target state="translated">첫 번째 방명록 항목이 데이터 세트에서 &quot;id&quot;만 삭제되면 &quot;user&quot;가 지정되지 않으므로 &quot;content&quot;및 &quot;created&quot;는 방명록 테이블의 열이됩니다.</target>
        </trans-unit>
        <trans-unit id="fc33515038d480815dce350ef54023bb52c7fc20" translate="yes" xml:space="preserve">
          <source>When the generated output would be long to read PHPUnit will split it up and provide a few lines of context around every difference.</source>
          <target state="translated">생성 된 출력을 읽는 데 시간이 오래 걸리면 PHPUnit은이를 분할하여 모든 차이에 대해 몇 줄의 컨텍스트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="47caf862ad652d0974cf356758de0def9543ef70" translate="yes" xml:space="preserve">
          <source>When the stubbed method call should return a calculated value instead of a fixed one (see &lt;code&gt;returnValue()&lt;/code&gt;) or an (unchanged) argument (see &lt;code&gt;returnArgument()&lt;/code&gt;), you can use &lt;code&gt;returnCallback()&lt;/code&gt; to have the stubbed method return the result of a callback function or method. See &lt;a href=&quot;#test-doubles-stubs-examples-stubtest6-php&quot;&gt;Example 8.8&lt;/a&gt; for an example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4f1e8bf1982f3bb75b49b47e526b8b0d793935" translate="yes" xml:space="preserve">
          <source>When the stubbed method call should return a calculated value instead of a fixed one (see &lt;code&gt;returnValue()&lt;/code&gt;) or an (unchanged) argument (see &lt;code&gt;returnArgument()&lt;/code&gt;), you can use &lt;code&gt;returnCallback()&lt;/code&gt; to have the stubbed method return the result of a callback function or method. See &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest6.php&quot;&gt;Example 9.7&lt;/a&gt; for an example.</source>
          <target state="translated">스텁 된 메소드 호출이 고정 된 값 ( &lt;code&gt;returnValue()&lt;/code&gt; 참조 ) 또는 (변경되지 않은) 인수 ( &lt;code&gt;returnArgument()&lt;/code&gt; 참조) 대신 계산 된 값을 리턴해야하는 경우 &lt;code&gt;returnCallback()&lt;/code&gt; 을 사용하여 스텁 된 메소드가 결과를 리턴하도록 할 수 있습니다. 콜백 함수 또는 메소드. &lt;a href=&quot;test-doubles#test-doubles.stubs.examples.StubTest6.php&quot;&gt;예는 예 9.7&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="49f8f19211f4e2927067d73b212aa0ebae6a020c" translate="yes" xml:space="preserve">
          <source>When the test execution terminates before the &lt;code&gt;tearDown()&lt;/code&gt; method is invoked the directory will stay in the filesystem.</source>
          <target state="translated">&lt;code&gt;tearDown()&lt;/code&gt; 메소드가 호출 되기 전에 테스트 실행이 종료 되면 디렉토리는 파일 시스템에 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c94886636c702547a1d7e395b30e5dcfa8ae81e" translate="yes" xml:space="preserve">
          <source>When using a large number of datasets it&amp;rsquo;s useful to name each one with string key instead of default numeric. Output will be more verbose as it&amp;rsquo;ll contain that name of a dataset that breaks a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be8b46c5b8942250c3eba0b21ebd928f347b844" translate="yes" xml:space="preserve">
          <source>When using a large number of datasets it's useful to name each one with string key instead of default numeric. Output will be more verbose as it'll contain that name of a dataset that breaks a test.</source>
          <target state="translated">많은 수의 데이터 세트를 사용하는 경우 기본 숫자 대신 문자열 키를 사용하여 각 데이터 세트의 이름을 지정하는 것이 좋습니다. 테스트를 중단하는 데이터 세트의 이름을 포함하므로 출력이 더 자세합니다.</target>
        </trans-unit>
        <trans-unit id="23b6a0c0a9735e949f8baaf8093ef4af71c0de5e" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;@testdox&lt;/code&gt; annotation at method level with a &lt;code&gt;@dataProvider&lt;/code&gt; you may use the method parameters as placeholders in your alternative description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887804c4bdc4fcd158996819380692e091ea6cbc" translate="yes" xml:space="preserve">
          <source>When we are writing a test in which we cannot (or chose not to) use a real depended-on component (DOC), we can replace it with a Test Double. The Test Double doesn&amp;rsquo;t have to behave exactly like the real DOC; it merely has to provide the same API as the real one so that the SUT thinks it is the real one!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50169aa0190de9a1300c679d3bcfb09f2855798b" translate="yes" xml:space="preserve">
          <source>When we are writing a test in which we cannot (or chose not to) use a real depended-on component (DOC), we can replace it with a Test Double. The Test Double doesn't have to behave exactly like the real DOC; it merely has to provide the same API as the real one so that the SUT thinks it is the real one!</source>
          <target state="translated">실제 의존 컴포넌트 (DOC)를 사용할 수없는 (또는 사용하지 않는) 테스트를 작성할 때 테스트 더블로 대체 할 수 있습니다. Test Double은 실제 DOC와 똑같이 동작하지 않아도됩니다. SUT가 실제 API라고 생각할 수 있도록 실제 API와 동일한 API 만 제공하면됩니다.</target>
        </trans-unit>
        <trans-unit id="d14eabc8542490e0743e02f9afb87367a94b7427" translate="yes" xml:space="preserve">
          <source>When writing custom assertions it is the best practice to follow how PHPUnit&amp;rsquo;s own assertions are implemented. As you can see in &lt;a href=&quot;#extending-phpunit-examples-assert-php&quot;&gt;Example 10.1&lt;/a&gt;, the &lt;code&gt;assertTrue()&lt;/code&gt; method is a wrapper around the &lt;code&gt;isTrue()&lt;/code&gt; and &lt;code&gt;assertThat()&lt;/code&gt; methods: &lt;code&gt;isTrue()&lt;/code&gt; creates a matcher object that is passed on to &lt;code&gt;assertThat()&lt;/code&gt; for evaluation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95e98073b7e27b0f4684172a48b1494f7ed971bf" translate="yes" xml:space="preserve">
          <source>When writing custom assertions it is the best practice to follow how PHPUnit's own assertions are implemented. As you can see in &lt;a href=&quot;extending-phpunit#extending-phpunit.examples.Assert.php&quot;&gt;Example 14.1&lt;/a&gt;, the &lt;code&gt;assertTrue()&lt;/code&gt; method is just a wrapper around the &lt;code&gt;isTrue()&lt;/code&gt; and &lt;code&gt;assertThat()&lt;/code&gt; methods: &lt;code&gt;isTrue()&lt;/code&gt; creates a matcher object that is passed on to &lt;code&gt;assertThat()&lt;/code&gt; for evaluation.</source>
          <target state="translated">커스텀 어설 션을 작성할 때 PHPUnit의 어설 션이 어떻게 구현되는지 따르는 것이 가장 좋습니다. 당신이 볼 수 있듯이 &lt;a href=&quot;extending-phpunit#extending-phpunit.examples.Assert.php&quot;&gt;예 14.1&lt;/a&gt; 의 &lt;code&gt;assertTrue()&lt;/code&gt; 메소드는 a를 주위에 래퍼 &lt;code&gt;isTrue()&lt;/code&gt; 및 &lt;code&gt;assertThat()&lt;/code&gt; : 방법 &lt;code&gt;isTrue()&lt;/code&gt; 에 전달되는 정규 객체 생성 &lt;code&gt;assertThat()&lt;/code&gt; 평가를.</target>
        </trans-unit>
        <trans-unit id="b59585f24f15b219823e254de9f0db222aea80f8" translate="yes" xml:space="preserve">
          <source>When you agree on coordinating your activities with the supplier of a package, you can write the tests together. Do this in such a way that the tests reveal as many assumptions as possible. Hidden assumptions are the death of cooperation. With the tests, you document exactly what you expect from the supplied package. The supplier will know the package is complete when all the tests run.</source>
          <target state="translated">패키지 공급 업체와의 활동 조정에 동의하면 테스트를 함께 작성할 수 있습니다. 테스트에서 가능한 많은 가정이 드러나도록이를 수행하십시오. 숨겨진 가정은 협력의 죽음입니다. 테스트를 통해 제공된 패키지에서 원하는 것을 정확하게 문서화합니다. 공급 업체는 모든 테스트가 실행될 때 패키지가 완료되었음을 알게됩니다.</target>
        </trans-unit>
        <trans-unit id="52e12d1d42441315a63147ea08d4f830cf12dc03" translate="yes" xml:space="preserve">
          <source>When you are working on a new test case class, you might want to begin by writing empty test methods such as:</source>
          <target state="translated">새로운 테스트 케이스 클래스에서 작업 할 때 다음과 같은 빈 테스트 메소드를 작성하여 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3dc1c81606a083020d621842df8391fd0f600c77" translate="yes" xml:space="preserve">
          <source>When you document assumptions with tests, you own the tests. The supplier of the package -- who you make assumptions about -- knows nothing about your tests. If you want to have a closer relationship with the supplier of a package, you can use the tests to communicate and coordinate your activities.</source>
          <target state="translated">테스트를 통해 가정을 문서화하면 테스트를 소유하게됩니다. 패키지 공급 업체 (귀하의 가정)는 테스트에 대해 아무것도 모릅니다. 패키지 공급 업체와 더 긴밀한 관계를 유지하려는 경우 테스트를 사용하여 활동을 전달하고 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b227323596cb1d49d216c73d52a59fbd5c9c6c81" translate="yes" xml:space="preserve">
          <source>When you get a defect report, your impulse might be to fix the defect as quickly as possible. Experience shows that this impulse will not serve you well; it is likely that the fix for the defect causes another defect.</source>
          <target state="translated">결함 보고서를 받으면 가능한 빨리 결함을 수정해야합니다. 경험에 의하면이 충동이 당신에게 잘 맞지 않을 것입니다. 결함에 대한 수정으로 인해 다른 결함이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80af9e23609590d6899ef8d3901fc68097d07e39" translate="yes" xml:space="preserve">
          <source>When you need to add new functionality to the system, write the tests first. Then, you will be done developing when the test runs. This practice will be discussed in detail in the next chapter.</source>
          <target state="translated">시스템에 새로운 기능을 추가해야 할 경우 먼저 테스트를 작성하십시오. 그런 다음 테스트가 실행될 때 개발이 완료됩니다. 이 연습은 다음 장에서 자세히 논의 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="c2a06ba48d153db1ee538c313ddd441fa8fc16ee" translate="yes" xml:space="preserve">
          <source>When you need to make a change to the internal structure of the software you are working on to make it easier to understand and cheaper to modify without changing its observable behavior, a test suite is invaluable in applying these so called &lt;a href=&quot;http://martinfowler.com/bliki/DefinitionOfRefactoring.html&quot;&gt;refactorings&lt;/a&gt; safely. Otherwise, you might not notice the system breaking while you are carrying out the restructuring.</source>
          <target state="translated">관찰 가능한 동작을 변경하지 않고 이해하기 쉽고 저렴하게 수정하기 위해 작업중인 소프트웨어의 내부 구조를 변경해야하는 경우 테스트 스위트는 소위 &lt;a href=&quot;http://martinfowler.com/bliki/DefinitionOfRefactoring.html&quot;&gt;리팩토링을&lt;/a&gt; 안전하게 적용하는 데 매우 중요 합니다. 그렇지 않으면 구조 조정을 수행하는 동안 시스템이 손상되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="583d6d83099b223a3e0e57bf2f44ceadc4b6c1fb" translate="yes" xml:space="preserve">
          <source>When your application interacts with a web service you want to test it without actually interacting with the web service. To create stubs and mocks of web services, the &lt;code&gt;getMockFromWsdl()&lt;/code&gt; can be used like &lt;code&gt;getMock()&lt;/code&gt; (see above). The only difference is that &lt;code&gt;getMockFromWsdl()&lt;/code&gt; returns a stub or mock based on a web service description in WSDL and &lt;code&gt;getMock()&lt;/code&gt; returns a stub or mock based on a PHP class or interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee25f858f8dc07f3b69a592734c66c2c0832323" translate="yes" xml:space="preserve">
          <source>When your application interacts with a web service you want to test it without actually interacting with the web service. To make the stubbing and mocking of web services easy, the &lt;code&gt;getMockFromWsdl()&lt;/code&gt; can be used just like &lt;code&gt;getMock()&lt;/code&gt; (see above). The only difference is that &lt;code&gt;getMockFromWsdl()&lt;/code&gt; returns a stub or mock based on a web service description in WSDL and &lt;code&gt;getMock()&lt;/code&gt; returns a stub or mock based on a PHP class or interface.</source>
          <target state="translated">응용 프로그램이 웹 서비스와 상호 작용할 때 실제로 웹 서비스와 상호 작용하지 않고 테스트하려고합니다. 스터 빙을 쉽게 웹 서비스를 조롱하기 위해, &lt;code&gt;getMockFromWsdl()&lt;/code&gt; 처럼 사용할 수 있습니다 &lt;code&gt;getMock()&lt;/code&gt; (위 참조). 유일한 차이점은 &lt;code&gt;getMockFromWsdl()&lt;/code&gt; 이 WSDL의 웹 서비스 설명을 기반으로 스텁 또는 모의를 리턴 하고 &lt;code&gt;getMock()&lt;/code&gt; 은 PHP 클래스 또는 인터페이스를 기반으로 스텁 또는 모의를 리턴한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7903c1b33bff5cb437ad68da9b2ea5f628df7f7e" translate="yes" xml:space="preserve">
          <source>Whenever a test fails PHPUnit tries its best to provide you with as much context as possible that can help to identify the problem.</source>
          <target state="translated">테스트가 실패 할 때마다 PHPUnit은 문제를 식별하는 데 도움이되는 가능한 많은 컨텍스트를 제공하기 위해 최선을 다합니다.</target>
        </trans-unit>
        <trans-unit id="0709917e388ac8733124d676879302ae3b1a068d" translate="yes" xml:space="preserve">
          <source>Whenever you are tempted to type something into a &lt;code&gt;print&lt;/code&gt; statement or a debugger expression, write it as a test instead.</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; 문이나 디버거 식에 무언가를 입력하려고 할 때마다 대신 테스트로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="e937368555fce02eeb1adfa4f2e97ac617a86c71" translate="yes" xml:space="preserve">
          <source>While this is very convenient for editing with Excel or OpenOffice, you cannot specify NULL values with the CSV dataset. An empty column will lead to the database default empty value being inserted into the column.</source>
          <target state="translated">이는 Excel 또는 OpenOffice로 편집하는 데 매우 편리하지만 CSV 데이터 세트로 NULL 값을 지정할 수 없습니다. 빈 열은 데이터베이스 기본 빈 값이 열에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="d0bf6edecb4d699b5c1f0cd67b77dbc2e51f71ef" translate="yes" xml:space="preserve">
          <source>Whitelisting Files</source>
          <target state="translated">화이트리스트 파일</target>
        </trans-unit>
        <trans-unit id="184f652d531056bd963c11d37ccd5526523caa00" translate="yes" xml:space="preserve">
          <source>Whitelisting Files for Code Coverage</source>
          <target state="translated">코드 적용을위한 파일 허용</target>
        </trans-unit>
        <trans-unit id="86c7429c642e4aea1befd537be31240728fcb172" translate="yes" xml:space="preserve">
          <source>Will PHPUnit (re-)create the database schema for each test?</source>
          <target state="translated">PHPUnit은 각 테스트에 대한 데이터베이스 스키마를 (재) 생성합니까?</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="b2d890362b7721a4a0b744a62a04801a95ca52ea" translate="yes" xml:space="preserve">
          <source>Without a virtual filesystem such as vfsStream we cannot test the &lt;code&gt;setDirectory()&lt;/code&gt; method in isolation from external influence (see &lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest.php&quot;&gt;Example 9.22&lt;/a&gt;).</source>
          <target state="translated">vfsStream과 같은 가상 파일 시스템이 없으면 외부 영향과 별도로 &lt;code&gt;setDirectory()&lt;/code&gt; 메소드를 테스트 할 수 없습니다 ( &lt;a href=&quot;test-doubles#test-doubles.mocking-the-filesystem.examples.ExampleTest.php&quot;&gt;예 9.22&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f71680b834fbbe95782fba63d95147a749c8be11" translate="yes" xml:space="preserve">
          <source>Without the error suppression the test would fail reporting &lt;code&gt;fopen(/is-not-writeable/file): failed to open stream:
    No such file or directory&lt;/code&gt;.</source>
          <target state="translated">오류 억제가 없으면 테스트에서 &lt;code&gt;fopen(/is-not-writeable/file): failed to open stream: No such file or directory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dedccc4867405a3471be8233f4ebe9a6a2bb2de6" translate="yes" xml:space="preserve">
          <source>Write all the rows in the data-tables into the database.</source>
          <target state="translated">데이터 테이블의 모든 행을 데이터베이스에 씁니다.</target>
        </trans-unit>
        <trans-unit id="8bbbfaf5377d2e03efa933060317a93421ed5861" translate="yes" xml:space="preserve">
          <source>Write an automated test that fails now but will succeed when the defect is fixed.</source>
          <target state="translated">지금은 실패하지만 결함이 수정되면 성공할 자동화 테스트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="aa0c42ef3cef9d392f3dcac3d09402d1957f6344" translate="yes" xml:space="preserve">
          <source>Write custom assertions</source>
          <target state="translated">사용자 지정 어설 ​​션 작성</target>
        </trans-unit>
        <trans-unit id="f709732b2211c2a981b1be285ece585e168e3822" translate="yes" xml:space="preserve">
          <source>Write custom assertions and utility methods in an abstract subclass of &lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; and derive your test case classes from that class. This is one of the easiest ways to extend PHPUnit.</source>
          <target state="translated">&lt;code&gt;PHPUnit\Framework\TestCase&lt;/code&gt; 의 추상 서브 클래스에 사용자 정의 어설 션 및 유틸리티 메소드를 작성 하고 해당 클래스에서 테스트 케이스 클래스를 파생하십시오. 이것은 PHPUnit을 확장하는 가장 쉬운 방법 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="35a3852a23915596995ef8635dc6fbd161c3dfce" translate="yes" xml:space="preserve">
          <source>Writing Tests for PHPUnit</source>
          <target state="translated">PHPUnit 쓰기 시험</target>
        </trans-unit>
        <trans-unit id="f063b9902b860031f4c625394b61325a4440e2df" translate="yes" xml:space="preserve">
          <source>XML DataSet</source>
          <target state="translated">XML 데이터 셋</target>
        </trans-unit>
        <trans-unit id="1a211ee8d43cfaa8129da355009a4dfe2c9d149d" translate="yes" xml:space="preserve">
          <source>Xdebug is not distributed as part of PHPUnit. If you receive a notice while running tests that the Xdebug extension is not loaded, it means that Xdebug is either not installed or not configured properly. Before you can use the code coverage analysis features in PHPUnit, you should read &lt;a href=&quot;http://xdebug.org/docs/install&quot;&gt;the Xdebug installation guide&lt;/a&gt;.</source>
          <target state="translated">Xdebug는 PHPUnit의 일부로 배포되지 않습니다. 테스트를 실행하는 동안 Xdebug 확장 프로그램이로드되지 않았다는 알림을 받으면 Xdebug가 설치되지 않았거나 올바르게 구성되지 않았 음을 의미합니다. PHPUnit에서 코드 적용 범위 분석 기능을 사용하기 전에 &lt;a href=&quot;http://xdebug.org/docs/install&quot;&gt;Xdebug 설치 안내서를&lt;/a&gt; 읽으 십시오 .</target>
        </trans-unit>
        <trans-unit id="9ab582c7e8e9b5fe420c617b0de1cf591044edbc" translate="yes" xml:space="preserve">
          <source>YAML DataSet</source>
          <target state="translated">YAML 데이터 세트</target>
        </trans-unit>
        <trans-unit id="92116dc581c2238ebeff646dd12b48fd3c73d53c" translate="yes" xml:space="preserve">
          <source>You can also assert the result of complex queries with the Query Table approach, just specify a result name with a query and compare it to a dataset:</source>
          <target state="translated">쿼리 테이블 접근 방식을 사용하여 복잡한 쿼리 결과를 어설 션하고 쿼리로 결과 이름을 지정하고 데이터 세트와 비교하면됩니다.</target>
        </trans-unit>
        <trans-unit id="bdc5fa00c7042ab0755b71b736e98f12f97c3cb3" translate="yes" xml:space="preserve">
          <source>You can always write more tests. However, you will quickly find that only a fraction of the tests you can imagine are actually useful. What you want is to write tests that fail even though you think they should work, or tests that succeed even though you think they should fail. Another way to think of it is in cost/benefit terms. You want to write tests that will pay you back with information.</source>
          <target state="translated">언제든지 더 많은 테스트를 작성할 수 있습니다. 그러나 상상할 수있는 일부 테스트 만 실제로 유용하다는 것을 금방 알 수 있습니다. 원하는 것은 작동한다고 생각하더라도 실패하는 테스트 또는 실패한다고 생각하더라도 성공하는 테스트를 작성하는 것입니다. 그것을 생각하는 또 다른 방법은 비용 / 혜택 용어입니다. 정보를 갚을 테스트를 작성하려고합니다.</target>
        </trans-unit>
        <trans-unit id="60bf40934c8d19f05bd4bb90421cf70368100f55" translate="yes" xml:space="preserve">
          <source>You can configure PHPUnit extensions, assuming the extension accepts configuration values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a078cfc20a1095c008a47b877929c52dcf17f7ba" translate="yes" xml:space="preserve">
          <source>You can construct the DataSet on your own:</source>
          <target state="translated">자체적으로 DataSet을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac0ece83c2819ca556ba1bbe02db176b21c66ad6" translate="yes" xml:space="preserve">
          <source>You can create a CSV DataSet by calling:</source>
          <target state="translated">다음을 호출하여 CSV DataSet을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="faaae67de0688c386d3951e4268fbd9886d58198" translate="yes" xml:space="preserve">
          <source>You can create a flat xml dataset instance from within your Database TestCase by calling the &lt;code&gt;createFlatXmlDataSet($filename)&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;createFlatXmlDataSet($filename)&lt;/code&gt; 메소드 를 호출하여 Database TestCase에서 플랫 XML 데이터 세트 인스턴스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fd55e47e6f5448be88daf55231adfb811342e4b6" translate="yes" xml:space="preserve">
          <source>You can create a xml dataset instance from within your Database TestCase by calling the &lt;code&gt;createXmlDataSet($filename)&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;createXmlDataSet($filename)&lt;/code&gt; 메소드 를 호출하여 Database TestCase 내에서 xml 데이터 세트 인스턴스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef1fd4cb18bb341f1f611051d4eb5390bf51f2e1" translate="yes" xml:space="preserve">
          <source>You can either create a dataset for the complete database as shown in &lt;code&gt;testGuestbook()&lt;/code&gt;, or restrict it to a set of specified table names with a whitelist as shown in &lt;code&gt;testFilteredGuestbook()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;testGuestbook()&lt;/code&gt; 표시된대로 전체 데이터베이스에 대한 데이터 세트를 작성 하거나 &lt;code&gt;testFilteredGuestbook()&lt;/code&gt; 메소드에 표시된대로 화이트리스트를 사용하여 지정된 테이블 이름 세트로 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f7cc1a377c1b4d060eaa2721f4972418ff9fe7b" translate="yes" xml:space="preserve">
          <source>You can hold your impulse in check by doing the following:</source>
          <target state="translated">다음을 수행하여 충동을 억제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="439557ef6ce462ccc9abe19f1c0c6834640046d2" translate="yes" xml:space="preserve">
          <source>You can make use of this by specifying arbitrary queries for your tables, for example restricting rows, column or adding &lt;code&gt;ORDER BY&lt;/code&gt; clauses:</source>
          <target state="translated">테이블에 대해 임의의 쿼리를 지정하여 (예 : 행, 열 제한 또는 &lt;code&gt;ORDER BY&lt;/code&gt; 절 추가)이 기능을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59729c99eefa0308f0c82103df85c243c42ab048" translate="yes" xml:space="preserve">
          <source>You can provide a blacklist of static attributes that are to be excluded from the backup and restore operations:</source>
          <target state="translated">백업 및 복원 조작에서 제외 될 정적 속성의 블랙리스트를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de4b4b57427e5069699966292b3014e4372410af" translate="yes" xml:space="preserve">
          <source>You can provide a list of static attributes that are to be excluded from the backup and restore operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="237329f4706c8047eb918f75173ecc73be0f89a9" translate="yes" xml:space="preserve">
          <source>You can use a &lt;em&gt;mock object&lt;/em&gt; &quot;as an observation point that is used to verify the indirect outputs of the SUT as it is exercised. Typically, the mock object also includes the functionality of a test stub in that it must return values to the SUT if it hasn't already failed the tests but the emphasis is on the verification of the indirect outputs. Therefore, a mock object is a lot more than just a test stub plus assertions; it is used in a fundamentally different way&quot; (Gerard Meszaros).</source>
          <target state="translated">&lt;em&gt;모의 객체를&lt;/em&gt; &quot;SUT가 실행되는 SUT의 간접 출력을 확인하는 데 사용되는 관찰 지점으로 사용할 수 있습니다 . 일반적으로 모의 객체에는 테스트 스텁의 기능도 포함되어 있습니다.이 경우 SUT에 값을 반환해야합니다. 아직 테스트에 실패하지는 않았지만 간접 출력의 검증에 중점을두고 있습니다. 따라서 모의 객체는 테스트 스텁과 어설 션 이상의 의미를 갖습니다. 근본적으로 다른 방식으로 사용됩니다 &quot;(Gerard Meszaros) .</target>
        </trans-unit>
        <trans-unit id="a61a26f12d83e654acacf2ed7ee86102b44c0752" translate="yes" xml:space="preserve">
          <source>You can use a &lt;em&gt;mock object&lt;/em&gt; &amp;ldquo;as an observation point that is used to verify the indirect outputs of the SUT as it is exercised. Typically, the mock object also includes the functionality of a test stub in that it must return values to the SUT if it hasn&amp;rsquo;t already failed the tests but the emphasis is on the verification of the indirect outputs. Therefore, a mock object is a lot more than just a test stub plus assertions; it is used in a fundamentally different way&amp;rdquo; (Gerard Meszaros).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a9f9b403d591a5b39991a8cb2753b779d55e93" translate="yes" xml:space="preserve">
          <source>You can use the Database (DB) DataSet from the Connection and compare it to a File-Based DataSet.</source>
          <target state="translated">연결에서 데이터베이스 (DB) 데이터 세트를 사용하여 파일 기반 데이터 세트와 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b6ad16fdeaf557b757b56ce17b64851641f61d7" translate="yes" xml:space="preserve">
          <source>You can wrap test cases or test suites in a subclass of &lt;code&gt;PHPUnit_Extensions_TestDecorator&lt;/code&gt; and use the Decorator design pattern to perform some actions before and after the test runs.</source>
          <target state="translated">&lt;code&gt;PHPUnit_Extensions_TestDecorator&lt;/code&gt; 의 서브 클래스에서 테스트 케이스 또는 테스트 스위트를 랩핑 하고 Decorator 디자인 패턴을 사용하여 테스트 실행 전후에 일부 조치를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2b411f985dfd24d4d5a43b3e5fafa146531086a" translate="yes" xml:space="preserve">
          <source>You do not want to modify considerable amount of test code for little changes in your production code.</source>
          <target state="translated">프로덕션 코드에서 약간의 변경을 위해 상당한 양의 테스트 코드를 수정하고 싶지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a1166c18cc123a82d7f724936aa93187490a0ef4" translate="yes" xml:space="preserve">
          <source>You may also use the downloaded PHAR file directly:</source>
          <target state="translated">다운로드 한 PHAR 파일을 직접 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="28ee9de3287ccffd61d361237d08e22eb63cecfc" translate="yes" xml:space="preserve">
          <source>You need to setup test data in (possibly much) more than two tables to get reasonable initial data for the methods you want to test.</source>
          <target state="translated">테스트하려는 메소드에 대한 합리적인 초기 데이터를 얻으려면 테스트 데이터를 두 개 이상의 테이블에 설정해야합니다 (아마도).</target>
        </trans-unit>
        <trans-unit id="605def75161cce7a74547ef770e763d8f697e38f" translate="yes" xml:space="preserve">
          <source>You probably know this scenario from your daily work and projects, where you want to put your fresh or experienced PHPUnit skills to work and get stuck by one of the following problems:</source>
          <target state="translated">신선하거나 경험이 풍부한 PHPUnit 기술을 사용하고 다음 문제 중 하나에 걸리고 싶은 일상적인 작업 및 프로젝트에서이 시나리오를 알고있을 것입니다.</target>
        </trans-unit>
        <trans-unit id="f371634166190eaf82bc041670a87fc6a2dcb00a" translate="yes" xml:space="preserve">
          <source>You should be as specific as possible when testing exceptions. Testing for classes that are too generic might lead to undesirable side-effects. Accordingly, testing for the &lt;code&gt;Exception&lt;/code&gt; class with &lt;code&gt;@expectedException&lt;/code&gt; or &lt;code&gt;setExpectedException()&lt;/code&gt; is no longer permitted.</source>
          <target state="translated">예외를 테스트 할 때는 가능한 구체적이어야합니다. 너무 일반적인 클래스를 테스트하면 바람직하지 않은 부작용이 발생할 수 있습니다. 따라서 &lt;code&gt;@expectedException&lt;/code&gt; 또는 &lt;code&gt;setExpectedException()&lt;/code&gt; 을 사용하여 &lt;code&gt;Exception&lt;/code&gt; 클래스에 대한 테스트 는 더 이상 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d2b376e5a6c1ec649252349f9914ce87243a3529" translate="yes" xml:space="preserve">
          <source>You want to be able to read and understand the test code easily, even months after writing it.</source>
          <target state="translated">테스트 코드를 작성한 후 몇 개월이 지나도 쉽게 테스트 코드를 읽고 이해할 수 있기를 원합니다.</target>
        </trans-unit>
        <trans-unit id="f1b013c701ed496ba56f01c975e4081827666f70" translate="yes" xml:space="preserve">
          <source>You won't need additional files for assertions and can specify them directly in the TestCase.</source>
          <target state="translated">어설 션을위한 추가 파일이 필요하지 않으며 TestCase에서 직접 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ede8d917a46c3eb5e5fb6e455b4243b4b94f73d" translate="yes" xml:space="preserve">
          <source>Your business logic performs a mix of SELECT, INSERT, UPDATE and DELETE statements.</source>
          <target state="translated">비즈니스 로직은 SELECT, INSERT, UPDATE 및 DELETE 문을 혼합하여 수행합니다.</target>
        </trans-unit>
        <trans-unit id="e408787b79a3308258aca3560fbc83d290773a29" translate="yes" xml:space="preserve">
          <source>and &lt;em&gt;fixture2.xml&lt;/em&gt;:</source>
          <target state="translated">및 &lt;em&gt;fixture2.xml&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="a78da1b13adfdedef3f1bdb6aaf4c3e389aad03b" translate="yes" xml:space="preserve">
          <source>assertArrayHasKey()</source>
          <target state="translated">assertArrayHasKey()</target>
        </trans-unit>
        <trans-unit id="2953b43f13241d2e3cd276715de3bff946c20d30" translate="yes" xml:space="preserve">
          <source>assertArraySubset()</source>
          <target state="translated">assertArraySubset()</target>
        </trans-unit>
        <trans-unit id="a0c879edb53ee997bd7d82bd1fbc196e632b95d9" translate="yes" xml:space="preserve">
          <source>assertClassHasAttribute()</source>
          <target state="translated">assertClassHasAttribute()</target>
        </trans-unit>
        <trans-unit id="3c2ab1335fd5a18000ffe25079ed36c51847dd61" translate="yes" xml:space="preserve">
          <source>assertClassHasStaticAttribute()</source>
          <target state="translated">assertClassHasStaticAttribute()</target>
        </trans-unit>
        <trans-unit id="d4d83fecf7ab236a0a17aac75ff7f4dd28930221" translate="yes" xml:space="preserve">
          <source>assertContains()</source>
          <target state="translated">assertContains()</target>
        </trans-unit>
        <trans-unit id="688e3b55f1e31b0801c63033e34994afe7d59380" translate="yes" xml:space="preserve">
          <source>assertContainsOnly()</source>
          <target state="translated">assertContainsOnly()</target>
        </trans-unit>
        <trans-unit id="0c8af844c8fccefb6537fe00845eeea118bbd356" translate="yes" xml:space="preserve">
          <source>assertContainsOnlyInstancesOf()</source>
          <target state="translated">assertContainsOnlyInstancesOf()</target>
        </trans-unit>
        <trans-unit id="961c3e8662def888f4511a97c4f41e3757d19e7f" translate="yes" xml:space="preserve">
          <source>assertCount()</source>
          <target state="translated">assertCount()</target>
        </trans-unit>
        <trans-unit id="96ceb5ab03b2a734958bb1dd795383194a3d95c2" translate="yes" xml:space="preserve">
          <source>assertDirectoryExists()</source>
          <target state="translated">assertDirectoryExists()</target>
        </trans-unit>
        <trans-unit id="4544c145eddcc1b4575bb4cdd70a13848be84f70" translate="yes" xml:space="preserve">
          <source>assertDirectoryIsReadable()</source>
          <target state="translated">assertDirectoryIsReadable()</target>
        </trans-unit>
        <trans-unit id="34a0a31ad30c150a9e5247abc4fb085d7367d1ca" translate="yes" xml:space="preserve">
          <source>assertDirectoryIsWritable()</source>
          <target state="translated">assertDirectoryIsWritable()</target>
        </trans-unit>
        <trans-unit id="174d89589791a9491723378104e29bf46c03dbf6" translate="yes" xml:space="preserve">
          <source>assertEmpty()</source>
          <target state="translated">assertEmpty()</target>
        </trans-unit>
        <trans-unit id="9a5438a52e50bca545784cf7955c28bb2d98442c" translate="yes" xml:space="preserve">
          <source>assertEqualXMLStructure()</source>
          <target state="translated">assertEqualXMLStructure()</target>
        </trans-unit>
        <trans-unit id="23ccb551a3cdb1d2bd5c433b6c1d201359698e8e" translate="yes" xml:space="preserve">
          <source>assertEquals()</source>
          <target state="translated">assertEquals()</target>
        </trans-unit>
        <trans-unit id="600df69fe9887653817287c03ee28a315685a60d" translate="yes" xml:space="preserve">
          <source>assertEqualsCanonicalizing()</source>
          <target state="translated">assertEqualsCanonicalizing()</target>
        </trans-unit>
        <trans-unit id="b1ad940727e9e2c96290a9fc72582bbf4d32a923" translate="yes" xml:space="preserve">
          <source>assertEqualsIgnoringCase()</source>
          <target state="translated">assertEqualsIgnoringCase()</target>
        </trans-unit>
        <trans-unit id="e7e7cbd7713a68eb9c717257197532f790a3584a" translate="yes" xml:space="preserve">
          <source>assertEqualsWithDelta()</source>
          <target state="translated">assertEqualsWithDelta()</target>
        </trans-unit>
        <trans-unit id="6d46d5b6994420e250f3385039725d27ac3ecb42" translate="yes" xml:space="preserve">
          <source>assertFalse()</source>
          <target state="translated">assertFalse()</target>
        </trans-unit>
        <trans-unit id="c20b9f1a89ade2bfc6804ff44de2b0c75c7bda92" translate="yes" xml:space="preserve">
          <source>assertFileEquals()</source>
          <target state="translated">assertFileEquals()</target>
        </trans-unit>
        <trans-unit id="654f4244568f9ec544b303f3e1ed51205d669205" translate="yes" xml:space="preserve">
          <source>assertFileExists()</source>
          <target state="translated">assertFileExists()</target>
        </trans-unit>
        <trans-unit id="58bde623ebc5a2b744a207aa641050ab3fd58f8b" translate="yes" xml:space="preserve">
          <source>assertFileIsReadable()</source>
          <target state="translated">assertFileIsReadable()</target>
        </trans-unit>
        <trans-unit id="c68fa67118b75c3d4a1f0efd62378313d3113816" translate="yes" xml:space="preserve">
          <source>assertFileIsWritable()</source>
          <target state="translated">assertFileIsWritable()</target>
        </trans-unit>
        <trans-unit id="d79190d5b985d820ee4285db5373b9f6e44e3624" translate="yes" xml:space="preserve">
          <source>assertGreaterThan()</source>
          <target state="translated">assertGreaterThan()</target>
        </trans-unit>
        <trans-unit id="d30c28860338bc110c65a0e74fbe208c835a5543" translate="yes" xml:space="preserve">
          <source>assertGreaterThanOrEqual()</source>
          <target state="translated">assertGreaterThanOrEqual()</target>
        </trans-unit>
        <trans-unit id="bcafb217fb4f91be35bb7855a99c304df46f0415" translate="yes" xml:space="preserve">
          <source>assertInfinite()</source>
          <target state="translated">assertInfinite()</target>
        </trans-unit>
        <trans-unit id="f29777c90474ee551ac8002f589576c2d13ed4ff" translate="yes" xml:space="preserve">
          <source>assertInstanceOf()</source>
          <target state="translated">assertInstanceOf()</target>
        </trans-unit>
        <trans-unit id="a14e8e87a44fab357571956b107842d15cc9cd43" translate="yes" xml:space="preserve">
          <source>assertInternalType()</source>
          <target state="translated">assertInternalType()</target>
        </trans-unit>
        <trans-unit id="13efdadd2c21ab219598c54a71edb9736540a9da" translate="yes" xml:space="preserve">
          <source>assertIsArray()</source>
          <target state="translated">assertIsArray()</target>
        </trans-unit>
        <trans-unit id="9e4c133121a823092c56cc92d4e0e712b12a0b6f" translate="yes" xml:space="preserve">
          <source>assertIsBool()</source>
          <target state="translated">assertIsBool()</target>
        </trans-unit>
        <trans-unit id="e5c32b8a4719c61a8a557530e5312afdaf3f3c8f" translate="yes" xml:space="preserve">
          <source>assertIsCallable()</source>
          <target state="translated">assertIsCallable()</target>
        </trans-unit>
        <trans-unit id="dc2d080b033494182eb8ab3449032c384a49051f" translate="yes" xml:space="preserve">
          <source>assertIsFloat()</source>
          <target state="translated">assertIsFloat()</target>
        </trans-unit>
        <trans-unit id="3b9636a390f35c7fca2e571f75495bcbe8b2470d" translate="yes" xml:space="preserve">
          <source>assertIsInt()</source>
          <target state="translated">assertIsInt()</target>
        </trans-unit>
        <trans-unit id="cc72dec3b44eab45f3340c22565eb7367c0fd22e" translate="yes" xml:space="preserve">
          <source>assertIsIterable()</source>
          <target state="translated">assertIsIterable()</target>
        </trans-unit>
        <trans-unit id="0676ec6603f27e6d764c5a1d32189b2b1d50d613" translate="yes" xml:space="preserve">
          <source>assertIsNumeric()</source>
          <target state="translated">assertIsNumeric()</target>
        </trans-unit>
        <trans-unit id="8eb23e5e11a63375b290f9568d0ef8ec8d86ba95" translate="yes" xml:space="preserve">
          <source>assertIsObject()</source>
          <target state="translated">assertIsObject()</target>
        </trans-unit>
        <trans-unit id="ed60d782ca77fcdf5ecb50a50a6b12b4aa21c26b" translate="yes" xml:space="preserve">
          <source>assertIsReadable()</source>
          <target state="translated">assertIsReadable()</target>
        </trans-unit>
        <trans-unit id="51a76d84b5fa1668defbdf5b955f358fcd253009" translate="yes" xml:space="preserve">
          <source>assertIsResource()</source>
          <target state="translated">assertIsResource()</target>
        </trans-unit>
        <trans-unit id="5bf4d1ae57280fa642f0f1ed6de04dc36da95c77" translate="yes" xml:space="preserve">
          <source>assertIsScalar()</source>
          <target state="translated">assertIsScalar()</target>
        </trans-unit>
        <trans-unit id="420eb7b3e9bb613fca71c1b1884e343514f55280" translate="yes" xml:space="preserve">
          <source>assertIsString()</source>
          <target state="translated">assertIsString()</target>
        </trans-unit>
        <trans-unit id="7c70571c21b9c255b3b874ab2c70cb977bcc167c" translate="yes" xml:space="preserve">
          <source>assertIsWritable()</source>
          <target state="translated">assertIsWritable()</target>
        </trans-unit>
        <trans-unit id="fbe7df4f678c83d5efbdf61919cd943803f139f8" translate="yes" xml:space="preserve">
          <source>assertJsonFileEqualsJsonFile()</source>
          <target state="translated">assertJsonFileEqualsJsonFile()</target>
        </trans-unit>
        <trans-unit id="28dbfdff7f46a430978277b473d19ebc0ab18a8a" translate="yes" xml:space="preserve">
          <source>assertJsonStringEqualsJsonFile()</source>
          <target state="translated">assertJsonStringEqualsJsonFile()</target>
        </trans-unit>
        <trans-unit id="b0bf6fda1b66a2c05bd5b4a85fae7a0da44ceef6" translate="yes" xml:space="preserve">
          <source>assertJsonStringEqualsJsonString()</source>
          <target state="translated">assertJsonStringEqualsJsonString()</target>
        </trans-unit>
        <trans-unit id="5ed936b15a579166dd241321758f48de026405b8" translate="yes" xml:space="preserve">
          <source>assertLessThan()</source>
          <target state="translated">assertLessThan()</target>
        </trans-unit>
        <trans-unit id="2ff7c6828a81e20d73b86a95f2bfad68c64eb0b9" translate="yes" xml:space="preserve">
          <source>assertLessThanOrEqual()</source>
          <target state="translated">assertLessThanOrEqual()</target>
        </trans-unit>
        <trans-unit id="c0150e0aff91ba0c8807933a4913644867922b4d" translate="yes" xml:space="preserve">
          <source>assertMatchesRegularExpression()</source>
          <target state="translated">assertMatchesRegularExpression()</target>
        </trans-unit>
        <trans-unit id="cb8ff9ef384b09e12546f6577d926fbe708457a9" translate="yes" xml:space="preserve">
          <source>assertNan()</source>
          <target state="translated">assertNan()</target>
        </trans-unit>
        <trans-unit id="e7bcdbce6f11f87ce1c9b5e0f80ae2686479b45b" translate="yes" xml:space="preserve">
          <source>assertNull()</source>
          <target state="translated">assertNull()</target>
        </trans-unit>
        <trans-unit id="c6c85c03b6737567a2c4d04864825269066ebcaf" translate="yes" xml:space="preserve">
          <source>assertObjectEquals()</source>
          <target state="translated">assertObjectEquals()</target>
        </trans-unit>
        <trans-unit id="daa66dd44d78be88c535a424c886e05f83dfe921" translate="yes" xml:space="preserve">
          <source>assertObjectHasAttribute()</source>
          <target state="translated">assertObjectHasAttribute()</target>
        </trans-unit>
        <trans-unit id="49b69a515c563526ed56083eeaa0b3f5a35dd459" translate="yes" xml:space="preserve">
          <source>assertRegExp()</source>
          <target state="translated">assertRegExp()</target>
        </trans-unit>
        <trans-unit id="df4b41e034cb3fb9cbfb8c7d0282908291bb7729" translate="yes" xml:space="preserve">
          <source>assertSame()</source>
          <target state="translated">assertSame()</target>
        </trans-unit>
        <trans-unit id="78b91739a4a6c915031caa530eef98d9c8bf0940" translate="yes" xml:space="preserve">
          <source>assertStringContainsString()</source>
          <target state="translated">assertStringContainsString()</target>
        </trans-unit>
        <trans-unit id="f4f93e50838af7ba847fbe316c1a5a63441ac363" translate="yes" xml:space="preserve">
          <source>assertStringContainsStringIgnoringCase()</source>
          <target state="translated">assertStringContainsStringIgnoringCase()</target>
        </trans-unit>
        <trans-unit id="5ab4e871ad3cb768ca57420fcff36afc7846db53" translate="yes" xml:space="preserve">
          <source>assertStringEndsWith()</source>
          <target state="translated">assertStringEndsWith()</target>
        </trans-unit>
        <trans-unit id="722ed30f2b6991c0dde3b61a96aaf9a77a963f4b" translate="yes" xml:space="preserve">
          <source>assertStringEqualsFile()</source>
          <target state="translated">assertStringEqualsFile()</target>
        </trans-unit>
        <trans-unit id="d4d11de435f688fc4a15c4086b65541c8ff9576d" translate="yes" xml:space="preserve">
          <source>assertStringMatchesFormat()</source>
          <target state="translated">assertStringMatchesFormat()</target>
        </trans-unit>
        <trans-unit id="ed2b8fe213436da04bb2ec4123a90169f1cb278f" translate="yes" xml:space="preserve">
          <source>assertStringMatchesFormatFile()</source>
          <target state="translated">assertStringMatchesFormatFile()</target>
        </trans-unit>
        <trans-unit id="1cb66de67f876bdbe76e70cce0c9221219d00043" translate="yes" xml:space="preserve">
          <source>assertStringStartsWith()</source>
          <target state="translated">assertStringStartsWith()</target>
        </trans-unit>
        <trans-unit id="040de4ae88cba81c3d3a61b56e2d5a8a6cd4214b" translate="yes" xml:space="preserve">
          <source>assertThat()</source>
          <target state="translated">assertThat()</target>
        </trans-unit>
        <trans-unit id="a1fe128ba75fa817bbdd95449b30363cc8d8e330" translate="yes" xml:space="preserve">
          <source>assertTrue()</source>
          <target state="translated">assertTrue()</target>
        </trans-unit>
        <trans-unit id="16e7c06470e678ce6643bcc65a4a7f292000a02e" translate="yes" xml:space="preserve">
          <source>assertXmlFileEqualsXmlFile()</source>
          <target state="translated">assertXmlFileEqualsXmlFile()</target>
        </trans-unit>
        <trans-unit id="26d75addf4ae3317e3f0ab65664753edab70a8a1" translate="yes" xml:space="preserve">
          <source>assertXmlStringEqualsXmlFile()</source>
          <target state="translated">assertXmlStringEqualsXmlFile()</target>
        </trans-unit>
        <trans-unit id="145b4f7f69ec5df4adba1328742fb5f422e41906" translate="yes" xml:space="preserve">
          <source>assertXmlStringEqualsXmlString()</source>
          <target state="translated">assertXmlStringEqualsXmlString()</target>
        </trans-unit>
        <trans-unit id="978d00dde011c95df5d89a506062e2a7562fb626" translate="yes" xml:space="preserve">
          <source>convertErrorsToExceptions</source>
          <target state="translated">convertErrorsToExceptions</target>
        </trans-unit>
        <trans-unit id="af6864cd9015ff0e9aacd657c2fa2eb4827b59d3" translate="yes" xml:space="preserve">
          <source>convertNoticesToExceptions</source>
          <target state="translated">convertNoticesToExceptions</target>
        </trans-unit>
        <trans-unit id="2429b52a4818bb6fa6ba35442ed1d755d37476b0" translate="yes" xml:space="preserve">
          <source>convertWarningsToExceptions</source>
          <target state="translated">convertWarningsToExceptions</target>
        </trans-unit>
        <trans-unit id="5c1fbc1be607e4191f388fde6043defa3dd9c4db" translate="yes" xml:space="preserve">
          <source>forceCoversAnnotation</source>
          <target state="translated">forceCoversAnnotation</target>
        </trans-unit>
        <trans-unit id="3c1c518262f2ecc3844375807272f6051c4e067a" translate="yes" xml:space="preserve">
          <source>phpunit UnitTest</source>
          <target state="translated">phpunit 단위 테스트</target>
        </trans-unit>
        <trans-unit id="b6dbd075e0264852bf66054810ba76350adbae6f" translate="yes" xml:space="preserve">
          <source>phpunit UnitTest UnitTest.php</source>
          <target state="translated">phpunit UnitTest UnitTest.php</target>
        </trans-unit>
        <trans-unit id="3594ac45a6f4809d908a03c0802a9806d1fc1c36" translate="yes" xml:space="preserve">
          <source>timeoutForLargeTests</source>
          <target state="translated">timeoutForLargeTests</target>
        </trans-unit>
        <trans-unit id="bdc16f7d773e4b7fc038cce005d41d6c52b2345d" translate="yes" xml:space="preserve">
          <source>timeoutForMediumTests</source>
          <target state="translated">timeoutForMediumTests</target>
        </trans-unit>
        <trans-unit id="a6dca61e251aea5eb30244ab82d118c907482e6f" translate="yes" xml:space="preserve">
          <source>timeoutForSmallTests</source>
          <target state="translated">timeoutForSmallTests</target>
        </trans-unit>
        <trans-unit id="2217eb1914a9818f02f68011b30e39d73a3369b8" translate="yes" xml:space="preserve">
          <source>to keep track of the tests that you have to write. The problem with empty test methods is that they are interpreted as a success by the PHPUnit framework. This misinterpretation leads to the test reports being useless &amp;ndash; you cannot see whether a test is actually successful or just not yet implemented. Calling &lt;code&gt;$this-&amp;gt;fail()&lt;/code&gt; in the unimplemented test method does not help either, since then the test will be interpreted as a failure. This would be just as wrong as interpreting an unimplemented test as a success.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccfdd2606dd6d436bdbce99e9f436a8561c098a" translate="yes" xml:space="preserve">
          <source>to keep track of the tests that you have to write. The problem with empty test methods is that they are interpreted as a success by the PHPUnit framework. This misinterpretation leads to the test reports being useless -- you cannot see whether a test is actually successful or just not yet implemented. Calling &lt;code&gt;$this-&amp;gt;fail()&lt;/code&gt; in the unimplemented test method does not help either, since then the test will be interpreted as a failure. This would be just as wrong as interpreting an unimplemented test as a success.</source>
          <target state="translated">작성해야 할 테스트를 추적합니다. 빈 테스트 메소드의 문제점은 PHPUnit 프레임 워크에서 성공한 것으로 해석된다는 것입니다. 이 잘못된 해석으로 인해 테스트 보고서가 쓸모 없게됩니다. 테스트가 실제로 성공했는지 아니면 아직 구현되지 않았는지 알 수 없습니다. 구현되지 않은 테스트 메소드에서 &lt;code&gt;$this-&amp;gt;fail()&lt;/code&gt; 을 호출 해도 도움이되지 않습니다. 테스트가 실패로 해석되기 때문입니다. 이것은 구현되지 않은 테스트를 성공으로 해석하는 것만큼이나 잘못되었습니다.</target>
        </trans-unit>
        <trans-unit id="c6ee72296d42470b3297273534b56130c2b1b8c8" translate="yes" xml:space="preserve">
          <source>vfsStream gives the test developer full control over what the filesystem environment looks like to the tested code.</source>
          <target state="translated">vfsStream은 테스트 개발자가 테스트 한 코드에 대해 파일 시스템 환경의 모양을 완전히 제어 할 수 있도록합니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
