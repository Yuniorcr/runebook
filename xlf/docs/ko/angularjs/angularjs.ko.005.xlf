<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="9abd4a1fe19f2348c740c086f1fff0376f8e4ee1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngroute/service/%24route#examples.html&quot;&gt;$route&lt;/a&gt; for an example of configuring and using &lt;code&gt;ngRoute&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; 구성 및 사용의 예는 &lt;a href=&quot;ngroute/service/%24route#examples.html&quot;&gt;$ route&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fe5ebe5579c1ff1fb6425c15ca757267ab25d0f1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt;&lt;code&gt;$sanitize&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">사용법 은 &lt;a href=&quot;ngsanitize/service/%24sanitize&quot;&gt; &lt;code&gt;$sanitize&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7b77962b1216fdb1070cf25eb9261359639bd5c8" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt;&lt;code&gt;$swipe&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">사용법 은 &lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt; &lt;code&gt;$swipe&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">또한보십시오</target>
        </trans-unit>
        <trans-unit id="78c3f2286b3fda189f510bf130cb1cba700dbf32" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;$compileProvider.directive()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24compileprovider#directive.html&quot;&gt;$ compileProvider.directive ()&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="695bf02cec46c2f164a6c7f21e6ef9aba935626c" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;angular.mock.module&quot;&gt;angular.mock.module&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;angular.mock.module&quot;&gt;angular.mock.module&lt;/a&gt; 도 참조하십시오</target>
        </trans-unit>
        <trans-unit id="cd3f9d3a288e4edfd08f32cdd1bff967082410f8" translate="yes" xml:space="preserve">
          <source>See also the &lt;code&gt;directive.templateNamespace&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;directive.templateNamespace&lt;/code&gt; 속성 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d9c5af2f6c5167826b7ec17bb16740907b4b38f" translate="yes" xml:space="preserve">
          <source>See also the section &lt;a href=&quot;ngmodeloptions#triggering-and-debouncing-model-updates.html&quot;&gt;Triggering and debouncing model updates&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngmodeloptions#triggering-and-debouncing-model-updates.html&quot;&gt;모델 업데이트 트리거 및 제거&lt;/a&gt; 섹션도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f37f7a74aab87f2d11b0d459293de0e44b0e806" translate="yes" xml:space="preserve">
          <source>See also the section on &lt;a href=&quot;../../../guide/component#unit-testing-component-controllers.html&quot;&gt;unit-testing component controllers&lt;/a&gt; in the guide.</source>
          <target state="translated">안내서의 &lt;a href=&quot;../../../guide/component#unit-testing-component-controllers.html&quot;&gt;단위 테스트 구성 요소 컨트롤러&lt;/a&gt; 에 대한 섹션도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="12880cab413a482aa6873d2df0c5a842044fb490" translate="yes" xml:space="preserve">
          <source>See issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/2573&quot;&gt;#2573&lt;/a&gt;.</source>
          <target state="translated">이슈 &lt;a href=&quot;https://github.com/angular/angular.js/issues/2573&quot;&gt;# 2573을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c7426cfb869fb1c7d073ad5ed6bbc028b648f91" translate="yes" xml:space="preserve">
          <source>See issue &lt;a href=&quot;https://github.com/angular/angular.js/issues/5695&quot;&gt;#5695&lt;/a&gt;.</source>
          <target state="translated">이슈 &lt;a href=&quot;https://github.com/angular/angular.js/issues/5695&quot;&gt;# 5695&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="ea55e8498372eb1f024f52d96101f8fb71faaf3d" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../../ngtouch&quot;&gt;module&lt;/a&gt; documentation for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../../ngtouch&quot;&gt;모듈&lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9577d47cd8e376d70b5f7b81428401efa96d1c58" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;../api/ng/directive/ngcontroller&quot;&gt;ng-controller&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="52635c86d5cf5e4f60fbff484d0717b60887bca1" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;../api/nganimate&quot;&gt;API docs for &lt;code&gt;ngAnimate&lt;/code&gt;&lt;/a&gt; for instructions on installing the module.</source>
          <target state="translated">모듈 설치에 대한 지시 사항 &lt;a href=&quot;../api/nganimate&quot;&gt;은 &lt;code&gt;ngAnimate&lt;/code&gt; &lt;/a&gt; 의 API 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cbc2aedb974bc24d1a1d0fe5601fb4355ef0880c" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://docs.angularjs.org/tutorial/step_11#testing&quot;&gt;phonecat tutorial&lt;/a&gt; for an example.</source>
          <target state="translated">예제 는 &lt;a href=&quot;http://docs.angularjs.org/tutorial/step_11#testing&quot;&gt;phonecat 튜토리얼&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e96b1274bd6c727dce216a1b5acee68ec84c0ca0" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt; project for an example.</source>
          <target state="translated">예제 는 &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;앵귤러 시드&lt;/a&gt; 프로젝트를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ecbca68833ed80713fcaa64526c17fb2e9a100f9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;angular-seed&lt;/a&gt; project for more examples, or look at the embedded examples in the AngularJS documentation (For example, &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$http&lt;/a&gt; has an end-to-end test in the example under the &lt;code&gt;protractor.js&lt;/code&gt; tag).</source>
          <target state="translated">더 많은 예제 는 &lt;a href=&quot;https://github.com/angular/angular-seed&quot;&gt;앵귤러 시드&lt;/a&gt; 프로젝트를 참조하거나 AngularJS 문서에 포함 된 예제를보십시오 (예를 들어, &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;$ http&lt;/a&gt; 는 &lt;code&gt;protractor.js&lt;/code&gt; 태그 아래 예제에서 엔드 투 엔드 테스트를 가짐 ).</target>
        </trans-unit>
        <trans-unit id="a97d058011d5be26c50a6e74f8dd95fdb2c79e6f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://www.w3.org/TR/html5/forms.html#range-state-(type=range&quot;&gt;HTML Spec on input[type=range]&lt;/a&gt;) for more info.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://www.w3.org/TR/html5/forms.html#range-state-(type=range&quot;&gt;input [type = range]&lt;/a&gt; )에 대한 HTML 사양을 참조하세요 .</target>
        </trans-unit>
        <trans-unit id="a0ac40f43c65be1e3b12dcd86bffd6396395ed77" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;ngoptions&quot;&gt;ngOptions documentation&lt;/a&gt; for more &lt;code&gt;ngOptions&lt;/code&gt; usage examples.</source>
          <target state="translated">더 많은 &lt;code&gt;ngOptions&lt;/code&gt; 사용 예 는 &lt;a href=&quot;ngoptions&quot;&gt;ngOptions 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="03e009db4d43734ae27201bff8730d827beb301f" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;uppercase&quot;&gt;uppercase filter documentation&lt;/a&gt; for a functionally identical example.</source>
          <target state="translated">기능적으로 동일한 예 는 &lt;a href=&quot;uppercase&quot;&gt;대문자 필터 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bc206a7f0c07635a54d0ca822bcfd4363363fb84" translate="yes" xml:space="preserve">
          <source>See the &lt;strong&gt;slide&lt;/strong&gt; CSS class? Let's use that class to define an animation that we'll structure in our module code by using &lt;code&gt;module.animation&lt;/code&gt;:</source>
          <target state="translated">참고 항목 &lt;strong&gt;슬라이드&lt;/strong&gt; CSS 클래스를? 이 클래스를 사용하여 &lt;code&gt;module.animation&lt;/code&gt; 을 사용하여 모듈 코드에서 구조화 할 애니메이션을 정의 하십시오 .</target>
        </trans-unit>
        <trans-unit id="762e1d695b4823d06070273412a16dd54a01941e" translate="yes" xml:space="preserve">
          <source>See the example below for defining CSS animations with ngRepeat.</source>
          <target state="translated">ngRepeat로 CSS 애니메이션을 정의하려면 아래 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="38e7a99ee9904d4a3ca99f81d4ea33b739210ca9" translate="yes" xml:space="preserve">
          <source>See the individual methods for more information and examples.</source>
          <target state="translated">자세한 내용과 예는 개별 방법을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9b3d99daed982770005e723c4b9d03993ce65aa3" translate="yes" xml:space="preserve">
          <source>Seed App project template</source>
          <target state="translated">시드 앱 프로젝트 템플릿</target>
        </trans-unit>
        <trans-unit id="b5e9867f9c9fb18570b4889cb5ba94603532720d" translate="yes" xml:space="preserve">
          <source>Seed application with directory layout and test scripts as a starting point.</source>
          <target state="translated">디렉토리 레이아웃 및 테스트 스크립트를 시작점으로 사용하는 시드 응용 프로그램</target>
        </trans-unit>
        <trans-unit id="c0b0079380b481f580b80b102f99f264e29300e9" translate="yes" xml:space="preserve">
          <source>Selection Keywords</source>
          <target state="translated">선택 키워드</target>
        </trans-unit>
        <trans-unit id="3cc82bb8092a6e32b7d5991c4002b66633c4d1a1" translate="yes" xml:space="preserve">
          <source>Selection keywords are simple words like &quot;male&quot; and &quot;female&quot;. The keyword, &quot;other&quot;, and its corresponding message are required while others are optional. It is used when the AngularJS expression does not match (case-insensitively) any of the other keywords specified.</source>
          <target state="translated">선택 키워드는 &quot;male&quot;및 &quot;female&quot;과 같은 간단한 단어입니다. 키워드 &quot;other&quot;및 해당 메시지는 필수이며 다른 키워드는 선택 사항입니다. AngularJS 표현식이 지정된 다른 키워드와 일치하지 않거나 대소 문자를 구분하지 않을 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="453fe4cf0f44957ceadddad3ad82b8d24441bc5c" translate="yes" xml:space="preserve">
          <source>Selects a subset of items from &lt;code&gt;array&lt;/code&gt; and returns it as a new array.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 에서 항목의 하위 집합을 선택하여 새 배열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="70fa919b37728a67741bcb7de4d4f2cbf49a9644" translate="yes" xml:space="preserve">
          <source>Self for chaining.</source>
          <target state="translated">체인 자체.</target>
        </trans-unit>
        <trans-unit id="0d96db08ad1c08844aadb4911cf17b34a5194067" translate="yes" xml:space="preserve">
          <source>Sending links among different browsers</source>
          <target state="translated">다른 브라우저간에 링크 보내기</target>
        </trans-unit>
        <trans-unit id="e61c30e14ad5323669cf2e66c324a47f65e65e5b" translate="yes" xml:space="preserve">
          <source>Separation of Concerns</source>
          <target state="translated">우려의 분리</target>
        </trans-unit>
        <trans-unit id="19d21afe1a379e6586329fb405c968df49d2f7f3" translate="yes" xml:space="preserve">
          <source>Serializes and sets a value for given cookie key</source>
          <target state="translated">주어진 쿠키 키에 대한 값을 직렬화하고 설정합니다</target>
        </trans-unit>
        <trans-unit id="26190591db24a6a79c2d1ffe033434cf28e66535" translate="yes" xml:space="preserve">
          <source>Serializes input into a JSON-formatted string. Properties with leading $$ characters will be stripped since AngularJS uses this notation internally.</source>
          <target state="translated">입력을 JSON 형식 문자열로 직렬화합니다. AngularJS는이 표기법을 내부적으로 사용하므로 $$ 문자가 선행되는 속성은 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ca7646045bd114335a4473cb2df4fbc234ba73cb" translate="yes" xml:space="preserve">
          <source>Server side</source>
          <target state="translated">서버 측</target>
        </trans-unit>
        <trans-unit id="657dec6d9dd77fb2ceb1d1b38c7ffe17f33b168d" translate="yes" xml:space="preserve">
          <source>Server-Specific</source>
          <target state="translated">Server-Specific</target>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="translated">Service</target>
        </trans-unit>
        <trans-unit id="bf72267dd99d909ed5df067cc726ef7155c6d854" translate="yes" xml:space="preserve">
          <source>Service Recipe</source>
          <target state="translated">서비스 레시피</target>
        </trans-unit>
        <trans-unit id="8941e9f98c519e0d286557e21cfb4e0c0de17a20" translate="yes" xml:space="preserve">
          <source>Service Type</source>
          <target state="translated">서비스 종류</target>
        </trans-unit>
        <trans-unit id="5a5f6c0274940063e399d3946bd3ae49d442c0ff" translate="yes" xml:space="preserve">
          <source>Service components in auto</source>
          <target state="translated">자동 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="fcebb0a024198276992ada4dbb480721bb3e0f64" translate="yes" xml:space="preserve">
          <source>Service components in ng</source>
          <target state="translated">ng의 서비스 컴포넌트</target>
        </trans-unit>
        <trans-unit id="09c48cf4ffd74297617899c30e1bba806a4773cf" translate="yes" xml:space="preserve">
          <source>Service components in ngAnimate</source>
          <target state="translated">ngAnimate의 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="941158836f6e9fe94ae316ee9c323959baae61ad" translate="yes" xml:space="preserve">
          <source>Service components in ngAria</source>
          <target state="translated">ngAria의 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="32c26b48edde3b80c434980acb12e669bd2b93ab" translate="yes" xml:space="preserve">
          <source>Service components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter의 서비스 컴포넌트</target>
        </trans-unit>
        <trans-unit id="a3fca5601631e00648b89298c06d29e4b69f5fb2" translate="yes" xml:space="preserve">
          <source>Service components in ngCookies</source>
          <target state="translated">ngCookies의 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="2a9e9867bcb9b11bd3ee9f53a4a820cbbb948291" translate="yes" xml:space="preserve">
          <source>Service components in ngMock</source>
          <target state="translated">ngMock의 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="2b3406d3d296f3b15db73360e223b513501ebc46" translate="yes" xml:space="preserve">
          <source>Service components in ngMockE2E</source>
          <target state="translated">ngMockE2E의 서비스 컴포넌트</target>
        </trans-unit>
        <trans-unit id="665c83ec475bf1c3dfa6e446e3a1706d040945a7" translate="yes" xml:space="preserve">
          <source>Service components in ngResource</source>
          <target state="translated">ngResource의 서비스 컴포넌트</target>
        </trans-unit>
        <trans-unit id="5a2a586611d056bdd1386c772b665fa21edbdbd9" translate="yes" xml:space="preserve">
          <source>Service components in ngRoute</source>
          <target state="translated">ngRoute의 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="a2478a17991c8ce33653609be29f656e3efdd561" translate="yes" xml:space="preserve">
          <source>Service components in ngSanitize</source>
          <target state="translated">ngSanitize의 서비스 구성 요소</target>
        </trans-unit>
        <trans-unit id="5084bf79af04c50fa80607d773f3bdac80e62479" translate="yes" xml:space="preserve">
          <source>Service components in ngTouch</source>
          <target state="translated">ngTouch의 서비스 컴포넌트</target>
        </trans-unit>
        <trans-unit id="d54887f3349556c2f12ee7ba270d6bd56b4b3fcb" translate="yes" xml:space="preserve">
          <source>Service instance object.</source>
          <target state="translated">서비스 인스턴스 객체.</target>
        </trans-unit>
        <trans-unit id="b41d874b42ed9e2cbb2ee48532479463e46f60d6" translate="yes" xml:space="preserve">
          <source>Service provider names start with the name of the service they provide followed by &lt;code&gt;Provider&lt;/code&gt;. For example, the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service has a provider called &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$logProvider&lt;/a&gt;.</source>
          <target state="translated">서비스 제공자 이름은 &lt;code&gt;Provider&lt;/code&gt; 제공하는 서비스 이름으로 시작합니다 . 예를 들어 &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt; 서비스에는 &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$ logProvider&lt;/a&gt; 라는 공급자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="952222f0e3de1e4052da5b327ee9d39b9d455a7c" translate="yes" xml:space="preserve">
          <source>Service provider objects can have additional methods which allow configuration of the provider and its service. Importantly, you can configure what kind of service is created by the &lt;code&gt;$get&lt;/code&gt; method, or how that service will act. For example, the &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$logProvider&lt;/a&gt; has a method &lt;a href=&quot;../../ng/provider/%24logprovider#debugEnabled.html&quot;&gt;debugEnabled&lt;/a&gt; which lets you specify whether the &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$log&lt;/a&gt; service will log debug messages to the console or not.</source>
          <target state="translated">서비스 제공자 오브젝트에는 제공자 및 해당 서비스를 구성 할 수있는 추가 메소드가있을 수 있습니다. 중요한 것은 &lt;code&gt;$get&lt;/code&gt; 메소드에 의해 어떤 종류의 서비스가 생성 되는지 또는 그 서비스가 어떻게 작동 할 것인지를 구성 할 수 있다는 것입니다. 예를 들어 &lt;a href=&quot;../../ng/provider/%24logprovider&quot;&gt;$ logProvider&lt;/a&gt; 에는 &lt;a href=&quot;../../ng/service/%24log&quot;&gt;$ log&lt;/a&gt; 서비스가 콘솔에 디버그 메시지를 기록 할지 여부를 지정할 수있는 &lt;a href=&quot;../../ng/provider/%24logprovider#debugEnabled.html&quot;&gt;debugEnabled&lt;/a&gt; 메소드 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d2b4d42fe2b710998d810b0e4e1cf1b4de34480" translate="yes" xml:space="preserve">
          <source>Service vs Factory</source>
          <target state="translated">서비스 대 공장</target>
        </trans-unit>
        <trans-unit id="5cbd584046863bc7b753e57e8681a98a87f36f0f" translate="yes" xml:space="preserve">
          <source>Services</source>
          <target state="translated">Services</target>
        </trans-unit>
        <trans-unit id="4b6d0d4999e71cef617ce73b369d4cb1158a482a" translate="yes" xml:space="preserve">
          <source>Services are objects whose API is defined by the developer writing the service.</source>
          <target state="translated">서비스는 서비스를 작성하는 개발자가 API를 정의한 객체입니다.</target>
        </trans-unit>
        <trans-unit id="525d27448e42507fcffe428f6bbdacdf06c2b08a" translate="yes" xml:space="preserve">
          <source>Services are registered to modules via the &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;Module API&lt;/a&gt;. Typically you use the &lt;a href=&quot;../api/ng/type/angular.module#factory.html&quot;&gt;Module factory&lt;/a&gt; API to register a service:</source>
          <target state="translated">서비스는 &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;모듈 API&lt;/a&gt; 를 통해 모듈에 등록됩니다 . 일반적으로 &lt;a href=&quot;../api/ng/type/angular.module#factory.html&quot;&gt;모듈 팩토리&lt;/a&gt; API를 사용하여 서비스를 등록하십시오.</target>
        </trans-unit>
        <trans-unit id="4833132fc4c899fee8d34eaa64ff5a98c4f288cd" translate="yes" xml:space="preserve">
          <source>Services can have their own dependencies. Just like declaring dependencies in a controller, you declare dependencies by specifying them in the service's factory function signature.</source>
          <target state="translated">서비스에는 자체 종속성이있을 수 있습니다. 컨트롤러에서 종속성을 선언하는 것처럼 서비스의 팩토리 함수 서명에서 종속성을 지정하여 선언합니다.</target>
        </trans-unit>
        <trans-unit id="a789f25acb702b4e658b9657b679e824eb2b9d67" translate="yes" xml:space="preserve">
          <source>Set DOM element attribute value.</source>
          <target state="translated">DOM 요소 속성 값을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="94b8b9a9904cbc044a493b9000523b46087495ae" translate="yes" xml:space="preserve">
          <source>Set a custom error when the unknown option is selected</source>
          <target state="translated">알 수없는 옵션을 선택한 경우 사용자 정의 오류 설정</target>
        </trans-unit>
        <trans-unit id="f48ee2d0db513f849bc3a687f193acaff12bf0a8" translate="yes" xml:space="preserve">
          <source>Set the &quot;required&quot; error when the unknown option is selected.</source>
          <target state="translated">알 수없는 옵션을 선택한 경우 &quot;필수&quot;오류를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="b8b76efca5914891c846b9591b11c415cdec0179" translate="yes" xml:space="preserve">
          <source>Set up the initial state of the &lt;code&gt;$scope&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;$scope&lt;/code&gt; 객체 의 초기 상태를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="32a934c3e8358dca34c040197808a0f980d47635" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;maxlength&lt;/code&gt; validation error key if the value is longer than maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any length.</source>
          <target state="translated">값이 maxlength보다 긴 경우 &lt;code&gt;maxlength&lt;/code&gt; 유효성 검사 오류 키를 설정 합니다. 속성을 음수 또는 숫자가 아닌 값으로 설정하면 모든 길이의보기 값이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="547bb7088e70130cb7f5489e9adfa8a661612808" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;minlength&lt;/code&gt; validation error key if the value is shorter than minlength.</source>
          <target state="translated">세트 &lt;code&gt;minlength&lt;/code&gt; 값이 MINLENGTH보다 짧은 경우 유효성 검사 오류 키를.</target>
        </trans-unit>
        <trans-unit id="10560bdef7511146ccdde4c1d4eb0b3d418a69fc" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;pattern&lt;/code&gt; validation error key if the ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$viewValue&lt;/a&gt; does not match a RegExp found by evaluating the AngularJS expression given in the attribute value. If the expression evaluates to a RegExp object, then this is used directly. If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$ viewValue&lt;/a&gt; 가 속성 값에 지정된 AngularJS 표현식을 평가하여 찾은 RegExp와 일치하지 않는 경우 &lt;code&gt;pattern&lt;/code&gt; 유효성 검증 오류 키를 설정 합니다. 식이 RegExp 개체로 평가되면 직접 사용됩니다. 표현식이 문자열로 평가되면 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 문자로 래핑 한 후 RegExp로 변환됩니다 . 예를 들어 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 는 &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="e3e8752f2ba54f28880c07ca6160f51e6dcbce12" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;pattern&lt;/code&gt; validation error key if the ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$viewValue&lt;/a&gt; value does not match a RegExp found by evaluating the AngularJS expression given in the attribute value. If the expression evaluates to a RegExp object, then this is used directly. If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it in &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; characters. For instance, &lt;code&gt;&quot;abc&quot;&lt;/code&gt; will be converted to &lt;code&gt;new RegExp('^abc$')&lt;/code&gt;.</source>
          <target state="translated">ngModel &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;$ viewValue&lt;/a&gt; 값이 속성 값에 지정된 AngularJS 표현식을 평가하여 찾은 RegExp와 일치하지 않는 경우 &lt;code&gt;pattern&lt;/code&gt; 유효성 검증 오류 키를 설정 합니다. 식이 RegExp 개체로 평가되면 직접 사용됩니다. 표현식이 문자열로 평가되면 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 문자로 래핑 한 후 RegExp로 변환됩니다 . 예를 들어 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 는 &lt;code&gt;new RegExp('^abc$')&lt;/code&gt; 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="fa71f45381b24c79c20b2240ce099d6f0d446c1e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;required&lt;/code&gt; attribute if set to true</source>
          <target state="translated">세트 &lt;code&gt;required&lt;/code&gt; true로 설정하면 속성을</target>
        </trans-unit>
        <trans-unit id="6b636dc2386c068323a89c825f926210e65c3fb7" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;required&lt;/code&gt; validation error key if the value is not entered.</source>
          <target state="translated">값을 입력하지 않으면 &lt;code&gt;required&lt;/code&gt; 유효성 검사 오류 키를 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="7ebf47298a75f80321a25301b9796faaacaf5e69" translate="yes" xml:space="preserve">
          <source>Sets a value for given cookie key</source>
          <target state="translated">주어진 쿠키 키에 대한 값을 설정합니다</target>
        </trans-unit>
        <trans-unit id="3eb34af4b4c9bdef7b75e97d99a9be4d8f20504b" translate="yes" xml:space="preserve">
          <source>Sets and/or returns the CSS class regular expression that is checked when performing an animation. Upon bootstrap the classNameFilter value is not set at all and will therefore enable $animate to attempt to perform an animation on any element that is triggered. When setting the &lt;code&gt;classNameFilter&lt;/code&gt; value, animations will only be performed on elements that successfully match the filter expression. This in turn can boost performance for low-powered devices as well as applications containing a lot of structural operations.</source>
          <target state="translated">애니메이션을 수행 할 때 확인되는 CSS 클래스 정규식을 설정 및 / 또는 반환합니다. 부트 스트랩시 classNameFilter 값이 전혀 설정되지 않으므로 $ animate가 트리거 된 요소에서 애니메이션을 수행 할 수 있습니다. &lt;code&gt;classNameFilter&lt;/code&gt; 값을 설정하면 필터 표현식과 성공적으로 일치하는 요소에 대해서만 애니메이션이 수행됩니다. 결과적으로 저전력 장치뿐만 아니라 많은 구조 작업이 포함 된 응용 프로그램의 성능을 향상시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3718a94f7b96f6b2b46917cfc688eefd896d791" translate="yes" xml:space="preserve">
          <source>Sets and/or returns the custom filter function that is used to &quot;filter&quot; animations, i.e. determine if an animation is allowed or not. When no filter is specified (the default), no animation will be blocked. Setting the &lt;code&gt;customFilter&lt;/code&gt; value will only allow animations for which the filter function's return value is truthy.</source>
          <target state="translated">애니메이션을 &quot;필터링&quot;하는 데 사용되는 사용자 정의 필터 함수를 설정 및 / 또는 반환합니다. 즉, 애니메이션의 허용 여부를 결정합니다. 필터를 지정하지 않으면 (기본값) 애니메이션이 차단되지 않습니다. &lt;code&gt;customFilter&lt;/code&gt; 값을 설정하면 필터 함수의 반환 값이 정확한 애니메이션 만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="39c997ee50a558fa22571f260f262fe465f1bc3e" translate="yes" xml:space="preserve">
          <source>Sets route definition that will be used on route change when no other route definition is matched.</source>
          <target state="translated">일치하는 다른 경로 정의가 없을 때 경로 변경에 사용될 경로 정의를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="fe509b1e70a37ac612ec68d5f9d1967360db9085" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;checked&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngChecked&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngChecked&lt;/code&gt; 내의 표현식이 진실 인 경우 요소 에서 &lt;code&gt;checked&lt;/code&gt; 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="1920bb63442b2b014323d1fd8ee3eaca45f052b2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation constraint to the Date / ISO date string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">세트 &lt;code&gt;max&lt;/code&gt; 하여 날짜 / ISO 날짜 문자열 검증 제약 &lt;code&gt;ngMax&lt;/code&gt; 표현들을 평가에 있습니다. &lt;code&gt;max&lt;/code&gt; 속성을 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="fe04e4e1e4f798ae71b9f0d607c543e17ae65d2f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation constraint to the Date / ISO time string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">세트 &lt;code&gt;max&lt;/code&gt; 하여 날짜 / ISO 시간 문자열에 대한 유효성 검사 제약 &lt;code&gt;ngMax&lt;/code&gt; 표현들을 평가에 있습니다. &lt;code&gt;max&lt;/code&gt; 속성을 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="33b3b16a800154c129abbf9a22996d3fc6393f12" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation constraint to the Date / ISO week string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">세트 &lt;code&gt;max&lt;/code&gt; 하여 날짜 / ISO 주 문자열에 대한 유효성 검사 제약 &lt;code&gt;ngMax&lt;/code&gt; 표현들을 평가에 있습니다. &lt;code&gt;max&lt;/code&gt; 속성을 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="6ec3cbf0ace78fd47d3695b13119051dc7e3d246" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">입력 한 값이 &lt;code&gt;max&lt;/code&gt; 보다 큰 경우 &lt;code&gt;max&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 보간 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfb5d601886fbe150a5012e311e1260560637c5a" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 한 값이 &lt;code&gt;max&lt;/code&gt; 보다 큰 경우 &lt;code&gt;max&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 날짜 문자열 (yyyy-MM-dd)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;max=&quot;{{maxDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt; ). 참고 &lt;code&gt;max&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="ef393f8471ebb5eda9f8a9c29cddcf2bf65d1f33" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 한 값이 &lt;code&gt;max&lt;/code&gt; 보다 큰 경우 &lt;code&gt;max&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 날짜 시간 형식 (yyyy-MM-ddTHH : mm : ss)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;max=&quot;{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt; ). 참고 &lt;code&gt;max&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e67c2ec5b4e363d48e8544ff1c9386c2043be291" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 한 값이 &lt;code&gt;max&lt;/code&gt; 보다 큰 경우 &lt;code&gt;max&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 월 형식 (yyyy-MM)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;max=&quot;{{maxMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt; ). 참고 &lt;code&gt;max&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="59666806b357ecc78df92fb892f590406240f7de" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 한 값이 &lt;code&gt;max&lt;/code&gt; 보다 큰 경우 &lt;code&gt;max&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 시간 형식 (HH : mm : ss)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;max=&quot;{{maxTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt; ). 참고 &lt;code&gt;max&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0bc1e49d650b2ab0a9db28fea0ec655222c81091" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key if the value entered is greater than &lt;code&gt;max&lt;/code&gt;. This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this attribute (e.g. &lt;code&gt;max=&quot;{{maxWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;max&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 한 값이 &lt;code&gt;max&lt;/code&gt; 보다 큰 경우 &lt;code&gt;max&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 주 형식 (yyyy-W ##)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;max=&quot;{{maxWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt; ). 참고 &lt;code&gt;max&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="825b0ae9a349268cac080f98fb1a3959a28ec924" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation error key to the Date / ISO datetime string the &lt;code&gt;ngMax&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;max&lt;/code&gt; attribute.</source>
          <target state="translated">세트 &lt;code&gt;max&lt;/code&gt; 날짜에 유효성 검사 오류 키를 / ISO 날짜 문자열 &lt;code&gt;ngMax&lt;/code&gt; 에 식 평가한다. &lt;code&gt;max&lt;/code&gt; 속성을 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f9a14056eac8a5d78ca16013c1477ef4d811e1b3" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;max&lt;/code&gt; validation to ensure that the value entered is less than &lt;code&gt;max&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;max&lt;/code&gt; 보다 작은 지 확인하기 위해 &lt;code&gt;max&lt;/code&gt; 유효성 검사를 설정합니다 . 보간 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fff33e1997ea58cd25cb1c888022cbebc61b1312" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation constraint to the Date / ISO date string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">설정합니다 &lt;code&gt;min&lt;/code&gt; 하여 날짜 / ISO 날짜 문자열 검증 제약 &lt;code&gt;ngMin&lt;/code&gt; 의 표현들을 평가한다. &lt;code&gt;min&lt;/code&gt; 속성 은 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="be2605cf7cddb1791067d7d5283632d4959fb52f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation constraint to the Date / ISO time string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">설정합니다 &lt;code&gt;min&lt;/code&gt; 하여 날짜 / ISO 시간 문자열에 대한 유효성 검사 제약 &lt;code&gt;ngMin&lt;/code&gt; 의 표현들을 평가한다. &lt;code&gt;min&lt;/code&gt; 속성 은 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f98850ed1615fc1d96ccc78512aa8c21ef004f5a" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation constraint to the Date / ISO week string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">설정합니다 &lt;code&gt;min&lt;/code&gt; 하여 날짜 / ISO 주 문자열에 대한 유효성 검사 제약 &lt;code&gt;ngMin&lt;/code&gt; 의 표현들을 평가한다. &lt;code&gt;min&lt;/code&gt; 속성 은 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="edc23cbb72d610b87d89fb77d0293185c9e4d720" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 미만인 경우 &lt;code&gt;min&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 보간 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79ee42393e9f93ded75452638395e8e562b64e77" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 미만인 경우 &lt;code&gt;min&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 날짜 문자열 (yyyy-MM-dd)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;min=&quot;{{minDate | date:'yyyy-MM-dd'}}&quot;&lt;/code&gt; ). 그 주 &lt;code&gt;min&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="f2795c9e822aa6cae9c2e11215a71e7b2b33811f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 미만인 경우 &lt;code&gt;min&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 날짜 시간 형식 (yyyy-MM-ddTHH : mm : ss)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;min=&quot;{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}&quot;&lt;/code&gt; ). 그 주 &lt;code&gt;min&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="9ccea6073c011efbba3158bd6322e1a8be432ab5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 미만인 경우 &lt;code&gt;min&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 월 형식 (yyyy-MM)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;min=&quot;{{minMonth | date:'yyyy-MM'}}&quot;&lt;/code&gt; ). 그 주 &lt;code&gt;min&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="425660c063af8309032bae04c418f809c38041c5" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 미만인 경우 &lt;code&gt;min&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 시간 형식 (HH : mm : ss)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;min=&quot;{{minTime | date:'HH:mm:ss'}}&quot;&lt;/code&gt; ). 그 주 &lt;code&gt;min&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="979d4c0a1f5b3540d3d99dc920c9a6548f83444f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key if the value entered is less than &lt;code&gt;min&lt;/code&gt;. This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this attribute (e.g. &lt;code&gt;min=&quot;{{minWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt;). Note that &lt;code&gt;min&lt;/code&gt; will also add native HTML5 constraint validation.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 미만인 경우 &lt;code&gt;min&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 유효한 ISO 주 형식 (yyyy-W ##)이어야합니다. 이 속성 내에서 보간을 사용할 수도 있습니다 (예 : &lt;code&gt;min=&quot;{{minWeek | date:'yyyy-Www'}}&quot;&lt;/code&gt; ). 그 주 &lt;code&gt;min&lt;/code&gt; 네이티브 HTML5 제약 유효성 검사를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="8642450476c0ed4a5dd1c8dad2d1f52f8ae6ca96" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation error key to the Date / ISO datetime string the &lt;code&gt;ngMin&lt;/code&gt; expression evaluates to. Note that it does not set the &lt;code&gt;min&lt;/code&gt; attribute.</source>
          <target state="translated">설정합니다 &lt;code&gt;min&lt;/code&gt; 날짜에 유효성 검사 오류 키 / ISO 날짜 문자열 &lt;code&gt;ngMin&lt;/code&gt; 의 에 식 평가한다. &lt;code&gt;min&lt;/code&gt; 속성 은 설정하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f8bad570e70492739e003c3000dc9ca83ea22644" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;min&lt;/code&gt; validation to ensure that the value entered is greater than &lt;code&gt;min&lt;/code&gt;. Can be interpolated.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;min&lt;/code&gt; 보다 큰지 확인하기 위해 &lt;code&gt;min&lt;/code&gt; 유효성 검사를 설정합니다 . 보간 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c99570524bdc8216da2b5396247486451cab54f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;open&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngOpen&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngOpen&lt;/code&gt; 내부의 표현식이 진실 인 경우 요소 의 &lt;code&gt;open&lt;/code&gt; 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="6f565b5b574f15f6ae5ad19f06794dc2c944e8f2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;readonly&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngReadonly&lt;/code&gt; is truthy. Note that &lt;code&gt;readonly&lt;/code&gt; applies only to &lt;code&gt;input&lt;/code&gt; elements with specific types. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly&quot;&gt;See the input docs on MDN&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;ngReadonly&lt;/code&gt; 내부의 표현식이 진실 인 경우 요소 에서 &lt;code&gt;readonly&lt;/code&gt; 속성을 설정합니다 . 참고 &lt;code&gt;readonly&lt;/code&gt; 만 적용되는 &lt;code&gt;input&lt;/code&gt; 특정 유형과 소자. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly&quot;&gt;자세한 내용은 MDN의 입력 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="37e13f7cb285022e632b2143b226eca3914cb348" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;selected&lt;/code&gt; attribute on the element, if the expression inside &lt;code&gt;ngSelected&lt;/code&gt; is truthy.</source>
          <target state="translated">&lt;code&gt;ngSelected&lt;/code&gt; 내의 표현식이 진실 인 경우 요소 에서 &lt;code&gt;selected&lt;/code&gt; 속성을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="fd0236e93dca6652c60911632c17041088c4ddfb" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;step&lt;/code&gt; validation error key if the value entered does not fit the &lt;code&gt;step&lt;/code&gt; constraint. Can be interpolated.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;step&lt;/code&gt; 제약 조건에 맞지 않는 경우 &lt;code&gt;step&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 . 보간 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c87850acb5778acf50b5edeccc7acb99a1555559" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;step&lt;/code&gt; validation to ensure that the value entered matches the &lt;code&gt;step&lt;/code&gt; Can be interpolated.</source>
          <target state="translated">입력 된 값이 &lt;code&gt;step&lt;/code&gt; 와 일치하는지 확인하기 위해 &lt;code&gt;step&lt;/code&gt; 유효성 검사를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="9f4cb7bf52331e65ac69941f041ac363a81a3b12" translate="yes" xml:space="preserve">
          <source>Sets the control to its dirty state.</source>
          <target state="translated">컨트롤을 더티 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e3bf3b958a072b69e62408d924915fb8a179eaff" translate="yes" xml:space="preserve">
          <source>Sets the control to its pristine state.</source>
          <target state="translated">컨트롤을 원래 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e4a131591ff87bb79feac231f451d7031148843a" translate="yes" xml:space="preserve">
          <source>Sets the control to its touched state.</source>
          <target state="translated">컨트롤을 터치 된 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a5b267b9a5cc9a25b454ab1eae10051e806b3f01" translate="yes" xml:space="preserve">
          <source>Sets the control to its untouched state.</source>
          <target state="translated">컨트롤을 손대지 않은 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4447a6517c090edca6f974fba3922639b9e1e12e" translate="yes" xml:space="preserve">
          <source>Sets the form to a dirty state.</source>
          <target state="translated">양식을 더티 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9350ec632ab5fec79f1f724eae353ac0165bb757" translate="yes" xml:space="preserve">
          <source>Sets the form to its &lt;code&gt;$submitted&lt;/code&gt; state. This will also set &lt;code&gt;$submitted&lt;/code&gt; on all child and parent forms of the form.</source>
          <target state="translated">양식을 &lt;code&gt;$submitted&lt;/code&gt; 상태 로 설정합니다 . 또한 양식의 모든 하위 및 상위 양식에 &lt;code&gt;$submitted&lt;/code&gt; 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="7156388b7b1c6dc2e561c432025ee7840bcba522" translate="yes" xml:space="preserve">
          <source>Sets the form to its pristine state.</source>
          <target state="translated">양식을 원래 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="1bbab8786ad564dbebdb85217e4d437d9e57c99f" translate="yes" xml:space="preserve">
          <source>Sets the form to its untouched state.</source>
          <target state="translated">양식을 손대지 않은 상태로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="925ac2c1e142b8f6831a46079d6b7d2faf4683d7" translate="yes" xml:space="preserve">
          <source>Sets the logging mode.</source>
          <target state="translated">로깅 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="cc873a3ed61980bb62b3d8cb1fad2b7dbd3bbd9c" translate="yes" xml:space="preserve">
          <source>Sets the number of &lt;code&gt;$digest&lt;/code&gt; iterations the scope should attempt to execute before giving up and assuming that the model is unstable.</source>
          <target state="translated">모델이 불안정하다고 가정하고 포기하기 전에 스코프가 실행을 시도해야하는 &lt;code&gt;$digest&lt;/code&gt; 반복 횟수를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="39ffbd76050afade95c03c6f563e7fe6698cdffe" translate="yes" xml:space="preserve">
          <source>Sets the number of times &lt;code&gt;$onChanges&lt;/code&gt; hooks can trigger new changes before giving up and assuming that the model is unstable.</source>
          <target state="translated">모델이 불안정하다고 가정하고 포기하기 전에 &lt;code&gt;$onChanges&lt;/code&gt; 후크가 새 변경을 트리거 할 수 있는 횟수를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="a0927437f1fcf14017c5e36fbcfc48793c5fd4cd" translate="yes" xml:space="preserve">
          <source>Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...) has fired on the given element or among any of its children. Once the listener is fired, the provided callback is fired with the following params:</source>
          <target state="translated">주어진 요소 나 그 자식 중 하나에서 애니메이션 이벤트 (enter, leave, move 등)가 발생할 때마다 발생하도록 이벤트 리스너를 설정합니다. 리스너가 시작되면 제공된 콜백이 다음 매개 변수와 함께 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="4e7405ffe38d069afb052ce1338407e4fee09dd1" translate="yes" xml:space="preserve">
          <source>Sets/Gets the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; of trusted resource URLs.</source>
          <target state="translated">신뢰할 수있는 리소스 URL 의 &lt;code&gt;bannedResourceUrlList&lt;/code&gt; 를 설정 / 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="03431d02a61f42ebfbfef0fc744f1f69c2aa6fa2" translate="yes" xml:space="preserve">
          <source>Sets/Gets the blacklist of trusted resource URLs.</source>
          <target state="translated">신뢰할 수있는 리소스 URL의 블랙리스트를 설정 / 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="f55d33d49e4a23b5a5ec6ce99c201ae8c2d83ebd" translate="yes" xml:space="preserve">
          <source>Sets/Gets the list trusted of resource URLs.</source>
          <target state="translated">신뢰할 수있는 리소스 URL 목록을 설정 / 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7d47f57707cf336befa5e43696e950bc75ae7ac4" translate="yes" xml:space="preserve">
          <source>Sets/Gets the whitelist of trusted resource URLs.</source>
          <target state="translated">신뢰할 수있는 리소스 URL의 화이트리스트를 설정 / 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a4645a9bbcf8b0818a04f3d1e82f24a50d0fbb16" translate="yes" xml:space="preserve">
          <source>Setters and character encoding</source>
          <target state="translated">세터 및 문자 인코딩</target>
        </trans-unit>
        <trans-unit id="931d21b44fadaeb291fbdf83ce432278265cb3a4" translate="yes" xml:space="preserve">
          <source>Setting HTTP Headers</source>
          <target state="translated">HTTP 헤더 설정</target>
        </trans-unit>
        <trans-unit id="f77d1dec6bba3973c39fb19b56136fe4ae5c3468" translate="yes" xml:space="preserve">
          <source>Setting a form back to a pristine state is often useful when we want to 'reuse' a form after saving or resetting it.</source>
          <target state="translated">양식을 원래 상태로 다시 설정하면 양식을 저장하거나 재설정 한 후 '재사용'할 때 종종 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8c6c2a7659542590f7cf49657b164806adad134c" translate="yes" xml:space="preserve">
          <source>Setting a form controls back to their untouched state is often useful when setting the form back to its pristine state.</source>
          <target state="translated">양식 컨트롤을 수정되지 않은 상태로 다시 설정하면 양식을 원래 상태로 다시 설정할 때 종종 유용합니다.</target>
        </trans-unit>
        <trans-unit id="942eaaad186f1e9ad5700be9b0380f06a6b4a71b" translate="yes" xml:space="preserve">
          <source>Setting related css classes on the element (&lt;code&gt;ng-valid&lt;/code&gt;, &lt;code&gt;ng-invalid&lt;/code&gt;, &lt;code&gt;ng-dirty&lt;/code&gt;, &lt;code&gt;ng-pristine&lt;/code&gt;, &lt;code&gt;ng-touched&lt;/code&gt;, &lt;code&gt;ng-untouched&lt;/code&gt;, &lt;code&gt;ng-empty&lt;/code&gt;, &lt;code&gt;ng-not-empty&lt;/code&gt;) including animations.</source>
          <target state="translated">애니메이션을 포함한 요소 ( &lt;code&gt;ng-valid&lt;/code&gt; , &lt;code&gt;ng-invalid&lt;/code&gt; , &lt;code&gt;ng-dirty&lt;/code&gt; , &lt;code&gt;ng-pristine&lt;/code&gt; , &lt;code&gt;ng-touched&lt;/code&gt; , &lt;code&gt;ng-untouched&lt;/code&gt; , &lt;code&gt;ng-empty&lt;/code&gt; , &lt;code&gt;ng-not-empty&lt;/code&gt; ) 에 관련 CSS 클래스 설정</target>
        </trans-unit>
        <trans-unit id="277f5f922447d11f1148440e274ee0c10496fee1" translate="yes" xml:space="preserve">
          <source>Setting up the initial state of a $scope object</source>
          <target state="translated">$ scope 객체의 초기 상태 설정</target>
        </trans-unit>
        <trans-unit id="125fbd7f10dab7394cfc5048a85cdfbd854dbe5e" translate="yes" xml:space="preserve">
          <source>Shallow watches the properties of an object and fires whenever any of the properties change (for arrays, this implies watching the array items; for object maps, this implies watching the properties). If a change is detected, the &lt;code&gt;listener&lt;/code&gt; callback is fired.</source>
          <target state="translated">Shallow는 객체의 속성을 감시하고 속성이 변경 될 때마다 발생합니다 (배열의 경우 배열 항목보기, 객체 맵의 경우 속성보기). 변경이 감지되면 &lt;code&gt;listener&lt;/code&gt; 콜백이 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="380e38945f7671e000cf05944b1ad2d0e741efa4" translate="yes" xml:space="preserve">
          <source>Share code or state across controllers &amp;mdash; Use &lt;a href=&quot;services&quot;&gt;AngularJS services&lt;/a&gt; instead.</source>
          <target state="translated">여러 컨트롤러에서 코드 또는 상태 공유 &amp;mdash; 대신 &lt;a href=&quot;services&quot;&gt;AngularJS 서비스&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="eeb5aa3705435324f9a5bad77066c4f0603ff2ac" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;DELETE&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;DELETE&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="632f1e0986a1ac579bc340ca9bb74040c8b7cb13" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;GET&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;GET&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="37dbba8a58190de1ad30febf6bae4610d1046015" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;HEAD&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;HEAD&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="f6519910ce1599fa85bedb60905d3494f744c8df" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;JSONP&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;JSONP&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="6eb1e4826d823c6b71cc1239ada1b4b018a1769d" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;PATCH&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;PATCH&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="4405ba4487cb7f0695953efdc04c5e771da5626e" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;POST&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="640cf1d6b1646eecd287defcded6b181e69acbab" translate="yes" xml:space="preserve">
          <source>Shortcut method to perform &lt;code&gt;PUT&lt;/code&gt; request.</source>
          <target state="translated">&lt;code&gt;PUT&lt;/code&gt; 요청 을 수행하는 바로 가기 방법 .</target>
        </trans-unit>
        <trans-unit id="e653854343ba72f7dfa236141ce0b3a4406ea1ab" translate="yes" xml:space="preserve">
          <source>Shortcut methods</source>
          <target state="translated">바로 가기 방법</target>
        </trans-unit>
        <trans-unit id="31798d7cfef4747fc3cb36381de4537963cb762a" translate="yes" xml:space="preserve">
          <source>Shortcut methods are also available. All shortcut methods require passing in the URL, and request data must be passed in for POST/PUT requests. An optional config can be passed as the last argument.</source>
          <target state="translated">바로 가기 방법도 사용할 수 있습니다. 모든 바로 가기 메소드는 URL을 전달해야하며 POST / PUT 요청을 위해 요청 데이터를 전달해야합니다. 선택적 구성은 마지막 인수로 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="991d7adb474623baf0e224580d1166d72616994d" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.getTrustedCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d3f5066c6a161e53270e1d456af3c9dc058c98f5" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.getTrustedHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7c12375f2444862456736917fe52c5dda61f0c40" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.getTrustedJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5a41650ca4ad0851b345f9ce1b1fa4dc13e0f829" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.getTrustedResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b33f0daae6cb6c1a84f39046e25569499b069f8a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.getTrustedUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt;&lt;code&gt;$sceDelegate.getTrusted($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.getTrustedUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#getTrusted.html&quot;&gt; &lt;code&gt;$sceDelegate.getTrusted($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="46de0e5ba4dd5238608c0e20228a228dea8e97c8" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.parseAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="acd8a216e26619bc4475238fcd266c75b856e72b" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsHtml(expression string)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.parseAsHtml(expression string)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="078d1ee5a55f2b5471440925757193e9a8a1180a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.parseAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7443f5740c3808a5956caa9c740d58d830b2749d" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.parseAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="56b3a286669e172b604de34085d3681bf69c9d9a" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.parseAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt;&lt;code&gt;$sce.parseAs($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.parseAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24sce#parseAs.html&quot;&gt; &lt;code&gt;$sce.parseAs($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c80ffad619c88a6d2fcc06d6b44928164a655a51" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.CSS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.trustAsCss(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.CSS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f21f7bf64a73cd038d1ac38d2cbe3c19e0570c14" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.HTML, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.trustAsHtml(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.HTML, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f8adcfcd8ce136be4af5a2fb15479ed63d6a06d0" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.JS, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.trustAsJs(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.JS, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1c138911b8cec498130d3f5b57c5f37667fb15b8" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.RESOURCE_URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.trustAsResourceUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.RESOURCE_URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1120b4bcf5907d682846212855e4a465c5eef826" translate="yes" xml:space="preserve">
          <source>Shorthand method. &lt;code&gt;$sce.trustAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs($sce.URL, value)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">속기 방법. &lt;code&gt;$sce.trustAsUrl(value)&lt;/code&gt; &amp;rarr; &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs($sce.URL, value)&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="43517b93f15b2e55b043359578fa0518911485bb" translate="yes" xml:space="preserve">
          <source>Show / Hide Table of Contents</source>
          <target state="translated">목차 보이기 / 숨기기</target>
        </trans-unit>
        <trans-unit id="7ff68a0ea37d6679788b11ca9d5b4cdd7f8e0e60" translate="yes" xml:space="preserve">
          <source>Show me an example using SCE.</source>
          <target state="translated">SCE를 사용한 예를 보여주세요.</target>
        </trans-unit>
        <trans-unit id="7c0f94dc3b6e8fd9618674ea67d06e6adf7ec8d8" translate="yes" xml:space="preserve">
          <source>Shown above, the ngAria module creates a directive with the same signature as the traditional &lt;code&gt;ng-disabled&lt;/code&gt; directive. But this ngAria version is dedicated to solely managing accessibility attributes on custom elements. The internal &lt;code&gt;$aria&lt;/code&gt; service is used to watch the boolean attribute &lt;code&gt;ngDisabled&lt;/code&gt;. If it has not been explicitly set by the developer, &lt;code&gt;aria-disabled&lt;/code&gt; is injected as an attribute with its value synchronized to the value in &lt;code&gt;ngDisabled&lt;/code&gt;.</source>
          <target state="translated">위에 표시된 ngAria 모듈은 기존 &lt;code&gt;ng-disabled&lt;/code&gt; 지시문 과 동일한 서명을 사용하여 지시문을 생성합니다 . 그러나이 ngAria 버전은 사용자 지정 요소의 접근성 속성 만 관리하는 데 전념합니다. 내부 &lt;code&gt;$aria&lt;/code&gt; 서비스는 부울 속성 &lt;code&gt;ngDisabled&lt;/code&gt; 를 감시하는 데 사용됩니다 . 개발자가 명시 적으로 설정하지 않은 경우 &lt;code&gt;aria-disabled&lt;/code&gt; 값이 &lt;code&gt;ngDisabled&lt;/code&gt; 의 값에 동기화 된 속성으로 삽입됩니다 .</target>
        </trans-unit>
        <trans-unit id="80d74256d71c12c70e6d5b83fef3f61ca9e24d1a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ngPattern&lt;/code&gt; except that the attribute value is the actual string that contains the regular expression body that will be converted to a regular expression as in the ngPattern directive.</source>
          <target state="translated">속성 값이 ngPattern 지시문에서와 같이 정규식으로 변환 될 정규식 본문이 포함 된 실제 문자열이라는 점을 제외 하면 &lt;code&gt;ngPattern&lt;/code&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="5fbf095d64e8fe5aa6275f0d8781c810841a89da" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;redirectTo&lt;/code&gt;, if the return value is &lt;code&gt;undefined&lt;/code&gt; (or a promise that gets resolved to &lt;code&gt;undefined&lt;/code&gt;), no redirection takes place and the route transition occurs as though there was no redirection.</source>
          <target state="translated">유사 &lt;code&gt;redirectTo&lt;/code&gt; , 반환 값이 경우 &lt;code&gt;undefined&lt;/code&gt; (또는으로 해석됩니다 약속 &lt;code&gt;undefined&lt;/code&gt; )에는 리디렉션이 발생하지 않고 재 없었다 것처럼 경로의 변화가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b7900b7d5d07f82727f76c13818f1f10bae67ac1" translate="yes" xml:space="preserve">
          <source>Similar to the terminology used when an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.matches&quot;&gt;element &lt;strong&gt;matches&lt;/strong&gt; a selector&lt;/a&gt;, we say an element &lt;strong&gt;matches&lt;/strong&gt; a directive when the directive is part of its declaration.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element.matches&quot;&gt;요소 가 선택자 &lt;strong&gt;와 일치&lt;/strong&gt;&lt;/a&gt; 할 때 사용되는 용어와 유사하게, 지시문이 선언의 일부인 경우 요소 가 지시문 &lt;strong&gt;과 일치&lt;/strong&gt; 한다고 말합니다 .</target>
        </trans-unit>
        <trans-unit id="3877c491e6e23214903668db4f8f615dd271abe2" translate="yes" xml:space="preserve">
          <source>Similarly the browser itself offers &lt;code&gt;localStorage&lt;/code&gt; and &lt;code&gt;sessionStorage&lt;/code&gt; objects for caching data.</source>
          <target state="translated">마찬가지로 브라우저 자체는 데이터 캐싱을위한 &lt;code&gt;localStorage&lt;/code&gt; 및 &lt;code&gt;sessionStorage&lt;/code&gt; 객체를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="55fef1971466e90ac788430cdc912228b5b7171d" translate="yes" xml:space="preserve">
          <source>Similarly the controller can assign behavior to scope as seen by the &lt;code&gt;sayHello&lt;/code&gt; method, which is invoked when the user clicks on the 'greet' button. The &lt;code&gt;sayHello&lt;/code&gt; method can read the &lt;code&gt;username&lt;/code&gt; property and create a &lt;code&gt;greeting&lt;/code&gt; property. This demonstrates that the properties on scope update automatically when they are bound to HTML input widgets.</source>
          <target state="translated">마찬가지로 컨트롤러는 &lt;code&gt;sayHello&lt;/code&gt; 메소드에서 볼 수 있듯이 사용자가 'greet'버튼을 클릭 할 때 호출되는 동작을 범위에 할당 할 수 있습니다 . &lt;code&gt;sayHello&lt;/code&gt; 방법은 읽을 수있는 &lt;code&gt;username&lt;/code&gt; 속성을하고 만들 &lt;code&gt;greeting&lt;/code&gt; 속성을. 이는 범위의 특성이 HTML 입력 위젯에 바인드 될 때 자동으로 업데이트됨을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d96f9c5aaa25fbbb68757a349b61a3f9639f41c3" translate="yes" xml:space="preserve">
          <source>Similarly, an input control that has the &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive holds an instance of &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;. Such a control instance can be published as a property of the form instance using the &lt;code&gt;name&lt;/code&gt; attribute on the input control. The name attribute specifies the name of the property on the form instance.</source>
          <target state="translated">유사하게, 보유 입력 제어 &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel의&lt;/a&gt; 지시문의 인스턴스 보유 &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController를&lt;/a&gt; . 이러한 컨트롤 인스턴스는 입력 컨트롤 의 &lt;code&gt;name&lt;/code&gt; 특성을 사용하여 폼 인스턴스의 속성으로 게시 할 수 있습니다 . name 속성은 양식 인스턴스의 특성 이름을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="670d0736a092699228ee118fa27e4f1c075ba154" translate="yes" xml:space="preserve">
          <source>Similarly, invoking a function &lt;code&gt;a.b.c()&lt;/code&gt; on &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; simply returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">마찬가지로 &lt;code&gt;undefined&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 에서 &lt;code&gt;a.b.c()&lt;/code&gt; 함수를 호출하면 단순히 &lt;code&gt;undefined&lt;/code&gt; 가 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="c88e131d548a3fcff63bbf97a9bf04e46be5233b" translate="yes" xml:space="preserve">
          <source>Simple HTML Element Directive</source>
          <target state="translated">간단한 HTML 요소 지시어</target>
        </trans-unit>
        <trans-unit id="d0c008ebf252b57d3dc089a4c5acee7f6e38bd98" translate="yes" xml:space="preserve">
          <source>Simple Usage</source>
          <target state="translated">간단한 사용법</target>
        </trans-unit>
        <trans-unit id="84235c3cb3765eb50f195086225d801f2599517d" translate="yes" xml:space="preserve">
          <source>Simple form</source>
          <target state="translated">간단한 양식</target>
        </trans-unit>
        <trans-unit id="a3cd4572b9d73188ee77a0e54ea25e4d608d9782" translate="yes" xml:space="preserve">
          <source>Simple select elements with static options</source>
          <target state="translated">정적 옵션이있는 간단한 선택 요소</target>
        </trans-unit>
        <trans-unit id="03827a3f2a9c693e42982a518640a7eee54b2ec0" translate="yes" xml:space="preserve">
          <source>Simple service for logging. Default implementation safely writes the message into the browser's console (if present).</source>
          <target state="translated">로깅을위한 간단한 서비스. 기본 구현은 메시지를 브라우저의 콘솔 (있는 경우)에 안전하게 기록합니다.</target>
        </trans-unit>
        <trans-unit id="ff7e4e9f9f31d98044b04d3c21cff29557191384" translate="yes" xml:space="preserve">
          <source>Simple toggle</source>
          <target state="translated">간단한 토글</target>
        </trans-unit>
        <trans-unit id="f59ba66ace97653b45c7cb9fa1f58b221143f9b5" translate="yes" xml:space="preserve">
          <source>Simply put, there are two ways to make use of animations when ngAnimate is used: by using &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;JavaScript&lt;/strong&gt;. The former works purely based using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via &lt;code&gt;module.animation()&lt;/code&gt;. For both CSS and JS animations the sole requirement is to have a matching &lt;code&gt;CSS class&lt;/code&gt; that exists both in the registered animation and within the HTML element that the animation will be triggered on.</source>
          <target state="translated">간단히 말해서 ngAnimate를 사용할 때 &lt;strong&gt;CSS&lt;/strong&gt; 와 &lt;strong&gt;JavaScript&lt;/strong&gt; 를 사용하여 애니메이션을 사용하는 두 가지 방법이 있습니다 . 전자는 CSS를 사용하여 (CSS 선택기 / 스타일과 일치하여) 순수하게 작동하며 후자는 &lt;code&gt;module.animation()&lt;/code&gt; 통해 등록 된 애니메이션을 트리거합니다 . CSS와 JS 애니메이션 모두에 대한 유일한 요구 사항은 등록 된 애니메이션과 애니메이션이 트리거 될 HTML 요소 내에 존재 하는 일치하는 &lt;code&gt;CSS class&lt;/code&gt; 를 갖는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8d4859bf7eff37bdd85712fbd099ff7698bacb58" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;ng-model&lt;/code&gt; does not do a deep watch, &lt;code&gt;$render()&lt;/code&gt; is only invoked if the values of &lt;code&gt;$modelValue&lt;/code&gt; and &lt;code&gt;$viewValue&lt;/code&gt; are actually different from their previous values. If &lt;code&gt;$modelValue&lt;/code&gt; or &lt;code&gt;$viewValue&lt;/code&gt; are objects (rather than a string or number) then &lt;code&gt;$render()&lt;/code&gt; will not be invoked if you only change a property on the objects.</source>
          <target state="translated">때문에 &lt;code&gt;ng-model&lt;/code&gt; 깊은 시계를하지 않습니다, &lt;code&gt;$render()&lt;/code&gt; 의 값 경우에만 호출 &lt;code&gt;$modelValue&lt;/code&gt; 및 &lt;code&gt;$viewValue&lt;/code&gt; 이전 값에서 실제로 다릅니다. 경우 &lt;code&gt;$modelValue&lt;/code&gt; 또는 &lt;code&gt;$viewValue&lt;/code&gt; 다음 (오히려 문자열이나 숫자보다) 개체 &lt;code&gt;$render()&lt;/code&gt; 만 개체의 속성을 변경하는 경우 호출되지 않습니다는.</target>
        </trans-unit>
        <trans-unit id="aa0c4812062cb47a1f9de3c2cbc70c493f89f950" translate="yes" xml:space="preserve">
          <source>Since AngularJS itself uses &lt;code&gt;$validators&lt;/code&gt;, you can easily replace or remove built-in validators, should you find it necessary. The following example shows you how to overwrite the email validator in &lt;code&gt;input[email]&lt;/code&gt; from a custom directive so that it requires a specific top-level domain, &lt;code&gt;example.com&lt;/code&gt; to be present. Note that you can alternatively use &lt;code&gt;ng-pattern&lt;/code&gt; to further restrict the validation.</source>
          <target state="translated">AngularJS 자체는 &lt;code&gt;$validators&lt;/code&gt; 사용하기 때문에 필요한 경우 내장 유효성 검사기를 쉽게 교체하거나 제거 할 수 있습니다. 다음 예는 사용자 정의 지시문 에서 &lt;code&gt;input[email]&lt;/code&gt; 의 이메일 유효성 검증기를 겹쳐 쓰기하여 특정 최상위 도메인 인 &lt;code&gt;example.com&lt;/code&gt; 이 있어야합니다. 대안으로 &lt;code&gt;ng-pattern&lt;/code&gt; 을 사용 하여 유효성 검사를 추가로 제한 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5430e2f20e1f12ecf42559b930c20902825a9b60" translate="yes" xml:space="preserve">
          <source>Since AngularJS looks for this directive when it is loaded (doesn't wait for the DOMContentLoaded event), it must be placed on an element that comes before the script which loads angular. Also, only the first instance of &lt;code&gt;ng-jq&lt;/code&gt; will be used and all others ignored.</source>
          <target state="translated">AngularJS는이 지시어가로드 될 때 (DOMContentLoaded 이벤트를 기다리지 않음)이 지시자를 찾기 때문에 앵귤러를로드하는 스크립트 앞에 오는 요소에 배치되어야합니다. 또한 &lt;code&gt;ng-jq&lt;/code&gt; 의 첫 번째 인스턴스 만 사용되며 다른 모든 인스턴스는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="28e56abe07923e1d07be0d87d2c7be61d8d34f6f" translate="yes" xml:space="preserve">
          <source>Since HTML attributes are case-insensitive, camelCase properties like &lt;code&gt;innerHTML&lt;/code&gt; must be escaped. AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so &lt;code&gt;innerHTML&lt;/code&gt; must be written as &lt;code&gt;ng-prop-inner_h_t_m_l=&quot;expression&quot;&lt;/code&gt; (Note that this is just an example, and for binding HTML &lt;a href=&quot;ngbindhtml&quot;&gt;&lt;code&gt;ngBindHtml&lt;/code&gt;&lt;/a&gt; should be used.</source>
          <target state="translated">HTML 속성은 대소 문자를 구분하지 않으므로 &lt;code&gt;innerHTML&lt;/code&gt; 과 같은 camelCase 속성을 이스케이프해야합니다. AngularJS는 문자 앞에 밑줄 (_)을 사용하여 대문자임을 나타내므로 &lt;code&gt;innerHTML&lt;/code&gt; 은 &lt;code&gt;ng-prop-inner_h_t_m_l=&quot;expression&quot;&lt;/code&gt; 으로 작성해야합니다 (이것은 단지 &lt;a href=&quot;ngbindhtml&quot;&gt; &lt;code&gt;ngBindHtml&lt;/code&gt; &lt;/a&gt; HTML을 바인딩하기 위해 ngBindHtml 은 익숙한.</target>
        </trans-unit>
        <trans-unit id="6180f52ac744623bfbc50d4e6893b9f447288926" translate="yes" xml:space="preserve">
          <source>Since HTML attributes are case-insensitive, camelCase properties like &lt;code&gt;myEvent&lt;/code&gt; must be escaped. AngularJS uses the underscore (_) in front of a character to indicate that it is uppercase, so &lt;code&gt;myEvent&lt;/code&gt; must be written as &lt;code&gt;ng-on-my_event=&quot;expression&quot;&lt;/code&gt;.</source>
          <target state="translated">HTML 속성은 대소 문자를 구분하지 않으므로 &lt;code&gt;myEvent&lt;/code&gt; 와 같은 camelCase 속성을 이스케이프해야합니다. AngularJS는 문자 앞에 밑줄 (_)을 사용하여 대문자임을 나타내므로 &lt;code&gt;myEvent&lt;/code&gt; 는 &lt;code&gt;ng-on-my_event=&quot;expression&quot;&lt;/code&gt; 으로 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e5f8c4edd14e615a9529c236970c4b73e5a525f6" translate="yes" xml:space="preserve">
          <source>Since a Factory is a more powerful version of the Value recipe, the same service can be constructed with it. Using our previous &lt;code&gt;clientId&lt;/code&gt; Value recipe example, we can rewrite it as a Factory recipe like this:</source>
          <target state="translated">팩토리는 Value 레시피의보다 강력한 버전이므로 동일한 서비스를 구성 할 수 있습니다. 이전 &lt;code&gt;clientId&lt;/code&gt; Value 레시피 예제를 사용하여 다음과 같이 팩토리 레시피로 다시 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d6470589666e0247f95db4453af06bba535fd66" translate="yes" xml:space="preserve">
          <source>Since simple values, like URL prefixes, don't have dependencies or configuration, it's often handy to make them available in both the configuration and run phases. This is what the Constant recipe is for.</source>
          <target state="translated">URL 접두사와 같은 간단한 값에는 종속성이나 구성이 없으므로 구성 및 실행 단계에서 모두 사용할 수있게하는 것이 편리한 경우가 많습니다. 이것이 Constant 레시피의 목적입니다.</target>
        </trans-unit>
        <trans-unit id="ad773d9c369a2cbf2a3edcbfbb3bda586bbb4fa9" translate="yes" xml:space="preserve">
          <source>Since some CSS style names are not valid keys for an object, they must be quoted. See the 'background-color' style in the example below.</source>
          <target state="translated">일부 CSS 스타일 이름은 객체에 유효한 키가 아니므로 따옴표로 묶어야합니다. 아래 예에서 '배경색'스타일을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aee86cd3da47d151256d0ba9d57166d31b584bac" translate="yes" xml:space="preserve">
          <source>Since the directives are registered via the Factory recipe, we can use the same syntax as with factories.</source>
          <target state="translated">지시문은 팩토리 레시피를 통해 등록되므로 팩토리와 동일한 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3da73c2e58574c5c5bb5bab3aecd1685eb9aad46" translate="yes" xml:space="preserve">
          <source>Since the element value should always reflect the current model value, a range input will set the bound ngModel expression to the value that the browser has set for the input element. For example, in the following input &lt;code&gt;&amp;lt;input type=&quot;range&quot; ng-model=&quot;model.value&quot;&amp;gt;&lt;/code&gt;, if the application sets &lt;code&gt;model.value = null&lt;/code&gt;, the browser will set the input to &lt;code&gt;'50'&lt;/code&gt;. AngularJS will then set the model to &lt;code&gt;50&lt;/code&gt;, to prevent input and model value being out of sync.</source>
          <target state="translated">요소 값은 항상 현재 모델 값을 반영해야하므로 범위 입력은 바인딩 된 ngModel 표현식을 브라우저가 입력 요소에 대해 설정 한 값으로 설정합니다. 예를 들어 다음 입력 &lt;code&gt;&amp;lt;input type=&quot;range&quot; ng-model=&quot;model.value&quot;&amp;gt;&lt;/code&gt; 에서 애플리케이션이 &lt;code&gt;model.value = null&lt;/code&gt; 을 설정하면 브라우저는 입력을 &lt;code&gt;'50'&lt;/code&gt; 으로 설정합니다 . AngularJS는 입력과 모델 값이 동기화되지 않도록하기 위해 모델을 &lt;code&gt;50&lt;/code&gt; 으로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="de2656cf829a163f90dcbaec4f540852bc0adf82" translate="yes" xml:space="preserve">
          <source>Since the role of forms in client-side AngularJS applications is different than in classical roundtrip apps, it is desirable for the browser not to translate the form submission into a full page reload that sends the data to the server. Instead some javascript logic should be triggered to handle the form submission in an application-specific way.</source>
          <target state="translated">클라이언트 측 AngularJS 애플리케이션에서 폼의 역할은 기존의 왕복 앱과 다르기 때문에 브라우저가 폼 제출을 서버로 데이터를 전송하는 전체 페이지 다시로드로 변환하지 않는 것이 바람직합니다. 대신, 애플리케이션 특정 방식으로 양식 제출을 처리하기 위해 일부 자바 스크립트 로직을 트리거해야합니다.</target>
        </trans-unit>
        <trans-unit id="0f8d61a46a9e62b0ab9b1fbc5b8b9b1845db6541" translate="yes" xml:space="preserve">
          <source>Since there is always a &lt;code&gt;.&lt;/code&gt; in the bindings, you don't have to worry about prototypal inheritance masking primitives.</source>
          <target state="translated">항상 있기 때문에 &lt;code&gt;.&lt;/code&gt; 바인딩에서 프로토 타입 상속 마스킹 프리미티브에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="a49e716395a6fcc1d3c1224721ec121ecfc0eeaf" translate="yes" xml:space="preserve">
          <source>Since this function will be called extensively, keep the implementation of these functions fast, as the performance of these functions have a direct impact on the expressions parsing speed.</source>
          <target state="translated">이 함수는 광범위하게 호출되므로 이러한 함수의 성능이 표현식 구문 분석 속도에 직접적인 영향을 미치므로 이러한 함수의 구현을 빠르게 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="59722304fd011d17850e8a3823c58300ef1d80f6" translate="yes" xml:space="preserve">
          <source>Since this is not recommended usage, we do not test for this, and changes to AngularJS core may break your code.</source>
          <target state="translated">권장되는 사용법이 아니므로 테스트하지 않으며 AngularJS 코어를 변경하면 코드가 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="917832a239f3fd99dcae4d93657df711ad5f5d8f" translate="yes" xml:space="preserve">
          <source>Since we already have a constructor for our UnicornLauncher type, we can replace the Factory recipe above with a Service recipe like this:</source>
          <target state="translated">우리는 이미 UnicornLauncher 유형에 대한 생성자를 가지고 있으므로 위의 팩토리 레시피를 다음과 같은 서비스 레시피로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b0eccf81fb8808c4fb4ac778066a0a4996cfb53" translate="yes" xml:space="preserve">
          <source>Since we're adding/removing CSS classes then the CSS transition will also pick those up:</source>
          <target state="translated">CSS 클래스를 추가 / 제거하고 있으므로 CSS 전환도 해당 클래스를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="9790252dd3fcd976ceaf1905ffedbaea284d3197" translate="yes" xml:space="preserve">
          <source>Since you can apply multiple decorators, it is noteworthy that decorator application always follows order of declaration:</source>
          <target state="translated">데코레이터를 여러 개 적용 할 수 있으므로 데코레이터 응용 프로그램은 항상 선언 순서를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="221e7f46589fb8b5c943fabe0a90906e727a990e" translate="yes" xml:space="preserve">
          <source>Singletons &amp;ndash; Each component dependent on a service gets a reference to the single instance generated by the service factory.</source>
          <target state="translated">싱글 톤 &amp;ndash; 서비스에 종속 된 각 구성 요소는 서비스 팩토리에서 생성 된 단일 인스턴스에 대한 참조를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="edf9f9f4ae8d57a352e36949269c63714ff489d8" translate="yes" xml:space="preserve">
          <source>Slots that are not marked as optional (&lt;code&gt;?&lt;/code&gt;) will trigger a compile time error if there are no matching elements in the transclude content. If you wish to know if an optional slot was filled with content, then you can call &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; on the transclude function passed to the directive's link function and injectable into the directive's controller.</source>
          <target state="translated">선택 사항 ( &lt;code&gt;?&lt;/code&gt; ) 으로 표시되지 않은 슬롯 은 변환 컨텐츠에 일치하는 요소가없는 경우 컴파일 시간 오류를 트리거합니다. 옵션 슬롯이 내용으로 채워져 있는지 알고 싶다면 지시문의 링크 함수에 전달되고 지시문의 컨트롤러에 주입 가능한 &lt;code&gt;$transclude.isSlotFilled(slotName)&lt;/code&gt; 함수에서 $ transclude.isSlotFilled (slotName) 을 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1304e57395edce04375141065cec7a2b8aaaf6ee" translate="yes" xml:space="preserve">
          <source>So far we've explored how to feed in animations into an AngularJS application, but how do we trigger animations within our own directives in our application? By injecting the &lt;code&gt;$animate&lt;/code&gt; service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's imagine we have a greeting box that shows and hides itself when the data changes</source>
          <target state="translated">지금까지 AngularJS 애플리케이션에 애니메이션을 공급하는 방법을 살펴 봤지만 애플리케이션의 자체 지시문 내에서 애니메이션을 어떻게 트리거합니까? 지시어 코드에 &lt;code&gt;$animate&lt;/code&gt; 서비스를 주입하여 구조적 및 클래스 기반 후크를 트리거하여 애니메이션에 사용할 수 있습니다. 데이터가 변경 될 때 자신을 표시하고 숨기는 인사말 상자가 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="b9b91374d2524cbd476e32f3e00d6bc93d1cf372" translate="yes" xml:space="preserve">
          <source>So where does this &lt;code&gt;myTabs&lt;/code&gt; controller come from? Directives can specify controllers using the unsurprisingly named &lt;code&gt;controller&lt;/code&gt; option. As you can see, the &lt;code&gt;myTabs&lt;/code&gt; directive uses this option. Just like &lt;code&gt;ngController&lt;/code&gt;, this option attaches a controller to the template of the directive.</source>
          <target state="translated">그렇다면이 &lt;code&gt;myTabs&lt;/code&gt; 컨트롤러는 어디에서 왔습니까? 지시문은 예상치 못한 이름의 &lt;code&gt;controller&lt;/code&gt; 옵션을 사용하여 컨트롤러를 지정할 수 있습니다 . 보다시피 &lt;code&gt;myTabs&lt;/code&gt; 지시문은이 옵션을 사용합니다. &lt;code&gt;ngController&lt;/code&gt; 와 마찬가지로이 옵션은 컨트롤러를 지시문의 템플릿에 연결합니다.</target>
        </trans-unit>
        <trans-unit id="57f42d3af4e66a8c4d6f60a13630a4233309c21e" translate="yes" xml:space="preserve">
          <source>Some directives have options that will cause them to use a custom &lt;code&gt;$watchCollection&lt;/code&gt; on the model expression</source>
          <target state="translated">일부 지시문에는 모델 표현식에서 사용자 정의 &lt;code&gt;$watchCollection&lt;/code&gt; 을 사용하도록하는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c01d13578172cd43fe55634eb54a9376d0ff04b" translate="yes" xml:space="preserve">
          <source>Some directives such as &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat&lt;/code&gt;&lt;/a&gt; clone DOM elements once for each item in a collection. Having a compile and link phase improves performance since the cloned template only needs to be compiled once, and then linked once for each clone instance.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat&lt;/code&gt; &lt;/a&gt; 와 같은 일부 지시문 은 컬렉션의 각 항목에 대해 DOM 요소를 한 번 복제합니다. 컴파일 및 링크 단계를 수행하면 복제 된 템플릿을 한 번만 컴파일 한 다음 각 복제 인스턴스마다 한 번만 링크하면되므로 성능이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="abbc5f6e9931e1cf9c3b6a86facb217df53278e5" translate="yes" xml:space="preserve">
          <source>Some of the things to consider are:</source>
          <target state="translated">고려해야 할 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d096867d249bc9020052a71ba018f7a10b3ca19c" translate="yes" xml:space="preserve">
          <source>Something Missing?</source>
          <target state="translated">누락 된 뭔가?</target>
        </trans-unit>
        <trans-unit id="cbbc1430e2b49afa7433be0a07729194e8717264" translate="yes" xml:space="preserve">
          <source>Sometimes it's helpful to bind &lt;code&gt;ngModel&lt;/code&gt; to a getter/setter function. A getter/setter is a function that returns a representation of the model when called with zero arguments, and sets the internal state of a model when called with an argument. It's sometimes useful to use this for models that have an internal representation that's different from what the model exposes to the view.</source>
          <target state="translated">때로는 &lt;code&gt;ngModel&lt;/code&gt; 을 getter / setter 함수 에 바인딩하는 것이 도움이됩니다 . getter / setter는 인수없이 호출 될 때 모델 표현을 리턴하고 인수와 함께 호출 될 때 모델의 내부 상태를 설정하는 함수입니다. 모델이 뷰에 노출하는 것과 다른 내부 표현을 가진 모델에이 기능을 사용하는 것이 유용한 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="664a4aedf99dd7e1979fed0833f705180138c60a" translate="yes" xml:space="preserve">
          <source>Sometimes you need to animate between different expression states, whose values don't necessary need to be known or referenced in CSS styles. Unless possible with another &lt;a href=&quot;nganimate#directive-support.html&quot;&gt;&quot;animation aware&quot; directive&lt;/a&gt;, that specific use case can always be covered with &lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt;&lt;code&gt;ngAnimateSwap&lt;/code&gt;&lt;/a&gt; as can be seen in &lt;a href=&quot;nganimate/directive/nganimateswap#examples.html&quot;&gt;this example&lt;/a&gt;.</source>
          <target state="translated">때로는 CSS 스타일에서 값을 알거나 참조 할 필요가없는 다른 표현 상태간에 애니메이션을 적용해야하는 경우가 있습니다. 다른 &lt;a href=&quot;nganimate#directive-support.html&quot;&gt;&quot;animation aware&quot;지시문으로&lt;/a&gt; 가능하지 않은 &lt;a href=&quot;nganimate/directive/nganimateswap#examples.html&quot;&gt;경우이 예제&lt;/a&gt; 에서 볼 수 있듯이 특정 사용 사례는 항상 &lt;a href=&quot;nganimate/directive/nganimateswap&quot;&gt; &lt;code&gt;ngAnimateSwap&lt;/code&gt; &lt;/a&gt; 으로 다룰 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="af888588d45874add63c6945bb37c6a42beb5dcf" translate="yes" xml:space="preserve">
          <source>Sometimes you want to get access to the injector of a currently running AngularJS app from outside AngularJS. Perhaps, you want to inject and compile some markup after the application has been bootstrapped. You can do this using the extra &lt;code&gt;injector()&lt;/code&gt; added to JQuery/jqLite elements. See &lt;a href=&quot;angular.element&quot;&gt;&lt;code&gt;angular.element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">때로는 AngularJS 외부에서 현재 실행중인 AngularJS 앱의 인젝터에 액세스하려고 할 때가 있습니다. 응용 프로그램이 부트 스트랩 된 후 마크 업을 삽입하고 컴파일하려고 할 수 있습니다. JQuery / jqLite 요소에 추가 된 추가 &lt;code&gt;injector()&lt;/code&gt; 사용하여이를 수행 할 수 있습니다 . &lt;a href=&quot;angular.element&quot;&gt; &lt;code&gt;angular.element&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c70a3bbba0ad9cffadf0a0295881020387c4bed2" translate="yes" xml:space="preserve">
          <source>Sometimes, you want a component that's built from a combination of directives.</source>
          <target state="translated">때로는 지시문의 조합으로 만들어진 구성 요소를 원할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="421892e3b6987a4ab2662bd41f03a6db11410f1c" translate="yes" xml:space="preserve">
          <source>Source object(s).</source>
          <target state="translated">소스 객체.</target>
        </trans-unit>
        <trans-unit id="9d05b94407a845105e7d6912f2247f1fb5aedd40" translate="yes" xml:space="preserve">
          <source>Special Purpose Objects</source>
          <target state="translated">특수 목적 객체</target>
        </trans-unit>
        <trans-unit id="b96ffd57764048c51c1bcf11257b309102be467e" translate="yes" xml:space="preserve">
          <source>Special case for object literals</source>
          <target state="translated">객체 리터럴의 특수 사례</target>
        </trans-unit>
        <trans-unit id="0a8b23d3b38015cbdb0fb39f4fd51ce69124721c" translate="yes" xml:space="preserve">
          <source>Special properties are exposed on the local scope of each template instance, including:</source>
          <target state="translated">다음을 포함하여 각 템플릿 인스턴스의 로컬 범위에 특수 속성이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a078a6274605136ba821d917e9eea575f76690d4" translate="yes" xml:space="preserve">
          <source>Special repeat start and end points</source>
          <target state="translated">특별 반복 시작 및 종료 지점</target>
        </trans-unit>
        <trans-unit id="57b7760bda7b4380592b5737a6a82c6ccba48801" translate="yes" xml:space="preserve">
          <source>Specialized objects conform to a specific AngularJS framework API. These objects are one of controllers, directives, filters or animations.</source>
          <target state="translated">특수 객체는 특정 AngularJS 프레임 워크 API를 따릅니다. 이러한 객체는 컨트롤러, 지시문, 필터 또는 애니메이션 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="04c5112c22bab611b8969bac11e09ff8b1803c53" translate="yes" xml:space="preserve">
          <source>Specific Topics</source>
          <target state="translated">특정 주제</target>
        </trans-unit>
        <trans-unit id="5111401f8ca4570e9c5c87b00d803bc9e5949a8f" translate="yes" xml:space="preserve">
          <source>Specifically, select with repeated options slows down significantly starting at 2000 options in Chrome and Internet Explorer / Edge.</source>
          <target state="translated">특히 Chrome 및 Internet Explorer / Edge의 2000 옵션에서 반복 옵션을 선택하면 속도가 크게 느려집니다.</target>
        </trans-unit>
        <trans-unit id="ee5be6a3c404fec10a846b912d2167e79d9eb9d4" translate="yes" xml:space="preserve">
          <source>Specifies what the template should replace. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">템플릿을 대체 할 대상을 지정합니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ebe7a17abd0db8768c02337625977fab8c51abe5" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on blur event.</source>
          <target state="translated">블러 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="0fdd24bba9560ba7f15628258d8c85038b456928" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on copy event.</source>
          <target state="translated">복사 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="45774185dbd7972d0db9bbbe77aed1f54b1dc5fe" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on cut event.</source>
          <target state="translated">컷 이벤트에서 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="69ee0cf954ecc6be76292ac30523261180946c32" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on focus event.</source>
          <target state="translated">초점 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="2635e69da87a75b4a328ff60a4a617ced9b9ab84" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keydown event.</source>
          <target state="translated">키 다운 이벤트에서 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="364cf45ef5402fe8a77cfe94298efc046a399d5e" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keypress event.</source>
          <target state="translated">키 누르기 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="d2fbffdaf1f164dd87a0d7306222c286addb62c2" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on keyup event.</source>
          <target state="translated">키업 이벤트에 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="66046b450c8ca10135ebc76e12b5d56f6bd71fcf" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseenter event.</source>
          <target state="translated">mouseenter 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="dc4396794528c548db1abf00c9509c4b1640d305" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseleave event.</source>
          <target state="translated">mouseleave 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="6f7dc3f5a81beb83b7f91c0492d6dd61c997efa8" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mousemove event.</source>
          <target state="translated">mousemove 이벤트에 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="2ecc906801a3e6a9462c1e80878ac4cb68a8a04b" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseover event.</source>
          <target state="translated">마우스 오버 이벤트에서 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="c9957119c462925749108fa90e18e12f28fbbf99" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on mouseup event.</source>
          <target state="translated">mouseup 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="9e739ba9d9452b11d6950ec065ccba6f29b0281e" translate="yes" xml:space="preserve">
          <source>Specify custom behavior on paste event.</source>
          <target state="translated">붙여 넣기 이벤트에 대한 사용자 정의 동작을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="62ae044c38e8eea1750700749fdf95cb26a771d3" translate="yes" xml:space="preserve">
          <source>Specify custom behavior when an element is swiped to the left on a touchscreen device. A leftward swipe is a quick, right-to-left slide of the finger. Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag too.</source>
          <target state="translated">터치 스크린 장치에서 요소를 왼쪽으로 스 와이프 할 때 사용자 정의 동작을 지정하십시오. 왼쪽으로 스 와이프하면 손가락이 오른쪽에서 왼쪽으로 빠르게 움직입니다. ngSwipeLeft는 터치 기반 장치 용으로 설계되었지만 마우스 클릭과 드래그로도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ed5277106fc86f53ceb18f5891b049962ec8e692" translate="yes" xml:space="preserve">
          <source>Specify custom behavior when an element is swiped to the right on a touchscreen device. A rightward swipe is a quick, left-to-right slide of the finger. Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag too.</source>
          <target state="translated">터치 스크린 장치에서 요소를 오른쪽으로 스 와이프하면 사용자 지정 동작을 지정합니다. 오른쪽으로 스 와이프하면 손가락을 왼쪽에서 오른쪽으로 빠르게 움직입니다. ngSwipeRight는 터치 기반 장치 용으로 설계되었지만 마우스 클릭과 드래그로도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e383a8d6c6a65b95bb3d6da162b3171ba830f168" translate="yes" xml:space="preserve">
          <source>Specifying both &lt;code&gt;no-unsafe-eval&lt;/code&gt; and &lt;code&gt;no-inline-style&lt;/code&gt; tells AngularJS that we must not inject styles nor use eval, which is the same as an empty: ng-csp. E.g.&lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;no-unsafe-eval&lt;/code&gt; 및 &lt;code&gt;no-inline-style&lt;/code&gt; 아닌 스타일을 모두 지정하면 AngularJS에 스타일을 삽입하거나 eval을 사용해서는 안됩니다. 이는 비어있는 것과 같습니다. ng-csp. 예 : &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a48590887dc5ac3e1df0a031837fc5c9dd8ba17b" translate="yes" xml:space="preserve">
          <source>Specifying only &lt;code&gt;no-inline-style&lt;/code&gt; tells AngularJS that we must not inject styles, but that we can run eval - no automatic check for unsafe eval will occur. E.g. &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;no-inline-style&lt;/code&gt; 아닌 스타일 만 지정하면 AngularJS에 스타일을 주입해서는 안되지만 eval을 실행할 수 있다고 알립니다. 안전하지 않은 eval에 대한 자동 검사는 수행되지 않습니다. 예 : &lt;code&gt;&amp;lt;body ng-csp=&quot;no-inline-style&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d9595e653885c174c53ed5a17c46760fe9aa2b31" translate="yes" xml:space="preserve">
          <source>Specifying only &lt;code&gt;no-unsafe-eval&lt;/code&gt; tells AngularJS that we must not use eval, but that we can inject inline styles. E.g. &lt;code&gt;&amp;lt;body ng-csp=&quot;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;no-unsafe-eval&lt;/code&gt; 만 지정하면 AngularJS에 eval을 사용하지 말고 인라인 스타일을 삽입 할 수 있다고 알립니다. 예 &lt;code&gt;&amp;lt;body ng-csp=&quot;no-unsafe-eval&quot;&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b399f97c3ae5f107e746baac5c2d19b1a8d42cc9" translate="yes" xml:space="preserve">
          <source>Specifying timezones</source>
          <target state="translated">시간대 지정</target>
        </trans-unit>
        <trans-unit id="a54d839afff90b786485fc552138537ed9fe8312" translate="yes" xml:space="preserve">
          <source>Splitting on newline</source>
          <target state="translated">개행으로 나누기</target>
        </trans-unit>
        <trans-unit id="bd460706c33e700b49c8ae9c041be0f8c0b2338d" translate="yes" xml:space="preserve">
          <source>Stackoverflow.com</source>
          <target state="translated">Stackoverflow.com</target>
        </trans-unit>
        <trans-unit id="01d799bca2a69a007158bc0e7affb53b76bb12cb" translate="yes" xml:space="preserve">
          <source>Stagger animations are currently only supported within CSS-defined animations.</source>
          <target state="translated">스 태거 애니메이션은 현재 CSS 정의 애니메이션에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="6dc5055d926eba0a5a0d1b7f405534e8dbc2e929" translate="yes" xml:space="preserve">
          <source>Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation will also be reset if one or more animation frames have passed since the multiple calls to &lt;code&gt;$animate&lt;/code&gt; were fired.</source>
          <target state="translated">스 태거 애니메이션은 기본적으로 ngRepeat에서 작동합니다 (CSS 클래스가 정의되어있는 한). ngRepeat 외부에서 스 태거 애니메이션을 직접 사용하려면 $ animate에서 동일한 이벤트에 대한 여러 호출을 시작하여 트리거 할 수 있습니다. 그러나이를 둘러싼 제한 사항은 각 요소가 동일한 부모 요소뿐만 아니라 동일한 CSS className 값을 가져야한다는 것입니다. &lt;code&gt;$animate&lt;/code&gt; 대한 여러 호출이 실행 된 후 하나 이상의 애니메이션 프레임이 통과 된 경우 스 태거 작업도 재설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="7dbcdb3d981762e092a8a0eb5b52a65e55ce9ea2" translate="yes" xml:space="preserve">
          <source>Standard HTML text input with AngularJS data binding, inherited by most of the &lt;code&gt;input&lt;/code&gt; elements.</source>
          <target state="translated">AngularJS 데이터 바인딩을 사용하는 표준 HTML 텍스트 입력으로 대부분의 &lt;code&gt;input&lt;/code&gt; 요소 에서 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="1f1e7eba09c2ce4b9e9136f1a569e0232894be52" translate="yes" xml:space="preserve">
          <source>State object for pushState or replaceState</source>
          <target state="translated">pushState 또는 replaceState의 상태 객체</target>
        </trans-unit>
        <trans-unit id="7cf0be0a9e2a8d99b8c4759b4af56f29e76aa7ee" translate="yes" xml:space="preserve">
          <source>Stateful filters</source>
          <target state="translated">상태 저장 필터</target>
        </trans-unit>
        <trans-unit id="5e96a873a72243db5cb2df269e0f0d2cbf0c7b9d" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping</source>
          <target state="translated">엄격한 상황 탈출</target>
        </trans-unit>
        <trans-unit id="3775eeb949b1fb2fd1955bcb420db6eb7b25e4a7" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping (SCE) is a mode in which AngularJS constrains bindings to only render trusted values. Its goal is to assist in writing code in a way that (a) is secure by default, and (b) makes auditing for security vulnerabilities such as XSS, clickjacking, etc. a lot easier.</source>
          <target state="translated">SCE (Strict Contextual Escaping)는 AngularJS가 바인딩을 제한하여 신뢰할 수있는 값만 렌더링하는 모드입니다. 그 목적은 (a) 기본적으로 안전하고 (b) XSS, 클릭 재킹 등과 같은 보안 취약성에 대한 감사를 훨씬 쉽게하는 방식으로 코드 작성을 지원하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1f5a49130979c6fca3781fbd1b1aaf18d84c7ba1" translate="yes" xml:space="preserve">
          <source>Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain contexts to require a value that is marked as safe to use for that context.</source>
          <target state="translated">엄격한 컨텍스트 이스케이프 (SCE)는 AngularJS가 특정 컨텍스트에서 바인딩이 해당 컨텍스트에 사용하기에 안전한 것으로 표시된 값을 요구하도록 요구하는 모드입니다.</target>
        </trans-unit>
        <trans-unit id="1c659f2d7b3b50a0d6469f82f986c1ebaf9b0d3d" translate="yes" xml:space="preserve">
          <source>Strict DI Mode</source>
          <target state="translated">엄격한 DI 모드</target>
        </trans-unit>
        <trans-unit id="2bfb8e4ab7ad26987612ed241301df64e4a5e6c8" translate="yes" xml:space="preserve">
          <source>Strict mode throws an error whenever a service tries to use implicit annotations.</source>
          <target state="translated">서비스가 암시 적 주석을 사용하려고 할 때마다 엄격 모드에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="88d32ee4ea8feed876a112599c55110bdd530427" translate="yes" xml:space="preserve">
          <source>String expression to compile.</source>
          <target state="translated">컴파일 할 문자열 표현식.</target>
        </trans-unit>
        <trans-unit id="e12b4d937b999dc5172d2e40f3ebbc44d819487d" translate="yes" xml:space="preserve">
          <source>String of subset of &lt;code&gt;EACM&lt;/code&gt; which restricts the directive to a specific directive declaration style. If omitted, the defaults (elements and attributes) are used.</source>
          <target state="translated">지시문을 특정 지시문 선언 스타일로 제한하는 &lt;code&gt;EACM&lt;/code&gt; 의 하위 집합 문자열 입니다. 생략하면 기본값 (요소 및 속성)이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="872c64e82c40b2d1cd4b6a9e18bb1db22bb67a26" translate="yes" xml:space="preserve">
          <source>String representing the document type used by the markup in the template. AngularJS needs this information as those elements need to be created and cloned in a special way when they are defined outside their usual containers like &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">템플릿에서 마크 업에 사용되는 문서 유형을 나타내는 문자열입니다. AngularJS는 이러한 요소가 &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;math&amp;gt;&lt;/code&gt; 와 같은 일반적인 컨테이너 외부에서 정의 될 때 특별한 방식으로 작성 및 복제되어야하므로이 정보가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="88074187af21b77e29c2c3fb7338c2bfed9d4dc7" translate="yes" xml:space="preserve">
          <source>Strip &lt;code&gt;x-&lt;/code&gt; and &lt;code&gt;data-&lt;/code&gt; from the front of the element/attributes.</source>
          <target state="translated">스트립 &lt;code&gt;x-&lt;/code&gt; 과 &lt;code&gt;data-&lt;/code&gt; 요소의 전면에서 / 속성.</target>
        </trans-unit>
        <trans-unit id="7ba69fbec00fde56296717c9d98342680ce6437e" translate="yes" xml:space="preserve">
          <source>Submitting a form and preventing the default action</source>
          <target state="translated">양식 제출 및 기본 조치 방지</target>
        </trans-unit>
        <trans-unit id="1776bd536ae1b98776c73edc90a250f79697f232" translate="yes" xml:space="preserve">
          <source>Success callback is called with (value (Object|Array), responseHeaders (Function), status (number), statusText (string)) arguments, where &lt;code&gt;value&lt;/code&gt; is the populated resource instance or collection object. The error callback is called with (httpResponse) argument.</source>
          <target state="translated">성공 콜백은 (value (Object | Array), responseHeaders (Function), status (number), statusText (string)) 인수와 함께 호출되며, 여기서 &lt;code&gt;value&lt;/code&gt; 는 채워진 리소스 인스턴스 또는 컬렉션 객체입니다. 오류 콜백은 (httpResponse) 인수와 함께 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="651a1eef515aca30b90f14ef4396087abadd6816" translate="yes" xml:space="preserve">
          <source>Super-powered by Google &amp;copy;2010-2018 ()</source>
          <target state="translated">Google이 제공하는 강력한 기능 &amp;copy; 2010-2018 ()</target>
        </trans-unit>
        <trans-unit id="aaca8178a47080dd22a83473e9210240a39331e4" translate="yes" xml:space="preserve">
          <source>Super-powered by Google &amp;copy;2010-2020 ()</source>
          <target state="translated">Google의 강력한 기능 &amp;copy; 2010-2020 ()</target>
        </trans-unit>
        <trans-unit id="128ad4886b58c56808262e16c97c1fefa3d0364b" translate="yes" xml:space="preserve">
          <source>Support for forms and form validation.</source>
          <target state="translated">양식 및 양식 유효성 검사를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="533c3fe8a11280b09049baeef1d18f1e2c66b251" translate="yes" xml:space="preserve">
          <source>Supported Animations</source>
          <target state="translated">지원되는 애니메이션</target>
        </trans-unit>
        <trans-unit id="61f41951ba384b168a3fd044153d2a0d7437a779" translate="yes" xml:space="preserve">
          <source>Supported Attributes</source>
          <target state="translated">지원되는 속성</target>
        </trans-unit>
        <trans-unit id="9e850d56a52a0f4a76ab102f64af3c41ced5ebbc" translate="yes" xml:space="preserve">
          <source>Supported directives</source>
          <target state="translated">지원되는 지시어</target>
        </trans-unit>
        <trans-unit id="b844ebf9107f313b705243ff6e3c0e29c537e7bb" translate="yes" xml:space="preserve">
          <source>Supported locales in AngularJS</source>
          <target state="translated">AngularJS에서 지원되는 로케일</target>
        </trans-unit>
        <trans-unit id="d67aa352a36cef88c13b259bd33561d90b0365b1" translate="yes" xml:space="preserve">
          <source>Suspend watchers of this scope subtree so that they will not be invoked during digest.</source>
          <target state="translated">이 범위 서브 트리의 감시자를 일시 중단하여 다이제스트 중에 호출되지 않도록하십시오.</target>
        </trans-unit>
        <trans-unit id="0613e8d33b88eb5f715df8657a9f46a63b77c7cf" translate="yes" xml:space="preserve">
          <source>Suspending scopes from the digest cycle can have unwanted and difficult to debug results. Only use this approach if you are confident that you know what you are doing and have ample tests to ensure that bindings get updated as you expect.</source>
          <target state="translated">다이제스트주기에서 스코프를 일시 중단하면 원하지 않는 결과를 디버그하기가 어려울 수 있습니다. 수행중인 작업을 알고 있고 바인딩이 예상대로 업데이트되도록 충분한 테스트를 수행 한 경우이 방법을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="32e904303ff61f5b2a1250947786bac2775a479c" translate="yes" xml:space="preserve">
          <source>Symbol to denote start of expression in the interpolated string. Defaults to &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">보간 된 문자열에서 표현식의 시작을 나타내는 기호입니다. 기본값은 &lt;code&gt;{{&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="010df4acd78408b0b90ae7e93dc3b612e04db36a" translate="yes" xml:space="preserve">
          <source>Symbol to denote the end of expression in the interpolated string. Defaults to &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">보간 된 문자열에서 표현식의 끝을 나타내는 기호입니다. 기본값은 &lt;code&gt;}}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6a5f18031d695445e63d4578e75564ff86e9c008" translate="yes" xml:space="preserve">
          <source>Symbol to denote the start of expression in the interpolated string. Defaults to &lt;code&gt;{{&lt;/code&gt;.</source>
          <target state="translated">보간 된 문자열에서 표현식의 시작을 나타내는 기호입니다. 기본값은 &lt;code&gt;{{&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="24c5fe305312dc2c4ffb8fb7b9eb84e1aca41b7f" translate="yes" xml:space="preserve">
          <source>Synchronizes the URL with the browser when the user</source>
          <target state="translated">사용자가 URL을 브라우저와 동기화</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="0ffd830453cb1543a236124ebfabc6b09e44c420" translate="yes" xml:space="preserve">
          <source>Synthetic event object</source>
          <target state="translated">합성 이벤트 객체</target>
        </trans-unit>
        <trans-unit id="ef0c9c3ef9a9101037c044968d4ec8561862d66d" translate="yes" xml:space="preserve">
          <source>Synthetic event object.</source>
          <target state="translated">합성 이벤트 객체.</target>
        </trans-unit>
        <trans-unit id="11208e323cd2d68ee6883f284ffb9391f1597c5e" translate="yes" xml:space="preserve">
          <source>Take note that:</source>
          <target state="translated">다음을 참고하십시오.</target>
        </trans-unit>
        <trans-unit id="68b7d169a5352c6fcac93577ccebfe033038e7f9" translate="yes" xml:space="preserve">
          <source>Taking a look at the following CSS code, we can see some transition and keyframe animation code set up for each of those events that occur when &lt;code&gt;ngRepeat&lt;/code&gt; triggers them:</source>
          <target state="translated">다음 CSS 코드를 &lt;code&gt;ngRepeat&lt;/code&gt; 트리거 할 때 발생하는 각 이벤트에 대해 설정된 전환 및 키 프레임 애니메이션 코드를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="652ac2cbbafccc62d55637f20bfa949ef565ffbd" translate="yes" xml:space="preserve">
          <source>Target:</source>
          <target state="translated">Target:</target>
        </trans-unit>
        <trans-unit id="122160c9a1a352e0c305c1636f954067859be86c" translate="yes" xml:space="preserve">
          <source>Teach the injector how to build a &lt;code&gt;greeter&lt;/code&gt; service, which is just an object that contains a &lt;code&gt;greet&lt;/code&gt; method. Notice that &lt;code&gt;greeter&lt;/code&gt; is dependent on the &lt;code&gt;$window&lt;/code&gt; service, which will be provided (injected into &lt;code&gt;greeter&lt;/code&gt;) by the injector.</source>
          <target state="translated">인젝터에게 &lt;code&gt;greeter&lt;/code&gt; 서비스 를 구축하는 방법을 가르치십시오. 인사 서비스는 &lt;code&gt;greet&lt;/code&gt; 방법 이 포함 된 객체 일뿐 입니다. 공지 것을 &lt;code&gt;greeter&lt;/code&gt; 온 의존 &lt;code&gt;$window&lt;/code&gt; (주입 제공 될 서비스 &lt;code&gt;greeter&lt;/code&gt; 주사기에 의해).</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="efc74e06342f32d51bb6a68ec7bbc43d16692908" translate="yes" xml:space="preserve">
          <source>Template loading is asynchronous even if the template has been preloaded into the &lt;a href=&quot;%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">템플리트가 &lt;a href=&quot;%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt; 사전로드 된 경우에도 템플리트로드는 비동기입니다.</target>
        </trans-unit>
        <trans-unit id="143b0194de96c778d2d0cfe90268805e65a862d5" translate="yes" xml:space="preserve">
          <source>Template loading is asynchronous even if the template has been preloaded into the &lt;a href=&quot;%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">템플릿이 &lt;a href=&quot;%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt; 미리로드 된 경우에도 템플릿로드는 비동기식 입니다.</target>
        </trans-unit>
        <trans-unit id="a288f6778aa522b317f30186b6639810acb48145" translate="yes" xml:space="preserve">
          <source>Template-expanding directive</source>
          <target state="translated">템플릿 확장 지시문</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="2846e2f8a5a3678dc3d156fda667b93314a7bc49" translate="yes" xml:space="preserve">
          <source>Test files may also have &lt;code&gt;beforeEach&lt;/code&gt; and &lt;code&gt;afterEach&lt;/code&gt; blocks, which will be run before or after each &lt;code&gt;it&lt;/code&gt; block regardless of whether the block passes or fails.</source>
          <target state="translated">테스트 파일도있을 수 있습니다 &lt;code&gt;beforeEach&lt;/code&gt; 및 &lt;code&gt;afterEach&lt;/code&gt; 전에 실행됩니다 블록, 각 후에 &lt;code&gt;it&lt;/code&gt; 관계없이 블록이 통과 또는 실패 여부에 차단합니다.</target>
        </trans-unit>
        <trans-unit id="96975959ea5e2bafaba38be5453d1411f8d89f35" translate="yes" xml:space="preserve">
          <source>Test using your keyboard to ensure &lt;code&gt;tabindex&lt;/code&gt; is used correctly.</source>
          <target state="translated">키보드를 사용하여 테스트하여 &lt;code&gt;tabindex&lt;/code&gt; 가 올바르게 사용 되는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b0fcdbdca53eb09810029462dfa1eb106aa1e6a" translate="yes" xml:space="preserve">
          <source>Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.</source>
          <target state="translated">테스트 가능성 스토리 : 단위 테스트, 엔드 투 엔드 테스트, 모의 및 테스트 장치.</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="a3634a65dd330502bee5446e899329476bf7ded2" translate="yes" xml:space="preserve">
          <source>Testing Controllers</source>
          <target state="translated">테스트 컨트롤러</target>
        </trans-unit>
        <trans-unit id="489b1748777814ce6ed91bbe7be089fedb156bb8" translate="yes" xml:space="preserve">
          <source>Testing Directives</source>
          <target state="translated">테스트 지시문</target>
        </trans-unit>
        <trans-unit id="0ca51773188a324ba6500b945a5b499260a7faf7" translate="yes" xml:space="preserve">
          <source>Testing Directives With External Templates</source>
          <target state="translated">외부 템플릿으로 지시어 테스트</target>
        </trans-unit>
        <trans-unit id="30e8834d5ca8918b8670c01a844e8692c7dd9722" translate="yes" xml:space="preserve">
          <source>Testing Filters</source>
          <target state="translated">필터 테스트</target>
        </trans-unit>
        <trans-unit id="d231a55e7832988803b4830706f5cb4b4b35b05a" translate="yes" xml:space="preserve">
          <source>Testing Promises</source>
          <target state="translated">테스트 약속</target>
        </trans-unit>
        <trans-unit id="33850105e908659abbaf812bf8e3ec66054d9c44" translate="yes" xml:space="preserve">
          <source>Testing Transclusion Directives</source>
          <target state="translated">번역 지시문 테스트</target>
        </trans-unit>
        <trans-unit id="49e5ae7dd39e7997ba6bd0d5dbbae1d459e3b000" translate="yes" xml:space="preserve">
          <source>Testing a Controller</source>
          <target state="translated">컨트롤러 테스트</target>
        </trans-unit>
        <trans-unit id="973cdd8387cb5fb2726eb68f3d034d82d78bcdc9" translate="yes" xml:space="preserve">
          <source>Testing custom filters</source>
          <target state="translated">맞춤 필터 테스트</target>
        </trans-unit>
        <trans-unit id="d598eb7ac32708a825be100c99438a02348d3b2c" translate="yes" xml:space="preserve">
          <source>Testing with Screen Readers</source>
          <target state="translated">스크린 리더로 테스트</target>
        </trans-unit>
        <trans-unit id="b685209d970c5dca203550b5a554b7a8f8925e69" translate="yes" xml:space="preserve">
          <source>Testing with the $location service</source>
          <target state="translated">$ location 서비스를 사용한 테스트</target>
        </trans-unit>
        <trans-unit id="9df5706daf3eb9fa0be21aa54c6b83ea15bfa489" translate="yes" xml:space="preserve">
          <source>Text input that converts between a delimited string and an array of strings. The default delimiter is a comma followed by a space - equivalent to &lt;code&gt;ng-list=&quot;, &quot;&lt;/code&gt;. You can specify a custom delimiter as the value of the &lt;code&gt;ngList&lt;/code&gt; attribute - for example, &lt;code&gt;ng-list=&quot; | &quot;&lt;/code&gt;.</source>
          <target state="translated">구분 된 문자열과 문자열 배열 사이를 변환하는 텍스트 입력입니다. 기본 분리 문자는 &lt;code&gt;ng-list=&quot;, &quot;&lt;/code&gt; 와 같은 공백과 쉼표 입니다. &lt;code&gt;ngList&lt;/code&gt; 속성 값으로 사용자 정의 분리 문자를 지정할 수 있습니다 ( 예 : &lt;code&gt;ng-list=&quot; | &quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="08499f5592515b6194a97fbdd3387f4effbc7ce9" translate="yes" xml:space="preserve">
          <source>Text input with URL validation. Sets the &lt;code&gt;url&lt;/code&gt; validation error key if the content is not a valid URL.</source>
          <target state="translated">URL 유효성 검사로 텍스트 입력. 콘텐츠가 유효한 URL이 아닌 경우 &lt;code&gt;url&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="27b22ecdeb87e60f4c405bde495d52596c540982" translate="yes" xml:space="preserve">
          <source>Text input with email validation. Sets the &lt;code&gt;email&lt;/code&gt; validation error key if not a valid email address.</source>
          <target state="translated">이메일 검증을 통한 텍스트 입력. 유효한 이메일 주소가 아닌 경우 &lt;code&gt;email&lt;/code&gt; 유효성 검사 오류 키를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="f0293e8e598a3e16d759932f3d09e6fa1eeac46e" translate="yes" xml:space="preserve">
          <source>Text input with number validation and transformation. Sets the &lt;code&gt;number&lt;/code&gt; validation error if not a valid number.</source>
          <target state="translated">숫자 유효성 검사 및 변환을 통한 텍스트 입력. 유효한 숫자가 아닌 경우 &lt;code&gt;number&lt;/code&gt; 유효성 검사 오류를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="1de6246c79ca810bc64260eac8505e55ffa2a6d4" translate="yes" xml:space="preserve">
          <source>That means attributes that contain AngularJS expressions will not be merged correctly, e.g. &lt;a href=&quot;../directive/ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../directive/ngclass&quot;&gt;&lt;code&gt;ngClass&lt;/code&gt;&lt;/a&gt; will cause a &lt;a href=&quot;%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; error:</source>
          <target state="translated">이는 AngularJS 표현식을 포함하는 속성이 올바르게 병합되지 않음을 의미합니다. 예를 들어 &lt;a href=&quot;../directive/ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../directive/ngclass&quot;&gt; &lt;code&gt;ngClass&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt; 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="299f0c661d116cd8b3572b55171d60d4570639bc" translate="yes" xml:space="preserve">
          <source>That means the model for range will immediately be set to &lt;code&gt;50&lt;/code&gt; after &lt;code&gt;ngModel&lt;/code&gt; has been initialized. It also means a range input can never have the required error.</source>
          <target state="translated">즉, 범위에 대한 모델은 &lt;code&gt;ngModel&lt;/code&gt; 이 초기화 된 후 즉시 &lt;code&gt;50&lt;/code&gt; 으로 설정됩니다 . 또한 범위 입력에 필요한 오류가 없을 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="63ff583fb8237c8281eac9d6f606315184bc7596" translate="yes" xml:space="preserve">
          <source>That said, here's how you can completely disable SCE:</source>
          <target state="translated">SCE를 완전히 비활성화하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f81198efd6db57b92b02b30cb7fceaac517d9ab6" translate="yes" xml:space="preserve">
          <source>That way, the parent component can decide what to do with the event (e.g. delete an item or update the properties)</source>
          <target state="translated">이렇게하면 부모 구성 요소가 이벤트와 관련된 작업을 결정할 수 있습니다 (예 : 항목 삭제 또는 속성 업데이트)</target>
        </trans-unit>
        <trans-unit id="6d3eac5bdaa666af92d76d51293ca60310104f3a" translate="yes" xml:space="preserve">
          <source>The $animate service exposes a series of DOM utility methods that provide support for animation hooks. The default behavior is the application of DOM operations, however, when an animation is detected (and animations are enabled), $animate will do the heavy lifting to ensure that animation runs with the triggered DOM operation.</source>
          <target state="translated">$ animate 서비스는 애니메이션 후크를 지원하는 일련의 DOM 유틸리티 메소드를 제공합니다. 기본 동작은 DOM 작업의 응용 프로그램이지만 애니메이션이 감지되고 애니메이션이 활성화 된 경우 $ animate는 트리거 된 DOM 작업으로 애니메이션이 실행되도록하기 위해 많은 노력을 기울입니다.</target>
        </trans-unit>
        <trans-unit id="194ce6e5460bfe72c3c1a681cca76c42c501ccf1" translate="yes" xml:space="preserve">
          <source>The $aria service contains helper methods for applying common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; attributes to HTML directives.</source>
          <target state="translated">$ aria 서비스에는 HTML 지시문에 공통 &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; 속성을 적용하기위한 도우미 메서드가 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e57c4d3a5ab359e3a229c47a0ef2546a3f21789d" translate="yes" xml:space="preserve">
          <source>The $http API is based on the &lt;a href=&quot;%24q&quot;&gt;deferred/promise APIs&lt;/a&gt; exposed by the $q service. While for simple usage patterns this doesn't matter much, for advanced usage it is important to familiarize yourself with these APIs and the guarantees they provide.</source>
          <target state="translated">$ http API는 $ q 서비스에 의해 노출 된 &lt;a href=&quot;%24q&quot;&gt;지연 / 약속 API를&lt;/a&gt; 기반으로합니다 . 간단한 사용 패턴의 경우에는 그다지 중요하지 않지만, 고급 사용의 경우 이러한 API와 제공하는 보증에 익숙해지는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="2b2c3423145ce27da91640721fecef8829429447" translate="yes" xml:space="preserve">
          <source>The $http service will automatically add certain HTTP headers to all requests. These defaults can be fully configured by accessing the &lt;code&gt;$httpProvider.defaults.headers&lt;/code&gt; configuration object, which currently contains this default configuration:</source>
          <target state="translated">$ http 서비스는 모든 요청에 ​​특정 HTTP 헤더를 자동으로 추가합니다. 이 기본값은 &lt;code&gt;$httpProvider.defaults.headers&lt;/code&gt; 기본 구성이 포함 된 $ httpProvider.defaults.headers 구성 객체 에 액세스하여 완전히 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="45025861cb09f44ceaf83405ae60d5eb6215c5e2" translate="yes" xml:space="preserve">
          <source>The $httpBackend used in production always responds to requests asynchronously. If we preserved this behavior in unit testing, we'd have to create async unit tests, which are hard to write, to follow and to maintain. But neither can the testing mock respond synchronously; that would change the execution of the code under test. For this reason, the mock $httpBackend has a &lt;code&gt;flush()&lt;/code&gt; method, which allows the test to explicitly flush pending requests. This preserves the async api of the backend, while allowing the test to execute synchronously.</source>
          <target state="translated">프로덕션에 사용 된 $ httpBackend는 항상 비동기 적으로 요청에 응답합니다. 단위 테스트에서이 동작을 유지하려면 쓰기, 따르고 유지하기 어려운 비동기 단위 테스트를 만들어야합니다. 그러나 테스트 모의가 동 기적으로 응답 할 수는 없습니다. 테스트중인 코드의 실행을 변경합니다. 이러한 이유로 모의 $ httpBackend에는 &lt;code&gt;flush()&lt;/code&gt; 메소드가있어 테스트에서 보류중인 요청을 명시 적으로 플러시 할 수 있습니다. 이렇게하면 백엔드의 비동기 API를 유지하면서 테스트를 동 기적으로 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1ea52ec168329f434923efb4ce5bc2ed84b4d58" translate="yes" xml:space="preserve">
          <source>The $inject property</source>
          <target state="translated">$ inject 속성</target>
        </trans-unit>
        <trans-unit id="0503642384b0b90b167ab28e9af91eadecde392c" translate="yes" xml:space="preserve">
          <source>The $location service parses the URL in the browser address bar (based on the &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;window.location&lt;/a&gt;) and makes the URL available to your application. Changes to the URL in the address bar are reflected into $location service and changes to $location are reflected into the browser address bar.</source>
          <target state="translated">$ location 서비스는 &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;window.location을&lt;/a&gt; 기반으로 브라우저 주소 표시 줄의 URL을 구문 분석하고 응용 프로그램에서 URL을 사용할 수있게합니다. 주소 표시 줄의 URL 변경 사항은 $ location 서비스에 반영되고 $ location 변경 내용은 브라우저 주소 표시 줄에 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="b6de8f379ab401c8464aeb1b0f6a5f2ef4eea6d3" translate="yes" xml:space="preserve">
          <source>The $sceProvider provider allows developers to configure the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce&lt;/a&gt; service.</source>
          <target state="translated">$ sceProvider 제공자는 개발자가 &lt;a href=&quot;../service/%24sce&quot;&gt;$ sce&lt;/a&gt; 서비스 를 구성 할 수 있도록 합니다.</target>
        </trans-unit>
        <trans-unit id="42ac23357ad542fec9521b16840bf6f2a84458b8" translate="yes" xml:space="preserve">
          <source>The $sceProvider provider allows developers to configure the &lt;a href=&quot;service/%24sce&quot;&gt;$sce&lt;/a&gt; service.</source>
          <target state="translated">$ sceProvider 제공자는 개발자가 &lt;a href=&quot;service/%24sce&quot;&gt;$ sce&lt;/a&gt; 서비스 를 구성 할 수 있도록 합니다.</target>
        </trans-unit>
        <trans-unit id="7103c027a5428b05f3dc7b063e771e4fb90302b6" translate="yes" xml:space="preserve">
          <source>The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the directive's element. These local properties are useful for aliasing values for templates. The keys in the object hash map to the name of the property on the isolate scope; the values define how the property is bound to the parent scope, via matching attributes on the directive's element:</source>
          <target state="translated">'isolate'범위 오브젝트 해시는 지시문 요소의 속성에서 파생 된 로컬 범위 특성 세트를 정의합니다. 이러한 로컬 속성은 템플릿의 별칭 값을 지정하는 데 유용합니다. 객체 해시의 키는 격리 범위의 속성 이름에 매핑됩니다. 값은 지시문 요소의 일치하는 속성을 통해 속성이 부모 범위에 바인딩되는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b481cf5410b28b29fd4afeb84f24ebbec4ae8d39" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;../../ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24provide&quot;&gt;$이 제공하는&lt;/a&gt; 서비스가 함께 구성 요소를 등록하는 방법의 숫자가 &lt;a href=&quot;%24injector&quot;&gt;$ 인젝터를&lt;/a&gt; . 이러한 함수 중 다수는 &lt;a href=&quot;../../ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt; 에도 노출됩니다 .</target>
        </trans-unit>
        <trans-unit id="c958fdaf4a8310848ce8c43ab113c9e38a864741" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24rootscope.scope&quot;&gt;&lt;code&gt;Scope&lt;/code&gt;&lt;/a&gt; that will be the &lt;code&gt;$parent&lt;/code&gt; of the newly created scope. Defaults to &lt;code&gt;this&lt;/code&gt; scope if not provided. This is used when creating a transclude scope to correctly place it in the scope hierarchy while maintaining the correct prototypical inheritance.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope&quot;&gt; &lt;code&gt;Scope&lt;/code&gt; &lt;/a&gt; 될 것입니다 &lt;code&gt;$parent&lt;/code&gt; 새로 만든 범위. 제공되지 않은 경우 기본값은 &lt;code&gt;this&lt;/code&gt; 범위입니다. 올바른 프로토 타입 상속을 유지하면서 범위 계층 구조에 올바르게 배치하기 위해 변환 범위를 작성할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5088c796c076c5afc03301480e93c045f4daa1f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;watch&lt;/a&gt; listeners are fired immediately after the expression was executed using the &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;%24rootscope.scope#%24watch.html&quot;&gt;시계&lt;/a&gt; 표현이 사용하여 실행 된 후 청취자가 즉시 해고 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ ()를 소화&lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="e4efeed9dc1586cac88ab933a39d0104121705c1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; is executed using the &lt;a href=&quot;%24rootscope.scope#%24eval.html&quot;&gt;$eval()&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/expression&quot;&gt;발현&lt;/a&gt; 은 USING 실행 &lt;a href=&quot;%24rootscope.scope#%24eval.html&quot;&gt;$의 평가 ()&lt;/a&gt; 방법.</target>
        </trans-unit>
        <trans-unit id="3ba3a2e2a0f8ebb24ca8e23616e9111644536337" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/auto/service/%24provide#decorator.html&quot;&gt;decorator function&lt;/a&gt; allows access to a $delegate of the service once it has been instantiated. For example:</source>
          <target state="translated">&lt;a href=&quot;../api/auto/service/%24provide#decorator.html&quot;&gt;장식 기능은&lt;/a&gt; 인스턴스화되고 나면 서비스의 $ 위임에 액세스 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7eca4eaa295e01dc7c0723c82ed981b7f3a91d32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/input&quot;&gt;input&lt;/a&gt; directive captures the change to the input's value and calls &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply&lt;/a&gt;&lt;code&gt;(&quot;name = 'X';&quot;)&lt;/code&gt; to update the application model inside the AngularJS execution context.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/input&quot;&gt;입력&lt;/a&gt; 지시 캡처 입력 값에 대한 변경 및 호출 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$이 적용됩니다 &lt;/a&gt; &lt;code&gt;(&quot;name = 'X';&quot;)&lt;/code&gt; AngularJS와 실행 컨텍스트 내에서 응용 프로그램 모델을 업데이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="daeecc13c816cd15919cf3da0b745b55933dea25" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/nghide&quot;&gt;ngHide&lt;/a&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngHide&lt;/code&gt; attribute. The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/nghide&quot;&gt;ngHide&lt;/a&gt; 받는 제공된 식에 기초하여 지정 보이거나 숨겨 지정된 HTML 요소 &lt;code&gt;ngHide&lt;/code&gt; 의 속성. 요소는 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스를 제거하거나 요소에 추가하여 요소를 표시하거나 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="099b35bc2962fc88ae182201bfacdefb00ca7545" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/directive/ngshow&quot;&gt;ngShow&lt;/a&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngShow&lt;/code&gt; attribute. The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngshow&quot;&gt;ngShow&lt;/a&gt; 받는 제공된 식에 기초하여 지정 보이거나 숨겨 지정된 HTML 요소 &lt;code&gt;ngShow&lt;/code&gt; 의 속성. 요소는 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스를 제거하거나 요소에 추가하여 요소를 표시하거나 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="023460bb941f1035ef2c9715c8324ebe5039ac36" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;&lt;code&gt;$compile&lt;/code&gt; API&lt;/a&gt; page has a comprehensive list of directive options for reference.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24compile&quot;&gt; &lt;code&gt;$compile&lt;/code&gt; API의&lt;/a&gt; 페이지를 참조 할 수 있도록 지침 옵션의 포괄적 인 목록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="17a7fe7a9777db0b00b17b0cd4aa74010089b038" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;root scope&lt;/a&gt; is created during the application bootstrap by the &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. During template linking, some directives create new child scopes.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;루트 범위는&lt;/a&gt; 바이 응용 프로그램 부트 스트랩 과정에서 생성되는 &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;$ 인젝터&lt;/a&gt; . 템플릿 연결 중에 일부 지시문은 새로운 자식 범위를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="31494439d03e42dc5ca98a549ea110584d3df564" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$digest&lt;/a&gt; loop begins</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트&lt;/a&gt; 루프가 시작됩니다</target>
        </trans-unit>
        <trans-unit id="380271a2fc3493b42bb9da3a0d80b696156b42a1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$evalAsync&lt;/a&gt; queue is used to schedule work which needs to occur outside of current stack frame, but before the browser's view render. This is usually done with &lt;code&gt;setTimeout(0)&lt;/code&gt;, but the &lt;code&gt;setTimeout(0)&lt;/code&gt; approach suffers from slowness and may cause view flickering since the browser renders the view after each event.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24evalAsync.html&quot;&gt;$ evalAsync의&lt;/a&gt; 큐는 현재 스택 프레임의 외부에서 발생하는 필요가 일정 작업에 사용하지만 브라우저의보기 전에 렌더링됩니다. 일반적으로 &lt;code&gt;setTimeout(0)&lt;/code&gt; 으로 수행 되지만 &lt;code&gt;setTimeout(0)&lt;/code&gt; 접근 방식은 느려져 브라우저가 각 이벤트 후에보기를 렌더링하므로보기가 깜빡 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="459cfb582917d3376b9b43d01c4c6cb22284ba08" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list detects a change on the &lt;code&gt;name&lt;/code&gt; property and notifies the &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;interpolation&lt;/a&gt;, which in turn updates the DOM.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ 시계&lt;/a&gt; 목록은에 변화가 감지 &lt;code&gt;name&lt;/code&gt; 속성을하고 통지 &lt;a href=&quot;../api/ng/service/%24interpolate&quot;&gt;보간&lt;/a&gt; 차례로 DOM을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="547ef40c765ee6d2de24aad2fe611a70120f6eb2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt; list is a set of expressions which may have changed since last iteration. If a change is detected then the &lt;code&gt;$watch&lt;/code&gt; function is called which typically updates the DOM with the new value.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ 시계&lt;/a&gt; 목록 마지막 반복 이후 변경되었을 수 있습니다 표현의 집합입니다. 변경이 감지되면 &lt;code&gt;$watch&lt;/code&gt; 함수가 호출되어 일반적으로 DOM을 새 값으로 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="cb49f0f51e19995f158a11d48d6f7dc556ba8c2a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;Module&lt;/a&gt; API</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;모듈&lt;/a&gt; API</target>
        </trans-unit>
        <trans-unit id="41a35f6d62c6e21e8506f4e777c40bbfb88db54d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module API&lt;/a&gt; describes all the available methods and how they can be used.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;모듈 API는&lt;/a&gt; 사용 가능한 모든 방법을 설명하고이 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10eea8f5fb8fe932631820e37257ff6183f4e46e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/a&gt; method accepts a function, which can be injected with &quot;providers&quot; and &quot;constants&quot; as dependencies. Note that you cannot inject &quot;services&quot; or &quot;values&quot; into configuration.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;config&lt;/code&gt; &lt;/a&gt; 방법 &quot;제공자&quot;와 같은 의존성 &quot;정수&quot;로 주입 할 수있는 기능을 수용한다. &quot;서비스&quot;또는 &quot;값&quot;을 구성에 삽입 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0116235f6dcddbbe9019dacd62ffd604839fb3d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#provider.html&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; method can only be injected with other &quot;providers&quot;. However, only those that have been &lt;strong&gt;registered beforehand&lt;/strong&gt; can be injected. This is different from services, where the order of registration does not matter.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#provider.html&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt; 메소드는 다른 &quot;제공자&quot;로 주입 될 수있다. 그러나 &lt;strong&gt;사전&lt;/strong&gt; 에 &lt;strong&gt;등록 된&lt;/strong&gt; 것만 주사 할 수 있습니다. 이것은 등록 순서가 중요하지 않은 서비스와 다릅니다.</target>
        </trans-unit>
        <trans-unit id="6f4613cc7644c093ce085f5bce14a14217368e32" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method accepts a function, which can be injected with &quot;services&quot;, &quot;values&quot; and, &quot;constants&quot; as dependencies. Note that you cannot inject &quot;providers&quot; into &lt;code&gt;run&lt;/code&gt; blocks.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt; &lt;code&gt;run&lt;/code&gt; &lt;/a&gt; 방법으로서 종속성 &quot;서비스&quot;, &quot;값&quot;과 &quot;정수&quot;로 주입 할 수있는 기능을 수용한다. &quot;제공자&quot;를 &lt;code&gt;run&lt;/code&gt; 블록에 주입 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="f60093769cb487082aa81cbfc58344c3fdafd53b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider#resourceUrlWhitelist()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider#resourceUrlBlacklist()&lt;/a&gt; can be used to restrict trusted origins for &lt;code&gt;RESOURCE_URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider # resourceUrlWhitelist ()&lt;/a&gt; 와 &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider # resourceUrlBlacklist ()&lt;/a&gt; 에 대한 신뢰 기원 제한하는 데 사용할 수 있습니다 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="d089b904853aaa231d1655d29dd2b323330e9820" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$sceDelegateProvider#trustedResourceUrlList()&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$sceDelegateProvider#bannedResourceUrlList()&lt;/a&gt; can be used to restrict trusted origins for &lt;code&gt;RESOURCE_URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$ sceDelegateProvider # trustedResourceUrlList ()&lt;/a&gt; 와 &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$ sceDelegateProvider # bannedResourceUrlList ()&lt;/a&gt; 에 대한 신뢰 기원 제한하는 데 사용할 수 있습니다 &lt;code&gt;RESOURCE_URL&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="e57e36fbb37332cf011f553838650abc7402b8fb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24controller&quot;&gt;$controller service&lt;/a&gt; is used by AngularJS to create new controllers.</source>
          <target state="translated">&lt;a href=&quot;../service/%24controller&quot;&gt;$ 컨트롤러 서비스는&lt;/a&gt; 새로운 컨트롤러를 만드는 데 AngularJS와에 의해 사용된다.</target>
        </trans-unit>
        <trans-unit id="1ccfed984f77c3facd3ea386d04c4a3fa1113f93" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; security context in which this value is safe for use, e.g. &lt;code&gt;$sce.URL&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt; 이 값이 안전하게 사용할 수있는 보안 컨텍스트, 예를 들어 &lt;code&gt;$sce.URL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fddcb39aa4dd12d545d29507700d006bc1fa117" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../service/%24templaterequest&quot;&gt;&lt;code&gt;$templateRequest&lt;/code&gt;&lt;/a&gt; will set the &lt;code&gt;cache&lt;/code&gt; and the &lt;code&gt;transformResponse&lt;/code&gt; properties of the options if not overridden here.</source>
          <target state="translated">&lt;a href=&quot;../service/%24templaterequest&quot;&gt; &lt;code&gt;$templateRequest&lt;/code&gt; &lt;/a&gt; 설정된 것이다 &lt;code&gt;cache&lt;/code&gt; 와 &lt;code&gt;transformResponse&lt;/code&gt; 의 경우하지 오버라이드 (override) 여기에 옵션의 속성을.</target>
        </trans-unit>
        <trans-unit id="3b52d2c0db8ddb52d6065d6884d9ec3ff16c1a2d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../type/%24compile.directive.attributes&quot;&gt;Attributes&lt;/a&gt; object - passed as a parameter in the &lt;code&gt;link()&lt;/code&gt; or &lt;code&gt;compile()&lt;/code&gt; functions. It has a variety of uses.</source>
          <target state="translated">&lt;a href=&quot;../type/%24compile.directive.attributes&quot;&gt;특성&lt;/a&gt; 값 Object -에 매개 변수로 전달 &lt;code&gt;link()&lt;/code&gt; 또는 &lt;code&gt;compile()&lt;/code&gt; 함수. 다양한 용도로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1c2882ae56c5aa4de1a459527df88cd51d7a6ebc" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../type/select.selectcontroller&quot;&gt;select controller&lt;/a&gt; exposes utility functions that can be used to manipulate the select's behavior.</source>
          <target state="translated">&lt;a href=&quot;../type/select.selectcontroller&quot;&gt;선택 컨트롤러&lt;/a&gt; 의 선택 동작을 조작하는 데 사용할 수있는 유틸리티 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a54d6f95f373a13b94118214c60e9abb5b97f0fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;auto/service/%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;auto/service/%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;auto/service/%24provide&quot;&gt;$이 제공하는&lt;/a&gt; 서비스가 함께 구성 요소를 등록하는 방법의 숫자가 &lt;a href=&quot;auto/service/%24injector&quot;&gt;$ 인젝터를&lt;/a&gt; . 이러한 기능 중 다수는&lt;a href=&quot;ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8d8ecbb875bfc81cc1d784ea21af391f75efbeda" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;service/%24controller&quot;&gt;$controller service&lt;/a&gt; is used by AngularJS to create new controllers.</source>
          <target state="translated">그만큼 &lt;a href=&quot;service/%24controller&quot;&gt;$ 컨트롤러 서비스는&lt;/a&gt; 새로운 컨트롤러를 만드는 데 AngularJS와에 의해 사용된다.</target>
        </trans-unit>
        <trans-unit id="c6adbd4ea5d389ae62682a2aaa97a7e0b9ee7f80" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;service/%24provide&quot;&gt;$provide&lt;/a&gt; service has a number of methods for registering components with the &lt;a href=&quot;service/%24injector&quot;&gt;$injector&lt;/a&gt;. Many of these functions are also exposed on &lt;a href=&quot;../ng/type/angular.module&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service/%24provide&quot;&gt;$이 제공하는&lt;/a&gt; 서비스가 함께 구성 요소를 등록하는 방법의 숫자가 &lt;a href=&quot;service/%24injector&quot;&gt;$ 인젝터를&lt;/a&gt; . 이러한 기능 중 많은 부분이 &lt;a href=&quot;../ng/type/angular.module&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt; 노출되어 있습니다. .</target>
        </trans-unit>
        <trans-unit id="a51ae40b8d9116e59242ac1c80711016fb25393e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animate&lt;/code&gt; service contains a variety of other methods like &lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;, &lt;code&gt;animate&lt;/code&gt; and &lt;code&gt;setClass&lt;/code&gt;. To learn more about what's possible be sure to visit the &lt;a href=&quot;ng/service/%24animate&quot;&gt;$animate service API page&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$animate&lt;/code&gt; 서비스는 다른 사람 같이 다양한 방법이 포함되어 &lt;code&gt;enter&lt;/code&gt; , &lt;code&gt;leave&lt;/code&gt; , &lt;code&gt;animate&lt;/code&gt; 및 &lt;code&gt;setClass&lt;/code&gt; 을 . 가능한 사항에 대해 자세히 알아 보려면 다음을 방문하십시오.&lt;a href=&quot;ng/service/%24animate&quot;&gt; $ animate 서비스 API 페이지 하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c0bea680af2ac70347d61de64353e3076449e907" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animateCss&lt;/code&gt; service is a useful utility to trigger customized CSS-based transitions/keyframes from a JavaScript-based animation or directly from a directive. The purpose of &lt;code&gt;$animateCss&lt;/code&gt; is NOT to side-step how &lt;code&gt;$animate&lt;/code&gt; and ngAnimate work, but the goal is to allow pre-existing animations or directives to create more complex animations that can be purely driven using CSS code.</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; 서비스가 트리거 사용자 정의 CSS 기반의 전환에 유용한 유틸리티입니다 / 자바 스크립트 기반의 애니메이션이나 직접 지시에서 키 프레임. &lt;code&gt;$animateCss&lt;/code&gt; 의 목적 &lt;code&gt;$animate&lt;/code&gt; 및 ngAnimate의 작동 방식 을 회피하는 것이 아니라, 기존 애니메이션 또는 지시문이 CSS 코드를 사용하여 순수하게 구동 할 수있는보다 복잡한 애니메이션을 만들 수 있도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a03d56b080753b701e1c124e274f1ac0aef66661" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$animateCss&lt;/code&gt; service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that data into &lt;code&gt;$animateCss&lt;/code&gt; directly:</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; 우리가 CSS 전환 또는 키 프레임 애니메이션으로 평가되고 공급됩니다 추가 속성의 모든 종류의 공급 수 있기 때문에 서비스는 매우 강력하다. 예를 들어 클래스를 추가하거나 제거하는 동안 요소의 높이에 애니메이션을 적용하려는 경우 해당 데이터를 &lt;code&gt;$animateCss&lt;/code&gt; 직접 됩니다.</target>
        </trans-unit>
        <trans-unit id="c565a783926b4bfbda231d32dea91b35841ba214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$delegate&lt;/code&gt; may be either modified or completely replaced. Given a service &lt;code&gt;myService&lt;/code&gt; with a method &lt;code&gt;someFn&lt;/code&gt;, the following could all be viable solutions:</source>
          <target state="translated">&lt;code&gt;$delegate&lt;/code&gt; 중 하나를 수정 또는 완전히 대체 될 수있다. 메소드가있는 &lt;code&gt;myService&lt;/code&gt; 서비스가 제공됨 &lt;code&gt;someFn&lt;/code&gt; 되면 다음이 모두 가능한 솔루션이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fa11b953380784747a398f9fa8e3b039546e90d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$destroy()&lt;/code&gt; is usually used by directives such as &lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; for managing the unrolling of the loop.</source>
          <target state="translated">&lt;code&gt;$destroy()&lt;/code&gt; 일반적으로 다음과 같은 지침에 의해 사용된다&lt;a href=&quot;../directive/ngrepeat&quot;&gt; ngRepeat&lt;/a&gt; 루프의 언 롤링 관리.</target>
        </trans-unit>
        <trans-unit id="e8334db42df3d0d08b39dade993ce0000f4dc06c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$evalAsync&lt;/code&gt; makes no guarantees as to when the &lt;code&gt;expression&lt;/code&gt; will be executed, only that:</source>
          <target state="translated">&lt;code&gt;$evalAsync&lt;/code&gt; 보증하지 않습니다 때 &lt;code&gt;expression&lt;/code&gt; , 것만 실행됩니다 :</target>
        </trans-unit>
        <trans-unit id="6b4e06ea9ef5ed5d40f568dbe2841a85a3b6fe3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a core AngularJS service that facilitates communication with the remote HTTP servers via the browser's &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/a&gt; object or via &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; 서비스는 브라우저를 통해 원격 HTTP 서버와의 통신을 용이하게하는 핵심 AngularJS와 서비스입니다 &lt;a href=&quot;https://developer.mozilla.org/en/xmlhttprequest&quot;&gt;XMLHttpRequest의&lt;/a&gt; 개체 또는를 통해&lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt; JSONP&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7211e0b83ff36dcc386a0602ced9ab19495d96ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$http&lt;/code&gt; service is a function which takes a single argument &amp;mdash; a &lt;a href=&quot;%24http#usage.html&quot;&gt;configuration object&lt;/a&gt; &amp;mdash; that is used to generate an HTTP request and returns a &lt;a href=&quot;%24q&quot;&gt;promise&lt;/a&gt; that is resolved (request success) or rejected (request failure) with a &lt;a href=&quot;%24http#%24http-returns.html&quot;&gt;response&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; A - 서비스는 하나의 인자를받는 함수입니다 &lt;a href=&quot;%24http#usage.html&quot;&gt;구성 개체&lt;/a&gt; - HTTP 요청을 생성하는 데 사용되며 반환 &lt;a href=&quot;%24q&quot;&gt;약속&lt;/a&gt; 으로 해결 (요청 성공) 또는 거부 (요청 실패)&lt;a href=&quot;%24http#%24http-returns.html&quot;&gt; 응답&lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="dd9167ac243a709e0bca1e4df418f519c2a08ed4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$httpProvider&lt;/code&gt; provider and &lt;code&gt;$http&lt;/code&gt; service expose &lt;code&gt;defaults.transformRequest&lt;/code&gt; and &lt;code&gt;defaults.transformResponse&lt;/code&gt; properties. If a request does not provide its own transformations then these will be applied.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; 공급자와 &lt;code&gt;$http&lt;/code&gt; 서비스는 노출 &lt;code&gt;defaults.transformRequest&lt;/code&gt; 및 &lt;code&gt;defaults.transformResponse&lt;/code&gt; 을 속성을. 요청이 자체 변환을 제공하지 않으면 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="1bc7ca8fb85381885e5cddb9a6542ad259fdb423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service allows you to change only the URL; it does not allow you to reload the page. When you need to change the URL and reload the page or navigate to a different page, please use a lower level API, &lt;a href=&quot;../api/ng/service/%24window&quot;&gt;$window.location.href&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; 서비스는 변화에만 URL에 당신을 수 있습니다; 페이지를 다시로드 할 수 없습니다. URL을 변경하고 페이지를 다시로드하거나 다른 페이지로 이동해야하는 경우 하위 수준 API를 사용하십시오.&lt;a href=&quot;../api/ng/service/%24window&quot;&gt; $ window.location.href를 사용하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e98eb9ca822cf6facd0f8798305a215baf8cc63e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service can behave differently, depending on the configuration that was provided to it when it was instantiated. The default configuration is suitable for many applications, for others customizing the configuration can enable new features.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; 서비스를 인스턴스화되었을 때 제공 한 구성에 따라 다르게 동작 할 수 있습니다. 기본 구성은 많은 응용 프로그램에 적합하며 다른 사용자 지정 구성은 새로운 기능을 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1273172a4500d8d59c8a6787804ebe07e03ca23a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service is not able to function properly if the current URL is outside the URL given as the base href. This can have subtle confusing consequences...</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; 서비스는 현재 URL은 기본 href로 주어진 URL이 밖에 제대로 경우 기능 할 수 없습니다. 이것은 미묘한 혼란을 초래할 수 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="a111a55f88592010648b78ca18b5cbbe04a7fd2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$location&lt;/code&gt; service parses the URL in the browser address bar (based on &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt;&lt;code&gt;window.location&lt;/code&gt;&lt;/a&gt;) and makes the URL available to your application. Changes to the URL in the address bar are reflected into the &lt;code&gt;$location&lt;/code&gt; service and changes to &lt;code&gt;$location&lt;/code&gt; are reflected into the browser address bar.</source>
          <target state="translated">&lt;code&gt;$location&lt;/code&gt; 서비스 (기반으로 브라우저의 주소 표시 줄에 URL 구문 분석 &lt;a href=&quot;https://developer.mozilla.org/en/window.location&quot;&gt; &lt;code&gt;window.location&lt;/code&gt; &lt;/a&gt; )하고 응용 프로그램에 사용할 수있는 URL을합니다. 주소 표시 줄에 URL을 변경하면에 반영됩니다 &lt;code&gt;$location&lt;/code&gt; 서비스로 변경 &lt;code&gt;$location&lt;/code&gt; 브라우저의 주소 표시 줄에 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="f3824a56f15e043a5ac5fc5b11da473e44a6bfcc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$parent&lt;/code&gt; scope hierarchy will look like this:</source>
          <target state="translated">&lt;code&gt;$parent&lt;/code&gt; 범위 계층 구조는 다음과 같이 표시됩니다</target>
        </trans-unit>
        <trans-unit id="74392e585ce418fdbe387023a7bc76feedbc98eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$render()&lt;/code&gt; method is invoked in the following situations:</source>
          <target state="translated">&lt;code&gt;$render()&lt;/code&gt; 메소드는 다음과 같은 경우에 호출된다 :</target>
        </trans-unit>
        <trans-unit id="748473c254c46349d9420cbf71f6c951b161be97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$rollbackViewValue()&lt;/code&gt; method should be called before programmatically changing the model of an input which may have such events pending. This is important in order to make sure that the input field will be updated with the new model value and any pending operations are cancelled.</source>
          <target state="translated">&lt;code&gt;$rollbackViewValue()&lt;/code&gt; 메소드는 프로그램 대기 등의 이벤트를 가질 수있는 입력의 모델을 변경하기 전에 호출해야합니다. 입력 필드가 새 모델 값으로 업데이트되고 보류중인 작업이 취소되도록하는 것이 중요합니다.</target>
        </trans-unit>
        <trans-unit id="00575ac4870897520049b0cd931bb9fc73db40f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; service is typically used in conjunction with the &lt;a href=&quot;../directive/ngview&quot;&gt;&lt;code&gt;ngView&lt;/code&gt;&lt;/a&gt; directive and the &lt;a href=&quot;%24routeparams&quot;&gt;&lt;code&gt;$routeParams&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; 서비스는 일반적으로 함께 사용됩니다 &lt;a href=&quot;../directive/ngview&quot;&gt; &lt;code&gt;ngView&lt;/code&gt; 의&lt;/a&gt; 지시와 &lt;a href=&quot;%24routeparams&quot;&gt; &lt;code&gt;$routeParams&lt;/code&gt; &lt;/a&gt; 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="fee32557765392ce5aee69704d74ba53c1edb4c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$routeParams&lt;/code&gt; service allows you to retrieve the current set of route parameters.</source>
          <target state="translated">&lt;code&gt;$routeParams&lt;/code&gt; 서비스는 경로 매개 변수의 현재 설정을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="249f28ebcdfc9fc97bfd4fe0abe8f8ef006036c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; allows one to get/set the &lt;code&gt;trustedResourceUrlList&lt;/code&gt; and &lt;code&gt;bannedResourceUrlList&lt;/code&gt; used to ensure that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all places that use the &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context). See &lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/a&gt; and &lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/a&gt;,</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 허용 하나 얻을 / 설정된 &lt;code&gt;trustedResourceUrlList&lt;/code&gt; 및 &lt;code&gt;bannedResourceUrlList&lt;/code&gt; 는 AngularJS와 템플릿 및 기타 스크립트 실행 URL을 소싱에 사용되는 URL을합니다 (사용하는 모든 장소에 안전하다는 것을 보장하기 위해 사용 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 문맥을). &lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.trustedResourceUrlList&lt;/a&gt; 및 &lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.bannedResourceUrlList를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8781071a65d92453570f44077b23cbc8a7036841" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; allows one to get/set the whitelists and blacklists used to ensure that the URLs used for sourcing AngularJS templates and other script-running URLs are safe (all places that use the &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context). See &lt;a href=&quot;%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; and &lt;a href=&quot;%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/a&gt;,</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 허용 하나 얻을 / AngularJS와 템플릿 및 기타 스크립트 실행 URL을 소싱에 사용되는 URL을합니다 (사용하는 모든 장소에 안전하다는 것을 보장하기 위해 사용 화이트리스트와 블랙리스트 설정 &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 문맥을). &lt;a href=&quot;%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; 및 &lt;a href=&quot;%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider.resourceUrlBlacklist를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cb7f040cc4a7a870371a7f21b9d9290406c26e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; provider allows developers to configure the &lt;a href=&quot;../service/%24scedelegate&quot;&gt;$sceDelegate service&lt;/a&gt;, used as a delegate for &lt;a href=&quot;../service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 제공자는 개발자가 구성 할 수 있습니다 &lt;a href=&quot;../service/%24scedelegate&quot;&gt;$의 sceDelegate 서비스&lt;/a&gt; 를위한 대리인으로 사용, &lt;a href=&quot;../service/%24sce&quot;&gt;엄격한 상황 이스케이프 (SCE)를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2828ee5c9feb24539f91bb197e1ea8986016182b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$sceDelegateProvider&lt;/code&gt; provider allows developers to configure the &lt;a href=&quot;service/%24scedelegate&quot;&gt;$sceDelegate service&lt;/a&gt;, used as a delegate for &lt;a href=&quot;service/%24sce&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegateProvider&lt;/code&gt; 제공자는 개발자가 구성 할 수 있습니다 &lt;a href=&quot;service/%24scedelegate&quot;&gt;$의 sceDelegate 서비스&lt;/a&gt; 를위한 대리인으로 사용, &lt;a href=&quot;service/%24sce&quot;&gt;엄격한 상황 이스케이프 (SCE)를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e445a092071434cfc79d2388fc50b3e9f36f160c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$swipe&lt;/code&gt; service is a service that abstracts the messier details of hold-and-drag swipe behavior, to make implementing swipe-related directives more convenient.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; 서비스를 구현 슬쩍 관련 지침을보다 편리하게, 홀드 및 드래그 슬쩍 행동의 메시에 세부 사항을 추상화하는 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="f91a72fa68c6440c52aac8a9f497ac80aeed6564" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$swipe&lt;/code&gt; service is an object with a single method: &lt;code&gt;bind&lt;/code&gt;. &lt;code&gt;bind&lt;/code&gt; takes an element which is to be watched for swipes, and an object with four handler functions. See the documentation for &lt;code&gt;bind&lt;/code&gt; below.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; 서비스는 하나의 메소드를 가진 객체입니다 &lt;code&gt;bind&lt;/code&gt; . &lt;code&gt;bind&lt;/code&gt; 는 스 와이프를 감시 할 요소와 4 개의 핸들러 함수가있는 객체를 사용합니다. 아래 &lt;code&gt;bind&lt;/code&gt; 대한 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b5319952640d19c5acb759330531d620f329eabf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$templateRequest&lt;/code&gt; service runs security checks then downloads the provided template using &lt;code&gt;$http&lt;/code&gt; and, upon success, stores the contents inside of &lt;code&gt;$templateCache&lt;/code&gt;. If the HTTP request fails or the response data of the HTTP request is empty, a &lt;code&gt;$compile&lt;/code&gt; error will be thrown (the exception can be thwarted by setting the 2nd parameter of the function to true). Note that the contents of &lt;code&gt;$templateCache&lt;/code&gt; are trusted, so the call to &lt;code&gt;$sce.getTrustedUrl(tpl)&lt;/code&gt; is omitted when &lt;code&gt;tpl&lt;/code&gt; is of type string and &lt;code&gt;$templateCache&lt;/code&gt; has the matching entry.</source>
          <target state="translated">&lt;code&gt;$templateRequest&lt;/code&gt; 서비스는 보안 검사를 실행하여 제공된 템플릿 다운로드 &lt;code&gt;$http&lt;/code&gt; 내부에 성공, 저장 내용에 따라, 그리고 &lt;code&gt;$templateCache&lt;/code&gt; . HTTP 요청이 실패하거나 HTTP 요청의 응답 데이터가 비어 있으면 &lt;code&gt;$compile&lt;/code&gt; 오류가 발생합니다 (함수의 두 번째 매개 변수를 true로 설정하여 예외를 막을 수 있음). &lt;code&gt;$templateCache&lt;/code&gt; 의 내용 은 신뢰할 수 있으므로 &lt;code&gt;tpl&lt;/code&gt; 이 string 유형이고 &lt;code&gt;$templateCache&lt;/code&gt; 에 일치하는 항목이 있으면 &lt;code&gt;$sce.getTrustedUrl(tpl)&lt;/code&gt; 대한 호출 이 생략됩니다 .</target>
        </trans-unit>
        <trans-unit id="712bd1e1acaf74fe7cbf90ecba87fe6face76244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$watchCollection()&lt;/code&gt; method only does a shallow comparison, meaning that changing properties deeper than the first level of the object (or only changing the properties of an item in the collection if it's an array) will still not trigger a re-rendering of the model.</source>
          <target state="translated">&lt;code&gt;$watchCollection()&lt;/code&gt; 메소드는 객체의 첫 번째 수준보다 더 깊은 속성을 변경 (또는 단지 그것을 배열의 경우 컬렉션에서 항목의 속성을 변경하면) 여전히의 재 렌더링을 트리거하지 않습니다 것을 의미 얕은 비교를 수행 모델.</target>
        </trans-unit>
        <trans-unit id="8fa620e1ea873250c0c6536085a6a95fbd5119d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChildController&lt;/code&gt; scope, which inherits the &lt;code&gt;timeOfDay&lt;/code&gt; property but overrides (shadows) the &lt;code&gt;name&lt;/code&gt; property from the previous scope</source>
          <target state="translated">&lt;code&gt;ChildController&lt;/code&gt; 의 상속 범위, &lt;code&gt;timeOfDay&lt;/code&gt; 의 특성 만 오버라이드 (그림자)를 &lt;code&gt;name&lt;/code&gt; 이전 범위에서 속성을</target>
        </trans-unit>
        <trans-unit id="232bc31c989247be45c7d4ec698e7a3006c2d43e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GrandChildController&lt;/code&gt; scope, which overrides (shadows) both the &lt;code&gt;timeOfDay&lt;/code&gt; property defined in &lt;code&gt;MainController&lt;/code&gt; and the &lt;code&gt;name&lt;/code&gt; property defined in &lt;code&gt;ChildController&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;GrandChildController&lt;/code&gt; 의 범위 재 (그림자) 모두 &lt;code&gt;timeOfDay&lt;/code&gt; 의 정의 속성 &lt;code&gt;MainController&lt;/code&gt; 및 &lt;code&gt;name&lt;/code&gt; 에 정의 된 속성 &lt;code&gt;ChildController&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a1fce0d1067b76b0bfc8b85d495db07116c8dec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MainController&lt;/code&gt; scope, which contains &lt;code&gt;timeOfDay&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties</source>
          <target state="translated">&lt;code&gt;timeOfDay&lt;/code&gt; 및 &lt;code&gt;name&lt;/code&gt; 속성 이 포함 된 &lt;code&gt;MainController&lt;/code&gt; 범위</target>
        </trans-unit>
        <trans-unit id="b82674350733edf566c9e2b672ef64af568aedc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;angular.module&lt;/code&gt; is a global place for creating, registering and retrieving AngularJS modules. All modules (AngularJS core or 3rd party) that should be available to an application must be registered using this mechanism.</source>
          <target state="translated">&lt;code&gt;angular.module&lt;/code&gt; 는 AngularJS와 모듈을 생성, 등록 및 검색을위한 글로벌 장소입니다. 애플리케이션에 사용 가능한 모든 모듈 (AngularJS 코어 또는 타사)은이 메커니즘을 사용하여 등록해야합니다.</target>
        </trans-unit>
        <trans-unit id="5dd144d30c65ccfb0a381886f3f857204784293d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;batchLog&lt;/code&gt; service depends on the built-in &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt;&lt;code&gt;$interval&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ng/service/%24log&quot;&gt;&lt;code&gt;$log&lt;/code&gt;&lt;/a&gt; services.</source>
          <target state="translated">&lt;code&gt;batchLog&lt;/code&gt; 의 서비스는 내장에 따라 &lt;a href=&quot;../api/ng/service/%24interval&quot;&gt; &lt;code&gt;$interval&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ng/service/%24log&quot;&gt; &lt;code&gt;$log&lt;/code&gt; &lt;/a&gt; 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9acc1d82e771c84e56a2cc9cc13cac46b6160703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;callback&lt;/code&gt; function should be of the form &lt;code&gt;function(method, url, data, headers, params)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 함수 형식이어야 &lt;code&gt;function(method, url, data, headers, params)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="893ff87e78144aa5e991cba13601bae634bf2bea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classNameFilter&lt;/code&gt; approach generally gives a big speed boost compared to other strategies, because the matching is done before other animation disabling strategies are checked. However, that also means it is not possible to override class name matching with the two following strategies. It's of course still possible to enable / disable animations by changing an element's class name at runtime.</source>
          <target state="translated">&lt;code&gt;classNameFilter&lt;/code&gt; 의 다른 애니메이션을 사용하지 않도록 전략을 선택하기 전에 매칭이 완료되기 때문에 접근 방법은 일반적으로 다른 전략에 비해 큰 속도 향상을 제공합니다. 그러나 이는 또한 다음 두 가지 전략으로 클래스 이름 일치를 대체 할 수 없음을 의미합니다. 물론 런타임에 요소의 클래스 이름을 변경하여 애니메이션을 활성화 / 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7b52fad4bbb0c12479cdb97dacb16c5cb6f4aa8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;collection&lt;/code&gt; can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray, String, etc).</source>
          <target state="translated">&lt;code&gt;collection&lt;/code&gt; 될 수있는 어레이 또는 어레이와 같은 객체 (예 NodeList를 JQuery와 오브젝트하는 TypedArray 문자열 등).</target>
        </trans-unit>
        <trans-unit id="b98e8dbeb02a19a783fedcd70d85dd392c902b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;customFilter&lt;/code&gt; approach generally gives a big speed boost compared to other strategies, because the matching is done before other animation disabling strategies are checked.</source>
          <target state="translated">&lt;code&gt;customFilter&lt;/code&gt; 다른 애니메이션을 사용하지 않도록 전략을 선택하기 전에 매칭이 완료되기 때문에 접근 방법은 일반적으로 다른 전략에 비해 큰 속도 향상을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c80e31bf8e54fc961845669be04ec6fa510022fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; attribute is only valid for certain elements such as &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly disable custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;taco-tab&amp;gt;&lt;/code&gt;, using ngAria with &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;ngDisabled&lt;/a&gt; will also add &lt;code&gt;aria-disabled&lt;/code&gt;. This tells assistive technologies when a non-native input is disabled, helping custom controls to be more accessible.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; 특성과 같은 특정 요소에 대해서만 유효 &lt;code&gt;button&lt;/code&gt; , &lt;code&gt;input&lt;/code&gt; 및 &lt;code&gt;textarea&lt;/code&gt; . &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;taco-tab&amp;gt;&lt;/code&gt; 과 같은 사용자 지정 요소 지시문을 제대로 비활성화하려면 ngDisable과 함께 &lt;a href=&quot;../api/ng/directive/ngdisabled&quot;&gt;ngAria&lt;/a&gt; 를 사용 하면 &lt;code&gt;aria-disabled&lt;/code&gt; 가 추가됩니다 . 이는 비원시 입력이 비활성화 될 때 보조 기술을 알려주므로 사용자 지정 컨트롤에보다 쉽게 ​​액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73a17df2bf22fb6c2ce21c05fcc1b44e34b6fe00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorMessage.type&lt;/code&gt; expression can be a string value or it can be an array so that multiple errors can be associated with a single error message:</source>
          <target state="translated">&lt;code&gt;errorMessage.type&lt;/code&gt; 의 표현식은 스트링 값이 될 수 있거나 그 여러 에러가 단일 에러 메시지와 연관 될 수 있도록 배열 될 수있다 :</target>
        </trans-unit>
        <trans-unit id="3a084d6f8e7f8661441da4af1ad1123d1cab079d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;expression&lt;/code&gt; can be a single predicate, or a list of predicates each serving as a tie-breaker for the preceding one. The &lt;code&gt;expression&lt;/code&gt; is evaluated against each item and the output is used for comparing with other items.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 단일 술어 또는 전술 한위한 구분자로서 각 조건의 목록 일 수있다. &lt;code&gt;expression&lt;/code&gt; 각각의 항목에 대해 평가하고, 출력은 다른 항목과 비교하기 위해 사용된다.</target>
        </trans-unit>
        <trans-unit id="4827e6198b9fbd54046fee18d3735c7ce7869d32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;function&lt;/code&gt; returned by the filter</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 는 필터에 의해 반환</target>
        </trans-unit>
        <trans-unit id="b31dfae45c6272a242eb94f18bc49a0cd37a7b29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called only when the value from the current &lt;code&gt;watchExpression&lt;/code&gt; and the previous call to &lt;code&gt;watchExpression&lt;/code&gt; are not equal (with the exception of the initial run, see below). Inequality is determined according to reference inequality, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;strict comparison&lt;/a&gt; via the &lt;code&gt;!==&lt;/code&gt; Javascript operator, unless &lt;code&gt;objectEquality == true&lt;/code&gt; (see next point)</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 현재의 값에만 호출 &lt;code&gt;watchExpression&lt;/code&gt; 와의 이전 호출 &lt;code&gt;watchExpression&lt;/code&gt; 가 동일하지 않다 (초기 실행 제외한 아래 참조). &lt;code&gt;objectEquality == true&lt;/code&gt; 아닌 한 부등식은 참조 부등식, &lt;code&gt;!==&lt;/code&gt; Javascript 연산자 를 통한 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators&quot;&gt;엄격한 비교&lt;/a&gt; 에 따라 결정됩니다 (다음 지점 참조)</target>
        </trans-unit>
        <trans-unit id="8807537fbb401dd1e629d897344c84de2f17464f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called whenever any expression in the &lt;code&gt;watchExpressions&lt;/code&gt; array changes.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 호출 될 때마다 어떤 식 &lt;code&gt;watchExpressions&lt;/code&gt; 의 배열 변화.</target>
        </trans-unit>
        <trans-unit id="0b25c0075e8777fbd279f21bd0bf438be12f4f71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; is called whenever anything within the &lt;code&gt;obj&lt;/code&gt; has changed. Examples include adding, removing, and moving items belonging to an object or array.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 내에서 아무것도 할 때마다이라고 &lt;code&gt;obj&lt;/code&gt; 가 변경되었습니다. 개체 또는 배열에 속하는 항목을 추가, 제거 및 이동하는 것이 그 예입니다.</target>
        </trans-unit>
        <trans-unit id="3707cb673ad1f5c4676860cc0d76731209d56e8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locals&lt;/code&gt; will be assigned to the route scope's &lt;code&gt;$resolve&lt;/code&gt; property. You can override the property name, using &lt;code&gt;resolveAs&lt;/code&gt; in the route definition. See &lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt; for more info.</source>
          <target state="translated">&lt;code&gt;locals&lt;/code&gt; 경로 범위의 할당됩니다 &lt;code&gt;$resolve&lt;/code&gt; 속성입니다. 경로 정의에서 &lt;code&gt;resolveAs&lt;/code&gt; 를 사용하여 속성 이름을 재정의 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$ routeProvider&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2de812b5c2a400526a9f2d7e6d5c07f7a7a6b8b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;myField&lt;/code&gt; field is a required input of type &lt;code&gt;email&lt;/code&gt; with a maximum length of 15 characters.</source>
          <target state="translated">&lt;code&gt;myField&lt;/code&gt; 의 필드 타입의 필요한 입력 된 &lt;code&gt;email&lt;/code&gt; 15 개 문자의 최대 길이.</target>
        </trans-unit>
        <trans-unit id="df09b75bb835a6f8dbfc3b5c620a1f2831ad4c30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;myPane&lt;/code&gt; directive has a &lt;code&gt;require&lt;/code&gt; option with value &lt;code&gt;^^myTabs&lt;/code&gt;. When a directive uses this option, &lt;code&gt;$compile&lt;/code&gt; will throw an error unless the specified controller is found. The &lt;code&gt;^^&lt;/code&gt; prefix means that this directive searches for the controller on its parents. (A &lt;code&gt;^&lt;/code&gt; prefix would make the directive look for the controller on its own element or its parents; without any prefix, the directive would look on its own element only.)</source>
          <target state="translated">&lt;code&gt;myPane&lt;/code&gt; 의 지시어는이이 &lt;code&gt;require&lt;/code&gt; 값 옵션 &lt;code&gt;^^myTabs&lt;/code&gt; . 지시문이이 옵션을 사용하면 , 지정된 제어기를 찾지 못하면 &lt;code&gt;$compile&lt;/code&gt; 은 오류를 발생시킵니다. &lt;code&gt;^^&lt;/code&gt; 의 접두사 수단 부모의 컨트롤러에 대해이 지침 검색이. ( &lt;code&gt;^&lt;/code&gt; 접두어는 지시문이 자체 요소 또는 상위에서 제어기를 찾도록합니다. 접두어가 없으면 지시문은 자체 요소 만 찾습니다.)</target>
        </trans-unit>
        <trans-unit id="5f266c73961bf941532ed2e38f387525a710231e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newCollection&lt;/code&gt; object is the newly modified data obtained from the &lt;code&gt;obj&lt;/code&gt; expression</source>
          <target state="translated">&lt;code&gt;newCollection&lt;/code&gt; 의 개체로부터 수득 된 새로 수정 된 데이터이다 &lt;code&gt;obj&lt;/code&gt; 식</target>
        </trans-unit>
        <trans-unit id="8256d15e8434b47b4f6b90d7e29c8ddf53567463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newState&lt;/code&gt; and &lt;code&gt;oldState&lt;/code&gt; parameters may be defined only in HTML5 mode and when the browser supports the HTML5 History API.</source>
          <target state="translated">&lt;code&gt;newState&lt;/code&gt; 및 &lt;code&gt;oldState&lt;/code&gt; 브라우저가 HTML5 역사의 API를 지원하고 때 매개 변수 만 HTML5 모드로 정의 할 수있다.</target>
        </trans-unit>
        <trans-unit id="ff9e70b2fe50b302f4f792c8e818eff77a6b534d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ng-controller&lt;/code&gt; directive is used to (implicitly) create a scope for our template, and the scope is augmented (managed) by the &lt;code&gt;SpicyController&lt;/code&gt; Controller.</source>
          <target state="translated">&lt;code&gt;ng-controller&lt;/code&gt; 지시자는 (암시 적으로) 우리 템플릿의 범위를 생성하는 데 사용되며, 상기 범위에 의해 증대 (관리)되는 &lt;code&gt;SpicyController&lt;/code&gt; 컨트롤러.</target>
        </trans-unit>
        <trans-unit id="e032bbd650a410d166e41a9966e6526f7d12c83e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAnimate&lt;/code&gt; module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via callback hooks. Animations are not enabled by default, however, by including &lt;code&gt;ngAnimate&lt;/code&gt; the animation hooks are enabled for an AngularJS app.</source>
          <target state="translated">&lt;code&gt;ngAnimate&lt;/code&gt; 의 모듈 콜백 후크를 통해 CSS 기반의 애니메이션 (키 프레임 및 전환)에 대한 지원뿐만 아니라 자바 스크립트 기반 애니메이션을 제공한다. 애니메이션은 기본적으로 활성화되어 있지 않지만 &lt;code&gt;ngAnimate&lt;/code&gt; 를 포함 하면 AngularJS 앱에 애니메이션 후크가 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="e61f4e26cb454ca0b7dbd192ab2951d7e905b82e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngAria&lt;/code&gt; module provides support for common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIA&lt;/abbr&gt;&lt;/a&gt; attributes that convey state or semantic information about the application for users of assistive technologies, such as screen readers.</source>
          <target state="translated">&lt;code&gt;ngAria&lt;/code&gt; 의 모듈은 일반적인 지원 제공 &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;&lt;abbr&gt;ARIA의&lt;/abbr&gt;&lt;/a&gt; 화면 판독기와 같은 보조 기술, 사용자의 응용 프로그램에 대해 주 또는 의미 정보를 전달 특성을.</target>
        </trans-unit>
        <trans-unit id="a6ff906752a266b796309bea388504a040cbe49c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngBind&lt;/code&gt; attribute tells AngularJS to replace the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes.</source>
          <target state="translated">&lt;code&gt;ngBind&lt;/code&gt; 의 속성은 주어진 식의 값으로 지정된 HTML 요소의 텍스트 내용을 대체하고, 텍스트의 콘텐츠를 업데이 트 AngularJS와를 말할 때 그 표현 값이 변경.</target>
        </trans-unit>
        <trans-unit id="4b045de9b1cc381e1d099c085b650a6eae4bee16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngBindTemplate&lt;/code&gt; directive specifies that the element text content should be replaced with the interpolation of the template in the &lt;code&gt;ngBindTemplate&lt;/code&gt; attribute. Unlike &lt;code&gt;ngBind&lt;/code&gt;, the &lt;code&gt;ngBindTemplate&lt;/code&gt; can contain multiple &lt;code&gt;{{&lt;/code&gt;&lt;code&gt;}}&lt;/code&gt; expressions. This directive is needed since some HTML elements (such as TITLE and OPTION) cannot contain SPAN elements.</source>
          <target state="translated">&lt;code&gt;ngBindTemplate&lt;/code&gt; 의 소자 텍스트 콘텐츠가있는 템플릿의 보간으로 대체되어야한다는 지시자 지정 &lt;code&gt;ngBindTemplate&lt;/code&gt; 의 속성. 달리 &lt;code&gt;ngBind&lt;/code&gt; 의 &lt;code&gt;ngBindTemplate&lt;/code&gt; 이 여러 개 포함 할 수 있습니다 &lt;code&gt;{{&lt;/code&gt; &lt;code&gt;}}&lt;/code&gt; 표현. 이 지시문은 일부 HTML 요소 (예 : TITLE 및 OPTION)에 SPAN 요소를 포함 할 수 없으므로이 지시문이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="85c4b39c89de8c839e2ae1224d9251c645f48e7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngChange&lt;/code&gt; expression is only evaluated when a change in the input value causes a new value to be committed to the model.</source>
          <target state="translated">그만큼 &lt;code&gt;ngChange&lt;/code&gt; 의 입력 값의 변화가 모델에 전념 할 새로운 값이 발생 될 때 발현은 평가된다.</target>
        </trans-unit>
        <trans-unit id="cd2d9be630e6f5ed0b76a70a6f720d3aef6159f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClass&lt;/code&gt; directive allows you to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added.</source>
          <target state="translated">그만큼 &lt;code&gt;ngClass&lt;/code&gt; 의 지시문을 추가 할 모든 클래스를 나타내는 식을 데이터 바인딩하여 HTML 요소에 동적으로 설정 CSS 클래스로 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb143e7bbec7a51e2702ec0c2b659b98c872ffe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClassOdd&lt;/code&gt; and &lt;code&gt;ngClassEven&lt;/code&gt; directives work exactly as &lt;a href=&quot;directive/ngclass&quot;&gt;ngClass&lt;/a&gt;, except they work in conjunction with &lt;code&gt;ngRepeat&lt;/code&gt; and take effect only on odd (even) rows.</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; 및 &lt;code&gt;ngClassEven&lt;/code&gt; 지시는 정확히 작동 &lt;a href=&quot;directive/ngclass&quot;&gt;ngClass&lt;/a&gt; 그들과 함께 일을 제외하고, &lt;code&gt;ngRepeat&lt;/code&gt; 및 홀수 (짝수) 행에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2822cc93e2d22ae5e829a8ed84a58be4d8de9b90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngClassOdd&lt;/code&gt; and &lt;code&gt;ngClassEven&lt;/code&gt; directives work exactly as &lt;a href=&quot;ngclass&quot;&gt;ngClass&lt;/a&gt;, except they work in conjunction with &lt;code&gt;ngRepeat&lt;/code&gt; and take effect only on odd (even) rows.</source>
          <target state="translated">&lt;code&gt;ngClassOdd&lt;/code&gt; 및 &lt;code&gt;ngClassEven&lt;/code&gt; 지시는 정확히 작동 &lt;a href=&quot;ngclass&quot;&gt;ngClass&lt;/a&gt; 그들과 함께 일을 제외하고, &lt;code&gt;ngRepeat&lt;/code&gt; 및 홀수 (짝수) 행에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="4c4a87e8244d4148c2c2f2d43d94a91ad7be7087" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngCloak&lt;/code&gt; directive is used to prevent the AngularJS html template from being briefly displayed by the browser in its raw (uncompiled) form while your application is loading. Use this directive to avoid the undesirable flicker effect caused by the html template display.</source>
          <target state="translated">&lt;code&gt;ngCloak&lt;/code&gt; 지시어는 응용 프로그램이 로딩되는 동안 원시 (컴파일되지 않은) 형태로 브라우저에 표시 간략하게되는 것을 AngularJS와 HTML 템플릿을 방지하기 위해 사용된다. 이 지시문을 사용하여 html 템플릿 표시로 인한 원하지 않는 깜박임 효과를 피하십시오.</target>
        </trans-unit>
        <trans-unit id="b36a150166cdfa6a15928e9e8ef2e9326745f7ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngController&lt;/code&gt; directive attaches a controller class to the view. This is a key aspect of how angular supports the principles behind the Model-View-Controller design pattern.</source>
          <target state="translated">&lt;code&gt;ngController&lt;/code&gt; 지시문은보기에 컨트롤러 클래스를 첨부합니다. 이것은 각도가 Model-View-Controller 디자인 패턴의 기본 원리를 어떻게 지원하는지에 대한 주요 측면입니다.</target>
        </trans-unit>
        <trans-unit id="6bcc648246709c280b3b0364de36047cd3c0b90a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngCookies&lt;/code&gt; module provides a convenient wrapper for reading and writing browser cookies.</source>
          <target state="translated">&lt;code&gt;ngCookies&lt;/code&gt; 모듈은 읽기와 브라우저 쿠키를 작성하기위한 편리한 래퍼를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5a9c86f81072ed3420a40ead53377e5bc6d1bc76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngDblclick&lt;/code&gt; directive allows you to specify custom behavior on a dblclick event.</source>
          <target state="translated">&lt;code&gt;ngDblclick&lt;/code&gt; 의 지시어를 사용하면 dblclick 이벤트에 사용자 정의 동작을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eac48f1e893ad5864f090789b466b632767c4206" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngHide&lt;/code&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngHide&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;ngHide&lt;/code&gt; 받는 제공된 식에 기초하여 지정 보이거나 숨겨 지정된 HTML 요소 &lt;code&gt;ngHide&lt;/code&gt; 의 속성.</target>
        </trans-unit>
        <trans-unit id="d381776a806006bc86dcce569e5adc2ebd5f055c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngIf&lt;/code&gt; directive removes or recreates a portion of the DOM tree based on an {expression}. If the expression assigned to &lt;code&gt;ngIf&lt;/code&gt; evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; 지시자를 재생성 없애거나} 및 {식에 기초하여 DOM 트리의 일부. &lt;code&gt;ngIf&lt;/code&gt; 에 지정된 표현식 이 false 값으로 평가되면 요소가 DOM에서 제거되고, 그렇지 않으면 요소의 복제본이 DOM에 다시 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="a9d3c704979843b97982c647f1da581d30fd4d27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngInit&lt;/code&gt; directive allows you to evaluate an expression in the current scope.</source>
          <target state="translated">&lt;code&gt;ngInit&lt;/code&gt; 의 지시자는 현재 범위에서 식을 평가할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="417a61e212c49154942fb721510044da379c7254" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMaxlength&lt;/code&gt; attribute must be an expression, while the &lt;code&gt;maxlength&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngMaxlength&lt;/code&gt; 의 속성은 표현이어야합니다 동안 &lt;code&gt;maxlength&lt;/code&gt; 값을 보간한다.</target>
        </trans-unit>
        <trans-unit id="45c4265c4dbb1f2d586ef768e0851c8578c7667b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMessages&lt;/code&gt; directive allows keys in a key/value collection to be associated with a child element (or 'message') that will show or hide based on the truthiness of that key's value in the collection. A common use case for &lt;code&gt;ngMessages&lt;/code&gt; is to display error messages for inputs using the &lt;code&gt;$error&lt;/code&gt; object exposed by the &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; 의 지시어는 키 / 값 컬렉션에서 키 컬렉션에 해당 키의 값의 truthiness에 따라 표시하거나 숨길하는 자식 요소 (또는 '메시지')과 연관 될 수 있습니다. &lt;code&gt;ngMessages&lt;/code&gt; 의 일반적인 사용 사례 는 &lt;a href=&quot;ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; 지시문에 의해 노출 된 &lt;code&gt;$error&lt;/code&gt; 객체를 사용하여 입력에 대한 오류 메시지를 표시 하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0d18c34180a240483d53674cf68de91b9894484a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMessages&lt;/code&gt; module provides enhanced support for displaying messages within templates (typically within forms or when rendering message objects that return key/value data). Instead of relying on JavaScript code and/or complex ng-if statements within your form template to show and hide error messages specific to the state of an input field, the &lt;code&gt;ngMessages&lt;/code&gt; and &lt;code&gt;ngMessage&lt;/code&gt; directives are designed to handle the complexity, inheritance and priority sequencing based on the order of how the messages are defined in the template.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; 의 모듈 (일반적 형태 내 또는 메시지를 렌더링하는 것은 그 리턴 키 / 값 데이터 오브젝트들) 내의 메시지 템플릿을 표시하기위한 지원을 제공하는 향상된. 입력 필드의 상태와 관련된 오류 메시지를 표시하고 숨기려면 양식 서식 파일 내에서 JavaScript 코드 및 / 또는 복잡한 ng-if 문을 사용하는 대신 &lt;code&gt;ngMessages&lt;/code&gt; 및 &lt;code&gt;ngMessage&lt;/code&gt; 지시문은 복잡성, 상속 및 우선 순위 시퀀싱을 처리하도록 설계되었습니다. 메시지가 템플릿에 정의 된 순서대로</target>
        </trans-unit>
        <trans-unit id="b4f8fedc33954693b5bb572d1d7f500187e5e788" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMinlength&lt;/code&gt; value must be an expression, while the &lt;code&gt;minlength&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngMinlength&lt;/code&gt; 의 그동안의 값은 식이어야 &lt;code&gt;minlength&lt;/code&gt; 값을 보간한다.</target>
        </trans-unit>
        <trans-unit id="33dab09372104d4a4d45b7aa078905f409929cf1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMock&lt;/code&gt; module provides support to inject and mock AngularJS services into unit tests. In addition, ngMock also extends various core AngularJS services such that they can be inspected and controlled in a synchronous manner within test code.</source>
          <target state="translated">&lt;code&gt;ngMock&lt;/code&gt; 모듈은 단위 테스트에 주입 한 모의 AngularJS 및 서비스에 대한 지원을 제공한다. 또한 ngMock은 다양한 핵심 AngularJS 서비스를 확장하여 테스트 코드 내에서 동기식으로 검사 및 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1d1654b9cd04adec1909e895c88e508f9a0a9a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngMockE2E&lt;/code&gt; is an AngularJS module which contains mocks suitable for end-to-end testing. Currently there is only one mock present in this module - the &lt;a href=&quot;ngmocke2e/service/%24httpbackend&quot;&gt;e2e $httpBackend&lt;/a&gt; mock.</source>
          <target state="translated">&lt;code&gt;ngMockE2E&lt;/code&gt; 은 엔드 - 투 - 엔드 테스트에 적합한 모의 객체를 포함하는 AngularJS와 모듈이다. 현재이 모듈에는 하나의 모의가 있습니다 &lt;a href=&quot;ngmocke2e/service/%24httpbackend&quot;&gt;-e2e $ httpBackend&lt;/a&gt; 모의.</target>
        </trans-unit>
        <trans-unit id="a03456cf81ef1e81f30d53477f5db6541362dabe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModel&lt;/code&gt; directive binds an &lt;code&gt;input&lt;/code&gt;,&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; (or custom form control) to a property on the scope using &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;, which is created and exposed by this directive.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 의 지시어는 결합 &lt;code&gt;input&lt;/code&gt; , &lt;code&gt;select&lt;/code&gt; , &lt;code&gt;textarea&lt;/code&gt; 사용 범위의 속성 (또는 사용자 정의 형식 제어) &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt; 생성하고이 지시에 의해 노출된다.</target>
        </trans-unit>
        <trans-unit id="3452bf57ac43f5bb1c78e3470aa773a04375cfd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModel&lt;/code&gt; directive binds an &lt;code&gt;input&lt;/code&gt;,&lt;code&gt;select&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt; (or custom form control) to a property on the scope using &lt;a href=&quot;type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController&lt;/a&gt;, which is created and exposed by this directive.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 의 지시어는 결합 &lt;code&gt;input&lt;/code&gt; , &lt;code&gt;select&lt;/code&gt; , &lt;code&gt;textarea&lt;/code&gt; 사용 범위에 속성 (또는 사용자 정의 형식 제어) &lt;a href=&quot;type/ngmodel.ngmodelcontroller&quot;&gt;NgModelController을&lt;/a&gt; 생성하고이 지시에 의해 노출된다.</target>
        </trans-unit>
        <trans-unit id="b487d1121c7dae27fef086afefdf78374bec811f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModelOptions&lt;/code&gt; expression is only evaluated once when the directive is linked; it is not watched for changes. However, it is possible to override the options on a single &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; instance with &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt;&lt;code&gt;NgModelController#$overrideModelOptions()&lt;/code&gt;&lt;/a&gt;. See also the example for &lt;a href=&quot;ngmodeloptions#default-events-extra-triggers-and-catch-all-debounce-values.html&quot;&gt;Default events, extra triggers, and catch-all debounce values&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; 의 표현은 지시문이 링크 될 때 한 번 평가; 변경 사항을 감시하지 않습니다. 그러나 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt; &lt;code&gt;NgModelController#$overrideModelOptions()&lt;/code&gt; &lt;/a&gt; 로 단일 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt; 인스턴스 의 옵션을 재정의 할 수 있습니다 . &lt;a href=&quot;ngmodeloptions#default-events-extra-triggers-and-catch-all-debounce-values.html&quot;&gt;기본 이벤트, 추가 트리거 및 포괄 디 바운스 값에&lt;/a&gt; 대한 예제도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd5b88d74d5a86e48055f8cee80df84b803c4347" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngModelOptions&lt;/code&gt; settings are found by evaluating the value of the attribute directive as an AngularJS expression. This expression should evaluate to an object, whose properties contain the settings. For example: &lt;code&gt;&amp;lt;div ng-model-options=&quot;{ debounce: 100 }&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModelOptions&lt;/code&gt; 의 설정은 AngularJS와 같은 발현 특성 지시자의 값을 평가함으로써 발견된다. 이 표현식은 속성이 설정을 포함하는 객체로 평가되어야합니다. 예를 들면 다음과 같습니다. &lt;code&gt;&amp;lt;div ng-model-options=&quot;{ debounce: 100 }&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e4a18f3d8624d933a72990e8d9aace68d9a5fa17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngNonBindable&lt;/code&gt; directive tells AngularJS not to compile or bind the contents of the current DOM element, including directives on the element itself that have a lower priority than &lt;code&gt;ngNonBindable&lt;/code&gt;. This is useful if the element contains what appears to be AngularJS directives and bindings but which should be ignored by AngularJS. This could be the case if you have a site that displays snippets of code, for instance.</source>
          <target state="translated">&lt;code&gt;ngNonBindable&lt;/code&gt; 지시어는 컴파일하지 AngularJS와 지시 또는 바인드보다 낮은 우선 순위를 가지고있는 요소 자체에 대한 지침을 포함하여 현재 DOM 요소의 내용, &lt;code&gt;ngNonBindable&lt;/code&gt; 을 . 요소에 AngularJS 지시문 및 바인딩으로 표시되지만 AngularJS에서 무시해야하는 내용이 포함 된 경우에 유용합니다. 예를 들어 코드 스 니펫을 표시하는 사이트가있는 경우가 이에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="18a8b01c2ac198af1bf17bd98c83cf041280c3cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOn&lt;/code&gt; directive adds an event listener to a DOM element via &lt;a href=&quot;../function/angular.element&quot;&gt;angular.element().on()&lt;/a&gt;, and evaluates an expression when the event is fired. &lt;code&gt;ngOn&lt;/code&gt; allows adding listeners for arbitrary events by including the event name in the attribute, e.g. &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; executes the 'onDrop()' expression when the &lt;code&gt;drop&lt;/code&gt; event is fired.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; 의 지시자를 통해 DOM 요소에 이벤트 리스너를 추가 &lt;a href=&quot;../function/angular.element&quot;&gt;()에 (). angular.element&lt;/a&gt; 및 이벤트가 트리거 될 때 발현을 평가한다. &lt;code&gt;ngOn&lt;/code&gt; 을 사용하면 속성에 이벤트 이름을 포함시켜 임의의 이벤트에 대한 리스너를 추가 할 수 있습니다. 예를 들어 &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; 은 &lt;code&gt;drop&lt;/code&gt; 이벤트가 발생할 때 'onDrop ()'식을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="2138d9397e0192f72c874be961465bd1c28d35a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOn&lt;/code&gt; directive adds an event listener to a DOM element via &lt;a href=&quot;function/angular.element&quot;&gt;angular.element().on()&lt;/a&gt;, and evaluates an expression when the event is fired. &lt;code&gt;ngOn&lt;/code&gt; allows adding listeners for arbitrary events by including the event name in the attribute, e.g. &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; executes the 'onDrop()' expression when the &lt;code&gt;drop&lt;/code&gt; event is fired.</source>
          <target state="translated">&lt;code&gt;ngOn&lt;/code&gt; 의 지시자를 통해 DOM 요소에 이벤트 리스너를 추가 &lt;a href=&quot;function/angular.element&quot;&gt;()에 (). angular.element&lt;/a&gt; 및 이벤트가 트리거 될 때 발현을 평가한다. &lt;code&gt;ngOn&lt;/code&gt; 을 사용하면 속성에 이벤트 이름을 포함시켜 임의의 이벤트에 대한 리스너를 추가 할 수 있습니다. 예를 들어 &lt;code&gt;ng-on-drop=&quot;onDrop()&quot;&lt;/code&gt; 은 &lt;code&gt;drop&lt;/code&gt; 이벤트가 발생할 때 'onDrop ()'식을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="3a5a3a5904b2e8cda5702d2eb4603a6e9e1ab0ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngOptions&lt;/code&gt; attribute can be used to dynamically generate a list of &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements for the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element using the array or object obtained by evaluating the &lt;code&gt;ngOptions&lt;/code&gt; comprehension expression.</source>
          <target state="translated">&lt;code&gt;ngOptions&lt;/code&gt; 속성은 동적 목록 생성하는데 사용될 수있다 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 요소 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 수치화하여 얻은 배열 요소 또는 객체 사용 &lt;code&gt;ngOptions&lt;/code&gt; 이해 발현.</target>
        </trans-unit>
        <trans-unit id="edcab80c917b627233174b158849e232c488cd89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngParseExt&lt;/code&gt; module provides functionality to allow Unicode characters in identifiers inside AngularJS expressions.</source>
          <target state="translated">&lt;code&gt;ngParseExt&lt;/code&gt; 의 모듈은 AngularJS와 식 내부 식별자에서 유니 코드 문자를 허용하는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="09d3a0b1ee99482f4b3b7b520c3b0c94485099f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngPattern&lt;/code&gt; attribute must be an expression, while the &lt;code&gt;pattern&lt;/code&gt; value must be interpolated.</source>
          <target state="translated">&lt;code&gt;ngPattern&lt;/code&gt; 의 그동안 특성은, 식이어야 &lt;code&gt;pattern&lt;/code&gt; 값을 보간한다.</target>
        </trans-unit>
        <trans-unit id="271ae01d79e2590ed7016379f17a5f47d6f0272e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngProp&lt;/code&gt; directive binds an expression to a DOM element property. &lt;code&gt;ngProp&lt;/code&gt; allows writing to arbitrary properties by including the property name in the attribute, e.g. &lt;code&gt;ng-prop-value=&quot;'my value'&quot;&lt;/code&gt; binds 'my value' to the &lt;code&gt;value&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;ngProp&lt;/code&gt; 의 지시어는 DOM 요소 속성에 식을 결합한다. &lt;code&gt;ngProp&lt;/code&gt; 을 사용하면 속성에 속성 이름을 포함시켜 임의의 속성에 쓸 수 있습니다. 예를 들어 &lt;code&gt;ng-prop-value=&quot;'my value'&quot;&lt;/code&gt; 'my value'를 &lt;code&gt;value&lt;/code&gt; 속성에 바인딩 합니다.</target>
        </trans-unit>
        <trans-unit id="56078d890909a913d837393b28aca4870aaa743e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngRef&lt;/code&gt; attribute tells AngularJS to assign the controller of a component (or a directive) to the given property in the current scope. It is also possible to add the jqlite-wrapped DOM element to the scope.</source>
          <target state="translated">&lt;code&gt;ngRef&lt;/code&gt; 특성은 현재 범위에 지정된 속성에 구성 요소의 제어 (또는 지시)을 할당 AngularJS와 말한다. jqlite-wrapped DOM 요소를 범위에 추가 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ff4989bbff6fa7c231c2f0eb3505b944b90b0e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngRepeat&lt;/code&gt; directive instantiates a template once per item from a collection. Each template instance gets its own scope, where the given loop variable is set to the current collection item, and &lt;code&gt;$index&lt;/code&gt; is set to the item index or key.</source>
          <target state="translated">&lt;code&gt;ngRepeat&lt;/code&gt; 의 지시어는 컬렉션에서 항목 당 한 번 템플릿을 인스턴스화합니다. 각 템플릿 인스턴스는 자체 범위를 가져옵니다. 여기서 주어진 루프 변수는 현재 컬렉션 항목 으로 설정 되고 &lt;code&gt;$index&lt;/code&gt; 는 항목 인덱스 또는 키로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f3258a5d7b59d2f657f7fe17a611da1f014e37dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngResource&lt;/code&gt; module provides interaction support with RESTful services via the $resource service.</source>
          <target state="translated">&lt;code&gt;ngResource&lt;/code&gt; 의 모듈은 $ 자원 서비스를 통해 편안하고 서비스와 상호 작용을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9ddc195a90e2c72b0358a7cc99d02ccb7323a2b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngRoute&lt;/code&gt; module provides routing and deeplinking services and directives for AngularJS apps.</source>
          <target state="translated">&lt;code&gt;ngRoute&lt;/code&gt; 의 모듈은 라우팅 및 AngularJS와 애플 리케이션을위한 서비스 및 지침을 딥 링크 제공합니다.</target>
        </trans-unit>
        <trans-unit id="b3e208ecff40d20920929e835051dd884ba87ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngSanitize&lt;/code&gt; module provides functionality to sanitize HTML.</source>
          <target state="translated">&lt;code&gt;ngSanitize&lt;/code&gt; 모듈은 위생적으로 HTML에 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="52b3ba27765007bf524e878fcbc2019dfd26ae3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngShow&lt;/code&gt; directive shows or hides the given HTML element based on the expression provided to the &lt;code&gt;ngShow&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;ngShow&lt;/code&gt; 받는 제공된 식에 기초하여 지정 보이거나 숨겨 지정된 HTML 요소 &lt;code&gt;ngShow&lt;/code&gt; 의 속성.</target>
        </trans-unit>
        <trans-unit id="faf99d24631b3a829e4bcd7302c5c47d13b5ad16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngStyle&lt;/code&gt; directive allows you to set CSS style on an HTML element conditionally.</source>
          <target state="translated">&lt;code&gt;ngStyle&lt;/code&gt; 의 지시자는 조건부 HTML 요소에 CSS 스타일을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="100ff07ef6149d7ca57d5a58fc1db3c2ed44c1fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngSwitch&lt;/code&gt; directive is used to conditionally swap DOM structure on your template based on a scope expression. Elements within &lt;code&gt;ngSwitch&lt;/code&gt; but without &lt;code&gt;ngSwitchWhen&lt;/code&gt; or &lt;code&gt;ngSwitchDefault&lt;/code&gt; directives will be preserved at the location as specified in the template.</source>
          <target state="translated">&lt;code&gt;ngSwitch&lt;/code&gt; 의 지시어는 범위의 표현을 기반으로 템플릿을 조건부 스왑 DOM 구조에 사용됩니다. 내 요소 &lt;code&gt;ngSwitch&lt;/code&gt; 하지만없는 &lt;code&gt;ngSwitchWhen&lt;/code&gt; 또는 &lt;code&gt;ngSwitchDefault&lt;/code&gt; 템플릿에 지정된 지시어는 위치에 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="a891433d4f844a3439f6448464836003a6666e46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ngTouch&lt;/code&gt; module provides helpers for touch-enabled devices. The implementation is based on jQuery Mobile touch event handling (&lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jquerymobile.com&lt;/a&gt;). *</source>
          <target state="translated">&lt;code&gt;ngTouch&lt;/code&gt; 의 모듈은 터치 지원 장치를 헬퍼를 제공합니다. 구현은 jQuery Mobile 터치 이벤트 처리 ( &lt;a href=&quot;http://jquerymobile.com/&quot;&gt;jquerymobile.com&lt;/a&gt; )를 기반으로 합니다. *</target>
        </trans-unit>
        <trans-unit id="719edff275929380e8a63e3ec29b0aaffc381b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; collection is observed via standard $watch operation and is examined on every call to $digest() to see if any items have been added, removed, or moved.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 컬렉션 표준 $ 시계 작업을 통해 관찰하고 모든 항목이 추가, 삭제, 또는 이동되어 있는지 확인하기 위해 $ 다이제스트 ()에 대한 모든 호출에 조사된다.</target>
        </trans-unit>
        <trans-unit id="851c27c48ef1a184f216635c0032b8034ac64b06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt; returned by the service</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 또는 &lt;code&gt;function&lt;/code&gt; 서비스에 의해 반환</target>
        </trans-unit>
        <trans-unit id="78f03e71ba8da4c772e22f7cefb6a86de28fb156" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; attribute allows further customization of pluralized text, which can result in a better user experience. For example, instead of the message &quot;4 people are viewing this document&quot;, you might display &quot;John, Kate and 2 others are viewing this document&quot;. The offset attribute allows you to offset a number by any desired value. Let's take a look at an example:</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 속성은 더 나은 사용자 경험을 초래할 수 복수로 텍스트의 추가 지정을 할 수 있습니다. 예를 들어 &quot;4 명이이 문서를보고 있습니다&quot;라는 메시지 대신 &quot;John, Kate 및 2 명이이 문서를보고 있습니다&quot;라는 메시지가 표시 될 수 있습니다. 오프셋 속성을 사용하면 원하는 값으로 숫자를 오프셋 할 수 있습니다. 예를 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="3841cc9d8c6ce2f408224f3cae680aa991a2ad9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oldCollection&lt;/code&gt; object is a copy of the former collection data. Due to performance considerations, the&lt;code&gt;oldCollection&lt;/code&gt; value is computed only if the &lt;code&gt;listener&lt;/code&gt; function declares two or more arguments.</source>
          <target state="translated">&lt;code&gt;oldCollection&lt;/code&gt; 의 목적은 전자 수집 된 데이터의 사본이다. 성능 고려 사항으로 인해 &lt;code&gt;listener&lt;/code&gt; 함수가 둘 이상의 인수를 선언 한 경우에만 &lt;code&gt;oldCollection&lt;/code&gt; 값이 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="92de2adf4257cb98e99d7c66015a3a4463b7f324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params&lt;/code&gt; object in the &lt;strong&gt;callback&lt;/strong&gt; will now have properties with these keys, which hold the value of the corresponding &lt;strong&gt;group&lt;/strong&gt; in the &lt;strong&gt;regex&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; 에서 객체 &lt;strong&gt;콜백&lt;/strong&gt; 이제 해당 값 길게 이러한 키와 속성 것 &lt;strong&gt;기&lt;/strong&gt; 에 &lt;strong&gt;정규식&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c809664e3f03c3d8135c609d28867a41b149ee5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;required&lt;/code&gt; message will be displayed to the user since it appears before the &lt;code&gt;email&lt;/code&gt; message in the DOM. Once the user types a single character, the &lt;code&gt;required&lt;/code&gt; message will disappear (since the field now has a value) but the &lt;code&gt;email&lt;/code&gt; message will be visible because it is still applicable.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; 가 앞에 표시하기 때문에 메시지가 사용자에게 표시되는 &lt;code&gt;email&lt;/code&gt; 은 DOM의 메시지. 사용자가 단일 문자를 입력 하면 필드에 값이 있으므로 &lt;code&gt;required&lt;/code&gt; 메시지가 사라지지만 &lt;code&gt;email&lt;/code&gt; 메시지는 여전히 적용 가능하므로 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4185c522e4249b9336c8172126c02efcc1c08358" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restrict&lt;/code&gt; option is typically set to:</source>
          <target state="translated">&lt;code&gt;restrict&lt;/code&gt; 옵션은 일반적으로 설정됩니다 :</target>
        </trans-unit>
        <trans-unit id="a4a3705bd9ff2aae6d9842de77dd5be730d87c0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;routeTemplateMonitor&lt;/code&gt; service depends on the built-in &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; service and our custom &lt;code&gt;batchLog&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;routeTemplateMonitor&lt;/code&gt; 의 서비스는 내장에 따라 &lt;a href=&quot;../api/ngroute/service/%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt; 서비스와 우리의 사용자 정의 &lt;code&gt;batchLog&lt;/code&gt; 의 서비스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="afc148e7de524b6d85fc2a2af328dfe7cc13d5f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope()&lt;/code&gt; function is only available when &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt;&lt;code&gt;$compileProvider.debugInfoEnabled()&lt;/code&gt;&lt;/a&gt; is true (which is the default).</source>
          <target state="translated">&lt;code&gt;scope()&lt;/code&gt; 경우에만 사용할 수 있습니다 &lt;a href=&quot;../api/ng/provider/%24compileprovider#debugInfoEnabled.html&quot;&gt; &lt;code&gt;$compileProvider.debugInfoEnabled()&lt;/code&gt; &lt;/a&gt; (기본값) 사실이다.</target>
        </trans-unit>
        <trans-unit id="9fe9f3176578380f2a8892095126bf450cc2e55b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scope&lt;/code&gt; argument refers to the current scope.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 인수는 현재 범위를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="081d217fe995efb27d071685f735b72868a5a5e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; directive is used together with &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; to provide data-binding between the scope and the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; control (including setting default values). It also handles dynamic &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements, which can be added using the &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ngoptions&quot;&gt;&lt;code&gt;ngOptions&lt;/code&gt;&lt;/a&gt; directives.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 지시자와 함께 사용된다 &lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 데이터 바인딩 범위와 사이에 제공하는 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; (설정 기본값 포함)를 제어. 또한 &lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;ngoptions&quot;&gt; &lt;code&gt;ngOptions&lt;/code&gt; &lt;/a&gt; 지시문을 사용하여 추가 할 수있는 동적 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; 요소 도 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="df77fb9c95dda0960bb631ed0b0471c3c15bf962" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;step&lt;/code&gt; validation will not work correctly for very large numbers (e.g. 9999999999) due to Javascript's arithmetic limitations. If you need to handle large numbers, purpose-built libraries (e.g. &lt;a href=&quot;https://github.com/MikeMcl/big.js/&quot;&gt;https://github.com/MikeMcl/big.js/&lt;/a&gt;), can be included into AngularJS by &lt;a href=&quot;../../../guide/forms#modifying-built-in-validators.html&quot;&gt;overwriting the validators&lt;/a&gt; for &lt;code&gt;number&lt;/code&gt; and / or &lt;code&gt;step&lt;/code&gt;, or by &lt;a href=&quot;../../../guide/forms#custom-validation.html&quot;&gt;applying custom validators&lt;/a&gt; to an &lt;code&gt;input[text]&lt;/code&gt; element. The source for &lt;code&gt;input[number]&lt;/code&gt; type can be used as a starting point for both implementations.</source>
          <target state="translated">&lt;code&gt;step&lt;/code&gt; 검증은 매우 큰 숫자 때문에 자바 스크립트의 산술 제한 (9999999999를 예) 제대로 작동하지 않습니다. 많은 수의 특수 목적 라이브러리 (예 : &lt;a href=&quot;https://github.com/MikeMcl/big.js/&quot;&gt;https://github.com/MikeMcl/big.js/&lt;/a&gt; ) 를 처리해야하는 경우 &lt;code&gt;number&lt;/code&gt; 및 / 또는 &lt;code&gt;step&lt;/code&gt; 대한 &lt;a href=&quot;../../../guide/forms#modifying-built-in-validators.html&quot;&gt;유효성 검사기&lt;/a&gt; 를 덮어 쓰거나 &lt;a href=&quot;../../../guide/forms#custom-validation.html&quot;&gt;사용자 지정&lt;/a&gt; 을 적용 하여 AngularJS에 포함 할 수 있습니다. &lt;code&gt;input[text]&lt;/code&gt; 요소 에 대한 유효성 검사기 . &lt;code&gt;input[number]&lt;/code&gt; 유형 의 소스는 두 구현 모두의 시작점으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="764c088d4b58451c39c5d707cf0b855450c788f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this&lt;/code&gt; for the invoked method.</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 호출 된 방법.</target>
        </trans-unit>
        <trans-unit id="1f00eea4dd41ef348229b3babc12267733b6ae2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transclude&lt;/code&gt; option changes the way scopes are nested. It makes it so that the &lt;strong&gt;contents&lt;/strong&gt; of a transcluded directive have whatever scope is outside the directive, rather than whatever scope is on the inside. In doing so, it gives the contents access to the outside scope.</source>
          <target state="translated">&lt;code&gt;transclude&lt;/code&gt; 의 옵션은 범위가 중첩되는 방식을 변경합니다. 변환 된 지시문 의 &lt;strong&gt;내용&lt;/strong&gt; 이 내부에있는 범위가 아닌 지시문 외부에있는 범위를 갖도록합니다. 그렇게하면 내용에 외부 범위에 대한 액세스 권한이 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="0592776fbfd3e45c05d0a220d4166d8e78eef8e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;updateOn&lt;/code&gt; and &lt;code&gt;debounce&lt;/code&gt; properties allow you to specify a custom list of events that will trigger a model update and/or a debouncing delay so that the actual update only takes place when a timer expires; this timer will be reset after another change takes place.</source>
          <target state="translated">&lt;code&gt;updateOn&lt;/code&gt; 및 &lt;code&gt;debounce&lt;/code&gt; 속성은 모델 업데이트 및 / 또는 타이머가 만료 될 때 실제 업데이트는 발생 있도록하는 디 바운싱 지연 트리거 이벤트의 사용자 지정 목록을 지정할 수 있습니다; 이 타이머는 다른 변경이 발생한 후 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="865d012686bd8519148229c77d24cb9da639e749" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; that was originally provided to &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;value&lt;/code&gt; is the result of such a call. Otherwise, returns &lt;code&gt;value&lt;/code&gt; unchanged.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 원래 제공 한 &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 경우 &lt;code&gt;value&lt;/code&gt; 같은 호출의 결과입니다. 그렇지 않으면 &lt;code&gt;value&lt;/code&gt; 변경하지 않고 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="024e3409a1e0aafe121f0936f278bfdbd6b8eded" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watchExpression&lt;/code&gt; is called on every call to &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; and should return the value that will be watched. (&lt;code&gt;watchExpression&lt;/code&gt; should not change its value when executed multiple times with the same input because it may be executed multiple times by &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt;. That is, &lt;code&gt;watchExpression&lt;/code&gt; should be &lt;a href=&quot;http://en.wikipedia.org/wiki/Idempotence&quot;&gt;idempotent&lt;/a&gt;.)</source>
          <target state="translated">&lt;code&gt;watchExpression&lt;/code&gt; 는 호출 할 때마다 호출됩니다 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트 ()&lt;/a&gt; 및 감시 될 값을 반환해야합니다. ( &lt;code&gt;watchExpression&lt;/code&gt; 는 이 여러 번 수행 될 수 있기 때문에 동일한 입력으로 여러 번 수행 될 때 그 값을 변경해서는 안 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트 ()&lt;/a&gt; . 즉, &lt;code&gt;watchExpression&lt;/code&gt; 가 있어야 &lt;a href=&quot;http://en.wikipedia.org/wiki/Idempotence&quot;&gt;멱등&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c77aba6041c9b36ae3635fef59bf7730092422df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;when&lt;/code&gt; attribute specifies the mappings between plural categories and the actual string to be displayed. The value of the attribute should be a JSON object.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 속성은 복수의 카테고리와 실제 문자열 사이의 매핑을 표시하도록 지정한다. 속성 값은 JSON 객체 여야합니다.</target>
        </trans-unit>
        <trans-unit id="61e68df71711b6d4bd08875b5c5eb39417bd8af3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no &lt;code&gt;trustedResourceUrlList&lt;/code&gt; has been explicitly set is &lt;code&gt;['self']&lt;/code&gt; allowing only same origin resource requests.</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; 더 &lt;code&gt;trustedResourceUrlList&lt;/code&gt; 이 명시 적으로 설정되어 있지 않은입니다 &lt;code&gt;['self']&lt;/code&gt; 에만 동일한 기원 자원 요청을 허용.</target>
        </trans-unit>
        <trans-unit id="a141eee04cc9b2864dbdd7092accf079ffcc2135" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no trusted resource URL list has been explicitly set is the empty array (i.e. there is no &lt;code&gt;bannedResourceUrlList&lt;/code&gt;.)</source>
          <target state="translated">&lt;strong&gt;기본값&lt;/strong&gt; 더 신뢰할 수있는 자원의 URL 목록이 명시 적으로 설정되어 있지 않은 빈 배열입니다 (즉, 더 없다 &lt;code&gt;bannedResourceUrlList&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="29c7438c3e58ad6cfeb1ab043f1d56e6013584d8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no whitelist has been explicitly set is &lt;code&gt;['self']&lt;/code&gt; allowing only same origin resource requests.</source>
          <target state="translated">화이트리스트가 명시 적으로 설정되지 않은 경우 의 &lt;strong&gt;기본값&lt;/strong&gt; 은 &lt;code&gt;['self']&lt;/code&gt; 로 동일한 오리진 자원 요청 만 허용합니다.</target>
        </trans-unit>
        <trans-unit id="971a8e0fa1cf0babaa204065768792f07fb82390" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;default value&lt;/strong&gt; when no whitelist has been explicitly set is the empty array (i.e. there is no blacklist.)</source>
          <target state="translated">&lt;strong&gt;디폴트 값&lt;/strong&gt; 을 명시 적으로 설정되어있는 화이트리스트 결코 빈 배열 (즉, 더 블랙리스트가 없습니다.)</target>
        </trans-unit>
        <trans-unit id="30b3a9c87fe99e11ad5c482f252d8b2795c7d39c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;normalization&lt;/strong&gt; process is as follows:</source>
          <target state="translated">&lt;strong&gt;정규화&lt;/strong&gt; 다음과 같이 프로세스는 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="c92de0945f5d858e55599f74eae5a30cddcf871d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;scope option&lt;/strong&gt; is an object that contains a property for each isolate scope binding. In this case it has just one property:</source>
          <target state="translated">&lt;strong&gt;범위 옵션은&lt;/strong&gt; 바인딩 각각 분리 범위에 대한 속성을 포함하는 객체입니다. 이 경우 하나의 속성 만 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6b40743da77f9678b10414f875798e060c42324" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;service factory function&lt;/strong&gt; generates the single object or function that represents the service to the rest of the application. The object or function returned by the service is injected into any component (controller, service, filter or directive) that specifies a dependency on the service.</source>
          <target state="translated">&lt;strong&gt;서비스 공장 기능은&lt;/strong&gt; 응용 프로그램의 나머지 부분에 대한 서비스를 나타내는 단일 개체 또는 함수를 생성합니다. 서비스가 반환 한 객체 또는 함수는 서비스에 대한 종속성을 지정하는 모든 구성 요소 (컨트롤러, 서비스, 필터 또는 지시문)에 주입됩니다.</target>
        </trans-unit>
        <trans-unit id="5ceadcbdd30d6b737f519c6b13401595572885d1" translate="yes" xml:space="preserve">
          <source>The AngularJS approach produces a stable DOM. The DOM element instance bound to a model item instance does not change for the lifetime of the binding. This means that the code can get hold of the elements and register event handlers and know that the reference will not be destroyed by template data merge.</source>
          <target state="translated">AngularJS 접근 방식은 안정적인 DOM을 생성합니다. 모델 항목 인스턴스에 바인딩 된 DOM 요소 인스턴스는 바인딩 수명 동안 변경되지 않습니다. 즉, 코드가 요소를 보유하고 이벤트 핸들러를 등록 할 수 있으며 템플리트 데이터 병합으로 참조가 손상되지 않음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cda5f891e99782bb7f2b57b3956c0a05ebdb49e3" translate="yes" xml:space="preserve">
          <source>The AngularJS datetime filter uses the time zone settings of the browser. The same application will show different time information depending on the time zone settings of the computer that the application is running on. Neither JavaScript nor AngularJS currently supports displaying the date with a timezone specified by the developer.</source>
          <target state="translated">AngularJS 날짜 시간 필터는 브라우저의 시간대 설정을 사용합니다. 동일한 응용 프로그램은 응용 프로그램이 실행되는 컴퓨터의 시간대 설정에 따라 다른 시간 정보를 표시합니다. JavaScript 나 AngularJS는 현재 개발자가 지정한 시간대로 날짜 표시를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0ed09a1c05ea064927146d6b96bb2d8d5f52f6be" translate="yes" xml:space="preserve">
          <source>The AngularJS expression is followed by &lt;code&gt;, select,&lt;/code&gt; where the spaces are optional.</source>
          <target state="translated">AngularJS 표현식 다음에 는 공백이 선택적인 &lt;code&gt;, select,&lt;/code&gt; 가옵니다 .</target>
        </trans-unit>
        <trans-unit id="3e68d99150c2f319df83ed6c3b871e24960e46dc" translate="yes" xml:space="preserve">
          <source>The AngularJS injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested.</source>
          <target state="translated">AngularJS 인젝터 서브 시스템은 컴포넌트 작성, 종속성 해결 및 요청에 따라 다른 컴포넌트에 제공을 담당합니다.</target>
        </trans-unit>
        <trans-unit id="a093f7952b1838c4dd6aeda28ea5e1fc38030960" translate="yes" xml:space="preserve">
          <source>The Basics</source>
          <target state="translated">기초</target>
        </trans-unit>
        <trans-unit id="9d032f695a01d9cd7a1b6d3c12def6c50b9bd99f" translate="yes" xml:space="preserve">
          <source>The Component config object. (Note that, unlike the &lt;code&gt;.directive()&lt;/code&gt; method, this method does &lt;strong&gt;not&lt;/strong&gt; take a factory function.)</source>
          <target state="translated">구성 요소 구성 오브젝트. &lt;code&gt;.directive()&lt;/code&gt; 메소드 와 달리이 메소드는 팩토리 함수를 사용하지 &lt;strong&gt;않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="8bac82729a1c26fcbe3c4f5867ac3b7453bf9540" translate="yes" xml:space="preserve">
          <source>The Controller methods and properties are available in the template (for both the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element and its children).</source>
          <target state="translated">컨트롤러 메소드 및 속성은 템플릿에서 사용할 수 있습니다 ( &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 요소 및 해당 하위 요소 모두에 대해 ).</target>
        </trans-unit>
        <trans-unit id="af868017ccf0c187453928340ab193c6139324bb" translate="yes" xml:space="preserve">
          <source>The DOM property name.</source>
          <target state="translated">DOM 속성 이름</target>
        </trans-unit>
        <trans-unit id="d443ac9ac3502ca4aa895decc917e0fc27f2931f" translate="yes" xml:space="preserve">
          <source>The Deferred API</source>
          <target state="translated">지연된 API</target>
        </trans-unit>
        <trans-unit id="1e7c1b13eac086e0802b173f73532f7f37f2370c" translate="yes" xml:space="preserve">
          <source>The DemoController is instantiated via its constructor, every time the app needs an instance of DemoController (in our simple app it's just once). So unlike services, controllers are not singletons. The constructor is called with all the requested services, in our case the &lt;code&gt;clientId&lt;/code&gt; service.</source>
          <target state="translated">DemoController는 앱이 DemoController의 인스턴스를 필요로 할 때마다 생성자를 통해 인스턴스화됩니다 (단순한 앱에서는 단 한 번). 따라서 서비스와 달리 컨트롤러는 싱글 톤이 아닙니다. 생성자는 요청 된 모든 서비스 (이 경우 &lt;code&gt;clientId&lt;/code&gt; 서비스) 와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="b3fa2746de6d7246f13d0d1cffdff95010c93ad4" translate="yes" xml:space="preserve">
          <source>The Factory recipe constructs a new service using a function with zero or more arguments (these are dependencies on other services). The return value of this function is the service instance created by this recipe.</source>
          <target state="translated">팩토리 레시피는 0 개 이상의 인수가있는 함수를 사용하여 새 서비스를 구성합니다 (이것은 다른 서비스에 대한 종속성입니다). 이 함수의 리턴 값은이 레시피로 작성된 서비스 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="ac50a19bbd375fef86664e01f67fa8affc02aed1" translate="yes" xml:space="preserve">
          <source>The HTTP request template URL</source>
          <target state="translated">HTTP 요청 템플릿 URL</target>
        </trans-unit>
        <trans-unit id="ae5f1f8e1b81cdc0e20901352fa4e651557871f5" translate="yes" xml:space="preserve">
          <source>The JavaScript specification does not define the order of keys returned for an object, so AngularJS relies on the order returned by the browser when running &lt;code&gt;for key in myObj&lt;/code&gt;. Browsers generally follow the strategy of providing keys in the order in which they were defined, although there are exceptions when keys are deleted and reinstated. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes&quot;&gt;MDN page on &lt;code&gt;delete&lt;/code&gt; for more info&lt;/a&gt;.</source>
          <target state="translated">JavaScript 사양은 객체에 대해 반환되는 키 순서를 정의하지 않으므로 AngularJS &lt;code&gt;for key in myObj&lt;/code&gt; 실행할 때 브라우저가 반환 한 순서 를 따릅니다 . 키는 삭제되고 복원 될 때 예외가 있지만 브라우저는 일반적으로 정의 된 순서대로 키를 제공하는 전략을 따릅니다. 참고 항목 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes&quot;&gt;에 MDN 페이지 &lt;code&gt;delete&lt;/code&gt; 추가 정보를 원하시면&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3bf8ccad6f9791756a44c25e1221b6b0a5e4e10b" translate="yes" xml:space="preserve">
          <source>The Promise API</source>
          <target state="translated">약속 API</target>
        </trans-unit>
        <trans-unit id="c9652e0712d85f53b10f54c8b3d21746e8926806" translate="yes" xml:space="preserve">
          <source>The Provider recipe is syntactically defined as a custom type that implements a &lt;code&gt;$get&lt;/code&gt; method. This method is a factory function just like the one we use in the Factory recipe. In fact, if you define a Factory recipe, an empty Provider type with the &lt;code&gt;$get&lt;/code&gt; method set to your factory function is automatically created under the hood.</source>
          <target state="translated">제공자 레시피는 구문 적으로 &lt;code&gt;$get&lt;/code&gt; 메소드 를 구현하는 사용자 정의 유형으로 정의됩니다 . 이 방법은 팩토리 레시피에서 사용하는 것과 같은 팩토리 기능입니다. 실제로 팩토리 레시피를 정의하면 &lt;code&gt;$get&lt;/code&gt; 메소드가 팩토리 함수로 설정된 빈 제공자 유형 이 자동으로 후드 아래에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="5c03e42c5800d984cbbf4b29ceb9ec72c21a0335" translate="yes" xml:space="preserve">
          <source>The Provider recipe is the core recipe type and all the other ones are just syntactic sugar on it.</source>
          <target state="translated">공급자 레시피는 핵심 레시피 유형이며 다른 모든 유형은 구문 설탕입니다.</target>
        </trans-unit>
        <trans-unit id="a892a7bf5def9b0ea2286339b6f7a5da993546d3" translate="yes" xml:space="preserve">
          <source>The Resource instances and collections have these additional methods:</source>
          <target state="translated">자원 인스턴스 및 콜렉션에는 다음과 같은 추가 메소드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e66076755327d887f686ad69f837103a8b754a30" translate="yes" xml:space="preserve">
          <source>The Resource instances and collections have these additional properties:</source>
          <target state="translated">자원 인스턴스 및 콜렉션에는 다음과 같은 추가 특성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="34621a3a20f723701bf1858b04f4ad3fb921a112" translate="yes" xml:space="preserve">
          <source>The Resource instances have these additional methods:</source>
          <target state="translated">리소스 인스턴스에는 다음과 같은 추가 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a71937c0cf05c12db3a4b4bba8de6a062c6cf8f4" translate="yes" xml:space="preserve">
          <source>The Router holds reference to one or more of Outlets.</source>
          <target state="translated">라우터는 하나 이상의 콘센트에 대한 참조를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="87ff180e9a06b8bf6a17a8b51f3125e4d192aa91" translate="yes" xml:space="preserve">
          <source>The SCE context in which this result will be used.</source>
          <target state="translated">이 결과가 사용될 SCE 컨텍스트.</target>
        </trans-unit>
        <trans-unit id="823fe0827cbf252db7bc25081089c81fb8cdd103" translate="yes" xml:space="preserve">
          <source>The Safari browser throws a &lt;code&gt;RangeError&lt;/code&gt; instead of returning &lt;code&gt;null&lt;/code&gt; when it tries to stringify a &lt;code&gt;Date&lt;/code&gt; object with an invalid date value. The only reliable way to prevent this is to monkeypatch the &lt;code&gt;Date.prototype.toJSON&lt;/code&gt; method as follows:</source>
          <target state="translated">Safari 브라우저는 잘못된 날짜 값 으로 &lt;code&gt;Date&lt;/code&gt; 객체 를 문자열 화하려고 할 때 &lt;code&gt;null&lt;/code&gt; 을 반환 하는 대신 &lt;code&gt;RangeError&lt;/code&gt; 를 발생 시킵니다. 이를 막는 유일한 확실한 방법은 다음과 같이 &lt;code&gt;Date.prototype.toJSON&lt;/code&gt; 메소드 를 monkeypatch하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="afb43aa0cd18509de40731a13b780ba28edd09b0" translate="yes" xml:space="preserve">
          <source>The Service recipe produces a service just like the Value or Factory recipes, but it does so by &lt;em&gt;invoking a constructor with the &lt;code&gt;new&lt;/code&gt; operator&lt;/em&gt;. The constructor can take zero or more arguments, which represent dependencies needed by the instance of this type.</source>
          <target state="translated">서비스 레시피는 Value 또는 Factory 레시피와 같은 서비스를 생성하지만 &lt;em&gt; &lt;code&gt;new&lt;/code&gt; &lt;/em&gt;&lt;em&gt; 연산자 &lt;/em&gt;&lt;em&gt;로 생성자를 호출하여 수행&lt;/em&gt; 합니다. 생성자는이 유형의 인스턴스에 필요한 종속성을 나타내는 0 개 이상의 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25546288f27af1b214ed293ad490dde0ee7283f3" translate="yes" xml:space="preserve">
          <source>The Value recipe is very simple to write, but lacks some important features we often need when creating services. Let's now look at the Value recipe's more powerful sibling, the Factory. The Factory recipe adds the following abilities:</source>
          <target state="translated">Value 레시피는 작성이 매우 간단하지만 서비스를 생성 할 때 자주 필요한 몇 가지 중요한 기능이 없습니다. 이제 Value 레시피의 더 강력한 형제 인 팩토리를 살펴 보겠습니다. 팩토리 레시피는 다음과 같은 능력을 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="f208762d78ff0661e5bda0e7aac4b7d59f109453" translate="yes" xml:space="preserve">
          <source>The Zen of AngularJS</source>
          <target state="translated">AngularJS의 선</target>
        </trans-unit>
        <trans-unit id="c29d1c1afd3d55fd76dd7231c901e094f9916538" translate="yes" xml:space="preserve">
          <source>The above affects all kinds of element re-use due to tracking, but may be especially visible when tracking by &lt;code&gt;$index&lt;/code&gt; due to the way ngRepeat re-uses elements.</source>
          <target state="translated">위의 내용은 추적으로 인해 모든 유형의 요소 재사용에 영향을 주지만 ngRepeat가 요소를 재사용하는 방식으로 인해 &lt;code&gt;$index&lt;/code&gt; 로 추적 할 때 특히 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d020ab0c4519b74d0e2f34f58f59c7bb5764a61" translate="yes" xml:space="preserve">
          <source>The above is a suggestion. Tailor it to your needs.</source>
          <target state="translated">위의 제안입니다. 필요에 맞게 조정하십시오.</target>
        </trans-unit>
        <trans-unit id="97d188a64eaf391575058d7091fc3fa4a7f72e3b" translate="yes" xml:space="preserve">
          <source>The action methods on the class object or instance object can be invoked with the following parameters:</source>
          <target state="translated">클래스 객체 또는 인스턴스 객체의 액션 메서드는 다음 매개 변수를 사용하여 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7eff8e112c923d4408ba2e75a0a922cfc87c536b" translate="yes" xml:space="preserve">
          <source>The actual value from the control's view. For &lt;code&gt;input&lt;/code&gt; elements, this is a String. See &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; for information about when the $viewValue is set.</source>
          <target state="translated">컨트롤보기의 실제 값입니다. 들어 &lt;code&gt;input&lt;/code&gt; 요소,이 문자열이다. $ viewValue 설정시기에 대한 정보는 &lt;a href=&quot;ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48378b09bf8458398be6b8d6a8a1f336579bf8ba" translate="yes" xml:space="preserve">
          <source>The amount of time moved forward.</source>
          <target state="translated">앞으로 이동 한 시간입니다.</target>
        </trans-unit>
        <trans-unit id="2b948d265fc57c10625e1ce0862575d8dd243a43" translate="yes" xml:space="preserve">
          <source>The application can have multiple scopes, because &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt; can create new child scopes. When new scopes are created, they are added as children of their parent scope. This creates a tree structure which parallels the DOM where they're attached.</source>
          <target state="translated">&lt;a href=&quot;directive&quot;&gt;지시문&lt;/a&gt; 은 새로운 자식 범위를 만들 수 있으므로 응용 프로그램에는 여러 범위가있을 수 있습니다. 새 범위가 만들어지면 부모 범위의 자식으로 추가됩니다. 이것은 첨부 된 DOM과 비슷한 트리 구조를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="38e5bbdd08561c9153847e92a500562dc014b342" translate="yes" xml:space="preserve">
          <source>The application developer is responsible for loading the code containing the modules; and for ensuring that lazy scripts are not downloaded and executed more often that desired.</source>
          <target state="translated">응용 프로그램 개발자는 모듈이 포함 된 코드를로드해야합니다. 게으른 스크립트를 다운로드하여 원하는 횟수만큼 자주 실행하지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="60f11f10d202320b748ee12a06796244dbd227a5" translate="yes" xml:space="preserve">
          <source>The arguments present in the callback function are:</source>
          <target state="translated">콜백 함수에 존재하는 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="81e6f0d0a80e18b7562f471ce77dd5009db58a45" translate="yes" xml:space="preserve">
          <source>The array notation</source>
          <target state="translated">배열 표기법</target>
        </trans-unit>
        <trans-unit id="9ca59792e60c6511fe9a49d6033cb2a4c1439819" translate="yes" xml:space="preserve">
          <source>The attribute magic of ngAria may not work for every scenario. To disable individual attributes, you can use the &lt;a href=&quot;../api/ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; method. Just keep in mind this will tell ngAria to ignore the attribute globally.</source>
          <target state="translated">ngAria의 속성 마법은 모든 시나리오에서 작동하지 않을 수 있습니다. 개별 속성을 비활성화하려면 &lt;a href=&quot;../api/ngaria/provider/%24ariaprovider#config.html&quot;&gt;config&lt;/a&gt; 방법을 사용하십시오 . 이것은 ngAria가 전역 적으로 속성을 무시하도록 지시합니다.</target>
        </trans-unit>
        <trans-unit id="14d833ec5a36b34606ff7ead177dd258878c59e5" translate="yes" xml:space="preserve">
          <source>The behaviour of the directive is affected by the use of the &lt;code&gt;ngTrim&lt;/code&gt; attribute.</source>
          <target state="translated">지시문의 동작은 &lt;code&gt;ngTrim&lt;/code&gt; 속성 사용에 영향을받습니다 .</target>
        </trans-unit>
        <trans-unit id="8aeca93c2626363ee4548fe610e8099df9c9c8b3" translate="yes" xml:space="preserve">
          <source>The boolean &lt;code&gt;readonly&lt;/code&gt; attribute is only valid for native form controls such as &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly indicate custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; as required, using ngAria with &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;ngReadonly&lt;/a&gt; will also add &lt;code&gt;aria-readonly&lt;/code&gt;. This tells accessibility APIs when a custom control is read-only.</source>
          <target state="translated">부울 &lt;code&gt;readonly&lt;/code&gt; 속성은 &lt;code&gt;input&lt;/code&gt; 및 &lt;code&gt;textarea&lt;/code&gt; 와 같은 기본 양식 컨트롤에만 유효합니다 . 제대로 같은 사용자 지정 요소 지시자 표시하기 위해 &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; 필요로 ngAria를 사용 &lt;a href=&quot;../api/ng/directive/ngreadonly&quot;&gt;ngReadonly&lt;/a&gt; 도 추가 할 것이다 &lt;code&gt;aria-readonly&lt;/code&gt; . 이것은 커스텀 컨트롤이 읽기 전용 일 때 접근성 API를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="935e2113acf37c8fa60e8d363d9a4163dc3c40a0" translate="yes" xml:space="preserve">
          <source>The boolean &lt;code&gt;required&lt;/code&gt; attribute is only valid for native form controls such as &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt;. To properly indicate custom element directives such as &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; as required, using ngAria with &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;ngRequired&lt;/a&gt; will also add &lt;code&gt;aria-required&lt;/code&gt;. This tells accessibility APIs when a custom control is required.</source>
          <target state="translated">부울 &lt;code&gt;required&lt;/code&gt; 속성은 &lt;code&gt;input&lt;/code&gt; 및 &lt;code&gt;textarea&lt;/code&gt; 와 같은 기본 양식 컨트롤에만 유효합니다 . 필요에 따라 &lt;code&gt;&amp;lt;md-checkbox&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;custom-input&amp;gt;&lt;/code&gt; 과 같은 사용자 정의 요소 지시문을 올바르게 표시하기 위해 ngRequire와 함께 &lt;a href=&quot;../api/ng/directive/ngrequired&quot;&gt;ngAria&lt;/a&gt; 를 사용 하면 &lt;code&gt;aria-required&lt;/code&gt; 가 추가됩니다 . 이것은 사용자 정의 제어가 필요할 때 내게 필요한 옵션 API를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="9e8a4e50e5a91fb8867fe908b441bbfda7d826ab" translate="yes" xml:space="preserve">
          <source>The browser re-renders the view with the updated text.</source>
          <target state="translated">브라우저는 업데이트 된 텍스트로 뷰를 다시 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="65cf3e169c60d4db4937d1da68550b314b1b6e3d" translate="yes" xml:space="preserve">
          <source>The browser's event-loop waits for an event to arrive. An event is a user interaction, timer event, or network event (response from a server).</source>
          <target state="translated">브라우저의 이벤트 루프는 이벤트가 도착하기를 기다립니다. 이벤트는 사용자 상호 작용, 타이머 이벤트 또는 네트워크 이벤트 (서버의 응답)입니다.</target>
        </trans-unit>
        <trans-unit id="707ecbb38e755bff0a1ac8d5a41800f59ce92ee0" translate="yes" xml:space="preserve">
          <source>The buggy way to write it:</source>
          <target state="translated">그것을 쓰는 버기 방법 :</target>
        </trans-unit>
        <trans-unit id="7daed9593b5b371d72c261edea4b25b4a7fbc58e" translate="yes" xml:space="preserve">
          <source>The built-in &lt;code&gt;$id()&lt;/code&gt; function can be used to assign a unique &lt;code&gt;$$hashKey&lt;/code&gt; property to each item in the collection. This property is then used as a key to associated DOM elements with the corresponding item in the collection by identity. Moving the same object would move the DOM element in the same way in the DOM. Note that the default id function does not support duplicate primitive values (&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;), but supports duplictae non-primitive values (&lt;code&gt;object&lt;/code&gt;) that are &lt;em&gt;equal&lt;/em&gt; in shape.</source>
          <target state="translated">내장 된 &lt;code&gt;$id()&lt;/code&gt; 함수를 사용 하여 컬렉션의 각 항목에 고유 한 &lt;code&gt;$$hashKey&lt;/code&gt; 속성을 할당 할 수 있습니다 . 그런 다음이 특성은 ID별로 콜렉션의 해당 항목과 연관된 DOM 요소의 키로 사용됩니다. 동일한 객체를 이동하면 DOM에서 동일한 방식으로 DOM 요소가 이동합니다. 기본 id 함수는 중복 기본 값 ( &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;string&lt;/code&gt; )을 지원하지 않지만 모양 이 &lt;em&gt;동일한&lt;/em&gt; 중복 기본이 아닌 값 ( &lt;code&gt;object&lt;/code&gt; )을 지원합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="de84fb848d7974c1538967d70a061f09d136e209" translate="yes" xml:space="preserve">
          <source>The built-in AngularJS directives show in their documentation page which type of matching they support.</source>
          <target state="translated">내장 AngularJS 지시문은 지원되는 일치 유형을 설명서 페이지에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="962a6ec28bdb795347091d826dbdec1364731a71" translate="yes" xml:space="preserve">
          <source>The built-in DOM manipulation directives, such as &lt;a href=&quot;../directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../directive/ngswitch&quot;&gt;&lt;code&gt;ngSwitch&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; automatically destroy their transcluded clones as necessary so you do not need to worry about this if you are simply using &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt; to inject the transclusion into your directive.</source>
          <target state="translated">&lt;a href=&quot;../directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;../directive/ngswitch&quot;&gt; &lt;code&gt;ngSwitch&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt; 와 같은 내장 DOM 조작 지시문 은 필요에 따라 변환 된 복제본을 자동으로 제거하므로 지시문에 변환을 삽입하기 위해 &lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt; 를 사용하는 경우 걱정할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="8d5255e53ef3607b163dc1dff9b5cf6c85ff7edd" translate="yes" xml:space="preserve">
          <source>The built-in filters &lt;a href=&quot;../filter/orderby&quot;&gt;orderBy&lt;/a&gt; and &lt;a href=&quot;../filter/filter&quot;&gt;filter&lt;/a&gt; do not work with objects, and will throw an error if used with one.</source>
          <target state="translated">내장 필터 &lt;a href=&quot;../filter/orderby&quot;&gt;orderBy&lt;/a&gt; 및 &lt;a href=&quot;../filter/filter&quot;&gt;filter&lt;/a&gt; 는 객체에서 작동하지 않으며 객체와 함께 사용하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ff2c0fad2a4d5f40e3c8e45c0cb4b216d27b9103" translate="yes" xml:space="preserve">
          <source>The cache key is the request URL including search parameters; headers are not considered.</source>
          <target state="translated">캐시 키는 검색 매개 변수를 포함하는 요청 URL입니다. 헤더는 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e4616eff1fba05855b623c26f362604c6b703e08" translate="yes" xml:space="preserve">
          <source>The child elements of the &lt;code&gt;ngMessages&lt;/code&gt; directive are matched to the collection keys by a &lt;code&gt;ngMessage&lt;/code&gt; or &lt;code&gt;ngMessageExp&lt;/code&gt; directive. The value of these attributes must match a key in the collection that is provided by the &lt;code&gt;ngMessages&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; 지시문 의 하위 요소 는 &lt;code&gt;ngMessage&lt;/code&gt; 또는 &lt;code&gt;ngMessageExp&lt;/code&gt; 지시문에 의해 콜렉션 키와 일치합니다 . 이러한 속성의 값은 &lt;code&gt;ngMessages&lt;/code&gt; 지시문 이 제공하는 컬렉션의 키와 일치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5336897e60e004333ab19b29ea3db63cbe8dfa69" translate="yes" xml:space="preserve">
          <source>The className expression which will be checked against all animations</source>
          <target state="translated">모든 애니메이션에 대해 확인할 className 표현식</target>
        </trans-unit>
        <trans-unit id="2c1b1a48a0af433b1673ea81113c3f7424fa7fcb" translate="yes" xml:space="preserve">
          <source>The className value that will be added to the element</source>
          <target state="translated">요소에 추가 될 className 값</target>
        </trans-unit>
        <trans-unit id="01da935870671cfe5daa21f385f055010d61e8c9" translate="yes" xml:space="preserve">
          <source>The className value that will be removed from the element</source>
          <target state="translated">요소에서 제거 될 className 값</target>
        </trans-unit>
        <trans-unit id="4ee4fb39e9e5de140b856309f8187236336a4e7a" translate="yes" xml:space="preserve">
          <source>The collection (array or array-like object) to sort.</source>
          <target state="translated">정렬 할 컬렉션 (배열 또는 배열 유사 객체)입니다.</target>
        </trans-unit>
        <trans-unit id="e22835faffad5508a02cb513445c12617c69ea54" translate="yes" xml:space="preserve">
          <source>The comparator function is used to sort the items, based on the derived values, types and indices.</source>
          <target state="translated">비교기 함수는 파생 된 값, 유형 및 색인을 기반으로 항목을 정렬하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a43646046dc2a965f4d42e43008db64616266c7b" translate="yes" xml:space="preserve">
          <source>The comparator function used to determine the relative order of value pairs. If omitted, the built-in comparator will be used.</source>
          <target state="translated">비교기 함수는 값 쌍의 상대 순서를 결정하는 데 사용됩니다. 생략하면 내장 비교기가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6baf3ab50c289d17bf3cfb5a4993fa32161e5046" translate="yes" xml:space="preserve">
          <source>The comparison is done using the &lt;code&gt;comparator&lt;/code&gt; function. If none is specified, a default, built-in comparator is used (see below for details - in a nutshell, it compares numbers numerically and strings alphabetically).</source>
          <target state="translated">&lt;code&gt;comparator&lt;/code&gt; 기능을 사용하여 비교가 수행됩니다 . 아무것도 지정하지 않으면 기본 내장 비교기가 사용됩니다 (자세한 내용은 아래에서 숫자와 문자열을 알파벳순으로 비교).</target>
        </trans-unit>
        <trans-unit id="67bff779900ff80c2c3c68a68a6f55dc6ec358a9" translate="yes" xml:space="preserve">
          <source>The compilation is a process of walking the DOM tree and matching DOM elements to &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">컴파일은 DOM 트리를 걷고 DOM 요소를 &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;지시문에&lt;/a&gt; 일치시키는 프로세스입니다 .</target>
        </trans-unit>
        <trans-unit id="10e4998d3da4ae02bc4b02f740db293d195492a3" translate="yes" xml:space="preserve">
          <source>The compile function deals with transforming the template DOM. Since most directives do not do template transformation, it is not used often. The compile function takes the following arguments:</source>
          <target state="translated">컴파일 함수는 템플릿 DOM 변환을 처리합니다. 대부분의 지시문은 템플릿 변환을 수행하지 않으므로 자주 사용되지 않습니다. 컴파일 함수는 다음 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e3ba37f0f20632b21daa2b1d0d783a59cb927a72" translate="yes" xml:space="preserve">
          <source>The compiler does not suspend the entire compilation to wait for templates to be loaded because this would result in the whole app &quot;stalling&quot; until all templates are loaded asynchronously - even in the case when only one deeply nested directive has &lt;code&gt;templateUrl&lt;/code&gt;.</source>
          <target state="translated">심지어 경우에 하나의 중첩 지시가있을 때 - 컴파일러는 템플릿이로드 될이 모든 템플릿을 비동기 적으로로드 될 때까지 &quot;실속&quot;전체 응용 프로그램을 초래할 것이기 때문에 기다릴 전체 컴파일을 중단하지 않습니다 &lt;code&gt;templateUrl&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="8325dd3ca7b9ffd07716c535f23b0e8400e6a2b0" translate="yes" xml:space="preserve">
          <source>The component can create the dependency, typically using the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">구성 요소는 일반적으로 &lt;code&gt;new&lt;/code&gt; 연산자를 사용하여 종속성을 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="079e1d898e7f8138744541edc30b9716548afef5" translate="yes" xml:space="preserve">
          <source>The component can have the dependency passed to it where it is needed.</source>
          <target state="translated">컴포넌트는 필요한 곳으로 종속성을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d494d536751a59fe5fb79ed0078239843fed4f8" translate="yes" xml:space="preserve">
          <source>The component can look up the dependency, by referring to a global variable.</source>
          <target state="translated">컴포넌트는 글로벌 변수를 참조하여 종속성을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba1696b0ee510ce7b698742d313d7841389de75d" translate="yes" xml:space="preserve">
          <source>The configuration object. May only contain the options that need to be updated. Supported keys:</source>
          <target state="translated">구성 객체. 업데이트해야하는 옵션 만 포함 할 수 있습니다. 지원되는 키 :</target>
        </trans-unit>
        <trans-unit id="c0221af8fa9351901bedb66ce06849fb170fa5da" translate="yes" xml:space="preserve">
          <source>The constant value.</source>
          <target state="translated">상수 값.</target>
        </trans-unit>
        <trans-unit id="21b4017fe5c763384985b8ae7689d4c632ed24d0" translate="yes" xml:space="preserve">
          <source>The context in which this value is safe for use, e.g. &lt;code&gt;$sce.URL&lt;/code&gt;, &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt;, &lt;code&gt;$sce.HTML&lt;/code&gt;, &lt;code&gt;$sce.JS&lt;/code&gt; or &lt;code&gt;$sce.CSS&lt;/code&gt;.</source>
          <target state="translated">이 값이 사용하기에 안전한 컨텍스트 (예 : &lt;code&gt;$sce.URL&lt;/code&gt; , &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; , &lt;code&gt;$sce.HTML&lt;/code&gt; , &lt;code&gt;$sce.JS&lt;/code&gt; 또는 &lt;code&gt;$sce.CSS&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e02f32b11d4a96e094cc4cd481703dd1fae3a4d8" translate="yes" xml:space="preserve">
          <source>The context in which this value is to be used (such as &lt;code&gt;$sce.HTML&lt;/code&gt;).</source>
          <target state="translated">이 값이 사용될 컨텍스트 (예 : &lt;code&gt;$sce.HTML&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b2a00503e1aada1817f217fc39da46317b85f521" translate="yes" xml:space="preserve">
          <source>The context in which this value is to be used.</source>
          <target state="translated">이 값이 사용될 컨텍스트.</target>
        </trans-unit>
        <trans-unit id="527160a78c0a817c7ef349fdf9b2c7b8b40a0021" translate="yes" xml:space="preserve">
          <source>The contexts that can be sanitized are $sce.MEDIA_URL, $sce.URL and $sce.HTML. The first two are available by default, and the third one relies on the &lt;code&gt;$sanitize&lt;/code&gt; service (which may be loaded through the &lt;code&gt;ngSanitize&lt;/code&gt; module). Furthermore, for $sce.RESOURCE_URL context, a plain string may be accepted if the resource url policy defined by &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/code&gt;&lt;/a&gt; accepts that resource.</source>
          <target state="translated">삭제 가능한 컨텍스트는 $ sce.MEDIA_URL, $ sce.URL 및 $ sce.HTML입니다. 처음 두 개는 기본적으로 사용 가능하며 세 번째는 &lt;code&gt;$sanitize&lt;/code&gt; 서비스 ( &lt;code&gt;ngSanitize&lt;/code&gt; 모듈을 통해로드 될 수 있음 )에 의존 합니다. 또한 $ sce.RESOURCE_URL 컨텍스트의 경우 &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/code&gt; &lt;/a&gt; 의해 정의 된 자원 URL 정책이 해당 자원을 승인하는 경우 일반 문자열이 허용 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="49cec80d475c016bce4dcd2c0cb297088ab347dc" translate="yes" xml:space="preserve">
          <source>The contexts that can be sanitized are $sce.MEDIA_URL, $sce.URL and $sce.HTML. The first two are available by default, and the third one relies on the &lt;code&gt;$sanitize&lt;/code&gt; service (which may be loaded through the &lt;code&gt;ngSanitize&lt;/code&gt; module). Furthermore, for $sce.RESOURCE_URL context, a plain string may be accepted if the resource url policy defined by &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;&lt;code&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/code&gt;&lt;/a&gt; accepts that resource.</source>
          <target state="translated">삭제 될 수있는 컨텍스트는 $ sce.MEDIA_URL, $ sce.URL 및 $ sce.HTML입니다. 처음 두 개는 기본적으로 사용 가능하고 세 번째는 &lt;code&gt;$sanitize&lt;/code&gt; 서비스 ( &lt;code&gt;ngSanitize&lt;/code&gt; 모듈을 통해로드 될 수 있음 )에 의존 합니다. 또한 $ sce.RESOURCE_URL 컨텍스트의 경우 &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt; &lt;code&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/code&gt; &lt;/a&gt; 의해 정의 된 리소스 URL 정책이 해당 리소스를 수락하면 일반 문자열이 수락 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f1ed1aa0329c6ec125f16d62f3f72745317d7c05" translate="yes" xml:space="preserve">
          <source>The control in this example updates by &quot;default&quot;, &quot;click&quot;, and &quot;blur&quot;, with different &lt;code&gt;debounce&lt;/code&gt; values. You can see that &quot;click&quot; doesn't have an individual &lt;code&gt;debounce&lt;/code&gt; value - therefore it uses the &lt;code&gt;*&lt;/code&gt; debounce value.</source>
          <target state="translated">이 예제의 컨트롤은 다른 &lt;code&gt;debounce&lt;/code&gt; 값 으로 &quot;default&quot;, &quot;click&quot;및 &quot;blur&quot;로 업데이트됩니다 . &quot;클릭&quot;에는 개별 &lt;code&gt;debounce&lt;/code&gt; 값이 없으므로 &lt;code&gt;*&lt;/code&gt; 디 바운스 값을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="abfb67eb59ab08df12629d4b3ef24f1ebe6f52a0" translate="yes" xml:space="preserve">
          <source>The control is considered valid only if value is entered.</source>
          <target state="translated">값을 입력 한 경우에만 컨트롤이 유효한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="fa321ff4c1ce8fe572062a8932217d90b3164a6f" translate="yes" xml:space="preserve">
          <source>The controller for the &lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt; directive. The controller exposes a few utility methods that can be used to augment the behavior of a regular or an &lt;a href=&quot;../directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt; select element.</source>
          <target state="translated">&lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt; 지시문 의 컨트롤러입니다 . 컨트롤러는 일반 또는 &lt;a href=&quot;../directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt; 선택 요소 의 동작을 향상시키는 데 사용할 수있는 몇 가지 유틸리티 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="7009c81217bd6326e450d4c97f26dbfd83bc15a0" translate="yes" xml:space="preserve">
          <source>The controller for the &lt;a href=&quot;directive/select&quot;&gt;select&lt;/a&gt; directive. The controller exposes a few utility methods that can be used to augment the behavior of a regular or an &lt;a href=&quot;directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt; select element.</source>
          <target state="translated">&lt;a href=&quot;directive/select&quot;&gt;select&lt;/a&gt; 지시문 의 컨트롤러입니다 . 컨트롤러는 일반 또는 &lt;a href=&quot;directive/ngoptions&quot;&gt;ngOptions&lt;/a&gt; 선택 요소 의 동작을 향상시키는 데 사용할 수있는 몇 가지 유틸리티 메소드를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="498432a4da793f7e778133b7144b7aa9f4769cd3" translate="yes" xml:space="preserve">
          <source>The controller instance can be published into a scope property by specifying &lt;code&gt;ng-controller=&quot;as propertyName&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ng-controller=&quot;as propertyName&quot;&lt;/code&gt; 을 지정하여 컨트롤러 인스턴스를 범위 속성으로 게시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d8ae95787b8cec655ad357bed40a98949c9101e8" translate="yes" xml:space="preserve">
          <source>The controller whose validity state is triggering the change.</source>
          <target state="translated">유효성 상태가 변경을 트리거하는 컨트롤러입니다.</target>
        </trans-unit>
        <trans-unit id="5e5b86677d2c9438f2a6d9bb85589a00354fcb67" translate="yes" xml:space="preserve">
          <source>The controls can be accessed normally, but adding to, or removing controls from the array has no effect on the form. Instead, use &lt;a href=&quot;form.formcontroller#%24addControl.html&quot;&gt;&lt;code&gt;$addControl()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;form.formcontroller#%24removeControl.html&quot;&gt;&lt;code&gt;$removeControl()&lt;/code&gt;&lt;/a&gt; for this use-case. Likewise, adding a control to, or removing a control from the form is not reflected in the shallow copy. That means you should get a fresh copy from &lt;code&gt;$getControls()&lt;/code&gt; every time you need access to the controls.</source>
          <target state="translated">컨트롤은 정상적으로 액세스 할 수 있지만 배열에 컨트롤을 추가하거나 제거해도 폼에는 영향을 미치지 않습니다. 대신 이 사용 사례에 &lt;a href=&quot;form.formcontroller#%24addControl.html&quot;&gt; &lt;code&gt;$addControl()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;form.formcontroller#%24removeControl.html&quot;&gt; &lt;code&gt;$removeControl()&lt;/code&gt; &lt;/a&gt; 을 사용하십시오. 마찬가지로 폼에 컨트롤을 추가하거나 폼에서 컨트롤을 제거해도 얕은 복사본에는 반영되지 않습니다. 즉 , 컨트롤에 액세스해야 할 때마다 &lt;code&gt;$getControls()&lt;/code&gt; 에서 새로운 사본을 가져와야 합니다.</target>
        </trans-unit>
        <trans-unit id="90313e345675668509c608402c284aebafe8c90b" translate="yes" xml:space="preserve">
          <source>The copy or updated &lt;code&gt;destination&lt;/code&gt;, if &lt;code&gt;destination&lt;/code&gt; was specified.</source>
          <target state="translated">&lt;code&gt;destination&lt;/code&gt; 이 지정된 경우 복사 또는 업데이트 된 &lt;code&gt;destination&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ced3c50f80c61d3e28cb231ba0b8420428955dc" translate="yes" xml:space="preserve">
          <source>The correct way to write it:</source>
          <target state="translated">그것을 쓰는 올바른 방법 :</target>
        </trans-unit>
        <trans-unit id="8375ae9af024014319d46b0caa7eb954a5fa2f4b" translate="yes" xml:space="preserve">
          <source>The current CSS className expression value. If null then there is no expression value</source>
          <target state="translated">현재 CSS className 표현식 값입니다. null의 경우, 표현 치가 없다</target>
        </trans-unit>
        <trans-unit id="4382786c94714f27b89613774f7c4bebd55f76e9" translate="yes" xml:space="preserve">
          <source>The current CSS className value</source>
          <target state="translated">현재 CSS className 값</target>
        </trans-unit>
        <trans-unit id="c0b92d2699b7faed501975cc1cf13d3e78b33478" translate="yes" xml:space="preserve">
          <source>The current default is 10 iterations.</source>
          <target state="translated">현재 기본값은 10 회입니다.</target>
        </trans-unit>
        <trans-unit id="7aedd08ef47f8be2668af8dd80fb24b7ee28cfe2" translate="yes" xml:space="preserve">
          <source>The current filter function or &lt;code&gt;null&lt;/code&gt; if there is none set.</source>
          <target state="translated">현재의 필터 기능 . 설정되어 있지 않은 경우는 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="66a28e07fb4d893df0b667def66654991100a49e" translate="yes" xml:space="preserve">
          <source>The current info object for this module if called as a getter, or &lt;code&gt;this&lt;/code&gt; if called as a setter.</source>
          <target state="translated">이 모듈에 대한 현재 정보 객체는 경우 게터로 불리는, 또는 &lt;code&gt;this&lt;/code&gt; 경우 세터로했다.</target>
        </trans-unit>
        <trans-unit id="9a9d02cc8cc112d35feadb1312a2714232a47ad3" translate="yes" xml:space="preserve">
          <source>The current scope is excluded from the count. The count includes all isolate child scopes.</source>
          <target state="translated">현재 범위는 카운트에서 제외됩니다. 이 계수에는 모든 분리 하위 범위가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a3ef084525022e52ff91e7bc6b6be1d8ef3c412b" translate="yes" xml:space="preserve">
          <source>The current value of the &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; flag if used as a getter or itself (for chaining) if used as a setter.</source>
          <target state="translated">게터로 사용되는 경우 &lt;code&gt;eagerInstantiationEnabled&lt;/code&gt; 플래그 의 현재 값 또는 setter로 사용되는 경우 (체인 용)</target>
        </trans-unit>
        <trans-unit id="b8d8863f6d1748e7bfd4ecc411b957bc6eb47d5f" translate="yes" xml:space="preserve">
          <source>The currently set &lt;code&gt;bannedResourceUrlList&lt;/code&gt; array.</source>
          <target state="translated">현재 설정된 &lt;code&gt;bannedResourceUrlList&lt;/code&gt; 배열입니다.</target>
        </trans-unit>
        <trans-unit id="3c55e9fab58239a31ab41674e07793cb9edc1d92" translate="yes" xml:space="preserve">
          <source>The currently set blacklist array.</source>
          <target state="translated">현재 설정된 블랙리스트 배열입니다.</target>
        </trans-unit>
        <trans-unit id="8e588d18f91da994d754a8248014492a329f43c0" translate="yes" xml:space="preserve">
          <source>The currently set trusted resource URL array.</source>
          <target state="translated">현재 설정된 신뢰할 수있는 리소스 URL 배열입니다.</target>
        </trans-unit>
        <trans-unit id="9b8df1933a459dcfe4c11ef0936f54fd838b71b8" translate="yes" xml:space="preserve">
          <source>The currently set whitelist array.</source>
          <target state="translated">현재 설정된 화이트리스트 배열입니다.</target>
        </trans-unit>
        <trans-unit id="8c2f3e1e231bfffe01f6a171d21c8de2da159f70" translate="yes" xml:space="preserve">
          <source>The custom &lt;code&gt;redirectTo&lt;/code&gt; function is expected to return a string which will be used to update &lt;code&gt;$location.url()&lt;/code&gt;. If the function throws an error, no further processing will take place and the &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$routeChangeError&lt;/a&gt; event will be fired.</source>
          <target state="translated">사용자 지정 &lt;code&gt;redirectTo&lt;/code&gt; 함수는 &lt;code&gt;$location.url()&lt;/code&gt; 을 업데이트하는 데 사용될 문자열을 반환해야합니다 . 함수가 오류를 발생 시키면 더 이상 처리되지 않으며 &lt;a href=&quot;../service/%24route#%24routeChangeError.html&quot;&gt;$ routeChangeError&lt;/a&gt; 이벤트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="517928a1a0c975c35a5f6371b16dbf98f8e18922" translate="yes" xml:space="preserve">
          <source>The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such as &lt;strong&gt;data-ng-repeat-start&lt;/strong&gt;, &lt;strong&gt;x-ng-repeat-start&lt;/strong&gt; and &lt;strong&gt;ng:repeat-start&lt;/strong&gt;).</source>
          <target state="translated">ngRepeat의 사용자 정의 시작 및 종료 지점은 AngularJS에서 제공하는 다른 모든 HTML 지시문 구문을 지원합니다 (예 : &lt;strong&gt;data-ng-repeat-start&lt;/strong&gt; , &lt;strong&gt;x-ng-repeat-start&lt;/strong&gt; 및 &lt;strong&gt;ng : repeat-start&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="6cf9ca1b48f086d137d2fcb4ce7667c3b44ff3ed" translate="yes" xml:space="preserve">
          <source>The debugger allows you to access the currently selected element in the console as &lt;code&gt;$0&lt;/code&gt; variable.</source>
          <target state="translated">디버거를 사용하면 콘솔에서 현재 선택된 요소에 &lt;code&gt;$0&lt;/code&gt; 변수 로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3082e7b0af57ed1e4eff6c089ae1878d3da1901b" translate="yes" xml:space="preserve">
          <source>The declaration should be created in the format of &lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$http.config&lt;/a&gt;:</source>
          <target state="translated">선언은 &lt;a href=&quot;../../ng/service/%24http#usage.html&quot;&gt;$ http.config&lt;/a&gt; 형식으로 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d28f0c2f0f5b42bd7a8d61c72d07ab41bac315ed" translate="yes" xml:space="preserve">
          <source>The declarative process is easier to understand.</source>
          <target state="translated">선언적 프로세스는 이해하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="c0cfb0f1a7c425f909fe0bc36aa9ca3838fbff7c" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;$isEmpty&lt;/code&gt; function checks whether the value is &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt;.</source>
          <target state="translated">기본 &lt;code&gt;$isEmpty&lt;/code&gt; 함수는 값이 &lt;code&gt;undefined&lt;/code&gt; 않은지 , &lt;code&gt;''&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; 또는 &lt;code&gt;NaN&lt;/code&gt; 인지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="6418bf8b84a736c531737d93d5eebd5e4c6bf159" translate="yes" xml:space="preserve">
          <source>The default CSS for &lt;code&gt;ngHide&lt;/code&gt;, the inverse method to &lt;code&gt;ngShow&lt;/code&gt;, makes ngAria redundant. It toggles &lt;code&gt;aria-hidden&lt;/code&gt; on the directive when it is hidden or shown, but the content is already hidden with &lt;code&gt;display: none&lt;/code&gt;. See explanation for &lt;a href=&quot;accessibility#ngshow.html&quot;&gt;ngShow&lt;/a&gt; when overriding the default CSS.</source>
          <target state="translated">의 기본 CSS &lt;code&gt;ngHide&lt;/code&gt; 에 역 방법 &lt;code&gt;ngShow&lt;/code&gt; 은 , ngAria의 중복을합니다. 지시문이 숨겨 지거나 표시되면 지시문에서 &lt;code&gt;aria-hidden&lt;/code&gt; 을 토글 하지만 내용은 이미 &lt;code&gt;display: none&lt;/code&gt; 숨겨져 있습니다. 기본 CSS를 재정의 할 때 &lt;a href=&quot;accessibility#ngshow.html&quot;&gt;ngShow에&lt;/a&gt; 대한 설명을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="58168ad0626f3db21d1a561fbfb468e194ad0a4e" translate="yes" xml:space="preserve">
          <source>The default actions are:</source>
          <target state="translated">기본 조치는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="165f67c4b986077c141a0b4eb8be5a4d57bb86e9" translate="yes" xml:space="preserve">
          <source>The default behaviour in &lt;code&gt;ngModel&lt;/code&gt; is that the model value is set to &lt;code&gt;undefined&lt;/code&gt; when the validation determines that the value is invalid. By setting the &lt;code&gt;allowInvalid&lt;/code&gt; property to true, the model will still be updated even if the value is invalid.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 의 기본 동작 은 유효성 검사에서 값이 유효하지 않다고 결정할 때 모델 값이 &lt;code&gt;undefined&lt;/code&gt; 것으로 설정되는 것 입니다. &lt;code&gt;allowInvalid&lt;/code&gt; 속성을 true 로 설정하면 값이 유효하지 않은 경우에도 모델이 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="f996c0e32ed6964a734c9d13e1970793b933d9c8" translate="yes" xml:space="preserve">
          <source>The default cache value can be set by updating the &lt;a href=&quot;%24http#defaults.html&quot;&gt;&lt;code&gt;$http.defaults.cache&lt;/code&gt;&lt;/a&gt; property or the &lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt;&lt;code&gt;$httpProvider.defaults.cache&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">기본 캐시 값을 업데이트하여 설정할 수 있습니다 &lt;a href=&quot;%24http#defaults.html&quot;&gt; &lt;code&gt;$http.defaults.cache&lt;/code&gt; &lt;/a&gt; 속성 또는 &lt;a href=&quot;../provider/%24httpprovider#defaults.html&quot;&gt; &lt;code&gt;$httpProvider.defaults.cache&lt;/code&gt; &lt;/a&gt; 속성을.</target>
        </trans-unit>
        <trans-unit id="a306ec119f2eaccbe8d649fada9aaf660ff1448f" translate="yes" xml:space="preserve">
          <source>The default comparator</source>
          <target state="translated">기본 비교기</target>
        </trans-unit>
        <trans-unit id="3449c46250e0ef1f6af24c7d14ff151093f05f3a" translate="yes" xml:space="preserve">
          <source>The default instance of &lt;code&gt;$sceDelegate&lt;/code&gt; should work out of the box with little pain. While you can override it completely to change the behavior of &lt;code&gt;$sce&lt;/code&gt;, the common case would involve configuring the &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; instead by setting your own trusted and banned resource lists for trusting URLs used for loading AngularJS resources such as templates. Refer &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$sceDelegateProvider.trustedResourceUrlList&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$sceDelegateProvider.bannedResourceUrlList&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;$sceDelegate&lt;/code&gt; 의 기본 인스턴스는 약간의 고통없이 즉시 작동합니다. &lt;code&gt;$sce&lt;/code&gt; 의 동작을 변경하기 위해 완전히 재정의 할 수 있지만 일반적인 경우에는 템플릿과 같은 AngularJS 리소스를로드하는 데 사용되는 신뢰 URL에 대해 자신의 신뢰할 수있는 및 금지 된 리소스 목록을 설정하여 대신 &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProvider&lt;/a&gt; 를 구성하는 것이 포함 됩니다. &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.trustedResourceUrlList&lt;/a&gt; 및 &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;$ sceDelegateProvider.bannedResourceUrlList를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="465c73e00ec2667af675d53734d888ec91f718c7" translate="yes" xml:space="preserve">
          <source>The default instance of &lt;code&gt;$sceDelegate&lt;/code&gt; should work out of the box with little pain. While you can override it completely to change the behavior of &lt;code&gt;$sce&lt;/code&gt;, the common case would involve configuring the &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$sceDelegateProvider&lt;/a&gt; instead by setting your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as templates. Refer &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$sceDelegateProvider.resourceUrlBlacklist&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;$sceDelegate&lt;/code&gt; 의 기본 인스턴스는 별다른 고통없이 작동합니다. &lt;code&gt;$sce&lt;/code&gt; 의 동작을 변경하기 위해이를 완전히 대체 할 수 있지만 일반적인 경우에는 템플릿과 같은 AngularJS 리소스를로드하는 데 사용되는 URL을 신뢰하기 위해 고유 한 화이트리스트와 블랙리스트를 설정하여 &lt;a href=&quot;../provider/%24scedelegateprovider&quot;&gt;$ sceDelegateProvider&lt;/a&gt; 를 구성하는 것이 일반적 입니다. &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;$ sceDelegateProvider.resourceUrlWhitelist&lt;/a&gt; 및 &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;$ sceDelegateProvider.resourceUrlBlacklist를&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3fe33aadf3de1f1f3b0fe8806c8376a4a04f5ea1" translate="yes" xml:space="preserve">
          <source>The default is to log &lt;code&gt;debug&lt;/code&gt; messages. You can use &lt;a href=&quot;../provider/%24logprovider&quot;&gt;ng.$logProvider#debugEnabled&lt;/a&gt; to change this.</source>
          <target state="translated">기본값은 &lt;code&gt;debug&lt;/code&gt; 메시지 를 기록 하는 것 입니다. 당신은 사용할 수 있습니다 &lt;a href=&quot;../provider/%24logprovider&quot;&gt;NG. $ logProvider # debugEnabled을&lt;/a&gt; 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04bb80a0e51b2e3fa92fe97b18ff2c753c1617a0" translate="yes" xml:space="preserve">
          <source>The default value for the prefix is &lt;code&gt;'!'&lt;/code&gt;.</source>
          <target state="translated">접두사의 기본값은 &lt;code&gt;'!'&lt;/code&gt; 입니다..</target>
        </trans-unit>
        <trans-unit id="5bced592a048c4e28bc51dd718accfdb3fc3710b" translate="yes" xml:space="preserve">
          <source>The default value is false.</source>
          <target state="translated">기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="d93c5aa93414c0c9151cab4bbeb573041c98a22c" translate="yes" xml:space="preserve">
          <source>The default value is true.</source>
          <target state="translated">기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="1d4e6cb0347f97a10e0bfcabf516d77b15974d7c" translate="yes" xml:space="preserve">
          <source>The default values satisfy a wide range of usecases, but you may choose to overwrite any of them to further customize your instances. The available properties are:</source>
          <target state="translated">기본값은 광범위한 사용 사례를 충족하지만 인스턴스를 추가로 사용자 지정하기 위해이를 덮어 쓰도록 선택할 수 있습니다. 사용 가능한 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8d058a405d150881e8c02cef5a763d1a9cac9129" translate="yes" xml:space="preserve">
          <source>The default, built-in comparator should be sufficient for most usecases. In short, it compares numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to using their index in the original collection, sorts values of different types by type and puts &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; values at the end of the sorted list.</source>
          <target state="translated">기본 내장 비교기는 대부분의 사용 사례에 충분해야합니다. 즉, 숫자를 숫자 순으로, 문자열을 알파벳순으로 (대소 문자를 구분하지 않고) 비교합니다. 객체가 원래 컬렉션에서 색인을 사용하여 다시 돌아 오면 유형별로 다른 유형의 값을 정렬하고 정렬 &lt;code&gt;undefined&lt;/code&gt; 값 과 &lt;code&gt;null&lt;/code&gt; 값을 정렬 된 목록의 끝에 넣습니다. .</target>
        </trans-unit>
        <trans-unit id="f8a104f5d8a2055e932927787187ea1605cde61f" translate="yes" xml:space="preserve">
          <source>The defaults can also be set at runtime via the &lt;code&gt;$http.defaults&lt;/code&gt; object in the same fashion. For example:</source>
          <target state="translated">동일한 방식으로 &lt;code&gt;$http.defaults&lt;/code&gt; 객체 를 통해 런타임에 기본값을 설정할 수도 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a63d9c4d9deff7d05bd9e7b756db067981e19e91" translate="yes" xml:space="preserve">
          <source>The diagram and the example below describe how AngularJS interacts with the browser's event loop.</source>
          <target state="translated">아래 다이어그램과 예제는 AngularJS가 브라우저의 이벤트 루프와 상호 작용하는 방식을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5985a11da86b3a9b2c8dd516c741a69a00b22550" translate="yes" xml:space="preserve">
          <source>The difference between Compile and Link</source>
          <target state="translated">컴파일과 링크의 차이점</target>
        </trans-unit>
        <trans-unit id="282c0e17a8f643432cf46d1ac582e22bfd94be70" translate="yes" xml:space="preserve">
          <source>The difference resides in the return value of the factory function. You can either return a &lt;a href=&quot;%24compile#directive-definition-object.html&quot;&gt;Directive Definition Object (see below)&lt;/a&gt; that defines the directive properties, or just the &lt;code&gt;postLink&lt;/code&gt; function (all other properties will have the default values).</source>
          <target state="translated">차이는 팩토리 함수의 반환 값에 있습니다. 지시문 속성을 정의하는 지시문 &lt;a href=&quot;%24compile#directive-definition-object.html&quot;&gt;정의 객체 (아래 참조)&lt;/a&gt; 또는 &lt;code&gt;postLink&lt;/code&gt; 함수 만 반환 할 수 있습니다 (다른 모든 속성에는 기본값이 있음).</target>
        </trans-unit>
        <trans-unit id="9dd111b228d3d65fff5c43c5f7db648c685d4fa3" translate="yes" xml:space="preserve">
          <source>The directive can be applied to the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, but the preferred usage is to apply multiple &lt;code&gt;ngCloak&lt;/code&gt; directives to small portions of the page to permit progressive rendering of the browser view.</source>
          <target state="translated">지시문은 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 요소에 적용 할 수 있지만 선호하는 사용법은 여러 &lt;code&gt;ngCloak&lt;/code&gt; 지시문을 페이지의 작은 부분에 적용 하여 브라우저보기를 점진적으로 렌더링하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="73b6dab32084cac10b23ad24d2acde7b9e588021" translate="yes" xml:space="preserve">
          <source>The directive definition object provides instructions to the &lt;a href=&quot;%24compile&quot;&gt;compiler&lt;/a&gt;. The attributes are:</source>
          <target state="translated">지시문 정의 객체는 &lt;a href=&quot;%24compile&quot;&gt;컴파일러에&lt;/a&gt; 명령을 제공합니다 . 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="15084cf390b2739682db07ef53f0e5ed0841df53" translate="yes" xml:space="preserve">
          <source>The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it from the template cache), &lt;code&gt;ngSwitch&lt;/code&gt; simply chooses one of the nested elements and makes it visible based on which element matches the value obtained from the evaluated expression. In other words, you define a container element (where you place the directive), place an expression on the &lt;strong&gt;&lt;code&gt;on=&quot;...&quot;&lt;/code&gt; attribute&lt;/strong&gt; (or the &lt;strong&gt;&lt;code&gt;ng-switch=&quot;...&quot;&lt;/code&gt; attribute&lt;/strong&gt;), define any inner elements inside of the directive and place a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on expression is evaluated. If a matching expression is not found via a when attribute then an element with the default attribute is displayed.</source>
          <target state="translated">지시문 자체는 ngInclude와 유사하게 작동하지만 템플릿 코드를 다운로드하거나 템플릿 캐시에서로드하는 대신 &lt;code&gt;ngSwitch&lt;/code&gt; 는 중첩 된 요소 중 하나를 선택하여 평가 된 식에서 얻은 값과 일치하는 요소를 기반으로 표시합니다. 즉, 지시문을 배치 할 컨테이너 요소를 정의하고 &lt;strong&gt; &lt;code&gt;on=&quot;...&quot;&lt;/code&gt; 속성&lt;/strong&gt; (또는 &lt;strong&gt; &lt;code&gt;ng-switch=&quot;...&quot;&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 속성 &lt;/strong&gt;&lt;strong&gt;에&lt;/strong&gt; 표현식을 배치 &lt;strong&gt;합니다.&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;), 지시문 내부에 내부 요소를 정의하고 요소 당 when 속성을 배치하십시오. when 속성은 on 표현식을 평가할 때 표시 할 요소를 ngSwitch에 알리는 데 사용됩니다. when 속성을 통해 일치하는 표현식을 찾지 못하면 기본 속성을 가진 요소가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bc305a9daf06fb29b927a141c769f1857bf13fe7" translate="yes" xml:space="preserve">
          <source>The directive operates in three different ways, depending on which of three types the expression evaluates to:</source>
          <target state="translated">지시문은 표현식이 평가하는 세 가지 유형에 따라 세 가지 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="00457ef4c0d1bfc1d66159cc11032117ca66eb2f" translate="yes" xml:space="preserve">
          <source>The directive sets the &lt;code&gt;required&lt;/code&gt; attribute on the element if the AngularJS expression inside &lt;code&gt;ngRequired&lt;/code&gt; evaluates to true. A special directive for setting &lt;code&gt;required&lt;/code&gt; is necessary because we cannot use interpolation inside &lt;code&gt;required&lt;/code&gt;. See the &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation guide&lt;/a&gt; for more info.</source>
          <target state="translated">지시문은 &lt;code&gt;ngRequired&lt;/code&gt; 내의 AngularJS 표현식 이 true로 평가되는 경우 요소에 &lt;code&gt;required&lt;/code&gt; 속성을 설정 합니다. &lt;code&gt;required&lt;/code&gt; 내부에 보간을 사용할 수 없기 때문에 필요한 설정에 대한 특수 지시문 이 필요 &lt;code&gt;required&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;../../../guide/interpolation&quot;&gt;보간 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="511cc4dca94e3becdfd05d6159bf6c72e0c27b2a" translate="yes" xml:space="preserve">
          <source>The directive that identifies where the &lt;a href=&quot;../type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; should render its &lt;strong&gt;Components&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 가 &lt;strong&gt;구성 요소를&lt;/strong&gt; 렌더링해야하는 위치를 식별하는 지시문 .</target>
        </trans-unit>
        <trans-unit id="a19715b5a8ea141e59e2b3d389be6963e887a773" translate="yes" xml:space="preserve">
          <source>The directive that identifies where the &lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; should render its &lt;strong&gt;Components&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 가 &lt;strong&gt;구성 요소를&lt;/strong&gt; 렌더링해야하는 위치를 식별하는 지시문 .</target>
        </trans-unit>
        <trans-unit id="91b3106d7e0128b073f59400b2d855bf5dc85ef6" translate="yes" xml:space="preserve">
          <source>The directive that identifies where the &lt;a href=&quot;type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt; should render its &lt;strong&gt;Components&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 가 &lt;strong&gt;구성 요소를&lt;/strong&gt; 렌더링해야하는 위치를 식별하는 지시문 .</target>
        </trans-unit>
        <trans-unit id="f8e427fdf8b7a0e2bc769988a131cb6027a72d85" translate="yes" xml:space="preserve">
          <source>The directive won't add duplicate classes if a particular class was already set.</source>
          <target state="translated">지시문은 특정 클래스가 이미 설정된 경우 중복 클래스를 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="af273d442182f77e2838bf78efeac232e7701baf" translate="yes" xml:space="preserve">
          <source>The easiest way to reference the control's &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt; method is by making sure the input is placed inside a form that has a &lt;code&gt;name&lt;/code&gt; attribute. This is important because &lt;code&gt;form&lt;/code&gt; controllers are published to the related scope under the name in their &lt;code&gt;name&lt;/code&gt; attribute.</source>
          <target state="translated">컨트롤의 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24rollbackViewValue.html&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt; 메소드 를 참조하는 가장 쉬운 방법 은 &lt;code&gt;name&lt;/code&gt; 속성 이있는 양식 안에 입력을 배치하는 것입니다 . &lt;code&gt;form&lt;/code&gt; 컨트롤러는 &lt;code&gt;name&lt;/code&gt; 속성 의 이름으로 관련 범위에 게시 되므로 중요 합니다.</target>
        </trans-unit>
        <trans-unit id="b2fa37ba708729a70880e839aacbcf83f7ee4ecc" translate="yes" xml:space="preserve">
          <source>The easiest way to unit-test a component controller is by using the &lt;a href=&quot;../api/ngmock/service/%24componentcontroller&quot;&gt;$componentController&lt;/a&gt; that is included in &lt;a href=&quot;../api/ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt;. The advantage of this method is that you do not have to create any DOM elements. The following example shows how to do this for the &lt;code&gt;heroDetail&lt;/code&gt; component from above.</source>
          <target state="translated">컴포넌트 컨트롤러를 테스트하는 가장 쉬운 방법 은 &lt;a href=&quot;../api/ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; 에&lt;/a&gt; 포함 된 &lt;a href=&quot;../api/ngmock/service/%24componentcontroller&quot;&gt;$ componentController&lt;/a&gt; 를 사용하는 것 입니다. 이 방법의 장점은 DOM 요소를 만들 필요가 없다는 것입니다. 다음 예제는 위에서 &lt;code&gt;heroDetail&lt;/code&gt; 컴포넌트에 대해이를 수행하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="1dba15ddc68176129beff67ce23ae391d8f5e9b2" translate="yes" xml:space="preserve">
          <source>The element is shown or hidden by removing or adding the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class onto the element. The &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is predefined in AngularJS and sets the display style to none (using an &lt;code&gt;!important&lt;/code&gt; flag). For CSP mode please add &lt;code&gt;angular-csp.css&lt;/code&gt; to your HTML file (see &lt;a href=&quot;ngcsp&quot;&gt;ngCsp&lt;/a&gt;).</source>
          <target state="translated">요소는 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스를 제거하거나 요소에 추가하여 요소를 표시하거나 숨 깁니다 . &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스는 AngularJS와의 사전 정의 (AN 사용 none으로 표시 스타일 설정입니다 &lt;code&gt;!important&lt;/code&gt; 플래그). CSP 모드의 경우 &lt;code&gt;angular-csp.css&lt;/code&gt; 를 HTML 파일에 추가 하십시오 ( &lt;a href=&quot;ngcsp&quot;&gt;ngCsp&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7ccfb7caa29243ea5f83ef0ab8642feaa5add93c" translate="yes" xml:space="preserve">
          <source>The element name or '*' to match any element.</source>
          <target state="translated">요소 이름 또는 '*'는 모든 요소와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d6f6332d7faa347a9930f464a7c8e2d5542086d4" translate="yes" xml:space="preserve">
          <source>The empty array in &lt;code&gt;angular.module('myApp', [])&lt;/code&gt;. This array is the list of modules &lt;code&gt;myApp&lt;/code&gt; depends on.</source>
          <target state="translated">&lt;code&gt;angular.module('myApp', [])&lt;/code&gt; 의 빈 배열입니다 . 이 배열은 &lt;code&gt;myApp&lt;/code&gt; 이 의존하는 모듈 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="7bc9a115378ed99db9c2142b56d9fc3aa535767e" translate="yes" xml:space="preserve">
          <source>The enter and leave animation occur concurrently.</source>
          <target state="translated">들어오고 나가는 애니메이션이 동시에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b13d56ee0aa77bc8cf191a0098e0ae12681eb3cb" translate="yes" xml:space="preserve">
          <source>The event life cycle starts at the scope on which &lt;code&gt;$broadcast&lt;/code&gt; was called. All &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; listening for &lt;code&gt;name&lt;/code&gt; event on this scope get notified. Afterwards, the event propagates to all direct and indirect scopes of the current scope and calls all registered listeners along the way. The event cannot be canceled.</source>
          <target state="translated">이벤트 수명주기는 &lt;code&gt;$broadcast&lt;/code&gt; 가 호출 된 범위에서 시작됩니다 . 이 범위 에서 &lt;code&gt;name&lt;/code&gt; 이벤트를 수신하는 모든 &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;리스너&lt;/a&gt; 에게 알립니다. 그 후 이벤트는 현재 범위의 모든 직접 및 간접 범위로 전파되고 등록 된 모든 리스너를 도중에 호출합니다. 이벤트를 취소 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ef1ec4f5065965f767cdb19361d488e339b8e865" translate="yes" xml:space="preserve">
          <source>The event life cycle starts at the scope on which &lt;code&gt;$emit&lt;/code&gt; was called. All &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;listeners&lt;/a&gt; listening for &lt;code&gt;name&lt;/code&gt; event on this scope get notified. Afterwards, the event traverses upwards toward the root scope and calls all registered listeners along the way. The event will stop propagating if one of the listeners cancels it.</source>
          <target state="translated">이벤트 수명주기는 &lt;code&gt;$emit&lt;/code&gt; 이 호출 된 범위에서 시작됩니다 . 이 범위 에서 &lt;code&gt;name&lt;/code&gt; 이벤트를 수신하는 모든 &lt;a href=&quot;%24rootscope.scope#%24on.html&quot;&gt;리스너&lt;/a&gt; 에게 알립니다. 그 후, 이벤트는 루트 범위를 향하여 위쪽으로 이동하고 등록 된 모든 리스너를 그 길을 따라 호출합니다. 리스너 중 하나가 취소하면 이벤트 전파가 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="9dba21cdf767393b24f9c532ed6d7024629e7654" translate="yes" xml:space="preserve">
          <source>The event listener function format is: &lt;code&gt;function(event, args...)&lt;/code&gt;. The &lt;code&gt;event&lt;/code&gt; object passed into the listener has the following attributes:</source>
          <target state="translated">이벤트 리스너 함수 형식은 &lt;code&gt;function(event, args...)&lt;/code&gt; 입니다. 리스너에 전달 된 &lt;code&gt;event&lt;/code&gt; 객체에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9dc8aea8f492b469f1f28002083ced0171b9068" translate="yes" xml:space="preserve">
          <source>The event's callback gets executed. This enters the JavaScript context. The callback can modify the DOM structure.</source>
          <target state="translated">이벤트의 콜백이 실행됩니다. JavaScript 컨텍스트로 들어갑니다. 콜백은 DOM 구조를 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6d577c1df19a49c4d3d3fea271e11112de46dcd" translate="yes" xml:space="preserve">
          <source>The example above also contains a &lt;a href=&quot;filter&quot;&gt;filter&lt;/a&gt;. A filter formats the value of an expression for display to the user. In the example above, the filter &lt;a href=&quot;../api/ng/filter/currency&quot;&gt;&lt;code&gt;currency&lt;/code&gt;&lt;/a&gt; formats a number into an output that looks like money.</source>
          <target state="translated">위의 예에는 &lt;a href=&quot;filter&quot;&gt;필터&lt;/a&gt; 도 포함되어 있습니다 . 필터는 사용자에게 표시 할 표현식의 값을 형식화합니다. 위의 예에서 필터 &lt;a href=&quot;../api/ng/filter/currency&quot;&gt; &lt;code&gt;currency&lt;/code&gt; &lt;/a&gt; 는 숫자를 돈처럼 보이는 출력 형식으로 지정합니다.</target>
        </trans-unit>
        <trans-unit id="93c49d25f095d6630edee2c4ee7687214904ed84" translate="yes" xml:space="preserve">
          <source>The example above sets up a transition for both the in and out phases, but we can also target the out or in phases directly via &lt;code&gt;ng-anchor-out&lt;/code&gt; and &lt;code&gt;ng-anchor-in&lt;/code&gt;.</source>
          <target state="translated">위의 예는 시작 및 종료 단계 모두에 대한 전환을 설정하지만 &lt;code&gt;ng-anchor-out&lt;/code&gt; 및 &lt;code&gt;ng-anchor-in&lt;/code&gt; 을 통해 직접 또는 단계를 대상으로 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ae348e668faf38c45aa29b06f0b38359e62a7332" translate="yes" xml:space="preserve">
          <source>The example also shows the &quot;offset&quot; keyword, which allows you to offset the value of the &quot;#&quot; variable.</source>
          <target state="translated">또한 &quot;#&quot;변수의 값을 오프셋 할 수있는 &quot;offset&quot;키워드도 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="dcef32a0c9e7e773d2caa1d0facc04649077955b" translate="yes" xml:space="preserve">
          <source>The example below demonstrates a simple &lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;, where the data is sorted by age in descending order (expression is set to &lt;code&gt;'-age'&lt;/code&gt;). The &lt;code&gt;comparator&lt;/code&gt; is not set, which means it defaults to the built-in comparator.</source>
          <target state="translated">아래 예제는 간단한 &lt;a href=&quot;../directive/ngrepeat&quot;&gt;ngRepeat를&lt;/a&gt; 보여줍니다. 여기서 데이터는 연령별로 내림차순으로 정렬됩니다 (표현식은 &lt;code&gt;'-age'&lt;/code&gt; 로 설정 됨 ). &lt;code&gt;comparator&lt;/code&gt; 내장 비교기에 기본값을 의미하는 설정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="118b4a4365ad487da58b1630aea69b571bfdefff" translate="yes" xml:space="preserve">
          <source>The example below demonstrates how to perform animations using ngClass.</source>
          <target state="translated">아래 예제는 ngClass를 사용하여 애니메이션을 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="b5901cc794ac4afcb24616439a439ca1a38725ff" translate="yes" xml:space="preserve">
          <source>The example below illustrates the use of a vertical scroll-offset (specified as a fixed value). See &lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;$anchorScroll.yOffset&lt;/a&gt; for more details.</source>
          <target state="translated">아래 예제는 세로 스크롤 오프셋 (고정 값으로 지정)을 사용하는 방법을 보여줍니다. 자세한 내용은 &lt;a href=&quot;%24anchorscroll#yOffset.html&quot;&gt;$ anchorScroll.yOffset&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a78d05887665a9a98ad3b3ca5dd98170ce670e6e" translate="yes" xml:space="preserve">
          <source>The example below makes use of this feature:</source>
          <target state="translated">아래 예는이 기능을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="14f320b8cc2e2763c82039f6b188aeca101a77fe" translate="yes" xml:space="preserve">
          <source>The example below showcases a more advanced version of the &lt;code&gt;.fold-animation&lt;/code&gt; from the example above:</source>
          <target state="translated">아래 예는 위 예에서 &lt;code&gt;.fold-animation&lt;/code&gt; 의 고급 버전을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e6fe351ea2c33b51b2ae753847781d2a1ebb1324" translate="yes" xml:space="preserve">
          <source>The example below shows how an &lt;code&gt;enter&lt;/code&gt; animation can be made possible on an element using &lt;code&gt;ng-if&lt;/code&gt;:</source>
          <target state="translated">아래 예제는 &lt;code&gt;ng-if&lt;/code&gt; 를 사용하여 요소에서 &lt;code&gt;enter&lt;/code&gt; 애니메이션을 만드는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="d01c3c0993f97fc120473f6fed8b31a7663c420f" translate="yes" xml:space="preserve">
          <source>The example below shows how to perform animations during class changes:</source>
          <target state="translated">아래 예는 수업 변경 중에 애니메이션을 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="6205078d09d3fd1c6edadc598319a67cba2952e4" translate="yes" xml:space="preserve">
          <source>The example below shows how we can create a folding animation on an element using &lt;code&gt;ng-if&lt;/code&gt;:</source>
          <target state="translated">아래 예제는 &lt;code&gt;ng-if&lt;/code&gt; 를 사용하여 요소에 접기 애니메이션을 만드는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9e746afeaac000344d9d6b97ab0c580a09fc7751" translate="yes" xml:space="preserve">
          <source>The example below therefore calls the filter directly in the controller. By this, the controller is able to call the filter only when needed (e.g. when the data is loaded from the backend or the filter expression is changed).</source>
          <target state="translated">따라서 아래 예제는 컨트롤러에서 직접 필터를 호출합니다. 이를 통해 컨트롤러는 필요할 때만 (예 : 백엔드에서 데이터가로드되거나 필터식이 변경 될 때) 필터를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de23243571a260c0d0fc8a2c48e1af5d73b5b207" translate="yes" xml:space="preserve">
          <source>The example below uses the filter called &lt;a href=&quot;../api/ng/filter/filter&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;. This filter reduces arrays into sub arrays based on conditions. The filter can be applied in the view template with markup like &lt;code&gt;{{ctrl.array | filter:'a'}}&lt;/code&gt;, which would do a fulltext search for &quot;a&quot;. However, using a filter in a view template will reevaluate the filter on every digest, which can be costly if the array is big.</source>
          <target state="translated">아래 예제는 filter라는 &lt;a href=&quot;../api/ng/filter/filter&quot;&gt; &lt;code&gt;filter&lt;/code&gt; &lt;/a&gt; 사용합니다 . 이 필터는 조건에 따라 배열을 하위 배열로 줄입니다. 이 필터는 &lt;code&gt;{{ctrl.array | filter:'a'}}&lt;/code&gt; &quot;a&quot;에 대한 전체 텍스트 검색을 수행하는 filter : 'a'}} 그러나 뷰 템플릿에서 필터를 사용하면 모든 다이제스트에서 필터를 다시 평가하므로 배열이 큰 경우 비용이 많이들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dffb86218d7a4f9da6fc690c45a79f6af3702634" translate="yes" xml:space="preserve">
          <source>The example below will overwrite the default &lt;code&gt;$exceptionHandler&lt;/code&gt; in order to (a) log uncaught errors to the backend for later inspection by the developers and (b) to use &lt;code&gt;$log.warn()&lt;/code&gt; instead of &lt;code&gt;$log.error()&lt;/code&gt;.</source>
          <target state="translated">아래의 예는 기본 덮어 &lt;code&gt;$exceptionHandler&lt;/code&gt; (가) 사용 후에 개발자에 의한 검사와 (b)에 대한 백엔드에 포착되지 않은 오류 로그에 위해를 &lt;code&gt;$log.warn()&lt;/code&gt; 대신 &lt;code&gt;$log.error()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ffbd243d6aa30bd959233397fedd53c9c8be3b8b" translate="yes" xml:space="preserve">
          <source>The example module below has two services, each with various dependencies:</source>
          <target state="translated">아래 예제 모듈에는 각각 다양한 종속성이있는 두 가지 서비스가 있습니다.</target>
        </trans-unit>
        <trans-unit id="26b88996606efd1a2fa2d1f8ee91c2b93f5de125" translate="yes" xml:space="preserve">
          <source>The examples use the &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; testing framework.</source>
          <target state="translated">이 예에서는 &lt;a href=&quot;http://jasmine.github.io/&quot;&gt;Jasmine&lt;/a&gt; 테스트 프레임 워크를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="69df9ff2c507a1bca5d9605667ecdf1f7c1667e3" translate="yes" xml:space="preserve">
          <source>The expression indicating how to enumerate a collection. These formats are currently supported:</source>
          <target state="translated">컬렉션을 열거하는 방법을 나타내는 식입니다. 이 형식은 현재 지원됩니다 :</target>
        </trans-unit>
        <trans-unit id="fb146546194737424a42b8fcad30d7883d5da959" translate="yes" xml:space="preserve">
          <source>The factory function is invoked only once when the &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;compiler&lt;/a&gt; matches the directive for the first time. You can perform any initialization work here. The function is invoked using &lt;a href=&quot;../api/auto/service/%24injector#invoke.html&quot;&gt;$injector.invoke&lt;/a&gt; which makes it injectable just like a controller.</source>
          <target state="translated">팩토리 함수는 &lt;a href=&quot;../api/ng/service/%24compile&quot;&gt;컴파일러&lt;/a&gt; 가 지시문을 처음으로 일치시킬 때 한 번만 호출됩니다 . 여기서 초기화 작업을 수행 할 수 있습니다. 이 함수는 &lt;a href=&quot;../api/auto/service/%24injector#invoke.html&quot;&gt;$ injector.invoke&lt;/a&gt; 를 사용하여 호출 되므로 컨트롤러처럼 주입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bac0300463ee737a9762b2ab131e79710f19a302" translate="yes" xml:space="preserve">
          <source>The factory function that will be executed to return the animation object.</source>
          <target state="translated">애니메이션 객체를 반환하기 위해 실행될 팩토리 함수입니다.</target>
        </trans-unit>
        <trans-unit id="9b2b49cac29c83329e4d2e42cf31d5ed84a9baa0" translate="yes" xml:space="preserve">
          <source>The filter function is registered with the &lt;code&gt;$injector&lt;/code&gt; under the filter name suffix with &lt;code&gt;Filter&lt;/code&gt;.</source>
          <target state="translated">필터 기능은 &lt;code&gt;$injector&lt;/code&gt; 필터와 함께 &lt;code&gt;Filter&lt;/code&gt; 이름 접미사 아래 $ injector 에 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="ad14f184c35849cbc77ad9f33986e01e4fc80461" translate="yes" xml:space="preserve">
          <source>The filter function should be a &lt;a href=&quot;http://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;, which means that it should always return the same result given the same input arguments and should not affect external state, for example, other AngularJS services. AngularJS relies on this contract and will by default execute a filter only when the inputs to the function change. &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;Stateful filters&lt;/a&gt; are possible, but less performant.</source>
          <target state="translated">필터 함수는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Pure_function&quot;&gt;순수&lt;/a&gt; 함수 여야합니다. 즉, 동일한 입력 인수가 지정된 경우 항상 동일한 결과를 반환해야하며 다른 AngularJS 서비스와 같은 외부 상태에는 영향을 미치지 않아야합니다. AngularJS는이 계약에 의존하며 기본적으로 함수 입력이 변경 될 때만 필터를 실행합니다. &lt;a href=&quot;filter#stateful-filters.html&quot;&gt;상태 저장 필터&lt;/a&gt; 는 가능하지만 성능이 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="17c03d18cc2cc78ca4084addd3298d3bc070061e" translate="yes" xml:space="preserve">
          <source>The filter function which will be used to filter all animations. If a falsy value is returned, no animation will be performed. The function will be called with the following arguments:</source>
          <target state="translated">모든 애니메이션을 필터링하는 데 사용되는 필터 기능입니다. 잘못된 값이 반환되면 애니메이션이 수행되지 않습니다. 이 함수는 다음과 같은 인수로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a937ae27c98f5d7954639b98bccb584d67a2cdbf" translate="yes" xml:space="preserve">
          <source>The final result is an array of those elements that the predicate returned true for.</source>
          <target state="translated">최종 결과는 술어가 true를 리턴 한 해당 요소의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="c07e6b5dfc2388c07c722e7af813875eb5b9564a" translate="yes" xml:space="preserve">
          <source>The first issue we have to solve is that the dialog box template expects &lt;code&gt;title&lt;/code&gt; to be defined. But we would like the template's scope property &lt;code&gt;title&lt;/code&gt; to be the result of interpolating the &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; element's &lt;code&gt;title&lt;/code&gt; attribute (i.e. &lt;code&gt;&quot;Hello {{username}}&quot;&lt;/code&gt;). Furthermore, the buttons expect the &lt;code&gt;onOk&lt;/code&gt; and &lt;code&gt;onCancel&lt;/code&gt; functions to be present in the scope. This limits the usefulness of the widget. To solve the mapping issue we use the &lt;code&gt;scope&lt;/code&gt; to create local variables which the template expects as follows:</source>
          <target state="translated">우리가 해결해야 할 첫 번째 문제는 대화 상자 템플릿에 &lt;code&gt;title&lt;/code&gt; 이 정의되어 있어야한다는 것입니다. 그러나 템플릿의 범위 속성 &lt;code&gt;title&lt;/code&gt; 이 &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; 요소의 &lt;code&gt;title&lt;/code&gt; 속성 (예 : &lt;code&gt;&quot;Hello {{username}}&quot;&lt;/code&gt; ) 을 보간 한 결과가 되길 바랍니다 . 또한 버튼은 &lt;code&gt;onOk&lt;/code&gt; 및 &lt;code&gt;onCancel&lt;/code&gt; 기능이 범위에있을 것으로 예상합니다 . 이것은 위젯의 유용성을 제한합니다. 매핑 문제를 해결하기 위해 &lt;code&gt;scope&lt;/code&gt; 를 사용하여 템플릿에서 다음과 같이 예상되는 로컬 변수를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="afe6d764a0f6fdc60d923fd9d9a7197ddd360bfa" translate="yes" xml:space="preserve">
          <source>The first kind of new markup are the &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt;. They apply special behavior to attributes or elements in the HTML. In the example above we use the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ng-app&lt;/code&gt;&lt;/a&gt; attribute, which is linked to a directive that automatically initializes our application. AngularJS also defines a directive for the &lt;a href=&quot;../api/ng/directive/input&quot;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; element that adds extra behavior to the element. The &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;&lt;code&gt;ng-model&lt;/code&gt;&lt;/a&gt; directive stores/updates the value of the input field into/from a variable.</source>
          <target state="translated">새로운 마크 업의 첫 번째 종류는 &lt;a href=&quot;directive&quot;&gt;지시어&lt;/a&gt; 입니다. HTML의 속성 또는 요소에 특수 동작을 적용합니다. 위의 예에서는 응용 프로그램을 자동으로 초기화하는 지시문에 연결된 &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ng-app&lt;/code&gt; &lt;/a&gt; 특성을 사용합니다 . AngularJS는 요소에 추가 동작을 추가 하는 &lt;a href=&quot;../api/ng/directive/input&quot;&gt; &lt;code&gt;input&lt;/code&gt; &lt;/a&gt; 요소에 대한 지시문도 정의합니다 . &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt; &lt;code&gt;ng-model&lt;/code&gt; &lt;/a&gt; 지시자 저장 / 가변으로부터 /으로의 입력 필드의 값을 갱신한다.</target>
        </trans-unit>
        <trans-unit id="72248b4ea7e8efbe0801cfc5a9d27f183313c350" translate="yes" xml:space="preserve">
          <source>The first time a template is used, it is loaded in the template cache for quick retrieval. You can load templates directly into the cache in a &lt;code&gt;script&lt;/code&gt; tag, by using &lt;a href=&quot;%24templaterequest&quot;&gt;&lt;code&gt;$templateRequest&lt;/code&gt;&lt;/a&gt;, or by consuming the &lt;code&gt;$templateCache&lt;/code&gt; service directly.</source>
          <target state="translated">템플릿을 처음 사용하는 경우 빠른 검색을 위해 템플릿 캐시에로드됩니다. &lt;a href=&quot;%24templaterequest&quot;&gt; &lt;code&gt;$templateRequest&lt;/code&gt; &lt;/a&gt; 를 사용 하거나 &lt;code&gt;$templateCache&lt;/code&gt; 서비스를 직접 사용하여 &lt;code&gt;script&lt;/code&gt; 태그 의 캐시에 템플릿을 직접로드 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="61770f6e44a5dc9205ef2b85eee18df352de6525" translate="yes" xml:space="preserve">
          <source>The first two options of creating or looking up dependencies are not optimal because they hard code the dependency to the component. This makes it difficult, if not impossible, to modify the dependencies. This is especially problematic in tests, where it is often desirable to provide mock dependencies for test isolation.</source>
          <target state="translated">종속성을 생성하거나 조회하는 처음 두 옵션은 구성 요소에 대한 종속성을 하드 코딩하기 때문에 최적이 아닙니다. 이것은 불가능하지는 않지만 의존성을 수정하는 것을 어렵게 만듭니다. 이는 테스트 격리에 모의 종속성을 제공하는 것이 바람직한 테스트에서 특히 문제가됩니다.</target>
        </trans-unit>
        <trans-unit id="62d51362fba403748b0965a7020906ff662204d7" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element also &lt;strong&gt;matches&lt;/strong&gt;&lt;code&gt;ngModel&lt;/code&gt;:</source>
          <target state="translated">다음 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 요소는 &lt;code&gt;ngModel&lt;/code&gt; 과도 &lt;strong&gt;일치 &lt;/strong&gt;합니다 .</target>
        </trans-unit>
        <trans-unit id="1ce1ad6bc1a7291d5ceb94bf63f28f4491ef44ee" translate="yes" xml:space="preserve">
          <source>The following CSS classes are added and removed on the associated input/select/textarea element depending on the validity of the model.</source>
          <target state="translated">다음 CSS 클래스는 모델의 유효성에 따라 연관된 입력 / 선택 / 텍스트 영역 요소에서 추가 및 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="24d21f0a2fb05faaab9a9fee5841089389838e09" translate="yes" xml:space="preserve">
          <source>The following actions are performed by this method:</source>
          <target state="translated">이 방법으로 다음 작업이 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="973c90fb359da23554571110c18a1c4f53efc003" translate="yes" xml:space="preserve">
          <source>The following always holds true:</source>
          <target state="translated">다음은 항상 사실입니다.</target>
        </trans-unit>
        <trans-unit id="36b240b14e8533a4756636899c699ce28b123d00" translate="yes" xml:space="preserve">
          <source>The following code demonstrates adding a new response transformation to be run after the default response transformations have been run.</source>
          <target state="translated">다음 코드는 기본 응답 변환이 실행 된 후 실행될 새 응답 변환을 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="5254b655f465a130e45d925ee2b74ce105150f95" translate="yes" xml:space="preserve">
          <source>The following code shows how to setup and use the mock backend when unit testing a controller. First we create the controller under test:</source>
          <target state="translated">다음 코드는 컨트롤러를 테스트 할 때 모의 백엔드를 설정하고 사용하는 방법을 보여줍니다. 먼저 테스트중인 컨트롤러를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="df345b34d500c13d2031f5af048b74463c6d90d4" translate="yes" xml:space="preserve">
          <source>The following code snippet shows a template with &lt;a href=&quot;directive&quot;&gt;directives&lt;/a&gt; and curly-brace &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; bindings:</source>
          <target state="translated">다음 코드 스 니펫은 &lt;a href=&quot;directive&quot;&gt;지시문&lt;/a&gt; 및 중괄호 &lt;a href=&quot;expression&quot;&gt;표현식&lt;/a&gt; 바인딩이 있는 템플리트를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="c60eb5d3ceb258f2551ba66c48b7dc7f79064316" translate="yes" xml:space="preserve">
          <source>The following code will issue the &lt;strong&gt;ng-leave-stagger&lt;/strong&gt; event on the element provided:</source>
          <target state="translated">다음 코드는 제공된 요소 에서 &lt;strong&gt;ng-leave-stagger&lt;/strong&gt; 이벤트를 발행합니다 .</target>
        </trans-unit>
        <trans-unit id="4fd205de158756329787742f78166e78f85ffa62" translate="yes" xml:space="preserve">
          <source>The following default rules in CSP affect AngularJS:</source>
          <target state="translated">CSP의 다음 기본 규칙은 AngularJS에 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="90134ab79d7f6b3200f1037dc0cc7a63032e5047" translate="yes" xml:space="preserve">
          <source>The following demonstrates the various ways a directive (&lt;code&gt;myDir&lt;/code&gt; in this case) that matches all 4 types can be referenced from within a template.</source>
          <target state="translated">다음 은 템플릿 내에서 4 가지 유형 모두와 일치 하는 지시문 ( 이 경우 &lt;code&gt;myDir&lt;/code&gt; )을 참조 할 수있는 다양한 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="cc2bb4d34c36efedb43f32cea70a8768eb4ff2f4" translate="yes" xml:space="preserve">
          <source>The following directives are &quot;animation aware&quot;:</source>
          <target state="translated">다음 지시문은 &quot;애니메이션 인식&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="4afa83c5e442e93a0c03e046c0962ecf7210c99b" translate="yes" xml:space="preserve">
          <source>The following example demonstrates creating a &lt;code&gt;GreetingController&lt;/code&gt;, which attaches a &lt;code&gt;greeting&lt;/code&gt; property containing the string &lt;code&gt;'Hola!'&lt;/code&gt; to the &lt;code&gt;$scope&lt;/code&gt;:</source>
          <target state="translated">다음 예제에서는 문자열 &lt;code&gt;'Hola!'&lt;/code&gt; 를 포함 하는 &lt;code&gt;greeting&lt;/code&gt; 속성 을 첨부 하는 &lt;code&gt;GreetingController&lt;/code&gt; 를 만드는 방법을 보여줍니다 . 받는 &lt;code&gt;$scope&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="8f31c0ae4dcad4687f763e1857697fa67941c2cf" translate="yes" xml:space="preserve">
          <source>The following example expands on the simple component example and incorporates the concepts we introduced above:</source>
          <target state="translated">다음 예제는 간단한 컴포넌트 예제를 확장하고 위에서 소개 한 개념을 통합합니다.</target>
        </trans-unit>
        <trans-unit id="a68dc016c804a0669d2cdafc91c3941186cea38f" translate="yes" xml:space="preserve">
          <source>The following example shows a simple way to utilize CSS transitions to style a form element that has been rendered as invalid after it has been validated:</source>
          <target state="translated">다음 예제는 유효성 검사 후 유효하지 않은 것으로 렌더링 된 양식 요소의 스타일을 지정하기 위해 CSS 전환을 활용하는 간단한 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="56aa8c2fcf843e9817067b3a89350a550b362ccb" translate="yes" xml:space="preserve">
          <source>The following example shows a simple way to utilize CSS transitions to style an input element that has been rendered as invalid after it has been validated:</source>
          <target state="translated">다음 예제는 유효성 검사 후 유효하지 않은 것으로 렌더링 된 입력 요소의 스타일을 지정하기 위해 CSS 전환을 활용하는 간단한 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="afb31a9a68862c6afcf96f6c3e11bb32e67080a5" translate="yes" xml:space="preserve">
          <source>The following example shows how to add two-way data-binding to contentEditable elements.</source>
          <target state="translated">다음 예제는 contentEditable 요소에 양방향 데이터 바인딩을 추가하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d29bf3e06de230de3418eaafced38ca904f8bad6" translate="yes" xml:space="preserve">
          <source>The following example shows how to bind to getter/setters:</source>
          <target state="translated">다음 예제는 getter / setter에 바인딩하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="cf64ab22fdb663548e6a4a5465819cfebca2122b" translate="yes" xml:space="preserve">
          <source>The following example shows how to configure ngPluralize:</source>
          <target state="translated">다음 예제는 ngPluralize를 구성하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e211088f2987b057c3e47ee8d0f916c1b541890a" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a simple event tracking service and register it using &lt;a href=&quot;%24provide#provider.html&quot;&gt;$provide.provider()&lt;/a&gt;.</source>
          <target state="translated">다음 예제는 간단한 이벤트 추적 서비스를 작성하고 &lt;a href=&quot;%24provide#provider.html&quot;&gt;$ provide.provider ()를&lt;/a&gt; 사용하여 등록하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="49e8cb0259845374b5503fd5a0834e0ef3de3ec3" translate="yes" xml:space="preserve">
          <source>The following example shows how to override immediate updates. Changes on the inputs within the form will update the model only when the control loses focus (blur event).</source>
          <target state="translated">다음 예는 즉시 업데이트를 무시하는 방법을 보여줍니다. 폼 내 입력의 변경은 컨트롤이 포커스를 잃을 때만 (블러 이벤트) 모델을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="608da6d18fbad58a833f943d30704c458a019301" translate="yes" xml:space="preserve">
          <source>The following example shows how to override immediate updates. Changes on the inputs within the form will update the model only when the control loses focus (blur event). If &lt;code&gt;escape&lt;/code&gt; key is pressed while the input field is focused, the value is reset to the value in the current model.</source>
          <target state="translated">다음 예는 즉시 업데이트를 무시하는 방법을 보여줍니다. 폼 내 입력의 변경은 컨트롤이 포커스를 잃을 때만 (블러 이벤트) 모델을 업데이트합니다. 경우 &lt;code&gt;escape&lt;/code&gt; 입력 필드에 초점이 맞춰있는 동안 키를 누르면, 값은 현재 모델의 값으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="e25b61977236b595c690c1add8ceee3f297224e6" translate="yes" xml:space="preserve">
          <source>The following example shows how to use &lt;code&gt;ngModel&lt;/code&gt; with a getter/setter:</source>
          <target state="translated">다음 예제는 &lt;code&gt;ngModel&lt;/code&gt; 을 getter / setter와 함께 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="d8828073febfc88b7e929349ee1005c112427e4d" translate="yes" xml:space="preserve">
          <source>The following example shows the effects of different actions with tracking:</source>
          <target state="translated">다음 예는 추적시 다양한 작업의 영향을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="49526c0cbe72823024948149f2ba222e9dcacf1d" translate="yes" xml:space="preserve">
          <source>The following example uses a Controller to add a method, which doubles a number, to the scope:</source>
          <target state="translated">다음 예제에서는 Controller를 사용하여 숫자를 두 배로 늘리는 메소드를 범위에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="c5d5572a6af9e099a94051501ec7017d831c20b8" translate="yes" xml:space="preserve">
          <source>The following example uses the CSS to display validity of each form control. In the example both &lt;code&gt;user.name&lt;/code&gt; and &lt;code&gt;user.email&lt;/code&gt; are required, but are rendered with red background only after the input is blurred (loses focus). This ensures that the user is not distracted with an error until after interacting with the control, and failing to satisfy its validity.</source>
          <target state="translated">다음 예제는 CSS를 사용하여 각 양식 컨트롤의 유효성을 표시합니다. 이 예에서는 &lt;code&gt;user.name&lt;/code&gt; 과 &lt;code&gt;user.email&lt;/code&gt; 이 모두 필요하지만 입력이 흐려진 후에 만 ​​초점이 사라진 빨간색 배경으로 렌더링됩니다. 이렇게하면 컨트롤과 상호 작용 한 후 유효성을 충족하지 못할 때까지 사용자가주의를 산만하게하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="33f68f854869fc32d143f52645cecc54d4d0c1ad" translate="yes" xml:space="preserve">
          <source>The following graphic shows how everything works together after we introduced the controller:</source>
          <target state="translated">다음 그래픽은 컨트롤러를 소개 한 후 모든 것이 어떻게 작동하는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="385ffec593477822ca164a235f1fdf7ebf15040e" translate="yes" xml:space="preserve">
          <source>The following is a unit test for the &lt;code&gt;notify&lt;/code&gt; service from the &lt;a href=&quot;services#creating-services.html&quot;&gt;Creating AngularJS Services&lt;/a&gt; example above. The unit test example uses a Jasmine spy (mock) instead of a real browser alert.</source>
          <target state="translated">다음은 위의 &lt;a href=&quot;services#creating-services.html&quot;&gt;AngularJS 서비스 작성&lt;/a&gt; 예제 에서 &lt;code&gt;notify&lt;/code&gt; 서비스에 대한 단위 테스트입니다 . 단위 테스트 예제는 실제 브라우저 경보 대신 Jasmine spy (mock)를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="fb989a297b5370085b89e00c936b323f1015a9ee" translate="yes" xml:space="preserve">
          <source>The following sample filter reverses a text string. In addition, it conditionally makes the text upper-case.</source>
          <target state="translated">다음 샘플 필터는 텍스트 문자열을 반대로 바꿉니다. 또한 조건부로 텍스트를 대문자로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5abf89865b72c60e74a4308a79f260298a1552b3" translate="yes" xml:space="preserve">
          <source>The following sections provide examples each of a service decorator, a directive decorator, and a filter decorator.</source>
          <target state="translated">다음 섹션에서는 서비스 데코레이터, 지시어 데코레이터 및 필터 데코레이터 각각의 예를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="502dad06b34317ceffa57aeaaa0edcf7aa769750" translate="yes" xml:space="preserve">
          <source>The format of the displayed time can be adjusted with the &lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions&lt;/a&gt;&lt;code&gt;timeSecondsFormat&lt;/code&gt; and &lt;code&gt;timeStripZeroSeconds&lt;/code&gt;.</source>
          <target state="translated">표시된 시간의 형식은 &lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions &lt;/a&gt; &lt;code&gt;timeSecondsFormat&lt;/code&gt; 및 &lt;code&gt;timeStripZeroSeconds&lt;/code&gt; 로 조정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef6e74dc8057c84b4bdc44fbe57d05d3eb5ca2ac" translate="yes" xml:space="preserve">
          <source>The former CSS className value</source>
          <target state="translated">이전 CSS className 값</target>
        </trans-unit>
        <trans-unit id="c347b16354fe80c4ac3b3f67a7e1632c4e3f4b10" translate="yes" xml:space="preserve">
          <source>The four events are &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, and &lt;code&gt;cancel&lt;/code&gt;. &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; receive as a parameter a coordinates object of the form &lt;code&gt;{ x: 150, y: 310 }&lt;/code&gt; and the raw &lt;code&gt;event&lt;/code&gt;. &lt;code&gt;cancel&lt;/code&gt; receives the raw &lt;code&gt;event&lt;/code&gt; as its single parameter.</source>
          <target state="translated">네 가지 이벤트는 &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;move&lt;/code&gt; , &lt;code&gt;end&lt;/code&gt; 및 &lt;code&gt;cancel&lt;/code&gt; 입니다. &lt;code&gt;start&lt;/code&gt; , &lt;code&gt;move&lt;/code&gt; , &lt;code&gt;end&lt;/code&gt; 는 매개 변수로 &lt;code&gt;{ x: 150, y: 310 }&lt;/code&gt; 형식의 좌표 객체 와 raw &lt;code&gt;event&lt;/code&gt; 를 받습니다. &lt;code&gt;cancel&lt;/code&gt; 은 원시 &lt;code&gt;event&lt;/code&gt; 를 단일 매개 변수로 받습니다 .</target>
        </trans-unit>
        <trans-unit id="a6738ed4a6835a2dce72e58107db0aea9fd2a782" translate="yes" xml:space="preserve">
          <source>The full list of directives that interface with ngAria:</source>
          <target state="translated">ngAria와 인터페이스하는 지시문의 전체 목록 :</target>
        </trans-unit>
        <trans-unit id="2c9494e0230a76ef255530c7ab61e30820ac57e4" translate="yes" xml:space="preserve">
          <source>The function that will decide whether the given character is a valid identifier continue character.</source>
          <target state="translated">주어진 문자가 유효한 식별자 연속 문자인지를 결정하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="e9633fa9ea971735772836de085d84d26552cd07" translate="yes" xml:space="preserve">
          <source>The function that will decide whether the given character is a valid identifier start character.</source>
          <target state="translated">주어진 문자가 유효한 식별자 시작 문자인지를 결정하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="f07c9484695ff7d7e62cb833d2009d5141f8f9c6" translate="yes" xml:space="preserve">
          <source>The functions are called in array order, each passing its return value through to the next. The last return value is forwarded to the &lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt;&lt;code&gt;$validators&lt;/code&gt;&lt;/a&gt; collection.</source>
          <target state="translated">함수는 배열 순서로 호출되며 각각 반환 값을 다음 값으로 전달합니다. 마지막 반환 값은 &lt;a href=&quot;ngmodel.ngmodelcontroller#%24validators.html&quot;&gt; &lt;code&gt;$validators&lt;/code&gt; &lt;/a&gt; 컬렉션으로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="dae7ea2912e98ee65a104da6c13925bc30a72664" translate="yes" xml:space="preserve">
          <source>The functions are called in reverse array order, each passing the value through to the next. The last return value is used as the actual DOM value.</source>
          <target state="translated">함수는 값을 다음 배열로 전달하는 역 배열 순서로 호출됩니다. 마지막 반환 값은 실제 DOM 값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c1882a81b786a1f235f2e723e4c9aff45edba984" translate="yes" xml:space="preserve">
          <source>The gender support is provided by the more generic &quot;select&quot; syntax that is more akin to a switch statement. It is general enough to support use for gender based messages.</source>
          <target state="translated">성별 지원은 switch 문과 더 유사한보다 일반적인 &quot;select&quot;구문에 의해 제공됩니다. 성별 기반 메시지 사용을 지원하기에 충분합니다.</target>
        </trans-unit>
        <trans-unit id="f59bd7db60de9ce08437e7f3e011e5ca3fab98ac" translate="yes" xml:space="preserve">
          <source>The general syntax in templates is as follows:</source>
          <target state="translated">템플릿의 일반적인 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="56c426b734bed528f39225878bb25f07045e803d" translate="yes" xml:space="preserve">
          <source>The goal of ngAria is to improve AngularJS's default accessibility by enabling common &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; attributes that convey state or semantic information for assistive technologies used by persons with disabilities.</source>
          <target state="translated">ngAria의 목표는 장애인이 사용하는 보조 기술에 대한 상태 또는 의미 정보를 전달 하는 일반적인 &lt;a href=&quot;http://www.w3.org/TR/wai-aria/&quot;&gt;ARIA&lt;/a&gt; 속성을 활성화하여 AngularJS의 기본 접근성을 향상시키는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="62f795492acd77aa418074f3e83eb0705e35bd74" translate="yes" xml:space="preserve">
          <source>The hash specifying the element to scroll to. If omitted, the value of &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; will be used.</source>
          <target state="translated">스크롤 할 요소를 지정하는 해시입니다. 생략하면 &lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash ()&lt;/a&gt; 의 값 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c9c5a47c74673d3922e05343a422f461a8e6632" translate="yes" xml:space="preserve">
          <source>The header will &amp;mdash; by default &amp;mdash; &lt;strong&gt;not&lt;/strong&gt; be set for cross-domain requests. This prevents unauthorized servers (e.g. malicious or compromised 3rd-party APIs) from gaining access to your users' XSRF tokens and exposing them to Cross Site Request Forgery. If you want to, you can trust additional origins to also receive the XSRF token, by adding them to &lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt;. This might be useful, for example, if your application, served from &lt;code&gt;example.com&lt;/code&gt;, needs to access your API at &lt;code&gt;api.example.com&lt;/code&gt;. See &lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;$httpProvider.xsrfTrustedOrigins&lt;/a&gt; for more details.</source>
          <target state="translated">헤더는 기본적 으로 도메인 간 요청에 대해 설정 &lt;strong&gt;되지 않습니다&lt;/strong&gt; . 이렇게하면 권한이없는 서버 (예 : 악의적이거나 손상된 타사 API)가 사용자의 XSRF 토큰에 액세스하여 사이트 간 요청 위조에 노출되는 것을 방지합니다. 원하는 경우 &lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt; 에 추가하여 XSRF 토큰을받을 추가 오리진을 신뢰할 수 있습니다 . 예를 들어 &lt;code&gt;example.com&lt;/code&gt; 에서 제공되는 애플리케이션이 &lt;code&gt;api.example.com&lt;/code&gt; 에서 API에 액세스해야하는 경우 유용 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../provider/%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;$ httpProvider.xsrfTrustedOrigins&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="02053663b4fa96bc136f66df077e6715d30724e9" translate="yes" xml:space="preserve">
          <source>The header will &amp;mdash; by default &amp;mdash; &lt;strong&gt;not&lt;/strong&gt; be set for cross-domain requests. This prevents unauthorized servers (e.g. malicious or compromised 3rd-party APIs) from gaining access to your users' XSRF tokens and exposing them to Cross Site Request Forgery. If you want to, you can whitelist additional origins to also receive the XSRF token, by adding them to &lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;xsrfWhitelistedOrigins&lt;/a&gt;. This might be useful, for example, if your application, served from &lt;code&gt;example.com&lt;/code&gt;, needs to access your API at &lt;code&gt;api.example.com&lt;/code&gt;. See &lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;$httpProvider.xsrfWhitelistedOrigins&lt;/a&gt; for more details.</source>
          <target state="translated">기본적 으로 도메인 간 요청 에는 헤더가 설정 &lt;strong&gt;되지 않습니다&lt;/strong&gt; . 이렇게하면 권한이없는 서버 (예 : 악의적이거나 손상된 타사 API)가 사용자의 XSRF 토큰에 액세스하여 크로스 사이트 요청 위조에 노출되는 것을 방지 할 수 있습니다. 원하는 경우 &lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;xsrfWhitelistedOrigins&lt;/a&gt; 에 추가하여 XSRF 토큰을 수신하도록 추가 오리진을 화이트리스트에 추가 할 수 있습니다 . 예를 들어 &lt;code&gt;example.com&lt;/code&gt; 에서 제공되는 애플리케이션이 &lt;code&gt;api.example.com&lt;/code&gt; 의 API에 액세스해야하는 경우 유용 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../provider/%24httpprovider#xsrfWhitelistedOrigins.html&quot;&gt;$ httpProvider.xsrfWhitelistedOrigins&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d9d882e0eea82bc7f30ad5b0b72c42474eb4cf87" translate="yes" xml:space="preserve">
          <source>The heroDetail component now contains new functionality:</source>
          <target state="translated">heroDetail 컴포넌트는 이제 새로운 기능을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="118554a0cc7bb4ae6da007dc27bdce1b33af2df3" translate="yes" xml:space="preserve">
          <source>The impedance mismatch between dynamic applications and static documents is often solved with:</source>
          <target state="translated">동적 응용 프로그램과 정적 문서 간의 임피던스 불일치는 종종 다음과 같이 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="bc88ca9137a8a789d4223b3543e8b24f06c1df98" translate="yes" xml:space="preserve">
          <source>The important thing in the example is that AngularJS provides &lt;em&gt;live&lt;/em&gt; bindings: Whenever the input values change, the value of the expressions are automatically recalculated and the DOM is updated with their values. The concept behind this is &lt;a href=&quot;databinding&quot;&gt;two-way data binding&lt;/a&gt;.</source>
          <target state="translated">예제에서 중요한 것은 AngularJS가 &lt;em&gt;라이브&lt;/em&gt; 바인딩을 제공한다는 것입니다. 입력 값이 변경 될 때마다 표현식 값이 자동으로 다시 계산되고 DOM이 해당 값으로 업데이트됩니다. 이것의 개념은 &lt;a href=&quot;databinding&quot;&gt;양방향 데이터 바인딩&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="feb47f0357163525e9a17e43f4fdaa136b3a9b3a" translate="yes" xml:space="preserve">
          <source>The included &lt;a href=&quot;%24scedelegate&quot;&gt;$sceDelegate&lt;/a&gt; comes with sane defaults to allow you to load templates in &lt;code&gt;ng-include&lt;/code&gt; from your application's domain without having to even know about SCE. It blocks loading templates from other domains or loading templates over http from an https served document. You can change these by setting your own custom &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;whitelists&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;blacklists&lt;/a&gt; for matching such URLs.</source>
          <target state="translated">포함 된 &lt;a href=&quot;%24scedelegate&quot;&gt;$ sceDelegate&lt;/a&gt; 는 SCE에 대해 알 필요없이 애플리케이션 도메인에서 템플릿을 &lt;code&gt;ng-include&lt;/code&gt; 로로드 할 수 있도록 정상 기본값으로 제공됩니다 . 다른 도메인에서 템플릿을로드하거나 https 제공 문서에서 http를 통해 템플릿을로드하는 것을 차단합니다. 이러한 URL과 일치하도록 사용자 정의 &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlWhitelist.html&quot;&gt;화이트리스트&lt;/a&gt; 및 &lt;a href=&quot;../provider/%24scedelegateprovider#resourceUrlBlacklist.html&quot;&gt;블랙리스트&lt;/a&gt; 를 설정하여이를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8653b4ff10badbdfdfe596b75b9e40afdc26c0ac" translate="yes" xml:space="preserve">
          <source>The included &lt;a href=&quot;%24scedelegate&quot;&gt;$sceDelegate&lt;/a&gt; comes with sane defaults to allow you to load templates in &lt;code&gt;ng-include&lt;/code&gt; from your application's domain without having to even know about SCE. It blocks loading templates from other domains or loading templates over http from an https served document. You can change these by setting your own custom &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trusted resource URL list&lt;/a&gt; and &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;banned resource URL list&lt;/a&gt; for matching such URLs.</source>
          <target state="translated">포함 된 &lt;a href=&quot;%24scedelegate&quot;&gt;$ sceDelegate&lt;/a&gt; 에는 SCE에 대해 몰라도 애플리케이션의 도메인 에서 &lt;code&gt;ng-include&lt;/code&gt; 의 템플릿을로드 할 수있는 정상적인 기본값이 함께 제공됩니다 . 다른 도메인에서 템플릿을로드하거나 https 제공 문서에서 http를 통해 템플릿을로드하는 것을 차단합니다. 사용자 지정 &lt;a href=&quot;../provider/%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;신뢰할 수있는 리소스 URL 목록&lt;/a&gt; 및 이러한 URL과 일치하는 &lt;a href=&quot;../provider/%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;금지 된 리소스 URL 목록&lt;/a&gt; 을 설정하여 이러한 URL을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d86ce90e809e5dafdbfc54a177b73d2ccac67ae" translate="yes" xml:space="preserve">
          <source>The inject function wraps a function into an injectable function. The inject() creates new instance of &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt; per test, which is then used for resolving references.</source>
          <target state="translated">주입 기능은 기능을 주입 가능한 기능으로 랩핑합니다. inject () 는 테스트 당 &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injector&lt;/a&gt; 의 새 인스턴스를 생성 한 다음 참조 해결에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c1092c772bcfea30a4aa4090625e6d56119e573a" translate="yes" xml:space="preserve">
          <source>The injectable $getFn for the instance creation. Internally this is a short hand for &lt;code&gt;$provide.provider(name, {$get: $getFn})&lt;/code&gt;.</source>
          <target state="translated">인스턴스 작성을위한 주입 가능한 $ getFn. 내부적으로 이것은 &lt;code&gt;$provide.provider(name, {$get: $getFn})&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="605987405f3ba59ce7d26ad7a79cb1575f0f779c" translate="yes" xml:space="preserve">
          <source>The injectable function to invoke. Function parameters are injected according to the &lt;a href=&quot;../../../guide/di&quot;&gt;$inject Annotation&lt;/a&gt; rules.</source>
          <target state="translated">호출 할 함수입니다. 기능 매개 변수는 &lt;a href=&quot;../../../guide/di&quot;&gt;$ inject Annotation&lt;/a&gt; 규칙 에 따라 주입 됩니다.</target>
        </trans-unit>
        <trans-unit id="677dfa999d3a98fad688a00276274a8900d320b0" translate="yes" xml:space="preserve">
          <source>The injector creates two types of objects, &lt;strong&gt;services&lt;/strong&gt; and &lt;strong&gt;specialized objects&lt;/strong&gt;.</source>
          <target state="translated">인젝터는 &lt;strong&gt;서비스&lt;/strong&gt; 와 &lt;strong&gt;특수 객체&lt;/strong&gt; 라는 두 가지 유형의 객체를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="0e94cb4879f562aa129066b04f883ce6312f54d9" translate="yes" xml:space="preserve">
          <source>The injector needs to know how to create these objects. You tell it by registering a &quot;recipe&quot; for creating your object with the injector. There are five recipe types.</source>
          <target state="translated">인젝터는 이러한 오브젝트를 작성하는 방법을 알아야합니다. 인젝터로 객체를 만들기위한 &quot;레시피&quot;를 등록하여 알려줍니다. 5 가지 레시피 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6273feccee525d43053ba5dbf6fca985976d17e5" translate="yes" xml:space="preserve">
          <source>The injector uses recipes to create two types of objects: services and special purpose objects</source>
          <target state="translated">인젝터는 레시피를 사용하여 서비스 및 특수 목적 오브젝트의 두 가지 유형의 오브젝트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c3ee9058b51e0900c988e8ad2daa2f4fd48edb92" translate="yes" xml:space="preserve">
          <source>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a trusted URI list) are then serialized back to a properly escaped HTML string. This means that no unsafe input can make it into the returned string.</source>
          <target state="translated">입력은 HTML을 토큰으로 구문 분석하여 삭제됩니다. 그런 다음 신뢰할 수있는 URI 목록의 모든 안전한 토큰이 올바르게 이스케이프 된 HTML 문자열로 다시 직렬화됩니다. 이는 안전하지 않은 입력이 반환 된 문자열에 들어갈 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f953d4b077ce6a518bf5b06d0aef4b5f97e7e535" translate="yes" xml:space="preserve">
          <source>The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are then serialized back to a properly escaped HTML string. This means that no unsafe input can make it into the returned string.</source>
          <target state="translated">HTML을 토큰으로 구문 분석하여 입력을 삭제합니다. 그런 다음 화이트리스트의 모든 안전한 토큰은 올바르게 이스케이프 된 HTML 문자열로 다시 직렬화됩니다. 이것은 안전하지 않은 입력이 리턴 된 문자열로 입력 될 수 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="59f809f5d96cab71f45dcf3fd61d5ada6a5b1113" translate="yes" xml:space="preserve">
          <source>The input may also contain SVG markup if this is enabled via &lt;a href=&quot;../provider/%24sanitizeprovider&quot;&gt;&lt;code&gt;$sanitizeProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24sanitizeprovider&quot;&gt; &lt;code&gt;$sanitizeProvider&lt;/code&gt; &lt;/a&gt; 를 통해 활성화 된 경우 입력에 SVG 마크 업이 포함될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c9721cff229ea27eaddea830cb215d9ecb24c54d" translate="yes" xml:space="preserve">
          <source>The instance.</source>
          <target state="translated">인스턴스.</target>
        </trans-unit>
        <trans-unit id="d06ec46a0f6db466ce39dca76188695efd2cff45" translate="yes" xml:space="preserve">
          <source>The instructions for the injector to create these special objects (with the exception of the Controller objects) use the Factory recipe behind the scenes.</source>
          <target state="translated">인젝터가 이러한 특수 객체를 생성하기위한 지침 (컨트롤러 객체를 제외하고)은 씬 뒤에 팩토리 레시피를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9641656e0f057252f61c1fb2d165a7e89b9e6899" translate="yes" xml:space="preserve">
          <source>The interceptors are service factories that are registered with the &lt;code&gt;$httpProvider&lt;/code&gt; by adding them to the &lt;code&gt;$httpProvider.interceptors&lt;/code&gt; array. The factory is called and injected with dependencies (if specified) and returns the interceptor.</source>
          <target state="translated">인터셉터는 &lt;code&gt;$httpProvider.interceptors&lt;/code&gt; 배열 에 추가 하여 &lt;code&gt;$httpProvider&lt;/code&gt; 에 등록 된 서비스 팩토리입니다 . 팩토리가 호출되어 종속성이 지정된 경우 (지정된 경우) 인터셉터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="259abe29ae4ace32d8058fd4b583122111a0a58c" translate="yes" xml:space="preserve">
          <source>The items in the &lt;code&gt;watchExpressions&lt;/code&gt; array are observed via the standard &lt;code&gt;$watch&lt;/code&gt; operation. Their return values are examined for changes on every call to &lt;code&gt;$digest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;watchExpressions&lt;/code&gt; 배열 의 항목 은 표준 &lt;code&gt;$watch&lt;/code&gt; 작업을 통해 관찰됩니다 . 반환 값은 &lt;code&gt;$digest&lt;/code&gt; 에 대한 모든 호출의 변경 사항을 검사합니다 .</target>
        </trans-unit>
        <trans-unit id="ac4e2ed2134c4627770fca158ca734471daad86e" translate="yes" xml:space="preserve">
          <source>The key directive in understanding two-way data-binding is &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt;. The &lt;code&gt;ngModel&lt;/code&gt; directive provides the two-way data-binding by synchronizing the model to the view, as well as view to the model. In addition it provides an &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;API&lt;/a&gt; for other directives to augment its behavior.</source>
          <target state="translated">양방향 데이터 바인딩을 이해하기위한 핵심 지시문은 &lt;a href=&quot;../api/ng/directive/ngmodel&quot;&gt;ngModel&lt;/a&gt; 입니다. &lt;code&gt;ngModel&lt;/code&gt; 의 지시문 제공 양방향 모델의 뷰에 모델뿐만 아니라보기를 동기화하여 데이터 바인딩. 또한 다른 지시문에서 동작을 향상시키기위한 &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;API&lt;/a&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="cf8fd3854844a5b37d09ac63b2f2a2265faf671e" translate="yes" xml:space="preserve">
          <source>The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two generated CSS classes will be applied to the element; in the example above we have &lt;code&gt;.ng-enter&lt;/code&gt; and &lt;code&gt;.ng-enter-active&lt;/code&gt;. For CSS transitions, the transition code &lt;strong&gt;must&lt;/strong&gt; be defined within the starting CSS class (in this case &lt;code&gt;.ng-enter&lt;/code&gt;). The destination class is what the transition will animate towards.</source>
          <target state="translated">여기서 기억해야 할 것은 애니메이션 이벤트 (위의 각 지시문이 진행 상황에 따라 트리거 됨)에 따라 두 개의 생성 된 CSS 클래스가 요소에 적용된다는 것입니다. 위의 예에서는 &lt;code&gt;.ng-enter&lt;/code&gt; 및 &lt;code&gt;.ng-enter-active&lt;/code&gt; 가 있습니다. CSS 전환의 경우 전환 CSS는 시작 CSS 클래스 (이 경우 &lt;code&gt;.ng-enter&lt;/code&gt; ) 내에 정의 &lt;strong&gt;해야합니다&lt;/strong&gt; . 대상 클래스는 전환이 애니메이션되는 대상입니다.</target>
        </trans-unit>
        <trans-unit id="9bfe88c198504d0cc14a7b1ffef4d2e83779de3b" translate="yes" xml:space="preserve">
          <source>The last thing that changed in the example between the previous section and this section is that we now pass an array to the &lt;code&gt;module.controller&lt;/code&gt; function, instead of a plain function. The array first contains the names of the service dependencies that the controller needs. The last entry in the array is the controller constructor function. AngularJS uses this array syntax to define the dependencies so that the DI also works after minifying the code, which will most probably rename the argument name of the controller constructor function to something shorter like &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">이전 섹션과이 섹션 사이의 예제에서 변경된 마지막 사항은 이제 일반 함수 대신 배열을 &lt;code&gt;module.controller&lt;/code&gt; 함수에 전달한다는 것 입니다. 배열에는 먼저 컨트롤러에 필요한 서비스 종속성의 이름이 포함됩니다. 배열의 마지막 항목은 컨트롤러 생성자 함수입니다. AngularJS와는 DI도 아마 같은 짧은 뭔가 컨트롤러 생성자 함수의 인수 이름을 이름을 변경합니다 코드, 축소에 후 작동하도록 종속성을 정의하려면이 배열 구문을 사용 &lt;code&gt;a&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bc17242596383b2aa73f58fe188aa93577a2dc8" translate="yes" xml:space="preserve">
          <source>The length of the returned array or string. If the &lt;code&gt;limit&lt;/code&gt; number is positive, &lt;code&gt;limit&lt;/code&gt; number of items from the beginning of the source array/string are copied. If the number is negative, &lt;code&gt;limit&lt;/code&gt; number of items from the end of the source array/string are copied. The &lt;code&gt;limit&lt;/code&gt; will be trimmed if it exceeds &lt;code&gt;array.length&lt;/code&gt;. If &lt;code&gt;limit&lt;/code&gt; is undefined, the input will be returned unchanged.</source>
          <target state="translated">반환 된 배열 또는 문자열의 길이입니다. 는 IF &lt;code&gt;limit&lt;/code&gt; 수는 양수, &lt;code&gt;limit&lt;/code&gt; 소스 배열 / 문자열의 시작 부분에서 항목의 수는 복사됩니다. 숫자가 음수이면 소스 배열 / 문자열의 끝에서 항목 수 &lt;code&gt;limit&lt;/code&gt; 이 복사됩니다. &lt;code&gt;limit&lt;/code&gt; 이 초과하는 경우 트리밍 할 것이다 &lt;code&gt;array.length&lt;/code&gt; . &lt;code&gt;limit&lt;/code&gt; 이 정의되지 않은 경우 입력은 변경되지 않은 상태로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="96f80bb4132ab5893f0e229db73744e61363387b" translate="yes" xml:space="preserve">
          <source>The link function is responsible for registering DOM listeners as well as updating the DOM. It is executed after the template has been cloned. This is where most of the directive logic will be put.</source>
          <target state="translated">링크 기능은 DOM 리스너를 등록하고 DOM을 업데이트합니다. 템플릿이 복제 된 후에 실행됩니다. 이것은 대부분의 지시어 로직이 배치되는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="25992899d7d94510e26d6aadc430072c9ca0c0f0" translate="yes" xml:space="preserve">
          <source>The main method of &lt;code&gt;$swipe&lt;/code&gt;. It takes an element to be watched for swipe motions, and an object containing event handlers. The pointer types that should be used can be specified via the optional third argument, which is an array of strings &lt;code&gt;'mouse'&lt;/code&gt;, &lt;code&gt;'touch'&lt;/code&gt; and &lt;code&gt;'pointer'&lt;/code&gt;. By default, &lt;code&gt;$swipe&lt;/code&gt; will listen for &lt;code&gt;mouse&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt; and &lt;code&gt;pointer&lt;/code&gt; events.</source>
          <target state="translated">&lt;code&gt;$swipe&lt;/code&gt; 의 주요 방법 . 스 와이프 동작을 감시 할 요소와 이벤트 핸들러를 포함하는 객체가 필요합니다. 사용해야하는 포인터 유형은 선택적 문자열 인 &lt;code&gt;'mouse'&lt;/code&gt; , &lt;code&gt;'touch'&lt;/code&gt; 및 &lt;code&gt;'pointer'&lt;/code&gt; 의 배열 인 세 번째 인수를 통해 지정할 수 있습니다 . 기본적으로 &lt;code&gt;$swipe&lt;/code&gt; 는 &lt;code&gt;mouse&lt;/code&gt; , &lt;code&gt;touch&lt;/code&gt; 및 &lt;code&gt;pointer&lt;/code&gt; 이벤트를 수신 합니다.</target>
        </trans-unit>
        <trans-unit id="1a172ed357f81e2238a43ea9dd78f148e9988e2e" translate="yes" xml:space="preserve">
          <source>The main purpose is to create Date-like instances with timezone fixed to the specified timezone offset, so that we can test code that depends on local timezone settings without dependency on the time zone settings of the machine where the code is running.</source>
          <target state="translated">기본 목적은 시간대가 지정된 시간대 오프셋으로 고정 된 날짜와 유사한 인스턴스를 작성하여 코드가 실행되는 시스템의 시간대 설정에 의존하지 않고 로컬 시간대 설정에 의존하는 코드를 테스트 할 수 있도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0b310ca323bcc83d7a5a4af3c0bc0d4391022eb7" translate="yes" xml:space="preserve">
          <source>The main purpose of one-time binding expression is to provide a way to create a binding that gets deregistered and frees up resources once the binding is stabilized. Reducing the number of expressions being watched makes the digest loop faster and allows more information to be displayed at the same time.</source>
          <target state="translated">일회성 바인딩 표현식의 주요 목적은 바인딩이 안정화되면 등록이 취소되고 리소스를 해제하는 바인딩을 만드는 방법을 제공하는 것입니다. 감시되는 표현식 수를 줄이면 다이제스트 루프가 빨라지고 더 많은 정보가 동시에 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25503d1e5d98a9ab3cd9eaf52b8e382fdd6b749a" translate="yes" xml:space="preserve">
          <source>The main purpose of this service is to simplify debugging and troubleshooting.</source>
          <target state="translated">이 서비스의 주요 목적은 디버깅 및 문제 해결을 단순화하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="91c342052b273fbc763e3a770d83c916c0e2fd15" translate="yes" xml:space="preserve">
          <source>The map object is:</source>
          <target state="translated">지도 객체는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c3ba921f13d5d29a579ae0d65aabb1cf6c6ce2b7" translate="yes" xml:space="preserve">
          <source>The mapping between plural category to its corresponding strings.</source>
          <target state="translated">복수 범주와 해당 문자열 간의 매핑</target>
        </trans-unit>
        <trans-unit id="91b978fa871e53cfbb4757ac12f850437d085924" translate="yes" xml:space="preserve">
          <source>The message in our template contains a binding to the &lt;code&gt;spice&lt;/code&gt; model which, by default, is set to the string &quot;very&quot;. Depending on which button is clicked, the &lt;code&gt;spice&lt;/code&gt; model is set to &lt;code&gt;chili&lt;/code&gt; or &lt;code&gt;jalape&amp;ntilde;o&lt;/code&gt;, and the message is automatically updated by data-binding.</source>
          <target state="translated">템플릿의 메시지에는 기본적으로 문자열 &quot;very&quot;로 설정되는 &lt;code&gt;spice&lt;/code&gt; 모델에 대한 바인딩이 포함되어 있습니다 . 어떤 버튼을 클릭 하느냐에 따라 &lt;code&gt;spice&lt;/code&gt; 모델은 &lt;code&gt;chili&lt;/code&gt; 또는 &lt;code&gt;jalape&amp;ntilde;o&lt;/code&gt; 로 설정되고 메시지는 데이터 바인딩에 의해 자동으로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="c79e17a2b6e79907beb19b379baae598ffbe689b" translate="yes" xml:space="preserve">
          <source>The missing pieces here are that we do not have a transition set (within the CSS code nor within the &lt;code&gt;$animateCss&lt;/code&gt; options) and the duration of the animation is going to be detected from what the keyframe styles on the CSS class are. In this event, &lt;code&gt;$animateCss&lt;/code&gt; will automatically create an inline transition style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition and keyframe animations to run in parallel on the element. Then when the animation is underway the provided &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; CSS styles will be applied and spread across the transition and keyframe animation.</source>
          <target state="translated">여기서 누락 된 부분은 CSS 코드 또는 &lt;code&gt;$animateCss&lt;/code&gt; 옵션 내에 전환 세트가 없으며 CSS 클래스의 키 프레임 스타일에서 애니메이션 지속 시간이 감지된다는 것입니다. 이 경우 &lt;code&gt;$animateCss&lt;/code&gt; 는 키 프레임 스타일 (추가되는 CSS 클래스에 있음)에서 감지 된 지속 시간과 일치하는 인라인 전환 스타일을 자동으로 만든 다음 전환 및 키 프레임 애니메이션을 요소에서 동시에 실행할 수 있도록 준비합니다. . 그런 다음 애니메이션이 진행 중일 때 제공된 &lt;code&gt;from&lt;/code&gt; 및 &lt;code&gt;to&lt;/code&gt; CSS 스타일이 적용되어 전환 및 키 프레임 애니메이션에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="f247262a0b550d2f691772406fe7244e9c1be40b" translate="yes" xml:space="preserve">
          <source>The model for the range input must always be a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">범위 입력의 모델은 항상 &lt;code&gt;Number&lt;/code&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="9d1136b7e9f9e2ec081fa959fce9e2b69f7dc7a8" translate="yes" xml:space="preserve">
          <source>The model must always be a Date object, otherwise AngularJS will throw an error. Invalid &lt;code&gt;Date&lt;/code&gt; objects (dates whose &lt;code&gt;getTime()&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;) will be rendered as an empty string.</source>
          <target state="translated">모델은 항상 Date 객체 여야합니다. 그렇지 않으면 AngularJS에서 오류가 발생합니다. 유효하지 않은 &lt;code&gt;Date&lt;/code&gt; 객체 ( &lt;code&gt;getTime()&lt;/code&gt; 가 &lt;code&gt;NaN&lt;/code&gt; 인 날짜 ) 는 빈 문자열로 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="1f56b4dcf920e9c7dc11f7f32dd53fb1a36691f0" translate="yes" xml:space="preserve">
          <source>The model must always be a Date object, otherwise AngularJS will throw an error. Invalid &lt;code&gt;Date&lt;/code&gt; objects (dates whose &lt;code&gt;getTime()&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt;) will be rendered as an empty string. If the model is not set to the first of the month, the next view to model update will set it to the first of the month.</source>
          <target state="translated">모델은 항상 Date 객체 여야합니다. 그렇지 않으면 AngularJS에서 오류가 발생합니다. 유효하지 않은 &lt;code&gt;Date&lt;/code&gt; 객체 ( &lt;code&gt;getTime()&lt;/code&gt; 가 &lt;code&gt;NaN&lt;/code&gt; 인 날짜 ) 는 빈 문자열로 렌더링됩니다. 모델이 월 1 일로 설정되지 않은 경우 모델 업데이트의 다음보기에서 해당 월의 1 일로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="d1406ae87837c393f099238ed13c96e59ba59079" translate="yes" xml:space="preserve">
          <source>The model must always be of type &lt;code&gt;number&lt;/code&gt; otherwise AngularJS will throw an error. Be aware that a string containing a number is not enough. See the &lt;a href=&quot;error/ngmodel/numfmt&quot;&gt;&lt;code&gt;numfmt&lt;/code&gt;&lt;/a&gt; error docs for more information and an example of how to convert your model if necessary.</source>
          <target state="translated">모델은 항상 &lt;code&gt;number&lt;/code&gt; 유형이어야합니다. 그렇지 않으면 AngularJS에서 오류가 발생합니다. 숫자가 포함 된 문자열로는 충분하지 않습니다. 자세한 정보와 필요한 경우 모델을 변환하는 방법에 대한 예 는 &lt;a href=&quot;error/ngmodel/numfmt&quot;&gt; &lt;code&gt;numfmt&lt;/code&gt; &lt;/a&gt; 오류 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5c0949f1bb9728ff0ffb32f807d413d44806a30f" translate="yes" xml:space="preserve">
          <source>The model must be assigned an entirely new object or collection before a re-rendering will occur.</source>
          <target state="translated">다시 렌더링하기 전에 모델에 완전히 새로운 객체 또는 컬렉션을 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="3ae22dc48b481f4e02eb16cb19edc1733fe699ba" translate="yes" xml:space="preserve">
          <source>The modules can be loaded in any order (or even in parallel) because modules delay execution.</source>
          <target state="translated">모듈은 실행을 지연시키기 때문에 임의의 순서로 (또는 병렬로)로드 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="529f242a37709897dbd946c5165c8aee6256feb1" translate="yes" xml:space="preserve">
          <source>The most common way to keep Controllers slim is by encapsulating work that doesn't belong to controllers into services and then using these services in Controllers via dependency injection. This is discussed in the &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; and &lt;a href=&quot;services&quot;&gt;Services&lt;/a&gt; sections of this guide.</source>
          <target state="translated">컨트롤러를 슬림하게 유지하는 가장 일반적인 방법은 컨트롤러에 속하지 않는 작업을 서비스로 캡슐화 한 다음 종속성 주입을 통해 컨트롤러에서 이러한 서비스를 사용하는 것입니다. 이에 대해서는 이 안내서 의 &lt;a href=&quot;di&quot;&gt;의존성 주입&lt;/a&gt; 및 &lt;a href=&quot;services&quot;&gt;서비스&lt;/a&gt; 섹션에서 설명합니다.</target>
        </trans-unit>
        <trans-unit id="faf758b67dc590ad824277c5b5f2a314b0605341" translate="yes" xml:space="preserve">
          <source>The most verbose, but also the most comprehensive one is a Provider recipe. The remaining four recipe types &amp;mdash; Value, Factory, Service and Constant &amp;mdash; are just syntactic sugar on top of a provider recipe.</source>
          <target state="translated">가장 장황하지만 가장 포괄적 인 것은 제공자 레시피입니다. 나머지 4 가지 레시피 유형 (Value, Factory, Service 및 Constant)은 공급자 레시피 위에있는 구문 설탕입니다.</target>
        </trans-unit>
        <trans-unit id="e93ee1a6dab4177437aeb5008d2c15cdeb9c5c03" translate="yes" xml:space="preserve">
          <source>The name attribute of the control.</source>
          <target state="translated">컨트롤의 이름 속성입니다.</target>
        </trans-unit>
        <trans-unit id="52a1406be0fd9b4498790d2b937925b4d86eab44" translate="yes" xml:space="preserve">
          <source>The name of the Component (as string).</source>
          <target state="translated">구성 요소의 이름 (문자열).</target>
        </trans-unit>
        <trans-unit id="f6aadfe17e9d7e5921f17aa8f89b4addde7625ab" translate="yes" xml:space="preserve">
          <source>The name of the animation (this is what the class-based CSS value will be compared to).</source>
          <target state="translated">애니메이션의 이름입니다 (이것은 클래스 기반 CSS 값과 비교됩니다).</target>
        </trans-unit>
        <trans-unit id="5fa60c10f1cb65ee0552af457bf2e526a3e8f002" translate="yes" xml:space="preserve">
          <source>The name of the constant.</source>
          <target state="translated">상수의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="5ebd3314617eb25c4ca63e475dab29179d07a68b" translate="yes" xml:space="preserve">
          <source>The name of the cookie and the header can be specified using the &lt;code&gt;xsrfCookieName&lt;/code&gt; and &lt;code&gt;xsrfHeaderName&lt;/code&gt; properties of either &lt;code&gt;$httpProvider.defaults&lt;/code&gt; at config-time, &lt;code&gt;$http.defaults&lt;/code&gt; at run-time, or the per-request config object.</source>
          <target state="translated">쿠키와 헤더의 이름은 사용하여 지정할 수 있습니다 &lt;code&gt;xsrfCookieName&lt;/code&gt; 및 &lt;code&gt;xsrfHeaderName&lt;/code&gt; 중 하나의 특성 &lt;code&gt;$httpProvider.defaults&lt;/code&gt; 설정-시간에 &lt;code&gt;$http.defaults&lt;/code&gt; 실행시, 또는 당 요청 설정 객체입니다.</target>
        </trans-unit>
        <trans-unit id="b5688f633c9943ed9963b6fac42bbab391f315da" translate="yes" xml:space="preserve">
          <source>The name of the instance to retrieve.</source>
          <target state="translated">검색 할 인스턴스의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="3ce9a1a3f858c924570c179ce1f797aef67a7010" translate="yes" xml:space="preserve">
          <source>The name of the instance.</source>
          <target state="translated">인스턴스 이름입니다.</target>
        </trans-unit>
        <trans-unit id="6914eeeb46cd50ced441dc387497bcc06ba59c09" translate="yes" xml:space="preserve">
          <source>The name of the instance. NOTE: the provider will be available under &lt;code&gt;name +
                        'Provider'&lt;/code&gt; key.</source>
          <target state="translated">인스턴스 이름입니다. 참고 : 공급자는 &lt;code&gt;name + 'Provider'&lt;/code&gt; 키 아래에 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef527986f7dd95521960193aaf626a363e2146dd" translate="yes" xml:space="preserve">
          <source>The name of the module to create or retrieve.</source>
          <target state="translated">작성하거나 검색 할 모듈의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="5d9dc085c378b2687e35cbb2d483853c9af87fd6" translate="yes" xml:space="preserve">
          <source>The name of the service to decorate.</source>
          <target state="translated">꾸미는 서비스의 이름.</target>
        </trans-unit>
        <trans-unit id="a630443a3a5826d0976b6447615bfaff1727aedd" translate="yes" xml:space="preserve">
          <source>The names of the services which the function requires.</source>
          <target state="translated">기능에 필요한 서비스 이름.</target>
        </trans-unit>
        <trans-unit id="d6e70987a77c802441d477d6206f9cfb9463cba2" translate="yes" xml:space="preserve">
          <source>The new Angular also uses life-cycle hooks for its components. While the AngularJS life-cycle hooks are similar there are some differences that you should be aware of, especially when it comes to moving your code from AngularJS to Angular:</source>
          <target state="translated">새로운 Angular는 또한 구성 요소에 수명주기 후크를 사용합니다. AngularJS 수명주기 후크는 비슷하지만 특히 AngularJS에서 Angular로 코드를 이동할 때 알아야 할 몇 가지 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a41b334b9554bd05233c2fb4d0a3daaade91fce8" translate="yes" xml:space="preserve">
          <source>The newly created child scope.</source>
          <target state="translated">새로 작성된 하위 범위.</target>
        </trans-unit>
        <trans-unit id="f3ce6bf462a57a8d8b163717a5d0f046f25c3465" translate="yes" xml:space="preserve">
          <source>The newly created promise.</source>
          <target state="translated">새로 만든 약속.</target>
        </trans-unit>
        <trans-unit id="ae09afc16f38ae9a9387c7b12e77a3a66d8888da" translate="yes" xml:space="preserve">
          <source>The next example shows how to debounce model changes. Model will be updated only 1 sec after last change. If the &lt;code&gt;Clear&lt;/code&gt; button is pressed, any debounced action is canceled and the value becomes empty.</source>
          <target state="translated">다음 예제는 모델 변경 사항을 디 바운스하는 방법을 보여줍니다. 마지막 변경 후 1 초만에 모델이 업데이트됩니다. 는 IF &lt;code&gt;Clear&lt;/code&gt; 버튼을 누르면 모든 디 바운스 동작이 취소되고 값은 비어가된다.</target>
        </trans-unit>
        <trans-unit id="b76887d9d0fb60e4fc34d27b04b0219ff2d5a890" translate="yes" xml:space="preserve">
          <source>The ng-[event]-prepare class</source>
          <target state="translated">ng- [event] -prepare 클래스</target>
        </trans-unit>
        <trans-unit id="83832e96d19a35ce36d51f03002d6ffdbe1a0358" translate="yes" xml:space="preserve">
          <source>The ng-animate CSS class</source>
          <target state="translated">ng 애니메이션 CSS 클래스</target>
        </trans-unit>
        <trans-unit id="9a9d315c0358a5c5e8b194937e0eee872f4b7280" translate="yes" xml:space="preserve">
          <source>The ngAnimate &lt;code&gt;$animate&lt;/code&gt; service documentation is the same for the core &lt;code&gt;$animate&lt;/code&gt; service.</source>
          <target state="translated">ngAnimate &lt;code&gt;$animate&lt;/code&gt; 서비스 설명서는 핵심 &lt;code&gt;$animate&lt;/code&gt; 서비스 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="c26c0cdee12de4e472917c56086b0a3fb2d3b22f" translate="yes" xml:space="preserve">
          <source>The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure. Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure to view the step by step details of &lt;a href=&quot;../service/%24animate#addClass.html&quot;&gt;$animate.addClass&lt;/a&gt; and &lt;a href=&quot;../service/%24animate#removeClass.html&quot;&gt;$animate.removeClass&lt;/a&gt;.</source>
          <target state="translated">ngClass 지시문은 ngAnimate CSS 명명 구조를 따르지 않더라도 CSS3 전환 / 애니메이션을 계속 지원합니다. 애니메이션시 ngAnimate는 보조 CSS 클래스를 적용하여 애니메이션의 시작과 끝을 추적하지만 요소에 이미 존재하는 CSS 전환을 방해하지는 않습니다. 클래스 기반 애니메이션 중에 발생하는 상황을 이해하려면 &lt;a href=&quot;../service/%24animate#addClass.html&quot;&gt;$ animate.addClass&lt;/a&gt; 및 &lt;a href=&quot;../service/%24animate#removeClass.html&quot;&gt;$ animate.removeClass&lt;/a&gt; 의 단계별 세부 사항을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="0635f6269423a28f71e76e780ec63cd5fb218795" translate="yes" xml:space="preserve">
          <source>The ngClick directive allows you to specify custom behavior when an element is clicked.</source>
          <target state="translated">ngClick 지시문을 사용하면 요소를 클릭 할 때 사용자 정의 동작을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="223eb922ce0ea7ac3447fe285277dffc1916f050" translate="yes" xml:space="preserve">
          <source>The ngMessageFormat module extends the AngularJS &lt;a href=&quot;ng/service/%24interpolate&quot;&gt;&lt;code&gt;$interpolate&lt;/code&gt;&lt;/a&gt; service with a syntax for handling pluralization and gender specific messages, which is based on the &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;ICU MessageFormat syntax&lt;/a&gt;.</source>
          <target state="translated">ngMessageFormat 모듈은 &lt;a href=&quot;http://userguide.icu-project.org/formatparse/messages#TOC-MessageFormat&quot;&gt;ICU MessageFormat 구문을&lt;/a&gt; 기반으로하는 복수화 및 성별 특정 메시지를 처리하기위한 구문으로 AngularJS &lt;a href=&quot;ng/service/%24interpolate&quot;&gt; &lt;code&gt;$interpolate&lt;/code&gt; &lt;/a&gt; 서비스를 확장 합니다 .</target>
        </trans-unit>
        <trans-unit id="d6139af9198c6ea6591d92b0c6e44a5918b0ef3f" translate="yes" xml:space="preserve">
          <source>The ngMessages module makes it easy to display form validation or other messages with priority sequencing and animation. To expose these visual messages to screen readers, ngAria injects &lt;code&gt;aria-live=&quot;assertive&quot;&lt;/code&gt;, causing them to be read aloud any time a message is shown, regardless of the user's focus location.</source>
          <target state="translated">ngMessages 모듈을 사용하면 양식 확인 또는 우선 순위 시퀀싱 및 애니메이션이있는 기타 메시지를 쉽게 표시 할 수 있습니다. 이러한 시각적 메시지를 화면 판독기에 표시하기 위해 ngAria는 &lt;code&gt;aria-live=&quot;assertive&quot;&lt;/code&gt; 를 삽입 하여 사용자의 초점 위치에 관계없이 메시지가 표시 될 때마다 소리내어 읽습니다.</target>
        </trans-unit>
        <trans-unit id="e5dcb2f0c1ee73bf49cf4d3307449f52a66c89cb" translate="yes" xml:space="preserve">
          <source>The ngMousedown directive allows you to specify custom behavior on mousedown event.</source>
          <target state="translated">ngMousedown 지시문을 사용하면 mousedown 이벤트에 대한 사용자 정의 동작을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="12a24db6cdaf7c8d7b5c7c9ac1712f0a02f045a2" translate="yes" xml:space="preserve">
          <source>The ngTouch module with the &lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt;&lt;code&gt;$swipe&lt;/code&gt;&lt;/a&gt; service and the &lt;a href=&quot;ngtouch/directive/ngswipeleft&quot;&gt;&lt;code&gt;ngSwipeLeft&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ngtouch/directive/ngswiperight&quot;&gt;&lt;code&gt;ngSwipeRight&lt;/code&gt;&lt;/a&gt; directives are deprecated. Instead, stand-alone libraries for touch handling and gesture interaction should be used, for example &lt;a href=&quot;https://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt; (which is also used by Angular).</source>
          <target state="translated">&lt;a href=&quot;ngtouch/service/%24swipe&quot;&gt; &lt;code&gt;$swipe&lt;/code&gt; &lt;/a&gt; 서비스 및 &lt;a href=&quot;ngtouch/directive/ngswipeleft&quot;&gt; &lt;code&gt;ngSwipeLeft&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;ngtouch/directive/ngswiperight&quot;&gt; &lt;code&gt;ngSwipeRight&lt;/code&gt; &lt;/a&gt; 지시문이 있는 ngTouch 모듈 은 더 이상 사용되지 않습니다. 대신, 터치 조작과 제스처 상호 작용을위한 독립형 라이브러리는 예를 들어, 사용되어야한다 &lt;a href=&quot;https://hammerjs.github.io/&quot;&gt;HammerJS&lt;/a&gt; (도 각도로 사용된다).</target>
        </trans-unit>
        <trans-unit id="bd0e07d269ab6c4c785c9230592a8e454b8abbf0" translate="yes" xml:space="preserve">
          <source>The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as greensock.js and velocity.js.</source>
          <target state="translated">JS 기반 애니메이션의 장점은 다른 서비스를 삽입하고 greensock.js 및 velocity.js와 같은 고급 애니메이션 라이브러리를 사용할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fc6b6e566f3c4a65197842b008029ca49468b417" translate="yes" xml:space="preserve">
          <source>The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.</source>
          <target state="translated">여기서 좋은 점은 CSS 기반 애니메이션 코드를 사용하여 대역폭을 절약 할 수 있으며 타사 애니메이션 프레임 워크에 의존 할 필요가 없다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b33d91c29f5b7375a54f9743cd38ebe14c38ac55" translate="yes" xml:space="preserve">
          <source>The normal flow of a browser receiving an event is that it executes a corresponding JavaScript callback. Once the callback completes the browser re-renders the DOM and returns to waiting for more events.</source>
          <target state="translated">이벤트를 수신하는 브라우저의 일반적인 흐름은 해당 JavaScript 콜백을 실행하는 것입니다. 콜백이 완료되면 브라우저는 DOM을 다시 렌더링하고 추가 이벤트 대기로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="e595827e846ea3517809cce5d8c144967ea0c1ef" translate="yes" xml:space="preserve">
          <source>The number of &lt;code&gt;$onChanges&lt;/code&gt; hook iterations.</source>
          <target state="translated">수 &lt;code&gt;$onChanges&lt;/code&gt; 후크 반복.</target>
        </trans-unit>
        <trans-unit id="10748404b29dfc81bb9c7e5cd26dc4c6c3875599" translate="yes" xml:space="preserve">
          <source>The number of digest iterations.</source>
          <target state="translated">다이제스트 반복 횟수입니다.</target>
        </trans-unit>
        <trans-unit id="0ec2f5ba906afbf68077b33918a003e2cbe4f8cd" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to flush.</source>
          <target state="translated">플러시 할 밀리 초 수입니다.</target>
        </trans-unit>
        <trans-unit id="3ec3b6d1b9bf0ba9bca47ebec8531321e98b8a2c" translate="yes" xml:space="preserve">
          <source>The number of spaces to use per indentation, defaults to 2.</source>
          <target state="translated">들여 쓰기 당 사용할 공백 수는 기본적으로 2입니다.</target>
        </trans-unit>
        <trans-unit id="e318b90e5449cb088bf22638bad5bf3451b67f6f" translate="yes" xml:space="preserve">
          <source>The object may have following properties:</source>
          <target state="translated">객체는 다음과 같은 속성을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c455371f2478051b104228b4d093ce69f37c3dee" translate="yes" xml:space="preserve">
          <source>The object returned from a call to &lt;code&gt;$resource&lt;/code&gt; is a resource &quot;class&quot; which has one &quot;static&quot; method for each action in the definition.</source>
          <target state="translated">&lt;code&gt;$resource&lt;/code&gt; 호출에서 리턴 된 오브젝트 는 정의의 각 조치에 대해 하나의 &quot;정적&quot;메소드가있는 자원 &quot;클래스&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="0021d7966fedb869c64e8e751b9c6b3663b8b853" translate="yes" xml:space="preserve">
          <source>The observer function will be invoked once during the next &lt;code&gt;$digest&lt;/code&gt; following compilation. The observer is then invoked whenever the interpolated value changes.</source>
          <target state="translated">옵저버 함수는 컴파일 후 다음 &lt;code&gt;$digest&lt;/code&gt; 동안 한 번 호출됩니다 . 보간 된 값이 변경 될 때마다 관찰자가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f09b420cec82adc9e93555eea36b1573051e63e6" translate="yes" xml:space="preserve">
          <source>The options to be passed to the &lt;a href=&quot;../service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; service when making the request. You can use this to override options such as the &quot;Accept&quot; header for template requests.</source>
          <target state="translated">요청시 &lt;a href=&quot;../service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 서비스에 전달할 옵션 입니다. 이를 사용하여 템플리트 요청에 대한 &quot;수락&quot;헤더와 같은 옵션을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f020acdfb92309bd111f3fab8ddc649fcd4938a1" translate="yes" xml:space="preserve">
          <source>The order of identifiers in the array is the same as the order of argument names in the factory function.</source>
          <target state="translated">배열의 식별자 순서는 팩토리 함수의 인수 이름 순서와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="035c8a97bdb0e87e941aebeda2e7e759c1233766" translate="yes" xml:space="preserve">
          <source>The page should reload and the debug information should now be available.</source>
          <target state="translated">페이지가 다시로드되고 이제 디버그 정보를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="269c704d66caa90f4de39092f24e2ae227e2de22" translate="yes" xml:space="preserve">
          <source>The parent scope will propagate the &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest()&lt;/a&gt; event. The scope can be removed from the scope hierarchy using &lt;a href=&quot;%24rootscope.scope#%24destroy.html&quot;&gt;$destroy()&lt;/a&gt;.</source>
          <target state="translated">부모 범위는 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ digest ()&lt;/a&gt; 이벤트를 전파합니다 . &lt;a href=&quot;%24rootscope.scope#%24destroy.html&quot;&gt;$ destroy ()를&lt;/a&gt; 사용하여 범위를 범위 계층에서 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d8541058d76a0f7d9d5c86cb32a517c836066fea" translate="yes" xml:space="preserve">
          <source>The plural syntax supports an optional &lt;code&gt;offset&lt;/code&gt; syntax that is used in matching. It's simpler to explain this with an example.</source>
          <target state="translated">복수 구문은 매칭에 사용되는 선택적 &lt;code&gt;offset&lt;/code&gt; 구문을 지원한다 . 이것을 예로 설명하는 것이 더 간단합니다.</target>
        </trans-unit>
        <trans-unit id="ba16850007938f287f3d5f3ebf4f4bdd4d282552" translate="yes" xml:space="preserve">
          <source>The predicate to be used for selecting items from &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 에서 항목을 선택하는 데 사용되는 술어 .</target>
        </trans-unit>
        <trans-unit id="82cb53a88d473e7292dcc9cba41cca1fec750b0a" translate="yes" xml:space="preserve">
          <source>The presence of the &lt;code&gt;draggable&lt;/code&gt; attribute on any element gives the element new behavior. We extended the vocabulary of the browser in a way which is natural to anyone who is familiar with the principles of HTML.</source>
          <target state="translated">의 존재 &lt;code&gt;draggable&lt;/code&gt; 모든 요소에 대한 속성은 요소 새로운 동작을 제공합니다. 우리는 HTML의 원리에 익숙한 모든 사람에게 자연스러운 방식으로 브라우저의 어휘를 확장했습니다.</target>
        </trans-unit>
        <trans-unit id="e8b3768b71fbf0ccd49b698b097de049160fa839" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;ModelOptions&lt;/code&gt; value will not be modified. Instead, a new &lt;code&gt;ModelOptions&lt;/code&gt; object will inherit from the previous one overriding or inheriting settings that are defined in the given parameter.</source>
          <target state="translated">이전 &lt;code&gt;ModelOptions&lt;/code&gt; 값은 수정되지 않습니다. 대신, 새 &lt;code&gt;ModelOptions&lt;/code&gt; 객체는 지정된 매개 변수에 정의 된 이전 설정을 무시하거나 상속하는 설정에서 상속합니다.</target>
        </trans-unit>
        <trans-unit id="f32c9a1255f13a76d79607f3121c109beee3aef7" translate="yes" xml:space="preserve">
          <source>The purpose of the deferred object is to expose the associated Promise instance as well as APIs that can be used for signaling the successful or unsuccessful completion, as well as the status of the task.</source>
          <target state="translated">지연된 개체의 목적은 작업 상태뿐만 아니라 성공 또는 실패한 완료를 알리는 데 사용할 수있는 API뿐만 아니라 관련 Promise 인스턴스를 노출하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="84e8768d7c2eb6eea9fb7b09e5578fa5d987cd4d" translate="yes" xml:space="preserve">
          <source>The purpose of the promise object is to allow for interested parties to get access to the result of the deferred task when it completes.</source>
          <target state="translated">약속의 목적은 이해 당사자가 연기 된 작업이 완료되면 결과에 액세스 할 수 있도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="12c0a0d61ee769dc0a7c1715994804f7277a2078" translate="yes" xml:space="preserve">
          <source>The recipe for getting help on your unique issue is to create an example that could work (even if it doesn't) in a shareable example on &lt;a href=&quot;http://plnkr.co/&quot;&gt;Plunker&lt;/a&gt;, &lt;a href=&quot;http://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;, or similar site and then post to one of the following:</source>
          <target state="translated">고유 한 문제에 대한 도움을 얻는 방법은 &lt;a href=&quot;http://plnkr.co/&quot;&gt;Plunker&lt;/a&gt; , &lt;a href=&quot;http://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt; 또는 이와 유사한 사이트 에서 공유 가능한 예제에서 작동 할 수있는 예제를 작성하고 ( 다음 중 하나에 게시하는) 것입니다.</target>
        </trans-unit>
        <trans-unit id="35fb232d4894865030ea1759887368f2aded3f73" translate="yes" xml:space="preserve">
          <source>The reference to &lt;code&gt;myApp&lt;/code&gt; module in &lt;code&gt;&amp;lt;div ng-app=&quot;myApp&quot;&amp;gt;&lt;/code&gt;. This is what bootstraps the app using your module.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div ng-app=&quot;myApp&quot;&amp;gt;&lt;/code&gt; 의 &lt;code&gt;myApp&lt;/code&gt; 모듈에 대한 참조 입니다. 이것이 모듈을 사용하여 앱을 부트 스트랩하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d8810477942beaeaee286fe81161c775d9da02eb" translate="yes" xml:space="preserve">
          <source>The regular expression must be an instance of RegExp (i.e. not a string.) It is matched against the &lt;strong&gt;entire&lt;/strong&gt;&lt;em&gt;normalized / absolute URL&lt;/em&gt; of the resource being tested (even when the RegExp did not have the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; codes.) In addition, any flags present on the RegExp (such as multiline, global, ignoreCase) are ignored.</source>
          <target state="translated">정규식은 RegExp의 인스턴스 여야합니다 (예 : 문자열이 아님). 테스트중인 리소스의 &lt;em&gt;정규화 / 절대 URL &lt;/em&gt;&lt;strong&gt;전체&lt;/strong&gt; 와 일치 합니다 (RegExp에 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 코드 가없는 경우에도 ). RegExp에있는 플래그 (예 : multiline, global, ignoreCase)는 무시됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="862fa8a8a687fa2b536d9c358bd6db3e5af9b82c" translate="yes" xml:space="preserve">
          <source>The replacement process migrates all of the attributes / classes from the old element to the new one. See the &lt;a href=&quot;../../../guide/directive#template-expanding-directive.html&quot;&gt;Directives Guide&lt;/a&gt; for an example.</source>
          <target state="translated">대체 프로세스는 모든 속성 / 클래스를 이전 요소에서 새 요소로 마이그레이션합니다. 예 는 &lt;a href=&quot;../../../guide/directive#template-expanding-directive.html&quot;&gt;지시문 안내서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="baae8e3179a72344916f02ad84053532a8debe76" translate="yes" xml:space="preserve">
          <source>The response object has these properties:</source>
          <target state="translated">응답 객체에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="954fa0733320ae27181ccf9760b44cb912d27915" translate="yes" xml:space="preserve">
          <source>The result of a prior &lt;a href=&quot;%24sce#trustAs.html&quot;&gt;&lt;code&gt;$sce.trustAs&lt;/code&gt;&lt;/a&gt; call, or anything else (which will not be considered trusted.)</source>
          <target state="translated">이전 &lt;a href=&quot;%24sce#trustAs.html&quot;&gt; &lt;code&gt;$sce.trustAs&lt;/code&gt; &lt;/a&gt; 호출 의 결과 또는 기타 (신뢰할 수없는 것으로 간주 됨)</target>
        </trans-unit>
        <trans-unit id="778ed68784500d80168f4f1cb8de42f22ef35550" translate="yes" xml:space="preserve">
          <source>The result of a prior &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; call or anything else.</source>
          <target state="translated">이전 &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 호출 또는 기타 결과 .</target>
        </trans-unit>
        <trans-unit id="f6e45a4404226652de8c58acd05d8e6b3ea99beb" translate="yes" xml:space="preserve">
          <source>The result of a prior &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt;&lt;code&gt;$sceDelegate.trustAs&lt;/code&gt;&lt;/a&gt; call, or anything else (which will not be considered trusted.)</source>
          <target state="translated">이전 &lt;a href=&quot;%24scedelegate#trustAs.html&quot;&gt; &lt;code&gt;$sceDelegate.trustAs&lt;/code&gt; &lt;/a&gt; 호출 의 결과 또는 기타 (신뢰할 수없는 것으로 간주 됨)</target>
        </trans-unit>
        <trans-unit id="0fbfd9ab10f2fcfc0e43605231238f6c0ded7faf" translate="yes" xml:space="preserve">
          <source>The result of evaluating the expression.</source>
          <target state="translated">식을 평가 한 결과입니다.</target>
        </trans-unit>
        <trans-unit id="24d1f7d570b94cc6ad9c9b7d800fac81d6320b04" translate="yes" xml:space="preserve">
          <source>The result of this is a live binding between the scope and the DOM. So at this point, a change in a model on the compiled scope will be reflected in the DOM.</source>
          <target state="translated">이것의 결과는 범위와 DOM 사이의 라이브 바인딩입니다. 따라서이 시점에서 컴파일 된 범위의 모델 변경 사항이 DOM에 반영됩니다.</target>
        </trans-unit>
        <trans-unit id="a6b6643299e7c2857ed4c1427bec152f0e242127" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.CSS, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.CSS, value)&lt;/code&gt; 의 반환 값</target>
        </trans-unit>
        <trans-unit id="45a813410d787bc2a054b283286cdbe7c1020ab1" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.HTML, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.HTML, value)&lt;/code&gt; 의 반환 값</target>
        </trans-unit>
        <trans-unit id="b3ca9d9ba8ef58892b2647a2857931cb76ed96f4" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.JS, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.JS, value)&lt;/code&gt; 의 반환 값</target>
        </trans-unit>
        <trans-unit id="7f0c5cf3a8e15099fba3a60e6508cb831477a19c" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.RESOURCE_URL, value)&lt;/code&gt; 의 반환 값</target>
        </trans-unit>
        <trans-unit id="295e8d1672e32e8c877e2dda418b912ffdc21e8b" translate="yes" xml:space="preserve">
          <source>The return value of &lt;code&gt;$sce.getTrusted($sce.URL, value)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted($sce.URL, value)&lt;/code&gt; 의 반환 값</target>
        </trans-unit>
        <trans-unit id="85ef2c181da5028df11fbde1df5de14ad91e5d03" translate="yes" xml:space="preserve">
          <source>The return value of calling &lt;code&gt;$timeout&lt;/code&gt; is a promise, which will be resolved when the delay has passed and the timeout function, if provided, is executed.</source>
          <target state="translated">&lt;code&gt;$timeout&lt;/code&gt; 호출의 반환 값은 약속이며 지연이 지났고 시간 초과 기능 (제공된 경우)이 실행될 때 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="3b91569091098ef8818bad33c1660a55b8735e97" translate="yes" xml:space="preserve">
          <source>The return value of registering an interval function is a promise. This promise will be notified upon each tick of the interval, and will be resolved after &lt;code&gt;count&lt;/code&gt; iterations, or run indefinitely if &lt;code&gt;count&lt;/code&gt; is not defined. The value of the notification will be the number of iterations that have run. To cancel an interval, call &lt;code&gt;$interval.cancel(promise)&lt;/code&gt;.</source>
          <target state="translated">인터벌 함수 등록의 반환 값은 약속입니다. 이 약속은 간격의 각 틱마다 통지되며 &lt;code&gt;count&lt;/code&gt; 반복 후에 해결 되거나 &lt;code&gt;count&lt;/code&gt; 가 정의되지 않은 경우 무기한으로 실행됩니다 . 알림 값은 실행 된 반복 횟수입니다. 간격을 취소하려면 &lt;code&gt;$interval.cancel(promise)&lt;/code&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="ffa5113ebf43540eb4e8acfea21d2d33bd174676" translate="yes" xml:space="preserve">
          <source>The returned function also has the following properties:</source>
          <target state="translated">반환 된 함수에는 다음과 같은 속성도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5179be6b86116655b38058f0ad19bd9de4712c8" translate="yes" xml:space="preserve">
          <source>The returned resource object has action methods which provide high-level behaviors without the need to interact with the low level &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$http&lt;/a&gt; service.</source>
          <target state="translated">리턴 된 자원 오브젝트에는 하위 레벨 &lt;a href=&quot;../../ng/service/%24http&quot;&gt;$ http&lt;/a&gt; 서비스 와 상호 작용할 필요없이 상위 레벨 작동을 제공하는 조치 메소드가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6023496af7670d9c11586559bb4cd6e937a06ca6" translate="yes" xml:space="preserve">
          <source>The root element of AngularJS application. This is either the element where &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp&lt;/a&gt; was declared or the element passed into &lt;a href=&quot;../function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt;. The element represents the root element of application. It is also the location where the application's &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt; service gets published, and can be retrieved using &lt;code&gt;$rootElement.injector()&lt;/code&gt;.</source>
          <target state="translated">AngularJS 애플리케이션의 루트 요소입니다. 이 두 요소입니다 &lt;a href=&quot;../directive/ngapp&quot;&gt;ngApp는&lt;/a&gt; 선언이나에 전달 된 요소 &lt;a href=&quot;../function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt; . 요소는 응용 프로그램의 루트 요소를 나타냅니다. 또한 응용 프로그램의 &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;$ injector&lt;/a&gt; 서비스가 게시 되는 위치이며 &lt;code&gt;$rootElement.injector()&lt;/code&gt; 사용하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24dbde550866bde503deb0950b1e8e1246eac032" translate="yes" xml:space="preserve">
          <source>The root element of AngularJS application. This is either the element where &lt;a href=&quot;directive/ngapp&quot;&gt;ngApp&lt;/a&gt; was declared or the element passed into &lt;a href=&quot;function/angular.bootstrap&quot;&gt;&lt;code&gt;angular.bootstrap&lt;/code&gt;&lt;/a&gt;. The element represents the root element of application. It is also the location where the application's &lt;a href=&quot;../auto/service/%24injector&quot;&gt;$injector&lt;/a&gt; service gets published, and can be retrieved using &lt;code&gt;$rootElement.injector()&lt;/code&gt;.</source>
          <target state="translated">AngularJS 애플리케이션의 루트 요소입니다. 이 두 요소입니다 &lt;a href=&quot;directive/ngapp&quot;&gt;ngApp는&lt;/a&gt; 선언이나에 전달 된 요소 &lt;a href=&quot;function/angular.bootstrap&quot;&gt; &lt;code&gt;angular.bootstrap&lt;/code&gt; &lt;/a&gt; . 요소는 응용 프로그램의 루트 요소를 나타냅니다. 또한 응용 프로그램의 &lt;a href=&quot;../auto/service/%24injector&quot;&gt;$ injector&lt;/a&gt; 서비스가 게시 되는 위치이며 &lt;code&gt;$rootElement.injector()&lt;/code&gt; 사용하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9fcf79b2ca7c0e61431c4ddcce676e6a46e50533" translate="yes" xml:space="preserve">
          <source>The root scope</source>
          <target state="translated">루트 범위</target>
        </trans-unit>
        <trans-unit id="af6c0993a1b0bfa5a18a6aaa404dc362b0e915a7" translate="yes" xml:space="preserve">
          <source>The route change (and the &lt;code&gt;$location&lt;/code&gt; change that triggered it) can be prevented by calling &lt;code&gt;preventDefault&lt;/code&gt; method of the event. See &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; for more details about event object.</source>
          <target state="translated">&lt;code&gt;preventDefault&lt;/code&gt; 메소드를 호출 하여 라우트 변경 (및이 를 트리거 한 &lt;code&gt;$location&lt;/code&gt; 변경)을 막을 수 있습니다 . 참조 &lt;a href=&quot;../../ng/type/%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt; 이벤트 객체에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="fa7560a7875748906d4d03990b3f182804ac86d0" translate="yes" xml:space="preserve">
          <source>The route parameters are a combination of &lt;a href=&quot;../../ng/service/%24location&quot;&gt;&lt;code&gt;$location&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;../../ng/service/%24location#search.html&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../ng/service/%24location#path.html&quot;&gt;&lt;code&gt;path()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;path&lt;/code&gt; parameters are extracted when the &lt;a href=&quot;%24route&quot;&gt;&lt;code&gt;$route&lt;/code&gt;&lt;/a&gt; path is matched.</source>
          <target state="translated">라우트 매개 변수는 &lt;a href=&quot;../../ng/service/%24location&quot;&gt; &lt;code&gt;$location&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;../../ng/service/%24location#search.html&quot;&gt; &lt;code&gt;search()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../../ng/service/%24location#path.html&quot;&gt; &lt;code&gt;path()&lt;/code&gt; &lt;/a&gt; 의 조합입니다 . &lt;code&gt;path&lt;/code&gt; 경우 파라미터 추출 &lt;a href=&quot;%24route&quot;&gt; &lt;code&gt;$route&lt;/code&gt; &lt;/a&gt; 경로가 일치한다.</target>
        </trans-unit>
        <trans-unit id="a43d955a33928fdf9831543b7e1ccfb18aac7d0a" translate="yes" xml:space="preserve">
          <source>The same approach to animation can be used using JavaScript code (&lt;strong&gt;for simplicity, we rely on jQuery to perform animations here&lt;/strong&gt;):</source>
          <target state="translated">JavaScript 코드를 사용하여 동일한 애니메이션 접근 방식을 사용할 수 있습니다 ( &lt;strong&gt;간단하게하기 위해 여기서는 애니메이션을 수행하기 위해 jQuery를 사용합니다&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="523d2b0e20860e85d563f00d6bc85a673967639f" translate="yes" xml:space="preserve">
          <source>The sanitization is a security measure aimed at prevent XSS attacks via html links.</source>
          <target state="translated">살균은 html 링크를 통한 XSS 공격을 방지하기위한 보안 조치입니다.</target>
        </trans-unit>
        <trans-unit id="1c5c39472248d0e17c07e839034df405aa0eb20b" translate="yes" xml:space="preserve">
          <source>The sanitization is a security measure aimed at preventing XSS attacks via html links.</source>
          <target state="translated">살균은 html 링크를 통한 XSS 공격을 방지하기위한 보안 조치입니다.</target>
        </trans-unit>
        <trans-unit id="b4a02425298ded7dac67b95b4a87a03949623e78" translate="yes" xml:space="preserve">
          <source>The scope property can be &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, or an object:</source>
          <target state="translated">scope 속성은 &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;true&lt;/code&gt; 또는 객체 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f955ab37c085081f8ecb0e355fa65bbe8fdd0a33" translate="yes" xml:space="preserve">
          <source>The second approach (including the locale JavaScript file in &lt;code&gt;index.html&lt;/code&gt;) may be slower because an extra script needs to be loaded.</source>
          <target state="translated">추가 스크립트를로드해야하므로 두 번째 방법 ( &lt;code&gt;index.html&lt;/code&gt; 의 로캘 JavaScript 파일 포함 )이 느려질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef0a91ee83246c2362ec6b21594ab31561d60a90" translate="yes" xml:space="preserve">
          <source>The second kind of new markup are the double curly braces &lt;code&gt;{{ expression | filter }}&lt;/code&gt;: When the compiler encounters this markup, it will replace it with the evaluated value of the markup. An &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; in a template is a JavaScript-like code snippet that allows AngularJS to read and write variables. Note that those variables are not global variables. Just like variables in a JavaScript function live in a scope, AngularJS provides a &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt; for the variables accessible to expressions. The values that are stored in variables on the scope are referred to as the &lt;em&gt;model&lt;/em&gt; in the rest of the documentation. Applied to the example above, the markup directs AngularJS to &quot;take the data we got from the input widgets and multiply them together&quot;.</source>
          <target state="translated">새로운 마크 업의 두 번째 종류는 이중 중괄호 &lt;code&gt;{{ expression | filter }}&lt;/code&gt; : 컴파일러가이 마크 업을 만나면 평가 된 마크 업 값으로 대체합니다. 템플릿 의 &lt;a href=&quot;expression&quot;&gt;표현식&lt;/a&gt; 은 AngularJS가 변수를 읽고 쓸 수있게하는 JavaScript와 유사한 코드 스 니펫입니다. 이러한 변수는 전역 변수가 아닙니다. JavaScript 함수의 변수가 범위 내에있는 것처럼 AngularJS는 표현식에 액세스 할 수있는 변수 의 &lt;a href=&quot;scope&quot;&gt;범위&lt;/a&gt; 를 제공합니다 . 범위의 변수에 저장된 값 은 나머지 문서에서 &lt;em&gt;모델&lt;/em&gt; 이라고합니다 . 위의 예에 적용된 마크 업은 AngularJS가 &quot;입력 위젯에서 얻은 데이터를 가져 와서 곱하도록&quot;지시합니다.</target>
        </trans-unit>
        <trans-unit id="2ebae70ef1fa6d7815534c38bd1f7fc688ed15c4" translate="yes" xml:space="preserve">
          <source>The second option is more common in the AngularJS community, and is generally used in boilerplates and in this guide. However, there are advantages to binding properties directly to the controller and avoiding scope.</source>
          <target state="translated">두 번째 옵션은 AngularJS 커뮤니티에서 더 일반적이며 상용구 및이 안내서에서 일반적으로 사용됩니다. 그러나 속성을 컨트롤러에 직접 바인딩하고 범위를 피하는 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="58b2b19de1ee7661079f7d4e8bb9f6b0ded798f9" translate="yes" xml:space="preserve">
          <source>The section &lt;a href=&quot;scope#directives-that-create-scopes.html&quot;&gt;Directives that Create Scopes&lt;/a&gt; has more info about which directives create scopes.</source>
          <target state="translated">&lt;a href=&quot;scope#directives-that-create-scopes.html&quot;&gt;범위 작성 지시문&lt;/a&gt; 섹션 에는 범위를 작성 하는 지시문에 대한 자세한 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="7899b56cd85970f84bbdd5c6f66e1f854610afa5" translate="yes" xml:space="preserve">
          <source>The selection keywords can be either exact matches or language dependent &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;plural categories&lt;/a&gt;.</source>
          <target state="translated">선택 키워드는 정확히 일치하거나 언어에 따른 &lt;a href=&quot;http://cldr.unicode.org/index/cldr-spec/plural-rules&quot;&gt;복수 범주 일 수&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8625b6727f5759d3c8e5906c05a932804143e94" translate="yes" xml:space="preserve">
          <source>The service guarantees that the identity of the &lt;code&gt;$routeParams&lt;/code&gt; object will remain unchanged (but its properties will likely change) even when a route change occurs.</source>
          <target state="translated">이 서비스 는 경로 변경이 발생하더라도 &lt;code&gt;$routeParams&lt;/code&gt; 객체 의 ID 가 변경되지 않고 유지되지만 (속성이 변경 될 수 있음) 보장 합니다.</target>
        </trans-unit>
        <trans-unit id="60b4ba9fbc0c43d1d89edc827281cf4b26db6b11" translate="yes" xml:space="preserve">
          <source>The simplest form is to extract the dependencies from the arguments of the function. This is done by converting the function into a string using &lt;code&gt;toString()&lt;/code&gt; method and extracting the argument names.</source>
          <target state="translated">가장 간단한 형식은 함수의 인수에서 종속성을 추출하는 것입니다. &lt;code&gt;toString()&lt;/code&gt; 메서드를 사용하여 함수를 문자열로 변환 하고 인수 이름을 추출하면됩니다.</target>
        </trans-unit>
        <trans-unit id="3d8b353bfb07213b4379a03d5d422c15fb95b7ac" translate="yes" xml:space="preserve">
          <source>The simplest way to get hold of the dependencies is to assume that the function parameter names are the names of the dependencies.</source>
          <target state="translated">종속성을 얻는 가장 간단한 방법은 함수 매개 변수 이름이 종속성의 이름이라고 가정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c64a50b85ba98a676c625d981a6a8bbf9f4f8a52" translate="yes" xml:space="preserve">
          <source>The singleton instance of the &lt;a href=&quot;../type/rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; type, which is associated with the top level &lt;a href=&quot;%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">최상위 &lt;a href=&quot;%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt; 와 연관된 &lt;a href=&quot;../type/rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt; 유형 의 싱글 톤 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="ba995a06669ab9293ed40548419fa1f16acfcf3f" translate="yes" xml:space="preserve">
          <source>The singleton instance of the &lt;a href=&quot;ngcomponentrouter/type/rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; type, which is associated with the top level &lt;a href=&quot;ngcomponentrouter/service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">최상위 &lt;a href=&quot;ngcomponentrouter/service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt; 와 연관된 &lt;a href=&quot;ngcomponentrouter/type/rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt; 유형 의 싱글 톤 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="d028290d2d263328b04957680190b4fc0e324747" translate="yes" xml:space="preserve">
          <source>The singleton instance of the &lt;a href=&quot;type/rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; type, which is associated with the top level &lt;a href=&quot;service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">최상위 &lt;a href=&quot;service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt; 와 연관된 &lt;a href=&quot;type/rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt; 유형 의 싱글 톤 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="767e784d7ccc55d7ed23bfc011d3d6882f0b815d" translate="yes" xml:space="preserve">
          <source>The solution is to break the compilation process into two phases:</source>
          <target state="translated">해결책은 컴파일 프로세스를 두 단계로 나누는 것입니다.</target>
        </trans-unit>
        <trans-unit id="44bd33d4e5c5dbd425e1b01d352cce7c15b457b1" translate="yes" xml:space="preserve">
          <source>The sorted array.</source>
          <target state="translated">정렬 된 배열.</target>
        </trans-unit>
        <trans-unit id="2132b1a1146e5e5ced071e842080bf9a009b6944" translate="yes" xml:space="preserve">
          <source>The source array.</source>
          <target state="translated">소스 배열</target>
        </trans-unit>
        <trans-unit id="0e88179bff5210ac7427674521c7a3345e2dd3b9" translate="yes" xml:space="preserve">
          <source>The source that will be used to make a copy. Can be any type, including primitives, &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">사본을 만드는 데 사용될 소스입니다. 프리미티브, &lt;code&gt;null&lt;/code&gt; 및 &lt;code&gt;undefined&lt;/code&gt; 를 포함한 모든 유형이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d85a9cbe026aa1a3ba5f747284fb0ad3f412ddf3" translate="yes" xml:space="preserve">
          <source>The special &lt;strong&gt;string&lt;/strong&gt;, &lt;code&gt;'self'&lt;/code&gt;, can be used to match against all URLs of the &lt;strong&gt;same domain&lt;/strong&gt; as the application document using the &lt;strong&gt;same protocol&lt;/strong&gt;.</source>
          <target state="translated">특수 &lt;strong&gt;문자열&lt;/strong&gt; , &lt;code&gt;'self'&lt;/code&gt; ,의 모든 URL에 대해 일치하는 데 사용할 수있는 &lt;strong&gt;동일한 도메인&lt;/strong&gt; 사용하여 응용 프로그램 문서와 &lt;strong&gt;같은 프로토콜을&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="b55be8e2b115455f7e384250866854b317142fba" translate="yes" xml:space="preserve">
          <source>The special property name that matches against any property. By default &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="translated">모든 속성과 일치하는 특수 속성 이름입니다. 기본적으로 &lt;code&gt;$&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7279a354975752084c586a2a76858e65adbcf9b6" translate="yes" xml:space="preserve">
          <source>The streamlined ES6 style promise is essentially just using $q as a constructor which takes a &lt;code&gt;resolver&lt;/code&gt; function as the first argument. This is similar to the native Promise implementation from ES6, see &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;MDN&lt;/a&gt;.</source>
          <target state="translated">간소화 된 ES6 스타일 약속은 본질적으로 $ q를 생성자 로 사용하여 첫 번째 인수로 &lt;code&gt;resolver&lt;/code&gt; 함수를 사용합니다. 이것은 ES6의 기본 Promise 구현과 유사합니다 ( &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;MDN&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="a25884531cd967bc8dd68721f141065ccbf8a1a8" translate="yes" xml:space="preserve">
          <source>The string can use the &lt;code&gt;controller as property&lt;/code&gt; syntax, where the controller instance is published as the specified property on the &lt;code&gt;scope&lt;/code&gt;; the &lt;code&gt;scope&lt;/code&gt; must be injected into &lt;code&gt;locals&lt;/code&gt; param for this to work correctly.</source>
          <target state="translated">문자열은 &lt;code&gt;controller as property&lt;/code&gt; 구문 으로 사용할 수 있습니다. 여기서 컨트롤러 인스턴스는 &lt;code&gt;scope&lt;/code&gt; 에서 지정된 속성으로 게시됩니다 . 이것이 제대로 작동 하려면 &lt;code&gt;scope&lt;/code&gt; 를 &lt;code&gt;locals&lt;/code&gt; 매개 변수에 삽입해야 합니다.</target>
        </trans-unit>
        <trans-unit id="a64f560cdc5bc1215f3896949fd70a8f33418cdb" translate="yes" xml:space="preserve">
          <source>The string is matched against the full &lt;em&gt;normalized / absolute URL&lt;/em&gt; of the resource being tested (substring matches are not good enough.)</source>
          <target state="translated">문자열이 테스트중인 리소스의 &lt;em&gt;정규화 된 / 절대 URL&lt;/em&gt; 과 일치합니다 (하위 문자열 일치가 충분하지 않음).</target>
        </trans-unit>
        <trans-unit id="14ebe6cf667e2257d2375b20acaba4b014d40a48" translate="yes" xml:space="preserve">
          <source>The syntax extension is based on a subset of the ICU MessageFormat syntax that covers plurals and gender selections. Please refer to the links in the &amp;ldquo;Further Reading&amp;rdquo; section at the bottom of this section.</source>
          <target state="translated">구문 확장은 복수 및 성별 선택을 다루는 ICU MessageFormat 구문의 하위 세트를 기반으로합니다. 이 섹션 하단의 &quot;추가 정보&quot;섹션에있는 링크를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b15b3f178b589324cba127ffcc8609a03ddf2842" translate="yes" xml:space="preserve">
          <source>The syntax for gender based message selection looks like the following:</source>
          <target state="translated">성별 기반 메시지 선택 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="514dc6d368ee619bf7af44246bc3cca46261a937" translate="yes" xml:space="preserve">
          <source>The syntax for plural based message selection looks like the following:</source>
          <target state="translated">복수 기반 메시지 선택 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="331463984a3b27be7e66de67f6ec1c8959531bed" translate="yes" xml:space="preserve">
          <source>The text with markup to interpolate.</source>
          <target state="translated">보간 할 마크 업이있는 텍스트</target>
        </trans-unit>
        <trans-unit id="236530003226f5a2700778994862268772faf8ef" translate="yes" xml:space="preserve">
          <source>The third option is the most viable, since it removes the responsibility of locating the dependency from the component. The dependency is simply handed to the component.</source>
          <target state="translated">세 번째 옵션은 구성 요소에서 종속성을 찾는 책임을 제거하므로 가장 실행 가능성이 높습니다. 종속성은 단순히 구성 요소에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="4caf4221a8f1aa9f8dc16ac34dd67bede58930f0" translate="yes" xml:space="preserve">
          <source>The thrown error or the rejection reason of the promise. Usually the rejection reason is the error that caused the promise to get rejected.</source>
          <target state="translated">던진 오류 또는 약속의 거부 이유. 일반적으로 거부 이유는 약속이 거부 된 오류입니다.</target>
        </trans-unit>
        <trans-unit id="0fcb5525777e571593fc5ca6445988612048c985" translate="yes" xml:space="preserve">
          <source>The timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model can be defined using &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt;. By default, this is the timezone of the browser.</source>
          <target state="translated">모델에서 &lt;code&gt;Date&lt;/code&gt; 인스턴스 를 읽고 쓰는 데 사용되는 시간대는 &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;ngModelOptions를&lt;/a&gt; 사용하여 정의 할 수 있습니다 . 기본적으로 이것은 브라우저의 시간대입니다.</target>
        </trans-unit>
        <trans-unit id="868b7f5eb24b022a5fcaababfa42809503b39961" translate="yes" xml:space="preserve">
          <source>The timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model can be defined using &lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions&lt;/a&gt;. By default, this is the timezone of the browser.</source>
          <target state="translated">The timezone to be used to read/write the &lt;code&gt;Date&lt;/code&gt; instance in the model can be defined using &lt;a href=&quot;../directive/ngmodeloptions#ngModelOptions-arguments.html&quot;&gt;ngModelOptions&lt;/a&gt;. By default, this is the timezone of the browser.</target>
        </trans-unit>
        <trans-unit id="7a7b44ea3970e86105ad586eeb8a71485b91c29b" translate="yes" xml:space="preserve">
          <source>The top level &lt;strong&gt;Routing Component&lt;/strong&gt; associated with the &lt;a href=&quot;%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt; 와 연관된 최상위 &lt;strong&gt;라우팅 구성 요소&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="548afd75a531de9081c581cb6d8715fb94f8f938" translate="yes" xml:space="preserve">
          <source>The top level &lt;strong&gt;Routing Component&lt;/strong&gt; associated with the &lt;a href=&quot;ngcomponentrouter/service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngcomponentrouter/service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt; 와 연관된 최상위 &lt;strong&gt;라우팅 구성 요소&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="386ecc261ed1232a9a17fbea9ac69f87afe81bba" translate="yes" xml:space="preserve">
          <source>The top level &lt;strong&gt;Routing Component&lt;/strong&gt; associated with the &lt;a href=&quot;service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt; 와 연관된 최상위 &lt;strong&gt;라우팅 구성 요소&lt;/strong&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3c20caf8f7521f61e6feb092a5803374027a8c2b" translate="yes" xml:space="preserve">
          <source>The trusted URIs for URL sanitization of attribute values is configured using the functions &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; and &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; of &lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The trusted URIs for URL sanitization of attribute values is configured using the functions &lt;code&gt;aHrefSanitizationTrustedUrlList&lt;/code&gt; and &lt;code&gt;imgSrcSanitizationTrustedUrlList&lt;/code&gt; of &lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5864476324c5e315d5688546efeaae47300579a1" translate="yes" xml:space="preserve">
          <source>The two images match since they share the same ref value. ngAnimate will now create a transport element (which is a clone of the first image element) and it will then attempt to animate to the position of the second image element in the next view. For the animation to work a special CSS class called &lt;code&gt;ng-anchor&lt;/code&gt; will be added to the transported element.</source>
          <target state="translated">두 이미지는 동일한 참조 값을 공유하므로 일치합니다. ngAnimate는 이제 전송 요소 (첫 번째 이미지 요소의 복제본)를 만들고 다음보기에서 두 번째 이미지 요소의 위치에 애니메이션을 적용하려고 시도합니다. 애니메이션이 작동하려면 &lt;code&gt;ng-anchor&lt;/code&gt; 라는 특수 CSS 클래스 가 전송 된 요소에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="0e52841430957d24c12d016a27d0ebbbbee23eb5" translate="yes" xml:space="preserve">
          <source>The type of tasks to check for.</source>
          <target state="translated">확인할 작업 유형입니다.</target>
        </trans-unit>
        <trans-unit id="c9809d2c6f9fe9599eaef845df8e9b7ac65b418e" translate="yes" xml:space="preserve">
          <source>The types of tasks that are flushed include:</source>
          <target state="translated">플러시되는 작업 유형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="08cdbbdad2420a9ae88b4ca94f4b7acbe330690c" translate="yes" xml:space="preserve">
          <source>The typical usage for the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; is to &lt;strong&gt;block &lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;open redirects&lt;/a&gt;&lt;/strong&gt; served by your domain as these would otherwise be trusted but actually return content from the redirected domain.</source>
          <target state="translated">The typical usage for the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; is to &lt;strong&gt;block &lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;open redirects&lt;/a&gt;&lt;/strong&gt; served by your domain as these would otherwise be trusted but actually return content from the redirected domain.</target>
        </trans-unit>
        <trans-unit id="46b2bd429084177f8681f56d4ade922af6dc9c27" translate="yes" xml:space="preserve">
          <source>The typical usage for the blacklist is to &lt;strong&gt;block &lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;open redirects&lt;/a&gt;&lt;/strong&gt; served by your domain as these would otherwise be trusted but actually return content from the redirected domain.</source>
          <target state="translated">블랙리스트의 일반적인 사용법은 신뢰할 수 있지만 실제로 리디렉션 된 도메인에서 콘텐츠를 반환하기 때문에 도메인에서 제공하는 &lt;strong&gt;&lt;a href=&quot;http://cwe.mitre.org/data/definitions/601.html&quot;&gt;열린 리디렉션&lt;/a&gt;&lt;/strong&gt; 을 &lt;strong&gt;차단&lt;/strong&gt; 하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0870b31834bb02fbc73aaf4c9ab88489da8144fb" translate="yes" xml:space="preserve">
          <source>The underlying API is the &lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt;&lt;code&gt;$filterProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">기본 API는 &lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt; &lt;code&gt;$filterProvider&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7da48aa48cb58f7d4f1b84542c5c4e396f23ea4f" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;eval()&lt;/code&gt;, &lt;code&gt;Function(string)&lt;/code&gt; and similar functions to dynamically create and execute code from strings is forbidden. AngularJS makes use of this in the &lt;a href=&quot;../service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service to provide a 30% increase in the speed of evaluating AngularJS expressions. (This CSP rule can be disabled with the CSP keyword &lt;code&gt;unsafe-eval&lt;/code&gt;, but it is generally not recommended as it would weaken the protections offered by CSP.)</source>
          <target state="translated">사용 &lt;code&gt;eval()&lt;/code&gt; , &lt;code&gt;Function(string)&lt;/code&gt; 동적 문자열의 코드를 생성하고 실행하기 위해 유사한 기능은 금지된다. AngularJS는 &lt;a href=&quot;../service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt; 서비스 에서 이것을 사용하여 AngularJS 표현식 평가 속도를 30 % 향상시킵니다. (이 CSP 규칙은 CSP 키워드 &lt;code&gt;unsafe-eval&lt;/code&gt; 로 비활성화 할 수 있지만 일반적으로 CSP가 제공하는 보호 기능을 약화 시키므로 권장하지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="ab18458a0f8961320a15a220d2d9624ea8d111c4" translate="yes" xml:space="preserve">
          <source>The use of inline resources, such as inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements, are forbidden. This prevents apps from injecting custom styles directly into the document. AngularJS makes use of this to include some CSS rules (e.g. &lt;a href=&quot;ngcloak&quot;&gt;&lt;code&gt;ngCloak&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;). To make these directives work when a CSP rule is blocking inline styles, you must link to the &lt;code&gt;angular-csp.css&lt;/code&gt; in your HTML manually. (This CSP rule can be disabled with the CSP keyword &lt;code&gt;unsafe-inline&lt;/code&gt;, but it is generally not recommended as it would weaken the protections offered by CSP.)</source>
          <target state="translated">인라인 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 요소 와 같은 인라인 리소스 사용 은 금지되어 있습니다. 이렇게하면 앱이 사용자 지정 스타일을 문서에 직접 주입하지 못합니다. AngularJS는이를 사용하여 일부 CSS 규칙 (예 : &lt;a href=&quot;ngcloak&quot;&gt; &lt;code&gt;ngCloak&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt; )을 포함시킵니다. CSP 규칙이 인라인 스타일을 차단할 때 이러한 지시문이 작동하게하려면 HTML에서 &lt;code&gt;angular-csp.css&lt;/code&gt; 에 수동으로 연결해야합니다. (이 CSP 규칙은 CSP 키워드 &lt;code&gt;unsafe-inline&lt;/code&gt; 으로 비활성화 할 수 있지만 일반적으로 CSP에서 제공하는 보호 기능을 약화 시키므로 권장하지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="eebb37fdb7d6c174eb9c065210d8ec5ba28ee2bf" translate="yes" xml:space="preserve">
          <source>The validator sets the &lt;code&gt;maxlength&lt;/code&gt; error key if the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; is longer than the integer obtained by evaluating the AngularJS expression given in the &lt;code&gt;ngMaxlength&lt;/code&gt; attribute value.</source>
          <target state="translated">&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;ngMaxlength&lt;/code&gt; 속성 값에 제공된 AngularJS 표현식을 평가하여 얻은 정수보다 긴 경우 유효성 검증기는 &lt;code&gt;maxlength&lt;/code&gt; 오류 키를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="95e23f64426ffefd09f928fb9dadff94eb920e6f" translate="yes" xml:space="preserve">
          <source>The validator sets the &lt;code&gt;minlength&lt;/code&gt; error key if the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; is shorter than the integer obtained by evaluating the AngularJS expression given in the &lt;code&gt;ngMinlength&lt;/code&gt; attribute value.</source>
          <target state="translated">검사기는 설정 &lt;code&gt;minlength&lt;/code&gt; 경우 생성 오류 키 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt; 에 주어진 AngularJS와 식 평가에 의해 얻어진 정수보다 짧은 &lt;code&gt;ngMinlength&lt;/code&gt; 의 특성 값.</target>
        </trans-unit>
        <trans-unit id="e24301c2cb5d52b2ea32feb0ec399b5f0d739449" translate="yes" xml:space="preserve">
          <source>The validator sets the &lt;code&gt;pattern&lt;/code&gt; error key if the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; does not match a RegExp which is obtained from the &lt;code&gt;ngPattern&lt;/code&gt; attribute value:</source>
          <target state="translated">&lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;ngPattern&lt;/code&gt; 속성 값 에서 얻은 RegExp와 일치하지 않으면 유효성 검사기는 &lt;code&gt;pattern&lt;/code&gt; 오류 키를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="8b8747fb2ca401641b1a4ecf5eb6042bf5b61777" translate="yes" xml:space="preserve">
          <source>The validator will set the &lt;code&gt;required&lt;/code&gt; error key to true if the &lt;code&gt;required&lt;/code&gt; attribute is set and calling &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24isEmpty.html&quot;&gt;&lt;code&gt;NgModelController.$isEmpty&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt;&lt;code&gt;ngModel.$viewValue&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;true&lt;/code&gt;. For example, the &lt;code&gt;$isEmpty()&lt;/code&gt; implementation for &lt;code&gt;input[text]&lt;/code&gt; checks the length of the &lt;code&gt;$viewValue&lt;/code&gt;. When developing custom controls, &lt;code&gt;$isEmpty()&lt;/code&gt; can be overwritten to account for a $viewValue that is not string-based.</source>
          <target state="translated">발리는 설정합니다 &lt;code&gt;required&lt;/code&gt; 경우 생성 true로 오류 키를 &lt;code&gt;required&lt;/code&gt; 속성이 설정되어 및 호출 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24isEmpty.html&quot;&gt; &lt;code&gt;NgModelController.$isEmpty&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24viewValue.html&quot;&gt; &lt;code&gt;ngModel.$viewValue&lt;/code&gt; &lt;/a&gt; 반환 &lt;code&gt;true&lt;/code&gt; . 예를 들어 &lt;code&gt;input[text]&lt;/code&gt; 의 &lt;code&gt;$isEmpty()&lt;/code&gt; 구현 은 &lt;code&gt;$viewValue&lt;/code&gt; 의 길이를 확인합니다 . 사용자 정의 컨트롤을 개발할 때 문자열 기반이 아닌 $ viewValue를 설명하기 위해 &lt;code&gt;$isEmpty()&lt;/code&gt; 를 덮어 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da43acb6e9a82ff95654a25655433849b9f27b07" translate="yes" xml:space="preserve">
          <source>The value in the model that the control is bound to.</source>
          <target state="translated">컨트롤이 바인딩 된 모델의 값입니다.</target>
        </trans-unit>
        <trans-unit id="14b23e5ee2cfb999b445acbc780311b9a12fe737" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;ngModel&lt;/code&gt; won't be set unless it passes validation for the input field. For example: inputs of type &lt;code&gt;email&lt;/code&gt; must have a value in the form of &lt;code&gt;user@domain&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ngModel&lt;/code&gt; 의 값은 입력 필드의 유효성 검사를 통과하지 않으면 설정되지 않습니다. 예를 들어, &lt;code&gt;email&lt;/code&gt; 유형의 입력 은 &lt;code&gt;user@domain&lt;/code&gt; 형식의 값을 가져야 합니다 .</target>
        </trans-unit>
        <trans-unit id="b7c0a4135d026e4590cabdf020b1214be6ef8102" translate="yes" xml:space="preserve">
          <source>The value of the &lt;code&gt;count&lt;/code&gt; attribute can be either a string or an &lt;a href=&quot;../../../guide/expression&quot;&gt;AngularJS expression&lt;/a&gt;; these are evaluated on the current scope for its bound value.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 속성 값은 문자열 또는 &lt;a href=&quot;../../../guide/expression&quot;&gt;AngularJS 표현식&lt;/a&gt; 일 수 있습니다 . 이들은 현재 범위에서 해당 바운드 값에 대해 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="1b73e986ca72f64054cdba299a9701373d5dfec0" translate="yes" xml:space="preserve">
          <source>The value of the input to check for emptiness.</source>
          <target state="translated">공허를 점검하기위한 입력 값.</target>
        </trans-unit>
        <trans-unit id="68500ed77d9f6217be712f6f8cdb503a97df879b" translate="yes" xml:space="preserve">
          <source>The value of the resulting Date object will be set to Thursday at 00:00:00 of the requested week, due to ISO-8601 week numbering standards. Information on ISO's system for numbering the weeks of the year can be found at: &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&quot;&gt;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&lt;/a&gt;</source>
          <target state="translated">The value of the resulting Date object will be set to Thursday at 00:00:00 of the requested week, due to ISO-8601 week numbering standards. Information on ISO's system for numbering the weeks of the year can be found at: &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&quot;&gt;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44463f976abf31a5394099b3a0a4e6208a67f0fc" translate="yes" xml:space="preserve">
          <source>The value referenced by &lt;code&gt;ng-model&lt;/code&gt; is changed programmatically and both the &lt;code&gt;$modelValue&lt;/code&gt; and the &lt;code&gt;$viewValue&lt;/code&gt; are different from last time.</source>
          <target state="translated">&lt;code&gt;ng-model&lt;/code&gt; 이 참조하는 값 은 프로그래밍 방식으로 변경되며 &lt;code&gt;$modelValue&lt;/code&gt; 와 &lt;code&gt;$viewValue&lt;/code&gt; 는 마지막 시간과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="6b0143fd9ece1d0387124beb89dd5c7fd4bc5a91" translate="yes" xml:space="preserve">
          <source>The value that should be considered trusted.</source>
          <target state="translated">신뢰할 수있는 것으로 간주해야 할 가치.</target>
        </trans-unit>
        <trans-unit id="6b506880f20531602ad2eb0fa099daa12bfb5b84" translate="yes" xml:space="preserve">
          <source>The value that that should be considered trusted.</source>
          <target state="translated">신뢰할 수있는 것으로 간주해야하는 가치.</target>
        </trans-unit>
        <trans-unit id="3174f6de2b1a572b3ef68f749f440587119fa478" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.CSS&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.CSS&lt;/code&gt; 컨텍스트에 신뢰할 수있는 것으로 표시 할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="c130aa44236fc44f23102a665d5d5963b688f052" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.HTML&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.HTML&lt;/code&gt; 컨텍스트에 대해 신뢰할 수있는 것으로 표시 할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="cf9b76745715759b224d248b10d334a51d267341" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.JS&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.JS&lt;/code&gt; 컨텍스트에 대해 신뢰할 수있는 것으로 표시 할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="def9516ca7a6eb4975cef660dfbfbd813f67783b" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.RESOURCE_URL&lt;/code&gt; 컨텍스트에 신뢰할 수있는 것으로 표시 할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="055605c6f52998605859dc20359c0bf18aa8a534" translate="yes" xml:space="preserve">
          <source>The value to mark as trusted for &lt;code&gt;$sce.URL&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;$sce.URL&lt;/code&gt; 컨텍스트에 신뢰할 수있는 것으로 표시 할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="435759993cef3a1ebd9ea38393b7168b54598cf3" translate="yes" xml:space="preserve">
          <source>The value to pass to &lt;code&gt;$sce.getTrusted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sce.getTrusted&lt;/code&gt; 에 전달할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="35971100dfde05b044e38f25dc4ec52471feb171" translate="yes" xml:space="preserve">
          <source>The value to pass to &lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$sceDelegate.getTrusted&lt;/code&gt; 에 전달할 값 입니다.</target>
        </trans-unit>
        <trans-unit id="ac85b0b337041f750863e0ac9290cbb89be4187d" translate="yes" xml:space="preserve">
          <source>The value to which the &lt;code&gt;ngModel&lt;/code&gt; expression should be set when selected. Note that &lt;code&gt;value&lt;/code&gt; only supports &lt;code&gt;string&lt;/code&gt; values, i.e. the scope model needs to be a string, too. Use &lt;code&gt;ngValue&lt;/code&gt; if you need complex models (&lt;code&gt;number&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt;, ...).</source>
          <target state="translated">The value to which the &lt;code&gt;ngModel&lt;/code&gt; expression should be set when selected. Note that &lt;code&gt;value&lt;/code&gt; only supports &lt;code&gt;string&lt;/code&gt; values, i.e. the scope model needs to be a string, too. Use &lt;code&gt;ngValue&lt;/code&gt; if you need complex models ( &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;object&lt;/code&gt; , ...).</target>
        </trans-unit>
        <trans-unit id="4c416f0d3d013e85da9db521ca1012a12785ff0a" translate="yes" xml:space="preserve">
          <source>The value to which the expression should be set when not selected.</source>
          <target state="translated">The value to which the expression should be set when not selected.</target>
        </trans-unit>
        <trans-unit id="24f1cbcb12e1756c07f79821079ed5875b8c6b04" translate="yes" xml:space="preserve">
          <source>The value to which the expression should be set when selected.</source>
          <target state="translated">The value to which the expression should be set when selected.</target>
        </trans-unit>
        <trans-unit id="36090b23e6b19abea403f7cf11708f739d6ebe0a" translate="yes" xml:space="preserve">
          <source>The value.</source>
          <target state="translated">가치.</target>
        </trans-unit>
        <trans-unit id="62a76571179e7a797adcf5b0dca4482159e1774f" translate="yes" xml:space="preserve">
          <source>The variable to be bound to.</source>
          <target state="translated">바인딩 할 변수입니다.</target>
        </trans-unit>
        <trans-unit id="eb0c8dfaa72fe998ded88b434f150524ba3c8874" translate="yes" xml:space="preserve">
          <source>The version could then be read back out by accessing the module elsewhere:</source>
          <target state="translated">그런 다음 다른 곳에서 모듈에 액세스하여 버전을 다시 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43454983a5496d952f24ef6981aa235148e2e821" translate="yes" xml:space="preserve">
          <source>The watch &lt;code&gt;listener&lt;/code&gt; may change the model, which may trigger other &lt;code&gt;listener&lt;/code&gt;s to fire. This is achieved by rerunning the watchers until no changes are detected. The rerun iteration limit is 10 to prevent an infinite loop deadlock.</source>
          <target state="translated">시계 &lt;code&gt;listener&lt;/code&gt; 가 모델을 변경하여 다른 &lt;code&gt;listener&lt;/code&gt; 가 시작될 수 있습니다 . 변경 사항이 감지되지 않을 때까지 감시자를 다시 실행하면됩니다. 무한 루프 교착 상태를 방지하기 위해 재실행 반복 한계는 10입니다.</target>
        </trans-unit>
        <trans-unit id="b3908c90281bc35a0fa4df23a51dff370901b1f6" translate="yes" xml:space="preserve">
          <source>The watchers of the current scope are included in the count and so are all the watchers of isolate child scopes.</source>
          <target state="translated">현재 범위의 감시자는 수에 포함되며 격리 된 하위 범위의 모든 감시자도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f561ff816ae7aefdfc8fd009517d7b9fcbad64ce" translate="yes" xml:space="preserve">
          <source>The way you define a directive, service, or filter is with a factory function. The factory methods are registered with modules. The recommended way of declaring factories is:</source>
          <target state="translated">지시문, 서비스 또는 필터를 정의하는 방법은 팩토리 기능을 사용합니다. 팩토리 메소드는 모듈에 등록되어 있습니다. 팩토리를 선언하는 권장 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fb5175d364ed0ee1ef08306c1d28e391169ff525" translate="yes" xml:space="preserve">
          <source>The whitelist for URL sanitization of attribute values is configured using the functions &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; and &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; of &lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt;&lt;code&gt;$compileProvider&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">속성 값의 URL 삭제를위한 화이트리스트 는 &lt;a href=&quot;../../ng/provider/%24compileprovider&quot;&gt; &lt;code&gt;$compileProvider&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;aHrefSanitizationWhitelist&lt;/code&gt; 및 &lt;code&gt;imgSrcSanitizationWhitelist&lt;/code&gt; 함수를 사용하여 구성됩니다 .</target>
        </trans-unit>
        <trans-unit id="6bcb4b40a369e071e66ceee940ccd85ed11ee25c" translate="yes" xml:space="preserve">
          <source>The workaround is to ensure that such instances are separated by whitespace:</source>
          <target state="translated">해결 방법은 이러한 인스턴스가 공백으로 분리되도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b08b5bc31a0f9b0aaed1244795ed5323c9f55509" translate="yes" xml:space="preserve">
          <source>The wrong way to write it:</source>
          <target state="translated">그것을 쓰는 잘못된 방법 :</target>
        </trans-unit>
        <trans-unit id="987f327e589afcef1c088418e5aec840d608c486" translate="yes" xml:space="preserve">
          <source>Then load the module in your application by adding it as a dependent module:</source>
          <target state="translated">그런 다음 모듈을 종속 모듈로 추가하여 애플리케이션에 모듈을로드하십시오.</target>
        </trans-unit>
        <trans-unit id="7d2b29d57502f260e757766c62c868a34c233461" translate="yes" xml:space="preserve">
          <source>Then the CSS animation code for the message container looks like so:</source>
          <target state="translated">그런 다음 메시지 컨테이너의 CSS 애니메이션 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4420f082e957bdeb70a28e331407c72ac0fa9f6e" translate="yes" xml:space="preserve">
          <source>Then you can create an injector and load your modules like this:</source>
          <target state="translated">그런 다음 인젝터를 작성하고 다음과 같이 모듈을로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b74684d8de56bfaa1c2e51da13b1734863d4fb9f" translate="yes" xml:space="preserve">
          <source>Then, configure your test runner to load &lt;code&gt;angular-mocks.js&lt;/code&gt; after &lt;code&gt;angular.js&lt;/code&gt;. This example uses &lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt;:</source>
          <target state="translated">그런 다음,로드 테스트 러너 구성 &lt;code&gt;angular-mocks.js&lt;/code&gt; 한 후 &lt;code&gt;angular.js&lt;/code&gt; 을 . 이 예는 &lt;a href=&quot;http://karma-runner.github.io/&quot;&gt;Karma&lt;/a&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d32bb96d5e92506ee0985b73373006273831ce51" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-animate.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-animate.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="be42b1b9ea22296aed835ed67fd0503f2d1c7ce1" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-aria.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-aria.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="ac37b863957206f52a67a02d8148afa2722ae351" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-cookies.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-cookies.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="ae69b27ed53748a28e2133d629a343fe3e5b36d0" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-message-format.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-message-format.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="33510a8d30ee13097925c8687d0b4a0dc5b54dd9" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-messages.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-messages.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="bb1a4ae9bcaf5171467ecc41d0db098c41b54bdb" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-mocks.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-mocks.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="b063c697f244bfb6f28cfccd98309c35fe2f0e16" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-parse-ext.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-parse-ext.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="14e0b01648408cdb8437a7490c7878d70c602c47" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-resource.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-resource.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="d20a74b3dd55a1d4eca8992c7a14fa2a1d9e3918" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-route.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-route.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="e735fd0e46663b7101645180fb23c07bb057a514" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-sanitize.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-sanitize.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="4104e34a174331405f4b0d2b7199cfaf3401d567" translate="yes" xml:space="preserve">
          <source>Then, include &lt;code&gt;angular-touch.js&lt;/code&gt; in your HTML:</source>
          <target state="translated">그런 다음 HTML에 &lt;code&gt;angular-touch.js&lt;/code&gt; 를 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="d12134494475237ef73f311dad22d23a4a004ddd" translate="yes" xml:space="preserve">
          <source>Then, the &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;run&lt;/a&gt; blocks that have been collected from each module are executed in order of requirement.</source>
          <target state="translated">그런 다음 각 모듈에서 수집 된 &lt;a href=&quot;../api/ng/type/angular.module#run.html&quot;&gt;실행&lt;/a&gt; 블록이 요구 사항 순서대로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2e850ec6b850797a6a79db638c878c1fdc64c72f" translate="yes" xml:space="preserve">
          <source>There also exists a special &lt;a href=&quot;http://code.google.com/web/ajaxcrawling/docs/specification.html&quot;&gt;AJAX crawling scheme&lt;/a&gt; developed by Google that allows bots to crawl the static equivalent of a dynamically generated page, but this schema has been deprecated, and support for it may vary by search engine.</source>
          <target state="translated">또한 Google에서 개발 한 특수 &lt;a href=&quot;http://code.google.com/web/ajaxcrawling/docs/specification.html&quot;&gt;AJAX 크롤링 구성표&lt;/a&gt; 가있어 봇이 동적으로 생성 된 페이지와 동일한 정적 크롤링을 크롤링 할 수 있지만이 스키마는 더 이상 사용되지 않으며이 기능에 대한 지원은 검색 엔진에 따라 다를 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="130d9b350defbba659ae904cdf720b49833cb081" translate="yes" xml:space="preserve">
          <source>There are a couple of things to note here. Just like the &lt;code&gt;module.controller&lt;/code&gt; API, the function argument in &lt;code&gt;module.directive&lt;/code&gt; is dependency injected. Because of this, we can use &lt;code&gt;$interval&lt;/code&gt; and &lt;code&gt;dateFilter&lt;/code&gt; inside our directive's &lt;code&gt;link&lt;/code&gt; function.</source>
          <target state="translated">여기에 몇 가지주의 할 사항이 있습니다. &lt;code&gt;module.controller&lt;/code&gt; API 와 마찬가지로 &lt;code&gt;module.directive&lt;/code&gt; 의 함수 인수 는 종속성 주입입니다. 이 때문에 지시자의 &lt;code&gt;link&lt;/code&gt; 함수 내에서 &lt;code&gt;$interval&lt;/code&gt; 및 &lt;code&gt;dateFilter&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="22aac06fcbba861d9deabbd7db65ea5290a0d817" translate="yes" xml:space="preserve">
          <source>There are a few examples that showcase how to use AngularJS filters with various locale rule sets in the &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/i18n/e2e&quot;&gt;&lt;code&gt;i18n/e2e&lt;/code&gt; directory&lt;/a&gt; of the AngularJS source code.</source>
          <target state="translated">AngularJS 소스 코드 의 &lt;a href=&quot;https://github.com/angular/angular.js/tree/master/i18n/e2e&quot;&gt; &lt;code&gt;i18n/e2e&lt;/code&gt; 디렉토리&lt;/a&gt; 에 다양한 로케일 규칙 세트와 함께 AngularJS 필터를 사용하는 방법을 보여주는 몇 가지 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1bfb8991ae5c4f9e31fb56a70d6baff7aba4e7f" translate="yes" xml:space="preserve">
          <source>There are a few special events that AngularJS emits. When a DOM node that has been compiled with AngularJS's compiler is destroyed, it emits a &lt;code&gt;$destroy&lt;/code&gt; event. Similarly, when an AngularJS scope is destroyed, it broadcasts a &lt;code&gt;$destroy&lt;/code&gt; event to listening scopes.</source>
          <target state="translated">AngularJS가 내보내는 몇 가지 특별한 이벤트가 있습니다. AngularJS의 컴파일러로 컴파일 된 DOM 노드가 소멸되면 &lt;code&gt;$destroy&lt;/code&gt; 이벤트가 발생합니다 . 마찬가지로 AngularJS 범위가 소멸되면 &lt;code&gt;$destroy&lt;/code&gt; 이벤트를 청취 범위로 브로드 캐스트합니다 .</target>
        </trans-unit>
        <trans-unit id="2f1db69945853c0d37d9a79a76c27844cddebc4a" translate="yes" xml:space="preserve">
          <source>There are a few things to keep in mind regardless of automatic or manual bootstrapping:</source>
          <target state="translated">자동 또는 수동 부트 스트랩과 관계없이 명심해야 할 사항이 몇 가지 있습니다.</target>
        </trans-unit>
        <trans-unit id="95101ca63f8d69f5d9cdd1c823a21dd5e29b3a87" translate="yes" xml:space="preserve">
          <source>There are a few things to keep in mind when using &lt;code&gt;ngApp&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ngApp&lt;/code&gt; 을 사용할 때 명심해야 할 것이 몇 가지 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eaf3ee4bd5875653a956ae013e1f9a754843ecf9" translate="yes" xml:space="preserve">
          <source>There are a few things you might consider when running your AngularJS application in production.</source>
          <target state="translated">프로덕션 환경에서 AngularJS 애플리케이션을 실행할 때 고려해야 할 사항이 몇 가지 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4c519b820846227a1173c2c2eabfe5a86e6afa6" translate="yes" xml:space="preserve">
          <source>There are a number of ways that templates and expressions can be controlled:</source>
          <target state="translated">템플릿과 표현식을 제어 할 수있는 방법에는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f12a2ba7d25176e96b87dc8a9715efae8e42b4f" translate="yes" xml:space="preserve">
          <source>There are exactly &lt;strong&gt;two wildcard sequences&lt;/strong&gt; - &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt;. All other characters match themselves.</source>
          <target state="translated">정확히이 있습니다 &lt;strong&gt;이 와일드 카드 시퀀스&lt;/strong&gt; - &lt;code&gt;*&lt;/code&gt; 와 &lt;code&gt;**&lt;/code&gt; 는 . 다른 모든 캐릭터는 서로 일치합니다.</target>
        </trans-unit>
        <trans-unit id="016247ec0111e77189147435add0171b2c62c098" translate="yes" xml:space="preserve">
          <source>There are five recipe types that define how to create objects: Value, Factory, Service, Provider and Constant.</source>
          <target state="translated">값을 생성하는 방법을 정의하는 5 가지 레시피 유형이 있습니다 : 값, 팩토리, 서비스, 제공자 및 상수.</target>
        </trans-unit>
        <trans-unit id="b990c7868d77b4c950319ea8bf70ed42696c2ff8" translate="yes" xml:space="preserve">
          <source>There are many different options for a directive.</source>
          <target state="translated">지시문에는 여러 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="44a999479cdafb004f6c8616bcc95ef2dfa72651" translate="yes" xml:space="preserve">
          <source>There are no CSS or JS context bindings in AngularJS currently, so their corresponding &lt;code&gt;$sce.trustAs&lt;/code&gt; functions aren't useful yet. This might evolve.</source>
          <target state="translated">현재 AngularJS에는 CSS 또는 JS 컨텍스트 바인딩이 없으므로 해당 &lt;code&gt;$sce.trustAs&lt;/code&gt; 함수는 아직 유용하지 않습니다. 이것은 진화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00f60ceec8589342669960dc8d147c35c7893ead" translate="yes" xml:space="preserve">
          <source>There are only three ways a component (object or function) can get a hold of its dependencies:</source>
          <target state="translated">컴포넌트 (객체 또는 함수)가 의존성을 유지할 수있는 방법은 세 가지뿐입니다.</target>
        </trans-unit>
        <trans-unit id="66f6fbd80fe8ea46a687b78aa0411b5df8473d11" translate="yes" xml:space="preserve">
          <source>There are several different ways to disable animations, both globally and for specific animations. Disabling specific animations can help to speed up the render performance, for example for large &lt;code&gt;ngRepeat&lt;/code&gt; lists that don't actually have animations. Because &lt;code&gt;ngAnimate&lt;/code&gt; checks at runtime if animations are present, performance will take a hit even if an element has no animation.</source>
          <target state="translated">전역 및 특정 애니메이션에 대해 애니메이션을 비활성화하는 방법에는 여러 가지가 있습니다. 특정 애니메이션을 비활성화하면 실제로 애니메이션이없는 큰 &lt;code&gt;ngRepeat&lt;/code&gt; 목록의 경우 렌더링 성능을 높일 수 있습니다 . &lt;code&gt;ngAnimate&lt;/code&gt; 는 애니메이션이 존재하는 경우 런타임에 확인 하기 때문에 요소에 애니메이션이없는 경우에도 성능이 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="5215767d4d7638b5c9fa856bf4e4ce676b7f648e" translate="yes" xml:space="preserve">
          <source>There are several way to mitigate this problem:</source>
          <target state="translated">이 문제를 완화하는 방법은 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6acde2bec5e72bfd06e3cfbf1f79236cbb60d66" translate="yes" xml:space="preserve">
          <source>There are three kinds of transclusion depending upon whether you want to transclude just the contents of the directive's element, the entire element or multiple parts of the element contents:</source>
          <target state="translated">지시문 요소의 내용 만, 전체 요소 또는 요소 내용의 여러 부분을 포함할지 여부에 따라 세 가지 유형의 변환이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2199989a69d3b490219217eaf3cfa4a17c693346" translate="yes" xml:space="preserve">
          <source>There are two &lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;plural categories&lt;/a&gt; in AngularJS's default en-US locale: &quot;one&quot; and &quot;other&quot;.</source>
          <target state="translated">AngularJS의 기본 en-US 로켈에는 &quot;하나&quot;와 &quot;다른&quot;이라는 두 가지 &lt;a href=&quot;http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html&quot;&gt;범주&lt;/a&gt; 가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9e4cfb93c504b3cf5f31483d3014aea04a7a10e9" translate="yes" xml:space="preserve">
          <source>There are two approaches to providing locale rules to AngularJS:</source>
          <target state="translated">AngularJS에 로케일 규칙을 제공하는 방법에는 두 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="69520fd35811ca565d4a03687080e48476082679" translate="yes" xml:space="preserve">
          <source>There are two exceptions to this rule:</source>
          <target state="translated">이 규칙에는 두 가지 예외가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a315166c5b92460227594ad824a5f7dffe1174e" translate="yes" xml:space="preserve">
          <source>There are two kinds of Router: &lt;a href=&quot;rootrouter&quot;&gt;&lt;code&gt;RootRouter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;childrouter&quot;&gt;&lt;code&gt;ChildRouter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">라우터에는 &lt;a href=&quot;rootrouter&quot;&gt; &lt;code&gt;RootRouter&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;childrouter&quot;&gt; &lt;code&gt;ChildRouter&lt;/code&gt; &lt;/a&gt; 의 두 가지 종류가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8457172152396945221a9bb7abc47bdb2fb360a4" translate="yes" xml:space="preserve">
          <source>There are two kinds of interceptors (and two kinds of rejection interceptors):</source>
          <target state="translated">두 종류의 인터셉터 (및 두 종류의 거부 인터셉터)가 있습니다.</target>
        </trans-unit>
        <trans-unit id="984ce92ebd9ffa671cbef47120514527e6ec5ced" translate="yes" xml:space="preserve">
          <source>There are two main differences:</source>
          <target state="translated">두 가지 주요 차이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="71aafbc13740296ddff7de52f6fd4b006802c2b8" translate="yes" xml:space="preserve">
          <source>There are two ways to register decorators</source>
          <target state="translated">데코레이터를 등록하는 두 가지 방법이 있습니다</target>
        </trans-unit>
        <trans-unit id="f29586d91e000a0120c5f20624018b52e64c8adc" translate="yes" xml:space="preserve">
          <source>There are two ways to specify what test data should be returned as http responses by the mock backend when the code under test makes http requests:</source>
          <target state="translated">테스트중인 코드가 http 요청을 할 때 모의 백엔드가 http 응답으로 리턴 할 테스트 데이터를 지정하는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="05eed5a5bae2275e702df7fc9bbddf5598e8921e" translate="yes" xml:space="preserve">
          <source>There are various places that the browser can store (or cache) data. Within AngularJS there are objects created by the &lt;a href=&quot;../api/ng/service/%24cachefactory&quot;&gt;&lt;code&gt;$cacheFactory&lt;/code&gt;&lt;/a&gt;. These objects, such as &lt;a href=&quot;../api/ng/service/%24templatecache&quot;&gt;&lt;code&gt;$templateCache&lt;/code&gt;&lt;/a&gt; are used to store and retrieve data, primarily used by &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../api/ng/directive/script&quot;&gt;&lt;code&gt;script&lt;/code&gt;&lt;/a&gt; directive to cache templates and other data.</source>
          <target state="translated">브라우저가 데이터를 저장 (또는 캐시) 할 수있는 다양한 위치가 있습니다. AngularJS에는 &lt;a href=&quot;../api/ng/service/%24cachefactory&quot;&gt; &lt;code&gt;$cacheFactory&lt;/code&gt; &lt;/a&gt; 의해 생성 된 객체가 있습니다 . &lt;a href=&quot;../api/ng/service/%24templatecache&quot;&gt; &lt;code&gt;$templateCache&lt;/code&gt; &lt;/a&gt; 와 같은 이러한 개체 는 데이터를 저장하고 검색하는 데 사용되며 주로 &lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;../api/ng/directive/script&quot;&gt; &lt;code&gt;script&lt;/code&gt; &lt;/a&gt; 지시문에서 템플릿 및 기타 데이터를 캐시 하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="c8876989e9de229aee2aea75b9ae2ca7d7de6211" translate="yes" xml:space="preserve">
          <source>There are very few scenarios where element replacement is required for the application function, the main one being reusable custom components that are used within SVG contexts (because SVG doesn't work with custom elements in the DOM tree).</source>
          <target state="translated">SVG가 컨텍스트에서 사용되는 재사용 가능한 사용자 정의 컴포넌트 인 SVG는 DOM 트리의 사용자 정의 요소와 작동하지 않기 때문에 애플리케이션 기능에 요소 교체가 필요한 시나리오는 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="4e6b2724368909d72a2a983621849f26c6af516a" translate="yes" xml:space="preserve">
          <source>There is a special &lt;code&gt;replace&lt;/code&gt; method which can be used to tell the $location service that the next time the $location service is synced with the browser, the last history record should be replaced instead of creating a new one. This is useful when you want to implement redirection, which would otherwise break the back button (navigating back would retrigger the redirection). To change the current URL without creating a new browser history record you can call:</source>
          <target state="translated">$ location 서비스에 다음 번 $ location 서비스가 브라우저와 동기화 될 때 새 기록을 생성하는 대신 마지막 기록 레코드를 교체해야한다는 것을 알려주 는 특별한 &lt;code&gt;replace&lt;/code&gt; 방법이 있습니다. 이는 리디렉션을 구현하려는 경우에 유용합니다. 그렇지 않으면 뒤로 버튼이 손상됩니다 (뒤로 이동하면 리디렉션이 다시 트리거 됨). 새 브라우저 기록 레코드를 작성하지 않고 현재 URL을 변경하려면 다음을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="ad79f1d43f88c0ade864387a26e37d58a6049c9d" translate="yes" xml:space="preserve">
          <source>There is also a button that calls &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;$setViewValue&lt;/a&gt; directly with a &quot;custom&quot; event. Since &quot;custom&quot; is not defined in the &lt;code&gt;updateOn&lt;/code&gt; list, it is considered a &quot;default&quot; event and will update the control if &quot;default&quot; is defined in &lt;code&gt;updateOn&lt;/code&gt;, and will receive the &quot;default&quot; debounce value. Note that this is just to illustrate how custom controls would possibly call &lt;code&gt;$setViewValue&lt;/code&gt;.</source>
          <target state="translated">&quot;custom&quot;이벤트와 함께 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24setViewValue.html&quot;&gt;$ setViewValue를&lt;/a&gt; 직접 호출하는 버튼도 있습니다 . &quot;custom&quot;은 &lt;code&gt;updateOn&lt;/code&gt; 목록에 정의되어 있지 않으므로 &quot;default&quot;이벤트로 간주되며 &lt;code&gt;updateOn&lt;/code&gt; 에 &quot;default&quot;가 정의되어 있으면 컨트롤을 업데이트 하고 &quot;default&quot;디 바운스 값을받습니다. 이것은 사용자 지정 컨트롤이 &lt;code&gt;$setViewValue&lt;/code&gt; 호출하는 방법을 보여주기위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="36ecab9037408b71383cabd20abb76e35492f942" translate="yes" xml:space="preserve">
          <source>There is no guarantee that it works for every directive, because interpolation itself is a directive. If another directive accesses attribute data before interpolation has run, it will get the raw interpolation markup and not data.</source>
          <target state="translated">보간 자체가 지시문이므로 모든 지시문에 대해 작동한다고 보장 할 수 없습니다. 보간이 실행되기 전에 다른 지시문이 속성 데이터에 액세스하면 데이터가 아닌 원시 보간 마크 업이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4803d73431676005c82886122ad66c28a6c074d3" translate="yes" xml:space="preserve">
          <source>There is one exception: Links that only contain a hash fragment (e.g. &lt;code&gt;&amp;lt;a href=&quot;#target&quot;&amp;gt;&lt;/code&gt;) will only change &lt;code&gt;$location.hash()&lt;/code&gt; and not modify the url otherwise. This is useful for scrolling to anchors on the same page without needing to know on which page the user currently is.</source>
          <target state="translated">한 가지 예외가 있습니다. 해시 조각 만 포함 된 링크 (예 : &lt;code&gt;&amp;lt;a href=&quot;#target&quot;&amp;gt;&lt;/code&gt; )는 &lt;code&gt;$location.hash()&lt;/code&gt; 만 변경 하고 그렇지 않으면 URL을 수정하지 않습니다. 사용자가 현재 어느 페이지인지 알 필요없이 동일한 페이지에서 앵커로 스크롤 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2027737bb7068a96f000d4d33b193fa46fdcc492" translate="yes" xml:space="preserve">
          <source>There is only one instance of this type in a Component Router application injectable as the &lt;a href=&quot;../service/%24rootrouter&quot;&gt;&lt;code&gt;$rootRouter&lt;/code&gt;&lt;/a&gt; service. This &lt;strong&gt;Router&lt;/strong&gt; is associate with the &lt;strong&gt;Top Level Component&lt;/strong&gt; (&lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt;&lt;code&gt;$routerRootComponent&lt;/code&gt;&lt;/a&gt;). It acts as the connection between the &lt;strong&gt;Routers&lt;/strong&gt; and the &lt;strong&gt;Location&lt;/strong&gt;.</source>
          <target state="translated">&lt;a href=&quot;../service/%24rootrouter&quot;&gt; &lt;code&gt;$rootRouter&lt;/code&gt; &lt;/a&gt; 서비스 로 주입 가능한 컴포넌트 라우터 애플리케이션에는이 유형의 인스턴스가 하나만 있습니다 . 이 &lt;strong&gt;라우터&lt;/strong&gt; 는 &lt;strong&gt;최상위 구성 요소&lt;/strong&gt; ( &lt;a href=&quot;../service/%24routerrootcomponent&quot;&gt; &lt;code&gt;$routerRootComponent&lt;/code&gt; &lt;/a&gt; ) 와 연관됩니다 . &lt;strong&gt;라우터&lt;/strong&gt; 와 &lt;strong&gt;위치&lt;/strong&gt; 간의 연결 역할을합니다 .</target>
        </trans-unit>
        <trans-unit id="72de6f193fb85300105ca6265046e6df92fea694" translate="yes" xml:space="preserve">
          <source>There was an error loading this resource. Please try again later.</source>
          <target state="translated">이 리소스를로드하는 중에 오류가 발생했습니다. 나중에 다시 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="3eda2078fc3d76325ba60baef00e4fc07ad7239d" translate="yes" xml:space="preserve">
          <source>Therefore the above can be simplified as:</source>
          <target state="translated">따라서 위와 같이 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02108554d592d8fbabf9029cd9d2d981395f0bae" translate="yes" xml:space="preserve">
          <source>Therefore the final directive definition looks something like this:</source>
          <target state="translated">따라서 최종 지시문 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd132ceaead68d5aa4334853896ecc475000f044" translate="yes" xml:space="preserve">
          <source>Therefore, animations can be applied to an element using this temporary class directly via CSS.</source>
          <target state="translated">따라서이 임시 클래스를 사용하여 CSS를 통해 직접 애니메이션을 요소에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e76f4192528514d19abc24671684646a83898011" translate="yes" xml:space="preserve">
          <source>Therefore, the CSS code for the inner messages looks like so:</source>
          <target state="translated">따라서 내부 메시지의 CSS 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="258dce51948dfa8d6b97e686c254e38bdd7527fc" translate="yes" xml:space="preserve">
          <source>These are the types of AngularJS elements and attributes you can use:</source>
          <target state="translated">다음은 사용 가능한 AngularJS 요소 및 속성 유형입니다.</target>
        </trans-unit>
        <trans-unit id="b4f66b8b15edc1f5323a3f2fe41e4c47e2e5caa0" translate="yes" xml:space="preserve">
          <source>These directives take an expression inside the attribute, and set the corresponding boolean attribute to true when the expression evaluates to truthy.</source>
          <target state="translated">이러한 지시문은 속성 내부에서 표현식을 가져 와서 표현식이 진실로 평가 될 때 해당 부울 속성을 true로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0914ebf2d4a4b0b0e72a29f4b227f8a9a21e62e7" translate="yes" xml:space="preserve">
          <source>These restrictions can all be combined as needed:</source>
          <target state="translated">이러한 제한은 모두 필요에 따라 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1cc4346d96d189e151b816986a2f69e722fafcd" translate="yes" xml:space="preserve">
          <source>These service factories are ordered by request, i.e. they are applied in the same order as the array, on request, but reverse order, on response.</source>
          <target state="translated">이러한 서비스 팩토리는 요청에 따라 주문됩니다. 즉, 요청시 어레이와 동일한 순서로 적용되지만 응답시 역순으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="86ea12079184e49e6888fb5f8e9bf4a333312277" translate="yes" xml:space="preserve">
          <source>They can be used in view templates, controllers or services. AngularJS comes with a collection of &lt;a href=&quot;../filter&quot;&gt;built-in filters&lt;/a&gt;, but it is easy to define your own as well.</source>
          <target state="translated">뷰 템플릿, 컨트롤러 또는 서비스에서 사용할 수 있습니다. AngularJS에는 &lt;a href=&quot;../filter&quot;&gt;내장 필터&lt;/a&gt; 모음이 포함되어 있지만 자신 만의 필터를 쉽게 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4824221375d3ce9b6f04cd13e1f0c90e7b5aac9d" translate="yes" xml:space="preserve">
          <source>Things to keep in mind</source>
          <target state="translated">명심해야 할 것</target>
        </trans-unit>
        <trans-unit id="ab45627ffd28ba0b37493f184de9a27c3fad2e12" translate="yes" xml:space="preserve">
          <source>Things to notice in the example above:</source>
          <target state="translated">위의 예에서 유의할 사항 :</target>
        </trans-unit>
        <trans-unit id="4d9616f497178549a1ceba85134b191dff85dc0a" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;../api/ng/type/angular.module#decorator.html&quot;&gt;function&lt;/a&gt; is the same as the &lt;code&gt;$provide.decorator&lt;/code&gt; function except it is exposed through the module API. This allows you to separate your decorator patterns from your module config blocks.</source>
          <target state="translated">이 &lt;a href=&quot;../api/ng/type/angular.module#decorator.html&quot;&gt;함수&lt;/a&gt; 는 모듈 API를 통해 노출된다는 점을 제외하고 &lt;code&gt;$provide.decorator&lt;/code&gt; 함수와 동일합니다. 이를 통해 데코레이터 패턴을 모듈 구성 블록에서 분리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="d2df585301cdbd155523396bd3c907ba55115f87" translate="yes" xml:space="preserve">
          <source>This allows to easily create arbitrarily complex rules for filtering animations, such as allowing specific events only, or enabling animations on specific subtrees of the DOM, etc. Filtering animations can also boost performance for low-powered devices, as well as applications containing a lot of structural operations.</source>
          <target state="translated">이를 통해 특정 이벤트 만 허용하거나 DOM의 특정 하위 트리에서 애니메이션을 활성화하는 등 애니메이션 필터링에 대한 임의의 복잡한 규칙을 쉽게 만들 수 있습니다. 애니메이션 필터링은 저전력 장치 및 로트가 많은 응용 프로그램의 성능을 향상시킬 수도 있습니다 구조 작업.</target>
        </trans-unit>
        <trans-unit id="62506bcdde04f9729f5e76db6021ecd55a120d85" translate="yes" xml:space="preserve">
          <source>This allows us to extend the above example with these features:</source>
          <target state="translated">이를 통해 위의 예제를 다음 기능으로 확장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b868a8a849cb543857bdf88802803ebaca814e1" translate="yes" xml:space="preserve">
          <source>This also applies to the &lt;code&gt;when&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt; shortcut methods.</source>
          <target state="translated">이는 &lt;code&gt;when&lt;/code&gt; 및 &lt;code&gt;expect&lt;/code&gt; 바로 가기 방법 에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="0e5d6967a2a93dd0eac33db309a1c3df407c1b33" translate="yes" xml:space="preserve">
          <source>This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation, applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with &lt;code&gt;$animateCss&lt;/code&gt;. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order to provide a working animation that will run in CSS.</source>
          <target state="translated">이는 클래스 추가, 클래스 제거, 스타일 설정, 동적으로 키 프레임 애니메이션 설정, 하드 코딩 된 지속 시간 또는 지연 값 적용, 애니메이션 변경 또는 스 태거 애니메이션 적용의 모든 조합이 &lt;code&gt;$animateCss&lt;/code&gt; 와 함께 작동하는 모든 옵션을 의미합니다 . 이 서비스 자체는 옵션 조합을 파악하고 CSS에서 실행될 작동 애니메이션을 제공하기 위해 요소 스타일 속성을 검사 할 수있을 정도로 똑똑합니다.</target>
        </trans-unit>
        <trans-unit id="9b79236b9af035a359b621e03d1e7e1f5da1644b" translate="yes" xml:space="preserve">
          <source>This applies both to the &lt;a href=&quot;../directive/nginclude&quot;&gt;&lt;code&gt;ng-include&lt;/code&gt;&lt;/a&gt; directive as well as &lt;code&gt;templateUrl&lt;/code&gt;'s specified by &lt;a href=&quot;../../../guide/directive&quot;&gt;directives&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;../directive/nginclude&quot;&gt; &lt;code&gt;ng-include&lt;/code&gt; &lt;/a&gt; 지시문과 &lt;a href=&quot;../../../guide/directive&quot;&gt;지시문에&lt;/a&gt; 지정된 &lt;code&gt;templateUrl&lt;/code&gt; 모두에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="58dd13a809bb64e55c8c52e976d75660f7dabd26" translate="yes" xml:space="preserve">
          <source>This behavior makes sense for a directive that wraps some content, because otherwise you'd have to pass in each model you wanted to use separately. If you have to pass in each model that you want to use, then you can't really have arbitrary contents, can you?</source>
          <target state="translated">이 동작은 일부 내용을 래핑하는 지시문에 적합합니다. 그렇지 않으면 별도로 사용하려는 각 모델을 전달해야하기 때문입니다. 사용하려는 각 모델을 전달 해야하는 경우 실제로 임의의 내용을 가질 수는 없습니까?</target>
        </trans-unit>
        <trans-unit id="1a337bc5cc0b991a707d4b759d185330407dbe1c" translate="yes" xml:space="preserve">
          <source>This can be set explicitly by calling $sce.trustAs(type, value) on the value that is trusted before passing it to the &lt;code&gt;ng-prop-*&lt;/code&gt; directive. There are exist shorthand methods for each context type in the form of &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;$sce.trustAsResourceUrl()&lt;/a&gt; et al.</source>
          <target state="translated">&lt;code&gt;ng-prop-*&lt;/code&gt; 지시문에 전달하기 전에 신뢰할 수있는 값에서 $ sce.trustAs (type, value)를 호출하여 명시 적으로 설정할 수 있습니다 . &lt;a href=&quot;../service/%24sce#trustAsResourceUrl.html&quot;&gt;$ sce.trustAsResourceUrl ()&lt;/a&gt; 등 의 형식으로 각 컨텍스트 유형에 대한 속기 방법이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a642393bdc5a3f60fc505ec099d289ef977421cd" translate="yes" xml:space="preserve">
          <source>This can be used to optimize your application when you know that running those watchers is redundant.</source>
          <target state="translated">이는 감시자를 실행하는 것이 중복됨을 알고있을 때 응용 프로그램을 최적화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5484a478821be02a7e449725201e87872e9c0d6b" translate="yes" xml:space="preserve">
          <source>This can be used to queue up multiple expressions which need to be evaluated in the same digest.</source>
          <target state="translated">동일한 다이제스트에서 평가해야하는 여러 식을 대기열에 넣는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eafa978f765a5d0f54a51aca4a5c7f591b5982c5" translate="yes" xml:space="preserve">
          <source>This can cause unpredictable behavior, e.g. &lt;code&gt;ngClick&lt;/code&gt; or other event handlers will be attached again. It can also degrade performance, as watchers for text interpolation are added twice to the scope.</source>
          <target state="translated">&lt;code&gt;ngClick&lt;/code&gt; 또는 다른 이벤트 처리기가 다시 연결되는 등 예기치 않은 동작이 발생할 수 있습니다 . 텍스트 보간 감시자가 범위에 두 번 추가되므로 성능이 저하 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="31737a8a0cfe19e93889da90104baa99509af66f" translate="yes" xml:space="preserve">
          <source>This change can be prevented by calling &lt;code&gt;preventDefault&lt;/code&gt; method of the event. See &lt;a href=&quot;../type/%24rootscope.scope#%24on.html&quot;&gt;&lt;code&gt;$rootScope.Scope&lt;/code&gt;&lt;/a&gt; for more details about event object. Upon successful change &lt;a href=&quot;%24location#%24locationChangeSuccess.html&quot;&gt;$locationChangeSuccess&lt;/a&gt; is fired.</source>
          <target state="translated">이 변경은 &lt;code&gt;preventDefault&lt;/code&gt; 메소드를 호출하여 방지 할 수 있습니다 . 참조 &lt;a href=&quot;../type/%24rootscope.scope#%24on.html&quot;&gt; &lt;code&gt;$rootScope.Scope&lt;/code&gt; &lt;/a&gt; 이벤트 객체에 대한 자세한 내용은. 변경에 성공하면 &lt;a href=&quot;%24location#%24locationChangeSuccess.html&quot;&gt;$ locationChangeSuccess&lt;/a&gt; 가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="deaca4d4f1715e3cb81009a0b59af1557a02ca34" translate="yes" xml:space="preserve">
          <source>This continues until all module dependencies has been resolved.</source>
          <target state="translated">이것은 모든 모듈 종속성이 해결 될 때까지 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="0fdd710f9dc596720a9478bac918072a2e288c46" translate="yes" xml:space="preserve">
          <source>This directive allows you to modify the behaviour of &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives within your application. You can specify an &lt;code&gt;ngModelOptions&lt;/code&gt; directive on any element. All &lt;a href=&quot;directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives will use the options of their nearest &lt;code&gt;ngModelOptions&lt;/code&gt; ancestor.</source>
          <target state="translated">이 지시문을 사용하면 응용 프로그램 내에서 &lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 지시문 의 동작을 수정할 수 있습니다 . 모든 요소에 &lt;code&gt;ngModelOptions&lt;/code&gt; 지시문을 지정할 수 있습니다 . 모든 &lt;a href=&quot;directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 지시문은 가장 가까운 &lt;code&gt;ngModelOptions&lt;/code&gt; 조상 의 옵션을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="ac964e329bac06459a562f99c7acc0f4d9f8bc69" translate="yes" xml:space="preserve">
          <source>This directive allows you to modify the behaviour of &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives within your application. You can specify an &lt;code&gt;ngModelOptions&lt;/code&gt; directive on any element. All &lt;a href=&quot;ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; directives will use the options of their nearest &lt;code&gt;ngModelOptions&lt;/code&gt; ancestor.</source>
          <target state="translated">이 지시문을 사용하면 응용 프로그램 내에서 &lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 지시문 의 동작을 수정할 수 있습니다 . 모든 요소에 &lt;code&gt;ngModelOptions&lt;/code&gt; 지시문을 지정할 수 있습니다 . 모든 &lt;a href=&quot;ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 지시문은 가장 가까운 &lt;code&gt;ngModelOptions&lt;/code&gt; 조상 의 옵션을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="7965d373726e20c973548077757bfccc70ce0246" translate="yes" xml:space="preserve">
          <source>This directive can be abused to add unnecessary amounts of logic into your templates. There are only a few appropriate uses of &lt;code&gt;ngInit&lt;/code&gt;:</source>
          <target state="translated">이 지시문은 템플릿에 불필요한 양의 논리를 추가하기 위해 남용 될 수 있습니다. &lt;code&gt;ngInit&lt;/code&gt; 의 적절한 사용법은 몇 가지 뿐입니다 .</target>
        </trans-unit>
        <trans-unit id="cbcba47b501b44e1b242996ce2f2fcb658bdde02" translate="yes" xml:space="preserve">
          <source>This directive can be applied only within the scope of an &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat&lt;/a&gt;.</source>
          <target state="translated">이 지시문은 &lt;a href=&quot;ngrepeat&quot;&gt;ngRepeat&lt;/a&gt; 범위 내에서만 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eed1d5dab4e2a48debbd34ee6dd14a061b9c554b" translate="yes" xml:space="preserve">
          <source>This directive can be used as &lt;a href=&quot;../service/%24compile#-multielement-.html&quot;&gt;multiElement&lt;/a&gt;</source>
          <target state="translated">이 지시어는 &lt;a href=&quot;../service/%24compile#-multielement-.html&quot;&gt;multiElement&lt;/a&gt; 로 사용될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="408d771ebedb5301b2e1e5d11014f21ad0ac991f" translate="yes" xml:space="preserve">
          <source>This directive creates new scope.</source>
          <target state="translated">이 지시문은 새로운 범위를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="b9eb9dfc0b36b5fb31bc5f06b2291cbce4731e8e" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level -400.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 -400에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="11bb46f7885f2d0fb62afc45043a006f99b5c779" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 0.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 0에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ba1fba935acedd5a393ae9e732b4ecad2e9ba52a" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 1.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 1에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="57fa09288f6c223f6b042c6fed89bc149865df0e" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 10.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 10에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="20282e77f198233dc571257734f9c2d2da4f5aef" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 100.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 100에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="83a14caae6f6310a1c64fde8d891125d5595d161" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 1000.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 1000에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9042e7730b88dc8812901abaa43a978bb9618917" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 1200.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 1200에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1b9ad97e1cbe1b2045ab90cbbde8cfbd6f81734f" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 400 restrict: AE.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 400 제한에서 실행됩니다. AE.</target>
        </trans-unit>
        <trans-unit id="35ed58116dc2b01b349cc12677bcd3280b0cd2dd" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 400.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 400에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="b6c8d120968e554de79c9923d45c2f7f16a1758c" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 450.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 450에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1aa13b7c0c442d44e8f33979384eb48bd2e2e8df" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 500.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 500에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7df93f519af67379f099a16f4ead3293cda924b8" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 600.</source>
          <target state="translated">이 지시문은 우선 순위 수준 600에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="d60b4c0c247cba5c4a5f6b245e42416ae3e44c71" translate="yes" xml:space="preserve">
          <source>This directive executes at priority level 99.</source>
          <target state="translated">이 지시문은 우선 순위 레벨 99에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="749a139249322e3a0fa2d9fc94fa82bcb541e03b" translate="yes" xml:space="preserve">
          <source>This directive is used as a tag &lt;code&gt;&amp;lt;a-great-eye&amp;gt;&amp;lt;/a-great-eye&amp;gt;&lt;/code&gt;. It replaces the entire tag with the template &lt;code&gt;&amp;lt;h1&amp;gt;lidless, wreathed in flame, {{1 + 1}} times&amp;lt;/h1&amp;gt;&lt;/code&gt;. Now we are going to write a jasmine unit test to verify this functionality. Note that the expression &lt;code&gt;{{1 + 1}}&lt;/code&gt; times will also be evaluated in the rendered content.</source>
          <target state="translated">이 지시어는 &lt;code&gt;&amp;lt;a-great-eye&amp;gt;&amp;lt;/a-great-eye&amp;gt;&lt;/code&gt; 태그로 사용됩니다 . 전체 태그를 &lt;code&gt;&amp;lt;h1&amp;gt;lidless, wreathed in flame, {{1 + 1}} times&amp;lt;/h1&amp;gt;&lt;/code&gt; 템플릿으로 바꿉니다 . 이제이 기능을 확인하기 위해 자스민 단위 테스트를 작성할 것입니다. 렌더링 된 컨텐츠에서 &lt;code&gt;{{1 + 1}}&lt;/code&gt; 시간 표현 도 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="0988891d1e4c9bf100a94a539e74ab83063f9e67" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;code&gt;disabled&lt;/code&gt; attribute on the element (typically a form control, e.g. &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; etc.) if the &lt;a href=&quot;../../../guide/expression&quot;&gt;expression&lt;/a&gt; inside &lt;code&gt;ngDisabled&lt;/code&gt; evaluates to truthy.</source>
          <target state="translated">이 지시문은 &lt;code&gt;ngDisabled&lt;/code&gt; 내부 의 &lt;a href=&quot;../../../guide/expression&quot;&gt;표현식&lt;/a&gt; 이 진실로 평가되는 경우 요소 의 &lt;code&gt;disabled&lt;/code&gt; 속성 (일반적으로 양식 컨트롤, 예를 들어 &lt;code&gt;input&lt;/code&gt; , &lt;code&gt;button&lt;/code&gt; , &lt;code&gt;select&lt;/code&gt; 등)을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="c070fd68811002fede70f580a5780cdfa9a578c2" translate="yes" xml:space="preserve">
          <source>This directive sets the &lt;code&gt;disabled&lt;/code&gt; attribute on the element (typically a form control, e.g. &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;button&lt;/code&gt;, &lt;code&gt;select&lt;/code&gt; etc.) if the &lt;a href=&quot;../../guide/expression&quot;&gt;expression&lt;/a&gt; inside &lt;code&gt;ngDisabled&lt;/code&gt; evaluates to truthy.</source>
          <target state="translated">이 지시문은 &lt;code&gt;ngDisabled&lt;/code&gt; 내부 의 &lt;a href=&quot;../../guide/expression&quot;&gt;표현식&lt;/a&gt; 이 진실로 평가되는 경우 요소 의 &lt;code&gt;disabled&lt;/code&gt; 속성 (일반적으로 양식 컨트롤, 예를 들어 &lt;code&gt;input&lt;/code&gt; , &lt;code&gt;button&lt;/code&gt; , &lt;code&gt;select&lt;/code&gt; 등)을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="a6e956b460cca90e672670086cda8aabd21f1997" translate="yes" xml:space="preserve">
          <source>This document explains some of AngularJS's security features and best practices that you should keep in mind as you build your application.</source>
          <target state="translated">이 문서는 애플리케이션을 빌드 할 때 명심해야 할 AngularJS의 보안 기능과 모범 사례를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="637bbb3be2c198a8a65ee2584634b52d3430c20e" translate="yes" xml:space="preserve">
          <source>This document explains when you'd want to create your own directives in your AngularJS app, and how to implement them.</source>
          <target state="translated">이 문서는 AngularJS 앱에서 자신의 지시문을 만들고 싶을 때와 그 구현 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="0d8406e6cc1ce626d3c2ac65aec7b3e141628b7c" translate="yes" xml:space="preserve">
          <source>This does not only affect changes to the model value, but also to the values of the &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;max&lt;/code&gt;, and &lt;code&gt;step&lt;/code&gt; attributes. When these change in a way that will cause the browser to modify the input value, AngularJS will also update the model value.</source>
          <target state="translated">This does not only affect changes to the model value, but also to the values of the &lt;code&gt;min&lt;/code&gt; , &lt;code&gt;max&lt;/code&gt; , and &lt;code&gt;step&lt;/code&gt; attributes. When these change in a way that will cause the browser to modify the input value, AngularJS will also update the model value.</target>
        </trans-unit>
        <trans-unit id="ba8f1e4ba7e8dbd333bd05bd1a50c7b95a9e90fd" translate="yes" xml:space="preserve">
          <source>This enables web-servers to prevent script injection attacks and defacing attacks, to some degree, while also enabling code examples to work without relying on the &lt;a href=&quot;../directive/ngnonbindable&quot;&gt;ngNonBindable&lt;/a&gt; directive.</source>
          <target state="translated">이를 통해 웹 서버는 스크립트 삽입 공격 및 공격의 공격을 어느 정도 방지 할 수 있으며 &lt;a href=&quot;../directive/ngnonbindable&quot;&gt;ngNonBindable&lt;/a&gt; 지시문 에 의존하지 않고 코드 예제가 작동 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="076b9997e5dd41c8b9220b76be3ac831b79b0b74" translate="yes" xml:space="preserve">
          <source>This error is harmless but annoying. To prevent the error from showing up, put the &lt;code&gt;ngCsp&lt;/code&gt; directive on an element of the HTML document that appears before the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that loads the &lt;code&gt;angular.js&lt;/code&gt; file.</source>
          <target state="translated">이 오류는 무해하지만 성가시다. 오류가 표시되지 않도록하려면 &lt;code&gt;angular.js&lt;/code&gt; 파일 을로드하는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 앞에 나타나는 HTML 문서의 요소에 &lt;code&gt;ngCsp&lt;/code&gt; 지시문을 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="0f6664d3c705a07b165dfd285730cd6fb277477c" translate="yes" xml:space="preserve">
          <source>This example demonstrates basic transclusion of content into a component directive.</source>
          <target state="translated">이 예제는 컨텐츠를 컴포넌트 지시문으로 기본적으로 변환하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1f9ed6e6472967fa32c46a4975e28dfb3de3211f" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &quot;attach to &lt;code&gt;$scope&lt;/code&gt;&quot; style of controller.</source>
          <target state="translated">이 예제는 &quot;attach to &lt;code&gt;$scope&lt;/code&gt; &quot;스타일의 컨트롤러 를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="28190992499c1193b7ef8ed135006e6081be0f60" translate="yes" xml:space="preserve">
          <source>This example demonstrates the &lt;code&gt;controller as&lt;/code&gt; syntax.</source>
          <target state="translated">이 예제는 &lt;code&gt;controller as&lt;/code&gt; 구문으로 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="62ca703b8851a5d6363ffcdd5aa7392a42b74357" translate="yes" xml:space="preserve">
          <source>This example demonstrates using multi-slot transclusion in a component directive.</source>
          <target state="translated">이 예제는 구성 요소 지시문에서 다중 슬롯 변환을 사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="54d4f92cb5daaa1c9a5ccf8ff554cfa4e0608d51" translate="yes" xml:space="preserve">
          <source>This example illustrates scopes in application, and prototypical inheritance of properties. The example is followed by a diagram depicting the scope boundaries.</source>
          <target state="translated">이 예제는 응용 프로그램의 범위와 속성의 프로토 타입 상속을 보여줍니다. 예제 다음에는 범위 경계를 나타내는 다이어그램이 이어집니다.</target>
        </trans-unit>
        <trans-unit id="964cf011bd5b116e12f4ea04fcf7924afb7cb764" translate="yes" xml:space="preserve">
          <source>This example sets a custom error &quot;unknownValue&quot; on the ngModelController when the select element's unknown option is selected, i.e. when the model is set to a value that is not matched by any option.</source>
          <target state="translated">이 예제는 select 요소의 알 수없는 옵션이 선택된 경우, 즉 모델이 옵션과 일치하지 않는 값으로 설정된 경우 ngModelController에서 사용자 정의 오류 &quot;unknownValue&quot;를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2d1c53bde144ac2b71271ea09e4914b32aa2f17e" translate="yes" xml:space="preserve">
          <source>This example show how you might use &lt;code&gt;$doCheck&lt;/code&gt; to trigger changes in your component's inputs even if the actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large arrays or objects can have a negative impact on your application performance)</source>
          <target state="translated">이 예제는 컴포넌트의 실제 ID가 변경되지 않더라도 &lt;code&gt;$doCheck&lt;/code&gt; 를 사용 하여 컴포넌트의 입력에서 변경 사항을 트리거 하는 방법을 보여줍니다 . (대형 배열 또는 객체에 대한 복제 및 동일 평등 검사는 응용 프로그램 성능에 부정적인 영향을 줄 수 있습니다)</target>
        </trans-unit>
        <trans-unit id="3081f65dd44283b2d2d12cb3d280958835d3f6df" translate="yes" xml:space="preserve">
          <source>This example show how you might use &lt;code&gt;$doCheck&lt;/code&gt; to trigger changes in your component's inputs even if the actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large arrays or objects can have a negative impact on your application performance.)</source>
          <target state="translated">This example show how you might use &lt;code&gt;$doCheck&lt;/code&gt; to trigger changes in your component's inputs even if the actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large arrays or objects can have a negative impact on your application performance.)</target>
        </trans-unit>
        <trans-unit id="5ae8a0234d80385adab6edf6c69b9755596e3742" translate="yes" xml:space="preserve">
          <source>This example shows how &lt;code&gt;ngRef&lt;/code&gt; works with child scopes. The &lt;code&gt;ngRepeat&lt;/code&gt;-ed &lt;code&gt;myWrapper&lt;/code&gt; components are assigned to the scope of &lt;code&gt;myRoot&lt;/code&gt;, because the &lt;code&gt;toggles&lt;/code&gt; property has been initialized. The repeated &lt;code&gt;myToggle&lt;/code&gt; components are published to the child scopes created by &lt;code&gt;ngRepeat&lt;/code&gt;. &lt;code&gt;ngIf&lt;/code&gt; behaves similarly - the assignment of &lt;code&gt;myToggle&lt;/code&gt; happens in the &lt;code&gt;ngIf&lt;/code&gt; child scope, because the target property has not been initialized on the &lt;code&gt;myRoot&lt;/code&gt; component controller.</source>
          <target state="translated">이 예제는 &lt;code&gt;ngRef&lt;/code&gt; 가 하위 범위와 작동 하는 방식을 보여줍니다 . &lt;code&gt;ngRepeat&lt;/code&gt; 는 -ed &lt;code&gt;myWrapper&lt;/code&gt; 구성 요소의 영역에 할당 &lt;code&gt;myRoot&lt;/code&gt; 때문에, &lt;code&gt;toggles&lt;/code&gt; 재산권 초기화되었다. 반복되는 &lt;code&gt;myToggle&lt;/code&gt; 구성 요소는 &lt;code&gt;ngRepeat&lt;/code&gt; 에 의해 작성된 하위 범위에 공개 됩니다. &lt;code&gt;ngIf&lt;/code&gt; 가 유사하게 동작- 대상 속성이 &lt;code&gt;myRoot&lt;/code&gt; 구성 요소 컨트롤러 에서 초기화되지 않았기 때문에 &lt;code&gt;myToggle&lt;/code&gt; 이 &lt;code&gt;ngIf&lt;/code&gt; 자식 범위 에서 할당 됩니다.</target>
        </trans-unit>
        <trans-unit id="ee14ef2d78087f730132d6249684daaf02439508" translate="yes" xml:space="preserve">
          <source>This example shows how changing the URL hash causes the &lt;code&gt;$route&lt;/code&gt; to match a route against the URL, and the &lt;code&gt;ngView&lt;/code&gt; pulls in the partial.</source>
          <target state="translated">이 예제는 URL 해시를 변경하여 &lt;code&gt;$route&lt;/code&gt; 가 URL과 경로 를 일치시키고 &lt;code&gt;ngView&lt;/code&gt; 가 부분을 가져 오는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9f4785f3aeb8fb8df8ff217d8f7532f2381938df" translate="yes" xml:space="preserve">
          <source>This example shows how the &quot;plural&quot; keyword is used to account for a variable number of entities. The &quot;#&quot; variable holds the current number and can be embedded in the message.</source>
          <target state="translated">이 예는 &quot;복수&quot;키워드를 사용하여 가변적 인 수의 엔티티를 설명하는 방법을 보여줍니다. &quot;#&quot;변수는 현재 번호를 보유하며 메시지에 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e55cb6ec0ca6093526d7c62828c0edb1a5287a8f" translate="yes" xml:space="preserve">
          <source>This example shows how the controller of the component toggle is reused in the template through the scope to use its logic.</source>
          <target state="translated">이 예제는 컴포넌트 토글의 컨트롤러가 스코프를 통해 템플릿에서 로직을 사용하기 위해 재사용하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="69e881047eb340059e7a5c610f077c2d20a3c79a" translate="yes" xml:space="preserve">
          <source>This example shows how to apply the &lt;code&gt;ngCsp&lt;/code&gt; directive to the &lt;code&gt;html&lt;/code&gt; tag.</source>
          <target state="translated">이 예제는 &lt;code&gt;ngCsp&lt;/code&gt; 지시문을 &lt;code&gt;html&lt;/code&gt; 태그 에 적용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="ed56fc3aaeb01e292a55fc62f95abc22c84a204a" translate="yes" xml:space="preserve">
          <source>This example shows how to debounce model changes. Model will be updated only 250 milliseconds after last change.</source>
          <target state="translated">이 예제는 모델 변경 사항을 디 바운스하는 방법을 보여줍니다. 모델은 마지막 변경 후 250 밀리 초 만 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="dc222f9782b698d44e5acc2eade213e958921a1d" translate="yes" xml:space="preserve">
          <source>This example shows how to force jqLite using the &lt;code&gt;ngJq&lt;/code&gt; directive to the &lt;code&gt;html&lt;/code&gt; tag.</source>
          <target state="translated">이 예제는 &lt;code&gt;ngJq&lt;/code&gt; 지시문을 사용하여 jqLite 를 &lt;code&gt;html&lt;/code&gt; 태그 에 강제로 적용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="29ee8b3617765a9363a9be166a628c4aca7bac28" translate="yes" xml:space="preserve">
          <source>This example shows how to use &lt;code&gt;NgModelController&lt;/code&gt; with a custom control to achieve data-binding. Notice how different directives (&lt;code&gt;contenteditable&lt;/code&gt;, &lt;code&gt;ng-model&lt;/code&gt;, and &lt;code&gt;required&lt;/code&gt;) collaborate together to achieve the desired result.</source>
          <target state="translated">이 예제에서는 &lt;code&gt;NgModelController&lt;/code&gt; 를 사용자 지정 컨트롤과 함께 사용 하여 데이터 바인딩을 수행하는 방법을 보여줍니다 . 원하는 결과를 얻기 위해 서로 다른 지시문 ( &lt;code&gt;contenteditable&lt;/code&gt; , &lt;code&gt;ng-model&lt;/code&gt; 및 &lt;code&gt;required&lt;/code&gt; )이 어떻게 협력하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="61fd9907007de818b0a51eb35a082e1bfacde0e8" translate="yes" xml:space="preserve">
          <source>This example shows how to use &lt;code&gt;NgTransclude&lt;/code&gt; with fallback content, that is displayed if no transcluded content is provided.</source>
          <target state="translated">이 예에서는 대체 콘텐츠가 제공되지 않은 경우 표시되는 대체 콘텐츠와 함께 &lt;code&gt;NgTransclude&lt;/code&gt; 를 사용하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e6557ff22ab6eb5f2546a30b5f46c79ffc013794" translate="yes" xml:space="preserve">
          <source>This example shows how to use a jQuery based library of a different name. The library name must be available at the top most 'window'.</source>
          <target state="translated">이 예제는 다른 이름의 jQuery 기반 라이브러리를 사용하는 방법을 보여줍니다. 라이브러리 이름은 최상위 '창'에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="1bc1e70306fccb4e924402e50a8c62fd84c5d7bf" translate="yes" xml:space="preserve">
          <source>This example shows how we can replace the $log service with our own to display log messages.</source>
          <target state="translated">이 예는 $ log 서비스를 자체 로그 서비스로 대체하여 로그 메시지를 표시하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="98d3805b27d8a26b73944c9f271d3372cd57cd4f" translate="yes" xml:space="preserve">
          <source>This example shows how you can check for mutations to a Date object even though the identity of the object has not changed.</source>
          <target state="translated">이 예제에서는 개체의 ID가 변경되지 않은 경우에도 Date 개체의 돌연변이를 확인하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="85cde9bfa8ac1bdf2bd3651b32a94cf481a55c6e" translate="yes" xml:space="preserve">
          <source>This example shows how you can specify gender rules for specific plural matches - in this case, =1 is special cased for gender.</source>
          <target state="translated">이 예는 특정 복수형 일치에 성별 규칙을 지정하는 방법을 보여줍니다.이 경우 성별에 특별한 경우 = 1이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="9749a4623a260025246f8b93aa5465ed0e4db5e8" translate="yes" xml:space="preserve">
          <source>This example shows the recommended path for integrating AngularJS with what we call automatic initialization.</source>
          <target state="translated">이 예제는 AngularJS를 자동 초기화라고 부르는 권장 경로를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="16aad3f4a7cb6d7e3f26212344ec18cf12df0870" translate="yes" xml:space="preserve">
          <source>This example shows the relationship between &quot;default&quot; update events and additional &lt;code&gt;updateOn&lt;/code&gt; triggers.</source>
          <target state="translated">이 예는 &quot;기본&quot;업데이트 이벤트와 추가 &lt;code&gt;updateOn&lt;/code&gt; 트리거 간의 관계를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="5a8998cc45e803c5f7423eaa2a721c7a2920c113" translate="yes" xml:space="preserve">
          <source>This example shows various combinations of &lt;code&gt;href&lt;/code&gt;, &lt;code&gt;ng-href&lt;/code&gt; and &lt;code&gt;ng-click&lt;/code&gt; attributes in links and their different behaviors:</source>
          <target state="translated">이 예제는 링크에서 &lt;code&gt;href&lt;/code&gt; , &lt;code&gt;ng-href&lt;/code&gt; 및 &lt;code&gt;ng-click&lt;/code&gt; 속성 의 다양한 조합 과 다른 동작을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="05ca10821b1fd973b5ab4a8e10404776b2b56f8c" translate="yes" xml:space="preserve">
          <source>This example uses &lt;code&gt;ngRepeat&lt;/code&gt; to display a list of people. A filter is used to restrict the displayed results by name or by age. New (entering) and removed (leaving) items are animated.</source>
          <target state="translated">이 예에서는 &lt;code&gt;ngRepeat&lt;/code&gt; 를 사용 하여 사람 목록을 표시합니다. 필터는 이름 또는 연령별로 표시된 결과를 제한하는 데 사용됩니다. 새로운 (들어가기) 및 제거 된 (나가기) 항목이 애니메이션으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="69806b8ba755780069d6f6cc5178b21da806ae26" translate="yes" xml:space="preserve">
          <source>This example uses the &quot;select&quot; keyword to specify the message based on gender.</source>
          <target state="translated">이 예에서는 &quot;select&quot;키워드를 사용하여 성별을 기준으로 메시지를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="9d7aedeff039b8214af79d9d1aa1f2262c75c572" translate="yes" xml:space="preserve">
          <source>This feature enables tools like &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt; and test runners to hook into angular's bootstrap process and sneak in more modules into the DI registry which can replace or augment DI services for the purpose of instrumentation or mocking out heavy dependencies.</source>
          <target state="translated">이 기능을 사용하면 &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt; 및 테스트 러너와 같은 툴이 앵귤러의 부트 스트랩 프로세스에 연결하고 더 많은 모듈을 DI 레지스트리에 몰래 넣을 수 있습니다. DI 레지스트리는 계측을 위해 DI 서비스를 대체하거나 보강 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c02ae2a8961bbe5f114d4fe421285b2cfe5838cc" translate="yes" xml:space="preserve">
          <source>This feature is sometimes used to mix different markup languages, e.g. to wrap an AngularJS template within a Python Jinja template (or any other template language). Mixing templating languages is &lt;strong&gt;very dangerous&lt;/strong&gt;. The embedding template language will not safely escape AngularJS expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS) security bugs!</source>
          <target state="translated">이 기능은 다른 마크 업 언어를 혼합하는 데 사용됩니다 (예 : Python Jinja 템플릿 (또는 다른 템플릿 언어) 내에서 AngularJS 템플릿을 래핑하는 데 사용). 템플릿 언어를 혼합하는 것은 &lt;strong&gt;매우 위험&lt;/strong&gt; 합니다. 임베드 된 템플리트 언어는 AngularJS 표현식을 안전하게 이스케이프하지 않으므로 템플리트의 사용자 제어 값으로 인해 XSS (Cross Site Scripting) 보안 버그가 발생합니다!</target>
        </trans-unit>
        <trans-unit id="72e289eefaf5aaf4145ca3a0206a0d8bebdbb225" translate="yes" xml:space="preserve">
          <source>This feels like too much overhead</source>
          <target state="translated">오버 헤드가 너무 많은 것 같습니다</target>
        </trans-unit>
        <trans-unit id="e37ade63953d0e46c93b36ee67acdb6a7374a215" translate="yes" xml:space="preserve">
          <source>This filter is mostly useful for debugging. When using the double curly {{value}} notation the binding is automatically converted to JSON.</source>
          <target state="translated">이 필터는 주로 디버깅에 유용합니다. 이중 중괄호 {{value}} 표기법을 사용하면 바인딩이 자동으로 JSON으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="55e88b554c469156081629a31c90300b4541a621" translate="yes" xml:space="preserve">
          <source>This function can be called during the &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; phase of an app. It takes a filter function as the only argument, which will then be used to &quot;filter&quot; animations (based on the animated element, the event type, and the animation options). Only when the filter function returns &lt;code&gt;true&lt;/code&gt;, will the animation be performed. This allows great flexibility - you can easily create complex rules, such as allowing specific events only or enabling animations on specific subtrees of the DOM, and dynamically modify them, for example disabling animations at certain points in time or under certain circumstances.</source>
          <target state="translated">이 기능은 앱 의 &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;구성&lt;/a&gt; 단계에서 호출 할 수 있습니다 . 필터 함수를 유일한 인수로 사용하여 애니메이션 요소 (애니메이션 요소, 이벤트 유형 및 애니메이션 옵션을 기반으로)를 &quot;필터링&quot;하는 데 사용됩니다. 필터 함수가 &lt;code&gt;true&lt;/code&gt; 를 반환 할 때만 애니메이션이 수행됩니다. 따라서 유연성이 뛰어납니다. 특정 이벤트 만 허용하거나 DOM의 특정 하위 트리에서 애니메이션을 활성화하는 등 복잡한 규칙을 쉽게 생성하고 동적으로 수정하여 특정 시점 또는 특정 상황에서 애니메이션을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59700d24630b5cf9b8040af13c05f801039b3bd8" translate="yes" xml:space="preserve">
          <source>This function can be used to enable / disable animations in two different ways:</source>
          <target state="translated">이 기능은 두 가지 방법으로 애니메이션을 활성화 / 비활성화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0c8ee3e6d86ff0ba46d68a1e4de3e4dd2d574fb" translate="yes" xml:space="preserve">
          <source>This function can be used when the &lt;code&gt;$viewValue&lt;/code&gt; or the rendered DOM value are not correctly formatted and the &lt;code&gt;$modelValue&lt;/code&gt; must be run through the &lt;code&gt;$formatters&lt;/code&gt; again.</source>
          <target state="translated">이 함수는 &lt;code&gt;$viewValue&lt;/code&gt; 또는 렌더링 된 DOM 값의 형식이 올바르지 않고 &lt;code&gt;$modelValue&lt;/code&gt; 가 &lt;code&gt;$formatters&lt;/code&gt; 통해 다시 실행되어야 할 때 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cbe05ce09a70d470f85ee4dd7a1f4dd51855e2eb" translate="yes" xml:space="preserve">
          <source>This function ensures a single injector will be used for all tests in a given describe context. This contrasts with the default behaviour where a new injector is created per test case.</source>
          <target state="translated">이 기능을 사용하면 지정된 설명 컨텍스트에서 단일 인젝터를 모든 테스트에 사용할 수 있습니다. 이것은 테스트 케이스마다 새로운 인젝터가 생성되는 기본 동작과 대조됩니다.</target>
        </trans-unit>
        <trans-unit id="874dbb62e56a0d601c13b08f260529654912b687" translate="yes" xml:space="preserve">
          <source>This function is deprecated, but will not be removed in the 1.x lifecycle. There are edge cases (see &lt;a href=&quot;angular.merge#known-issues.html&quot;&gt;known issues&lt;/a&gt;) that are not supported by this function. We suggest using another, similar library for all-purpose merging, such as &lt;a href=&quot;https://lodash.com/docs/4.17.4#merge&quot;&gt;lodash's merge()&lt;/a&gt;.</source>
          <target state="translated">이 기능은 더 이상 사용되지 않지만 1.x 수명주기에서는 제거되지 않습니다. 이 기능이 지원하지 않는 경우 ( &lt;a href=&quot;angular.merge#known-issues.html&quot;&gt;알려진 문제&lt;/a&gt; 참조 )가 있습니다. &lt;a href=&quot;https://lodash.com/docs/4.17.4#merge&quot;&gt;lodash의 merge ()&lt;/a&gt; 와 같은 다목적 병합을 위해 유사한 다른 라이브러리를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="104e4ee7bf47164b402b647bc9d4f92d3444f4cb" translate="yes" xml:space="preserve">
          <source>This function registers a module configuration code. It collects the configuration information which will be used when the injector is created by &lt;a href=&quot;angular.mock.inject&quot;&gt;inject&lt;/a&gt;.</source>
          <target state="translated">이 기능은 모듈 구성 코드를 등록합니다. 인젝터가 &lt;a href=&quot;angular.mock.inject&quot;&gt;inject에&lt;/a&gt; 의해 작성 될 때 사용될 구성 정보를 수집합니다 .</target>
        </trans-unit>
        <trans-unit id="66a348d878643285a3617b02bb385a84d7bd067c" translate="yes" xml:space="preserve">
          <source>This function too can be called during the &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; phase of an app. It takes a regex as the only argument, which will then be matched against the classes of any element that is about to be animated. The regex allows a lot of flexibility - you can either allow animations for specific classes only (useful when you are working with 3rd party animations), or exclude specific classes from getting animated.</source>
          <target state="translated">이 기능 은 앱 의 &lt;a href=&quot;../api/ng/type/angular.module#config.html&quot;&gt;구성&lt;/a&gt; 단계에서 호출 할 수도 있습니다 . 정규 표현식을 유일한 인수로 사용하여 애니메이션을 적용하려는 모든 요소의 클래스와 일치시킵니다. 정규식은 많은 유연성을 허용합니다. 특정 클래스에 대해서만 애니메이션을 허용하거나 (타사 애니메이션을 사용할 때 유용) 특정 클래스에 애니메이션을 적용 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c159109652872117256320d96144b40d035fe7a8" translate="yes" xml:space="preserve">
          <source>This function will be invoked when the service needs to be instantiated and should return the decorated service instance.</source>
          <target state="translated">이 기능은 서비스를 인스턴스화해야 할 때 호출되며 데코 레이팅 된 서비스 인스턴스를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="a119154461db6dbbb0ee1429bb68c89f82a67750" translate="yes" xml:space="preserve">
          <source>This function will be invoked when the service needs to be provided and should return the decorated service instance. The function is called using the &lt;a href=&quot;%24injector#invoke.html&quot;&gt;injector.invoke&lt;/a&gt; method and is therefore fully injectable. Local injection arguments:</source>
          <target state="translated">이 기능은 서비스를 제공해야 할 때 호출되며 데코 레이팅 된 서비스 인스턴스를 반환해야합니다. 이 함수는 &lt;a href=&quot;%24injector#invoke.html&quot;&gt;injector.invoke&lt;/a&gt; 메소드를 사용하여 호출 되므로 완전히 삽입 가능합니다. 국소 주입 인자 :</target>
        </trans-unit>
        <trans-unit id="7ace1d7e9d12a0251168d9e9c7837973f650e71b" translate="yes" xml:space="preserve">
          <source>This function will throw if the safe type isn't appropriate for this context, or if the value given cannot be accepted in the context (which might be caused by sanitization not being available, or the value not being recognized as safe).</source>
          <target state="translated">안전 유형이이 컨텍스트에 적합하지 않거나 주어진 값을 컨텍스트에서 허용 할 수없는 경우 (위생을 사용할 수 없거나 값이 안전하지 않은 값으로 인해 발생할 수있는 경우)이 함수가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a3003c5937dbb87501789f9984fa1b4cdce73d92" translate="yes" xml:space="preserve">
          <source>This has the following consequences for AngularJS:</source>
          <target state="translated">This has the following consequences for AngularJS:</target>
        </trans-unit>
        <trans-unit id="868f6b7d204bd6db32315fed3c1b9cdaa4a62fb2" translate="yes" xml:space="preserve">
          <source>This implementation can be used to respond with static or dynamic responses via the &lt;code&gt;when&lt;/code&gt; api and its shortcuts (&lt;code&gt;whenGET&lt;/code&gt;, &lt;code&gt;whenPOST&lt;/code&gt;, etc) and optionally pass through requests to the real $httpBackend for specific requests (e.g. to interact with certain remote apis or to fetch templates from a webserver).</source>
          <target state="translated">이 구현은 &lt;code&gt;when&lt;/code&gt; api 및 해당 바로 가기 ( &lt;code&gt;whenGET&lt;/code&gt; , &lt;code&gt;whenPOST&lt;/code&gt; 등) 를 통해 정적 또는 동적 응답으로 응답 하고 선택적으로 특정 요청에 대한 실제 $ httpBackend로 요청을 전달합니다 (예 : 특정 원격 API와 상호 작용하거나 가져 오기 위해) 웹 서버에서 템플릿).</target>
        </trans-unit>
        <trans-unit id="bbf3e56350b9c22d5e436b82ecd7c89f7a51c73d" translate="yes" xml:space="preserve">
          <source>This implies that the internal state of both the form and the control is available for binding in the view using the standard binding primitives.</source>
          <target state="translated">이는 표준 바인딩 프리미티브를 사용하여 뷰에서 바인딩 할 수있는 폼과 컨트롤의 내부 상태가 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="6e4e2dd3c9342812b2650439b3f4dfe11726f42e" translate="yes" xml:space="preserve">
          <source>This includes the &quot;special&quot; numbers &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;+Infinity&lt;/code&gt; and &lt;code&gt;-Infinity&lt;/code&gt;.</source>
          <target state="translated">여기에는 &quot;특수&quot;숫자 &lt;code&gt;NaN&lt;/code&gt; , &lt;code&gt;+Infinity&lt;/code&gt; 및 &lt;code&gt;-Infinity&lt;/code&gt; 가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="80c58f6b6a5db22c94200d23e6f5ba515e0f7db1" translate="yes" xml:space="preserve">
          <source>This is a &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;Promises/A+&lt;/a&gt;-compliant implementation of promises/deferred objects inspired by &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Kris Kowal's Q&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://github.com/kriskowal/q&quot;&gt;Kris Kowal의 Q에서&lt;/a&gt; 영감을 얻은 약속 / 지연 된 객체 의 &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;약속 / A +&lt;/a&gt; 호환 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="0dba2df7f6ddcb854fb3341d09b04f21dab2773e" translate="yes" xml:space="preserve">
          <source>This is a collection of external, 3rd party resources for learning and developing AngularJS.</source>
          <target state="translated">AngularJS를 배우고 개발하기위한 외부의 타사 리소스 모음입니다.</target>
        </trans-unit>
        <trans-unit id="21aeaba9662970643b7a9fb7ec7ea1ef8bfe63ac" translate="yes" xml:space="preserve">
          <source>This is a global (window) function that is only available when the &lt;a href=&quot;../../ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module is included.</source>
          <target state="translated">이것은 &lt;a href=&quot;../../ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt; 모듈이 포함 된 경우에만 사용할 수있는 전역 (창) 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="3aeed192065b716e51303fafb7933c0cc0d12aa7" translate="yes" xml:space="preserve">
          <source>This is a global (window) function that is only available when the &lt;a href=&quot;../ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module is included.</source>
          <target state="translated">이것은 &lt;a href=&quot;../ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt; 모듈이 포함 된 경우에만 사용할 수있는 전역 (창) 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="940be712194ff22a2b0c9f05c98206545090b459" translate="yes" xml:space="preserve">
          <source>This is a global (window) function that is only available when the &lt;a href=&quot;ngmock&quot;&gt;&lt;code&gt;ngMock&lt;/code&gt;&lt;/a&gt; module is included.</source>
          <target state="translated">이것은 &lt;a href=&quot;ngmock&quot;&gt; &lt;code&gt;ngMock&lt;/code&gt; &lt;/a&gt; 모듈이 포함 된 경우에만 사용할 수있는 전역 (창) 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="a9bc078a3179c93a01b2304ea5af8b2a3d4add3a" translate="yes" xml:space="preserve">
          <source>This is a list of (known) object types that are not handled correctly by this function:</source>
          <target state="translated">다음은이 함수에서 올바르게 처리되지 않는 알려진 객체 유형의 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e8e04a228b77e4ceb9e95143b611a06958ab031c" translate="yes" xml:space="preserve">
          <source>This is a list of libraries that enhance AngularJS, add common UI components or integrate with other libraries. You can find a larger list of AngularJS external libraries at &lt;a href=&quot;http://ngmodules.org/&quot;&gt;ngmodules.org&lt;/a&gt;.</source>
          <target state="translated">AngularJS를 향상 시키거나 공통 UI 구성 요소를 추가하거나 다른 라이브러리와 통합하는 라이브러리 목록입니다. &lt;a href=&quot;http://ngmodules.org/&quot;&gt;ngmodules.org&lt;/a&gt; 에서 AngularJS 외부 라이브러리의 더 큰 목록을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b4d2f9c6398ff6489ba72736fd69aa6792f94f7" translate="yes" xml:space="preserve">
          <source>This is a non-exhaustive list of object types / features that are not handled correctly by &lt;code&gt;angular.copy&lt;/code&gt;. Note that since this functions is used by the change detection code, this means binding or watching objects of these types (or that include these types) might not work correctly.</source>
          <target state="translated">이것은 &lt;code&gt;angular.copy&lt;/code&gt; 가 올바르게 처리하지 않은 객체 유형 / 기능의 전체 목록입니다 . 이 기능은 변경 감지 코드에서 사용되므로 이러한 유형의 객체 (또는 이러한 유형을 포함하는)를 바인딩하거나 감시하면 제대로 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="243531736be9806625723a16f6421de48871a398" translate="yes" xml:space="preserve">
          <source>This is a special class that can be used to prevent unwanted flickering / flash of content before the actual animation starts. The class is added as soon as an animation is initialized, but removed before the actual animation starts (after waiting for a $digest). It is also only added for &lt;em&gt;structural&lt;/em&gt; animations (&lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;leave&lt;/code&gt;).</source>
          <target state="translated">실제 애니메이션이 시작되기 전에 원하지 않는 내용의 깜박임 / 플래시를 방지하는 데 사용할 수있는 특수 클래스입니다. 클래스는 애니메이션이 초기화되는 즉시 추가되지만 실제 애니메이션이 시작되기 전에 제거됩니다 ($ digest를 기다린 후). 또한 &lt;em&gt;구조적&lt;/em&gt; 애니메이션 ( &lt;code&gt;enter&lt;/code&gt; , &lt;code&gt;move&lt;/code&gt; , &lt;code&gt;leave&lt;/code&gt; ) 에만 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="8c921d5dab3491a0ede284d2c4169c0796dd9692" translate="yes" xml:space="preserve">
          <source>This is all done behind the scenes. Notice that by having the &lt;code&gt;ng-controller&lt;/code&gt; ask the injector to instantiate the class, it can satisfy all of the dependencies of &lt;code&gt;MyController&lt;/code&gt; without the controller ever knowing about the injector.</source>
          <target state="translated">이 모든 것이 뒤에서 이루어집니다. 함으로써 통지 &lt;code&gt;ng-controller&lt;/code&gt; 클래스의 인스턴스를 인젝터를 물어, 그것은의 종속성을 모두 만족시킬 수 &lt;code&gt;MyController&lt;/code&gt; 에를 컨트롤러가 이제까지 인젝터에 대해 모른 채.</target>
        </trans-unit>
        <trans-unit id="c0c13bc636a5e20f5b33c815c14d171efa71421f" translate="yes" xml:space="preserve">
          <source>This is called when we need to determine if the value of an input is empty.</source>
          <target state="translated">입력 값이 비어 있는지 확인해야 할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="0705b013e2055b12840aa9f33bf1c6e01e702f6d" translate="yes" xml:space="preserve">
          <source>This is clearly not a great solution.</source>
          <target state="translated">이것은 분명히 훌륭한 해결책이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="8c0b33e0f52faca414488a07a74d8d29174945ba" translate="yes" xml:space="preserve">
          <source>This is desirable, but it puts the responsibility of getting hold of the dependency on the code that constructs &lt;code&gt;SomeClass&lt;/code&gt;.</source>
          <target state="translated">이것은 바람직하지만 &lt;code&gt;SomeClass&lt;/code&gt; 를 구성하는 코드에 대한 종속성을 가져야 할 책임이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e19cc504a64dbc7e5223f67be790ee5a786042e" translate="yes" xml:space="preserve">
          <source>This is followed by a list of selection keyword and corresponding message pairs. The &quot;other&quot; keyword and corresponding message are &lt;strong&gt;required&lt;/strong&gt; but you may have as few or as many of the other categories as you need.</source>
          <target state="translated">다음에는 선택 키워드 및 해당 메시지 쌍 목록이옵니다. &quot;기타&quot;키워드 및 해당 메시지가 &lt;strong&gt;필요&lt;/strong&gt; 하지만 &lt;strong&gt;필요한&lt;/strong&gt; 만큼 다른 범주가 많거나 적을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="830044fcd0e944858b0f63daf06beb477ee3aa4f" translate="yes" xml:space="preserve">
          <source>This is followed by a list of selection keyword and corresponding message pairs. The &quot;other&quot; keyword and corresponding message are &lt;strong&gt;required&lt;/strong&gt; but you may have as few or as many of the other gender values as you need (i.e. it isn't restricted to male/female.) Note however, that the matching is &lt;strong&gt;case-sensitive&lt;/strong&gt;.</source>
          <target state="translated">다음에는 선택 키워드 및 해당 메시지 쌍 목록이옵니다. &quot;기타&quot;키워드와 해당 메시지가 &lt;strong&gt;필요&lt;/strong&gt; 하지만 &lt;strong&gt;필요한&lt;/strong&gt; 만큼 다른 성별 값을 가질 수 있습니다 (즉, 남성 / 여성으로 제한되지 않음). 그러나 일치하는 항목은 &lt;strong&gt;대소 문자를 구분합니다.&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="bcc3f10937fdf2eb5b1c0d43e9871f7899de9628" translate="yes" xml:space="preserve">
          <source>This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.</source>
          <target state="translated">이것은 Chrome 확장 프로그램 또는 Universal Windows Apps와 같은 것을 개발할 때 필요합니다.</target>
        </trans-unit>
        <trans-unit id="6f9743eeaff280817f27f1c2c3f8c185c14b8871" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;code&gt;template&lt;/code&gt; but the template is loaded from the specified URL, asynchronously.</source>
          <target state="translated">&lt;code&gt;template&lt;/code&gt; 과 비슷 하지만 템플릿은 지정된 URL에서 비동기 적으로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="c2a22a93c5db90cc0e312d0bd6caa04b04b4c2eb" translate="yes" xml:space="preserve">
          <source>This is taken from the above example.</source>
          <target state="translated">이것은 위의 예에서 가져온 것입니다.</target>
        </trans-unit>
        <trans-unit id="6cc3106a660e4677bcc273826723ac7286f55964" translate="yes" xml:space="preserve">
          <source>This is the best outcome. The application code simply declares the dependencies it needs, without having to deal with the injector. This setup does not break the Law of Demeter.</source>
          <target state="translated">이것이 가장 좋은 결과입니다. 응용 프로그램 코드는 인젝터를 다루지 않고도 필요한 종속성을 선언합니다. 이 설정은 데 미터 법칙을 위반하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="42cf60690a82822d827602db3861e00f4b6e5726" translate="yes" xml:space="preserve">
          <source>This is the core version of &lt;code&gt;$animateCss&lt;/code&gt;. By default, only when the &lt;code&gt;ngAnimate&lt;/code&gt; is included, then the &lt;code&gt;$animateCss&lt;/code&gt; service will actually perform animations.</source>
          <target state="translated">&lt;code&gt;$animateCss&lt;/code&gt; 의 핵심 버전입니다 . 기본적으로 &lt;code&gt;ngAnimate&lt;/code&gt; 가 포함 된 경우에만 &lt;code&gt;$animateCss&lt;/code&gt; 서비스가 실제로 애니메이션을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8fe7c930ab124d17cccc4266216fed96a7db7677" translate="yes" xml:space="preserve">
          <source>This is the preferred way to annotate application components. This is how the examples in the documentation are written.</source>
          <target state="translated">응용 프로그램 구성 요소에 주석을 달 때 선호되는 방법입니다. 이것이 문서의 예제가 작성되는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="e99173c0622fc29819acb26a64190ef25cec6946" translate="yes" xml:space="preserve">
          <source>This is the sequence that your code should follow:</source>
          <target state="translated">다음은 코드가 따라야하는 순서입니다.</target>
        </trans-unit>
        <trans-unit id="bd952f6c2b0ab426ac04bd58194e1818a961d2b2" translate="yes" xml:space="preserve">
          <source>This is useful if a you have a default response that is overriden inside specific tests.</source>
          <target state="translated">특정 테스트 내에서 재정의 된 기본 응답이있는 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="106a413d228469230b2f1ee6489f09b04a5ce051" translate="yes" xml:space="preserve">
          <source>This is where &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; comes into play. Dependency Injection (DI) is a software design pattern that deals with how objects and functions get created and how they get a hold of their dependencies. Everything within AngularJS (directives, filters, controllers, services, ...) is created and wired using dependency injection. Within AngularJS, the DI container is called the &lt;a href=&quot;di&quot;&gt;injector&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;di&quot;&gt;의존성 주입&lt;/a&gt; 이 시작 되는 곳 입니다. 의존성 주입 (DI)은 객체와 함수가 생성되는 방법과 의존성을 유지하는 방법을 다루는 소프트웨어 디자인 패턴입니다. AngularJS (디렉티브, 필터, 컨트롤러, 서비스 등) 내의 모든 것은 의존성 주입을 사용하여 생성되고 연결됩니다. AngularJS 내에서 DI 컨테이너를 &lt;a href=&quot;di&quot;&gt;인젝터&lt;/a&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="bd73e2280f08f2867f649e593661732c488f0cde" translate="yes" xml:space="preserve">
          <source>This is, however, exactly the use-case that the Service recipe is the most suitable for.</source>
          <target state="translated">그러나 이것은 서비스 레시피가 가장 적합한 유스 케이스입니다.</target>
        </trans-unit>
        <trans-unit id="7558a0b4c85e4c406f419884da5d0524791d2c44" translate="yes" xml:space="preserve">
          <source>This looks like normal HTML, with some new markup. In AngularJS, a file like this is called a &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt;. When AngularJS starts your application, it parses and processes this new markup from the template using the &lt;a href=&quot;compiler&quot;&gt;compiler&lt;/a&gt;. The loaded, transformed and rendered DOM is then called the &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="translated">이것은 새로운 HTML을 가진 일반 HTML처럼 보입니다. AngularJS에서 이와 같은 파일을 &lt;a href=&quot;templates&quot;&gt;템플릿&lt;/a&gt; 이라고합니다 . AngularJS는 애플리케이션을 시작할 때 &lt;a href=&quot;compiler&quot;&gt;컴파일러를&lt;/a&gt; 사용하여 템플릿에서이 새로운 마크 업을 구문 분석하고 처리합니다 . 로드, 변환 및 렌더링 된 DOM을 &lt;em&gt;뷰&lt;/em&gt; 라고합니다 .</target>
        </trans-unit>
        <trans-unit id="38b2e8311081c7751c2533d1619c905371007bd7" translate="yes" xml:space="preserve">
          <source>This makes it easier to write an app in a way that's similar to using Web Components or using the new Angular's style of application architecture.</source>
          <target state="translated">따라서 웹 구성 요소를 사용하거나 새로운 Angular 스타일의 응용 프로그램 아키텍처를 사용하는 것과 유사한 방식으로 응용 프로그램을보다 쉽게 ​​작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7f46c84b99f6c66daf57e614d0604305863fdee" translate="yes" xml:space="preserve">
          <source>This makes it possible for the widget to have private state for its template, while the transcluded content has access to its originating scope.</source>
          <target state="translated">이를 통해 위젯은 템플리트에 대한 개인용 상태를 가질 수 있지만 변환 된 컨텐츠는 원래 범위에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b547a3365f5455bb23472c7583140ed975d34a1" translate="yes" xml:space="preserve">
          <source>This may seem to be unexpected complexity, but it gives the widget user and developer the least surprise.</source>
          <target state="translated">이것은 예상치 못한 복잡한 것처럼 보이지만 위젯 사용자와 개발자에게 가장 놀라운 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c9d2b0a1a474c5c524a2e46ab836d1ad41fbe991" translate="yes" xml:space="preserve">
          <source>This means that any changes to the data need to be re-merged with the template and then &lt;code&gt;innerHTML&lt;/code&gt;ed into the DOM. Some of the issues with this approach are:</source>
          <target state="translated">즉, 데이터에 대한 모든 변경 사항은 템플릿과 다시 병합 된 다음 &lt;code&gt;innerHTML&lt;/code&gt; 을 DOM에 병합해야합니다 . 이 접근법의 일부 문제는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3797c257375c657fdb65bc7afd3178dde6553049" translate="yes" xml:space="preserve">
          <source>This method &lt;em&gt;returns a new promise&lt;/em&gt; which is resolved or rejected via the return value of the &lt;code&gt;successCallback&lt;/code&gt;, &lt;code&gt;errorCallback&lt;/code&gt; (unless that value is a promise, in which case it is resolved with the value which is resolved in that promise using &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues&quot;&gt;promise chaining&lt;/a&gt;). It also notifies via the return value of the &lt;code&gt;notifyCallback&lt;/code&gt; method. The promise cannot be resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback arguments are optional.</source>
          <target state="translated">이 메소드 &lt;em&gt;는 &lt;/em&gt; &lt;code&gt;successCallback&lt;/code&gt; , &lt;code&gt;errorCallback&lt;/code&gt; 의 반환 값을 통해 해결되거나 거부되는 &lt;em&gt;새 약속&lt;/em&gt; 을 리턴합니다 (값이 약속이 아닌 경우 &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues&quot;&gt;약속 체인을&lt;/a&gt; 사용하여 해당 약속에서 해결 된 값으로 해석 됨 ). 또한 &lt;code&gt;notifyCallback&lt;/code&gt; 메소드 의 리턴 값을 통해 통지합니다 . notifyCallback 메소드에서 약속을 해결하거나 거부 할 수 없습니다. errorCallback 및 notifyCallback 인수는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="dfa92648c02e81fae7a25858df34af1dba44e2d7" translate="yes" xml:space="preserve">
          <source>This method can be called to add the 'ng-dirty' class and set the form to a dirty state (ng-dirty class). This method will also propagate to parent forms.</source>
          <target state="translated">이 메소드는 'ng-dirty'클래스를 추가하고 양식을 더티 상태 (ng-dirty 클래스)로 설정하기 위해 호출 될 수 있습니다. 이 방법은 부모 양식에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="7b64a60d991bc92f86edf62edf6b119177e9387d" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the 'ng-touched' class and set the form controls to their untouched state (ng-untouched class).</source>
          <target state="translated">이 메소드를 호출하여 'ng-touched'클래스를 제거하고 양식 컨트롤을 터치되지 않은 상태 (ng-untouched 클래스)로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dce764038d2f1e780d1e96003245444b77962bbc" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-dirty&lt;/code&gt; class and set the control to its pristine state (&lt;code&gt;ng-pristine&lt;/code&gt; class). A model is considered to be pristine when the control has not been changed from when first compiled.</source>
          <target state="translated">&lt;code&gt;ng-dirty&lt;/code&gt; 클래스 를 제거 하고 컨트롤을 원래 상태 ( &lt;code&gt;ng-pristine&lt;/code&gt; 클래스)로 설정하기 위해이 메서드를 호출 할 수 있습니다 . 컨트롤이 처음 컴파일 될 때부터 변경되지 않은 경우 모델은 원시적 인 것으로 간주됩니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
