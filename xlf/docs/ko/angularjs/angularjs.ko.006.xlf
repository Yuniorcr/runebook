<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="angularjs">
    <body>
      <group id="angularjs">
        <trans-unit id="a104f18bb62aee421639fe99f1a6b3715893e9cd" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-pristine&lt;/code&gt; class and set the control to its dirty state (&lt;code&gt;ng-dirty&lt;/code&gt; class). A model is considered to be dirty when the control has been changed from when first compiled.</source>
          <target state="translated">이 메소드는 &lt;code&gt;ng-pristine&lt;/code&gt; 클래스 를 제거 하고 컨트롤을 더티 상태 ( &lt;code&gt;ng-dirty&lt;/code&gt; 클래스)로 설정 하기 위해 호출 될 수 있습니다 . 처음 컴파일 할 때부터 컨트롤을 변경하면 모델이 더티 인 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="be236d70e3b76ac627108d742a7d930b6e5345dc" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-touched&lt;/code&gt; class and set the control to its untouched state (&lt;code&gt;ng-untouched&lt;/code&gt; class). Upon compilation, a model is set as untouched by default, however this function can be used to restore that state if the model has already been touched by the user.</source>
          <target state="translated">이 메소드를 호출하여 &lt;code&gt;ng-touched&lt;/code&gt; 클래스 를 제거 하고 제어되지 않은 상태 ( &lt;code&gt;ng-untouched&lt;/code&gt; 클래스)로 제어를 설정할 수 있습니다 . 컴파일시 기본적으로 모델은 수정되지 않은 상태로 설정되지만 사용자가 모델을 이미 터치 한 경우이 기능을 사용하여 해당 상태를 복원 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="09d3c1d51e251c93d6c1a6dd38b04fbbfccbd791" translate="yes" xml:space="preserve">
          <source>This method can be called to remove the &lt;code&gt;ng-untouched&lt;/code&gt; class and set the control to its touched state (&lt;code&gt;ng-touched&lt;/code&gt; class). A model is considered to be touched when the user has first focused the control element and then shifted focus away from the control (blur event).</source>
          <target state="translated">터치하지 &lt;code&gt;ng-untouched&lt;/code&gt; 클래스 를 제거 하고 컨트롤을 터치 된 상태 ( &lt;code&gt;ng-touched&lt;/code&gt; 클래스)로 설정하기 위해이 메소드를 호출 할 수 있습니다 . 사용자가 제어 요소에 먼저 초점을 맞춘 다음 초점을 제어에서 멀어지게하면 모델이 터치 된 것으로 간주됩니다 (흐림 이벤트).</target>
        </trans-unit>
        <trans-unit id="039cf05d82b99db28639e2f0df0e8df9fed6d706" translate="yes" xml:space="preserve">
          <source>This method can be called within $parsers/$formatters or a custom validation implementation. However, in most cases it should be sufficient to use the &lt;code&gt;ngModel.$validators&lt;/code&gt; and &lt;code&gt;ngModel.$asyncValidators&lt;/code&gt; collections which will call &lt;code&gt;$setValidity&lt;/code&gt; automatically.</source>
          <target state="translated">이 메소드는 $ parsers / $ formatters 또는 사용자 정의 유효성 검증 구현 내에서 호출 될 수 있습니다. 그러나 대부분의 경우 &lt;code&gt;$setValidity&lt;/code&gt; 자동으로 호출 하는 &lt;code&gt;ngModel.$validators&lt;/code&gt; 및 &lt;code&gt;ngModel.$asyncValidators&lt;/code&gt; 컬렉션 을 사용하면 충분합니다 .</target>
        </trans-unit>
        <trans-unit id="2a0539f5b7dcaa5c95fe933397c2c13fa49ebc03" translate="yes" xml:space="preserve">
          <source>This method can be used to change which mocked responses &lt;code&gt;$httpBackend&lt;/code&gt; returns, when defining them with &lt;a href=&quot;%24httpbackend#when.html&quot;&gt;$httpBackend.when()&lt;/a&gt; (and shortcut methods). By default, &lt;code&gt;$httpBackend&lt;/code&gt; returns the first definition that matches. When setting &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt;, it will use the last response that matches, i.e. the one that was added last.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;%24httpbackend#when.html&quot;&gt;$ httpBackend.when ()&lt;/a&gt; 및 단축키 메소드로 정의 할 때 &lt;code&gt;$httpBackend&lt;/code&gt; 리턴하는 모의 응답을 변경하는 데 사용할 수 있습니다 . 기본적으로 &lt;code&gt;$httpBackend&lt;/code&gt; 는 일치하는 첫 번째 정의를 반환합니다. &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt; 설정하면 일치하는 마지막 응답, 즉 마지막에 추가 된 응답을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dcc61f9b44cb07452831de5334ffe49067b455e3" translate="yes" xml:space="preserve">
          <source>This method can be used to change which mocked responses &lt;code&gt;$httpBackend&lt;/code&gt; returns, when defining them with &lt;a href=&quot;../../ngmock/service/%24httpbackend#when.html&quot;&gt;$httpBackend.when()&lt;/a&gt; (and shortcut methods). By default, &lt;code&gt;$httpBackend&lt;/code&gt; returns the first definition that matches. When setting &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt;, it will use the last response that matches, i.e. the one that was added last.</source>
          <target state="translated">이 메소드는 &lt;a href=&quot;../../ngmock/service/%24httpbackend#when.html&quot;&gt;$ httpBackend.when ()&lt;/a&gt; 및 단축키 메소드로 정의 할 때 &lt;code&gt;$httpBackend&lt;/code&gt; 리턴하는 모의 응답을 변경하는 데 사용할 수 있습니다 . 기본적으로 &lt;code&gt;$httpBackend&lt;/code&gt; 는 일치하는 첫 번째 정의를 반환합니다. &lt;code&gt;$http.matchLatestDefinitionEnabled(true)&lt;/code&gt; 설정하면 일치하는 마지막 응답, 즉 마지막에 추가 된 응답을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="95660a3cb5771d7b45b7bbb186218a518c26a470" translate="yes" xml:space="preserve">
          <source>This method does not work with code minification / obfuscation. For this reason the following annotation strategies are supported.</source>
          <target state="translated">이 방법은 코드 축소 / 난독 처리에는 작동하지 않습니다. 이러한 이유로 다음 주석 전략이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="3743c06b6e4464fc92789fb6a0e779ba20b62ec9" translate="yes" xml:space="preserve">
          <source>This method flushes all types of tasks (not only timeouts), which is unintuitive. It is recommended to use &lt;a href=&quot;%24flushpendingtasks&quot;&gt;&lt;code&gt;$flushPendingTasks&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 방법은 직관적이지 않은 모든 유형의 작업 (시간 초과뿐만 아니라)을 플러시합니다. 대신 &lt;a href=&quot;%24flushpendingtasks&quot;&gt; &lt;code&gt;$flushPendingTasks&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="8360fbd33c9d5e68f4591a6c59f7a211a01b3d67" translate="yes" xml:space="preserve">
          <source>This method is called by ngModel internally when the bound scope value changes. Application developers usually do not have to call this function themselves.</source>
          <target state="translated">이 메서드는 바운드 범위 값이 변경 될 때 ngModel에 의해 내부적으로 호출됩니다. 애플리케이션 개발자는 일반적으로이 함수를 스스로 호출 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="72b7c97b0517d0df1caf70a23a32b6f05272b2eb" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24compileprovider#aHrefSanitizationTrustedUrlList.html&quot;&gt;aHrefSanitizationTrustedUrlList&lt;/a&gt; instead.</source>
          <target state="translated">This method is deprecated. Use &lt;a href=&quot;%24compileprovider#aHrefSanitizationTrustedUrlList.html&quot;&gt;aHrefSanitizationTrustedUrlList&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="4a9b174d9781fe7f514ce48f7b9ebfe656cdf51f" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24compileprovider#imgSrcSanitizationTrustedUrlList.html&quot;&gt;imgSrcSanitizationTrustedUrlList&lt;/a&gt; instead.</source>
          <target state="translated">This method is deprecated. Use &lt;a href=&quot;%24compileprovider#imgSrcSanitizationTrustedUrlList.html&quot;&gt;imgSrcSanitizationTrustedUrlList&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="753582e916c429d5b2dcd76cf9cbadb31194bc4c" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt; instead.</source>
          <target state="translated">This method is deprecated. Use &lt;a href=&quot;%24scedelegateprovider#bannedResourceUrlList.html&quot;&gt;bannedResourceUrlList&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="246a8d841d5ed0951cb806948e108ae1472dcf34" translate="yes" xml:space="preserve">
          <source>This method is deprecated. Use &lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt; instead.</source>
          <target state="translated">This method is deprecated. Use &lt;a href=&quot;%24scedelegateprovider#trustedResourceUrlList.html&quot;&gt;trustedResourceUrlList&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="111861b1f33e6ba16e0e2a46b6e09b6bdb15aa32" translate="yes" xml:space="preserve">
          <source>This method is getter / setter.</source>
          <target state="translated">이 메소드는 getter / setter입니다.</target>
        </trans-unit>
        <trans-unit id="ae01763d0e34b30b2df6b37f5dcec088ef8e5dfa" translate="yes" xml:space="preserve">
          <source>This method is getter only.</source>
          <target state="translated">이 메소드는 getter 전용입니다.</target>
        </trans-unit>
        <trans-unit id="c81e50c18dfe60ee4fd5f2abbf2491d1ef6cf978" translate="yes" xml:space="preserve">
          <source>This method is used to flush the pending callbacks and animation frames to either start an animation or conclude an animation. Note that this will not actually close an actively running animation (see &lt;a href=&quot;%24animate#closeAndFlush.html&quot;&gt;&lt;code&gt;closeAndFlush()&lt;/code&gt;&lt;/a&gt; for that).</source>
          <target state="translated">이 메소드는 보류중인 콜백 및 애니메이션 프레임을 비우고 애니메이션을 시작하거나 애니메이션을 마무리하는 데 사용됩니다. 이렇게하면 실제로 실행중인 애니메이션이 닫히지는 않습니다 ( &lt;a href=&quot;%24animate#closeAndFlush.html&quot;&gt; &lt;code&gt;closeAndFlush()&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="d2f5be6e2442f3e5478eb9133bc83673c67fcec1" translate="yes" xml:space="preserve">
          <source>This method must be called during the &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;config&lt;/a&gt; phase. Once the &lt;code&gt;$sanitize&lt;/code&gt; service has been instantiated, this method has no effect.</source>
          <target state="translated">&lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;구성&lt;/a&gt; 단계 중에이 메소드를 호출해야합니다 . 한때 &lt;code&gt;$sanitize&lt;/code&gt; 서비스가 인스턴스화되고,이 방법은 효과가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b8fcc4fc5c0078d0531686af3fc817e06fcdb9f7" translate="yes" xml:space="preserve">
          <source>This method returns a &lt;strong&gt;shallow copy&lt;/strong&gt; of the controls that are currently part of this form. The controls can be instances of &lt;a href=&quot;form.formcontroller&quot;&gt;&lt;code&gt;FormController&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;../directive/ngform&quot;&gt;&quot;child-forms&quot;&lt;/a&gt;) and of &lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;NgModelController&lt;/code&gt;&lt;/a&gt;. If you need access to the controls of child-forms, you have to call &lt;code&gt;$getControls()&lt;/code&gt; recursively on them. This can be used for example to iterate over all controls to validate them.</source>
          <target state="translated">이 메서드 는 현재이 폼의 일부인 컨트롤 의 &lt;strong&gt;얕은 복사본&lt;/strong&gt; 을 반환합니다 . 컨트롤은 &lt;a href=&quot;form.formcontroller&quot;&gt; &lt;code&gt;FormController&lt;/code&gt; &lt;/a&gt; ( &lt;a href=&quot;../directive/ngform&quot;&gt;&quot;child-forms&quot;&lt;/a&gt; ) 및 &lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;NgModelController&lt;/code&gt; 의&lt;/a&gt; 인스턴스 일 수 있습니다 . 자식 폼의 컨트롤에 액세스해야하는 경우 &lt;code&gt;$getControls()&lt;/code&gt; 반복적으로 호출 해야합니다. 예를 들어 모든 컨트롤을 반복하여 유효성을 검사하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7eb2bbddf37cf7ff14a48397a4375854d8e571a9" translate="yes" xml:space="preserve">
          <source>This method sets the form's &lt;code&gt;$pristine&lt;/code&gt; state to true, the &lt;code&gt;$dirty&lt;/code&gt; state to false, removes the &lt;code&gt;ng-dirty&lt;/code&gt; class and adds the &lt;code&gt;ng-pristine&lt;/code&gt; class. Additionally, it sets the &lt;code&gt;$submitted&lt;/code&gt; state to false.</source>
          <target state="translated">이 메소드는 양식의 &lt;code&gt;$pristine&lt;/code&gt; 상태를 true로 설정하고 &lt;code&gt;$dirty&lt;/code&gt; 상태를 false로 설정하고 &lt;code&gt;ng-dirty&lt;/code&gt; 클래스를 제거 하고 &lt;code&gt;ng-pristine&lt;/code&gt; 클래스를 추가합니다 . 또한 &lt;code&gt;$submitted&lt;/code&gt; 상태를 false로 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="00f75c22912ee6d84e2b4439725f1730667f3fa5" translate="yes" xml:space="preserve">
          <source>This method should be called when a control wants to change the view value; typically, this is done from within a DOM event handler. For example, the &lt;a href=&quot;../directive/input&quot;&gt;input&lt;/a&gt; directive calls it when the value of the input changes and &lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt; calls it when an option is selected.</source>
          <target state="translated">컨트롤이 뷰 값을 변경하려고 할 때이 메서드를 호출해야합니다. 일반적으로 이는 DOM 이벤트 핸들러 내에서 수행됩니다. 예를 들어, &lt;a href=&quot;../directive/input&quot;&gt;입력&lt;/a&gt; 지시문 은 입력 값이 변경 될 때이를 호출 하고 &lt;a href=&quot;../directive/select&quot;&gt;select&lt;/a&gt; 는 옵션이 선택 될 때 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f87b6459717eafeb949467a7b18ce6ab71215fa0" translate="yes" xml:space="preserve">
          <source>This method takes all types of tasks (not only timeouts) into account, which is unintuitive. It is recommended to use &lt;a href=&quot;%24verifynopendingtasks&quot;&gt;&lt;code&gt;$verifyNoPendingTasks&lt;/code&gt;&lt;/a&gt; instead, which additionally allows checking for timeouts only (with &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt;).</source>
          <target state="translated">이 방법은 시간 초과뿐만 아니라 모든 유형의 작업을 고려하므로 직관적이지 않습니다. 대신 &lt;a href=&quot;%24verifynopendingtasks&quot;&gt; &lt;code&gt;$verifyNoPendingTasks&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 좋습니다.이 경우 시간 초과 만 검사 할 수 있습니다 ( &lt;code&gt;$verifyNoPendingTasks('$timeout')&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d2705a3d550a46eddae0f388fab27d18be36a157" translate="yes" xml:space="preserve">
          <source>This method will add each of the injectables to the injector and execute all of the config and run blocks for each module passed to the method.</source>
          <target state="translated">이 메소드는 인젝터에 각 인젝터 블을 추가하고 메소드에 전달 된 각 모듈에 대해 모든 구성 및 실행 블록을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="2a37d1349d00a1da78883f5fe65c38c4d72feb8f" translate="yes" xml:space="preserve">
          <source>This method will also propagate to all the controls contained in this form.</source>
          <target state="translated">이 방법은이 양식에 포함 된 모든 컨트롤에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="27ac794b33b9e4188249c87bb5a53b20e784a575" translate="yes" xml:space="preserve">
          <source>This method will close all pending animations (both &lt;a href=&quot;../../nganimate#javascript-based-animations.html&quot;&gt;Javascript&lt;/a&gt; and &lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;CSS&lt;/a&gt;) and it will also flush any remaining animation frames and/or callbacks.</source>
          <target state="translated">이 메소드는 보류중인 모든 애니메이션 ( &lt;a href=&quot;../../nganimate#javascript-based-animations.html&quot;&gt;Javascript&lt;/a&gt; 및 &lt;a href=&quot;../../nganimate/service/%24animatecss&quot;&gt;CSS&lt;/a&gt; 모두)을 닫고 나머지 애니메이션 프레임 및 / 또는 콜백도 플러시합니다.</target>
        </trans-unit>
        <trans-unit id="915cfaa2d3ed2fa450c656592c6f02599354a0d6" translate="yes" xml:space="preserve">
          <source>This might also happen because some third-party frameworks place animation duration defaults across many element or className selectors in order to make their code small and reusable.</source>
          <target state="translated">일부 타사 프레임 워크는 코드를 작고 재사용 할 수 있도록 많은 요소 또는 className 선택기에 애니메이션 지속 시간 기본값을 배치하기 때문에 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ee006904db7800e4b79b052720172e93492d2b3" translate="yes" xml:space="preserve">
          <source>This mock implementation can be used to respond with static or dynamic responses via the &lt;code&gt;expect&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; apis and their shortcuts (&lt;code&gt;expectGET&lt;/code&gt;, &lt;code&gt;whenPOST&lt;/code&gt;, etc).</source>
          <target state="translated">이 모의 구현은 &lt;code&gt;expect&lt;/code&gt; 및 &lt;code&gt;when&lt;/code&gt; api 및 단축키 ( &lt;code&gt;expectGET&lt;/code&gt; , &lt;code&gt;whenPOST&lt;/code&gt; 등) 를 통해 정적 또는 동적 응답으로 응답하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb22f4802e38eb9995c979b6ca1295aabe3cf8e8" translate="yes" xml:space="preserve">
          <source>This mode is implemented by the &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt;&lt;code&gt;$sce&lt;/code&gt;&lt;/a&gt; service and various core directives.</source>
          <target state="translated">이 모드는 &lt;a href=&quot;../api/ng/service/%24sce&quot;&gt; &lt;code&gt;$sce&lt;/code&gt; &lt;/a&gt; 서비스 및 다양한 핵심 지시문으로 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="c233a6582d2d1e6bb77664600a84be278e1f11d2" translate="yes" xml:space="preserve">
          <source>This module allows the usage of any identifier that follows ES6 identifier naming convention to be used as an identifier in an AngularJS expression. ES6 delegates some of the identifier rules definition to Unicode, this module uses ES6 and Unicode 8.0 identifiers convention.</source>
          <target state="translated">이 모듈을 사용하면 ES6 식별자 이름 지정 규칙을 따르는 식별자를 AngularJS 표현식의 식별자로 사용할 수 있습니다. ES6는 일부 식별자 규칙 정의를 유니 코드로 위임합니다.이 모듈은 ES6 및 유니 코드 8.0 식별자 규칙을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="da9bb8e1f58198b53e9f9b910bc27da80d253883" translate="yes" xml:space="preserve">
          <source>This object has the following properties:</source>
          <target state="translated">이 객체에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e7dde314902c57d9644c192713d0db6e938ac456" translate="yes" xml:space="preserve">
          <source>This object is a map where the keys are the name of the slot to fill and the value is an element selector used to match the HTML to the slot. The element selector should be in normalized form (e.g. &lt;code&gt;myElement&lt;/code&gt;) and will match the standard element variants (e.g. &lt;code&gt;my-element&lt;/code&gt;, &lt;code&gt;my:element&lt;/code&gt;, &lt;code&gt;data-my-element&lt;/code&gt;, etc).</source>
          <target state="translated">이 객체는 키가 채울 슬롯의 이름이고 값이 HTML을 슬롯에 일치시키는 데 사용되는 요소 선택기 인 맵입니다. 요소 선택기는 정규화 된 형식 (예 : &lt;code&gt;myElement&lt;/code&gt; ) 이어야 하고 표준 요소 변형 (예 : &lt;code&gt;my-element&lt;/code&gt; , &lt;code&gt;my:element&lt;/code&gt; , &lt;code&gt;data-my-element&lt;/code&gt; 등) 과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="f1709dc043ae963fcb6fd267e6b932727b496895" translate="yes" xml:space="preserve">
          <source>This page explains the AngularJS initialization process and how you can manually initialize AngularJS if necessary.</source>
          <target state="translated">이 페이지에서는 AngularJS 초기화 프로세스와 필요한 경우 AngularJS를 수동으로 초기화하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5492bee79da51e22fa46e5f05f5e53037f44de5d" translate="yes" xml:space="preserve">
          <source>This property is deprecated. Use &lt;a href=&quot;%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt; instead.</source>
          <target state="translated">This property is deprecated. Use &lt;a href=&quot;%24httpprovider#xsrfTrustedOrigins.html&quot;&gt;xsrfTrustedOrigins&lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="2b833d5b65cdc313f0a542c48b1308d0e041ebe8" translate="yes" xml:space="preserve">
          <source>This property is used only if the &lt;code&gt;compile&lt;/code&gt; property is not defined.</source>
          <target state="translated">이 특성은 &lt;code&gt;compile&lt;/code&gt; 특성이 정의되지 않은 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="883346a7fad915ebeff0e77021b15cf3830eda47" translate="yes" xml:space="preserve">
          <source>This property is used to bind scope properties directly to the controller. It can be either &lt;code&gt;true&lt;/code&gt; or an object hash with the same format as the &lt;code&gt;scope&lt;/code&gt; property.</source>
          <target state="translated">이 속성은 범위 속성을 컨트롤러에 직접 바인딩하는 데 사용됩니다. &lt;code&gt;scope&lt;/code&gt; 속성 과 동일한 형식의 &lt;code&gt;true&lt;/code&gt; 또는 개체 해시 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a357c7aacd82c6ccff19e2526aedf02dcd86f146" translate="yes" xml:space="preserve">
          <source>This provider allows controller registration via the &lt;a href=&quot;%24controllerprovider#register.html&quot;&gt;register&lt;/a&gt; method.</source>
          <target state="translated">이 공급자는 &lt;a href=&quot;%24controllerprovider#register.html&quot;&gt;등록&lt;/a&gt; 방법을 통해 컨트롤러 등록을 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="0617c66c55cb594ee37dad4d27bb3dac77e7f902" translate="yes" xml:space="preserve">
          <source>This section briefly touches on all of the important parts of AngularJS using a simple example. For a more in-depth explanation, see the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">이 섹션에서는 간단한 예제를 사용하여 AngularJS의 모든 중요한 부분을 간략하게 설명합니다. 보다 자세한 설명은 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/&quot;&gt;튜토리얼을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5bb3d5509db140228243eca3e2250fca46e665b9" translate="yes" xml:space="preserve">
          <source>This section briefly touches on all of the important parts of AngularJS using a simple example. For a more in-depth explanation, see the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt;.</source>
          <target state="translated">This section briefly touches on all of the important parts of AngularJS using a simple example. For a more in-depth explanation, see the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/&quot;&gt;tutorial&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e465c56fdc1919202e61b4c838abdb2efdbe6b09" translate="yes" xml:space="preserve">
          <source>This section is useful to you if you're already familiar with the ICU MessageFormat syntax.</source>
          <target state="translated">이 섹션은 ICU MessageFormat 구문에 이미 익숙한 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="629fe3d641b010dc22c32cf60d9c51461dbc815f" translate="yes" xml:space="preserve">
          <source>This section motivates and explains AngularJS's use of DI. For how to use DI, see above.</source>
          <target state="translated">이 섹션에서는 AngularJS의 DI 사용에 대한 동기를 부여하고 설명합니다. DI 사용 방법은 위를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4b368495e290571221704fff68dedde03e3d8a9d" translate="yes" xml:space="preserve">
          <source>This service handles the lifecycle of callbacks to handle JSONP requests. Override this service if you wish to customise where the callbacks are stored and how they vary compared to the requested url.</source>
          <target state="translated">이 서비스는 콜백 수명주기를 처리하여 JSONP 요청을 처리합니다. 콜백이 저장된 위치와 요청 된 URL과 비교하여 콜백이 어떻게 다른지를 사용자 정의하려면이 서비스를 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="91d45badcd0e43333ab51b6632a69a56a2a8478d" translate="yes" xml:space="preserve">
          <source>This service is just a simple decorator for &lt;a href=&quot;../../ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; service that adds a &quot;flush&quot; and &quot;verifyNoPendingTasks&quot; methods.</source>
          <target state="translated">이 서비스는 &quot;flush&quot;및 &quot;verifyNoPendingTasks&quot;메소드를 추가하는 &lt;a href=&quot;../../ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt; 서비스 의 단순한 데코레이터입니다 .</target>
        </trans-unit>
        <trans-unit id="11801c68b71dbf7b43ee58c584c0b6ddc76ef833" translate="yes" xml:space="preserve">
          <source>This service is just a simple decorator for &lt;a href=&quot;../ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; service that adds a &quot;flush&quot; and &quot;verifyNoPendingTasks&quot; methods.</source>
          <target state="translated">이 서비스는 &quot;flush&quot;및 &quot;verifyNoPendingTasks&quot;메소드를 추가하는 &lt;a href=&quot;../ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt; 서비스 의 단순한 데코레이터입니다 .</target>
        </trans-unit>
        <trans-unit id="1f835173917891572ec34a779591da7e750f83cc" translate="yes" xml:space="preserve">
          <source>This service is just a simple decorator for &lt;a href=&quot;ng/service/%24timeout&quot;&gt;$timeout&lt;/a&gt; service that adds a &quot;flush&quot; and &quot;verifyNoPendingTasks&quot; methods.</source>
          <target state="translated">이 서비스는 &quot;flush&quot;및 &quot;verifyNoPendingTasks&quot;메소드를 추가하는 &lt;a href=&quot;ng/service/%24timeout&quot;&gt;$ timeout&lt;/a&gt; 서비스 의 단순한 데코레이터입니다 .</target>
        </trans-unit>
        <trans-unit id="0ea40af4b0cece7853eaf6005c23cbc42ab9d2f2" translate="yes" xml:space="preserve">
          <source>This should not be used to watch for changes in objects that are (or contain) &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/File&quot;&gt;File&lt;/a&gt; objects due to limitations with &lt;a href=&quot;../function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; 의&lt;/a&gt; 제한으로 인해 &lt;a href=&quot;https://developer.mozilla.org/docs/Web/API/File&quot;&gt;File&lt;/a&gt; 객체 이거나 포함 된 객체의 변경 사항을 감시하는 데 사용해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="8a1af7647b98d0fb330f0d8c1c4942701a28f04d" translate="yes" xml:space="preserve">
          <source>This significantly reduces the overhead. It is far easier to pay the small overhead and have an application that's secure and can be audited to verify that with much more ease than bolting security onto an application later.</source>
          <target state="translated">이는 오버 헤드를 크게 줄입니다. 적은 오버 헤드를 지불하는 것이 훨씬 쉽고 보안이 뛰어난 애플리케이션을 보유하고 있으며 나중에 애플리케이션에 보안을 적용하는 것보다 훨씬 쉽게 검증 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fef39daed2db411efe5a4c7dfa116cf26686648" translate="yes" xml:space="preserve">
          <source>This simple example shows a formatter that would convert the model value to uppercase:</source>
          <target state="translated">이 간단한 예제는 모델 값을 대문자로 변환하는 포맷터를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="c4a9089b94815bb38543c89a6cef1127501717c7" translate="yes" xml:space="preserve">
          <source>This simple example shows a parser that would convert text input value to lowercase:</source>
          <target state="translated">이 간단한 예제는 텍스트 입력 값을 소문자로 변환하는 파서를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="514273f310733c11cdf3627df583ea49721cf88c" translate="yes" xml:space="preserve">
          <source>This site and all of its contents are referring to AngularJS (version 1.x), if you are looking for the latest Angular, please visit &lt;a href=&quot;https://angular.io/&quot;&gt;angular.io&lt;/a&gt;.</source>
          <target state="translated">이 사이트와 모든 내용은 AngularJS (버전 1.x)를 참조하고 있습니다. 최신 Angular를 찾고 있다면 &lt;a href=&quot;https://angular.io/&quot;&gt;angular.io&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="3996593ddc4d041ab4093149112bcf781b10defe" translate="yes" xml:space="preserve">
          <source>This site refers to AngularJS (v1.x). &lt;a href=&quot;https://angular.io/&quot;&gt;Go to the latest Angular&lt;/a&gt;.</source>
          <target state="translated">이 사이트는 AngularJS (v1.x)를 나타냅니다. &lt;a href=&quot;https://angular.io/&quot;&gt;최신 Angular로 이동하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="13256ca7859242e20651198514af51bbfcbee712" translate="yes" xml:space="preserve">
          <source>This syntax extension is provided by way of the &lt;code&gt;ngMessageFormat&lt;/code&gt; module that your application can depend upon (shipped separately as &lt;code&gt;angular-message-format.min.js&lt;/code&gt; and &lt;code&gt;angular-message-format.js&lt;/code&gt;.) A current limitation of the &lt;code&gt;ngMessageFormat&lt;/code&gt; module, is that it does not support redefining the &lt;code&gt;$interpolate&lt;/code&gt; start and end symbols. Only the default &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; are allowed.</source>
          <target state="translated">이 구문 확장은 애플리케이션이 의존 할 수 있는 &lt;code&gt;ngMessageFormat&lt;/code&gt; 모듈을 통해 제공됩니다 ( &lt;code&gt;angular-message-format.min.js&lt;/code&gt; 및 &lt;code&gt;angular-message-format.js&lt;/code&gt; 로 별도로 제공) . &lt;code&gt;ngMessageFormat&lt;/code&gt; 모듈 의 현재 제한 사항은 다음 과 같습니다 . &lt;code&gt;$interpolate&lt;/code&gt; 시작 및 끝 기호 재정의를 지원하지 않습니다 . 기본 &lt;code&gt;{{&lt;/code&gt; 및 &lt;code&gt;}}&lt;/code&gt; 만 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="fa80acf811fb7d3bc5d4d2945ffc786c2f86cb56" translate="yes" xml:space="preserve">
          <source>This syntax extension, while based on MessageFormat, has been designed to be backwards compatible with existing AngularJS interpolation expressions. The key rule is simply this: &lt;strong&gt;All interpolations are done inside double curlies.&lt;/strong&gt; The top level comma operator after an expression inside the double curlies causes MessageFormat extensions to be recognized. Such a top level comma is otherwise illegal in an AngularJS expression and is used by MessageFormat to specify the function (such as plural/select) and it's related syntax.</source>
          <target state="translated">이 구문 확장은 MessageFormat을 기반으로하지만 기존 AngularJS 보간 표현식과 호환되도록 설계되었습니다. 핵심 규칙은 간단합니다. &lt;strong&gt;모든 보간은 이중 컬 내부에서 수행됩니다. &lt;/strong&gt;이중 curlies 내에서 표현식을 사용한 후 최상위 쉼표 연산자를 사용하면 MessageFormat 확장이 인식됩니다. 이러한 최상위 쉼표는 AngularJS 표현식에서 불법이며 MessageFormat에서 함수 (예 : 복수 / 선택)와 관련 구문을 지정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e599113b0edd4e670329932acb818d5adc536965" translate="yes" xml:space="preserve">
          <source>This technique is often used in unit tests to mock out a service's dependencies.</source>
          <target state="translated">이 기술은 종종 단위 테스트에서 서비스의 종속성을 조롱하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="addac971dd419fb36735ec5e40bf3e153ccc3c01" translate="yes" xml:space="preserve">
          <source>This test describes the requirements of a ToDo list, specifically, that it should be able to filter the list of items.</source>
          <target state="translated">이 테스트는 ToDo 목록의 요구 사항, 특히 항목 목록을 필터링 할 수 있어야한다는 요구 사항을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="00229fe7fc0568eb82dd05f9f9c12e34d0b73a38" translate="yes" xml:space="preserve">
          <source>This type extends the &lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 유형은 &lt;a href=&quot;ngcomponentrouter/type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="9a55be7ee54799e91a1baaf9ec346a8b069e7054" translate="yes" xml:space="preserve">
          <source>This type extends the &lt;a href=&quot;router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 유형은 &lt;a href=&quot;router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="3c90b3267c6b0702ff318db2cb8b8a8a313f9b31" translate="yes" xml:space="preserve">
          <source>This type extends the &lt;a href=&quot;type/router&quot;&gt;&lt;code&gt;Router&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 유형은 &lt;a href=&quot;type/router&quot;&gt; &lt;code&gt;Router&lt;/code&gt; &lt;/a&gt; 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="194bdef428dc42d35d6d30db6c9d019109b9627e" translate="yes" xml:space="preserve">
          <source>This usually happens when the &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate module&lt;/a&gt; is included, but no actual animations are defined for &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;. Internet Explorer is affected more often than other browsers.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate 모듈&lt;/a&gt; 이 포함되어 있지만 &lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; 에&lt;/a&gt; 대해 실제 애니메이션이 정의되어 있지 않은 경우에 발생합니다 . Internet Explorer는 다른 브라우저보다 더 자주 영향을받습니다.</target>
        </trans-unit>
        <trans-unit id="89941c3846f435420c0a0b5a2605676a55d335a2" translate="yes" xml:space="preserve">
          <source>This will ensure that all services in your application are properly annotated. See the &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;dependency injection strict mode&lt;/a&gt; docs for more.</source>
          <target state="translated">이렇게하면 응용 프로그램의 모든 서비스에 주석이 제대로 달립니다. 자세한 내용은 &lt;a href=&quot;di#using-strict-dependency-injection.html&quot;&gt;의존성 주입 엄격 모드&lt;/a&gt; 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f281cdd5d821befaa87c95331b8e4df644d3d012" translate="yes" xml:space="preserve">
          <source>This will not render properly, unless we do some scope magic.</source>
          <target state="translated">우리가 스코프 마술을하지 않으면 제대로 렌더링되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b981c7b156731dee59fa70a3a4d07e3181b03de" translate="yes" xml:space="preserve">
          <source>This will work:</source>
          <target state="translated">이것은 작동합니다 :</target>
        </trans-unit>
        <trans-unit id="aa02d37789c0eb90c790d94a8e42c3470d3ddc29" translate="yes" xml:space="preserve">
          <source>Those that stray from AngularJS standards (such as modifying AngularJS's core) may have difficulty updating, so keeping to AngularJS standards is not just a functionality issue, it's also critical in order to facilitate rapid security updates.</source>
          <target state="translated">AngularJS의 핵심 수정과 같은 AngularJS 표준에서 벗어난 것은 업데이트가 어려울 수 있으므로 AngularJS 표준을 유지하는 것은 기능적인 문제 일뿐만 아니라 신속한 보안 업데이트를 촉진하는 데 중요합니다.</target>
        </trans-unit>
        <trans-unit id="18ff4d25dda80968c984aa603ada71e7f8445542" translate="yes" xml:space="preserve">
          <source>Though we have a core group of core contributors at Google, AngularJS is an open source project with hundreds of contributors. We'd love you to be one of them. When you're ready, please read the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/misc/contribute&quot;&gt;Guide for contributing to AngularJS&lt;/a&gt;.</source>
          <target state="translated">Google에는 핵심 핵심 기고자 그룹이 있지만 AngularJS는 수백 명의 기고자를 가진 오픈 소스 프로젝트입니다. 우리는 당신이 그들 중 하나가되기를 바랍니다. 준비가되면 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/misc/contribute&quot;&gt;AngularJS에 기여하기위한 안내서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="c121b639ed0c89a5b45299557fb90f827f49791c" translate="yes" xml:space="preserve">
          <source>Though we have a core group of core contributors at Google, AngularJS is an open source project with hundreds of contributors. We'd love you to be one of them. When you're ready, please read the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/misc/contribute&quot;&gt;Guide for contributing to AngularJS&lt;/a&gt;.</source>
          <target state="translated">Though we have a core group of core contributors at Google, AngularJS is an open source project with hundreds of contributors. We'd love you to be one of them. When you're ready, please read the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/misc/contribute&quot;&gt;Guide for contributing to AngularJS&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="d2c02671e16ad1b484fd37216c00f1f05c7c934d" translate="yes" xml:space="preserve">
          <source>Timestamp representing the desired time in &lt;em&gt;UTC&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;UTC로&lt;/em&gt; 원하는 시간을 나타내는 타임 스탬프&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bf36ae8fcb1d23b61ad6567c0e9d250610eb4692" translate="yes" xml:space="preserve">
          <source>Timezone to be used for formatting. It understands UTC/GMT and the continental US time zone abbreviations, but for general use, use a time zone offset, for example, &lt;code&gt;'+0430'&lt;/code&gt; (4 hours, 30 minutes east of the Greenwich meridian) If not specified, the timezone of the browser will be used.</source>
          <target state="translated">포맷팅에 사용되는 시간대. UTC / GMT와 미국 대륙 시간대 약어를 이해하지만, 일반적으로 사용하는 시간대 오프셋은 &lt;code&gt;'+0430'&lt;/code&gt; (그리니치 자오선에서 동쪽으로 4 시간 30 분)과 같은 시간대 오프셋을 사용하십시오. 브라우저가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="791214dda21a45673e6a00a407416e403372c00e" translate="yes" xml:space="preserve">
          <source>Timezones</source>
          <target state="translated">Timezones</target>
        </trans-unit>
        <trans-unit id="a6f821f5dc3ea799d7cb08f9d99e08572d83b3a9" translate="yes" xml:space="preserve">
          <source>To actually start the animation we need to run &lt;code&gt;animation.start()&lt;/code&gt; which will then return a promise that we can hook into to detect when the animation ends. If we choose not to run the animation then we MUST run &lt;code&gt;animation.end()&lt;/code&gt; to perform a cleanup on the element (since some CSS classes and styles may have been applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties and that changing them will not reconfigure the parameters of the animation.</source>
          <target state="translated">실제로 애니메이션을 시작하려면 &lt;code&gt;animation.start()&lt;/code&gt; 를 실행해야합니다 . 그러면 애니메이션이 끝나는 시점을 감지하기 위해 연결할 수있는 약속이 반환됩니다. 애니메이션을 실행하지 않기로 선택했다면 요소에 대한 정리를 수행하기 위해 &lt;code&gt;animation.end()&lt;/code&gt; 를 실행해야합니다 ( 준비 단계에서 일부 CSS 클래스 및 스타일이 요소에 적용될 수 있으므로). 지속 시간, 지연, 전환 및 키 프레임과 같은 다른 모든 속성은 속성 일 뿐이며 변경하면 애니메이션의 매개 변수가 재구성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e9fc69ae1586e6188ab11de16fef9caf3e9a3443" translate="yes" xml:space="preserve">
          <source>To add or overwrite these defaults, simply add or remove a property from these configuration objects. To add headers for an HTTP method other than POST or PUT, simply add a new object with the lowercased HTTP method name as the key, e.g. &lt;code&gt;$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }&lt;/code&gt;.</source>
          <target state="translated">이러한 기본값을 추가하거나 덮어 쓰려면 이러한 구성 개체에서 속성을 추가하거나 제거하면됩니다. POST 또는 PUT 이외의 HTTP 메소드에 대한 헤더를 추가하려면 소문자 HTTP 메소드 이름을 키로 사용하여 새 오브젝트를 추가하십시오 (예 : &lt;code&gt;$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="440d40ccd05fbc44211e69b24f08900b7177a1db" translate="yes" xml:space="preserve">
          <source>To allow styling of form as well as controls, &lt;code&gt;ngModel&lt;/code&gt; adds these CSS classes:</source>
          <target state="translated">컨트롤과 폼의 스타일을 허용하기 위해 &lt;code&gt;ngModel&lt;/code&gt; 은 다음 CSS 클래스를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="978b24255f9e2043c3815ab1e3ee6525a4048630" translate="yes" xml:space="preserve">
          <source>To allow the minifiers to rename the function parameters and still be able to inject the right services, the function needs to be annotated with the &lt;code&gt;$inject&lt;/code&gt; property. The &lt;code&gt;$inject&lt;/code&gt; property is an array of service names to inject.</source>
          <target state="translated">축소 기에서 함수 매개 변수의 이름을 바꾸고 여전히 올바른 서비스를 주입 할 수있게하려면 &lt;code&gt;$inject&lt;/code&gt; 속성 을 사용하여 함수에 주석을 달아야 합니다. &lt;code&gt;$inject&lt;/code&gt; 속성을 주입하는 서비스 이름의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="227bb446f977c7e7c29690779a58e5dcd3f7bc4a" translate="yes" xml:space="preserve">
          <source>To be secure by default, AngularJS makes sure bindings go through that sanitization, or any similar validation process, unless there's a good reason to trust the given value in this context. That trust is formalized with a function call. This means that as a developer, you can assume all untrusted bindings are safe. Then, to audit your code for binding security issues, you just need to ensure the values you mark as trusted indeed are safe - because they were received from your server, sanitized by your library, etc. You can organize your codebase to help with this - perhaps allowing only the files in a specific directory to do this. Ensuring that the internal API exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.</source>
          <target state="translated">기본적으로 보안을 유지하기 위해 AngularJS는이 컨텍스트에서 지정된 값을 신뢰할만한 이유가없는 한 바인딩이 해당 살균 또는 유사한 유효성 검사 프로세스를 거치도록합니다. 이 신뢰는 함수 호출로 공식화됩니다. 즉, 개발자는 신뢰할 수없는 모든 바인딩이 안전하다고 가정 할 수 있습니다. 그런 다음 바인딩 보안 문제에 대한 코드를 감사하려면 신뢰할 수있는 것으로 표시 한 값이 실제로 안전한지 확인해야합니다. 서버에서받은 값, 라이브러리에서 위생 처리 된 것 등입니다.이를 위해 코드베이스를 구성 할 수 있습니다. -아마도 특정 디렉토리의 파일만이 가능합니다. 해당 코드에 의해 노출 된 내부 API가 임의의 값을 안전한 것으로 마크 업하지 않도록하는 것이 더 관리하기 쉬운 작업이됩니다.</target>
        </trans-unit>
        <trans-unit id="a3936bf1237487c27fb7d5526e836b9e6d510539" translate="yes" xml:space="preserve">
          <source>To bind the model to a non-string value, you can use one of the following strategies:</source>
          <target state="translated">모델을 문자열이 아닌 값에 바인딩하려면 다음 전략 중 하나를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="23a4965aa6aa6aa1e840b66494467e36b1d73b3a" translate="yes" xml:space="preserve">
          <source>To cancel a timeout request, call &lt;code&gt;$timeout.cancel(promise)&lt;/code&gt;.</source>
          <target state="translated">시간 초과 요청을 취소하려면 &lt;code&gt;$timeout.cancel(promise)&lt;/code&gt; 전화하십시오 .</target>
        </trans-unit>
        <trans-unit id="56d3d8bb492af54889dcc66038949954edcd5e47" translate="yes" xml:space="preserve">
          <source>To configure the &lt;code&gt;$location&lt;/code&gt; service, retrieve the &lt;a href=&quot;../api/ng/provider/%24locationprovider&quot;&gt;$locationProvider&lt;/a&gt; and set the parameters as follows:</source>
          <target state="translated">구성하기 위해 &lt;code&gt;$location&lt;/code&gt; 서비스를 검 &lt;a href=&quot;../api/ng/provider/%24locationprovider&quot;&gt;$ locationProvider을&lt;/a&gt; 다음과 같이하고, 매개 변수를 설정합니다 :</target>
        </trans-unit>
        <trans-unit id="14e661d075a8d1d3220a38ac7fd86eacc04d62de" translate="yes" xml:space="preserve">
          <source>To cope with this you simply ensure that your 'element' transclude directive is wrapped in an element, such as a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이 문제를 해결하려면 'element'transclude 지시문이 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 와 같은 요소로 래핑되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="31fe0e47804d71db9cfd7fffc117d4ab85d47fab" translate="yes" xml:space="preserve">
          <source>To disable comment and css class directives use the &lt;code&gt;$compileProvider&lt;/code&gt;:</source>
          <target state="translated">주석 및 CSS 클래스 지시문을 비활성화하려면 &lt;code&gt;$compileProvider&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="5387d2c27cc9dee45bb8cdc85e369fc9f5f17777" translate="yes" xml:space="preserve">
          <source>To disable the mouse click and drag functionality, add &lt;code&gt;ng-swipe-disable-mouse&lt;/code&gt; to the &lt;code&gt;ng-swipe-left&lt;/code&gt; or &lt;code&gt;ng-swipe-right&lt;/code&gt; DOM Element.</source>
          <target state="translated">마우스 클릭 및 드래그 기능을 비활성화하려면 &lt;code&gt;ng-swipe-disable-mouse&lt;/code&gt; 를 &lt;code&gt;ng-swipe-left&lt;/code&gt; 또는 &lt;code&gt;ng-swipe-right&lt;/code&gt; DOM 요소에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="5bc2cad6e2a562908f313cb486e4136ebcb8eee1" translate="yes" xml:space="preserve">
          <source>To do this, we need to use the &lt;code&gt;transclude&lt;/code&gt; option.</source>
          <target state="translated">이렇게하려면 &lt;code&gt;transclude&lt;/code&gt; 옵션 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="035a6a87408acdde8a23ee0cf037d6f472188af6" translate="yes" xml:space="preserve">
          <source>To ease the transition between native inputs and custom controls, ngAria now supports &lt;a href=&quot;../api/ng/directive/ngvalue&quot;&gt;ngValue&lt;/a&gt; and &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;ngChecked&lt;/a&gt;. The original directives were created for native inputs only, so ngAria extends support to custom elements by managing &lt;code&gt;aria-checked&lt;/code&gt; for accessibility.</source>
          <target state="translated">기본 입력과 사용자 지정 컨트롤 간의 전환을 쉽게하기 위해 ngAria는 이제 &lt;a href=&quot;../api/ng/directive/ngvalue&quot;&gt;ngValue&lt;/a&gt; 및 &lt;a href=&quot;../api/ng/directive/ngchecked&quot;&gt;ngChecked를&lt;/a&gt; 지원합니다 . 원래 지시문은 기본 입력에 대해서만 작성되었으므로 ngAria는 &lt;code&gt;aria-checked&lt;/code&gt; accessibility를 관리하여 사용자 정의 요소에 대한 지원을 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="5d168eb9b869dbfb344d7855a584554963333f9c" translate="yes" xml:space="preserve">
          <source>To enable strict di mode, you have two options:</source>
          <target state="translated">엄격한 di 모드를 사용하려면 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fb64437b796f4ba9a62ece5fde0e8c967dba837" translate="yes" xml:space="preserve">
          <source>To examine the scope in the debugger:</source>
          <target state="translated">디버거에서 범위를 검사하려면</target>
        </trans-unit>
        <trans-unit id="b590774031a2cf4725192dcbb7db9c57480cef1d" translate="yes" xml:space="preserve">
          <source>To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis, Use the &lt;code&gt;headers&lt;/code&gt; property, setting the desired header to &lt;code&gt;undefined&lt;/code&gt;. For example:</source>
          <target state="translated">요청별로 $ httpProvider.defaults.headers를 통해 자동으로 추가 된 헤더를 명시 적으로 제거하려면 &lt;code&gt;headers&lt;/code&gt; 속성을 사용하여 원하는 헤더를 &lt;code&gt;undefined&lt;/code&gt; 로 설정하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c80d1fb8ce1e4bf1cd40c9acaf0eb4fe7ea79e3f" translate="yes" xml:space="preserve">
          <source>To help with this, the injected parameters can, optionally, be enclosed with underscores. These are ignored by the injector when the reference name is resolved.</source>
          <target state="translated">이를 위해 주입 된 매개 변수를 선택적으로 밑줄로 묶을 수 있습니다. 참조 이름이 확인되면 인젝터에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="220d6276002b8cffd3f24e9bec07ba42bc0c1add" translate="yes" xml:space="preserve">
          <source>To illustrate further how Controller components work in AngularJS, let's create a little app with the following components:</source>
          <target state="translated">AngularJS에서 컨트롤러 구성 요소가 작동하는 방식을 자세히 설명하기 위해 다음 구성 요소를 사용하여 작은 응용 프로그램을 만들어 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="4f97b5d532edfe4940fd9b38ad40a3cd6585eed2" translate="yes" xml:space="preserve">
          <source>To illustrate this, consider the &lt;code&gt;ng-bind-html&lt;/code&gt; directive. It renders its value directly as HTML: we call that the &lt;em&gt;context&lt;/em&gt;. When given an untrusted input, AngularJS will attempt to sanitize it before rendering if a sanitizer is available, and throw otherwise. To bypass sanitization and render the input as-is, you will need to mark it as trusted for that context before attempting to bind it.</source>
          <target state="translated">이를 설명하기 위해 &lt;code&gt;ng-bind-html&lt;/code&gt; 지시문을 고려하십시오 . 값을 HTML로 직접 렌더링합니다 . &lt;em&gt;문맥&lt;/em&gt; 이라고합니다 . 신뢰할 수없는 입력이 주어지면 AngularJS는 소독제를 사용할 수있는 경우 렌더링하기 전에 소독을 시도하고 그렇지 않으면 던집니다. 위생 처리를 무시하고 입력을 그대로 렌더링하려면 바인딩하기 전에 해당 컨텍스트에 대해 신뢰할 수있는 것으로 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="902ec43adccfdb69ffa83ad123da01d2e0b94c0b" translate="yes" xml:space="preserve">
          <source>To illustrate this, see the example below. Notice that we've added a &lt;code&gt;link&lt;/code&gt; function in &lt;code&gt;script.js&lt;/code&gt; that redefines &lt;code&gt;name&lt;/code&gt; as &lt;code&gt;Jeff&lt;/code&gt;. What do you think the &lt;code&gt;{{name}}&lt;/code&gt; binding will resolve to now?</source>
          <target state="translated">이를 설명하려면 아래 예를 참조하십시오. &lt;code&gt;script.js&lt;/code&gt; 에 &lt;code&gt;name&lt;/code&gt; 을 &lt;code&gt;Jeff&lt;/code&gt; 로 재정의 하는 &lt;code&gt;link&lt;/code&gt; 함수를 추가 했습니다 . &lt;code&gt;{{name}}&lt;/code&gt; 바인딩이 이제 어떻게 해결 될 것이라고 생각 하십니까?</target>
        </trans-unit>
        <trans-unit id="e178b4a4fddd5e3eedf206140142188444cdeb8c" translate="yes" xml:space="preserve">
          <source>To learn more about enabling animation support, click here to visit the &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate module page&lt;/a&gt;.</source>
          <target state="translated">애니메이션 지원 활성화에 대한 자세한 내용을 보려면 여기를 클릭하여 &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate 모듈 페이지&lt;/a&gt; 를 방문 하십시오 .</target>
        </trans-unit>
        <trans-unit id="adee17c33df52d3638d95bce546f5bc1b50438c9" translate="yes" xml:space="preserve">
          <source>To learn more about what's possible be sure to visit the &lt;a href=&quot;nganimate/service/%24animatecss&quot;&gt;$animateCss service&lt;/a&gt;.</source>
          <target state="translated">가능한 것에 대한 자세한 내용은 &lt;a href=&quot;nganimate/service/%24animatecss&quot;&gt;$ animateCss 서비스&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="97a771699a9dc113a310959b23249232d9279e3f" translate="yes" xml:space="preserve">
          <source>To manage the responsibility of dependency creation, each AngularJS application has an &lt;a href=&quot;../api/ng/function/angular.injector&quot;&gt;injector&lt;/a&gt;. The injector is a &lt;a href=&quot;http://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;service locator&lt;/a&gt; that is responsible for construction and lookup of dependencies.</source>
          <target state="translated">종속성 작성의 책임을 관리하기 위해 각 AngularJS 애플리케이션에는 &lt;a href=&quot;../api/ng/function/angular.injector&quot;&gt;인젝터가&lt;/a&gt; 있습니다. 인젝터는 종속성의 구성 및 조회를 담당 하는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Service_locator_pattern&quot;&gt;서비스 로케이터&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="87b7d6ced2affdb289caee17d8f374aa66ff02f9" translate="yes" xml:space="preserve">
          <source>To minimize creation of DOM elements, &lt;code&gt;ngRepeat&lt;/code&gt; uses a function to &quot;keep track&quot; of all items in the collection and their corresponding DOM elements. For example, if an item is added to the collection, &lt;code&gt;ngRepeat&lt;/code&gt; will know that all other items already have DOM elements, and will not re-render them.</source>
          <target state="translated">DOM 요소의 생성을 최소화하기 위해 &lt;code&gt;ngRepeat&lt;/code&gt; 는 함수를 사용하여 컬렉션의 모든 항목과 해당 DOM 요소를 &quot;추적&quot;합니다. 예를 들어 항목이 컬렉션에 추가되면 &lt;code&gt;ngRepeat&lt;/code&gt; 는 다른 모든 항목에 이미 DOM 요소가 있다는 것을 알고 다시 렌더링하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dec799d727684b5ec439ffba56606b33413cfdb2" translate="yes" xml:space="preserve">
          <source>To prevent double execution of the handler, use only one of the &lt;a href=&quot;ngsubmit&quot;&gt;ngSubmit&lt;/a&gt; or &lt;a href=&quot;ngclick&quot;&gt;ngClick&lt;/a&gt; directives. This is because of the following form submission rules in the HTML specification:</source>
          <target state="translated">핸들러의 이중 실행을 방지하려면 &lt;a href=&quot;ngsubmit&quot;&gt;ngSubmit&lt;/a&gt; 또는 &lt;a href=&quot;ngclick&quot;&gt;ngClick&lt;/a&gt; 지시문 중 하나만 사용하십시오 . 이는 HTML 사양에서 다음과 같은 양식 제출 규칙 때문입니다.</target>
        </trans-unit>
        <trans-unit id="7f0c03c455bcc97cd1a6acf7ad3e2c93c1a12ed0" translate="yes" xml:space="preserve">
          <source>To prevent this, you can apply styles to the &lt;code&gt;ng-[event]-prepare&lt;/code&gt; class, which is added as soon as an animation is initialized, but removed before the actual animation starts (after waiting for a &lt;code&gt;$digest&lt;/code&gt;). This class is only added for &lt;em&gt;structural&lt;/em&gt; animations (&lt;code&gt;enter&lt;/code&gt;, &lt;code&gt;move&lt;/code&gt;, and &lt;code&gt;leave&lt;/code&gt;).</source>
          <target state="translated">이를 방지하기 위해 &lt;code&gt;ng-[event]-prepare&lt;/code&gt; 클래스에 스타일을 적용 할 수 있습니다.이 클래스는 애니메이션이 초기화 되 자마자 추가되지만 실제 애니메이션이 시작되기 전에 제거됩니다 ( &lt;code&gt;$digest&lt;/code&gt; 대기 후 ). 이 클래스는 &lt;em&gt;구조적&lt;/em&gt; 애니메이션 ( &lt;code&gt;enter&lt;/code&gt; , &lt;code&gt;move&lt;/code&gt; , &lt;code&gt;leave&lt;/code&gt; ) 에만 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="fea899b0c5f1ec32df106a9c01c18f45fc405eb5" translate="yes" xml:space="preserve">
          <source>To protect against these, explicitly setup &lt;code&gt;overflow: hidden&lt;/code&gt; css rule for all potential svg tags within the sanitized content:</source>
          <target state="translated">이러한 문제를 방지하기 위해 삭제 된 콘텐츠 내의 모든 잠재적 svg 태그에 대해 &lt;code&gt;overflow: hidden&lt;/code&gt; css rule을 명시 적으로 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="943f7d13999a1f50a97c045b022c8dd2e2f3dcbb" translate="yes" xml:space="preserve">
          <source>To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending the range of the repeater by defining explicit start and end points by using &lt;strong&gt;ng-repeat-start&lt;/strong&gt; and &lt;strong&gt;ng-repeat-end&lt;/strong&gt; respectively. The &lt;strong&gt;ng-repeat-start&lt;/strong&gt; directive works the same as &lt;strong&gt;ng-repeat&lt;/strong&gt;, but will repeat all the HTML code (including the tag it's defined on) up to and including the ending HTML tag where &lt;strong&gt;ng-repeat-end&lt;/strong&gt; is placed.</source>
          <target state="translated">하나의 부모 요소 대신 일련의 요소를 반복하기 위해 ngRepeat (및 다른 ng 지시문)는 각각 &lt;strong&gt;ng-repeat-start&lt;/strong&gt; 및 &lt;strong&gt;ng-repeat-end&lt;/strong&gt; 를 사용하여 명시적인 시작 및 끝점을 정의하여 리피터 범위 확장을 지원합니다. . &lt;strong&gt;NG 반복 스타트&lt;/strong&gt; 지시어와 동일하게 작동 &lt;strong&gt;ng를 반복&lt;/strong&gt; 하지만, 반복 모든까지 (이에 정의되어 태그 포함) 끝 HTML 태그를 포함하여 HTML 코드 &lt;strong&gt;ng를 반복 엔드가&lt;/strong&gt; 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="f668b9db355d141127ee33b275331ca28c9dfb88" translate="yes" xml:space="preserve">
          <source>To retrieve the associated scope in console execute: &lt;code&gt;angular.element($0).scope()&lt;/code&gt;</source>
          <target state="translated">콘솔에서 관련 범위를 검색하려면 &lt;code&gt;angular.element($0).scope()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="de4573d3b8e714d7e13c12a8ebcb5312e186616d" translate="yes" xml:space="preserve">
          <source>To retrieve the template later, simply use it in your component:</source>
          <target state="translated">나중에 템플릿을 검색하려면 구성 요소에서 템플릿을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6b58c4c9070bb055028259d5cf6d5b517e4abcc6" translate="yes" xml:space="preserve">
          <source>To reveal the location of the calls to &lt;code&gt;$log&lt;/code&gt; in the JavaScript console, you can &quot;blackbox&quot; the AngularJS source in your browser:</source>
          <target state="translated">JavaScript 콘솔에서 &lt;code&gt;$log&lt;/code&gt; 호출 위치를 나타내 려면 브라우저에서 AngularJS 소스를 &quot;블랙 박스&quot;로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2541170fa16acdab2fc366c6c63c6f8ff8ecc82c" translate="yes" xml:space="preserve">
          <source>To see a complete demo, see the &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/step_14&quot;&gt;animation step in the phonecat tutorial&lt;/a&gt;.</source>
          <target state="translated">전체 데모를 보려면 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/guide/tutorial/step_14&quot;&gt;phonecat 튜토리얼&lt;/a&gt; 의 애니메이션 단계를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d67033ffde197e94525afd34a2c98fae0d38d45" translate="yes" xml:space="preserve">
          <source>To see a complete demo, see the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/step_14&quot;&gt;animation step in the phonecat tutorial&lt;/a&gt;.</source>
          <target state="translated">To see a complete demo, see the &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/guide/tutorial/step_14&quot;&gt;animation step in the phonecat tutorial&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b8d8130d29419030e1a83b2c86e3ff758ba4c5db" translate="yes" xml:space="preserve">
          <source>To see the functional implementation check out &lt;code&gt;src/ngAnimate/animate.js&lt;/code&gt;.</source>
          <target state="translated">기능 구현을 보려면 &lt;code&gt;src/ngAnimate/animate.js&lt;/code&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="48944de5e140f1f4917a4abe8d0e9716456f969d" translate="yes" xml:space="preserve">
          <source>To setup the application to run with this http backend, you have to create a module that depends on the &lt;code&gt;ngMockE2E&lt;/code&gt; and your application modules and defines the fake backend:</source>
          <target state="translated">이 http 백엔드와 함께 실행되도록 애플리케이션을 설정하려면 &lt;code&gt;ngMockE2E&lt;/code&gt; 및 애플리케이션 모듈 에 의존 하고 가짜 백엔드를 정의 하는 모듈을 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="22caed9641a69d6681b70e0e73387ff932f2cc11" translate="yes" xml:space="preserve">
          <source>To solve the issue of lack of isolation, the directive declares a new &lt;code&gt;isolated&lt;/code&gt; scope. An isolated scope does not prototypically inherit from the parent scope, and therefore we don't have to worry about accidentally clobbering any properties.</source>
          <target state="translated">분리 부족 문제를 해결하기 위해이 지시문은 새로운 &lt;code&gt;isolated&lt;/code&gt; 범위를 선언합니다 . 격리 된 범위는 부모 범위에서 프로토 타입을 상속받지 않으므로 실수로 속성을 무단 복제하는 것에 대해 걱정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="837139ebaec8a9499b512e4cd4d6e386dac34296" translate="yes" xml:space="preserve">
          <source>To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically run security checks on them (sanitizations, trusted URL resource, depending on context), or throw when it cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML can be sanitized, but template URLs cannot, for instance.</source>
          <target state="translated">To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically run security checks on them (sanitizations, trusted URL resource, depending on context), or throw when it cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML can be sanitized, but template URLs cannot, for instance.</target>
        </trans-unit>
        <trans-unit id="3a25c283d366fb9b4b8a14a99d214847f2dc0c90" translate="yes" xml:space="preserve">
          <source>To systematically block XSS security bugs, AngularJS treats all values as untrusted by default in HTML or sensitive URL bindings. When binding untrusted values, AngularJS will automatically run security checks on them (sanitizations, whitelists, depending on context), or throw when it cannot guarantee the security of the result. That behavior depends strongly on contexts: HTML can be sanitized, but template URLs cannot, for instance.</source>
          <target state="translated">XSS 보안 버그를 체계적으로 차단하기 위해 AngularJS는 기본적으로 HTML 또는 민감한 URL 바인딩에서 모든 값을 신뢰할 수없는 것으로 처리합니다. 신뢰할 수없는 값을 바인딩 할 때 AngularJS는 자동으로 값에 대한 보안 검사 (위생에 따라 위생, 화이트리스트)를 실행하거나 결과의 보안을 보장 할 수 없을 때 발생합니다. 이러한 동작은 컨텍스트에 따라 크게 달라집니다. HTML은 삭제 될 수 있지만 템플릿 URL은 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="06ebef4f171a37657a117bc224081111b0d7f222" translate="yes" xml:space="preserve">
          <source>To take advantage of this, your server needs to set a token in a JavaScript readable session cookie called &lt;code&gt;XSRF-TOKEN&lt;/code&gt; on the first HTTP GET request. On subsequent XHR requests the server can verify that the cookie matches the &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP header, and therefore be sure that only JavaScript running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server (to prevent the JavaScript from making up its own tokens). We recommend that the token is a digest of your site's authentication cookie with a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;salt&lt;/a&gt; for added security.</source>
          <target state="translated">이를 이용하려면 서버 는 첫 번째 HTTP GET 요청에서 &lt;code&gt;XSRF-TOKEN&lt;/code&gt; 이라는 JavaScript 읽기 가능 세션 쿠키에 토큰을 설정해야합니다 . 후속 XHR 요청에서 서버는 쿠키가 &lt;code&gt;X-XSRF-TOKEN&lt;/code&gt; HTTP 헤더 와 일치하는지 확인할 수 있으므로 도메인에서 실행중인 JavaScript 만 요청을 보낼 수 있는지 확인하십시오. 토큰은 각 사용자마다 고유해야하며, JavaScript가 자체 토큰을 구성하지 못하도록 서버에서 확인할 수 있어야합니다. 토큰은 보안 강화를 위해 &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;소금으로&lt;/a&gt; 사이트의 인증 쿠키를 요약 한 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="a0203afddf9d65db821d61605534ec6d67099780" translate="yes" xml:space="preserve">
          <source>To turn the tinfoil shielding on in our app, we need to create a config function via the module API and have the UnicornLauncherProvider injected into it:</source>
          <target state="translated">앱에서 은박지 차폐를 켜려면 모듈 API를 통해 구성 기능을 만들고 UnicornLauncherProvider에 주입해야합니다.</target>
        </trans-unit>
        <trans-unit id="553205f92ef2e18fbc6290adc32954aaf6a56cd0" translate="yes" xml:space="preserve">
          <source>To understand the extension, take a look at the ICU MessageFormat syntax as specified by the ICU documentation. Anywhere in that MessageFormat that you have regular message text and you want to substitute an expression, just put it in double curlies instead of single curlies that MessageFormat dictates. This has a huge advantage. &lt;strong&gt;You are no longer limited to simple identifiers for substitutions&lt;/strong&gt;. Because you are using double curlies, you can stick in any arbitrary interpolation syntax there, including nesting more MessageFormat expressions!</source>
          <target state="translated">확장을 이해하려면 ICU 설명서에 지정된 ICU MessageFormat 구문을 살펴보십시오. 해당 MessageFormat에서 정규 메시지 텍스트가 있고 표현식을 대체하려는 경우 MessageFormat이 지시하는 단일 curl 대신 이중 curl에 넣으십시오. 이것은 큰 장점이 있습니다. &lt;strong&gt;더 이상 대체를위한 간단한 식별자로 제한되지 않습니다&lt;/strong&gt; . 이중 컬을 사용하기 때문에 더 많은 MessageFormat 표현식 중첩을 포함하여 임의의 보간 구문을 사용할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="668388e5a3f0bc129762bfbfd5aa23b7c1098592" translate="yes" xml:space="preserve">
          <source>To understand, let's look at a real-world example with &lt;code&gt;ngRepeat&lt;/code&gt;:</source>
          <target state="translated">이해하기 위해 &lt;code&gt;ngRepeat&lt;/code&gt; 을 사용한 실제 예를 살펴 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="3d7ed49b07662b8833b62e5f33bb9164b025e055" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;jQuery&lt;/code&gt;, simply ensure it is loaded before the &lt;code&gt;angular.js&lt;/code&gt; file. You can also use the &lt;a href=&quot;../directive/ngjq&quot;&gt;&lt;code&gt;ngJq&lt;/code&gt;&lt;/a&gt; directive to specify that jqlite should be used over jQuery, or to use a specific version of jQuery if multiple versions exist on the page.</source>
          <target state="translated">&lt;code&gt;jQuery&lt;/code&gt; 를 사용하려면 &lt;code&gt;angular.js&lt;/code&gt; 파일 보다 먼저 jQuery를 로드해야 합니다. &lt;a href=&quot;../directive/ngjq&quot;&gt; &lt;code&gt;ngJq&lt;/code&gt; &lt;/a&gt; 지시문을 사용하여 jqlite 를 jQuery보다 사용하도록 지정하거나 페이지에 여러 버전이있는 경우 특정 버전의 jQuery를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b532a90142adf829020e98b53c46a1fe9b0e63b" translate="yes" xml:space="preserve">
          <source>To use DI, there needs to be a place where all the things that should work together are registered. In AngularJS, this is the purpose of the &lt;a href=&quot;module&quot;&gt;modules&lt;/a&gt;. When AngularJS starts, it will use the configuration of the module with the name defined by the &lt;code&gt;ng-app&lt;/code&gt; directive, including the configuration of all modules that this module depends on.</source>
          <target state="translated">DI를 사용하려면 함께 작동해야하는 모든 것이 등록되어 있어야합니다. AngularJS에서 이것은 &lt;a href=&quot;module&quot;&gt;모듈&lt;/a&gt; 의 목적입니다 . AngularJS가 시작되면 이 모듈이 의존하는 모든 모듈의 구성을 포함하여 &lt;code&gt;ng-app&lt;/code&gt; 지시문에 의해 정의 된 이름으로 모듈의 구성을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="61b10e4c62d5b605a789c76144449e0198436d85" translate="yes" xml:space="preserve">
          <source>To use an AngularJS service, you add it as a dependency for the component (controller, service, filter or directive) that depends on the service. AngularJS's &lt;a href=&quot;di&quot;&gt;dependency injection&lt;/a&gt; subsystem takes care of the rest.</source>
          <target state="translated">AngularJS 서비스를 사용하려면 서비스에 의존하는 컴포넌트 (컨트롤러, 서비스, 필터 또는 지시문)의 종속성으로 서비스를 추가하십시오. AngularJS의 &lt;a href=&quot;di&quot;&gt;의존성 주입&lt;/a&gt; 서브 시스템은 나머지를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="eb5a31df8b9aafc070a499ecf9c86a92d155038d" translate="yes" xml:space="preserve">
          <source>To use it for serializing &lt;code&gt;$http&lt;/code&gt; request parameters, set it as the &lt;code&gt;paramSerializer&lt;/code&gt; property:</source>
          <target state="translated">&lt;code&gt;$http&lt;/code&gt; 요청 매개 변수 를 직렬화하는 데 사용하려면 &lt;code&gt;paramSerializer&lt;/code&gt; 특성 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="34fe5ca24f7655ef4c0df8a8ce1da864c5daffcc" translate="yes" xml:space="preserve">
          <source>To wrap it up, let's summarize the most important points:</source>
          <target state="translated">마무리하기 위해 가장 중요한 사항을 요약 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="67e87905406bc002d915c4e863d71aecb21a48f5" translate="yes" xml:space="preserve">
          <source>Toaster Notifications</source>
          <target state="translated">토스터 알림</target>
        </trans-unit>
        <trans-unit id="89699e63b193e1ad3c1e57e75c1c6bbec6885d66" translate="yes" xml:space="preserve">
          <source>Token for the literal value. The literal name value must be a valid literal name.</source>
          <target state="translated">리터럴 값에 대한 토큰입니다. 리터럴 이름 값은 유효한 리터럴 이름이어야합니다.</target>
        </trans-unit>
        <trans-unit id="4fa8cc860c52b268dc6a3adcde7305e9415db5bb" translate="yes" xml:space="preserve">
          <source>Tools</source>
          <target state="translated">Tools</target>
        </trans-unit>
        <trans-unit id="43fad2672c530239402dc3cd0dc6902dc62473f7" translate="yes" xml:space="preserve">
          <source>Tools like &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt; and &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt; need this information to run, but you can disable this in production for a significant performance boost with:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/angular/angularjs-batarang&quot;&gt;Batarang&lt;/a&gt; 과 같은 도구 를 실행하려면이 정보가 필요하지만 다음과 같은 경우 성능을 크게 향상시키기 위해 프로덕션에서이 정보를 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1530f9880b2af5eaf175a15ace085e93796c97a" translate="yes" xml:space="preserve">
          <source>Tools like &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; let you use implicit dependency annotations in your app and automatically add inline array annotations prior to minifying. If you decide to take this approach, you probably want to use &lt;code&gt;ng-strict-di&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; 와 같은 도구 를 사용하면 앱에서 암시 적 종속성 주석을 사용하고 축소하기 전에 인라인 배열 주석을 자동으로 추가 할 수 있습니다. 이 방법을 사용하기로 결정했다면 아마도 &lt;code&gt;ng-strict-di&lt;/code&gt; 를 사용하고 싶을 것입니다 .</target>
        </trans-unit>
        <trans-unit id="aafa2966091cfe18b0886a79db159933dbbadccd" translate="yes" xml:space="preserve">
          <source>Total number of child scopes.</source>
          <target state="translated">총 자식 범위 수</target>
        </trans-unit>
        <trans-unit id="a47abbef75ed2b9d1d65dbb4c1ee8007c1065795" translate="yes" xml:space="preserve">
          <source>Total number of watchers.</source>
          <target state="translated">총 시청자 수</target>
        </trans-unit>
        <trans-unit id="4d568499903ebd2d220b4d1aebe5751fe7c8e35c" translate="yes" xml:space="preserve">
          <source>Tracking and Duplicates</source>
          <target state="translated">추적 및 복제</target>
        </trans-unit>
        <trans-unit id="66e03a0ac4dbd759832dd1962270988fb63c7705" translate="yes" xml:space="preserve">
          <source>Transclude fallback content</source>
          <target state="translated">대체 콘텐츠를 포함</target>
        </trans-unit>
        <trans-unit id="2ff8fb7265f6145db1964ce88bbfd53d7161548a" translate="yes" xml:space="preserve">
          <source>Transcluded content exists on a scope that inherits from outside a directive but exists as a child of the directive's containing scope. If the containing scope is suspended the transcluded scope will also be suspended, even if the scope from which the transcluded scope inherits is not suspended.</source>
          <target state="translated">포함 된 컨텐츠는 지시문 외부에서 상속하지만 지시문 포함 범위의 하위 항목으로 존재하는 범위에 있습니다. 포함 범위가 일시 중단 된 경우 포함 된 범위가 상속하는 범위가 일시 중단되지 않은 경우에도 포함 된 범위도 일시 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="795ce1bfcced4d4049cae5ddaeacbcb0c25e5cff" translate="yes" xml:space="preserve">
          <source>Transclusion</source>
          <target state="translated">Transclusion</target>
        </trans-unit>
        <trans-unit id="a5ed75b850fe44412f536f842d6bad363b3d1dc0" translate="yes" xml:space="preserve">
          <source>Transclusion Functions</source>
          <target state="translated">변환 함수</target>
        </trans-unit>
        <trans-unit id="989bb50d78d8c039c498ff1aa5c4035592d45823" translate="yes" xml:space="preserve">
          <source>Transclusion Scopes</source>
          <target state="translated">번역 범위</target>
        </trans-unit>
        <trans-unit id="bd9f20a87bc27f598593beab138842764756b017" translate="yes" xml:space="preserve">
          <source>Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and copying them to another part of the DOM, while maintaining their connection to the original AngularJS scope from where they were taken.</source>
          <target state="translated">Transclusion은 DOM의 한 부분에서 DOM 요소의 컬렉션을 추출하여 DOM의 다른 부분으로 복사하면서 원래 AngularJS 범위와의 연결을 유지하면서 DOM 요소의 컬렉션을 가져 오는 프로세스입니다.</target>
        </trans-unit>
        <trans-unit id="34a69ce955b679dd8ef55bd68ef5d2fb2de59126" translate="yes" xml:space="preserve">
          <source>Transclusion is used (often with &lt;a href=&quot;../directive/ngtransclude&quot;&gt;&lt;code&gt;ngTransclude&lt;/code&gt;&lt;/a&gt;) to insert the original contents of a directive's element into a specified place in the template of the directive. The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded content has access to the properties on the scope from which it was taken, even if the directive has isolated scope. See the &lt;a href=&quot;../../../guide/directive#creating-a-directive-that-wraps-other-elements.html&quot;&gt;Directives Guide&lt;/a&gt;.</source>
          <target state="translated">지시문 요소의 원래 내용을 지시문 템플리트의 지정된 위치에 삽입하기 위해 &lt;a href=&quot;../directive/ngtransclude&quot;&gt; &lt;code&gt;ngTransclude&lt;/code&gt; &lt;/a&gt; 와 함께 사용됩니다 . 단순히 DOM 요소를 수동으로 이동시키는 것보다 전이의 이점은 전치 된 컨텐츠가 지시어가 분리 된 범위를 가지고 있어도 해당 범위의 특성에 액세스 할 수 있다는 것입니다. &lt;a href=&quot;../../../guide/directive#creating-a-directive-that-wraps-other-elements.html&quot;&gt;지시문 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5f5aa3a8fc4b42447f88fc712a14afe2cdc1f412" translate="yes" xml:space="preserve">
          <source>Transforming Requests and Responses</source>
          <target state="translated">요청 및 응답 변환</target>
        </trans-unit>
        <trans-unit id="e66820e4851b71dffa2d6714b446c9480ae287d1" translate="yes" xml:space="preserve">
          <source>Translated strings/datetime formats can vary greatly in length. For example, &lt;code&gt;June 3, 1977&lt;/code&gt; will be translated to Spanish as &lt;code&gt;3 de junio de 1977&lt;/code&gt;.</source>
          <target state="translated">번역 된 문자열 / 날짜 / 시간 형식은 길이가 크게 다를 수 있습니다. 예를 들어, &lt;code&gt;June 3, 1977&lt;/code&gt; &lt;code&gt;3 de junio de 1977&lt;/code&gt; 1977 년 3 월 6 일 스페인어로 번역됩니다 .</target>
        </trans-unit>
        <trans-unit id="5ea519c83af9abea32e76f378b69d1f735efd77a" translate="yes" xml:space="preserve">
          <source>Translation length</source>
          <target state="translated">번역 길이</target>
        </trans-unit>
        <trans-unit id="529ba88fd78ba49c6c2f6f2560bd2ca3b71c2359" translate="yes" xml:space="preserve">
          <source>Triggering and debouncing model updates</source>
          <target state="translated">모델 업데이트 트리거 및 제거</target>
        </trans-unit>
        <trans-unit id="b30aa7b64c97b21bb201e26ce39656a62ae3ba6f" translate="yes" xml:space="preserve">
          <source>Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon execution, the removeClass operation will only be handled after the next digest and it will not trigger an animation if element does not contain the CSS class or if the class is added at a later step. Note that class-based animations are treated differently compared to structural animations (like enter, move and leave) since the CSS classes may be added/removed at different points depending if CSS or JavaScript animations are used.</source>
          <target state="translated">제공된 CSS 클래스 제거를 둘러싼 removeClass 애니메이션을 트리거합니다. 실행시 removeClass 작업은 다음 다이제스트 후에 만 ​​처리되며 요소에 CSS 클래스가 포함되어 있지 않거나 이후 단계에서 클래스가 추가 된 경우 애니메이션을 트리거하지 않습니다. CSS 또는 JavaScript 애니메이션의 사용 여부에 따라 CSS 클래스가 다른 지점에서 추가 / 제거 될 수 있으므로 클래스 기반 애니메이션은 구조 애니메이션 (입력, 이동 및 휴가 등)과 다르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="a8c60d34c5c475354e584429d0db24f6b56f4c26" translate="yes" xml:space="preserve">
          <source>Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon execution, the addClass operation will only be handled after the next digest and it will not trigger an animation if element already contains the CSS class or if the class is removed at a later step. Note that class-based animations are treated differently compared to structural animations (like enter, move and leave) since the CSS classes may be added/removed at different points depending if CSS or JavaScript animations are used.</source>
          <target state="translated">제공된 CSS 클래스 추가를 둘러싼 addClass 애니메이션을 트리거합니다. 실행시 addClass 작업은 다음 다이제스트 후에 만 ​​처리되며 요소에 CSS 클래스가 이미 포함되어 있거나 이후 단계에서 클래스가 제거 된 경우 애니메이션을 트리거하지 않습니다. CSS 또는 JavaScript 애니메이션의 사용 여부에 따라 CSS 클래스가 다른 지점에서 추가 / 제거 될 수 있으므로 클래스 기반 애니메이션은 구조 애니메이션 (입력, 이동 및 휴가 등)과 다르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="a1ea2af226764114c06246658ad6eb3995bac408" translate="yes" xml:space="preserve">
          <source>Triggers an animation and then removes the element from the DOM. When the function is called a promise is returned that will be resolved during the next digest once the animation has completed.</source>
          <target state="translated">애니메이션을 트리거 한 다음 DOM에서 요소를 제거합니다. 함수가 호출되면 약속이 반환되고 애니메이션이 완료되면 다음 다이제스트 중에 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="d33a09cfae6955e8ea96021c02a14a6f2135e6d2" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is &quot;empty&quot;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 &quot;비어 있으면&quot; 참 입니다.</target>
        </trans-unit>
        <trans-unit id="7e9f928080be6817472e3edba6cd3728c6b44b07" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Date&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 &lt;code&gt;Date&lt;/code&gt; 인 경우 참 입니다.</target>
        </trans-unit>
        <trans-unit id="9d4620ea3af47d4b59be6c1ad6d376625a3bc5a3" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 &lt;code&gt;Function&lt;/code&gt; 인 경우 참 입니다.</target>
        </trans-unit>
        <trans-unit id="f2dc22bb4abc37c763c32e208299d55940817939" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;Number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 &lt;code&gt;Number&lt;/code&gt; 인 경우 참 입니다.</target>
        </trans-unit>
        <trans-unit id="629f2e041c0522e13feab339a108446527250afa" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">진정한 경우 &lt;code&gt;value&lt;/code&gt; A는 &lt;code&gt;String&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7206f8d3d0972b3265fbd63b451b2d141ee6fe8" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is a DOM element (or wrapped jQuery element).</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 DOM 요소 (또는 래핑 된 jQuery 요소) 이면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="e55cf1550d8a7a76c67c0e00faabad1dcabda075" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is an &lt;code&gt;Array&lt;/code&gt;.</source>
          <target state="translated">진정한 경우 &lt;code&gt;value&lt;/code&gt; 입니다 &lt;code&gt;Array&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7156770c7f10d6373aa8baaafb2baaeb8df6fff" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is an &lt;code&gt;Object&lt;/code&gt; but not &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 가 &lt;code&gt;Object&lt;/code&gt; 이지만 &lt;code&gt;null&lt;/code&gt; 이 아닌 경우 true 입니다.</target>
        </trans-unit>
        <trans-unit id="61bd97fd0cb8d2d1c177255faefe3a90f7d26d11" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is defined.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 정의되어 있으면 true 입니다.</target>
        </trans-unit>
        <trans-unit id="f4ccefcaf72f594cb16e5d8ae91db2c94271cc38" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;value&lt;/code&gt; is undefined.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 이 정의되지 않은 경우 참 입니다.</target>
        </trans-unit>
        <trans-unit id="0aa8d4b081c0f21cabda208483e50d393282d028" translate="yes" xml:space="preserve">
          <source>True if SCE is enabled, false otherwise.</source>
          <target state="translated">SCE가 활성화되어 있으면 true이고, 그렇지 않으면 false입니다.</target>
        </trans-unit>
        <trans-unit id="9974e802cce85a25ca164e8503f6d27e58b29226" translate="yes" xml:space="preserve">
          <source>True if SCE is enabled, false otherwise. If you want to set the value, you have to do it at module config time on &lt;a href=&quot;../provider/%24sceprovider&quot;&gt;$sceProvider&lt;/a&gt;.</source>
          <target state="translated">SCE가 활성화되어 있으면 true이고, 그렇지 않으면 false입니다. 값을 설정하려면 &lt;a href=&quot;../provider/%24sceprovider&quot;&gt;$ sceProvider의&lt;/a&gt; 모듈 구성 시간에 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7b26669371aa537bd9fb78e54420fba225d69357" translate="yes" xml:space="preserve">
          <source>True if all of the containing forms and controls are valid.</source>
          <target state="translated">포함하는 모든 폼과 컨트롤이 유효한 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="43aa5083507a3dfc1a3cb7fdf232cd1f4bf4e91f" translate="yes" xml:space="preserve">
          <source>True if arguments are equal.</source>
          <target state="translated">인수가 같으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="9d333018eec7b900f39b653771161777b87197ae" translate="yes" xml:space="preserve">
          <source>True if at least one containing control or form is invalid.</source>
          <target state="translated">컨트롤이나 폼을 포함하는 하나 이상이 유효하지 않은 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="181d1025fe366a64c937b96da6ec883bbf6e7ba0" translate="yes" xml:space="preserve">
          <source>True if at least one error on the control.</source>
          <target state="translated">컨트롤에 오류가 하나 이상 있으면 true입니다.</target>
        </trans-unit>
        <trans-unit id="56ff20210bccab95fcbf58367144ac067af68148" translate="yes" xml:space="preserve">
          <source>True if control has lost focus.</source>
          <target state="translated">컨트롤의 포커스가 없으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="c7fbe9ee2795fbddf37ec8d8c2d62f113e612f3b" translate="yes" xml:space="preserve">
          <source>True if control has not lost focus yet.</source>
          <target state="translated">컨트롤이 아직 포커스를 잃지 않은 경우에 해당됩니다.</target>
        </trans-unit>
        <trans-unit id="3fa62205eae963b6a217b7f9c96dcf716528f35e" translate="yes" xml:space="preserve">
          <source>True if there is no error.</source>
          <target state="translated">오류가 없으면 참입니다.</target>
        </trans-unit>
        <trans-unit id="25ffcfd59486b9a5399542b4690b410851ea2474" translate="yes" xml:space="preserve">
          <source>True if user has already interacted with the control.</source>
          <target state="translated">사용자가 이미 컨트롤과 상호 작용 한 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="dbcbfbb295b5a8ea5518852d000e90ababb1c7f2" translate="yes" xml:space="preserve">
          <source>True if user has already interacted with the form.</source>
          <target state="translated">사용자가 이미 양식과 상호 작용 한 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="29b344f09475639539f4e83c2d015aaaed0bbd1d" translate="yes" xml:space="preserve">
          <source>True if user has not interacted with the control yet.</source>
          <target state="translated">사용자가 아직 컨트롤과 상호 작용하지 않은 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="635c3755d9bde31ca73c1d749bc707a37d18b709" translate="yes" xml:space="preserve">
          <source>True if user has not interacted with the form yet.</source>
          <target state="translated">사용자가 아직 양식과 상호 작용하지 않은 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="65825ee641a9445d6459e2ab76bdc68b70985738" translate="yes" xml:space="preserve">
          <source>True if user has submitted the form even if its invalid.</source>
          <target state="translated">사용자가 유효하지 않은 양식을 제출 한 경우 true입니다.</target>
        </trans-unit>
        <trans-unit id="b88445bdd7bea1365372168f7dbf74b80d853d03" translate="yes" xml:space="preserve">
          <source>Try it here: enter text in text box and watch the greeting change.</source>
          <target state="translated">여기에 시도하십시오 : 텍스트 상자에 텍스트를 입력하고 인사말이 바뀌는 것을보십시오.</target>
        </trans-unit>
        <trans-unit id="df5a54a82b0bebef0de0f478ec3ab5b4c9f5c3ea" translate="yes" xml:space="preserve">
          <source>Try out the Live Preview above, and then let's walk through the example and describe what's going on.</source>
          <target state="translated">위의 라이브 미리보기를 시도한 다음 예제를 살펴보고 진행 상황을 설명하겠습니다.</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="5392c950bdde4be7e5f5b8fdc6a1ca5f21e905cf" translate="yes" xml:space="preserve">
          <source>Twitter</source>
          <target state="translated">Twitter</target>
        </trans-unit>
        <trans-unit id="96e344023c95f59d40b4739ed0a85a635eee1b78" translate="yes" xml:space="preserve">
          <source>Two different declaration styles are included below:</source>
          <target state="translated">두 가지 선언 스타일이 아래에 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecb76bbc89ca1321805d931b227686253a851eed" translate="yes" xml:space="preserve">
          <source>Two objects or values are considered equivalent if at least one of the following is true:</source>
          <target state="translated">다음 중 하나 이상에 해당하면 두 객체 또는 값이 동등한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="85d3dd1c7508b8b456f004ed6161495afea6f854" translate="yes" xml:space="preserve">
          <source>Two-way binding to $location</source>
          <target state="translated">$ location에 대한 양방향 바인딩</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="e80662327a53bb36ba8ecc569bceb07d8d355e87" translate="yes" xml:space="preserve">
          <source>Type components in ng</source>
          <target state="translated">ng의 유형 구성 요소</target>
        </trans-unit>
        <trans-unit id="a435bd7da8a147120f1a4b79e547e5c008143436" translate="yes" xml:space="preserve">
          <source>Type components in ngComponentRouter</source>
          <target state="translated">ngComponentRouter의 유형 구성 요소</target>
        </trans-unit>
        <trans-unit id="50a5d371f802a731c130768b7356728d742c17f8" translate="yes" xml:space="preserve">
          <source>Type components in ngMock</source>
          <target state="translated">ngMock의 유형 구성 요소</target>
        </trans-unit>
        <trans-unit id="ee3fb11d05c90c37311491cf33008925b13b487f" translate="yes" xml:space="preserve">
          <source>Type:</source>
          <target state="translated">Type:</target>
        </trans-unit>
        <trans-unit id="a37965c6d74cd91c105a5af7d17ac48c2ae2ac45" translate="yes" xml:space="preserve">
          <source>Typical usage</source>
          <target state="translated">일반적인 사용법</target>
        </trans-unit>
        <trans-unit id="c8d61bd71fa3d7cafbb7128d3d9893fb96df94a4" translate="yes" xml:space="preserve">
          <source>Typically beforeAll is used to make many assertions about a single operation. This can cut down test run-time as the test setup doesn't need to be re-run, and enabling focussed tests each with a single assertion.</source>
          <target state="translated">일반적으로 beforeAll은 단일 작업에 대해 많은 어설 션을 만드는 데 사용됩니다. 테스트 설정을 다시 실행할 필요가없고 테스트를 한 번만 수행하면 집중 테스트를 수행 할 수 있으므로 테스트 런타임을 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6f0ae9524ce6acd2d2f63e97dbf18fe3aca600b" translate="yes" xml:space="preserve">
          <source>Typically, when you create an application you need to set up the initial state for the AngularJS &lt;code&gt;$scope&lt;/code&gt;. You set up the initial state of a scope by attaching properties to the &lt;code&gt;$scope&lt;/code&gt; object. The properties contain the &lt;strong&gt;view model&lt;/strong&gt; (the model that will be presented by the view). All the &lt;code&gt;$scope&lt;/code&gt; properties will be available to the &lt;a href=&quot;templates&quot;&gt;template&lt;/a&gt; at the point in the DOM where the Controller is registered.</source>
          <target state="translated">일반적으로 애플리케이션을 작성할 때 AngularJS &lt;code&gt;$scope&lt;/code&gt; 의 초기 상태를 설정해야합니다 . &lt;code&gt;$scope&lt;/code&gt; 객체에 속성을 첨부하여 범위의 초기 상태를 설정 합니다. 속성에는 &lt;strong&gt;뷰 모델&lt;/strong&gt; ( &lt;strong&gt;뷰에서&lt;/strong&gt; 제공 할 모델)이 포함됩니다. 컨트롤러가 등록 된 DOM의 시점에서 &lt;a href=&quot;templates&quot;&gt;템플릿&lt;/a&gt; 에 모든 &lt;code&gt;$scope&lt;/code&gt; 속성을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82ca3e622f497504b13ae95ba5174ca088e4d1be" translate="yes" xml:space="preserve">
          <source>Typically, you don't use &lt;code&gt;ngBind&lt;/code&gt; directly, but instead you use the double curly markup like &lt;code&gt;{{ expression }}&lt;/code&gt; which is similar but less verbose.</source>
          <target state="translated">일반적으로 &lt;code&gt;ngBind&lt;/code&gt; 를 직접 사용 하지는 않지만 비슷하지만 덜 장황한 &lt;code&gt;{{ expression }}&lt;/code&gt; 과 같이 이중 곱슬 마크 업을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="f6a19ff69e8d695fff05426906779eaaae870446" translate="yes" xml:space="preserve">
          <source>Typically, you would call this method following each test case that asserts requests using an &quot;afterEach&quot; clause.</source>
          <target state="translated">일반적으로 &quot;afterEach&quot;절을 사용하여 요청을 주장하는 각 테스트 사례에 따라이 메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="7fdf8e24fee9641029d910c77e727fa987ff0d84" translate="yes" xml:space="preserve">
          <source>Typically, you would configure or override the &lt;a href=&quot;%24scedelegate&quot;&gt;$sceDelegate&lt;/a&gt; instead of the &lt;code&gt;$sce&lt;/code&gt; service to customize the way Strict Contextual Escaping works in AngularJS. This is because, while the &lt;code&gt;$sce&lt;/code&gt; provides numerous shorthand methods, etc., you really only need to override 3 core functions (&lt;code&gt;trustAs&lt;/code&gt;, &lt;code&gt;getTrusted&lt;/code&gt; and &lt;code&gt;valueOf&lt;/code&gt;) to replace the way things work because &lt;code&gt;$sce&lt;/code&gt; delegates to &lt;code&gt;$sceDelegate&lt;/code&gt; for these operations.</source>
          <target state="translated">일반적으로 &lt;code&gt;$sce&lt;/code&gt; 서비스 대신 &lt;a href=&quot;%24scedelegate&quot;&gt;$ sceDelegate&lt;/a&gt; 를 구성하거나 무시하여 AngularJS에서 엄격한 컨텍스트 이스케이프 작동 방식을 사용자 정의합니다. 이것은 &lt;code&gt;$sce&lt;/code&gt; 가 수많은 속기 메소드 등을 제공 하지만 $ sce 가 이러한 작업 을 위해 &lt;code&gt;$sceDelegate&lt;/code&gt; 에 위임하기 때문에 3 가지 핵심 함수 ( &lt;code&gt;trustAs&lt;/code&gt; , &lt;code&gt;getTrusted&lt;/code&gt; 및 &lt;code&gt;valueOf&lt;/code&gt; )를 대체하여 작동 방식을 대체하기 만하면 되기 때문 &lt;code&gt;$sce&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4949e7b471c62f07ef5e8f49abbfc90b2fcee84d" translate="yes" xml:space="preserve">
          <source>URL format</source>
          <target state="translated">URL 형식</target>
        </trans-unit>
        <trans-unit id="e18613f7569df4e87d46ab0c50bd2f0aa9fd3721" translate="yes" xml:space="preserve">
          <source>URL of content to load.</source>
          <target state="translated">로드 할 콘텐츠의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="30e531717661ab3417ebc4cbe0c1de475ab6be26" translate="yes" xml:space="preserve">
          <source>URL of the request.</source>
          <target state="translated">요청의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="d7bbc289db7f0b0052507421a9bcb3e65c45c45e" translate="yes" xml:space="preserve">
          <source>URL that was before it was changed.</source>
          <target state="translated">변경되기 전의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="218f37ac7c7d3d4188879070d19d295a2d90c29a" translate="yes" xml:space="preserve">
          <source>Under the hood</source>
          <target state="translated">후드</target>
        </trans-unit>
        <trans-unit id="443978f12d579b038c008dea8e752b5d3e01d6d0" translate="yes" xml:space="preserve">
          <source>Understanding How Scopes Work with Transcluded Directives</source>
          <target state="translated">범위가 포함 된 지시문과 작동하는 방식 이해</target>
        </trans-unit>
        <trans-unit id="b476afa4e9575435e81ebe1e34e1ccc258d54e8e" translate="yes" xml:space="preserve">
          <source>Understanding Scopes</source>
          <target state="translated">범위 이해</target>
        </trans-unit>
        <trans-unit id="3aea8612a3778098d091872872cceefb5e6bd7de" translate="yes" xml:space="preserve">
          <source>Understanding View</source>
          <target state="translated">보기 이해</target>
        </trans-unit>
        <trans-unit id="629ffb1444dbbb1b0dac1c29021a48b25b040df3" translate="yes" xml:space="preserve">
          <source>Unique scope ID (monotonically increasing) useful for debugging.</source>
          <target state="translated">디버깅에 유용한 고유 범위 ID (단일 증가).</target>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="translated">단위 테스트</target>
        </trans-unit>
        <trans-unit id="3b563841706d01128f360a08ae70337b23f59c44" translate="yes" xml:space="preserve">
          <source>Unit testing with mock $httpBackend</source>
          <target state="translated">모의 $ httpBackend로 단위 테스트</target>
        </trans-unit>
        <trans-unit id="03f9dd1dbb0519b8fb0d50867eeaf9173813a3e3" translate="yes" xml:space="preserve">
          <source>Unit testing, as the name implies, is about testing individual units of code. Unit tests try to answer questions such as &quot;Did I think about the logic correctly?&quot; or &quot;Does the sort function order the list in the right order?&quot;</source>
          <target state="translated">단위 테스트는 이름에서 알 수 있듯이 개별 코드 단위를 테스트하는 것입니다. 단위 테스트는 &quot;논리에 대해 올바르게 생각 했습니까?&quot;와 같은 질문에 답하려고합니다. 또는 &quot;정렬 기능이 목록을 올바른 순서로 정렬합니까?&quot;</target>
        </trans-unit>
        <trans-unit id="57c368e336d005ba762d838d65c9d99e26f84dac" translate="yes" xml:space="preserve">
          <source>Unit tests only have to load relevant modules, which keeps them fast.</source>
          <target state="translated">단위 테스트는 관련 모듈 만로드하면되므로 속도가 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="3fb4e286e502a759b76367b0dba26a4db6774e6a" translate="yes" xml:space="preserve">
          <source>Unit-testing Component Controllers</source>
          <target state="translated">단위 테스트 구성 요소 컨트롤러</target>
        </trans-unit>
        <trans-unit id="c532fb030d4057cff1a4adcec6eb4756fc91ef75" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;angular.extend&quot;&gt;extend()&lt;/a&gt;, &lt;code&gt;merge()&lt;/code&gt; recursively descends into object properties of source objects, performing a deep copy.</source>
          <target state="translated">달리 &lt;a href=&quot;angular.extend&quot;&gt;확장 ()&lt;/a&gt; , &lt;code&gt;merge()&lt;/code&gt; 재귀 전체 복사본을 수행 소스 객체의 객체 속성에 가져갈.</target>
        </trans-unit>
        <trans-unit id="c99e4d44f0c339bd48a75c15f4c96bd079f56c71" translate="yes" xml:space="preserve">
          <source>Unlike ES262's &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18&quot;&gt;Array.prototype.forEach&lt;/a&gt;, providing 'undefined' or 'null' values for &lt;code&gt;obj&lt;/code&gt; will not throw a TypeError, but rather just return the value provided.</source>
          <target state="translated">ES262의 달리 &lt;a href=&quot;http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18&quot;&gt;Array.prototype.forEach&lt;/a&gt; 제공하는 '정의되지 않은'나에 대한 '널 (null)'값 &lt;code&gt;obj&lt;/code&gt; TypeError가 던져 아니라 방금 입력 한 값을 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="209c8097836b9258765844c6a5792b2eb42a2408" translate="yes" xml:space="preserve">
          <source>Unlike services, there can be many instances of the same type of controller in an application.</source>
          <target state="translated">서비스와 달리 응용 프로그램에는 동일한 유형의 컨트롤러 인스턴스가 많이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41ae88da458d1d682765ae9e4d1fc2981948283c" translate="yes" xml:space="preserve">
          <source>Unlike simple values, object-literals are watched until every key is defined. See &lt;a href=&quot;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm&quot;&gt;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm&lt;/a&gt;</source>
          <target state="translated">단순한 값과 달리, 모든 키가 정의 될 때까지 객체 리터럴이 감시됩니다. &lt;a href=&quot;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm&quot;&gt;http://www.bennadel.com/blog/2760-one-time-data-bindings-for-object-literal-expressions-in-angularjs-1-3.htm을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="73ae224e8735ac30c004ffdc6115aecdf9718361" translate="yes" xml:space="preserve">
          <source>Up until AngularJS 1.3, &lt;code&gt;$cookies&lt;/code&gt; exposed properties that represented the current browser cookie values. In version 1.4, this behavior has changed, and &lt;code&gt;$cookies&lt;/code&gt; now provides a standard api of getters, setters etc.</source>
          <target state="translated">AngularJS 1.3까지 &lt;code&gt;$cookies&lt;/code&gt; 는 현재 브라우저 쿠키 값을 나타내는 속성을 노출했습니다. 버전 1.4에서는이 동작이 변경되었으며 &lt;code&gt;$cookies&lt;/code&gt; 이제 getter, setter 등의 표준 API를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6a24966329bd38080b15cb29a9d8d9bbe7a67aba" translate="yes" xml:space="preserve">
          <source>Update the view value.</source>
          <target state="translated">보기 값을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="48d94c781db18d8b60bf067bb589536cbf58bd78" translate="yes" xml:space="preserve">
          <source>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in &lt;code&gt;ng-model-options&lt;/code&gt;. This method is rarely needed as &lt;code&gt;NgModelController&lt;/code&gt; usually handles calling this in response to input events.</source>
          <target state="translated">디 바운스 된 이벤트에 의해 또는 입력이 &lt;code&gt;ng-model-options&lt;/code&gt; 에 정의 된 일부 미래 이벤트를 기다리는 중이므로 업데이트가 보류 중일 수 있습니다 . &lt;code&gt;NgModelController&lt;/code&gt; 는 일반적으로 입력 이벤트에 대한 응답으로 이것을 호출하기 때문에이 메소드는 거의 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a5ece24f05232383c973b3dcd8d5ec955602e4f9" translate="yes" xml:space="preserve">
          <source>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in &lt;code&gt;ng-model-options&lt;/code&gt;. This method is typically needed by the reset button of a form that uses &lt;code&gt;ng-model-options&lt;/code&gt; to pend updates.</source>
          <target state="translated">디 바운스 된 이벤트에 의해 또는 입력이 &lt;code&gt;ng-model-options&lt;/code&gt; 에 정의 된 일부 미래 이벤트를 기다리는 중이므로 업데이트가 보류 중일 수 있습니다 . 이 방법은 일반적으로 &lt;code&gt;ng-model-options&lt;/code&gt; 를 사용하여 업데이트를 보류 하는 양식의 재설정 단추에 필요 합니다.</target>
        </trans-unit>
        <trans-unit id="c32c26b09b60884932de0735cac06908d3f7ccf0" translate="yes" xml:space="preserve">
          <source>Updates may be pending by a debounced event or because the input is waiting for a some future event defined in &lt;code&gt;ng-model-options&lt;/code&gt;. this method is rarely needed as &lt;code&gt;NgModelController&lt;/code&gt; usually handles calling this in response to input events.</source>
          <target state="translated">디 바운스 된 이벤트에 의해 또는 입력이 &lt;code&gt;ng-model-options&lt;/code&gt; 에 정의 된 일부 미래 이벤트를 기다리는 중이므로 업데이트가 보류 중일 수 있습니다 . &lt;code&gt;NgModelController&lt;/code&gt; 는 일반적으로 입력 이벤트에 대한 응답으로 이것을 호출하기 때문에이 메소드는 거의 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="e78c2b095e755aab9f8caa006dd4fd278929ad41" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;%24interval#flush.html&quot;&gt;&lt;code&gt;$interval.flush(millis)&lt;/code&gt;&lt;/a&gt; to move forward by &lt;code&gt;millis&lt;/code&gt; milliseconds and trigger any functions scheduled to run in that time.</source>
          <target state="translated">&lt;a href=&quot;%24interval#flush.html&quot;&gt; &lt;code&gt;$interval.flush(millis)&lt;/code&gt; &lt;/a&gt; 를 사용 하여 &lt;code&gt;millis&lt;/code&gt; 초 단위 로 앞으로 이동 하고 해당 시간에 실행되도록 예약 된 기능을 트리거하십시오.</target>
        </trans-unit>
        <trans-unit id="9d10cf3ebaf3f699b7cd183a40113d2096935796" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../provider/%24interpolateprovider#endSymbol.html&quot;&gt;&lt;code&gt;$interpolateProvider.endSymbol&lt;/code&gt;&lt;/a&gt; to change the symbol.</source>
          <target state="translated">사용 &lt;a href=&quot;../provider/%24interpolateprovider#endSymbol.html&quot;&gt; &lt;code&gt;$interpolateProvider.endSymbol&lt;/code&gt; &lt;/a&gt; 기호를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="d014a1c84c0cea27fad3b0edad9bcbb55cee2222" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../provider/%24interpolateprovider#startSymbol.html&quot;&gt;&lt;code&gt;$interpolateProvider.startSymbol&lt;/code&gt;&lt;/a&gt; to change the symbol.</source>
          <target state="translated">사용 &lt;a href=&quot;../provider/%24interpolateprovider#startSymbol.html&quot;&gt; &lt;code&gt;$interpolateProvider.startSymbol&lt;/code&gt; &lt;/a&gt; 기호를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="6a641c4af45db61a4d45240e4bc451c61620dd29" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ngswitch&quot;&gt;&lt;code&gt;ngSwitch&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt; 대신 &lt;a href=&quot;ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;ngswitch&quot;&gt; &lt;code&gt;ngSwitch&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="218b05a9d83c943a410d416413419b99ab64cf02" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$anchorScrollProvider&lt;/code&gt; to disable automatic scrolling whenever &lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; changes.</source>
          <target state="translated">&lt;a href=&quot;../service/%24location#hash.html&quot;&gt;$ location.hash ()가&lt;/a&gt; 변경 될 때마다 자동 스크롤을 비활성화 하려면 &lt;code&gt;$anchorScrollProvider&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b968b0787da9eecc71135a165258514b44ef0734" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$anchorScrollProvider&lt;/code&gt; to disable automatic scrolling whenever &lt;a href=&quot;service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt; changes.</source>
          <target state="translated">&lt;a href=&quot;service/%24location#hash.html&quot;&gt;$ location.hash ()가&lt;/a&gt; 변경 될 때마다 자동 스크롤을 비활성화 하려면 &lt;code&gt;$anchorScrollProvider&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="354512147e4e601cc546a9ec65841a61f9421903" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$cookiesProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;../service/%24cookies&quot;&gt;$cookies&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$cookiesProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;../service/%24cookies&quot;&gt;$ cookies&lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="a148f7331f736ce00c51361a431bda51bee1ed1d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$cookiesProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt;$cookies&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$cookiesProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;ngcookies/service/%24cookies&quot;&gt;$ cookies&lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef936e3e20232f9a1650cc302f357cad6c4156ca" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$cookiesProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;service/%24cookies&quot;&gt;$cookies&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$cookiesProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;service/%24cookies&quot;&gt;$ cookies&lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="15fb01e25077c75bad5d011e5094bc75c8f3d896" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$httpProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;../service/%24http&quot;&gt;$http&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;../service/%24http&quot;&gt;$ http&lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="687465cea5c0906f2e3249d57fd88fb9d657fefe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$httpProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;service/%24http&quot;&gt;$http&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$httpProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;service/%24http&quot;&gt;$ http&lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="2392b2da1088beefbc29590ab2eda9ddba143d0a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$resourceProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;../service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;../service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="b88771011fc3cd5358447dc36675101538ddffcf" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$resourceProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;ngresource/service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;ngresource/service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ca460ac7b4debf1921b9d34cfa7a7f3a1ebd02a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;$resourceProvider&lt;/code&gt; to change the default behavior of the &lt;a href=&quot;service/%24resource&quot;&gt;&lt;code&gt;$resource&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;$resourceProvider&lt;/code&gt; 를 사용 하여 &lt;a href=&quot;service/%24resource&quot;&gt; &lt;code&gt;$resource&lt;/code&gt; &lt;/a&gt; 서비스 의 기본 동작을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc1ec7cfcbd0280881371f3aa4ee3069843966fe" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ng-class=&quot;{'ng-hide': expression}&lt;/code&gt; instead of instead of &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;code&gt;ng-class=&quot;{'ng-hide': expression}&lt;/code&gt; 대신 대신 &lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="252932316ac080237bfbd49d94e69b42c8202774" translate="yes" xml:space="preserve">
          <source>Use controllers to:</source>
          <target state="translated">컨트롤러를 사용하여 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="ec78e24bb1beaec2fff0a05e747e3a518fdbd042" translate="yes" xml:space="preserve">
          <source>Use sharedInjector when you want to take advantage of Jasmine's &lt;code&gt;beforeAll()&lt;/code&gt;, or mocha's &lt;code&gt;before()&lt;/code&gt; methods. Call &lt;code&gt;module.sharedInjector()&lt;/code&gt; before you setup any other hooks that will create (i.e call &lt;code&gt;module()&lt;/code&gt;) or use (i.e call &lt;code&gt;inject()&lt;/code&gt;) the injector.</source>
          <target state="translated">Jasmine의 &lt;code&gt;beforeAll()&lt;/code&gt; 또는 mocha의 &lt;code&gt;before()&lt;/code&gt; 메소드를 활용하려면 sharedInjector를 사용하십시오 . 전화 &lt;code&gt;module.sharedInjector()&lt;/code&gt; 이 설정 (즉, 호출이 생성됩니다 다른 후크 전에 &lt;code&gt;module()&lt;/code&gt; ) 또는 사용 (예 : 콜 &lt;code&gt;inject()&lt;/code&gt; ) 인젝터를.</target>
        </trans-unit>
        <trans-unit id="eb362d3d265854877b73c2022104238b8f662f3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$locationProvider&lt;/code&gt; to configure how the application deep linking paths are stored.</source>
          <target state="translated">&lt;code&gt;$locationProvider&lt;/code&gt; 를 사용하여 응용 프로그램 딥 링크 경로가 저장되는 방법을 구성 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7a7084daedcbcf3cf58f8478d3a4ef6d9e3042e1" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;$logProvider&lt;/code&gt; to configure how the application logs messages</source>
          <target state="translated">&lt;code&gt;$logProvider&lt;/code&gt; 를 사용하여 응용 프로그램이 메시지를 기록하는 방법을 구성 하십시오.</target>
        </trans-unit>
        <trans-unit id="359920a71e60b24c3e8679f4d1142b9de40dfe80" translate="yes" xml:space="preserve">
          <source>Use the latest AngularJS possible</source>
          <target state="translated">최신 AngularJS를 사용하십시오</target>
        </trans-unit>
        <trans-unit id="9d4a7cc07d13aee2118147eae5b6204e02526bb6" translate="yes" xml:space="preserve">
          <source>Use the special CSS selector &lt;code&gt;ng-hide.ng-hide-animate&lt;/code&gt; to set &lt;code&gt;{display: none}&lt;/code&gt; or similar on the affected elements.</source>
          <target state="translated">특수 CSS 선택기 &lt;code&gt;ng-hide.ng-hide-animate&lt;/code&gt; 를 사용 하여 영향을받는 요소에 &lt;code&gt;{display: none}&lt;/code&gt; 또는 이와 유사한 것을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="01b6831d8484c409e8aabc8e2f585a365a461d33" translate="yes" xml:space="preserve">
          <source>Use this directive to &lt;strong&gt;auto-bootstrap&lt;/strong&gt; an AngularJS application. The &lt;code&gt;ngApp&lt;/code&gt; directive designates the &lt;strong&gt;root element&lt;/strong&gt; of the application and is typically placed near the root element of the page - e.g. on the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tags.</source>
          <target state="translated">AngularJS 애플리케이션 을 &lt;strong&gt;자동 부트 스트랩&lt;/strong&gt; 하려면이 지정 문을 사용하십시오 . &lt;code&gt;ngApp&lt;/code&gt; 의 지시어는 지정 &lt;strong&gt;루트 요소&lt;/strong&gt; 예를에 - 응용 프로그램을 일반적으로 페이지의 루트 요소 근처에 배치되어 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 태그입니다.</target>
        </trans-unit>
        <trans-unit id="cffba56063404188829cf8f1f82edf386bbc1e59" translate="yes" xml:space="preserve">
          <source>Use this directive to force the angular.element library. This should be used to force either jqLite by leaving ng-jq blank or setting the name of the jquery variable under window (eg. jQuery).</source>
          <target state="translated">이 지시문을 사용하여 angular.element 라이브러리를 강제 실행하십시오. 이것은 ng-jq를 비워 두거나 창 아래에 jquery 변수의 이름을 설정하여 jqLite를 강제 실행하는 데 사용해야합니다 (예 : jQuery).</target>
        </trans-unit>
        <trans-unit id="294fecfb6e5d5ea18318309468bfa41aee69ee2b" translate="yes" xml:space="preserve">
          <source>Use this function to manually start up AngularJS application.</source>
          <target state="translated">AngularJS 애플리케이션을 수동으로 시작하려면이 기능을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="c6f82f5bd67956f87473eb69dd807927f89430cf" translate="yes" xml:space="preserve">
          <source>Use this function to reload the current application with debug information turned on. This takes precedence over a call to &lt;code&gt;$compileProvider.debugInfoEnabled(false)&lt;/code&gt;.</source>
          <target state="translated">이 기능을 사용하여 디버그 정보가 설정된 상태에서 현재 응용 프로그램을 다시로드하십시오. 이것은 &lt;code&gt;$compileProvider.debugInfoEnabled(false)&lt;/code&gt; 호출보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="d5a771a46afd23a79112854e27f186a09e2c9ba1" translate="yes" xml:space="preserve">
          <source>Use this method to configure services by injecting their &lt;a href=&quot;angular.module#provider.html&quot;&gt;&lt;code&gt;providers&lt;/code&gt;&lt;/a&gt;, e.g. for adding routes to the &lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt;.</source>
          <target state="translated">예를 들어 &lt;a href=&quot;../../ngroute/provider/%24routeprovider&quot;&gt;$ routeProvider에&lt;/a&gt; 경로를 추가하기 위해 &lt;a href=&quot;angular.module#provider.html&quot;&gt; &lt;code&gt;providers&lt;/code&gt; &lt;/a&gt; 를 주입하여 서비스를 구성하려면이 방법을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="94c8a5728df153aa8ef0f96f8c05e84b03dfd3da" translate="yes" xml:space="preserve">
          <source>Use this method to disable automatic scrolling.</source>
          <target state="translated">이 방법을 사용하여 자동 스크롤을 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="b46c8e2625e9d1d564150470d764ef83f44ed6cd" translate="yes" xml:space="preserve">
          <source>Use this method to register work which should be performed when the injector is done loading all modules.</source>
          <target state="translated">인젝터가 모든 모듈의 로딩을 완료했을 때 수행해야하는 작업을 등록하려면이 방법을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e2c9ca4a68dc2a6884892d41b5a73fcdd5783521" translate="yes" xml:space="preserve">
          <source>Used for configuring routes.</source>
          <target state="translated">경로를 구성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e20f817510e56e9b96cac2070c3e22126811c3b" translate="yes" xml:space="preserve">
          <source>Used for configuring the ARIA attributes injected and managed by ngAria.</source>
          <target state="translated">ngAria가 주입하고 관리하는 ARIA 속성을 구성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="655c8e5a053e43f0c11ecfabef9bcc1912abfe26" translate="yes" xml:space="preserve">
          <source>Used for configuring the interpolation markup. Defaults to &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">보간 마크 업을 구성하는 데 사용됩니다. 기본값은 &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1fb44e414995a58ae7d8e047aff02bcff4d56e5c" translate="yes" xml:space="preserve">
          <source>Used to configure the options passed to the &lt;a href=&quot;../service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; service when making a template request.</source>
          <target state="translated">템플릿 요청을 할 때 &lt;a href=&quot;../service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 서비스에 전달 된 옵션을 구성하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e98fe6396bfb3427cbaf00c58b5487eb76c4659a" translate="yes" xml:space="preserve">
          <source>Used to configure the options passed to the &lt;a href=&quot;service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; service when making a template request.</source>
          <target state="translated">템플릿 요청을 할 때 &lt;a href=&quot;service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 서비스에 전달 된 옵션을 구성하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="1992cf3bd475bebb63dff75def762449cd8f0921" translate="yes" xml:space="preserve">
          <source>Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This function can be called in four ways:</source>
          <target state="translated">전체 응용 프로그램이나 요소 및 해당 자식에서 애니메이션을 사용할지 여부를 가져오고 설정하는 데 사용됩니다. 이 함수는 다음 네 가지 방법으로 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="77ca86ada0f9252bb106a6e6efdbff01c4a20438" translate="yes" xml:space="preserve">
          <source>Using $animate in your directive code</source>
          <target state="translated">지시문 코드에서 $ animate 사용</target>
        </trans-unit>
        <trans-unit id="613a81888b42fb0d4ca5df60f2f42af801bb1b12" translate="yes" xml:space="preserve">
          <source>Using $location</source>
          <target state="translated">$ location 사용</target>
        </trans-unit>
        <trans-unit id="27c0cbbddba59723567250ee8aaf043d300dad88" translate="yes" xml:space="preserve">
          <source>Using $location outside of the scope life-cycle</source>
          <target state="translated">스코프 수명주기 외부에서 $ location 사용</target>
        </trans-unit>
        <trans-unit id="29169efc69847444ce3da0120339548bb93f2578" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../api/ngaria&quot;&gt;ngAria&lt;/a&gt; is as simple as requiring the ngAria module in your application. ngAria hooks into standard AngularJS directives and quietly injects accessibility support into your application at runtime.</source>
          <target state="translated">&lt;a href=&quot;../api/ngaria&quot;&gt;ngAria를&lt;/a&gt; 사용 하는 것은 어플리케이션에 ngAria 모듈을 요구하는 것만 큼 간단합니다. ngAria는 표준 AngularJS 지시문에 연결하고 런타임시 애플리케이션에 접근성 지원을 자동으로 주입합니다.</target>
        </trans-unit>
        <trans-unit id="187503b822cc41efce6fddb7ffa2ed2aec83c324" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;controller as&lt;/code&gt; makes it obvious which controller you are accessing in the template when multiple controllers apply to an element.</source>
          <target state="translated">&lt;code&gt;controller as&lt;/code&gt; 사용 하면 여러 컨트롤러가 요소에 적용될 때 템플릿에서 어떤 컨트롤러에 액세스하고 있는지 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75fa788af800c949aecf96d72fda73c3d6a4da58" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ngStrictDi&lt;/code&gt;, you would see something like this:</source>
          <target state="translated">&lt;code&gt;ngStrictDi&lt;/code&gt; 를 사용하면 다음과 같은 것을 볼 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="618b214c025a81d4cdc55abe11cf88128651105c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;select&lt;/code&gt;&lt;strong&gt;&lt;code&gt;as&lt;/code&gt;&lt;/strong&gt; will bind the result of the &lt;code&gt;select&lt;/code&gt; expression to the model, but the value of the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; html elements will be either the index (for array data sources) or property name (for object data sources) of the value within the collection. If a &lt;strong&gt;&lt;code&gt;track by&lt;/code&gt;&lt;/strong&gt; expression is used, the result of that expression will be set as the value of the &lt;code&gt;option&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; &lt;strong&gt; &lt;code&gt;as&lt;/code&gt; &lt;/strong&gt; 를 사용 하면 &lt;code&gt;select&lt;/code&gt; 표현식 의 결과가 모델에 바인딩 되지만 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; html 요소 의 값은 인덱스 (배열 데이터 소스의 경우) 또는 속성 이름 (객체 데이터 소스의 경우)이됩니다. 컬렉션 내의 값 식별 &lt;strong&gt; &lt;code&gt;track by&lt;/code&gt; &lt;/strong&gt; 사용하는 경우 해당 식의 결과는 &lt;code&gt;option&lt;/code&gt; 및 &lt;code&gt;select&lt;/code&gt; 요소 의 값으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b48a3f6a40b09344260d8ec7bc24924a4a77ab6a" translate="yes" xml:space="preserve">
          <source>Using ARIA in HTML</source>
          <target state="translated">HTML에서 ARIA 사용</target>
        </trans-unit>
        <trans-unit id="c4171cbd1d6f3ea14fcb721dacfb4707975d43ea" translate="yes" xml:space="preserve">
          <source>Using AngularJS markup like &lt;code&gt;{{hash}}&lt;/code&gt; in a &lt;code&gt;src&lt;/code&gt; attribute doesn't work right: The browser will fetch from the URL with the literal text &lt;code&gt;{{hash}}&lt;/code&gt; until AngularJS replaces the expression inside &lt;code&gt;{{hash}}&lt;/code&gt;. The &lt;code&gt;ngSrc&lt;/code&gt; directive solves this problem.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 속성 에서 &lt;code&gt;{{hash}}&lt;/code&gt; 와 같은 AngularJS 마크 업을 사용 하는 것은 제대로 작동하지 않습니다. AngularJS가 &lt;code&gt;{{hash}}&lt;/code&gt; 내부의 표현식을 대체 할 때까지 브라우저는 리터럴 텍스트 &lt;code&gt;{{hash}}&lt;/code&gt; 로 URL에서 가져옵니다 . &lt;code&gt;ngSrc&lt;/code&gt; 의 지시어는이 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="1544e2d4e4ae1fb37109d1352ffdb29d3bc70e81" translate="yes" xml:space="preserve">
          <source>Using AngularJS markup like &lt;code&gt;{{hash}}&lt;/code&gt; in a &lt;code&gt;srcset&lt;/code&gt; attribute doesn't work right: The browser will fetch from the URL with the literal text &lt;code&gt;{{hash}}&lt;/code&gt; until AngularJS replaces the expression inside &lt;code&gt;{{hash}}&lt;/code&gt;. The &lt;code&gt;ngSrcset&lt;/code&gt; directive solves this problem.</source>
          <target state="translated">&lt;code&gt;srcset&lt;/code&gt; 속성 에서 &lt;code&gt;{{hash}}&lt;/code&gt; 와 같은 AngularJS 마크 업을 사용하면 제대로 작동하지 않습니다. AngularJS가 &lt;code&gt;{{hash}}&lt;/code&gt; 내부의 표현식을 대체 할 때까지 브라우저는 리터럴 텍스트 &lt;code&gt;{{hash}}&lt;/code&gt; 로 URL에서 가져옵니다 . &lt;code&gt;ngSrcset&lt;/code&gt; 의 지시어는이 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="1c81f10b2e8d7a29e274525eca136b9b2754c57d" translate="yes" xml:space="preserve">
          <source>Using AngularJS markup like &lt;code&gt;{{hash}}&lt;/code&gt; in an href attribute will make the link go to the wrong URL if the user clicks it before AngularJS has a chance to replace the &lt;code&gt;{{hash}}&lt;/code&gt; markup with its value. Until AngularJS replaces the markup the link will be broken and will most likely return a 404 error. The &lt;code&gt;ngHref&lt;/code&gt; directive solves this problem.</source>
          <target state="translated">href 속성에 &lt;code&gt;{{hash}}&lt;/code&gt; 와 같은 AngularJS 마크 업을 사용하면 AngularJS 가 &lt;code&gt;{{hash}}&lt;/code&gt; 마크 업을 해당 값 으로 대체하기 전에 사용자가 링크를 클릭하면 링크가 잘못된 URL로 이동 합니다. AngularJS가 마크 업을 교체 할 때까지 링크가 끊어지고 404 오류가 발생합니다. &lt;code&gt;ngHref&lt;/code&gt; 의 지시어는이 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="26651671e648d817c38c64754ab40d68a2c9123a" translate="yes" xml:space="preserve">
          <source>Using CSS classes</source>
          <target state="translated">CSS 클래스 사용</target>
        </trans-unit>
        <trans-unit id="22c59955943e9707b80f15aec8a1b0a32409db33" translate="yes" xml:space="preserve">
          <source>Using Dependency Injection</source>
          <target state="translated">의존성 주입 사용</target>
        </trans-unit>
        <trans-unit id="3f12d56b74c2eb2c6b5988dda7a6704cc676d3d4" translate="yes" xml:space="preserve">
          <source>Using Factory recipes, you can also define AngularJS's filters and animations, but the controllers are a bit special. You create a controller as a custom type that declares its dependencies as arguments for its constructor function. This constructor is then registered with a module. Let's take a look at the &lt;code&gt;DemoController&lt;/code&gt;, created in one of the early examples:</source>
          <target state="translated">Factory 레시피를 사용하여 AngularJS의 필터와 애니메이션을 정의 할 수도 있지만 컨트롤러는 약간 특별합니다. 컨트롤러를 생성자 함수의 인수로 선언하는 컨트롤러를 커스텀 타입으로 생성합니다. 그런 다음이 생성자는 모듈에 등록됩니다. 초기 예제 중 하나에서 생성 된 &lt;code&gt;DemoController&lt;/code&gt; 를 살펴 보자 .</target>
        </trans-unit>
        <trans-unit id="142274a4bb4939c13a749da4226dd8927425fd22" translate="yes" xml:space="preserve">
          <source>Using Local Caches</source>
          <target state="translated">로컬 캐시 사용</target>
        </trans-unit>
        <trans-unit id="e8729bc93021a2e5283ed88952093ee0c9a0a8f3" translate="yes" xml:space="preserve">
          <source>Using Protractor</source>
          <target state="translated">각도기 사용</target>
        </trans-unit>
        <trans-unit id="cf6f695a6a43d5695aeb78a9aefcac36d5324914" translate="yes" xml:space="preserve">
          <source>Using Strict Dependency Injection</source>
          <target state="translated">엄격한 의존성 주입 사용</target>
        </trans-unit>
        <trans-unit id="9e041c266624208fa4e65afd24d87690238c5434" translate="yes" xml:space="preserve">
          <source>Using a Service</source>
          <target state="translated">서비스 사용</target>
        </trans-unit>
        <trans-unit id="1870160824edb5f5d781284d76bb684b36c8a3ae" translate="yes" xml:space="preserve">
          <source>Using a custom comparator</source>
          <target state="translated">커스텀 비교기 사용</target>
        </trans-unit>
        <trans-unit id="1513de7002759ec420dfa96ea93dd443a199efcb" translate="yes" xml:space="preserve">
          <source>Using an element for the &lt;code&gt;myCustomer&lt;/code&gt; directive is clearly the right choice because you're not decorating an element with some &quot;customer&quot; behavior; you're defining the core behavior of the element as a customer component.</source>
          <target state="translated">&quot;고객&quot;동작 으로 요소를 &lt;code&gt;myCustomer&lt;/code&gt; 않기 때문에 myCustomer 지시문에 요소를 사용하는 것이 분명히 올바른 선택입니다. 요소의 핵심 동작을 고객 구성 요소로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="0b7f582cdde801c5eb7ccd1f5f093fd2b744221d" translate="yes" xml:space="preserve">
          <source>Using beforeAll()</source>
          <target state="translated">beforeAll () 사용</target>
        </trans-unit>
        <trans-unit id="3bf81a946b8d6c54f33bc47f1e13b86d15e48e46" translate="yes" xml:space="preserve">
          <source>Using filters in controllers, services, and directives</source>
          <target state="translated">컨트롤러, 서비스 및 지시문에서 필터 사용</target>
        </trans-unit>
        <trans-unit id="e5733313ce1e48569bbeb7efa880f179d91eb616" translate="yes" xml:space="preserve">
          <source>Using filters in view templates</source>
          <target state="translated">뷰 템플릿에서 필터 사용</target>
        </trans-unit>
        <trans-unit id="77968546fbbe30427c877e1f02f60fd695c65843" translate="yes" xml:space="preserve">
          <source>Using interceptors</source>
          <target state="translated">인터셉터 사용</target>
        </trans-unit>
        <trans-unit id="ebf3d55846a7cd7f43e5f8cb0e431673ff8d2495" translate="yes" xml:space="preserve">
          <source>Using ngAria</source>
          <target state="translated">ngAria 사용</target>
        </trans-unit>
        <trans-unit id="0f90dda5b5582c6398d02b0a5b0ebe328da00024" translate="yes" xml:space="preserve">
          <source>Using ngDisabled with ngAria:</source>
          <target state="translated">ngAria와 함께 ngDisabled 사용 :</target>
        </trans-unit>
        <trans-unit id="1937d07736980fa1e1cf14044c2d1eaa38088d68" translate="yes" xml:space="preserve">
          <source>Using ngRepeat to generate select options</source>
          <target state="translated">ngRepeat를 사용하여 선택 옵션 생성</target>
        </trans-unit>
        <trans-unit id="5f900837ceda875bf4c544ccac4d6058c4d6e857" translate="yes" xml:space="preserve">
          <source>Using ngValue to bind the model to an array of objects</source>
          <target state="translated">ngValue를 사용하여 모델을 객체 배열에 바인딩</target>
        </trans-unit>
        <trans-unit id="175501655ff7f1694fc035936c74e9c893e388e0" translate="yes" xml:space="preserve">
          <source>Using orderBy inside a controller</source>
          <target state="translated">컨트롤러 내부에서 orderBy 사용</target>
        </trans-unit>
        <trans-unit id="e38d72e573ba15e9d4f27541cef1ca49dafb855c" translate="yes" xml:space="preserve">
          <source>Using select with ngOptions and setting a default value</source>
          <target state="translated">ngOptions와 함께 select 사용 및 기본값 설정</target>
        </trans-unit>
        <trans-unit id="0726f73ae0c0e6e634886be4cf9fd3ceb9cfeaff" translate="yes" xml:space="preserve">
          <source>Using strict di mode in your production application will throw errors when an injectable function is not &lt;a href=&quot;di#dependency-annotation.html&quot;&gt;annotated explicitly&lt;/a&gt;. Strict di mode is intended to help you make sure that your code will work when minified. However, it also will force you to make sure that your injectable functions are explicitly annotated which will improve angular's performance when injecting dependencies in your injectable functions because it doesn't have to dynamically discover a function's dependencies. It is recommended to automate the explicit annotation via a tool like &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; when you deploy to production (and enable strict di mode)</source>
          <target state="translated">프로덕션 응용 프로그램에서 엄격한 di 모드를 사용하면 주입 가능한 함수에 &lt;a href=&quot;di#dependency-annotation.html&quot;&gt;명시 적으로 주석을 달지&lt;/a&gt; 않은 경우 오류가 발생합니다 . 엄격 모드는 코드가 축소 될 때 작동하도록하기위한 것입니다. 그러나 또한 주입 가능 함수에 명시 적으로 주석을 달아 주입 가능 함수에 의존성을 주입 할 때 각도의 성능을 향상시켜 함수의 종속성을 동적으로 발견 할 필요가 없기 때문에 강제로 주석을 달아야합니다. 프로덕션에 배포 할 때 &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; 와 같은 도구를 통해 명시 적 주석을 자동화하고 엄격한 di 모드를 활성화 하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9c094e712cb148afcafcaaa4238f6b76abc53b26" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;$inject&lt;/code&gt; property annotation</source>
          <target state="translated">은 Using &lt;code&gt;$inject&lt;/code&gt; 속성 주석을</target>
        </trans-unit>
        <trans-unit id="cc139db8875164b29e6054bd8d872efa13f3e432" translate="yes" xml:space="preserve">
          <source>Using the inline array annotation (preferred)</source>
          <target state="translated">인라인 배열 주석 사용 (권장)</target>
        </trans-unit>
        <trans-unit id="a32ba4858e6ecdf40bb878f10445086068b003aa" translate="yes" xml:space="preserve">
          <source>Using this mode requires URL rewriting on server side, basically you have to rewrite all your links to entry point of your application (e.g. index.html). Requiring a &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag is also important for this case, as it allows AngularJS to differentiate between the part of the url that is the application base and the path that should be handled by the application.</source>
          <target state="translated">이 모드를 사용하려면 서버 측에서 URL을 다시 작성해야합니다. 기본적으로 모든 링크를 응용 프로그램의 진입 점 (예 : index.html)에 다시 작성해야합니다. 요구 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 이 AngularJS 및 어플리케이션 기반 및 애플리케이션에 의해 처리되어야하는 경로 URL의 일부를 구별 할 수 있도록하는 태그로서,이 경우에 중요하다.</target>
        </trans-unit>
        <trans-unit id="dd90e467c164134d79cd404122f3459c75ef6850" translate="yes" xml:space="preserve">
          <source>Using your favorite element inspector, look for attributes added by ngAria in your own code.</source>
          <target state="translated">자주 사용하는 요소 검사기를 사용하여 자신의 코드에서 ngAria가 추가 한 속성을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="a66911e37d51e0c3a3a47af728e0570297be65e2" translate="yes" xml:space="preserve">
          <source>Usually, it's not necessary to write to properties in AngularJS, as the built-in directives handle the most common use cases (instead of the above example, you would use &lt;a href=&quot;ngvalue&quot;&gt;&lt;code&gt;ngValue&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">내장 지시문이 가장 일반적인 사용 사례를 처리하므로 일반적으로 AngularJS의 속성에 쓸 필요는 없습니다 (위의 예제 대신 &lt;a href=&quot;ngvalue&quot;&gt; &lt;code&gt;ngValue&lt;/code&gt; &lt;/a&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="9117e3d156ca57a740fa2681f3cbe9bcb779f7cd" translate="yes" xml:space="preserve">
          <source>Usually, you don't call &lt;code&gt;$digest()&lt;/code&gt; directly in &lt;a href=&quot;../directive/ngcontroller&quot;&gt;controllers&lt;/a&gt; or in &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;directives&lt;/a&gt;. Instead, you should call &lt;a href=&quot;%24rootscope.scope#%24apply.html&quot;&gt;$apply()&lt;/a&gt; (typically from within a &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;directive&lt;/a&gt;), which will force a &lt;code&gt;$digest()&lt;/code&gt;.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../directive/ngcontroller&quot;&gt;컨트롤러&lt;/a&gt; 나 &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;지시문&lt;/a&gt; 에서 직접 &lt;code&gt;$digest()&lt;/code&gt; 호출하지 않습니다 . 대신 &lt;a href=&quot;%24rootscope.scope#%24apply.html&quot;&gt;$ apply ()&lt;/a&gt; (일반적으로 &lt;a href=&quot;../provider/%24compileprovider#directive.html&quot;&gt;지시문&lt;/a&gt; 내에서 )를 호출 하면 &lt;code&gt;$digest()&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="5cff1d4dcbaa6169803c618f64323129b1539f3d" translate="yes" xml:space="preserve">
          <source>Value Recipe</source>
          <target state="translated">가치 레시피</target>
        </trans-unit>
        <trans-unit id="c113bc7c7f7db6557f503b649e374f64b15937e5" translate="yes" xml:space="preserve">
          <source>Value for this literal. All literal values must be primitives or &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">이 리터럴의 값입니다. 모든 리터럴 값은 프리미티브이거나 &lt;code&gt;undefined&lt;/code&gt; 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="48274bf7792e3199e036a65ed34f449dc89eaf60" translate="yes" xml:space="preserve">
          <source>Value may be:</source>
          <target state="translated">값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5c7b89964a32b7847cc384c42d59157b6aa66118" translate="yes" xml:space="preserve">
          <source>Value or a promise</source>
          <target state="translated">가치 또는 약속</target>
        </trans-unit>
        <trans-unit id="6c81a08fcf7fb2e50a04e9b948fa82e0ea17df4a" translate="yes" xml:space="preserve">
          <source>Value services are similar to constant services, except that they cannot be injected into a module configuration function (see &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt;&lt;code&gt;angular.Module&lt;/code&gt;&lt;/a&gt;) but they can be overridden by an AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;decorator&lt;/a&gt;.</source>
          <target state="translated">값 서비스는 모듈 구성 함수 ( &lt;a href=&quot;../../ng/type/angular.module#config.html&quot;&gt; &lt;code&gt;angular.Module&lt;/code&gt; &lt;/a&gt; 참조)에 삽입 될 수는 없지만 AngularJS &lt;a href=&quot;%24provide#decorator.html&quot;&gt;데코레이터&lt;/a&gt; 로 재정의 될 수 있다는 점을 제외하면 상수 서비스와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="3aa197e2c8a5fb13e9b7816824a89f4b3c5b3507" translate="yes" xml:space="preserve">
          <source>Value stabilization algorithm</source>
          <target state="translated">가치 안정화 알고리즘</target>
        </trans-unit>
        <trans-unit id="6c469ec6aaa554802630547915725303bf8f8b8f" translate="yes" xml:space="preserve">
          <source>Value to be stored.</source>
          <target state="translated">저장할 값입니다.</target>
        </trans-unit>
        <trans-unit id="605788684850e8a238a8726e1a0cb4c5099a9922" translate="yes" xml:space="preserve">
          <source>Value to set the attribute to. The value can be an interpolated string.</source>
          <target state="translated">속성을 설정할 값입니다. 값은 보간 된 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="a47ec135f296824132839931bbbe778322d52156" translate="yes" xml:space="preserve">
          <source>Verifies that all of the requests defined via the &lt;code&gt;expect&lt;/code&gt; api were made. If any of the requests were not made, verifyNoOutstandingExpectation throws an exception.</source>
          <target state="translated">&lt;code&gt;expect&lt;/code&gt; API 를 통해 정의 된 모든 요청 이 이루어 졌는지 확인합니다. 요청이없는 경우 verifyNoOutstandingExpectation에서 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2b0950bdfc9c6382c1d7d6a757ca980cb3de9e74" translate="yes" xml:space="preserve">
          <source>Verifies that there are no outstanding requests that need to be flushed.</source>
          <target state="translated">비워야하는 미해결 요청이 없는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d7f325a18a825f860634333d989a1d777ced5162" translate="yes" xml:space="preserve">
          <source>Verifies that there are no pending tasks that need to be flushed. It throws an error if there are still pending tasks.</source>
          <target state="translated">비워야하는 보류중인 작업이 없는지 확인합니다. 아직 보류중인 작업이 있으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7c6656dc823a752a3eb9bcea6c50275b8cfac7b8" translate="yes" xml:space="preserve">
          <source>Via CSS styles: overwriting styles in the ng-animate CSS class</source>
          <target state="translated">CSS 스타일을 통해 : 애니메이션이 적용된 CSS 클래스에서 스타일을 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="56b71e89fb1079caaadefd0889e9a22e8b0560e3" translate="yes" xml:space="preserve">
          <source>Videos</source>
          <target state="translated">Videos</target>
        </trans-unit>
        <trans-unit id="aa76b6711f0b6f7b9b50c7a4cf8c5e8df5a2790e" translate="yes" xml:space="preserve">
          <source>Videos:</source>
          <target state="translated">Videos:</target>
        </trans-unit>
        <trans-unit id="69bd4ef9fbd0894a22759c3766b859defbdedbc8" translate="yes" xml:space="preserve">
          <source>View</source>
          <target state="translated">View</target>
        </trans-unit>
        <trans-unit id="8a0159fc319678e56cbe357335bec37e3f693d44" translate="yes" xml:space="preserve">
          <source>View &amp;mdash; The template (HTML with data bindings) that is rendered into the View.</source>
          <target state="translated">보기 &amp;mdash;보기에 렌더링되는 템플릿 (데이터 바인딩이있는 HTML)입니다.</target>
        </trans-unit>
        <trans-unit id="a0f83aaccc440d1cf25ada9bc1856e7eb2641833" translate="yes" xml:space="preserve">
          <source>View-independent business logic: Services</source>
          <target state="translated">보기 독립적 인 비즈니스 로직 : 서비스</target>
        </trans-unit>
        <trans-unit id="80fbd7d99df33af15d63e1fddfb91adaa3951721" translate="yes" xml:space="preserve">
          <source>Views and routes (see the example)</source>
          <target state="translated">보기 및 경로 (예 참조)</target>
        </trans-unit>
        <trans-unit id="346631241a6bd165883391eb2bf20f0dac472e27" translate="yes" xml:space="preserve">
          <source>W3C Accessibility Testing</source>
          <target state="translated">W3C 접근성 테스트</target>
        </trans-unit>
        <trans-unit id="6173f8eb0b947a810d1db5e56255e90b7667262d" translate="yes" xml:space="preserve">
          <source>Watch and observe the URL.</source>
          <target state="translated">URL을보고 관찰하십시오.</target>
        </trans-unit>
        <trans-unit id="3db346c9726b530d1a2ae4cfb73287c8e81c97cc" translate="yes" xml:space="preserve">
          <source>Watching &lt;em&gt;by reference&lt;/em&gt; (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;scope.$watch&lt;/a&gt;&lt;code&gt;(watchExpression, listener)&lt;/code&gt;) detects a change when the whole value returned by the watch expression switches to a new value. If the value is an array or an object, changes inside it are not detected. This is the most efficient strategy.</source>
          <target state="translated">관람 &lt;em&gt;참조&lt;/em&gt; ( &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;스코프. $ 시계 &lt;/a&gt; &lt;code&gt;(watchExpression, listener)&lt;/code&gt; 시계 식으로 돌려 온 값이 새로운 값으로 전환 할 때)의 변화를 검출한다. 값이 배열 또는 객체 인 경우 값이 변경되지 않습니다. 이것이 가장 효율적인 전략입니다.</target>
        </trans-unit>
        <trans-unit id="473a9c40eedd5fb0f115c451dd30526bd2c650ad" translate="yes" xml:space="preserve">
          <source>Watching &lt;em&gt;by value&lt;/em&gt; (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;scope.$watch&lt;/a&gt;&lt;code&gt;(watchExpression, listener, true)&lt;/code&gt;) detects any change in an arbitrarily nested data structure. It is the most powerful change detection strategy, but also the most expensive. A full traversal of the nested data structure is needed on each digest, and a full copy of it needs to be held in memory.</source>
          <target state="translated">구경 &lt;em&gt;값&lt;/em&gt; ( &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;범위. $ 시계 &lt;/a&gt; &lt;code&gt;(watchExpression, listener, true)&lt;/code&gt; ) 임의로 중첩 데이터 구조의 변화를 검출한다. 가장 강력한 변경 감지 전략이지만 가장 비쌉니다. 각 다이제스트마다 중첩 된 데이터 구조의 전체 순회가 필요하며 전체 사본을 메모리에 보유해야합니다.</target>
        </trans-unit>
        <trans-unit id="2af6bb4a94b9a1cb0fd67c6d5fc0095196e94650" translate="yes" xml:space="preserve">
          <source>Watching &lt;em&gt;collection contents&lt;/em&gt; (&lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watchCollection.html&quot;&gt;scope.$watchCollection&lt;/a&gt;&lt;code&gt;(watchExpression, listener)&lt;/code&gt;) detects changes that occur inside an array or an object: When items are added, removed, or reordered. The detection is shallow - it does not reach into nested collections. Watching collection contents is more expensive than watching by reference, because copies of the collection contents need to be maintained. However, the strategy attempts to minimize the amount of copying required.</source>
          <target state="translated">관람 &lt;em&gt;컬렉션 콘텐츠&lt;/em&gt; ( &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watchCollection.html&quot;&gt;. 범위 $ watchCollection &lt;/a&gt; &lt;code&gt;(watchExpression, listener)&lt;/code&gt; 항목이 추가 될 때, 제거 또는 재정렬 :) 배열 또는 개체 내부에서 발생하는 변화를 검출한다. 감지가 얕습니다. 중첩 된 콜렉션에 도달하지 않습니다. 수집 내용의 사본을 유지해야하기 때문에 수집 내용을 보는 것이 참조로 보는 것보다 비용이 많이 듭니다. 그러나이 전략은 필요한 복사량을 최소화하려고합니다.</target>
        </trans-unit>
        <trans-unit id="e57f32a79f955dc80e7b98c93ef9c5dff9e8992b" translate="yes" xml:space="preserve">
          <source>We also &lt;strong&gt;must&lt;/strong&gt; include animations for the views that are being entered and removed (otherwise anchoring wouldn't be possible since the new view would be inserted right away).</source>
          <target state="translated">또한 입력 및 제거되는 뷰에 대한 애니메이션을 포함 &lt;strong&gt;해야합니다&lt;/strong&gt; (그렇지 않으면 새 뷰가 즉시 삽입되므로 고정 할 수 없습니다).</target>
        </trans-unit>
        <trans-unit id="48d50b84720d06df376f308744283f116a6daf37" translate="yes" xml:space="preserve">
          <source>We also changed all expressions in the page to read and write variables within that controller instance by prefixing them with &lt;code&gt;invoice.&lt;/code&gt; . The possible currencies are defined in the controller and added to the template using &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ng-repeat&lt;/code&gt;&lt;/a&gt;. As the controller contains a &lt;code&gt;total&lt;/code&gt; function we are also able to bind the result of that function to the DOM using &lt;code&gt;{{ invoice.total(...) }}&lt;/code&gt;.</source>
          <target state="translated">또한 페이지의 모든 표현식을 변경하여 &lt;code&gt;invoice.&lt;/code&gt; 을 접두어로 붙여 해당 컨트롤러 인스턴스 내에서 변수를 읽고 씁니다 . . 가능한 통화는 컨트롤러에서 정의되고 &lt;a href=&quot;../api/ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ng-repeat&lt;/code&gt; 를&lt;/a&gt; 사용하여 템플릿에 추가됩니다 . 컨트롤러에 &lt;code&gt;total&lt;/code&gt; 함수가 포함되어 있으므로 &lt;code&gt;{{ invoice.total(...) }}&lt;/code&gt; 사용하여 해당 함수의 결과를 DOM에 바인딩 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e45e195299e27595cc434211c5af3181e81a8bd7" translate="yes" xml:space="preserve">
          <source>We are now ready to launch unicorns, but notice that UnicornLauncher depends on our &lt;code&gt;apiToken&lt;/code&gt;. We can satisfy this dependency on &lt;code&gt;apiToken&lt;/code&gt; using the Factory recipe:</source>
          <target state="translated">우리는 지금 유니콘을 시작할 준비가되어 있지만, 통지 UnicornLauncher 우리에 따라 달라 &lt;code&gt;apiToken&lt;/code&gt; . 팩토리 레시피를 사용하여 &lt;code&gt;apiToken&lt;/code&gt; 에 대한 이러한 종속성을 충족시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac1ea31a9d43166687a50ed3692e05ce4153dc7a" translate="yes" xml:space="preserve">
          <source>We are using the &lt;a href=&quot;../service/%24sce&quot;&gt;$sce&lt;/a&gt; service here and include the &lt;a href=&quot;../../ngsanitize&quot;&gt;$sanitize&lt;/a&gt; module to automatically remove &quot;bad&quot; content like inline event listener (e.g. &lt;code&gt;&amp;lt;span onclick=&quot;...&quot;&amp;gt;&lt;/code&gt;). However, as we are using &lt;code&gt;$sce&lt;/code&gt; the model can still decide to provide unsafe content if it marks that content using the &lt;code&gt;$sce&lt;/code&gt; service.</source>
          <target state="translated">우리는 사용하는 &lt;a href=&quot;../service/%24sce&quot;&gt;$의 SCE의&lt;/a&gt; 여기에 서비스를하고 포함 &lt;a href=&quot;../../ngsanitize&quot;&gt;$의 위생적의&lt;/a&gt; 인라인 이벤트 리스너와 같은 제거 자동으로 모듈을 &quot;나쁜&quot;내용 (예를 들어 &lt;code&gt;&amp;lt;span onclick=&quot;...&quot;&amp;gt;&lt;/code&gt; ). 그러나 &lt;code&gt;$sce&lt;/code&gt; 사용함에 따라 모델은 &lt;code&gt;$sce&lt;/code&gt; 서비스를 사용하여 해당 컨텐츠를 표시하는 경우 안전하지 않은 컨텐츠를 제공하기로 결정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0ddbe3412df53532770a5870b95d26cf007568fd" translate="yes" xml:space="preserve">
          <source>We attach our controller to the DOM using the &lt;code&gt;ng-controller&lt;/code&gt; directive. The &lt;code&gt;greeting&lt;/code&gt; property can now be data-bound to the template:</source>
          <target state="translated">&lt;code&gt;ng-controller&lt;/code&gt; 지시문을 사용하여 컨트롤러를 DOM에 연결 합니다. &lt;code&gt;greeting&lt;/code&gt; 속성은 이제 템플릿에 데이터 바인딩 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="ddeae2cedf9a788113de391be2a82b5796c82f33" translate="yes" xml:space="preserve">
          <source>We can also make use of &lt;strong&gt;CSS Keyframes&lt;/strong&gt; by referencing the keyframe animation within the starting CSS class:</source>
          <target state="translated">시작 CSS 클래스 내에서 키 프레임 애니메이션을 참조하여 &lt;strong&gt;CSS 키 프레임&lt;/strong&gt; 을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a40a9d552fb5bc988807680efe848c3a0e26cf2b" translate="yes" xml:space="preserve">
          <source>We can also make use of CSS keyframes by placing them within the CSS classes.</source>
          <target state="translated">CSS 키 프레임을 CSS 클래스 내에 배치하여 CSS 키 프레임을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="844c06e399ab04678015537239ffb4d4f3dc9652" translate="yes" xml:space="preserve">
          <source>We can now attach a transition onto the &lt;code&gt;.banner.ng-anchor&lt;/code&gt; CSS class and then ngAnimate will handle the entire transition for us as well as the addition and removal of any changes of CSS classes between the elements:</source>
          <target state="translated">이제 &lt;code&gt;.banner.ng-anchor&lt;/code&gt; CSS 클래스에 전환을 첨부 할 수 있으며 ngAnimate 는 요소 간 CSS 클래스 변경 사항의 추가 및 제거뿐만 아니라 전체 전환을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="4e80494b0409a0d993fa81a7d1f333388f5be423" translate="yes" xml:space="preserve">
          <source>We can show this by adding another property, &lt;code&gt;vojta&lt;/code&gt;, to our scope and trying to access it from within our directive's template:</source>
          <target state="translated">우리는 범위에 다른 속성 &lt;code&gt;vojta&lt;/code&gt; 를 추가 하고 지시문의 템플릿 내에서 액세스하려고 시도하여이를 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fce0871e367a5372f3bc98dd4c0252dc8c77c3c6" translate="yes" xml:space="preserve">
          <source>We can specify functions to run at configuration and run time for a module by calling the &lt;code&gt;config&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; methods. These functions are injectable with dependencies just like the factory functions above.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; 및 &lt;code&gt;run&lt;/code&gt; 메소드를 호출하여 모듈의 구성 및 런타임에 실행할 함수를 지정할 수 있습니다 . 이러한 기능은 위의 공장 기능과 마찬가지로 종속성으로 주입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e36459843d047d9df4a4211084dc5c402b38cf07" translate="yes" xml:space="preserve">
          <source>We can then use the component like this:</source>
          <target state="translated">그런 다음 컴포넌트를 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="21324a462f2b8d5e0c7c5b4446052c135414c236" translate="yes" xml:space="preserve">
          <source>We could then configure the unicornLauncherProvider like this:</source>
          <target state="translated">그런 다음 unicornLauncherProvider를 다음과 같이 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac57f6df21dcb977cf78d72cfa768c34c7356753" translate="yes" xml:space="preserve">
          <source>We create an &lt;a href=&quot;module&quot;&gt;AngularJS Module&lt;/a&gt;, &lt;code&gt;myApp&lt;/code&gt;, for our application. Then we add the controller's constructor function to the module using the &lt;code&gt;.controller()&lt;/code&gt; method. This keeps the controller's constructor function out of the global scope.</source>
          <target state="translated">우리는 만들 &lt;a href=&quot;module&quot;&gt;AngularJS와 모듈&lt;/a&gt; , &lt;code&gt;myApp&lt;/code&gt; 우리의 응용 프로그램. 그런 다음 &lt;code&gt;.controller()&lt;/code&gt; 메서드를 사용하여 컨트롤러의 생성자 함수를 모듈에 추가합니다 . 이렇게하면 컨트롤러의 생성자 함수가 전역 범위를 벗어납니다.</target>
        </trans-unit>
        <trans-unit id="90dc4f28f2aa88baf0a0053350aecee511d1b878" translate="yes" xml:space="preserve">
          <source>We do our best to intercept calls to &quot;unimplemented&quot; methods, but since the list of methods is incomplete we might be missing some non-standard methods. This can result in errors like: &quot;Date.prototype.foo called on incompatible Object&quot;.</source>
          <target state="translated">&quot;구현되지 않은&quot;메소드에 대한 호출을 가로 채기 위해 최선을 다하지만 메소드 목록이 불완전하기 때문에 일부 비표준 메소드가 누락 될 수 있습니다. &quot;호환되지 않는 개체에서 호출 된 Date.prototype.foo&quot;와 같은 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6fc82dc5284ffbf38ea98e85e63bcc39b7510a8" translate="yes" xml:space="preserve">
          <source>We have built &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt;, an end to end test runner which simulates user interactions that will help you verify the health of your AngularJS application.</source>
          <target state="translated">우리는 AngularJS 애플리케이션의 상태를 확인하는 데 도움이되는 사용자 상호 작용을 시뮬레이션하는 엔드 투 엔드 테스트 러너 인 &lt;a href=&quot;https://github.com/angular/protractor&quot;&gt;Protractor&lt;/a&gt; 를 구축했습니다 .</target>
        </trans-unit>
        <trans-unit id="eff730b8cb2d8bb324e06d0e737eb8eccaed14f5" translate="yes" xml:space="preserve">
          <source>We have set up a guide to many resources provided by the community, where you can find lots of additional information and material on these topics, a list of complimentary libraries, and much more.</source>
          <target state="translated">커뮤니티에서 제공하는 많은 리소스에 대한 안내서를 설정했습니다. 여기에서 이러한 주제에 대한 추가 정보와 자료, 무료 라이브러리 목록 등을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca17b1356cdf6d9a99a47902186386c56a19dd9d" translate="yes" xml:space="preserve">
          <source>We have used an &lt;strong&gt;inline injection annotation&lt;/strong&gt; to explicitly specify the dependency of the Controller on the &lt;code&gt;$scope&lt;/code&gt; service provided by AngularJS. See the guide on &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; for more information.</source>
          <target state="translated">우리는 사용하고 있습니다 &lt;strong&gt;인라인 주입 주석을&lt;/strong&gt; 명시 적으로에 컨트롤러의 의존성 지정 &lt;code&gt;$scope&lt;/code&gt; AngularJS와가 제공하는 서비스를. 자세한 내용은 &lt;a href=&quot;di&quot;&gt;Dependency Injection&lt;/a&gt; 가이드 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9ca11f9dea4678a83cbe765017c379b901fb7de5" translate="yes" xml:space="preserve">
          <source>We inject the $compile service and $rootScope before each jasmine test. The $compile service is used to render the aGreatEye directive. After rendering the directive we ensure that the directive has replaced the content and &quot;lidless, wreathed in flame, 2 times&quot; is present.</source>
          <target state="translated">우리는 각 jasmine 테스트 전에 $ compile 서비스와 $ rootScope를 주입합니다. $ compile 서비스는 aGreatEye 지시문을 렌더링하는 데 사용됩니다. 지시문을 렌더링 한 후에는 지시문이 내용을 대체하고 &quot;뚜껑이없는 화염에 2 번&quot;존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="ae572490bcf1a384d00d809014f9ef3a389a0f5d" translate="yes" xml:space="preserve">
          <source>We moved the &lt;code&gt;convertCurrency&lt;/code&gt; function and the definition of the existing currencies into the new file &lt;code&gt;finance2.js&lt;/code&gt;. But how does the controller get a hold of the now separated function?</source>
          <target state="translated">우리는 이동 &lt;code&gt;convertCurrency&lt;/code&gt; 의 기능과 새 파일에 기존 통화의 정의 &lt;code&gt;finance2.js&lt;/code&gt; 을 . 그러나 컨트롤러는 어떻게 지금 분리 된 기능을 유지합니까?</target>
        </trans-unit>
        <trans-unit id="023a9b93224bd84cddfe8a629e03f8aa9c858380" translate="yes" xml:space="preserve">
          <source>We register an event &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt;. What fires this &lt;code&gt;$destroy&lt;/code&gt; event?</source>
          <target state="translated">이벤트 &lt;code&gt;element.on('$destroy', ...)&lt;/code&gt; 합니다. 이 &lt;code&gt;$destroy&lt;/code&gt; 이벤트를 발생시키는 원인은 무엇입니까 ?</target>
        </trans-unit>
        <trans-unit id="9d48b2c91f5a6af75293c06facac5a89ab2fa1aa" translate="yes" xml:space="preserve">
          <source>We saw earlier how to use &lt;code&gt;=attr&lt;/code&gt; in the &lt;code&gt;scope&lt;/code&gt; option, but in the above example, we're using &lt;code&gt;&amp;amp;attr&lt;/code&gt; instead. The &lt;code&gt;&amp;amp;&lt;/code&gt; binding allows a directive to trigger evaluation of an expression in the context of the original scope, at a specific time. Any legal expression is allowed, including an expression which contains a function call. Because of this, &lt;code&gt;&amp;amp;&lt;/code&gt; bindings are ideal for binding callback functions to directive behaviors.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 옵션 에서 &lt;code&gt;=attr&lt;/code&gt; 을 사용하는 방법을 앞에서 보았지만 위의 예에서는 대신 &lt;code&gt;&amp;amp;attr&lt;/code&gt; 사용하고 있습니다. &lt;code&gt;&amp;amp;&lt;/code&gt; 결합은 특정 시간에, 원본 영역의 맥락에서 발현의 트리거의 평가에 지시 할 수있다. 함수 호출을 포함하는 표현식을 포함한 모든 법적 표현식이 허용됩니다. 이 때문에 &lt;code&gt;&amp;amp;&lt;/code&gt; 바인딩은 콜백 함수를 지시문 동작에 바인딩하는 데 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="d1926692f60d5568acf1d0bee7f667e3d7c0c99e" translate="yes" xml:space="preserve">
          <source>We want to run the function we pass by invoking it from the directive's scope, but have it run in the context of the scope where it's registered.</source>
          <target state="translated">지시문의 범위에서 호출하여 전달하는 함수를 실행하려고하지만 등록 된 범위의 컨텍스트에서 실행되도록합니다.</target>
        </trans-unit>
        <trans-unit id="e8e0776ae3afa2fad60ff172ae662a5d77e9f6f7" translate="yes" xml:space="preserve">
          <source>We would expect AngularJS to be able to bind to this, but when we check the console we see something like &lt;code&gt;Error: Invalid value for attribute cx=&quot;{{cx}}&quot;&lt;/code&gt;. Because of the SVG DOM API's restrictions, you cannot simply write &lt;code&gt;cx=&quot;{{cx}}&quot;&lt;/code&gt;.</source>
          <target state="translated">AngularJS가 이것에 바인딩 할 수있을 것으로 기대하지만 콘솔을 확인할 때 &lt;code&gt;Error: Invalid value for attribute cx=&quot;{{cx}}&quot;&lt;/code&gt; 와 같은 것을 볼 수 있습니다. SVG DOM API의 제한 사항으로 인해 &lt;code&gt;cx=&quot;{{cx}}&quot;&lt;/code&gt; 를 작성할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="252941e0a55657728f76a621bbe228cd9bed318b" translate="yes" xml:space="preserve">
          <source>We'll go over a few common examples of directives, then dive deep into the different options and compilation process.</source>
          <target state="translated">몇 가지 일반적인 지시문 예제를 살펴본 다음 다양한 옵션 및 컴파일 프로세스에 대해 자세히 알아 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="3db74eddb5abe4c6d69ca5073939b2ffdcd30492" translate="yes" xml:space="preserve">
          <source>We've just learned how AngularJS splits the life-cycle into configuration phase and run phase and how you can provide configuration to your application via the config function. Since the config function runs in the configuration phase when no services are available, it doesn't have access even to simple value objects created via the Value recipe.</source>
          <target state="translated">우리는 AngularJS가 라이프 사이클을 구성 단계와 실행 단계로 나누는 방법과 구성 기능을 통해 애플리케이션에 구성을 제공하는 방법을 배웠습니다. 구성 기능은 서비스를 사용할 수 없을 때 구성 단계에서 실행되므로 값 레시피를 통해 생성 된 간단한 값 개체에도 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e7c295f69a771afaeb6fd0ffad7c2c66be9dc3e3" translate="yes" xml:space="preserve">
          <source>We've moved the duplication out and into the &lt;code&gt;beforeEach&lt;/code&gt; block. Each individual test now only contains the code specific to that test, and not code that is general across all tests. As you expand your tests, keep an eye out for locations where you can use &lt;code&gt;beforeEach&lt;/code&gt; to tidy up tests. &lt;code&gt;beforeEach&lt;/code&gt; isn't the only function of this sort that Jasmine provides, and the &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown&quot;&gt;documentation lists the others&lt;/a&gt;.</source>
          <target state="translated">중복을 &lt;code&gt;beforeEach&lt;/code&gt; 블록 으로 옮겼습니다 . 각 개별 테스트에는 이제 해당 테스트에 특정한 코드 만 포함되며 모든 테스트에서 일반적인 코드는 포함되지 않습니다. 테스트를 확장 할 때 각 테스트 를 정리하기 &lt;code&gt;beforeEach&lt;/code&gt; 사용할 수있는 위치를 주시하십시오 . &lt;code&gt;beforeEach&lt;/code&gt; 는 Jasmine이 제공하는 이러한 기능의 유일한 기능은 아니며 &lt;a href=&quot;http://jasmine.github.io/1.3/introduction.html#section-Setup_and_Teardown&quot;&gt;설명서에는 다른&lt;/a&gt; 기능이 나열되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5f49816240da5c5e93a09a217e5e15251e2f600" translate="yes" xml:space="preserve">
          <source>We've seen that you can pass in models to a directive using the isolate scope, but sometimes it's desirable to be able to pass in an entire template rather than a string or an object. Let's say that we want to create a &quot;dialog box&quot; component. The dialog box should be able to wrap any arbitrary content.</source>
          <target state="translated">분리 범위를 사용하여 모델을 지시문에 전달할 수 있지만 문자열이나 객체가 아닌 전체 템플릿을 전달하는 것이 바람직한 경우가 있습니다. &quot;대화 상자&quot;구성 요소를 만들고 싶다고 가정 해 봅시다. 대화 상자는 임의의 내용을 감쌀 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="abb1d6054f0ea55e7ce30bf24912bdf732c1589f" translate="yes" xml:space="preserve">
          <source>Web browsers are sometimes picky about what values they consider valid for attributes.</source>
          <target state="translated">웹 브라우저는 때때로 속성에 어떤 값이 유효한 지에 대해 까다 롭습니다.</target>
        </trans-unit>
        <trans-unit id="4f9f39d112f26b6b483e5752ed5019d0587ba101" translate="yes" xml:space="preserve">
          <source>WebAIM</source>
          <target state="translated">WebAIM</target>
        </trans-unit>
        <trans-unit id="216b85a80c0458fafdebd3ba9ff38b76e657305e" translate="yes" xml:space="preserve">
          <source>What are Directives?</source>
          <target state="translated">지시어 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="12c179e827df1ac7383cddb213d45ff08f32ebad" translate="yes" xml:space="preserve">
          <source>What are decorators?</source>
          <target state="translated">데코레이터 란?</target>
        </trans-unit>
        <trans-unit id="f9f442481556abfd102cc7155daba690e1a9a733" translate="yes" xml:space="preserve">
          <source>What changed?</source>
          <target state="translated">무엇이 바뀌 었습니까?</target>
        </trans-unit>
        <trans-unit id="6352305971f4abc98ce5ffab5abff8ed01207f3c" translate="yes" xml:space="preserve">
          <source>What changed? Our &lt;code&gt;currencyConverter&lt;/code&gt; service of the &lt;code&gt;finance&lt;/code&gt; module now uses the &lt;a href=&quot;../api/ng/service/%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt;, a built-in service provided by AngularJS for accessing a server backend. &lt;code&gt;$http&lt;/code&gt; is a wrapper around &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; transports.</source>
          <target state="translated">무엇이 바뀌 었습니까? &lt;code&gt;finance&lt;/code&gt; 모듈 의 &lt;code&gt;currencyConverter&lt;/code&gt; 서비스는 이제 서버 백엔드에 액세스하기 위해 AngularJS가 제공하는 내장 서비스 &lt;a href=&quot;../api/ng/service/%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 사용합니다 . &lt;code&gt;$http&lt;/code&gt; 는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt; &lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;http://en.wikipedia.org/wiki/JSONP&quot;&gt;JSONP&lt;/a&gt; 전송에 대한 래퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="c9eedc43181be3fbaa803cb63186981f99ccc887" translate="yes" xml:space="preserve">
          <source>What does it not do?</source>
          <target state="translated">무엇을하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="3cfacea0972e3e84df3a18186fd33468ca795ebb" translate="yes" xml:space="preserve">
          <source>What does this &lt;code&gt;transclude&lt;/code&gt; option do, exactly? &lt;code&gt;transclude&lt;/code&gt; makes the contents of a directive with this option have access to the scope &lt;strong&gt;outside&lt;/strong&gt; of the directive rather than inside.</source>
          <target state="translated">이 &lt;code&gt;transclude&lt;/code&gt; 옵션은 정확히 무엇을합니까? &lt;code&gt;transclude&lt;/code&gt; 는이 옵션을 사용하여 지시문의 내용 이 내부가 아닌 지시문 &lt;strong&gt;외부&lt;/strong&gt; 의 범위에 액세스 할 수있게합니다 .</target>
        </trans-unit>
        <trans-unit id="ada0e0f2c7af87060d54e95e4a96fd7138d3489e" translate="yes" xml:space="preserve">
          <source>What is AngularJS?</source>
          <target state="translated">AngularJS 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="447644911a568d0214e937333a19ccc004de8c3e" translate="yes" xml:space="preserve">
          <source>What is a Module?</source>
          <target state="translated">모듈이란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="fe08c3c8244699c5a8b273b2cab8b4200356ffcb" translate="yes" xml:space="preserve">
          <source>What is a locale ID?</source>
          <target state="translated">로캘 ID는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="beba7ea743f1dc2173ee282f653943a35f2a106b" translate="yes" xml:space="preserve">
          <source>What is ngMessageFormat?</source>
          <target state="translated">ngMessageFormat은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="3943480da5771dbbb46c706aaaea42bf22c5390d" translate="yes" xml:space="preserve">
          <source>What is returned</source>
          <target state="translated">반환되는 것</target>
        </trans-unit>
        <trans-unit id="fbe9fcf5a0f59f8dbc56de5c706eccfe1288f8b9" translate="yes" xml:space="preserve">
          <source>What trusted context types are supported?</source>
          <target state="translated">어떤 신뢰할 수있는 컨텍스트 유형이 지원됩니까?</target>
        </trans-unit>
        <trans-unit id="a4e67c138282d3bd3498f65dbfecf946d52210e9" translate="yes" xml:space="preserve">
          <source>What we want to be able to do is separate the scope inside a directive from the scope outside, and then map the outer scope to a directive's inner scope. We can do this by creating what we call an &lt;strong&gt;isolate scope&lt;/strong&gt;. To do this, we can use a &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;directive's &lt;code&gt;scope&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">우리가 할 수있는 것은 지시문 내부의 범위를 외부 범위와 분리 한 다음 외부 범위를 지시문의 내부 범위에 매핑하는 것입니다. &lt;strong&gt;분리 범위&lt;/strong&gt; 라고하는 것을 만들어서이를 수행 할 수 있습니다 . 이를 위해 &lt;a href=&quot;../api/ng/service/%24compile#-scope-.html&quot;&gt;지시문을&lt;/a&gt; 사용할 수 있습니다. &lt;code&gt;scope&lt;/code&gt; 옵션을.</target>
        </trans-unit>
        <trans-unit id="be6b5657e71d140a3fc95978d677de4ea44df671" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$animate&lt;/code&gt; is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has ended by chaining onto the returned promise that animation method returns.</source>
          <target state="translated">언제 &lt;code&gt;$animate&lt;/code&gt; 라고는 애니메이션이 종료 할 때 캡처하는 데 사용할 수있는 약속을 반환합니다. 따라서 (지시문 코드 내에서) 애니메이션을 트리거하는 경우 애니메이션이 반환 된 약속에 연결하여 애니메이션이 종료 된 후 애니메이션이 종료 된 후 지시문 및 범위 관련 활동을 계속 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5e660649c875315903afc08f2df11dfa21f3355" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;$setViewValue&lt;/code&gt; is called, the new &lt;code&gt;value&lt;/code&gt; will be staged for committing through the &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$validators&lt;/code&gt; pipelines. If there are no special &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; specified then the staged value is sent directly for processing through the &lt;code&gt;$parsers&lt;/code&gt; pipeline. After this, the &lt;code&gt;$validators&lt;/code&gt; and &lt;code&gt;$asyncValidators&lt;/code&gt; are called and the value is applied to &lt;code&gt;$modelValue&lt;/code&gt;. Finally, the value is set to the &lt;strong&gt;expression&lt;/strong&gt; specified in the &lt;code&gt;ng-model&lt;/code&gt; attribute and all the registered change listeners, in the &lt;code&gt;$viewChangeListeners&lt;/code&gt; list are called.</source>
          <target state="translated">때 &lt;code&gt;$setViewValue&lt;/code&gt; 라고하며, 새로운 &lt;code&gt;value&lt;/code&gt; 관통 투입을 위해 개최됩니다 &lt;code&gt;$parsers&lt;/code&gt; 및 &lt;code&gt;$validators&lt;/code&gt; 파이프 라인. 특별한 &lt;a href=&quot;../directive/ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; 가&lt;/a&gt; 지정 되지 않은 경우 &lt;code&gt;$parsers&lt;/code&gt; 파이프 라인을 통해 처리하기 위해 준비된 값이 직접 전송됩니다 . 그런 다음 &lt;code&gt;$validators&lt;/code&gt; 및 &lt;code&gt;$asyncValidators&lt;/code&gt; 가 호출되고 값이 &lt;code&gt;$modelValue&lt;/code&gt; 적용됩니다 . 마지막으로 값은 &lt;code&gt;ng-model&lt;/code&gt; 에 지정된 &lt;strong&gt;표현식으로&lt;/strong&gt; 설정됩니다. 속성에 &lt;code&gt;$viewChangeListeners&lt;/code&gt; 목록 에서 등록 된 모든 변경 리스너 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="15cbb91f0e77da9c30b5e74feba1ad5742a72dcd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;objectEquality == true&lt;/code&gt;, inequality of the &lt;code&gt;watchExpression&lt;/code&gt; is determined according to the &lt;a href=&quot;../function/angular.equals&quot;&gt;&lt;code&gt;angular.equals&lt;/code&gt;&lt;/a&gt; function. To save the value of the object for later comparison, the &lt;a href=&quot;../function/angular.copy&quot;&gt;&lt;code&gt;angular.copy&lt;/code&gt;&lt;/a&gt; function is used. This therefore means that watching complex objects will have adverse memory and performance implications.</source>
          <target state="translated">경우 &lt;code&gt;objectEquality == true&lt;/code&gt; 의 불평등 &lt;code&gt;watchExpression&lt;/code&gt; 가 받는 따라 결정&lt;a href=&quot;../function/angular.equals&quot;&gt; &lt;code&gt;angular.equals&lt;/code&gt; 의&lt;/a&gt; 기능. 나중에 비교하기 위해 객체의 값을 저장하기 위해&lt;a href=&quot;../function/angular.copy&quot;&gt; &lt;code&gt;angular.copy&lt;/code&gt; &lt;/a&gt; 함수가 사용됩니다. 따라서 복잡한 객체를 시청하면 메모리와 성능에 부정적인 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="8ce2cc0dab402897ec4863ce029e781d2d6d52fb" translate="yes" xml:space="preserve">
          <source>When AngularJS compiles the HTML, it processes the &lt;code&gt;ng-controller&lt;/code&gt; directive, which in turn asks the injector to create an instance of the controller and its dependencies.</source>
          <target state="translated">AngularJS는 HTML을 컴파일 할 때 &lt;code&gt;ng-controller&lt;/code&gt; 지시문을 처리 하여 인젝터에게 컨트롤러의 인스턴스와 해당 종속 항목을 작성하도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="ec9b10f946fc02c68139f8c80da5ef591eb2ef7e" translate="yes" xml:space="preserve">
          <source>When AngularJS evaluates &lt;code&gt;{{name}}&lt;/code&gt;, it first looks at the scope associated with the given element for the &lt;code&gt;name&lt;/code&gt; property. If no such property is found, it searches the parent scope and so on until the root scope is reached. In JavaScript this behavior is known as prototypical inheritance, and child scopes prototypically inherit from their parents.</source>
          <target state="translated">AngularJS가 &lt;code&gt;{{name}}&lt;/code&gt; 을 평가할 때 먼저 &lt;code&gt;name&lt;/code&gt; 특성에 대해 주어진 요소와 연관된 범위를 확인합니다 . 이러한 속성이 없으면 루트 범위에 도달 할 때까지 상위 범위 등을 검색합니다. JavaScript에서이 동작은 프로토 타입 상속이라고하며 자식 범위는 프로토 타입에서 부모로부터 상속됩니다.</target>
        </trans-unit>
        <trans-unit id="51c935ad5701756b22938226bcc6b67e883b4629" translate="yes" xml:space="preserve">
          <source>When DOM elements are re-used, ngRepeat updates the scope for the element, which will automatically update any active bindings on the template. However, other functionality will not be updated, because the element is not re-created:</source>
          <target state="translated">DOM 요소가 재사용되면 ngRepeat는 요소의 범위를 업데이트하여 템플릿의 모든 활성 바인딩을 자동으로 업데이트합니다. 그러나 요소가 다시 작성되지 않기 때문에 다른 기능은 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="185ed32d1839cf6b6b86790a50f091c5cad18d3a" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;replace&lt;/code&gt; directive encounters the same attribute on the original and the replace node, it will simply deduplicate the attribute and join the values with a space or with a &lt;code&gt;;&lt;/code&gt; in case of the &lt;code&gt;style&lt;/code&gt; attribute.</source>
          <target state="translated">A는 경우 &lt;code&gt;replace&lt;/code&gt; 원래의 지시자 만남에 동일한 속성 및 대체 노드, 단순히 속성 중복을 제거하고 공간 또는 값으로 참여한다 &lt;code&gt;;&lt;/code&gt; &lt;code&gt;style&lt;/code&gt; 경우 속성의</target>
        </trans-unit>
        <trans-unit id="5c230d77dd585240729675f16f4ddd67901e2eba" translate="yes" xml:space="preserve">
          <source>When a directive requests transclusion, the compiler extracts its contents and provides a &lt;strong&gt;transclusion function&lt;/strong&gt; to the directive's &lt;code&gt;link&lt;/code&gt; function and &lt;code&gt;controller&lt;/code&gt;. This transclusion function is a special &lt;strong&gt;linking function&lt;/strong&gt; that will return the compiled contents linked to a new transclusion scope.</source>
          <target state="translated">지시문이 변환을 요청하면 컴파일러는 내용을 추출 하여 지시문의 &lt;code&gt;link&lt;/code&gt; 함수 및 &lt;code&gt;controller&lt;/code&gt; &lt;strong&gt;변환 기능&lt;/strong&gt; 을 제공합니다 . 이 변환 기능은 특별한 &lt;strong&gt;연결 기능입니다&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt; 새로운 transclusion 범위에 연결된 컴파일 된 내용을 반환 입니다.</target>
        </trans-unit>
        <trans-unit id="27ba11fbb2203f0c5d97308aa2a93fd81f5c7f9e" translate="yes" xml:space="preserve">
          <source>When a user clicks on this link,</source>
          <target state="translated">사용자가이 링크를 클릭하면</target>
        </trans-unit>
        <trans-unit id="fbf62f2a97f03d4ac746191d9d45dd4869d7d443" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;offset&lt;/code&gt; is specified, the matching works as follows. First, the exact value of the AngularJS expression is matched against the exact matches (i.e. &lt;code&gt;=N&lt;/code&gt; selectors) to find a match. If there is one, that message is used. If there was no match, then the offset value is subtracted from the value of the expression and locale specific pluralization rules are applied to this new value to obtain its plural category (such as &amp;ldquo;one&amp;rdquo;, &amp;ldquo;few&amp;rdquo;, &amp;ldquo;many&amp;rdquo;, etc.) and a match is attempted against the keyword selectors and the matching message is used. If there was no match, then the &amp;ldquo;other&amp;rdquo; category (required) is used. The value of the &lt;code&gt;#&lt;/code&gt; character inside a message is the value of original expression reduced by the offset value that was specified.</source>
          <target state="translated">때 &lt;code&gt;offset&lt;/code&gt; 지정되면, 매칭은 다음과 작동한다. 먼저 AngularJS 표현식의 정확한 값이 정확한 일치 (즉, &lt;code&gt;=N&lt;/code&gt; 선택기)와 일치하여 일치하는 것을 찾습니다. 있는 경우 해당 메시지가 사용됩니다. 일치하는 것이없는 경우 오프셋 값을 표현식 값에서 빼고 로케일 별 복수 규칙을이 새 값에 적용하여 복수 범주 (예 : &quot;하나&quot;, &quot;몇&quot;, &quot;많은&quot;등)를 얻습니다. )) 키워드 선택기와 일치하고 일치하는 메시지가 사용됩니다. 일치하는 항목이 없으면 &quot;기타&quot;범주 (필수)가 사용됩니다. &lt;code&gt;#&lt;/code&gt; 의 가치 메시지 안에 문자 지정된 오프셋 값만큼 감소 일본어 표현의 값이다.</target>
        </trans-unit>
        <trans-unit id="a149b30987e7663899511dac68ffedfef81a9f01" translate="yes" xml:space="preserve">
          <source>When an AngularJS application needs some data from a server, it calls the $http service, which sends the request to a real server using $httpBackend service. With dependency injection, it is easy to inject $httpBackend mock (which has the same API as $httpBackend) and use it to verify the requests and respond with some testing data without sending a request to a real server.</source>
          <target state="translated">AngularJS 애플리케이션이 서버의 일부 데이터를 필요로하는 경우 $ http 서비스를 호출하여 $ httpBackend 서비스를 사용하여 요청을 실제 서버로 보냅니다. 의존성 주입을 사용하면 $ httpBackend mock ($ httpBackend와 동일한 API)을 주입하고이를 사용하여 요청을 확인하고 실제 서버에 요청을 보내지 않고도 일부 테스트 데이터로 응답 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0819d9d7539f9a79a347a5055715a2649bfc1a04" translate="yes" xml:space="preserve">
          <source>When an AngularJS application starts with a given application module, AngularJS creates a new instance of injector, which in turn creates a registry of recipes as a union of all recipes defined in the core &quot;ng&quot; module, application module and its dependencies. The injector then consults the recipe registry when it needs to create an object for your application.</source>
          <target state="translated">AngularJS 응용 프로그램이 주어진 응용 프로그램 모듈로 시작할 때 AngularJS는 새로운 인젝터 인스턴스를 작성하며, 그 결과 핵심 &quot;ng&quot;모듈, 응용 프로그램 모듈 및 그 종속물에 정의 된 모든 레시피의 결합으로 레시피 레지스트리가 작성됩니다. 그런 다음 인젝터는 응용 프로그램의 오브젝트를 작성해야 할 때 레시피 레지스트리를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="65f2bf10923606bb898bed54285676cbbd6a723c" translate="yes" xml:space="preserve">
          <source>When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting element is located on screen via absolute positioning. The cloned element will be placed inside of the root element of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The element will then animate into the &lt;code&gt;out&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; animations and will eventually reach the coordinates and match the dimensions of the destination element. During the entire animation a CSS class of &lt;code&gt;.ng-animate-shim&lt;/code&gt; will be applied to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class is: &lt;code&gt;visibility:hidden&lt;/code&gt;). Once the anchor reaches its destination then it will be removed and the destination element will become visible since the shim class will be removed.</source>
          <target state="translated">앵커 애니메이션이 발생하면 ngAnimate는 시작 요소를 복제하고 절대 위치 지정을 통해 시작 요소가 화면에있는 위치에 정확하게 배치합니다. 복제 된 요소는 응용 프로그램의 루트 요소 (ng-app가 정의 된 위치) 안에 배치되고 시작 요소의 모든 CSS 클래스가 적용됩니다. 요소는 다음에 애니메이션 것입니다 &lt;code&gt;out&lt;/code&gt; 와 &lt;code&gt;in&lt;/code&gt; 애니메이션은 결국 좌표에 도달하고 대상 요소의 크기와 일치합니다. 전체 애니메이션 중에 &lt;code&gt;.ng-animate-shim&lt;/code&gt; 의 CSS 클래스 는 시작 및 대상 요소 모두에 적용되어 보이지 않게 숨길 수 있습니다 (클래스의 CSS 스타일은 다음과 같습니다. visible &lt;code&gt;visibility:hidden&lt;/code&gt; ). 앵커가 목적지에 도달하면 해당 클래스가 제거되고 shim 클래스가 제거되므로 목적지 요소가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="14f3f7bcb4a87c6124202a009713b7534c14dfdf" translate="yes" xml:space="preserve">
          <source>When an external event (such as a user action, timer or XHR) is received, the associated &lt;a href=&quot;expression&quot;&gt;expression&lt;/a&gt; must be applied to the scope through the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$apply()&lt;/a&gt; method so that all listeners are updated correctly.</source>
          <target state="translated">외부 이벤트 (예 : 사용자 조치, 타이머 또는 XHR)가 수신되면 모든 리스너가 올바르게 업데이트되도록 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;$ apply ()&lt;/a&gt; 메소드를 통해 연관된 &lt;a href=&quot;expression&quot;&gt;표현식&lt;/a&gt; 을 범위에 적용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="c139d2a36c5e7dae8ba86d6f3fc970378a2fd7a1" translate="yes" xml:space="preserve">
          <source>When an isolate scope is used for a directive (see above), &lt;code&gt;bindToController: true&lt;/code&gt; will allow a component to have its properties bound to the controller, rather than to scope.</source>
          <target state="translated">격리 범위가 지시문에 사용되면 (위 참조) &lt;code&gt;bindToController: true&lt;/code&gt; 를 사용하면 구성 요소가 범위가 아닌 컨트롤러에 속성을 바인딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3153ef599b44531bab9272b7bd946ae582bdb412" translate="yes" xml:space="preserve">
          <source>When an item in the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; menu is selected, the array element or object property represented by the selected option will be bound to the model identified by the &lt;code&gt;ngModel&lt;/code&gt; directive.</source>
          <target state="translated">&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 메뉴 에서 항목을 선택 하면 선택한 옵션으로 표시되는 배열 요소 또는 객체 속성이 &lt;code&gt;ngModel&lt;/code&gt; 지시문으로 식별 된 모델에 바인딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="3a676ca96b413f93e2b10f02f22a45badb9199fb" translate="yes" xml:space="preserve">
          <source>When an item in the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; menu is selected, the value of the selected option will be bound to the model identified by the &lt;code&gt;ngModel&lt;/code&gt; directive. With static or repeated options, this is the content of the &lt;code&gt;value&lt;/code&gt; attribute or the textContent of the &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;, if the value attribute is missing. Value and textContent can be interpolated.</source>
          <target state="translated">&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 메뉴 에서 항목을 선택 하면 선택한 옵션의 값이 &lt;code&gt;ngModel&lt;/code&gt; 지시문으로 식별 된 모델에 바인딩됩니다 . 정적 또는 반복 옵션이이 내용 인 &lt;code&gt;value&lt;/code&gt; 특성 또는하는 TextContent의 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; value 속성이없는 경우. 값과 텍스트 내용을 보간 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d91d5acbcb6e8adb1db7278d2b85940b8c059799" translate="yes" xml:space="preserve">
          <source>When an item is added, a new instance of the template is added to the DOM.</source>
          <target state="translated">항목이 추가되면 템플릿의 새 인스턴스가 DOM에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="6812fd0a944e938e939802bbf208e98821182752" translate="yes" xml:space="preserve">
          <source>When an item is removed, its template instance is removed from the DOM.</source>
          <target state="translated">항목이 제거되면 해당 템플리트 인스턴스가 DOM에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="81dc823adbdf6d2fe5dc8bb040d0c817d8aeaa14" translate="yes" xml:space="preserve">
          <source>When caching is enabled, &lt;a href=&quot;%24http&quot;&gt;&lt;code&gt;$http&lt;/code&gt;&lt;/a&gt; stores the response from the server using the relevant cache object. The next time the same request is made, the response is returned from the cache without sending a request to the server.</source>
          <target state="translated">캐싱이 활성화되면 &lt;a href=&quot;%24http&quot;&gt; &lt;code&gt;$http&lt;/code&gt; &lt;/a&gt; 는 관련 캐시 개체를 사용하여 서버의 응답을 저장합니다. 다음에 동일한 요청이 작성되면 서버로 요청을 보내지 않고 캐시에서 응답이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="789467cb9245497d6ba720add302b2f1f1af706a" translate="yes" xml:space="preserve">
          <source>When called with a single argument the method acts as a setter, setting the &lt;code&gt;search&lt;/code&gt; component of &lt;code&gt;$location&lt;/code&gt; to the specified value.</source>
          <target state="translated">단일 인수로 호출되면 메소드는 &lt;code&gt;$location&lt;/code&gt; 의 &lt;code&gt;search&lt;/code&gt; 컴포넌트를 지정된 값으로 설정하는 세터 역할을 합니다.</target>
        </trans-unit>
        <trans-unit id="14865eb2b6a51a444dc86a06c71f0100af295db4" translate="yes" xml:space="preserve">
          <source>When called, it scrolls to the element related to the specified &lt;code&gt;hash&lt;/code&gt; or (if omitted) to the current value of &lt;a href=&quot;%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt;, according to the rules specified in the &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec&lt;/a&gt;.</source>
          <target state="translated">호출되면 &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec에&lt;/a&gt; 지정된 규칙에 따라 지정된 &lt;code&gt;hash&lt;/code&gt; 와 관련된 요소 또는 &lt;a href=&quot;%24location#hash.html&quot;&gt;$ location.hash ()&lt;/a&gt; 의 현재 값으로 스크롤됩니다 .</target>
        </trans-unit>
        <trans-unit id="e711b7dd7dcf0670b3366c5231f7791291b42079" translate="yes" xml:space="preserve">
          <source>When called, it scrolls to the element related to the specified &lt;code&gt;hash&lt;/code&gt; or (if omitted) to the current value of &lt;a href=&quot;service/%24location#hash.html&quot;&gt;$location.hash()&lt;/a&gt;, according to the rules specified in the &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec&lt;/a&gt;.</source>
          <target state="translated">호출되면 &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document&quot;&gt;HTML5 spec에&lt;/a&gt; 지정된 규칙에 따라 지정된 &lt;code&gt;hash&lt;/code&gt; 와 관련된 요소 또는 &lt;a href=&quot;service/%24location#hash.html&quot;&gt;$ location.hash ()&lt;/a&gt; 의 현재 값으로 스크롤됩니다 .</target>
        </trans-unit>
        <trans-unit id="20cc03eae13b474c55c6832e1df3a3881e25f1de" translate="yes" xml:space="preserve">
          <source>When calling instance methods, the instance itself is used as the request body (if the action should have a body). By default, only actions using &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;PATCH&lt;/code&gt; have request bodies, but you can use the &lt;code&gt;hasBody&lt;/code&gt; configuration option to specify whether an action should have a body or not (regardless of its HTTP method).</source>
          <target state="translated">인스턴스 메소드를 호출 할 때 인스턴스 자체는 요청 본문으로 사용됩니다 (활동에 본문이있는 경우). 기본적으로 &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; 또는 &lt;code&gt;PATCH&lt;/code&gt; 를 사용하는 조치에만 요청 본문이 있지만 &lt;code&gt;hasBody&lt;/code&gt; 구성 옵션을 사용하여 조치에 본문이 있어야하는지 여부를 지정할 수 있습니다 (HTTP 메소드에 관계없이).</target>
        </trans-unit>
        <trans-unit id="839a4c899e007e634295e0d40ee38c44ffb9e7a9" translate="yes" xml:space="preserve">
          <source>When child scopes are no longer needed, it is the responsibility of the child scope creator to destroy them via &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24destroy.html&quot;&gt;scope.$destroy()&lt;/a&gt; API. This will stop propagation of &lt;code&gt;$digest&lt;/code&gt; calls into the child scope and allow for memory used by the child scope models to be reclaimed by the garbage collector.</source>
          <target state="translated">하위 범위가 더 이상 필요하지 않은 경우 하위 범위 작성자는 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24destroy.html&quot;&gt;scope. $ destroy ()&lt;/a&gt; API 를 통해이를 삭제해야 합니다. 이렇게하면 &lt;code&gt;$digest&lt;/code&gt; 호출이 하위 범위로 전파되지 않고 가비지 수집기에서 하위 범위 모델에 사용 된 메모리를 회수 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22459911d88501ffcc063a47051430d4e2088c3f" translate="yes" xml:space="preserve">
          <source>When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of &lt;code&gt;reject&lt;/code&gt; as the &lt;code&gt;throw&lt;/code&gt; keyword in JavaScript. This also means that if you &quot;catch&quot; an error via a promise error callback and you want to forward the error to the promise derived from the current promise, you have to &quot;rethrow&quot; the error by returning a rejection constructed via &lt;code&gt;reject&lt;/code&gt;.</source>
          <target state="translated">지연 / 약속을 try / catch / throw의 익숙한 동작과 비교할 때 JavaScript에서 &lt;code&gt;reject&lt;/code&gt; 를 &lt;code&gt;throw&lt;/code&gt; 키워드 로 생각 하십시오 . 이는 약속 오류 콜백을 통해 오류를 &quot;잡아&quot;현재 약속에서 파생 된 약속으로 오류를 전달하려는 경우 &lt;code&gt;reject&lt;/code&gt; 를 통해 생성 된 거부를 반환하여 오류를 &quot;다시 던져야&quot;함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="7544d7a6d40240f2568b1c59cdeebb817b07875a" translate="yes" xml:space="preserve">
          <source>When designing web applications, consider security threats from:</source>
          <target state="translated">웹 애플리케이션을 설계 할 때 다음과 같은 보안 위협을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="1be6f29866ea88fbd287202394805d3eb43fe1cb" translate="yes" xml:space="preserve">
          <source>When digest loop is done and all the values have settled, process the queue of watch deregistration tasks. For each watch to be deregistered, check if it still evaluates to a value that is not &lt;code&gt;undefined&lt;/code&gt;. If that's the case, deregister the watch. Otherwise, keep dirty-checking the watch in the future digest loops by following the same algorithm starting from step 1</source>
          <target state="translated">다이제스트 루프가 완료되고 모든 값이 설정되면 감시 등록 취소 작업 대기열을 처리합니다. 등록 해제 할 각 시계에 대해 아직 &lt;code&gt;undefined&lt;/code&gt; 되지 않은 값으로 평가되는지 확인하십시오 . 이 경우 시계 등록을 취소하십시오. 그렇지 않으면, 1 단계부터 시작하는 동일한 알고리즘을 따라 향후 다이제스트 루프에서 시계를 더티 검사로 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="ada11b8bb4889ba1645ad55c7065dc38a11b087e" translate="yes" xml:space="preserve">
          <source>When filters are executed</source>
          <target state="translated">필터가 실행될 때</target>
        </trans-unit>
        <trans-unit id="bc763fc382925e726e695a57a972bb42b82d1fcf" translate="yes" xml:space="preserve">
          <source>When interacting with &lt;code&gt;Scope&lt;/code&gt; in tests, additional helper methods are available on the instances of &lt;code&gt;Scope&lt;/code&gt; type. See &lt;a href=&quot;../../ngmock/type/%24rootscope.scope&quot;&gt;ngMock Scope&lt;/a&gt; for additional details.</source>
          <target state="translated">테스트에서 &lt;code&gt;Scope&lt;/code&gt; 와 상호 작용할 때 &lt;code&gt;Scope&lt;/code&gt; 유형 의 인스턴스에서 추가 도우미 메서드를 사용할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../../ngmock/type/%24rootscope.scope&quot;&gt;ngMock 범위&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="2316ea99ea91caa4a7fb2d4b06f1b8e10ed600db" translate="yes" xml:space="preserve">
          <source>When internationalizing your app, you need to do thorough testing to make sure UI components behave as expected even when their contents vary greatly in content size.</source>
          <target state="translated">앱을 국제화 할 때는 콘텐츠의 크기가 매우 큰 경우에도 UI 구성 요소가 예상대로 작동하는지 철저히 테스트해야합니다.</target>
        </trans-unit>
        <trans-unit id="750c827a48343dda9e5fe8addc1f6d41b2ad613b" translate="yes" xml:space="preserve">
          <source>When interpolating text or attributes:</source>
          <target state="translated">텍스트 나 속성을 보간 할 때 :</target>
        </trans-unit>
        <trans-unit id="3383a24d31d85f720ecee22674153dda0032675f" translate="yes" xml:space="preserve">
          <source>When items are reordered, their respective templates are reordered in the DOM.</source>
          <target state="translated">항목이 재정렬되면 해당 템플리트가 DOM에서 재정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="6632f6bff4755ea5460332c4224ec9a11c1cb149" translate="yes" xml:space="preserve">
          <source>When nesting elements with structural animations, such as &lt;code&gt;ngIf&lt;/code&gt;, into elements that have class-based animations such as &lt;code&gt;ngClass&lt;/code&gt;, it sometimes happens that before the actual animation starts, there is a brief flicker or flash of content where the animated element is briefly visible.</source>
          <target state="translated">같은 구조 애니메이션과 중첩 요소 때 &lt;code&gt;ngIf&lt;/code&gt; 같은 클래스 기반 애니메이션이 소자 내로 &lt;code&gt;ngClass&lt;/code&gt; 는 , 때때로 실제 애니메이션이 시작되기 전에 상기 애니메이션 요소는 간략하게 표시 간단한 플리커 나 콘텐츠의 플래시가 있다고 일어난다.</target>
        </trans-unit>
        <trans-unit id="f71bcb4df00d381895c0df3a5c8a7dbd4ffa348d" translate="yes" xml:space="preserve">
          <source>When ngAnimate is animating an element it will apply the &lt;code&gt;ng-animate&lt;/code&gt; CSS class to the element for the duration of the animation. This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).</source>
          <target state="translated">ngAnimate가 요소에 애니메이션을 적용 하면 애니메이션 지속 시간 동안 &lt;code&gt;ng-animate&lt;/code&gt; aniimate CSS 클래스를 요소에 적용합니다 . 이것은 임시 CSS 클래스이며 애니메이션이 끝나면 JavaScript와 CSS 기반 애니메이션 모두에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="3b8455755d949278198fe66a8823e52081309775" translate="yes" xml:space="preserve">
          <source>When not to use Components:</source>
          <target state="translated">구성 요소를 사용하지 않을 경우 :</target>
        </trans-unit>
        <trans-unit id="db24cd6da9f265a13bfb64937b5a890c8a693e5a" translate="yes" xml:space="preserve">
          <source>When provided, replaces the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</source>
          <target state="translated">When provided, replaces the &lt;code&gt;bannedResourceUrlList&lt;/code&gt; with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</target>
        </trans-unit>
        <trans-unit id="6625b1391d7be3b24e194fa9d4b7155f0f6abba7" translate="yes" xml:space="preserve">
          <source>When provided, replaces the resourceUrlBlacklist with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored.</source>
          <target state="translated">제공된 경우 resourceUrlBlacklist를 제공된 값으로 바꿉니다. 배열이거나 null이어야합니다. 이 어레이의 스냅 샷이 사용되므로 어레이에 대한 추가 변경 사항은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4d9fdadc8992417ef4226cc2cbace2ccffdff1f6" translate="yes" xml:space="preserve">
          <source>When provided, replaces the resourceUrlWhitelist with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored. Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">제공된 경우 resourceUrlWhitelist를 제공된 값으로 바꿉니다. 배열이거나 null이어야합니다. 이 어레이의 스냅 샷이 사용되므로 어레이에 대한 추가 변경 사항은 무시됩니다. 이 배열에서 허용되는 항목에 대한 설명을 보려면 &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;이 링크&lt;/a&gt; 를 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="2a10e5defd097da13b777d840b25c295f260ebeb" translate="yes" xml:space="preserve">
          <source>When provided, replaces the trustedResourceUrlList with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored. Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</source>
          <target state="translated">When provided, replaces the trustedResourceUrlList with the value provided. This must be an array or null. A snapshot of this array is used so further changes to the array are ignored. Follow &lt;a href=&quot;../service/%24sce#resourceUrlPatternItem.html&quot;&gt;this link&lt;/a&gt; for a description of the items allowed in this array.</target>
        </trans-unit>
        <trans-unit id="fefb6e795ed34de308a60ccca17742a8573190c3" translate="yes" xml:space="preserve">
          <source>When should I use $location?</source>
          <target state="translated">언제 $ location을 사용해야합니까?</target>
        </trans-unit>
        <trans-unit id="fc081f8c14691f7b31edca6d4fe98a8c36e29d01" translate="yes" xml:space="preserve">
          <source>When specifying the &lt;code&gt;placeholder&lt;/code&gt; attribute of &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, Internet Explorer will temporarily insert the placeholder value as the textarea's content. If the placeholder value contains interpolation (&lt;code&gt;{{ ... }}&lt;/code&gt;), an error will be logged in the console when AngularJS tries to update the value of the by-then-removed text node. This doesn't affect the functionality of the textarea, but can be undesirable.</source>
          <target state="translated">&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 의 &lt;code&gt;placeholder&lt;/code&gt; 속성을 지정하면 Internet Explorer는 자리 표시 자 값을 텍스트 영역의 내용으로 임시로 삽입합니다. 자리 표시 자 값에 보간 ( &lt;code&gt;{{ ... }}&lt;/code&gt; )이 포함 된 경우 AngularJS가 제거 된 텍스트 노드의 값을 업데이트하려고하면 콘솔에 오류가 기록됩니다. 이것은 텍스트 영역의 기능에는 영향을 미치지 않지만 바람직하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f2ae1c603fd24b2d92261b8648add410fc1b1db" translate="yes" xml:space="preserve">
          <source>When testing promises, it's important to know that the resolution of promises is tied to the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;digest cycle&lt;/a&gt;. That means a promise's &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; callback functions are only called after a digest has run. In tests, you can trigger a digest by calling a scope's &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;&lt;code&gt;$apply&lt;/code&gt; function&lt;/a&gt;. If you don't have a scope in your test, you can inject the &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$rootScope&lt;/a&gt; and call &lt;code&gt;$apply&lt;/code&gt; on it. There is also an example of testing promises in the &lt;a href=&quot;../api/ng/service/%24q#testing.html&quot;&gt;&lt;code&gt;$q&lt;/code&gt; service documentation&lt;/a&gt;.</source>
          <target state="translated">약속을 테스트 할 때는 약속의 해결이 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24digest.html&quot;&gt;다이제스트주기&lt;/a&gt; 와 연결되어 있음을 알아야합니다 . 즉, promise의 &lt;code&gt;then&lt;/code&gt; , &lt;code&gt;catch&lt;/code&gt; 및 &lt;code&gt;finally&lt;/code&gt; 콜백 함수는 다이제스트가 실행 된 후에 만 ​​호출됩니다. 테스트에서 범위의 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt; &lt;code&gt;$apply&lt;/code&gt; 함수를&lt;/a&gt; 호출하여 다이제스트를 트리거 할 수 있습니다 . 당신이 당신의 시험 범위가없는 경우, 당신은 삽입 할 수 &lt;a href=&quot;../api/ng/service/%24rootscope&quot;&gt;$ rootScope을&lt;/a&gt; 하고 전화를 &lt;code&gt;$apply&lt;/code&gt; 그 위에. &lt;a href=&quot;../api/ng/service/%24q#testing.html&quot;&gt; &lt;code&gt;$q&lt;/code&gt; 서비스 문서에&lt;/a&gt; 약속을 테스트하는 예제도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a9b3721c7237b75d3afd4715763f1ab811416bc" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;ngHide&lt;/code&gt; expression evaluates to a truthy value then the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is added to the class attribute on the element causing it to become hidden. When falsy, the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is removed from the element causing the element not to appear hidden.</source>
          <target state="translated">때 &lt;code&gt;ngHide&lt;/code&gt; 의 truthy 값으로 표현 평가하여 다음 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스는 숨겨진되기 위해 원인이되는 요소에 class 속성에 추가됩니다. 거짓 인 경우 &lt;code&gt;.ng-hide&lt;/code&gt; 에서 .ng-hide CSS 클래스가 제거되어 요소가 숨겨지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a297ab931629d5a0763f7da3d096f081788fc874" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;ngShow&lt;/code&gt; expression evaluates to a falsy value then the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is added to the class attribute on the element causing it to become hidden. When truthy, the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class is removed from the element causing the element not to appear hidden.</source>
          <target state="translated">때 &lt;code&gt;ngShow&lt;/code&gt; 의 falsy 값으로 표현 평가하여 다음 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스는 숨겨진되기 위해 원인이되는 요소에 class 속성에 추가됩니다. 사실 인 경우 &lt;code&gt;.ng-hide&lt;/code&gt; 에서 .ng-hide CSS 클래스가 제거되어 요소가 숨겨지지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="4bfc193dcf03be5fdd2e2cdb87b257d2455c123e" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;willBreak&lt;/code&gt; service is instantiated, AngularJS will throw an error because of strict mode. This is useful when using a tool like &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; to ensure that all of your application components have annotations.</source>
          <target state="translated">하면 &lt;code&gt;willBreak&lt;/code&gt; 서비스가 인스턴스화, AngularJS와 때문에 엄격 모드의 오류가 발생합니다. 이것은 &lt;a href=&quot;https://github.com/olov/ng-annotate&quot;&gt;ng-annotate&lt;/a&gt; 와 같은 도구를 사용하여 모든 응용 프로그램 구성 요소에 주석 이 있는지 확인하는 데 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="c7c18ae4170652195c550cf6ea2dba7c36696d41" translate="yes" xml:space="preserve">
          <source>When the above example is compiled, the compiler visits every node and looks for directives.</source>
          <target state="translated">위의 예제가 컴파일되면 컴파일러는 모든 노드를 방문하여 지시문을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="4f3975f977c06069a05aff73f180e1132f61ab9c" translate="yes" xml:space="preserve">
          <source>When the application containing &lt;code&gt;angular_de-de.js&lt;/code&gt; script instead of the generic angular.js script starts, AngularJS is automatically pre-configured with localization rules for the german locale.</source>
          <target state="translated">일반 &lt;code&gt;angular_de-de.js&lt;/code&gt; 스크립트 대신 angular_de-de.js 스크립트를 포함하는 애플리케이션이 시작되면 AngularJS는 독일어 로케일에 대한 현지화 규칙으로 자동으로 사전 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="9dc89b2e726de5f584f7c7b43803949e197d4a32" translate="yes" xml:space="preserve">
          <source>When the browser calls into JavaScript the code executes outside the AngularJS execution context, which means that AngularJS is unaware of model modifications. To properly process model modifications the execution has to enter the AngularJS execution context using the &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt;&lt;code&gt;$apply&lt;/code&gt;&lt;/a&gt; method. Only model modifications which execute inside the &lt;code&gt;$apply&lt;/code&gt; method will be properly accounted for by AngularJS. For example if a directive listens on DOM events, such as &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt;&lt;code&gt;ng-click&lt;/code&gt;&lt;/a&gt; it must evaluate the expression inside the &lt;code&gt;$apply&lt;/code&gt; method.</source>
          <target state="translated">브라우저가 JavaScript를 호출하면 코드가 AngularJS 실행 컨텍스트 외부에서 실행되므로 AngularJS는 모델 수정을 인식하지 못합니다. 모델 수정을 올바르게 처리하려면 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24apply.html&quot;&gt; &lt;code&gt;$apply&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 실행이 AngularJS 실행 컨텍스트로 들어가야합니다 . &lt;code&gt;$apply&lt;/code&gt; 메소드 내에서 실행되는 모델 수정 만 AngularJS에 의해 올바르게 설명됩니다. 예를 들어 지시문이 &lt;a href=&quot;../api/ng/directive/ngclick&quot;&gt; &lt;code&gt;ng-click&lt;/code&gt; &lt;/a&gt; 과 같은 DOM 이벤트를 수신하는 경우 &lt;code&gt;$apply&lt;/code&gt; 메소드 내부의 표현식을 평가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c4a0073d43d8ed80547cc46f1c39992f55fe9dcd" translate="yes" xml:space="preserve">
          <source>When the data is returned from the server then the object is an instance of the resource type and all of the non-GET methods are available with &lt;code&gt;$&lt;/code&gt; prefix. This allows you to easily support CRUD operations (create, read, update, delete) on server-side data.</source>
          <target state="translated">서버에서 데이터가 리턴되면 오브젝트는 자원 유형의 인스턴스이며 모든 비 GET 메소드는 &lt;code&gt;$&lt;/code&gt; 접두어 로 사용할 수 있습니다 . 이를 통해 서버 측 데이터에서 CRUD 작업 (만들기, 읽기, 업데이트, 삭제)을 쉽게 지원할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1ed9027d5eb4faa2d10f802af6772e8ffd7a989" translate="yes" xml:space="preserve">
          <source>When the expression changes, the previously added classes are removed and only then are the new classes added.</source>
          <target state="translated">표현식이 변경되면 이전에 추가 된 클래스가 제거 된 다음 새 클래스 만 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="3821805d3a6f4eb90bb7345d51e2b2e665b5adba" translate="yes" xml:space="preserve">
          <source>When the first argument is a native DOM or jqLite/jQuery element, the function enables / disables animations on this element &lt;em&gt;and all its children&lt;/em&gt;: &lt;code&gt;$animate.enabled(myElement, false)&lt;/code&gt;. You can still use it to re-enable animations for a child element, even if you have disabled them on a parent element. And compared to the &lt;code&gt;classNameFilter&lt;/code&gt;, you can change the animation status at runtime instead of during the config phase.</source>
          <target state="translated">첫 번째 인수가 기본 DOM 또는 jqLite / jQuery 요소 인 경우이 함수는이 요소 &lt;em&gt;와 모든 하위&lt;/em&gt; 요소에서 애니메이션을 활성화 / 비활성화합니다 : &lt;code&gt;$animate.enabled(myElement, false)&lt;/code&gt; . 부모 요소에서 애니메이션을 비활성화 한 경우에도이를 사용하여 자식 요소에 대한 애니메이션을 다시 활성화 할 수 있습니다. 그리고 &lt;code&gt;classNameFilter&lt;/code&gt; 와 비교 하여 구성 단계 대신 런타임에 애니메이션 상태를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2b8c3726e19191da644ea15837b664d0107b25a" translate="yes" xml:space="preserve">
          <source>When the original node and the replace template declare the same directive(s), they will be &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;compiled twice&lt;/a&gt; because the compiler does not deduplicate them. In many cases, this is not noticable, but e.g. &lt;a href=&quot;../directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; will attach &lt;code&gt;$formatters&lt;/code&gt; and &lt;code&gt;$parsers&lt;/code&gt; twice.</source>
          <target state="translated">원래 노드와 바꾸기 템플릿이 동일한 지시문을 선언 하면 컴파일러는 중복 제거하지 않기 때문에 &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;두 번 컴파일&lt;/a&gt; 됩니다. 많은 경우에 이것은 눈에 &lt;a href=&quot;../directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; 않지만 ngModel 은 &lt;code&gt;$formatters&lt;/code&gt; 와 &lt;code&gt;$parsers&lt;/code&gt; 두 번 첨부 합니다.</target>
        </trans-unit>
        <trans-unit id="7907a149033c64f8dcc623cf80201a3de41eea12" translate="yes" xml:space="preserve">
          <source>When the original node and the replace template declare the same directive(s), they will be &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;compiled twice&lt;/a&gt; because the compiler does not deduplicate them. In many cases, this is not noticeable, but e.g. &lt;a href=&quot;../directive/ngmodel&quot;&gt;&lt;code&gt;ngModel&lt;/code&gt;&lt;/a&gt; will attach &lt;code&gt;$formatters&lt;/code&gt; and &lt;code&gt;$parsers&lt;/code&gt; twice.</source>
          <target state="translated">When the original node and the replace template declare the same directive(s), they will be &lt;a href=&quot;../../../guide/compiler#double-compilation-and-how-to-avoid-it.html&quot;&gt;compiled twice&lt;/a&gt; because the compiler does not deduplicate them. In many cases, this is not noticeable, but e.g. &lt;a href=&quot;../directive/ngmodel&quot;&gt; &lt;code&gt;ngModel&lt;/code&gt; &lt;/a&gt; will attach &lt;code&gt;$formatters&lt;/code&gt; and &lt;code&gt;$parsers&lt;/code&gt; twice.</target>
        </trans-unit>
        <trans-unit id="fd9c02d96b63bdc77f81f45e93ccaf214f2bcea7" translate="yes" xml:space="preserve">
          <source>When the replace template has a directive at the root node that uses &lt;a href=&quot;%24compile#-transclude-.html&quot;&gt;&lt;code&gt;transclude: element&lt;/code&gt;&lt;/a&gt;, e.g. &lt;a href=&quot;../directive/ngif&quot;&gt;&lt;code&gt;ngIf&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, the DOM structure or scope inheritance can be incorrect. See the following issues:</source>
          <target state="translated">replace 템플리트에 루트 노드에 &lt;a href=&quot;../directive/ngif&quot;&gt; &lt;code&gt;ngIf&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;%24compile#-transclude-.html&quot;&gt; &lt;code&gt;transclude: element&lt;/code&gt; &lt;/a&gt; 를 사용하는 지시문이있는 경우 (예 : ngIf 또는 &lt;a href=&quot;../directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt; ) DOM 구조 또는 범위 상속이 올바르지 않을 수 있습니다. 다음 문제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9342cec159ce1c208d8802a510ac44a9f06fba8a" translate="yes" xml:space="preserve">
          <source>When the user clicks the &lt;code&gt;x&lt;/code&gt; in the dialog, the directive's &lt;code&gt;close&lt;/code&gt; function is called, thanks to &lt;code&gt;ng-click.&lt;/code&gt; This call to &lt;code&gt;close&lt;/code&gt; on the isolated scope actually evaluates the expression &lt;code&gt;hideDialog(message)&lt;/code&gt; in the context of the original scope, thus running &lt;code&gt;Controller&lt;/code&gt;'s &lt;code&gt;hideDialog&lt;/code&gt; function.</source>
          <target state="translated">사용자 가 대화 상자 에서 &lt;code&gt;x&lt;/code&gt; 를 클릭하면 &lt;code&gt;ng-click.&lt;/code&gt; 덕분에 지시문의 &lt;code&gt;close&lt;/code&gt; 기능이 호출 됩니다. 격리 된 범위 를 &lt;code&gt;close&lt;/code&gt; 이 호출은 실제로 원래 범위의 컨텍스트에서 표현식 &lt;code&gt;hideDialog(message)&lt;/code&gt; 를 평가 하므로 &lt;code&gt;Controller&lt;/code&gt; 의 &lt;code&gt;hideDialog&lt;/code&gt; 함수 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="88a38c58d7d80b367d19d209a82c71a873027d20" translate="yes" xml:space="preserve">
          <source>When there are multiple directives defined on a single DOM element, sometimes it is necessary to specify the order in which the directives are applied. The &lt;code&gt;priority&lt;/code&gt; is used to sort the directives before their &lt;code&gt;compile&lt;/code&gt; functions get called. Priority is defined as a number. Directives with greater numerical &lt;code&gt;priority&lt;/code&gt; are compiled first. Pre-link functions are also run in priority order, but post-link functions are run in reverse order. The order of directives with the same priority is undefined. The default priority is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">단일 DOM 요소에 여러 지시문이 정의 된 경우 지시문이 적용되는 순서를 지정해야하는 경우가 있습니다. &lt;code&gt;priority&lt;/code&gt; 그 전에 지시를 정렬하는 데 사용되는 &lt;code&gt;compile&lt;/code&gt; 기능이 호출됩니다. 우선 순위는 숫자로 정의됩니다. &lt;code&gt;priority&lt;/code&gt; 가 더 큰 지시문이 먼저 컴파일됩니다. 사전 링크 기능도 우선 순위에 따라 실행되지만 사후 링크 기능은 역순으로 실행됩니다. 우선 순위가 같은 지시문의 순서는 정의되어 있지 않습니다. 기본 우선 순위는 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="848b2612d0c87e93e24fbe2550122caa0f1c577b" translate="yes" xml:space="preserve">
          <source>When this css rule is loaded by the browser, all html elements (including their children) that are tagged with the &lt;code&gt;ngCloak&lt;/code&gt; directive are hidden. When AngularJS encounters this directive during the compilation of the template it deletes the &lt;code&gt;ngCloak&lt;/code&gt; element attribute, making the compiled element visible.</source>
          <target state="translated">이 CSS 규칙이 브라우저에 의해로드되면 &lt;code&gt;ngCloak&lt;/code&gt; 지시문으로 태그가 지정된 모든 html 요소 (자식 포함) 가 숨겨집니다. AngularJS가 템플릿을 컴파일하는 동안이 지시어를 만나면 &lt;code&gt;ngCloak&lt;/code&gt; 요소 속성을 삭제 하여 컴파일 된 요소를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2fc91990fa11ae11c26ee5a24353aaebf1125812" translate="yes" xml:space="preserve">
          <source>When this property is set to true (default is &lt;code&gt;false&lt;/code&gt;), the HTML compiler will collect DOM nodes between nodes with the attributes &lt;code&gt;directive-name-start&lt;/code&gt; and &lt;code&gt;directive-name-end&lt;/code&gt;, and group them together as the directive elements. It is recommended that this feature be used on directives which are not strictly behavioral (such as &lt;a href=&quot;../directive/ngclick&quot;&gt;&lt;code&gt;ngClick&lt;/code&gt;&lt;/a&gt;), and which do not manipulate or replace child nodes (such as &lt;a href=&quot;../directive/nginclude&quot;&gt;&lt;code&gt;ngInclude&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이 속성이 true로 설정되면 (기본값은 &lt;code&gt;false&lt;/code&gt; ) HTML 컴파일러는 &lt;code&gt;directive-name-start&lt;/code&gt; 및 &lt;code&gt;directive-name-end&lt;/code&gt; 속성을 가진 노드 사이에서 DOM 노드를 수집 하여 지시문 요소로 그룹화합니다. 이 기능은 엄격하게 동작 하지 않는 (예 : &lt;a href=&quot;../directive/nginclude&quot;&gt; &lt;code&gt;ngInclude&lt;/code&gt; &lt;/a&gt; ) 하위 노드를 조작하거나 대체하지 않는 지시문 (예 : &lt;a href=&quot;../directive/ngclick&quot;&gt; &lt;code&gt;ngClick&lt;/code&gt; &lt;/a&gt; ) 에 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="0235d8d7bcd040be16e73b4398069ebc939ca474" translate="yes" xml:space="preserve">
          <source>When to use directives, controllers or services</source>
          <target state="translated">지시문, 컨트롤러 또는 서비스를 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="799c93d8465b6c7356d72990ebf0c31dcca5897e" translate="yes" xml:space="preserve">
          <source>When unit testing (using &lt;a href=&quot;../../ngmock&quot;&gt;ngMock&lt;/a&gt;), it is necessary to call &lt;a href=&quot;../../ngmock/service/%24httpbackend#flush.html&quot;&gt;$httpBackend.flush()&lt;/a&gt; to flush each pending request using trained responses.</source>
          <target state="translated">단위 테스트 ( &lt;a href=&quot;../../ngmock&quot;&gt;ngMock&lt;/a&gt; 사용 )를 수행 할 때 &lt;a href=&quot;../../ngmock/service/%24httpbackend#flush.html&quot;&gt;$ httpBackend.flush ()&lt;/a&gt; 를 호출 하여 훈련 된 응답을 사용하여 보류중인 각 요청을 플러시해야합니다.</target>
        </trans-unit>
        <trans-unit id="866465e227471da7aace7e851aaccc0bf7b51a44" translate="yes" xml:space="preserve">
          <source>When used with standard inputs, the view value will always be a string (which is in some cases parsed into another type, such as a &lt;code&gt;Date&lt;/code&gt; object for &lt;code&gt;input[date]&lt;/code&gt;.) However, custom controls might also pass objects to this method. In this case, we should make a copy of the object before passing it to &lt;code&gt;$setViewValue&lt;/code&gt;. This is because &lt;code&gt;ngModel&lt;/code&gt; does not perform a deep watch of objects, it only looks for a change of identity. If you only change the property of the object then ngModel will not realize that the object has changed and will not invoke the &lt;code&gt;$parsers&lt;/code&gt; and &lt;code&gt;$validators&lt;/code&gt; pipelines. For this reason, you should not change properties of the copy once it has been passed to &lt;code&gt;$setViewValue&lt;/code&gt;. Otherwise you may cause the model value on the scope to change incorrectly.</source>
          <target state="translated">표준 입력과 함께 사용하면보기 값은 항상 문자열이됩니다 (일부 경우 &lt;code&gt;input[date]&lt;/code&gt; 의 &lt;code&gt;Date&lt;/code&gt; 객체 와 같은 다른 유형으로 구문 분석 됨 ). 그러나 사용자 지정 컨트롤은이 메서드에 객체를 전달할 수도 있습니다. 이 경우 &lt;code&gt;$setViewValue&lt;/code&gt; 전달하기 전에 객체의 복사본을 만들어야 합니다. 이는 &lt;code&gt;ngModel&lt;/code&gt; 이 객체에 대한 심층 감시를 수행하지 않기 때문에 변경 사항 만 찾습니다. 객체의 속성 만 변경하면 ngModel은 객체가 변경되었음을 인식하지 못하고 &lt;code&gt;$parsers&lt;/code&gt; 및 &lt;code&gt;$validators&lt;/code&gt; 호출하지 않습니다 파이프 라인을 . 따라서 복사본이 전달 된 후에는 복사본의 속성을 변경해서는 안됩니다. &lt;code&gt;$setViewValue&lt;/code&gt; . 그렇지 않으면 범위의 모델 값이 잘못 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc64a729cd2e490dc065221b82d1cb45ab84daeb" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt;, you can often avoid some boilerplate, by passing the resolved route dependencies directly to the component. Since 1.5, ngRoute automatically assigns the resolves to the route scope property &lt;code&gt;$resolve&lt;/code&gt; (you can also configure the property name via &lt;code&gt;resolveAs&lt;/code&gt;). When using components, you can take advantage of this and pass resolves directly into your component without creating an extra route controller:</source>
          <target state="translated">&lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$ routeProvider를&lt;/a&gt; 사용 하면 해결 된 경로 종속성을 구성 요소에 직접 전달하여 일부 상용구를 피할 수 있습니다. 1.5 이후 ngRoute는 자동으로 확인을 경로 범위 속성 &lt;code&gt;$resolve&lt;/code&gt; 할당합니다 ( &lt;code&gt;resolveAs&lt;/code&gt; 를 통해 속성 이름을 구성 할 수도 있습니다 ). 컴포넌트를 사용할 때 추가 라우트 컨트롤러를 작성하지 않고이를 활용하여 컴포넌트로 직접 해석을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ba0f63480183afb2de1595c7ae8b25bef84a87f" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;ngshow&quot;&gt;&lt;code&gt;ngShow&lt;/code&gt;&lt;/a&gt; and / or &lt;a href=&quot;nghide&quot;&gt;&lt;code&gt;ngHide&lt;/code&gt;&lt;/a&gt; to toggle between elements, it can happen that both the element to show and the element to hide are visible for a very short time.</source>
          <target state="translated">&lt;a href=&quot;ngshow&quot;&gt; &lt;code&gt;ngShow&lt;/code&gt; &lt;/a&gt; 및 / 또는 &lt;a href=&quot;nghide&quot;&gt; &lt;code&gt;ngHide&lt;/code&gt; &lt;/a&gt; 를 사용하여 요소 간을 전환하면 표시 할 요소와 숨길 요소가 아주 짧은 시간 동안 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d06d724db84ddaaec9c56ac07d4b9edf55b4c22" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;$location&lt;/code&gt; service during testing, you are outside of the angular's &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;scope&lt;/a&gt; life-cycle. This means it's your responsibility to call &lt;code&gt;scope.$apply()&lt;/code&gt;.</source>
          <target state="translated">테스트 중에 &lt;code&gt;$location&lt;/code&gt; 서비스를 사용 하는 경우 각도의 &lt;a href=&quot;../api/ng/type/%24rootscope.scope&quot;&gt;범위&lt;/a&gt; 수명주기를 벗어납니다 . 즉, &lt;code&gt;scope.$apply()&lt;/code&gt; 를 호출하는 것은 귀하의 책임 입니다.</target>
        </trans-unit>
        <trans-unit id="308def7ce1040ce8f8e90c771104d822bf9c454e" translate="yes" xml:space="preserve">
          <source>When using a directive that takes an expression:</source>
          <target state="translated">표현식을 사용하는 지시문을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="9af3cc5f2e0ae3fda308cd5ccc2df4b745158ea7" translate="yes" xml:space="preserve">
          <source>When using a directive with bidirectional binding and parameters that will not change:</source>
          <target state="translated">양방향 바인딩 및 변경되지 않는 매개 변수와 함께 지시문을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="ce320691763ef56ed7bc8d8107895e1c4a8418eb" translate="yes" xml:space="preserve">
          <source>When using this type of annotation, take care to keep the annotation array in sync with the parameters in the function declaration.</source>
          <target state="translated">이 유형의 주석을 사용할 때는 주석 배열이 함수 선언의 매개 변수와 동기화되도록주의하십시오.</target>
        </trans-unit>
        <trans-unit id="0788f3e044fd333f645148040ef0b7a3426b7c04" translate="yes" xml:space="preserve">
          <source>When you call a transclude function it returns a DOM fragment that is pre-bound to a &lt;strong&gt;transclusion scope&lt;/strong&gt;. This scope is special, in that it is a child of the directive's scope (and so gets destroyed when the directive's scope gets destroyed) but it inherits the properties of the scope from which it was taken.</source>
          <target state="translated">transclude 함수를 호출하면 &lt;strong&gt;transclusion scope에&lt;/strong&gt; 사전 바인딩 된 DOM 단편이 리턴 &lt;strong&gt;됩니다&lt;/strong&gt; . 이 범위는 지시문의 범위의 자식이므로 지시문의 범위가 소멸 될 때 소멸된다는 점에서 특별하지만, 해당 범위의 특성을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="adc8cb01135df3a93cfcf63923b01b0b4bcfd2e2" translate="yes" xml:space="preserve">
          <source>When you call a transclusion function you can pass in a &lt;strong&gt;clone attach function&lt;/strong&gt;. This function accepts two parameters, &lt;code&gt;function(clone, scope) { ... }&lt;/code&gt;, where the &lt;code&gt;clone&lt;/code&gt; is a fresh compiled copy of your transcluded content and the &lt;code&gt;scope&lt;/code&gt; is the newly created transclusion scope, which the clone will be linked to.</source>
          <target state="translated">transclusion 함수를 호출하면 &lt;strong&gt;clone attach 함수를&lt;/strong&gt; 전달할 수 있습니다 . 이 함수는 &lt;code&gt;function(clone, scope) { ... }&lt;/code&gt; 두 매개 변수를 허용합니다 . 여기서 &lt;code&gt;clone&lt;/code&gt; 은 변환 된 컨텐츠 의 새로 컴파일 된 사본이고 &lt;code&gt;scope&lt;/code&gt; 는 복제본이 링크 될 새로 작성된 변환 범위입니다.</target>
        </trans-unit>
        <trans-unit id="c0d63bac8ebb474dd0a18c50994a65c24b136a76" translate="yes" xml:space="preserve">
          <source>When you call the &lt;code&gt;absUrl()&lt;/code&gt; method, the returned value is a full url with its segments encoded.</source>
          <target state="translated">&lt;code&gt;absUrl()&lt;/code&gt; 메서드 를 호출하면 반환 된 값은 해당 세그먼트가 인코딩 된 전체 URL입니다.</target>
        </trans-unit>
        <trans-unit id="96856534f37714d279ae2c0dc01f3e86884722a6" translate="yes" xml:space="preserve">
          <source>When you call the &lt;code&gt;url()&lt;/code&gt; method, the returned value is path, search and hash, in the form &lt;code&gt;/path?search=a&amp;amp;b=c#hash&lt;/code&gt;. The segments are encoded as well.</source>
          <target state="translated">&lt;code&gt;url()&lt;/code&gt; 메서드 를 호출하면 반환 된 값은 &lt;code&gt;/path?search=a&amp;amp;b=c#hash&lt;/code&gt; 형식의 path, search 및 hash 입니다. 세그먼트도 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="8e2a897977982bc35240ddd6d90240a08cedadc8" translate="yes" xml:space="preserve">
          <source>When you request a service, the &lt;a href=&quot;%24injector&quot;&gt;$injector&lt;/a&gt; is responsible for finding the correct &lt;strong&gt;service provider&lt;/strong&gt;, instantiating it and then calling its &lt;code&gt;$get&lt;/code&gt;&lt;strong&gt;service factory&lt;/strong&gt; function to get the instance of the &lt;strong&gt;service&lt;/strong&gt;.</source>
          <target state="translated">당신이 서비스를 요청하면 &lt;a href=&quot;%24injector&quot;&gt;$ 인젝터는&lt;/a&gt; 올바른 발견에 대한 책임 &lt;strong&gt;서비스 제공 업체&lt;/strong&gt; , 그것을 인스턴스화하고 그것의 호출 &lt;code&gt;$get&lt;/code&gt; &lt;strong&gt;서비스 공장&lt;/strong&gt; 의 인스턴스를 얻을 기능을 &lt;strong&gt;서비스&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="aa6de81ecf4cb6e26917389d536bee77c7c57932" translate="yes" xml:space="preserve">
          <source>When you use HTML5 history API mode, you will not need special hashbang links. All you have to do is specify regular URL links, such as: &lt;code&gt;&amp;lt;a href=&quot;/some?foo=bar&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt;</source>
          <target state="translated">HTML5 히스토리 API 모드를 사용하는 경우 특수 해시 뱅 링크가 필요하지 않습니다. &lt;code&gt;&amp;lt;a href=&quot;/some?foo=bar&quot;&amp;gt;link&amp;lt;/a&amp;gt;&lt;/code&gt; 와 같은 일반 URL 링크 만 지정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="8d89b9c3c7ad0e72f71a638e459b847a4a1b6c92" translate="yes" xml:space="preserve">
          <source>Whenever an animation is started, &lt;code&gt;ngAnimate&lt;/code&gt; applies the &lt;code&gt;ng-animate&lt;/code&gt; class to the element for the whole duration of the animation. By applying CSS transition / animation styling to that class, you can skip an animation:</source>
          <target state="translated">애니메이션이 시작될 때마다 &lt;code&gt;ngAnimate&lt;/code&gt; 는 &lt;code&gt;ng-animate&lt;/code&gt; 의 전체 지속 시간 동안 ng-animate 클래스를 요소에 적용합니다 . 해당 클래스에 CSS 전환 / 애니메이션 스타일을 적용하면 애니메이션을 건너 뛸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="986037565cd6579ad9d0ba68772c304b34c53a56" translate="yes" xml:space="preserve">
          <source>Whenever an inner message is attached (becomes visible) or removed (becomes hidden) then the enter and leave animation is triggered for each particular element bound to the &lt;code&gt;ngMessage&lt;/code&gt; directive.</source>
          <target state="translated">내부 메시지가 첨부 (표시)되거나 제거 (숨겨 &lt;code&gt;ngMessage&lt;/code&gt; 될 때 마다 ngMessage 지시문에 바인딩 된 각 특정 요소에 대해 enter 및 leave 애니메이션이 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="65ee722d839e36aed52fa460253fb75029459549" translate="yes" xml:space="preserve">
          <source>Whenever the &lt;code&gt;ngMessages&lt;/code&gt; directive contains one or more visible messages then the &lt;code&gt;.ng-active&lt;/code&gt; CSS class will be added to the element. The &lt;code&gt;.ng-inactive&lt;/code&gt; CSS class will be applied when there are no messages present. Therefore, CSS transitions and keyframes as well as JavaScript animations can hook into the animations whenever these classes are added/removed.</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; 지시문에 하나 이상의 가시적 메시지가 포함될 때마다 &lt;code&gt;.ng-active&lt;/code&gt; CSS 클래스가 요소에 추가됩니다. &lt;code&gt;.ng-inactive&lt;/code&gt; 현재 메시지가 없을 때 CSS 클래스가 적용됩니다. 따라서 JavaScript 전환뿐만 아니라 CSS 전환 및 키 프레임도 이러한 클래스를 추가 / 제거 할 때마다 애니메이션에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7960d3c2618b44613a36486dbb58d967ec476048" translate="yes" xml:space="preserve">
          <source>Whenever your application makes requests to a server there are potential security issues that need to be blocked. Both server and the client must cooperate in order to eliminate these threats. AngularJS comes pre-configured with strategies that address these issues, but for this to work backend server cooperation is required.</source>
          <target state="translated">응용 프로그램이 서버에 요청할 때마다 차단해야 할 잠재적 인 보안 문제가 있습니다. 이러한 위협을 제거하려면 서버와 클라이언트 모두 협력해야합니다. AngularJS에는 이러한 문제를 해결하는 전략이 사전 구성되어 있지만이를 위해서는 백엔드 서버 협력이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="460854c303f2e0076b9be3c2cbeafbd2741f25c0" translate="yes" xml:space="preserve">
          <source>Where the compiler has created a new scope, the scope and either &lt;code&gt;ng-scope&lt;/code&gt; or &lt;code&gt;ng-isolated-scope&lt;/code&gt; CSS class are attached to the corresponding element. These scope references can then be accessed via &lt;code&gt;element.scope()&lt;/code&gt; and &lt;code&gt;element.isolateScope()&lt;/code&gt;.</source>
          <target state="translated">컴파일러가 새 범위를 만든 경우 범위와 &lt;code&gt;ng-scope&lt;/code&gt; 또는 &lt;code&gt;ng-isolated-scope&lt;/code&gt; CSS 클래스가 해당 요소에 연결됩니다. 그런 다음 &lt;code&gt;element.scope()&lt;/code&gt; 및 &lt;code&gt;element.isolateScope()&lt;/code&gt; 를 통해 이러한 범위 참조에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e741bc3dcef0123eeda11543758853be2aac149" translate="yes" xml:space="preserve">
          <source>Where:</source>
          <target state="translated">Where:</target>
        </trans-unit>
        <trans-unit id="750881ed39d8d4dbbabc8a525246358035450087" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;ngInclude&lt;/code&gt; should call &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$anchorScroll&lt;/a&gt; to scroll the viewport after the content is loaded.</source>
          <target state="translated">여부 &lt;code&gt;ngInclude&lt;/code&gt; 는 호출해야 &lt;a href=&quot;../service/%24anchorscroll&quot;&gt;$ anchorScroll을&lt;/a&gt; 내용이로드 된 후 뷰포트를 스크롤 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="95e30e407f19a0df15c35e9a06f966233d1296da" translate="yes" xml:space="preserve">
          <source>Whether &lt;code&gt;ngView&lt;/code&gt; should call &lt;a href=&quot;../../ng/service/%24anchorscroll&quot;&gt;$anchorScroll&lt;/a&gt; to scroll the viewport after the view is updated.</source>
          <target state="translated">여부 &lt;code&gt;ngView&lt;/code&gt; 는 호출해야 &lt;a href=&quot;../../ng/service/%24anchorscroll&quot;&gt;$ anchorScroll을&lt;/a&gt; 보기가 업데이트 된 후 뷰포트를 스크롤 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0799f71a28a8d4e41670e7cf10ec92b54b2fb4f" translate="yes" xml:space="preserve">
          <source>Whether or not to ignore the exception when the request fails or the template is empty</source>
          <target state="translated">요청이 실패하거나 템플릿이 비어있을 때 예외를 무시할지 여부</target>
        </trans-unit>
        <trans-unit id="7a494ff3bb52752d0bc384651bd7d37989465cdc" translate="yes" xml:space="preserve">
          <source>Whether the current state is valid (true), invalid (false), pending (undefined), or skipped (null). Pending is used for unfulfilled &lt;code&gt;$asyncValidators&lt;/code&gt;. Skipped is used by AngularJS when validators do not run because of parse errors and when &lt;code&gt;$asyncValidators&lt;/code&gt; do not run because any of the &lt;code&gt;$validators&lt;/code&gt; failed.</source>
          <target state="translated">현재 상태가 유효한지 (true), 유효하지 않은 (false), 보류중인 (정의되지 않은) 또는 건너 뛴 (null)인지 여부 보류는 &lt;code&gt;$asyncValidators&lt;/code&gt; 사용됩니다 . 구문 분석 오류로 인해 유효성 검사기가 실행 되지 않고 &lt;code&gt;$validators&lt;/code&gt; 중 하나가 실패 하여 $ &lt;code&gt;$asyncValidators&lt;/code&gt; 가 실행되지 않는 경우 AngularJS에서 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="a7d197b14bb22dde26e7930ba72573db4afd74e5" translate="yes" xml:space="preserve">
          <source>Whether the injector should be in strict mode, which disallows argument name annotation inference.</source>
          <target state="translated">인젝터가 엄격 모드에 있어야하는지 여부로 인수 이름 주석 추론이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="64739ed39c37793d5116ffd8cf13bce51648999d" translate="yes" xml:space="preserve">
          <source>Whether to generate an error when a rejected promise is not handled.</source>
          <target state="translated">거부 된 약속이 처리되지 않은 경우 오류를 생성할지 여부</target>
        </trans-unit>
        <trans-unit id="04340f702909efe15652bdcae7630aa8d0a6c6a3" translate="yes" xml:space="preserve">
          <source>Which directives support animations?</source>
          <target state="translated">애니메이션을 지원하는 지시문은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="202e1367c10ec97bf55bcb003c4e2b1a5fb4d701" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;ngMessages&lt;/code&gt; will by default only display one error element at a time, the &lt;code&gt;ng-messages-multiple&lt;/code&gt; attribute can be applied to the &lt;code&gt;ngMessages&lt;/code&gt; container element to cause it to display all applicable error messages at once:</source>
          <target state="translated">&lt;code&gt;ngMessages&lt;/code&gt; 는 기본적으로 한 번에 하나의 오류 요소 만 표시 하지만 &lt;code&gt;ng-messages-multiple&lt;/code&gt; 속성을 &lt;code&gt;ngMessages&lt;/code&gt; 컨테이너 요소에 적용하여 적용 가능한 모든 오류 메시지를 한 번에 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b61c2bda7d6957ce6223a10bb226a52513d7256a" translate="yes" xml:space="preserve">
          <source>While a plural category may match many numbers (for example, in en-US locale, &quot;other&quot; can match any number that is not 1), an explicit number rule can only match one number. For example, the explicit number rule for &quot;3&quot; matches the number 3. There are examples of plural categories and explicit number rules throughout the rest of this documentation.</source>
          <target state="translated">복수 범주가 많은 숫자와 일치 할 수 있지만 (예 : en-US 로케일에서 &quot;other&quot;는 1이 아닌 숫자와 일치 할 수 있음) 명시 적 숫자 규칙은 하나의 숫자 만 일치 할 수 있습니다. 예를 들어, &quot;3&quot;의 명시 적 숫자 규칙은 숫자 3과 일치합니다.이 문서의 나머지 부분에는 복수 범주 및 명시 적 숫자 규칙의 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="65f1a4c7640c97be8f83de892ee1d05acd23dd84" translate="yes" xml:space="preserve">
          <source>While it is recommended to register injectables directly with the &lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;module API&lt;/a&gt;, it is also possible to register services, directives etc. by injecting &lt;a href=&quot;../api/auto/service/%24provide&quot;&gt;$provide&lt;/a&gt; or the individual service providers into the config function:</source>
          <target state="translated">&lt;a href=&quot;../api/ng/type/angular.module&quot;&gt;모듈 API로&lt;/a&gt; 직접 인젝터 블을 등록하는 것이 좋지만 &lt;a href=&quot;../api/auto/service/%24provide&quot;&gt;$ provide&lt;/a&gt; 또는 개별 서비스 제공자를 config 함수 에 삽입하여 서비스, 지시문 등을 등록 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="79ae9ea22fa5db92c007dbd07a4fbcab0aa55fb4" translate="yes" xml:space="preserve">
          <source>While it's possible to bootstrap more than one AngularJS application per page, we don't actively test against this scenario. It's possible that you'll run into problems, especially with complex apps, so caution is advised.</source>
          <target state="translated">페이지 당 둘 이상의 AngularJS 애플리케이션을 부트 스트랩 할 수 있지만이 시나리오에 대해서는 적극적으로 테스트하지 않습니다. 특히 복잡한 앱에서 문제가 발생할 수 있으므로주의해야합니다.</target>
        </trans-unit>
        <trans-unit id="a82dee00b39d8daed1da5528800a8c7ddbde426f" translate="yes" xml:space="preserve">
          <source>While the constructor-style use is supported, not all of the supporting methods from ES6 promises are available yet.</source>
          <target state="translated">생성자 스타일 사용이 지원되지만 ES6 약속의 모든 지원 방법을 아직 사용할 수있는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="6cf978fc045daec3f25c0b99dc31760cd612ada9" translate="yes" xml:space="preserve">
          <source>While the example above is simple, it will not scale to large applications. Instead we recommend that you break your application to multiple modules like this:</source>
          <target state="translated">위의 예는 간단하지만 큰 응용 프로그램으로 확장되지는 않습니다. 대신 다음과 같이 응용 프로그램을 여러 모듈로 나누는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="fc6d8b80151efa65b509365d35de859e6d9b813c" translate="yes" xml:space="preserve">
          <source>While this may seem obvious it can be very difficult to call an individual function on a typical project. The reason is that the developers often mix concerns resulting in a piece of code which does everything. It makes an XHR request, it sorts the response data, and then it manipulates the DOM.</source>
          <target state="translated">이것이 명백해 보이지만 전형적인 프로젝트에서 개별 함수를 호출하는 것은 매우 어려울 수 있습니다. 그 이유는 개발자가 종종 우려 사항을 혼합하여 모든 작업을 수행하는 코드를 생성하기 때문입니다. XHR 요청을 만들고 응답 데이터를 정렬 한 다음 DOM을 조작합니다.</target>
        </trans-unit>
        <trans-unit id="5d61d9a0a6e161682e0342ed06bfaa12eee85ebc" translate="yes" xml:space="preserve">
          <source>Why Dependency Injection?</source>
          <target state="translated">왜 의존성 주입인가?</target>
        </trans-unit>
        <trans-unit id="669ff9e2a6793d3b75b94d0260040d47b3cbc679" translate="yes" xml:space="preserve">
          <source>Why is !important used?</source>
          <target state="translated">왜 중요한가 사용됩니까?</target>
        </trans-unit>
        <trans-unit id="4616c58d9adc2d069251d8014e9dc1d4fb26a27f" translate="yes" xml:space="preserve">
          <source>Why mixing interpolation and expressions is bad practice:</source>
          <target state="translated">보간과 표현식을 혼합하는 것이 좋지 않은 이유 :</target>
        </trans-unit>
        <trans-unit id="d77989c1e3c0e0ace735631597dc367ffdfa6f32" translate="yes" xml:space="preserve">
          <source>Why?</source>
          <target state="translated">Why?</target>
        </trans-unit>
        <trans-unit id="fe732beca5e5d6794c8f103701bc47f9200286b7" translate="yes" xml:space="preserve">
          <source>Wijmo</source>
          <target state="translated">Wijmo</target>
        </trans-unit>
        <trans-unit id="4e29d9f8eb0462f006ae4c5ebd1af4e619375ebd" translate="yes" xml:space="preserve">
          <source>Window (&lt;code&gt;_blank|_self|_parent|_top&lt;/code&gt;) or named frame to open links in.</source>
          <target state="translated">링크를 열 창 ( &lt;code&gt;_blank|_self|_parent|_top&lt;/code&gt; ) 또는 명명 된 프레임.</target>
        </trans-unit>
        <trans-unit id="fe79e3ee2d8eb6ed6e7fd0f621cd5a2c2e7958e5" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;ng-attr-cx&lt;/code&gt; you can work around this problem.</source>
          <target state="translated">으로 &lt;code&gt;ng-attr-cx&lt;/code&gt; 이 문제를 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92df544bb7dbfe3ed04da3c434faef5602b4df3f" translate="yes" xml:space="preserve">
          <source>With AngularJS, we try to make it easy for you to do the right thing. For your XHR requests, we provide dependency injection, so your requests can be simulated. For the DOM, we abstract it, so you can test your model without having to manipulate the DOM directly. Your tests can then assert that the data has been sorted without having to create or look at the state of the DOM or to wait for any XHR requests to return data. The individual sort function can be tested in isolation.</source>
          <target state="translated">AngularJS를 사용하면 올바른 작업을 쉽게 수행 할 수 있습니다. XHR 요청의 경우 의존성 주입을 제공하므로 요청을 시뮬레이션 할 수 있습니다. DOM의 경우 추상화하여 DOM을 직접 조작하지 않고도 모델을 테스트 할 수 있습니다. 그런 다음 테스트에서 DOM 상태를 만들거나 보거나 XHR 요청이 데이터를 반환 할 때까지 기다리지 않고도 데이터가 정렬되었는지 확인할 수 있습니다. 개별 정렬 기능은 개별적으로 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c904b9835f56cd4b8010fe7952def1410fb5ce78" translate="yes" xml:space="preserve">
          <source>With a custom directive, you can add your own validation functions to the &lt;code&gt;$validators&lt;/code&gt; object on the &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;ngModelController&lt;/code&gt;&lt;/a&gt;. To get a hold of the controller, you require it in the directive as shown in the example below.</source>
          <target state="translated">사용자 지정 지시문 을 사용하면 &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;ngModelController&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;$validators&lt;/code&gt; 객체에 고유 한 유효성 검사 함수를 추가 할 수 있습니다 . 컨트롤러를 잡으려면 아래 예와 같이 지시문에 컨트롤러가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a60123e9d2c9b6a9ca6c91377139ec6cb84cf751" translate="yes" xml:space="preserve">
          <source>With a single &lt;code&gt;boolean&lt;/code&gt; argument, it enables / disables animations globally: &lt;code&gt;$animate.enabled(false)&lt;/code&gt; disables all animations in your app.</source>
          <target state="translated">단일 &lt;code&gt;boolean&lt;/code&gt; 인수를 사용하면 전체적으로 애니메이션을 활성화 / 비활성화합니다. &lt;code&gt;$animate.enabled(false)&lt;/code&gt; 는 앱의 모든 애니메이션을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="0274004d1046e354f1b8c888093840ce67dd401a" translate="yes" xml:space="preserve">
          <source>With great power comes great responsibility</source>
          <target state="translated">큰 힘에는 큰 책임이 따른다</target>
        </trans-unit>
        <trans-unit id="e5f24a86f871dcff0ad29cacea167d5d0ae19285" translate="yes" xml:space="preserve">
          <source>With ngStrictDi</source>
          <target state="translated">ngStrictDi로</target>
        </trans-unit>
        <trans-unit id="6bc76b8300fa6874bf5e467e1724761bef42ad90" translate="yes" xml:space="preserve">
          <source>With that you're ready to get started!</source>
          <target state="translated">이것으로 당신은 시작할 준비가되었습니다!</target>
        </trans-unit>
        <trans-unit id="7169bbb61c830c1a8ef9311d0bf2f73b129f4feb" translate="yes" xml:space="preserve">
          <source>With the options &lt;code&gt;timeSecondsFormat&lt;/code&gt; and &lt;code&gt;timeStripZeroSeconds&lt;/code&gt; it is possible to adjust the value that is displayed in the control. Note that browsers may apply their own formatting in the user interface.</source>
          <target state="translated">&lt;code&gt;timeSecondsFormat&lt;/code&gt; 및 &lt;code&gt;timeStripZeroSeconds&lt;/code&gt; 옵션을 사용하면 컨트롤에 표시되는 값을 조정할 수 있습니다. 브라우저는 사용자 인터페이스에서 자체 형식을 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="87980928967a29927ee2e7486ea2f236908cb941" translate="yes" xml:space="preserve">
          <source>With these generated CSS class names present on the element at the time, AngularJS automatically figures out whether to perform a CSS and/or JavaScript animation. Note that you can't have both CSS and JavaScript animations based on the same CSS class. See &lt;a href=&quot;../api/nganimate#css-js-animations-together.html&quot;&gt;here&lt;/a&gt; for more details.</source>
          <target state="translated">AngularJS는 당시에 생성 된 CSS 클래스 이름이 요소에 존재하면 CSS 및 / 또는 JavaScript 애니메이션을 수행할지 여부를 자동으로 알아냅니다. 동일한 CSS 클래스를 기반으로 CSS 및 JavaScript 애니메이션을 모두 가질 수는 없습니다. 자세한 내용은 &lt;a href=&quot;../api/nganimate#css-js-animations-together.html&quot;&gt;여기&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bc6fe5b6fbbc1fe7d11a4ca05c3c7616c7423766" translate="yes" xml:space="preserve">
          <source>Within this element we then create separate elements for each of the possible errors that &lt;code&gt;myField&lt;/code&gt; could have. The &lt;code&gt;ngMessage&lt;/code&gt; attribute is used to declare which element(s) will appear for which error - for example, setting &lt;code&gt;ng-message=&quot;required&quot;&lt;/code&gt; specifies that this particular element should be displayed when there is no value present for the required field &lt;code&gt;myField&lt;/code&gt; (because the key &lt;code&gt;required&lt;/code&gt; will be &lt;code&gt;true&lt;/code&gt; in the object &lt;code&gt;myForm.myField.$error&lt;/code&gt;).</source>
          <target state="translated">그런 다음이 요소 내에서 &lt;code&gt;myField&lt;/code&gt; 가 가질 수있는 가능한 각 오류에 대해 별도의 요소를 만듭니다 . &lt;code&gt;ngMessage&lt;/code&gt; 의 예를 들면, 설정 - 속성은 요소 (들)는 어느 에러 나타난다 선언하는 데 사용되는 &lt;code&gt;ng-message=&quot;required&quot;&lt;/code&gt; 필수 필드에 대한 값이 존재하지 않을 때 특정 요소가 표시되어야한다고 지정 &lt;code&gt;myField&lt;/code&gt; 가 (때문에 &lt;code&gt;required&lt;/code&gt; 키 는 &lt;code&gt;myForm.myField.$error&lt;/code&gt; 객체에서 &lt;code&gt;true&lt;/code&gt; 입니다 ).</target>
        </trans-unit>
        <trans-unit id="b3b7a4861859ba576e767644c3fb5fc7d5721768" translate="yes" xml:space="preserve">
          <source>Wrap the contents of the directive's element (if &lt;code&gt;transclude&lt;/code&gt; is true).</source>
          <target state="translated">지시문 요소의 내용을 랩핑하십시오 ( &lt;code&gt;transclude&lt;/code&gt; 이 true 인 경우).</target>
        </trans-unit>
        <trans-unit id="72722f4c797732533ba7026d7c3df1c24de1bdad" translate="yes" xml:space="preserve">
          <source>Wraps a raw DOM element or HTML string as a &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; element.</source>
          <target state="translated">원시 DOM 요소 또는 HTML 문자열을 &lt;a href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; 요소 로 래핑합니다 .</target>
        </trans-unit>
        <trans-unit id="f548d42d1d697e0d1a7c80979624da1857e7b6ec" translate="yes" xml:space="preserve">
          <source>Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise. This is useful when you are dealing with an object that might or might not be a promise, or if the promise comes from a source that can't be trusted.</source>
          <target state="translated">가치 일 수도 있고 (제 3 자) 약속 가능한 약속을 $ q 약속으로 묶습니다. 이는 약속 일 수도 있고 아닐 수도있는 개체를 다룰 때 또는 약속을 신뢰할 수없는 출처에서 가져온 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="112f691d9f7b0f7f4199996d2ace4cb10376c810" translate="yes" xml:space="preserve">
          <source>Write a debug message</source>
          <target state="translated">디버그 메시지 작성</target>
        </trans-unit>
        <trans-unit id="7c443f819e3b3e21bba19ef5c0641ab5f0b1a0f1" translate="yes" xml:space="preserve">
          <source>Write a log message</source>
          <target state="translated">로그 메시지 작성</target>
        </trans-unit>
        <trans-unit id="0c268d45897d3597f5960cb0d5bfc9a80c50dc1b" translate="yes" xml:space="preserve">
          <source>Write a warning message</source>
          <target state="translated">경고 메시지 작성</target>
        </trans-unit>
        <trans-unit id="45f921887871d529540460a3b822817a4d735c76" translate="yes" xml:space="preserve">
          <source>Write an error message</source>
          <target state="translated">오류 메시지 작성</target>
        </trans-unit>
        <trans-unit id="7f78db32dc4888f39b2190a2a882a95f3b231138" translate="yes" xml:space="preserve">
          <source>Write an information message</source>
          <target state="translated">정보 메시지 작성</target>
        </trans-unit>
        <trans-unit id="6933a8aedae8c9e62cf74573670c5a9e472a670e" translate="yes" xml:space="preserve">
          <source>Writing Unit Tests that use $http</source>
          <target state="translated">$ http를 사용하는 작문 단위 테스트</target>
        </trans-unit>
        <trans-unit id="c4a1cc5507181a8c87b6fee1ad4eff525f395654" translate="yes" xml:space="preserve">
          <source>Writing your own filter is very easy: just register a new filter factory function with your module. Internally, this uses the &lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt;&lt;code&gt;filterProvider&lt;/code&gt;&lt;/a&gt;. This factory function should return a new filter function which takes the input value as the first argument. Any filter arguments are passed in as additional arguments to the filter function.</source>
          <target state="translated">자신 만의 필터를 작성하는 것은 매우 쉽습니다 : 모듈에 새로운 필터 팩토리 기능을 등록하십시오. 내부적으로 이것은 &lt;a href=&quot;../api/ng/provider/%24filterprovider&quot;&gt; &lt;code&gt;filterProvider&lt;/code&gt; 를&lt;/a&gt; 사용합니다 . 이 팩토리 함수는 입력 값을 첫 번째 인수로 사용하는 새 필터 함수를 반환해야합니다. 모든 필터 인수는 필터 함수에 추가 인수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="b5466fc435a09ee3e765475bc830ed969868c046" translate="yes" xml:space="preserve">
          <source>XSRF</source>
          <target state="translated">XSRF</target>
        </trans-unit>
        <trans-unit id="8fff039853f5c2bbb8a28d056b579c7dcb7d137f" translate="yes" xml:space="preserve">
          <source>YES</source>
          <target state="translated">YES</target>
        </trans-unit>
        <trans-unit id="5397e0583f14f6c88de06b1ef28f460a1fb5b0ae" translate="yes" xml:space="preserve">
          <source>Yes</source>
          <target state="translated">Yes</target>
        </trans-unit>
        <trans-unit id="0682716a71bb47f20dfc13ef2209287ea8964cf9" translate="yes" xml:space="preserve">
          <source>Yes (binds to controller)</source>
          <target state="translated">예 (컨트롤러에 바인딩)</target>
        </trans-unit>
        <trans-unit id="78db440be0ac76a9abe2906ac933955bbdf8e6bb" translate="yes" xml:space="preserve">
          <source>Yes (default &lt;code&gt;function() {}&lt;/code&gt;)</source>
          <target state="translated">예 (기본 &lt;code&gt;function() {}&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="20405af6249fcf2f3cbc25821788782c0960a9d3" translate="yes" xml:space="preserve">
          <source>Yes (default: &lt;code&gt;$ctrl&lt;/code&gt;)</source>
          <target state="translated">예 (기본값 : &lt;code&gt;$ctrl&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="8fa6f7a1c6faa45037571019b52212a0c4d263d5" translate="yes" xml:space="preserve">
          <source>Yes (default: false)</source>
          <target state="translated">예 (기본값 : false)</target>
        </trans-unit>
        <trans-unit id="b2de96ae5856057391d617d6b0650fb35486be33" translate="yes" xml:space="preserve">
          <source>Yes (deprecated)</source>
          <target state="translated">예 (더 이상 사용되지 않음)</target>
        </trans-unit>
        <trans-unit id="3bcedb4f835fb2143087b97ec15aa4e83fe50624" translate="yes" xml:space="preserve">
          <source>Yes, injectable</source>
          <target state="translated">예, 주사 가능</target>
        </trans-unit>
        <trans-unit id="9214e124b8d46401dfc684da1de9c5dd4e767005" translate="yes" xml:space="preserve">
          <source>Yes, you can. However, this is strongly discouraged. SCE gives you a lot of security benefits for little coding overhead. It will be much harder to take an SCE disabled application and either secure it on your own or enable SCE at a later stage. It might make sense to disable SCE for cases where you have a lot of existing code that was written before SCE was introduced and you're migrating them a module at a time. Also do note that this is an app-wide setting, so if you are writing a library, you will cause security bugs applications using it.</source>
          <target state="translated">그래 넌 할수있어. 그러나 이것은 권장하지 않습니다. SCE는 적은 코딩 오버 헤드로 많은 보안 이점을 제공합니다. SCE 비활성화 응용 프로그램을 가져 와서 직접 보호하거나 나중에 SCE를 활성화하는 것이 훨씬 어렵습니다. SCE가 도입되기 전에 작성된 기존 코드가 많고 한 번에 모듈을 마이그레이션하는 경우 SCE를 비활성화하는 것이 좋습니다. 또한 이것은 응용 프로그램 전체 설정이므로 라이브러리를 작성하는 경우 응용 프로그램을 사용하여 보안 버그가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f995d213639053fe3fe26c3f46a1783739820dec" translate="yes" xml:space="preserve">
          <source>You also need to include ES6 shims for browsers that do not support ES6 code (Internet Explorer, iOs &amp;lt; 8, Android &amp;lt; 5.0, Windows Mobile &amp;lt; 10):</source>
          <target state="translated">ES6 코드 (Internet Explorer, iOs &amp;lt;8, Android &amp;lt;5.0, Windows Mobile &amp;lt;10)를 지원하지 않는 브라우저의 ES6 shim도 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="1c96c31bec32911ba04c5e3d3bed2875c7164a10" translate="yes" xml:space="preserve">
          <source>You can add an &lt;code&gt;ng-strict-di&lt;/code&gt; directive on the same element as &lt;code&gt;ng-app&lt;/code&gt; to opt into strict DI mode:</source>
          <target state="translated">&lt;code&gt;ng-app&lt;/code&gt; 와 동일한 요소에 &lt;code&gt;ng-strict-di&lt;/code&gt; 지시문을 추가 할 수 있습니다 엄격한 DI 모드를 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88bbb3b1f6ce9bf8a5d73da2df05cc9c51c2659c" translate="yes" xml:space="preserve">
          <source>You can also access the &lt;code&gt;scope&lt;/code&gt; with &lt;code&gt;this&lt;/code&gt; in your templates:</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; 액세스 할 수도 있습니다 와 함께 &lt;code&gt;this&lt;/code&gt; 템플릿에 :</target>
        </trans-unit>
        <trans-unit id="d51687a76b88f9824bb332d32231a33249f7bc8a" translate="yes" xml:space="preserve">
          <source>You can also include the locale specific js file in the index.html page. For example, if one client requires German locale, you would serve index_de-de.html which will look something like this:</source>
          <target state="translated">index.html 페이지에 로케일 특정 js 파일을 포함 할 수도 있습니다. 예를 들어 한 클라이언트에 독일어 로캘이 필요한 경우 index_de-de.html을 제공하면 다음과 같이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3a9ae66260a1d157f9089d2cc179f9d5301eddf4" translate="yes" xml:space="preserve">
          <source>You can also register services via the &lt;a href=&quot;../api/auto/service/%24provide&quot;&gt;&lt;code&gt;$provide&lt;/code&gt;&lt;/a&gt; service inside of a module's &lt;code&gt;config&lt;/code&gt; function:</source>
          <target state="translated">모듈 내부의 &lt;a href=&quot;../api/auto/service/%24provide&quot;&gt; &lt;code&gt;$provide&lt;/code&gt; &lt;/a&gt; 서비스를 통해 서비스를 등록 할 수도 있습니다. &lt;code&gt;config&lt;/code&gt; 기능 있습니다.</target>
        </trans-unit>
        <trans-unit id="1edb9a1866cb37ee7c8a705d58855e4474dd410b" translate="yes" xml:space="preserve">
          <source>You can also retrieve this information during runtime via the &lt;a href=&quot;../../auto/service/%24injector#modules.html&quot;&gt;&lt;code&gt;$injector.modules&lt;/code&gt;&lt;/a&gt; property:</source>
          <target state="translated">&lt;a href=&quot;../../auto/service/%24injector#modules.html&quot;&gt; &lt;code&gt;$injector.modules&lt;/code&gt; &lt;/a&gt; 를 통해 런타임 중에이 정보를 검색 할 수도 있습니다. 속성을 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0befbcac9d9d01e3b63469abfe82d85e3d9b811" translate="yes" xml:space="preserve">
          <source>You can also specify a default callback parameter name in &lt;code&gt;$http.defaults.jsonpCallbackParam&lt;/code&gt;. Initially this is set to &lt;code&gt;'callback'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$http.defaults.jsonpCallbackParam&lt;/code&gt; 에 기본 콜백 매개 변수 이름을 지정할 수도 있습니다 . 처음에 이것은 &lt;code&gt;'callback'&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d7de2c0112d4f97aedc82feb2a43df55ef558dd" translate="yes" xml:space="preserve">
          <source>You can also use filters in controllers, services, and directives.</source>
          <target state="translated">컨트롤러, 서비스 및 지시문에서 필터를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f24ea7e29cd48bf6faab0eecdf7cb90ba2c45ec3" translate="yes" xml:space="preserve">
          <source>You can also use one of the other &lt;a href=&quot;animations#how-to-selectively-enable-disable-and-skip-animations.html&quot;&gt;strategies to disable animations&lt;/a&gt;.</source>
          <target state="translated">다른 &lt;a href=&quot;animations#how-to-selectively-enable-disable-and-skip-animations.html&quot;&gt;전략&lt;/a&gt; 중 하나 를 사용하여 애니메이션을 비활성화 할 수도 있습니다. .</target>
        </trans-unit>
        <trans-unit id="fe13f233d33f2317c9e1140e034697845e05b195" translate="yes" xml:space="preserve">
          <source>You can augment or replace the default transformations by modifying these properties by adding to or replacing the array.</source>
          <target state="translated">배열을 추가하거나 교체하여 이러한 속성을 수정하여 기본 변환을 확장하거나 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26d14f4eedb4fae61a21533414d119b82202b35c" translate="yes" xml:space="preserve">
          <source>You can change the &lt;code&gt;updateOn&lt;/code&gt; and &lt;code&gt;debounce&lt;/code&gt; configuration to test different scenarios. This is done with &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt;$overrideModelOptions&lt;/a&gt;.</source>
          <target state="translated">다른 시나리오를 테스트하기 위해 &lt;code&gt;updateOn&lt;/code&gt; 및 &lt;code&gt;debounce&lt;/code&gt; 구성을 변경할 수 있습니다 . 이것은 &lt;a href=&quot;../type/ngmodel.ngmodelcontroller#%24overrideModelOptions.html&quot;&gt;$ overrideModelOptions&lt;/a&gt; 로 수행됩니다. .</target>
        </trans-unit>
        <trans-unit id="95f072e3df7c685fac0ab3d9573d46c0869d70b1" translate="yes" xml:space="preserve">
          <source>You can change the sorting order by setting &lt;code&gt;reverse&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. By default, items are sorted in ascending order.</source>
          <target state="translated">&lt;code&gt;reverse&lt;/code&gt; 를 &lt;code&gt;true&lt;/code&gt; 로 설정하여 정렬 순서를 변경할 수 있습니다 . 기본적으로 항목은 오름차순으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="5b7cb231a27ab416f35141ff7bd108e5cc769047" translate="yes" xml:space="preserve">
          <source>You can check for a specific type of tasks only, by specifying a &lt;code&gt;taskType&lt;/code&gt;.</source>
          <target state="translated">다음을 지정하여 특정 유형의 작업 만 확인할 수 있습니다. &lt;code&gt;taskType&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7b4afaad293e0ab8ad424a0b72a63e37e669388" translate="yes" xml:space="preserve">
          <source>You can check whether a control is legitimately disabled for a screen reader by visiting &lt;a href=&quot;chrome://accessibility&quot;&gt;chrome://accessibility&lt;/a&gt; and inspecting &lt;a href=&quot;http://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/&quot;&gt;the accessibility tree&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;chrome://accessibility&quot;&gt;chrome : // accessibility&lt;/a&gt; 를 방문 &lt;a href=&quot;http://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/&quot;&gt;하여 내게 필요한 옵션 트리를&lt;/a&gt; 검사 하여 스크린 리더에 대해 컨트롤이 합법적으로 사용 중지되어 있는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="101c4d02cff99099bc46b58888f7e3b1b5c073de" translate="yes" xml:space="preserve">
          <source>You can compose any directives by using them within templates.</source>
          <target state="translated">템플릿 내에서 지시문을 사용하여 지시문을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b731cd6d9510d79f51557d5ef94ff727e5832fe3" translate="yes" xml:space="preserve">
          <source>You can define routes through &lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$routeProvider&lt;/a&gt;'s API.</source>
          <target state="translated">&lt;a href=&quot;../provider/%24routeprovider&quot;&gt;$ routeProvider&lt;/a&gt; 의 API를 통해 경로를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="31fd1fd68039c2988acf76d4b52a6bd46babbbf5" translate="yes" xml:space="preserve">
          <source>You can delay the model update/validation by using the &lt;code&gt;debounce&lt;/code&gt; key with the &lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; directive. This delay will also apply to parsers, validators and model flags like &lt;code&gt;$dirty&lt;/code&gt; or &lt;code&gt;$pristine&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngmodeloptions&quot;&gt;ngModelOptions&lt;/a&gt; 지시문 과 함께 &lt;code&gt;debounce&lt;/code&gt; 키를 사용하여 모델 업데이트 / 확인을 지연시킬 수 있습니다 . 이 지연은 파서, 유효성 검사기 및 &lt;code&gt;$dirty&lt;/code&gt; 또는 &lt;code&gt;$pristine&lt;/code&gt; 과 같은 모델 플래그에도 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="394cd1db28c6a0eb81e64282e2056f4d03a03ffd" translate="yes" xml:space="preserve">
          <source>You can disallow this method by using strict injection mode.</source>
          <target state="translated">엄격한 주입 모드를 사용하여이 방법을 허용하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2d0006b7fc5df06a67c045557923aa476a252da" translate="yes" xml:space="preserve">
          <source>You can find a community &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;style guide&lt;/a&gt; to help yourself when application grows.</source>
          <target state="translated">응용 프로그램이 커질 때 도움이 되는 커뮤니티 &lt;a href=&quot;https://github.com/johnpapa/angular-styleguide&quot;&gt;스타일 가이드&lt;/a&gt; 를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b4ffdd20ca6d801378c6461b645c060b2afbe103" translate="yes" xml:space="preserve">
          <source>You can find out more about using decorators in the &lt;a href=&quot;../../../guide/decorators&quot;&gt;decorators&lt;/a&gt; guide.</source>
          <target state="translated">&lt;a href=&quot;../../../guide/decorators&quot;&gt;데코레이터&lt;/a&gt; 안내서 에서 데코레이터 사용에 대한 자세한 내용을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d817692a7365bfe66193ce98eb6fc60b3b2851d4" translate="yes" xml:space="preserve">
          <source>You can no longer use the &lt;code&gt;JSON_CALLBACK&lt;/code&gt; string as a placeholder for specifying where the callback parameter value should go.</source>
          <target state="translated">콜백 매개 변수 값의 위치를 ​​지정하기 위해 더 이상 &lt;code&gt;JSON_CALLBACK&lt;/code&gt; 문자열을 자리 표시 자로 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="81b72c68d5c402b72c089494c02ceecaa5f99cad" translate="yes" xml:space="preserve">
          <source>You can override this for input directives whose concept of being empty is different from the default. The &lt;code&gt;checkboxInputType&lt;/code&gt; directive does this because in its case a value of &lt;code&gt;false&lt;/code&gt; implies empty.</source>
          <target state="translated">비어있는 개념이 기본값과 다른 입력 지시문에 대해서는이를 대체 할 수 있습니다. &lt;code&gt;checkboxInputType&lt;/code&gt; 의 케이스에 값 때문에 지시어는이 작업을 수행 &lt;code&gt;false&lt;/code&gt; 비어있는 것을 의미한다.</target>
        </trans-unit>
        <trans-unit id="03e6bebea554786a5c69bfdcefb68b743a5a8836" translate="yes" xml:space="preserve">
          <source>You can package code as reusable modules.</source>
          <target state="translated">코드를 재사용 가능한 모듈로 패키지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1d497079860e0aef5a7334e1b6d3f917d87d536" translate="yes" xml:space="preserve">
          <source>You can pass special characters to &lt;code&gt;$location&lt;/code&gt; service and it will encode them according to rules specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;. When you access the methods:</source>
          <target state="translated">특수 문자를 &lt;code&gt;$location&lt;/code&gt; 서비스에 전달할 수 있으며 &lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986에&lt;/a&gt; 지정된 규칙에 따라 문자를 인코딩합니다 . 메소드에 액세스 할 때 :</target>
        </trans-unit>
        <trans-unit id="9b734f12bf70df0a2e00394730665d5415debb85" translate="yes" xml:space="preserve">
          <source>You can pre-bundle the desired locale file with AngularJS by concatenating the content of the locale-specific file to the end of &lt;code&gt;angular.js&lt;/code&gt; or &lt;code&gt;angular.min.js&lt;/code&gt; file.</source>
          <target state="translated">로케일 특정 파일의 컨텐츠를 &lt;code&gt;angular.js&lt;/code&gt; 또는 &lt;code&gt;angular.min.js&lt;/code&gt; 파일 의 끝에 연결하여 AngularJS로 원하는 로케일 파일을 사전 번들 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="85dc3a060a6c674c82381f94eb04968eb861374e" translate="yes" xml:space="preserve">
          <source>You can prevent this unwanted behavior by adding CSS to the &lt;code&gt;.ng-animate&lt;/code&gt; class, that is added for the whole duration of each animation. Simply overwrite the transition / animation duration. In the case of the spinner, this would be:</source>
          <target state="translated">CSS를 &lt;code&gt;.ng-animate&lt;/code&gt; 클래스 에 추가하여 원치 않는 동작을 방지 할 수 있습니다 . 각 애니메이션의 전체 지속 시간 동안 추가됩니다. 전환 / 애니메이션 지속 시간을 덮어 씁니다. 스피너의 경우 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6def1729bd1768b2cd779c4ef6b6f8325f5c9a2f" translate="yes" xml:space="preserve">
          <source>You can see the state of a router by inspecting the read-only field &lt;code&gt;router.navigating&lt;/code&gt;. This may be useful for showing a spinner, for instance.</source>
          <target state="translated">읽기 전용 필드 &lt;code&gt;router.navigating&lt;/code&gt; 을 검사하여 라우터의 상태를 확인할 수 있습니다 . 예를 들어 스피너를 표시하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b352ff8d883043445bd8981d7dc50aa0f230033" translate="yes" xml:space="preserve">
          <source>You can specify &lt;code&gt;templateUrl&lt;/code&gt; as a string representing the URL or as a function which takes two arguments &lt;code&gt;tElement&lt;/code&gt; and &lt;code&gt;tAttrs&lt;/code&gt; (described in the &lt;code&gt;compile&lt;/code&gt; function api below) and returns a string value representing the url. In either case, the template URL is passed through &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$sce.getTrustedResourceUrl&lt;/a&gt;.</source>
          <target state="translated">URL을 나타내는 문자열 또는 &lt;code&gt;tElement&lt;/code&gt; 및 &lt;code&gt;tAttrs&lt;/code&gt; 인수 ( 아래 &lt;code&gt;compile&lt;/code&gt; 함수 api에 설명 됨)를 사용하고 URL을 나타내는 문자열 값을 반환하는 함수 로 &lt;code&gt;templateUrl&lt;/code&gt; 을 지정할 수 있습니다 . 어느 경우 든 템플릿 URL은 &lt;a href=&quot;%24sce#getTrustedResourceUrl.html&quot;&gt;$ sce.getTrustedResourceUrl을&lt;/a&gt; 통해 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="5a119aa77141737eb79be52385e2aee416f621dd" translate="yes" xml:space="preserve">
          <source>You can specify an &lt;strong&gt;AngularJS module&lt;/strong&gt; to be used as the root module for the application. This module will be loaded into the &lt;a href=&quot;../../auto/service/%24injector&quot;&gt;&lt;code&gt;$injector&lt;/code&gt;&lt;/a&gt; when the application is bootstrapped. It should contain the application code needed or have dependencies on other modules that will contain the code. See &lt;a href=&quot;../function/angular.module&quot;&gt;&lt;code&gt;angular.module&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">애플리케이션의 루트 모듈로 사용할 &lt;strong&gt;AngularJS 모듈&lt;/strong&gt; 을 지정할 수 있습니다 . 이 모듈은 응용 프로그램이 부트 스트랩 될 때 &lt;a href=&quot;../../auto/service/%24injector&quot;&gt; &lt;code&gt;$injector&lt;/code&gt; &lt;/a&gt; 로드됩니다 . 필요한 애플리케이션 코드를 포함하거나 코드를 포함 할 다른 모듈에 대한 종속성이 있어야합니다. 자세한 내용은 &lt;a href=&quot;../function/angular.module&quot;&gt; &lt;code&gt;angular.module&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="83e67cbe288ebfb9dc5625d108d58f784c85db1d" translate="yes" xml:space="preserve">
          <source>You can specify that all undefined settings are automatically inherited from an ancestor by including a property with key of &lt;code&gt;&quot;*&quot;&lt;/code&gt; and value of &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt;.</source>
          <target state="translated">키가 &lt;code&gt;&quot;*&quot;&lt;/code&gt; 이고 값이 &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt; 속성을 포함하여 정의되지 않은 모든 설정이 조상으로부터 자동으로 상속되도록 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b455448fb10c3feb0f72d94c3ebc50d20590d06" translate="yes" xml:space="preserve">
          <source>You can specify that an &lt;code&gt;ngModelOptions&lt;/code&gt; setting should be inherited from a parent &lt;code&gt;ngModelOptions&lt;/code&gt; directive by giving it the value of &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt;. Then it will inherit that setting from the first &lt;code&gt;ngModelOptions&lt;/code&gt; directive found by traversing up the DOM tree. If there is no ancestor element containing an &lt;code&gt;ngModelOptions&lt;/code&gt; directive then default settings will be used.</source>
          <target state="translated">&quot; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;code&gt;&quot;$inherit&quot;&lt;/code&gt; 값을 지정하여 ngModelOptions 설정을 상위 &lt;code&gt;ngModelOptions&lt;/code&gt; 지시문 에서 상속 하도록 지정할 수 있습니다 . 그런 다음 DOM 트리를 탐색하여 찾은 첫 번째 &lt;code&gt;ngModelOptions&lt;/code&gt; 지시문 에서 해당 설정을 상속합니다 . &lt;code&gt;ngModelOptions&lt;/code&gt; 지시문을 포함하는 조상 요소가 없으면 기본 설정이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cee8cd455fdb5702144ad7cd54e9ed881038580b" translate="yes" xml:space="preserve">
          <source>You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name as the value of the &lt;code&gt;ng-transclude&lt;/code&gt; or &lt;code&gt;ng-transclude-slot&lt;/code&gt; attribute.</source>
          <target state="translated">슬롯 이름을 &lt;code&gt;ng-transclude&lt;/code&gt; 또는 &lt;code&gt;ng-transclude-slot&lt;/code&gt; 속성 값으로 제공하여 기본 슬롯 대신 이름이 지정된 변환 슬롯을 삽입하도록 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bda3f14d47124d3a0cc71d6522064e0dae9bd21" translate="yes" xml:space="preserve">
          <source>You can specify the timezone that date/time input directives expect by providing its name in the &lt;code&gt;timezone&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;timezone&lt;/code&gt; 특성에 이름을 제공하여 날짜 / 시간 입력 지시문이 예상하는 시간대를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d238ae2804d6180fbe63f8987fedec23e3737291" translate="yes" xml:space="preserve">
          <source>You can specify which of the CSP related AngularJS features should be deactivated by providing a value for the &lt;code&gt;ng-csp&lt;/code&gt; attribute. The options are as follows:</source>
          <target state="translated">&lt;code&gt;ng-csp&lt;/code&gt; 속성 값을 제공하여 비활성화해야 할 CSP 관련 AngularJS 기능을 지정할 수 있습니다 . 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7a6cfaefefd7e989f4c8416822c363b3e888bae2" translate="yes" xml:space="preserve">
          <source>You can think of a module as a container for the different parts of your app &amp;ndash; controllers, services, filters, directives, etc.</source>
          <target state="translated">모듈을 앱의 다른 부분 (컨트롤러, 서비스, 필터, 지시문 등)의 컨테이너로 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46083d20e43265af397b4bfea5060f6934b0e4f7" translate="yes" xml:space="preserve">
          <source>You can think of the scope and its properties as the data which is used to render the view. The scope is the single source-of-truth for all things view related.</source>
          <target state="translated">범위와 해당 속성을 뷰를 렌더링하는 데 사용되는 데이터로 생각할 수 있습니다. 범위는 모든 사물보기와 관련된 단일 진실 소스입니다.</target>
        </trans-unit>
        <trans-unit id="bb7e801aed6bfa3b80705913fe37098596068e96" translate="yes" xml:space="preserve">
          <source>You can try evaluating different expressions here:</source>
          <target state="translated">여기에서 다른 표현을 평가 해 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01fb93ff7e945210b06d2632d87e6c20f7132855" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;%24injector#modules.html&quot;&gt;&lt;code&gt;$injector.modules&lt;/code&gt;&lt;/a&gt; to check whether a module has been loaded into the injector, which may indicate whether the script has been executed already.</source>
          <target state="translated">&lt;a href=&quot;%24injector#modules.html&quot;&gt; &lt;code&gt;$injector.modules&lt;/code&gt; &lt;/a&gt; 를 사용 하여 모듈이 인젝터에로드되었는지 여부를 확인할 수 있으며 이는 스크립트가 이미 실행되었는지 여부를 나타낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fea4b46d76068b50a2610c7aa3ba09e4bbacf753" translate="yes" xml:space="preserve">
          <source>You can use &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt;&lt;code&gt;$animate.pin(element, parentHost)&lt;/code&gt;&lt;/a&gt; to associate an element with another element that belongs to your application. Simply call it before the element is added to the DOM / before the animation starts, with the element you want to animate, and the element which should be its assumed parent.</source>
          <target state="translated">당신이 사용할 수있는 &lt;a href=&quot;../api/ng/service/%24animate#pin.html&quot;&gt; &lt;code&gt;$animate.pin(element, parentHost)&lt;/code&gt; &lt;/a&gt; 응용 프로그램에 속한 다른 요소와 요소를 연결합니다. 애니메이션을 시작하려는 요소와 애니메이션이 시작되기 전에 요소를 DOM에 추가하기 전에 호출하고 요소를 해당 부모로 가정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="90d096931a4a9014361011def3c70b0d88433ec1" translate="yes" xml:space="preserve">
          <source>You can use a set of closed braces (&lt;code&gt;{}&lt;/code&gt;) as a placeholder for the number that you want substituted into pluralized strings. In the previous example, AngularJS will replace &lt;code&gt;{}&lt;/code&gt; with &lt;code&gt;{{personCount}}&lt;/code&gt;. The closed braces &lt;code&gt;{}&lt;/code&gt; is a placeholder for {{numberExpression}}.</source>
          <target state="translated">복수 문자열로 대체하려는 숫자의 자리 표시 자로 닫힌 중괄호 ( &lt;code&gt;{}&lt;/code&gt; )를 사용할 수 있습니다 . 이전 예에서 AngularJS는 &lt;code&gt;{}&lt;/code&gt; 을 &lt;code&gt;{{personCount}}&lt;/code&gt; 로 대체 합니다. 닫힌 중괄호 &lt;code&gt;{}&lt;/code&gt; 는 {{numberExpression}}의 자리 표시 자입니다.</target>
        </trans-unit>
        <trans-unit id="5751169a6fe8d45d1d7e022ef3cd59712b6c869a" translate="yes" xml:space="preserve">
          <source>You can use interceptors to transform the request or response, perform additional operations, and modify the returned instance/collection. The following example, uses &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt; interceptors to augment the returned instance with additional info:</source>
          <target state="translated">인터셉터를 사용하여 요청 또는 응답을 변환하고 추가 조작을 수행하며 리턴 된 인스턴스 / 컬렉션을 수정할 수 있습니다. 다음 예제는 &lt;code&gt;request&lt;/code&gt; 및 &lt;code&gt;response&lt;/code&gt; 인터셉터를 사용 하여 추가 정보로 리턴 된 인스턴스를 기능 보강합니다.</target>
        </trans-unit>
        <trans-unit id="48fdf349ff70b287ccf87f104b20e5eb02329746" translate="yes" xml:space="preserve">
          <source>You can use one of the following two ways to specify what javascript method should be called when a form is submitted:</source>
          <target state="translated">다음 두 가지 방법 중 하나를 사용하여 양식을 제출할 때 어떤 JavaScript 메소드를 호출해야하는지 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07a40d48550dced6bc4ecac1abed1172cae9631a" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;*&lt;/code&gt; key to specify a debounce value that applies to all events that are not specifically listed. In the following example, &lt;code&gt;mouseup&lt;/code&gt; would have a debounce delay of 1000:</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 키를 사용하여 구체적으로 나열되지 않은 모든 이벤트에 적용되는 디 바운스 값을 지정할 수 있습니다 . 다음 예제에서 &lt;code&gt;mouseup&lt;/code&gt; 은 디 바운스 지연이 1000입니다.</target>
        </trans-unit>
        <trans-unit id="d05623d5cd6b9d05013708bdfc786b9260096b60" translate="yes" xml:space="preserve">
          <source>You can use these values in the following combinations:</source>
          <target state="translated">이 값을 다음 조합으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="263ffe9bf05101cfe6ef8170633d8aab69c73c0c" translate="yes" xml:space="preserve">
          <source>You can use this property to find out information about a module via the &lt;a href=&quot;../../ng/type/angular.module#info.html&quot;&gt;&lt;code&gt;myModule.info(...)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이 특성을 사용하여 &lt;a href=&quot;../../ng/type/angular.module#info.html&quot;&gt; &lt;code&gt;myModule.info(...)&lt;/code&gt; &lt;/a&gt; 메소드 를 통해 모듈에 대한 정보를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e06feb7fe4556feaddf828bb776f3d4141d0137a" translate="yes" xml:space="preserve">
          <source>You can work around this Internet Explorer issue by using &lt;code&gt;ng-attr-placeholder&lt;/code&gt; instead of &lt;code&gt;placeholder&lt;/code&gt; on textareas, whenever you need interpolation in the placeholder value. You can find more details on &lt;code&gt;ngAttr&lt;/code&gt; in the &lt;a href=&quot;../../../guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes.html&quot;&gt;Interpolation&lt;/a&gt; section of the Developer Guide.</source>
          <target state="translated">자리 표시 자 값에 보간이 필요할 때마다 텍스트 영역에서 &lt;code&gt;placeholder&lt;/code&gt; &lt;code&gt;ng-attr-placeholder&lt;/code&gt; 대신 ng-attr-placeholder 를 사용하여이 Internet Explorer 문제를 해결할 수 있습니다 . &lt;code&gt;ngAttr&lt;/code&gt; 에 대한 자세한 내용 은 개발자 안내서 의 &lt;a href=&quot;../../../guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes.html&quot;&gt;보간&lt;/a&gt; 섹션 에서 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8ac5062f58db70425ec02718519256c0e23fa9ef" translate="yes" xml:space="preserve">
          <source>You can write localizable plural and gender based messages in AngularJS interpolation expressions and &lt;code&gt;$interpolate&lt;/code&gt; calls.</source>
          <target state="translated">AngularJS 보간 표현식과 &lt;code&gt;$interpolate&lt;/code&gt; 호출 에서 현지화 가능한 복수 및 성별 기반 메시지를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce12a7493c6ecee3f467f8d9177628fab6c55d2f" translate="yes" xml:space="preserve">
          <source>You can't declare functions or create regular expressions from within AngularJS expressions. This is to avoid complex model transformation logic inside templates. Such logic is better placed in a controller or in a dedicated filter where it can be tested properly.</source>
          <target state="translated">AngularJS 표현식 내에서 함수를 선언하거나 정규 표현식을 작성할 수 없습니다. 이는 템플릿 내에서 복잡한 모델 변환 논리를 피하기위한 것입니다. 이러한 로직은 컨트롤러 또는 전용 필터에 배치하여 올바르게 테스트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fa7a3275cffe456f2eb657d1f253178c3dc76c7" translate="yes" xml:space="preserve">
          <source>You cannot call &lt;code&gt;sharedInjector()&lt;/code&gt; from within a context already using &lt;code&gt;sharedInjector()&lt;/code&gt;.</source>
          <target state="translated">이미 &lt;code&gt;sharedInjector()&lt;/code&gt; 사용하는 컨텍스트 내에서 &lt;code&gt;sharedInjector()&lt;/code&gt; 를 호출 할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="77d8fda0634d7c68c1d8703be68103783c2c733c" translate="yes" xml:space="preserve">
          <source>You cannot spy on &lt;code&gt;angular.element&lt;/code&gt; if you are using Jasmine version 1.x. See &lt;a href=&quot;https://github.com/angular/angular.js/issues/14251&quot;&gt;https://github.com/angular/angular.js/issues/14251&lt;/a&gt; for more information.</source>
          <target state="translated">Jasmine 버전 1.x를 사용하는 경우 &lt;code&gt;angular.element&lt;/code&gt; 를 감시 할 수 없습니다 . 자세한 내용은 &lt;a href=&quot;https://github.com/angular/angular.js/issues/14251&quot;&gt;https://github.com/angular/angular.js/issues/14251&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="018339fa9294575012128284f4fe322332b53dbc" translate="yes" xml:space="preserve">
          <source>You cannot use Unicode characters for variable names in the &lt;a href=&quot;ng/directive/ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;ng/directive/ngoptions&quot;&gt;&lt;code&gt;ngOptions&lt;/code&gt;&lt;/a&gt; expressions (e.g. &lt;code&gt;ng-repeat=&quot;f in поля&quot;&lt;/code&gt;), because even with &lt;code&gt;ngParseExt&lt;/code&gt; included, these special expressions are not parsed by the &lt;a href=&quot;ng/service/%24parse&quot;&gt;&lt;code&gt;$parse&lt;/code&gt;&lt;/a&gt; service.</source>
          <target state="translated">&lt;code&gt;ngParseExt&lt;/code&gt; 를 포함 하더라도 &lt;a href=&quot;ng/service/%24parse&quot;&gt; &lt;code&gt;$parse&lt;/code&gt; &lt;/a&gt; 서비스 는 이러한 특수 표현식을 구문 분석하지 않기 때문에 &lt;a href=&quot;ng/directive/ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;ng/directive/ngoptions&quot;&gt; &lt;code&gt;ngOptions&lt;/code&gt; &lt;/a&gt; 표현식 (예 : &lt;code&gt;ng-repeat=&quot;f in поля&quot;&lt;/code&gt; ) 에서 변수 이름으로 유니 코드 문자를 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="82db794867be25f27eff07c0ebfe6ef16a361fd2" translate="yes" xml:space="preserve">
          <source>You configure ngPluralize by providing 2 attributes: &lt;code&gt;count&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt;. You can also provide an optional attribute, &lt;code&gt;offset&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 및 &lt;code&gt;when&lt;/code&gt; 속성을 제공하여 ngPluralize를 구성합니다 . 선택적 속성 인 &lt;code&gt;offset&lt;/code&gt; 을 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7a92bea5f50a4fe4227230c04e414a92ac0d6314" translate="yes" xml:space="preserve">
          <source>You define a response to a request by chaining a call to &lt;code&gt;respond()&lt;/code&gt; onto a definition or expectation. If you provide a &lt;strong&gt;callback&lt;/strong&gt; as the first parameter to &lt;code&gt;respond(callback)&lt;/code&gt; then you can dynamically generate a response based on the properties of the request.</source>
          <target state="translated">&lt;code&gt;respond()&lt;/code&gt; 호출을 정의 또는 기대 에 연결하여 요청에 대한 응답을 정의합니다 . response &lt;code&gt;respond(callback)&lt;/code&gt; 의 첫 번째 매개 변수로 &lt;strong&gt;콜백&lt;/strong&gt; 을 제공 하면 요청 속성에 따라 동적으로 응답을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b530477dd3a42f3e637e20d02b029d89614e05e" translate="yes" xml:space="preserve">
          <source>You may also bypass sanitization for values you know are safe. To do so, bind to an explicitly trusted value via &lt;a href=&quot;../service/%24sce#trustAsHtml.html&quot;&gt;$sce.trustAsHtml&lt;/a&gt;. See the example under &lt;a href=&quot;../service/%24sce#show-me-an-example-using-sce-.html&quot;&gt;Strict Contextual Escaping (SCE)&lt;/a&gt;.</source>
          <target state="translated">안전한 것으로 판단되는 값에 대해서는 위생 처리를 무시할 수도 있습니다. 그렇게하려면 &lt;a href=&quot;../service/%24sce#trustAsHtml.html&quot;&gt;$ sce.trustAsHtml을&lt;/a&gt; 통해 명시 적으로 신뢰할 수있는 값에 바인딩 하십시오 . &lt;a href=&quot;../service/%24sce#show-me-an-example-using-sce-.html&quot;&gt;SCE (Strict Contextual Escaping)&lt;/a&gt; 아래 예제를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ccf7fee42b89952589b444c9ec99cb8e2d50cc8c" translate="yes" xml:space="preserve">
          <source>You may also want to setup a separate CSS file for defining CSS-based animations.</source>
          <target state="translated">CSS 기반 애니메이션을 정의하기 위해 별도의 CSS 파일을 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="af0393d281a0768d6f723f736ccec7c3b256d9bd" translate="yes" xml:space="preserve">
          <source>You may be wondering why &lt;code&gt;!important&lt;/code&gt; is used for the &lt;code&gt;.ng-hide&lt;/code&gt; CSS class. This is because the &lt;code&gt;.ng-hide&lt;/code&gt; selector can be easily overridden by heavier selectors. For example, something as simple as changing the display style on a HTML list item would make hidden elements appear visible. This also becomes a bigger issue when dealing with CSS frameworks.</source>
          <target state="translated">&lt;code&gt;!important&lt;/code&gt; 가 &lt;code&gt;.ng-hide&lt;/code&gt; CSS 클래스에 왜 사용 되는지 궁금 할 것 입니다. &lt;code&gt;.ng-hide&lt;/code&gt; 선택기는 무거운 선택기에 의해 쉽게 재정의 될 수 있기 때문 입니다. 예를 들어 HTML 목록 항목에서 표시 스타일을 변경하는 것만 큼 간단한 방법으로 숨겨진 요소를 볼 수 있습니다. 이것은 CSS 프레임 워크를 다룰 때 더 큰 문제가됩니다.</target>
        </trans-unit>
        <trans-unit id="da49d4f2bcb633f38bc6cc9dce6a58efe4115346" translate="yes" xml:space="preserve">
          <source>You may find it helpful to play with the following example as you read the explanations below:</source>
          <target state="translated">아래 설명을 읽으면서 다음 예제를 사용하면 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="605dd76e4ddd6491f31f4de2f358fa35adf6f2ab" translate="yes" xml:space="preserve">
          <source>You may want to disable the default behavior when unit-testing modules that depend on &lt;code&gt;ngRoute&lt;/code&gt;, in order to avoid an unexpected request for the default route's template.</source>
          <target state="translated">기본 경로 템플릿에 대한 예기치 않은 요청을 피하기 위해 &lt;code&gt;ngRoute&lt;/code&gt; 에 의존하는 단위 테스트 모듈에서 기본 동작을 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f2e00b178abf5124fd75182086557120e8701b5" translate="yes" xml:space="preserve">
          <source>You may want to disable this in production for a significant performance boost. See &lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;Disabling Debug Data&lt;/a&gt; for more.</source>
          <target state="translated">상당한 성능 향상을 위해 프로덕션 환경에서이 기능을 비활성화 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;../../../guide/production#disabling-debug-data.html&quot;&gt;디버그 데이터 비활성화를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbe35a7e05fed427062fb336bdada506f2694242" translate="yes" xml:space="preserve">
          <source>You might also be interested in an in-depth explanation of the compilation process that's available in the &lt;a href=&quot;compiler&quot;&gt;compiler guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;compiler&quot;&gt;컴파일러 안내서&lt;/a&gt; 에서 사용할 수있는 컴파일 프로세스에 대한 자세한 설명이 필요할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0cb1f5c75cf0eca323a45284e434512ab65554de" translate="yes" xml:space="preserve">
          <source>You need to require the &lt;code&gt;ngAnimateMock&lt;/code&gt; module in your test suite for instance &lt;code&gt;beforeEach(module('ngAnimateMock'))&lt;/code&gt;</source>
          <target state="translated">예를 들어 &lt;code&gt;beforeEach(module('ngAnimateMock'))&lt;/code&gt; 과 같이 테스트 스위트에 &lt;code&gt;ngAnimateMock&lt;/code&gt; 모듈 이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="df9ca6c1a182b06893d38928adf19d45fa7352c6" translate="yes" xml:space="preserve">
          <source>You should avoid dynamically changing the content of an interpolated string (e.g. attribute value or text node). Your changes are likely to be overwritten, when the original string gets evaluated. This restriction applies to both directly changing the content via JavaScript or indirectly using a directive.</source>
          <target state="translated">보간 된 문자열의 내용 (예 : 속성 값 또는 텍스트 노드)을 동적으로 변경하지 않아야합니다. 원래 문자열이 평가 될 때 변경 사항을 덮어 쓰게됩니다. 이 제한 사항은 JavaScript를 통해 컨텐츠를 직접 변경하거나 지시문을 간접적으로 사용하여 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="0812fdddd6459d04d8044a62593320f963934181" translate="yes" xml:space="preserve">
          <source>You should avoid generating the URL for the JSONP request from user provided data. Provide additional query parameters via &lt;code&gt;params&lt;/code&gt; property of the &lt;code&gt;config&lt;/code&gt; parameter, rather than modifying the URL itself.</source>
          <target state="translated">사용자 제공 데이터에서 JSONP 요청에 대한 URL을 생성하지 않아야합니다. URL 자체를 수정하지 않고 &lt;code&gt;config&lt;/code&gt; 매개 변수 의 &lt;code&gt;params&lt;/code&gt; 속성을 통해 추가 쿼리 매개 변수를 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="18cb9bb0017681d3d8101f157e43e02a6c34118b" translate="yes" xml:space="preserve">
          <source>You should call &lt;code&gt;angular.bootstrap()&lt;/code&gt;&lt;em&gt;after&lt;/em&gt; you've loaded or defined your modules. You cannot add controllers, services, directives, etc after an application bootstraps.</source>
          <target state="translated">모듈을로드하거나 정의한 &lt;em&gt;후에 &lt;/em&gt; &lt;code&gt;angular.bootstrap()&lt;/code&gt; &lt;em&gt;을&lt;/em&gt; 호출해야 합니다. 응용 프로그램 부트 스트랩 후에는 컨트롤러, 서비스, 지시문 등을 추가 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="708894bed891642020be330ee41f65279a12308c" translate="yes" xml:space="preserve">
          <source>You should instead delegate the computation of complex expressions to the scope, like this:</source>
          <target state="translated">대신 복잡한 식 계산을 다음과 같이 범위에 위임해야합니다.</target>
        </trans-unit>
        <trans-unit id="00d05d0613122422197d607d0f5d480b82b7256a" translate="yes" xml:space="preserve">
          <source>You should never need to use this service directly, instead use the higher-level abstractions: &lt;a href=&quot;%24http&quot;&gt;$http&lt;/a&gt; or &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$resource&lt;/a&gt;.</source>
          <target state="translated">이 서비스를 직접 사용할 필요는 없으며,보다 높은 수준의 추상화 인 &lt;a href=&quot;%24http&quot;&gt;$ http&lt;/a&gt; 또는 &lt;a href=&quot;../../ngresource/service/%24resource&quot;&gt;$ resource를 사용하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="8227b8f9162f84070a9b441550a8349a405f2d71" translate="yes" xml:space="preserve">
          <source>You should not modify this object. It should be treated as immutable.</source>
          <target state="translated">이 개체를 수정해서는 안됩니다. 불변 인 것으로 취급해야합니다.</target>
        </trans-unit>
        <trans-unit id="5baf54133cc48e19725486ae5426bdd4a9f40085" translate="yes" xml:space="preserve">
          <source>You should not use &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation&lt;/a&gt; in the value of the &lt;code&gt;class&lt;/code&gt; attribute, when using the &lt;code&gt;ngClass&lt;/code&gt; directive on the same element. See &lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;here&lt;/a&gt; for more info.</source>
          <target state="translated">동일한 요소 에서 &lt;code&gt;ngClass&lt;/code&gt; 지시문을 사용할 때 &lt;code&gt;class&lt;/code&gt; 속성 값에 &lt;a href=&quot;../../../guide/interpolation&quot;&gt;보간&lt;/a&gt; 을 사용해서는 안됩니다 . 자세한 내용은 &lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;여기&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="98d2de094c98f1cd2bdd5d2d54fef7a1683a9b0b" translate="yes" xml:space="preserve">
          <source>You should not use &lt;a href=&quot;../../../guide/interpolation&quot;&gt;interpolation&lt;/a&gt; in the value of the &lt;code&gt;style&lt;/code&gt; attribute, when using the &lt;code&gt;ngStyle&lt;/code&gt; directive on the same element. See &lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;here&lt;/a&gt; for more info.</source>
          <target state="translated">동일한 요소 에서 &lt;code&gt;ngStyle&lt;/code&gt; 지시문을 사용할 때 &lt;code&gt;style&lt;/code&gt; 속성 값에 &lt;a href=&quot;../../../guide/interpolation&quot;&gt;보간&lt;/a&gt; 을 사용해서는 안됩니다 . 자세한 내용은 &lt;a href=&quot;../../../guide/interpolation#known-issues.html&quot;&gt;여기&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c2fbe7ded595dba74eca502191373f662514b48" translate="yes" xml:space="preserve">
          <source>You should use &lt;a href=&quot;%24provide#service.html&quot;&gt;$provide.service(class)&lt;/a&gt; if you define your service as a type/class.</source>
          <target state="translated">당신은 사용해야 &lt;a href=&quot;%24provide#service.html&quot;&gt;$ provide.service (클래스)&lt;/a&gt; 이 유형 / 클래스로 서비스를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="bea982bb9c2f6821b3f44edf8dad402dddc73177" translate="yes" xml:space="preserve">
          <source>You should use the Provider recipe only when you want to expose an API for application-wide configuration that must be made before the application starts. This is usually interesting only for reusable services whose behavior might need to vary slightly between applications.</source>
          <target state="translated">응용 프로그램을 시작하기 전에 작성해야하는 응용 프로그램 전체 구성에 대한 API를 노출하려는 경우에만 제공자 레시피를 사용해야합니다. 이것은 일반적으로 응용 프로그램마다 동작이 약간 다를 수있는 재사용 가능한 서비스에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="189b161d716479306fb70aa6bdfa4c20ff0c5f21" translate="yes" xml:space="preserve">
          <source>You use this behavior by adding &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to an element that has &lt;code&gt;ng-model&lt;/code&gt; attached to it. You can also add &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; to a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, which will enable this behavior for all &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;s within it. See &lt;a href=&quot;ngmodeloptions&quot;&gt;&lt;code&gt;ngModelOptions&lt;/code&gt;&lt;/a&gt; for more.</source>
          <target state="translated">이 동작 은 &lt;code&gt;ng-model&lt;/code&gt; 이 연결된 요소에 &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; 를 추가하여 사용합니다. 또한 추가 할 수 &lt;code&gt;ng-model-options=&quot;{ getterSetter: true }&quot;&lt;/code&gt; A와 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; , 모두를위한이 동작이 활성화됩니다 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 그 안에이야. 자세한 내용은 &lt;a href=&quot;ngmodeloptions&quot;&gt; &lt;code&gt;ngModelOptions&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7ea026120b5159e1c3d1c13abf1a26ff24877e8b" translate="yes" xml:space="preserve">
          <source>You will need to escape curly braces or the &lt;code&gt;#&lt;/code&gt; character inside message texts if you want them to be treated literally with no special meaning. You may quote/escape any character in your message text by preceding it with a &lt;code&gt;\&lt;/code&gt; (backslash) character. The backslash character removes any special meaning to the character that immediately follows it. Therefore, you can escape or quote the backslash itself by preceding it with another backslash character.</source>
          <target state="translated">문자 그대로 특별한 의미없이 처리되도록하려면 중괄호 나 메시지 텍스트 안의 &lt;code&gt;#&lt;/code&gt; 문자 를 이스케이프 처리해야합니다. 메시지 텍스트 앞에 &lt;code&gt;\&lt;/code&gt; (백 슬래시) 문자 를 붙여서 문자를 인용 / 이스케이프 할 수 있습니다 . 백 슬래시 문자는 바로 뒤에 나오는 문자에 대한 특별한 의미를 제거합니다. 따라서 다른 백 슬래시 문자를 사용하여 백 슬래시 자체를 이스케이프하거나 인용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2921d662338c8a9c41ad8161d433030686dc6951" translate="yes" xml:space="preserve">
          <source>You would then inject and use this service like this:</source>
          <target state="translated">그런 다음이 서비스를 다음과 같이 주입하여 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e70f2e38922e0df09ef7e7e8ce8d7191454edd9b" translate="yes" xml:space="preserve">
          <source>```html</source>
          <target state="translated">```html</target>
        </trans-unit>
        <trans-unit id="86f7e437faa5a7fce15d1ddcb9eaeaea377667b8" translate="yes" xml:space="preserve">
          <source>a</source>
          <target state="translated">a</target>
        </trans-unit>
        <trans-unit id="9bb8776e05f401bf226d4252d267bbb3918ac6cc" translate="yes" xml:space="preserve">
          <source>a (directive)</source>
          <target state="translated">(지시)</target>
        </trans-unit>
        <trans-unit id="18b2c9e8cc1c31ba37b4b0c75cc55e65bb713d22" translate="yes" xml:space="preserve">
          <source>a &lt;strong&gt;string&lt;/strong&gt; containing the name of the directive to pass to the linking function</source>
          <target state="translated">연결 함수에 전달할 지시문의 이름이 포함 된 &lt;strong&gt;문자열&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="af7d197c6e53486aa8dd1d58aa11f54606cd204d" translate="yes" xml:space="preserve">
          <source>a callback function called when a change is detected.</source>
          <target state="translated">변경이 감지 될 때 호출되는 콜백 함수</target>
        </trans-unit>
        <trans-unit id="31011fccb5641632048dbe4f55f910c10dc6ced5" translate="yes" xml:space="preserve">
          <source>a container for the different parts of an app including controllers, services, filters, directives which configures the Injector</source>
          <target state="translated">인젝터를 구성하는 컨트롤러, 서비스, 필터, 지시문을 포함하여 앱의 다른 부분에 대한 컨테이너</target>
        </trans-unit>
        <trans-unit id="3ded06ab2199592f273fd39802162cd99749e136" translate="yes" xml:space="preserve">
          <source>a delete button that calls the bound &lt;code&gt;onDelete&lt;/code&gt; function of the heroList component</source>
          <target state="translated">heroList 컴포넌트 의 바운드 &lt;code&gt;onDelete&lt;/code&gt; 함수 를 호출하는 삭제 버튼</target>
        </trans-unit>
        <trans-unit id="32d8a4a7d0456b1b2b1a671c3249e60a44f45f0f" translate="yes" xml:space="preserve">
          <source>a function which represents the compiled expression:</source>
          <target state="translated">컴파일 된 표현식을 나타내는 함수 :</target>
        </trans-unit>
        <trans-unit id="bc00f7308a724af915cc60f837b686441f35ab88" translate="yes" xml:space="preserve">
          <source>a hash of options for the new child that will override the parent's options</source>
          <target state="translated">부모의 옵션을 재정의하는 새 자식 옵션의 해시</target>
        </trans-unit>
        <trans-unit id="706108cda1287413fa8f990c4835b11f413067b0" translate="yes" xml:space="preserve">
          <source>a hash of settings to override the previous options</source>
          <target state="translated">이전 옵션을 무시하는 설정 해시</target>
        </trans-unit>
        <trans-unit id="f05813f5739579fdd1d4b57cb660b6867f734ef7" translate="yes" xml:space="preserve">
          <source>a link function which is used to bind template (a DOM element/tree) to a scope. Where:</source>
          <target state="translated">템플릿 (DOM 요소 / 트리)을 범위에 바인딩하는 데 사용되는 링크 함수 어디:</target>
        </trans-unit>
        <trans-unit id="55695b0bf53f0f8364445a33b3ca2a369f478309" translate="yes" xml:space="preserve">
          <source>a new &lt;code&gt;ModelOptions&lt;/code&gt; object initialized with the given options.</source>
          <target state="translated">지정된 옵션으로 초기화 된 새로운 &lt;code&gt;ModelOptions&lt;/code&gt; 객체</target>
        </trans-unit>
        <trans-unit id="379191e5b7fd6f760277a7555deef3fd119a2078" translate="yes" xml:space="preserve">
          <source>a promise for the HTTP response data of the given URL.</source>
          <target state="translated">주어진 URL의 HTTP 응답 데이터에 대한 약속.</target>
        </trans-unit>
        <trans-unit id="becf8e47f951a02fd2b3105e8eb5160d4e08c6f1" translate="yes" xml:space="preserve">
          <source>a promise that resolves or rejects as soon as one of the &lt;code&gt;promises&lt;/code&gt; resolves or rejects, with the value or reason from that promise.</source>
          <target state="translated">약속 의 가치 또는 이유와 함께 &lt;code&gt;promises&lt;/code&gt; 중 하나가 해결되거나 거부 되 자마자 해결되거나 거부되는 약속.</target>
        </trans-unit>
        <trans-unit id="a5020c7b91f56938a8a85c71f7f5a4fe172243e4" translate="yes" xml:space="preserve">
          <source>a route controller in a &lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$route definition&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/ngroute/provider/%24routeprovider&quot;&gt;$ route 정의&lt;/a&gt; 의 경로 컨트롤러 .</target>
        </trans-unit>
        <trans-unit id="dff4b804ed724a8ff290ba2788703c19231cfda7" translate="yes" xml:space="preserve">
          <source>a serialized string of the argument</source>
          <target state="translated">인수의 직렬화 된 문자열</target>
        </trans-unit>
        <trans-unit id="43daaff24d820f678dcec7a0ed85e0273e11ee74" translate="yes" xml:space="preserve">
          <source>a string value corresponding to the message key.</source>
          <target state="translated">메시지 키에 해당하는 문자열 값</target>
        </trans-unit>
        <trans-unit id="188a7880e1b109e7fc9b2e2e6f2a1becbcd44689" translate="yes" xml:space="preserve">
          <source>a string value corresponding to the remote template.</source>
          <target state="translated">원격 템플릿에 해당하는 문자열 값</target>
        </trans-unit>
        <trans-unit id="d2a9fe0146bf173c8e3a464f80b97a3d24f52244" translate="yes" xml:space="preserve">
          <source>aHrefSanitizationTrustedUrlList([regexp]);</source>
          <target state="translated">aHrefSanitizationTrustedUrlList([regexp]);</target>
        </trans-unit>
        <trans-unit id="414899530854dc40d6f390553e4322f52a52895f" translate="yes" xml:space="preserve">
          <source>aHrefSanitizationWhitelist();</source>
          <target state="translated">aHrefSanitizationWhitelist();</target>
        </trans-unit>
        <trans-unit id="b079c945daaff59541f623646ce5f9d2e0585dd1" translate="yes" xml:space="preserve">
          <source>aHrefSanitizationWhitelist([regexp]);</source>
          <target state="translated">aHrefSanitizationWhitelist([regexp]);</target>
        </trans-unit>
        <trans-unit id="0bfda8d377c2609cd9d50c5b636b767072ce4e18" translate="yes" xml:space="preserve">
          <source>ability to use other services (have dependencies)</source>
          <target state="translated">다른 서비스를 사용할 수있는 능력</target>
        </trans-unit>
        <trans-unit id="ef2d5d4fccdd96167467a3b99c1b7a180c5f7743" translate="yes" xml:space="preserve">
          <source>absUrl();</source>
          <target state="translated">absUrl();</target>
        </trans-unit>
        <trans-unit id="6b7378531c25e5fb815d3a0902f391d65d520c77" translate="yes" xml:space="preserve">
          <source>access variables and functions from the scope</source>
          <target state="translated">범위에서 변수 및 함수에 액세스</target>
        </trans-unit>
        <trans-unit id="326b426f9ac7a96ed6baf62f8838565416d27df8" translate="yes" xml:space="preserve">
          <source>actions</source>
          <target state="translated">actions</target>
        </trans-unit>
        <trans-unit id="58d1bbce297de3c304a9fefc3b483181872a5c6b" translate="yes" xml:space="preserve">
          <source>add</source>
          <target state="translated">add</target>
        </trans-unit>
        <trans-unit id="aec0daec959795395dcc905b9847b0612640147b" translate="yes" xml:space="preserve">
          <source>add and remove</source>
          <target state="translated">추가 및 제거</target>
        </trans-unit>
        <trans-unit id="cc8b8c2195e53bb8255cd71b8e16455a756e3798" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;../api/ng/directive/form#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">추가 및 제거 ( &lt;a href=&quot;../api/ng/directive/form#css-classes.html&quot;&gt;다양한 클래스&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="9c802e4d0f2125c8ccd099abde937d2b0bf2441a" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;../api/ng/directive/ngmodel#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">추가 및 제거 ( &lt;a href=&quot;../api/ng/directive/ngmodel#css-classes.html&quot;&gt;다양한 클래스&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="f281cc8b5a559ab097bfd79225f63810cb81fb0f" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;ng/directive/form#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">추가 및 제거 ( &lt;a href=&quot;ng/directive/form#css-classes.html&quot;&gt;다양한 클래스&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="ffad39d7805a618c642328731b65205c308b4f01" translate="yes" xml:space="preserve">
          <source>add and remove (&lt;a href=&quot;ng/directive/ngmodel#css-classes.html&quot;&gt;various classes&lt;/a&gt;)</source>
          <target state="translated">추가 및 제거 ( &lt;a href=&quot;ng/directive/ngmodel#css-classes.html&quot;&gt;다양한 클래스&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="b5ff19582dcaad51bc41694d9238b32371b5ef56" translate="yes" xml:space="preserve">
          <source>add and remove (the &lt;code&gt;ng-active&lt;/code&gt;/&lt;code&gt;ng-inactive&lt;/code&gt; classes)</source>
          <target state="translated">추가 및 제거 ( &lt;code&gt;ng-active&lt;/code&gt; / &lt;code&gt;ng-inactive&lt;/code&gt; 클래스)</target>
        </trans-unit>
        <trans-unit id="ef3a686b4dece25feec634e5096ce9bfa0ab02e9" translate="yes" xml:space="preserve">
          <source>add and remove (the &lt;code&gt;ng-hide&lt;/code&gt; class)</source>
          <target state="translated">추가 및 제거 ( &lt;code&gt;ng-hide&lt;/code&gt; 클래스)</target>
        </trans-unit>
        <trans-unit id="4606cae7f1920e3c492cfaeabdc8c17954ded6e2" translate="yes" xml:space="preserve">
          <source>addClass</source>
          <target state="translated">addClass</target>
        </trans-unit>
        <trans-unit id="5344edbbbb944d873756285888c51ebfd1edc4eb" translate="yes" xml:space="preserve">
          <source>addClass - &lt;code&gt;{string|null}&lt;/code&gt; - space-separated CSS classes to add to the element</source>
          <target state="translated">addClass- &lt;code&gt;{string|null}&lt;/code&gt; -요소에 추가 할 공백으로 구분 된 CSS 클래스</target>
        </trans-unit>
        <trans-unit id="1ce7c21f30af5f5b10fedbd5346fdf4de554a180" translate="yes" xml:space="preserve">
          <source>addClass(element, className, [options]);</source>
          <target state="translated">addClass (요소, 클래스 이름, [옵션]);</target>
        </trans-unit>
        <trans-unit id="7d5c1898c8ce2da11d160f1391c7b4d49f3e4fa8" translate="yes" xml:space="preserve">
          <source>addClass: function(element, addedClasses, doneFunction, options)</source>
          <target state="translated">addClass : 함수 (요소, addedClasses, doneFunction, 옵션)</target>
        </trans-unit>
        <trans-unit id="8a69fd19bd1b272f2742ad56fc2a3b8cfc501eb3" translate="yes" xml:space="preserve">
          <source>addLiteral(literalName, literalValue);</source>
          <target state="translated">addLiteral (literalName, literalValue);</target>
        </trans-unit>
        <trans-unit id="7355adcfc3b67f4cb2d06cc684bfdbbc71a5354b" translate="yes" xml:space="preserve">
          <source>addPropertySecurityContext(elementName, propertyName, ctx);</source>
          <target state="translated">addPropertySecurityContext (elementName, propertyName, ctx);</target>
        </trans-unit>
        <trans-unit id="333e96f32ede786dad3a524ea79bfedd0348fa8d" translate="yes" xml:space="preserve">
          <source>addValidAttrs(attrs);</source>
          <target state="translated">addValidAttrs(attrs);</target>
        </trans-unit>
        <trans-unit id="93587ca72e1d30ccc9c8bea63361be352f4ff1f6" translate="yes" xml:space="preserve">
          <source>addValidElements(elements);</source>
          <target state="translated">addValidElements(elements);</target>
        </trans-unit>
        <trans-unit id="0e60fa4d785ab2bc105ccf6c990933a65342e4cd" translate="yes" xml:space="preserve">
          <source>additional parameters to the executed function.</source>
          <target state="translated">실행 된 기능에 대한 추가 매개 변수.</target>
        </trans-unit>
        <trans-unit id="94196134a8d9bdb1401da3bc2115cca0f04a7280" translate="yes" xml:space="preserve">
          <source>additionally, the current &lt;code&gt;step&lt;/code&gt; is respected, so the nearest value that satisfies a step is used.</source>
          <target state="translated">additionally, the current &lt;code&gt;step&lt;/code&gt; is respected, so the nearest value that satisfies a step is used.</target>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="translated">after</target>
        </trans-unit>
        <trans-unit id="23df66181ba9e1f5fc4b8bd4eeeae0d7bf480aa4" translate="yes" xml:space="preserve">
          <source>after the ngSwitch contents change and just before the former contents are removed from the DOM</source>
          <target state="translated">ngSwitch 컨텐츠 변경 후 및 이전 컨텐츠가 DOM에서 제거되기 직전에</target>
        </trans-unit>
        <trans-unit id="edfb3ff06c7d19c0160ebeef6b4e7aed6ac4f75f" translate="yes" xml:space="preserve">
          <source>after the ngSwitch contents change and the matched child element is placed inside the container</source>
          <target state="translated">ngSwitch 내용이 변경되고 일치하는 자식 요소가 컨테이너 안에 배치 된 후</target>
        </trans-unit>
        <trans-unit id="0203ff87b54e01303123f3cf6037e798d281c86c" translate="yes" xml:space="preserve">
          <source>aliasing special properties of &lt;a href=&quot;ngrepeat&quot;&gt;&lt;code&gt;ngRepeat&lt;/code&gt;&lt;/a&gt;, as seen in the demo below.</source>
          <target state="translated">아래 데모에서 볼 수 있듯이 &lt;a href=&quot;ngrepeat&quot;&gt; &lt;code&gt;ngRepeat&lt;/code&gt; 의&lt;/a&gt; 특수 속성 앨리어싱</target>
        </trans-unit>
        <trans-unit id="7fd4541bdbf63dfb2866c26ed51bd47d9e487d39" translate="yes" xml:space="preserve">
          <source>all(promises);</source>
          <target state="translated">all(promises);</target>
        </trans-unit>
        <trans-unit id="853ec6940d908211cb464751067ad975ac2f9e24" translate="yes" xml:space="preserve">
          <source>allOrNothing</source>
          <target state="translated">allOrNothing</target>
        </trans-unit>
        <trans-unit id="2f805a6387252234e96b3821364c6eb5940fab41" translate="yes" xml:space="preserve">
          <source>allow read/write access to the current browser location</source>
          <target state="translated">현재 브라우저 위치에 대한 읽기 / 쓰기 액세스 허용</target>
        </trans-unit>
        <trans-unit id="9cb6ff12fb81d5cd585d45ce555565a410036da6" translate="yes" xml:space="preserve">
          <source>amount</source>
          <target state="translated">amount</target>
        </trans-unit>
        <trans-unit id="ae8a168eb2baeaf9900333f86cc98d0863e7118c" translate="yes" xml:space="preserve">
          <source>an &lt;a href=&quot;%24animate#animate.html&quot;&gt;animate()&lt;/a&gt; call that adds and removes classes will fire the &lt;code&gt;setClass&lt;/code&gt; event, but if it either removes or adds classes, it will fire &lt;code&gt;animate&lt;/code&gt; instead.</source>
          <target state="translated">클래스를 추가하고 제거 하는 &lt;a href=&quot;%24animate#animate.html&quot;&gt;animate ()&lt;/a&gt; 호출은 &lt;code&gt;setClass&lt;/code&gt; 이벤트를 발생 시키지만 클래스를 제거하거나 추가하면 대신 &lt;code&gt;animate&lt;/code&gt; 을 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="5465699dad7e5dd0885fad9e0bac00ac26c21aef" translate="yes" xml:space="preserve">
          <source>an &lt;strong&gt;array&lt;/strong&gt; containing the names of directives to pass to the linking function. The argument passed to the linking function will be an array of controllers in the same order as the names in the &lt;code&gt;require&lt;/code&gt; property</source>
          <target state="translated">연결 함수에 전달할 지시문의 이름을 포함 하는 &lt;strong&gt;배열 &lt;/strong&gt;연결 함수에 전달 된 인수는 &lt;code&gt;require&lt;/code&gt; 속성 의 이름과 동일한 순서로 컨트롤러의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="ee788da6d46e8da3b0f49448dd52abefd07cc965" translate="yes" xml:space="preserve">
          <source>an &lt;strong&gt;object&lt;/strong&gt; whose property values are the names of the directives to pass to the linking function. The argument passed to the linking function will also be an object with matching keys, whose values will hold the corresponding controllers.</source>
          <target state="translated">&lt;strong&gt;객체&lt;/strong&gt; 그 속성 값 지시어의 이름이다은 링크 기능을 전달한다. 연결 함수에 전달 된 인수는 일치하는 키가있는 객체이며 해당 값은 해당 컨트롤러를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="05821434eff3a62ba5342040d2111f2be08735ae" translate="yes" xml:space="preserve">
          <source>an AngularJS expression evaluating to a key/value object (this is typically the $error object on an ngModel instance).</source>
          <target state="translated">키 / 값 객체로 평가되는 AngularJS 표현식 (일반적으로 ngModel 인스턴스의 $ error 객체)</target>
        </trans-unit>
        <trans-unit id="5223bbc2ad5e3fff9138baae8bfe21fbad43a2e8" translate="yes" xml:space="preserve">
          <source>an array of modules to load into the application. Each item in the array should be the name of a predefined module or a (DI annotated) function that will be invoked by the injector as a &lt;code&gt;config&lt;/code&gt; block. See: &lt;a href=&quot;../../ng/function/angular.module&quot;&gt;modules&lt;/a&gt;</source>
          <target state="translated">응용 프로그램에로드 할 모듈 배열 배열의 각 항목은 사전 정의 된 모듈의 이름이거나 인젝터가 &lt;code&gt;config&lt;/code&gt; 블록 으로 호출 할 (DI 주석이 달린) 함수 여야 합니다. 참조 : &lt;a href=&quot;../../ng/function/angular.module&quot;&gt;모듈&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="da8d44712011870c5d24be6adc4a4262f3092988" translate="yes" xml:space="preserve">
          <source>an array of modules to load into the application. Each item in the array should be the name of a predefined module or a (DI annotated) function that will be invoked by the injector as a &lt;code&gt;config&lt;/code&gt; block. See: &lt;a href=&quot;angular.module&quot;&gt;modules&lt;/a&gt;</source>
          <target state="translated">응용 프로그램에로드 할 모듈 배열 배열의 각 항목은 사전 정의 된 모듈의 이름이거나 인젝터가 &lt;code&gt;config&lt;/code&gt; 블록 으로 호출 할 (DI 주석이 달린) 함수 여야 합니다. 참조 : &lt;a href=&quot;angular.module&quot;&gt;모듈&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="90631e69762c1d19d90bb8a46a025cb21f8df921" translate="yes" xml:space="preserve">
          <source>an expression value corresponding to the message key.</source>
          <target state="translated">메시지 키에 대응하는 표현 값</target>
        </trans-unit>
        <trans-unit id="45bfa910dd3346062d5b2f2326e6e9dc3d003dab" translate="yes" xml:space="preserve">
          <source>an input to change the hero location, in the form of a reusable editableField component. Instead of manipulating the hero object itself, it sends a changeset upwards to the heroDetail, which sends it upwards to the heroList component, which updates the original data.</source>
          <target state="translated">재사용 가능한 editableField 구성 요소의 형태로 영웅 위치를 변경하기위한 입력. hero 객체 자체를 조작하는 대신 변경 세트를 heroDetail로 보내면 heroList 구성 요소로 보내져 원본 데이터가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="c4f8c3e56d6ea7a98b8ce583803f04e27a178c17" translate="yes" xml:space="preserve">
          <source>an interpolation function which is used to compute the interpolated string. The function has these parameters:</source>
          <target state="translated">보간 된 문자열을 계산하는 데 사용되는 보간 함수 이 기능에는 다음과 같은 매개 변수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="96f5899ab1e42548965ebb0918a658b5082f3063" translate="yes" xml:space="preserve">
          <source>an object for defining configuration options for the application. The following keys are supported:</source>
          <target state="translated">응용 프로그램의 구성 옵션을 정의하기위한 객체 다음 키가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="41b1bb86f322794c4b59d2029143d339dffe9c38" translate="yes" xml:space="preserve">
          <source>an object with start and end methods and details about the animation.</source>
          <target state="translated">애니메이션에 대한 시작 및 종료 방법과 세부 정보가 포함 된 객체</target>
        </trans-unit>
        <trans-unit id="cff5806805287a8a5091b7bfe03e2728bc65d27b" translate="yes" xml:space="preserve">
          <source>an object with the following properties:</source>
          <target state="translated">다음과 같은 속성을 가진 객체 :</target>
        </trans-unit>
        <trans-unit id="4954dcbf2681a7fe5b463d449cf3d333a65ac2c9" translate="yes" xml:space="preserve">
          <source>an optional CSS class that will be applied to the element for the duration of the animation. If this value is left as empty then a CSS class of &lt;code&gt;ng-inline-animate&lt;/code&gt; will be applied to the element. (Note that if no animation is detected then this value will not be applied to the element.)</source>
          <target state="translated">애니메이션 지속 시간 동안 요소에 적용될 선택적 CSS 클래스 이 값을 비워두면 &lt;code&gt;ng-inline-animate&lt;/code&gt; 의 CSS 클래스가 요소에 적용됩니다. 애니메이션이 감지되지 않으면이 값이 요소에 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d26a64bb51575a5bcd5ac9fbf9d191a30bdb33f" translate="yes" xml:space="preserve">
          <source>an optional application &lt;a href=&quot;../function/angular.module&quot;&gt;module&lt;/a&gt; name to load.</source>
          <target state="translated">로드 할 선택적 응용 프로그램 &lt;a href=&quot;../function/angular.module&quot;&gt;모듈&lt;/a&gt; 이름</target>
        </trans-unit>
        <trans-unit id="0488f5c3e9c27a3de0f15222f058d92b00c3b4b3" translate="yes" xml:space="preserve">
          <source>an optional collection of options/styles that will be applied to the element. The object can have the following properties:</source>
          <target state="translated">요소에 적용될 옵션 / 스타일의 선택적 모음. 객체는 다음과 같은 속성을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2c5893ec3808730c9b54a09da7acd2bf4523a33" translate="yes" xml:space="preserve">
          <source>and you have an open redirect at &lt;code&gt;http://myapp.example.com/clickThru?...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;http://myapp.example.com/clickThru?...&lt;/code&gt; 공개 리디렉션이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="842189d4cd0bc95c4173244059d6d935e9356ac8" translate="yes" xml:space="preserve">
          <source>angular-cache</source>
          <target state="translated">angular-cache</target>
        </trans-unit>
        <trans-unit id="d7e63c60af3e6ef654163ec8b1c37cc03f53eaa9" translate="yes" xml:space="preserve">
          <source>angular-gettext</source>
          <target state="translated">angular-gettext</target>
        </trans-unit>
        <trans-unit id="c487ffd8e0d32705e106c533a87219506b11ba3e" translate="yes" xml:space="preserve">
          <source>angular-localization</source>
          <target state="translated">angular-localization</target>
        </trans-unit>
        <trans-unit id="8931440bc4f416e51cbf0352e8eb4d6290f8cb98" translate="yes" xml:space="preserve">
          <source>angular-mocks</source>
          <target state="translated">angular-mocks</target>
        </trans-unit>
        <trans-unit id="c2ae28680459087103593b97c1765a429cde3da8" translate="yes" xml:space="preserve">
          <source>angular-translate</source>
          <target state="translated">angular-translate</target>
        </trans-unit>
        <trans-unit id="aaa278f1b58592edfbbe6ca17892adbdfa0a2687" translate="yes" xml:space="preserve">
          <source>angular.Module</source>
          <target state="translated">angular.Module</target>
        </trans-unit>
        <trans-unit id="e40c3c2a579932b4257eb890dc2cf82cb08001ef" translate="yes" xml:space="preserve">
          <source>angular.UNSAFE_restoreLegacyJqLiteXHTMLReplacement</source>
          <target state="translated">angular.UNSAFE_restoreLegacyJqLiteXHTMLReplacement</target>
        </trans-unit>
        <trans-unit id="acfc966f1c3eefd5dd5b33f6d3dbfe7f9950e7b7" translate="yes" xml:space="preserve">
          <source>angular.bind</source>
          <target state="translated">angular.bind</target>
        </trans-unit>
        <trans-unit id="6ef24dc5123e24ec1e73047cde117ea0f862b2f0" translate="yes" xml:space="preserve">
          <source>angular.bootstrap</source>
          <target state="translated">angular.bootstrap</target>
        </trans-unit>
        <trans-unit id="084f87c8d616dd8a72696e5cf75deae9362862e5" translate="yes" xml:space="preserve">
          <source>angular.copy</source>
          <target state="translated">angular.copy</target>
        </trans-unit>
        <trans-unit id="289117ee4fa89c021b09358307f9d29cb37d8626" translate="yes" xml:space="preserve">
          <source>angular.element</source>
          <target state="translated">angular.element</target>
        </trans-unit>
        <trans-unit id="8afc39aae7b640aac6a01dd764d887dbd319f348" translate="yes" xml:space="preserve">
          <source>angular.equals</source>
          <target state="translated">angular.equals</target>
        </trans-unit>
        <trans-unit id="d873104aaefb9d2c622a0e88dcf407718c2aafa1" translate="yes" xml:space="preserve">
          <source>angular.errorHandlingConfig</source>
          <target state="translated">angular.errorHandlingConfig</target>
        </trans-unit>
        <trans-unit id="ed43f3d91ba70ecd827ccb60e527cfed4540f35a" translate="yes" xml:space="preserve">
          <source>angular.extend</source>
          <target state="translated">angular.extend</target>
        </trans-unit>
        <trans-unit id="cc6fb334efbeace88d8ceda6a5d7209e3118dbcb" translate="yes" xml:space="preserve">
          <source>angular.forEach</source>
          <target state="translated">angular.forEach</target>
        </trans-unit>
        <trans-unit id="62bdb1d8f928bc2bdc3f55efdcf7d77864b06fd0" translate="yes" xml:space="preserve">
          <source>angular.fromJson</source>
          <target state="translated">angular.fromJson</target>
        </trans-unit>
        <trans-unit id="4713e41f57d71e268719a99dfa1156ecc3f56e18" translate="yes" xml:space="preserve">
          <source>angular.identity</source>
          <target state="translated">angular.identity</target>
        </trans-unit>
        <trans-unit id="18fd123be33edd3f46be16fe125cee585e9d6658" translate="yes" xml:space="preserve">
          <source>angular.injector</source>
          <target state="translated">angular.injector</target>
        </trans-unit>
        <trans-unit id="a31286add7fedab0d10de3a6f8a1276a3d044fd7" translate="yes" xml:space="preserve">
          <source>angular.isArray</source>
          <target state="translated">angular.isArray</target>
        </trans-unit>
        <trans-unit id="a54b37a2ae4b2efe3b863e28f197f8bca414e84d" translate="yes" xml:space="preserve">
          <source>angular.isDate</source>
          <target state="translated">angular.isDate</target>
        </trans-unit>
        <trans-unit id="443d8001d6a2cfe5ee7b5dbb4dc43a921d8a655f" translate="yes" xml:space="preserve">
          <source>angular.isDefined</source>
          <target state="translated">angular.isDefined</target>
        </trans-unit>
        <trans-unit id="c5b4400f11a2785d8be78fc0285ab6f07dd0ea79" translate="yes" xml:space="preserve">
          <source>angular.isElement</source>
          <target state="translated">angular.isElement</target>
        </trans-unit>
        <trans-unit id="1626b820c4590a7a3d0f71f624c6eb27ff61c638" translate="yes" xml:space="preserve">
          <source>angular.isFunction</source>
          <target state="translated">angular.isFunction</target>
        </trans-unit>
        <trans-unit id="6215687c5f8e1138ccaeb373658114af663989d4" translate="yes" xml:space="preserve">
          <source>angular.isNumber</source>
          <target state="translated">angular.isNumber</target>
        </trans-unit>
        <trans-unit id="e36c7b6570948cd73e0a796be751f7f1c7580320" translate="yes" xml:space="preserve">
          <source>angular.isObject</source>
          <target state="translated">angular.isObject</target>
        </trans-unit>
        <trans-unit id="e08cee9768a2f187a1f78dbb4130f90b065061e4" translate="yes" xml:space="preserve">
          <source>angular.isString</source>
          <target state="translated">angular.isString</target>
        </trans-unit>
        <trans-unit id="87d70f613ad68ddfbcbb25bf4bae84dbdaba4188" translate="yes" xml:space="preserve">
          <source>angular.isUndefined</source>
          <target state="translated">angular.isUndefined</target>
        </trans-unit>
        <trans-unit id="28df3c32b0096ff9d4f14e07b7084b2fe5df2937" translate="yes" xml:space="preserve">
          <source>angular.merge</source>
          <target state="translated">angular.merge</target>
        </trans-unit>
        <trans-unit id="89245787aa22672a9ec82e9ed193d77097a2e6f6" translate="yes" xml:space="preserve">
          <source>angular.mock</source>
          <target state="translated">angular.mock</target>
        </trans-unit>
        <trans-unit id="1057bc6bd1438c33e847fb263764825ea118f181" translate="yes" xml:space="preserve">
          <source>angular.mock.TzDate</source>
          <target state="translated">angular.mock.TzDate</target>
        </trans-unit>
        <trans-unit id="7ec2b7e84c01f4afbad10499e58ba9f1065a5228" translate="yes" xml:space="preserve">
          <source>angular.mock.dump</source>
          <target state="translated">angular.mock.dump</target>
        </trans-unit>
        <trans-unit id="4e1079a20a1c73595c70f494588e444108f058ab" translate="yes" xml:space="preserve">
          <source>angular.mock.inject</source>
          <target state="translated">angular.mock.inject</target>
        </trans-unit>
        <trans-unit id="0d9140c8b28b1003d4507e89fd0da492bce0f6ee" translate="yes" xml:space="preserve">
          <source>angular.mock.module</source>
          <target state="translated">angular.mock.module</target>
        </trans-unit>
        <trans-unit id="4db998eb9346c0678276d430fd1b6b43e1bfd89b" translate="yes" xml:space="preserve">
          <source>angular.mock.module.sharedInjector</source>
          <target state="translated">angular.mock.module.sharedInjector</target>
        </trans-unit>
        <trans-unit id="2201cf904d4135c875c0348c1491f8238491bda1" translate="yes" xml:space="preserve">
          <source>angular.module</source>
          <target state="translated">angular.module</target>
        </trans-unit>
        <trans-unit id="de91fecfc925b0b2cc27240fee7feb67743a18c8" translate="yes" xml:space="preserve">
          <source>angular.noop</source>
          <target state="translated">angular.noop</target>
        </trans-unit>
        <trans-unit id="b5a10803ae3d33076df4c531c9b92c93bd5fcc7f" translate="yes" xml:space="preserve">
          <source>angular.reloadWithDebugInfo</source>
          <target state="translated">angular.reloadWithDebugInfo</target>
        </trans-unit>
        <trans-unit id="ffb5ee41f2a070bfebdb128f99d8450e49dc3adc" translate="yes" xml:space="preserve">
          <source>angular.toJson</source>
          <target state="translated">angular.toJson</target>
        </trans-unit>
        <trans-unit id="acdaaaa7dc75ed39e2adedd65e5cb3b904c954c5" translate="yes" xml:space="preserve">
          <source>angular.version</source>
          <target state="translated">angular.version</target>
        </trans-unit>
        <trans-unit id="169a3090b90513760e751a009bbdcafd7df68c87" translate="yes" xml:space="preserve">
          <source>angularEvent</source>
          <target state="translated">angularEvent</target>
        </trans-unit>
        <trans-unit id="34a06e08bdac778f5cdfd18ba031db64177c92df" translate="yes" xml:space="preserve">
          <source>animate(element, from, to, [className], [options]);</source>
          <target state="translated">animate (element, from, to, [className], [options]);</target>
        </trans-unit>
        <trans-unit id="14155a2181766fbab4e269351165909947ec1d2f" translate="yes" xml:space="preserve">
          <source>animate: function(element, fromStyles, toStyles, doneFunction, options)</source>
          <target state="translated">애니메이션 : function (element, fromStyles, toStyles, doneFunction, options)</target>
        </trans-unit>
        <trans-unit id="50c35784ca24ea93b1c251c898d50534def5512c" translate="yes" xml:space="preserve">
          <source>animation name</source>
          <target state="translated">애니메이션 이름</target>
        </trans-unit>
        <trans-unit id="87c02be138ad482141b1bf75111827d854ea62d6" translate="yes" xml:space="preserve">
          <source>animation(name, animationFactory);</source>
          <target state="translated">애니메이션 (이름, animationFactory);</target>
        </trans-unit>
        <trans-unit id="163b455b1500578e51ec68fe8d87553e543a7876" translate="yes" xml:space="preserve">
          <source>animationFactory</source>
          <target state="translated">animationFactory</target>
        </trans-unit>
        <trans-unit id="d278a42f8c25340bff558c0af33746ccabb6eeda" translate="yes" xml:space="preserve">
          <source>animationRunner</source>
          <target state="translated">animationRunner</target>
        </trans-unit>
        <trans-unit id="4c5e9e0c2e3f4a31c61cab98557f6c664dcb4a54" translate="yes" xml:space="preserve">
          <source>animationRunner the animation runner</source>
          <target state="translated">animationRunner 애니메이션 러너</target>
        </trans-unit>
        <trans-unit id="1a34f73a15c76cd6560e9bbde1d7e06ae2a5c71d" translate="yes" xml:space="preserve">
          <source>annotate(fn, [strictDi]);</source>
          <target state="translated">주석 (fn, [strictDi]);</target>
        </trans-unit>
        <trans-unit id="f26a883d1c94f85aeae879c2e851936374fdf0a0" translate="yes" xml:space="preserve">
          <source>any non-numerical value is set to &lt;code&gt;(max + min) / 2&lt;/code&gt;.</source>
          <target state="translated">any non-numerical value is set to &lt;code&gt;(max + min) / 2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="50cfea78b44cc7bc3769f7ad6be73b7ef777fe31" translate="yes" xml:space="preserve">
          <source>any number of functions which will be injected using the injector.</source>
          <target state="translated">인젝터를 사용하여 주입 될 기능의 수</target>
        </trans-unit>
        <trans-unit id="cbebd8699f5c656ea45d3945ebb9dd830cb6a101" translate="yes" xml:space="preserve">
          <source>any number of modules which are represented as string aliases or as anonymous module initialization functions. The modules are used to configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an object literal is passed each key-value pair will be registered on the module via &lt;a href=&quot;../../auto/service/%24provide&quot;&gt;$provide&lt;/a&gt;.value, the key being the string name (or token) to associate with the value on the injector.</source>
          <target state="translated">문자열 별명 또는 익명 모듈 초기화 기능으로 표시되는 임의의 수의 모듈. 이 모듈은 인젝터를 구성하는 데 사용됩니다. 'ng'및 'ngMock'모듈이 자동으로로드됩니다. 객체 리터럴이 전달되면 각 키-값 쌍은 &lt;a href=&quot;../../auto/service/%24provide&quot;&gt;$ provide&lt;/a&gt; .value 를 통해 모듈에 등록되며 , 키는 인젝터의 값과 연관되는 문자열 이름 (또는 토큰)입니다.</target>
        </trans-unit>
        <trans-unit id="073409b35c0c0f930de30627faccf49f13191a84" translate="yes" xml:space="preserve">
          <source>any numerical value that is less than the current min val, or greater than the current max val is set to the min / max val respectively.</source>
          <target state="translated">any numerical value that is less than the current min val, or greater than the current max val is set to the min / max val respectively.</target>
        </trans-unit>
        <trans-unit id="b7ec3ce2d598d853d6424780cb28b3afd4e2473d" translate="yes" xml:space="preserve">
          <source>any object to turn into string.</source>
          <target state="translated">문자열로 바꿀 객체.</target>
        </trans-unit>
        <trans-unit id="2fc3755cd6bceda22809a5406c917a80f78fcdc5" translate="yes" xml:space="preserve">
          <source>any string which can contain &lt;code&gt;{{}}&lt;/code&gt; markup.</source>
          <target state="translated">&lt;code&gt;{{}}&lt;/code&gt; 마크 업을 포함 할 수있는 모든 문자열</target>
        </trans-unit>
        <trans-unit id="d8bc79225279efa2fa4466ac1769cf173cdcb84f" translate="yes" xml:space="preserve">
          <source>anyPropertyKey</source>
          <target state="translated">anyPropertyKey</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="e4da0169f8ee9bb9ce2fe06c120e2b8ce022d3f5" translate="yes" xml:space="preserve">
          <source>aria-checked</source>
          <target state="translated">aria-checked</target>
        </trans-unit>
        <trans-unit id="d5fe59cc1871df7168888f1c4f3da7789e897a42" translate="yes" xml:space="preserve">
          <source>aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, input roles</source>
          <target state="translated">aria-checked, aria-valuemin, aria-valuemax, aria-valuenow, aria-invalid, aria-required, 입력 역할</target>
        </trans-unit>
        <trans-unit id="574e314c2ead52924e57153fec36ea9a20af000a" translate="yes" xml:space="preserve">
          <source>aria-disabled</source>
          <target state="translated">aria-disabled</target>
        </trans-unit>
        <trans-unit id="90a7593352d8c689d57f37ffaacbf4c62a6c651b" translate="yes" xml:space="preserve">
          <source>aria-hidden</source>
          <target state="translated">aria-hidden</target>
        </trans-unit>
        <trans-unit id="7795a4309336e0340c95cced20ca0948d629b4a9" translate="yes" xml:space="preserve">
          <source>aria-invalid</source>
          <target state="translated">aria-invalid</target>
        </trans-unit>
        <trans-unit id="9e93023b7188c2db241a52468e43440beb3d4827" translate="yes" xml:space="preserve">
          <source>aria-live</source>
          <target state="translated">aria-live</target>
        </trans-unit>
        <trans-unit id="77b4ddb06eaf152e3dc51d63fbb49c3286acb31f" translate="yes" xml:space="preserve">
          <source>aria-readonly</source>
          <target state="translated">aria-readonly</target>
        </trans-unit>
        <trans-unit id="94bd81e6c0ebe2d9a57e2ba5ac2ee72e5f7afb53" translate="yes" xml:space="preserve">
          <source>aria-required</source>
          <target state="translated">aria-required</target>
        </trans-unit>
        <trans-unit id="90983d5633a71a7048532951c379dc59b217a063" translate="yes" xml:space="preserve">
          <source>aria-valuemax</source>
          <target state="translated">aria-valuemax</target>
        </trans-unit>
        <trans-unit id="f32e849c5ec1dc3616b9fd81906fa67dedc52ff9" translate="yes" xml:space="preserve">
          <source>aria-valuemin</source>
          <target state="translated">aria-valuemin</target>
        </trans-unit>
        <trans-unit id="1adf2b45cbb6530bac7108ab2cfed5cf715dec50" translate="yes" xml:space="preserve">
          <source>aria-valuenow</source>
          <target state="translated">aria-valuenow</target>
        </trans-unit>
        <trans-unit id="19edc1210777ba4d45049c29280d9cc5e1064c25" translate="yes" xml:space="preserve">
          <source>array</source>
          <target state="translated">array</target>
        </trans-unit>
        <trans-unit id="577ae834d195d782658ea89d73d4c3e4866fd706" translate="yes" xml:space="preserve">
          <source>as CSS class:</source>
          <target state="translated">CSS 클래스로 :</target>
        </trans-unit>
        <trans-unit id="840026553d79a9da447f68666152e193eace3610" translate="yes" xml:space="preserve">
          <source>as attribute:</source>
          <target state="translated">속성으로 :</target>
        </trans-unit>
        <trans-unit id="169bb17a5f699de7f8cb1f8b0484f92b84304e03" translate="yes" xml:space="preserve">
          <source>as element:</source>
          <target state="translated">요소로 :</target>
        </trans-unit>
        <trans-unit id="b116a5b7748ff3cc4dd3169437134d5fa71b0abe" translate="yes" xml:space="preserve">
          <source>assertEmpty();</source>
          <target state="translated">assertEmpty();</target>
        </trans-unit>
        <trans-unit id="5cc38f752fbcd20e0ede374ade87a15a97c630bb" translate="yes" xml:space="preserve">
          <source>assignable &lt;a href=&quot;../../../guide/expression&quot;&gt;Expression&lt;/a&gt; to bind to.</source>
          <target state="translated">할당 &lt;a href=&quot;../../../guide/expression&quot;&gt;표현&lt;/a&gt; 에 바인딩.</target>
        </trans-unit>
        <trans-unit id="5b7edbd04742370944887cede91e6592b42168d1" translate="yes" xml:space="preserve">
          <source>at least one &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$digest cycle&lt;/a&gt; will be performed after &lt;code&gt;expression&lt;/code&gt; execution.</source>
          <target state="translated">&lt;code&gt;expression&lt;/code&gt; 실행 후 적어도 하나의 &lt;a href=&quot;%24rootscope.scope#%24digest.html&quot;&gt;$ 다이제스트주기&lt;/a&gt; 가 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="d7f67a250d8254339cc572b200990d99fe1baf29" translate="yes" xml:space="preserve">
          <source>attributes</source>
          <target state="translated">attributes</target>
        </trans-unit>
        <trans-unit id="130856e90bbab066b8bff5aef533f2fbad235efb" translate="yes" xml:space="preserve">
          <source>attrs</source>
          <target state="translated">attrs</target>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="translated">auto</target>
        </trans-unit>
        <trans-unit id="cac128d85d9b3d4e3d16037672a113a7a3b261fb" translate="yes" xml:space="preserve">
          <source>autoscroll</source>
          <target state="translated">autoscroll</target>
        </trans-unit>
        <trans-unit id="71051decbb3eca6f79368145b80a9f8f850d7727" translate="yes" xml:space="preserve">
          <source>aware of docroot/context from which the application is loaded</source>
          <target state="translated">응용 프로그램이로드 된 docroot / 컨텍스트를 인식</target>
        </trans-unit>
        <trans-unit id="cbc13ba1beddc85fae40d5033c2a906fc8a9e615" translate="yes" xml:space="preserve">
          <source>bannedResourceUrlList</source>
          <target state="translated">bannedResourceUrlList</target>
        </trans-unit>
        <trans-unit id="162fed3a9c4cd993b9faa61313b1cb13dfb348bb" translate="yes" xml:space="preserve">
          <source>bannedResourceUrlList([bannedResourceUrlList]);</source>
          <target state="translated">bannedResourceUrlList([bannedResourceUrlList]);</target>
        </trans-unit>
        <trans-unit id="8cbd0a74c6efdb39943b290bb82c9d6b2a6ee5a6" translate="yes" xml:space="preserve">
          <source>begin</source>
          <target state="translated">begin</target>
        </trans-unit>
        <trans-unit id="a949f399728844e8c30720f47d3006283047975b" translate="yes" xml:space="preserve">
          <source>bind();</source>
          <target state="translated">bind();</target>
        </trans-unit>
        <trans-unit id="de97464b94cd65657a2ecd7c108e1d89b7a2afb1" translate="yes" xml:space="preserve">
          <source>bindToController</source>
          <target state="translated">bindToController</target>
        </trans-unit>
        <trans-unit id="da3fe922683e598dda35cf79f8402e7036236b0b" translate="yes" xml:space="preserve">
          <source>bindings</source>
          <target state="translated">bindings</target>
        </trans-unit>
        <trans-unit id="2325d20186382d4e93e362f765f1f70fe128ee38" translate="yes" xml:space="preserve">
          <source>blacklist</source>
          <target state="translated">blacklist</target>
        </trans-unit>
        <trans-unit id="190c059ecd4f2e56f8305e2937324828ed1ead38" translate="yes" xml:space="preserve">
          <source>blueimp-fileupload for AngularJS</source>
          <target state="translated">AngularJS 용 blueimp 파일 업로드</target>
        </trans-unit>
        <trans-unit id="b58ccb7871e0261dfe6de9e4f5274543ebbebeb8" translate="yes" xml:space="preserve">
          <source>broadcast</source>
          <target state="translated">broadcast</target>
        </trans-unit>
        <trans-unit id="46994abe629a11abbf27bc5c871783c56252dd69" translate="yes" xml:space="preserve">
          <source>browserTrigger</source>
          <target state="translated">browserTrigger</target>
        </trans-unit>
        <trans-unit id="877621137926045b49299299f2d3475ae339a61b" translate="yes" xml:space="preserve">
          <source>but some of your templates are hosted on other domains you control such as &lt;code&gt;http://srv01.assets.example.com/&lt;/code&gt;, &lt;code&gt;http://srv02.assets.example.com/&lt;/code&gt;, etc.</source>
          <target state="translated">하지만 일부 템플릿은 &lt;code&gt;http://srv01.assets.example.com/&lt;/code&gt; , &lt;code&gt;http://srv02.assets.example.com/&lt;/code&gt; 등 사용자가 제어하는 ​​다른 도메인에서 호스팅됩니다 .</target>
        </trans-unit>
        <trans-unit id="c288f0ce0b3aef25df2b0e1cd1e040c2e3e587c0" translate="yes" xml:space="preserve">
          <source>but the scopes will inherit prototypically from different scopes to their &lt;code&gt;$parent&lt;/code&gt;.</source>
          <target state="translated">그러나 범위는 다른 범위에서 &lt;code&gt;$parent&lt;/code&gt; 까지 프로토 타입으로 상속됩니다 .</target>
        </trans-unit>
        <trans-unit id="aff989d6652269707fc47b298eaf4e3ee87f65f4" translate="yes" xml:space="preserve">
          <source>but this will not work:</source>
          <target state="translated">그러나 이것은 작동하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="724175b1a8337227fe8870a8833eb806b76198f0" translate="yes" xml:space="preserve">
          <source>cache a specific response - set config.cache value to TRUE or to a cache object</source>
          <target state="translated">특정 응답 캐시-config.cache 값을 TRUE 또는 캐시 오브젝트로 설정</target>
        </trans-unit>
        <trans-unit id="1734c3f5ac3155f420a99cb58fdf47a50edfc0a8" translate="yes" xml:space="preserve">
          <source>cache all responses - set the default cache value to TRUE or to a cache object</source>
          <target state="translated">모든 응답 캐시-기본 캐시 값을 TRUE 또는 캐시 오브젝트로 설정</target>
        </trans-unit>
        <trans-unit id="434f756dca9578d143eeca19d6f627fe526235e6" translate="yes" xml:space="preserve">
          <source>cacheId</source>
          <target state="translated">cacheId</target>
        </trans-unit>
        <trans-unit id="3aef7ed4858c4fd8a90214c8beb6982ca436a8ca" translate="yes" xml:space="preserve">
          <source>call &lt;code&gt;$setViewValue&lt;/code&gt; method, whenever the user interacts with the control and model needs to be updated. This is usually done inside a DOM Event listener.</source>
          <target state="translated">사용자가 컨트롤과 상호 작용하고 모델을 업데이트해야 할 때마다 &lt;code&gt;$setViewValue&lt;/code&gt; 메서드를 호출하십시오 . 이것은 일반적으로 DOM 이벤트 리스너 내에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="b4d5b37bf7a986c138ede89e0806f366b5cb1830" translate="yes" xml:space="preserve">
          <source>callback</source>
          <target state="translated">callback</target>
        </trans-unit>
        <trans-unit id="731e833c4a19e6f39c4bc41eb6b12834fd6b31f1" translate="yes" xml:space="preserve">
          <source>callbackPath</source>
          <target state="translated">callbackPath</target>
        </trans-unit>
        <trans-unit id="14dc69de2a1e6087529f02b62fd2888c90d741d3" translate="yes" xml:space="preserve">
          <source>caller</source>
          <target state="translated">caller</target>
        </trans-unit>
        <trans-unit id="db8ce75ae53155b9f218960a43ae8b1e8c02c2b4" translate="yes" xml:space="preserve">
          <source>can create functions</source>
          <target state="translated">기능을 만들 수 있습니다</target>
        </trans-unit>
        <trans-unit id="ee5486cc556478a60a26970ecc14457607891544" translate="yes" xml:space="preserve">
          <source>can create primitives</source>
          <target state="translated">프리미티브를 만들 수 있습니다</target>
        </trans-unit>
        <trans-unit id="dac29db03a3e7c45ab887dc423aa190004f70acd" translate="yes" xml:space="preserve">
          <source>can have dependencies</source>
          <target state="translated">의존성을 가질 수있다</target>
        </trans-unit>
        <trans-unit id="1c7e2c912e3b7dbb0a0c98890434f247ef0768b6" translate="yes" xml:space="preserve">
          <source>cancel([promise]);</source>
          <target state="translated">cancel([promise]);</target>
        </trans-unit>
        <trans-unit id="5bc3e47c7fdf2f9907d58b16de826f38b1259d58" translate="yes" xml:space="preserve">
          <source>cancel(animationRunner);</source>
          <target state="translated">cancel(animationRunner);</target>
        </trans-unit>
        <trans-unit id="4f70136abe7b9258b5514dad34f2da6d156dffe7" translate="yes" xml:space="preserve">
          <source>cancel(promise);</source>
          <target state="translated">cancel(promise);</target>
        </trans-unit>
        <trans-unit id="42063b59621b05ee7a679e016473663ab1e80c3a" translate="yes" xml:space="preserve">
          <source>caseInsensitiveMatch</source>
          <target state="translated">caseInsensitiveMatch</target>
        </trans-unit>
        <trans-unit id="ccadf5de3d738fbe992636fbe8daf8e3fae6b80c" translate="yes" xml:space="preserve">
          <source>cause</source>
          <target state="translated">cause</target>
        </trans-unit>
        <trans-unit id="df7aab38d211d1b2aba4e26f2e6a1d2098395488" translate="yes" xml:space="preserve">
          <source>check if a controller with given name is registered via &lt;code&gt;$controllerProvider&lt;/code&gt;</source>
          <target state="translated">주어진 이름의 컨트롤러가 &lt;code&gt;$controllerProvider&lt;/code&gt; 를 통해 등록되었는지 확인</target>
        </trans-unit>
        <trans-unit id="8bdb257d0869949981da5c708b76d76605c0af5f" translate="yes" xml:space="preserve">
          <source>check if evaluating the string on the current scope returns a constructor</source>
          <target state="translated">현재 범위에서 문자열을 평가하면 생성자가 반환되는지 확인</target>
        </trans-unit>
        <trans-unit id="57018890029a5ca0506e051ea1f395b61b2a6106" translate="yes" xml:space="preserve">
          <source>checkbox</source>
          <target state="translated">checkbox</target>
        </trans-unit>
        <trans-unit id="d80a05355eb77272dccf26e73f9d554a520a954d" translate="yes" xml:space="preserve">
          <source>className</source>
          <target state="translated">className</target>
        </trans-unit>
        <trans-unit id="3c3e62555a91b543538f8b3245c62fd4f6db4e5a" translate="yes" xml:space="preserve">
          <source>classNameFilter([expression]);</source>
          <target state="translated">classNameFilter([expression]);</target>
        </trans-unit>
        <trans-unit id="24cae32cbee8b4b5816713f154a40fe2df0adb87" translate="yes" xml:space="preserve">
          <source>classVal</source>
          <target state="translated">classVal</target>
        </trans-unit>
        <trans-unit id="7fb4c90ded6fbb6855d5f176554ffa0ea42388ff" translate="yes" xml:space="preserve">
          <source>clobbering user input by overwriting it</source>
          <target state="translated">덮어 쓰기하여 사용자 입력 클로버</target>
        </trans-unit>
        <trans-unit id="c37ff1bfc55740e0740226b95e9d08cd0c86a596" translate="yes" xml:space="preserve">
          <source>closeAndFlush();</source>
          <target state="translated">closeAndFlush();</target>
        </trans-unit>
        <trans-unit id="2037de437c80264ccbce8a8b61d0bf9f593d2322" translate="yes" xml:space="preserve">
          <source>collection</source>
          <target state="translated">collection</target>
        </trans-unit>
        <trans-unit id="5aba39998cf27c8ef94342577ad9ebeb9f463d7d" translate="yes" xml:space="preserve">
          <source>commentDirectivesEnabled(enabled);</source>
          <target state="translated">commentDirectivesEnabled(enabled);</target>
        </trans-unit>
        <trans-unit id="ce0a49abc9442bd4e296b8c48d50f5fd2153b073" translate="yes" xml:space="preserve">
          <source>comparator</source>
          <target state="translated">comparator</target>
        </trans-unit>
        <trans-unit id="36d0981b3375d78be03ea98700ecec8f4e4bd4f9" translate="yes" xml:space="preserve">
          <source>compile</source>
          <target state="translated">compile</target>
        </trans-unit>
        <trans-unit id="619fb7d090dcc14860e43539c9678d893b195223" translate="yes" xml:space="preserve">
          <source>compile function</source>
          <target state="translated">컴파일 기능</target>
        </trans-unit>
        <trans-unit id="a41ec2fa885d28dc95ed5390662352cc679a3b8f" translate="yes" xml:space="preserve">
          <source>compile the DOM treating the &lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt;&lt;code&gt;ngApp&lt;/code&gt;&lt;/a&gt; directive as the root of the compilation. This allows you to tell it to treat only a portion of the DOM as an AngularJS application.</source>
          <target state="translated">&lt;a href=&quot;../api/ng/directive/ngapp&quot;&gt; &lt;code&gt;ngApp&lt;/code&gt; &lt;/a&gt; 지시문을 컴파일의 루트로 취급하는 DOM을 컴파일하십시오 . 이를 통해 DOM의 일부만 AngularJS 애플리케이션으로 취급하도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79aeecd9743c66b9ac32bb23ba40b903bd867f61" translate="yes" xml:space="preserve">
          <source>component(name, options);</source>
          <target state="translated">구성 요소 (이름, 옵션);</target>
        </trans-unit>
        <trans-unit id="f71e5995177c9cbdd530543c3b5b6a750250117b" translate="yes" xml:space="preserve">
          <source>componentName</source>
          <target state="translated">componentName</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="dad39b1340f5e81b523db660b952fe576c7e3977" translate="yes" xml:space="preserve">
          <source>config(config);</source>
          <target state="translated">config(config);</target>
        </trans-unit>
        <trans-unit id="3f03e95fcc2408b112b3f02d6c26371489172350" translate="yes" xml:space="preserve">
          <source>config(configFn);</source>
          <target state="translated">config(configFn);</target>
        </trans-unit>
        <trans-unit id="4fcf288fd3f9fdb863872111e662433eeaab03c4" translate="yes" xml:space="preserve">
          <source>configFn</source>
          <target state="translated">configFn</target>
        </trans-unit>
        <trans-unit id="0652e436f42d75f5672a8bd9ae2f398a55115d51" translate="yes" xml:space="preserve">
          <source>configuration</source>
          <target state="translated">configuration</target>
        </trans-unit>
        <trans-unit id="6edc9d0d3b7323196588f09d3e69c0e707ddd214" translate="yes" xml:space="preserve">
          <source>constant name</source>
          <target state="translated">상수 이름</target>
        </trans-unit>
        <trans-unit id="022143400e27034e2b452902910052aa5d3d40bf" translate="yes" xml:space="preserve">
          <source>constant(name, object);</source>
          <target state="translated">상수 (이름, 객체);</target>
        </trans-unit>
        <trans-unit id="4eda1f65916982031b9996a7352588a92e2a256c" translate="yes" xml:space="preserve">
          <source>constant(name, value);</source>
          <target state="translated">상수 (이름, 값);</target>
        </trans-unit>
        <trans-unit id="8a1c1339801686eb9bf9a9ac5b4719b8c8b8fc9b" translate="yes" xml:space="preserve">
          <source>constructor</source>
          <target state="translated">constructor</target>
        </trans-unit>
        <trans-unit id="255a762c36cdae2fe950e67e8b8a4efb260e7540" translate="yes" xml:space="preserve">
          <source>container</source>
          <target state="translated">container</target>
        </trans-unit>
        <trans-unit id="ec2727b3b71f07635f726026bef44352ec89e452" translate="yes" xml:space="preserve">
          <source>context</source>
          <target state="translated">context</target>
        </trans-unit>
        <trans-unit id="485de35f978382a7931552705084adc608782e98" translate="yes" xml:space="preserve">
          <source>context where the model is stored so that controllers, directives and expressions can access it</source>
          <target state="translated">컨트롤러, 지시문 및 표현식이 모델에 액세스 할 수 있도록 모델이 저장된 컨텍스트</target>
        </trans-unit>
        <trans-unit id="2aeede80be6f6dfc0aa4d1cbd6487e24e27a81be" translate="yes" xml:space="preserve">
          <source>control</source>
          <target state="translated">control</target>
        </trans-unit>
        <trans-unit id="9214ada1a69c999c230aeef26b11135fccadd140" translate="yes" xml:space="preserve">
          <source>control object, either a &lt;a href=&quot;form.formcontroller&quot;&gt;&lt;code&gt;form.FormController&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt;&lt;code&gt;ngModel.NgModelController&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">제어 객체와 하나 &lt;a href=&quot;form.formcontroller&quot;&gt; &lt;code&gt;form.FormController&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;ngmodel.ngmodelcontroller&quot;&gt; &lt;code&gt;ngModel.NgModelController&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f79a2222c311aaf3748e792896911891d1ff255b" translate="yes" xml:space="preserve">
          <source>controller</source>
          <target state="translated">controller</target>
        </trans-unit>
        <trans-unit id="3393f80dead0e92d893797bf9753446eea4c40e1" translate="yes" xml:space="preserve">
          <source>controller(name, constructor);</source>
          <target state="translated">컨트롤러 (이름, 생성자);</target>
        </trans-unit>
        <trans-unit id="c4312397de3d25f72ed2080de2f2babdc151d494" translate="yes" xml:space="preserve">
          <source>controllerAs</source>
          <target state="translated">controllerAs</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="f647f69aa4e0dca2154dbc32752637dcac0be56d" translate="yes" xml:space="preserve">
          <source>create the application &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;injector&lt;/a&gt;</source>
          <target state="translated">응용 프로그램 &lt;a href=&quot;../api/auto/service/%24injector&quot;&gt;인젝터&lt;/a&gt; 생성</target>
        </trans-unit>
        <trans-unit id="6e8cf6dc320940291233bbd8d2ca95e4fe3444aa" translate="yes" xml:space="preserve">
          <source>createCallback(url);</source>
          <target state="translated">createCallback(url);</target>
        </trans-unit>
        <trans-unit id="513123c7fa9777c8daa2fb60229e9768193a68c8" translate="yes" xml:space="preserve">
          <source>createChild(options);</source>
          <target state="translated">createChild(options);</target>
        </trans-unit>
        <trans-unit id="96eb6bc4bfbabdd67086be1fb93b2aad86b5b2ea" translate="yes" xml:space="preserve">
          <source>cssClassDirectivesEnabled(enabled);</source>
          <target state="translated">cssClassDirectivesEnabled(enabled);</target>
        </trans-unit>
        <trans-unit id="4024700fd9f055274c529971e23ba54c20b0907c" translate="yes" xml:space="preserve">
          <source>ctx</source>
          <target state="translated">ctx</target>
        </trans-unit>
        <trans-unit id="001517ee5d3d0c7f4481ec2cd77c6aefd2fa802e" translate="yes" xml:space="preserve">
          <source>currency</source>
          <target state="translated">currency</target>
        </trans-unit>
        <trans-unit id="17899e3230216b05a3a19ba5b02ad7fa35cba0c5" translate="yes" xml:space="preserve">
          <source>currency (filter)</source>
          <target state="translated">통화 (필터)</target>
        </trans-unit>
        <trans-unit id="405ab5d2b930fe3725b3cb1ace051f9fd3d6d7af" translate="yes" xml:space="preserve">
          <source>current</source>
          <target state="translated">current</target>
        </trans-unit>
        <trans-unit id="0da51e9d88714e1d42bf061215fcb94e1ec317f3" translate="yes" xml:space="preserve">
          <source>current value if used as getter or itself (chaining) if used as setter</source>
          <target state="translated">게터로 사용되는 경우 현재 값 또는 세터로 사용되는 경우 자체 (체인)</target>
        </trans-unit>
        <trans-unit id="83c235fa7153604b78de8f539a6e1ea81badd05c" translate="yes" xml:space="preserve">
          <source>customFilter([filterFn]);</source>
          <target state="translated">customFilter([filterFn]);</target>
        </trans-unit>
        <trans-unit id="a17c9aaa61e80a1bf71d0d850af4e5baa9800bbd" translate="yes" xml:space="preserve">
          <source>data</source>
          <target state="translated">data</target>
        </trans-unit>
        <trans-unit id="e927d0677c77241b707442314346326278051dd6" translate="yes" xml:space="preserve">
          <source>date</source>
          <target state="translated">date</target>
        </trans-unit>
        <trans-unit id="1fed21df96f828bf4b17f3ade9d398644550665d" translate="yes" xml:space="preserve">
          <source>date (filter)</source>
          <target state="translated">날짜 (필터)</target>
        </trans-unit>
        <trans-unit id="79c4025f6426154a006772464eb9319e97b987a9" translate="yes" xml:space="preserve">
          <source>datetime-local</source>
          <target state="translated">datetime-local</target>
        </trans-unit>
        <trans-unit id="20a7d198d6afda6008beaadca12aaabe231fb979" translate="yes" xml:space="preserve">
          <source>debug();</source>
          <target state="translated">debug();</target>
        </trans-unit>
        <trans-unit id="11f91401a5caa7f84f60657a9bca5965ed824b1b" translate="yes" xml:space="preserve">
          <source>debug.logs</source>
          <target state="translated">debug.logs</target>
        </trans-unit>
        <trans-unit id="e6e0c9c822e67f9478cd303d5b7ece8c29fb4f85" translate="yes" xml:space="preserve">
          <source>debugEnabled([flag]);</source>
          <target state="translated">debugEnabled([flag]);</target>
        </trans-unit>
        <trans-unit id="db5d35916228e56660a5a8fac73a6225c3985e7b" translate="yes" xml:space="preserve">
          <source>debugInfoEnabled([enabled]);</source>
          <target state="translated">debugInfoEnabled([enabled]);</target>
        </trans-unit>
        <trans-unit id="ca321cad00ed1863a8f075f33678ed2975cf9b7f" translate="yes" xml:space="preserve">
          <source>decorFn</source>
          <target state="translated">decorFn</target>
        </trans-unit>
        <trans-unit id="ee329fb660d413c67e1d067f80ee172e6e8b17ed" translate="yes" xml:space="preserve">
          <source>decorator</source>
          <target state="translated">decorator</target>
        </trans-unit>
        <trans-unit id="e814d39b8c647482ee13d32af75b33398d6425dc" translate="yes" xml:space="preserve">
          <source>decorator(name, decorFn);</source>
          <target state="translated">데코레이터 (이름, decorFn);</target>
        </trans-unit>
        <trans-unit id="e49ce7f4d04a7768ca7de99536b8e613882bdde9" translate="yes" xml:space="preserve">
          <source>decorator(name, decorator);</source>
          <target state="translated">데코레이터 (이름, 데코레이터);</target>
        </trans-unit>
        <trans-unit id="c5589a55905e805e54d0f51283348a0503beaab1" translate="yes" xml:space="preserve">
          <source>default: &lt;code&gt;$element.parent()&lt;/code&gt; resp. &lt;code&gt;$element&lt;/code&gt; for &lt;code&gt;transclude:'element'&lt;/code&gt; resp. &lt;code&gt;transclude:true&lt;/code&gt;.</source>
          <target state="translated">기본값 : &lt;code&gt;$element.parent()&lt;/code&gt; resp. &lt;code&gt;transclude:'element'&lt;/code&gt; 대한 &lt;code&gt;$element&lt;/code&gt; : ' element'resp. &lt;code&gt;transclude:true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3b9d266e2ef305531f5a197b746021bf59090e45" translate="yes" xml:space="preserve">
          <source>defaults</source>
          <target state="translated">defaults</target>
        </trans-unit>
        <trans-unit id="2c23ae73fe80881dcfc64aec3d4e6419187ce51c" translate="yes" xml:space="preserve">
          <source>defer();</source>
          <target state="translated">defer();</target>
        </trans-unit>
        <trans-unit id="349221fc49e362e20c2cc36cb013b199bb94b8ed" translate="yes" xml:space="preserve">
          <source>defines the parent to which the &lt;code&gt;cloneLinkingFn&lt;/code&gt; will add the cloned elements.</source>
          <target state="translated">&lt;code&gt;cloneLinkingFn&lt;/code&gt; 이 복제 된 요소를 추가 할 상위를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="ab464f0252045aaf075411f0f1a6aed0797306c1" translate="yes" xml:space="preserve">
          <source>delay</source>
          <target state="translated">delay</target>
        </trans-unit>
        <trans-unit id="deb0c5efabe5381fec4da90741ac9ac67289b4ec" translate="yes" xml:space="preserve">
          <source>delayed/lazy initialization</source>
          <target state="translated">지연 / 지연 초기화</target>
        </trans-unit>
        <trans-unit id="c451d26cc712fc49d59c203e486f0271dc52dfed" translate="yes" xml:space="preserve">
          <source>delete(url, [config]);</source>
          <target state="translated">delete (url, [config]);</target>
        </trans-unit>
        <trans-unit id="52913b58f7309ec1a10aef837f481b9cecc9707a" translate="yes" xml:space="preserve">
          <source>dependency injection container</source>
          <target state="translated">의존성 주입 컨테이너</target>
        </trans-unit>
        <trans-unit id="0cf1bc84bb8baca804f9015a158e88642d415ffa" translate="yes" xml:space="preserve">
          <source>destination</source>
          <target state="translated">destination</target>
        </trans-unit>
        <trans-unit id="7af5b5c0ddd59324f0fbb610d085e24b862405a0" translate="yes" xml:space="preserve">
          <source>destroy();</source>
          <target state="translated">destroy();</target>
        </trans-unit>
        <trans-unit id="c3b8bd8133fead79ea023f3a6bba36ff2fbef59d" translate="yes" xml:space="preserve">
          <source>digestTtl(limit);</source>
          <target state="translated">digestTtl(limit);</target>
        </trans-unit>
        <trans-unit id="3d981bf920ab98c455a9796d062745b9d6b5cbfb" translate="yes" xml:space="preserve">
          <source>directive</source>
          <target state="translated">directive</target>
        </trans-unit>
        <trans-unit id="47b62e4cb2459e9ef19a8817586e10c8648f22ee" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../nganimate&quot;&gt;ngAnimate&lt;/a&gt; 모듈의 지시문</target>
        </trans-unit>
        <trans-unit id="0111c19cb3ab20c7c050a43b401903feb7ea963e" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngcomponentrouter&quot;&gt;ngComponentRouter&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../ngcomponentrouter&quot;&gt;ngComponentRouter&lt;/a&gt; 모듈의 지시문</target>
        </trans-unit>
        <trans-unit id="82aed0239debf8325e9be4f6bed1c9c18a2fe125" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngmessages&quot;&gt;ngMessages&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../ngmessages&quot;&gt;ngMessages&lt;/a&gt; 모듈의 지시문</target>
        </trans-unit>
        <trans-unit id="9d171814614f791eb4b283550352d1fb4e11f06f" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngroute&quot;&gt;ngRoute&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../ngroute&quot;&gt;ngRoute&lt;/a&gt; 모듈의 지시문</target>
        </trans-unit>
        <trans-unit id="2a66c70c6e27b86a0f31ab611cf6a2218895fbf8" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;../../ngtouch&quot;&gt;ngTouch&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../ngtouch&quot;&gt;ngTouch&lt;/a&gt; 모듈의 지시문</target>
        </trans-unit>
        <trans-unit id="dbc2b432a84848b99b7873866c196a072fca402b" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">모듈 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng의&lt;/a&gt; 지시문</target>
        </trans-unit>
        <trans-unit id="8d5a49a5ec875fa0d91d2962766558c31c917fef" translate="yes" xml:space="preserve">
          <source>directive in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">directive in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="86637b3ffda5786b80965a8ea6d3ce474e20fbbe" translate="yes" xml:space="preserve">
          <source>directive(name, directiveFactory);</source>
          <target state="translated">지시문 (이름, 지시문 팩토리);</target>
        </trans-unit>
        <trans-unit id="33b8875e5606c60e0239a2bc975e0b44cba62d4a" translate="yes" xml:space="preserve">
          <source>directiveFactory</source>
          <target state="translated">directiveFactory</target>
        </trans-unit>
        <trans-unit id="a937ebb2f9de267c334d1a23a85791e538aa721c" translate="yes" xml:space="preserve">
          <source>disableAutoScrolling();</source>
          <target state="translated">disableAutoScrolling();</target>
        </trans-unit>
        <trans-unit id="a7f719bf74e49f78da1a4edfed258b184a7054ff" translate="yes" xml:space="preserve">
          <source>dst</source>
          <target state="translated">dst</target>
        </trans-unit>
        <trans-unit id="bc03739443888c892beb69b563c0fbd968153207" translate="yes" xml:space="preserve">
          <source>eagerInstantiationEnabled([enabled]);</source>
          <target state="translated">eagerInstantiationEnabled([enabled]);</target>
        </trans-unit>
        <trans-unit id="6d1f7dd43b36cf6e1ef51a3c3f6d1344e4d9d46d" translate="yes" xml:space="preserve">
          <source>egghead.io</source>
          <target state="translated">egghead.io</target>
        </trans-unit>
        <trans-unit id="dece05484839df110745b0a800297c33cc078287" translate="yes" xml:space="preserve">
          <source>element</source>
          <target state="translated">element</target>
        </trans-unit>
        <trans-unit id="eb6166ad40e221ebed68bfdab1bbce8cc65810c7" translate="yes" xml:space="preserve">
          <source>elementName</source>
          <target state="translated">elementName</target>
        </trans-unit>
        <trans-unit id="6851b3982dec35e29a2f2f6d0b028f8311aa1a47" translate="yes" xml:space="preserve">
          <source>elements</source>
          <target state="translated">elements</target>
        </trans-unit>
        <trans-unit id="a88b7dcd1a9e3e17770bbaa6d7515b31a2d7e85d" translate="yes" xml:space="preserve">
          <source>email</source>
          <target state="translated">email</target>
        </trans-unit>
        <trans-unit id="2e96e89125f4c1aef797410a4bfdb32c0632ef0c" translate="yes" xml:space="preserve">
          <source>emit</source>
          <target state="translated">emit</target>
        </trans-unit>
        <trans-unit id="f086997bda9bf63d6c9e59f0964a38dfbc6f8f54" translate="yes" xml:space="preserve">
          <source>enable or disable debug level messages</source>
          <target state="translated">디버그 수준 메시지 활성화 또는 비활성화</target>
        </trans-unit>
        <trans-unit id="f6e41a60eca4bef5b429034e2b153253f2761beb" translate="yes" xml:space="preserve">
          <source>enable/disable Strict Contextual Escaping (SCE) in a module</source>
          <target state="translated">모듈에서 엄격한 상황 별 이스케이프 (SCE) 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="8bc933cbe3b110e20547014b2993b107c2447c75" translate="yes" xml:space="preserve">
          <source>enableSvg([flag]);</source>
          <target state="translated">enableSvg([flag]);</target>
        </trans-unit>
        <trans-unit id="3ea3f9802accf8817bacd6f3df46a73b93ccddec" translate="yes" xml:space="preserve">
          <source>enabled</source>
          <target state="translated">enabled</target>
        </trans-unit>
        <trans-unit id="877a1c6f470f456114603d0e490364f4872a1631" translate="yes" xml:space="preserve">
          <source>enabled([element], [enabled]);</source>
          <target state="translated">enabled ([요소], [사용]);</target>
        </trans-unit>
        <trans-unit id="4a4ad8e3c4fe48aa830c680066f76acae5438ebe" translate="yes" xml:space="preserve">
          <source>enabled([value]);</source>
          <target state="translated">enabled([value]);</target>
        </trans-unit>
        <trans-unit id="201ad6c99ab5d8e0205ef873c7f6fc97ad74a5ae" translate="yes" xml:space="preserve">
          <source>end symbol.</source>
          <target state="translated">끝 기호.</target>
        </trans-unit>
        <trans-unit id="fdb2ad96fab569039bb49548ff185e1481af777c" translate="yes" xml:space="preserve">
          <source>endSymbol();</source>
          <target state="translated">endSymbol();</target>
        </trans-unit>
        <trans-unit id="30d00ba2d57c5ad464794297a7ae81c8a2a1b978" translate="yes" xml:space="preserve">
          <source>endSymbol([value]);</source>
          <target state="translated">endSymbol([value]);</target>
        </trans-unit>
        <trans-unit id="3674951ec264a72168cb2d89a5f634e512f6629d" translate="yes" xml:space="preserve">
          <source>enter</source>
          <target state="translated">enter</target>
        </trans-unit>
        <trans-unit id="d8dd377cb3e469adeb813af0eaaf26d9079ab62b" translate="yes" xml:space="preserve">
          <source>enter and leave</source>
          <target state="translated">들어가고 떠나다</target>
        </trans-unit>
        <trans-unit id="2f6b8815207bb3d7f8a683bc4ad4c01c61ea035b" translate="yes" xml:space="preserve">
          <source>enter(element, parent, [after], [options]);</source>
          <target state="translated">enter (요소, 부모, [after], [options]);</target>
        </trans-unit>
        <trans-unit id="3ff05e39b6db7ae28005ad2565bca502710e96f5" translate="yes" xml:space="preserve">
          <source>enter, leave, and move</source>
          <target state="translated">들어가고 떠나다</target>
        </trans-unit>
        <trans-unit id="72a898ee4de48190f7f76cec0956a5a5a7f56a1a" translate="yes" xml:space="preserve">
          <source>enter, leave, move: function(element, doneFunction, options)</source>
          <target state="translated">입력, 떠나기, 이동 : function (element, doneFunction, options)</target>
        </trans-unit>
        <trans-unit id="664e31f5f10da2f404d6364c868a8167c13e1acf" translate="yes" xml:space="preserve">
          <source>error();</source>
          <target state="translated">error();</target>
        </trans-unit>
        <trans-unit id="d95befb3b2a5832a908a4db4f3534e5e6e8d05fe" translate="yes" xml:space="preserve">
          <source>error.logs</source>
          <target state="translated">error.logs</target>
        </trans-unit>
        <trans-unit id="7e3bdbd182f7effdc78c07b78699dcbfec75d71c" translate="yes" xml:space="preserve">
          <source>errorCallback</source>
          <target state="translated">errorCallback</target>
        </trans-unit>
        <trans-unit id="84c8e2fd7b284a052478ebb0c729104f129ccb8a" translate="yes" xml:space="preserve">
          <source>errorOnUnhandledRejections([value]);</source>
          <target state="translated">errorOnUnhandledRejections([value]);</target>
        </trans-unit>
        <trans-unit id="5006ed0248a019713b762563076292379daf07b4" translate="yes" xml:space="preserve">
          <source>event</source>
          <target state="translated">event</target>
        </trans-unit>
        <trans-unit id="201f780d7a628efcc7dc2aa79a23bd8657fced73" translate="yes" xml:space="preserve">
          <source>event | container</source>
          <target state="translated">이벤트 | 컨테이너</target>
        </trans-unit>
        <trans-unit id="4b4e79c5041a3518a8f1f56a688f67404e6cd0c9" translate="yes" xml:space="preserve">
          <source>eventData</source>
          <target state="translated">eventData</target>
        </trans-unit>
        <trans-unit id="c6b2d1e59b7df1013f4f87d97ff1bffc5a212b6c" translate="yes" xml:space="preserve">
          <source>eventType</source>
          <target state="translated">eventType</target>
        </trans-unit>
        <trans-unit id="5d42ad1769f229c76031f30a404b4f7863d68de0" translate="yes" xml:space="preserve">
          <source>exception</source>
          <target state="translated">exception</target>
        </trans-unit>
        <trans-unit id="86b77de2442fe05048f19c766138a551aa2543be" translate="yes" xml:space="preserve">
          <source>exp</source>
          <target state="translated">exp</target>
        </trans-unit>
        <trans-unit id="cb8acb66ef8c8601ef87dc98152d7f55e2c4e1ef" translate="yes" xml:space="preserve">
          <source>expect(method, url, [data], [headers], [keys]);</source>
          <target state="translated">expect (method, url, [data], [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="fdffe4d2bdd2f77ebd6338c0b222668ae5ab4121" translate="yes" xml:space="preserve">
          <source>expectDELETE(url, [headers], [keys]);</source>
          <target state="translated">expectDELETE (url, [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="d34c2f8382fe1bb3d5a846704dbafd43df6177d0" translate="yes" xml:space="preserve">
          <source>expectGET(url, [headers], [keys]);</source>
          <target state="translated">expectGET (url, [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="b589fbac0470ac5b1ead26d2a8d55be33e19e8ba" translate="yes" xml:space="preserve">
          <source>expectHEAD(url, [headers], [keys]);</source>
          <target state="translated">expectHEAD (url, [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="fbe90b6b30245b31434fb5e458c93f34612977d9" translate="yes" xml:space="preserve">
          <source>expectJSONP(url, [keys]);</source>
          <target state="translated">expectJSONP (url, [키]);</target>
        </trans-unit>
        <trans-unit id="068de8bdba72b9723e5e3c8198bcfa1e17e763b2" translate="yes" xml:space="preserve">
          <source>expectPATCH(url, [data], [headers], [keys]);</source>
          <target state="translated">expectPATCH (url, [data], [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="5e361ddfe0995ac36991c116e0534f23733c6dec" translate="yes" xml:space="preserve">
          <source>expectPOST(url, [data], [headers], [keys]);</source>
          <target state="translated">expectPOST (url, [data], [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="f8976da304fdadbd1255de84166111cfb98c1e94" translate="yes" xml:space="preserve">
          <source>expectPUT(url, [data], [headers], [keys]);</source>
          <target state="translated">expectPUT (url, [data], [headers], [keys]);</target>
        </trans-unit>
        <trans-unit id="8f35f2ad3a859c1c29f961b65f7d51a7a26ed108" translate="yes" xml:space="preserve">
          <source>expectRoute(method, url);</source>
          <target state="translated">expectRoute (method, url);</target>
        </trans-unit>
        <trans-unit id="f4c179cec9f41981b02442dccb7656db22cf776b" translate="yes" xml:space="preserve">
          <source>exposes &quot;raw&quot; object with properties that can be directly modified</source>
          <target state="translated">직접 수정할 수있는 속성으로 &quot;원시&quot;개체를 노출</target>
        </trans-unit>
        <trans-unit id="cd073c3c2c6f87a99b8741f9ec06932558451cd6" translate="yes" xml:space="preserve">
          <source>exposes jQuery-style getters and setters</source>
          <target state="translated">jQuery 스타일 게터 및 세터 노출</target>
        </trans-unit>
        <trans-unit id="ec9814396ba26fa02dc3261046ba55a3b4bb32a6" translate="yes" xml:space="preserve">
          <source>expression</source>
          <target state="translated">expression</target>
        </trans-unit>
        <trans-unit id="dd3542698c8d474d084009d0f54effe3f281f317" translate="yes" xml:space="preserve">
          <source>expression to match against &lt;code&gt;ng-switch-when&lt;/code&gt;. On child elements add:</source>
          <target state="translated">&lt;code&gt;ng-switch-when&lt;/code&gt; 과 일치하는 표현식 입니다. 자식 요소에 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="937ab7a36113c2ad802ec17e0352cb05719ca9de" translate="yes" xml:space="preserve">
          <source>extend HTML with custom attributes and elements</source>
          <target state="translated">사용자 정의 속성 및 요소를 사용하여 HTML 확장</target>
        </trans-unit>
        <trans-unit id="7b202d57f214af016fe2923be40110740dd5bb91" translate="yes" xml:space="preserve">
          <source>factory</source>
          <target state="translated">factory</target>
        </trans-unit>
        <trans-unit id="51431ec4744ac283eb7231d4a8574ddcb6c42491" translate="yes" xml:space="preserve">
          <source>factory(name, $getFn);</source>
          <target state="translated">공장 (이름, $ getFn);</target>
        </trans-unit>
        <trans-unit id="debb1a6bfaabae284e1dd5fbd69356412cd946ed" translate="yes" xml:space="preserve">
          <source>factory(name, providerFunction);</source>
          <target state="translated">공장 (이름, providerFunction);</target>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="translated">filter</target>
        </trans-unit>
        <trans-unit id="ccf0eff8251d5d2e6b0a72571f7bc0ab830ed392" translate="yes" xml:space="preserve">
          <source>filter (filter)</source>
          <target state="translated">필터 (필터)</target>
        </trans-unit>
        <trans-unit id="2a7cce727e6ce3450f80d2eba3aaabc860e697cf" translate="yes" xml:space="preserve">
          <source>filter in module &lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../../ngsanitize&quot;&gt;ngSanitize&lt;/a&gt; 모듈의 필터</target>
        </trans-unit>
        <trans-unit id="b58b121cec378be53223d364b8103a9b646bb9a2" translate="yes" xml:space="preserve">
          <source>filter in module &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">모듈 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng의&lt;/a&gt; 필터</target>
        </trans-unit>
        <trans-unit id="a49525f30e63f2049225fa212c85fe2320a4f736" translate="yes" xml:space="preserve">
          <source>filter in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">filter in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d575ec7fb7ae300e3127e48dcf5b4f9c341a07b2" translate="yes" xml:space="preserve">
          <source>filter(name, filterFactory);</source>
          <target state="translated">필터 (이름, 필터 팩토리);</target>
        </trans-unit>
        <trans-unit id="13d83525d97c19f216e466d7c5ad44c265937cdc" translate="yes" xml:space="preserve">
          <source>filterFactory</source>
          <target state="translated">filterFactory</target>
        </trans-unit>
        <trans-unit id="9a73b41a3e25b1fe4ae7f66722179d67dcfb66d7" translate="yes" xml:space="preserve">
          <source>filterFn</source>
          <target state="translated">filterFn</target>
        </trans-unit>
        <trans-unit id="112f3a99b283a4e1788dedd8e0e5d35375c33747" translate="yes" xml:space="preserve">
          <source>flag</source>
          <target state="translated">flag</target>
        </trans-unit>
        <trans-unit id="7173ae30958deb9e47aa164e00f376f52584ad19" translate="yes" xml:space="preserve">
          <source>flush();</source>
          <target state="translated">flush();</target>
        </trans-unit>
        <trans-unit id="dfd237798ca041be9fbe0ab0e537b4d8298ea118" translate="yes" xml:space="preserve">
          <source>flush([count], [skip]);</source>
          <target state="translated">플러시 ([count], [skip]);</target>
        </trans-unit>
        <trans-unit id="c1402bea9f88134f8bc07cb2f6e2553c3f5a671a" translate="yes" xml:space="preserve">
          <source>flush([delay]);</source>
          <target state="translated">flush([delay]);</target>
        </trans-unit>
        <trans-unit id="993c16ab62f88a46c3eca8c365b9879968f6a56f" translate="yes" xml:space="preserve">
          <source>flush(millis);</source>
          <target state="translated">flush(millis);</target>
        </trans-unit>
        <trans-unit id="47fdd9283ded80c62bb5e40ce65b0e49a48675b3" translate="yes" xml:space="preserve">
          <source>fn</source>
          <target state="translated">fn</target>
        </trans-unit>
        <trans-unit id="02ed8b1bddbce9e00f5850e2cb77e952d834581b" translate="yes" xml:space="preserve">
          <source>fns</source>
          <target state="translated">fns</target>
        </trans-unit>
        <trans-unit id="dc7b7daa04fef718ab8736c4d7325598e61a3b33" translate="yes" xml:space="preserve">
          <source>for array data sources:</source>
          <target state="translated">배열 데이터 소스의 경우 :</target>
        </trans-unit>
        <trans-unit id="cafe3d63b7da090a87138adde8ac83f43dfb0c57" translate="yes" xml:space="preserve">
          <source>for directives that need to perform actions in compile and pre-link functions, because they aren't available</source>
          <target state="translated">컴파일 및 사전 링크 함수에서 조치를 수행해야하는 지시문은 사용할 수 없으므로</target>
        </trans-unit>
        <trans-unit id="b7670c86af4cb114f150fe62360301f9949f6746" translate="yes" xml:space="preserve">
          <source>for example, &lt;code&gt;ngOptions&lt;/code&gt; will do so when a &lt;code&gt;track by&lt;/code&gt; clause is included in the comprehension expression or if the select is given the &lt;code&gt;multiple&lt;/code&gt; attribute.</source>
          <target state="translated">예를 들어, &lt;code&gt;ngOptions&lt;/code&gt; 는 &lt;code&gt;track by&lt;/code&gt; 절이 이해 표현식에 포함되거나 선택에 &lt;code&gt;multiple&lt;/code&gt; 속성 이 제공되는 경우 그렇게 합니다.</target>
        </trans-unit>
        <trans-unit id="f42678cc70796a97bf5bc3ea4d9fab04eba12378" translate="yes" xml:space="preserve">
          <source>for object data sources:</source>
          <target state="translated">객체 데이터 소스의 경우 :</target>
        </trans-unit>
        <trans-unit id="d00b39815c187d832cef3239eb7a77580728dc47" translate="yes" xml:space="preserve">
          <source>form</source>
          <target state="translated">form</target>
        </trans-unit>
        <trans-unit id="61e62b67c352e9c95ac08a1e01814af5b0b0ba11" translate="yes" xml:space="preserve">
          <source>form (directive)</source>
          <target state="translated">양식 (지시서)</target>
        </trans-unit>
        <trans-unit id="77ab24d984abc898aa6b04bd2ba231c82ccb745e" translate="yes" xml:space="preserve">
          <source>form / ngForm</source>
          <target state="translated">양식 / ngForm</target>
        </trans-unit>
        <trans-unit id="4d9bd194eea91ba31eceb828e539bad68e682c7c" translate="yes" xml:space="preserve">
          <source>form.FormController</source>
          <target state="translated">form.FormController</target>
        </trans-unit>
        <trans-unit id="785987648f85190cfde9eadc69fc7c46fe8a7433" translate="yes" xml:space="preserve">
          <source>format</source>
          <target state="translated">format</target>
        </trans-unit>
        <trans-unit id="85135001148e5c30ae56e85b9f779455ac95e18a" translate="yes" xml:space="preserve">
          <source>formats the value of an expression for display to the user</source>
          <target state="translated">사용자에게 표시 할 표현식 값의 형식을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="ca3ad6fbb8a83c0baf4db36b289fd1296aae5ee9" translate="yes" xml:space="preserve">
          <source>fractionSize</source>
          <target state="translated">fractionSize</target>
        </trans-unit>
        <trans-unit id="0b1e95cfd9775191a7224d0a218ae79187e80c1d" translate="yes" xml:space="preserve">
          <source>from</source>
          <target state="translated">from</target>
        </trans-unit>
        <trans-unit id="942a84d29aa490822331c9095e5b784b79ed8b03" translate="yes" xml:space="preserve">
          <source>from - &lt;code&gt;{Object|null}&lt;/code&gt; - CSS properties &amp;amp; values at the beginning of the animation</source>
          <target state="translated">에서 - &lt;code&gt;{Object|null}&lt;/code&gt; - 애니메이션의 시작 부분에 CSS 속성 및 값</target>
        </trans-unit>
        <trans-unit id="dda2f47c36a01d6dff7f5514b2c96de5bb42ff3d" translate="yes" xml:space="preserve">
          <source>full URL</source>
          <target state="translated">전체 URL</target>
        </trans-unit>
        <trans-unit id="c218e39efa2e1aae69f39d2054528369ce1e1f46" translate="yes" xml:space="preserve">
          <source>function</source>
          <target state="translated">function</target>
        </trans-unit>
        <trans-unit id="9f411fbc41512390f09aa4194c2d4d420ca6bbcd" translate="yes" xml:space="preserve">
          <source>function available to directives - DEPRECATED.</source>
          <target state="translated">지시문에 사용 가능한 함수-DEPRECATED.</target>
        </trans-unit>
        <trans-unit id="48f4611c3d5b0ac6a0c91073b5d2f392f0380a4a" translate="yes" xml:space="preserve">
          <source>function in module &lt;a href=&quot;../../ngmock&quot;&gt;ngMock&lt;/a&gt;</source>
          <target state="translated">모듈 &lt;a href=&quot;../../ngmock&quot;&gt;ngMock의&lt;/a&gt; 기능</target>
        </trans-unit>
        <trans-unit id="77c1501b90526395365d09f99fa02c98cb416963" translate="yes" xml:space="preserve">
          <source>function in module &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">모듈 &lt;a href=&quot;https://code.angularjs.org/1.7.8/docs/api/ng&quot;&gt;ng의&lt;/a&gt; 기능</target>
        </trans-unit>
        <trans-unit id="187d172e6bec1ea023678bcdaea03195fdfb79b9" translate="yes" xml:space="preserve">
          <source>function in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">function in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="005a50334d33a38a723b1db11dd3faf29d3bedb2" translate="yes" xml:space="preserve">
          <source>get(cacheId);</source>
          <target state="translated">get(cacheId);</target>
        </trans-unit>
        <trans-unit id="d2c2f7019d27df382aae1474a42251734ae97c2d" translate="yes" xml:space="preserve">
          <source>get(key);</source>
          <target state="translated">get(key);</target>
        </trans-unit>
        <trans-unit id="cb02ade0695bd9427d9d12f83cdc79528d7f45ac" translate="yes" xml:space="preserve">
          <source>get(name, [caller]);</source>
          <target state="translated">get (이름, [호출자]);</target>
        </trans-unit>
        <trans-unit id="1b6aa88178cd386db7e6f6e59df1053b31367b51" translate="yes" xml:space="preserve">
          <source>get(url, [config]);</source>
          <target state="translated">get (url, [config]);</target>
        </trans-unit>
        <trans-unit id="13300e1c80eda74b6ff8b14081724fc0ee5416c2" translate="yes" xml:space="preserve">
          <source>getAll();</source>
          <target state="translated">getAll();</target>
        </trans-unit>
        <trans-unit id="11e2d0e3cfda6ab2a8aed0b68742304b84ab843f" translate="yes" xml:space="preserve">
          <source>getObject(key);</source>
          <target state="translated">getObject(key);</target>
        </trans-unit>
        <trans-unit id="d0ec47d3bfb6fc32354d73b84d4e8b4e8202d704" translate="yes" xml:space="preserve">
          <source>getOption(name);</source>
          <target state="translated">getOption(name);</target>
        </trans-unit>
        <trans-unit id="97a040f4d452cafdf708229143c844e00f42664a" translate="yes" xml:space="preserve">
          <source>getResponse(callbackPath);</source>
          <target state="translated">getResponse(callbackPath);</target>
        </trans-unit>
        <trans-unit id="27eb84097baaa0bfb02994e9af554a0f37e92d9f" translate="yes" xml:space="preserve">
          <source>getTrusted(type, maybeTrusted);</source>
          <target state="translated">getTrusted (타입, 아마도 Trusted);</target>
        </trans-unit>
        <trans-unit id="79ba6eb7d9b88ec662619b9907db0b5108f3a864" translate="yes" xml:space="preserve">
          <source>getTrustedCss(value);</source>
          <target state="translated">getTrustedCss(value);</target>
        </trans-unit>
        <trans-unit id="fc70e88a40dcbd4d0757bfb956d803623d2d5912" translate="yes" xml:space="preserve">
          <source>getTrustedHtml(value);</source>
          <target state="translated">getTrustedHtml(value);</target>
        </trans-unit>
        <trans-unit id="870fd3326442cb10007e0707cff9b63a2b366141" translate="yes" xml:space="preserve">
          <source>getTrustedJs(value);</source>
          <target state="translated">getTrustedJs(value);</target>
        </trans-unit>
        <trans-unit id="93db87de12a3fd001092d3dd6fb63b7af3ec32ba" translate="yes" xml:space="preserve">
          <source>getTrustedResourceUrl(value);</source>
          <target state="translated">getTrustedResourceUrl(value);</target>
        </trans-unit>
        <trans-unit id="dae21969c8522a157bb2f491d00264f56aff5bea" translate="yes" xml:space="preserve">
          <source>getTrustedUrl(value);</source>
          <target state="translated">getTrustedUrl(value);</target>
        </trans-unit>
        <trans-unit id="57b752316b777d8004d25d03ae168cfe92901a15" translate="yes" xml:space="preserve">
          <source>has(name);</source>
          <target state="translated">has(name);</target>
        </trans-unit>
        <trans-unit id="2346ad27d7568ba9896f1b7da6b5991251debdf2" translate="yes" xml:space="preserve">
          <source>hash</source>
          <target state="translated">hash</target>
        </trans-unit>
        <trans-unit id="5011f8c863ac0929fe6f292bb4c5780a2b68a457" translate="yes" xml:space="preserve">
          <source>hash([hash]);</source>
          <target state="translated">hash([hash]);</target>
        </trans-unit>
        <trans-unit id="7b3406e76e32f7bd7efc7d17d790718fa6b1d176" translate="yes" xml:space="preserve">
          <source>hashPrefix([prefix]);</source>
          <target state="translated">hashPrefix([prefix]);</target>
        </trans-unit>
        <trans-unit id="e949ab70bba0802d7f2a30ac9c254ded0a053780" translate="yes" xml:space="preserve">
          <source>hashbang URLs in all browsers</source>
          <target state="translated">모든 브라우저에서 hashbang URL</target>
        </trans-unit>
        <trans-unit id="2742e9f75a3216ba049cd4a687ccd4f30f3eeb19" translate="yes" xml:space="preserve">
          <source>head(url, [config]);</source>
          <target state="translated">head (url, [config]);</target>
        </trans-unit>
        <trans-unit id="26b47e3d825258ae534f85838d81e93ddd46db1f" translate="yes" xml:space="preserve">
          <source>headers</source>
          <target state="translated">headers</target>
        </trans-unit>
        <trans-unit id="8c617edd42200ec961f3e4700877ccc486005b22" translate="yes" xml:space="preserve">
          <source>host of current URL.</source>
          <target state="translated">현재 URL의 호스트.</target>
        </trans-unit>
        <trans-unit id="3565db349b4ddc2cce331ecf3cf17a773858b8d9" translate="yes" xml:space="preserve">
          <source>host();</source>
          <target state="translated">host();</target>
        </trans-unit>
        <trans-unit id="950a39b6c2934bb72f2def76c71e88e9c035385f" translate="yes" xml:space="preserve">
          <source>html</source>
          <target state="translated">html</target>
        </trans-unit>
        <trans-unit id="42ecd656fcf59d096f584731f50607fa1e0f31af" translate="yes" xml:space="preserve">
          <source>html5Mode object if used as getter or itself (chaining) if used as setter</source>
          <target state="translated">getter로 사용되는 경우 html5Mode 객체 또는 setter로 사용되는 경우 자체 (체인)</target>
        </trans-unit>
        <trans-unit id="be78385bc3b2282b25b438455f850a1c1919e3a6" translate="yes" xml:space="preserve">
          <source>html5Mode([mode]);</source>
          <target state="translated">html5Mode([mode]);</target>
        </trans-unit>
        <trans-unit id="233e9fc440ca4105099cbb152164be799308509d" translate="yes" xml:space="preserve">
          <source>httpOptions([value]);</source>
          <target state="translated">httpOptions([value]);</target>
        </trans-unit>
        <trans-unit id="77a7e87262d487488d8a620545c9be9bdf0ad8a8" translate="yes" xml:space="preserve">
          <source>i18n and l10n</source>
          <target state="translated">i18n과 l10n</target>
        </trans-unit>
        <trans-unit id="87ea5dfc8b8e384d848979496e706390b497e547" translate="yes" xml:space="preserve">
          <source>id</source>
          <target state="translated">id</target>
        </trans-unit>
        <trans-unit id="0efee61c10bc322d0b636ba3dd5c3a2656badd1f" translate="yes" xml:space="preserve">
          <source>ident</source>
          <target state="translated">ident</target>
        </trans-unit>
        <trans-unit id="3ee960eafc0de0ce67b2ced9b75883258ad922a4" translate="yes" xml:space="preserve">
          <source>identifierContinue</source>
          <target state="translated">identifierContinue</target>
        </trans-unit>
        <trans-unit id="36d73a020a0d73243593ff0d61214b4a9b6252aa" translate="yes" xml:space="preserve">
          <source>identifierStart</source>
          <target state="translated">identifierStart</target>
        </trans-unit>
        <trans-unit id="c7c64915aab4b5eadd4a0ebb5a0dfe588ec94483" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;true&lt;/code&gt;, then the returned function returns undefined unless all embedded expressions evaluate to a value other than &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">경우 &lt;code&gt;true&lt;/code&gt; 포함 된 모든 표현이 아닌 값으로 평가하지 않는 한 다음 반환 된 함수가 반환이 정의되지 않은 &lt;code&gt;undefined&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5e1027a9303d68e8318ab9ea216affe307f740d5" translate="yes" xml:space="preserve">
          <source>if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter doesn't trigger submit</source>
          <target state="translated">양식에 2 개 이상의 입력 필드가 있고 버튼이나 입력 [type = submit]이없는 경우 Enter 키를 누르면 제출이 트리거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7bf5a74fcd92925173a43bf767c0d6f5ee7f74fc" translate="yes" xml:space="preserve">
          <source>if a form has one or more input fields and one or more buttons or input[type=submit] then hitting enter in any of the input fields will trigger the click handler on the &lt;em&gt;first&lt;/em&gt; button or input[type=submit] (&lt;code&gt;ngClick&lt;/code&gt;) &lt;em&gt;and&lt;/em&gt; a submit handler on the enclosing form (&lt;code&gt;ngSubmit&lt;/code&gt;)</source>
          <target state="translated">양식에 하나 이상의 입력 필드와 하나 이상의 단추 또는 입력 [type = submit]이있는 경우 입력 필드 중 하나에서 Enter 키를 누르면 &lt;em&gt;첫 번째&lt;/em&gt; 단추 또는 input [type = submit] ( &lt;code&gt;ngClick&lt;/code&gt; ) 에서 클릭 핸들러가 트리거 &lt;em&gt;되고&lt;/em&gt; 엔 클로징 양식 ( &lt;code&gt;ngSubmit&lt;/code&gt; ) 의 제출 핸들러</target>
        </trans-unit>
        <trans-unit id="7f838edcb4897951ffed7eb0c3cfe4916930cfae" translate="yes" xml:space="preserve">
          <source>if both an &lt;a href=&quot;%24animate#addClass.html&quot;&gt;addClass()&lt;/a&gt; and a &lt;a href=&quot;%24animate#removeClass.html&quot;&gt;removeClass()&lt;/a&gt; action are performed during the same animation, the event fired will be &lt;code&gt;setClass&lt;/code&gt;. This is true even for &lt;code&gt;ngClass&lt;/code&gt;.</source>
          <target state="translated">모두는 IF &lt;a href=&quot;%24animate#addClass.html&quot;&gt;addClass ()&lt;/a&gt; 와 &lt;a href=&quot;%24animate#removeClass.html&quot;&gt;removeClass ()&lt;/a&gt; 액션이 동일한 애니메이션 동안 수행되고, 이벤트가 트리거 될 것이다 &lt;code&gt;setClass&lt;/code&gt; . 이것은 &lt;code&gt;ngClass&lt;/code&gt; 에서도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="507febdbe24537c5c5c88559f729b9667eea2650" translate="yes" xml:space="preserve">
          <source>if on the other hand, you need the element to be cloned, the view reference from the original example would not point to the clone, but rather to the original template that was cloned. In this case, you can access the clone either via the &lt;code&gt;cloneAttachFn&lt;/code&gt; or the value returned by the linking function:</source>
          <target state="translated">if on the other hand, you need the element to be cloned, the view reference from the original example would not point to the clone, but rather to the original template that was cloned. In this case, you can access the clone either via the &lt;code&gt;cloneAttachFn&lt;/code&gt; or the value returned by the linking function:</target>
        </trans-unit>
        <trans-unit id="d80461d979f5fa743fdcee0c823cb918980bf71e" translate="yes" xml:space="preserve">
          <source>if on the other hand, you need the element to be cloned, the view reference from the original example would not point to the clone, but rather to the original template that was cloned. In this case, you can access the clone via the cloneAttachFn:</source>
          <target state="translated">반면에 복제 할 요소가 필요한 경우 원래 예제의 뷰 참조는 복제본이 아니라 복제 된 원래 템플릿을 가리 킵니다. 이 경우 cloneAttachFn을 통해 클론에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02ccf4c652bc623f16f244e914779c4b6a5a1ce5" translate="yes" xml:space="preserve">
          <source>if set to true then the interpolation string must have embedded expression in order to return an interpolation function. Strings with no embedded expression will return null for the interpolation function.</source>
          <target state="translated">true로 설정되면 보간 함수가 반환되도록 보간 문자열에식이 포함되어 있어야합니다. 삽입식이없는 문자열은 보간 함수에 대해 null을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2b3d3a95b94109fbbe58b69f50f5cf2ef9b9e459" translate="yes" xml:space="preserve">
          <source>if the &lt;code&gt;$viewValue&lt;/code&gt; has changed:</source>
          <target state="translated">은 if &lt;code&gt;$viewValue&lt;/code&gt; 변경되었습니다 :</target>
        </trans-unit>
        <trans-unit id="432ca0d7b08c70e0405cdb632ae015dc4702014c" translate="yes" xml:space="preserve">
          <source>if the above doesn't apply, &lt;code&gt;JSON.stringify&lt;/code&gt; is used.</source>
          <target state="translated">위의 사항이 적용되지 않으면 &lt;code&gt;JSON.stringify&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="19515d9c603096a818b4caa7d950534567dd085e" translate="yes" xml:space="preserve">
          <source>if the input has continued to be invalid since the model will stay &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">모델이 계속 유지되므로 입력이 계속 유효하지 않은 경우 &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="803de741bf70da9a228bdc467ce6085edb92b659" translate="yes" xml:space="preserve">
          <source>if the model is changed programmatically and not by a change to the input value</source>
          <target state="translated">입력 값을 변경하지 않고 프로그래밍 방식으로 모델을 변경 한 경우</target>
        </trans-unit>
        <trans-unit id="b2bda1c4fdec16cb2c36301a056329fd40e3784d" translate="yes" xml:space="preserve">
          <source>if the value is an object that is not a &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt;, $interpolate looks for a custom &lt;code&gt;toString()&lt;/code&gt; function on the object, and uses that. Custom means that &lt;code&gt;myObject.toString !== Object.prototype.toString&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;Number&lt;/code&gt; , &lt;code&gt;Date&lt;/code&gt; 또는 &lt;code&gt;Array&lt;/code&gt; 가 아닌 객체 인 경우 $ interpolate는 객체에서 사용자 지정 &lt;code&gt;toString()&lt;/code&gt; 함수를 찾아서 사용합니다. 사용자 정의는 &lt;code&gt;myObject.toString !== Object.prototype.toString&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="08bdc633831822cd59f38d0f46bf2b75c8acb68e" translate="yes" xml:space="preserve">
          <source>if the value returned from the &lt;code&gt;$parsers&lt;/code&gt; transformation pipeline has not changed</source>
          <target state="translated">&lt;code&gt;$parsers&lt;/code&gt; 변환 파이프 라인 에서 리턴 된 값 이 변경되지 않은 경우</target>
        </trans-unit>
        <trans-unit id="2b9a85cfb6bf9d142d6c5a7c4730745770a85eb0" translate="yes" xml:space="preserve">
          <source>if this attribute is present on the app element, the injector will be created in &quot;strict-di&quot; mode. This means that the application will fail to invoke functions which do not use explicit function annotation (and are thus unsuitable for minification), as described in &lt;a href=&quot;../../../guide/di&quot;&gt;the Dependency Injection guide&lt;/a&gt;, and useful debugging info will assist in tracking down the root of these bugs.</source>
          <target state="translated">이 속성이 app 요소에 존재하면 인젝터는 &quot;strict-di&quot;모드로 작성됩니다. 이는 &lt;a href=&quot;../../../guide/di&quot;&gt;Dependency Injection 안내서에&lt;/a&gt; 설명 된대로 애플리케이션이 명시적인 함수 주석을 사용하지 않으므로 축소에 적합하지 않은 함수를 호출하지 못함을 의미합니다. 유용한 디버깅 정보가 이러한 버그의 근본을 추적하는 데 도움이된다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a769690388438502d9de64ec551cba562b6eb16a" translate="yes" xml:space="preserve">
          <source>ignoreRequestError</source>
          <target state="translated">ignoreRequestError</target>
        </trans-unit>
        <trans-unit id="61ac78eec7078e6109d18a088928cc7319941a7e" translate="yes" xml:space="preserve">
          <source>imgSrcSanitizationTrustedUrlList([regexp]);</source>
          <target state="translated">imgSrcSanitizationTrustedUrlList([regexp]);</target>
        </trans-unit>
        <trans-unit id="f35e826bc5e7bcb5de3ffcd27ee45fd435a942bb" translate="yes" xml:space="preserve">
          <source>imgSrcSanitizationWhitelist();</source>
          <target state="translated">imgSrcSanitizationWhitelist();</target>
        </trans-unit>
        <trans-unit id="39236f912494fb59c5ff59ca111e63e458db0c59" translate="yes" xml:space="preserve">
          <source>imgSrcSanitizationWhitelist([regexp]);</source>
          <target state="translated">imgSrcSanitizationWhitelist([regexp]);</target>
        </trans-unit>
        <trans-unit id="84ff79da75a283c2fb2e4c75aef36804b9051457" translate="yes" xml:space="preserve">
          <source>implement &lt;code&gt;$render&lt;/code&gt; method, which is responsible for rendering the data after it passed the &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24formatters.html&quot;&gt;&lt;code&gt;NgModelController.$formatters&lt;/code&gt;&lt;/a&gt;,</source>
          <target state="translated">구현 &lt;code&gt;$render&lt;/code&gt; 가 전달 된 후 데이터의 렌더링을 방법 &lt;a href=&quot;../api/ng/type/ngmodel.ngmodelcontroller#%24formatters.html&quot;&gt; &lt;code&gt;NgModelController.$formatters&lt;/code&gt; &lt;/a&gt; ,</target>
        </trans-unit>
        <trans-unit id="c0e561f457040d6e0445c999d22e973d6fc9d730" translate="yes" xml:space="preserve">
          <source>in one of the following forms:</source>
          <target state="translated">다음 형식 중 하나로</target>
        </trans-unit>
        <trans-unit id="46536b1cdb518e74f8160a58423beeaa0068412a" translate="yes" xml:space="preserve">
          <source>increased render speed by creating the options in a documentFragment instead of individually</source>
          <target state="translated">개별적으로가 아니라 documentFragment에서 옵션을 생성하여 렌더링 속도 향상</target>
        </trans-unit>
        <trans-unit id="59bd0a3ff43b32849b319e645d4798d8a5d1e889" translate="yes" xml:space="preserve">
          <source>info</source>
          <target state="translated">info</target>
        </trans-unit>
        <trans-unit id="02c16cba7c4af0b71152fbce31a89d04a2826279" translate="yes" xml:space="preserve">
          <source>info();</source>
          <target state="translated">info();</target>
        </trans-unit>
        <trans-unit id="be01f8af1782575a9dfaefc425ad8ce42d090df5" translate="yes" xml:space="preserve">
          <source>info([info]);</source>
          <target state="translated">info([info]);</target>
        </trans-unit>
        <trans-unit id="4a2f83d4eeb375d4cb45c4519899823e59be9ca1" translate="yes" xml:space="preserve">
          <source>info.logs</source>
          <target state="translated">info.logs</target>
        </trans-unit>
        <trans-unit id="941c0332d6aefd4c6c03f173e028fd45046fc611" translate="yes" xml:space="preserve">
          <source>initializationFn</source>
          <target state="translated">initializationFn</target>
        </trans-unit>
        <trans-unit id="5f6bb758a703b23a552bbd05bf3b269470bff935" translate="yes" xml:space="preserve">
          <source>initializing data during development, or for examples, as seen throughout these docs.</source>
          <target state="translated">개발 중 또는 예를 들어 이러한 문서 전체에서 볼 수 있듯이 데이터 초기화</target>
        </trans-unit>
        <trans-unit id="5f49560034d50bd4521145b746657a72e3d4f17b" translate="yes" xml:space="preserve">
          <source>injecting data via server side scripting.</source>
          <target state="translated">서버 측 스크립팅을 통한 데이터 주입</target>
        </trans-unit>
        <trans-unit id="140f86aae51ab9e1cda9b4254fe98a74eb54c1a1" translate="yes" xml:space="preserve">
          <source>input</source>
          <target state="translated">input</target>
        </trans-unit>
        <trans-unit id="067942f073ffae8ee86838066d3485fbee59de42" translate="yes" xml:space="preserve">
          <source>input (directive)</source>
          <target state="translated">입력 (지시)</target>
        </trans-unit>
        <trans-unit id="5d8d4a4d29eeef8d4270faa01567a381724dd03d" translate="yes" xml:space="preserve">
          <source>input in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</source>
          <target state="translated">input in module &lt;a href=&quot;https://code.angularjs.org/1.8.2/docs/api/ng&quot;&gt;ng&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8dd66dfb0c23f3eab53eb3bc66f567255b972637" translate="yes" xml:space="preserve">
          <source>input[checkbox]</source>
          <target state="translated">input[checkbox]</target>
        </trans-unit>
        <trans-unit id="c480eba59a678ef24d387469f1600953c8a28972" translate="yes" xml:space="preserve">
          <source>input[date]</source>
          <target state="translated">input[date]</target>
        </trans-unit>
        <trans-unit id="1ee7834a1915d47139d9d1a61f0c2bf0742ce47d" translate="yes" xml:space="preserve">
          <source>input[datetime-local]</source>
          <target state="translated">input[datetime-local]</target>
        </trans-unit>
        <trans-unit id="f17419dc225e026437605a1d23ed0c92bc2e6140" translate="yes" xml:space="preserve">
          <source>input[email]</source>
          <target state="translated">input[email]</target>
        </trans-unit>
        <trans-unit id="778ba5cdb39da6bc219bd02e4167fa6170358c5f" translate="yes" xml:space="preserve">
          <source>input[month]</source>
          <target state="translated">input[month]</target>
        </trans-unit>
        <trans-unit id="f96cc8345ffbff9d47335b88bc2f6575ce7e217a" translate="yes" xml:space="preserve">
          <source>input[number]</source>
          <target state="translated">input[number]</target>
        </trans-unit>
        <trans-unit id="cde06c1e3f1755200ba512fc9cbf48c6dc12efbb" translate="yes" xml:space="preserve">
          <source>input[radio]</source>
          <target state="translated">input[radio]</target>
        </trans-unit>
        <trans-unit id="3a1931a3a2d71c1b67878211f39b1624dde95c8f" translate="yes" xml:space="preserve">
          <source>input[range]</source>
          <target state="translated">input[range]</target>
        </trans-unit>
        <trans-unit id="fcfebb46312ed453d7d5480f5a84733293fcff88" translate="yes" xml:space="preserve">
          <source>input[text]</source>
          <target state="translated">input[text]</target>
        </trans-unit>
        <trans-unit id="96cee2082dbd7ec6ccffceee5c21bd87fbb270c1" translate="yes" xml:space="preserve">
          <source>input[time]</source>
          <target state="translated">input[time]</target>
        </trans-unit>
        <trans-unit id="865c711d83d6a35a7ebe516ed590d314f41576e8" translate="yes" xml:space="preserve">
          <source>input[url]</source>
          <target state="translated">input[url]</target>
        </trans-unit>
        <trans-unit id="b98d6ad53db0224f8f097fe86bede7868dd864cc" translate="yes" xml:space="preserve">
          <source>input[week]</source>
          <target state="translated">input[week]</target>
        </trans-unit>
        <trans-unit id="c230c759ceab65786b50ab8f2c7814a85a3a861e" translate="yes" xml:space="preserve">
          <source>instance actions: &lt;code&gt;instance.$action([parameters], [success], [error])&lt;/code&gt;</source>
          <target state="translated">인스턴스 작업 : &lt;code&gt;instance.$action([parameters], [success], [error])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f8bd1dafe11c6da95f1ab36ffccb6dfd0639f0b8" translate="yes" xml:space="preserve">
          <source>instanceCache</source>
          <target state="translated">instanceCache</target>
        </trans-unit>
        <trans-unit id="b1e1a4787bc0b04ece5cf1a3ef12e68d233c8a97" translate="yes" xml:space="preserve">
          <source>instantiate(Type, [locals]);</source>
          <target state="translated">인스턴스화 (Type, [locals]);</target>
        </trans-unit>
        <trans-unit id="f31e5c1a53472c0fdebbb784c4d80944f6edf08b" translate="yes" xml:space="preserve">
          <source>integration with AngularJS application life-cycle</source>
          <target state="translated">AngularJS 애플리케이션 수명주기와 통합</target>
        </trans-unit>
        <trans-unit id="d05222ed3044b12f9f0bb1fb503a8cc582ba3f35" translate="yes" xml:space="preserve">
          <source>interceptors</source>
          <target state="translated">interceptors</target>
        </trans-unit>
        <trans-unit id="c36aa2f30162f3a92ead96ab2a750949a93d222a" translate="yes" xml:space="preserve">
          <source>invoke(fn, [self], [locals]);</source>
          <target state="translated">invoke (fn, [self], [locals]);</target>
        </trans-unit>
        <trans-unit id="f67929386a0710f3f47a68002f68463fd76b0d63" translate="yes" xml:space="preserve">
          <source>invokeApply</source>
          <target state="translated">invokeApply</target>
        </trans-unit>
        <trans-unit id="9670aac098ff6f96883cae6d9ad8f916a7983c25" translate="yes" xml:space="preserve">
          <source>isEnabled();</source>
          <target state="translated">isEnabled();</target>
        </trans-unit>
        <trans-unit id="faf87ac8631fe5f8acb6795db6609253f6ecda90" translate="yes" xml:space="preserve">
          <source>isValid</source>
          <target state="translated">isValid</target>
        </trans-unit>
        <trans-unit id="eb5779e2b2ea151568ab81e2c47b7350768d5f27" translate="yes" xml:space="preserve">
          <source>isolate</source>
          <target state="translated">isolate</target>
        </trans-unit>
        <trans-unit id="92a4924e8e1ddb5a5b5a9030ebcabc1bf76fb677" translate="yes" xml:space="preserve">
          <source>isolation - if the user forgets to set &lt;code&gt;title&lt;/code&gt; attribute of the dialog widget the dialog template will bind to parent scope property. This is unpredictable and undesirable.</source>
          <target state="translated">격리-사용자 가 대화 상자 위젯의 &lt;code&gt;title&lt;/code&gt; 속성 설정을 잊어 버린 경우 대화 상자 템플리트는 상위 범위 특성에 바인드됩니다. 이것은 예측할 수없고 바람직하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="947f1ea66e4603e1109cfa009bb825ab812c7cbf" translate="yes" xml:space="preserve">
          <source>it will execute after the function that scheduled the evaluation (preferably before DOM rendering).</source>
          <target state="translated">평가를 예약 한 기능 후에 (바람직하게는 DOM 렌더링 전에) 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bef4aaaa11015ef79d88f3701f4c69ad690eb4c7" translate="yes" xml:space="preserve">
          <source>iterator</source>
          <target state="translated">iterator</target>
        </trans-unit>
        <trans-unit id="e15b23dd31361791009baab73d7e755c284b30fd" translate="yes" xml:space="preserve">
          <source>iterator offset of the repeated element (0..length-1)</source>
          <target state="translated">반복 된 요소의 반복자 오프셋 (0..length-1)</target>
        </trans-unit>
        <trans-unit id="8d6c215fbe115f38a9a28d4948a607e47ffda206" translate="yes" xml:space="preserve">
          <source>jQuery object.</source>
          <target state="translated">jQuery 객체.</target>
        </trans-unit>
        <trans-unit id="a6c2faf848638dd7620c975050312c7d71da0a70" translate="yes" xml:space="preserve">
          <source>jQuery/jqLite Extras</source>
          <target state="translated">jQuery / jqLite 엑스트라</target>
        </trans-unit>
        <trans-unit id="23558b2fb802d2cf8396134618c0ede0fdfd1753" translate="yes" xml:space="preserve">
          <source>jqLite also provides a method restoring pre-1.8 insecure treatment of XHTML-like tags. This legacy behavior turns input like &lt;code&gt;&amp;lt;div /&amp;gt;&amp;lt;span /&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; like version 1.8 &amp;amp; newer do. To restore it, invoke:</source>
          <target state="translated">jqLite also provides a method restoring pre-1.8 insecure treatment of XHTML-like tags. This legacy behavior turns input like &lt;code&gt;&amp;lt;div /&amp;gt;&amp;lt;span /&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; like version 1.8 &amp;amp; newer do. To restore it, invoke:</target>
        </trans-unit>
        <trans-unit id="df20484128826dc9233a70b7395344f98e830e3d" translate="yes" xml:space="preserve">
          <source>jqLite is a tiny, API-compatible subset of jQuery that allows AngularJS to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most commonly needed functionality with the goal of having a very small footprint.</source>
          <target state="translated">jqLite는 AngularJS가 브라우저 간 호환 방식으로 DOM을 조작 할 수 있도록하는 API 호환의 jQuery 하위 세트입니다. jqLite는 매우 작은 설치 공간을 목표로 가장 일반적으로 필요한 기능 만 구현합니다.</target>
        </trans-unit>
        <trans-unit id="c15d3092c4aaf95e91bb81c711843014ea88cefb" translate="yes" xml:space="preserve">
          <source>jqLite provides only the following jQuery methods:</source>
          <target state="translated">jqLite는 다음과 같은 jQuery 메소드 만 제공합니다.</target>
        </trans-unit>
        <trans-unit id="05d97e6e9834ccf063c552e404b9ecafc5e4d662" translate="yes" xml:space="preserve">
          <source>json</source>
          <target state="translated">json</target>
        </trans-unit>
        <trans-unit id="f091f8ca4d9a2939f28c1eb04032e457994e12e8" translate="yes" xml:space="preserve">
          <source>json (filter)</source>
          <target state="translated">json (필터)</target>
        </trans-unit>
        <trans-unit id="476e905ddc6b4dca4072ce4649eb3d0d82395692" translate="yes" xml:space="preserve">
          <source>jsonp(url, [config]);</source>
          <target state="translated">jsonp (url, [config]);</target>
        </trans-unit>
        <trans-unit id="80251262ebf220e6cc9cdd19ab2b61611578858b" translate="yes" xml:space="preserve">
          <source>just after the &lt;code&gt;ngIf&lt;/code&gt; contents change and a new DOM element is created and injected into the &lt;code&gt;ngIf&lt;/code&gt; container</source>
          <target state="translated">단지 이후 &lt;code&gt;ngIf&lt;/code&gt; 의 내용을 변경하고 새로운 DOM 요소 생성되고 주입 &lt;code&gt;ngIf&lt;/code&gt; 용 용기</target>
        </trans-unit>
        <trans-unit id="05124b784fd95a9b350d2a2ae8c464225198d911" translate="yes" xml:space="preserve">
          <source>just before classes are added and classes are removed from the element at the same time</source>
          <target state="translated">클래스가 추가되고 동시에 요소에서 클래스가 제거되기 직전에</target>
        </trans-unit>
        <trans-unit id="05885b7efbe2ba0e0dfff080e55645a2a074717f" translate="yes" xml:space="preserve">
          <source>just before the &lt;code&gt;ngIf&lt;/code&gt; contents are removed from the DOM</source>
          <target state="translated">&lt;code&gt;ngIf&lt;/code&gt; 컨텐츠가 DOM에서 제거 되기 직전에</target>
        </trans-unit>
        <trans-unit id="098d98b1191c51a23ab0e59c5afcb981d2994b21" translate="yes" xml:space="preserve">
          <source>just before the class is applied to the element</source>
          <target state="translated">클래스가 요소에 적용되기 직전에</target>
        </trans-unit>
        <trans-unit id="fc993888328d3d78f99986f44d90443c9b8660ee" translate="yes" xml:space="preserve">
          <source>just before the class is removed from the element</source>
          <target state="translated">클래스가 요소에서 제거되기 직전에</target>
        </trans-unit>
        <trans-unit id="a62f2225bf70bfaccbc7f1ef2a397836717377de" translate="yes" xml:space="preserve">
          <source>key</source>
          <target state="translated">key</target>
        </trans-unit>
        <trans-unit id="eb4e903a70a4fd44052b7e282b347cc9de690a80" translate="yes" xml:space="preserve">
          <source>key-value map of &lt;code&gt;cacheId&lt;/code&gt; to the result of calling &lt;code&gt;cache#info&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cache#info&lt;/code&gt; 호출 결과에 대한 &lt;code&gt;cacheId&lt;/code&gt; 키-값 맵</target>
        </trans-unit>
        <trans-unit id="5944ae25418ceabcf285dca1d721b77888dac89b" translate="yes" xml:space="preserve">
          <source>keys</source>
          <target state="translated">keys</target>
        </trans-unit>
        <trans-unit id="8b18b4cceb9efeaa6ed86ddd4a8be52500db7524" translate="yes" xml:space="preserve">
          <source>keys are validation tokens (error names),</source>
          <target state="translated">키는 유효성 검사 토큰 (오류 이름)이며</target>
        </trans-unit>
        <trans-unit id="87e6b001d85c53a80493ae9fb30f370b6beb50a7" translate="yes" xml:space="preserve">
          <source>keys are validations tokens (error names).</source>
          <target state="translated">키는 유효성 검사 토큰 (오류 이름)입니다.</target>
        </trans-unit>
        <trans-unit id="692ac74ba1f0a1cb7b728396cc138add5536da3b" translate="yes" xml:space="preserve">
          <source>knows about all internal life-cycle phases, integrates with &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$watch&lt;/a&gt;, ...</source>
          <target state="translated">모든 내부 라이프 사이클 단계에 대해 알고 &lt;a href=&quot;../api/ng/type/%24rootscope.scope#%24watch.html&quot;&gt;$ watch&lt;/a&gt; 와 통합합니다 ...</target>
        </trans-unit>
        <trans-unit id="a2def7dc70741b1587c5a05c7c875b4a06f72ab3" translate="yes" xml:space="preserve">
          <source>lack of behavior expressiveness</source>
          <target state="translated">행동 표현 부족</target>
        </trans-unit>
        <trans-unit id="31aed9e37eb93350fa0862e61ae686529394cfa7" translate="yes" xml:space="preserve">
          <source>leave</source>
          <target state="translated">leave</target>
        </trans-unit>
        <trans-unit id="66cfb65a4fd7aaf2c79d9c1439c940e7bff2bce7" translate="yes" xml:space="preserve">
          <source>leave(element, [options]);</source>
          <target state="translated">휴가 (요소, [옵션]);</target>
        </trans-unit>
        <trans-unit id="e4d68c5a97e466323c2fbe2b655ab578066a1cd5" translate="yes" xml:space="preserve">
          <source>limit</source>
          <target state="translated">limit</target>
        </trans-unit>
        <trans-unit id="8aa3b179b01033866334b54a2bb9e2cd0134ea9c" translate="yes" xml:space="preserve">
          <source>limitTo</source>
          <target state="translated">limitTo</target>
        </trans-unit>
        <trans-unit id="38512e2fabaeebb90b38738964000c81aad9fa75" translate="yes" xml:space="preserve">
          <source>limitTo (filter)</source>
          <target state="translated">limitTo (필터)</target>
        </trans-unit>
        <trans-unit id="4f0aa52d656a3d75867f784b7e9c5d23bf1321c0" translate="yes" xml:space="preserve">
          <source>link</source>
          <target state="translated">link</target>
        </trans-unit>
        <trans-unit id="4d9d0a825018617148496e72d19e218592a147c1" translate="yes" xml:space="preserve">
          <source>link functions</source>
          <target state="translated">링크 기능</target>
        </trans-unit>
        <trans-unit id="71fc4f19ca0e9912058fa0b94850aae8f052cfa2" translate="yes" xml:space="preserve">
          <source>linky</source>
          <target state="translated">linky</target>
        </trans-unit>
        <trans-unit id="a6beb29655ce58b596d4247840378cfc799414db" translate="yes" xml:space="preserve">
          <source>listener</source>
          <target state="translated">listener</target>
        </trans-unit>
        <trans-unit id="7573d274b8c8dd417a5e4cbc6c359fc7db1c1c65" translate="yes" xml:space="preserve">
          <source>literalName</source>
          <target state="translated">literalName</target>
        </trans-unit>
        <trans-unit id="d2fa106090729ea0f9a5e4944ed2afd6dd3e6415" translate="yes" xml:space="preserve">
          <source>literalValue</source>
          <target state="translated">literalValue</target>
        </trans-unit>
        <trans-unit id="008db62a7e9c185a0f26c1764b41b43529412ad3" translate="yes" xml:space="preserve">
          <source>load the &lt;a href=&quot;module&quot;&gt;module&lt;/a&gt; associated with the directive.</source>
          <target state="translated">지시문과 연관된 &lt;a href=&quot;module&quot;&gt;모듈을&lt;/a&gt; 로드하십시오 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
