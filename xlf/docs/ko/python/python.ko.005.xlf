<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="92ce4122d833f9368b375ed599693656c33c96d1" translate="yes" xml:space="preserve">
          <source>A list containing 2-tuples of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instances and strings holding formatted tracebacks. Each tuple represents an expected failure of the test case.</source>
          <target state="translated">2 개의 튜플 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 인스턴스와 형식화 된 역 추적을 보유한 문자열을 포함하는 목록 . 각 튜플은 예상되는 테스트 사례 실패를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="adfc2fa69598f416edc0906695c6be2768745dd0" translate="yes" xml:space="preserve">
          <source>A list containing 2-tuples of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instances and strings holding the reason for skipping the test.</source>
          <target state="translated">테스트 생략 이유를 보유한 2 개의 튜플 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 인스턴스 및 문자열이 포함 된 목록 입니다.</target>
        </trans-unit>
        <trans-unit id="188f395714c720911bcc2d078055feb553b62673" translate="yes" xml:space="preserve">
          <source>A list containing &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instances that were marked as expected failures, but succeeded.</source>
          <target state="translated">예상 실패로 표시되었지만 성공한 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 인스턴스를 포함하는 목록 입니다.</target>
        </trans-unit>
        <trans-unit id="c0894abf939ae74d3fdc742c584302b8dc3eaffa" translate="yes" xml:space="preserve">
          <source>A list containing zero or more of the following values, specifying which elements of the tree to display.</source>
          <target state="translated">표시 할 트리의 요소를 지정하는 다음 값 중 0 개 이상을 포함하는 목록입니다.</target>
        </trans-unit>
        <trans-unit id="94f3ab44b984a41d4a3ccc3bca5a60821aa9485b" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;#doctest.Example&quot;&gt;&lt;code&gt;Example&lt;/code&gt;&lt;/a&gt; objects encoding the individual interactive Python examples that should be run by this test.</source>
          <target state="translated">이 테스트에서 실행해야하는 개별 대화 형 Python 예제를 인코딩하는 &lt;a href=&quot;#doctest.Example&quot;&gt; &lt;code&gt;Example&lt;/code&gt; &lt;/a&gt; 객체 의 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="0d08717c624c36bc99bc8e887e88fc336daf55a9" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;#email.headerregistry.Address&quot;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#email.headerregistry.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; objects in any combination may be used to set the value of an address header. &lt;code&gt;Group&lt;/code&gt; objects whose &lt;code&gt;display_name&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt; will be interpreted as single addresses, which allows an address list to be copied with groups intact by using the list obtained from the &lt;code&gt;groups&lt;/code&gt; attribute of the source header.</source>
          <target state="translated">주소 헤더의 값을 설정하기 위해 임의의 조합 의 &lt;a href=&quot;#email.headerregistry.Address&quot;&gt; &lt;code&gt;Address&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#email.headerregistry.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt; 객체 목록을 사용할 수 있습니다. &lt;code&gt;display_name&lt;/code&gt; 이 &lt;code&gt;None&lt;/code&gt; 인 &lt;code&gt;Group&lt;/code&gt; 객체는 단일 주소로 해석되므로 소스 헤더 의 &lt;code&gt;groups&lt;/code&gt; 속성 에서 얻은 목록을 사용하여 주소 목록을 그대로 그룹으로 복사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ada6c9c5f870014a4ae30f28b8753d03af7735b7" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; objects that have their &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; methods called to see if one of the objects can find the module to be imported. The &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; method is called with at least the absolute name of the module being imported. If the module to be imported is contained in a package, then the parent package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; attribute is passed in as a second argument. The method returns a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;module spec&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt; if the module cannot be found.</source>
          <target state="translated">객체 중 하나가 가져올 모듈을 찾을 수 있는지 확인하기 위해 &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt; &lt;code&gt;find_spec()&lt;/code&gt; &lt;/a&gt; 메소드 가있는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;메타 경로 파인더&lt;/a&gt; 객체 의 목록입니다 . &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt; &lt;code&gt;find_spec()&lt;/code&gt; &lt;/a&gt; 메소드는 모듈의 절대 이름을 가져 최소한으로 불린다. 가져올 모듈이 패키지에 포함 된 경우 상위 패키지의 &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt; 속성이 두 번째 인수로 전달됩니다. 방법은 반환 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;모듈 사양&lt;/a&gt; , 또는 &lt;code&gt;None&lt;/code&gt; 모듈이 발견되지 않는 경우.</target>
        </trans-unit>
        <trans-unit id="5a687cdf67708e7c7576598a8408f14e371fffb4" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; objects that have their &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; methods called to see if one of the objects can find the module to be imported. The &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt;&lt;code&gt;find_spec()&lt;/code&gt;&lt;/a&gt; method is called with at least the absolute name of the module being imported. If the module to be imported is contained in a package, then the parent package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; attribute is passed in as a second argument. The method returns a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;module spec&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt; if the module cannot be found.</source>
          <target state="translated">A list of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; objects that have their &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt; &lt;code&gt;find_spec()&lt;/code&gt; &lt;/a&gt; methods called to see if one of the objects can find the module to be imported. The &lt;a href=&quot;importlib#importlib.abc.MetaPathFinder.find_spec&quot;&gt; &lt;code&gt;find_spec()&lt;/code&gt; &lt;/a&gt; method is called with at least the absolute name of the module being imported. If the module to be imported is contained in a package, then the parent package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt; attribute is passed in as a second argument. The method returns a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;module spec&lt;/a&gt;, or &lt;code&gt;None&lt;/code&gt; if the module cannot be found.</target>
        </trans-unit>
        <trans-unit id="31344a02e0993784eb4314acf41022e52a1a17f1" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;logging#logging.LogRecord&quot;&gt;&lt;code&gt;logging.LogRecord&lt;/code&gt;&lt;/a&gt; objects of the matching log messages.</source>
          <target state="translated">일치하는 로그 메시지 의 &lt;a href=&quot;logging#logging.LogRecord&quot;&gt; &lt;code&gt;logging.LogRecord&lt;/code&gt; &lt;/a&gt; 객체 목록입니다 .</target>
        </trans-unit>
        <trans-unit id="dd17bfbaf0a82494b417e354a5e60123f1b11077" translate="yes" xml:space="preserve">
          <source>A list of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; objects with the formatted output of matching messages.</source>
          <target state="translated">일치하는 메시지의 형식화 된 출력이있는 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 오브젝트 목록 .</target>
        </trans-unit>
        <trans-unit id="f382ed1cd68dc0c07b20c325e25f04c393461059" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;Class&lt;/code&gt; objects which describe the immediate base classes of the class being described. Classes which are named as superclasses but which are not discoverable by &lt;a href=&quot;#pyclbr.readmodule_ex&quot;&gt;&lt;code&gt;readmodule_ex()&lt;/code&gt;&lt;/a&gt; are listed as a string with the class name instead of as &lt;code&gt;Class&lt;/code&gt; objects.</source>
          <target state="translated">기술되고있는 클래스의 직접적인 기본 클래스를 설명하는 &lt;code&gt;Class&lt;/code&gt; 객체 의 목록입니다 . 수퍼 클래스로 이름이 지정되었지만 &lt;a href=&quot;#pyclbr.readmodule_ex&quot;&gt; &lt;code&gt;readmodule_ex()&lt;/code&gt; &lt;/a&gt; 로 검색 할 수없는 클래스는 &lt;code&gt;Class&lt;/code&gt; 객체 대신 클래스 이름을 가진 문자열로 나열됩니다 .</target>
        </trans-unit>
        <trans-unit id="47e533d8c9734517f922eaa86b233a289db98c40" translate="yes" xml:space="preserve">
          <source>A list of CSS classes used for each weekday. The default class list is:</source>
          <target state="translated">각 요일에 사용되는 CSS 클래스 목록입니다. 기본 수업 목록은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f1a68bfed08eae06f51e410f31837e77785239f9" translate="yes" xml:space="preserve">
          <source>A list of CSS classes used for weekday names in the header row. The default is the same as &lt;a href=&quot;#calendar.HTMLCalendar.cssclasses&quot;&gt;&lt;code&gt;cssclasses&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">헤더 행의 요일 이름에 사용되는 CSS 클래스 목록입니다. 기본값은 &lt;a href=&quot;#calendar.HTMLCalendar.cssclasses&quot;&gt; &lt;code&gt;cssclasses&lt;/code&gt; &lt;/a&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="87a9c1cff0e92a561ec91ae2846827451ae8540a" translate="yes" xml:space="preserve">
          <source>A list of available password hashing algorithms, as &lt;code&gt;crypt.METHOD_*&lt;/code&gt; objects. This list is sorted from strongest to weakest.</source>
          <target state="translated">&lt;code&gt;crypt.METHOD_*&lt;/code&gt; 객체 로 사용 가능한 비밀번호 해싱 알고리즘의 목록입니다 . 이 목록은 가장 강한 것에서 가장 약한 것으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="d4f1daea5804e5e781af546c944a5553086ec691" translate="yes" xml:space="preserve">
          <source>A list of callables that take a path argument to try to create a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; for the path. If a finder can be created, it is to be returned by the callable, else raise &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">경로에 대한 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;파인더&lt;/a&gt; 를 작성하기 위해 경로 인수를 사용하는 호출 가능 목록입니다 . 파인더가 작성 될 수 있으면 호출자에 의해 파인더가 리턴되고 그렇지 않으면 &lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="2ef2e26a4d2864c665752fb7ac9f1799ea126f47" translate="yes" xml:space="preserve">
          <source>A list of callables that take a path argument to try to create a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; for the path. If a finder can be created, it is to be returned by the callable, else raise &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A list of callables that take a path argument to try to create a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; for the path. If a finder can be created, it is to be returned by the callable, else raise &lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9aa433c04e75fc5d0459fb3bb364f4a060cf42ad" translate="yes" xml:space="preserve">
          <source>A list of callbacks that will be invoked by the garbage collector before and after collection. The callbacks will be called with two arguments, &lt;em&gt;phase&lt;/em&gt; and &lt;em&gt;info&lt;/em&gt;.</source>
          <target state="translated">수집 전후에 가비지 수집기가 호출 할 콜백 목록입니다. 콜백은 &lt;em&gt;phase&lt;/em&gt; 와 &lt;em&gt;info의&lt;/em&gt; 두 인수로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="f2afc2ea3d64112d083cf30feb15db3adce93b83" translate="yes" xml:space="preserve">
          <source>A list of column identifiers (either symbolic or integer indices) specifying which data columns are displayed and the order in which they appear, or the string &amp;ldquo;#all&amp;rdquo;.</source>
          <target state="translated">표시 할 데이터 열과 표시되는 순서 또는 문자열 &quot;#all&quot;을 지정하는 열 식별자 (기호 또는 정수 인덱스) 목록입니다.</target>
        </trans-unit>
        <trans-unit id="7eff5051ae865a63b9215b5c89488de87ae79f0b" translate="yes" xml:space="preserve">
          <source>A list of column identifiers, specifying the number of columns and their names.</source>
          <target state="translated">열 수와 이름을 지정하는 열 식별자 목록입니다.</target>
        </trans-unit>
        <trans-unit id="d767335b2be7662adb8adfd8712db1b5ba4f4fbe" translate="yes" xml:space="preserve">
          <source>A list of functions performing the individual tests. Each function takes two arguments: the byte-stream and an open file-like object. When &lt;a href=&quot;#imghdr.what&quot;&gt;&lt;code&gt;what()&lt;/code&gt;&lt;/a&gt; is called with a byte-stream, the file-like object will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">개별 테스트를 수행하는 기능 목록. 각 함수는 바이트 스트림과 열린 파일과 같은 두 가지 인수를 사용합니다. 때 &lt;a href=&quot;#imghdr.what&quot;&gt; &lt;code&gt;what()&lt;/code&gt; &lt;/a&gt; 바이트 스트림이라고, 파일과 같은 개체가 없을 것 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90bcc915bd04cdb632928857939a6c56be976e99" translate="yes" xml:space="preserve">
          <source>A list of nodes contained within this node. This is a read-only attribute.</source>
          <target state="translated">이 노드에 포함 된 노드 목록. 이것은 읽기 전용 속성입니다.</target>
        </trans-unit>
        <trans-unit id="3950e8dfdad0ea53153e00b8e9e9d18c3a29eec5" translate="yes" xml:space="preserve">
          <source>A list of objects which the collector found to be unreachable but could not be freed (uncollectable objects). Starting with Python 3.4, this list should be empty most of the time, except when using instances of C extension types with a non-&lt;code&gt;NULL&lt;/code&gt;&lt;code&gt;tp_del&lt;/code&gt; slot.</source>
          <target state="translated">콜렉터가 도달 할 수 없지만 해제 할 수없는 오브젝트 목록 (수집 할 수없는 오브젝트). Python 3.4부터는 &lt;code&gt;NULL&lt;/code&gt; 이 아닌 &lt;code&gt;tp_del&lt;/code&gt; 슬롯 이있는 C 확장 유형의 인스턴스를 사용할 때를 제외하고이 목록은 대부분 비어 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="3bc6fc267d7341a3dcca08f8f142ac83a4167a96" translate="yes" xml:space="preserve">
          <source>A list of prefixes for site-packages directories.</source>
          <target state="translated">사이트 패키지 디렉토리의 접두사 목록.</target>
        </trans-unit>
        <trans-unit id="8edcb62be232dfd25220d722b6ae22369868ca48" translate="yes" xml:space="preserve">
          <source>A list of queued input lines. The cmdqueue list is checked in &lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt;&lt;code&gt;cmdloop()&lt;/code&gt;&lt;/a&gt; when new input is needed; if it is nonempty, its elements will be processed in order, as if entered at the prompt.</source>
          <target state="translated">대기중인 입력 라인 목록. cmdqueue 목록은 새로운 입력이 필요할 때 &lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt; &lt;code&gt;cmdloop()&lt;/code&gt; &lt;/a&gt; 에서 점검됩니다 . 비어 있지 않으면 프롬프트에서 입력 한 것처럼 해당 요소가 순서대로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="fb8177ae3293211d97584d172648ced9f6fff7c8" translate="yes" xml:space="preserve">
          <source>A list of strings representing the file suffixes for non-optimized bytecode modules.</source>
          <target state="translated">최적화되지 않은 바이트 코드 모듈의 파일 접미사를 나타내는 문자열 목록.</target>
        </trans-unit>
        <trans-unit id="3901675df8d6b190ed77ea1e703d8525bebca340" translate="yes" xml:space="preserve">
          <source>A list of strings representing the file suffixes for optimized bytecode modules.</source>
          <target state="translated">최적화 된 바이트 코드 모듈의 파일 접미사를 나타내는 문자열 목록입니다.</target>
        </trans-unit>
        <trans-unit id="a653aca2c57d0c3018c089c4391cde970a1bbfd7" translate="yes" xml:space="preserve">
          <source>A list of strings representing the recognized file suffixes for bytecode modules (including the leading dot).</source>
          <target state="translated">바이트 코드 모듈에 대한 인식 된 파일 접미사 (앞의 점 포함)를 나타내는 문자열 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e918f4be66d93295cae4c211f62265b0072c2822" translate="yes" xml:space="preserve">
          <source>A list of strings representing the recognized file suffixes for extension modules.</source>
          <target state="translated">확장 모듈에 대해 인식 된 파일 접미 부를 나타내는 문자열 목록.</target>
        </trans-unit>
        <trans-unit id="165229fe605da7021efe8ebd3919626a177ba5a3" translate="yes" xml:space="preserve">
          <source>A list of strings representing the recognized file suffixes for source modules.</source>
          <target state="translated">소스 모듈에 대해 인식되는 파일 접미 부를 나타내는 문자열 목록.</target>
        </trans-unit>
        <trans-unit id="2cf2baab931f8fd28ffb46163df67eb66c87370c" translate="yes" xml:space="preserve">
          <source>A list of strings specifying the search path within a package. This attribute is not set on modules.</source>
          <target state="translated">패키지 내에서 검색 경로를 지정하는 문자열 목록입니다. 이 속성은 모듈에 설정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="36c4a5205fd3c16296e139d621087e8e76a326e3" translate="yes" xml:space="preserve">
          <source>A list of strings that specifies the search path for modules. Initialized from the environment variable &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-20&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;, plus an installation-dependent default.</source>
          <target state="translated">모듈의 검색 경로를 지정하는 문자열 목록. 환경 변수 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-20&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; &lt;/a&gt; 와 설치에 따른 기본값으로 초기화되었습니다.</target>
        </trans-unit>
        <trans-unit id="11e214fc1bbf3dd50b6a799acce78790260b5aeb" translate="yes" xml:space="preserve">
          <source>A list of strings that specifies the search path for modules. Initialized from the environment variable &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;, plus an installation-dependent default.</source>
          <target state="translated">A list of strings that specifies the search path for modules. Initialized from the environment variable &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; &lt;/a&gt;, plus an installation-dependent default.</target>
        </trans-unit>
        <trans-unit id="e38561310e8e0218b9a575b157f0c75333b56def" translate="yes" xml:space="preserve">
          <source>A list of tags associated with this item.</source>
          <target state="translated">이 항목과 관련된 태그 목록입니다.</target>
        </trans-unit>
        <trans-unit id="a379ac6f7bfa199dd4ac1bbe2caea169d4e2a31f" translate="yes" xml:space="preserve">
          <source>A list of the non-fatal errors encountered while loading tests. Not reset by the loader at any point. Fatal errors are signalled by the relevant a method raising an exception to the caller. Non-fatal errors are also indicated by a synthetic test that will raise the original error when run.</source>
          <target state="translated">테스트를로드하는 동안 발생한 치명적이지 않은 오류 목록입니다. 어떤 시점에서도 로더에 의해 재설정되지 않습니다. 치명적인 오류는 호출자에게 예외를 발생시키는 관련 메소드에 의해 표시됩니다. 치명적이지 않은 오류는 합성 테스트로 표시되어 실행시 원래 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2b1ad6875b827765bc4d0e85d4c9d9f95c0e168f" translate="yes" xml:space="preserve">
          <source>A list of the path&amp;rsquo;s file extensions:</source>
          <target state="translated">경로의 파일 확장자 목록 :</target>
        </trans-unit>
        <trans-unit id="ee22e51ecfc4901c8fc7a981cfa5f560d71a4cb9" translate="yes" xml:space="preserve">
          <source>A list or tuple. &lt;code&gt;elts&lt;/code&gt; holds a list of nodes representing the elements. &lt;code&gt;ctx&lt;/code&gt; is &lt;a href=&quot;#ast.Store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; if the container is an assignment target (i.e. &lt;code&gt;(x,y)=something&lt;/code&gt;), and &lt;a href=&quot;#ast.Load&quot;&gt;&lt;code&gt;Load&lt;/code&gt;&lt;/a&gt; otherwise.</source>
          <target state="translated">A list or tuple. &lt;code&gt;elts&lt;/code&gt; holds a list of nodes representing the elements. &lt;code&gt;ctx&lt;/code&gt; is &lt;a href=&quot;#ast.Store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt; if the container is an assignment target (i.e. &lt;code&gt;(x,y)=something&lt;/code&gt; ), and &lt;a href=&quot;#ast.Load&quot;&gt; &lt;code&gt;Load&lt;/code&gt; &lt;/a&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="35d28cdab6aac704918e38261cdf6a53a6fb7875" translate="yes" xml:space="preserve">
          <source>A literal &lt;code&gt;'%'&lt;/code&gt; character.</source>
          <target state="translated">리터럴 &lt;code&gt;'%'&lt;/code&gt; 문자</target>
        </trans-unit>
        <trans-unit id="f45f3263fd1db9d34d0d8644f2dd892d64f4f4b5" translate="yes" xml:space="preserve">
          <source>A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes.</source>
          <target state="translated">C에서 순전히 구현 된 장기 실행 계산 (예 : 큰 텍스트 본문에서 정규 표현식 일치)은 수신 된 신호에 관계없이 임의의 시간 동안 중단없이 실행될 수 있습니다. 계산이 끝나면 Python 신호 처리기가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="cde11ed69a30e89ec49d6911501d20641f2ba597" translate="yes" xml:space="preserve">
          <source>A lot of the work, such as parsing the request, is done by the base class &lt;a href=&quot;#http.server.BaseHTTPRequestHandler&quot;&gt;&lt;code&gt;BaseHTTPRequestHandler&lt;/code&gt;&lt;/a&gt;. This class implements the &lt;a href=&quot;#http.server.SimpleHTTPRequestHandler.do_GET&quot;&gt;&lt;code&gt;do_GET()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.server.SimpleHTTPRequestHandler.do_HEAD&quot;&gt;&lt;code&gt;do_HEAD()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">요청 구문 분석과 같은 많은 작업은 기본 클래스 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler&quot;&gt; &lt;code&gt;BaseHTTPRequestHandler&lt;/code&gt; 에&lt;/a&gt; 의해 수행됩니다 . 이 클래스는 &lt;a href=&quot;#http.server.SimpleHTTPRequestHandler.do_GET&quot;&gt; &lt;code&gt;do_GET()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#http.server.SimpleHTTPRequestHandler.do_HEAD&quot;&gt; &lt;code&gt;do_HEAD()&lt;/code&gt; &lt;/a&gt; 함수를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="d1ae909d89ab42bf44a513d624eb1ef523783bbe" translate="yes" xml:space="preserve">
          <source>A mailbox, which may be inspected and modified.</source>
          <target state="translated">검사 및 수정이 가능한 사서함</target>
        </trans-unit>
        <trans-unit id="f690a6cfc5ed4849083abceaf9fb872dd479f2d4" translate="yes" xml:space="preserve">
          <source>A manager object returned by &lt;code&gt;Manager()&lt;/code&gt; controls a server process which holds Python objects and allows other processes to manipulate them using proxies.</source>
          <target state="translated">&lt;code&gt;Manager()&lt;/code&gt; 반환 한 manager 객체 는 Python 객체를 보유하고 다른 프로세스가 프록시를 사용하여 해당 객체를 조작 할 수있는 서버 프로세스를 제어합니다.</target>
        </trans-unit>
        <trans-unit id="5acd53cfe7556a265e24f00273578e1e62cced28" translate="yes" xml:space="preserve">
          <source>A manager returned by &lt;code&gt;Manager()&lt;/code&gt; will support types &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.managers.Namespace&quot;&gt;&lt;code&gt;Namespace&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.RLock&quot;&gt;&lt;code&gt;RLock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.BoundedSemaphore&quot;&gt;&lt;code&gt;BoundedSemaphore&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Barrier&quot;&gt;&lt;code&gt;Barrier&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.Value&quot;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt;. For example,</source>
          <target state="translated">&lt;code&gt;Manager()&lt;/code&gt; 가 반환 한 관리자 는 &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.managers.Namespace&quot;&gt; &lt;code&gt;Namespace&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.RLock&quot;&gt; &lt;code&gt;RLock&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.BoundedSemaphore&quot;&gt; &lt;code&gt;BoundedSemaphore&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Condition&quot;&gt; &lt;code&gt;Condition&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Event&quot;&gt; &lt;code&gt;Event&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Barrier&quot;&gt; &lt;code&gt;Barrier&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#multiprocessing.Value&quot;&gt; &lt;code&gt;Value&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#multiprocessing.Array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; 유형을 지원&lt;/a&gt; 합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="2360f8e6d7dd3571578211ddf621c1aaf733a19d" translate="yes" xml:space="preserve">
          <source>A mapping of &lt;a href=&quot;#contextvars.ContextVar&quot;&gt;&lt;code&gt;ContextVars&lt;/code&gt;&lt;/a&gt; to their values.</source>
          <target state="translated">&lt;a href=&quot;#contextvars.ContextVar&quot;&gt; &lt;code&gt;ContextVars&lt;/code&gt; &lt;/a&gt; 를 해당 값에 매핑</target>
        </trans-unit>
        <trans-unit id="b196921d2c5d1abc5a5afde9b13792567f7149de" translate="yes" xml:space="preserve">
          <source>A marker object used by &lt;code&gt;Token.old_value&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Token.old_value&lt;/code&gt; 가 사용하는 마커 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="691da017d29e7d257f6643136c76ae9eab8b4630" translate="yes" xml:space="preserve">
          <source>A memory buffer that can be used to pass data between Python and an SSL protocol instance.</source>
          <target state="translated">Python과 SSL 프로토콜 인스턴스간에 데이터를 전달하는 데 사용할 수있는 메모리 버퍼입니다.</target>
        </trans-unit>
        <trans-unit id="dcfbafa8ff3d1ab45e2f76a7aee96de1f4885c99" translate="yes" xml:space="preserve">
          <source>A memory-mapped file is created by the &lt;a href=&quot;#mmap.mmap&quot;&gt;&lt;code&gt;mmap&lt;/code&gt;&lt;/a&gt; constructor, which is different on Unix and on Windows. In either case you must provide a file descriptor for a file opened for update. If you wish to map an existing Python file object, use its &lt;code&gt;fileno()&lt;/code&gt; method to obtain the correct value for the &lt;em&gt;fileno&lt;/em&gt; parameter. Otherwise, you can open the file using the &lt;a href=&quot;os#os.open&quot;&gt;&lt;code&gt;os.open()&lt;/code&gt;&lt;/a&gt; function, which returns a file descriptor directly (the file still needs to be closed when done).</source>
          <target state="translated">메모리 매핑 된 파일은 &lt;a href=&quot;#mmap.mmap&quot;&gt; &lt;code&gt;mmap&lt;/code&gt; &lt;/a&gt; 생성자에 의해 만들어지며 Unix와 Windows에서는 다릅니다. 두 경우 모두 업데이트를 위해 열린 파일의 파일 설명자를 제공해야합니다. 기존 Python 파일 객체를 매핑하려면 &lt;code&gt;fileno()&lt;/code&gt; 메서드를 사용하여 &lt;em&gt;fileno&lt;/em&gt; 매개 변수 의 올바른 값을 얻습니다 . 그렇지 않으면, 파일 디스크립터를 직접 리턴하는 &lt;a href=&quot;os#os.open&quot;&gt; &lt;code&gt;os.open()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 파일을 열 수 있습니다 (완료되면 파일을 닫아야합니다).</target>
        </trans-unit>
        <trans-unit id="4e07ad766453ae1f5c12fbab0efd96fbce9a5d6b" translate="yes" xml:space="preserve">
          <source>A memoryview and a &lt;a href=&quot;https://www.python.org/dev/peps/pep-3118&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;PEP 3118&lt;/strong&gt;&lt;/a&gt; exporter are equal if their shapes are equivalent and if all corresponding values are equal when the operands&amp;rsquo; respective format codes are interpreted using &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; syntax.</source>
          <target state="translated">&lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt; 구문을 사용하여 피연산자의 각 형식 코드를 해석 할 때 해당 모양이 동일하고 모든 해당 값이 동일한 경우 메모리 뷰 및 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3118&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;PEP 3118&lt;/strong&gt;&lt;/a&gt; 내보내기는 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="0505188cd402129bb7a1ceab0c1f8c415c35ac5c" translate="yes" xml:space="preserve">
          <source>A memoryview of contents of the shared memory block.</source>
          <target state="translated">공유 메모리 블록의 내용에 대한 메모리 뷰.</target>
        </trans-unit>
        <trans-unit id="bbf17a083c2ede8f6b0db7056b90b9f1617ddecf" translate="yes" xml:space="preserve">
          <source>A message is typically moved from &lt;code&gt;new&lt;/code&gt; to &lt;code&gt;cur&lt;/code&gt; after its mailbox has been accessed, whether or not the message is has been read. A message &lt;code&gt;msg&lt;/code&gt; has been read if &lt;code&gt;&quot;S&quot; in msg.get_flags()&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">일반적으로 메시지를 읽었는지 여부에 상관없이 메일함에 액세스 한 후 메시지가 &lt;code&gt;new&lt;/code&gt; 메시지 에서 &lt;code&gt;cur&lt;/code&gt; 메시지로 이동됩니다 . &lt;code&gt;&quot;S&quot; in msg.get_flags()&lt;/code&gt; 가 &lt;code&gt;True&lt;/code&gt; 인 경우 메시지 &lt;code&gt;msg&lt;/code&gt; 를 읽었습니다 .</target>
        </trans-unit>
        <trans-unit id="452a8fedc6a4cfd70d2adcb1b29d976bbeb804dc" translate="yes" xml:space="preserve">
          <source>A message with Babyl-specific behaviors. Parameter &lt;em&gt;message&lt;/em&gt; has the same meaning as with the &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">Babyl 관련 동작이 포함 된 메시지 매개 변수 &lt;em&gt;메시지&lt;/em&gt; 는 &lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 생성자 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="ac149633a67c1c349439779dfb1ef3d4e3b0e937" translate="yes" xml:space="preserve">
          <source>A message with MH-specific behaviors. Parameter &lt;em&gt;message&lt;/em&gt; has the same meaning as with the &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">MH 관련 동작이 포함 된 메시지 매개 변수 &lt;em&gt;메시지&lt;/em&gt; 는 &lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 생성자 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="cef7580ce921c85b7e519a48bc0f3cd23bf7607c" translate="yes" xml:space="preserve">
          <source>A message with MMDF-specific behaviors. Parameter &lt;em&gt;message&lt;/em&gt; has the same meaning as with the &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">MMDF 관련 동작이있는 메시지 매개 변수 &lt;em&gt;메시지&lt;/em&gt; 는 &lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 생성자 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="81468ce3b45d6d7e99a68708e9ac13d9a23d3a83" translate="yes" xml:space="preserve">
          <source>A message with Maildir-specific behaviors. Parameter &lt;em&gt;message&lt;/em&gt; has the same meaning as with the &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">Maildir 특정 동작이있는 메시지 매개 변수 &lt;em&gt;메시지&lt;/em&gt; 는 &lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 생성자 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="ca526acd0b34062c5d1268d50cde292996ba3b25" translate="yes" xml:space="preserve">
          <source>A message with mbox-specific behaviors. Parameter &lt;em&gt;message&lt;/em&gt; has the same meaning as with the &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">mbox 관련 동작이 포함 된 메시지입니다. 매개 변수 &lt;em&gt;메시지&lt;/em&gt; 는 &lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 생성자 와 동일한 의미를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="7f0e485226b36c41138ec6944e1b8e8901ec04f2" translate="yes" xml:space="preserve">
          <source>A method &lt;code&gt;Turtle.filling()&lt;/code&gt; has been added. It returns a boolean value: &lt;code&gt;True&lt;/code&gt; if a filling process is under way, &lt;code&gt;False&lt;/code&gt; otherwise. This behaviour corresponds to a &lt;code&gt;fill()&lt;/code&gt; call without arguments in Python 2.6.</source>
          <target state="translated">&lt;code&gt;Turtle.filling()&lt;/code&gt; 메소드 가 추가되었습니다. 부울 값을 리턴 합니다. 채우기 프로세스가 진행 중이면 &lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 않으면 False 입니다. 이 동작 은 Python 2.6에서 인수가없는 &lt;code&gt;fill()&lt;/code&gt; 호출에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="fe7d757aac257898e222238cb09c16c1c5cda2df" translate="yes" xml:space="preserve">
          <source>A method for invalidating the cache on the &lt;code&gt;ZoneInfo&lt;/code&gt; class. If no arguments are passed, all caches are invalidated and the next call to the primary constructor for each key will return a new instance.</source>
          <target state="translated">A method for invalidating the cache on the &lt;code&gt;ZoneInfo&lt;/code&gt; class. If no arguments are passed, all caches are invalidated and the next call to the primary constructor for each key will return a new instance.</target>
        </trans-unit>
        <trans-unit id="e81f8acd06e4d19e21298af0b2eca19918eec6c0" translate="yes" xml:space="preserve">
          <source>A method that returns the module object to use when importing a module. This method may return &lt;code&gt;None&lt;/code&gt;, indicating that default module creation semantics should take place.</source>
          <target state="translated">모듈을 가져올 때 사용할 모듈 객체를 반환하는 메서드입니다. 이 메소드는 &lt;code&gt;None&lt;/code&gt; 을 반환 하여 기본 모듈 생성 시맨틱이 발생해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d11fab06ce0f5cc44bfa0f8d64053434db561c11" translate="yes" xml:space="preserve">
          <source>A millisecond is converted to 1000 microseconds.</source>
          <target state="translated">밀리 초는 1000 마이크로 초로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="14694e387827ee5dbdefea0d931e26463c3f8af5" translate="yes" xml:space="preserve">
          <source>A minute is converted to 60 seconds.</source>
          <target state="translated">분은 60 초로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="88a95c4ff9a21fc5643c68a07d0fcb56208d9afc" translate="yes" xml:space="preserve">
          <source>A mock intended to be used as a property, or other descriptor, on a class. &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt;&lt;code&gt;PropertyMock&lt;/code&gt;&lt;/a&gt; provides &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;__get__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__()&lt;/code&gt;&lt;/a&gt; methods so you can specify a return value when it is fetched.</source>
          <target state="translated">클래스에서 속성 또는 다른 설명 자로 사용하기위한 모의. &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt; &lt;code&gt;PropertyMock&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__get__&quot;&gt; &lt;code&gt;__get__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt; &lt;code&gt;__set__()&lt;/code&gt; &lt;/a&gt; 메서드를 제공하므로 가져올 때 반환 값을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9dc8264a0898bec8dca67eef59ff050ee07574c" translate="yes" xml:space="preserve">
          <source>A mock intended to be used as a property, or other descriptor, on a class. &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt;&lt;code&gt;PropertyMock&lt;/code&gt;&lt;/a&gt; provides &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;__get__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__()&lt;/code&gt;&lt;/a&gt; methods so you can specify a return value when it is fetched.</source>
          <target state="translated">A mock intended to be used as a property, or other descriptor, on a class. &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt; &lt;code&gt;PropertyMock&lt;/code&gt; &lt;/a&gt; provides &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__get__&quot;&gt; &lt;code&gt;__get__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__set__&quot;&gt; &lt;code&gt;__set__()&lt;/code&gt; &lt;/a&gt; methods so you can specify a return value when it is fetched.</target>
        </trans-unit>
        <trans-unit id="197f9ad683c388bd841158b51e7273e923b68225" translate="yes" xml:space="preserve">
          <source>A moderately complicated example:</source>
          <target state="translated">약간 복잡한 예 :</target>
        </trans-unit>
        <trans-unit id="5fbdaa31ef1d3360856b509831015ce58c497ad4" translate="yes" xml:space="preserve">
          <source>A module can discover whether or not it is running in the main scope by checking its own &lt;code&gt;__name__&lt;/code&gt;, which allows a common idiom for conditionally executing code in a module when it is run as a script or with &lt;code&gt;python
-m&lt;/code&gt; but not when it is imported:</source>
          <target state="translated">모듈은 자체 &lt;code&gt;__name__&lt;/code&gt; 을 검사하여 기본 범위에서 실행 중인지 여부를 감지 할 수 있습니다.이 기능은 스크립트로 실행되거나 &lt;code&gt;python -m&lt;/code&gt; 으로 실행될 때 모듈에서 코드를 조건부로 실행할 수있는 공통 관용구를 허용 하지만 가져올 때는 그렇지 않습니다. :</target>
        </trans-unit>
        <trans-unit id="9444c1785a75547c005580f49d28d47a17706636" translate="yes" xml:space="preserve">
          <source>A module to generate message authentication codes using hashes.</source>
          <target state="translated">해시를 사용하여 메시지 인증 코드를 생성하는 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="25b564dedd229417c2f008befd0d706d5d1c3d1c" translate="yes" xml:space="preserve">
          <source>A monograph (using Tcl terminology) about differences typically encountered when moving applications to use the new widgets.</source>
          <target state="translated">새 위젯을 사용하도록 애플리케이션을 이동할 때 일반적으로 발생하는 차이점에 대한 모노 그래프 (Tcl 용어 사용).</target>
        </trans-unit>
        <trans-unit id="2cb0b17b5fe49d923ef10619bd2d761e2dba052d" translate="yes" xml:space="preserve">
          <source>A more convenient approach is to use the methods &lt;a href=&quot;#cgi.FieldStorage.getfirst&quot;&gt;&lt;code&gt;getfirst()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cgi.FieldStorage.getlist&quot;&gt;&lt;code&gt;getlist()&lt;/code&gt;&lt;/a&gt; provided by this higher level interface.</source>
          <target state="translated">보다 편리한 방법은 이 상위 인터페이스에서 제공하는 &lt;a href=&quot;#cgi.FieldStorage.getfirst&quot;&gt; &lt;code&gt;getfirst()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#cgi.FieldStorage.getlist&quot;&gt; &lt;code&gt;getlist()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="f606715ea58bd20affcb325cea977c8dc34c9e61" translate="yes" xml:space="preserve">
          <source>A more powerful form of &lt;em&gt;spec&lt;/em&gt; is &lt;em&gt;autospec&lt;/em&gt;. If you set &lt;code&gt;autospec=True&lt;/code&gt; then the mock will be created with a spec from the object being replaced. All attributes of the mock will also have the spec of the corresponding attribute of the object being replaced. Methods and functions being mocked will have their arguments checked and will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are called with the wrong signature. For mocks replacing a class, their return value (the &amp;lsquo;instance&amp;rsquo;) will have the same spec as the class. See the &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; function and &lt;a href=&quot;#auto-speccing&quot;&gt;Autospeccing&lt;/a&gt;.</source>
          <target state="translated">보다 강력한 &lt;em&gt;스펙&lt;/em&gt; 형식 은 &lt;em&gt;autospec&lt;/em&gt; 입니다. &lt;code&gt;autospec=True&lt;/code&gt; 를 설정하면 대체 될 객체의 스펙으로 모의 객체가 생성됩니다. 모의의 모든 속성은 또한 대체되는 객체의 해당 속성의 스펙을 갖습니다. 조롱되는 메소드와 함수는 인수를 검사하고 잘못된 서명으로 호출되면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다. 클래스를 대체하는 모의 경우 반환 값 ( '인스턴스')은 클래스와 동일한 사양을 갖습니다. &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt; 함수 및 &lt;a href=&quot;#auto-speccing&quot;&gt;Autospeccing을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5111e118ade6d2bc5c8e1c77f9aa6dc8faa44c02" translate="yes" xml:space="preserve">
          <source>A more realistic example would look like this:</source>
          <target state="translated">보다 현실적인 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9a66936ddd1b236a8e403c390cda131ea3105877" translate="yes" xml:space="preserve">
          <source>A more robust alternative can be to define a finalizer which only references the specific functions and objects that it needs, rather than having access to the full state of the object:</source>
          <target state="translated">보다 강력한 대안은 객체의 전체 상태에 액세스하지 않고 필요한 특정 기능과 객체 만 참조하는 종료자를 정의하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="dc61502b727e90ac4866b9d814e9fc1fc0b5f529" translate="yes" xml:space="preserve">
          <source>A more serious problem is that it is common for instance attributes to be created in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method and not to exist on the class at all. &lt;em&gt;autospec&lt;/em&gt; can&amp;rsquo;t know about any dynamically created attributes and restricts the api to visible attributes.</source>
          <target state="translated">더 심각한 문제는 인스턴스 속성이 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt; 메서드 에서 생성되고 클래스에 전혀 존재하지 않는 것이 일반적이라는 것입니다 . &lt;em&gt;autospec&lt;/em&gt; 은 동적으로 생성 된 속성을 알 수 없으며 API를 표시 가능한 속성으로 제한합니다.</target>
        </trans-unit>
        <trans-unit id="022217af59a7d8158b8db514a2ff8d38ae0aef37" translate="yes" xml:space="preserve">
          <source>A more serious problem is that it is common for instance attributes to be created in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method and not to exist on the class at all. &lt;em&gt;autospec&lt;/em&gt; can&amp;rsquo;t know about any dynamically created attributes and restricts the api to visible attributes.</source>
          <target state="translated">A more serious problem is that it is common for instance attributes to be created in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt; method and not to exist on the class at all. &lt;em&gt;autospec&lt;/em&gt; can&amp;rsquo;t know about any dynamically created attributes and restricts the api to visible attributes.</target>
        </trans-unit>
        <trans-unit id="14c30e10b4c45f4fdcf93fef2be90b15a755a678" translate="yes" xml:space="preserve">
          <source>A multi-line statement may be given by specifying each line as a separate statement argument; indented lines are possible by enclosing an argument in quotes and using leading spaces. Multiple &lt;a href=&quot;#cmdoption-timeit-s&quot;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/a&gt; options are treated similarly.</source>
          <target state="translated">각 행을 별도의 명령문 인수로 지정하여 여러 줄 명령문을 제공 할 수 있습니다. 들여 쓰기 된 줄은 따옴표로 인수를 묶고 선행 공백을 사용하여 가능합니다. 여러 개의 &lt;a href=&quot;#cmdoption-timeit-s&quot;&gt; &lt;code&gt;-s&lt;/code&gt; &lt;/a&gt; 옵션도 비슷하게 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="e22b35b571387aaed16a131c2e41b7861c259760" translate="yes" xml:space="preserve">
          <source>A mutable mapping of parameters&amp;rsquo; names to arguments&amp;rsquo; values. Contains only explicitly bound arguments. Changes in &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; will reflect in &lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A mutable mapping of parameters&amp;rsquo; names to arguments&amp;rsquo; values. Contains only explicitly bound arguments. Changes in &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; will reflect in &lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt; &lt;code&gt;args&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt; &lt;code&gt;kwargs&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="71e6abbde7b8d36913a73085a08d7bdc4de74dfb" translate="yes" xml:space="preserve">
          <source>A mutex lock.</source>
          <target state="translated">뮤텍스 잠금.</target>
        </trans-unit>
        <trans-unit id="078db6dab94291f0a68718c0a445aadb8d88ed56" translate="yes" xml:space="preserve">
          <source>A name which is linked to the option value. If specified, the value of the progress bar is automatically set to the value of this name whenever the latter is modified.</source>
          <target state="translated">옵션 값에 연결된 이름입니다. 지정된 경우 진행률 표시 줄의 값은 후자가 수정 될 때마다이 이름의 값으로 자동 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="6794d9e2505d3f2e5dff1c6b084b0d32e0259383" translate="yes" xml:space="preserve">
          <source>A named expression. This AST node is produced by the assignment expressions operator (also known as the walrus operator). As opposed to the &lt;a href=&quot;#ast.Assign&quot;&gt;&lt;code&gt;Assign&lt;/code&gt;&lt;/a&gt; node in which the first argument can be multiple nodes, in this case both &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; must be single nodes.</source>
          <target state="translated">A named expression. This AST node is produced by the assignment expressions operator (also known as the walrus operator). As opposed to the &lt;a href=&quot;#ast.Assign&quot;&gt; &lt;code&gt;Assign&lt;/code&gt; &lt;/a&gt; node in which the first argument can be multiple nodes, in this case both &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; must be single nodes.</target>
        </trans-unit>
        <trans-unit id="55c48426bea22866b8115740a6c2a7c42075e62c" translate="yes" xml:space="preserve">
          <source>A named tuple containing the three components of the ncurses library version: &lt;em&gt;major&lt;/em&gt;, &lt;em&gt;minor&lt;/em&gt;, and &lt;em&gt;patch&lt;/em&gt;. All values are integers. The components can also be accessed by name, so &lt;code&gt;curses.ncurses_version[0]&lt;/code&gt; is equivalent to &lt;code&gt;curses.ncurses_version.major&lt;/code&gt; and so on.</source>
          <target state="translated">ncurses 라이브러리 버전의 세 가지 구성 요소 인 &lt;em&gt;major&lt;/em&gt; , &lt;em&gt;minor&lt;/em&gt; 및 &lt;em&gt;patch가&lt;/em&gt; 포함 된 명명 된 튜플 입니다. 모든 값은 정수입니다. 구성 요소는 이름으로도 액세스 할 수 있으므로 &lt;code&gt;curses.ncurses_version[0]&lt;/code&gt; 은 &lt;code&gt;curses.ncurses_version.major&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="bc4f58d7428fdbe37d30d028fe13d12d2180f7d6" translate="yes" xml:space="preserve">
          <source>A namedtuple that holds a brief summary of a module&amp;rsquo;s info.</source>
          <target state="translated">모듈 정보에 대한 간략한 요약을 보유한 명명 된 튜플.</target>
        </trans-unit>
        <trans-unit id="72158d4426db39e0e4d103c3538715b0ee176f1c" translate="yes" xml:space="preserve">
          <source>A namespace for a function or method. This class inherits &lt;a href=&quot;#symtable.SymbolTable&quot;&gt;&lt;code&gt;SymbolTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">함수 또는 메서드의 네임 스페이스 이 클래스는 &lt;a href=&quot;#symtable.SymbolTable&quot;&gt; &lt;code&gt;SymbolTable&lt;/code&gt; 을&lt;/a&gt; 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="0311cf0abe88a0934a46b90b52373f3304204a2b" translate="yes" xml:space="preserve">
          <source>A namespace object has no public methods, but does have writable attributes. Its representation shows the values of its attributes.</source>
          <target state="translated">네임 스페이스 개체에는 공용 메서드가 없지만 쓰기 가능한 특성이 있습니다. 그 표현은 그 속성의 값을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="edbf524e185c69846a3a4abd549e56f7ebc4b0c0" translate="yes" xml:space="preserve">
          <source>A namespace of a class. This class inherits &lt;a href=&quot;#symtable.SymbolTable&quot;&gt;&lt;code&gt;SymbolTable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">클래스의 네임 스페이스 이 클래스는 &lt;a href=&quot;#symtable.SymbolTable&quot;&gt; &lt;code&gt;SymbolTable&lt;/code&gt; 을&lt;/a&gt; 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="b2a64660a5b30d67efe5fed367964bb0e3c6f537" translate="yes" xml:space="preserve">
          <source>A namespace table for a block. The constructor is not public.</source>
          <target state="translated">블록의 네임 스페이스 테이블. 생성자가 공개되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fa2eecff8d86240af243f0bd4af31ae2aa5fea1b" translate="yes" xml:space="preserve">
          <source>A negative value &lt;code&gt;-N&lt;/code&gt; indicates that the child was terminated by signal &lt;code&gt;N&lt;/code&gt; (POSIX only).</source>
          <target state="translated">음수 값 &lt;code&gt;-N&lt;/code&gt; 은 자식이 신호 &lt;code&gt;N&lt;/code&gt; 에 의해 종료되었음을 나타냅니다 (POSIX 만 해당).</target>
        </trans-unit>
        <trans-unit id="85390c873308f954877a6b491b2ffd8bd25849d2" translate="yes" xml:space="preserve">
          <source>A new &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; class must have one base Enum class, up to one concrete data type, and as many &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;-based mixin classes as needed. The order of these base classes is:</source>
          <target state="translated">새로운 &lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; 클래스에는 하나의 기본 Enum 클래스, 최대 하나의 구체적인 데이터 유형 및 필요한 수의 &lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt; 기반 믹스 인 클래스가 있어야합니다. 이 기본 클래스의 순서는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cc186fde8acf9a6ebb42e1a3ac6b6d13c0924a62" translate="yes" xml:space="preserve">
          <source>A new array whose items are restricted by &lt;em&gt;typecode&lt;/em&gt;, and initialized from the optional &lt;em&gt;initializer&lt;/em&gt; value, which must be a list, a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, or iterable over elements of the appropriate type.</source>
          <target state="translated">&lt;em&gt;typecode&lt;/em&gt; 에 의해 항목이 제한되고 선택적 &lt;em&gt;이니셜 라이저&lt;/em&gt; 값 에서 초기화되는 새 배열로 , 목록, &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;바이트와 ​​같은 오브젝트&lt;/a&gt; 이거나 적절한 유형의 요소에 대해 반복 가능해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a3007c327ed2a72770ff0fc78595dbb8513a178" translate="yes" xml:space="preserve">
          <source>A new array whose items are restricted by &lt;em&gt;typecode&lt;/em&gt;, and initialized from the optional &lt;em&gt;initializer&lt;/em&gt; value, which must be a list, a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, or iterable over elements of the appropriate type.</source>
          <target state="translated">A new array whose items are restricted by &lt;em&gt;typecode&lt;/em&gt;, and initialized from the optional &lt;em&gt;initializer&lt;/em&gt; value, which must be a list, a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;, or iterable over elements of the appropriate type.</target>
        </trans-unit>
        <trans-unit id="f81c36f53fb29db71f41ab907332355f7d182eda" translate="yes" xml:space="preserve">
          <source>A nice feature of this sort is that you can efficiently insert new items while the sort is going on, provided that the inserted items are not &amp;ldquo;better&amp;rdquo; than the last 0&amp;rsquo;th element you extracted. This is especially useful in simulation contexts, where the tree holds all incoming events, and the &amp;ldquo;win&amp;rdquo; condition means the smallest scheduled time. When an event schedules other events for execution, they are scheduled into the future, so they can easily go into the heap. So, a heap is a good structure for implementing schedulers (this is what I used for my MIDI sequencer :-).</source>
          <target state="translated">삽입 된 항목이 추출한 마지막 0 번째 요소보다 &quot;더 나은&quot;항목이 아니라면 정렬이 진행되는 동안 새 항목을 효율적으로 삽입 할 수 있다는 것이이 정렬의 좋은 기능입니다. 이것은 트리가 들어오는 모든 이벤트를 보유하고 &quot;승리&quot;조건이 가장 작은 예약 시간을 의미하는 시뮬레이션 컨텍스트에서 특히 유용합니다. 이벤트가 실행을 위해 다른 이벤트를 예약하면 향후에 예약되므로 쉽게 힙에 들어갈 수 있습니다. 따라서 힙은 스케줄러를 구현하기에 좋은 구조입니다 (이것은 제가 MIDI 시퀀서에 사용했습니다 :-).</target>
        </trans-unit>
        <trans-unit id="9e3b6ed28c8d38433a40b858b74030f4808ae596" translate="yes" xml:space="preserve">
          <source>A nice selection of exceptions is defined as well:</source>
          <target state="translated">훌륭한 예외 선택도 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="7908e5fb359ed5ac5ef0d2533eb509744f0641d3" translate="yes" xml:space="preserve">
          <source>A node visitor base class that walks the abstract syntax tree and calls a visitor function for every node found. This function may return a value which is forwarded by the &lt;a href=&quot;#ast.NodeVisitor.visit&quot;&gt;&lt;code&gt;visit()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">추상 구문 트리를 걷고 발견 된 모든 노드에 대해 방문자 기능을 호출하는 노드 방문자 기본 클래스입니다. 이 함수는 &lt;a href=&quot;#ast.NodeVisitor.visit&quot;&gt; &lt;code&gt;visit()&lt;/code&gt; &lt;/a&gt; 메소드에 의해 전달되는 값을 리턴 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bcff5c6e5fa686fae2d5599c1b2e80eb183fd626" translate="yes" xml:space="preserve">
          <source>A non-ASCII character encodable by &lt;a href=&quot;os#os.fsencode&quot;&gt;&lt;code&gt;os.fsencode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;os#os.fsencode&quot;&gt; &lt;code&gt;os.fsencode()&lt;/code&gt; &lt;/a&gt; 인코딩 할 수있는 비 ASCII 문자 입니다.</target>
        </trans-unit>
        <trans-unit id="9428ac03bb4a2f6c9cf42be05b489381aaa0a0a3" translate="yes" xml:space="preserve">
          <source>A non-callable version of &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호출 할 수없는 &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt; 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="896479390810c1db85db783aa18d9d0a12993c66" translate="yes" xml:space="preserve">
          <source>A non-callable version of &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;. The constructor parameters have the same meaning of &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;, with the exception of &lt;em&gt;return_value&lt;/em&gt; and &lt;em&gt;side_effect&lt;/em&gt; which have no meaning on a non-callable mock.</source>
          <target state="translated">호출 할 수없는 &lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; &lt;/a&gt; 버전입니다 . 생성자 매개 변수는 호출 할 수없는 모의에 의미가없는 &lt;em&gt;return_value&lt;/em&gt; 및 &lt;em&gt;side_effect&lt;/em&gt; 를 제외하고 &lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; &lt;/a&gt; 과 동일한 의미를 갖습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="10ff4f7d10e3a93a3d1a37ab022e45964047c42b" translate="yes" xml:space="preserve">
          <source>A non-capturing version of regular parentheses. Matches whatever regular expression is inside the parentheses, but the substring matched by the group &lt;em&gt;cannot&lt;/em&gt; be retrieved after performing a match or referenced later in the pattern.</source>
          <target state="translated">일반 괄호의 비 캡처 버전입니다. 괄호 안에있는 정규식과 일치하지만 그룹에서 일치하는 하위 문자열은 일치를 수행 한 후 검색하거나 나중에 패턴에서 참조 &lt;em&gt;할 수 없습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b6fab50bbf4b5f5cc024237fe4be2e580f495061" translate="yes" xml:space="preserve">
          <source>A non-existent handler id found during an incremental call.</source>
          <target state="translated">증분 호출 중에 존재하지 않는 핸들러 ID가 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff564abff91c1ddf39b73322568dc07eb6cdddc5" translate="yes" xml:space="preserve">
          <source>A non-recursive lock object: a close analog of &lt;a href=&quot;threading#threading.Lock&quot;&gt;&lt;code&gt;threading.Lock&lt;/code&gt;&lt;/a&gt;. Once a process or thread has acquired a lock, subsequent attempts to acquire it from any process or thread will block until it is released; any process or thread may release it. The concepts and behaviors of &lt;a href=&quot;threading#threading.Lock&quot;&gt;&lt;code&gt;threading.Lock&lt;/code&gt;&lt;/a&gt; as it applies to threads are replicated here in &lt;a href=&quot;#multiprocessing.Lock&quot;&gt;&lt;code&gt;multiprocessing.Lock&lt;/code&gt;&lt;/a&gt; as it applies to either processes or threads, except as noted.</source>
          <target state="translated">비 재귀 잠금 객체 : &lt;a href=&quot;threading#threading.Lock&quot;&gt; &lt;code&gt;threading.Lock&lt;/code&gt; &lt;/a&gt; 과 유사한 아날로그 . 프로세스 나 스레드가 잠금을 획득 한 후에는 프로세스 나 스레드에서 잠금을 획득하려고 시도 할 때까지 해제 될 때까지 차단됩니다. 모든 프로세스 또는 스레드가이를 해제 할 수 있습니다. 스레드에 적용되는 &lt;a href=&quot;threading#threading.Lock&quot;&gt; &lt;code&gt;threading.Lock&lt;/code&gt; &lt;/a&gt; 의 개념과 동작은 &lt;a href=&quot;#multiprocessing.Lock&quot;&gt; &lt;code&gt;multiprocessing.Lock&lt;/code&gt; &lt;/a&gt; 에서 여기에 복제 됩니다. 언급 된 경우를 제외하고 프로세스 나 스레드에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="10b063540ea72d17ad3a65c6b8fa5e5506f3d45b" translate="yes" xml:space="preserve">
          <source>A normal build &amp;amp; test does not run into this situation but it can happen when trying to run the standard library test suite from an interpreter that doesn&amp;rsquo;t have an obvious home with Python&amp;rsquo;s current home finding logic.</source>
          <target state="translated">일반적인 빌드 및 테스트는 이러한 상황에 빠지지 않지만 Python의 현재 홈 찾기 논리가있는 명확한 가정이없는 인터프리터에서 표준 라이브러리 테스트 스위트를 실행하려고 할 때 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f21e999a31cb519fda4759011f3f8f4601461947" translate="yes" xml:space="preserve">
          <source>A note about &lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt;&lt;code&gt;KeyboardInterrupt&lt;/code&gt;&lt;/a&gt;: this exception may occur elsewhere in this code, and may not always be caught. The caller should be prepared to deal with it.</source>
          <target state="translated">&lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt; &lt;code&gt;KeyboardInterrupt&lt;/code&gt; 에&lt;/a&gt; 대한 참고 사항 :이 예외는이 코드의 다른 곳에서 발생할 수 있으며 항상 잡히지는 않을 수 있습니다. 발신자는이를 처리 할 준비가되어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="6118da4bdf7846158dea6e9addeee205b10e624b" translate="yes" xml:space="preserve">
          <source>A note on branch cuts: They are curves along which the given function fails to be continuous. They are a necessary feature of many complex functions. It is assumed that if you need to compute with complex functions, you will understand about branch cuts. Consult almost any (not too elementary) book on complex variables for enlightenment. For information of the proper choice of branch cuts for numerical purposes, a good reference should be the following:</source>
          <target state="translated">분기 컷에 대한 참고 사항 : 주어진 함수가 연속적이지 않은 곡선입니다. 그것들은 많은 복잡한 기능의 필수 기능입니다. 복잡한 함수로 계산해야하는 경우 분기 컷에 대해 이해한다고 가정합니다. 깨달음에 대한 복잡한 변수에 관한 거의 모든 책을 참고하십시오. 수치 목적을위한 적절한 분기 절단 선택에 대한 정보는 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8ee90f29803eb8229a07515ffa9d573714dc7839" translate="yes" xml:space="preserve">
          <source>A null-terminated string.</source>
          <target state="translated">null로 끝나는 문자열</target>
        </trans-unit>
        <trans-unit id="c13366fad5520b371df7f0cb744d4b882a5ce6dd" translate="yes" xml:space="preserve">
          <source>A number of Unix commands allow the user to intermix optional arguments with positional arguments. The &lt;a href=&quot;#argparse.ArgumentParser.parse_intermixed_args&quot;&gt;&lt;code&gt;parse_intermixed_args()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#argparse.ArgumentParser.parse_known_intermixed_args&quot;&gt;&lt;code&gt;parse_known_intermixed_args()&lt;/code&gt;&lt;/a&gt; methods support this parsing style.</source>
          <target state="translated">다수의 유닉스 명령어는 사용자가 선택적 인수와 위치 인수를 혼합 할 수 있습니다. &lt;a href=&quot;#argparse.ArgumentParser.parse_intermixed_args&quot;&gt; &lt;code&gt;parse_intermixed_args()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#argparse.ArgumentParser.parse_known_intermixed_args&quot;&gt; &lt;code&gt;parse_known_intermixed_args()&lt;/code&gt; &lt;/a&gt; 메소드는이 구문 분석 스타일을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="5905a2ee45fdf4d45451104b77e07c4287f696a0" translate="yes" xml:space="preserve">
          <source>A number of alterations are also made to the &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; module. Firstly, &lt;code&gt;sys.path&lt;/code&gt; may be altered as described above. &lt;code&gt;sys.argv[0]&lt;/code&gt; is updated with the value of &lt;code&gt;file_path&lt;/code&gt; and &lt;code&gt;sys.modules[__name__]&lt;/code&gt; is updated with a temporary module object for the module being executed. All modifications to items in &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt; are reverted before the function returns.</source>
          <target state="translated">&lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; &lt;/a&gt; 모듈 도 여러 가지로 변경되었습니다 . 먼저 &lt;code&gt;sys.path&lt;/code&gt; 는 위에서 설명한대로 변경 될 수 있습니다. &lt;code&gt;sys.argv[0]&lt;/code&gt; 은 &lt;code&gt;file_path&lt;/code&gt; 의 값으로 업데이트 되고 &lt;code&gt;sys.modules[__name__]&lt;/code&gt; 은 실행중인 모듈의 임시 모듈 객체로 업데이트됩니다. &lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; 의&lt;/a&gt; 항목에 대한 모든 수정 사항 은 함수가 반환되기 전에 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="7aaac470309a93d5303ae1989bb54d18464aaff9" translate="yes" xml:space="preserve">
          <source>A number of browser types are predefined. This table gives the type names that may be passed to the &lt;a href=&quot;#webbrowser.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; function and the corresponding instantiations for the controller classes, all defined in this module.</source>
          <target state="translated">많은 브라우저 유형이 사전 정의되어 있습니다. 이 테이블은 &lt;a href=&quot;#webbrowser.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 함수에 전달 될 수있는 유형 이름 과이 클래스에 정의 된 컨트롤러 클래스의 해당 인스턴스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5b9b4dafe3106a819531ac204c06e56766477b2e" translate="yes" xml:space="preserve">
          <source>A number of option flags control various aspects of doctest&amp;rsquo;s behavior. Symbolic names for the flags are supplied as module constants, which can be &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;bitwise ORed&lt;/a&gt; together and passed to various functions. The names can also be used in &lt;a href=&quot;#doctest-directives&quot;&gt;doctest directives&lt;/a&gt;, and may be passed to the doctest command line interface via the &lt;code&gt;-o&lt;/code&gt; option.</source>
          <target state="translated">다수의 옵션 플래그는 doctest 동작의 다양한 측면을 제어합니다. 플래그의 기호 이름은 모듈 상수로 제공되며 &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;비트 단위 OR로&lt;/a&gt; 결합하여 다양한 함수에 전달할 수 있습니다. 이 이름은 &lt;a href=&quot;#doctest-directives&quot;&gt;doctest 지시문&lt;/a&gt; 에서도 사용할 수 있으며 &lt;code&gt;-o&lt;/code&gt; 옵션을 통해 doctest 명령 행 인터페이스로 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7d248406498c9e34559ce116cdbf8b66476b9bb7" translate="yes" xml:space="preserve">
          <source>A number of option flags control various aspects of doctest&amp;rsquo;s behavior. Symbolic names for the flags are supplied as module constants, which can be &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#bitwise&quot;&gt;bitwise ORed&lt;/a&gt; together and passed to various functions. The names can also be used in &lt;a href=&quot;#doctest-directives&quot;&gt;doctest directives&lt;/a&gt;, and may be passed to the doctest command line interface via the &lt;code&gt;-o&lt;/code&gt; option.</source>
          <target state="translated">A number of option flags control various aspects of doctest&amp;rsquo;s behavior. Symbolic names for the flags are supplied as module constants, which can be &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#bitwise&quot;&gt;bitwise ORed&lt;/a&gt; together and passed to various functions. The names can also be used in &lt;a href=&quot;#doctest-directives&quot;&gt;doctest directives&lt;/a&gt;, and may be passed to the doctest command line interface via the &lt;code&gt;-o&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="24786294a108030a38cc3d65cb7244c171d67285" translate="yes" xml:space="preserve">
          <source>A number of predefined codecs are specific to Python, so their codec names have no meaning outside Python. These are listed in the tables below based on the expected input and output types (note that while text encodings are the most common use case for codecs, the underlying codec infrastructure supports arbitrary data transforms rather than just text encodings). For asymmetric codecs, the stated meaning describes the encoding direction.</source>
          <target state="translated">사전 정의 된 많은 코덱은 Python에만 해당되므로 코덱 이름은 Python 외부에서 의미가 없습니다. 예상되는 입력 및 출력 유형에 따라 아래 표에 나열되어 있습니다 (텍스트 인코딩은 코덱의 가장 일반적인 사용 사례이지만 기본 코덱 인프라는 텍스트 인코딩이 아닌 임의의 데이터 변환을 지원합니다). 비대칭 코덱의 경우, 언급 된 의미는 인코딩 방향을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="4227ce7e78debdba89f4c96569097661301c7c9c" translate="yes" xml:space="preserve">
          <source>A number of widgets require &amp;ldquo;index&amp;rdquo; parameters to be passed. These are used to point at a specific place in a Text widget, or to particular characters in an Entry widget, or to particular menu items in a Menu widget.</source>
          <target state="translated">많은 위젯에는 &quot;인덱스&quot;매개 변수가 전달되어야합니다. 텍스트 위젯의 특정 위치, 항목 위젯의 특정 문자 또는 메뉴 위젯의 특정 메뉴 항목을 가리키는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="87a43f9cfd3da2836cdeb874afef3c2da7ba877a" translate="yes" xml:space="preserve">
          <source>A number specifying the maximum value. Defaults to 100.</source>
          <target state="translated">최대 값을 지정하는 숫자입니다. 기본값은 100입니다.</target>
        </trans-unit>
        <trans-unit id="f0a2832b6c8a08921422a5d8a1515c121adf4755" translate="yes" xml:space="preserve">
          <source>A numeric error code from the C variable &lt;code&gt;errno&lt;/code&gt;.</source>
          <target state="translated">는 C 변수에서 숫자 오류 코드 &lt;code&gt;errno&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7e153424dba9fbc1ebba1d78eaffba93da702aa" translate="yes" xml:space="preserve">
          <source>A numeric error code from the expat parser. See the documentation of &lt;a href=&quot;pyexpat#module-xml.parsers.expat&quot;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;&lt;/a&gt; for the list of error codes and their meanings.</source>
          <target state="translated">국외 파서의 숫자 오류 코드입니다. 오류 코드 및 의미 목록 은 &lt;a href=&quot;pyexpat#module-xml.parsers.expat&quot;&gt; &lt;code&gt;xml.parsers.expat&lt;/code&gt; &lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="033121bc98a1cde9c09ce5624067c2522fbe46ec" translate="yes" xml:space="preserve">
          <source>A numeric error number that denotes the verification error.</source>
          <target state="translated">확인 오류를 나타내는 숫자 오류 번호입니다.</target>
        </trans-unit>
        <trans-unit id="3f40732fa35edcaee5dbbdaa3d3dc1424861ae23" translate="yes" xml:space="preserve">
          <source>A numeric handle of a system object which will become &amp;ldquo;ready&amp;rdquo; when the process ends.</source>
          <target state="translated">프로세스가 종료 될 때&amp;ldquo;준비&amp;rdquo;될 시스템 개체의 숫자 핸들.</target>
        </trans-unit>
        <trans-unit id="6cca780fc4b38afc038d9433881555b00e41699a" translate="yes" xml:space="preserve">
          <source>A one-character string used by the writer to escape the &lt;em&gt;delimiter&lt;/em&gt; if &lt;em&gt;quoting&lt;/em&gt; is set to &lt;a href=&quot;#csv.QUOTE_NONE&quot;&gt;&lt;code&gt;QUOTE_NONE&lt;/code&gt;&lt;/a&gt; and the &lt;em&gt;quotechar&lt;/em&gt; if &lt;em&gt;doublequote&lt;/em&gt; is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;. On reading, the &lt;em&gt;escapechar&lt;/em&gt; removes any special meaning from the following character. It defaults to &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, which disables escaping.</source>
          <target state="translated">작가가 사용하는 한 문자열은 탈출 &lt;em&gt;구분 기호를&lt;/em&gt; 하는 경우 &lt;em&gt;인용이&lt;/em&gt; 설정되어 &lt;a href=&quot;#csv.QUOTE_NONE&quot;&gt; &lt;code&gt;QUOTE_NONE&lt;/code&gt; &lt;/a&gt; 과 &lt;em&gt;quotechar이&lt;/em&gt; 경우 &lt;em&gt;doublequote이&lt;/em&gt; 있다 &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt; . 읽을 때 &lt;em&gt;escapechar&lt;/em&gt; 는 다음 문자에서 특별한 의미를 제거합니다. 기본값은 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 이며 이스케이프를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="fda1d9903017ca3b081766b53e4516e92f15d4c0" translate="yes" xml:space="preserve">
          <source>A one-character string used to quote fields containing special characters, such as the &lt;em&gt;delimiter&lt;/em&gt; or &lt;em&gt;quotechar&lt;/em&gt;, or which contain new-line characters. It defaults to &lt;code&gt;'&quot;'&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;구분 기호&lt;/em&gt; 또는 &lt;em&gt;quotechar&lt;/em&gt; 와 같은 특수 문자 를 포함 하거나 &lt;em&gt;개행&lt;/em&gt; 문자를 포함하는 필드를 인용하는 데 사용되는 한 문자 문자열 입니다. 기본값은 &lt;code&gt;'&quot;'&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0cddc04fba1abe2f49cf33fa79783bec8ce15114" translate="yes" xml:space="preserve">
          <source>A one-character string used to separate fields. It defaults to &lt;code&gt;','&lt;/code&gt;.</source>
          <target state="translated">필드를 구분하는 데 사용되는 한 문자 문자열입니다. 기본값은 &lt;code&gt;','&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="266b9992fac1657d44a6361498f20ec9bfba29ef" translate="yes" xml:space="preserve">
          <source>A pad is like a window, except that it is not restricted by the screen size, and is not necessarily associated with a particular part of the screen. Pads can be used when a large window is needed, and only a part of the window will be on the screen at one time. Automatic refreshes of pads (such as from scrolling or echoing of input) do not occur. The &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#curses.window.noutrefresh&quot;&gt;&lt;code&gt;noutrefresh()&lt;/code&gt;&lt;/a&gt; methods of a pad require 6 arguments to specify the part of the pad to be displayed and the location on the screen to be used for the display. The arguments are &lt;em&gt;pminrow&lt;/em&gt;, &lt;em&gt;pmincol&lt;/em&gt;, &lt;em&gt;sminrow&lt;/em&gt;, &lt;em&gt;smincol&lt;/em&gt;, &lt;em&gt;smaxrow&lt;/em&gt;, &lt;em&gt;smaxcol&lt;/em&gt;; the &lt;em&gt;p&lt;/em&gt; arguments refer to the upper left corner of the pad region to be displayed and the &lt;em&gt;s&lt;/em&gt; arguments define a clipping box on the screen within which the pad region is to be displayed.</source>
          <target state="translated">패드는 화면 크기에 의해 제한되지 않으며 화면의 특정 부분과 반드시 ​​관련 될 필요는 없다는 점을 제외하면 창과 같습니다. 큰 창이 필요한 경우 패드를 사용할 수 있으며 한 번에 창의 일부만 화면에 표시됩니다. 입력을 스크롤하거나 에코하는 등 패드를 자동으로 새로 고치지 않습니다. 패드 의 &lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#curses.window.noutrefresh&quot;&gt; &lt;code&gt;noutrefresh()&lt;/code&gt; &lt;/a&gt; 메소드는 표시 할 패드의 일부와 화면에 표시 할 위치를 지정하기 위해 6 개의 인수가 필요합니다. 인수는 &lt;em&gt;pminrow&lt;/em&gt; , &lt;em&gt;pmincol&lt;/em&gt; , &lt;em&gt;sminrow&lt;/em&gt; , &lt;em&gt;smincol&lt;/em&gt; , &lt;em&gt;smaxrow&lt;/em&gt; , &lt;em&gt;smaxcol입니다&lt;/em&gt; . &lt;em&gt;P&lt;/em&gt;인수는 표시 할 패드 영역의 왼쪽 위 모서리를 나타내며 &lt;em&gt;s&lt;/em&gt; 인수는 화면에 패드 영역이 표시 될 클리핑 상자를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="543bffc96e07b14eab3de589caf9259026e4de84" translate="yes" xml:space="preserve">
          <source>A pair &lt;code&gt;(host, port)&lt;/code&gt; is used for the &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt; address family, where &lt;em&gt;host&lt;/em&gt; is a string representing either a hostname in Internet domain notation like &lt;code&gt;'daring.cwi.nl'&lt;/code&gt; or an IPv4 address like &lt;code&gt;'100.50.200.5'&lt;/code&gt;, and &lt;em&gt;port&lt;/em&gt; is an integer.</source>
          <target state="translated">&lt;a href=&quot;#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt; 주소 패밀리 에는 한 쌍 &lt;code&gt;(host, port)&lt;/code&gt; 이 사용됩니다 . 여기서 &lt;em&gt;host&lt;/em&gt; 는 &lt;code&gt;'daring.cwi.nl'&lt;/code&gt; 과 같은 인터넷 도메인 표기법의 호스트 이름 또는 &lt;code&gt;'100.50.200.5'&lt;/code&gt; 와 같은 IPv4 주소를 나타내는 문자열 이며 &lt;em&gt;port&lt;/em&gt; 는 정수&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b93cb8865023f461acb5361c56e206ee1aa8182d" translate="yes" xml:space="preserve">
          <source>A panel stack extension that adds depth to curses windows.</source>
          <target state="translated">창을 curses에 깊이를 추가하는 패널 스택 확장.</target>
        </trans-unit>
        <trans-unit id="a6b4cf6c75b1cf3706374d6b2abafb188224b9a0" translate="yes" xml:space="preserve">
          <source>A parallel equivalent of the &lt;a href=&quot;functions#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; built-in function (it supports only one &lt;em&gt;iterable&lt;/em&gt; argument though, for multiple iterables see &lt;a href=&quot;#multiprocessing.pool.Pool.starmap&quot;&gt;&lt;code&gt;starmap()&lt;/code&gt;&lt;/a&gt;). It blocks until the result is ready.</source>
          <target state="translated">&lt;a href=&quot;functions#map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 내장 함수 와 동등한 기능. &lt;em&gt;반복 가능한&lt;/em&gt; 인수 는 하나만 지원 하지만 여러 반복 가능한 항목은 &lt;a href=&quot;#multiprocessing.pool.Pool.starmap&quot;&gt; &lt;code&gt;starmap()&lt;/code&gt; &lt;/a&gt; 참조하십시오 . 결과가 준비 될 때까지 차단됩니다.</target>
        </trans-unit>
        <trans-unit id="16446c390decbe7bb0f68daafac03e66ce6aec69" translate="yes" xml:space="preserve">
          <source>A parameter entity contained incomplete markup.</source>
          <target state="translated">매개 변수 엔터티에 불완전한 마크 업이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="012f66b7ba5f9e640c26d03e6437c3bca0c7df81" translate="yes" xml:space="preserve">
          <source>A parameter entity reference was found where it was not allowed.</source>
          <target state="translated">매개 변수 엔티티 참조가 허용되지 않는 위치에서 발견되었습니다.</target>
        </trans-unit>
        <trans-unit id="b364142017bfe2db3bd80211e6956af681664535" translate="yes" xml:space="preserve">
          <source>A partial upgrade path from &lt;a href=&quot;optparse#module-optparse&quot;&gt;&lt;code&gt;optparse&lt;/code&gt;&lt;/a&gt; to &lt;a href=&quot;#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;optparse#module-optparse&quot;&gt; &lt;code&gt;optparse&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt; 로의 부분 업그레이드 경로 :</target>
        </trans-unit>
        <trans-unit id="a6a0f809c40e7d0aca5f738a82cada5c7e327d01" translate="yes" xml:space="preserve">
          <source>A path configuration file is a file whose name has the form &lt;code&gt;&lt;em&gt;name&lt;/em&gt;.pth&lt;/code&gt; and exists in one of the four directories mentioned above; its contents are additional items (one per line) to be added to &lt;code&gt;sys.path&lt;/code&gt;. Non-existing items are never added to &lt;code&gt;sys.path&lt;/code&gt;, and no check is made that the item refers to a directory rather than a file. No item is added to &lt;code&gt;sys.path&lt;/code&gt; more than once. Blank lines and lines beginning with &lt;code&gt;#&lt;/code&gt; are skipped. Lines starting with &lt;code&gt;import&lt;/code&gt; (followed by space or tab) are executed.</source>
          <target state="translated">경로 설정 파일 이름이 형성되어있는 파일 &lt;code&gt;&lt;em&gt;name&lt;/em&gt;.pth&lt;/code&gt; 상술 한 네 개의 디렉토리 중 하나에 존재한다; 내용은 &lt;code&gt;sys.path&lt;/code&gt; 에 추가 할 추가 항목 (한 줄에 하나씩) 입니다. 존재하지 않는 항목은 &lt;code&gt;sys.path&lt;/code&gt; 에 추가되지 않으며 항목이 파일이 아닌 디렉토리를 나타내는 지 확인하지 않습니다. &lt;code&gt;sys.path&lt;/code&gt; 에 항목이 두 번 이상 추가되지 않았습니다 . 빈 줄과 &lt;code&gt;#&lt;/code&gt; 으로 시작하는 줄 은 건너 뜁니다. &lt;code&gt;import&lt;/code&gt; 시작하는 행 (공백 또는 탭)이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="646d815aeadeea6fe20ca3faf0ccabbfeea34957" translate="yes" xml:space="preserve">
          <source>A path object can be used anywhere an object implementing &lt;a href=&quot;os#os.PathLike&quot;&gt;&lt;code&gt;os.PathLike&lt;/code&gt;&lt;/a&gt; is accepted:</source>
          <target state="translated">경로 객체는 &lt;a href=&quot;os#os.PathLike&quot;&gt; &lt;code&gt;os.PathLike&lt;/code&gt; 를&lt;/a&gt; 구현하는 객체 가 허용 되는 모든 곳에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bebeb34650a612eae1dd1d635441f9d161b217ad" translate="yes" xml:space="preserve">
          <source>A pathlib-compatible wrapper for zip files. See section &lt;a href=&quot;#path-objects&quot;&gt;Path Objects&lt;/a&gt; for details.</source>
          <target state="translated">zip 파일을위한 pathlib 호환 래퍼. 자세한 내용은 &lt;a href=&quot;#path-objects&quot;&gt;경로 객체&lt;/a&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="073be021799e1edeed8fbb982dc1e8d136890310" translate="yes" xml:space="preserve">
          <source>A pattern you will sometimes see is a &lt;code&gt;try-finally&lt;/code&gt; statement with a flag variable to indicate whether or not the body of the &lt;code&gt;finally&lt;/code&gt; clause should be executed. In its simplest form (that can&amp;rsquo;t already be handled just by using an &lt;code&gt;except&lt;/code&gt; clause instead), it looks something like this:</source>
          <target state="translated">때때로 나타나는 패턴 은 &lt;code&gt;finally&lt;/code&gt; 절의 본문을 실행 할지 여부를 나타내는 플래그 변수 가있는 &lt;code&gt;try-finally&lt;/code&gt; 문입니다 . 가장 간단한 형식으로 (단, &lt;code&gt;except&lt;/code&gt; 절 을 사용하여 처리 할 수는 없음 ) 다음과 같이 보입니다.</target>
        </trans-unit>
        <trans-unit id="7abf054a6573c0336e61de800d0dfa5875e96568" translate="yes" xml:space="preserve">
          <source>A pickler object&amp;rsquo;s dispatch table is a registry of &lt;em&gt;reduction functions&lt;/em&gt; of the kind which can be declared using &lt;a href=&quot;copyreg#copyreg.pickle&quot;&gt;&lt;code&gt;copyreg.pickle()&lt;/code&gt;&lt;/a&gt;. It is a mapping whose keys are classes and whose values are reduction functions. A reduction function takes a single argument of the associated class and should conform to the same interface as a &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">피커 객체의 디스패치 테이블은 &lt;a href=&quot;copyreg#copyreg.pickle&quot;&gt; &lt;code&gt;copyreg.pickle()&lt;/code&gt; &lt;/a&gt; 사용하여 선언 할 수있는 종류 의 &lt;em&gt;축소 함수&lt;/em&gt; 레지스트리입니다 . 키가 클래스이고 값이 축소 함수 인 매핑입니다. 축소 함수는 연관된 클래스의 단일 인수를 사용하며 &lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt; 메소드 와 동일한 인터페이스를 준수해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2815f7a27d1d799bb9c5ed4bd1e2e6224159599f" translate="yes" xml:space="preserve">
          <source>A placeholder method which can be overridden in third party implementations to pre-install packages in the virtual environment or perform other post-creation steps.</source>
          <target state="translated">가상 환경에서 패키지를 사전 설치하거나 다른 사후 생성 단계를 수행하기 위해 타사 구현에서 재정의 할 수있는 자리 표시 자 방법입니다.</target>
        </trans-unit>
        <trans-unit id="5289f5cb8c6eafde6088a2523d6546e8be5b9ea2" translate="yes" xml:space="preserve">
          <source>A platform-specific location:</source>
          <target state="translated">플랫폼 별 위치 :</target>
        </trans-unit>
        <trans-unit id="a6eb65fd95cbaf5e43af30050ff3ec24853c59dd" translate="yes" xml:space="preserve">
          <source>A policy defines the notion of &lt;em&gt;context&lt;/em&gt; and manages a separate event loop per context. The default policy defines &lt;em&gt;context&lt;/em&gt; to be the current thread.</source>
          <target state="translated">정책은 &lt;em&gt;컨텍스트&lt;/em&gt; 개념을 정의하고 &lt;em&gt;컨텍스트&lt;/em&gt; 마다 별도의 이벤트 루프를 관리합니다. 기본 정책은 &lt;em&gt;컨텍스트&lt;/em&gt; 를 현재 스레드로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="10bef264cff4ed7470ae443a79b09fa9417838b9" translate="yes" xml:space="preserve">
          <source>A popular third-party coverage tool that provides HTML output along with advanced features such as branch coverage.</source>
          <target state="translated">지점 범위와 같은 고급 기능과 함께 HTML 출력을 제공하는 인기있는 타사 범위 도구입니다.</target>
        </trans-unit>
        <trans-unit id="7e69db56a6ea626272adf3d2ff2e59ea23a94fcf" translate="yes" xml:space="preserve">
          <source>A positional specification of the form &amp;ldquo;@x,y&amp;rdquo;, which identifies the tab</source>
          <target state="translated">탭을 식별하는&amp;ldquo;@ x, y&amp;rdquo;형식의 위치 지정 사양</target>
        </trans-unit>
        <trans-unit id="3ba4a2770676c7fc7f7f67798128c512a5d2028e" translate="yes" xml:space="preserve">
          <source>A positive integer specifying the number of elements in the array. Out-of-range subscripts result in an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt;. Will be returned by &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">배열의 요소 수를 지정하는 양의 정수입니다. 범위를 벗어난 첨자가 &lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; 가&lt;/a&gt; 됩니다. &lt;a href=&quot;functions#len&quot;&gt; &lt;code&gt;len()&lt;/code&gt; &lt;/a&gt; 의해 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="9a673e2f0ba94a4e244ad4f4f6bcfef7838e6dad" translate="yes" xml:space="preserve">
          <source>A possible value for the &lt;em&gt;how&lt;/em&gt; parameter to &lt;a href=&quot;#signal.pthread_sigmask&quot;&gt;&lt;code&gt;pthread_sigmask()&lt;/code&gt;&lt;/a&gt; indicating that signals are to be blocked.</source>
          <target state="translated">신호가 차단됨을 나타내는 &lt;em&gt;how&lt;/em&gt; 매개 변수 &lt;a href=&quot;#signal.pthread_sigmask&quot;&gt; &lt;code&gt;pthread_sigmask()&lt;/code&gt; &lt;/a&gt; 가능한 값 .</target>
        </trans-unit>
        <trans-unit id="fcbbcb4889df6bf478da8060159cb1a9ffdb3edf" translate="yes" xml:space="preserve">
          <source>A possible value for the &lt;em&gt;how&lt;/em&gt; parameter to &lt;a href=&quot;#signal.pthread_sigmask&quot;&gt;&lt;code&gt;pthread_sigmask()&lt;/code&gt;&lt;/a&gt; indicating that signals are to be unblocked.</source>
          <target state="translated">신호가 차단 해제됨을 나타내는 &lt;em&gt;how&lt;/em&gt; 매개 변수 &lt;a href=&quot;#signal.pthread_sigmask&quot;&gt; &lt;code&gt;pthread_sigmask()&lt;/code&gt; &lt;/a&gt; 가능한 값 .</target>
        </trans-unit>
        <trans-unit id="64d6e35e5d0720d89927277af6c6b6e10bc1da90" translate="yes" xml:space="preserve">
          <source>A possible value for the &lt;em&gt;how&lt;/em&gt; parameter to &lt;a href=&quot;#signal.pthread_sigmask&quot;&gt;&lt;code&gt;pthread_sigmask()&lt;/code&gt;&lt;/a&gt; indicating that the signal mask is to be replaced.</source>
          <target state="translated">신호 마스크가 교체 될 것임을 나타내는 &lt;em&gt;how&lt;/em&gt; 매개 변수 &lt;a href=&quot;#signal.pthread_sigmask&quot;&gt; &lt;code&gt;pthread_sigmask()&lt;/code&gt; &lt;/a&gt; 가능한 값 .</target>
        </trans-unit>
        <trans-unit id="c03ca79ea849bb2dbbb49f14c9096b4b556833c8" translate="yes" xml:space="preserve">
          <source>A possibly empty tuple of &lt;a href=&quot;#email.headerregistry.Address&quot;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/a&gt; objects representing the addresses in the group.</source>
          <target state="translated">그룹의 주소를 나타내는 비어있는 &lt;a href=&quot;#email.headerregistry.Address&quot;&gt; &lt;code&gt;Address&lt;/code&gt; &lt;/a&gt; 튜플입니다 .</target>
        </trans-unit>
        <trans-unit id="49afe2d7b9d6c7021dbba12a05abef138ec01de4" translate="yes" xml:space="preserve">
          <source>A precision of &lt;code&gt;0&lt;/code&gt; is treated as equivalent to a precision of &lt;code&gt;1&lt;/code&gt;. The default precision is &lt;code&gt;6&lt;/code&gt;.</source>
          <target state="translated">정밀도 &lt;code&gt;0&lt;/code&gt; 은 정밀도 &lt;code&gt;1&lt;/code&gt; 과 동등하게 취급됩니다 . 기본 정밀도는 &lt;code&gt;6&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7089cc2a31010eba0be5e32ed206b479b78c2baa" translate="yes" xml:space="preserve">
          <source>A primary use for weak references is to implement caches or mappings holding large objects, where it&amp;rsquo;s desired that a large object not be kept alive solely because it appears in a cache or mapping.</source>
          <target state="translated">약한 참조의 주요 용도는 큰 객체를 보유하는 캐시 또는 매핑을 구현하는 것입니다. 큰 객체는 캐시 또는 매핑에 표시되기 때문에 단독으로 살아 있지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="c915b53e717effb68aabdc2a0d6fddd050b0db1e" translate="yes" xml:space="preserve">
          <source>A primitive lock is a synchronization primitive that is not owned by a particular thread when locked. In Python, it is currently the lowest level synchronization primitive available, implemented directly by the &lt;a href=&quot;_thread#module-_thread&quot;&gt;&lt;code&gt;_thread&lt;/code&gt;&lt;/a&gt; extension module.</source>
          <target state="translated">기본 잠금은 잠겨있을 때 특정 스레드가 소유하지 않는 동기화 기본입니다. 파이썬에서는 현재 &lt;a href=&quot;_thread#module-_thread&quot;&gt; &lt;code&gt;_thread&lt;/code&gt; &lt;/a&gt; 확장 모듈에 의해 직접 구현되는 가장 낮은 수준의 동기화 프리미티브 입니다.</target>
        </trans-unit>
        <trans-unit id="37ea4049756ea91b41ad9cbfd066ac008ad7e41e" translate="yes" xml:space="preserve">
          <source>A primitive lock is in one of two states, &amp;ldquo;locked&amp;rdquo; or &amp;ldquo;unlocked&amp;rdquo;. It is created in the unlocked state. It has two basic methods, &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;. When the state is unlocked, &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; changes the state to locked and returns immediately. When the state is locked, &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; blocks until a call to &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; in another thread changes it to unlocked, then the &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; call resets it to locked and returns. The &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; method should only be called in the locked state; it changes the state to unlocked and returns immediately. If an attempt is made to release an unlocked lock, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">기본 잠금은 &quot;잠금&quot;또는 &quot;잠금 해제&quot;의 두 상태 중 하나입니다. 잠금 해제 상태로 작성됩니다. 여기에는 &lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 두 가지 기본 메소드가 있습니다. 상태가 잠금 해제되면 &lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 가 상태를 잠금으로 변경하고 즉시 리턴합니다. 상태가 잠기면 다른 스레드에서 &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 에 대한 호출 이 잠금 해제로 변경 될 때까지 &lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 차단 되고 &lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 호출은 상태를 잠금으로 재설정하고 리턴합니다. &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 메소드는 잠금 상태라고한다; 상태를 잠금 해제 상태로 변경하고 즉시 반환합니다. 잠금 해제 잠금을 해제하려고하면 &lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6c136c8e031ae9acaeea33df5e509e457c232647" translate="yes" xml:space="preserve">
          <source>A priority queue.</source>
          <target state="translated">우선 순위 대기열.</target>
        </trans-unit>
        <trans-unit id="d99ce12ee7a4b4b5d74728cfea88be8c23f2abb7" translate="yes" xml:space="preserve">
          <source>A process can be joined many times.</source>
          <target state="translated">프로세스는 여러 번 결합 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="661a72c6ee03e63c1e4e4cdd37d63e45d6262bf9" translate="yes" xml:space="preserve">
          <source>A process cannot join itself because this would cause a deadlock. It is an error to attempt to join a process before it has been started.</source>
          <target state="translated">교착 상태가 발생하기 때문에 프로세스가 자체적으로 참여할 수 없습니다. 프로세스가 시작되기 전에 참여를 시도하는 것은 오류입니다.</target>
        </trans-unit>
        <trans-unit id="03133f212edb656afb4b280596f603276f8582aa" translate="yes" xml:space="preserve">
          <source>A process pool object which controls a pool of worker processes to which jobs can be submitted. It supports asynchronous results with timeouts and callbacks and has a parallel map implementation.</source>
          <target state="translated">작업을 제출할 수있는 작업자 프로세스 풀을 제어하는 ​​프로세스 풀 개체입니다. 시간 초과 및 콜백과 함께 비동기 결과를 지원하며 병렬 맵 구현이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a354478a00e3e8c761db9395099aec6dd004f1f8" translate="yes" xml:space="preserve">
          <source>A process watcher allows customization of how an event loop monitors child processes on Unix. Specifically, the event loop needs to know when a child process has exited.</source>
          <target state="translated">프로세스 감시자는 이벤트 루프가 Unix에서 하위 프로세스를 모니터링하는 방법을 사용자 정의 할 수 있습니다. 특히, 이벤트 루프는 하위 프로세스가 종료 된시기를 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="072a4a313bcf1885879618cd5ab6ea7dafe24775" translate="yes" xml:space="preserve">
          <source>A processing class used to execute and verify the interactive examples in a &lt;a href=&quot;#doctest.DocTest&quot;&gt;&lt;code&gt;DocTest&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#doctest.DocTest&quot;&gt; &lt;code&gt;DocTest&lt;/code&gt; &lt;/a&gt; 에서 대화식 예제를 실행하고 확인하는 데 사용되는 처리 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="bfc64c4355d0772046330f8b8767e859d4f36926" translate="yes" xml:space="preserve">
          <source>A processing class used to extract interactive examples from a string, and use them to create a &lt;a href=&quot;#doctest.DocTest&quot;&gt;&lt;code&gt;DocTest&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">문자열에서 대화식 예제를 추출하고이를 사용하여 &lt;a href=&quot;#doctest.DocTest&quot;&gt; &lt;code&gt;DocTest&lt;/code&gt; &lt;/a&gt; 오브젝트 를 작성하는 데 사용되는 처리 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="36e7f819143265a9e0661ba6d7d1edca3d75ef96" translate="yes" xml:space="preserve">
          <source>A processing class used to extract the &lt;a href=&quot;#doctest.DocTest&quot;&gt;&lt;code&gt;DocTest&lt;/code&gt;&lt;/a&gt;s that are relevant to a given object, from its docstring and the docstrings of its contained objects. &lt;a href=&quot;#doctest.DocTest&quot;&gt;&lt;code&gt;DocTest&lt;/code&gt;&lt;/a&gt;s can be extracted from modules, classes, functions, methods, staticmethods, classmethods, and properties.</source>
          <target state="translated">docstring과 그 포함 된 객체의 docstring에서 주어진 객체와 관련된 &lt;a href=&quot;#doctest.DocTest&quot;&gt; &lt;code&gt;DocTest&lt;/code&gt; &lt;/a&gt; 를 추출하는 데 사용되는 처리 클래스 . &lt;a href=&quot;#doctest.DocTest&quot;&gt; &lt;code&gt;DocTest&lt;/code&gt; &lt;/a&gt; 는 모듈, 클래스, 함수, 메소드, 정적 메소드, 클래스 메소드 및 특성에서 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ffe740a1a61f3a17e716a81beaa39ca1258df2e5" translate="yes" xml:space="preserve">
          <source>A program is free to modify this list for its own purposes. Only strings and bytes should be added to &lt;a href=&quot;#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;; all other data types are ignored during import.</source>
          <target state="translated">프로그램은 자체 목적으로이 목록을 자유롭게 수정할 수 있습니다. 문자열과 바이트 만 &lt;a href=&quot;#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; 에&lt;/a&gt; 추가해야합니다 . 가져 오는 동안 다른 모든 데이터 유형은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="2a058d334f0b92eff050d11d91c8df8e25c24a51" translate="yes" xml:space="preserve">
          <source>A property object has &lt;code&gt;getter&lt;/code&gt;, &lt;code&gt;setter&lt;/code&gt;, and &lt;code&gt;deleter&lt;/code&gt; methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example:</source>
          <target state="translated">속성 객체에는 데코레이터로 사용할 수있는 &lt;code&gt;getter&lt;/code&gt; , &lt;code&gt;setter&lt;/code&gt; 및 &lt;code&gt;deleter&lt;/code&gt; 메서드가 있으며, 해당 접근 자 함수가 장식 된 함수로 설정된 속성의 복사본을 만듭니다. 이것은 예제와 함께 가장 잘 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="b39b3fcc4cee390c973950a8ea0939199743bb3a" translate="yes" xml:space="preserve">
          <source>A proxy is an object which &lt;em&gt;refers&lt;/em&gt; to a shared object which lives (presumably) in a different process. The shared object is said to be the &lt;em&gt;referent&lt;/em&gt; of the proxy. Multiple proxy objects may have the same referent.</source>
          <target state="translated">프록시는 객체 인 &lt;em&gt;의미&lt;/em&gt; 와 다른 공정에서, (아마도) 사는 공유 객체. 공유 객체는 프록시 의 &lt;em&gt;참조 자라고&lt;/em&gt; 합니다. 여러 프록시 개체가 동일한 참조를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="127418956b7538abf35e0c7d0c8df18e9a2e2b17" translate="yes" xml:space="preserve">
          <source>A proxy object has methods which invoke corresponding methods of its referent (although not every method of the referent will necessarily be available through the proxy). In this way, a proxy can be used just like its referent can:</source>
          <target state="translated">프록시 객체에는 해당 참조 대상의 해당 메소드를 호출하는 메소드가 있습니다 (참조 대상의 모든 메소드가 프록시를 통해 반드시 사용 가능한 것은 아님). 이런 식으로 프록시는 다음과 같이 프록시를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f53fd45b896dddb81ccaed23c2ae3025e8e5f24b" translate="yes" xml:space="preserve">
          <source>A proxy object uses a weakref callback so that when it gets garbage collected it deregisters itself from the manager which owns its referent.</source>
          <target state="translated">프록시 객체는 weakref 콜백을 사용하여 가비지 수집을 수행 할 때 해당 참조를 소유 한 관리자로부터 자신을 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="db78a45bdc25adb61e99da3fbc39a41ebe2a9000" translate="yes" xml:space="preserve">
          <source>A pull parser suitable for non-blocking applications. Its input-side API is similar to that of &lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt;&lt;code&gt;XMLParser&lt;/code&gt;&lt;/a&gt;, but instead of pushing calls to a callback target, &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt;&lt;code&gt;XMLPullParser&lt;/code&gt;&lt;/a&gt; collects an internal list of parsing events and lets the user read from it. &lt;em&gt;events&lt;/em&gt; is a sequence of events to report back. The supported events are the strings &lt;code&gt;&quot;start&quot;&lt;/code&gt;, &lt;code&gt;&quot;end&quot;&lt;/code&gt;, &lt;code&gt;&quot;comment&quot;&lt;/code&gt;, &lt;code&gt;&quot;pi&quot;&lt;/code&gt;, &lt;code&gt;&quot;start-ns&quot;&lt;/code&gt; and &lt;code&gt;&quot;end-ns&quot;&lt;/code&gt; (the &amp;ldquo;ns&amp;rdquo; events are used to get detailed namespace information). If &lt;em&gt;events&lt;/em&gt; is omitted, only &lt;code&gt;&quot;end&quot;&lt;/code&gt; events are reported.</source>
          <target state="translated">비 차단 애플리케이션에 적합한 풀 파서. 입력 측 API는 비슷하다 &lt;a href=&quot;#xml.etree.ElementTree.XMLParser&quot;&gt; &lt;code&gt;XMLParser&lt;/code&gt; &lt;/a&gt; , 대신 콜백 대상에 전화를 밀어, &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt; &lt;code&gt;XMLPullParser&lt;/code&gt; 는&lt;/a&gt; 구문 분석 이벤트의 내부 목록을 수집하고 그것을 읽고 사용자를 할 수 있습니다. &lt;em&gt;events&lt;/em&gt; 는보고 할 일련의 이벤트입니다. 지원되는 이벤트는 &lt;code&gt;&quot;start&quot;&lt;/code&gt; , &lt;code&gt;&quot;end&quot;&lt;/code&gt; , &lt;code&gt;&quot;comment&quot;&lt;/code&gt; , &lt;code&gt;&quot;pi&quot;&lt;/code&gt; , &lt;code&gt;&quot;start-ns&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;end-ns&quot;&lt;/code&gt; 문자열입니다 ( &quot;ns&quot;이벤트는 자세한 네임 스페이스 정보를 얻는 데 사용됨). 경우 &lt;em&gt;이벤트가&lt;/em&gt; 생략되고, 오직 &lt;code&gt;&quot;end&quot;&lt;/code&gt; 이벤트가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="611cc1f288e4ebe8654c5f40abd6830e50fb2b24" translate="yes" xml:space="preserve">
          <source>A quadratic blowup attack is similar to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Billion_laughs&quot;&gt;Billion Laughs&lt;/a&gt; attack; it abuses entity expansion, too. Instead of nested entities it repeats one large entity with a couple of thousand chars over and over again. The attack isn&amp;rsquo;t as efficient as the exponential case but it avoids triggering parser countermeasures that forbid deeply-nested entities.</source>
          <target state="translated">2 차 폭발 공격은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Billion_laughs&quot;&gt;10 억 웃음&lt;/a&gt; 공격 과 유사합니다 . 그것은 또한 엔티티 확장을 남용합니다. 중첩 된 엔티티 대신 수천 개의 문자가 반복되는 한 개의 큰 엔티티를 반복합니다. 이 공격은 지수의 경우만큼 효율적이지는 않지만 깊이 중첩 된 엔터티를 금지하는 파서 대책을 트리거하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="32f0bfa3ad661bbe821e304d53e7d39d2b8c3756" translate="yes" xml:space="preserve">
          <source>A queue class for use in a multi-processing (rather than multi-threading) context.</source>
          <target state="translated">멀티 스레딩이 아닌 멀티 프로세싱 컨텍스트에서 사용하기위한 큐 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="99a5f66050b7639c5e20c566c6533b480cfdb3b9" translate="yes" xml:space="preserve">
          <source>A queue must not be used anymore after it is closed. For example, &lt;a href=&quot;#multiprocessing.SimpleQueue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#multiprocessing.SimpleQueue.put&quot;&gt;&lt;code&gt;put()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.SimpleQueue.empty&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; methods must no longer be called.</source>
          <target state="translated">A queue must not be used anymore after it is closed. For example, &lt;a href=&quot;#multiprocessing.SimpleQueue.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#multiprocessing.SimpleQueue.put&quot;&gt; &lt;code&gt;put()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#multiprocessing.SimpleQueue.empty&quot;&gt; &lt;code&gt;empty()&lt;/code&gt; &lt;/a&gt; methods must no longer be called.</target>
        </trans-unit>
        <trans-unit id="970016f4dd8d7293c8fe545175b34b595aee70a8" translate="yes" xml:space="preserve">
          <source>A range object will be empty if &lt;code&gt;r[0]&lt;/code&gt; does not meet the value constraint. Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices.</source>
          <target state="translated">&lt;code&gt;r[0]&lt;/code&gt; 이 값 제약 조건을 충족하지 않으면 범위 개체가 비어 있습니다 . 범위는 음수 인덱스를 지원하지만, 양수 인덱스에 의해 결정된 시퀀스의 끝에서 색인으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="529c4e8d3b05784622b5257f6319660acd9697dc" translate="yes" xml:space="preserve">
          <source>A raw binary stream representing an OS-level file containing bytes data. It inherits &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A raw binary stream representing an OS-level file containing bytes data. It inherits &lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="99d64c49ac868aa39e74a9a92db9ff55124daac2" translate="yes" xml:space="preserve">
          <source>A read-only description of the dialect in use by the parser.</source>
          <target state="translated">파서가 사용하는 방언에 대한 읽기 전용 설명.</target>
        </trans-unit>
        <trans-unit id="d8db58a3fbd04f626dd60cc420a69d5fe182f4a1" translate="yes" xml:space="preserve">
          <source>A read-only description of the dialect in use by the writer.</source>
          <target state="translated">라이터가 사용하는 방언에 대한 읽기 전용 설명.</target>
        </trans-unit>
        <trans-unit id="103619d1b69776cbb2bb552ae0ace0f33ade73d9" translate="yes" xml:space="preserve">
          <source>A read-only property for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_mean&quot;&gt;arithmetic mean&lt;/a&gt; of a normal distribution.</source>
          <target state="translated">정규 분포 의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Arithmetic_mean&quot;&gt;산술 평균&lt;/a&gt; 에 대한 읽기 전용 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="7e5c5cd30d274a11e5c8a7f205262bcf52ba50dd" translate="yes" xml:space="preserve">
          <source>A read-only property for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Median&quot;&gt;median&lt;/a&gt; of a normal distribution.</source>
          <target state="translated">정규 분포 의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Median&quot;&gt;중앙값&lt;/a&gt; 에 대한 읽기 전용 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="2b3f43c3138ebdc3b49d4edbc9a8dfae7d36df14" translate="yes" xml:space="preserve">
          <source>A read-only property for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Mode_(statistics)&quot;&gt;mode&lt;/a&gt; of a normal distribution.</source>
          <target state="translated">정규 분포 &lt;a href=&quot;https://en.wikipedia.org/wiki/Mode_(statistics)&quot;&gt;모드&lt;/a&gt; 에 대한 읽기 전용 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="45686b5a6c585606daea0b77d4b804d2c566d994" translate="yes" xml:space="preserve">
          <source>A read-only property for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_deviation&quot;&gt;standard deviation&lt;/a&gt; of a normal distribution.</source>
          <target state="translated">정규 분포 의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_deviation&quot;&gt;표준 편차&lt;/a&gt; 에 대한 읽기 전용 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="99445b8caebd2b8efc9bf242bcd10bf1c3ccd24e" translate="yes" xml:space="preserve">
          <source>A read-only property for the &lt;a href=&quot;https://en.wikipedia.org/wiki/Variance&quot;&gt;variance&lt;/a&gt; of a normal distribution. Equal to the square of the standard deviation.</source>
          <target state="translated">정규 분포 의 &lt;a href=&quot;https://en.wikipedia.org/wiki/Variance&quot;&gt;분산&lt;/a&gt; 에 대한 읽기 전용 속성입니다 . 표준 편차의 제곱과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2a89570fc444460338403a29b3a5af43fe4247a1" translate="yes" xml:space="preserve">
          <source>A read-only property. Characters that will be considered punctuation. Runs of punctuation characters will be returned as a single token. However, note that no semantic validity checking will be performed: for example, &amp;lsquo;&amp;gt;&amp;gt;&amp;gt;&amp;rsquo; could be returned as a token, even though it may not be recognised as such by shells.</source>
          <target state="translated">읽기 전용 속성 문장 부호로 간주 될 문자 문장 부호 문자는 단일 토큰으로 반환됩니다. 그러나 의미 유효성 검사는 수행되지 않습니다. 예를 들어 '&amp;gt;&amp;gt;&amp;gt;'는 셸에서 인식되지 않더라도 토큰으로 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1526d13194dc44fe8b71f410d5e02f5618756d2" translate="yes" xml:space="preserve">
          <source>A read-only property. Points to the &lt;a href=&quot;#contextvars.ContextVar&quot;&gt;&lt;code&gt;ContextVar&lt;/code&gt;&lt;/a&gt; object that created the token.</source>
          <target state="translated">읽기 전용 속성 토큰을 생성 한 &lt;a href=&quot;#contextvars.ContextVar&quot;&gt; &lt;code&gt;ContextVar&lt;/code&gt; &lt;/a&gt; 객체를 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="35f7fe0b2b9bb75459b88195c234d27b4c7c54e7" translate="yes" xml:space="preserve">
          <source>A read-only property. Set to the value the variable had before the &lt;a href=&quot;#contextvars.ContextVar.set&quot;&gt;&lt;code&gt;ContextVar.set()&lt;/code&gt;&lt;/a&gt; method call that created the token. It points to &lt;code&gt;Token.MISSING&lt;/code&gt; is the variable was not set before the call.</source>
          <target state="translated">읽기 전용 속성 토큰을 작성한 &lt;a href=&quot;#contextvars.ContextVar.set&quot;&gt; &lt;code&gt;ContextVar.set()&lt;/code&gt; &lt;/a&gt; 메소드 호출 전에 변수의 값으로 설정하십시오 . 에이 점 &lt;code&gt;Token.MISSING&lt;/code&gt; 이 변수가 호출하기 전에 설정되지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="ce5c35b786a167783bd1eecb7aa0a10dc821953b" translate="yes" xml:space="preserve">
          <source>A read-only sequence representing the time zone search path &amp;ndash; when constructing a &lt;code&gt;ZoneInfo&lt;/code&gt; from a key, the key is joined to each entry in the &lt;code&gt;TZPATH&lt;/code&gt;, and the first file found is used.</source>
          <target state="translated">A read-only sequence representing the time zone search path &amp;ndash; when constructing a &lt;code&gt;ZoneInfo&lt;/code&gt; from a key, the key is joined to each entry in the &lt;code&gt;TZPATH&lt;/code&gt; , and the first file found is used.</target>
        </trans-unit>
        <trans-unit id="57409d01d7bc70f967ed6e92fede60d985f7ba23" translate="yes" xml:space="preserve">
          <source>A real &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; object used to store the contents of the &lt;a href=&quot;#collections.UserList&quot;&gt;&lt;code&gt;UserList&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;#collections.UserList&quot;&gt; &lt;code&gt;UserList&lt;/code&gt; &lt;/a&gt; 클래스 의 내용을 저장하는 데 사용되는 실제 &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="fabb25bea7f4a3fcb6ef6ab14b41eddaa407f0e5" translate="yes" xml:space="preserve">
          <source>A real &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object used to store the contents of the &lt;a href=&quot;#collections.UserString&quot;&gt;&lt;code&gt;UserString&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;#collections.UserString&quot;&gt; &lt;code&gt;UserString&lt;/code&gt; &lt;/a&gt; 클래스 의 내용을 저장하는 데 사용되는 실제 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 객체 입니다.</target>
        </trans-unit>
        <trans-unit id="a5ea9d2da1b66afbb924a3e5bdffb22ed45ea981" translate="yes" xml:space="preserve">
          <source>A real dictionary used to store the contents of the &lt;a href=&quot;#collections.UserDict&quot;&gt;&lt;code&gt;UserDict&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;#collections.UserDict&quot;&gt; &lt;code&gt;UserDict&lt;/code&gt; &lt;/a&gt; 클래스 의 내용을 저장하는 데 사용되는 실제 사전 입니다.</target>
        </trans-unit>
        <trans-unit id="2e81b2ea1c04e7477a837ea4fa77a2d26559ba3e" translate="yes" xml:space="preserve">
          <source>A recursive lock object: a close analog of &lt;a href=&quot;threading#threading.RLock&quot;&gt;&lt;code&gt;threading.RLock&lt;/code&gt;&lt;/a&gt;. A recursive lock must be released by the process or thread that acquired it. Once a process or thread has acquired a recursive lock, the same process or thread may acquire it again without blocking; that process or thread must release it once for each time it has been acquired.</source>
          <target state="translated">재귀 적 잠금 객체 : &lt;a href=&quot;threading#threading.RLock&quot;&gt; &lt;code&gt;threading.RLock&lt;/code&gt; &lt;/a&gt; 과 유사한 아날로그 . 재귀 잠금은 잠금을 획득 한 프로세스 또는 스레드에 의해 해제되어야합니다. 프로세스 또는 스레드가 재귀 적 잠금을 획득하면 동일한 프로세스 또는 스레드가 블로킹없이 다시 획득 할 수 있습니다. 해당 프로세스 또는 스레드는 획득 할 때마다 한 번씩 해제해야합니다.</target>
        </trans-unit>
        <trans-unit id="bdd9f600aa39bd4ce3cfa80aec45f37f958ff199" translate="yes" xml:space="preserve">
          <source>A reduced-scope variant of &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; representing an SSL protocol instance that does not contain any network IO methods. This class is typically used by framework authors that want to implement asynchronous IO for SSL through memory buffers.</source>
          <target state="translated">네트워크 IO 메소드를 포함하지 않는 SSL 프로토콜 인스턴스를 나타내는 &lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; 의&lt;/a&gt; 범위가 축소 된 변형입니다 . 이 클래스는 일반적으로 메모리 버퍼를 통해 SSL에 대한 비동기 IO를 구현하려는 프레임 워크 작성자가 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1806f846154693b11451c88326be8f7c897dca73" translate="yes" xml:space="preserve">
          <source>A reentrant lock is a synchronization primitive that may be acquired multiple times by the same thread. Internally, it uses the concepts of &amp;ldquo;owning thread&amp;rdquo; and &amp;ldquo;recursion level&amp;rdquo; in addition to the locked/unlocked state used by primitive locks. In the locked state, some thread owns the lock; in the unlocked state, no thread owns it.</source>
          <target state="translated">재진입 잠금은 동일한 스레드에 의해 여러 번 획득 될 수있는 동기화 기본 요소입니다. 내부적으로 기본 잠금에서 사용되는 잠금 / 잠금 해제 상태 외에 &quot;소유 스레드&quot;및 &quot;재귀 수준&quot;개념을 사용합니다. 잠금 상태에서는 일부 스레드가 잠금을 소유합니다. 잠금 해제 상태에서는 스레드를 소유하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cfaf2d84cef67a7e1c4ea1d2ed5a19290e06d05c" translate="yes" xml:space="preserve">
          <source>A reference to the parent &lt;a href=&quot;#inspect.Signature&quot;&gt;&lt;code&gt;Signature&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">부모 &lt;a href=&quot;#inspect.Signature&quot;&gt; &lt;code&gt;Signature&lt;/code&gt; &lt;/a&gt; 객체에 대한 참조 입니다.</target>
        </trans-unit>
        <trans-unit id="fe68fe38d813942406023b96ef7655bd795ff7aa" translate="yes" xml:space="preserve">
          <source>A reference was made to an entity which was not defined.</source>
          <target state="translated">정의되지 않은 개체를 참조했습니다.</target>
        </trans-unit>
        <trans-unit id="fc2814565b811bb72e387b5ad4e116a75b0028af" translate="yes" xml:space="preserve">
          <source>A regular expression (or RE) specifies a set of strings that matches it; the functions in this module let you check if a particular string matches a given regular expression (or if a given regular expression matches a particular string, which comes down to the same thing).</source>
          <target state="translated">정규식 (또는 RE)은 일치하는 문자열 세트를 지정합니다. 이 모듈의 함수를 사용하면 특정 문자열이 주어진 정규식과 일치하는지 (또는 주어진 정규식이 특정 문자열과 일치하는지 확인) 같은 문자열을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="278310ab0a87e2bebde6fb9b2d28696ab3d401e5" translate="yes" xml:space="preserve">
          <source>A relative path is interpreted relative to the current working directory.</source>
          <target state="translated">상대 경로는 현재 작업 디렉토리를 기준으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="b69de6e0660f02bec80283fa3ef7149a693896df" translate="yes" xml:space="preserve">
          <source>A reverse conversion function exists to transform a bytearray object into its hexadecimal representation.</source>
          <target state="translated">바이트 변환 오브젝트를 16 진 표현으로 변환하기위한 역변환 함수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="564befe131589980eaa0dc9e9dfcfae349e6d8e8" translate="yes" xml:space="preserve">
          <source>A reverse conversion function exists to transform a bytes object into its hexadecimal representation.</source>
          <target state="translated">바이트 오브젝트를 16 진 표현으로 변환하기위한 역변환 함수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="87cbf6cd57661ce2eb0fe90dd90a5bacee5cf075" translate="yes" xml:space="preserve">
          <source>A right shift by &lt;em&gt;n&lt;/em&gt; bits is equivalent to division by &lt;code&gt;pow(2, n)&lt;/code&gt; without overflow check.</source>
          <target state="translated">&lt;em&gt;n&lt;/em&gt; 비트에 의한 오른쪽 시프트 는 오버 플로우 검사없이 &lt;code&gt;pow(2, n)&lt;/code&gt; 으로 나누는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="fa2969dcef8d9a49a27a5430ee9b5eb46b150254" translate="yes" xml:space="preserve">
          <source>A right shift by &lt;em&gt;n&lt;/em&gt; bits is equivalent to floor division by &lt;code&gt;pow(2, n)&lt;/code&gt;.</source>
          <target state="translated">A right shift by &lt;em&gt;n&lt;/em&gt; bits is equivalent to floor division by &lt;code&gt;pow(2, n)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="184432cc5a56df44e1427ded0fcaad5c40e378c4" translate="yes" xml:space="preserve">
          <source>A round-robin scheduling policy.</source>
          <target state="translated">라운드 로빈 일정 정책.</target>
        </trans-unit>
        <trans-unit id="2d2450e8ef446241d8a186b37b3d407b5c59148e" translate="yes" xml:space="preserve">
          <source>A sample usage might be something like this:</source>
          <target state="translated">샘플 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="98edfa1526c0efe9099cce99ddcb7c504d9a1e51" translate="yes" xml:space="preserve">
          <source>A sample usage of our unpickler working has intended:</source>
          <target state="translated">피클 러 작업의 샘플 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5fa5c854cf986de080adeddab9912ec17b8b1df0" translate="yes" xml:space="preserve">
          <source>A script (possibly registered with Misc.register) that is called immediately before displaying the values. It may specify which values to display.</source>
          <target state="translated">값을 표시하기 직전에 호출되는 스크립트 (Misc.register에 등록되었을 수 있음) 표시 할 값을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23735aa84db218755b79767643c54ff40f2fab47" translate="yes" xml:space="preserve">
          <source>A second example demonstrates output parameters. The win32 &lt;code&gt;GetWindowRect&lt;/code&gt; function retrieves the dimensions of a specified window by copying them into &lt;code&gt;RECT&lt;/code&gt; structure that the caller has to supply. Here is the C declaration:</source>
          <target state="translated">두 번째 예는 출력 매개 변수를 보여줍니다. win32 &lt;code&gt;GetWindowRect&lt;/code&gt; 함수는 지정된 윈도우의 크기를 호출자가 제공 &lt;code&gt;RECT&lt;/code&gt; 구조 로 복사하여 검색합니다 . C 선언은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6bf3d7d9e60a594dca393cfc1e57ed7a4eb755f0" translate="yes" xml:space="preserve">
          <source>A semaphore manages an internal counter which is decremented by each &lt;a href=&quot;#asyncio.Semaphore.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; call and incremented by each &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; call. The counter can never go below zero; when &lt;a href=&quot;#asyncio.Semaphore.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; finds that it is zero, it blocks, waiting until some task calls &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">세마포어는 각각의 &lt;a href=&quot;#asyncio.Semaphore.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 호출에 의해 감소 되고 각 &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 호출에 의해 증가되는 내부 카운터를 관리합니다 . 카운터는 절대 0 미만으로 떨어질 수 없습니다. 때 &lt;a href=&quot;#asyncio.Semaphore.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 는 어떤 작업을 호출 할 때까지 기다리고, 제로, 차단 것을 발견 &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0f001dac28861f9744b78693c52be06f375a70a3" translate="yes" xml:space="preserve">
          <source>A semaphore manages an internal counter which is decremented by each &lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; call and incremented by each &lt;a href=&quot;#threading.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; call. The counter can never go below zero; when &lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; finds that it is zero, it blocks, waiting until some other thread calls &lt;a href=&quot;#threading.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">세마포어는 각각의 &lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 호출에 의해 감소 되고 각 &lt;a href=&quot;#threading.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 호출에 의해 증가되는 내부 카운터를 관리합니다 . 카운터는 절대 0 미만으로 떨어질 수 없습니다. 때 &lt;a href=&quot;#threading.Semaphore.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 는 다른 스레드가 호출 할 때까지 기다리고, 제로, 차단 것을 발견 &lt;a href=&quot;#threading.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="06a76aefa9f5a9e518125b5efe69166c037ad6a6" translate="yes" xml:space="preserve">
          <source>A semaphore object: a close analog of &lt;a href=&quot;threading#threading.Semaphore&quot;&gt;&lt;code&gt;threading.Semaphore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">세마포어 객체 : &lt;a href=&quot;threading#threading.Semaphore&quot;&gt; &lt;code&gt;threading.Semaphore&lt;/code&gt; &lt;/a&gt; 의 가까운 아날로그 .</target>
        </trans-unit>
        <trans-unit id="c7848790bb96dd3a52d4bf86a18d50bb671f3c12" translate="yes" xml:space="preserve">
          <source>A semaphore.</source>
          <target state="translated">세마포어.</target>
        </trans-unit>
        <trans-unit id="8542eec62199963efac79ef1b519957da0db1407" translate="yes" xml:space="preserve">
          <source>A sequence defining the structure fields. The items must be 2-tuples or 3-tuples. The first item is the name of the field, the second item specifies the type of the field; it can be any ctypes data type.</source>
          <target state="translated">구조 필드를 정의하는 순서. 항목은 2 튜플 또는 3 튜플이어야합니다. 첫 번째 항목은 필드의 이름이고 두 번째 항목은 필드의 유형을 지정합니다. 모든 ctypes 데이터 유형이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="48ad0a2928de82fd8b299ed332a4541e9779e82e" translate="yes" xml:space="preserve">
          <source>A sequence of null-terminated strings, terminated by two null characters. (Python handles this termination automatically.)</source>
          <target state="translated">두 개의 null 문자로 끝나는 null로 끝나는 문자열 시퀀스입니다. (Python은이 종료를 자동으로 처리합니다.)</target>
        </trans-unit>
        <trans-unit id="49eae2b8156400102d2de31f44c9b7f044b0004f" translate="yes" xml:space="preserve">
          <source>A set containing the names of the hash algorithms guaranteed to be supported by this module on all platforms. Note that &amp;lsquo;md5&amp;rsquo; is in this list despite some upstream vendors offering an odd &amp;ldquo;FIPS compliant&amp;rdquo; Python build that excludes it.</source>
          <target state="translated">모든 플랫폼에서이 모듈이 지원하도록 보장 된 해시 알고리즘의 이름을 포함하는 세트. 'md5'는 일부 업스트림 공급 업체가이를 제외하고 이상한 &quot;FIPS 호환&quot;Python 빌드를 제공 함에도 불구하고이 목록에 있습니다.</target>
        </trans-unit>
        <trans-unit id="12fadb35d13d46359eedacd2835823952e5162ba" translate="yes" xml:space="preserve">
          <source>A set containing the names of the hash algorithms that are available in the running Python interpreter. These names will be recognized when passed to &lt;a href=&quot;#hashlib.new&quot;&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#hashlib.algorithms_guaranteed&quot;&gt;&lt;code&gt;algorithms_guaranteed&lt;/code&gt;&lt;/a&gt; will always be a subset. The same algorithm may appear multiple times in this set under different names (thanks to OpenSSL).</source>
          <target state="translated">실행중인 Python 인터프리터에서 사용 가능한 해시 알고리즘의 이름이 포함 된 세트입니다. 이 이름은 &lt;a href=&quot;#hashlib.new&quot;&gt; &lt;code&gt;new()&lt;/code&gt; &lt;/a&gt; 전달 될 때 인식됩니다 . &lt;a href=&quot;#hashlib.algorithms_guaranteed&quot;&gt; &lt;code&gt;algorithms_guaranteed&lt;/code&gt; &lt;/a&gt; 는 항상 하위 집합입니다. 동일한 알고리즘이이 세트에서 다른 이름으로 여러 번 나타날 수 있습니다 (OpenSSL 덕분에).</target>
        </trans-unit>
        <trans-unit id="dedc6f13e73be80478d9314a2cca704e9a6d0255" translate="yes" xml:space="preserve">
          <source>A set. &lt;code&gt;elts&lt;/code&gt; holds a list of nodes representing the set&amp;rsquo;s elements.</source>
          <target state="translated">A set. &lt;code&gt;elts&lt;/code&gt; holds a list of nodes representing the set&amp;rsquo;s elements.</target>
        </trans-unit>
        <trans-unit id="59cc295113b43a2aa6bdc4227e00a42f34fd2718" translate="yes" xml:space="preserve">
          <source>A shallow copy of &lt;code&gt;module.__dict__&lt;/code&gt; is used for both local and global execution context.</source>
          <target state="translated">&lt;code&gt;module.__dict__&lt;/code&gt; 의 얕은 사본은 로컬 및 글로벌 실행 컨텍스트 모두에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d26717767841ef0e78b29d3c4d6169bcb2a7db93" translate="yes" xml:space="preserve">
          <source>A shallow copy of dictionary argument &lt;em&gt;globs&lt;/em&gt; is used for the execution context.</source>
          <target state="translated">사전 인수 &lt;em&gt;globs&lt;/em&gt; 의 얕은 사본이 실행 컨텍스트에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1169260b61888746c3a079157d99e6f61c0c10b7" translate="yes" xml:space="preserve">
          <source>A shared object gets deleted from the manager process when there are no longer any proxies referring to it.</source>
          <target state="translated">더 이상 참조하는 프록시가 없으면 공유 객체가 관리자 프로세스에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="3ee5e7664c7b19d5dea256033c9a42275e7d768f" translate="yes" xml:space="preserve">
          <source>A short usage example:</source>
          <target state="translated">간단한 사용법 예 :</target>
        </trans-unit>
        <trans-unit id="d350f8e46b513eb933a766fc06d8f7bc1e7855cb" translate="yes" xml:space="preserve">
          <source>A shorthand for &lt;code&gt;format_list(extract_stack(f, limit))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format_list(extract_stack(f, limit))&lt;/code&gt; 의 약어입니다 .</target>
        </trans-unit>
        <trans-unit id="0a749b795f06550600447a0169cf24c779d0f176" translate="yes" xml:space="preserve">
          <source>A shorthand for &lt;code&gt;format_list(extract_tb(tb, limit))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format_list(extract_tb(tb, limit))&lt;/code&gt; 의 약어입니다 .</target>
        </trans-unit>
        <trans-unit id="d680c12f8a4e98b73840c4eb1f954e21eb884b1b" translate="yes" xml:space="preserve">
          <source>A sign character (&lt;code&gt;'+'&lt;/code&gt; or &lt;code&gt;'-'&lt;/code&gt;) will precede the conversion (overrides a &amp;ldquo;space&amp;rdquo; flag).</source>
          <target state="translated">부호 문자 ( &lt;code&gt;'+'&lt;/code&gt; 또는 &lt;code&gt;'-'&lt;/code&gt; )가 변환 앞에옵니다 ( &quot;space&quot;플래그를 재정의 함).</target>
        </trans-unit>
        <trans-unit id="8295b8b179c3eb769ae5ced64ca9d3357e8a07b4" translate="yes" xml:space="preserve">
          <source>A similar &lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;example&lt;/a&gt; using transports, protocols, and the &lt;a href=&quot;#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">전송, 프로토콜 및 &lt;a href=&quot;#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt; 메소드 &lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;를&lt;/a&gt; 사용 하는 유사한 예제 입니다.</target>
        </trans-unit>
        <trans-unit id="9816a27a3071e14aa4cc7b0d979658eab901c688" translate="yes" xml:space="preserve">
          <source>A similar &lt;a href=&quot;asyncio-task#asyncio-example-sleep&quot;&gt;current date&lt;/a&gt; example created with a coroutine and the &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">코 루틴과 &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt; 함수로 만든 비슷한 &lt;a href=&quot;asyncio-task#asyncio-example-sleep&quot;&gt;현재 날짜&lt;/a&gt; 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="c0aa2b4df7991a37bad1b0944c5afe055528abc3" translate="yes" xml:space="preserve">
          <source>A similar &lt;a href=&quot;asyncio-task#coroutine&quot;&gt;Hello World&lt;/a&gt; example created with a coroutine and the &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">코 루틴과 &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt; 함수로 만든 유사한 &lt;a href=&quot;asyncio-task#coroutine&quot;&gt;Hello World&lt;/a&gt; 예제입니다 .</target>
        </trans-unit>
        <trans-unit id="cbb8400354d2ab8f01a6d370ad999d970aea658b" translate="yes" xml:space="preserve">
          <source>A simple &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; subclass that provides attribute access to its namespace, as well as a meaningful repr.</source>
          <target state="translated">네임 스페이스에 대한 속성 액세스와 의미있는 repr을 제공 하는 간단한 &lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt; 서브 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="6608731fe87a5bbfa371c043387adc8877916f98" translate="yes" xml:space="preserve">
          <source>A simple example demonstrating the use of the programmatic interface:</source>
          <target state="translated">프로그래밍 인터페이스 사용을 보여주는 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="c1b20a4571d8f5fc4dbbbd293f8b4bcd6a17862f" translate="yes" xml:space="preserve">
          <source>A simple example illustrating typical use (a constant-time comparison operation is needed to limit exposure to timing attacks. &lt;a href=&quot;hmac#hmac.compare_digest&quot;&gt;&lt;code&gt;hmac.compare_digest()&lt;/code&gt;&lt;/a&gt; is suitable for this purpose):</source>
          <target state="translated">일반적인 사용을 보여주는 간단한 예 (시간 공격에 대한 노출을 제한하려면 상수 시간 비교 작업이 필요합니다. &lt;a href=&quot;hmac#hmac.compare_digest&quot;&gt; &lt;code&gt;hmac.compare_digest()&lt;/code&gt; &lt;/a&gt; 는이 목적에 적합합니다) :</target>
        </trans-unit>
        <trans-unit id="39492fd3c64429290422fb9d8bf5eb46c13341d4" translate="yes" xml:space="preserve">
          <source>A simple example illustrating typical use:</source>
          <target state="translated">일반적인 사용을 보여주는 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="44e93bd7bca8db2e51ed966e536f70c2a01db2b6" translate="yes" xml:space="preserve">
          <source>A simple example of printing the subjects of all messages in a mailbox that seem interesting:</source>
          <target state="translated">흥미로운 것처럼 보이는 모든 메시지의 제목을 사서함에 인쇄하는 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="translated">간단한 예 :</target>
        </trans-unit>
        <trans-unit id="ae7798a28395a6340e3133d1e7c1839067f6a8e8" translate="yes" xml:space="preserve">
          <source>A simple set of examples:</source>
          <target state="translated">간단한 예제 모음 :</target>
        </trans-unit>
        <trans-unit id="400bff2d1d48555e7a88b7ac26ee66c3fbf404f6" translate="yes" xml:space="preserve">
          <source>A simple typed namespace. At runtime it is equivalent to a plain &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">간단한 형식의 네임 스페이스 런타임에는 일반 &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1778756c346af273a27beed59f001b8aaa66eb9b" translate="yes" xml:space="preserve">
          <source>A simpler option is to simply set the &amp;ldquo;name&amp;rdquo; attribute after mock creation:</source>
          <target state="translated">더 간단한 옵션은 모의 작성 후 &quot;이름&quot;속성을 설정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d4b8d651deb9e36f36a73b620c31c7a4ad8bf0ee" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;except&lt;/code&gt; clause. &lt;code&gt;type&lt;/code&gt; is the exception type it will match, typically a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node (or &lt;code&gt;None&lt;/code&gt; for a catch-all &lt;code&gt;except:&lt;/code&gt; clause). &lt;code&gt;name&lt;/code&gt; is a raw string for the name to hold the exception, or &lt;code&gt;None&lt;/code&gt; if the clause doesn&amp;rsquo;t have &lt;code&gt;as foo&lt;/code&gt;. &lt;code&gt;body&lt;/code&gt; is a list of nodes.</source>
          <target state="translated">A single &lt;code&gt;except&lt;/code&gt; clause. &lt;code&gt;type&lt;/code&gt; is the exception type it will match, typically a &lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt; node (or &lt;code&gt;None&lt;/code&gt; for a catch-all &lt;code&gt;except:&lt;/code&gt; clause). &lt;code&gt;name&lt;/code&gt; is a raw string for the name to hold the exception, or &lt;code&gt;None&lt;/code&gt; if the clause doesn&amp;rsquo;t have &lt;code&gt;as foo&lt;/code&gt; . &lt;code&gt;body&lt;/code&gt; is a list of nodes.</target>
        </trans-unit>
        <trans-unit id="6b2fd25df18750c538e86a443be6e8a1f46f3141" translate="yes" xml:space="preserve">
          <source>A single argument in a list. &lt;code&gt;arg&lt;/code&gt; is a raw string of the argument name, &lt;code&gt;annotation&lt;/code&gt; is its annotation, such as a &lt;code&gt;Str&lt;/code&gt; or &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node.</source>
          <target state="translated">A single argument in a list. &lt;code&gt;arg&lt;/code&gt; is a raw string of the argument name, &lt;code&gt;annotation&lt;/code&gt; is its annotation, such as a &lt;code&gt;Str&lt;/code&gt; or &lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt; node.</target>
        </trans-unit>
        <trans-unit id="28a40ed12bd654761eff7801cf611643a2f334c9" translate="yes" xml:space="preserve">
          <source>A single context manager in a &lt;code&gt;with&lt;/code&gt; block. &lt;code&gt;context_expr&lt;/code&gt; is the context manager, often a &lt;a href=&quot;#ast.Call&quot;&gt;&lt;code&gt;Call&lt;/code&gt;&lt;/a&gt; node. &lt;code&gt;optional_vars&lt;/code&gt; is a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ast.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ast.List&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; for the &lt;code&gt;as foo&lt;/code&gt; part, or &lt;code&gt;None&lt;/code&gt; if that isn&amp;rsquo;t used.</source>
          <target state="translated">A single context manager in a &lt;code&gt;with&lt;/code&gt; block. &lt;code&gt;context_expr&lt;/code&gt; is the context manager, often a &lt;a href=&quot;#ast.Call&quot;&gt; &lt;code&gt;Call&lt;/code&gt; &lt;/a&gt; node. &lt;code&gt;optional_vars&lt;/code&gt; is a &lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#ast.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#ast.List&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt; for the &lt;code&gt;as foo&lt;/code&gt; part, or &lt;code&gt;None&lt;/code&gt; if that isn&amp;rsquo;t used.</target>
        </trans-unit>
        <trans-unit id="6fa256381f5f3fdc1e9ddf323c393ca970d51e94" translate="yes" xml:space="preserve">
          <source>A single exception is defined:</source>
          <target state="translated">단일 예외가 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="77aa5f41dd9106f7bd2c4d2b21ec060c0df7ee38" translate="yes" xml:space="preserve">
          <source>A single interactive example, consisting of a Python statement and its expected output. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="translated">Python 문과 예상 출력으로 구성된 단일 대화식 예제입니다. 생성자 인수는 동일한 이름의 속성을 초기화하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1678b7653c8ad5878c0957e08c63d64d24b7a2d9" translate="yes" xml:space="preserve">
          <source>A slash(/) in the signature of a function denotes that the parameters prior to it are positional-only. For more info, see &lt;a href=&quot;https://docs.python.org/3.8/faq/programming.html#faq-positional-only-arguments&quot;&gt;the FAQ entry on positional-only parameters&lt;/a&gt;.</source>
          <target state="translated">함수 시그니처에서 슬래시 (/)는 매개 변수가 위치 전용임을 나타냅니다. 자세한 내용 &lt;a href=&quot;https://docs.python.org/3.8/faq/programming.html#faq-positional-only-arguments&quot;&gt;은 위치 전용 매개 변수에 대한 FAQ 항목을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac9172b1b25ebd1f348f44756376e8b084943634" translate="yes" xml:space="preserve">
          <source>A slash(/) in the signature of a function denotes that the parameters prior to it are positional-only. For more info, see &lt;a href=&quot;https://docs.python.org/3.9/faq/programming.html#faq-positional-only-arguments&quot;&gt;the FAQ entry on positional-only parameters&lt;/a&gt;.</source>
          <target state="translated">A slash(/) in the signature of a function denotes that the parameters prior to it are positional-only. For more info, see &lt;a href=&quot;https://docs.python.org/3.9/faq/programming.html#faq-positional-only-arguments&quot;&gt;the FAQ entry on positional-only parameters&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8c3d52d28caf1f8e3ebc74d7080a5dd1a88e9282" translate="yes" xml:space="preserve">
          <source>A slightly more advanced use of the reader &amp;mdash; catching and reporting errors:</source>
          <target state="translated">약간 더 진보 된 리더 사용-오류 포착 및보고 :</target>
        </trans-unit>
        <trans-unit id="898ebff01eaf3b8759adc9d7329175bc0b8511cb" translate="yes" xml:space="preserve">
          <source>A small number of constants live in the built-in namespace. They are:</source>
          <target state="translated">소수의 상수가 내장 네임 스페이스에 있습니다. 그들은:</target>
        </trans-unit>
        <trans-unit id="2f57e31984cb6932a8e39a8ebeab0588c1bb3009" translate="yes" xml:space="preserve">
          <source>A socket object can be in one of three modes: blocking, non-blocking, or timeout. Sockets are by default always created in blocking mode, but this can be changed by calling &lt;a href=&quot;#socket.setdefaulttimeout&quot;&gt;&lt;code&gt;setdefaulttimeout()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">소켓 객체는 차단, 비 차단 또는 타임 아웃의 세 가지 모드 중 하나 일 수 있습니다. 소켓은 기본적으로 항상 블로킹 모드로 작성되지만 &lt;a href=&quot;#socket.setdefaulttimeout&quot;&gt; &lt;code&gt;setdefaulttimeout()&lt;/code&gt; &lt;/a&gt; 을 호출하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e405eec72bfbf93e7d5d778bf66ae75f5d35cc43" translate="yes" xml:space="preserve">
          <source>A solitary difference from its close analog exists: its &lt;code&gt;acquire&lt;/code&gt; method&amp;rsquo;s first argument is named &lt;em&gt;block&lt;/em&gt;, as is consistent with &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt;&lt;code&gt;Lock.acquire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">밀접한 아날로그와 독방의 차이점이 있습니다. &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt; &lt;code&gt;Lock.acquire()&lt;/code&gt; &lt;/a&gt; 와 일치 하는 &lt;code&gt;acquire&lt;/code&gt; 메소드의 첫 번째 인수 이름은 &lt;em&gt;block&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cf3e702a5afe2e89ff3f3db0ef3665216cfbc631" translate="yes" xml:space="preserve">
          <source>A solution to the first two challenges is to store entries as 3-element list including the priority, an entry count, and the task. The entry count serves as a tie-breaker so that two tasks with the same priority are returned in the order they were added. And since no two entry counts are the same, the tuple comparison will never attempt to directly compare two tasks.</source>
          <target state="translated">처음 두 가지 과제에 대한 해결책은 항목을 우선 순위, 항목 수 및 작업을 포함하여 3 요소 목록으로 저장하는 것입니다. 진입 횟수는 순위 결정자 역할을하므로 우선 순위가 동일한 두 작업이 추가 된 순서대로 반환됩니다. 두 항목 수가 동일하지 않으므로 튜플 비교는 두 작업을 직접 비교하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="096bd808e501639e423de5a2cbb278cf68ed16b4" translate="yes" xml:space="preserve">
          <source>A special attribute of every module is &lt;a href=&quot;#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt;. This is the dictionary containing the module&amp;rsquo;s symbol table. Modifying this dictionary will actually change the module&amp;rsquo;s symbol table, but direct assignment to the &lt;a href=&quot;#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute is not possible (you can write &lt;code&gt;m.__dict__['a'] = 1&lt;/code&gt;, which defines &lt;code&gt;m.a&lt;/code&gt; to be &lt;code&gt;1&lt;/code&gt;, but you can&amp;rsquo;t write &lt;code&gt;m.__dict__ = {}&lt;/code&gt;). Modifying &lt;a href=&quot;#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; directly is not recommended.</source>
          <target state="translated">모든 모듈의 특별한 속성은 &lt;a href=&quot;#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt; 입니다. 이것은 모듈의 심볼 테이블을 포함하는 사전입니다. 이 사전을 수정하면 실제로 모듈의 심볼 테이블을 변경하지만, 직접 할당됩니다 &lt;a href=&quot;#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; 의&lt;/a&gt; (당신이 쓸 수있는 속성 수 없습니다 &lt;code&gt;m.__dict__['a'] = 1&lt;/code&gt; 정의, &lt;code&gt;m.a&lt;/code&gt; 될 수 &lt;code&gt;1&lt;/code&gt; ,하지만 당신은 할 수 없습니다 쓰기 &lt;code&gt;m.__dict__ = {}&lt;/code&gt; ). &lt;a href=&quot;#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; 을&lt;/a&gt; 직접 수정 하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="350860d7d2f026325c9ed753e8012e0f492b3cef" translate="yes" xml:space="preserve">
          <source>A special class-level marker to specify absence of a return annotation.</source>
          <target state="translated">리턴 주석이 없음을 지정하는 특수 클래스 레벨 마커입니다.</target>
        </trans-unit>
        <trans-unit id="ce834d784be00653df494feb83b9f6a0fe0232f1" translate="yes" xml:space="preserve">
          <source>A special class-level marker to specify absence of default values and annotations.</source>
          <target state="translated">기본값과 주석이 없음을 지정하는 특수 클래스 수준 마커입니다.</target>
        </trans-unit>
        <trans-unit id="637523941475f7686ab8baf723f111f45b51298d" translate="yes" xml:space="preserve">
          <source>A special constant that is assumed to be &lt;code&gt;True&lt;/code&gt; by 3rd party static type checkers. It is &lt;code&gt;False&lt;/code&gt; at runtime. Usage:</source>
          <target state="translated">타사 정적 유형 검사기에 의해 &lt;code&gt;True&lt;/code&gt; 로 가정되는 특수 상수입니다 . 그것은이다 &lt;code&gt;False&lt;/code&gt; 런타임. 용법:</target>
        </trans-unit>
        <trans-unit id="3279a81827c8b621d38f653bc2a69edd2e98eeb9" translate="yes" xml:space="preserve">
          <source>A special kind of type is &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt;. A static type checker will treat every type as being compatible with &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; as being compatible with every type.</source>
          <target state="translated">특수한 유형의 유형은 &lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt; 입니다. 정적 유형 검사기는 모든 유형이 &lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt; 와 호환되는 것으로 모든 유형과 호환되는 것으로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="dca41668950435a9f7e18c16a1bd901f35d7d3f9" translate="yes" xml:space="preserve">
          <source>A special typing construct to indicate to type checkers that a name cannot be re-assigned or overridden in a subclass. For example:</source>
          <target state="translated">하위 클래스에서 이름을 재 할당하거나 재정의 할 수 없음을 유형 검사기에 표시하는 특수한 타이핑 구성입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c9c5c2d3363e18dd4be009fb8cdb1d42561049b3" translate="yes" xml:space="preserve">
          <source>A special-interest-group for discussion of testing, and testing tools, in Python.</source>
          <target state="translated">파이썬에서 테스트 및 테스트 도구에 대한 토론을위한 특별한 관심 그룹.</target>
        </trans-unit>
        <trans-unit id="ad1a92f0cb821225e4017a94010fdf1040669506" translate="yes" xml:space="preserve">
          <source>A specialized alternative to &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt;, for use when deploying on Microsoft&amp;rsquo;s IIS web server, without having set the config allowPathInfo option (IIS&amp;gt;=7) or metabase allowPathInfoForScriptMappings (IIS&amp;lt;7).</source>
          <target state="translated">config allowPathInfo 옵션 (IIS&amp;gt; = 7) 또는 메타베이스 allowPathInfoForScriptMappings (IIS &amp;lt;7)를 설정하지 않고 Microsoft IIS 웹 서버에 배치 할 때 사용하기위한 &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; &lt;/a&gt; 의 특수 대안 입니다.</target>
        </trans-unit>
        <trans-unit id="c4118a2f3f478f32d9f31601e7190c8ce65ab75b" translate="yes" xml:space="preserve">
          <source>A specification for a module&amp;rsquo;s import-system-related state. This is typically exposed as the module&amp;rsquo;s &lt;code&gt;__spec__&lt;/code&gt; attribute. In the descriptions below, the names in parentheses give the corresponding attribute available directly on the module object. E.g. &lt;code&gt;module.__spec__.origin == module.__file__&lt;/code&gt;. Note however that while the &lt;em&gt;values&lt;/em&gt; are usually equivalent, they can differ since there is no synchronization between the two objects. Thus it is possible to update the module&amp;rsquo;s &lt;code&gt;__path__&lt;/code&gt; at runtime, and this will not be automatically reflected in &lt;code&gt;__spec__.submodule_search_locations&lt;/code&gt;.</source>
          <target state="translated">모듈의 가져 오기 시스템 관련 상태에 대한 사양. 이것은 일반적으로 모듈의 &lt;code&gt;__spec__&lt;/code&gt; 속성 으로 노출됩니다 . 아래 설명에서 괄호 안의 이름은 모듈 객체에서 직접 사용할 수있는 해당 속성을 제공합니다. 예 : &lt;code&gt;module.__spec__.origin == module.__file__&lt;/code&gt; . 그러나 &lt;em&gt;값&lt;/em&gt; 은 일반적으로 동일 하지만 두 개체간에 동기화가 없기 때문에 &lt;em&gt;값&lt;/em&gt; 이 다를 수 있습니다. 따라서 런타임시 모듈의 &lt;code&gt;__path__&lt;/code&gt; 를 업데이트 할 수 있으며 이는 &lt;code&gt;__spec__.submodule_search_locations&lt;/code&gt; 에 자동으로 반영되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="68f5cd32463c3d785efa4f8d8fce98c066a6f661" translate="yes" xml:space="preserve">
          <source>A specification of MMDF format from the documentation of tin, a newsreader.</source>
          <target state="translated">뉴스 리더 인 tin의 문서에서 MMDF 형식의 사양입니다.</target>
        </trans-unit>
        <trans-unit id="3babd4b55bc7cb772fec830be58f3b1bf01d70a8" translate="yes" xml:space="preserve">
          <source>A specification of the Babyl format.</source>
          <target state="translated">Babyl 형식의 사양입니다.</target>
        </trans-unit>
        <trans-unit id="880abe5218724ebf38706b93b963643ddd6c46d2" translate="yes" xml:space="preserve">
          <source>A specification of the format and its variations.</source>
          <target state="translated">형식 및 변형 사양.</target>
        </trans-unit>
        <trans-unit id="3727d1f65952e6742ce409e5f8d5ad37e6940601" translate="yes" xml:space="preserve">
          <source>A specification of the format, with details on locking.</source>
          <target state="translated">A specification of the format, with details on locking.</target>
        </trans-unit>
        <trans-unit id="cbfb1789ebf20df3a87c52728764572e221f5901" translate="yes" xml:space="preserve">
          <source>A specification of the format. Describes a common extension for supporting folders.</source>
          <target state="translated">A specification of the format. Describes a common extension for supporting folders.</target>
        </trans-unit>
        <trans-unit id="8e598ccfa02f6f982d35271d6d8413a2dcd8d0e9" translate="yes" xml:space="preserve">
          <source>A stack traceback such as is provided by &lt;a href=&quot;traceback#traceback.print_stack&quot;&gt;&lt;code&gt;traceback.print_stack()&lt;/code&gt;&lt;/a&gt;, showing the call hierarchy.</source>
          <target state="translated">callback을 보여주는 &lt;a href=&quot;traceback#traceback.print_stack&quot;&gt; &lt;code&gt;traceback.print_stack()&lt;/code&gt; &lt;/a&gt; 의해 제공되는 것과 같은 스택 역 추적 .</target>
        </trans-unit>
        <trans-unit id="920378f02b4726cf356a62a8babd3e02c63917c6" translate="yes" xml:space="preserve">
          <source>A state specification is a sequence of state names, optionally prefixed with an exclamation point indicating that the bit is off.</source>
          <target state="translated">상태 사양은 상태 이름 시퀀스이며, 선택적으로 비트가 꺼져 있음을 나타내는 느낌표가 접두어로 붙습니다.</target>
        </trans-unit>
        <trans-unit id="6ef4ebab996d1f45a1c0cae57a6fb9b310520e99" translate="yes" xml:space="preserve">
          <source>A static method can be called either on the class (such as &lt;code&gt;C.f()&lt;/code&gt;) or on an instance (such as &lt;code&gt;C().f()&lt;/code&gt;).</source>
          <target state="translated">정적 메서드는 클래스 ( &lt;code&gt;C.f()&lt;/code&gt; ) 또는 인스턴스 ( &lt;code&gt;C().f()&lt;/code&gt; ) 에서 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="174b86cd307a93d7ede9985e59dfb55608a534c0" translate="yes" xml:space="preserve">
          <source>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</source>
          <target state="translated">정적 메소드는 내재 된 첫 번째 인수를받지 않습니다. 정적 메소드를 선언하려면 다음 관용구를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="858fb724027cfca291b2dfaa1173abe4a25c8c00" translate="yes" xml:space="preserve">
          <source>A static method which returns a callable that creates a lazy loader. This is meant to be used in situations where the loader is passed by class instead of by instance.</source>
          <target state="translated">게으른 로더를 생성하는 콜 러블을 반환하는 정적 메서드입니다. 이것은 로더가 인스턴스가 아닌 클래스에 의해 전달되는 상황에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6598324a6503c84ca67a35b1e37f66321d0cc98b" translate="yes" xml:space="preserve">
          <source>A stream implementation using an in-memory bytes buffer. It inherits &lt;a href=&quot;#io.BufferedIOBase&quot;&gt;&lt;code&gt;BufferedIOBase&lt;/code&gt;&lt;/a&gt;. The buffer is discarded when the &lt;a href=&quot;#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">인 메모리 바이트 버퍼를 사용한 스트림 구현 &lt;a href=&quot;#io.BufferedIOBase&quot;&gt; &lt;code&gt;BufferedIOBase&lt;/code&gt; 를&lt;/a&gt; 상속 합니다. &lt;a href=&quot;#io.IOBase.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 메소드가 호출 되면 버퍼가 삭제됩니다 .</target>
        </trans-unit>
        <trans-unit id="76435fdba1ae6e1ec5de2745cd624d720dc07d8c" translate="yes" xml:space="preserve">
          <source>A string consisting of an IP address and an optional mask, separated by a slash (&lt;code&gt;/&lt;/code&gt;). The IP address is the network address, and the mask can be either a single number, which means it&amp;rsquo;s a &lt;em&gt;prefix&lt;/em&gt;, or a string representation of an IPv4 address. If it&amp;rsquo;s the latter, the mask is interpreted as a &lt;em&gt;net mask&lt;/em&gt; if it starts with a non-zero field, or as a &lt;em&gt;host mask&lt;/em&gt; if it starts with a zero field, with the single exception of an all-zero mask which is treated as a &lt;em&gt;net mask&lt;/em&gt;. If no mask is provided, it&amp;rsquo;s considered to be &lt;code&gt;/32&lt;/code&gt;.</source>
          <target state="translated">IP 주소와 선택적 마스크로 구성되고 슬래시 ( &lt;code&gt;/&lt;/code&gt; )로 구분 된 문자열 입니다. IP 주소는 네트워크 주소이며 마스크는 단일 숫자 일 수 있습니다. 이는 &lt;em&gt;접두사&lt;/em&gt; 또는 IPv4 주소의 문자열 표현 을 의미합니다 . 후자의 경우 마스크는 0이 아닌 필드로 시작하면 &lt;em&gt;네트 마스크&lt;/em&gt; 로 해석 되거나 0으로 시작하는 경우 &lt;em&gt;호스트 마스크로&lt;/em&gt; 해석됩니다. &lt;em&gt;네트 마스크&lt;/em&gt; . 마스크가 제공되지 않으면 &lt;code&gt;/32&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="78c0c3e7a735e19323cbd003b6b63d79aa63ae1c" translate="yes" xml:space="preserve">
          <source>A string consisting of an IP address and an optional prefix length, separated by a slash (&lt;code&gt;/&lt;/code&gt;). The IP address is the network address, and the prefix length must be a single number, the &lt;em&gt;prefix&lt;/em&gt;. If no prefix length is provided, it&amp;rsquo;s considered to be &lt;code&gt;/128&lt;/code&gt;.</source>
          <target state="translated">IP 주소와 선택적 접두사 길이로 구성되고 슬래시 ( &lt;code&gt;/&lt;/code&gt; )로 구분 된 문자열 입니다. IP 주소는 네트워크 주소와 접두사 길이는 하나의 숫자가 있어야합니다 &lt;em&gt;접두사&lt;/em&gt; . 접두사 길이가 제공되지 않으면 &lt;code&gt;/128&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="237deb5e98fd45357a17f1768376efe3e60e90b8" translate="yes" xml:space="preserve">
          <source>A string consisting of eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons. This describes an &lt;em&gt;exploded&lt;/em&gt; (longhand) notation. The string can also be &lt;em&gt;compressed&lt;/em&gt; (shorthand notation) by various means. See &lt;a href=&quot;https://tools.ietf.org/html/rfc4291.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 4291&lt;/strong&gt;&lt;/a&gt; for details. For example, &lt;code&gt;&quot;0000:0000:0000:0000:0000:0abc:0007:0def&quot;&lt;/code&gt; can be compressed to &lt;code&gt;&quot;::abc:7:def&quot;&lt;/code&gt;.</source>
          <target state="translated">4 개의 16 진수로 구성된 8 개의 그룹으로 구성된 문자열이며 각 그룹은 16 비트를 나타냅니다. 그룹은 콜론으로 구분됩니다. 이것은 &lt;em&gt;분해 된&lt;/em&gt; (긴손) 표기법을 설명합니다 . 또한 다양한 방법으로 문자열을 &lt;em&gt;압축&lt;/em&gt; (속기 표기법) 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc4291.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 4291&lt;/strong&gt;&lt;/a&gt; 을 참조하십시오. 예를 들어, &lt;code&gt;&quot;0000:0000:0000:0000:0000:0abc:0007:0def&quot;&lt;/code&gt; 는 &lt;code&gt;&quot;::abc:7:def&quot;&lt;/code&gt; 로 압축 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aef6d4595a0913292c36ecd58b3a3568198db4c5" translate="yes" xml:space="preserve">
          <source>A string containing a diagnostic message associated with the fault.</source>
          <target state="translated">결함과 관련된 진단 메시지가 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="81b39e8a05161f630901941638fda04c2b6f39c1" translate="yes" xml:space="preserve">
          <source>A string containing all ASCII characters that are considered whitespace. This includes the characters space, tab, linefeed, return, formfeed, and vertical tab.</source>
          <target state="translated">공백으로 간주되는 모든 ASCII 문자를 포함하는 문자열입니다. 여기에는 문자 공간, 탭, 줄 바꿈, 반환, 용지 공급 및 세로 탭이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="02bf24f6c9f2fbd3f9a2ca3b6ce7459c45d991f7" translate="yes" xml:space="preserve">
          <source>A string containing the copyright pertaining to the Python interpreter.</source>
          <target state="translated">Python 인터프리터와 관련된 저작권이 포함 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="602f371cbcfdb3cf6cfc5a0f24dd9a3734e536d7" translate="yes" xml:space="preserve">
          <source>A string containing the example&amp;rsquo;s source code. This source code consists of a single Python statement, and always ends with a newline; the constructor adds a newline when necessary.</source>
          <target state="translated">예제 소스 코드가 포함 된 문자열 이 소스 코드는 단일 Python 문으로 구성되며 항상 줄 바꿈으로 끝납니다. 생성자는 필요할 때 개행을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="e1f80f8d0c2fd10cd8656f15485d121546bf45d4" translate="yes" xml:space="preserve">
          <source>A string containing the format (in &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; module style) for each element in the view. A memoryview can be created from exporters with arbitrary format strings, but some methods (e.g. &lt;a href=&quot;#memoryview.tolist&quot;&gt;&lt;code&gt;tolist()&lt;/code&gt;&lt;/a&gt;) are restricted to native single element formats.</source>
          <target state="translated">뷰의 각 요소에 대한 형식을 포함하는 문자열 ( &lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt; 모듈 스타일). 임의의 형식 문자열을 사용하여 내보내기에서 메모리 뷰를 작성할 수 있지만 일부 메소드 (예 : &lt;a href=&quot;#memoryview.tolist&quot;&gt; &lt;code&gt;tolist()&lt;/code&gt; &lt;/a&gt; )는 기본 단일 요소 형식으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="5497a158149dccf8e4b9ad551b13d3d9fcf2ffc0" translate="yes" xml:space="preserve">
          <source>A string containing the version number of the Python interpreter plus additional information on the build number and compiler used. This string is displayed when the interactive interpreter is started. Do not extract version information out of it, rather, use &lt;a href=&quot;#sys.version_info&quot;&gt;&lt;code&gt;version_info&lt;/code&gt;&lt;/a&gt; and the functions provided by the &lt;a href=&quot;platform#module-platform&quot;&gt;&lt;code&gt;platform&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Python 인터프리터의 버전 번호와 사용 된 빌드 번호 및 컴파일러에 대한 추가 정보가 포함 된 문자열입니다. 이 문자열은 대화식 인터프리터가 시작될 때 표시됩니다. 버전 정보를 추출하지 말고 &lt;a href=&quot;#sys.version_info&quot;&gt; &lt;code&gt;version_info&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;platform#module-platform&quot;&gt; &lt;code&gt;platform&lt;/code&gt; &lt;/a&gt; 모듈에서 제공하는 기능을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="87de8fd8a95197f57121e5b7786f6335363597fb" translate="yes" xml:space="preserve">
          <source>A string describing the software name and version of the NNTP server, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if not advertised by the server.</source>
          <target state="translated">NNTP 서버의 소프트웨어 이름 및 버전을 설명하는 문자열이거나 서버에서 알리지 않은 경우 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="edbd00479009ac29a277bcdb7f7f622f3cf29480" translate="yes" xml:space="preserve">
          <source>A string describing the specific codec error.</source>
          <target state="translated">특정 코덱 오류를 설명하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="5c10f3d5bb16c2fb415030d97d9657d81442e989" translate="yes" xml:space="preserve">
          <source>A string for the fully-qualified name of the module.</source>
          <target state="translated">정규화 된 모듈 이름의 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="bd20de9160337cf7d4615529ad2c990a8d28695a" translate="yes" xml:space="preserve">
          <source>A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense. If Python is unable to retrieve the real path to its executable, &lt;a href=&quot;#sys.executable&quot;&gt;&lt;code&gt;sys.executable&lt;/code&gt;&lt;/a&gt; will be an empty string or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">파이썬 인터프리터를위한 실행 가능한 바이너리의 절대 경로를 제공하는 문자열입니다. Python이 실행 파일의 실제 경로를 검색 할 수 없으면 &lt;a href=&quot;#sys.executable&quot;&gt; &lt;code&gt;sys.executable&lt;/code&gt; &lt;/a&gt; executable 은 빈 문자열이거나 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="82a5b3b17625dc398e0887b40698af61a1e88431" translate="yes" xml:space="preserve">
          <source>A string giving the complete internal subset from the document. This does not include the brackets which enclose the subset. If the document has no internal subset, this should be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">문서에서 완전한 내부 하위 세트를 제공하는 문자열입니다. 하위 집합을 묶는 괄호는 포함되지 않습니다. 문서에 내부 서브 세트가없는 경우 &lt;code&gt;None&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="82c2539aafdf888e5c8ef7fece2e98e2d2f074a7" translate="yes" xml:space="preserve">
          <source>A string giving the site-specific directory prefix where the platform independent Python files are installed; by default, this is the string &lt;code&gt;'/usr/local'&lt;/code&gt;. This can be set at build time with the &lt;code&gt;--prefix&lt;/code&gt; argument to the &lt;strong&gt;configure&lt;/strong&gt; script. The main collection of Python library modules is installed in the directory &lt;code&gt;&lt;em&gt;prefix&lt;/em&gt;/lib/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt; while the platform independent header files (all except &lt;code&gt;pyconfig.h&lt;/code&gt;) are stored in &lt;code&gt;&lt;em&gt;prefix&lt;/em&gt;/include/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt;, where &lt;em&gt;X.Y&lt;/em&gt; is the version number of Python, for example &lt;code&gt;3.2&lt;/code&gt;.</source>
          <target state="translated">플랫폼 독립적 인 Python 파일이 설치되는 사이트 별 디렉토리 접두사를 제공하는 문자열. 기본적으로 이것은 문자열 &lt;code&gt;'/usr/local'&lt;/code&gt; 입니다. &lt;strong&gt;구성&lt;/strong&gt; 스크립트에 &lt;code&gt;--prefix&lt;/code&gt; 인수를 사용하여 빌드시이를 설정할 수 있습니다 . 파이썬 라이브러리 모듈의 주요 컬렉션 디렉토리에 설치되어 &lt;code&gt;&lt;em&gt;prefix&lt;/em&gt;/lib/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt; / lib 디렉토리 / 파이썬 &lt;em&gt;X &amp;middot; Y&lt;/em&gt; 플랫폼 독립적 인 헤더 파일 (제외한 모든 동안 &lt;code&gt;pyconfig.h&lt;/code&gt; 가 )에 저장되어있는 &lt;code&gt;&lt;em&gt;prefix&lt;/em&gt;/include/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt; / 포함 / 파이썬 &lt;em&gt;X &amp;middot; Y&lt;/em&gt; , &lt;em&gt;XY는&lt;/em&gt; 파이썬의 버전 번호입니다, 예를 들어 &lt;code&gt;3.2&lt;/code&gt; .&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dbea00c5fe6b20a57a6af3a243d22cb8c28d88f0" translate="yes" xml:space="preserve">
          <source>A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also &lt;code&gt;'/usr/local'&lt;/code&gt;. This can be set at build time with the &lt;code&gt;--exec-prefix&lt;/code&gt; argument to the &lt;strong&gt;configure&lt;/strong&gt; script. Specifically, all configuration files (e.g. the &lt;code&gt;pyconfig.h&lt;/code&gt; header file) are installed in the directory &lt;code&gt;&lt;em&gt;exec_prefix&lt;/em&gt;/lib/python&lt;em&gt;X.Y&lt;/em&gt;/config&lt;/code&gt;, and shared library modules are installed in &lt;code&gt;&lt;em&gt;exec_prefix&lt;/em&gt;/lib/python&lt;em&gt;X.Y&lt;/em&gt;/lib-dynload&lt;/code&gt;, where &lt;em&gt;X.Y&lt;/em&gt; is the version number of Python, for example &lt;code&gt;3.2&lt;/code&gt;.</source>
          <target state="translated">플랫폼 별 Python 파일이 설치되는 사이트 별 디렉토리 접두사를 제공하는 문자열입니다. 기본적으로 이것은 &lt;code&gt;'/usr/local'&lt;/code&gt; 입니다. &lt;strong&gt;구성&lt;/strong&gt; 스크립트에 &lt;code&gt;--exec-prefix&lt;/code&gt; 인수를 사용하여 빌드시이를 설정할 수 있습니다 . 특히, 모든 구성 파일 (예 : &lt;code&gt;pyconfig.h&lt;/code&gt; 의 헤더 파일) 디렉토리에 설치되어 &lt;code&gt;&lt;em&gt;exec_prefix&lt;/em&gt;/lib/python&lt;em&gt;X.Y&lt;/em&gt;/config&lt;/code&gt; / lib 디렉토리 / 파이썬 &lt;em&gt;X &amp;middot; Y&lt;/em&gt; / 설정 , 공유 라이브러리 모듈에 설치되어 &lt;code&gt;&lt;em&gt;exec_prefix&lt;/em&gt;/lib/python&lt;em&gt;X.Y&lt;/em&gt;/lib-dynload&lt;/code&gt; / lib 디렉토리 / 파이썬 &lt;em&gt;X &amp;middot; Y&lt;/em&gt; / lib에-dynload , &lt;em&gt;XY이&lt;/em&gt; 는 IS 예를 들어 파이썬의 버전 번호, &lt;code&gt;3.2&lt;/code&gt; .&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5c8652dd6a5ac42f8da95a3a336a8e2fe1700b98" translate="yes" xml:space="preserve">
          <source>A string identifying what kind of data this element represents (the element type, in other words).</source>
          <target state="translated">이 요소가 나타내는 데이터 종류 (즉, 요소 ​​유형)를 식별하는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="e099a6c12e8ac23155a4c961ffd7c4719169caa2" translate="yes" xml:space="preserve">
          <source>A string in decimal-dot notation, consisting of four decimal integers in the inclusive range 0&amp;ndash;255, separated by dots (e.g. &lt;code&gt;192.168.0.1&lt;/code&gt;). Each integer represents an octet (byte) in the address. Leading zeroes are tolerated only for values less than 8 (as there is no ambiguity between the decimal and octal interpretations of such strings).</source>
          <target state="translated">점으로 구분 된 0-255 범위의 4 개의 10 진수 정수로 구성되는 10 진수 표기법의 문자열입니다 (예 : &lt;code&gt;192.168.0.1&lt;/code&gt; ). 각 정수는 주소의 옥텟 (바이트)을 나타냅니다. 선행 0은 8보다 작은 값에 대해서만 허용됩니다 (해당 문자열의 10 진수 해석과 8 진수 해석 사이에 모호성이 없으므로).</target>
        </trans-unit>
        <trans-unit id="98d779e7a9a7548a374142ec0fd14b12dcce04f0" translate="yes" xml:space="preserve">
          <source>A string indicating how the &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; function behaves for floats. If the string has value &lt;code&gt;'short'&lt;/code&gt; then for a finite float &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;repr(x)&lt;/code&gt; aims to produce a short string with the property that &lt;code&gt;float(repr(x)) == x&lt;/code&gt;. This is the usual behaviour in Python 3.1 and later. Otherwise, &lt;code&gt;float_repr_style&lt;/code&gt; has value &lt;code&gt;'legacy'&lt;/code&gt; and &lt;code&gt;repr(x)&lt;/code&gt; behaves in the same way as it did in versions of Python prior to 3.1.</source>
          <target state="translated">&lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt; 함수가 부동 소수점에 대해 작동 하는 방식을 나타내는 문자열 입니다. 문자열에 &lt;code&gt;'short'&lt;/code&gt; 값이 있으면 유한 float &lt;code&gt;x&lt;/code&gt; 의 경우 &lt;code&gt;repr(x)&lt;/code&gt; 는 &lt;code&gt;float(repr(x)) == x&lt;/code&gt; 속성을 가진 짧은 문자열을 생성하는 것을 목표로 합니다. 이것은 Python 3.1 이상에서 일반적인 동작입니다. 그렇지 않으면 &lt;code&gt;float_repr_style&lt;/code&gt; 의 값은 &lt;code&gt;'legacy'&lt;/code&gt; 이며 &lt;code&gt;repr(x)&lt;/code&gt; 는 3.1 이전의 Python 버전에서와 동일한 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2f9a9d4483639b8e4c8302ccccdaba76f46139ac" translate="yes" xml:space="preserve">
          <source>A string indicating the fault type.</source>
          <target state="translated">결함 유형을 나타내는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="c2c502f394d7092bcce74de311739e93f611cf7a" translate="yes" xml:space="preserve">
          <source>A string mnemonic designating the OpenSSL submodule in which the error occurred, such as &lt;code&gt;SSL&lt;/code&gt;, &lt;code&gt;PEM&lt;/code&gt; or &lt;code&gt;X509&lt;/code&gt;. The range of possible values depends on the OpenSSL version.</source>
          <target state="translated">&lt;code&gt;SSL&lt;/code&gt; , &lt;code&gt;PEM&lt;/code&gt; 또는 &lt;code&gt;X509&lt;/code&gt; 와 같은 오류가 발생한 OpenSSL 하위 모듈을 지정하는 문자열 니모닉 입니다. 가능한 값의 범위는 OpenSSL 버전에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="430973647ef865594ce46611eb822fdc420d4549" translate="yes" xml:space="preserve">
          <source>A string mnemonic designating the reason this error occurred, for example &lt;code&gt;CERTIFICATE_VERIFY_FAILED&lt;/code&gt;. The range of possible values depends on the OpenSSL version.</source>
          <target state="translated">이 오류가 발생한 이유를 지정하는 문자열 니모닉 (예 : &lt;code&gt;CERTIFICATE_VERIFY_FAILED&lt;/code&gt; ) . 가능한 값의 범위는 OpenSSL 버전에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ead8e2705a51951c91f9ddcda6d821dc670588f9" translate="yes" xml:space="preserve">
          <source>A string name identifying the &lt;a href=&quot;#doctest.DocTest&quot;&gt;&lt;code&gt;DocTest&lt;/code&gt;&lt;/a&gt;. Typically, this is the name of the object or file that the test was extracted from.</source>
          <target state="translated">&lt;a href=&quot;#doctest.DocTest&quot;&gt; &lt;code&gt;DocTest&lt;/code&gt; 를&lt;/a&gt; 식별하는 문자열 이름 입니다. 일반적으로 이것은 테스트에서 추출 된 오브젝트 또는 파일의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="daef7957ccd37511d60fee6ca46be1ff15a1529c" translate="yes" xml:space="preserve">
          <source>A string of &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; read before the end of stream was reached.</source>
          <target state="translated">스트림 끝에 도달하기 전에 읽은 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 문자열 .</target>
        </trans-unit>
        <trans-unit id="2d32a9df8f0c11fad8fb171523d540f600ab323b" translate="yes" xml:space="preserve">
          <source>A string of the form #n, where n is an integer, specifying the nth display column.</source>
          <target state="translated">#n 형식의 문자열. 여기서 n은 정수이며 n 번째 표시 열을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="0c4df2b65593c46afd8e675b2cb2d3a19b9a1855" translate="yes" xml:space="preserve">
          <source>A string or a tuple &lt;code&gt;(id, unit)&lt;/code&gt; is used for the &lt;code&gt;SYSPROTO_CONTROL&lt;/code&gt; protocol of the &lt;code&gt;PF_SYSTEM&lt;/code&gt; family. The string is the name of a kernel control using a dynamically-assigned ID. The tuple can be used if ID and unit number of the kernel control are known or if a registered ID is used.</source>
          <target state="translated">문자열 또는 튜플 &lt;code&gt;(id, unit)&lt;/code&gt; 은 &lt;code&gt;PF_SYSTEM&lt;/code&gt; 제품군 의 &lt;code&gt;SYSPROTO_CONTROL&lt;/code&gt; 프로토콜에 사용됩니다 . 문자열은 동적으로 할당 된 ID를 사용하는 커널 컨트롤의 이름입니다. 커널 컨트롤의 ID와 장치 번호를 알고 있거나 등록 된 ID를 사용하는 경우 튜플을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a84ecaf3012782764f7426a5eec841f9b5ad7aba" translate="yes" xml:space="preserve">
          <source>A string representation of the interface with the mask in prefix notation.</source>
          <target state="translated">접두사 표기법으로 마스크가있는 인터페이스의 문자열 표현입니다.</target>
        </trans-unit>
        <trans-unit id="72998dbff76ca26cb4e1a93d0ac16de996142954" translate="yes" xml:space="preserve">
          <source>A string representation of the interface with the network as a host mask.</source>
          <target state="translated">네트워크를 호스트 마스크로 사용하는 인터페이스의 문자열 표현.</target>
        </trans-unit>
        <trans-unit id="7371903e755bf49dda7112025b476547bae7d6ac" translate="yes" xml:space="preserve">
          <source>A string representation of the interface with the network as a net mask.</source>
          <target state="translated">네트워크를 네트워크 마스크로 사용하는 인터페이스의 문자열 표현입니다.</target>
        </trans-unit>
        <trans-unit id="bf9731d346ddf0d65f9d0c39679778dee1e3fa12" translate="yes" xml:space="preserve">
          <source>A string representation of the network, with the mask in host mask notation.</source>
          <target state="translated">마스크를 호스트 마스크 표기법으로 사용하여 네트워크의 문자열 표현.</target>
        </trans-unit>
        <trans-unit id="7568a7359cb2750b66d47402cfff82e081404d9b" translate="yes" xml:space="preserve">
          <source>A string representation of the network, with the mask in net mask notation.</source>
          <target state="translated">넷 마스크 표기법으로 마스크가있는 네트워크의 문자열 표현.</target>
        </trans-unit>
        <trans-unit id="316bb3be50867216649ff211d2dca7247c501409" translate="yes" xml:space="preserve">
          <source>A string representation of the network, with the mask in prefix notation.</source>
          <target state="translated">접두사 표기법으로 마스크가있는 네트워크의 문자열 표현입니다.</target>
        </trans-unit>
        <trans-unit id="32e0575ba9f4056eab3aabb998ae5ff3a9f3c8fd" translate="yes" xml:space="preserve">
          <source>A string representing the (local or global) root, if any:</source>
          <target state="translated">로컬 또는 글로벌 루트를 나타내는 문자열입니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="2ed4f64a64d2fb6fad9a60578469fcecde96fc85" translate="yes" xml:space="preserve">
          <source>A string representing the drive letter or name, if any:</source>
          <target state="translated">드라이브 문자 또는 이름을 나타내는 문자열 (있는 경우) :</target>
        </trans-unit>
        <trans-unit id="06f0d5eec8d1f9fce8676408e0ba9c4fd328f28f" translate="yes" xml:space="preserve">
          <source>A string representing the final path component, excluding the drive and root, if any:</source>
          <target state="translated">드라이브와 루트를 제외한 최종 경로 구성 요소를 나타내는 문자열입니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="7d594412e6bf530edd194eaef7b660e57dfa27f5" translate="yes" xml:space="preserve">
          <source>A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.</source>
          <target state="translated">큰 따옴표로 묶인 문자열은 포함 된 공백에 관계없이 단일 인수로 해석됩니다. 인용 된 문자열을 인수에 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2066dc66a7df97de21bbc1e433f38dd5b78b7fbb" translate="yes" xml:space="preserve">
          <source>A string that identifies the value name</source>
          <target state="translated">값 이름을 식별하는 문자열</target>
        </trans-unit>
        <trans-unit id="39ff402a5674ecd7c70c6cd0871acdfc556d3c03" translate="yes" xml:space="preserve">
          <source>A string to issue as an intro or banner. May be overridden by giving the &lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt;&lt;code&gt;cmdloop()&lt;/code&gt;&lt;/a&gt; method an argument.</source>
          <target state="translated">인트로 또는 배너로 발행 할 문자열입니다. &lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt; &lt;code&gt;cmdloop()&lt;/code&gt; &lt;/a&gt; 메소드에 인수 를 제공하여 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="44fcf35da621f4ef926db56e062b11dbffd03933" translate="yes" xml:space="preserve">
          <source>A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor.</source>
          <target state="translated">식별 목적으로 만 사용되는 문자열. 의미가 없습니다. 여러 스레드에 동일한 이름을 지정할 수 있습니다. 초기 이름은 생성자가 설정합니다.</target>
        </trans-unit>
        <trans-unit id="85f33d1a5e2aa41160314a36dac932215ed021c5" translate="yes" xml:space="preserve">
          <source>A string with all available type codes.</source>
          <target state="translated">사용 가능한 모든 유형 코드가 포함 된 문자열</target>
        </trans-unit>
        <trans-unit id="26443c5e3539322fe9c2273c8a56fe833ba27cec" translate="yes" xml:space="preserve">
          <source>A string, a tuple of strings, or &lt;code&gt;None&lt;/code&gt;, indicating the newlines translated so far. Depending on the implementation and the initial constructor flags, this may not be available.</source>
          <target state="translated">지금까지 번역 된 개행을 나타내는 문자열, 문자열 튜플 또는 &lt;code&gt;None&lt;/code&gt; 구현 및 초기 생성자 플래그에 따라 사용하지 못할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="640b082b179874e919a8b0a281dc24c559b3db92" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ConnectionError&quot;&gt;&lt;code&gt;ConnectionError&lt;/code&gt;&lt;/a&gt;, raised when a connection attempt is aborted by the peer. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ECONNABORTED&lt;/code&gt;.</source>
          <target state="translated">피어에 의해 연결 시도가 중단 될 때 발생 하는 &lt;a href=&quot;#ConnectionError&quot;&gt; &lt;code&gt;ConnectionError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 . &lt;code&gt;errno&lt;/code&gt; &lt;code&gt;ECONNABORTED&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="73ab5331b6ae01254fe730d043adfa27dda78b4e" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ConnectionError&quot;&gt;&lt;code&gt;ConnectionError&lt;/code&gt;&lt;/a&gt;, raised when a connection attempt is refused by the peer. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ECONNREFUSED&lt;/code&gt;.</source>
          <target state="translated">피어가 연결 시도를 거부 할 때 발생 하는 &lt;a href=&quot;#ConnectionError&quot;&gt; &lt;code&gt;ConnectionError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 . &lt;code&gt;errno&lt;/code&gt; &lt;code&gt;ECONNREFUSED&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="6d2239001f6127e695694a9bd00552f746a9eda6" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ConnectionError&quot;&gt;&lt;code&gt;ConnectionError&lt;/code&gt;&lt;/a&gt;, raised when a connection is reset by the peer. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;ECONNRESET&lt;/code&gt;.</source>
          <target state="translated">피어가 연결을 재설정 할 때 발생 하는 &lt;a href=&quot;#ConnectionError&quot;&gt; &lt;code&gt;ConnectionError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 . &lt;code&gt;errno&lt;/code&gt; &lt;code&gt;ECONNRESET&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="9a2e5d9d43ce04ad29c4fb17b5325b927b2b9208" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ConnectionError&quot;&gt;&lt;code&gt;ConnectionError&lt;/code&gt;&lt;/a&gt;, raised when trying to write on a pipe while the other end has been closed, or trying to write on a socket which has been shutdown for writing. Corresponds to &lt;code&gt;errno&lt;/code&gt;&lt;code&gt;EPIPE&lt;/code&gt; and &lt;code&gt;ESHUTDOWN&lt;/code&gt;.</source>
          <target state="translated">다른 쪽 끝을 닫은 상태에서 파이프에 쓰거나 쓰기를 위해 종료 된 소켓에 쓰려고 할 때 발생 하는 &lt;a href=&quot;#ConnectionError&quot;&gt; &lt;code&gt;ConnectionError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 . &lt;code&gt;errno&lt;/code&gt; &lt;code&gt;EPIPE&lt;/code&gt; 및 &lt;code&gt;ESHUTDOWN&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="53f3c34abc78d78f328fd281b87705eb6751b9a7" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; which is raised by &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; when a module could not be located. It is also raised when &lt;code&gt;None&lt;/code&gt; is found in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모듈을 찾을 수 없을 때 &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; 의해 발생하는 &lt;a href=&quot;#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 . &lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;None&lt;/code&gt; 이 발견 될 때도 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="a59a5d6423ad78bd4b05a33b780bbf6dd737d4c1" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; which is raised by &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; when a module could not be located. It is also raised when &lt;code&gt;None&lt;/code&gt; is found in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A subclass of &lt;a href=&quot;#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt; which is raised by &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; when a module could not be located. It is also raised when &lt;code&gt;None&lt;/code&gt; is found in &lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="222e66c57cf05e2439f0427e11ca5b7487c3506e" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; that raises an exception as soon as a failure is encountered. If an unexpected exception occurs, an &lt;a href=&quot;#doctest.UnexpectedException&quot;&gt;&lt;code&gt;UnexpectedException&lt;/code&gt;&lt;/a&gt; exception is raised, containing the test, the example, and the original exception. If the output doesn&amp;rsquo;t match, then a &lt;a href=&quot;#doctest.DocTestFailure&quot;&gt;&lt;code&gt;DocTestFailure&lt;/code&gt;&lt;/a&gt; exception is raised, containing the test, the example, and the actual output.</source>
          <target state="translated">실패가 발생하자마자 예외를 발생시키는 &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 . &lt;a href=&quot;#doctest.UnexpectedException&quot;&gt; &lt;code&gt;UnexpectedException&lt;/code&gt; &lt;/a&gt; 예외가 발생하면 테스트, 예제 및 원래 예외가 포함 된 UnexpectedException 예외가 발생합니다. 출력이 일치하지 않으면 테스트, 예제 및 실제 출력을 포함 하는 &lt;a href=&quot;#doctest.DocTestFailure&quot;&gt; &lt;code&gt;DocTestFailure&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="561f15934e1163b4237e193715adac94cb87c0b1" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.headerregistry.AddressHeader&quot;&gt;&lt;code&gt;AddressHeader&lt;/code&gt;&lt;/a&gt; that adds one additional attribute:</source>
          <target state="translated">하나의 추가 속성을 추가 하는 &lt;a href=&quot;#email.headerregistry.AddressHeader&quot;&gt; &lt;code&gt;AddressHeader&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 :</target>
        </trans-unit>
        <trans-unit id="7f781581e0829cb990d0f16eb16dbe041508d842" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.base.MIMEBase&quot;&gt;&lt;code&gt;MIMEBase&lt;/code&gt;&lt;/a&gt;, this is an intermediate base class for MIME messages that are &lt;em&gt;multipart&lt;/em&gt;. Optional &lt;em&gt;_subtype&lt;/em&gt; defaults to &lt;em&gt;mixed&lt;/em&gt;, but can be used to specify the subtype of the message. A &lt;em&gt;Content-Type&lt;/em&gt; header of &lt;em&gt;multipart/_subtype&lt;/em&gt; will be added to the message object. A &lt;em&gt;MIME-Version&lt;/em&gt; header will also be added.</source>
          <target state="translated">&lt;a href=&quot;#email.mime.base.MIMEBase&quot;&gt; &lt;code&gt;MIMEBase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 . &lt;em&gt;멀티 파트 인&lt;/em&gt; MIME 메시지의 중간 기본 클래스입니다 . 선택적 &lt;em&gt;_subtype의&lt;/em&gt; 기본값은 &lt;em&gt;mixed&lt;/em&gt; 이지만 메시지의 하위 유형을 지정하는 데 사용할 수 있습니다. &lt;em&gt;multipart / _subtype&lt;/em&gt; 의 &lt;em&gt;Content-Type&lt;/em&gt; 헤더가 메시지 객체에 추가됩니다. &lt;em&gt;MIME-버전&lt;/em&gt; 헤더도 추가됩니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ee4824f272606ae6cc4c809fb2df5c25368575e8" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.base.MIMEBase&quot;&gt;&lt;code&gt;MIMEBase&lt;/code&gt;&lt;/a&gt;, this is an intermediate base class for MIME messages that are not &lt;em&gt;multipart&lt;/em&gt;. The primary purpose of this class is to prevent the use of the &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt;&lt;code&gt;attach()&lt;/code&gt;&lt;/a&gt; method, which only makes sense for &lt;em&gt;multipart&lt;/em&gt; messages. If &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt;&lt;code&gt;attach()&lt;/code&gt;&lt;/a&gt; is called, a &lt;a href=&quot;email.errors#email.errors.MultipartConversionError&quot;&gt;&lt;code&gt;MultipartConversionError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">&lt;a href=&quot;#email.mime.base.MIMEBase&quot;&gt; &lt;code&gt;MIMEBase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 . &lt;em&gt;멀티 파트&lt;/em&gt; 가 아닌 MIME 메시지의 중간 기본 클래스입니다 . 이 클래스의 주요 목적은 &lt;em&gt;멀티 파트&lt;/em&gt; 메시지 에만 적합한 &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt; &lt;code&gt;attach()&lt;/code&gt; &lt;/a&gt; 메소드 의 사용을 막는 것입니다 . 경우 &lt;a href=&quot;email.compat32-message#email.message.Message.attach&quot;&gt; &lt;code&gt;attach()&lt;/code&gt; &lt;/a&gt; 라고하는 &lt;a href=&quot;email.errors#email.errors.MultipartConversionError&quot;&gt; &lt;code&gt;MultipartConversionError&lt;/code&gt; 의&lt;/a&gt; 예외가 발생합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f7a8f392a3412438a51c8f0c737eaf469cd9a645" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt;&lt;code&gt;MIMENonMultipart&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#email.mime.application.MIMEApplication&quot;&gt;&lt;code&gt;MIMEApplication&lt;/code&gt;&lt;/a&gt; class is used to represent MIME message objects of major type &lt;em&gt;application&lt;/em&gt;. &lt;em&gt;_data&lt;/em&gt; is a string containing the raw byte data. Optional &lt;em&gt;_subtype&lt;/em&gt; specifies the MIME subtype and defaults to &lt;em&gt;octet-stream&lt;/em&gt;.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt; &lt;code&gt;MIMENonMultipart&lt;/code&gt; 은&lt;/a&gt; 의 &lt;a href=&quot;#email.mime.application.MIMEApplication&quot;&gt; &lt;code&gt;MIMEApplication&lt;/code&gt; 의&lt;/a&gt; 클래스는 주요 타입의 MIME 메시지 개체를 표시하는 데 사용되는 &lt;em&gt;응용 프로그램을&lt;/em&gt; . &lt;em&gt;_data&lt;/em&gt; 는 원시 바이트 데이터를 포함하는 문자열입니다. 선택적 &lt;em&gt;_subtype&lt;/em&gt; 은 MIME 하위 유형을 지정하고 기본값은 &lt;em&gt;octet-stream&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8853b524d3a42ef795bb232d70818c082d728737" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt;&lt;code&gt;MIMENonMultipart&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#email.mime.audio.MIMEAudio&quot;&gt;&lt;code&gt;MIMEAudio&lt;/code&gt;&lt;/a&gt; class is used to create MIME message objects of major type &lt;em&gt;audio&lt;/em&gt;. &lt;em&gt;_audiodata&lt;/em&gt; is a string containing the raw audio data. If this data can be decoded by the standard Python module &lt;a href=&quot;sndhdr#module-sndhdr&quot;&gt;&lt;code&gt;sndhdr&lt;/code&gt;&lt;/a&gt;, then the subtype will be automatically included in the &lt;em&gt;Content-Type&lt;/em&gt; header. Otherwise you can explicitly specify the audio subtype via the &lt;em&gt;_subtype&lt;/em&gt; argument. If the minor type could not be guessed and &lt;em&gt;_subtype&lt;/em&gt; was not given, then &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt; &lt;code&gt;MIMENonMultipart&lt;/code&gt; 은&lt;/a&gt; 의 &lt;a href=&quot;#email.mime.audio.MIMEAudio&quot;&gt; &lt;code&gt;MIMEAudio&lt;/code&gt; 의&lt;/a&gt; 클래스는 주요 타입의 MIME 메시지 개체를 만드는 데 사용되는 &lt;em&gt;오디오를&lt;/em&gt; . &lt;em&gt;_audiodata&lt;/em&gt; 는 원시 오디오 데이터를 포함하는 문자열입니다. 이 데이터를 표준 Python 모듈 &lt;a href=&quot;sndhdr#module-sndhdr&quot;&gt; &lt;code&gt;sndhdr&lt;/code&gt; &lt;/a&gt; 로 디코딩 할 수 있으면 하위 유형이 자동으로 &lt;em&gt;Content-Type&lt;/em&gt; 헤더에 포함됩니다. 그렇지 않으면 &lt;em&gt;_subtype&lt;/em&gt; 인수 를 통해 오디오 하위 유형을 명시 적으로 지정할 수 있습니다 . 부 유형을 추측 할 수없고 &lt;em&gt;_subtype&lt;/em&gt; 을 제공하지 않으면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a76383a2a93d9794da9b01ccefe023baee5d2eb5" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt;&lt;code&gt;MIMENonMultipart&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#email.mime.image.MIMEImage&quot;&gt;&lt;code&gt;MIMEImage&lt;/code&gt;&lt;/a&gt; class is used to create MIME message objects of major type &lt;em&gt;image&lt;/em&gt;. &lt;em&gt;_imagedata&lt;/em&gt; is a string containing the raw image data. If this data can be decoded by the standard Python module &lt;a href=&quot;imghdr#module-imghdr&quot;&gt;&lt;code&gt;imghdr&lt;/code&gt;&lt;/a&gt;, then the subtype will be automatically included in the &lt;em&gt;Content-Type&lt;/em&gt; header. Otherwise you can explicitly specify the image subtype via the &lt;em&gt;_subtype&lt;/em&gt; argument. If the minor type could not be guessed and &lt;em&gt;_subtype&lt;/em&gt; was not given, then &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt; &lt;code&gt;MIMENonMultipart&lt;/code&gt; 은&lt;/a&gt; 의 &lt;a href=&quot;#email.mime.image.MIMEImage&quot;&gt; &lt;code&gt;MIMEImage&lt;/code&gt; 의&lt;/a&gt; 클래스는 주요 타입의 MIME 메시지 개체를 만드는 데 사용되는 &lt;em&gt;이미지를&lt;/em&gt; . &lt;em&gt;_imagedata&lt;/em&gt; 는 원시 이미지 데이터를 포함하는 문자열입니다. 이 데이터를 표준 Python 모듈 &lt;a href=&quot;imghdr#module-imghdr&quot;&gt; &lt;code&gt;imghdr&lt;/code&gt; &lt;/a&gt; 로 디코딩 할 수 있으면 하위 유형이 자동으로 &lt;em&gt;Content-Type&lt;/em&gt; 헤더에 포함됩니다. 그렇지 않으면 &lt;em&gt;_subtype&lt;/em&gt; 인수 를 통해 이미지 하위 유형을 명시 적으로 지정할 수 있습니다 . 부 유형을 추측 할 수없고 &lt;em&gt;_subtype&lt;/em&gt; 을 제공하지 않으면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a9234b5d253e940123aa4c9a0f87439815009184" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt;&lt;code&gt;MIMENonMultipart&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#email.mime.message.MIMEMessage&quot;&gt;&lt;code&gt;MIMEMessage&lt;/code&gt;&lt;/a&gt; class is used to create MIME objects of main type &lt;em&gt;message&lt;/em&gt;. &lt;em&gt;_msg&lt;/em&gt; is used as the payload, and must be an instance of class &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; (or a subclass thereof), otherwise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt; &lt;code&gt;MIMENonMultipart&lt;/code&gt; 는&lt;/a&gt; 의 &lt;a href=&quot;#email.mime.message.MIMEMessage&quot;&gt; &lt;code&gt;MIMEMessage&lt;/code&gt; &lt;/a&gt; 클래스는 MIME 메인 타입의 객체를 생성하는 데 사용됩니다 &lt;em&gt;메시지&lt;/em&gt; . &lt;em&gt;_msg&lt;/em&gt; 는 페이로드로 사용되며 &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 클래스 (또는 그 서브 클래스) 의 인스턴스 여야합니다 . 그렇지 않으면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3161c9179debd4f7d6df131db3c1815ed54800e8" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt;&lt;code&gt;MIMENonMultipart&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#email.mime.text.MIMEText&quot;&gt;&lt;code&gt;MIMEText&lt;/code&gt;&lt;/a&gt; class is used to create MIME objects of major type &lt;em&gt;text&lt;/em&gt;. &lt;em&gt;_text&lt;/em&gt; is the string for the payload. &lt;em&gt;_subtype&lt;/em&gt; is the minor type and defaults to &lt;em&gt;plain&lt;/em&gt;. &lt;em&gt;_charset&lt;/em&gt; is the character set of the text and is passed as an argument to the &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt;&lt;code&gt;MIMENonMultipart&lt;/code&gt;&lt;/a&gt; constructor; it defaults to &lt;code&gt;us-ascii&lt;/code&gt; if the string contains only &lt;code&gt;ascii&lt;/code&gt; code points, and &lt;code&gt;utf-8&lt;/code&gt; otherwise. The &lt;em&gt;_charset&lt;/em&gt; parameter accepts either a string or a &lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt; &lt;code&gt;MIMENonMultipart&lt;/code&gt; 은&lt;/a&gt; 의 &lt;a href=&quot;#email.mime.text.MIMEText&quot;&gt; &lt;code&gt;MIMEText&lt;/code&gt; &lt;/a&gt; 클래스는 주요 형식의 MIME 개체를 만드는 데 사용되는 &lt;em&gt;텍스트를&lt;/em&gt; . &lt;em&gt;_text&lt;/em&gt; 는 페이로드의 문자열입니다. &lt;em&gt;_subtype&lt;/em&gt; 은 부 유형이며 기본값은 &lt;em&gt;plain&lt;/em&gt; 입니다. &lt;em&gt;_charset&lt;/em&gt; 은 텍스트의 문자 집합이며 &lt;a href=&quot;#email.mime.nonmultipart.MIMENonMultipart&quot;&gt; &lt;code&gt;MIMENonMultipart&lt;/code&gt; &lt;/a&gt; 생성자에 인수로 전달됩니다 . 문자열에 &lt;code&gt;ascii&lt;/code&gt; 코드 포인트 만 포함되어 있으면 기본값은 &lt;code&gt;us-ascii&lt;/code&gt; 이고, 그렇지 않으면 &lt;code&gt;utf-8&lt;/code&gt; 입니다. &lt;em&gt;_charset의&lt;/em&gt; 매개 변수는 문자열 또는 중 하나를 받아들이는 &lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt; 인스턴스를.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="43b95a03a2324568afb62decc2f58316824119be" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#http.client.HTTPConnection&quot;&gt;&lt;code&gt;HTTPConnection&lt;/code&gt;&lt;/a&gt; that uses SSL for communication with secure servers. Default port is &lt;code&gt;443&lt;/code&gt;. If &lt;em&gt;context&lt;/em&gt; is specified, it must be a &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; instance describing the various SSL options.</source>
          <target state="translated">보안 서버와의 통신에 SSL을 사용 하는 &lt;a href=&quot;#http.client.HTTPConnection&quot;&gt; &lt;code&gt;HTTPConnection&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 . 기본 포트는 &lt;code&gt;443&lt;/code&gt; 입니다. 경우 &lt;em&gt;컨텍스트가&lt;/em&gt; 지정되어, 그것은해야합니다 &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt; &lt;code&gt;ssl.SSLContext&lt;/code&gt; 의&lt;/a&gt; 다양한 SSL 옵션을 설명하는 예.</target>
        </trans-unit>
        <trans-unit id="7bf644cd1aad145a3aa43ee0250025e9df724f72" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#http.client.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;, raised if a port is given and is either non-numeric or empty.</source>
          <target state="translated">포트가 제공되고 숫자가 아니거나 비어있는 경우 발생하는 &lt;a href=&quot;#http.client.HTTPException&quot;&gt; &lt;code&gt;HTTPException&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="0aab6c24af3dcd985f80023bae2e93b04faff96c" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#http.client.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#http.client.HTTPException&quot;&gt; &lt;code&gt;HTTPException&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="aa5fefe570554e4bd2277e00d553af0f206f08c0" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#http.client.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;. Raised if a server responds with a HTTP status code that we don&amp;rsquo;t understand.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#http.client.HTTPException&quot;&gt; &lt;code&gt;HTTPException&lt;/code&gt; &lt;/a&gt; . 서버가 이해하지 못하는 HTTP 상태 코드로 응답하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="666637de6b4e0b5e5cc67cbbb892eef7e1644dad" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#http.client.HTTPException&quot;&gt;&lt;code&gt;HTTPException&lt;/code&gt;&lt;/a&gt;. Raised if an excessively long line is received in the HTTP protocol from the server.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#http.client.HTTPException&quot;&gt; &lt;code&gt;HTTPException&lt;/code&gt; &lt;/a&gt; . 서버에서 HTTP 프로토콜로 너무 긴 줄이 수신되면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f44a0b9f57e50137cb8e15ddcd43d03893edce26" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#http.client.ImproperConnectionState&quot;&gt;&lt;code&gt;ImproperConnectionState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#http.client.ImproperConnectionState&quot;&gt; &lt;code&gt;ImproperConnectionState&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="29db90dbf583d1a27b500d573a47d6c5b0ee449d" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; for mailboxes in Babyl format. Parameter &lt;em&gt;factory&lt;/em&gt; is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If &lt;em&gt;factory&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; is used as the default message representation. If &lt;em&gt;create&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the mailbox is created if it does not exist.</source>
          <target state="translated">Babyl 형식 의 &lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt; 대한 사서함 의 하위 클래스입니다 . 매개 변수 &lt;em&gt;팩토리&lt;/em&gt; 는 파일과 유사한 메시지 표현 (이진 모드에서 열린 것처럼 작동 함)을 허용하고 사용자 정의 표현을 반환하는 호출 가능한 객체입니다. 경우 &lt;em&gt;공장&lt;/em&gt; 입니다 &lt;code&gt;None&lt;/code&gt; , &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt; &lt;code&gt;BabylMessage&lt;/code&gt; 는&lt;/a&gt; 기본 메시지의 표현으로 사용된다. 경우 &lt;em&gt;만들&lt;/em&gt; 것입니다 &lt;code&gt;True&lt;/code&gt; 존재하지 않는 경우, 사서함이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="5af2e2732c7181fc36ed83d98f0af92e460cbe98" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; for mailboxes in MH format. Parameter &lt;em&gt;factory&lt;/em&gt; is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If &lt;em&gt;factory&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#mailbox.MHMessage&quot;&gt;&lt;code&gt;MHMessage&lt;/code&gt;&lt;/a&gt; is used as the default message representation. If &lt;em&gt;create&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the mailbox is created if it does not exist.</source>
          <target state="translated">MH 형식 의 &lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt; 대한 사서함 의 하위 클래스입니다 . 매개 변수 &lt;em&gt;팩토리&lt;/em&gt; 는 파일과 유사한 메시지 표현 (이진 모드에서 열린 것처럼 작동 함)을 허용하고 사용자 정의 표현을 반환하는 호출 가능한 객체입니다. 경우 &lt;em&gt;공장&lt;/em&gt; 입니다 &lt;code&gt;None&lt;/code&gt; , &lt;a href=&quot;#mailbox.MHMessage&quot;&gt; &lt;code&gt;MHMessage&lt;/code&gt; 는&lt;/a&gt; 기본 메시지의 표현으로 사용된다. 경우 &lt;em&gt;만들&lt;/em&gt; 것입니다 &lt;code&gt;True&lt;/code&gt; 존재하지 않는 경우, 사서함이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="0fd3ef2fae5b24d18c1176dd0499befaf845516b" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; for mailboxes in MMDF format. Parameter &lt;em&gt;factory&lt;/em&gt; is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If &lt;em&gt;factory&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt;&lt;code&gt;MMDFMessage&lt;/code&gt;&lt;/a&gt; is used as the default message representation. If &lt;em&gt;create&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the mailbox is created if it does not exist.</source>
          <target state="translated">MMDF 형식 의 &lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt; 대한 사서함 의 하위 클래스입니다 . 매개 변수 &lt;em&gt;팩토리&lt;/em&gt; 는 파일과 유사한 메시지 표현 (이진 모드에서 열린 것처럼 작동 함)을 허용하고 사용자 정의 표현을 반환하는 호출 가능한 객체입니다. 경우 &lt;em&gt;공장&lt;/em&gt; 입니다 &lt;code&gt;None&lt;/code&gt; , &lt;a href=&quot;#mailbox.MMDFMessage&quot;&gt; &lt;code&gt;MMDFMessage&lt;/code&gt; 는&lt;/a&gt; 기본 메시지의 표현으로 사용된다. 경우 &lt;em&gt;만들&lt;/em&gt; 것입니다 &lt;code&gt;True&lt;/code&gt; 존재하지 않는 경우, 사서함이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="92230b6718b8395f043cbdcaeb410fb38bf56f9f" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; for mailboxes in Maildir format. Parameter &lt;em&gt;factory&lt;/em&gt; is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If &lt;em&gt;factory&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt;&lt;code&gt;MaildirMessage&lt;/code&gt;&lt;/a&gt; is used as the default message representation. If &lt;em&gt;create&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the mailbox is created if it does not exist.</source>
          <target state="translated">Maildir 형식 의 &lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt; 용 사서함 의 하위 클래스입니다 . 매개 변수 &lt;em&gt;팩토리&lt;/em&gt; 는 파일과 유사한 메시지 표현 (이진 모드에서 열린 것처럼 작동 함)을 허용하고 사용자 정의 표현을 반환하는 호출 가능한 객체입니다. 경우 &lt;em&gt;공장&lt;/em&gt; 입니다 &lt;code&gt;None&lt;/code&gt; , &lt;a href=&quot;#mailbox.MaildirMessage&quot;&gt; &lt;code&gt;MaildirMessage&lt;/code&gt; 는&lt;/a&gt; 기본 메시지의 표현으로 사용된다. 경우 &lt;em&gt;만들&lt;/em&gt; 것입니다 &lt;code&gt;True&lt;/code&gt; 존재하지 않는 경우, 사서함이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="b1e96b979a7ade703d26a2f68e58f4220e80f537" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; for mailboxes in mbox format. Parameter &lt;em&gt;factory&lt;/em&gt; is a callable object that accepts a file-like message representation (which behaves as if opened in binary mode) and returns a custom representation. If &lt;em&gt;factory&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; is used as the default message representation. If &lt;em&gt;create&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the mailbox is created if it does not exist.</source>
          <target state="translated">mbox 형식 의 &lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt; 용 사서함 의 하위 클래스입니다 . 매개 변수 &lt;em&gt;팩토리&lt;/em&gt; 는 파일과 유사한 메시지 표현 (이진 모드에서 열린 것처럼 작동 함)을 허용하고 사용자 정의 표현을 반환하는 호출 가능한 객체입니다. 경우 &lt;em&gt;공장&lt;/em&gt; 입니다 &lt;code&gt;None&lt;/code&gt; , &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt; &lt;code&gt;mboxMessage&lt;/code&gt; 는&lt;/a&gt; 기본 메시지의 표현으로 사용된다. 경우 &lt;em&gt;만들&lt;/em&gt; 것입니다 &lt;code&gt;True&lt;/code&gt; 존재하지 않는 경우, 사서함이 만들어집니다.</target>
        </trans-unit>
        <trans-unit id="e91afc87f4c90d053ee511b94bc062b870505830" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#multiprocessing.managers.BaseManager&quot;&gt;&lt;code&gt;BaseManager&lt;/code&gt;&lt;/a&gt; which can be used for the synchronization of processes. Objects of this type are returned by &lt;code&gt;multiprocessing.Manager()&lt;/code&gt;.</source>
          <target state="translated">프로세스 동기화에 사용할 수있는 &lt;a href=&quot;#multiprocessing.managers.BaseManager&quot;&gt; &lt;code&gt;BaseManager&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 . 이 유형의 객체는 &lt;code&gt;multiprocessing.Manager()&lt;/code&gt; 의해 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="0baa77c5c3f931861b3c6e87c3ba1ac461b5a0fb" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pathlib.PurePosixPath&quot;&gt;&lt;code&gt;PurePosixPath&lt;/code&gt;&lt;/a&gt;, this class represents concrete non-Windows filesystem paths:</source>
          <target state="translated">&lt;a href=&quot;#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#pathlib.PurePosixPath&quot;&gt; &lt;code&gt;PurePosixPath&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 이 클래스는 구체적인 비 Windows 파일 시스템 경로를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bbae0175d81f10a8b69cdca941e43651b40075fb" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt;&lt;code&gt;PureWindowsPath&lt;/code&gt;&lt;/a&gt;, this class represents concrete Windows filesystem paths:</source>
          <target state="translated">&lt;a href=&quot;#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt; &lt;code&gt;PureWindowsPath&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 이 클래스는 구체적인 Windows 파일 시스템 경로를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="787d261e83a0bc5621effc394a2c8c29f282bc76" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#pathlib.PurePath&quot;&gt;&lt;code&gt;PurePath&lt;/code&gt;&lt;/a&gt;, this class represents concrete paths of the system&amp;rsquo;s path flavour (instantiating it creates either a &lt;a href=&quot;#pathlib.PosixPath&quot;&gt;&lt;code&gt;PosixPath&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;#pathlib.WindowsPath&quot;&gt;&lt;code&gt;WindowsPath&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">&lt;a href=&quot;#pathlib.PurePath&quot;&gt; &lt;code&gt;PurePath&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 이 클래스는 시스템 경로의 구체적인 경로를 나타냅니다 ( &lt;a href=&quot;#pathlib.PosixPath&quot;&gt; &lt;code&gt;PosixPath&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#pathlib.WindowsPath&quot;&gt; &lt;code&gt;WindowsPath&lt;/code&gt; 를&lt;/a&gt; 생성 함을 나타냄 ).</target>
        </trans-unit>
        <trans-unit id="8ddea0c5102be5b806c8ed7af1f7b85163c67c30" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#pathlib.PurePath&quot;&gt;&lt;code&gt;PurePath&lt;/code&gt;&lt;/a&gt;, this path flavour represents Windows filesystem paths:</source>
          <target state="translated">&lt;a href=&quot;#pathlib.PurePath&quot;&gt; &lt;code&gt;PurePath&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 이 경로는 Windows 파일 시스템 경로를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9b2ac853b70b451f55dd69ebee77fa87ae957266" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#pathlib.PurePath&quot;&gt;&lt;code&gt;PurePath&lt;/code&gt;&lt;/a&gt;, this path flavour represents non-Windows filesystem paths:</source>
          <target state="translated">&lt;a href=&quot;#pathlib.PurePath&quot;&gt; &lt;code&gt;PurePath&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 이 경로는 Windows 이외의 파일 시스템 경로를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="da15c413fbd27cd71985084c119de705e2d3928d" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#shelve.Shelf&quot;&gt;&lt;code&gt;Shelf&lt;/code&gt;&lt;/a&gt; which accepts a &lt;em&gt;filename&lt;/em&gt; instead of a dict-like object. The underlying file will be opened using &lt;a href=&quot;dbm#dbm.open&quot;&gt;&lt;code&gt;dbm.open()&lt;/code&gt;&lt;/a&gt;. By default, the file will be created and opened for both read and write. The optional &lt;em&gt;flag&lt;/em&gt; parameter has the same interpretation as for the &lt;a href=&quot;#shelve.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function. The optional &lt;em&gt;protocol&lt;/em&gt; and &lt;em&gt;writeback&lt;/em&gt; parameters have the same interpretation as for the &lt;a href=&quot;#shelve.Shelf&quot;&gt;&lt;code&gt;Shelf&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;#shelve.Shelf&quot;&gt; &lt;code&gt;Shelf&lt;/code&gt; &lt;/a&gt; 받아 &lt;em&gt;파일 이름&lt;/em&gt; 대신 DICT 같은 개체의를. 기본 파일은 &lt;a href=&quot;dbm#dbm.open&quot;&gt; &lt;code&gt;dbm.open()&lt;/code&gt; &lt;/a&gt; 사용하여 열립니다 . 기본적으로 파일은 읽고 쓸 수 있도록 만들어지고 열립니다. 선택적 &lt;em&gt;플래그&lt;/em&gt; 매개 변수는 &lt;a href=&quot;#shelve.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 함수 와 동일한 해석을 갖습니다 . 선택적 &lt;em&gt;프로토콜&lt;/em&gt; 및 &lt;em&gt;쓰기 저장&lt;/em&gt; 매개 변수는 &lt;a href=&quot;#shelve.Shelf&quot;&gt; &lt;code&gt;Shelf&lt;/code&gt; &lt;/a&gt; 클래스 와 동일한 해석을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="c0aeb538670652c08b0771e1a034d7b75ae61240" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#shelve.Shelf&quot;&gt;&lt;code&gt;Shelf&lt;/code&gt;&lt;/a&gt; which exposes &lt;code&gt;first()&lt;/code&gt;, &lt;code&gt;next()&lt;/code&gt;, &lt;code&gt;previous()&lt;/code&gt;, &lt;code&gt;last()&lt;/code&gt; and &lt;code&gt;set_location()&lt;/code&gt; which are available in the third-party &lt;code&gt;bsddb&lt;/code&gt; module from &lt;a href=&quot;https://www.jcea.es/programacion/pybsddb.htm&quot;&gt;pybsddb&lt;/a&gt; but not in other database modules. The &lt;em&gt;dict&lt;/em&gt; object passed to the constructor must support those methods. This is generally accomplished by calling one of &lt;code&gt;bsddb.hashopen()&lt;/code&gt;, &lt;code&gt;bsddb.btopen()&lt;/code&gt; or &lt;code&gt;bsddb.rnopen()&lt;/code&gt;. The optional &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;writeback&lt;/em&gt;, and &lt;em&gt;keyencoding&lt;/em&gt; parameters have the same interpretation as for the &lt;a href=&quot;#shelve.Shelf&quot;&gt;&lt;code&gt;Shelf&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;set_location()&lt;/code&gt; 타사 &lt;code&gt;bsddb&lt;/code&gt; 모듈에서 &lt;a href=&quot;https://www.jcea.es/programacion/pybsddb.htm&quot;&gt;사용할 수&lt;/a&gt; 있지만 다른 데이터베이스 모듈 에서는 사용할 수없는 &lt;code&gt;first()&lt;/code&gt; , &lt;code&gt;next()&lt;/code&gt; , &lt;code&gt;previous()&lt;/code&gt; , &lt;code&gt;last()&lt;/code&gt; 및 set_location () 을 노출시키는 &lt;a href=&quot;#shelve.Shelf&quot;&gt; &lt;code&gt;Shelf&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 . 생성자에 전달 된 &lt;em&gt;dict&lt;/em&gt; 오브젝트는 해당 메소드를 지원해야합니다. 이것은 일반적으로 &lt;code&gt;bsddb.hashopen()&lt;/code&gt; , &lt;code&gt;bsddb.btopen()&lt;/code&gt; 또는 &lt;code&gt;bsddb.rnopen()&lt;/code&gt; 중 하나를 호출하여 수행됩니다 . 선택적 &lt;em&gt;프로토콜&lt;/em&gt; , &lt;em&gt;쓰기 저장&lt;/em&gt; 및 키 &lt;em&gt;인코딩&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;매개 변수는 &lt;a href=&quot;#shelve.Shelf&quot;&gt; &lt;code&gt;Shelf&lt;/code&gt; &lt;/a&gt; 클래스 와 동일한 해석을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="b5a6a5a8e4ac7a866442add5f93595a47b720d39" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; raised by a &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking SSL socket&lt;/a&gt; when trying to read or write data, but more data needs to be received on the underlying TCP transport before the request can be fulfilled.</source>
          <target state="translated">데이터를 읽거나 쓰려고 할 때 &lt;a href=&quot;#ssl-nonblocking&quot;&gt;비 차단 SSL 소켓에서&lt;/a&gt; 발생하는 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 이지만 요청을 이행하기 전에 기본 TCP 전송에서 더 많은 데이터를 수신해야합니다.</target>
        </trans-unit>
        <trans-unit id="a7a0502de90f1d3ad7d32c2d3885ee66ffde0a82" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; raised by a &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking SSL socket&lt;/a&gt; when trying to read or write data, but more data needs to be sent on the underlying TCP transport before the request can be fulfilled.</source>
          <target state="translated">데이터를 읽거나 쓰려고 할 때 &lt;a href=&quot;#ssl-nonblocking&quot;&gt;비 차단 SSL 소켓에서&lt;/a&gt; 발생하는 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 이지만 요청을 이행하기 전에 기본 TCP 전송에서 더 많은 데이터를 보내야합니다.</target>
        </trans-unit>
        <trans-unit id="deb9b7c208558761cda50ba30ba55c811e5e68df" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; raised when a system error was encountered while trying to fulfill an operation on a SSL socket. Unfortunately, there is no easy way to inspect the original errno number.</source>
          <target state="translated">SSL 소켓에서 작업을 수행하는 중 시스템 오류가 발생하면 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스 가 발생했습니다. 불행히도, 원래 errno 번호를 쉽게 점검 할 수있는 방법은 없습니다.</target>
        </trans-unit>
        <trans-unit id="cdaf83ff67869c648bea2aee22f2a5a8799d1318" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; raised when certificate validation has failed.</source>
          <target state="translated">인증서 유효성 검사에 실패하면 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="6d26e7b54f4342d502899a32b1ea75ad227410a2" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; raised when the SSL connection has been terminated abruptly. Generally, you shouldn&amp;rsquo;t try to reuse the underlying transport when this error is encountered.</source>
          <target state="translated">SSL 연결이 갑자기 종료되면 발생 하는 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 . 일반적으로이 오류가 발생하면 기본 전송을 재사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="cca4beee81e582bd9b978d6e698d6235139ca79b" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; raised when trying to read or write and the SSL connection has been closed cleanly. Note that this doesn&amp;rsquo;t mean that the underlying transport (read TCP) has been closed.</source>
          <target state="translated">읽거나 쓰려고 할 때 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스가 발생했으며 SSL 연결이 완전히 닫혔습니다. 이것은 기본 전송 (TCP 읽기)이 종료되었음을 의미하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="4aa94e1172b28188f84a19de0a4d78757ffac0c8" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;collections.abc#collections.abc.MutableMapping&quot;&gt;&lt;code&gt;collections.abc.MutableMapping&lt;/code&gt;&lt;/a&gt; which stores pickled values in the &lt;em&gt;dict&lt;/em&gt; object.</source>
          <target state="translated">&lt;em&gt;dict&lt;/em&gt; 객체 에 절인 값을 저장 하는 &lt;a href=&quot;collections.abc#collections.abc.MutableMapping&quot;&gt; &lt;code&gt;collections.abc.MutableMapping&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4c2ed8fc70c7865de761f0bbee19c244ff6cb7f7" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;enum#enum.IntEnum&quot;&gt;&lt;code&gt;enum.IntEnum&lt;/code&gt;&lt;/a&gt; that defines a set of HTTP status codes, reason phrases and long descriptions written in English.</source>
          <target state="translated">영어로 작성된 HTTP 상태 코드, 이유 문구 및 자세한 설명을 정의하는 &lt;a href=&quot;enum#enum.IntEnum&quot;&gt; &lt;code&gt;enum.IntEnum&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="13c7263f4c0b3d090a1a151575ff100ac91b1329" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;exceptions#ConnectionResetError&quot;&gt;&lt;code&gt;ConnectionResetError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.client.BadStatusLine&quot;&gt;&lt;code&gt;BadStatusLine&lt;/code&gt;&lt;/a&gt;. Raised by &lt;a href=&quot;#http.client.HTTPConnection.getresponse&quot;&gt;&lt;code&gt;HTTPConnection.getresponse()&lt;/code&gt;&lt;/a&gt; when the attempt to read the response results in no data read from the connection, indicating that the remote end has closed the connection.</source>
          <target state="translated">&lt;a href=&quot;exceptions#ConnectionResetError&quot;&gt; &lt;code&gt;ConnectionResetError&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#http.client.BadStatusLine&quot;&gt; &lt;code&gt;BadStatusLine&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 . 응답을 읽으려고 시도 할 때 연결에서 데이터를 읽지 않아 원격 끝이 연결을 닫았 음을 나타내는 경우 &lt;a href=&quot;#http.client.HTTPConnection.getresponse&quot;&gt; &lt;code&gt;HTTPConnection.getresponse()&lt;/code&gt; &lt;/a&gt; 의해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ce340e4f4e3ab133da20d657ffb3540199636ab2" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;exceptions#Exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">의 서브 클래스 &lt;a href=&quot;exceptions#Exception&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="edea97afc9f60e0d9cc4a419734e1ca06a2daac2" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, this exception is raised for address-related errors by &lt;a href=&quot;#socket.getaddrinfo&quot;&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socket.getnameinfo&quot;&gt;&lt;code&gt;getnameinfo()&lt;/code&gt;&lt;/a&gt;. The accompanying value is a pair &lt;code&gt;(error, string)&lt;/code&gt; representing an error returned by a library call. &lt;em&gt;string&lt;/em&gt; represents the description of &lt;em&gt;error&lt;/em&gt;, as returned by the &lt;code&gt;gai_strerror()&lt;/code&gt; C function. The numeric &lt;em&gt;error&lt;/em&gt; value will match one of the &lt;code&gt;EAI_*&lt;/code&gt; constants defined in this module.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 .이 예외는 &lt;a href=&quot;#socket.getaddrinfo&quot;&gt; &lt;code&gt;getaddrinfo()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#socket.getnameinfo&quot;&gt; &lt;code&gt;getnameinfo()&lt;/code&gt; &lt;/a&gt; 의한 주소 관련 오류에 대해 발생합니다 . 동반되는 값은 라이브러리 호출에 의해 리턴 된 오류를 나타내는 쌍 &lt;code&gt;(error, string)&lt;/code&gt; 입니다. &lt;em&gt;string&lt;/em&gt; 은 &lt;code&gt;gai_strerror()&lt;/code&gt; C 함수가 반환 한 &lt;em&gt;error에&lt;/em&gt; 대한 설명을 나타냅니다 . 숫자 &lt;em&gt;오류&lt;/em&gt; 값은 이 모듈에 정의 된 &lt;code&gt;EAI_*&lt;/code&gt; 상수 중 하나와 일치 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="460111a7ddfae31cdbd537e0ced5a7ef202f5c3b" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, this exception is raised for address-related errors, i.e. for functions that use &lt;em&gt;h_errno&lt;/em&gt; in the POSIX C API, including &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt;&lt;code&gt;gethostbyname_ex()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socket.gethostbyaddr&quot;&gt;&lt;code&gt;gethostbyaddr()&lt;/code&gt;&lt;/a&gt;. The accompanying value is a pair &lt;code&gt;(h_errno, string)&lt;/code&gt; representing an error returned by a library call. &lt;em&gt;h_errno&lt;/em&gt; is a numeric value, while &lt;em&gt;string&lt;/em&gt; represents the description of &lt;em&gt;h_errno&lt;/em&gt;, as returned by the &lt;code&gt;hstrerror()&lt;/code&gt; C function.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스 인 이 예외는 주소 관련 오류, 즉 &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt; &lt;code&gt;gethostbyname_ex()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#socket.gethostbyaddr&quot;&gt; &lt;code&gt;gethostbyaddr()&lt;/code&gt; &lt;/a&gt; 포함하여 POSIX C API에서 &lt;em&gt;h_errno&lt;/em&gt; 를 사용하는 함수에 대해 발생합니다 . 동반되는 값은 라이브러리 호출에 의해 리턴 된 오류를 나타내는 쌍 &lt;code&gt;(h_errno, string)&lt;/code&gt; 입니다. &lt;em&gt;h_errno&lt;/em&gt; 는 숫자 값이고 &lt;em&gt;string&lt;/em&gt; 은 &lt;code&gt;hstrerror()&lt;/code&gt; C 함수에 의해 리턴되는 &lt;em&gt;h_errno에&lt;/em&gt; 대한 설명을 나타냅니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="16ac8179359652826137cc9c838ce6bab8ea4d95" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, this exception is raised when a timeout occurs on a socket which has had timeouts enabled via a prior call to &lt;a href=&quot;#socket.socket.settimeout&quot;&gt;&lt;code&gt;settimeout()&lt;/code&gt;&lt;/a&gt; (or implicitly through &lt;a href=&quot;#socket.setdefaulttimeout&quot;&gt;&lt;code&gt;setdefaulttimeout()&lt;/code&gt;&lt;/a&gt;). The accompanying value is a string whose value is currently always &amp;ldquo;timed out&amp;rdquo;.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .이 예외는 &lt;a href=&quot;#socket.socket.settimeout&quot;&gt; &lt;code&gt;settimeout()&lt;/code&gt; &lt;/a&gt; 대한 이전 호출을 통해 (또는 내재적으로 &lt;a href=&quot;#socket.setdefaulttimeout&quot;&gt; &lt;code&gt;setdefaulttimeout()&lt;/code&gt; &lt;/a&gt; 통해 ) 시간 초과가 활성화 된 소켓에서 시간 초과가 발생하면 발생합니다 . 수반되는 값은 현재 값이 항상 &quot;시간 초과&quot;된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="f96ed9be119db1899cc5804240cbdf4a813fc7bf" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="cb5ef21196f6e1a2c30359a542bb0586ed94ec11" translate="yes" xml:space="preserve">
          <source>A subclass of &lt;a href=&quot;multiprocessing#multiprocessing.managers.BaseManager&quot;&gt;&lt;code&gt;BaseManager&lt;/code&gt;&lt;/a&gt; which can be used for the management of shared memory blocks across processes.</source>
          <target state="translated">프로세스 전체에서 공유 메모리 블록을 관리하는 데 사용할 수있는 &lt;a href=&quot;multiprocessing#multiprocessing.managers.BaseManager&quot;&gt; &lt;code&gt;BaseManager&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="6493ef637d82780c7758013117e237d093568cc0" translate="yes" xml:space="preserve">
          <source>A subclass of FileDialog that creates a dialog window for selecting a destination file.</source>
          <target state="translated">A subclass of FileDialog that creates a dialog window for selecting a destination file.</target>
        </trans-unit>
        <trans-unit id="12a73368b564b85b1d416719ea8db78e560d0d54" translate="yes" xml:space="preserve">
          <source>A subclass of FileDialog that creates a dialog window for selecting an existing file.</source>
          <target state="translated">A subclass of FileDialog that creates a dialog window for selecting an existing file.</target>
        </trans-unit>
        <trans-unit id="c0a3fd34e2e67d00717d8e3c38e690bba5eea283" translate="yes" xml:space="preserve">
          <source>A subclass of the &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;. Subclasses of &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;mailbox.Message&lt;/code&gt;&lt;/a&gt; add mailbox-format-specific state and behavior.</source>
          <target state="translated">&lt;a href=&quot;email.message#module-email.message&quot;&gt; &lt;code&gt;email.message&lt;/code&gt; &lt;/a&gt; 모듈 &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 . 의 서브 클래스 &lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;mailbox.Message&lt;/code&gt; 는&lt;/a&gt; 사서함 형식 별 상태와 동작을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cc4659320a48a69121a5fa046a90e0829d536e4" translate="yes" xml:space="preserve">
          <source>A subclass of the built-in &lt;a href=&quot;functions#classmethod&quot;&gt;&lt;code&gt;classmethod()&lt;/code&gt;&lt;/a&gt;, indicating an abstract classmethod. Otherwise it is similar to &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">내장 &lt;a href=&quot;functions#classmethod&quot;&gt; &lt;code&gt;classmethod()&lt;/code&gt; &lt;/a&gt; 의 서브 클래스로, 추상 클래스 메소드 를 나타냅니다. 그렇지 않으면 &lt;a href=&quot;#abc.abstractmethod&quot;&gt; &lt;code&gt;abstractmethod()&lt;/code&gt; &lt;/a&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="dd7d67ccc4aa0cf39a782287b771bae713632ff3" translate="yes" xml:space="preserve">
          <source>A subclass of the built-in &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property()&lt;/code&gt;&lt;/a&gt;, indicating an abstract property.</source>
          <target state="translated">내장 &lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property()&lt;/code&gt; &lt;/a&gt; 의 하위 클래스로, 추상 속성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8a21eea0a51db85132800cd0d541c1dd336c3b80" translate="yes" xml:space="preserve">
          <source>A subclass of the built-in &lt;a href=&quot;functions#staticmethod&quot;&gt;&lt;code&gt;staticmethod()&lt;/code&gt;&lt;/a&gt;, indicating an abstract staticmethod. Otherwise it is similar to &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">내장 &lt;a href=&quot;functions#staticmethod&quot;&gt; &lt;code&gt;staticmethod()&lt;/code&gt; &lt;/a&gt; 의 서브 클래스로, 추상적 인 staticmethod를 나타냅니다. 그렇지 않으면 &lt;a href=&quot;#abc.abstractmethod&quot;&gt; &lt;code&gt;abstractmethod()&lt;/code&gt; &lt;/a&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="d14fd32086bd068d574c0f68fc7877ff0baa0946" translate="yes" xml:space="preserve">
          <source>A subclass of tuple, holding &lt;code&gt;(columns, lines)&lt;/code&gt; of the terminal window size.</source>
          <target state="translated">터미널 창 크기를 보유하는 튜플의 서브 클래스입니다 &lt;code&gt;(columns, lines)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4860690382eeaedd49f5d6a726f9be2286133ce4" translate="yes" xml:space="preserve">
          <source>A subscript, such as &lt;code&gt;l[1]&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt; is the subscripted object (usually sequence or mapping). &lt;code&gt;slice&lt;/code&gt; is an index, slice or key. It can be a &lt;a href=&quot;#ast.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; and contain a &lt;a href=&quot;#ast.Slice&quot;&gt;&lt;code&gt;Slice&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;ctx&lt;/code&gt; is &lt;a href=&quot;#ast.Load&quot;&gt;&lt;code&gt;Load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ast.Store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ast.Del&quot;&gt;&lt;code&gt;Del&lt;/code&gt;&lt;/a&gt; according to the action performed with the subscript.</source>
          <target state="translated">A subscript, such as &lt;code&gt;l[1]&lt;/code&gt; . &lt;code&gt;value&lt;/code&gt; is the subscripted object (usually sequence or mapping). &lt;code&gt;slice&lt;/code&gt; is an index, slice or key. It can be a &lt;a href=&quot;#ast.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt; and contain a &lt;a href=&quot;#ast.Slice&quot;&gt; &lt;code&gt;Slice&lt;/code&gt; &lt;/a&gt;. &lt;code&gt;ctx&lt;/code&gt; is &lt;a href=&quot;#ast.Load&quot;&gt; &lt;code&gt;Load&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#ast.Store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#ast.Del&quot;&gt; &lt;code&gt;Del&lt;/code&gt; &lt;/a&gt; according to the action performed with the subscript.</target>
        </trans-unit>
        <trans-unit id="40c70036708915cb7b3b17bae711c17136488656" translate="yes" xml:space="preserve">
          <source>A suitable launcher can be as simple as the following:</source>
          <target state="translated">적합한 런처는 다음과 같이 간단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="901d66f5c7da60879c19407e1a1bc52a3389e89b" translate="yes" xml:space="preserve">
          <source>A symbolic name from the list of columns option.</source>
          <target state="translated">열 목록 옵션의 기호 이름.</target>
        </trans-unit>
        <trans-unit id="0aafdc4544b71b33d0122eb7e7355cb89beef590" translate="yes" xml:space="preserve">
          <source>A synchronized wrapper will have two methods in addition to those of the object it wraps: &lt;code&gt;get_obj()&lt;/code&gt; returns the wrapped object and &lt;code&gt;get_lock()&lt;/code&gt; returns the lock object used for synchronization.</source>
          <target state="translated">동기화 된 랩퍼에는 랩핑 된 오브젝트 외에 두 가지 메소드가 있습니다. &lt;code&gt;get_obj()&lt;/code&gt; 는 랩핑 된 오브젝트를 리턴하고 &lt;code&gt;get_lock()&lt;/code&gt; 은 동기화에 사용 된 잠금 오브젝트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="82cc7a6bf5190503a986720cfd373d63486c2b10" translate="yes" xml:space="preserve">
          <source>A synonym for &lt;a href=&quot;#wave.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, maintained for backwards compatibility.</source>
          <target state="translated">이전 버전과의 호환성을 위해 유지 되는 &lt;a href=&quot;#wave.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 의 동의어입니다 .</target>
        </trans-unit>
        <trans-unit id="02478b669d3bd5d812ec4b032b7561d572de56eb" translate="yes" xml:space="preserve">
          <source>A test case can contain any number of subtest declarations, and they can be arbitrarily nested.</source>
          <target state="translated">테스트 케이스에는 여러 개의 하위 테스트 선언이 포함될 수 있으며 임의로 중첩 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f92c13e79833a8c6766ec8c4d07e210948282e0b" translate="yes" xml:space="preserve">
          <source>A test case instance is created for each method named by &lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt;&lt;code&gt;getTestCaseNames()&lt;/code&gt;&lt;/a&gt;. By default these are the method names beginning with &lt;code&gt;test&lt;/code&gt;. If &lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt;&lt;code&gt;getTestCaseNames()&lt;/code&gt;&lt;/a&gt; returns no methods, but the &lt;code&gt;runTest()&lt;/code&gt; method is implemented, a single test case is created for that method instead.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt; &lt;code&gt;getTestCaseNames()&lt;/code&gt; &lt;/a&gt; 명명 된 각 메소드에 대해 테스트 케이스 인스턴스가 작성됩니다 . 기본적으로 이들은 &lt;code&gt;test&lt;/code&gt; 로 시작하는 메소드 이름 입니다. 경우 &lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt; &lt;code&gt;getTestCaseNames()&lt;/code&gt; &lt;/a&gt; 어떤 방법을 반환하지만 &lt;code&gt;runTest()&lt;/code&gt; 메소드가 구현되고, 하나의 테스트 케이스는 대신이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="d317a4bfcfe51b412aa9411ee48602a7d363041a" translate="yes" xml:space="preserve">
          <source>A testcase is created by subclassing &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. The three individual tests are defined with methods whose names start with the letters &lt;code&gt;test&lt;/code&gt;. This naming convention informs the test runner about which methods represent tests.</source>
          <target state="translated">테스트 케이스는 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 를 서브 클래 싱함으로써 생성됩니다 . 세 개의 개별 테스트는 이름이 &lt;code&gt;test&lt;/code&gt; 로 시작하는 메소드로 정의됩니다 . 이 명명 규칙은 테스트 실행자에게 테스트를 나타내는 방법에 대해 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="2decea86572530cb3394fd2790ced4c85040cd18" translate="yes" xml:space="preserve">
          <source>A text stream using an in-memory text buffer. It inherits &lt;a href=&quot;#io.TextIOBase&quot;&gt;&lt;code&gt;TextIOBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A text stream using an in-memory text buffer. It inherits &lt;a href=&quot;#io.TextIOBase&quot;&gt; &lt;code&gt;TextIOBase&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8d3b705f209b67c83fbd25ef3e195fdfb5b667ff" translate="yes" xml:space="preserve">
          <source>A thread can be &lt;a href=&quot;#threading.Thread.join&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;ed many times.</source>
          <target state="translated">스레드는 여러 번 &lt;a href=&quot;#threading.Thread.join&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt; 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d19f0702d7d43132fd514f9840815fdd1c4aabff" translate="yes" xml:space="preserve">
          <source>A thread can be flagged as a &amp;ldquo;daemon thread&amp;rdquo;. The significance of this flag is that the entire Python program exits when only daemon threads are left. The initial value is inherited from the creating thread. The flag can be set through the &lt;a href=&quot;#threading.Thread.daemon&quot;&gt;&lt;code&gt;daemon&lt;/code&gt;&lt;/a&gt; property or the &lt;em&gt;daemon&lt;/em&gt; constructor argument.</source>
          <target state="translated">스레드는 &quot;데몬 스레드&quot;로 표시 될 수 있습니다. 이 플래그의 의미는 데몬 스레드 만 남으면 전체 Python 프로그램이 종료된다는 것입니다. 초기 값은 작성 스레드에서 상속됩니다. &lt;a href=&quot;#threading.Thread.daemon&quot;&gt; &lt;code&gt;daemon&lt;/code&gt; &lt;/a&gt; 특성 또는 &lt;em&gt;디먼&lt;/em&gt; 생성자 인수를 통해 플래그를 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="25906c1adefe9dc6f1af3c23b40a096b717f95c3" translate="yes" xml:space="preserve">
          <source>A thread has a name. The name can be passed to the constructor, and read or changed through the &lt;a href=&quot;#threading.Thread.name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">스레드 이름이 있습니다. 이름은 생성자에게 전달되고 &lt;a href=&quot;#threading.Thread.name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 속성을 통해 읽거나 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="59162599aeff6bb14e020356fd4da69fe0944c86" translate="yes" xml:space="preserve">
          <source>A thread-safe variant of &lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;call_soon()&lt;/code&gt;&lt;/a&gt;. Must be used to schedule callbacks &lt;em&gt;from another thread&lt;/em&gt;.</source>
          <target state="translated">의 thread 세이프 변형 &lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt; &lt;code&gt;call_soon()&lt;/code&gt; &lt;/a&gt; . &lt;em&gt;다른 스레드에서&lt;/em&gt; 콜백을 예약하는 데 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0a0f8b6355c0ad572860ca714f63148feabbb464" translate="yes" xml:space="preserve">
          <source>A thread-safe variant of &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon&quot;&gt; &lt;code&gt;loop.call_soon()&lt;/code&gt; &lt;/a&gt; 의 스레드 안전 변형 .</target>
        </trans-unit>
        <trans-unit id="34a103e628ad77f1efb119c2d023c898bf9e7287" translate="yes" xml:space="preserve">
          <source>A timeout can be specified for communication with the SMTP server using the &lt;em&gt;timeout&lt;/em&gt; argument.</source>
          <target state="translated">&lt;em&gt;timeout&lt;/em&gt; 인수를 사용하여 SMTP 서버와 통신하기위한 시간 초과를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4820ed4e11203578021e36242c9640f748f2edc" translate="yes" xml:space="preserve">
          <source>A topological order is a linear ordering of the vertices in a graph such that for every directed edge u -&amp;gt; v from vertex u to vertex v, vertex u comes before vertex v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this example, a topological ordering is just a valid sequence for the tasks. A complete topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph.</source>
          <target state="translated">A topological order is a linear ordering of the vertices in a graph such that for every directed edge u -&amp;gt; v from vertex u to vertex v, vertex u comes before vertex v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this example, a topological ordering is just a valid sequence for the tasks. A complete topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph.</target>
        </trans-unit>
        <trans-unit id="f1fce953788cab29b4471f03f788eeca368e6c43" translate="yes" xml:space="preserve">
          <source>A traceback contains at least &lt;code&gt;1&lt;/code&gt; frame. If the &lt;code&gt;tracemalloc&lt;/code&gt; module failed to get a frame, the filename &lt;code&gt;&quot;&amp;lt;unknown&amp;gt;&quot;&lt;/code&gt; at line number &lt;code&gt;0&lt;/code&gt; is used.</source>
          <target state="translated">역 추적에는 최소 &lt;code&gt;1&lt;/code&gt; 개의 프레임이 포함됩니다 . &lt;code&gt;tracemalloc&lt;/code&gt; 모듈이 프레임을 가져 오지 못한 경우 줄 번호 &lt;code&gt;0&lt;/code&gt; 의 &lt;code&gt;&quot;&amp;lt;unknown&amp;gt;&quot;&lt;/code&gt; 파일 이름 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bc2646e6288204043218b877ba68e1e8e8475d31" translate="yes" xml:space="preserve">
          <source>A trailing newline is stripped from the output. The exit code for the command can be interpreted as the return code of subprocess. Example:</source>
          <target state="translated">후행 줄 바꿈이 출력에서 ​​제거됩니다. 명령의 종료 코드는 서브 프로세스의 리턴 코드로 해석 될 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="c3c80f1590f49a12cd65c7f83bc6002d79bb9851" translate="yes" xml:space="preserve">
          <source>A transport for datagram (UDP) connections.</source>
          <target state="translated">데이터 그램 (UDP) 연결을위한 전송입니다.</target>
        </trans-unit>
        <trans-unit id="0d926f53bff6bd280c6eee22bfcab053408f0198" translate="yes" xml:space="preserve">
          <source>A tuple &lt;code&gt;(interface, )&lt;/code&gt; is used for the &lt;a href=&quot;#socket.AF_CAN&quot;&gt;&lt;code&gt;AF_CAN&lt;/code&gt;&lt;/a&gt; address family, where &lt;em&gt;interface&lt;/em&gt; is a string representing a network interface name like &lt;code&gt;'can0'&lt;/code&gt;. The network interface name &lt;code&gt;''&lt;/code&gt; can be used to receive packets from all network interfaces of this family.</source>
          <target state="translated">튜플 &lt;code&gt;(interface, )&lt;/code&gt; 은 &lt;a href=&quot;#socket.AF_CAN&quot;&gt; &lt;code&gt;AF_CAN&lt;/code&gt; &lt;/a&gt; 주소 패밀리에 사용되며, 여기서 &lt;em&gt;interface&lt;/em&gt; 는 &lt;code&gt;'can0'&lt;/code&gt; 과 같은 네트워크 인터페이스 이름을 나타내는 문자열 입니다. 네트워크 인터페이스 이름 &lt;code&gt;''&lt;/code&gt; 을 사용하여이 제품군의 모든 네트워크 인터페이스에서 패킷을 수신 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5988ddff5a11a83cbde32c03ed0f71ddbc332862" translate="yes" xml:space="preserve">
          <source>A tuple containing information about the unexpected exception, as returned by &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;sys#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt; 반환 한 예기치 않은 예외에 대한 정보가 포함 된 튜플 입니다.</target>
        </trans-unit>
        <trans-unit id="b602eebfd1018b4f9a83a4accab01ad6f39d7ed0" translate="yes" xml:space="preserve">
          <source>A tuple containing the exceptions that can be raised by each of the supported modules, with a unique exception also named &lt;a href=&quot;#dbm.error&quot;&gt;&lt;code&gt;dbm.error&lt;/code&gt;&lt;/a&gt; as the first item &amp;mdash; the latter is used when &lt;a href=&quot;#dbm.error&quot;&gt;&lt;code&gt;dbm.error&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">지원되는 각 모듈에서 발생할 수있는 예외가 포함 된 튜플이며 , 첫 번째 항목으로 &lt;a href=&quot;#dbm.error&quot;&gt; &lt;code&gt;dbm.error&lt;/code&gt; &lt;/a&gt; 라는 고유 예외가 있습니다 . 후자는 &lt;a href=&quot;#dbm.error&quot;&gt; &lt;code&gt;dbm.error&lt;/code&gt; &lt;/a&gt; 가 발생할 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="611ad0213bdcbdea64e69b9c88ff862172a42e89" translate="yes" xml:space="preserve">
          <source>A tuple containing the five components of the version number: &lt;em&gt;major&lt;/em&gt;, &lt;em&gt;minor&lt;/em&gt;, &lt;em&gt;micro&lt;/em&gt;, &lt;em&gt;releaselevel&lt;/em&gt;, and &lt;em&gt;serial&lt;/em&gt;. All values except &lt;em&gt;releaselevel&lt;/em&gt; are integers; the release level is &lt;code&gt;'alpha'&lt;/code&gt;, &lt;code&gt;'beta'&lt;/code&gt;, &lt;code&gt;'candidate'&lt;/code&gt;, or &lt;code&gt;'final'&lt;/code&gt;. The &lt;code&gt;version_info&lt;/code&gt; value corresponding to the Python version 2.0 is &lt;code&gt;(2, 0, 0, 'final', 0)&lt;/code&gt;. The components can also be accessed by name, so &lt;code&gt;sys.version_info[0]&lt;/code&gt; is equivalent to &lt;code&gt;sys.version_info.major&lt;/code&gt; and so on.</source>
          <target state="translated">버전 번호의 다섯 가지 구성 요소 인 &lt;em&gt;major&lt;/em&gt; , &lt;em&gt;minor&lt;/em&gt; , &lt;em&gt;micro&lt;/em&gt; , &lt;em&gt;releaselevel&lt;/em&gt; 및 &lt;em&gt;serial을&lt;/em&gt; 포함하는 튜플 . &lt;em&gt;releaselevel&lt;/em&gt; 을 제외한 모든 값 은 정수입니다. 릴리스 레벨은 &lt;code&gt;'alpha'&lt;/code&gt; , &lt;code&gt;'beta'&lt;/code&gt; , &lt;code&gt;'candidate'&lt;/code&gt; 또는 &lt;code&gt;'final'&lt;/code&gt; 입니다. &lt;code&gt;version_info&lt;/code&gt; 파이썬 버전 2.0에 대응하는 값이다 &lt;code&gt;(2, 0, 0, 'final', 0)&lt;/code&gt; . 구성 요소는 이름으로도 액세스 할 수 있으므로 &lt;code&gt;sys.version_info[0]&lt;/code&gt; 은 &lt;code&gt;sys.version_info.major&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="284eb8c9c8f7dcb877a69beef6d52a20881200c4" translate="yes" xml:space="preserve">
          <source>A tuple giving access to the path&amp;rsquo;s various components:</source>
          <target state="translated">경로의 다양한 구성 요소에 액세스 할 수있는 튜플 :</target>
        </trans-unit>
        <trans-unit id="9d0fd49c7efc6a159b31facd122d6218b19f8941" translate="yes" xml:space="preserve">
          <source>A tuple of &lt;a href=&quot;#email.headerregistry.Address&quot;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/a&gt; objects encoding all of the individual addresses from the header value. If the header value contains any groups, the individual addresses from the group are included in the list at the point where the group occurs in the value (that is, the list of addresses is &amp;ldquo;flattened&amp;rdquo; into a one dimensional list).</source>
          <target state="translated">헤더 값에서 모든 개별 주소를 인코딩 하는 &lt;a href=&quot;#email.headerregistry.Address&quot;&gt; &lt;code&gt;Address&lt;/code&gt; &lt;/a&gt; 객체 의 튜플 . 머리글 값에 그룹이 포함되어 있으면 그룹의 개별 주소가 그룹이 값에서 발생하는 지점의 목록에 포함됩니다 (즉, 주소 목록이 1 차원 목록으로 &quot;평평하게&quot;됩니다).</target>
        </trans-unit>
        <trans-unit id="9de5ed9ccb63c492c379c7b0498153b757927080" translate="yes" xml:space="preserve">
          <source>A tuple of &lt;a href=&quot;#email.headerregistry.Group&quot;&gt;&lt;code&gt;Group&lt;/code&gt;&lt;/a&gt; objects encoding the addresses and groups found in the header value. Addresses that are not part of a group are represented in this list as single-address &lt;code&gt;Groups&lt;/code&gt; whose &lt;a href=&quot;#email.headerregistry.Group.display_name&quot;&gt;&lt;code&gt;display_name&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">헤더 값에서 찾은 주소와 그룹을 인코딩하는 &lt;a href=&quot;#email.headerregistry.Group&quot;&gt; &lt;code&gt;Group&lt;/code&gt; &lt;/a&gt; 객체 의 튜플 . 그룹의 일부가 아닌 주소는이 목록에서 &lt;a href=&quot;#email.headerregistry.Group.display_name&quot;&gt; &lt;code&gt;display_name&lt;/code&gt; &lt;/a&gt; 이 &lt;code&gt;None&lt;/code&gt; 인 단일 주소 &lt;code&gt;Groups&lt;/code&gt; 으로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="a0a272709593e4d4502563708916d90098e672e4" translate="yes" xml:space="preserve">
          <source>A tuple of &lt;code&gt;(transport, protocol)&lt;/code&gt; is returned on success.</source>
          <target state="translated">성공 &lt;code&gt;(transport, protocol)&lt;/code&gt; 튜플 (전송, 프로토콜) 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f2a76b51f711aaca7e10b1eba70b8efe797baf47" translate="yes" xml:space="preserve">
          <source>A tuple of &lt;code&gt;HeaderDefect&lt;/code&gt; instances reporting any RFC compliance problems found during parsing. The email package tries to be complete about detecting compliance issues. See the &lt;a href=&quot;email.errors#module-email.errors&quot;&gt;&lt;code&gt;errors&lt;/code&gt;&lt;/a&gt; module for a discussion of the types of defects that may be reported.</source>
          <target state="translated">구문 분석 중 발견 된 RFC 준수 문제를보고하는 &lt;code&gt;HeaderDefect&lt;/code&gt; 인스턴스 튜플 . 전자 메일 패키지는 규정 준수 문제 감지에 대해 완료하려고합니다. 보고 될 수있는 결함 유형에 대한 설명은 &lt;a href=&quot;email.errors#module-email.errors&quot;&gt; &lt;code&gt;errors&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f5bfec0411b160b69074925d29affee86ab7b1b4" translate="yes" xml:space="preserve">
          <source>A tuple of &lt;em&gt;line&lt;/em&gt;, &lt;em&gt;column&lt;/em&gt; numbers, specifying where the error occurred.</source>
          <target state="translated">오류가 발생한 위치를 지정하는 &lt;em&gt;행&lt;/em&gt; , &lt;em&gt;열&lt;/em&gt; 번호 의 튜플 .</target>
        </trans-unit>
        <trans-unit id="ac45160c628e9f17de9bd53926058b4dfa965527" translate="yes" xml:space="preserve">
          <source>A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument.</source>
          <target state="translated">호출 가능한 객체에 대한 인수의 튜플. callable이 인수를 허용하지 않으면 빈 튜플을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="5cd0c1bc3b7430c4dc325b20146a15127227c071" translate="yes" xml:space="preserve">
          <source>A tuple of five integers representing version information about the OpenSSL library:</source>
          <target state="translated">OpenSSL 라이브러리에 대한 버전 정보를 나타내는 5 개의 정수 튜플 :</target>
        </trans-unit>
        <trans-unit id="5235a223fb55cc8323b6b967311c62c5e4afc221" translate="yes" xml:space="preserve">
          <source>A tuple of integers the length of &lt;a href=&quot;#memoryview.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt; giving the shape of the memory as an N-dimensional array.</source>
          <target state="translated">&lt;a href=&quot;#memoryview.ndim&quot;&gt; &lt;code&gt;ndim&lt;/code&gt; &lt;/a&gt; 길이의 정수 튜플은 메모리의 모양을 N 차원 배열로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f5e4a5c5c0f872da9ef405f61b1402fa7e827fcc" translate="yes" xml:space="preserve">
          <source>A tuple of integers the length of &lt;a href=&quot;#memoryview.ndim&quot;&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/a&gt; giving the size in bytes to access each element for each dimension of the array.</source>
          <target state="translated">배열의 각 차원에 대한 각 요소에 액세스하기 위해 바이트 단위의 크기를 바이트 단위로 제공하는 &lt;a href=&quot;#memoryview.ndim&quot;&gt; &lt;code&gt;ndim&lt;/code&gt; &lt;/a&gt; 길이의 정수 튜플입니다 .</target>
        </trans-unit>
        <trans-unit id="bbbbae5b5f1f31e838ab89e5ab798870e6998659" translate="yes" xml:space="preserve">
          <source>A tuple of positional arguments that aren&amp;rsquo;t bound to any other parameter. This corresponds to a &lt;code&gt;*args&lt;/code&gt; parameter in a Python function definition.</source>
          <target state="translated">다른 매개 변수에 바인딩되지 않은 위치 인수의 튜플. 이는 Python 함수 정의 의 &lt;code&gt;*args&lt;/code&gt; 매개 변수에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="e767d2abb81b29680f05c61c2dc0881ec7e2895d" translate="yes" xml:space="preserve">
          <source>A tuple of positional arguments values. Dynamically computed from the &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">위치 인수 값의 튜플. &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt; 속성 에서 동적으로 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="2bddcba1f84eefe95b64f3637762f321fa506285" translate="yes" xml:space="preserve">
          <source>A tuple of strings giving the names of all modules that are compiled into this Python interpreter. (This information is not available in any other way &amp;mdash; &lt;code&gt;modules.keys()&lt;/code&gt; only lists the imported modules.)</source>
          <target state="translated">이 파이썬 인터프리터로 컴파일 된 모든 모듈의 이름을 제공하는 문자열 튜플. 이 정보는 다른 방법으로는 사용할 수 없습니다 &lt;code&gt;modules.keys()&lt;/code&gt; 는 가져온 모듈 만 나열합니다.</target>
        </trans-unit>
        <trans-unit id="9dc0c4f970d8a2e2a6e7e05921a6b50db400ca2a" translate="yes" xml:space="preserve">
          <source>A tuple of the six integer fields of the UUID, which are also available as six individual attributes and two derived attributes:</source>
          <target state="translated">6 개의 개별 속성과 2 개의 파생 속성으로도 사용 가능한 UUID의 6 개의 정수 필드 튜플 :</target>
        </trans-unit>
        <trans-unit id="7d7281d5a4d1699e2ef4b4d043daa76d806c7e3b" translate="yes" xml:space="preserve">
          <source>A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. If no DST timezone is defined, the second string should not be used. See note below.</source>
          <target state="translated">두 문자열의 튜플 : 첫 번째는 DST가 아닌 로컬 시간대의 이름이고 두 번째는 로컬 DST 시간대의 이름입니다. DST 시간대가 정의되어 있지 않으면 두 번째 문자열을 사용하지 않아야합니다. 아래 참고 사항을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5785afa7d9d72a80a132775f931cd3296a1c396a" translate="yes" xml:space="preserve">
          <source>A two-dimensional vector class, used as a helper class for implementing turtle graphics. May be useful for turtle graphics programs too. Derived from tuple, so a vector is a tuple!</source>
          <target state="translated">거북이 그래픽을 구현하기위한 도우미 클래스로 사용되는 2 차원 벡터 클래스입니다. 거북이 그래픽 프로그램에도 유용 할 수 있습니다. 튜플에서 파생되므로 벡터는 튜플입니다!</target>
        </trans-unit>
        <trans-unit id="5c09a3ba1317d479a9a224b9ce88a6cea59653d7" translate="yes" xml:space="preserve">
          <source>A two-tuple of an address description and a netmask, where the address description is either a string, a 128-bits integer, a 16-bytes packed integer, or an existing IPv6Address object; and the netmask is an integer representing the prefix length.</source>
          <target state="translated">주소 설명과 넷 마스크의 두 튜플. 여기서 주소 설명은 문자열, 128 비트 정수, 16 바이트 팩 정수 또는 기존 IPv6Address 객체입니다. 넷 마스크는 프리픽스 길이를 나타내는 정수이다.</target>
        </trans-unit>
        <trans-unit id="8a17dcdfe6ec4d61527a00e964fb8c81625f4064" translate="yes" xml:space="preserve">
          <source>A two-tuple of an address description and a netmask, where the address description is either a string, a 32-bits integer, a 4-bytes packed integer, or an existing IPv4Address object; and the netmask is either an integer representing the prefix length (e.g. &lt;code&gt;24&lt;/code&gt;) or a string representing the prefix mask (e.g. &lt;code&gt;255.255.255.0&lt;/code&gt;).</source>
          <target state="translated">주소 설명과 넷 마스크의 두 튜플. 여기서 주소 설명은 문자열, 32 비트 정수, 4 바이트 팩형 정수 또는 기존 IPv4Address 객체입니다. 넷 마스크는 프리픽스 길이 (예를 들어 &lt;code&gt;24&lt;/code&gt; )를 나타내는 정수 또는 프리픽스 마스크를 나타내는 문자열 (예 : &lt;code&gt;255.255.255.0&lt;/code&gt; )이다.</target>
        </trans-unit>
        <trans-unit id="a97458b6662cbcaa16e108bc6f87a69c86c44cfc" translate="yes" xml:space="preserve">
          <source>A type alias is defined by assigning the type to the alias. In this example, &lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;List[float]&lt;/code&gt; will be treated as interchangeable synonyms:</source>
          <target state="translated">유형 별명은 유형을 별명에 지정하여 정의됩니다. 이 예에서 &lt;code&gt;Vector&lt;/code&gt; 와 &lt;code&gt;List[float]&lt;/code&gt; 는 상호 교환 가능한 동의어로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="1afc84eb225f100301cf0747d0efc62cca04b7cd" translate="yes" xml:space="preserve">
          <source>A type alias is defined by assigning the type to the alias. In this example, &lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;list[float]&lt;/code&gt; will be treated as interchangeable synonyms:</source>
          <target state="translated">A type alias is defined by assigning the type to the alias. In this example, &lt;code&gt;Vector&lt;/code&gt; and &lt;code&gt;list[float]&lt;/code&gt; will be treated as interchangeable synonyms:</target>
        </trans-unit>
        <trans-unit id="0bdcf50c828c6a26d172ef24bc0143735e308ea7" translate="yes" xml:space="preserve">
          <source>A type that can be used to indicate to type checkers that the corresponding variable or function parameter has a value equivalent to the provided literal (or one of several literals). For example:</source>
          <target state="translated">해당 변수 또는 함수 매개 변수에 제공된 리터럴 (또는 여러 리터럴 중 하나)과 동등한 값이 있음을 체커에 표시하는 데 사용할 수있는 유형입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="edd3251f3e927f6b3ff1cbaf77caeabe432e7f67" translate="yes" xml:space="preserve">
          <source>A type that can register with &lt;a href=&quot;#multiprocessing.managers.SyncManager&quot;&gt;&lt;code&gt;SyncManager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.managers.SyncManager&quot;&gt; &lt;code&gt;SyncManager&lt;/code&gt; 에&lt;/a&gt; 등록 할 수있는 유형입니다 .</target>
        </trans-unit>
        <trans-unit id="4291e70537f9369ba206ac4e2ba915fe2d69ed5e" translate="yes" xml:space="preserve">
          <source>A type, introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0593&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;PEP 593&lt;/strong&gt;&lt;/a&gt; (&lt;code&gt;Flexible function and variable
annotations&lt;/code&gt;), to decorate existing types with context-specific metadata (possibly multiple pieces of it, as &lt;code&gt;Annotated&lt;/code&gt; is variadic). Specifically, a type &lt;code&gt;T&lt;/code&gt; can be annotated with metadata &lt;code&gt;x&lt;/code&gt; via the typehint &lt;code&gt;Annotated[T, x]&lt;/code&gt;. This metadata can be used for either static analysis or at runtime. If a library (or tool) encounters a typehint &lt;code&gt;Annotated[T, x]&lt;/code&gt; and has no special logic for metadata &lt;code&gt;x&lt;/code&gt;, it should ignore it and simply treat the type as &lt;code&gt;T&lt;/code&gt;. Unlike the &lt;code&gt;no_type_check&lt;/code&gt; functionality that currently exists in the &lt;code&gt;typing&lt;/code&gt; module which completely disables typechecking annotations on a function or a class, the &lt;code&gt;Annotated&lt;/code&gt; type allows for both static typechecking of &lt;code&gt;T&lt;/code&gt; (e.g., via mypy or Pyre, which can safely ignore &lt;code&gt;x&lt;/code&gt;) together with runtime access to &lt;code&gt;x&lt;/code&gt; within a specific application.</source>
          <target state="translated">A type, introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0593&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;PEP 593&lt;/strong&gt;&lt;/a&gt; ( &lt;code&gt;Flexible function and variable annotations&lt;/code&gt; ), to decorate existing types with context-specific metadata (possibly multiple pieces of it, as &lt;code&gt;Annotated&lt;/code&gt; is variadic). Specifically, a type &lt;code&gt;T&lt;/code&gt; can be annotated with metadata &lt;code&gt;x&lt;/code&gt; via the typehint &lt;code&gt;Annotated[T, x]&lt;/code&gt; . This metadata can be used for either static analysis or at runtime. If a library (or tool) encounters a typehint &lt;code&gt;Annotated[T, x]&lt;/code&gt; and has no special logic for metadata &lt;code&gt;x&lt;/code&gt; , it should ignore it and simply treat the type as &lt;code&gt;T&lt;/code&gt; . Unlike the &lt;code&gt;no_type_check&lt;/code&gt; functionality that currently exists in the &lt;code&gt;typing&lt;/code&gt; module which completely disables typechecking annotations on a function or a class, the &lt;code&gt;Annotated&lt;/code&gt; type allows for both static typechecking of &lt;code&gt;T&lt;/code&gt; (e.g., via mypy or Pyre, which can safely ignore &lt;code&gt;x&lt;/code&gt; ) together with runtime access to &lt;code&gt;x&lt;/code&gt; within a specific application.</target>
        </trans-unit>
        <trans-unit id="bf15fb052a2b8e6d3e5be62280869b7c778c81b0" translate="yes" xml:space="preserve">
          <source>A typical &lt;a href=&quot;#io.BufferedIOBase&quot;&gt;&lt;code&gt;BufferedIOBase&lt;/code&gt;&lt;/a&gt; implementation should not inherit from a &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt; implementation, but wrap one, like &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt; do.</source>
          <target state="translated">일반적인 &lt;a href=&quot;#io.BufferedIOBase&quot;&gt; &lt;code&gt;BufferedIOBase&lt;/code&gt; &lt;/a&gt; 구현은 &lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt; 구현 에서 상속해서는 안되며 &lt;a href=&quot;#io.BufferedWriter&quot;&gt; &lt;code&gt;BufferedWriter&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#io.BufferedReader&quot;&gt; &lt;code&gt;BufferedReader&lt;/code&gt; &lt;/a&gt; 와 같이 랩핑 해야합니다.</target>
        </trans-unit>
        <trans-unit id="532a00782ce16211f46324cb7c43cd600e874a6c" translate="yes" xml:space="preserve">
          <source>A typical &lt;code&gt;load_tests&lt;/code&gt; function that loads tests from a specific set of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; classes may look like:</source>
          <target state="translated">특정 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 클래스 세트에서 테스트를로드 하는 일반적인 &lt;code&gt;load_tests&lt;/code&gt; 함수 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b822b1ced78fa4973f2903bb2ec7ed0bbbbe9df" translate="yes" xml:space="preserve">
          <source>A typical SAX application uses three kinds of objects: readers, handlers and input sources. &amp;ldquo;Reader&amp;rdquo; in this context is another term for parser, i.e. some piece of code that reads the bytes or characters from the input source, and produces a sequence of events. The events then get distributed to the handler objects, i.e. the reader invokes a method on the handler. A SAX application must therefore obtain a reader object, create or open the input sources, create the handlers, and connect these objects all together. As the final step of preparation, the reader is called to parse the input. During parsing, methods on the handler objects are called based on structural and syntactic events from the input data.</source>
          <target state="translated">일반적인 SAX 애플리케이션은 리더, 핸들러 및 입력 소스의 세 가지 객체를 사용합니다. 이 문맥에서 &quot;독자&quot;는 파서의 다른 용어, 즉 입력 소스에서 바이트 또는 문자를 읽고 일련의 이벤트를 생성하는 코드입니다. 그런 다음 이벤트는 핸들러 객체에 분배됩니다. 즉, 리더는 핸들러에서 메소드를 호출합니다. 따라서 SAX 애플리케이션은 리더 오브젝트를 가져 와서 입력 소스를 작성하거나 열고 핸들러를 작성하고 이들 오브젝트를 모두 연결해야합니다. 준비의 마지막 단계로서, 리더는 입력을 구문 분석하도록 호출됩니다. 구문 분석 중 핸들러 오브젝트의 메소드는 입력 데이터의 구조 및 구문 이벤트를 기반으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="92606cc38bee78998a30f8fec0ac721b4cacce47" translate="yes" xml:space="preserve">
          <source>A typical use case for this might be for doing multiple patches in the &lt;code&gt;setUp&lt;/code&gt; method of a &lt;code&gt;TestCase&lt;/code&gt;:</source>
          <target state="translated">일반적인 사용 사례 는 &lt;code&gt;TestCase&lt;/code&gt; 의 &lt;code&gt;setUp&lt;/code&gt; 메소드 에서 여러 패치를 수행하는 것일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6f19d09a38de2ff39abf9054c1f371922c582e38" translate="yes" xml:space="preserve">
          <source>A typical use is to define a managed attribute &lt;code&gt;x&lt;/code&gt;:</source>
          <target state="translated">일반적인 용도는 관리 속성 &lt;code&gt;x&lt;/code&gt; 를 정의하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="0eac63d33888e56a0007381fdc8a8b73f97c1749" translate="yes" xml:space="preserve">
          <source>A typical use of this callback is to change the &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;ssl.SSLSocket&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#ssl.SSLSocket.context&quot;&gt;&lt;code&gt;SSLSocket.context&lt;/code&gt;&lt;/a&gt; attribute to a new object of type &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; representing a certificate chain that matches the server name.</source>
          <target state="translated">이 콜백의 일반적인 용도는 &lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;ssl.SSLSocket&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;#ssl.SSLSocket.context&quot;&gt; &lt;code&gt;SSLSocket.context&lt;/code&gt; &lt;/a&gt; 속성을 서버 이름과 일치하는 인증서 체인을 나타내는 &lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; &lt;/a&gt; 유형의 새 객체 로 변경하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="dd5527406a727a988014a7553eed4fa39a4343fe" translate="yes" xml:space="preserve">
          <source>A unary operation. &lt;code&gt;op&lt;/code&gt; is the operator, and &lt;code&gt;operand&lt;/code&gt; any expression node.</source>
          <target state="translated">A unary operation. &lt;code&gt;op&lt;/code&gt; is the operator, and &lt;code&gt;operand&lt;/code&gt; any expression node.</target>
        </trans-unit>
        <trans-unit id="18a7ab23c7bbb7dc839f46117e4329ce2492a932" translate="yes" xml:space="preserve">
          <source>A usage example of this class follows. The server code:</source>
          <target state="translated">이 클래스의 사용법 예는 다음과 같습니다. 서버 코드 :</target>
        </trans-unit>
        <trans-unit id="978118fdeef62f1257794c4627909d23958610ab" translate="yes" xml:space="preserve">
          <source>A useful override of this method is one that treats each space-separated word as an argument. The following example demonstrates how to do this:</source>
          <target state="translated">이 방법의 유용한 재정의는 공백으로 구분 된 각 단어를 인수로 취급하는 것입니다. 다음 예제는이를 수행하는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a250b0892fe84e8c6f1a49863c77330a90929957" translate="yes" xml:space="preserve">
          <source>A user updateable list of mappings. The list is ordered from first-searched to last-searched. It is the only stored state and can be modified to change which mappings are searched. The list should always contain at least one mapping.</source>
          <target state="translated">사용자 업데이트 가능한 매핑 목록. 목록은 처음 검색에서 마지막 검색으로 정렬됩니다. 저장된 유일한 상태이며 검색 할 매핑을 변경하도록 수정할 수 있습니다. 목록에는 항상 하나 이상의 매핑이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="079507d4f083bf2720ed48fc1b442c97ecadd6bb" translate="yes" xml:space="preserve">
          <source>A user-defined class can be defined as a generic class.</source>
          <target state="translated">사용자 정의 클래스는 일반 클래스로 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9537693522141cf602fdb88a5176b79c0e82b59d" translate="yes" xml:space="preserve">
          <source>A user-defined generic class can have ABCs as base classes without a metaclass conflict. Generic metaclasses are not supported. The outcome of parameterizing generics is cached, and most types in the typing module are hashable and comparable for equality.</source>
          <target state="translated">사용자 정의 일반 클래스는 메타 클래스 충돌없이 ABC를 기본 클래스로 가질 수 있습니다. 일반 메타 클래스는 지원되지 않습니다. 제네릭을 매개 변수화 한 결과가 캐시되며 입력 모듈의 대부분 유형이 해시 가능하고 동등성을 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c8693ddfe1cf07a3436ca33c0b98dabc46adab4" translate="yes" xml:space="preserve">
          <source>A valid &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt;&lt;code&gt;OpenerDirector&lt;/code&gt;&lt;/a&gt;, which can be used to open using a different protocol, or handle errors.</source>
          <target state="translated">다른 프로토콜을 사용하여 열거 나 오류를 처리하는 데 사용할 수있는 유효한 &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt; &lt;code&gt;OpenerDirector&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8e61df85107f5cbf74dcf91d72f046c1f7d59444" translate="yes" xml:space="preserve">
          <source>A variable annotated with &lt;code&gt;C&lt;/code&gt; may accept a value of type &lt;code&gt;C&lt;/code&gt;. In contrast, a variable annotated with &lt;code&gt;Type[C]&lt;/code&gt; may accept values that are classes themselves &amp;ndash; specifically, it will accept the &lt;em&gt;class object&lt;/em&gt; of &lt;code&gt;C&lt;/code&gt;. For example:</source>
          <target state="translated">주석 변수 &lt;code&gt;C&lt;/code&gt; 는 입력 값에 동의 할 수있다 &lt;code&gt;C&lt;/code&gt; 를 . 반대로 &lt;code&gt;Type[C]&lt;/code&gt; 주석이 달린 변수 는 클래스 자체 인 값을받을 수 있습니다. 특히 &lt;code&gt;C&lt;/code&gt; 의 &lt;em&gt;클래스 객체&lt;/em&gt; 를 받습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="904d0ec5df1092d961eb12f38345e695c96dea25" translate="yes" xml:space="preserve">
          <source>A variable name. &lt;code&gt;id&lt;/code&gt; holds the name as a string, and &lt;code&gt;ctx&lt;/code&gt; is one of the following types.</source>
          <target state="translated">A variable name. &lt;code&gt;id&lt;/code&gt; holds the name as a string, and &lt;code&gt;ctx&lt;/code&gt; is one of the following types.</target>
        </trans-unit>
        <trans-unit id="ef488919d9e824be6b60939c2cb342b1b1bab344" translate="yes" xml:space="preserve">
          <source>A variant is &lt;code&gt;sNaN&lt;/code&gt; which signals rather than remaining quiet after every operation. This is a useful return value when an invalid result needs to interrupt a calculation for special handling.</source>
          <target state="translated">변형은 &lt;code&gt;sNaN&lt;/code&gt; 으로 , 모든 작업 후에 조용한 상태를 유지하기보다는 신호를 보냅니다. 이는 잘못된 결과가 특수 처리를 위해 계산을 중단해야 할 때 유용한 반환 값입니다.</target>
        </trans-unit>
        <trans-unit id="90c08b03c549ad6d2f3a31dc3b83d49432395d7c" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#asyncio.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; that retrieves most recently added entries first (last in, first out).</source>
          <target state="translated">의 변형 &lt;a href=&quot;#asyncio.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt; 를 검색 가장 최근에 첫번째 항목을 추가 한 (마지막에서 먼저 아웃).</target>
        </trans-unit>
        <trans-unit id="e73ad0a5c4f069d5381e1de59b2ea0c613b95b43" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#asyncio.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;; retrieves entries in priority order (lowest first).</source>
          <target state="translated">&lt;a href=&quot;#asyncio.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt; 의 변형 ; 우선 순위에 따라 항목을 검색합니다 (최저 순).</target>
        </trans-unit>
        <trans-unit id="39c5b43da7f038797d8ae64f42361f19c58135f2" translate="yes" xml:space="preserve">
          <source>A variant of &lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt;&lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt;&lt;/a&gt; that also has a database of &lt;code&gt;uri -&amp;gt; is_authenticated&lt;/code&gt; mappings. Can be used by a BasicAuth handler to determine when to send authentication credentials immediately instead of waiting for a &lt;code&gt;401&lt;/code&gt; response first.</source>
          <target state="translated">&lt;code&gt;uri -&amp;gt; is_authenticated&lt;/code&gt; 매핑 의 데이터베이스가있는 &lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt; &lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt; &lt;/a&gt; 의 변형입니다 . BasicAuth 처리기에서 &lt;code&gt;401&lt;/code&gt; 응답을 먼저 기다리는 대신 인증 자격 증명을 언제 보낼 것인지 결정하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d06f0891f1b2bfb9625186a337c49a98b6264aed" translate="yes" xml:space="preserve">
          <source>A variant of the &lt;a href=&quot;#multiprocessing.pool.Pool.apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; method which returns a &lt;a href=&quot;#multiprocessing.pool.AsyncResult&quot;&gt;&lt;code&gt;AsyncResult&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A variant of the &lt;a href=&quot;#multiprocessing.pool.Pool.apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; method which returns a &lt;a href=&quot;#multiprocessing.pool.AsyncResult&quot;&gt; &lt;code&gt;AsyncResult&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="e7b048ff81890f86ab4d3705faacaefc982ccda5" translate="yes" xml:space="preserve">
          <source>A variant of the &lt;a href=&quot;#multiprocessing.pool.Pool.apply&quot;&gt;&lt;code&gt;apply()&lt;/code&gt;&lt;/a&gt; method which returns a result object.</source>
          <target state="translated">결과 객체를 반환하는 &lt;a href=&quot;#multiprocessing.pool.Pool.apply&quot;&gt; &lt;code&gt;apply()&lt;/code&gt; &lt;/a&gt; 메서드 의 변형입니다 .</target>
        </trans-unit>
        <trans-unit id="fc6ee99eaa7927495c010dd5cc5fe86c083b2b9f" translate="yes" xml:space="preserve">
          <source>A variant of the &lt;a href=&quot;#multiprocessing.pool.Pool.map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; method which returns a &lt;a href=&quot;#multiprocessing.pool.AsyncResult&quot;&gt;&lt;code&gt;AsyncResult&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A variant of the &lt;a href=&quot;#multiprocessing.pool.Pool.map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; method which returns a &lt;a href=&quot;#multiprocessing.pool.AsyncResult&quot;&gt; &lt;code&gt;AsyncResult&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="bfc44ba28d32f1aedff0a9745ce2cb349b025acf" translate="yes" xml:space="preserve">
          <source>A variant of the &lt;a href=&quot;#multiprocessing.pool.Pool.map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; method which returns a result object.</source>
          <target state="translated">결과 객체를 반환하는 &lt;a href=&quot;#multiprocessing.pool.Pool.map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 메서드 의 변형입니다 .</target>
        </trans-unit>
        <trans-unit id="2e16236b15bf3dc82e98e92014c56a2bea2b94a3" translate="yes" xml:space="preserve">
          <source>A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a &amp;ldquo;system&amp;rdquo; Python, i.e., one which is installed as part of your operating system.</source>
          <target state="translated">가상 환경은 Python 인터프리터, 라이브러리 및 스크립트가 설치된 다른 가상 환경 및 기본적으로 &quot;시스템&quot;Python에 설치된 모든 라이브러리 (예 : 설치된)와 격리되는 Python 환경입니다. 운영 체제의 일부로.</target>
        </trans-unit>
        <trans-unit id="33cf41a39f10a2b0987e5f534da602847cb9e481" translate="yes" xml:space="preserve">
          <source>A virtual environment is a directory tree which contains Python executable files and other files which indicate that it is a virtual environment.</source>
          <target state="translated">가상 환경은 Python 실행 파일 및 가상 환경임을 나타내는 기타 파일을 포함하는 디렉토리 트리입니다.</target>
        </trans-unit>
        <trans-unit id="e2a7438f4c3c42513c1a86d3d14ab1eb8aa7576d" translate="yes" xml:space="preserve">
          <source>A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.</source>
          <target state="translated">객체에 대한 약한 참조만으로는 객체를 유지하기에 충분하지 않습니다. 참조에 대한 나머지 나머지 참조가 약한 참조 인 경우 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;가비지 수집&lt;/a&gt; 은 참조를 삭제하고 메모리를 다른 용도로 재사용 할 수 있습니다. 그러나 객체가 실제로 파괴 될 때까지 약한 참조는 강한 참조가없는 경우에도 객체를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eaa846e8c5fe0adcf162cc2c0dc632b0f7a4e21d" translate="yes" xml:space="preserve">
          <source>A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.</source>
          <target state="translated">A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.</target>
        </trans-unit>
        <trans-unit id="f8cad28c9b720b7c8133daa3b6046ba8d41c572b" translate="yes" xml:space="preserve">
          <source>A week is converted to 7 days.</source>
          <target state="translated">일주일은 7 일로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="e69e9595b25e9ef4c20aac1a77adfeabde1ae197" translate="yes" xml:space="preserve">
          <source>A widget-specific alternate display format</source>
          <target state="translated">위젯 별 대체 디스플레이 형식</target>
        </trans-unit>
        <trans-unit id="796565c37efcd7614c73b2d3bcd4ea9ec6196099" translate="yes" xml:space="preserve">
          <source>A workaround for apostrophes can be constructed using regular expressions:</source>
          <target state="translated">정규식을 사용하여 아포스트로피에 대한 해결 방법을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9aeb4a6a321904ee133be9093857c2603134a0b7" translate="yes" xml:space="preserve">
          <source>A working example follows. The server code:</source>
          <target state="translated">다음은 실제 예입니다. 서버 코드 :</target>
        </trans-unit>
        <trans-unit id="91c283731a52bc6a2b34753424f3b1349418c679" translate="yes" xml:space="preserve">
          <source>A wrapper for a bound socket or Windows named pipe which is &amp;lsquo;listening&amp;rsquo; for connections.</source>
          <target state="translated">바운드 소켓 또는 Windows 명명 된 파이프에 대한 래퍼로, 연결을 '청취'합니다.</target>
        </trans-unit>
        <trans-unit id="25a0091075ac6adf4f212e341e5703255d4a54d9" translate="yes" xml:space="preserve">
          <source>A wrapper for a buffer representing picklable data. &lt;em&gt;buffer&lt;/em&gt; must be a &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;buffer-providing&lt;/a&gt; object, such as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or a N-dimensional array.</source>
          <target state="translated">선택 가능한 데이터를 나타내는 버퍼의 래퍼입니다. &lt;em&gt;buffer&lt;/em&gt; 는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;바이트와 ​​같은 객체&lt;/a&gt; 또는 N 차원 배열 과 같은 &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;버퍼 제공&lt;/a&gt; 객체 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="c09c9dedb1551c62318a1648228748f916eeb315" translate="yes" xml:space="preserve">
          <source>A wrapper for a buffer representing picklable data. &lt;em&gt;buffer&lt;/em&gt; must be a &lt;a href=&quot;https://docs.python.org/3.9/c-api/buffer.html#bufferobjects&quot;&gt;buffer-providing&lt;/a&gt; object, such as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or a N-dimensional array.</source>
          <target state="translated">A wrapper for a buffer representing picklable data. &lt;em&gt;buffer&lt;/em&gt; must be a &lt;a href=&quot;https://docs.python.org/3.9/c-api/buffer.html#bufferobjects&quot;&gt;buffer-providing&lt;/a&gt; object, such as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; or a N-dimensional array.</target>
        </trans-unit>
        <trans-unit id="9488d9c942617cebacbdd48557b94f0de1129a0f" translate="yes" xml:space="preserve">
          <source>A wrapper to convert a file-like object to an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;. The resulting objects support both &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; iteration styles, for compatibility with Python 2.1 and Jython. As the object is iterated over, the optional &lt;em&gt;blksize&lt;/em&gt; parameter will be repeatedly passed to the &lt;em&gt;filelike&lt;/em&gt; object&amp;rsquo;s &lt;code&gt;read()&lt;/code&gt; method to obtain bytestrings to yield. When &lt;code&gt;read()&lt;/code&gt; returns an empty bytestring, iteration is ended and is not resumable.</source>
          <target state="translated">파일과 유사한 객체를 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;반복자&lt;/a&gt; 로 변환하는 래퍼 입니다. 결과 객체 는 Python 2.1 및 Jython과의 호환성을 위해 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt; 반복 스타일을 모두 지원합니다 . 객체가 반복되면서 선택적인 &lt;em&gt;blksize&lt;/em&gt; 매개 변수가 파일과 &lt;em&gt;같은&lt;/em&gt; 객체의 &lt;code&gt;read()&lt;/code&gt; 메소드에 반복적으로 전달되어 생성 할 &lt;em&gt;바이트 스트링&lt;/em&gt; 을 얻습니다. 때 &lt;code&gt;read()&lt;/code&gt; 빈 bytestring을 반환 반복 종료와 재개 아닙니다.</target>
        </trans-unit>
        <trans-unit id="12a55932dbb0f932cc3c2f4cd7200f736ccaded4" translate="yes" xml:space="preserve">
          <source>A wrapper to convert a file-like object to an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;. The resulting objects support both &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; iteration styles, for compatibility with Python 2.1 and Jython. As the object is iterated over, the optional &lt;em&gt;blksize&lt;/em&gt; parameter will be repeatedly passed to the &lt;em&gt;filelike&lt;/em&gt; object&amp;rsquo;s &lt;code&gt;read()&lt;/code&gt; method to obtain bytestrings to yield. When &lt;code&gt;read()&lt;/code&gt; returns an empty bytestring, iteration is ended and is not resumable.</source>
          <target state="translated">A wrapper to convert a file-like object to an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;. The resulting objects support both &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt; iteration styles, for compatibility with Python 2.1 and Jython. As the object is iterated over, the optional &lt;em&gt;blksize&lt;/em&gt; parameter will be repeatedly passed to the &lt;em&gt;filelike&lt;/em&gt; object&amp;rsquo;s &lt;code&gt;read()&lt;/code&gt; method to obtain bytestrings to yield. When &lt;code&gt;read()&lt;/code&gt; returns an empty bytestring, iteration is ended and is not resumable.</target>
        </trans-unit>
        <trans-unit id="029b94f840e06cd4458edf1aa492eee5fecb47bf" translate="yes" xml:space="preserve">
          <source>A writable boolean property which by default is true. When the program exits, it calls all remaining live finalizers for which &lt;a href=&quot;#weakref.finalize.atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; is true. They are called in reverse order of creation.</source>
          <target state="translated">쓰기 가능한 부울 속성으로 기본적으로 true입니다. 프로그램이 종료되면 &lt;a href=&quot;#weakref.finalize.atexit&quot;&gt; &lt;code&gt;atexit&lt;/code&gt; &lt;/a&gt; 가 참인 나머지 모든 라이브 파이널 라이저를 호출 합니다. 그것들은 생성 순서와 반대로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2e7f120e10b020add396221d836c3d123ec25267" translate="yes" xml:space="preserve">
          <source>A zero-filled bytes object of a specified length: &lt;code&gt;bytes(10)&lt;/code&gt;</source>
          <target state="translated">지정된 길이의 0으로 채워진 바이트 객체 : &lt;code&gt;bytes(10)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c6674593f9f3a54e63a2233e1e6ee493d51af828" translate="yes" xml:space="preserve">
          <source>A zombie pythonw.exe process could be a problem. On Windows, use Task Manager to check for one and stop it if there is. Sometimes a restart initiated by a program crash or Keyboard Interrupt (control-C) may fail to connect. Dismissing the error box or using Restart Shell on the Shell menu may fix a temporary problem.</source>
          <target state="translated">A zombie pythonw.exe process could be a problem. On Windows, use Task Manager to check for one and stop it if there is. Sometimes a restart initiated by a program crash or Keyboard Interrupt (control-C) may fail to connect. Dismissing the error box or using Restart Shell on the Shell menu may fix a temporary problem.</target>
        </trans-unit>
        <trans-unit id="5152d4d7dfe1ed03b72824b6d1326436b07eef4b" translate="yes" xml:space="preserve">
          <source>A zombie pythonw.exe process could be a problem. On Windows, use Task Manager to detect and stop one. Sometimes a restart initiated by a program crash or Keyboard Interrupt (control-C) may fail to connect. Dismissing the error box or Restart Shell on the Shell menu may fix a temporary problem.</source>
          <target state="translated">좀비 pythonw.exe 프로세스가 문제 일 수 있습니다. Windows에서는 작업 관리자를 사용하여 하나를 감지하고 중지하십시오. 때때로 프로그램 충돌 또는 키보드 인터럽트 (control-C)에 의해 재시작이 시작되지 않을 수 있습니다. 셸 메뉴에서 오류 상자 나 셸 다시 시작을 해제하면 일시적인 문제가 해결 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8945e83b68439f8e7c89d260624db63d24d011a" translate="yes" xml:space="preserve">
          <source>A. For some values, exponential notation is the only way to express the number of significant places in the coefficient. For example, expressing &lt;code&gt;5.0E+3&lt;/code&gt; as &lt;code&gt;5000&lt;/code&gt; keeps the value constant but cannot show the original&amp;rsquo;s two-place significance.</source>
          <target state="translated">A. 일부 값의 경우 지수 표기법이 계수에서 유효 자리 수를 표현하는 유일한 방법입니다. 예를 들어, &lt;code&gt;5.0E+3&lt;/code&gt; 을 &lt;code&gt;5000&lt;/code&gt; 으로 표시하면 값은 일정하게 유지되지만 원본의 두 자리 중요도를 표시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ddaf579b2dbf039da48669abd7ff5db5fd2565d9" translate="yes" xml:space="preserve">
          <source>A. Some operations like addition, subtraction, and multiplication by an integer will automatically preserve fixed point. Others operations, like division and non-integer multiplication, will change the number of decimal places and need to be followed-up with a &lt;code&gt;quantize()&lt;/code&gt; step:</source>
          <target state="translated">A. 더하기, 빼기 및 정수 곱하기와 같은 일부 연산은 고정 소수점을 자동으로 유지합니다. 나누기 및 정수가 아닌 곱셈과 같은 다른 연산은 소수점 이하 자릿수를 변경하며 &lt;code&gt;quantize()&lt;/code&gt; 단계를 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="8eb1c7daa519c3eacdadf4bc8b5d52726fa2117e" translate="yes" xml:space="preserve">
          <source>A. Some users abbreviate the constructor to just a single letter:</source>
          <target state="translated">A. 일부 사용자는 생성자를 단일 문자로 축약합니다.</target>
        </trans-unit>
        <trans-unit id="51c77a17d9176008920830e8406c57f17d212b75" translate="yes" xml:space="preserve">
          <source>A. The &lt;code&gt;normalize()&lt;/code&gt; method maps all equivalent values to a single representative:</source>
          <target state="translated">A. &lt;code&gt;normalize()&lt;/code&gt; 메서드는 모든 동등한 값을 단일 대표자에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="3c6805dd4d82a6ff60cc2229cc3596fd23058790" translate="yes" xml:space="preserve">
          <source>A. The &lt;code&gt;quantize()&lt;/code&gt; method rounds to a fixed number of decimal places. If the &lt;a href=&quot;#decimal.Inexact&quot;&gt;&lt;code&gt;Inexact&lt;/code&gt;&lt;/a&gt; trap is set, it is also useful for validation:</source>
          <target state="translated">A. &lt;code&gt;quantize()&lt;/code&gt; 메소드는 고정 소수점 이하 자릿수로 반올림합니다. &lt;a href=&quot;#decimal.Inexact&quot;&gt; &lt;code&gt;Inexact&lt;/code&gt; &lt;/a&gt; 트랩이 설정된 경우 유효성 검사에도 유용합니다.</target>
        </trans-unit>
        <trans-unit id="944d77a62db51f3b27bea12de17663f17275ef1c" translate="yes" xml:space="preserve">
          <source>A. The decimal module makes it easy to test results. A best practice is to re-run calculations using greater precision and with various rounding modes. Widely differing results indicate insufficient precision, rounding mode issues, ill-conditioned inputs, or a numerically unstable algorithm.</source>
          <target state="translated">A. 10 진수 모듈을 사용하면 결과를 쉽게 테스트 할 수 있습니다. 가장 좋은 방법은 정밀도를 높이고 다양한 반올림 모드를 사용하여 계산을 다시 실행하는 것입니다. 결과가 크게 다르면 정확도, 반올림 모드 문제, 조건이 잘못된 입력 또는 수치 적으로 불안정한 알고리즘이 나타납니다.</target>
        </trans-unit>
        <trans-unit id="6af8f2411bcef764bf4bed9c2423c5567318a5b2" translate="yes" xml:space="preserve">
          <source>A. Yes, any binary floating point number can be exactly expressed as a Decimal though an exact conversion may take more precision than intuition would suggest:</source>
          <target state="translated">A. 그렇습니다. 모든 이진 부동 소수점 숫자는 십진법으로 정확하게 표현 될 수 있지만 정확한 변환은 직감이 제안하는 것보다 더 정밀 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f7b86e04ad6ee66bb23f8e561b76dfb3714289b" translate="yes" xml:space="preserve">
          <source>A. Yes. In the CPython and PyPy3 implementations, the C/CFFI versions of the decimal module integrate the high speed &lt;a href=&quot;https://www.bytereef.org/mpdecimal/doc/libmpdec/index.html&quot;&gt;libmpdec&lt;/a&gt; library for arbitrary precision correctly-rounded decimal floating point arithmetic &lt;a href=&quot;#id4&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;. &lt;code&gt;libmpdec&lt;/code&gt; uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Karatsuba_algorithm&quot;&gt;Karatsuba multiplication&lt;/a&gt; for medium-sized numbers and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general)#Number-theoretic_transform&quot;&gt;Number Theoretic Transform&lt;/a&gt; for very large numbers.</source>
          <target state="translated">A. Yes. In the CPython and PyPy3 implementations, the C/CFFI versions of the decimal module integrate the high speed &lt;a href=&quot;https://www.bytereef.org/mpdecimal/doc/libmpdec/index.html&quot;&gt;libmpdec&lt;/a&gt; library for arbitrary precision correctly-rounded decimal floating point arithmetic &lt;a href=&quot;#id4&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;. &lt;code&gt;libmpdec&lt;/code&gt; uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Karatsuba_algorithm&quot;&gt;Karatsuba multiplication&lt;/a&gt; for medium-sized numbers and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general)#Number-theoretic_transform&quot;&gt;Number Theoretic Transform&lt;/a&gt; for very large numbers.</target>
        </trans-unit>
        <trans-unit id="d7b3b49e07b2ffed558d950fbc8d141a043755f6" translate="yes" xml:space="preserve">
          <source>A. Yes. In the CPython and PyPy3 implementations, the C/CFFI versions of the decimal module integrate the high speed &lt;a href=&quot;https://www.bytereef.org/mpdecimal/doc/libmpdec/index.html&quot;&gt;libmpdec&lt;/a&gt; library for arbitrary precision correctly-rounded decimal floating point arithmetic. &lt;code&gt;libmpdec&lt;/code&gt; uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Karatsuba_algorithm&quot;&gt;Karatsuba multiplication&lt;/a&gt; for medium-sized numbers and the &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general)#Number-theoretic_transform&quot;&gt;Number Theoretic Transform&lt;/a&gt; for very large numbers. However, to realize this performance gain, the context needs to be set for unrounded calculations.</source>
          <target state="translated">네. CPython 및 PyPy3 구현에서 10 진수 모듈의 C / CFFI 버전은 임의의 정밀도로 올림 된 10 진수 부동 소수점 산술을 위해 고속 &lt;a href=&quot;https://www.bytereef.org/mpdecimal/doc/libmpdec/index.html&quot;&gt;libmpdec&lt;/a&gt; 라이브러리를 통합합니다 . &lt;code&gt;libmpdec&lt;/code&gt; 은 중간 크기의 숫자에는 가라 쓰바 &lt;a href=&quot;https://en.wikipedia.org/wiki/Karatsuba_algorithm&quot;&gt;곱셈&lt;/a&gt; 을 사용 하고 매우 큰 숫자 에는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Discrete_Fourier_transform_(general)#Number-theoretic_transform&quot;&gt;숫자 이론적 변환&lt;/a&gt; 을 사용합니다. 그러나이 성능 향상을 실현하려면 반올림되지 않은 계산에 대한 컨텍스트를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="1a3cc723c0fbf6fce1cd335b2e051e9aa0f006ab" translate="yes" xml:space="preserve">
          <source>A. Yes. The principle is that all values are considered to be exact and so is the arithmetic on those values. Only the results are rounded. The advantage for inputs is that &amp;ldquo;what you type is what you get&amp;rdquo;. A disadvantage is that the results can look odd if you forget that the inputs haven&amp;rsquo;t been rounded:</source>
          <target state="translated">네. 원칙적으로 모든 값은 정확한 것으로 간주되며 해당 값에 대한 산술도 마찬가지입니다. 결과 만 반올림됩니다. 입력의 장점은&amp;ldquo;입력하는 것이 얻는 것&amp;rdquo;입니다. 단점은 입력이 반올림되지 않은 것을 잊어 버린 경우 결과가 이상하게 보일 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3c01bdbb26f358bab27f267924aa2c9a03fcfdb8" translate="yes" xml:space="preserve">
          <source>ABC</source>
          <target state="translated">ABC</target>
        </trans-unit>
        <trans-unit id="7f5ec78b298239f25d4eedf9f08390184fa9f0f0" translate="yes" xml:space="preserve">
          <source>ABC for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; objects, which can be used in &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#await&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; expressions. Custom implementations must provide the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">대한 ABC &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; 에서 사용할 수있는 객체, &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#await&quot;&gt; &lt;code&gt;await&lt;/code&gt; 를&lt;/a&gt; 표현. 사용자 정의 구현은 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt; 메소드를 제공해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b298b7e5b1f1a9b44dee31501307bbf8bbf40c3a" translate="yes" xml:space="preserve">
          <source>ABC for &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; objects, which can be used in &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#await&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; expressions. Custom implementations must provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; objects, which can be used in &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#await&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt; expressions. Custom implementations must provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="f010c60296129173d3201147bb2f74ffe0bbf019" translate="yes" xml:space="preserve">
          <source>ABC for asynchronous generator classes that implement the protocol defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0525&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 525&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://www.python.org/dev/peps/pep-0492&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 492&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">에 정의 된 프로토콜을 구현 비동기 발전기 클래스 ABC &lt;a href=&quot;https://www.python.org/dev/peps/pep-0525&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP (525)&lt;/strong&gt;&lt;/a&gt; 및 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0492&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;PEP 492&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7822765e6f046b2e22b3015dc9f40823cfde84ac" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide &lt;code&gt;__aiter__&lt;/code&gt; and &lt;code&gt;__anext__&lt;/code&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-iterator&quot;&gt;asynchronous iterator&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__aiter__&lt;/code&gt; 및 &lt;code&gt;__anext__&lt;/code&gt; 메서드 를 제공하는 클래스의 ABC &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-iterator&quot;&gt;비동기 반복기&lt;/a&gt; 의 정의를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1f9f33f03e90008a03cc1fbc29494b8d4efc7d3c" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide &lt;code&gt;__aiter__&lt;/code&gt; and &lt;code&gt;__anext__&lt;/code&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-iterator&quot;&gt;asynchronous iterator&lt;/a&gt;.</source>
          <target state="translated">ABC for classes that provide &lt;code&gt;__aiter__&lt;/code&gt; and &lt;code&gt;__anext__&lt;/code&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-iterator&quot;&gt;asynchronous iterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="07eb81a44ab9b106c2098b95becee86a38c0e4e3" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide &lt;code&gt;__aiter__&lt;/code&gt; method. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-iterable&quot;&gt;asynchronous iterable&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;__aiter__&lt;/code&gt; 메서드 를 제공하는 클래스의 ABC &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-iterable&quot;&gt;비동기 iterable&lt;/a&gt; 의 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e346357d155f0863bd1c27b87db3147cf6ee5398" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide &lt;code&gt;__aiter__&lt;/code&gt; method. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-iterable&quot;&gt;asynchronous iterable&lt;/a&gt;.</source>
          <target state="translated">ABC for classes that provide &lt;code&gt;__aiter__&lt;/code&gt; method. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-iterable&quot;&gt;asynchronous iterable&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f855e4e193f74dc187adea3f35b5e517486377bf" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt; 메서드 를 제공하는 클래스의 ABC</target>
        </trans-unit>
        <trans-unit id="292e30239cefaf0272ea58d0e9252446da8da0d9" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__call__&quot;&gt; &lt;code&gt;__call__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="0a880cb36f6671eed782dbea77d9ed8448dce0a0" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="05e1c0aaceac77b9c891280c28ef294d57ae05de" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="61380570df47b5847df8690a21f958262a0b65f8" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="21b0d0019985658cdee466d444ff3046f0723a3c" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for classes that provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="e07ce05477de3c6001717f47345abad6405a3e68" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;stdtypes#iterator.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt;&lt;code&gt;__next__()&lt;/code&gt;&lt;/a&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#iterator.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt; &lt;code&gt;__next__()&lt;/code&gt; &lt;/a&gt; 메서드 를 제공하는 클래스의 ABC &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt; 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7351886044acb81f786856f465e04454435e31ee" translate="yes" xml:space="preserve">
          <source>ABC for classes that provide the &lt;a href=&quot;stdtypes#iterator.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt;&lt;code&gt;__next__()&lt;/code&gt;&lt;/a&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;.</source>
          <target state="translated">ABC for classes that provide the &lt;a href=&quot;stdtypes#iterator.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;stdtypes#iterator.__next__&quot;&gt; &lt;code&gt;__next__()&lt;/code&gt; &lt;/a&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="477a0ec0ae4686b4b7160cec57ecef7a897b1f69" translate="yes" xml:space="preserve">
          <source>ABC for coroutine compatible classes. These implement the following methods, defined in &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine-objects&quot;&gt;Coroutine Objects&lt;/a&gt;: &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.throw&quot;&gt;&lt;code&gt;throw()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. Custom implementations must also implement &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt;. All &lt;a href=&quot;#collections.abc.Coroutine&quot;&gt;&lt;code&gt;Coroutine&lt;/code&gt;&lt;/a&gt; instances are also instances of &lt;a href=&quot;#collections.abc.Awaitable&quot;&gt;&lt;code&gt;Awaitable&lt;/code&gt;&lt;/a&gt;. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt;.</source>
          <target state="translated">코 루틴 호환 클래스를위한 ABC. 이러한 정의 다음 방법, 구현 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine-objects&quot;&gt;개체 코 루틴을&lt;/a&gt; : &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.throw&quot;&gt; &lt;code&gt;throw()&lt;/code&gt; &lt;/a&gt; , 그리고 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#coroutine.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; . 사용자 정의 구현은 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt; 도 구현해야합니다 . 모든 &lt;a href=&quot;#collections.abc.Coroutine&quot;&gt; &lt;code&gt;Coroutine&lt;/code&gt; &lt;/a&gt; 인스턴스도 &lt;a href=&quot;#collections.abc.Awaitable&quot;&gt; &lt;code&gt;Awaitable&lt;/code&gt; 의&lt;/a&gt; 인스턴스입니다 . &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt; 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c5bdbfd7c84e8d2fe9070ac7f501ee81a0edf6b8" translate="yes" xml:space="preserve">
          <source>ABC for coroutine compatible classes. These implement the following methods, defined in &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine-objects&quot;&gt;Coroutine Objects&lt;/a&gt;: &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine.throw&quot;&gt;&lt;code&gt;throw()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. Custom implementations must also implement &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt;. All &lt;a href=&quot;#collections.abc.Coroutine&quot;&gt;&lt;code&gt;Coroutine&lt;/code&gt;&lt;/a&gt; instances are also instances of &lt;a href=&quot;#collections.abc.Awaitable&quot;&gt;&lt;code&gt;Awaitable&lt;/code&gt;&lt;/a&gt;. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt;.</source>
          <target state="translated">ABC for coroutine compatible classes. These implement the following methods, defined in &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine-objects&quot;&gt;Coroutine Objects&lt;/a&gt;: &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine.throw&quot;&gt; &lt;code&gt;throw()&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#coroutine.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;. Custom implementations must also implement &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;. All &lt;a href=&quot;#collections.abc.Coroutine&quot;&gt; &lt;code&gt;Coroutine&lt;/code&gt; &lt;/a&gt; instances are also instances of &lt;a href=&quot;#collections.abc.Awaitable&quot;&gt; &lt;code&gt;Awaitable&lt;/code&gt; &lt;/a&gt;. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-coroutine&quot;&gt;coroutine&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="46d28e2c22a4dbfdd76d81e2be95f80272298b4f" translate="yes" xml:space="preserve">
          <source>ABC for generator classes that implement the protocol defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0342&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 342&lt;/strong&gt;&lt;/a&gt; that extends iterators with the &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.throw&quot;&gt;&lt;code&gt;throw()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.throw&quot;&gt; &lt;code&gt;throw()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#generator.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 메소드로 반복자를 확장하는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0342&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 342에&lt;/strong&gt;&lt;/a&gt; 정의 된 프로토콜을 구현하는 생성기 클래스의 ABC . &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt; 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a79dfe7659402a73038d0d4b42433be9335ec550" translate="yes" xml:space="preserve">
          <source>ABC for generator classes that implement the protocol defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0342&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 342&lt;/strong&gt;&lt;/a&gt; that extends iterators with the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#generator.send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#generator.throw&quot;&gt;&lt;code&gt;throw()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#generator.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;.</source>
          <target state="translated">ABC for generator classes that implement the protocol defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0342&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 342&lt;/strong&gt;&lt;/a&gt; that extends iterators with the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#generator.send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#generator.throw&quot;&gt; &lt;code&gt;throw()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#generator.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; methods. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0548b242874beb012653f72ceb70cf25e8733795" translate="yes" xml:space="preserve">
          <source>ABC for iterable classes that also provide the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt; 메서드를 제공하는 반복 가능한 클래스의 ABC</target>
        </trans-unit>
        <trans-unit id="8c021e4ae4d3ee37e413ee5551dc900c21183652" translate="yes" xml:space="preserve">
          <source>ABC for iterable classes that also provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ABC for iterable classes that also provide the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="d92ee93cd33bf6ba5fa8a1c70c98d3856ade0f4c" translate="yes" xml:space="preserve">
          <source>ABC for sized iterable container classes.</source>
          <target state="translated">반복 가능한 컨테이너 클래스 크기의 ABC</target>
        </trans-unit>
        <trans-unit id="59647d4cbeaabde8a1d037a9dea14e674c553715" translate="yes" xml:space="preserve">
          <source>ABC hierarchy:</source>
          <target state="translated">ABC 계층 :</target>
        </trans-unit>
        <trans-unit id="0b0fbb7c06ed511ccb4423144202c87f813003e4" translate="yes" xml:space="preserve">
          <source>ABCs for classes that provide respectively the methods &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">각각의 방법을 제공하는 클래스 상식 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt; &lt;code&gt;__call__()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="015be73827a640fdee0b89bf55fb5aff421c1ec3" translate="yes" xml:space="preserve">
          <source>ABCs for mapping, items, keys, and values &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-dictionary-view&quot;&gt;views&lt;/a&gt;.</source>
          <target state="translated">매핑, 항목, 키 및 값 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-dictionary-view&quot;&gt;보기를&lt;/a&gt; 위한 ABC .</target>
        </trans-unit>
        <trans-unit id="0264f29f31772b04830ce44089f454a6f2584a33" translate="yes" xml:space="preserve">
          <source>ABCs for mapping, items, keys, and values &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-dictionary-view&quot;&gt;views&lt;/a&gt;.</source>
          <target state="translated">ABCs for mapping, items, keys, and values &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-dictionary-view&quot;&gt;views&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="55b7fe6f021ed9e9a7ce994b1445cda74cddbc7c" translate="yes" xml:space="preserve">
          <source>ABCs for read-only and mutable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;mappings&lt;/a&gt;.</source>
          <target state="translated">읽기 전용 및 변경 가능한 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;매핑을&lt;/a&gt; 위한 ABC .</target>
        </trans-unit>
        <trans-unit id="d86e2109768137f54448089b433922ec0e56d34d" translate="yes" xml:space="preserve">
          <source>ABCs for read-only and mutable &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-sequence&quot;&gt;sequences&lt;/a&gt;.</source>
          <target state="translated">읽기 전용 및 가변 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-sequence&quot;&gt;시퀀스를&lt;/a&gt; 위한 ABC .</target>
        </trans-unit>
        <trans-unit id="e53db294215f6a899b79e047ef49041870791a20" translate="yes" xml:space="preserve">
          <source>ABCs for read-only and mutable &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mappings&lt;/a&gt;.</source>
          <target state="translated">ABCs for read-only and mutable &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mappings&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6297ac9fdbad7e632fb86ba052d65e227f654e77" translate="yes" xml:space="preserve">
          <source>ABCs for read-only and mutable &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-sequence&quot;&gt;sequences&lt;/a&gt;.</source>
          <target state="translated">ABCs for read-only and mutable &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-sequence&quot;&gt;sequences&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ace54a5c1800f9a8fbcc59c5817199681df7db33" translate="yes" xml:space="preserve">
          <source>ABCs for read-only and mutable sets.</source>
          <target state="translated">읽기 전용 및 변경 가능한 세트의 ABC</target>
        </trans-unit>
        <trans-unit id="f86d7a17edb02a17fa7d6037082a11974589497c" translate="yes" xml:space="preserve">
          <source>ACS code</source>
          <target state="translated">ACS 코드</target>
        </trans-unit>
        <trans-unit id="f6ae31d47584845d5b7ec1a3525c346c981b4210" translate="yes" xml:space="preserve">
          <source>AIO requests</source>
          <target state="translated">AIO 요청</target>
        </trans-unit>
        <trans-unit id="7cd735bc88414abeac25ef102606e6871aeba944" translate="yes" xml:space="preserve">
          <source>AIX</source>
          <target state="translated">AIX</target>
        </trans-unit>
        <trans-unit id="113a97cdab92673636cc95858168822f55ed3094" translate="yes" xml:space="preserve">
          <source>ANY</source>
          <target state="translated">ANY</target>
        </trans-unit>
        <trans-unit id="d93d10ff0fbef1b4aa0ddc24e10e907746d3c85a" translate="yes" xml:space="preserve">
          <source>API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="fb44be4c1480d2e393e6140650808a3252950e7e" translate="yes" xml:space="preserve">
          <source>API reference for the logging module.</source>
          <target state="translated">로깅 모듈에 대한 API 참조</target>
        </trans-unit>
        <trans-unit id="85772cf0096853ab75ec0710b340b4302c6a59bb" translate="yes" xml:space="preserve">
          <source>Abort a file transfer that is in progress. Using this does not always work, but it&amp;rsquo;s worth a try.</source>
          <target state="translated">진행중인 파일 전송을 중단하십시오. 이것을 사용하는 것이 항상 효과는 없지만 시도해 볼 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1a265f8b05dbab0fc0f247d5a7b42c32db4a8a6" translate="yes" xml:space="preserve">
          <source>Abort signal from &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/abort(3)&quot;&gt;abort(3)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Abort signal from &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/abort(3)&quot;&gt;abort(3)&lt;/a&gt;&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="9a43092c673da6a4e7137e842ae9542e006479e1" translate="yes" xml:space="preserve">
          <source>About IDLE</source>
          <target state="translated">유휴 소개</target>
        </trans-unit>
        <trans-unit id="6d945808cdf52d5b08a921fc7f467995f1d2ba52" translate="yes" xml:space="preserve">
          <source>Abstract Base Classes</source>
          <target state="translated">추상 기본 클래스</target>
        </trans-unit>
        <trans-unit id="d61ab640c5b98ffb68974b7f64188b17f4dd2a53" translate="yes" xml:space="preserve">
          <source>Abstract Grammar</source>
          <target state="translated">추상 문법</target>
        </trans-unit>
        <trans-unit id="5fde6504e20ecd1360ad9d942cd74ad60b2cc703" translate="yes" xml:space="preserve">
          <source>Abstract Methods</source>
          <target state="translated">추상 방법</target>
        </trans-unit>
        <trans-unit id="d663d5ecddcb7099c665bc6e641fc7287c322569" translate="yes" xml:space="preserve">
          <source>Abstract a key/value pair, which has some &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; attributes.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; 속성 이있는 키 / 값 쌍을 추상화하십시오 .</target>
        </trans-unit>
        <trans-unit id="344cb8aff69839e7bd97d5cbe55e40950f78e6c2" translate="yes" xml:space="preserve">
          <source>Abstract base class for arrays.</source>
          <target state="translated">배열의 추상 기본 클래스.</target>
        </trans-unit>
        <trans-unit id="5159868f3346bfddd687c4b1c79e385a0b2b7314" translate="yes" xml:space="preserve">
          <source>Abstract base class for asyncio-compliant event loops.</source>
          <target state="translated">비동기 호환 이벤트 루프에 대한 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="5a00e7a32834730b14935377913a4e39792f78b5" translate="yes" xml:space="preserve">
          <source>Abstract base class for generic types.</source>
          <target state="translated">제네릭 형식의 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="e90db39e674e4bc026807fcbf53f0a2f6df04011" translate="yes" xml:space="preserve">
          <source>Abstract base class for structures in &lt;em&gt;big endian&lt;/em&gt; byte order.</source>
          <target state="translated">&lt;em&gt;빅 엔디안&lt;/em&gt; 바이트 순서의 구조에 대한 추상 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="161636484cb5323de19447914374caeff71931d4" translate="yes" xml:space="preserve">
          <source>Abstract base class for structures in &lt;em&gt;little endian&lt;/em&gt; byte order.</source>
          <target state="translated">&lt;em&gt;리틀 엔디안&lt;/em&gt; 바이트 순서의 구조에 대한 추상 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="d09915045304ac9b228bab360849a5f73ad7dc24" translate="yes" xml:space="preserve">
          <source>Abstract base class for structures in &lt;em&gt;native&lt;/em&gt; byte order.</source>
          <target state="translated">&lt;em&gt;기본&lt;/em&gt; 바이트 순서의 구조에 대한 추상 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="989b4ac287af7bb629b745acd2c03089764dad2b" translate="yes" xml:space="preserve">
          <source>Abstract base class for unions in native byte order.</source>
          <target state="translated">네이티브 바이트 순서의 공용체에 대한 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="be904874648301c38c0cbd1e8e8ee45fc9ff355f" translate="yes" xml:space="preserve">
          <source>Abstract.</source>
          <target state="translated">Abstract.</target>
        </trans-unit>
        <trans-unit id="033f637625396067d78ede4d817a5e47570aed40" translate="yes" xml:space="preserve">
          <source>Abstract. Retrieves the imaginary component of this number.</source>
          <target state="translated">요약. 이 숫자의 허수 부를 구합니다.</target>
        </trans-unit>
        <trans-unit id="5dd4baa9cd2aedc339bb34801c67b8f428d8a227" translate="yes" xml:space="preserve">
          <source>Abstract. Retrieves the real component of this number.</source>
          <target state="translated">요약. 이 숫자의 실수 성분을 얻어 온다.</target>
        </trans-unit>
        <trans-unit id="7d8657883dbffc0354e7c89d9f5906b7e3171e7a" translate="yes" xml:space="preserve">
          <source>Abstract. Returns the complex conjugate. For example, &lt;code&gt;(1+3j).conjugate()
== (1-3j)&lt;/code&gt;.</source>
          <target state="translated">요약. 복합 켤레를 반환합니다. 예를 들면 &lt;code&gt;(1+3j).conjugate() == (1-3j)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="918a7e7e3abfc661fbce7b36f45ad4a008b3e4b6" translate="yes" xml:space="preserve">
          <source>AbstractBasicAuthHandler Objects</source>
          <target state="translated">AbstractBasicAuthHandler 객체</target>
        </trans-unit>
        <trans-unit id="35aeb77a12aeb24dd8853c33d313b402491b42a1" translate="yes" xml:space="preserve">
          <source>AbstractDigestAuthHandler Objects</source>
          <target state="translated">AbstractDigestAuthHandler 객체</target>
        </trans-unit>
        <trans-unit id="2d65bd49a1365a4f2d71a81612906c6eff60f7c3" translate="yes" xml:space="preserve">
          <source>Accept a &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; connection.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt; 연결을 수락하십시오 .</target>
        </trans-unit>
        <trans-unit id="3ca28d3cc8b69490da642723870f35d0d39797e0" translate="yes" xml:space="preserve">
          <source>Accept a base64 &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object and decode it as the instance&amp;rsquo;s new data.</source>
          <target state="translated">base64 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 오브젝트를 승인하고 이를 인스턴스의 새 데이터로 디코딩하십시오.</target>
        </trans-unit>
        <trans-unit id="248136c7d4ed41a70a6986aad65af2eb7f26a157" translate="yes" xml:space="preserve">
          <source>Accept a connection on the bound socket or named pipe of the listener object and return a &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object. If authentication is attempted and fails, then &lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt;&lt;code&gt;AuthenticationError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">리스너 오브젝트의 바인드 된 소켓 또는 명명 된 파이프에서 연결을 승인하고 &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 오브젝트를 리턴하십시오 . 인증을 시도하고 실패하면 &lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt; &lt;code&gt;AuthenticationError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="68567e805163dadbfc1e5c5431016e1e5ff22046" translate="yes" xml:space="preserve">
          <source>Accept a connection. Modeled after the blocking &lt;a href=&quot;socket#socket.socket.accept&quot;&gt;&lt;code&gt;socket.accept()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">연결을 수락하십시오. blocking &lt;a href=&quot;socket#socket.socket.accept&quot;&gt; &lt;code&gt;socket.accept()&lt;/code&gt; &lt;/a&gt; 메소드를 모델로합니다 .</target>
        </trans-unit>
        <trans-unit id="5e6d96453b4cda0f31d633767d452eb27962620b" translate="yes" xml:space="preserve">
          <source>Accept a connection. The socket must be bound to an address and listening for connections. The return value can be either &lt;code&gt;None&lt;/code&gt; or a pair &lt;code&gt;(conn, address)&lt;/code&gt; where &lt;em&gt;conn&lt;/em&gt; is a &lt;em&gt;new&lt;/em&gt; socket object usable to send and receive data on the connection, and &lt;em&gt;address&lt;/em&gt; is the address bound to the socket on the other end of the connection. When &lt;code&gt;None&lt;/code&gt; is returned it means the connection didn&amp;rsquo;t take place, in which case the server should just ignore this event and keep listening for further incoming connections.</source>
          <target state="translated">연결을 수락하십시오. 소켓은 주소에 연결되어 있고 연결을 수신 대기해야합니다. 리턴 값은 &lt;code&gt;None&lt;/code&gt; 또는 쌍 &lt;code&gt;(conn, address)&lt;/code&gt; 여기서 &lt;em&gt;conn&lt;/em&gt; 은 연결에서 데이터를 송수신하는 데 사용할 수 있는 &lt;em&gt;새&lt;/em&gt; 소켓 오브젝트이며 &lt;em&gt;address&lt;/em&gt; 는 연결 의 다른 쪽 끝에있는 소켓에 바인드 된 &lt;em&gt;주소&lt;/em&gt; 입니다. &lt;code&gt;None&lt;/code&gt; 이 반환 되면 연결이 이루어지지 않았 음을 의미하며,이 경우 서버는이 이벤트를 무시하고 들어오는 연결을 계속 수신해야합니다.</target>
        </trans-unit>
        <trans-unit id="bf1a228c35d50b158ea9e874327d777a40642808" translate="yes" xml:space="preserve">
          <source>Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair &lt;code&gt;(conn, address)&lt;/code&gt; where &lt;em&gt;conn&lt;/em&gt; is a &lt;em&gt;new&lt;/em&gt; socket object usable to send and receive data on the connection, and &lt;em&gt;address&lt;/em&gt; is the address bound to the socket on the other end of the connection.</source>
          <target state="translated">연결을 수락하십시오. 소켓은 주소에 연결되어 있고 연결을 수신 대기해야합니다. 리턴 값은 쌍 &lt;code&gt;(conn, address)&lt;/code&gt; 이며, &lt;em&gt;conn&lt;/em&gt; 은 연결에서 데이터를 송수신하는 데 사용할 수 있는 &lt;em&gt;새&lt;/em&gt; 소켓 오브젝트이며 &lt;em&gt;address&lt;/em&gt; 는 연결 의 다른 쪽 끝에있는 소켓에 바인드 된 &lt;em&gt;주소&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="becea170712dd2efec29eca7cb2dd1f65a0fa7cd" translate="yes" xml:space="preserve">
          <source>Accept a string as the instance&amp;rsquo;s new time value.</source>
          <target state="translated">인스턴스의 새 시간 값으로 문자열을 승인하십시오.</target>
        </trans-unit>
        <trans-unit id="05ba9cfd374cda2ea3202cabf287a75ce2cae7c9" translate="yes" xml:space="preserve">
          <source>Accepts a wide range of Python callables, from plain functions and classes to &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">일반 함수 및 클래스에서 &lt;a href=&quot;functools#functools.partial&quot;&gt; &lt;code&gt;functools.partial()&lt;/code&gt; &lt;/a&gt; 객체에 이르기까지 광범위한 Python 호출 가능 항목을 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="cefd8c72a8263fd2b76f3d365284a05d42f5bcfa" translate="yes" xml:space="preserve">
          <source>Accepts an arbitrary callback function and arguments and adds it to the callback stack.</source>
          <target state="translated">임의의 콜백 함수와 인수를 받아서 콜백 스택에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="a5c4b76bbe3ef1a943cc50e4d249422d0b1aab87" translate="yes" xml:space="preserve">
          <source>Accepts the &amp;ldquo;MAIL FROM:&amp;rdquo; syntax and stores the supplied address as &lt;a href=&quot;#smtpd.SMTPChannel.mailfrom&quot;&gt;&lt;code&gt;mailfrom&lt;/code&gt;&lt;/a&gt;. In extended command mode, accepts the &lt;a href=&quot;https://tools.ietf.org/html/rfc1870.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 1870&lt;/strong&gt;&lt;/a&gt; SIZE attribute and responds appropriately based on the value of &lt;em&gt;data_size_limit&lt;/em&gt;.</source>
          <target state="translated">&quot;MAIL FROM :&quot;구문을 승인하고 제공된 주소를 &lt;a href=&quot;#smtpd.SMTPChannel.mailfrom&quot;&gt; &lt;code&gt;mailfrom&lt;/code&gt; &lt;/a&gt; 으로 저장합니다 . 확장 명령 모드에서 &lt;a href=&quot;https://tools.ietf.org/html/rfc1870.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 1870&lt;/strong&gt;&lt;/a&gt; SIZE 속성을 승인하고 &lt;em&gt;data_size_limit&lt;/em&gt; 값에 따라 적절하게 응답합니다 .</target>
        </trans-unit>
        <trans-unit id="ca73702311936fa8995eea8177ce31af536ccb02" translate="yes" xml:space="preserve">
          <source>Accepts the &amp;ldquo;RCPT TO:&amp;rdquo; syntax and stores the supplied addresses in the &lt;a href=&quot;#smtpd.SMTPChannel.rcpttos&quot;&gt;&lt;code&gt;rcpttos&lt;/code&gt;&lt;/a&gt; list.</source>
          <target state="translated">&quot;RCPT TO :&quot;구문을 승인하고 제공된 주소를 &lt;a href=&quot;#smtpd.SMTPChannel.rcpttos&quot;&gt; &lt;code&gt;rcpttos&lt;/code&gt; &lt;/a&gt; 목록 에 저장 합니다.</target>
        </trans-unit>
        <trans-unit id="6fdda2dde2b8c2c191d15b7f3125ea94a39916cf" translate="yes" xml:space="preserve">
          <source>Accepts the greeting from the client and stores it in &lt;a href=&quot;#smtpd.SMTPChannel.seen_greeting&quot;&gt;&lt;code&gt;seen_greeting&lt;/code&gt;&lt;/a&gt;. Sets server to base command mode.</source>
          <target state="translated">클라이언트의 인사말을 수락하고 &lt;a href=&quot;#smtpd.SMTPChannel.seen_greeting&quot;&gt; &lt;code&gt;seen_greeting&lt;/code&gt; 에&lt;/a&gt; 저장합니다 . 서버를 기본 명령 모드로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c0b35569f1e8ae304d581f5e8821f7f16840b7d0" translate="yes" xml:space="preserve">
          <source>Accepts the greeting from the client and stores it in &lt;a href=&quot;#smtpd.SMTPChannel.seen_greeting&quot;&gt;&lt;code&gt;seen_greeting&lt;/code&gt;&lt;/a&gt;. Sets server to extended command mode.</source>
          <target state="translated">클라이언트의 인사말을 수락하고 &lt;a href=&quot;#smtpd.SMTPChannel.seen_greeting&quot;&gt; &lt;code&gt;seen_greeting&lt;/code&gt; 에&lt;/a&gt; 저장합니다 . 서버를 확장 명령 모드로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8966aa55dca18b010cac9082dfd52437b31bf67c" translate="yes" xml:space="preserve">
          <source>Accepts two optional keyword arguments which are callables that accept an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator-iterator&quot;&gt;asynchronous generator iterator&lt;/a&gt; as an argument. The &lt;em&gt;firstiter&lt;/em&gt; callable will be called when an asynchronous generator is iterated for the first time. The &lt;em&gt;finalizer&lt;/em&gt; will be called when an asynchronous generator is about to be garbage collected.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-asynchronous-generator-iterator&quot;&gt;비동기 생성기 반복자&lt;/a&gt; 를 인수로 허용하는 호출 가능한 두 개의 선택적 키워드 인수를 허용합니다 . 비동기 생성기가 처음 반복 될 때 호출 가능한 첫 &lt;em&gt;번째 호출자가&lt;/em&gt; 호출됩니다. &lt;em&gt;파이널은&lt;/em&gt; 비동기 발전기에 대한 쓰레기가 수집 될 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="327de47ac974e8a1e8a3bbfcc08a3fecd212e5a3" translate="yes" xml:space="preserve">
          <source>Accepts two optional keyword arguments which are callables that accept an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-generator-iterator&quot;&gt;asynchronous generator iterator&lt;/a&gt; as an argument. The &lt;em&gt;firstiter&lt;/em&gt; callable will be called when an asynchronous generator is iterated for the first time. The &lt;em&gt;finalizer&lt;/em&gt; will be called when an asynchronous generator is about to be garbage collected.</source>
          <target state="translated">Accepts two optional keyword arguments which are callables that accept an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-asynchronous-generator-iterator&quot;&gt;asynchronous generator iterator&lt;/a&gt; as an argument. The &lt;em&gt;firstiter&lt;/em&gt; callable will be called when an asynchronous generator is iterated for the first time. The &lt;em&gt;finalizer&lt;/em&gt; will be called when an asynchronous generator is about to be garbage collected.</target>
        </trans-unit>
        <trans-unit id="e05b284dc7ffc87c49e09a289e14dcbf79cfef75" translate="yes" xml:space="preserve">
          <source>Access Rights</source>
          <target state="translated">액세스 권한</target>
        </trans-unit>
        <trans-unit id="731aec2d2a9b1fac8c050c5f45f4db5cae619c59" translate="yes" xml:space="preserve">
          <source>Access a member of the archive as a binary file-like object. &lt;em&gt;name&lt;/em&gt; can be either the name of a file within the archive or a &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; object. The &lt;em&gt;mode&lt;/em&gt; parameter, if included, must be &lt;code&gt;'r'&lt;/code&gt; (the default) or &lt;code&gt;'w'&lt;/code&gt;. &lt;em&gt;pwd&lt;/em&gt; is the password used to decrypt encrypted ZIP files.</source>
          <target state="translated">이진 파일과 같은 객체로 아카이브 멤버에 액세스합니다. &lt;em&gt;name&lt;/em&gt; 은 아카이브 내의 파일 이름이거나 &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt; &lt;code&gt;ZipInfo&lt;/code&gt; &lt;/a&gt; 객체 일 수 있습니다. &lt;em&gt;모드&lt;/em&gt; 매개 변수는 포함 된 경우,해야 &lt;code&gt;'r'&lt;/code&gt; (기본값) 또는 &lt;code&gt;'w'&lt;/code&gt; . &lt;em&gt;pwd&lt;/em&gt; 는 암호화 된 ZIP 파일을 해독하는 데 사용되는 비밀번호입니다.</target>
        </trans-unit>
        <trans-unit id="d198a0ec3c83b4614eaff43518cfa5395bac5e85" translate="yes" xml:space="preserve">
          <source>Access local Python documentation, if installed, or start a web browser and open docs.python.org showing the latest Python documentation.</source>
          <target state="translated">설치된 경우 로컬 Python 문서에 액세스하거나 웹 브라우저를 시작하고 최신 Python 문서를 보여주는 docs.python.org를여십시오.</target>
        </trans-unit>
        <trans-unit id="7c0061ddf6eb005af80c77ef4895dee301897968" translate="yes" xml:space="preserve">
          <source>Access optional transport information; see &lt;a href=&quot;asyncio-protocol#asyncio.BaseTransport.get_extra_info&quot;&gt;&lt;code&gt;BaseTransport.get_extra_info()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">선택적 운송 정보에 액세스하십시오. 자세한 내용은 &lt;a href=&quot;asyncio-protocol#asyncio.BaseTransport.get_extra_info&quot;&gt; &lt;code&gt;BaseTransport.get_extra_info()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5d1bb3577165fc1967c20f6f0b33bb6defaf538a" translate="yes" xml:space="preserve">
          <source>Access to external objects</source>
          <target state="translated">외부 객체에 대한 액세스</target>
        </trans-unit>
        <trans-unit id="7317b09c89f800370b38efea04c5464e8c108a83" translate="yes" xml:space="preserve">
          <source>Access to internal objects</source>
          <target state="translated">내부 객체에 액세스</target>
        </trans-unit>
        <trans-unit id="d4dc38860a079acbf5040cd2135bd4d353e54f20" translate="yes" xml:space="preserve">
          <source>Access to message catalogs</source>
          <target state="translated">메시지 카탈로그에 액세스</target>
        </trans-unit>
        <trans-unit id="0b1a55fa626d7cf9e11c68cb8e95989f234a6996" translate="yes" xml:space="preserve">
          <source>Access to standard Tk dialog boxes.</source>
          <target state="translated">표준 Tk 대화 상자에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="9e838cb51991a7a2ef425afc34411b6a4cf0eae9" translate="yes" xml:space="preserve">
          <source>Accessing Policies</source>
          <target state="translated">정책 접근</target>
        </trans-unit>
        <trans-unit id="260c8c30ecab2bf1e4877cdc49b57bce6210e08e" translate="yes" xml:space="preserve">
          <source>Accessing a corrupted shared library</source>
          <target state="translated">손상된 공유 라이브러리에 액세스</target>
        </trans-unit>
        <trans-unit id="71af361ba292908615dcf5c8ccee9e932f4b7e7c" translate="yes" xml:space="preserve">
          <source>Accessing a function on a loaded library raises an auditing event &lt;code&gt;ctypes.dlsym&lt;/code&gt; with arguments &lt;code&gt;library&lt;/code&gt; (the library object) and &lt;code&gt;name&lt;/code&gt; (the symbol&amp;rsquo;s name as a string or integer).</source>
          <target state="translated">로드 된 라이브러리에서 함수에 액세스하면 인수 &lt;code&gt;library&lt;/code&gt; (라이브러리 오브젝트) 및 &lt;code&gt;name&lt;/code&gt; (문자열 또는 정수로서의 심볼 이름 )과 함께 감사 이벤트 &lt;code&gt;ctypes.dlsym&lt;/code&gt; 이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="c107c49a03817af8952bc8c0d4b6dc68bc4b981a" translate="yes" xml:space="preserve">
          <source>Accessing arguments by name:</source>
          <target state="translated">이름으로 인수에 액세스 :</target>
        </trans-unit>
        <trans-unit id="39422cfc3ffb30101755ff1504a2df9d616edb97" translate="yes" xml:space="preserve">
          <source>Accessing arguments by position:</source>
          <target state="translated">위치별로 인수에 액세스 :</target>
        </trans-unit>
        <trans-unit id="c4c9579bed0a7c63cc4d3b8d869c7d36d72fd3ac" translate="yes" xml:space="preserve">
          <source>Accessing arguments&amp;rsquo; attributes:</source>
          <target state="translated">인수 속성에 액세스 :</target>
        </trans-unit>
        <trans-unit id="41bb86cb017873fc6e571fbe9e03f681538517ea" translate="yes" xml:space="preserve">
          <source>Accessing arguments&amp;rsquo; items:</source>
          <target state="translated">인수 항목에 액세스 :</target>
        </trans-unit>
        <trans-unit id="9f0cf49831f659798a76611095b43215b4381b8b" translate="yes" xml:space="preserve">
          <source>Accessing columns by name instead of by index</source>
          <target state="translated">인덱스가 아닌 이름으로 열에 액세스</target>
        </trans-unit>
        <trans-unit id="eecb5e7f1b2d16b54279aa55ca5db3732ef01003" translate="yes" xml:space="preserve">
          <source>Accessing functions from loaded dlls</source>
          <target state="translated">로드 된 dll에서 함수에 액세스</target>
        </trans-unit>
        <trans-unit id="8af8bbaf1dc41a5f30738fb7558c136542598c8b" translate="yes" xml:space="preserve">
          <source>Accessing individual parts</source>
          <target state="translated">개별 부품에 액세스</target>
        </trans-unit>
        <trans-unit id="87c5f0dfffab33c1f436f570abacf72146401b9c" translate="yes" xml:space="preserve">
          <source>Accessing the standard C library through &lt;code&gt;cdll.msvcrt&lt;/code&gt; will use an outdated version of the library that may be incompatible with the one being used by Python. Where possible, use native Python functionality, or else import and use the &lt;code&gt;msvcrt&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;cdll.msvcrt&lt;/code&gt; 를 통해 표준 C 라이브러리에 액세스하면 Python에서 사용중인 라이브러리와 호환되지 않는 오래된 버전의 라이브러리가 사용됩니다. 가능한 경우 기본 Python 기능을 사용하거나 &lt;code&gt;msvcrt&lt;/code&gt; 모듈을 가져 와서 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="82e4d72e3858dc40ef697c71e9c99dd6d1762691" translate="yes" xml:space="preserve">
          <source>Accessing values exported from dlls</source>
          <target state="translated">dll에서 내 보낸 값에 액세스</target>
        </trans-unit>
        <trans-unit id="48469f0816b7d8b7b69f202f36d7c603ac67c4b9" translate="yes" xml:space="preserve">
          <source>Accessor Methods</source>
          <target state="translated">접근 자 방법</target>
        </trans-unit>
        <trans-unit id="44e86821ee29ea1890c19e6deb0a802a148a4975" translate="yes" xml:space="preserve">
          <source>According to POSIX, a program which has not called &lt;code&gt;setlocale(LC_ALL, '')&lt;/code&gt; runs using the portable &lt;code&gt;'C'&lt;/code&gt; locale. Calling &lt;code&gt;setlocale(LC_ALL, '')&lt;/code&gt; lets it use the default locale as defined by the &lt;code id=&quot;index-2&quot;&gt;LANG&lt;/code&gt; variable. Since we do not want to interfere with the current locale setting we thus emulate the behavior in the way described above.</source>
          <target state="translated">POSIX에 따르면 &lt;code&gt;setlocale(LC_ALL, '')&lt;/code&gt; 호출하지 않은 프로그램 은 휴대용 &lt;code&gt;'C'&lt;/code&gt; 로캘을 사용하여 실행 됩니다. &lt;code&gt;setlocale(LC_ALL, '')&lt;/code&gt; 호출 하면 &lt;code id=&quot;index-2&quot;&gt;LANG&lt;/code&gt; 변수 로 정의 된 기본 로케일을 사용할 수 있습니다 . 현재 로케일 설정을 방해하지 않기 때문에 위에서 설명한 방식으로 동작을 에뮬레이트합니다.</target>
        </trans-unit>
        <trans-unit id="714a2a15ee3782a1162d672762e78d0a38134e5b" translate="yes" xml:space="preserve">
          <source>According to the letter of &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt;, 301 and 302 responses to POST requests must not be automatically redirected without confirmation by the user. In reality, browsers do allow automatic redirection of these responses, changing the POST to a GET, and &lt;a href=&quot;urllib#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt; reproduces this behaviour.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt; 의 서한에 따르면 POST 요청에 대한 301 및 302 응답은 사용자의 확인없이 자동으로 리디렉션되지 않아야합니다. 실제로 브라우저는 이러한 응답의 자동 리디렉션을 허용하여 POST를 GET으로 변경하고 &lt;a href=&quot;urllib#module-urllib&quot;&gt; &lt;code&gt;urllib&lt;/code&gt; &lt;/a&gt; 은이 동작을 재현합니다.</target>
        </trans-unit>
        <trans-unit id="ad55855dcbc1c5b89cea1605223f9aada3fabb2b" translate="yes" xml:space="preserve">
          <source>Accordingly, constructor arguments are interpreted as for &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">따라서 생성자 인수는 &lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray()&lt;/code&gt; &lt;/a&gt; 로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="082af44e6d89682179d27fdfd34277a7e0c2c9af" translate="yes" xml:space="preserve">
          <source>Acknowledgement</source>
          <target state="translated">Acknowledgement</target>
        </trans-unit>
        <trans-unit id="b0ebcfe59f276beb7f6238d812ac61ce48d3d9c0" translate="yes" xml:space="preserve">
          <source>Acknowledgements</source>
          <target state="translated">Acknowledgements</target>
        </trans-unit>
        <trans-unit id="81d5a6accac3654cbf66608938b8c9013df0a3bc" translate="yes" xml:space="preserve">
          <source>Acquire a lock, blocking or non-blocking.</source>
          <target state="translated">잠금, 차단 또는 비 차단을 확보하십시오.</target>
        </trans-unit>
        <trans-unit id="e60a27e953c80127dc19a93298d1b0c5a8852bd6" translate="yes" xml:space="preserve">
          <source>Acquire a semaphore.</source>
          <target state="translated">세마포어를 확보하십시오.</target>
        </trans-unit>
        <trans-unit id="d6a249c8c3f9d0be2a91d76168ee36b7ef8d69d0" translate="yes" xml:space="preserve">
          <source>Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it. An &lt;a href=&quot;#mailbox.ExternalClashError&quot;&gt;&lt;code&gt;ExternalClashError&lt;/code&gt;&lt;/a&gt; is raised if the lock is not available. The particular locking mechanisms used depend upon the mailbox format. You should &lt;em&gt;always&lt;/em&gt; lock the mailbox before making any modifications to its contents.</source>
          <target state="translated">다른 프로세스가이를 수정하지 않도록 사서함에 대한 독점 권고 잠금을 획득하십시오. &lt;a href=&quot;#mailbox.ExternalClashError&quot;&gt; &lt;code&gt;ExternalClashError&lt;/code&gt; 는&lt;/a&gt; 락을 사용할 수없는 경우 발생합니다. 사용되는 특정 잠금 메커니즘은 사서함 형식에 따라 다릅니다. 내용물을 수정하기 전에 &lt;em&gt;항상&lt;/em&gt; 사서함을 잠 가야합니다 .</target>
        </trans-unit>
        <trans-unit id="7c4dfd85bf2c256ca750cb8f4e1e2fba7ac6580e" translate="yes" xml:space="preserve">
          <source>Acquire the lock.</source>
          <target state="translated">잠금을 획득하십시오.</target>
        </trans-unit>
        <trans-unit id="461410d014d419ab175b1ebecd08ac6c77a09658" translate="yes" xml:space="preserve">
          <source>Acquire the underlying lock.</source>
          <target state="translated">기본 잠금을 획득하십시오.</target>
        </trans-unit>
        <trans-unit id="dafb6140598e25081787ea267e056be855b6622a" translate="yes" xml:space="preserve">
          <source>Acquire the underlying lock. This method calls the corresponding method on the underlying lock; the return value is whatever that method returns.</source>
          <target state="translated">기본 잠금을 획득하십시오. 이 메소드는 기본 잠금에서 해당 메소드를 호출합니다. 반환 값은 그 메소드가 돌려주는 것입니다.</target>
        </trans-unit>
        <trans-unit id="30560da991fdd301ae97abf02a27135578dee389" translate="yes" xml:space="preserve">
          <source>Acquires the thread lock created with &lt;a href=&quot;#logging.Handler.createLock&quot;&gt;&lt;code&gt;createLock()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#logging.Handler.createLock&quot;&gt; &lt;code&gt;createLock()&lt;/code&gt; &lt;/a&gt; 작성된 스레드 잠금을 획득 합니다.</target>
        </trans-unit>
        <trans-unit id="9292d87e220d1c1446b9354a9141178078ba0d7e" translate="yes" xml:space="preserve">
          <source>Acquiring a lock is &lt;em&gt;fair&lt;/em&gt;: the coroutine that proceeds will be the first coroutine that started waiting on the lock.</source>
          <target state="translated">잠금 획득은 &lt;em&gt;공정합니다&lt;/em&gt; . 진행되는 코 루틴은 잠금 대기를 시작한 첫 번째 코 루틴이됩니다.</target>
        </trans-unit>
        <trans-unit id="084ab4fd9c6c6c0f36d4f70f9d53acd358725da3" translate="yes" xml:space="preserve">
          <source>Act like &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;, except that for any subpart of the message passed to &lt;a href=&quot;#email.generator.Generator.flatten&quot;&gt;&lt;code&gt;Generator.flatten()&lt;/code&gt;&lt;/a&gt;, if the subpart is of main type &lt;em&gt;text&lt;/em&gt;, print the decoded payload of the subpart, and if the main type is not &lt;em&gt;text&lt;/em&gt;, instead of printing it fill in the string &lt;em&gt;fmt&lt;/em&gt; using information from the part and print the resulting filled-in string.</source>
          <target state="translated">같은 역할을 &lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt; 에 전달 된 메시지의 서브 파트에 대한 것을 제외하고, &lt;a href=&quot;#email.generator.Generator.flatten&quot;&gt; &lt;code&gt;Generator.flatten()&lt;/code&gt; &lt;/a&gt; 하부 파트는 주요 유형 인 경우, &lt;em&gt;텍스트&lt;/em&gt; 의 서브 파트의 디코딩 된 페이로드를 인쇄하고 주요 유형이 아닌 경우 &lt;em&gt;텍스트&lt;/em&gt; 대신 인쇄의, 부품 정보를 사용하여 문자열 &lt;em&gt;fmt&lt;/em&gt; 를 채우고 결과로 채워진 문자열을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="97c89a4d6630adeb18fa12ba9976a31413fe293e" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="translated">Action</target>
        </trans-unit>
        <trans-unit id="9ace32a6134122ed597eae8340ee6101df735b51" translate="yes" xml:space="preserve">
          <source>Action classes</source>
          <target state="translated">액션 클래스</target>
        </trans-unit>
        <trans-unit id="77717846e87426ca8b4508db5527a0d857cc7d2e" translate="yes" xml:space="preserve">
          <source>Action classes implement the Action API, a callable which returns a callable which processes arguments from the command-line. Any object which follows this API may be passed as the &lt;code&gt;action&lt;/code&gt; parameter to &lt;code&gt;add_argument()&lt;/code&gt;.</source>
          <target state="translated">액션 클래스는 명령 행에서 인수를 처리하는 콜 러블을 반환하는 콜 러블 인 액션 API를 구현합니다. 이 API를 따르는 모든 객체 는 &lt;code&gt;add_argument()&lt;/code&gt; &lt;code&gt;action&lt;/code&gt; 매개 변수로 전달 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9513bff63fa8a804ba98e02cb9596699d8340afc" translate="yes" xml:space="preserve">
          <source>Action instances should be callable, so subclasses must override the &lt;code&gt;__call__&lt;/code&gt; method, which should accept four parameters:</source>
          <target state="translated">액션 인스턴스는 호출 가능해야하므로 서브 클래스는 &lt;code&gt;__call__&lt;/code&gt; 메소드를 재정의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="278d19782a6ed5702bc055475169e14e49eb9e12" translate="yes" xml:space="preserve">
          <source>Action objects are used by an ArgumentParser to represent the information needed to parse a single argument from one or more strings from the command line. The Action class must accept the two positional arguments plus any keyword arguments passed to &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;ArgumentParser.add_argument()&lt;/code&gt;&lt;/a&gt; except for the &lt;code&gt;action&lt;/code&gt; itself.</source>
          <target state="translated">액션 객체는 ArgumentParser에 의해 사용되어 명령 행에서 하나 이상의 문자열에서 단일 인수를 구문 분석하는 데 필요한 정보를 나타냅니다. Action 클래스는 &lt;code&gt;action&lt;/code&gt; 자체를 제외하고 두 개의 위치 인수와 &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;ArgumentParser.add_argument()&lt;/code&gt; &lt;/a&gt; 전달 된 키워드 인수를 허용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="274ade548ee72e34686330c533661a7563d8223c" translate="yes" xml:space="preserve">
          <source>Action subclasses can define a &lt;code&gt;format_usage&lt;/code&gt; method that takes no argument and return a string which will be used when printing the usage of the program. If such method is not provided, a sensible default will be used.</source>
          <target state="translated">Action subclasses can define a &lt;code&gt;format_usage&lt;/code&gt; method that takes no argument and return a string which will be used when printing the usage of the program. If such method is not provided, a sensible default will be used.</target>
        </trans-unit>
        <trans-unit id="91165131a7ce5acb4d4c719b4a605bf1d3ffc98c" translate="yes" xml:space="preserve">
          <source>Action taken</source>
          <target state="translated">취한 조치</target>
        </trans-unit>
        <trans-unit id="e6380d337be56a56fb3795f7ef7ee4cb17f21bca" translate="yes" xml:space="preserve">
          <source>ActiveState Tcl Home Page</source>
          <target state="translated">ActiveState Tcl 홈 페이지</target>
        </trans-unit>
        <trans-unit id="38727212af340538ef4171b11f8f296a8643ef4c" translate="yes" xml:space="preserve">
          <source>Actually needing to do this is likely to indicate that the underlying API should be providing a direct resource management interface for use with &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statements, but not all APIs are well designed in that regard. When a context manager is the only resource management API provided, then &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; can make it easier to handle various situations that can&amp;rsquo;t be handled directly in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">실제로이를 수행해야하는 것은 기본 API가 &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; 문과 함께 사용할 직접 리소스 관리 인터페이스를 제공해야 하지만 모든 API가 이와 관련하여 잘 설계된 것은 아님을 나타냅니다. 컨텍스트 관리자가 유일하게 제공된 자원 관리 API 인 경우 &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; 을 사용하면 &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 문 에서 직접 처리 할 수없는 다양한 상황을보다 쉽게 ​​처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="d6e5856f7f4aca3ca4e4aef48b9bc8f012312bf5" translate="yes" xml:space="preserve">
          <source>Actually needing to do this is likely to indicate that the underlying API should be providing a direct resource management interface for use with &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statements, but not all APIs are well designed in that regard. When a context manager is the only resource management API provided, then &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; can make it easier to handle various situations that can&amp;rsquo;t be handled directly in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">Actually needing to do this is likely to indicate that the underlying API should be providing a direct resource management interface for use with &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;/&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt;/&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; statements, but not all APIs are well designed in that regard. When a context manager is the only resource management API provided, then &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; can make it easier to handle various situations that can&amp;rsquo;t be handled directly in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; statement.</target>
        </trans-unit>
        <trans-unit id="3bcbe0ccc46b10727260a3caa552d07256bb7ae9" translate="yes" xml:space="preserve">
          <source>Actually processes the request by instantiating &lt;a href=&quot;#socketserver.BaseServer.RequestHandlerClass&quot;&gt;&lt;code&gt;RequestHandlerClass&lt;/code&gt;&lt;/a&gt; and calling its &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">실제로 &lt;a href=&quot;#socketserver.BaseServer.RequestHandlerClass&quot;&gt; &lt;code&gt;RequestHandlerClass&lt;/code&gt; &lt;/a&gt; 를 인스턴스화 하고 &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 메소드를 호출 하여 요청을 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="c5a9bba7132d69477d4076fafc264c171f0a320f" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;default&lt;/code&gt;&lt;a href=&quot;warnings#describing-warning-filters&quot;&gt;warning filter&lt;/a&gt;. The following warnings are shown:</source>
          <target state="translated">Add &lt;code&gt;default&lt;/code&gt; &lt;a href=&quot;warnings#describing-warning-filters&quot;&gt;warning filter&lt;/a&gt;. The following warnings are shown:</target>
        </trans-unit>
        <trans-unit id="afe8d459e873bfae322eb1ff9286a5013dcb630e" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;fallback&lt;/em&gt; as the fallback object for the current translation object. A translation object should consult the fallback if it cannot provide a translation for a given message.</source>
          <target state="translated">현재 번역 개체의 대체 개체로 &lt;em&gt;대체&lt;/em&gt; 를 추가 합니다. 주어진 메시지에 대한 번역을 제공 할 수없는 경우 번역 개체는 대체를 참조해야합니다.</target>
        </trans-unit>
        <trans-unit id="af8c722ee4c8561359335870777e3e5bf87069a7" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;increment&lt;/em&gt; to the process&amp;rsquo;s &amp;ldquo;niceness&amp;rdquo;. Return the new niceness.</source>
          <target state="translated">프로세스의 &quot;niceness&quot;에 &lt;em&gt;증분&lt;/em&gt; 을 추가하십시오 . 새로운 멋을 돌려주십시오.</target>
        </trans-unit>
        <trans-unit id="aa7983e1a637a4577bc6fffefae3ed5cea5dab92" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;items&lt;/em&gt; to the selection.</source>
          <target state="translated">선택에 &lt;em&gt;항목&lt;/em&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="30c0a49b754a66b21573177a7299d76b8a5c131c" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;label&lt;/em&gt; to the list of labels on the message.</source>
          <target state="translated">추가 &lt;em&gt;라벨을&lt;/em&gt; 메시지에 레이블 목록.</target>
        </trans-unit>
        <trans-unit id="24db3772802faeab198405cd43d9db88ced07a1d" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;message&lt;/em&gt; to the mailbox and return the key that has been assigned to it.</source>
          <target state="translated">사서함에 &lt;em&gt;메시지&lt;/em&gt; 를 추가 하고 할당 된 키를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="5479b5f1d60a39cb75d31bd42ec9f9c48e1b4a8b" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;prefix&lt;/em&gt; to the beginning of selected lines in &lt;em&gt;text&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;텍스트&lt;/em&gt; 에서 선택한 줄의 시작 부분에 &lt;em&gt;접두사&lt;/em&gt; 를 추가 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="f44aea08a2fc88ec1e9f6c30ad49d2629a71e470" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;sequence&lt;/em&gt; to the list of sequences that include this message.</source>
          <target state="translated">추가 &lt;em&gt;순서를&lt;/em&gt; 이 메시지를 포함 시퀀스 목록에.</target>
        </trans-unit>
        <trans-unit id="33a10ccdd8fd003a788443c4b85ed7eb60938600" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;x&lt;/em&gt; to the left side of the deque.</source>
          <target state="translated">데크 왼쪽에 &lt;em&gt;x&lt;/em&gt; 를 추가 합니다.</target>
        </trans-unit>
        <trans-unit id="3c25d5c0076f9d7d52148b8e3bb5f41c9a4a2f9d" translate="yes" xml:space="preserve">
          <source>Add &lt;em&gt;x&lt;/em&gt; to the right side of the deque.</source>
          <target state="translated">deque의 오른쪽에 &lt;em&gt;x&lt;/em&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="24e6030669a49381174c0b5a66ddd6ac0dadd387" translate="yes" xml:space="preserve">
          <source>Add a (possibly multi-valued) header, with optional MIME parameters specified via keyword arguments.</source>
          <target state="translated">키워드 인수를 통해 지정된 선택적 MIME 매개 변수를 사용하여 (다중 값의) 헤더를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6ad671132a650abe04ac0277b23f2bd3dcbd37dd" translate="yes" xml:space="preserve">
          <source>Add a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; to the suite.</source>
          <target state="translated">스위트에 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;TestSuite&lt;/code&gt; &lt;/a&gt; 를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="cb9e0dfa54f74decdc101fb5b211589918af267c" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;#!&lt;/code&gt; line to the archive specifying &lt;em&gt;interpreter&lt;/em&gt; as the command to run. Also, on POSIX, make the archive executable. The default is to write no &lt;code&gt;#!&lt;/code&gt; line, and not make the file executable.</source>
          <target state="translated">&lt;code&gt;#!&lt;/code&gt; 추가하십시오 ! &lt;em&gt;인터프리터&lt;/em&gt; 를 실행할 명령으로 지정하여 아카이브 행 . 또한 POSIX에서 아카이브를 실행 파일로 만듭니다. 기본값은 &lt;code&gt;#!&lt;/code&gt; 을 쓰지 않는 것입니다 ! 파일을 실행 가능하게 만들지 마십시오.</target>
        </trans-unit>
        <trans-unit id="11966b392bbd5d32167852567e5699616e11388f" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;Content-Type&lt;/em&gt; header with a &lt;code&gt;maintype/subtype&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;maintype/subtype&lt;/code&gt; 값 으로 &lt;em&gt;Content-Type&lt;/em&gt; 헤더를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="84ac69830ac328f5af24cd917082c8ab71ae0bdd" translate="yes" xml:space="preserve">
          <source>Add a callback to be run when the Future is &lt;em&gt;done&lt;/em&gt;.</source>
          <target state="translated">Future가 &lt;em&gt;완료&lt;/em&gt; 될 때 실행할 콜백을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="21ad57f0c79a1dece0ae4e997db0ef88ee98f10c" translate="yes" xml:space="preserve">
          <source>Add a callback to be run when the Task is &lt;em&gt;done&lt;/em&gt;.</source>
          <target state="translated">작업이 &lt;em&gt;완료&lt;/em&gt; 되면 실행할 콜백을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="e692059a99db6212feae89c0b74f4f86c48a8179" translate="yes" xml:space="preserve">
          <source>Add a character set alias. &lt;em&gt;alias&lt;/em&gt; is the alias name, e.g. &lt;code&gt;latin-1&lt;/code&gt;. &lt;em&gt;canonical&lt;/em&gt; is the character set&amp;rsquo;s canonical name, e.g. &lt;code&gt;iso-8859-1&lt;/code&gt;.</source>
          <target state="translated">문자 세트 별명을 추가하십시오. &lt;em&gt;alias&lt;/em&gt; 는 별칭 이름입니다 (예 : &lt;code&gt;latin-1&lt;/code&gt; ) . &lt;em&gt;canonical&lt;/em&gt; 은 문자 세트의 정식 이름입니다 (예 : &lt;code&gt;iso-8859-1&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="11e078738b2dfdecaf78a03a7ad2e1f50dd6454f" translate="yes" xml:space="preserve">
          <source>Add a codec that map characters in the given character set to and from Unicode.</source>
          <target state="translated">주어진 문자 세트의 문자를 유니 코드와 매핑하는 코덱을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="6864afe1da0b0e5f3b0be081911c070361ce7f9d" translate="yes" xml:space="preserve">
          <source>Add a director as parent.</source>
          <target state="translated">감독을 부모로 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="f4f4ec5cb3f34d7548e8ce61a5b61b98f0a79146" translate="yes" xml:space="preserve">
          <source>Add a directory to sys.path and process its &lt;code&gt;.pth&lt;/code&gt; files. Typically used in &lt;code&gt;sitecustomize&lt;/code&gt; or &lt;code&gt;usercustomize&lt;/code&gt; (see above).</source>
          <target state="translated">sys.path에 디렉토리를 추가하고 &lt;code&gt;.pth&lt;/code&gt; 파일을 처리 하십시오. 일반적으로 &lt;code&gt;sitecustomize&lt;/code&gt; &lt;code&gt;usercustomize&lt;/code&gt; 정의 또는 사용자 사용자 정의에 사용됩니다 (위 참조).</target>
        </trans-unit>
        <trans-unit id="b7e0cf044bf83f105b1c2df55e4a2994ff91feee" translate="yes" xml:space="preserve">
          <source>Add a file to the current component of the directory, starting a new one if there is no current component. By default, the file name in the source and the file table will be identical. If the &lt;em&gt;src&lt;/em&gt; file is specified, it is interpreted relative to the current directory. Optionally, a &lt;em&gt;version&lt;/em&gt; and a &lt;em&gt;language&lt;/em&gt; can be specified for the entry in the File table.</source>
          <target state="translated">현재 구성 요소가없는 경우 새 구성 요소를 시작하여 디렉토리의 현재 구성 요소에 파일을 추가하십시오. 기본적으로 소스와 파일 테이블의 파일 이름은 동일합니다. 는 IF &lt;em&gt;의 src&lt;/em&gt; 파일이 지정되어, 현재 디렉토리를 기준으로 해석됩니다. 선택적으로 파일 테이블의 항목에 &lt;em&gt;버전&lt;/em&gt; 과 &lt;em&gt;언어를&lt;/em&gt; 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1b148a57e911bae17afc91f03e7661232e219c7" translate="yes" xml:space="preserve">
          <source>Add a function to be called after &lt;a href=&quot;#unittest.TestCase.tearDown&quot;&gt;&lt;code&gt;tearDown()&lt;/code&gt;&lt;/a&gt; to cleanup resources used during the test. Functions will be called in reverse order to the order they are added (</source>
          <target state="translated">테스트 중에 사용 된 리소스를 정리하기 위해 &lt;a href=&quot;#unittest.TestCase.tearDown&quot;&gt; &lt;code&gt;tearDown()&lt;/code&gt; &lt;/a&gt; 후에 호출 할 함수를 추가하십시오 . 함수는 추가 된 순서와 역순으로 호출됩니다 (</target>
        </trans-unit>
        <trans-unit id="78ce526e4b4169e82bfb42d8527ed56483cd78b4" translate="yes" xml:space="preserve">
          <source>Add a function to be called after &lt;a href=&quot;#unittest.TestCase.tearDownClass&quot;&gt;&lt;code&gt;tearDownClass()&lt;/code&gt;&lt;/a&gt; to cleanup resources used during the test class. Functions will be called in reverse order to the order they are added (</source>
          <target state="translated">테스트 클래스 중에 사용 된 자원을 정리하기 위해 &lt;a href=&quot;#unittest.TestCase.tearDownClass&quot;&gt; &lt;code&gt;tearDownClass()&lt;/code&gt; &lt;/a&gt; 다음에 호출 할 함수를 추가하십시오 . 함수는 추가 된 순서와 역순으로 호출됩니다 (</target>
        </trans-unit>
        <trans-unit id="5b62e8d801245195a11f24b7a0d01ffecdbafd41" translate="yes" xml:space="preserve">
          <source>Add a function to be called after &lt;code&gt;tearDownModule()&lt;/code&gt; to cleanup resources used during the test class. Functions will be called in reverse order to the order they are added (</source>
          <target state="translated">테스트 클래스 중에 사용 된 자원을 정리하기 위해 &lt;code&gt;tearDownModule()&lt;/code&gt; 다음에 호출 할 함수를 추가하십시오 . 함수는 추가 된 순서와 역순으로 호출됩니다 (</target>
        </trans-unit>
        <trans-unit id="9beb6337ad420738cf187ef7704f4b9c84fc673f" translate="yes" xml:space="preserve">
          <source>Add a handler for a &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt; 처리기를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="d38459dabab55a25da4ed78ba4eb990299fd36c8" translate="yes" xml:space="preserve">
          <source>Add a header that will not be added to a redirected request.</source>
          <target state="translated">리디렉션 된 요청에 추가되지 않을 헤더를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="f2603d5ae35616f68557abf0dc068f3846cc8c46" translate="yes" xml:space="preserve">
          <source>Add a header to the message with field name &lt;em&gt;name&lt;/em&gt; and value &lt;em&gt;val&lt;/em&gt;. The field is appended to the end of the message&amp;rsquo;s existing fields.</source>
          <target state="translated">필드 이름 &lt;em&gt;name&lt;/em&gt; 및 value &lt;em&gt;val&lt;/em&gt; 을 사용하여 메시지에 헤더를 추가하십시오 . 필드는 메시지의 기존 필드 끝에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="8a8b78b89a289dd8343df6ddfaae9ce828ff046b" translate="yes" xml:space="preserve">
          <source>Add a header to the message with field name &lt;em&gt;name&lt;/em&gt; and value &lt;em&gt;val&lt;/em&gt;. The field is appended to the end of the message&amp;rsquo;s existing headers.</source>
          <target state="translated">필드 이름 &lt;em&gt;name&lt;/em&gt; 및 value &lt;em&gt;val&lt;/em&gt; 을 사용하여 메시지에 헤더를 추가하십시오 . 이 필드는 메시지의 기존 헤더 끝에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="399487ac348d2614389b7168ca41dd04673b039c" translate="yes" xml:space="preserve">
          <source>Add a list of files to the current component as specified in the glob pattern. Individual files can be excluded in the &lt;em&gt;exclude&lt;/em&gt; list.</source>
          <target state="translated">glob 패턴에 지정된대로 파일 목록을 현재 구성 요소에 추가하십시오. &lt;em&gt;제외&lt;/em&gt; 목록 에서 개별 파일을 제외 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a132f64a1d2da65d23dfabb4ad146d6d74425848" translate="yes" xml:space="preserve">
          <source>Add a mapping from the MIME type &lt;em&gt;type&lt;/em&gt; to the extension &lt;em&gt;ext&lt;/em&gt;. When the extension is already known, the new type will replace the old one. When the type is already known the extension will be added to the list of known extensions.</source>
          <target state="translated">MIME 형식에서 매핑을 추가 &lt;em&gt;형&lt;/em&gt; 확장에 &lt;em&gt;내선&lt;/em&gt; . 확장이 이미 알려진 경우 새 유형이 이전 유형을 대체합니다. 유형이 이미 알려진 경우 확장이 알려진 확장 목록에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="7632c76ae9b370fe2c8ab64acfc2c8365dcbe310" translate="yes" xml:space="preserve">
          <source>Add a mark with the given id (larger than 0), and the given name at the given position. This method can be called at any time before &lt;a href=&quot;#aifc.aifc.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진 id (0보다 큰)와 주어진 이름으로 주어진 위치에 마크를 추가하십시오. 이 메소드는 &lt;a href=&quot;#aifc.aifc.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 전에 언제든지 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c5dbd50d1faa7567cdc7358bac4bacf2a33aa997" translate="yes" xml:space="preserve">
          <source>Add a new action at the beginning. See &lt;a href=&quot;#pipes.Template.append&quot;&gt;&lt;code&gt;append()&lt;/code&gt;&lt;/a&gt; for explanations of the arguments.</source>
          <target state="translated">처음에 새로운 액션을 추가하십시오. 인수에 대한 설명은 &lt;a href=&quot;#pipes.Template.append&quot;&gt; &lt;code&gt;append()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="043d2a3cceb4af1dd193034c1f7337a877747c87" translate="yes" xml:space="preserve">
          <source>Add a new attribute node to the element, replacing an existing attribute if necessary if the &lt;code&gt;name&lt;/code&gt; attribute matches. If a replacement occurs, the old attribute node will be returned. If &lt;em&gt;newAttr&lt;/em&gt; is already in use, &lt;a href=&quot;#xml.dom.InuseAttributeErr&quot;&gt;&lt;code&gt;InuseAttributeErr&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 속성이 일치 하는 경우 필요한 경우 기존 속성을 대체하여 새 속성 노드를 요소에 추가하십시오 . 교체가 발생하면 이전 속성 노드가 반환됩니다. 경우 &lt;em&gt;이 newAttr이&lt;/em&gt; 이미 사용하고, &lt;a href=&quot;#xml.dom.InuseAttributeErr&quot;&gt; &lt;code&gt;InuseAttributeErr&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="83d2435f056be8af45e7ae386b8b99adbd638555" translate="yes" xml:space="preserve">
          <source>Add a new attribute node to the element, replacing an existing attribute if necessary if the &lt;code&gt;namespaceURI&lt;/code&gt; and &lt;code&gt;localName&lt;/code&gt; attributes match. If a replacement occurs, the old attribute node will be returned. If &lt;em&gt;newAttr&lt;/em&gt; is already in use, &lt;a href=&quot;#xml.dom.InuseAttributeErr&quot;&gt;&lt;code&gt;InuseAttributeErr&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">&lt;code&gt;namespaceURI&lt;/code&gt; 및 &lt;code&gt;localName&lt;/code&gt; 속성이 일치 하는 경우 필요한 경우 기존 속성을 대체하여 새 속성 노드를 요소에 추가하십시오 . 교체가 발생하면 이전 속성 노드가 반환됩니다. 경우 &lt;em&gt;이 newAttr이&lt;/em&gt; 이미 사용하고, &lt;a href=&quot;#xml.dom.InuseAttributeErr&quot;&gt; &lt;code&gt;InuseAttributeErr&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5f1ba12e042226aebc04d021425dcda3c82b9d6d" translate="yes" xml:space="preserve">
          <source>Add a new child node to this node at the end of the list of children, returning &lt;em&gt;newChild&lt;/em&gt;. If the node was already in the tree, it is removed first.</source>
          <target state="translated">자식 목록 &lt;em&gt;끝에이&lt;/em&gt; 노드에 새 자식 노드를 추가하여 &lt;em&gt;newChild를&lt;/em&gt; 반환 합니다. 노드가 이미 트리에있는 경우 먼저 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="4320fe50407e125c401df7995f33a5363ae33796" translate="yes" xml:space="preserve">
          <source>Add a new node and its predecessors to the graph. Both the &lt;em&gt;node&lt;/em&gt; and all elements in &lt;em&gt;predecessors&lt;/em&gt; must be hashable.</source>
          <target state="translated">Add a new node and its predecessors to the graph. Both the &lt;em&gt;node&lt;/em&gt; and all elements in &lt;em&gt;predecessors&lt;/em&gt; must be hashable.</target>
        </trans-unit>
        <trans-unit id="956452c465afe1d5906a42ce4cf84991525c7da4" translate="yes" xml:space="preserve">
          <source>Add a new record to the &lt;code&gt;Feature&lt;/code&gt; table, using the values &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;parent.id&lt;/em&gt;, &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;desc&lt;/em&gt;, &lt;em&gt;display&lt;/em&gt;, &lt;em&gt;level&lt;/em&gt;, &lt;em&gt;directory&lt;/em&gt;, and &lt;em&gt;attributes&lt;/em&gt;. The resulting feature object can be passed to the &lt;code&gt;start_component()&lt;/code&gt; method of &lt;a href=&quot;#msilib.Directory&quot;&gt;&lt;code&gt;Directory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">값 &lt;em&gt;id&lt;/em&gt; , &lt;em&gt;parent.id&lt;/em&gt; , &lt;em&gt;title&lt;/em&gt; , &lt;em&gt;desc&lt;/em&gt; , &lt;em&gt;display&lt;/em&gt; , &lt;em&gt;level&lt;/em&gt; , &lt;em&gt;directory&lt;/em&gt; 및 &lt;em&gt;attributes를&lt;/em&gt; 사용하여 &lt;code&gt;Feature&lt;/code&gt; 테이블에 새 레코드를 추가하십시오 . 결과 기능 객체는 &lt;a href=&quot;#msilib.Directory&quot;&gt; &lt;code&gt;Directory&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;start_component()&lt;/code&gt; 메소드 로 전달 될 수 있습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="edf4e5ba20ecf9c15997bd4578bcf0e6d730a52b" translate="yes" xml:space="preserve">
          <source>Add a path to the DLL search path.</source>
          <target state="translated">DLL 검색 경로에 경로를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="803042366eb338df43adb37b2c3158da3cb637b5" translate="yes" xml:space="preserve">
          <source>Add a radio button named &lt;em&gt;name&lt;/em&gt; to the group, at the coordinates &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;width&lt;/em&gt;, &lt;em&gt;height&lt;/em&gt;, and with the label &lt;em&gt;text&lt;/em&gt;. If &lt;em&gt;value&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, it defaults to &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="translated">좌표 &lt;em&gt;x&lt;/em&gt; , &lt;em&gt;y&lt;/em&gt; , &lt;em&gt;width&lt;/em&gt; , &lt;em&gt;height&lt;/em&gt; 에서 레이블 &lt;em&gt;text&lt;/em&gt; 를 사용하여 &lt;em&gt;name&lt;/em&gt; 이라는 라디오 버튼 을 그룹에 추가하십시오 . 경우 &lt;em&gt;값이&lt;/em&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 기본값은하는 &lt;em&gt;이름&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c244c1c66537416292b44411850e0f1a066b6064" translate="yes" xml:space="preserve">
          <source>Add a section named &lt;em&gt;section&lt;/em&gt; to the instance. If a section by the given name already exists, &lt;a href=&quot;#configparser.DuplicateSectionError&quot;&gt;&lt;code&gt;DuplicateSectionError&lt;/code&gt;&lt;/a&gt; is raised. If the &lt;em&gt;default section&lt;/em&gt; name is passed, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">섹션에 section이라는 &lt;em&gt;섹션&lt;/em&gt; 을 인스턴스에 추가하십시오 . 주어진 이름의 섹션이 이미 존재하면 &lt;a href=&quot;#configparser.DuplicateSectionError&quot;&gt; &lt;code&gt;DuplicateSectionError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 경우 &lt;em&gt;기본 섹션&lt;/em&gt; 이름이 전달됩니다 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 를이&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="18563df0f6461bd157eae779d180068be1023816" translate="yes" xml:space="preserve">
          <source>Add a section named &lt;em&gt;section&lt;/em&gt; to the instance. If a section by the given name already exists, &lt;a href=&quot;#configparser.DuplicateSectionError&quot;&gt;&lt;code&gt;DuplicateSectionError&lt;/code&gt;&lt;/a&gt; is raised. If the &lt;em&gt;default section&lt;/em&gt; name is passed, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. The name of the section must be a string; if not, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">섹션에 section이라는 &lt;em&gt;섹션&lt;/em&gt; 을 인스턴스에 추가하십시오 . 주어진 이름의 섹션이 이미 존재하면 &lt;a href=&quot;#configparser.DuplicateSectionError&quot;&gt; &lt;code&gt;DuplicateSectionError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 경우 &lt;em&gt;기본 섹션&lt;/em&gt; 이름이 전달됩니다 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 를이&lt;/a&gt; 발생합니다. 섹션 이름은 문자열이어야합니다. 그렇지 않으면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ec2b76ff3671d42ae4e68ce30a3d7a4f0d38926e" translate="yes" xml:space="preserve">
          <source>Add a spec to a mock. &lt;em&gt;spec&lt;/em&gt; can either be an object or a list of strings. Only attributes on the &lt;em&gt;spec&lt;/em&gt; can be fetched as attributes from the mock.</source>
          <target state="translated">모의에 사양을 추가하십시오. &lt;em&gt;spec&lt;/em&gt; 은 객체 또는 문자열 목록 일 수 있습니다. &lt;em&gt;스펙의&lt;/em&gt; 속성 만 모의 속성으로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f67e36b3f39cd8d22597658d1382717ef4e6e7a2" translate="yes" xml:space="preserve">
          <source>Add a turtle shape to TurtleScreen&amp;rsquo;s shapelist. Only thusly registered shapes can be used by issuing the command &lt;code&gt;shape(shapename)&lt;/code&gt;.</source>
          <target state="translated">TurtleScreen의 shapelist에 거북이 모양을 추가하십시오. 따라서 &lt;code&gt;shape(shapename)&lt;/code&gt; 명령을 실행하여 등록 된 모양 만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d8d20ed6f4efb55c981390f1995febb05a8b4dc" translate="yes" xml:space="preserve">
          <source>Add additional nodes to the graph.</source>
          <target state="translated">Add additional nodes to the graph.</target>
        </trans-unit>
        <trans-unit id="3a9170cfd78aba11ef6be48039048ae498ec91fe" translate="yes" xml:space="preserve">
          <source>Add all &lt;em&gt;records&lt;/em&gt; to the table named &lt;em&gt;table&lt;/em&gt; in &lt;em&gt;database&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;database&lt;/em&gt; 의 table이라는 &lt;em&gt;테이블&lt;/em&gt; 에 모든 &lt;em&gt;레코드&lt;/em&gt; 를 추가하십시오 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ecbebdd271fd104189ee86c2c855300b2e2554a0" translate="yes" xml:space="preserve">
          <source>Add all table content from &lt;em&gt;module&lt;/em&gt; to &lt;em&gt;database&lt;/em&gt;. &lt;em&gt;module&lt;/em&gt; must contain an attribute &lt;em&gt;tables&lt;/em&gt; listing all tables for which content should be added, and one attribute per table that has the actual content.</source>
          <target state="translated">모든 테이블 내용을 &lt;em&gt;모듈&lt;/em&gt; 에서 &lt;em&gt;데이터베이스로&lt;/em&gt; 추가하십시오 . &lt;em&gt;모듈&lt;/em&gt; 에는 컨텐츠를 추가해야하는 모든 테이블을 나열 하는 속성 &lt;em&gt;테이블&lt;/em&gt; 과 실제 컨텐츠가있는 테이블 당 하나의 속성이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="372176a3e2381d173f49ac01e30bb3b9770b39f4" translate="yes" xml:space="preserve">
          <source>Add all the tests from an iterable of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; instances to this test suite.</source>
          <target state="translated">반복 가능한 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;TestSuite&lt;/code&gt; &lt;/a&gt; 인스턴스 의 모든 테스트 를이 테스트 스위트에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="b492c2a99126b9234ddf251a1a59fe971fb37f2d" translate="yes" xml:space="preserve">
          <source>Add an entry to the Component table, and make this component the current component for this directory. If no component name is given, the directory name is used. If no &lt;em&gt;feature&lt;/em&gt; is given, the current feature is used. If no &lt;em&gt;flags&lt;/em&gt; are given, the directory&amp;rsquo;s default flags are used. If no &lt;em&gt;keyfile&lt;/em&gt; is given, the KeyPath is left null in the Component table.</source>
          <target state="translated">구성 요소 테이블에 항목을 추가하고이 구성 요소를이 디렉토리의 현재 구성 요소로 만드십시오. 구성 요소 이름이 제공되지 않으면 디렉토리 이름이 사용됩니다. &lt;em&gt;기능&lt;/em&gt; 이 제공 되지 않으면 현재 기능이 사용됩니다. &lt;em&gt;플래그&lt;/em&gt; 가 제공 되지 않으면 디렉토리의 기본 플래그가 사용됩니다. &lt;em&gt;키 파일&lt;/em&gt; 이 제공 되지 않으면 구성 요소 테이블에서 KeyPath가 널로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8e4ba9db45e2b8738b50e71a58cacd0bcd42541" translate="yes" xml:space="preserve">
          <source>Add an explicit test for any bugs discovered for the tested code. This will make sure that the error does not crop up again if the code is changed in the future.</source>
          <target state="translated">테스트 된 코드에서 발견 된 버그에 대한 명시 적 테스트를 추가하십시오. 이렇게하면 나중에 코드가 변경되면 오류가 다시 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b04913d79f7cfbfe6863c93041cd08396c02274" translate="yes" xml:space="preserve">
          <source>Add and return a &lt;code&gt;Bitmap&lt;/code&gt; control.</source>
          <target state="translated">&lt;code&gt;Bitmap&lt;/code&gt; 컨트롤을 추가하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f04e5aee74da749672ecd3c375440bfd289ebf25" translate="yes" xml:space="preserve">
          <source>Add and return a &lt;code&gt;CheckBox&lt;/code&gt; control.</source>
          <target state="translated">&lt;code&gt;CheckBox&lt;/code&gt; 컨트롤을 추가하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1ea55273868e472ba5cd1fdff1290be6e3270470" translate="yes" xml:space="preserve">
          <source>Add and return a &lt;code&gt;Line&lt;/code&gt; control.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; 컨트롤을 추가하고 반환하십시오 .</target>
        </trans-unit>
        <trans-unit id="32eb8ef0229fb6b8591a91aa431c3b6229972d3d" translate="yes" xml:space="preserve">
          <source>Add and return a &lt;code&gt;PushButton&lt;/code&gt; control.</source>
          <target state="translated">&lt;code&gt;PushButton&lt;/code&gt; 컨트롤을 추가하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d7f8c90252afef47d34178872d2340f46e7b6d4d" translate="yes" xml:space="preserve">
          <source>Add and return a &lt;code&gt;RadioButtonGroup&lt;/code&gt; control.</source>
          <target state="translated">&lt;code&gt;RadioButtonGroup&lt;/code&gt; 컨트롤을 추가하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="fa6a94fb866d23f14896c6e66cc37b189a24a3c4" translate="yes" xml:space="preserve">
          <source>Add and return a &lt;code&gt;Text&lt;/code&gt; control.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 컨트롤을 추가하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="13e9733ac929160d5ff41a7a4ad44c3cefe7d8b3" translate="yes" xml:space="preserve">
          <source>Add another header to the request. Headers are currently ignored by all handlers except HTTP handlers, where they are added to the list of headers sent to the server. Note that there cannot be more than one header with the same name, and later calls will overwrite previous calls in case the &lt;em&gt;key&lt;/em&gt; collides. Currently, this is no loss of HTTP functionality, since all headers which have meaning when used more than once have a (header-specific) way of gaining the same functionality using only one header.</source>
          <target state="translated">요청에 다른 헤더를 추가하십시오. 헤더는 현재 HTTP 처리기를 제외한 모든 처리기에서 무시되며, 여기서 처리기는 서버로 전송 된 헤더 목록에 추가됩니다. 동일한 이름을 가진 헤더를 두 개 이상 가질 수 없으며, &lt;em&gt;키&lt;/em&gt; 가 충돌하는 경우 이후의 호출은 이전 호출을 덮어 씁니다 . 현재 두 번 이상 사용될 때 의미가있는 모든 헤더는 하나의 헤더 만 사용하여 동일한 기능을 얻는 (헤더 별) 방식을 가지므로 HTTP 기능의 손실은 없습니다.</target>
        </trans-unit>
        <trans-unit id="29a0d6ad071e1ad1763bdd7c92a4be720791a0dc" translate="yes" xml:space="preserve">
          <source>Add as many components to this object as desired, using the &lt;code&gt;addcomponent()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;addcomponent()&lt;/code&gt; 메소드를 사용하여 원하는만큼이 오브젝트에 구성 요소를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="12c1a2c19bbd4d6f91aa72baacc717bacee4a8c0" translate="yes" xml:space="preserve">
          <source>Add attribute &lt;em&gt;attr&lt;/em&gt; from the &amp;ldquo;background&amp;rdquo; set applied to all writes to the current window.</source>
          <target state="translated">현재 창에 대한 모든 쓰기에 적용된 &quot;배경&quot;세트에서 속성 &lt;em&gt;attr&lt;/em&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="998b3790c02bae2255f37d067df86dafa27f4dbb" translate="yes" xml:space="preserve">
          <source>Add character &lt;em&gt;ch&lt;/em&gt; with attribute &lt;em&gt;attr&lt;/em&gt;, and immediately call &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt; on the window.</source>
          <target state="translated">속성 &lt;em&gt;attr&lt;/em&gt; 과 함께 문자 &lt;em&gt;ch&lt;/em&gt; 를 추가 하고 즉시 창에서 &lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt; 를 호출 하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="79b5c2ddead03fd3fd58c82009a9c6954a412b24" translate="yes" xml:space="preserve">
          <source>Add character properties to the global registry.</source>
          <target state="translated">전역 레지스트리에 문자 특성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="df120b4456df84f654f676f6eaeadfd2e64a3bb2" translate="yes" xml:space="preserve">
          <source>Add correct &lt;em&gt;Cookie&lt;/em&gt; header to &lt;em&gt;request&lt;/em&gt;.</source>
          <target state="translated">올바른 &lt;em&gt;쿠키&lt;/em&gt; 헤더를 추가 하여 &lt;em&gt;요청하십시오&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="574ee98f08df0ee8c3a2828a4f73b12f29637bb1" translate="yes" xml:space="preserve">
          <source>Add element &lt;em&gt;elem&lt;/em&gt; to the set.</source>
          <target state="translated">세트에 요소 &lt;em&gt;elem&lt;/em&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7e352b09639827f1e7d4681172bc702d69e5025a" translate="yes" xml:space="preserve">
          <source>Add headers and payload to &lt;em&gt;msg&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;msg에&lt;/em&gt; 헤더와 페이로드 추가 :</target>
        </trans-unit>
        <trans-unit id="0af4c5b16248d5b4cd5df95eeac8d02e624fbba5" translate="yes" xml:space="preserve">
          <source>Add support for when a program which uses &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; has been frozen to produce a Windows executable. (Has been tested with &lt;strong&gt;py2exe&lt;/strong&gt;, &lt;strong&gt;PyInstaller&lt;/strong&gt; and &lt;strong&gt;cx_Freeze&lt;/strong&gt;.)</source>
          <target state="translated">&lt;a href=&quot;#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt; 을 사용하는 프로그램 이 정지되어 Windows 실행 파일이 생성 될 때 지원 추가 . ( &lt;strong&gt;py2exe&lt;/strong&gt; , &lt;strong&gt;PyInstaller&lt;/strong&gt; 및 &lt;strong&gt;cx_Freeze&lt;/strong&gt; 로 테스트되었습니다 .)</target>
        </trans-unit>
        <trans-unit id="3ffc4ee278ee53e1d735791b4acf7a7f15d9b077" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object &lt;em&gt;tarinfo&lt;/em&gt; to the archive. If &lt;em&gt;fileobj&lt;/em&gt; is given, it should be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-binary-file&quot;&gt;binary file&lt;/a&gt;, and &lt;code&gt;tarinfo.size&lt;/code&gt; bytes are read from it and added to the archive. You can create &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; objects directly, or by using &lt;a href=&quot;#tarfile.TarFile.gettarinfo&quot;&gt;&lt;code&gt;gettarinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt; 오브젝트 &lt;em&gt;tarinfo&lt;/em&gt; 를 아카이브에 추가하십시오 . 경우 &lt;em&gt;fileobj이&lt;/em&gt; 주어집니다, 그것은해야 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-binary-file&quot;&gt;이진 파일&lt;/a&gt; 및 &lt;code&gt;tarinfo.size&lt;/code&gt; 바이트는 읽고 아카이브에 추가됩니다. &lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt; 객체를 직접 만들 거나 &lt;a href=&quot;#tarfile.TarFile.gettarinfo&quot;&gt; &lt;code&gt;gettarinfo()&lt;/code&gt; &lt;/a&gt; 를 사용하여 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7e0d8d81e3b39d32c1f9e52ff590ee50f80f2bfb" translate="yes" xml:space="preserve">
          <source>Add the &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object &lt;em&gt;tarinfo&lt;/em&gt; to the archive. If &lt;em&gt;fileobj&lt;/em&gt; is given, it should be a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-binary-file&quot;&gt;binary file&lt;/a&gt;, and &lt;code&gt;tarinfo.size&lt;/code&gt; bytes are read from it and added to the archive. You can create &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; objects directly, or by using &lt;a href=&quot;#tarfile.TarFile.gettarinfo&quot;&gt;&lt;code&gt;gettarinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Add the &lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt; object &lt;em&gt;tarinfo&lt;/em&gt; to the archive. If &lt;em&gt;fileobj&lt;/em&gt; is given, it should be a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-binary-file&quot;&gt;binary file&lt;/a&gt;, and &lt;code&gt;tarinfo.size&lt;/code&gt; bytes are read from it and added to the archive. You can create &lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt; objects directly, or by using &lt;a href=&quot;#tarfile.TarFile.gettarinfo&quot;&gt; &lt;code&gt;gettarinfo()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fdfaeb4db76038933f7f7f07bb6e34cf522668b0" translate="yes" xml:space="preserve">
          <source>Add the file &lt;em&gt;name&lt;/em&gt; to the archive. &lt;em&gt;name&lt;/em&gt; may be any type of file (directory, fifo, symbolic link, etc.). If given, &lt;em&gt;arcname&lt;/em&gt; specifies an alternative name for the file in the archive. Directories are added recursively by default. This can be avoided by setting &lt;em&gt;recursive&lt;/em&gt; to &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;. Recursion adds entries in sorted order. If &lt;em&gt;filter&lt;/em&gt; is given, it should be a function that takes a &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object argument and returns the changed &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object. If it instead returns &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; the &lt;a href=&quot;#tarfile.TarInfo&quot;&gt;&lt;code&gt;TarInfo&lt;/code&gt;&lt;/a&gt; object will be excluded from the archive. See &lt;a href=&quot;#tar-examples&quot;&gt;Examples&lt;/a&gt; for an example.</source>
          <target state="translated">파일 &lt;em&gt;이름&lt;/em&gt; 을 아카이브에 추가하십시오 . &lt;em&gt;name&lt;/em&gt; 은 모든 유형의 파일 (디렉토리, fifo, 심볼릭 링크 등) 일 수 있습니다. 지정된 경우 &lt;em&gt;arcname&lt;/em&gt; 은 아카이브에있는 파일의 대체 이름을 지정합니다. 디렉토리는 기본적으로 재귀 적으로 추가됩니다. &lt;em&gt;재귀&lt;/em&gt; 를 &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt; 로 설정하면 피할 수 있습니다 . 재귀는 항목을 정렬 된 순서로 추가합니다. 경우 &lt;em&gt;필터가&lt;/em&gt; 주어지고 그것은 취하는 함수이어야 &lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; 의&lt;/a&gt; 오브젝트 인수 및 리턴 변경 &lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; 의&lt;/a&gt; 개체. 대신 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 을 반환 하면 &lt;a href=&quot;#tarfile.TarInfo&quot;&gt; &lt;code&gt;TarInfo&lt;/code&gt; &lt;/a&gt; 개체가 아카이브에서 제외됩니다. &lt;a href=&quot;#tar-examples&quot;&gt;예&lt;/a&gt; 는 예 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d29a955c2b80ea1b99365c302eb9e52329eccf96" translate="yes" xml:space="preserve">
          <source>Add the file &lt;em&gt;path&lt;/em&gt; into the &lt;code&gt;_Stream&lt;/code&gt; table of &lt;em&gt;database&lt;/em&gt;, with the stream name &lt;em&gt;name&lt;/em&gt;.</source>
          <target state="translated">파일 추가 &lt;em&gt;경로를&lt;/em&gt; 에 &lt;code&gt;_Stream&lt;/code&gt; 의 의 테이블 &lt;em&gt;데이터베이스&lt;/em&gt; 스트림 이름으로, &lt;em&gt;이름&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="84b4718bc09ff9c6bdaed6b0ebcaf35dcdb8fe6f" translate="yes" xml:space="preserve">
          <source>Add the file with the pathname &lt;em&gt;full&lt;/em&gt; to the CAB file, under the name &lt;em&gt;logical&lt;/em&gt;. If there is already a file named &lt;em&gt;logical&lt;/em&gt;, a new file name is created.</source>
          <target state="translated">경로 이름이 &lt;em&gt;full 인&lt;/em&gt; 파일을 &lt;em&gt;logical&lt;/em&gt; 이름 아래의 CAB 파일에 추가하십시오 . &lt;em&gt;logical&lt;/em&gt; 이라는 파일이 이미 있으면 새 파일 이름이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="fd308f86fbcd8cd8291b8e54f5281bd95fc24e2e" translate="yes" xml:space="preserve">
          <source>Add the given &lt;em&gt;payload&lt;/em&gt; to the current payload, which must be &lt;code&gt;None&lt;/code&gt; or a list of &lt;a href=&quot;#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; objects before the call. After the call, the payload will always be a list of &lt;a href=&quot;#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; objects. If you want to set the payload to a scalar object (e.g. a string), use &lt;a href=&quot;#email.message.Message.set_payload&quot;&gt;&lt;code&gt;set_payload()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">주어진 &lt;em&gt;페이로드&lt;/em&gt; 를 현재 페이 &lt;em&gt;로드&lt;/em&gt; 에 추가하십시오 . 호출하기 전에 &lt;code&gt;None&lt;/code&gt; 또는 &lt;a href=&quot;#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 오브젝트 의 목록 이어야합니다 . 호출 후 페이로드는 항상 &lt;a href=&quot;#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 객체 의 목록입니다 . 페이로드를 스칼라 객체 (예 : 문자열)로 설정하려면 대신 &lt;a href=&quot;#email.message.Message.set_payload&quot;&gt; &lt;code&gt;set_payload()&lt;/code&gt; &lt;/a&gt; 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f7d0ce06c6bbfae7f3d2b3526eb4216ad14cdf22" translate="yes" xml:space="preserve">
          <source>Added callables are called in the order that they were added and are always called in a thread belonging to the process that added them. If the callable raises an &lt;a href=&quot;exceptions#Exception&quot;&gt;&lt;code&gt;Exception&lt;/code&gt;&lt;/a&gt; subclass, it will be logged and ignored. If the callable raises a &lt;a href=&quot;exceptions#BaseException&quot;&gt;&lt;code&gt;BaseException&lt;/code&gt;&lt;/a&gt; subclass, the behavior is undefined.</source>
          <target state="translated">추가 된 콜 러블은 추가 된 순서대로 호출되며 항상 추가 한 프로세스에 속하는 스레드에서 호출됩니다. 호출 가능 객체가 &lt;a href=&quot;exceptions#Exception&quot;&gt; &lt;code&gt;Exception&lt;/code&gt; &lt;/a&gt; 서브 클래스를 발생 시키면, 로그 기록되고 무시됩니다. 호출 가능 &lt;a href=&quot;exceptions#BaseException&quot;&gt; &lt;code&gt;BaseException&lt;/code&gt; &lt;/a&gt; 가 BaseException 서브 클래스를 발생 시키면 동작은 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b85233cd9ebffe50d11b2cf0805696ea0ceed2c" translate="yes" xml:space="preserve">
          <source>Added the &lt;em&gt;initializer&lt;/em&gt; and &lt;em&gt;initargs&lt;/em&gt; arguments.</source>
          <target state="translated">&lt;em&gt;이니셜 라이저&lt;/em&gt; 및 &lt;em&gt;initargs&lt;/em&gt; 인수를 추가했습니다 .</target>
        </trans-unit>
        <trans-unit id="8827f17fde890fe438a85bcb36162a90217916ab" translate="yes" xml:space="preserve">
          <source>Adding HTTP headers:</source>
          <target state="translated">HTTP 헤더 추가</target>
        </trans-unit>
        <trans-unit id="32794b36e540f138de7310a0852226f80b61a093" translate="yes" xml:space="preserve">
          <source>Adding More Numeric ABCs</source>
          <target state="translated">더 많은 숫자 ABC 추가</target>
        </trans-unit>
        <trans-unit id="b8e5ab085a6e2321c969eab106d044654f14d5d5" translate="yes" xml:space="preserve">
          <source>Adding arguments</source>
          <target state="translated">인수 추가</target>
        </trans-unit>
        <trans-unit id="366c31b6684891779f28e34e482fc51e6affae83" translate="yes" xml:space="preserve">
          <source>Addison-Wesley publishes a book called Tcl and the Tk Toolkit by John Ousterhout (ISBN 0-201-63337-X) which is a good introduction to Tcl and Tk for the novice. The book is not exhaustive, and for many details it defers to the man pages.</source>
          <target state="translated">Addison-Wesley는 John Ousterhout (ISBN 0-201-63337-X)의 Tcl 및 Tk Toolkit이라는 책을 발간합니다.이 책은 초보자를위한 Tcl 및 Tk에 대한 좋은 소개입니다. 이 책은 완전한 것이 아니며 많은 세부 사항은 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8e8428e85c661f03dd33db8f12b20a010ab5be5e" translate="yes" xml:space="preserve">
          <source>Addition</source>
          <target state="translated">Addition</target>
        </trans-unit>
        <trans-unit id="e1c5ea673fbb82149c08ab498bee248bfd9199d0" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-45&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">추가 HTTP 상태 코드 &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-45&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="427bece2ad850698371dca05dc622c9d29b6935f" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-46&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">추가 HTTP 상태 코드 &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-46&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b16d8a6bb760515890fca9c712c787901b31c7ff" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-47&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">추가 HTTP 상태 코드 &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-47&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="b991878ce0b40a6b924bd7389bb06d820d6a1f41" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0ddf6345664fde4a7792dd82e88181332fddb9e2" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-49&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-49&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5e3d7a8339e9e8d47f195503bd086f9c906a3106" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-50&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-50&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c946af7090c97564c6f84564e39269075d4932e0" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-59&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;, Section 6</source>
          <target state="translated">추가 HTTP 상태 코드 &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-59&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt; , 섹션 6</target>
        </trans-unit>
        <trans-unit id="681732b0b925c0111a8472ee282961b3fe60b217" translate="yes" xml:space="preserve">
          <source>Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-62&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;, Section 6</source>
          <target state="translated">Additional HTTP Status Codes &lt;a href=&quot;https://tools.ietf.org/html/rfc6585.html&quot; id=&quot;index-62&quot;&gt;&lt;strong&gt;RFC 6585&lt;/strong&gt;&lt;/a&gt;, Section 6</target>
        </trans-unit>
        <trans-unit id="1c7cfd465bd6c5072f84f9bd1a70679a32bc06b5" translate="yes" xml:space="preserve">
          <source>Additional Methods on Float</source>
          <target state="translated">플로트에 대한 추가 방법</target>
        </trans-unit>
        <trans-unit id="1a6fbb3a3106faa08803de5aa3ee5fac8e2f5fb2" translate="yes" xml:space="preserve">
          <source>Additional Methods on Integer Types</source>
          <target state="translated">정수 유형에 대한 추가 방법</target>
        </trans-unit>
        <trans-unit id="e07bcbcb394ff663d4ff9ec28b7d29949f0638bb" translate="yes" xml:space="preserve">
          <source>Additional Utility Classes and Functions</source>
          <target state="translated">추가 유틸리티 클래스 및 함수</target>
        </trans-unit>
        <trans-unit id="90441a19c39c85468a4336d332b3c4a497d72486" translate="yes" xml:space="preserve">
          <source>Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C. To see the full set of format codes supported on your platform, consult the &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/strftime(3)&quot;&gt;strftime(3)&lt;/a&gt;&lt;/em&gt; documentation.</source>
          <target state="translated">특정 플랫폼에서는 추가 지시문이 지원 될 수 있지만 여기에 나열된 지시문 만 ANSI C에서 표준화 된 의미를 갖습니다. 플랫폼에서 지원되는 전체 형식 코드 세트를 보려면 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/strftime(3)&quot;&gt;strftime (3)&lt;/a&gt;&lt;/em&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9be4003cba4f5f477bbf08bed081c603cb4dc1f2" translate="yes" xml:space="preserve">
          <source>Additional help sources may be added here with the Configure IDLE dialog under the General tab. See the &lt;a href=&quot;#help-sources&quot;&gt;Help sources&lt;/a&gt; subsection below for more on Help menu choices.</source>
          <target state="translated">여기에 일반 탭 아래의 유휴 구성 대화 상자를 사용하여 추가 도움말 소스를 추가 할 수 있습니다. 도움말 메뉴 선택에 대한 자세한 내용은 아래 &lt;a href=&quot;#help-sources&quot;&gt;도움말 소스&lt;/a&gt; 하위 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0fbd97506d8de6a58a401e21f5cd9867835e4f81" translate="yes" xml:space="preserve">
          <source>Additional information on these special methods may be found in the Python Reference Manual (&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#customization&quot;&gt;Basic customization&lt;/a&gt;).</source>
          <target state="translated">이러한 특수 메소드에 대한 추가 정보는 Python Reference Manual ( &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#customization&quot;&gt;기본 사용자 정의&lt;/a&gt; ) 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c7cb20eee0df6f2780f4ff2c70aa8c5e66186317" translate="yes" xml:space="preserve">
          <source>Additional information on these special methods may be found in the Python Reference Manual (&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#customization&quot;&gt;Basic customization&lt;/a&gt;).</source>
          <target state="translated">Additional information on these special methods may be found in the Python Reference Manual (&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#customization&quot;&gt;Basic customization&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="7edb640f6649a2cf3bbe1d95569b1e866f202e00" translate="yes" xml:space="preserve">
          <source>Additional keyword arguments.</source>
          <target state="translated">추가 키워드 인수.</target>
        </trans-unit>
        <trans-unit id="5650f46efd09c607a30ce9bd7e2e4e612b751be7" translate="yes" xml:space="preserve">
          <source>Additional keyword parameters, collected in &lt;em&gt;x509&lt;/em&gt;, may be used for authentication of the client when using the &lt;code&gt;https:&lt;/code&gt; scheme. The keywords &lt;em&gt;key_file&lt;/em&gt; and &lt;em&gt;cert_file&lt;/em&gt; are supported to provide an SSL key and certificate; both are needed to support client authentication.</source>
          <target state="translated">&lt;code&gt;https:&lt;/code&gt; 스킴을 사용할 때 &lt;em&gt;x509에&lt;/em&gt; 수집 된 추가 키워드 매개 변수를 사용하여 클라이언트를 인증 할 수 있습니다 . 키워드 &lt;em&gt;key_file&lt;/em&gt; 및 &lt;em&gt;cert_file&lt;/em&gt; 은 SSL 키 및 인증서를 제공하기 위해 지원됩니다. 클라이언트 인증을 지원하려면 둘 다 필요합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f126cf978efce5dfbbf7be549572a4fad90828fc" translate="yes" xml:space="preserve">
          <source>Additional module-level constants are defined for GNU/glibc based systems. These are &lt;code&gt;ST_NODEV&lt;/code&gt; (disallow access to device special files), &lt;code&gt;ST_NOEXEC&lt;/code&gt; (disallow program execution), &lt;code&gt;ST_SYNCHRONOUS&lt;/code&gt; (writes are synced at once), &lt;code&gt;ST_MANDLOCK&lt;/code&gt; (allow mandatory locks on an FS), &lt;code&gt;ST_WRITE&lt;/code&gt; (write on file/directory/symlink), &lt;code&gt;ST_APPEND&lt;/code&gt; (append-only file), &lt;code&gt;ST_IMMUTABLE&lt;/code&gt; (immutable file), &lt;code&gt;ST_NOATIME&lt;/code&gt; (do not update access times), &lt;code&gt;ST_NODIRATIME&lt;/code&gt; (do not update directory access times), &lt;code&gt;ST_RELATIME&lt;/code&gt; (update atime relative to mtime/ctime).</source>
          <target state="translated">GNU / glibc 기반 시스템에 추가 모듈 수준 상수가 정의되어 있습니다. 이들은 &lt;code&gt;ST_NODEV&lt;/code&gt; (장치 특수 파일을 사용 해제 액세스), &lt;code&gt;ST_NOEXEC&lt;/code&gt; (해제하면 프로그램 실행), &lt;code&gt;ST_SYNCHRONOUS&lt;/code&gt; (쓰기가 한 번에 동기화), &lt;code&gt;ST_MANDLOCK&lt;/code&gt; (AN FS에 필수 잠금을 허용), &lt;code&gt;ST_WRITE&lt;/code&gt; (파일 / 디렉토리 / 심볼릭 링크에 대한 쓰기), &lt;code&gt;ST_APPEND&lt;/code&gt; (첨부 전용 파일), &lt;code&gt;ST_IMMUTABLE&lt;/code&gt; (불변 파일), &lt;code&gt;ST_NOATIME&lt;/code&gt; (액세스 시간 업데이트 안 함), &lt;code&gt;ST_NODIRATIME&lt;/code&gt; (디렉토리 액세스 시간 업데이트 안 함), &lt;code&gt;ST_RELATIME&lt;/code&gt; (mtime / ctime을 기준으로 한 시간 업데이트).</target>
        </trans-unit>
        <trans-unit id="41b5f2e6aebc43182a4eee3c33dbf7e657d4ea1a" translate="yes" xml:space="preserve">
          <source>Additional notes</source>
          <target state="translated">추가 사항</target>
        </trans-unit>
        <trans-unit id="755989eb26f111816b61fc7ebbbfb5473df1c15d" translate="yes" xml:space="preserve">
          <source>Additional parameters for the &lt;em&gt;Content-Type&lt;/em&gt; header are taken from the keyword arguments, or passed into the &lt;em&gt;_params&lt;/em&gt; argument, which is a keyword dictionary.</source>
          <target state="translated">&lt;em&gt;Content-Type&lt;/em&gt; 헤더에 대한 추가 매개 변수 는 키워드 인수에서 가져 오거나 키워드 사전 인 &lt;em&gt;_params&lt;/em&gt; 인수 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="7629707b992046f9cae97d693ca20d38c9007ee1" translate="yes" xml:space="preserve">
          <source>Additional processing classes are defined to find, parse, and run, and check doctest examples:</source>
          <target state="translated">추가 처리 클래스는 doctest 예제를 찾고 구문 분석 및 실행하고 확인하기 위해 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="a15fa56393dfeea6e8ddbb0e0c2a6f3cc24b93de" translate="yes" xml:space="preserve">
          <source>Additional resources</source>
          <target state="translated">추가 자료</target>
        </trans-unit>
        <trans-unit id="8776ffc7a25a62ae3b9b890b596779f5ea569144" translate="yes" xml:space="preserve">
          <source>Additionally the SMTPChannel may be extended to implement very specific interaction behaviour with SMTP clients.</source>
          <target state="translated">또한 SMTPChannel은 SMTP 클라이언트와의 매우 구체적인 상호 작용 동작을 구현하도록 확장 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="599097e6f6575c6278515050930a9aa12db60e09" translate="yes" xml:space="preserve">
          <source>Additionally, if the &lt;code&gt;SO_EXCLUSIVEADDRUSE&lt;/code&gt; socket option is available (i.e. on Windows), it will be set on the socket. This will prevent anyone else from binding to our host/port for the duration of the test.</source>
          <target state="translated">또한 &lt;code&gt;SO_EXCLUSIVEADDRUSE&lt;/code&gt; 소켓 옵션을 사용할 수있는 경우 (예 : Windows에서) 소켓에 설정됩니다. 이렇게하면 테스트 기간 동안 다른 사람이 호스트 / 포트에 바인딩되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3ce8bb697c96962555e6797937ae5e1bc918c228" translate="yes" xml:space="preserve">
          <source>Additionally, maximum character &lt;em&gt;width&lt;/em&gt; can be suggested. If a long object cannot be split, the specified width will be exceeded:</source>
          <target state="translated">또한 최대 문자 &lt;em&gt;너비&lt;/em&gt; 를 제안 할 수 있습니다. 긴 오브젝트를 분할 할 수 없으면 지정된 너비가 초과됩니다.</target>
        </trans-unit>
        <trans-unit id="0aff5c616f0a7398b7b227fa0d75ea3310d2ca88" translate="yes" xml:space="preserve">
          <source>Additionally, mock provides a &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; decorator that handles patching module and class level attributes within the scope of a test, along with &lt;a href=&quot;#unittest.mock.sentinel&quot;&gt;&lt;code&gt;sentinel&lt;/code&gt;&lt;/a&gt; for creating unique objects. See the &lt;a href=&quot;#quick-guide&quot;&gt;quick guide&lt;/a&gt; for some examples of how to use &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">또한 mock은 테스트 범위 내에서 패치 객체 및 클래스 레벨 속성을 처리 하는 &lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; 데코레이터와 고유 한 객체를 생성하기위한 &lt;a href=&quot;#unittest.mock.sentinel&quot;&gt; &lt;code&gt;sentinel&lt;/code&gt; &lt;/a&gt; 을 제공합니다. &lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; 사용 방법에 대한 몇 가지 예 는 &lt;a href=&quot;#quick-guide&quot;&gt;빠른 안내서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b0851cbdca337e8a2d55a8b2492f4247983ece5b" translate="yes" xml:space="preserve">
          <source>Additionally, there are &lt;strong&gt;low-level&lt;/strong&gt; APIs for &lt;em&gt;library and framework developers&lt;/em&gt; to:</source>
          <target state="translated">또한 &lt;em&gt;라이브러리 및 프레임 워크 개발자가 수행&lt;/em&gt; 할 수있는 &lt;strong&gt;저수준&lt;/strong&gt; API가 &lt;em&gt;있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="3e8cd6b574233c309842bad2694624be2f0c8ecc" translate="yes" xml:space="preserve">
          <source>Additionally, this module provides a class &lt;a href=&quot;#poplib.POP3_SSL&quot;&gt;&lt;code&gt;POP3_SSL&lt;/code&gt;&lt;/a&gt;, which provides support for connecting to POP3 servers that use SSL as an underlying protocol layer.</source>
          <target state="translated">또한이 모듈은 기본 프로토콜 계층으로 SSL을 사용하는 POP3 서버 연결을 지원하는 &lt;a href=&quot;#poplib.POP3_SSL&quot;&gt; &lt;code&gt;POP3_SSL&lt;/code&gt; &lt;/a&gt; 클래스 를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c981b21c3eb7058c60d166fb915b3ba17868c9bd" translate="yes" xml:space="preserve">
          <source>Address Formats</source>
          <target state="translated">주소 형식</target>
        </trans-unit>
        <trans-unit id="53cce0631f5ba4546493e150cc5ef970434eef7f" translate="yes" xml:space="preserve">
          <source>Address already in use</source>
          <target state="translated">이미 사용중인 주소</target>
        </trans-unit>
        <trans-unit id="54d86dbe4cc1a680cd53fee9148dc51da43f4f6d" translate="yes" xml:space="preserve">
          <source>Address family not supported by protocol</source>
          <target state="translated">프로토콜이 지원하지 않는 주소 계열</target>
        </trans-unit>
        <trans-unit id="a1e16e75ab014f83bd0bb70f5aa70df54bdef59b" translate="yes" xml:space="preserve">
          <source>Address headers are one of the most complex structured header types. The &lt;code&gt;AddressHeader&lt;/code&gt; class provides a generic interface to any address header.</source>
          <target state="translated">주소 헤더는 가장 복잡한 구조화 된 헤더 유형 중 하나입니다. &lt;code&gt;AddressHeader&lt;/code&gt; 의 클래스는 모든 주소 헤더에 대한 일반적인 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="d8b2f4f386c56bbed38a9626989886270423def9" translate="yes" xml:space="preserve">
          <source>Address objects</source>
          <target state="translated">주소 객체</target>
        </trans-unit>
        <trans-unit id="e91fde1d6b6cf8b2e4734b6c36d0110942615076" translate="yes" xml:space="preserve">
          <source>Address objects can be compared with the usual set of comparison operators. Same IPv6 addresses with different scope zone IDs are not equal. Some examples:</source>
          <target state="translated">Address objects can be compared with the usual set of comparison operators. Same IPv6 addresses with different scope zone IDs are not equal. Some examples:</target>
        </trans-unit>
        <trans-unit id="e87e00a4637133fec5ee5c803edca11622b049fb" translate="yes" xml:space="preserve">
          <source>Address objects can be compared with the usual set of comparison operators. Some examples:</source>
          <target state="translated">주소 개체는 일반적인 비교 연산자 집합과 비교할 수 있습니다. 몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="c84db6312b397100947cc87ed8f2b180ca9d473a" translate="yes" xml:space="preserve">
          <source>Address objects support some operators. Unless stated otherwise, operators can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with IPv6).</source>
          <target state="translated">주소 개체는 일부 연산자를 지원합니다. 달리 명시하지 않는 한, 연산자는 호환 가능한 개체 (예 : IPv4를 사용하는 IPv4, IPv6을 사용하는 IPv6) 사이에만 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0105f2940c964aa9756c29f83e74bda0f90a5b32" translate="yes" xml:space="preserve">
          <source>Address space of a memory block (&lt;code&gt;int&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;).</source>
          <target state="translated">메모리 블록의 주소 공간 ( &lt;code&gt;int&lt;/code&gt; 또는 &lt;code&gt;None&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cfa96e7876c6aab98f33fc6360be994ef1aa3167" translate="yes" xml:space="preserve">
          <source>Address space of a memory block (&lt;code&gt;int&lt;/code&gt;). Read-only property.</source>
          <target state="translated">메모리 블록의 주소 공간 ( &lt;code&gt;int&lt;/code&gt; ). 읽기 전용 속성</target>
        </trans-unit>
        <trans-unit id="8ed5201b3048cc904b8fa7061e9e3f310c0d8ee5" translate="yes" xml:space="preserve">
          <source>AddressHeader</source>
          <target state="translated">AddressHeader</target>
        </trans-unit>
        <trans-unit id="d4ebdece72b5d801675d16eca7e8e06688a7d640" translate="yes" xml:space="preserve">
          <source>Adds a blank line (indicating the end of the HTTP headers in the response) to the headers buffer and calls &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.flush_headers&quot;&gt;&lt;code&gt;flush_headers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">헤더 버퍼에 빈 줄 (응답의 HTTP 헤더 끝을 나타냄)을 추가하고 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.flush_headers&quot;&gt; &lt;code&gt;flush_headers()&lt;/code&gt; &lt;/a&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="1f7acd6c47b0da85c7600f21a52f58ffbfd078f5" translate="yes" xml:space="preserve">
          <source>Adds a context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method to the callback stack.</source>
          <target state="translated">컨텍스트 관리자의 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt; 메소드를 콜백 스택에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="4d3af6b4955c2ff8e8fe675708fb3a093806a225" translate="yes" xml:space="preserve">
          <source>Adds a context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method to the callback stack.</source>
          <target state="translated">Adds a context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt; method to the callback stack.</target>
        </trans-unit>
        <trans-unit id="9c5c71aac9de9bf5636184d5f42b68146a582a10" translate="yes" xml:space="preserve">
          <source>Adds a new tab to the notebook.</source>
          <target state="translated">노트북에 새 탭을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="dd9cdcb19b13e350658b98864b2b91b085b457fb" translate="yes" xml:space="preserve">
          <source>Adds a response header to the headers buffer and logs the accepted request. The HTTP response line is written to the internal buffer, followed by &lt;em&gt;Server&lt;/em&gt; and &lt;em&gt;Date&lt;/em&gt; headers. The values for these two headers are picked up from the &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.version_string&quot;&gt;&lt;code&gt;version_string()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.date_time_string&quot;&gt;&lt;code&gt;date_time_string()&lt;/code&gt;&lt;/a&gt; methods, respectively. If the server does not intend to send any other headers using the &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_header&quot;&gt;&lt;code&gt;send_header()&lt;/code&gt;&lt;/a&gt; method, then &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_response&quot;&gt;&lt;code&gt;send_response()&lt;/code&gt;&lt;/a&gt; should be followed by an &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt;&lt;code&gt;end_headers()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">헤더 버퍼에 응답 헤더를 추가하고 승인 된 요청을 기록합니다. HTTP 응답 행은 내부 버퍼에 기록 된 다음 &lt;em&gt;서버&lt;/em&gt; 및 &lt;em&gt;날짜&lt;/em&gt; 헤더 가 작성됩니다 . 이 두 헤더의 값은 각각 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.version_string&quot;&gt; &lt;code&gt;version_string()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.date_time_string&quot;&gt; &lt;code&gt;date_time_string()&lt;/code&gt; &lt;/a&gt; 메소드에서 선택됩니다. 서버가 사용하는 다른 헤더를 보낼 의도하지 않는 경우 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_header&quot;&gt; &lt;code&gt;send_header()&lt;/code&gt; &lt;/a&gt; 다음 방법을 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.send_response&quot;&gt; &lt;code&gt;send_response()&lt;/code&gt; &lt;/a&gt; 가 와야합니다 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt; &lt;code&gt;end_headers()&lt;/code&gt; &lt;/a&gt; 호출.</target>
        </trans-unit>
        <trans-unit id="c70a7a21a70e6fd37ae057e1ed13fa3776bf6066" translate="yes" xml:space="preserve">
          <source>Adds all the standard site-specific directories to the module search path. This function is called automatically when this module is imported, unless the Python interpreter was started with the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">모든 표준 사이트 특정 디렉토리를 모듈 검색 경로에 추가합니다. 이 함수는 Python 인터프리터가 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt; &lt;code&gt;-S&lt;/code&gt; &lt;/a&gt; 플래그 로 시작되지 않은 경우이 모듈을 가져올 때 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="07e75a62d35592d0e149d532a3d11385a1eb4731" translate="yes" xml:space="preserve">
          <source>Adds all the standard site-specific directories to the module search path. This function is called automatically when this module is imported, unless the Python interpreter was started with the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id3&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt; flag.</source>
          <target state="translated">Adds all the standard site-specific directories to the module search path. This function is called automatically when this module is imported, unless the Python interpreter was started with the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id3&quot;&gt; &lt;code&gt;-S&lt;/code&gt; &lt;/a&gt; flag.</target>
        </trans-unit>
        <trans-unit id="23f4846b019473167e5d95d7c18b067286943485" translate="yes" xml:space="preserve">
          <source>Adds or modifies an event</source>
          <target state="translated">이벤트를 추가하거나 수정합니다</target>
        </trans-unit>
        <trans-unit id="ba99f69318c5b2875afcc8e4c7d4361adb5ebefc" translate="yes" xml:space="preserve">
          <source>Adds text to the current element. &lt;em&gt;data&lt;/em&gt; is a string. This should be either a bytestring, or a Unicode string.</source>
          <target state="translated">현재 요소에 텍스트를 추가합니다. &lt;em&gt;데이터&lt;/em&gt; 는 문자열입니다. 바이트 스트링 또는 유니 코드 문자열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="b7d3a401c5e2e8b07acd3f6878239513a252af73" translate="yes" xml:space="preserve">
          <source>Adds the HTTP header to an internal buffer which will be written to the output stream when either &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt;&lt;code&gt;end_headers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.flush_headers&quot;&gt;&lt;code&gt;flush_headers()&lt;/code&gt;&lt;/a&gt; is invoked. &lt;em&gt;keyword&lt;/em&gt; should specify the header keyword, with &lt;em&gt;value&lt;/em&gt; specifying its value. Note that, after the send_header calls are done, &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt;&lt;code&gt;end_headers()&lt;/code&gt;&lt;/a&gt; MUST BE called in order to complete the operation.</source>
          <target state="translated">&lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt; &lt;code&gt;end_headers()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.flush_headers&quot;&gt; &lt;code&gt;flush_headers()&lt;/code&gt; &lt;/a&gt; 가 호출 될 때 출력 스트림에 기록 될 내부 버퍼에 HTTP 헤더를 추가합니다 . &lt;em&gt;키워드&lt;/em&gt; 는 &lt;em&gt;값을&lt;/em&gt; 지정하는 값 과 함께 헤더 키워드를 지정해야합니다. send_header 호출이 완료된 후 작업을 완료하려면 &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.end_headers&quot;&gt; &lt;code&gt;end_headers()&lt;/code&gt; &lt;/a&gt; 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="277dcf73a9142261968c1b0d938f93b9fc4a5516" translate="yes" xml:space="preserve">
          <source>Adds the element &lt;em&gt;subelement&lt;/em&gt; to the end of this element&amp;rsquo;s internal list of subelements. Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;subelement&lt;/em&gt; is not an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 요소의 내부 하위 요소 목록 끝에 요소 &lt;em&gt;하위 요소&lt;/em&gt; 를 추가합니다 . 발생시킵니다 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 경우 &lt;em&gt;하위 요소가&lt;/em&gt; 없는 &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ef1fbe96c8dbb8f7464127475dab7025e0bc99db" translate="yes" xml:space="preserve">
          <source>Adds the specified filter &lt;em&gt;filter&lt;/em&gt; to this handler.</source>
          <target state="translated">지정된 필터 &lt;em&gt;필터&lt;/em&gt; 를이 핸들러에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d974f7ad089b197b45f9485d4aa7cf708a1848bf" translate="yes" xml:space="preserve">
          <source>Adds the specified filter &lt;em&gt;filter&lt;/em&gt; to this logger.</source>
          <target state="translated">지정된 필터 &lt;em&gt;필터&lt;/em&gt; 를이 로거에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="21e14a01ccb15fe568cac7d9b97974261ead478b" translate="yes" xml:space="preserve">
          <source>Adds the specified handler &lt;em&gt;hdlr&lt;/em&gt; to this logger.</source>
          <target state="translated">지정된 핸들러 &lt;em&gt;hdlr을이&lt;/em&gt; 로거에 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="397723ab2192f7ea42bdc7d4cb3c6961b4ccd5fe" translate="yes" xml:space="preserve">
          <source>Advanced API</source>
          <target state="translated">고급 API</target>
        </trans-unit>
        <trans-unit id="5fe095447c43964932a08f188d1a91498a6182f7" translate="yes" xml:space="preserve">
          <source>Advanced Tutorial</source>
          <target state="translated">고급 튜토리얼</target>
        </trans-unit>
        <trans-unit id="24ca54306fd1d4616674769f3f7f6a1715604b03" translate="yes" xml:space="preserve">
          <source>Advanced usage: you can derive subclasses of &lt;a href=&quot;#string.Template&quot;&gt;&lt;code&gt;Template&lt;/code&gt;&lt;/a&gt; to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings. To do this, you can override these class attributes:</source>
          <target state="translated">고급 사용법 : &lt;a href=&quot;#string.Template&quot;&gt; &lt;code&gt;Template&lt;/code&gt; &lt;/a&gt; 하위 클래스를 파생 시켜 자리 표시 자 구문, 구분 기호 문자 또는 템플릿 문자열을 구문 분석하는 데 사용되는 전체 정규식을 사용자 지정할 수 있습니다. 이를 위해 다음 클래스 속성을 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="251637d0b15caeee9ca6a8cb9ffecf846325c014" translate="yes" xml:space="preserve">
          <source>Advertise error</source>
          <target state="translated">광고 오류</target>
        </trans-unit>
        <trans-unit id="8d1b5c908485d5b8bf002b642c2265dccbb27a12" translate="yes" xml:space="preserve">
          <source>After &lt;a href=&quot;#curses.window.getch&quot;&gt;&lt;code&gt;getch()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;KEY_MOUSE&lt;/code&gt; to signal a mouse event, this method should be call to retrieve the queued mouse event, represented as a 5-tuple &lt;code&gt;(id, x, y, z, bstate)&lt;/code&gt;. &lt;em&gt;id&lt;/em&gt; is an ID value used to distinguish multiple devices, and &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;z&lt;/em&gt; are the event&amp;rsquo;s coordinates. (&lt;em&gt;z&lt;/em&gt; is currently unused.) &lt;em&gt;bstate&lt;/em&gt; is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where &lt;em&gt;n&lt;/em&gt; is the button number from 1 to 4: &lt;code&gt;BUTTONn_PRESSED&lt;/code&gt;, &lt;code&gt;BUTTONn_RELEASED&lt;/code&gt;, &lt;code&gt;BUTTONn_CLICKED&lt;/code&gt;, &lt;code&gt;BUTTONn_DOUBLE_CLICKED&lt;/code&gt;, &lt;code&gt;BUTTONn_TRIPLE_CLICKED&lt;/code&gt;, &lt;code&gt;BUTTON_SHIFT&lt;/code&gt;, &lt;code&gt;BUTTON_CTRL&lt;/code&gt;, &lt;code&gt;BUTTON_ALT&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#curses.window.getch&quot;&gt; &lt;code&gt;getch()&lt;/code&gt; &lt;/a&gt; 가 마우스 이벤트를 &lt;code&gt;KEY_MOUSE&lt;/code&gt; 위해 KEY_MOUSE 를 리턴 한 후이 메소드는 5 튜플 &lt;code&gt;(id, x, y, z, bstate)&lt;/code&gt; 로 표시된 대기중인 마우스 이벤트를 검색하기 위해 호출되어야합니다 . &lt;em&gt;id&lt;/em&gt; 는 여러 장치를 구별하는 데 사용되는 ID 값이며 &lt;em&gt;x&lt;/em&gt; , &lt;em&gt;y&lt;/em&gt; , &lt;em&gt;z&lt;/em&gt; 는 이벤트 좌표입니다. ( &lt;em&gt;z&lt;/em&gt; 는 현재 사용되지 않습니다.) &lt;em&gt;bstate&lt;/em&gt; 는 비트가 이벤트 유형을 나타내도록 설정되는 정수 값이며 다음 상수 중 하나 이상에 대한 비트 단위 OR입니다. 여기서 &lt;em&gt;n&lt;/em&gt; 은 1에서 4까지의 버튼 번호입니다. &lt;code&gt;BUTTONn_PRESSED&lt;/code&gt; , &lt;code&gt;BUTTONn_RELEASED&lt;/code&gt; , &lt;code&gt;BUTTONn_CLICKED&lt;/code&gt; , &lt;code&gt;BUTTONn_DOUBLE_CLICKED&lt;/code&gt; , &lt;code&gt;BUTTONn_TRIPLE_CLICKED&lt;/code&gt; , &lt;code&gt;BUTTON_SHIFT&lt;/code&gt; , &lt;code&gt;BUTTON_CTRL&lt;/code&gt; , &lt;code&gt;BUTTON_ALT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6ff5213eeca44b11c3673b3fbba1d5148d30d331" translate="yes" xml:space="preserve">
          <source>After &lt;a href=&quot;#curses.window.getch&quot;&gt;&lt;code&gt;getch()&lt;/code&gt;&lt;/a&gt; returns &lt;code&gt;KEY_MOUSE&lt;/code&gt; to signal a mouse event, this method should be called to retrieve the queued mouse event, represented as a 5-tuple &lt;code&gt;(id, x, y, z, bstate)&lt;/code&gt;. &lt;em&gt;id&lt;/em&gt; is an ID value used to distinguish multiple devices, and &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;z&lt;/em&gt; are the event&amp;rsquo;s coordinates. (&lt;em&gt;z&lt;/em&gt; is currently unused.) &lt;em&gt;bstate&lt;/em&gt; is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where &lt;em&gt;n&lt;/em&gt; is the button number from 1 to 4: &lt;code&gt;BUTTONn_PRESSED&lt;/code&gt;, &lt;code&gt;BUTTONn_RELEASED&lt;/code&gt;, &lt;code&gt;BUTTONn_CLICKED&lt;/code&gt;, &lt;code&gt;BUTTONn_DOUBLE_CLICKED&lt;/code&gt;, &lt;code&gt;BUTTONn_TRIPLE_CLICKED&lt;/code&gt;, &lt;code&gt;BUTTON_SHIFT&lt;/code&gt;, &lt;code&gt;BUTTON_CTRL&lt;/code&gt;, &lt;code&gt;BUTTON_ALT&lt;/code&gt;.</source>
          <target state="translated">After &lt;a href=&quot;#curses.window.getch&quot;&gt; &lt;code&gt;getch()&lt;/code&gt; &lt;/a&gt; returns &lt;code&gt;KEY_MOUSE&lt;/code&gt; to signal a mouse event, this method should be called to retrieve the queued mouse event, represented as a 5-tuple &lt;code&gt;(id, x, y, z, bstate)&lt;/code&gt; . &lt;em&gt;id&lt;/em&gt; is an ID value used to distinguish multiple devices, and &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;z&lt;/em&gt; are the event&amp;rsquo;s coordinates. (&lt;em&gt;z&lt;/em&gt; is currently unused.) &lt;em&gt;bstate&lt;/em&gt; is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where &lt;em&gt;n&lt;/em&gt; is the button number from 1 to 4: &lt;code&gt;BUTTONn_PRESSED&lt;/code&gt; , &lt;code&gt;BUTTONn_RELEASED&lt;/code&gt; , &lt;code&gt;BUTTONn_CLICKED&lt;/code&gt; , &lt;code&gt;BUTTONn_DOUBLE_CLICKED&lt;/code&gt; , &lt;code&gt;BUTTONn_TRIPLE_CLICKED&lt;/code&gt; , &lt;code&gt;BUTTON_SHIFT&lt;/code&gt; , &lt;code&gt;BUTTON_CTRL&lt;/code&gt; , &lt;code&gt;BUTTON_ALT&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d1cc6fee1dda0b92c90ec20582c20d1074e2cf23" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;f = attrgetter('name')&lt;/code&gt;, the call &lt;code&gt;f(b)&lt;/code&gt; returns &lt;code&gt;b.name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f = attrgetter('name')&lt;/code&gt; 후에 f &lt;code&gt;f(b)&lt;/code&gt; 호출 은 &lt;code&gt;b.name&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="83b61198fe148750b9221638b3689ca30af865a3" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;f = attrgetter('name', 'date')&lt;/code&gt;, the call &lt;code&gt;f(b)&lt;/code&gt; returns &lt;code&gt;(b.name, b.date)&lt;/code&gt;.</source>
          <target state="translated">후 &lt;code&gt;f = attrgetter('name', 'date')&lt;/code&gt; , 호 &lt;code&gt;f(b)&lt;/code&gt; 복귀 &lt;code&gt;(b.name, b.date)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="23c9e096c43f4c6ee6a95562136ca8d19e97177b" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;f = attrgetter('name.first', 'name.last')&lt;/code&gt;, the call &lt;code&gt;f(b)&lt;/code&gt; returns &lt;code&gt;(b.name.first, b.name.last)&lt;/code&gt;.</source>
          <target state="translated">이후 &lt;code&gt;f = attrgetter('name.first', 'name.last')&lt;/code&gt; , 호 &lt;code&gt;f(b)&lt;/code&gt; 복귀 &lt;code&gt;(b.name.first, b.name.last)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0de2cea705e050aae366d3a78eab3afcdcc07f88" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;f = itemgetter(2)&lt;/code&gt;, the call &lt;code&gt;f(r)&lt;/code&gt; returns &lt;code&gt;r[2]&lt;/code&gt;.</source>
          <target state="translated">이후 &lt;code&gt;f = itemgetter(2)&lt;/code&gt; , 호 &lt;code&gt;f(r)&lt;/code&gt; 복귀 &lt;code&gt;r[2]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d6436d1d48a99a7252d57d6435ebc55f31f26397" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;f = methodcaller('name')&lt;/code&gt;, the call &lt;code&gt;f(b)&lt;/code&gt; returns &lt;code&gt;b.name()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f = methodcaller('name')&lt;/code&gt; 후 f &lt;code&gt;f(b)&lt;/code&gt; 호출 은 &lt;code&gt;b.name()&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="587ef7cb9af6d3a5014a1ec9e1e10014d0bffe63" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;f = methodcaller('name', 'foo', bar=1)&lt;/code&gt;, the call &lt;code&gt;f(b)&lt;/code&gt; returns &lt;code&gt;b.name('foo', bar=1)&lt;/code&gt;.</source>
          <target state="translated">후 &lt;code&gt;f = methodcaller('name', 'foo', bar=1)&lt;/code&gt; , 호 &lt;code&gt;f(b)&lt;/code&gt; 를 반환 &lt;code&gt;b.name('foo', bar=1)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb0bfee9b281dfd1ff2707f547202a4fcb6731f6" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;g = itemgetter(2, 5, 3)&lt;/code&gt;, the call &lt;code&gt;g(r)&lt;/code&gt; returns &lt;code&gt;(r[2], r[5], r[3])&lt;/code&gt;.</source>
          <target state="translated">후 &lt;code&gt;g = itemgetter(2, 5, 3)&lt;/code&gt; , 통화 &lt;code&gt;g(r)&lt;/code&gt; 복귀 &lt;code&gt;(r[2], r[5], r[3])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8e86cbdb1de283111f3b77a94db308e8228f025a" translate="yes" xml:space="preserve">
          <source>After a block-opening statement, the next line is indented by 4 spaces (in the Python Shell window by one tab). After certain keywords (break, return etc.) the next line is dedented. In leading indentation,</source>
          <target state="translated">블록 열기 문 다음에 다음 행은 4 개의 공백으로 들여 쓰기됩니다 (Python Shell 창에서 한 탭씩). 특정 키워드 (중단, 반품 등)가 끝나면 다음 행이 표시됩니다. 들여 쓰기를 할 때</target>
        </trans-unit>
        <trans-unit id="734f3786cd172ab9f7f7c48f03100472da64a032" translate="yes" xml:space="preserve">
          <source>After all the tests have run the final &lt;code&gt;tearDownClass&lt;/code&gt; and &lt;code&gt;tearDownModule&lt;/code&gt; are run.</source>
          <target state="translated">모든 테스트가 실행 된 후 최종 &lt;code&gt;tearDownClass&lt;/code&gt; 및 &lt;code&gt;tearDownModule&lt;/code&gt; 이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bed54ec095e148502b5574ea6f6832888058b755" translate="yes" xml:space="preserve">
          <source>After an unclosed parenthesis for a function, open a small window with function parameter hints. See &lt;a href=&quot;#calltips&quot;&gt;Calltips&lt;/a&gt; in the Editing and navigation section below.</source>
          <target state="translated">함수의 닫히지 않은 괄호 뒤에 함수 매개 변수 힌트가있는 작은 창을여십시오. 아래의 편집 및 탐색 섹션에서 &lt;a href=&quot;#calltips&quot;&gt;콜팁&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e2a2afcb4d73c1dd2ce26d0c2f24d05cb3ef249" translate="yes" xml:space="preserve">
          <source>After binding (&lt;code&gt;CAN_RAW&lt;/code&gt;) or connecting (&lt;a href=&quot;#socket.CAN_BCM&quot;&gt;&lt;code&gt;CAN_BCM&lt;/code&gt;&lt;/a&gt;) the socket, you can use the &lt;a href=&quot;#socket.socket.send&quot;&gt;&lt;code&gt;socket.send()&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;#socket.socket.recv&quot;&gt;&lt;code&gt;socket.recv()&lt;/code&gt;&lt;/a&gt; operations (and their counterparts) on the socket object as usual.</source>
          <target state="translated">(바인딩 후 &lt;code&gt;CAN_RAW&lt;/code&gt; 을 () 또는 연결 &lt;a href=&quot;#socket.CAN_BCM&quot;&gt; &lt;code&gt;CAN_BCM&lt;/code&gt; &lt;/a&gt; ) 소켓을, 당신은 사용할 수 있습니다 &lt;a href=&quot;#socket.socket.send&quot;&gt; &lt;code&gt;socket.send()&lt;/code&gt; &lt;/a&gt; , 그리고 &lt;a href=&quot;#socket.socket.recv&quot;&gt; &lt;code&gt;socket.recv()&lt;/code&gt; &lt;/a&gt; 평소와 같이 소켓 개체에 대한 작업 (및 대응을).</target>
        </trans-unit>
        <trans-unit id="d038ff2ff4aca2174d2d681322cbe37a210d3e38" translate="yes" xml:space="preserve">
          <source>After calling this function, the handle is effectively invalidated, but the handle is not closed. You would call this function when you need the underlying Win32 handle to exist beyond the lifetime of the handle object.</source>
          <target state="translated">이 함수를 호출하면 핸들이 효과적으로 무효화되지만 핸들이 닫히지 않습니다. 기본 Win32 핸들이 핸들 오브젝트의 수명을 넘어 존재해야 할 때이 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a0df7e82f63c6ebd4a0d0051d037ed77926c952c" translate="yes" xml:space="preserve">
          <source>After object creation, treating the option name like a dictionary index</source>
          <target state="translated">객체 생성 후 옵션 이름을 사전 색인처럼 취급</target>
        </trans-unit>
        <trans-unit id="e022ab40c3a7bfffee8195f05bc3a6c276b589e7" translate="yes" xml:space="preserve">
          <source>After putting an object on an empty queue there may be an infinitesimal delay before the queue&amp;rsquo;s &lt;a href=&quot;#multiprocessing.Queue.empty&quot;&gt;&lt;code&gt;empty()&lt;/code&gt;&lt;/a&gt; method returns &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#multiprocessing.Queue.get_nowait&quot;&gt;&lt;code&gt;get_nowait()&lt;/code&gt;&lt;/a&gt; can return without raising &lt;a href=&quot;queue#queue.Empty&quot;&gt;&lt;code&gt;queue.Empty&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">빈 큐에 객체를 넣은 후 큐의 &lt;a href=&quot;#multiprocessing.Queue.empty&quot;&gt; &lt;code&gt;empty()&lt;/code&gt; &lt;/a&gt; 메소드가 &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; 를&lt;/a&gt; 리턴 하고 &lt;a href=&quot;#multiprocessing.Queue.get_nowait&quot;&gt; &lt;code&gt;get_nowait()&lt;/code&gt; &lt;/a&gt; 가 &lt;a href=&quot;queue#queue.Empty&quot;&gt; &lt;code&gt;queue.Empty&lt;/code&gt; &lt;/a&gt; 를 올리지 않고 리턴 하기 전에 무한 지연이있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b8ff9fd8972c649bd1662cf6a9526d26eaa9bd5" translate="yes" xml:space="preserve">
          <source>After running the test, &lt;code&gt;events&lt;/code&gt; would contain &lt;code&gt;[&quot;setUp&quot;, &quot;asyncSetUp&quot;, &quot;test_response&quot;, &quot;asyncTearDown&quot;, &quot;tearDown&quot;, &quot;cleanup&quot;]&lt;/code&gt;.</source>
          <target state="translated">테스트를 실행 한 후 &lt;code&gt;events&lt;/code&gt; 에는 &lt;code&gt;[&quot;setUp&quot;, &quot;asyncSetUp&quot;, &quot;test_response&quot;, &quot;asyncTearDown&quot;, &quot;tearDown&quot;, &quot;cleanup&quot;]&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="6f4ff2a70a77d2b66658454222292a23e29549ff" translate="yes" xml:space="preserve">
          <source>After the raw stream has been detached, the buffer is in an unusable state.</source>
          <target state="translated">원시 스트림이 분리 된 후 버퍼는 사용할 수없는 상태입니다.</target>
        </trans-unit>
        <trans-unit id="ee1af62b8aaabf1acd9896c452a131674a96b865" translate="yes" xml:space="preserve">
          <source>After the underlying buffer has been detached, the &lt;a href=&quot;#io.TextIOBase&quot;&gt;&lt;code&gt;TextIOBase&lt;/code&gt;&lt;/a&gt; is in an unusable state.</source>
          <target state="translated">기본 버퍼가 분리 된 후 &lt;a href=&quot;#io.TextIOBase&quot;&gt; &lt;code&gt;TextIOBase&lt;/code&gt; &lt;/a&gt; 는 사용할 수없는 상태입니다.</target>
        </trans-unit>
        <trans-unit id="d44733f3188a570411ead96cdda7b71f70b75499" translate="yes" xml:space="preserve">
          <source>After these path manipulations, an attempt is made to import a module named &lt;code&gt;sitecustomize&lt;/code&gt;, which can perform arbitrary site-specific customizations. It is typically created by a system administrator in the site-packages directory. If this import fails with an &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; or its subclass exception, and the exception&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; attribute equals to &lt;code&gt;'sitecustomize'&lt;/code&gt;, it is silently ignored. If Python is started without output streams available, as with &lt;code&gt;pythonw.exe&lt;/code&gt; on Windows (which is used by default to start IDLE), attempted output from &lt;code&gt;sitecustomize&lt;/code&gt; is ignored. Any other exception causes a silent and perhaps mysterious failure of the process.</source>
          <target state="translated">이러한 경로 조작 후 &lt;code&gt;sitecustomize&lt;/code&gt; 라는 모듈을 가져 오려고 시도 하며 ,이 모듈은 임의의 사이트 별 사용자 정의를 수행 할 수 있습니다. 일반적으로 시스템 관리자가 site-packages 디렉토리에 작성합니다. 이 가져 오기가 &lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt; 또는 해당 서브 클래스 예외 와 함께 실패 하고 예외의 &lt;code&gt;name&lt;/code&gt; 속성이 &lt;code&gt;'sitecustomize'&lt;/code&gt; 와 같으면 자동으로 무시됩니다. 출력과 같이 사용할 수 스트림없이 파이썬이 시작되면 &lt;code&gt;pythonw.exe&lt;/code&gt; (IDLE를 시작하는 데 기본적으로 사용됩니다) Windows에서에서 시도 출력 &lt;code&gt;sitecustomize&lt;/code&gt; 는 무시됩니다. 다른 예외는 프로세스의 침묵과 신비한 실패를 야기합니다.</target>
        </trans-unit>
        <trans-unit id="9330ca10edf31a8f07b7a3a7111df51eda1f975b" translate="yes" xml:space="preserve">
          <source>After this method has been called, any further operation on the view raises a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; (except &lt;a href=&quot;#memoryview.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; itself which can be called multiple times):</source>
          <target state="translated">이 메소드가 호출 된 후 뷰에서 추가 작업을 수행하면 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 가 발생합니다&lt;/a&gt; ( 여러 번 호출 할 수있는 &lt;a href=&quot;#memoryview.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 자체 제외 ).</target>
        </trans-unit>
        <trans-unit id="b2768fea23cb25766dd541c907ce6b3b52be13d1" translate="yes" xml:space="preserve">
          <source>After this, an attempt is made to import a module named &lt;code&gt;usercustomize&lt;/code&gt;, which can perform arbitrary user-specific customizations, if &lt;a href=&quot;#site.ENABLE_USER_SITE&quot;&gt;&lt;code&gt;ENABLE_USER_SITE&lt;/code&gt;&lt;/a&gt; is true. This file is intended to be created in the user site-packages directory (see below), which is part of &lt;code&gt;sys.path&lt;/code&gt; unless disabled by &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-s&quot;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/a&gt;. If this import fails with an &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; or its subclass exception, and the exception&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; attribute equals to &lt;code&gt;'usercustomize'&lt;/code&gt;, it is silently ignored.</source>
          <target state="translated">이 후, 시도라는 이름의 모듈을 가져올 만들어 &lt;code&gt;usercustomize&lt;/code&gt; 경우, 임의의 사용자 고유의 사용자 지정을 수행 할 수 &lt;a href=&quot;#site.ENABLE_USER_SITE&quot;&gt; &lt;code&gt;ENABLE_USER_SITE&lt;/code&gt; 는&lt;/a&gt; 사실을. 이 파일은 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-s&quot;&gt; &lt;code&gt;-s&lt;/code&gt; 에&lt;/a&gt; 의해 비활성화되지 않은 경우 &lt;code&gt;sys.path&lt;/code&gt; 의 일부인 사용자 site-packages 디렉토리 (아래 참조)에 작성 됩니다 . 이 가져 오기가 &lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt; 또는 해당 서브 클래스 예외 와 함께 실패 하고 예외의 &lt;code&gt;name&lt;/code&gt; 속성이 &lt;code&gt;'usercustomize'&lt;/code&gt; 와 같으면 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d647d3e36437c582646dcfa7db85434ea8b78d82" translate="yes" xml:space="preserve">
          <source>After this, an attempt is made to import a module named &lt;code&gt;usercustomize&lt;/code&gt;, which can perform arbitrary user-specific customizations, if &lt;a href=&quot;#site.ENABLE_USER_SITE&quot;&gt;&lt;code&gt;ENABLE_USER_SITE&lt;/code&gt;&lt;/a&gt; is true. This file is intended to be created in the user site-packages directory (see below), which is part of &lt;code&gt;sys.path&lt;/code&gt; unless disabled by &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-s&quot;&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/a&gt;. If this import fails with an &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; or its subclass exception, and the exception&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; attribute equals to &lt;code&gt;'usercustomize'&lt;/code&gt;, it is silently ignored.</source>
          <target state="translated">After this, an attempt is made to import a module named &lt;code&gt;usercustomize&lt;/code&gt; , which can perform arbitrary user-specific customizations, if &lt;a href=&quot;#site.ENABLE_USER_SITE&quot;&gt; &lt;code&gt;ENABLE_USER_SITE&lt;/code&gt; &lt;/a&gt; is true. This file is intended to be created in the user site-packages directory (see below), which is part of &lt;code&gt;sys.path&lt;/code&gt; unless disabled by &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-s&quot;&gt; &lt;code&gt;-s&lt;/code&gt; &lt;/a&gt;. If this import fails with an &lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt; or its subclass exception, and the exception&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; attribute equals to &lt;code&gt;'usercustomize'&lt;/code&gt; , it is silently ignored.</target>
        </trans-unit>
        <trans-unit id="43f3883ceb8aa25073e4ce290428185982ec0665" translate="yes" xml:space="preserve">
          <source>Alert Descriptions from &lt;a href=&quot;https://tools.ietf.org/html/rfc5246.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 5246&lt;/strong&gt;&lt;/a&gt; and others. The &lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-6&quot;&gt;IANA TLS Alert Registry&lt;/a&gt; contains this list and references to the RFCs where their meaning is defined.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc5246.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 5246&lt;/strong&gt;&lt;/a&gt; 및 기타의 경고 설명 . &lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-6&quot;&gt;IANA TLS 경고 레지스트리는&lt;/a&gt; 그 의미가 정의 된 RFC는이 목록과 참조가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c1dc0a32970d2316ea232558be6864f582c80f2" translate="yes" xml:space="preserve">
          <source>Algorithmically, &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; can handle frequent reordering operations better than &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;. This makes it suitable for tracking recent accesses (for example in an &lt;a href=&quot;https://medium.com/@krishankantsinghal/my-first-blog-on-medium-583159139237&quot;&gt;LRU cache&lt;/a&gt;).</source>
          <target state="translated">알고리즘 적으로 &lt;a href=&quot;#collections.OrderedDict&quot;&gt; &lt;code&gt;OrderedDict&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 보다 빈번한 재정렬 작업을 더 잘 처리 할 수 ​​있습니다 . 따라서 최근 액세스를 추적하는 데 적합합니다 (예 : &lt;a href=&quot;https://medium.com/@krishankantsinghal/my-first-blog-on-medium-583159139237&quot;&gt;LRU 캐시&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ae7afc7cda35b97ec7792acdf19b73ce74efe65d" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#getopt.GetoptError&quot;&gt;&lt;code&gt;GetoptError&lt;/code&gt;&lt;/a&gt;; for backward compatibility.</source>
          <target state="translated">&lt;a href=&quot;#getopt.GetoptError&quot;&gt; &lt;code&gt;GetoptError&lt;/code&gt; 의&lt;/a&gt; 별칭 ; 이전 버전과의 호환성을 위해.</target>
        </trans-unit>
        <trans-unit id="b4c82b8c87f05ccdbcc3a216b96cf1a53ccf563e" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt; &lt;code&gt;PROTOCOL_TLS&lt;/code&gt; 의&lt;/a&gt; 별명입니다 .</target>
        </trans-unit>
        <trans-unit id="eab0dbe8bd01f5049191cf6e61204d3aabd1ee93" translate="yes" xml:space="preserve">
          <source>Alias for &lt;a href=&quot;#xml.parsers.expat.ExpatError&quot;&gt;&lt;code&gt;ExpatError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#xml.parsers.expat.ExpatError&quot;&gt; &lt;code&gt;ExpatError&lt;/code&gt; 의&lt;/a&gt; 별명 .</target>
        </trans-unit>
        <trans-unit id="cadc80a1cf0273c362c8330f48cb4ddc336aa467" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;LF&lt;/code&gt;: &amp;ldquo;New line&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;LF&lt;/code&gt; 의 별칭 : &quot;새 줄&quot;</target>
        </trans-unit>
        <trans-unit id="d38e79ce398493b91869071ba23338cb1cdcfe6f" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;TAB&lt;/code&gt;: &amp;ldquo;Horizontal tab&amp;rdquo;</source>
          <target state="translated">&lt;code&gt;TAB&lt;/code&gt; 별칭 :&amp;ldquo;수평 탭&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="59614a7389348101f9b1ea41779375c6d97c1236" translate="yes" xml:space="preserve">
          <source>Alias for output, for symmetry with &lt;a href=&quot;#subprocess.CalledProcessError.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#subprocess.CalledProcessError.stderr&quot;&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;/a&gt; 과의 대칭을위한 출력 별명 .</target>
        </trans-unit>
        <trans-unit id="4d404ca5cc49cbaffcbe2bdf1037676fb7d13f36" translate="yes" xml:space="preserve">
          <source>Alias for output, for symmetry with &lt;a href=&quot;#subprocess.TimeoutExpired.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#subprocess.TimeoutExpired.stderr&quot;&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;/a&gt; 과의 대칭을위한 출력 별명 .</target>
        </trans-unit>
        <trans-unit id="471e12f5a361936c257c992b8760c41b0d9219fb" translate="yes" xml:space="preserve">
          <source>Alias of &lt;a href=&quot;#zipfile.BadZipFile&quot;&gt;&lt;code&gt;BadZipFile&lt;/code&gt;&lt;/a&gt;, for compatibility with older Python versions.</source>
          <target state="translated">이전 Python 버전과의 호환성을위한 &lt;a href=&quot;#zipfile.BadZipFile&quot;&gt; &lt;code&gt;BadZipFile&lt;/code&gt; 의&lt;/a&gt; 별칭</target>
        </trans-unit>
        <trans-unit id="3064a091e0e389e1a86a20dcc2bbe19d5d7d6b45" translate="yes" xml:space="preserve">
          <source>Alias to &lt;a href=&quot;#signal.SIGCHLD&quot;&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">별칭을 &lt;a href=&quot;#signal.SIGCHLD&quot;&gt; &lt;code&gt;SIGCHLD&lt;/code&gt; 로 지정&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="6fe6d4aa04dab6037d66eb4cb0b7d08cc478f9d1" translate="yes" xml:space="preserve">
          <source>Aliases may be nested and can contain anything that can be legally typed at the pdb prompt. Note that internal pdb commands &lt;em&gt;can&lt;/em&gt; be overridden by aliases. Such a command is then hidden until the alias is removed. Aliasing is recursively applied to the first word of the command line; all other words in the line are left alone.</source>
          <target state="translated">별명은 중첩 될 수 있으며 pdb 프롬프트에서 합법적으로 입력 할 수있는 모든 것을 포함 할 수 있습니다. 내부 pdb 명령 &lt;em&gt;은&lt;/em&gt; 별명으로 대체 될 &lt;em&gt;수&lt;/em&gt; 있습니다. 그런 다음 별명을 제거 할 때까지 이러한 명령이 숨겨집니다. 별칭은 명령 줄의 첫 번째 단어에 재귀 적으로 적용됩니다. 줄의 다른 모든 단어는 그대로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="19c1a164caf9d915e6d248f6f19c0c5b6e55d90b" translate="yes" xml:space="preserve">
          <source>Aligning the text and specifying a width:</source>
          <target state="translated">텍스트 정렬 및 너비 지정 :</target>
        </trans-unit>
        <trans-unit id="7f8c5176c3f03b97659161923f2b6492f7de7e73" translate="yes" xml:space="preserve">
          <source>Alignment</source>
          <target state="translated">Alignment</target>
        </trans-unit>
        <trans-unit id="a82c356470136a5da9aaa83cba880eb8930e0b37" translate="yes" xml:space="preserve">
          <source>All &amp;ldquo;a&amp;rdquo; functions in this section fail (more or less) silently if the executed program cannot be found; the &amp;ldquo;b&amp;rdquo; replacements raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">이 섹션의 모든 &quot;a&quot;기능은 실행 된 프로그램을 찾을 수 없으면 자동으로 실패합니다 (약간 또는 그 이하). &quot;b&quot;대체는 대신 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1823c660ec385cd7ad12aec995cc722b1d5b46fb" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;#real-valued-distributions&quot;&gt;real valued distributions&lt;/a&gt; in the class will use the new method:</source>
          <target state="translated">클래스의 모든 &lt;a href=&quot;#real-valued-distributions&quot;&gt;실제 가치 분포&lt;/a&gt; 는 새로운 방법을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f1726842c26241e242541890252b33775dc0eae3" translate="yes" xml:space="preserve">
          <source>All &lt;a href=&quot;numbers#numbers.Real&quot;&gt;&lt;code&gt;numbers.Real&lt;/code&gt;&lt;/a&gt; types (&lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;) also include the following operations:</source>
          <target state="translated">모든 &lt;a href=&quot;numbers#numbers.Real&quot;&gt; &lt;code&gt;numbers.Real&lt;/code&gt; 의&lt;/a&gt; 유형 ( &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; )도 다음과 같은 작업을 포함한다 :</target>
        </trans-unit>
        <trans-unit id="68cd5f511616dc760e97502971cef15504097ea7" translate="yes" xml:space="preserve">
          <source>All &lt;em&gt;multipart&lt;/em&gt; type messages will be parsed as a container message object with a list of sub-message objects for their payload. The outer container message will return &lt;code&gt;True&lt;/code&gt; for &lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt;&lt;code&gt;is_multipart()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt;&lt;code&gt;iter_parts()&lt;/code&gt;&lt;/a&gt; will yield a list of subparts.</source>
          <target state="translated">모든 &lt;em&gt;멀티 파트&lt;/em&gt; 유형 메시지는 페이로드에 대한 하위 메시지 객체 목록이있는 컨테이너 메시지 객체로 구문 분석됩니다. 외부 컨테이너 메시지는 &lt;a href=&quot;email.message#email.message.EmailMessage.is_multipart&quot;&gt; &lt;code&gt;is_multipart()&lt;/code&gt; &lt;/a&gt; 대해 &lt;code&gt;True&lt;/code&gt; 를 반환 하고 &lt;a href=&quot;email.message#email.message.EmailMessage.iter_parts&quot;&gt; &lt;code&gt;iter_parts()&lt;/code&gt; &lt;/a&gt; 는 하위 파트 목록을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="59f4fc3531243119771587b080eddb77449d0769" translate="yes" xml:space="preserve">
          <source>All &lt;em&gt;other&lt;/em&gt; keys are passed through as keyword arguments to the handler&amp;rsquo;s constructor. For example, given the snippet:</source>
          <target state="translated">&lt;em&gt;다른&lt;/em&gt; 모든 키는 키워드 인수로 핸들러의 생성자에 전달됩니다. 예를 들어, 스 니펫이 주어진 경우 :</target>
        </trans-unit>
        <trans-unit id="fb1488621f65c70bf66f1f957d6992583befc69c" translate="yes" xml:space="preserve">
          <source>All &lt;strong&gt;gzip&lt;/strong&gt; compressed streams are required to contain this timestamp field. Some programs, such as &lt;strong&gt;gunzip&lt;/strong&gt;, make use of the timestamp. The format is the same as the return value of &lt;a href=&quot;time#time.time&quot;&gt;&lt;code&gt;time.time()&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;os#os.stat_result.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt; attribute of the object returned by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모든 &lt;strong&gt;gzip&lt;/strong&gt; 압축 스트림은이 타임 스탬프 필드를 포함해야합니다. &lt;strong&gt;gunzip&lt;/strong&gt; 과 같은 일부 프로그램 은 타임 스탬프를 사용합니다. 형식은 &lt;a href=&quot;time#time.time&quot;&gt; &lt;code&gt;time.time()&lt;/code&gt; &lt;/a&gt; 의 리턴 값 및 &lt;a href=&quot;os#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 오브젝트 의 &lt;a href=&quot;os#os.stat_result.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt; 속성과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="f64a36de478d59806bf84b1b01392cf6f7782245" translate="yes" xml:space="preserve">
          <source>All IMAP4rev1 commands are represented by methods of the same name, either upper-case or lower-case.</source>
          <target state="translated">모든 IMAP4rev1 명령은 대문자 또는 소문자로 동일한 이름의 메소드로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="59eff8140f7f6cc8eee1beb73070dcf238148177" translate="yes" xml:space="preserve">
          <source>All IO on an &lt;a href=&quot;#ssl.SSLObject&quot;&gt;&lt;code&gt;SSLObject&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking&lt;/a&gt;. This means that for example &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; will raise an &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt;&lt;code&gt;SSLWantReadError&lt;/code&gt;&lt;/a&gt; if it needs more data than the incoming BIO has available.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLObject&quot;&gt; &lt;code&gt;SSLObject&lt;/code&gt; 의&lt;/a&gt; 모든 IO 는 &lt;a href=&quot;#ssl-nonblocking&quot;&gt;비 블로킹&lt;/a&gt; 입니다. 이는 예를 들어 &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt; 가 들어오는 BIO가 사용할 수있는 것보다 더 많은 데이터가 필요한 경우 &lt;a href=&quot;#ssl.SSLWantReadError&quot;&gt; &lt;code&gt;SSLWantReadError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f05e728b285d42a5cfcc7b03157016dd489531bf" translate="yes" xml:space="preserve">
          <source>All POP3 commands are represented by methods of the same name, in lower-case; most return the response text sent by the server.</source>
          <target state="translated">모든 POP3 명령은 동일한 이름의 방법으로 소문자로 표시됩니다. 대부분 서버가 보낸 응답 텍스트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3414548f8739b658119012bc5a437c65f919cdbe" translate="yes" xml:space="preserve">
          <source>All Platforms</source>
          <target state="translated">모든 플랫폼</target>
        </trans-unit>
        <trans-unit id="3f22c61ff7186f7ff5a4a7b6ac42edb2119d4f66" translate="yes" xml:space="preserve">
          <source>All Win32 systems support at least the following; most systems support many more:</source>
          <target state="translated">모든 Win32 시스템은 최소한 다음을 지원합니다. 대부분의 시스템은 더 많은 것을 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="b4c3e2e5e166bd33c375661190706f81b3415ea8" translate="yes" xml:space="preserve">
          <source>All arguments are optional and default to &lt;code&gt;0&lt;/code&gt;. Arguments may be integers or floats, and may be positive or negative.</source>
          <target state="translated">모든 인수는 선택 사항이며 기본값은 &lt;code&gt;0&lt;/code&gt; 입니다. 인수는 정수 또는 부동 소수점 일 수 있으며 양수 또는 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afeaadb9a3f4efc626cf9837aa136718e99ff657" translate="yes" xml:space="preserve">
          <source>All arguments are optional, and all except for &lt;em&gt;m&lt;/em&gt; should be specified in keyword form.</source>
          <target state="translated">모든 인수는 선택 사항이며 &lt;em&gt;m을&lt;/em&gt; 제외한 모든 인수는 키워드 형식으로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="45da80b609e066ba052795b1ad773af41969ce6d" translate="yes" xml:space="preserve">
          <source>All arguments are optional. &lt;em&gt;tzinfo&lt;/em&gt; may be &lt;code&gt;None&lt;/code&gt;, or an instance of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass. The remaining arguments must be integers in the following ranges:</source>
          <target state="translated">모든 인수는 선택 사항입니다. &lt;em&gt;tzinfo&lt;/em&gt; 는 &lt;code&gt;None&lt;/code&gt; 이거나 &lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt; 서브 클래스 의 인스턴스 일 수 있습니다 . 나머지 인수는 다음 범위의 정수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="a41de24556098cd8f538669ad809aeff6d77b80b" translate="yes" xml:space="preserve">
          <source>All arguments are required. Arguments must be integers, in the following ranges:</source>
          <target state="translated">모든 주장이 필요합니다. 인수는 다음 범위의 정수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="b9c41702d1e64bc776766a2674021dc0acd4cdbf" translate="yes" xml:space="preserve">
          <source>All arguments except &lt;em&gt;filename&lt;/em&gt; are optional, and should be specified in keyword form.</source>
          <target state="translated">&lt;em&gt;filename을&lt;/em&gt; 제외한 모든 인수 는 선택 사항이며 키워드 형식으로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="ee92851c158191e121c730100fcb0d60e5daea4d" translate="yes" xml:space="preserve">
          <source>All arguments to commands are converted to strings, except for &lt;code&gt;AUTHENTICATE&lt;/code&gt;, and the last argument to &lt;code&gt;APPEND&lt;/code&gt; which is passed as an IMAP4 literal. If necessary (the string contains IMAP4 protocol-sensitive characters and isn&amp;rsquo;t enclosed with either parentheses or double quotes) each string is quoted. However, the &lt;em&gt;password&lt;/em&gt; argument to the &lt;code&gt;LOGIN&lt;/code&gt; command is always quoted. If you want to avoid having an argument string quoted (eg: the &lt;em&gt;flags&lt;/em&gt; argument to &lt;code&gt;STORE&lt;/code&gt;) then enclose the string in parentheses (eg: &lt;code&gt;r'(\Deleted)'&lt;/code&gt;).</source>
          <target state="translated">명령에 대한 모든 인수는 &lt;code&gt;AUTHENTICATE&lt;/code&gt; 및 IMAP4 리터럴로 전달되는 &lt;code&gt;APPEND&lt;/code&gt; 에 대한 마지막 인수를 제외하고 문자열로 변환됩니다 . 필요한 경우 (문자열에 IMAP4 프로토콜 구분 문자가 포함되며 괄호 나 큰 따옴표로 묶지 않음) 각 문자열이 인용됩니다. 그러나 &lt;code&gt;LOGIN&lt;/code&gt; 명령 의 &lt;em&gt;비밀번호&lt;/em&gt; 인수 는 항상 인용됩니다. 인수 문자열을 따옴표로 묶지 않으려면 (예 : &lt;code&gt;STORE&lt;/code&gt; 의 &lt;em&gt;flags&lt;/em&gt; 인수 ) 문자열을 괄호로 묶습니다 (예 : &lt;code&gt;r'(\Deleted)'&lt;/code&gt; ).&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="031f5a606c175280f66f531447d16bf78411e5be" translate="yes" xml:space="preserve">
          <source>All asyncio protocols can implement Base Protocol callbacks.</source>
          <target state="translated">모든 asyncio 프로토콜은 기본 프로토콜 콜백을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbd9ac4a05c360b4511702914270df681ebcd66a" translate="yes" xml:space="preserve">
          <source>All attributes implemented by address objects are implemented by network objects as well. In addition, network objects implement additional attributes. All of these are common between &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ipaddress.IPv6Network&quot;&gt;&lt;code&gt;IPv6Network&lt;/code&gt;&lt;/a&gt;, so to avoid duplication they are only documented for &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt;. Network objects are &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt;, so they can be used as keys in dictionaries.</source>
          <target state="translated">주소 객체로 구현 된 모든 속성은 네트워크 객체로도 구현됩니다. 또한 네트워크 객체는 추가 속성을 구현합니다. 이것들은 모두 &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt; &lt;code&gt;IPv4Network&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#ipaddress.IPv6Network&quot;&gt; &lt;code&gt;IPv6Network&lt;/code&gt; &lt;/a&gt; 간에 공통적 이므로 중복을 피하기 위해 &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt; &lt;code&gt;IPv4Network&lt;/code&gt; 에&lt;/a&gt; 대해서만 문서화되어 있습니다 . 네트워크 객체는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;해시 가능&lt;/a&gt; 하므로 사전에서 키로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4155e00e33adae93f928bcc5c49ba79c56f0f61a" translate="yes" xml:space="preserve">
          <source>All attributes implemented by address objects are implemented by network objects as well. In addition, network objects implement additional attributes. All of these are common between &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ipaddress.IPv6Network&quot;&gt;&lt;code&gt;IPv6Network&lt;/code&gt;&lt;/a&gt;, so to avoid duplication they are only documented for &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt;&lt;code&gt;IPv4Network&lt;/code&gt;&lt;/a&gt;. Network objects are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt;, so they can be used as keys in dictionaries.</source>
          <target state="translated">주소 개체에 의해 구현 된 모든 속성은 네트워크 개체에 의해 구현됩니다. 또한 네트워크 개체는 추가 속성을 구현합니다. 이들 모두는 &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt; &lt;code&gt;IPv4Network&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#ipaddress.IPv6Network&quot;&gt; &lt;code&gt;IPv6Network&lt;/code&gt; &lt;/a&gt; 간에 공통적 이므로 중복을 피하기 위해 &lt;a href=&quot;#ipaddress.IPv4Network&quot;&gt; &lt;code&gt;IPv4Network&lt;/code&gt; 에&lt;/a&gt; 대해서만 문서화됩니다 . 네트워크 객체는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-hashable&quot;&gt;해시 가능&lt;/a&gt; 하므로 사전에서 키로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4dbd3c5316f651cef378d40e6f747eaf218b9172" translate="yes" xml:space="preserve">
          <source>All built-in, non-system-exiting exceptions are derived from this class. All user-defined exceptions should also be derived from this class.</source>
          <target state="translated">시스템에 존재하지 않는 모든 내장 예외는이 클래스에서 파생됩니다. 모든 사용자 정의 예외도이 클래스에서 파생되어야합니다.</target>
        </trans-unit>
        <trans-unit id="db1915ddc75890b79023cb3d160beb6524f1bf36" translate="yes" xml:space="preserve">
          <source>All calls to this function with a given name return the same logger instance. This means that logger instances never need to be passed between different parts of an application.</source>
          <target state="translated">주어진 이름으로이 함수를 호출하면 동일한 로거 인스턴스가 반환됩니다. 이는 로거 인스턴스가 애플리케이션의 다른 부분 사이에 전달 될 필요가 없음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0c7ddca5ecb214fc8a6ff6ead24282869b3d742a" translate="yes" xml:space="preserve">
          <source>All changes to MH mailboxes are immediately applied, so this method does nothing.</source>
          <target state="translated">MH 사서함에 대한 모든 변경 사항은 즉시 적용되므로이 방법으로 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="36ef7a286b4df5227bf77c9f5987c04ce550fd48" translate="yes" xml:space="preserve">
          <source>All changes to Maildir mailboxes are immediately applied, so this method does nothing.</source>
          <target state="translated">Maildir 사서함에 대한 모든 변경 사항이 즉시 적용되므로이 방법으로 아무 작업도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6ba4ce793f08c2aeaad053356252f02ff9e86122" translate="yes" xml:space="preserve">
          <source>All commands will raise an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;nntplib.putline&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;, where &lt;code&gt;line&lt;/code&gt; is the bytes about to be sent to the remote host.</source>
          <target state="translated">모든 명령은 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;line&lt;/code&gt; 인수와 함께 &lt;a href=&quot;sys#auditing&quot;&gt;감사 이벤트 &lt;/a&gt; &lt;code&gt;nntplib.putline&lt;/code&gt; 을 발생 시킵니다 . 여기서 &lt;code&gt;line&lt;/code&gt; 은 원격 호스트로 전송 될 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="987583aba6ab43986ee540ce2d5a0a979df6e457" translate="yes" xml:space="preserve">
          <source>All commands will raise an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;poplib.putline&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;line&lt;/code&gt;, where &lt;code&gt;line&lt;/code&gt; is the bytes about to be sent to the remote host.</source>
          <target state="translated">모든 명령은 인수 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;line&lt;/code&gt; 과 함께 &lt;a href=&quot;sys#auditing&quot;&gt;감사 이벤트 &lt;/a&gt; &lt;code&gt;poplib.putline&lt;/code&gt; 을 발생 시킵니다 . 여기서 &lt;code&gt;line&lt;/code&gt; 은 원격 호스트로 전송 될 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="0ebb715b219c77d2b43f98501c7daf8840b7660a" translate="yes" xml:space="preserve">
          <source>All commands will raise an &lt;a href=&quot;sys#auditing&quot;&gt;auditing event&lt;/a&gt;&lt;code&gt;smtplib.SMTP.send&lt;/code&gt; with arguments &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;, where &lt;code&gt;data&lt;/code&gt; is the bytes about to be sent to the remote host.</source>
          <target state="translated">모든 명령은 &lt;code&gt;self&lt;/code&gt; 및 &lt;code&gt;data&lt;/code&gt; 인수와 함께 &lt;a href=&quot;sys#auditing&quot;&gt;감사 이벤트 &lt;/a&gt; &lt;code&gt;smtplib.SMTP.send&lt;/code&gt; 를 발생 시킵니다 . 여기서 &lt;code&gt;data&lt;/code&gt; 는 원격 호스트로 전송 될 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="130ec836bbcb22e52ee0cf2ee501ba311b193ebb" translate="yes" xml:space="preserve">
          <source>All constants are now &lt;a href=&quot;enum#enum.IntEnum&quot;&gt;&lt;code&gt;enum.IntEnum&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;enum#enum.IntFlag&quot;&gt;&lt;code&gt;enum.IntFlag&lt;/code&gt;&lt;/a&gt; collections.</source>
          <target state="translated">모든 상수는 이제 &lt;a href=&quot;enum#enum.IntEnum&quot;&gt; &lt;code&gt;enum.IntEnum&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;enum#enum.IntFlag&quot;&gt; &lt;code&gt;enum.IntFlag&lt;/code&gt; &lt;/a&gt; 컬렉션입니다.</target>
        </trans-unit>
        <trans-unit id="8bf35df37eefcc4b205b0e86b2bb42edebe23d0f" translate="yes" xml:space="preserve">
          <source>All constants from the &lt;a href=&quot;token#module-token&quot;&gt;&lt;code&gt;token&lt;/code&gt;&lt;/a&gt; module are also exported from &lt;a href=&quot;#module-tokenize&quot;&gt;&lt;code&gt;tokenize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;token#module-token&quot;&gt; &lt;code&gt;token&lt;/code&gt; &lt;/a&gt; 모듈의 모든 상수도 &lt;a href=&quot;#module-tokenize&quot;&gt; &lt;code&gt;tokenize&lt;/code&gt; &lt;/a&gt; 에서 내보내집니다 .</target>
        </trans-unit>
        <trans-unit id="299f6f3a07c72abcf84b07e20f8d55abc29c53bc" translate="yes" xml:space="preserve">
          <source>All ctypes data types have a default implementation of this classmethod that normally returns &lt;em&gt;obj&lt;/em&gt; if that is an instance of the type. Some types accept other objects as well.</source>
          <target state="translated">모든 ctypes 데이터 형식에는이 클래스 메서드의 기본 구현이 있으며이 클래스 메서드는 일반적으로 형식의 인스턴스 인 경우 &lt;em&gt;obj를&lt;/em&gt; 반환 합니다. 일부 유형은 다른 객체도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="4cb08e4edd7da0cbd1811b03590d4649a88477dd" translate="yes" xml:space="preserve">
          <source>All defect classes are subclassed from &lt;code&gt;email.errors.MessageDefect&lt;/code&gt;.</source>
          <target state="translated">모든 결함 클래스는 &lt;code&gt;email.errors.MessageDefect&lt;/code&gt; 에서 서브 클래스됩니다 .</target>
        </trans-unit>
        <trans-unit id="f4baad04cd2258a2a56a2f8fc40748593c649301" translate="yes" xml:space="preserve">
          <source>All entity references from &lt;a href=&quot;html.entities#module-html.entities&quot;&gt;&lt;code&gt;html.entities&lt;/code&gt;&lt;/a&gt; are replaced in the attribute values.</source>
          <target state="translated">&lt;a href=&quot;html.entities#module-html.entities&quot;&gt; &lt;code&gt;html.entities&lt;/code&gt; 의&lt;/a&gt; 모든 엔티티 참조 는 속성 값으로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="e465e17c1a37d9609d9ff9aff3453fc0828078fd" translate="yes" xml:space="preserve">
          <source>All errors raise exceptions. The normal exceptions for invalid argument types and out-of-memory conditions can be raised; starting from Python 3.3, errors related to socket or address semantics raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; or one of its subclasses (they used to raise &lt;a href=&quot;#socket.error&quot;&gt;&lt;code&gt;socket.error&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">모든 오류는 예외를 발생시킵니다. 유효하지 않은 인수 유형 및 메모리 부족 조건에 대한 일반적인 예외가 발생할 수 있습니다. Python 3.3부터 소켓 또는 주소 의미와 관련된 오류는 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 또는 해당 서브 클래스 중 하나 ( &lt;a href=&quot;#socket.error&quot;&gt; &lt;code&gt;socket.error&lt;/code&gt; 를 발생시키는&lt;/a&gt; 데 사용됨 )를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="2bc61495b794fe0aa34758d7e2920183e2b9b9bd" translate="yes" xml:space="preserve">
          <source>All event loops on Windows do not support the following methods:</source>
          <target state="translated">Windows의 모든 이벤트 루프는 다음 방법을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="caf8948335d4c7f60ae36806aadee301a2f018ea" translate="yes" xml:space="preserve">
          <source>All examples assume a native byte order, size, and alignment with a big-endian machine.</source>
          <target state="translated">모든 예제는 기본 바이트 순서, 크기 및 빅 엔디안 컴퓨터와의 정렬을 가정합니다.</target>
        </trans-unit>
        <trans-unit id="f809ac9170e1c6e6ca0f059a4d69cb510f1c3d53" translate="yes" xml:space="preserve">
          <source>All files are opened in text mode by default, but you can override this by specifying the &lt;em&gt;mode&lt;/em&gt; parameter in the call to &lt;a href=&quot;#fileinput.input&quot;&gt;&lt;code&gt;input()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#fileinput.FileInput&quot;&gt;&lt;code&gt;FileInput&lt;/code&gt;&lt;/a&gt;. If an I/O error occurs during opening or reading a file, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">모든 파일은 기본적으로 텍스트 모드로 열리지 만 &lt;a href=&quot;#fileinput.input&quot;&gt; &lt;code&gt;input()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#fileinput.FileInput&quot;&gt; &lt;code&gt;FileInput&lt;/code&gt; &lt;/a&gt; 호출에서 &lt;em&gt;mode&lt;/em&gt; 매개 변수를 지정하여이를 대체 할 수 있습니다 . 파일을 열거 나 읽는 동안 I / O 오류가 발생하면 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="293649b21c6f8fabecd0b086b5127c14b3f9f4f1" translate="yes" xml:space="preserve">
          <source>All following arguments are optional and can be accessed as instance attributes as well.</source>
          <target state="translated">다음의 모든 인수는 선택 사항이며 인스턴스 속성으로도 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a1a5d969852f9eb11af03015e19c7b15f856807" translate="yes" xml:space="preserve">
          <source>All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned.</source>
          <target state="translated">경로 또는 파일 이름을 허용하는 모든 함수는 바이트 및 문자열 객체를 모두 허용하며 경로 또는 파일 이름이 반환되면 동일한 유형의 객체가됩니다.</target>
        </trans-unit>
        <trans-unit id="764b4d6c99569a6649ee11a3f6913ea07403cc88" translate="yes" xml:space="preserve">
          <source>All functions in this module raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; (or subclasses thereof) in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system.</source>
          <target state="translated">이 모듈의 모든 함수 는 유효하지 않거나 액세스 할 수없는 파일 이름 및 경로 또는 올바른 유형을 갖지만 운영 체제에서 허용하지 않는 기타 인수의 경우 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; (또는 서브 클래스)를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="84373164968c0434294b7890098e13ea24078ada" translate="yes" xml:space="preserve">
          <source>All functions in this module take a file descriptor &lt;em&gt;fd&lt;/em&gt; as their first argument. This can be an integer file descriptor, such as returned by &lt;code&gt;sys.stdin.fileno()&lt;/code&gt;, or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, such as &lt;code&gt;sys.stdin&lt;/code&gt; itself.</source>
          <target state="translated">이 모듈의 모든 함수는 파일 설명자 &lt;em&gt;fd&lt;/em&gt; 를 첫 번째 인수로 사용합니다. 이것은 &lt;code&gt;sys.stdin.fileno()&lt;/code&gt; 의해 리턴 된 정수 파일 디스크립터 이거나 &lt;code&gt;sys.stdin&lt;/code&gt; 자체 와 같은 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;파일 오브젝트&lt;/a&gt; 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="669b057cd5f10408626d8953cdfea864463d2fd6" translate="yes" xml:space="preserve">
          <source>All functions in this module take a file descriptor &lt;em&gt;fd&lt;/em&gt; as their first argument. This can be an integer file descriptor, such as returned by &lt;code&gt;sys.stdin.fileno()&lt;/code&gt;, or a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, such as &lt;code&gt;sys.stdin&lt;/code&gt; itself.</source>
          <target state="translated">이 모듈의 모든 함수는 파일 설명자 &lt;em&gt;fd&lt;/em&gt; 를 첫 번째 인수로 사용합니다. 이것은 &lt;code&gt;sys.stdin.fileno()&lt;/code&gt; 에서 반환하는 것과 같은 정수 파일 설명자 이거나 &lt;code&gt;sys.stdin&lt;/code&gt; 자체 와 같은 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;파일 객체&lt;/a&gt; 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f341c1e6b9c8fc27dafea2f00fb8167a63cc9f5b" translate="yes" xml:space="preserve">
          <source>All functions in this module take a file descriptor &lt;em&gt;fd&lt;/em&gt; as their first argument. This can be an integer file descriptor, such as returned by &lt;code&gt;sys.stdin.fileno()&lt;/code&gt;, or an &lt;a href=&quot;io#io.IOBase&quot;&gt;&lt;code&gt;io.IOBase&lt;/code&gt;&lt;/a&gt; object, such as &lt;code&gt;sys.stdin&lt;/code&gt; itself, which provides a &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; that returns a genuine file descriptor.</source>
          <target state="translated">이 모듈의 모든 함수는 파일 디스크립터 &lt;em&gt;fd&lt;/em&gt; 를 첫 번째 인수로 사용합니다. 이것은 &lt;code&gt;sys.stdin.fileno()&lt;/code&gt; 의해 리턴 된 정수 파일 디스크립터 이거나 &lt;code&gt;sys.stdin&lt;/code&gt; 자체 와 같은 &lt;a href=&quot;io#io.IOBase&quot;&gt; &lt;code&gt;io.IOBase&lt;/code&gt; &lt;/a&gt; 오브젝트 일 수 있으며 , 이는 실제 파일 디스크립터를 리턴하는 &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt; &lt;code&gt;fileno()&lt;/code&gt; &lt;/a&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="1c016a97492d8141818b674772a3c8a871a986a2" translate="yes" xml:space="preserve">
          <source>All hard tab characters are expanded to spaces, using 8-column tab stops. Tabs in output generated by the tested code are not modified. Because any hard tabs in the sample output &lt;em&gt;are&lt;/em&gt; expanded, this means that if the code output includes hard tabs, the only way the doctest can pass is if the &lt;a href=&quot;#doctest.NORMALIZE_WHITESPACE&quot;&gt;&lt;code&gt;NORMALIZE_WHITESPACE&lt;/code&gt;&lt;/a&gt; option or &lt;a href=&quot;#doctest-directives&quot;&gt;directive&lt;/a&gt; is in effect. Alternatively, the test can be rewritten to capture the output and compare it to an expected value as part of the test. This handling of tabs in the source was arrived at through trial and error, and has proven to be the least error prone way of handling them. It is possible to use a different algorithm for handling tabs by writing a custom &lt;a href=&quot;#doctest.DocTestParser&quot;&gt;&lt;code&gt;DocTestParser&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">모든 열 탭 문자는 8 열 탭 정지를 사용하여 공백으로 확장됩니다. 테스트 된 코드에 의해 생성 된 출력의 탭은 수정되지 않습니다. 샘플 출력의 하드 탭 &lt;em&gt;이&lt;/em&gt; 확장 되었으므로 코드 출력에 하드 탭이 포함 된 경우 &lt;a href=&quot;#doctest.NORMALIZE_WHITESPACE&quot;&gt; &lt;code&gt;NORMALIZE_WHITESPACE&lt;/code&gt; &lt;/a&gt; 옵션 또는 &lt;a href=&quot;#doctest-directives&quot;&gt;지시문&lt;/a&gt; 이 유효한 경우 doctest가 통과 할 수있는 유일한 방법 입니다. 또는 테스트를 다시 작성하여 출력을 캡처하고 테스트의 일부로 예상 값과 비교할 수 있습니다. 소스의 탭 처리는 시행 착오를 통해 이루어졌으며 오류 처리가 가장 쉬운 방법으로 입증되었습니다. 사용자 정의 &lt;a href=&quot;#doctest.DocTestParser&quot;&gt; &lt;code&gt;DocTestParser&lt;/code&gt; &lt;/a&gt; 클래스를 작성하여 탭 처리에 다른 알고리즘을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91fc0829f8889a22e20ca26434fbffa2dbfb02ff" translate="yes" xml:space="preserve">
          <source>All inclusive filters are applied at once, a trace is ignored if no inclusive filters match it. A trace is ignored if at least one exclusive filter matches it.</source>
          <target state="translated">모든 포함 필터가 한 번에 적용되며 포함 필터가 일치하지 않으면 추적이 무시됩니다. 하나 이상의 배타적 필터가 일치하면 추적이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e5ed3dd190b5e59dac468767ad1a88d8c4cdff2e" translate="yes" xml:space="preserve">
          <source>All incremental decoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="translated">모든 증분 디코더는이 생성자 인터페이스를 제공해야합니다. 추가 키워드 인수를 자유롭게 추가 할 수 있지만 여기에 정의 된 키워드 인수 만 Python 코덱 레지스트리에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="470d7585fb716131eaa2ac8ea527a90daf24a7cc" translate="yes" xml:space="preserve">
          <source>All incremental encoders must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="translated">모든 증분 인코더는이 생성자 인터페이스를 제공해야합니다. 추가 키워드 인수를 자유롭게 추가 할 수 있지만 여기에 정의 된 키워드 인수 만 Python 코덱 레지스트리에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f8e3878938189c7d78e25155ae9238ddf1f98a9c" translate="yes" xml:space="preserve">
          <source>All leading whitespace is removed from the first line. Any leading whitespace that can be uniformly removed from the second line onwards is removed. Empty lines at the beginning and end are subsequently removed. Also, all tabs are expanded to spaces.</source>
          <target state="translated">모든 선행 공백이 첫 번째 줄에서 제거됩니다. 두 번째 줄부터 균일하게 제거 할 수있는 선행 공백이 제거됩니다. 시작과 끝의 빈 줄은 이후에 제거됩니다. 또한 모든 탭이 공백으로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="a51d14eb54abb876437a862ebfe4b068d36c0dfa" translate="yes" xml:space="preserve">
          <source>All methods are executed atomically.</source>
          <target state="translated">모든 메소드는 원자 적으로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="af2e44950a8c7f07ebc93e9cd910e4550fa37531" translate="yes" xml:space="preserve">
          <source>All methods of RawTurtle/Turtle also exist as functions, i.e. part of the procedure-oriented interface.</source>
          <target state="translated">RawTurtle / Turtle의 모든 메소드는 함수, 즉 프로 시저 지향 인터페이스의 일부로도 존재합니다.</target>
        </trans-unit>
        <trans-unit id="8a2f5fe29ba9facb218010f2a3bc8e0b1c83b43a" translate="yes" xml:space="preserve">
          <source>All methods of TurtleScreen/Screen also exist as functions, i.e. as part of the procedure-oriented interface.</source>
          <target state="translated">TurtleScreen / Screen의 모든 방법은 함수, 즉 프로 시저 지향 인터페이스의 일부로도 존재합니다.</target>
        </trans-unit>
        <trans-unit id="6a8c9608d8c8cf4f12dfcb3de0e222922cd76e05" translate="yes" xml:space="preserve">
          <source>All non-keyword arguments are converted to strings like &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; does and written to the stream, separated by &lt;em&gt;sep&lt;/em&gt; and followed by &lt;em&gt;end&lt;/em&gt;. Both &lt;em&gt;sep&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; must be strings; they can also be &lt;code&gt;None&lt;/code&gt;, which means to use the default values. If no &lt;em&gt;objects&lt;/em&gt; are given, &lt;a href=&quot;#print&quot;&gt;&lt;code&gt;print()&lt;/code&gt;&lt;/a&gt; will just write &lt;em&gt;end&lt;/em&gt;.</source>
          <target state="translated">키워드가 아닌 모든 인수는 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt; 과 같은 문자열로 변환되어 스트림에 기록되며 &lt;em&gt;sep로&lt;/em&gt; 구분되고 그 뒤에 &lt;em&gt;end가&lt;/em&gt; 옵니다 . 두 &lt;em&gt;9월&lt;/em&gt; 과 &lt;em&gt;끝은&lt;/em&gt; 문자열이어야합니다 또한 &lt;code&gt;None&lt;/code&gt; 일 수 있으며 이는 기본값을 사용한다는 의미입니다. &lt;em&gt;객체&lt;/em&gt; 가 주어 지지 않으면 &lt;a href=&quot;#print&quot;&gt; &lt;code&gt;print()&lt;/code&gt; &lt;/a&gt; 는 &lt;em&gt;end&lt;/em&gt; 만 쓰게 됩니다.</target>
        </trans-unit>
        <trans-unit id="04bd0bba21301d490d1f0f4f5b72a1a7c73e3c80" translate="yes" xml:space="preserve">
          <source>All numeric types (except complex) support the following operations (for priorities of the operations, see &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#operator-summary&quot;&gt;Operator precedence&lt;/a&gt;):</source>
          <target state="translated">모든 숫자 유형 (복소수 제외)은 다음 작업을 지원합니다 (작업의 우선 순위는 &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#operator-summary&quot;&gt;연산자 우선 순위&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="ae4d12e51f60163ed8582b4908230a1358d1d3d8" translate="yes" xml:space="preserve">
          <source>All numeric types (except complex) support the following operations (for priorities of the operations, see &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#operator-summary&quot;&gt;Operator precedence&lt;/a&gt;):</source>
          <target state="translated">모든 숫자 유형 (복합물 제외)은 다음 작업을 지원합니다 (작업 우선 순위는 &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#operator-summary&quot;&gt;연산자 우선 순위&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="6665fa2ccce2b7ff1105b3c545c20966ec9a92ac" translate="yes" xml:space="preserve">
          <source>All numeric values can be set to &lt;a href=&quot;#locale.CHAR_MAX&quot;&gt;&lt;code&gt;CHAR_MAX&lt;/code&gt;&lt;/a&gt; to indicate that there is no value specified in this locale.</source>
          <target state="translated">이 숫자에 지정된 값이 없음을 나타 내기 위해 모든 숫자 값을 &lt;a href=&quot;#locale.CHAR_MAX&quot;&gt; &lt;code&gt;CHAR_MAX&lt;/code&gt; &lt;/a&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b594fe2c3851296cea213bd7a2a361b71f255ca" translate="yes" xml:space="preserve">
          <source>All of the classes in this module may safely be accessed from multiple threads.</source>
          <target state="translated">이 모듈의 모든 클래스는 여러 스레드에서 안전하게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="645eb36ba7e57dbbed8d6a760714020cf4ac62b5" translate="yes" xml:space="preserve">
          <source>All of the components of an XML document are subclasses of &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">XML 문서의 모든 컴포넌트는 &lt;code&gt;Node&lt;/code&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="579249eb8333e1522a9306c9dc218208c5dd6079" translate="yes" xml:space="preserve">
          <source>All of the following opcodes use their arguments.</source>
          <target state="translated">다음 opcode는 모두 인수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d04e47f9a86b5546a2f86ac6f4ea83613fea27aa" translate="yes" xml:space="preserve">
          <source>All of the functions and methods that accept a &lt;em&gt;timeout&lt;/em&gt; parameter, such as &lt;a href=&quot;#subprocess.call&quot;&gt;&lt;code&gt;call()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;Popen.communicate()&lt;/code&gt;&lt;/a&gt; will raise &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt;&lt;code&gt;TimeoutExpired&lt;/code&gt;&lt;/a&gt; if the timeout expires before the process exits.</source>
          <target state="translated">기능 및 동의 방법의 모든 &lt;em&gt;시간 제한&lt;/em&gt; 과 같은 매개 변수를 &lt;a href=&quot;#subprocess.call&quot;&gt; &lt;code&gt;call()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt; &lt;code&gt;Popen.communicate()&lt;/code&gt; &lt;/a&gt; 올릴 것이다 &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt; &lt;code&gt;TimeoutExpired&lt;/code&gt; 을&lt;/a&gt; 제한 시간은 프로세스가 종료되기 전에 만료되면.</target>
        </trans-unit>
        <trans-unit id="6356cc46033a8c7b9c133294fcdbe6e0be5fcabf" translate="yes" xml:space="preserve">
          <source>All of the methods described below are executed atomically.</source>
          <target state="translated">아래에 설명 된 모든 방법은 원자 적으로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="1381ad08272119ae9383c4ca5833de30090df2a0" translate="yes" xml:space="preserve">
          <source>All of the objects provided by this module that have &lt;code&gt;acquire()&lt;/code&gt; and &lt;code&gt;release()&lt;/code&gt; methods can be used as context managers for a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. The &lt;code&gt;acquire()&lt;/code&gt; method will be called when the block is entered, and &lt;code&gt;release()&lt;/code&gt; will be called when the block is exited. Hence, the following snippet:</source>
          <target state="translated">&lt;code&gt;acquire()&lt;/code&gt; 및 &lt;code&gt;release()&lt;/code&gt; 메소드가있는 이 모듈에서 제공하는 모든 오브젝트 는 &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 문의 컨텍스트 관리자로 사용될 수 있습니다 . &lt;code&gt;acquire()&lt;/code&gt; 블록이 입력 될 때 메소드가 호출되고, &lt;code&gt;release()&lt;/code&gt; 블럭이 종료 할 때 호출된다. 따라서 다음 스 니펫 :</target>
        </trans-unit>
        <trans-unit id="5e070244996e3d3e099fb44c1b936299d39964df" translate="yes" xml:space="preserve">
          <source>All of the objects provided by this module that have &lt;code&gt;acquire()&lt;/code&gt; and &lt;code&gt;release()&lt;/code&gt; methods can be used as context managers for a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. The &lt;code&gt;acquire()&lt;/code&gt; method will be called when the block is entered, and &lt;code&gt;release()&lt;/code&gt; will be called when the block is exited. Hence, the following snippet:</source>
          <target state="translated">이 모듈에서 제공하는 &lt;code&gt;acquire()&lt;/code&gt; 및 &lt;code&gt;release()&lt;/code&gt; 메서드가있는 모든 개체 는 &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 문의 컨텍스트 관리자로 사용할 수 있습니다 . &lt;code&gt;acquire()&lt;/code&gt; 블록이 입력 될 때 메소드가 호출되고, &lt;code&gt;release()&lt;/code&gt; 블럭이 종료 할 때 호출된다. 따라서 다음 스 니펫 :</target>
        </trans-unit>
        <trans-unit id="426266f1daf6856271c7f10aaf7a44d29269f7a4" translate="yes" xml:space="preserve">
          <source>All of the other &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt; methods are invoked by this method in the process of running the application, and thus exist primarily to allow customizing the process.</source>
          <target state="translated">다른 모든 &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt; 메소드는 애플리케이션 실행 프로세스에서이 메소드에 의해 호출되므로 프로세스를 사용자 정의 할 수 있도록 기본적으로 존재합니다.</target>
        </trans-unit>
        <trans-unit id="361c6eeb57590924defca62876cd3138035cc03c" translate="yes" xml:space="preserve">
          <source>All of the patchers can be used as class decorators. When used in this way they wrap every test method on the class. The patchers recognise methods that start with &lt;code&gt;'test'&lt;/code&gt; as being test methods. This is the same way that the &lt;a href=&quot;unittest#unittest.TestLoader&quot;&gt;&lt;code&gt;unittest.TestLoader&lt;/code&gt;&lt;/a&gt; finds test methods by default.</source>
          <target state="translated">모든 패처를 클래스 데코레이터로 사용할 수 있습니다. 이런 식으로 사용하면 클래스의 모든 테스트 방법을 래핑합니다. 패치 프로그램은 &lt;code&gt;'test'&lt;/code&gt; 로 시작하는 메소드를 테스트 메소드로 인식 합니다. 이것은 &lt;a href=&quot;unittest#unittest.TestLoader&quot;&gt; &lt;code&gt;unittest.TestLoader&lt;/code&gt; &lt;/a&gt; 가 기본적으로 테스트 메소드를 찾는 것과 같은 방법입니다 .</target>
        </trans-unit>
        <trans-unit id="bab58e75ce965a7bd1231cdeac8f8a7d861f2d0d" translate="yes" xml:space="preserve">
          <source>All of the usual dictionary methods are supported. In addition, there is a &lt;em&gt;maps&lt;/em&gt; attribute, a method for creating new subcontexts, and a property for accessing all but the first mapping:</source>
          <target state="translated">일반적인 사전 방법이 모두 지원됩니다. 또한 &lt;em&gt;maps&lt;/em&gt; 속성, 새 하위 컨텍스트를 작성하는 방법 및 첫 번째 맵핑을 제외한 모든 항목에 액세스하기위한 특성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb1ed368ab426895fc4010d5ccc90be43d6d02bf" translate="yes" xml:space="preserve">
          <source>All of these encodings can only encode 256 of the 1114112 code points defined in Unicode. A simple and straightforward way that can store each Unicode code point, is to store each code point as four consecutive bytes. There are two possibilities: store the bytes in big endian or in little endian order. These two encodings are called &lt;code&gt;UTF-32-BE&lt;/code&gt; and &lt;code&gt;UTF-32-LE&lt;/code&gt; respectively. Their disadvantage is that if e.g. you use &lt;code&gt;UTF-32-BE&lt;/code&gt; on a little endian machine you will always have to swap bytes on encoding and decoding. &lt;code&gt;UTF-32&lt;/code&gt; avoids this problem: bytes will always be in natural endianness. When these bytes are read by a CPU with a different endianness, then bytes have to be swapped though. To be able to detect the endianness of a &lt;code&gt;UTF-16&lt;/code&gt; or &lt;code&gt;UTF-32&lt;/code&gt; byte sequence, there&amp;rsquo;s the so called BOM (&amp;ldquo;Byte Order Mark&amp;rdquo;). This is the Unicode character &lt;code&gt;U+FEFF&lt;/code&gt;. This character can be prepended to every &lt;code&gt;UTF-16&lt;/code&gt; or &lt;code&gt;UTF-32&lt;/code&gt; byte sequence. The byte swapped version of this character (&lt;code&gt;0xFFFE&lt;/code&gt;) is an illegal character that may not appear in a Unicode text. So when the first character in an &lt;code&gt;UTF-16&lt;/code&gt; or &lt;code&gt;UTF-32&lt;/code&gt; byte sequence appears to be a &lt;code&gt;U+FFFE&lt;/code&gt; the bytes have to be swapped on decoding. Unfortunately the character &lt;code&gt;U+FEFF&lt;/code&gt; had a second purpose as a &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt;: a character that has no width and doesn&amp;rsquo;t allow a word to be split. It can e.g. be used to give hints to a ligature algorithm. With Unicode 4.0 using &lt;code&gt;U+FEFF&lt;/code&gt; as a &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; has been deprecated (with &lt;code&gt;U+2060&lt;/code&gt; (&lt;code&gt;WORD JOINER&lt;/code&gt;) assuming this role). Nevertheless Unicode software still must be able to handle &lt;code&gt;U+FEFF&lt;/code&gt; in both roles: as a BOM it&amp;rsquo;s a device to determine the storage layout of the encoded bytes, and vanishes once the byte sequence has been decoded into a string; as a &lt;code&gt;ZERO WIDTH
NO-BREAK SPACE&lt;/code&gt; it&amp;rsquo;s a normal character that will be decoded like any other.</source>
          <target state="translated">이러한 모든 인코딩은 유니 코드로 정의 된 1114112 코드 포인트 중 256 개만 인코딩 할 수 있습니다. 각 유니 코드 코드 포인트를 저장할 수있는 간단하고 간단한 방법은 각 코드 포인트를 4 개의 연속 바이트로 저장하는 것입니다. 두 가지 가능성이 있습니다. 바이트를 빅 엔디안 또는 리틀 엔디안 순서로 저장하십시오. 이 두 가지 인코딩을 각각 &lt;code&gt;UTF-32-BE&lt;/code&gt; 및 &lt;code&gt;UTF-32-LE&lt;/code&gt; 라고 합니다. 작은 엔디안 머신에서 &lt;code&gt;UTF-32-BE&lt;/code&gt; 를 사용하는 경우 인코딩 및 디코딩시 항상 바이트를 교체해야 한다는 단점이 있습니다. &lt;code&gt;UTF-32&lt;/code&gt; 는이 문제를 피합니다. 바이트는 항상 자연 엔디안입니다. 엔디안이 다른 CPU에서이 바이트를 읽으면 바이트를 교체해야합니다. 의 엔디안을 감지 할 수 있도록 &lt;code&gt;UTF-16&lt;/code&gt; 또는 &lt;code&gt;UTF-32&lt;/code&gt; 바이트 시퀀스에는 BOM ( &quot;Byte Order Mark&quot;)이 있습니다. 이것은 유니 코드 문자 &lt;code&gt;U+FEFF&lt;/code&gt; 입니다. 이 문자는 모든 &lt;code&gt;UTF-16&lt;/code&gt; 또는 &lt;code&gt;UTF-32&lt;/code&gt; 바이트 시퀀스 앞에 붙일 수 있습니다 . 이 문자의 바이트 스왑 버전 ( &lt;code&gt;0xFFFE&lt;/code&gt; )은 유니 코드 텍스트에 나타나지 않을 수있는 잘못된 문자입니다. 따라서 &lt;code&gt;UTF-16&lt;/code&gt; 또는 &lt;code&gt;UTF-32&lt;/code&gt; 바이트 시퀀스 의 첫 번째 문자 가 &lt;code&gt;U+FFFE&lt;/code&gt; 인 경우 디코딩시 바이트를 교체해야합니다. 불행히도 &lt;code&gt;U+FEFF&lt;/code&gt; 캐릭터 는 &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; 로 두 번째 목적을 가졌습니다.: 너비가없고 단어를 나눌 수없는 문자입니다. 예를 들어 합자 알고리즘에 힌트를주기 위해 사용될 수 있습니다. &lt;code&gt;U+FEFF&lt;/code&gt; 를 &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; 로 사용하는 유니 코드 4.0 에서는 이 역할을 가정 하여 &lt;code&gt;U+2060&lt;/code&gt; ( &lt;code&gt;WORD JOINER&lt;/code&gt; ) 이 더 이상 사용되지 않습니다 . 그럼에도 불구하고 유니 코드 소프트웨어는 여전히 두 가지 역할 모두에서 &lt;code&gt;U+FEFF&lt;/code&gt; 를 처리 할 수 ​​있어야 합니다. BOM으로서 인코딩 된 바이트의 스토리지 레이아웃을 결정하는 장치이며 바이트 시퀀스가 ​​문자열로 디코딩되면 사라집니다. A와 &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; 가 다른 같은 복호화되는 일반 문자입니다.</target>
        </trans-unit>
        <trans-unit id="608f0188bcbb97cbbc13a474f23016a327d60ea0" translate="yes" xml:space="preserve">
          <source>All of these functions accept either only bytes or only string objects as their parameters. The result is an object of the same type, if a path or file name is returned.</source>
          <target state="translated">이러한 함수는 모두 바이트 또는 문자열 객체 만 매개 변수로 허용합니다. 경로 또는 파일 이름이 리턴되면 결과는 동일한 유형의 오브젝트입니다.</target>
        </trans-unit>
        <trans-unit id="5ffe41514d0ba0c7681ed589014b164ed58ca272" translate="yes" xml:space="preserve">
          <source>All option names used in interpolation will be passed through the &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt;&lt;code&gt;optionxform()&lt;/code&gt;&lt;/a&gt; method just like any other option name reference. For example, using the default implementation of &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt;&lt;code&gt;optionxform()&lt;/code&gt;&lt;/a&gt; (which converts option names to lower case), the values &lt;code&gt;foo %(bar)s&lt;/code&gt; and &lt;code&gt;foo
%(BAR)s&lt;/code&gt; are equivalent.</source>
          <target state="translated">보간에 사용 된 모든 옵션 이름은 다른 옵션 이름 참조와 같이 &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt; &lt;code&gt;optionxform()&lt;/code&gt; &lt;/a&gt; 메서드를 통해 전달됩니다 . 예를 들어, 옵션 이름을 소문자로 변환하는 &lt;a href=&quot;#configparser.ConfigParser.optionxform&quot;&gt; &lt;code&gt;optionxform()&lt;/code&gt; &lt;/a&gt; 의 기본 구현을 사용하면 &lt;code&gt;foo %(bar)s&lt;/code&gt; 및 &lt;code&gt;foo %(BAR)s&lt;/code&gt; 이 같습니다.</target>
        </trans-unit>
        <trans-unit id="8653fe45c3a0598bc76268bebd81e9303afe45cd" translate="yes" xml:space="preserve">
          <source>All optional arguments and some positional arguments may be omitted at the command line. The &lt;code&gt;default&lt;/code&gt; keyword argument of &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt;, whose value defaults to &lt;code&gt;None&lt;/code&gt;, specifies what value should be used if the command-line argument is not present. For optional arguments, the &lt;code&gt;default&lt;/code&gt; value is used when the option string was not present at the command line:</source>
          <target state="translated">모든 선택적 인수와 일부 위치 인수는 명령 행에서 생략 될 수 있습니다. 값이 기본값이 &lt;code&gt;None&lt;/code&gt; 인 &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;default&lt;/code&gt; 키워드 인수 는 명령 행 인수가없는 경우 사용해야하는 값을 지정합니다. 선택적 인수의 경우 옵션 문자열이 명령 행에없는 경우 &lt;code&gt;default&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ce2357893bbf0135effa63850776998057d31bea" translate="yes" xml:space="preserve">
          <source>All other keys are optional, but if present they will be interpreted as described below. In all cases below where a &amp;lsquo;configuring dict&amp;rsquo; is mentioned, it will be checked for the special &lt;code&gt;'()'&lt;/code&gt; key to see if a custom instantiation is required. If so, the mechanism described in &lt;a href=&quot;#logging-config-dict-userdef&quot;&gt;User-defined objects&lt;/a&gt; below is used to create an instance; otherwise, the context is used to determine what to instantiate.</source>
          <target state="translated">다른 모든 키는 선택 사항이지만 존재하는 경우 아래에 설명 된대로 해석됩니다. 'dictive dict'가 언급 된 아래의 모든 경우 에 사용자 지정 인스턴스화가 필요한지 확인하기 위해 특수한 &lt;code&gt;'()'&lt;/code&gt; 키가 있는지 확인합니다. 그렇다면 아래의 &lt;a href=&quot;#logging-config-dict-userdef&quot;&gt;사용자 정의 개체에&lt;/a&gt; 설명 된 메커니즘 을 사용하여 인스턴스를 만듭니다. 그렇지 않으면 컨텍스트는 인스턴스화 대상을 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="19335cd87d8044146043baea7e04506def10ffde" translate="yes" xml:space="preserve">
          <source>All other keystrokes are treated as a command to insert the given character and move right (with line wrapping).</source>
          <target state="translated">다른 모든 키 입력은 주어진 문자를 삽입하고 줄 바꿈을 사용하여 오른쪽으로 이동하는 명령으로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="aa448210156c802173864da10c49485e10eee030" translate="yes" xml:space="preserve">
          <source>All other keyword arguments are passed to &lt;a href=&quot;subprocess#subprocess.Popen&quot;&gt;&lt;code&gt;subprocess.Popen&lt;/code&gt;&lt;/a&gt; without interpretation, except for &lt;em&gt;bufsize&lt;/em&gt;, &lt;em&gt;universal_newlines&lt;/em&gt;, &lt;em&gt;shell&lt;/em&gt;, &lt;em&gt;text&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt; and &lt;em&gt;errors&lt;/em&gt;, which should not be specified at all.</source>
          <target state="translated">&lt;em&gt;bufsize&lt;/em&gt; , &lt;em&gt;universal_newlines&lt;/em&gt; , &lt;em&gt;shell&lt;/em&gt; , &lt;em&gt;text&lt;/em&gt; , &lt;em&gt;encoding&lt;/em&gt; 및 &lt;em&gt;errors를&lt;/em&gt; 제외한 다른 모든 키워드 인수는 &lt;a href=&quot;subprocess#subprocess.Popen&quot;&gt; &lt;code&gt;subprocess.Popen&lt;/code&gt; &lt;/a&gt; 에 전달됩니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="66331451f6a993bd6a4ec3db875b698eaae7b08f" translate="yes" xml:space="preserve">
          <source>All other optional or keyword arguments are passed to the underlying &lt;a href=&quot;#csv.reader&quot;&gt;&lt;code&gt;reader&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">다른 모든 선택적 또는 키워드 인수는 기본 &lt;a href=&quot;#csv.reader&quot;&gt; &lt;code&gt;reader&lt;/code&gt; &lt;/a&gt; 인스턴스 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="f419bef4528bc4f1cc65289d46c00cb83ec30fa2" translate="yes" xml:space="preserve">
          <source>All parameterized generics implement special read-only attributes.</source>
          <target state="translated">모든 매개 변수화 된 제네릭은 특수 읽기 전용 속성을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="00cca373364efaf0f83bf84be29776f4417aa391" translate="yes" xml:space="preserve">
          <source>All pending input is processed, and a bytes object containing the remaining compressed output is returned. &lt;em&gt;mode&lt;/em&gt; can be selected from the constants &lt;code&gt;Z_NO_FLUSH&lt;/code&gt;, &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt;, &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt;, &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt;, &lt;code&gt;Z_BLOCK&lt;/code&gt; (zlib 1.2.3.4), or &lt;code&gt;Z_FINISH&lt;/code&gt;, defaulting to &lt;code&gt;Z_FINISH&lt;/code&gt;. Except &lt;code&gt;Z_FINISH&lt;/code&gt;, all constants allow compressing further bytestrings of data, while &lt;code&gt;Z_FINISH&lt;/code&gt; finishes the compressed stream and prevents compressing any more data. After calling &lt;a href=&quot;#zlib.Compress.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; with &lt;em&gt;mode&lt;/em&gt; set to &lt;code&gt;Z_FINISH&lt;/code&gt;, the &lt;a href=&quot;#zlib.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; method cannot be called again; the only realistic action is to delete the object.</source>
          <target state="translated">보류중인 모든 입력이 처리되고 나머지 압축 출력을 포함하는 bytes 객체가 반환됩니다. &lt;em&gt;모드&lt;/em&gt; 정수로부터 선택 될 수 &lt;code&gt;Z_NO_FLUSH&lt;/code&gt; , &lt;code&gt;Z_PARTIAL_FLUSH&lt;/code&gt; , &lt;code&gt;Z_SYNC_FLUSH&lt;/code&gt; , &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; , &lt;code&gt;Z_BLOCK&lt;/code&gt; (ZLIB 1.2.3.4) 또는 &lt;code&gt;Z_FINISH&lt;/code&gt; 가 , 디폴트로 &lt;code&gt;Z_FINISH&lt;/code&gt; . &lt;code&gt;Z_FINISH&lt;/code&gt; 를 제외한 모든 상수는 추가 바이트 열의 데이터를 압축 할 수있는 반면 &lt;code&gt;Z_FINISH&lt;/code&gt; 는 압축 된 스트림을 끝내고 더 이상 데이터의 압축을 방지합니다. 호출 한 후 &lt;a href=&quot;#zlib.Compress.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt; 와 &lt;em&gt;모드&lt;/em&gt; 로 설정 &lt;code&gt;Z_FINISH&lt;/code&gt; 를 상기 &lt;a href=&quot;#zlib.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt;메소드를 다시 호출 할 수 없습니다. 유일한 현실적인 조치는 객체를 삭제하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="845f9f346c71bf5f52a9188ace35c5ecaa3ed3df" translate="yes" xml:space="preserve">
          <source>All pending input is processed, and a bytes object containing the remaining uncompressed output is returned. After calling &lt;a href=&quot;#zlib.Decompress.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#zlib.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; method cannot be called again; the only realistic action is to delete the object.</source>
          <target state="translated">보류중인 모든 입력이 처리되고 나머지 압축되지 않은 출력을 포함하는 bytes 객체가 반환됩니다. 호출 한 후 &lt;a href=&quot;#zlib.Decompress.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt; 상기 &lt;a href=&quot;#zlib.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt; 메소드를 다시 호출 할 수 없다; 유일한 현실적인 조치는 객체를 삭제하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fc9ede07789c80374474bed5143b787444e15389" translate="yes" xml:space="preserve">
          <source>All platforms support sockets as &lt;em&gt;out&lt;/em&gt; file descriptor, and some platforms allow other types (e.g. regular file, pipe) as well.</source>
          <target state="translated">모든 플랫폼으로 소켓을 지원 &lt;em&gt;밖으로&lt;/em&gt; 파일 설명, 일부 플랫폼은 다른 유형 (예 : 일반 파일, 파이프)뿐만 아니라 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3aaaab94fa36cef60d2f0e96539ccc4e2de8c1f2" translate="yes" xml:space="preserve">
          <source>All platforms support sockets as &lt;em&gt;out_fd&lt;/em&gt; file descriptor, and some platforms allow other types (e.g. regular file, pipe) as well.</source>
          <target state="translated">모든 플랫폼은 소켓을 &lt;em&gt;out_fd&lt;/em&gt; 파일 설명 자로 지원 하며 일부 플랫폼은 다른 유형 (예 : 일반 파일, 파이프)도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="1a103db9094a7f0996094f573e4e6dea84bed483" translate="yes" xml:space="preserve">
          <source>All recipient addresses refused. The errors for each recipient are accessible through the attribute &lt;code&gt;recipients&lt;/code&gt;, which is a dictionary of exactly the same sort as &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;SMTP.sendmail()&lt;/code&gt;&lt;/a&gt; returns.</source>
          <target state="translated">모든 수신자 주소가 거부되었습니다. &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt; &lt;code&gt;SMTP.sendmail()&lt;/code&gt; &lt;/a&gt; 반환 하는 것과 정확히 동일한 사전 인 속성 인 &lt;code&gt;recipients&lt;/code&gt; 통해 각 수신자의 오류에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5e2d016729108cbe2a6252b7e9f9f25b138be7a" translate="yes" xml:space="preserve">
          <source>All recipients were refused. Nobody got the mail. The &lt;code&gt;recipients&lt;/code&gt; attribute of the exception object is a dictionary with information about the refused recipients (like the one returned when at least one recipient was accepted).</source>
          <target state="translated">모든 수령인이 거부되었습니다. 아무도 메일을받지 못했습니다. 예외 오브젝트 의 &lt;code&gt;recipients&lt;/code&gt; 속성은 거부 된 수신자에 대한 정보가있는 사전입니다 (예 : 하나 이상의 수신자가 승인되었을 때 리턴 된 수신자).</target>
        </trans-unit>
        <trans-unit id="ed7add52656f73c9f9ee77cb2062c4141e037209" translate="yes" xml:space="preserve">
          <source>All registry functions in this module return one of these objects.</source>
          <target state="translated">이 모듈의 모든 레지스트리 함수는 이러한 개체 중 하나를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d2fe55d4566c1ed0919fec63b9086185e8f09e18" translate="yes" xml:space="preserve">
          <source>All registry functions in this module which accept a handle object also accept an integer, however, use of the handle object is encouraged.</source>
          <target state="translated">핸들 오브젝트를 승인하는이 모듈의 모든 레지스트리 함수도 정수를 허용하지만 핸들 오브젝트의 사용을 권장합니다.</target>
        </trans-unit>
        <trans-unit id="10ada46f1636db2c68259c55e5dbc2108cc9bb8a" translate="yes" xml:space="preserve">
          <source>All sections include &lt;code&gt;DEFAULTSECT&lt;/code&gt; values as well which means that &lt;code&gt;.clear()&lt;/code&gt; on a section may not leave the section visibly empty. This is because default values cannot be deleted from the section (because technically they are not there). If they are overridden in the section, deleting causes the default value to be visible again. Trying to delete a default value causes a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">모든 섹션에는 &lt;code&gt;DEFAULTSECT&lt;/code&gt; 값도 포함 되어 있습니다. 즉 , 섹션의 &lt;code&gt;.clear()&lt;/code&gt; 는 섹션을 시각적으로 비워 둘 수 없습니다. 기술적으로는 기본값이 없기 때문에 섹션에서 기본값을 삭제할 수 없기 때문입니다. 섹션에서 재정의 된 경우 삭제하면 기본값이 다시 표시됩니다. 기본값을 삭제하려고하면 &lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; 가&lt;/a&gt; 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="98e89195defbf174865e4ed3cfadb43c73afc721" translate="yes" xml:space="preserve">
          <source>All start methods</source>
          <target state="translated">모든 시작 방법</target>
        </trans-unit>
        <trans-unit id="75d16b8bb98cb55dff06e1fc0c1ed62ef7d52a39" translate="yes" xml:space="preserve">
          <source>All stream readers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="translated">모든 스트림 리더는이 생성자 인터페이스를 제공해야합니다. 추가 키워드 인수를 자유롭게 추가 할 수 있지만 여기에 정의 된 키워드 인수 만 Python 코덱 레지스트리에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="26bf04c11ae57a8dd9464a075f980fb924cc9927" translate="yes" xml:space="preserve">
          <source>All stream writers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.</source>
          <target state="translated">모든 스트림 작성자는이 생성자 인터페이스를 제공해야합니다. 추가 키워드 인수를 자유롭게 추가 할 수 있지만 여기에 정의 된 키워드 인수 만 Python 코덱 레지스트리에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="511adfa816e0d1230d548ef9bee4b8cae3ba51aa" translate="yes" xml:space="preserve">
          <source>All streams are careful about the type of data you give to them. For example giving a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object to the &lt;code&gt;write()&lt;/code&gt; method of a binary stream will raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. So will giving a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object to the &lt;code&gt;write()&lt;/code&gt; method of a text stream.</source>
          <target state="translated">모든 스트림은 데이터 유형에주의를 기울입니다. 예를 들어 이진 스트림 의 &lt;code&gt;write()&lt;/code&gt; 메서드에 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 객체를 제공 하면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 가 발생&lt;/a&gt; 합니다. 따라서 텍스트 스트림 의 &lt;code&gt;write()&lt;/code&gt; 메소드에 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 객체를 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="8cfe73a6df86f8c591b70da4f2a97d04f73d2842" translate="yes" xml:space="preserve">
          <source>All subclasses of &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt; inherit a predefined &lt;code&gt;do_help()&lt;/code&gt;. This method, called with an argument &lt;code&gt;'bar'&lt;/code&gt;, invokes the corresponding method &lt;code&gt;help_bar()&lt;/code&gt;, and if that is not present, prints the docstring of &lt;code&gt;do_bar()&lt;/code&gt;, if available. With no argument, &lt;code&gt;do_help()&lt;/code&gt; lists all available help topics (that is, all commands with corresponding &lt;code&gt;help_*()&lt;/code&gt; methods or commands that have docstrings), and also lists any undocumented commands.</source>
          <target state="translated">&lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; 의&lt;/a&gt; 모든 서브 클래스는 미리 정의 된 &lt;code&gt;do_help()&lt;/code&gt; 상속합니다 . 인수 &lt;code&gt;'bar'&lt;/code&gt; 와 함께 호출 된이 메소드 는 해당 메소드 &lt;code&gt;help_bar()&lt;/code&gt; 호출하고 , 존재하지 않는 경우, 사용 가능한 경우 &lt;code&gt;do_bar()&lt;/code&gt; 의 docstring을 인쇄합니다 . 인수없이 &lt;code&gt;do_help()&lt;/code&gt; 는 사용 가능한 모든 도움말 항목 (즉, 해당 &lt;code&gt;help_*()&lt;/code&gt; 메소드 가있는 모든 명령 또는 문서 문자열이있는 명령)을 나열하고 문서화되지 않은 명령도 나열합니다.</target>
        </trans-unit>
        <trans-unit id="16bfa0e96351e7a39a097e3fa26ad685c6d79d8d" translate="yes" xml:space="preserve">
          <source>All tasks waiting for event to be set will be immediately awakened.</source>
          <target state="translated">이벤트가 설정되기를 기다리는 모든 작업이 즉시 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="4b0d4a1283ee19c5afe6ce70d63cdcdf8e6081cc" translate="yes" xml:space="preserve">
          <source>All test modules must be importable from the top level of the project. If the start directory is not the top level directory then the top level directory must be specified separately.</source>
          <target state="translated">모든 테스트 모듈은 프로젝트의 최상위 레벨에서 가져올 수 있어야합니다. 시작 디렉토리가 최상위 레벨 디렉토리가 아닌 경우 최상위 레벨 디렉토리를 별도로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="95e86b0a592b2672e5e54dba5071e87a49d334f8" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;'%'&lt;/code&gt; interpolations are expanded in the return values, unless the &lt;em&gt;raw&lt;/em&gt; argument is true. Values for interpolation keys are looked up in the same manner as the option.</source>
          <target state="translated">&lt;em&gt;원시&lt;/em&gt; 인수가 true가 아닌 한 모든 &lt;code&gt;'%'&lt;/code&gt; 보간은 반환 값에서 확장됩니다 . 보간 키의 값은 옵션과 같은 방식으로 조회됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="68ec4ea8caa603e129e1cdd2dda1c8e8f88e770a" translate="yes" xml:space="preserve">
          <source>All the &lt;code&gt;ttk&lt;/code&gt; Widgets accepts the following options:</source>
          <target state="translated">모든 &lt;code&gt;ttk&lt;/code&gt; 위젯은 다음 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a0aa67ee5d395c9a58857bc43029eb764f978551" translate="yes" xml:space="preserve">
          <source>All the assert methods accept a &lt;em&gt;msg&lt;/em&gt; argument that, if specified, is used as the error message on failure (see also &lt;a href=&quot;#unittest.TestCase.longMessage&quot;&gt;&lt;code&gt;longMessage&lt;/code&gt;&lt;/a&gt;). Note that the &lt;em&gt;msg&lt;/em&gt; keyword argument can be passed to &lt;a href=&quot;#unittest.TestCase.assertRaises&quot;&gt;&lt;code&gt;assertRaises()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.TestCase.assertRaisesRegex&quot;&gt;&lt;code&gt;assertRaisesRegex()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.TestCase.assertWarns&quot;&gt;&lt;code&gt;assertWarns()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.TestCase.assertWarnsRegex&quot;&gt;&lt;code&gt;assertWarnsRegex()&lt;/code&gt;&lt;/a&gt; only when they are used as a context manager.</source>
          <target state="translated">모든 assert 메소드는 지정된 경우 실패시 오류 메시지로 사용되는 &lt;em&gt;msg&lt;/em&gt; 인수를 승인합니다 ( &lt;a href=&quot;#unittest.TestCase.longMessage&quot;&gt; &lt;code&gt;longMessage&lt;/code&gt; &lt;/a&gt; 참조 ). 합니다 &lt;em&gt;MSG의&lt;/em&gt; 키워드 인수에 전달 될 수 &lt;a href=&quot;#unittest.TestCase.assertRaises&quot;&gt; &lt;code&gt;assertRaises()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#unittest.TestCase.assertRaisesRegex&quot;&gt; &lt;code&gt;assertRaisesRegex()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#unittest.TestCase.assertWarns&quot;&gt; &lt;code&gt;assertWarns()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#unittest.TestCase.assertWarnsRegex&quot;&gt; &lt;code&gt;assertWarnsRegex()&lt;/code&gt; &lt;/a&gt; 그들은 문맥 관리자로 사용하는 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba0ad57eff10b2932e3d0da3c26b31a3d89093f7" translate="yes" xml:space="preserve">
          <source>All the patchers have &lt;code&gt;start()&lt;/code&gt; and &lt;code&gt;stop()&lt;/code&gt; methods. These make it simpler to do patching in &lt;code&gt;setUp&lt;/code&gt; methods or where you want to do multiple patches without nesting decorators or with statements.</source>
          <target state="translated">모든 패처에는 &lt;code&gt;start()&lt;/code&gt; 및 &lt;code&gt;stop()&lt;/code&gt; 메소드가 있습니다. 이를 통해 &lt;code&gt;setUp&lt;/code&gt; 메소드 에서 패치를 수행하는 것이 더 간단 해 지거나 데코레이터를 중첩하거나 명령문을 사용하지 않고 여러 패치를 수행하려는 경우가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d968b7a25570658373a5f6b61449439744c226ea" translate="yes" xml:space="preserve">
          <source>All the signal numbers are defined symbolically. For example, the hangup signal is defined as &lt;a href=&quot;#signal.SIGHUP&quot;&gt;&lt;code&gt;signal.SIGHUP&lt;/code&gt;&lt;/a&gt;; the variable names are identical to the names used in C programs, as found in &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;. The Unix man page for &amp;lsquo;&lt;code&gt;signal()&lt;/code&gt;&amp;rsquo; lists the existing signals (on some systems this is &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(2)&quot;&gt;signal(2)&lt;/a&gt;&lt;/em&gt;, on others the list is in &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(7)&quot;&gt;signal(7)&lt;/a&gt;&lt;/em&gt;). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module.</source>
          <target state="translated">모든 신호 번호는 기호로 정의됩니다. 예를 들어, 끊기 신호는 &lt;a href=&quot;#signal.SIGHUP&quot;&gt; &lt;code&gt;signal.SIGHUP&lt;/code&gt; &lt;/a&gt; 로 정의됩니다 . 변수 이름은 &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt; 에있는 C 프로그램에서 사용되는 이름과 동일합니다 . ' &lt;code&gt;signal()&lt;/code&gt; '에 대한 Unix man 페이지 에는 기존 신호가 나열되어 있습니다 (일부 시스템에서는 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(2)&quot;&gt;signal (2)&lt;/a&gt;&lt;/em&gt; 이고 다른 시스템 에서는 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(7)&quot;&gt;signal (7)에 있습니다&lt;/a&gt;&lt;/em&gt; ). 모든 시스템이 동일한 신호 이름 세트를 정의하는 것은 아닙니다. 시스템에서 정의한 이름 만이 모듈에서 정의합니다.</target>
        </trans-unit>
        <trans-unit id="89b3a6c16b642ad7026440e7678571fdc94dcd20" translate="yes" xml:space="preserve">
          <source>All the signal numbers are defined symbolically. For example, the hangup signal is defined as &lt;code&gt;signal.SIGHUP&lt;/code&gt;; the variable names are identical to the names used in C programs, as found in &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt;. The Unix man page for &amp;lsquo;&lt;code&gt;signal()&lt;/code&gt;&amp;rsquo; lists the existing signals (on some systems this is &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(2)&quot;&gt;signal(2)&lt;/a&gt;&lt;/em&gt;, on others the list is in &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(7)&quot;&gt;signal(7)&lt;/a&gt;&lt;/em&gt;). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module.</source>
          <target state="translated">모든 신호 번호는 상징적으로 정의됩니다. 예를 들어, 행업 신호는 &lt;code&gt;signal.SIGHUP&lt;/code&gt; ; 변수 이름은 &lt;code&gt;&amp;lt;signal.h&amp;gt;&lt;/code&gt; 에있는 C 프로그램에서 사용 된 이름과 동일합니다 . ' &lt;code&gt;signal()&lt;/code&gt; ' 의 유닉스 매뉴얼 페이지 는 기존 신호를 나열합니다 (일부 시스템에서는 이것이 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(2)&quot;&gt;signal (2)&lt;/a&gt;&lt;/em&gt; 이고 다른 시스템에서는 목록이 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/signal(7)&quot;&gt;signal (7)에 있습니다&lt;/a&gt;&lt;/em&gt; ). 모든 시스템이 동일한 신호 이름 세트를 정의하는 것은 아닙니다. 시스템에서 정의한 이름 만이 모듈에서 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a718f5f334bffff82ac9ca18a26df3475e054a96" translate="yes" xml:space="preserve">
          <source>All the user-callable functions and constructors take additional arguments which allow direct control over the location and name of temporary files and directories. Files names used by this module include a string of random characters which allows those files to be securely created in shared temporary directories. To maintain backward compatibility, the argument order is somewhat odd; it is recommended to use keyword arguments for clarity.</source>
          <target state="translated">사용자가 호출 할 수있는 모든 함수와 생성자는 추가 인수를 사용하여 임시 파일 및 디렉토리의 위치와 이름을 직접 제어 할 수 있습니다. 이 모듈에서 사용하는 파일 이름에는 임의의 문자열이 포함되어있어 공유 임시 디렉토리에서 해당 파일을 안전하게 작성할 수 있습니다. 이전 버전과의 호환성을 유지하기 위해 인수 순서는 다소 이상합니다. 명확성을 위해 키워드 인수를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="27ab5e9ece9f6fec3cae084274e655c615da7669" translate="yes" xml:space="preserve">
          <source>All the variables below are simply symbolic indexes into the 10-tuple returned by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;os#os.fstat&quot;&gt;&lt;code&gt;os.fstat()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.lstat&quot;&gt;&lt;code&gt;os.lstat()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">아래의 모든 변수는 &lt;a href=&quot;os#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;os#os.fstat&quot;&gt; &lt;code&gt;os.fstat()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;os#os.lstat&quot;&gt; &lt;code&gt;os.lstat()&lt;/code&gt; &lt;/a&gt; 반환 한 10- 튜플에 대한 단순한 기호 인덱스 입니다.</target>
        </trans-unit>
        <trans-unit id="8a1874be964dba6caf7536a5f6cdb4d12bf2f501" translate="yes" xml:space="preserve">
          <source>All these classes can be instantiated by calling them with at least one argument, the pathname of the shared library. If you have an existing handle to an already loaded shared library, it can be passed as the &lt;code&gt;handle&lt;/code&gt; named parameter, otherwise the underlying platforms &lt;code&gt;dlopen&lt;/code&gt; or &lt;code&gt;LoadLibrary&lt;/code&gt; function is used to load the library into the process, and to get a handle to it.</source>
          <target state="translated">이러한 모든 클래스는 공유 라이브러리의 경로 이름 인 하나 이상의 인수로 호출하여 인스턴스화 할 수 있습니다. 이미로드 된 공유 라이브러리에 대한 기존 핸들이있는 경우 &lt;code&gt;handle&lt;/code&gt; 이라는 매개 변수 로 전달 될 수 있습니다 . 그렇지 않으면 기본 플랫폼 &lt;code&gt;dlopen&lt;/code&gt; 또는 &lt;code&gt;LoadLibrary&lt;/code&gt; 함수를 사용하여 라이브러리를 프로세스에로드하고 핸들을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="417f37663be75dee9f473867fc0f32047be90a11" translate="yes" xml:space="preserve">
          <source>All these types can be created by calling them with an optional initializer of the correct type and value:</source>
          <target state="translated">이러한 모든 유형은 올바른 유형 및 값의 선택적 초기화 프로그램으로 호출하여 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="155ee124577e1fe137df7c33d4f6d23d523b7db8" translate="yes" xml:space="preserve">
          <source>All transports implement the following methods:</source>
          <target state="translated">모든 전송은 다음 방법을 구현합니다.</target>
        </trans-unit>
        <trans-unit id="0861f5cc7168426f537bde444cc103b430c6b13c" translate="yes" xml:space="preserve">
          <source>All wrappers around MSI functions raise &lt;code&gt;MSIError&lt;/code&gt;; the string inside the exception will contain more detail.</source>
          <target state="translated">MSI 함수 주위의 모든 래퍼는 &lt;code&gt;MSIError&lt;/code&gt; 를 발생시킵니다 . 예외 안의 문자열은 더 자세한 내용을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="edffc8bbc8f24bd588ae17bcfd535bebc57f13ec" translate="yes" xml:space="preserve">
          <source>Allow an application to set the locale for errors and warnings.</source>
          <target state="translated">응용 프로그램이 오류 및 경고에 대한 로케일을 설정하도록 허용하십시오.</target>
        </trans-unit>
        <trans-unit id="603dd6037e099395a31f0e59c9ba1913159c4a7e" translate="yes" xml:space="preserve">
          <source>Allow encoding and decoding of surrogate codes. These codecs normally treat the presence of surrogates as an error.</source>
          <target state="translated">대리 코드의 인코딩 및 디코딩을 허용합니다. 이러한 코덱은 일반적으로 서로 게이트의 존재를 오류로 취급합니다.</target>
        </trans-unit>
        <trans-unit id="1e19ac51136d0637f9af6d20c7258158d6721dc5" translate="yes" xml:space="preserve">
          <source>Allow simple extension commands notified by server in &lt;code&gt;CAPABILITY&lt;/code&gt; response.</source>
          <target state="translated">&lt;code&gt;CAPABILITY&lt;/code&gt; 응답 으로 서버에 통지 된 간단한 확장 명령을 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="ef317f8483480a64e1b0dccb14f7bb6883cce1dc" translate="yes" xml:space="preserve">
          <source>Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number &lt;code&gt;-1&lt;/code&gt;. After calling this function, &lt;code&gt;init_pair(x,
curses.COLOR_RED, -1)&lt;/code&gt; initializes, for instance, color pair &lt;em&gt;x&lt;/em&gt; to a red foreground color on the default background.</source>
          <target state="translated">이 기능을 지원하는 터미널에서 색상의 기본값을 사용하도록 허용하십시오. 이를 사용하여 응용 프로그램의 투명성을 지원하십시오. 기본 색상은 색상 번호 &lt;code&gt;-1&lt;/code&gt; 에 할당됩니다 . 이 함수를 호출 한 후 &lt;code&gt;init_pair(x, curses.COLOR_RED, -1)&lt;/code&gt; 은 기본 배경 에서 색상 쌍 &lt;em&gt;x&lt;/em&gt; 를 빨간색 전경색으로 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="9af2608dce4ccd3a4d7fe7ccd5d8a999659ec6be" translate="yes" xml:space="preserve">
          <source>Allow wildcard when it is the leftmost and the only character in that segment. Partial wildcards like &lt;code&gt;www*.example.com&lt;/code&gt; are no longer supported.</source>
          <target state="translated">와일드 카드가 해당 세그먼트에서 가장 왼쪽에있는 유일한 문자이면 와일드 카드를 허용하십시오. &lt;code&gt;www*.example.com&lt;/code&gt; 과 같은 부분 와일드 카드 는 더 이상 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d545cb48e8fe2e090c8d20ba1902d68904e84436" translate="yes" xml:space="preserve">
          <source>Allowed members and attributes of enumerations</source>
          <target state="translated">허용 된 멤버 및 열거 속성</target>
        </trans-unit>
        <trans-unit id="27759cb686cd5bf827a6e5a82d77411f516dc61c" translate="yes" xml:space="preserve">
          <source>Allowing alternative option prefixes like &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 및 &lt;code&gt;/&lt;/code&gt; 와 같은 대체 옵션 접두사를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="a6ebd07370440c663e4f0e55185f972d0240507b" translate="yes" xml:space="preserve">
          <source>Allowing applications to identify and clear their own uncollectable types when they appear in &lt;a href=&quot;#gc.garbage&quot;&gt;&lt;code&gt;garbage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">응용 프로그램이 &lt;a href=&quot;#gc.garbage&quot;&gt; &lt;code&gt;garbage&lt;/code&gt; &lt;/a&gt; 나타날 때 수집 할 수없는 유형을 식별하고 지울 수 있도록합니다 .</target>
        </trans-unit>
        <trans-unit id="1698c3d6368b675b56ce12b0b386c7be180d6706" translate="yes" xml:space="preserve">
          <source>Allowing non-resource names to be returned is to allow for situations where how a package and its resources are stored are known a priori and the non-resource names would be useful. For instance, returning subdirectory names is allowed so that when it is known that the package and resources are stored on the file system then those subdirectory names can be used directly.</source>
          <target state="translated">비자 원 이름이 리턴되도록하는 것은 패키지 및 해당 자원이 저장되는 방법을 우선적으로 알고 비자 원 이름이 유용한 상황을 허용하는 것입니다. 예를 들어, 패키지 및 자원이 파일 시스템에 저장되어있는 것으로 알려진 경우 해당 서브 디렉토리 이름을 직접 사용할 수 있도록 서브 디렉토리 이름 리턴이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="b68e07d7d7b9f4e84654d4589ca6f207be1705b6" translate="yes" xml:space="preserve">
          <source>Allowing subclassing of enums that define members would lead to a violation of some important invariants of types and instances. On the other hand, it makes sense to allow sharing some common behavior between a group of enumerations. (See &lt;a href=&quot;#orderedenum&quot;&gt;OrderedEnum&lt;/a&gt; for an example.)</source>
          <target state="translated">멤버를 정의하는 열거 형의 서브 클래 싱을 허용하면 유형 및 인스턴스의 중요한 불변 변수를 위반하게됩니다. 반면에 열거 그룹간에 공통적 인 동작을 공유하는 것이 좋습니다. ( 예는 &lt;a href=&quot;#orderedenum&quot;&gt;OrderedEnum&lt;/a&gt; 을 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="5168b39c43df53db082b41562ffb47b2581e0dfa" translate="yes" xml:space="preserve">
          <source>Allows customizing how exceptions are handled in the event loop.</source>
          <target state="translated">이벤트 루프에서 예외를 처리하는 방법을 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3af65b7b8a24fd1ab3b136e24dca1bdc29a79fcb" translate="yes" xml:space="preserve">
          <source>Allows enabling or disabling coroutine origin tracking. When enabled, the &lt;code&gt;cr_origin&lt;/code&gt; attribute on coroutine objects will contain a tuple of (filename, line number, function name) tuples describing the traceback where the coroutine object was created, with the most recent call first. When disabled, &lt;code&gt;cr_origin&lt;/code&gt; will be None.</source>
          <target state="translated">코 루틴 원산지 추적을 활성화 또는 비활성화 할 수 있습니다. 활성화하면 코 루틴 객체 의 &lt;code&gt;cr_origin&lt;/code&gt; 속성에 코 루틴 객체가 생성 된 역 추적을 설명하는 (파일 이름, 줄 번호, 함수 이름) 튜플이 포함됩니다. 비활성화하면 &lt;code&gt;cr_origin&lt;/code&gt; 은 None이됩니다.</target>
        </trans-unit>
        <trans-unit id="738636a3be8341b9cebe3dd58e0680a5032b2eea" translate="yes" xml:space="preserve">
          <source>Allows specifying that the module named &lt;em&gt;oldname&lt;/em&gt; is in fact the package named &lt;em&gt;newname&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;oldname&lt;/em&gt; 이라는 모듈 이 실제로 &lt;em&gt;newname&lt;/em&gt; 이라는 패키지 임을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e8494b281173c0688479a4b6438c4a9f916278d" translate="yes" xml:space="preserve">
          <source>Allows you to compare data with unknown or inconsistent encoding. All inputs except &lt;em&gt;n&lt;/em&gt; must be bytes objects, not str. Works by losslessly converting all inputs (except &lt;em&gt;n&lt;/em&gt;) to str, and calling &lt;code&gt;dfunc(a, b,
fromfile, tofile, fromfiledate, tofiledate, n, lineterm)&lt;/code&gt;. The output of &lt;em&gt;dfunc&lt;/em&gt; is then converted back to bytes, so the delta lines that you receive have the same unknown/inconsistent encodings as &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="translated">알 수 없거나 일관성이없는 인코딩과 데이터를 비교할 수 있습니다. &lt;em&gt;n을&lt;/em&gt; 제외한 모든 입력 은 str이 아닌 bytes 객체 여야합니다. 모든 입력 ( &lt;em&gt;n&lt;/em&gt; 제외 )을 str 로 손실없이 변환하고 &lt;code&gt;dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)&lt;/code&gt; . 그런 다음 &lt;em&gt;dfunc&lt;/em&gt; 의 출력은 바이트로 다시 변환되므로 수신하는 델타 라인은 &lt;em&gt;a&lt;/em&gt; 및 &lt;em&gt;b&lt;/em&gt; 와 동일한 알 수없는 / 일관되지 않은 인코딩을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="18dea076b2e37e15d1b1e3961b5af0025bae1395" translate="yes" xml:space="preserve">
          <source>Almost all asyncio objects are not thread safe, which is typically not a problem unless there is code that works with them from outside of a Task or a callback. If there&amp;rsquo;s a need for such code to call a low-level asyncio API, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt;&lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt;&lt;/a&gt; method should be used, e.g.:</source>
          <target state="translated">거의 모든 asyncio 객체는 스레드로부터 안전하지 않으므로 Task 외부 나 콜백 외부에서 작동하는 코드가 없으면 일반적으로 문제가되지 않습니다. 이러한 코드가 저수준 asyncio API를 호출해야하는 경우 &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt; &lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt; &lt;/a&gt; 메서드를 사용해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="8ef26a78c0878f712db4f13e47f33bc1d3fc032c" translate="yes" xml:space="preserve">
          <source>Almost all module functions depend on the basic function &lt;a href=&quot;#random.random&quot;&gt;&lt;code&gt;random()&lt;/code&gt;&lt;/a&gt;, which generates a random float uniformly in the semi-open range [0.0, 1.0). Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.</source>
          <target state="translated">거의 모든 모듈 함수는 기본 함수 &lt;a href=&quot;#random.random&quot;&gt; &lt;code&gt;random()&lt;/code&gt; &lt;/a&gt; 에 의존합니다.이 함수 는 semi-open 범위 [0.0, 1.0)에서 임의의 부동 소수점을 균일하게 생성합니다. 파이썬은 Mersenne Twister를 핵심 생성기로 사용합니다. 53 비트 정밀 플로트를 생성하며주기는 2 ** 19937-1입니다. C의 기본 구현은 빠르고 안전합니다. Mersenne Twister는 가장 광범위하게 테스트 된 난수 생성기 중 하나입니다. 그러나 완전히 결정적이므로 모든 목적에 적합하지는 않으며 암호화 목적에 완전히 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="748de8dc879eb6680f9d63547210f95925fe14ea" translate="yes" xml:space="preserve">
          <source>Along with the &lt;a href=&quot;#logging.handlers.QueueHandler&quot;&gt;&lt;code&gt;QueueHandler&lt;/code&gt;&lt;/a&gt; class, &lt;a href=&quot;#logging.handlers.QueueListener&quot;&gt;&lt;code&gt;QueueListener&lt;/code&gt;&lt;/a&gt; can be used to let handlers do their work on a separate thread from the one which does the logging. This is important in Web applications and also other service applications where threads servicing clients need to respond as quickly as possible, while any potentially slow operations (such as sending an email via &lt;a href=&quot;#logging.handlers.SMTPHandler&quot;&gt;&lt;code&gt;SMTPHandler&lt;/code&gt;&lt;/a&gt;) are done on a separate thread.</source>
          <target state="translated">&lt;a href=&quot;#logging.handlers.QueueHandler&quot;&gt; &lt;code&gt;QueueHandler&lt;/code&gt; &lt;/a&gt; 클래스 와 함께 &lt;a href=&quot;#logging.handlers.QueueListener&quot;&gt; &lt;code&gt;QueueListener&lt;/code&gt; &lt;/a&gt; 를 사용하면 핸들러가 로깅을 수행하는 스레드와 별도의 스레드에서 작업을 수행 할 수 있습니다. 이는 웹 서비스 및 클라이언트를 서비스하는 스레드가 가능한 한 빨리 응답해야하는 다른 서비스 응용 프로그램에서 중요하지만, 잠재적으로 느린 작업 (예 : &lt;a href=&quot;#logging.handlers.SMTPHandler&quot;&gt; &lt;code&gt;SMTPHandler&lt;/code&gt; &lt;/a&gt; 를 통해 전자 메일 보내기 )은 별도의 스레드에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="e133f1847d6ba17ada9412544089973439552b65" translate="yes" xml:space="preserve">
          <source>Along with the &lt;a href=&quot;#logging.handlers.QueueListener&quot;&gt;&lt;code&gt;QueueListener&lt;/code&gt;&lt;/a&gt; class, &lt;a href=&quot;#logging.handlers.QueueHandler&quot;&gt;&lt;code&gt;QueueHandler&lt;/code&gt;&lt;/a&gt; can be used to let handlers do their work on a separate thread from the one which does the logging. This is important in Web applications and also other service applications where threads servicing clients need to respond as quickly as possible, while any potentially slow operations (such as sending an email via &lt;a href=&quot;#logging.handlers.SMTPHandler&quot;&gt;&lt;code&gt;SMTPHandler&lt;/code&gt;&lt;/a&gt;) are done on a separate thread.</source>
          <target state="translated">&lt;a href=&quot;#logging.handlers.QueueListener&quot;&gt; &lt;code&gt;QueueListener&lt;/code&gt; &lt;/a&gt; 클래스 와 함께 &lt;a href=&quot;#logging.handlers.QueueHandler&quot;&gt; &lt;code&gt;QueueHandler&lt;/code&gt; &lt;/a&gt; 를 사용하면 핸들러가 로깅을 수행하는 스레드와 별도의 스레드에서 작업을 수행 할 수 있습니다. 이는 웹 서비스 및 클라이언트를 서비스하는 스레드가 가능한 한 빨리 응답해야하는 다른 서비스 응용 프로그램에서 중요하지만, 잠재적으로 느린 작업 (예 : &lt;a href=&quot;#logging.handlers.SMTPHandler&quot;&gt; &lt;code&gt;SMTPHandler&lt;/code&gt; &lt;/a&gt; 를 통해 전자 메일 보내기 )은 별도의 스레드에서 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="c13a6fce77ea6aef73a68321fa87a9bf9f996061" translate="yes" xml:space="preserve">
          <source>Already-issued keys are invalidated by this operation and should not be subsequently used.</source>
          <target state="translated">이미 발행 된 키는이 조작으로 무효화되며 이후에 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="ddaad8ef2dfb964d8f8351c0c13727dace14f681" translate="yes" xml:space="preserve">
          <source>Also add a &lt;em&gt;MIME-Version&lt;/em&gt; header if one is not present (see also &lt;a href=&quot;email.message#email.message.MIMEPart&quot;&gt;&lt;code&gt;MIMEPart&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;MIME-Version&lt;/em&gt; 헤더가 없으면 추가 하십시오 ( &lt;a href=&quot;email.message#email.message.MIMEPart&quot;&gt; &lt;code&gt;MIMEPart&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="04aa310dbe2a0c208ac29daad11f4c7a1536bccb" translate="yes" xml:space="preserve">
          <source>Also called the binomial coefficient because it is equivalent to the coefficient of k-th term in polynomial expansion of the expression &lt;code&gt;(1 + x) ** n&lt;/code&gt;.</source>
          <target state="translated">이항 계수라고도합니다. 식 &lt;code&gt;(1 + x) ** n&lt;/code&gt; 의 다항식 확장에서 k 번째 항의 계수와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="4da92deb98831a7db28244e57fd52231a3f52e3a" translate="yes" xml:space="preserve">
          <source>Also if &lt;em&gt;chunksize&lt;/em&gt; is &lt;code&gt;1&lt;/code&gt; then the &lt;code&gt;next()&lt;/code&gt; method of the iterator returned by the &lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt;&lt;code&gt;imap()&lt;/code&gt;&lt;/a&gt; method has an optional &lt;em&gt;timeout&lt;/em&gt; parameter: &lt;code&gt;next(timeout)&lt;/code&gt; will raise &lt;a href=&quot;#multiprocessing.TimeoutError&quot;&gt;&lt;code&gt;multiprocessing.TimeoutError&lt;/code&gt;&lt;/a&gt; if the result cannot be returned within &lt;em&gt;timeout&lt;/em&gt; seconds.</source>
          <target state="translated">또한 &lt;em&gt;chunksize&lt;/em&gt; 가 &lt;code&gt;1&lt;/code&gt; 인 경우 &lt;a href=&quot;#multiprocessing.pool.Pool.imap&quot;&gt; &lt;code&gt;imap()&lt;/code&gt; &lt;/a&gt; 메서드가 반환 한 반복자 의 &lt;code&gt;next()&lt;/code&gt; 메서드 에는 선택적 &lt;em&gt;timeout&lt;/em&gt; 매개 변수가 있습니다. &lt;code&gt;next(timeout)&lt;/code&gt; 은 &lt;em&gt;timeout&lt;/em&gt; 초 내에 결과를 반환 할 수없는 경우 &lt;a href=&quot;#multiprocessing.TimeoutError&quot;&gt; &lt;code&gt;multiprocessing.TimeoutError&lt;/code&gt; 를&lt;/a&gt; 발생 시킵니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a66c2ca0e99bfb1ee1915dbefddd9032612eb1e9" translate="yes" xml:space="preserve">
          <source>Also known as the Qt for Python project, PySide2 is a newer binding to the Qt toolkit. It is provided by The Qt Company and aims to provide a complete port of PySide to Qt 5. Compared to PyQt, its licensing scheme is friendlier to non-open source applications.</source>
          <target state="translated">Python 프로젝트 용 Qt라고도하는 PySide2는 Qt 툴킷에 대한 최신 바인딩입니다. The Qt Company에서 제공하며 PySide의 완전한 포트를 Qt 5에 제공하는 것을 목표로합니다. PyQt에 비해 라이선스 체계는 비 오픈 소스 애플리케이션에 더 친숙합니다.</target>
        </trans-unit>
        <trans-unit id="e2b37f91f9986d19a74d71c28f0eb3cf516b74d0" translate="yes" xml:space="preserve">
          <source>Also note that cookies saved while Mozilla is running will get clobbered by Mozilla.</source>
          <target state="translated">또한 Mozilla가 실행되는 동안 저장된 쿠키는 Mozilla에 의해 방해를받습니다.</target>
        </trans-unit>
        <trans-unit id="05381aa96697605cddfb622e6c2165e3e0c1cfd5" translate="yes" xml:space="preserve">
          <source>Also note that if &lt;code&gt;sys.breakpointhook()&lt;/code&gt; is overridden programmatically, &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-4&quot;&gt;&lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; consulted.</source>
          <target state="translated">또한 경우에주의 &lt;code&gt;sys.breakpointhook()&lt;/code&gt; 프로그램 오버라이드 (override), &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-4&quot;&gt; &lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt; 가&lt;/a&gt; 되어 &lt;em&gt;있지&lt;/em&gt; 상담.</target>
        </trans-unit>
        <trans-unit id="02c7d894d9a8e8af878b32163c0bea4d7ca67d0d" translate="yes" xml:space="preserve">
          <source>Also note that if &lt;code&gt;sys.breakpointhook()&lt;/code&gt; is overridden programmatically, &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-5&quot;&gt;&lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;not&lt;/em&gt; consulted.</source>
          <target state="translated">또한 &lt;code&gt;sys.breakpointhook()&lt;/code&gt; 이 프로그래밍 방식으로 재정의되면 &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONBREAKPOINT&quot; id=&quot;index-5&quot;&gt; &lt;code&gt;PYTHONBREAKPOINT&lt;/code&gt; &lt;/a&gt; 가 참조 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="332b93cd68d70da8be748419e7b6e1e7630df4b0" translate="yes" xml:space="preserve">
          <source>Also note that, aside from the zero argument form, &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.</source>
          <target state="translated">또한 제로 인수 형식 외에도 &lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; 는 내부 메소드 사용으로 제한되지 않습니다. 두 개의 인수 형식은 인수를 정확하게 지정하고 적절한 참조를합니다. 제로 인수 형식은 컴파일러가 정의 된 클래스를 올바르게 검색하고 일반 메소드의 현재 인스턴스에 액세스하기 위해 필요한 세부 사항을 채우므로 클래스 정의 내에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="30f25e2caeef7e4eba52c7c66bd42d7b1a2c33c9" translate="yes" xml:space="preserve">
          <source>Also referred to as integer division. The resultant value is a whole integer, though the result&amp;rsquo;s type is not necessarily int. The result is always rounded towards minus infinity: &lt;code&gt;1//2&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;(-1)//2&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;1//(-2)&lt;/code&gt; is &lt;code&gt;-1&lt;/code&gt;, and &lt;code&gt;(-1)//(-2)&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">정수 나누기라고도합니다. 결과 값이 정수가 아니더라도 결과 값은 정수입니다. 결과는 항상 빼기 무한대로 반올림됩니다. &lt;code&gt;1//2&lt;/code&gt; 는 &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;(-1)//2&lt;/code&gt; 는 &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;1//(-2)&lt;/code&gt; 는 &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;(-1)//(-2)&lt;/code&gt; 는 &lt;code&gt;0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="969aafb04012095b4d6476bad1048d3bb9a0ed99" translate="yes" xml:space="preserve">
          <source>Also see the &lt;a href=&quot;functions#func-bytearray&quot;&gt;bytearray&lt;/a&gt; built-in.</source>
          <target state="translated">&lt;a href=&quot;functions#func-bytearray&quot;&gt;bytearray&lt;/a&gt; 내장 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17dcbded66c86a6599675ce2d2b8b6553fefda44" translate="yes" xml:space="preserve">
          <source>Also see the &lt;a href=&quot;functions#func-bytes&quot;&gt;bytes&lt;/a&gt; built-in.</source>
          <target state="translated">내장 &lt;a href=&quot;functions#func-bytes&quot;&gt;바이트&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5eea734960db56a51ce22d3968f6f1a077a73c20" translate="yes" xml:space="preserve">
          <source>Also test examples reachable from dict &lt;code&gt;m.__test__&lt;/code&gt;, if it exists and is not &lt;code&gt;None&lt;/code&gt;. &lt;code&gt;m.__test__&lt;/code&gt; maps names (strings) to functions, classes and strings; function and class docstrings are searched for examples; strings are searched directly, as if they were docstrings.</source>
          <target state="translated">또한 dict &lt;code&gt;m.__test__&lt;/code&gt; 에서 도달 할 수 있고 &lt;code&gt;None&lt;/code&gt; 이 아닌 경우 테스트 예제에 도달 할 수 있습니다 . &lt;code&gt;m.__test__&lt;/code&gt; 는 이름 (문자열)을 함수, 클래스 및 문자열에 매핑합니다. 함수 및 클래스 docstrings에서 예제를 검색합니다. 문자열은 마치 docstring 인 것처럼 직접 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="1297c5eac193ee99dea660520c3d5d38eabae727" translate="yes" xml:space="preserve">
          <source>Also unlike other operations, quantize never signals Underflow, even if the result is subnormal and inexact.</source>
          <target state="translated">또한 다른 연산과 달리 양자화는 결과가 비정상적이고 부정확하더라도 언더 플로에 신호를 보내지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6d52e998b134acc66f821dc9e280d60f9ef6cf6e" translate="yes" xml:space="preserve">
          <source>Also, note that if the callback function is called in a thread created outside of Python&amp;rsquo;s control (e.g. by the foreign code that calls the callback), ctypes creates a new dummy Python thread on every invocation. This behavior is correct for most purposes, but it means that values stored with &lt;a href=&quot;threading#threading.local&quot;&gt;&lt;code&gt;threading.local&lt;/code&gt;&lt;/a&gt; will &lt;em&gt;not&lt;/em&gt; survive across different callbacks, even when those calls are made from the same C thread.</source>
          <target state="translated">또한 콜백 함수가 Python 제어 외부에서 생성 된 스레드에서 호출되면 (예 : 콜백을 호출하는 외부 코드에 의해) ctypes는 모든 호출에서 새로운 더미 Python 스레드를 만듭니다. 이 문제는 대부분의 목적을 위해 정확하지만, 함께 저장된 값을 의미 &lt;a href=&quot;threading#threading.local&quot;&gt; &lt;code&gt;threading.local&lt;/code&gt; 의는&lt;/a&gt; 것입니다 &lt;em&gt;하지&lt;/em&gt; 이러한 호출이 동일한 C 스레드에서 만들어진 경우에도, 다른 콜백을 통해 생존.</target>
        </trans-unit>
        <trans-unit id="ffda43397fafd0562d904b85d70629199b0601e9" translate="yes" xml:space="preserve">
          <source>Also, remember that a few standard headers (&lt;em&gt;Content-Length&lt;/em&gt;, &lt;em&gt;Content-Type&lt;/em&gt; and &lt;em&gt;Host&lt;/em&gt;) are added when the &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; is passed to &lt;a href=&quot;#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt;&lt;code&gt;OpenerDirector.open()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">또한 &lt;a href=&quot;#urllib.request.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 이 &lt;a href=&quot;#urllib.request.urlopen&quot;&gt; &lt;code&gt;urlopen()&lt;/code&gt; &lt;/a&gt; (또는 &lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt; &lt;code&gt;OpenerDirector.open()&lt;/code&gt; &lt;/a&gt; )으로 전달 될 때 몇 가지 표준 헤더 ( &lt;em&gt;Content-Length&lt;/em&gt; , &lt;em&gt;Content-Type&lt;/em&gt; 및 &lt;em&gt;Host&lt;/em&gt; )가 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="7c31d635bef296eddc9b7067796d9ac2ceca1971" translate="yes" xml:space="preserve">
          <source>Also, setting &lt;code&gt;feature_version&lt;/code&gt; to a tuple &lt;code&gt;(major, minor)&lt;/code&gt; will attempt to parse using that Python version&amp;rsquo;s grammar. Currently &lt;code&gt;major&lt;/code&gt; must equal to &lt;code&gt;3&lt;/code&gt;. For example, setting &lt;code&gt;feature_version=(3, 4)&lt;/code&gt; will allow the use of &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; as variable names. The lowest supported version is &lt;code&gt;(3, 4)&lt;/code&gt;; the highest is &lt;code&gt;sys.version_info[0:2]&lt;/code&gt;.</source>
          <target state="translated">또한 &lt;code&gt;feature_version&lt;/code&gt; 을 튜플 &lt;code&gt;(major, minor)&lt;/code&gt; 하면 해당 Python 버전의 문법을 사용하여 구문 분석을 시도합니다. 현재 &lt;code&gt;major&lt;/code&gt; 는 &lt;code&gt;3&lt;/code&gt; 과 같아야합니다 . 예를 들어 &lt;code&gt;feature_version=(3, 4)&lt;/code&gt; 를 설정하면 &lt;code&gt;async&lt;/code&gt; 및 &lt;code&gt;await&lt;/code&gt; 를 변수 이름으로 사용할 수 있습니다 . 가장 낮은 지원 버전은 &lt;code&gt;(3, 4)&lt;/code&gt; . 가장 높은 것은 &lt;code&gt;sys.version_info[0:2]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7c038b15b5de4f5872e231b0f4fef4b3d1ab4a8a" translate="yes" xml:space="preserve">
          <source>Also, subclassing an enumeration is allowed only if the enumeration does not define any members. So this is forbidden:</source>
          <target state="translated">또한 열거 서브 클래 싱은 열거가 멤버를 정의하지 않은 경우에만 허용됩니다. 따라서 이것은 금지되어 있습니다 :</target>
        </trans-unit>
        <trans-unit id="328115fa4aad448b63c4abf04e067b3272a971c4" translate="yes" xml:space="preserve">
          <source>Also, this decorator requires that the &lt;code&gt;__dict__&lt;/code&gt; attribute on each instance be a mutable mapping. This means it will not work with some types, such as metaclasses (since the &lt;code&gt;__dict__&lt;/code&gt; attributes on type instances are read-only proxies for the class namespace), and those that specify &lt;code&gt;__slots__&lt;/code&gt; without including &lt;code&gt;__dict__&lt;/code&gt; as one of the defined slots (as such classes don&amp;rsquo;t provide a &lt;code&gt;__dict__&lt;/code&gt; attribute at all).</source>
          <target state="translated">또한이 데코레이터는 각 인스턴스 의 &lt;code&gt;__dict__&lt;/code&gt; 속성이 변경 가능한 매핑이어야합니다. 이는 메타 클래스 ( 유형 인스턴스 의 &lt;code&gt;__dict__&lt;/code&gt; 속성이 클래스 네임 스페이스에 대한 읽기 전용 프록시 이기 때문에)와 같은 일부 유형 과 정의 된 슬롯 중 하나로 &lt;code&gt;__dict__&lt;/code&gt; 를 포함하지 않고 &lt;code&gt;__slots__&lt;/code&gt; 를 지정하는 유형 (클래스와 같은)에서는 작동하지 않음을 의미합니다. &lt;code&gt;__dict__&lt;/code&gt; 속성을 전혀 제공하지 마십시오 ).</target>
        </trans-unit>
        <trans-unit id="d88f419db1d727742f4296df8e60905129a6eaa4" translate="yes" xml:space="preserve">
          <source>Alt-/</source>
          <target state="translated">Alt-/</target>
        </trans-unit>
        <trans-unit id="523f1fa185299e53f8073a5f4db33f3a543e0c73" translate="yes" xml:space="preserve">
          <source>Alt-K</source>
          <target state="translated">Alt-K</target>
        </trans-unit>
        <trans-unit id="08044dfe50ef88573dd4b98d40dcea3bbb29cb1b" translate="yes" xml:space="preserve">
          <source>Alt-n</source>
          <target state="translated">Alt-n</target>
        </trans-unit>
        <trans-unit id="f8b5304cb9f515ca84a85d6f59d92eb340d9d86e" translate="yes" xml:space="preserve">
          <source>Alt-p</source>
          <target state="translated">Alt-p</target>
        </trans-unit>
        <trans-unit id="166df40fdc45fa8435a0aeaeb724d35b2824b092" translate="yes" xml:space="preserve">
          <source>Altered an exponent to fit representation constraints.</source>
          <target state="translated">표현 구속 조건에 맞게 지수를 변경했습니다.</target>
        </trans-unit>
        <trans-unit id="7a26af879a761b43ca17a9773a7940683b3c696e" translate="yes" xml:space="preserve">
          <source>Alternate character set mode</source>
          <target state="translated">대체 문자 세트 모드</target>
        </trans-unit>
        <trans-unit id="d9b3cf0658ad7ba54f125c370d44945ffd5bbbab" translate="yes" xml:space="preserve">
          <source>Alternate constructor for &lt;a href=&quot;#itertools.chain&quot;&gt;&lt;code&gt;chain()&lt;/code&gt;&lt;/a&gt;. Gets chained inputs from a single iterable argument that is evaluated lazily. Roughly equivalent to:</source>
          <target state="translated">&lt;a href=&quot;#itertools.chain&quot;&gt; &lt;code&gt;chain()&lt;/code&gt; &lt;/a&gt; 대체 생성자 . 게으르게 평가되는 반복 가능한 단일 인수에서 체인 입력을 가져옵니다. 대략 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1b95b413e2781a6e9f949c96afb8e7654b0b6a7c" translate="yes" xml:space="preserve">
          <source>Alternately, you can use the &lt;code&gt;setparameters()&lt;/code&gt; method to set all three audio parameters at once. This is more convenient, but may not be as flexible in all cases.</source>
          <target state="translated">또는 &lt;code&gt;setparameters()&lt;/code&gt; 메서드를 사용하여 세 가지 오디오 매개 변수를 한 번에 모두 설정할 수 있습니다 . 이것은 더 편리하지만 모든 경우에 유연하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="120472849a159296aff2262eb84d4aabcf036f62" translate="yes" xml:space="preserve">
          <source>Alternative Generator</source>
          <target state="translated">대체 발전기</target>
        </trans-unit>
        <trans-unit id="c3192b9728e7aa2994a20b12d0f484a50d4d9db8" translate="yes" xml:space="preserve">
          <source>Alternative command line option and argument parsing library.</source>
          <target state="translated">대체 명령 행 옵션 및 인수 구문 분석 라이브러리.</target>
        </trans-unit>
        <trans-unit id="6f08874d859f81959583d494b6024b88f3206311" translate="yes" xml:space="preserve">
          <source>Alternative constructor. The &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; function is actually a shortcut to this classmethod.</source>
          <target state="translated">대체 생성자. &lt;a href=&quot;#tarfile.open&quot;&gt; &lt;code&gt;tarfile.open()&lt;/code&gt; &lt;/a&gt; 함수는 실제로이 classmethod에 대한 바로 가기입니다.</target>
        </trans-unit>
        <trans-unit id="851a8413bea4eb55cb0ed6c5d8946229982061a0" translate="yes" xml:space="preserve">
          <source>Alternatively &lt;em&gt;side_effect&lt;/em&gt; can be an exception class or instance. In this case the exception will be raised when the mock is called.</source>
          <target state="translated">또는 &lt;em&gt;side_effect&lt;/em&gt; 는 예외 클래스 또는 인스턴스 일 수 있습니다. 이 경우 모의가 호출 될 때 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2f2589d09d2de9e0443187f1741ac9282ceccb5b" translate="yes" xml:space="preserve">
          <source>Alternatively you can just use &lt;code&gt;vars(my_mock)&lt;/code&gt; (instance members) and &lt;code&gt;dir(type(my_mock))&lt;/code&gt; (type members) to bypass the filtering irrespective of &lt;code&gt;mock.FILTER_DIR&lt;/code&gt;.</source>
          <target state="translated">또는 &lt;code&gt;vars(my_mock)&lt;/code&gt; (인스턴스 멤버) 및 &lt;code&gt;dir(type(my_mock))&lt;/code&gt; (유형 멤버)을 사용하여 &lt;code&gt;mock.FILTER_DIR&lt;/code&gt; 에 관계없이 필터링을 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="560cce3f7cddd3320937666765b3cde7401b149e" translate="yes" xml:space="preserve">
          <source>Alternatively, a &lt;a href=&quot;#object.__reduce_ex__&quot;&gt;&lt;code&gt;__reduce_ex__()&lt;/code&gt;&lt;/a&gt; method may be defined. The only difference is this method should take a single integer argument, the protocol version. When defined, pickle will prefer it over the &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; method. In addition, &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; automatically becomes a synonym for the extended version. The main use for this method is to provide backwards-compatible reduce values for older Python releases.</source>
          <target state="translated">또는 &lt;a href=&quot;#object.__reduce_ex__&quot;&gt; &lt;code&gt;__reduce_ex__()&lt;/code&gt; &lt;/a&gt; 메서드를 정의 할 수 있습니다. 유일한 차이점은이 방법은 단일 정수 인수 인 프로토콜 버전을 사용해야한다는 것입니다. 정의되면 pickle은 &lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt; 메소드 보다 선호합니다 . 또한 &lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt; 자동으로 확장 버전의 동의어가됩니다. 이 방법의 주요 용도는 이전 Python 릴리스에 대해 하위 호환 호환 감소 값을 제공하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="b8170ca6af713e396125022cf5ef83122166378a" translate="yes" xml:space="preserve">
          <source>Alternatively, annotate your generator as having a return type of either &lt;code&gt;AsyncIterable[YieldType]&lt;/code&gt; or &lt;code&gt;AsyncIterator[YieldType]&lt;/code&gt;:</source>
          <target state="translated">또는 &lt;code&gt;AsyncIterable[YieldType]&lt;/code&gt; 또는 &lt;code&gt;AsyncIterator[YieldType]&lt;/code&gt; 의 반환 유형을 갖는 것으로 생성기에 주석을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="bedcc0b6120fd2e8105cbf4a4b500b32795b5330" translate="yes" xml:space="preserve">
          <source>Alternatively, annotate your generator as having a return type of either &lt;code&gt;Iterable[YieldType]&lt;/code&gt; or &lt;code&gt;Iterator[YieldType]&lt;/code&gt;:</source>
          <target state="translated">또는 &lt;code&gt;Iterable[YieldType]&lt;/code&gt; 또는 &lt;code&gt;Iterator[YieldType]&lt;/code&gt; 의 리턴 유형을 갖는 것으로 생성기에 주석을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="f3a0dab4ca32a3c12f17a83c0742fa58af47dd19" translate="yes" xml:space="preserve">
          <source>Alternatively, for trusted input, the shell&amp;rsquo;s own pipeline support may still be used directly:</source>
          <target state="translated">또는 신뢰할 수있는 입력의 경우 셸의 자체 파이프 라인 지원을 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2c53c18dbfbfd58e92716305404323d14180eb0" translate="yes" xml:space="preserve">
          <source>Alternatively, if you configured the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;PATHEXT&lt;/code&gt; variables for your &lt;a href=&quot;https://docs.python.org/3.8/using/windows.html#using-on-windows&quot;&gt;Python installation&lt;/a&gt;:</source>
          <target state="translated">또는 &lt;a href=&quot;https://docs.python.org/3.8/using/windows.html#using-on-windows&quot;&gt;Python 설치를&lt;/a&gt; 위해 &lt;code&gt;PATH&lt;/code&gt; 및 &lt;code&gt;PATHEXT&lt;/code&gt; 변수를 구성한 경우 :</target>
        </trans-unit>
        <trans-unit id="96fc2d926b40d28091e4a28520224b2917493b24" translate="yes" xml:space="preserve">
          <source>Alternatively, if you configured the &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;PATHEXT&lt;/code&gt; variables for your &lt;a href=&quot;https://docs.python.org/3.9/using/windows.html#using-on-windows&quot;&gt;Python installation&lt;/a&gt;:</source>
          <target state="translated">또는 &lt;a href=&quot;https://docs.python.org/3.9/using/windows.html#using-on-windows&quot;&gt;Python 설치를&lt;/a&gt; 위해 &lt;code&gt;PATH&lt;/code&gt; 및 &lt;code&gt;PATHEXT&lt;/code&gt; 변수를 구성한 경우 :</target>
        </trans-unit>
        <trans-unit id="7a7e943dc867b6734626dcdec4a25f40c03a249a" translate="yes" xml:space="preserve">
          <source>Alternatively, inputs can be rounded upon creation using the &lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt;&lt;code&gt;Context.create_decimal()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">또는 &lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt; &lt;code&gt;Context.create_decimal()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하여 생성시 입력을 반올림 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="afdd5b97037a223bd3a94ba552f2a81c0c1bf175" translate="yes" xml:space="preserve">
          <source>Alternatively, the first character of the format string can be used to indicate the byte order, size and alignment of the packed data, according to the following table:</source>
          <target state="translated">또는 다음 표에 따라 형식 문자열의 첫 번째 문자를 사용하여 압축 된 데이터의 바이트 순서, 크기 및 정렬을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="161271a624435f85f1f3f89dd66674cf40b4b411" translate="yes" xml:space="preserve">
          <source>Alternatively, use &lt;a href=&quot;#inspect.signature&quot;&gt;&lt;code&gt;signature()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect-signature-object&quot;&gt;Signature Object&lt;/a&gt;, which provide a more structured introspection API for callables.</source>
          <target state="translated">또는 callables에 대해보다 구조화 된 내부 검사 API를 제공하는 &lt;a href=&quot;#inspect.signature&quot;&gt; &lt;code&gt;signature()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#inspect-signature-object&quot;&gt;Signature Object&lt;/a&gt; 를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bc69874a843b8bca70392a6b4845a801e795ddc4" translate="yes" xml:space="preserve">
          <source>Alternatively, you can provide the entire regular expression pattern by overriding the class attribute &lt;em&gt;pattern&lt;/em&gt;. If you do this, the value must be a regular expression object with four named capturing groups. The capturing groups correspond to the rules given above, along with the invalid placeholder rule:</source>
          <target state="translated">또는 클래스 속성 &lt;em&gt;pattern&lt;/em&gt; 을 재정 의하여 전체 정규식 패턴을 제공 할 수 있습니다 . 이렇게하면 값이 4 개의 명명 된 캡처 그룹이있는 정규식 객체 여야합니다. 캡처 그룹이 유효하지 않은 자리 표시 자 규칙과 함께 위에 제공된 규칙에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="537f3d9f59a4cc7f4b3b3b1d8452a61dcfcd6369" translate="yes" xml:space="preserve">
          <source>Alternatively, you can run the demo scripts individually. For example,</source>
          <target state="translated">또는 데모 스크립트를 개별적으로 실행할 수 있습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="fa0d39d2965e611cb72e153681483b50e7579f0d" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;a href=&quot;#multiprocessing.get_context&quot;&gt;&lt;code&gt;get_context()&lt;/code&gt;&lt;/a&gt; to obtain a context object. Context objects have the same API as the multiprocessing module, and allow one to use multiple start methods in the same program.</source>
          <target state="translated">또는 &lt;a href=&quot;#multiprocessing.get_context&quot;&gt; &lt;code&gt;get_context()&lt;/code&gt; &lt;/a&gt; 를 사용하여 컨텍스트 객체를 얻을 수 있습니다 . 컨텍스트 객체는 멀티 프로세싱 모듈과 동일한 API를 가지며 동일한 프로그램에서 여러 시작 메소드를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c25f25fc8595d803ebcfcdb59b8832dd261b439" translate="yes" xml:space="preserve">
          <source>Alters flag dispositions for messages in mailbox. &lt;em&gt;command&lt;/em&gt; is specified by section 6.4.6 of &lt;a href=&quot;https://tools.ietf.org/html/rfc2060.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2060&lt;/strong&gt;&lt;/a&gt; as being one of &amp;ldquo;FLAGS&amp;rdquo;, &amp;ldquo;+FLAGS&amp;rdquo;, or &amp;ldquo;-FLAGS&amp;rdquo;, optionally with a suffix of &amp;ldquo;.SILENT&amp;rdquo;.</source>
          <target state="translated">사서함의 메시지에 대한 플래그 처리를 변경합니다. &lt;em&gt;명령&lt;/em&gt; 은 &lt;a href=&quot;https://tools.ietf.org/html/rfc2060.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 2060&lt;/strong&gt;&lt;/a&gt; 의 섹션 6.4.6에 &quot;FLAGS&quot;, &quot;+ FLAGS&quot;또는 &quot;-FLAGS&quot;중 하나로 지정되고 선택적으로 접미사가 &quot;.SILENT&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="6ca488175d062da3b916916dcc5cf1c6c0a580bc" translate="yes" xml:space="preserve">
          <source>Although &lt;a href=&quot;os.path#os.path.relpath&quot;&gt;&lt;code&gt;os.path.relpath()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pathlib.PurePath.relative_to&quot;&gt;&lt;code&gt;PurePath.relative_to()&lt;/code&gt;&lt;/a&gt; have some overlapping use-cases, their semantics differ enough to warrant not considering them equivalent.</source>
          <target state="translated">하지만 &lt;a href=&quot;os.path#os.path.relpath&quot;&gt; &lt;code&gt;os.path.relpath()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#pathlib.PurePath.relative_to&quot;&gt; &lt;code&gt;PurePath.relative_to()&lt;/code&gt; &lt;/a&gt; 일부 중복 사용 사례를 가지고, 자신의 의미는 상당을 고려하지 않고 보증 할만큼 다르다.</target>
        </trans-unit>
        <trans-unit id="5aba7d7e4194f7e569bb1e4976c4f49e69cd0c0d" translate="yes" xml:space="preserve">
          <source>Although Windows supports &lt;a href=&quot;#os.chmod&quot;&gt;&lt;code&gt;chmod()&lt;/code&gt;&lt;/a&gt;, you can only set the file&amp;rsquo;s read-only flag with it (via the &lt;code&gt;stat.S_IWRITE&lt;/code&gt; and &lt;code&gt;stat.S_IREAD&lt;/code&gt; constants or a corresponding integer value). All other bits are ignored.</source>
          <target state="translated">Windows는 &lt;a href=&quot;#os.chmod&quot;&gt; &lt;code&gt;chmod()&lt;/code&gt; &lt;/a&gt; 지원하지만 &lt;code&gt;stat.S_IWRITE&lt;/code&gt; 및 &lt;code&gt;stat.S_IREAD&lt;/code&gt; 상수 또는 해당 정수 값을 통해 파일의 읽기 전용 플래그 만 설정할 수 있습니다 . 다른 모든 비트는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="ff306b2fbe16e39bfb4f4ae1cb51d280ddc5b736" translate="yes" xml:space="preserve">
          <source>Although filters are used primarily to filter records based on more sophisticated criteria than levels, they get to see every record which is processed by the handler or logger they&amp;rsquo;re attached to: this can be useful if you want to do things like counting how many records were processed by a particular logger or handler, or adding, changing or removing attributes in the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; being processed. Obviously changing the LogRecord needs to be done with some care, but it does allow the injection of contextual information into logs (see &lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#filters-contextual&quot;&gt;Using Filters to impart contextual information&lt;/a&gt;).</source>
          <target state="translated">필터는 주로 레벨보다 더 정교한 기준에 따라 레코드를 필터링하는 데 사용되지만 첨부 된 처리기 또는 로거가 처리하는 모든 레코드를 볼 수 있습니다. 레코드는 특정 로거 또는 핸들러에 의해 처리되거나 처리중인 &lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; &lt;/a&gt; 에서 속성을 추가, 변경 또는 제거합니다 . 분명히 LogRecord를 변경하려면 약간의주의를 기울여야하지만 상황에 맞는 정보를 로그에 삽입 할 수 있습니다 ( &lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#filters-contextual&quot;&gt;컨텍스트 정보를 전달하기 위해 필터 사용&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="8c3294a37977a82023d9835e2636a67fa40e0a66" translate="yes" xml:space="preserve">
          <source>Although filters are used primarily to filter records based on more sophisticated criteria than levels, they get to see every record which is processed by the handler or logger they&amp;rsquo;re attached to: this can be useful if you want to do things like counting how many records were processed by a particular logger or handler, or adding, changing or removing attributes in the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; being processed. Obviously changing the LogRecord needs to be done with some care, but it does allow the injection of contextual information into logs (see &lt;a href=&quot;https://docs.python.org/3.9/howto/logging-cookbook.html#filters-contextual&quot;&gt;Using Filters to impart contextual information&lt;/a&gt;).</source>
          <target state="translated">필터는 주로 레벨보다 더 정교한 기준을 기반으로 레코드를 필터링하는 데 사용되지만, 연결된 핸들러 또는 로거에 의해 처리되는 모든 레코드를 볼 수 있습니다. 레코드는 특정 로거 또는 핸들러에 의해 처리되었거나 처리중인 &lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; &lt;/a&gt; 에서 속성을 추가, 변경 또는 제거했습니다 . 당연히 LogRecord를 변경하려면 약간의주의가 필요하지만 상황 정보를 로그에 삽입 할 수 있습니다 ( &lt;a href=&quot;https://docs.python.org/3.9/howto/logging-cookbook.html#filters-contextual&quot;&gt;상황 정보를 전달하기 위해 필터 사용&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e435625441b2f1626446dd761b8fafec987e5b2e" translate="yes" xml:space="preserve">
          <source>Although in many cases, changing the &lt;code id=&quot;index-15&quot;&gt;TZ&lt;/code&gt; environment variable may affect the output of functions like &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; without calling &lt;a href=&quot;#time.tzset&quot;&gt;&lt;code&gt;tzset()&lt;/code&gt;&lt;/a&gt;, this behavior should not be relied on.</source>
          <target state="translated">많은 경우에 &lt;code id=&quot;index-15&quot;&gt;TZ&lt;/code&gt; 환경 변수를 변경하면 &lt;a href=&quot;#time.tzset&quot;&gt; &lt;code&gt;tzset()&lt;/code&gt; &lt;/a&gt; 을 호출하지 않고 &lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt; 과 같은 함수의 출력에 영향을 줄 수 있지만이 동작에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="9ac287e0e259e1518ab8bd9cdd4fceec7ae0a0f4" translate="yes" xml:space="preserve">
          <source>Although it is a somewhat common practice to expose these to end users, these values are designed to be primary keys for representing the relevant zones and not necessarily user-facing elements. Projects like CLDR (the Unicode Common Locale Data Repository) can be used to get more user-friendly strings from these keys.</source>
          <target state="translated">이러한 값을 최종 사용자에게 노출하는 것이 다소 일반적인 관행이지만 이러한 값은 관련 영역을 나타 내기위한 기본 키로 설계되었으며 반드시 사용자를 향하는 요소는 아닙니다. CLDR (Unicode Common Locale Data Repository)과 같은 프로젝트를 사용하여 이러한 키에서보다 사용자 친화적 인 문자열을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f7e770948da6ad1f5401b21b0a95acc8356e162" translate="yes" xml:space="preserve">
          <source>Although it is possible to store a pointer in shared memory remember that this will refer to a location in the address space of a specific process. However, the pointer is quite likely to be invalid in the context of a second process and trying to dereference the pointer from the second process may cause a crash.</source>
          <target state="translated">공유 메모리에 포인터를 저장할 수 있지만 특정 프로세스의 주소 공간에있는 위치를 나타냅니다. 그러나 두 번째 프로세스 컨텍스트에서 포인터가 유효하지 않을 가능성이 높으며 두 번째 프로세스에서 포인터를 역 참조하려고하면 충돌이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36ac042d6e7c56f32a4f17c62570dba38897403c" translate="yes" xml:space="preserve">
          <source>Although powerful, implementing &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; directly in your classes is error prone. For this reason, class designers should use the high-level interface (i.e., &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#object.__getstate__&quot;&gt;&lt;code&gt;__getstate__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt;) whenever possible. We will show, however, cases where using &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; is the only option or leads to more efficient pickling or both.</source>
          <target state="translated">강력하지만 클래스에서 &lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt; 직접 구현 하면 오류가 발생하기 쉽습니다. 이러한 이유로 클래스 디자이너는 가능할 때마다 높은 수준의 인터페이스 (예 : &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt; &lt;code&gt;__getnewargs_ex__()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#object.__getstate__&quot;&gt; &lt;code&gt;__getstate__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#object.__setstate__&quot;&gt; &lt;code&gt;__setstate__()&lt;/code&gt; &lt;/a&gt; )를 사용해야 합니다. 그러나 &lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt; 를 사용하는 것이 유일한 옵션이거나 더 효율적인 산세 또는 두 가지 경우를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="81a1b224e7ad62f02a109883807627a1786137e9" translate="yes" xml:space="preserve">
          <source>Although the &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; class of the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module implements this attribute, the database engine&amp;rsquo;s own support for the determination of &amp;ldquo;rows affected&amp;rdquo;/&amp;rdquo;rows selected&amp;rdquo; is quirky.</source>
          <target state="translated">&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt; 모듈 의 &lt;a href=&quot;#sqlite3.Cursor&quot;&gt; &lt;code&gt;Cursor&lt;/code&gt; &lt;/a&gt; 클래스 가이 속성을 구현 하지만 &quot;영향을받는 행&quot;/ &quot;선택한 행&quot;을 결정하기위한 데이터베이스 엔진의 자체 지원은 기발합니다.</target>
        </trans-unit>
        <trans-unit id="5e789a4520b246a8dd4042cca86036c0f5a37df9" translate="yes" xml:space="preserve">
          <source>Although this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.</source>
          <target state="translated">이 모듈을 항상 사용할 수 있지만 모든 플랫폼에서 모든 기능을 사용할 수있는 것은 아닙니다. 이 모듈에 정의 된 대부분의 함수는 동일한 이름의 플랫폼 C 라이브러리 함수를 호출합니다. 이러한 기능의 의미는 플랫폼마다 다르므로 플랫폼 설명서를 참조하면 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52e0fade5c33a8c0706c1ee4ec4d3b8efefa5ae6" translate="yes" xml:space="preserve">
          <source>Always check a script for syntax errors first, by doing something like &lt;code&gt;python script.py&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;python script.py&lt;/code&gt; 와 같은 작업을 수행하여 스크립트에 구문 오류가 있는지 먼저 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="940801d3a0b2504730f2938dc103aefa05f13928" translate="yes" xml:space="preserve">
          <source>Always create a new, empty database, open for reading and writing</source>
          <target state="translated">항상 새로운 빈 데이터베이스를 작성하십시오</target>
        </trans-unit>
        <trans-unit id="2b68c9edfa6077c66acf9229ba5007aeabfd27c6" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">항상 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d92042192835b0201f0080332bb4fd84f15bccf0" translate="yes" xml:space="preserve">
          <source>Among other uses, this allows for initializing field values that depend on one or more other fields. For example:</source>
          <target state="translated">다른 용도 중에서, 이는 하나 이상의 다른 필드에 의존하는 필드 값을 초기화 할 수있게합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4ce4dae33731a8639d5206f55cb819ffec493ded" translate="yes" xml:space="preserve">
          <source>Among the acceptable object types in the iterables are Python &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt; (e.g. &lt;code&gt;sys.stdin&lt;/code&gt;, or objects returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt;), socket objects returned by &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket.socket()&lt;/code&gt;&lt;/a&gt;. You may also define a &lt;em&gt;wrapper&lt;/em&gt; class yourself, as long as it has an appropriate &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method (that really returns a file descriptor, not just a random integer).</source>
          <target state="translated">이터 러블에서 허용되는 객체 유형 중에는 Python &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;파일 객체&lt;/a&gt; (예 : &lt;code&gt;sys.stdin&lt;/code&gt; 또는 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;os.popen()&lt;/code&gt; &lt;/a&gt; 반환 된 객체), &lt;a href=&quot;socket#socket.socket&quot;&gt; &lt;code&gt;socket.socket()&lt;/code&gt; &lt;/a&gt; 반환 된 소켓 객체가 있습니다. 적절한 &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt; &lt;code&gt;fileno()&lt;/code&gt; &lt;/a&gt; 메서드 가있는 한 &lt;em&gt;래퍼&lt;/em&gt; 클래스를 직접 정의 할 수도 있습니다 ( 그냥 임의의 정수가 아닌 파일 설명자를 실제로 반환 함).</target>
        </trans-unit>
        <trans-unit id="08b2cdd1820b99395356f8484945cb33f7bdcc5d" translate="yes" xml:space="preserve">
          <source>Among the acceptable object types in the sequences are Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file objects&lt;/a&gt; (e.g. &lt;code&gt;sys.stdin&lt;/code&gt;, or objects returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt;), socket objects returned by &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket.socket()&lt;/code&gt;&lt;/a&gt;. You may also define a &lt;em&gt;wrapper&lt;/em&gt; class yourself, as long as it has an appropriate &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; method (that really returns a file descriptor, not just a random integer).</source>
          <target state="translated">시퀀스에서 허용되는 객체 유형에는 Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;파일 객체&lt;/a&gt; (예 : &lt;code&gt;sys.stdin&lt;/code&gt; 또는 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;os.popen()&lt;/code&gt; &lt;/a&gt; 반환 된 객체), &lt;a href=&quot;socket#socket.socket&quot;&gt; &lt;code&gt;socket.socket()&lt;/code&gt; &lt;/a&gt; 반환 된 소켓 객체가 있습니다. 적절한 &lt;a href=&quot;io#io.IOBase.fileno&quot;&gt; &lt;code&gt;fileno()&lt;/code&gt; &lt;/a&gt; 메소드 (임의의 정수가 아닌 파일 디스크립터를 실제로 리턴 함 ) 가있는 한 &lt;em&gt;랩퍼&lt;/em&gt; 클래스를 직접 정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="67f920425dfdb0e1d204c3706777c2dfb256039d" translate="yes" xml:space="preserve">
          <source>An &amp;ldquo;unstructured&amp;rdquo; header is the default type of header in &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;. Any header that does not have a specified syntax is treated as unstructured. The classic example of an unstructured header is the &lt;em&gt;Subject&lt;/em&gt; header.</source>
          <target state="translated">&quot;구조화되지 않은&quot;헤더는 &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; 의 기본 헤더 유형입니다 . 지정된 구문이없는 헤더는 구조화되지 않은 것으로 취급됩니다. 구조화되지 않은 헤더의 전형적인 예는 &lt;em&gt;Subject&lt;/em&gt; 헤더입니다.</target>
        </trans-unit>
        <trans-unit id="e131bde80853d47856e8609b6fce7ef182378143" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#collections.OrderedDict&quot;&gt;&lt;code&gt;OrderedDict&lt;/code&gt;&lt;/a&gt; would also be useful for implementing variants of &lt;a href=&quot;functools#functools.lru_cache&quot;&gt;&lt;code&gt;functools.lru_cache()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#collections.OrderedDict&quot;&gt; &lt;code&gt;OrderedDict&lt;/code&gt; 은&lt;/a&gt; 또한 변종 구현하는 데 유용 할 것이다 &lt;a href=&quot;functools#functools.lru_cache&quot;&gt; &lt;code&gt;functools.lru_cache()&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="f9c7f6e615e42567774616270a66f004c71798f6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; subclass that executes calls asynchronously using a pool of at most &lt;em&gt;max_workers&lt;/em&gt; processes. If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, it will default to the number of processors on the machine. If &lt;em&gt;max_workers&lt;/em&gt; is less than or equal to &lt;code&gt;0&lt;/code&gt;, then a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised. On Windows, &lt;em&gt;max_workers&lt;/em&gt; must be less than or equal to &lt;code&gt;61&lt;/code&gt;. If it is not then &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, then the default chosen will be at most &lt;code&gt;61&lt;/code&gt;, even if more processors are available. &lt;em&gt;mp_context&lt;/em&gt; can be a multiprocessing context or None. It will be used to launch the workers. If &lt;em&gt;mp_context&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, the default multiprocessing context is used.</source>
          <target state="translated">최대 &lt;em&gt;max_workers&lt;/em&gt; 프로세스 풀을 사용하여 비동기 적으로 호출을 실행 하는 &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt; 하위 클래스입니다 . &lt;em&gt;max_workers&lt;/em&gt; 가 &lt;code&gt;None&lt;/code&gt; 이거나 지정되지 않은 경우 기본적으로 컴퓨터의 프로세서 수로 설정됩니다. 경우 &lt;em&gt;max_workers가&lt;/em&gt; 보다 작거나 같은지 &lt;code&gt;0&lt;/code&gt; , 다음 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 발생한다. Windows에서 &lt;em&gt;max_workers&lt;/em&gt; 는 &lt;code&gt;61&lt;/code&gt; 보다 작거나 같아야합니다 . 그렇지 않은 경우 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 경우 &lt;em&gt;max_workers가&lt;/em&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 다음, 선택된 기본값은 가장에있을 것입니다 &lt;code&gt;61&lt;/code&gt; 이상의 프로세서를 사용할 수있는 경우에도.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;mp_context&lt;/em&gt; 는 다중 처리 컨텍스트 또는 None 일 수 있습니다. 작업자를 시작하는 데 사용됩니다. 경우 &lt;em&gt;mp_context가&lt;/em&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; 여부를 지정, 기본 다중 처리 컨텍스트가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="47217b41bb1d751c58676a69570e3346ce5098e4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; subclass that executes calls asynchronously using a pool of at most &lt;em&gt;max_workers&lt;/em&gt; processes. If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, it will default to the number of processors on the machine. If &lt;em&gt;max_workers&lt;/em&gt; is lower or equal to &lt;code&gt;0&lt;/code&gt;, then a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised. On Windows, &lt;em&gt;max_workers&lt;/em&gt; must be equal or lower than &lt;code&gt;61&lt;/code&gt;. If it is not then &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;max_workers&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, then the default chosen will be at most &lt;code&gt;61&lt;/code&gt;, even if more processors are available. &lt;em&gt;mp_context&lt;/em&gt; can be a multiprocessing context or None. It will be used to launch the workers. If &lt;em&gt;mp_context&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt; or not given, the default multiprocessing context is used.</source>
          <target state="translated">최대 &lt;em&gt;max_workers&lt;/em&gt; 프로세스 풀을 사용하여 비동기 적으로 호출을 실행 하는 &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt; 서브 클래스 . 경우 &lt;em&gt;max_workers이&lt;/em&gt; 있다 &lt;code&gt;None&lt;/code&gt; 여부가 주어지지의 경우 시스템의 프로세서 수에 기본 설정됩니다. 경우 &lt;em&gt;max_workers가&lt;/em&gt; 낮거나 같은지 &lt;code&gt;0&lt;/code&gt; , 다음 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 발생한다. Windows에서 &lt;em&gt;max_workers&lt;/em&gt; 는 &lt;code&gt;61&lt;/code&gt; 이하 여야합니다 . 그렇지 않으면 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 경우 &lt;em&gt;max_workers가&lt;/em&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; , 다음, 선택된 기본값은 가장에있을 것입니다 &lt;code&gt;61&lt;/code&gt; 이상의 프로세서를 사용할 수있는 경우에도. &lt;em&gt;mp_context&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;다중 처리 컨텍스트 또는 없음 일 수 있습니다. 노동자를 발사하는 데 사용됩니다. 경우 &lt;em&gt;mp_context가&lt;/em&gt; 없습니다 &lt;code&gt;None&lt;/code&gt; 여부를 지정, 기본 다중 처리 컨텍스트가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4f20b7dfdda203d4d41b7e3513f2e5b7977c7e2d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; subclass that uses a pool of at most &lt;em&gt;max_workers&lt;/em&gt; threads to execute calls asynchronously.</source>
          <target state="translated">최대 &lt;em&gt;max_workers&lt;/em&gt; 스레드 풀을 사용하여 호출을 비동기 적으로 실행 하는 &lt;a href=&quot;#concurrent.futures.Executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt; 서브 클래스입니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a8c23a468c316481bdf2183623e1c6846281a4c8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; instance is fed HTML data and calls handler methods when start tags, end tags, text, comments, and other markup elements are encountered. The user should subclass &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; and override its methods to implement the desired behavior.</source>
          <target state="translated">&lt;a href=&quot;#html.parser.HTMLParser&quot;&gt; &lt;code&gt;HTMLParser&lt;/code&gt; 의&lt;/a&gt; 태그, 종료 태그, 텍스트, 주석을 시작할 때 인스턴스는 HTML 데이터와 호출 핸들러 메소드를 공급하고, 다른 마크 업 요소가 발생하고 있습니다. 사용자는 &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt; &lt;code&gt;HTMLParser&lt;/code&gt; &lt;/a&gt; 를 서브 클래 싱 하고 메소드를 재정 의하여 원하는 동작을 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="0d0411e58015548ce4f79bef8d87ffb7f4cf110d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#http.client.HTTPConnection&quot;&gt;&lt;code&gt;HTTPConnection&lt;/code&gt;&lt;/a&gt; instance represents one transaction with an HTTP server. It should be instantiated passing it a host and optional port number. If no port number is passed, the port is extracted from the host string if it has the form &lt;code&gt;host:port&lt;/code&gt;, else the default HTTP port (80) is used. If the optional &lt;em&gt;timeout&lt;/em&gt; parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional &lt;em&gt;source_address&lt;/em&gt; parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. The optional &lt;em&gt;blocksize&lt;/em&gt; parameter sets the buffer size in bytes for sending a file-like message body.</source>
          <target state="translated">&lt;a href=&quot;#http.client.HTTPConnection&quot;&gt; &lt;code&gt;HTTPConnection&lt;/code&gt; &lt;/a&gt; 인스턴스는 HTTP 서버와 하나의 트랜잭션을 나타냅니다. 호스트 및 선택적 포트 번호를 전달하여 인스턴스화해야합니다. 포트 번호가 전달되지 않으면 호스트 문자열이 &lt;code&gt;host:port&lt;/code&gt; 형식이면 호스트 문자열에서 포트가 추출됩니다. 그렇지 않으면 기본 HTTP 포트 (80)가 사용됩니다. 선택적 &lt;em&gt;시간 초과&lt;/em&gt; 매개 변수가 제공되면 차단 시도 (예 : 연결 시도)가 몇 초 후에 시간 초과됩니다 (제공되지 않으면 전역 기본 시간 초과 설정이 사용됨). 선택적 &lt;em&gt;source_address&lt;/em&gt; 매개 변수는 HTTP 연결의 소스 주소로 사용할 (호스트, 포트)의 튜플 일 수 있습니다. 선택적 &lt;em&gt;blocksize&lt;/em&gt; 매개 변수는 파일과 유사한 메시지 본문을 보내기 위해 버퍼 크기를 바이트 단위로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ed2fb59076f740158ba38827bce5bff26573eb0c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#http.client.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; instance wraps the HTTP response from the server. It provides access to the request headers and the entity body. The response is an iterable object and can be used in a with statement.</source>
          <target state="translated">&lt;a href=&quot;#http.client.HTTPResponse&quot;&gt; &lt;code&gt;HTTPResponse&lt;/code&gt; &lt;/a&gt; 인스턴스는 서버에서 HTTP 응답을 래핑합니다. 요청 헤더 및 엔티티 본문에 대한 액세스를 제공합니다. 응답은 반복 가능한 객체이며 with 문에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30417cc6f1be8386812ed952297391d77fecc73f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#imaplib.IMAP4&quot;&gt;&lt;code&gt;IMAP4&lt;/code&gt;&lt;/a&gt; instance has the following methods:</source>
          <target state="translated">&lt;a href=&quot;#imaplib.IMAP4&quot;&gt; &lt;code&gt;IMAP4&lt;/code&gt; 의&lt;/a&gt; 인스턴스는 다음과 같은 방법이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="88406d2d2cb0f1d94ca189eb244e8e9fe67a27a7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#ipaddress.AddressValueError&quot;&gt;&lt;code&gt;AddressValueError&lt;/code&gt;&lt;/a&gt; is raised if &lt;em&gt;address&lt;/em&gt; is not a valid IPv4 address. A &lt;a href=&quot;#ipaddress.NetmaskValueError&quot;&gt;&lt;code&gt;NetmaskValueError&lt;/code&gt;&lt;/a&gt; is raised if the mask is not valid for an IPv4 address.</source>
          <target state="translated">&lt;a href=&quot;#ipaddress.AddressValueError&quot;&gt; &lt;code&gt;AddressValueError&lt;/code&gt; 는&lt;/a&gt; 경우 발생합니다 &lt;em&gt;주소가&lt;/em&gt; 유효한 IPv4 주소가 아닙니다. &lt;a href=&quot;#ipaddress.NetmaskValueError&quot;&gt; &lt;code&gt;NetmaskValueError&lt;/code&gt; 이&lt;/a&gt; 마스크는 IPv4 주소에 대한 유효하지 않은 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2c00af07c169fbcb2dc420227c3de9360f629263" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#ipaddress.AddressValueError&quot;&gt;&lt;code&gt;AddressValueError&lt;/code&gt;&lt;/a&gt; is raised if &lt;em&gt;address&lt;/em&gt; is not a valid IPv6 address. A &lt;a href=&quot;#ipaddress.NetmaskValueError&quot;&gt;&lt;code&gt;NetmaskValueError&lt;/code&gt;&lt;/a&gt; is raised if the mask is not valid for an IPv6 address.</source>
          <target state="translated">&lt;a href=&quot;#ipaddress.AddressValueError&quot;&gt; &lt;code&gt;AddressValueError&lt;/code&gt; 는&lt;/a&gt; 경우 발생합니다 &lt;em&gt;주소가&lt;/em&gt; 유효한 IPv6 주소가 아닙니다. &lt;a href=&quot;#ipaddress.NetmaskValueError&quot;&gt; &lt;code&gt;NetmaskValueError&lt;/code&gt; 는&lt;/a&gt; 마스크가 IPv6 주소에 대한 유효하지 않은 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e22e8e2b70a072517721b45185e0df25bf62617a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; can wrap an already-open &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, or operate directly on a named file. The &lt;em&gt;filename&lt;/em&gt; argument specifies either the file object to wrap, or the name of the file to open (as a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like&lt;/a&gt; object). When wrapping an existing file object, the wrapped file will not be closed when the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; is closed.</source>
          <target state="translated">&lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; 은&lt;/a&gt; 이미 오픈 랩 수 있습니다 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;파일 객체를&lt;/a&gt; , 또는 명명 된 파일을 직접 운영하고 있습니다. &lt;em&gt;파일 이름&lt;/em&gt; 인수를 지정하거나 랩에 파일 객체 또는 열 파일의 이름 (A와 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;경로와 같은&lt;/a&gt; 객체). 기존 파일 객체를 줄 바꿈 할 때 &lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; &lt;/a&gt; 을 닫을 때 줄 바꿈 된 파일이 닫히지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="826a7a8ccbf423464475cb4ae7502ae90c2e645a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; can wrap an already-open &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;, or operate directly on a named file. The &lt;em&gt;filename&lt;/em&gt; argument specifies either the file object to wrap, or the name of the file to open (as a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like&lt;/a&gt; object). When wrapping an existing file object, the wrapped file will not be closed when the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; is closed.</source>
          <target state="translated">&lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; 은&lt;/a&gt; 이미 오픈 랩 수 있습니다 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;파일 객체를&lt;/a&gt; , 또는 명명 된 파일을 직접 운영하고 있습니다. &lt;em&gt;파일 이름&lt;/em&gt; 인수를 지정하거나 랩에 파일 객체 또는 열 파일의 이름 (A와 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;경로와 같은&lt;/a&gt; 객체). 기존 파일 개체를 래핑 할 때 래핑 된 파일은 &lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; &lt;/a&gt; 이 닫혀도 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="39f46664bc28103047a5cc26287a1fd211662851" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#poplib.POP3&quot;&gt;&lt;code&gt;POP3&lt;/code&gt;&lt;/a&gt; instance has the following methods:</source>
          <target state="translated">&lt;a href=&quot;#poplib.POP3&quot;&gt; &lt;code&gt;POP3&lt;/code&gt; 의&lt;/a&gt; 인스턴스는 다음과 같은 방법이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="4e40ef7751f7971309b0f2f98a0b9e618f82a29f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; instance encapsulates an SMTP connection. It has methods that support a full repertoire of SMTP and ESMTP operations. If the optional host and port parameters are given, the SMTP &lt;a href=&quot;#smtplib.SMTP.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; method is called with those parameters during initialization. If specified, &lt;em&gt;local_hostname&lt;/em&gt; is used as the FQDN of the local host in the HELO/EHLO command. Otherwise, the local hostname is found using &lt;a href=&quot;socket#socket.getfqdn&quot;&gt;&lt;code&gt;socket.getfqdn()&lt;/code&gt;&lt;/a&gt;. If the &lt;a href=&quot;#smtplib.SMTP.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; call returns anything other than a success code, an &lt;a href=&quot;#smtplib.SMTPConnectError&quot;&gt;&lt;code&gt;SMTPConnectError&lt;/code&gt;&lt;/a&gt; is raised. The optional &lt;em&gt;timeout&lt;/em&gt; parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). If the timeout expires, &lt;a href=&quot;socket#socket.timeout&quot;&gt;&lt;code&gt;socket.timeout&lt;/code&gt;&lt;/a&gt; is raised. The optional source_address parameter allows binding to some specific source address in a machine with multiple network interfaces, and/or to some specific source TCP port. It takes a 2-tuple (host, port), for the socket to bind to as its source address before connecting. If omitted (or if host or port are &lt;code&gt;''&lt;/code&gt; and/or 0 respectively) the OS default behavior will be used.</source>
          <target state="translated">&lt;a href=&quot;#smtplib.SMTP&quot;&gt; &lt;code&gt;SMTP&lt;/code&gt; 의&lt;/a&gt; 인스턴스는 SMTP 연결을 캡슐화합니다. SMTP 및 ESMTP 작업의 전체 레퍼토리를 지원하는 메소드가 있습니다. 선택적 호스트 및 포트 매개 변수가 제공되면 초기화 중에 해당 매개 변수와 함께 SMTP &lt;a href=&quot;#smtplib.SMTP.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; 메소드가 호출됩니다. 지정된 경우 &lt;em&gt;local_hostname&lt;/em&gt; 은 HELO / EHLO 명령에서 로컬 호스트의 FQDN으로 사용됩니다. 그렇지 않으면 &lt;a href=&quot;socket#socket.getfqdn&quot;&gt; &lt;code&gt;socket.getfqdn()&lt;/code&gt; &lt;/a&gt; 사용하여 로컬 호스트 이름을 찾습니다 . 상기 중간 &lt;a href=&quot;#smtplib.SMTP.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; 호출이 성공 코드 이외의 반환, &lt;a href=&quot;#smtplib.SMTPConnectError&quot;&gt; &lt;code&gt;SMTPConnectError&lt;/code&gt; 가&lt;/a&gt; 발생합니다. 선택적 &lt;em&gt;타임 아웃&lt;/em&gt;매개 변수는 연결 시도와 같은 작업을 차단하기위한 시간 초과를 초 단위로 지정합니다 (지정하지 않으면 전역 기본 시간 초과 설정이 사용됨). 시간 초과가 만료되면 &lt;a href=&quot;socket#socket.timeout&quot;&gt; &lt;code&gt;socket.timeout&lt;/code&gt; &lt;/a&gt; 이 발생합니다. 선택적 source_address 매개 변수를 사용하면 여러 네트워크 인터페이스가있는 머신의 특정 소스 주소 및 / 또는 특정 소스 TCP 포트에 바인딩 할 수 있습니다. 소켓이 연결하기 전에 소스 주소로 바인드하려면 2 튜플 (호스트, 포트)이 필요합니다. 생략하거나 호스트 또는 포트가 각각 &lt;code&gt;''&lt;/code&gt; 및 / 또는 0 인 경우 OS 기본 동작이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b06f296a09f34cbedecd22805400c41792ba65c6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; instance has the following methods:</source>
          <target state="translated">&lt;a href=&quot;#smtplib.SMTP&quot;&gt; &lt;code&gt;SMTP&lt;/code&gt; 의&lt;/a&gt; 인스턴스는 다음과 같은 방법이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="2c58fa6751490e6d0e0d24391a1319962ea6b856" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#smtplib.SMTP_SSL&quot;&gt;&lt;code&gt;SMTP_SSL&lt;/code&gt;&lt;/a&gt; instance behaves exactly the same as instances of &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#smtplib.SMTP_SSL&quot;&gt;&lt;code&gt;SMTP_SSL&lt;/code&gt;&lt;/a&gt; should be used for situations where SSL is required from the beginning of the connection and using &lt;code&gt;starttls()&lt;/code&gt; is not appropriate. If &lt;em&gt;host&lt;/em&gt; is not specified, the local host is used. If &lt;em&gt;port&lt;/em&gt; is zero, the standard SMTP-over-SSL port (465) is used. The optional arguments &lt;em&gt;local_hostname&lt;/em&gt;, &lt;em&gt;timeout&lt;/em&gt; and &lt;em&gt;source_address&lt;/em&gt; have the same meaning as they do in the &lt;a href=&quot;#smtplib.SMTP&quot;&gt;&lt;code&gt;SMTP&lt;/code&gt;&lt;/a&gt; class. &lt;em&gt;context&lt;/em&gt;, also optional, can contain a &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; and allows configuring various aspects of the secure connection. Please read &lt;a href=&quot;ssl#ssl-security&quot;&gt;Security considerations&lt;/a&gt; for best practices.</source>
          <target state="translated">&lt;a href=&quot;#smtplib.SMTP_SSL&quot;&gt; &lt;code&gt;SMTP_SSL&lt;/code&gt; 의&lt;/a&gt; 인스턴스는 정확하게의 경우와 동일하게 동작 &lt;a href=&quot;#smtplib.SMTP&quot;&gt; &lt;code&gt;SMTP&lt;/code&gt; &lt;/a&gt; . 연결 시작시 SSL이 필요하고 &lt;code&gt;starttls()&lt;/code&gt; 이 적합하지 않은 상황에서는 &lt;a href=&quot;#smtplib.SMTP_SSL&quot;&gt; &lt;code&gt;SMTP_SSL&lt;/code&gt; 을&lt;/a&gt; 사용해야합니다 . 경우 &lt;em&gt;호스트가&lt;/em&gt; 지정되지 않은 로컬 호스트가 사용됩니다. 경우 &lt;em&gt;포트가&lt;/em&gt; 제로의 표준 SMTP - 이상 - SSL 포트 (465)가 사용됩니다. 선택적 인수 &lt;em&gt;local_hostname&lt;/em&gt; , &lt;em&gt;timeout&lt;/em&gt; 및 &lt;em&gt;source_address&lt;/em&gt; 는 &lt;a href=&quot;#smtplib.SMTP&quot;&gt; &lt;code&gt;SMTP&lt;/code&gt; &lt;/a&gt; 클래스 에서와 동일한 의미를 갖습니다 . &lt;em&gt;context&lt;/em&gt; 도 옵션이며 &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; 를&lt;/a&gt; 포함 할 수 있습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;보안 연결의 다양한 측면을 구성 할 수 있습니다. 모범 사례는 &lt;a href=&quot;ssl#ssl-security&quot;&gt;보안 고려 사항&lt;/a&gt; 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="4381f9c58b5b614abf7892a4b1f45ba2f8360660" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt; is raised if the private key doesn&amp;rsquo;t match with the certificate.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; 는&lt;/a&gt; 개인 키가 인증서와 일치하지 않는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6503930af8cf259e4f55b3889f6a90017471de7a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; belongs to the application, the &lt;a href=&quot;#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; is not allowed to modify &lt;a href=&quot;#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; objects passed to it from the application, although it may make copies and modify those.</source>
          <target state="translated">&lt;a href=&quot;#xml.sax.xmlreader.InputSource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; 의는&lt;/a&gt; 1, 응용 프로그램에 속한 &lt;a href=&quot;#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; &lt;/a&gt; 수정할 수 없습니다 &lt;a href=&quot;#xml.sax.xmlreader.InputSource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; 의는&lt;/a&gt; 이 복사본을 만들어 사람들을 수정할 수 있지만, 응용 프로그램에서 전달 객체.</target>
        </trans-unit>
        <trans-unit id="79185203e0837e407c9cfffcf6c6215ce7683000" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; can be raised if either file cannot be accessed for some reason.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; 는&lt;/a&gt; 두 파일이 어떤 이유로 액세스 할 수없는 경우 제기 될 수있다.</target>
        </trans-unit>
        <trans-unit id="c390610582f1c814d75321837553c7075f775df3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised on syscall failure.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; 는&lt;/a&gt; 콜 실패에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6e45de73f5fdf516cc14c157c02fac73fbe32076" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised with the value of errno when the syscall returns -1.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; 은&lt;/a&gt; errno를 값 제기 될 때 콜 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cfafa94088c5bdf5d8dde31f6359f2a768fafdbe" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; will be raised for integer values that cannot be represented in (binary) plist files.</source>
          <target state="translated">&lt;a href=&quot;exceptions#OverflowError&quot;&gt; &lt;code&gt;OverflowError&lt;/code&gt; 은&lt;/a&gt; (진) PLIST 파일에 표시 할 수없는 정수 값을 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8902561dc3621643794d523ee377886fb9098907" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for classes that implement &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aenter__&quot;&gt;&lt;code&gt;object.__aenter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;object.__aexit__()&lt;/code&gt;&lt;/a&gt;. A default implementation for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aenter__&quot;&gt;&lt;code&gt;object.__aenter__()&lt;/code&gt;&lt;/a&gt; is provided which returns &lt;code&gt;self&lt;/code&gt; while &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;object.__aexit__()&lt;/code&gt;&lt;/a&gt; is an abstract method which by default returns &lt;code&gt;None&lt;/code&gt;. See also the definition of &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#async-context-managers&quot;&gt;Asynchronous Context Managers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aenter__&quot;&gt; &lt;code&gt;object.__aenter__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt; &lt;code&gt;object.__aexit__()&lt;/code&gt; &lt;/a&gt; 을 구현하는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;클래스&lt;/a&gt; 의 추상 기본 클래스 입니다 . &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aenter__&quot;&gt; &lt;code&gt;object.__aenter__()&lt;/code&gt; &lt;/a&gt; 의 기본 구현 은 &lt;code&gt;self&lt;/code&gt; 를 반환 하는 반면 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt; &lt;code&gt;object.__aexit__()&lt;/code&gt; &lt;/a&gt; 은 기본적으로 &lt;code&gt;None&lt;/code&gt; 을 반환하는 추상 메서드입니다 . &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#async-context-managers&quot;&gt;비동기 컨텍스트 관리자&lt;/a&gt; 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dda979d2a681c46df74b589ab265649e61f26e6c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for classes that implement &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;object.__enter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;object.__exit__()&lt;/code&gt;&lt;/a&gt;. A default implementation for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;object.__enter__()&lt;/code&gt;&lt;/a&gt; is provided which returns &lt;code&gt;self&lt;/code&gt; while &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;object.__exit__()&lt;/code&gt;&lt;/a&gt; is an abstract method which by default returns &lt;code&gt;None&lt;/code&gt;. See also the definition of &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;object.__enter__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;object.__exit__()&lt;/code&gt; &lt;/a&gt; 을 구현하는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;클래스&lt;/a&gt; 의 추상 기본 클래스 입니다 . &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;object.__enter__()&lt;/code&gt; &lt;/a&gt; 의 기본 구현 은 &lt;code&gt;self&lt;/code&gt; 를 반환 하는 반면, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;object.__exit__()&lt;/code&gt; &lt;/a&gt; 은 기본적으로 &lt;code&gt;None&lt;/code&gt; 을 반환하는 추상 메서드입니다 . &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;컨텍스트 관리자 유형&lt;/a&gt; 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9fdb63e9d860e12df6617deab601b29ae6ed82b3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for objects representing a file system path, e.g. &lt;a href=&quot;pathlib#pathlib.PurePath&quot;&gt;&lt;code&gt;pathlib.PurePath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일 시스템 경로를 나타내는 객체 의 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;추상 기본 클래스&lt;/a&gt; 입니다 (예 : &lt;a href=&quot;pathlib#pathlib.PurePath&quot;&gt; &lt;code&gt;pathlib.PurePath&lt;/code&gt; )&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="33ab1cf8909ceb57812b37b76ad04f8a117605e8" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; to provide the ability to read &lt;em&gt;resources&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;자원&lt;/em&gt; 을 읽을 수있는 기능을 제공 하는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-abstract-base-class&quot;&gt;추상 기본 클래스&lt;/a&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3659fcc10888c5f8705dd1f37cd33e48a2bd5bc6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt; for built-in modules. All known built-in modules are listed in &lt;a href=&quot;sys#sys.builtin_module_names&quot;&gt;&lt;code&gt;sys.builtin_module_names&lt;/code&gt;&lt;/a&gt;. This class implements the &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt;&lt;/a&gt; ABCs.</source>
          <target state="translated">내장 모듈 의 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;수입 업체&lt;/a&gt; . 알려진 모든 내장 모듈은 &lt;a href=&quot;sys#sys.builtin_module_names&quot;&gt; &lt;code&gt;sys.builtin_module_names&lt;/code&gt; 에&lt;/a&gt; 나열되어 있습니다 . 이 클래스는 &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt; &lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt; &lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt; &lt;/a&gt; ABC를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="d3c626fb55d328c4d6e0b42ec6745a070458977c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt; for frozen modules. This class implements the &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt;&lt;/a&gt; ABCs.</source>
          <target state="translated">고정 된 모듈 의 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;수입 업체&lt;/a&gt; . 이 클래스는 &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt; &lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt; &lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt; &lt;/a&gt; ABC를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="5ba830af2baa220c63058bd688a4c963ad3b97c2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#async-context-managers&quot;&gt;asynchronous context manager&lt;/a&gt;, similar to &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt;, that supports combining both synchronous and asynchronous context managers, as well as having coroutines for cleanup logic.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#async-context-managers&quot;&gt;비동기 콘텍스트 관리자&lt;/a&gt; 와 유사 &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; 지원 동기 및 비동기 콘텍스트 관리자뿐만 아니라 정리 로직 갖는 코 루틴 모두를 조합 한 것이다.</target>
        </trans-unit>
        <trans-unit id="a33f8c504da439806ad6f5c27e7d7aa8cddd8ff2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for classes that implement &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aenter__&quot;&gt;&lt;code&gt;object.__aenter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;object.__aexit__()&lt;/code&gt;&lt;/a&gt;. A default implementation for &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aenter__&quot;&gt;&lt;code&gt;object.__aenter__()&lt;/code&gt;&lt;/a&gt; is provided which returns &lt;code&gt;self&lt;/code&gt; while &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;object.__aexit__()&lt;/code&gt;&lt;/a&gt; is an abstract method which by default returns &lt;code&gt;None&lt;/code&gt;. See also the definition of &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#async-context-managers&quot;&gt;Asynchronous Context Managers&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aenter__&quot;&gt; &lt;code&gt;object.__aenter__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aexit__&quot;&gt; &lt;code&gt;object.__aexit__()&lt;/code&gt; &lt;/a&gt; 를 구현하는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;클래스&lt;/a&gt; 의 추상 기본 클래스 입니다 . 에 대한 기본 구현 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aenter__&quot;&gt; &lt;code&gt;object.__aenter__()&lt;/code&gt; &lt;/a&gt; 반환 제공되는 &lt;code&gt;self&lt;/code&gt; 하면서 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__aexit__&quot;&gt; &lt;code&gt;object.__aexit__()&lt;/code&gt; &lt;/a&gt; 추상 메소드 기본 반환하는 것입니다 &lt;code&gt;None&lt;/code&gt; . &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#async-context-managers&quot;&gt;비동기 컨텍스트 관리자&lt;/a&gt; 의 정의를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2cc7eac6c4b47b2315d64959d3cca85f620cb794" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for classes that implement &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;object.__enter__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;object.__exit__()&lt;/code&gt;&lt;/a&gt;. A default implementation for &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;object.__enter__()&lt;/code&gt;&lt;/a&gt; is provided which returns &lt;code&gt;self&lt;/code&gt; while &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;object.__exit__()&lt;/code&gt;&lt;/a&gt; is an abstract method which by default returns &lt;code&gt;None&lt;/code&gt;. See also the definition of &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager Types&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;object.__enter__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;object.__exit__()&lt;/code&gt; &lt;/a&gt; 를 구현하는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;클래스&lt;/a&gt; 의 추상 기본 클래스 입니다 . &lt;code&gt;self&lt;/code&gt; 를 반환하는 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;object.__enter__()&lt;/code&gt; &lt;/a&gt; 대한 기본 구현 이 제공 되며 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;object.__exit__()&lt;/code&gt; &lt;/a&gt; 는 기본적으로 &lt;code&gt;None&lt;/code&gt; 을 반환하는 추상 메서드입니다 . &lt;a href=&quot;stdtypes#typecontextmanager&quot;&gt;Context Manager 유형&lt;/a&gt; 정의도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2fa2efd6271fd8c9504c26e450ee4186fd02e58f" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; for objects representing a file system path, e.g. &lt;a href=&quot;pathlib#pathlib.PurePath&quot;&gt;&lt;code&gt;pathlib.PurePath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일 시스템 경로를 나타내는 객체에 대한 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;추상 기본 클래스&lt;/a&gt; , 예 : &lt;a href=&quot;pathlib#pathlib.PurePath&quot;&gt; &lt;code&gt;pathlib.PurePath&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="358e988e76edb92a04a829658d6e0b9e4671e17d" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;abstract base class&lt;/a&gt; to provide the ability to read &lt;em&gt;resources&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;리소스&lt;/em&gt; 를 읽을 수있는 기능을 제공 하는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-abstract-base-class&quot;&gt;추상 기본 클래스&lt;/a&gt; 입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="64448c03d49b3734a0c2bef8a552c0cddb79f909" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt; for built-in modules. All known built-in modules are listed in &lt;a href=&quot;sys#sys.builtin_module_names&quot;&gt;&lt;code&gt;sys.builtin_module_names&lt;/code&gt;&lt;/a&gt;. This class implements the &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt;&lt;/a&gt; ABCs.</source>
          <target state="translated">내장 모듈 의 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;임포터&lt;/a&gt; 입니다. 알려진 모든 내장 모듈은 &lt;a href=&quot;sys#sys.builtin_module_names&quot;&gt; &lt;code&gt;sys.builtin_module_names&lt;/code&gt; 에&lt;/a&gt; 나열됩니다 . 이 클래스는 &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt; &lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt; &lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt; &lt;/a&gt; ABC를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="b140912525c1a36c9a7a36ad6e3498b34061acd3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt; for frozen modules. This class implements the &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt;&lt;/a&gt; ABCs.</source>
          <target state="translated">고정 된 모듈 의 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;임포터&lt;/a&gt; 입니다. 이 클래스는 &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt; &lt;code&gt;importlib.abc.MetaPathFinder&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt; &lt;code&gt;importlib.abc.InspectLoader&lt;/code&gt; &lt;/a&gt; ABC를 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="46c37a084fd05a1723cae4dcbce9bafda6d05463" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#async-context-managers&quot;&gt;asynchronous context manager&lt;/a&gt;, similar to &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt;, that supports combining both synchronous and asynchronous context managers, as well as having coroutines for cleanup logic.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#async-context-managers&quot;&gt;비동기 콘텍스트 관리자&lt;/a&gt; 와 유사 &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; 지원 동기 및 비동기 콘텍스트 관리자뿐만 아니라 정리 로직 갖는 코 루틴 모두를 조합 한 것이다.</target>
        </trans-unit>
        <trans-unit id="4b1e4da468b2701c8321a708c9ecb7fa13e7e244" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;LRU (least recently used) cache&lt;/a&gt; works best when the most recent calls are the best predictors of upcoming calls (for example, the most popular articles on a news server tend to change each day). The cache&amp;rsquo;s size limit assures that the cache does not grow without bound on long-running processes such as web servers.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_algorithms#Examples&quot;&gt;(적어도 최근에 사용한) LRU 캐시는&lt;/a&gt; 가장 최근의 호출이 곧 전화의 가장 좋은 예측 인자가있을 때 가장 잘 작동합니다 (예를 들어, 뉴스 서버에서 가장 인기있는 기사는 매일 변경하는 경향이있다). 캐시의 크기 제한은 웹 서버와 같은 장기 실행 프로세스에 제한없이 캐시가 커지지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="0cbb6b0513c86e9d2a7dcccebb18fe2a4dff0ec6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)&quot;&gt;LRU (least recently used) cache&lt;/a&gt; works best when the most recent calls are the best predictors of upcoming calls (for example, the most popular articles on a news server tend to change each day). The cache&amp;rsquo;s size limit assures that the cache does not grow without bound on long-running processes such as web servers.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)&quot;&gt;(적어도 최근에 사용한) LRU 캐시는&lt;/a&gt; 가장 최근의 호출이 곧 전화의 가장 좋은 예측 인자가있을 때 가장 잘 작동합니다 (예를 들어, 뉴스 서버에서 가장 인기있는 기사는 매일 변경하는 경향이있다). 캐시의 크기 제한은 웹 서버와 같은 장기 실행 프로세스에 제한없이 캐시가 커지지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="3761bc9891cb807e2bd71dcdb229acbbbd262ea3" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;io#io.BufferedIOBase&quot;&gt;&lt;code&gt;io.BufferedIOBase&lt;/code&gt;&lt;/a&gt; input stream, ready to read from the start of the optional input data.</source>
          <target state="translated">선택적 입력 데이터의 시작부터 읽을 준비가 된 &lt;a href=&quot;io#io.BufferedIOBase&quot;&gt; &lt;code&gt;io.BufferedIOBase&lt;/code&gt; &lt;/a&gt; 입력 스트림.</target>
        </trans-unit>
        <trans-unit id="134b8c5f8672fe5893203afb4343e752db19a0c9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;'AF_INET'&lt;/code&gt; address is a tuple of the form &lt;code&gt;(hostname, port)&lt;/code&gt; where &lt;em&gt;hostname&lt;/em&gt; is a string and &lt;em&gt;port&lt;/em&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;'AF_INET'&lt;/code&gt; 주소 형태의 튜플 &lt;code&gt;(hostname, port)&lt;/code&gt; &lt;em&gt;호스트는&lt;/em&gt; 문자열이며 &lt;em&gt;포트&lt;/em&gt; 정수이다.</target>
        </trans-unit>
        <trans-unit id="728c7bfe4ba1acdb2c72fa346ca49007566679c3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;'AF_UNIX'&lt;/code&gt; address is a string representing a filename on the filesystem.</source>
          <target state="translated">&lt;code&gt;'AF_UNIX'&lt;/code&gt; 주소는 파일 시스템에서 파일 이름을 나타내는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="279c56929f7657d41eb016d797accbea5fc43126" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HTTPError&lt;/code&gt; exception raised as a security consideration if the HTTPRedirectHandler is presented with a redirected URL which is not an HTTP, HTTPS or FTP URL.</source>
          <target state="translated">&lt;code&gt;HTTPError&lt;/code&gt; 의 보안 고려 사항으로 제기 예외는 HTTPRedirectHandler 경우 HTTP, HTTPS 또는 FTP URL이 아닌 리디렉션 된 URL로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="33219ca499b092a52f7abbdd6ce7f57c5fcff6f7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;async def&lt;/code&gt; function definition. Has the same fields as &lt;a href=&quot;#ast.FunctionDef&quot;&gt;&lt;code&gt;FunctionDef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;async def&lt;/code&gt; 함수 정의. &lt;a href=&quot;#ast.FunctionDef&quot;&gt; &lt;code&gt;FunctionDef&lt;/code&gt; &lt;/a&gt; 와 동일한 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e15d34d18efcaf549913dce3621961594f1b7ca" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;await&lt;/code&gt; expression. &lt;code&gt;value&lt;/code&gt; is what it waits for. Only valid in the body of an &lt;a href=&quot;#ast.AsyncFunctionDef&quot;&gt;&lt;code&gt;AsyncFunctionDef&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;await&lt;/code&gt; 를 식입니다. &lt;code&gt;value&lt;/code&gt; 는 그것이 기다리는 것입니다. &lt;a href=&quot;#ast.AsyncFunctionDef&quot;&gt; &lt;code&gt;AsyncFunctionDef&lt;/code&gt; &lt;/a&gt; 의 본문에서만 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="fb3fcacb835ee81a42ed8d1456cd79b0226a380e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;http.client.HTTPMessage&lt;/code&gt; instance holds the headers from an HTTP response. It is implemented using the &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;http.client.HTTPMessage&lt;/code&gt; 의 인스턴스는 HTTP 응답의 헤더를 보유하고 있습니다. &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; &lt;/a&gt; 클래스를 사용하여 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="3f556ab229a8f8a3a47ed35d148d0d0e441a49a6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;if&lt;/code&gt; statement. &lt;code&gt;test&lt;/code&gt; holds a single node, such as a &lt;a href=&quot;#ast.Compare&quot;&gt;&lt;code&gt;Compare&lt;/code&gt;&lt;/a&gt; node. &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;orelse&lt;/code&gt; each hold a list of nodes.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 문. &lt;code&gt;test&lt;/code&gt; 는 &lt;a href=&quot;#ast.Compare&quot;&gt; &lt;code&gt;Compare&lt;/code&gt; &lt;/a&gt; 노드 와 같은 단일 노드를 보유 합니다. &lt;code&gt;body&lt;/code&gt; 와 &lt;code&gt;orelse&lt;/code&gt; 는 각각 노드 목록을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="e64e19d30a6b038f871b1a0ba266542e0cf44731" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__abs__&lt;/code&gt; that is covariant in its return type.</source>
          <target state="translated">리턴 유형이 공변 인 인 하나의 추상 메소드 &lt;code&gt;__abs__&lt;/code&gt; 를 가진 ABC .</target>
        </trans-unit>
        <trans-unit id="d1781ec94a5b61e39438eca65acc12f99677f117" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__bytes__&lt;/code&gt;.</source>
          <target state="translated">하나의 추상 메소드를 가진 ABC &lt;code&gt;__bytes__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b0fc1ecd30f8b9047835f4fbca4de0c1a7114ddd" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__complex__&lt;/code&gt;.</source>
          <target state="translated">하나의 추상 메소드를 가진 ABC &lt;code&gt;__complex__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0cc0d8a21ea5d1cfd983b9cd9cc3577a029a5d40" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__float__&lt;/code&gt;.</source>
          <target state="translated">하나의 추상 메소드를 가진 ABC &lt;code&gt;__float__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5a96e7a759cdcee0e8a671529f6684f0284b3c73" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__index__&lt;/code&gt;.</source>
          <target state="translated">하나의 추상 메소드를 가진 ABC &lt;code&gt;__index__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79db425b6df47a0eb8f4b913a4b8f04661c96e98" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__int__&lt;/code&gt;.</source>
          <target state="translated">하나의 추상 메소드를 가진 ABC &lt;code&gt;__int__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="15ea43b80301cadc8e24d4d28cf8330de4a4c022" translate="yes" xml:space="preserve">
          <source>An ABC with one abstract method &lt;code&gt;__round__&lt;/code&gt; that is covariant in its return type.</source>
          <target state="translated">리턴 유형이 공변 인 추상 메소드 &lt;code&gt;__round__&lt;/code&gt; 가 있는 ABC입니다 .</target>
        </trans-unit>
        <trans-unit id="d47c45aeccb0981a58aa461b9dad821d712d95bc" translate="yes" xml:space="preserve">
          <source>An Event object manages an internal flag that can be set to &lt;em&gt;true&lt;/em&gt; with the &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; method and reset to &lt;em&gt;false&lt;/em&gt; with the &lt;a href=&quot;#asyncio.Event.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;asyncio-task#asyncio.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; method blocks until the flag is set to &lt;em&gt;true&lt;/em&gt;. The flag is set to &lt;em&gt;false&lt;/em&gt; initially.</source>
          <target state="translated">Event 객체는 &lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt; 메서드 로 &lt;em&gt;true&lt;/em&gt; 로 설정 하고 &lt;a href=&quot;#asyncio.Event.clear&quot;&gt; &lt;code&gt;clear()&lt;/code&gt; &lt;/a&gt; 메서드 로 &lt;em&gt;false&lt;/em&gt; 로 재설정 할 수있는 내부 플래그를 관리합니다 . &lt;a href=&quot;asyncio-task#asyncio.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt; 플래그까지 방법을 블록으로 설정되어 &lt;em&gt;사실&lt;/em&gt; . 플래그는 처음 에 &lt;em&gt;false&lt;/em&gt; 로 설정됩니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="33c1328176988806c7acc0aff05cc07892efc2ee" translate="yes" xml:space="preserve">
          <source>An HMAC object has the following methods:</source>
          <target state="translated">HMAC 객체에는 다음과 같은 메서드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="96ce959eac9c1efc4346b40a6c2b0fcdb09eb53b" translate="yes" xml:space="preserve">
          <source>An HTTP Extension Framework &lt;a href=&quot;https://tools.ietf.org/html/rfc2774.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2774&lt;/strong&gt;&lt;/a&gt;, Section 7 (Experimental)</source>
          <target state="translated">HTTP 확장 프레임 워크 &lt;a href=&quot;https://tools.ietf.org/html/rfc2774.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2774&lt;/strong&gt;&lt;/a&gt; , 섹션 7 (실험적)</target>
        </trans-unit>
        <trans-unit id="db46c1af527bc8802a0694ac6abd0bc630b63030" translate="yes" xml:space="preserve">
          <source>An HTTP Extension Framework &lt;a href=&quot;https://tools.ietf.org/html/rfc2774.html&quot; id=&quot;index-61&quot;&gt;&lt;strong&gt;RFC 2774&lt;/strong&gt;&lt;/a&gt;, Section 7 (Experimental)</source>
          <target state="translated">HTTP 확장 프레임 워크 &lt;a href=&quot;https://tools.ietf.org/html/rfc2774.html&quot; id=&quot;index-61&quot;&gt;&lt;strong&gt;RFC 2774&lt;/strong&gt;&lt;/a&gt; , 섹션 7 (실험용)</target>
        </trans-unit>
        <trans-unit id="2501160a58b3e46f799c91de6330ed1424f8f7c4" translate="yes" xml:space="preserve">
          <source>An HTTP Status Code for Indicating Hints &lt;a href=&quot;https://tools.ietf.org/html/rfc8297.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 8297&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">힌트를 나타내는 HTTP 상태 코드 &lt;a href=&quot;https://tools.ietf.org/html/rfc8297.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 8297&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="586cd579fe48ea0181edb6aee914365f538aa9a9" translate="yes" xml:space="preserve">
          <source>An HTTP Status Code to Report Legal Obstacles &lt;a href=&quot;https://tools.ietf.org/html/rfc7725.html&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;RFC 7725&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">법적 장애 &lt;a href=&quot;https://tools.ietf.org/html/rfc7725.html&quot; id=&quot;index-48&quot;&gt;&lt;strong&gt;RFC 7725&lt;/strong&gt;&lt;/a&gt; 를보고하기위한 HTTP 상태 코드&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b53d4a75ae59ffea5b1a33aa114bbecf5009f795" translate="yes" xml:space="preserve">
          <source>An HTTP Status Code to Report Legal Obstacles &lt;a href=&quot;https://tools.ietf.org/html/rfc7725.html&quot; id=&quot;index-51&quot;&gt;&lt;strong&gt;RFC 7725&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">법적 장애물을보고하는 HTTP 상태 코드 &lt;a href=&quot;https://tools.ietf.org/html/rfc7725.html&quot; id=&quot;index-51&quot;&gt;&lt;strong&gt;RFC 7725&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="950ad3d1cdc9b45ddd459fc6e7dc06daf0425f0b" translate="yes" xml:space="preserve">
          <source>An HTTP status code as defined in &lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2616&lt;/strong&gt;&lt;/a&gt;. This numeric value corresponds to a value found in the dictionary of codes as found in &lt;a href=&quot;http.server#http.server.BaseHTTPRequestHandler.responses&quot;&gt;&lt;code&gt;http.server.BaseHTTPRequestHandler.responses&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2616.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2616에&lt;/strong&gt;&lt;/a&gt; 정의 된 HTTP 상태 코드 입니다. 이 숫자 값은 &lt;a href=&quot;http.server#http.server.BaseHTTPRequestHandler.responses&quot;&gt; &lt;code&gt;http.server.BaseHTTPRequestHandler.responses&lt;/code&gt; &lt;/a&gt; 에있는 코드 사전에서 찾은 값에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="0fd6615738f7a41f38401d20b6960d63cc413cb5" translate="yes" xml:space="preserve">
          <source>An SSL context holds various data longer-lived than single SSL connections, such as SSL configuration options, certificate(s) and private key(s). It also manages a cache of SSL sessions for server-side sockets, in order to speed up repeated connections from the same clients.</source>
          <target state="translated">SSL 컨텍스트는 SSL 구성 옵션, 인증서 및 개인 키와 같은 단일 SSL 연결보다 수명이 긴 다양한 데이터를 보유합니다. 또한 동일한 클라이언트의 반복 연결 속도를 높이기 위해 서버 측 소켓에 대한 SSL 세션 캐시를 관리합니다.</target>
        </trans-unit>
        <trans-unit id="76cf9150b9af7f68ed4e620f15b7b416606b07f7" translate="yes" xml:space="preserve">
          <source>An SSLObject communicates with the outside world using memory buffers. The class &lt;a href=&quot;#ssl.MemoryBIO&quot;&gt;&lt;code&gt;MemoryBIO&lt;/code&gt;&lt;/a&gt; provides a memory buffer that can be used for this purpose. It wraps an OpenSSL memory BIO (Basic IO) object:</source>
          <target state="translated">SSLObject는 메모리 버퍼를 사용하여 외부와 통신합니다. &lt;a href=&quot;#ssl.MemoryBIO&quot;&gt; &lt;code&gt;MemoryBIO&lt;/code&gt; &lt;/a&gt; 클래스 는이 용도로 사용할 수있는 메모리 버퍼를 제공합니다. OpenSSL 메모리 BIO (기본 IO) 오브젝트를 랩핑합니다.</target>
        </trans-unit>
        <trans-unit id="a466897649a3d651921f5fa00e86176f05ce65c2" translate="yes" xml:space="preserve">
          <source>An XML declaration was found somewhere other than the start of the input data.</source>
          <target state="translated">입력 데이터의 시작 이외의 XML 선언이 발견되었습니다.</target>
        </trans-unit>
        <trans-unit id="2f6e529d041ed7501f54f3d2eb8b240dc32017aa" translate="yes" xml:space="preserve">
          <source>An abbreviation for &amp;ldquo;derive window&amp;rdquo;, &lt;a href=&quot;#curses.window.derwin&quot;&gt;&lt;code&gt;derwin()&lt;/code&gt;&lt;/a&gt; is the same as calling &lt;a href=&quot;#curses.window.subwin&quot;&gt;&lt;code&gt;subwin()&lt;/code&gt;&lt;/a&gt;, except that &lt;em&gt;begin_y&lt;/em&gt; and &lt;em&gt;begin_x&lt;/em&gt; are relative to the origin of the window, rather than relative to the entire screen. Return a window object for the derived window.</source>
          <target state="translated">&amp;ldquo;derive window&amp;rdquo;의 약자 인 &lt;a href=&quot;#curses.window.derwin&quot;&gt; &lt;code&gt;derwin()&lt;/code&gt; &lt;/a&gt; 은 &lt;em&gt;begin_y&lt;/em&gt; 및 &lt;em&gt;begin_x&lt;/em&gt; 가 전체 화면이 아니라 창의 원점에 상대적 이라는 점을 제외하고 &lt;a href=&quot;#curses.window.subwin&quot;&gt; &lt;code&gt;subwin()&lt;/code&gt; &lt;/a&gt; 호출과 동일 합니다. 파생 된 창의 창 개체를 반환합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e10c1add34316ae69c55a9723388948395613133" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which implements the optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol for loading arbitrary resources from the storage back-end.</source>
          <target state="translated">스토리지 백엔드에서 임의의 리소스를로드하기위한 선택적 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 프로토콜을 구현 하는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 의 추상 기본 클래스입니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c00c78ac6821af3449c4a38de1c0d33c74f95d2" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which implements the optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol for loaders that inspect modules.</source>
          <target state="translated">모듈을 검사 하는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 를위한 선택적 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 프로토콜을 구현 하는 로더 의 추상 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="940dc0b3afc6e45c33bbd105502b6ee876696cec" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; for the exact definition for a loader.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 의 추상 기본 클래스입니다 . 로더에 대한 정확한 정의는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7401f395dccd11d677211d9563b9e95eb89ebab5" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which implements the optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol for loading arbitrary resources from the storage back-end.</source>
          <target state="translated">스토리지 백엔드에서 임의의 리소스를로드하기위한 선택적 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 프로토콜을 구현 하는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 의 추상 기본 클래스입니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2d0db0a7b142974ca4ce772e7260ab0b495fe83a" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; which implements the optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol for loaders that inspect modules.</source>
          <target state="translated">모듈을 검사 하는 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 를위한 선택적 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 프로토콜을 구현 하는 로더 의 추상 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="90e97f3876374a37e56d4245e3852f67bf0f985f" translate="yes" xml:space="preserve">
          <source>An abstract base class for a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; for the exact definition for a loader.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;로더에&lt;/a&gt; 대한 추상 기본 클래스 . 로더에 대한 정확한 정의는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0db9b27bf89080da856677605e14657460be5647" translate="yes" xml:space="preserve">
          <source>An abstract base class for asyncio policies.</source>
          <target state="translated">비동기 정책에 대한 추상 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="b462ad15f20b8da0d5b31b0986af332c0c7b0e96" translate="yes" xml:space="preserve">
          <source>An abstract base class for implementing source (and optionally bytecode) file loading. The class inherits from both &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt;&lt;code&gt;ExecutionLoader&lt;/code&gt;&lt;/a&gt;, requiring the implementation of:</source>
          <target state="translated">소스 (및 선택적으로 바이트 코드) 파일로드를 구현하기위한 추상 기본 클래스입니다. 이 클래스는 &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt; &lt;code&gt;ResourceLoader&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt; &lt;code&gt;ExecutionLoader&lt;/code&gt; &lt;/a&gt; 모두에서 상속되며 다음을 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="c0dc52b90a16c5199a8601d18484021f8b780efd" translate="yes" xml:space="preserve">
          <source>An abstract base class for resource readers capable of serving the &lt;code&gt;files&lt;/code&gt; interface. Subclasses ResourceReader and provides concrete implementations of the ResourceReader&amp;rsquo;s abstract methods. Therefore, any loader supplying TraversableReader also supplies ResourceReader.</source>
          <target state="translated">&lt;code&gt;files&lt;/code&gt; 인터페이스 를 제공 할 수있는 리소스 판독기를위한 추상 기본 클래스입니다 . ResourceReader를 하위 클래스로 만들고 ResourceReader의 추상 메서드를 구체적으로 구현합니다. 따라서 TraversableReader를 제공하는 모든 로더는 ResourceReader도 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2021dfdbcfaef781d0d06f712def8d7955c0628e" translate="yes" xml:space="preserve">
          <source>An abstract base class for time zone information objects. These are used by the &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; classes to provide a customizable notion of time adjustment (for example, to account for time zone and/or daylight saving time).</source>
          <target state="translated">시간대 정보 객체에 대한 추상 기본 클래스입니다. 이들은 &lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt; 클래스에서 사용자 정의 가능한 시간 조정 개념을 제공하기 위해 사용됩니다 (예 : 시간대 및 / 또는 일광 절약 시간을 고려하기 위해).</target>
        </trans-unit>
        <trans-unit id="41c1eeca19930aa837c9177b8ebdce0b081bc67f" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;파인더를&lt;/a&gt; 나타내는 추상 기본 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="cfd3e5d07b9f0593a253ce92bd9938e6c4961954" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt;. For compatibility, this is a subclass of &lt;a href=&quot;#importlib.abc.Finder&quot;&gt;&lt;code&gt;Finder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;메타 패스 파인더를&lt;/a&gt; 나타내는 추상 기본 클래스 입니다. 호환성을 위해 이것은 &lt;a href=&quot;#importlib.abc.Finder&quot;&gt; &lt;code&gt;Finder&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="a589cb6dfdfee9aae19397d6a303891c9da74964" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. Though it bears some similarities to &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;MetaPathFinder&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;PathEntryFinder&lt;/code&gt; is meant for use only within the path-based import subsystem provided by &lt;code&gt;PathFinder&lt;/code&gt;. This ABC is a subclass of &lt;a href=&quot;#importlib.abc.Finder&quot;&gt;&lt;code&gt;Finder&lt;/code&gt;&lt;/a&gt; for compatibility reasons only.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;경로 엔트리 파인더를&lt;/a&gt; 나타내는 추상 기본 클래스 입니다. &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt; &lt;code&gt;MetaPathFinder&lt;/code&gt; &lt;/a&gt; 와 약간 유사하지만 &lt;code&gt;PathEntryFinder&lt;/code&gt; 는 &lt;code&gt;PathFinder&lt;/code&gt; 가 제공하는 경로 기반 가져 오기 서브 시스템 내에서만 사용하도록되어 있습니다 . 이 ABC는 호환성을 위해서만 &lt;a href=&quot;#importlib.abc.Finder&quot;&gt; &lt;code&gt;Finder&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="41486f4a3356c2fa47f9cd992060772ba5c1e998" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-finder&quot;&gt;파인더를&lt;/a&gt; 나타내는 추상베이스 클래스 .</target>
        </trans-unit>
        <trans-unit id="b6e7d3d824aac467d8e2c0c2433ae146ca49b9e6" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt;. For compatibility, this is a subclass of &lt;a href=&quot;#importlib.abc.Finder&quot;&gt;&lt;code&gt;Finder&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;메타 경로 찾기를&lt;/a&gt; 나타내는 추상 기본 클래스 . 호환성을 위해 이것은 &lt;a href=&quot;#importlib.abc.Finder&quot;&gt; &lt;code&gt;Finder&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="a07e60929ea850cec3390065ad4623c92cfcfcb9" translate="yes" xml:space="preserve">
          <source>An abstract base class representing a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. Though it bears some similarities to &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt;&lt;code&gt;MetaPathFinder&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;PathEntryFinder&lt;/code&gt; is meant for use only within the path-based import subsystem provided by &lt;code&gt;PathFinder&lt;/code&gt;. This ABC is a subclass of &lt;a href=&quot;#importlib.abc.Finder&quot;&gt;&lt;code&gt;Finder&lt;/code&gt;&lt;/a&gt; for compatibility reasons only.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry-finder&quot;&gt;경로 항목 찾기를&lt;/a&gt; 나타내는 추상 기본 클래스 . &lt;a href=&quot;#importlib.abc.MetaPathFinder&quot;&gt; &lt;code&gt;MetaPathFinder&lt;/code&gt; &lt;/a&gt; 와 몇 가지 유사점을 가지고 있지만 &lt;code&gt;PathEntryFinder&lt;/code&gt; 는 &lt;code&gt;PathFinder&lt;/code&gt; 에서 제공하는 경로 기반 가져 오기 하위 시스템 내에서만 사용하기위한 것 입니다. 이 ABC는 호환성을 위해서만 &lt;a href=&quot;#importlib.abc.Finder&quot;&gt; &lt;code&gt;Finder&lt;/code&gt; &lt;/a&gt; 의 하위 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="8a9af4121f78134bb685216fbf44bd4f5d826951" translate="yes" xml:space="preserve">
          <source>An abstract base class which inherits from &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt;&lt;code&gt;InspectLoader&lt;/code&gt;&lt;/a&gt; that, when implemented, helps a module to be executed as a script. The ABC represents an optional &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">구현시 모듈이 스크립트로 실행되도록 도와주는 &lt;a href=&quot;#importlib.abc.InspectLoader&quot;&gt; &lt;code&gt;InspectLoader&lt;/code&gt; &lt;/a&gt; 에서 상속되는 추상 기본 클래스입니다 . ABC는 선택적인 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt; 프로토콜을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="11de885f0ab5a2d6a8da413f025f1f42a92914a8" translate="yes" xml:space="preserve">
          <source>An abstract base class which inherits from &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt;&lt;code&gt;ResourceLoader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt;&lt;code&gt;ExecutionLoader&lt;/code&gt;&lt;/a&gt;, providing concrete implementations of &lt;a href=&quot;#importlib.abc.ResourceLoader.get_data&quot;&gt;&lt;code&gt;ResourceLoader.get_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#importlib.abc.ExecutionLoader.get_filename&quot;&gt;&lt;code&gt;ExecutionLoader.get_filename()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.abc.ResourceLoader.get_data&quot;&gt; &lt;code&gt;ResourceLoader.get_data()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.ExecutionLoader.get_filename&quot;&gt; &lt;code&gt;ExecutionLoader.get_filename()&lt;/code&gt; &lt;/a&gt; 의 구체적인 구현을 제공하는 &lt;a href=&quot;#importlib.abc.ResourceLoader&quot;&gt; &lt;code&gt;ResourceLoader&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#importlib.abc.ExecutionLoader&quot;&gt; &lt;code&gt;ExecutionLoader&lt;/code&gt; &lt;/a&gt; 에서 상속되는 추상 기본 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="955770255554b096c2a2d0d00989cc8cb2114744" translate="yes" xml:space="preserve">
          <source>An abstract class that provides methods to execute calls asynchronously. It should not be used directly, but through its concrete subclasses.</source>
          <target state="translated">비동기 적으로 호출을 실행하는 메소드를 제공하는 추상 클래스입니다. 직접 사용하지 말고 구체적인 하위 클래스를 통해 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="f134861215475c0febc28a88cff9f900d434fd5d" translate="yes" xml:space="preserve">
          <source>An abstract example would be the following to ensure correct resource management:</source>
          <target state="translated">올바른 자원 관리를 보장하기위한 추상 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7c833ccaac11f4d73ed6358d2404695fb39851cf" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for the specified module. Originally specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;, this method was meant for use in &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; and in the path-based import subsystem.</source>
          <target state="translated">지정된 모듈 의 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 를 찾는 추상적 인 방법입니다 . 원래 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302에&lt;/strong&gt;&lt;/a&gt; 지정된 이 방법은 &lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt; 및 경로 기반 가져 오기 하위 시스템에서 사용하기위한 것입니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
