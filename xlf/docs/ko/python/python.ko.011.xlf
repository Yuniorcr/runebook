<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="e4f0aa55fc4b479afdf7140c48cf1e3100de7ab9" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt; address family, a four-tuple &lt;code&gt;(host, port, flowinfo,
scope_id)&lt;/code&gt; is used, where &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scope_id&lt;/em&gt; represent the &lt;code&gt;sin6_flowinfo&lt;/code&gt; and &lt;code&gt;sin6_scope_id&lt;/code&gt; members in &lt;code&gt;struct sockaddr_in6&lt;/code&gt; in C. For &lt;a href=&quot;#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; module methods, &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scope_id&lt;/em&gt; can be omitted just for backward compatibility. Note, however, omission of &lt;em&gt;scope_id&lt;/em&gt; can cause problems in manipulating scoped IPv6 addresses.</source>
          <target state="translated">For &lt;a href=&quot;#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; &lt;/a&gt; address family, a four-tuple &lt;code&gt;(host, port, flowinfo, scope_id)&lt;/code&gt; is used, where &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scope_id&lt;/em&gt; represent the &lt;code&gt;sin6_flowinfo&lt;/code&gt; and &lt;code&gt;sin6_scope_id&lt;/code&gt; members in &lt;code&gt;struct sockaddr_in6&lt;/code&gt; in C. For &lt;a href=&quot;#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt; module methods, &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scope_id&lt;/em&gt; can be omitted just for backward compatibility. Note, however, omission of &lt;em&gt;scope_id&lt;/em&gt; can cause problems in manipulating scoped IPv6 addresses.</target>
        </trans-unit>
        <trans-unit id="746248eefab63f81cdbec88cd9be8cc5d5b23761" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt; address family, a four-tuple &lt;code&gt;(host, port, flowinfo,
scopeid)&lt;/code&gt; is used, where &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scopeid&lt;/em&gt; represent the &lt;code&gt;sin6_flowinfo&lt;/code&gt; and &lt;code&gt;sin6_scope_id&lt;/code&gt; members in &lt;code&gt;struct sockaddr_in6&lt;/code&gt; in C. For &lt;a href=&quot;#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; module methods, &lt;em&gt;flowinfo&lt;/em&gt; and &lt;em&gt;scopeid&lt;/em&gt; can be omitted just for backward compatibility. Note, however, omission of &lt;em&gt;scopeid&lt;/em&gt; can cause problems in manipulating scoped IPv6 addresses.</source>
          <target state="translated">들면 &lt;a href=&quot;#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; 의&lt;/a&gt; 어드레스 가족 네 튜플 &lt;code&gt;(host, port, flowinfo, scopeid)&lt;/code&gt; 사용되며, 여기서 &lt;em&gt;flowinfo을&lt;/em&gt; 하고 &lt;em&gt;경우 ScopeId&lt;/em&gt; 나타내는 &lt;code&gt;sin6_flowinfo&lt;/code&gt; 및 &lt;code&gt;sin6_scope_id&lt;/code&gt; 의 부재 &lt;code&gt;struct sockaddr_in6&lt;/code&gt; 들어 C.에서 &lt;a href=&quot;#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt; 모듈 방법 &lt;em&gt;flowinfo&lt;/em&gt; 및 &lt;em&gt;경우 ScopeId는&lt;/em&gt; 단지 생략 될 수있다 하위 호환성. 그러나 &lt;em&gt;scopeid를&lt;/em&gt; 생략 하면 범위가 지정된 IPv6 주소를 조작 할 때 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9da99637d2b1c64e4ed1882a40516fbe0a31c50" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#sqlite3.Cursor.executemany&quot;&gt;&lt;code&gt;executemany()&lt;/code&gt;&lt;/a&gt; statements, the number of modifications are summed up into &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt;&lt;code&gt;rowcount&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">들면 &lt;a href=&quot;#sqlite3.Cursor.executemany&quot;&gt; &lt;code&gt;executemany()&lt;/code&gt; &lt;/a&gt; 문, 변형의 개수로 표현되는 &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt; &lt;code&gt;rowcount&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="044a69c03975985c860eaab5b4db37d8f0049429" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#tarfile.PAX_FORMAT&quot;&gt;&lt;code&gt;PAX_FORMAT&lt;/code&gt;&lt;/a&gt; archives (the default), &lt;em&gt;encoding&lt;/em&gt; is generally not needed because all the metadata is stored using &lt;em&gt;UTF-8&lt;/em&gt;. &lt;em&gt;encoding&lt;/em&gt; is only used in the rare cases when binary pax headers are decoded or when strings with surrogate characters are stored.</source>
          <target state="translated">들면 &lt;a href=&quot;#tarfile.PAX_FORMAT&quot;&gt; &lt;code&gt;PAX_FORMAT&lt;/code&gt; 의&lt;/a&gt; 아카이브 (기본), &lt;em&gt;인코딩은&lt;/em&gt; 모든 메타 데이터를 이용하여 저장되기 때문에, 일반적으로 필요하지 않다 &lt;em&gt;UTF-8&lt;/em&gt; . &lt;em&gt;인코딩&lt;/em&gt; 은 이진 pax 헤더가 디코딩되거나 서로 게이트 문자가있는 문자열이 저장되는 경우에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c741a7a338bdc3db896807bbb8de8af96ed97b6e" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; instances, this will always be an instance of &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt;; subclasses of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; should override this as necessary.</source>
          <target state="translated">대한 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 경우, 이것은 항상의 인스턴스가 될 것입니다 &lt;a href=&quot;#unittest.TestResult&quot;&gt; &lt;code&gt;TestResult&lt;/code&gt; &lt;/a&gt; ; &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; 의&lt;/a&gt; 서브 클래스는 필요에 따라 이것을 오버라이드해야합니다.</target>
        </trans-unit>
        <trans-unit id="96b39f0e4ba7d9beef69677abc38d33b84b3af65" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#urllib.parse.urldefrag&quot;&gt;&lt;code&gt;urldefrag()&lt;/code&gt;&lt;/a&gt; results, only empty fragment identifiers will be removed. For &lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt;&lt;code&gt;urlsplit()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.urlparse&quot;&gt;&lt;code&gt;urlparse()&lt;/code&gt;&lt;/a&gt; results, all noted changes will be made to the URL returned by this method.</source>
          <target state="translated">들면 &lt;a href=&quot;#urllib.parse.urldefrag&quot;&gt; &lt;code&gt;urldefrag()&lt;/code&gt; &lt;/a&gt; 결과 만 빈 단편 식별자를 제거한다. 들어 &lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt; &lt;code&gt;urlsplit()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#urllib.parse.urlparse&quot;&gt; &lt;code&gt;urlparse()&lt;/code&gt; &lt;/a&gt; 결과, 모든 기록 변경은이 방법에 의해 반환되는 URL로 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="52c94526432badb979362f78eb056d0acef67e5b" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt;&lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt;&lt;/a&gt; objects, the realm &lt;code&gt;None&lt;/code&gt; will be searched if the given &lt;em&gt;realm&lt;/em&gt; has no matching user/password.</source>
          <target state="translated">들어 &lt;a href=&quot;#urllib.request.HTTPPasswordMgrWithDefaultRealm&quot;&gt; &lt;code&gt;HTTPPasswordMgrWithDefaultRealm&lt;/code&gt; 이&lt;/a&gt; 객체의 영역 &lt;code&gt;None&lt;/code&gt; 주어진 경우 검색되지 않습니다 &lt;em&gt;영역이&lt;/em&gt; 일치하는 사용자 / 암호가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7066446b04ee84f2ee63e0715496c2416b380408" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects, set the maintype to &lt;code&gt;message&lt;/code&gt;, and set the subtype to &lt;em&gt;subtype&lt;/em&gt; if it is specified or &lt;code&gt;rfc822&lt;/code&gt; if it is not. If &lt;em&gt;subtype&lt;/em&gt; is &lt;code&gt;partial&lt;/code&gt;, raise an error (&lt;code&gt;bytes&lt;/code&gt; objects must be used to construct &lt;code&gt;message/partial&lt;/code&gt; parts).</source>
          <target state="translated">들어 &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 는&lt;/a&gt; 객체,에 maintype 설정 &lt;code&gt;message&lt;/code&gt; , 그리고의 하위 유형 설정 &lt;em&gt;하위 유형&lt;/em&gt; 이 지정된 경우 또는 &lt;code&gt;rfc822&lt;/code&gt; 그렇지 않은 경우. 경우 &lt;em&gt;서브 타입&lt;/em&gt; 인 &lt;code&gt;partial&lt;/code&gt; (오류를 발생 &lt;code&gt;bytes&lt;/code&gt; 개체 구성체에 사용되어야 &lt;code&gt;message/partial&lt;/code&gt; 부분).</target>
        </trans-unit>
        <trans-unit id="cd93e3e6c8c66a14f077add7bc3e55825954f4f2" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt;, per &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046&lt;/strong&gt;&lt;/a&gt;, raise an error if a &lt;em&gt;cte&lt;/em&gt; of &lt;code&gt;quoted-printable&lt;/code&gt; or &lt;code&gt;base64&lt;/code&gt; is requested for &lt;em&gt;subtype&lt;/em&gt;&lt;code&gt;rfc822&lt;/code&gt;, and for any &lt;em&gt;cte&lt;/em&gt; other than &lt;code&gt;7bit&lt;/code&gt; for &lt;em&gt;subtype&lt;/em&gt;&lt;code&gt;external-body&lt;/code&gt;. For &lt;code&gt;message/rfc822&lt;/code&gt;, use &lt;code&gt;8bit&lt;/code&gt; if &lt;em&gt;cte&lt;/em&gt; is not specified. For all other values of &lt;em&gt;subtype&lt;/em&gt;, use &lt;code&gt;7bit&lt;/code&gt;.</source>
          <target state="translated">들어 &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; , 당 &lt;a href=&quot;https://tools.ietf.org/html/rfc2046.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2046&lt;/strong&gt;&lt;/a&gt; 하는 경우 오류가 발생 &lt;em&gt;CTE&lt;/em&gt; 의 &lt;code&gt;quoted-printable&lt;/code&gt; 또는 &lt;code&gt;base64&lt;/code&gt; 에 대한 요청 &lt;em&gt;서브 타입 &lt;/em&gt; &lt;code&gt;rfc822&lt;/code&gt; , 어떤을위한 &lt;em&gt;CTE&lt;/em&gt; 이외의 &lt;code&gt;7bit&lt;/code&gt; 에 대한 &lt;em&gt;하위 &lt;/em&gt; &lt;code&gt;external-body&lt;/code&gt; . 들어 &lt;code&gt;message/rfc822&lt;/code&gt; , 사용 &lt;code&gt;8bit&lt;/code&gt; 경우 &lt;em&gt;CTE가&lt;/em&gt; 지정되어 있지 않습니다. 다른 모든 &lt;em&gt;하위 유형&lt;/em&gt; 값에는 &lt;code&gt;7bit&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e398629d7cbca4cecc106052af8eb8c0b30b221f" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;bytes&lt;/code&gt;, use the specified &lt;em&gt;maintype&lt;/em&gt; and &lt;em&gt;subtype&lt;/em&gt;, or raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are not specified.</source>
          <target state="translated">들어 &lt;code&gt;bytes&lt;/code&gt; , 지정된 사용 &lt;em&gt;maintype&lt;/em&gt; 및 &lt;em&gt;하위 유형을&lt;/em&gt; , 또는 인상 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 그들이 지정되지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="e1f46e2291fcafabd14f10bb29e1002c75bd19e3" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;str&lt;/code&gt; objects, if &lt;em&gt;cte&lt;/em&gt; is not set use heuristics to determine the most compact encoding.</source>
          <target state="translated">들어 &lt;code&gt;str&lt;/code&gt; 경우 객체, &lt;em&gt;CTE가&lt;/em&gt; 없는 세트를 사용 추론은 가장 컴팩트 한 인코딩을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="18c573f79e1045ebe735b20b3288da0ea510cc71" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;str&lt;/code&gt;, set the MIME &lt;code&gt;maintype&lt;/code&gt; to &lt;code&gt;text&lt;/code&gt;, and set the subtype to &lt;em&gt;subtype&lt;/em&gt; if it is specified, or &lt;code&gt;plain&lt;/code&gt; if it is not.</source>
          <target state="translated">들어 &lt;code&gt;str&lt;/code&gt; 의 MIME 세트 &lt;code&gt;maintype&lt;/code&gt; 에 &lt;code&gt;text&lt;/code&gt; 와의 하위 유형 설정 &lt;em&gt;하위 유형&lt;/em&gt; 이 지정된 경우, 또는 &lt;code&gt;plain&lt;/code&gt; 그렇지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="d35d91a13b57ac41755a8fa618e750f4c5244931" translate="yes" xml:space="preserve">
          <source>For &lt;em&gt;stdin&lt;/em&gt;, line ending characters &lt;code&gt;'\n'&lt;/code&gt; in the input will be converted to the default line separator &lt;a href=&quot;os#os.linesep&quot;&gt;&lt;code&gt;os.linesep&lt;/code&gt;&lt;/a&gt;. For &lt;em&gt;stdout&lt;/em&gt; and &lt;em&gt;stderr&lt;/em&gt;, all line endings in the output will be converted to &lt;code&gt;'\n'&lt;/code&gt;. For more information see the documentation of the &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; class when the &lt;em&gt;newline&lt;/em&gt; argument to its constructor is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;stdin의&lt;/em&gt; 경우 &lt;em&gt;입력&lt;/em&gt; 의 줄 끝 문자 &lt;code&gt;'\n'&lt;/code&gt; 은 기본 줄 구분자 &lt;a href=&quot;os#os.linesep&quot;&gt; &lt;code&gt;os.linesep&lt;/code&gt; &lt;/a&gt; 로 변환됩니다 . 들어 &lt;em&gt;표준 출력&lt;/em&gt; 과 &lt;em&gt;표준 에러&lt;/em&gt; 출력의 모든 라인 엔딩으로 변환됩니다 &lt;code&gt;'\n'&lt;/code&gt; . 자세한 정보 는 생성자에 대한 &lt;em&gt;개행&lt;/em&gt; 인수가 &lt;code&gt;None&lt;/code&gt; 인 경우 &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt; 클래스 의 문서를 참조하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aefa0554df66d0c278cf83b6f6f16cd31c184d5a" translate="yes" xml:space="preserve">
          <source>For &lt;strong&gt;client use&lt;/strong&gt;, if you don&amp;rsquo;t have any special requirements for your security policy, it is highly recommended that you use the &lt;a href=&quot;#ssl.create_default_context&quot;&gt;&lt;code&gt;create_default_context()&lt;/code&gt;&lt;/a&gt; function to create your SSL context. It will load the system&amp;rsquo;s trusted CA certificates, enable certificate validation and hostname checking, and try to choose reasonably secure protocol and cipher settings.</source>
          <target state="translated">들어 &lt;strong&gt;클라이언트를 사용&lt;/strong&gt; 하면 보안 정책에 대한 특별한 요구 사항이없는 경우, 매우 당신이 사용하는 것이 좋습니다 &lt;a href=&quot;#ssl.create_default_context&quot;&gt; &lt;code&gt;create_default_context()&lt;/code&gt; &lt;/a&gt; 당신의 SSL 컨텍스트를 생성하는 기능. 시스템의 신뢰할 수있는 CA 인증서를로드하고 인증서 유효성 검사 및 호스트 이름 확인을 활성화하며 합리적으로 안전한 프로토콜 및 암호 설정을 선택하려고합니다.</target>
        </trans-unit>
        <trans-unit id="b8a7f6e9bf97381e72100785ca3325d65ef2dafc" translate="yes" xml:space="preserve">
          <source>For FTP, file, and data URLs and requests explicitly handled by legacy &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; classes, this function returns a &lt;a href=&quot;#urllib.response.addinfourl&quot;&gt;&lt;code&gt;urllib.response.addinfourl&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">For FTP, file, and data URLs and requests explicitly handled by legacy &lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt; classes, this function returns a &lt;a href=&quot;#urllib.response.addinfourl&quot;&gt; &lt;code&gt;urllib.response.addinfourl&lt;/code&gt; &lt;/a&gt; object.</target>
        </trans-unit>
        <trans-unit id="8c2e9f6d535c3b5a4230508df199bceaf128b328" translate="yes" xml:space="preserve">
          <source>For FTP, file, and data URLs and requests explicitly handled by legacy &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; classes, this function returns a &lt;code&gt;urllib.response.addinfourl&lt;/code&gt; object.</source>
          <target state="translated">레거시 &lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt; 클래스 가 명시 적으로 처리하는 FTP, 파일 및 데이터 URL 및 요청의 경우이 함수는 &lt;code&gt;urllib.response.addinfourl&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="c7aa24779d0a082d5416d92f04e7e88d8105145b" translate="yes" xml:space="preserve">
          <source>For HTTP and HTTPS URLs, this function returns a &lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt;&lt;code&gt;http.client.HTTPResponse&lt;/code&gt;&lt;/a&gt; object slightly modified. In addition to the three new methods above, the msg attribute contains the same information as the &lt;a href=&quot;http.client#http.client.HTTPResponse.reason&quot;&gt;&lt;code&gt;reason&lt;/code&gt;&lt;/a&gt; attribute &amp;mdash; the reason phrase returned by server &amp;mdash; instead of the response headers as it is specified in the documentation for &lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HTTP 및 HTTPS URL의 경우이 함수는 약간 수정 된 &lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt; &lt;code&gt;http.client.HTTPResponse&lt;/code&gt; &lt;/a&gt; 객체를 반환합니다 . 위의 세 가지 새로운 메소드 외에도 msg 속성에는 &lt;a href=&quot;http.client#http.client.HTTPResponse&quot;&gt; &lt;code&gt;HTTPResponse&lt;/code&gt; &lt;/a&gt; 문서에 지정된대로 응답 헤더 대신 &lt;a href=&quot;http.client#http.client.HTTPResponse.reason&quot;&gt; &lt;code&gt;reason&lt;/code&gt; &lt;/a&gt; 속성 (서버에서 리턴 한 이유 문구) 과 동일한 정보 가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="1bc75bf88ecf83b55f007797a7a4602b34f12e08" translate="yes" xml:space="preserve">
          <source>For IPv4 addresses, two special forms are accepted instead of a host address: &lt;code&gt;''&lt;/code&gt; represents &lt;code&gt;INADDR_ANY&lt;/code&gt;, which is used to bind to all interfaces, and the string &lt;code&gt;'&amp;lt;broadcast&amp;gt;'&lt;/code&gt; represents &lt;code&gt;INADDR_BROADCAST&lt;/code&gt;. This behavior is not compatible with IPv6, therefore, you may want to avoid these if you intend to support IPv6 with your Python programs.</source>
          <target state="translated">IPv4 주소의 경우 호스트 주소 대신 두 가지 특수 형식이 허용됩니다. &lt;code&gt;''&lt;/code&gt; 는 모든 인터페이스에 바인딩하는 데 사용되는 &lt;code&gt;INADDR_ANY&lt;/code&gt; 를 나타내고 문자열 &lt;code&gt;'&amp;lt;broadcast&amp;gt;'&lt;/code&gt; 는 &lt;code&gt;INADDR_BROADCAST&lt;/code&gt; 를 나타 냅니다 . 이 동작은 IPv6과 호환되지 않으므로 Python 프로그램에서 IPv6을 지원하려는 경우이를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8cd76cf073a90da47328543f5df73c1501f64885" translate="yes" xml:space="preserve">
          <source>For IPv6 addresses, &lt;code&gt;%scope&lt;/code&gt; is appended to the host part if &lt;em&gt;sockaddr&lt;/em&gt; contains meaningful &lt;em&gt;scopeid&lt;/em&gt;. Usually this happens for multicast addresses.</source>
          <target state="translated">IPv6 주소의 경우 &lt;em&gt;sockaddr&lt;/em&gt; 에 의미있는 &lt;em&gt;scopeid&lt;/em&gt; 가 포함되어 있으면 &lt;code&gt;%scope&lt;/code&gt; 가 호스트 부분에 추가됩니다 . 일반적으로 이것은 멀티 캐스트 주소에서 발생합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b592276149a3bef7ba4fa8be78e543f853907f60" translate="yes" xml:space="preserve">
          <source>For IPv6 addresses, &lt;code&gt;%scope_id&lt;/code&gt; is appended to the host part if &lt;em&gt;sockaddr&lt;/em&gt; contains meaningful &lt;em&gt;scope_id&lt;/em&gt;. Usually this happens for multicast addresses.</source>
          <target state="translated">For IPv6 addresses, &lt;code&gt;%scope_id&lt;/code&gt; is appended to the host part if &lt;em&gt;sockaddr&lt;/em&gt; contains meaningful &lt;em&gt;scope_id&lt;/em&gt;. Usually this happens for multicast addresses.</target>
        </trans-unit>
        <trans-unit id="6f84204498b40046cf3d5c8d670e1b6f64404196" translate="yes" xml:space="preserve">
          <source>For Python 2.x users: In the Python 2.x series, a variety of implicit conversions between 8-bit strings (the closest thing 2.x offers to a built-in binary data type) and Unicode strings were permitted. This was a backwards compatibility workaround to account for the fact that Python originally only supported 8-bit text, and Unicode text was a later addition. In Python 3.x, those implicit conversions are gone - conversions between 8-bit binary data and Unicode text must be explicit, and bytes and string objects will always compare unequal.</source>
          <target state="translated">Python 2.x 사용자의 경우 : Python 2.x 시리즈에서 8 비트 문자열 (2.x가 내장 이진 데이터 유형에 가장 가까운 것)과 유니 코드 문자열 간의 다양한 암시 적 변환이 허용되었습니다. 이것은 파이썬이 원래 8 비트 텍스트 만 지원했고 유니 코드 텍스트는 나중에 추가되었다는 사실을 설명하기 위해 이전 버전과의 호환성 해결 방법이었습니다. Python 3.x에서는 이러한 암시 적 변환이 사라졌습니다. 8 비트 이진 데이터와 유니 코드 텍스트 간의 변환은 명시 적이어야하며 바이트와 문자열 개체는 항상 같지 않습니다.</target>
        </trans-unit>
        <trans-unit id="07a7aa5b50fd70b489ae7356b6020b2730b425a6" translate="yes" xml:space="preserve">
          <source>For SyntaxError tracebacks, the normal &amp;lsquo;^&amp;rsquo; marking where the error was detected is replaced by coloring the text with an error highlight. When code run from a file causes other exceptions, one may right click on a traceback line to jump to the corresponding line in an IDLE editor. The file will be opened if necessary.</source>
          <target state="translated">SyntaxError 역 추적의 경우, 오류가 감지 된 일반적인 '^'표시는 오류 강조 표시로 텍스트를 색칠하는 것으로 대체됩니다. 파일에서 코드를 실행하면 다른 예외가 발생하면 역 추적 라인을 마우스 오른쪽 단추로 클릭하여 IDLE 편집기의 해당 라인으로 이동할 수 있습니다. 필요한 경우 파일이 열립니다.</target>
        </trans-unit>
        <trans-unit id="b334d98feb81f2472f7fcf772413a175e76a7be9" translate="yes" xml:space="preserve">
          <source>For Unicode (str) patterns:</source>
          <target state="translated">유니 코드 (str) 패턴의 경우 :</target>
        </trans-unit>
        <trans-unit id="cc5ee7549356196b75a26243082dbc16cceea4e1" translate="yes" xml:space="preserve">
          <source>For Unix systems, except on Linux and AIX, this is the lowercased OS name as returned by &lt;code&gt;uname -s&lt;/code&gt; with the first part of the version as returned by &lt;code&gt;uname -r&lt;/code&gt; appended, e.g. &lt;code&gt;'sunos5'&lt;/code&gt; or &lt;code&gt;'freebsd8'&lt;/code&gt;, &lt;em&gt;at the time when Python was built&lt;/em&gt;. Unless you want to test for a specific system version, it is therefore recommended to use the following idiom:</source>
          <target state="translated">리눅스와 AIX 제외 유닉스 시스템의 경우,이에 의해 반환되는 소문자 OS 이름 &lt;code&gt;uname -s&lt;/code&gt; 에서 반환 된 버전의 첫 번째 부분 &lt;code&gt;uname -r&lt;/code&gt; , 예를 들어 추가 &lt;code&gt;'sunos5'&lt;/code&gt; 또는 &lt;code&gt;'freebsd8'&lt;/code&gt; , &lt;em&gt;시간 때에는 파이썬이 만들어졌습니다&lt;/em&gt; . 특정 시스템 버전을 테스트하지 않으려면 다음 관용구를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1b3f52ba18e9bb6bfd8b64d0e44b233de339b632" translate="yes" xml:space="preserve">
          <source>For XML with namespaces, use the usual qualified &lt;code&gt;{namespace}tag&lt;/code&gt; notation:</source>
          <target state="translated">네임 스페이스가있는 XML의 경우 일반적인 정규화 된 &lt;code&gt;{namespace}tag&lt;/code&gt; 표기법을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="386bae46469352b3dcedf77c3f3e3e04ed9b6a94" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instance &lt;em&gt;d&lt;/em&gt;, &lt;code&gt;str(d)&lt;/code&gt; is equivalent to &lt;code&gt;d.isoformat(' ')&lt;/code&gt;.</source>
          <target state="translated">A에 대한 &lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 인스턴스 &lt;em&gt;D&lt;/em&gt; , &lt;code&gt;str(d)&lt;/code&gt; 동등 &lt;code&gt;d.isoformat(' ')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="32f810518819bb3ad019a20e713df5e193f8f9b1" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;#logging.handlers.MemoryHandler&quot;&gt;&lt;code&gt;MemoryHandler&lt;/code&gt;&lt;/a&gt;, flushing means just sending the buffered records to the target, if there is one. The buffer is also cleared when this happens. Override if you want different behavior.</source>
          <target state="translated">A에 대한 &lt;a href=&quot;#logging.handlers.MemoryHandler&quot;&gt; &lt;code&gt;MemoryHandler&lt;/code&gt; &lt;/a&gt; 가있는 경우, 플러싱 수단은, 대상에 버퍼링 기록을 전송. 이 경우 버퍼도 지워집니다. 다른 동작을 원하면 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="1dff9931aa7d0ed5d45d70af53cd2aed0fd4dfb1" translate="yes" xml:space="preserve">
          <source>For a &lt;a href=&quot;functions#complex&quot;&gt;&lt;code&gt;complex&lt;/code&gt;&lt;/a&gt; number &lt;code&gt;z&lt;/code&gt;, the hash values of the real and imaginary parts are combined by computing &lt;code&gt;hash(z.real) +
sys.hash_info.imag * hash(z.imag)&lt;/code&gt;, reduced modulo &lt;code&gt;2**sys.hash_info.width&lt;/code&gt; so that it lies in &lt;code&gt;range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width -
1))&lt;/code&gt;. Again, if the result is &lt;code&gt;-1&lt;/code&gt;, it&amp;rsquo;s replaced with &lt;code&gt;-2&lt;/code&gt;.</source>
          <target state="translated">A에 대한 &lt;a href=&quot;functions#complex&quot;&gt; &lt;code&gt;complex&lt;/code&gt; &lt;/a&gt; 번호 &lt;code&gt;z&lt;/code&gt; 의 실수 및 허수 부분의 해시 값을 계산하여 결합 &lt;code&gt;hash(z.real) + sys.hash_info.imag * hash(z.imag)&lt;/code&gt; , 모듈러 감소 &lt;code&gt;2**sys.hash_info.width&lt;/code&gt; 그래서 그것은에 있다고 &lt;code&gt;range(-2**(sys.hash_info.width - 1), 2**(sys.hash_info.width - 1))&lt;/code&gt; . 다시 결과가 &lt;code&gt;-1&lt;/code&gt; 이면 &lt;code&gt;-2&lt;/code&gt; 로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="115b45a6292b21abd1fa97a5ef3ba9bc8ab15b01" translate="yes" xml:space="preserve">
          <source>For a call object that represents multiple calls, &lt;a href=&quot;#unittest.mock.call.call_list&quot;&gt;&lt;code&gt;call_list()&lt;/code&gt;&lt;/a&gt; returns a list of all the intermediate calls as well as the final call.</source>
          <target state="translated">여러 호출을 나타내는 호출 객체의 경우 &lt;a href=&quot;#unittest.mock.call.call_list&quot;&gt; &lt;code&gt;call_list()&lt;/code&gt; &lt;/a&gt; 는 모든 중간 호출 목록과 최종 호출 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4712f20402a7ed1bfb0c0d4a6cfbb07523688d8c" translate="yes" xml:space="preserve">
          <source>For a complete explanation of a given option and its behavior, see the Tk man pages for the widget in question.</source>
          <target state="translated">주어진 옵션과 그 동작에 대한 자세한 설명은 해당 위젯에 대한 Tk 매뉴얼 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8e3266049648ef06aea068c545a02b2015f4133b" translate="yes" xml:space="preserve">
          <source>For a date &lt;em&gt;d&lt;/em&gt;, &lt;code&gt;str(d)&lt;/code&gt; is equivalent to &lt;code&gt;d.isoformat()&lt;/code&gt;.</source>
          <target state="translated">날짜 &lt;em&gt;d의&lt;/em&gt; 경우 &lt;code&gt;str(d)&lt;/code&gt; 는 &lt;code&gt;d.isoformat()&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="4f58bc806b154de327f318c6ac5ff546bf7bd2fe" translate="yes" xml:space="preserve">
          <source>For a demonstration of these concepts, look at this example ABC definition:</source>
          <target state="translated">이러한 개념을 시연하려면 다음 ABC 정의 예를보십시오.</target>
        </trans-unit>
        <trans-unit id="8f0dc2746ae7c369836b36523343036355346489" translate="yes" xml:space="preserve">
          <source>For a description of the flag and mode values, see the C run-time documentation; flag constants (like &lt;a href=&quot;#os.O_RDONLY&quot;&gt;&lt;code&gt;O_RDONLY&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.O_WRONLY&quot;&gt;&lt;code&gt;O_WRONLY&lt;/code&gt;&lt;/a&gt;) are defined in the &lt;a href=&quot;#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; module. In particular, on Windows adding &lt;a href=&quot;#os.O_BINARY&quot;&gt;&lt;code&gt;O_BINARY&lt;/code&gt;&lt;/a&gt; is needed to open files in binary mode.</source>
          <target state="translated">플래그 및 모드 값에 대한 설명은 C 런타임 설명서를 참조하십시오. 플래그 상수 ( &lt;a href=&quot;#os.O_RDONLY&quot;&gt; &lt;code&gt;O_RDONLY&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#os.O_WRONLY&quot;&gt; &lt;code&gt;O_WRONLY&lt;/code&gt; &lt;/a&gt; 와 같은 )는 &lt;a href=&quot;#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt; 모듈 에서 정의됩니다 . 특히 Windows 에서는 이진 모드로 파일을 열려면 &lt;a href=&quot;#os.O_BINARY&quot;&gt; &lt;code&gt;O_BINARY&lt;/code&gt; 를&lt;/a&gt; 추가 해야합니다.</target>
        </trans-unit>
        <trans-unit id="00fd7a5300104795ce153d199d268c66cb6aaf56" translate="yes" xml:space="preserve">
          <source>For a detailed example, see &lt;a href=&quot;#reducer-override&quot;&gt;Custom Reduction for Types, Functions, and Other Objects&lt;/a&gt;.</source>
          <target state="translated">자세한 예는 &lt;a href=&quot;#reducer-override&quot;&gt;유형, 함수 및 기타 객체에 대한 사용자 정의 축소를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3db5c5c5b4bd614cce7d0ac3fee3e85c0cd62de9" translate="yes" xml:space="preserve">
          <source>For a full table of logging levels, see the &lt;a href=&quot;logging#module-logging&quot;&gt;&lt;code&gt;logging&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">로깅 레벨의 전체 테이블은 &lt;a href=&quot;logging#module-logging&quot;&gt; &lt;code&gt;logging&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="65c24ec47684ed26cbc7c9636834c71915522b1e" translate="yes" xml:space="preserve">
          <source>For a fully standalone distribution, you can distribute the launcher with your application appended, bundled with the Python &amp;ldquo;embedded&amp;rdquo; distribution. This will run on any PC with the appropriate architecture (32 bit or 64 bit).</source>
          <target state="translated">완전 독립형 배포의 경우 응용 프로그램이 추가 된 상태에서 시작 프로그램을 배포하고 Python &quot;임베디드&quot;배포와 함께 배포 할 수 있습니다. 적절한 아키텍처 (32 비트 또는 64 비트)를 가진 모든 PC에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="aa126f00739d88b9aa90e6f3e2a802cb5c763327" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;round&lt;/code&gt; delegates to &lt;code&gt;number.__round__&lt;/code&gt;.</source>
          <target state="translated">일반적인 파이썬 객체의 경우 &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;round&lt;/code&gt; 대표단에 &lt;code&gt;number.__round__&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a28d39399a4b667034ddd93b313ca4ada834489a" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;complex(x)&lt;/code&gt; delegates to &lt;code&gt;x.__complex__()&lt;/code&gt;. If &lt;code&gt;__complex__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__float__&quot;&gt;&lt;code&gt;__float__()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반적인 파이썬 객체 &lt;code&gt;x&lt;/code&gt; 의 경우 &lt;code&gt;complex(x)&lt;/code&gt; 는 &lt;code&gt;x.__complex__()&lt;/code&gt; 위임합니다 . &lt;code&gt;__complex__()&lt;/code&gt; 가 정의되지 않은 경우 __float __ () 로 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__float__&quot;&gt; &lt;code&gt;__float__()&lt;/code&gt; &lt;/a&gt; 됩니다. &lt;code&gt;__float__()&lt;/code&gt; 이 정의되지 않은 경우 __index __ () 로 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="5e516b69f9ab9a24f39fb3d01ccca7deca01baa3" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;complex(x)&lt;/code&gt; delegates to &lt;code&gt;x.__complex__()&lt;/code&gt;. If &lt;code&gt;__complex__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__float__&quot;&gt;&lt;code&gt;__float__()&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">For a general Python object &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;complex(x)&lt;/code&gt; delegates to &lt;code&gt;x.__complex__()&lt;/code&gt; . If &lt;code&gt;__complex__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__float__&quot;&gt; &lt;code&gt;__float__()&lt;/code&gt; &lt;/a&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fdf496741ae444039bcbd0cff2de28e69e24051c" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;float(x)&lt;/code&gt; delegates to &lt;code&gt;x.__float__()&lt;/code&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반적인 파이썬 객체 &lt;code&gt;x&lt;/code&gt; 의 경우 &lt;code&gt;float(x)&lt;/code&gt; 는 &lt;code&gt;x.__float__()&lt;/code&gt; 위임합니다 . &lt;code&gt;__float__()&lt;/code&gt; 이 정의되지 않은 경우 __index __ () 로 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="b9cb56d004a4c32fb4e92780092a8bd492db19bb" translate="yes" xml:space="preserve">
          <source>For a general Python object &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;float(x)&lt;/code&gt; delegates to &lt;code&gt;x.__float__()&lt;/code&gt;. If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__index__&quot;&gt;&lt;code&gt;__index__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">For a general Python object &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;float(x)&lt;/code&gt; delegates to &lt;code&gt;x.__float__()&lt;/code&gt; . If &lt;code&gt;__float__()&lt;/code&gt; is not defined then it falls back to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__index__&quot;&gt; &lt;code&gt;__index__()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b71ded6b644e163ed5a22c84a52332ed36162733" translate="yes" xml:space="preserve">
          <source>For a given seed, the &lt;a href=&quot;#random.choices&quot;&gt;&lt;code&gt;choices()&lt;/code&gt;&lt;/a&gt; function with equal weighting typically produces a different sequence than repeated calls to &lt;a href=&quot;#random.choice&quot;&gt;&lt;code&gt;choice()&lt;/code&gt;&lt;/a&gt;. The algorithm used by &lt;a href=&quot;#random.choices&quot;&gt;&lt;code&gt;choices()&lt;/code&gt;&lt;/a&gt; uses floating point arithmetic for internal consistency and speed. The algorithm used by &lt;a href=&quot;#random.choice&quot;&gt;&lt;code&gt;choice()&lt;/code&gt;&lt;/a&gt; defaults to integer arithmetic with repeated selections to avoid small biases from round-off error.</source>
          <target state="translated">주어진 시드에 대해 동일한 가중치를 사용 하는 &lt;a href=&quot;#random.choices&quot;&gt; &lt;code&gt;choices()&lt;/code&gt; &lt;/a&gt; 함수는 일반적으로 &lt;a href=&quot;#random.choice&quot;&gt; &lt;code&gt;choice()&lt;/code&gt; &lt;/a&gt; 반복 호출과 다른 순서를 생성합니다 . &lt;a href=&quot;#random.choices&quot;&gt; &lt;code&gt;choices()&lt;/code&gt; &lt;/a&gt; 사용 하는 알고리즘 은 내부 일관성 및 속도를 위해 부동 소수점 산술을 사용합니다. &lt;a href=&quot;#random.choice&quot;&gt; &lt;code&gt;choice()&lt;/code&gt; &lt;/a&gt; 의해 사용되는 알고리즘 은 반올림 오차로 인한 작은 바이어스를 피하기 위해 반복 선택을 통해 정수 산술로 기본 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="05f7b184da73f1934bbc9129b218aedbb998c7d7" translate="yes" xml:space="preserve">
          <source>For a higher-level wrapper of &lt;a href=&quot;#os.sendfile&quot;&gt;&lt;code&gt;sendfile()&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt;&lt;code&gt;socket.socket.sendfile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">높은 수준의 랩퍼 &lt;a href=&quot;#os.sendfile&quot;&gt; &lt;code&gt;sendfile()&lt;/code&gt; &lt;/a&gt; 를 참조 &lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt; &lt;code&gt;socket.socket.sendfile()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d0d6c126a57019cfaa59c16f6bbb2a1d78c4228c" translate="yes" xml:space="preserve">
          <source>For a list of all the command-line options:</source>
          <target state="translated">모든 명령 행 옵션 목록 :</target>
        </trans-unit>
        <trans-unit id="87fd2a57950af3c9c3165d392564b7fc19902f06" translate="yes" xml:space="preserve">
          <source>For a list of handlers included as standard, see &lt;a href=&quot;logging.handlers#module-logging.handlers&quot;&gt;&lt;code&gt;logging.handlers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">표준으로 포함 된 핸들러 목록은 &lt;a href=&quot;logging.handlers#module-logging.handlers&quot;&gt; &lt;code&gt;logging.handlers&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c623ac8e2dbdb44b77f887d6638659eaf4c8074e" translate="yes" xml:space="preserve">
          <source>For a list of the files in a ZIP archive, use the &lt;a href=&quot;#cmdoption-zipfile-l&quot;&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">ZIP 아카이브의 파일 목록을 보려면 &lt;a href=&quot;#cmdoption-zipfile-l&quot;&gt; &lt;code&gt;-l&lt;/code&gt; &lt;/a&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce33415db4c123c62bd6366476d7eb3fd7814ac8" translate="yes" xml:space="preserve">
          <source>For a list of the files in a tar archive, use the &lt;a href=&quot;#cmdoption-tarfile-l&quot;&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">tar 아카이브의 파일 목록을 보려면 &lt;a href=&quot;#cmdoption-tarfile-l&quot;&gt; &lt;code&gt;-l&lt;/code&gt; &lt;/a&gt; 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4f31a2e7a2b7ef74a465b4d5322ee2c30d359d16" translate="yes" xml:space="preserve">
          <source>For a literal match, wrap the meta-characters in brackets. For example, &lt;code&gt;'[?]'&lt;/code&gt; matches the character &lt;code&gt;'?'&lt;/code&gt;.</source>
          <target state="translated">리터럴 일치의 경우 메타 문자를 대괄호로 묶습니다. 예를 들어, &lt;code&gt;'[?]'&lt;/code&gt; 는 문자 &lt;code&gt;'?'&lt;/code&gt; 와 일치합니다. .</target>
        </trans-unit>
        <trans-unit id="c21d07a4b7809c16f34f5ad89fa8da95d75a44e6" translate="yes" xml:space="preserve">
          <source>For a match &lt;em&gt;m&lt;/em&gt;, return the 2-tuple &lt;code&gt;(m.start(group), m.end(group))&lt;/code&gt;. Note that if &lt;em&gt;group&lt;/em&gt; did not contribute to the match, this is &lt;code&gt;(-1, -1)&lt;/code&gt;. &lt;em&gt;group&lt;/em&gt; defaults to zero, the entire match.</source>
          <target state="translated">일치하는 &lt;em&gt;m의&lt;/em&gt; 경우 2 튜플 &lt;code&gt;(m.start(group), m.end(group))&lt;/code&gt; 반환합니다 . &lt;em&gt;그룹&lt;/em&gt; 이 경기에 참여하지 않은 경우 이는 &lt;code&gt;(-1, -1)&lt;/code&gt; 입니다. &lt;em&gt;그룹은&lt;/em&gt; 기본적으로 전체 일치하는 0으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="666246b0e205cb965fefc705620932f2b5673bdc" translate="yes" xml:space="preserve">
          <source>For a more convenient way of compressing a single chunk of data, see &lt;a href=&quot;#lzma.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">단일 데이터 청크를 압축하는보다 편리한 방법은 &lt;a href=&quot;#lzma.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="43d8561201f10a9aece268d98ecf18b08da3fa5d" translate="yes" xml:space="preserve">
          <source>For a more convenient way of decompressing an entire compressed stream at once, see &lt;a href=&quot;#lzma.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">전체 압축 스트림을 한 번에 압축 해제하는보다 편리한 방법은 &lt;a href=&quot;#lzma.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca9cb8f02ce650a16c34e931a114a4f3a4fa00e0" translate="yes" xml:space="preserve">
          <source>For a naive object, the &lt;code&gt;%z&lt;/code&gt; and &lt;code&gt;%Z&lt;/code&gt; format codes are replaced by empty strings.</source>
          <target state="translated">순진한 개체의 경우 &lt;code&gt;%z&lt;/code&gt; 및 &lt;code&gt;%Z&lt;/code&gt; 형식 코드는 빈 문자열로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="30621260251d8be3cc3042163396cd1230567f5d" translate="yes" xml:space="preserve">
          <source>For a negative &lt;em&gt;step&lt;/em&gt;, the contents of the range are still determined by the formula &lt;code&gt;r[i] = start + step*i&lt;/code&gt;, but the constraints are &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;r[i] &amp;gt; stop&lt;/code&gt;.</source>
          <target state="translated">음수 &lt;em&gt;단계&lt;/em&gt; 의 경우 범위의 내용은 여전히 ​​공식 &lt;code&gt;r[i] = start + step*i&lt;/code&gt; 로 결정되지만 제약 조건은 &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; 및 &lt;code&gt;r[i] &amp;gt; stop&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8b78e93c1f5bc6ada550d464265f45c45e160b33" translate="yes" xml:space="preserve">
          <source>For a nonzero number, return the adjusted exponent of its operand as a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instance. If the operand is a zero then &lt;code&gt;Decimal('-Infinity')&lt;/code&gt; is returned and the &lt;a href=&quot;#decimal.DivisionByZero&quot;&gt;&lt;code&gt;DivisionByZero&lt;/code&gt;&lt;/a&gt; flag is raised. If the operand is an infinity then &lt;code&gt;Decimal('Infinity')&lt;/code&gt; is returned.</source>
          <target state="translated">0이 아닌 숫자의 경우, 피연산자의 조정 된 지수를 &lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt; 인스턴스 로 리턴하십시오 . 피연산자가 0이면 &lt;code&gt;Decimal('-Infinity')&lt;/code&gt; 이 반환되고 &lt;a href=&quot;#decimal.DivisionByZero&quot;&gt; &lt;code&gt;DivisionByZero&lt;/code&gt; &lt;/a&gt; 플래그가 발생합니다. 피연산자가 무한대이면 &lt;code&gt;Decimal('Infinity')&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="8d50bedea444e5cc9430e30600bab5cd97f24f9c" translate="yes" xml:space="preserve">
          <source>For a package, the same effect can be achieved by including a &lt;code&gt;__main__.py&lt;/code&gt; module, the contents of which will be executed when the module is run with &lt;code&gt;-m&lt;/code&gt;.</source>
          <target state="translated">패키지의 경우 &lt;code&gt;__main__.py&lt;/code&gt; 모듈 을 포함 시키면 동일한 효과를 얻을 수 있습니다 . 그 내용은 &lt;code&gt;-m&lt;/code&gt; 으로 모듈을 실행할 때 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="8bcd8e2e8d9e09e1932e1712a87977c634a4d946" translate="yes" xml:space="preserve">
          <source>For a positive &lt;em&gt;step&lt;/em&gt;, the contents of a range &lt;code&gt;r&lt;/code&gt; are determined by the formula &lt;code&gt;r[i] = start + step*i&lt;/code&gt; where &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; and &lt;code&gt;r[i] &amp;lt; stop&lt;/code&gt;.</source>
          <target state="translated">양수 &lt;em&gt;단계의 경우&lt;/em&gt; , 범위 &lt;code&gt;r&lt;/code&gt; 의 내용은 공식 &lt;code&gt;r[i] = start + step*i&lt;/code&gt; ( &lt;code&gt;i &amp;gt;= 0&lt;/code&gt; 및 &lt;code&gt;r[i] &amp;lt; stop&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="bf3aa39c7cc3dda44d966630b1c09cfb3205e2ce" translate="yes" xml:space="preserve">
          <source>For a simple script, the specified code is simply executed in a fresh module namespace. For a valid sys.path entry (typically a zipfile or directory), the entry is first added to the beginning of &lt;code&gt;sys.path&lt;/code&gt;. The function then looks for and executes a &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt; module using the updated path. Note that there is no special protection against invoking an existing &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt; entry located elsewhere on &lt;code&gt;sys.path&lt;/code&gt; if there is no such module at the specified location.</source>
          <target state="translated">간단한 스크립트의 경우 지정된 코드는 새로운 모듈 네임 스페이스에서 간단하게 실행됩니다. 유효한 sys.path 항목 (일반적으로 zip 파일 또는 디렉토리)의 경우 항목이 먼저 &lt;code&gt;sys.path&lt;/code&gt; 의 시작 부분에 추가됩니다 . 그런 다음 함수 는 업데이트 된 경로를 사용하여 &lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;/a&gt; 모듈 을 찾아 실행합니다 . 지정된 위치에 해당 모듈이없는 경우 &lt;code&gt;sys.path&lt;/code&gt; 의 다른 위치에 있는 기존 &lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;/a&gt; 항목을 호출하는 데 대한 특별한 보호 기능 은 없습니다.</target>
        </trans-unit>
        <trans-unit id="6baeee723ea1f301c86883b2af994d3639d55d54" translate="yes" xml:space="preserve">
          <source>For a time &lt;em&gt;t&lt;/em&gt;, &lt;code&gt;str(t)&lt;/code&gt; is equivalent to &lt;code&gt;t.isoformat()&lt;/code&gt;.</source>
          <target state="translated">시간 &lt;em&gt;t의&lt;/em&gt; 경우 &lt;code&gt;str(t)&lt;/code&gt; 는 &lt;code&gt;t.isoformat()&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="1e518769f3b680be2e2b473fb9aff3c8ff0902ac" translate="yes" xml:space="preserve">
          <source>For a two dimensional point &lt;code&gt;(x, y)&lt;/code&gt;, this is equivalent to computing the hypotenuse of a right triangle using the Pythagorean theorem, &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt;.</source>
          <target state="translated">2 차원 점 &lt;code&gt;(x, y)&lt;/code&gt; 경우 피타고라스 정리 &lt;code&gt;sqrt(x*x + y*y)&lt;/code&gt; 사용하여 직각 삼각형의 빗변을 계산하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="df6335500739b50d131f2bfca3e93aa377a0b672" translate="yes" xml:space="preserve">
          <source>For a typing object of the form &lt;code&gt;X[Y, Z, ...]&lt;/code&gt; these functions return &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;(Y, Z, ...)&lt;/code&gt;. If &lt;code&gt;X&lt;/code&gt; is a generic alias for a builtin or &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; class, it gets normalized to the original class. For unsupported objects return &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;()&lt;/code&gt; correspondingly. Examples:</source>
          <target state="translated">&lt;code&gt;X[Y, Z, ...]&lt;/code&gt; 형식의 입력 객체의 경우이 함수는 &lt;code&gt;X&lt;/code&gt; 및 &lt;code&gt;(Y, Z, ...)&lt;/code&gt; 반환 합니다. 경우 &lt;code&gt;X&lt;/code&gt; 는 내장 명령 또는에 대한 일반적인 별칭 &lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt; 클래스, 그것은 원래의 클래스에 정상화됩니다. 지원되지 않는 개체의 경우 해당 &lt;code&gt;None&lt;/code&gt; 과 &lt;code&gt;()&lt;/code&gt; 를 반환 합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="1ee64b9ff441d0b6a5cef41090e49445fc0a5d11" translate="yes" xml:space="preserve">
          <source>For accessing the C Python api directly, a ready-to-use Python shared library object is available:</source>
          <target state="translated">C Python API에 직접 액세스하기 위해 즉시 사용 가능한 Python 공유 라이브러리 객체를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d7a1f81d73cb959d5e3b45930e44df60ee064e1" translate="yes" xml:space="preserve">
          <source>For additional numeric operations see the &lt;a href=&quot;math#module-math&quot;&gt;&lt;code&gt;math&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;cmath#module-cmath&quot;&gt;&lt;code&gt;cmath&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">추가적인 수치 연산은 &lt;a href=&quot;math#module-math&quot;&gt; &lt;code&gt;math&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;cmath#module-cmath&quot;&gt; &lt;code&gt;cmath&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ec4af7df109ce92f9ea30f1681eaa99c7fccae1" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be 6to4 addresses (starting with &lt;code&gt;2002::/16&lt;/code&gt;) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc3056.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 3056&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded IPv4 address. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc3056.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 3056에&lt;/strong&gt;&lt;/a&gt; 의해 정의 된 &lt;strong&gt;대로&lt;/strong&gt; 6to4 주소 ( &lt;code&gt;2002::/16&lt;/code&gt; 시작) 인 것으로 보이는 주소의 경우이 특성은 임베디드 IPv4 주소를보고합니다. 다른 주소의 경우이 속성은 &lt;code&gt;None&lt;/code&gt; 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cd51251fe6a3922b47184d5d1f951ddf7677b01" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be 6to4 addresses (starting with &lt;code&gt;2002::/16&lt;/code&gt;) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc3056.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 3056&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded IPv4 address. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">For addresses that appear to be 6to4 addresses (starting with &lt;code&gt;2002::/16&lt;/code&gt; ) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc3056.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 3056&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded IPv4 address. For any other address, this property will be &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1f900a30d92e1d3f296841c46ad25d2efeb2f007" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be IPv4 mapped addresses (starting with &lt;code&gt;::FFFF/96&lt;/code&gt;), this property will report the embedded IPv4 address. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;::FFFF/96&lt;/code&gt; 으로 시작하는 IPv4 매핑 주소로 보이는 주소의 경우이 속성은 내장 IPv4 주소를보고합니다. 다른 주소의 경우이 속성은 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a6a8569f2aecd3660a5a2055585eeda04864338d" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be Teredo addresses (starting with &lt;code&gt;2001::/32&lt;/code&gt;) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4380.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4380&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded &lt;code&gt;(server, client)&lt;/code&gt; IP address pair. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc4380.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4380에&lt;/strong&gt;&lt;/a&gt; 의해 정의 된 Teredo 주소 ( &lt;code&gt;2001::/32&lt;/code&gt; 시작) 인 주소의 경우이 특성은 임베디드 &lt;code&gt;(server, client)&lt;/code&gt; IP 주소 쌍을보고합니다. 다른 주소의 경우이 속성은 &lt;code&gt;None&lt;/code&gt; 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b57fb9bff41b6afca7babc13b149ae63041aeb5e" translate="yes" xml:space="preserve">
          <source>For addresses that appear to be Teredo addresses (starting with &lt;code&gt;2001::/32&lt;/code&gt;) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4380.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 4380&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded &lt;code&gt;(server, client)&lt;/code&gt; IP address pair. For any other address, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">For addresses that appear to be Teredo addresses (starting with &lt;code&gt;2001::/32&lt;/code&gt; ) as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4380.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 4380&lt;/strong&gt;&lt;/a&gt;, this property will report the embedded &lt;code&gt;(server, client)&lt;/code&gt; IP address pair. For any other address, this property will be &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="caebc9e5ce8fd833a18841ee1d3aa8ceb3472904" translate="yes" xml:space="preserve">
          <source>For all of the &lt;a href=&quot;#opcode-SET_ADD&quot;&gt;&lt;code&gt;SET_ADD&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#opcode-LIST_APPEND&quot;&gt;&lt;code&gt;LIST_APPEND&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#opcode-MAP_ADD&quot;&gt;&lt;code&gt;MAP_ADD&lt;/code&gt;&lt;/a&gt; instructions, while the added value or key/value pair is popped off, the container object remains on the stack so that it is available for further iterations of the loop.</source>
          <target state="translated">&lt;a href=&quot;#opcode-SET_ADD&quot;&gt; &lt;code&gt;SET_ADD&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#opcode-LIST_APPEND&quot;&gt; &lt;code&gt;LIST_APPEND&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#opcode-MAP_ADD&quot;&gt; &lt;code&gt;MAP_ADD&lt;/code&gt; &lt;/a&gt; 명령어 모두에 대해 추가 된 값 또는 키 / 값 쌍이 튀어 나오는 동안 컨테이너 객체는 스택에 남아 루프의 추가 반복에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17bb1e02a3a8c9756702891333f2fa0f4afa3d16" translate="yes" xml:space="preserve">
          <source>For all other comparisons (such as &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;gt;&lt;/code&gt;), when a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object is compared to an object of a different type, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised:</source>
          <target state="translated">다른 모든 비교 (예 : &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;&amp;gt;&lt;/code&gt; )에서 &lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt; 객체를 다른 유형의 객체와 비교하면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b0f58f3dbfd004ab8257354adb01c260a0fe1222" translate="yes" xml:space="preserve">
          <source>For all other response codes, the method &lt;code&gt;http_error_default()&lt;/code&gt; is called which you can override in subclasses to handle the error appropriately.</source>
          <target state="translated">다른 모든 응답 코드의 경우, 오류를 적절하게 처리하기 위해 서브 클래스에서 대체 할 수있는 &lt;code&gt;http_error_default()&lt;/code&gt; 메소드 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a0b17df6417af18c05b98134b149d8706f2d0a67" translate="yes" xml:space="preserve">
          <source>For almost all applications &lt;a href=&quot;os#os.urandom&quot;&gt;&lt;code&gt;os.urandom()&lt;/code&gt;&lt;/a&gt; is preferable.</source>
          <target state="translated">거의 모든 응용 프로그램에서 &lt;a href=&quot;os#os.urandom&quot;&gt; &lt;code&gt;os.urandom()&lt;/code&gt; &lt;/a&gt; 이 바람직합니다.</target>
        </trans-unit>
        <trans-unit id="d1688519c95e30c3a0fdf1a44a0c337b8e5d237f" translate="yes" xml:space="preserve">
          <source>For an HTTP POST request method, &lt;em&gt;data&lt;/em&gt; should be a buffer in the standard &lt;em&gt;application/x-www-form-urlencoded&lt;/em&gt; format. The &lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function takes a mapping or sequence of 2-tuples and returns an ASCII string in this format. It should be encoded to bytes before being used as the &lt;em&gt;data&lt;/em&gt; parameter.</source>
          <target state="translated">HTTP POST 요청 방법의 경우 &lt;em&gt;데이터&lt;/em&gt; 는 표준 &lt;em&gt;application / x-www-form-urlencoded&lt;/em&gt; 형식 의 버퍼 여야 합니다. &lt;a href=&quot;urllib.parse#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt; 함수는 2 튜플의 매핑 또는 시퀀스를 받아 형식으로 ASCII 문자열을 반환합니다. &lt;em&gt;data&lt;/em&gt; 매개 변수 로 사용되기 전에 바이트로 인코딩되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="321d130154df7221dd2710f2b1317833db709e42" translate="yes" xml:space="preserve">
          <source>For an aware object:</source>
          <target state="translated">인식 객체의 경우 :</target>
        </trans-unit>
        <trans-unit id="a17d72681c41e653cbffdc470a5ce38780a11b46" translate="yes" xml:space="preserve">
          <source>For an example of the usage of queues for interprocess communication see &lt;a href=&quot;#multiprocessing-examples&quot;&gt;Examples&lt;/a&gt;.</source>
          <target state="translated">프로세스 간 통신보기위한 큐의 사용의 예는 &lt;a href=&quot;#multiprocessing-examples&quot;&gt;예&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e0b68182f78976cfa947bfc7e82fd8771f13f5a0" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#cookbook-rotator-namer&quot;&gt;Using a rotator and namer to customize log rotation processing&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://docs.python.org/3.8/howto/logging-cookbook.html#cookbook-rotator-namer&quot;&gt;로테이터 및 네임 러를 사용하여 로그 회전 처리 사용자 정의를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="83fcca1136da4c1a159dbfbc7788b9c760fa6324" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;https://docs.python.org/3.9/howto/logging-cookbook.html#cookbook-rotator-namer&quot;&gt;Using a rotator and namer to customize log rotation processing&lt;/a&gt;.</source>
          <target state="translated">For an example, see &lt;a href=&quot;https://docs.python.org/3.9/howto/logging-cookbook.html#cookbook-rotator-namer&quot;&gt;Using a rotator and namer to customize log rotation processing&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="465235f896ee45a5706af0e616381fac9cdc77a3" translate="yes" xml:space="preserve">
          <source>For an explanation of why the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; part is necessary, see &lt;a href=&quot;#multiprocessing-programming&quot;&gt;Programming guidelines&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 부분이 필요한 이유에 대한 설명 은 &lt;a href=&quot;#multiprocessing-programming&quot;&gt;프로그래밍 지침을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d87221a5f8993883fc9acf9eba35bccbcbdbcf3" translate="yes" xml:space="preserve">
          <source>For an introduction to socket programming (in C), see the following papers:</source>
          <target state="translated">소켓 프로그래밍 (C)에 대한 소개는 다음 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4537c0799d30818387a1778e0690fa078b4b7e06" translate="yes" xml:space="preserve">
          <source>For any &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object &lt;em&gt;d&lt;/em&gt;, &lt;code&gt;d == datetime.combine(d.date(), d.time(), d.tzinfo)&lt;/code&gt;. If date is a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object, its time components and &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; attributes are ignored.</source>
          <target state="translated">어떤 옵션 &lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 오브젝트 &lt;em&gt;D&lt;/em&gt; , &lt;code&gt;d == datetime.combine(d.date(), d.time(), d.tzinfo)&lt;/code&gt; . date가 &lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체이면 해당 시간 구성 요소 및 &lt;a href=&quot;#datetime.datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt; 속성이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b37d67d8e0a8eb8e77a72044792b8805d3ba57e4" translate="yes" xml:space="preserve">
          <source>For any of methods of this class, a &lt;em&gt;resource&lt;/em&gt; argument is expected to be a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt; which represents conceptually just a file name. This means that no subdirectory paths should be included in the &lt;em&gt;resource&lt;/em&gt; argument. This is because the location of the package the reader is for, acts as the &amp;ldquo;directory&amp;rdquo;. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).</source>
          <target state="translated">이 클래스의 모든 메소드에서 &lt;em&gt;자원&lt;/em&gt; 인수는 개념적으로 파일 이름 만 나타내는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;경로와 유사한 오브젝트&lt;/a&gt; 일 것으로 예상됩니다 . 이는 하위 디렉토리 경로가 &lt;em&gt;자원&lt;/em&gt; 인수에 포함되지 않아야 함을 의미합니다 . 독자의 패키지 위치가 &quot;디렉토리&quot;의 역할을하기 때문입니다. 따라서 디렉토리와 파일 이름에 대한 은유는 각각 패키지와 리소스입니다. 이것은 또한이 클래스의 인스턴스가 잠재적으로 여러 패키지 또는 모듈을 나타내는 대신 특정 패키지와 직접적으로 연관 될 것으로 예상되는 이유입니다.</target>
        </trans-unit>
        <trans-unit id="46d2c0067052225d760c2d09aa23f613eaf0b4d4" translate="yes" xml:space="preserve">
          <source>For any of methods of this class, a &lt;em&gt;resource&lt;/em&gt; argument is expected to be a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt; which represents conceptually just a file name. This means that no subdirectory paths should be included in the &lt;em&gt;resource&lt;/em&gt; argument. This is because the location of the package the reader is for, acts as the &amp;ldquo;directory&amp;rdquo;. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).</source>
          <target state="translated">For any of methods of this class, a &lt;em&gt;resource&lt;/em&gt; argument is expected to be a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt; which represents conceptually just a file name. This means that no subdirectory paths should be included in the &lt;em&gt;resource&lt;/em&gt; argument. This is because the location of the package the reader is for, acts as the &amp;ldquo;directory&amp;rdquo;. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).</target>
        </trans-unit>
        <trans-unit id="a1460d090c4d9e2f5c93e1dbae17ba143ffe2103" translate="yes" xml:space="preserve">
          <source>For applications requiring aware objects, &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects have an optional time zone information attribute, &lt;code&gt;tzinfo&lt;/code&gt;, that can be set to an instance of a subclass of the abstract &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; class. These &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; objects capture information about the offset from UTC time, the time zone name, and whether daylight saving time is in effect.</source>
          <target state="translated">인식 객체를 필요로하는 응용 프로그램의 경우, &lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt; 객체에는 선택적 &lt;code&gt;tzinfo&lt;/code&gt; 클래스가 있으며 추상 &lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt; 클래스 의 하위 클래스 인스턴스로 설정할 수 있습니다 . 이 &lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt; 객체는 UTC 시간, 표준 시간대 이름 및 일광 절약 시간의 적용 여부에 대한 오프셋 정보를 캡처합니다.</target>
        </trans-unit>
        <trans-unit id="7075e97b30b77fd32e75248fdd1404e81f84a7b9" translate="yes" xml:space="preserve">
          <source>For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at &lt;a href=&quot;http://www.zlib.net&quot;&gt;http://www.zlib.net&lt;/a&gt;. There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a security vulnerability, so we recommend using 1.1.4 or later.</source>
          <target state="translated">데이터 압축이 필요한 응용 프로그램의 경우이 모듈의 기능은 zlib 라이브러리를 사용하여 압축 및 압축 해제를 허용합니다. zlib 라이브러리는 &lt;a href=&quot;http://www.zlib.net&quot;&gt;http://www.zlib.net에&lt;/a&gt; 자체 홈페이지가 있습니다. Python 모듈과 1.1.3 이전의 zlib 라이브러리 버전 간에는 비 호환성이 알려져 있습니다. 1.1.3에는 보안 취약점이 있으므로 1.1.4 이상을 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="acb08d2fe0ee4cde5f8032616c5da5da0fa793ac" translate="yes" xml:space="preserve">
          <source>For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at &lt;a href=&quot;https://www.zlib.net&quot;&gt;https://www.zlib.net&lt;/a&gt;. There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a &lt;a href=&quot;https://zlib.net/zlib_faq.html#faq33&quot;&gt;security vulnerability&lt;/a&gt;, so we recommend using 1.1.4 or later.</source>
          <target state="translated">For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at &lt;a href=&quot;https://www.zlib.net&quot;&gt;https://www.zlib.net&lt;/a&gt;. There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a &lt;a href=&quot;https://zlib.net/zlib_faq.html#faq33&quot;&gt;security vulnerability&lt;/a&gt;, so we recommend using 1.1.4 or later.</target>
        </trans-unit>
        <trans-unit id="ff1b3bfa6942db35ceecc9803ef62bbeadf15677" translate="yes" xml:space="preserve">
          <source>For aware &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; instances, the return value is computed as:</source>
          <target state="translated">&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 인스턴스 를 인식 하는 경우 반환 값은 다음과 같이 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="69e80030e91a06f7b29e8bec9734b8962acbb95f" translate="yes" xml:space="preserve">
          <source>For backward compatibility, a &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; instance is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the &lt;code&gt;stat&lt;/code&gt; structure, in the order &lt;a href=&quot;#os.stat_result.st_mode&quot;&gt;&lt;code&gt;st_mode&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_ino&quot;&gt;&lt;code&gt;st_ino&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_dev&quot;&gt;&lt;code&gt;st_dev&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_nlink&quot;&gt;&lt;code&gt;st_nlink&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_uid&quot;&gt;&lt;code&gt;st_uid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_gid&quot;&gt;&lt;code&gt;st_gid&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_size&quot;&gt;&lt;code&gt;st_size&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_atime&quot;&gt;&lt;code&gt;st_atime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_mtime&quot;&gt;&lt;code&gt;st_mtime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.stat_result.st_ctime&quot;&gt;&lt;code&gt;st_ctime&lt;/code&gt;&lt;/a&gt;. More items may be added at the end by some implementations. For compatibility with older Python versions, accessing &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; as a tuple always returns integers.</source>
          <target state="translated">이전 버전과의 호환성을 위해 &lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; &lt;/a&gt; 인스턴스는 &lt;a href=&quot;#os.stat_result.st_mode&quot;&gt; &lt;code&gt;st_mode&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_ino&quot;&gt; &lt;code&gt;st_ino&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_dev&quot;&gt; &lt;code&gt;st_dev&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_nlink&quot;&gt; &lt;code&gt;st_nlink&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_uid&quot;&gt; &lt;code&gt;st_uid&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_gid&quot;&gt; &lt;code&gt;st_gid&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_size&quot;&gt; &lt;code&gt;st_size&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_atime&quot;&gt; &lt;code&gt;st_atime&lt;/code&gt; &lt;/a&gt; 순서로 &lt;code&gt;stat&lt;/code&gt; 구조 의 가장 중요한 (및 휴대용) 멤버를 제공하는 10 개 이상의 정수 튜플로 액세스 할 수도 있습니다 , &lt;a href=&quot;#os.stat_result.st_mtime&quot;&gt; &lt;code&gt;st_mtime&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.stat_result.st_ctime&quot;&gt; &lt;code&gt;st_ctime&lt;/code&gt; &lt;/a&gt; 입니다. 일부 구현에 의해 더 많은 항목이 끝에 추가 될 수 있습니다. 이전 Python 버전과의 호환성을 위해 튜플로 &lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; &lt;/a&gt; 에 액세스 하면 항상 정수가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="94838bf3b4aae58e91441f1c91f1f6be8d90eaa0" translate="yes" xml:space="preserve">
          <source>For backward compatibility, if a URL appears to point to a local file but the file can&amp;rsquo;t be opened, the URL is re-interpreted using the FTP protocol. This can sometimes cause confusing error messages.</source>
          <target state="translated">이전 버전과의 호환성을 위해 URL이 로컬 파일을 가리키는 것처럼 보이지만 파일을 열 수없는 경우 FTP 프로토콜을 사용하여 URL을 다시 해석합니다. 때때로 혼란스러운 오류 메시지가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca7f0d29acf08384be36faa207c5e9370c618e6b" translate="yes" xml:space="preserve">
          <source>For backward compatibility, the return value is also accessible as a tuple of 16 elements.</source>
          <target state="translated">이전 버전과의 호환성을 위해 반환 값은 16 개 요소의 튜플로 액세스 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a38050f0e441305ea9ba925711dc3533b5ef150" translate="yes" xml:space="preserve">
          <source>For backward-compatibility reasons, the numeric arguments &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, and &lt;code&gt;2&lt;/code&gt; are permitted. They are interpreted as &lt;code&gt;'stdname'&lt;/code&gt;, &lt;code&gt;'calls'&lt;/code&gt;, &lt;code&gt;'time'&lt;/code&gt;, and &lt;code&gt;'cumulative'&lt;/code&gt; respectively. If this old style format (numeric) is used, only one sort key (the numeric key) will be used, and additional arguments will be silently ignored.</source>
          <target state="translated">이전 버전과의 호환성을 위해 숫자 인수 &lt;code&gt;-1&lt;/code&gt; , &lt;code&gt;0&lt;/code&gt; , &lt;code&gt;1&lt;/code&gt; 및 &lt;code&gt;2&lt;/code&gt; 가 허용됩니다. 그것들은 각각 &lt;code&gt;'stdname'&lt;/code&gt; , &lt;code&gt;'calls'&lt;/code&gt; , &lt;code&gt;'time'&lt;/code&gt; , &lt;code&gt;'cumulative'&lt;/code&gt; 로 해석됩니다 . 이 이전 스타일 형식 (숫자)을 사용하는 경우 하나의 정렬 키 (숫자 키) 만 사용되며 추가 인수는 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9e0c7787dd6bfccda7252bf5bc8abe1b1d20c558" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, this object also behaves like a five-tuple containing &lt;code&gt;user&lt;/code&gt;, &lt;a href=&quot;#os.system&quot;&gt;&lt;code&gt;system&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;children_user&lt;/code&gt;, &lt;code&gt;children_system&lt;/code&gt;, and &lt;code&gt;elapsed&lt;/code&gt; in that order.</source>
          <target state="translated">이전 버전과의 호환성을 위해이 객체도 포함하는 다섯 튜플처럼 동작 &lt;code&gt;user&lt;/code&gt; , &lt;a href=&quot;#os.system&quot;&gt; &lt;code&gt;system&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;children_user&lt;/code&gt; , &lt;code&gt;children_system&lt;/code&gt; 을 하고, &lt;code&gt;elapsed&lt;/code&gt; 순으로.</target>
        </trans-unit>
        <trans-unit id="e6d662f7f0e619f7fd899a33a726a33b3d3aa333" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, this object is also iterable, behaving like a five-tuple containing &lt;code&gt;sysname&lt;/code&gt;, &lt;code&gt;nodename&lt;/code&gt;, &lt;code&gt;release&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and &lt;code&gt;machine&lt;/code&gt; in that order.</source>
          <target state="translated">이전 버전과의 호환성을 위해이 객체는 반복 가능하며 &lt;code&gt;sysname&lt;/code&gt; , &lt;code&gt;nodename&lt;/code&gt; , &lt;code&gt;release&lt;/code&gt; , &lt;code&gt;version&lt;/code&gt; 및 &lt;code&gt;machine&lt;/code&gt; 을 순서대로 포함하는 5 개의 튜플처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="c076823bfb846c5c4fa30837cd3e7ee0ac98b02c" translate="yes" xml:space="preserve">
          <source>For backwards compatibility. Calls the &lt;a href=&quot;#bdb.Bdb.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">이전 버전과의 호환성을 위해. &lt;a href=&quot;#bdb.Bdb.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt; 메소드를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="4d4b7c1d4649a90bdbfd3d547d5116f1c45cbb20" translate="yes" xml:space="preserve">
          <source>For best effect, &lt;code&gt;punctuation_chars&lt;/code&gt; should be set in conjunction with &lt;code&gt;posix=True&lt;/code&gt;. (Note that &lt;code&gt;posix=False&lt;/code&gt; is the default for &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">최상의 효과를 얻으 &lt;code&gt;punctuation_chars&lt;/code&gt; 를 &lt;code&gt;posix=True&lt;/code&gt; 와 함께 설정해야합니다 . (참고 &lt;code&gt;posix=False&lt;/code&gt; 기본값입니다 &lt;a href=&quot;#shlex.shlex&quot;&gt; &lt;code&gt;shlex&lt;/code&gt; &lt;/a&gt; .)</target>
        </trans-unit>
        <trans-unit id="09a68d06773736017bdeccd7f26b271b58e54a95" translate="yes" xml:space="preserve">
          <source>For best match with hardware and network realities, the value of &lt;em&gt;bufsize&lt;/em&gt; should be a relatively small power of 2, for example, 4096.</source>
          <target state="translated">하드웨어 및 네트워크 현실과 가장 잘 어울리려면 &lt;em&gt;bufsize&lt;/em&gt; 의 값이 비교적 작은 2의 힘 (예 : 4096)이어야합니다.</target>
        </trans-unit>
        <trans-unit id="06927785954ec46b795462603c00974a450a299b" translate="yes" xml:space="preserve">
          <source>For better multithreading performance, the Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-gil&quot;&gt;GIL&lt;/a&gt; is released for data larger than 2047 bytes at object creation or on update.</source>
          <target state="translated">멀티 스레딩 성능 향상을 위해 Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-gil&quot;&gt;GIL&lt;/a&gt; 은 객체 생성 또는 업데이트시 2047 바이트보다 큰 데이터에 대해 릴리스됩니다.</target>
        </trans-unit>
        <trans-unit id="715381a934bb4c440a80dbbaad59b7e12bba24b1" translate="yes" xml:space="preserve">
          <source>For better multithreading performance, the Python &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-gil&quot;&gt;GIL&lt;/a&gt; is released for data larger than 2047 bytes at object creation or on update.</source>
          <target state="translated">For better multithreading performance, the Python &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-gil&quot;&gt;GIL&lt;/a&gt; is released for data larger than 2047 bytes at object creation or on update.</target>
        </trans-unit>
        <trans-unit id="da8cc65e7c52fba0eeb0fc711cfc59557d96bb18" translate="yes" xml:space="preserve">
          <source>For binary mode, this function is equivalent to the &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;BZ2File(filename, mode, compresslevel=compresslevel)&lt;/code&gt;. In this case, the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments must not be provided.</source>
          <target state="translated">이진 모드의 경우이 함수는 &lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt; 생성자 인 &lt;code&gt;BZ2File(filename, mode, compresslevel=compresslevel)&lt;/code&gt; . 이 경우 &lt;em&gt;인코딩&lt;/em&gt; , &lt;em&gt;오류&lt;/em&gt; 및 &lt;em&gt;줄 바꾸기&lt;/em&gt; 인수를 제공하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="016717dd0da4a662468b6aa33cb19230e658d853" translate="yes" xml:space="preserve">
          <source>For binary mode, this function is equivalent to the &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;GzipFile(filename, mode, compresslevel)&lt;/code&gt;. In this case, the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments must not be provided.</source>
          <target state="translated">이진 모드의 경우이 함수는 &lt;a href=&quot;#gzip.GzipFile&quot;&gt; &lt;code&gt;GzipFile&lt;/code&gt; &lt;/a&gt; 생성자 인 &lt;code&gt;GzipFile(filename, mode, compresslevel)&lt;/code&gt; . 이 경우 &lt;em&gt;인코딩&lt;/em&gt; , &lt;em&gt;오류&lt;/em&gt; 및 &lt;em&gt;줄 바꾸기&lt;/em&gt; 인수를 제공하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="7ae5d93f3434b21f6c2561db832de52706b4ce5b" translate="yes" xml:space="preserve">
          <source>For binary mode, this function is equivalent to the &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; constructor: &lt;code&gt;LZMAFile(filename, mode, ...)&lt;/code&gt;. In this case, the &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt; and &lt;em&gt;newline&lt;/em&gt; arguments must not be provided.</source>
          <target state="translated">이진 모드의 경우이 함수는 &lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; &lt;/a&gt; 생성자 인 &lt;code&gt;LZMAFile(filename, mode, ...)&lt;/code&gt; . 이 경우 &lt;em&gt;인코딩&lt;/em&gt; , &lt;em&gt;오류&lt;/em&gt; 및 &lt;em&gt;줄 바꾸기&lt;/em&gt; 인수를 제공하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="7469b7ce9347b3ee71427a4976aa9d8f229bd748" translate="yes" xml:space="preserve">
          <source>For both Unix and Windows, an object can appear in &lt;em&gt;object_list&lt;/em&gt; if it is</source>
          <target state="translated">Unix와 Windows의 경우 &lt;em&gt;object_list에&lt;/em&gt; 객체가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d29f254f6cf3b4106b5e9b4c01fbfa8691dcc3d4" translate="yes" xml:space="preserve">
          <source>For both the Unix and Windows versions of the constructor, &lt;em&gt;access&lt;/em&gt; may be specified as an optional keyword parameter. &lt;em&gt;access&lt;/em&gt; accepts one of four values: &lt;code&gt;ACCESS_READ&lt;/code&gt;, &lt;code&gt;ACCESS_WRITE&lt;/code&gt;, or &lt;code&gt;ACCESS_COPY&lt;/code&gt; to specify read-only, write-through or copy-on-write memory respectively, or &lt;code&gt;ACCESS_DEFAULT&lt;/code&gt; to defer to &lt;em&gt;prot&lt;/em&gt;. &lt;em&gt;access&lt;/em&gt; can be used on both Unix and Windows. If &lt;em&gt;access&lt;/em&gt; is not specified, Windows mmap returns a write-through mapping. The initial memory values for all three access types are taken from the specified file. Assignment to an &lt;code&gt;ACCESS_READ&lt;/code&gt; memory map raises a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception. Assignment to an &lt;code&gt;ACCESS_WRITE&lt;/code&gt; memory map affects both memory and the underlying file. Assignment to an &lt;code&gt;ACCESS_COPY&lt;/code&gt; memory map affects memory but does not update the underlying file.</source>
          <target state="translated">생성자의 Unix 및 Windows 버전 모두에 대해 선택적 키워드 매개 변수로 &lt;em&gt;액세스를&lt;/em&gt; 지정할 수 있습니다. &lt;em&gt;access&lt;/em&gt; 는 읽기 전용, write-through 또는 copy-on-write 메모리를 각각 지정하는 &lt;code&gt;ACCESS_READ&lt;/code&gt; , &lt;code&gt;ACCESS_WRITE&lt;/code&gt; 또는 &lt;code&gt;ACCESS_COPY&lt;/code&gt; 값 중 하나 를 받거나 &lt;em&gt;prot&lt;/em&gt; 를 연기하기 위해 &lt;code&gt;ACCESS_DEFAULT&lt;/code&gt; 를 허용 합니다. Unix와 Windows에서 모두 &lt;em&gt;액세스&lt;/em&gt; 할 수 있습니다. 경우 &lt;em&gt;액세스가&lt;/em&gt; 지정되지 않은, 윈도우의 mmap은 쓰기를 통해 매핑을 반환합니다. 세 가지 액세스 유형 모두에 대한 초기 메모리 값은 지정된 파일에서 가져옵니다. &lt;code&gt;ACCESS_READ&lt;/code&gt; 메모리 맵에 할당 하면 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 가 발생합니다&lt;/a&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;예외. &lt;code&gt;ACCESS_WRITE&lt;/code&gt; 메모리 맵에 할당하면 메모리와 기본 파일 모두에 영향을줍니다. &lt;code&gt;ACCESS_COPY&lt;/code&gt; 메모리 맵에 지정하면 메모리에 영향을 주지만 기본 파일은 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b791b625837852700bed40630b7e80160696da6" translate="yes" xml:space="preserve">
          <source>For both use cases, a typical superclass call looks like this:</source>
          <target state="translated">두 경우 모두 일반적인 슈퍼 클래스 호출은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1d3e6b2d087066e748150284d960b4cd1ce9e119" translate="yes" xml:space="preserve">
          <source>For cases where you want passive introspection, like documentation tools, this can be inconvenient. &lt;a href=&quot;#inspect.getattr_static&quot;&gt;&lt;code&gt;getattr_static()&lt;/code&gt;&lt;/a&gt; has the same signature as &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; but avoids executing code when it fetches attributes.</source>
          <target state="translated">문서화 도구와 같은 수동적 인 검사를 원하는 경우에는 불편할 수 있습니다. &lt;a href=&quot;#inspect.getattr_static&quot;&gt; &lt;code&gt;getattr_static()&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt; 과 동일한 서명을 갖지만 속성을 가져올 때 코드 실행을 피합니다.</target>
        </trans-unit>
        <trans-unit id="8ddc27817b8adbae140b3bfe11bf584c974a746a" translate="yes" xml:space="preserve">
          <source>For client-side sockets, the context construction is lazy; if the underlying socket isn&amp;rsquo;t connected yet, the context construction will be performed after &lt;code&gt;connect()&lt;/code&gt; is called on the socket. For server-side sockets, if the socket has no remote peer, it is assumed to be a listening socket, and the server-side SSL wrapping is automatically performed on client connections accepted via the &lt;code&gt;accept()&lt;/code&gt; method. The method may raise &lt;a href=&quot;#ssl.SSLError&quot;&gt;&lt;code&gt;SSLError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">클라이언트 측 소켓의 경우 컨텍스트 구성이 게으 릅니다. 기본 소켓이 아직 연결되지 않은 경우 소켓에서 &lt;code&gt;connect()&lt;/code&gt; 가 호출 된 후 컨텍스트 구성이 수행됩니다 . 서버 측 소켓의 경우, 소켓에 원격 피어가없는 경우 청취 소켓 인 것으로 가정하고 &lt;code&gt;accept()&lt;/code&gt; 메소드 를 통해 승인 된 클라이언트 연결에서 서버 측 SSL 랩핑이 자동으로 수행됩니다 . 이 메소드는 &lt;a href=&quot;#ssl.SSLError&quot;&gt; &lt;code&gt;SSLError&lt;/code&gt; 를&lt;/a&gt; 일으킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="85865a7d79dbbf1d365d44b34b62ed727d6e7547" translate="yes" xml:space="preserve">
          <source>For code which doesn&amp;rsquo;t use type annotations, the appropriate type argument can be passed explicitly to the decorator itself:</source>
          <target state="translated">타입 주석을 사용하지 않는 코드의 경우 적절한 타입 인수를 데코레이터 자체에 명시 적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bfd91557db31a101da93b9f75a0634e810c53a1" translate="yes" xml:space="preserve">
          <source>For common and simple use cases, no other functionality is required. There are, however, some dataclass features that require additional per-field information. To satisfy this need for additional information, you can replace the default field value with a call to the provided &lt;a href=&quot;#dataclasses.field&quot;&gt;&lt;code&gt;field()&lt;/code&gt;&lt;/a&gt; function. For example:</source>
          <target state="translated">일반적이고 간단한 사용 사례의 경우 다른 기능이 필요하지 않습니다. 그러나 추가 필드 당 정보가 필요한 일부 데이터 클래스 기능이 있습니다. 추가 정보에 대한 이러한 요구를 충족시키기 위해 기본 필드 값을 제공된 &lt;a href=&quot;#dataclasses.field&quot;&gt; &lt;code&gt;field()&lt;/code&gt; &lt;/a&gt; 함수에 대한 호출로 바꿀 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="87705f106118f19bf390f2a77a7cb271a9b8c917" translate="yes" xml:space="preserve">
          <source>For comparison, &lt;code&gt;split('\n')&lt;/code&gt; gives:</source>
          <target state="translated">비교를 위해 &lt;code&gt;split('\n')&lt;/code&gt; 은 다음을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f0cff29498c4ef122a86c33568b064156568a59a" translate="yes" xml:space="preserve">
          <source>For compatibility with this older module, the function &lt;code&gt;Catalog()&lt;/code&gt; is an alias for the &lt;a href=&quot;#gettext.translation&quot;&gt;&lt;code&gt;translation()&lt;/code&gt;&lt;/a&gt; function described above.</source>
          <target state="translated">이 이전 모듈과의 호환성을 위해 &lt;code&gt;Catalog()&lt;/code&gt; &lt;a href=&quot;#gettext.translation&quot;&gt; &lt;code&gt;translation()&lt;/code&gt; &lt;/a&gt; 함수는 위에서 설명한 translation () 함수 의 별명입니다 .</target>
        </trans-unit>
        <trans-unit id="8dd5c7731e7c03d28553d024eb738419b5d7feec" translate="yes" xml:space="preserve">
          <source>For compound field names, these functions are only called for the first component of the field name; subsequent components are handled through normal attribute and indexing operations.</source>
          <target state="translated">복합 필드 이름의 경우이 함수는 필드 이름의 첫 번째 구성 요소에 대해서만 호출됩니다. 후속 구성 요소는 일반 특성 및 인덱싱 작업을 통해 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="1c274cab06d9630687c3dabb1a223e791637c64c" translate="yes" xml:space="preserve">
          <source>For convenience, if the &lt;em&gt;value&lt;/em&gt; passed to &lt;a href=&quot;#email.utils.collapse_rfc2231_value&quot;&gt;&lt;code&gt;collapse_rfc2231_value()&lt;/code&gt;&lt;/a&gt; is not a tuple, it should be a string and it is returned unquoted.</source>
          <target state="translated">편의상 &lt;a href=&quot;#email.utils.collapse_rfc2231_value&quot;&gt; &lt;code&gt;collapse_rfc2231_value()&lt;/code&gt; &lt;/a&gt; 전달 된 &lt;em&gt;값&lt;/em&gt; 이 튜플이 아닌 경우 문자열이어야하며 따옴표가없는 상태로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="de926a3a0ae98ea1fe4e0f3b5685a3731bae1603" translate="yes" xml:space="preserve">
          <source>For convenience, you want the &lt;code&gt;_()&lt;/code&gt; function to be installed in Python&amp;rsquo;s builtins namespace, so it is easily accessible in all modules of your application.</source>
          <target state="translated">편의상 &lt;code&gt;_()&lt;/code&gt; 함수를 Python의 내장 네임 스페이스에 설치하면 응용 프로그램의 모든 모듈에서 쉽게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="210ca2c9386211164bf808be67ab50aac45b5cfd" translate="yes" xml:space="preserve">
          <source>For deep customizations of import, you typically want to implement an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;. This means managing both the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; side of things. For finders there are two flavours to choose from depending on your needs: a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. The former is what you would put on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; while the latter is what you create using a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-hook&quot;&gt;path entry hook&lt;/a&gt; on &lt;a href=&quot;sys#sys.path_hooks&quot;&gt;&lt;code&gt;sys.path_hooks&lt;/code&gt;&lt;/a&gt; which works with &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; entries to potentially create a finder. This example will show you how to register your own importers so that import will use them (for creating an importer for yourself, read the documentation for the appropriate classes defined within this package):</source>
          <target state="translated">수입의 깊은 사용자 정의의 경우, 일반적으로 구현하려는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;수입을&lt;/a&gt; . 이는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-finder&quot;&gt;파인더&lt;/a&gt; 와 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 측면을 모두 관리하는 것을 의미 합니다. 파인더의 경우 필요에 따라 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-meta-path-finder&quot;&gt;메타 경로 파인더&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-finder&quot;&gt;경로 항목 파인더&lt;/a&gt; 두 가지를 선택할 수 있습니다 . 전자는 &lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; 에&lt;/a&gt; 배치 하고 후자는 &lt;a href=&quot;sys#sys.path_hooks&quot;&gt; &lt;code&gt;sys.path_hooks&lt;/code&gt; &lt;/a&gt; 와 작동하는 &lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; _hooks&lt;/a&gt; 의 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry-hook&quot;&gt;경로 입력 후크&lt;/a&gt; 를 사용하여 생성하는 것입니다.잠재적으로 파인더를 작성하기위한 항목. 이 예제는 수입업자가 수입업자를 사용하도록 수입업자를 등록하는 방법을 보여줍니다 (수입업자를 직접 만들려면이 패키지에 정의 된 적절한 클래스의 문서를 읽으십시오).</target>
        </trans-unit>
        <trans-unit id="f9ade3602a0b0df7b0e7be7869bc08b3bdafc500" translate="yes" xml:space="preserve">
          <source>For deep customizations of import, you typically want to implement an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;. This means managing both the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; side of things. For finders there are two flavours to choose from depending on your needs: a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; or a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. The former is what you would put on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; while the latter is what you create using a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry-hook&quot;&gt;path entry hook&lt;/a&gt; on &lt;a href=&quot;sys#sys.path_hooks&quot;&gt;&lt;code&gt;sys.path_hooks&lt;/code&gt;&lt;/a&gt; which works with &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; entries to potentially create a finder. This example will show you how to register your own importers so that import will use them (for creating an importer for yourself, read the documentation for the appropriate classes defined within this package):</source>
          <target state="translated">For deep customizations of import, you typically want to implement an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;. This means managing both the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-finder&quot;&gt;finder&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; side of things. For finders there are two flavours to choose from depending on your needs: a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finder&lt;/a&gt; or a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry-finder&quot;&gt;path entry finder&lt;/a&gt;. The former is what you would put on &lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt; while the latter is what you create using a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry-hook&quot;&gt;path entry hook&lt;/a&gt; on &lt;a href=&quot;sys#sys.path_hooks&quot;&gt; &lt;code&gt;sys.path_hooks&lt;/code&gt; &lt;/a&gt; which works with &lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt; entries to potentially create a finder. This example will show you how to register your own importers so that import will use them (for creating an importer for yourself, read the documentation for the appropriate classes defined within this package):</target>
        </trans-unit>
        <trans-unit id="0c7f0d88ba41bf3eb9635ed30d7c7babf6caf663" translate="yes" xml:space="preserve">
          <source>For each argument, if the value is not found, return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">각 인수에 대해 값을 찾을 수 없으면 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="ac0a10e6ce55d9d18d13c0fc23d96ba811fa6c93" translate="yes" xml:space="preserve">
          <source>For each character, there are two normal forms: normal form C and normal form D. Normal form D (NFD) is also known as canonical decomposition, and translates each character into its decomposed form. Normal form C (NFC) first applies a canonical decomposition, then composes pre-combined characters again.</source>
          <target state="translated">각 문자마다 정규 형식 C와 일반 형식 D의 두 가지 정규 형식이 있습니다. 정규 형식 D (NFD)는 정식 분해라고도하며 각 문자를 분해 형식으로 변환합니다. 일반 형식 C (NFC)는 먼저 표준 분해를 적용한 다음 사전 조합 된 문자를 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="5fd45e0da93f8a3a502662f383317adb8f1a3088" translate="yes" xml:space="preserve">
          <source>For each item in the keyword argument dictionary &lt;em&gt;_params&lt;/em&gt;, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers). Normally, the parameter will be added as &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; unless the value is &lt;code&gt;None&lt;/code&gt;, in which case only the key will be added.</source>
          <target state="translated">키워드 인수 사전 &lt;em&gt;_params&lt;/em&gt; 의 각 항목에 대해 키는 매개 변수 이름으로 사용되며 밑줄은 대시로 변환됩니다 (대시 &lt;em&gt;문자&lt;/em&gt; 는 파이썬 식별자에서 &lt;em&gt;유효하지&lt;/em&gt; 않기 때문에). 일반적으로 값이 &lt;code&gt;None&lt;/code&gt; 이 아니면 매개 변수는 &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; 로 추가됩니다.이 경우 키만 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="d736bcd37b51fd426b74cb1fc89bc382bb0f2684" translate="yes" xml:space="preserve">
          <source>For each item in the keyword argument dictionary &lt;em&gt;_params&lt;/em&gt;, the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers). Normally, the parameter will be added as &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; unless the value is &lt;code&gt;None&lt;/code&gt;, in which case only the key will be added. If the value contains non-ASCII characters, it can be specified as a three tuple in the format &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt;, where &lt;code&gt;CHARSET&lt;/code&gt; is a string naming the charset to be used to encode the value, &lt;code&gt;LANGUAGE&lt;/code&gt; can usually be set to &lt;code&gt;None&lt;/code&gt; or the empty string (see &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; for other possibilities), and &lt;code&gt;VALUE&lt;/code&gt; is the string value containing non-ASCII code points. If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; format using a &lt;code&gt;CHARSET&lt;/code&gt; of &lt;code&gt;utf-8&lt;/code&gt; and a &lt;code&gt;LANGUAGE&lt;/code&gt; of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">키워드 인수 사전 &lt;em&gt;_params&lt;/em&gt; 의 각 항목에 대해 키는 매개 변수 이름으로 사용되며 밑줄은 대시로 변환됩니다 (대표는 파이썬 식별자에서 &lt;em&gt;유효하지&lt;/em&gt; 않기 때문에). 일반적으로 값이 &lt;code&gt;None&lt;/code&gt; 이 아니면 매개 변수는 &lt;code&gt;key=&quot;value&quot;&lt;/code&gt; 로 추가됩니다.이 경우 키만 추가됩니다. 값에 ASCII가 아닌 문자가 포함 된 경우 &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt; 형식으로 3 개의 튜플로 지정할 수 있습니다 . 여기서 &lt;code&gt;CHARSET&lt;/code&gt; 은 값을 인코딩하는 데 사용되는 문자 세트의 이름을 지정하는 문자열이며 &lt;code&gt;LANGUAGE&lt;/code&gt; 는 일반적으로 &lt;code&gt;None&lt;/code&gt; 또는 빈 문자열 ( 다른 가능성 은 &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; 참조 ) 및 &lt;code&gt;VALUE&lt;/code&gt; &lt;strong&gt;&lt;/strong&gt;비 ASCII 코드 포인트를 포함하는 문자열 값입니다. 세 튜플이 통과하고 값이 비 ASCII 문자가 포함되어 있지 않은 경우, 자동으로 인코딩 &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; 사용하여 형식 &lt;code&gt;CHARSET&lt;/code&gt; 의 &lt;code&gt;utf-8&lt;/code&gt; 과 &lt;code&gt;LANGUAGE&lt;/code&gt; 의 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="056b6b17fe21a908443c2aef27973cb1a8a225e3" translate="yes" xml:space="preserve">
          <source>For each of the two dimensions, the environment variable, &lt;code&gt;COLUMNS&lt;/code&gt; and &lt;code&gt;LINES&lt;/code&gt; respectively, is checked. If the variable is defined and the value is a positive integer, it is used.</source>
          <target state="translated">두 가지 차원 각각에 대해 환경 변수 &lt;code&gt;COLUMNS&lt;/code&gt; 및 &lt;code&gt;LINES&lt;/code&gt; 가 각각 확인됩니다. 변수가 정의되고 값이 양의 정수이면 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="322ab30d52718f1547b8e17f1897a238688c4ba6" translate="yes" xml:space="preserve">
          <source>For each signal there is a flag and a trap enabler. When a signal is encountered, its flag is set to one, then, if the trap enabler is set to one, an exception is raised. Flags are sticky, so the user needs to reset them before monitoring a calculation.</source>
          <target state="translated">각 신호에는 플래그와 트랩 인 에이 블러가 있습니다. 신호가 발생하면 플래그가 1로 설정되고, 트랩 작동기가 1로 설정되면 예외가 발생합니다. 플래그는 고정되어 있으므로 사용자는 계산을 모니터링하기 전에 재설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="06f9e39145b4348109479e7f9f896d505ac8e519" translate="yes" xml:space="preserve">
          <source>For encoding, &lt;em&gt;error_handler&lt;/em&gt; will be called with a &lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt;&lt;code&gt;UnicodeEncodeError&lt;/code&gt;&lt;/a&gt; instance, which contains information about the location of the error. The error handler must either raise this or a different exception, or return a tuple with a replacement for the unencodable part of the input and a position where encoding should continue. The replacement may be either &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;. If the replacement is bytes, the encoder will simply copy them into the output buffer. If the replacement is a string, the encoder will encode the replacement. Encoding continues on original input at the specified position. Negative position values will be treated as being relative to the end of the input string. If the resulting position is out of bound an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">인코딩의 경우 &lt;em&gt;error_handler&lt;/em&gt; 는 오류 위치에 대한 정보가 포함 된 &lt;a href=&quot;exceptions#UnicodeEncodeError&quot;&gt; &lt;code&gt;UnicodeEncodeError&lt;/code&gt; &lt;/a&gt; 인스턴스 와 함께 호출됩니다 . 오류 처리기는이 예외 또는 다른 예외를 발생 시키거나 입력 할 수없는 입력 부분과 인코딩이 계속되는 위치를 대체하여 튜플을 반환해야합니다. 대체는 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 일 수 있습니다 . 대체가 바이트 인 경우 인코더는이를 단순히 출력 버퍼에 복사합니다. 교체가 문자열 인 경우 인코더는 교체를 인코딩합니다. 지정된 위치에서 원래 입력으로 인코딩이 계속됩니다. 음수 위치 값은 입력 문자열의 끝을 기준으로 처리됩니다. 결과 위치가 경계를 벗어난 경우&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="21600918467446226ee8a32f480178bbdbb3fcd4" translate="yes" xml:space="preserve">
          <source>For ensuring that the mock objects in your tests have the same api as the objects they are replacing, you can use &lt;a href=&quot;#auto-speccing&quot;&gt;auto-speccing&lt;/a&gt;. Auto-speccing can be done through the &lt;em&gt;autospec&lt;/em&gt; argument to patch, or the &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; function. Auto-speccing creates mock objects that have the same attributes and methods as the objects they are replacing, and any functions and methods (including constructors) have the same call signature as the real object.</source>
          <target state="translated">테스트의 모의 객체가 대체하는 객체와 동일한 API를 &lt;a href=&quot;#auto-speccing&quot;&gt;갖도록 자동 지정&lt;/a&gt; 을 사용할 수 있습니다 . 자동 speccing는 통해 수행 할 수 있습니다 &lt;em&gt;autospec&lt;/em&gt; 패치에 인수, 또는 &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt; 함수입니다. 자동 지정은 대체하는 객체와 동일한 속성 및 메소드를 갖는 모의 객체를 생성하며, 생성자를 포함한 모든 함수 및 메소드는 실제 객체와 동일한 호출 서명을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="15fc0d7566d96f6001912c52d120cbb3c0026454" translate="yes" xml:space="preserve">
          <source>For equality comparison (&lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;), both the IP address and network must be the same for the objects to be equal. An interface will not compare equal to any address or network object.</source>
          <target state="translated">동등 비교 ( &lt;code&gt;==&lt;/code&gt; 및 &lt;code&gt;!=&lt;/code&gt; )의 경우, 오브젝트가 동일하도록 IP 주소와 네트워크가 동일해야합니다. 인터페이스는 주소 또는 네트워크 객체와 같지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dc3c09a115b4ee611eb7505826a4fa0c2a8495d8" translate="yes" xml:space="preserve">
          <source>For example</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="9f92850155d4633eac2a36ebb33b8f03c14d5123" translate="yes" xml:space="preserve">
          <source>For example usage, see the implementation of the &lt;a href=&quot;test#module-test&quot;&gt;&lt;code&gt;test()&lt;/code&gt;&lt;/a&gt; function invocation in the &lt;a href=&quot;#module-http.server&quot;&gt;&lt;code&gt;http.server&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">사용 예 는 &lt;a href=&quot;#module-http.server&quot;&gt; &lt;code&gt;http.server&lt;/code&gt; &lt;/a&gt; 모듈 에서 &lt;a href=&quot;test#module-test&quot;&gt; &lt;code&gt;test()&lt;/code&gt; &lt;/a&gt; 함수 호출 구현을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6db6725e9e7d5c088630e348048d1e73fc7657d3" translate="yes" xml:space="preserve">
          <source>For example,</source>
          <target state="translated">예를 들어</target>
        </trans-unit>
        <trans-unit id="6cd51af621b973c244416c286e704a84b26141f1" translate="yes" xml:space="preserve">
          <source>For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004:</source>
          <target state="translated">예를 들어 2004 년은 목요일에 시작되므로 2004 년 ISO 연도의 첫 번째주는 2003 년 12 월 29 일 월요일에 시작하여 2004 년 1 월 4 일 일요일에 끝납니다.</target>
        </trans-unit>
        <trans-unit id="399622d81e44a5a0690710d1c52927972596121e" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;-k foo&lt;/code&gt; matches &lt;code&gt;foo_tests.SomeTest.test_something&lt;/code&gt;, &lt;code&gt;bar_tests.SomeTest.test_foo&lt;/code&gt;, but not &lt;code&gt;bar_tests.FooTest.test_something&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;-k foo&lt;/code&gt; 일치 &lt;code&gt;foo_tests.SomeTest.test_something&lt;/code&gt; , &lt;code&gt;bar_tests.SomeTest.test_foo&lt;/code&gt; 있지만 &lt;code&gt;bar_tests.FooTest.test_something&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="0d14f109212981d9e9018a7e899a21c38af527e7" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;cmpfiles('a', 'b', ['c', 'd/e'])&lt;/code&gt; will compare &lt;code&gt;a/c&lt;/code&gt; with &lt;code&gt;b/c&lt;/code&gt; and &lt;code&gt;a/d/e&lt;/code&gt; with &lt;code&gt;b/d/e&lt;/code&gt;. &lt;code&gt;'c'&lt;/code&gt; and &lt;code&gt;'d/e'&lt;/code&gt; will each be in one of the three returned lists.</source>
          <target state="translated">예를 들어 &lt;code&gt;cmpfiles('a', 'b', ['c', 'd/e'])&lt;/code&gt; 는 &lt;code&gt;a/c&lt;/code&gt; 와 &lt;code&gt;b/c&lt;/code&gt; 를 비교 하고 &lt;code&gt;a/d/e&lt;/code&gt; 와 &lt;code&gt;b/d/e&lt;/code&gt; 를 비교 합니다. &lt;code&gt;'c'&lt;/code&gt; 와 &lt;code&gt;'d/e'&lt;/code&gt; 는 각각 3 개의 반환 된 목록 중 하나에 있습니다.</target>
        </trans-unit>
        <trans-unit id="a95470c1be0b3663fdee2e3d3b9777cc1e0d9fa2" translate="yes" xml:space="preserve">
          <source>For example, &lt;code&gt;signal.pthread_sigmask(signal.SIG_BLOCK, [])&lt;/code&gt; reads the signal mask of the calling thread.</source>
          <target state="translated">예를 들어 &lt;code&gt;signal.pthread_sigmask(signal.SIG_BLOCK, [])&lt;/code&gt; 는 호출 스레드의 신호 마스크를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="f0f5080e6265a4c4411bd9b24c300325fec45e78" translate="yes" xml:space="preserve">
          <source>For example, CD quality audio has a sample size of two bytes (16 bits), uses two channels (stereo) and has a frame rate of 44,100 frames/second. This gives a frame size of 4 bytes (2*2), and a second&amp;rsquo;s worth occupies 2*2*44100 bytes (176,400 bytes).</source>
          <target state="translated">예를 들어, CD 품질 오디오의 샘플 크기는 2 바이트 (16 비트)이고 2 채널 (스테레오)을 사용하며 초당 프레임 속도는 44,100 프레임입니다. 이것은 4 바이트 (2 * 2)의 프레임 크기를 제공하고 초의 가치는 2 * 2 * 44100 바이트 (176,400 바이트)를 차지합니다.</target>
        </trans-unit>
        <trans-unit id="5704afb176cb5333d5bd0ec1e89e920326a56e42" translate="yes" xml:space="preserve">
          <source>For example, a group of files can be opened as an &amp;ldquo;all or nothing&amp;rdquo; operation as follows:</source>
          <target state="translated">예를 들어, 파일 그룹을 다음과 같이 &quot;전부 또는 전무&quot;작업으로 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68e2f1b9586e1e059827e751c317d7ee5e2879b3" translate="yes" xml:space="preserve">
          <source>For example, a set of files may easily be handled in a single with statement as follows:</source>
          <target state="translated">예를 들어, 파일 세트는 다음과 같이 단일 with 문으로 쉽게 처리 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70d481802ecd969c892c69fa7f05b8bba9e4b621" translate="yes" xml:space="preserve">
          <source>For example, a subclass of &lt;code&gt;DictConfigurator&lt;/code&gt; could call &lt;code&gt;DictConfigurator.__init__()&lt;/code&gt; in its own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt;, then set up custom prefixes which would be usable in the subsequent &lt;code&gt;configure()&lt;/code&gt; call. &lt;code&gt;dictConfigClass&lt;/code&gt; would be bound to this new subclass, and then &lt;a href=&quot;#logging.config.dictConfig&quot;&gt;&lt;code&gt;dictConfig()&lt;/code&gt;&lt;/a&gt; could be called exactly as in the default, uncustomized state.</source>
          <target state="translated">예를 들어,의 서브 클래스 &lt;code&gt;DictConfigurator&lt;/code&gt; 가 호출 할 수 &lt;code&gt;DictConfigurator.__init__()&lt;/code&gt; 자신의 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt; , 그 이후에 가능한 것입니다 사용자 정의 접두사 설정 &lt;code&gt;configure()&lt;/code&gt; 호출. &lt;code&gt;dictConfigClass&lt;/code&gt; 는이 새 서브 클래스에 바인드 된 후 사용자 정의되지 않은 기본 상태에서와 동일하게 &lt;a href=&quot;#logging.config.dictConfig&quot;&gt; &lt;code&gt;dictConfig()&lt;/code&gt; &lt;/a&gt; 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec08404cba481f07cdcda04936e022a2f9bdc289" translate="yes" xml:space="preserve">
          <source>For example, a subclass of &lt;code&gt;DictConfigurator&lt;/code&gt; could call &lt;code&gt;DictConfigurator.__init__()&lt;/code&gt; in its own &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt;, then set up custom prefixes which would be usable in the subsequent &lt;code&gt;configure()&lt;/code&gt; call. &lt;code&gt;dictConfigClass&lt;/code&gt; would be bound to this new subclass, and then &lt;a href=&quot;#logging.config.dictConfig&quot;&gt;&lt;code&gt;dictConfig()&lt;/code&gt;&lt;/a&gt; could be called exactly as in the default, uncustomized state.</source>
          <target state="translated">For example, a subclass of &lt;code&gt;DictConfigurator&lt;/code&gt; could call &lt;code&gt;DictConfigurator.__init__()&lt;/code&gt; in its own &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;, then set up custom prefixes which would be usable in the subsequent &lt;code&gt;configure()&lt;/code&gt; call. &lt;code&gt;dictConfigClass&lt;/code&gt; would be bound to this new subclass, and then &lt;a href=&quot;#logging.config.dictConfig&quot;&gt; &lt;code&gt;dictConfig()&lt;/code&gt; &lt;/a&gt; could be called exactly as in the default, uncustomized state.</target>
        </trans-unit>
        <trans-unit id="1e80a99504abd47149c0fce72f82153cd68e1294" translate="yes" xml:space="preserve">
          <source>For example, an open source conference has 750 attendees and two rooms with a 500 person capacity. There is a talk about Python and another about Ruby. In previous conferences, 65% of the attendees preferred to listen to Python talks. Assuming the population preferences haven&amp;rsquo;t changed, what is the probability that the Python room will stay within its capacity limits?</source>
          <target state="translated">For example, an open source conference has 750 attendees and two rooms with a 500 person capacity. There is a talk about Python and another about Ruby. In previous conferences, 65% of the attendees preferred to listen to Python talks. Assuming the population preferences haven&amp;rsquo;t changed, what is the probability that the Python room will stay within its capacity limits?</target>
        </trans-unit>
        <trans-unit id="f511873d3631a9f41e0087f05beaf56c5c7a1720" translate="yes" xml:space="preserve">
          <source>For example, consider a directory containing the following files: &lt;code&gt;1.gif&lt;/code&gt;, &lt;code&gt;2.txt&lt;/code&gt;, &lt;code&gt;card.gif&lt;/code&gt; and a subdirectory &lt;code&gt;sub&lt;/code&gt; which contains only the file &lt;code&gt;3.txt&lt;/code&gt;. &lt;a href=&quot;#module-glob&quot;&gt;&lt;code&gt;glob()&lt;/code&gt;&lt;/a&gt; will produce the following results. Notice how any leading components of the path are preserved.</source>
          <target state="translated">예를 들어, 다음과 같은 파일이 들어있는 디렉토리 고려 &lt;code&gt;1.gif&lt;/code&gt; , &lt;code&gt;2.txt&lt;/code&gt; , &lt;code&gt;card.gif&lt;/code&gt; 및 하위 디렉토리 &lt;code&gt;sub&lt;/code&gt; 에만 파일이 들어 &lt;code&gt;3.txt&lt;/code&gt; 를 . &lt;a href=&quot;#module-glob&quot;&gt; &lt;code&gt;glob()&lt;/code&gt; &lt;/a&gt; 는 다음과 같은 결과를 생성합니다. 경로의 주요 구성 요소가 어떻게 보존되는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a8116b8e84beaa829f95a74354e47e686f4f65c2" translate="yes" xml:space="preserve">
          <source>For example, given &lt;a href=&quot;https://blog.prepscholar.com/sat-standard-deviation&quot;&gt;historical data for SAT exams&lt;/a&gt; showing that scores are normally distributed with a mean of 1060 and a standard deviation of 192, determine the percentage of students with test scores between 1100 and 1200, after rounding to the nearest whole number:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://blog.prepscholar.com/sat-standard-deviation&quot;&gt;SAT 시험의 과거 데이터에서&lt;/a&gt; 점수가 보통 평균 1060이고 표준 편차가 192로 분포되어 있음을 보여 주면 가장 가까운 정수로 반올림 한 후 시험 점수가 1100에서 1200 사이 인 학생의 비율을 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="b8574bc2ba0973b99cc5a72da8e088e6b7231abf" translate="yes" xml:space="preserve">
          <source>For example, given &lt;a href=&quot;https://nces.ed.gov/programs/digest/d17/tables/dt17_226.40.asp&quot;&gt;historical data for SAT exams&lt;/a&gt; showing that scores are normally distributed with a mean of 1060 and a standard deviation of 195, determine the percentage of students with test scores between 1100 and 1200, after rounding to the nearest whole number:</source>
          <target state="translated">For example, given &lt;a href=&quot;https://nces.ed.gov/programs/digest/d17/tables/dt17_226.40.asp&quot;&gt;historical data for SAT exams&lt;/a&gt; showing that scores are normally distributed with a mean of 1060 and a standard deviation of 195, determine the percentage of students with test scores between 1100 and 1200, after rounding to the nearest whole number:</target>
        </trans-unit>
        <trans-unit id="f059697aa8708c124c5ca5ed69598445d650d373" translate="yes" xml:space="preserve">
          <source>For example, here is how you would use the &lt;a href=&quot;smtplib#smtplib.SMTP&quot;&gt;&lt;code&gt;smtplib.SMTP&lt;/code&gt;&lt;/a&gt; class to create a trusted, secure connection to a SMTP server:</source>
          <target state="translated">예를 들어 다음은 &lt;a href=&quot;smtplib#smtplib.SMTP&quot;&gt; &lt;code&gt;smtplib.SMTP&lt;/code&gt; &lt;/a&gt; 클래스를 사용하여 SMTP 서버에 대한 신뢰할 수있는 보안 연결을 만드는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="4cd64048d86f14def679c676cd5c8b195e60a3d7" translate="yes" xml:space="preserve">
          <source>For example, if &lt;a href=&quot;stdtypes#class.__mro__&quot;&gt;&lt;code&gt;__mro__&lt;/code&gt;&lt;/a&gt; of &lt;em&gt;object-or-type&lt;/em&gt; is &lt;code&gt;D -&amp;gt; B -&amp;gt; C -&amp;gt; A -&amp;gt; object&lt;/code&gt; and the value of &lt;em&gt;type&lt;/em&gt; is &lt;code&gt;B&lt;/code&gt;, then &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; searches &lt;code&gt;C -&amp;gt; A -&amp;gt; object&lt;/code&gt;.</source>
          <target state="translated">예를 들어, &lt;a href=&quot;stdtypes#class.__mro__&quot;&gt; &lt;code&gt;__mro__&lt;/code&gt; &lt;/a&gt; 의 &lt;em&gt;개체 또는 유형이&lt;/em&gt; 있다 &lt;code&gt;D -&amp;gt; B -&amp;gt; C -&amp;gt; A -&amp;gt; object&lt;/code&gt; 및 값 &lt;em&gt;유형&lt;/em&gt; 인 &lt;code&gt;B&lt;/code&gt; , 다음 &lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; 검색 &lt;code&gt;C -&amp;gt; A -&amp;gt; object&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dc7ebb76fef1bf5301bb1689de9385336d50d062" translate="yes" xml:space="preserve">
          <source>For example, if &lt;em&gt;namespace_separator&lt;/em&gt; is set to a space character (&lt;code&gt;' '&lt;/code&gt;) and the following document is parsed:</source>
          <target state="translated">예를 들어 &lt;em&gt;namespace_separator&lt;/em&gt; 가 공백 문자 ( &lt;code&gt;' '&lt;/code&gt; )로 설정되고 다음 문서가 구문 분석되는 경우 :</target>
        </trans-unit>
        <trans-unit id="61bccf6891322558e7f0a44662ff24780b7e5f8f" translate="yes" xml:space="preserve">
          <source>For example, if you have a module &lt;code&gt;SampleTests&lt;/code&gt; containing a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;-derived class &lt;code&gt;SampleTestCase&lt;/code&gt; with three test methods (&lt;code&gt;test_one()&lt;/code&gt;, &lt;code&gt;test_two()&lt;/code&gt;, and &lt;code&gt;test_three()&lt;/code&gt;), the specifier &lt;code&gt;'SampleTests.SampleTestCase'&lt;/code&gt; would cause this method to return a suite which will run all three test methods. Using the specifier &lt;code&gt;'SampleTests.SampleTestCase.test_two'&lt;/code&gt; would cause it to return a test suite which will run only the &lt;code&gt;test_two()&lt;/code&gt; test method. The specifier can refer to modules and packages which have not been imported; they will be imported as a side-effect.</source>
          <target state="translated">예를 들어, 세 가지 테스트 메소드 ( &lt;code&gt;test_one()&lt;/code&gt; , &lt;code&gt;test_two()&lt;/code&gt; 및 &lt;code&gt;test_three()&lt;/code&gt; ) 가있는 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 파생 클래스 &lt;code&gt;SampleTestCase&lt;/code&gt; 를 포함 하는 모듈 &lt;code&gt;SampleTests&lt;/code&gt; 가있는 경우 지정자 &lt;code&gt;'SampleTests.SampleTestCase'&lt;/code&gt; 는이 메소드가 스위트를 리턴하게합니다. 세 가지 테스트 방법을 모두 실행합니다. 지정자 &lt;code&gt;'SampleTests.SampleTestCase.test_two'&lt;/code&gt; 를 사용하면 &lt;code&gt;test_two()&lt;/code&gt; 테스트 메소드 만 실행하는 테스트 스위트가 리턴됩니다 . 지정자는 가져 오지 않은 모듈 및 패키지를 참조 할 수 있습니다. 그들은 부작용으로 수입 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="d96a9ad58f887553f3d83a9670b407c13d2d7fee" translate="yes" xml:space="preserve">
          <source>For example, if you have a number of large binary image objects, you may wish to associate a name with each. If you used a Python dictionary to map names to images, or images to names, the image objects would remain alive just because they appeared as values or keys in the dictionaries. The &lt;a href=&quot;#weakref.WeakKeyDictionary&quot;&gt;&lt;code&gt;WeakKeyDictionary&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt;&lt;code&gt;WeakValueDictionary&lt;/code&gt;&lt;/a&gt; classes supplied by the &lt;a href=&quot;#module-weakref&quot;&gt;&lt;code&gt;weakref&lt;/code&gt;&lt;/a&gt; module are an alternative, using weak references to construct mappings that don&amp;rsquo;t keep objects alive solely because they appear in the mapping objects. If, for example, an image object is a value in a &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt;&lt;code&gt;WeakValueDictionary&lt;/code&gt;&lt;/a&gt;, then when the last remaining references to that image object are the weak references held by weak mappings, garbage collection can reclaim the object, and its corresponding entries in weak mappings are simply deleted.</source>
          <target state="translated">예를 들어, 큰 이진 이미지 객체가 여러 개인 경우 이름을 각 객체와 연결할 수 있습니다. Python 사전을 사용하여 이름을 이미지에 매핑하거나 이미지를 이름에 매핑하는 경우 이미지 개체는 사전에 값 또는 키로 표시 되었기 때문에 활성 상태로 유지됩니다. &lt;a href=&quot;#weakref.WeakKeyDictionary&quot;&gt; &lt;code&gt;WeakKeyDictionary&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt; &lt;code&gt;WeakValueDictionary&lt;/code&gt; &lt;/a&gt; 에 의해 제공되는 클래스 &lt;a href=&quot;#module-weakref&quot;&gt; &lt;code&gt;weakref&lt;/code&gt; &lt;/a&gt; 모듈은 살아 전적으로 그들이 매핑 객체에 표시하기 때문에 개체를 유지하지 않는 매핑을 구성하기 위해 약한 참조를 사용하여, 대안입니다. 예를 들어 이미지 객체가 &lt;a href=&quot;#weakref.WeakValueDictionary&quot;&gt; &lt;code&gt;WeakValueDictionary&lt;/code&gt; &lt;/a&gt; 의 값인 경우그런 다음 해당 이미지 객체에 대한 마지막 남은 참조가 약한 매핑이 보유한 약한 참조 인 경우 가비지 수집은 객체를 회수 할 수 있으며 약한 매핑의 해당 항목은 단순히 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="f8ddfc4247d70e8198d393848e8a880bb9e365df" translate="yes" xml:space="preserve">
          <source>For example, if you want to pass several items to the constructor, but only want one of them to be the value:</source>
          <target state="translated">예를 들어, 여러 항목을 생성자에 전달하고 싶지만 그 중 하나만 값이되도록하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="f2d533d473fe1f989a25757c7b31086d2cd9c1ac" translate="yes" xml:space="preserve">
          <source>For example, it is sometimes useful to wrap functions or groups of statements with a logger that can track the time of entry and time of exit. Rather than writing both a function decorator and a context manager for the task, inheriting from &lt;a href=&quot;#contextlib.ContextDecorator&quot;&gt;&lt;code&gt;ContextDecorator&lt;/code&gt;&lt;/a&gt; provides both capabilities in a single definition:</source>
          <target state="translated">예를 들어, 입력 시간 및 종료 시간을 추적 할 수있는 로거로 함수 또는 명령문 그룹을 랩핑하는 것이 유용한 경우가 있습니다. 작업에 대한 함수 데코레이터와 컨텍스트 관리자를 모두 작성하는 대신 &lt;a href=&quot;#contextlib.ContextDecorator&quot;&gt; &lt;code&gt;ContextDecorator&lt;/code&gt; &lt;/a&gt; 에서 상속 하면 두 가지 기능을 단일 정의로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1b1af41f1fcd195807fbd625eccde42ac4725e38" translate="yes" xml:space="preserve">
          <source>For example, one auditing event is named &lt;code&gt;os.chdir&lt;/code&gt;. This event has one argument called &lt;em&gt;path&lt;/em&gt; that will contain the requested new working directory.</source>
          <target state="translated">For example, one auditing event is named &lt;code&gt;os.chdir&lt;/code&gt; . This event has one argument called &lt;em&gt;path&lt;/em&gt; that will contain the requested new working directory.</target>
        </trans-unit>
        <trans-unit id="66a503d37db3c1946c897c9a00ca7f6c3c4c2802" translate="yes" xml:space="preserve">
          <source>For example, restart the Shell and enter &lt;code&gt;itertools.count(&lt;/code&gt;. A calltip appears because Idle imports itertools into the user process for its own use. (This could change.) Enter &lt;code&gt;turtle.write(&lt;/code&gt; and nothing appears. Idle does not import turtle. The menu or shortcut do nothing either. Enter &lt;code&gt;import turtle&lt;/code&gt; and then &lt;code&gt;turtle.write(&lt;/code&gt; will work.</source>
          <target state="translated">예를 들어, 셸을 다시 시작하고 입력 &lt;code&gt;itertools.count(&lt;/code&gt; . calltip가 나타납니다 때문에 자신의 사용을 위해 사용자 프로세스에 유휴 수입 itertools. (이 변경 될 수 있습니다.)를 입력 &lt;code&gt;turtle.write(&lt;/code&gt; 및 아무것도 나타납니다. 유휴 수입 거북이를하지 않습니다. 메뉴 또는 바로 가기는 아무 것도 수행하지 않습니다. &lt;code&gt;import turtle&lt;/code&gt; 을 입력 하면 &lt;code&gt;turtle.write(&lt;/code&gt; 가 작동합니다.</target>
        </trans-unit>
        <trans-unit id="f0f273665afab8497e03bdbc377000781dbcb9e3" translate="yes" xml:space="preserve">
          <source>For example, restart the Shell and enter &lt;code&gt;itertools.count(&lt;/code&gt;. A calltip appears because Idle imports itertools into the user process for its own use. (This could change.) Enter &lt;code&gt;turtle.write(&lt;/code&gt; and nothing appears. Idle does not itself import turtle. The menu entry and shortcut also do nothing. Enter &lt;code&gt;import turtle&lt;/code&gt;. Thereafter, &lt;code&gt;turtle.write(&lt;/code&gt; will display a calltip.</source>
          <target state="translated">For example, restart the Shell and enter &lt;code&gt;itertools.count(&lt;/code&gt; . A calltip appears because Idle imports itertools into the user process for its own use. (This could change.) Enter &lt;code&gt;turtle.write(&lt;/code&gt; and nothing appears. Idle does not itself import turtle. The menu entry and shortcut also do nothing. Enter &lt;code&gt;import turtle&lt;/code&gt; . Thereafter, &lt;code&gt;turtle.write(&lt;/code&gt; will display a calltip.</target>
        </trans-unit>
        <trans-unit id="a2f3276b5fec797554722a3f1fcfe9772ea5689b" translate="yes" xml:space="preserve">
          <source>For example, suppose &lt;code&gt;sys.prefix&lt;/code&gt; and &lt;code&gt;sys.exec_prefix&lt;/code&gt; are set to &lt;code&gt;/usr/local&lt;/code&gt;. The Python X.Y library is then installed in &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt;. Suppose this has a subdirectory &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;/site-packages&lt;/code&gt; with three subsubdirectories, &lt;code&gt;foo&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;spam&lt;/code&gt;, and two path configuration files, &lt;code&gt;foo.pth&lt;/code&gt; and &lt;code&gt;bar.pth&lt;/code&gt;. Assume &lt;code&gt;foo.pth&lt;/code&gt; contains the following:</source>
          <target state="translated">예를 들어 &lt;code&gt;sys.prefix&lt;/code&gt; 및 &lt;code&gt;sys.exec_prefix&lt;/code&gt; 가 &lt;code&gt;/usr/local&lt;/code&gt; 로 설정되어 있다고 가정 하십시오 . 그런 다음 Python XY 라이브러리가 &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;&lt;/code&gt; 됩니다. 여기에 &lt;code&gt;foo&lt;/code&gt; , &lt;code&gt;bar&lt;/code&gt; 및 &lt;code&gt;spam&lt;/code&gt; 이라는 세 개의 서브 &lt;code&gt;foo.pth&lt;/code&gt; 및 &lt;code&gt;bar.pth&lt;/code&gt; 및 bar.pth 라는 두 개의 경로 구성 파일 이있는 서브 디렉토리 &lt;code&gt;/usr/local/lib/python&lt;em&gt;X.Y&lt;/em&gt;/site-packages&lt;/code&gt; 가 있다고 가정하십시오 . &lt;code&gt;foo.pth&lt;/code&gt; 에 다음이 포함되어 있다고 가정하십시오 .</target>
        </trans-unit>
        <trans-unit id="160f54e15b188263020cd678b4cbe6d3dca29d19" translate="yes" xml:space="preserve">
          <source>For example, suppose a field will be initialized from a database, if a value is not provided when creating the class:</source>
          <target state="translated">예를 들어 클래스를 만들 때 값이 제공되지 않으면 데이터베이스에서 필드가 초기화된다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="2a51dc8b68006b3628c501bc888381f13603f3d6" translate="yes" xml:space="preserve">
          <source>For example, the comment &lt;code&gt;&amp;lt;!-- comment --&amp;gt;&lt;/code&gt; will cause this method to be called with the argument &lt;code&gt;' comment '&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 주석 &lt;code&gt;&amp;lt;!-- comment --&amp;gt;&lt;/code&gt; 는이 메소드가 &lt;code&gt;' comment '&lt;/code&gt; 인수와 함께 호출되게합니다 .</target>
        </trans-unit>
        <trans-unit id="276a7355d8a4db76578148be24d829dc758d2a8b" translate="yes" xml:space="preserve">
          <source>For example, the configuration specified above with basic interpolation, would look like this with extended interpolation:</source>
          <target state="translated">예를 들어 기본 보간으로 위에서 지정한 구성은 확장 보간으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="01938a5c60c9e8969e85c6eb8d12360855033dd2" translate="yes" xml:space="preserve">
          <source>For example, the following &lt;em&gt;address&lt;/em&gt; specifications are equivalent: &lt;code&gt;192.168.1.0/24&lt;/code&gt;, &lt;code&gt;192.168.1.0/255.255.255.0&lt;/code&gt; and &lt;code&gt;192.168.1.0/0.0.0.255&lt;/code&gt;.</source>
          <target state="translated">예를 들어 다음 &lt;em&gt;주소&lt;/em&gt; 사양은 &lt;code&gt;192.168.1.0/24&lt;/code&gt; , &lt;code&gt;192.168.1.0/255.255.255.0&lt;/code&gt; 및 &lt;code&gt;192.168.1.0/0.0.0.255&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="9ffd76d4d6a2b6fecddb9a2b16cb189c0703deb8" translate="yes" xml:space="preserve">
          <source>For example, the following calls all create instances that connect to the server at the same host and port:</source>
          <target state="translated">예를 들어 다음 호출은 모두 동일한 호스트 및 포트에서 서버에 연결하는 인스턴스를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6485b8e2ead7470cce6b6fb9ebac6270d6c44f71" translate="yes" xml:space="preserve">
          <source>For example, the following code attempts to get the underlying socket object of the transport:</source>
          <target state="translated">예를 들어 다음 코드는 전송의 기본 소켓 객체를 가져 오려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="926dd3d39286ea9ea8589b6ed6457274558a4a7f" translate="yes" xml:space="preserve">
          <source>For example, the following code sets the current decimal precision to 42 places, performs a calculation, and then automatically restores the previous context:</source>
          <target state="translated">예를 들어 다음 코드는 현재 10 진수 정밀도를 42 자리로 설정하고 계산을 수행 한 다음 이전 컨텍스트를 자동으로 복원합니다.</target>
        </trans-unit>
        <trans-unit id="a2a9900581cad4336c270134295c4643fc13d30c" translate="yes" xml:space="preserve">
          <source>For example, the following test:</source>
          <target state="translated">예를 들어 다음 테스트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f57d48010d7b1e551e32df4d311a231a6c7759da" translate="yes" xml:space="preserve">
          <source>For example, the output of &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; normally is sent to &lt;em&gt;sys.stdout&lt;/em&gt;. You can capture that output in a string by redirecting the output to an &lt;a href=&quot;io#io.StringIO&quot;&gt;&lt;code&gt;io.StringIO&lt;/code&gt;&lt;/a&gt; object:</source>
          <target state="translated">예를 들어 &lt;a href=&quot;functions#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; &lt;/a&gt; 의 출력은 일반적으로 &lt;em&gt;sys.stdout&lt;/em&gt; 으로 전송됩니다 . 출력을 &lt;a href=&quot;io#io.StringIO&quot;&gt; &lt;code&gt;io.StringIO&lt;/code&gt; &lt;/a&gt; 객체 로 리디렉션하여 해당 출력을 문자열로 캡처 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="afad8674d1b9f21e340e687b0cc6f14661e4f3de" translate="yes" xml:space="preserve">
          <source>For example, the statement &lt;code&gt;import spam&lt;/code&gt; results in bytecode resembling the following code:</source>
          <target state="translated">예를 들어 &lt;code&gt;import spam&lt;/code&gt; 문 은 다음 코드와 유사한 바이트 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="9d664aefd1120a74c2a2186e509cdcbbe1065acb" translate="yes" xml:space="preserve">
          <source>For example, this converts &lt;code&gt;Decimal('123E+1')&lt;/code&gt; to &lt;code&gt;Decimal('1.23E+3')&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;Decimal('123E+1')&lt;/code&gt; 을 &lt;code&gt;Decimal('1.23E+3')&lt;/code&gt; 로 변환 합니다.</target>
        </trans-unit>
        <trans-unit id="03dfeb0eabcdcb6bb3dc21ab58b033a4c633e25f" translate="yes" xml:space="preserve">
          <source>For example, this feature is used by the &lt;a href=&quot;#unittest.TextTestRunner&quot;&gt;&lt;code&gt;TextTestRunner&lt;/code&gt;&lt;/a&gt; class to stop the test framework when the user signals an interrupt from the keyboard. Interactive tools which provide &lt;code&gt;TestRunner&lt;/code&gt; implementations can use this in a similar manner.</source>
          <target state="translated">예를 들어,이 기능은 &lt;a href=&quot;#unittest.TextTestRunner&quot;&gt; &lt;code&gt;TextTestRunner&lt;/code&gt; &lt;/a&gt; 클래스에서 사용자가 키보드에서 인터럽트 신호를 보낼 때 테스트 프레임 워크를 중지하는 데 사용됩니다 . &lt;code&gt;TestRunner&lt;/code&gt; 구현 을 제공하는 대화식 도구 는 이와 유사한 방식으로이를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="444e569164443b54baf03a91490c78b883818c99" translate="yes" xml:space="preserve">
          <source>For example, this test passes:</source>
          <target state="translated">예를 들어,이 테스트는 다음을 통과합니다.</target>
        </trans-unit>
        <trans-unit id="a8b68f8307ec7291b449dc75f9eea0977aaefaaa" translate="yes" xml:space="preserve">
          <source>For example, to change every default button to be a flat button with some padding and a different background color:</source>
          <target state="translated">예를 들어, 모든 기본 버튼을 패딩과 배경색이 다른 플랫 버튼으로 변경하려면 :</target>
        </trans-unit>
        <trans-unit id="926a0648c656ffbd39e1b269bc825949b1d45f4f" translate="yes" xml:space="preserve">
          <source>For example, to create and populate an &lt;a href=&quot;#ast.UnaryOp&quot;&gt;&lt;code&gt;ast.UnaryOp&lt;/code&gt;&lt;/a&gt; node, you could use</source>
          <target state="translated">For example, to create and populate an &lt;a href=&quot;#ast.UnaryOp&quot;&gt; &lt;code&gt;ast.UnaryOp&lt;/code&gt; &lt;/a&gt; node, you could use</target>
        </trans-unit>
        <trans-unit id="01e96359683d8998b2f48987f38d7a5a0c7de1ba" translate="yes" xml:space="preserve">
          <source>For example, to create and populate an &lt;code&gt;ast.UnaryOp&lt;/code&gt; node, you could use</source>
          <target state="translated">예를 들어, &lt;code&gt;ast.UnaryOp&lt;/code&gt; 노드 를 작성하고 채우려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a38ad6a815b7c3a6d5e35ad360441c5a233d74d" translate="yes" xml:space="preserve">
          <source>For example, to obtain the digest of the byte string &lt;code&gt;b'Nobody inspects the
spammish repetition'&lt;/code&gt;:</source>
          <target state="translated">예를 들어, 바이트 문자열의 요약을 얻으려면 &lt;code&gt;b'Nobody inspects the spammish repetition'&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="48a28f5d3517c11de3bb06bb6b263ccb6b5647c5" translate="yes" xml:space="preserve">
          <source>For example, to pack a list of integers, the code might appear like this:</source>
          <target state="translated">예를 들어 정수 목록을 묶기 위해 코드는 다음과 같이 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a50f637ca45f01bd80a886a7d8d9112bcffe4464" translate="yes" xml:space="preserve">
          <source>For example, to set the delete flag on all messages:</source>
          <target state="translated">예를 들어, 모든 메시지에서 삭제 플래그를 설정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="b93ac1384be7b98f164f6c81fd59de15e924427b" translate="yes" xml:space="preserve">
          <source>For example, to support arbitrary iterators, you could implement default like this:</source>
          <target state="translated">예를 들어, 임의 반복자를 지원하기 위해 다음과 같이 기본값을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0951e83479d161eaed251abaa06a68585eb3120d" translate="yes" xml:space="preserve">
          <source>For example, to tunnel through a HTTPS proxy server running locally on port 8080, we would pass the address of the proxy to the &lt;a href=&quot;#http.client.HTTPSConnection&quot;&gt;&lt;code&gt;HTTPSConnection&lt;/code&gt;&lt;/a&gt; constructor, and the address of the host that we eventually want to reach to the &lt;a href=&quot;#http.client.HTTPConnection.set_tunnel&quot;&gt;&lt;code&gt;set_tunnel()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">예를 들어 포트 8080에서 로컬로 실행되는 HTTPS 프록시 서버를 통해 터널링하려면 프록시 주소를 &lt;a href=&quot;#http.client.HTTPSConnection&quot;&gt; &lt;code&gt;HTTPSConnection&lt;/code&gt; &lt;/a&gt; 생성자에 전달하고 최종적으로 &lt;a href=&quot;#http.client.HTTPConnection.set_tunnel&quot;&gt; &lt;code&gt;set_tunnel()&lt;/code&gt; &lt;/a&gt; 메소드 에 도달하려는 호스트의 주소를 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="7b3b978bfbe527f2a3a323f97ed4b69e27575629" translate="yes" xml:space="preserve">
          <source>For example, using the &lt;em&gt;spawn&lt;/em&gt; or &lt;em&gt;forkserver&lt;/em&gt; start method running the following module would fail with a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">예를 들어, 다음 모듈을 실행 하는 &lt;em&gt;스폰&lt;/em&gt; 또는 &lt;em&gt;forkserver&lt;/em&gt; start 메소드를 사용하면 &lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt; 와 함께 실패합니다 .</target>
        </trans-unit>
        <trans-unit id="df42ad7c32da867212db01c727dfc03b20284141" translate="yes" xml:space="preserve">
          <source>For example, with a tuple &lt;code&gt;(1, 2)&lt;/code&gt; pickled in file &lt;code&gt;x.pickle&lt;/code&gt;:</source>
          <target state="translated">예를 들어, &lt;code&gt;x.pickle&lt;/code&gt; 파일에서 튜플 &lt;code&gt;(1, 2)&lt;/code&gt; 절인 경우 :</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f5d290d09e8b8601522cec0c016dec6107bd8c07" translate="yes" xml:space="preserve">
          <source>For exceptions that involve a file system path (such as &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;os#os.unlink&quot;&gt;&lt;code&gt;os.unlink()&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;#OSError.filename&quot;&gt;&lt;code&gt;filename&lt;/code&gt;&lt;/a&gt; is the file name passed to the function. For functions that involve two file system paths (such as &lt;a href=&quot;os#os.rename&quot;&gt;&lt;code&gt;os.rename()&lt;/code&gt;&lt;/a&gt;), &lt;a href=&quot;#OSError.filename2&quot;&gt;&lt;code&gt;filename2&lt;/code&gt;&lt;/a&gt; corresponds to the second file name passed to the function.</source>
          <target state="translated">파일 시스템 경로 (예 : &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;os#os.unlink&quot;&gt; &lt;code&gt;os.unlink()&lt;/code&gt; &lt;/a&gt; ) 와 관련된 예외의 경우 &lt;a href=&quot;#OSError.filename&quot;&gt; &lt;code&gt;filename&lt;/code&gt; &lt;/a&gt; 은 함수에 전달 된 파일 이름입니다. 두 파일 시스템 경로 (예 : &lt;a href=&quot;os#os.rename&quot;&gt; &lt;code&gt;os.rename()&lt;/code&gt; &lt;/a&gt; ) 와 관련된 함수의 경우 &lt;a href=&quot;#OSError.filename2&quot;&gt; &lt;code&gt;filename2&lt;/code&gt; &lt;/a&gt; 는 함수에 전달 된 두 번째 파일 이름에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="986e94f272815e62ab45e31fc596a0bf2e5dba42" translate="yes" xml:space="preserve">
          <source>For existing code calling &lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt;&lt;code&gt;readfp()&lt;/code&gt;&lt;/a&gt; with arguments which don&amp;rsquo;t support iteration, the following generator may be used as a wrapper around the file-like object:</source>
          <target state="translated">반복을 지원하지 않는 인수와 함께 &lt;a href=&quot;#configparser.ConfigParser.readfp&quot;&gt; &lt;code&gt;readfp()&lt;/code&gt; &lt;/a&gt; 를 호출하는 기존 코드의 경우 다음 생성기가 파일과 같은 객체를 감싸는 래퍼로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b79f9eae26ef65a2afacf2f54b2b0b95f4250af" translate="yes" xml:space="preserve">
          <source>For extension writers and programs that embed Python</source>
          <target state="translated">Python을 포함하는 확장 프로그램 및 프로그램의 경우</target>
        </trans-unit>
        <trans-unit id="49236a3024681c0e3e5df13b1f0ff226ce5765af" translate="yes" xml:space="preserve">
          <source>For external entities to be parsed, this handler must be implemented. It is responsible for creating the sub-parser using &lt;code&gt;ExternalEntityParserCreate(context)&lt;/code&gt;, initializing it with the appropriate callbacks, and parsing the entity. This handler should return an integer; if it returns &lt;code&gt;0&lt;/code&gt;, the parser will raise an &lt;code&gt;XML_ERROR_EXTERNAL_ENTITY_HANDLING&lt;/code&gt; error, otherwise parsing will continue.</source>
          <target state="translated">외부 엔티티를 구문 분석하려면이 핸들러를 구현해야합니다. &lt;code&gt;ExternalEntityParserCreate(context)&lt;/code&gt; 사용하여 하위 파서를 작성 하고 적절한 콜백으로 초기화하고 엔티티를 구문 분석합니다. 이 핸들러는 정수를 반환해야합니다. &lt;code&gt;0&lt;/code&gt; 을 반환 하면 파서는 &lt;code&gt;XML_ERROR_EXTERNAL_ENTITY_HANDLING&lt;/code&gt; 오류를 발생 시키고 그렇지 않으면 파싱이 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="b4e2ea4728652ede8436b63008dcbd2ab29b3396" translate="yes" xml:space="preserve">
          <source>For further discussion and two alternative approaches, see the &lt;a href=&quot;https://code.activestate.com/recipes/393090/&quot;&gt;ASPN cookbook recipes for accurate floating point summation&lt;/a&gt;.</source>
          <target state="translated">추가 토론과 두 가지 대안 &lt;a href=&quot;https://code.activestate.com/recipes/393090/&quot;&gt;은 정확한 부동 소수점 합산을위한 ASPN 요리 책 레시피를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e6522f23e1fead3deb4b5395a57a64fa42ca1cdb" translate="yes" xml:space="preserve">
          <source>For further information, please consult the &lt;a href=&quot;#socket-timeouts&quot;&gt;notes on socket timeouts&lt;/a&gt;.</source>
          <target state="translated">자세한 정보 &lt;a href=&quot;#socket-timeouts&quot;&gt;는 소켓 제한 시간에&lt;/a&gt; 대한 참고 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="aece9ac1b71ac6c335d8931e16fc332fda8d8599" translate="yes" xml:space="preserve">
          <source>For heterogeneous collections of data where access by name is clearer than access by index, &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;collections.namedtuple()&lt;/code&gt;&lt;/a&gt; may be a more appropriate choice than a simple tuple object.</source>
          <target state="translated">이름 별 액세스가 인덱스 별 액세스보다 명확한 이기종 데이터 콜렉션의 경우, &lt;a href=&quot;collections#collections.namedtuple&quot;&gt; &lt;code&gt;collections.namedtuple()&lt;/code&gt; &lt;/a&gt; 이 간단한 튜플 오브젝트보다 더 적합한 선택 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="359d6faefa3d11791af43a44d2be377ce987f362" translate="yes" xml:space="preserve">
          <source>For historical reasons, some of the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; methods had one or more aliases that are now deprecated. The following table lists the correct names along with their deprecated aliases:</source>
          <target state="translated">역사적인 이유로 일부 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 메소드에는 더 이상 사용되지 않는 하나 이상의 별명이 있습니다. 다음 표는 더 이상 사용되지 않는 별명과 함께 올바른 이름을 나열합니다.</target>
        </trans-unit>
        <trans-unit id="70e949f6da3f1a592f5b2a48629e000e95eccb0b" translate="yes" xml:space="preserve">
          <source>For immutable targets such as strings, numbers, and tuples, the updated value is computed, but not assigned back to the input variable:</source>
          <target state="translated">문자열, 숫자 및 튜플과 같은 변경 불가능한 대상의 경우 업데이트 된 값이 계산되지만 입력 변수에 다시 지정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cd5568fb042e52612b4e07795a6d976a99da1fd0" translate="yes" xml:space="preserve">
          <source>For in-place operations such as &lt;code&gt;c[key] += 1&lt;/code&gt;, the value type need only support addition and subtraction. So fractions, floats, and decimals would work and negative values are supported. The same is also true for &lt;a href=&quot;#collections.Counter.update&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#collections.Counter.subtract&quot;&gt;&lt;code&gt;subtract()&lt;/code&gt;&lt;/a&gt; which allow negative and zero values for both inputs and outputs.</source>
          <target state="translated">&lt;code&gt;c[key] += 1&lt;/code&gt; 과 같은 인플레 이스 연산의 경우 값 유형은 덧셈과 뺄셈 만 지원하면됩니다. 따라서 분수, 부동 소수점 및 소수가 작동하고 음수 값이 지원됩니다. 입력과 출력 모두에 대해 음수 값과 0 값을 허용하는 &lt;a href=&quot;#collections.Counter.update&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#collections.Counter.subtract&quot;&gt; &lt;code&gt;subtract()&lt;/code&gt; &lt;/a&gt; 도 마찬가지입니다 .</target>
        </trans-unit>
        <trans-unit id="c430cecf18c6228ad80e21ff36d9ceb073b9e28e" translate="yes" xml:space="preserve">
          <source>For incremental compression, use a &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt;&lt;code&gt;BZ2Compressor&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">증분 압축의 경우 &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt; &lt;code&gt;BZ2Compressor&lt;/code&gt; 를&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a21755ab38d63f0daf62822c3d38c163c737dea4" translate="yes" xml:space="preserve">
          <source>For incremental decompression, use a &lt;a href=&quot;#bz2.BZ2Decompressor&quot;&gt;&lt;code&gt;BZ2Decompressor&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">증분 압축 해제의 경우 &lt;a href=&quot;#bz2.BZ2Decompressor&quot;&gt; &lt;code&gt;BZ2Decompressor&lt;/code&gt; &lt;/a&gt; 압축 해제 기를 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2ec8371fc038e2d68966db34b74ea3f258be66a1" translate="yes" xml:space="preserve">
          <source>For inexact results, &lt;a href=&quot;#decimal.MAX_PREC&quot;&gt;&lt;code&gt;MAX_PREC&lt;/code&gt;&lt;/a&gt; is far too large on 64-bit platforms and the available memory will be insufficient:</source>
          <target state="translated">For inexact results, &lt;a href=&quot;#decimal.MAX_PREC&quot;&gt; &lt;code&gt;MAX_PREC&lt;/code&gt; &lt;/a&gt; is far too large on 64-bit platforms and the available memory will be insufficient:</target>
        </trans-unit>
        <trans-unit id="cbff89a2f5f52c2e55ca2c9d27010a14badd978f" translate="yes" xml:space="preserve">
          <source>For information about the constructor parameters and methods, see the documentation for &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; in section &lt;a href=&quot;#doctest-advanced-api&quot;&gt;Advanced API&lt;/a&gt;.</source>
          <target state="translated">생성자 매개 변수 및 메소드에 대한 정보는 &lt;a href=&quot;#doctest-advanced-api&quot;&gt;고급 API&lt;/a&gt; 섹션의 &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ccc3814ef62ef3e032cafe9cf247e4c042f7bd05" translate="yes" xml:space="preserve">
          <source>For inputs that do not have trailing newlines, set the &lt;em&gt;lineterm&lt;/em&gt; argument to &lt;code&gt;&quot;&quot;&lt;/code&gt; so that the output will be uniformly newline free.</source>
          <target state="translated">후행 줄 바꿈이없는 입력의 경우 출력에 균일 한 줄 바꿈이 없도록 &lt;em&gt;lineterm&lt;/em&gt; 인수를 &lt;code&gt;&quot;&quot;&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="963201ecdae08f04bf36171e54bffac97056f991" translate="yes" xml:space="preserve">
          <source>For instance, SML provides a tabulation tool: &lt;code&gt;tabulate(f)&lt;/code&gt; which produces a sequence &lt;code&gt;f(0), f(1), ...&lt;/code&gt;. The same effect can be achieved in Python by combining &lt;a href=&quot;functions#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#itertools.count&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt; to form &lt;code&gt;map(f, count())&lt;/code&gt;.</source>
          <target state="translated">예를 들어 SML은 tabulation 도구를 제공합니다. &lt;code&gt;tabulate(f)&lt;/code&gt; 는 시퀀스 &lt;code&gt;f(0), f(1), ...&lt;/code&gt; 합니다. &lt;a href=&quot;functions#map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#itertools.count&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt; 를 결합하여 &lt;code&gt;map(f, count())&lt;/code&gt; 를 형성 하여 파이썬에서 동일한 효과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="45242015fdb9fb952b9daa1d8d086e0f23b3b509" translate="yes" xml:space="preserve">
          <source>For instance, Shell never throws away output. A program that sends unlimited output to Shell will eventually fill memory, resulting in a memory error. In contrast, some system text windows only keep the last n lines of output. A Windows console, for instance, keeps a user-settable 1 to 9999 lines, with 300 the default.</source>
          <target state="translated">예를 들어, Shell은 절대로 출력을 버리지 않습니다. 셸에 무제한 출력을 보내는 프로그램은 결국 메모리를 채우므로 메모리 오류가 발생합니다. 반대로 일부 시스템 텍스트 창은 마지막 n 줄의 출력 만 유지합니다. 예를 들어, Windows 콘솔은 사용자가 1-9999 행을 유지할 수 있으며 기본값은 300입니다.</target>
        </trans-unit>
        <trans-unit id="a68abe1e9fe976d53a8a6657db86db9f80bc6ae9" translate="yes" xml:space="preserve">
          <source>For instance, for the tag &lt;code&gt;&amp;lt;A HREF=&quot;https://www.cwi.nl/&quot;&amp;gt;&lt;/code&gt;, this method would be called as &lt;code&gt;handle_starttag('a', [('href', 'https://www.cwi.nl/')])&lt;/code&gt;.</source>
          <target state="translated">예를 들어 &lt;code&gt;&amp;lt;A HREF=&quot;https://www.cwi.nl/&quot;&amp;gt;&lt;/code&gt; 태그의 경우이 메소드는 &lt;code&gt;handle_starttag('a', [('href', 'https://www.cwi.nl/')])&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="826a7a4eb1b82ca394e40c781115bfce3bd511a6" translate="yes" xml:space="preserve">
          <source>For instance, the following code (which assumes that the &lt;em&gt;Content-Type&lt;/em&gt; header and blank line have already been printed) checks that the fields &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;addr&lt;/code&gt; are both set to a non-empty string:</source>
          <target state="translated">예를 들어, 다음 코드 ( &lt;em&gt;Content-Type&lt;/em&gt; 헤더와 빈 줄이 이미 인쇄되었다고 가정)는 필드 &lt;code&gt;name&lt;/code&gt; 과 &lt;code&gt;addr&lt;/code&gt; 이 모두 비어 있지 않은 문자열로 설정되어 있는지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="2fa125984e38d3e02a7f0fb70915cc3d02caa868" translate="yes" xml:space="preserve">
          <source>For integer type fields like &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt;, a third optional item can be given. It must be a small positive integer defining the bit width of the field.</source>
          <target state="translated">&lt;a href=&quot;#ctypes.c_int&quot;&gt; &lt;code&gt;c_int&lt;/code&gt; &lt;/a&gt; 와 같은 정수 유형 필드의 경우 세 번째 선택적 항목을 제공 할 수 있습니다. 필드의 비트 너비를 정의하는 작은 양의 정수 여야합니다.</target>
        </trans-unit>
        <trans-unit id="f7503225ff38260dec07fdc637319dd83d951773" translate="yes" xml:space="preserve">
          <source>For integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.</source>
          <target state="translated">정수의 경우 범위에서 균일 한 선택이 있습니다. 시퀀스의 경우 무작위 요소의 균일 한 선택, 목록의 임의 순열을 생성하는 기능 및 대체하지 않고 무작위 샘플링을위한 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4eff0fdcbc3569990bbd16db9fa5a5df5aae7685" translate="yes" xml:space="preserve">
          <source>For loggers other than the root logger, some additional information is required. This is illustrated by the following example.</source>
          <target state="translated">루트 로거 이외의 로거의 경우 추가 정보가 필요합니다. 이것은 다음 예에 의해 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="fca00032925597b5dc8a9f16bf3a7909732bbcbb" translate="yes" xml:space="preserve">
          <source>For long options (options with names longer than a single character), the option and value can also be passed as a single command-line argument, using &lt;code&gt;=&lt;/code&gt; to separate them:</source>
          <target state="translated">긴 옵션 (단일 문자보다 긴 이름을 가진 옵션)의 경우 옵션과 값을 &lt;code&gt;=&lt;/code&gt; 를 사용하여 단일 명령 줄 인수로 전달할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="99265f8edbfb9e7d7b596dec842776023c0a9e56" translate="yes" xml:space="preserve">
          <source>For long sequences of the same frame and line, the first few repetitions are shown, followed by a summary line stating the exact number of further repetitions.</source>
          <target state="translated">동일한 프레임과 라인의 긴 시퀀스의 경우 처음 몇 번의 반복이 표시되고 그 뒤에 정확한 반복 횟수를 나타내는 요약 선이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="2e50576c0df1f3411e96df78baa4b95f76497c46" translate="yes" xml:space="preserve">
          <source>For low-level path manipulation on strings, you can also use the &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">문자열에서 저수준 경로 조작을 위해 &lt;a href=&quot;os.path#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt; 모듈을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="780e353ee5e0eadf57f7fb0b0eb414afc840b40c" translate="yes" xml:space="preserve">
          <source>For mathematical operations on multisets and their use cases, see &lt;em&gt;Knuth, Donald. The Art of Computer Programming Volume II, Section 4.6.3, Exercise 19&lt;/em&gt;.</source>
          <target state="translated">다중 집합과 그 사용 사례에 대한 수학 연산은 &lt;em&gt;Knuth, Donald를&lt;/em&gt; 참조하십시오 &lt;em&gt;. &lt;/em&gt;&lt;em&gt;컴퓨터 프로그래밍 볼륨 II의 기술, 섹션 4.6.3, 연습 19&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="bcc82cf68a5234571647cda5636a95aca3c77d15" translate="yes" xml:space="preserve">
          <source>For modes &lt;code&gt;'w:gz'&lt;/code&gt;, &lt;code&gt;'r:gz'&lt;/code&gt;, &lt;code&gt;'w:bz2'&lt;/code&gt;, &lt;code&gt;'r:bz2'&lt;/code&gt;, &lt;code&gt;'x:gz'&lt;/code&gt;, &lt;code&gt;'x:bz2'&lt;/code&gt;, &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; accepts the keyword argument &lt;em&gt;compresslevel&lt;/em&gt; (default &lt;code&gt;9&lt;/code&gt;) to specify the compression level of the file.</source>
          <target state="translated">모드의 경우 &lt;code&gt;'w:gz'&lt;/code&gt; , &lt;code&gt;'r:gz'&lt;/code&gt; , &lt;code&gt;'w:bz2'&lt;/code&gt; , &lt;code&gt;'r:bz2'&lt;/code&gt; , &lt;code&gt;'x:gz'&lt;/code&gt; , &lt;code&gt;'x:bz2'&lt;/code&gt; , &lt;a href=&quot;#tarfile.open&quot;&gt; &lt;code&gt;tarfile.open()&lt;/code&gt; &lt;/a&gt; 키워드 인수 받아 &lt;em&gt;compresslevel을&lt;/em&gt; (기본 &lt;code&gt;9&lt;/code&gt; )를 눌러 파일의 압축 수준을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="f7d85143367eaddc8853c2ec6704f9eb4b357718" translate="yes" xml:space="preserve">
          <source>For modules, classes, functions and methods, the displayed documentation is derived from the docstring (i.e. the &lt;code&gt;__doc__&lt;/code&gt; attribute) of the object, and recursively of its documentable members. If there is no docstring, &lt;a href=&quot;#module-pydoc&quot;&gt;&lt;code&gt;pydoc&lt;/code&gt;&lt;/a&gt; tries to obtain a description from the block of comment lines just above the definition of the class, function or method in the source file, or at the top of the module (see &lt;a href=&quot;inspect#inspect.getcomments&quot;&gt;&lt;code&gt;inspect.getcomments()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">모듈, 클래스, 함수 및 메소드의 경우, 표시된 문서는 오브젝트 의 docstring (예 : &lt;code&gt;__doc__&lt;/code&gt; 속성) 및 문서화 가능한 멤버에서 재귀 적으로 파생됩니다 . docstring이 없으면 &lt;a href=&quot;#module-pydoc&quot;&gt; &lt;code&gt;pydoc&lt;/code&gt; &lt;/a&gt; 은 소스 파일의 클래스, 함수 또는 메소드의 정의 바로 위 또는 모듈 맨 위의 주석 행 블록에서 설명을 얻으려고 시도합니다 ( &lt;a href=&quot;inspect#inspect.getcomments&quot;&gt; &lt;code&gt;inspect.getcomments()&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="03e6b008c4cde03e3eae01629d439fc517c4dfe9" translate="yes" xml:space="preserve">
          <source>For more about ABCs, see the &lt;a href=&quot;abc#module-abc&quot;&gt;&lt;code&gt;abc&lt;/code&gt;&lt;/a&gt; module and &lt;a href=&quot;https://www.python.org/dev/peps/pep-3119&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 3119&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">ABC에 대한 자세한 내용은 &lt;a href=&quot;abc#module-abc&quot;&gt; &lt;code&gt;abc&lt;/code&gt; &lt;/a&gt; 모듈 및 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3119&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;PEP 3119를&lt;/strong&gt;&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="46cae48518bcb3647b4683abb1424d2693286675" translate="yes" xml:space="preserve">
          <source>For more advanced work, it may be useful to create alternate contexts using the Context() constructor. To make an alternate active, use the &lt;a href=&quot;#decimal.setcontext&quot;&gt;&lt;code&gt;setcontext()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">보다 고급 작업을 위해서는 Context () 생성자를 사용하여 대체 컨텍스트를 작성하는 것이 유용 할 수 있습니다. 대체를 활성화하려면 &lt;a href=&quot;#decimal.setcontext&quot;&gt; &lt;code&gt;setcontext()&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0fcc19ca4e316c086f420b1620de5c145c142b6d" translate="yes" xml:space="preserve">
          <source>For more details and extensive examples, see the documentation string of the &lt;code&gt;_threading_local&lt;/code&gt; module.</source>
          <target state="translated">자세한 내용과 광범위한 예는 &lt;code&gt;_threading_local&lt;/code&gt; 모듈 의 설명서 문자열을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="597d156c6f9b5c546f4c30195be33c24a39b20e0" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;#argparse.Action&quot;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#argparse.Action&quot;&gt; &lt;code&gt;Action&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="36d676c3906f278c209bbc351453c41061805da0" translate="yes" xml:space="preserve">
          <source>For more explicit control of source stacking, use the &lt;a href=&quot;#shlex.shlex.push_source&quot;&gt;&lt;code&gt;push_source()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#shlex.shlex.pop_source&quot;&gt;&lt;code&gt;pop_source()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">소스 스태킹을보다 명시 적으로 제어하려면 &lt;a href=&quot;#shlex.shlex.push_source&quot;&gt; &lt;code&gt;push_source()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#shlex.shlex.pop_source&quot;&gt; &lt;code&gt;pop_source()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="dd9913577d878271afdd61232f1fa2cb21697adb" translate="yes" xml:space="preserve">
          <source>For more extensive information on the packer and the options that it can take, see the man pages and page 183 of John Ousterhout&amp;rsquo;s book.</source>
          <target state="translated">패커와 그 옵션에 대한 자세한 내용은 John Ousterhout의 저서 맨 페이지와 183 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b8f07e394f58518334837c27b85d4ab9f5730274" translate="yes" xml:space="preserve">
          <source>For more fine-grained usage, it&amp;rsquo;s possible to set a trace function by assigning &lt;code&gt;frame.f_trace = tracefunc&lt;/code&gt; explicitly, rather than relying on it being set indirectly via the return value from an already installed trace function. This is also required for activating the trace function on the current frame, which &lt;a href=&quot;#sys.settrace&quot;&gt;&lt;code&gt;settrace()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t do. Note that in order for this to work, a global tracing function must have been installed with &lt;a href=&quot;#sys.settrace&quot;&gt;&lt;code&gt;settrace()&lt;/code&gt;&lt;/a&gt; in order to enable the runtime tracing machinery, but it doesn&amp;rsquo;t need to be the same tracing function (e.g. it could be a low overhead tracing function that simply returns &lt;code&gt;None&lt;/code&gt; to disable itself immediately on each frame).</source>
          <target state="translated">보다 세분화 된 사용법 을 위해 이미 설치된 추적 함수의 반환 값을 통해 간접적으로 설정되는 것이 아니라 &lt;code&gt;frame.f_trace = tracefunc&lt;/code&gt; 명시 적으로 할당하여 추적 기능을 설정할 수 있습니다. &lt;a href=&quot;#sys.settrace&quot;&gt; &lt;code&gt;settrace()&lt;/code&gt; &lt;/a&gt; 가 수행하지 않는 현재 프레임에서 추적 함수를 활성화하는 데에도 필요합니다 . 이것이 작동 하려면 런타임 추적 기계를 사용하기 위해 전역 추적 기능이 &lt;a href=&quot;#sys.settrace&quot;&gt; &lt;code&gt;settrace()&lt;/code&gt; &lt;/a&gt; 와 함께 설치되어 있어야 하지만 동일한 추적 기능 일 필요는 없습니다 (예 : 오버 헤드가 낮을 수 있음) 각 프레임에서 즉시 비활성화하기 위해 단순히 &lt;code&gt;None&lt;/code&gt; 을 반환하는 추적 기능 ).</target>
        </trans-unit>
        <trans-unit id="b72782cbc8c0b6cf00d613d39cc13696514eeb6e" translate="yes" xml:space="preserve">
          <source>For more flexibility in using shared memory one can use the &lt;a href=&quot;#module-multiprocessing.sharedctypes&quot;&gt;&lt;code&gt;multiprocessing.sharedctypes&lt;/code&gt;&lt;/a&gt; module which supports the creation of arbitrary ctypes objects allocated from shared memory.</source>
          <target state="translated">공유 메모리를보다 유연하게 사용하기 위해 공유 메모리에서 할당 된 임의의 ctypes 객체 생성을 지원하는 &lt;a href=&quot;#module-multiprocessing.sharedctypes&quot;&gt; &lt;code&gt;multiprocessing.sharedctypes&lt;/code&gt; &lt;/a&gt; 모듈을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="df7e50f9236ec25120197854c2f0993b8af2a486" translate="yes" xml:space="preserve">
          <source>For more information about &lt;a href=&quot;#ttkstyling&quot;&gt;TtkStyling&lt;/a&gt;, see the &lt;a href=&quot;#tkinter.ttk.Style&quot;&gt;&lt;code&gt;Style&lt;/code&gt;&lt;/a&gt; class documentation.</source>
          <target state="translated">&lt;a href=&quot;#ttkstyling&quot;&gt;TtkStyling에&lt;/a&gt; 대한 자세한 내용은 &lt;a href=&quot;#tkinter.ttk.Style&quot;&gt; &lt;code&gt;Style&lt;/code&gt; &lt;/a&gt; 클래스 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="db5ca74113cecdf8bd9218769597c1431aee8777" translate="yes" xml:space="preserve">
          <source>For more information about &lt;em&gt;flags&lt;/em&gt; you can consult &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/getnameinfo(3)&quot;&gt;getnameinfo(3)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;플래그에&lt;/em&gt; 대한 자세한 정보는 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/getnameinfo(3)&quot;&gt;getnameinfo (3)를&lt;/a&gt;&lt;/em&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="38c9342c817e5011acb54d4ee258a06117119635" translate="yes" xml:space="preserve">
          <source>For more information on &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt;, see section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt; 에 대한 자세한 내용은 &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8992739fc0a61b0b25882180db6cdfa7a3570bbd" translate="yes" xml:space="preserve">
          <source>For more information on &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;, see section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt; 에 대한 자세한 내용은 &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f4e87cc73e3a41721af3d1c000891584dd27800" translate="yes" xml:space="preserve">
          <source>For more information on class methods, see &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">클래스 메소드에 대한 자세한 정보 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;는 표준 유형 계층을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bedf2aa9231c7c1fecdcdb39b3fcf4e879dfae1c" translate="yes" xml:space="preserve">
          <source>For more information on code and frame objects, refer to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">코드 및 프레임 객체에 대한 자세한 내용 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;은 표준 유형 계층을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="943fc3aafe4395b49cfdf52a6cc74f35ea3f8db1" translate="yes" xml:space="preserve">
          <source>For more information on code and frame objects, refer to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">For more information on code and frame objects, refer to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="2bc48bac1d964e4beb9368509e2bda88698375ca" translate="yes" xml:space="preserve">
          <source>For more information on configuring the time zone search path, see &lt;a href=&quot;#zoneinfo-data-configuration&quot;&gt;Configuring the data sources&lt;/a&gt;.</source>
          <target state="translated">For more information on configuring the time zone search path, see &lt;a href=&quot;#zoneinfo-data-configuration&quot;&gt;Configuring the data sources&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="4d078607c47fbb41c24940ef7055eb18a9b3d415" translate="yes" xml:space="preserve">
          <source>For more information on static methods, see &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">정적 메소드에 대한 자세한 정보 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#types&quot;&gt;는 표준 유형 계층을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="126894bd2f2934ca2ff40c316deecdc20454d941" translate="yes" xml:space="preserve">
          <source>For more information on static methods, see &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</source>
          <target state="translated">For more information on static methods, see &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#types&quot;&gt;The standard type hierarchy&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="421bf46ac523c580b6d6d6d7806d5f9f6b50d224" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;str&lt;/code&gt; class and its methods, see &lt;a href=&quot;#textseq&quot;&gt;Text Sequence Type &amp;mdash; str&lt;/a&gt; and the &lt;a href=&quot;#string-methods&quot;&gt;String Methods&lt;/a&gt; section below. To output formatted strings, see the &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#f-strings&quot;&gt;Formatted string literals&lt;/a&gt; and &lt;a href=&quot;string#formatstrings&quot;&gt;Format String Syntax&lt;/a&gt; sections. In addition, see the &lt;a href=&quot;text#stringservices&quot;&gt;Text Processing Services&lt;/a&gt; section.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 클래스와 그 메소드 에 대한 자세한 내용 은 &lt;a href=&quot;#textseq&quot;&gt;텍스트 시퀀스 유형 &amp;mdash; str&lt;/a&gt; 및 아래 의 &lt;a href=&quot;#string-methods&quot;&gt;문자열 메소드&lt;/a&gt; 섹션을 참조하십시오. 형식화 된 문자열을 출력하려면 &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#f-strings&quot;&gt;형식화 된 문자열 리터럴&lt;/a&gt; 및 &lt;a href=&quot;string#formatstrings&quot;&gt;형식 문자열 구문&lt;/a&gt; 섹션을 참조하십시오 . 또한 &lt;a href=&quot;text#stringservices&quot;&gt;텍스트 처리 서비스&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d38681b50e3b40c04632ee37a159ac20eca99d3d" translate="yes" xml:space="preserve">
          <source>For more information on the &lt;code&gt;str&lt;/code&gt; class and its methods, see &lt;a href=&quot;#textseq&quot;&gt;Text Sequence Type &amp;mdash; str&lt;/a&gt; and the &lt;a href=&quot;#string-methods&quot;&gt;String Methods&lt;/a&gt; section below. To output formatted strings, see the &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings&quot;&gt;Formatted string literals&lt;/a&gt; and &lt;a href=&quot;string#formatstrings&quot;&gt;Format String Syntax&lt;/a&gt; sections. In addition, see the &lt;a href=&quot;text#stringservices&quot;&gt;Text Processing Services&lt;/a&gt; section.</source>
          <target state="translated">For more information on the &lt;code&gt;str&lt;/code&gt; class and its methods, see &lt;a href=&quot;#textseq&quot;&gt;Text Sequence Type &amp;mdash; str&lt;/a&gt; and the &lt;a href=&quot;#string-methods&quot;&gt;String Methods&lt;/a&gt; section below. To output formatted strings, see the &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#f-strings&quot;&gt;Formatted string literals&lt;/a&gt; and &lt;a href=&quot;string#formatstrings&quot;&gt;Format String Syntax&lt;/a&gt; sections. In addition, see the &lt;a href=&quot;text#stringservices&quot;&gt;Text Processing Services&lt;/a&gt; section.</target>
        </trans-unit>
        <trans-unit id="2d85a9650ef90a538c7b9637ea250afe03d69723" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://bugs.python.org/issue5155&quot;&gt;bpo-5155&lt;/a&gt;, &lt;a href=&quot;https://bugs.python.org/issue5313&quot;&gt;bpo-5313&lt;/a&gt; and &lt;a href=&quot;https://bugs.python.org/issue5331&quot;&gt;bpo-5331&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://bugs.python.org/issue5155&quot;&gt;bpo-5155&lt;/a&gt; , &lt;a href=&quot;https://bugs.python.org/issue5313&quot;&gt;bpo-5313&lt;/a&gt; 및 &lt;a href=&quot;https://bugs.python.org/issue5331&quot;&gt;bpo-5331을 참조하십시오.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ad749c484a050c2c7bf1710222fa340076db122c" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx&quot;&gt;Accessing an Alternate Registry View&lt;/a&gt;.</source>
          <target state="translated">자세한 정보 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/aa384129(v=VS.85).aspx&quot;&gt;는 대체 레지스트리보기 액세스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="119c6fa14fdb5ff135f608e174a237a8d39259df" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx&quot;&gt;Registry Key Security and Access&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724878%28v=VS.85%29.aspx&quot;&gt;레지스트리 키 보안 및 액세스를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="77fb0351c334f2e98ca82931de22cb7d2c602dca" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx&quot;&gt;Registry Value Types&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms724884%28v=VS.85%29.aspx&quot;&gt;레지스트리 값 유형을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2862796ac2f004784e5a6dba00f5ca7855b8ad6" translate="yes" xml:space="preserve">
          <source>For more information: &lt;a href=&quot;https://tools.ietf.org/html/rfc6555&quot;&gt;https://tools.ietf.org/html/rfc6555&lt;/a&gt;</source>
          <target state="translated">For more information: &lt;a href=&quot;https://tools.ietf.org/html/rfc6555&quot;&gt;https://tools.ietf.org/html/rfc6555&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5798480c6aa43603ded3d7efeddc544e90f897ab" translate="yes" xml:space="preserve">
          <source>For more sophisticated applications, the &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; class helps manage settings and certificates, which can then be inherited by SSL sockets created through the &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">보다 복잡한 응용 프로그램의 경우 &lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;ssl.SSLContext&lt;/code&gt; &lt;/a&gt; 클래스는 설정 및 인증서를 관리하는 데 도움이되며 &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt; &lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt; &lt;/a&gt; 메서드를 통해 생성 된 SSL 소켓에서 상속 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8bde3739aadce3c7f820930e05b3c8e453753978" translate="yes" xml:space="preserve">
          <source>For most purposes, the &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; (master volume) and &lt;code&gt;SOUND_MIXER_PCM&lt;/code&gt; controls should suffice&amp;mdash;but code that uses the mixer should be flexible when it comes to choosing mixer controls. On the Gravis Ultrasound, for example, &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; does not exist.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; (마스터 볼륨) 및 &lt;code&gt;SOUND_MIXER_PCM&lt;/code&gt; 컨트롤로는 충분하지만 믹서를 사용하는 코드는 믹서 컨트롤을 선택할 때 유연해야합니다. 예를 들어 Gravis Ultrasound에는 &lt;code&gt;SOUND_MIXER_VOLUME&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="81a00f17049a5e9a02f7312cb25779d4bb6c5941" translate="yes" xml:space="preserve">
          <source>For mutable targets such as lists and dictionaries, the in-place method will perform the update, so no subsequent assignment is necessary:</source>
          <target state="translated">목록 및 사전과 같은 변경 가능한 대상의 경우 내부 메소드가 업데이트를 수행하므로 후속 지정이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="77fbb059375aa28aa73354116772b577d2a77cf7" translate="yes" xml:space="preserve">
          <source>For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node.</source>
          <target state="translated">모든 명령문 노드에 적용되는 명령문 콜렉션의 일부인 노드의 경우 방문자는 단일 노드가 아닌 노드 목록을 리턴 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d250f7a529a8d3c64d6bc6040f6513ae55826602" translate="yes" xml:space="preserve">
          <source>For non-200 error codes, this simply passes the job on to the &lt;code&gt;http_error_&amp;lt;type&amp;gt;()&lt;/code&gt; handler methods, via &lt;a href=&quot;#urllib.request.OpenerDirector.error&quot;&gt;&lt;code&gt;OpenerDirector.error()&lt;/code&gt;&lt;/a&gt;. Eventually, &lt;a href=&quot;#urllib.request.HTTPDefaultErrorHandler&quot;&gt;&lt;code&gt;HTTPDefaultErrorHandler&lt;/code&gt;&lt;/a&gt; will raise an &lt;a href=&quot;urllib.error#urllib.error.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; if no other handler handles the error.</source>
          <target state="translated">200이 아닌 오류 코드의 경우 단순히 &lt;a href=&quot;#urllib.request.OpenerDirector.error&quot;&gt; &lt;code&gt;OpenerDirector.error()&lt;/code&gt; &lt;/a&gt; 를 통해 작업을 &lt;code&gt;http_error_&amp;lt;type&amp;gt;()&lt;/code&gt; 핸들러 메소드로 전달 합니다. 결국, 다른 핸들러가 오류를 처리하지 않으면 &lt;a href=&quot;#urllib.request.HTTPDefaultErrorHandler&quot;&gt; &lt;code&gt;HTTPDefaultErrorHandler&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;urllib.error#urllib.error.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f5517c546993b6b7847fcd0c391c423f3a488157" translate="yes" xml:space="preserve">
          <source>For non-Unix platforms, or when a remote browser is available on Unix, the controlling process will not wait for the user to finish with the browser, but allow the remote browser to maintain its own windows on the display. If remote browsers are not available on Unix, the controlling process will launch a new browser and wait.</source>
          <target state="translated">Unix 이외의 플랫폼 또는 Unix에서 원격 브라우저를 사용할 수있는 경우, 제어 프로세스는 사용자가 브라우저를 끝낼 때까지 기다리지 않고 원격 브라우저가 자체 창을 디스플레이에 유지할 수 있도록합니다. Unix에서 원격 브라우저를 사용할 수없는 경우 제어 프로세스는 새 브라우저를 시작하고 기다립니다.</target>
        </trans-unit>
        <trans-unit id="9b772393e90f36112fe4debf3cd114a12b09518c" translate="yes" xml:space="preserve">
          <source>For non-callable mocks the callable variant will be used (rather than any custom subclass).</source>
          <target state="translated">호출 할 수없는 모의 경우 사용자 정의 서브 클래스 대신 호출 가능 변형이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b691e793be115140f38b348f5cebba832f0c4591" translate="yes" xml:space="preserve">
          <source>For non-contiguous arrays the result is equal to the flattened list representation with all elements converted to bytes. &lt;a href=&quot;#memoryview.tobytes&quot;&gt;&lt;code&gt;tobytes()&lt;/code&gt;&lt;/a&gt; supports all format strings, including those that are not in &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; module syntax.</source>
          <target state="translated">연속되지 않은 배열의 경우 결과는 모든 요소가 바이트로 변환 된 플랫 화 된 목록 표현과 같습니다. &lt;a href=&quot;#memoryview.tobytes&quot;&gt; &lt;code&gt;tobytes()&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt; 모듈 구문에 없는 문자열을 포함하여 모든 형식 문자열을 지원 합니다.</target>
        </trans-unit>
        <trans-unit id="cb6a6ca72e2265be79779f9a6b802b866e0158e9" translate="yes" xml:space="preserve">
          <source>For normal use, you should only require the initialization/connect, &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;sendmail()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#smtplib.SMTP.quit&quot;&gt;&lt;code&gt;SMTP.quit()&lt;/code&gt;&lt;/a&gt; methods. An example is included below.</source>
          <target state="translated">정상적인 사용을 위해서는 초기화 / 연결, &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt; &lt;code&gt;sendmail()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#smtplib.SMTP.quit&quot;&gt; &lt;code&gt;SMTP.quit()&lt;/code&gt; &lt;/a&gt; 메소드 만 필요합니다 . 아래에 예가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="19877769490ea36879f858c9d17af7a4020bd5a5" translate="yes" xml:space="preserve">
          <source>For numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, possibly of different types, it&amp;rsquo;s a requirement that &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; whenever &lt;code&gt;x == y&lt;/code&gt; (see the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;) Python&amp;rsquo;s hash for numeric types is based on a single mathematical function that&amp;rsquo;s defined for any rational number, and hence applies to all instances of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;, and all finite instances of &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt;. Essentially, this function is given by reduction modulo &lt;code&gt;P&lt;/code&gt; for a fixed prime &lt;code&gt;P&lt;/code&gt;. The value of &lt;code&gt;P&lt;/code&gt; is made available to Python as the &lt;code&gt;modulus&lt;/code&gt; attribute of &lt;a href=&quot;sys#sys.hash_info&quot;&gt;&lt;code&gt;sys.hash_info&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다른 유형일 수있는 &lt;code&gt;x&lt;/code&gt; 및 &lt;code&gt;y&lt;/code&gt; 숫자 의 경우 &lt;code&gt;x == y&lt;/code&gt; 때마다 &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; (자세한 내용은 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 메서드 설명서 참조). 다양한 숫자 유형 ( &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; 포함&lt;/a&gt; ) 에서 구현 및 효율성을 쉽게하기 위해 숫자 유형에 대한 Python의 해시는 모든 합리적인 숫자에 대해 정의 된 단일 수학 함수를 기반으로하므로 모든 사람에게 적용됩니다 인스턴스 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt; , 그리고 모든 유한 한 경우 &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; 와&lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt; . 본질적으로,이 함수는고정 소수 &lt;code&gt;P&lt;/code&gt; 에 대한감소 모듈로 &lt;code&gt;P&lt;/code&gt; 에의해 제공됩니다. &lt;code&gt;P&lt;/code&gt; 의 값은&lt;a href=&quot;sys#sys.hash_info&quot;&gt; &lt;code&gt;sys.hash_info&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;modulus&lt;/code&gt; 속성으로Python에 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="cb4246e51e51f94a94b6e7aca72ac5aaba5cdbf6" translate="yes" xml:space="preserve">
          <source>For numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, possibly of different types, it&amp;rsquo;s a requirement that &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; whenever &lt;code&gt;x == y&lt;/code&gt; (see the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;) Python&amp;rsquo;s hash for numeric types is based on a single mathematical function that&amp;rsquo;s defined for any rational number, and hence applies to all instances of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt;, and all finite instances of &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt;. Essentially, this function is given by reduction modulo &lt;code&gt;P&lt;/code&gt; for a fixed prime &lt;code&gt;P&lt;/code&gt;. The value of &lt;code&gt;P&lt;/code&gt; is made available to Python as the &lt;code&gt;modulus&lt;/code&gt; attribute of &lt;a href=&quot;sys#sys.hash_info&quot;&gt;&lt;code&gt;sys.hash_info&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">For numbers &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; , possibly of different types, it&amp;rsquo;s a requirement that &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; whenever &lt;code&gt;x == y&lt;/code&gt; (see the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;) Python&amp;rsquo;s hash for numeric types is based on a single mathematical function that&amp;rsquo;s defined for any rational number, and hence applies to all instances of &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;, and all finite instances of &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt;. Essentially, this function is given by reduction modulo &lt;code&gt;P&lt;/code&gt; for a fixed prime &lt;code&gt;P&lt;/code&gt; . The value of &lt;code&gt;P&lt;/code&gt; is made available to Python as the &lt;code&gt;modulus&lt;/code&gt; attribute of &lt;a href=&quot;sys#sys.hash_info&quot;&gt; &lt;code&gt;sys.hash_info&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="628ceac337b9396c4868029429a446f72adf0fd4" translate="yes" xml:space="preserve">
          <source>For objects constructed from a file without specifying a &lt;code&gt;key&lt;/code&gt; parameter, &lt;code&gt;str&lt;/code&gt; falls back to calling &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;ZoneInfo&lt;/code&gt;&amp;rsquo;s &lt;code&gt;repr&lt;/code&gt; is implementation-defined and not necessarily stable between versions, but it is guaranteed not to be a valid &lt;code&gt;ZoneInfo&lt;/code&gt; key.</source>
          <target state="translated">For objects constructed from a file without specifying a &lt;code&gt;key&lt;/code&gt; parameter, &lt;code&gt;str&lt;/code&gt; falls back to calling &lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;. &lt;code&gt;ZoneInfo&lt;/code&gt; &amp;rsquo;s &lt;code&gt;repr&lt;/code&gt; is implementation-defined and not necessarily stable between versions, but it is guaranteed not to be a valid &lt;code&gt;ZoneInfo&lt;/code&gt; key.</target>
        </trans-unit>
        <trans-unit id="37098851ccc8634e113e32e8099ef7a2d3579db1" translate="yes" xml:space="preserve">
          <source>For objects with custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; methods, note that &lt;a href=&quot;#hash&quot;&gt;&lt;code&gt;hash()&lt;/code&gt;&lt;/a&gt; truncates the return value based on the bit width of the host machine. See &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 메서드가있는 객체의 경우 &lt;a href=&quot;#hash&quot;&gt; &lt;code&gt;hash()&lt;/code&gt; &lt;/a&gt; 는 호스트 시스템의 비트 폭에 따라 반환 값을 자릅니다. 자세한 내용은 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c199eb9825cc4887e1d0cd09984858a99277fadd" translate="yes" xml:space="preserve">
          <source>For objects with custom &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; methods, note that &lt;a href=&quot;#hash&quot;&gt;&lt;code&gt;hash()&lt;/code&gt;&lt;/a&gt; truncates the return value based on the bit width of the host machine. See &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">For objects with custom &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; methods, note that &lt;a href=&quot;#hash&quot;&gt; &lt;code&gt;hash()&lt;/code&gt; &lt;/a&gt; truncates the return value based on the bit width of the host machine. See &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; for details.</target>
        </trans-unit>
        <trans-unit id="30462903d9f2f468f46f7edb480c29e83e9dfb0b" translate="yes" xml:space="preserve">
          <source>For optional argument actions, the value of &lt;code&gt;dest&lt;/code&gt; is normally inferred from the option strings. &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; generates the value of &lt;code&gt;dest&lt;/code&gt; by taking the first long option string and stripping away the initial &lt;code&gt;--&lt;/code&gt; string. If no long option strings were supplied, &lt;code&gt;dest&lt;/code&gt; will be derived from the first short option string by stripping the initial &lt;code&gt;-&lt;/code&gt; character. Any internal &lt;code&gt;-&lt;/code&gt; characters will be converted to &lt;code&gt;_&lt;/code&gt; characters to make sure the string is a valid attribute name. The examples below illustrate this behavior:</source>
          <target state="translated">선택적 인수 조치의 경우 일반적으로 &lt;code&gt;dest&lt;/code&gt; 값은 옵션 문자열에서 유추됩니다. &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; 는&lt;/a&gt; 값 생성 &lt;code&gt;dest&lt;/code&gt; 첫 번째 긴 옵션 문자열을 복용하고 초기 벗겨 의해 &lt;code&gt;--&lt;/code&gt; 문자열입니다. 더 긴 옵션 문자열이 제공되지 않은 경우, &lt;code&gt;dest&lt;/code&gt; 초기 제거하여 첫 번째 단편 옵션 문자열에서 파생됩니다 &lt;code&gt;-&lt;/code&gt; 문자. 내부 &lt;code&gt;-&lt;/code&gt; 문자로 변환됩니다 &lt;code&gt;_&lt;/code&gt; 문자 확인 문자열을 만드는 것은 유효한 속성 이름입니다. 아래 예제는이 동작을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="0f2d0f71428756b986ebaa5435a895c9fa85f213" translate="yes" xml:space="preserve">
          <source>For ordering (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, etc) the rules are different. Interface and address objects with the same IP version can be compared, and the address objects will always sort before the interface objects. Two interface objects are first compared by their networks and, if those are the same, then by their IP addresses.</source>
          <target state="translated">주문 ( &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;gt;&lt;/code&gt; 등)의 경우 규칙이 다릅니다. 동일한 IP 버전의 인터페이스 및 주소 개체를 비교할 수 있으며 주소 개체는 항상 인터페이스 개체보다 먼저 정렬됩니다. 두 개의 인터페이스 객체는 먼저 네트워크에서 비교 한 다음 동일한 경우 IP 주소로 비교합니다.</target>
        </trans-unit>
        <trans-unit id="1a78e5fc164b6225aab0e8520457ff6f179c8031" translate="yes" xml:space="preserve">
          <source>For other containers see the built-in &lt;a href=&quot;stdtypes#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; classes, as well as the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">다른 컨테이너에 대해서는 내장 &lt;a href=&quot;stdtypes#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 클래스 와 &lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bd75d884bb310e831015ffaf69d74418b45d2e9b" translate="yes" xml:space="preserve">
          <source>For other containers see the built-in &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; classes, as well as the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">다른 컨테이너에 대해서는 내장 &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 클래스 와 &lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="806eb52bec9293c5c5e9f3e57a2e9b6409b111da" translate="yes" xml:space="preserve">
          <source>For other containers see the built-in &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; classes, as well as the &lt;a href=&quot;collections#module-collections&quot;&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">다른 컨테이너에 대해서는 내장 &lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 클래스 와 &lt;a href=&quot;collections#module-collections&quot;&gt; &lt;code&gt;collections&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3e3b71d8294ed183632143849e0c5e2186ee11c5" translate="yes" xml:space="preserve">
          <source>For other non-POSIX platforms, currently just returns &lt;a href=&quot;sys#sys.platform&quot;&gt;&lt;code&gt;sys.platform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">POSIX 이외의 다른 플랫폼의 경우 현재 &lt;a href=&quot;sys#sys.platform&quot;&gt; &lt;code&gt;sys.platform&lt;/code&gt; &lt;/a&gt; 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="43510e47adddfe2347126cf63725f54b5b8386f0" translate="yes" xml:space="preserve">
          <source>For other systems, the values are:</source>
          <target state="translated">다른 시스템의 경우 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="80bfe13e7a83c037584f2ad34a471b944fb57186" translate="yes" xml:space="preserve">
          <source>For packages located in the filesystem, which have already been imported, this is the rough equivalent of:</source>
          <target state="translated">이미 반입 된 파일 시스템에있는 패키지의 경우 대략 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5a76a860e58a82ab240c54a9335a87b67ecb80d9" translate="yes" xml:space="preserve">
          <source>For passing messages one can use &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe()&lt;/code&gt;&lt;/a&gt; (for a connection between two processes) or a queue (which allows multiple producers and consumers).</source>
          <target state="translated">메시지를 전달하기 위해 &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt; &lt;code&gt;Pipe()&lt;/code&gt; &lt;/a&gt; (두 프로세스 간 연결을 위해) 또는 큐 (여러 생산자와 소비자를 허용)를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="501f766e72b164e7c677bd88bbc6c17ac2be5b93" translate="yes" xml:space="preserve">
          <source>For performance reasons, &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt;&lt;code&gt;reducer_override()&lt;/code&gt;&lt;/a&gt; may not be called for the following objects: &lt;code&gt;None&lt;/code&gt;, &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;, and exact instances of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">성능상의 이유로 &lt;code&gt;None&lt;/code&gt; , &lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 및 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 인스턴스의 &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt; &lt;code&gt;reducer_override()&lt;/code&gt; &lt;/a&gt; 는 호출되지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7dc577194da823efb388a7e912288fbb2216f9ea" translate="yes" xml:space="preserve">
          <source>For positional arguments with &lt;a href=&quot;#nargs&quot;&gt;nargs&lt;/a&gt; equal to &lt;code&gt;?&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt;, the &lt;code&gt;default&lt;/code&gt; value is used when no command-line argument was present:</source>
          <target state="translated">&lt;a href=&quot;#nargs&quot;&gt;nargs&lt;/a&gt; 가 &lt;code&gt;?&lt;/code&gt; 인 위치 인수의 경우 또는 &lt;code&gt;*&lt;/code&gt; 이면 명령 줄 인수가없는 경우 &lt;code&gt;default&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8b4a550eec3b311ec7c0b5c122c8cd1aa045b2d0" translate="yes" xml:space="preserve">
          <source>For practical suggestions on how to design cooperative classes using &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;, see &lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt;guide to using super()&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; 사용하여 협력 클래스를 디자인하는 방법에 대한 실제 제안은 super ()&lt;a href=&quot;https://rhettinger.wordpress.com/2011/05/26/super-considered-super/&quot;&gt; 사용 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6b9cd2e27090d9128abe570d2d9cdaa38c3b4f0" translate="yes" xml:space="preserve">
          <source>For projects where startup time is critical, this class allows for potentially minimizing the cost of loading a module if it is never used. For projects where startup time is not essential then use of this class is &lt;strong&gt;heavily&lt;/strong&gt; discouraged due to error messages created during loading being postponed and thus occurring out of context.</source>
          <target state="translated">시작 시간이 중요한 프로젝트의 경우이 클래스를 사용하면 모듈을 사용하지 않는 경우로드하는 비용을 최소화 할 수 있습니다. 시작 시간은 필수 다음되는이 클래스를 사용하지 않습니다 프로젝트의 경우 &lt;strong&gt;크게&lt;/strong&gt; 로드하는 동안 생성 된 오류 메시지로 인해 낙심 연기되고, 따라서 문맥 발생.</target>
        </trans-unit>
        <trans-unit id="78750474069e0c64d5febba081125312d17b6e79" translate="yes" xml:space="preserve">
          <source>For reading and writing &lt;code&gt;.gz&lt;/code&gt; files see the &lt;a href=&quot;gzip#module-gzip&quot;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;.gz&lt;/code&gt; 파일을 읽고 쓰 려면 &lt;a href=&quot;gzip#module-gzip&quot;&gt; &lt;code&gt;gzip&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="437ad1fe5a8a295c25c839fc49c827535f9be5a7" translate="yes" xml:space="preserve">
          <source>For scoped addresses as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4007.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4007&lt;/strong&gt;&lt;/a&gt;, this property identifies the particular zone of the address&amp;rsquo;s scope that the address belongs to, as a string. When no scope zone is specified, this property will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">For scoped addresses as defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc4007.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 4007&lt;/strong&gt;&lt;/a&gt;, this property identifies the particular zone of the address&amp;rsquo;s scope that the address belongs to, as a string. When no scope zone is specified, this property will be &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51794c9a03db663b665c1244d6fcc6729a11742e" translate="yes" xml:space="preserve">
          <source>For seekable output streams, the &lt;code&gt;wave&lt;/code&gt; header will automatically be updated to reflect the number of frames actually written. For unseekable streams, the &lt;em&gt;nframes&lt;/em&gt; value must be accurate when the first frame data is written. An accurate &lt;em&gt;nframes&lt;/em&gt; value can be achieved either by calling &lt;a href=&quot;#wave.Wave_write.setnframes&quot;&gt;&lt;code&gt;setnframes()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#wave.Wave_write.setparams&quot;&gt;&lt;code&gt;setparams()&lt;/code&gt;&lt;/a&gt; with the number of frames that will be written before &lt;a href=&quot;#wave.Wave_write.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; is called and then using &lt;a href=&quot;#wave.Wave_write.writeframesraw&quot;&gt;&lt;code&gt;writeframesraw()&lt;/code&gt;&lt;/a&gt; to write the frame data, or by calling &lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt;&lt;code&gt;writeframes()&lt;/code&gt;&lt;/a&gt; with all of the frame data to be written. In the latter case &lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt;&lt;code&gt;writeframes()&lt;/code&gt;&lt;/a&gt; will calculate the number of frames in the data and set &lt;em&gt;nframes&lt;/em&gt; accordingly before writing the frame data.</source>
          <target state="translated">탐색 가능한 출력 스트림의 경우 실제로 작성된 프레임 수를 반영하도록 &lt;code&gt;wave&lt;/code&gt; 헤더가 자동으로 업데이트됩니다. 사용할 수없는 스트림의 경우 첫 번째 프레임 데이터를 쓸 때 &lt;em&gt;nframe&lt;/em&gt; 값이 정확해야합니다. 정확한 &lt;em&gt;nframes의&lt;/em&gt; 값은 호출하거나 얻을 수 &lt;a href=&quot;#wave.Wave_write.setnframes&quot;&gt; &lt;code&gt;setnframes()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#wave.Wave_write.setparams&quot;&gt; &lt;code&gt;setparams()&lt;/code&gt; &lt;/a&gt; 전에 기록 될 프레임 번호 &lt;a href=&quot;#wave.Wave_write.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 하여 다음 호출 및 &lt;a href=&quot;#wave.Wave_write.writeframesraw&quot;&gt; &lt;code&gt;writeframesraw()&lt;/code&gt; &lt;/a&gt; , 또는 호출하여 프레임 데이터를 작성 &lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt; &lt;code&gt;writeframes()&lt;/code&gt; &lt;/a&gt; 모든 프레임 데이터가 기록됩니다. 후자의 경우 &lt;a href=&quot;#wave.Wave_write.writeframes&quot;&gt; &lt;code&gt;writeframes()&lt;/code&gt; &lt;/a&gt; 는 데이터의 프레임 수를 계산하고&lt;em&gt;&lt;/em&gt;따라서 프레임 데이터를 쓰기 전에 &lt;em&gt;nframe을 설정&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="04adcba5227396c66c494ff68cad07039f1493f6" translate="yes" xml:space="preserve">
          <source>For server operation, typically you&amp;rsquo;ll need to have a server certificate, and private key, each in a file. You&amp;rsquo;ll first create a context holding the key and the certificate, so that clients can check your authenticity. Then you&amp;rsquo;ll open a socket, bind it to a port, call &lt;code&gt;listen()&lt;/code&gt; on it, and start waiting for clients to connect:</source>
          <target state="translated">서버 작동을 위해서는 일반적으로 파일에 각각 서버 인증서와 개인 키가 있어야합니다. 먼저 클라이언트가 사용자의 진위를 확인할 수 있도록 키와 인증서를 보유한 컨텍스트를 작성합니다. 그런 다음 소켓을 열고 포트에 바인딩 한 다음 &lt;code&gt;listen()&lt;/code&gt; 을 호출 하고 클라이언트가 연결되기를 기다립니다.</target>
        </trans-unit>
        <trans-unit id="93d8949164ba6462cf8fdab9836ce0f2c519f424" translate="yes" xml:space="preserve">
          <source>For short options (options only one character long), the option and its value can be concatenated:</source>
          <target state="translated">짧은 옵션 (한 문자 길이 만 옵션)의 경우 옵션과 해당 값을 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8894fe625e330e22f451e4d7a6fe84725760ab62" translate="yes" xml:space="preserve">
          <source>For simple text calendars this module provides the following functions.</source>
          <target state="translated">간단한 텍스트 달력의 경우이 모듈은 다음 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="f002790c6797d5ebea652915cb6f6647fee569f5" translate="yes" xml:space="preserve">
          <source>For some &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;s, Python displays the character position of the syntax error, using a &lt;code&gt;^&lt;/code&gt; marker:</source>
          <target state="translated">일부 &lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 의 경우, Python은 &lt;code&gt;^&lt;/code&gt; 마커를 사용하여 구문 오류의 문자 위치를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2a42a868523cbc58a8db9f025c08ecb1cde2a8d5" translate="yes" xml:space="preserve">
          <source>For some applications, it may be more convenient to have the least integer &lt;em&gt;a&lt;/em&gt; such that &lt;em&gt;n&lt;/em&gt; &amp;le; &lt;em&gt;a&lt;/em&gt;&amp;sup2;, or in other words the ceiling of the exact square root of &lt;em&gt;n&lt;/em&gt;. For positive &lt;em&gt;n&lt;/em&gt;, this can be computed using &lt;code&gt;a = 1 + isqrt(n - 1)&lt;/code&gt;.</source>
          <target state="translated">일부 응용의 경우, &lt;em&gt;n&lt;/em&gt; &amp;le; &lt;em&gt;a&lt;/em&gt; &amp;sup2; 또는 다른 말로 &lt;em&gt;n&lt;/em&gt; 의 정확한 제곱근의 천장 과 같은 최소 정수 &lt;em&gt;a&lt;/em&gt; 를 갖는 것이 더 편리 할 수 ​​있습니다 . 양수 &lt;em&gt;n의&lt;/em&gt; 경우 &lt;code&gt;a = 1 + isqrt(n - 1)&lt;/code&gt; 사용하여 계산할 수 있습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="648573c91e5f02118dab0f39da9d75637b36572a" translate="yes" xml:space="preserve">
          <source>For some use cases, there are good alternatives to &lt;a href=&quot;#sum&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;. The preferred, fast way to concatenate a sequence of strings is by calling &lt;code&gt;''.join(sequence)&lt;/code&gt;. To add floating point values with extended precision, see &lt;a href=&quot;math#math.fsum&quot;&gt;&lt;code&gt;math.fsum()&lt;/code&gt;&lt;/a&gt;. To concatenate a series of iterables, consider using &lt;a href=&quot;itertools#itertools.chain&quot;&gt;&lt;code&gt;itertools.chain()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일부 유스 케이스의 경우 &lt;a href=&quot;#sum&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; &lt;/a&gt; 대신 좋은 대안이 있습니다 . 일련의 문자열을 연결하는 선호되는 빠른 방법은 &lt;code&gt;''.join(sequence)&lt;/code&gt; 호출하는 것 입니다. 확장 된 정밀도로 부동 소수점 값을 추가하려면 &lt;a href=&quot;math#math.fsum&quot;&gt; &lt;code&gt;math.fsum()&lt;/code&gt; &lt;/a&gt; 참조하십시오 . 일련의 &lt;a href=&quot;itertools#itertools.chain&quot;&gt; &lt;code&gt;itertools.chain()&lt;/code&gt; &lt;/a&gt; 을 연결하려면 itertools.chain () 사용을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="96785c718078e7660a88cdec515cc89c2714da8a" translate="yes" xml:space="preserve">
          <source>For sorting examples and a brief sorting tutorial, see &lt;a href=&quot;https://docs.python.org/3.8/howto/sorting.html#sortinghowto&quot;&gt;Sorting HOW TO&lt;/a&gt;.</source>
          <target state="translated">정렬 예제 및 간단한 정렬 자습서는 &lt;a href=&quot;https://docs.python.org/3.8/howto/sorting.html#sortinghowto&quot;&gt;정렬 방법을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbcd408d30938f057d8d9f036a2b7cf4ca508481" translate="yes" xml:space="preserve">
          <source>For sorting examples and a brief sorting tutorial, see &lt;a href=&quot;https://docs.python.org/3.9/howto/sorting.html#sortinghowto&quot;&gt;Sorting HOW TO&lt;/a&gt;.</source>
          <target state="translated">For sorting examples and a brief sorting tutorial, see &lt;a href=&quot;https://docs.python.org/3.9/howto/sorting.html#sortinghowto&quot;&gt;Sorting HOW TO&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c2029c5ee892a94642125539a40e6d42df89f30e" translate="yes" xml:space="preserve">
          <source>For special purposes, there is a second format for &lt;em&gt;mode&lt;/em&gt;: &lt;code&gt;'filemode|[compression]'&lt;/code&gt;. &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; will return a &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object that processes its data as a stream of blocks. No random seeking will be done on the file. If given, &lt;em&gt;fileobj&lt;/em&gt; may be any object that has a &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt; method (depending on the &lt;em&gt;mode&lt;/em&gt;). &lt;em&gt;bufsize&lt;/em&gt; specifies the blocksize and defaults to &lt;code&gt;20 * 512&lt;/code&gt; bytes. Use this variant in combination with e.g. &lt;code&gt;sys.stdin&lt;/code&gt;, a socket &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; or a tape device. However, such a &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object is limited in that it does not allow random access, see &lt;a href=&quot;#tar-examples&quot;&gt;Examples&lt;/a&gt;. The currently possible modes:</source>
          <target state="translated">특별한 목적을위한 두 번째 형식이 &lt;em&gt;모드&lt;/em&gt; : &lt;code&gt;'filemode|[compression]'&lt;/code&gt; . &lt;a href=&quot;#tarfile.open&quot;&gt; &lt;code&gt;tarfile.open()&lt;/code&gt; &lt;/a&gt; 은 데이터를 블록 스트림으로 처리 하는 &lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt; 객체를 반환합니다 . 파일에서 무작위 검색을 수행하지 않습니다. 주어진 경우, &lt;em&gt;fileobj&lt;/em&gt; 는 &lt;code&gt;read()&lt;/code&gt; 또는 &lt;code&gt;write()&lt;/code&gt; 메소드 가있는 모든 오브젝트 일 수 있습니다 ( &lt;em&gt;mode&lt;/em&gt; 에 따라 다름 ). &lt;em&gt;bufsize&lt;/em&gt; 는 블록 크기를 지정하고 기본값은 &lt;code&gt;20 * 512&lt;/code&gt; 바이트입니다. 이 변형을 &lt;code&gt;sys.stdin&lt;/code&gt; , 소켓 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;파일 객체&lt;/a&gt; 또는 테이프 장치 와 함께 사용하십시오 . 그러나 이러한 &lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt;객체는 임의 액세스를 허용하지 않는다는 점에서 제한됩니다 ( &lt;a href=&quot;#tar-examples&quot;&gt;예제&lt;/a&gt; 참조) . 현재 가능한 모드 :</target>
        </trans-unit>
        <trans-unit id="93f7d64328c04859d8e9d297410767bf48fcbc05" translate="yes" xml:space="preserve">
          <source>For special purposes, there is a second format for &lt;em&gt;mode&lt;/em&gt;: &lt;code&gt;'filemode|[compression]'&lt;/code&gt;. &lt;a href=&quot;#tarfile.open&quot;&gt;&lt;code&gt;tarfile.open()&lt;/code&gt;&lt;/a&gt; will return a &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object that processes its data as a stream of blocks. No random seeking will be done on the file. If given, &lt;em&gt;fileobj&lt;/em&gt; may be any object that has a &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt; method (depending on the &lt;em&gt;mode&lt;/em&gt;). &lt;em&gt;bufsize&lt;/em&gt; specifies the blocksize and defaults to &lt;code&gt;20 * 512&lt;/code&gt; bytes. Use this variant in combination with e.g. &lt;code&gt;sys.stdin&lt;/code&gt;, a socket &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; or a tape device. However, such a &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; object is limited in that it does not allow random access, see &lt;a href=&quot;#tar-examples&quot;&gt;Examples&lt;/a&gt;. The currently possible modes:</source>
          <target state="translated">For special purposes, there is a second format for &lt;em&gt;mode&lt;/em&gt;: &lt;code&gt;'filemode|[compression]'&lt;/code&gt; . &lt;a href=&quot;#tarfile.open&quot;&gt; &lt;code&gt;tarfile.open()&lt;/code&gt; &lt;/a&gt; will return a &lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt; object that processes its data as a stream of blocks. No random seeking will be done on the file. If given, &lt;em&gt;fileobj&lt;/em&gt; may be any object that has a &lt;code&gt;read()&lt;/code&gt; or &lt;code&gt;write()&lt;/code&gt; method (depending on the &lt;em&gt;mode&lt;/em&gt;). &lt;em&gt;bufsize&lt;/em&gt; specifies the blocksize and defaults to &lt;code&gt;20 * 512&lt;/code&gt; bytes. Use this variant in combination with e.g. &lt;code&gt;sys.stdin&lt;/code&gt; , a socket &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt; or a tape device. However, such a &lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt; object is limited in that it does not allow random access, see &lt;a href=&quot;#tar-examples&quot;&gt;Examples&lt;/a&gt;. The currently possible modes:</target>
        </trans-unit>
        <trans-unit id="9e724cc7dd34b70754120633fc82a51404b0a117" translate="yes" xml:space="preserve">
          <source>For supported platforms, &lt;em&gt;reuse_port&lt;/em&gt; can be used as a replacement for similar functionality. With &lt;em&gt;reuse_port&lt;/em&gt;, &lt;code&gt;SO_REUSEPORT&lt;/code&gt; is used instead, which specifically prevents processes with differing UIDs from assigning sockets to the same socket address.</source>
          <target state="translated">지원되는 플랫폼의 경우 &lt;em&gt;reuse_port&lt;/em&gt; 를 유사한 기능의 대체품으로 사용할 수 있습니다. 함께 &lt;em&gt;reuse_port&lt;/em&gt; , &lt;code&gt;SO_REUSEPORT&lt;/code&gt; 은 특히 동일한 소켓 소켓 주소로 할당 된 UID와 상이한 프로세스를 차단하는 대신에 사용된다.</target>
        </trans-unit>
        <trans-unit id="5159af1687415ddd28bfc2a1995bd20e96f9261b" translate="yes" xml:space="preserve">
          <source>For syntax errors - the compiler error message.</source>
          <target state="translated">구문 오류의 경우-컴파일러 오류 메시지</target>
        </trans-unit>
        <trans-unit id="b24d7db1fe29e271ea208c62a0cee2d863f7cfbe" translate="yes" xml:space="preserve">
          <source>For syntax errors - the file name where the error occurred.</source>
          <target state="translated">구문 오류의 경우-오류가 발생한 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="fb118c31346734709d1426db6d074b4207011e55" translate="yes" xml:space="preserve">
          <source>For syntax errors - the line number where the error occurred.</source>
          <target state="translated">구문 오류의 경우-오류가 발생한 행 번호입니다.</target>
        </trans-unit>
        <trans-unit id="6b624e7edfb4d519a13cd70f09d17bbd81f6bbd3" translate="yes" xml:space="preserve">
          <source>For syntax errors - the offset into the text where the error occurred.</source>
          <target state="translated">구문 오류의 경우-오류가 발생한 텍스트의 오프셋입니다.</target>
        </trans-unit>
        <trans-unit id="c9aff1846aa222da04f164ff51a044fe126a6c43" translate="yes" xml:space="preserve">
          <source>For syntax errors - the text where the error occurred.</source>
          <target state="translated">구문 오류의 경우-오류가 발생한 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="16bafc4e77e27d861636281e2b19c7e7fd37650e" translate="yes" xml:space="preserve">
          <source>For testcase &lt;em&gt;test&lt;/em&gt;, assert that the &lt;code&gt;sys.getsizeof&lt;/code&gt; for &lt;em&gt;o&lt;/em&gt; plus the GC header size equals &lt;em&gt;size&lt;/em&gt;.</source>
          <target state="translated">테스트 케이스를 들어 &lt;em&gt;테스트&lt;/em&gt; , 어설 것을 &lt;code&gt;sys.getsizeof&lt;/code&gt; 에 대한 &lt;em&gt;오&lt;/em&gt; 플러스 GC 헤더 크기는 동일 &lt;em&gt;크기&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="eedb78895083bc4249b703fbfb11d74b4c08f51f" translate="yes" xml:space="preserve">
          <source>For text encodings and bytes-to-bytes codecs, &lt;em&gt;input&lt;/em&gt; must be a bytes object or one which provides the read-only buffer interface &amp;ndash; for example, buffer objects and memory mapped files.</source>
          <target state="translated">텍스트 인코딩 및 바이트-바이트 바이트 코덱의 경우 &lt;em&gt;입력&lt;/em&gt; 은 바이트 객체이거나 읽기 전용 버퍼 인터페이스 (예 : 버퍼 객체 및 메모리 매핑 파일)를 제공하는 바이트 객체 여야합니다.</target>
        </trans-unit>
        <trans-unit id="4ede7b9bd3827048a9fc41eb186f8c2ae84f6480" translate="yes" xml:space="preserve">
          <source>For text mode, a &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt; object is created, and wrapped in an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; instance with the specified encoding, error handling behavior, and line ending(s).</source>
          <target state="translated">텍스트 모드의 경우 &lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt; 객체가 만들어지고 지정된 인코딩, 오류 처리 동작 및 줄 끝으로 &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt; 인스턴스에 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="f2fd028679f350a23785663a8ce425b5391b8814" translate="yes" xml:space="preserve">
          <source>For text mode, a &lt;a href=&quot;#gzip.GzipFile&quot;&gt;&lt;code&gt;GzipFile&lt;/code&gt;&lt;/a&gt; object is created, and wrapped in an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; instance with the specified encoding, error handling behavior, and line ending(s).</source>
          <target state="translated">텍스트 모드의 경우 &lt;a href=&quot;#gzip.GzipFile&quot;&gt; &lt;code&gt;GzipFile&lt;/code&gt; &lt;/a&gt; 객체가 만들어지고 지정된 인코딩, 오류 처리 동작 및 줄 끝으로 &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt; 인스턴스에 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c05c8db2bd0aaaf25d15dba3e01523970a643f1" translate="yes" xml:space="preserve">
          <source>For text mode, a &lt;a href=&quot;#lzma.LZMAFile&quot;&gt;&lt;code&gt;LZMAFile&lt;/code&gt;&lt;/a&gt; object is created, and wrapped in an &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; instance with the specified encoding, error handling behavior, and line ending(s).</source>
          <target state="translated">텍스트 모드의 경우 &lt;a href=&quot;#lzma.LZMAFile&quot;&gt; &lt;code&gt;LZMAFile&lt;/code&gt; &lt;/a&gt; 객체가 만들어지고 지정된 인코딩, 오류 처리 동작 및 줄 끝으로 &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt; 인스턴스에 래핑됩니다 .</target>
        </trans-unit>
        <trans-unit id="7deee04b6bb5f78a5dbf6565cdba6d3b455b142f" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;#datetime.datetime.strptime&quot;&gt;&lt;code&gt;datetime.strptime()&lt;/code&gt;&lt;/a&gt; class method, the default value is &lt;code&gt;1900-01-01T00:00:00.000&lt;/code&gt;: any components not specified in the format string will be pulled from the default value. &lt;a href=&quot;#id8&quot; id=&quot;id4&quot;&gt;4&lt;/a&gt;</source>
          <target state="translated">를 들어 &lt;a href=&quot;#datetime.datetime.strptime&quot;&gt; &lt;code&gt;datetime.strptime()&lt;/code&gt; &lt;/a&gt; 클래스 메소드, 기본 값은 &lt;code&gt;1900-01-01T00:00:00.000&lt;/code&gt; : 형식 문자열에 지정되지 않은 모든 구성 요소는 기본 값에서 가져온 것입니다. &lt;a href=&quot;#id8&quot; id=&quot;id4&quot;&gt;4&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2bb5071a479f35cf824cac2d9cf3dc01818e29a8" translate="yes" xml:space="preserve">
          <source>For the &lt;a href=&quot;#math.ceil&quot;&gt;&lt;code&gt;ceil()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#math.floor&quot;&gt;&lt;code&gt;floor()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#math.modf&quot;&gt;&lt;code&gt;modf()&lt;/code&gt;&lt;/a&gt; functions, note that &lt;em&gt;all&lt;/em&gt; floating-point numbers of sufficiently large magnitude are exact integers. Python floats typically carry no more than 53 bits of precision (the same as the platform C double type), in which case any float &lt;em&gt;x&lt;/em&gt; with &lt;code&gt;abs(x) &amp;gt;= 2**52&lt;/code&gt; necessarily has no fractional bits.</source>
          <target state="translated">를 들어 &lt;a href=&quot;#math.ceil&quot;&gt; &lt;code&gt;ceil()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#math.floor&quot;&gt; &lt;code&gt;floor()&lt;/code&gt; &lt;/a&gt; , 및 &lt;a href=&quot;#math.modf&quot;&gt; &lt;code&gt;modf()&lt;/code&gt; &lt;/a&gt; 함수를 참고 &lt;em&gt;모든&lt;/em&gt; 충분히 큰 크기의 부동 소수점 숫자는 정확한 정수입니다. 파이썬 플로트는 일반적으로 53 비트 이하의 정밀도 (플랫폼 C 더블 타입과 동일)를 가지는데,이 경우 &lt;code&gt;abs(x) &amp;gt;= 2**52&lt;/code&gt; float &lt;em&gt;x&lt;/em&gt; 는 반드시 소수 비트를 갖지 않습니다.</target>
        </trans-unit>
        <trans-unit id="52f764e70635b353f2ccd83e7d601c4b5abba3dd" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;'?'&lt;/code&gt; format character, the return value is either &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;. When packing, the truth value of the argument object is used. Either 0 or 1 in the native or standard bool representation will be packed, and any non-zero value will be &lt;code&gt;True&lt;/code&gt; when unpacking.</source>
          <target state="translated">를 들어 &lt;code&gt;'?'&lt;/code&gt; 형식 문자에서 리턴 값은 &lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt; 입니다. 패킹 할 때 인수 오브젝트의 실제 값이 사용됩니다. 기본 또는 표준 부울 표현에서 0 또는 1이 압축되고 압축을 풀 때 0이 아닌 값은 &lt;code&gt;True&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="611001d6738e1356ca1e9161015c1526eb451d76" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'d'&lt;/code&gt; and &lt;code&gt;'e'&lt;/code&gt; conversion codes, the packed representation uses the IEEE 754 binary32, binary64 or binary16 format (for &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'d'&lt;/code&gt; or &lt;code&gt;'e'&lt;/code&gt; respectively), regardless of the floating-point format used by the platform.</source>
          <target state="translated">내용은 &lt;code&gt;'f'&lt;/code&gt; , &lt;code&gt;'d'&lt;/code&gt; 및 &lt;code&gt;'e'&lt;/code&gt; 변환 코딩, 압축 된 표현은 IEEE 754 binary32 사용 binary64 또는 binary16 포맷 (위한 &lt;code&gt;'f'&lt;/code&gt; , &lt;code&gt;'d'&lt;/code&gt; 또는 &lt;code&gt;'e'&lt;/code&gt; 에 관계없이 부동의 각각) 플랫폼에서 사용하는 포인트 형식</target>
        </trans-unit>
        <trans-unit id="7f192f51888cd6acd09ccae9c792d0d145d044ae" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;'s'&lt;/code&gt; format character, the count is interpreted as the length of the bytes, not a repeat count like for the other format characters; for example, &lt;code&gt;'10s'&lt;/code&gt; means a single 10-byte string, while &lt;code&gt;'10c'&lt;/code&gt; means 10 characters. If a count is not given, it defaults to 1. For packing, the string is truncated or padded with null bytes as appropriate to make it fit. For unpacking, the resulting bytes object always has exactly the specified number of bytes. As a special case, &lt;code&gt;'0s'&lt;/code&gt; means a single, empty string (while &lt;code&gt;'0c'&lt;/code&gt; means 0 characters).</source>
          <target state="translated">를 들어 &lt;code&gt;'s'&lt;/code&gt; 형식 문자의 수는 바이트의 길이 아닌 다른 형식의 문자와 같은 반복 횟수로 해석됩니다; 예를 들어, &lt;code&gt;'10s'&lt;/code&gt; 는 단일 10 바이트 문자열을 의미 하고 &lt;code&gt;'10c'&lt;/code&gt; 는 10자를 의미합니다. 개수를 지정하지 않으면 기본값은 1로 설정됩니다. 패킹의 경우 문자열이 잘 리도록 문자열이 잘 리거나 널 바이트로 채워집니다. 압축 풀기의 경우 결과 바이트 개체에는 항상 지정된 바이트 수가 있습니다. 특별한 경우 &lt;code&gt;'0s'&lt;/code&gt; 는 하나의 빈 문자열을 의미 하며 &lt;code&gt;'0c'&lt;/code&gt; 는 0자를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="7a57bec2e014081dae4b27453586de233679ac55" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;Document&lt;/code&gt; node, an additional keyword argument &lt;em&gt;encoding&lt;/em&gt; can be used to specify the encoding field of the XML header.</source>
          <target state="translated">를 들어 &lt;code&gt;Document&lt;/code&gt; 노드 추가 키워드 인수 &lt;em&gt;인코딩&lt;/em&gt; 은 XML 헤더의 인코딩 필드를 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e765b069ab6f4fd670732d7dd9f9ae6b12c9e58d" translate="yes" xml:space="preserve">
          <source>For the &lt;em&gt;isolation_level&lt;/em&gt; parameter, please see the &lt;a href=&quot;#sqlite3.Connection.isolation_level&quot;&gt;&lt;code&gt;isolation_level&lt;/code&gt;&lt;/a&gt; property of &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">를 들어 &lt;em&gt;파라미터 isolation_level&lt;/em&gt; 매개 변수의 참조하시기 바랍니다 &lt;a href=&quot;#sqlite3.Connection.isolation_level&quot;&gt; &lt;code&gt;isolation_level&lt;/code&gt; &lt;/a&gt; 의 특성 &lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 개체를.</target>
        </trans-unit>
        <trans-unit id="a8ffbaaffc9a1867b68ff05863b8b09074fd8418" translate="yes" xml:space="preserve">
          <source>For the &lt;em&gt;names&lt;/em&gt; parameter, please see the description of the translation object&amp;rsquo;s &lt;a href=&quot;#gettext.NullTranslations.install&quot;&gt;&lt;code&gt;install()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">를 들어 &lt;em&gt;이름&lt;/em&gt; 매개 변수, 번역 객체의 설명을 참조하시기 바랍니다 &lt;a href=&quot;#gettext.NullTranslations.install&quot;&gt; &lt;code&gt;install()&lt;/code&gt; &lt;/a&gt; 메소드를.</target>
        </trans-unit>
        <trans-unit id="b4c0224e26f9eea1c70ca73fc7698daec9161151" translate="yes" xml:space="preserve">
          <source>For the Python events, specialized functions (see below) are called. For the C events, no action is taken.</source>
          <target state="translated">Python 이벤트의 경우 특수 함수 (아래 참조)가 호출됩니다. C 이벤트의 경우 조치가 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="13289039e0f8416eb74312f3daa07466ee8be0ee" translate="yes" xml:space="preserve">
          <source>For the above Timezone constants (&lt;a href=&quot;#time.altzone&quot;&gt;&lt;code&gt;altzone&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.daylight&quot;&gt;&lt;code&gt;daylight&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#time.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#time.tzname&quot;&gt;&lt;code&gt;tzname&lt;/code&gt;&lt;/a&gt;), the value is determined by the timezone rules in effect at module load time or the last time &lt;a href=&quot;#time.tzset&quot;&gt;&lt;code&gt;tzset()&lt;/code&gt;&lt;/a&gt; is called and may be incorrect for times in the past. It is recommended to use the &lt;code&gt;tm_gmtoff&lt;/code&gt; and &lt;code&gt;tm_zone&lt;/code&gt; results from &lt;a href=&quot;#time.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; to obtain timezone information.</source>
          <target state="translated">위의 시간대 상수 ( &lt;a href=&quot;#time.altzone&quot;&gt; &lt;code&gt;altzone&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#time.daylight&quot;&gt; &lt;code&gt;daylight&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#time.timezone&quot;&gt; &lt;code&gt;timezone&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#time.tzname&quot;&gt; &lt;code&gt;tzname&lt;/code&gt; &lt;/a&gt; )의 경우, 값은 모듈로드 시간 또는 &lt;a href=&quot;#time.tzset&quot;&gt; &lt;code&gt;tzset()&lt;/code&gt; &lt;/a&gt; 이 마지막으로 호출 된 시간에 적용되는 시간대 규칙에 의해 결정되며 과거의 시간에는 올바르지 않을 수 있습니다. &lt;a href=&quot;#time.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt; 에서 &lt;code&gt;tm_gmtoff&lt;/code&gt; 및 &lt;code&gt;tm_zone&lt;/code&gt; 결과 를 사용하여 시간대 정보를 얻는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="7b9a64815701e952e36b227a62e8302ec1c91dee" translate="yes" xml:space="preserve">
          <source>For the benefit of object persistence, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module supports the notion of a reference to an object outside the pickled data stream. Such objects are referenced by a persistent ID, which should be either a string of alphanumeric characters (for protocol 0) &lt;a href=&quot;#id11&quot; id=&quot;id6&quot;&gt;5&lt;/a&gt; or just an arbitrary object (for any newer protocol).</source>
          <target state="translated">객체 지속성의 이점을 위해 &lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt; 모듈은 피클 링 된 데이터 스트림 외부의 객체에 대한 참조 개념을 지원합니다. 이러한 객체는 영숫자 문자열 (프로토콜 0의 경우) &lt;a href=&quot;#id11&quot; id=&quot;id6&quot;&gt;5&lt;/a&gt; 또는 임의의 객체 (최신의 프로토콜의 경우) 인 영구 ID로 참조됩니다 .</target>
        </trans-unit>
        <trans-unit id="b045188bbc955a84058e3770ed7a3666adb42d3f" translate="yes" xml:space="preserve">
          <source>For the benefits of packaging tool authors and users seeking a deeper understanding of the details of the current packaging and distribution system, the legacy &lt;a href=&quot;#module-distutils&quot;&gt;&lt;code&gt;distutils&lt;/code&gt;&lt;/a&gt; based user documentation and API reference remain available:</source>
          <target state="translated">패키징 도구 제작자와 현재 패키징 및 배포 시스템의 세부 사항에 대한 심층적 인 이해를 원하는 사용자의 이점을 위해 레거시 &lt;a href=&quot;#module-distutils&quot;&gt; &lt;code&gt;distutils&lt;/code&gt; &lt;/a&gt; 기반 사용자 설명서 및 API 참조를 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1462943ac090bb5ad3073f88b1c8562ef1b6a082" translate="yes" xml:space="preserve">
          <source>For the built-in types supporting &lt;a href=&quot;#round&quot;&gt;&lt;code&gt;round()&lt;/code&gt;&lt;/a&gt;, values are rounded to the closest multiple of 10 to the power minus &lt;em&gt;ndigits&lt;/em&gt;; if two multiples are equally close, rounding is done toward the even choice (so, for example, both &lt;code&gt;round(0.5)&lt;/code&gt; and &lt;code&gt;round(-0.5)&lt;/code&gt; are &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;round(1.5)&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;). Any integer value is valid for &lt;em&gt;ndigits&lt;/em&gt; (positive, zero, or negative). The return value is an integer if &lt;em&gt;ndigits&lt;/em&gt; is omitted or &lt;code&gt;None&lt;/code&gt;. Otherwise the return value has the same type as &lt;em&gt;number&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;#round&quot;&gt; &lt;code&gt;round()&lt;/code&gt; &lt;/a&gt; 지원하는 내장 유형의 경우 , 값은 10의 가장 가까운 배수에서 10을 뺀 &lt;em&gt;n 자리로 반올림됩니다&lt;/em&gt; . 두 배수가 동일하게 가까운 경우 반올림은 짝수 선택으로 수행됩니다 (예를 들어 &lt;code&gt;round(0.5)&lt;/code&gt; 와 &lt;code&gt;round(-0.5)&lt;/code&gt; 는 &lt;code&gt;0&lt;/code&gt; 이고 &lt;code&gt;round(1.5)&lt;/code&gt; 는 &lt;code&gt;2&lt;/code&gt; ). 모든 정수 값은 &lt;em&gt;n 숫자&lt;/em&gt; (양수, 0 또는 음수)에 유효합니다 . &lt;em&gt;ndigits&lt;/em&gt; 가 생략되거나 &lt;code&gt;None&lt;/code&gt; 이면 리턴 값은 정수 입니다. 그렇지 않으면 리턴 값은 &lt;em&gt;number&lt;/em&gt; 와 동일한 유형을 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="2e1c161596883b7277d9a4af44c45f35acd87877" translate="yes" xml:space="preserve">
          <source>For the following attributes and methods, see the corresponding documentation of the &lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt;&lt;code&gt;IPv4Address&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">For the following attributes and methods, see the corresponding documentation of the &lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt; &lt;code&gt;IPv4Address&lt;/code&gt; &lt;/a&gt; class:</target>
        </trans-unit>
        <trans-unit id="73a23e456670e90cd6606464d13a857da8671966" translate="yes" xml:space="preserve">
          <source>For the following attributes, see the corresponding documentation of the &lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt;&lt;code&gt;IPv4Address&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">다음 속성에 대해서는 해당 &lt;a href=&quot;#ipaddress.IPv4Address&quot;&gt; &lt;code&gt;IPv4Address&lt;/code&gt; &lt;/a&gt; 클래스 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2be20c20d73d48c96e4a903fa7ca4c398ed3e7e" translate="yes" xml:space="preserve">
          <source>For the majority of new code, &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; are strongly recommended, since &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; break some semantic promises of an enumeration (by being comparable to integers, and thus by transitivity to other unrelated enumerations). &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; should be used only in cases where &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; will not do; for example, when integer constants are replaced with enumerations, or for interoperability with other systems.</source>
          <target state="translated">&lt;a href=&quot;#enum.IntEnum&quot;&gt; &lt;code&gt;IntEnum&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt; 는 열거 형에 대한 의미 론적 약속 (정수와 비교 가능하고 따라서 다른 관련없는 열거 형과의 전이에 의해)을 위반하기 때문에 대부분의 새 코드의 경우 &lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#enum.Flag&quot;&gt; &lt;code&gt;Flag&lt;/code&gt; &lt;/a&gt; 를 적극 권장 합니다. &lt;a href=&quot;#enum.IntEnum&quot;&gt; &lt;code&gt;IntEnum&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#enum.Flag&quot;&gt; &lt;code&gt;Flag&lt;/code&gt; &lt;/a&gt; 가 수행하지 않는 경우에만 사용해야합니다 . 예를 들어 정수 상수가 열거로 대체되거나 다른 시스템과의 상호 운용성을 위해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="71b157ee65429737704fc6d86dc2ce45635ad80d" translate="yes" xml:space="preserve">
          <source>For the same reason, handling of format strings containing Unicode code points that can&amp;rsquo;t be represented in the charset of the current locale is also platform-dependent. On some platforms such code points are preserved intact in the output, while on others &lt;code&gt;strftime&lt;/code&gt; may raise &lt;a href=&quot;exceptions#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt; or return an empty string instead.</source>
          <target state="translated">같은 이유로 현재 로케일의 문자 세트로 표현할 수없는 유니 코드 코드 포인트를 포함하는 형식 문자열을 처리하는 것도 플랫폼에 따라 다릅니다. 일부 플랫폼에서는 이러한 코드 포인트가 출력에 그대로 유지되고 다른 플랫폼에서는 &lt;code&gt;strftime&lt;/code&gt; 이 &lt;a href=&quot;exceptions#UnicodeError&quot;&gt; &lt;code&gt;UnicodeError&lt;/code&gt; 를 발생&lt;/a&gt; 시키거나 대신 빈 문자열을 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1a73815f89f761330d046832365445a6b98cdffe" translate="yes" xml:space="preserve">
          <source>For the simplest code, use the &lt;a href=&quot;#pickle.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">가장 간단한 코드의 경우 &lt;a href=&quot;#pickle.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#pickle.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f1e544ac7100874cff048477249bb3ab3c46c877" translate="yes" xml:space="preserve">
          <source>For the string argument, abbreviations can be used for any key names, as long as the abbreviation is unambiguous.</source>
          <target state="translated">문자열 인수의 경우 약어가 명확하지 않은 한 모든 키 이름에 약어를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58f6887a34bff030cddfd82bd93f8fa6b82b32ef" translate="yes" xml:space="preserve">
          <source>For the subset of &lt;a href=&quot;struct#module-struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt; format strings currently supported by &lt;a href=&quot;#memoryview.tolist&quot;&gt;&lt;code&gt;tolist()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;v&lt;/code&gt; and &lt;code&gt;w&lt;/code&gt; are equal if &lt;code&gt;v.tolist() == w.tolist()&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;#memoryview.tolist&quot;&gt; &lt;code&gt;tolist()&lt;/code&gt; &lt;/a&gt; 에서 현재 지원되는 &lt;a href=&quot;struct#module-struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt; 형식 문자열 의 하위 집합에 대해 &lt;code&gt;v.tolist() == w.tolist()&lt;/code&gt; 경우 &lt;code&gt;v&lt;/code&gt; 와 &lt;code&gt;w&lt;/code&gt; 는 같습니다 .</target>
        </trans-unit>
        <trans-unit id="e73a0afbcd4ef09c3f17e9fa247b96c32dcb9705" translate="yes" xml:space="preserve">
          <source>For the time being this module is intended to be called as a script. However it is possible to import it into an IDE and use the function &lt;a href=&quot;#tabnanny.check&quot;&gt;&lt;code&gt;check()&lt;/code&gt;&lt;/a&gt; described below.</source>
          <target state="translated">당분간이 모듈은 스크립트라고 부릅니다. 그러나 IDE로 가져 와서 아래 설명 된 &lt;a href=&quot;#tabnanny.check&quot;&gt; &lt;code&gt;check()&lt;/code&gt; &lt;/a&gt; 함수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ca2089e1b1b8df1c2f032b1f3536ad34cfdfa0f" translate="yes" xml:space="preserve">
          <source>For these cases, the &lt;a href=&quot;#ctypes.cast&quot;&gt;&lt;code&gt;cast()&lt;/code&gt;&lt;/a&gt; function is handy.</source>
          <target state="translated">이 경우 &lt;a href=&quot;#ctypes.cast&quot;&gt; &lt;code&gt;cast()&lt;/code&gt; &lt;/a&gt; 함수가 편리합니다.</target>
        </trans-unit>
        <trans-unit id="38474aedf079e8a0abf4fea4dc3de7267bfeb1eb" translate="yes" xml:space="preserve">
          <source>For these objects, only the interfaces are relevant; they are normally not instantiated by the application itself. Since Python does not have an explicit notion of interface, they are formally introduced as classes, but applications may use implementations which do not inherit from the provided classes. The &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.Locator&quot;&gt;&lt;code&gt;Locator&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;AttributesNS&lt;/code&gt;, and &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt;&lt;code&gt;XMLReader&lt;/code&gt;&lt;/a&gt; interfaces are defined in the module &lt;a href=&quot;xml.sax.reader#module-xml.sax.xmlreader&quot;&gt;&lt;code&gt;xml.sax.xmlreader&lt;/code&gt;&lt;/a&gt;. The handler interfaces are defined in &lt;a href=&quot;xml.sax.handler#module-xml.sax.handler&quot;&gt;&lt;code&gt;xml.sax.handler&lt;/code&gt;&lt;/a&gt;. For convenience, &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt;&lt;code&gt;InputSource&lt;/code&gt;&lt;/a&gt; (which is often instantiated directly) and the handler classes are also available from &lt;a href=&quot;#module-xml.sax&quot;&gt;&lt;code&gt;xml.sax&lt;/code&gt;&lt;/a&gt;. These interfaces are described below.</source>
          <target state="translated">이러한 객체의 경우 인터페이스 만 관련됩니다. 일반적으로 응용 프로그램 자체에서 인스턴스화되지 않습니다. 파이썬에는 명시적인 인터페이스 개념이 없기 때문에 공식적으로 클래스로 소개되지만 애플리케이션은 제공된 클래스에서 상속되지 않은 구현을 사용할 수 있습니다. &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; 를&lt;/a&gt; , &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.Locator&quot;&gt; &lt;code&gt;Locator&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;Attributes&lt;/code&gt; , &lt;code&gt;AttributesNS&lt;/code&gt; 과 &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.XMLReader&quot;&gt; &lt;code&gt;XMLReader&lt;/code&gt; &lt;/a&gt; 인터페이스 모듈에 정의 &lt;a href=&quot;xml.sax.reader#module-xml.sax.xmlreader&quot;&gt; &lt;code&gt;xml.sax.xmlreader&lt;/code&gt; &lt;/a&gt; . 처리기 인터페이스는 &lt;a href=&quot;xml.sax.handler#module-xml.sax.handler&quot;&gt; &lt;code&gt;xml.sax.handler&lt;/code&gt; 에&lt;/a&gt; 정의되어 있습니다 . 편의상 &lt;a href=&quot;xml.sax.reader#xml.sax.xmlreader.InputSource&quot;&gt; &lt;code&gt;InputSource&lt;/code&gt; &lt;/a&gt; (종종 직접 인스턴스화 됨) 및 핸들러 클래스도 &lt;a href=&quot;#module-xml.sax&quot;&gt; &lt;code&gt;xml.sax&lt;/code&gt; &lt;/a&gt; 에서 사용할 수 있습니다 .. 이러한 인터페이스는 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee46acf978b898ca00a8f81ccc140323b27a7cf5" translate="yes" xml:space="preserve">
          <source>For this reason, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; also supports a notion of &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; reporting flags specific to &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; support, via this function:</source>
          <target state="translated">이러한 이유로 &lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt; 는 다음 함수를 통해 &lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 지원에 특정한 &lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt; 보고 플래그 개념을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="c13f2c1afd203047a3facf9de7c005252d73b85c" translate="yes" xml:space="preserve">
          <source>For this reason, &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; provides a &lt;a href=&quot;#unittest.FunctionTestCase&quot;&gt;&lt;code&gt;FunctionTestCase&lt;/code&gt;&lt;/a&gt; class. This subclass of &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; can be used to wrap an existing test function. Set-up and tear-down functions can also be provided.</source>
          <target state="translated">이러한 이유로 &lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;#unittest.FunctionTestCase&quot;&gt; &lt;code&gt;FunctionTestCase&lt;/code&gt; &lt;/a&gt; 클래스를 제공합니다 . 이 &lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt; 서브 클래스 는 기존 테스트 기능을 랩핑하는 데 사용될 수 있습니다. 설정 및 분해 기능도 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65a7e5d1693de8c1b6156055b18a67eb702cc5ca" translate="yes" xml:space="preserve">
          <source>For this reason, you may want to control what gets unpickled by customizing &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt;&lt;code&gt;Unpickler.find_class()&lt;/code&gt;&lt;/a&gt;. Unlike its name suggests, &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt;&lt;code&gt;Unpickler.find_class()&lt;/code&gt;&lt;/a&gt; is called whenever a global (i.e., a class or a function) is requested. Thus it is possible to either completely forbid globals or restrict them to a safe subset.</source>
          <target state="translated">이러한 이유로 &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt; &lt;code&gt;Unpickler.find_class()&lt;/code&gt; &lt;/a&gt; 를 사용자 정의하여 피클 링되지 않는 항목을 제어 할 수 있습니다 . 이름에서 알 수 있듯이 전역 (예 : 클래스 또는 함수)이 요청 될 때마다 &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt; &lt;code&gt;Unpickler.find_class()&lt;/code&gt; &lt;/a&gt; 가 호출됩니다. 따라서 전역을 완전히 금지하거나 안전한 하위 집합으로 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e17084e55d94584dbb25c342418d6aac7734b582" translate="yes" xml:space="preserve">
          <source>For those cases, it is possible to subclass from the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; class and implement a &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt;&lt;code&gt;reducer_override()&lt;/code&gt;&lt;/a&gt; method. This method can return an arbitrary reduction tuple (see &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt;). It can alternatively return &lt;code&gt;NotImplemented&lt;/code&gt; to fallback to the traditional behavior.</source>
          <target state="translated">이러한 경우 &lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt; 클래스 에서 서브 클래스를 작성하고 &lt;a href=&quot;#pickle.Pickler.reducer_override&quot;&gt; &lt;code&gt;reducer_override()&lt;/code&gt; &lt;/a&gt; 메소드를 구현할 수 있습니다. 이 메소드는 임의 감소 튜플을 리턴 할 수 있습니다 ( &lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt; 참조 ). 또는 기존의 동작으로 대체하기 위해 &lt;code&gt;NotImplemented&lt;/code&gt; 를 반환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c6d2305fa8501efef901d74c92da8478ba9fafef" translate="yes" xml:space="preserve">
          <source>For those who want to manage their own token length, you can explicitly specify how much randomness is used for tokens by giving an &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; argument to the various &lt;code&gt;token_*&lt;/code&gt; functions. That argument is taken as the number of bytes of randomness to use.</source>
          <target state="translated">자체 토큰 길이를 관리하려는 경우 다양한 &lt;code&gt;token_*&lt;/code&gt; 함수에 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; 인수를 지정하여 토큰에 사용되는 임의의 정도를 명시 적으로 지정할 수 있습니다 . 이 인수는 사용할 임의 바이트 수로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="bab28f84b72c604f4046046ab996c3eb0c3e68fd" translate="yes" xml:space="preserve">
          <source>For top-level classes, None. For nested classes, the parent.</source>
          <target state="translated">최상위 클래스의 경우 없음 중첩 클래스의 경우 부모입니다.</target>
        </trans-unit>
        <trans-unit id="d182afd5a541d26e3f1ed845af8ddb203dc4413e" translate="yes" xml:space="preserve">
          <source>For top-level functions, None. For nested functions, the parent.</source>
          <target state="translated">최상위 기능의 경우 없음 중첩 함수의 경우 부모입니다.</target>
        </trans-unit>
        <trans-unit id="6a78b493fd8c37102ee3eff14bfd254085325210" translate="yes" xml:space="preserve">
          <source>For use with &lt;code&gt;BTPROTO_HCI&lt;/code&gt;. &lt;a href=&quot;#socket.HCI_FILTER&quot;&gt;&lt;code&gt;HCI_FILTER&lt;/code&gt;&lt;/a&gt; is not available for NetBSD or DragonFlyBSD. &lt;a href=&quot;#socket.HCI_TIME_STAMP&quot;&gt;&lt;code&gt;HCI_TIME_STAMP&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socket.HCI_DATA_DIR&quot;&gt;&lt;code&gt;HCI_DATA_DIR&lt;/code&gt;&lt;/a&gt; are not available for FreeBSD, NetBSD, or DragonFlyBSD.</source>
          <target state="translated">&lt;code&gt;BTPROTO_HCI&lt;/code&gt; 와 함께 사용 하십시오 . NetBSD 또는 DragonFlyBSD에는 &lt;a href=&quot;#socket.HCI_FILTER&quot;&gt; &lt;code&gt;HCI_FILTER&lt;/code&gt; &lt;/a&gt; 를 사용할 수 없습니다. &lt;a href=&quot;#socket.HCI_TIME_STAMP&quot;&gt; &lt;code&gt;HCI_TIME_STAMP&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#socket.HCI_DATA_DIR&quot;&gt; &lt;code&gt;HCI_DATA_DIR&lt;/code&gt; &lt;/a&gt; 은 FreeBSD, NetBSD 또는 DragonFlyBSD에 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ed2b5ac8be7dacc4312f352c9b986cd446f431b3" translate="yes" xml:space="preserve">
          <source>For variable-keyword arguments (&lt;code&gt;**kwargs&lt;/code&gt;) the default is an empty dict.</source>
          <target state="translated">가변 키워드 인수 ( &lt;code&gt;**kwargs&lt;/code&gt; )의 경우 기본값은 빈 dict입니다.</target>
        </trans-unit>
        <trans-unit id="3dc4384699ee9666f410852cc46018f94c9db172" translate="yes" xml:space="preserve">
          <source>For variable-positional arguments (&lt;code&gt;*args&lt;/code&gt;) the default is an empty tuple.</source>
          <target state="translated">가변 위치 인수 ( &lt;code&gt;*args&lt;/code&gt; )의 경우 기본값은 빈 튜플입니다.</target>
        </trans-unit>
        <trans-unit id="b7c7653bbef7bfc03abec2d286867e64e19e8e90" translate="yes" xml:space="preserve">
          <source>For whole format strings, use &lt;a href=&quot;#locale.format_string&quot;&gt;&lt;code&gt;format_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">전체 형식 문자열에는 &lt;a href=&quot;#locale.format_string&quot;&gt; &lt;code&gt;format_string()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="156d0d7f0e9413113c4283570b0df5af41af13a0" translate="yes" xml:space="preserve">
          <source>For zones constructed from file without specifying a &lt;code&gt;key&lt;/code&gt; parameter, this will be set to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">For zones constructed from file without specifying a &lt;code&gt;key&lt;/code&gt; parameter, this will be set to &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="04d9e9125490dc0b44c13e9f2f792a0f9450932b" translate="yes" xml:space="preserve">
          <source>Force as many objects as possible to be collected. This is needed because timely deallocation is not guaranteed by the garbage collector. This means that &lt;code&gt;__del__&lt;/code&gt; methods may be called later than expected and weakrefs may remain alive for longer than expected.</source>
          <target state="translated">가능한 많은 개체를 수집하도록합니다. 가비지 수집기에서 적시에 할당 해제를 보장하지 않기 때문에이 작업이 필요합니다. 이는 &lt;code&gt;__del__&lt;/code&gt; 메소드가 예상보다 늦게 호출 될 수 있으며 weakref는 예상보다 오래 지속될 수 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="6a939f545eb3ce830f616a1a28bc1a63e0fe5ed3" translate="yes" xml:space="preserve">
          <source>Force buffered data to be transmitted to the client. It&amp;rsquo;s okay if this method is a no-op (i.e., if &lt;a href=&quot;#wsgiref.handlers.BaseHandler._write&quot;&gt;&lt;code&gt;_write()&lt;/code&gt;&lt;/a&gt; actually sends the data).</source>
          <target state="translated">버퍼링 된 데이터가 클라이언트로 전송되도록합니다. 이 메소드가 no-op라면 (즉, &lt;a href=&quot;#wsgiref.handlers.BaseHandler._write&quot;&gt; &lt;code&gt;_write()&lt;/code&gt; &lt;/a&gt; 실제로 데이터를 보내는 경우 ) 괜찮습니다 .</target>
        </trans-unit>
        <trans-unit id="9e04e3f91bf11b867e737db3820385321c5dd5a3" translate="yes" xml:space="preserve">
          <source>Force bytes held in the buffer into the raw stream. A &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; should be raised if the raw stream blocks.</source>
          <target state="translated">버퍼에 유지 된 바이트를 원시 스트림으로 강제합니다. &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; 는&lt;/a&gt; 원시 스트림 블록 경우에 발생한다.</target>
        </trans-unit>
        <trans-unit id="3814643afec1943c4c3295af6d5883427e7464b5" translate="yes" xml:space="preserve">
          <source>Force processing of all buffered data as if it were followed by an end-of-file mark. This method may be redefined by a derived class to define additional processing at the end of the input, but the redefined version should always call the &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; base class method &lt;a href=&quot;#html.parser.HTMLParser.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">마치 파일 끝 표시가있는 것처럼 모든 버퍼링 된 데이터를 강제 처리합니다. 이 메소드는 파생 클래스에서 재정 의하여 입력 끝에 추가 처리를 정의 할 수 있지만 재정의 된 버전은 항상 &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt; &lt;code&gt;HTMLParser&lt;/code&gt; &lt;/a&gt; 기본 클래스 메소드 &lt;a href=&quot;#html.parser.HTMLParser.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="af599334f590af897809afaeb762277ded4e96df" translate="yes" xml:space="preserve">
          <source>Force rebuild even if timestamps are up-to-date.</source>
          <target state="translated">타임 스탬프가 최신 인 경우에도 강제로 다시 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="9a64202427e8fe21214e70464bd1aec2542b9f21" translate="yes" xml:space="preserve">
          <source>Force the &lt;code&gt;malloc()&lt;/code&gt; heap to clean itself up and return unused blocks to the operating system. On failure, this raises &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;malloc()&lt;/code&gt; 힙을 강제 로 정리하고 사용하지 않는 블록을 운영 체제로 리턴하십시오. 실패하면 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="19d31fd6b2df693dc550368a6c845c371544b270" translate="yes" xml:space="preserve">
          <source>Force use of &lt;code&gt;CRAM-MD5&lt;/code&gt; authentication when identifying the client to protect the password. Will only work if the server &lt;code&gt;CAPABILITY&lt;/code&gt; response includes the phrase &lt;code&gt;AUTH=CRAM-MD5&lt;/code&gt;.</source>
          <target state="translated">강제 사용 &lt;code&gt;CRAM-MD5&lt;/code&gt; 의 인증 암호를 보호하기 위해 클라이언트를 식별 할 때. 서버 &lt;code&gt;CAPABILITY&lt;/code&gt; 응답에 &lt;code&gt;AUTH=CRAM-MD5&lt;/code&gt; 문구가 포함 된 경우에만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="ab13cdc95de3d7531cb31f5ddbb861e2d8b77785" translate="yes" xml:space="preserve">
          <source>Force write of everything to disk.</source>
          <target state="translated">디스크에 모든 것을 강제로 기록합니다.</target>
        </trans-unit>
        <trans-unit id="a2d96a80900bc13facf56d7742e8d8ff57e15a8c" translate="yes" xml:space="preserve">
          <source>Force write of file with filedescriptor &lt;em&gt;fd&lt;/em&gt; to disk. Does not force update of metadata.</source>
          <target state="translated">파일 &lt;em&gt;디스크립터 fd&lt;/em&gt; 를 가진 파일 을 디스크에 강제로 쓰십시오 . 메타 데이터를 강제로 업데이트하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4c49957cff34733d16e38876ce4dd54c1c1dc339" translate="yes" xml:space="preserve">
          <source>Force write of file with filedescriptor &lt;em&gt;fd&lt;/em&gt; to disk. On Unix, this calls the native &lt;code&gt;fsync()&lt;/code&gt; function; on Windows, the MS &lt;code&gt;_commit()&lt;/code&gt; function.</source>
          <target state="translated">파일 &lt;em&gt;디스크립터 fd&lt;/em&gt; 를 가진 파일 을 디스크에 강제로 쓰십시오 . 유닉스에서는 네이티브 &lt;code&gt;fsync()&lt;/code&gt; 함수를 호출합니다 . Windows에서는 MS &lt;code&gt;_commit()&lt;/code&gt; 함수입니다.</target>
        </trans-unit>
        <trans-unit id="b57f0c15791c6915cb3fe418d16a695f3e93406f" translate="yes" xml:space="preserve">
          <source>Forces the field to be centered within the available space.</source>
          <target state="translated">사용 가능한 공간 내에서 필드를 중심으로합니다.</target>
        </trans-unit>
        <trans-unit id="89bf2d916edc333230584e34f64cea573d2cc13c" translate="yes" xml:space="preserve">
          <source>Forces the field to be left-aligned within the available space (this is the default for most objects).</source>
          <target state="translated">사용 가능한 공간 내에서 필드가 왼쪽 정렬되도록합니다 (대부분의 개체에 대한 기본값 임).</target>
        </trans-unit>
        <trans-unit id="72cd2faf3a66abe4dfd120a3b0bee5e88182838a" translate="yes" xml:space="preserve">
          <source>Forces the field to be right-aligned within the available space (this is the default for numbers).</source>
          <target state="translated">사용 가능한 공간 내에서 필드가 오른쪽 정렬되도록합니다 (이는 숫자의 기본값 임).</target>
        </trans-unit>
        <trans-unit id="02886633a6050534b2f499dba88d89c2fa0ba3d6" translate="yes" xml:space="preserve">
          <source>Forces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form &amp;lsquo;+000000120&amp;rsquo;. This alignment option is only valid for numeric types. It becomes the default when &amp;lsquo;0&amp;rsquo; immediately precedes the field width.</source>
          <target state="translated">패딩을 부호 뒤에 (있는 경우), 숫자 앞에 배치합니다. '+000000120'형식으로 필드를 인쇄하는 데 사용됩니다. 이 정렬 옵션은 숫자 유형에만 유효합니다. '0'이 필드 너비 바로 앞에 오면 기본값이됩니다.</target>
        </trans-unit>
        <trans-unit id="92a345d72de9b39978fa7f3c0773802f918e7f9d" translate="yes" xml:space="preserve">
          <source>Foreign functions</source>
          <target state="translated">외국 기능</target>
        </trans-unit>
        <trans-unit id="e9b0e4d2b6b7914c709024acdcc872d645aad7b3" translate="yes" xml:space="preserve">
          <source>Foreign functions can also be created by instantiating function prototypes. Function prototypes are similar to function prototypes in C; they describe a function (return type, argument types, calling convention) without defining an implementation. The factory functions must be called with the desired result type and the argument types of the function, and can be used as decorator factories, and as such, be applied to functions through the &lt;code&gt;@wrapper&lt;/code&gt; syntax. See &lt;a href=&quot;#ctypes-callback-functions&quot;&gt;Callback functions&lt;/a&gt; for examples.</source>
          <target state="translated">함수 프로토 타입을 인스턴스화하여 외부 함수를 작성할 수도 있습니다. 함수 프로토 타입은 C의 함수 프로토 타입과 유사합니다. 구현을 정의하지 않고 함수 (반환 유형, 인수 유형, 호출 규칙)를 설명합니다. 팩토리 함수는 원하는 결과 유형과 함수의 인수 유형으로 호출해야하며 데코레이터 팩토리로 사용할 수 있으며 &lt;code&gt;@wrapper&lt;/code&gt; 구문을 통해 함수에 적용 할 수 있습니다 . 예제는 &lt;a href=&quot;#ctypes-callback-functions&quot;&gt;콜백 함수&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab6062a9bf3c1239139985c0532b99c45de86a25" translate="yes" xml:space="preserve">
          <source>Fork a child process, using a new pseudo-terminal as the child&amp;rsquo;s controlling terminal. Return a pair of &lt;code&gt;(pid, fd)&lt;/code&gt;, where &lt;em&gt;pid&lt;/em&gt; is &lt;code&gt;0&lt;/code&gt; in the child, the new child&amp;rsquo;s process id in the parent, and &lt;em&gt;fd&lt;/em&gt; is the file descriptor of the master end of the pseudo-terminal. For a more portable approach, use the &lt;a href=&quot;pty#module-pty&quot;&gt;&lt;code&gt;pty&lt;/code&gt;&lt;/a&gt; module. If an error occurs &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">새로운 의사 터미널을 자식의 제어 터미널로 사용하여 자식 프로세스를 포크하십시오. &lt;code&gt;(pid, fd)&lt;/code&gt; 쌍을 리턴하십시오 . 여기서 &lt;em&gt;pid&lt;/em&gt; 는 자식에서 &lt;code&gt;0&lt;/code&gt; 이고 부모의 새 자식 프로세스 ID이며 &lt;em&gt;fd&lt;/em&gt; 는 의사 터미널의 마스터 엔드의 파일 디스크립터입니다. 보다 편리한 접근 방식을 위해서는 &lt;a href=&quot;pty#module-pty&quot;&gt; &lt;code&gt;pty&lt;/code&gt; &lt;/a&gt; 모듈을 사용하십시오 . 오류가 발생하면 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e0d97d3344fdceb7bc86849ce6036b4be1a30227" translate="yes" xml:space="preserve">
          <source>Fork a child process. Return &lt;code&gt;0&lt;/code&gt; in the child and the child&amp;rsquo;s process id in the parent. If an error occurs &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">자식 프로세스를 포크하십시오. 자식에는 &lt;code&gt;0&lt;/code&gt; 을, 부모에는 자식 프로세스 ID를 반환 합니다. 오류가 발생하면 &lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6c3f80da59ba5e11794147586cf0ae148cfe6834" translate="yes" xml:space="preserve">
          <source>Fork. Connect the child&amp;rsquo;s controlling terminal to a pseudo-terminal. Return value is &lt;code&gt;(pid, fd)&lt;/code&gt;. Note that the child gets &lt;em&gt;pid&lt;/em&gt; 0, and the &lt;em&gt;fd&lt;/em&gt; is &lt;em&gt;invalid&lt;/em&gt;. The parent&amp;rsquo;s return value is the &lt;em&gt;pid&lt;/em&gt; of the child, and &lt;em&gt;fd&lt;/em&gt; is a file descriptor connected to the child&amp;rsquo;s controlling terminal (and also to the child&amp;rsquo;s standard input and output).</source>
          <target state="translated">포크. 어린이의 제어 터미널을 의사 터미널에 연결하십시오. 반환 값은 &lt;code&gt;(pid, fd)&lt;/code&gt; 입니다. 자식은 &lt;em&gt;pid&lt;/em&gt; 0을 받고 &lt;em&gt;fd&lt;/em&gt; 는 &lt;em&gt;유효하지 않습니다&lt;/em&gt; . 부모의 반환 값은 자식 의 &lt;em&gt;pid&lt;/em&gt; 이고 &lt;em&gt;fd&lt;/em&gt; 는 자식의 제어 터미널 (및 자식의 표준 입력 및 출력)에 연결된 파일 설명자입니다.</target>
        </trans-unit>
        <trans-unit id="6e6d282a9a8ae97493898a42e4495ac86a104597" translate="yes" xml:space="preserve">
          <source>Forking and threading versions of each type of server can be created using these mix-in classes. For instance, &lt;a href=&quot;#socketserver.ThreadingUDPServer&quot;&gt;&lt;code&gt;ThreadingUDPServer&lt;/code&gt;&lt;/a&gt; is created as follows:</source>
          <target state="translated">이러한 혼합 클래스를 사용하여 각 서버 유형의 포크 및 스레딩 버전을 작성할 수 있습니다. 예를 들어 &lt;a href=&quot;#socketserver.ThreadingUDPServer&quot;&gt; &lt;code&gt;ThreadingUDPServer&lt;/code&gt; &lt;/a&gt; 는 다음과 같이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="6232d936da3d991295fc973ffc88f6d3ca50c6ac" translate="yes" xml:space="preserve">
          <source>Form Feed</source>
          <target state="translated">용지 공급</target>
        </trans-unit>
        <trans-unit id="a8d1615368c5065046bab0898a96fbe6dca3de1c" translate="yes" xml:space="preserve">
          <source>Form Geometry Manager</source>
          <target state="translated">양식 형상 관리자</target>
        </trans-unit>
        <trans-unit id="55550d89e7ca43740394fa9c2e706f8405aa15d0" translate="yes" xml:space="preserve">
          <source>Form feed</source>
          <target state="translated">용지 공급</target>
        </trans-unit>
        <trans-unit id="bb19b54a8d464023b04f51da8fb6284d19d9c645" translate="yes" xml:space="preserve">
          <source>Formally, the Python zip application format is therefore:</source>
          <target state="translated">따라서 공식적으로 Python zip 애플리케이션 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="0b7058a284208f0fb334e10da7ad7849788c227c" translate="yes" xml:space="preserve">
          <source>Format Characters</source>
          <target state="translated">형식 문자</target>
        </trans-unit>
        <trans-unit id="270eba9fa5ca72ba811b960e20a70b4f961e511a" translate="yes" xml:space="preserve">
          <source>Format Paragraph</source>
          <target state="translated">형식 단락</target>
        </trans-unit>
        <trans-unit id="cdfbc79810d02d00dae00668258cb47d02812341" translate="yes" xml:space="preserve">
          <source>Format Specification Mini-Language</source>
          <target state="translated">형식 사양 미니 언어</target>
        </trans-unit>
        <trans-unit id="e0e31adb6cc861ffe4700cf93625baf412604bf7" translate="yes" xml:space="preserve">
          <source>Format String Syntax</source>
          <target state="translated">형식 문자열 구문</target>
        </trans-unit>
        <trans-unit id="f82f3ba2d1f13d26a5fb68ab9ee065f776ab30d9" translate="yes" xml:space="preserve">
          <source>Format Strings</source>
          <target state="translated">형식 문자열</target>
        </trans-unit>
        <trans-unit id="edf2592d9cfc0320ac33dfd0ca3fb8b951ab5d54" translate="yes" xml:space="preserve">
          <source>Format a form in HTML.</source>
          <target state="translated">HTML 형식으로 서식을 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="fb1728865c9987d6065233b0aabfe29331bc6f32" translate="yes" xml:space="preserve">
          <source>Format a pretty argument spec from the four values returned by &lt;a href=&quot;#inspect.getargvalues&quot;&gt;&lt;code&gt;getargvalues()&lt;/code&gt;&lt;/a&gt;. The format* arguments are the corresponding optional formatting functions that are called to turn names and values into strings.</source>
          <target state="translated">&lt;a href=&quot;#inspect.getargvalues&quot;&gt; &lt;code&gt;getargvalues()&lt;/code&gt; &lt;/a&gt; 반환 한 4 개의 값에서 예쁜 인수 스펙을 형식화하십시오 . format * 인수는 이름과 값을 문자열로 변환하기 위해 호출되는 해당 선택적 형식 지정 함수입니다.</target>
        </trans-unit>
        <trans-unit id="89d6eedb8bb9193b1b9778a5ab136660fa0cf4cd" translate="yes" xml:space="preserve">
          <source>Format a pretty argument spec from the values returned by &lt;a href=&quot;#inspect.getfullargspec&quot;&gt;&lt;code&gt;getfullargspec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#inspect.getfullargspec&quot;&gt; &lt;code&gt;getfullargspec()&lt;/code&gt; &lt;/a&gt; 반환 한 값에서 예쁜 인수 사양을 포맷합니다 .</target>
        </trans-unit>
        <trans-unit id="6684becb04a53e35be19fdc4a2836b5c2f0ba283" translate="yes" xml:space="preserve">
          <source>Format a stack trace and the exception information. The arguments have the same meaning as the corresponding arguments to &lt;a href=&quot;#traceback.print_exception&quot;&gt;&lt;code&gt;print_exception()&lt;/code&gt;&lt;/a&gt;. The return value is a list of strings, each ending in a newline and some containing internal newlines. When these lines are concatenated and printed, exactly the same text is printed as does &lt;a href=&quot;#traceback.print_exception&quot;&gt;&lt;code&gt;print_exception()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">스택 추적 및 예외 정보를 형식화하십시오. 인수는 &lt;a href=&quot;#traceback.print_exception&quot;&gt; &lt;code&gt;print_exception()&lt;/code&gt; &lt;/a&gt; 해당하는 인수와 동일한 의미를 갖습니다 . 반환 값은 각각 줄 바꿈으로 끝나고 일부는 내부 줄 바꿈으로 끝나는 문자열 목록입니다. 이 행들이 연결되어 인쇄 될 때 &lt;a href=&quot;#traceback.print_exception&quot;&gt; &lt;code&gt;print_exception()&lt;/code&gt; &lt;/a&gt; 과 정확히 동일한 텍스트가 인쇄됩니다 .</target>
        </trans-unit>
        <trans-unit id="efb013790256b8ef5e9b3a1315d0eba0e7855b24" translate="yes" xml:space="preserve">
          <source>Format a warning the standard way. This returns a string which may contain embedded newlines and ends in a newline. &lt;em&gt;line&lt;/em&gt; is a line of source code to be included in the warning message; if &lt;em&gt;line&lt;/em&gt; is not supplied, &lt;a href=&quot;#warnings.formatwarning&quot;&gt;&lt;code&gt;formatwarning()&lt;/code&gt;&lt;/a&gt; will try to read the line specified by &lt;em&gt;filename&lt;/em&gt; and &lt;em&gt;lineno&lt;/em&gt;.</source>
          <target state="translated">표준 방식으로 경고의 형식을 지정하십시오. 임베드 된 개행 문자를 포함하고 개행 문자로 끝나는 문자열을 리턴합니다. &lt;em&gt;line&lt;/em&gt; 은 경고 메시지에 포함될 소스 코드 라인입니다. 경우 &lt;em&gt;라인이&lt;/em&gt; 제공되지 않으면 &lt;a href=&quot;#warnings.formatwarning&quot;&gt; &lt;code&gt;formatwarning()&lt;/code&gt; &lt;/a&gt; 로 지정된 행 읽으려고합니다 &lt;em&gt;파일 이름&lt;/em&gt; 및 &lt;em&gt;LINENO를&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="27f07db4717ed9daeb0ea1cfa7002355a47df647" translate="yes" xml:space="preserve">
          <source>Format characters have the following meaning; the conversion between C and Python values should be obvious given their types. The &amp;lsquo;Standard size&amp;rsquo; column refers to the size of the packed value in bytes when using standard size; that is, when the format string starts with one of &lt;code&gt;'&amp;lt;'&lt;/code&gt;, &lt;code&gt;'&amp;gt;'&lt;/code&gt;, &lt;code&gt;'!'&lt;/code&gt; or &lt;code&gt;'='&lt;/code&gt;. When using native size, the size of the packed value is platform-dependent.</source>
          <target state="translated">형식 문자는 다음과 같은 의미를 갖습니다. C와 Python 값 사이의 변환은 유형이 주어지면 분명해야합니다. '표준 크기'열은 표준 크기를 사용할 때 압축 된 값의 크기 (바이트)를 나타냅니다. 즉, 형식 문자열이 &lt;code&gt;'&amp;lt;'&lt;/code&gt; , &lt;code&gt;'&amp;gt;'&lt;/code&gt; , &lt;code&gt;'!'&lt;/code&gt; 중 하나로 시작하는 경우 또는 &lt;code&gt;'='&lt;/code&gt; . 기본 크기를 사용할 때 압축 된 값의 크기는 플랫폼에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="a82c3163ea3ab9e53fb2cea07cd209bfb937d3de" translate="yes" xml:space="preserve">
          <source>Format examples</source>
          <target state="translated">형식 예</target>
        </trans-unit>
        <trans-unit id="1ac9d89f980b709d2eee4c28343a724ae6f0be53" translate="yes" xml:space="preserve">
          <source>Format menu (Editor window only)</source>
          <target state="translated">형식 메뉴 (편집기 창만 해당)</target>
        </trans-unit>
        <trans-unit id="5bff82abd36d7764c58ff2df3512a31d36fa2e37" translate="yes" xml:space="preserve">
          <source>Format of Version 5 Babyl Files</source>
          <target state="translated">버전 5 Babyl 파일의 형식</target>
        </trans-unit>
        <trans-unit id="1f49759e2e13c3e9c99136a9ebb248df955d8330" translate="yes" xml:space="preserve">
          <source>Format strings are the mechanism used to specify the expected layout when packing and unpacking data. They are built up from &lt;a href=&quot;#format-characters&quot;&gt;Format Characters&lt;/a&gt;, which specify the type of data being packed/unpacked. In addition, there are special characters for controlling the &lt;a href=&quot;#struct-alignment&quot;&gt;Byte Order, Size, and Alignment&lt;/a&gt;.</source>
          <target state="translated">형식 문자열은 데이터를 압축 및 압축 해제 할 때 예상되는 레이아웃을 지정하는 데 사용되는 메커니즘입니다. 이들은 포장 / 포장 해제 할 데이터 유형을 지정하는 &lt;a href=&quot;#format-characters&quot;&gt;형식 문자&lt;/a&gt; 로 구성됩니다. 또한 &lt;a href=&quot;#struct-alignment&quot;&gt;바이트 순서, 크기 및 정렬&lt;/a&gt; 을 제어하기위한 특수 문자가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="977d2603bbd7ce88ed46464ff7b8c4d0bd0777d9" translate="yes" xml:space="preserve">
          <source>Format strings contain &amp;ldquo;replacement fields&amp;rdquo; surrounded by curly braces &lt;code&gt;{}&lt;/code&gt;. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt;.</source>
          <target state="translated">형식 문자열에는 중괄호 &lt;code&gt;{}&lt;/code&gt; 로 둘러싸인&amp;ldquo;대체 필드&amp;rdquo;가 포함 됩니다. 중괄호에 포함되지 않은 것은 리터럴 텍스트로 간주되며 변경되지 않은 채 출력으로 복사됩니다. 리터럴 텍스트에 중괄호 문자를 포함해야하는 경우 &lt;code&gt;{{&lt;/code&gt; and &lt;code&gt;}}&lt;/code&gt; 를 두 배로 늘려서 이스케이프 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="ada86ab71a0296a81d385ffe9ebda7450e9141f1" translate="yes" xml:space="preserve">
          <source>Format the current directory in HTML.</source>
          <target state="translated">현재 디렉토리를 HTML로 포맷하십시오.</target>
        </trans-unit>
        <trans-unit id="6887032ead2866abfbc852a1baf00f3a87abe4e3" translate="yes" xml:space="preserve">
          <source>Format the exception part of a traceback. The arguments are the exception type and value such as given by &lt;code&gt;sys.last_type&lt;/code&gt; and &lt;code&gt;sys.last_value&lt;/code&gt;. The return value is a list of strings, each ending in a newline. Normally, the list contains a single string; however, for &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; exceptions, it contains several lines that (when printed) display detailed information about where the syntax error occurred. The message indicating which exception occurred is the always last string in the list.</source>
          <target state="translated">역 추적의 예외 부분을 형식화하십시오. 인수는 &lt;code&gt;sys.last_type&lt;/code&gt; 및 &lt;code&gt;sys.last_value&lt;/code&gt; 에서 제공 한 예외 유형 및 값 입니다. 반환 값은 각각 줄 바꿈으로 끝나는 문자열 목록입니다. 일반적으로 목록에는 단일 문자열이 포함됩니다. 그러나 &lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt; 예외의 경우, 구문 오류가 발생한 위치에 대한 자세한 정보를 표시하는 몇 줄이 인쇄됩니다. 발생한 예외를 나타내는 메시지는 목록에서 항상 마지막 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="a52a79ddad57812b440010d5464618dca805c815" translate="yes" xml:space="preserve">
          <source>Format the exception part of the traceback.</source>
          <target state="translated">역 추적의 예외 부분을 형식화하십시오.</target>
        </trans-unit>
        <trans-unit id="133a6862d1cae1284919a2f001c0aeacdd72c000" translate="yes" xml:space="preserve">
          <source>Format the exception.</source>
          <target state="translated">예외를 형식화하십시오.</target>
        </trans-unit>
        <trans-unit id="42596a2d24fc2c73e65e7068f53abc165c76e75c" translate="yes" xml:space="preserve">
          <source>Format the shell environment in HTML.</source>
          <target state="translated">쉘 환경을 HTML로 포맷하십시오.</target>
        </trans-unit>
        <trans-unit id="908af1ba6a5e39aff8925f6fe6975073286cfd06" translate="yes" xml:space="preserve">
          <source>Format the traceback as a list of lines with newlines. Use the &lt;a href=&quot;linecache#module-linecache&quot;&gt;&lt;code&gt;linecache&lt;/code&gt;&lt;/a&gt; module to retrieve lines from the source code. If &lt;em&gt;limit&lt;/em&gt; is set, format the &lt;em&gt;limit&lt;/em&gt; most recent frames if &lt;em&gt;limit&lt;/em&gt; is positive. Otherwise, format the &lt;code&gt;abs(limit)&lt;/code&gt; oldest frames. If &lt;em&gt;most_recent_first&lt;/em&gt; is &lt;code&gt;True&lt;/code&gt;, the order of the formatted frames is reversed, returning the most recent frame first instead of last.</source>
          <target state="translated">줄 바꿈이있는 행 목록으로 역 추적을 형식화하십시오. &lt;a href=&quot;linecache#module-linecache&quot;&gt; &lt;code&gt;linecache&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 소스 코드에서 라인을 검색 하십시오 . 경우에 &lt;em&gt;제한이&lt;/em&gt; 설정되어 포맷 &lt;em&gt;제한을&lt;/em&gt; 경우 가장 최근의 프레임을 &lt;em&gt;제한&lt;/em&gt; 긍정적이다. 그렇지 않으면 &lt;code&gt;abs(limit)&lt;/code&gt; 가장 오래된 프레임을 포맷하십시오 . 경우 &lt;em&gt;most_recent_first가&lt;/em&gt; 있다 &lt;code&gt;True&lt;/code&gt; , 포맷 된 프레임의 순서는 먼저 대신 마지막으로 가장 최근의 프레임을 반환, 반전됩니다.</target>
        </trans-unit>
        <trans-unit id="e94ffc42a625185c4ee1b07594bd1b3720789d8e" translate="yes" xml:space="preserve">
          <source>Formats a floating point number using the same format as the built-in function &lt;code&gt;str(float)&lt;/code&gt;, but takes the decimal point into account.</source>
          <target state="translated">내장 함수 &lt;code&gt;str(float)&lt;/code&gt; 와 동일한 형식을 사용하여 부동 소수점 숫자를 형식화 하지만 소수점을 고려합니다.</target>
        </trans-unit>
        <trans-unit id="026a04261cdb2c80deece60787b101a3f57e7a0b" translate="yes" xml:space="preserve">
          <source>Formats a number &lt;em&gt;val&lt;/em&gt; according to the current &lt;a href=&quot;#locale.LC_MONETARY&quot;&gt;&lt;code&gt;LC_MONETARY&lt;/code&gt;&lt;/a&gt; settings.</source>
          <target state="translated">현재 &lt;a href=&quot;#locale.LC_MONETARY&quot;&gt; &lt;code&gt;LC_MONETARY&lt;/code&gt; &lt;/a&gt; 설정 에 따라 숫자 &lt;em&gt;값&lt;/em&gt; 을 형식화 합니다.</target>
        </trans-unit>
        <trans-unit id="eacb6e288f5f9db17404ead37a2ec0529507d79d" translate="yes" xml:space="preserve">
          <source>Formats a number &lt;em&gt;val&lt;/em&gt; according to the current &lt;a href=&quot;#locale.LC_NUMERIC&quot;&gt;&lt;code&gt;LC_NUMERIC&lt;/code&gt;&lt;/a&gt; setting. The format follows the conventions of the &lt;code&gt;%&lt;/code&gt; operator. For floating point values, the decimal point is modified if appropriate. If &lt;em&gt;grouping&lt;/em&gt; is true, also takes the grouping into account.</source>
          <target state="translated">현재 &lt;a href=&quot;#locale.LC_NUMERIC&quot;&gt; &lt;code&gt;LC_NUMERIC&lt;/code&gt; &lt;/a&gt; 설정 에 따라 숫자 &lt;em&gt;값&lt;/em&gt; 을 형식화 합니다. 형식은 &lt;code&gt;%&lt;/code&gt; 연산자 의 규칙을 따릅니다 . 부동 소수점 값의 경우 적절한 경우 소수점이 수정됩니다. &lt;em&gt;그룹화&lt;/em&gt; 가 참 이면 &lt;em&gt;그룹화&lt;/em&gt; 도 고려합니다.</target>
        </trans-unit>
        <trans-unit id="e0112f00a08e9d79ead751aada10a7ecf020a0c9" translate="yes" xml:space="preserve">
          <source>Formats the record and sends it to the specified addressees.</source>
          <target state="translated">레코드를 포맷하고 지정된 수신자에게 보냅니다.</target>
        </trans-unit>
        <trans-unit id="e3d51e4f2fd3c854b2bc53b4f04b934fba801ca8" translate="yes" xml:space="preserve">
          <source>Formats the specified exception information (a standard exception tuple as returned by &lt;a href=&quot;sys#sys.exc_info&quot;&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt;&lt;/a&gt;) as a string. This default implementation just uses &lt;a href=&quot;traceback#traceback.print_exception&quot;&gt;&lt;code&gt;traceback.print_exception()&lt;/code&gt;&lt;/a&gt;. The resulting string is returned.</source>
          <target state="translated">지정된 예외 정보 ( &lt;a href=&quot;sys#sys.exc_info&quot;&gt; &lt;code&gt;sys.exc_info()&lt;/code&gt; &lt;/a&gt; 반환 한 표준 예외 튜플 )를 문자열로 형식화 합니다. 이 기본 구현은 &lt;a href=&quot;traceback#traceback.print_exception&quot;&gt; &lt;code&gt;traceback.print_exception()&lt;/code&gt; &lt;/a&gt; 만 사용합니다 . 결과 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="478091ac3ec3684574c3babf6b432088610f3d97" translate="yes" xml:space="preserve">
          <source>Formats the specified stack information (a string as returned by &lt;a href=&quot;traceback#traceback.print_stack&quot;&gt;&lt;code&gt;traceback.print_stack()&lt;/code&gt;&lt;/a&gt;, but with the last newline removed) as a string. This default implementation just returns the input value.</source>
          <target state="translated">지정된 스택 정보 ( &lt;a href=&quot;traceback#traceback.print_stack&quot;&gt; &lt;code&gt;traceback.print_stack()&lt;/code&gt; &lt;/a&gt; 에서 반환 한 문자열 이지만 마지막 줄 바꿈이 제거 된 문자열)를 문자열로 형식화합니다. 이 기본 구현은 입력 값만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5c7560c39c5c5ff187fc628a573d6335f1647305" translate="yes" xml:space="preserve">
          <source>Formatter Objects</source>
          <target state="translated">포맷터 객체</target>
        </trans-unit>
        <trans-unit id="fbbd31613f1e2dcbd79221469710d04b5144430c" translate="yes" xml:space="preserve">
          <source>Formatters specify the layout of log records in the final output.</source>
          <target state="translated">포맷터는 최종 출력에서 ​​로그 레코드의 레이아웃을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="b447427aa08f3dda2bd0b3397dc8f0988f032e14" translate="yes" xml:space="preserve">
          <source>Formatting is performed using &lt;code&gt;PyObject_Format()&lt;/code&gt;. The result is pushed on the stack.</source>
          <target state="translated">&lt;code&gt;PyObject_Format()&lt;/code&gt; 사용하여 형식화가 수행됩니다 . 결과는 스택에 푸시됩니다.</target>
        </trans-unit>
        <trans-unit id="fbf057be17177f97ad4833a585c800edbe99787a" translate="yes" xml:space="preserve">
          <source>Formatting methods for specific types are implemented as methods with a name based on the type name. In the method name, &lt;strong&gt;TYPE&lt;/strong&gt; is replaced by &lt;code&gt;'_'.join(type(obj).__name__.split())&lt;/code&gt;. Dispatch to these methods is handled by &lt;a href=&quot;#reprlib.Repr.repr1&quot;&gt;&lt;code&gt;repr1()&lt;/code&gt;&lt;/a&gt;. Type-specific methods which need to recursively format a value should call &lt;code&gt;self.repr1(subobj, level - 1)&lt;/code&gt;.</source>
          <target state="translated">특정 형식의 형식 지정 방법은 형식 이름을 기반으로 이름이있는 메서드로 구현됩니다. 메소드 이름에서 &lt;strong&gt;TYPE&lt;/strong&gt; 은 &lt;code&gt;'_'.join(type(obj).__name__.split())&lt;/code&gt; 로 대체됩니다 . 이 메소드에 대한 디스패치는 &lt;a href=&quot;#reprlib.Repr.repr1&quot;&gt; &lt;code&gt;repr1()&lt;/code&gt; &lt;/a&gt; 의해 처리됩니다 . 값을 재귀 적으로 형식화해야하는 유형별 메소드는 &lt;code&gt;self.repr1(subobj, level - 1)&lt;/code&gt; 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="53ee3b12a8116f5062f23c10d0f0f41886e86fc4" translate="yes" xml:space="preserve">
          <source>Fortunately, once you have managed to get your script to execute &lt;em&gt;some&lt;/em&gt; code, you can easily send tracebacks to the Web browser using the &lt;a href=&quot;cgitb#module-cgitb&quot;&gt;&lt;code&gt;cgitb&lt;/code&gt;&lt;/a&gt; module. If you haven&amp;rsquo;t done so already, just add the lines:</source>
          <target state="translated">다행스럽게도 스크립트에서 &lt;em&gt;일부&lt;/em&gt; 코드 를 실행하도록 관리 한 후에는 &lt;a href=&quot;cgitb#module-cgitb&quot;&gt; &lt;code&gt;cgitb&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 웹 브라우저에 쉽게 추적을 보낼 수 있습니다 . 아직 수행하지 않은 경우 다음 행을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="5e96e7529d107df0e1753fe21bd01b67d79778d3" translate="yes" xml:space="preserve">
          <source>Forwarded</source>
          <target state="translated">Forwarded</target>
        </trans-unit>
        <trans-unit id="f20aa79556158af01d19fe1bdfaaba61f2eba597" translate="yes" xml:space="preserve">
          <source>Forwarded, resent, or bounced</source>
          <target state="translated">전달, 재전송 또는 반송</target>
        </trans-unit>
        <trans-unit id="204adbe299b86a188ab068c84642d64fb57b9d04" translate="yes" xml:space="preserve">
          <source>Four input formats are allowed:</source>
          <target state="translated">네 가지 입력 형식이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="95a1f04add15be7ebf45b9a37b275d6fe1eeba76" translate="yes" xml:space="preserve">
          <source>Fragment identifier</source>
          <target state="translated">조각 식별자</target>
        </trans-unit>
        <trans-unit id="91b0658329efa06d4da89c23a162b41dfcee5202" translate="yes" xml:space="preserve">
          <source>Frame</source>
          <target state="translated">Frame</target>
        </trans-unit>
        <trans-unit id="2c1869f6cb698c92bcc04970dc1fb69c51e4202e" translate="yes" xml:space="preserve">
          <source>Frame of a traceback.</source>
          <target state="translated">역 추적 프레임.</target>
        </trans-unit>
        <trans-unit id="ae12c8f249c1108618862d4a780aa0e958c8d187" translate="yes" xml:space="preserve">
          <source>FrameSummary Objects</source>
          <target state="translated">FrameSummary 객체</target>
        </trans-unit>
        <trans-unit id="af39dd055c3ef8226fbe929d048cafb094dc8a51" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">Frameworks</target>
        </trans-unit>
        <trans-unit id="77cece0affae2ecaefc39ef0c2a8e23ee328ebc0" translate="yes" xml:space="preserve">
          <source>Frameworks expecting callback functions of specific signatures might be type hinted using &lt;code&gt;Callable[[Arg1Type, Arg2Type], ReturnType]&lt;/code&gt;.</source>
          <target state="translated">특정 서명의 콜백 함수를 예상하는 프레임 워크는 &lt;code&gt;Callable[[Arg1Type, Arg2Type], ReturnType]&lt;/code&gt; 사용하여 유형 힌트를 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d751d8aea744f19dc0702494fa4a87cea4624802" translate="yes" xml:space="preserve">
          <source>Fran&amp;ccedil;ois Pinard</source>
          <target state="translated">프랑수아 피 나르</target>
        </trans-unit>
        <trans-unit id="676e349fb10a9ac7e26e69e9ff9f61aa2b453ac6" translate="yes" xml:space="preserve">
          <source>Fredrik Lundh elaborated and revised the class interface descriptions, to get them current with Tk 4.2.</source>
          <target state="translated">Fredrik Lundh는 클래스 인터페이스 설명을 정교하게 수정하여 Tk 4.2로 최신 정보를 얻었습니다.</target>
        </trans-unit>
        <trans-unit id="f7a46b2d862652fa6dd4ca177b3c94b34e0551df" translate="yes" xml:space="preserve">
          <source>Fredrik Lundh&amp;rsquo;s &amp;ldquo;unofficial errata, intended to clarify certain details in the XML-RPC specification, as well as hint at &amp;lsquo;best practices&amp;rsquo; to use when designing your own XML-RPC implementations.&amp;rdquo;</source>
          <target state="translated">Fredrik Lundh의&amp;ldquo;비공식 정오표는 XML-RPC 사양의 특정 세부 사항을 명확하게 설명하고 자신의 XML-RPC 구현을 설계 할 때 사용할 모범 사례에 대한 힌트를 제공합니다.&amp;rdquo;</target>
        </trans-unit>
        <trans-unit id="7941894bbf9320910711bb27aa31db4822f37203" translate="yes" xml:space="preserve">
          <source>Freeze all the objects tracked by gc - move them to a permanent generation and ignore all the future collections. This can be used before a POSIX fork() call to make the gc copy-on-write friendly or to speed up collection. Also collection before a POSIX fork() call may free pages for future allocation which can cause copy-on-write too so it&amp;rsquo;s advised to disable gc in parent process and freeze before fork and enable gc in child process.</source>
          <target state="translated">gc로 추적 한 모든 객체를 고정합니다. 영구적으로 이동하고 향후 모든 컬렉션을 무시합니다. POSIX fork () 호출 전에 gc copy-on-write를 작성하거나 수집 속도를 높이기 위해 사용할 수 있습니다. 또한 POSIX fork () 호출 이전의 콜렉션은 나중에 할당하기 위해 페이지를 비울 수 있으므로 쓰기 중 복사도 발생할 수 있으므로 부모 프로세스에서 gc를 비활성화하고 포크 전에 동결하고 자식 프로세스에서 gc를 활성화하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5f9f6dd59fd9d87ed4234e22a85d44c72d20b660" translate="yes" xml:space="preserve">
          <source>Frequently Asked Questions About Fetchmail</source>
          <target state="translated">Fetchmail에 대한 질문과 대답</target>
        </trans-unit>
        <trans-unit id="931016677a60f24d5b6710c6675421493cdd480f" translate="yes" xml:space="preserve">
          <source>Frequently Used Arguments</source>
          <target state="translated">자주 사용되는 인수</target>
        </trans-unit>
        <trans-unit id="c8315ccb47f6bf0d7a511f023cc6a139ae985bb3" translate="yes" xml:space="preserve">
          <source>Friedl, Jeffrey. Mastering Regular Expressions. 3rd ed., O&amp;rsquo;Reilly Media, 2009. The third edition of the book no longer covers Python at all, but the first edition covered writing good regular expression patterns in great detail.</source>
          <target state="translated">프리들, 제프리 정규 표현식 마스터하기. 3 판, O'Reilly Media, 2009.이 책의 제 3 판은 더 이상 파이썬을 다루지 않지만, 제 1 판은 좋은 정규 표현 패턴을 매우 자세하게 작성하는 것을 다루었습니다.</target>
        </trans-unit>
        <trans-unit id="3f66052a107eaf9bae7cad0f61fb462f47ec2c47" translate="yes" xml:space="preserve">
          <source>From</source>
          <target state="translated">From</target>
        </trans-unit>
        <trans-unit id="843e5f9670f08c69a59833608d59b51cae8ce9fc" translate="yes" xml:space="preserve">
          <source>From Python 2.5 onward, it&amp;rsquo;s much more convenient to cut in at the Abstract Syntax Tree (AST) generation and compilation stage, using the &lt;a href=&quot;ast#module-ast&quot;&gt;&lt;code&gt;ast&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">Python 2.5부터는 &lt;a href=&quot;ast#module-ast&quot;&gt; &lt;code&gt;ast&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 AST (Abstract Syntax Tree) 생성 및 컴파일 단계에서 잘라내는 것이 훨씬 편리 합니다.</target>
        </trans-unit>
        <trans-unit id="020414031327a3ef7db22111fd1b439df6d9523d" translate="yes" xml:space="preserve">
          <source>From Python 3.2 onwards, a &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; instance can also be constructed directly from a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Python 3.2부터 &lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt; 인스턴스는 &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; 에서 직접 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8f429dea18858dc76e2dafe218fb1bd41640f703" translate="yes" xml:space="preserve">
          <source>From Python 3.2 onwards, you can also construct a &lt;a href=&quot;#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt; instance directly from a &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;decimal.Decimal&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">Python 3.2부터는 &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;decimal.Decimal&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 직접 &lt;a href=&quot;#fractions.Fraction&quot;&gt; &lt;code&gt;Fraction&lt;/code&gt; &lt;/a&gt; 인스턴스를 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a9212b07590ed38d2383035c9834db7561be821" translate="yes" xml:space="preserve">
          <source>From Python 3.2 onwards, you can also construct a &lt;a href=&quot;#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt; instance directly from a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Python 3.2부터는 &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; 에서 직접 &lt;a href=&quot;#fractions.Fraction&quot;&gt; &lt;code&gt;Fraction&lt;/code&gt; &lt;/a&gt; 인스턴스를 구성 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c4eb3439bf7316847977346c0d104584a3402e3c" translate="yes" xml:space="preserve">
          <source>From an iterable of integers: &lt;code&gt;bytearray(range(20))&lt;/code&gt;</source>
          <target state="translated">반복 가능한 정수에서 : &lt;code&gt;bytearray(range(20))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5d65ee2397bd4b1147e1b46eacb2bf3de76b34db" translate="yes" xml:space="preserve">
          <source>From an iterable of integers: &lt;code&gt;bytes(range(20))&lt;/code&gt;</source>
          <target state="translated">반복 가능한 정수에서 : &lt;code&gt;bytes(range(20))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce6f98bc32d8c08752e339ab6b8ff93f135e878c" translate="yes" xml:space="preserve">
          <source>From file itself</source>
          <target state="translated">파일 자체에서</target>
        </trans-unit>
        <trans-unit id="5948b3c8804d9acb15720ae7c2746d371d0a6dd0" translate="yes" xml:space="preserve">
          <source>From the application view, this means that any header obtained through the &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; is a header object with extra attributes, whose string value is the fully decoded unicode value of the header. Likewise, a header may be assigned a new value, or a new header created, using a unicode string, and the policy will take care of converting the unicode string into the correct RFC encoded form.</source>
          <target state="translated">응용 프로그램보기에서 이는 &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt; 를 통해 얻은 모든 헤더 가 추가 속성이있는 헤더 객체이며 문자열 값은 헤더의 완전히 디코딩 된 유니 코드 값입니다. 마찬가지로, 유니 코드 문자열을 사용하여 헤더에 새 값 또는 새 헤더를 할당 할 수 있으며, 정책은 유니 코드 문자열을 올바른 RFC 인코딩 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="21179744e0644e6bf06e66ec0ad650d68bce7278" translate="yes" xml:space="preserve">
          <source>From the perspective of this ABC, a &lt;em&gt;resource&lt;/em&gt; is a binary artifact that is shipped within a package. Typically this is something like a data file that lives next to the &lt;code&gt;__init__.py&lt;/code&gt; file of the package. The purpose of this class is to help abstract out the accessing of such data files so that it does not matter if the package and its data file(s) are stored in a e.g. zip file versus on the file system.</source>
          <target state="translated">이 ABC의 관점에서 &lt;em&gt;자원&lt;/em&gt; 은 패키지 내에 제공되는 이진 아티팩트입니다. 일반적으로 이것은 패키지 의 &lt;code&gt;__init__.py&lt;/code&gt; 파일 옆에있는 데이터 파일과 같습니다 . 이 클래스의 목적은 패키지 및 해당 데이터 파일이 zip 파일과 파일 시스템에 저장되어 있는지 여부와 상관없이 이러한 데이터 파일에 대한 액세스를 추상화하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="c3d589e23cb112ec1a392aed611bb2ec8fdbc0b4" translate="yes" xml:space="preserve">
          <source>From the top down:</source>
          <target state="translated">위에서 아래로 :</target>
        </trans-unit>
        <trans-unit id="4e50569cef50379ee448e1f2b049fa0157a0bc2d" translate="yes" xml:space="preserve">
          <source>Frozen instances</source>
          <target state="translated">고정 된 인스턴스</target>
        </trans-unit>
        <trans-unit id="d25dcf5f0613027176cc69f800b0a4c3bde6be0d" translate="yes" xml:space="preserve">
          <source>Full details of the class creation process supported by these functions</source>
          <target state="translated">이 기능들이 지원하는 클래스 생성 과정에 대한 자세한 내용</target>
        </trans-unit>
        <trans-unit id="657da8017607a10cc9f2aa3b39c739a2321091a5" translate="yes" xml:space="preserve">
          <source>Full documentation</source>
          <target state="translated">전체 문서</target>
        </trans-unit>
        <trans-unit id="d13f42e2080d339be6d0c5783d644631e98b32e6" translate="yes" xml:space="preserve">
          <source>Full pathname of the source file where the logging call was issued (if available).</source>
          <target state="translated">로깅 호출이 발행 된 소스 파일의 전체 경로 이름 (사용 가능한 경우).</target>
        </trans-unit>
        <trans-unit id="f1e410ad1472b42cb42cc98962428637290b6706" translate="yes" xml:space="preserve">
          <source>Function</source>
          <target state="translated">Function</target>
        </trans-unit>
        <trans-unit id="5afa679cb93c0bd650f0afd89a95239d9f992f6b" translate="yes" xml:space="preserve">
          <source>Function &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt; can parse 2-digit years when given &lt;code&gt;%y&lt;/code&gt; format code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69&amp;ndash;99 are mapped to 1969&amp;ndash;1999, and values 0&amp;ndash;68 are mapped to 2000&amp;ndash;2068.</source>
          <target state="translated">&lt;a href=&quot;#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt; 함수 는 &lt;code&gt;%y&lt;/code&gt; 형식 코드가 주어지면 2 자리 연도를 구문 분석 할 수 있습니다 . 2 자리 연도를 구문 분석 할 때 POSIX 및 ISO C 표준에 따라 변환됩니다. 값 69&amp;ndash;99는 1969&amp;ndash;1999에, 0-68 값은 2000&amp;ndash;2068에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="0ca544d7457648c14cce40272868cda27ebf4451" translate="yes" xml:space="preserve">
          <source>Function Objects</source>
          <target state="translated">함수 객체</target>
        </trans-unit>
        <trans-unit id="5eae8cd7bd95f099480ba2022791990eccd4f8bc" translate="yes" xml:space="preserve">
          <source>Function and class definitions</source>
          <target state="translated">Function and class definitions</target>
        </trans-unit>
        <trans-unit id="734d7223ffe438b863c3d4ed08f1962984a9515e" translate="yes" xml:space="preserve">
          <source>Function details</source>
          <target state="translated">기능 세부 사항</target>
        </trans-unit>
        <trans-unit id="bd1db34fa306e69fb02c3351244f932d38da00d3" translate="yes" xml:space="preserve">
          <source>Function keys. Up to 64 function keys are supported.</source>
          <target state="translated">기능 키. 최대 64 개의 기능 키가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="1775d6d229c09c127b9640c5b78d4c4c6d982d34" translate="yes" xml:space="preserve">
          <source>Function not implemented</source>
          <target state="translated">구현되지 않은 기능</target>
        </trans-unit>
        <trans-unit id="1ab2eabce4bce0325608c94002ed583542a65dba" translate="yes" xml:space="preserve">
          <source>Function objects are created by function definitions. The only operation on a function object is to call it: &lt;code&gt;func(argument-list)&lt;/code&gt;.</source>
          <target state="translated">함수 객체는 함수 정의에 의해 생성됩니다. 함수 객체에 대한 유일한 연산은 그것을 호출하는 것입니다 : &lt;code&gt;func(argument-list)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="44d21b2d2a609265eca39ae0493e9003be8fed96" translate="yes" xml:space="preserve">
          <source>Function prototypes</source>
          <target state="translated">함수 프로토 타입</target>
        </trans-unit>
        <trans-unit id="dee4cfd77aac5369a6e89ce97088e5be1bcd0c57" translate="yes" xml:space="preserve">
          <source>Function prototypes created by these factory functions can be instantiated in different ways, depending on the type and number of the parameters in the call:</source>
          <target state="translated">이러한 팩토리 함수로 작성된 함수 프로토 타입은 호출의 매개 변수 유형 및 수에 따라 다른 방식으로 인스턴스화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="364902d4170f1b19b4532663e7d91e3f1dc0864f" translate="yes" xml:space="preserve">
          <source>Function to be used to compare method names when sorting them in &lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt;&lt;code&gt;getTestCaseNames()&lt;/code&gt;&lt;/a&gt; and all the &lt;code&gt;loadTestsFrom*()&lt;/code&gt; methods.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestLoader.getTestCaseNames&quot;&gt; &lt;code&gt;getTestCaseNames()&lt;/code&gt; &lt;/a&gt; 및 모든 &lt;code&gt;loadTestsFrom*()&lt;/code&gt; 메소드 에서 메소드 이름을 정렬 할 때 메소드 이름을 비교하는 데 사용되는 함수 입니다.</target>
        </trans-unit>
        <trans-unit id="a052eea89f50224a7569eae8a87ea1a83e18f9d3" translate="yes" xml:space="preserve">
          <source>Functional API</source>
          <target state="translated">기능적 API</target>
        </trans-unit>
        <trans-unit id="d58bef8c404893294e965bc9372c8872c43f8fda" translate="yes" xml:space="preserve">
          <source>Functional Programming</source>
          <target state="translated">기능적 프로그래밍</target>
        </trans-unit>
        <trans-unit id="7f8a9380207393fc9db2b2b2593936320bf03503" translate="yes" xml:space="preserve">
          <source>Functional Programming Modules</source>
          <target state="translated">기능적 프로그래밍 모듈</target>
        </trans-unit>
        <trans-unit id="62daf931ffeccc7257bc3a492560ec903684c927" translate="yes" xml:space="preserve">
          <source>Functionality within this package requires that the &lt;code&gt;__main__&lt;/code&gt; module be importable by the children. This is covered in &lt;a href=&quot;#multiprocessing-programming&quot;&gt;Programming guidelines&lt;/a&gt; however it is worth pointing out here. This means that some examples, such as the &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt;&lt;code&gt;multiprocessing.pool.Pool&lt;/code&gt;&lt;/a&gt; examples will not work in the interactive interpreter. For example:</source>
          <target state="translated">이 패키지의 기능을 사용하려면 &lt;code&gt;__main__&lt;/code&gt; 모듈을 하위에서 가져올 수 있어야합니다 . 이것은 &lt;a href=&quot;#multiprocessing-programming&quot;&gt;프로그래밍 지침&lt;/a&gt; 에서 다루지 만 여기서 지적 할 가치가 있습니다. 이는 &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt; &lt;code&gt;multiprocessing.pool.Pool&lt;/code&gt; &lt;/a&gt; 예제 와 같은 일부 예제 가 대화식 인터프리터에서 작동하지 않음을 의미합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="13fe3097140d48f45796f13a773a611406bf8724" translate="yes" xml:space="preserve">
          <source>Functions and Exceptions</source>
          <target state="translated">기능과 예외</target>
        </trans-unit>
        <trans-unit id="4dde1747c55cbb65aed850307ffa6149bfedba82" translate="yes" xml:space="preserve">
          <source>Functions and classes provided:</source>
          <target state="translated">제공되는 기능 및 클래스 :</target>
        </trans-unit>
        <trans-unit id="4c5154b96e8613068a06f348c6569ab1cab8db99" translate="yes" xml:space="preserve">
          <source>Functions and decorators</source>
          <target state="translated">Functions and decorators</target>
        </trans-unit>
        <trans-unit id="20b1e6d5deb339e7436ae27526f0a0d790e768e8" translate="yes" xml:space="preserve">
          <source>Functions are accessed as attributes of dll objects:</source>
          <target state="translated">함수는 dll 객체의 속성으로 액세스됩니다.</target>
        </trans-unit>
        <trans-unit id="52c06380a35441f8692050a4f700a5296af35e7f" translate="yes" xml:space="preserve">
          <source>Functions for bytes</source>
          <target state="translated">Functions for bytes</target>
        </trans-unit>
        <trans-unit id="4dc9f4ae68f16fcbe0530e1139c1d5ccbd47a458" translate="yes" xml:space="preserve">
          <source>Functions for integers</source>
          <target state="translated">정수 함수</target>
        </trans-unit>
        <trans-unit id="5aeda873fe4d68e6f1f8db4aabf74a1ac2058809" translate="yes" xml:space="preserve">
          <source>Functions for sequences</source>
          <target state="translated">시퀀스 함수</target>
        </trans-unit>
        <trans-unit id="921bac2868750926523aa803476aa0880a75d1f2" translate="yes" xml:space="preserve">
          <source>Functions or methods being mocked will have their arguments checked to ensure that they are called with the correct signature.</source>
          <target state="translated">조롱되는 함수 또는 메소드는 올바른 서명으로 호출되도록 인수를 점검합니다.</target>
        </trans-unit>
        <trans-unit id="3e1ed89bdc06bad6024febc65146a33f87bcd499" translate="yes" xml:space="preserve">
          <source>Functions registered for execution before forking are called in reverse registration order. Functions registered for execution after forking (either in the parent or in the child) are called in registration order.</source>
          <target state="translated">포크 전에 실행을 위해 등록 된 기능은 역 등록 순서로 호출됩니다. 분기 후 (부모 또는 자식) 실행을 위해 등록 된 기능은 등록 순서로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="31b99da682255324534f87c3b41fa2d80eb3d3d0" translate="yes" xml:space="preserve">
          <source>Functions that convert doctests to Python code, and possibly run the synthesized code under the debugger:</source>
          <target state="translated">doctest를 Python 코드로 변환하고 디버거에서 합성 된 코드를 실행할 수있는 함수 :</target>
        </trans-unit>
        <trans-unit id="c244de50efd900af23f95e74816e4a77ce0046dd" translate="yes" xml:space="preserve">
          <source>Functions with output parameters will automatically return the output parameter value if there is a single one, or a tuple containing the output parameter values when there are more than one, so the GetWindowRect function now returns a RECT instance, when called.</source>
          <target state="translated">출력 매개 변수가있는 함수는 출력 매개 변수 값이 하나 인 경우 또는 출력 매개 변수 값이 하나 이상인 튜플이있는 경우 자동으로 출력 매개 변수 값을 리턴하므로 GetWindowRect 함수는 이제 호출 될 때 RECT 인스턴스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b0e6e4325e12bb480ddedba753c0f8ff52392cb8" translate="yes" xml:space="preserve">
          <source>Functions, Constants, and Exceptions</source>
          <target state="translated">함수, 상수 및 예외</target>
        </trans-unit>
        <trans-unit id="b4fb46cd353c41a8b5f72483a104c7283e890b98" translate="yes" xml:space="preserve">
          <source>Fundamental data types</source>
          <target state="translated">기본 데이터 유형</target>
        </trans-unit>
        <trans-unit id="75dfbb4ae8b96227bde6c5115b67cdcd67dd0280" translate="yes" xml:space="preserve">
          <source>Fundamental data types, when returned as foreign function call results, or, for example, by retrieving structure field members or array items, are transparently converted to native Python types. In other words, if a foreign function has a &lt;code&gt;restype&lt;/code&gt; of &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt;, you will always receive a Python bytes object, &lt;em&gt;not&lt;/em&gt; a &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">외래 함수 호출 결과로 반환되거나 구조 필드 멤버 또는 배열 항목을 검색하는 등의 기본 데이터 형식은 기본 Python 형식으로 투명하게 변환됩니다. 즉, 외부 함수의 &lt;code&gt;restype&lt;/code&gt; 이 &lt;a href=&quot;#ctypes.c_char_p&quot;&gt; &lt;code&gt;c_char_p&lt;/code&gt; &lt;/a&gt; 인 경우 &lt;a href=&quot;#ctypes.c_char_p&quot;&gt; &lt;code&gt;c_char_p&lt;/code&gt; &lt;/a&gt; 인스턴스가 &lt;em&gt;아닌&lt;/em&gt; Python bytes 객체를 항상받습니다 .</target>
        </trans-unit>
        <trans-unit id="aed766328b20ea5d898558b5e226e4031f0fcb56" translate="yes" xml:space="preserve">
          <source>Further Examples</source>
          <target state="translated">추가 예</target>
        </trans-unit>
        <trans-unit id="15f5c4496b8b834674cbc8ab8fb26c5c51e088ee" translate="yes" xml:space="preserve">
          <source>Further documentation on these functions can be found in the Platform API documentation.</source>
          <target state="translated">이러한 기능에 대한 추가 문서는 플랫폼 API 설명서에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf65796b579e013fd0c63bc3940e46318e678ee0" translate="yes" xml:space="preserve">
          <source>Further explanation is available in the FAQ entry &lt;a href=&quot;https://docs.python.org/3.8/faq/programming.html#faq-multidimensional-list&quot;&gt;How do I create a multidimensional list?&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 FAQ 항목에서 확인할 수 &lt;a href=&quot;https://docs.python.org/3.8/faq/programming.html#faq-multidimensional-list&quot;&gt;있습니다. 다차원 목록은 어떻게 만듭니 까? &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="65131570643d08e25f1b3d299321b7137e53b984" translate="yes" xml:space="preserve">
          <source>Further explanation is available in the FAQ entry &lt;a href=&quot;https://docs.python.org/3.9/faq/programming.html#faq-multidimensional-list&quot;&gt;How do I create a multidimensional list?&lt;/a&gt;.</source>
          <target state="translated">Further explanation is available in the FAQ entry &lt;a href=&quot;https://docs.python.org/3.9/faq/programming.html#faq-multidimensional-list&quot;&gt;How do I create a multidimensional list?&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="629fce60fcf94411565c6cc87f1eb2b8f5946829" translate="yes" xml:space="preserve">
          <source>Furthermore, &lt;code&gt;add_parser&lt;/code&gt; supports an additional &lt;code&gt;aliases&lt;/code&gt; argument, which allows multiple strings to refer to the same subparser. This example, like &lt;code&gt;svn&lt;/code&gt;, aliases &lt;code&gt;co&lt;/code&gt; as a shorthand for &lt;code&gt;checkout&lt;/code&gt;:</source>
          <target state="translated">또한 &lt;code&gt;add_parser&lt;/code&gt; 는 추가 &lt;code&gt;aliases&lt;/code&gt; 인수를 지원 하므로 여러 문자열이 동일한 하위 구문 분석기를 참조 할 수 있습니다. 이 예는, 같은 &lt;code&gt;svn&lt;/code&gt; , 별칭 &lt;code&gt;co&lt;/code&gt; 위한 속기로 &lt;code&gt;checkout&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="36c32ddb93b70b3b0d66489f7cc081835756def8" translate="yes" xml:space="preserve">
          <source>Furthermore, all functions without a return type or parameter types will implicitly default to using &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">또한 반환 유형이나 매개 변수 유형이없는 모든 함수는 기본적으로 &lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="8f0c49f21362241b8542d0a3c68222c26cf5407b" translate="yes" xml:space="preserve">
          <source>Furthermore, any functions and classes defined by the executed code are not guaranteed to work correctly after a &lt;a href=&quot;#module-runpy&quot;&gt;&lt;code&gt;runpy&lt;/code&gt;&lt;/a&gt; function has returned. If that limitation is not acceptable for a given use case, &lt;a href=&quot;importlib#module-importlib&quot;&gt;&lt;code&gt;importlib&lt;/code&gt;&lt;/a&gt; is likely to be a more suitable choice than this module.</source>
          <target state="translated">또한 실행 된 코드로 정의 된 함수 및 클래스는 &lt;a href=&quot;#module-runpy&quot;&gt; &lt;code&gt;runpy&lt;/code&gt; &lt;/a&gt; 함수가 리턴 된 후에 올바르게 작동하지 않을 수 있습니다 . 주어진 사용 사례에 대해 이러한 제한이 허용되지 않는 경우 &lt;a href=&quot;importlib#module-importlib&quot;&gt; &lt;code&gt;importlib&lt;/code&gt; &lt;/a&gt; 가이 모듈보다 더 적합한 선택 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="908afa0382a98c83fc4ecb7627fefd2844f8d1fa" translate="yes" xml:space="preserve">
          <source>Furthermore, parameterized generics erase type parameters during object creation:</source>
          <target state="translated">Furthermore, parameterized generics erase type parameters during object creation:</target>
        </trans-unit>
        <trans-unit id="0555f6f9e263f192be068a009836d2a2523e37d9" translate="yes" xml:space="preserve">
          <source>Furthermore, there is not a compelling case for arbitrarily altering the object graph of loggers, handlers, filters, formatters at run-time, once a configuration is set up; the verbosity of loggers and handlers can be controlled just by setting levels (and, in the case of loggers, propagation flags). Changing the object graph arbitrarily in a safe way is problematic in a multi-threaded environment; while not impossible, the benefits are not worth the complexity it adds to the implementation.</source>
          <target state="translated">또한, 일단 구성이 설정되면 런타임에 로거, 핸들러, 필터, 포맷터의 객체 그래프를 임의로 변경하는 강력한 사례는 없습니다. 로거 및 처리기의 세부 정보는 레벨을 설정하여 (및 로거의 경우 전파 플래그) 설정하여 제어 할 수 있습니다. 안전한 방식으로 객체 그래프를 임의로 변경하는 것은 멀티 스레드 환경에서 문제가됩니다. 불가능하지는 않지만 그 이점은 구현에 추가되는 복잡성에 가치가 없습니다.</target>
        </trans-unit>
        <trans-unit id="46806aa64dafed90bfb876c61bba7987d063cf08" translate="yes" xml:space="preserve">
          <source>Fused multiply-add. Return self*other+third with no rounding of the intermediate product self*other.</source>
          <target state="translated">융합 곱셈 추가. 중간 제품 자체의 반올림없이 self * other + third를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="ed8b6a30978a9c952f9c9df10088a33c954813bd" translate="yes" xml:space="preserve">
          <source>Future Functions</source>
          <target state="translated">향후 기능</target>
        </trans-unit>
        <trans-unit id="040c5373d5621aa737e101cc596fa0199c9dc5ff" translate="yes" xml:space="preserve">
          <source>Future Object</source>
          <target state="translated">미래의 목표</target>
        </trans-unit>
        <trans-unit id="7afdbd06b8b7618d0daf7e6ccc98c609e58e8e9f" translate="yes" xml:space="preserve">
          <source>Future Objects</source>
          <target state="translated">미래 객체</target>
        </trans-unit>
        <trans-unit id="18e4acee739b17a1065f82661408ae77421afefb" translate="yes" xml:space="preserve">
          <source>Future is an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; object. Coroutines can await on Future objects until they either have a result or an exception set, or until they are cancelled.</source>
          <target state="translated">미래는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-awaitable&quot;&gt;기다릴 수있는&lt;/a&gt; 대상입니다. 코 루틴은 결과 또는 예외 세트가 있거나 취소 될 때까지 Future 객체를 기다릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0baeb07db9b5a4d0123d47219a8a9ce4d777329" translate="yes" xml:space="preserve">
          <source>Future is an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; object. Coroutines can await on Future objects until they either have a result or an exception set, or until they are cancelled.</source>
          <target state="translated">Future is an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-awaitable&quot;&gt;awaitable&lt;/a&gt; object. Coroutines can await on Future objects until they either have a result or an exception set, or until they are cancelled.</target>
        </trans-unit>
        <trans-unit id="3feb6a8fec72549860ff9b054d1b990159ab9d6c" translate="yes" xml:space="preserve">
          <source>Future objects in asyncio are needed to allow callback-based code to be used with async/await.</source>
          <target state="translated">콜백 기반 코드를 async / await와 함께 사용하려면 asyncio의 향후 객체가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f3c8c35a0717de250776c3a109889f261085ce97" translate="yes" xml:space="preserve">
          <source>Future objects, sometimes exposed by libraries and some asyncio APIs, can be awaited:</source>
          <target state="translated">때때로 라이브러리 및 일부 asyncio API에 의해 노출되는 미래의 객체를 기다릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5fcc0b7fc3f9b4a713a58338f8eab747e7ec9c4" translate="yes" xml:space="preserve">
          <source>Future statements</source>
          <target state="translated">향후 진술</target>
        </trans-unit>
        <trans-unit id="293b9c2c76d6969ac75fae9cc6bc05878d13b9ce" translate="yes" xml:space="preserve">
          <source>Future statements are specified by bits which can be bitwise ORed together to specify multiple statements. The bitfield required to specify a given feature can be found as the &lt;code&gt;compiler_flag&lt;/code&gt; attribute on the &lt;code&gt;_Feature&lt;/code&gt; instance in the &lt;a href=&quot;__future__#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">미래의 진술은 비트로 지정되어 여러 개의 진술을 지정하기 위해 함께 비트 OR 될 수 있습니다. 지정된 기능을 지정하는 데 필요한 비트 필드 는 &lt;a href=&quot;__future__#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt; 모듈 의 &lt;code&gt;_Feature&lt;/code&gt; 인스턴스에서 &lt;code&gt;compiler_flag&lt;/code&gt; 속성 으로 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="943e868a2624e15afba6299f4ed4ded48727c51e" translate="yes" xml:space="preserve">
          <source>FutureWarning</source>
          <target state="translated">FutureWarning</target>
        </trans-unit>
        <trans-unit id="965db80f650641f51dead99c13720e4035c9ef70" translate="yes" xml:space="preserve">
          <source>Futures</source>
          <target state="translated">Futures</target>
        </trans-unit>
        <trans-unit id="4c25945d461c0634df34d19c19a37fb40386b467" translate="yes" xml:space="preserve">
          <source>GEN_CLOSED: Execution has completed.</source>
          <target state="translated">GEN_CLOSED : 실행이 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="650b3ffe0606ed0d5caee29b91e192c6db844113" translate="yes" xml:space="preserve">
          <source>GEN_CREATED: Waiting to start execution.</source>
          <target state="translated">GEN_CREATED : 실행을 기다리는 중입니다.</target>
        </trans-unit>
        <trans-unit id="b1fe62534e6aac45bba898aa978e224194a8f480" translate="yes" xml:space="preserve">
          <source>GEN_RUNNING: Currently being executed by the interpreter.</source>
          <target state="translated">GEN_RUNNING : 현재 통역사에서 실행 중입니다.</target>
        </trans-unit>
        <trans-unit id="2643066350ead1c0a8664b7667b6b4bc694078a2" translate="yes" xml:space="preserve">
          <source>GEN_SUSPENDED: Currently suspended at a yield expression.</source>
          <target state="translated">GEN_SUSPENDED : 현재 수익률 표현식에서 일시 중지되었습니다.</target>
        </trans-unit>
        <trans-unit id="a246c5f8bb908d1c393f6923487aecfa272e691b" translate="yes" xml:space="preserve">
          <source>GIF 87a and 89a Files</source>
          <target state="translated">GIF 87a 및 89a 파일</target>
        </trans-unit>
        <trans-unit id="29b0c001de448507eeda37b597ce4ce0ec650ba5" translate="yes" xml:space="preserve">
          <source>GNOME uses a version of the &lt;a href=&quot;#module-gettext&quot;&gt;&lt;code&gt;gettext&lt;/code&gt;&lt;/a&gt; module by James Henstridge, but this version has a slightly different API. Its documented usage was:</source>
          <target state="translated">그놈은 James Henstridge 의 &lt;a href=&quot;#module-gettext&quot;&gt; &lt;code&gt;gettext&lt;/code&gt; &lt;/a&gt; 모듈 버전을 사용 하지만이 버전은 API가 약간 다릅니다. 문서화 된 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e6520e025af22317712e26a57b07cbcd978f6fae" translate="yes" xml:space="preserve">
          <source>GNU &lt;strong&gt;gettext&lt;/strong&gt; API</source>
          <target state="translated">GNU &lt;strong&gt;gettext&lt;/strong&gt; API</target>
        </trans-unit>
        <trans-unit id="0852894f9b2a41ca0b12f6e51a66ede0a0cffce6" translate="yes" xml:space="preserve">
          <source>GNU tar format.</source>
          <target state="translated">GNU 타르 형식.</target>
        </trans-unit>
        <trans-unit id="77104d0ac72d310bfb0a065e06a3dcbeab2ef352" translate="yes" xml:space="preserve">
          <source>GNU tar manual, Basic Tar Format</source>
          <target state="translated">GNU 타르 매뉴얼, 기본 타르 형식</target>
        </trans-unit>
        <trans-unit id="f1c7eabb625a30cd8386b723eb7564d690dc3bda" translate="yes" xml:space="preserve">
          <source>GUI classes</source>
          <target state="translated">GUI 클래스</target>
        </trans-unit>
        <trans-unit id="cdac0a16fe6c8715769cabffbcf5b111542185f3" translate="yes" xml:space="preserve">
          <source>Gamma distribution. (&lt;em&gt;Not&lt;/em&gt; the gamma function!) Conditions on the parameters are &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; and &lt;code&gt;beta &amp;gt; 0&lt;/code&gt;.</source>
          <target state="translated">감마 분포. ( 감마 기능이 &lt;em&gt;아닙니다&lt;/em&gt; !) 매개 변수의 조건은 &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; 및 &lt;code&gt;beta &amp;gt; 0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9c36f27f079aad3d99c9aa2c98a958440131d7a5" translate="yes" xml:space="preserve">
          <source>Gathering statistics about garbage collection, such as how often various generations are collected, and how long the collection takes.</source>
          <target state="translated">다양한 세대가 수집되는 빈도 및 수집 시간과 같은 가비지 수집에 대한 통계 수집</target>
        </trans-unit>
        <trans-unit id="94e14ba841dd9989631b47b319bec6cacb6f1eea" translate="yes" xml:space="preserve">
          <source>Gaussian distribution. &lt;em&gt;mu&lt;/em&gt; is the mean, and &lt;em&gt;sigma&lt;/em&gt; is the standard deviation. This is slightly faster than the &lt;a href=&quot;#random.normalvariate&quot;&gt;&lt;code&gt;normalvariate()&lt;/code&gt;&lt;/a&gt; function defined below.</source>
          <target state="translated">가우스 분포. &lt;em&gt;mu&lt;/em&gt; 는 평균이고 &lt;em&gt;sigma&lt;/em&gt; 는 표준 편차입니다. 이것은 아래 정의 된 &lt;a href=&quot;#random.normalvariate&quot;&gt; &lt;code&gt;normalvariate()&lt;/code&gt; &lt;/a&gt; 함수 보다 약간 빠릅니다 .</target>
        </trans-unit>
        <trans-unit id="d5884a44b6d020c29a2f374e66fdf68d2522d7a5" translate="yes" xml:space="preserve">
          <source>General calendar related functions.</source>
          <target state="translated">일반 캘린더 관련 기능.</target>
        </trans-unit>
        <trans-unit id="c55d5d54d0be20d8b60e13b1e058e6199fc67a9b" translate="yes" xml:space="preserve">
          <source>General calendar-related functions. &lt;a href=&quot;calendar#calendar.timegm&quot;&gt;&lt;code&gt;timegm()&lt;/code&gt;&lt;/a&gt; is the inverse of &lt;a href=&quot;#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt; from this module.</source>
          <target state="translated">일반적인 캘린더 관련 기능. &lt;a href=&quot;calendar#calendar.timegm&quot;&gt; &lt;code&gt;timegm()&lt;/code&gt; &lt;/a&gt; 은이 모듈 의 &lt;a href=&quot;#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt; 의 역입니다 .</target>
        </trans-unit>
        <trans-unit id="9ceee6648db6ad65058c1365753f6d071c93ac56" translate="yes" xml:space="preserve">
          <source>General format. For a given precision &lt;code&gt;p &amp;gt;= 1&lt;/code&gt;, this rounds the number to &lt;code&gt;p&lt;/code&gt; significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude.</source>
          <target state="translated">일반적인 형식. 주어진 정밀도 &lt;code&gt;p &amp;gt;= 1&lt;/code&gt; , 이것은 숫자를 &lt;code&gt;p&lt;/code&gt; 유효 숫자 로 반올림 한 다음 그 크기에 따라 고정 소수점 형식 또는 과학적 표기법으로 결과를 형식화합니다.</target>
        </trans-unit>
        <trans-unit id="f322561eef774a62c9210e7625ce378d4c97d613" translate="yes" xml:space="preserve">
          <source>General format. Same as &lt;code&gt;'g'&lt;/code&gt; except switches to &lt;code&gt;'E'&lt;/code&gt; if the number gets too large. The representations of infinity and NaN are uppercased, too.</source>
          <target state="translated">일반적인 형식. 숫자가 너무 커지면 &lt;code&gt;'E'&lt;/code&gt; 로 전환한다는 점을 제외하고 &lt;code&gt;'g'&lt;/code&gt; 와 동일 합니다. 무한대와 NaN의 표현도 대문자입니다.</target>
        </trans-unit>
        <trans-unit id="ede442e713df309353f00b1e6c5eca3991f17a5a" translate="yes" xml:space="preserve">
          <source>General properties</source>
          <target state="translated">일반 속성</target>
        </trans-unit>
        <trans-unit id="bf6bda4587aff077462187186bdf6576ccc550c7" translate="yes" xml:space="preserve">
          <source>General rules</source>
          <target state="translated">일반적인 규칙</target>
        </trans-unit>
        <trans-unit id="068195143092a9c76f7f35d028344c892962b8b0" translate="yes" xml:space="preserve">
          <source>General strictness switches:</source>
          <target state="translated">일반 엄격 스위치 :</target>
        </trans-unit>
        <trans-unit id="e4a6b871e250a74d5d8b375dda6c5463d02ee60e" translate="yes" xml:space="preserve">
          <source>Generally synchronization primitives are not as necessary in a multiprocess program as they are in a multithreaded program. See the documentation for &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">일반적으로 동기화 프리미티브는 다중 스레드 프로그램에서와 같이 다중 프로세스 프로그램에서 필요하지 않습니다. &lt;a href=&quot;threading#module-threading&quot;&gt; &lt;code&gt;threading&lt;/code&gt; &lt;/a&gt; 모듈 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="18a9756dceb01305df40a47834a42c5432a22e44" translate="yes" xml:space="preserve">
          <source>Generally, argument defaults are specified either by passing a default to &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; or by calling the &lt;a href=&quot;#argparse.ArgumentParser.set_defaults&quot;&gt;&lt;code&gt;set_defaults()&lt;/code&gt;&lt;/a&gt; methods with a specific set of name-value pairs. Sometimes however, it may be useful to specify a single parser-wide default for arguments. This can be accomplished by passing the &lt;code&gt;argument_default=&lt;/code&gt; keyword argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;. For example, to globally suppress attribute creation on &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; calls, we supply &lt;code&gt;argument_default=SUPPRESS&lt;/code&gt;:</source>
          <target state="translated">일반적으로 인수 기본값은 기본값을 &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt; 에 전달 하거나 특정 이름-값 쌍 세트로 &lt;a href=&quot;#argparse.ArgumentParser.set_defaults&quot;&gt; &lt;code&gt;set_defaults()&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 지정됩니다. 그러나 때로는 인수에 단일 파서 전체 기본값을 지정하는 것이 유용 할 수 있습니다. &lt;code&gt;argument_default=&lt;/code&gt; 키워드 인수를 &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt; 에 전달하면 됩니다. 예를 들어 &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt; 호출에서 속성 생성을 전역 적으로 억제하려면 &lt;code&gt;argument_default=SUPPRESS&lt;/code&gt; 를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="a946721c512bcc2260c23fb30f93346cfecd1df2" translate="yes" xml:space="preserve">
          <source>Generate &lt;em&gt;n&lt;/em&gt; random bytes.</source>
          <target state="translated">Generate &lt;em&gt;n&lt;/em&gt; random bytes.</target>
        </trans-unit>
        <trans-unit id="760d892cb151b00c2aba0b8d86a8bb2cd386807c" translate="yes" xml:space="preserve">
          <source>Generate a &lt;code&gt;SIGABRT&lt;/code&gt; signal to the current process. On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of &lt;code&gt;3&lt;/code&gt;. Be aware that calling this function will not call the Python signal handler registered for &lt;code&gt;SIGABRT&lt;/code&gt; with &lt;a href=&quot;signal#signal.signal&quot;&gt;&lt;code&gt;signal.signal()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재 프로세스에 대한 &lt;code&gt;SIGABRT&lt;/code&gt; 신호를 생성하십시오 . 유닉스에서 기본 동작은 코어 덤프를 생성하는 것입니다. Windows에서 프로세스는 즉시 종료 코드 &lt;code&gt;3&lt;/code&gt; 을 리턴합니다 . 이 함수를 호출하면 등록 된 파이썬 신호 처리기를 호출하지 않습니다주의 &lt;code&gt;SIGABRT&lt;/code&gt; 와 &lt;a href=&quot;signal#signal.signal&quot;&gt; &lt;code&gt;signal.signal()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="58a95565098b688544062529a9855e160d91e91d" translate="yes" xml:space="preserve">
          <source>Generate a CAB file, add it as a stream to the MSI file, put it into the &lt;code&gt;Media&lt;/code&gt; table, and remove the generated file from the disk.</source>
          <target state="translated">CAB 파일을 생성하여 MSI 파일에 스트림으로 추가 한 후 &lt;code&gt;Media&lt;/code&gt; 테이블에 넣고 디스크에서 생성 된 파일을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="5329a732ca7f35819388ce77de62767aca915104" translate="yes" xml:space="preserve">
          <source>Generate a UUID based on the MD5 hash of a namespace identifier (which is a UUID) and a name (which is a string).</source>
          <target state="translated">네임 스페이스 식별자 (UUID)와 이름 (문자열)의 MD5 해시를 기반으로 UUID를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e254e1d1587616df23d81a95de4537b712650d32" translate="yes" xml:space="preserve">
          <source>Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a UUID) and a name (which is a string).</source>
          <target state="translated">네임 스페이스 식별자 (UUID)와 이름 (문자열)의 SHA-1 해시를 기반으로 UUID를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3e2dda6f18229b616248722abe6bc7c08b0ae156" translate="yes" xml:space="preserve">
          <source>Generate a UUID from a host ID, sequence number, and the current time. If &lt;em&gt;node&lt;/em&gt; is not given, &lt;a href=&quot;#uuid.getnode&quot;&gt;&lt;code&gt;getnode()&lt;/code&gt;&lt;/a&gt; is used to obtain the hardware address. If &lt;em&gt;clock_seq&lt;/em&gt; is given, it is used as the sequence number; otherwise a random 14-bit sequence number is chosen.</source>
          <target state="translated">호스트 ID, 시퀀스 번호 및 현재 시간에서 UUID를 생성하십시오. 경우 &lt;em&gt;노드가&lt;/em&gt; 특정되지 않고, &lt;a href=&quot;#uuid.getnode&quot;&gt; &lt;code&gt;getnode()&lt;/code&gt; &lt;/a&gt; 하드웨어 어드레스를 획득하기 위해 사용된다. 경우 &lt;em&gt;clock_seq가&lt;/em&gt; 주어진다, 이는 일련 번호로 사용된다; 그렇지 않으면 임의의 14 비트 시퀀스 번호가 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="fe41ab241f1f685b0dbb424e0207c19044174796" translate="yes" xml:space="preserve">
          <source>Generate a hard-to-guess temporary URL containing a security token suitable for password recovery applications:</source>
          <target state="translated">비밀번호 복구 애플리케이션에 적합한 보안 토큰을 포함하여 추측하기 어려운 임시 URL을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="c2ffe2e554218a5f937438f8460923a2c93a492c" translate="yes" xml:space="preserve">
          <source>Generate a random UUID.</source>
          <target state="translated">임의의 UUID를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="eeabda0fa004edbf77932a794b4287d23b30cd9b" translate="yes" xml:space="preserve">
          <source>Generate a stereo fragment from a mono fragment. Each pair of samples in the stereo fragment are computed from the mono sample, whereby left channel samples are multiplied by &lt;em&gt;lfactor&lt;/em&gt; and right channel samples by &lt;em&gt;rfactor&lt;/em&gt;.</source>
          <target state="translated">모노 프래그먼트에서 스테레오 프래그먼트를 생성합니다. 스테레오 프래그먼트의 각 샘플 쌍은 모노 샘플에서 계산되므로 왼쪽 채널 샘플에는 &lt;em&gt;lfactor가&lt;/em&gt; , 오른쪽 채널 샘플에는 &lt;em&gt;rfactor&lt;/em&gt; 가 &lt;em&gt;곱해집니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="bb0de2380f61c8b3b5ce97b16629785ba2f3c883" translate="yes" xml:space="preserve">
          <source>Generate a ten-character alphanumeric password with at least one lowercase character, at least one uppercase character, and at least three digits:</source>
          <target state="translated">하나 이상의 소문자, 하나 이상의 대문자 및 3 자리 이상의 10 자리 영숫자 암호를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="d737efc68fd8c95bb0b04bfa067c27c815266bd2" translate="yes" xml:space="preserve">
          <source>Generate an &lt;a href=&quot;https://xkcd.com/936/&quot;&gt;XKCD-style passphrase&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://xkcd.com/936/&quot;&gt;XKCD 스타일 비밀번호 문구를&lt;/a&gt; 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="5254e77c49e3726b9ce7afa0602745d90779e6d7" translate="yes" xml:space="preserve">
          <source>Generate an eight-character alphanumeric password:</source>
          <target state="translated">8 자리 영숫자 비밀번호를 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="9c47bb489aa92718ba831cc71a1f8f2e2fe4b431" translate="yes" xml:space="preserve">
          <source>Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory &lt;em&gt;top&lt;/em&gt; (including &lt;em&gt;top&lt;/em&gt; itself), it yields a 3-tuple &lt;code&gt;(dirpath, dirnames,
filenames)&lt;/code&gt;.</source>
          <target state="translated">트리를 하향식 또는 상향식으로 걸어 디렉토리 트리에서 파일 이름을 생성하십시오. 디렉토리 &lt;em&gt;상단을&lt;/em&gt; 루트로하는 트리의 각 디렉토리 ( &lt;em&gt;상단&lt;/em&gt; 자체 포함 )에 대해 3 개의 튜플 &lt;code&gt;(dirpath, dirnames, filenames)&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="a176b8716da502b7a00a24adf4a150b1dcaccace" translate="yes" xml:space="preserve">
          <source>Generated just after setting the focus item to open=False.</source>
          <target state="translated">포커스 항목을 open = False로 설정 한 직후 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="0376f849b020636ee4b54a60454a83645273bf92" translate="yes" xml:space="preserve">
          <source>Generated just before settings the focus item to open=True.</source>
          <target state="translated">포커스 항목을 열기 = 참으로 설정하기 직전에 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="725cd661f4740654b5db99af933817749928d8b8" translate="yes" xml:space="preserve">
          <source>Generated pseudo-random byte sequences will be unique if they are of sufficient length, but are not necessarily unpredictable. They can be used for non-cryptographic purposes and for certain purposes in cryptographic protocols, but usually not for key generation etc.</source>
          <target state="translated">생성 된 의사 랜덤 바이트 시퀀스는 길이가 충분하지만 반드시 예측할 수없는 경우 고유합니다. 비 암호화 목적 및 암호화 프로토콜의 특정 목적으로 사용될 수 있지만 일반적으로 키 생성에는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ead06510ef285ebb7f6220395aade6782b29c550" translate="yes" xml:space="preserve">
          <source>Generated whenever the selection changes.</source>
          <target state="translated">선택이 변경 될 때마다 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="b0bc8d38af1670401a998afe93ec1319cc1b94a4" translate="yes" xml:space="preserve">
          <source>Generates &lt;em&gt;n&lt;/em&gt; random samples for a given mean and standard deviation. Returns a &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; of &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">주어진 평균 및 표준 편차에 대해 &lt;em&gt;n 개의&lt;/em&gt; 랜덤 샘플을 생성 합니다. &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; 값 의 &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="eac497b73b4148960c71a958d63bde7183c58b8a" translate="yes" xml:space="preserve">
          <source>Generates a string representation of an XML element, including all subelements. &lt;em&gt;element&lt;/em&gt; is an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; instance. &lt;em&gt;encoding&lt;/em&gt;&lt;a href=&quot;#id9&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; is the output encoding (default is US-ASCII). Use &lt;code&gt;encoding=&quot;unicode&quot;&lt;/code&gt; to generate a Unicode string (otherwise, a bytestring is generated). &lt;em&gt;method&lt;/em&gt; is either &lt;code&gt;&quot;xml&quot;&lt;/code&gt;, &lt;code&gt;&quot;html&quot;&lt;/code&gt; or &lt;code&gt;&quot;text&quot;&lt;/code&gt; (default is &lt;code&gt;&quot;xml&quot;&lt;/code&gt;). &lt;em&gt;xml_declaration&lt;/em&gt;, &lt;em&gt;default_namespace&lt;/em&gt; and &lt;em&gt;short_empty_elements&lt;/em&gt; has the same meaning as in &lt;a href=&quot;#xml.etree.ElementTree.ElementTree.write&quot;&gt;&lt;code&gt;ElementTree.write()&lt;/code&gt;&lt;/a&gt;. Returns an (optionally) encoded string containing the XML data.</source>
          <target state="translated">모든 하위 요소를 포함하여 XML 요소의 문자열 표현을 생성합니다. &lt;em&gt;element&lt;/em&gt; 는 &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt; 인스턴스입니다. &lt;em&gt;인코딩 &lt;/em&gt;&lt;a href=&quot;#id9&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; 은 출력 인코딩입니다 (기본값은 US-ASCII). 사용 &lt;code&gt;encoding=&quot;unicode&quot;&lt;/code&gt; 유니 코드 문자열 (그렇지 않으면 bytestring 생성되는)를 생성한다. &lt;em&gt;method&lt;/em&gt; 는 &lt;code&gt;&quot;xml&quot;&lt;/code&gt; , &lt;code&gt;&quot;html&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;text&quot;&lt;/code&gt; 입니다 (기본값은 &lt;code&gt;&quot;xml&quot;&lt;/code&gt; ). &lt;em&gt;xml_declaration&lt;/em&gt; , &lt;em&gt;default_namespace&lt;/em&gt; 및 &lt;em&gt;short_empty_elements&lt;/em&gt; 는 &lt;a href=&quot;#xml.etree.ElementTree.ElementTree.write&quot;&gt; &lt;code&gt;ElementTree.write()&lt;/code&gt; &lt;/a&gt; 와 동일한 의미를 갖습니다 .XML 데이터를 포함하는 (선택적) 인코딩 된 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6204d45d6bba3d8356ab2594a70a820efafd7b4b" translate="yes" xml:space="preserve">
          <source>Generates a string representation of an XML element, including all subelements. &lt;em&gt;element&lt;/em&gt; is an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; instance. &lt;em&gt;encoding&lt;/em&gt;&lt;a href=&quot;#id9&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt; is the output encoding (default is US-ASCII). Use &lt;code&gt;encoding=&quot;unicode&quot;&lt;/code&gt; to generate a Unicode string (otherwise, a bytestring is generated). &lt;em&gt;method&lt;/em&gt; is either &lt;code&gt;&quot;xml&quot;&lt;/code&gt;, &lt;code&gt;&quot;html&quot;&lt;/code&gt; or &lt;code&gt;&quot;text&quot;&lt;/code&gt; (default is &lt;code&gt;&quot;xml&quot;&lt;/code&gt;). &lt;em&gt;xml_declaration&lt;/em&gt;, &lt;em&gt;default_namespace&lt;/em&gt; and &lt;em&gt;short_empty_elements&lt;/em&gt; has the same meaning as in &lt;a href=&quot;#xml.etree.ElementTree.ElementTree.write&quot;&gt;&lt;code&gt;ElementTree.write()&lt;/code&gt;&lt;/a&gt;. Returns a list of (optionally) encoded strings containing the XML data. It does not guarantee any specific sequence, except that &lt;code&gt;b&quot;&quot;.join(tostringlist(element)) == tostring(element)&lt;/code&gt;.</source>
          <target state="translated">모든 하위 요소를 포함하여 XML 요소의 문자열 표현을 생성합니다. &lt;em&gt;element&lt;/em&gt; 는 &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt; 인스턴스입니다. &lt;em&gt;인코딩 &lt;/em&gt;&lt;a href=&quot;#id9&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt; 은 출력 인코딩입니다 (기본값은 US-ASCII). 사용 &lt;code&gt;encoding=&quot;unicode&quot;&lt;/code&gt; 유니 코드 문자열 (그렇지 않으면 bytestring 생성되는)를 생성한다. &lt;em&gt;method&lt;/em&gt; 는 &lt;code&gt;&quot;xml&quot;&lt;/code&gt; , &lt;code&gt;&quot;html&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;text&quot;&lt;/code&gt; 입니다 (기본값은 &lt;code&gt;&quot;xml&quot;&lt;/code&gt; ). &lt;em&gt;xml_declaration&lt;/em&gt; , &lt;em&gt;default_namespace&lt;/em&gt; 및 &lt;em&gt;short_empty_elements&lt;/em&gt; 는 &lt;a href=&quot;#xml.etree.ElementTree.ElementTree.write&quot;&gt; &lt;code&gt;ElementTree.write()&lt;/code&gt; &lt;/a&gt; 에서와 동일한 의미를 갖습니다.. XML 데이터를 포함하는 (선택적) 인코딩 된 문자열 목록을 리턴합니다. &lt;code&gt;b&quot;&quot;.join(tostringlist(element)) == tostring(element)&lt;/code&gt; 이외의 특정 순서는 보장하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5b7862a259e168570964f1a8bcd0d1b5737c3c5f" translate="yes" xml:space="preserve">
          <source>Generates and returns an abstract syntax tree instead of returning a compiled code object.</source>
          <target state="translated">Generates and returns an abstract syntax tree instead of returning a compiled code object.</target>
        </trans-unit>
        <trans-unit id="708786a80761c18bb49de75d753c2402b77bb538" translate="yes" xml:space="preserve">
          <source>Generating Symbol Tables</source>
          <target state="translated">심볼 테이블 생성</target>
        </trans-unit>
        <trans-unit id="47e3a19806fd6ae855bc1e14ecf253bfc6c478ca" translate="yes" xml:space="preserve">
          <source>Generating a plist:</source>
          <target state="translated">plist 생성 :</target>
        </trans-unit>
        <trans-unit id="cbad253020b7e1c56a37eb457d6613f3ba57d4a8" translate="yes" xml:space="preserve">
          <source>Generating tokens</source>
          <target state="translated">토큰 생성</target>
        </trans-unit>
        <trans-unit id="e3833cf62cfdb901cbd45270e457754bafbc5c12" translate="yes" xml:space="preserve">
          <source>Generator Types</source>
          <target state="translated">발전기 유형</target>
        </trans-unit>
        <trans-unit id="f1c6dab37c8f8bbc2a1a1c78f437217210eb50ad" translate="yes" xml:space="preserve">
          <source>Generator-based Coroutines</source>
          <target state="translated">발전기 기반 코 루틴</target>
        </trans-unit>
        <trans-unit id="9318bd97ef11f214febd817fed04cbde02eb2197" translate="yes" xml:space="preserve">
          <source>Generator-based coroutines predate async/await syntax. They are Python generators that use &lt;code&gt;yield from&lt;/code&gt; expressions to await on Futures and other coroutines.</source>
          <target state="translated">생성기 기반 코 루틴은 비동기 / 대기 구문보다 우선합니다. 그들은 미래의 코 루틴을 기다리기 위해 식의 &lt;code&gt;yield from&lt;/code&gt; 을 사용하는 파이썬 생성기입니다 .</target>
        </trans-unit>
        <trans-unit id="c463bc7eba03866e87736c2166b5208e94578261" translate="yes" xml:space="preserve">
          <source>Generator-based coroutines should be decorated with &lt;a href=&quot;#asyncio.coroutine&quot;&gt;&lt;code&gt;@asyncio.coroutine&lt;/code&gt;&lt;/a&gt;, although this is not enforced.</source>
          <target state="translated">생성기 기반 코 루틴은 &lt;a href=&quot;#asyncio.coroutine&quot;&gt; &lt;code&gt;@asyncio.coroutine&lt;/code&gt; &lt;/a&gt; 으로 장식해야 하지만, 적용되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="091c54c4935a2ee35bc6aef14311233891434110" translate="yes" xml:space="preserve">
          <source>GeneratorExit</source>
          <target state="translated">GeneratorExit</target>
        </trans-unit>
        <trans-unit id="95b537c554172f8d70e5e90217fa90b2fd3fc862" translate="yes" xml:space="preserve">
          <source>Generic Alias Type</source>
          <target state="translated">Generic Alias Type</target>
        </trans-unit>
        <trans-unit id="0e0fbaa97fbe2d5968844c44481eeeeaa9d8cf4d" translate="yes" xml:space="preserve">
          <source>Generic Operating System Services</source>
          <target state="translated">일반 운영 체제 서비스</target>
        </trans-unit>
        <trans-unit id="838ba07d03a80d8b34bb8b7d73b37a6db23645d6" translate="yes" xml:space="preserve">
          <source>Generic concrete collections</source>
          <target state="translated">Generic concrete collections</target>
        </trans-unit>
        <trans-unit id="4ef339fbad9266b6e7fe779f770b71d1ef6059da" translate="yes" xml:space="preserve">
          <source>Generic element structure builder. This builder converts a sequence of start, data, end, comment and pi method calls to a well-formed element structure. You can use this class to build an element structure using a custom XML parser, or a parser for some other XML-like format.</source>
          <target state="translated">일반 요소 구조 빌더. 이 빌더는 start, data, end, comment 및 pi 메소드 호출 순서를 올바른 형식의 요소 구조로 변환합니다. 이 클래스를 사용하여 사용자 정의 XML 파서를 사용하거나 다른 XML 형식의 파서를 사용하여 요소 구조를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03071c1aabb41ff2ab0d6cc5a458c21d1dd11e1c" translate="yes" xml:space="preserve">
          <source>Generic implementation of the &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;&lt;code&gt;load_tests&lt;/code&gt; protocol for use in test packages. &lt;em&gt;pkg_dir&lt;/em&gt; is the root directory of the package; &lt;em&gt;loader&lt;/em&gt;, &lt;em&gt;standard_tests&lt;/em&gt;, and &lt;em&gt;pattern&lt;/em&gt; are the arguments expected by &lt;code&gt;load_tests&lt;/code&gt;. In simple cases, the test package&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt; can be the following:</source>
          <target state="translated">테스트 패키지에 사용하기위한 &lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; &lt;code&gt;load_tests&lt;/code&gt; 프로토콜 의 일반적인 구현 . &lt;em&gt;pkg_dir&lt;/em&gt; 은 패키지의 루트 디렉토리입니다. &lt;em&gt;loader&lt;/em&gt; , &lt;em&gt;standard_tests&lt;/em&gt; 및 &lt;em&gt;pattern&lt;/em&gt; 은 &lt;code&gt;load_tests&lt;/code&gt; 에 의해 예상되는 인수 입니다. 간단한 경우 테스트 패키지의 &lt;code&gt;__init__.py&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="293fd67a1e9b6b131f8a1081860292ba633bb726" translate="yes" xml:space="preserve">
          <source>Generic interface to &lt;code&gt;dbm&lt;/code&gt;-style databases.</source>
          <target state="translated">&lt;code&gt;dbm&lt;/code&gt; 스타일 데이터베이스에 대한 일반 인터페이스</target>
        </trans-unit>
        <trans-unit id="ccb8e82277924f89b0be2c9144f908b084a885ad" translate="yes" xml:space="preserve">
          <source>Generic type &lt;code&gt;IO[AnyStr]&lt;/code&gt; and its subclasses &lt;code&gt;TextIO(IO[str])&lt;/code&gt; and &lt;code&gt;BinaryIO(IO[bytes])&lt;/code&gt; represent the types of I/O streams such as returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반 유형 &lt;code&gt;IO[AnyStr]&lt;/code&gt; 및 해당 서브 클래스 &lt;code&gt;TextIO(IO[str])&lt;/code&gt; 및 &lt;code&gt;BinaryIO(IO[bytes])&lt;/code&gt; 는 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 의해 리턴되는 I / O 스트림의 유형을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="c44b1772cacf8e2b194f992804eb5f2912e3a9f7" translate="yes" xml:space="preserve">
          <source>Generic type &lt;code&gt;IO[AnyStr]&lt;/code&gt; and its subclasses &lt;code&gt;TextIO(IO[str])&lt;/code&gt; and &lt;code&gt;BinaryIO(IO[bytes])&lt;/code&gt; represent the types of I/O streams such as returned by &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;. These types are also in the &lt;code&gt;typing.io&lt;/code&gt; namespace.</source>
          <target state="translated">Generic type &lt;code&gt;IO[AnyStr]&lt;/code&gt; and its subclasses &lt;code&gt;TextIO(IO[str])&lt;/code&gt; and &lt;code&gt;BinaryIO(IO[bytes])&lt;/code&gt; represent the types of I/O streams such as returned by &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;. These types are also in the &lt;code&gt;typing.io&lt;/code&gt; namespace.</target>
        </trans-unit>
        <trans-unit id="a3b7c04b18cd92e8bd3dbd66ec9303b0a0d542df" translate="yes" xml:space="preserve">
          <source>Generic version of &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;. Useful for annotating return types. To annotate arguments it is preferred to use an abstract collection type such as &lt;a href=&quot;#typing.Sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#typing.Iterable&quot;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; 의&lt;/a&gt; 일반 버전 . 반환 유형에 주석을 달 때 유용합니다. 인수에 주석을 &lt;a href=&quot;#typing.Iterable&quot;&gt; &lt;code&gt;Iterable&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#typing.Sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt; 또는 Iterable 과 같은 추상 컬렉션 유형을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="80dadd86173d0ff3979257793d4e45beb238b6a2" translate="yes" xml:space="preserve">
          <source>Generics</source>
          <target state="translated">Generics</target>
        </trans-unit>
        <trans-unit id="0945c1dff6718f21aa4e4deeaab1b0eddc4c4cdc" translate="yes" xml:space="preserve">
          <source>Generics can be parameterized by using a new factory available in typing called &lt;a href=&quot;#typing.TypeVar&quot;&gt;&lt;code&gt;TypeVar&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#typing.TypeVar&quot;&gt; &lt;code&gt;TypeVar&lt;/code&gt; &lt;/a&gt; 라는 타이핑에서 사용 가능한 새로운 팩토리를 사용하여 제네릭을 매개 변수화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1f99913680f7b744ab9431fbca519442e0fa1092" translate="yes" xml:space="preserve">
          <source>Geometric mean of data.</source>
          <target state="translated">데이터의 기하 평균.</target>
        </trans-unit>
        <trans-unit id="da91388c72d3e31da19dcd85c97374197748485d" translate="yes" xml:space="preserve">
          <source>German</source>
          <target state="translated">German</target>
        </trans-unit>
        <trans-unit id="5e3619ade03466db61cd043463581c6cfbb2ff29" translate="yes" xml:space="preserve">
          <source>Get HTTP headers</source>
          <target state="translated">HTTP 헤더 가져 오기</target>
        </trans-unit>
        <trans-unit id="f09a08050952ccfb3acada1aca77f75efbcddc68" translate="yes" xml:space="preserve">
          <source>Get Mac OS version information and return it as tuple &lt;code&gt;(release, versioninfo,
machine)&lt;/code&gt; with &lt;em&gt;versioninfo&lt;/em&gt; being a tuple &lt;code&gt;(version, dev_stage,
non_release_version)&lt;/code&gt;.</source>
          <target state="translated">맥 OS 버전 정보를 확인하고 튜플로 반환 &lt;code&gt;(release, versioninfo, machine)&lt;/code&gt; 와 &lt;em&gt;VERSIONINFO&lt;/em&gt; 튜플 인 &lt;code&gt;(version, dev_stage, non_release_version)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="925b109ddf15351d05a8dddb0cb2a1abe8a6314b" translate="yes" xml:space="preserve">
          <source>Get a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; object for &lt;em&gt;module_or_name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;module_or_name&lt;/em&gt; 의 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;로더&lt;/a&gt; 객체를 &lt;em&gt;가져옵니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="86045d27310009e0e6759608040d267e5fd2a923" translate="yes" xml:space="preserve">
          <source>Get a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; object for &lt;em&gt;module_or_name&lt;/em&gt;.</source>
          <target state="translated">Get a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; object for &lt;em&gt;module_or_name&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="72d86f39c38483c75cc09653c3ddc241de805a8b" translate="yes" xml:space="preserve">
          <source>Get a character, returning a string instead of an integer, as &lt;a href=&quot;#curses.window.getch&quot;&gt;&lt;code&gt;getch()&lt;/code&gt;&lt;/a&gt; does. Function keys, keypad keys and other special keys return a multibyte string containing the key name. In no-delay mode, raise an exception if there is no input.</source>
          <target state="translated">&lt;a href=&quot;#curses.window.getch&quot;&gt; &lt;code&gt;getch()&lt;/code&gt; &lt;/a&gt; 와 같이 정수 대신 문자열을 반환하여 문자를 가져 옵니다 . 기능 키, 키패드 키 및 기타 특수 키는 키 이름이 포함 된 멀티 바이트 문자열을 반환합니다. 지연 없음 모드에서 입력이 없으면 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6900a0c6cf3e15082dad7841462c7795b199570e" translate="yes" xml:space="preserve">
          <source>Get a character. Note that the integer returned does &lt;em&gt;not&lt;/em&gt; have to be in ASCII range: function keys, keypad keys and so on are represented by numbers higher than 255. In no-delay mode, return &lt;code&gt;-1&lt;/code&gt; if there is no input, otherwise wait until a key is pressed.</source>
          <target state="translated">캐릭터를 얻으십시오. 반환 된 정수는 ASCII 범위 일 필요 는 &lt;em&gt;없습니다&lt;/em&gt; . 기능 키, 키패드 키 등은 255보다 큰 숫자로 표시됩니다. 지연없는 모드에서는 입력이 없으면 &lt;code&gt;-1&lt;/code&gt; 을 반환하고 , 그렇지 않으면 키가 될 때까지 기다립니다 를 누릅니다.</target>
        </trans-unit>
        <trans-unit id="93b9156a4fc2066890c20b75a92de09ebab9456c" translate="yes" xml:space="preserve">
          <source>Get a child process watcher object.</source>
          <target state="translated">자식 프로세스 감시자 개체를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="39098f6d062afd1a16e563ea56384bfbee189021" translate="yes" xml:space="preserve">
          <source>Get a description for a single group &lt;em&gt;group&lt;/em&gt;. If more than one group matches (if &amp;lsquo;group&amp;rsquo; is a real wildmat string), return the first match. If no group matches, return an empty string.</source>
          <target state="translated">단일 그룹 &lt;em&gt;그룹에&lt;/em&gt; 대한 설명을 가져옵니다 . 둘 이상의 그룹이 일치하면 ( 'group'이 실제 와일드 매트 문자열 인 경우) 첫 번째 일치를 리턴하십시오. 일치하는 그룹이 없으면 빈 문자열을 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="6df154c15550831d92d53462e0064abdf70ba6e4" translate="yes" xml:space="preserve">
          <source>Get a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent a date in a locale-specific era-based way.</source>
          <target state="translated">로케일 별 시대 기반 방식으로 날짜를 나타내는 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="21a8f80cea6f42070d455f9a01f487c95110be35" translate="yes" xml:space="preserve">
          <source>Get a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent a time in a locale-specific era-based way.</source>
          <target state="translated">로케일 별 시대 기반 방식으로 시간을 나타내는 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="36cacd63f5269b7f2289c301e7939d05fc6f8a5c" translate="yes" xml:space="preserve">
          <source>Get a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent date and time in a locale-specific era-based way.</source>
          <target state="translated">로케일 별 시대 기반 방식으로 날짜 및 시간을 나타내는 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7d7dfbaa516474dd4c7e1837620af5c2c9270f58" translate="yes" xml:space="preserve">
          <source>Get a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent time in the am/pm format.</source>
          <target state="translated">시간을 am / pm 형식으로 나타내는 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열을 가져 옵니다.</target>
        </trans-unit>
        <trans-unit id="779b4604d3285273845eec25f955cd191148bbb6" translate="yes" xml:space="preserve">
          <source>Get a list of enabled ciphers. The list is in order of cipher priority. See &lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt;&lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">활성화 된 암호 목록을 가져옵니다. 이 목록은 암호 우선 순위입니다. &lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt; &lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e7ce190d87e4a26bc8ee72ce60dccb04d75c9a2" translate="yes" xml:space="preserve">
          <source>Get a list of frame records for a frame and all outer frames. These frames represent the calls that lead to the creation of &lt;em&gt;frame&lt;/em&gt;. The first entry in the returned list represents &lt;em&gt;frame&lt;/em&gt;; the last entry represents the outermost call on &lt;em&gt;frame&lt;/em&gt;&amp;rsquo;s stack.</source>
          <target state="translated">프레임 및 모든 외부 프레임에 대한 프레임 레코드 목록을 가져옵니다. 이 프레임의 창조로 이어질 호출 대표 &lt;em&gt;프레임을&lt;/em&gt; . 반환 된 목록의 첫 번째 항목은 &lt;em&gt;프레임을&lt;/em&gt; 나타냅니다 . 마지막 항목은 &lt;em&gt;프레임&lt;/em&gt; 스택 의 가장 바깥 쪽 호출을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="7f4c093b2f65ea31077045cdbdc6cb56aae52fea" translate="yes" xml:space="preserve">
          <source>Get a list of frame records for a traceback&amp;rsquo;s frame and all inner frames. These frames represent calls made as a consequence of &lt;em&gt;frame&lt;/em&gt;. The first entry in the list represents &lt;em&gt;traceback&lt;/em&gt;; the last entry represents where the exception was raised.</source>
          <target state="translated">역 추적 프레임과 모든 내부 프레임에 대한 프레임 레코드 목록을 가져옵니다. 이 프레임의 결과로 만들어 호출 대표 &lt;em&gt;프레임을&lt;/em&gt; . 목록의 첫 번째 항목은 &lt;em&gt;역 추적을&lt;/em&gt; 나타냅니다 . 마지막 항목은 예외가 발생한 위치를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f1cb38ae88663b4d14fae92b17af5d048a78c197" translate="yes" xml:space="preserve">
          <source>Get a list of loaded &amp;ldquo;certification authority&amp;rdquo; (CA) certificates. If the &lt;code&gt;binary_form&lt;/code&gt; parameter is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; each list entry is a dict like the output of &lt;a href=&quot;#ssl.SSLSocket.getpeercert&quot;&gt;&lt;code&gt;SSLSocket.getpeercert()&lt;/code&gt;&lt;/a&gt;. Otherwise the method returns a list of DER-encoded certificates. The returned list does not contain certificates from &lt;em&gt;capath&lt;/em&gt; unless a certificate was requested and loaded by a SSL connection.</source>
          <target state="translated">로드 된 &quot;인증 기관&quot;(CA) 인증서 목록을 가져옵니다. &lt;code&gt;binary_form&lt;/code&gt; 매개 변수가 &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt; 이면 각 목록 항목은 &lt;a href=&quot;#ssl.SSLSocket.getpeercert&quot;&gt; &lt;code&gt;SSLSocket.getpeercert()&lt;/code&gt; &lt;/a&gt; 의 출력과 같은 dict 입니다. 그렇지 않으면이 메소드는 DER 인코딩 된 인증서 목록을 리턴합니다. SSL 연결에 의해 인증서가 요청되고로드되지 않은 경우, 리턴 된 목록에는 &lt;em&gt;capath&lt;/em&gt; 의 인증서가 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="4d5e35a9ec661b8b336617dd56388e3578f9bcaf" translate="yes" xml:space="preserve">
          <source>Get a list of records for a frame and all higher (calling) and lower frames, and the size of the higher part.</source>
          <target state="translated">프레임 및 모든 상위 (호출) 및 하위 프레임에 대한 레코드 목록과 상위 부분의 크기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="b607418b2f9f5fc800736360b9d80cde873b574c" translate="yes" xml:space="preserve">
          <source>Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question.</source>
          <target state="translated">예 / 아니오 질문에 대한 긍정적 인 응답을 인식하기 위해 정규식 함수와 함께 사용할 수있는 정규식을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="79a142b2d506f97b9fb5762c6cdf9c0302dc08af" translate="yes" xml:space="preserve">
          <source>Get a regular expression that can be used with the regex(3) function to recognize a negative response to a yes/no question.</source>
          <target state="translated">예 / 아니오 질문에 대한 부정적인 응답을 인식하기 위해 regex (3) 함수와 함께 사용할 수있는 정규식을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d3eeac88da2cc27ce1e1ed87177dc3dfa221e00e" translate="yes" xml:space="preserve">
          <source>Get a representation of up to 100 values used to represent the values 0 to 99.</source>
          <target state="translated">0에서 99까지의 값을 나타내는 데 사용되는 최대 100 개의 값을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="64b3b1f3e933b44a31fc73a92cc1c78260a70a72" translate="yes" xml:space="preserve">
          <source>Get a resource from a package.</source>
          <target state="translated">패키지에서 리소스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="816aa1ed94b1502f90d6599cc6c0d80af36297e3" translate="yes" xml:space="preserve">
          <source>Get a set containing all the valid keys for IANA time zones available anywhere on the time zone path. This is recalculated on every call to the function.</source>
          <target state="translated">Get a set containing all the valid keys for IANA time zones available anywhere on the time zone path. This is recalculated on every call to the function.</target>
        </trans-unit>
        <trans-unit id="7fe7caecfd8320cedfe667b5784ba16646cca4d6" translate="yes" xml:space="preserve">
          <source>Get a string that can be used as a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent a date in a locale-specific way.</source>
          <target state="translated">로케일 별 방식으로 날짜를 나타내는 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열로 사용할 수있는 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="311be40c8088b83ef5389b49e19888ce42e3323e" translate="yes" xml:space="preserve">
          <source>Get a string that can be used as a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent a time in a locale-specific way.</source>
          <target state="translated">로케일 별 방식으로 시간을 나타 내기 위해 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열로 사용할 수있는 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2716d1bcbc1da0920dc17276d3e242e7949d040e" translate="yes" xml:space="preserve">
          <source>Get a string that can be used as a format string for &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt; to represent date and time in a locale-specific way.</source>
          <target state="translated">로케일 별 방식으로 날짜 및 시간을 표시하기 위해 &lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 의 형식 문자열로 사용할 수있는 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c22c4986b7973b0bdf63cc50710f9ea10065ba7b" translate="yes" xml:space="preserve">
          <source>Get a string that represents the era used in the current locale.</source>
          <target state="translated">현재 로케일에 사용 된 시대를 나타내는 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8ecbeb2948a064a1d000fcce4ea7595bf126a0a3" translate="yes" xml:space="preserve">
          <source>Get a string with the name of the character encoding used in the selected locale.</source>
          <target state="translated">선택한 로케일에 사용 된 문자 인코딩의 이름으로 문자열을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="3e20e2ff8c2d677c284ec272725f5d83c5c4213a" translate="yes" xml:space="preserve">
          <source>Get a wide character. Return a character for most keys, or an integer for function keys, keypad keys, and other special keys. In no-delay mode, raise an exception if there is no input.</source>
          <target state="translated">넓은 캐릭터를 얻으십시오. 대부분의 키의 문자 또는 기능 키, 키패드 키 및 기타 특수 키의 정수를 반환합니다. 지연 없음 모드에서 입력이 없으면 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="f7d2c3adbad9eae4cd085407b57af1cda7e455a0" translate="yes" xml:space="preserve">
          <source>Get additional version information from the Windows Registry and return a tuple &lt;code&gt;(release, version, csd, ptype)&lt;/code&gt; referring to OS release, version number, CSD level (service pack) and OS type (multi/single processor).</source>
          <target state="translated">Windows 레지스트리에서 추가 버전 정보를 얻고 OS 릴리스, 버전 번호, CSD 레벨 (서비스 팩) 및 OS 유형 (멀티 / 단일 프로세서)을 참조 하는 튜플 &lt;code&gt;(release, version, csd, ptype)&lt;/code&gt; 반환하십시오 .</target>
        </trans-unit>
        <trans-unit id="9deb349b97a97850ba9998a4ae913d86c706f166" translate="yes" xml:space="preserve">
          <source>Get an &lt;em&gt;option&lt;/em&gt; value for the named &lt;em&gt;section&lt;/em&gt;. If &lt;em&gt;vars&lt;/em&gt; is provided, it must be a dictionary. The &lt;em&gt;option&lt;/em&gt; is looked up in &lt;em&gt;vars&lt;/em&gt; (if provided), &lt;em&gt;section&lt;/em&gt;, and in &lt;em&gt;DEFAULTSECT&lt;/em&gt; in that order. If the key is not found and &lt;em&gt;fallback&lt;/em&gt; is provided, it is used as a fallback value. &lt;code&gt;None&lt;/code&gt; can be provided as a &lt;em&gt;fallback&lt;/em&gt; value.</source>
          <target state="translated">가져 오기 &lt;em&gt;옵션&lt;/em&gt; 명명 된 가치 &lt;em&gt;섹션을&lt;/em&gt; . 경우 &lt;em&gt;바르가&lt;/em&gt; 제공되고, 그것은 사전 있어야합니다. &lt;em&gt;옵션&lt;/em&gt; 에서 조회됩니다 &lt;em&gt;바르&lt;/em&gt; (있는 경우), &lt;em&gt;섹션&lt;/em&gt; , 그리고에 &lt;em&gt;DEFAULTSECT&lt;/em&gt; 순서대로. 키를 찾을 수없고 &lt;em&gt;폴 백이&lt;/em&gt; 제공되면 폴백 값으로 사용됩니다. &lt;code&gt;None&lt;/code&gt; A와 제공 할 수없는 &lt;em&gt;대체&lt;/em&gt; 값.</target>
        </trans-unit>
        <trans-unit id="08f3c39de28bbb234f03726aa9b5ed3ded2bd201" translate="yes" xml:space="preserve">
          <source>Get an attribute, raising &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; &lt;/a&gt; 가 발생 하면 &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt; &lt;code&gt;unittest.SkipTest&lt;/code&gt; 를&lt;/a&gt; 발생시키는 속성을 가져 옵니다 .</target>
        </trans-unit>
        <trans-unit id="01ae41efe44d095c763c4c0a0f3afb34f4d7e286" translate="yes" xml:space="preserve">
          <source>Get an event loop instance (current or via the policy).</source>
          <target state="translated">현재 또는 정책을 통해 이벤트 루프 인스턴스를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="09e57fb7d36421267708207c1d86d1574ffc7414" translate="yes" xml:space="preserve">
          <source>Get channel binding data for current connection, as a bytes object. Returns &lt;code&gt;None&lt;/code&gt; if not connected or the handshake has not been completed.</source>
          <target state="translated">현재 연결에 대한 채널 바인딩 데이터를 bytes 객체로 가져옵니다. 연결되지 않았거나 핸드 셰이크가 완료되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="3f64df69cb849e00861c89ea45d6eb10e222793a" translate="yes" xml:space="preserve">
          <source>Get current state of a coroutine object. The function is intended to be used with coroutine objects created by &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; functions, but will accept any coroutine-like object that has &lt;code&gt;cr_running&lt;/code&gt; and &lt;code&gt;cr_frame&lt;/code&gt; attributes.</source>
          <target state="translated">코 루틴 오브젝트의 현재 상태를 가져옵니다. 이 함수는 &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#async-def&quot;&gt; &lt;code&gt;async def&lt;/code&gt; &lt;/a&gt; 함수에 의해 생성 된 코 루틴 객체와 함께 사용 되지만 &lt;code&gt;cr_running&lt;/code&gt; 및 &lt;code&gt;cr_frame&lt;/code&gt; 속성 을 가진 코 루틴 유사 객체를 받아들 입니다.</target>
        </trans-unit>
        <trans-unit id="a31ef43f00864a67bdb27ec6fcdf78ac1a4e5184" translate="yes" xml:space="preserve">
          <source>Get current state of a coroutine object. The function is intended to be used with coroutine objects created by &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-def&quot;&gt;&lt;code&gt;async def&lt;/code&gt;&lt;/a&gt; functions, but will accept any coroutine-like object that has &lt;code&gt;cr_running&lt;/code&gt; and &lt;code&gt;cr_frame&lt;/code&gt; attributes.</source>
          <target state="translated">Get current state of a coroutine object. The function is intended to be used with coroutine objects created by &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#async-def&quot;&gt; &lt;code&gt;async def&lt;/code&gt; &lt;/a&gt; functions, but will accept any coroutine-like object that has &lt;code&gt;cr_running&lt;/code&gt; and &lt;code&gt;cr_frame&lt;/code&gt; attributes.</target>
        </trans-unit>
        <trans-unit id="3bb4f5a84c2768dc4799d08ccb39e5edf77da68e" translate="yes" xml:space="preserve">
          <source>Get current state of a generator-iterator.</source>
          <target state="translated">생성기-반복기의 현재 상태를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="d23ebf469da242376e8f1406637cf81a48764515" translate="yes" xml:space="preserve">
          <source>Get information about a frame or traceback object. A &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;Traceback(filename, lineno, function, code_context, index)&lt;/code&gt; is returned.</source>
          <target state="translated">프레임 또는 트레이스 백 객체에 대한 정보를 얻습니다. &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;라는 튜플 &lt;/a&gt; &lt;code&gt;Traceback(filename, lineno, function, code_context, index)&lt;/code&gt; 반환된다.</target>
        </trans-unit>
        <trans-unit id="0e91add3c9d4e628ec70e64261910715aafe5de9" translate="yes" xml:space="preserve">
          <source>Get information about a frame or traceback object. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;Traceback(filename, lineno, function, code_context, index)&lt;/code&gt; is returned.</source>
          <target state="translated">Get information about a frame or traceback object. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; &lt;code&gt;Traceback(filename, lineno, function, code_context, index)&lt;/code&gt; is returned.</target>
        </trans-unit>
        <trans-unit id="b5c10f03a20464d9e4021f1c2f9a0a198366fccb" translate="yes" xml:space="preserve">
          <source>Get information about arguments passed into a particular frame. A &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;ArgInfo(args, varargs, keywords, locals)&lt;/code&gt; is returned. &lt;em&gt;args&lt;/em&gt; is a list of the argument names. &lt;em&gt;varargs&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; are the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; arguments or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;locals&lt;/em&gt; is the locals dictionary of the given frame.</source>
          <target state="translated">특정 프레임으로 전달 된 인수에 대한 정보를 얻습니다. &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;라는 이름의 튜플 &lt;/a&gt; &lt;code&gt;ArgInfo(args, varargs, keywords, locals)&lt;/code&gt; 반환됩니다. &lt;em&gt;args&lt;/em&gt; 는 인수 이름의 목록입니다. &lt;em&gt;varargs&lt;/em&gt; 및 &lt;em&gt;키워드&lt;/em&gt; 는 &lt;code&gt;*&lt;/code&gt; 및 &lt;code&gt;**&lt;/code&gt; 인수 의 이름 또는 &lt;code&gt;None&lt;/code&gt; 입니다. &lt;em&gt;locals&lt;/em&gt; 는 주어진 프레임의 지역 사전입니다.</target>
        </trans-unit>
        <trans-unit id="5fae3be01c8de3bc75535bdca2bba2a57914027e" translate="yes" xml:space="preserve">
          <source>Get information about arguments passed into a particular frame. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;ArgInfo(args, varargs, keywords, locals)&lt;/code&gt; is returned. &lt;em&gt;args&lt;/em&gt; is a list of the argument names. &lt;em&gt;varargs&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; are the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; arguments or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;locals&lt;/em&gt; is the locals dictionary of the given frame.</source>
          <target state="translated">Get information about arguments passed into a particular frame. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; &lt;code&gt;ArgInfo(args, varargs, keywords, locals)&lt;/code&gt; is returned. &lt;em&gt;args&lt;/em&gt; is a list of the argument names. &lt;em&gt;varargs&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; are the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; arguments or &lt;code&gt;None&lt;/code&gt; . &lt;em&gt;locals&lt;/em&gt; is the locals dictionary of the given frame.</target>
        </trans-unit>
        <trans-unit id="82b4c672b45ae2ae6c3a3440d2312eaaed338213" translate="yes" xml:space="preserve">
          <source>Get information on the specified clock as a namespace object. Supported clock names and the corresponding functions to read their value are:</source>
          <target state="translated">지정된 시계에 대한 정보를 네임 스페이스 객체로 가져옵니다. 지원되는 시계 이름과 해당 값을 읽는 해당 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0b8c4ad525dab4788364bb3a3c2c58bb4651d6cd" translate="yes" xml:space="preserve">
          <source>Get line &lt;em&gt;lineno&lt;/em&gt; from file named &lt;em&gt;filename&lt;/em&gt;. This function will never raise an exception &amp;mdash; it will return &lt;code&gt;''&lt;/code&gt; on errors (the terminating newline character will be included for lines that are found).</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt; 이라는 &lt;em&gt;파일&lt;/em&gt; 에서 &lt;em&gt;lineno&lt;/em&gt; 라인을 가져 &lt;em&gt;옵니다&lt;/em&gt; . 이 함수는 예외를 발생시키지 않으며 오류시 &lt;code&gt;''&lt;/code&gt; 를 반환 합니다 (발견 된 줄에는 종료 줄 바꿈 문자가 포함됨).</target>
        </trans-unit>
        <trans-unit id="56abfe685ae982167bb48299cfb9366af1b3abe6" translate="yes" xml:space="preserve">
          <source>Get mailbox status. The result is a tuple of 2 integers: &lt;code&gt;(message count,
mailbox size)&lt;/code&gt;.</source>
          <target state="translated">사서함 상태를 가져옵니다. 결과는 &lt;code&gt;(message count, mailbox size)&lt;/code&gt; 의 두 정수 튜플입니다 .</target>
        </trans-unit>
        <trans-unit id="7725098627fdeaae6f27cbee4c8b4b5dc41d897e" translate="yes" xml:space="preserve">
          <source>Get or set the current default isolation level. &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; for autocommit mode or one of &amp;ldquo;DEFERRED&amp;rdquo;, &amp;ldquo;IMMEDIATE&amp;rdquo; or &amp;ldquo;EXCLUSIVE&amp;rdquo;. See section &lt;a href=&quot;#sqlite3-controlling-transactions&quot;&gt;Controlling Transactions&lt;/a&gt; for a more detailed explanation.</source>
          <target state="translated">현재 기본 격리 수준을 가져 오거나 설정하십시오. 자동 커밋 모드 또는 &quot;DEFERRED&quot;, &quot;IMMEDIATE&quot;또는 &quot;EXCLUSIVE&quot;중 하나에 해당 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; . 보다 자세한 설명은 &lt;a href=&quot;#sqlite3-controlling-transactions&quot;&gt;거래 관리&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3bc03417d6cbea7e3ecb6629fad7db83a931b0a6" translate="yes" xml:space="preserve">
          <source>Get program scheduling priority. The value &lt;em&gt;which&lt;/em&gt; is one of &lt;a href=&quot;#os.PRIO_PROCESS&quot;&gt;&lt;code&gt;PRIO_PROCESS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.PRIO_PGRP&quot;&gt;&lt;code&gt;PRIO_PGRP&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#os.PRIO_USER&quot;&gt;&lt;code&gt;PRIO_USER&lt;/code&gt;&lt;/a&gt;, and &lt;em&gt;who&lt;/em&gt; is interpreted relative to &lt;em&gt;which&lt;/em&gt; (a process identifier for &lt;a href=&quot;#os.PRIO_PROCESS&quot;&gt;&lt;code&gt;PRIO_PROCESS&lt;/code&gt;&lt;/a&gt;, process group identifier for &lt;a href=&quot;#os.PRIO_PGRP&quot;&gt;&lt;code&gt;PRIO_PGRP&lt;/code&gt;&lt;/a&gt;, and a user ID for &lt;a href=&quot;#os.PRIO_USER&quot;&gt;&lt;code&gt;PRIO_USER&lt;/code&gt;&lt;/a&gt;). A zero value for &lt;em&gt;who&lt;/em&gt; denotes (respectively) the calling process, the process group of the calling process, or the real user ID of the calling process.</source>
          <target state="translated">프로그램 예약 우선 순위를 가져옵니다. 값 중 하나 &lt;a href=&quot;#os.PRIO_PROCESS&quot;&gt; &lt;code&gt;PRIO_PROCESS&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.PRIO_PGRP&quot;&gt; &lt;code&gt;PRIO_PGRP&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#os.PRIO_USER&quot;&gt; &lt;code&gt;PRIO_USER&lt;/code&gt; &lt;/a&gt; 및 상대 해석 &lt;em&gt;하는&lt;/em&gt; (위한 프로세스 식별자 &lt;a href=&quot;#os.PRIO_PROCESS&quot;&gt; &lt;code&gt;PRIO_PROCESS&lt;/code&gt; &lt;/a&gt; 위한 프로세스 그룹 식별자 &lt;a href=&quot;#os.PRIO_PGRP&quot;&gt; &lt;code&gt;PRIO_PGRP&lt;/code&gt; &lt;/a&gt; 및위한 사용자 ID &lt;a href=&quot;#os.PRIO_USER&quot;&gt; &lt;code&gt;PRIO_USER&lt;/code&gt; &lt;/a&gt; ). 호출 프로세스, 호출 프로세스의 프로세스 그룹 또는 호출 프로세스의 실제 사용자 ID를 (각각) 나타내는 &lt;em&gt;누가&lt;/em&gt; 값이 0 입니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5d02c37308a4ca42011190869a6abe80a460bff7" translate="yes" xml:space="preserve">
          <source>Get source code segment of the &lt;em&gt;source&lt;/em&gt; that generated &lt;em&gt;node&lt;/em&gt;. If some location information (&lt;code&gt;lineno&lt;/code&gt;, &lt;code&gt;end_lineno&lt;/code&gt;, &lt;code&gt;col_offset&lt;/code&gt;, or &lt;code&gt;end_col_offset&lt;/code&gt;) is missing, return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;노드&lt;/em&gt; 를 생성 한 &lt;em&gt;소스&lt;/em&gt; 의 소스 코드 세그먼트를 가져 &lt;em&gt;옵니다&lt;/em&gt; . 일부 위치 정보 ( &lt;code&gt;lineno&lt;/code&gt; , &lt;code&gt;end_lineno&lt;/code&gt; , &lt;code&gt;col_offset&lt;/code&gt; 또는 &lt;code&gt;end_col_offset&lt;/code&gt; )가 없으면 &lt;code&gt;None&lt;/code&gt; 을 반환하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d32ba11b8ed874a1d107cf2469497841bdeac2d" translate="yes" xml:space="preserve">
          <source>Get statistics about quantities of loaded X.509 certificates, count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary.</source>
          <target state="translated">로드 된 X.509 인증서의 수량, CA 인증서로 플래그 된 X.509 인증서 수 및 인증서 해지 목록을 사전으로 통계를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="5cca3416b42404100e335aaac411014a84493036" translate="yes" xml:space="preserve">
          <source>Get statistics about the SSL sessions created or managed by this context. A dictionary is returned which maps the names of each &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_sess_number.html&quot;&gt;piece of information&lt;/a&gt; to their numeric values. For example, here is the total number of hits and misses in the session cache since the context was created:</source>
          <target state="translated">이 컨텍스트에서 작성하거나 관리하는 SSL 세션에 대한 통계를 가져옵니다. 각 &lt;a href=&quot;https://www.openssl.org/docs/man1.1.0/ssl/SSL_CTX_sess_number.html&quot;&gt;정보&lt;/a&gt; 의 이름을 숫자 값으로 매핑하는 사전이 반환 됩니다. 예를 들어, 컨텍스트가 작성된 이후 세션 캐시에서 총 히트 및 누락 수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0034d7cf901bfe3dc98a8e569a5fa6dfdc2d9a7f" translate="yes" xml:space="preserve">
          <source>Get statistics as a sorted list of &lt;a href=&quot;#tracemalloc.Statistic&quot;&gt;&lt;code&gt;Statistic&lt;/code&gt;&lt;/a&gt; instances grouped by &lt;em&gt;key_type&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;key_type&lt;/em&gt; 별로 그룹화 된 &lt;a href=&quot;#tracemalloc.Statistic&quot;&gt; &lt;code&gt;Statistic&lt;/code&gt; &lt;/a&gt; 인스턴스 의 정렬 된 목록으로 통계 를 &lt;em&gt;가져옵니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="71a0d0c6b96d9e27bc9d9b0133075d626bb1a8a5" translate="yes" xml:space="preserve">
          <source>Get the &amp;ldquo;inheritable&amp;rdquo; flag of the specified file descriptor (a boolean).</source>
          <target state="translated">지정된 파일 디스크립터 (부울)의 &quot;상속 가능한&quot;플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="6da89fa1ba2bf713a2515d037096219c1c84b16e" translate="yes" xml:space="preserve">
          <source>Get the &amp;ldquo;inheritable&amp;rdquo; flag of the specified handle (a boolean).</source>
          <target state="translated">지정된 핸들 (부울)의 &quot;상속 가능한&quot;플래그를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="99a204199f8ab11de39c4cefe33c73816977b3b5" translate="yes" xml:space="preserve">
          <source>Get the &lt;a href=&quot;os#fd-inheritance&quot;&gt;inheritable flag&lt;/a&gt; of the socket&amp;rsquo;s file descriptor or socket&amp;rsquo;s handle: &lt;code&gt;True&lt;/code&gt; if the socket can be inherited in child processes, &lt;code&gt;False&lt;/code&gt; if it cannot.</source>
          <target state="translated">소켓의 파일 기술자 또는 소켓 핸들 의 &lt;a href=&quot;os#fd-inheritance&quot;&gt;상속 가능한 플래그&lt;/a&gt; 를 가져옵니다. 소켓이 자식 프로세스에서 상속 될 수 있으면 &lt;code&gt;True&lt;/code&gt; , &lt;code&gt;False&lt;/code&gt; 않으면 False 입니다.</target>
        </trans-unit>
        <trans-unit id="a11594e7f4440dd22817c1d42fb3dfdf5a8fae93" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;ACL&lt;/code&gt;s for &lt;em&gt;mailbox&lt;/em&gt;. The method is non-standard, but is supported by the &lt;code&gt;Cyrus&lt;/code&gt; server.</source>
          <target state="translated">가져 오기 &lt;code&gt;ACL&lt;/code&gt; 에 대한들 &lt;em&gt;사서함&lt;/em&gt; . 이 방법은 비표준이지만 &lt;code&gt;Cyrus&lt;/code&gt; 서버에서 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="62ed1935a345fb89b1f42290845822923a2d4e23" translate="yes" xml:space="preserve">
          <source>Get the &lt;code&gt;quota&lt;/code&gt;&lt;em&gt;root&lt;/em&gt;&amp;rsquo;s resource usage and limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087.</source>
          <target state="translated">&lt;code&gt;quota&lt;/code&gt; &lt;em&gt;루트&lt;/em&gt; 의 리소스 사용량 및 한도를 가져 옵니다 . 이 방법은 rfc2087에 정의 된 IMAP4 QUOTA 확장의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="3a961039695bf6ec70838cd0a62ba649bc21c194" translate="yes" xml:space="preserve">
          <source>Get the &lt;em&gt;high&lt;/em&gt; and &lt;em&gt;low&lt;/em&gt; watermarks for write flow control. Return a tuple &lt;code&gt;(low, high)&lt;/code&gt; where &lt;em&gt;low&lt;/em&gt; and &lt;em&gt;high&lt;/em&gt; are positive number of bytes.</source>
          <target state="translated">가져 오기 &lt;em&gt;높은&lt;/em&gt; 및 &lt;em&gt;낮은&lt;/em&gt; 쓰기 흐름 제어를위한 워터 마크를. 튜플 반환 &lt;code&gt;(low, high)&lt;/code&gt; &lt;em&gt;낮은&lt;/em&gt; 및 &lt;em&gt;높은&lt;/em&gt; 바이트의 양수됩니다.</target>
        </trans-unit>
        <trans-unit id="950213a057a7b0f3c148a395b7d76a1a57669d58" translate="yes" xml:space="preserve">
          <source>Get the abbreviated name of the n-th day of the week.</source>
          <target state="translated">요일 n 번째 날의 약칭을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2606b866e21df1e456ea346f3ba77c930e8e772e" translate="yes" xml:space="preserve">
          <source>Get the abbreviated name of the n-th month.</source>
          <target state="translated">n 번째 달의 약칭을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="cd047d70fed736913d2d4ddb822753146b7e0c61" translate="yes" xml:space="preserve">
          <source>Get the beginning or ending index of the completion scope. These indexes are the &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;end&lt;/em&gt; arguments passed to the &lt;code&gt;rl_attempted_completion_function&lt;/code&gt; callback of the underlying library.</source>
          <target state="translated">완료 범위의 시작 또는 끝 색인을 가져옵니다. 이 인덱스는 기본 라이브러리 의 &lt;code&gt;rl_attempted_completion_function&lt;/code&gt; 콜백에 전달 된 &lt;em&gt;시작&lt;/em&gt; 및 &lt;em&gt;끝&lt;/em&gt; 인수 입니다.</target>
        </trans-unit>
        <trans-unit id="2a36e6bb528c0dc3b81202199caa718a57570eb8" translate="yes" xml:space="preserve">
          <source>Get the blocking mode of the file descriptor: &lt;code&gt;False&lt;/code&gt; if the &lt;a href=&quot;#os.O_NONBLOCK&quot;&gt;&lt;code&gt;O_NONBLOCK&lt;/code&gt;&lt;/a&gt; flag is set, &lt;code&gt;True&lt;/code&gt; if the flag is cleared.</source>
          <target state="translated">파일 기술자의 블록 모드를 가져옵니다 : &lt;code&gt;False&lt;/code&gt; 경우 &lt;a href=&quot;#os.O_NONBLOCK&quot;&gt; &lt;code&gt;O_NONBLOCK&lt;/code&gt; 의&lt;/a&gt; 플래그가 설정되어 &lt;code&gt;True&lt;/code&gt; 플래그을 취소합니다.</target>
        </trans-unit>
        <trans-unit id="8d75e1fa5d5d51e274fc8468c8ced8caf9883e2e" translate="yes" xml:space="preserve">
          <source>Get the byte stream for this input source.</source>
          <target state="translated">이 입력 소스의 바이트 스트림을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="2dd1f4352605a34e9229c97f7a82c7f75c343dc1" translate="yes" xml:space="preserve">
          <source>Get the character encoding of this InputSource.</source>
          <target state="translated">이 InputSource의 문자 인코딩을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="95de35f00d3f32900bfe5c66c4ea0aaa669628f3" translate="yes" xml:space="preserve">
          <source>Get the character stream for this input source.</source>
          <target state="translated">이 입력 소스의 문자 스트림을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="18faa6d92447d0677d396db1eec4f83e30d32ce8" translate="yes" xml:space="preserve">
          <source>Get the completer function, or &lt;code&gt;None&lt;/code&gt; if no completer function has been set.</source>
          <target state="translated">완료 기능을 얻거나 완료 기능이 설정되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 옵니다 .</target>
        </trans-unit>
        <trans-unit id="c9552545be668379a153f9b3e0012ad6492851ac" translate="yes" xml:space="preserve">
          <source>Get the currency symbol, preceded by &amp;ldquo;-&amp;rdquo; if the symbol should appear before the value, &amp;ldquo;+&amp;rdquo; if the symbol should appear after the value, or &amp;ldquo;.&amp;rdquo; if the symbol should replace the radix character.</source>
          <target state="translated">값 앞에 기호를 표시하려면 &quot;-&quot;가 앞에 오는 통화 기호를, 값 뒤에 기호가 나타나면 &quot;+&quot;를 가져 오거나 &quot;.&quot; 기호가 기수 문자를 대체해야하는 경우</target>
        </trans-unit>
        <trans-unit id="af676806212458a98a5fcaf1ecd37e932430adf7" translate="yes" xml:space="preserve">
          <source>Get the current coroutine origin tracking depth, as set by &lt;a href=&quot;#sys.set_coroutine_origin_tracking_depth&quot;&gt;&lt;code&gt;set_coroutine_origin_tracking_depth()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sys.set_coroutine_origin_tracking_depth&quot;&gt; &lt;code&gt;set_coroutine_origin_tracking_depth()&lt;/code&gt; &lt;/a&gt; 의해 설정된 현재 코 루틴 원점 추적 깊이를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="21bc3e18b69cedb70fba9d2d7af46bb81851c651" translate="yes" xml:space="preserve">
          <source>Get the current debug mode.</source>
          <target state="translated">현재 디버그 모드를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="25976958957d1c9135141ad689fa55fa97978abd" translate="yes" xml:space="preserve">
          <source>Get the current event loop.</source>
          <target state="translated">Get the current event loop.</target>
        </trans-unit>
        <trans-unit id="9147306d385a899f0990612dc38a5e8cbd44b174" translate="yes" xml:space="preserve">
          <source>Get the current event loop. If there is no current event loop set in the current OS thread and &lt;a href=&quot;#asyncio.set_event_loop&quot;&gt;&lt;code&gt;set_event_loop()&lt;/code&gt;&lt;/a&gt; has not yet been called, asyncio will create a new event loop and set it as the current one.</source>
          <target state="translated">현재 이벤트 루프를 가져옵니다. 현재 OS 스레드에 현재 이벤트 루프가 설정되어 있지 않고 &lt;a href=&quot;#asyncio.set_event_loop&quot;&gt; &lt;code&gt;set_event_loop()&lt;/code&gt; &lt;/a&gt; 가 아직 호출되지 않은 경우 asyncio는 새 이벤트 루프를 생성하여 현재 이벤트 루프로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9fbacbbcf2b837c80ba45aea42673fc9e4cf458a" translate="yes" xml:space="preserve">
          <source>Get the current exception handler.</source>
          <target state="translated">현재 예외 처리기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="4197cb00152b09fb11f3cc03418b4e6a301eb8da" translate="yes" xml:space="preserve">
          <source>Get the current size and peak size of memory blocks traced by the &lt;a href=&quot;#module-tracemalloc&quot;&gt;&lt;code&gt;tracemalloc&lt;/code&gt;&lt;/a&gt; module as a tuple: &lt;code&gt;(current: int, peak: int)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#module-tracemalloc&quot;&gt; &lt;code&gt;tracemalloc&lt;/code&gt; &lt;/a&gt; 모듈에 의해 추적 된 메모리 블록의 현재 크기와 최대 크기를 튜플 : &lt;code&gt;(current: int, peak: int)&lt;/code&gt; 로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="626d548bdef64d0a48f07c8cda0a11f5c10bcbfc" translate="yes" xml:space="preserve">
          <source>Get the debug mode (&lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/a&gt;) of the event loop.</source>
          <target state="translated">이벤트 루프 의 디버그 모드 ( &lt;a href=&quot;functions#bool&quot;&gt; &lt;code&gt;bool&lt;/code&gt; &lt;/a&gt; )를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="8ded36169c7cff99c312b7341fa1bdec62461193" translate="yes" xml:space="preserve">
          <source>Get the default value for a namespace attribute, as set by either &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; or by &lt;a href=&quot;#argparse.ArgumentParser.set_defaults&quot;&gt;&lt;code&gt;set_defaults()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#argparse.ArgumentParser.set_defaults&quot;&gt; &lt;code&gt;set_defaults()&lt;/code&gt; &lt;/a&gt; 의해 설정된 네임 스페이스 속성의 기본값을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="fd913673fefa31b516e470f7cb6bcbec7e7a99e1" translate="yes" xml:space="preserve">
          <source>Get the documentation string for an object, cleaned up with &lt;a href=&quot;#inspect.cleandoc&quot;&gt;&lt;code&gt;cleandoc()&lt;/code&gt;&lt;/a&gt;. If the documentation string for an object is not provided and the object is a class, a method, a property or a descriptor, retrieve the documentation string from the inheritance hierarchy.</source>
          <target state="translated">&lt;a href=&quot;#inspect.cleandoc&quot;&gt; &lt;code&gt;cleandoc()&lt;/code&gt; &lt;/a&gt; 정리 된 객체의 문서 문자열을 가져옵니다 . 객체의 문서 문자열이 제공되지 않고 객체가 클래스, 메서드, 속성 또는 설명자인 경우 상속 계층 구조에서 설명서 문자열을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="26444a9c7dae84ae670e89b9e343f089a402bf15" translate="yes" xml:space="preserve">
          <source>Get the event loop for the current context.</source>
          <target state="translated">현재 컨텍스트에 대한 이벤트 루프를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="10b306fb1b873fece8b5be20d28de802e14a266d" translate="yes" xml:space="preserve">
          <source>Get the factory &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt;&lt;code&gt;loop.create_task()&lt;/code&gt;&lt;/a&gt; uses to create &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;Tasks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">팩토리 &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt; &lt;code&gt;loop.create_task()&lt;/code&gt; &lt;/a&gt; 가 &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt; &lt;code&gt;Tasks&lt;/code&gt; &lt;/a&gt; 를 만드는 데 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d3e5d5493d44e924f29fef4accb44b80d73eed0d" translate="yes" xml:space="preserve">
          <source>Get the hardware address as a 48-bit positive integer. The first time this runs, it may launch a separate program, which could be quite slow. If all attempts to obtain the hardware address fail, we choose a random 48-bit number with the multicast bit (least significant bit of the first octet) set to 1 as recommended in &lt;a href=&quot;https://tools.ietf.org/html/rfc4122.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 4122&lt;/strong&gt;&lt;/a&gt;. &amp;ldquo;Hardware address&amp;rdquo; means the MAC address of a network interface. On a machine with multiple network interfaces, universally administered MAC addresses (i.e. where the second least significant bit of the first octet is &lt;em&gt;unset&lt;/em&gt;) will be preferred over locally administered MAC addresses, but with no other ordering guarantees.</source>
          <target state="translated">하드웨어 주소를 48 비트 양의 정수로 가져옵니다. 처음 실행하면 별도의 프로그램이 시작될 수 있으며 속도가 느릴 수 있습니다. 하드웨어 주소를 얻기위한 모든 시도가 실패하면 &lt;a href=&quot;https://tools.ietf.org/html/rfc4122.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 4122&lt;/strong&gt;&lt;/a&gt; 에서 권장하는 &lt;strong&gt;대로&lt;/strong&gt; 멀티 캐스트 비트 (첫 번째 옥텟의 가장 작은 비트)가 1로 설정된 임의의 48 비트 숫자를 선택합니다 . &quot;하드웨어 주소&quot;는 네트워크 인터페이스의 MAC 주소를 의미합니다. 다중 네트워크 인터페이스가있는 머신에서 범용 관리 MAC 주소 (즉, 첫 번째 옥텟의 두 번째 최하위 비트가 &lt;em&gt;설정되지 않은 경우&lt;/em&gt; )는 로컬 관리 MAC 주소보다 선호되지만 다른 순서 보증은 없습니다.</target>
        </trans-unit>
        <trans-unit id="86bdc03571623456348b97e7751c036a41840cbf" translate="yes" xml:space="preserve">
          <source>Get the list of &lt;code&gt;quota&lt;/code&gt;&lt;code&gt;roots&lt;/code&gt; for the named &lt;em&gt;mailbox&lt;/em&gt;. This method is part of the IMAP4 QUOTA extension defined in rfc2087.</source>
          <target state="translated">명명 된 &lt;em&gt;사서함&lt;/em&gt; 의 &lt;code&gt;quota&lt;/code&gt; &lt;code&gt;roots&lt;/code&gt; 목록 을 가져옵니다 . 이 방법은 rfc2087에 정의 된 IMAP4 QUOTA 확장의 일부입니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c9a0f4fdae3a78828ee0d60e9492707425bddc34" translate="yes" xml:space="preserve">
          <source>Get the mapping of external name references in a Python function or method &lt;em&gt;func&lt;/em&gt; to their current values. A &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;ClosureVars(nonlocals, globals, builtins, unbound)&lt;/code&gt; is returned. &lt;em&gt;nonlocals&lt;/em&gt; maps referenced names to lexical closure variables, &lt;em&gt;globals&lt;/em&gt; to the function&amp;rsquo;s module globals and &lt;em&gt;builtins&lt;/em&gt; to the builtins visible from the function body. &lt;em&gt;unbound&lt;/em&gt; is the set of names referenced in the function that could not be resolved at all given the current module globals and builtins.</source>
          <target state="translated">Python 함수 또는 메소드 &lt;em&gt;func&lt;/em&gt; 에서 외부 이름 참조를 현재 값에 맵핑하십시오 . &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;라는 이름의 튜플 &lt;/a&gt; &lt;code&gt;ClosureVars(nonlocals, globals, builtins, unbound)&lt;/code&gt; 반환됩니다. &lt;em&gt;nonlocals&lt;/em&gt; 는 참조 된 이름을 어휘 폐쇄 변수에, &lt;em&gt;전역&lt;/em&gt; 은 함수의 모듈 전역에, &lt;em&gt;내장&lt;/em&gt; 은 함수 본문에서 볼 수있는 내장에 매핑 합니다. &lt;em&gt;unbound&lt;/em&gt; 는 함수에서 참조 된 이름 집합으로, 현재 모듈 전역 및 내장에서 전혀 해석 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c13929a234f5f5e34122a6641cb65a0649856dfe" translate="yes" xml:space="preserve">
          <source>Get the mapping of external name references in a Python function or method &lt;em&gt;func&lt;/em&gt; to their current values. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;ClosureVars(nonlocals, globals, builtins, unbound)&lt;/code&gt; is returned. &lt;em&gt;nonlocals&lt;/em&gt; maps referenced names to lexical closure variables, &lt;em&gt;globals&lt;/em&gt; to the function&amp;rsquo;s module globals and &lt;em&gt;builtins&lt;/em&gt; to the builtins visible from the function body. &lt;em&gt;unbound&lt;/em&gt; is the set of names referenced in the function that could not be resolved at all given the current module globals and builtins.</source>
          <target state="translated">Get the mapping of external name references in a Python function or method &lt;em&gt;func&lt;/em&gt; to their current values. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; &lt;code&gt;ClosureVars(nonlocals, globals, builtins, unbound)&lt;/code&gt; is returned. &lt;em&gt;nonlocals&lt;/em&gt; maps referenced names to lexical closure variables, &lt;em&gt;globals&lt;/em&gt; to the function&amp;rsquo;s module globals and &lt;em&gt;builtins&lt;/em&gt; to the builtins visible from the function body. &lt;em&gt;unbound&lt;/em&gt; is the set of names referenced in the function that could not be resolved at all given the current module globals and builtins.</target>
        </trans-unit>
        <trans-unit id="c22b31eb9439f4414864003fe23d0a2bf9e90c0a" translate="yes" xml:space="preserve">
          <source>Get the mapping of live local variables in &lt;em&gt;generator&lt;/em&gt; to their current values. A dictionary is returned that maps from variable names to values. This is the equivalent of calling &lt;a href=&quot;functions#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; in the body of the generator, and all the same caveats apply.</source>
          <target state="translated">&lt;em&gt;생성기&lt;/em&gt; 의 활성 지역 변수를 현재 값 에 매핑 합니다. 변수 이름에서 값으로 매핑되는 사전이 반환됩니다. 이것은 생성기 본문에서 &lt;a href=&quot;functions#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt; 를 호출 하는 것과 동일하며 모든 동일한 경고가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="beed10cfe2d77794b1bbb3bbdc91c0102b02eadb" translate="yes" xml:space="preserve">
          <source>Get the maximum number of frames stored in the traceback of a trace.</source>
          <target state="translated">트레이스의 트레이스 백에 저장된 최대 프레임 수를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="875f24fe095e6b18c21feed2477aac6da64b14a3" translate="yes" xml:space="preserve">
          <source>Get the maximum priority value for &lt;em&gt;policy&lt;/em&gt;. &lt;em&gt;policy&lt;/em&gt; is one of the scheduling policy constants above.</source>
          <target state="translated">&lt;em&gt;policy&lt;/em&gt; 의 최대 우선 순위 값을 가져 &lt;em&gt;오십시오&lt;/em&gt; . &lt;em&gt;policy&lt;/em&gt; 는 위의 스케줄링 정책 상수 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="d831a3fe762715d892a6266acc85d2860eacbda6" translate="yes" xml:space="preserve">
          <source>Get the memory usage in bytes of the &lt;a href=&quot;#module-tracemalloc&quot;&gt;&lt;code&gt;tracemalloc&lt;/code&gt;&lt;/a&gt; module used to store traces of memory blocks. Return an &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">메모리 블록의 트레이스를 저장하는 데 사용 된 &lt;a href=&quot;#module-tracemalloc&quot;&gt; &lt;code&gt;tracemalloc&lt;/code&gt; &lt;/a&gt; 모듈 의 메모리 사용량을 바이트 단위로 가져 옵니다 . 돌아 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5fca68a5a7ae5234cb479afea741b6da40bf623c" translate="yes" xml:space="preserve">
          <source>Get the minimum priority value for &lt;em&gt;policy&lt;/em&gt;. &lt;em&gt;policy&lt;/em&gt; is one of the scheduling policy constants above.</source>
          <target state="translated">&lt;em&gt;policy&lt;/em&gt; 의 최소 ​​우선 순위 값을 확보하십시오 . &lt;em&gt;policy&lt;/em&gt; 는 위의 스케줄링 정책 상수 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="d8ac71296ef3a58835643bd261a8ccd491ad148f" translate="yes" xml:space="preserve">
          <source>Get the name of the n-th day of the week.</source>
          <target state="translated">요일 n 번째 날의 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="177c736ff7d8d1f378de31fc0c8a6a656a7d692b" translate="yes" xml:space="preserve">
          <source>Get the name of the n-th month.</source>
          <target state="translated">n 번째 달의 이름을 얻습니다.</target>
        </trans-unit>
        <trans-unit id="cdf70fb867a7db976d8f951c29595f87261634f2" translate="yes" xml:space="preserve">
          <source>Get the names and default values of a Python function&amp;rsquo;s parameters. A &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; is returned:</source>
          <target state="translated">Python 함수 매개 변수의 이름과 기본값을 가져옵니다. &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;라는 이름의 튜플이&lt;/a&gt; 반환됩니다</target>
        </trans-unit>
        <trans-unit id="f96a65f3bc54287ada72c5b7fe9623f023a380a0" translate="yes" xml:space="preserve">
          <source>Get the names and default values of a Python function&amp;rsquo;s parameters. A &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;ArgSpec(args, varargs, keywords, defaults)&lt;/code&gt; is returned. &lt;em&gt;args&lt;/em&gt; is a list of the parameter names. &lt;em&gt;varargs&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; are the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; parameters or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;defaults&lt;/em&gt; is a tuple of default argument values or &lt;code&gt;None&lt;/code&gt; if there are no default arguments; if this tuple has &lt;em&gt;n&lt;/em&gt; elements, they correspond to the last &lt;em&gt;n&lt;/em&gt; elements listed in &lt;em&gt;args&lt;/em&gt;.</source>
          <target state="translated">Python 함수 매개 변수의 이름과 기본값을 가져옵니다. &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;라는 이름의 튜플 &lt;/a&gt; &lt;code&gt;ArgSpec(args, varargs, keywords, defaults)&lt;/code&gt; 반환됩니다. &lt;em&gt;args&lt;/em&gt; 는 매개 변수 이름의 목록입니다. &lt;em&gt;varargs&lt;/em&gt; 및 &lt;em&gt;키워드&lt;/em&gt; 는 &lt;code&gt;*&lt;/code&gt; 및 &lt;code&gt;**&lt;/code&gt; 매개 변수 이름 또는 &lt;code&gt;None&lt;/code&gt; 입니다. &lt;em&gt;기본값&lt;/em&gt; 은 기본 인수 값의 튜플이거나 기본 인수가 없으면 &lt;code&gt;None&lt;/code&gt; 입니다 . 이 튜플에 &lt;em&gt;n 개의&lt;/em&gt; 요소 가 있으면 &lt;em&gt;args에&lt;/em&gt; 나열된 마지막 &lt;em&gt;n 개의&lt;/em&gt; 요소에 해당합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1a283a5a41121dbca015169d61b5d14898f3bfee" translate="yes" xml:space="preserve">
          <source>Get the names and default values of a Python function&amp;rsquo;s parameters. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; is returned:</source>
          <target state="translated">Get the names and default values of a Python function&amp;rsquo;s parameters. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; is returned:</target>
        </trans-unit>
        <trans-unit id="f98ea09bf5b18d6303954ee58869c3f5e08899ae" translate="yes" xml:space="preserve">
          <source>Get the names and default values of a Python function&amp;rsquo;s parameters. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt;&lt;code&gt;ArgSpec(args, varargs, keywords, defaults)&lt;/code&gt; is returned. &lt;em&gt;args&lt;/em&gt; is a list of the parameter names. &lt;em&gt;varargs&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; are the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; parameters or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;defaults&lt;/em&gt; is a tuple of default argument values or &lt;code&gt;None&lt;/code&gt; if there are no default arguments; if this tuple has &lt;em&gt;n&lt;/em&gt; elements, they correspond to the last &lt;em&gt;n&lt;/em&gt; elements listed in &lt;em&gt;args&lt;/em&gt;.</source>
          <target state="translated">Get the names and default values of a Python function&amp;rsquo;s parameters. A &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; &lt;code&gt;ArgSpec(args, varargs, keywords, defaults)&lt;/code&gt; is returned. &lt;em&gt;args&lt;/em&gt; is a list of the parameter names. &lt;em&gt;varargs&lt;/em&gt; and &lt;em&gt;keywords&lt;/em&gt; are the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; parameters or &lt;code&gt;None&lt;/code&gt; . &lt;em&gt;defaults&lt;/em&gt; is a tuple of default argument values or &lt;code&gt;None&lt;/code&gt; if there are no default arguments; if this tuple has &lt;em&gt;n&lt;/em&gt; elements, they correspond to the last &lt;em&gt;n&lt;/em&gt; elements listed in &lt;em&gt;args&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="338f1e4cd4abd99d9096cc0a0fe019657231fcb8" translate="yes" xml:space="preserve">
          <source>Get the object wrapped by &lt;em&gt;func&lt;/em&gt;. It follows the chain of &lt;code&gt;__wrapped__&lt;/code&gt; attributes returning the last object in the chain.</source>
          <target state="translated">&lt;em&gt;func에&lt;/em&gt; 의해 감싸 진 객체를 가져옵니다 . 체인의 마지막 개체를 반환하는 &lt;code&gt;__wrapped__&lt;/code&gt; 특성 체인을 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="eeb0543617fc198eb7f84637ea5bfb7ba0fb9e29" translate="yes" xml:space="preserve">
          <source>Get the profiler function as set by &lt;a href=&quot;#sys.setprofile&quot;&gt;&lt;code&gt;setprofile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sys.setprofile&quot;&gt; &lt;code&gt;setprofile()&lt;/code&gt; &lt;/a&gt; 의해 설정된 프로파일 러 함수를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="d1faa97d2137acdfa90b6bf60ff4c74956dba073" translate="yes" xml:space="preserve">
          <source>Get the radix character (decimal dot, decimal comma, etc.).</source>
          <target state="translated">기수 문자 (10 진수 점, 10 진수 쉼표 등)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c01a5ccde9ac49c55eb2b32526014a7b15ecf2ae" translate="yes" xml:space="preserve">
          <source>Get the separator character for thousands (groups of three digits).</source>
          <target state="translated">천 단위 구분 기호 문자 (3 자리 그룹)를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0e78eed124f99dc526d554a9b3edaa9f5e91b866" translate="yes" xml:space="preserve">
          <source>Get the size of the terminal window.</source>
          <target state="translated">터미널 창의 크기를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0a9e259bb5fda4714972337dc041313d9ac70f7b" translate="yes" xml:space="preserve">
          <source>Get the status of a file or a file descriptor. Perform the equivalent of a &lt;code&gt;stat()&lt;/code&gt; system call on the given path. &lt;em&gt;path&lt;/em&gt; may be specified as either a string or bytes &amp;ndash; directly or indirectly through the &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface &amp;ndash; or as an open file descriptor. Return a &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">파일 또는 파일 설명 자의 상태를 가져옵니다. 주어진 경로에서 &lt;code&gt;stat()&lt;/code&gt; 시스템 호출 과 동등한 작업을 수행하십시오 . &lt;em&gt;path&lt;/em&gt; 는 &lt;a href=&quot;#os.PathLike&quot;&gt; &lt;code&gt;PathLike&lt;/code&gt; &lt;/a&gt; 인터페이스를 통해 직접 또는 간접적으로 문자열 또는 바이트 또는 열린 파일 설명 자로 지정할 수 있습니다. &lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; &lt;/a&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="0ca243f70cf806ef62d1afffa88dfc484f305191" translate="yes" xml:space="preserve">
          <source>Get the status of the file descriptor &lt;em&gt;fd&lt;/em&gt;. Return a &lt;a href=&quot;#os.stat_result&quot;&gt;&lt;code&gt;stat_result&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">파일 기술자 &lt;em&gt;fd&lt;/em&gt; 의 상태를 가져옵니다 . &lt;a href=&quot;#os.stat_result&quot;&gt; &lt;code&gt;stat_result&lt;/code&gt; &lt;/a&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="8dd3f7ebeb39e689a6b4f2254d583df995061fb3" translate="yes" xml:space="preserve">
          <source>Get the trace function as set by &lt;a href=&quot;#sys.settrace&quot;&gt;&lt;code&gt;settrace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#sys.settrace&quot;&gt; &lt;code&gt;settrace()&lt;/code&gt; &lt;/a&gt; 로 설정된 추적 함수를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="2bb9c949f80db687c4f3b3bcb5ae6488810e0e05" translate="yes" xml:space="preserve">
          <source>Get the traceback of a memory block</source>
          <target state="translated">메모리 블록의 역 추적</target>
        </trans-unit>
        <trans-unit id="96491598d89e33d5f629f33a8e143413fe56b6b3" translate="yes" xml:space="preserve">
          <source>Get the traceback where the Python object &lt;em&gt;obj&lt;/em&gt; was allocated. Return a &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt;&lt;code&gt;Traceback&lt;/code&gt;&lt;/a&gt; instance, or &lt;code&gt;None&lt;/code&gt; if the &lt;a href=&quot;#module-tracemalloc&quot;&gt;&lt;code&gt;tracemalloc&lt;/code&gt;&lt;/a&gt; module is not tracing memory allocations or did not trace the allocation of the object.</source>
          <target state="translated">Python 객체 &lt;em&gt;obj&lt;/em&gt; 가 할당 된 역 추적을 가져옵니다 . &lt;a href=&quot;#module-tracemalloc&quot;&gt; &lt;code&gt;tracemalloc&lt;/code&gt; &lt;/a&gt; 모듈이 메모리 할당을 추적하지 않거나 개체 할당을 추적하지 않은 경우 &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt; &lt;code&gt;Traceback&lt;/code&gt; &lt;/a&gt; 인스턴스를 반환 하거나 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="e0cd0d7d768a7bc89269e2610f57234df9dc174c" translate="yes" xml:space="preserve">
          <source>Get the type of completion being attempted. This returns the &lt;code&gt;rl_completion_type&lt;/code&gt; variable in the underlying library as an integer.</source>
          <target state="translated">시도중인 완료 유형을 가져옵니다. 기본 라이브러리 의 &lt;code&gt;rl_completion_type&lt;/code&gt; 변수를 정수로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="14634fd7695059ed33b02f9c5c68979403fb0a78" translate="yes" xml:space="preserve">
          <source>Get up to &lt;em&gt;size&lt;/em&gt; random bytes. The function can return less bytes than requested.</source>
          <target state="translated">임의의 바이트 &lt;em&gt;크기&lt;/em&gt; 까지 가져옵니다 . 이 함수는 요청한 것보다 적은 바이트를 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01cc5b73e04d7942d8b95f16fb4f30afb296c429" translate="yes" xml:space="preserve">
          <source>Get user/password for given realm and URI, if any. This method will return &lt;code&gt;(None, None)&lt;/code&gt; if there is no matching user/password.</source>
          <target state="translated">제공된 영역 및 URI에 대한 사용자 / 암호를 가져옵니다 (있는 경우). 일치하는 사용자 / 암호가 없으면 이 메소드는 &lt;code&gt;(None, None)&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="8cc37b119889ac835c7737c5753d9caa568b7839" translate="yes" xml:space="preserve">
          <source>Gets the element attribute named &lt;em&gt;key&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;key&lt;/em&gt; 라는 요소 속성을 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="760100f396e380d5b81eb981f228550498eeda61" translate="yes" xml:space="preserve">
          <source>Gets the options maintained by the Tix scheme mechanism.</source>
          <target state="translated">Tix 체계 메커니즘에 의해 유지 관리되는 옵션을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="54f6b9f42996ad493427dc7a89ff5033c4ae88a3" translate="yes" xml:space="preserve">
          <source>Getting and Setting the Policy</source>
          <target state="translated">정책 얻기 및 설정</target>
        </trans-unit>
        <trans-unit id="de41be2be50480bb76b3f0a07f5885974cbf1c6f" translate="yes" xml:space="preserve">
          <source>Given &lt;em&gt;field_name&lt;/em&gt; as returned by &lt;a href=&quot;#string.Formatter.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; (see above), convert it to an object to be formatted. Returns a tuple (obj, used_key). The default version takes strings of the form defined in &lt;a href=&quot;https://www.python.org/dev/peps/pep-3101&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 3101&lt;/strong&gt;&lt;/a&gt;, such as &amp;ldquo;0[name]&amp;rdquo; or &amp;ldquo;label.title&amp;rdquo;. &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwargs&lt;/em&gt; are as passed in to &lt;a href=&quot;#string.Formatter.vformat&quot;&gt;&lt;code&gt;vformat()&lt;/code&gt;&lt;/a&gt;. The return value &lt;em&gt;used_key&lt;/em&gt; has the same meaning as the &lt;em&gt;key&lt;/em&gt; parameter to &lt;a href=&quot;#string.Formatter.get_value&quot;&gt;&lt;code&gt;get_value()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#string.Formatter.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 &lt;em&gt;field_name이&lt;/em&gt; 주어지면 (위 참조) 포맷 할 객체로 변환하십시오. 튜플 (obj, used_key)을 반환합니다. 기본 버전은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3101&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 3101에&lt;/strong&gt;&lt;/a&gt; 정의 된 형식의 문자열 ( 예 : &quot;0 [name]&quot;또는 &quot;label.title&quot;)을 사용합니다. &lt;em&gt;args&lt;/em&gt; 와 &lt;em&gt;kwargs&lt;/em&gt; 는 &lt;a href=&quot;#string.Formatter.vformat&quot;&gt; &lt;code&gt;vformat()&lt;/code&gt; &lt;/a&gt; 으로 전달됩니다 . 반환 값 &lt;em&gt;used_key&lt;/em&gt; 는 &lt;a href=&quot;#string.Formatter.get_value&quot;&gt; &lt;code&gt;get_value()&lt;/code&gt; &lt;/a&gt; 의 &lt;em&gt;키&lt;/em&gt; 매개 변수 와 동일한 의미를 갖습니다 .&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6f55d836d4948d424938d2512af324936d2aeb59" translate="yes" xml:space="preserve">
          <source>Given a &lt;em&gt;sequence&lt;/em&gt; produced by &lt;a href=&quot;#difflib.Differ.compare&quot;&gt;&lt;code&gt;Differ.compare()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#difflib.ndiff&quot;&gt;&lt;code&gt;ndiff()&lt;/code&gt;&lt;/a&gt;, extract lines originating from file 1 or 2 (parameter &lt;em&gt;which&lt;/em&gt;), stripping off line prefixes.</source>
          <target state="translated">&lt;a href=&quot;#difflib.Differ.compare&quot;&gt; &lt;code&gt;Differ.compare()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#difflib.ndiff&quot;&gt; &lt;code&gt;ndiff()&lt;/code&gt; &lt;/a&gt; 의해 생성 된 &lt;em&gt;시퀀스&lt;/em&gt; 가 주어지면 파일 1 또는 2 (매개 변수 &lt;em&gt;which&lt;/em&gt; )에서 시작하여 행 접두사를 제거하는 행을 추출하십시오.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="05595a6c90f0a99ee3d09b89a7cd936fde90ed53" translate="yes" xml:space="preserve">
          <source>Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded string version of the same certificate.</source>
          <target state="translated">DER로 인코딩 된 바이트 바이트로 인증서가 주어지면 동일한 인증서의 PEM으로 인코딩 된 문자열 버전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3a46c2f2901d1cbae641511ae251e6f2a6550436" translate="yes" xml:space="preserve">
          <source>Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of bytes for that same certificate.</source>
          <target state="translated">인증서가 ASCII PEM 문자열로 제공되면 동일한 인증서에 대해 DER로 인코딩 된 바이트 시퀀스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f45ddf3586cd5194519fa8686d71f3049a3d0b96" translate="yes" xml:space="preserve">
          <source>Given a class defining one or more rich comparison ordering methods, this class decorator supplies the rest. This simplifies the effort involved in specifying all of the possible rich comparison operations:</source>
          <target state="translated">하나 이상의 풍부한 비교 순서 방법을 정의하는 클래스가 주어지면이 클래스 데코레이터가 나머지를 제공합니다. 이렇게하면 가능한 모든 풍부한 비교 연산을 지정하는 데 드는 노력이 단순화됩니다.</target>
        </trans-unit>
        <trans-unit id="f7b3e25f5e05ce99668bfb371e67ba352cbbde2c" translate="yes" xml:space="preserve">
          <source>Given a list of tuples or &lt;a href=&quot;#traceback.FrameSummary&quot;&gt;&lt;code&gt;FrameSummary&lt;/code&gt;&lt;/a&gt; objects as returned by &lt;a href=&quot;#traceback.extract_tb&quot;&gt;&lt;code&gt;extract_tb()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#traceback.extract_stack&quot;&gt;&lt;code&gt;extract_stack()&lt;/code&gt;&lt;/a&gt;, return a list of strings ready for printing. Each string in the resulting list corresponds to the item with the same index in the argument list. Each string ends in a newline; the strings may contain internal newlines as well, for those items whose source text line is not &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#traceback.extract_tb&quot;&gt; &lt;code&gt;extract_tb()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#traceback.extract_stack&quot;&gt; &lt;code&gt;extract_stack()&lt;/code&gt; &lt;/a&gt; 에서 반환 한 튜플 또는 &lt;a href=&quot;#traceback.FrameSummary&quot;&gt; &lt;code&gt;FrameSummary&lt;/code&gt; &lt;/a&gt; 객체 목록이 제공되면 인쇄 할 준비가 된 문자열 목록을 반환합니다. 결과 목록의 각 문자열은 인수 목록에서 동일한 색인을 가진 항목에 해당합니다. 각 문자열은 줄 바꿈으로 끝납니다. 소스 텍스트 행이 &lt;code&gt;None&lt;/code&gt; 이 아닌 항목의 문자열에는 내부 개행 문자도 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e790336403204248eacd64786fa774cb6247304" translate="yes" xml:space="preserve">
          <source>Given a string &lt;code&gt;cfg://handlers.myhandler.mykey.123&lt;/code&gt;, this will resolve to &lt;code&gt;config_dict['handlers']['myhandler']['mykey']['123']&lt;/code&gt;. If the string is specified as &lt;code&gt;cfg://handlers.myhandler.mykey[123]&lt;/code&gt;, the system will attempt to retrieve the value from &lt;code&gt;config_dict['handlers']['myhandler']['mykey'][123]&lt;/code&gt;, and fall back to &lt;code&gt;config_dict['handlers']['myhandler']['mykey']['123']&lt;/code&gt; if that fails.</source>
          <target state="translated">문자열을 감안할 때 &lt;code&gt;cfg://handlers.myhandler.mykey.123&lt;/code&gt; ,이에 해결할 수 &lt;code&gt;config_dict['handlers']['myhandler']['mykey']['123']&lt;/code&gt; . 문자열이 지정된 경우 &lt;code&gt;cfg://handlers.myhandler.mykey[123]&lt;/code&gt; , 시스템에서 값 검색을 시도합니다 &lt;code&gt;config_dict['handlers']['myhandler']['mykey'][123]&lt;/code&gt; , 가을 실패하면 &lt;code&gt;config_dict['handlers']['myhandler']['mykey']['123']&lt;/code&gt; 로 돌아가십시오 .</target>
        </trans-unit>
        <trans-unit id="d84b01d7456dcc777d8a082e4eabece2ca9ed79a" translate="yes" xml:space="preserve">
          <source>Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, &lt;code&gt;ord('a')&lt;/code&gt; returns the integer &lt;code&gt;97&lt;/code&gt; and &lt;code&gt;ord('&amp;euro;')&lt;/code&gt; (Euro sign) returns &lt;code&gt;8364&lt;/code&gt;. This is the inverse of &lt;a href=&quot;#chr&quot;&gt;&lt;code&gt;chr()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">하나의 유니 코드 문자를 나타내는 문자열이 주어진 경우 해당 문자의 유니 코드 코드 포인트를 나타내는 정수를 반환하십시오. 예를 들어 &lt;code&gt;ord('a')&lt;/code&gt; 는 정수 &lt;code&gt;97&lt;/code&gt; 을 반환 하고 &lt;code&gt;ord('&amp;euro;')&lt;/code&gt; (Euro sign)은 &lt;code&gt;8364&lt;/code&gt; 를 반환합니다 . 이것은 &lt;a href=&quot;#chr&quot;&gt; &lt;code&gt;chr()&lt;/code&gt; &lt;/a&gt; 의 반대입니다 .</target>
        </trans-unit>
        <trans-unit id="1e6e2f86433a718f222be5f912b3a524bf362339" translate="yes" xml:space="preserve">
          <source>Given the &lt;em&gt;path&lt;/em&gt; to a &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt; file name, return the associated source code file path. For example, if &lt;em&gt;path&lt;/em&gt; is &lt;code&gt;/foo/bar/__pycache__/baz.cpython-32.pyc&lt;/code&gt; the returned path would be &lt;code&gt;/foo/bar/baz.py&lt;/code&gt;. &lt;em&gt;path&lt;/em&gt; need not exist, however if it does not conform to &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-24&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://www.python.org/dev/peps/pep-0488&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;PEP 488&lt;/strong&gt;&lt;/a&gt; format, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. If &lt;code&gt;sys.implementation.cache_tag&lt;/code&gt; is not defined, &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt; 파일 이름에 대한 &lt;em&gt;경로&lt;/em&gt; 가 주어지면 연관된 소스 코드 파일 경로를 리턴하십시오. 예를 들어 &lt;em&gt;path&lt;/em&gt; 가 &lt;code&gt;/foo/bar/__pycache__/baz.cpython-32.pyc&lt;/code&gt; 인 경우 반환되는 경로는 &lt;code&gt;/foo/bar/baz.py&lt;/code&gt; 입니다. &lt;em&gt;경로&lt;/em&gt; 가 존재할 필요는 없지만 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3147&quot; id=&quot;index-24&quot;&gt;&lt;strong&gt;PEP 3147&lt;/strong&gt;&lt;/a&gt; 또는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0488&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;PEP 488&lt;/strong&gt;&lt;/a&gt; 형식을 준수하지 않으면 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; 가 발생합니다. 경우 &lt;code&gt;sys.implementation.cache_tag&lt;/code&gt; 가 정의되어 있지 않은, &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; 가&lt;/a&gt; 발생합니다.&lt;strong&gt;&lt;/strong&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="08ed0d8e8bad29829940b285ece41c02bdf11fd1" translate="yes" xml:space="preserve">
          <source>Given the address &lt;code&gt;addr&lt;/code&gt; of an SSL-protected server, as a (&lt;em&gt;hostname&lt;/em&gt;, &lt;em&gt;port-number&lt;/em&gt;) pair, fetches the server&amp;rsquo;s certificate, and returns it as a PEM-encoded string. If &lt;code&gt;ssl_version&lt;/code&gt; is specified, uses that version of the SSL protocol to attempt to connect to the server. If &lt;code&gt;ca_certs&lt;/code&gt; is specified, it should be a file containing a list of root certificates, the same format as used for the same parameter in &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt;. The call will attempt to validate the server certificate against that set of root certificates, and will fail if the validation attempt fails.</source>
          <target state="translated">주소 주어 &lt;code&gt;addr&lt;/code&gt; A (와 같은 SSL로 보호 된 서버를 &lt;em&gt;호스트 이름&lt;/em&gt; , &lt;em&gt;포트 번호&lt;/em&gt; ) 한 쌍, 서버의 인증서를 가져옵니다 및 PEM 인코딩 된 문자열로 반환을. &lt;code&gt;ssl_version&lt;/code&gt; 이 지정된 경우 해당 버전의 SSL 프로토콜을 사용하여 서버에 연결을 시도하십시오. &lt;code&gt;ca_certs&lt;/code&gt; 가 지정된 경우 &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt; &lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt; &lt;/a&gt; 의 동일한 매개 변수에 사용 된 형식과 동일한 형식의 루트 인증서 목록을 포함하는 파일이어야합니다 . 호출은 해당 루트 인증서 세트에 대해 서버 인증서의 유효성을 검증하려고 시도하고 유효성 검증 시도가 실패하면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="ed1cc9e34fb1d371b7d753410f4cb40d45c04f7f" translate="yes" xml:space="preserve">
          <source>Given the following test function:</source>
          <target state="translated">다음과 같은 테스트 기능이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="9ccf5a3550325aa609fd4d8289371b325a3aab2b" translate="yes" xml:space="preserve">
          <source>Giving a name to the &amp;ldquo;no flags set&amp;rdquo; condition does not change its boolean value:</source>
          <target state="translated">&quot;no flags set&quot;조건에 이름을 부여해도 부울 값이 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3e2578c8d3e2264288e1d7a420984d59a44f0d09" translate="yes" xml:space="preserve">
          <source>Glob the given relative &lt;em&gt;pattern&lt;/em&gt; in the directory represented by this path, yielding all matching files (of any kind):</source>
          <target state="translated">이 경로로 표시되는 디렉토리에서 주어진 상대 &lt;em&gt;패턴&lt;/em&gt; 을 지정 하여 모든 종류의 일치하는 파일을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="70ae8e14e7d7a8122e7468fd602556f9b4388301" translate="yes" xml:space="preserve">
          <source>Global variables</source>
          <target state="translated">글로벌 변수</target>
        </trans-unit>
        <trans-unit id="3f827c66e7e04723ed3fa1ab0945dff3f10b9b83" translate="yes" xml:space="preserve">
          <source>Globals</source>
          <target state="translated">Globals</target>
        </trans-unit>
        <trans-unit id="763165ef1af70712caac84a0ad4d0d255c31eed2" translate="yes" xml:space="preserve">
          <source>Go to File/Line</source>
          <target state="translated">파일 / 라인으로 이동</target>
        </trans-unit>
        <trans-unit id="98a2592d28e0bc9b3ae17e6fc5fd6e49205211a0" translate="yes" xml:space="preserve">
          <source>Go to Line</source>
          <target state="translated">라인으로 이동</target>
        </trans-unit>
        <trans-unit id="7b92a290556d84784e64aaddf1fbea6d40138fe0" translate="yes" xml:space="preserve">
          <source>Go to file/line</source>
          <target state="translated">파일 / 라인으로 이동</target>
        </trans-unit>
        <trans-unit id="eead8cc449a5fdb49abd4cc5eb6d4c8fb413f5a1" translate="yes" xml:space="preserve">
          <source>Go to left edge of window.</source>
          <target state="translated">창의 왼쪽 가장자리로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="563cd67337a9db639ff613ae3b62460c15808b8b" translate="yes" xml:space="preserve">
          <source>Go to right edge (stripspaces off) or end of line (stripspaces on).</source>
          <target state="translated">오른쪽 가장자리 (스트립 스페이스 꺼짐) 또는 줄 끝 (스트립 스페이스 켜짐)으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="46f9595417e3e508f5e81f695930a38e4fb89c1b" translate="yes" xml:space="preserve">
          <source>Graphical User Interfaces with Tk</source>
          <target state="translated">Tk를 사용한 그래픽 사용자 인터페이스</target>
        </trans-unit>
        <trans-unit id="59d5f5b13f13f6d5e8e88a5a92e137f7d64b2954" translate="yes" xml:space="preserve">
          <source>Greek</source>
          <target state="translated">Greek</target>
        </trans-unit>
        <trans-unit id="933bf21afdd55a0d2283845fed0e7bbdd1f5db49" translate="yes" xml:space="preserve">
          <source>Green</source>
          <target state="translated">Green</target>
        </trans-unit>
        <trans-unit id="7e1a78fc7119624ad45bbfba5788d2e14052b1c6" translate="yes" xml:space="preserve">
          <source>Group ID of the user who originally stored this member.</source>
          <target state="translated">이 멤버를 처음 저장 한 사용자의 그룹 ID입니다.</target>
        </trans-unit>
        <trans-unit id="7c12f123a309d736f2ff94b7014ed4186a9c5e23" translate="yes" xml:space="preserve">
          <source>Group Separator</source>
          <target state="translated">그룹 구분</target>
        </trans-unit>
        <trans-unit id="f5868c9eb60476a70674ffb21a653d9b1b541f04" translate="yes" xml:space="preserve">
          <source>Group database entries are reported as a tuple-like object, whose attributes correspond to the members of the &lt;code&gt;group&lt;/code&gt; structure (Attribute field below, see &lt;code&gt;&amp;lt;pwd.h&amp;gt;&lt;/code&gt;):</source>
          <target state="translated">그룹 데이터베이스 항목은 속성이 &lt;code&gt;group&lt;/code&gt; 구조 의 멤버에 해당하는 튜플과 유사한 객체로보고됩니다 (아래 속성 필드, &lt;code&gt;&amp;lt;pwd.h&amp;gt;&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f6735a5ee92cee7bdb9905cfbf3933c275bf1379" translate="yes" xml:space="preserve">
          <source>Group has execute permission.</source>
          <target state="translated">그룹에 실행 권한이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8475ab1269f38d6db9942d6f399693e2156d4e54" translate="yes" xml:space="preserve">
          <source>Group has read permission.</source>
          <target state="translated">그룹에 읽기 권한이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c53ff78e371c1a2b8d488e2fc1d060ea6dec5848" translate="yes" xml:space="preserve">
          <source>Group has write permission.</source>
          <target state="translated">그룹에 쓰기 권한이 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc1013ffa9a8c2a7ebc3e1c3f775829468dd76b2" translate="yes" xml:space="preserve">
          <source>Group id of the owner.</source>
          <target state="translated">소유자의 그룹 ID</target>
        </trans-unit>
        <trans-unit id="8149aea9d2347b3cab2f08f676e4e22ad9daae9c" translate="yes" xml:space="preserve">
          <source>Group identifier of the file owner.</source>
          <target state="translated">파일 소유자의 그룹 식별자.</target>
        </trans-unit>
        <trans-unit id="3a5ba5e4d64a0b9c657db67debb9a8fb91f77421" translate="yes" xml:space="preserve">
          <source>Group name.</source>
          <target state="translated">그룹 이름.</target>
        </trans-unit>
        <trans-unit id="73fb2dd5cc2643e9f02bc351410b98713e0c50c9" translate="yes" xml:space="preserve">
          <source>Group separator</source>
          <target state="translated">그룹 분리기</target>
        </trans-unit>
        <trans-unit id="cbe6cbbb63fb55bfe88f791b01a0841ea8d25a95" translate="yes" xml:space="preserve">
          <source>Group separator used for monetary values.</source>
          <target state="translated">통화 값에 사용되는 그룹 구분 기호입니다.</target>
        </trans-unit>
        <trans-unit id="bdfa8009f2b9366fe1470f6950953385bb537b83" translate="yes" xml:space="preserve">
          <source>Grouping tests</source>
          <target state="translated">그룹화 테스트</target>
        </trans-unit>
        <trans-unit id="763f4b22517ce2940bbeade6d76120551ce59fff" translate="yes" xml:space="preserve">
          <source>Guess the extension for a file based on its MIME type, given by &lt;em&gt;type&lt;/em&gt;. The return value is a string giving a filename extension, including the leading dot (&lt;code&gt;'.'&lt;/code&gt;). The extension is not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type &lt;em&gt;type&lt;/em&gt; by &lt;a href=&quot;#mimetypes.guess_type&quot;&gt;&lt;code&gt;guess_type()&lt;/code&gt;&lt;/a&gt;. If no extension can be guessed for &lt;em&gt;type&lt;/em&gt;, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">주어진의 MIME 유형에 따라 파일의 확장자, 추측 &lt;em&gt;유형을&lt;/em&gt; . 반환 값은 선행 점 ( &lt;code&gt;'.'&lt;/code&gt; )을 포함하여 파일 이름 확장자를 제공하는 문자열 입니다. 확장은 특정 데이터 스트림과 연관이 보장되지 않지만, MIME 타입에 매핑 될 것이다 &lt;em&gt;유형&lt;/em&gt; 으로 &lt;a href=&quot;#mimetypes.guess_type&quot;&gt; &lt;code&gt;guess_type()&lt;/code&gt; &lt;/a&gt; . &lt;em&gt;type&lt;/em&gt; 에 대해 확장명을 추측 할 수 없으면 &lt;code&gt;None&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6ccac2e946e402380d6bff133365e1d281155811" translate="yes" xml:space="preserve">
          <source>Guess the extensions for a file based on its MIME type, given by &lt;em&gt;type&lt;/em&gt;. The return value is a list of strings giving all possible filename extensions, including the leading dot (&lt;code&gt;'.'&lt;/code&gt;). The extensions are not guaranteed to have been associated with any particular data stream, but would be mapped to the MIME type &lt;em&gt;type&lt;/em&gt; by &lt;a href=&quot;#mimetypes.guess_type&quot;&gt;&lt;code&gt;guess_type()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">주어진의 MIME 유형에 따라 파일에 대한 확장을 추측 &lt;em&gt;유형&lt;/em&gt; . 반환 값은 선행 점 ( &lt;code&gt;'.'&lt;/code&gt; )을 포함하여 가능한 모든 파일 이름 확장자를 제공하는 문자열 목록입니다 . 확장은 특정 데이터 스트림과 연관이 보장되지 않지만, MIME 타입에 매핑 될 것이다 &lt;em&gt;유형&lt;/em&gt; 으로 &lt;a href=&quot;#mimetypes.guess_type&quot;&gt; &lt;code&gt;guess_type()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a84a6acc761ddfa3d7bc427639d3f7d94a20bd3e" translate="yes" xml:space="preserve">
          <source>Guess the type of a file based on its filename, path or URL, given by &lt;em&gt;url&lt;/em&gt;. URL can be a string or a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;url에&lt;/em&gt; 의해 주어진 파일 이름, 경로 또는 URL을 기반으로 파일 유형을 추측하십시오 . URL은 문자열 또는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;경로와 유사한 객체 일 수&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="507c3c7d81873d3b1e502a13ef175f53975955cf" translate="yes" xml:space="preserve">
          <source>Guess the type of a file based on its filename, path or URL, given by &lt;em&gt;url&lt;/em&gt;. URL can be a string or a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;.</source>
          <target state="translated">Guess the type of a file based on its filename, path or URL, given by &lt;em&gt;url&lt;/em&gt;. URL can be a string or a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8da0077fda7c3873b2109d7ff97c49289bade98b" translate="yes" xml:space="preserve">
          <source>Guides and Tutorials</source>
          <target state="translated">가이드 및 튜토리얼</target>
        </trans-unit>
        <trans-unit id="2ce51484b12a05894f2f9727173e21a3b67e36f9" translate="yes" xml:space="preserve">
          <source>Gustavo Niemeyer</source>
          <target state="translated">구스타보 니마 이어</target>
        </trans-unit>
        <trans-unit id="50d7c437b1b17589574e811d5085ed34a4b22340" translate="yes" xml:space="preserve">
          <source>HELO</source>
          <target state="translated">HELO</target>
        </trans-unit>
        <trans-unit id="ee7929cef18bd1007cbda8ca0208846f8487ec62" translate="yes" xml:space="preserve">
          <source>HELP</source>
          <target state="translated">HELP</target>
        </trans-unit>
        <trans-unit id="7b58c8c80353422c3ae74a11c240a7ae53c8ea23" translate="yes" xml:space="preserve">
          <source>HKEY_* Constants</source>
          <target state="translated">HKEY_ * 상수</target>
        </trans-unit>
        <trans-unit id="96cab112e995ad59671872f1ed4820558b189d98" translate="yes" xml:space="preserve">
          <source>HTCPCP/1.0 &lt;a href=&quot;https://tools.ietf.org/html/rfc2324.html&quot; id=&quot;index-41&quot;&gt;&lt;strong&gt;RFC 2324&lt;/strong&gt;&lt;/a&gt;, Section 2.3.2</source>
          <target state="translated">HTCPCP / 1.0 &lt;a href=&quot;https://tools.ietf.org/html/rfc2324.html&quot; id=&quot;index-41&quot;&gt;&lt;strong&gt;RFC 2324&lt;/strong&gt;&lt;/a&gt; , 섹션 2.3.2</target>
        </trans-unit>
        <trans-unit id="a6a018281adec46cfdc4ecaba3d91384521c02b2" translate="yes" xml:space="preserve">
          <source>HTMLParser Methods</source>
          <target state="translated">HTMLParser 메소드</target>
        </trans-unit>
        <trans-unit id="83800fbcaacbc135f6269ae99e3235f1de3f5cf5" translate="yes" xml:space="preserve">
          <source>HTTP cookie classes, principally useful for server-side code. The &lt;a href=&quot;#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http.cookies#module-http.cookies&quot;&gt;&lt;code&gt;http.cookies&lt;/code&gt;&lt;/a&gt; modules do not depend on each other.</source>
          <target state="translated">HTTP 쿠키 클래스는 주로 서버 측 코드에 유용합니다. &lt;a href=&quot;#module-http.cookiejar&quot;&gt; &lt;code&gt;http.cookiejar&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;http.cookies#module-http.cookies&quot;&gt; &lt;code&gt;http.cookies&lt;/code&gt; &lt;/a&gt; 모듈은 서로에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7044d88f7a2347a2f5b8dbb82ed197be53ebf64a" translate="yes" xml:space="preserve">
          <source>HTTP cookie handling for web &lt;em&gt;clients&lt;/em&gt;. The &lt;a href=&quot;http.cookiejar#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#module-http.cookies&quot;&gt;&lt;code&gt;http.cookies&lt;/code&gt;&lt;/a&gt; modules do not depend on each other.</source>
          <target state="translated">웹 &lt;em&gt;클라이언트를&lt;/em&gt; 위한 HTTP 쿠키 처리 . &lt;a href=&quot;http.cookiejar#module-http.cookiejar&quot;&gt; &lt;code&gt;http.cookiejar&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#module-http.cookies&quot;&gt; &lt;code&gt;http.cookies&lt;/code&gt; &lt;/a&gt; 모듈은 서로에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5b613f0c29f1f2272729222b79dd0363bf366e91" translate="yes" xml:space="preserve">
          <source>HTTP protocol version used by server. 10 for HTTP/1.0, 11 for HTTP/1.1.</source>
          <target state="translated">서버가 사용하는 HTTP 프로토콜 버전. HTTP / 1.0의 경우 10, HTTP / 1.1의 경우 11</target>
        </trans-unit>
        <trans-unit id="4786bcad00754f90607cd03b51ae4f2dfc8958ec" translate="yes" xml:space="preserve">
          <source>HTTP status codes</source>
          <target state="translated">HTTP 상태 코드</target>
        </trans-unit>
        <trans-unit id="b9c5e6f4000e0c7c081dcb3f748956d95b414dc8" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.2.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.2.1</target>
        </trans-unit>
        <trans-unit id="29f12a3eb7f79bf4b63ef96a35c570dc01cd4e0a" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.6</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.6</target>
        </trans-unit>
        <trans-unit id="55ce7ae41bf5482f4b02d07a75916731331b4ed7" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.1</target>
        </trans-unit>
        <trans-unit id="c6001847347dc42236eb4f151e2ba2166e820072" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.1</target>
        </trans-unit>
        <trans-unit id="37a2b8e98ce9a80ff50cc2187f3d5f66d4acf192" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.2</target>
        </trans-unit>
        <trans-unit id="c3098211d5734c1bd837d71e418811a808bbe145" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.2</target>
        </trans-unit>
        <trans-unit id="4c4886664f75483fc582d91c7885848287888d95" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.3</target>
        </trans-unit>
        <trans-unit id="5bf2c9ebb7e527daf0b8ddb5c47c8507dbd057cd" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.3</target>
        </trans-unit>
        <trans-unit id="24d12da9a592b38862e6bb5010136705da6a12e0" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-17&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.4</target>
        </trans-unit>
        <trans-unit id="31b3927924c73e0034420d27dd558df4a011295b" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.4</target>
        </trans-unit>
        <trans-unit id="bc2df2a2575cf8642877678203bd4860c3893ed2" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.5</target>
        </trans-unit>
        <trans-unit id="a04d14d65cbc4a943cd4f902fac7148c0f14008b" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.2.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.2.2</target>
        </trans-unit>
        <trans-unit id="8415c6748253bb75e93a0c13272621156bd7b275" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.5</target>
        </trans-unit>
        <trans-unit id="60d7f81d19333e5f74e5e2e3d6de6347b79c2b62" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.7</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.7</target>
        </trans-unit>
        <trans-unit id="d487f04e085d4d4f69bf45e3ae6385ad9c7d42ff" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.4.7</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.4.7</target>
        </trans-unit>
        <trans-unit id="8ac7152bb59f9e6637cda1fc09f358e6db1eb3b3" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.1</target>
        </trans-unit>
        <trans-unit id="4e2d515130ae64718bcf33703bf66893df4a7f99" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.1</target>
        </trans-unit>
        <trans-unit id="e307f3ae76be18f3cf56334d2d1203897c84c6ad" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-24&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-24&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.2</target>
        </trans-unit>
        <trans-unit id="0441c744180765caf2924bf4d360c0d4a5f9453c" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.2</target>
        </trans-unit>
        <trans-unit id="ee054e8754930b1255d65d88b0043dc9abf8e0d4" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-25&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.3</target>
        </trans-unit>
        <trans-unit id="d91710f64d1139f714843f050ab4774c09259780" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-26&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-26&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.3</target>
        </trans-unit>
        <trans-unit id="39a70a33114bc2491f95a95af6970771b5372ba1" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-26&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-26&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.4</target>
        </trans-unit>
        <trans-unit id="7dd9e1711e867c41f1eef5d77f0fe368f7d67c0b" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-27&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-27&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.4</target>
        </trans-unit>
        <trans-unit id="384a5fc0754896060e5523e9ce8e1e038c2bb546" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-27&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-27&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.5</target>
        </trans-unit>
        <trans-unit id="420c003338ac8397aecafb33276c8d2b5640c26a" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-28&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-28&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.5</target>
        </trans-unit>
        <trans-unit id="03716883f4ec8e56d07cf1ed63059674945a1990" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-28&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.6</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-28&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.6</target>
        </trans-unit>
        <trans-unit id="71c6460a2d96431280764cbee07512dc906de697" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-29&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.6</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-29&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.6</target>
        </trans-unit>
        <trans-unit id="f9958b9874f5f09f1d26017ef8c8b19a1d5b34a9" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-30&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.7</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-30&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.7</target>
        </trans-unit>
        <trans-unit id="f2d662dcb36c3f3d936c1e8caefdd4282a264eb2" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-31&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.7</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-31&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.7</target>
        </trans-unit>
        <trans-unit id="f6b89763f9eecf951499a41c4f4e0c65e612b9ed" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-31&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.8</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-31&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.8</target>
        </trans-unit>
        <trans-unit id="b771beb6824cee55b869a4778e91a5d6021356d1" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-32&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.8</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-32&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.8</target>
        </trans-unit>
        <trans-unit id="84de879f447b29b467c932ff8b9ce36e8e1a4f7b" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-32&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.9</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-32&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.9</target>
        </trans-unit>
        <trans-unit id="2b6fd84ea11b2f50a32335158a9ab3686eb9f2f9" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-33&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.10</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-33&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.10</target>
        </trans-unit>
        <trans-unit id="bba1d963a3f1874db5ee603aacdcf24bcc26ffb0" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-33&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.9</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-33&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.9</target>
        </trans-unit>
        <trans-unit id="63476284c10469e4ceee6decb44cc46856edc820" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-34&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.10</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-34&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.10</target>
        </trans-unit>
        <trans-unit id="335ff0bcffd8b0fd0de1378d22cd8e84e89a4261" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-35&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.11</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-35&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.11</target>
        </trans-unit>
        <trans-unit id="27852d9dba58e062a9eb9e35f45cf98958bf1437" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-36&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.11</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-36&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.11</target>
        </trans-unit>
        <trans-unit id="e01d39961a26d5b9c9f6dd4ebe218724de832d1e" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-36&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.12</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-36&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.12</target>
        </trans-unit>
        <trans-unit id="dd2b51807cd20536d4decdc9a98b2422f3539192" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-37&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.12</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-37&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.12</target>
        </trans-unit>
        <trans-unit id="11a8ebffb476f28642499a3354379840b4e688ed" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-37&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.13</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-37&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.13</target>
        </trans-unit>
        <trans-unit id="633ee1ffd6471319838a56fb164579af0f0d551d" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-38&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.13</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-38&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.13</target>
        </trans-unit>
        <trans-unit id="8e61d87a1209863b433f52f01e48ec24085ebde7" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-39&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.14</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-39&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.14</target>
        </trans-unit>
        <trans-unit id="cd573541605da49c903c6cc03bf2f770fd72ff49" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.1</target>
        </trans-unit>
        <trans-unit id="5468c195e8b85b2837df0693d6ee3c29d9b31167" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-40&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.14</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-40&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.14</target>
        </trans-unit>
        <trans-unit id="e607a0572ff848176765a17465646cd7950bdd53" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-44&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.15</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-44&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.15</target>
        </trans-unit>
        <trans-unit id="46a5afc722af0b47d46ca29d36f0163b759d54b6" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-47&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.5.15</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-47&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.5.15</target>
        </trans-unit>
        <trans-unit id="3150efe460b4acc154ce6666bc5e252941006cb4" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-49&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-49&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.1</target>
        </trans-unit>
        <trans-unit id="2a46410a47353048b03f5b805008442b2e5d0303" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.1</target>
        </trans-unit>
        <trans-unit id="c1ee3d04c1d4b378d8083b355afbe1b1fe506ef6" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.2</target>
        </trans-unit>
        <trans-unit id="f79ee66680bc43a42866e96f43db95cc0ed8752d" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-50&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-50&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.2</target>
        </trans-unit>
        <trans-unit id="99e7084ca12948106471b49b2622d019645afab7" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-51&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-51&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.3</target>
        </trans-unit>
        <trans-unit id="cc15d9e45df9875f7ed90c364980bd133aa5c9bd" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-52&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-52&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.1</target>
        </trans-unit>
        <trans-unit id="e4759171c1fb4967d60b990bb93676987a5cf4b3" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-52&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-52&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.4</target>
        </trans-unit>
        <trans-unit id="2513cc44cf520c2c6abb2582c1cecfb5587cff77" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-53&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-53&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.2</target>
        </trans-unit>
        <trans-unit id="2fac3411ccae7fcec4f1663d7e5bae7f78f4f902" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-53&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-53&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.5</target>
        </trans-unit>
        <trans-unit id="67dc6bb01e21fd2946874e209a882469b9faa51f" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-54&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-54&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.3</target>
        </trans-unit>
        <trans-unit id="30145c38c7c08a7aa07868063aec66cda90b7250" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-54&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.6</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-54&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.6</target>
        </trans-unit>
        <trans-unit id="6711357c64ad17ae76b88491db3418391fdccd21" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-55&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-55&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.4</target>
        </trans-unit>
        <trans-unit id="928d9148cd3d9c1dc5d18e3e773e79167e81d6ce" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-56&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-56&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.5</target>
        </trans-unit>
        <trans-unit id="914592ed4f45b582d8946c9dabca15babb61276e" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-57&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.6.6</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-57&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.6.6</target>
        </trans-unit>
        <trans-unit id="d296ec04c6aa2c8990ecaf30d0fda46de4b20e05" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.2</target>
        </trans-unit>
        <trans-unit id="ad10d61f8497e284c4e42f54b87d7befb7f7bb4a" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.3</target>
        </trans-unit>
        <trans-unit id="480c01101804cc3ffe33fa90e92915edb25ea820" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.3</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.3</target>
        </trans-unit>
        <trans-unit id="570e8e441bb712b3ceaf16252a0b5f014e0d1b50" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-7&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.4</target>
        </trans-unit>
        <trans-unit id="6d6e6bd42a769cdd9e8a6e61018514ea19abeb8e" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.4</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.4</target>
        </trans-unit>
        <trans-unit id="ffad6c577656adc8500d58706fc5478fe1bef909" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.5</target>
        </trans-unit>
        <trans-unit id="26d356f58fccfca9ea2ba39fccdf60c0a452abad" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.5</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.5</target>
        </trans-unit>
        <trans-unit id="b02e682b1572382c00b992fa789f6d9af0faa90e" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt;, Section 6.3.6</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 7231&lt;/strong&gt;&lt;/a&gt; , 섹션 6.3.6</target>
        </trans-unit>
        <trans-unit id="750f03d3a04b5b9fb5badbdc798f143092e85f5a" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt;, Section 4.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt; , 섹션 4.1</target>
        </trans-unit>
        <trans-unit id="d31f87249f9ac6b3a6c5a0e02ad1611b1a35f693" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt;, Section 4.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt; , 섹션 4.1</target>
        </trans-unit>
        <trans-unit id="aa8c1ccd1c55a0e2f0c2a76c3826c6ef56d61275" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-34&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt;, Section 4.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-34&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt; , 섹션 4.2</target>
        </trans-unit>
        <trans-unit id="a8011db55abddcf8476b0637c8e7c55334143935" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-35&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt;, Section 4.2</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7232.html&quot; id=&quot;index-35&quot;&gt;&lt;strong&gt;RFC 7232&lt;/strong&gt;&lt;/a&gt; , 섹션 4.2</target>
        </trans-unit>
        <trans-unit id="4adc18410cbba25856c6bdd9448a7ad840bf05fe" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt;, Section 4.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt; , 섹션 4.1</target>
        </trans-unit>
        <trans-unit id="d5febe58eee83ff18e604c4304fe23b54fa31e28" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt;, Section 4.1</source>
          <target state="translated">HTTP / 1.1 &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt; , 섹션 4.1</target>
        </trans-unit>
        <trans-unit id="c20505e0555301a7bc4ee1331f3b2d926b5473fd" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 Authentication &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt;, Section 3.1</source>
          <target state="translated">HTTP / 1.1 인증 &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt; , 섹션 3.1</target>
        </trans-unit>
        <trans-unit id="7977d74c13545e73effea988330ac6b63ee9cb1c" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 Authentication &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-24&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt;, Section 3.1</source>
          <target state="translated">HTTP / 1.1 인증 &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-24&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt; , 섹션 3.1</target>
        </trans-unit>
        <trans-unit id="69cf6de3769ba9d495eb3b6efa56d5f7957cdb38" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 Authentication &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-29&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt;, Section 3.2</source>
          <target state="translated">HTTP / 1.1 인증 &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-29&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt; , 섹션 3.2</target>
        </trans-unit>
        <trans-unit id="4f5efe88524cd47c6aace688245a5f8a70bb43e8" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 Authentication &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-30&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt;, Section 3.2</source>
          <target state="translated">HTTP / 1.1 인증 &lt;a href=&quot;https://tools.ietf.org/html/rfc7235.html&quot; id=&quot;index-30&quot;&gt;&lt;strong&gt;RFC 7235&lt;/strong&gt;&lt;/a&gt; , 섹션 3.2</target>
        </trans-unit>
        <trans-unit id="a660a28415a0784612682b4336f837d4de547889" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 Range Requests &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-38&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt;, Section 4.4</source>
          <target state="translated">HTTP / 1.1 범위 요청 &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-38&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt; , 섹션 4.4</target>
        </trans-unit>
        <trans-unit id="dd9a183fc7161ea1598ff679b0c09f245d9dc5e9" translate="yes" xml:space="preserve">
          <source>HTTP/1.1 Range Requests &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-39&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt;, Section 4.4</source>
          <target state="translated">HTTP / 1.1 범위 요청 &lt;a href=&quot;https://tools.ietf.org/html/rfc7233.html&quot; id=&quot;index-39&quot;&gt;&lt;strong&gt;RFC 7233&lt;/strong&gt;&lt;/a&gt; , 섹션 4.4</target>
        </trans-unit>
        <trans-unit id="c8aff230069c68b6481e911a7a37adbc1649f530" translate="yes" xml:space="preserve">
          <source>HTTP/2 &lt;a href=&quot;https://tools.ietf.org/html/rfc7540.html&quot; id=&quot;index-40&quot;&gt;&lt;strong&gt;RFC 7540&lt;/strong&gt;&lt;/a&gt;, Section 9.1.2</source>
          <target state="translated">HTTP / 2 &lt;a href=&quot;https://tools.ietf.org/html/rfc7540.html&quot; id=&quot;index-40&quot;&gt;&lt;strong&gt;RFC 7540&lt;/strong&gt;&lt;/a&gt; , 섹션 9.1.2</target>
        </trans-unit>
        <trans-unit id="eeef913128bc86c058513153ebbc2dbaabb4be11" translate="yes" xml:space="preserve">
          <source>HTTP/2 &lt;a href=&quot;https://tools.ietf.org/html/rfc7540.html&quot; id=&quot;index-42&quot;&gt;&lt;strong&gt;RFC 7540&lt;/strong&gt;&lt;/a&gt;, Section 9.1.2</source>
          <target state="translated">HTTP / 2 &lt;a href=&quot;https://tools.ietf.org/html/rfc7540.html&quot; id=&quot;index-42&quot;&gt;&lt;strong&gt;RFC 7540&lt;/strong&gt;&lt;/a&gt; , 섹션 9.1.2</target>
        </trans-unit>
        <trans-unit id="9d26016dae7061b85a9ca989c851ab31c4415626" translate="yes" xml:space="preserve">
          <source>HTTPBasicAuthHandler Objects</source>
          <target state="translated">HTTPBasicAuthHandler 객체</target>
        </trans-unit>
        <trans-unit id="128e3ebc7076bef1925dd717a403a4dc3d9659f4" translate="yes" xml:space="preserve">
          <source>HTTPConnection Objects</source>
          <target state="translated">HTTPConnection 객체</target>
        </trans-unit>
        <trans-unit id="992be6a3f16ce33effbee02a1156178fc68cb00e" translate="yes" xml:space="preserve">
          <source>HTTPCookieProcessor Objects</source>
          <target state="translated">HTTPCookieProcessor 객체</target>
        </trans-unit>
        <trans-unit id="1e8ebe01f2e245be530b383e742fd400bed10252" translate="yes" xml:space="preserve">
          <source>HTTPDigestAuthHandler Objects</source>
          <target state="translated">HTTPDigestAuthHandler 객체</target>
        </trans-unit>
        <trans-unit id="f0b6e00c82a6ffc0f054e5c4ca84fd58770cdaf0" translate="yes" xml:space="preserve">
          <source>HTTPErrorProcessor Objects</source>
          <target state="translated">HTTPErrorProcessor 객체</target>
        </trans-unit>
        <trans-unit id="79343075e3ae1afb1578a564ea8e6d0d84b3eee2" translate="yes" xml:space="preserve">
          <source>HTTPHandler</source>
          <target state="translated">HTTPHandler</target>
        </trans-unit>
        <trans-unit id="a08a17af60574eff9b7ee5ac7b2db3a31d02f832" translate="yes" xml:space="preserve">
          <source>HTTPHandler Objects</source>
          <target state="translated">HTTPHandler 객체</target>
        </trans-unit>
        <trans-unit id="447f588678db2da1df1b94aa5459163954ff9120" translate="yes" xml:space="preserve">
          <source>HTTPMessage Objects</source>
          <target state="translated">HTTPMessage 객체</target>
        </trans-unit>
        <trans-unit id="301815c67c8cd0ad1a930659ccda2ea0cd020278" translate="yes" xml:space="preserve">
          <source>HTTPPasswordMgr Objects</source>
          <target state="translated">HTTPPasswordMgr 객체</target>
        </trans-unit>
        <trans-unit id="3c6fce6dce26799f5d8d6e86061bb672133362b3" translate="yes" xml:space="preserve">
          <source>HTTPPasswordMgrWithPriorAuth Objects</source>
          <target state="translated">HTTPPasswordMgrWithPriorAuth 객체</target>
        </trans-unit>
        <trans-unit id="c368139a6cae206daecec5d01f7387777ed6220b" translate="yes" xml:space="preserve">
          <source>HTTPRedirectHandler Objects</source>
          <target state="translated">HTTPRedirectHandler 객체</target>
        </trans-unit>
        <trans-unit id="65a9b485d9c99e924fdb190254a5a76d482c4751" translate="yes" xml:space="preserve">
          <source>HTTPResponse Objects</source>
          <target state="translated">HTTPResponse 객체</target>
        </trans-unit>
        <trans-unit id="47ab16ab140fbbc7564373cc76986157e8f07f7c" translate="yes" xml:space="preserve">
          <source>HTTPS support is only available if Python was compiled with SSL support (through the &lt;a href=&quot;ssl#module-ssl&quot;&gt;&lt;code&gt;ssl&lt;/code&gt;&lt;/a&gt; module).</source>
          <target state="translated">HTTPS 지원은 Python이 SSL 지원 ( &lt;a href=&quot;ssl#module-ssl&quot;&gt; &lt;code&gt;ssl&lt;/code&gt; &lt;/a&gt; 모듈을 통해)으로 컴파일 된 경우에만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="987667d8eaeca62f8d43a6cb0520e0a03563e9fc" translate="yes" xml:space="preserve">
          <source>HTTPSHandler Objects</source>
          <target state="translated">HTTPSHandler 객체</target>
        </trans-unit>
        <trans-unit id="321702e8b1e7bda4040e4dd8768fe5092626cce6" translate="yes" xml:space="preserve">
          <source>Handle DTD events.</source>
          <target state="translated">DTD 이벤트를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="56d20071c05406e234f9cf1190e9affc6ac1aedb" translate="yes" xml:space="preserve">
          <source>Handle a &lt;em&gt;defect&lt;/em&gt; found on &lt;em&gt;obj&lt;/em&gt;. When the email package calls this method, &lt;em&gt;defect&lt;/em&gt; will always be a subclass of &lt;code&gt;Defect&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;obj&lt;/em&gt; 에서 발견 된 &lt;em&gt;결함을&lt;/em&gt; 처리하십시오 . 전자 메일 패키지가이 메소드를 호출하면, &lt;em&gt;결함&lt;/em&gt; 은 항상 &lt;code&gt;Defect&lt;/code&gt; 의 서브 클래스가 됩니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="107e56fca7a09c74f23045e39860024fb9eaed74" translate="yes" xml:space="preserve">
          <source>Handle a notation declaration event.</source>
          <target state="translated">표기법 선언 이벤트를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="6d380080eaa511f673e257b847cc06cd190a3031" translate="yes" xml:space="preserve">
          <source>Handle a record.</source>
          <target state="translated">기록을 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="1308c12d298ebc17be8e6f7205d8f3bfc4b593f5" translate="yes" xml:space="preserve">
          <source>Handle an XML-RPC request. If &lt;em&gt;request_text&lt;/em&gt; is given, it should be the POST data provided by the HTTP server, otherwise the contents of stdin will be used.</source>
          <target state="translated">XML-RPC 요청을 처리하십시오. 경우 &lt;em&gt;request_text가&lt;/em&gt; 주어, 그렇지 않으면 표준 입력의 내용이 사용되는 HTTP 서버에서 제공하는 POST 데이터를해야합니다.</target>
        </trans-unit>
        <trans-unit id="9d8e258c0b6e5d1168969c669327feb855d41c04" translate="yes" xml:space="preserve">
          <source>Handle an authentication request by getting a user/password pair, and re-trying the request. &lt;em&gt;authreq&lt;/em&gt; should be the name of the header where the information about the realm is included in the request, &lt;em&gt;host&lt;/em&gt; specifies the URL and path to authenticate for, &lt;em&gt;req&lt;/em&gt; should be the (failed) &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object, and &lt;em&gt;headers&lt;/em&gt; should be the error headers.</source>
          <target state="translated">사용자 / 암호 쌍을 가져오고 요청을 다시 시도하여 인증 요청을 처리하십시오. &lt;em&gt;authreq&lt;/em&gt; 는 영역에 대한 정보가 요청에 포함 된 헤더의 이름이어야하고, &lt;em&gt;호스트&lt;/em&gt; 는 인증 할 URL과 경로를 지정하고, &lt;em&gt;req&lt;/em&gt; 는 (실패한) &lt;a href=&quot;#urllib.request.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 오브젝트이고 &lt;em&gt;헤더&lt;/em&gt; 는 오류 헤더 여야합니다.</target>
        </trans-unit>
        <trans-unit id="062e437b01efebe8849f8f8ced1f07810ec988e5" translate="yes" xml:space="preserve">
          <source>Handle an error of the given protocol. This will call the registered error handlers for the given protocol with the given arguments (which are protocol specific). The HTTP protocol is a special case which uses the HTTP response code to determine the specific error handler; refer to the &lt;code&gt;http_error_&amp;lt;type&amp;gt;()&lt;/code&gt; methods of the handler classes.</source>
          <target state="translated">주어진 프로토콜의 오류를 처리하십시오. 이것은 주어진 인수 (프로토콜 특정)와 함께 주어진 프로토콜에 대해 등록 된 오류 처리기를 호출합니다. HTTP 프로토콜은 HTTP 응답 코드를 사용하여 특정 오류 처리기를 결정하는 특수한 경우입니다. 핸들러 클래스 의 &lt;code&gt;http_error_&amp;lt;type&amp;gt;()&lt;/code&gt; 메소드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a276c3fe5b84b1615109b01fd49c20d2b394e289" translate="yes" xml:space="preserve">
          <source>Handle an unparsed entity declaration event.</source>
          <target state="translated">구문 분석되지 않은 엔티티 선언 이벤트를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="88220eb8720a2bc1735b528b203386438a372258" translate="yes" xml:space="preserve">
          <source>Handle an unraisable exception.</source>
          <target state="translated">합당한 예외를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="1060bc6c7b88726a08b50df11671c5366cd9d24c" translate="yes" xml:space="preserve">
          <source>Handle authentication with the proxy. &lt;em&gt;password_mgr&lt;/em&gt;, if given, should be something that is compatible with &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt;&lt;code&gt;HTTPPasswordMgr&lt;/code&gt;&lt;/a&gt;; refer to section &lt;a href=&quot;#http-password-mgr&quot;&gt;HTTPPasswordMgr Objects&lt;/a&gt; for information on the interface that must be supported.</source>
          <target state="translated">프록시로 인증을 처리하십시오. &lt;em&gt;password_mgr&lt;/em&gt; 이 지정된 경우 &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt; &lt;code&gt;HTTPPasswordMgr&lt;/code&gt; &lt;/a&gt; 과 호환 가능한 것이어야합니다 . 지원해야하는 인터페이스에 대한 정보는 &lt;a href=&quot;#http-password-mgr&quot;&gt;HTTPPasswordMgr 오브젝트&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="16dc31a241c55ceeae234120336a22eafb971e87" translate="yes" xml:space="preserve">
          <source>Handle authentication with the remote host. &lt;em&gt;password_mgr&lt;/em&gt;, if given, should be something that is compatible with &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt;&lt;code&gt;HTTPPasswordMgr&lt;/code&gt;&lt;/a&gt;; refer to section &lt;a href=&quot;#http-password-mgr&quot;&gt;HTTPPasswordMgr Objects&lt;/a&gt; for information on the interface that must be supported. HTTPBasicAuthHandler will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; when presented with a wrong Authentication scheme.</source>
          <target state="translated">원격 호스트로 인증을 처리하십시오. &lt;em&gt;password_mgr&lt;/em&gt; 이 지정된 경우 &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt; &lt;code&gt;HTTPPasswordMgr&lt;/code&gt; &lt;/a&gt; 과 호환 가능한 것이어야합니다 . 지원해야하는 인터페이스에 대한 정보는 &lt;a href=&quot;#http-password-mgr&quot;&gt;HTTPPasswordMgr 오브젝트&lt;/a&gt; 섹션을 참조하십시오 . 잘못된 인증 체계가 표시 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt; HTTPBasicAuthHandler가 ValueError를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="099ecb73fd6f904c0f4b5605d72f0a36103ca94d" translate="yes" xml:space="preserve">
          <source>Handle authentication with the remote host. &lt;em&gt;password_mgr&lt;/em&gt;, if given, should be something that is compatible with &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt;&lt;code&gt;HTTPPasswordMgr&lt;/code&gt;&lt;/a&gt;; refer to section &lt;a href=&quot;#http-password-mgr&quot;&gt;HTTPPasswordMgr Objects&lt;/a&gt; for information on the interface that must be supported. When both Digest Authentication Handler and Basic Authentication Handler are both added, Digest Authentication is always tried first. If the Digest Authentication returns a 40x response again, it is sent to Basic Authentication handler to Handle. This Handler method will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; when presented with an authentication scheme other than Digest or Basic.</source>
          <target state="translated">원격 호스트로 인증을 처리하십시오. &lt;em&gt;password_mgr&lt;/em&gt; 이 지정된 경우 &lt;a href=&quot;#urllib.request.HTTPPasswordMgr&quot;&gt; &lt;code&gt;HTTPPasswordMgr&lt;/code&gt; &lt;/a&gt; 과 호환 가능한 것이어야합니다 . 지원해야하는 인터페이스에 대한 정보는 &lt;a href=&quot;#http-password-mgr&quot;&gt;HTTPPasswordMgr 오브젝트&lt;/a&gt; 섹션을 참조하십시오 . 다이제스트 인증 처리기와 기본 인증 처리기가 모두 추가되면 다이제스트 인증이 항상 먼저 시도됩니다. 다이제스트 인증이 다시 40x 응답을 반환하면 기본 인증 처리기로 보내 처리됩니다. 이 처리기 메서드는 다이제스트 또는 기본 이외의 인증 체계가 제공 될 때 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="2e877e234920ac6dd114466dccb707642ee7aca1" translate="yes" xml:space="preserve">
          <source>Handle how a breakpoint must be removed when it is a temporary one.</source>
          <target state="translated">중단 점이 일시적인 경우 중단 점을 제거하는 방법을 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="c275e80e41cb467befe8a992aa8ef142dc1b4cd4" translate="yes" xml:space="preserve">
          <source>Handle objects can be converted to an integer (e.g., using the built-in &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/a&gt; function), in which case the underlying Windows handle value is returned. You can also use the &lt;a href=&quot;#winreg.PyHKEY.Detach&quot;&gt;&lt;code&gt;Detach()&lt;/code&gt;&lt;/a&gt; method to return the integer handle, and also disconnect the Windows handle from the handle object.</source>
          <target state="translated">핸들 객체를 정수로 변환 할 수 있습니다 (예 : 내장 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int()&lt;/code&gt; &lt;/a&gt; 함수 사용).이 경우 기본 Windows 핸들 값이 반환됩니다. 당신은 또한 사용할 수 &lt;a href=&quot;#winreg.PyHKEY.Detach&quot;&gt; &lt;code&gt;Detach()&lt;/code&gt; &lt;/a&gt; 핸들 객체에서 윈도우 핸들을 정수 핸들을 반환하고, 또한 분리 방법.</target>
        </trans-unit>
        <trans-unit id="8385c6fa8af7de5af62c9fd3a69dd17642c7c9d1" translate="yes" xml:space="preserve">
          <source>Handle objects provide semantics for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; &amp;ndash; thus</source>
          <target state="translated">핸들 객체는 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt; &lt;code&gt;__bool__()&lt;/code&gt; &lt;/a&gt; 의미를 제공합니다. 따라서</target>
        </trans-unit>
        <trans-unit id="04fe15c2cc4ea50bab41040c7c8bf63c4e201741" translate="yes" xml:space="preserve">
          <source>Handle objects provide semantics for &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; &amp;ndash; thus</source>
          <target state="translated">핸들 객체는 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bool__&quot;&gt; &lt;code&gt;__bool__()&lt;/code&gt; &lt;/a&gt; 대한 의미를 제공 하므로</target>
        </trans-unit>
        <trans-unit id="2afaf4f89a5a11064c833154986f2f5a84c15945" translate="yes" xml:space="preserve">
          <source>Handle requests until an explicit &lt;a href=&quot;#socketserver.BaseServer.shutdown&quot;&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/a&gt; request. Poll for shutdown every &lt;em&gt;poll_interval&lt;/em&gt; seconds. Ignores the &lt;a href=&quot;#socketserver.BaseServer.timeout&quot;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt; attribute. It also calls &lt;a href=&quot;#socketserver.BaseServer.service_actions&quot;&gt;&lt;code&gt;service_actions()&lt;/code&gt;&lt;/a&gt;, which may be used by a subclass or mixin to provide actions specific to a given service. For example, the &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt;&lt;code&gt;ForkingMixIn&lt;/code&gt;&lt;/a&gt; class uses &lt;a href=&quot;#socketserver.BaseServer.service_actions&quot;&gt;&lt;code&gt;service_actions()&lt;/code&gt;&lt;/a&gt; to clean up zombie child processes.</source>
          <target state="translated">명시 적 &lt;a href=&quot;#socketserver.BaseServer.shutdown&quot;&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/a&gt; 요청까지 요청을 처리하십시오 . &lt;em&gt;poll_interval&lt;/em&gt; 초 마다 시스템 종료를 폴링합니다 . &lt;a href=&quot;#socketserver.BaseServer.timeout&quot;&gt; &lt;code&gt;timeout&lt;/code&gt; &lt;/a&gt; 속성을 무시 합니다. 또한 &lt;a href=&quot;#socketserver.BaseServer.service_actions&quot;&gt; &lt;code&gt;service_actions()&lt;/code&gt; &lt;/a&gt; 호출 하는데, 서브 클래스 또는 믹스 인에서 특정 서비스에 특정한 동작을 제공하는 데 사용될 수 있습니다. 예를 들어 &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt; &lt;code&gt;ForkingMixIn&lt;/code&gt; &lt;/a&gt; 클래스는 &lt;a href=&quot;#socketserver.BaseServer.service_actions&quot;&gt; &lt;code&gt;service_actions()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 좀비 자식 프로세스를 정리합니다.</target>
        </trans-unit>
        <trans-unit id="bb6c587f11689be2d6937f95e7f78dacb7880c2d" translate="yes" xml:space="preserve">
          <source>Handle uncaught exception raised by &lt;a href=&quot;#threading.Thread.run&quot;&gt;&lt;code&gt;Thread.run()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#threading.Thread.run&quot;&gt; &lt;code&gt;Thread.run()&lt;/code&gt; &lt;/a&gt; 의해 발생 된 포착되지 않은 예외를 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="be02a9f775c20e09c3a657bc25211bd693cc8d23" translate="yes" xml:space="preserve">
          <source>Handler Objects</source>
          <target state="translated">핸들러 객체</target>
        </trans-unit>
        <trans-unit id="7eb34507475372acbffdf6d92308c8251b5e3824" translate="yes" xml:space="preserve">
          <source>Handlers have the following attributes and methods. Note that &lt;a href=&quot;#logging.Handler&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; is never instantiated directly; this class acts as a base for more useful subclasses. However, the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method in subclasses needs to call &lt;a href=&quot;#logging.Handler.__init__&quot;&gt;&lt;code&gt;Handler.__init__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">핸들러에는 다음과 같은 속성과 메소드가 있습니다. 참고 &lt;a href=&quot;#logging.Handler&quot;&gt; &lt;code&gt;Handler&lt;/code&gt; &lt;/a&gt; 인스턴스를 직접 생성되지 않습니다; 이 클래스는보다 유용한 서브 클래스의 기본 역할을합니다. 그러나 서브 클래스 의 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt; 메소드는 &lt;a href=&quot;#logging.Handler.__init__&quot;&gt; &lt;code&gt;Handler.__init__()&lt;/code&gt; &lt;/a&gt; 을 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9020180afd2fb0ac62ea55b34dabac5451e63a1d" translate="yes" xml:space="preserve">
          <source>Handlers have the following attributes and methods. Note that &lt;a href=&quot;#logging.Handler&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; is never instantiated directly; this class acts as a base for more useful subclasses. However, the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method in subclasses needs to call &lt;a href=&quot;#logging.Handler.__init__&quot;&gt;&lt;code&gt;Handler.__init__()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">핸들러에는 다음과 같은 속성과 메소드가 있습니다. 참고 &lt;a href=&quot;#logging.Handler&quot;&gt; &lt;code&gt;Handler&lt;/code&gt; &lt;/a&gt; 인스턴스를 직접 생성되지 않습니다; 이 클래스는보다 유용한 하위 클래스의 기본 역할을합니다. 그러나 서브 클래스 의 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt; 메서드는 &lt;a href=&quot;#logging.Handler.__init__&quot;&gt; &lt;code&gt;Handler.__init__()&lt;/code&gt; &lt;/a&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5d46c9ae22acb5d3645908e5bf4511d544f3a6b7" translate="yes" xml:space="preserve">
          <source>Handlers send the log records (created by loggers) to the appropriate destination.</source>
          <target state="translated">핸들러는 로거가 작성한 로그 레코드를 적절한 대상으로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="84b8e969da65bf24a329495e90cf29dd7b94f19e" translate="yes" xml:space="preserve">
          <source>Handlers with a method named like &lt;code&gt;&amp;lt;protocol&amp;gt;_open()&lt;/code&gt; are called to handle the request. This stage ends when a handler either returns a non-&lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; value (ie. a response), or raises an exception (usually &lt;a href=&quot;urllib.error#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt;). Exceptions are allowed to propagate.</source>
          <target state="translated">&lt;code&gt;&amp;lt;protocol&amp;gt;_open()&lt;/code&gt; 과 같은 이름의 메소드를 가진 핸들러가 요청을 처리하기 위해 호출됩니다. 이 단계는 핸들러가 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; 이 아닌 값 (예 : 응답)을 반환 하거나 예외 (보통 &lt;a href=&quot;urllib.error#urllib.error.URLError&quot;&gt; &lt;code&gt;URLError&lt;/code&gt; &lt;/a&gt; )를 발생 시킬 때 종료됩니다 . 예외 전파가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="8bcb894d769a4dd64c40d2bdb7b0ee4952c58f5b" translate="yes" xml:space="preserve">
          <source>Handles a doctype declaration. &lt;em&gt;name&lt;/em&gt; is the doctype name. &lt;em&gt;pubid&lt;/em&gt; is the public identifier. &lt;em&gt;system&lt;/em&gt; is the system identifier. This method does not exist on the default &lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt;&lt;code&gt;TreeBuilder&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">doctype 선언을 처리합니다. &lt;em&gt;name&lt;/em&gt; 은 doctype 이름입니다. &lt;em&gt;pubid&lt;/em&gt; 는 공개 식별자입니다. &lt;em&gt;system&lt;/em&gt; 은 시스템 식별자입니다. 이 메서드는 기본 &lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt; &lt;code&gt;TreeBuilder&lt;/code&gt; &lt;/a&gt; 클래스에 없습니다.</target>
        </trans-unit>
        <trans-unit id="56c022088fb27c6c5c9d8bcb3c440786808ef179" translate="yes" xml:space="preserve">
          <source>Handles a record by passing it to all handlers associated with this logger and its ancestors (until a false value of &lt;em&gt;propagate&lt;/em&gt; is found). This method is used for unpickled records received from a socket, as well as those created locally. Logger-level filtering is applied using &lt;a href=&quot;#logging.Logger.filter&quot;&gt;&lt;code&gt;filter()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 로거 및 해당 상위와 연관된 모든 핸들러에 레코드를 전달하여 레코드를 처리합니다 (잘못된 값의 &lt;em&gt;전파&lt;/em&gt; 가 발견 될 때까지 ). 이 방법은 소켓에서 수신 된 피클 링되지 않은 레코드와 로컬로 작성된 레코드에 사용됩니다. 로거 수준 필터링은 &lt;a href=&quot;#logging.Logger.filter&quot;&gt; &lt;code&gt;filter()&lt;/code&gt; &lt;/a&gt; 사용하여 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="2c3b04664d696d0fa7762642ed6eccefdf4d892c" translate="yes" xml:space="preserve">
          <source>Handles an error which has occurred during &lt;a href=&quot;#logging.handlers.SocketHandler.emit&quot;&gt;&lt;code&gt;emit()&lt;/code&gt;&lt;/a&gt;. The most likely cause is a lost connection. Closes the socket so that we can retry on the next event.</source>
          <target state="translated">&lt;a href=&quot;#logging.handlers.SocketHandler.emit&quot;&gt; &lt;code&gt;emit()&lt;/code&gt; &lt;/a&gt; 중에 발생한 오류를 처리합니다 . 가장 가능성이 높은 원인은 연결이 끊어진 것입니다. 다음 이벤트에서 다시 시도 할 수 있도록 소켓을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="d7568474b0c5d0deb421b6274fcb2bf0af693b7b" translate="yes" xml:space="preserve">
          <source>Handles the &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header.</source>
          <target state="translated">&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; 헤더를 처리합니다 .</target>
        </trans-unit>
        <trans-unit id="2ba87bc15b853d0b3254ce18760f988d9c907655" translate="yes" xml:space="preserve">
          <source>Handling Stateful Objects</source>
          <target state="translated">상태 저장 객체 처리</target>
        </trans-unit>
        <trans-unit id="d4c17076488bf64b63db8111e44b0dde598cfc0f" translate="yes" xml:space="preserve">
          <source>Handling positional arguments.</source>
          <target state="translated">위치 인수 처리.</target>
        </trans-unit>
        <trans-unit id="80fe32e67eb7aed793b1d67d211a8198a39506a3" translate="yes" xml:space="preserve">
          <source>Handling zero-or-more and one-or-more style arguments.</source>
          <target state="translated">0 개 이상의 스타일 인수 처리</target>
        </trans-unit>
        <trans-unit id="914fc1ca59d60f8b53aaaa51e2728e761cc31a75" translate="yes" xml:space="preserve">
          <source>Handy Reference</source>
          <target state="translated">편리한 참조</target>
        </trans-unit>
        <trans-unit id="0d8a35cbc11bb2986e111bb7048bc661f162a028" translate="yes" xml:space="preserve">
          <source>Hang up happened on the assoc. fd</source>
          <target state="translated">협회에서 끊어졌습니다. fd</target>
        </trans-unit>
        <trans-unit id="fd5b5a277ccb835f09a0d505a8d388dedaebe859" translate="yes" xml:space="preserve">
          <source>Hangup detected on controlling terminal or death of controlling process.</source>
          <target state="translated">제어 단말기에서 끊김이 감지되거나 제어 프로세스가 종료되었습니다.</target>
        </trans-unit>
        <trans-unit id="9cb3108f640e19d28da570077adf8f3d8fdd9688" translate="yes" xml:space="preserve">
          <source>Happy Eyeballs Algorithm: Success with Dual-Stack Hosts. When a server&amp;rsquo;s IPv4 path and protocol are working, but the server&amp;rsquo;s IPv6 path and protocol are not working, a dual-stack client application experiences significant connection delay compared to an IPv4-only client. This is undesirable because it causes the dual- stack client to have a worse user experience. This document specifies requirements for algorithms that reduce this user-visible delay and provides an algorithm.</source>
          <target state="translated">Happy Eyeballs 알고리즘 : 듀얼 스택 호스트를 통한 성공. 서버의 IPv4 경로 및 프로토콜은 작동하지만 서버의 IPv6 경로 및 프로토콜은 작동하지 않는 경우 이중 스택 클라이언트 응용 프로그램은 IPv4 전용 클라이언트에 비해 상당한 연결 지연이 발생합니다. 이는 듀얼 스택 클라이언트의 사용자 경험을 악화시키기 때문에 바람직하지 않습니다. 이 문서는 사용자가 볼 수있는 지연을 줄이고 알고리즘을 제공하는 알고리즘에 대한 요구 사항을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="28ac25e382cbf0d1025fd3f532ff2aeb20012d52" translate="yes" xml:space="preserve">
          <source>Harmonic mean of data.</source>
          <target state="translated">고조파 데이터 평균.</target>
        </trans-unit>
        <trans-unit id="5d5f0cfcaa9f574e8a332a820d4d9d82eea71bb3" translate="yes" xml:space="preserve">
          <source>Has two optional arguments which must be specified as keyword arguments.</source>
          <target state="translated">키워드 인수로 지정해야하는 두 개의 선택적 인수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="873507a022b58de26a88deae87268cbd8d6af5b1" translate="yes" xml:space="preserve">
          <source>Hash</source>
          <target state="translated">Hash</target>
        </trans-unit>
        <trans-unit id="2a9a23956b6c95b1bda07fb332057044e9c2584a" translate="yes" xml:space="preserve">
          <source>Hash algorithms</source>
          <target state="translated">해시 알고리즘</target>
        </trans-unit>
        <trans-unit id="e146edfef10cc2f76cac45cb7eeb8f7a5d679e6a" translate="yes" xml:space="preserve">
          <source>Hash objects from this module follow the API of standard library&amp;rsquo;s &lt;a href=&quot;#module-hashlib&quot;&gt;&lt;code&gt;hashlib&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">이 모듈의 해시 객체는 표준 라이브러리의 &lt;a href=&quot;#module-hashlib&quot;&gt; &lt;code&gt;hashlib&lt;/code&gt; &lt;/a&gt; 객체 의 API를 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="c6aeab0420dd390a78c9b7dfabcf5a39921d254c" translate="yes" xml:space="preserve">
          <source>Hash objects with different digest sizes have completely different outputs (shorter hashes are &lt;em&gt;not&lt;/em&gt; prefixes of longer hashes); BLAKE2b and BLAKE2s produce different outputs even if the output length is the same:</source>
          <target state="translated">다이제스트 크기가 다른 해시 객체의 출력은 완전히 다릅니다 (짧은 해시는 긴 해시의 접두사 가 &lt;em&gt;아님&lt;/em&gt; ). BLAKE2b와 BLAKE2는 출력 길이가 동일하더라도 다른 출력을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ad92929e3b14f9ded46f9153491efe74c6f63f1f" translate="yes" xml:space="preserve">
          <source>Hashing Methods</source>
          <target state="translated">해싱 방법</target>
        </trans-unit>
        <trans-unit id="303fce0ac745167c9c8a05f3e0aa201a3f84b7a1" translate="yes" xml:space="preserve">
          <source>Hashing of numeric types</source>
          <target state="translated">숫자 형 해시</target>
        </trans-unit>
        <trans-unit id="a2619651432fd92bc422e56d1ad8c57275d26d64" translate="yes" xml:space="preserve">
          <source>Hashlib now uses SHA3 and SHAKE from OpenSSL 1.1.1 and newer.</source>
          <target state="translated">Hashlib는 이제 OpenSSL 1.1.1 이상에서 SHA3 및 SHAKE를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b194cf3788207606ecc3b2e7d17d26585f5d57e6" translate="yes" xml:space="preserve">
          <source>Hashlib provides the following constant attributes:</source>
          <target state="translated">Hashlib는 다음과 같은 상수 속성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8503ede3ea63ea360679c1a7bb9c6feb415c1aeb" translate="yes" xml:space="preserve">
          <source>Have fun!</source>
          <target state="translated">즐기세요!</target>
        </trans-unit>
        <trans-unit id="78f963073bec4db63e808e2d6e30b53085d9d799" translate="yes" xml:space="preserve">
          <source>Having two enum members with the same name is invalid:</source>
          <target state="translated">이름이 같은 열거 형 멤버가 두 개있는 것은 유효하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="956e067b3f83c675f83b89ad77530a84a25325b3" translate="yes" xml:space="preserve">
          <source>Header folding is controlled by the &lt;a href=&quot;#email.policy.EmailPolicy.refold_source&quot;&gt;&lt;code&gt;refold_source&lt;/code&gt;&lt;/a&gt; policy setting. A value is considered to be a &amp;lsquo;source value&amp;rsquo; if and only if it does not have a &lt;code&gt;name&lt;/code&gt; attribute (having a &lt;code&gt;name&lt;/code&gt; attribute means it is a header object of some sort). If a source value needs to be refolded according to the policy, it is converted into a header object by passing the &lt;em&gt;name&lt;/em&gt; and the &lt;em&gt;value&lt;/em&gt; with any CR and LF characters removed to the &lt;code&gt;header_factory&lt;/code&gt;. Folding of a header object is done by calling its &lt;code&gt;fold&lt;/code&gt; method with the current policy.</source>
          <target state="translated">헤더 접기는 &lt;a href=&quot;#email.policy.EmailPolicy.refold_source&quot;&gt; &lt;code&gt;refold_source&lt;/code&gt; &lt;/a&gt; 정책 설정에 의해 제어됩니다 . &lt;code&gt;name&lt;/code&gt; 속성 이없는 경우에만 값이 '소스 값'으로 간주됩니다 ( &lt;code&gt;name&lt;/code&gt; 속성이있는 경우 일종의 헤더 객체임을 의미). 정책에 따라 소스 값을 다시 접어야 하는 경우 CR 및 LF 문자가 제거 된 &lt;em&gt;이름&lt;/em&gt; 과 &lt;em&gt;값&lt;/em&gt; 을 &lt;code&gt;header_factory&lt;/code&gt; 로 전달하여 헤더 오브젝트로 변환 합니다 . 현재 정책으로 &lt;code&gt;fold&lt;/code&gt; 메서드를 호출하면 헤더 개체를 접을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6901a3735f0255d8719b4fb97692a6865119569f" translate="yes" xml:space="preserve">
          <source>Header-encode a &lt;em&gt;string&lt;/em&gt; by converting it first to bytes.</source>
          <target state="translated">&lt;em&gt;문자열&lt;/em&gt; 을 먼저 바이트로 변환 하여 헤더를 인코딩 합니다.</target>
        </trans-unit>
        <trans-unit id="5fe13d069f9bcd0482900a73296e2aa37b5e706a" translate="yes" xml:space="preserve">
          <source>Header-encode the string &lt;em&gt;string&lt;/em&gt;.</source>
          <target state="translated">문자열 &lt;em&gt;string을&lt;/em&gt; 헤더 인코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="a7ea6a21e332b0e60f835d8a4c6db06db904c6b7" translate="yes" xml:space="preserve">
          <source>Headers are folded using the &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; folding algorithm, which preserves existing line breaks in the value, and wraps each resulting line to the &lt;code&gt;max_line_length&lt;/code&gt;. If &lt;code&gt;cte_type&lt;/code&gt; is &lt;code&gt;7bit&lt;/code&gt;, non-ascii binary data is CTE encoded using the &lt;code&gt;unknown-8bit&lt;/code&gt; charset. Otherwise the original source header is used, with its existing line breaks and any (RFC invalid) binary data it may contain.</source>
          <target state="translated">헤더는 값의 기존 줄 바꿈을 유지하고 각 결과 줄을 &lt;code&gt;max_line_length&lt;/code&gt; 로 랩핑 하는 &lt;a href=&quot;email.header#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt; 폴딩 알고리즘을 사용하여 폴딩 됩니다. 경우 &lt;code&gt;cte_type&lt;/code&gt; 가 인 &lt;code&gt;7bit&lt;/code&gt; , 비 ASCII 이진 데이터 CTE를 사용하여 인코딩 &lt;code&gt;unknown-8bit&lt;/code&gt; 문자셋. 그렇지 않으면 기존의 줄 바꿈 및 포함 할 수있는 (RFC 유효하지 않은) 이진 데이터와 함께 원본 소스 헤더가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ebe8caffa7403f60ddcd1cc993c5dd8678905a97" translate="yes" xml:space="preserve">
          <source>Headers are folded using the &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; folding algorithm, which preserves existing line breaks in the value, and wraps each resulting line to the &lt;code&gt;max_line_length&lt;/code&gt;. Non-ASCII binary data are CTE encoded using the &lt;code&gt;unknown-8bit&lt;/code&gt; charset.</source>
          <target state="translated">헤더는 값의 기존 줄 바꿈을 유지하고 각 결과 줄을 &lt;code&gt;max_line_length&lt;/code&gt; 로 랩핑 하는 &lt;a href=&quot;email.header#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt; 폴딩 알고리즘을 사용하여 폴딩 됩니다. 비 ASCII 이진 데이터는 &lt;code&gt;unknown-8bit&lt;/code&gt; 문자 집합을 사용하여 CTE로 인코딩됩니다 .</target>
        </trans-unit>
        <trans-unit id="a98bc6401562f58049cacbc1e7407670111c1e89" translate="yes" xml:space="preserve">
          <source>Headers are represented by customized subclasses of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. The particular class used to represent a given header is determined by the &lt;a href=&quot;email.policy#email.policy.EmailPolicy.header_factory&quot;&gt;&lt;code&gt;header_factory&lt;/code&gt;&lt;/a&gt; of the &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; in effect when the headers are created. This section documents the particular &lt;code&gt;header_factory&lt;/code&gt; implemented by the email package for handling &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; compliant email messages, which not only provides customized header objects for various header types, but also provides an extension mechanism for applications to add their own custom header types.</source>
          <target state="translated">헤더는 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; 의&lt;/a&gt; 사용자 정의 된 서브 클래스로 표시됩니다 . 주어진 헤더를 나타내는 데 사용되는 특정 클래스 는 헤더가 생성 될 때 유효한 &lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt; 의 &lt;a href=&quot;email.policy#email.policy.EmailPolicy.header_factory&quot;&gt; &lt;code&gt;header_factory&lt;/code&gt; &lt;/a&gt; 에 의해 결정됩니다 . 이 섹션에서는 &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; 호환 전자 메일 메시지 를 처리하기 위해 전자 메일 패키지로 구현 된 특정 &lt;code&gt;header_factory&lt;/code&gt; 에 대해 설명합니다. &lt;strong&gt;RFC 5322&lt;/strong&gt; 호환 전자 메일 메시지는 다양한 헤더 유형에 대해 사용자 정의 된 헤더 객체를 제공 할뿐만 아니라 응용 프로그램이 고유 한 사용자 정의 헤더 유형을 추가 할 수있는 확장 메커니즘을 제공합니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb02d09b6702cd36c64f3e002eb02e318d1b6c96" translate="yes" xml:space="preserve">
          <source>Headers of the response in the form of an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;email.message.EmailMessage&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;email.message.EmailMessage&lt;/code&gt; &lt;/a&gt; 인스턴스 양식의 응답 헤더 .</target>
        </trans-unit>
        <trans-unit id="e393fa6a2b7360dfa38d3d9b9332735fa20c75f1" translate="yes" xml:space="preserve">
          <source>Heap elements can be tuples. This is useful for assigning comparison values (such as task priorities) alongside the main record being tracked:</source>
          <target state="translated">힙 요소는 튜플 일 수 있습니다. 이는 추적중인 기본 레코드와 함께 비교 값 (예 : 작업 우선 순위)을 지정하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f05c2ca1637855efab589e3146dfd91ec2b8dfd7" translate="yes" xml:space="preserve">
          <source>Heaps are also very useful in big disk sorts. You most probably all know that a big sort implies producing &amp;ldquo;runs&amp;rdquo; (which are pre-sorted sequences, whose size is usually related to the amount of CPU memory), followed by a merging passes for these runs, which merging is often very cleverly organised &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. It is very important that the initial sort produces the longest runs possible. Tournaments are a good way to achieve that. If, using all the memory available to hold a tournament, you replace and percolate items that happen to fit the current run, you&amp;rsquo;ll produce runs which are twice the size of the memory for random input, and much better for input fuzzily ordered.</source>
          <target state="translated">힙은 큰 디스크 정렬에도 매우 유용합니다. 대부분의 경우 큰 정렬은 &quot;실행&quot;(크기가 일반적으로 CPU 메모리 크기와 관련된 사전 정렬 된 시퀀스)을 생성 한 다음 이러한 실행에 대한 병합 패스를 의미하며, 이러한 병합은 종종 매우 영리합니다. 조직 &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; . 초기 정렬이 가능한 한 가장 긴 실행을 생성하는 것이 매우 중요합니다. 토너먼트는이를 달성하기위한 좋은 방법입니다. 토너먼트를 개최하는 데 사용할 수있는 모든 메모리를 사용하여 현재 런에 맞게 발생하는 항목을 교체하고 percolate하는 경우 임의의 입력을 위해 메모리 크기의 두 배인 런을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="94253428243000d37b9f634428431d09481c1836" translate="yes" xml:space="preserve">
          <source>Heaps are arrays for which &lt;code&gt;a[k] &amp;lt;= a[2*k+1]&lt;/code&gt; and &lt;code&gt;a[k] &amp;lt;= a[2*k+2]&lt;/code&gt; for all &lt;em&gt;k&lt;/em&gt;, counting elements from 0. For the sake of comparison, non-existing elements are considered to be infinite. The interesting property of a heap is that &lt;code&gt;a[0]&lt;/code&gt; is always its smallest element.</source>
          <target state="translated">힙 배열되어있는 &lt;code&gt;a[k] &amp;lt;= a[2*k+1]&lt;/code&gt; 및 &lt;code&gt;a[k] &amp;lt;= a[2*k+2]&lt;/code&gt; 모든 &lt;em&gt;K&lt;/em&gt; , 비교를 위해서 0부터 카운트 요소 비 기존 요소는 무한한 것으로 간주됩니다. 힙의 흥미로운 특성은 a &lt;code&gt;a[0]&lt;/code&gt; 이 항상 가장 작은 요소라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f0958aba14742bb54b868bb2e7efefba45a47ee7" translate="yes" xml:space="preserve">
          <source>Heaps are binary trees for which every parent node has a value less than or equal to any of its children. This implementation uses arrays for which &lt;code&gt;heap[k] &amp;lt;= heap[2*k+1]&lt;/code&gt; and &lt;code&gt;heap[k] &amp;lt;= heap[2*k+2]&lt;/code&gt; for all &lt;em&gt;k&lt;/em&gt;, counting elements from zero. For the sake of comparison, non-existing elements are considered to be infinite. The interesting property of a heap is that its smallest element is always the root, &lt;code&gt;heap[0]&lt;/code&gt;.</source>
          <target state="translated">힙은 모든 부모 노드가 자식 값보다 작거나 같은 이진 트리입니다. 이러한 구현에서 사용되는 배열 &lt;code&gt;heap[k] &amp;lt;= heap[2*k+1]&lt;/code&gt; 과 &lt;code&gt;heap[k] &amp;lt;= heap[2*k+2]&lt;/code&gt; 모든 &lt;em&gt;K&lt;/em&gt; , 0으로부터 카운팅 소자. 비교를 위해 존재하지 않는 요소는 무한한 것으로 간주됩니다. 힙의 흥미로운 특성은 가장 작은 요소가 항상 루트 인 &lt;code&gt;heap[0]&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="translated">Hebrew</target>
        </trans-unit>
        <trans-unit id="59b3a81a6811a92bb1cf8fec2fbe19d8c89c6cf1" translate="yes" xml:space="preserve">
          <source>Height of the terminal window in characters.</source>
          <target state="translated">문자로 된 터미널 창의 높이.</target>
        </trans-unit>
        <trans-unit id="ecb0bdc009a4e94b619f238e5c038184e5a5c5ef" translate="yes" xml:space="preserve">
          <source>Hello World with call_soon()</source>
          <target state="translated">call_soon ()이있는 Hello World</target>
        </trans-unit>
        <trans-unit id="2ef7bde608ce5404e97d5f042f95f89f1c232871" translate="yes" xml:space="preserve">
          <source>Hello World!</source>
          <target state="translated">안녕하세요 세계!</target>
        </trans-unit>
        <trans-unit id="c47ae15370cfe1ed2781eedc1dc2547d12d9e972" translate="yes" xml:space="preserve">
          <source>Help</source>
          <target state="translated">Help</target>
        </trans-unit>
        <trans-unit id="28e7dce7cb9f9601d24981a334e76f6c313bf469" translate="yes" xml:space="preserve">
          <source>Help and configuration</source>
          <target state="translated">도움말 및 구성</target>
        </trans-unit>
        <trans-unit id="a18d02323a87b03f7466d8b1da693ffe43a62734" translate="yes" xml:space="preserve">
          <source>Help and preferences</source>
          <target state="translated">도움말 및 환경 설정</target>
        </trans-unit>
        <trans-unit id="1e5e41c77d62a1f28e9ed2f5576b34dc1f7958ab" translate="yes" xml:space="preserve">
          <source>Help menu (Shell and Editor)</source>
          <target state="translated">도움말 메뉴 (쉘 및 편집기)</target>
        </trans-unit>
        <trans-unit id="793e97ee72773880ffe54983bbdef3032df6fc32" translate="yes" xml:space="preserve">
          <source>Help menu entry &amp;ldquo;IDLE Help&amp;rdquo; displays a formatted html version of the IDLE chapter of the Library Reference. The result, in a read-only tkinter text window, is close to what one sees in a web browser. Navigate through the text with a mousewheel, the scrollbar, or up and down arrow keys held down. Or click the TOC (Table of Contents) button and select a section header in the opened box.</source>
          <target state="translated">도움말 메뉴 항목 &quot;IDLE 도움말&quot;은 라이브러리 참조의 IDLE 장 형식의 html 버전을 표시합니다. 읽기 전용 tkinter 텍스트 창에서 결과는 웹 브라우저에서 보는 것과 비슷합니다. 마우스 휠, 스크롤바 또는 위쪽 및 아래쪽 화살표 키를 누른 상태로 텍스트를 탐색하십시오. 또는 목차 (목차) 단추를 클릭하고 열린 상자에서 섹션 머리글을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="b11a1a8fed4583088aeda48052c86ca844eebd01" translate="yes" xml:space="preserve">
          <source>Help menu entry &amp;ldquo;Python Docs&amp;rdquo; opens the extensive sources of help, including tutorials, available at &lt;code&gt;docs.python.org/x.y&lt;/code&gt;, where &amp;lsquo;x.y&amp;rsquo; is the currently running Python version. If your system has an off-line copy of the docs (this may be an installation option), that will be opened instead.</source>
          <target state="translated">도움말 메뉴 항목 &quot;Python Docs&quot;는 &lt;code&gt;docs.python.org/x.y&lt;/code&gt; 에있는 자습서를 포함하여 광범위한 도움말 소스를 엽니 다. 여기서 'x.y'는 현재 실행중인 Python 버전입니다. 시스템에 문서의 오프라인 사본이있는 경우 (설치 옵션 일 수 있음) 대신 열립니다.</target>
        </trans-unit>
        <trans-unit id="dfb5d6579c133dffbacf19caeed708a180fc034d" translate="yes" xml:space="preserve">
          <source>Help sources</source>
          <target state="translated">도움말 소스</target>
        </trans-unit>
        <trans-unit id="934835a36e88b263f02948e4dbd8c5dd04401bc0" translate="yes" xml:space="preserve">
          <source>Helper functions</source>
          <target state="translated">도우미 기능</target>
        </trans-unit>
        <trans-unit id="9f94e06f2e8ee19ef9699de5b8431b151fa4c9ee" translate="yes" xml:space="preserve">
          <source>Helper to print a traceback from the timed code.</source>
          <target state="translated">시간이 지정된 코드에서 역 추적을 인쇄하는 도우미</target>
        </trans-unit>
        <trans-unit id="3c9b3433e6f225e4ae00ef2041d44d91bfbf7113" translate="yes" xml:space="preserve">
          <source>Helpers</source>
          <target state="translated">Helpers</target>
        </trans-unit>
        <trans-unit id="9bad4c938651ee76ce6a287a012d5591687a09bc" translate="yes" xml:space="preserve">
          <source>Hence an &lt;em&gt;iterable&lt;/em&gt; of &lt;code&gt;[(1,2), (3, 4)]&lt;/code&gt; results in &lt;code&gt;[func(1,2),
func(3,4)]&lt;/code&gt;.</source>
          <target state="translated">따라서 &lt;em&gt;반복 가능&lt;/em&gt; 의 &lt;code&gt;[(1,2), (3, 4)]&lt;/code&gt; 의 결과 &lt;code&gt;[func(1,2), func(3,4)]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b44d2a2afad6e9544558991fb0f0fd1e144d478b" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;floatnumber&lt;/code&gt; is the form of a Python floating-point literal, described in &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#floating&quot;&gt;Floating point literals&lt;/a&gt;. Case is not significant, so, for example, &amp;ldquo;inf&amp;rdquo;, &amp;ldquo;Inf&amp;rdquo;, &amp;ldquo;INFINITY&amp;rdquo; and &amp;ldquo;iNfINity&amp;rdquo; are all acceptable spellings for positive infinity.</source>
          <target state="translated">여기 &lt;code&gt;floatnumber&lt;/code&gt; 에 기재된 파이썬 부동 소수점 리터럴의 형태 인 &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#floating&quot;&gt;점 리터럴 떠&lt;/a&gt; . 대소 문자는 중요하지 않으므로 예를 들어 &quot;inf&quot;, &quot;Inf&quot;, &quot;INFINITY&quot;및 &quot;iNfINity&quot;는 모두 양의 무한대에 허용되는 철자입니다.</target>
        </trans-unit>
        <trans-unit id="244ccc56972abe47829e4a7be0bbc9d4387ed18f" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;floatnumber&lt;/code&gt; is the form of a Python floating-point literal, described in &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#floating&quot;&gt;Floating point literals&lt;/a&gt;. Case is not significant, so, for example, &amp;ldquo;inf&amp;rdquo;, &amp;ldquo;Inf&amp;rdquo;, &amp;ldquo;INFINITY&amp;rdquo; and &amp;ldquo;iNfINity&amp;rdquo; are all acceptable spellings for positive infinity.</source>
          <target state="translated">여기 &lt;code&gt;floatnumber&lt;/code&gt; 에 기재된 파이썬 부동 소수점 리터럴의 형태 인 &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#floating&quot;&gt;점 리터럴 떠&lt;/a&gt; . 대소 문자는 중요하지 않으므로 예를 들어 &quot;inf&quot;, &quot;Inf&quot;, &quot;INFINITY&quot;및 &quot;iNfINity&quot;는 모두 양의 무한대에 대해 허용되는 철자입니다.</target>
        </trans-unit>
        <trans-unit id="e9577fd9feab5cb1e4b56a6d0ea9de1dd1d4a07d" translate="yes" xml:space="preserve">
          <source>Here all warnings will be caught, and the test code tests the captured warnings directly.</source>
          <target state="translated">여기서 모든 경고가 포착되고 테스트 코드는 캡처 된 경고를 직접 테스트합니다.</target>
        </trans-unit>
        <trans-unit id="d4cbf6d694573a6b35a8882624d22cfd46ff632e" translate="yes" xml:space="preserve">
          <source>Here are a few examples of how to use the &lt;a href=&quot;email#module-email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; package to read, write, and send simple email messages, as well as more complex MIME messages.</source>
          <target state="translated">다음은 &lt;a href=&quot;email#module-email&quot;&gt; &lt;code&gt;email&lt;/code&gt; &lt;/a&gt; 패키지 를 사용하여 간단한 전자 메일 메시지와 복잡한 MIME 메시지를 읽고 쓰고 보내는 방법에 대한 몇 가지 예입니다 .</target>
        </trans-unit>
        <trans-unit id="c9c7cc8a120a0af672345b3356e3d523999fbe1c" translate="yes" xml:space="preserve">
          <source>Here are a few recipes that serve as utility functions and that demonstrate ways to work with the &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">다음은 유틸리티 함수 역할을하고 &lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt; 클래스 작업 방법을 보여주는 몇 가지 레시피입니다 .</target>
        </trans-unit>
        <trans-unit id="cc7e228700c1b92ad7ac1415ee4e043abb38dd76" translate="yes" xml:space="preserve">
          <source>Here are four minimal example programs using the TCP/IP protocol: a server that echoes all data that it receives back (servicing only one client), and a client using it. Note that a server must perform the sequence &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.socket.bind&quot;&gt;&lt;code&gt;bind()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.socket.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.socket.accept&quot;&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/a&gt; (possibly repeating the &lt;a href=&quot;#socket.socket.accept&quot;&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/a&gt; to service more than one client), while a client only needs the sequence &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#socket.socket.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt;. Also note that the server does not &lt;a href=&quot;#socket.socket.sendall&quot;&gt;&lt;code&gt;sendall()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#socket.socket.recv&quot;&gt;&lt;code&gt;recv()&lt;/code&gt;&lt;/a&gt; on the socket it is listening on but on the new socket returned by &lt;a href=&quot;#socket.socket.accept&quot;&gt;&lt;code&gt;accept()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음은 TCP / IP 프로토콜을 사용하는 최소 4 개의 프로그램 예입니다. 수신하는 모든 데이터를 에코하는 서버 (하나의 클라이언트에만 서비스)와이를 사용하는 클라이언트. 서버가 시퀀스 수행해야합니다 &lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#socket.socket.bind&quot;&gt; &lt;code&gt;bind()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#socket.socket.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#socket.socket.accept&quot;&gt; &lt;code&gt;accept()&lt;/code&gt; &lt;/a&gt; (아마도이 반복 &lt;a href=&quot;#socket.socket.accept&quot;&gt; &lt;code&gt;accept()&lt;/code&gt; &lt;/a&gt; 클라이언트는 시퀀스가 필요하지만, 서비스에 하나 이상의 클라이언트) &lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#socket.socket.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; &lt;/a&gt; . 또한 서버 는 청취중인 소켓에서 &lt;a href=&quot;#socket.socket.sendall&quot;&gt; &lt;code&gt;sendall()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#socket.socket.recv&quot;&gt; &lt;code&gt;recv()&lt;/code&gt; &lt;/a&gt; 를 보내지 않지만 &lt;a href=&quot;#socket.socket.accept&quot;&gt; &lt;code&gt;accept()&lt;/code&gt; &lt;/a&gt; 반환 한 새 소켓 에서는 sendall () / recv () 를 보내지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="848203b6ef6b35a2defc3dccc96affca56775c19" translate="yes" xml:space="preserve">
          <source>Here are some additional useful header related methods:</source>
          <target state="translated">추가적인 유용한 헤더 관련 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="90a7aeffda70ad496e94cfcc706ad61c2e0aaa10" translate="yes" xml:space="preserve">
          <source>Here are some additional useful methods:</source>
          <target state="translated">몇 가지 유용한 추가 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ac2adcb2af1c2b090a1c0d1be0dc3af785419f4" translate="yes" xml:space="preserve">
          <source>Here are some examples for Windows. Note that &lt;code&gt;msvcrt&lt;/code&gt; is the MS standard C library containing most standard C functions, and uses the cdecl calling convention:</source>
          <target state="translated">다음은 Windows 용 예제입니다. 참고 것을 &lt;code&gt;msvcrt&lt;/code&gt; 대부분의 표준 C의 기능을 포함하는 MS의 표준 C 라이브러리이며, 호출 규칙을 cdecl 규칙을 사용합니다 :</target>
        </trans-unit>
        <trans-unit id="5f862bd79424f8f419f9104ffde0b99c655fec57" translate="yes" xml:space="preserve">
          <source>Here are some examples of typical usage of the &lt;a href=&quot;#module-tempfile&quot;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">다음은 &lt;a href=&quot;#module-tempfile&quot;&gt; &lt;code&gt;tempfile&lt;/code&gt; &lt;/a&gt; 모듈 의 일반적인 사용법에 대한 몇 가지 예입니다 .</target>
        </trans-unit>
        <trans-unit id="421e4af8c302f92252068c4e665eb8048a72f5d5" translate="yes" xml:space="preserve">
          <source>Here are some examples of typical usage of the &lt;a href=&quot;#module-uuid&quot;&gt;&lt;code&gt;uuid&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">다음은 &lt;a href=&quot;#module-uuid&quot;&gt; &lt;code&gt;uuid&lt;/code&gt; &lt;/a&gt; 모듈 의 일반적인 사용법에 대한 몇 가지 예입니다 .</target>
        </trans-unit>
        <trans-unit id="d96b3e058a1f9b5592e9360379e20ef013857e85" translate="yes" xml:space="preserve">
          <source>Here are some examples of typical usage:</source>
          <target state="translated">다음은 일반적인 사용법의 예입니다.</target>
        </trans-unit>
        <trans-unit id="0931022beea83b3afc095873234631b7243eeca4" translate="yes" xml:space="preserve">
          <source>Here are some examples:</source>
          <target state="translated">여기 몇 가지 예가 있어요.</target>
        </trans-unit>
        <trans-unit id="12ec0a6b54e682604fd1f54622b08efce3df4999" translate="yes" xml:space="preserve">
          <source>Here are some notes on the parsing semantics:</source>
          <target state="translated">구문 분석 시맨틱에 대한 참고 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3edc31d64bca5d6336f03a57993926d153773bd" translate="yes" xml:space="preserve">
          <source>Here are some other methods and attributes you may wish to override. This list is only a summary, however, and does not include every method that can be overridden. You should consult the docstrings and source code for additional information before attempting to create a customized &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt; subclass.</source>
          <target state="translated">재정의하려는 다른 방법과 속성은 다음과 같습니다. 그러나이 목록은 요약 일 뿐이며 재정의 할 수있는 모든 방법을 포함하지는 않습니다. 사용자 정의 된 &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt; 서브 클래스 를 작성하기 전에 추가 정보는 docstring 및 소스 코드를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f5ba1cb3713902ae4550268fb70da7530b34b57c" translate="yes" xml:space="preserve">
          <source>Here are some simple examples:</source>
          <target state="translated">다음은 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="850baf30242031506b0e614d9eb98d9a7955b34d" translate="yes" xml:space="preserve">
          <source>Here are the classes:</source>
          <target state="translated">수업은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f6fe11950cf6fa846a750dbaed423167118cf8e0" translate="yes" xml:space="preserve">
          <source>Here are the encoding functions provided:</source>
          <target state="translated">제공된 인코딩 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b95c5e82df057126a3c36996dbffbc4c5362267f" translate="yes" xml:space="preserve">
          <source>Here are the methods of the &lt;a href=&quot;#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">&lt;a href=&quot;#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt; 클래스 의 메소드는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="ed31d258ad18f9d3c2b6b8464a85b09de67bd9b4" translate="yes" xml:space="preserve">
          <source>Here are the rules governing implicit creation of a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Note that you cannot both have an explicit &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method in your dataclass and set &lt;code&gt;unsafe_hash=True&lt;/code&gt;; this will result in a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음은 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 메서드 의 암시 적 생성을 관리하는 규칙 입니다. 데이터 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 에 명시적인 __hash __ () 메소드를 둘 수 없으며 &lt;code&gt;unsafe_hash=True&lt;/code&gt; 를 설정할 수 없습니다 . 이로 인해 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="994b69055d18c5cba906999cf3cb313989eb5c7a" translate="yes" xml:space="preserve">
          <source>Here are the rules governing implicit creation of a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Note that you cannot both have an explicit &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method in your dataclass and set &lt;code&gt;unsafe_hash=True&lt;/code&gt;; this will result in a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다음은 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 메서드 의 암시 적 생성을 제어하는 ​​규칙 입니다. 데이터 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; 에 명시 적 __hash __ () 메서드를 둘 다 가질 수없고 &lt;code&gt;unsafe_hash=True&lt;/code&gt; 를 설정할 수는 없습니다 . 이로 인해 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="8c196634973a8d99ccdf18cbc5696310bd7964c7" translate="yes" xml:space="preserve">
          <source>Here are the rules in detail:</source>
          <target state="translated">자세한 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="557b26034ea3c92b6163bb318046d2bddeae00b9" translate="yes" xml:space="preserve">
          <source>Here are two small examples of how it can be used. To list some statistics about a newsgroup and print the subjects of the last 10 articles:</source>
          <target state="translated">다음은 사용 방법에 대한 두 가지 작은 예입니다. 뉴스 그룹에 대한 일부 통계를 나열하고 최근 10 개 기사의 주제를 인쇄하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="179d40c94384439c79c1a720dc54f39e17c70bfb" translate="yes" xml:space="preserve">
          <source>Here is a RECT structure which contains two POINTs named &lt;em&gt;upperleft&lt;/em&gt; and &lt;em&gt;lowerright&lt;/em&gt;:</source>
          <target state="translated">다음은 &lt;em&gt;topleft&lt;/em&gt; 와 &lt;em&gt;lowerright&lt;/em&gt; 라는 두 개의 POINT를 포함하는 RECT 구조입니다 .</target>
        </trans-unit>
        <trans-unit id="b11c4199d90d38db06d33ee228fd632c8e05e0b6" translate="yes" xml:space="preserve">
          <source>Here is a basic echo server that uses the &lt;a href=&quot;#asyncore.dispatcher&quot;&gt;&lt;code&gt;dispatcher&lt;/code&gt;&lt;/a&gt; class to accept connections and dispatches the incoming connections to a handler:</source>
          <target state="translated">다음은 &lt;a href=&quot;#asyncore.dispatcher&quot;&gt; &lt;code&gt;dispatcher&lt;/code&gt; &lt;/a&gt; 클래스를 사용하여 연결을 수락하고 수신 연결을 핸들러로 디스패치 하는 기본 에코 서버입니다 .</target>
        </trans-unit>
        <trans-unit id="89e92dab799df20513ba190ff69a355bbb907809" translate="yes" xml:space="preserve">
          <source>Here is a comprehensive example presenting how persistent ID can be used to pickle external objects by reference.</source>
          <target state="translated">다음은 퍼시 스턴트 ID를 사용하여 외부 객체를 참조하여 피클 링하는 방법을 보여주는 포괄적 인 예입니다.</target>
        </trans-unit>
        <trans-unit id="aedf046734d92d5ea82f1b03a1f6ccdaf708f3e6" translate="yes" xml:space="preserve">
          <source>Here is a minimal example (without error checking) that opens a mailbox and retrieves and prints all messages:</source>
          <target state="translated">다음은 우편함을 열고 모든 메시지를 검색하고 인쇄하는 최소한의 예 (오류 검사 없음)입니다.</target>
        </trans-unit>
        <trans-unit id="858763321472e2f89573939e2e2b2ebbc0e0b92e" translate="yes" xml:space="preserve">
          <source>Here is a minimal example program. It uses the &lt;a href=&quot;#signal.alarm&quot;&gt;&lt;code&gt;alarm()&lt;/code&gt;&lt;/a&gt; function to limit the time spent waiting to open a file; this is useful if the file is for a serial device that may not be turned on, which would normally cause the &lt;a href=&quot;os#os.open&quot;&gt;&lt;code&gt;os.open()&lt;/code&gt;&lt;/a&gt; to hang indefinitely. The solution is to set a 5-second alarm before opening the file; if the operation takes too long, the alarm signal will be sent, and the handler raises an exception.</source>
          <target state="translated">다음은 최소한의 예제 프로그램입니다. &lt;a href=&quot;#signal.alarm&quot;&gt; &lt;code&gt;alarm()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 파일을 열기 위해 대기하는 시간을 제한합니다. 이것은 파일이 켜져 있지 않을 수있는 직렬 장치 용 파일 인 경우에 유용하며, 일반적으로 &lt;a href=&quot;os#os.open&quot;&gt; &lt;code&gt;os.open()&lt;/code&gt; &lt;/a&gt; 이 무기한 정지됩니다. 해결책은 파일을 열기 전에 5 초 알람을 설정하는 것입니다. 작업이 너무 오래 걸리면 알람 신호가 전송되고 핸들러가 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="4b5a1b75d30a7b9670ad29284b16f1578dc79c1c" translate="yes" xml:space="preserve">
          <source>Here is a more advanced example, it uses the &lt;code&gt;strchr&lt;/code&gt; function, which expects a string pointer and a char, and returns a pointer to a string:</source>
          <target state="translated">다음은보다 고급적인 예입니다. &lt;code&gt;strchr&lt;/code&gt; 함수를 사용 하여 문자열 포인터와 문자를 예상하고 문자열에 대한 포인터를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="95cef5f0126a27e10141faf5133f1bcbbd2d52f4" translate="yes" xml:space="preserve">
          <source>Here is a sample session with the turtle shell showing the help functions, using blank lines to repeat commands, and the simple record and playback facility:</source>
          <target state="translated">다음은 도움말 기능을 보여주는 거북이 셸과 빈 줄을 사용하여 명령을 반복하는 간단한 세션과 간단한 레코드 및 재생 기능입니다.</target>
        </trans-unit>
        <trans-unit id="5ea82f3080f5f08a1cf6ae1393c3531d56e8c858" translate="yes" xml:space="preserve">
          <source>Here is a short script to test three string methods:</source>
          <target state="translated">다음은 세 가지 문자열 메서드를 테스트하는 간단한 스크립트입니다.</target>
        </trans-unit>
        <trans-unit id="c1d0b87a033dc901ab5b05a6a511ade5fd204b7c" translate="yes" xml:space="preserve">
          <source>Here is a simple echo server implementation:</source>
          <target state="translated">간단한 에코 서버 구현은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="783c88dec80dbc359cd0a54cb73ef2e8956c06df" translate="yes" xml:space="preserve">
          <source>Here is a simple example of a POINT structure, which contains two integers named &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, and also shows how to initialize a structure in the constructor:</source>
          <target state="translated">다음은 POINT 구조의 간단한 예입니다. 여기에는 &lt;em&gt;x&lt;/em&gt; 및 &lt;em&gt;y&lt;/em&gt; 라는 두 개의 정수가 포함 되며 생성자에서 구조를 초기화하는 방법도 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="a220f7a767cad9812c7f5e9e71729724691d793a" translate="yes" xml:space="preserve">
          <source>Here is a simple example where we allow pickling and reconstructing a given class:</source>
          <target state="translated">다음은 주어진 클래스를 피클 링하고 재구성 할 수있는 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="66492cba692800cf02c93560d0a4ae5260cd7a45" translate="yes" xml:space="preserve">
          <source>Here is a simplified example of using the &lt;code&gt;subdirs&lt;/code&gt; attribute to search recursively through two directories to show common different files:</source>
          <target state="translated">다음은 &lt;code&gt;subdirs&lt;/code&gt; 속성을 사용하여 공통된 다른 파일을 표시하기 위해 두 디렉토리를 반복적으로 검색 하는 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="1a1651c42d3d327851c93c93b01b9268244b9102" translate="yes" xml:space="preserve">
          <source>Here is a trivial example where we implement a &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; subclass able to participate in out-of-band buffer pickling:</source>
          <target state="translated">다음은 대역 외 버퍼 산세에 참여할 수 있는 &lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt; 하위 클래스를 구현하는 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="4083b0132c7f289dc2cfe594fe0062d0a2928f45" translate="yes" xml:space="preserve">
          <source>Here is a very basic HTTP client that uses the &lt;a href=&quot;#asyncore.dispatcher&quot;&gt;&lt;code&gt;dispatcher&lt;/code&gt;&lt;/a&gt; class to implement its socket handling:</source>
          <target state="translated">다음은 &lt;a href=&quot;#asyncore.dispatcher&quot;&gt; &lt;code&gt;dispatcher&lt;/code&gt; &lt;/a&gt; 클래스를 사용하여 소켓 처리를 구현 하는 매우 기본적인 HTTP 클라이언트입니다 .</target>
        </trans-unit>
        <trans-unit id="9681060e036ebeaa6ecc1812f0a2f746613da2c5" translate="yes" xml:space="preserve">
          <source>Here is an XML example that incorporates two namespaces, one with the prefix &amp;ldquo;fictional&amp;rdquo; and the other serving as the default namespace:</source>
          <target state="translated">다음은 두 개의 네임 스페이스 (하나는 접두사 &quot;fictional&quot;이 있고 다른 네임 스페이스는 기본 네임 스페이스로 사용됨)를 통합 한 XML 예제입니다.</target>
        </trans-unit>
        <trans-unit id="0137522adaa7f5c187c163e2786035a7e02c8078" translate="yes" xml:space="preserve">
          <source>Here is an example how &lt;code&gt;HTMLCalendar&lt;/code&gt; can be customized:</source>
          <target state="translated">다음은 &lt;code&gt;HTMLCalendar&lt;/code&gt; 를 사용자 정의 할 수있는 방법의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="bcefb4d49c909a6b98daaf5656641cc671df0062" translate="yes" xml:space="preserve">
          <source>Here is an example of a TCP echo client written using asyncio streams:</source>
          <target state="translated">다음은 asyncio 스트림을 사용하여 작성된 TCP 에코 클라이언트의 예입니다.</target>
        </trans-unit>
        <trans-unit id="926e62c32ff349304967e48a181cbc5cd0a5da18" translate="yes" xml:space="preserve">
          <source>Here is an example of a somewhat artificial data type, a structure containing 4 POINTs among other stuff:</source>
          <target state="translated">다음은 다소 인공적인 데이터 유형의 예이며 다른 것들 중에서 4 개의 포인트를 포함하는 구조입니다.</target>
        </trans-unit>
        <trans-unit id="1942a35fca33fb69eb410e653fed29f38ff15dac" translate="yes" xml:space="preserve">
          <source>Here is an example of an unpickler allowing only few safe classes from the &lt;a href=&quot;builtins#module-builtins&quot;&gt;&lt;code&gt;builtins&lt;/code&gt;&lt;/a&gt; module to be loaded:</source>
          <target state="translated">다음은 &lt;a href=&quot;builtins#module-builtins&quot;&gt; &lt;code&gt;builtins&lt;/code&gt; &lt;/a&gt; 모듈 에서 몇 개의 안전한 클래스 만 로드 할 수있는 언 피커의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="1f6e174ce0930d3a688e6d301ba445e413a2bbb8" translate="yes" xml:space="preserve">
          <source>Here is an example of doing a &lt;code&gt;PUT&lt;/code&gt; request using &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음은 일 예이다 &lt;code&gt;PUT&lt;/code&gt; 의 사용 요청 &lt;a href=&quot;#urllib.request.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="63ad9e85ec02c74d345d067024e9c8bf8c414e3c" translate="yes" xml:space="preserve">
          <source>Here is an example of how to use a Template:</source>
          <target state="translated">템플릿을 사용하는 방법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c1f9b5f62c8ca8b8cc7088a5760fdc9620a09236" translate="yes" xml:space="preserve">
          <source>Here is an example of how you would catch one of these exceptions:</source>
          <target state="translated">다음은 이러한 예외 중 하나를 잡는 방법에 대한 예입니다.</target>
        </trans-unit>
        <trans-unit id="cdea6c32a97f82e690ca75ac4f0f1c74eb11d810" translate="yes" xml:space="preserve">
          <source>Here is an example session that shows how to &lt;code&gt;POST&lt;/code&gt; requests:</source>
          <target state="translated">다음은 요청 을 &lt;code&gt;POST&lt;/code&gt; 하는 방법을 보여주는 예제 세션입니다 .</target>
        </trans-unit>
        <trans-unit id="b4e1b4a71bce105f36f4683385341397898087cc" translate="yes" xml:space="preserve">
          <source>Here is an example session that uses the &lt;code&gt;GET&lt;/code&gt; method to retrieve a URL containing parameters:</source>
          <target state="translated">다음은 &lt;code&gt;GET&lt;/code&gt; 메소드를 사용하여 매개 변수가 포함 된 URL을 검색하는 세션 예입니다 .</target>
        </trans-unit>
        <trans-unit id="f87b25be67df6c09e308fe796ffe42b228c4a0f4" translate="yes" xml:space="preserve">
          <source>Here is an example session that uses the &lt;code&gt;GET&lt;/code&gt; method:</source>
          <target state="translated">다음은 &lt;code&gt;GET&lt;/code&gt; 메소드 를 사용하는 예제 세션입니다 .</target>
        </trans-unit>
        <trans-unit id="f01802ba30e14aa2f7ef06fd05eb038cefe62ea7" translate="yes" xml:space="preserve">
          <source>Here is an example session that uses the &lt;code&gt;HEAD&lt;/code&gt; method. Note that the &lt;code&gt;HEAD&lt;/code&gt; method never returns any data.</source>
          <target state="translated">다음은 &lt;code&gt;HEAD&lt;/code&gt; 메소드 를 사용하는 예제 세션입니다 . 있습니다 &lt;code&gt;HEAD&lt;/code&gt; 의 방법은 데이터를 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7637c0fb791cb33301b7c50ec5939de2528983d7" translate="yes" xml:space="preserve">
          <source>Here is an example that imports a module from a ZIP archive - note that the &lt;a href=&quot;#module-zipimport&quot;&gt;&lt;code&gt;zipimport&lt;/code&gt;&lt;/a&gt; module is not explicitly used.</source>
          <target state="translated">다음은 ZIP 아카이브에서 모듈을 가져 오는 예입니다. &lt;a href=&quot;#module-zipimport&quot;&gt; &lt;code&gt;zipimport&lt;/code&gt; &lt;/a&gt; 모듈은 명시 적으로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="63b8653a775ca02f4de9cf85a3ea50f01399ce67" translate="yes" xml:space="preserve">
          <source>Here is an example transformer that rewrites all occurrences of name lookups (&lt;code&gt;foo&lt;/code&gt;) to &lt;code&gt;data['foo']&lt;/code&gt;:</source>
          <target state="translated">다음은 모든 이름 조회 ( &lt;code&gt;foo&lt;/code&gt; )를 &lt;code&gt;data['foo']&lt;/code&gt; 에 다시 쓰는 변환기의 예입니다 .</target>
        </trans-unit>
        <trans-unit id="4c22ac49a0c9c7336e5edbfbe2e372032dc66845" translate="yes" xml:space="preserve">
          <source>Here is an example type (Windows):</source>
          <target state="translated">다음은 예제 유형입니다 (Windows).</target>
        </trans-unit>
        <trans-unit id="0e4f971444f1d77e09759bbb6d4eb09fd55bc2d3" translate="yes" xml:space="preserve">
          <source>Here is an example with a non-byte format:</source>
          <target state="translated">다음은 바이트가 아닌 형식의 예입니다.</target>
        </trans-unit>
        <trans-unit id="3222c631b1d6a91645cefd87ad0f0babb9291a43" translate="yes" xml:space="preserve">
          <source>Here is an example, a format for dates compatible with that specified in the &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; Internet email standard. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">다음은 &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; 인터넷 이메일 표준에 지정된 형식과 호환되는 날짜 형식의 예 입니다. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3e1dafbc069fa301268390cf627b3ca5c064c24e" translate="yes" xml:space="preserve">
          <source>Here is how the above snippet can be fixed:</source>
          <target state="translated">위의 스 니펫을 수정하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0193f048235ff1d1526f09d38ae6b2bf5b52e26a" translate="yes" xml:space="preserve">
          <source>Here is one way you can handle this situation:</source>
          <target state="translated">이 상황을 처리 할 수있는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cbb8b723b6c194f091fb87df1d26aab4a18efa52" translate="yes" xml:space="preserve">
          <source>Here is the &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; class description:</source>
          <target state="translated">다음은 &lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt; 클래스 설명입니다.</target>
        </trans-unit>
        <trans-unit id="43a4df7c9db3f85bfab609815a30ff46e6d1db35" translate="yes" xml:space="preserve">
          <source>Here is the API for the &lt;a href=&quot;#email.parser.BytesFeedParser&quot;&gt;&lt;code&gt;BytesFeedParser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#email.parser.BytesFeedParser&quot;&gt; &lt;code&gt;BytesFeedParser&lt;/code&gt; &lt;/a&gt; 의 API는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="312593d370700c530b8c77ba64f5bf70d0d4e0d1" translate="yes" xml:space="preserve">
          <source>Here is the list of handlers that can be set. To set a handler on an &lt;code&gt;xmlparser&lt;/code&gt; object &lt;em&gt;o&lt;/em&gt;, use &lt;code&gt;o.handlername = func&lt;/code&gt;. &lt;em&gt;handlername&lt;/em&gt; must be taken from the following list, and &lt;em&gt;func&lt;/em&gt; must be a callable object accepting the correct number of arguments. The arguments are all strings, unless otherwise stated.</source>
          <target state="translated">설정할 수있는 핸들러 목록은 다음과 같습니다. &lt;code&gt;xmlparser&lt;/code&gt; 객체 &lt;em&gt;o&lt;/em&gt; 에 핸들러를 설정하려면 &lt;code&gt;o.handlername = func&lt;/code&gt; 사용 하십시오 . &lt;em&gt;handlername&lt;/em&gt; 은 다음 목록에서 &lt;em&gt;가져와야&lt;/em&gt; 하며 &lt;em&gt;func&lt;/em&gt; 는 올바른 수의 인수를 허용하는 호출 가능한 객체 여야합니다. 달리 명시되지 않는 한 인수는 모두 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="44f421add6ba0457382d5aadb027259940af6a3d" translate="yes" xml:space="preserve">
          <source>Here is the list of the defects that the &lt;a href=&quot;email.parser#email.parser.FeedParser&quot;&gt;&lt;code&gt;FeedParser&lt;/code&gt;&lt;/a&gt; can find while parsing messages. Note that the defects are added to the message where the problem was found, so for example, if a message nested inside a &lt;em&gt;multipart/alternative&lt;/em&gt; had a malformed header, that nested message object would have a defect, but the containing messages would not.</source>
          <target state="translated">다음은 메시지를 구문 분석하는 동안 &lt;a href=&quot;email.parser#email.parser.FeedParser&quot;&gt; &lt;code&gt;FeedParser&lt;/code&gt; &lt;/a&gt; 가 찾을 수 있는 결함 목록입니다 . 결함이 문제가 발견 된 메시지에 추가되므로, 예를 들어 &lt;em&gt;멀티 파트 / 대체&lt;/em&gt; 내부에 중첩 된 메시지에 잘못된 헤더가있는 경우 해당 중첩 메시지 개체에 결함이 있지만 포함 메시지는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4d14bc3f810050260ad93db46eca920d45cd6587" translate="yes" xml:space="preserve">
          <source>Here is the wrapping with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; 를&lt;/a&gt; 사용한 래핑은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="d8d136ce4fcf131b38249ad4b4cdd7b36aab6b59" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;message&lt;/code&gt; parts are not &lt;code&gt;multiparts&lt;/code&gt;, but they do contain subparts. &lt;code&gt;is_multipart()&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;walk&lt;/code&gt; descends into the subparts.</source>
          <target state="translated">여기서 &lt;code&gt;message&lt;/code&gt; 부분은 &lt;code&gt;multiparts&lt;/code&gt; 가 아니지만 하위 부분을 포함합니다. &lt;code&gt;is_multipart()&lt;/code&gt; 반환 &lt;code&gt;True&lt;/code&gt; 과 &lt;code&gt;walk&lt;/code&gt; 하위 부분으로 하강합니다.</target>
        </trans-unit>
        <trans-unit id="f8c5b2d5d4895e63936c3e39f9ea5a092742e33a" translate="yes" xml:space="preserve">
          <source>Here the fields, accessed through &lt;code&gt;form[key]&lt;/code&gt;, are themselves instances of &lt;code&gt;FieldStorage&lt;/code&gt; (or &lt;code&gt;MiniFieldStorage&lt;/code&gt;, depending on the form encoding). The &lt;code&gt;value&lt;/code&gt; attribute of the instance yields the string value of the field. The &lt;code&gt;getvalue()&lt;/code&gt; method returns this string value directly; it also accepts an optional second argument as a default to return if the requested key is not present.</source>
          <target state="translated">여기서 &lt;code&gt;form[key]&lt;/code&gt; 통해 액세스되는 필드는 필드 &lt;code&gt;FieldStorage&lt;/code&gt; (또는 양식 인코딩에 따라 &lt;code&gt;MiniFieldStorage&lt;/code&gt; )의 인스턴스입니다 . 인스턴스 의 &lt;code&gt;value&lt;/code&gt; 속성은 필드의 문자열 값을 산출합니다. &lt;code&gt;getvalue()&lt;/code&gt; 메소드는 직접 문자열 값을 반환 또한 요청 된 키가없는 경우 리턴하는 선택적 두 번째 인수를 기본값으로 채택합니다.</target>
        </trans-unit>
        <trans-unit id="6427d6dc542f2fe91c5f973e0fbee08e0775e6b1" translate="yes" xml:space="preserve">
          <source>Here we are telling &lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt; to use the RFC correct line separator characters when creating the binary string to feed into &lt;code&gt;sendmail's&lt;/code&gt;&lt;code&gt;stdin&lt;/code&gt;, where the default policy would use &lt;code&gt;\n&lt;/code&gt; line separators.</source>
          <target state="translated">여기서는 &lt;code&gt;sendmail's&lt;/code&gt; &lt;code&gt;stdin&lt;/code&gt; 에 공급할 이진 문자열을 만들 때 기본 정책이 &lt;code&gt;\n&lt;/code&gt; 행 구분 기호 를 사용하는 경우 RFC 올바른 행 구분 기호 문자를 사용하도록 &lt;a href=&quot;email.generator#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; 에&lt;/a&gt; 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="54089b0f798d064b6d27440468c160d6be3d5a87" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a complete but small example module:</source>
          <target state="translated">다음은 완전하지만 작은 예제 모듈입니다.</target>
        </trans-unit>
        <trans-unit id="deb069a2481d34b576a644f623c5cdd014912641" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a function that prompts for a password with echoing turned off. Note the technique using a separate &lt;a href=&quot;#termios.tcgetattr&quot;&gt;&lt;code&gt;tcgetattr()&lt;/code&gt;&lt;/a&gt; call and a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to ensure that the old tty attributes are restored exactly no matter what happens:</source>
          <target state="translated">다음은 에코가 해제 된 암호를 묻는 기능입니다. 별도의 &lt;a href=&quot;#termios.tcgetattr&quot;&gt; &lt;code&gt;tcgetattr()&lt;/code&gt; &lt;/a&gt; 호출과 &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; 문을 사용하여 이전 tty 속성이 어떻게 되든 정확하게 복원되도록하는 기술에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="807a57a4f81a556136cd6ff991256bbc4324ecda" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a function that prompts for a password with echoing turned off. Note the technique using a separate &lt;a href=&quot;#termios.tcgetattr&quot;&gt;&lt;code&gt;tcgetattr()&lt;/code&gt;&lt;/a&gt; call and a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to ensure that the old tty attributes are restored exactly no matter what happens:</source>
          <target state="translated">다음은 에코를 해제 한 상태에서 암호를 묻는 기능입니다. 별도의 &lt;a href=&quot;#termios.tcgetattr&quot;&gt; &lt;code&gt;tcgetattr()&lt;/code&gt; &lt;/a&gt; 호출과 &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; 문을 사용하여 이전 tty 속성이 어떤 일이 발생하더라도 정확히 복원되도록하는 기술에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="6674d68cc38ec668a73b9a90f473982a8cb3962a" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample session using the &lt;a href=&quot;#ftplib.FTP_TLS&quot;&gt;&lt;code&gt;FTP_TLS&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">&lt;a href=&quot;#ftplib.FTP_TLS&quot;&gt; &lt;code&gt;FTP_TLS&lt;/code&gt; &lt;/a&gt; 클래스를 사용한 샘플 세션은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="b965a2500a417c17e252df58aa948ceb534c9ecf" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample session using the &lt;a href=&quot;#module-ftplib&quot;&gt;&lt;code&gt;ftplib&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">&lt;a href=&quot;#module-ftplib&quot;&gt; &lt;code&gt;ftplib&lt;/code&gt; &lt;/a&gt; 모듈을 사용한 샘플 세션은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f08d50bf7a9f9628e3dfc06b109485deda2e28cc" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a shorter example using a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;생성기&lt;/a&gt; 를 사용하는 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="314a82dde97c8303e3360b58f5e4928f9604a16d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a shorter example using a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;:</source>
          <target state="translated">다음은 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;생성기&lt;/a&gt; 를 사용하는 간단한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="9dda69001f51d32dcd158718121626161a3763b1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a table showing which versions in a client (down the side) can connect to which versions in a server (along the top):</source>
          <target state="translated">다음은 클라이언트의 어떤 버전 (아래쪽)이 서버의 어떤 버전 (위쪽)에 연결할 수 있는지 보여주는 표입니다.</target>
        </trans-unit>
        <trans-unit id="96026c277ce40c4cdd39c60d4a2b06b7e1e42842" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of both styles:</source>
          <target state="translated">다음은 두 스타일의 예입니다.</target>
        </trans-unit>
        <trans-unit id="2e7bb34249467c365c51e5881f607b0336fcd6fe" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of computing an inverse for &lt;code&gt;38&lt;/code&gt; modulo &lt;code&gt;97&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;38&lt;/code&gt; 모듈로 &lt;code&gt;97&lt;/code&gt; 에 대한 역수를 계산하는 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="76246c5edc6c07c691c2ccc2d065398990a99ecd" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of doing this for a context manager that accepts resource acquisition and release functions, along with an optional validation function, and maps them to the context management protocol:</source>
          <target state="translated">다음은 선택적 유효성 검증 기능과 함께 자원 확보 및 릴리스 기능을 승인하고이를 컨텍스트 관리 프로토콜에 맵핑하는 컨텍스트 관리자에 대해이를 수행하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="6972a9388d5a46c9aaecbb359917ffc8f7f4389d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of hashing a minimal tree with two leaf nodes:</source>
          <target state="translated">다음은 두 개의 리프 노드로 최소 트리를 해싱하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="70402f4d7b8b4f0408298cad94624fc0f6c8e0e1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how asyncio can run a shell command and obtain its result:</source>
          <target state="translated">다음은 asyncio가 셸 명령을 실행하고 결과를 얻는 방법에 대한 예입니다.</target>
        </trans-unit>
        <trans-unit id="86ceb4f04a6903fd4ae47ac5dd9b2e83e0478d72" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how to create an HTML message with an alternative plain text version. To make things a bit more interesting, we include a related image in the html part, and we save a copy of what we are going to send to disk, as well as sending it.</source>
          <target state="translated">다음은 대체 일반 텍스트 버전으로 HTML 메시지를 작성하는 방법의 예입니다. 좀 더 재미있게하기 위해, html 부분에 관련 이미지를 포함시키고, 디스크로 보낼 것의 사본을 보내거나 보낼 것입니다.</target>
        </trans-unit>
        <trans-unit id="10477766db4d4994ddeccf936edb955ea8a8956e" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how to send a MIME message containing a bunch of family pictures that may be residing in a directory:</source>
          <target state="translated">다음은 디렉토리에있을 수있는 가족 사진을 포함하는 MIME 메시지를 보내는 방법의 예입니다.</target>
        </trans-unit>
        <trans-unit id="66824fe559b5fa4e6945d482d0b46be90bee75d5" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how to send the entire contents of a directory as an email message: &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">다음은 디렉토리의 전체 내용을 전자 메일 메시지로 보내는 방법의 예입니다. &lt;a href=&quot;#id3&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fa965e6e6082f3cdbd60fcddb869e401f5052f16" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how to unpack a MIME message like the one above, into a directory of files:</source>
          <target state="translated">다음은 위와 같은 MIME 메시지를 파일 디렉토리에 압축 해제하는 방법에 대한 예입니다.</target>
        </trans-unit>
        <trans-unit id="ffbb9d384a13892dc11f3dbd35da43e2b51be8b9" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of how you might use &lt;a href=&quot;#email.message_from_bytes&quot;&gt;&lt;code&gt;message_from_bytes()&lt;/code&gt;&lt;/a&gt; at an interactive Python prompt:</source>
          <target state="translated">다음 은 대화식 Python 프롬프트에서 &lt;a href=&quot;#email.message_from_bytes&quot;&gt; &lt;code&gt;message_from_bytes()&lt;/code&gt; &lt;/a&gt; 를 사용하는 방법에 대한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="8cf6f62163178581796424c7a9a02f1f7e9fb2fa" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of it in use:</source>
          <target state="translated">사용중인 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0bdb2cef4a98e2dcf73f5700dd318281ea7481bd" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of typical usage for this API:</source>
          <target state="translated">이 API의 일반적인 사용법 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a9713683791f9c6f99a0e91da9917c7974bb232d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that demonstrates some of the XPath capabilities of the module. We&amp;rsquo;ll be using the &lt;code&gt;countrydata&lt;/code&gt; XML document from the &lt;a href=&quot;#elementtree-parsing-xml&quot;&gt;Parsing XML&lt;/a&gt; section:</source>
          <target state="translated">다음은 모듈의 XPath 기능 중 일부를 보여주는 예입니다. &lt;a href=&quot;#elementtree-parsing-xml&quot;&gt;파싱 ​​XML&lt;/a&gt; 섹션 에서 &lt;code&gt;countrydata&lt;/code&gt; XML 문서를 사용할 것입니다 .</target>
        </trans-unit>
        <trans-unit id="cb47414132a1661346f2cf123a39f4ccf00798b7" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that demonstrates use of the XInclude module. To include an XML document in the current document, use the &lt;code&gt;{http://www.w3.org/2001/XInclude}include&lt;/code&gt; element and set the &lt;strong&gt;parse&lt;/strong&gt; attribute to &lt;code&gt;&quot;xml&quot;&lt;/code&gt;, and use the &lt;strong&gt;href&lt;/strong&gt; attribute to specify the document to include.</source>
          <target state="translated">다음은 XInclude 모듈 사용을 보여주는 예입니다. 현재 문서에 XML 문서를 포함 시키려면 &lt;code&gt;{http://www.w3.org/2001/XInclude}include&lt;/code&gt; 요소를 사용하고 &lt;strong&gt;구문 분석&lt;/strong&gt; 속성을 &lt;code&gt;&quot;xml&quot;&lt;/code&gt; 로 설정 하고 &lt;strong&gt;href&lt;/strong&gt; 속성을 사용하여 포함 할 문서를 지정하십시오. .</target>
        </trans-unit>
        <trans-unit id="709f58d0a032f4f2fd538e028e1bf2d5bba72072" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that prints the MIME type of every part of a multipart message structure:</source>
          <target state="translated">다음은 멀티 파트 메시지 구조의 모든 부분에 대한 MIME 유형을 인쇄하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="706b810952f86acc8d676e08674be3f570661c4c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that shows how to modify pickling behavior for a class. The &lt;code&gt;TextReader&lt;/code&gt; class opens a text file, and returns the line number and line contents each time its &lt;code&gt;readline()&lt;/code&gt; method is called. If a &lt;code&gt;TextReader&lt;/code&gt; instance is pickled, all attributes &lt;em&gt;except&lt;/em&gt; the file object member are saved. When the instance is unpickled, the file is reopened, and reading resumes from the last location. The &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#object.__getstate__&quot;&gt;&lt;code&gt;__getstate__()&lt;/code&gt;&lt;/a&gt; methods are used to implement this behavior.</source>
          <target state="translated">다음은 클래스의 피클 링 동작을 수정하는 방법을 보여주는 예입니다. &lt;code&gt;TextReader&lt;/code&gt; 를의 클래스는 텍스트 파일을 열고, 행 번호와 라인 내용의 때마다 반환 &lt;code&gt;readline()&lt;/code&gt; 메소드가 호출된다. 경우 &lt;code&gt;TextReader&lt;/code&gt; 를의 인스턴스가 절인되어, 모든 속성 &lt;em&gt;을 제외한&lt;/em&gt; 파일 객체 멤버는 저장됩니다. 인스턴스가 피클 링되지 않으면 파일이 다시 열리고 마지막 위치부터 다시 시작됩니다. &lt;a href=&quot;#object.__setstate__&quot;&gt; &lt;code&gt;__setstate__()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#object.__getstate__&quot;&gt; &lt;code&gt;__getstate__()&lt;/code&gt; &lt;/a&gt; 방법이 동작을 구현하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b8109b877000b870b322f3f396b556ca2e7627e4" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the same example as before, but considering blanks to be junk. That prevents &lt;code&gt;' abcd'&lt;/code&gt; from matching the &lt;code&gt;' abcd'&lt;/code&gt; at the tail end of the second sequence directly. Instead only the &lt;code&gt;'abcd'&lt;/code&gt; can match, and matches the leftmost &lt;code&gt;'abcd'&lt;/code&gt; in the second sequence:</source>
          <target state="translated">이전과 같은 예이지만 공백을 정크로 간주합니다. 그러면 &lt;code&gt;' abcd'&lt;/code&gt; 가 두 번째 시퀀스의 꼬리 끝에서 &lt;code&gt;' abcd'&lt;/code&gt; 와 직접 일치 하지 않습니다 . 대신 &lt;code&gt;'abcd'&lt;/code&gt; 만 일치 하고 두 번째 시퀀스에서 가장 왼쪽의 &lt;code&gt;'abcd'&lt;/code&gt; 와 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="4db73af24839df174d254d19165dc6b71cd36feb" translate="yes" xml:space="preserve">
          <source>Here, the &lt;code&gt;spam.ham&lt;/code&gt; module is returned from &lt;a href=&quot;#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt;. From this object, the names to import are retrieved and assigned to their respective names.</source>
          <target state="translated">여기서 &lt;code&gt;spam.ham&lt;/code&gt; 모듈은 &lt;a href=&quot;#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt; 에서 반환됩니다 . 이 객체에서 가져올 이름을 검색하여 해당 이름으로 할당합니다.</target>
        </trans-unit>
        <trans-unit id="29017850c0ee8b88df141fa0569f666bcbc4fbcf" translate="yes" xml:space="preserve">
          <source>Here, you want to mark the strings in the &lt;code&gt;animals&lt;/code&gt; list as being translatable, but you don&amp;rsquo;t actually want to translate them until they are printed.</source>
          <target state="translated">여기서 &lt;code&gt;animals&lt;/code&gt; 목록 의 문자열을 번역 가능한 것으로 표시하고 싶지만 실제로 인쇄 될 때까지 번역하고 싶지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="9a472603c4793ba32a26895360ca1c167352b47b" translate="yes" xml:space="preserve">
          <source>Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9.</source>
          <target state="translated">16 진수 형식. 9보다 큰 숫자에 소문자를 사용하여 16 진수로 숫자를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="6dae4fd41d115d12c3ce48b5466486b2c13fb380" translate="yes" xml:space="preserve">
          <source>Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9.</source>
          <target state="translated">16 진수 형식. 9보다 큰 자릿수에 대문자를 사용하여 16 진수로 숫자를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="6ab8e16a9942b4cc932e601bc438522c8cc2f9ab" translate="yes" xml:space="preserve">
          <source>Hide the panel. This does not delete the object, it just makes the window on screen invisible.</source>
          <target state="translated">패널을 숨 깁니다. 개체를 삭제하지 않고 화면의 창을 보이지 않게합니다.</target>
        </trans-unit>
        <trans-unit id="975b00c7afb7ab7c68c7138afb2f613f421d8011" translate="yes" xml:space="preserve">
          <source>Hides the tab specified by &lt;em&gt;tab_id&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;tab_id로&lt;/em&gt; 지정된 탭을 숨 깁니다 .</target>
        </trans-unit>
        <trans-unit id="fc588738c60ecb4b4a8aba29ccba016b1c955025" translate="yes" xml:space="preserve">
          <source>Hides the window. Another window will be activated.</source>
          <target state="translated">창을 숨 깁니다. 다른 창이 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="e16da0d6095b36a564a8943ec4d9d0b7f4859225" translate="yes" xml:space="preserve">
          <source>Hierarchical ListBox</source>
          <target state="translated">계층리스트 박스</target>
        </trans-unit>
        <trans-unit id="d3d148e78aea31488c9234ddf73cf485b8c09186" translate="yes" xml:space="preserve">
          <source>Hierarchical path</source>
          <target state="translated">계층 적 경로</target>
        </trans-unit>
        <trans-unit id="5d60881335567c9090b8c4245ea4e81ecb33da15" translate="yes" xml:space="preserve">
          <source>High median of data.</source>
          <target state="translated">데이터의 중간 값이 높습니다.</target>
        </trans-unit>
        <trans-unit id="6282a11a5eca3c9a65529cea745db1d70b87d28f" translate="yes" xml:space="preserve">
          <source>High priority read/write. Allows block-based filesystems to use polling of the device, which provides lower latency, but may use additional resources.</source>
          <target state="translated">우선 순위가 높은 읽기 / 쓰기. 블록 기반 파일 시스템이 장치의 폴링을 사용하도록 허용하므로 대기 시간은 단축되지만 추가 리소스가 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a87a2489640795cc234e71d98784b569f68d6c1" translate="yes" xml:space="preserve">
          <source>High-level API Index</source>
          <target state="translated">고급 API 색인</target>
        </trans-unit>
        <trans-unit id="3a945e4de6304d6bdbf4f30080b6be3140c870fe" translate="yes" xml:space="preserve">
          <source>High-level APIs</source>
          <target state="translated">고급 API</target>
        </trans-unit>
        <trans-unit id="418113d56ae3ac7d324cf436937deab0a3a252fe" translate="yes" xml:space="preserve">
          <source>High-level APIs to work with network IO.</source>
          <target state="translated">네트워크 IO와 작동하는 고급 API.</target>
        </trans-unit>
        <trans-unit id="b70e4a5c864a275c250115363446ef5404321ea2" translate="yes" xml:space="preserve">
          <source>High-level Module Interface</source>
          <target state="translated">고급 모듈 인터페이스</target>
        </trans-unit>
        <trans-unit id="7654a4bda6a850b2d646ed42a943709375af4e66" translate="yes" xml:space="preserve">
          <source>High-level async/await object to receive network data.</source>
          <target state="translated">네트워크 데이터를 수신하기위한 높은 수준의 비동기 / 대기 객체.</target>
        </trans-unit>
        <trans-unit id="4062c19052bd6f8e57b9924a18dbaadbde67c050" translate="yes" xml:space="preserve">
          <source>High-level async/await object to send network data.</source>
          <target state="translated">네트워크 데이터를 보내기위한 높은 수준의 비동기 / 대기 객체.</target>
        </trans-unit>
        <trans-unit id="2311abfb64cb296285cf9c7ba19e1fc3798a93fa" translate="yes" xml:space="preserve">
          <source>High-level utilities to create and read compressed and archived files are also provided. They rely on the &lt;a href=&quot;zipfile#module-zipfile&quot;&gt;&lt;code&gt;zipfile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;tarfile#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; modules.</source>
          <target state="translated">압축 및 아카이브 된 파일을 작성하고 읽는 고급 유틸리티도 제공됩니다. 그들은 &lt;a href=&quot;zipfile#module-zipfile&quot;&gt; &lt;code&gt;zipfile&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;tarfile#module-tarfile&quot;&gt; &lt;code&gt;tarfile&lt;/code&gt; &lt;/a&gt; 모듈 에 의존 합니다.</target>
        </trans-unit>
        <trans-unit id="56deb8932e61f797ed677a061b4f0f80922f76d6" translate="yes" xml:space="preserve">
          <source>High-performance serialization of built-in types.</source>
          <target state="translated">내장 유형의 고성능 직렬화.</target>
        </trans-unit>
        <trans-unit id="dfb97476260bc6e078c0bc5f5b524817d1b955cb" translate="yes" xml:space="preserve">
          <source>High-resolution per-process timer from the CPU.</source>
          <target state="translated">CPU의 고해상도 프로세스 별 타이머.</target>
        </trans-unit>
        <trans-unit id="ad402f6ce49e651e75ee74d257e55d8a8d2867a5" translate="yes" xml:space="preserve">
          <source>Higher Level Interface</source>
          <target state="translated">높은 수준의 인터페이스</target>
        </trans-unit>
        <trans-unit id="137f307b8ef5696b386b347dfd64aebeeefd159a" translate="yes" xml:space="preserve">
          <source>Higher-level operations on pathnames are defined in the &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">경로 이름에 대한 상위 레벨 조작은 &lt;a href=&quot;os.path#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt; 모듈에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3771c52715fb43b3e757ae1a3d984d3cda0f28a9" translate="yes" xml:space="preserve">
          <source>Highlight the surrounding parenthesis.</source>
          <target state="translated">주변 괄호를 강조 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="fabedad26856d16459739a389abdcea783e78b9b" translate="yes" xml:space="preserve">
          <source>Hilbert &amp;amp; Koch curves</source>
          <target state="translated">힐버트 앤 코흐 곡선</target>
        </trans-unit>
        <trans-unit id="540c634e3749d6c586b2a2f144b6702b6d534584" translate="yes" xml:space="preserve">
          <source>Hint: if you want to specify default values for a specific section, use &lt;code&gt;read_dict()&lt;/code&gt; before you read the actual file.</source>
          <target state="translated">힌트 : 특정 섹션에 기본값을 지정 하려면 실제 파일을 읽기 전에 &lt;code&gt;read_dict()&lt;/code&gt; 를 사용 하십시오.</target>
        </trans-unit>
        <trans-unit id="3d1f110ffacfcfd0164c3693450d07c42f1a288c" translate="yes" xml:space="preserve">
          <source>Hints: dynamic execution of statements is supported by the &lt;a href=&quot;#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt; function. The &lt;a href=&quot;#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; functions returns the current global and local dictionary, respectively, which may be useful to pass around for use by &lt;a href=&quot;#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#exec&quot;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">힌트 : 명령문의 동적 실행은 &lt;a href=&quot;#exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; 함수에 의해 지원됩니다 . &lt;a href=&quot;#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt; 함수에 의해 리턴 사용 주위 통과하는 것이 유용 할 수는 각각 현재의 글로벌 및 로컬 사전, &lt;a href=&quot;#eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#exec&quot;&gt; &lt;code&gt;exec()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="977f72f33fd0f7ecd2f6fdfcaed6ab6f202170b2" translate="yes" xml:space="preserve">
          <source>History file</source>
          <target state="translated">히스토리 파일</target>
        </trans-unit>
        <trans-unit id="b0479c60429c78f9c90b30067d18270acd2fcd91" translate="yes" xml:space="preserve">
          <source>History list</source>
          <target state="translated">히스토리리스트</target>
        </trans-unit>
        <trans-unit id="a4373aa2652bb0f576ef1bb4e7c3fa85312b4e3f" translate="yes" xml:space="preserve">
          <source>Hitting</source>
          <target state="translated">Hitting</target>
        </trans-unit>
        <trans-unit id="b4e97ef75c73cb49dbe471f2a8fc87f85f477bfa" translate="yes" xml:space="preserve">
          <source>Hm. We certainly expected the last statement to print &lt;code&gt;3 4 1 2&lt;/code&gt;. What happened? Here are the steps of the &lt;code&gt;rc.a, rc.b = rc.b, rc.a&lt;/code&gt; line above:</source>
          <target state="translated">흠. 우리는 마지막 진술이 &lt;code&gt;3 4 1 2&lt;/code&gt; 를 인쇄 할 것으로 예상했다 . 어떻게 된 거예요? 위의 &lt;code&gt;rc.a, rc.b = rc.b, rc.a&lt;/code&gt; 행 의 단계는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="84380fa08840c12769a5e603533d5049bf656770" translate="yes" xml:space="preserve">
          <source>Holds a list of strings containing the addresses identified in the &amp;ldquo;RCPT TO:&amp;rdquo; lines from the client.</source>
          <target state="translated">클라이언트에서 &quot;RCPT TO :&quot;행에 식별 된 주소가 포함 된 문자열 목록을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="b1594c5d044abc97b4f02f7439bee39849e8d91b" translate="yes" xml:space="preserve">
          <source>Holds a list of the line strings (decoded using UTF-8) received from the client. The lines have their &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; line ending translated to &lt;code&gt;&quot;\n&quot;&lt;/code&gt;.</source>
          <target state="translated">클라이언트로부터 수신 한 행 문자열 (UTF-8을 사용하여 디코딩 된) 목록을 보유합니다. 행의 &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt; 행은 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="756edd3ad364172179fc4bd28c47aba2e28ee462" translate="yes" xml:space="preserve">
          <source>Holds a string containing all of the data sent by the client during the DATA state, up to but not including the terminating &lt;code&gt;&quot;\r\n.\r\n&quot;&lt;/code&gt;.</source>
          <target state="translated">DATA 상태 동안 클라이언트가 보낸 모든 데이터를 포함하는 문자열을 보유합니다. 종료하는 &lt;code&gt;&quot;\r\n.\r\n&quot;&lt;/code&gt; 까지는 포함하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="173c57b2edd8e26c070f7e3dc3845383b5f7e22f" translate="yes" xml:space="preserve">
          <source>Holds a string containing the address identified in the &amp;ldquo;MAIL FROM:&amp;rdquo; line from the client.</source>
          <target state="translated">클라이언트의 &quot;MAIL FROM :&quot;행에 식별 된 주소가 포함 된 문자열을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="3e97286c991e6ccb42a2a1d0c99c5d6bbf6ae803" translate="yes" xml:space="preserve">
          <source>Holds a string containing the greeting sent by the client in its &amp;ldquo;HELO&amp;rdquo;.</source>
          <target state="translated">클라이언트가 &quot;HELO&quot;로 보낸 인사말을 포함하는 문자열을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="cd7148d74352a877af7eb8ce8dea2f82f4e06603" translate="yes" xml:space="preserve">
          <source>Holds an instance of the class specified by the &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.MessageClass&quot;&gt;&lt;code&gt;MessageClass&lt;/code&gt;&lt;/a&gt; class variable. This instance parses and manages the headers in the HTTP request. The &lt;a href=&quot;http.client#http.client.parse_headers&quot;&gt;&lt;code&gt;parse_headers()&lt;/code&gt;&lt;/a&gt; function from &lt;a href=&quot;http.client#module-http.client&quot;&gt;&lt;code&gt;http.client&lt;/code&gt;&lt;/a&gt; is used to parse the headers and it requires that the HTTP request provide a valid &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; style header.</source>
          <target state="translated">&lt;a href=&quot;#http.server.BaseHTTPRequestHandler.MessageClass&quot;&gt; &lt;code&gt;MessageClass&lt;/code&gt; &lt;/a&gt; 클래스 변수로 지정된 클래스의 인스턴스를 보유 합니다. 이 인스턴스는 HTTP 요청에서 헤더를 구문 분석하고 관리합니다. &lt;a href=&quot;http.client#http.client.parse_headers&quot;&gt; &lt;code&gt;parse_headers()&lt;/code&gt; &lt;/a&gt; 에서 기능 &lt;a href=&quot;http.client#module-http.client&quot;&gt; &lt;code&gt;http.client&lt;/code&gt; 는&lt;/a&gt; 헤더를 구문 분석하는 데 사용되며 그것은 HTTP 요청이 유효한 제공해야합니다 &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; 스타일의 헤더를.</target>
        </trans-unit>
        <trans-unit id="9265fe64481830dee7db00b81cb03da2a4116e1c" translate="yes" xml:space="preserve">
          <source>Holds the &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt; that spawned this channel.</source>
          <target state="translated">이 채널을 생성 한 &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt; &lt;code&gt;SMTPServer&lt;/code&gt; &lt;/a&gt; 를 보유합니다 .</target>
        </trans-unit>
        <trans-unit id="e6689fb001eadb907fa93d352c8361eba9cb20a4" translate="yes" xml:space="preserve">
          <source>Holds the address of the client, the second value returned by &lt;a href=&quot;socket#socket.socket.accept&quot;&gt;&lt;code&gt;socket.accept&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;socket#socket.socket.accept&quot;&gt; &lt;code&gt;socket.accept&lt;/code&gt; 에서&lt;/a&gt; 리턴 한 두 번째 값인 클라이언트의 주소를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="119d2c3ab03cae2266b2eb5305549d108edb800b" translate="yes" xml:space="preserve">
          <source>Holds the current state of the channel. This will be either &lt;code&gt;COMMAND&lt;/code&gt; initially and then &lt;code&gt;DATA&lt;/code&gt; after the client sends a &amp;ldquo;DATA&amp;rdquo; line.</source>
          <target state="translated">채널의 현재 상태를 유지합니다. 이 중 하나가 될 것 &lt;code&gt;COMMAND&lt;/code&gt; 를 처음 다음 &lt;code&gt;DATA&lt;/code&gt; 클라이언트가 &quot;DATA&quot;라인을 전송 한 후.</target>
        </trans-unit>
        <trans-unit id="8f000494374b62d38904da327ccc63a75a5a6e7e" translate="yes" xml:space="preserve">
          <source>Holds the fully-qualified domain name of the server as returned by &lt;a href=&quot;socket#socket.getfqdn&quot;&gt;&lt;code&gt;socket.getfqdn()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.getfqdn&quot;&gt; &lt;code&gt;socket.getfqdn()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 서버의 완전한 도메인 이름을 보유합니다 .</target>
        </trans-unit>
        <trans-unit id="7770cf3e40c26a8548c1a22aecf430e6fd9a88f6" translate="yes" xml:space="preserve">
          <source>Holds the name of the client peer as returned by &lt;code&gt;conn.getpeername()&lt;/code&gt; where &lt;code&gt;conn&lt;/code&gt; is &lt;a href=&quot;#smtpd.SMTPChannel.conn&quot;&gt;&lt;code&gt;conn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">에 의해 반환되는 클라이언트 피어의 이름을 저장 &lt;code&gt;conn.getpeername()&lt;/code&gt; 곳 &lt;code&gt;conn&lt;/code&gt; IS &lt;a href=&quot;#smtpd.SMTPChannel.conn&quot;&gt; &lt;code&gt;conn&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c43acfb18827d1f4ab3a7fb4b51beb5556091b5e" translate="yes" xml:space="preserve">
          <source>Holds the socket object connecting to the client.</source>
          <target state="translated">클라이언트에 연결하는 소켓 오브젝트를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="9f502739ab97f32f0169d7d2a89836a8f3d60183" translate="yes" xml:space="preserve">
          <source>Home down or bottom (lower left)</source>
          <target state="translated">홈 다운 또는 하단 (왼쪽 아래)</target>
        </trans-unit>
        <trans-unit id="b1ad0ce4fc4f46bb58f19b70095b12ebe09c3089" translate="yes" xml:space="preserve">
          <source>Home key (upward+left arrow)</source>
          <target state="translated">홈 키 (위쪽 + 왼쪽 화살표)</target>
        </trans-unit>
        <trans-unit id="82cc12384e3a382be4706e4e097a96b4d36d7997" translate="yes" xml:space="preserve">
          <source>Home page of &lt;strong&gt;nmh&lt;/strong&gt;, an updated version of the original &lt;strong&gt;mh&lt;/strong&gt;.</source>
          <target state="translated">원래 &lt;strong&gt;mh&lt;/strong&gt; 의 업데이트 된 버전 인 &lt;strong&gt;nmh의&lt;/strong&gt; 홈 페이지 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6283e72fcc111c07fd35510504e83a1879e65314" translate="yes" xml:space="preserve">
          <source>Home page of the Expat project.</source>
          <target state="translated">Expat 프로젝트의 홈 페이지.</target>
        </trans-unit>
        <trans-unit id="bd9948dcc8a1b00e0cac588a4f60d2df9c17fd17" translate="yes" xml:space="preserve">
          <source>Hook method executed just after a command dispatch is finished. This method is a stub in &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt;; it exists to be overridden by subclasses. &lt;em&gt;line&lt;/em&gt; is the command line which was executed, and &lt;em&gt;stop&lt;/em&gt; is a flag which indicates whether execution will be terminated after the call to &lt;a href=&quot;#cmd.Cmd.postcmd&quot;&gt;&lt;code&gt;postcmd()&lt;/code&gt;&lt;/a&gt;; this will be the return value of the &lt;a href=&quot;#cmd.Cmd.onecmd&quot;&gt;&lt;code&gt;onecmd()&lt;/code&gt;&lt;/a&gt; method. The return value of this method will be used as the new value for the internal flag which corresponds to &lt;em&gt;stop&lt;/em&gt;; returning false will cause interpretation to continue.</source>
          <target state="translated">명령 디스패치가 완료된 직후에 실행되는 후크 메소드. 이 방법은 &lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt; 의 스텁입니다 . 서브 클래스에 의해 대체됩니다. &lt;em&gt;line&lt;/em&gt; 은 실행 된 명령 행이고 &lt;em&gt;stop&lt;/em&gt; 은 &lt;a href=&quot;#cmd.Cmd.postcmd&quot;&gt; &lt;code&gt;postcmd()&lt;/code&gt; &lt;/a&gt; 호출 후 실행이 종료되는지 여부를 나타내는 플래그입니다 . 이것은 &lt;a href=&quot;#cmd.Cmd.onecmd&quot;&gt; &lt;code&gt;onecmd()&lt;/code&gt; &lt;/a&gt; 메소드 의 리턴 값입니다 . 이 메소드의 리턴 값은 &lt;em&gt;stop에&lt;/em&gt; 해당하는 내부 플래그의 새 값으로 사용됩니다 . false를 반환하면 해석이 계속됩니다.</target>
        </trans-unit>
        <trans-unit id="449ea143caf53c5e39b0355dcec294af589bb71b" translate="yes" xml:space="preserve">
          <source>Hook method executed just before the command line &lt;em&gt;line&lt;/em&gt; is interpreted, but after the input prompt is generated and issued. This method is a stub in &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt;; it exists to be overridden by subclasses. The return value is used as the command which will be executed by the &lt;a href=&quot;#cmd.Cmd.onecmd&quot;&gt;&lt;code&gt;onecmd()&lt;/code&gt;&lt;/a&gt; method; the &lt;a href=&quot;#cmd.Cmd.precmd&quot;&gt;&lt;code&gt;precmd()&lt;/code&gt;&lt;/a&gt; implementation may re-write the command or simply return &lt;em&gt;line&lt;/em&gt; unchanged.</source>
          <target state="translated">훅 메소드는 명령 행하기 전에 실행 &lt;em&gt;라인이&lt;/em&gt; 해석됩니다 만, 입력 프롬프트 후에 생성 및 발급됩니다. 이 방법은 &lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt; 의 스텁입니다 . 서브 클래스에 의해 대체됩니다. 리턴 값은 &lt;a href=&quot;#cmd.Cmd.onecmd&quot;&gt; &lt;code&gt;onecmd()&lt;/code&gt; &lt;/a&gt; 메소드에 의해 실행될 명령으로 사용됩니다 . &lt;a href=&quot;#cmd.Cmd.precmd&quot;&gt; &lt;code&gt;precmd()&lt;/code&gt; &lt;/a&gt; 실행 명령을 다시 작성하거나 리턴 할 수 &lt;em&gt;라인&lt;/em&gt; 변경.</target>
        </trans-unit>
        <trans-unit id="9045e8acde6cdc71927bf33200a8d7172ae0f172" translate="yes" xml:space="preserve">
          <source>Hook method executed once when &lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt;&lt;code&gt;cmdloop()&lt;/code&gt;&lt;/a&gt; is about to return. This method is a stub in &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt;; it exists to be overridden by subclasses.</source>
          <target state="translated">&lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt; &lt;code&gt;cmdloop()&lt;/code&gt; &lt;/a&gt; 가 리턴 되려고 할 때 후크 메소드가 한 번 실행됩니다 . 이 방법은 &lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt; 의 스텁입니다 . 서브 클래스에 의해 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="087ffacadf4afb6c47c00dbd186afdecd1130959" translate="yes" xml:space="preserve">
          <source>Hook method executed once when &lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt;&lt;code&gt;cmdloop()&lt;/code&gt;&lt;/a&gt; is called. This method is a stub in &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt;; it exists to be overridden by subclasses.</source>
          <target state="translated">&lt;a href=&quot;#cmd.Cmd.cmdloop&quot;&gt; &lt;code&gt;cmdloop()&lt;/code&gt; &lt;/a&gt; 가 호출 될 때 후크 메소드가 한 번 실행됩니다 . 이 방법은 &lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt; 의 스텁입니다 . 서브 클래스에 의해 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="ef2e93e3cb2e42c7a2289b69a4580ae9d70a03b2" translate="yes" xml:space="preserve">
          <source>Hooks are added using the &lt;a href=&quot;#sys.addaudithook&quot;&gt;&lt;code&gt;sys.addaudithook()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_AddAuditHook&quot;&gt;&lt;code&gt;PySys_AddAuditHook()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">후크는 &lt;a href=&quot;#sys.addaudithook&quot;&gt; &lt;code&gt;sys.addaudithook()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_AddAuditHook&quot;&gt; &lt;code&gt;PySys_AddAuditHook()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 추가 됩니다.</target>
        </trans-unit>
        <trans-unit id="789c637d3fc0159993d0ac9bb6d51253ea6f78f4" translate="yes" xml:space="preserve">
          <source>Hooks are added using the &lt;a href=&quot;#sys.addaudithook&quot;&gt;&lt;code&gt;sys.addaudithook()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/c-api/sys.html#c.PySys_AddAuditHook&quot;&gt;&lt;code&gt;PySys_AddAuditHook()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">후크는 &lt;a href=&quot;#sys.addaudithook&quot;&gt; &lt;code&gt;sys.addaudithook()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.9/c-api/sys.html#c.PySys_AddAuditHook&quot;&gt; &lt;code&gt;PySys_AddAuditHook()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 추가 됩니다.</target>
        </trans-unit>
        <trans-unit id="5eda08bad54f52c7bdb5179cf6a75b60587955cd" translate="yes" xml:space="preserve">
          <source>Horizontal highlight</source>
          <target state="translated">수평 하이라이트</target>
        </trans-unit>
        <trans-unit id="a5a7e131a5cb8762553101bda765297974113fa2" translate="yes" xml:space="preserve">
          <source>Host is down</source>
          <target state="translated">호스트가 다운되었습니다</target>
        </trans-unit>
        <trans-unit id="191f7808ee27d0914021b6bf49daf82e21931c8e" translate="yes" xml:space="preserve">
          <source>Host name (lower case)</source>
          <target state="translated">호스트 이름 (소문자)</target>
        </trans-unit>
        <trans-unit id="b5e18f2451a0719cbdf851704cee573f6887f1e1" translate="yes" xml:space="preserve">
          <source>Hostname of the server: &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; type, or &lt;code&gt;None&lt;/code&gt; for server-side socket or if the hostname was not specified in the constructor.</source>
          <target state="translated">서버의 호스트 이름 : &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 유형 또는 서버 측 소켓의 경우 또는 생성자에 호스트 이름이 지정되지 않은 경우 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="425c6644ee61c9a230fcbf65d7494b117f494021" translate="yes" xml:space="preserve">
          <source>Hour (12-hour clock) as a decimal number [01,12].</source>
          <target state="translated">십진수로 표시되는 시간 (12 시간제) [01,12].</target>
        </trans-unit>
        <trans-unit id="f59212d5750be40abbdaa5bbb82d3fdc34b42955" translate="yes" xml:space="preserve">
          <source>Hour (12-hour clock) as a zero-padded decimal number.</source>
          <target state="translated">0으로 채워진 10 진수로 표시되는 시간 (12 시간제)입니다.</target>
        </trans-unit>
        <trans-unit id="fb9eb08a7d5aa5786e2bc10ef029f16e805c8a84" translate="yes" xml:space="preserve">
          <source>Hour (24-hour clock) as a decimal number [00,23].</source>
          <target state="translated">십진수로 된 시간 (24 시간제) [00,23].</target>
        </trans-unit>
        <trans-unit id="00929e29b383160b1e2458e720fcf861fdf67571" translate="yes" xml:space="preserve">
          <source>Hour (24-hour clock) as a zero-padded decimal number.</source>
          <target state="translated">0으로 채워진 10 진수로 표시되는 시간 (24 시간제)입니다.</target>
        </trans-unit>
        <trans-unit id="9e25a34e635a123f8958bbe26e7c4843278597fb" translate="yes" xml:space="preserve">
          <source>Hours</source>
          <target state="translated">Hours</target>
        </trans-unit>
        <trans-unit id="2093b61ef7ae08159816a865e810be957ff212f4" translate="yes" xml:space="preserve">
          <source>Hours (zero-based)</source>
          <target state="translated">시간 (0부터 시작)</target>
        </trans-unit>
        <trans-unit id="8cecc82d72d68f9151cb0901cfe40eeac15bfca6" translate="yes" xml:space="preserve">
          <source>How It Works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="3cf8194af8b431024aea161c0d72843e4d494297" translate="yes" xml:space="preserve">
          <source>How Tk and Tkinter are Related</source>
          <target state="translated">Tk와 Tkinter의 관계</target>
        </trans-unit>
        <trans-unit id="786543e016a5fcb5bd0820fa60ef4b7c492ab041" translate="yes" xml:space="preserve">
          <source>How To Use This Section</source>
          <target state="translated">이 섹션을 사용하는 방법</target>
        </trans-unit>
        <trans-unit id="b6a3579a533572ecb0e0f96eccc0c564589a41d7" translate="yes" xml:space="preserve">
          <source>How are Docstring Examples Recognized?</source>
          <target state="translated">독 스트링 예제는 어떻게 인식됩니까?</target>
        </trans-unit>
        <trans-unit id="8b82a90e60fe771b243b5707683f611d5a457c14" translate="yes" xml:space="preserve">
          <source>How are Enums different?</source>
          <target state="translated">열거 형은 어떻게 다릅니 까?</target>
        </trans-unit>
        <trans-unit id="b49c247604ffa94c5e6d2020bc2401f351cdc8a4" translate="yes" xml:space="preserve">
          <source>How many bytes should tokens use?</source>
          <target state="translated">토큰은 몇 바이트를 사용해야합니까?</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
