<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="d7ea75922f47bd0999a4871991963c1f8c3f0ce1" translate="yes" xml:space="preserve">
          <source>This support allows immutable sequences, such as &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt; instances, to be used as &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; keys and stored in &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">이 지원은 같은 불변 서열 허용 &lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; &lt;/a&gt; 인스턴스로서 사용될 &lt;a href=&quot;#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 키에 저장된 &lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt; 경우.</target>
        </trans-unit>
        <trans-unit id="1e24218daa333721903c467af431435be2cb4830" translate="yes" xml:space="preserve">
          <source>This table contains all events raised by &lt;a href=&quot;sys#sys.audit&quot;&gt;&lt;code&gt;sys.audit()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_Audit&quot;&gt;&lt;code&gt;PySys_Audit()&lt;/code&gt;&lt;/a&gt; calls throughout the CPython runtime and the standard library. These calls were added in 3.8.0 or later.</source>
          <target state="translated">이 테이블에는 CPython 런타임 및 표준 라이브러리 전체에서 &lt;a href=&quot;sys#sys.audit&quot;&gt; &lt;code&gt;sys.audit()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.8/c-api/sys.html#c.PySys_Audit&quot;&gt; &lt;code&gt;PySys_Audit()&lt;/code&gt; &lt;/a&gt; 호출로 발생한 모든 이벤트가 포함됩니다 . 이 통화는 3.8.0 이상에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="f02611c8b86086918f9b0d8d6fba08360ccbf3bd" translate="yes" xml:space="preserve">
          <source>This table contains all events raised by &lt;a href=&quot;sys#sys.audit&quot;&gt;&lt;code&gt;sys.audit()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/c-api/sys.html#c.PySys_Audit&quot;&gt;&lt;code&gt;PySys_Audit()&lt;/code&gt;&lt;/a&gt; calls throughout the CPython runtime and the standard library. These calls were added in 3.8.0 or later.</source>
          <target state="translated">이 테이블에는 CPython 런타임 및 표준 라이브러리 전체에서 &lt;a href=&quot;sys#sys.audit&quot;&gt; &lt;code&gt;sys.audit()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.9/c-api/sys.html#c.PySys_Audit&quot;&gt; &lt;code&gt;PySys_Audit()&lt;/code&gt; &lt;/a&gt; 호출에 의해 발생한 모든 이벤트가 포함됩니다 . 이러한 호출은 3.8.0 이상에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="8ff575b6bfca960b011d17b2cb16cbed1b2362fb" translate="yes" xml:space="preserve">
          <source>This table lists the bitwise operations sorted in ascending priority:</source>
          <target state="translated">이 표에는 오름차순으로 정렬 된 비트 단위 연산이 나열되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad37e36bc7aa1e48e2a868ce67d705d178a74a99" translate="yes" xml:space="preserve">
          <source>This table lists the sequence operations sorted in ascending priority. In the table, &lt;em&gt;s&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt; are sequences of the same type, &lt;em&gt;n&lt;/em&gt;, &lt;em&gt;i&lt;/em&gt;, &lt;em&gt;j&lt;/em&gt; and &lt;em&gt;k&lt;/em&gt; are integers and &lt;em&gt;x&lt;/em&gt; is an arbitrary object that meets any type and value restrictions imposed by &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">이 표에는 오름차순으로 정렬 된 시퀀스 작업이 나열되어 있습니다. 표에서 &lt;em&gt;s&lt;/em&gt; 및 &lt;em&gt;t&lt;/em&gt; 는 동일한 유형의 시퀀스이며, &lt;em&gt;n&lt;/em&gt; , &lt;em&gt;i&lt;/em&gt; , &lt;em&gt;j&lt;/em&gt; 및 &lt;em&gt;k&lt;/em&gt; 는 정수이고 &lt;em&gt;x&lt;/em&gt; 는 &lt;em&gt;s&lt;/em&gt; 에 의해 부과 된 모든 유형 및 값 제한을 충족시키는 임의의 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="a2aefacd102c9e6656a62a4fcbeeefcf37daf49c" translate="yes" xml:space="preserve">
          <source>This table shows how abstract operations correspond to operator symbols in the Python syntax and the functions in the &lt;a href=&quot;#module-operator&quot;&gt;&lt;code&gt;operator&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">이 테이블은 추상 구문이 Python 구문의 연산자 기호와 &lt;a href=&quot;#module-operator&quot;&gt; &lt;code&gt;operator&lt;/code&gt; &lt;/a&gt; 모듈 의 함수에 해당하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="b1dd58529875498466717de342c9a860fc1ad5df" translate="yes" xml:space="preserve">
          <source>This table summarizes the comparison operations:</source>
          <target state="translated">이 표는 비교 작업을 요약합니다.</target>
        </trans-unit>
        <trans-unit id="0b8f0910cff485b75d8a8a9bb0bef70a5b8fa95c" translate="yes" xml:space="preserve">
          <source>This takes a binary file for reading a pickle data stream.</source>
          <target state="translated">피클 데이터 스트림을 읽으려면 이진 파일이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="900a01a65ca258d685a4183dcedf4ab95f1befd2" translate="yes" xml:space="preserve">
          <source>This takes a binary file for writing a pickle data stream.</source>
          <target state="translated">피클 데이터 스트림을 작성하는 데 이진 파일이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="86e66be62941acf0508da30f994af1c9b7a508e7" translate="yes" xml:space="preserve">
          <source>This tool adds flexibility to existing functions or classes whose output is hardwired to stdout.</source>
          <target state="translated">이 도구는 출력이 stdout에 배선 된 기존 함수 또는 클래스에 유연성을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="0a41260cd31015b90715324793e49b3b05f1940e" translate="yes" xml:space="preserve">
          <source>This type can be used as follows:</source>
          <target state="translated">이 유형은 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ee65f84be1d10480bc08fe90f21eed2ddbba4bd" translate="yes" xml:space="preserve">
          <source>This type describes the resource names passed into the various functions in this package. This is defined as &lt;code&gt;Union[str, os.PathLike]&lt;/code&gt;.</source>
          <target state="translated">이 유형은이 패키지의 다양한 기능에 전달 된 자원 이름을 설명합니다. 이것은 &lt;code&gt;Union[str, os.PathLike]&lt;/code&gt; 로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="9a19b7eb98d6488f6aac8865d83dc8ae338e23ad" translate="yes" xml:space="preserve">
          <source>This type may be used as follows:</source>
          <target state="translated">이 유형은 다음과 같이 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b973b124bff356b4f78d8fc39b8c99c1b87b5238" translate="yes" xml:space="preserve">
          <source>This type represents the types &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt; of byte sequences.</source>
          <target state="translated">이 유형은 바이트 시퀀스의 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; &lt;/a&gt; 유형을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="cc3a76bb6dedb7cdbe1024f060da03de3f0dba7d" translate="yes" xml:space="preserve">
          <source>This type represents the types &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;stdtypes#memoryview&quot;&gt;&lt;code&gt;memoryview&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 유형은 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#memoryview&quot;&gt; &lt;code&gt;memoryview&lt;/code&gt; &lt;/a&gt; 유형을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="e4ac703cec9ee3e03481b97675e769369d5ba849" translate="yes" xml:space="preserve">
          <source>This uses datagrams, which are discrete packets of information that may arrive out of order or be lost while in transit. The parameters are the same as for &lt;a href=&quot;#socketserver.TCPServer&quot;&gt;&lt;code&gt;TCPServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">데이터 그램은 데이터 그램을 사용하는데,이 데이터 그램은 순서가 잘못되었거나 운송 중 손실 될 수있는 정보 패킷입니다. 매개 변수는 &lt;a href=&quot;#socketserver.TCPServer&quot;&gt; &lt;code&gt;TCPServer&lt;/code&gt; &lt;/a&gt; 와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="56aa8f5d34f966fb99b842edc763ce5f7f477da2" translate="yes" xml:space="preserve">
          <source>This uses the Internet TCP protocol, which provides for continuous streams of data between the client and server. If &lt;em&gt;bind_and_activate&lt;/em&gt; is true, the constructor automatically attempts to invoke &lt;a href=&quot;#socketserver.BaseServer.server_bind&quot;&gt;&lt;code&gt;server_bind()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.BaseServer.server_activate&quot;&gt;&lt;code&gt;server_activate()&lt;/code&gt;&lt;/a&gt;. The other parameters are passed to the &lt;a href=&quot;#socketserver.BaseServer&quot;&gt;&lt;code&gt;BaseServer&lt;/code&gt;&lt;/a&gt; base class.</source>
          <target state="translated">인터넷 TCP 프로토콜을 사용하여 클라이언트와 서버간에 지속적인 데이터 스트림을 제공합니다. 경우 &lt;em&gt;bind_and_activate는&lt;/em&gt; 사실, 생성자가 자동으로 시도를 호출하는 &lt;a href=&quot;#socketserver.BaseServer.server_bind&quot;&gt; &lt;code&gt;server_bind()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#socketserver.BaseServer.server_activate&quot;&gt; &lt;code&gt;server_activate()&lt;/code&gt; &lt;/a&gt; . 다른 매개 변수는 &lt;a href=&quot;#socketserver.BaseServer&quot;&gt; &lt;code&gt;BaseServer&lt;/code&gt; &lt;/a&gt; 기본 클래스 로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="28cf12232e0ad7f17ee9f0ae6d9c93eb3395bad0" translate="yes" xml:space="preserve">
          <source>This uses the entry&amp;rsquo;s name: directories should always end with &lt;code&gt;/&lt;/code&gt;.</source>
          <target state="translated">항목 이름을 사용합니다. 디렉토리는 항상 &lt;code&gt;/&lt;/code&gt; 로 끝나야 합니다.</target>
        </trans-unit>
        <trans-unit id="a1b2decf1b76038b0a4989697f74a8b441227dc0" translate="yes" xml:space="preserve">
          <source>This utility method may call &lt;a href=&quot;#threading.Condition.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; repeatedly until the predicate is satisfied, or until a timeout occurs. The return value is the last return value of the predicate and will evaluate to &lt;code&gt;False&lt;/code&gt; if the method timed out.</source>
          <target state="translated">이 유틸리티 메소드는 술어가 충족 될 때까지 또는 시간 종료가 발생할 때까지 &lt;a href=&quot;#threading.Condition.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt; 반복적으로 호출 할 수 있습니다 . 리턴 값은 술부의 마지막 리턴 값이며 메소드가 시간 종료되면 &lt;code&gt;False&lt;/code&gt; 로 평가 됩니다.</target>
        </trans-unit>
        <trans-unit id="3dba7730209902073e9f1027bf8339c611419fa6" translate="yes" xml:space="preserve">
          <source>This value is guaranteed by POSIX to be at least 512.</source>
          <target state="translated">이 값은 POSIX에서 512 이상을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="461cfb21d5f19ff778807be8dac3274bf7b6a8f6" translate="yes" xml:space="preserve">
          <source>This value is initially set based on the value of the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;pycache_prefix=PATH&lt;/code&gt; command-line option or the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt;&lt;/a&gt; environment variable (command-line takes precedence). If neither are set, it is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">이 값은 초기에 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;pycache_prefix=PATH&lt;/code&gt; 명령 행 옵션 또는 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt; &lt;/a&gt; 환경 변수 (명령 행이 우선 함) 값을 기반으로 설정 됩니다. 둘 다 설정되지 않으면 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9e7b218744870e9be21539cb53c8232f7dfdecba" translate="yes" xml:space="preserve">
          <source>This value is initially set based on the value of the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;pycache_prefix=PATH&lt;/code&gt; command-line option or the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-7&quot;&gt;&lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt;&lt;/a&gt; environment variable (command-line takes precedence). If neither are set, it is &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">이 값은 처음에 &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;pycache_prefix=PATH&lt;/code&gt; 명령 줄 옵션 또는 &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX&quot; id=&quot;index-7&quot;&gt; &lt;code&gt;PYTHONPYCACHEPREFIX&lt;/code&gt; &lt;/a&gt; 환경 변수 의 값에 따라 설정됩니다 (명령 줄이 우선 적용됨 ). 둘 다 설정되지 않은 경우 &lt;code&gt;None&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c5cb6aae01c156404e71b59a7cc16a2897739ebe" translate="yes" xml:space="preserve">
          <source>This visitor calls &lt;a href=&quot;#ast.NodeVisitor.visit&quot;&gt;&lt;code&gt;visit()&lt;/code&gt;&lt;/a&gt; on all children of the node.</source>
          <target state="translated">이 방문자 는 노드의 모든 자식에서 &lt;a href=&quot;#ast.NodeVisitor.visit&quot;&gt; &lt;code&gt;visit()&lt;/code&gt; &lt;/a&gt; 를 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="48d16e3abf4349547e65c79bfe2cd30b3ecca80f" translate="yes" xml:space="preserve">
          <source>This watcher is used by default.</source>
          <target state="translated">이 감시자는 기본적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c18d35e8fcbe18d32af66e12f7c871cec83985e6" translate="yes" xml:space="preserve">
          <source>This way, you can let &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; do the job of calling the appropriate function after argument parsing is complete. Associating functions with actions like this is typically the easiest way to handle the different actions for each of your subparsers. However, if it is necessary to check the name of the subparser that was invoked, the &lt;code&gt;dest&lt;/code&gt; keyword argument to the &lt;a href=&quot;#argparse.ArgumentParser.add_subparsers&quot;&gt;&lt;code&gt;add_subparsers()&lt;/code&gt;&lt;/a&gt; call will work:</source>
          <target state="translated">이런 식으로 인수 구문 분석이 완료된 후 &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt; 가 적절한 함수를 호출하는 작업을 수행 하도록 할 수 있습니다 . 이와 같은 조치와 기능을 연관시키는 것이 일반적으로 각 서브 파서에 대해 다른 조치를 처리하는 가장 쉬운 방법입니다. 그러나 호출 된 하위 구문 분석기의 이름을 확인해야하는 경우 &lt;a href=&quot;#argparse.ArgumentParser.add_subparsers&quot;&gt; &lt;code&gt;add_subparsers()&lt;/code&gt; &lt;/a&gt; 호출에 대한 &lt;code&gt;dest&lt;/code&gt; 키워드 인수 가 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e4e3194f441141c309638c96c8e53e0bd92fa3ad" translate="yes" xml:space="preserve">
          <source>This way, you can use date/timestamps from Python without any additional fiddling in most cases. The format of the adapters is also compatible with the experimental SQLite date/time functions.</source>
          <target state="translated">이런 식으로, 대부분의 경우 추가 조정없이 Python의 날짜 / 시간 소인을 사용할 수 있습니다. 어댑터의 형식은 실험적인 SQLite 날짜 / 시간 기능과도 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="5630aa81c7c661cc3164234f583e1b2ab4ae528a" translate="yes" xml:space="preserve">
          <source>This widget accepts the following specific option:</source>
          <target state="translated">이 위젯은 다음과 같은 특정 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="b7516b8e7c43a47e302154f3f68de21c415616f8" translate="yes" xml:space="preserve">
          <source>This widget accepts the following specific options:</source>
          <target state="translated">이 위젯은 다음과 같은 특정 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="52f8a705e29799639a562bd8ad8470b5b2529355" translate="yes" xml:space="preserve">
          <source>This widget generates a &lt;strong&gt;&amp;lt;&amp;lt;NotebookTabChanged&amp;gt;&amp;gt;&lt;/strong&gt; virtual event after a new tab is selected.</source>
          <target state="translated">이 위젯 은 새 탭을 선택한 후 &lt;strong&gt;&amp;lt;&amp;lt; NotebookTabChanged &amp;gt;&amp;gt;&lt;/strong&gt; 가상 이벤트를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="583cc459c26656b6f5fa15adcf419a55eb1a8ea4" translate="yes" xml:space="preserve">
          <source>This widget has neither specific options nor specific methods, besides the ones inherited from &lt;code&gt;ttk.Widget&lt;/code&gt;.</source>
          <target state="translated">이 위젯에는 &lt;code&gt;ttk.Widget&lt;/code&gt; 에서 상속 된 것 외에 특정 옵션이나 방법이 없습니다 .</target>
        </trans-unit>
        <trans-unit id="cc6727990ae2f38c8adc40d38ee32c2f9a8cccff" translate="yes" xml:space="preserve">
          <source>This widget supports only &amp;ldquo;southeast&amp;rdquo; resizing.</source>
          <target state="translated">이 위젯은 &quot;동남쪽&quot;크기 조정 만 지원합니다.</target>
        </trans-unit>
        <trans-unit id="893091dadd2289a375b8c02352c7b0621886804a" translate="yes" xml:space="preserve">
          <source>This will add a header that looks like</source>
          <target state="translated">이것은 다음과 같은 헤더를 추가합니다</target>
        </trans-unit>
        <trans-unit id="f14e86fc21e10a9d916560d64ebdcc9da48c2735" translate="yes" xml:space="preserve">
          <source>This will add to the package&amp;rsquo;s &lt;code&gt;__path__&lt;/code&gt; all subdirectories of directories on &lt;code&gt;sys.path&lt;/code&gt; named after the package. This is useful if one wants to distribute different parts of a single logical package as multiple directories.</source>
          <target state="translated">패키지의 &lt;code&gt;__path__&lt;/code&gt; 에 패키지 이름을 딴 &lt;code&gt;sys.path&lt;/code&gt; 에있는 디렉토리의 모든 하위 디렉토리 가 추가됩니다 . 단일 논리 패키지의 다른 부분을 여러 디렉토리로 분배하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fb6d4ec5dcc38b1ced4593b66a2139b238f95cf3" translate="yes" xml:space="preserve">
          <source>This will be &lt;code&gt;&quot;SimpleHTTP/&quot; + __version__&lt;/code&gt;, where &lt;code&gt;__version__&lt;/code&gt; is defined at the module level.</source>
          <target state="translated">이있을 것 &lt;code&gt;&quot;SimpleHTTP/&quot; + __version__&lt;/code&gt; 여기서 &lt;code&gt;__version__&lt;/code&gt; 이 모듈 레벨에서 정의된다.</target>
        </trans-unit>
        <trans-unit id="7a74e2ffba13721aff2e34d74a03a08eb350d82d" translate="yes" xml:space="preserve">
          <source>This will copy everything except &lt;code&gt;.pyc&lt;/code&gt; files and files or directories whose name starts with &lt;code&gt;tmp&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;.pyc&lt;/code&gt; 파일과 파일 이름 또는 &lt;code&gt;tmp&lt;/code&gt; 로 시작하는 디렉토리를 제외한 모든 것을 복사 합니다 .</target>
        </trans-unit>
        <trans-unit id="56e49294b1d7ce21a415dcf1693ab79057f7c8de" translate="yes" xml:space="preserve">
          <source>This will deadlock when using &lt;code&gt;stdout=PIPE&lt;/code&gt; or &lt;code&gt;stderr=PIPE&lt;/code&gt; and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;Popen.communicate()&lt;/code&gt;&lt;/a&gt; when using pipes to avoid that.</source>
          <target state="translated">&lt;code&gt;stdout=PIPE&lt;/code&gt; 또는 &lt;code&gt;stderr=PIPE&lt;/code&gt; 를 사용할 때 교착 상태가 발생 하고 하위 프로세스는 파이프에 충분한 출력을 생성하여 OS 파이프 버퍼가 더 많은 데이터를 수신하기를 기다리는 것을 차단합니다. 파이프를 사용하지 않을 때는 &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt; &lt;code&gt;Popen.communicate()&lt;/code&gt; &lt;/a&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f66e79b5854a58b1ad3c1f14c288974b4d8104d8" translate="yes" xml:space="preserve">
          <source>This will extend the bindings for the toplevel window containing the notebook as follows:</source>
          <target state="translated">그러면 노트북을 포함하는 최상위 창에 대한 바인딩이 다음과 같이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="5d9c8b968447210c764e73083a7543273f082164" translate="yes" xml:space="preserve">
          <source>This will import &lt;code&gt;example.py&lt;/code&gt; as a standalone module and run &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt; on it. Note that this may not work correctly if the file is part of a package and imports other submodules from that package.</source>
          <target state="translated">그러면 &lt;code&gt;example.py&lt;/code&gt; 를 독립형 모듈로 가져 와서 &lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt; 를 실행 합니다. 파일이 패키지의 일부이고 해당 패키지에서 다른 하위 모듈을 가져 오는 경우에는 올바르게 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="39490d2477cc24388e4a798bb86272c054747d2f" translate="yes" xml:space="preserve">
          <source>This will produce a standalone executable, which can be run on any machine with the appropriate interpreter available. See &lt;a href=&quot;#zipapp-specifying-the-interpreter&quot;&gt;Specifying the Interpreter&lt;/a&gt; for details. It can be shipped to users as a single file.</source>
          <target state="translated">그러면 독립형 실행 파일이 생성되며 사용 가능한 적절한 인터프리터가있는 모든 시스템에서 실행할 수 있습니다. 자세한 내용 &lt;a href=&quot;#zipapp-specifying-the-interpreter&quot;&gt;은 인터프리터 지정&lt;/a&gt; 을 참조하십시오. 단일 파일로 사용자에게 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97484c013cbe0659d7256e11582bf0a3ad503821" translate="yes" xml:space="preserve">
          <source>This will run all tests defined in the named module.</source>
          <target state="translated">명명 된 모듈에 정의 된 모든 테스트가 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2094ced9ee584cde74f455b9491be9e83a991dc2" translate="yes" xml:space="preserve">
          <source>This will send a request to the server using the HTTP request method &lt;em&gt;method&lt;/em&gt; and the selector &lt;em&gt;url&lt;/em&gt;.</source>
          <target state="translated">HTTP 요청 메소드 &lt;em&gt;메소드&lt;/em&gt; 와 선택기 &lt;em&gt;url을&lt;/em&gt; 사용하여 서버에 요청을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="23b91a0f0ff42f96fa95a59986f06ac3f48f2a85" translate="yes" xml:space="preserve">
          <source>This will set &lt;code&gt;obj.attr&lt;/code&gt; to 5 for the duration of the &lt;code&gt;with&lt;/code&gt; block, restoring the old value at the end of the block. If &lt;code&gt;attr&lt;/code&gt; doesn&amp;rsquo;t exist on &lt;code&gt;obj&lt;/code&gt;, it will be created and then deleted at the end of the block.</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 블록 이 지속되는 동안 &lt;code&gt;obj.attr&lt;/code&gt; 을 5로 설정 하여 블록 끝에서 이전 값을 복원합니다. 경우 &lt;code&gt;attr&lt;/code&gt; 존재하지 않습니다 &lt;code&gt;obj&lt;/code&gt; , 그것은 생성하고 블록의 끝에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="de375732b809a212afe6d4f9378da4dcd4108925" translate="yes" xml:space="preserve">
          <source>This will set &lt;code&gt;obj[&quot;item&quot;]&lt;/code&gt; to 5 for the duration of the &lt;code&gt;with&lt;/code&gt; block, restoring the old value at the end of the block. If &lt;code&gt;item&lt;/code&gt; doesn&amp;rsquo;t exist on &lt;code&gt;obj&lt;/code&gt;, it will be created and then deleted at the end of the block.</source>
          <target state="translated">이 설정한다 &lt;code&gt;obj[&quot;item&quot;]&lt;/code&gt; 의 기간 동안 (5) &lt;code&gt;with&lt;/code&gt; 블록의 끝에서 이전 값을 복원 블록. &lt;code&gt;item&lt;/code&gt; 이 &lt;code&gt;obj&lt;/code&gt; 에 존재하지 않으면, 아이템 은 생성되고 블록의 끝에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="f075685c6e10f2c3bfffdc256e8855b5f859c7c1" translate="yes" xml:space="preserve">
          <source>This will sort all the statistics by file name, and then print out statistics for only the class init methods (since they are spelled with &lt;code&gt;__init__&lt;/code&gt; in them). As one final example, you could try:</source>
          <target state="translated">이렇게하면 모든 통계가 파일 이름별로 정렬 된 다음 클래스 init 메소드에 대한 통계 만 출력됩니다 (왜냐하면 &lt;code&gt;__init__&lt;/code&gt; 로 철자가 있으므로 ). 마지막 예로, 다음을 시도해 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ccb8cdb74cd1cd8b07da082d3d59c7892819a38" translate="yes" xml:space="preserve">
          <source>This won&amp;rsquo;t display anything unless an example fails, in which case the failing example(s) and the cause(s) of the failure(s) are printed to stdout, and the final line of output is &lt;code&gt;***Test Failed*** N failures.&lt;/code&gt;, where &lt;em&gt;N&lt;/em&gt; is the number of examples that failed.</source>
          <target state="translated">예제가 실패하지 않으면 아무것도 표시되지 않습니다.이 경우 실패한 예제와 실패의 원인이 stdout에 인쇄되고 최종 출력 행은 &lt;code&gt;***Test Failed*** N failures.&lt;/code&gt; 여기서 &lt;em&gt;N&lt;/em&gt; 은 실패한 예제 수입니다.</target>
        </trans-unit>
        <trans-unit id="45e4d25dd4f52913e8043d67497db894d9ad0b86" translate="yes" xml:space="preserve">
          <source>This works as class or function &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;. With a class, it applies recursively to all methods defined in that class (but not to methods defined in its superclasses or subclasses).</source>
          <target state="translated">이것은 클래스 또는 함수 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;데코레이터&lt;/a&gt; 로 작동합니다 . 클래스를 사용하면 해당 클래스에 정의 된 모든 메소드에 재귀 적으로 적용됩니다 (단, 수퍼 클래스 또는 서브 클래스에 정의 된 메소드는 해당되지 않음).</target>
        </trans-unit>
        <trans-unit id="5c886fb4204cedba7ca0634a4e0a0e9ee1736739" translate="yes" xml:space="preserve">
          <source>This works as class or function &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;. With a class, it applies recursively to all methods defined in that class (but not to methods defined in its superclasses or subclasses).</source>
          <target state="translated">이것은 클래스 또는 함수 &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;데코레이터&lt;/a&gt; 로 작동합니다 . 클래스를 사용하면 해당 클래스에 정의 된 모든 메서드에 재귀 적으로 적용됩니다 (하지만 수퍼 클래스 또는 하위 클래스에 정의 된 메서드에는 적용되지 않음).</target>
        </trans-unit>
        <trans-unit id="22b71cd883b8cced346581da93f8ff4e43210206" translate="yes" xml:space="preserve">
          <source>This works because the dummy definition of &lt;code&gt;_()&lt;/code&gt; simply returns the string unchanged. And this dummy definition will temporarily override any definition of &lt;code&gt;_()&lt;/code&gt; in the built-in namespace (until the &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt; command). Take care, though if you have a previous definition of &lt;code&gt;_()&lt;/code&gt; in the local namespace.</source>
          <target state="translated">&lt;code&gt;_()&lt;/code&gt; 의 더미 정의는 단순히 문자열을 변경하지 않고 반환 하기 때문에 작동합니다 . 그리고이 더미 정의는 내장 네임 스페이스에서 &lt;code&gt;_()&lt;/code&gt; 의 정의를 일시적으로 무시합니다 ( &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#del&quot;&gt; &lt;code&gt;del&lt;/code&gt; &lt;/a&gt; 명령 까지 ). 로컬 네임 스페이스 에 &lt;code&gt;_()&lt;/code&gt; 의 이전 정의가있는 경우주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="53dfd42c2a2e865ad36bac73aed2be7faf9d1083" translate="yes" xml:space="preserve">
          <source>This works because the dummy definition of &lt;code&gt;_()&lt;/code&gt; simply returns the string unchanged. And this dummy definition will temporarily override any definition of &lt;code&gt;_()&lt;/code&gt; in the built-in namespace (until the &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#del&quot;&gt;&lt;code&gt;del&lt;/code&gt;&lt;/a&gt; command). Take care, though if you have a previous definition of &lt;code&gt;_()&lt;/code&gt; in the local namespace.</source>
          <target state="translated">이것은 &lt;code&gt;_()&lt;/code&gt; 의 더미 정의가 단순히 문자열을 변경되지 않은 상태로 반환 하기 때문에 작동합니다 . 그리고이 더미 정의는 내장 네임 스페이스 의 &lt;code&gt;_()&lt;/code&gt; 정의를 일시적으로 재정의합니다 ( &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#del&quot;&gt; &lt;code&gt;del&lt;/code&gt; &lt;/a&gt; 명령 까지 ). 하지만 로컬 네임 스페이스 에 &lt;code&gt;_()&lt;/code&gt; 에 대한 이전 정의가있는 경우주의하십시오 .</target>
        </trans-unit>
        <trans-unit id="28e244347ead2b1ee157031a5e28d94349b74b67" translate="yes" xml:space="preserve">
          <source>This wrapper may also generate output using the &lt;a href=&quot;warnings#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; module to indicate behaviors that are questionable but which may not actually be prohibited by &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt;. Unless they are suppressed using Python command-line options or the &lt;a href=&quot;warnings#module-warnings&quot;&gt;&lt;code&gt;warnings&lt;/code&gt;&lt;/a&gt; API, any such warnings will be written to &lt;code&gt;sys.stderr&lt;/code&gt; (&lt;em&gt;not&lt;/em&gt;&lt;code&gt;wsgi.errors&lt;/code&gt;, unless they happen to be the same object).</source>
          <target state="translated">이 랩퍼는 &lt;a href=&quot;warnings#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 출력을 생성하여 의심 스럽지만 실제로는 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;PEP 3333에&lt;/strong&gt;&lt;/a&gt; 의해 금지되지 않는 동작을 표시 할 수 있습니다 . 그들은 파이썬 명령 줄 옵션 또는 사용 억제하지 않는 한 &lt;a href=&quot;warnings#module-warnings&quot;&gt; &lt;code&gt;warnings&lt;/code&gt; &lt;/a&gt; API를, 그러한 경고가 기록됩니다 &lt;code&gt;sys.stderr&lt;/code&gt; 를 ( &lt;em&gt;하지 &lt;/em&gt; &lt;code&gt;wsgi.errors&lt;/code&gt; 가 동일한 개체로 발생하지 않는 한).</target>
        </trans-unit>
        <trans-unit id="150bcb2beea81f0a936d8bb788c5d0ed814a30b2" translate="yes" xml:space="preserve">
          <source>This wraps the decorator with something that wraps the decorated function in &lt;a href=&quot;#typing.no_type_check&quot;&gt;&lt;code&gt;no_type_check()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이것은 &lt;a href=&quot;#typing.no_type_check&quot;&gt; &lt;code&gt;no_type_check()&lt;/code&gt; &lt;/a&gt; 의 데코 레이팅 된 함수를 래핑하는 것으로 데코레이터를 래핑합니다 .</target>
        </trans-unit>
        <trans-unit id="1d67963b381a87c27dbbc7cb706dcb0aa012e09c" translate="yes" xml:space="preserve">
          <source>This, for example, is true of &lt;code&gt;int.__add__&lt;/code&gt;. An object passing this test has a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;__get__()&lt;/code&gt;&lt;/a&gt; method but not a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__()&lt;/code&gt;&lt;/a&gt; method, but beyond that the set of attributes varies. A &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; attribute is usually sensible, and &lt;code&gt;__doc__&lt;/code&gt; often is.</source>
          <target state="translated">예를 들어, 이것은 &lt;code&gt;int.__add__&lt;/code&gt; 입니다. 이 테스트를 통과 한 객체에는 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__get__&quot;&gt; &lt;code&gt;__get__()&lt;/code&gt; &lt;/a&gt; 메서드가 있지만 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__set__&quot;&gt; &lt;code&gt;__set__()&lt;/code&gt; &lt;/a&gt; 메서드는 없지만 속성 집합이 다양합니다. &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt; &lt;code&gt;__name__&lt;/code&gt; 의&lt;/a&gt; 속성은 일반적으로 합리적이며, &lt;code&gt;__doc__&lt;/code&gt; 가 종종있다.</target>
        </trans-unit>
        <trans-unit id="be2b1c03b6a9574d468f089d2e0f324a5fec7c63" translate="yes" xml:space="preserve">
          <source>This, for example, is true of &lt;code&gt;int.__add__&lt;/code&gt;. An object passing this test has a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__get__&quot;&gt;&lt;code&gt;__get__()&lt;/code&gt;&lt;/a&gt; method but not a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__set__&quot;&gt;&lt;code&gt;__set__()&lt;/code&gt;&lt;/a&gt; method, but beyond that the set of attributes varies. A &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/a&gt; attribute is usually sensible, and &lt;code&gt;__doc__&lt;/code&gt; often is.</source>
          <target state="translated">예를 들어 이것은 &lt;code&gt;int.__add__&lt;/code&gt; 됩니다. 이 테스트를 통과하는 객체에는 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__get__&quot;&gt; &lt;code&gt;__get__()&lt;/code&gt; &lt;/a&gt; 메서드가 있지만 &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__set__&quot;&gt; &lt;code&gt;__set__()&lt;/code&gt; &lt;/a&gt; 메서드는 없지만 그 이상으로 속성 집합이 다릅니다. &lt;a href=&quot;stdtypes#definition.__name__&quot;&gt; &lt;code&gt;__name__&lt;/code&gt; 의&lt;/a&gt; 속성은 일반적으로 합리적이며, &lt;code&gt;__doc__&lt;/code&gt; 가 종종있다.</target>
        </trans-unit>
        <trans-unit id="778e46a17402881cd5c7f2ae7c1daa725c393ac4" translate="yes" xml:space="preserve">
          <source>Though &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects support similar operations, they are optimized for fast fixed-length operations and incur O(n) memory movement costs for &lt;code&gt;pop(0)&lt;/code&gt; and &lt;code&gt;insert(0, v)&lt;/code&gt; operations which change both the size and position of the underlying data representation.</source>
          <target state="translated">비록 &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; 개체 동일한 조작을 지원들은 빠른 고정 길이 작업을 위해 최적화되어 대한 부담 O (n)이 메모리 움직임 비용 &lt;code&gt;pop(0)&lt;/code&gt; 과 &lt;code&gt;insert(0, v)&lt;/code&gt; 된 변화의 크기와 기본 데이터 표현의 위치 모두 작동 .</target>
        </trans-unit>
        <trans-unit id="faed24ed478ce5898f638da7d1d34a4be16100bc" translate="yes" xml:space="preserve">
          <source>Though being an exception (a subclass of &lt;a href=&quot;#urllib.error.URLError&quot;&gt;&lt;code&gt;URLError&lt;/code&gt;&lt;/a&gt;), an &lt;a href=&quot;#urllib.error.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; can also function as a non-exceptional file-like return value (the same thing that &lt;a href=&quot;urllib.request#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt; returns). This is useful when handling exotic HTTP errors, such as requests for authentication.</source>
          <target state="translated">예외 ( &lt;a href=&quot;#urllib.error.URLError&quot;&gt; &lt;code&gt;URLError&lt;/code&gt; &lt;/a&gt; 의 서브 클래스) 임에도 불구 하고 &lt;a href=&quot;#urllib.error.HTTPError&quot;&gt; &lt;code&gt;HTTPError&lt;/code&gt; &lt;/a&gt; 는 예외가 아닌 파일과 같은 반환 값 ( &lt;a href=&quot;urllib.request#urllib.request.urlopen&quot;&gt; &lt;code&gt;urlopen()&lt;/code&gt; &lt;/a&gt; 반환 하는 것과 동일한 값)으로 기능 할 수도 있습니다 . 인증 요청과 같은 이국적인 HTTP 오류를 처리 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="37862647125cefc1069254a47f843e7cb021912f" translate="yes" xml:space="preserve">
          <source>Though less common than in the past, an antivirus or firewall program may stop the connection. If the program cannot be taught to allow the connection, then it must be turned off for IDLE to work. It is safe to allow this internal connection because no data is visible on external ports. A similar problem is a network mis-configuration that blocks connections.</source>
          <target state="translated">과거보다 덜 일반적이지만 바이러스 백신 또는 방화벽 프로그램이 연결을 중지 할 수 있습니다. 프로그램이 연결을 허용하도록 지시 할 수 없으면 IDLE이 작동하도록 프로그램을 해제해야합니다. 외부 포트에 데이터가 표시되지 않으므로이 내부 연결을 허용하는 것이 안전합니다. 비슷한 문제는 연결을 차단하는 네트워크 구성 오류입니다.</target>
        </trans-unit>
        <trans-unit id="2289f1cd884268a19420d727637bb78981c8aef8" translate="yes" xml:space="preserve">
          <source>Though not often needed, this function can be useful when installing modules for shared use, especially if some of the users may not have permission to write the byte-code cache files in the directory containing the source code.</source>
          <target state="translated">자주 필요하지는 않지만이 기능은 공유 사용을 위해 모듈을 설치할 때 특히 일부 사용자가 소스 코드가 포함 된 디렉토리에 바이트 코드 캐시 파일을 쓸 수있는 권한이없는 경우에 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23b26ebf82d42c0319c71cda81eb0f398c8fe706" translate="yes" xml:space="preserve">
          <source>Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clause. This is also important if the cycle detector was disabled when Python was compiled or using &lt;a href=&quot;gc#gc.disable&quot;&gt;&lt;code&gt;gc.disable()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">싸이클 검출기가이를 잡을지라도 &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; 절 에서 싸이클을 제거하여 프레임 및 로컬 변수를 파기 할 수 있습니다 . Python을 컴파일하거나 &lt;a href=&quot;gc#gc.disable&quot;&gt; &lt;code&gt;gc.disable()&lt;/code&gt; &lt;/a&gt; 사용할 때 사이클 검출기가 비활성화 된 경우에도 중요합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cf7e1c66c6ada18069caf896cccc97ab158d2d18" translate="yes" xml:space="preserve">
          <source>Though the cycle detector will catch these, destruction of the frames (and local variables) can be made deterministic by removing the cycle in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; clause. This is also important if the cycle detector was disabled when Python was compiled or using &lt;a href=&quot;gc#gc.disable&quot;&gt;&lt;code&gt;gc.disable()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">주기 감지기가이를 포착하지만 &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt; 절 에서주기를 제거하여 프레임 (및 로컬 변수)의 파괴를 결정적으로 만들 수 있습니다 . 이것은 파이썬이 컴파일되거나 &lt;a href=&quot;gc#gc.disable&quot;&gt; &lt;code&gt;gc.disable()&lt;/code&gt; &lt;/a&gt; 사용할 때 순환 감지기가 비활성화 된 경우에도 중요합니다 . 예를 들면 :</target>
        </trans-unit>
        <trans-unit id="cf42dd33cbcf5b9ff936c0cccb336c422f5ed971" translate="yes" xml:space="preserve">
          <source>Thread ID (if available).</source>
          <target state="translated">스레드 ID (사용 가능한 경우)</target>
        </trans-unit>
        <trans-unit id="938645778639684fb490a1e1f85f069cfc3de40c" translate="yes" xml:space="preserve">
          <source>Thread Objects</source>
          <target state="translated">스레드 객체</target>
        </trans-unit>
        <trans-unit id="b66b6cbe04365929e922b75680e179e46127f3a3" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
          <target state="translated">스레드 안전</target>
        </trans-unit>
        <trans-unit id="2b65dfc26516296f295014a75cea6189d943e440" translate="yes" xml:space="preserve">
          <source>Thread has two arguments before the &lt;em&gt;search_criterion&lt;/em&gt; argument(s); a &lt;em&gt;threading_algorithm&lt;/em&gt;, and the searching &lt;em&gt;charset&lt;/em&gt;. Note that unlike &lt;code&gt;search&lt;/code&gt;, the searching &lt;em&gt;charset&lt;/em&gt; argument is mandatory. There is also a &lt;code&gt;uid thread&lt;/code&gt; command which corresponds to &lt;code&gt;thread&lt;/code&gt; the way that &lt;code&gt;uid
search&lt;/code&gt; corresponds to &lt;code&gt;search&lt;/code&gt;. The &lt;code&gt;thread&lt;/code&gt; command first searches the mailbox for messages that match the given searching criteria using the charset argument for the interpretation of strings in the searching criteria. It then returns the matching messages threaded according to the specified threading algorithm.</source>
          <target state="translated">스레드에는 &lt;em&gt;search_criterion&lt;/em&gt; 인수 앞에 두 개의 인수가 있습니다 . &lt;em&gt;threading_algorithm&lt;/em&gt; 하고, 검색 &lt;em&gt;캐릭터 세트&lt;/em&gt; . 참고 달리하는 것이 &lt;code&gt;search&lt;/code&gt; 의 검색 &lt;em&gt;문자 집합&lt;/em&gt; 인수는 필수입니다. 도있다 &lt;code&gt;uid thread&lt;/code&gt; 에 해당 명령 &lt;code&gt;thread&lt;/code&gt; 방식 &lt;code&gt;uid search&lt;/code&gt; 대응을 위해 &lt;code&gt;search&lt;/code&gt; . &lt;code&gt;thread&lt;/code&gt; 명령은 먼저 검색 탐색 기준 문자열의 해석에 대한 문자 집합 인수를 사용해, 지정된 검색 기준과 일치하는 메시지에 대해 사서함을. 그런 다음 지정된 스레딩 알고리즘에 따라 스레드 된 일치 메시지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b0c8f67df305f12d7329c3e923eae3a187448dc1" translate="yes" xml:space="preserve">
          <source>Thread members consist of zero or more messages numbers, delimited by spaces, indicating successive parent and child.</source>
          <target state="translated">스레드 구성원은 공백으로 구분 된 연속 된 상위 및 하위를 나타내는 0 개 이상의 메시지 번호로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="2b72f7882340b8b87302b6a71686a5d8011d1cb7" translate="yes" xml:space="preserve">
          <source>Thread name (if available).</source>
          <target state="translated">스레드 이름 (사용 가능한 경우).</target>
        </trans-unit>
        <trans-unit id="bede3e862826945fddf6112e7c769b9a3aeb8189" translate="yes" xml:space="preserve">
          <source>Thread safety of proxies</source>
          <target state="translated">프록시의 스레드 안전성</target>
        </trans-unit>
        <trans-unit id="b335fb76cc5d7a0a38d14693a22dd2234bea40d3" translate="yes" xml:space="preserve">
          <source>Thread-Local Data</source>
          <target state="translated">스레드 로컬 데이터</target>
        </trans-unit>
        <trans-unit id="179f9004b4c06ae6f5f6ff596023c3d673097c0e" translate="yes" xml:space="preserve">
          <source>Thread-local data is data whose values are thread specific. To manage thread-local data, just create an instance of &lt;a href=&quot;#threading.local&quot;&gt;&lt;code&gt;local&lt;/code&gt;&lt;/a&gt; (or a subclass) and store attributes on it:</source>
          <target state="translated">스레드 로컬 데이터는 값이 스레드 특정인 데이터입니다. 스레드 로컬 데이터를 관리하려면 &lt;a href=&quot;#threading.local&quot;&gt; &lt;code&gt;local&lt;/code&gt; &lt;/a&gt; (또는 서브 클래스) 인스턴스를 작성하고 속성을 저장하십시오.</target>
        </trans-unit>
        <trans-unit id="8ff556a54faf6fae983bf1ab3aff7d6d5d26751b" translate="yes" xml:space="preserve">
          <source>Thread-specific CPU-time clock.</source>
          <target state="translated">스레드 별 CPU 시간 시계</target>
        </trans-unit>
        <trans-unit id="08db9139992ea95ca14b3bce8c69ce7fca532f88" translate="yes" xml:space="preserve">
          <source>Thread/Process Pool</source>
          <target state="translated">스레드 / 프로세스 풀</target>
        </trans-unit>
        <trans-unit id="f4ccad88952fdcd6a1fc61663ba8a6b67b062047" translate="yes" xml:space="preserve">
          <source>ThreadPoolExecutor</source>
          <target state="translated">ThreadPoolExecutor</target>
        </trans-unit>
        <trans-unit id="1fe04156ec5ffd3ad976e6549621d5b8412d5037" translate="yes" xml:space="preserve">
          <source>ThreadPoolExecutor Example</source>
          <target state="translated">ThreadPoolExecutor 예제</target>
        </trans-unit>
        <trans-unit id="e18220b1afceba219a85fd8b489ed2e3a72478ca" translate="yes" xml:space="preserve">
          <source>ThreadPoolExecutor now reuses idle worker threads before starting &lt;em&gt;max_workers&lt;/em&gt; worker threads too.</source>
          <target state="translated">ThreadPoolExecutor는 &lt;em&gt;max_workers&lt;/em&gt; 작업자 스레드도 시작하기 전에 유휴 작업자 스레드를 재사용합니다 .</target>
        </trans-unit>
        <trans-unit id="61d127f225cf326a27d514f202864103d01109cd" translate="yes" xml:space="preserve">
          <source>Threading-like synchronization primitives that can be used in Tasks.</source>
          <target state="translated">작업에서 사용할 수있는 스레딩과 같은 동기화 기본 형식입니다.</target>
        </trans-unit>
        <trans-unit id="da12000dd2decc4919042e0d96f21afbb897e6e5" translate="yes" xml:space="preserve">
          <source>Threads interact strangely with interrupts: the &lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt;&lt;code&gt;KeyboardInterrupt&lt;/code&gt;&lt;/a&gt; exception will be received by an arbitrary thread. (When the &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; module is available, interrupts always go to the main thread.)</source>
          <target state="translated">스레드는 인터럽트와 이상하게 상호 작용합니다. &lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt; &lt;code&gt;KeyboardInterrupt&lt;/code&gt; &lt;/a&gt; 예외는 임의의 스레드에 의해 수신됩니다. ( &lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt; 모듈이 사용 가능한 경우 인터럽트는 항상 주 스레드로 이동합니다.)</target>
        </trans-unit>
        <trans-unit id="53c7f0ab74cff52794e9a24116f9afa5b47c92b2" translate="yes" xml:space="preserve">
          <source>Three classes are provided by the &lt;a href=&quot;#module-imaplib&quot;&gt;&lt;code&gt;imaplib&lt;/code&gt;&lt;/a&gt; module, &lt;a href=&quot;#imaplib.IMAP4&quot;&gt;&lt;code&gt;IMAP4&lt;/code&gt;&lt;/a&gt; is the base class:</source>
          <target state="translated">&lt;a href=&quot;#module-imaplib&quot;&gt; &lt;code&gt;imaplib&lt;/code&gt; &lt;/a&gt; 모듈 은 세 가지 클래스를 제공하며 &lt;a href=&quot;#imaplib.IMAP4&quot;&gt; &lt;code&gt;IMAP4&lt;/code&gt; &lt;/a&gt; 는 기본 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="e709dbe2f34341a73307670a231b6cadb5fc57d7" translate="yes" xml:space="preserve">
          <source>Three conversion flags are currently supported: &lt;code&gt;'!s'&lt;/code&gt; which calls &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; on the value, &lt;code&gt;'!r'&lt;/code&gt; which calls &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;'!a'&lt;/code&gt; which calls &lt;a href=&quot;functions#ascii&quot;&gt;&lt;code&gt;ascii()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재 3 개의 변환 플래그가 지원됩니다. &lt;code&gt;'!s'&lt;/code&gt; 는 값에 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt; 을 호출 하고 &lt;code&gt;'!r'&lt;/code&gt; 은 &lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt; 을 호출 하고 &lt;code&gt;'!a'&lt;/code&gt; 는 &lt;a href=&quot;functions#ascii&quot;&gt; &lt;code&gt;ascii()&lt;/code&gt; &lt;/a&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="5d0ca76daa80652b92bb2e247e6f8c4265a8798c" translate="yes" xml:space="preserve">
          <source>Three exceptions are defined as attributes of the &lt;a href=&quot;#imaplib.IMAP4&quot;&gt;&lt;code&gt;IMAP4&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">세 가지 예외는 &lt;a href=&quot;#imaplib.IMAP4&quot;&gt; &lt;code&gt;IMAP4&lt;/code&gt; &lt;/a&gt; 클래스의 속성으로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="2f64dfe21491c30d5d1a7eadfd5dd3fae4531abe" translate="yes" xml:space="preserve">
          <source>Three locking mechanisms are used&amp;mdash;dot locking and, if available, the &lt;code&gt;flock()&lt;/code&gt; and &lt;code&gt;lockf()&lt;/code&gt; system calls.</source>
          <target state="translated">점 잠금과 사용 가능한 경우 &lt;code&gt;flock()&lt;/code&gt; 및 &lt;code&gt;lockf()&lt;/code&gt; 시스템 호출의 세 가지 잠금 메커니즘이 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e50506efbf25f33d49dafed0e71ca3b1a26feb7c" translate="yes" xml:space="preserve">
          <source>Three locking mechanisms are used&amp;mdash;dot locking and, if available, the &lt;code&gt;flock()&lt;/code&gt; and &lt;code&gt;lockf()&lt;/code&gt; system calls. For MH mailboxes, locking the mailbox means locking the &lt;code&gt;.mh_sequences&lt;/code&gt; file and, only for the duration of any operations that affect them, locking individual message files.</source>
          <target state="translated">점 잠금과 사용 가능한 경우 &lt;code&gt;flock()&lt;/code&gt; 및 &lt;code&gt;lockf()&lt;/code&gt; 시스템 호출의 세 가지 잠금 메커니즘이 사용됩니다 . MH 사서함의 경우 사서함을 잠그는 것은 &lt;code&gt;.mh_sequences&lt;/code&gt; 파일을 잠그는 것을 의미 하며 영향을받는 작업 기간 동안 만 개별 메시지 파일을 잠급니다.</target>
        </trans-unit>
        <trans-unit id="0e1bc8847535475eab42cce197ae5be27e727ae7" translate="yes" xml:space="preserve">
          <source>Three or more alphanumerics giving the timezone abbreviations. These will be propagated into time.tzname</source>
          <target state="translated">시간대 약어를 제공하는 3 개 이상의 영숫자 이들은 시간으로 전파됩니다.</target>
        </trans-unit>
        <trans-unit id="3e70d460192969efb710a023585a04b40999ef18" translate="yes" xml:space="preserve">
          <source>Throws &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;opname&lt;/em&gt; is found.</source>
          <target state="translated">예외 &lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt; 하는 경우 &lt;em&gt;opname을가&lt;/em&gt; 발견된다.</target>
        </trans-unit>
        <trans-unit id="9ef9926e86eae8834900c13e52e1577c082afc28" translate="yes" xml:space="preserve">
          <source>Thus, an alternative way to get the version number is through the &lt;code&gt;Distribution&lt;/code&gt; instance:</source>
          <target state="translated">따라서 버전 번호를 얻는 다른 방법은 &lt;code&gt;Distribution&lt;/code&gt; 인스턴스를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1a3ede7623f4e752d108f2c9edace3b95a9d7fcf" translate="yes" xml:space="preserve">
          <source>Thus, by default &lt;a href=&quot;#email.iterators.typed_subpart_iterator&quot;&gt;&lt;code&gt;typed_subpart_iterator()&lt;/code&gt;&lt;/a&gt; returns each subpart that has a MIME type of &lt;em&gt;text/*&lt;/em&gt;.</source>
          <target state="translated">따라서 기본적으로 &lt;a href=&quot;#email.iterators.typed_subpart_iterator&quot;&gt; &lt;code&gt;typed_subpart_iterator()&lt;/code&gt; &lt;/a&gt; 는 MIME 유형이 &lt;em&gt;text / * 인&lt;/em&gt; 각 하위 부분을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d36d700dcdbb23ba6f79231791253efb769470c2" translate="yes" xml:space="preserve">
          <source>Thus, the set of channel events is larger than the basic socket events. The full set of methods that can be overridden in your subclass follows:</source>
          <target state="translated">따라서 채널 이벤트 세트는 기본 소켓 이벤트보다 큽니다. 서브 클래스에서 재정의 할 수있는 전체 메소드 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="439af098feeff071c8e795106894bf846b6f7af0" translate="yes" xml:space="preserve">
          <source>Thus, this is only useful to call Python C api functions directly.</source>
          <target state="translated">따라서 이것은 Python C API 함수를 직접 호출하는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="205b4cecce0161369a95283ab9503c6dc691808a" translate="yes" xml:space="preserve">
          <source>Thus, when the &lt;code&gt;incremental&lt;/code&gt; key of a configuration dict is present and is &lt;code&gt;True&lt;/code&gt;, the system will completely ignore any &lt;code&gt;formatters&lt;/code&gt; and &lt;code&gt;filters&lt;/code&gt; entries, and process only the &lt;code&gt;level&lt;/code&gt; settings in the &lt;code&gt;handlers&lt;/code&gt; entries, and the &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;propagate&lt;/code&gt; settings in the &lt;code&gt;loggers&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt; entries.</source>
          <target state="translated">경우에 따라서 &lt;code&gt;incremental&lt;/code&gt; 구성 딕셔너리의 키가 존재하고있다 &lt;code&gt;True&lt;/code&gt; , 시스템은 완전히 어떤 무시 &lt;code&gt;formatters&lt;/code&gt; 및 &lt;code&gt;filters&lt;/code&gt; 항목 및 공정에만 &lt;code&gt;level&lt;/code&gt; 설정의 오류에서 &lt;code&gt;handlers&lt;/code&gt; 항목 및 &lt;code&gt;level&lt;/code&gt; 및 &lt;code&gt;propagate&lt;/code&gt; 의 설정 &lt;code&gt;loggers&lt;/code&gt; 와 &lt;code&gt;root&lt;/code&gt; 항목을 .</target>
        </trans-unit>
        <trans-unit id="e488ae72b0720c1cf599c3f8e575a2ab8f87d840" translate="yes" xml:space="preserve">
          <source>Tidy up any resources used by the handler. This version does no output but removes the handler from an internal list of handlers which is closed when &lt;a href=&quot;#logging.shutdown&quot;&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/a&gt; is called. Subclasses should ensure that this gets called from overridden &lt;a href=&quot;#logging.Handler.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">핸들러가 사용하는 자원을 정리하십시오. 이 버전은 출력을하지 않지만 &lt;a href=&quot;#logging.shutdown&quot;&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/a&gt; 이 호출 될 때 닫히는 내부 핸들러 목록에서 핸들러를 제거합니다 . 서브 클래스는 이것이 재정의 된 &lt;a href=&quot;#logging.Handler.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; 메소드 에서 호출되는지 확인해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f88f6e9627dc95497340bc4623c37e38fe730a30" translate="yes" xml:space="preserve">
          <source>Time &lt;em&gt;number&lt;/em&gt; executions of the main statement. This executes the setup statement once, and then returns the time it takes to execute the main statement a number of times, measured in seconds as a float. The argument is the number of times through the loop, defaulting to one million. The main statement, the setup statement and the timer function to be used are passed to the constructor.</source>
          <target state="translated">기본 문의 시간 &lt;em&gt;번호&lt;/em&gt; 실행 설정 명령문을 한 번 실행 한 다음 주 명령문을 여러 번 실행하는 데 걸리는 시간을 초 단위로 부동 소수점으로 측정합니다. 인수는 루프를 통과하는 횟수이며 기본값은 백만입니다. 사용되는 기본 명령문, 설정 명령문 및 타이머 함수가 생성자에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="c8b70bcd70c5d7f90b7b14b7ade5bf89ef3ddfba" translate="yes" xml:space="preserve">
          <source>Time access and conversions.</source>
          <target state="translated">시간 액세스 및 변환.</target>
        </trans-unit>
        <trans-unit id="52eae1cacab4ca0975e99ce3b040b93af31bb3d3" translate="yes" xml:space="preserve">
          <source>Time in milliseconds when the LogRecord was created, relative to the time the logging module was loaded.</source>
          <target state="translated">로깅 모듈이로드 된 시간을 기준으로 LogRecord가 작성된 시간 (밀리 초)입니다.</target>
        </trans-unit>
        <trans-unit id="f1ad4dba9062b623c7954b6e7744f90380675e5e" translate="yes" xml:space="preserve">
          <source>Time of file creation.</source>
          <target state="translated">파일 작성 시간</target>
        </trans-unit>
        <trans-unit id="bf5b7ea4cfe40f929342452c57b6445e307ff98f" translate="yes" xml:space="preserve">
          <source>Time of last access.</source>
          <target state="translated">마지막 액세스 시간.</target>
        </trans-unit>
        <trans-unit id="d3ed1832d868c8126249a2fb407fc69507dfb189" translate="yes" xml:space="preserve">
          <source>Time of last modification.</source>
          <target state="translated">마지막 수정 시간.</target>
        </trans-unit>
        <trans-unit id="06be3d8bc306bea5d95f138ab46fafcf17e3ac5c" translate="yes" xml:space="preserve">
          <source>Time of most recent access expressed in nanoseconds as an integer.</source>
          <target state="translated">가장 최근 액세스 시간은 정수로 나노초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a91619cf232ee7d5db5c8c4a6764e8af43c69992" translate="yes" xml:space="preserve">
          <source>Time of most recent access expressed in seconds.</source>
          <target state="translated">가장 최근 액세스 시간 (초)</target>
        </trans-unit>
        <trans-unit id="65e24f26ea5afb8877a5f8b52e25e32bd4b54487" translate="yes" xml:space="preserve">
          <source>Time of most recent content modification expressed in nanoseconds as an integer.</source>
          <target state="translated">가장 최근의 컨텐츠 수정 시간은 정수로 나노초로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1841767b9a4fbb8ae7c08bde8eb680a307282894" translate="yes" xml:space="preserve">
          <source>Time of most recent content modification expressed in seconds.</source>
          <target state="translated">가장 최근의 컨텐츠 수정 시간 (초)입니다.</target>
        </trans-unit>
        <trans-unit id="4c626f3136dcc7541eda5dfb73988281d101ad42" translate="yes" xml:space="preserve">
          <source>Time when the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt; was created (as returned by &lt;a href=&quot;time#time.time&quot;&gt;&lt;code&gt;time.time()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; &lt;/a&gt; 가 작성된 시간 입니다 ( &lt;a href=&quot;time#time.time&quot;&gt; &lt;code&gt;time.time()&lt;/code&gt; &lt;/a&gt; 의해 리턴 됨 ).</target>
        </trans-unit>
        <trans-unit id="6debd785c2cf241c1ce1926887a0186d4daccd0e" translate="yes" xml:space="preserve">
          <source>Time whose absolute value is the time the system has been running and not suspended, providing accurate uptime measurement, both absolute and interval.</source>
          <target state="translated">절대 값이 시스템이 실행 중이고 중단되지 않은 시간 인 절대 시간은 절대 및 간격 모두에서 정확한 가동 시간 측정을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0374b215fe391453f39d42861a7e9596d4318c9a" translate="yes" xml:space="preserve">
          <source>Time zone name (empty string if the object is naive).</source>
          <target state="translated">시간대 이름 (객체가 순진한 경우 빈 문자열).</target>
        </trans-unit>
        <trans-unit id="ee8f614d144ab47b670e20f7522453fc38517d98" translate="yes" xml:space="preserve">
          <source>Time zone name (no characters if no time zone exists).</source>
          <target state="translated">시간대 이름 (시간대가없는 경우 문자 없음).</target>
        </trans-unit>
        <trans-unit id="c0a6ab1356e2277d077fbe00d29afd20e33697b8" translate="yes" xml:space="preserve">
          <source>Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59].</source>
          <target state="translated">+ HHMM 또는 -HHMM 형식의 UTC / GMT와 양수 또는 음의 시간 차이를 나타내는 시간대 오프셋. 여기서 H는 십진수 시간 숫자를 나타내고 M은 십진수 분 숫자를 나타냅니다 [-23 : 59, +23 : 59].</target>
        </trans-unit>
        <trans-unit id="0f2b93745cd2c3c48a46f80e6d71e4bf3caf8d57" translate="yes" xml:space="preserve">
          <source>TimePeriod</source>
          <target state="translated">TimePeriod</target>
        </trans-unit>
        <trans-unit id="5c415f11b847d7f607026be69aa759761b622f69" translate="yes" xml:space="preserve">
          <source>TimedRotatingFileHandler</source>
          <target state="translated">TimedRotatingFileHandler</target>
        </trans-unit>
        <trans-unit id="ef4cedb55c675ccac18ae381902542c90951f8e7" translate="yes" xml:space="preserve">
          <source>Timeout duration, measured in seconds, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; if no timeout is desired. If &lt;a href=&quot;#socketserver.BaseServer.handle_request&quot;&gt;&lt;code&gt;handle_request()&lt;/code&gt;&lt;/a&gt; receives no incoming requests within the timeout period, the &lt;a href=&quot;#socketserver.BaseServer.handle_timeout&quot;&gt;&lt;code&gt;handle_timeout()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">시간 초과 기간 (초 단위로 측정) 또는 시간 초과를 원하지 않는 경우 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;경우 &lt;a href=&quot;#socketserver.BaseServer.handle_request&quot;&gt; &lt;code&gt;handle_request()&lt;/code&gt; &lt;/a&gt; 제한 시간 내에 들어오는 요청을받지는 &lt;a href=&quot;#socketserver.BaseServer.handle_timeout&quot;&gt; &lt;code&gt;handle_timeout()&lt;/code&gt; &lt;/a&gt; 메서드가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="07b0e9b677614df40c96ed5c03037d21c2ed7656" translate="yes" xml:space="preserve">
          <source>Timeout in seconds for network requests going to the Internet.</source>
          <target state="translated">인터넷으로가는 네트워크 요청에 대한 제한 시간 (초)입니다.</target>
        </trans-unit>
        <trans-unit id="130d46192a8b7232c53a533ef412e1247760e214" translate="yes" xml:space="preserve">
          <source>Timeout in seconds for tests using a network server listening on the network local loopback interface like &lt;code&gt;127.0.0.1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;127.0.0.1&lt;/code&gt; 과 같은 네트워크 로컬 루프백 인터페이스에서 수신하는 네트워크 서버를 사용하는 테스트의 시간 초과 (초)입니다 .</target>
        </trans-unit>
        <trans-unit id="3a2345456807fdaf84e00252cabb595f9279bbea" translate="yes" xml:space="preserve">
          <source>Timeout in seconds to detect when a test hangs.</source>
          <target state="translated">테스트 중단을 감지하기위한 제한 시간 (초)입니다.</target>
        </trans-unit>
        <trans-unit id="93ea4bea7de09278df65a41998484bea21720b1c" translate="yes" xml:space="preserve">
          <source>Timeout in seconds to mark a test as failed if the test takes &amp;ldquo;too long&amp;rdquo;.</source>
          <target state="translated">테스트가 &quot;너무 오래&quot;걸리는 경우 테스트를 실패로 표시하는 시간 제한 (초)입니다.</target>
        </trans-unit>
        <trans-unit id="62b298628f356f1c619e3be00ab4ff94e5bcd4d8" translate="yes" xml:space="preserve">
          <source>Timeout in seconds.</source>
          <target state="translated">시간 초과.</target>
        </trans-unit>
        <trans-unit id="22a4ad2c60d9b1a4a4ab47810c732e12faec00b0" translate="yes" xml:space="preserve">
          <source>TimeoutError</source>
          <target state="translated">TimeoutError</target>
        </trans-unit>
        <trans-unit id="27a4f2c5a6aa7d957af2668e0ec53e32944aba26" translate="yes" xml:space="preserve">
          <source>Timeouts</source>
          <target state="translated">Timeouts</target>
        </trans-unit>
        <trans-unit id="0c4d8969a977fe6296c7be7be0d35706e4b5dae6" translate="yes" xml:space="preserve">
          <source>Timeouts and the &lt;code&gt;accept&lt;/code&gt; method</source>
          <target state="translated">시간 초과 및 &lt;code&gt;accept&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="18be0279503ee7ac0781f0c9d62872c701d2ba10" translate="yes" xml:space="preserve">
          <source>Timeouts and the &lt;code&gt;connect&lt;/code&gt; method</source>
          <target state="translated">시간 종료 및 &lt;code&gt;connect&lt;/code&gt; 방법</target>
        </trans-unit>
        <trans-unit id="10d608010dbfc49424751fd4de41b0163424a0ca" translate="yes" xml:space="preserve">
          <source>Timer Objects</source>
          <target state="translated">타이머 객체</target>
        </trans-unit>
        <trans-unit id="9cfb3d400f6dd144e8358401419c34c90ce26960" translate="yes" xml:space="preserve">
          <source>Timer expired</source>
          <target state="translated">타이머 만료</target>
        </trans-unit>
        <trans-unit id="72b74f80a56c06d5f082e3b0803cdaf543886ab5" translate="yes" xml:space="preserve">
          <source>Timer signal from &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/alarm(2)&quot;&gt;alarm(2)&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">Timer signal from &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/alarm(2)&quot;&gt;alarm(2)&lt;/a&gt;&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="3207535b8ec3c551c140c60e1b7a5b653785fe05" translate="yes" xml:space="preserve">
          <source>Timers are started, as with threads, by calling their &lt;code&gt;start()&lt;/code&gt; method. The timer can be stopped (before its action has begun) by calling the &lt;a href=&quot;#threading.Timer.cancel&quot;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt; method. The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user.</source>
          <target state="translated">타이머는 스레드와 마찬가지로 &lt;code&gt;start()&lt;/code&gt; 메서드를 호출하여 시작 됩니다. &lt;a href=&quot;#threading.Timer.cancel&quot;&gt; &lt;code&gt;cancel()&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 타이머가 조치를 시작하기 전에 중지 할 수 있습니다 . 동작을 실행하기 전에 타이머가 대기하는 간격은 사용자가 지정한 간격과 정확히 같지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29a8e31d470212c9df5fdd31f48fc0b710230ac9" translate="yes" xml:space="preserve">
          <source>Timestamps:</source>
          <target state="translated">Timestamps:</target>
        </trans-unit>
        <trans-unit id="0fd467e1a208fce272fd82f9bdf44518884e63c1" translate="yes" xml:space="preserve">
          <source>Timezone Constants</source>
          <target state="translated">시간대 상수</target>
        </trans-unit>
        <trans-unit id="4a652adeb3e347a238e20df919ff0ab254549331" translate="yes" xml:space="preserve">
          <source>Tix Commands</source>
          <target state="translated">Tix 명령</target>
        </trans-unit>
        <trans-unit id="96b7c5068376e645877a22b7d58d1ed12ad0e604" translate="yes" xml:space="preserve">
          <source>Tix Development Applications</source>
          <target state="translated">Tix 개발 애플리케이션</target>
        </trans-unit>
        <trans-unit id="faefa845bbb0a4cb46a5b93beb369c79040a72c9" translate="yes" xml:space="preserve">
          <source>Tix Homepage</source>
          <target state="translated">Tix 홈페이지</target>
        </trans-unit>
        <trans-unit id="4d60340b76e67777555c745a3f74999b7294f26b" translate="yes" xml:space="preserve">
          <source>Tix Man Pages</source>
          <target state="translated">Tix 맨 페이지</target>
        </trans-unit>
        <trans-unit id="21b1387290c95ae82430ce78110fe98b586bc58e" translate="yes" xml:space="preserve">
          <source>Tix Programming Guide</source>
          <target state="translated">Tix 프로그래밍 가이드</target>
        </trans-unit>
        <trans-unit id="a19554031210fa636ae40e5156d263fd0b198f94" translate="yes" xml:space="preserve">
          <source>Tix Widgets</source>
          <target state="translated">Tix 위젯</target>
        </trans-unit>
        <trans-unit id="acd857e62f1a6ec2d1a38841f59d2e3c13b47c92" translate="yes" xml:space="preserve">
          <source>Tix applications for development of Tix and Tkinter programs. Tide applications work under Tk or Tkinter, and include &lt;strong&gt;TixInspect&lt;/strong&gt;, an inspector to remotely modify and debug Tix/Tk/Tkinter applications.</source>
          <target state="translated">Tix 및 Tkinter 프로그램 개발을위한 Tix 애플리케이션. Tide 응용 프로그램은 Tk 또는 Tkinter에서 작동 하며 Tix / Tk / Tkinter 응용 프로그램을 원격으로 수정하고 디버깅하는 관리자 인 &lt;strong&gt;TixInspect를&lt;/strong&gt; 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="82a910b990158307c49830b03ec2b10728632a22" translate="yes" xml:space="preserve">
          <source>Tix maintains a list of directories under which the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt;&lt;code&gt;tix_getimage()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt;&lt;code&gt;tix_getbitmap()&lt;/code&gt;&lt;/a&gt; methods will search for image files. The standard bitmap directory is &lt;code&gt;$TIX_LIBRARY/bitmaps&lt;/code&gt;. The &lt;a href=&quot;#tkinter.tix.tixCommand.tix_addbitmapdir&quot;&gt;&lt;code&gt;tix_addbitmapdir()&lt;/code&gt;&lt;/a&gt; method adds &lt;em&gt;directory&lt;/em&gt; into this list. By using this method, the image files of an applications can also be located using the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt;&lt;code&gt;tix_getimage()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt;&lt;code&gt;tix_getbitmap()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Tix는 &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt; &lt;code&gt;tix_getimage()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt; &lt;code&gt;tix_getbitmap()&lt;/code&gt; &lt;/a&gt; 메소드가 이미지 파일을 검색 할 디렉토리 목록을 유지 보수 합니다. 표준 비트 맵 디렉토리는 &lt;code&gt;$TIX_LIBRARY/bitmaps&lt;/code&gt; 입니다. &lt;a href=&quot;#tkinter.tix.tixCommand.tix_addbitmapdir&quot;&gt; &lt;code&gt;tix_addbitmapdir()&lt;/code&gt; &lt;/a&gt; 메소드는 추가 &lt;em&gt;디렉토리를&lt;/em&gt; 이 목록에. 이 메소드를 사용하면 &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getimage&quot;&gt; &lt;code&gt;tix_getimage()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#tkinter.tix.tixCommand.tix_getbitmap&quot;&gt; &lt;code&gt;tix_getbitmap()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 애플리케이션의 이미지 파일을 찾을 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="eb5cc0f84fc345c602dd1accf23180e03ce108cd" translate="yes" xml:space="preserve">
          <source>Tk</source>
          <target state="translated">Tk</target>
        </trans-unit>
        <trans-unit id="c0bdbcbd85b143d1bbb028bb2fa4b753ca6134ed" translate="yes" xml:space="preserve">
          <source>Tk (C)</source>
          <target state="translated">Tk (C)</target>
        </trans-unit>
        <trans-unit id="f509dfaac06925adf03162aba9fd793afe243fc6" translate="yes" xml:space="preserve">
          <source>Tk Option Data Types</source>
          <target state="translated">Tk 옵션 데이터 유형</target>
        </trans-unit>
        <trans-unit id="c53a361a926e329bf6ffb89e220c7fec5f066070" translate="yes" xml:space="preserve">
          <source>Tk Widget Styling Support</source>
          <target state="translated">Tk 위젯 스타일링 지원</target>
        </trans-unit>
        <trans-unit id="af7fb30a52b23b5f1a4ce655dbbf5d8f1a0c77d6" translate="yes" xml:space="preserve">
          <source>Tk Widgets (C and Tcl)</source>
          <target state="translated">Tk 위젯 (C 및 Tcl)</target>
        </trans-unit>
        <trans-unit id="72cfa7078e79e3f8fa74407e53e2484711fe9f52" translate="yes" xml:space="preserve">
          <source>Tk allows you to register and unregister a callback function which will be called from the Tk mainloop when I/O is possible on a file descriptor. Only one handler may be registered per file descriptor. Example code:</source>
          <target state="translated">Tk를 사용하면 파일 디스크립터에서 I / O가 가능한 경우 Tk mainloop에서 호출되는 콜백 함수를 등록 및 등록 취소 할 수 있습니다. 파일 디스크립터 당 하나의 핸들러 만 등록 할 수 있습니다. 예제 코드 :</target>
        </trans-unit>
        <trans-unit id="f9c74172242e29fa205d5a14dd18143d03ec1b82" translate="yes" xml:space="preserve">
          <source>Tk code:</source>
          <target state="translated">Tk 코드 :</target>
        </trans-unit>
        <trans-unit id="db9c46d3406df20ff79ee0d05fc1e0523161511a" translate="yes" xml:space="preserve">
          <source>Tk commands</source>
          <target state="translated">Tk 명령</target>
        </trans-unit>
        <trans-unit id="9ab67afb1158f1675f3559e0d1e76cc6b3ded22f" translate="yes" xml:space="preserve">
          <source>Tk scripts are Tcl programs. Like all Tcl programs, Tk scripts are just lists of tokens separated by spaces. A Tk widget is just its &lt;em&gt;class&lt;/em&gt;, the &lt;em&gt;options&lt;/em&gt; that help configure it, and the &lt;em&gt;actions&lt;/em&gt; that make it do useful things.</source>
          <target state="translated">Tk 스크립트는 Tcl 프로그램입니다. 모든 Tcl 프로그램과 마찬가지로 Tk 스크립트는 공백으로 구분 된 토큰 목록입니다. Tk 위젯은 &lt;em&gt;클래스&lt;/em&gt; , 구성을 돕는 &lt;em&gt;옵션&lt;/em&gt; 및 유용한 &lt;em&gt;작업&lt;/em&gt; 을 &lt;em&gt;수행&lt;/em&gt; 하는 &lt;em&gt;작업&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c3b5d25f755fd5c2e9a68aade852dda180798ca5" translate="yes" xml:space="preserve">
          <source>Tk uses a list font name format, such as &lt;code&gt;{courier 10 bold}&lt;/code&gt;. Font sizes with positive numbers are measured in points; sizes with negative numbers are measured in pixels.</source>
          <target state="translated">Tk는 &lt;code&gt;{courier 10 bold}&lt;/code&gt; 와 같은 목록 글꼴 이름 형식을 사용합니다 . 양수의 글꼴 크기는 포인트 단위로 측정됩니다. 음수의 크기는 픽셀 단위로 측정됩니다.</target>
        </trans-unit>
        <trans-unit id="cb67a9e7545ab841eae0703e7e11ff4949e8a6ee" translate="yes" xml:space="preserve">
          <source>Tk was written by John Ousterhout while at Berkeley.</source>
          <target state="translated">Tk는 버클리에있는 동안 John Ousterhout에 의해 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="06adfc0de33394d65018332de578e6cb394c00e1" translate="yes" xml:space="preserve">
          <source>Tkinter 8.5 reference: a GUI for Python</source>
          <target state="translated">Tkinter 8.5 참조 : 파이썬 용 GUI</target>
        </trans-unit>
        <trans-unit id="c043cdde636e2a3943dc76b169fd5e748c94f38e" translate="yes" xml:space="preserve">
          <source>Tkinter Dialogs</source>
          <target state="translated">Tkinter Dialogs</target>
        </trans-unit>
        <trans-unit id="6ec43006272d1fcfb847df256c67b8a2a6239c06" translate="yes" xml:space="preserve">
          <source>Tkinter Event Field</source>
          <target state="translated">Tkinter 이벤트 필드</target>
        </trans-unit>
        <trans-unit id="0fbf57570a8e11effb5b92aa3ee08d4bf37542b4" translate="yes" xml:space="preserve">
          <source>Tkinter Life Preserver</source>
          <target state="translated">Tkinter Life Preserver</target>
        </trans-unit>
        <trans-unit id="9fa021c29a03731a173c392e3231b31c2bd9095b" translate="yes" xml:space="preserve">
          <source>Tkinter Modules</source>
          <target state="translated">Tkinter 모듈</target>
        </trans-unit>
        <trans-unit id="b5e71015433233c51b605020e48525d57df3c1e7" translate="yes" xml:space="preserve">
          <source>Tkinter docs from effbot</source>
          <target state="translated">effbot의 Tkinter 문서</target>
        </trans-unit>
        <trans-unit id="06a7380bcaaa1bbf89848533bffc7cff78689da8" translate="yes" xml:space="preserve">
          <source>Tkinter documentation:</source>
          <target state="translated">Tkinter 설명서 :</target>
        </trans-unit>
        <trans-unit id="9e17c9f8fb8d293677aac656ba3e78bca997570a" translate="yes" xml:space="preserve">
          <source>Tkinter standard dialog module</source>
          <target state="translated">Tkinter standard dialog module</target>
        </trans-unit>
        <trans-unit id="2fec54ef5f25c7f02d2146e6f287430766b4fc73" translate="yes" xml:space="preserve">
          <source>Tkinter was written by Steen Lumholt and Guido van Rossum.</source>
          <target state="translated">Tkinter는 Steen Lumholt와 Guido van Rossum에 의해 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="ae79ea1e9c6391a9ed83a2e18a031b835feec0c9" translate="yes" xml:space="preserve">
          <source>To</source>
          <target state="translated">To</target>
        </trans-unit>
        <trans-unit id="879c4af9add81e668a804e6ea9a1c5883dd416eb" translate="yes" xml:space="preserve">
          <source>To &lt;a href=&quot;#numbers.Complex&quot;&gt;&lt;code&gt;Complex&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numbers.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; adds the operations that work on real numbers.</source>
          <target state="translated">에 &lt;a href=&quot;#numbers.Complex&quot;&gt; &lt;code&gt;Complex&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#numbers.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; &lt;/a&gt; 작업 실수에 그 일을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="3bd521cceedef31b3760ed9bdf91114918bc9e2e" translate="yes" xml:space="preserve">
          <source>To access all registered implementations, use the read-only &lt;code&gt;registry&lt;/code&gt; attribute:</source>
          <target state="translated">등록 된 모든 구현에 액세스하려면 읽기 전용 &lt;code&gt;registry&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="971e053b3ed2cc0c24e71a6572574d038bc6457b" translate="yes" xml:space="preserve">
          <source>To access an XML-RPC server through a HTTP proxy, you need to define a custom transport. The following example shows how:</source>
          <target state="translated">HTTP 프록시를 통해 XML-RPC 서버에 액세스하려면 사용자 정의 전송을 정의해야합니다. 다음 예제는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="e8d808ebfcaa2c8f47d64d028fa1df61739005e6" translate="yes" xml:space="preserve">
          <source>To access the individual &amp;ldquo;parts&amp;rdquo; (components) of a path, use the following property:</source>
          <target state="translated">경로의 개별 &quot;부품&quot;(구성 요소)에 액세스하려면 다음 속성을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="8a1f25391bef338f3d0259b12755749577aa4d1e" translate="yes" xml:space="preserve">
          <source>To accommodate reproducible processing of SMIME-signed messages &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; disables header folding for message parts of type &lt;code&gt;multipart/signed&lt;/code&gt; and all subparts.</source>
          <target state="translated">SMIME 서명 된 메시지의 재현 가능한 처리를 수용하기 위해 &lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;multipart/signed&lt;/code&gt; 유형의 메시지 부분 과 모든 하위 부분에 대해 머리글 접기를 비활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="a9a65729549bdc5d764fa4370cbc185392d0a035" translate="yes" xml:space="preserve">
          <source>To achieve this, &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; supports some important concepts in an object-oriented way:</source>
          <target state="translated">이를 위해 &lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 는 몇 가지 중요한 개념을 객체 지향 방식으로 지원합니다.</target>
        </trans-unit>
        <trans-unit id="f7545737cb159edd448e66fa7291368d57e7a6c9" translate="yes" xml:space="preserve">
          <source>To actually run a coroutine, asyncio provides three main mechanisms:</source>
          <target state="translated">실제로 코 루틴을 실행하기 위해 asyncio는 세 가지 주요 메커니즘을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="528b73f2343087db111a62659169143d06137936" translate="yes" xml:space="preserve">
          <source>To add cleanup code that must be run even in the case of an exception, use &lt;code&gt;addModuleCleanup&lt;/code&gt;:</source>
          <target state="translated">예외의 경우에도 실행해야하는 정리 코드를 추가하려면 &lt;code&gt;addModuleCleanup&lt;/code&gt; 을 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c8af2ff6b8a2161b58de4c051f7dc4e1c09233ad" translate="yes" xml:space="preserve">
          <source>To add overloaded implementations to the function, use the &lt;code&gt;register()&lt;/code&gt; attribute of the generic function. It is a decorator. For functions annotated with types, the decorator will infer the type of the first argument automatically:</source>
          <target state="translated">오버로드 된 구현을 함수에 추가하려면 일반 함수 의 &lt;code&gt;register()&lt;/code&gt; 속성을 사용하십시오 . 데코레이터입니다. 유형으로 주석이 달린 함수의 경우 데코레이터는 첫 번째 인수의 유형을 자동으로 유추합니다.</target>
        </trans-unit>
        <trans-unit id="2f52605c001c2892c529e8e6e5591f7c13dce1a1" translate="yes" xml:space="preserve">
          <source>To align the end of a structure to the alignment requirement of a particular type, end the format with the code for that type with a repeat count of zero. See &lt;a href=&quot;#struct-examples&quot;&gt;Examples&lt;/a&gt;.</source>
          <target state="translated">구조의 끝을 특정 형식의 정렬 요구 사항에 맞추려면 반복 횟수가 0 인 해당 형식의 코드로 형식을 끝냅니다. &lt;a href=&quot;#struct-examples&quot;&gt;예를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="50a21e33352bea2bc96629d7a87f8894180a870a" translate="yes" xml:space="preserve">
          <source>To allow access to the original function for introspection and other purposes (e.g. bypassing a caching decorator such as &lt;a href=&quot;#functools.lru_cache&quot;&gt;&lt;code&gt;lru_cache()&lt;/code&gt;&lt;/a&gt;), this function automatically adds a &lt;code&gt;__wrapped__&lt;/code&gt; attribute to the wrapper that refers to the function being wrapped.</source>
          <target state="translated">내부 검사 및 기타 목적 (예 : &lt;a href=&quot;#functools.lru_cache&quot;&gt; &lt;code&gt;lru_cache()&lt;/code&gt; &lt;/a&gt; 와 같은 캐싱 데코레이터 무시)을 위해 원래 함수에 액세스 할 수 있도록 이 함수는 랩핑 된 함수를 참조하는 랩퍼에 &lt;code&gt;__wrapped__&lt;/code&gt; 속성을 자동으로 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="d7e3f6ae6bebf84a668a5d330c26e9a9f0e8c8ca" translate="yes" xml:space="preserve">
          <source>To also capture standard error in the result, use &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt;:</source>
          <target state="translated">결과에서 표준 오류를 캡처하려면 &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b40c02aa20e39d67b9f645180128720b8df1859c" translate="yes" xml:space="preserve">
          <source>To avoid confusing existing tools that analyze import statements and expect to find the modules they&amp;rsquo;re importing.</source>
          <target state="translated">가져 오기 문을 분석하고 가져 오는 모듈을 찾을 것으로 예상되는 기존 도구를 혼동하지 않기 위해.</target>
        </trans-unit>
        <trans-unit id="6fcd2ea1ec6b9fcb7a6ad1afd985d7ecdf73f53a" translate="yes" xml:space="preserve">
          <source>To avoid the task &lt;a href=&quot;#asyncio.Task.cancel&quot;&gt;&lt;code&gt;cancellation&lt;/code&gt;&lt;/a&gt;, wrap it in &lt;a href=&quot;#asyncio.shield&quot;&gt;&lt;code&gt;shield()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">작업 &lt;a href=&quot;#asyncio.Task.cancel&quot;&gt; &lt;code&gt;cancellation&lt;/code&gt; &lt;/a&gt; 를 피하려면 &lt;a href=&quot;#asyncio.shield&quot;&gt; &lt;code&gt;shield()&lt;/code&gt; &lt;/a&gt; 감싸십시오 .</target>
        </trans-unit>
        <trans-unit id="cb7ed6c5f7af9fa2f11429ad240931ae400cd1a3" translate="yes" xml:space="preserve">
          <source>To be called just before drawing a shape to be filled.</source>
          <target state="translated">채울 도형을 그리기 직전에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="64d8c5cc57d55c3231722a4a870d260dd19d6c3e" translate="yes" xml:space="preserve">
          <source>To be directly usable as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, &lt;code&gt;os.DirEntry&lt;/code&gt; implements the &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">A와 직접 사용할 수있을 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-like-object&quot;&gt;경로와 같은 목적&lt;/a&gt; , &lt;code&gt;os.DirEntry&lt;/code&gt; 의 구현 &lt;a href=&quot;#os.PathLike&quot;&gt; &lt;code&gt;PathLike&lt;/code&gt; 의&lt;/a&gt; 인터페이스.</target>
        </trans-unit>
        <trans-unit id="53d877d48e3eeb459e4ec2e50eab07db6370a32d" translate="yes" xml:space="preserve">
          <source>To be directly usable as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, &lt;code&gt;os.DirEntry&lt;/code&gt; implements the &lt;a href=&quot;#os.PathLike&quot;&gt;&lt;code&gt;PathLike&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">To be directly usable as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-like-object&quot;&gt;path-like object&lt;/a&gt;, &lt;code&gt;os.DirEntry&lt;/code&gt; implements the &lt;a href=&quot;#os.PathLike&quot;&gt; &lt;code&gt;PathLike&lt;/code&gt; &lt;/a&gt; interface.</target>
        </trans-unit>
        <trans-unit id="2aca75b7a1203ce8695faba0b01214c1fb557382" translate="yes" xml:space="preserve">
          <source>To be on the safe side, if you must pass a string gotten from a form to a shell command, you should make sure the string contains only alphanumeric characters, dashes, underscores, and periods.</source>
          <target state="translated">안전한면을 유지하려면 양식에서 가져온 문자열을 쉘 명령으로 전달해야하는 경우 문자열에 영숫자 문자, 대시, 밑줄 및 마침표 만 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="1c9976abfa62062ca46d0102679c057214fc0d8e" translate="yes" xml:space="preserve">
          <source>To be secure against &lt;a href=&quot;https://en.wikipedia.org/wiki/Brute-force_attack&quot;&gt;brute-force attacks&lt;/a&gt;, tokens need to have sufficient randomness. Unfortunately, what is considered sufficient will necessarily increase as computers get more powerful and able to make more guesses in a shorter period. As of 2015, it is believed that 32 bytes (256 bits) of randomness is sufficient for the typical use-case expected for the &lt;a href=&quot;#module-secrets&quot;&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Brute-force_attack&quot;&gt;무차별 대입 공격&lt;/a&gt; 에 대비하려면 토큰에 충분한 임의성이 있어야합니다. 불행히도, 컴퓨터가 더 강력 해지고 단기간에 더 많은 추측을 할 수있게되면 충분한 것으로 간주 될 것입니다. 2015 년 현재 &lt;a href=&quot;#module-secrets&quot;&gt; &lt;code&gt;secrets&lt;/code&gt; &lt;/a&gt; 모듈에 예상되는 일반적인 사용 사례에는 32 바이트 (256 비트)의 임의성이 충분하다고 믿어집니다 .</target>
        </trans-unit>
        <trans-unit id="f7b8e37c3ead7bb7e82354e263d6bbb12e469ece" translate="yes" xml:space="preserve">
          <source>To build a functioning &lt;a href=&quot;#asynchat.async_chat&quot;&gt;&lt;code&gt;async_chat&lt;/code&gt;&lt;/a&gt; subclass your input methods &lt;a href=&quot;#asynchat.async_chat.collect_incoming_data&quot;&gt;&lt;code&gt;collect_incoming_data()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt;&lt;code&gt;found_terminator()&lt;/code&gt;&lt;/a&gt; must handle the data that the channel receives asynchronously. The methods are described below.</source>
          <target state="translated">작동하는 &lt;a href=&quot;#asynchat.async_chat&quot;&gt; &lt;code&gt;async_chat&lt;/code&gt; &lt;/a&gt; 서브 클래스 를 빌드하려면 입력 메소드 &lt;a href=&quot;#asynchat.async_chat.collect_incoming_data&quot;&gt; &lt;code&gt;collect_incoming_data()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#asynchat.async_chat.found_terminator&quot;&gt; &lt;code&gt;found_terminator()&lt;/code&gt; &lt;/a&gt; 가 채널이 비동기 적으로 수신하는 데이터를 처리해야합니다. 방법은 아래에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="45163f5e6e9d3d755a0aa4e4a2cad96a7b22f1a9" translate="yes" xml:space="preserve">
          <source>To build asynchronous handlers, use the &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt;&lt;code&gt;ForkingMixIn&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">비동기 처리기를 작성하려면 &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt; &lt;code&gt;ThreadingMixIn&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#socketserver.ForkingMixIn&quot;&gt; &lt;code&gt;ForkingMixIn&lt;/code&gt; &lt;/a&gt; 클래스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0f3473b7a087f24c025a3a486b154bb9e21ac1a" translate="yes" xml:space="preserve">
          <source>To calculate hash of some data, you should first construct a hash object by calling the appropriate constructor function (&lt;a href=&quot;#hashlib.blake2b&quot;&gt;&lt;code&gt;blake2b()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#hashlib.blake2s&quot;&gt;&lt;code&gt;blake2s()&lt;/code&gt;&lt;/a&gt;), then update it with the data by calling &lt;code&gt;update()&lt;/code&gt; on the object, and, finally, get the digest out of the object by calling &lt;code&gt;digest()&lt;/code&gt; (or &lt;code&gt;hexdigest()&lt;/code&gt; for hex-encoded string).</source>
          <target state="translated">일부 데이터의 해시를 계산하려면 먼저 적절한 생성자 함수 ( &lt;a href=&quot;#hashlib.blake2b&quot;&gt; &lt;code&gt;blake2b()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#hashlib.blake2s&quot;&gt; &lt;code&gt;blake2s()&lt;/code&gt; &lt;/a&gt; ) 를 호출하여 해시 객체를 생성 한 다음 객체에서 &lt;code&gt;update()&lt;/code&gt; 를 호출하여 데이터로 업데이트 해야합니다. &lt;code&gt;digest()&lt;/code&gt; 또는 16 진으로 인코딩 된 문자열의 경우 &lt;code&gt;hexdigest()&lt;/code&gt; 를 호출하여 객체에서 다이제스트합니다 .</target>
        </trans-unit>
        <trans-unit id="8c8e11f7a995dea282995d88782e0aabb4b1ae1b" translate="yes" xml:space="preserve">
          <source>To cancel a running Task use the &lt;a href=&quot;#asyncio.Task.cancel&quot;&gt;&lt;code&gt;cancel()&lt;/code&gt;&lt;/a&gt; method. Calling it will cause the Task to throw a &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt;&lt;code&gt;CancelledError&lt;/code&gt;&lt;/a&gt; exception into the wrapped coroutine. If a coroutine is awaiting on a Future object during cancellation, the Future object will be cancelled.</source>
          <target state="translated">실행중인 작업을 취소하려면 cancel &lt;a href=&quot;#asyncio.Task.cancel&quot;&gt; &lt;code&gt;cancel()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오 . 호출하면 태스크가 랩핑 된 코 루틴에 &lt;a href=&quot;asyncio-exceptions#asyncio.CancelledError&quot;&gt; &lt;code&gt;CancelledError&lt;/code&gt; &lt;/a&gt; 예외를 발생시킵니다. 취소 중에 미래 오브젝트에서 코 루틴이 대기중인 경우, 미래 오브젝트가 취소됩니다.</target>
        </trans-unit>
        <trans-unit id="8e63c10e490c41b2c85c5886452a96e3ecc37d68" translate="yes" xml:space="preserve">
          <source>To change this default behavior, another value can be supplied using the &lt;code&gt;prog=&lt;/code&gt; argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">이 기본 동작을 변경하려면 &lt;code&gt;prog=&lt;/code&gt; 인수를 사용하여 &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; 에&lt;/a&gt; 다른 값을 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6e34501a464650fe6316c88682b19ff1b8ffe1a" translate="yes" xml:space="preserve">
          <source>To check that a module&amp;rsquo;s docstrings are up-to-date by verifying that all interactive examples still work as documented.</source>
          <target state="translated">모든 대화식 예제가 여전히 문서화 된대로 작동하는지 확인하여 모듈의 문서 문자열이 최신인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="203e5ed47bfbabd7adfd3c9726f43e77f390c583" translate="yes" xml:space="preserve">
          <source>To check what font a Button uses by default:</source>
          <target state="translated">버튼이 기본적으로 어떤 글꼴을 사용하는지 확인하려면 :</target>
        </trans-unit>
        <trans-unit id="b839a91668c3944755e3b7d093c803d5bfd881aa" translate="yes" xml:space="preserve">
          <source>To check whether a particular function accepts &lt;code&gt;False&lt;/code&gt; for its &lt;em&gt;follow_symlinks&lt;/em&gt; parameter, use the &lt;code&gt;in&lt;/code&gt; operator on &lt;code&gt;supports_follow_symlinks&lt;/code&gt;. As an example, this expression evaluates to &lt;code&gt;True&lt;/code&gt; if you may specify &lt;code&gt;follow_symlinks=False&lt;/code&gt; when calling &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; on the local platform:</source>
          <target state="translated">&lt;em&gt;follow_symlinks&lt;/em&gt; 매개 변수에 특정 함수가 &lt;code&gt;False&lt;/code&gt; 를 허용하는지 여부를 확인하려면 &lt;code&gt;supports_follow_symlinks&lt;/code&gt; &lt;code&gt;in&lt;/code&gt; 연산자를 사용하십시오 . 예를 들어, 로컬 플랫폼에서 &lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt; 를 호출 할 때 &lt;code&gt;follow_symlinks=False&lt;/code&gt; 를 지정할 수 있으면 이 표현식은 &lt;code&gt;True&lt;/code&gt; 로 평가됩니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6a19f8267a804bed2cc6e4cb5709e33adda2cd86" translate="yes" xml:space="preserve">
          <source>To check whether a particular function accepts an open file descriptor for its &lt;em&gt;dir_fd&lt;/em&gt; parameter, use the &lt;code&gt;in&lt;/code&gt; operator on &lt;code&gt;supports_dir_fd&lt;/code&gt;. As an example, this expression evaluates to &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt; accepts open file descriptors for &lt;em&gt;dir_fd&lt;/em&gt; on the local platform:</source>
          <target state="translated">특정 함수가 &lt;em&gt;dir_fd&lt;/em&gt; 매개 변수에 대해 열린 파일 디스크립터를 승인하는지 여부를 확인하려면 &lt;code&gt;supports_dir_fd&lt;/code&gt; &lt;code&gt;in&lt;/code&gt; 연산자를 사용하십시오 . 예를 들어,이 표현 평가하여 &lt;code&gt;True&lt;/code&gt; 경우 &lt;a href=&quot;#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt; 오픈 파일 기술자 받아 &lt;em&gt;dir_fd&lt;/em&gt; 로컬 플랫폼을 :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9a5093ea51a15238b4b1605167c69ad6fd7b7468" translate="yes" xml:space="preserve">
          <source>To check which implementation will the generic function choose for a given type, use the &lt;code&gt;dispatch()&lt;/code&gt; attribute:</source>
          <target state="translated">제네릭 함수가 주어진 유형에 대해 어떤 구현을 선택하는지 확인하려면 &lt;code&gt;dispatch()&lt;/code&gt; 속성을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="cffbae74923f0c8f4bcee465ec4c25d8823c6b00" translate="yes" xml:space="preserve">
          <source>To choose a sample from a range of integers, use a &lt;a href=&quot;stdtypes#range&quot;&gt;&lt;code&gt;range()&lt;/code&gt;&lt;/a&gt; object as an argument. This is especially fast and space efficient for sampling from a large population: &lt;code&gt;sample(range(10000000), k=60)&lt;/code&gt;.</source>
          <target state="translated">정수 범위에서 샘플을 선택하려면 &lt;a href=&quot;stdtypes#range&quot;&gt; &lt;code&gt;range()&lt;/code&gt; &lt;/a&gt; 객체를 인수로 사용하십시오. 이는 대규모 집단 &lt;code&gt;sample(range(10000000), k=60)&lt;/code&gt; 에서 샘플링 할 때 특히 빠르고 공간 효율적입니다 .</target>
        </trans-unit>
        <trans-unit id="9b7dd8c80cfe20bb2e14df7147ef117b8925618f" translate="yes" xml:space="preserve">
          <source>To choose between &lt;a href=&quot;#threading.Condition.notify&quot;&gt;&lt;code&gt;notify()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#threading.Condition.notify_all&quot;&gt;&lt;code&gt;notify_all()&lt;/code&gt;&lt;/a&gt;, consider whether one state change can be interesting for only one or several waiting threads. E.g. in a typical producer-consumer situation, adding one item to the buffer only needs to wake up one consumer thread.</source>
          <target state="translated">&lt;a href=&quot;#threading.Condition.notify&quot;&gt; &lt;code&gt;notify()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#threading.Condition.notify_all&quot;&gt; &lt;code&gt;notify_all()&lt;/code&gt; &lt;/a&gt; 중에서 선택하려면 하나의 상태 변경이 하나 또는 여러 개의 대기중인 스레드에만 흥미로울 수 있는지 고려하십시오. 예를 들어 일반적인 생산자-소비자 상황에서 하나의 항목을 버퍼에 추가하면 하나의 소비자 스레드 만 깨울 필요가 있습니다.</target>
        </trans-unit>
        <trans-unit id="41195aa7846cfb32030566deca5632cd7690db94" translate="yes" xml:space="preserve">
          <source>To clarify the above rules, here&amp;rsquo;s some example Python code, equivalent to the built-in hash, for computing the hash of a rational number, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;functions#complex&quot;&gt;&lt;code&gt;complex&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">위의 규칙을 명확히하기 위해 합리적인 해시, &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;functions#complex&quot;&gt; &lt;code&gt;complex&lt;/code&gt; &lt;/a&gt; 의 해시를 계산하기위한 내장 해시와 동등한 Python 코드 예제가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5b14bc137208bc1c60d307e4cf65b6dfa3f703a0" translate="yes" xml:space="preserve">
          <source>To collect the inner text of an element, see &lt;a href=&quot;#xml.etree.ElementTree.Element.itertext&quot;&gt;&lt;code&gt;itertext()&lt;/code&gt;&lt;/a&gt;, for example &lt;code&gt;&quot;&quot;.join(element.itertext())&lt;/code&gt;.</source>
          <target state="translated">요소의 내부 텍스트를 수집하려면 &lt;a href=&quot;#xml.etree.ElementTree.Element.itertext&quot;&gt; &lt;code&gt;itertext()&lt;/code&gt; &lt;/a&gt; 참조하십시오 ( 예 : &lt;code&gt;&quot;&quot;.join(element.itertext())&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90f8874e7ddc4712ffa50b77f81e993f131bedbd" translate="yes" xml:space="preserve">
          <source>To compile the executable, you can either just use the standard MSVC command line tools, or you can take advantage of the fact that distutils knows how to compile Python source:</source>
          <target state="translated">실행 파일을 컴파일하려면 표준 MSVC 명령 줄 도구를 사용하거나 distutils가 Python 소스를 컴파일하는 방법을 알고 있다는 사실을 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f05187baf6012be5553f969aef8548cf6b88338a" translate="yes" xml:space="preserve">
          <source>To compute the product of an iterable with itself, specify the number of repetitions with the optional &lt;em&gt;repeat&lt;/em&gt; keyword argument. For example, &lt;code&gt;product(A, repeat=4)&lt;/code&gt; means the same as &lt;code&gt;product(A, A, A, A)&lt;/code&gt;.</source>
          <target state="translated">자체 iterable의 곱을 계산하려면 선택적 &lt;em&gt;repeat&lt;/em&gt; 키워드 인수를 사용하여 반복 횟수를 지정하십시오 . 예를 들어 &lt;code&gt;product(A, repeat=4)&lt;/code&gt; 는 &lt;code&gt;product(A, A, A, A)&lt;/code&gt; 와 동일 함을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="7e49a1c57330c177b754abd74b01b2d48765dccf" translate="yes" xml:space="preserve">
          <source>To configure return values on methods of &lt;em&gt;instances&lt;/em&gt; on the patched class you must do this on the &lt;code&gt;return_value&lt;/code&gt;. For example:</source>
          <target state="translated">패치 된 클래스 에서 &lt;em&gt;인스턴스의&lt;/em&gt; 메소드에 대한 리턴 값을 구성하려면 &lt;code&gt;return_value&lt;/code&gt; 에서이를 수행해야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eaae56af4b61d6444086b8fd2c7dd4d70db5a251" translate="yes" xml:space="preserve">
          <source>To configure the tree column heading, call this with column = &amp;ldquo;#0&amp;rdquo;.</source>
          <target state="translated">트리 열 머리글을 구성하려면 열 =&amp;ldquo;# 0&amp;rdquo;으로 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="40e519f199f0660c1da27aa291b04f750c9d1934" translate="yes" xml:space="preserve">
          <source>To configure the tree column, call this with column = &amp;ldquo;#0&amp;rdquo;</source>
          <target state="translated">트리 열을 구성하려면 column =&amp;ldquo;# 0&amp;rdquo;으로 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="22dec9507a65d01d963843a88d1fb9139886cc92" translate="yes" xml:space="preserve">
          <source>To convert a dictionary to a named tuple, use the double-star-operator (as described in &lt;a href=&quot;https://docs.python.org/3.8/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;Unpacking Argument Lists&lt;/a&gt;):</source>
          <target state="translated">사전을 명명 된 튜플로 변환하려면 double-star-operator를 사용하십시오 ( &lt;a href=&quot;https://docs.python.org/3.8/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;인수 풀기 인수 목록에&lt;/a&gt; 설명 된대로 ).</target>
        </trans-unit>
        <trans-unit id="9edc33eaf040525095ed5a4c96668d2991bae3d7" translate="yes" xml:space="preserve">
          <source>To convert a dictionary to a named tuple, use the double-star-operator (as described in &lt;a href=&quot;https://docs.python.org/3.9/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;Unpacking Argument Lists&lt;/a&gt;):</source>
          <target state="translated">To convert a dictionary to a named tuple, use the double-star-operator (as described in &lt;a href=&quot;https://docs.python.org/3.9/tutorial/controlflow.html#tut-unpacking-arguments&quot;&gt;Unpacking Argument Lists&lt;/a&gt;):</target>
        </trans-unit>
        <trans-unit id="aca86a0be8c48cdfd48ca2728336953279aaed88" translate="yes" xml:space="preserve">
          <source>To copy all mail from a Babyl mailbox to an MH mailbox, converting all of the format-specific information that can be converted:</source>
          <target state="translated">Babyl 사서함에서 MH 사서함으로 모든 메일을 복사하려면 변환 할 수있는 모든 형식 별 정보를 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="a7a4d66aac534d7a89b1d842a9b4699051775cbd" translate="yes" xml:space="preserve">
          <source>To create a heap, use a list initialized to &lt;code&gt;[]&lt;/code&gt;, or you can transform a populated list into a heap via function &lt;a href=&quot;#heapq.heapify&quot;&gt;&lt;code&gt;heapify()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">힙을 만들려면 &lt;code&gt;[]&lt;/code&gt; 로 초기화 된 목록을 사용 하거나 &lt;a href=&quot;#heapq.heapify&quot;&gt; &lt;code&gt;heapify()&lt;/code&gt; &lt;/a&gt; 함수를 통해 채워진 목록을 힙으로 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a67c0ed9117c7f46c3f4e7b0dc05a0ed833eaec5" translate="yes" xml:space="preserve">
          <source>To create one&amp;rsquo;s own manager, one creates a subclass of &lt;a href=&quot;#multiprocessing.managers.BaseManager&quot;&gt;&lt;code&gt;BaseManager&lt;/code&gt;&lt;/a&gt; and uses the &lt;a href=&quot;#multiprocessing.managers.BaseManager.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt; classmethod to register new types or callables with the manager class. For example:</source>
          <target state="translated">자신의 관리자를 만들려면 &lt;a href=&quot;#multiprocessing.managers.BaseManager&quot;&gt; &lt;code&gt;BaseManager&lt;/code&gt; &lt;/a&gt; 의 하위 클래스를 만들고 &lt;a href=&quot;#multiprocessing.managers.BaseManager.register&quot;&gt; &lt;code&gt;register()&lt;/code&gt; &lt;/a&gt; classmethod를 사용하여 새 유형이나 호출 가능 항목을 manager 클래스에 등록합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="def08ca7414daf6c9ffb9d1b7d48a4054a6f3646" translate="yes" xml:space="preserve">
          <source>To define a generic function, decorate it with the &lt;code&gt;@singledispatch&lt;/code&gt; decorator. Note that the dispatch happens on the type of the first argument, create your function accordingly:</source>
          <target state="translated">일반 함수를 정의하려면 &lt;code&gt;@singledispatch&lt;/code&gt; 데코레이터로 장식하십시오. 디스패치는 첫 번째 인수의 유형에서 발생하므로 그에 따라 함수를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ec0a2fc9637c4cdce9a5093c1c6fc720d969cd66" translate="yes" xml:space="preserve">
          <source>To define a generic method, decorate it with the &lt;code&gt;@singledispatchmethod&lt;/code&gt; decorator. Note that the dispatch happens on the type of the first non-self or non-cls argument, create your function accordingly:</source>
          <target state="translated">일반적인 방법을 정의하려면 &lt;code&gt;@singledispatchmethod&lt;/code&gt; 데코레이터로 장식하십시오. 디스패치는 첫 번째 non-self 또는 non-cls 인수의 유형에서 발생하므로 그에 따라 함수를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="53e197460df6a7ae10480906b29b24cc193de048" translate="yes" xml:space="preserve">
          <source>To define a union, use e.g. &lt;code&gt;Union[int, str]&lt;/code&gt;. Details:</source>
          <target state="translated">공용체를 정의하려면 예를 들어 &lt;code&gt;Union[int, str]&lt;/code&gt; . 세부:</target>
        </trans-unit>
        <trans-unit id="c3927e01fc5b5632db956bd430c64a9a003d5d89" translate="yes" xml:space="preserve">
          <source>To demonstrate several uses of the &lt;a href=&quot;#module-pprint&quot;&gt;&lt;code&gt;pprint()&lt;/code&gt;&lt;/a&gt; function and its parameters, let&amp;rsquo;s fetch information about a project from &lt;a href=&quot;https://pypi.org&quot;&gt;PyPI&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#module-pprint&quot;&gt; &lt;code&gt;pprint()&lt;/code&gt; &lt;/a&gt; 함수 및 해당 매개 변수 의 여러 가지 사용법을 보여주기 위해 &lt;a href=&quot;https://pypi.org&quot;&gt;PyPI&lt;/a&gt; 에서 프로젝트에 대한 정보를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="424ceed038a8907eb2e5c3e3261ed2cb0006ff29" translate="yes" xml:space="preserve">
          <source>To determine whether a particular function permits specifying an open file descriptor for its &lt;em&gt;path&lt;/em&gt; parameter, use the &lt;code&gt;in&lt;/code&gt; operator on &lt;code&gt;supports_fd&lt;/code&gt;. As an example, this expression evaluates to &lt;code&gt;True&lt;/code&gt; if &lt;a href=&quot;#os.chdir&quot;&gt;&lt;code&gt;os.chdir()&lt;/code&gt;&lt;/a&gt; accepts open file descriptors for &lt;em&gt;path&lt;/em&gt; on your local platform:</source>
          <target state="translated">특정 함수가 &lt;em&gt;경로&lt;/em&gt; 매개 변수에 열린 파일 디스크립터를 지정할 수 있는지 여부를 판별하려면 &lt;code&gt;supports_fd&lt;/code&gt; &lt;code&gt;in&lt;/code&gt; 연산자를 사용하십시오 . 예를 들어, &lt;a href=&quot;#os.chdir&quot;&gt; &lt;code&gt;os.chdir()&lt;/code&gt; &lt;/a&gt; 이 로컬 플랫폼 에서 &lt;em&gt;경로&lt;/em&gt; 에 대한 열린 파일 디스크립터를 허용 하는 경우이 표현식은 &lt;code&gt;True&lt;/code&gt; 로 평가됩니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1054223eda970969071e95bb7d866ebfd8c752ad" translate="yes" xml:space="preserve">
          <source>To disable autodetected proxy pass an empty dictionary.</source>
          <target state="translated">자동 감지 프록시를 비활성화하려면 빈 사전을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="f9cab41974091422ee9f72c252520e5936e0afb6" translate="yes" xml:space="preserve">
          <source>To do just the former:</source>
          <target state="translated">전자를 수행하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c80beb2d9874cb37ef475b5e1a40bd3aa13b619d" translate="yes" xml:space="preserve">
          <source>To document when incompatible changes were introduced, and when they will be &amp;mdash; or were &amp;mdash; made mandatory. This is a form of executable documentation, and can be inspected programmatically via importing &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; and examining its contents.</source>
          <target state="translated">호환되지 않는 변경 사항이 도입 된시기와 변경시기 (필수 사항)를 기록합니다. 이것은 실행 가능한 문서 형식이며 &lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt; 를 가져 와서 내용을 검사하여 프로그래밍 방식으로 검사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2bebf05987b55dff22afd0eef3267ff60584d0ea" translate="yes" xml:space="preserve">
          <source>To ease the use of various types of files, the argparse module provides the factory FileType which takes the &lt;code&gt;mode=&lt;/code&gt;, &lt;code&gt;bufsize=&lt;/code&gt;, &lt;code&gt;encoding=&lt;/code&gt; and &lt;code&gt;errors=&lt;/code&gt; arguments of the &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function. For example, &lt;code&gt;FileType('w')&lt;/code&gt; can be used to create a writable file:</source>
          <target state="translated">다양한 유형의 파일을 쉽게 사용할 수 있도록 argparse 모듈은 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 함수 의 &lt;code&gt;mode=&lt;/code&gt; , &lt;code&gt;bufsize=&lt;/code&gt; , &lt;code&gt;encoding=&lt;/code&gt; 및 &lt;code&gt;errors=&lt;/code&gt; 인수를 사용하는 팩토리 FileType을 제공합니다 . 예를 들어 &lt;code&gt;FileType('w')&lt;/code&gt; 을 사용하여 쓰기 가능한 파일을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c54845e78ca91a3d466e12c51c7e58cd7c952c9" translate="yes" xml:space="preserve">
          <source>To enable easier handling of syslog messages in the face of all these differing daemon behaviours, the appending of the NUL byte has been made configurable, through the use of a class-level attribute, &lt;code&gt;append_nul&lt;/code&gt;. This defaults to &lt;code&gt;True&lt;/code&gt; (preserving the existing behaviour) but can be set to &lt;code&gt;False&lt;/code&gt; on a &lt;code&gt;SysLogHandler&lt;/code&gt; instance in order for that instance to &lt;em&gt;not&lt;/em&gt; append the NUL terminator.</source>
          <target state="translated">서로 다른 모든 데몬 동작에 직면하여 syslog 메시지를보다 쉽게 ​​처리 할 수 ​​있도록 클래스 수준 속성 인 &lt;code&gt;append_nul&lt;/code&gt; 을 사용하여 NUL 바이트 추가를 구성 할 수 있습니다 . 이 기본값 &lt;code&gt;True&lt;/code&gt; (기존 동작을 유지)하지만 설정할 수 있습니다 &lt;code&gt;False&lt;/code&gt; A의 &lt;code&gt;SysLogHandler&lt;/code&gt; 의 에 해당 인스턴스의 순서를 예를 &lt;em&gt;하지&lt;/em&gt; 널 (null) 종료 추가합니다.</target>
        </trans-unit>
        <trans-unit id="cc49076076cfe4da08bd1523950aa22f8527f645" translate="yes" xml:space="preserve">
          <source>To enable registering lambdas and pre-existing functions, the &lt;code&gt;register()&lt;/code&gt; attribute can be used in a functional form:</source>
          <target state="translated">람다 및 기존 함수를 &lt;code&gt;register()&lt;/code&gt; 할 수 있도록 register () 속성을 기능적인 형식으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c127349c822a4f335881123ec8ddf1bf0af08254" translate="yes" xml:space="preserve">
          <source>To enable the Python Development Mode without installing debug hooks on memory allocators, set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONMALLOC&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">To enable the Python Development Mode without installing debug hooks on memory allocators, set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONMALLOC&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONMALLOC&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;default&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e6d29707b8a46ad95075a2f46ea912153c6feb3e" translate="yes" xml:space="preserve">
          <source>To enable this feature, simply add this to the top of your CGI script:</source>
          <target state="translated">이 기능을 활성화하려면 CGI 스크립트 맨 위에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="83bc49702d610686bdeda107bfc7569cda15cc78" translate="yes" xml:space="preserve">
          <source>To enable, pass a &lt;em&gt;depth&lt;/em&gt; value greater than zero; this sets the number of frames whose information will be captured. To disable, pass set &lt;em&gt;depth&lt;/em&gt; to zero.</source>
          <target state="translated">활성화하려면 0보다 큰 &lt;em&gt;깊이&lt;/em&gt; 값을 전달하십시오 . 정보를 캡처 할 프레임 수를 설정합니다. 비활성화하려면 설정된 &lt;em&gt;깊이&lt;/em&gt; 를 0으로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="668347bab37e711c30026491f866da05c6606f00" translate="yes" xml:space="preserve">
          <source>To encode &lt;code&gt;str&lt;/code&gt; filenames to &lt;code&gt;bytes&lt;/code&gt;, use &lt;a href=&quot;#os.fsencode&quot;&gt;&lt;code&gt;fsencode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; 파일 이름을 &lt;code&gt;bytes&lt;/code&gt; 인코딩하려면 &lt;a href=&quot;#os.fsencode&quot;&gt; &lt;code&gt;fsencode()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ce50989ce66ad69407e9680bd28212c88a6fa36" translate="yes" xml:space="preserve">
          <source>To ensure that &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#future&quot;&gt;future statements&lt;/a&gt; run under releases prior to 2.1 at least yield runtime exceptions (the import of &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; will fail, because there was no module of that name prior to 2.1).</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#future&quot;&gt;향후 명령문&lt;/a&gt; 이 2.1 이전 릴리스에서 실행 되도록하려면 런타임 예외를 생성해야합니다 ( 2.1 이전에는 해당 이름의 모듈이 없으므로 &lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt; 가져 오기에 실패합니다).</target>
        </trans-unit>
        <trans-unit id="08b2c8e368b6b95903d3fe48002c97fc7e6f09aa" translate="yes" xml:space="preserve">
          <source>To ensure that &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#future&quot;&gt;future statements&lt;/a&gt; run under releases prior to 2.1 at least yield runtime exceptions (the import of &lt;a href=&quot;#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; will fail, because there was no module of that name prior to 2.1).</source>
          <target state="translated">To ensure that &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#future&quot;&gt;future statements&lt;/a&gt; run under releases prior to 2.1 at least yield runtime exceptions (the import of &lt;a href=&quot;#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt; will fail, because there was no module of that name prior to 2.1).</target>
        </trans-unit>
        <trans-unit id="ad4b05251097cbcad85d3ec00b6a8d792705b9f3" translate="yes" xml:space="preserve">
          <source>To ensure validity of the created memory mapping the file specified by the descriptor &lt;em&gt;fileno&lt;/em&gt; is internally automatically synchronized with physical backing store on Mac OS X and OpenVMS.</source>
          <target state="translated">생성 된 메모리 매핑의 유효성을 보장하기 위해 디스크립터 &lt;em&gt;fileno에&lt;/em&gt; 의해 지정된 파일 은 내부적으로 Mac OS X 및 OpenVMS의 물리적 백업 저장소와 자동으로 동기화됩니다.</target>
        </trans-unit>
        <trans-unit id="ec99a7a8d8cca50de20982646e9d30ebc48118e8" translate="yes" xml:space="preserve">
          <source>To enumerate all distinct multisets of a given size over a given set of elements, see &lt;a href=&quot;itertools#itertools.combinations_with_replacement&quot;&gt;&lt;code&gt;itertools.combinations_with_replacement()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">주어진 요소 집합에 대해 주어진 크기의 모든 별개의 다중 집합을 열거하려면 &lt;a href=&quot;itertools#itertools.combinations_with_replacement&quot;&gt; &lt;code&gt;itertools.combinations_with_replacement()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="898a56a1cfb92055d38cc5a56c7cdec6b0701f08" translate="yes" xml:space="preserve">
          <source>To estimate the distribution for a model than isn&amp;rsquo;t easy to solve analytically, &lt;a href=&quot;#statistics.NormalDist&quot;&gt;&lt;code&gt;NormalDist&lt;/code&gt;&lt;/a&gt; can generate input samples for a &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo simulation&lt;/a&gt;:</source>
          <target state="translated">해석하기 쉽지 않은 모델 분포를 추정하기 위해 &lt;a href=&quot;#statistics.NormalDist&quot;&gt; &lt;code&gt;NormalDist&lt;/code&gt; &lt;/a&gt; 는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Monte_Carlo_method&quot;&gt;Monte Carlo 시뮬레이션을&lt;/a&gt; 위한 입력 샘플을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2437b05ca67db6b8d2019788d70624cc8482ee86" translate="yes" xml:space="preserve">
          <source>To extend this to recognize other objects, subclass and implement a &lt;a href=&quot;#json.JSONEncoder.default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; method with another method that returns a serializable object for &lt;code&gt;o&lt;/code&gt; if possible, otherwise it should call the superclass implementation (to raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">이것을 다른 객체를 인식하도록 확장하려면 가능한 경우 &lt;code&gt;o&lt;/code&gt; 를 위해 직렬화 가능한 객체를 반환하는 다른 메소드를 사용 하여 서브 클래스를 작성하고 &lt;a href=&quot;#json.JSONEncoder.default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt; 메소드를 구현 하십시오. 그렇지 않으면 슈퍼 클래스 구현을 호출하여 ( &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 발생&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="0b9e1f981c214898a9d71b2ad2be102d9cb21352" translate="yes" xml:space="preserve">
          <source>To extract the filename and numbers from a string like</source>
          <target state="translated">문자열에서 파일 이름과 숫자를 추출하려면</target>
        </trans-unit>
        <trans-unit id="64c57258a9a2df67300aa5e1b50e7550f07b07d6" translate="yes" xml:space="preserve">
          <source>To fill in &lt;em&gt;fmt&lt;/em&gt;, execute &lt;code&gt;fmt % part_info&lt;/code&gt;, where &lt;code&gt;part_info&lt;/code&gt; is a dictionary composed of the following keys and values:</source>
          <target state="translated">&lt;em&gt;fmt&lt;/em&gt; 를 채우려면 &lt;code&gt;fmt % part_info&lt;/code&gt; 를 실행하십시오 . 여기서 &lt;code&gt;part_info&lt;/code&gt; 는 다음 키와 값으로 구성된 사전입니다.</target>
        </trans-unit>
        <trans-unit id="7958039c320a93b4dae438db3d31f1e69c695544" translate="yes" xml:space="preserve">
          <source>To find out the correct calling convention you have to look into the C header file or the documentation for the function you want to call.</source>
          <target state="translated">올바른 호출 규칙을 찾으려면 C 헤더 파일 또는 호출하려는 기능에 대한 설명서를 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="b76d7e840b24dc0f55fd8a37a5d7e8f61bf8991d" translate="yes" xml:space="preserve">
          <source>To find out what card the pair consists of, one could use the &lt;a href=&quot;#re.Match.group&quot;&gt;&lt;code&gt;group()&lt;/code&gt;&lt;/a&gt; method of the match object in the following manner:</source>
          <target state="translated">쌍이 어떤 카드로 구성되어 있는지 알아 보려면 다음과 같은 방법으로 match 객체 의 &lt;a href=&quot;#re.Match.group&quot;&gt; &lt;code&gt;group()&lt;/code&gt; &lt;/a&gt; 메서드를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cba99c69fa84b2f2263e7863f73140aabcbd1b17" translate="yes" xml:space="preserve">
          <source>To find the handler, look for the following keys in the registry, stopping with the first one found:</source>
          <target state="translated">핸들러를 찾으려면 레지스트리에서 다음 키를 찾아서 첫 번째 키를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="a06e17885d0bbc13034b00f92ad215110abd6ebf" translate="yes" xml:space="preserve">
          <source>To find the handler, obtain the type of &lt;em&gt;obj&lt;/em&gt; (&lt;code&gt;typ = type(obj)&lt;/code&gt;), and look for the following keys in the registry, stopping with the first one found:</source>
          <target state="translated">핸들러를 찾으려면 &lt;em&gt;obj&lt;/em&gt; 유형 ( &lt;code&gt;typ = type(obj)&lt;/code&gt; )을 확보하고 레지스트리에서 다음 키를 찾아서 첫 번째 키를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="fa5f6e01845faa817f7bbcccd8a26a392e5b5f5b" translate="yes" xml:space="preserve">
          <source>To find the name of the file containing the object.</source>
          <target state="translated">객체가 포함 된 파일 이름을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="7ba93089e99aaca64717295e4916acb713510642" translate="yes" xml:space="preserve">
          <source>To force a recompile of all the &lt;code&gt;.py&lt;/code&gt; files in the &lt;code&gt;Lib/&lt;/code&gt; subdirectory and all its subdirectories:</source>
          <target state="translated">&lt;code&gt;Lib/&lt;/code&gt; 서브 디렉토리 및 모든 서브 디렉토리 에있는 모든 &lt;code&gt;.py&lt;/code&gt; 파일 을 강제로 다시 컴파일하려면 다음을 수행하십시오 .</target>
        </trans-unit>
        <trans-unit id="35bebc28881a876ed876e6f04e3b4c2f536762a9" translate="yes" xml:space="preserve">
          <source>To format only a tuple you should therefore provide a singleton tuple whose only element is the tuple to be formatted.</source>
          <target state="translated">따라서 튜플 만 포맷하려면 요소 만 포맷 할 튜플 인 싱글 톤 튜플을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="332786b03f1a7ce007ac7b10bd4b080b17a03a5c" translate="yes" xml:space="preserve">
          <source>To generate a hash of a password using the strongest available method and check it against the original:</source>
          <target state="translated">사용 가능한 가장 강력한 방법을 사용하여 비밀번호의 해시를 생성하고 원래 비밀번호와 비교하여 확인하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="06c31764bc0616e4052301f18b4bda631b48f9b9" translate="yes" xml:space="preserve">
          <source>To get an aware &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object, call &lt;a href=&quot;#datetime.datetime.fromtimestamp&quot;&gt;&lt;code&gt;fromtimestamp()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">인식하는 &lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 객체 를 얻으려면 &lt;a href=&quot;#datetime.datetime.fromtimestamp&quot;&gt; &lt;code&gt;fromtimestamp()&lt;/code&gt; &lt;/a&gt; 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="f6536929738b6302b242f75ab30f3360374015a5" translate="yes" xml:space="preserve">
          <source>To get at submitted form data, use the &lt;code&gt;FieldStorage&lt;/code&gt; class. If the form contains non-ASCII characters, use the &lt;em&gt;encoding&lt;/em&gt; keyword parameter set to the value of the encoding defined for the document. It is usually contained in the META tag in the HEAD section of the HTML document or by the &lt;em&gt;Content-Type&lt;/em&gt; header). This reads the form contents from the standard input or the environment (depending on the value of various environment variables set according to the CGI standard). Since it may consume standard input, it should be instantiated only once.</source>
          <target state="translated">제출 된 양식 데이터를 얻으려면 &lt;code&gt;FieldStorage&lt;/code&gt; 클래스를 사용하십시오 . 양식에 ASCII가 아닌 문자가 포함 된 경우, &lt;em&gt;인코딩&lt;/em&gt; 키워드 매개 변수를 문서에 대해 정의 된 인코딩 값으로 설정하십시오. 일반적으로 HTML 문서의 HEAD 섹션에있는 META 태그 또는 &lt;em&gt;Content-Type&lt;/em&gt; 헤더에 포함됩니다. 이것은 표준 입력 또는 환경 (CGI 표준에 따라 설정된 다양한 환경 변수의 값에 따라)에서 양식 내용을 읽습니다. 표준 입력을 소비 할 수 있으므로 한 번만 인스턴스화해야합니다.</target>
        </trans-unit>
        <trans-unit id="ab0473a669281e7d941bb9f45175bd85a5a4f97c" translate="yes" xml:space="preserve">
          <source>To get at the &amp;ldquo;64-bitness&amp;rdquo; of the current interpreter, it is more reliable to query the &lt;a href=&quot;sys#sys.maxsize&quot;&gt;&lt;code&gt;sys.maxsize&lt;/code&gt;&lt;/a&gt; attribute:</source>
          <target state="translated">현재 인터프리터의 &quot;64 비트&quot;를 얻으려면 &lt;a href=&quot;sys#sys.maxsize&quot;&gt; &lt;code&gt;sys.maxsize&lt;/code&gt; &lt;/a&gt; 속성 을 쿼리하는 것이 더 안정적입니다 .</target>
        </trans-unit>
        <trans-unit id="cbc6bb2323f202cb1f1a72bf35bb7dcec42b3136" translate="yes" xml:space="preserve">
          <source>To get at the toplevel window that contains a given widget, you can often just refer to the widget&amp;rsquo;s master. Of course if the widget has been packed inside of a frame, the master won&amp;rsquo;t represent a toplevel window. To get at the toplevel window that contains an arbitrary widget, you can call the &lt;code&gt;_root()&lt;/code&gt; method. This method begins with an underscore to denote the fact that this function is part of the implementation, and not an interface to Tk functionality.</source>
          <target state="translated">주어진 위젯이 포함 된 최상위 창에 도달하려면 종종 위젯의 마스터를 참조하면됩니다. 물론 위젯이 프레임 안에 채워져 있으면 마스터는 최상위 창을 나타내지 않습니다. 임의의 위젯이 포함 된 최상위 창을 얻으려면 &lt;code&gt;_root()&lt;/code&gt; 메서드를 호출하면 됩니다 . 이 방법은 밑줄로 시작하여이 기능이 Tk 기능에 대한 인터페이스가 아니라 구현의 일부라는 사실을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7cbd4a63827073f5739e1664d7bb9679b9a9e8fa" translate="yes" xml:space="preserve">
          <source>To get fine-grained control over the copied region, the second form of &lt;a href=&quot;#curses.window.overlay&quot;&gt;&lt;code&gt;overlay()&lt;/code&gt;&lt;/a&gt; can be used. &lt;em&gt;sminrow&lt;/em&gt; and &lt;em&gt;smincol&lt;/em&gt; are the upper-left coordinates of the source window, and the other variables mark a rectangle in the destination window.</source>
          <target state="translated">복사 된 영역을 세밀하게 제어하려면 &lt;a href=&quot;#curses.window.overlay&quot;&gt; &lt;code&gt;overlay()&lt;/code&gt; &lt;/a&gt; 의 두 번째 형식을 사용할 수 있습니다. &lt;em&gt;sminrow&lt;/em&gt; 및 &lt;em&gt;smincol&lt;/em&gt; 은 소스 창의 왼쪽 위 좌표이며 다른 변수는 대상 창의 사각형을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b1f50e6db25d673b2592cd594d33fefebf9e6b13" translate="yes" xml:space="preserve">
          <source>To get fine-grained control over the copied region, the second form of &lt;a href=&quot;#curses.window.overwrite&quot;&gt;&lt;code&gt;overwrite()&lt;/code&gt;&lt;/a&gt; can be used. &lt;em&gt;sminrow&lt;/em&gt; and &lt;em&gt;smincol&lt;/em&gt; are the upper-left coordinates of the source window, the other variables mark a rectangle in the destination window.</source>
          <target state="translated">복사 된 영역을 세밀하게 제어하려면 &lt;a href=&quot;#curses.window.overwrite&quot;&gt; &lt;code&gt;overwrite()&lt;/code&gt; &lt;/a&gt; 의 두 번째 형식을 사용할 수 있습니다. &lt;em&gt;sminrow&lt;/em&gt; 및 &lt;em&gt;smincol&lt;/em&gt; 은 소스 창의 왼쪽 위 좌표이며 다른 변수는 대상 창의 사각형을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="28c7761539a23e6461abc6d90290b5c162e222dd" translate="yes" xml:space="preserve">
          <source>To get interpolation, use &lt;a href=&quot;#configparser.ConfigParser&quot;&gt;&lt;code&gt;ConfigParser&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">보간을 얻으려면 &lt;a href=&quot;#configparser.ConfigParser&quot;&gt; &lt;code&gt;ConfigParser&lt;/code&gt; 를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="897f9f1483241234fc1680d5c01aaac400825b5f" translate="yes" xml:space="preserve">
          <source>To get started, here is a simple callback that shows the values it gets passed:</source>
          <target state="translated">시작하려면 다음은 전달되는 값을 보여주는 간단한 콜백입니다.</target>
        </trans-unit>
        <trans-unit id="9a15fb1b51bc74d10a0368adfb2541b410554600" translate="yes" xml:space="preserve">
          <source>To get the full set of requirements for a distribution, use the &lt;code&gt;requires()&lt;/code&gt; function:</source>
          <target state="translated">배포판에 대한 전체 요구 사항을 얻으려면 &lt;code&gt;requires()&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac4c75c92e6f6f900761b506c028a1a4ab5d16ff" translate="yes" xml:space="preserve">
          <source>To give a field a default value, you can assign to it in the class body:</source>
          <target state="translated">필드에 기본값을 부여하기 위해 클래스 본문에서 필드를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec8970880073f2a4193628e073a34bef2505adc6" translate="yes" xml:space="preserve">
          <source>To give a widget to the packer (geometry manager), you call pack with optional arguments. In Tkinter, the Pack class holds all this functionality, and the various forms of the pack command are implemented as methods. All widgets in &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; are subclassed from the Packer, and so inherit all the packing methods. See the &lt;a href=&quot;tkinter.tix#module-tkinter.tix&quot;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;&lt;/a&gt; module documentation for additional information on the Form geometry manager.</source>
          <target state="translated">패커 (지오메트리 관리자)에 위젯을 제공하려면 선택적 인수와 함께 pack을 호출합니다. Tkinter에서 Pack 클래스는이 모든 기능을 보유하며 다양한 형태의 pack 명령이 메소드로 구현됩니다. &lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; 의&lt;/a&gt; 모든 위젯 은 Packer에서 서브 클래 싱되므로 모든 패킹 방법을 상속합니다. Form geometry manager에 대한 추가 정보 는 &lt;a href=&quot;tkinter.tix#module-tkinter.tix&quot;&gt; &lt;code&gt;tkinter.tix&lt;/code&gt; &lt;/a&gt; 모듈 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="15b1f3430d82190dc49a1cc998bb829e9af91209" translate="yes" xml:space="preserve">
          <source>To give the &lt;a href=&quot;#module-timeit&quot;&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/a&gt; module access to functions you define, you can pass a &lt;em&gt;setup&lt;/em&gt; parameter which contains an import statement:</source>
          <target state="translated">제공하기 위해 &lt;a href=&quot;#module-timeit&quot;&gt; &lt;code&gt;timeit&lt;/code&gt; 의&lt;/a&gt; 사용자가 정의하는 기능 모듈 액세스, 당신은 통과 할 수 &lt;em&gt;설정&lt;/em&gt; 가져 오기 문이 포함 된 매개 변수를 :</target>
        </trans-unit>
        <trans-unit id="da2a8f38b351487cbd3ba16c13bda7764e126ce4" translate="yes" xml:space="preserve">
          <source>To handle signals and to execute subprocesses, the event loop must be run in the main thread.</source>
          <target state="translated">신호를 처리하고 서브 프로세스를 실행하려면 기본 스레드에서 이벤트 루프를 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="685b9a90ebbf94251071857ab67987648cbe32d1" translate="yes" xml:space="preserve">
          <source>To help find the line number of the object within its file.</source>
          <target state="translated">파일 내에서 객체의 줄 번호를 찾는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="1e7a15938006fe056a0713c11808a9df9019ee29" translate="yes" xml:space="preserve">
          <source>To help keep Python 2 / Python 3 code in sync an &lt;code&gt;_order_&lt;/code&gt; attribute can be provided. It will be checked against the actual order of the enumeration and raise an error if the two do not match:</source>
          <target state="translated">Python 2 / Python 3 코드를 동기화 상태로 유지하기 위해 &lt;code&gt;_order_&lt;/code&gt; 속성을 제공 할 수 있습니다. 열거의 실제 순서와 비교하여 확인되며 두 항목이 일치하지 않으면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="eec8921c87539961c80aa82a8464e7801a7c0417" translate="yes" xml:space="preserve">
          <source>To help measure the effectiveness of the cache and tune the &lt;em&gt;maxsize&lt;/em&gt; parameter, the wrapped function is instrumented with a &lt;code&gt;cache_info()&lt;/code&gt; function that returns a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; showing &lt;em&gt;hits&lt;/em&gt;, &lt;em&gt;misses&lt;/em&gt;, &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;currsize&lt;/em&gt;. In a multi-threaded environment, the hits and misses are approximate.</source>
          <target state="translated">캐시의 효율성을 측정하고 &lt;em&gt;maxsize&lt;/em&gt; 매개 변수를 조정하기 위해 랩핑 된 함수는 &lt;em&gt;hits&lt;/em&gt; , &lt;em&gt;misses&lt;/em&gt; , &lt;em&gt;maxsize&lt;/em&gt; 및 &lt;em&gt;currsize를&lt;/em&gt; 표시 하는 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;명명 된 튜플&lt;/a&gt; 을 리턴하는 &lt;code&gt;cache_info()&lt;/code&gt; 함수 와 함께 계측됩니다 . 다중 스레드 환경에서 적중과 누락은 대략적인 것입니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c340b25ec6098ae69fa3b09838bf2442ac5dfcf2" translate="yes" xml:space="preserve">
          <source>To help measure the effectiveness of the cache and tune the &lt;em&gt;maxsize&lt;/em&gt; parameter, the wrapped function is instrumented with a &lt;code&gt;cache_info()&lt;/code&gt; function that returns a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; showing &lt;em&gt;hits&lt;/em&gt;, &lt;em&gt;misses&lt;/em&gt;, &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;currsize&lt;/em&gt;. In a multi-threaded environment, the hits and misses are approximate.</source>
          <target state="translated">To help measure the effectiveness of the cache and tune the &lt;em&gt;maxsize&lt;/em&gt; parameter, the wrapped function is instrumented with a &lt;code&gt;cache_info()&lt;/code&gt; function that returns a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; showing &lt;em&gt;hits&lt;/em&gt;, &lt;em&gt;misses&lt;/em&gt;, &lt;em&gt;maxsize&lt;/em&gt; and &lt;em&gt;currsize&lt;/em&gt;. In a multi-threaded environment, the hits and misses are approximate.</target>
        </trans-unit>
        <trans-unit id="3e3fadbfda6fb4b04ad37db994c48401a0680ed3" translate="yes" xml:space="preserve">
          <source>To ignore certain arguments you can pass in objects that compare equal to &lt;em&gt;everything&lt;/em&gt;. Calls to &lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt;&lt;code&gt;assert_called_with()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt;&lt;code&gt;assert_called_once_with()&lt;/code&gt;&lt;/a&gt; will then succeed no matter what was passed in.</source>
          <target state="translated">특정 인수를 무시하기 위해 &lt;em&gt;모든&lt;/em&gt; 것과 동일한 객체를 전달할 수 있습니다 . &lt;a href=&quot;#unittest.mock.Mock.assert_called_with&quot;&gt; &lt;code&gt;assert_called_with()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#unittest.mock.Mock.assert_called_once_with&quot;&gt; &lt;code&gt;assert_called_once_with()&lt;/code&gt; &lt;/a&gt; 호출 은 전달 된 내용에 관계없이 성공합니다.</target>
        </trans-unit>
        <trans-unit id="ed0a50ba92595cd542bd7bee7fb484c8f05170bb" translate="yes" xml:space="preserve">
          <source>To illustrate, the following examples all return a dictionary equal to &lt;code&gt;{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}&lt;/code&gt;:</source>
          <target state="translated">예를 들어, 다음 예제는 모두 &lt;code&gt;{&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3}&lt;/code&gt; 과 같은 사전을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="478307dcfca982cb8b33f10a2361f937679e0acd" translate="yes" xml:space="preserve">
          <source>To implement &lt;a href=&quot;#collections.deque&quot;&gt;&lt;code&gt;deque&lt;/code&gt;&lt;/a&gt; slicing, use a similar approach applying &lt;a href=&quot;#collections.deque.rotate&quot;&gt;&lt;code&gt;rotate()&lt;/code&gt;&lt;/a&gt; to bring a target element to the left side of the deque. Remove old entries with &lt;a href=&quot;#collections.deque.popleft&quot;&gt;&lt;code&gt;popleft()&lt;/code&gt;&lt;/a&gt;, add new entries with &lt;a href=&quot;#collections.deque.extend&quot;&gt;&lt;code&gt;extend()&lt;/code&gt;&lt;/a&gt;, and then reverse the rotation. With minor variations on that approach, it is easy to implement Forth style stack manipulations such as &lt;code&gt;dup&lt;/code&gt;, &lt;code&gt;drop&lt;/code&gt;, &lt;code&gt;swap&lt;/code&gt;, &lt;code&gt;over&lt;/code&gt;, &lt;code&gt;pick&lt;/code&gt;, &lt;code&gt;rot&lt;/code&gt;, and &lt;code&gt;roll&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#collections.deque&quot;&gt; &lt;code&gt;deque&lt;/code&gt; &lt;/a&gt; 슬라이싱 을 구현하려면 , &lt;a href=&quot;#collections.deque.rotate&quot;&gt; &lt;code&gt;rotate()&lt;/code&gt; &lt;/a&gt; 을 적용하는 비슷한 방법을 사용 하여 대상 요소를 deque의 왼쪽으로 가져 오십시오. 오래 된 항목을 제거 &lt;a href=&quot;#collections.deque.popleft&quot;&gt; &lt;code&gt;popleft()&lt;/code&gt; &lt;/a&gt; , 새로운 항목을 추가 &lt;a href=&quot;#collections.deque.extend&quot;&gt; &lt;code&gt;extend()&lt;/code&gt; &lt;/a&gt; 하고 역 회전. 이 접근 방식에 약간의 변형이있어 &lt;code&gt;dup&lt;/code&gt; , &lt;code&gt;drop&lt;/code&gt; , &lt;code&gt;swap&lt;/code&gt; , &lt;code&gt;over&lt;/code&gt; , &lt;code&gt;pick&lt;/code&gt; , &lt;code&gt;rot&lt;/code&gt; 및 &lt;code&gt;roll&lt;/code&gt; 과 같은 Forth 스타일 스택 조작을 쉽게 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2168141fc28490c67d1b6910596eb2e7720cb5bd" translate="yes" xml:space="preserve">
          <source>To implement a new event loop policy, it is recommended to subclass &lt;a href=&quot;#asyncio.DefaultEventLoopPolicy&quot;&gt;&lt;code&gt;DefaultEventLoopPolicy&lt;/code&gt;&lt;/a&gt; and override the methods for which custom behavior is wanted, e.g.:</source>
          <target state="translated">새로운 이벤트 루프 정책을 구현하려면 &lt;a href=&quot;#asyncio.DefaultEventLoopPolicy&quot;&gt; &lt;code&gt;DefaultEventLoopPolicy&lt;/code&gt; &lt;/a&gt; 를 서브 클래스 화 하고 다음과 같이 사용자 정의 동작이 필요한 메소드를 대체하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="cefc74e4478b86927f72685a3f4bbbb20664083e" translate="yes" xml:space="preserve">
          <source>To implement a service, you must derive a class from &lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt;&lt;code&gt;BaseRequestHandler&lt;/code&gt;&lt;/a&gt; and redefine its &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method. You can then run various versions of the service by combining one of the server classes with your request handler class. The request handler class must be different for datagram or stream services. This can be hidden by using the handler subclasses &lt;a href=&quot;#socketserver.StreamRequestHandler&quot;&gt;&lt;code&gt;StreamRequestHandler&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#socketserver.DatagramRequestHandler&quot;&gt;&lt;code&gt;DatagramRequestHandler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">서비스를 구현하려면 &lt;a href=&quot;#socketserver.BaseRequestHandler&quot;&gt; &lt;code&gt;BaseRequestHandler&lt;/code&gt; &lt;/a&gt; 에서 클래스를 파생시키고 &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt; 메소드를 재정의 해야합니다 . 그런 다음 서버 클래스 중 하나를 요청 핸들러 클래스와 결합하여 다양한 버전의 서비스를 실행할 수 있습니다. 요청 핸들러 클래스는 데이터 그램 또는 스트림 서비스마다 달라야합니다. 핸들러 서브 클래스 &lt;a href=&quot;#socketserver.StreamRequestHandler&quot;&gt; &lt;code&gt;StreamRequestHandler&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#socketserver.DatagramRequestHandler&quot;&gt; &lt;code&gt;DatagramRequestHandler&lt;/code&gt; &lt;/a&gt; 를 사용하여 숨길 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1785768c210239642eb9d634452c652d2df3cf43" translate="yes" xml:space="preserve">
          <source>To import a Python source file directly, use the following recipe (Python 3.5 and newer only):</source>
          <target state="translated">Python 소스 파일을 직접 가져 오려면 다음 레시피를 사용하십시오 (Python 3.5 이상).</target>
        </trans-unit>
        <trans-unit id="0a158457267508cf938f916c4c196f27b6dc6670" translate="yes" xml:space="preserve">
          <source>To include a text document, use the &lt;code&gt;{http://www.w3.org/2001/XInclude}include&lt;/code&gt; element, and set the &lt;strong&gt;parse&lt;/strong&gt; attribute to &amp;ldquo;text&amp;rdquo;:</source>
          <target state="translated">텍스트 문서를 포함 시키려면 &lt;code&gt;{http://www.w3.org/2001/XInclude}include&lt;/code&gt; 요소를 사용 하고 &lt;strong&gt;구문 분석&lt;/strong&gt; 속성을 &quot;text&quot;로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="103c745176746075c187f9dacccc25564fca2bc7" translate="yes" xml:space="preserve">
          <source>To interoperate with networking interfaces such as the socket module, addresses must be converted to strings or integers. This is handled using the &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int()&lt;/code&gt;&lt;/a&gt; builtin functions:</source>
          <target state="translated">소켓 모듈과 같은 네트워킹 인터페이스와 상호 운용하려면 주소를 문자열 또는 정수로 변환해야합니다. &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int()&lt;/code&gt; &lt;/a&gt; 내장 함수를 사용하여 처리 됩니다.</target>
        </trans-unit>
        <trans-unit id="66bda8be924c407f66490a684c3b21482c6ac623" translate="yes" xml:space="preserve">
          <source>To lock the lock, a thread calls its &lt;a href=&quot;#threading.RLock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; method; this returns once the thread owns the lock. To unlock the lock, a thread calls its &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; method. &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; call pairs may be nested; only the final &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; (the &lt;a href=&quot;#threading.Lock.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; of the outermost pair) resets the lock to unlocked and allows another thread blocked in &lt;a href=&quot;#threading.Lock.acquire&quot;&gt;&lt;code&gt;acquire()&lt;/code&gt;&lt;/a&gt; to proceed.</source>
          <target state="translated">잠금을 잠그기 위해 스레드는 &lt;a href=&quot;#threading.RLock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 메소드를 호출합니다 . 스레드가 잠금을 소유하면 반환합니다. 잠금을 해제하기 위해 스레드는 &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 메소드를 호출합니다 . &lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 호출 쌍은 중첩 될 수 있습니다. 마지막 &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; ( 가장 바깥 쪽 쌍 의 &lt;a href=&quot;#threading.Lock.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; &lt;/a&gt; 잠금을 잠금 해제로 재설정하고 &lt;a href=&quot;#threading.Lock.acquire&quot;&gt; &lt;code&gt;acquire()&lt;/code&gt; &lt;/a&gt; 에서 차단 된 다른 스레드 를 계속 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b784db9baba0395d4c3539a334c8993acd6900c8" translate="yes" xml:space="preserve">
          <source>To loop over the standard input, or the list of files given on the command line, see the &lt;a href=&quot;fileinput#module-fileinput&quot;&gt;&lt;code&gt;fileinput&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">표준 입력 또는 명령 행에 제공된 파일 목록을 반복하려면 &lt;a href=&quot;fileinput#module-fileinput&quot;&gt; &lt;code&gt;fileinput&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="98a046cb12aaa67ff00dce659507a1d1bdf50a19" translate="yes" xml:space="preserve">
          <source>To maintain compatibility with other platforms, not only the &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; variable is tested, but a list of variables given as envvars parameter. The first found to be defined will be used. &lt;em&gt;envvars&lt;/em&gt; defaults to the search path used in GNU gettext; it must always contain the variable name &lt;code&gt;'LANG'&lt;/code&gt;. The GNU gettext search path contains &lt;code&gt;'LC_ALL'&lt;/code&gt;, &lt;code&gt;'LC_CTYPE'&lt;/code&gt;, &lt;code&gt;'LANG'&lt;/code&gt; and &lt;code&gt;'LANGUAGE'&lt;/code&gt;, in that order.</source>
          <target state="translated">다른 플랫폼과의 호환성을 유지하기 위해 &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; 변수뿐만 아니라 envvars 매개 변수로 제공된 변수 목록이 테스트됩니다. 정의 된 첫 번째가 사용됩니다. &lt;em&gt;envvars&lt;/em&gt; 는 GNU gettext에서 사용되는 검색 경로를 기본값으로 사용합니다. 항상 변수 이름 &lt;code&gt;'LANG'&lt;/code&gt; 을 포함해야합니다 . GNU gettext 검색 경로에는 &lt;code&gt;'LC_ALL'&lt;/code&gt; , &lt;code&gt;'LC_CTYPE'&lt;/code&gt; , &lt;code&gt;'LANG'&lt;/code&gt; 및 &lt;code&gt;'LANGUAGE'&lt;/code&gt; 순서로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="221a715c7e9bbc3c8f73812058613b8e009601f2" translate="yes" xml:space="preserve">
          <source>To make a more general purpose &lt;code&gt;AutoNumber&lt;/code&gt;, add &lt;code&gt;*args&lt;/code&gt; to the signature:</source>
          <target state="translated">To make a more general purpose &lt;code&gt;AutoNumber&lt;/code&gt; , add &lt;code&gt;*args&lt;/code&gt; to the signature:</target>
        </trans-unit>
        <trans-unit id="1c14afdac812af227b88c86198941007cf0dd14f" translate="yes" xml:space="preserve">
          <source>To make a widget in Tk, the command is always of the form:</source>
          <target state="translated">Tk에서 위젯을 만들려면 명령은 항상 다음 형식입니다.</target>
        </trans-unit>
        <trans-unit id="417627c112a69f8b699c74dadfa73e7deb1493a2" translate="yes" xml:space="preserve">
          <source>To make it easier to specify the format of input and output records, specific formatting parameters are grouped together into dialects. A dialect is a subclass of the &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; class having a set of specific methods and a single &lt;code&gt;validate()&lt;/code&gt; method. When creating &lt;a href=&quot;#csv.reader&quot;&gt;&lt;code&gt;reader&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; objects, the programmer can specify a string or a subclass of the &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; class as the dialect parameter. In addition to, or instead of, the &lt;em&gt;dialect&lt;/em&gt; parameter, the programmer can also specify individual formatting parameters, which have the same names as the attributes defined below for the &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">입력 및 출력 레코드의 형식을보다 쉽게 ​​지정할 수 있도록 특정 형식화 매개 변수가 방언으로 그룹화됩니다. 방언은 특정 메소드 세트와 단일 &lt;code&gt;validate()&lt;/code&gt; 메소드를 갖는 &lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt; 클래스 의 서브 클래스입니다 . &lt;a href=&quot;#csv.reader&quot;&gt; &lt;code&gt;reader&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt; 객체를 작성할 때 프로그래머는 &lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt; 클래스 의 문자열 또는 서브 클래스를 dialect 매개 변수로 지정할 수 있습니다 . &lt;em&gt;방언&lt;/em&gt; 매개 변수 이외에 또는 대신에, 프로그래머는 &lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt; 클래스에 대해 아래 정의 된 속성과 동일한 이름을 가진 개별 형식 매개 변수를 지정할 수도 있습니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fb0b20d767110eb1725af8275114eae06d1e185d" translate="yes" xml:space="preserve">
          <source>To make the application directly executable on POSIX, specify an interpreter to use.</source>
          <target state="translated">POSIX에서 응용 프로그램을 직접 실행 가능하게하려면 사용할 인터프리터를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="3fca3ce87f48e2116a1eb0698d70c15c55057dc4" translate="yes" xml:space="preserve">
          <source>To make use of this reference material, there will be times when you will need to know how to read short passages of Tk and how to identify the various parts of a Tk command. (See section &lt;a href=&quot;#tkinter-basic-mapping&quot;&gt;Mapping Basic Tk into Tkinter&lt;/a&gt; for the &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; equivalents of what&amp;rsquo;s below.)</source>
          <target state="translated">이 참조 자료를 사용하려면 Tk의 짧은 구절을 읽는 방법과 Tk 명령의 다양한 부분을 식별하는 방법을 알아야 할 때가 있습니다. (아래 의 &lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; 에&lt;/a&gt; 해당하는 항목은 &lt;a href=&quot;#tkinter-basic-mapping&quot;&gt;Tkinter&lt;/a&gt; 에 기본 Tk 맵핑 섹션을 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="484e44f760bfbe435b83b25b84c0b182802fc132" translate="yes" xml:space="preserve">
          <source>To map anonymous memory, -1 should be passed as the fileno along with the length.</source>
          <target state="translated">익명 메모리를 맵핑하려면 길이와 함께 -1을 fileno로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="e2e1faf71792fd171bb7d18670aacf92d65ddab9" translate="yes" xml:space="preserve">
          <source>To match a literal &lt;code&gt;']'&lt;/code&gt; inside a set, precede it with a backslash, or place it at the beginning of the set. For example, both &lt;code&gt;[()[\]{}]&lt;/code&gt; and &lt;code&gt;[]()[{}]&lt;/code&gt; will both match a parenthesis.</source>
          <target state="translated">집합 내 에서 리터럴 &lt;code&gt;']'&lt;/code&gt; 을 일치 시키려면 백 슬래시를 앞에 두거나 집합의 시작 부분에 배치하십시오. 예를 들어 &lt;code&gt;[()[\]{}]&lt;/code&gt; 및 &lt;code&gt;[]()[{}]&lt;/code&gt; 은 모두 괄호와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="618708a8fc1d746e948f62210d44b1f5af8f8644" translate="yes" xml:space="preserve">
          <source>To measure the execution time of the first statement, use the &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;#timeit.Timer.repeat&quot;&gt;&lt;code&gt;repeat()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#timeit.Timer.autorange&quot;&gt;&lt;code&gt;autorange()&lt;/code&gt;&lt;/a&gt; methods are convenience methods to call &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; multiple times.</source>
          <target state="translated">첫 번째 문의 실행 시간을 측정하려면 &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오 . &lt;a href=&quot;#timeit.Timer.repeat&quot;&gt; &lt;code&gt;repeat()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#timeit.Timer.autorange&quot;&gt; &lt;code&gt;autorange()&lt;/code&gt; &lt;/a&gt; 메서드 호출에 편리한 메소드입니다 &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt; 를 여러 번.</target>
        </trans-unit>
        <trans-unit id="1877606d3808c148650a0894f86dec786878b4b9" translate="yes" xml:space="preserve">
          <source>To obtain a hexadecimal string representation for a float, use the &lt;a href=&quot;stdtypes#float.hex&quot;&gt;&lt;code&gt;float.hex()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">float에 대한 16 진 문자열 표현을 얻으려면 &lt;a href=&quot;stdtypes#float.hex&quot;&gt; &lt;code&gt;float.hex()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="61455195f543a7d8dd71efcc31b21d9861f799c4" translate="yes" xml:space="preserve">
          <source>To open the key, use the &lt;a href=&quot;#winreg.CreateKey&quot;&gt;&lt;code&gt;CreateKey()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#winreg.OpenKey&quot;&gt;&lt;code&gt;OpenKey()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">키를 열려면 &lt;a href=&quot;#winreg.CreateKey&quot;&gt; &lt;code&gt;CreateKey()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#winreg.OpenKey&quot;&gt; &lt;code&gt;OpenKey()&lt;/code&gt; &lt;/a&gt; 메서드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f456a6710b9e6585a204a095080c291aedbb463b" translate="yes" xml:space="preserve">
          <source>To override the basic Tk widgets, the import should follow the Tk import:</source>
          <target state="translated">기본 Tk 위젯을 대체하려면 가져 오기가 Tk 가져 오기를 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="bf838250004c5e59d72bbbdebbb5c5977c45e02d" translate="yes" xml:space="preserve">
          <source>To override the comparisons (presumably for speed, as the semantics are fixed), redefine &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt;, then the other operations will automatically follow suit.</source>
          <target state="translated">비교를 무시하고 (시맨틱이 고정 된 속도로 추정 될 수 있음) &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt; 재정의 하면 다른 작업이 자동으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="26c57cc65cd485fdca61260fb6b91eb1f51ff39b" translate="yes" xml:space="preserve">
          <source>To override the comparisons (presumably for speed, as the semantics are fixed), redefine &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt;, then the other operations will automatically follow suit.</source>
          <target state="translated">To override the comparisons (presumably for speed, as the semantics are fixed), redefine &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt;, then the other operations will automatically follow suit.</target>
        </trans-unit>
        <trans-unit id="e1904b2c6725763e667f2f07e78ab2eded89803e" translate="yes" xml:space="preserve">
          <source>To perform regression testing by verifying that interactive examples from a test file or a test object work as expected.</source>
          <target state="translated">테스트 파일 또는 테스트 개체의 대화 형 예제가 예상대로 작동하는지 확인하여 회귀 테스트를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="b46749e5ac61308154978bbff6f9776b88f8bb48" translate="yes" xml:space="preserve">
          <source>To pickle objects that have an external persistent ID, the pickler must have a custom &lt;a href=&quot;#pickle.Pickler.persistent_id&quot;&gt;&lt;code&gt;persistent_id()&lt;/code&gt;&lt;/a&gt; method that takes an object as an argument and returns either &lt;code&gt;None&lt;/code&gt; or the persistent ID for that object. When &lt;code&gt;None&lt;/code&gt; is returned, the pickler simply pickles the object as normal. When a persistent ID string is returned, the pickler will pickle that object, along with a marker so that the unpickler will recognize it as a persistent ID.</source>
          <target state="translated">외부 영구 ID가있는 객체를 피클하려면 피커 에 객체를 인수로 사용하고 해당 객체의 영구 ID를 &lt;code&gt;None&lt;/code&gt; 반환 하는 사용자 지정 persist_id &lt;a href=&quot;#pickle.Pickler.persistent_id&quot;&gt; &lt;code&gt;persistent_id()&lt;/code&gt; &lt;/a&gt; 메소드가 있어야합니다. 때 &lt;code&gt;None&lt;/code&gt; 반환되면, 피클 러는 단순히 정상으로 객체를 피클. 영구 ID 문자열이 반환되면 피커는 마커와 함께 해당 객체를 피클 링하여 피커가 영구 ID로 인식하도록합니다.</target>
        </trans-unit>
        <trans-unit id="464cddfc71cabb999b36dc4463a388c3b896939d" translate="yes" xml:space="preserve">
          <source>To post an article from a binary file (this assumes that the article has valid headers, and that you have right to post on the particular newsgroup):</source>
          <target state="translated">이진 파일에서 기사를 게시하려면 (기사에 유효한 헤더가 있고 특정 뉴스 그룹에 게시 할 권한이 있다고 가정) :</target>
        </trans-unit>
        <trans-unit id="3ea7701325362cf111507ae07ad956de8d76b901" translate="yes" xml:space="preserve">
          <source>To prevent the DocTestFinder from extracting DocTests from objects that are imported from other modules. (Contained objects with modules other than &lt;em&gt;module&lt;/em&gt; are ignored.)</source>
          <target state="translated">DocTestFinder가 다른 모듈에서 가져온 오브젝트에서 DocTest를 추출하지 못하게합니다. (모듈 이외의 &lt;em&gt;모듈&lt;/em&gt; 이 포함 된 객체 는 무시됩니다.)</target>
        </trans-unit>
        <trans-unit id="75ce79c23ae1627c624827192c59627f01d4d32c" translate="yes" xml:space="preserve">
          <source>To process this file, load it as usual, and pass the root element to the &lt;a href=&quot;#module-xml.etree.ElementTree&quot;&gt;&lt;code&gt;xml.etree.ElementTree&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">이 파일을 처리하려면 평상시처럼 파일을로드하고 루트 요소를 &lt;a href=&quot;#module-xml.etree.ElementTree&quot;&gt; &lt;code&gt;xml.etree.ElementTree&lt;/code&gt; &lt;/a&gt; 모듈에 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="0378c517bb3f44a4de23c24714950e30345fceb7" translate="yes" xml:space="preserve">
          <source>To profile a function that takes a single argument, you can do:</source>
          <target state="translated">단일 인수를 취하는 함수를 프로파일 링하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="5449841f06bad5a2670dfafc51300c84788e53c9" translate="yes" xml:space="preserve">
          <source>To programmatically import a module, use &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">프로그래밍 방식으로 모듈을 가져 오려면 &lt;a href=&quot;#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="235b35cc854fb6c40fcb5bc32127ed15360a7207" translate="yes" xml:space="preserve">
          <source>To reduce interpreter startup overhead, the Win32 &lt;code&gt;ShellExecute()&lt;/code&gt; function is not resolved until this function is first called. If the function cannot be resolved, &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/a&gt; will be raised.</source>
          <target state="translated">인터프리터 시작 오버 헤드를 줄이기 위해이 함수가 처음 호출 될 때까지 Win32 &lt;code&gt;ShellExecute()&lt;/code&gt; 함수가 해결되지 않습니다. 함수를 해결할 수 없으면 &lt;a href=&quot;exceptions#NotImplementedError&quot;&gt; &lt;code&gt;NotImplementedError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3f671170832a277ad19c6673cec3b9e9d7f73479" translate="yes" xml:space="preserve">
          <source>To remove a &lt;code&gt;side_effect&lt;/code&gt;, and return to the default behaviour, set the &lt;code&gt;side_effect&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;side_effect&lt;/code&gt; 를 제거 하고 기본 동작으로 돌아가려면 &lt;code&gt;side_effect&lt;/code&gt; 를 &lt;code&gt;None&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="c0a6df24f5dba94f71f5eb8abe853277fe5f8b69" translate="yes" xml:space="preserve">
          <source>To remove a collation, call &lt;code&gt;create_collation&lt;/code&gt; with &lt;code&gt;None&lt;/code&gt; as callable:</source>
          <target state="translated">데이터 정렬을 제거하려면 호출 가능 으로 &lt;code&gt;None&lt;/code&gt; 하여 &lt;code&gt;create_collation&lt;/code&gt; 을 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="deb986b44a469cfc418c4db889efbebd3d498e8b" translate="yes" xml:space="preserve">
          <source>To remove all commands from a breakpoint, type &lt;code&gt;commands&lt;/code&gt; and follow it immediately with &lt;code&gt;end&lt;/code&gt;; that is, give no commands.</source>
          <target state="translated">, 중단 점에서 모든 명령을 제거 입력합니다 &lt;code&gt;commands&lt;/code&gt; 과 함께 즉시 따라 &lt;code&gt;end&lt;/code&gt; ; 즉, 명령을 내리지 마십시오.</target>
        </trans-unit>
        <trans-unit id="d3e77a28a57d567fcb960445b706ccb578026b25" translate="yes" xml:space="preserve">
          <source>To replace the shebang line on an existing archive, create a modified archive using the &lt;a href=&quot;#zipapp.create_archive&quot;&gt;&lt;code&gt;create_archive()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">기존 아카이브에서 shebang 행을 바꾸려면 &lt;a href=&quot;#zipapp.create_archive&quot;&gt; &lt;code&gt;create_archive()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 수정 된 아카이브를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="a0fb9eb465366c5feaf1e2c7608a6a11085a2ed6" translate="yes" xml:space="preserve">
          <source>To retrieve a field whose name is stored in a string, use the &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">이름이 문자열에 저장된 필드를 검색하려면 &lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f5192f40799a0b5249f8f65a07b092775843f9c" translate="yes" xml:space="preserve">
          <source>To retrieve data after executing a SELECT statement, you can either treat the cursor as an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;, call the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt;&lt;code&gt;fetchone()&lt;/code&gt;&lt;/a&gt; method to retrieve a single matching row, or call &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt;&lt;code&gt;fetchall()&lt;/code&gt;&lt;/a&gt; to get a list of the matching rows.</source>
          <target state="translated">SELECT 문을 실행 한 후 데이터를 검색하려면 커서를 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterator&quot;&gt;반복자&lt;/a&gt; 로 취급하거나 커서의 &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt; &lt;code&gt;fetchone()&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 일치하는 단일 행을 검색하거나 &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt; &lt;code&gt;fetchall()&lt;/code&gt; &lt;/a&gt; 을 호출 하여 일치하는 행의 목록을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c1ea8cf4d7e5a8411a92698b71e9192fbc3224c" translate="yes" xml:space="preserve">
          <source>To retrieve data after executing a SELECT statement, you can either treat the cursor as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;, call the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt;&lt;code&gt;fetchone()&lt;/code&gt;&lt;/a&gt; method to retrieve a single matching row, or call &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt;&lt;code&gt;fetchall()&lt;/code&gt;&lt;/a&gt; to get a list of the matching rows.</source>
          <target state="translated">To retrieve data after executing a SELECT statement, you can either treat the cursor as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterator&quot;&gt;iterator&lt;/a&gt;, call the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.fetchone&quot;&gt; &lt;code&gt;fetchone()&lt;/code&gt; &lt;/a&gt; method to retrieve a single matching row, or call &lt;a href=&quot;#sqlite3.Cursor.fetchall&quot;&gt; &lt;code&gt;fetchall()&lt;/code&gt; &lt;/a&gt; to get a list of the matching rows.</target>
        </trans-unit>
        <trans-unit id="fa0d39041d8f8095fbf0fa33c3d912798a2630dc" translate="yes" xml:space="preserve">
          <source>To reverse this encoding process, &lt;a href=&quot;#urllib.parse.parse_qs&quot;&gt;&lt;code&gt;parse_qs()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.parse_qsl&quot;&gt;&lt;code&gt;parse_qsl()&lt;/code&gt;&lt;/a&gt; are provided in this module to parse query strings into Python data structures.</source>
          <target state="translated">이 인코딩 프로세스를 취소하기 위해이 모듈에는 &lt;a href=&quot;#urllib.parse.parse_qs&quot;&gt; &lt;code&gt;parse_qs()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#urllib.parse.parse_qsl&quot;&gt; &lt;code&gt;parse_qsl()&lt;/code&gt; &lt;/a&gt; 이 제공되어 쿼리 문자열을 Python 데이터 구조로 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="95afd35e46114bc381b797d3696a69c9479e1723" translate="yes" xml:space="preserve">
          <source>To schedule a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-callback&quot;&gt;callback&lt;/a&gt; from another OS thread, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt;&lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt;&lt;/a&gt; method should be used. Example:</source>
          <target state="translated">To schedule a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-callback&quot;&gt;callback&lt;/a&gt; from another OS thread, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt; &lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt; &lt;/a&gt; method should be used. Example:</target>
        </trans-unit>
        <trans-unit id="46f1ad4c5c8298c7c978bfa9952bc941076ec95b" translate="yes" xml:space="preserve">
          <source>To schedule a callback from a different OS thread, the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt;&lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt;&lt;/a&gt; method should be used. Example:</source>
          <target state="translated">다른 OS 스레드에서 콜백을 예약하려면 &lt;a href=&quot;asyncio-eventloop#asyncio.loop.call_soon_threadsafe&quot;&gt; &lt;code&gt;loop.call_soon_threadsafe()&lt;/code&gt; &lt;/a&gt; 메서드를 사용해야합니다. 예:</target>
        </trans-unit>
        <trans-unit id="8f0884ec1f5594a6a040aa5eeeff821ee386f563" translate="yes" xml:space="preserve">
          <source>To schedule a coroutine object from a different OS thread, the &lt;a href=&quot;asyncio-task#asyncio.run_coroutine_threadsafe&quot;&gt;&lt;code&gt;run_coroutine_threadsafe()&lt;/code&gt;&lt;/a&gt; function should be used. It returns a &lt;a href=&quot;concurrent.futures#concurrent.futures.Future&quot;&gt;&lt;code&gt;concurrent.futures.Future&lt;/code&gt;&lt;/a&gt; to access the result:</source>
          <target state="translated">다른 OS 스레드에서 코 루틴 오브젝트를 스케줄하려면 &lt;a href=&quot;asyncio-task#asyncio.run_coroutine_threadsafe&quot;&gt; &lt;code&gt;run_coroutine_threadsafe()&lt;/code&gt; &lt;/a&gt; 함수를 사용해야합니다. 결과에 액세스하기 위해 &lt;a href=&quot;concurrent.futures#concurrent.futures.Future&quot;&gt; &lt;code&gt;concurrent.futures.Future&lt;/code&gt; &lt;/a&gt; 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="1f6627de8dbbc9c12a86f34fd1b5fe034f34a62d" translate="yes" xml:space="preserve">
          <source>To see if a given string is a valid hand, one could do the following:</source>
          <target state="translated">주어진 문자열이 유효한 핸드인지 확인하기 위해 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0943fae7c35b5498e405be59003cb18933c3cc3" translate="yes" xml:space="preserve">
          <source>To select a start method you use the &lt;a href=&quot;#multiprocessing.set_start_method&quot;&gt;&lt;code&gt;set_start_method()&lt;/code&gt;&lt;/a&gt; in the &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; clause of the main module. For example:</source>
          <target state="translated">시작 메소드를 선택하려면 기본 모듈 의 &lt;code&gt;if __name__ == '__main__'&lt;/code&gt; 절 에서 &lt;a href=&quot;#multiprocessing.set_start_method&quot;&gt; &lt;code&gt;set_start_method()&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b599b4912ffb321a32eeeee3be0d641b6372a13" translate="yes" xml:space="preserve">
          <source>To send a configuration to the socket, read in the configuration file and send it to the socket as a sequence of bytes preceded by a four-byte length string packed in binary using &lt;code&gt;struct.pack('&amp;gt;L', n)&lt;/code&gt;.</source>
          <target state="translated">소켓에 구성을 보내려면 구성 파일을 읽고 &lt;code&gt;struct.pack('&amp;gt;L', n)&lt;/code&gt; 사용하여 2 진으로 압축 된 4 바이트 길이 문자열이 앞에 오는 일련의 바이트 순서로 소켓에 전송하십시오 .</target>
        </trans-unit>
        <trans-unit id="10c9c2df671deeca1fe90d00e167dfed20eaa838" translate="yes" xml:space="preserve">
          <source>To send the output of &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; to &lt;em&gt;sys.stderr&lt;/em&gt;:</source>
          <target state="translated">&lt;a href=&quot;functions#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; &lt;/a&gt; 의 출력 을 &lt;em&gt;sys.stderr로&lt;/em&gt; 보내려면 :</target>
        </trans-unit>
        <trans-unit id="368af95afe3dde84ad97245ab11827291359580c" translate="yes" xml:space="preserve">
          <source>To send the output of &lt;a href=&quot;functions#help&quot;&gt;&lt;code&gt;help()&lt;/code&gt;&lt;/a&gt; to a file on disk, redirect the output to a regular file:</source>
          <target state="translated">&lt;a href=&quot;functions#help&quot;&gt; &lt;code&gt;help()&lt;/code&gt; &lt;/a&gt; 의 출력을 디스크의 파일로 보내려면 출력을 일반 파일로 경로 재 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="760c34de5354bcacaf1f6c0b875ba4fca40a85c7" translate="yes" xml:space="preserve">
          <source>To serialize an object hierarchy, you simply call the &lt;a href=&quot;#pickle.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; function. Similarly, to de-serialize a data stream, you call the &lt;a href=&quot;#pickle.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt; function. However, if you want more control over serialization and de-serialization, you can create a &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;#pickle.Unpickler&quot;&gt;&lt;code&gt;Unpickler&lt;/code&gt;&lt;/a&gt; object, respectively.</source>
          <target state="translated">객체 계층을 직렬화하려면 단순히 &lt;a href=&quot;#pickle.dumps&quot;&gt; &lt;code&gt;dumps()&lt;/code&gt; &lt;/a&gt; 함수 를 호출하면 됩니다. 마찬가지로 데이터 스트림을 직렬화 해제하려면 &lt;a href=&quot;#pickle.loads&quot;&gt; &lt;code&gt;loads()&lt;/code&gt; &lt;/a&gt; 함수 를 호출합니다 . 그러나 직렬화 및 역 직렬화를보다 세밀하게 제어하려면 &lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#pickle.Unpickler&quot;&gt; &lt;code&gt;Unpickler&lt;/code&gt; &lt;/a&gt; 객체를 각각 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a02536d7456d8606cd89506bca4a517540363eb4" translate="yes" xml:space="preserve">
          <source>To set a POINTER type field to &lt;code&gt;NULL&lt;/code&gt;, you can assign &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">POINTER 타입 필드를 &lt;code&gt;NULL&lt;/code&gt; 로 설정하기 위해 &lt;code&gt;None&lt;/code&gt; 을 할당 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="096472e03fc776b0c758257a75507213a0525c42" translate="yes" xml:space="preserve">
          <source>To set the system to ignore the system data and use the tzdata package instead, set &lt;code&gt;PYTHONTZPATH=&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">To set the system to ignore the system data and use the tzdata package instead, set &lt;code&gt;PYTHONTZPATH=&quot;&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94089b856a9740ad3b8dc05c41cca98f65149300" translate="yes" xml:space="preserve">
          <source>To show the individual process IDs involved, here is an expanded example:</source>
          <target state="translated">관련된 개별 프로세스 ID를 보여주기 위해 확장 된 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0c86f19a38fdf4f3f2888e7254bd241904a08f10" translate="yes" xml:space="preserve">
          <source>To shuffle an immutable sequence and return a new shuffled list, use &lt;code&gt;sample(x, k=len(x))&lt;/code&gt; instead.</source>
          <target state="translated">불변 시퀀스를 섞고 새로운 셔플 목록을 반환하려면 &lt;code&gt;sample(x, k=len(x))&lt;/code&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ad3933308c92befa869f265838a9e8cdec721d4d" translate="yes" xml:space="preserve">
          <source>To simplify access to the various codec components, the module provides these additional functions which use &lt;a href=&quot;#codecs.lookup&quot;&gt;&lt;code&gt;lookup()&lt;/code&gt;&lt;/a&gt; for the codec lookup:</source>
          <target state="translated">다양한 코덱 구성 요소에 대한 액세스를 단순화하기 위해이 모듈은 코덱 조회에 &lt;a href=&quot;#codecs.lookup&quot;&gt; &lt;code&gt;lookup()&lt;/code&gt; &lt;/a&gt; 을 사용하는 다음과 같은 추가 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="7aabdf8b0670313243d3ad3253be2cbd8d7f5c13" translate="yes" xml:space="preserve">
          <source>To simplify and standardize error handling, codecs may implement different error handling schemes by accepting the &lt;em&gt;errors&lt;/em&gt; string argument. The following string values are defined and implemented by all standard Python codecs:</source>
          <target state="translated">오류 처리를 단순화하고 표준화하기 위해 코덱은 &lt;em&gt;errors&lt;/em&gt; 문자열 인수를 수락하여 다른 오류 처리 체계를 구현할 수 있습니다 . 다음 문자열 값은 모든 표준 Python 코덱에서 정의 및 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="0a8769fc8be4940cb808b1153502d24a60ed8f26" translate="yes" xml:space="preserve">
          <source>To simplify token stream handling, all &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#operators&quot;&gt;operator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#delimiters&quot;&gt;delimiter&lt;/a&gt; tokens and &lt;a href=&quot;constants#Ellipsis&quot;&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/a&gt; are returned using the generic &lt;a href=&quot;token#token.OP&quot;&gt;&lt;code&gt;OP&lt;/code&gt;&lt;/a&gt; token type. The exact type can be determined by checking the &lt;code&gt;exact_type&lt;/code&gt; property on the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; returned from &lt;a href=&quot;#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize.tokenize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">토큰 스트림 처리를 단순화하기 위해 모든 &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#operators&quot;&gt;연산자&lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#delimiters&quot;&gt;구분 기호&lt;/a&gt; 토큰과 &lt;a href=&quot;constants#Ellipsis&quot;&gt; &lt;code&gt;Ellipsis&lt;/code&gt; &lt;/a&gt; 는 일반 &lt;a href=&quot;token#token.OP&quot;&gt; &lt;code&gt;OP&lt;/code&gt; &lt;/a&gt; 토큰 유형을 사용하여 반환됩니다 . 정확한 유형은 &lt;a href=&quot;#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize.tokenize()&lt;/code&gt; &lt;/a&gt; 에서 반환 된 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-named-tuple&quot;&gt;명명 된 튜플&lt;/a&gt; 의 &lt;code&gt;exact_type&lt;/code&gt; 속성을 확인하여 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea672bbb45b01e2318383dead50026a12f2d14f6" translate="yes" xml:space="preserve">
          <source>To simplify token stream handling, all &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#operators&quot;&gt;operator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#delimiters&quot;&gt;delimiter&lt;/a&gt; tokens and &lt;a href=&quot;constants#Ellipsis&quot;&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/a&gt; are returned using the generic &lt;a href=&quot;token#token.OP&quot;&gt;&lt;code&gt;OP&lt;/code&gt;&lt;/a&gt; token type. The exact type can be determined by checking the &lt;code&gt;exact_type&lt;/code&gt; property on the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; returned from &lt;a href=&quot;#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize.tokenize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To simplify token stream handling, all &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#operators&quot;&gt;operator&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#delimiters&quot;&gt;delimiter&lt;/a&gt; tokens and &lt;a href=&quot;constants#Ellipsis&quot;&gt; &lt;code&gt;Ellipsis&lt;/code&gt; &lt;/a&gt; are returned using the generic &lt;a href=&quot;token#token.OP&quot;&gt; &lt;code&gt;OP&lt;/code&gt; &lt;/a&gt; token type. The exact type can be determined by checking the &lt;code&gt;exact_type&lt;/code&gt; property on the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-named-tuple&quot;&gt;named tuple&lt;/a&gt; returned from &lt;a href=&quot;#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize.tokenize()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c99360216ba373c1bc65a90076c1777659e276a7" translate="yes" xml:space="preserve">
          <source>To specify a variable-length tuple of homogeneous type, use literal ellipsis, e.g. &lt;code&gt;Tuple[int, ...]&lt;/code&gt;. A plain &lt;a href=&quot;#typing.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;code&gt;Tuple[Any, ...]&lt;/code&gt;, and in turn to &lt;a href=&quot;stdtypes#tuple&quot;&gt;&lt;code&gt;tuple&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">동종 유형의 가변 길이 튜플을 지정하려면 리터럴 줄임표 (예 : &lt;code&gt;Tuple[int, ...]&lt;/code&gt; . 일반 &lt;a href=&quot;#typing.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt; 은 &lt;code&gt;Tuple[Any, ...]&lt;/code&gt; 과 동일하며 &lt;a href=&quot;stdtypes#tuple&quot;&gt; &lt;code&gt;tuple&lt;/code&gt; 과 동일&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="b814a7a26e755324d50e482a1e951755b0c61cc2" translate="yes" xml:space="preserve">
          <source>To specify the use of a secure protocol (TLS), pass in a tuple to the &lt;em&gt;secure&lt;/em&gt; argument. This will only be used when authentication credentials are supplied. The tuple should be either an empty tuple, or a single-value tuple with the name of a keyfile, or a 2-value tuple with the names of the keyfile and certificate file. (This tuple is passed to the &lt;a href=&quot;smtplib#smtplib.SMTP.starttls&quot;&gt;&lt;code&gt;smtplib.SMTP.starttls()&lt;/code&gt;&lt;/a&gt; method.)</source>
          <target state="translated">보안 프로토콜 (TLS) 사용을 지정하려면 튜플을 &lt;em&gt;보안&lt;/em&gt; 인수로 전달하십시오. 인증 자격 증명이 제공 될 때만 사용됩니다. 튜플은 빈 튜플이거나 키 파일 이름을 가진 단일 값 튜플이거나 키 파일 및 인증서 파일 이름을 가진 2 값 튜플이어야합니다. 이 튜플은 &lt;a href=&quot;smtplib#smtplib.SMTP.starttls&quot;&gt; &lt;code&gt;smtplib.SMTP.starttls()&lt;/code&gt; &lt;/a&gt; 메소드로 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="d5b3104139b01eeac04cf9e042a54bbc4242a857" translate="yes" xml:space="preserve">
          <source>To start using Ttk, import its module:</source>
          <target state="translated">Ttk 사용을 시작하려면 해당 모듈을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="51c216987f5aa2dbd2061c95ac950a3b4802975d" translate="yes" xml:space="preserve">
          <source>To summarize the interface (&lt;code&gt;key&lt;/code&gt; is a string, &lt;code&gt;data&lt;/code&gt; is an arbitrary object):</source>
          <target state="translated">인터페이스를 요약하려면 ( &lt;code&gt;key&lt;/code&gt; 는 문자열이고 &lt;code&gt;data&lt;/code&gt; 는 임의의 개체입니다) :</target>
        </trans-unit>
        <trans-unit id="00362506e0ca02815d8f1fdbc1235c68ab4941ab" translate="yes" xml:space="preserve">
          <source>To support SMTP (&lt;a href=&quot;https://tools.ietf.org/html/rfc5321.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 5321&lt;/strong&gt;&lt;/a&gt;), &lt;code&gt;Address&lt;/code&gt; handles one special case: if &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;domain&lt;/code&gt; are both the empty string (or &lt;code&gt;None&lt;/code&gt;), then the string value of the &lt;code&gt;Address&lt;/code&gt; is &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">SMTP ( &lt;a href=&quot;https://tools.ietf.org/html/rfc5321.html&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;RFC 5321&lt;/strong&gt;&lt;/a&gt; ) 를 지원하기 위해 &lt;code&gt;Address&lt;/code&gt; 는 하나의 특별한 경우를 처리합니다. &lt;code&gt;username&lt;/code&gt; 과 &lt;code&gt;domain&lt;/code&gt; 이 모두 빈 문자열 (또는 &lt;code&gt;None&lt;/code&gt; )이면 &lt;code&gt;Address&lt;/code&gt; 의 문자열 값 은 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c4d801175c02a7134e5a67b972b015f82efd457d" translate="yes" xml:space="preserve">
          <source>To support a wide variety of use cases, the &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; constructor (and the convenience functions) accept a large number of optional arguments. For most typical use cases, many of these arguments can be safely left at their default values. The arguments that are most commonly needed are:</source>
          <target state="translated">다양한 사용 사례를 지원하기 위해 &lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt; 생성자 (및 편의 함수)는 많은 선택적 인수를 허용합니다. 가장 일반적인 사용 사례의 경우 이러한 인수 중 많은 부분을 기본값으로 안전하게 유지할 수 있습니다. 가장 일반적으로 필요한 인수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7b9ef99554dda06486dfe4f9aad3a9b5884ad664" translate="yes" xml:space="preserve">
          <source>To support easier conversion of result objects between &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;, all return values from URL parsing functions provide either an &lt;code&gt;encode()&lt;/code&gt; method (when the result contains &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data) or a &lt;code&gt;decode()&lt;/code&gt; method (when the result contains &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; data). The signatures of these methods match those of the corresponding &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; methods (except that the default encoding is &lt;code&gt;'ascii'&lt;/code&gt; rather than &lt;code&gt;'utf-8'&lt;/code&gt;). Each produces a value of a corresponding type that contains either &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; data (for &lt;code&gt;encode()&lt;/code&gt; methods) or &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data (for &lt;code&gt;decode()&lt;/code&gt; methods).</source>
          <target state="translated">&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 사이에서 결과 객체를 쉽게 변환 할 수 있도록 URL 구문 분석 함수의 모든 리턴 값은 &lt;code&gt;encode()&lt;/code&gt; 메소드 (결과에 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 데이터 가 포함 된 경우 ) 또는 &lt;code&gt;decode()&lt;/code&gt; 메소드 (결과에 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 데이터 가 포함 된 경우 )를 제공합니다. 이러한 메소드의 서명은 해당 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 메소드 의 서명과 일치 합니다 (기본 인코딩이 &lt;code&gt;'utf-8'&lt;/code&gt; 대신 &lt;code&gt;'ascii'&lt;/code&gt; 인 경우 제외 ). 각각은 &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 데이터 ( &lt;code&gt;encode()&lt;/code&gt; 메소드의 경우) 또는 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; 을 포함하는 해당 유형의 값을 생성합니다.데이터 ( &lt;code&gt;decode()&lt;/code&gt; 메소드의 경우).</target>
        </trans-unit>
        <trans-unit id="8faa414aa237c45d91492c0790eb5c1446c7200f" translate="yes" xml:space="preserve">
          <source>To support more specific error reporting from class constructors, the module defines the following exceptions:</source>
          <target state="translated">클래스 생성자의보다 구체적인 오류보고를 지원하기 위해 모듈은 다음 예외를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="c16d8b4d0edbd20bc5f883f1830e6a64819d7f59" translate="yes" xml:space="preserve">
          <source>To suppress stdout or stderr, supply a value of &lt;a href=&quot;#subprocess.DEVNULL&quot;&gt;&lt;code&gt;DEVNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">stdout 또는 stderr을 억제하려면 &lt;a href=&quot;#subprocess.DEVNULL&quot;&gt; &lt;code&gt;DEVNULL&lt;/code&gt; &lt;/a&gt; 값을 제공 하십시오 .</target>
        </trans-unit>
        <trans-unit id="93fe155fd74b1d1e9076d9feef1c801042fda3b0" translate="yes" xml:space="preserve">
          <source>To test for the presence of SSL support in a Python installation, user code should use the following idiom:</source>
          <target state="translated">Python 설치에서 SSL 지원이 있는지 테스트하려면 사용자 코드에서 다음 관용구를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="ad05b0e475f3d0aee3f7e6301c1f32c33536da4a" translate="yes" xml:space="preserve">
          <source>To test warnings raised by code, use the &lt;a href=&quot;#warnings.catch_warnings&quot;&gt;&lt;code&gt;catch_warnings&lt;/code&gt;&lt;/a&gt; context manager. With it you can temporarily mutate the warnings filter to facilitate your testing. For instance, do the following to capture all raised warnings to check:</source>
          <target state="translated">코드로 발생한 경고를 테스트하려면 &lt;a href=&quot;#warnings.catch_warnings&quot;&gt; &lt;code&gt;catch_warnings&lt;/code&gt; &lt;/a&gt; 컨텍스트 관리자를 사용하십시오 . 이를 통해 경고 필터를 일시적으로 변경하여 테스트를 용이하게 할 수 있습니다. 예를 들어, 제기 된 모든 경고를 캡처하여 확인하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="10561bf3f9f3d0097e11aeeaa24a8823dff2df5a" translate="yes" xml:space="preserve">
          <source>To the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.</source>
          <target state="translated">법률에 따라 가능한 범위 내에서 저자 (들)는이 소프트웨어에 대한 모든 저작권 및 관련 권리를 전 세계의 퍼블릭 도메인에 전념했습니다. 이 소프트웨어는 보증없이 배포됩니다.</target>
        </trans-unit>
        <trans-unit id="b957c8b22524d7f45637f1438f30d19ffc30d3b7" translate="yes" xml:space="preserve">
          <source>To trace most memory blocks allocated by Python, the module should be started as early as possible by setting the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt;, or by using &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc&lt;/code&gt; command line option. The &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;tracemalloc.start()&lt;/code&gt;&lt;/a&gt; function can be called at runtime to start tracing Python memory allocations.</source>
          <target state="translated">Python에 의해 할당 된 대부분의 메모리 블록을 추적하려면 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt; 환경 변수를 &lt;code&gt;1&lt;/code&gt; 로 설정 하거나 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc&lt;/code&gt; 명령 행 옵션 을 사용하여 모듈을 가능한 빨리 시작해야합니다 . &lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;tracemalloc.start()&lt;/code&gt; &lt;/a&gt; 함수는 파이썬 메모리 할당을 추적을 시작하기 위해 런타임에 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="400cf417dbbda3fb20aee227a05f8104ab61b0ba" translate="yes" xml:space="preserve">
          <source>To trace most memory blocks allocated by Python, the module should be started as early as possible by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt;, or by using &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc&lt;/code&gt; command line option. The &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;tracemalloc.start()&lt;/code&gt;&lt;/a&gt; function can be called at runtime to start tracing Python memory allocations.</source>
          <target state="translated">To trace most memory blocks allocated by Python, the module should be started as early as possible by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt; , or by using &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc&lt;/code&gt; command line option. The &lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;tracemalloc.start()&lt;/code&gt; &lt;/a&gt; function can be called at runtime to start tracing Python memory allocations.</target>
        </trans-unit>
        <trans-unit id="ff0166cdb02b5e12ebef3a005fdba865bacd0e2c" translate="yes" xml:space="preserve">
          <source>To translate a numeric error code to an error message, use &lt;a href=&quot;os#os.strerror&quot;&gt;&lt;code&gt;os.strerror()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">숫자 오류 코드를 오류 메시지로 변환하려면 &lt;a href=&quot;os#os.strerror&quot;&gt; &lt;code&gt;os.strerror()&lt;/code&gt; &lt;/a&gt; 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="edd9ff074077e2c43f498ff1fbd6b93370923415" translate="yes" xml:space="preserve">
          <source>To understand the format, see the following example (it is not intended to do anything useful):</source>
          <target state="translated">형식을 이해하려면 다음 예를 참조하십시오 (유용한 것은 아닙니다).</target>
        </trans-unit>
        <trans-unit id="2ee0a4c14f5a2b2eff92e0263151ad18d468b505" translate="yes" xml:space="preserve">
          <source>To unpickle external objects, the unpickler must have a custom &lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt;&lt;code&gt;persistent_load()&lt;/code&gt;&lt;/a&gt; method that takes a persistent ID object and returns the referenced object.</source>
          <target state="translated">외부 객체를 피클 링 해제하려면 언 피커 에 영구 ID 객체를 가져와 참조 된 객체를 반환 하는 사용자 지정 persist_load &lt;a href=&quot;#pickle.Unpickler.persistent_load&quot;&gt; &lt;code&gt;persistent_load()&lt;/code&gt; &lt;/a&gt; 메소드가 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="a889b3e0dad6034036148442c4d89cb44da6c12c" translate="yes" xml:space="preserve">
          <source>To update the file in place, do the replacement in memory using a &lt;code&gt;BytesIO&lt;/code&gt; object, and then overwrite the source afterwards. Note that there is a risk when overwriting a file in place that an error will result in the loss of the original file. This code does not protect against such errors, but production code should do so. Also, this method will only work if the archive fits in memory:</source>
          <target state="translated">파일을 제자리에 업데이트하려면 &lt;code&gt;BytesIO&lt;/code&gt; 개체를 사용하여 메모리를 교체 한 다음 나중에 소스를 덮어 씁니다. 파일을 덮어 쓰면 오류로 인해 원본 파일이 손실 될 위험이 있습니다. 이 코드는 이러한 오류를 방지하지는 않지만 프로덕션 코드는이를 방지해야합니다. 또한이 방법은 아카이브가 메모리에 맞는 경우에만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="20049dbc724846c3441fcf908b5e5814f37f9291" translate="yes" xml:space="preserve">
          <source>To use &lt;a href=&quot;#module-tkinter.tix&quot;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;&lt;/a&gt;, you must have the Tix widgets installed, usually alongside your installation of the Tk widgets. To test your installation, try the following:</source>
          <target state="translated">&lt;a href=&quot;#module-tkinter.tix&quot;&gt; &lt;code&gt;tkinter.tix&lt;/code&gt; &lt;/a&gt; 를 사용하려면 일반적으로 Tk 위젯 설치와 함께 Tix 위젯이 설치되어 있어야합니다. 설치를 테스트하려면 다음을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="c80b24bc87319ccdb03a02574403ef35e2701467" translate="yes" xml:space="preserve">
          <source>To use a custom &lt;a href=&quot;#json.JSONDecoder&quot;&gt;&lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/a&gt; subclass, specify it with the &lt;code&gt;cls&lt;/code&gt; kwarg; otherwise &lt;a href=&quot;#json.JSONDecoder&quot;&gt;&lt;code&gt;JSONDecoder&lt;/code&gt;&lt;/a&gt; is used. Additional keyword arguments will be passed to the constructor of the class.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;#json.JSONDecoder&quot;&gt; &lt;code&gt;JSONDecoder&lt;/code&gt; &lt;/a&gt; 서브 클래스 를 사용하려면 &lt;code&gt;cls&lt;/code&gt; kwarg로이를 지정하십시오 . 그렇지 않으면 &lt;a href=&quot;#json.JSONDecoder&quot;&gt; &lt;code&gt;JSONDecoder&lt;/code&gt; &lt;/a&gt; 가 사용됩니다. 추가 키워드 인수가 클래스 생성자에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="a97a53a9d579579b044ea3cdec56452a32f4bec6" translate="yes" xml:space="preserve">
          <source>To use a custom &lt;a href=&quot;#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt; subclass (e.g. one that overrides the &lt;code&gt;default()&lt;/code&gt; method to serialize additional types), specify it with the &lt;em&gt;cls&lt;/em&gt; kwarg; otherwise &lt;a href=&quot;#json.JSONEncoder&quot;&gt;&lt;code&gt;JSONEncoder&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;#json.JSONEncoder&quot;&gt; &lt;code&gt;JSONEncoder&lt;/code&gt; &lt;/a&gt; 서브 클래스 (예 : 추가 유형을 직렬화하기 위해 &lt;code&gt;default()&lt;/code&gt; 메소드를 대체하는 서브 클래스 )를 사용하려면 &lt;em&gt;cls&lt;/em&gt; kwarg로이를 지정하십시오 . 그렇지 않으면 &lt;a href=&quot;#json.JSONEncoder&quot;&gt; &lt;code&gt;JSONEncoder&lt;/code&gt; &lt;/a&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="38ce15cd49858ae2aef9bf6dd093452e9c81953e" translate="yes" xml:space="preserve">
          <source>To use a custom SMTPChannel implementation you need to override the &lt;a href=&quot;#smtpd.SMTPServer.channel_class&quot;&gt;&lt;code&gt;SMTPServer.channel_class&lt;/code&gt;&lt;/a&gt; of your &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt;&lt;code&gt;SMTPServer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 정의 SMTPChannel 구현을 사용하려면 당신은 오버라이드 (override) 할 필요가 &lt;a href=&quot;#smtpd.SMTPServer.channel_class&quot;&gt; &lt;code&gt;SMTPServer.channel_class&lt;/code&gt; &lt;/a&gt; 당신의 &lt;a href=&quot;#smtpd.SMTPServer&quot;&gt; &lt;code&gt;SMTPServer&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d50f707cfc603f844f47e754486a7e1138485664" translate="yes" xml:space="preserve">
          <source>To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class &lt;a href=&quot;#turtle.Shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; explicitly as described below:</source>
          <target state="translated">색상이 다른 여러 다각형으로 구성된 복합 거북이 모양을 사용하려면 아래 설명 된대로 도우미 클래스 &lt;a href=&quot;#turtle.Shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; 명시 적으로 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c1ba519887a8ab65c40b47b31ca3ead5d8a9aff8" translate="yes" xml:space="preserve">
          <source>To use multiple turtles on a screen one has to use the object-oriented interface.</source>
          <target state="translated">화면에 여러 거북이를 사용하려면 객체 지향 인터페이스를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b992ab6d688ed006c9a1f3c48e6d6442838b0dd7" translate="yes" xml:space="preserve">
          <source>To use the module, you must first create a &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object that represents the database. Here the data will be stored in the &lt;code&gt;example.db&lt;/code&gt; file:</source>
          <target state="translated">모듈을 사용하려면 먼저 데이터베이스를 나타내는 &lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 객체를 작성해야 합니다. 여기에 데이터가 &lt;code&gt;example.db&lt;/code&gt; 파일에 저장 됩니다.</target>
        </trans-unit>
        <trans-unit id="135aae4c52ce4b15c7c009fef1b0ca569c8aa602" translate="yes" xml:space="preserve">
          <source>To use them call &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt;&lt;code&gt;patch.dict()&lt;/code&gt;&lt;/a&gt; as normal and keep a reference to the returned &lt;code&gt;patcher&lt;/code&gt; object. You can then call &lt;code&gt;start()&lt;/code&gt; to put the patch in place and &lt;code&gt;stop()&lt;/code&gt; to undo it.</source>
          <target state="translated">그것들을 사용하려면 &lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt; &lt;code&gt;patch.object()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#unittest.mock.patch.dict&quot;&gt; &lt;code&gt;patch.dict()&lt;/code&gt; &lt;/a&gt; 를 정상적으로 호출 하고 반환 된 &lt;code&gt;patcher&lt;/code&gt; 객체에 대한 참조를 유지하십시오 . 그런 다음 &lt;code&gt;start()&lt;/code&gt; 를 호출 하여 패치를 제자리에 놓고 &lt;code&gt;stop()&lt;/code&gt; 을 실행 하여 패치 를 취소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a04d85e7d8581cce27cdcbf35c1285f6123cef95" translate="yes" xml:space="preserve">
          <source>To validate a certificate for a particular service, you can use the &lt;a href=&quot;#ssl.match_hostname&quot;&gt;&lt;code&gt;match_hostname()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">특정 서비스에 대한 인증서의 유효성을 검사하기 위해 &lt;a href=&quot;#ssl.match_hostname&quot;&gt; &lt;code&gt;match_hostname()&lt;/code&gt; &lt;/a&gt; 함수를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6d5b36de85176d50bc616ddcb26662c16f18cfb1" translate="yes" xml:space="preserve">
          <source>To view the current settings, the common usage is:</source>
          <target state="translated">현재 설정을 보려면 일반적인 사용법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="25c39d00c5f33d8ae92f80d44fd42daec3d39b6c" translate="yes" xml:space="preserve">
          <source>To work with plist data in bytes objects, use &lt;a href=&quot;#plistlib.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#plistlib.loads&quot;&gt;&lt;code&gt;loads()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">plist 데이터를 바이트 객체로 작업하려면 &lt;a href=&quot;#plistlib.dumps&quot;&gt; &lt;code&gt;dumps()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#plistlib.loads&quot;&gt; &lt;code&gt;loads()&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="297905026d890e2e8243355af0ec2cc27371102f" translate="yes" xml:space="preserve">
          <source>To write or read binary data from/to the standard streams, use the underlying binary &lt;a href=&quot;io#io.TextIOBase.buffer&quot;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/a&gt; object. For example, to write bytes to &lt;a href=&quot;#sys.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;sys.stdout.buffer.write(b'abc')&lt;/code&gt;.</source>
          <target state="translated">표준 스트림에서 또는 표준 스트림으로 이진 데이터를 쓰거나 읽으려면 기본 이진 &lt;a href=&quot;io#io.TextIOBase.buffer&quot;&gt; &lt;code&gt;buffer&lt;/code&gt; &lt;/a&gt; 객체를 사용하십시오 . 예를 들어, 바이트를 &lt;a href=&quot;#sys.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; &lt;/a&gt; 에 쓰 려면 &lt;code&gt;sys.stdout.buffer.write(b'abc')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bb59b39ce1834db13694efdf0cd6ff6ff02425e2" translate="yes" xml:space="preserve">
          <source>To write out and to parse a plist file, use the &lt;a href=&quot;#plistlib.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#plistlib.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">plist 파일을 작성하고 구문 분석하려면 &lt;a href=&quot;#plistlib.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#plistlib.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1745bc6607fc215c3c7c61823c82138e48f4028e" translate="yes" xml:space="preserve">
          <source>To write tutorial documentation for a package, liberally illustrated with input-output examples. Depending on whether the examples or the expository text are emphasized, this has the flavor of &amp;ldquo;literate testing&amp;rdquo; or &amp;ldquo;executable documentation&amp;rdquo;.</source>
          <target state="translated">패키지에 대한 튜토리얼 문서를 작성하려면 입 / 출력 예제와 함께 자유롭게 설명하십시오. 예제 나 설명 텍스트의 강조 여부에 따라 &quot;리터 레이트 테스트&quot;또는 &quot;실행 가능한 문서&quot;의 풍미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="d25dd12b45e6a81f010b0a56a4dc0f0982041292" translate="yes" xml:space="preserve">
          <source>Toggle Tabs</source>
          <target state="translated">탭 전환</target>
        </trans-unit>
        <trans-unit id="49eebd44a0b7cae07bba108684454fac421ae217" translate="yes" xml:space="preserve">
          <source>Toggle automatically opening the stack viewer on an unhandled exception.</source>
          <target state="translated">처리되지 않은 예외에서 스택 뷰어를 자동으로 열도록 전환합니다.</target>
        </trans-unit>
        <trans-unit id="709be1c4e06ce937ce109134ee51b54aed0e03b8" translate="yes" xml:space="preserve">
          <source>Toggle the selection state of each item in &lt;em&gt;items&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;items&lt;/em&gt; 에서 각 항목의 선택 상태를 전환합니다 .</target>
        </trans-unit>
        <trans-unit id="caebd5b8cbddc4475c405e61e04e4190e27500f7" translate="yes" xml:space="preserve">
          <source>Toggles the window between normal size and maximum height. The initial size defaults to 40 lines by 80 chars unless changed on the General tab of the Configure IDLE dialog. The maximum height for a screen is determined by momentarily maximizing a window the first time one is zoomed on the screen. Changing screen settings may invalidate the saved height. This toggle has no effect when a window is maximized.</source>
          <target state="translated">창을 보통 크기와 최대 높이 사이에서 전환합니다. IDLE 구성 대화 상자의 일반 탭에서 변경하지 않는 한 초기 크기는 기본적으로 40 행 x 80 자입니다. 화면의 최대 높이는 화면을 처음 확대 할 때 창을 일시적으로 최대화하여 결정됩니다. 화면 설정을 변경하면 저장된 높이가 무효화 될 수 있습니다. 이 토글은 창을 최대화 할 때 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9646975b29962e37360aeb91034e6c068784a045" translate="yes" xml:space="preserve">
          <source>Token used to determine end of file. This will be set to the empty string (&lt;code&gt;''&lt;/code&gt;), in non-POSIX mode, and to &lt;code&gt;None&lt;/code&gt; in POSIX mode.</source>
          <target state="translated">파일 끝을 결정하는 데 사용되는 토큰. 비 POSIX 모드에서는 빈 문자열 ( &lt;code&gt;''&lt;/code&gt; ), POSIX 모드에서는 &lt;code&gt;None&lt;/code&gt; 으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="16cae5602b3caafdaf94aff5138d6f4e7306ce60" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;!=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;!=&quot;&lt;/code&gt; 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="b86dac8050e2e0fe59bbfbb856d1dab55acb93ce" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;%&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;%&quot;&lt;/code&gt; 에 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="cbfdb248d8cd19bbbcc877609c920721d1ea70a1" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;%=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;%=&quot;&lt;/code&gt; 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="5fad4c655b643193212ddd54e05c2200a0585d87" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;amp;&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="09ea8c1d8139ee92700420a6e9d9a1fe6f2d7a7d" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;amp;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;amp;=&quot;&lt;/code&gt; 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="7577e9265009c87a3fbed49dfd6cc843a2b2cbf6" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="6a1c7e1c71d9be05a6b8a4e4b94f866389399156" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;&amp;gt;&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="51c75daa104193ecf006b0fcd0aadf86d0bb470d" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;&amp;gt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;&amp;gt;=&quot;&lt;/code&gt; 에 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="975cfb9e99e1b1719af82b61c50c79dbf15855c2" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;gt;=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="e3b1a1065dcde8b9a95d5840358ce973e13029e6" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="27117e7427212a73cef9306bfd8d32904b077760" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt;.</source>
          <target state="translated">에 대한 토큰 가치 &lt;code&gt;&quot;&amp;lt;&amp;lt;&quot;&lt;/code&gt; 의 .</target>
        </trans-unit>
        <trans-unit id="37f9fe9280b0caf0120b0d333b0582b40ed8e8d7" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;&amp;lt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;&amp;lt;=&quot;&lt;/code&gt; 에 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="096dbca2d8035996074e27220e8dbd83ef780dba" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;&amp;lt;=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="d5c708b45d8f39bd617325c25f4812de96617673" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;(&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;(&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="18327d5eff01310d0a4402b710af59731824b495" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;)&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="9c76b270805b1a4fa9b7663756b8fc11eb6237ae" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;*&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;*&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="be3fb52143c54c07d78aef84da8b6ce63c06b07c" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;**&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;**&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="8ea8a289233c29e8390a3cba1410ef72f6df77a7" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;**=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;**=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="f7bb9643b98a9563af63301ae2f5eb1e0c81c1e3" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;*=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;*=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="85b32e10c19b5c0b632e41089d8b9ef29c3c0408" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;+&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;+&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="461a49ce243ba233541ce7431045e91176eb3c59" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;+=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;+=&quot;&lt;/code&gt; 에 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="888610ba8dd07985852c6773f5fdd60c98169a40" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;,&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;,&quot;&lt;/code&gt; 에 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="d65b027b57b9b44eb9e73b20963ab437d175e245" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;-&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;-&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="48d463c1e62f59c507e1b5f21ca75187a7778fe0" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;-&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;-&amp;gt;&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="aba8dee4771b2b55437288b8c0addbf948bf04ef" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;-=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;-=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="1e4dade593aea62b538b7b875cba862f012392de" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;.&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;.&quot;&lt;/code&gt; 에 대한 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="d422d21de323ce3dd3f982de5e81088eac87e43e" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;...&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;...&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="87e36640edaae52f4602e5ec159d6a25665979d3" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;/&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;/&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="66a85deaaa8f44db29f357d74508240dac8dc497" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;//&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;//&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="6ba39f80bb6b9c1266313b252b2ede42343eef14" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;//=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;//=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="f91c0679dbf2b6feb2d90e59560fb27b78fb5cb0" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;/=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;/=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="27fb4ca487ea2d2acd87d0144dc37e9417b0e6b5" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;:&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;:&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="e9b88acce02e2c44cfc438ec17a090e8b03f750b" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;:=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;:=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="176ba72e65d2cc2ac3a0ef119f5ee7765b2a7859" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;;&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="0e2e7402f6cb7fba9d35c8cf4b7b59a836554560" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;=&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="83b85c1df0e5fa0d285d34b19a3f75ae2d068e4b" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;==&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;==&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="21ebe9b60a4cd36259d42529870d893bf45d707f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;@&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;@&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="562d37d12791923832dab094f3c882df283ae94f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;@=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;@=&quot;&lt;/code&gt; 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="04694683cab263b7e5328a88ef1cdfb9a7206b7e" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;[&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;[&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="171228101c615a61a16687264fc8b959bfa3898f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;]&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;]&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="b96129d765f2fc721f957ea503b8f940483e945a" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;^&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;^&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="98dd6ae68dc4fc9f5ac457b18e21de6926cb5f6f" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;^=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;^=&quot;&lt;/code&gt; 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="a719a03c56326a85b3001ccfd9ce0f5734172538" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;{&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;{&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="9a5f9e1fed1309f30c9042e1ad1355103d6fa147" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;|&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;|&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="342f63c931b36b96537e06cc7417b755a05e7fd5" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;|=&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;|=&quot;&lt;/code&gt; 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="f773a07b06f7fd17273f93d0ffb58f47f64e4626" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;}&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;}&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="f8f4c1b4ddcdb8a2fd9b6e54c8fec3a038ecb05a" translate="yes" xml:space="preserve">
          <source>Token value for &lt;code&gt;&quot;~&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;~&quot;&lt;/code&gt; 의 토큰 값 .</target>
        </trans-unit>
        <trans-unit id="6c65b7769f5f6a2e3a25c7cb7dd686f45caf915a" translate="yes" xml:space="preserve">
          <source>Token value indicating that a type comment was recognized. Such tokens are only produced when &lt;a href=&quot;ast#ast.parse&quot;&gt;&lt;code&gt;ast.parse()&lt;/code&gt;&lt;/a&gt; is invoked with &lt;code&gt;type_comments=True&lt;/code&gt;.</source>
          <target state="translated">형식 설명이 인식되었음을 나타내는 토큰 값. 이러한 토큰은 &lt;a href=&quot;ast#ast.parse&quot;&gt; &lt;code&gt;ast.parse()&lt;/code&gt; &lt;/a&gt; 가 &lt;code&gt;type_comments=True&lt;/code&gt; 로 호출 된 경우에만 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="ccbde560ca6e91456cf2373616b13efcf7e6c048" translate="yes" xml:space="preserve">
          <source>Token value that indicates the encoding used to decode the source bytes into text. The first token returned by &lt;a href=&quot;tokenize#tokenize.tokenize&quot;&gt;&lt;code&gt;tokenize.tokenize()&lt;/code&gt;&lt;/a&gt; will always be an &lt;code&gt;ENCODING&lt;/code&gt; token.</source>
          <target state="translated">소스 바이트를 텍스트로 디코딩하는 데 사용되는 인코딩을 나타내는 토큰 값입니다. &lt;a href=&quot;tokenize#tokenize.tokenize&quot;&gt; &lt;code&gt;tokenize.tokenize()&lt;/code&gt; &lt;/a&gt; 의해 리턴 된 첫 번째 토큰 은 항상 &lt;code&gt;ENCODING&lt;/code&gt; 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="4f82464b470b42b75fa84935a9a5e610016164d1" translate="yes" xml:space="preserve">
          <source>Token value used to indicate a comment.</source>
          <target state="translated">주석을 나타내는 데 사용되는 토큰 값.</target>
        </trans-unit>
        <trans-unit id="78d296a14bd59029382660ecee684a6365dfd786" translate="yes" xml:space="preserve">
          <source>Token value used to indicate a non-terminating newline. The &lt;a href=&quot;#token.NEWLINE&quot;&gt;&lt;code&gt;NEWLINE&lt;/code&gt;&lt;/a&gt; token indicates the end of a logical line of Python code; &lt;code&gt;NL&lt;/code&gt; tokens are generated when a logical line of code is continued over multiple physical lines.</source>
          <target state="translated">종료하지 않는 개행을 나타내는 데 사용되는 토큰 값. &lt;a href=&quot;#token.NEWLINE&quot;&gt; &lt;code&gt;NEWLINE&lt;/code&gt; &lt;/a&gt; 파이썬 코드의 논리적 라인의 끝을 나타내는 토큰; &lt;code&gt;NL&lt;/code&gt; 토큰은 논리적 코드 줄이 여러 물리적 줄에서 계속 될 때 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="abd739ad8bf24203062992f9c33379060ce2b2cd" translate="yes" xml:space="preserve">
          <source>Tokenize a source reading unicode strings instead of bytes.</source>
          <target state="translated">바이트 대신 유니 코드 문자열을 읽는 소스를 토큰 화합니다.</target>
        </trans-unit>
        <trans-unit id="ba1bab500a51a619a214fb93843a992431974a3a" translate="yes" xml:space="preserve">
          <source>Tokenizing Input</source>
          <target state="translated">토큰 화 입력</target>
        </trans-unit>
        <trans-unit id="4113b4c9ebd053469430304ab17dc16ea1d01df9" translate="yes" xml:space="preserve">
          <source>Too many links</source>
          <target state="translated">너무 많은 링크</target>
        </trans-unit>
        <trans-unit id="c8452b0c049e050b8a8d8e298315154b410bb14f" translate="yes" xml:space="preserve">
          <source>Too many open files</source>
          <target state="translated">열린 파일이 너무 많습니다</target>
        </trans-unit>
        <trans-unit id="81e6c84235179bef6a424ade0379cdb4a2f8f2b6" translate="yes" xml:space="preserve">
          <source>Too many references: cannot splice</source>
          <target state="translated">참조가 너무 많습니다 : 스플 라이스 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="9370b2a9a4016e2eac0b29188fd6198e7257fcbe" translate="yes" xml:space="preserve">
          <source>Too many symbolic links encountered</source>
          <target state="translated">너무 많은 기호 링크가 발생했습니다</target>
        </trans-unit>
        <trans-unit id="21b53b1f02559d44a4e57d2971766159ebf6282f" translate="yes" xml:space="preserve">
          <source>Too many users</source>
          <target state="translated">너무 많은 사용자</target>
        </trans-unit>
        <trans-unit id="f26fcae8618d0de222fcbf33470328838b85c473" translate="yes" xml:space="preserve">
          <source>Tools for creating, reading, and managing collections of messages on disk using a variety standard formats.</source>
          <target state="translated">다양한 표준 형식을 사용하여 디스크에서 메시지 모음을 작성하고 읽고 관리하는 도구입니다.</target>
        </trans-unit>
        <trans-unit id="e69f8935b44be8243365f3e9e267b01513883107" translate="yes" xml:space="preserve">
          <source>Tools for working with and analyzing pickled data.</source>
          <target state="translated">피클 링 데이터 작업 및 분석 도구.</target>
        </trans-unit>
        <trans-unit id="cae0435c41e816c24f0838fdf4e76c044c8b4e00" translate="yes" xml:space="preserve">
          <source>Top</source>
          <target state="translated">Top</target>
        </trans-unit>
        <trans-unit id="30836d81384a3e0017ea997c2799917650592d98" translate="yes" xml:space="preserve">
          <source>Top highlight</source>
          <target state="translated">최고 하이라이트</target>
        </trans-unit>
        <trans-unit id="64deb39c4d87a95e799339a7c956a3d522c74200" translate="yes" xml:space="preserve">
          <source>Top level directory of project (defaults to start directory)</source>
          <target state="translated">프로젝트의 최상위 디렉토리 (디폴트 시작 디렉토리)</target>
        </trans-unit>
        <trans-unit id="b163017dd0043c42725ceb7fbdb1aa05a5ece865" translate="yes" xml:space="preserve">
          <source>Top-down search of area under mouse for target widget</source>
          <target state="translated">Top-down search of area under mouse for target widget</target>
        </trans-unit>
        <trans-unit id="42508320b4ccd94890ce331a9785cdd5bc246821" translate="yes" xml:space="preserve">
          <source>Top-level Non-Object, Non-Array Values</source>
          <target state="translated">최상위 비 객체, 비 배열 값</target>
        </trans-unit>
        <trans-unit id="1dfe8eaa64f9cad312ff5671ef0af2ab7a99ff2a" translate="yes" xml:space="preserve">
          <source>Toplevel widget of Tix which represents mostly the main window of an application. It has an associated Tcl interpreter.</source>
          <target state="translated">대부분 응용 프로그램의 기본 창을 나타내는 Tix의 최상위 위젯. 연관된 Tcl 인터프리터가 있습니다.</target>
        </trans-unit>
        <trans-unit id="05837bfda0ec899c7721328f0212d46820110de7" translate="yes" xml:space="preserve">
          <source>Total number of frames that composed the traceback before truncation. This attribute can be set to &lt;code&gt;None&lt;/code&gt; if the information is not available.</source>
          <target state="translated">Total number of frames that composed the traceback before truncation. This attribute can be set to &lt;code&gt;None&lt;/code&gt; if the information is not available.</target>
        </trans-unit>
        <trans-unit id="bec97d5be9912db81f4f9ca403f9d466e4c61a3d" translate="yes" xml:space="preserve">
          <source>Total size of memory blocks in bytes (&lt;code&gt;int&lt;/code&gt;).</source>
          <target state="translated">바이트 단위의 총 메모리 블록 크기 ( &lt;code&gt;int&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="75a7a310270ee5111fd87b87c27f5254e87ed4ed" translate="yes" xml:space="preserve">
          <source>Total size of memory blocks in bytes in the new snapshot (&lt;code&gt;int&lt;/code&gt;): &lt;code&gt;0&lt;/code&gt; if the memory blocks have been released in the new snapshot.</source>
          <target state="translated">새로운 스냅 샷 (바이트의 메모리 블록의 총 크기 &lt;code&gt;int&lt;/code&gt; ) : &lt;code&gt;0&lt;/code&gt; 메모리 블록이 새로운 스냅 샷에 출시 된 경우.</target>
        </trans-unit>
        <trans-unit id="59b7ba7c881f0eee6a7d633e606139640e9a2656" translate="yes" xml:space="preserve">
          <source>Touch all locations in ancestors of the window that have been changed in the window.</source>
          <target state="translated">창에서 변경된 창 조상의 모든 위치를 터치하십시오.</target>
        </trans-unit>
        <trans-unit id="fc109642a782197e3f6c4d5776543cdb3ce34fc1" translate="yes" xml:space="preserve">
          <source>Touch each location in the window that has been touched in any of its ancestor windows. This routine is called by &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt;, so it should almost never be necessary to call it manually.</source>
          <target state="translated">조상 창에서 터치 된 창의 각 위치를 터치하십시오. 이 루틴은 &lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt; 의해 호출되므로 수동으로 호출 할 필요가 거의 없습니다.</target>
        </trans-unit>
        <trans-unit id="dc2fd1e096e6ef9ba0534d8c7883f9f02b4d25c0" translate="yes" xml:space="preserve">
          <source>Touch the entire window, causing it to be completely redrawn on the next &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">전체 창을 터치하면 다음 &lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt; 호출시 완전히 다시 그려집니다 .</target>
        </trans-unit>
        <trans-unit id="86581fcb8efd9c5b78a214474ef387ed93f67805" translate="yes" xml:space="preserve">
          <source>Towers of Hanoi</source>
          <target state="translated">하노이 타워</target>
        </trans-unit>
        <trans-unit id="2f38169a712e499b917900e244feafc980a814f4" translate="yes" xml:space="preserve">
          <source>Trace</source>
          <target state="translated">Trace</target>
        </trans-unit>
        <trans-unit id="729d0a3affdedff054a2ee5841a6ac39141fe3f0" translate="yes" xml:space="preserve">
          <source>Trace functions should have three arguments: &lt;em&gt;frame&lt;/em&gt;, &lt;em&gt;event&lt;/em&gt;, and &lt;em&gt;arg&lt;/em&gt;. &lt;em&gt;frame&lt;/em&gt; is the current stack frame. &lt;em&gt;event&lt;/em&gt; is a string: &lt;code&gt;'call'&lt;/code&gt;, &lt;code&gt;'line'&lt;/code&gt;, &lt;code&gt;'return'&lt;/code&gt;, &lt;code&gt;'exception'&lt;/code&gt; or &lt;code&gt;'opcode'&lt;/code&gt;. &lt;em&gt;arg&lt;/em&gt; depends on the event type.</source>
          <target state="translated">추적 함수에는 &lt;em&gt;frame&lt;/em&gt; , &lt;em&gt;event&lt;/em&gt; 및 &lt;em&gt;arg의&lt;/em&gt; 세 가지 인수가 있어야합니다 . &lt;em&gt;frame&lt;/em&gt; 은 현재 스택 프레임입니다. &lt;em&gt;event&lt;/em&gt; 는 문자열입니다 : &lt;code&gt;'call'&lt;/code&gt; , &lt;code&gt;'line'&lt;/code&gt; , &lt;code&gt;'return'&lt;/code&gt; , &lt;code&gt;'exception'&lt;/code&gt; 또는 &lt;code&gt;'opcode'&lt;/code&gt; 입니다. &lt;em&gt;arg&lt;/em&gt; 는 이벤트 유형에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="cca95e549ae0599cf6045d07c596c4b7642f3723" translate="yes" xml:space="preserve">
          <source>Trace of a memory block.</source>
          <target state="translated">메모리 블록의 흔적.</target>
        </trans-unit>
        <trans-unit id="73df02b52d2db987ebcc21c2fe2978cd599e8c7e" translate="yes" xml:space="preserve">
          <source>Traceback</source>
          <target state="translated">Traceback</target>
        </trans-unit>
        <trans-unit id="1a915c9c47f65dc32b432643b8b0acf75347e53a" translate="yes" xml:space="preserve">
          <source>Traceback Examples</source>
          <target state="translated">역 추적 예</target>
        </trans-unit>
        <trans-unit id="ce11c2ebf77907c8459174d3b9b1486ef8e6b046" translate="yes" xml:space="preserve">
          <source>Traceback where an object was allocated</source>
          <target state="translated">객체가 할당 된 역 추적</target>
        </trans-unit>
        <trans-unit id="f97c295c1a3039941729feab98e098409fe68202" translate="yes" xml:space="preserve">
          <source>Traceback where the memory block was allocated, &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt;&lt;code&gt;Traceback&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">메모리 블록이 할당 된 역 &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt; &lt;code&gt;Traceback&lt;/code&gt; &lt;/a&gt; , 역 추적 인스턴스.</target>
        </trans-unit>
        <trans-unit id="215f86e5666b2b6438b7dcad21a57321b228f03b" translate="yes" xml:space="preserve">
          <source>Traceback where the memory blocks were allocated, &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt;&lt;code&gt;Traceback&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">메모리 블록이 할당 된 역 &lt;a href=&quot;#tracemalloc.Traceback&quot;&gt; &lt;code&gt;Traceback&lt;/code&gt; &lt;/a&gt; , 역 추적 인스턴스.</target>
        </trans-unit>
        <trans-unit id="ddf046523d04587bec23897cf0fd9f9c5d47f3d5" translate="yes" xml:space="preserve">
          <source>TracebackException Objects</source>
          <target state="translated">TracebackException 객체</target>
        </trans-unit>
        <trans-unit id="a74a9e1b5688ce3aa1134bcee9d6faead806e5df" translate="yes" xml:space="preserve">
          <source>Tracebacks of traces are limited to &lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt;&lt;code&gt;get_traceback_limit()&lt;/code&gt;&lt;/a&gt; frames. Use the &lt;em&gt;nframe&lt;/em&gt; parameter of the &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; function to store more frames.</source>
          <target state="translated">트레이스의 트레이스 백은 &lt;a href=&quot;#tracemalloc.get_traceback_limit&quot;&gt; &lt;code&gt;get_traceback_limit()&lt;/code&gt; &lt;/a&gt; 프레임으로 제한됩니다 . 더 많은 프레임을 저장 하려면 &lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt; 함수 의 &lt;em&gt;nframe&lt;/em&gt; 매개 변수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="20d9eefaebb02bf1f35e2c2af8f942a78a015d4e" translate="yes" xml:space="preserve">
          <source>Traces of all memory blocks allocated by Python: sequence of &lt;a href=&quot;#tracemalloc.Trace&quot;&gt;&lt;code&gt;Trace&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">파이썬이 할당 한 모든 메모리 블록의 &lt;a href=&quot;#tracemalloc.Trace&quot;&gt; &lt;code&gt;Trace&lt;/code&gt; &lt;/a&gt; : 트레이스 인스턴스의 시퀀스 .</target>
        </trans-unit>
        <trans-unit id="7bf75e7c8b0f02ab018d760d1e9e5211c51a7a30" translate="yes" xml:space="preserve">
          <source>Tracking all Calls</source>
          <target state="translated">모든 통화 추적</target>
        </trans-unit>
        <trans-unit id="e1e96da1294b28f1d2a1b0c918ca3c4901dc294f" translate="yes" xml:space="preserve">
          <source>Tracking order of calls and less verbose call assertions</source>
          <target state="translated">통화 순서 추적 및 덜 상세한 통화 어설 션</target>
        </trans-unit>
        <trans-unit id="3b612e72ed8b42ec172f3e6dbff27929a0f89575" translate="yes" xml:space="preserve">
          <source>Traditional Chinese</source>
          <target state="translated">중국어 번체</target>
        </trans-unit>
        <trans-unit id="3a41258116450da3b7bae163878df53968a02aa3" translate="yes" xml:space="preserve">
          <source>Transcode CGI variables from &lt;code&gt;os.environ&lt;/code&gt; to &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; &amp;ldquo;bytes in unicode&amp;rdquo; strings, returning a new dictionary. This function is used by &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt;&lt;code&gt;CGIHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#wsgiref.handlers.IISCGIHandler&quot;&gt;&lt;code&gt;IISCGIHandler&lt;/code&gt;&lt;/a&gt; in place of directly using &lt;code&gt;os.environ&lt;/code&gt;, which is not necessarily WSGI-compliant on all platforms and web servers using Python 3 &amp;ndash; specifically, ones where the OS&amp;rsquo;s actual environment is Unicode (i.e. Windows), or ones where the environment is bytes, but the system encoding used by Python to decode it is anything other than ISO-8859-1 (e.g. Unix systems using UTF-8).</source>
          <target state="translated">CGI 변수를 &lt;code&gt;os.environ&lt;/code&gt; 에서 &lt;a href=&quot;https://www.python.org/dev/peps/pep-3333&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;PEP 3333&lt;/strong&gt;&lt;/a&gt; &amp;ldquo;유니 코드 바이트&amp;rdquo;문자열로 트랜스 코딩 하여 새 사전을 반환합니다. 이 함수는 &lt;code&gt;os.environ&lt;/code&gt; 을 직접 사용하는 대신 &lt;a href=&quot;#wsgiref.handlers.CGIHandler&quot;&gt; &lt;code&gt;CGIHandler&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#wsgiref.handlers.IISCGIHandler&quot;&gt; &lt;code&gt;IISCGIHandler&lt;/code&gt; &lt;/a&gt; 에서 사용합니다. os.environ 은 Python 3을 사용하는 모든 플랫폼 및 웹 서버에서 반드시 WSGI와 호환되는 것은 아닙니다. 특히 OS의 실제 환경이 유니 코드 (예 : Windows) 인 웹 서버 또는 환경이 바이트 인 환경이지만 파이썬이 환경을 디코딩하기 위해 사용하는 시스템 인코딩은 ISO-8859-1 이외의 것입니다 (예 : UTF-8을 사용하는 유닉스 시스템).</target>
        </trans-unit>
        <trans-unit id="3494f1691e673629d7c793b2bb30afd3bb7d7eac" translate="yes" xml:space="preserve">
          <source>Transferring files</source>
          <target state="translated">파일 전송</target>
        </trans-unit>
        <trans-unit id="2cff264a027be4797d3845ae78c3ed06983f0e0b" translate="yes" xml:space="preserve">
          <source>Transfers the callback stack to a fresh &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instance and returns it. No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement).</source>
          <target state="translated">콜백 스택을 새로운 &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; 인스턴스로 전송하고 반환합니다. 이 작업으로 콜백이 호출되지 않습니다. 대신 새 스택이 닫힐 때 ( &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; 문 끝에서 명시 적 또는 암시 적으로) 콜백이 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="3b0300f14835699f5ce3da82f440a599b15cea8e" translate="yes" xml:space="preserve">
          <source>Transfers the callback stack to a fresh &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instance and returns it. No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement).</source>
          <target state="translated">Transfers the callback stack to a fresh &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; instance and returns it. No callbacks are invoked by this operation - instead, they will now be invoked when the new stack is closed (either explicitly or implicitly at the end of a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; statement).</target>
        </trans-unit>
        <trans-unit id="f6cc813676e43d2fcd0dd59a95a03fc47ef50a4a" translate="yes" xml:space="preserve">
          <source>Transform a function into a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">함수를 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;단일 디스패치 &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;일반 함수&lt;/a&gt; 로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="68d7c454c7c648a0031f942af1d9bdcc4f0f15d5" translate="yes" xml:space="preserve">
          <source>Transform a function into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">Transform a function into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="29e2be1612d0aa8942c71595cd96e42d73362205" translate="yes" xml:space="preserve">
          <source>Transform a method into a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">메소드를 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-single-dispatch&quot;&gt;단일 디스패치 &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generic-function&quot;&gt;일반 함수&lt;/a&gt; 로 변환하십시오 .</target>
        </trans-unit>
        <trans-unit id="d0eebf3498068208b85ef1cb74b1a9703b5aedc5" translate="yes" xml:space="preserve">
          <source>Transform a method into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</source>
          <target state="translated">Transform a method into a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-single-dispatch&quot;&gt;single-dispatch&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generic-function&quot;&gt;generic function&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="77d6e14d23f99b7595d3a17519773f7c518841e6" translate="yes" xml:space="preserve">
          <source>Transform a method into a class method.</source>
          <target state="translated">메소드를 클래스 메소드로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="bd552dd114347d110fdd0f27b833906c1a1deaeb" translate="yes" xml:space="preserve">
          <source>Transform a method into a static method.</source>
          <target state="translated">메소드를 정적 메소드로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="57af29cae6b948bcecd8e9b79ac28cd65f1862f9" translate="yes" xml:space="preserve">
          <source>Transform a method of a class into a property whose value is computed once and then cached as a normal attribute for the life of the instance. Similar to &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property()&lt;/code&gt;&lt;/a&gt;, with the addition of caching. Useful for expensive computed properties of instances that are otherwise effectively immutable.</source>
          <target state="translated">클래스의 메소드를 값이 한 번 계산 된 다음 인스턴스 수명 동안 일반 속성으로 캐시되는 특성으로 변환하십시오. 캐싱이 추가 된 &lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property()&lt;/code&gt; &lt;/a&gt; 와 유사합니다 . 달리 불변 인 인스턴스의 값 비싼 계산 된 속성에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f2245bfdf04797ba4ad3df2d8c1aa548c557eab0" translate="yes" xml:space="preserve">
          <source>Transform an old-style comparison function to a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-key-function&quot;&gt;key function&lt;/a&gt;. Used with tools that accept key functions (such as &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt;&lt;code&gt;heapq.nlargest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt;&lt;code&gt;heapq.nsmallest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;itertools#itertools.groupby&quot;&gt;&lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/a&gt;). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.</source>
          <target state="translated">구식 비교 함수를 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-key-function&quot;&gt;키 함수로 변환하십시오&lt;/a&gt; . 주요 기능 (예 : &lt;a href=&quot;functions#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;functions#min&quot;&gt; &lt;code&gt;min()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;functions#max&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt; &lt;code&gt;heapq.nlargest()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt; &lt;code&gt;heapq.nsmallest()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;itertools#itertools.groupby&quot;&gt; &lt;code&gt;itertools.groupby()&lt;/code&gt; &lt;/a&gt; ) 을 허용하는 도구와 함께 사용됩니다 . 이 함수는 주로 비교 함수 사용을 지원하는 Python 2에서 변환되는 프로그램의 전이 도구로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="beb4930deb71e66b49c0181768fce3a666b0b731" translate="yes" xml:space="preserve">
          <source>Transform an old-style comparison function to a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-key-function&quot;&gt;key function&lt;/a&gt;. Used with tools that accept key functions (such as &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#min&quot;&gt;&lt;code&gt;min()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#max&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt;&lt;code&gt;heapq.nlargest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt;&lt;code&gt;heapq.nsmallest()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;itertools#itertools.groupby&quot;&gt;&lt;code&gt;itertools.groupby()&lt;/code&gt;&lt;/a&gt;). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.</source>
          <target state="translated">Transform an old-style comparison function to a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-key-function&quot;&gt;key function&lt;/a&gt;. Used with tools that accept key functions (such as &lt;a href=&quot;functions#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;functions#min&quot;&gt; &lt;code&gt;min()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;functions#max&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nlargest&quot;&gt; &lt;code&gt;heapq.nlargest()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;heapq#heapq.nsmallest&quot;&gt; &lt;code&gt;heapq.nsmallest()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;itertools#itertools.groupby&quot;&gt; &lt;code&gt;itertools.groupby()&lt;/code&gt; &lt;/a&gt;). This function is primarily used as a transition tool for programs being converted from Python 2 which supported the use of comparison functions.</target>
        </trans-unit>
        <trans-unit id="0d475eafab57f0600a394b645fd9f36b3327943b" translate="yes" xml:space="preserve">
          <source>Transform list &lt;em&gt;x&lt;/em&gt; into a heap, in-place, in linear time.</source>
          <target state="translated">목록 &lt;em&gt;x&lt;/em&gt; 를 선형 시간 내에 제자리로 힙으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="6fe84a1868be82491d31f1d9d8079682b81776df" translate="yes" xml:space="preserve">
          <source>Transforms a string to one that can be used in locale-aware comparisons. For example, &lt;code&gt;strxfrm(s1) &amp;lt; strxfrm(s2)&lt;/code&gt; is equivalent to &lt;code&gt;strcoll(s1, s2) &amp;lt; 0&lt;/code&gt;. This function can be used when the same string is compared repeatedly, e.g. when collating a sequence of strings.</source>
          <target state="translated">로케일 인식 비교에 사용할 수있는 문자열을 문자열로 변환합니다. 예를 들어 &lt;code&gt;strxfrm(s1) &amp;lt; strxfrm(s2)&lt;/code&gt; 는 &lt;code&gt;strcoll(s1, s2) &amp;lt; 0&lt;/code&gt; . 이 기능은 동일한 문자열을 반복적으로 비교할 때 (예 : 문자열 시퀀스를 정렬 할 때) 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59eb997dbc4748a8f708bc6652221a97c4a5cc52" translate="yes" xml:space="preserve">
          <source>Transforms the option name &lt;em&gt;option&lt;/em&gt; as found in an input file or as passed in by client code to the form that should be used in the internal structures. The default implementation returns a lower-case version of &lt;em&gt;option&lt;/em&gt;; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior.</source>
          <target state="translated">입력 파일에서 찾거나 클라이언트 코드에서 내부 구조에 사용해야하는 형식으로 전달 된대로 옵션 이름 &lt;em&gt;옵션&lt;/em&gt; 을 변환합니다 . 기본 구현은 소문자 버전의 &lt;em&gt;옵션을&lt;/em&gt; 반환합니다 . 서브 클래스는이 속성을 무시하거나 클라이언트 코드가이 동작에 영향을주기 위해 인스턴스에이 이름의 속성을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a83d63b28fa4225a56bc0566e8e33c1cf91e595" translate="yes" xml:space="preserve">
          <source>Translate a host name to IPv4 address format, extended interface. Return a triple &lt;code&gt;(hostname, aliaslist, ipaddrlist)&lt;/code&gt; where &lt;em&gt;hostname&lt;/em&gt; is the primary host name responding to the given &lt;em&gt;ip_address&lt;/em&gt;, &lt;em&gt;aliaslist&lt;/em&gt; is a (possibly empty) list of alternative host names for the same address, and &lt;em&gt;ipaddrlist&lt;/em&gt; is a list of IPv4 addresses for the same interface on the same host (often but not always a single address). &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt;&lt;code&gt;gethostbyname_ex()&lt;/code&gt;&lt;/a&gt; does not support IPv6 name resolution, and &lt;a href=&quot;#socket.getaddrinfo&quot;&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt;&lt;/a&gt; should be used instead for IPv4/v6 dual stack support.</source>
          <target state="translated">호스트 이름을 확장 인터페이스 인 IPv4 주소 형식으로 변환하십시오. 트리플 &lt;code&gt;(hostname, aliaslist, ipaddrlist)&lt;/code&gt; 반환합니다. 여기서 &lt;em&gt;hostname&lt;/em&gt; 은 지정된 &lt;em&gt;ip_address에&lt;/em&gt; 응답하는 기본 호스트 이름 이고 &lt;em&gt;aliaslist&lt;/em&gt; 는 동일한 주소에 대한 대체 호스트 이름 목록 (비어있을 수 있음)이며 &lt;em&gt;ipaddrlist&lt;/em&gt; 는 IP 주소의 IPv4 주소 목록입니다. 동일한 호스트의 동일한 인터페이스 (종종 단일 주소는 아님) &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt; &lt;code&gt;gethostbyname_ex()&lt;/code&gt; &lt;/a&gt; 는 IPv6 이름 확인을 지원하지 않으며 IPv4 / v6 이중 스택 지원에는 &lt;a href=&quot;#socket.getaddrinfo&quot;&gt; &lt;code&gt;getaddrinfo()&lt;/code&gt; &lt;/a&gt; 를 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="70d07b15ee9a4f6a42ff4435887b259bd202d514" translate="yes" xml:space="preserve">
          <source>Translate a host name to IPv4 address format. The IPv4 address is returned as a string, such as &lt;code&gt;'100.50.200.5'&lt;/code&gt;. If the host name is an IPv4 address itself it is returned unchanged. See &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt;&lt;code&gt;gethostbyname_ex()&lt;/code&gt;&lt;/a&gt; for a more complete interface. &lt;a href=&quot;#socket.gethostbyname&quot;&gt;&lt;code&gt;gethostbyname()&lt;/code&gt;&lt;/a&gt; does not support IPv6 name resolution, and &lt;a href=&quot;#socket.getaddrinfo&quot;&gt;&lt;code&gt;getaddrinfo()&lt;/code&gt;&lt;/a&gt; should be used instead for IPv4/v6 dual stack support.</source>
          <target state="translated">호스트 이름을 IPv4 주소 형식으로 변환하십시오. IPv4 주소는 &lt;code&gt;'100.50.200.5'&lt;/code&gt; 와 같은 문자열로 반환됩니다 . 호스트 이름이 IPv4 주소 자체 인 경우 변경되지 않은 상태로 반환됩니다. 보다 완전한 인터페이스는 &lt;a href=&quot;#socket.gethostbyname_ex&quot;&gt; &lt;code&gt;gethostbyname_ex()&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . &lt;a href=&quot;#socket.gethostbyname&quot;&gt; &lt;code&gt;gethostbyname()&lt;/code&gt; &lt;/a&gt; 은 IPv6 이름 확인을 지원하지 않으며 IPv4 / v6 이중 스택 지원에는 &lt;a href=&quot;#socket.getaddrinfo&quot;&gt; &lt;code&gt;getaddrinfo()&lt;/code&gt; &lt;/a&gt; 를 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e008d42be736fc0c81a4d9b6b6bedd2f1699d3e4" translate="yes" xml:space="preserve">
          <source>Translate a socket address &lt;em&gt;sockaddr&lt;/em&gt; into a 2-tuple &lt;code&gt;(host, port)&lt;/code&gt;. Depending on the settings of &lt;em&gt;flags&lt;/em&gt;, the result can contain a fully-qualified domain name or numeric address representation in &lt;em&gt;host&lt;/em&gt;. Similarly, &lt;em&gt;port&lt;/em&gt; can contain a string port name or a numeric port number.</source>
          <target state="translated">소켓 주소 &lt;em&gt;sockaddr&lt;/em&gt; 을 2- 튜플 &lt;code&gt;(host, port)&lt;/code&gt; . &lt;em&gt;플래그&lt;/em&gt; 설정에 따라 &lt;em&gt;호스트에&lt;/em&gt; 정규화 된 도메인 이름 또는 숫자 주소 표현이 결과에 포함될 수 있습니다 . 마찬가지로, &lt;em&gt;포트&lt;/em&gt; 는 문자열 포트 이름 또는 숫자 포트 번호를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="043a7fd2528ceea779160e39be4de88da98043fe" translate="yes" xml:space="preserve">
          <source>Translate an Internet port number and protocol name to a service name for that service. The optional protocol name, if given, should be &lt;code&gt;'tcp'&lt;/code&gt; or &lt;code&gt;'udp'&lt;/code&gt;, otherwise any protocol will match.</source>
          <target state="translated">인터넷 포트 번호 및 프로토콜 이름을 해당 서비스의 서비스 이름으로 변환하십시오. 선택적인 프로토콜 이름이 주어지면 &lt;code&gt;'tcp'&lt;/code&gt; 또는 &lt;code&gt;'udp'&lt;/code&gt; 이어야합니다 . 그렇지 않으면 모든 프로토콜이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="9c6347fecd97c9239fbe8e190539881f5b00aaad" translate="yes" xml:space="preserve">
          <source>Translate an Internet protocol name (for example, &lt;code&gt;'icmp'&lt;/code&gt;) to a constant suitable for passing as the (optional) third argument to the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function. This is usually only needed for sockets opened in &amp;ldquo;raw&amp;rdquo; mode (&lt;a href=&quot;#socket.SOCK_RAW&quot;&gt;&lt;code&gt;SOCK_RAW&lt;/code&gt;&lt;/a&gt;); for the normal socket modes, the correct protocol is chosen automatically if the protocol is omitted or zero.</source>
          <target state="translated">인터넷 프로토콜 이름 (예 : &lt;code&gt;'icmp'&lt;/code&gt; )을 (선택적) 세 번째 인수로 &lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt; 함수 에 전달하기에 적합한 상수로 변환하십시오 . 이것은 보통 &quot;raw&quot;모드 ( &lt;a href=&quot;#socket.SOCK_RAW&quot;&gt; &lt;code&gt;SOCK_RAW&lt;/code&gt; &lt;/a&gt; )로 열린 소켓에만 필요합니다 . 일반 소켓 모드의 경우 프로토콜을 생략하거나 0으로 설정하면 올바른 프로토콜이 자동으로 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="2c2ac3cca9292668377fba4ee4623c03c2cd3d27" translate="yes" xml:space="preserve">
          <source>Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be &lt;code&gt;'tcp'&lt;/code&gt; or &lt;code&gt;'udp'&lt;/code&gt;, otherwise any protocol will match.</source>
          <target state="translated">Translate an Internet service name and protocol name to a port number for that service. The optional protocol name, if given, should be &lt;code&gt;'tcp'&lt;/code&gt; or &lt;code&gt;'udp'&lt;/code&gt; , otherwise any protocol will match.</target>
        </trans-unit>
        <trans-unit id="c6167576bbe6424a770750fda6b310cd33b5754d" translate="yes" xml:space="preserve">
          <source>Translate the &lt;em&gt;host&lt;/em&gt;/&lt;em&gt;port&lt;/em&gt; argument into a sequence of 5-tuples that contain all the necessary arguments for creating a socket connected to that service. &lt;em&gt;host&lt;/em&gt; is a domain name, a string representation of an IPv4/v6 address or &lt;code&gt;None&lt;/code&gt;. &lt;em&gt;port&lt;/em&gt; is a string service name such as &lt;code&gt;'http'&lt;/code&gt;, a numeric port number or &lt;code&gt;None&lt;/code&gt;. By passing &lt;code&gt;None&lt;/code&gt; as the value of &lt;em&gt;host&lt;/em&gt; and &lt;em&gt;port&lt;/em&gt;, you can pass &lt;code&gt;NULL&lt;/code&gt; to the underlying C API.</source>
          <target state="translated">&lt;em&gt;호스트&lt;/em&gt; / &lt;em&gt;포트&lt;/em&gt; 인수를 해당 서비스에 연결된 소켓을 작성하는 데 필요한 모든 인수가 포함 된 5 개의 튜플 시퀀스로 변환하십시오 . &lt;em&gt;host&lt;/em&gt; 는 도메인 이름, IPv4 / v6 주소의 문자열 표현 또는 &lt;code&gt;None&lt;/code&gt; 입니다. &lt;em&gt;port&lt;/em&gt; 는 &lt;code&gt;'http'&lt;/code&gt; 와 같은 문자열 서비스 이름 , 숫자 포트 번호 또는 &lt;code&gt;None&lt;/code&gt; 입니다. &lt;em&gt;host&lt;/em&gt; 및 &lt;em&gt;port&lt;/em&gt; 값으로 &lt;code&gt;None&lt;/code&gt; 을 전달 하면 기본 C API에 &lt;code&gt;NULL&lt;/code&gt; 을 전달할 수 있습니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="57cc23b1ca1f4bdb359fda45a6c0cfa2bf20d929" translate="yes" xml:space="preserve">
          <source>Translation classes are what actually implement the translation of original source file message strings to translated message strings. The base class used by all translation classes is &lt;a href=&quot;#gettext.NullTranslations&quot;&gt;&lt;code&gt;NullTranslations&lt;/code&gt;&lt;/a&gt;; this provides the basic interface you can use to write your own specialized translation classes. Here are the methods of &lt;code&gt;NullTranslations&lt;/code&gt;:</source>
          <target state="translated">변환 클래스는 원래 원본 파일 메시지 문자열을 변환 된 메시지 문자열로 변환하는 것을 실제로 구현합니다. 모든 번역 클래스에서 사용하는 기본 클래스는 &lt;a href=&quot;#gettext.NullTranslations&quot;&gt; &lt;code&gt;NullTranslations&lt;/code&gt; 입니다&lt;/a&gt; . 고유 한 번역 클래스를 작성하는 데 사용할 수있는 기본 인터페이스를 제공합니다. &lt;code&gt;NullTranslations&lt;/code&gt; 의 방법은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a38cacbb1ca124ad8f23834d55a6a98f51f54e09" translate="yes" xml:space="preserve">
          <source>Translation of docstrings into different languages</source>
          <target state="translated">문서화 문자열을 다른 언어로 번역</target>
        </trans-unit>
        <trans-unit id="5819361fc7a2ef298014871c32b98dcda96e637b" translate="yes" xml:space="preserve">
          <source>Transparent Content Negotiation in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-55&quot;&gt;&lt;strong&gt;RFC 2295&lt;/strong&gt;&lt;/a&gt;, Section 8.1 (Experimental)</source>
          <target state="translated">HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-55&quot;&gt;&lt;strong&gt;RFC 2295의&lt;/strong&gt;&lt;/a&gt; 투명한 컨텐츠 협상 , 섹션 8.1 (실험적)</target>
        </trans-unit>
        <trans-unit id="75c3fa4a53fd401b2229a7f0ebc604eeac4ea1cb" translate="yes" xml:space="preserve">
          <source>Transparent Content Negotiation in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2295&lt;/strong&gt;&lt;/a&gt;, Section 8.1 (Experimental)</source>
          <target state="translated">Transparent Content Negotiation in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc2295.html&quot; id=&quot;index-58&quot;&gt;&lt;strong&gt;RFC 2295&lt;/strong&gt;&lt;/a&gt;, Section 8.1 (Experimental)</target>
        </trans-unit>
        <trans-unit id="013dfe5673d630bea0c413d2532e94026706f073" translate="yes" xml:space="preserve">
          <source>Transparently opens files compressed with gzip and bzip2 (recognized by the extensions &lt;code&gt;'.gz'&lt;/code&gt; and &lt;code&gt;'.bz2'&lt;/code&gt;) using the &lt;a href=&quot;gzip#module-gzip&quot;&gt;&lt;code&gt;gzip&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;bz2#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt; modules. If the filename extension is not &lt;code&gt;'.gz'&lt;/code&gt; or &lt;code&gt;'.bz2'&lt;/code&gt;, the file is opened normally (ie, using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; without any decompression).</source>
          <target state="translated">&lt;a href=&quot;gzip#module-gzip&quot;&gt; &lt;code&gt;gzip&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;bz2#module-bz2&quot;&gt; &lt;code&gt;bz2&lt;/code&gt; &lt;/a&gt; 모듈을 사용하여 gzip 및 bzip2 (확장자 &lt;code&gt;'.gz'&lt;/code&gt; 및 &lt;code&gt;'.bz2'&lt;/code&gt; 로 인식)로 압축 된 파일을 투명하게 엽니 다 . 파일 이름 확장자가 &lt;code&gt;'.gz'&lt;/code&gt; 또는 &lt;code&gt;'.bz2'&lt;/code&gt; 가 아닌 경우 파일은 정상적으로 열립니다 (즉, 압축 해제없이 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="8ba05920f9cac3c752bf58531bc3aff23fb4f8d5" translate="yes" xml:space="preserve">
          <source>Transport endpoint is already connected</source>
          <target state="translated">전송 끝 점이 이미 연결되어 있습니다</target>
        </trans-unit>
        <trans-unit id="42b6cb1e2709a84c628f001deda5c6f4c66e6e2f" translate="yes" xml:space="preserve">
          <source>Transport endpoint is not connected</source>
          <target state="translated">전송 끝 점이 연결되어 있지 않습니다</target>
        </trans-unit>
        <trans-unit id="fe569542c10e401dbb4be544f1e89297055140e3" translate="yes" xml:space="preserve">
          <source>Transport objects are always instantiated by an &lt;a href=&quot;asyncio-eventloop#asyncio-event-loop&quot;&gt;asyncio event loop&lt;/a&gt;.</source>
          <target state="translated">전송 객체는 항상 &lt;a href=&quot;asyncio-eventloop#asyncio-event-loop&quot;&gt;asyncio 이벤트 루프에&lt;/a&gt; 의해 인스턴스화됩니다 .</target>
        </trans-unit>
        <trans-unit id="fbd2edc0da02a266d5cdec2e57c47c688da6fda8" translate="yes" xml:space="preserve">
          <source>Transports</source>
          <target state="translated">Transports</target>
        </trans-unit>
        <trans-unit id="4761cb167f0448d6e20290552ca05bb90b3bb24d" translate="yes" xml:space="preserve">
          <source>Transports Hierarchy</source>
          <target state="translated">수송 계층</target>
        </trans-unit>
        <trans-unit id="c1d7e246eaa462ae433bf46e7c1126b7c1acd3ea" translate="yes" xml:space="preserve">
          <source>Transports and Protocols</source>
          <target state="translated">전송 및 프로토콜</target>
        </trans-unit>
        <trans-unit id="264cb105f9be5010db06f954d5f74816deacc8c2" translate="yes" xml:space="preserve">
          <source>Transports and Protocols are used by the &lt;strong&gt;low-level&lt;/strong&gt; event loop APIs such as &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;. They use callback-based programming style and enable high-performance implementations of network or IPC protocols (e.g. HTTP).</source>
          <target state="translated">전송 및 프로토콜은 &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt; 과 같은 &lt;strong&gt;저수준&lt;/strong&gt; 이벤트 루프 API에서 사용됩니다 . 콜백 기반 프로그래밍 스타일을 사용하고 네트워크 또는 IPC 프로토콜 (예 : HTTP)의 고성능 구현을 가능하게합니다.</target>
        </trans-unit>
        <trans-unit id="a77987d2d7a6956f8a337ae29fb7fb8773743f16" translate="yes" xml:space="preserve">
          <source>Transports are classes provided by &lt;a href=&quot;asyncio#module-asyncio&quot;&gt;&lt;code&gt;asyncio&lt;/code&gt;&lt;/a&gt; in order to abstract various kinds of communication channels.</source>
          <target state="translated">전송은 다양한 종류의 통신 채널을 추상화하기 위해 &lt;a href=&quot;asyncio#module-asyncio&quot;&gt; &lt;code&gt;asyncio&lt;/code&gt; &lt;/a&gt; 가 제공하는 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="303f4351f2c69150d0eddec52cfeb625b2371c1e" translate="yes" xml:space="preserve">
          <source>Transports returned by &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt;&lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt; &lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt; &lt;/a&gt; 반환 한 전송 :</target>
        </trans-unit>
        <trans-unit id="d9873fba572493e3eaa82cea5f269402afce8d20" translate="yes" xml:space="preserve">
          <source>Transports that can Send data (TCP and Unix connections, pipes, etc). Returned from methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt;&lt;code&gt;loop.create_unix_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;loop.connect_write_pipe()&lt;/code&gt;&lt;/a&gt;, etc:</source>
          <target state="translated">데이터를 전송할 수있는 전송 (TCP 및 Unix 연결, 파이프 등). &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt; &lt;code&gt;loop.create_unix_connection()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt; &lt;code&gt;loop.connect_write_pipe()&lt;/code&gt; &lt;/a&gt; 등의 메소드에서 리턴되었습니다 .</target>
        </trans-unit>
        <trans-unit id="a051bdcbc525919b993b381956fc20546b16e4a1" translate="yes" xml:space="preserve">
          <source>Transports that can receive data (TCP and Unix connections, pipes, etc). Returned from methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt;&lt;code&gt;loop.create_unix_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt;&lt;code&gt;loop.connect_read_pipe()&lt;/code&gt;&lt;/a&gt;, etc:</source>
          <target state="translated">데이터를 수신 할 수있는 전송 (TCP 및 Unix 연결, 파이프 등). &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt; &lt;code&gt;loop.create_unix_connection()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt; &lt;code&gt;loop.connect_read_pipe()&lt;/code&gt; &lt;/a&gt; 등의 메소드에서 리턴되었습니다 .</target>
        </trans-unit>
        <trans-unit id="509f851ebb0250fc3a0869d4049ba708e0505ba6" translate="yes" xml:space="preserve">
          <source>Trashed</source>
          <target state="translated">Trashed</target>
        </trans-unit>
        <trans-unit id="e28f72c47fa3b5ed393703d102760467590a1188" translate="yes" xml:space="preserve">
          <source>Tree heading area.</source>
          <target state="translated">나무 제목 영역.</target>
        </trans-unit>
        <trans-unit id="6881932baff27b84638af452003fe7547ebad2f3" translate="yes" xml:space="preserve">
          <source>Tree mode</source>
          <target state="translated">트리 모드</target>
        </trans-unit>
        <trans-unit id="baf786d49c14bdaf0256d96340c5f4e28abb53d2" translate="yes" xml:space="preserve">
          <source>TreeBuilder Objects</source>
          <target state="translated">TreeBuilder 객체</target>
        </trans-unit>
        <trans-unit id="d78dca84fb22f51e97d39c20a021d39026e0b47d" translate="yes" xml:space="preserve">
          <source>Treeview</source>
          <target state="translated">Treeview</target>
        </trans-unit>
        <trans-unit id="cd6a940383f49ad00c6557c201e300253f2a02b1" translate="yes" xml:space="preserve">
          <source>Tries to compile &lt;em&gt;source&lt;/em&gt;, which should be a string of Python code and return a code object if &lt;em&gt;source&lt;/em&gt; is valid Python code. In that case, the filename attribute of the code object will be &lt;em&gt;filename&lt;/em&gt;, which defaults to &lt;code&gt;'&amp;lt;input&amp;gt;'&lt;/code&gt;. Returns &lt;code&gt;None&lt;/code&gt; if &lt;em&gt;source&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; valid Python code, but is a prefix of valid Python code.</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt; 컴파일을 시도합니다. &lt;em&gt;소스&lt;/em&gt; 는 Python 코드 문자열이어야하며 &lt;em&gt;소스&lt;/em&gt; 가 유효한 Python 코드 인 경우 코드 객체를 반환합니다 . 이 경우 코드 객체의 filename 속성은 &lt;em&gt;filename&lt;/em&gt; 이며 기본값은 &lt;code&gt;'&amp;lt;input&amp;gt;'&lt;/code&gt; 입니다. &lt;em&gt;source&lt;/em&gt; 가 유효한 Python 코드 는 &lt;em&gt;아니지만&lt;/em&gt; 유효한 Python 코드의 접두사 인 경우 &lt;code&gt;None&lt;/code&gt; 을 반환 합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="54f73f8dd5429f4a01f4af96bdf0dbb59c9d9b9f" translate="yes" xml:space="preserve">
          <source>Tries to create a socket; on failure, uses an exponential back-off algorithm. On initial failure, the handler will drop the message it was trying to send. When subsequent messages are handled by the same instance, it will not try connecting until some time has passed. The default parameters are such that the initial delay is one second, and if after that delay the connection still can&amp;rsquo;t be made, the handler will double the delay each time up to a maximum of 30 seconds.</source>
          <target state="translated">소켓을 만들려고합니다. 실패시 지수 백 오프 알고리즘을 사용합니다. 초기 실패시 핸들러는 보내려고하는 메시지를 삭제합니다. 후속 메시지가 동일한 인스턴스에서 처리되면 일정 시간이 지날 때까지 연결을 시도하지 않습니다. 기본 매개 변수는 초기 지연 시간이 1 초가되고 지연 시간이 지나도 연결을 계속할 수없는 경우 처리기는 최대 30 초마다 지연 시간을 두 배로 늘립니다.</target>
        </trans-unit>
        <trans-unit id="723b7551d8d8f217ec734b051a205c9a9d64447b" translate="yes" xml:space="preserve">
          <source>Tries to determine the default locale settings and returns them as a tuple of the form &lt;code&gt;(language code, encoding)&lt;/code&gt;.</source>
          <target state="translated">기본 로케일 설정을 판별하여 양식의 튜플 &lt;code&gt;(language code, encoding)&lt;/code&gt; 로 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f6e122f407603681d635913886b1cca45552154d" translate="yes" xml:space="preserve">
          <source>Tries to determine the libc version against which the file executable (defaults to the Python interpreter) is linked. Returns a tuple of strings &lt;code&gt;(lib,
version)&lt;/code&gt; which default to the given parameters in case the lookup fails.</source>
          <target state="translated">파일 실행 파일 (기본적으로 Python 인터프리터)이 연결되는 libc 버전을 확인하려고합니다. 조회가 실패 할 경우 지정된 매개 변수를 기본값으로하는 문자열 튜플 &lt;code&gt;(lib, version)&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="db9365ac0a5ac052a881974fe2bdebad1f76b2bc" translate="yes" xml:space="preserve">
          <source>Trigger the termination of the dialog window.</source>
          <target state="translated">Trigger the termination of the dialog window.</target>
        </trans-unit>
        <trans-unit id="b9e4c026492c440bf32166e0789393487d03b254" translate="yes" xml:space="preserve">
          <source>Trigonometric functions</source>
          <target state="translated">삼각 함수</target>
        </trans-unit>
        <trans-unit id="94503f7ff8b00ca0e33985b5db4eb1f04f5842aa" translate="yes" xml:space="preserve">
          <source>Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal.</source>
          <target state="translated">삼중 따옴표로 묶인 문자열은 여러 줄에 걸쳐있을 수 있습니다. 모든 관련 공백은 문자열 리터럴에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ce93d3947ad07eda86b0f4a04d88b4fde0c3e713" translate="yes" xml:space="preserve">
          <source>Triple quoted: &lt;code&gt;'''Three single quotes'''&lt;/code&gt;, &lt;code&gt;&quot;&quot;&quot;Three double quotes&quot;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">삼중 따옴표 : &lt;code&gt;'''Three single quotes'''&lt;/code&gt; , &lt;code&gt;&quot;&quot;&quot;Three double quotes&quot;&quot;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4e3160154fa07738c0749f5a1674876dac0991b9" translate="yes" xml:space="preserve">
          <source>Triple quoted: &lt;code&gt;b'''3 single quotes'''&lt;/code&gt;, &lt;code&gt;b&quot;&quot;&quot;3 double quotes&quot;&quot;&quot;&lt;/code&gt;</source>
          <target state="translated">삼중 인용 : &lt;code&gt;b'''3 single quotes'''&lt;/code&gt; , &lt;code&gt;b&quot;&quot;&quot;3 double quotes&quot;&quot;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">True</target>
        </trans-unit>
        <trans-unit id="9799c2f01a14841243adfd69d6831aa48fd1922c" translate="yes" xml:space="preserve">
          <source>Truncate the file corresponding to &lt;em&gt;path&lt;/em&gt;, so that it is at most &lt;em&gt;length&lt;/em&gt; bytes in size.</source>
          <target state="translated">&lt;em&gt;path에&lt;/em&gt; 해당하는 파일을 잘라서 &lt;em&gt;길이&lt;/em&gt; 가 최대 &lt;em&gt;길이&lt;/em&gt; 바이트가되도록합니다.</target>
        </trans-unit>
        <trans-unit id="af680e38ac0cf3f9223497dde47b36e539f5b3b2" translate="yes" xml:space="preserve">
          <source>Truncate the file corresponding to file descriptor &lt;em&gt;fd&lt;/em&gt;, so that it is at most &lt;em&gt;length&lt;/em&gt; bytes in size. As of Python 3.3, this is equivalent to &lt;code&gt;os.truncate(fd, length)&lt;/code&gt;.</source>
          <target state="translated">파일 디스크립터 &lt;em&gt;fd에&lt;/em&gt; 해당하는 파일을 잘라서 &lt;em&gt;길이&lt;/em&gt; 가 최대 &lt;em&gt;길이&lt;/em&gt; 바이트 가되도록하십시오 . Python 3.3 &lt;code&gt;os.truncate(fd, length)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf21e5053e591409eb8326bfa9935e23594fdb97" translate="yes" xml:space="preserve">
          <source>Truth Test</source>
          <target state="translated">진실 테스트</target>
        </trans-unit>
        <trans-unit id="f768c2b1817c6d2e7da4fa131e14ada17a4413ca" translate="yes" xml:space="preserve">
          <source>Truth Value Testing</source>
          <target state="translated">진실 가치 테스트</target>
        </trans-unit>
        <trans-unit id="042c862e4467d7d057cced262e6869dd75c22b7d" translate="yes" xml:space="preserve">
          <source>Try again</source>
          <target state="translated">다시 시도하십시오</target>
        </trans-unit>
        <trans-unit id="65e343170835a746169f1c7b9ad30abe19ddd1b7" translate="yes" xml:space="preserve">
          <source>Try to find a library and return a pathname. &lt;em&gt;name&lt;/em&gt; is the library name without any prefix like &lt;code&gt;lib&lt;/code&gt;, suffix like &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt; or version number (this is the form used for the posix linker option &lt;code&gt;-l&lt;/code&gt;). If no library can be found, returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">라이브러리를 찾고 경로 이름을 반환하십시오. &lt;em&gt;name&lt;/em&gt; 은 &lt;code&gt;lib&lt;/code&gt; 와 같은 접두사가없는 라이브러리 이름 , &lt;code&gt;.so&lt;/code&gt; , &lt;code&gt;.dylib&lt;/code&gt; 와 같은 접미사 또는 버전 번호입니다 (이는 posix 링커 옵션 &lt;code&gt;-l&lt;/code&gt; 에 사용되는 양식입니다 ). 라이브러리를 찾을 수 없으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a562fe84656e778191318907a6802010662517ce" translate="yes" xml:space="preserve">
          <source>Try to find a library and return a pathname. &lt;em&gt;name&lt;/em&gt; is the library name without any prefix like &lt;em&gt;lib&lt;/em&gt;, suffix like &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.dylib&lt;/code&gt; or version number (this is the form used for the posix linker option &lt;code&gt;-l&lt;/code&gt;). If no library can be found, returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">라이브러리를 찾고 경로 이름을 반환하십시오. &lt;em&gt;name&lt;/em&gt; 은 &lt;em&gt;lib&lt;/em&gt; 와 같은 접두사가없는 라이브러리 이름 , &lt;code&gt;.so&lt;/code&gt; , &lt;code&gt;.dylib&lt;/code&gt; 와 같은 접미사 또는 버전 번호입니다 (이는 posix 링커 옵션 &lt;code&gt;-l&lt;/code&gt; 에 사용되는 양식입니다 ). 라이브러리를 찾을 수 없으면 &lt;code&gt;None&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ed2c04bc7d24d737144826a2ba71c94163776043" translate="yes" xml:space="preserve">
          <source>Try to get source code for the given object and display it.</source>
          <target state="translated">주어진 객체의 소스 코드를 가져 와서 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="2516887d302ab812a8c194feed3c558ddefb62c8" translate="yes" xml:space="preserve">
          <source>Try to guess which module an object was defined in.</source>
          <target state="translated">객체가 정의 된 모듈을 추측하십시오.</target>
        </trans-unit>
        <trans-unit id="ebd1d1f612e596ce7c3de763a40fa459d5004d6e" translate="yes" xml:space="preserve">
          <source>Try to match &lt;em&gt;reference&lt;/em&gt; as well as possible to a portion of &lt;em&gt;fragment&lt;/em&gt; (which should be the longer fragment). This is (conceptually) done by taking slices out of &lt;em&gt;fragment&lt;/em&gt;, using &lt;a href=&quot;#audioop.findfactor&quot;&gt;&lt;code&gt;findfactor()&lt;/code&gt;&lt;/a&gt; to compute the best match, and minimizing the result. The fragments should both contain 2-byte samples. Return a tuple &lt;code&gt;(offset, factor)&lt;/code&gt; where &lt;em&gt;offset&lt;/em&gt; is the (integer) offset into &lt;em&gt;fragment&lt;/em&gt; where the optimal match started and &lt;em&gt;factor&lt;/em&gt; is the (floating-point) factor as per &lt;a href=&quot;#audioop.findfactor&quot;&gt;&lt;code&gt;findfactor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;조각&lt;/em&gt; 의 일부 (더 긴 조각이어야 함)에 가능한 한 &lt;em&gt;참조&lt;/em&gt; 를 일치 시키십시오. 이것은 (개념적으로) 조각에서 &lt;em&gt;조각&lt;/em&gt; 을 &lt;a href=&quot;#audioop.findfactor&quot;&gt; &lt;code&gt;findfactor()&lt;/code&gt; &lt;/a&gt; 를 사용하여 최상의 일치를 계산하고 결과를 최소화함으로써 수행됩니다. 프래그먼트 모두 2 바이트 샘플을 포함해야합니다. 튜플 &lt;code&gt;(offset, factor)&lt;/code&gt; 반환합니다. 여기서 &lt;em&gt;offset&lt;/em&gt; 은 최적의 일치가 시작되고 &lt;em&gt;factor&lt;/em&gt; 는 &lt;a href=&quot;#audioop.findfactor&quot;&gt; &lt;code&gt;findfactor()&lt;/code&gt; &lt;/a&gt; 따라 (부동 소수점) 인수 인 &lt;em&gt;조각&lt;/em&gt; 으로의 (정수) 오프셋 입니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ac78d12a16aa80098bb54153e110d21246ae88e" translate="yes" xml:space="preserve">
          <source>Try to match a single dict with the supplied arguments.</source>
          <target state="translated">단일 인수를 제공된 인수와 일치 시키십시오.</target>
        </trans-unit>
        <trans-unit id="b42726f25482d59cf0996a89fcd7e965117f2de5" translate="yes" xml:space="preserve">
          <source>Try to match a single stored value (&lt;em&gt;dv&lt;/em&gt;) with a supplied value (&lt;em&gt;v&lt;/em&gt;).</source>
          <target state="translated">단일 저장된 값 ( &lt;em&gt;dv&lt;/em&gt; )과 제공된 값 ( &lt;em&gt;v&lt;/em&gt; ) 을 일치 시키십시오 .</target>
        </trans-unit>
        <trans-unit id="d185a34ec17e724666e5fcb4d5595d842b8d7712" translate="yes" xml:space="preserve">
          <source>Try to maximize code reuse. On occasion, tests will vary by something as small as what type of input is used. Minimize code duplication by subclassing a basic test class with a class that specifies the input:</source>
          <target state="translated">코드 재사용을 극대화하십시오. 경우에 따라 테스트는 사용되는 입력 유형만큼 작은 것으로 달라질 수 있습니다. 입력을 지정하는 클래스로 기본 테스트 클래스를 서브 클래 싱하여 코드 복제를 최소화하십시오.</target>
        </trans-unit>
        <trans-unit id="24c4d4b0384c5e8113577a77c50cd02909ab1752" translate="yes" xml:space="preserve">
          <source>Try to set the audio sampling rate to &lt;em&gt;samplerate&lt;/em&gt; samples per second. Returns the rate actually set. Most sound devices don&amp;rsquo;t support arbitrary sampling rates. Common rates are:</source>
          <target state="translated">오디오 샘플링 속도를 설정하여 &lt;em&gt;초당&lt;/em&gt; 샘플을 샘플링하십시오 . 실제로 설정된 비율을 반환합니다. 대부분의 사운드 장치는 임의의 샘플링 속도를 지원하지 않습니다. 일반적인 요금은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dfd9bba471282a5364090df5e871704f1989384f" translate="yes" xml:space="preserve">
          <source>Try to set the current audio format to &lt;em&gt;format&lt;/em&gt;&amp;mdash;see &lt;a href=&quot;#ossaudiodev.oss_audio_device.getfmts&quot;&gt;&lt;code&gt;getfmts()&lt;/code&gt;&lt;/a&gt; for a list. Returns the audio format that the device was set to, which may not be the requested format. May also be used to return the current audio format&amp;mdash;do this by passing an &amp;ldquo;audio format&amp;rdquo; of &lt;code&gt;AFMT_QUERY&lt;/code&gt;.</source>
          <target state="translated">현재 오디오 형식을 &lt;em&gt;형식&lt;/em&gt; 으로 설정하십시오 &lt;a href=&quot;#ossaudiodev.oss_audio_device.getfmts&quot;&gt; &lt;code&gt;getfmts()&lt;/code&gt; &lt;/a&gt; 목록은 getfmts () 참조 ) . 장치가 설정된 오디오 형식을 반환합니다.이 형식은 요청 된 형식이 아닐 수 있습니다. 현재 오디오 형식을 반환하는 데 사용될 수도 있습니다 . &lt;code&gt;AFMT_QUERY&lt;/code&gt; 의 &quot;오디오 형식&quot;을 전달하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="01dc1292ce86f3caf0848ae2f322f3751399a279" translate="yes" xml:space="preserve">
          <source>Try to switch to UTF-8 mode. Returns the server response if successful, raises &lt;a href=&quot;#poplib.error_proto&quot;&gt;&lt;code&gt;error_proto&lt;/code&gt;&lt;/a&gt; if not. Specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc6856.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 6856&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">UTF-8 모드로 전환하십시오. 성공하면 서버 응답을 반환하고 그렇지 않으면 &lt;a href=&quot;#poplib.error_proto&quot;&gt; &lt;code&gt;error_proto&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다. &lt;a href=&quot;https://tools.ietf.org/html/rfc6856.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 6856에&lt;/strong&gt;&lt;/a&gt; 지정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f88c14e9f4900c12d35e50c8cd7af56fcc2bdc2e" translate="yes" xml:space="preserve">
          <source>Trying to unparse a highly complex expression would result with &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Trying to unparse a highly complex expression would result with &lt;a href=&quot;exceptions#RecursionError&quot;&gt; &lt;code&gt;RecursionError&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5f09fbf303e9d03d520306ba22518da9d405b4d0" translate="yes" xml:space="preserve">
          <source>Ttk Notebook widget manages a collection of windows and displays a single one at a time. Each child window is associated with a tab, which the user may select to change the currently-displayed window.</source>
          <target state="translated">Ttk Notebook 위젯은 창 모음을 관리하고 한 번에 하나의 창을 표시합니다. 각 자식 창은 사용자가 현재 표시된 창을 변경하도록 선택할 수있는 탭과 연결되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c1d99a87ace6521e39f8ca7d4263b05f86c18f3" translate="yes" xml:space="preserve">
          <source>Ttk Styling</source>
          <target state="translated">Ttk 스타일링</target>
        </trans-unit>
        <trans-unit id="a8b856639e268ec85b1013167342e759670b03a1" translate="yes" xml:space="preserve">
          <source>Ttk Widgets</source>
          <target state="translated">Ttk 위젯</target>
        </trans-unit>
        <trans-unit id="f3f01ae23b415dd491c9f60cdd3716bbb3432178" translate="yes" xml:space="preserve">
          <source>Ttk code:</source>
          <target state="translated">Ttk 코드 :</target>
        </trans-unit>
        <trans-unit id="3b50c205ffc8d2593d73a3ea0a223ad651b40604" translate="yes" xml:space="preserve">
          <source>Ttk comes with 18 widgets, twelve of which already existed in tkinter: &lt;code&gt;Button&lt;/code&gt;, &lt;code&gt;Checkbutton&lt;/code&gt;, &lt;code&gt;Entry&lt;/code&gt;, &lt;code&gt;Frame&lt;/code&gt;, &lt;code&gt;Label&lt;/code&gt;, &lt;code&gt;LabelFrame&lt;/code&gt;, &lt;code&gt;Menubutton&lt;/code&gt;, &lt;code&gt;PanedWindow&lt;/code&gt;, &lt;code&gt;Radiobutton&lt;/code&gt;, &lt;code&gt;Scale&lt;/code&gt;, &lt;code&gt;Scrollbar&lt;/code&gt;, and &lt;a href=&quot;#tkinter.ttk.Spinbox&quot;&gt;&lt;code&gt;Spinbox&lt;/code&gt;&lt;/a&gt;. The other six are new: &lt;a href=&quot;#tkinter.ttk.Combobox&quot;&gt;&lt;code&gt;Combobox&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Notebook&quot;&gt;&lt;code&gt;Notebook&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Progressbar&quot;&gt;&lt;code&gt;Progressbar&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;Separator&lt;/code&gt;, &lt;code&gt;Sizegrip&lt;/code&gt; and &lt;a href=&quot;#tkinter.ttk.Treeview&quot;&gt;&lt;code&gt;Treeview&lt;/code&gt;&lt;/a&gt;. And all them are subclasses of &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">: TTK는 이미 Tkinter의 존재 열두있는 18 위젯, 함께 제공 &lt;code&gt;Button&lt;/code&gt; , &lt;code&gt;Checkbutton&lt;/code&gt; , &lt;code&gt;Entry&lt;/code&gt; , &lt;code&gt;Frame&lt;/code&gt; , &lt;code&gt;Label&lt;/code&gt; , &lt;code&gt;LabelFrame&lt;/code&gt; , &lt;code&gt;Menubutton&lt;/code&gt; , &lt;code&gt;PanedWindow&lt;/code&gt; , &lt;code&gt;Radiobutton&lt;/code&gt; , &lt;code&gt;Scale&lt;/code&gt; , &lt;code&gt;Scrollbar&lt;/code&gt; 및 &lt;a href=&quot;#tkinter.ttk.Spinbox&quot;&gt; &lt;code&gt;Spinbox&lt;/code&gt; &lt;/a&gt; . 다른 6 개는 &lt;a href=&quot;#tkinter.ttk.Combobox&quot;&gt; &lt;code&gt;Combobox&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#tkinter.ttk.Notebook&quot;&gt; &lt;code&gt;Notebook&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#tkinter.ttk.Progressbar&quot;&gt; &lt;code&gt;Progressbar&lt;/code&gt; &lt;/a&gt; &lt;code&gt;Sizegrip&lt;/code&gt; , &lt;code&gt;Separator&lt;/code&gt; , 크기 그립 및 &lt;a href=&quot;#tkinter.ttk.Treeview&quot;&gt; &lt;code&gt;Treeview&lt;/code&gt; &lt;/a&gt; 입니다. 그리고 그것들은 모두 &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; 의&lt;/a&gt; 서브 클래스입니다 .</target>
        </trans-unit>
        <trans-unit id="62d5887076eeffca16e822f085d3a6fac34dfe1c" translate="yes" xml:space="preserve">
          <source>Tuple comparison breaks for (priority, task) pairs if the priorities are equal and the tasks do not have a default comparison order.</source>
          <target state="translated">우선 순위가 같고 작업에 기본 비교 순서가 없으면 (우선 순위, 작업) 쌍에 대한 튜플 비교가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="576f22e6784b810efe039380014c1113e2fb6f11" translate="yes" xml:space="preserve">
          <source>Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by &lt;a href=&quot;#mimetypes.common_types&quot;&gt;&lt;code&gt;common_types&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mimetypes.types_map&quot;&gt;&lt;code&gt;types_map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">MIME 유형을 파일 이름 확장자 목록에 맵핑하는 두 개의 사전을 포함하는 튜플 : 첫 번째 사전은 비표준 유형에 대한 것이고 두 번째 사전은 표준 유형에 대한 것입니다. 이들은 &lt;a href=&quot;#mimetypes.common_types&quot;&gt; &lt;code&gt;common_types&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#mimetypes.types_map&quot;&gt; &lt;code&gt;types_map&lt;/code&gt; &lt;/a&gt; 으로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="35d389092135e415451df1c6a4fe91d613237182" translate="yes" xml:space="preserve">
          <source>Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by &lt;a href=&quot;#mimetypes.common_types&quot;&gt;&lt;code&gt;common_types&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mimetypes.types_map&quot;&gt;&lt;code&gt;types_map&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일 이름 확장자를 MIME 유형에 매핑하는 두 개의 사전을 포함하는 튜플 : 첫 번째 사전은 비표준 유형에 대한 것이고 두 번째 사전은 표준 유형에 대한 것입니다. 이들은 &lt;a href=&quot;#mimetypes.common_types&quot;&gt; &lt;code&gt;common_types&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#mimetypes.types_map&quot;&gt; &lt;code&gt;types_map&lt;/code&gt; &lt;/a&gt; 으로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="d3c38138d37b7093520517627a140d12972e280c" translate="yes" xml:space="preserve">
          <source>Tuple of strings listing the field names. Useful for introspection and for creating new named tuple types from existing named tuples.</source>
          <target state="translated">필드 이름을 나열하는 문자열 튜플. 내성 및 기존 명명 된 튜플에서 새로운 명명 된 튜플 유형을 만드는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f79c109bcba03e38eac40e1e4bcb6c02a02072c0" translate="yes" xml:space="preserve">
          <source>Tuple type; &lt;code&gt;Tuple[X, Y]&lt;/code&gt; is the type of a tuple of two items with the first item of type X and the second of type Y. The type of the empty tuple can be written as &lt;code&gt;Tuple[()]&lt;/code&gt;.</source>
          <target state="translated">튜플 타입; &lt;code&gt;Tuple[X, Y]&lt;/code&gt; 는 X 유형의 첫 번째 항목과 Y 유형의 두 번째 항목이있는 두 항목의 튜플 유형입니다. 빈 튜플의 유형은 &lt;code&gt;Tuple[()]&lt;/code&gt; 으로 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="538a8ce3fbdcaee00a14353bd57bcf3600c6e0d0" translate="yes" xml:space="preserve">
          <source>Tuples</source>
          <target state="translated">Tuples</target>
        </trans-unit>
        <trans-unit id="48434af86ae5af781700a355a8ecb54f31e4d982" translate="yes" xml:space="preserve">
          <source>Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the &lt;a href=&quot;functions#enumerate&quot;&gt;&lt;code&gt;enumerate()&lt;/code&gt;&lt;/a&gt; built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; instance).</source>
          <target state="translated">튜플은 불변 시퀀스로, 일반적으로 이기종 데이터 컬렉션 (예 : &lt;a href=&quot;functions#enumerate&quot;&gt; &lt;code&gt;enumerate()&lt;/code&gt; &lt;/a&gt; 내장으로 생성 된 2 튜플)을 저장하는 데 사용됩니다 . 튜플은 불변의 동종 데이터 시퀀스가 ​​필요한 경우에도 사용됩니다 (예 : &lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 인스턴스에 저장 허용 ).</target>
        </trans-unit>
        <trans-unit id="0b386e8529fb736e9c4bd36aeb1f72fafbe39613" translate="yes" xml:space="preserve">
          <source>Tuples implement all of the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations.</source>
          <target state="translated">튜플은 모든 &lt;a href=&quot;#typesseq-common&quot;&gt;공통&lt;/a&gt; 시퀀스 연산을 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="820108fe4042aed941be834adbd58d5bd8b622c9" translate="yes" xml:space="preserve">
          <source>Tuples may be constructed in a number of ways:</source>
          <target state="translated">튜플은 여러 가지 방법으로 구성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab650a1a4b8fdf3a4053ce8d277d335dd82e5447" translate="yes" xml:space="preserve">
          <source>Turkish</source>
          <target state="translated">Turkish</target>
        </trans-unit>
        <trans-unit id="bfddc6585154e8980d7d9f2464ddd6bcffde4f0c" translate="yes" xml:space="preserve">
          <source>Turn &lt;em&gt;all&lt;/em&gt; tabs into the correct number of spaces.</source>
          <target state="translated">&lt;em&gt;모든&lt;/em&gt; 탭을 올바른 수의 공백으로 바꾸 십시오 .</target>
        </trans-unit>
        <trans-unit id="d432c331d5bf77692c8000616daf70b03f0e4997" translate="yes" xml:space="preserve">
          <source>Turn &lt;em&gt;leading&lt;/em&gt; stretches of spaces into tabs. (Note: We recommend using 4 space blocks to indent Python code.)</source>
          <target state="translated">돌려 &lt;em&gt;선도&lt;/em&gt; 탭으로 공간을 뻗어. (참고 : 4 개의 공백 블록을 사용하여 Python 코드를 들여 쓰는 것이 좋습니다.)</target>
        </trans-unit>
        <trans-unit id="81f0849860783f08e07acdaa613f08c3820b9ee6" translate="yes" xml:space="preserve">
          <source>Turn a 10-tuple as returned by &lt;a href=&quot;#email.utils.parsedate_tz&quot;&gt;&lt;code&gt;parsedate_tz()&lt;/code&gt;&lt;/a&gt; into a UTC timestamp (seconds since the Epoch). If the timezone item in the tuple is &lt;code&gt;None&lt;/code&gt;, assume local time.</source>
          <target state="translated">&lt;a href=&quot;#email.utils.parsedate_tz&quot;&gt; &lt;code&gt;parsedate_tz()&lt;/code&gt; &lt;/a&gt; 에 의해 반환 된 10- 튜플을 UTC 타임 스탬프 (Epoch 이후의 초 ) 로 바꿉니다 . 튜플의 시간대 항목이 &lt;code&gt;None&lt;/code&gt; 이면 현지 시간을 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="cb07ad334e657f4211d17464bcc2a73ca9e67cdd" translate="yes" xml:space="preserve">
          <source>Turn off the standout attribute. On some terminals this has the side effect of turning off all attributes.</source>
          <target state="translated">standout 속성을 끄십시오. 일부 터미널에서는 모든 속성을 끄는 부작용이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0db49dc317a6c62e6f369a19109f78316e0ad8d" translate="yes" xml:space="preserve">
          <source>Turn on attribute &lt;em&gt;A_STANDOUT&lt;/em&gt;.</source>
          <target state="translated">속성 &lt;em&gt;A_STANDOUT을&lt;/em&gt; 켜십시오 .</target>
        </trans-unit>
        <trans-unit id="4d2f56812568c7f5b2fa977fd2479da08dd9b77d" translate="yes" xml:space="preserve">
          <source>Turn turtle animation on/off and set delay for update drawings. If &lt;em&gt;n&lt;/em&gt; is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see &lt;a href=&quot;#turtle.delay&quot;&gt;&lt;code&gt;delay()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">거북이 애니메이션을 켜거나 끄고 도면 업데이트 지연을 설정합니다. 경우 &lt;em&gt;n을&lt;/em&gt; 주어, 각 n 번째 정규 화면 업데이트는 정말 수행한다. (복잡한 그래픽의 그리기를 가속화하는 데 사용할 수 있습니다.) 인수없이 호출되면 현재 저장된 n 값을 반환합니다. 두 번째 인수는 지연 값을 설정합니다 ( &lt;a href=&quot;#turtle.delay&quot;&gt; &lt;code&gt;delay()&lt;/code&gt; &lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f3940b4ff2adb1c60ab4ae7e097adb391cb0745c" translate="yes" xml:space="preserve">
          <source>Turn turtle left by &lt;em&gt;angle&lt;/em&gt; units. (Units are by default degrees, but can be set via the &lt;a href=&quot;#turtle.degrees&quot;&gt;&lt;code&gt;degrees()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#turtle.radians&quot;&gt;&lt;code&gt;radians()&lt;/code&gt;&lt;/a&gt; functions.) Angle orientation depends on the turtle mode, see &lt;a href=&quot;#turtle.mode&quot;&gt;&lt;code&gt;mode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">거북이를 &lt;em&gt;각도&lt;/em&gt; 단위로 왼쪽으로 &lt;em&gt;돌&lt;/em&gt; 립니다. (단위는 기본적으로도이지만, &lt;a href=&quot;#turtle.degrees&quot;&gt; &lt;code&gt;degrees()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#turtle.radians&quot;&gt; &lt;code&gt;radians()&lt;/code&gt; &lt;/a&gt; 함수 를 통해 설정할 수 있습니다 .) 각도 방향은 터틀 모드에 따라 다릅니다 &lt;a href=&quot;#turtle.mode&quot;&gt; &lt;code&gt;mode()&lt;/code&gt; &lt;/a&gt; 참조 ) .</target>
        </trans-unit>
        <trans-unit id="292661246e0c70041c546baddc46aed04e518e00" translate="yes" xml:space="preserve">
          <source>Turn turtle right by &lt;em&gt;angle&lt;/em&gt; units. (Units are by default degrees, but can be set via the &lt;a href=&quot;#turtle.degrees&quot;&gt;&lt;code&gt;degrees()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#turtle.radians&quot;&gt;&lt;code&gt;radians()&lt;/code&gt;&lt;/a&gt; functions.) Angle orientation depends on the turtle mode, see &lt;a href=&quot;#turtle.mode&quot;&gt;&lt;code&gt;mode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;각도&lt;/em&gt; 단위로 거북이를 오른쪽으로 &lt;em&gt;돌&lt;/em&gt; 립니다. (단위는 기본적으로도이지만, &lt;a href=&quot;#turtle.degrees&quot;&gt; &lt;code&gt;degrees()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#turtle.radians&quot;&gt; &lt;code&gt;radians()&lt;/code&gt; &lt;/a&gt; 함수 를 통해 설정할 수 있습니다 .) 각도 방향은 터틀 모드에 따라 다릅니다 &lt;a href=&quot;#turtle.mode&quot;&gt; &lt;code&gt;mode()&lt;/code&gt; &lt;/a&gt; 참조 ) .</target>
        </trans-unit>
        <trans-unit id="d9d856f25af2d9e07b1ef5aad4d012d7376ee596" translate="yes" xml:space="preserve">
          <source>Turtle Demo</source>
          <target state="translated">거북이 데모</target>
        </trans-unit>
        <trans-unit id="a0f41b1533a18c5574ab4500b21ca24174591f8f" translate="yes" xml:space="preserve">
          <source>Turtle can draw intricate shapes using programs that repeat simple moves.</source>
          <target state="translated">거북이는 간단한 움직임을 반복하는 프로그램을 사용하여 복잡한 모양을 그릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a24632f3c5d3eafd2990df1fdd275b46a5d8158" translate="yes" xml:space="preserve">
          <source>Turtle graphics in a Tk window.</source>
          <target state="translated">Tk 창에서 거북이 그래픽.</target>
        </trans-unit>
        <trans-unit id="9a1e38be75dff4a2c0ae0ad9aea10e788d28916e" translate="yes" xml:space="preserve">
          <source>Turtle graphics is a popular way for introducing programming to kids. It was part of the original Logo programming language developed by Wally Feurzeig, Seymour Papert and Cynthia Solomon in 1967.</source>
          <target state="translated">거북이 그래픽은 아이들에게 프로그래밍을 도입하는 데 널리 사용되는 방법입니다. 1967 년 Wally Feurzeig, Seymour Papert 및 Cynthia Solomon이 개발 한 최초의 로고 프로그래밍 언어의 일부였습니다.</target>
        </trans-unit>
        <trans-unit id="1ff814f0448dd7def11d04fd02e9cec44e3bbdd3" translate="yes" xml:space="preserve">
          <source>Turtle methods</source>
          <target state="translated">거북이 방법</target>
        </trans-unit>
        <trans-unit id="96e24697788c1f2b6cc2700df67b60ac33f0a382" translate="yes" xml:space="preserve">
          <source>Turtle motion</source>
          <target state="translated">거북이 운동</target>
        </trans-unit>
        <trans-unit id="8796c60dd399ec39ec33b95027adedef2da97f8e" translate="yes" xml:space="preserve">
          <source>Turtle star</source>
          <target state="translated">거북이 별</target>
        </trans-unit>
        <trans-unit id="9c0710f6fc26113ca313f375ee77130470a4e349" translate="yes" xml:space="preserve">
          <source>Turtle state</source>
          <target state="translated">거북이 상태</target>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="translated">Tutorial</target>
        </trans-unit>
        <trans-unit id="3a397d7ece111012b516d309689206d97d75d9f3" translate="yes" xml:space="preserve">
          <source>Tutorial material on using curses with Python, by Andrew Kuchling and Eric Raymond.</source>
          <target state="translated">Andrew Kuchling과 Eric Raymond의 Python 저주 사용에 대한 자습서 자료.</target>
        </trans-unit>
        <trans-unit id="4e8be26c995d9e54216ed6645e9836123debd695" translate="yes" xml:space="preserve">
          <source>Tutorial, reference and examples for learning SQL syntax.</source>
          <target state="translated">SQL 구문 학습을위한 학습서, 참조 및 예제</target>
        </trans-unit>
        <trans-unit id="d05acac61e27dac1572bffb3b8de9b3cf7fd0e3b" translate="yes" xml:space="preserve">
          <source>Two additional functions are defined for more general manipulation of the file&amp;rsquo;s mode:</source>
          <target state="translated">파일 모드의보다 일반적인 조작을 위해 두 가지 추가 기능이 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="f5778fbfb9d58d541f9dff34e99f07ac44ecd72a" translate="yes" xml:space="preserve">
          <source>Two additional methods are supported:</source>
          <target state="translated">두 가지 추가 방법이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="74fbbe6b7f586a0aa1c11ad358017225d3404209" translate="yes" xml:space="preserve">
          <source>Two auditing events are raised because the underlying API consists of two calls, each of which must raise its own event.</source>
          <target state="translated">기본 API는 두 개의 호출로 구성되며 각 호출은 자체 이벤트를 발생시켜야하므로 두 개의 감사 이벤트가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8e33dd2ef0fd579bfd7e4e16fef3331e9ee5d62c" translate="yes" xml:space="preserve">
          <source>Two class attributes can be modified, to improve performance, or possibly even to conserve memory.</source>
          <target state="translated">성능을 향상 시키거나 메모리를 절약하기 위해 두 가지 클래스 속성을 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aca3088aa647ffc33767d19b51e8acc79673c470" translate="yes" xml:space="preserve">
          <source>Two example scripts &lt;code&gt;tdemo_nim.py&lt;/code&gt; and &lt;code&gt;tdemo_round_dance.py&lt;/code&gt; have been added to the &lt;code&gt;Lib/turtledemo&lt;/code&gt; directory.</source>
          <target state="translated">두 개의 예제 스크립트 &lt;code&gt;tdemo_nim.py&lt;/code&gt; 및 &lt;code&gt;tdemo_round_dance.py&lt;/code&gt; 가 &lt;code&gt;Lib/turtledemo&lt;/code&gt; 디렉토리 에 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="3215c5c671bb59cb7f259dffd760947f8afd0e5e" translate="yes" xml:space="preserve">
          <source>Two functions are provided which allow an application to determine if an ST was created as an expression or a suite. Neither of these functions can be used to determine if an ST was created from source code via &lt;a href=&quot;#parser.expr&quot;&gt;&lt;code&gt;expr()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#parser.suite&quot;&gt;&lt;code&gt;suite()&lt;/code&gt;&lt;/a&gt; or from a parse tree via &lt;a href=&quot;#parser.sequence2st&quot;&gt;&lt;code&gt;sequence2st()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">애플리케이션이 ST가 표현식 또는 스위트로 작성되었는지 여부를 판별 할 수 있도록하는 두 가지 기능이 제공됩니다. 이 함수들 중 어느 것도 ST가 &lt;a href=&quot;#parser.expr&quot;&gt; &lt;code&gt;expr()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#parser.suite&quot;&gt; &lt;code&gt;suite()&lt;/code&gt; &lt;/a&gt; 를 통해 소스 코드 또는 &lt;a href=&quot;#parser.sequence2st&quot;&gt; &lt;code&gt;sequence2st()&lt;/code&gt; &lt;/a&gt; 를 통해 구문 분석 트리에서 작성되었는지 판별하는 데 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="63ba6e77a40ef9371295e90d99cc0d1db0adadfd" translate="yes" xml:space="preserve">
          <source>Two input methods has been added &lt;code&gt;Screen.textinput()&lt;/code&gt; and &lt;code&gt;Screen.numinput()&lt;/code&gt;. These popup input dialogs and return strings and numbers respectively.</source>
          <target state="translated">&lt;code&gt;Screen.textinput()&lt;/code&gt; 과 &lt;code&gt;Screen.numinput()&lt;/code&gt; 두 가지 입력 방법이 추가되었습니다 . 이 팝업 입력 대화 상자와 각각 문자열과 숫자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8a4d24f36d4d5b93fc0a050914dae06ceeb82597" translate="yes" xml:space="preserve">
          <source>Two methods are offered to support tracking whether enqueued tasks have been fully processed by daemon consumer threads.</source>
          <target state="translated">대기열에있는 작업이 데몬 소비자 스레드에 의해 완전히 처리되었는지 추적하는 데 도움이되는 두 가지 방법이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="bd3d5af48f3448d7859d083f308cded341e694d8" translate="yes" xml:space="preserve">
          <source>Two methods support conversion to and from hexadecimal strings. Since Python&amp;rsquo;s floats are stored internally as binary numbers, converting a float to or from a &lt;em&gt;decimal&lt;/em&gt; string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work.</source>
          <target state="translated">두 가지 방법은 16 진 문자열과의 변환을 지원합니다. 파이썬의 부동 소수점은 내부적으로 이진수로 저장되므로 부동 &lt;em&gt;소수점을 십진&lt;/em&gt; 문자열 로 또는 &lt;em&gt;소수&lt;/em&gt; 문자열 로 변환 할 때는 일반적으로 작은 반올림 오류가 발생합니다. 반대로 16 진 문자열을 사용하면 부동 소수점 숫자를 정확하게 표현하고 지정할 수 있습니다. 디버깅 및 수치 작업에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="872eb4299a16afe1171ea96869c4a6a12570000d" translate="yes" xml:space="preserve">
          <source>Two module-level constants are defined for the &lt;code&gt;f_flag&lt;/code&gt; attribute&amp;rsquo;s bit-flags: if &lt;code&gt;ST_RDONLY&lt;/code&gt; is set, the filesystem is mounted read-only, and if &lt;code&gt;ST_NOSUID&lt;/code&gt; is set, the semantics of setuid/setgid bits are disabled or not supported.</source>
          <target state="translated">&lt;code&gt;f_flag&lt;/code&gt; 속성의 비트 플래그에 대해 두 개의 모듈 레벨 상수가 정의 됩니다. &lt;code&gt;ST_RDONLY&lt;/code&gt; 가 설정되면 파일 시스템이 읽기 전용으로 마운트되고 &lt;code&gt;ST_NOSUID&lt;/code&gt; 가 설정되면 setuid / setgid 비트의 의미가 사용 불가능하거나 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="be1b45cb0ecebb3689d6d197233fac8a8c5b7cdb" translate="yes" xml:space="preserve">
          <source>Two more operations with the same syntactic priority, &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#not-in&quot;&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/a&gt;, are supported by types that are &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; or implement the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#not-in&quot;&gt; &lt;code&gt;not in&lt;/code&gt; &lt;/a&gt; 동일한 구문 우선 순위를 갖는 두 개의 추가 오퍼레이션 이 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-iterable&quot;&gt;반복 가능&lt;/a&gt; 하거나 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt; 메소드를 구현하는 유형에 의해 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="57484ab1c96de366c7659613da4a7a19820bbb45" translate="yes" xml:space="preserve">
          <source>Two more operations with the same syntactic priority, &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#not-in&quot;&gt;&lt;code&gt;not in&lt;/code&gt;&lt;/a&gt;, are supported by types that are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; or implement the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__contains__&quot;&gt;&lt;code&gt;__contains__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Two more operations with the same syntactic priority, &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#not-in&quot;&gt; &lt;code&gt;not in&lt;/code&gt; &lt;/a&gt;, are supported by types that are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; or implement the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__contains__&quot;&gt; &lt;code&gt;__contains__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="fdf7de28689c34cb727db34c6fd3d72b113d5340" translate="yes" xml:space="preserve">
          <source>Two problems often exist with deep copy operations that don&amp;rsquo;t exist with shallow copy operations:</source>
          <target state="translated">얕은 복사 작업에는 존재하지 않는 깊은 복사 작업에는 종종 두 가지 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2b86a9fb4ed899789b8e540b927de2494814ac0" translate="yes" xml:space="preserve">
          <source>Two, the components to implement &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; are exposed in this package, making it easier for users to create their own custom objects (known generically as an &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;) to participate in the import process.</source>
          <target state="translated">구현하는 두, 구성 요소 &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; 사용자가보다 쉽게 (AN으로 일반적으로 알려진 자신의 사용자 정의 개체를 생성 할 수있어이 패키지에 노출되어 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-importer&quot;&gt;수입을&lt;/a&gt; 가져 오기 프로세스에 참여).</target>
        </trans-unit>
        <trans-unit id="4baa17858ab79243a22b590fac0cb9c8e0e73f55" translate="yes" xml:space="preserve">
          <source>Two, the components to implement &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; are exposed in this package, making it easier for users to create their own custom objects (known generically as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;) to participate in the import process.</source>
          <target state="translated">Two, the components to implement &lt;a href=&quot;https://docs.python.org/3.9/reference/simple_stmts.html#import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; are exposed in this package, making it easier for users to create their own custom objects (known generically as an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-importer&quot;&gt;importer&lt;/a&gt;) to participate in the import process.</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="fb42e6da9092ad24cf8712d8f033b482720c8ba7" translate="yes" xml:space="preserve">
          <source>Type Mapping</source>
          <target state="translated">타입 매핑</target>
        </trans-unit>
        <trans-unit id="f14b280e5383b1f17a84d6b572438fadbd026be6" translate="yes" xml:space="preserve">
          <source>Type Name</source>
          <target state="translated">타입 이름</target>
        </trans-unit>
        <trans-unit id="d2f9a9762f1f9c0b60540d7712d38a39e49c34fd" translate="yes" xml:space="preserve">
          <source>Type Objects</source>
          <target state="translated">유형 객체</target>
        </trans-unit>
        <trans-unit id="58cf557846d7f65d34e8a92739eef2665164fad4" translate="yes" xml:space="preserve">
          <source>Type aliases</source>
          <target state="translated">타입 별칭</target>
        </trans-unit>
        <trans-unit id="3904b98c101001c9fda3dac293772c6839673461" translate="yes" xml:space="preserve">
          <source>Type aliases are useful for simplifying complex type signatures. For example:</source>
          <target state="translated">유형 별칭은 복잡한 유형 서명을 단순화하는 데 유용합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fe2526f8a28470f60a37f388a8f0ef0c6f6542f1" translate="yes" xml:space="preserve">
          <source>Type code</source>
          <target state="translated">타입 코드</target>
        </trans-unit>
        <trans-unit id="08d7f20ec3a1f2c32685f21a24578ef7bfd33afb" translate="yes" xml:space="preserve">
          <source>Type conversions</source>
          <target state="translated">타입 변환</target>
        </trans-unit>
        <trans-unit id="adcfc2aff0b9f03c65af390bc572e32e3fde7685" translate="yes" xml:space="preserve">
          <source>Type objects represent the various object types. An object&amp;rsquo;s type is accessed by the built-in function &lt;a href=&quot;functions#type&quot;&gt;&lt;code&gt;type()&lt;/code&gt;&lt;/a&gt;. There are no special operations on types. The standard module &lt;a href=&quot;types#module-types&quot;&gt;&lt;code&gt;types&lt;/code&gt;&lt;/a&gt; defines names for all standard built-in types.</source>
          <target state="translated">유형 객체는 다양한 객체 유형을 나타냅니다. 객체의 유형은 내장 함수 &lt;a href=&quot;functions#type&quot;&gt; &lt;code&gt;type()&lt;/code&gt; &lt;/a&gt; 에 의해 액세스됩니다 . 타입에 대한 특별한 연산은 없습니다. 표준 모듈 &lt;a href=&quot;types#module-types&quot;&gt; &lt;code&gt;types&lt;/code&gt; &lt;/a&gt; 은 모든 표준 내장 유형의 이름을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="aa32bfc1d6a5fce412d12cc5f6131574b940d465" translate="yes" xml:space="preserve">
          <source>Type of &lt;em&gt;section&lt;/em&gt; is not checked which lets users create non-string named sections. This behaviour is unsupported and may cause internal errors.</source>
          <target state="translated">사용자가 문자열이 아닌 섹션을 만들 수있는 &lt;em&gt;섹션&lt;/em&gt; 유형을 선택하지 않았습니다. 이 동작은 지원되지 않으며 내부 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f8b3b37475e6f3fa8cee7c6299d976516072c02" translate="yes" xml:space="preserve">
          <source>Type of compression for the archive member.</source>
          <target state="translated">아카이브 멤버의 압축 유형입니다.</target>
        </trans-unit>
        <trans-unit id="b02de00fc7c13da0d493703834670f2d1b7600d4" translate="yes" xml:space="preserve">
          <source>Type of device if an inode device.</source>
          <target state="translated">inode 장치 인 경우 장치의 유형입니다.</target>
        </trans-unit>
        <trans-unit id="11d984e097d6ee06063e87e1e2de5c09652bbf3c" translate="yes" xml:space="preserve">
          <source>Type of interval</source>
          <target state="translated">간격 유형</target>
        </trans-unit>
        <trans-unit id="294a0ffbd46fd4e89c9826ea69865fc9375f0653" translate="yes" xml:space="preserve">
          <source>Type of method</source>
          <target state="translated">방법의 유형</target>
        </trans-unit>
        <trans-unit id="6ddf33ad1a33d0bab4a03b93d6faf8800f5bf097" translate="yes" xml:space="preserve">
          <source>Type variable.</source>
          <target state="translated">변수를 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="24577861cc8fef54c83c65aaf45d45975c7ced44" translate="yes" xml:space="preserve">
          <source>Type variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See &lt;a href=&quot;#typing.Generic&quot;&gt;&lt;code&gt;Generic&lt;/code&gt;&lt;/a&gt; for more information on generic types. Generic functions work as follows:</source>
          <target state="translated">Type variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See &lt;a href=&quot;#typing.Generic&quot;&gt; &lt;code&gt;Generic&lt;/code&gt; &lt;/a&gt; for more information on generic types. Generic functions work as follows:</target>
        </trans-unit>
        <trans-unit id="baf680aae15157638dae127ad7434adccbdefecc" translate="yes" xml:space="preserve">
          <source>Type variables exist primarily for the benefit of static type checkers. They serve as the parameters for generic types as well as for generic function definitions. See class Generic for more information on generic types. Generic functions work as follows:</source>
          <target state="translated">유형 변수는 주로 정적 유형 검사기의 이점을 위해 존재합니다. 그것들은 제네릭 함수 정의뿐만 아니라 제네릭 형식의 매개 변수 역할을합니다. 제네릭 형식에 대한 자세한 내용은 Generic 클래스를 참조하십시오. 일반 함수는 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="abd88df25ccb148cda7f9f5350705633e0c6805c" translate="yes" xml:space="preserve">
          <source>Type variables may be marked covariant or contravariant by passing &lt;code&gt;covariant=True&lt;/code&gt; or &lt;code&gt;contravariant=True&lt;/code&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; for more details. By default type variables are invariant. Alternatively, a type variable may specify an upper bound using &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt;. This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;covariant=True&lt;/code&gt; 또는 &lt;code&gt;contravariant=True&lt;/code&gt; 를 전달하여 유형 변수를 공변량 또는 공변량으로 표시 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; 를 참조하십시오. 기본적으로 유형 변수는 변하지 않습니다. 또는 type 변수는 &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt; 을 사용하여 상한을 지정할 수 있습니다 . 이는 유형 변수로 (명시 적으로 또는 암시 적으로) 대체 된 실제 유형이 경계 유형의 서브 클래스 여야 함을 의미합니다 ( &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-13&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="5fe184b1e7c4b63f5282ac233036dbefeef8903a" translate="yes" xml:space="preserve">
          <source>Type variables may be marked covariant or contravariant by passing &lt;code&gt;covariant=True&lt;/code&gt; or &lt;code&gt;contravariant=True&lt;/code&gt;. See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; for more details. By default type variables are invariant. Alternatively, a type variable may specify an upper bound using &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt;. This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">Type variables may be marked covariant or contravariant by passing &lt;code&gt;covariant=True&lt;/code&gt; or &lt;code&gt;contravariant=True&lt;/code&gt; . See &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-21&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; for more details. By default type variables are invariant. Alternatively, a type variable may specify an upper bound using &lt;code&gt;bound=&amp;lt;type&amp;gt;&lt;/code&gt; . This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="a6be1034d703cbdf5582dfd0bbf7526f130e553d" translate="yes" xml:space="preserve">
          <source>Typed version of &lt;a href=&quot;collections#collections.namedtuple&quot;&gt;&lt;code&gt;collections.namedtuple()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;collections#collections.namedtuple&quot;&gt; &lt;code&gt;collections.namedtuple()&lt;/code&gt; &lt;/a&gt; 의 형식화 된 버전 .</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="e2e596d43ca753aabf829e5d2f7b47881bc072ed" translate="yes" xml:space="preserve">
          <source>Types and members</source>
          <target state="translated">유형과 멤버</target>
        </trans-unit>
        <trans-unit id="df88a44cd87ff57172e226ab3e76d8e0cb3d63d4" translate="yes" xml:space="preserve">
          <source>Types are written like this: &lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">유형은 다음과 같이 작성됩니다 : &lt;code&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8d5e7cdf61e73f46e18d9cee2a01332da9df6522" translate="yes" xml:space="preserve">
          <source>Types that are conformable (e.g. that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):</source>
          <target state="translated">적합한 유형 (예 : XML을 통해 마샬링 할 수있는 유형)에는 다음이 포함됩니다 (표시된 경우를 제외하고는 동일한 Python 유형으로 마샬링되지 않음).</target>
        </trans-unit>
        <trans-unit id="ffa096628994d74c4f106032627242fbdd4a6146" translate="yes" xml:space="preserve">
          <source>Typical use of these names is for &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; checks.</source>
          <target state="translated">이러한 이름은 일반적으로 &lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;functions#issubclass&quot;&gt; &lt;code&gt;issubclass()&lt;/code&gt; &lt;/a&gt; 검사에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a453b951365e1cf38b6e3dbd7827785d21193262" translate="yes" xml:space="preserve">
          <source>Typical use:</source>
          <target state="translated">일반적인 사용 :</target>
        </trans-unit>
        <trans-unit id="edcc18ac436a03bd44d6ef6223e83024174e89fd" translate="yes" xml:space="preserve">
          <source>Typical uses:</source>
          <target state="translated">일반적인 용도 :</target>
        </trans-unit>
        <trans-unit id="ac8bd79c1f65ce75577f89953181b5836814ced2" translate="yes" xml:space="preserve">
          <source>Typically Futures are used to enable low-level callback-based code (e.g. in protocols implemented using asyncio &lt;a href=&quot;asyncio-protocol#asyncio-transports-protocols&quot;&gt;transports&lt;/a&gt;) to interoperate with high-level async/await code.</source>
          <target state="translated">일반적으로 Futures는 저수준 콜백 기반 코드 (예 : asyncio &lt;a href=&quot;asyncio-protocol#asyncio-transports-protocols&quot;&gt;transports를&lt;/a&gt; 사용하여 구현 된 프로토콜 )가 고수준 비동기 / 대기 코드와 상호 운용 되도록하는 데 사용 됩니다.</target>
        </trans-unit>
        <trans-unit id="aa0d8913086c02de73375f9a037bf2d54a4d4b86" translate="yes" xml:space="preserve">
          <source>Typically, &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; is a list of directory names as strings. This module also allows an item of &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; to be a string naming a ZIP file archive. The ZIP archive can contain a subdirectory structure to support package imports, and a path within the archive can be specified to only import from a subdirectory. For example, the path &lt;code&gt;example.zip/lib/&lt;/code&gt; would only import from the &lt;code&gt;lib/&lt;/code&gt; subdirectory within the archive.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt; 는 문자열로 표시되는 디렉토리 이름 목록입니다. 이 모듈은 또한 &lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt; 의 항목이 ZIP 파일 아카이브를 명명하는 문자열이되도록합니다. ZIP 아카이브는 패키지 가져 오기를 지원하기위한 서브 디렉토리 구조를 포함 할 수 있으며, 서브 디렉토리에서만 가져 오도록 아카이브 내의 경로를 지정할 수 있습니다. 예를 들어, &lt;code&gt;example.zip/lib/&lt;/code&gt; 경로 는 아카이브 내의 &lt;code&gt;lib/&lt;/code&gt; 서브 디렉토리 에서만 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="307c90d60f24c34409c0cbbb907e2ebee94f9501" translate="yes" xml:space="preserve">
          <source>Typically, a mail user agent application moves all of the messages in the &lt;code&gt;new&lt;/code&gt; subdirectory to the &lt;code&gt;cur&lt;/code&gt; subdirectory after the first time the user opens and closes the mailbox, recording that the messages are old whether or not they&amp;rsquo;ve actually been read. Each message in &lt;code&gt;cur&lt;/code&gt; has an &amp;ldquo;info&amp;rdquo; section added to its file name to store information about its state. (Some mail readers may also add an &amp;ldquo;info&amp;rdquo; section to messages in &lt;code&gt;new&lt;/code&gt;.) The &amp;ldquo;info&amp;rdquo; section may take one of two forms: it may contain &amp;ldquo;2,&amp;rdquo; followed by a list of standardized flags (e.g., &amp;ldquo;2,FR&amp;rdquo;) or it may contain &amp;ldquo;1,&amp;rdquo; followed by so-called experimental information. Standard flags for Maildir messages are as follows:</source>
          <target state="translated">일반적으로 메일 사용자 에이전트 응용 프로그램 은 사용자가 처음으로 사서함을 열고 닫은 후 &lt;code&gt;new&lt;/code&gt; 하위 디렉터리 의 모든 메시지를 &lt;code&gt;cur&lt;/code&gt; 하위 디렉터리로 이동하여 실제로 읽었는지 여부에 관계없이 메시지가 오래되었음을 기록합니다. &lt;code&gt;cur&lt;/code&gt; 각 메시지에는 파일 정보에&amp;ldquo;info&amp;rdquo;섹션이 추가되어 해당 상태에 대한 정보를 저장합니다. (일부 메일 리더는 &lt;code&gt;new&lt;/code&gt; 에있는 메시지에 &quot;info&quot;섹션을 추가 할 수도 있습니다 .) &quot;info&quot;섹션은 두 가지 형식 중 하나를 취할 수 있습니다. &quot;2&quot;와 표준화 된 플래그 목록 (예 : &quot;2, FR &quot;) 또는&quot;1 &quot;과 소위 실험 정보가 포함될 수 있습니다. Maildir 메시지의 표준 플래그는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c9569066be942f47eac360ee7e9604e189cacf75" translate="yes" xml:space="preserve">
          <source>Typically, clamping occurs when an exponent falls outside the context&amp;rsquo;s &lt;code&gt;Emin&lt;/code&gt; and &lt;code&gt;Emax&lt;/code&gt; limits. If possible, the exponent is reduced to fit by adding zeros to the coefficient.</source>
          <target state="translated">일반적으로 클램핑은 지수가 컨텍스트의 &lt;code&gt;Emin&lt;/code&gt; 및 &lt;code&gt;Emax&lt;/code&gt; 한계를 벗어날 때 발생합니다 . 가능하면 지수에 0을 추가하여 지수가 적합하게 줄어 듭니다.</target>
        </trans-unit>
        <trans-unit id="16226deec705b103a976d79100c8b31ccbd60936" translate="yes" xml:space="preserve">
          <source>Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys. This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI. For example, if there is a WSGI application at &lt;code&gt;/foo&lt;/code&gt;, and the request URI path is &lt;code&gt;/foo/bar/baz&lt;/code&gt;, and the WSGI application at &lt;code&gt;/foo&lt;/code&gt; calls &lt;a href=&quot;#wsgiref.util.shift_path_info&quot;&gt;&lt;code&gt;shift_path_info()&lt;/code&gt;&lt;/a&gt;, it will receive the string &amp;ldquo;bar&amp;rdquo;, and the environment will be updated to be suitable for passing to a WSGI application at &lt;code&gt;/foo/bar&lt;/code&gt;. That is, &lt;code&gt;SCRIPT_NAME&lt;/code&gt; will change from &lt;code&gt;/foo&lt;/code&gt; to &lt;code&gt;/foo/bar&lt;/code&gt;, and &lt;code&gt;PATH_INFO&lt;/code&gt; will change from &lt;code&gt;/bar/baz&lt;/code&gt; to &lt;code&gt;/baz&lt;/code&gt;.</source>
          <target state="translated">일반적으로이 루틴은 요청 URI 경로의 각 부분을 처리하는 데 사용됩니다 (예 : 경로를 일련의 사전 키로 처리). 이 루틴은 전달 된 환경을 수정하여 대상 URI에있는 다른 WSGI 애플리케이션을 호출하는 데 적합합니다. 예를 들어, &lt;code&gt;/foo&lt;/code&gt; 에 WSGI 애플리케이션이 있고 요청 URI 경로가 &lt;code&gt;/foo/bar/baz&lt;/code&gt; 이고 &lt;code&gt;/foo&lt;/code&gt; 에 있는 WSGI 애플리케이션 이 &lt;a href=&quot;#wsgiref.util.shift_path_info&quot;&gt; &lt;code&gt;shift_path_info()&lt;/code&gt; &lt;/a&gt; 호출 하면 문자열 &quot;bar&quot;가 수신되고 환경이 &lt;code&gt;/foo/bar&lt;/code&gt; 의 WSGI 애플리케이션으로 전달하기에 적합하도록 업데이트됩니다 . 즉, &lt;code&gt;SCRIPT_NAME&lt;/code&gt; 은 &lt;code&gt;/foo&lt;/code&gt; 에서 &lt;code&gt;/foo/bar&lt;/code&gt; 로 변경되며 &lt;code&gt;PATH_INFO&lt;/code&gt; 는 &lt;code&gt;/bar/baz&lt;/code&gt; 에서 &lt;code&gt;/baz&lt;/code&gt; 로 변경 됩니다.</target>
        </trans-unit>
        <trans-unit id="4c25227e4d8caebe673fedb75cae4fb249b96c0f" translate="yes" xml:space="preserve">
          <source>Typically, you should use an &amp;ldquo;/usr/bin/env python2&amp;rdquo; or &amp;ldquo;/usr/bin/env python3&amp;rdquo;, depending on whether your code is written for Python 2 or 3.</source>
          <target state="translated">일반적으로 코드가 Python 2 또는 3 용으로 작성되었는지에 따라 &quot;/ usr / bin / env python2&quot;또는 &quot;/ usr / bin / env python3&quot;을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e713da74eea6cd17134e526d4f4bfa85ea29e095" translate="yes" xml:space="preserve">
          <source>U16, utf16</source>
          <target state="translated">U16, utf16</target>
        </trans-unit>
        <trans-unit id="c72fcac268773b2862516cee4a159e76b48faf49" translate="yes" xml:space="preserve">
          <source>U32, utf32</source>
          <target state="translated">U32, utf32</target>
        </trans-unit>
        <trans-unit id="f11edf3411c63e0f8d0db9d99f22c6d068007f5f" translate="yes" xml:space="preserve">
          <source>U7, unicode-1-1-utf-7</source>
          <target state="translated">U7, 유니 코드 -1-1-UTF-7</target>
        </trans-unit>
        <trans-unit id="d24ccdbf9775e02769365300203e1554ee400e3d" translate="yes" xml:space="preserve">
          <source>U8, UTF, utf8, cp65001</source>
          <target state="translated">U8, UTF, utf8, cp65001</target>
        </trans-unit>
        <trans-unit id="6acf01764f7a6626f0891a32f61a073dc0762d8b" translate="yes" xml:space="preserve">
          <source>UDP Echo Client</source>
          <target state="translated">UDP 에코 클라이언트</target>
        </trans-unit>
        <trans-unit id="343e5cce60ceccd79ae37a898828ecb0fca0950a" translate="yes" xml:space="preserve">
          <source>UDP Echo Server</source>
          <target state="translated">UDP 에코 서버</target>
        </trans-unit>
        <trans-unit id="ba2e61c0219a993878c029ea5544b89e5fd3ae93" translate="yes" xml:space="preserve">
          <source>ULP stands for &amp;ldquo;Unit in the Last Place&amp;rdquo;.</source>
          <target state="translated">ULP stands for &amp;ldquo;Unit in the Last Place&amp;rdquo;.</target>
        </trans-unit>
        <trans-unit id="7d0bd1a5584aa8e277199b8bce0be0eebe6eae7c" translate="yes" xml:space="preserve">
          <source>UNC drive names are not considered:</source>
          <target state="translated">UNC 드라이브 이름은 고려되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0d532d59e790c855bac6f2fd3a3d63a663ac152d" translate="yes" xml:space="preserve">
          <source>UNC shares always have a root:</source>
          <target state="translated">UNC 공유에는 항상 루트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1754f7546fc5579a80084a7fbd2c4dbd78786101" translate="yes" xml:space="preserve">
          <source>UNC shares are also considered drives:</source>
          <target state="translated">UNC 공유도 드라이브로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="46423b62f1108237d6637f21aa348b01ed444951" translate="yes" xml:space="preserve">
          <source>URL Parsing</source>
          <target state="translated">URL 파싱</target>
        </trans-unit>
        <trans-unit id="ac79cb4725903fc4cbc65532def1e7734288ed43" translate="yes" xml:space="preserve">
          <source>URL Quoting</source>
          <target state="translated">URL 인용</target>
        </trans-unit>
        <trans-unit id="c4b7ac1e2711f01d24c210e143cb9a34515550f7" translate="yes" xml:space="preserve">
          <source>URL linking to a comment from the server explaining the function of this cookie, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">URL이 쿠키, 또는의 기능을 설명하는 서버에서 댓글에 링크 &lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="39ca3350b8900002d53d7c65c147fe5c8b6f43b0" translate="yes" xml:space="preserve">
          <source>URL of the resource retrieved, commonly used to determine if a redirect was followed.</source>
          <target state="translated">URL of the resource retrieved, commonly used to determine if a redirect was followed.</target>
        </trans-unit>
        <trans-unit id="8681bd94130610c53bd7f38805813627eb6cdf42" translate="yes" xml:space="preserve">
          <source>URL opening with automatic cookie handling.</source>
          <target state="translated">자동 쿠키 처리를 통한 URL 열기</target>
        </trans-unit>
        <trans-unit id="8c6ff6209d4df1bcf1d35de653b99ca192c7aa0c" translate="yes" xml:space="preserve">
          <source>URL scheme specifier</source>
          <target state="translated">URL 스킴 지정자</target>
        </trans-unit>
        <trans-unit id="8fedebad85ba6d8c62697769bc62126e584a5f4b" translate="yes" xml:space="preserve">
          <source>URL with no fragment</source>
          <target state="translated">조각이없는 URL</target>
        </trans-unit>
        <trans-unit id="5575b942a5f6d8077af646b856fee8b432912c99" translate="yes" xml:space="preserve">
          <source>UTC is Coordinated Universal Time (formerly known as Greenwich Mean Time, or GMT). The acronym UTC is not a mistake but a compromise between English and French.</source>
          <target state="translated">UTC는 협정 세계시 (구 그리니치 표준시 또는 GMT)입니다. 약어 UTC는 실수가 아니라 영어와 프랑스어의 타협입니다.</target>
        </trans-unit>
        <trans-unit id="7bd3d96c46d2e3221efb69d9b12e15082127b8e4" translate="yes" xml:space="preserve">
          <source>UTC offset in the form &lt;code&gt;&amp;plusmn;HHMM[SS[.ffffff]]&lt;/code&gt; (empty string if the object is naive).</source>
          <target state="translated">&lt;code&gt;&amp;plusmn;HHMM[SS[.ffffff]]&lt;/code&gt; 형식의 UTC 오프셋 (객체가 순진한 경우 빈 문자열).</target>
        </trans-unit>
        <trans-unit id="de4a45e716017695cfee4bc84f1a4e0c8e1e9b9a" translate="yes" xml:space="preserve">
          <source>UTF-16BE</source>
          <target state="translated">UTF-16BE</target>
        </trans-unit>
        <trans-unit id="6af12beb19d40aa853839c482e864ce703f4d2a9" translate="yes" xml:space="preserve">
          <source>UTF-16LE</source>
          <target state="translated">UTF-16LE</target>
        </trans-unit>
        <trans-unit id="9e4d8d4f017185a065b570c771eb332a1c842bec" translate="yes" xml:space="preserve">
          <source>UTF-32BE</source>
          <target state="translated">UTF-32BE</target>
        </trans-unit>
        <trans-unit id="35cabe85c31dfe3f6b86974de33fef51a0f7276a" translate="yes" xml:space="preserve">
          <source>UTF-32LE</source>
          <target state="translated">UTF-32LE</target>
        </trans-unit>
        <trans-unit id="715c491a11c1b08bfcd9854613597d9d8b9e6f02" translate="yes" xml:space="preserve">
          <source>UUID: &lt;code&gt;{FB605B73-AAC2-49A6-9A2F-25416AEA0573}&lt;/code&gt;</source>
          <target state="translated">UUID: &lt;code&gt;{FB605B73-AAC2-49A6-9A2F-25416AEA0573}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="515451058797b204e188dd70f8d20f32dacca327" translate="yes" xml:space="preserve">
          <source>Ukrainian</source>
          <target state="translated">Ukrainian</target>
        </trans-unit>
        <trans-unit id="180209844089ebe0890b16d2a26e4bdbe691991b" translate="yes" xml:space="preserve">
          <source>Ultimately, the responsibility of how to interpret the annotations (if at all) is the responsibility of the tool or library encountering the &lt;code&gt;Annotated&lt;/code&gt; type. A tool or library encountering an &lt;code&gt;Annotated&lt;/code&gt; type can scan through the annotations to determine if they are of interest (e.g., using &lt;code&gt;isinstance()&lt;/code&gt;).</source>
          <target state="translated">Ultimately, the responsibility of how to interpret the annotations (if at all) is the responsibility of the tool or library encountering the &lt;code&gt;Annotated&lt;/code&gt; type. A tool or library encountering an &lt;code&gt;Annotated&lt;/code&gt; type can scan through the annotations to determine if they are of interest (e.g., using &lt;code&gt;isinstance()&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21c390ed919f285d1fbd2bc30ead55ffc59b9262" translate="yes" xml:space="preserve">
          <source>Unary addition and subtraction are shortcuts for adding an empty counter or subtracting from an empty counter.</source>
          <target state="translated">단항 더하기 및 빼기는 빈 카운터를 추가하거나 빈 카운터에서 빼기 바로 가기입니다.</target>
        </trans-unit>
        <trans-unit id="76f4685e58374089d5c55b4161cd981dc6132724" translate="yes" xml:space="preserve">
          <source>Unary numeric methods: &lt;code&gt;__neg__&lt;/code&gt;, &lt;code&gt;__pos__&lt;/code&gt; and &lt;code&gt;__invert__&lt;/code&gt;</source>
          <target state="translated">단항 숫자 방법 : &lt;code&gt;__neg__&lt;/code&gt; , &lt;code&gt;__pos__&lt;/code&gt; 및 &lt;code&gt;__invert__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ec04384d60dde2abd489f1b93a17f46f88408ec" translate="yes" xml:space="preserve">
          <source>Unary operations take the top of the stack, apply the operation, and push the result back on the stack.</source>
          <target state="translated">단항 연산은 스택의 상단을 차지하고 작업을 적용한 다음 결과를 스택에 다시 밀어 넣습니다.</target>
        </trans-unit>
        <trans-unit id="4a4dc37257d5fdb377e941ad74421dd9833ea063" translate="yes" xml:space="preserve">
          <source>Unary operator tokens. &lt;a href=&quot;#ast.Not&quot;&gt;&lt;code&gt;Not&lt;/code&gt;&lt;/a&gt; is the &lt;code&gt;not&lt;/code&gt; keyword, &lt;a href=&quot;#ast.Invert&quot;&gt;&lt;code&gt;Invert&lt;/code&gt;&lt;/a&gt; is the &lt;code&gt;~&lt;/code&gt; operator.</source>
          <target state="translated">Unary operator tokens. &lt;a href=&quot;#ast.Not&quot;&gt; &lt;code&gt;Not&lt;/code&gt; &lt;/a&gt; is the &lt;code&gt;not&lt;/code&gt; keyword, &lt;a href=&quot;#ast.Invert&quot;&gt; &lt;code&gt;Invert&lt;/code&gt; &lt;/a&gt; is the &lt;code&gt;~&lt;/code&gt; operator.</target>
        </trans-unit>
        <trans-unit id="af724c9a541ce2ab11909206f58df607bfbac91b" translate="yes" xml:space="preserve">
          <source>UnboundLocalError</source>
          <target state="translated">UnboundLocalError</target>
        </trans-unit>
        <trans-unit id="0bbb24dbe913bf1acad1b3813b19242195efde3d" translate="yes" xml:space="preserve">
          <source>Uncomment Region</source>
          <target state="translated">주석 해제 영역</target>
        </trans-unit>
        <trans-unit id="09163dc46bc3ebc70b19a70c153e7b0ff2a536a0" translate="yes" xml:space="preserve">
          <source>Unconditionally skip the decorated test. &lt;em&gt;reason&lt;/em&gt; should describe why the test is being skipped.</source>
          <target state="translated">무조건 장식 된 테스트를 건너 뜁니다. &lt;em&gt;이유&lt;/em&gt; 는 테스트를 건너 뛴 &lt;em&gt;이유&lt;/em&gt; 를 설명해야합니다.</target>
        </trans-unit>
        <trans-unit id="b33dbdee390d46cbc4b2f0c8d71034b96e387e3a" translate="yes" xml:space="preserve">
          <source>Under System Preferences: Dock, one can set &amp;ldquo;Prefer tabs when opening documents&amp;rdquo; to &amp;ldquo;Always&amp;rdquo;. This setting is not compatible with the tk/tkinter GUI framework used by IDLE, and it breaks a few IDLE features.</source>
          <target state="translated">시스템 환경 설정 : 도크에서&amp;ldquo;문서를 열 때 선호 탭&amp;rdquo;을&amp;ldquo;항상&amp;rdquo;으로 설정할 수 있습니다. 이 설정은 IDLE에서 사용하는 tk / tkinter GUI 프레임 워크와 호환되지 않으며 몇 가지 IDLE 기능을 손상시킵니다.</target>
        </trans-unit>
        <trans-unit id="09ff4fd5fd078f6a770a49eda709711308d815f4" translate="yes" xml:space="preserve">
          <source>Under Unix, graphical browsers are preferred under X11, but text-mode browsers will be used if graphical browsers are not available or an X11 display isn&amp;rsquo;t available. If text-mode browsers are used, the calling process will block until the user exits the browser.</source>
          <target state="translated">Unix에서는 그래픽 브라우저가 X11에서 선호되지만 그래픽 브라우저를 사용할 수 없거나 X11 디스플레이를 사용할 수없는 경우 텍스트 모드 브라우저가 사용됩니다. 텍스트 모드 브라우저를 사용하는 경우 사용자가 브라우저를 종료 할 때까지 호출 프로세스가 차단됩니다.</target>
        </trans-unit>
        <trans-unit id="cc774a2bad012898ce4ca44d59cd0ee58a92ba80" translate="yes" xml:space="preserve">
          <source>Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as &lt;a href=&quot;os#os.fdopen&quot;&gt;&lt;code&gt;os.fdopen()&lt;/code&gt;&lt;/a&gt;). Unix does not have this limitation.</source>
          <target state="translated">Windows에서는 파일 디스크립터를 사용할 수있는 위치 (예 : &lt;a href=&quot;os#os.fdopen&quot;&gt; &lt;code&gt;os.fdopen()&lt;/code&gt; &lt;/a&gt; ) 에서이 메소드가 리턴 한 작은 정수를 사용할 수 없습니다 . 유닉스에는이 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="43487233aaa2dc1293a621ac76f9af16f9598bae" translate="yes" xml:space="preserve">
          <source>Under Windows, if the &lt;em&gt;winerror&lt;/em&gt; constructor argument is an integer, the &lt;a href=&quot;#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; attribute is determined from the Windows error code, and the &lt;em&gt;errno&lt;/em&gt; argument is ignored. On other platforms, the &lt;em&gt;winerror&lt;/em&gt; argument is ignored, and the &lt;a href=&quot;#OSError.winerror&quot;&gt;&lt;code&gt;winerror&lt;/code&gt;&lt;/a&gt; attribute does not exist.</source>
          <target state="translated">Windows에서 &lt;em&gt;winerror&lt;/em&gt; 생성자 인수가 정수인 경우 &lt;a href=&quot;#OSError.errno&quot;&gt; &lt;code&gt;errno&lt;/code&gt; &lt;/a&gt; 속성은 Windows 오류 코드에서 결정되며 &lt;em&gt;errno&lt;/em&gt; 인수는 무시됩니다. 다른 플랫폼에서는 &lt;em&gt;winerror&lt;/em&gt; 인수가 무시되고 &lt;a href=&quot;#OSError.winerror&quot;&gt; &lt;code&gt;winerror&lt;/code&gt; &lt;/a&gt; 속성이 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="122a25820ac6c0450f8cdb99f851d87ee3865318" translate="yes" xml:space="preserve">
          <source>Under Windows, this gives you the native Windows error code. The &lt;a href=&quot;#OSError.errno&quot;&gt;&lt;code&gt;errno&lt;/code&gt;&lt;/a&gt; attribute is then an approximate translation, in POSIX terms, of that native error code.</source>
          <target state="translated">Windows에서는 기본 Windows 오류 코드가 표시됩니다. &lt;a href=&quot;#OSError.errno&quot;&gt; &lt;code&gt;errno&lt;/code&gt; &lt;/a&gt; 속성은 그 원시 오류 코드의 POSIX의 측면에서 대략적인 번역입니다.</target>
        </trans-unit>
        <trans-unit id="84a4f0c399ddd6228df271cff58e6d0b91d19d11" translate="yes" xml:space="preserve">
          <source>Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-32&quot;&gt;&lt;code&gt;PYTHONIOENCODING&lt;/code&gt;&lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-33&quot;&gt;&lt;code&gt;PYTHONUTF8&lt;/code&gt;&lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-34&quot;&gt;&lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt;&lt;/a&gt; is also set.</source>
          <target state="translated">모든 플랫폼에서 Python을 시작하기 전에 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-32&quot;&gt; &lt;code&gt;PYTHONIOENCODING&lt;/code&gt; &lt;/a&gt; 환경 변수 를 설정 하거나 새로운 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;utf8&lt;/code&gt; 명령 행 옵션 및 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-33&quot;&gt; &lt;code&gt;PYTHONUTF8&lt;/code&gt; &lt;/a&gt; 환경 변수 를 사용하여 문자 인코딩을 대체 할 수 있습니다 . 그러나 Windows 콘솔의 경우 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-34&quot;&gt; &lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt; &lt;/a&gt; 도 설정 한 경우에만 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="2046c226117f68ba6beddec1fe7aaa2a0f58d806" translate="yes" xml:space="preserve">
          <source>Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-33&quot;&gt;&lt;code&gt;PYTHONIOENCODING&lt;/code&gt;&lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-34&quot;&gt;&lt;code&gt;PYTHONUTF8&lt;/code&gt;&lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-35&quot;&gt;&lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt;&lt;/a&gt; is also set.</source>
          <target state="translated">Under all platforms, you can override the character encoding by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONIOENCODING&quot; id=&quot;index-33&quot;&gt; &lt;code&gt;PYTHONIOENCODING&lt;/code&gt; &lt;/a&gt; environment variable before starting Python or by using the new &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;utf8&lt;/code&gt; command line option and &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONUTF8&quot; id=&quot;index-34&quot;&gt; &lt;code&gt;PYTHONUTF8&lt;/code&gt; &lt;/a&gt; environment variable. However, for the Windows console, this only applies when &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO&quot; id=&quot;index-35&quot;&gt; &lt;code&gt;PYTHONLEGACYWINDOWSSTDIO&lt;/code&gt; &lt;/a&gt; is also set.</target>
        </trans-unit>
        <trans-unit id="86c529a5c56c8e1acf4f20d73e1f5a6a05aad70c" translate="yes" xml:space="preserve">
          <source>Under composition</source>
          <target state="translated">구성에서</target>
        </trans-unit>
        <trans-unit id="3bb49fa79f069f1e503b56cda42fc86a007f633b" translate="yes" xml:space="preserve">
          <source>Under some conditions &lt;code&gt;stdin&lt;/code&gt;, &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; as well as the original values &lt;code&gt;__stdin__&lt;/code&gt;, &lt;code&gt;__stdout__&lt;/code&gt; and &lt;code&gt;__stderr__&lt;/code&gt; can be &lt;code&gt;None&lt;/code&gt;. It is usually the case for Windows GUI apps that aren&amp;rsquo;t connected to a console and Python apps started with &lt;strong&gt;pythonw&lt;/strong&gt;.</source>
          <target state="translated">일부 조건에서 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 과 원래 값 &lt;code&gt;__stdin__&lt;/code&gt; , &lt;code&gt;__stdout__&lt;/code&gt; 및 &lt;code&gt;__stderr__&lt;/code&gt; 은 &lt;code&gt;None&lt;/code&gt; 일 수 있습니다 . 콘솔에 연결되지 않은 Windows GUI 앱과 &lt;strong&gt;pythonw로&lt;/strong&gt; 시작된 Python 앱의 경우가 일반적 입니다.</target>
        </trans-unit>
        <trans-unit id="793bf299721caabec9e054ab03d026686481a8fa" translate="yes" xml:space="preserve">
          <source>Under the covers, &lt;a href=&quot;#doctest.DocTestSuite&quot;&gt;&lt;code&gt;DocTestSuite()&lt;/code&gt;&lt;/a&gt; creates a &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; out of &lt;code&gt;doctest.DocTestCase&lt;/code&gt; instances, and &lt;code&gt;DocTestCase&lt;/code&gt; is a subclass of &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt;&lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;DocTestCase&lt;/code&gt; isn&amp;rsquo;t documented here (it&amp;rsquo;s an internal detail), but studying its code can answer questions about the exact details of &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; integration.</source>
          <target state="translated">표지 아래에서 &lt;a href=&quot;#doctest.DocTestSuite&quot;&gt; &lt;code&gt;DocTestSuite()&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;doctest.DocTestCase&lt;/code&gt; 인스턴스에서 &lt;a href=&quot;unittest#unittest.TestSuite&quot;&gt; &lt;code&gt;unittest.TestSuite&lt;/code&gt; 를&lt;/a&gt; 작성 하며 &lt;code&gt;DocTestCase&lt;/code&gt; 는 &lt;a href=&quot;unittest#unittest.TestCase&quot;&gt; &lt;code&gt;unittest.TestCase&lt;/code&gt; &lt;/a&gt; 의 서브 클래스입니다 . &lt;code&gt;DocTestCase&lt;/code&gt; 은 여기 (이 내부 세부 사항입니다) 문서화되어 있지 않습니다,하지만 코드를 공부의 정확한 세부 사항에 대한 질문에 대답 할 수있는 &lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt; 통합을.</target>
        </trans-unit>
        <trans-unit id="f37c5cd1f45c987d07df9e3363045593abcab226" translate="yes" xml:space="preserve">
          <source>Underline mode</source>
          <target state="translated">밑줄 모드</target>
        </trans-unit>
        <trans-unit id="cdc95b3422722b03a214a7379a614933ad297732" translate="yes" xml:space="preserve">
          <source>Underlying encoded files are always opened in binary mode. No automatic conversion of &lt;code&gt;'\n'&lt;/code&gt; is done on reading and writing. The &lt;em&gt;mode&lt;/em&gt; argument may be any binary mode acceptable to the built-in &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; function; the &lt;code&gt;'b'&lt;/code&gt; is automatically added.</source>
          <target state="translated">기본 인코딩 된 파일은 항상 이진 모드로 열립니다. 읽고 쓸 때 자동으로 &lt;code&gt;'\n'&lt;/code&gt; 변환 이 수행 되지 않습니다 . &lt;em&gt;모드&lt;/em&gt; 인수 수락 바이너리 모드 일 수있는 내장형 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 기능; &lt;code&gt;'b'&lt;/code&gt; 자동으로 추가된다.</target>
        </trans-unit>
        <trans-unit id="1c426c5d3245f89c66b8d44eb9a7418a57214883" translate="yes" xml:space="preserve">
          <source>Underlying file descriptor.</source>
          <target state="translated">기본 파일 설명자.</target>
        </trans-unit>
        <trans-unit id="39fc72124884d6573e4f9f89585f071ed0782696" translate="yes" xml:space="preserve">
          <source>Undo</source>
          <target state="translated">Undo</target>
        </trans-unit>
        <trans-unit id="facdf490605511ac7953e25b9d58432a61076c4e" translate="yes" xml:space="preserve">
          <source>Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.</source>
          <target state="translated">마지막 거북이 작업을 취소합니다 (반복적으로). 사용 가능한 실행 취소 작업 수는 실행 취소 버퍼 크기에 따라 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="12ffa2fcbfc6a89513586da0ea5253ed26d4950d" translate="yes" xml:space="preserve">
          <source>Undo the last change to the current window. A maximum of 1000 changes may be undone.</source>
          <target state="translated">현재 창에 대한 마지막 변경을 취소하십시오. 최대 1000 개의 변경 사항이 취소 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5173f55ca599f2baa4e8cf060601f130743f6e5c" translate="yes" xml:space="preserve">
          <source>Undocumented Modules</source>
          <target state="translated">문서화되지 않은 모듈</target>
        </trans-unit>
        <trans-unit id="7afa636f1dcd288a19ebf51b051831aa190255a4" translate="yes" xml:space="preserve">
          <source>Unescape &lt;code&gt;'&amp;amp;amp;'&lt;/code&gt;, &lt;code&gt;'&amp;amp;lt;'&lt;/code&gt;, and &lt;code&gt;'&amp;amp;gt;'&lt;/code&gt; in a string of data.</source>
          <target state="translated">&lt;code&gt;'&amp;amp;amp;'&lt;/code&gt; 탈출 , &lt;code&gt;'&amp;amp;lt;'&lt;/code&gt; 및 &lt;code&gt;'&amp;amp;gt;'&lt;/code&gt; 일련의 데이터로.</target>
        </trans-unit>
        <trans-unit id="1ae07519eb339aa0a6d65a7ecc51b6a9a2141e8c" translate="yes" xml:space="preserve">
          <source>Unfinished errata to &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2965에 대한&lt;/strong&gt;&lt;/a&gt; 미완성 정오표 .</target>
        </trans-unit>
        <trans-unit id="760f925ad5f161e1f96d23cf3994740c822322b1" translate="yes" xml:space="preserve">
          <source>Unfortunately, a CGI script will generally not run when you try it from the command line, and a script that works perfectly from the command line may fail mysteriously when run from the server. There&amp;rsquo;s one reason why you should still test your script from the command line: if it contains a syntax error, the Python interpreter won&amp;rsquo;t execute it at all, and the HTTP server will most likely send a cryptic error to the client.</source>
          <target state="translated">불행히도 CGI 스크립트는 일반적으로 명령 줄에서 시도 할 때 실행되지 않으며 명령 줄에서 완벽하게 작동하는 스크립트가 서버에서 실행될 때 신비하게 실패 할 수 있습니다. 명령 행에서 스크립트를 테스트해야하는 한 가지 이유가 있습니다. 구문 오류가 포함 된 경우 Python 인터프리터는 스크립트를 전혀 실행하지 않으며 HTTP 서버는 대부분 클라이언트에게 암호 오류를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="4cb76619273a40dbd3b69446939d186f550fa921" translate="yes" xml:space="preserve">
          <source>Unfortunately, in the current implementation of &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; it is not possible to hand over an arbitrary Python variable to a widget through a &lt;code&gt;variable&lt;/code&gt; or &lt;code&gt;textvariable&lt;/code&gt; option. The only kinds of variables for which this works are variables that are subclassed from a class called Variable, defined in &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">불행히도, &lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt; 의 현재 구현 에서는 &lt;code&gt;variable&lt;/code&gt; 또는 &lt;code&gt;textvariable&lt;/code&gt; 변수 옵션을 통해 임의의 Python 변수를 위젯으로 넘길 수 없습니다. 이것이 작동하는 변수의 유일한 종류는 &lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; 에&lt;/a&gt; 정의 된 Variable 클래스에서 서브 클래 싱 된 변수입니다 .</target>
        </trans-unit>
        <trans-unit id="6c4109db22111ac0157ddd1a1b60ab5ea903954f" translate="yes" xml:space="preserve">
          <source>Unfreeze the objects in the permanent generation, put them back into the oldest generation.</source>
          <target state="translated">영구 세대의 물체를 고정 해제하고 가장 오래된 세대로 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="e7fc7822d3ca51d28bdd7a9ee19f9336a4230d3b" translate="yes" xml:space="preserve">
          <source>Unicode character</source>
          <target state="translated">유니 코드 문자</target>
        </trans-unit>
        <trans-unit id="9e8265bf80e6bc5985b5427e35abc3cdd9d7da17" translate="yes" xml:space="preserve">
          <source>Unicode issues</source>
          <target state="translated">유니 코드 문제</target>
        </trans-unit>
        <trans-unit id="b5b526768b1969cfa8a08fe014a311e1718f9ed9" translate="yes" xml:space="preserve">
          <source>UnicodeDecodeError</source>
          <target state="translated">UnicodeDecodeError</target>
        </trans-unit>
        <trans-unit id="f9973e2691d99be91e5b5ef9ad2cbe53ffe3fadc" translate="yes" xml:space="preserve">
          <source>UnicodeEncodeError</source>
          <target state="translated">UnicodeEncodeError</target>
        </trans-unit>
        <trans-unit id="58283ecfa32971a53446570a674574fdd0222dda" translate="yes" xml:space="preserve">
          <source>UnicodeError</source>
          <target state="translated">UnicodeError</target>
        </trans-unit>
        <trans-unit id="f1716ad72e62babae0b6ebd36034174f931ab674" translate="yes" xml:space="preserve">
          <source>UnicodeError.encoding</source>
          <target state="translated">UnicodeError.encoding</target>
        </trans-unit>
        <trans-unit id="fe9d3d97c338283ce266f47d2b1d395c73fb7f1d" translate="yes" xml:space="preserve">
          <source>UnicodeError.end</source>
          <target state="translated">UnicodeError.end</target>
        </trans-unit>
        <trans-unit id="656ba97916742be36d330b15af168cbc79f8a2ab" translate="yes" xml:space="preserve">
          <source>UnicodeError.object</source>
          <target state="translated">UnicodeError.object</target>
        </trans-unit>
        <trans-unit id="14cca87e64dbb585003f7df820b8f5a57f0aab80" translate="yes" xml:space="preserve">
          <source>UnicodeError.reason</source>
          <target state="translated">UnicodeError.reason</target>
        </trans-unit>
        <trans-unit id="3b8f61fae443c3cca69d6e573eb7e4f82cd7d379" translate="yes" xml:space="preserve">
          <source>UnicodeError.start</source>
          <target state="translated">UnicodeError.start</target>
        </trans-unit>
        <trans-unit id="86ef62e8ac070df397f526dd95d38ffc3c15aeee" translate="yes" xml:space="preserve">
          <source>UnicodeTranslateError</source>
          <target state="translated">UnicodeTranslateError</target>
        </trans-unit>
        <trans-unit id="b71d2cc5fd619eca3b73d5c3091b18067741280b" translate="yes" xml:space="preserve">
          <source>UnicodeWarning</source>
          <target state="translated">UnicodeWarning</target>
        </trans-unit>
        <trans-unit id="23e60ae32a7af57bd10051941d5faa9269e1cbba" translate="yes" xml:space="preserve">
          <source>Unified Chinese</source>
          <target state="translated">통합 중국어</target>
        </trans-unit>
        <trans-unit id="48bf340eb1af34013d116721a6b365f7bd850c4d" translate="yes" xml:space="preserve">
          <source>Unified diffs are a compact way of showing just the lines that have changed plus a few lines of context. The changes are shown in an inline style (instead of separate before/after blocks). The number of context lines is set by &lt;em&gt;n&lt;/em&gt; which defaults to three.</source>
          <target state="translated">통합 diff는 변경된 라인과 몇 줄의 컨텍스트 만 표시하는 간단한 방법입니다. 변경 사항은 별도의 전후 블록 대신 인라인 스타일로 표시됩니다. 컨텍스트 라인 수는 &lt;em&gt;n&lt;/em&gt; 으로 설정되며 기본값은 3입니다.</target>
        </trans-unit>
        <trans-unit id="b23a036b5a5fc3d186211fcee99032ae543b0068" translate="yes" xml:space="preserve">
          <source>Union type; &lt;code&gt;Union[X, Y]&lt;/code&gt; means either X or Y.</source>
          <target state="translated">유니온 타입; &lt;code&gt;Union[X, Y]&lt;/code&gt; 는 X 또는 Y를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0eb559f7d253f052b5fc0c24eb1006d8b21bb4e2" translate="yes" xml:space="preserve">
          <source>Unions of a single argument vanish, e.g.:</source>
          <target state="translated">단일 논쟁의 연합은 사라진다. 예 :</target>
        </trans-unit>
        <trans-unit id="e074348d912505b595223b5c9df37529adad25df" translate="yes" xml:space="preserve">
          <source>Unions of unions are flattened, e.g.:</source>
          <target state="translated">예를 들어 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="a6013fd2beb609fb6c408bc5428b39a0ba92fa33" translate="yes" xml:space="preserve">
          <source>UniqueAddressHeader</source>
          <target state="translated">UniqueAddressHeader</target>
        </trans-unit>
        <trans-unit id="8cadb2b420289f9e588a18d9273812d40cde290f" translate="yes" xml:space="preserve">
          <source>UniqueDateHeader</source>
          <target state="translated">UniqueDateHeader</target>
        </trans-unit>
        <trans-unit id="f6e35626af402641832362022f7bb51f7666a5d5" translate="yes" xml:space="preserve">
          <source>UniqueSingleAddressHeader</source>
          <target state="translated">UniqueSingleAddressHeader</target>
        </trans-unit>
        <trans-unit id="5e5b15a19084f3693eb1aaa731c3bfb0eff4150a" translate="yes" xml:space="preserve">
          <source>UniqueUnstructuredHeader</source>
          <target state="translated">UniqueUnstructuredHeader</target>
        </trans-unit>
        <trans-unit id="3db9bdfab0f022f13a4bb48d254cae9da8cb6639" translate="yes" xml:space="preserve">
          <source>Unit separator</source>
          <target state="translated">단위 분리기</target>
        </trans-unit>
        <trans-unit id="dc4f2bd7bfcffb7a6d6e83447eac85d3afa07920" translate="yes" xml:space="preserve">
          <source>Unittest API</source>
          <target state="translated">단위 테스트 API</target>
        </trans-unit>
        <trans-unit id="e675c3dd2d602712e85f0cdbca3a0feb954afda6" translate="yes" xml:space="preserve">
          <source>Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</source>
          <target state="translated">Unittest는 간단한 테스트 검색을 지원합니다. 테스트 발견과 호환 되려면 모든 테스트 파일 이 프로젝트의 최상위 디렉토리에서 가져올 수 있는 &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-modules&quot;&gt;모듈&lt;/a&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.8/tutorial/modules.html#tut-packages&quot;&gt;패키지&lt;/a&gt; ( &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-namespace-package&quot;&gt;네임 스페이스 패키지&lt;/a&gt; 포함 ) 여야합니다 (이는 파일 이름이 유효한 &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#identifiers&quot;&gt;식별자&lt;/a&gt; 여야 함을 의미 함 ).</target>
        </trans-unit>
        <trans-unit id="cda17c4e2fe131b144d141e5a91058b9f4de3b1a" translate="yes" xml:space="preserve">
          <source>Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</source>
          <target state="translated">Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-modules&quot;&gt;modules&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/tutorial/modules.html#tut-packages&quot;&gt;packages&lt;/a&gt; (including &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-namespace-package&quot;&gt;namespace packages&lt;/a&gt;) importable from the top-level directory of the project (this means that their filenames must be valid &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#identifiers&quot;&gt;identifiers&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="6f5a7f4e3781a69dbf9bc8bde34477a22943eb3a" translate="yes" xml:space="preserve">
          <source>Unittest supports skipping individual test methods and even whole classes of tests. In addition, it supports marking a test as an &amp;ldquo;expected failure,&amp;rdquo; a test that is broken and will fail, but shouldn&amp;rsquo;t be counted as a failure on a &lt;a href=&quot;#unittest.TestResult&quot;&gt;&lt;code&gt;TestResult&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Unittest는 개별 테스트 방법과 전체 테스트 클래스 건너 뛰기를 지원합니다. 또한 테스트를 &quot;예상 실패&quot;로 표시하는 기능을 지원합니다.이 테스트는 중단되어 실패하지만 &lt;a href=&quot;#unittest.TestResult&quot;&gt; &lt;code&gt;TestResult&lt;/code&gt; &lt;/a&gt; 에서 실패로 간주해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="cecc0d8500754b34f5bd7f11dfabb25c3a770aaf" translate="yes" xml:space="preserve">
          <source>Unix</source>
          <target state="translated">Unix</target>
        </trans-unit>
        <trans-unit id="61269b47d1912b3422eba3f73aece2ef97a5b744" translate="yes" xml:space="preserve">
          <source>Unix Platforms</source>
          <target state="translated">유닉스 플랫폼</target>
        </trans-unit>
        <trans-unit id="0e13810f1a14b62c949e081b6a7b9339dcbb5a03" translate="yes" xml:space="preserve">
          <source>Unix Signals</source>
          <target state="translated">유닉스 신호</target>
        </trans-unit>
        <trans-unit id="6816141193a0e3dc3b48a84b10bea2489b164992" translate="yes" xml:space="preserve">
          <source>Unix Sockets</source>
          <target state="translated">유닉스 소켓</target>
        </trans-unit>
        <trans-unit id="1bdb0064b2fcd2fcd102a38464d440d9eff8fea9" translate="yes" xml:space="preserve">
          <source>Unix Specific Services</source>
          <target state="translated">유닉스 전용 서비스</target>
        </trans-unit>
        <trans-unit id="847c5fad076a68d49660f9eb9a8817b853479991" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IRUSR&quot;&gt;&lt;code&gt;S_IRUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">유닉스 V7은 동의어 &lt;a href=&quot;#stat.S_IRUSR&quot;&gt; &lt;code&gt;S_IRUSR&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5c559c0bd7b52c6d5fcd6c4cdfa0164567d71c81" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IWUSR&quot;&gt;&lt;code&gt;S_IWUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">유닉스 V7은 동의어 &lt;a href=&quot;#stat.S_IWUSR&quot;&gt; &lt;code&gt;S_IWUSR&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="46b7a407dbe01720c5581466e65e5d6766b08dcd" translate="yes" xml:space="preserve">
          <source>Unix V7 synonym for &lt;a href=&quot;#stat.S_IXUSR&quot;&gt;&lt;code&gt;S_IXUSR&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#stat.S_IXUSR&quot;&gt; &lt;code&gt;S_IXUSR&lt;/code&gt; 에&lt;/a&gt; 대한 Unix V7 동의어 .</target>
        </trans-unit>
        <trans-unit id="082c2a1389c9c2ea8c60ebb7f7c8a999f936e231" translate="yes" xml:space="preserve">
          <source>Unix shell-style path expansion.</source>
          <target state="translated">유닉스 쉘 스타일 경로 확장.</target>
        </trans-unit>
        <trans-unit id="32e32465c877196c71d88374d755b3b7baedfc11" translate="yes" xml:space="preserve">
          <source>Unix signals</source>
          <target state="translated">유닉스 신호</target>
        </trans-unit>
        <trans-unit id="5e4a3d86de027e8272c31e5a7f66ec8b0b49bbef" translate="yes" xml:space="preserve">
          <source>UnknownHandler Objects</source>
          <target state="translated">UnknownHandler 객체</target>
        </trans-unit>
        <trans-unit id="4cd89cfc1a4e26f640c99600149f2caa1d397d8a" translate="yes" xml:space="preserve">
          <source>Unless explicitly noted, these functions support &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;Fraction&lt;/code&gt;&lt;/a&gt;. Behaviour with other types (whether in the numeric tower or not) is currently unsupported. Collections with a mix of types are also undefined and implementation-dependent. If your input data consists of mixed types, you may be able to use &lt;a href=&quot;functions#map&quot;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt; to ensure a consistent result, for example: &lt;code&gt;map(float, input_data)&lt;/code&gt;.</source>
          <target state="translated">명시 적으로 언급되지 않는 한,이 함수는 &lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;decimal#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;Fraction&lt;/code&gt; 을 지원&lt;/a&gt; 합니다. 다른 유형의 동작 (숫자 탑에 있든 없든)은 현재 지원되지 않습니다. 다양한 유형의 컬렉션은 정의되지 않으며 구현에 따라 다릅니다. 입력 데이터가 혼합 유형으로 구성된 경우 &lt;a href=&quot;functions#map&quot;&gt; &lt;code&gt;map()&lt;/code&gt; &lt;/a&gt; 을 사용하여 일관된 결과를 보장 할 수 있습니다 ( 예 : &lt;code&gt;map(float, input_data)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9b245a8781f57e2ee32cd0bd7e365277ad5f0b91" translate="yes" xml:space="preserve">
          <source>Unless intentionally delayed, login is normally performed during the &lt;a href=&quot;#nntplib.NNTP&quot;&gt;&lt;code&gt;NNTP&lt;/code&gt;&lt;/a&gt; object initialization and separately calling this function is unnecessary. To force authentication to be delayed, you must not set &lt;em&gt;user&lt;/em&gt; or &lt;em&gt;password&lt;/em&gt; when creating the object, and must set &lt;em&gt;usenetrc&lt;/em&gt; to False.</source>
          <target state="translated">의도적으로 지연되지 않는 한 일반적으로 &lt;a href=&quot;#nntplib.NNTP&quot;&gt; &lt;code&gt;NNTP&lt;/code&gt; &lt;/a&gt; 객체 초기화 중에 로그인이 수행되며 별도로이 기능을 호출 할 필요가 없습니다. 인증을 강제로 지연 시키려면 오브젝트를 작성할 때 &lt;em&gt;사용자&lt;/em&gt; 또는 &lt;em&gt;비밀번호&lt;/em&gt; 를 설정하지 &lt;em&gt;말고 usenetrc&lt;/em&gt; 를 False로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d7daaf11df16b200f419dc320e67a326ec4d10c2" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, the connection will be open even after an exception is raised.</source>
          <target state="translated">달리 명시되지 않는 한 예외가 발생한 후에도 연결이 열립니다.</target>
        </trans-unit>
        <trans-unit id="7339f074fcb0ea2ac52be61a728102c0e5798d94" translate="yes" xml:space="preserve">
          <source>Unless stated otherwise, all network methods accepting other network/address objects will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the argument&amp;rsquo;s IP version is incompatible to &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="translated">달리 명시되지 않는 한 , 인수의 IP 버전이 &lt;code&gt;self&lt;/code&gt; 와 호환되지 않으면 다른 네트워크 / 주소 객체를 허용하는 모든 네트워크 메소드는 &lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 를&lt;/a&gt; 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="993ab4594b8b02fc5860d357a6b3b9b2b3ab001e" translate="yes" xml:space="preserve">
          <source>Unless the &lt;code&gt;--without-pip&lt;/code&gt; option is given, &lt;a href=&quot;ensurepip#module-ensurepip&quot;&gt;&lt;code&gt;ensurepip&lt;/code&gt;&lt;/a&gt; will be invoked to bootstrap &lt;code&gt;pip&lt;/code&gt; into the virtual environment.</source>
          <target state="translated">하지 않으면 &lt;code&gt;--without-pip&lt;/code&gt; 옵션이 주어, &lt;a href=&quot;ensurepip#module-ensurepip&quot;&gt; &lt;code&gt;ensurepip&lt;/code&gt; 는&lt;/a&gt; 부트 스트랩에 호출됩니다 &lt;code&gt;pip&lt;/code&gt; 가상 환경에.</target>
        </trans-unit>
        <trans-unit id="c4a782d6fa682b46e8e886c88894b4beb34c1b11" translate="yes" xml:space="preserve">
          <source>Unless the &lt;em&gt;_charset&lt;/em&gt; argument is explicitly set to &lt;code&gt;None&lt;/code&gt;, the MIMEText object created will have both a &lt;em&gt;Content-Type&lt;/em&gt; header with a &lt;code&gt;charset&lt;/code&gt; parameter, and a &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header. This means that a subsequent &lt;code&gt;set_payload&lt;/code&gt; call will not result in an encoded payload, even if a charset is passed in the &lt;code&gt;set_payload&lt;/code&gt; command. You can &amp;ldquo;reset&amp;rdquo; this behavior by deleting the &lt;code&gt;Content-Transfer-Encoding&lt;/code&gt; header, after which a &lt;code&gt;set_payload&lt;/code&gt; call will automatically encode the new payload (and add a new &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header).</source>
          <target state="translated">&lt;em&gt;_charset&lt;/em&gt; 인수가 명시 적으로 &lt;code&gt;None&lt;/code&gt; 으로 설정되어 있지 않은 경우, 작성된 MIMEText 객체 에는 &lt;code&gt;charset&lt;/code&gt; 매개 변수가 있는 &lt;em&gt;Content-Type&lt;/em&gt; 헤더와 &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; 헤더가 있습니다. 이것은 후속&lt;em&gt;&lt;/em&gt; &lt;code&gt;set_payload&lt;/code&gt; &lt;code&gt;set_payload&lt;/code&gt; 명령 에서 문자 세트가 전달 되더라도 set_payload 호출로 인해 인코딩 된 페이로드가 발생하지 않음을 . &lt;code&gt;Content-Transfer-Encoding&lt;/code&gt; 헤더 를 삭제하여이 동작을 &quot;재설정&quot;할 수 있습니다. 그 후 &lt;code&gt;set_payload&lt;/code&gt; 호출은 자동으로 새로운 페이로드를 인코딩하고 새로운 &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; 헤더를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="41468c42a8b09a43651139d245a1d58ff2225ad6" translate="yes" xml:space="preserve">
          <source>Unless you set the &lt;a href=&quot;#weakref.finalize.atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; attribute to &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, a finalizer will be called when the program exits if it is still alive. For instance</source>
          <target state="translated">&lt;a href=&quot;#weakref.finalize.atexit&quot;&gt; &lt;code&gt;atexit&lt;/code&gt; &lt;/a&gt; 속성을 &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; 로&lt;/a&gt; 설정하지 않으면 프로그램이 아직 활성 상태 인 경우 프로그램이 종료 될 때 종료자가 호출됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="8ac92788612719ddd5c97ea10f0326dfc1c7c844" translate="yes" xml:space="preserve">
          <source>Unless you wish to use &lt;a href=&quot;#smtplib.SMTP.has_extn&quot;&gt;&lt;code&gt;has_extn()&lt;/code&gt;&lt;/a&gt; before sending mail, it should not be necessary to call this method explicitly. It will be implicitly called by &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;sendmail()&lt;/code&gt;&lt;/a&gt; when necessary.</source>
          <target state="translated">사용하지 않으려는 경우 &lt;a href=&quot;#smtplib.SMTP.has_extn&quot;&gt; &lt;code&gt;has_extn()&lt;/code&gt; &lt;/a&gt;메일을 보내기 전에 has_extn ()한이 메소드를 명시 적으로 호출 할 필요는 없습니다. 필요한 경우&lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt; &lt;code&gt;sendmail()&lt;/code&gt; &lt;/a&gt; 의해 암시 적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="9e0c258f7bb0ea2dfce26a7399ef9cf54157425d" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#asyncio.BoundedSemaphore&quot;&gt;&lt;code&gt;BoundedSemaphore&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; allows making more &lt;code&gt;release()&lt;/code&gt; calls than &lt;code&gt;acquire()&lt;/code&gt; calls.</source>
          <target state="translated">달리 &lt;a href=&quot;#asyncio.BoundedSemaphore&quot;&gt; &lt;code&gt;BoundedSemaphore&lt;/code&gt; &lt;/a&gt; ,&lt;a href=&quot;#asyncio.Semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt; 더 만들기 허용 &lt;code&gt;release()&lt;/code&gt; 이상 통화 &lt;code&gt;acquire()&lt;/code&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="33618204c6228bb2f08249a4999150db6c1a3c5a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#asyncio.wait_for&quot;&gt;&lt;code&gt;wait_for()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;wait()&lt;/code&gt; does not cancel the futures when a timeout occurs.</source>
          <target state="translated">달리 &lt;a href=&quot;#asyncio.wait_for&quot;&gt; &lt;code&gt;wait_for()&lt;/code&gt; &lt;/a&gt; , &lt;code&gt;wait()&lt;/code&gt; 시간 초과가 발생하면 선물을 취소하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="67e1ebd0e3d2c8e2ee24effe1aafb7d36dfc4f44" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#bytes.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; when a delimiter string &lt;em&gt;sep&lt;/em&gt; is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</source>
          <target state="translated">같지 않은 &lt;a href=&quot;#bytes.split&quot;&gt; &lt;code&gt;split()&lt;/code&gt; &lt;/a&gt;구분자 문자열&lt;em&gt; sep&lt;/em&gt; 가 제공될 때 split ()메소드는 빈 문자열에 대한 빈 목록을 리턴하며 터미널 행 분리는 추가 행을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ca1293cddc7f4a5a7d63761eedfd744e93178c07" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#str.split&quot;&gt;&lt;code&gt;split()&lt;/code&gt;&lt;/a&gt; when a delimiter string &lt;em&gt;sep&lt;/em&gt; is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:</source>
          <target state="translated">같지 않은 &lt;a href=&quot;#str.split&quot;&gt; &lt;code&gt;split()&lt;/code&gt; &lt;/a&gt;구분자 문자열&lt;em&gt; sep&lt;/em&gt; 가 제공될 때 split ()메소드는 빈 문자열에 대한 빈 목록을 리턴하며 터미널 행 분리는 추가 행을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b3e82dc45fec18fee8381940667b7739fe395eba" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#str.swapcase&quot;&gt;&lt;code&gt;str.swapcase()&lt;/code&gt;&lt;/a&gt;, it is always the case that &lt;code&gt;bin.swapcase().swapcase() == bin&lt;/code&gt; for the binary versions. Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points.</source>
          <target state="translated">같지 않은 &lt;a href=&quot;#str.swapcase&quot;&gt; &lt;code&gt;str.swapcase()&lt;/code&gt; &lt;/a&gt;바이너리 버전의 경우 항상 &lt;code&gt;bin.swapcase().swapcase() == bin&lt;/code&gt; 입니다. 임의의 유니 코드 코드 포인트에는 일반적으로 적용되지 않지만 대소 문자 변환은 ASCII로 대칭입니다.</target>
        </trans-unit>
        <trans-unit id="0c95a6d7a10d383afd78d9c0e2a9a3a25e57da5e" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;#tempfile.TemporaryFile&quot;&gt;&lt;code&gt;TemporaryFile()&lt;/code&gt;&lt;/a&gt;, the user of &lt;a href=&quot;#tempfile.mkstemp&quot;&gt;&lt;code&gt;mkstemp()&lt;/code&gt;&lt;/a&gt; is responsible for deleting the temporary file when done with it.</source>
          <target state="translated">&lt;a href=&quot;#tempfile.TemporaryFile&quot;&gt; &lt;code&gt;TemporaryFile()&lt;/code&gt; &lt;/a&gt; 과 달리&lt;a href=&quot;#tempfile.mkstemp&quot;&gt; &lt;code&gt;mkstemp()&lt;/code&gt; &lt;/a&gt; 의 사용자 는 임시 파일을 완료하면 파일을 삭제해야합니다.</target>
        </trans-unit>
        <trans-unit id="d713f1bbd5fe8d9d3ef65d626ba711d216ccc024" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt;&lt;code&gt;asyncore.dispatcher&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asynchat.async_chat&quot;&gt;&lt;code&gt;async_chat&lt;/code&gt;&lt;/a&gt; allows you to define a</source>
          <target state="translated">&lt;a href=&quot;asyncore#asyncore.dispatcher&quot;&gt; &lt;code&gt;asyncore.dispatcher&lt;/code&gt; &lt;/a&gt; 와 달리 , &lt;a href=&quot;#asynchat.async_chat&quot;&gt; &lt;code&gt;async_chat&lt;/code&gt; 는&lt;/a&gt; 당신이를 정의 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="5c886da08a6499e65a78a1b5c0d1665bb125f558" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;, with &lt;code&gt;SimpleNamespace&lt;/code&gt; you can add and remove attributes. If a &lt;code&gt;SimpleNamespace&lt;/code&gt; object is initialized with keyword arguments, those are directly added to the underlying namespace.</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt; 와 달리 로 &lt;code&gt;SimpleNamespace&lt;/code&gt; 추가하고 속성을 제거 할 수 있습니다. 경우 &lt;code&gt;SimpleNamespace&lt;/code&gt; 의 객체가 키워드 인자로 초기화되어, 사람들은 직접 기본 네임 스페이스에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="596d48dc2d054d385685290e71d4024b5251eff2" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;marshal#module-marshal&quot;&gt;&lt;code&gt;marshal&lt;/code&gt;&lt;/a&gt;, JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to &lt;a href=&quot;#json.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; using the same &lt;em&gt;fp&lt;/em&gt; will result in an invalid JSON file.</source>
          <target state="translated">&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;marshal#module-marshal&quot;&gt; &lt;code&gt;marshal&lt;/code&gt; &lt;/a&gt; 과 달리 JSON은 프레임 프로토콜이 아니므로 여러 객체를 직렬화하려고 시도하면 &lt;a href=&quot;#json.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt; 를 반복해서 호출합니다. 동일한 &lt;em&gt;fp&lt;/em&gt; 를 사용하여 를 JSON 파일이 잘못됩니다.</target>
        </trans-unit>
        <trans-unit id="75c3001ddb5896b3f0beaf0cf2b3057b6d86a8ca" translate="yes" xml:space="preserve">
          <source>Unlike GNU &lt;code&gt;getopt()&lt;/code&gt;, after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work.</source>
          <target state="translated">GNU &lt;code&gt;getopt()&lt;/code&gt; 와 달리 옵션이 아닌 인수 뒤에는 모든 추가 인수도 옵션이 아닌 것으로 간주됩니다. 이는 GNU 이외의 Unix 시스템이 작동하는 방식과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="1dec49b182e8d7603947a0985b2ecf4c1b9d6835" translate="yes" xml:space="preserve">
          <source>Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the &lt;a href=&quot;functions#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; mechanism from the class that overrides it. This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.</source>
          <target state="translated">Java 추상 메소드와 달리이 추상 메소드는 구현을 가질 수 있습니다. 이 구현은이 를 재정의하는 클래스에서 &lt;a href=&quot;functions#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; 메커니즘을 통해 호출 할 수 있습니다 . 이것은 협동 다중 상속을 사용하는 프레임 워크에서 수퍼 콜의 엔드 포인트로 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f16780c200014deeda946367354cdafa913c303" translate="yes" xml:space="preserve">
          <source>Unlike a dictionary, &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; objects do not raise an error when you try to get or delete a key that isn&amp;rsquo;t in the wrapped header list. Getting a nonexistent header just returns &lt;code&gt;None&lt;/code&gt;, and deleting a nonexistent header does nothing.</source>
          <target state="translated">사전과 달리 줄 바꿈 된 헤더 목록에없는 키를 가져 오거나 삭제하려고하면 &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt; &lt;code&gt;Headers&lt;/code&gt; &lt;/a&gt; 객체에서 오류가 발생하지 않습니다. 존재하지 않는 헤더를 가져 오면 &lt;code&gt;None&lt;/code&gt; 이 반환 되고 존재하지 않는 헤더를 삭제하면 아무 작업도 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1c6f6aee98d471465b243d4e2fd41bf6e3854779" translate="yes" xml:space="preserve">
          <source>Unlike a unix shell, Python does not do any &lt;em&gt;automatic&lt;/em&gt; path expansions. Functions such as &lt;a href=&quot;#os.path.expanduser&quot;&gt;&lt;code&gt;expanduser()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.path.expandvars&quot;&gt;&lt;code&gt;expandvars()&lt;/code&gt;&lt;/a&gt; can be invoked explicitly when an application desires shell-like path expansion. (See also the &lt;a href=&quot;glob#module-glob&quot;&gt;&lt;code&gt;glob&lt;/code&gt;&lt;/a&gt; module.)</source>
          <target state="translated">유닉스 쉘과 달리 파이썬은 &lt;em&gt;자동&lt;/em&gt; 경로 확장을 수행하지 않습니다 . 같은 기능 &lt;a href=&quot;#os.path.expanduser&quot;&gt; &lt;code&gt;expanduser()&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;#os.path.expandvars&quot;&gt; &lt;code&gt;expandvars()&lt;/code&gt; &lt;/a&gt; 응용 프로그램의 욕망 쉘 같은 경우 경로 확장 명시 적으로 호출 할 수 있습니다. (또한 참조&lt;a href=&quot;glob#module-glob&quot;&gt; &lt;code&gt;glob&lt;/code&gt; &lt;/a&gt; 모듈.)</target>
        </trans-unit>
        <trans-unit id="e7bd162bae41d85a4f9b40addad75b0dfc5f8ca4" translate="yes" xml:space="preserve">
          <source>Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem:</source>
          <target state="translated">하드웨어 기반 이진 부동 소수점과 달리, 십진 모듈은 사용자가 변경할 수있는 정밀도 (기본값은 28 자리)이며 주어진 문제에 필요한만큼 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ed2b66476f9ed547b34b80c9bc1ba9db01e1b4b" translate="yes" xml:space="preserve">
          <source>Unlike normal generators, async generators cannot return a value, so there is no &lt;code&gt;ReturnType&lt;/code&gt; type parameter. As with &lt;a href=&quot;#typing.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;SendType&lt;/code&gt; behaves contravariantly.</source>
          <target state="translated">일반 생성기와 달리 비동기 생성기는 값을 반환 할 수 없으므로 &lt;code&gt;ReturnType&lt;/code&gt; 형식 매개 변수 가 없습니다 . 와 같이 &lt;a href=&quot;#typing.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;SendType&lt;/code&gt; contravariantly 동작합니다.</target>
        </trans-unit>
        <trans-unit id="02e5049358a9b6f903a818d8a1d172b104aa9a7e" translate="yes" xml:space="preserve">
          <source>Unlike other asyncio functions this function requires the &lt;em&gt;loop&lt;/em&gt; argument to be passed explicitly.</source>
          <target state="translated">다른 asyncio 함수와 달리이 함수에는 &lt;em&gt;루프&lt;/em&gt; 가 필요합니다&lt;em&gt;&lt;/em&gt; 인수를 명시 적으로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="daabe887cf8afd0ee7dd85b067f7ffc7a6ff2139" translate="yes" xml:space="preserve">
          <source>Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an &lt;a href=&quot;#decimal.InvalidOperation&quot;&gt;&lt;code&gt;InvalidOperation&lt;/code&gt;&lt;/a&gt; is signaled. This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand.</source>
          <target state="translated">다른 연산과 달리 양자화 연산 후 계수의 길이가 정밀도보다 크면 &lt;a href=&quot;#decimal.InvalidOperation&quot;&gt; &lt;code&gt;InvalidOperation&lt;/code&gt; &lt;/a&gt; 이 신호됩니다. 이를 통해 오류 조건이없는 한 양자화 된 지수는 항상 오른쪽 피연산자의 지수와 같습니다.</target>
        </trans-unit>
        <trans-unit id="f8eddae08f6656a48c18c114d2d80555ac88cc50" translate="yes" xml:space="preserve">
          <source>Unlike other representations of messages, file-like representations are not necessarily independent of the &lt;a href=&quot;#mailbox.Mailbox&quot;&gt;&lt;code&gt;Mailbox&lt;/code&gt;&lt;/a&gt; instance that created them or of the underlying mailbox. More specific documentation is provided by each subclass.</source>
          <target state="translated">다른 메시지 표현과 달리 파일과 유사한 표현이 반드시 &lt;a href=&quot;#mailbox.Mailbox&quot;&gt; &lt;code&gt;Mailbox&lt;/code&gt; &lt;/a&gt; 독립적 일 필요는 없습니다. 를 만든 인스턴스 나 기본 사서함과 . 보다 구체적인 문서는 각 서브 클래스에 의해 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="1729cdad2c6448823f2a52f8dea629abf34cbd9d" translate="yes" xml:space="preserve">
          <source>Unlike pickle, deserializing untrusted JSON does not in itself create an arbitrary code execution vulnerability.</source>
          <target state="translated">피클과 달리 신뢰할 수없는 JSON의 직렬화 해제 자체가 임의 코드 실행 취약점을 생성하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="c027bbb86d577787589ae4a2296400dfbc620f5d" translate="yes" xml:space="preserve">
          <source>Unlike some other popen functions, this implementation will never implicitly call a system shell. This means that all characters, including shell metacharacters, can safely be passed to child processes. If the shell is invoked explicitly, via &lt;code&gt;shell=True&lt;/code&gt;, it is the application&amp;rsquo;s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;shell injection&lt;/a&gt; vulnerabilities.</source>
          <target state="translated">다른 popen 함수와 달리이 구현은 절대로 시스템 셸을 암시 적으로 호출하지 않습니다. 즉, 쉘 메타 문자를 포함한 모든 문자를 하위 프로세스로 안전하게 전달할 수 있습니다. &lt;code&gt;shell=True&lt;/code&gt; 를 통해 쉘을 명시 적으로 호출하는 경우, &lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;쉘 삽입&lt;/a&gt; 을 피하기 위해 모든 공백 및 메타 문자가 적절하게 인용되도록하는 것은 애플리케이션의 책임입니다. 취약점 합니다.</target>
        </trans-unit>
        <trans-unit id="326e5cb29ac1685ac6b6540756008303df0cd9e9" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;functions#sorted&quot;&gt;&lt;code&gt;sorted()&lt;/code&gt;&lt;/a&gt; function, it does not make sense for the &lt;a href=&quot;#module-bisect&quot;&gt;&lt;code&gt;bisect()&lt;/code&gt;&lt;/a&gt; functions to have &lt;em&gt;key&lt;/em&gt; or &lt;em&gt;reversed&lt;/em&gt; arguments because that would lead to an inefficient design (successive calls to bisect functions would not &amp;ldquo;remember&amp;rdquo; all of the previous key lookups).</source>
          <target state="translated">&lt;a href=&quot;functions#sorted&quot;&gt; &lt;code&gt;sorted()&lt;/code&gt; &lt;/a&gt; 함수 와 달리 &lt;a href=&quot;#module-bisect&quot;&gt; &lt;code&gt;bisect()&lt;/code&gt; &lt;/a&gt; 함수가 &lt;em&gt;키&lt;/em&gt; 를 갖 거나 &lt;em&gt;뒤집는&lt;/em&gt; 것은 의미가 없습니다.&lt;em&gt;&lt;/em&gt; 인수가있는 것은 의미가 없습니다. 비효율적 인 디자인으로 이어질 수 있기 때문입니다 (비 섹트 함수에 대한 성공적인 호출은 이전 키 조회를 모두 &quot;기억하지 않습니다&quot;). .</target>
        </trans-unit>
        <trans-unit id="3793d0204514f0cecb268eaedd5865f0bf82163f" translate="yes" xml:space="preserve">
          <source>Unlike the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module, the &lt;a href=&quot;#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; module does not support leap seconds.</source>
          <target state="translated">&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt; 모듈 과 달리 &lt;a href=&quot;#module-datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt; 모듈은 윤초를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b6e58a4913f53cdae8b1ea35f09013530b7aa1c4" translate="yes" xml:space="preserve">
          <source>Unlike the C function of the same name, &lt;a href=&quot;#time.asctime&quot;&gt;&lt;code&gt;asctime()&lt;/code&gt;&lt;/a&gt; does not add a trailing newline.</source>
          <target state="translated">같은 이름의 C 함수와 달리 &lt;a href=&quot;#time.asctime&quot;&gt; &lt;code&gt;asctime()&lt;/code&gt; &lt;/a&gt; 은 후행 줄 바꿈을 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f224bbef952cee89d776f9978fc11e4d77aacd93" translate="yes" xml:space="preserve">
          <source>Unlike the built-in &lt;code&gt;**&lt;/code&gt; operator, &lt;a href=&quot;#math.pow&quot;&gt;&lt;code&gt;math.pow()&lt;/code&gt;&lt;/a&gt; converts both its arguments to type &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;. Use &lt;code&gt;**&lt;/code&gt; or the built-in &lt;a href=&quot;functions#pow&quot;&gt;&lt;code&gt;pow()&lt;/code&gt;&lt;/a&gt; function for computing exact integer powers.</source>
          <target state="translated">내장 &lt;code&gt;**&lt;/code&gt; 연산자 와 달리 &lt;a href=&quot;#math.pow&quot;&gt; &lt;code&gt;math.pow()&lt;/code&gt; &lt;/a&gt; 는 두 인수를 &lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt; 유형으로 변환합니다 . 정확한 정수 제곱을 계산 하려면 &lt;code&gt;**&lt;/code&gt; 또는 내장 &lt;a href=&quot;functions#pow&quot;&gt; &lt;code&gt;pow()&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="41e1fdb4abd6dd67c502fc5584b98310de24db38" translate="yes" xml:space="preserve">
          <source>Unlike the other methods, callbacks added this way cannot suppress exceptions (as they are never passed the exception details).</source>
          <target state="translated">다른 방법과 달리이 방법으로 추가 된 콜백은 예외 세부 사항을 전달하지 않으므로 예외를 억제 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="200b8c21994a17a42d1321647abef543d47f7741" translate="yes" xml:space="preserve">
          <source>Unlike the standard library threading &lt;a href=&quot;queue#module-queue&quot;&gt;&lt;code&gt;queue&lt;/code&gt;&lt;/a&gt;, the size of the queue is always known and can be returned by calling the &lt;a href=&quot;#asyncio.Queue.qsize&quot;&gt;&lt;code&gt;qsize()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">표준 라이브러리 스레딩 &lt;a href=&quot;queue#module-queue&quot;&gt; &lt;code&gt;queue&lt;/code&gt; &lt;/a&gt; 와 달리 큐 의 크기는 항상 알려져 있으며 &lt;a href=&quot;#asyncio.Queue.qsize&quot;&gt; &lt;code&gt;qsize()&lt;/code&gt; &lt;/a&gt; 메소드를 호출하여 리턴 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="99e8b687ce1472cf64f559941f128998de28a367" translate="yes" xml:space="preserve">
          <source>Unlike with dictionaries, keyword arguments are not supported.</source>
          <target state="translated">사전과 달리 키워드 인수는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b295b1626651c0f81546df6b37a5a08b3d17b159" translate="yes" xml:space="preserve">
          <source>Unlinks all of the specified &lt;em&gt;items&lt;/em&gt; from the tree.</source>
          <target state="translated">트리에서 지정된 모든 &lt;em&gt;항목&lt;/em&gt; 을 연결 해제합니다 .</target>
        </trans-unit>
        <trans-unit id="228d085fb175c515aa2497f02a042daa9633e64b" translate="yes" xml:space="preserve">
          <source>Unlocks the specified bytes, which must have been previously locked.</source>
          <target state="translated">이전에 잠겨 있어야했던 지정된 바이트를 잠금 해제합니다.</target>
        </trans-unit>
        <trans-unit id="048eced2fb1660f6cbfc326ec3236a428f12a1cc" translate="yes" xml:space="preserve">
          <source>Unmatched square brackets in the &lt;code&gt;netloc&lt;/code&gt; attribute will raise a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;netloc&lt;/code&gt; 속성 에서 대괄호가 일치하지 않으면 &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; 가 발생&lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c4b43c42ceb925094a8a1fcebdac4099acaace32" translate="yes" xml:space="preserve">
          <source>Unofficial XML-RPC Errata</source>
          <target state="translated">비공식 XML-RPC 정오표</target>
        </trans-unit>
        <trans-unit id="e180d436cafe3018c8820226a888ae5caa7011f1" translate="yes" xml:space="preserve">
          <source>Unpack an archive. &lt;em&gt;filename&lt;/em&gt; is the full path of the archive.</source>
          <target state="translated">보관소의 포장을 풉니 다. &lt;em&gt;filename&lt;/em&gt; 은 아카이브의 전체 경로입니다.</target>
        </trans-unit>
        <trans-unit id="d093e02eacf25883f9dd3d7f93c744854d7c18ee" translate="yes" xml:space="preserve">
          <source>Unpack from &lt;em&gt;buffer&lt;/em&gt; starting at position &lt;em&gt;offset&lt;/em&gt;, according to the format string &lt;em&gt;format&lt;/em&gt;. The result is a tuple even if it contains exactly one item. The buffer&amp;rsquo;s size in bytes, starting at position &lt;em&gt;offset&lt;/em&gt;, must be at least the size required by the format, as reflected by &lt;a href=&quot;#struct.calcsize&quot;&gt;&lt;code&gt;calcsize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">형식 문자열 &lt;em&gt;형식&lt;/em&gt; 에 따라 위치 &lt;em&gt;오프셋&lt;/em&gt; 에서 시작하여 &lt;em&gt;버퍼&lt;/em&gt; 에서 압축을 풉니 다 . 정확히 하나의 항목을 포함하더라도 결과는 튜플입니다. 위치 &lt;em&gt;오프셋&lt;/em&gt; 에서 시작하여 버퍼 크기 (바이트 &lt;a href=&quot;#struct.calcsize&quot;&gt; &lt;code&gt;calcsize()&lt;/code&gt; &lt;/a&gt; 는 calcsize ()에 의해 반영된대로 형식에 필요한 크기 이상이어야합니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2fa5bd12750940524bd0d1cfbac26ffee31f5657" translate="yes" xml:space="preserve">
          <source>Unpack from the buffer &lt;em&gt;buffer&lt;/em&gt; (presumably packed by &lt;code&gt;pack(format, ...)&lt;/code&gt;) according to the format string &lt;em&gt;format&lt;/em&gt;. The result is a tuple even if it contains exactly one item. The buffer&amp;rsquo;s size in bytes must match the size required by the format, as reflected by &lt;a href=&quot;#struct.calcsize&quot;&gt;&lt;code&gt;calcsize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">형식 문자열 &lt;em&gt;형식&lt;/em&gt; 에 따라 버퍼 &lt;em&gt;버퍼&lt;/em&gt; 에서 압축을 풉니 다 (아마 &lt;code&gt;pack(format, ...)&lt;/code&gt; 의해 압축 됨 ) . 정확히 하나의 항목을 포함하더라도 결과는 튜플입니다. 바이트 단위의 버퍼 크기는 &lt;a href=&quot;#struct.calcsize&quot;&gt; &lt;code&gt;calcsize()&lt;/code&gt; &lt;/a&gt; 의해 반영된 형식에 필요한 크기와 일치해야합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2adde7706bee77bb5b34b7f4130eb67fec002267" translate="yes" xml:space="preserve">
          <source>Unpacked fields can be named by assigning them to variables or by wrapping the result in a named tuple:</source>
          <target state="translated">압축을 푼 필드는 변수에 지정하거나 결과를 명명 된 튜플에 래핑하여 이름을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d79ef8abbb1d3bae278d963c12afbc654d35da6" translate="yes" xml:space="preserve">
          <source>Unpacker Objects</source>
          <target state="translated">언 패커 객체</target>
        </trans-unit>
        <trans-unit id="0861b7332a50e0249c0fdf3780673bf2dce97c44" translate="yes" xml:space="preserve">
          <source>Unpacks TOS into &lt;em&gt;count&lt;/em&gt; individual values, which are put onto the stack right-to-left.</source>
          <target state="translated">TOS를 개별 값 으로 &lt;em&gt;계산&lt;/em&gt; 하여 스택을 오른쪽에서 왼쪽으로 옮깁니다.</target>
        </trans-unit>
        <trans-unit id="b02e0fc33103f5359830c43333262a8e84c26205" translate="yes" xml:space="preserve">
          <source>Unpacks a double-precision floating point number, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_float&quot;&gt;&lt;code&gt;unpack_float()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#xdrlib.Unpacker.unpack_float&quot;&gt; &lt;code&gt;unpack_float()&lt;/code&gt; &lt;/a&gt; 와 유사하게 배정 밀도 부동 소수점 숫자를 압축 해제 합니다.</target>
        </trans-unit>
        <trans-unit id="8df6c980c62c8f14de2fd87d0d289322eb884d40" translate="yes" xml:space="preserve">
          <source>Unpacks a single-precision floating point number.</source>
          <target state="translated">단 정밀도 부동 소수점 숫자를 압축 해제합니다.</target>
        </trans-unit>
        <trans-unit id="4b95c1bc4e94907b6abeef024e6d5b6bf5bb8a71" translate="yes" xml:space="preserve">
          <source>Unpacks and returns (as a list) a fixed length array of homogeneous items. &lt;em&gt;n&lt;/em&gt; is number of list elements to expect in the buffer. As above, &lt;em&gt;unpack_item&lt;/em&gt; is the function used to unpack each element.</source>
          <target state="translated">고정 된 길이의 동종 항목 배열을 풀고 (목록으로) 반환합니다. &lt;em&gt;n&lt;/em&gt; 은 버퍼에서 예상되는 목록 요소의 수입니다. 위와 같이 &lt;em&gt;unpack_item&lt;/em&gt; 은 각 요소의 압축을 푸는 데 사용되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="c2c5b548d5976f90964462cd30f8809920479b37" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a fixed length opaque data stream, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt;&lt;code&gt;unpack_fstring()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt; &lt;code&gt;unpack_fstring()&lt;/code&gt; &lt;/a&gt; 과 유사하게 고정 길이의 불투명 한 데이터 스트림을 언 패킹 하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2df57ac4a973e9ba3f6bd5eaedcc74a144ce664b" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a fixed length string. &lt;em&gt;n&lt;/em&gt; is the number of characters expected. Padding with null bytes to guaranteed 4 byte alignment is assumed.</source>
          <target state="translated">고정 길이 문자열의 압축을 풀고 반환합니다. &lt;em&gt;n&lt;/em&gt; 은 예상되는 문자 수입니다. 4 바이트 정렬을 보장하기 위해 널 바이트 패딩이 가정됩니다.</target>
        </trans-unit>
        <trans-unit id="73c5115d1baf6a3ec3a1fff4ab85bc77008c5914" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a list of homogeneous items. The list is unpacked one element at a time by first unpacking an unsigned integer flag. If the flag is &lt;code&gt;1&lt;/code&gt;, then the item is unpacked and appended to the list. A flag of &lt;code&gt;0&lt;/code&gt; indicates the end of the list. &lt;em&gt;unpack_item&lt;/em&gt; is the function that is called to unpack the items.</source>
          <target state="translated">동종 항목의 목록을 풀고 반환합니다. 부호없는 정수 플래그를 먼저 압축 해제하여 목록을 한 번에 한 요소 씩 압축 해제합니다. 플래그가 &lt;code&gt;1&lt;/code&gt; 이면 항목의 압축이 풀리고 목록에 추가됩니다. 플래그 &lt;code&gt;0&lt;/code&gt; 은 목록의 끝을 나타냅니다. &lt;em&gt;unpack_item&lt;/em&gt; 은 아이템을 풀기 위해 호출되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="6cc4a7d8ee8262fa9d412c53ecbce94d54254aba" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length &lt;em&gt;list&lt;/em&gt; of homogeneous items. First, the length of the list is unpacked as an unsigned integer, then each element is unpacked as in &lt;a href=&quot;#xdrlib.Unpacker.unpack_farray&quot;&gt;&lt;code&gt;unpack_farray()&lt;/code&gt;&lt;/a&gt; above.</source>
          <target state="translated">균일 한 항목 의 가변 길이 &lt;em&gt;목록&lt;/em&gt; 을 압축 해제하고 리턴 합니다. 먼저, 목록의 길이는 부호없는 정수로 압축이 풀린 다음 위의 &lt;a href=&quot;#xdrlib.Unpacker.unpack_farray&quot;&gt; &lt;code&gt;unpack_farray()&lt;/code&gt; &lt;/a&gt; 에서와 같이 각 요소의 압축이 풀 립니다 .</target>
        </trans-unit>
        <trans-unit id="a7799cee99003d765f6427b7c1ace2dfb316c858" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length byte stream, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt;&lt;code&gt;unpack_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt; &lt;code&gt;unpack_string()&lt;/code&gt; &lt;/a&gt; 과 유사하게 가변 길이 바이트 스트림을 압축 해제 하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="34766fddbfbc6bc1488290d0daec6b714af30a9b" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length opaque data string, similarly to &lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt;&lt;code&gt;unpack_string()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#xdrlib.Unpacker.unpack_string&quot;&gt; &lt;code&gt;unpack_string()&lt;/code&gt; &lt;/a&gt; 과 유사하게 가변 길이의 불투명 한 데이터 문자열을 압축 해제 하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ba0b788676d3b41a1c5127c92dde79d487ede145" translate="yes" xml:space="preserve">
          <source>Unpacks and returns a variable length string. The length of the string is first unpacked as an unsigned integer, then the string data is unpacked with &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt;&lt;code&gt;unpack_fstring()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">가변 길이 문자열을 압축 해제하고 반환합니다. 문자열의 길이는 먼저 부호없는 정수로 압축 해제 된 다음 문자열 데이터는 &lt;a href=&quot;#xdrlib.Unpacker.unpack_fstring&quot;&gt; &lt;code&gt;unpack_fstring()&lt;/code&gt; &lt;/a&gt; 압축 해제됩니다 .</target>
        </trans-unit>
        <trans-unit id="c49374747ec36dbc7532cb94438254109ce2de2f" translate="yes" xml:space="preserve">
          <source>Unparse an &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt; object and generate a string with code that would produce an equivalent &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt; object if parsed back with &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;ast.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Unparse an &lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt; object and generate a string with code that would produce an equivalent &lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt; object if parsed back with &lt;a href=&quot;#ast.parse&quot;&gt; &lt;code&gt;ast.parse()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="c3ee08b55fbca7f6d37e79386552db63d6525e57" translate="yes" xml:space="preserve">
          <source>Unregister a file object from selection, removing it from monitoring. A file object shall be unregistered prior to being closed.</source>
          <target state="translated">파일 오브젝트를 선택에서 등록 해제하여 모니터링에서 제거하십시오. 파일 객체는 닫히기 전에 등록이 취소되어야합니다.</target>
        </trans-unit>
        <trans-unit id="84737bad5fde4cf5467cba5b10bfa3fac33dbc22" translate="yes" xml:space="preserve">
          <source>Unregister a user signal: uninstall the handler of the &lt;em&gt;signum&lt;/em&gt; signal installed by &lt;a href=&quot;#faulthandler.register&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;. Return &lt;code&gt;True&lt;/code&gt; if the signal was registered, &lt;code&gt;False&lt;/code&gt; otherwise.</source>
          <target state="translated">사용자 신호 등록 취소 : &lt;a href=&quot;#faulthandler.register&quot;&gt; &lt;code&gt;register()&lt;/code&gt; &lt;/a&gt; 설치된 &lt;em&gt;signum&lt;/em&gt; 신호 처리기를 제거하십시오 . 반환 &lt;code&gt;True&lt;/code&gt; 신호가 등록 된 경우 &lt;code&gt;False&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="0eeb11afbb54691f5e0783b93bd21e3897e4d244" translate="yes" xml:space="preserve">
          <source>Unregister an unpack format. &lt;em&gt;name&lt;/em&gt; is the name of the format.</source>
          <target state="translated">압축 풀기 형식을 등록 취소하십시오. &lt;em&gt;name&lt;/em&gt; 은 형식의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="b7b92c7cba3823febabcbe4aaa8633bbc550444a" translate="yes" xml:space="preserve">
          <source>Unregisters a file handler.</source>
          <target state="translated">파일 핸들러를 등록 취소합니다.</target>
        </trans-unit>
        <trans-unit id="74697c9d7cd4ab04d68ab2fdf2b669960bc37a75" translate="yes" xml:space="preserve">
          <source>Unsafe usage of the GIL</source>
          <target state="translated">Unsafe usage of the GIL</target>
        </trans-unit>
        <trans-unit id="fe99f3a697d86fd74d01d0ec29562a573d784a93" translate="yes" xml:space="preserve">
          <source>Unset (delete) the environment variable named &lt;em&gt;key&lt;/em&gt;. Such changes to the environment affect subprocesses started with &lt;a href=&quot;#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.popen&quot;&gt;&lt;code&gt;popen()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.execv&quot;&gt;&lt;code&gt;execv()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;key&lt;/em&gt; 라는 환경 변수를 설정 해제 (삭제)합니다 . 이러한 환경 변경은 &lt;a href=&quot;#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.popen&quot;&gt; &lt;code&gt;popen()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#os.fork&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#os.execv&quot;&gt; &lt;code&gt;execv()&lt;/code&gt; &lt;/a&gt; 시작된 하위 프로세스에 영향을줍니다 .</target>
        </trans-unit>
        <trans-unit id="8f11e903da2827da2ff494dc45518a52073a6deb" translate="yes" xml:space="preserve">
          <source>Unset the flag(s) specified by &lt;em&gt;flag&lt;/em&gt; without changing other flags. To remove more than one flag at a time, &lt;em&gt;flag&lt;/em&gt; maybe a string of more than one character.</source>
          <target state="translated">다른 플래그를 변경하지 않고 &lt;em&gt;플래그로&lt;/em&gt; 지정된 플래그를 설정 해제하십시오 . 한 번에 둘 이상의 플래그를 제거하려면 &lt;em&gt;플래그&lt;/em&gt; 가 둘 이상의 문자로 구성된 문자열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9423b5564c4d3ab497eed5796bde589630c032b" translate="yes" xml:space="preserve">
          <source>Unset the flag(s) specified by &lt;em&gt;flag&lt;/em&gt; without changing other flags. To remove more than one flag at a time, &lt;em&gt;flag&lt;/em&gt; maybe a string of more than one character. If &amp;ldquo;info&amp;rdquo; contains experimental information rather than flags, the current &amp;ldquo;info&amp;rdquo; is not modified.</source>
          <target state="translated">다른 플래그를 변경하지 않고 &lt;em&gt;플래그로&lt;/em&gt; 지정된 플래그를 설정 해제하십시오 . 한 번에 둘 이상의 플래그를 제거하려면 &lt;em&gt;플래그&lt;/em&gt; 가 둘 이상의 문자로 구성된 문자열 일 수 있습니다. &quot;info&quot;에 플래그가 아닌 실험 정보가 포함되어 있으면 현재 &quot;info&quot;가 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b5ce3b0587e5dfc574c05a997b77253d37b5a96" translate="yes" xml:space="preserve">
          <source>Unsigned, 16-bit big-endian audio</source>
          <target state="translated">부호없는 16 비트 빅 엔디안 오디오</target>
        </trans-unit>
        <trans-unit id="3cf888094dce0dff5dc88fdc3a8fdf414a7518f5" translate="yes" xml:space="preserve">
          <source>Unsigned, 16-bit little-endian audio</source>
          <target state="translated">부호없는 16 비트 리틀 엔디안 오디오</target>
        </trans-unit>
        <trans-unit id="3a6c3f57facb20b402f0b1be0b10f27489e6c0cc" translate="yes" xml:space="preserve">
          <source>Unsigned, 8-bit audio</source>
          <target state="translated">부호없는 8 비트 오디오</target>
        </trans-unit>
        <trans-unit id="0eebb997e8491e1bc2700306d597290b18c9bdb9" translate="yes" xml:space="preserve">
          <source>Unsubscribe from old mailbox.</source>
          <target state="translated">기존 메일 박스에서 탈퇴합니다.</target>
        </trans-unit>
        <trans-unit id="d4c4c55a3d374ba63645f299181454728fde4b94" translate="yes" xml:space="preserve">
          <source>Untabify Region</source>
          <target state="translated">지역 탭 해제</target>
        </trans-unit>
        <trans-unit id="6124f32fdf4ba4b9425841e4026583849d20ed0f" translate="yes" xml:space="preserve">
          <source>Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Python 3.8까지 &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; 에는 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt; 메서드 가 부족했습니다 .</target>
        </trans-unit>
        <trans-unit id="dfe20dc7f16ab68a7c4453b184c25a263736c687" translate="yes" xml:space="preserve">
          <source>Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Until Python 3.8, &lt;a href=&quot;stdtypes#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt; lacked a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="2038bdec9210202d0d9d74839e3925ff0cd91ba1" translate="yes" xml:space="preserve">
          <source>Up</source>
          <target state="translated">Up</target>
        </trans-unit>
        <trans-unit id="3b0b27ec87edd9e5b151e783684c3250b5138da3" translate="yes" xml:space="preserve">
          <source>Up to the prompt, the output from the above is:</source>
          <target state="translated">프롬프트까지 위의 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5c35290c06ff39f7f8240e3f8c98ffb7469e01ce" translate="yes" xml:space="preserve">
          <source>Up-arrow</source>
          <target state="translated">Up-arrow</target>
        </trans-unit>
        <trans-unit id="0a4cd8f9b0c49335833b73322f5129a273d0a57f" translate="yes" xml:space="preserve">
          <source>Update &lt;code id=&quot;index-3&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-4&quot;&gt;COLS&lt;/code&gt;. Useful for detecting manual screen resize.</source>
          <target state="translated">업데이트 &lt;code id=&quot;index-3&quot;&gt;LINES&lt;/code&gt; 와 &lt;code id=&quot;index-4&quot;&gt;COLS&lt;/code&gt; . 수동 화면 크기 조정을 감지하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="6cc3833644a8b3574bfb4234d0fb0ff4bb3d0c1b" translate="yes" xml:space="preserve">
          <source>Update &lt;em&gt;environ&lt;/em&gt; with trivial defaults for testing purposes.</source>
          <target state="translated">테스트 목적으로 사소한 기본값으로 &lt;em&gt;환경&lt;/em&gt; 을 업데이트 하십시오.</target>
        </trans-unit>
        <trans-unit id="7d43ded4f21a448758ca9de774778892a8573fef" translate="yes" xml:space="preserve">
          <source>Update a &lt;em&gt;wrapper&lt;/em&gt; function to look like the &lt;em&gt;wrapped&lt;/em&gt; function. The optional arguments are tuples to specify which attributes of the original function are assigned directly to the matching attributes on the wrapper function and which attributes of the wrapper function are updated with the corresponding attributes from the original function. The default values for these arguments are the module level constants &lt;code&gt;WRAPPER_ASSIGNMENTS&lt;/code&gt; (which assigns to the wrapper function&amp;rsquo;s &lt;code&gt;__module__&lt;/code&gt;, &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__qualname__&lt;/code&gt;, &lt;code&gt;__annotations__&lt;/code&gt; and &lt;code&gt;__doc__&lt;/code&gt;, the documentation string) and &lt;code&gt;WRAPPER_UPDATES&lt;/code&gt; (which updates the wrapper function&amp;rsquo;s &lt;code&gt;__dict__&lt;/code&gt;, i.e. the instance dictionary).</source>
          <target state="translated">&lt;em&gt;랩핑 된&lt;/em&gt; 기능 처럼 보이도록 &lt;em&gt;랩퍼&lt;/em&gt; 기능을 갱신하십시오 . 선택적 인수는 원래 함수의 속성이 랩퍼 함수의 일치하는 속성에 직접 지정되고 랩퍼 함수의 속성이 원래 함수의 해당 속성으로 업데이트되도록 지정하는 튜플입니다. 이러한 인수의 기본값은 모듈 레벨 상수 &lt;code&gt;WRAPPER_ASSIGNMENTS&lt;/code&gt; (랩퍼 함수의 &lt;code&gt;__module__&lt;/code&gt; , &lt;code&gt;__name__&lt;/code&gt; , &lt;code&gt;__qualname__&lt;/code&gt; , &lt;code&gt;__annotations__&lt;/code&gt; 및 &lt;code&gt;__doc__&lt;/code&gt; , 문서화 문자열에 지정됨 ) 및 (랩퍼 함수의 &lt;code&gt;__dict__&lt;/code&gt; 를 갱신하는)&lt;em&gt;&lt;/em&gt; &lt;code&gt;WRAPPER_UPDATES&lt;/code&gt; 즉, 인스턴스 사전).</target>
        </trans-unit>
        <trans-unit id="c8eaa3caae0035d8d2b93d9ea5157036f5e890f4" translate="yes" xml:space="preserve">
          <source>Update and return a dictionary representing the current local symbol table. Free variables are returned by &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; when it is called in function blocks, but not in class blocks. Note that at the module level, &lt;a href=&quot;#locals&quot;&gt;&lt;code&gt;locals()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; are the same dictionary.</source>
          <target state="translated">현재 로컬 심볼 테이블을 나타내는 사전을 업데이트하고 반환합니다. 사용 가능한 변수는 함수 블록에서 호출되지만 클래스 블록에서는 호출되지 않을 때 &lt;a href=&quot;#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt; 의해 반환됩니다 . 모듈 수준에서 &lt;a href=&quot;#locals&quot;&gt; &lt;code&gt;locals()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt; 는 동일한 사전입니다.</target>
        </trans-unit>
        <trans-unit id="6e881f9b576f8d197b4c916699604917c6bea3ff" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;is_authenticated&lt;/code&gt; flag for the given &lt;em&gt;uri&lt;/em&gt; or list of URIs.</source>
          <target state="translated">지정된 &lt;em&gt;URI&lt;/em&gt; 또는 URI 목록에 대해 &lt;code&gt;is_authenticated&lt;/code&gt; 플래그를 업데이트하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="676722049af84191150c39b99ccf011847f430a6" translate="yes" xml:space="preserve">
          <source>Update the current cursor position of all the ancestors of the window to reflect the current cursor position of the window.</source>
          <target state="translated">창의 현재 커서 위치를 반영하도록 창의 모든 조상의 현재 커서 위치를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="6c67b9370f6773373a2ad4a9d82d3d4b78ed6025" translate="yes" xml:space="preserve">
          <source>Update the current file selection to &lt;em&gt;file&lt;/em&gt;.</source>
          <target state="translated">Update the current file selection to &lt;em&gt;file&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="919dc08005fb86feaa413a4235e9bce2c6e74486" translate="yes" xml:space="preserve">
          <source>Update the dictionary &lt;em&gt;d&lt;/em&gt; with keys and values from &lt;em&gt;other&lt;/em&gt;, which may be either a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; or an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of key/value pairs. The values of &lt;em&gt;other&lt;/em&gt; take priority when &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;other&lt;/em&gt; share keys.</source>
          <target state="translated">Update the dictionary &lt;em&gt;d&lt;/em&gt; with keys and values from &lt;em&gt;other&lt;/em&gt;, which may be either a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; or an &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-iterable&quot;&gt;iterable&lt;/a&gt; of key/value pairs. The values of &lt;em&gt;other&lt;/em&gt; take priority when &lt;em&gt;d&lt;/em&gt; and &lt;em&gt;other&lt;/em&gt; share keys.</target>
        </trans-unit>
        <trans-unit id="7f52facdafd3c7b416be3ca2987e689c01a20aeb" translate="yes" xml:space="preserve">
          <source>Update the dictionary with the key/value pairs from &lt;em&gt;other&lt;/em&gt;, overwriting existing keys. Return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">기존 키를 덮어 쓰는 &lt;em&gt;다른&lt;/em&gt; 키 / 값 쌍으로 사전을 업데이트하십시오 . 반환 &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="844dd4fa8e5519fd020d3adb913a31ce577cec8e" translate="yes" xml:space="preserve">
          <source>Update the display immediately (sync actual screen with previous drawing/deleting methods).</source>
          <target state="translated">디스플레이를 즉시 업데이트합니다 (실제 화면을 이전 그리기 / 삭제 방법과 동기화).</target>
        </trans-unit>
        <trans-unit id="c72f3ad02a5bd1086e31aa55dc65f7726c021bb9" translate="yes" xml:space="preserve">
          <source>Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object로&lt;/a&gt; 해시 객체를 업데이트하십시오 . 반복되는 호출은 모든 인수가 연결된 단일 호출과 같습니다. &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; 는 &lt;code&gt;m.update(a+b)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b9534f94ddfcd737e337a0d4a5d2e9412c424077" translate="yes" xml:space="preserve">
          <source>Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt;.</source>
          <target state="translated">Update the hash object with the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a+b)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64c77d232184003c8e5ef8dfe4a062a6ffc29da4" translate="yes" xml:space="preserve">
          <source>Update the hmac object with &lt;em&gt;msg&lt;/em&gt;. Repeated calls are equivalent to a single call with the concatenation of all the arguments: &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; is equivalent to &lt;code&gt;m.update(a + b)&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;msg로&lt;/em&gt; hmac 객체를 업데이트하십시오 . 반복되는 호출은 모든 인수가 연결된 단일 호출과 같습니다. &lt;code&gt;m.update(a); m.update(b)&lt;/code&gt; 는 &lt;code&gt;m.update(a + b)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="49fcb28da96252d3143add7d524b059fc11f4dbf" translate="yes" xml:space="preserve">
          <source>Update the physical screen. The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state. The &lt;a href=&quot;#curses.doupdate&quot;&gt;&lt;code&gt;doupdate()&lt;/code&gt;&lt;/a&gt; ground updates the physical screen to match the virtual screen.</source>
          <target state="translated">실제 화면을 업데이트하십시오. curses 라이브러리는 두 개의 데이터 구조를 유지합니다. 하나는 현재 실제 화면 내용을 나타내고 하나는 원하는 다음 상태를 나타냅니다. &lt;a href=&quot;#curses.doupdate&quot;&gt; &lt;code&gt;doupdate()&lt;/code&gt; &lt;/a&gt; 접지는 가상 화면에 맞게 실제 화면을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="916502e64e45e8917403b3f7e2e4cb9240ec037b" translate="yes" xml:space="preserve">
          <source>Update the set, adding elements from all others.</source>
          <target state="translated">다른 모든 요소를 ​​추가하여 세트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="ac6527f15e4975da015ccaa43d3d4bfa51b09597" translate="yes" xml:space="preserve">
          <source>Update the set, keeping only elements found in either set, but not in both.</source>
          <target state="translated">두 세트가 아닌 두 세트에있는 요소 만 유지하면서 세트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="1efb006f7c16e37178e13286e3116f97a446042c" translate="yes" xml:space="preserve">
          <source>Update the set, keeping only elements found in it and all others.</source>
          <target state="translated">세트와 다른 모든 요소에있는 요소 만 유지하면서 세트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="e5f938e1032dfc279fd2d4c9bbde2ed0d316e18d" translate="yes" xml:space="preserve">
          <source>Update the set, removing elements found in others.</source>
          <target state="translated">다른 세트에서 발견 된 요소를 제거하여 세트를 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="8f6ad5a4c112a979bb39e0daf27f6f78eab18230" translate="yes" xml:space="preserve">
          <source>Update the values in the Morsel dictionary with the values in the dictionary &lt;em&gt;values&lt;/em&gt;. Raise an error if any of the keys in the &lt;em&gt;values&lt;/em&gt; dict is not a valid &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">Morsel 사전의 값을 사전 &lt;em&gt;값&lt;/em&gt; 의 값으로 업데이트하십시오 . &lt;em&gt;값&lt;/em&gt; dict 의 키 중 하나가 유효한 &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; 속성 이 아닌 경우 오류가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="403f8c83e34150e4e050e7802c9ae3b5c02baa0b" translate="yes" xml:space="preserve">
          <source>Updates the virtual screen after changes in the panel stack. This does not call &lt;a href=&quot;curses#curses.doupdate&quot;&gt;&lt;code&gt;curses.doupdate()&lt;/code&gt;&lt;/a&gt;, so you&amp;rsquo;ll have to do this yourself.</source>
          <target state="translated">패널 스택이 변경된 후 가상 화면을 업데이트합니다. 이것은 &lt;a href=&quot;curses#curses.doupdate&quot;&gt; &lt;code&gt;curses.doupdate()&lt;/code&gt; &lt;/a&gt; 호출하지 않으므로 직접해야합니다.</target>
        </trans-unit>
        <trans-unit id="5fbbdb84597aa8a194e7826194c031e681da3e5b" translate="yes" xml:space="preserve">
          <source>Updating Code For New Versions of Dependencies</source>
          <target state="translated">새 버전의 종속성에 대한 코드 업데이트</target>
        </trans-unit>
        <trans-unit id="6cfc0fe1e7552b2208957be5568c4b831410776d" translate="yes" xml:space="preserve">
          <source>Upgrade an existing connection to TLS.</source>
          <target state="translated">기존 연결을 TLS로 업그레이드하십시오.</target>
        </trans-unit>
        <trans-unit id="c033cfa69d72d0506f0739c3dd946dac4f60d820" translate="yes" xml:space="preserve">
          <source>Upgrade an existing transport-based connection to TLS.</source>
          <target state="translated">기존 전송 기반 연결을 TLS로 업그레이드하십시오.</target>
        </trans-unit>
        <trans-unit id="8e7085c36826f39b955d3407ed1c8e8be7dce597" translate="yes" xml:space="preserve">
          <source>Upgrades the core venv dependency packages (currently &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt;) in the environment. This is done by shelling out to the &lt;code&gt;pip&lt;/code&gt; executable in the environment.</source>
          <target state="translated">Upgrades the core venv dependency packages (currently &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;setuptools&lt;/code&gt; ) in the environment. This is done by shelling out to the &lt;code&gt;pip&lt;/code&gt; executable in the environment.</target>
        </trans-unit>
        <trans-unit id="93c2d8026e88b79d364deb29293028e59014ecd4" translate="yes" xml:space="preserve">
          <source>Upgrading optparse code</source>
          <target state="translated">옵 파스 코드 업그레이드</target>
        </trans-unit>
        <trans-unit id="6885989b161691127084226c65d60813ef15d1e3" translate="yes" xml:space="preserve">
          <source>Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt;; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt;. Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 옵션으로 시작하면 IDLE은 환경 변수 &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; 또는 &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; &lt;/a&gt; 에서 참조하는 파일을 실행합니다 . IDLE은 먼저 &lt;code&gt;IDLESTARTUP&lt;/code&gt; 을 확인합니다 . 경우 &lt;code&gt;IDLESTARTUP&lt;/code&gt; 가 존재하는 참조 파일이 실행됩니다. 경우 &lt;code&gt;IDLESTARTUP&lt;/code&gt; 을 위한 본, IDLE 검사 아니다 &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; . 이러한 환경 변수가 참조하는 파일은 IDLE 쉘에서 자주 사용되는 함수를 저장하거나 공통 명령문을 가져 오기 위해 import 문을 실행하기에 편리한 위치입니다.</target>
        </trans-unit>
        <trans-unit id="d3381a97387d24f932c2e625415ecf85f4dee6af" translate="yes" xml:space="preserve">
          <source>Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONSTARTUP&lt;/code&gt;&lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt;; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt;. Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</source>
          <target state="translated">Upon startup with the &lt;code&gt;-s&lt;/code&gt; option, IDLE will execute the file referenced by the environment variables &lt;code id=&quot;index-5&quot;&gt;IDLESTARTUP&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONSTARTUP&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; &lt;/a&gt;. IDLE first checks for &lt;code&gt;IDLESTARTUP&lt;/code&gt; ; if &lt;code&gt;IDLESTARTUP&lt;/code&gt; is present the file referenced is run. If &lt;code&gt;IDLESTARTUP&lt;/code&gt; is not present, IDLE checks for &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; . Files referenced by these environment variables are convenient places to store functions that are used frequently from the IDLE shell, or for executing import statements to import common modules.</target>
        </trans-unit>
        <trans-unit id="ceeef23b43f204cd4fc87f8a0c602258f435ad5b" translate="yes" xml:space="preserve">
          <source>Upon unpickling, if the class defines &lt;a href=&quot;#object.__setstate__&quot;&gt;&lt;code&gt;__setstate__()&lt;/code&gt;&lt;/a&gt;, it is called with the unpickled state. In that case, there is no requirement for the state object to be a dictionary. Otherwise, the pickled state must be a dictionary and its items are assigned to the new instance&amp;rsquo;s dictionary.</source>
          <target state="translated">피클 링 해제시 클래스가 &lt;a href=&quot;#object.__setstate__&quot;&gt; &lt;code&gt;__setstate__()&lt;/code&gt; &lt;/a&gt; 정의하면 피클 링되지 않은 상태로 호출됩니다. 이 경우 상태 객체가 사전 일 필요는 없습니다. 그렇지 않으면 절인 상태는 사전이어야하고 해당 항목은 새 인스턴스 사전에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="442c0ca432bba7bb5e9fddb35000be1fc0080e00" translate="yes" xml:space="preserve">
          <source>Upper left of keypad</source>
          <target state="translated">키패드의 왼쪽 상단</target>
        </trans-unit>
        <trans-unit id="26be040f98d4f92519d4f55adbafdaf27d0bf91c" translate="yes" xml:space="preserve">
          <source>Upper right of keypad</source>
          <target state="translated">키패드의 오른쪽 상단</target>
        </trans-unit>
        <trans-unit id="5d6984e58af99ef5098428fe251573a59542bd1a" translate="yes" xml:space="preserve">
          <source>Upper-left corner</source>
          <target state="translated">왼쪽 상단</target>
        </trans-unit>
        <trans-unit id="f899c21125a124680149002a215b010390a14035" translate="yes" xml:space="preserve">
          <source>Upper-right corner</source>
          <target state="translated">오른쪽 상단</target>
        </trans-unit>
        <trans-unit id="412e31909b8ad1417c4a39495653fdeba58cd034" translate="yes" xml:space="preserve">
          <source>Urdu</source>
          <target state="translated">Urdu</target>
        </trans-unit>
        <trans-unit id="6c0f6c90b039eb2f8ccf225a7eea7326a1231177" translate="yes" xml:space="preserve">
          <source>Urgent data for read</source>
          <target state="translated">읽을 긴급 데이터</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="c54d06d3411c536072cc47249dd128a605cc382d" translate="yes" xml:space="preserve">
          <source>Usage as a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</source>
          <target state="translated">A와 사용법 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-decorator&quot;&gt;장식&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="d47d72011e547326fb4d40672ef000db79836cb3" translate="yes" xml:space="preserve">
          <source>Usage as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</source>
          <target state="translated">Usage as a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-decorator&quot;&gt;decorator&lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="8e06c218123ecda4e08d6b8f0a242dd0c07ffde1" translate="yes" xml:space="preserve">
          <source>Usage example: &lt;code&gt;fi =
fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;,
&quot;surrogateescape&quot;))&lt;/code&gt;</source>
          <target state="translated">사용 예 : &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_encoded(&quot;utf-8&quot;, &quot;surrogateescape&quot;))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="23a84570fc52dfd991c6774587f13dbfa3c6b304" translate="yes" xml:space="preserve">
          <source>Usage example: &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_compressed)&lt;/code&gt;</source>
          <target state="translated">사용 예 : &lt;code&gt;fi = fileinput.FileInput(openhook=fileinput.hook_compressed)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30417f716d6267476ad9fad028a2fc6e463880c9" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;KabulTz&lt;/code&gt; from above:</source>
          <target state="translated">위 의 &lt;code&gt;KabulTz&lt;/code&gt; 사용법 :</target>
        </trans-unit>
        <trans-unit id="fd2184f1d367ba383d26c0e300960fadb0d8272b" translate="yes" xml:space="preserve">
          <source>Usage of the DOM interface in Python is straight-forward. The following mapping rules apply:</source>
          <target state="translated">파이썬에서 DOM 인터페이스의 사용법은 간단합니다. 다음과 같은 매핑 규칙이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="1d4d43cc6f3a833e0340a0d1794b6d7b9958657e" translate="yes" xml:space="preserve">
          <source>Use</source>
          <target state="translated">Use</target>
        </trans-unit>
        <trans-unit id="4b1f7ccf5dd79f8ee16571bf32c1e6c4007733ce" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#asyncio.WriteTransport.get_write_buffer_limits&quot;&gt;&lt;code&gt;get_write_buffer_limits()&lt;/code&gt;&lt;/a&gt; to get the limits.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.WriteTransport.get_write_buffer_limits&quot;&gt; &lt;code&gt;get_write_buffer_limits()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 한계를 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="0bcdd77ca18769c76d2f648e31dbca518354ce9b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#asyncio.WriteTransport.set_write_buffer_limits&quot;&gt;&lt;code&gt;set_write_buffer_limits()&lt;/code&gt;&lt;/a&gt; to set the limits.</source>
          <target state="translated">사용 &lt;a href=&quot;#asyncio.WriteTransport.set_write_buffer_limits&quot;&gt; &lt;code&gt;set_write_buffer_limits()&lt;/code&gt; &lt;/a&gt; 한계를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="5ff19ffa16005ed393bb50a2fc301ae7c8434921" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt;&lt;code&gt;communicate()&lt;/code&gt;&lt;/a&gt; rather than &lt;a href=&quot;#subprocess.Popen.stdin&quot;&gt;&lt;code&gt;.stdin.write&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#subprocess.Popen.stdout&quot;&gt;&lt;code&gt;.stdout.read&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#subprocess.Popen.stderr&quot;&gt;&lt;code&gt;.stderr.read&lt;/code&gt;&lt;/a&gt; to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process.</source>
          <target state="translated">자식 프로세스를 채우고 차단하는 다른 OS 파이프 버퍼로 인한 교착 상태를 피하려면 &lt;a href=&quot;#subprocess.Popen.stdin&quot;&gt; &lt;code&gt;.stdin.write&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#subprocess.Popen.stdout&quot;&gt; &lt;code&gt;.stdout.read&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#subprocess.Popen.stderr&quot;&gt; &lt;code&gt;.stderr.read&lt;/code&gt; &lt;/a&gt; 대신 communi &lt;a href=&quot;#subprocess.Popen.communicate&quot;&gt; &lt;code&gt;communicate()&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd81adbbc79cd205fc1bc2737ce1e2085e7810fe" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#tokenize.open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to open Python source files: it uses &lt;a href=&quot;#tokenize.detect_encoding&quot;&gt;&lt;code&gt;detect_encoding()&lt;/code&gt;&lt;/a&gt; to detect the file encoding.</source>
          <target state="translated">&lt;a href=&quot;#tokenize.open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 을 사용 하여 Python 소스 파일을 엽니 다. &lt;a href=&quot;#tokenize.detect_encoding&quot;&gt; &lt;code&gt;detect_encoding()&lt;/code&gt; &lt;/a&gt; 을 사용 하여 파일 인코딩을 감지합니다.</target>
        </trans-unit>
        <trans-unit id="b5b266fadd2e7245f37c616a8922563663fb3b4d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; to reload the snapshot.</source>
          <target state="translated">&lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 스냅 샷을 다시로드하십시오.</target>
        </trans-unit>
        <trans-unit id="5773877b49b43db6bf7c94187009bb8144711130" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; as the value if you want &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; to create mocks for you. In this case the created mocks are passed into a decorated function by keyword, and a dictionary is returned when &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; is used as a context manager.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt; 에서 모의 ​​객체를 만들려면 &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt; 를 값으로 사용하십시오 . 이 경우 작성된 ​​모의는 키워드로 데코 레이팅 된 함수로 전달되며 &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt; 이 컨텍스트 관리자로 사용될 때 사전이 리턴됩니다 .</target>
        </trans-unit>
        <trans-unit id="801ec70715ed39b5c5c242a01eb2e137022a3645" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; to indicate that a value could be any type in a typesafe manner. Use &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; to indicate that a value is dynamically typed.</source>
          <target state="translated">typesafe 방식으로 값이 모든 유형이 될 수 있음을 나타내려면 &lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 . 값을 동적으로 입력 하려면 &lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d55b6e9ca90a032f6af3085cee74e97a5a82792" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.cmp_to_key&quot;&gt;&lt;code&gt;functools.cmp_to_key()&lt;/code&gt;&lt;/a&gt; to convert an old-style &lt;em&gt;cmp&lt;/em&gt; function to a &lt;em&gt;key&lt;/em&gt; function.</source>
          <target state="translated">&lt;a href=&quot;functools#functools.cmp_to_key&quot;&gt; &lt;code&gt;functools.cmp_to_key()&lt;/code&gt; &lt;/a&gt; 를 사용 하여 이전 스타일 &lt;em&gt;cmp&lt;/em&gt; 함수를 &lt;em&gt;키&lt;/em&gt; 함수 로 변환 하십시오 .</target>
        </trans-unit>
        <trans-unit id="0ae804c4e2566a021e2b7df1cb5f86d33af4f596" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;to pass keyword arguments&lt;/a&gt; to &lt;em&gt;callback&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;functools#functools.partial&quot;&gt; &lt;code&gt;functools.partial()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt; 을&lt;/a&gt; 사용 하여 키워드 인수 를 &lt;em&gt;callback &lt;/em&gt;에 전달 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7faa606e98b27a2cbd434b59751dcf554bb80399" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;functools#functools.partial&quot;&gt;&lt;code&gt;functools.partial()&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt;to pass keyword arguments&lt;/a&gt; to &lt;em&gt;func&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;functools#functools.partial&quot;&gt; &lt;code&gt;functools.partial()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#asyncio-pass-keywords&quot;&gt; 을&lt;/a&gt; 사용 하여 키워드 인수 를 &lt;em&gt;func &lt;/em&gt;에 전달 하십시오 .</target>
        </trans-unit>
        <trans-unit id="caa6b6a91146066a6ab2e2391258412526412a60" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;importlib#importlib.util.module_from_spec&quot;&gt;&lt;code&gt;importlib.util.module_from_spec()&lt;/code&gt;&lt;/a&gt; to create a new module if you wish to set the various import-controlled attributes.</source>
          <target state="translated">다양한 가져 오기 제어 속성을 설정 하려면 &lt;a href=&quot;importlib#importlib.util.module_from_spec&quot;&gt; &lt;code&gt;importlib.util.module_from_spec()&lt;/code&gt; &lt;/a&gt; 을 사용하여 새 모듈을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="6be4f4ccdec4c24fadfe09779a33e3199c2a99e4" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;math#math.ulp&quot;&gt;&lt;code&gt;math.ulp(0.0)&lt;/code&gt;&lt;/a&gt; to get the smallest positive &lt;em&gt;denormalized&lt;/em&gt; representable float.</source>
          <target state="translated">Use &lt;a href=&quot;math#math.ulp&quot;&gt; &lt;code&gt;math.ulp(0.0)&lt;/code&gt; &lt;/a&gt; to get the smallest positive &lt;em&gt;denormalized&lt;/em&gt; representable float.</target>
        </trans-unit>
        <trans-unit id="92571159e076392f54e9a058f2068114f55f5d84" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;pickletools#pickletools.optimize&quot;&gt;&lt;code&gt;pickletools.optimize()&lt;/code&gt;&lt;/a&gt; if you need more compact pickles.</source>
          <target state="translated">더 작은 피클이 필요한 경우 &lt;a href=&quot;pickletools#pickletools.optimize&quot;&gt; &lt;code&gt;pickletools.optimize()&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="977759ccf7fc3d35b1728ab61d457345039786ef" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;threading#threading.get_ident&quot;&gt;&lt;code&gt;threading.get_ident()&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;threading#threading.Thread.ident&quot;&gt;&lt;code&gt;ident&lt;/code&gt;&lt;/a&gt; attribute of &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt; objects to get a suitable value for &lt;em&gt;thread_id&lt;/em&gt;.</source>
          <target state="translated">사용 &lt;a href=&quot;threading#threading.get_ident&quot;&gt; &lt;code&gt;threading.get_ident()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;threading#threading.Thread.ident&quot;&gt; &lt;code&gt;ident&lt;/code&gt; &lt;/a&gt; 의 속성 &lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; 는&lt;/a&gt; 에 적합한 값을 얻기 위해 객체 &lt;em&gt;thread_id을&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="4f310326200524afa7764d68027ab6eeaeafc777" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Text&lt;/code&gt; to indicate that a value must contain a unicode string in a manner that is compatible with both Python 2 and Python 3:</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 를 사용 하여 값이 Python 2 및 Python 3과 호환되는 방식으로 유니 코드 문자열을 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fea35a235eec9b227adb5fcb0a0c00435b41bfcb" translate="yes" xml:space="preserve">
          <source>Use &lt;em&gt;N&lt;/em&gt; workers to compile the files within the given directory. If &lt;code&gt;0&lt;/code&gt; is used, then the result of &lt;a href=&quot;os#os.cpu_count&quot;&gt;&lt;code&gt;os.cpu_count()&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="translated">&lt;em&gt;N&lt;/em&gt; worker를 사용 하여 주어진 디렉토리 내에서 파일을 컴파일하십시오. 경우 &lt;code&gt;0&lt;/code&gt; 이 사용되며, 다음의 결과 &lt;a href=&quot;os#os.cpu_count&quot;&gt; &lt;code&gt;os.cpu_count()&lt;/code&gt; &lt;/a&gt; 사용된다.</target>
        </trans-unit>
        <trans-unit id="495d495d7facfbe6f23a76a082fc3a5f0950c5d6" translate="yes" xml:space="preserve">
          <source>Use RPOP authentication (similar to UNIX r-commands) to log into POP3 server.</source>
          <target state="translated">POP3 서버에 로그인하려면 RPOP 인증 (UNIX r- 명령과 유사)을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f4e7f3e06376e3f4d8475ec58362eb2b2060abb3" translate="yes" xml:space="preserve">
          <source>Use a comma-separated list of &lt;code&gt;key: value&lt;/code&gt; pairs within braces: &lt;code&gt;{'jack': 4098, 'sjoerd': 4127}&lt;/code&gt; or &lt;code&gt;{4098: 'jack', 4127: 'sjoerd'}&lt;/code&gt;</source>
          <target state="translated">Use a comma-separated list of &lt;code&gt;key: value&lt;/code&gt; pairs within braces: &lt;code&gt;{'jack': 4098, 'sjoerd': 4127}&lt;/code&gt; or &lt;code&gt;{4098: 'jack', 4127: 'sjoerd'}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a14a9c5d9439258788566c63ffdb820f13b119c1" translate="yes" xml:space="preserve">
          <source>Use a comma-separated list of elements within braces: &lt;code&gt;{'jack', 'sjoerd'}&lt;/code&gt;</source>
          <target state="translated">Use a comma-separated list of elements within braces: &lt;code&gt;{'jack', 'sjoerd'}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ca50d93aa7b66037fe8330b7c294589afa919be" translate="yes" xml:space="preserve">
          <source>Use a dict comprehension: &lt;code&gt;{}&lt;/code&gt;, &lt;code&gt;{x: x ** 2 for x in range(10)}&lt;/code&gt;</source>
          <target state="translated">Use a dict comprehension: &lt;code&gt;{}&lt;/code&gt; , &lt;code&gt;{x: x ** 2 for x in range(10)}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a5be9a59141dd9bb7d182b14d93b2b1bd339016" translate="yes" xml:space="preserve">
          <source>Use a set comprehension: &lt;code&gt;{c for c in 'abracadabra' if c not in 'abc'}&lt;/code&gt;</source>
          <target state="translated">Use a set comprehension: &lt;code&gt;{c for c in 'abracadabra' if c not in 'abc'}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38ed25f85936d5ec93f7f6baaff0782bf76ef725" translate="yes" xml:space="preserve">
          <source>Use and behaviors of the &lt;em&gt;timeout&lt;/em&gt; argument are the same as in &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt;&lt;code&gt;Lock.acquire()&lt;/code&gt;&lt;/a&gt;. Note that some of these behaviors of &lt;em&gt;timeout&lt;/em&gt; differ from the implemented behaviors in &lt;a href=&quot;threading#threading.RLock.acquire&quot;&gt;&lt;code&gt;threading.RLock.acquire()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;timeout&lt;/em&gt; 인수 의 사용 및 동작은 &lt;a href=&quot;#multiprocessing.Lock.acquire&quot;&gt; &lt;code&gt;Lock.acquire()&lt;/code&gt; &lt;/a&gt; 와 동일 합니다. 이러한 &lt;em&gt;시간 초과&lt;/em&gt; 동작 중 일부는 &lt;a href=&quot;threading#threading.RLock.acquire&quot;&gt; &lt;code&gt;threading.RLock.acquire()&lt;/code&gt; &lt;/a&gt; 의 구현 동작과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="b8f6b7836c3c9781322ac632c3472944cbf5882e" translate="yes" xml:space="preserve">
          <source>Use of Basic HTTP Authentication:</source>
          <target state="translated">기본 HTTP 인증 사용 :</target>
        </trans-unit>
        <trans-unit id="06b1cfba601081732eb4d25b9f84434e8e55c28d" translate="yes" xml:space="preserve">
          <source>Use of a configuration file where logging configuration is just part of the overall application configuration.</source>
          <target state="translated">로깅 구성이 전체 응용 프로그램 구성의 일부인 구성 파일 사용.</target>
        </trans-unit>
        <trans-unit id="a7aa6e5161d91c7285f5b1ed3868d5a6211a2320" translate="yes" xml:space="preserve">
          <source>Use of a configuration read from a file, and then modified by the using application (e.g. based on command-line parameters or other aspects of the runtime environment) before being passed to &lt;code&gt;fileConfig&lt;/code&gt;.</source>
          <target state="translated">구성의 사용은 파일로부터 판독 한 다음에 전달되기 전에 (커맨드 라인 파라미터 또는 런타임 환경의 다른 측면에 기초 등)를 사용하여 애플리케이션에 의해 수정 &lt;code&gt;fileConfig&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="28af66b770f56fa6175a1ed4bd8aca50a0212688" translate="yes" xml:space="preserve">
          <source>Use of the &lt;em&gt;requote&lt;/em&gt; parameter with &lt;a href=&quot;#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; objects is deprecated.</source>
          <target state="translated">의 사용 &lt;em&gt;requote의&lt;/em&gt; 와 매개 변수 &lt;a href=&quot;#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; 이&lt;/a&gt; 되지 않습니다 오브젝트.</target>
        </trans-unit>
        <trans-unit id="f8807a8f268cd5a3fec930a6e701e4eec1a5a268" translate="yes" xml:space="preserve">
          <source>Use of the functions above is more portable than use of the first set of flags:</source>
          <target state="translated">위의 함수를 사용하면 첫 번째 플래그 집합을 사용하는 것보다 이식성이 뛰어납니다.</target>
        </trans-unit>
        <trans-unit id="0ee11de24afff11a85727ddbffb864bb44227fcd" translate="yes" xml:space="preserve">
          <source>Use of this function may introduce a security hole in your program. By the time you get around to doing anything with the file name it returns, someone else may have beaten you to the punch. &lt;a href=&quot;#tempfile.mktemp&quot;&gt;&lt;code&gt;mktemp()&lt;/code&gt;&lt;/a&gt; usage can be replaced easily with &lt;a href=&quot;#tempfile.NamedTemporaryFile&quot;&gt;&lt;code&gt;NamedTemporaryFile()&lt;/code&gt;&lt;/a&gt;, passing it the &lt;code&gt;delete=False&lt;/code&gt; parameter:</source>
          <target state="translated">이 기능을 사용하면 프로그램에 보안 허점이 생길 수 있습니다. 반환되는 파일 이름으로 무언가를 할 때 다른 누군가가 당신을 때릴 수도 있습니다. &lt;a href=&quot;#tempfile.mktemp&quot;&gt; &lt;code&gt;mktemp()&lt;/code&gt; &lt;/a&gt; 사용법은 &lt;a href=&quot;#tempfile.NamedTemporaryFile&quot;&gt; &lt;code&gt;NamedTemporaryFile()&lt;/code&gt; &lt;/a&gt; 로 쉽게 대체 하여 &lt;code&gt;delete=False&lt;/code&gt; 매개 변수를 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="f802f95d5b72b7e3d461f9294f782b8fe070b88f" translate="yes" xml:space="preserve">
          <source>Use of this setting requires a valid set of CA certificates to be passed, either to &lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt;&lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt;&lt;/a&gt; or as a value of the &lt;code&gt;ca_certs&lt;/code&gt; parameter to &lt;a href=&quot;#ssl.wrap_socket&quot;&gt;&lt;code&gt;wrap_socket()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 설정을 사용하려면 유효한 CA 인증서 세트를 &lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt; &lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt; &lt;/a&gt; 전달 하거나 &lt;code&gt;ca_certs&lt;/code&gt; 매개 변수 의 값 으로 &lt;a href=&quot;#ssl.wrap_socket&quot;&gt; &lt;code&gt;wrap_socket()&lt;/code&gt; &lt;/a&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="086661bc0d18c4e4d7976acf67e710dca98ca570" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.communicate&quot;&gt;&lt;code&gt;communicate()&lt;/code&gt;&lt;/a&gt; method rather than &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdin&quot;&gt;&lt;code&gt;process.stdin.write()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdout&quot;&gt;&lt;code&gt;await process.stdout.read()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stderr&quot;&gt;&lt;code&gt;await process.stderr.read&lt;/code&gt;&lt;/a&gt;. This avoids deadlocks due to streams pausing reading or writing and blocking the child process.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdin&quot;&gt; &lt;code&gt;process.stdin.write()&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stdout&quot;&gt; &lt;code&gt;await process.stdout.read()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.stderr&quot;&gt; &lt;code&gt;await process.stderr.read&lt;/code&gt; &lt;/a&gt; 대신 communi &lt;a href=&quot;#asyncio.asyncio.subprocess.Process.communicate&quot;&gt; &lt;code&gt;communicate()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하십시오 . 이렇게하면 읽기 또는 쓰기를 일시 중지하고 자식 프로세스를 차단하는 스트림으로 인한 교착 상태를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15cd98149cc9f937cb92cf3ef933c1d25a1d0470" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#typing.NewType&quot;&gt;&lt;code&gt;NewType()&lt;/code&gt;&lt;/a&gt; helper function to create distinct types:</source>
          <target state="translated">사용 &lt;a href=&quot;#typing.NewType&quot;&gt; &lt;code&gt;NewType()&lt;/code&gt; &lt;/a&gt; 구별 유형을 만들 도우미 함수를 :</target>
        </trans-unit>
        <trans-unit id="fa0f4760d676107d72f2532d197197a7035768be" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function (with the &lt;code&gt;doseq&lt;/code&gt; parameter set to &lt;code&gt;True&lt;/code&gt;) to convert such dictionaries into query strings.</source>
          <target state="translated">사용 &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt; 합니다 (와 기능 &lt;code&gt;doseq&lt;/code&gt; 의 에 파라미터 세트 &lt;code&gt;True&lt;/code&gt; 쿼리 문자열에 같은 사전 변환).</target>
        </trans-unit>
        <trans-unit id="e77864b913c6ed2d3f7946296e1c4dd7eaea83b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;#urllib.parse.urlencode&quot;&gt;&lt;code&gt;urllib.parse.urlencode()&lt;/code&gt;&lt;/a&gt; function to convert such lists of pairs into query strings.</source>
          <target state="translated">&lt;a href=&quot;#urllib.parse.urlencode&quot;&gt; &lt;code&gt;urllib.parse.urlencode()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 이러한 쌍의 목록을 쿼리 문자열로 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="624745c3dc94a2bef660c402897876197714f9db" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W error&lt;/code&gt;&lt;/a&gt; command line option or set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;error&lt;/code&gt; to treat warnings as errors.</source>
          <target state="translated">Use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W error&lt;/code&gt; &lt;/a&gt; command line option or set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;error&lt;/code&gt; to treat warnings as errors.</target>
        </trans-unit>
        <trans-unit id="ebe5f8c7c68a5eb4c363855f9e618e8fc09e455f" translate="yes" xml:space="preserve">
          <source>Use the &lt;em&gt;headers&lt;/em&gt; argument to the &lt;a href=&quot;#urllib.request.Request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; constructor, or:</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.Request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt; 생성자에 &lt;em&gt;headers&lt;/em&gt; 인수를 사용 하거나 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="397b1bdc25c901492de8340e267b2d32924dd46a" translate="yes" xml:space="preserve">
          <source>Use the config() method to update multiple attrs subsequent to object creation</source>
          <target state="translated">config () 메소드를 사용하여 오브젝트 작성 후 여러 attr을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="269f723392451288e2d733a8ac1b951a0f732cfc" translate="yes" xml:space="preserve">
          <source>Use the following functions to convert between time representations:</source>
          <target state="translated">다음 기능을 사용하여 시간 표현을 변환하십시오.</target>
        </trans-unit>
        <trans-unit id="8b0e3f6f824fb870d980396594c6ee74a24533bb" translate="yes" xml:space="preserve">
          <source>Use the high median when your data are discrete and you prefer the median to be an actual data point rather than interpolated.</source>
          <target state="translated">데이터가 불연속적이고 중간 값이 보간되지 않고 실제 데이터 포인트가되는 것을 선호 할 때 높은 중앙값을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cc76d8aaa9d87f83107351e712614efa5b9a4366" translate="yes" xml:space="preserve">
          <source>Use the high-level &lt;a href=&quot;#asyncio.create_task&quot;&gt;&lt;code&gt;asyncio.create_task()&lt;/code&gt;&lt;/a&gt; function to create Tasks, or the low-level &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt;&lt;code&gt;loop.create_task()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-future#asyncio.ensure_future&quot;&gt;&lt;code&gt;ensure_future()&lt;/code&gt;&lt;/a&gt; functions. Manual instantiation of Tasks is discouraged.</source>
          <target state="translated">상위 레벨 &lt;a href=&quot;#asyncio.create_task&quot;&gt; &lt;code&gt;asyncio.create_task()&lt;/code&gt; &lt;/a&gt; 함수를 사용하여 태스크를 작성하거나 하위 레벨 &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_task&quot;&gt; &lt;code&gt;loop.create_task()&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;asyncio-future#asyncio.ensure_future&quot;&gt; &lt;code&gt;ensure_future()&lt;/code&gt; &lt;/a&gt; 함수를 사용하십시오. 작업의 수동 인스턴스화는 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac8913b6579e52d49bb894464f33a8f70139a5e9" translate="yes" xml:space="preserve">
          <source>Use the low median when your data are discrete and you prefer the median to be an actual data point rather than interpolated.</source>
          <target state="translated">데이터가 불연속적이고 중간 값이 보간되지 않고 실제 데이터 포인트가되는 것을 선호 할 때 낮은 중앙값을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="38fc6d08600772eccde5630b8b2095c84488dee1" translate="yes" xml:space="preserve">
          <source>Use the more secure APOP authentication to log into the POP3 server.</source>
          <target state="translated">보다 안전한 APOP 인증을 사용하여 POP3 서버에 로그인하십시오.</target>
        </trans-unit>
        <trans-unit id="0c2845b8ec29e4c6963ceba130325e617d9cc8d5" translate="yes" xml:space="preserve">
          <source>Use the real uid/gid to test for access to &lt;em&gt;path&lt;/em&gt;. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to &lt;em&gt;path&lt;/em&gt;. &lt;em&gt;mode&lt;/em&gt; should be &lt;a href=&quot;#os.F_OK&quot;&gt;&lt;code&gt;F_OK&lt;/code&gt;&lt;/a&gt; to test the existence of &lt;em&gt;path&lt;/em&gt;, or it can be the inclusive OR of one or more of &lt;a href=&quot;#os.R_OK&quot;&gt;&lt;code&gt;R_OK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.W_OK&quot;&gt;&lt;code&gt;W_OK&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#os.X_OK&quot;&gt;&lt;code&gt;X_OK&lt;/code&gt;&lt;/a&gt; to test permissions. Return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if access is allowed, &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; if not. See the Unix man page &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/access(2)&quot;&gt;access(2)&lt;/a&gt;&lt;/em&gt; for more information.</source>
          <target state="translated">실제 uid / gid를 사용하여 &lt;em&gt;path에&lt;/em&gt; 대한 액세스를 테스트하십시오 . 대부분의 작업은 효과적인 uid / gid를 사용하므로이 루틴은 suid / sgid 환경에서 호출하는 사용자에게 지정된 액세스 권한이 있는지 테스트하기 위해 사용할 수 있습니다.&lt;em&gt; path에&lt;/em&gt; . &lt;em&gt;모드는&lt;/em&gt; 해야 &lt;a href=&quot;#os.F_OK&quot;&gt; &lt;code&gt;F_OK&lt;/code&gt; 이&lt;/a&gt; 의 존재를 테스트하기 위해 &lt;em&gt;경로를&lt;/em&gt; , 또는 포괄적 또는 하나 또는 그 이상이 될 수 &lt;a href=&quot;#os.R_OK&quot;&gt; &lt;code&gt;R_OK&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#os.W_OK&quot;&gt; &lt;code&gt;W_OK&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#os.X_OK&quot;&gt; &lt;code&gt;X_OK&lt;/code&gt; &lt;/a&gt; 권한을 테스트합니다. 액세스가 허용되면 &lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; 를&lt;/a&gt; , &lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt; 않으면 False를 리턴하십시오 . 자세한 내용은 Unix 매뉴얼 페이지 &lt;em&gt;&lt;a href=&quot;https://manpages.debian.org/access(2)&quot;&gt;access (2)&lt;/a&gt;&lt;/em&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="62d360059b352a3db9e680b1043a8ec5f3406a4a" translate="yes" xml:space="preserve">
          <source>Use the server&amp;rsquo;s cipher ordering preference, rather than the client&amp;rsquo;s. This option has no effect on client sockets and SSLv2 server sockets.</source>
          <target state="translated">클라이언트보다는 서버의 암호 순서 환경 설정을 사용하십시오. 이 옵션은 클라이언트 소켓 및 SSLv2 서버 소켓에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8de5b3b768e02c520630dfc4e4662871b8e86cb2" translate="yes" xml:space="preserve">
          <source>Use the specified date/time format, as accepted by &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; &lt;/a&gt; 허용 된대로 지정된 날짜 / 시간 형식을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="c2201f34bb8cca334db23ea9d46313e59f85d0d4" translate="yes" xml:space="preserve">
          <source>Use the specified format string for the handler.</source>
          <target state="translated">핸들러에 지정된 형식 문자열을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="213c03b10565262fbdcced639b5887e0adcb2562" translate="yes" xml:space="preserve">
          <source>Use the specified stream to initialize the StreamHandler. Note that this argument is incompatible with &lt;em&gt;filename&lt;/em&gt; - if both are present, a &lt;code&gt;ValueError&lt;/code&gt; is raised.</source>
          <target state="translated">지정된 스트림을 사용하여 StreamHandler를 초기화하십시오. 이 인수는 &lt;em&gt;filename&lt;/em&gt; 과 호환되지 않습니다. 둘 다 있으면 &lt;code&gt;ValueError&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="26bb8fc2a3dadbf252bc5cf4692acd775945e4ab" translate="yes" xml:space="preserve">
          <source>Use the type constructor: &lt;code&gt;dict()&lt;/code&gt;, &lt;code&gt;dict([('foo', 100), ('bar', 200)])&lt;/code&gt;, &lt;code&gt;dict(foo=100, bar=200)&lt;/code&gt;</source>
          <target state="translated">Use the type constructor: &lt;code&gt;dict()&lt;/code&gt; , &lt;code&gt;dict([('foo', 100), ('bar', 200)])&lt;/code&gt; , &lt;code&gt;dict(foo=100, bar=200)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46d5843d57501d9dc62ef5d4dbfa23e57389ac53" translate="yes" xml:space="preserve">
          <source>Use the type constructor: &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;set('foobar')&lt;/code&gt;, &lt;code&gt;set(['a', 'b', 'foo'])&lt;/code&gt;</source>
          <target state="translated">Use the type constructor: &lt;code&gt;set()&lt;/code&gt; , &lt;code&gt;set('foobar')&lt;/code&gt; , &lt;code&gt;set(['a', 'b', 'foo'])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2fd056e5e1d4febf6b91464a41740d353dee2ec" translate="yes" xml:space="preserve">
          <source>Use this at the end of &lt;code&gt;test_main&lt;/code&gt; whenever sub-processes are started. This will help ensure that no extra children (zombies) stick around to hog resources and create problems when looking for refleaks.</source>
          <target state="translated">서브 프로세스가 시작될 때마다 &lt;code&gt;test_main&lt;/code&gt; 의 끝에 이것을 사용하십시오 . 이렇게하면 여분의 어린이 (좀비)가 돼지 자원을 찌르기 위해 집착하거나 리플 랙을 찾을 때 문제를 일으키지 않도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="286f91c9a880de7bf2bb606d7ce509a86af31f09" translate="yes" xml:space="preserve">
          <source>Use this check to guard CPython&amp;rsquo;s implementation-specific tests or to run them only on the implementations guarded by the arguments:</source>
          <target state="translated">CPython의 구현 별 테스트를 보호하거나 인수로 보호되는 구현에서만 테스트를 실행하려면이 점검을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="ce127e7831cfc938739483bdfbe497d108a0f467" translate="yes" xml:space="preserve">
          <source>Use this function to calculate the variance from the entire population. To estimate the variance from a sample, the &lt;a href=&quot;#statistics.variance&quot;&gt;&lt;code&gt;variance()&lt;/code&gt;&lt;/a&gt; function is usually a better choice.</source>
          <target state="translated">이 함수를 사용하여 전체 모집단의 분산을 계산하십시오. 표본에서 분산을 추정하려면 일반적으로 &lt;a href=&quot;#statistics.variance&quot;&gt; &lt;code&gt;variance()&lt;/code&gt; &lt;/a&gt; 함수가 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="113c4cd7a277e177b4ab8b221b14cfbf88cf5706" translate="yes" xml:space="preserve">
          <source>Use this function when your data is a sample from a population. To calculate the variance from the entire population, see &lt;a href=&quot;#statistics.pvariance&quot;&gt;&lt;code&gt;pvariance()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">데이터가 모집단의 표본 인 경우이 기능을 사용하십시오. 전체 모집단의 분산을 계산하려면 &lt;a href=&quot;#statistics.pvariance&quot;&gt; &lt;code&gt;pvariance()&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1722f7fbf19d23d96b7db6a746432471393e9f3d" translate="yes" xml:space="preserve">
          <source>Use this metaclass to create an ABC. An ABC can be subclassed directly, and then acts as a mix-in class. You can also register unrelated concrete classes (even built-in classes) and unrelated ABCs as &amp;ldquo;virtual subclasses&amp;rdquo; &amp;ndash; these and their descendants will be considered subclasses of the registering ABC by the built-in &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; function, but the registering ABC won&amp;rsquo;t show up in their MRO (Method Resolution Order) nor will method implementations defined by the registering ABC be callable (not even via &lt;a href=&quot;functions#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt;). &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">이 메타 클래스를 사용하여 ABC를 작성하십시오. ABC는 직접 서브 클래 싱 된 다음 믹스 인 클래스 역할을합니다. 관련이없는 구체적 클래스 (내장 클래스)와 관련이없는 ABC를 &quot;가상 서브 클래스&quot;로 등록 할 수도 있습니다.이 서브 클래스와 그 하위 항목은 내장 &lt;a href=&quot;functions#issubclass&quot;&gt; &lt;code&gt;issubclass()&lt;/code&gt; &lt;/a&gt; 함수 에 의해 등록 ABC의 서브 클래스로 간주 되지만 등록 ABC는 이겼습니다. MRO (Method Resolution Order)에 표시되지 않으며 ABC 등록에 의해 정의 된 메소드 구현을 호출 할 수 없습니다 &lt;a href=&quot;functions#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt; 조차도 ). &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3bdab79877c9aff2232b3c33a22d6693c69abec8" translate="yes" xml:space="preserve">
          <source>Used as the return value of the callback function in &lt;a href=&quot;#ssl.SSLContext.set_servername_callback&quot;&gt;&lt;code&gt;SSLContext.set_servername_callback()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLContext.set_servername_callback&quot;&gt; &lt;code&gt;SSLContext.set_servername_callback()&lt;/code&gt; &lt;/a&gt; 에서 콜백 함수의 반환 값으로 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f82127a2c2d7d75bf1de72d48006249872b07dda" translate="yes" xml:space="preserve">
          <source>Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles.</source>
          <target state="translated">클래스 스크린에서 사용되며, 거북 놀이터로 ScrolledCanvas를 자동으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1e979fe09b6bd0f001f9f5432c729b3ccb465bc9" translate="yes" xml:space="preserve">
          <source>Used by queue consumers. For each &lt;a href=&quot;#asyncio.Queue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; used to fetch a task, a subsequent call to &lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; tells the queue that the processing on the task is complete.</source>
          <target state="translated">큐 소비자가 사용합니다. 태스크를 페치하는 데 사용 된 각 &lt;a href=&quot;#asyncio.Queue.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; 에 대해 후속 &lt;a href=&quot;#asyncio.Queue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; &lt;/a&gt; 호출 은 태스크 처리가 완료되었음을 큐에 알립니다.</target>
        </trans-unit>
        <trans-unit id="7a8582ae1f2665fbf84f38cb456084728c223988" translate="yes" xml:space="preserve">
          <source>Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for &lt;em&gt;tenths&lt;/em&gt; tenths of seconds, raise an exception if nothing has been typed. The value of &lt;em&gt;tenths&lt;/em&gt; must be a number between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;255&lt;/code&gt;. Use &lt;a href=&quot;#curses.nocbreak&quot;&gt;&lt;code&gt;nocbreak()&lt;/code&gt;&lt;/a&gt; to leave half-delay mode.</source>
          <target state="translated">사용자가 입력 한 문자를 프로그램에서 즉시 사용할 수 있다는 점에서 중단 모드와 유사한 반 지연 모드에 사용됩니다. 그러나 &lt;em&gt;10&lt;/em&gt; 분의 1/10 초 동안 차단 한 후 아무 것도 입력하지 않으면 예외가 발생합니다. &lt;em&gt;10&lt;/em&gt; 의 값은 &lt;code&gt;1&lt;/code&gt; 과 &lt;code&gt;255&lt;/code&gt; 사이의 숫자 여야합니다 . 반 지연 모드를 &lt;a href=&quot;#curses.nocbreak&quot;&gt; &lt;code&gt;nocbreak()&lt;/code&gt; &lt;/a&gt; 하려면 nocbreak () 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f06f022628c2d1b93ae2cc8948d4d0af4d5ae00a" translate="yes" xml:space="preserve">
          <source>Used for implementing formatted literal strings (f-strings). Pops an optional &lt;em&gt;fmt_spec&lt;/em&gt; from the stack, then a required &lt;em&gt;value&lt;/em&gt;. &lt;em&gt;flags&lt;/em&gt; is interpreted as follows:</source>
          <target state="translated">형식화 된 리터럴 문자열 (f- 문자열)을 구현하는 데 사용됩니다. 스택에서 선택적 &lt;em&gt;fmt_spec&lt;/em&gt; 을 &lt;em&gt;팝한&lt;/em&gt; 다음 필수 &lt;em&gt;값을&lt;/em&gt; 팝합니다 . &lt;em&gt;플래그&lt;/em&gt; 는 다음과 같이 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="fcc54f6a9aa92d7a088351515d65a7c819a35b89" translate="yes" xml:space="preserve">
          <source>Used internally for PIL-style arrays. The value is informational only.</source>
          <target state="translated">PIL 스타일 배열에 내부적으로 사용됩니다. 값은 정보 제공 용입니다.</target>
        </trans-unit>
        <trans-unit id="6491331167a81c53e5c33555dd1c8389a48d8445" translate="yes" xml:space="preserve">
          <source>Used to communicate with horizontal scrollbars.</source>
          <target state="translated">가로 스크롤 막대와 통신하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c64f9f83dce5dde840388bdaecc8458dccd14e03" translate="yes" xml:space="preserve">
          <source>Used to communicate with vertical scrollbars. For some more information, see above.</source>
          <target state="translated">세로 스크롤 막대와 통신하는 데 사용됩니다. 자세한 내용은 위를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bf4ad9ddaa5df0e2aafe056836983124424bd313" translate="yes" xml:space="preserve">
          <source>Used to compare</source>
          <target state="translated">비교하는 데 사용</target>
        </trans-unit>
        <trans-unit id="91a1d8f2678510dd75c3aa4dbdec84d9816a43ed" translate="yes" xml:space="preserve">
          <source>Used to compute initial rollover time</source>
          <target state="translated">초기 롤오버 시간을 계산하는 데 사용</target>
        </trans-unit>
        <trans-unit id="08a327ec030bd193b20ca54e75819675f7371b1c" translate="yes" xml:space="preserve">
          <source>Used to indicate a set of characters. In a set:</source>
          <target state="translated">문자 집합을 나타내는 데 사용됩니다. 세트에서 :</target>
        </trans-unit>
        <trans-unit id="f0e9f07f7d6a756d8e0d078a5e0fe1a3f6b1b536" translate="yes" xml:space="preserve">
          <source>Useful constants representing internal nodes of the parse tree.</source>
          <target state="translated">구문 분석 트리의 내부 노드를 나타내는 유용한 상수입니다.</target>
        </trans-unit>
        <trans-unit id="87be7f67261e2f0fefc8a90dca21ae95816dbf29" translate="yes" xml:space="preserve">
          <source>Useful constants representing leaf nodes of the parse tree and functions for testing node values.</source>
          <target state="translated">구문 분석 트리의 리프 노드를 나타내는 유용한 상수 및 노드 값을 테스트하기위한 함수입니다.</target>
        </trans-unit>
        <trans-unit id="ba015f21c7d53068a8d1713a783f9a4aa518b47d" translate="yes" xml:space="preserve">
          <source>Useful example of &lt;a href=&quot;#module-atexit&quot;&gt;&lt;code&gt;atexit&lt;/code&gt;&lt;/a&gt; to read and write &lt;a href=&quot;readline#module-readline&quot;&gt;&lt;code&gt;readline&lt;/code&gt;&lt;/a&gt; history files.</source>
          <target state="translated">유용한 예를 &lt;a href=&quot;#module-atexit&quot;&gt; &lt;code&gt;atexit&lt;/code&gt; 는&lt;/a&gt; 읽기 및 쓰기 &lt;a href=&quot;readline#module-readline&quot;&gt; &lt;code&gt;readline&lt;/code&gt; &lt;/a&gt; 기록 파일을.</target>
        </trans-unit>
        <trans-unit id="819cd88d697fb04114357734d0a4953e1648cc70" translate="yes" xml:space="preserve">
          <source>Useful handlers included with the logging module.</source>
          <target state="translated">로깅 모듈에 포함 된 유용한 핸들러.</target>
        </trans-unit>
        <trans-unit id="bffb7bde8fb1030560f8c81be752d28554cebade" translate="yes" xml:space="preserve">
          <source>User ID of the user who originally stored this member.</source>
          <target state="translated">이 멤버를 처음 저장 한 사용자의 사용자 ID입니다.</target>
        </trans-unit>
        <trans-unit id="f30e1fe7c0b6acd8745b10a765a7f4fb5c5ee0d0" translate="yes" xml:space="preserve">
          <source>User code can define additional warning categories by subclassing one of the standard warning categories. A warning category must always be a subclass of the &lt;a href=&quot;exceptions#Warning&quot;&gt;&lt;code&gt;Warning&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">사용자 코드는 표준 경고 범주 중 하나를 서브 클래 싱하여 추가 경고 범주를 정의 할 수 있습니다. 경고 범주는 항상 &lt;a href=&quot;exceptions#Warning&quot;&gt; &lt;code&gt;Warning&lt;/code&gt; &lt;/a&gt; 클래스 의 하위 클래스 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="dd76a6ef01344dc63fffbe020875acc447df8daf" translate="yes" xml:space="preserve">
          <source>User code can raise built-in exceptions. This can be used to test an exception handler or to report an error condition &amp;ldquo;just like&amp;rdquo; the situation in which the interpreter raises the same exception; but beware that there is nothing to prevent user code from raising an inappropriate error.</source>
          <target state="translated">사용자 코드는 내장 예외를 일으킬 수 있습니다. 이것은 예외 처리기를 테스트하거나 인터프리터가 동일한 예외를 발생시키는 상황을 &quot;처럼&quot;오류 상태를보고하는 데 사용될 수 있습니다. 그러나 사용자 코드가 부적절한 오류를 일으키는 것을 막을 수있는 것은 없다는 점에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="9f14b6f0b236ede7621ba0fdd6909e518df52703" translate="yes" xml:space="preserve">
          <source>User code does not normally need to call &lt;code&gt;auth&lt;/code&gt; directly, but can instead call the &lt;a href=&quot;#smtplib.SMTP.login&quot;&gt;&lt;code&gt;login()&lt;/code&gt;&lt;/a&gt; method, which will try each of the above mechanisms in turn, in the order listed. &lt;code&gt;auth&lt;/code&gt; is exposed to facilitate the implementation of authentication methods not (or not yet) supported directly by &lt;a href=&quot;#module-smtplib&quot;&gt;&lt;code&gt;smtplib&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">사용자 코드는 일반적으로 &lt;code&gt;auth&lt;/code&gt; 를 직접 호출 할 필요는 없지만 &lt;a href=&quot;#smtplib.SMTP.login&quot;&gt; &lt;code&gt;login()&lt;/code&gt; &lt;/a&gt; 메소드 를 호출 할 수 있습니다. login () 메소드는 위의 각 메커니즘을 차례로 나열된 순서대로 시도합니다. &lt;code&gt;auth&lt;/code&gt; 는 &lt;a href=&quot;#module-smtplib&quot;&gt; &lt;code&gt;smtplib&lt;/code&gt; 가&lt;/a&gt; 직접 지원하지 않는 (또는 아직) 인증 방법을 쉽게 구현할 수 있도록 노출되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="84a81fa60a53fd3f70212f8a883a1173635ab4b0" translate="yes" xml:space="preserve">
          <source>User command interpreter</source>
          <target state="translated">사용자 명령 해석기</target>
        </trans-unit>
        <trans-unit id="e5adf91ece726624b104dd2485c2a839a6328d16" translate="yes" xml:space="preserve">
          <source>User defined flags for file.</source>
          <target state="translated">파일에 대한 사용자 정의 플래그.</target>
        </trans-unit>
        <trans-unit id="837ac2f806f11ca580d1c3781163b0e72e002397" translate="yes" xml:space="preserve">
          <source>User defined generic type aliases are also supported. Examples:</source>
          <target state="translated">사용자 정의 일반 유형 별명도 지원됩니다. 예 :</target>
        </trans-unit>
        <trans-unit id="b74dd2344f56ad9942272568c160da474cef5e98" translate="yes" xml:space="preserve">
          <source>User defined value.</source>
          <target state="translated">사용자 정의 값.</target>
        </trans-unit>
        <trans-unit id="dae4b56a599d30541843d6111db279c8f6e56e71" translate="yes" xml:space="preserve">
          <source>User home directory</source>
          <target state="translated">사용자 홈 디렉토리</target>
        </trans-unit>
        <trans-unit id="050950cdf0452013f4526d6003822fc72d925c74" translate="yes" xml:space="preserve">
          <source>User id of the owner.</source>
          <target state="translated">소유자의 사용자 ID</target>
        </trans-unit>
        <trans-unit id="e1f63eb061937021f51dba01e97a48c55059e9c6" translate="yes" xml:space="preserve">
          <source>User identifier of the file owner.</source>
          <target state="translated">파일 소유자의 사용자 식별자.</target>
        </trans-unit>
        <trans-unit id="542fc71480dec743e60c20434ec6dd5838fc4b52" translate="yes" xml:space="preserve">
          <source>User name</source>
          <target state="translated">사용자 이름</target>
        </trans-unit>
        <trans-unit id="1e3704b9f36dfd77d888c25db447d4825601916a" translate="yes" xml:space="preserve">
          <source>User name or comment field</source>
          <target state="translated">사용자 이름 또는 설명 필드</target>
        </trans-unit>
        <trans-unit id="10ef42a45644103797c878bfd194ec705ff80ac2" translate="yes" xml:space="preserve">
          <source>User name.</source>
          <target state="translated">사용자 이름.</target>
        </trans-unit>
        <trans-unit id="1c40247837db435c6ac2d3e4807fdb9eaa3fcfec" translate="yes" xml:space="preserve">
          <source>User output in Shell</source>
          <target state="translated">쉘의 사용자 출력</target>
        </trans-unit>
        <trans-unit id="1fa0023bf437bb34f21239d1a3a528a2484c4b30" translate="yes" xml:space="preserve">
          <source>User-defined generic types</source>
          <target state="translated">사용자 정의 제네릭 형식</target>
        </trans-unit>
        <trans-unit id="096a2210b655aeab11edc5d2a988883921409748" translate="yes" xml:space="preserve">
          <source>User-defined objects</source>
          <target state="translated">사용자 정의 객체</target>
        </trans-unit>
        <trans-unit id="9c3179efdafa77e4e40bdd02934bf184434188e0" translate="yes" xml:space="preserve">
          <source>User-defined signal 1.</source>
          <target state="translated">User-defined signal 1.</target>
        </trans-unit>
        <trans-unit id="8377c5e3ae0d4764e95e0051fad273030d085fc1" translate="yes" xml:space="preserve">
          <source>User-defined signal 2.</source>
          <target state="translated">User-defined signal 2.</target>
        </trans-unit>
        <trans-unit id="d237d99366c12cd2bbf976603224da547f3ec351" translate="yes" xml:space="preserve">
          <source>UserDict objects</source>
          <target state="translated">UserDict 객체</target>
        </trans-unit>
        <trans-unit id="43496013c3e57310ccf58d32810be25b59dbdc0f" translate="yes" xml:space="preserve">
          <source>UserList objects</source>
          <target state="translated">UserList 객체</target>
        </trans-unit>
        <trans-unit id="fdbfc8c4e254851301cd44b01a7f822ceaae5ea4" translate="yes" xml:space="preserve">
          <source>UserString objects</source>
          <target state="translated">UserString 객체</target>
        </trans-unit>
        <trans-unit id="d7c41484c828a997d0c616496cb5a9ba5f11a17d" translate="yes" xml:space="preserve">
          <source>UserWarning</source>
          <target state="translated">UserWarning</target>
        </trans-unit>
        <trans-unit id="a53964d7702a603f5cc33f3432206f51279cc2ec" translate="yes" xml:space="preserve">
          <source>Users are expected to subclass &lt;a href=&quot;#xml.sax.handler.ContentHandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; to support their application. The following methods are called by the parser on the appropriate events in the input document:</source>
          <target state="translated">사용자는 애플리케이션을 지원하기 위해 &lt;a href=&quot;#xml.sax.handler.ContentHandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt; 를 서브 클래스 화 해야합니다. 입력 문서의 해당 이벤트에 대해 구문 분석기가 다음 메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="45a5cf6473d9786c93e12f2179a5a34390bce117" translate="yes" xml:space="preserve">
          <source>Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</source>
          <target state="translated">증분 디코더를 사용하여 &lt;em&gt;반복자가&lt;/em&gt; 제공 한 입력을 반복적으로 디코딩 &lt;em&gt;합니다&lt;/em&gt; . 이 기능은 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;발전기&lt;/a&gt; 입니다. &lt;em&gt;에러&lt;/em&gt; 인자 (뿐만 아니라 다른 키워드 인수)이 점진적 디코더로 통과된다.</target>
        </trans-unit>
        <trans-unit id="f2afb048c0c5ee80a6cab60018630eb3a6a62b53" translate="yes" xml:space="preserve">
          <source>Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</source>
          <target state="translated">Uses an incremental decoder to iteratively decode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental decoder.</target>
        </trans-unit>
        <trans-unit id="97ee2b4b00c59db46e2110ba3dfbbe7fc0fb5b55" translate="yes" xml:space="preserve">
          <source>Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</source>
          <target state="translated">증분 인코더를 사용하여 &lt;em&gt;반복자가&lt;/em&gt; 제공하는 입력을 반복적으로 인코딩 &lt;em&gt;합니다&lt;/em&gt; . 이 기능은 &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-generator&quot;&gt;발전기&lt;/a&gt; 입니다. &lt;em&gt;오류&lt;/em&gt; 인수 (뿐만 아니라 다른 키워드 인수) 증분 인코더로 전달된다.</target>
        </trans-unit>
        <trans-unit id="3c7c1bda0c9869e5a64dd786b5c0e23a68919047" translate="yes" xml:space="preserve">
          <source>Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</source>
          <target state="translated">Uses an incremental encoder to iteratively encode the input provided by &lt;em&gt;iterator&lt;/em&gt;. This function is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-generator&quot;&gt;generator&lt;/a&gt;. The &lt;em&gt;errors&lt;/em&gt; argument (as well as any other keyword argument) is passed through to the incremental encoder.</target>
        </trans-unit>
        <trans-unit id="1796fd07c3abc6b437c002199b8dec150da9d3ce" translate="yes" xml:space="preserve">
          <source>Uses the most efficient &lt;em&gt;selector&lt;/em&gt; available for the given platform. It is also possible to manually configure the exact selector implementation to be used:</source>
          <target state="translated">주어진 플랫폼에 가장 효율적인 &lt;em&gt;선택기를&lt;/em&gt; 사용합니다. 사용할 정확한 선택기 구현을 수동으로 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0e598218cf75820dbb2cd3bea919913cabb5e7e" translate="yes" xml:space="preserve">
          <source>Using 2to3</source>
          <target state="translated">2to3 사용</target>
        </trans-unit>
        <trans-unit id="b22ccfadca9ffaf0ddcc4fc0358c97c924012086" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt;&lt;code&gt;BZ2Compressor&lt;/code&gt;&lt;/a&gt; for incremental compression:</source>
          <target state="translated">증분 압축에 &lt;a href=&quot;#bz2.BZ2Compressor&quot;&gt; &lt;code&gt;BZ2Compressor&lt;/code&gt; &lt;/a&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="7eebc61ad3858b05e62f7bd808af37d63075ffd3" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#bz2.compress&quot;&gt;&lt;code&gt;compress()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bz2.decompress&quot;&gt;&lt;code&gt;decompress()&lt;/code&gt;&lt;/a&gt; to demonstrate round-trip compression:</source>
          <target state="translated">왕복 압축을 설명하기 위해 &lt;a href=&quot;#bz2.compress&quot;&gt; &lt;code&gt;compress()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#bz2.decompress&quot;&gt; &lt;code&gt;decompress()&lt;/code&gt; &lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="2029fedc2458a13f77c1f9a3bf4c5809903fcd63" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#enum.auto&quot;&gt; &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="43d26a426ee79b95bc796073c23282baef718e71" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#enum.auto&quot;&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">&lt;a href=&quot;#enum.auto&quot;&gt; &lt;code&gt;auto&lt;/code&gt; &lt;/a&gt; 사용 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3332153ff30b7216dceddba7970328bb03f8b0c5" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#hashlib.new&quot;&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/a&gt; with an algorithm provided by OpenSSL:</source>
          <target state="translated">OpenSSL에서 제공하는 알고리즘으로 &lt;a href=&quot;#hashlib.new&quot;&gt; &lt;code&gt;new()&lt;/code&gt; &lt;/a&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="ad62c774eb93ab84a6850c05f0ec364f019a5e7b" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#module-json.tool&quot;&gt;&lt;code&gt;json.tool&lt;/code&gt;&lt;/a&gt; from the shell to validate and pretty-print:</source>
          <target state="translated">쉘에서 &lt;a href=&quot;#module-json.tool&quot;&gt; &lt;code&gt;json.tool&lt;/code&gt; &lt;/a&gt; 을 사용 하여 유효성을 검사하고 예쁘게 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="d464f393105084bac6303efd2c33e015be5fe683" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt;&lt;code&gt;Pool&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.pool.Pool&quot;&gt; &lt;code&gt;Pool&lt;/code&gt; &lt;/a&gt; 사용 :</target>
        </trans-unit>
        <trans-unit id="4e7ad4acf32468f4df31858e1a7c38b2a8027571" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.access&quot;&gt;&lt;code&gt;access()&lt;/code&gt;&lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</source>
          <target state="translated">예를 들어 실제로 파일을 열기 전에 파일을 열 수있는 권한이 있는지 확인하기 위해 &lt;a href=&quot;#os.access&quot;&gt; &lt;code&gt;access()&lt;/code&gt; &lt;/a&gt; 를 사용 하는 경우 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 사용 하면 파일을 확인하기 위해 파일을 확인하고 여는 것 사이의 짧은 시간 간격을 이용하여 파일을 조작 할 수 있으므로 보안 허점이 생깁니다. &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; 기술 을 사용하는 것이 좋습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="63d8dc5be3ecbd899690945c88764160cbddb011" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.access&quot;&gt;&lt;code&gt;access()&lt;/code&gt;&lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</source>
          <target state="translated">Using &lt;a href=&quot;#os.access&quot;&gt; &lt;code&gt;access()&lt;/code&gt; &lt;/a&gt; to check if a user is authorized to e.g. open a file before actually doing so using &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It&amp;rsquo;s preferable to use &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-eafp&quot;&gt;EAFP&lt;/a&gt; techniques. For example:</target>
        </trans-unit>
        <trans-unit id="05e46086069a4eb6aba79398aaeef75e0337d56c" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#os.listdir&quot;&gt;&lt;code&gt;listdir()&lt;/code&gt;&lt;/a&gt; can significantly increase the performance of code that also needs file type or file attribute information, because &lt;a href=&quot;#os.DirEntry&quot;&gt;&lt;code&gt;os.DirEntry&lt;/code&gt;&lt;/a&gt; objects expose this information if the operating system provides it when scanning a directory. All &lt;a href=&quot;#os.DirEntry&quot;&gt;&lt;code&gt;os.DirEntry&lt;/code&gt;&lt;/a&gt; methods may perform a system call, but &lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt;&lt;code&gt;is_dir()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.DirEntry.is_file&quot;&gt;&lt;code&gt;is_file()&lt;/code&gt;&lt;/a&gt; usually only require a system call for symbolic links; &lt;a href=&quot;#os.DirEntry.stat&quot;&gt;&lt;code&gt;os.DirEntry.stat()&lt;/code&gt;&lt;/a&gt; always requires a system call on Unix but only requires one for symbolic links on Windows.</source>
          <target state="translated">&lt;a href=&quot;#os.DirEntry&quot;&gt; &lt;code&gt;os.DirEntry&lt;/code&gt; &lt;/a&gt; 객체는 디렉토리를 스캔 할 때 운영 체제에서 정보를 제공 할 경우이 정보를 노출 하므로 &lt;a href=&quot;#os.listdir&quot;&gt; &lt;code&gt;listdir()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt; 대신 scandir ()을 사용하면 파일 유형 또는 파일 속성 정보가 필요한 코드의 성능이 크게 향상 될 수 있습니다 . 모든 &lt;a href=&quot;#os.DirEntry&quot;&gt; &lt;code&gt;os.DirEntry&lt;/code&gt; &lt;/a&gt; 메소드는 시스템 호출을 수행 할 수 있지만 &lt;a href=&quot;#os.DirEntry.is_dir&quot;&gt; &lt;code&gt;is_dir()&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#os.DirEntry.is_file&quot;&gt; &lt;code&gt;is_file()&lt;/code&gt; &lt;/a&gt; 일반적으로 기호 링크에 대한 시스템 호출 만 필요합니다. &lt;a href=&quot;#os.DirEntry.stat&quot;&gt; &lt;code&gt;os.DirEntry.stat()&lt;/code&gt; &lt;/a&gt; 항상 Unix에서 시스템 호출이 필요하지만 Windows에서는 기호 링크에 대한 호출 만 필요합니다.</target>
        </trans-unit>
        <trans-unit id="43f15eefbfb3d963e7a0530dd61833be3ae7e150" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt;&lt;code&gt;reset_peak()&lt;/code&gt;&lt;/a&gt; ensured we could accurately record the peak during the computation of &lt;code&gt;small_sum&lt;/code&gt;, even though it is much smaller than the overall peak size of memory blocks since the &lt;a href=&quot;#tracemalloc.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; call. Without the call to &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt;&lt;code&gt;reset_peak()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;second_peak&lt;/code&gt; would still be the peak from the computation &lt;code&gt;large_sum&lt;/code&gt; (that is, equal to &lt;code&gt;first_peak&lt;/code&gt;). In this case, both peaks are much higher than the final memory usage, and which suggests we could optimise (by removing the unnecessary call to &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt;, and writing &lt;code&gt;sum(range(...))&lt;/code&gt;).</source>
          <target state="translated">Using &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt; &lt;code&gt;reset_peak()&lt;/code&gt; &lt;/a&gt; ensured we could accurately record the peak during the computation of &lt;code&gt;small_sum&lt;/code&gt; , even though it is much smaller than the overall peak size of memory blocks since the &lt;a href=&quot;#tracemalloc.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt; call. Without the call to &lt;a href=&quot;#tracemalloc.reset_peak&quot;&gt; &lt;code&gt;reset_peak()&lt;/code&gt; &lt;/a&gt;, &lt;code&gt;second_peak&lt;/code&gt; would still be the peak from the computation &lt;code&gt;large_sum&lt;/code&gt; (that is, equal to &lt;code&gt;first_peak&lt;/code&gt; ). In this case, both peaks are much higher than the final memory usage, and which suggests we could optimise (by removing the unnecessary call to &lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;, and writing &lt;code&gt;sum(range(...))&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3883f28289ce4c7d604b31aff5ba0b408a5bf2f7" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt; to return a sequence of values:</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt; 를 사용 하여 일련의 값을 반환 :</target>
        </trans-unit>
        <trans-unit id="ea0de95702cc7230baa48c3cfd3852b48dab7f01" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt; 사용</target>
        </trans-unit>
        <trans-unit id="1e3aeddb8fef1ed2a7cff5e13174b13353739c23" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">&lt;a href=&quot;functions#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt; 사용하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2689ab8940d02d7de1ca68e6a4b43fe67530d0bc" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; as a context manager is a great way to ensure your file handles are closed properly and is becoming common:</source>
          <target state="translated">컨텍스트 관리자로 &lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt; 을 사용하면 파일 핸들이 올바르게 닫히고 일반화되는 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="75ece5db0a196d8368913a7d8ebe30c4301fe19a" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; as the &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt;&lt;code&gt;default_factory&lt;/code&gt;&lt;/a&gt;, it is easy to group a sequence of key-value pairs into a dictionary of lists:</source>
          <target state="translated">&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; 를 &lt;a href=&quot;#collections.defaultdict.default_factory&quot;&gt; &lt;code&gt;default_factory&lt;/code&gt; &lt;/a&gt; 로 사용하면 일련의 키-값 쌍을 목록 사전으로 쉽게 그룹화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fff5ca8530b544b1b162b66bc324c7e008c1fcb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;ZoneInfo&lt;/code&gt;</source>
          <target state="translated">Using &lt;code&gt;ZoneInfo&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6ff2511d6a7f0fa504c9e9bb252e706108d932f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt; is equivalent to:</source>
          <target state="translated">사용 &lt;code&gt;datetime.strptime(date_string, format)&lt;/code&gt; 동일합니다 :</target>
        </trans-unit>
        <trans-unit id="65a8720d7908df41079a6d71b6ca8cbf5c0d7f39" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;importlib.metadata&lt;/code&gt;</source>
          <target state="translated">Using &lt;code&gt;importlib.metadata&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa1c396214dc747fc568a18547cde7d0930db839" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;loop.create_connection()&lt;/code&gt; to &lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;connect a socket&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;code&gt;loop.create_connection()&lt;/code&gt; 하는 &lt;a href=&quot;asyncio-protocol#asyncio-example-create-connection&quot;&gt;소켓을 연결합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9ce11a3954da4ad24f2eda9c45c6a6a5ff16cff8" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;loop.create_connection()&lt;/code&gt; to implement &lt;a href=&quot;asyncio-protocol#asyncio-example-tcp-echo-client-protocol&quot;&gt;an echo-client&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;code&gt;loop.create_connection()&lt;/code&gt; 구현하는 &lt;a href=&quot;asyncio-protocol#asyncio-example-tcp-echo-client-protocol&quot;&gt;에코 클라이언트를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7a0274be181e65043a1f3ce90fd4b35a6ce24d25" translate="yes" xml:space="preserve">
          <source>Using Early Data in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc8470.html&quot; id=&quot;index-46&quot;&gt;&lt;strong&gt;RFC 8470&lt;/strong&gt;&lt;/a&gt;</source>
          <target state="translated">Using Early Data in HTTP &lt;a href=&quot;https://tools.ietf.org/html/rfc8470.html&quot; id=&quot;index-46&quot;&gt;&lt;strong&gt;RFC 8470&lt;/strong&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8e73e77844e32168a133432fdc484125ad1e928e" translate="yes" xml:space="preserve">
          <source>Using Mock</source>
          <target state="translated">모의 사용</target>
        </trans-unit>
        <trans-unit id="988ffa6cf84925a7e2f11a2d4da93941ab8db1b3" translate="yes" xml:space="preserve">
          <source>Using Tix</source>
          <target state="translated">Tix 사용</target>
        </trans-unit>
        <trans-unit id="a3b39b06fc36d238ca9fd0e34aa3702c74df4872" translate="yes" xml:space="preserve">
          <source>Using Ttk</source>
          <target state="translated">Ttk 사용</target>
        </trans-unit>
        <trans-unit id="6f2bfcfa7f0c89ae800d87806ee91ffdff6c2390" translate="yes" xml:space="preserve">
          <source>Using UTF-8 as the Default Source Encoding</source>
          <target state="translated">UTF-8을 기본 소스 인코딩으로 사용</target>
        </trans-unit>
        <trans-unit id="7b4dafbddf83b4c5d5c51b21c48f00b8d136bed2" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;cumulative distribution function (cdf)&lt;/a&gt;, compute the probability that a random variable &lt;em&gt;X&lt;/em&gt; will be less than or equal to &lt;em&gt;x&lt;/em&gt;. Mathematically, it is written &lt;code&gt;P(X &amp;lt;= x)&lt;/code&gt;.</source>
          <target state="translated">사용하여 A &lt;a href=&quot;https://en.wikipedia.org/wiki/Cumulative_distribution_function&quot;&gt;누적 분포 함수 (CDF)를&lt;/a&gt; , 확률 변수의 확률 계산 &lt;em&gt;X가&lt;/em&gt; 미만이거나 동일 할 &lt;em&gt;X를&lt;/em&gt; . 수학적으로 &lt;code&gt;P(X &amp;lt;= x)&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="ba910e1ce5f13f1f4ea2ed92206f282bf3b88194" translate="yes" xml:space="preserve">
          <source>Using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;probability density function (pdf)&lt;/a&gt;, compute the relative likelihood that a random variable &lt;em&gt;X&lt;/em&gt; will be near the given value &lt;em&gt;x&lt;/em&gt;. Mathematically, it is the limit of the ratio &lt;code&gt;P(x &amp;lt;=
X &amp;lt; x+dx) / dx&lt;/code&gt; as &lt;em&gt;dx&lt;/em&gt; approaches zero.</source>
          <target state="translated">사용하여 A &lt;a href=&quot;https://en.wikipedia.org/wiki/Probability_density_function&quot;&gt;확률 밀도 함수 (PDF)를&lt;/a&gt; , 랜덤 변수이라는 상대 가능성 계산 &lt;em&gt;X가&lt;/em&gt; 소정 값 근방 것이다 &lt;em&gt;X를&lt;/em&gt; . 수학적으로, 이는 비의 한계 &lt;code&gt;P(x &amp;lt;= X &amp;lt; x+dx) / dx&lt;/code&gt; 로서 &lt;em&gt;DX가&lt;/em&gt; 제로 접근법.</target>
        </trans-unit>
        <trans-unit id="50e9189c5263c54e966ddb0c0fcbf7b491be40a3" translate="yes" xml:space="preserve">
          <source>Using a callable:</source>
          <target state="translated">호출 가능 사용하기 :</target>
        </trans-unit>
        <trans-unit id="75220b874a1b14dcc1d9274c28e10a2768d28bff" translate="yes" xml:space="preserve">
          <source>Using a context manager as a function decorator</source>
          <target state="translated">함수 데코레이터로 컨텍스트 관리자 사용</target>
        </trans-unit>
        <trans-unit id="4d5214967f9aa69db8719e748debbab68f82aea5" translate="yes" xml:space="preserve">
          <source>Using a custom &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">사용자 정의 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fde5f9719816f30ae38224d7025284ea600fd7a7" translate="yes" xml:space="preserve">
          <source>Using a custom &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">Using a custom &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de60096a210691c18ae3d3da4e5e7f7f31853253" translate="yes" xml:space="preserve">
          <source>Using a custom timer</source>
          <target state="translated">맞춤 타이머 사용</target>
        </trans-unit>
        <trans-unit id="9ca12f2496ddb81117cd62c302718c441b5e7172" translate="yes" xml:space="preserve">
          <source>Using a descriptive string</source>
          <target state="translated">설명 문자열 사용</target>
        </trans-unit>
        <trans-unit id="afb7c939cdae700f3a6eb60d7fb5128652ab012f" translate="yes" xml:space="preserve">
          <source>Using a generic class without specifying type parameters assumes &lt;a href=&quot;#typing.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt; for each position. In the following example, &lt;code&gt;MyIterable&lt;/code&gt; is not generic but implicitly inherits from &lt;code&gt;Iterable[Any]&lt;/code&gt;:</source>
          <target state="translated">유형 매개 변수를 지정하지 않고 일반 클래스를 사용하면 각 위치에 대해 &lt;a href=&quot;#typing.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt; 를 가정합니다 . 다음 예제에서 &lt;code&gt;MyIterable&lt;/code&gt; 은 일반이 아니지만 &lt;code&gt;Iterable[Any]&lt;/code&gt; 에서 암시 적으로 상속합니다 .</target>
        </trans-unit>
        <trans-unit id="d307c55b385e0819ab9d20174ffebefe22e8b6b6" translate="yes" xml:space="preserve">
          <source>Using a list comprehension: &lt;code&gt;[x for x in iterable]&lt;/code&gt;</source>
          <target state="translated">리스트 이해하기 : &lt;code&gt;[x for x in iterable]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9615543c2d928cf50040f980706115431fc8728d" translate="yes" xml:space="preserve">
          <source>Using a pair of parentheses to denote the empty tuple: &lt;code&gt;()&lt;/code&gt;</source>
          <target state="translated">빈 튜플을 나타내는 괄호 쌍 사용 : &lt;code&gt;()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bc851502c6676f542b9ab198cbf3f862b23400c" translate="yes" xml:space="preserve">
          <source>Using a pair of square brackets to denote the empty list: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">빈 목록을 표시하기 위해 대괄호 쌍 사용 : &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f5a75250125304baf8a8f8d2739eb842d37fc846" translate="yes" xml:space="preserve">
          <source>Using a pool of workers</source>
          <target state="translated">작업자 풀 사용</target>
        </trans-unit>
        <trans-unit id="8383415a2a10a3f8f1036870f131e3fe6f99e151" translate="yes" xml:space="preserve">
          <source>Using a remote manager</source>
          <target state="translated">원격 관리자 사용</target>
        </trans-unit>
        <trans-unit id="f23700feacc3a477143f8b09438dc2426f25eecd" translate="yes" xml:space="preserve">
          <source>Using a separate test for &amp;ldquo;liveness&amp;rdquo; creates race conditions in threaded applications; another thread can cause a weak reference to become invalidated before the weak reference is called; the idiom shown above is safe in threaded applications as well as single-threaded applications.</source>
          <target state="translated">&quot;liveness&quot;에 대한 별도의 테스트를 사용하면 스레드 응용 프로그램에서 경쟁 조건이 발생합니다. 다른 스레드는 약한 참조가 호출되기 전에 약한 참조가 무효화 될 수 있습니다. 위에 표시된 관용구는 단일 스레드 응용 프로그램뿐만 아니라 스레드 응용 프로그램에서도 안전합니다.</target>
        </trans-unit>
        <trans-unit id="38537e54bac1a305fb2ceea706898c0b3eab781f" translate="yes" xml:space="preserve">
          <source>Using a string as the value would look like:</source>
          <target state="translated">문자열을 값으로 사용하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a0514595eb268ee9e74173dda1049b389b853d97" translate="yes" xml:space="preserve">
          <source>Using a trailing comma for a singleton tuple: &lt;code&gt;a,&lt;/code&gt; or &lt;code&gt;(a,)&lt;/code&gt;</source>
          <target state="translated">싱글 톤 튜플에 후행 쉼표 사용 : &lt;code&gt;a,&lt;/code&gt; 또는 &lt;code&gt;(a,)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac783cf466229eb8f1ea0637db6e6bae53f92af8" translate="yes" xml:space="preserve">
          <source>Using a value in the configuration dict lets configurations to be sent over the wire as pickled dicts to a socket listener. Thus, the logging verbosity of a long-running application can be altered over time with no need to stop and restart the application.</source>
          <target state="translated">구성 dict에 값을 사용하면 소켓 리스너에 절인 dict로 구성을 와이어를 통해 전송할 수 있습니다. 따라서 장기 실행 응용 프로그램의 로깅 세부 정보는 시간이 지남에 따라 응용 프로그램을 중지했다가 다시 시작할 필요없이 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f653044b0deb519381cad92e86f64dbb241a7b3" translate="yes" xml:space="preserve">
          <source>Using adapters to store additional Python types in SQLite databases</source>
          <target state="translated">어댑터를 사용하여 SQLite 데이터베이스에 추가 Python 유형 저장</target>
        </trans-unit>
        <trans-unit id="8ed960171bb00be50b6cf25e8e3d2d57ed5e8c5b" translate="yes" xml:space="preserve">
          <source>Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">자동 번호 매기기 &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt; 하면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="65a99d80248d09ce12fe7957e9d28ac5caabeb35" translate="yes" xml:space="preserve">
          <source>Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; would look like:</source>
          <target state="translated">Using an auto-numbering &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt; would look like:</target>
        </trans-unit>
        <trans-unit id="d9684f34bd96b132133b1597608ee067cffce7c3" translate="yes" xml:space="preserve">
          <source>Using any of these methods signifies to the user that these values are not important, and also enables one to add, remove, or reorder members without having to renumber the remaining members.</source>
          <target state="translated">이러한 방법 중 하나를 사용하면 사용자에게 이러한 값이 중요하지 않으며 나머지 구성원의 번호를 다시 매길 필요없이 구성원을 추가, 제거 또는 재정렬 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ef4f4199027402c151a50d927a41c2996ff8f9f" translate="yes" xml:space="preserve">
          <source>Using automatic values</source>
          <target state="translated">자동 값 사용</target>
        </trans-unit>
        <trans-unit id="8e18b23aa8166ee94001b3c568e708c504704e7c" translate="yes" xml:space="preserve">
          <source>Using dataclasses, &lt;em&gt;if&lt;/em&gt; this code was valid:</source>
          <target state="translated">이 코드가 유효한 &lt;em&gt;경우 데이터&lt;/em&gt; 클래스 사용 :</target>
        </trans-unit>
        <trans-unit id="121ccf7d7533afb43d6d034aec33aed44552426e" translate="yes" xml:space="preserve">
          <source>Using default factory functions is a way to create new instances of mutable types as default values for fields:</source>
          <target state="translated">기본 팩토리 함수를 사용하면 변경 가능한 유형의 새 인스턴스를 필드의 기본값으로 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e6559d2f6f048a1637ae00fb7cb017f563475f7" translate="yes" xml:space="preserve">
          <source>Using different digest sizes</source>
          <target state="translated">다른 다이제스트 크기 사용</target>
        </trans-unit>
        <trans-unit id="255ce6190840fec731e885d587707ae723af9b80" translate="yes" xml:space="preserve">
          <source>Using events</source>
          <target state="translated">이벤트 사용</target>
        </trans-unit>
        <trans-unit id="de77a822ff9b97844fd2f5eef17f93a224452770" translate="yes" xml:space="preserve">
          <source>Using importlib.metadata</source>
          <target state="translated">importlib.metadata 사용</target>
        </trans-unit>
        <trans-unit id="94dd17d3eee91a6f460b34718a819c2ee9b54b47" translate="yes" xml:space="preserve">
          <source>Using locks, conditions, and semaphores in the &lt;code&gt;with&lt;/code&gt; statement</source>
          <target state="translated">&lt;code&gt;with&lt;/code&gt; 문 에서 잠금, 조건 및 세마포어 사용</target>
        </trans-unit>
        <trans-unit id="72adde2953e72ee1f91517e883fc94f79d9bef65" translate="yes" xml:space="preserve">
          <source>Using long option names is equally easy:</source>
          <target state="translated">긴 옵션 이름을 사용하는 것도 마찬가지로 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="f99afb1c0580e5c9200f58e2effc9e111e841402" translate="yes" xml:space="preserve">
          <source>Using maildir format</source>
          <target state="translated">maildir 형식 사용</target>
        </trans-unit>
        <trans-unit id="c3e9900bea0722fcf9bc91bc0b782f7afce3e773" translate="yes" xml:space="preserve">
          <source>Using partial objects is usually more convenient than using lambdas, as asyncio can render partial objects better in debug and error messages.</source>
          <target state="translated">asyncio가 디버그 및 오류 메시지에서 부분 객체를 더 잘 렌더링 할 수 있으므로 부분 객체를 사용하는 것이 일반적으로 람다를 사용하는 것보다 편리합니다.</target>
        </trans-unit>
        <trans-unit id="799ae737f71621b7f1a5b1c9102fbd2295987f9d" translate="yes" xml:space="preserve">
          <source>Using screen events</source>
          <target state="translated">스크린 이벤트 사용</target>
        </trans-unit>
        <trans-unit id="c0f796650a131fcb2aa652625b99a9658f346ae5" translate="yes" xml:space="preserve">
          <source>Using separate &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; instances instead of reusing a single instance avoids that problem:</source>
          <target state="translated">단일 인스턴스를 재사용하는 대신 별도의 &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; 인스턴스를 사용 하면 이러한 문제를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3442d5c13fd47976c3bf0ec76271111a44909d9e" translate="yes" xml:space="preserve">
          <source>Using shortcut methods</source>
          <target state="translated">바로 가기 방법 사용</target>
        </trans-unit>
        <trans-unit id="c2d8da51afc83980ac89c6ca94ec45396b00f1ac" translate="yes" xml:space="preserve">
          <source>Using sqlite3 efficiently</source>
          <target state="translated">sqlite3를 효율적으로 사용하기</target>
        </trans-unit>
        <trans-unit id="320599014228e813440efb4020e5b50ef5441b66" translate="yes" xml:space="preserve">
          <source>Using square brackets, separating items with commas: &lt;code&gt;[a]&lt;/code&gt;, &lt;code&gt;[a, b, c]&lt;/code&gt;</source>
          <target state="translated">대괄호를 사용하여 항목을 쉼표로 구분 : &lt;code&gt;[a]&lt;/code&gt; , &lt;code&gt;[a, b, c]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d8c6027625bc1e5d809004bd3a7dfcd28685592" translate="yes" xml:space="preserve">
          <source>Using sysconfig as a script</source>
          <target state="translated">sysconfig를 스크립트로 사용</target>
        </trans-unit>
        <trans-unit id="c598912622c37d39a35330e55608828824a76ad7" translate="yes" xml:space="preserve">
          <source>Using the &amp;ldquo;&lt;code&gt;**&lt;/code&gt;&amp;rdquo; pattern in large directory trees may consume an inordinate amount of time.</source>
          <target state="translated">큰 디렉토리 트리에서 &quot; &lt;code&gt;**&lt;/code&gt; &quot;패턴을 사용하면 시간이 많이 걸릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20b1a4d90df2ea292b0302f5e727d9dd477ac602" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#module-zipapp&quot;&gt;&lt;code&gt;zipapp&lt;/code&gt;&lt;/a&gt; module, it is possible to create self-contained Python programs, which can be distributed to end users who only need to have a suitable version of Python installed on their system. The key to doing this is to bundle all of the application&amp;rsquo;s dependencies into the archive, along with the application code.</source>
          <target state="translated">&lt;a href=&quot;#module-zipapp&quot;&gt; &lt;code&gt;zipapp&lt;/code&gt; &lt;/a&gt; 모듈을 사용하면 시스템에 적합한 버전의 Python 만 설치해야하는 최종 사용자에게 배포 할 수있는 자체 포함 된 Python 프로그램을 작성할 수 있습니다. 이 작업의 핵심은 응용 프로그램 코드와 함께 모든 응용 프로그램의 종속성을 아카이브에 묶는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7864597e7acea55d09dd94985971ff805ed9a8a0" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt;&lt;code&gt;Process.terminate&lt;/code&gt;&lt;/a&gt; method to stop a process is liable to cause any shared resources (such as locks, semaphores, pipes and queues) currently being used by the process to become broken or unavailable to other processes.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.Process.terminate&quot;&gt; &lt;code&gt;Process.terminate&lt;/code&gt; &lt;/a&gt; 메소드를 사용하여 프로세스를 중지하면 프로세스에서 현재 사용중인 공유 자원 (예 : 잠금, 세마포어, 파이프 및 큐)이 손상되거나 다른 프로세스에서 사용할 수 없게됩니다.</target>
        </trans-unit>
        <trans-unit id="b726411759353a962ae614ca51a43d068731b30e" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#tuple&quot;&gt;&lt;code&gt;tuple()&lt;/code&gt;&lt;/a&gt; built-in: &lt;code&gt;tuple()&lt;/code&gt; or &lt;code&gt;tuple(iterable)&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;#tuple&quot;&gt; &lt;code&gt;tuple()&lt;/code&gt; &lt;/a&gt; 내장 사용 : &lt;code&gt;tuple()&lt;/code&gt; 또는 &lt;code&gt;tuple(iterable)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0ec3b2c78661be37f08ee0e348df3f3bf59e0b9" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;.</source>
          <target state="translated">Using the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8b90745245f4a0f18b1bf49ea4cccb202e2b1025" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;dev&lt;/code&gt; Python command line option.</source>
          <target state="translated">은 Using &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;dev&lt;/code&gt; 에 파이썬 명령 줄 옵션을.</target>
        </trans-unit>
        <trans-unit id="0fd2d05a10558a5e6e11eb83de43bd2b9e3020b5" translate="yes" xml:space="preserve">
          <source>Using the Ttk widgets gives the application an improved look and feel. As discussed above, there are differences in how the styling is coded.</source>
          <target state="translated">Ttk 위젯을 사용하면 애플리케이션의 모양과 느낌이 향상됩니다. 위에서 설명한 것처럼 스타일을 코딩하는 방법에는 차이가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8b1f1cc65fb2aeb01222b99772f21a79b8f9f1c" translate="yes" xml:space="preserve">
          <source>Using the cgi module</source>
          <target state="translated">cgi 모듈 사용</target>
        </trans-unit>
        <trans-unit id="414513cd2ccd5f659d92ac7be558ff20be654791" translate="yes" xml:space="preserve">
          <source>Using the comma as a thousands separator:</source>
          <target state="translated">쉼표를 천 단위 구분 기호로 사용 :</target>
        </trans-unit>
        <trans-unit id="4be88d9241472398fa24fa0cf31272713a8b4373" translate="yes" xml:space="preserve">
          <source>Using the connection as a context manager</source>
          <target state="translated">컨텍스트 관리자로 연결 사용</target>
        </trans-unit>
        <trans-unit id="3f82472d95e0faa8f20343f14d65c9d0b7f0391e" translate="yes" xml:space="preserve">
          <source>Using the file after calling &lt;code&gt;flush()&lt;/code&gt; or &lt;code&gt;close()&lt;/code&gt; on the &lt;a href=&quot;#mailbox.MMDF&quot;&gt;&lt;code&gt;MMDF&lt;/code&gt;&lt;/a&gt; instance may yield unpredictable results or raise an exception.</source>
          <target state="translated">&lt;a href=&quot;#mailbox.MMDF&quot;&gt; &lt;code&gt;MMDF&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 &lt;code&gt;flush()&lt;/code&gt; 또는 &lt;code&gt;close()&lt;/code&gt; 를 호출 한 후 파일을 사용하면 예기치 않은 결과가 발생하거나 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99db02a945df11fe3bf69aa645bc3e8c058040d1" translate="yes" xml:space="preserve">
          <source>Using the file after calling &lt;code&gt;flush()&lt;/code&gt; or &lt;code&gt;close()&lt;/code&gt; on the &lt;a href=&quot;#mailbox.mbox&quot;&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; instance may yield unpredictable results or raise an exception.</source>
          <target state="translated">&lt;a href=&quot;#mailbox.mbox&quot;&gt; &lt;code&gt;mbox&lt;/code&gt; &lt;/a&gt; 인스턴스 에서 &lt;code&gt;flush()&lt;/code&gt; 또는 &lt;code&gt;close()&lt;/code&gt; 를 호출 한 후 파일을 사용하면 예기치 않은 결과가 발생하거나 예외가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="657776931d7a6faef6a4a5155f927f48b4e36008" translate="yes" xml:space="preserve">
          <source>Using the nonstandard &lt;code&gt;execute()&lt;/code&gt;, &lt;code&gt;executemany()&lt;/code&gt; and &lt;code&gt;executescript()&lt;/code&gt; methods of the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object, your code can be written more concisely because you don&amp;rsquo;t have to create the (often superfluous) &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; objects explicitly. Instead, the &lt;a href=&quot;#sqlite3.Cursor&quot;&gt;&lt;code&gt;Cursor&lt;/code&gt;&lt;/a&gt; objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a &lt;code&gt;SELECT&lt;/code&gt; statement and iterate over it directly using only a single call on the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 객체 의 비표준 &lt;code&gt;execute()&lt;/code&gt; , &lt;code&gt;executemany()&lt;/code&gt; 및 &lt;code&gt;executescript()&lt;/code&gt; 메소드 를 사용하면 (종종 불필요한) &lt;a href=&quot;#sqlite3.Cursor&quot;&gt; &lt;code&gt;Cursor&lt;/code&gt; &lt;/a&gt; 객체를 명시 적으로 만들 필요가 없으므로 코드를 더 간결하게 작성할 수 있습니다 . 대신 &lt;a href=&quot;#sqlite3.Cursor&quot;&gt; &lt;code&gt;Cursor&lt;/code&gt; &lt;/a&gt; 객체는 암시 적으로 만들어지며 이러한 바로 가기 메서드는 커서 객체를 반환합니다. 이런 식으로 &lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 개체 에서 단일 호출 만 사용하여 &lt;code&gt;SELECT&lt;/code&gt; 문을 실행하고 직접 반복 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="47aee112b6935fb523810f9a1f409db0f6fb290a" translate="yes" xml:space="preserve">
          <source>Using the standard (non-&lt;code&gt;compat32&lt;/code&gt;) policies, the returned value is an instance of a subclass of &lt;a href=&quot;email.headerregistry#email.headerregistry.BaseHeader&quot;&gt;&lt;code&gt;email.headerregistry.BaseHeader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">표준 (비 &lt;code&gt;compat32&lt;/code&gt; ) 정책을 사용하면 반환 된 값은 &lt;a href=&quot;email.headerregistry#email.headerregistry.BaseHeader&quot;&gt; &lt;code&gt;email.headerregistry.BaseHeader&lt;/code&gt; &lt;/a&gt; 의 하위 클래스 인스턴스입니다 .</target>
        </trans-unit>
        <trans-unit id="fc3fe35d196e1ad26b58992b8e30d0a618b3d15e" translate="yes" xml:space="preserve">
          <source>Using the subprocess Module</source>
          <target state="translated">서브 프로세스 모듈 사용</target>
        </trans-unit>
        <trans-unit id="05aa4e92daaabfec4cab2e49b437833277ca4e0d" translate="yes" xml:space="preserve">
          <source>Using the type constructor: &lt;code&gt;list()&lt;/code&gt; or &lt;code&gt;list(iterable)&lt;/code&gt;</source>
          <target state="translated">유형 생성자 사용 : &lt;code&gt;list()&lt;/code&gt; 또는 &lt;code&gt;list(iterable)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3dcc39a1df1cb3105fe567a435d77e0613cb83af" translate="yes" xml:space="preserve">
          <source>Using these ASCII based operations to manipulate binary data that is not stored in an ASCII based format may lead to data corruption.</source>
          <target state="translated">ASCII 기반 형식으로 저장되지 않은 이진 데이터를 조작하기 위해 이러한 ASCII 기반 작업을 사용하면 데이터가 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10ffcc30a6ebac687ec14a0dec9c03c4874f525e" translate="yes" xml:space="preserve">
          <source>Using these methods you can write nice compact code:</source>
          <target state="translated">이 방법을 사용하면 멋진 소형 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c82a820d85f9921e73994a56e494b8359a6094ae" translate="yes" xml:space="preserve">
          <source>Using this attribute you can control what objects are returned for the &lt;code&gt;TEXT&lt;/code&gt; data type. By default, this attribute is set to &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module will return Unicode objects for &lt;code&gt;TEXT&lt;/code&gt;. If you want to return bytestrings instead, you can set it to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 속성을 사용하면 &lt;code&gt;TEXT&lt;/code&gt; 데이터 유형에 대해 리턴 될 오브젝트를 제어 할 수 있습니다 . 기본적으로이 속성은 설정되어 &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; 에&lt;/a&gt; 와 &lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; 를&lt;/a&gt; 유니 코드를 반환 모듈에 대한 객체 &lt;code&gt;TEXT&lt;/code&gt; . &lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt; 스트링을 대신 리턴하려면 bytes로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca1b9a713e833be9fa7e8044191db6abaec6fbce" translate="yes" xml:space="preserve">
          <source>Using this constructor may change the semantics of your datetimes in surprising ways, only use it if you know that you need to.</source>
          <target state="translated">Using this constructor may change the semantics of your datetimes in surprising ways, only use it if you know that you need to.</target>
        </trans-unit>
        <trans-unit id="88d5a4c73559123ffb06df00d967f9cd0b062c9f" translate="yes" xml:space="preserve">
          <source>Using this decorator requires that the class&amp;rsquo;s metaclass is &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; or is derived from it. A class that has a metaclass derived from &lt;a href=&quot;#abc.ABCMeta&quot;&gt;&lt;code&gt;ABCMeta&lt;/code&gt;&lt;/a&gt; cannot be instantiated unless all of its abstract methods and properties are overridden. The abstract methods can be called using any of the normal &amp;lsquo;super&amp;rsquo; call mechanisms. &lt;a href=&quot;#abc.abstractmethod&quot;&gt;&lt;code&gt;abstractmethod()&lt;/code&gt;&lt;/a&gt; may be used to declare abstract methods for properties and descriptors.</source>
          <target state="translated">이 데코레이터를 사용하려면 클래스의 메타 클래스가 &lt;a href=&quot;#abc.ABCMeta&quot;&gt; &lt;code&gt;ABCMeta&lt;/code&gt; &lt;/a&gt; 이거나 그 클래스에서 파생되어야합니다. &lt;a href=&quot;#abc.ABCMeta&quot;&gt; &lt;code&gt;ABCMeta&lt;/code&gt; &lt;/a&gt; 에서 파생 된 메타 클래스가있는 클래스는 모든 추상 메서드 및 속성을 재정의하지 않으면 인스턴스화 할 수 없습니다. 추상적 인 메소드는 일반적인 '슈퍼'호출 메커니즘을 사용하여 호출 할 수 있습니다. &lt;a href=&quot;#abc.abstractmethod&quot;&gt; &lt;code&gt;abstractmethod()&lt;/code&gt; &lt;/a&gt; 사용하여 속성 및 설명자에 대한 추상 메서드를 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04978a627ce1975c2d08d1fe862ff2c396639ee3" translate="yes" xml:space="preserve">
          <source>Using type-specific formatting:</source>
          <target state="translated">유형별 서식 사용 :</target>
        </trans-unit>
        <trans-unit id="6a192d773066b752e8add03087aaa95e9d5840fd" translate="yes" xml:space="preserve">
          <source>Usually an IFF-type file consists of one or more chunks. The proposed usage of the &lt;a href=&quot;#chunk.Chunk&quot;&gt;&lt;code&gt;Chunk&lt;/code&gt;&lt;/a&gt; class defined here is to instantiate an instance at the start of each chunk and read from the instance until it reaches the end, after which a new instance can be instantiated. At the end of the file, creating a new instance will fail with an &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">일반적으로 IFF 형식 파일은 하나 이상의 청크로 구성됩니다. 여기에 정의 된 &lt;a href=&quot;#chunk.Chunk&quot;&gt; &lt;code&gt;Chunk&lt;/code&gt; &lt;/a&gt; 클래스 의 제안 된 사용법은 각 청크가 시작될 때 인스턴스를 인스턴스화하고 인스턴스가 끝날 때까지 인스턴스에서 읽은 다음 새 인스턴스를 인스턴스화 할 수 있습니다. 파일 끝에서 새 인스턴스 작성은 &lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; &lt;/a&gt; 예외 와 함께 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="42f0c83d353a2c88d75349acfedbc55986b5c477" translate="yes" xml:space="preserve">
          <source>Usually message passing between processes is done using queues or by using &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; objects returned by &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">일반적으로 프로세스 간 메시지 전달은 큐를 사용하거나 &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt; &lt;code&gt;Pipe()&lt;/code&gt; &lt;/a&gt; 반환 한 &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt; 객체 를 사용하여 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="55c3035b6a0c2c422567b7b94ec5c3d81b6f4353" translate="yes" xml:space="preserve">
          <source>Usually this option consists of the method &lt;code&gt;Scrollbar.set()&lt;/code&gt; of some scrollbar. This will cause the scrollbar to be updated whenever the view in the window changes.</source>
          <target state="translated">일반적으로이 옵션은 일부 스크롤 &lt;code&gt;Scrollbar.set()&lt;/code&gt; 메소드로 구성됩니다 . 그러면 창의보기가 변경 될 때마다 스크롤 막대가 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="948448f0d7e18600e63d50ac1f18a1bd083aad1f" translate="yes" xml:space="preserve">
          <source>Usually you can use &lt;a href=&quot;#unittest.TestCase.skipTest&quot;&gt;&lt;code&gt;TestCase.skipTest()&lt;/code&gt;&lt;/a&gt; or one of the skipping decorators instead of raising this directly.</source>
          <target state="translated">일반적으로 이것을 직접 올리는 대신 &lt;a href=&quot;#unittest.TestCase.skipTest&quot;&gt; &lt;code&gt;TestCase.skipTest()&lt;/code&gt; &lt;/a&gt; 또는 건너 뛰는 데코레이터 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7159aa4ebaad10cbad60df9f2f47fdab12006d8d" translate="yes" xml:space="preserve">
          <source>Usually you use the transformer like this:</source>
          <target state="translated">일반적으로 다음과 같이 변압기를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="3c8bb6feca38dd5baf6726db91fee35d699471bf" translate="yes" xml:space="preserve">
          <source>Usually your SQL operations will need to use values from Python variables. You shouldn&amp;rsquo;t assemble your query using Python&amp;rsquo;s string operations because doing so is insecure; it makes your program vulnerable to an SQL injection attack (see &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt; for humorous example of what can go wrong).</source>
          <target state="translated">일반적으로 SQL 작업은 Python 변수의 값을 사용해야합니다. 파이썬의 문자열 연산을 사용하여 쿼리를 어셈블해서는 안됩니다. 안전하지 않기 때문입니다. 프로그램이 SQL 인젝션 공격에 취약 해집니다 (오류가 발생할 수있는 유머러스 한 예는 &lt;a href=&quot;https://xkcd.com/327/&quot;&gt;https://xkcd.com/327/&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="1e88facb0b543dc9f14acbae6cf0f5ff030076b1" translate="yes" xml:space="preserve">
          <source>Usually, a timeout using &lt;a href=&quot;#test.support.INTERNET_TIMEOUT&quot;&gt;&lt;code&gt;INTERNET_TIMEOUT&lt;/code&gt;&lt;/a&gt; should not mark a test as failed, but skip the test instead: see &lt;a href=&quot;#test.support.socket_helper.transient_internet&quot;&gt;&lt;code&gt;transient_internet()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Usually, a timeout using &lt;a href=&quot;#test.support.INTERNET_TIMEOUT&quot;&gt; &lt;code&gt;INTERNET_TIMEOUT&lt;/code&gt; &lt;/a&gt; should not mark a test as failed, but skip the test instead: see &lt;a href=&quot;#test.support.socket_helper.transient_internet&quot;&gt; &lt;code&gt;transient_internet()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="18aef760d202fd986f9f4b8de779ecd32a97e992" translate="yes" xml:space="preserve">
          <source>Usually, ctypes does strict type checking. This means, if you have &lt;code&gt;POINTER(c_int)&lt;/code&gt; in the &lt;code&gt;argtypes&lt;/code&gt; list of a function or as the type of a member field in a structure definition, only instances of exactly the same type are accepted. There are some exceptions to this rule, where ctypes accepts other objects. For example, you can pass compatible array instances instead of pointer types. So, for &lt;code&gt;POINTER(c_int)&lt;/code&gt;, ctypes accepts an array of c_int:</source>
          <target state="translated">일반적으로 ctypes는 엄격한 유형 검사를 수행합니다. 이는 함수 의 &lt;code&gt;argtypes&lt;/code&gt; 목록에 또는 구조 정의의 멤버 필드 유형으로 &lt;code&gt;POINTER(c_int)&lt;/code&gt; 가있는 경우 정확히 동일한 유형의 인스턴스 만 허용됨을 의미합니다. 이 규칙에는 ctypes가 다른 객체를 허용하는 예외가 있습니다. 예를 들어, 포인터 유형 대신 호환 가능한 배열 인스턴스를 전달할 수 있습니다. 따라서 &lt;code&gt;POINTER(c_int)&lt;/code&gt; 경우 ctypes는 c_int 배열을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="4d36432a5729065510c52d7569f55dee8f7e78b0" translate="yes" xml:space="preserve">
          <source>Usually, the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#subscriptions&quot;&gt;subscription&lt;/a&gt; of container objects calls the method &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; of the object. However, the subscription of some containers&amp;rsquo; classes may call the classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt;&lt;code&gt;__class_getitem__()&lt;/code&gt;&lt;/a&gt; of the class instead. The classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt;&lt;code&gt;__class_getitem__()&lt;/code&gt;&lt;/a&gt; should return a &lt;code&gt;GenericAlias&lt;/code&gt; object.</source>
          <target state="translated">Usually, the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#subscriptions&quot;&gt;subscription&lt;/a&gt; of container objects calls the method &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt; of the object. However, the subscription of some containers&amp;rsquo; classes may call the classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt; &lt;code&gt;__class_getitem__()&lt;/code&gt; &lt;/a&gt; of the class instead. The classmethod &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__class_getitem__&quot;&gt; &lt;code&gt;__class_getitem__()&lt;/code&gt; &lt;/a&gt; should return a &lt;code&gt;GenericAlias&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="46defc487dd609e5e11afede6e42ed7efb746478" translate="yes" xml:space="preserve">
          <source>Usually, the number of elements output matches the input iterable. However, if the keyword argument &lt;em&gt;initial&lt;/em&gt; is provided, the accumulation leads off with the &lt;em&gt;initial&lt;/em&gt; value so that the output has one more element than the input iterable.</source>
          <target state="translated">일반적으로 출력되는 요소 수는 반복 가능한 입력과 일치합니다. 그러나 키워드 인수 &lt;em&gt;initial&lt;/em&gt; 이 제공되면 누적은 &lt;em&gt;초기&lt;/em&gt; 값으로 &lt;em&gt;시작&lt;/em&gt; 하여 출력에 입력 반복 가능 요소보다 하나 이상의 요소가 있습니다.</target>
        </trans-unit>
        <trans-unit id="18fdc5ee8b1f8fba8dabaa933373c0483ab7fad7" translate="yes" xml:space="preserve">
          <source>Utilities</source>
          <target state="translated">Utilities</target>
        </trans-unit>
        <trans-unit id="fdb7e6fac588b967be8115ae1239c9f13b01bc33" translate="yes" xml:space="preserve">
          <source>Utilities for working with ASCII characters, regardless of your locale settings.</source>
          <target state="translated">로케일 설정에 관계없이 ASCII 문자로 작업하기위한 유틸리티.</target>
        </trans-unit>
        <trans-unit id="102dc7d3bf538e66387889d7daeeb05e53a870a4" translate="yes" xml:space="preserve">
          <source>Utilities to compile all Python source files in a directory tree.</source>
          <target state="translated">디렉토리 트리에서 모든 Python 소스 파일을 컴파일하는 유틸리티</target>
        </trans-unit>
        <trans-unit id="894c08b4d341d3181d652622edf583cdb792b50d" translate="yes" xml:space="preserve">
          <source>Utilities to help work with fonts.</source>
          <target state="translated">글꼴 작업에 도움이되는 유틸리티.</target>
        </trans-unit>
        <trans-unit id="9b5439bb171dd02403cd4a0162c5e608f757fe9b" translate="yes" xml:space="preserve">
          <source>Utilities to run asyncio programs, create Tasks, and await on multiple things with timeouts.</source>
          <target state="translated">asyncio 프로그램을 실행하고 작업을 생성하며 시간 초과로 여러 항목을 기다리는 유틸리티</target>
        </trans-unit>
        <trans-unit id="4fafea3320bd24aef44e569f108bcf7bb663fa8f" translate="yes" xml:space="preserve">
          <source>Utilities to spawn subprocesses and run shell commands.</source>
          <target state="translated">서브 프로세스를 생성하고 쉘 명령을 실행하는 유틸리티.</target>
        </trans-unit>
        <trans-unit id="f16cdccb3faaa5e67faa6fdb65caa5cf29d51cbb" translate="yes" xml:space="preserve">
          <source>Utility functions</source>
          <target state="translated">유틸리티 기능</target>
        </trans-unit>
        <trans-unit id="6e7be9dc79ed50d8c704d7f221a2758927ee65a3" translate="yes" xml:space="preserve">
          <source>Uuencode file &lt;em&gt;in_file&lt;/em&gt; into file &lt;em&gt;out_file&lt;/em&gt;. The uuencoded file will have the header specifying &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;mode&lt;/em&gt; as the defaults for the results of decoding the file. The default defaults are taken from &lt;em&gt;in_file&lt;/em&gt;, or &lt;code&gt;'-'&lt;/code&gt; and &lt;code&gt;0o666&lt;/code&gt; respectively. If &lt;em&gt;backtick&lt;/em&gt; is true, zeros are represented by &lt;code&gt;'`'&lt;/code&gt; instead of spaces.</source>
          <target state="translated">uuencode 파일 &lt;em&gt;in_file&lt;/em&gt; 을 파일 &lt;em&gt;out_file로&lt;/em&gt; . 인코딩 된 파일에는 파일 디코딩 결과의 기본값으로 &lt;em&gt;이름&lt;/em&gt; 과 &lt;em&gt;모드&lt;/em&gt; 를 지정하는 헤더 가 있습니다. 기본 기본값은 &lt;em&gt;in_file&lt;/em&gt; 또는 각각 &lt;code&gt;'-'&lt;/code&gt; 및 &lt;code&gt;0o666&lt;/code&gt; 에서 가져옵니다 . 경우 &lt;em&gt;역 따옴표는&lt;/em&gt; 사실이다 영 (0)으로 표현된다 &lt;code&gt;'`'&lt;/code&gt; 대신 공간.</target>
        </trans-unit>
        <trans-unit id="51920a4103a076cddaea8c5320e3e3d41f0fe359" translate="yes" xml:space="preserve">
          <source>VRFY</source>
          <target state="translated">VRFY</target>
        </trans-unit>
        <trans-unit id="6ef9fae42b29329a1ed8c77701fe1700d757002f" translate="yes" xml:space="preserve">
          <source>Valid String Arg</source>
          <target state="translated">유효한 문자열 인수</target>
        </trans-unit>
        <trans-unit id="ae9f1d564485db39fcd34520a7886185a9f3d9bb" translate="yes" xml:space="preserve">
          <source>Valid enum Arg</source>
          <target state="translated">유효한 열거 형 Arg</target>
        </trans-unit>
        <trans-unit id="d11dea5084c554faaf9051f680e8d26ff170b6ad" translate="yes" xml:space="preserve">
          <source>Valid values are &lt;code&gt;7bit&lt;/code&gt;, &lt;code&gt;8bit&lt;/code&gt;, &lt;code&gt;base64&lt;/code&gt;, and &lt;code&gt;quoted-printable&lt;/code&gt;. See &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">유효한 값은 &lt;code&gt;7bit&lt;/code&gt; , &lt;code&gt;8bit&lt;/code&gt; , &lt;code&gt;base64&lt;/code&gt; 및 &lt;code&gt;quoted-printable&lt;/code&gt; 입니다. 자세한 내용은 &lt;a href=&quot;https://tools.ietf.org/html/rfc2045.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2045&lt;/strong&gt;&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4ed34a07f3d8b83630e9e822f76c6734a7177025" translate="yes" xml:space="preserve">
          <source>Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models.</source>
          <target state="translated">유효성 검사 파서는 무시할 수있는 공백의 각 청크를보고하기 위해이 방법을 사용해야합니다 (W3C XML 1.0 권장 사항, 섹션 2.10 참조).</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="0701d51e2238471096af133360d47b98e784ca3c" translate="yes" xml:space="preserve">
          <source>Value Types</source>
          <target state="translated">가치 유형</target>
        </trans-unit>
        <trans-unit id="2ee2c05664be5bc3b7425a3cd5c2eaeb9af87ebe" translate="yes" xml:space="preserve">
          <source>Value if not present</source>
          <target state="translated">존재하지 않는 경우의 값</target>
        </trans-unit>
        <trans-unit id="7dd7eb81edd524ab9b2cc8166a90a72809941195" translate="yes" xml:space="preserve">
          <source>Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry. This helps the registry perform efficiently.</source>
          <target state="translated">사용 가능한 메모리에 따라 값 길이가 제한됩니다. 긴 값 (2048 바이트 이상)은 구성 레지스트리에 저장된 파일 이름을 가진 파일로 저장해야합니다. 이렇게하면 레지스트리가 효율적으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="ff4442e3ee6e85b03ce0d04c09a9f9afc7926b83" translate="yes" xml:space="preserve">
          <source>Value may be supplied as either a keyword or positional argument (this is the standard binding behaviour for functions implemented in Python.)</source>
          <target state="translated">값은 키워드 또는 위치 인수로 제공 될 수 있습니다 (Python으로 구현 된 함수에 대한 표준 바인딩 동작입니다).</target>
        </trans-unit>
        <trans-unit id="e606eb6146ca90bd2780303c47db18287309d201" translate="yes" xml:space="preserve">
          <source>Value must be supplied as a keyword argument. Keyword only parameters are those which appear after a &lt;code&gt;*&lt;/code&gt; or &lt;code&gt;*args&lt;/code&gt; entry in a Python function definition.</source>
          <target state="translated">키워드 인수로 값을 제공해야합니다. 키워드 전용 매개 변수는 Python 함수 정의에서 &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;*args&lt;/code&gt; 항목 다음에 나타나는 매개 변수 입니다.</target>
        </trans-unit>
        <trans-unit id="f281af900c7055431a7ba9336e9f5b33972ace2e" translate="yes" xml:space="preserve">
          <source>Value must be supplied as a positional argument. Positional only parameters are those which appear before a &lt;code&gt;/&lt;/code&gt; entry (if present) in a Python function definition.</source>
          <target state="translated">위치 인수로 값을 제공해야합니다. 위치 만 매개 변수는 Python 함수 정의에서 &lt;code&gt;/&lt;/code&gt; 항목 (있는 경우) 앞에 표시되는 매개 변수 입니다.</target>
        </trans-unit>
        <trans-unit id="86d356e451eb275892ab84a0a8cabfd82d894744" translate="yes" xml:space="preserve">
          <source>Value of function key &lt;em&gt;n&lt;/em&gt;</source>
          <target state="translated">기능 키 &lt;em&gt;n의&lt;/em&gt; 값&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
